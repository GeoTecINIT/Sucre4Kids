
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007624  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb640  000bb640  0000b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb664  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003d3b0  000bb668  0001d3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001388  2003d468  2003d468  0002d468  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb720  000bb720  0002b720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb748  000bb748  0002b748  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00165e40  00000000  00000000  0002b74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019051  00000000  00000000  0019158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000506b8  00000000  00000000  001aa5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003740  00000000  00000000  001fac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bec8  00000000  00000000  001fe3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce0  00000000  00000000  0020a29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000599ed  00000000  00000000  0024ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c3b8  00000000  00000000  002a896a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a670  00000000  00000000  003e4d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fd15 	bl	b9a5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fd1d 	bl	b9a78 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003d3b0 	.word	0x2003d3b0
   b4048:	000bb668 	.word	0x000bb668
   b404c:	2003d468 	.word	0x2003d468
   b4050:	2003d468 	.word	0x2003d468
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fefd 	bl	b8e5c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bb614 	.word	0x000bb614
   b407c:	000bb638 	.word	0x000bb638

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f001 b98a 	b.w	b5398 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f001 fa41 	bl	b550c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 be9d 	b.w	b8dcc <_post_loop>

000b4092 <_Znaj>:
   b4092:	f004 bb5d 	b.w	b8750 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f004 bb63 	b.w	b8760 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f004 fab8 	bl	b8618 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b8369 	.word	0x000b8369
   b40b0:	000b9cbc 	.word	0x000b9cbc

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b40c4:	4a08      	ldr	r2, [pc, #32]	; (b40e8 <_Z10borradoALLi.part.0+0x24>)
   b40c6:	2300      	movs	r3, #0
   b40c8:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b40ca:	4a08      	ldr	r2, [pc, #32]	; (b40ec <_Z10borradoALLi.part.0+0x28>)
   b40cc:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b40ce:	4a08      	ldr	r2, [pc, #32]	; (b40f0 <_Z10borradoALLi.part.0+0x2c>)
   b40d0:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b40d2:	4a08      	ldr	r2, [pc, #32]	; (b40f4 <_Z10borradoALLi.part.0+0x30>)
   b40d4:	f04f 31ff 	mov.w	r1, #4294967295
   b40d8:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b40da:	4a07      	ldr	r2, [pc, #28]	; (b40f8 <_Z10borradoALLi.part.0+0x34>)
   b40dc:	2103      	movs	r1, #3
   b40de:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b40e0:	4a06      	ldr	r2, [pc, #24]	; (b40fc <_Z10borradoALLi.part.0+0x38>)
   b40e2:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b40e4:	4770      	bx	lr
   b40e6:	bf00      	nop
   b40e8:	2003d475 	.word	0x2003d475
   b40ec:	2003d484 	.word	0x2003d484
   b40f0:	2003d474 	.word	0x2003d474
   b40f4:	2003d3d8 	.word	0x2003d3d8
   b40f8:	2003d3dc 	.word	0x2003d3dc
   b40fc:	2003e198 	.word	0x2003e198

000b4100 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4100:	b40e      	push	{r1, r2, r3}
   b4102:	b503      	push	{r0, r1, lr}
   b4104:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4106:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4108:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b410c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b410e:	f004 fdee 	bl	b8cee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4112:	b002      	add	sp, #8
   b4114:	f85d eb04 	ldr.w	lr, [sp], #4
   b4118:	b003      	add	sp, #12
   b411a:	4770      	bx	lr

000b411c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b503      	push	{r0, r1, lr}
   b4120:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4122:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4128:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b412a:	f004 fde0 	bl	b8cee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b412e:	b002      	add	sp, #8
   b4130:	f85d eb04 	ldr.w	lr, [sp], #4
   b4134:	b003      	add	sp, #12
   b4136:	4770      	bx	lr

000b4138 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4138:	b507      	push	{r0, r1, r2, lr}
   b413a:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b413c:	a801      	add	r0, sp, #4
   b413e:	f003 fa8d 	bl	b765c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4142:	a801      	add	r0, sp, #4
   b4144:	f003 fa8c 	bl	b7660 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4148:	2809      	cmp	r0, #9
   b414a:	bf8c      	ite	hi
   b414c:	2000      	movhi	r0, #0
   b414e:	2001      	movls	r0, #1
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4156:	b507      	push	{r0, r1, r2, lr}
   b4158:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b415a:	a801      	add	r0, sp, #4
   b415c:	f003 fa7e 	bl	b765c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4160:	a801      	add	r0, sp, #4
   b4162:	f003 fa7d 	bl	b7660 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4166:	280a      	cmp	r0, #10
   b4168:	bfd4      	ite	le
   b416a:	2000      	movle	r0, #0
   b416c:	2001      	movgt	r0, #1
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4174:	2802      	cmp	r0, #2
{
   b4176:	b508      	push	{r3, lr}
    switch (puerto)
   b4178:	d00b      	beq.n	b4192 <_Z5siLuzi+0x1e>
   b417a:	2804      	cmp	r0, #4
   b417c:	d00b      	beq.n	b4196 <_Z5siLuzi+0x22>
   b417e:	b960      	cbnz	r0, b419a <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4180:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4182:	f005 f9f4 	bl	b956e <analogRead>
   b4186:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b418a:	bfb4      	ite	lt
   b418c:	2000      	movlt	r0, #0
   b418e:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4190:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4192:	2011      	movs	r0, #17
   b4194:	e7f5      	b.n	b4182 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4196:	200f      	movs	r0, #15
   b4198:	e7f3      	b.n	b4182 <_Z5siLuzi+0xe>
    switch (puerto)
   b419a:	2000      	movs	r0, #0
   b419c:	e7f8      	b.n	b4190 <_Z5siLuzi+0x1c>

000b419e <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b419e:	2802      	cmp	r0, #2
{
   b41a0:	b508      	push	{r3, lr}
    switch (puerto)
   b41a2:	d00b      	beq.n	b41bc <_Z5noLuzi+0x1e>
   b41a4:	2804      	cmp	r0, #4
   b41a6:	d00b      	beq.n	b41c0 <_Z5noLuzi+0x22>
   b41a8:	b960      	cbnz	r0, b41c4 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41aa:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41ac:	f005 f9df 	bl	b956e <analogRead>
   b41b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41b4:	bfcc      	ite	gt
   b41b6:	2000      	movgt	r0, #0
   b41b8:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41ba:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41bc:	2011      	movs	r0, #17
   b41be:	e7f5      	b.n	b41ac <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41c0:	200f      	movs	r0, #15
   b41c2:	e7f3      	b.n	b41ac <_Z5noLuzi+0xe>
    switch (puerto)
   b41c4:	2000      	movs	r0, #0
   b41c6:	e7f8      	b.n	b41ba <_Z5noLuzi+0x1c>

000b41c8 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b41c8:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b41ca:	b280      	uxth	r0, r0
   b41cc:	f005 f9cf 	bl	b956e <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b41d0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41d4:	bfb4      	ite	lt
   b41d6:	2000      	movlt	r0, #0
   b41d8:	2001      	movge	r0, #1
   b41da:	bd08      	pop	{r3, pc}

000b41dc <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41dc:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41de:	b280      	uxth	r0, r0
   b41e0:	f005 f9c5 	bl	b956e <analogRead>
        return true;
    return false;
}
   b41e4:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41e8:	bfcc      	ite	gt
   b41ea:	2000      	movgt	r0, #0
   b41ec:	2001      	movle	r0, #1
   b41ee:	bd08      	pop	{r3, pc}

000b41f0 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41f0:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41f2:	b280      	uxth	r0, r0
   b41f4:	2100      	movs	r1, #0
   b41f6:	9001      	str	r0, [sp, #4]
   b41f8:	f005 f97c 	bl	b94f4 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b41fc:	9801      	ldr	r0, [sp, #4]
   b41fe:	f005 f9a3 	bl	b9548 <digitalRead>
        return true;
    return false;
}
   b4202:	1e43      	subs	r3, r0, #1
   b4204:	4258      	negs	r0, r3
   b4206:	4158      	adcs	r0, r3
   b4208:	b003      	add	sp, #12
   b420a:	f85d fb04 	ldr.w	pc, [sp], #4

000b420e <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b420e:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4210:	b280      	uxth	r0, r0
   b4212:	2100      	movs	r1, #0
   b4214:	9001      	str	r0, [sp, #4]
   b4216:	f005 f96d 	bl	b94f4 <pinMode>
    if (digitalRead(puerto) == LOW)
   b421a:	9801      	ldr	r0, [sp, #4]
   b421c:	f005 f994 	bl	b9548 <digitalRead>
        return true;
    return false;
}
   b4220:	fab0 f080 	clz	r0, r0
   b4224:	0940      	lsrs	r0, r0, #5
   b4226:	b003      	add	sp, #12
   b4228:	f85d fb04 	ldr.w	pc, [sp], #4

000b422c <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b422c:	2802      	cmp	r0, #2
{
   b422e:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4230:	d024      	beq.n	b427c <_Z10siRotativoi+0x50>
   b4232:	2804      	cmp	r0, #4
   b4234:	d024      	beq.n	b4280 <_Z10siRotativoi+0x54>
   b4236:	b918      	cbnz	r0, b4240 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4238:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b423a:	f005 f998 	bl	b956e <analogRead>
   b423e:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4240:	eddd 7a01 	vldr	s15, [sp, #4]
   b4244:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4284 <_Z10siRotativoi+0x58>
   b4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b424c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4250:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4254:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4258:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4288 <_Z10siRotativoi+0x5c>
   b425c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4264:	eddf 7a09 	vldr	s15, [pc, #36]	; b428c <_Z10siRotativoi+0x60>
   b4268:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4270:	bfac      	ite	ge
   b4272:	2001      	movge	r0, #1
   b4274:	2000      	movlt	r0, #0
   b4276:	b003      	add	sp, #12
   b4278:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b427c:	2011      	movs	r0, #17
   b427e:	e7dc      	b.n	b423a <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4280:	200f      	movs	r0, #15
   b4282:	e7da      	b.n	b423a <_Z10siRotativoi+0xe>
   b4284:	447fc000 	.word	0x447fc000
   b4288:	43960000 	.word	0x43960000
   b428c:	442a0000 	.word	0x442a0000

000b4290 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4290:	2802      	cmp	r0, #2
{
   b4292:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4294:	d024      	beq.n	b42e0 <_Z10noRotativoi+0x50>
   b4296:	2804      	cmp	r0, #4
   b4298:	d024      	beq.n	b42e4 <_Z10noRotativoi+0x54>
   b429a:	b918      	cbnz	r0, b42a4 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b429c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b429e:	f005 f966 	bl	b956e <analogRead>
   b42a2:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b42a4:	eddd 7a01 	vldr	s15, [sp, #4]
   b42a8:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42e8 <_Z10noRotativoi+0x58>
   b42ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b42b8:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b42bc:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42ec <_Z10noRotativoi+0x5c>
   b42c0:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b42c8:	eddf 7a09 	vldr	s15, [pc, #36]	; b42f0 <_Z10noRotativoi+0x60>
   b42cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42d4:	bf94      	ite	ls
   b42d6:	2001      	movls	r0, #1
   b42d8:	2000      	movhi	r0, #0
   b42da:	b003      	add	sp, #12
   b42dc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42e0:	2011      	movs	r0, #17
   b42e2:	e7dc      	b.n	b429e <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42e4:	200f      	movs	r0, #15
   b42e6:	e7da      	b.n	b429e <_Z10noRotativoi+0xe>
   b42e8:	447fc000 	.word	0x447fc000
   b42ec:	43960000 	.word	0x43960000
   b42f0:	442a0000 	.word	0x442a0000

000b42f4 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b42f4:	b530      	push	{r4, r5, lr}
   b42f6:	ed2d 8b02 	vpush	{d8}
   b42fa:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b42fc:	b2c1      	uxtb	r1, r0
   b42fe:	2306      	movs	r3, #6
   b4300:	220b      	movs	r2, #11
   b4302:	a801      	add	r0, sp, #4
   b4304:	f003 f9d0 	bl	b76a8 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4308:	a801      	add	r0, sp, #4
   b430a:	f003 f9d4 	bl	b76b6 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b430e:	a801      	add	r0, sp, #4
   b4310:	f003 fa8e 	bl	b7830 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4314:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b431c:	eeb4 0a40 	vcmp.f32	s0, s0
   b4320:	bf0c      	ite	eq
   b4322:	2401      	moveq	r4, #1
   b4324:	2400      	movne	r4, #0
   b4326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b432a:	bf68      	it	vs
   b432c:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4330:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4334:	2c00      	cmp	r4, #0
   b4336:	d1ea      	bne.n	b430e <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4338:	f004 feb2 	bl	b90a0 <_Z16_fetch_usbserialv>
   b433c:	4605      	mov	r5, r0
   b433e:	ee18 0a10 	vmov	r0, s16
   b4342:	f005 fb25 	bl	b9990 <__aeabi_f2d>
   b4346:	4602      	mov	r2, r0
   b4348:	460b      	mov	r3, r1
   b434a:	4628      	mov	r0, r5
   b434c:	490a      	ldr	r1, [pc, #40]	; (b4378 <_Z8tempFrioi+0x84>)
   b434e:	f7ff fee5 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4352:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b435a:	dd08      	ble.n	b436e <_Z8tempFrioi+0x7a>
   b435c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4360:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4368:	bf4c      	ite	mi
   b436a:	2401      	movmi	r4, #1
   b436c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b436e:	4620      	mov	r0, r4
   b4370:	b007      	add	sp, #28
   b4372:	ecbd 8b02 	vpop	{d8}
   b4376:	bd30      	pop	{r4, r5, pc}
   b4378:	000b9cd1 	.word	0x000b9cd1

000b437c <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b437c:	b510      	push	{r4, lr}
   b437e:	ed2d 8b02 	vpush	{d8}
   b4382:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4384:	b2c1      	uxtb	r1, r0
   b4386:	2306      	movs	r3, #6
   b4388:	220b      	movs	r2, #11
   b438a:	a801      	add	r0, sp, #4
   b438c:	f003 f98c 	bl	b76a8 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4390:	a801      	add	r0, sp, #4
   b4392:	f003 f990 	bl	b76b6 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4396:	a801      	add	r0, sp, #4
   b4398:	f003 fa4a 	bl	b7830 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b439c:	eeb4 0a40 	vcmp.f32	s0, s0
   b43a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43a4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b43a8:	d6f5      	bvs.n	b4396 <_Z12tempTempladoi+0x1a>
   b43aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43b2:	d0f0      	beq.n	b4396 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b43b4:	f004 fe74 	bl	b90a0 <_Z16_fetch_usbserialv>
   b43b8:	4604      	mov	r4, r0
   b43ba:	ee18 0a10 	vmov	r0, s16
   b43be:	f005 fae7 	bl	b9990 <__aeabi_f2d>
   b43c2:	4602      	mov	r2, r0
   b43c4:	460b      	mov	r3, r1
   b43c6:	4620      	mov	r0, r4
   b43c8:	490c      	ldr	r1, [pc, #48]	; (b43fc <_Z12tempTempladoi+0x80>)
   b43ca:	f7ff fea7 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b43ce:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b43d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43da:	dc04      	bgt.n	b43e6 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43dc:	2000      	movs	r0, #0
}
   b43de:	b006      	add	sp, #24
   b43e0:	ecbd 8b02 	vpop	{d8}
   b43e4:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43e6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f2:	bf4c      	ite	mi
   b43f4:	2001      	movmi	r0, #1
   b43f6:	2000      	movpl	r0, #0
   b43f8:	e7f1      	b.n	b43de <_Z12tempTempladoi+0x62>
   b43fa:	bf00      	nop
   b43fc:	000b9cd1 	.word	0x000b9cd1

000b4400 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4400:	b530      	push	{r4, r5, lr}
   b4402:	ed2d 8b02 	vpush	{d8}
   b4406:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4408:	b2c1      	uxtb	r1, r0
   b440a:	2306      	movs	r3, #6
   b440c:	220b      	movs	r2, #11
   b440e:	a801      	add	r0, sp, #4
   b4410:	f003 f94a 	bl	b76a8 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4414:	a801      	add	r0, sp, #4
   b4416:	f003 f94e 	bl	b76b6 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b441a:	a801      	add	r0, sp, #4
   b441c:	f003 fa08 	bl	b7830 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4420:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4428:	eeb4 0a40 	vcmp.f32	s0, s0
   b442c:	bf0c      	ite	eq
   b442e:	2401      	moveq	r4, #1
   b4430:	2400      	movne	r4, #0
   b4432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4436:	bf68      	it	vs
   b4438:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b443c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4440:	2c00      	cmp	r4, #0
   b4442:	d1ea      	bne.n	b441a <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4444:	f004 fe2c 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4448:	4605      	mov	r5, r0
   b444a:	ee18 0a10 	vmov	r0, s16
   b444e:	f005 fa9f 	bl	b9990 <__aeabi_f2d>
   b4452:	4602      	mov	r2, r0
   b4454:	460b      	mov	r3, r1
   b4456:	4628      	mov	r0, r5
   b4458:	490b      	ldr	r1, [pc, #44]	; (b4488 <_Z9tempCalori+0x88>)
   b445a:	f7ff fe5f 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b445e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4462:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b446a:	dd08      	ble.n	b447e <_Z9tempCalori+0x7e>
   b446c:	eddf 7a07 	vldr	s15, [pc, #28]	; b448c <_Z9tempCalori+0x8c>
   b4470:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4478:	bf4c      	ite	mi
   b447a:	2401      	movmi	r4, #1
   b447c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b447e:	4620      	mov	r0, r4
   b4480:	b007      	add	sp, #28
   b4482:	ecbd 8b02 	vpop	{d8}
   b4486:	bd30      	pop	{r4, r5, pc}
   b4488:	000b9cd1 	.word	0x000b9cd1
   b448c:	42480000 	.word	0x42480000

000b4490 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4490:	b508      	push	{r3, lr}
   b4492:	4603      	mov	r3, r0
   b4494:	3b01      	subs	r3, #1
   b4496:	4610      	mov	r0, r2
   b4498:	2b06      	cmp	r3, #6
   b449a:	d843      	bhi.n	b4524 <_Z10leerSensoriii+0x94>
   b449c:	e8df f003 	tbb	[pc, r3]
   b44a0:	1b120904 	.word	0x1b120904
   b44a4:	2d24      	.short	0x2d24
   b44a6:	04          	.byte	0x04
   b44a7:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44a8:	bbc1      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b44aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44ae:	f7ff be43 	b.w	b4138 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b2:	b919      	cbnz	r1, b44bc <_Z10leerSensoriii+0x2c>
   b44b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b8:	f7ff be71 	b.w	b419e <_Z5noLuzi>
   b44bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44c0:	f7ff be58 	b.w	b4174 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44c4:	b919      	cbnz	r1, b44ce <_Z10leerSensoriii+0x3e>
   b44c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44ca:	f7ff be87 	b.w	b41dc <_Z7noRuidoi>
   b44ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44d2:	f7ff be79 	b.w	b41c8 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44d6:	b919      	cbnz	r1, b44e0 <_Z10leerSensoriii+0x50>
   b44d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44dc:	f7ff be97 	b.w	b420e <_Z7noBotoni>
   b44e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44e4:	f7ff be84 	b.w	b41f0 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44e8:	b919      	cbnz	r1, b44f2 <_Z10leerSensoriii+0x62>
   b44ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44ee:	f7ff becf 	b.w	b4290 <_Z10noRotativoi>
   b44f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44f6:	f7ff be99 	b.w	b422c <_Z10siRotativoi>
        switch (condicion)
   b44fa:	2901      	cmp	r1, #1
   b44fc:	d006      	beq.n	b450c <_Z10leerSensoriii+0x7c>
   b44fe:	2902      	cmp	r1, #2
   b4500:	d008      	beq.n	b4514 <_Z10leerSensoriii+0x84>
   b4502:	b959      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>
   b4504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4508:	f7ff bef4 	b.w	b42f4 <_Z8tempFrioi>
   b450c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4510:	f7ff bf34 	b.w	b437c <_Z12tempTempladoi>
   b4514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4518:	f7ff bf72 	b.w	b4400 <_Z9tempCalori>
   b451c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4520:	f7ff be19 	b.w	b4156 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4524:	f004 fdbc 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4528:	4902      	ldr	r1, [pc, #8]	; (b4534 <_Z10leerSensoriii+0xa4>)
   b452a:	f004 fbb8 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b452e:	2000      	movs	r0, #0
   b4530:	bd08      	pop	{r3, pc}
   b4532:	bf00      	nop
   b4534:	000b9cda 	.word	0x000b9cda

000b4538 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b4538:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b453a:	2300      	movs	r3, #0
   b453c:	4804      	ldr	r0, [pc, #16]	; (b4550 <_Z9ledApagarv+0x18>)
   b453e:	9300      	str	r3, [sp, #0]
   b4540:	461a      	mov	r2, r3
   b4542:	4619      	mov	r1, r3
   b4544:	f003 fe4e 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4548:	b003      	add	sp, #12
   b454a:	f85d fb04 	ldr.w	pc, [sp], #4
   b454e:	bf00      	nop
   b4550:	2003de4c 	.word	0x2003de4c

000b4554 <_Z7ledRojov>:
void ledRojo()
{
   b4554:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4556:	2300      	movs	r3, #0
   b4558:	4804      	ldr	r0, [pc, #16]	; (b456c <_Z7ledRojov+0x18>)
   b455a:	9300      	str	r3, [sp, #0]
   b455c:	22ff      	movs	r2, #255	; 0xff
   b455e:	4619      	mov	r1, r3
   b4560:	f003 fe40 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4564:	b003      	add	sp, #12
   b4566:	f85d fb04 	ldr.w	pc, [sp], #4
   b456a:	bf00      	nop
   b456c:	2003de4c 	.word	0x2003de4c

000b4570 <_Z8ledVerdev>:
void ledVerde()
{
   b4570:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4572:	230a      	movs	r3, #10
   b4574:	2200      	movs	r2, #0
   b4576:	9300      	str	r3, [sp, #0]
   b4578:	4803      	ldr	r0, [pc, #12]	; (b4588 <_Z8ledVerdev+0x18>)
   b457a:	23ff      	movs	r3, #255	; 0xff
   b457c:	4611      	mov	r1, r2
   b457e:	f003 fe31 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4582:	b003      	add	sp, #12
   b4584:	f85d fb04 	ldr.w	pc, [sp], #4
   b4588:	2003de4c 	.word	0x2003de4c

000b458c <_Z7ledAzulv>:
void ledAzul()
{
   b458c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b458e:	23ff      	movs	r3, #255	; 0xff
   b4590:	9300      	str	r3, [sp, #0]
   b4592:	2300      	movs	r3, #0
   b4594:	4803      	ldr	r0, [pc, #12]	; (b45a4 <_Z7ledAzulv+0x18>)
   b4596:	461a      	mov	r2, r3
   b4598:	4619      	mov	r1, r3
   b459a:	f003 fe23 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b459e:	b003      	add	sp, #12
   b45a0:	f85d fb04 	ldr.w	pc, [sp], #4
   b45a4:	2003de4c 	.word	0x2003de4c

000b45a8 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b45a8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b45aa:	2100      	movs	r1, #0
   b45ac:	4804      	ldr	r0, [pc, #16]	; (b45c0 <_Z11ledAmarillov+0x18>)
   b45ae:	9100      	str	r1, [sp, #0]
   b45b0:	23e9      	movs	r3, #233	; 0xe9
   b45b2:	22ff      	movs	r2, #255	; 0xff
   b45b4:	f003 fe16 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45b8:	b003      	add	sp, #12
   b45ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b45be:	bf00      	nop
   b45c0:	2003de4c 	.word	0x2003de4c

000b45c4 <_Z9ledMoradov>:
void ledMorado()
{
   b45c4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b45c6:	2375      	movs	r3, #117	; 0x75
   b45c8:	9300      	str	r3, [sp, #0]
   b45ca:	4804      	ldr	r0, [pc, #16]	; (b45dc <_Z9ledMoradov+0x18>)
   b45cc:	2346      	movs	r3, #70	; 0x46
   b45ce:	226c      	movs	r2, #108	; 0x6c
   b45d0:	2100      	movs	r1, #0
   b45d2:	f003 fe07 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45d6:	b003      	add	sp, #12
   b45d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b45dc:	2003de4c 	.word	0x2003de4c

000b45e0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b45e0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b45e2:	2100      	movs	r1, #0
   b45e4:	4804      	ldr	r0, [pc, #16]	; (b45f8 <_Z10ledNaranjav+0x18>)
   b45e6:	9100      	str	r1, [sp, #0]
   b45e8:	2380      	movs	r3, #128	; 0x80
   b45ea:	22ff      	movs	r2, #255	; 0xff
   b45ec:	f003 fdfa 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45f0:	b003      	add	sp, #12
   b45f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b45f6:	bf00      	nop
   b45f8:	2003de4c 	.word	0x2003de4c

000b45fc <_Z9ledBlancov>:
void ledBlanco()
{
   b45fc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b45fe:	23ff      	movs	r3, #255	; 0xff
   b4600:	4804      	ldr	r0, [pc, #16]	; (b4614 <_Z9ledBlancov+0x18>)
   b4602:	9300      	str	r3, [sp, #0]
   b4604:	461a      	mov	r2, r3
   b4606:	2100      	movs	r1, #0
   b4608:	f003 fdec 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b460c:	b003      	add	sp, #12
   b460e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4612:	bf00      	nop
   b4614:	2003de4c 	.word	0x2003de4c

000b4618 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b4618:	b510      	push	{r4, lr}
   switch (counter)
   b461a:	4c11      	ldr	r4, [pc, #68]	; (b4660 <_Z11ledArcoirisv+0x48>)
   b461c:	6823      	ldr	r3, [r4, #0]
   b461e:	2b05      	cmp	r3, #5
   b4620:	d809      	bhi.n	b4636 <_Z11ledArcoirisv+0x1e>
   b4622:	e8df f003 	tbb	[pc, r3]
   b4626:	0d03      	.short	0x0d03
   b4628:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b462c:	f7ff ff92 	bl	b4554 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b4630:	6823      	ldr	r3, [r4, #0]
   b4632:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b4634:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b463a:	2096      	movs	r0, #150	; 0x96
   b463c:	f004 bb9a 	b.w	b8d74 <delay>
      ledNaranja();
   b4640:	f7ff ffce 	bl	b45e0 <_Z10ledNaranjav>
      counter++;
   b4644:	e7f4      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b4646:	f7ff ffaf 	bl	b45a8 <_Z11ledAmarillov>
      counter++;
   b464a:	e7f1      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b464c:	f7ff ff90 	bl	b4570 <_Z8ledVerdev>
      counter++;
   b4650:	e7ee      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b4652:	f7ff ffb7 	bl	b45c4 <_Z9ledMoradov>
   b4656:	e7eb      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b4658:	f7ff ff98 	bl	b458c <_Z7ledAzulv>
      counter = 0;
   b465c:	2300      	movs	r3, #0
   b465e:	e7e9      	b.n	b4634 <_Z11ledArcoirisv+0x1c>
   b4660:	2003daa4 	.word	0x2003daa4

000b4664 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4664:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4666:	2101      	movs	r1, #1
   b4668:	2006      	movs	r0, #6
   b466a:	f004 ff54 	bl	b9516 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b466e:	2101      	movs	r1, #1
   b4670:	2006      	movs	r0, #6
   b4672:	f004 ff50 	bl	b9516 <digitalWrite>
   digitalWrite(D7, HIGH);
   b4676:	2101      	movs	r1, #1
   b4678:	2007      	movs	r0, #7
   b467a:	f004 ff4c 	bl	b9516 <digitalWrite>
   digitalWrite(D7, 1);
}
   b467e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4682:	2101      	movs	r1, #1
   b4684:	2007      	movs	r0, #7
   b4686:	f004 bf46 	b.w	b9516 <digitalWrite>

000b468a <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b468a:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b468c:	2100      	movs	r1, #0
   b468e:	2006      	movs	r0, #6
   b4690:	f004 ff41 	bl	b9516 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4694:	2100      	movs	r1, #0
   b4696:	2006      	movs	r0, #6
   b4698:	f004 ff3d 	bl	b9516 <digitalWrite>
   digitalWrite(D7, LOW);
   b469c:	2100      	movs	r1, #0
   b469e:	2007      	movs	r0, #7
   b46a0:	f004 ff39 	bl	b9516 <digitalWrite>
   digitalWrite(D7, 0);
}
   b46a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b46a8:	2100      	movs	r1, #0
   b46aa:	2007      	movs	r0, #7
   b46ac:	f004 bf33 	b.w	b9516 <digitalWrite>

000b46b0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b46b0:	b508      	push	{r3, lr}
   pitidoON0();
   b46b2:	f7ff ffd7 	bl	b4664 <_Z9pitidoON0v>
   delay(100);
   b46b6:	2064      	movs	r0, #100	; 0x64
   b46b8:	f004 fb5c 	bl	b8d74 <delay>
   pitidoOFF0();
   b46bc:	f7ff ffe5 	bl	b468a <_Z10pitidoOFF0v>
   delay(100);
}
   b46c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b46c4:	2064      	movs	r0, #100	; 0x64
   b46c6:	f004 bb55 	b.w	b8d74 <delay>

000b46ca <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b46ca:	b108      	cbz	r0, b46d0 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b46cc:	f7ff bf5e 	b.w	b458c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b46d0:	f7ff bf86 	b.w	b45e0 <_Z10ledNaranjav>

000b46d4 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b46d4:	b108      	cbz	r0, b46da <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b46d6:	f7ff bf67 	b.w	b45a8 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b46da:	f7ff bf73 	b.w	b45c4 <_Z9ledMoradov>

000b46de <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b46de:	b108      	cbz	r0, b46e4 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b46e0:	f7ff bf46 	b.w	b4570 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b46e4:	f7ff bf36 	b.w	b4554 <_Z7ledRojov>

000b46e8 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b46e8:	b508      	push	{r3, lr}
   if (estado)
   b46ea:	b160      	cbz	r0, b4706 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b46ec:	f7ff ff86 	bl	b45fc <_Z9ledBlancov>
      delay(400);
   b46f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b46f4:	f004 fb3e 	bl	b8d74 <delay>
      ledApagar();
   b46f8:	f7ff ff1e 	bl	b4538 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b46fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4700:	20c8      	movs	r0, #200	; 0xc8
   b4702:	f004 bb37 	b.w	b8d74 <delay>
}
   b4706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b470a:	f7ff bf15 	b.w	b4538 <_Z9ledApagarv>

000b470e <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b470e:	b108      	cbz	r0, b4714 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b4710:	f7ff bf74 	b.w	b45fc <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b4714:	f7ff bf10 	b.w	b4538 <_Z9ledApagarv>

000b4718 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b4718:	b108      	cbz	r0, b471e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b471a:	f7ff bf7d 	b.w	b4618 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b471e:	f7ff bf0b 	b.w	b4538 <_Z9ledApagarv>

000b4722 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b4722:	b108      	cbz	r0, b4728 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4724:	f7ff bfc4 	b.w	b46b0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4728:	f7ff bfaf 	b.w	b468a <_Z10pitidoOFF0v>

000b472c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b472c:	b108      	cbz	r0, b4732 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b472e:	f7ff bf99 	b.w	b4664 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4732:	f7ff bfaa 	b.w	b468a <_Z10pitidoOFF0v>
	...

000b4738 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   b4738:	4603      	mov	r3, r0
   b473a:	b513      	push	{r0, r1, r4, lr}
   b473c:	460c      	mov	r4, r1
   b473e:	4610      	mov	r0, r2
   switch (id)
   b4740:	b14b      	cbz	r3, b4756 <_Z15activarActuadoriib+0x1e>
   b4742:	2b01      	cmp	r3, #1
   b4744:	d02c      	beq.n	b47a0 <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4746:	f004 fcab 	bl	b90a0 <_Z16_fetch_usbserialv>
   b474a:	491e      	ldr	r1, [pc, #120]	; (b47c4 <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b474c:	b002      	add	sp, #8
   b474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b4752:	f004 baa4 	b.w	b8c9e <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4756:	2905      	cmp	r1, #5
   b4758:	d8f5      	bhi.n	b4746 <_Z15activarActuadoriib+0xe>
   b475a:	e8df f001 	tbb	[pc, r1]
   b475e:	0803      	.short	0x0803
   b4760:	1c17120d 	.word	0x1c17120d
}
   b4764:	b002      	add	sp, #8
   b4766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b476a:	f7ff bfb8 	b.w	b46de <_Z12ledVerdeRojob>
}
   b476e:	b002      	add	sp, #8
   b4770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4774:	f7ff bfae 	b.w	b46d4 <_Z17ledMoradoAmarillob>
}
   b4778:	b002      	add	sp, #8
   b477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b477e:	f7ff bfa4 	b.w	b46ca <_Z14ledAzulNaranjab>
}
   b4782:	b002      	add	sp, #8
   b4784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4788:	f7ff bfae 	b.w	b46e8 <_Z9ledBlink0b>
}
   b478c:	b002      	add	sp, #8
   b478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b4792:	f7ff bfc1 	b.w	b4718 <_Z12ledArcoiris0b>
}
   b4796:	b002      	add	sp, #8
   b4798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b479c:	f7ff bfb7 	b.w	b470e <_Z8ledOnOffb>
   b47a0:	9201      	str	r2, [sp, #4]
      ledApagar();
   b47a2:	f7ff fec9 	bl	b4538 <_Z9ledApagarv>
      switch (opcion) {
   b47a6:	9801      	ldr	r0, [sp, #4]
   b47a8:	b134      	cbz	r4, b47b8 <_Z15activarActuadoriib+0x80>
   b47aa:	2c01      	cmp	r4, #1
   b47ac:	d1cb      	bne.n	b4746 <_Z15activarActuadoriib+0xe>
}
   b47ae:	b002      	add	sp, #8
   b47b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b47b4:	f7ff bfb5 	b.w	b4722 <_Z13blinkAndSleepb>
}
   b47b8:	b002      	add	sp, #8
   b47ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b47be:	f7ff bfb5 	b.w	b472c <_Z8zumbadorb>
   b47c2:	bf00      	nop
   b47c4:	000b9ced 	.word	0x000b9ced

000b47c8 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b47c8:	b508      	push	{r3, lr}
    ledBlanco();
   b47ca:	f7ff ff17 	bl	b45fc <_Z9ledBlancov>
    delay(400);
   b47ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b47d2:	f004 facf 	bl	b8d74 <delay>
    ledApagar();
   b47d6:	f7ff feaf 	bl	b4538 <_Z9ledApagarv>
    delay(200);
}
   b47da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b47de:	20c8      	movs	r0, #200	; 0xc8
   b47e0:	f004 bac8 	b.w	b8d74 <delay>

000b47e4 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b47e4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b47e6:	b284      	uxth	r4, r0
   b47e8:	4620      	mov	r0, r4
   b47ea:	2101      	movs	r1, #1
   b47ec:	f004 fe93 	bl	b9516 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b47f0:	4620      	mov	r0, r4
   b47f2:	2101      	movs	r1, #1
   b47f4:	f004 fe8f 	bl	b9516 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b47f8:	1c60      	adds	r0, r4, #1
   b47fa:	b280      	uxth	r0, r0
   b47fc:	2101      	movs	r1, #1
   b47fe:	9001      	str	r0, [sp, #4]
   b4800:	f004 fe89 	bl	b9516 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4804:	9801      	ldr	r0, [sp, #4]
   b4806:	2101      	movs	r1, #1
}
   b4808:	b002      	add	sp, #8
   b480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b480e:	f004 be82 	b.w	b9516 <digitalWrite>

000b4812 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b4812:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4814:	b284      	uxth	r4, r0
   b4816:	4620      	mov	r0, r4
   b4818:	2100      	movs	r1, #0
   b481a:	f004 fe7c 	bl	b9516 <digitalWrite>
    digitalWrite(puerto, LOW);
   b481e:	4620      	mov	r0, r4
   b4820:	2100      	movs	r1, #0
   b4822:	f004 fe78 	bl	b9516 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4826:	1c60      	adds	r0, r4, #1
   b4828:	b280      	uxth	r0, r0
   b482a:	2100      	movs	r1, #0
   b482c:	9001      	str	r0, [sp, #4]
   b482e:	f004 fe72 	bl	b9516 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4832:	9801      	ldr	r0, [sp, #4]
   b4834:	2100      	movs	r1, #0
}
   b4836:	b002      	add	sp, #8
   b4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b483c:	f004 be6b 	b.w	b9516 <digitalWrite>

000b4840 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b4840:	b510      	push	{r4, lr}
   b4842:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b4844:	f7ff ffce 	bl	b47e4 <_Z9pitidoON1i>
    delay(100);
   b4848:	2064      	movs	r0, #100	; 0x64
   b484a:	f004 fa93 	bl	b8d74 <delay>
    pitidoOFF1(puerto);
   b484e:	4620      	mov	r0, r4
   b4850:	f7ff ffdf 	bl	b4812 <_Z10pitidoOFF1i>
    delay(100);
}
   b4854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4858:	2064      	movs	r0, #100	; 0x64
   b485a:	f004 ba8b 	b.w	b8d74 <delay>
	...

000b4860 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4860:	b508      	push	{r3, lr}
   b4862:	2807      	cmp	r0, #7
   b4864:	d825      	bhi.n	b48b2 <_Z10activarLEDii+0x52>
   b4866:	e8df f000 	tbb	[pc, r0]
   b486a:	0804      	.short	0x0804
   b486c:	1814100c 	.word	0x1814100c
   b4870:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b4876:	f7ff be7b 	b.w	b4570 <_Z8ledVerdev>
}
   b487a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b487e:	f7ff be69 	b.w	b4554 <_Z7ledRojov>
}
   b4882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b4886:	f7ff be8f 	b.w	b45a8 <_Z11ledAmarillov>
}
   b488a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b488e:	f7ff be99 	b.w	b45c4 <_Z9ledMoradov>
}
   b4892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b4896:	f7ff be79 	b.w	b458c <_Z7ledAzulv>
}
   b489a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b489e:	f7ff be9f 	b.w	b45e0 <_Z10ledNaranjav>
}
   b48a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b48a6:	f7ff bf8f 	b.w	b47c8 <_Z8ledBlinkv>
}
   b48aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b48ae:	f7ff beb3 	b.w	b4618 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b48b2:	f004 fbf5 	bl	b90a0 <_Z16_fetch_usbserialv>
}
   b48b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b48ba:	4901      	ldr	r1, [pc, #4]	; (b48c0 <_Z10activarLEDii+0x60>)
   b48bc:	f004 b9ef 	b.w	b8c9e <_ZN5Print7printlnEPKc>
   b48c0:	000b9cfd 	.word	0x000b9cfd

000b48c4 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b48c4:	b538      	push	{r3, r4, r5, lr}
   b48c6:	460c      	mov	r4, r1
   b48c8:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b48ca:	2101      	movs	r1, #1
   b48cc:	b2a0      	uxth	r0, r4
   b48ce:	f004 fe11 	bl	b94f4 <pinMode>

    switch (opcion)
   b48d2:	b145      	cbz	r5, b48e6 <_Z15activarZumbadorii+0x22>
   b48d4:	2d01      	cmp	r5, #1
   b48d6:	d00b      	beq.n	b48f0 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b48d8:	f004 fbe2 	bl	b90a0 <_Z16_fetch_usbserialv>
        break;
    }
}
   b48dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b48e0:	4906      	ldr	r1, [pc, #24]	; (b48fc <_Z15activarZumbadorii+0x38>)
   b48e2:	f004 b9dc 	b.w	b8c9e <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b48e6:	4620      	mov	r0, r4
}
   b48e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b48ec:	f7ff bf7a 	b.w	b47e4 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b48f0:	4620      	mov	r0, r4
}
   b48f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b48f6:	f7ff bfa3 	b.w	b4840 <_Z12pitidoBlink1i>
   b48fa:	bf00      	nop
   b48fc:	000b9ced 	.word	0x000b9ced

000b4900 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4900:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4902:	b908      	cbnz	r0, b4908 <_Z14apagarActuadorii+0x8>
   b4904:	f7ff be18 	b.w	b4538 <_Z9ledApagarv>
   b4908:	2100      	movs	r1, #0
   b490a:	b298      	uxth	r0, r3
   b490c:	f004 be03 	b.w	b9516 <digitalWrite>

000b4910 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4910:	4603      	mov	r3, r0
    if (id < 2)
   b4912:	2b01      	cmp	r3, #1
{
   b4914:	4608      	mov	r0, r1
   b4916:	4611      	mov	r1, r2
    if (id < 2)
   b4918:	dc04      	bgt.n	b4924 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b491a:	b90b      	cbnz	r3, b4920 <_Z15actuadorHandleriii+0x10>
   b491c:	f7ff bfa0 	b.w	b4860 <_Z10activarLEDii>
   b4920:	f7ff bfd0 	b.w	b48c4 <_Z15activarZumbadorii>
}
   b4924:	4770      	bx	lr
	...

000b4928 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b4928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   display.clearDisplay();
   b492a:	4f33      	ldr	r7, [pc, #204]	; (b49f8 <_Z10showBitmapii6String+0xd0>)
void showBitmap(int id1, int id2, String msg) {
   b492c:	4605      	mov	r5, r0
   display.clearDisplay();
   b492e:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b4930:	460c      	mov	r4, r1
   b4932:	4616      	mov	r6, r2
   display.clearDisplay();
   b4934:	f003 f8ea 	bl	b7b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4938:	2300      	movs	r3, #0
   b493a:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b493c:	4b2f      	ldr	r3, [pc, #188]	; (b49fc <_Z10showBitmapii6String+0xd4>)
   b493e:	2201      	movs	r2, #1
   b4940:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4942:	f003 fd19 	bl	b8378 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b4946:	4b2e      	ldr	r3, [pc, #184]	; (b4a00 <_Z10showBitmapii6String+0xd8>)
   b4948:	6018      	str	r0, [r3, #0]
   switch (id1)
   b494a:	2d03      	cmp	r5, #3
   b494c:	d811      	bhi.n	b4972 <_Z10showBitmapii6String+0x4a>
   b494e:	e8df f005 	tbb	[pc, r5]
   b4952:	2202      	.short	0x2202
   b4954:	4b35      	.short	0x4b35
      switch (id2)
   b4956:	2c01      	cmp	r4, #1
   b4958:	d007      	beq.n	b496a <_Z10showBitmapii6String+0x42>
   b495a:	2c02      	cmp	r4, #2
   b495c:	d007      	beq.n	b496e <_Z10showBitmapii6String+0x46>
   b495e:	b944      	cbnz	r4, b4972 <_Z10showBitmapii6String+0x4a>
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b4960:	4928      	ldr	r1, [pc, #160]	; (b4a04 <_Z10showBitmapii6String+0xdc>)
         snprintf(buf, sizeof(buf), "CONECTAR A HEXAGONO");
   b4962:	4829      	ldr	r0, [pc, #164]	; (b4a08 <_Z10showBitmapii6String+0xe0>)
   b4964:	f005 f8ce 	bl	b9b04 <strcpy>
         break;
   b4968:	e00c      	b.n	b4984 <_Z10showBitmapii6String+0x5c>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b496a:	4928      	ldr	r1, [pc, #160]	; (b4a0c <_Z10showBitmapii6String+0xe4>)
   b496c:	e7f9      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b496e:	4928      	ldr	r1, [pc, #160]	; (b4a10 <_Z10showBitmapii6String+0xe8>)
   b4970:	e7f7      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b4972:	4928      	ldr	r1, [pc, #160]	; (b4a14 <_Z10showBitmapii6String+0xec>)
   b4974:	4824      	ldr	r0, [pc, #144]	; (b4a08 <_Z10showBitmapii6String+0xe0>)
   b4976:	f005 f8c5 	bl	b9b04 <strcpy>
         Serial.println("Bitmap not available.");
   b497a:	f004 fb91 	bl	b90a0 <_Z16_fetch_usbserialv>
   b497e:	4925      	ldr	r1, [pc, #148]	; (b4a14 <_Z10showBitmapii6String+0xec>)
   b4980:	f004 f98d 	bl	b8c9e <_ZN5Print7printlnEPKc>
   display.println(buf);
   b4984:	4920      	ldr	r1, [pc, #128]	; (b4a08 <_Z10showBitmapii6String+0xe0>)
   b4986:	481c      	ldr	r0, [pc, #112]	; (b49f8 <_Z10showBitmapii6String+0xd0>)
   b4988:	f004 f989 	bl	b8c9e <_ZN5Print7printlnEPKc>
}
   b498c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   display.display();
   b4990:	4819      	ldr	r0, [pc, #100]	; (b49f8 <_Z10showBitmapii6String+0xd0>)
   b4992:	f003 bb23 	b.w	b7fdc <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b4996:	2c05      	cmp	r4, #5
   b4998:	d8eb      	bhi.n	b4972 <_Z10showBitmapii6String+0x4a>
   b499a:	e8df f004 	tbb	[pc, r4]
   b499e:	0503      	.short	0x0503
   b49a0:	0d0b0907 	.word	0x0d0b0907
         snprintf(buf, sizeof(buf), "CONECTAR A HEXAGONO");
   b49a4:	491c      	ldr	r1, [pc, #112]	; (b4a18 <_Z10showBitmapii6String+0xf0>)
   b49a6:	e7dc      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "CONECTAR A CUADRADO");
   b49a8:	491c      	ldr	r1, [pc, #112]	; (b4a1c <_Z10showBitmapii6String+0xf4>)
   b49aa:	e7da      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "CONECTAR A TRIANGULO");
   b49ac:	491c      	ldr	r1, [pc, #112]	; (b4a20 <_Z10showBitmapii6String+0xf8>)
   b49ae:	e7d8      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "CONECTAR A ROMBO");
   b49b0:	491c      	ldr	r1, [pc, #112]	; (b4a24 <_Z10showBitmapii6String+0xfc>)
   b49b2:	e7d6      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "CONECTAR A SEMICIRCULO");
   b49b4:	491c      	ldr	r1, [pc, #112]	; (b4a28 <_Z10showBitmapii6String+0x100>)
   b49b6:	e7d4      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "CONECTAR A CIRCULO");
   b49b8:	491c      	ldr	r1, [pc, #112]	; (b4a2c <_Z10showBitmapii6String+0x104>)
   b49ba:	e7d2      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
      switch (id2)
   b49bc:	2c06      	cmp	r4, #6
   b49be:	d8d8      	bhi.n	b4972 <_Z10showBitmapii6String+0x4a>
   b49c0:	e8df f004 	tbb	[pc, r4]
   b49c4:	0a080604 	.word	0x0a080604
   b49c8:	0e0c      	.short	0x0e0c
   b49ca:	10          	.byte	0x10
   b49cb:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b49cc:	4918      	ldr	r1, [pc, #96]	; (b4a30 <_Z10showBitmapii6String+0x108>)
   b49ce:	e7c8      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b49d0:	4918      	ldr	r1, [pc, #96]	; (b4a34 <_Z10showBitmapii6String+0x10c>)
   b49d2:	e7c6      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b49d4:	4918      	ldr	r1, [pc, #96]	; (b4a38 <_Z10showBitmapii6String+0x110>)
   b49d6:	e7c4      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b49d8:	4918      	ldr	r1, [pc, #96]	; (b4a3c <_Z10showBitmapii6String+0x114>)
   b49da:	e7c2      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Play no disponible");
   b49dc:	4918      	ldr	r1, [pc, #96]	; (b4a40 <_Z10showBitmapii6String+0x118>)
   b49de:	e7c0      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b49e0:	4918      	ldr	r1, [pc, #96]	; (b4a44 <_Z10showBitmapii6String+0x11c>)
   b49e2:	e7be      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b49e4:	4918      	ldr	r1, [pc, #96]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b49e6:	e7bc      	b.n	b4962 <_Z10showBitmapii6String+0x3a>
      switch (id2)
   b49e8:	2c00      	cmp	r4, #0
   b49ea:	d1c2      	bne.n	b4972 <_Z10showBitmapii6String+0x4a>
         snprintf(buf, sizeof(buf), msg);
   b49ec:	6832      	ldr	r2, [r6, #0]
   b49ee:	4806      	ldr	r0, [pc, #24]	; (b4a08 <_Z10showBitmapii6String+0xe0>)
   b49f0:	2140      	movs	r1, #64	; 0x40
   b49f2:	f003 fec5 	bl	b8780 <snprintf>
         break;
   b49f6:	e7c5      	b.n	b4984 <_Z10showBitmapii6String+0x5c>
   b49f8:	2003daac 	.word	0x2003daac
   b49fc:	2003d485 	.word	0x2003d485
   b4a00:	2003e1a8 	.word	0x2003e1a8
   b4a04:	000b9d0c 	.word	0x000b9d0c
   b4a08:	2003da61 	.word	0x2003da61
   b4a0c:	000b9d18 	.word	0x000b9d18
   b4a10:	000b9d26 	.word	0x000b9d26
   b4a14:	000b9d32 	.word	0x000b9d32
   b4a18:	000b9d48 	.word	0x000b9d48
   b4a1c:	000b9d5c 	.word	0x000b9d5c
   b4a20:	000b9d70 	.word	0x000b9d70
   b4a24:	000b9d85 	.word	0x000b9d85
   b4a28:	000b9d96 	.word	0x000b9d96
   b4a2c:	000b9dad 	.word	0x000b9dad
   b4a30:	000b9dc0 	.word	0x000b9dc0
   b4a34:	000b9de0 	.word	0x000b9de0
   b4a38:	000b9e00 	.word	0x000b9e00
   b4a3c:	000b9e1b 	.word	0x000b9e1b
   b4a40:	000b9e30 	.word	0x000b9e30
   b4a44:	000b9e43 	.word	0x000b9e43
   b4a48:	000b9e61 	.word	0x000b9e61

000b4a4c <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b4a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b4a4e:	4b20      	ldr	r3, [pc, #128]	; (b4ad0 <_Z8showPortii+0x84>)
   b4a50:	689b      	ldr	r3, [r3, #8]
   b4a52:	bb0b      	cbnz	r3, b4a98 <_Z8showPortii+0x4c>
      switch (puerto)
   b4a54:	2902      	cmp	r1, #2
   b4a56:	d011      	beq.n	b4a7c <_Z8showPortii+0x30>
   b4a58:	2904      	cmp	r1, #4
   b4a5a:	d016      	beq.n	b4a8a <_Z8showPortii+0x3e>
   b4a5c:	b959      	cbnz	r1, b4a76 <_Z8showPortii+0x2a>
         showBitmap(1,3,"");
   b4a5e:	491d      	ldr	r1, [pc, #116]	; (b4ad4 <_Z8showPortii+0x88>)
   b4a60:	4668      	mov	r0, sp
   b4a62:	f004 f84e 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a66:	466a      	mov	r2, sp
   b4a68:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b4a6a:	2001      	movs	r0, #1
   b4a6c:	f7ff ff5c 	bl	b4928 <_Z10showBitmapii6String>
   b4a70:	4668      	mov	r0, sp
   b4a72:	f003 fffb 	bl	b8a6c <_ZN6StringD1Ev>
}
   b4a76:	b005      	add	sp, #20
   b4a78:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b4a7c:	4915      	ldr	r1, [pc, #84]	; (b4ad4 <_Z8showPortii+0x88>)
   b4a7e:	4668      	mov	r0, sp
   b4a80:	f004 f83f 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a84:	466a      	mov	r2, sp
   b4a86:	2104      	movs	r1, #4
   b4a88:	e7ef      	b.n	b4a6a <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b4a8a:	4912      	ldr	r1, [pc, #72]	; (b4ad4 <_Z8showPortii+0x88>)
   b4a8c:	4668      	mov	r0, sp
   b4a8e:	f004 f838 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a92:	466a      	mov	r2, sp
   b4a94:	2105      	movs	r1, #5
   b4a96:	e7e8      	b.n	b4a6a <_Z8showPortii+0x1e>
      switch (puerto)
   b4a98:	2904      	cmp	r1, #4
   b4a9a:	d00a      	beq.n	b4ab2 <_Z8showPortii+0x66>
   b4a9c:	2906      	cmp	r1, #6
   b4a9e:	d00f      	beq.n	b4ac0 <_Z8showPortii+0x74>
   b4aa0:	2902      	cmp	r1, #2
   b4aa2:	d1e8      	bne.n	b4a76 <_Z8showPortii+0x2a>
         showBitmap(1,0,"");
   b4aa4:	490b      	ldr	r1, [pc, #44]	; (b4ad4 <_Z8showPortii+0x88>)
   b4aa6:	4668      	mov	r0, sp
   b4aa8:	f004 f82b 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4aac:	466a      	mov	r2, sp
   b4aae:	2100      	movs	r1, #0
   b4ab0:	e7db      	b.n	b4a6a <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b4ab2:	4908      	ldr	r1, [pc, #32]	; (b4ad4 <_Z8showPortii+0x88>)
   b4ab4:	4668      	mov	r0, sp
   b4ab6:	f004 f824 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4aba:	466a      	mov	r2, sp
   b4abc:	2101      	movs	r1, #1
   b4abe:	e7d4      	b.n	b4a6a <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b4ac0:	4904      	ldr	r1, [pc, #16]	; (b4ad4 <_Z8showPortii+0x88>)
   b4ac2:	4668      	mov	r0, sp
   b4ac4:	f004 f81d 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ac8:	466a      	mov	r2, sp
   b4aca:	2102      	movs	r1, #2
   b4acc:	e7cd      	b.n	b4a6a <_Z8showPortii+0x1e>
   b4ace:	bf00      	nop
   b4ad0:	2003d3e0 	.word	0x2003d3e0
   b4ad4:	000ba0f5 	.word	0x000ba0f5

000b4ad8 <_Z10borradoALLi>:
   switch (modo)
   b4ad8:	2801      	cmp	r0, #1
   b4ada:	d00b      	beq.n	b4af4 <_Z10borradoALLi+0x1c>
   b4adc:	2802      	cmp	r0, #2
   b4ade:	d00b      	beq.n	b4af8 <_Z10borradoALLi+0x20>
   b4ae0:	b988      	cbnz	r0, b4b06 <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b4ae2:	4b09      	ldr	r3, [pc, #36]	; (b4b08 <_Z10borradoALLi+0x30>)
   b4ae4:	6018      	str	r0, [r3, #0]
   b4ae6:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b4aea:	4b08      	ldr	r3, [pc, #32]	; (b4b0c <_Z10borradoALLi+0x34>)
   b4aec:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b4aee:	4b08      	ldr	r3, [pc, #32]	; (b4b10 <_Z10borradoALLi+0x38>)
   b4af0:	6018      	str	r0, [r3, #0]
      break;
   b4af2:	4770      	bx	lr
   b4af4:	f7ff bae6 	b.w	b40c4 <_Z10borradoALLi.part.0>
      posicion = 0;
   b4af8:	4a06      	ldr	r2, [pc, #24]	; (b4b14 <_Z10borradoALLi+0x3c>)
   b4afa:	2300      	movs	r3, #0
   b4afc:	6013      	str	r3, [r2, #0]
      bucle = false;
   b4afe:	4a06      	ldr	r2, [pc, #24]	; (b4b18 <_Z10borradoALLi+0x40>)
   b4b00:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b4b02:	4a06      	ldr	r2, [pc, #24]	; (b4b1c <_Z10borradoALLi+0x44>)
   b4b04:	6013      	str	r3, [r2, #0]
}
   b4b06:	4770      	bx	lr
   b4b08:	2003d488 	.word	0x2003d488
   b4b0c:	2003e18c 	.word	0x2003e18c
   b4b10:	2003e184 	.word	0x2003e184
   b4b14:	2003e194 	.word	0x2003e194
   b4b18:	2003da60 	.word	0x2003da60
   b4b1c:	2003e1b0 	.word	0x2003e1b0

000b4b20 <_Z13borradoBLOQUEi>:

// Borrado del bloque/loop actual
void borradoBLOQUE(int modo)
{
   switch (modo)
   b4b20:	2801      	cmp	r0, #1
{
   b4b22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b4b24:	d003      	beq.n	b4b2e <_Z13borradoBLOQUEi+0xe>
   b4b26:	2802      	cmp	r0, #2
   b4b28:	d03c      	beq.n	b4ba4 <_Z13borradoBLOQUEi+0x84>
      break;

   default:
      break;
   }
}
   b4b2a:	b004      	add	sp, #16
   b4b2c:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b4b2e:	4b33      	ldr	r3, [pc, #204]	; (b4bfc <_Z13borradoBLOQUEi+0xdc>)
   b4b30:	681c      	ldr	r4, [r3, #0]
   b4b32:	b974      	cbnz	r4, b4b52 <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b4b34:	f7ff fac6 	bl	b40c4 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b4b38:	4931      	ldr	r1, [pc, #196]	; (b4c00 <_Z13borradoBLOQUEi+0xe0>)
   b4b3a:	4668      	mov	r0, sp
   b4b3c:	f003 ffe1 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b40:	466a      	mov	r2, sp
   b4b42:	2100      	movs	r1, #0
   b4b44:	2003      	movs	r0, #3
   b4b46:	f7ff feef 	bl	b4928 <_Z10showBitmapii6String>
   b4b4a:	4668      	mov	r0, sp
   b4b4c:	f003 ff8e 	bl	b8a6c <_ZN6StringD1Ev>
   b4b50:	e7eb      	b.n	b4b2a <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b4b52:	2c01      	cmp	r4, #1
   b4b54:	d11e      	bne.n	b4b94 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b4b56:	2200      	movs	r2, #0
         numBloque = 0;
   b4b58:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b4b5a:	492a      	ldr	r1, [pc, #168]	; (b4c04 <_Z13borradoBLOQUEi+0xe4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4b5c:	4b2a      	ldr	r3, [pc, #168]	; (b4c08 <_Z13borradoBLOQUEi+0xe8>)
         IF_pasado = false;
   b4b5e:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4b60:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4b62:	4a2a      	ldr	r2, [pc, #168]	; (b4c0c <_Z13borradoBLOQUEi+0xec>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4b64:	4b2a      	ldr	r3, [pc, #168]	; (b4c10 <_Z13borradoBLOQUEi+0xf0>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b66:	482b      	ldr	r0, [pc, #172]	; (b4c14 <_Z13borradoBLOQUEi+0xf4>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4b68:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4b6a:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b6c:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b4b6e:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b4b70:	bf04      	itt	eq
   b4b72:	2303      	moveq	r3, #3
   b4b74:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b4b76:	4b28      	ldr	r3, [pc, #160]	; (b4c18 <_Z13borradoBLOQUEi+0xf8>)
   b4b78:	6819      	ldr	r1, [r3, #0]
   b4b7a:	3101      	adds	r1, #1
            puertoDigital=6;
   b4b7c:	bf04      	itt	eq
   b4b7e:	2106      	moveq	r1, #6
   b4b80:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b82:	6811      	ldr	r1, [r2, #0]
   b4b84:	1a09      	subs	r1, r1, r0
   b4b86:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b4b88:	4924      	ldr	r1, [pc, #144]	; (b4c1c <_Z13borradoBLOQUEi+0xfc>)
   b4b8a:	681a      	ldr	r2, [r3, #0]
   b4b8c:	6809      	ldr	r1, [r1, #0]
   b4b8e:	1a52      	subs	r2, r2, r1
   b4b90:	601a      	str	r2, [r3, #0]
   b4b92:	e7d1      	b.n	b4b38 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b4b94:	f004 fa84 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4b98:	4921      	ldr	r1, [pc, #132]	; (b4c20 <_Z13borradoBLOQUEi+0x100>)
}
   b4b9a:	b004      	add	sp, #16
   b4b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b4ba0:	f004 b87d 	b.w	b8c9e <_ZN5Print7printlnEPKc>
      if (bucle) {
   b4ba4:	4d1f      	ldr	r5, [pc, #124]	; (b4c24 <_Z13borradoBLOQUEi+0x104>)
         posicion = posicion - (tam_bucle+1);
   b4ba6:	4a20      	ldr	r2, [pc, #128]	; (b4c28 <_Z13borradoBLOQUEi+0x108>)
      if (bucle) {
   b4ba8:	782e      	ldrb	r6, [r5, #0]
         posicion = posicion - (tam_bucle+1);
   b4baa:	6813      	ldr	r3, [r2, #0]
   b4bac:	4c1f      	ldr	r4, [pc, #124]	; (b4c2c <_Z13borradoBLOQUEi+0x10c>)
      if (bucle) {
   b4bae:	b19e      	cbz	r6, b4bd8 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b4bb0:	6821      	ldr	r1, [r4, #0]
   b4bb2:	3101      	adds	r1, #1
   b4bb4:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4bb6:	4668      	mov	r0, sp
   b4bb8:	491d      	ldr	r1, [pc, #116]	; (b4c30 <_Z13borradoBLOQUEi+0x110>)
         posicion = posicion - (tam_bucle+1);
   b4bba:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b4bbc:	f003 ffa1 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4bc0:	2003      	movs	r0, #3
   b4bc2:	466a      	mov	r2, sp
   b4bc4:	2100      	movs	r1, #0
   b4bc6:	f7ff feaf 	bl	b4928 <_Z10showBitmapii6String>
   b4bca:	4668      	mov	r0, sp
   b4bcc:	f003 ff4e 	bl	b8a6c <_ZN6StringD1Ev>
      bucle = false;
   b4bd0:	2300      	movs	r3, #0
   b4bd2:	702b      	strb	r3, [r5, #0]
      tam_bucle = 0;
   b4bd4:	6023      	str	r3, [r4, #0]
}
   b4bd6:	e7a8      	b.n	b4b2a <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b4bd8:	4816      	ldr	r0, [pc, #88]	; (b4c34 <_Z13borradoBLOQUEi+0x114>)
   b4bda:	1e59      	subs	r1, r3, #1
   b4bdc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b4be0:	3002      	adds	r0, #2
   b4be2:	d104      	bne.n	b4bee <_Z13borradoBLOQUEi+0xce>
         posicion = posicion - (duraciones[posicion-1]+2);
   b4be4:	4814      	ldr	r0, [pc, #80]	; (b4c38 <_Z13borradoBLOQUEi+0x118>)
   b4be6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4bea:	3102      	adds	r1, #2
   b4bec:	e7e2      	b.n	b4bb4 <_Z13borradoBLOQUEi+0x94>
         Serial.println("Nada que borrar.");
   b4bee:	f004 fa57 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4bf2:	4912      	ldr	r1, [pc, #72]	; (b4c3c <_Z13borradoBLOQUEi+0x11c>)
   b4bf4:	f004 f853 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b4bf8:	e7ea      	b.n	b4bd0 <_Z13borradoBLOQUEi+0xb0>
   b4bfa:	bf00      	nop
   b4bfc:	2003d3d8 	.word	0x2003d3d8
   b4c00:	000b9e81 	.word	0x000b9e81
   b4c04:	2003d475 	.word	0x2003d475
   b4c08:	2003d484 	.word	0x2003d484
   b4c0c:	2003e198 	.word	0x2003e198
   b4c10:	2003e184 	.word	0x2003e184
   b4c14:	2003e19c 	.word	0x2003e19c
   b4c18:	2003d3dc 	.word	0x2003d3dc
   b4c1c:	2003e1a0 	.word	0x2003e1a0
   b4c20:	000b9e9d 	.word	0x000b9e9d
   b4c24:	2003da60 	.word	0x2003da60
   b4c28:	2003e194 	.word	0x2003e194
   b4c2c:	2003e1b0 	.word	0x2003e1b0
   b4c30:	000b9ead 	.word	0x000b9ead
   b4c34:	2003de64 	.word	0x2003de64
   b4c38:	2003db1c 	.word	0x2003db1c
   b4c3c:	000b9ec7 	.word	0x000b9ec7

000b4c40 <_Z10borradoPOPv>:

void borradoPOP(){
   posicion--;
   b4c40:	4a0e      	ldr	r2, [pc, #56]	; (b4c7c <_Z10borradoPOPv+0x3c>)
   b4c42:	6813      	ldr	r3, [r2, #0]
   b4c44:	3b01      	subs	r3, #1
   b4c46:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b4c48:	4a0d      	ldr	r2, [pc, #52]	; (b4c80 <_Z10borradoPOPv+0x40>)
   b4c4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4c4e:	1c8a      	adds	r2, r1, #2
   b4c50:	4a0c      	ldr	r2, [pc, #48]	; (b4c84 <_Z10borradoPOPv+0x44>)
   b4c52:	d107      	bne.n	b4c64 <_Z10borradoPOPv+0x24>
      bucle = true;
   b4c54:	2101      	movs	r1, #1
   b4c56:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b4c58:	4a0b      	ldr	r2, [pc, #44]	; (b4c88 <_Z10borradoPOPv+0x48>)
   b4c5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4c5e:	4b0b      	ldr	r3, [pc, #44]	; (b4c8c <_Z10borradoPOPv+0x4c>)
   b4c60:	601a      	str	r2, [r3, #0]
   b4c62:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b4c64:	3101      	adds	r1, #1
   b4c66:	d102      	bne.n	b4c6e <_Z10borradoPOPv+0x2e>
      bucle = false;
   b4c68:	2300      	movs	r3, #0
   b4c6a:	7013      	strb	r3, [r2, #0]
   b4c6c:	4770      	bx	lr

   } else {
      if (bucle) {
   b4c6e:	7813      	ldrb	r3, [r2, #0]
   b4c70:	b11b      	cbz	r3, b4c7a <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b4c72:	4a06      	ldr	r2, [pc, #24]	; (b4c8c <_Z10borradoPOPv+0x4c>)
   b4c74:	6813      	ldr	r3, [r2, #0]
   b4c76:	3b01      	subs	r3, #1
   b4c78:	6013      	str	r3, [r2, #0]
      }
   }
}
   b4c7a:	4770      	bx	lr
   b4c7c:	2003e194 	.word	0x2003e194
   b4c80:	2003de64 	.word	0x2003de64
   b4c84:	2003da60 	.word	0x2003da60
   b4c88:	2003db1c 	.word	0x2003db1c
   b4c8c:	2003e1b0 	.word	0x2003e1b0

000b4c90 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b4c90:	b508      	push	{r3, lr}
   b4c92:	2807      	cmp	r0, #7
   b4c94:	d816      	bhi.n	b4cc4 <_Z15decodificarNOTAi+0x34>
   b4c96:	e8df f000 	tbb	[pc, r0]
   b4c9a:	0704      	.short	0x0704
   b4c9c:	0f0d0b09 	.word	0x0f0d0b09
   b4ca0:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b4ca2:	4b0c      	ldr	r3, [pc, #48]	; (b4cd4 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b4ca4:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b4ca6:	bd08      	pop	{r3, pc}
      return RE;
   b4ca8:	4b0b      	ldr	r3, [pc, #44]	; (b4cd8 <_Z15decodificarNOTAi+0x48>)
   b4caa:	e7fb      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return MI;
   b4cac:	4b0b      	ldr	r3, [pc, #44]	; (b4cdc <_Z15decodificarNOTAi+0x4c>)
   b4cae:	e7f9      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return FA;
   b4cb0:	4b0b      	ldr	r3, [pc, #44]	; (b4ce0 <_Z15decodificarNOTAi+0x50>)
   b4cb2:	e7f7      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b4cb4:	4b0b      	ldr	r3, [pc, #44]	; (b4ce4 <_Z15decodificarNOTAi+0x54>)
   b4cb6:	e7f5      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return LA;
   b4cb8:	4b0b      	ldr	r3, [pc, #44]	; (b4ce8 <_Z15decodificarNOTAi+0x58>)
   b4cba:	e7f3      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return SI;
   b4cbc:	4b0b      	ldr	r3, [pc, #44]	; (b4cec <_Z15decodificarNOTAi+0x5c>)
   b4cbe:	e7f1      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b4cc0:	4b0b      	ldr	r3, [pc, #44]	; (b4cf0 <_Z15decodificarNOTAi+0x60>)
   b4cc2:	e7ef      	b.n	b4ca4 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b4cc4:	f004 f9ec 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4cc8:	490a      	ldr	r1, [pc, #40]	; (b4cf4 <_Z15decodificarNOTAi+0x64>)
   b4cca:	f003 ffe8 	bl	b8c9e <_ZN5Print7printlnEPKc>
      return -1;
   b4cce:	f04f 30ff 	mov.w	r0, #4294967295
   b4cd2:	e7e8      	b.n	b4ca6 <_Z15decodificarNOTAi+0x16>
   b4cd4:	2003d3b0 	.word	0x2003d3b0
   b4cd8:	2003d3c4 	.word	0x2003d3c4
   b4cdc:	2003d3c0 	.word	0x2003d3c0
   b4ce0:	2003d3b8 	.word	0x2003d3b8
   b4ce4:	2003d3cc 	.word	0x2003d3cc
   b4ce8:	2003d3bc 	.word	0x2003d3bc
   b4cec:	2003d3c8 	.word	0x2003d3c8
   b4cf0:	2003d3b4 	.word	0x2003d3b4
   b4cf4:	000b9ed8 	.word	0x000b9ed8

000b4cf8 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b4cf8:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b4cfa:	b508      	push	{r3, lr}
   b4cfc:	d803      	bhi.n	b4d06 <_Z15decodificarTIPOi+0xe>
   b4cfe:	4b06      	ldr	r3, [pc, #24]	; (b4d18 <_Z15decodificarTIPOi+0x20>)
   b4d00:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b4d04:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b4d06:	f004 f9cb 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4d0a:	4904      	ldr	r1, [pc, #16]	; (b4d1c <_Z15decodificarTIPOi+0x24>)
   b4d0c:	f003 ffc7 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b4d10:	f04f 30ff 	mov.w	r0, #4294967295
   b4d14:	e7f6      	b.n	b4d04 <_Z15decodificarTIPOi+0xc>
   b4d16:	bf00      	nop
   b4d18:	000ba64a 	.word	0x000ba64a
   b4d1c:	000b9ee7 	.word	0x000b9ee7

000b4d20 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b4d20:	b510      	push	{r4, lr}
   b4d22:	4604      	mov	r4, r0
   b4d24:	2907      	cmp	r1, #7
   b4d26:	d819      	bhi.n	b4d5c <_Z19decodificarNOTA_msgi+0x3c>
   b4d28:	e8df f001 	tbb	[pc, r1]
   b4d2c:	0e0c0a04 	.word	0x0e0c0a04
   b4d30:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b4d34:	490a      	ldr	r1, [pc, #40]	; (b4d60 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "DO'";

   default:
      return "Nota inválida";
   b4d36:	4620      	mov	r0, r4
   b4d38:	f003 fee3 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4d3c:	4620      	mov	r0, r4
   b4d3e:	bd10      	pop	{r4, pc}
      return "RE";
   b4d40:	4908      	ldr	r1, [pc, #32]	; (b4d64 <_Z19decodificarNOTA_msgi+0x44>)
   b4d42:	e7f8      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b4d44:	4908      	ldr	r1, [pc, #32]	; (b4d68 <_Z19decodificarNOTA_msgi+0x48>)
   b4d46:	e7f6      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b4d48:	4908      	ldr	r1, [pc, #32]	; (b4d6c <_Z19decodificarNOTA_msgi+0x4c>)
   b4d4a:	e7f4      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b4d4c:	4908      	ldr	r1, [pc, #32]	; (b4d70 <_Z19decodificarNOTA_msgi+0x50>)
   b4d4e:	e7f2      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b4d50:	4908      	ldr	r1, [pc, #32]	; (b4d74 <_Z19decodificarNOTA_msgi+0x54>)
   b4d52:	e7f0      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b4d54:	4908      	ldr	r1, [pc, #32]	; (b4d78 <_Z19decodificarNOTA_msgi+0x58>)
   b4d56:	e7ee      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "DO'";
   b4d58:	4908      	ldr	r1, [pc, #32]	; (b4d7c <_Z19decodificarNOTA_msgi+0x5c>)
   b4d5a:	e7ec      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b4d5c:	4908      	ldr	r1, [pc, #32]	; (b4d80 <_Z19decodificarNOTA_msgi+0x60>)
   b4d5e:	e7ea      	b.n	b4d36 <_Z19decodificarNOTA_msgi+0x16>
   b4d60:	000b9d6d 	.word	0x000b9d6d
   b4d64:	000b9ef6 	.word	0x000b9ef6
   b4d68:	000b9ef9 	.word	0x000b9ef9
   b4d6c:	000b9efc 	.word	0x000b9efc
   b4d70:	000b9eff 	.word	0x000b9eff
   b4d74:	000b9f03 	.word	0x000b9f03
   b4d78:	000b9f06 	.word	0x000b9f06
   b4d7c:	000b9f09 	.word	0x000b9f09
   b4d80:	000b9ed8 	.word	0x000b9ed8

000b4d84 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b4d84:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b4d86:	b510      	push	{r4, lr}
   b4d88:	4604      	mov	r4, r0
   switch (tipo)
   b4d8a:	d007      	beq.n	b4d9c <_Z19decodificarTIPO_msgi+0x18>
   b4d8c:	2902      	cmp	r1, #2
   b4d8e:	d007      	beq.n	b4da0 <_Z19decodificarTIPO_msgi+0x1c>
   b4d90:	b941      	cbnz	r1, b4da4 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b4d92:	4905      	ldr	r1, [pc, #20]	; (b4da8 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b4d94:	f003 feb5 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4d98:	4620      	mov	r0, r4
   b4d9a:	bd10      	pop	{r4, pc}
      return "_N";
   b4d9c:	4903      	ldr	r1, [pc, #12]	; (b4dac <_Z19decodificarTIPO_msgi+0x28>)
   b4d9e:	e7f9      	b.n	b4d94 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b4da0:	4903      	ldr	r1, [pc, #12]	; (b4db0 <_Z19decodificarTIPO_msgi+0x2c>)
   b4da2:	e7f7      	b.n	b4d94 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b4da4:	4903      	ldr	r1, [pc, #12]	; (b4db4 <_Z19decodificarTIPO_msgi+0x30>)
   b4da6:	e7f5      	b.n	b4d94 <_Z19decodificarTIPO_msgi+0x10>
   b4da8:	000b9f0d 	.word	0x000b9f0d
   b4dac:	000b9f10 	.word	0x000b9f10
   b4db0:	000b9f13 	.word	0x000b9f13
   b4db4:	000b9ee7 	.word	0x000b9ee7

000b4db8 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b4db8:	b513      	push	{r0, r1, r4, lr}
   b4dba:	460c      	mov	r4, r1

   int frecuencia = decodificarNOTA(nota);
   b4dbc:	f7ff ff68 	bl	b4c90 <_Z15decodificarNOTAi>
   b4dc0:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4dc2:	4620      	mov	r0, r4
   b4dc4:	f7ff ff98 	bl	b4cf8 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b4dc8:	9901      	ldr	r1, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4dca:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b4dcc:	2200      	movs	r2, #0
   b4dce:	2006      	movs	r0, #6
   b4dd0:	f004 f990 	bl	b90f4 <tone>
   delay(duracion);
   b4dd4:	4620      	mov	r0, r4
   b4dd6:	f003 ffcd 	bl	b8d74 <delay>
   noTone(Zumbador_PIN);
   b4dda:	2006      	movs	r0, #6
}
   b4ddc:	b002      	add	sp, #8
   b4dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   noTone(Zumbador_PIN);
   b4de2:	f004 b99e 	b.w	b9122 <noTone>
	...

000b4de8 <_Z10reproducirv>:

void reproducir() {
   b4de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b4dec:	4b1e      	ldr	r3, [pc, #120]	; (b4e68 <_Z10reproducirv+0x80>)
   b4dee:	781c      	ldrb	r4, [r3, #0]
   b4df0:	bb34      	cbnz	r4, b4e40 <_Z10reproducirv+0x58>
      int n;
      int iteracion;
      int inicio;

      int i = 0;
      while ( i < posicion) {
   b4df2:	f8df a08c 	ldr.w	sl, [pc, #140]	; b4e80 <_Z10reproducirv+0x98>

         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4df6:	4e1d      	ldr	r6, [pc, #116]	; (b4e6c <_Z10reproducirv+0x84>)
   b4df8:	4f1d      	ldr	r7, [pc, #116]	; (b4e70 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b4dfa:	f8da 3000 	ldr.w	r3, [sl]
   b4dfe:	42a3      	cmp	r3, r4
   b4e00:	dd2f      	ble.n	b4e62 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e02:	f004 f94d 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4e06:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b4e0a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b4e0e:	4919      	ldr	r1, [pc, #100]	; (b4e74 <_Z10reproducirv+0x8c>)
   b4e10:	f7ff f984 	bl	b411c <_ZN5Print8printlnfEPKcz>

         if ( notas[i] == -1 ) {
   b4e14:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b4e18:	1c42      	adds	r2, r0, #1
   b4e1a:	d105      	bne.n	b4e28 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b4e1c:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            iteracion = 0;            
            inicio=i;
   b4e20:	46a1      	mov	r9, r4
            iteracion = 0;            
   b4e22:	2500      	movs	r5, #0
            
         } else {
            reproducirNOTA(notas[i],duraciones[i]);
         }
         
         i++;
   b4e24:	3401      	adds	r4, #1
      while ( i < posicion) {
   b4e26:	e7e8      	b.n	b4dfa <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b4e28:	1c83      	adds	r3, r0, #2
   b4e2a:	d104      	bne.n	b4e36 <_Z10reproducirv+0x4e>
            iteracion++;
   b4e2c:	3501      	adds	r5, #1
               i = inicio;
   b4e2e:	45a8      	cmp	r8, r5
   b4e30:	bfc8      	it	gt
   b4e32:	464c      	movgt	r4, r9
   b4e34:	e7f6      	b.n	b4e24 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b4e36:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b4e3a:	f7ff ffbd 	bl	b4db8 <_Z14reproducirNOTAii>
   b4e3e:	e7f1      	b.n	b4e24 <_Z10reproducirv+0x3c>

      }

   } else {
      Serial.println("Finaliza el bucle antes de reproducir");
   b4e40:	f004 f92e 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4e44:	490c      	ldr	r1, [pc, #48]	; (b4e78 <_Z10reproducirv+0x90>)
   b4e46:	f003 ff2a 	bl	b8c9e <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b4e4a:	490c      	ldr	r1, [pc, #48]	; (b4e7c <_Z10reproducirv+0x94>)
   b4e4c:	4668      	mov	r0, sp
   b4e4e:	f003 fe58 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e52:	2002      	movs	r0, #2
   b4e54:	466a      	mov	r2, sp
   b4e56:	2104      	movs	r1, #4
   b4e58:	f7ff fd66 	bl	b4928 <_Z10showBitmapii6String>
   b4e5c:	4668      	mov	r0, sp
   b4e5e:	f003 fe05 	bl	b8a6c <_ZN6StringD1Ev>
   }
   
}
   b4e62:	b004      	add	sp, #16
   b4e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e68:	2003da60 	.word	0x2003da60
   b4e6c:	2003db1c 	.word	0x2003db1c
   b4e70:	2003de64 	.word	0x2003de64
   b4e74:	000b9f16 	.word	0x000b9f16
   b4e78:	000b9f1e 	.word	0x000b9f1e
   b4e7c:	000ba0f5 	.word	0x000ba0f5
   b4e80:	2003e194 	.word	0x2003e194

000b4e84 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4e84:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4e86:	4b0d      	ldr	r3, [pc, #52]	; (b4ebc <_Z13isValidSensori+0x38>)
   b4e88:	681a      	ldr	r2, [r3, #0]
   b4e8a:	4b0d      	ldr	r3, [pc, #52]	; (b4ec0 <_Z13isValidSensori+0x3c>)
   b4e8c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4e90:	434a      	muls	r2, r1
   b4e92:	5899      	ldr	r1, [r3, r2]
   b4e94:	4413      	add	r3, r2
   b4e96:	2200      	movs	r2, #0
   b4e98:	4291      	cmp	r1, r2
   b4e9a:	dd0d      	ble.n	b4eb8 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b4e9c:	685c      	ldr	r4, [r3, #4]
   b4e9e:	4284      	cmp	r4, r0
   b4ea0:	f103 0310 	add.w	r3, r3, #16
   b4ea4:	d106      	bne.n	b4eb4 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4ea6:	f004 f8fb 	bl	b90a0 <_Z16_fetch_usbserialv>
   b4eaa:	4906      	ldr	r1, [pc, #24]	; (b4ec4 <_Z13isValidSensori+0x40>)
   b4eac:	f003 fef7 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b4eb0:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4eb2:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4eb4:	3201      	adds	r2, #1
   b4eb6:	e7ef      	b.n	b4e98 <_Z13isValidSensori+0x14>
  return true;
   b4eb8:	2001      	movs	r0, #1
   b4eba:	e7fa      	b.n	b4eb2 <_Z13isValidSensori+0x2e>
   b4ebc:	2003d3d8 	.word	0x2003d3d8
   b4ec0:	2003d488 	.word	0x2003d488
   b4ec4:	000b9f44 	.word	0x000b9f44

000b4ec8 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4eca:	4b11      	ldr	r3, [pc, #68]	; (b4f10 <_Z11isNewSensori+0x48>)
   b4ecc:	4a11      	ldr	r2, [pc, #68]	; (b4f14 <_Z11isNewSensori+0x4c>)
   b4ece:	681e      	ldr	r6, [r3, #0]
   b4ed0:	4694      	mov	ip, r2
   b4ed2:	2300      	movs	r3, #0
   b4ed4:	429e      	cmp	r6, r3
   b4ed6:	db17      	blt.n	b4f08 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4ed8:	6817      	ldr	r7, [r2, #0]
   b4eda:	4615      	mov	r5, r2
   b4edc:	2100      	movs	r1, #0
   b4ede:	428f      	cmp	r7, r1
   b4ee0:	dd0e      	ble.n	b4f00 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4ee2:	686c      	ldr	r4, [r5, #4]
   b4ee4:	4284      	cmp	r4, r0
   b4ee6:	f105 0510 	add.w	r5, r5, #16
   b4eea:	d107      	bne.n	b4efc <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4eec:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4ef0:	4353      	muls	r3, r2
   b4ef2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4ef6:	4463      	add	r3, ip
   b4ef8:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4efc:	3101      	adds	r1, #1
   b4efe:	e7ee      	b.n	b4ede <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4f00:	3301      	adds	r3, #1
   b4f02:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4f06:	e7e5      	b.n	b4ed4 <_Z11isNewSensori+0xc>
  return -1;
   b4f08:	f04f 30ff 	mov.w	r0, #4294967295
   b4f0c:	e7f5      	b.n	b4efa <_Z11isNewSensori+0x32>
   b4f0e:	bf00      	nop
   b4f10:	2003d3d8 	.word	0x2003d3d8
   b4f14:	2003d488 	.word	0x2003d488

000b4f18 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b4f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f1c:	4d19      	ldr	r5, [pc, #100]	; (b4f84 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b4f1e:	4b1a      	ldr	r3, [pc, #104]	; (b4f88 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f20:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4f24:	681f      	ldr	r7, [r3, #0]
{
   b4f26:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f28:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4f2a:	2400      	movs	r4, #0
   b4f2c:	42a7      	cmp	r7, r4
   b4f2e:	db23      	blt.n	b4f78 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b4f30:	d110      	bne.n	b4f54 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4f32:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b4f36:	461a      	mov	r2, r3
   b4f38:	2600      	movs	r6, #0
   b4f3a:	45b0      	cmp	r8, r6
   b4f3c:	dd0a      	ble.n	b4f54 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b4f3e:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b4f42:	4560      	cmp	r0, ip
   b4f44:	d103      	bne.n	b4f4e <_Z15isValidActuadorii+0x36>
   b4f46:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b4f4a:	4288      	cmp	r0, r1
   b4f4c:	d017      	beq.n	b4f7e <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4f4e:	3601      	adds	r6, #1
   b4f50:	3214      	adds	r2, #20
   b4f52:	e7f2      	b.n	b4f3a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b4f54:	2f01      	cmp	r7, #1
   b4f56:	d10b      	bne.n	b4f70 <_Z15isValidActuadorii+0x58>
   b4f58:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f5a:	2200      	movs	r2, #0
   b4f5c:	4596      	cmp	lr, r2
   b4f5e:	dd07      	ble.n	b4f70 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b4f60:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b4f64:	4288      	cmp	r0, r1
   b4f66:	f106 0614 	add.w	r6, r6, #20
   b4f6a:	d008      	beq.n	b4f7e <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f6c:	3201      	adds	r2, #1
   b4f6e:	e7f5      	b.n	b4f5c <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b4f70:	3401      	adds	r4, #1
   b4f72:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4f76:	e7d9      	b.n	b4f2c <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b4f78:	2001      	movs	r0, #1
}
   b4f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b4f7e:	2000      	movs	r0, #0
   b4f80:	e7fb      	b.n	b4f7a <_Z15isValidActuadorii+0x62>
   b4f82:	bf00      	nop
   b4f84:	2003d488 	.word	0x2003d488
   b4f88:	2003d3d8 	.word	0x2003d3d8

000b4f8c <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b4f8e:	4b13      	ldr	r3, [pc, #76]	; (b4fdc <_Z13isNewActuadori+0x50>)
   b4f90:	4a13      	ldr	r2, [pc, #76]	; (b4fe0 <_Z13isNewActuadori+0x54>)
   b4f92:	681e      	ldr	r6, [r3, #0]
   b4f94:	4694      	mov	ip, r2
   b4f96:	2300      	movs	r3, #0
   b4f98:	429e      	cmp	r6, r3
   b4f9a:	db1b      	blt.n	b4fd4 <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4f9c:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b4fa0:	4615      	mov	r5, r2
   b4fa2:	2100      	movs	r1, #0
   b4fa4:	428f      	cmp	r7, r1
   b4fa6:	dd11      	ble.n	b4fcc <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b4fa8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b4fac:	4284      	cmp	r4, r0
   b4fae:	f105 0514 	add.w	r5, r5, #20
   b4fb2:	d109      	bne.n	b4fc8 <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b4fb4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4fb8:	4353      	muls	r3, r2
   b4fba:	2214      	movs	r2, #20
   b4fbc:	fb02 3301 	mla	r3, r2, r1, r3
   b4fc0:	4463      	add	r3, ip
   b4fc2:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b4fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4fc8:	3101      	adds	r1, #1
   b4fca:	e7eb      	b.n	b4fa4 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b4fcc:	3301      	adds	r3, #1
   b4fce:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4fd2:	e7e1      	b.n	b4f98 <_Z13isNewActuadori+0xc>
  return -1;
   b4fd4:	f04f 30ff 	mov.w	r0, #4294967295
   b4fd8:	e7f5      	b.n	b4fc6 <_Z13isNewActuadori+0x3a>
   b4fda:	bf00      	nop
   b4fdc:	2003d3d8 	.word	0x2003d3d8
   b4fe0:	2003d488 	.word	0x2003d488

000b4fe4 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b4fe4:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b4fe6:	4b0c      	ldr	r3, [pc, #48]	; (b5018 <_Z14isActuadorDualii+0x34>)
   b4fe8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4fec:	fb02 3101 	mla	r1, r2, r1, r3
   b4ff0:	2200      	movs	r2, #0
   b4ff2:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b4ff6:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b4ff8:	4294      	cmp	r4, r2
   b4ffa:	dd08      	ble.n	b500e <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b4ffc:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5000:	4285      	cmp	r5, r0
   b5002:	d101      	bne.n	b5008 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5004:	b92b      	cbnz	r3, b5012 <_Z14isActuadorDualii+0x2e>
   b5006:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5008:	3201      	adds	r2, #1
   b500a:	3114      	adds	r1, #20
   b500c:	e7f4      	b.n	b4ff8 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b500e:	2000      	movs	r0, #0
}
   b5010:	bd30      	pop	{r4, r5, pc}
      return true;
   b5012:	4618      	mov	r0, r3
   b5014:	e7fc      	b.n	b5010 <_Z14isActuadorDualii+0x2c>
   b5016:	bf00      	nop
   b5018:	2003d488 	.word	0x2003d488

000b501c <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b501c:	b084      	sub	sp, #16
   b501e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5020:	ac06      	add	r4, sp, #24
   b5022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5026:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b502a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b502c:	f7ff fa30 	bl	b4490 <_Z10leerSensoriii>
   b5030:	ad06      	add	r5, sp, #24
   b5032:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5034:	afbc      	add	r7, sp, #752	; 0x2f0
   b5036:	2601      	movs	r6, #1
   b5038:	9b06      	ldr	r3, [sp, #24]
   b503a:	42b3      	cmp	r3, r6
   b503c:	dd12      	ble.n	b5064 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b503e:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5042:	6a2a      	ldr	r2, [r5, #32]
   b5044:	f7ff fa24 	bl	b4490 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5048:	f817 3b01 	ldrb.w	r3, [r7], #1
   b504c:	b133      	cbz	r3, b505c <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b504e:	2c00      	cmp	r4, #0
   b5050:	bf08      	it	eq
   b5052:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5054:	3601      	adds	r6, #1
   b5056:	3510      	adds	r5, #16
   b5058:	4604      	mov	r4, r0
   b505a:	e7ed      	b.n	b5038 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b505c:	2c00      	cmp	r4, #0
   b505e:	bf18      	it	ne
   b5060:	4620      	movne	r0, r4
   b5062:	e7f7      	b.n	b5054 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5064:	4620      	mov	r0, r4
   b5066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b506a:	b004      	add	sp, #16
   b506c:	4770      	bx	lr
	...

000b5070 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b5070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5074:	4c16      	ldr	r4, [pc, #88]	; (b50d0 <_Z18ejecutarEvaluacionbi+0x60>)
   b5076:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b507a:	fb03 4401 	mla	r4, r3, r1, r4
   b507e:	4607      	mov	r7, r0
   b5080:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5082:	2600      	movs	r6, #0
   b5084:	46a1      	mov	r9, r4
   b5086:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b508a:	42b3      	cmp	r3, r6
   b508c:	dd1c      	ble.n	b50c8 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b508e:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b5092:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b5096:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b509a:	42bb      	cmp	r3, r7
   b509c:	d107      	bne.n	b50ae <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b509e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b50a2:	4640      	mov	r0, r8
   b50a4:	f7ff fc34 	bl	b4910 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b50a8:	3601      	adds	r6, #1
   b50aa:	3414      	adds	r4, #20
   b50ac:	e7eb      	b.n	b5086 <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b50ae:	4629      	mov	r1, r5
   b50b0:	4640      	mov	r0, r8
   b50b2:	9201      	str	r2, [sp, #4]
   b50b4:	f7ff ff96 	bl	b4fe4 <_Z14isActuadorDualii>
   b50b8:	9a01      	ldr	r2, [sp, #4]
   b50ba:	2800      	cmp	r0, #0
   b50bc:	d1f4      	bne.n	b50a8 <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b50be:	4611      	mov	r1, r2
   b50c0:	4640      	mov	r0, r8
   b50c2:	f7ff fc1d 	bl	b4900 <_Z14apagarActuadorii>
   b50c6:	e7ef      	b.n	b50a8 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b50c8:	b003      	add	sp, #12
   b50ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b50ce:	bf00      	nop
   b50d0:	2003d488 	.word	0x2003d488

000b50d4 <_Z10cambioModoi>:


void cambioModo(int modo)
{
   b50d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b50d6:	4604      	mov	r4, r0
   b50d8:	b9e0      	cbnz	r0, b5114 <_Z10cambioModoi+0x40>

      Serial.println("Modo BASICO detectado");
   b50da:	f003 ffe1 	bl	b90a0 <_Z16_fetch_usbserialv>
   b50de:	4918      	ldr	r1, [pc, #96]	; (b5140 <_Z10cambioModoi+0x6c>)
   b50e0:	f003 fddd 	bl	b8c9e <_ZN5Print7printlnEPKc>
      MODE = 0;
   b50e4:	4b17      	ldr	r3, [pc, #92]	; (b5144 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b50e6:	4918      	ldr	r1, [pc, #96]	; (b5148 <_Z10cambioModoi+0x74>)
      MODE = 0;
   b50e8:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");

   } else if (modo == 2) {
      Serial.println("Modo MUSICA detectado");
      MODE = 2;
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b50ea:	4668      	mov	r0, sp
   b50ec:	f003 fd09 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b50f0:	2003      	movs	r0, #3
   b50f2:	466a      	mov	r2, sp
   b50f4:	2100      	movs	r1, #0
   b50f6:	f7ff fc17 	bl	b4928 <_Z10showBitmapii6String>
   b50fa:	4668      	mov	r0, sp
   b50fc:	f003 fcb6 	bl	b8a6c <_ZN6StringD1Ev>

   }
   EEPROM.put(0, MODE);
   b5100:	f004 fa8e 	bl	b9620 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5104:	490f      	ldr	r1, [pc, #60]	; (b5144 <_Z10cambioModoi+0x70>)
   b5106:	2201      	movs	r2, #1
   b5108:	2000      	movs	r0, #0
}
   b510a:	b004      	add	sp, #16
   b510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5110:	f003 b94a 	b.w	b83a8 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b5114:	2801      	cmp	r0, #1
   b5116:	d108      	bne.n	b512a <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b5118:	f003 ffc2 	bl	b90a0 <_Z16_fetch_usbserialv>
   b511c:	490b      	ldr	r1, [pc, #44]	; (b514c <_Z10cambioModoi+0x78>)
   b511e:	f003 fdbe 	bl	b8c9e <_ZN5Print7printlnEPKc>
      MODE = 1;
   b5122:	4b08      	ldr	r3, [pc, #32]	; (b5144 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b5124:	490a      	ldr	r1, [pc, #40]	; (b5150 <_Z10cambioModoi+0x7c>)
      MODE = 1;
   b5126:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b5128:	e7df      	b.n	b50ea <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b512a:	2802      	cmp	r0, #2
   b512c:	d1e8      	bne.n	b5100 <_Z10cambioModoi+0x2c>
      Serial.println("Modo MUSICA detectado");
   b512e:	f003 ffb7 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5132:	4908      	ldr	r1, [pc, #32]	; (b5154 <_Z10cambioModoi+0x80>)
   b5134:	f003 fdb3 	bl	b8c9e <_ZN5Print7printlnEPKc>
      MODE = 2;
   b5138:	4b02      	ldr	r3, [pc, #8]	; (b5144 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b513a:	4907      	ldr	r1, [pc, #28]	; (b5158 <_Z10cambioModoi+0x84>)
      MODE = 2;
   b513c:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b513e:	e7d4      	b.n	b50ea <_Z10cambioModoi+0x16>
   b5140:	000b9f74 	.word	0x000b9f74
   b5144:	2003d476 	.word	0x2003d476
   b5148:	000b9f8a 	.word	0x000b9f8a
   b514c:	000b9fa3 	.word	0x000b9fa3
   b5150:	000b9fbb 	.word	0x000b9fbb
   b5154:	000b9fd6 	.word	0x000b9fd6
   b5158:	000b9fec 	.word	0x000b9fec

000b515c <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b515c:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b515e:	7803      	ldrb	r3, [r0, #0]
   b5160:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5162:	bf0c      	ite	eq
   b5164:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5166:	2200      	movne	r2, #0
   int i = 0;
   b5168:	4613      	mov	r3, r2
   b516a:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b516c:	240a      	movs	r4, #10
      i++;
   b516e:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5170:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5174:	3930      	subs	r1, #48	; 0x30
   b5176:	b2cd      	uxtb	r5, r1
   b5178:	2d09      	cmp	r5, #9
   b517a:	d802      	bhi.n	b5182 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b517c:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5180:	e7f6      	b.n	b5170 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5182:	b102      	cbz	r2, b5186 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5184:	4240      	negs	r0, r0
   return num;
}
   b5186:	bd30      	pop	{r4, r5, pc}

000b5188 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5188:	b538      	push	{r3, r4, r5, lr}
   b518a:	4614      	mov	r4, r2
   b518c:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b518e:	f004 fcc9 	bl	b9b24 <strtok>
   int j = 0;
   b5192:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5194:	b140      	cbz	r0, b51a8 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5196:	f7ff ffe1 	bl	b515c <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b519a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b519c:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b51a0:	2000      	movs	r0, #0
   b51a2:	f004 fcbf 	bl	b9b24 <strtok>
   while (ptr != NULL)
   b51a6:	e7f5      	b.n	b5194 <_Z5splitPcS_Pi+0xc>
   }
}
   b51a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b51ac <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b51ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51ae:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b51b2:	f10d 0307 	add.w	r3, sp, #7
   b51b6:	460a      	mov	r2, r1
   b51b8:	4601      	mov	r1, r0
   b51ba:	480d      	ldr	r0, [pc, #52]	; (b51f0 <_Z17readDataFromBlockhPhh+0x44>)
   b51bc:	4d0d      	ldr	r5, [pc, #52]	; (b51f4 <_Z17readDataFromBlockhPhh+0x48>)
   b51be:	f002 f8a9 	bl	b7314 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b51c2:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b51c4:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b51c6:	d010      	beq.n	b51ea <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b51c8:	f003 ff6a 	bl	b90a0 <_Z16_fetch_usbserialv>
   b51cc:	490a      	ldr	r1, [pc, #40]	; (b51f8 <_Z17readDataFromBlockhPhh+0x4c>)
   b51ce:	f003 fd53 	bl	b8c78 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b51d2:	f003 ff65 	bl	b90a0 <_Z16_fetch_usbserialv>
   b51d6:	7829      	ldrb	r1, [r5, #0]
   b51d8:	4604      	mov	r4, r0
   b51da:	4805      	ldr	r0, [pc, #20]	; (b51f0 <_Z17readDataFromBlockhPhh+0x44>)
   b51dc:	f001 fdee 	bl	b6dbc <_ZN7MFRC52217GetStatusCodeNameEh>
   b51e0:	4601      	mov	r1, r0
   b51e2:	4620      	mov	r0, r4
   b51e4:	f003 fd5b 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b51e8:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b51ea:	b003      	add	sp, #12
   b51ec:	bd30      	pop	{r4, r5, pc}
   b51ee:	bf00      	nop
   b51f0:	2003de54 	.word	0x2003de54
   b51f4:	2003e1ac 	.word	0x2003e1ac
   b51f8:	000ba005 	.word	0x000ba005

000b51fc <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b51fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51fe:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5200:	4d1e      	ldr	r5, [pc, #120]	; (b527c <_Z8getTagIDPi+0x80>)
   b5202:	4a1f      	ldr	r2, [pc, #124]	; (b5280 <_Z8getTagIDPi+0x84>)
   b5204:	9500      	str	r5, [sp, #0]
   b5206:	4b1f      	ldr	r3, [pc, #124]	; (b5284 <_Z8getTagIDPi+0x88>)
   b5208:	7812      	ldrb	r2, [r2, #0]
   b520a:	4f1f      	ldr	r7, [pc, #124]	; (b5288 <_Z8getTagIDPi+0x8c>)
{
   b520c:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b520e:	2160      	movs	r1, #96	; 0x60
   b5210:	4628      	mov	r0, r5
   b5212:	f002 f8a0 	bl	b7356 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5216:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5218:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b521a:	d00f      	beq.n	b523c <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b521c:	f003 ff40 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5220:	491a      	ldr	r1, [pc, #104]	; (b528c <_Z8getTagIDPi+0x90>)
   b5222:	f003 fd29 	bl	b8c78 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5226:	f003 ff3b 	bl	b90a0 <_Z16_fetch_usbserialv>
   b522a:	7839      	ldrb	r1, [r7, #0]
   b522c:	4604      	mov	r4, r0
   b522e:	4628      	mov	r0, r5
   b5230:	f001 fdc4 	bl	b6dbc <_ZN7MFRC52217GetStatusCodeNameEh>
   b5234:	4601      	mov	r1, r0
   b5236:	4620      	mov	r0, r4
   b5238:	f003 fd31 	bl	b8c9e <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b523c:	4b14      	ldr	r3, [pc, #80]	; (b5290 <_Z8getTagIDPi+0x94>)
   b523e:	2212      	movs	r2, #18
   b5240:	7818      	ldrb	r0, [r3, #0]
   b5242:	a907      	add	r1, sp, #28
   b5244:	f7ff ffb2 	bl	b51ac <_Z17readDataFromBlockhPhh>
   b5248:	b1b0      	cbz	r0, b5278 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b524a:	ac07      	add	r4, sp, #28
   b524c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b524e:	ad03      	add	r5, sp, #12
   b5250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5252:	6823      	ldr	r3, [r4, #0]
   b5254:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b5256:	f003 ff23 	bl	b90a0 <_Z16_fetch_usbserialv>
   b525a:	490e      	ldr	r1, [pc, #56]	; (b5294 <_Z8getTagIDPi+0x98>)
   b525c:	aa03      	add	r2, sp, #12
   b525e:	f7fe ff5d 	bl	b411c <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5262:	490d      	ldr	r1, [pc, #52]	; (b5298 <_Z8getTagIDPi+0x9c>)
   b5264:	4632      	mov	r2, r6
   b5266:	a803      	add	r0, sp, #12
   b5268:	f7ff ff8e 	bl	b5188 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b526c:	4803      	ldr	r0, [pc, #12]	; (b527c <_Z8getTagIDPi+0x80>)
   b526e:	f002 f82c 	bl	b72ca <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5272:	4802      	ldr	r0, [pc, #8]	; (b527c <_Z8getTagIDPi+0x80>)
   b5274:	f001 fe89 	bl	b6f8a <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5278:	b00d      	add	sp, #52	; 0x34
   b527a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b527c:	2003de54 	.word	0x2003de54
   b5280:	2003d3f8 	.word	0x2003d3f8
   b5284:	2003de45 	.word	0x2003de45
   b5288:	2003e1ac 	.word	0x2003e1ac
   b528c:	000ba01c 	.word	0x000ba01c
   b5290:	2003d3d0 	.word	0x2003d3d0
   b5294:	000ba038 	.word	0x000ba038
   b5298:	2003d3d1 	.word	0x2003d3d1

000b529c <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b529c:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b529e:	b940      	cbnz	r0, b52b2 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b52a0:	4b32      	ldr	r3, [pc, #200]	; (b536c <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b52a2:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b52a4:	2c05      	cmp	r4, #5
   b52a6:	d858      	bhi.n	b535a <_Z13asignarPuertoi+0xbe>
   b52a8:	e8df f004 	tbb	[pc, r4]
   b52ac:	32221305 	.word	0x32221305
   b52b0:	483d      	.short	0x483d
      option = puertoDigital;
   b52b2:	4b2f      	ldr	r3, [pc, #188]	; (b5370 <_Z13asignarPuertoi+0xd4>)
   b52b4:	e7f5      	b.n	b52a2 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b52b6:	f003 fef3 	bl	b90a0 <_Z16_fetch_usbserialv>
   b52ba:	492e      	ldr	r1, [pc, #184]	; (b5374 <_Z13asignarPuertoi+0xd8>)
   b52bc:	f003 fcdc 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b52c0:	4a2a      	ldr	r2, [pc, #168]	; (b536c <_Z13asignarPuertoi+0xd0>)
   b52c2:	6813      	ldr	r3, [r2, #0]
   b52c4:	3301      	adds	r3, #1
   b52c6:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b52c8:	4a2b      	ldr	r2, [pc, #172]	; (b5378 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b52ca:	6813      	ldr	r3, [r2, #0]
   b52cc:	3301      	adds	r3, #1
   b52ce:	6013      	str	r3, [r2, #0]
      return 4;
   b52d0:	e01c      	b.n	b530c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b52d2:	f003 fee5 	bl	b90a0 <_Z16_fetch_usbserialv>
   b52d6:	4929      	ldr	r1, [pc, #164]	; (b537c <_Z13asignarPuertoi+0xe0>)
   b52d8:	f003 fcce 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b52dc:	4a23      	ldr	r2, [pc, #140]	; (b536c <_Z13asignarPuertoi+0xd0>)
   b52de:	6813      	ldr	r3, [r2, #0]
   b52e0:	3301      	adds	r3, #1
   b52e2:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b52e4:	4a24      	ldr	r2, [pc, #144]	; (b5378 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b52e6:	6813      	ldr	r3, [r2, #0]
   b52e8:	3301      	adds	r3, #1
   b52ea:	6013      	str	r3, [r2, #0]
      return 2;
   b52ec:	2402      	movs	r4, #2
   b52ee:	e00d      	b.n	b530c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b52f0:	f003 fed6 	bl	b90a0 <_Z16_fetch_usbserialv>
   b52f4:	4922      	ldr	r1, [pc, #136]	; (b5380 <_Z13asignarPuertoi+0xe4>)
   b52f6:	f003 fcbf 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b52fa:	4b1c      	ldr	r3, [pc, #112]	; (b536c <_Z13asignarPuertoi+0xd0>)
   b52fc:	f04f 32ff 	mov.w	r2, #4294967295
   b5300:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5302:	4a1d      	ldr	r2, [pc, #116]	; (b5378 <_Z13asignarPuertoi+0xdc>)
   b5304:	6813      	ldr	r3, [r2, #0]
   b5306:	3301      	adds	r3, #1
   b5308:	6013      	str	r3, [r2, #0]
      return 4;
   b530a:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
   b530c:	4620      	mov	r0, r4
   b530e:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5310:	f003 fec6 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5314:	491b      	ldr	r1, [pc, #108]	; (b5384 <_Z13asignarPuertoi+0xe8>)
   b5316:	f003 fcaf 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoDigital++;
   b531a:	4a15      	ldr	r2, [pc, #84]	; (b5370 <_Z13asignarPuertoi+0xd4>)
   b531c:	6813      	ldr	r3, [r2, #0]
   b531e:	3301      	adds	r3, #1
   b5320:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5322:	4a19      	ldr	r2, [pc, #100]	; (b5388 <_Z13asignarPuertoi+0xec>)
   b5324:	e7df      	b.n	b52e6 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b5326:	f003 febb 	bl	b90a0 <_Z16_fetch_usbserialv>
   b532a:	4918      	ldr	r1, [pc, #96]	; (b538c <_Z13asignarPuertoi+0xf0>)
   b532c:	f003 fca4 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5330:	4a0f      	ldr	r2, [pc, #60]	; (b5370 <_Z13asignarPuertoi+0xd4>)
   b5332:	6813      	ldr	r3, [r2, #0]
   b5334:	3301      	adds	r3, #1
   b5336:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5338:	4a13      	ldr	r2, [pc, #76]	; (b5388 <_Z13asignarPuertoi+0xec>)
   b533a:	e7c6      	b.n	b52ca <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b533c:	f003 feb0 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5340:	4913      	ldr	r1, [pc, #76]	; (b5390 <_Z13asignarPuertoi+0xf4>)
   b5342:	f003 fc99 	bl	b8c78 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b5346:	4b0a      	ldr	r3, [pc, #40]	; (b5370 <_Z13asignarPuertoi+0xd4>)
   b5348:	f04f 32ff 	mov.w	r2, #4294967295
   b534c:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b534e:	4a0e      	ldr	r2, [pc, #56]	; (b5388 <_Z13asignarPuertoi+0xec>)
   b5350:	6813      	ldr	r3, [r2, #0]
   b5352:	3301      	adds	r3, #1
   b5354:	6013      	str	r3, [r2, #0]
      return 6;
   b5356:	2406      	movs	r4, #6
   b5358:	e7d8      	b.n	b530c <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b535a:	f003 fea1 	bl	b90a0 <_Z16_fetch_usbserialv>
   b535e:	490d      	ldr	r1, [pc, #52]	; (b5394 <_Z13asignarPuertoi+0xf8>)
   b5360:	f003 fc8a 	bl	b8c78 <_ZN5Print5printEPKc>
      return -1;
   b5364:	f04f 34ff 	mov.w	r4, #4294967295
   b5368:	e7d0      	b.n	b530c <_Z13asignarPuertoi+0x70>
   b536a:	bf00      	nop
   b536c:	2003e198 	.word	0x2003e198
   b5370:	2003d3dc 	.word	0x2003d3dc
   b5374:	000ba044 	.word	0x000ba044
   b5378:	2003e19c 	.word	0x2003e19c
   b537c:	000ba05b 	.word	0x000ba05b
   b5380:	000ba072 	.word	0x000ba072
   b5384:	000ba089 	.word	0x000ba089
   b5388:	2003e1a0 	.word	0x2003e1a0
   b538c:	000ba0a0 	.word	0x000ba0a0
   b5390:	000ba0b7 	.word	0x000ba0b7
   b5394:	000ba0ce 	.word	0x000ba0ce

000b5398 <setup>:

// Unconnected mode ON, evita conexion wifi.
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b5398:	b570      	push	{r4, r5, r6, lr}
   b539a:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b539c:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b539e:	a804      	add	r0, sp, #16
   b53a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
        bool clearSession) :
   b53a4:	f8ad 4018 	strh.w	r4, [sp, #24]
   b53a8:	f003 fd8a 	bl	b8ec0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b53ac:	484a      	ldr	r0, [pc, #296]	; (b54d8 <setup+0x140>)
   b53ae:	4623      	mov	r3, r4
   b53b0:	4622      	mov	r2, r4
   b53b2:	4621      	mov	r1, r4
   b53b4:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b53b6:	4c49      	ldr	r4, [pc, #292]	; (b54dc <setup+0x144>)
   b53b8:	f003 f982 	bl	b86c0 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b53bc:	f003 fe70 	bl	b90a0 <_Z16_fetch_usbserialv>
   b53c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b53c4:	f003 fe60 	bl	b9088 <_ZN9USBSerial5beginEl>
   b53c8:	7821      	ldrb	r1, [r4, #0]
   b53ca:	f3bf 8f5b 	dmb	ish
   b53ce:	f011 0101 	ands.w	r1, r1, #1
   b53d2:	d10b      	bne.n	b53ec <setup+0x54>
   b53d4:	4620      	mov	r0, r4
   b53d6:	9103      	str	r1, [sp, #12]
   b53d8:	f7fe fe6c 	bl	b40b4 <__cxa_guard_acquire>
   b53dc:	9903      	ldr	r1, [sp, #12]
   b53de:	b128      	cbz	r0, b53ec <setup+0x54>
   b53e0:	483f      	ldr	r0, [pc, #252]	; (b54e0 <setup+0x148>)
   b53e2:	f003 fa39 	bl	b8858 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b53e6:	4620      	mov	r0, r4
   b53e8:	f7fe fe69 	bl	b40be <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b53ec:	483c      	ldr	r0, [pc, #240]	; (b54e0 <setup+0x148>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b53ee:	4c3d      	ldr	r4, [pc, #244]	; (b54e4 <setup+0x14c>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b53f0:	2501      	movs	r5, #1
   b53f2:	f003 fa3b 	bl	b886c <_ZN8SPIClass5beginEv>
   b53f6:	462b      	mov	r3, r5
   b53f8:	223c      	movs	r2, #60	; 0x3c
   b53fa:	2102      	movs	r1, #2
   b53fc:	483a      	ldr	r0, [pc, #232]	; (b54e8 <setup+0x150>)
   b53fe:	9500      	str	r5, [sp, #0]
   b5400:	f002 fb92 	bl	b7b28 <_ZN16Adafruit_SSD13065beginEhhbb>
  mfrc522.PCD_Init();
   b5404:	4839      	ldr	r0, [pc, #228]	; (b54ec <setup+0x154>)
   b5406:	f001 fe24 	bl	b7052 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b540a:	4a39      	ldr	r2, [pc, #228]	; (b54f0 <setup+0x158>)
   b540c:	21ff      	movs	r1, #255	; 0xff
   b540e:	7011      	strb	r1, [r2, #0]
   b5410:	7051      	strb	r1, [r2, #1]
   b5412:	7091      	strb	r1, [r2, #2]
   b5414:	70d1      	strb	r1, [r2, #3]
   b5416:	7111      	strb	r1, [r2, #4]
   b5418:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b541a:	f004 f901 	bl	b9620 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b541e:	2000      	movs	r0, #0
   b5420:	f002 ffba 	bl	b8398 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5424:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5426:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5428:	d10d      	bne.n	b5446 <setup+0xae>
    
    Serial.println("EEPROM empty");
   b542a:	f003 fe39 	bl	b90a0 <_Z16_fetch_usbserialv>
    MODE = 0;
   b542e:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b5430:	4930      	ldr	r1, [pc, #192]	; (b54f4 <setup+0x15c>)
   b5432:	f003 fc34 	bl	b8c9e <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5436:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5438:	f004 f8f2 	bl	b9620 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b543c:	462a      	mov	r2, r5
   b543e:	4621      	mov	r1, r4
   b5440:	4630      	mov	r0, r6
   b5442:	f002 ffb1 	bl	b83a8 <HAL_EEPROM_Put>

  }

  display.clearDisplay();
   b5446:	4d28      	ldr	r5, [pc, #160]	; (b54e8 <setup+0x150>)
   b5448:	4628      	mov	r0, r5
   b544a:	f002 fb5f 	bl	b7b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1.5);
   b544e:	2101      	movs	r1, #1
   b5450:	4628      	mov	r0, r5
   b5452:	f001 fc96 	bl	b6d82 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
  display.setCursor(0, 0);

  if ( MODE == 0 ) {
   b5456:	7824      	ldrb	r4, [r4, #0]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5458:	2600      	movs	r6, #0
   b545a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b545e:	e9c5 6304 	strd	r6, r3, [r5, #16]
   b5462:	bb1c      	cbnz	r4, b54ac <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b5464:	2101      	movs	r1, #1
   b5466:	2006      	movs	r0, #6
   b5468:	f004 f844 	bl	b94f4 <pinMode>
    ledObject.init();
   b546c:	4822      	ldr	r0, [pc, #136]	; (b54f8 <setup+0x160>)
   b546e:	f002 ff01 	bl	b8274 <_ZN12ChainableLED4initEv>
    init = true;
   b5472:	4b22      	ldr	r3, [pc, #136]	; (b54fc <setup+0x164>)
   b5474:	2201      	movs	r2, #1
   b5476:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b5478:	4a21      	ldr	r2, [pc, #132]	; (b5500 <setup+0x168>)
   b547a:	6813      	ldr	r3, [r2, #0]
   b547c:	3301      	adds	r3, #1
   b547e:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b5480:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5484:	4a1f      	ldr	r2, [pc, #124]	; (b5504 <setup+0x16c>)
   b5486:	434b      	muls	r3, r1
   b5488:	18d1      	adds	r1, r2, r3
   b548a:	50d4      	str	r4, [r2, r3]
   b548c:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144

    showBitmap(0,0,"");
   b5490:	a804      	add	r0, sp, #16
   b5492:	491d      	ldr	r1, [pc, #116]	; (b5508 <setup+0x170>)
   b5494:	f003 fb35 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5498:	aa04      	add	r2, sp, #16
   b549a:	4621      	mov	r1, r4
   b549c:	4620      	mov	r0, r4

  } else {

    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    showBitmap(0,2,"");
   b549e:	f7ff fa43 	bl	b4928 <_Z10showBitmapii6String>
   b54a2:	a804      	add	r0, sp, #16
   b54a4:	f003 fae2 	bl	b8a6c <_ZN6StringD1Ev>
  }
  
}
   b54a8:	b008      	add	sp, #32
   b54aa:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b54ac:	2c01      	cmp	r4, #1
   b54ae:	d107      	bne.n	b54c0 <setup+0x128>
    showBitmap(0,1,"");
   b54b0:	4915      	ldr	r1, [pc, #84]	; (b5508 <setup+0x170>)
   b54b2:	a804      	add	r0, sp, #16
   b54b4:	f003 fb25 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b54b8:	aa04      	add	r2, sp, #16
   b54ba:	4621      	mov	r1, r4
    showBitmap(0,2,"");
   b54bc:	4630      	mov	r0, r6
   b54be:	e7ee      	b.n	b549e <setup+0x106>
    pinMode(Zumbador_PIN, OUTPUT);
   b54c0:	2101      	movs	r1, #1
   b54c2:	2006      	movs	r0, #6
   b54c4:	f004 f816 	bl	b94f4 <pinMode>
    showBitmap(0,2,"");
   b54c8:	490f      	ldr	r1, [pc, #60]	; (b5508 <setup+0x170>)
   b54ca:	a804      	add	r0, sp, #16
   b54cc:	f003 fb19 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b54d0:	aa04      	add	r2, sp, #16
   b54d2:	2102      	movs	r1, #2
   b54d4:	e7f2      	b.n	b54bc <setup+0x124>
   b54d6:	bf00      	nop
   b54d8:	2003e710 	.word	0x2003e710
   b54dc:	2003d468 	.word	0x2003d468
   b54e0:	2003d46c 	.word	0x2003d46c
   b54e4:	2003d476 	.word	0x2003d476
   b54e8:	2003daac 	.word	0x2003daac
   b54ec:	2003de54 	.word	0x2003de54
   b54f0:	2003de45 	.word	0x2003de45
   b54f4:	000ba0f6 	.word	0x000ba0f6
   b54f8:	2003de4c 	.word	0x2003de4c
   b54fc:	2003de44 	.word	0x2003de44
   b5500:	2003d3d8 	.word	0x2003d3d8
   b5504:	2003d488 	.word	0x2003d488
   b5508:	000ba0f5 	.word	0x000ba0f5

000b550c <loop>:
// Declaramos función reset en dirección 0.
void(* resetFunc) (void) = 0;


void loop()
{
   b550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b5510:	48aa      	ldr	r0, [pc, #680]	; (b57bc <loop+0x2b0>)
   b5512:	f8df 830c 	ldr.w	r8, [pc, #780]	; b5820 <loop+0x314>
   b5516:	4caa      	ldr	r4, [pc, #680]	; (b57c0 <loop+0x2b4>)
{
   b5518:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
  if (mfrc522.PICC_IsNewCardPresent())
   b551c:	f001 fec4 	bl	b72a8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b5520:	b190      	cbz	r0, b5548 <loop+0x3c>
  {
    Serial.print("Tag Detectada --> ");
   b5522:	f003 fdbd 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5526:	49a7      	ldr	r1, [pc, #668]	; (b57c4 <loop+0x2b8>)
   b5528:	f003 fba6 	bl	b8c78 <_ZN5Print5printEPKc>
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b552c:	48a3      	ldr	r0, [pc, #652]	; (b57bc <loop+0x2b0>)
   b552e:	f002 f88c 	bl	b764a <_ZN7MFRC52219PICC_ReadCardSerialEv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b5532:	48a5      	ldr	r0, [pc, #660]	; (b57c8 <loop+0x2bc>)
   b5534:	f7ff fe62 	bl	b51fc <_Z8getTagIDPi>

    play = false;
   b5538:	2300      	movs	r3, #0
   b553a:	f888 3000 	strb.w	r3, [r8]
    if ( MODE == 0 ) {
   b553e:	7823      	ldrb	r3, [r4, #0]
   b5540:	2b00      	cmp	r3, #0
   b5542:	d15b      	bne.n	b55fc <loop+0xf0>
      pitidoOFF0();
   b5544:	f7ff f8a1 	bl	b468a <_Z10pitidoOFF0v>
      pitidoOFF1(6);
    }
  
  }

  if (!play && init) {
   b5548:	f898 3000 	ldrb.w	r3, [r8]
   b554c:	b923      	cbnz	r3, b5558 <loop+0x4c>
   b554e:	4b9f      	ldr	r3, [pc, #636]	; (b57cc <loop+0x2c0>)
   b5550:	781b      	ldrb	r3, [r3, #0]
   b5552:	b10b      	cbz	r3, b5558 <loop+0x4c>
    ledApagar();
   b5554:	f7fe fff0 	bl	b4538 <_Z9ledApagarv>
  }

  if (bitmap) {
   b5558:	4d9d      	ldr	r5, [pc, #628]	; (b57d0 <loop+0x2c4>)
   b555a:	782b      	ldrb	r3, [r5, #0]
   b555c:	b193      	cbz	r3, b5584 <loop+0x78>
   b555e:	f002 ff0b 	bl	b8378 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b5562:	4b9c      	ldr	r3, [pc, #624]	; (b57d4 <loop+0x2c8>)
   b5564:	6018      	str	r0, [r3, #0]
    // Si han pasado 4 segundos quitamos el bitmap/mensaje
    if ( currentTime-startTime >= limit ) {
   b5566:	4b9c      	ldr	r3, [pc, #624]	; (b57d8 <loop+0x2cc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	1ac0      	subs	r0, r0, r3
   b556c:	4b9b      	ldr	r3, [pc, #620]	; (b57dc <loop+0x2d0>)
   b556e:	681b      	ldr	r3, [r3, #0]
   b5570:	4298      	cmp	r0, r3
   b5572:	d307      	bcc.n	b5584 <loop+0x78>
      bitmap=false;
      display.clearDisplay();
   b5574:	489a      	ldr	r0, [pc, #616]	; (b57e0 <loop+0x2d4>)
      bitmap=false;
   b5576:	2300      	movs	r3, #0
   b5578:	702b      	strb	r3, [r5, #0]
      display.clearDisplay();
   b557a:	f002 fac7 	bl	b7b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b557e:	4898      	ldr	r0, [pc, #608]	; (b57e0 <loop+0x2d4>)
   b5580:	f002 fd2c 	bl	b7fdc <_ZN16Adafruit_SSD13067displayEv>
    }
  }

  // ------------------------------ Modo BASICO --------------------------------------
  if ( MODE == 0 ) 
   b5584:	7826      	ldrb	r6, [r4, #0]
  {
    
    // Tipo de tarjeta
    switch (tagInfo[0])
   b5586:	4c90      	ldr	r4, [pc, #576]	; (b57c8 <loop+0x2bc>)
   b5588:	6825      	ldr	r5, [r4, #0]
  if ( MODE == 0 ) 
   b558a:	2e00      	cmp	r6, #0
   b558c:	f040 80e9 	bne.w	b5762 <loop+0x256>
    switch (tagInfo[0])
   b5590:	4f94      	ldr	r7, [pc, #592]	; (b57e4 <loop+0x2d8>)
   b5592:	2d00      	cmp	r5, #0
   b5594:	d065      	beq.n	b5662 <loop+0x156>
   b5596:	2d06      	cmp	r5, #6
   b5598:	f040 80d0 	bne.w	b573c <loop+0x230>
      pitidoBlink0();
   b559c:	f7ff f888 	bl	b46b0 <_Z12pitidoBlink0v>
    {

      // Tarjeta COMUN
      case 6:
        blinkAndSleep(true);
        switch (tagInfo[1])
   b55a0:	6865      	ldr	r5, [r4, #4]
   b55a2:	2d01      	cmp	r5, #1
   b55a4:	d034      	beq.n	b5610 <loop+0x104>
   b55a6:	2d02      	cmp	r5, #2
   b55a8:	d041      	beq.n	b562e <loop+0x122>
   b55aa:	b92d      	cbnz	r5, b55b8 <loop+0xac>
        {
          // Cambio de MODO
          case 0:
            
            cambioModo(tagInfo[2]);
   b55ac:	68a0      	ldr	r0, [r4, #8]
   b55ae:	f7ff fd91 	bl	b50d4 <_Z10cambioModoi>
            resetFunc();
   b55b2:	4b8d      	ldr	r3, [pc, #564]	; (b57e8 <loop+0x2dc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	4798      	blx	r3
          Serial.println("Tarjeta inválida para este modo");
        }
        break;
    }

    if (tagInfo[0]!=-1) { 
   b55b8:	6823      	ldr	r3, [r4, #0]
   b55ba:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b55bc:	bf1c      	itt	ne
   b55be:	f04f 33ff 	movne.w	r3, #4294967295
   b55c2:	6023      	strne	r3, [r4, #0]
    }

    if (numActuadoresBloque > 0 && play == true)
   b55c4:	683b      	ldr	r3, [r7, #0]
   b55c6:	2b00      	cmp	r3, #0
   b55c8:	f340 80f3 	ble.w	b57b2 <loop+0x2a6>
   b55cc:	f898 3000 	ldrb.w	r3, [r8]
   b55d0:	2b00      	cmp	r3, #0
   b55d2:	f000 80ee 	beq.w	b57b2 <loop+0x2a6>
    {
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b55d6:	4c85      	ldr	r4, [pc, #532]	; (b57ec <loop+0x2e0>)
   b55d8:	2101      	movs	r1, #1
   b55da:	6922      	ldr	r2, [r4, #16]
   b55dc:	6860      	ldr	r0, [r4, #4]
   b55de:	f7fe ff57 	bl	b4490 <_Z10leerSensoriii>
   b55e2:	4b83      	ldr	r3, [pc, #524]	; (b57f0 <loop+0x2e4>)
   b55e4:	7018      	strb	r0, [r3, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b55e6:	4b83      	ldr	r3, [pc, #524]	; (b57f4 <loop+0x2e8>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b55e8:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b55ea:	6819      	ldr	r1, [r3, #0]
   b55ec:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
      reproducir();
      play = false;
    }
  }

}
   b55f0:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
   b55f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b55f8:	f7ff b89e 	b.w	b4738 <_Z15activarActuadoriib>
      pitidoOFF1(2);
   b55fc:	2002      	movs	r0, #2
   b55fe:	f7ff f908 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b5602:	2004      	movs	r0, #4
   b5604:	f7ff f905 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b5608:	2006      	movs	r0, #6
   b560a:	f7ff f902 	bl	b4812 <_Z10pitidoOFF1i>
   b560e:	e79b      	b.n	b5548 <loop+0x3c>
            showBitmap(3,0,"Ejecutando...");
   b5610:	4979      	ldr	r1, [pc, #484]	; (b57f8 <loop+0x2ec>)
            play = true;
   b5612:	f888 5000 	strb.w	r5, [r8]
              showBitmap(3,0,"Borrado completo realizado");
   b5616:	a8c4      	add	r0, sp, #784	; 0x310
   b5618:	f003 fa73 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b561c:	aac4      	add	r2, sp, #784	; 0x310
   b561e:	4631      	mov	r1, r6
   b5620:	2003      	movs	r0, #3
              showBitmap(1,1,""); //D4
   b5622:	f7ff f981 	bl	b4928 <_Z10showBitmapii6String>
   b5626:	a8c4      	add	r0, sp, #784	; 0x310
   b5628:	f003 fa20 	bl	b8a6c <_ZN6StringD1Ev>
   b562c:	e7c4      	b.n	b55b8 <loop+0xac>
            if ( tagInfo[2] == 1 ) {
   b562e:	68a3      	ldr	r3, [r4, #8]
   b5630:	2b01      	cmp	r3, #1
   b5632:	d104      	bne.n	b563e <loop+0x132>
              borradoALL(0);
   b5634:	4630      	mov	r0, r6
   b5636:	f7ff fa4f 	bl	b4ad8 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b563a:	4970      	ldr	r1, [pc, #448]	; (b57fc <loop+0x2f0>)
   b563c:	e7eb      	b.n	b5616 <loop+0x10a>
              showBitmap(2,1,"");
   b563e:	4970      	ldr	r1, [pc, #448]	; (b5800 <loop+0x2f4>)
   b5640:	a8c4      	add	r0, sp, #784	; 0x310
   b5642:	f003 fa5e 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5646:	2101      	movs	r1, #1
   b5648:	aac4      	add	r2, sp, #784	; 0x310
   b564a:	4628      	mov	r0, r5
   b564c:	f7ff f96c 	bl	b4928 <_Z10showBitmapii6String>
   b5650:	a8c4      	add	r0, sp, #784	; 0x310
   b5652:	f003 fa0b 	bl	b8a6c <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b5656:	f003 fd23 	bl	b90a0 <_Z16_fetch_usbserialv>
   b565a:	496a      	ldr	r1, [pc, #424]	; (b5804 <loop+0x2f8>)
          Serial.println("Tarjeta inválida para este modo");
   b565c:	f003 fb1f 	bl	b8c9e <_ZN5Print7printlnEPKc>
   b5660:	e7aa      	b.n	b55b8 <loop+0xac>
        tipo = tagInfo[2];
   b5662:	4e69      	ldr	r6, [pc, #420]	; (b5808 <loop+0x2fc>)
        id = tagInfo[1];
   b5664:	6863      	ldr	r3, [r4, #4]
        tipo = tagInfo[2];
   b5666:	68a2      	ldr	r2, [r4, #8]
        id = tagInfo[1];
   b5668:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b5824 <loop+0x318>
        tipo = tagInfo[2];
   b566c:	6032      	str	r2, [r6, #0]
        estado = tagInfo[3];
   b566e:	4a61      	ldr	r2, [pc, #388]	; (b57f4 <loop+0x2e8>)
   b5670:	68e1      	ldr	r1, [r4, #12]
   b5672:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b5828 <loop+0x31c>
        id = tagInfo[1];
   b5676:	f8c9 3000 	str.w	r3, [r9]
        if (id >= 2) {
   b567a:	2b01      	cmp	r3, #1
        estado = tagInfo[3];
   b567c:	6011      	str	r1, [r2, #0]
        if (id >= 2) {
   b567e:	dd2a      	ble.n	b56d6 <loop+0x1ca>
          Serial.println("Sensor detectado");
   b5680:	f003 fd0e 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5684:	4961      	ldr	r1, [pc, #388]	; (b580c <loop+0x300>)
   b5686:	f003 fb0a 	bl	b8c9e <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b568a:	4b58      	ldr	r3, [pc, #352]	; (b57ec <loop+0x2e0>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b568c:	f8d6 b000 	ldr.w	fp, [r6]
          sensor.id = id;
   b5690:	f8d9 2000 	ldr.w	r2, [r9]
          bloques[0].sensores[0] = sensor;
   b5694:	605a      	str	r2, [r3, #4]
          bloques[0].numSensores++;
   b5696:	681a      	ldr	r2, [r3, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5698:	f1bb 0f00 	cmp.w	fp, #0
   b569c:	bf18      	it	ne
   b569e:	f04f 0b02 	movne.w	fp, #2
          bloques[0].numSensores++;
   b56a2:	3201      	adds	r2, #1
          bloques[0].sensores[0] = sensor;
   b56a4:	f8c3 b010 	str.w	fp, [r3, #16]
          bloques[0].numSensores++;
   b56a8:	601a      	str	r2, [r3, #0]
          numSensoresBloque++;
   b56aa:	f8da 3000 	ldr.w	r3, [sl]
   b56ae:	3301      	adds	r3, #1
   b56b0:	f8ca 3000 	str.w	r3, [sl]
   b56b4:	f7fe fffc 	bl	b46b0 <_Z12pitidoBlink0v>
            showBitmap(1,3,""); //A0
   b56b8:	4951      	ldr	r1, [pc, #324]	; (b5800 <loop+0x2f4>)
   b56ba:	a8c4      	add	r0, sp, #784	; 0x310
          if (sensor.puerto == 0) {
   b56bc:	f1bb 0f00 	cmp.w	fp, #0
   b56c0:	d134      	bne.n	b572c <loop+0x220>
            showBitmap(1,3,""); //A0
   b56c2:	f003 fa1e 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b56c6:	aac4      	add	r2, sp, #784	; 0x310
   b56c8:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b56ca:	2001      	movs	r0, #1
   b56cc:	f7ff f92c 	bl	b4928 <_Z10showBitmapii6String>
   b56d0:	a8c4      	add	r0, sp, #784	; 0x310
   b56d2:	f003 f9cb 	bl	b8a6c <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b56d6:	f8da 3000 	ldr.w	r3, [sl]
   b56da:	2b00      	cmp	r3, #0
   b56dc:	dd2b      	ble.n	b5736 <loop+0x22a>
          if (tagInfo[1] == 0 || tagInfo[1] == 1) {
   b56de:	6863      	ldr	r3, [r4, #4]
   b56e0:	2b01      	cmp	r3, #1
   b56e2:	f63f af69 	bhi.w	b55b8 <loop+0xac>
            Serial.println("Actuador detectado");
   b56e6:	f003 fcdb 	bl	b90a0 <_Z16_fetch_usbserialv>
   b56ea:	4949      	ldr	r1, [pc, #292]	; (b5810 <loop+0x304>)
   b56ec:	f003 fad7 	bl	b8c9e <_ZN5Print7printlnEPKc>
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b56f0:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b56f2:	f8d9 1000 	ldr.w	r1, [r9]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b56f6:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b56f8:	4b3c      	ldr	r3, [pc, #240]	; (b57ec <loop+0x2e0>)
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b56fa:	bf0c      	ite	eq
   b56fc:	2202      	moveq	r2, #2
   b56fe:	2204      	movne	r2, #4
            bloques[0].actuadores[0] = actuador;
   b5700:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b5704:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            bloques[0].actuadores[0] = actuador;
   b5708:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b570c:	3201      	adds	r2, #1
   b570e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b5712:	683b      	ldr	r3, [r7, #0]
   b5714:	3301      	adds	r3, #1
   b5716:	603b      	str	r3, [r7, #0]
   b5718:	f7fe ffca 	bl	b46b0 <_Z12pitidoBlink0v>
              showBitmap(1,1,""); //D4
   b571c:	4938      	ldr	r1, [pc, #224]	; (b5800 <loop+0x2f4>)
   b571e:	a8c4      	add	r0, sp, #784	; 0x310
   b5720:	f003 f9ef 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5724:	2101      	movs	r1, #1
   b5726:	aac4      	add	r2, sp, #784	; 0x310
   b5728:	4608      	mov	r0, r1
   b572a:	e77a      	b.n	b5622 <loop+0x116>
            showBitmap(1,0,""); //D2
   b572c:	f003 f9e9 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5730:	aac4      	add	r2, sp, #784	; 0x310
   b5732:	4629      	mov	r1, r5
   b5734:	e7c9      	b.n	b56ca <loop+0x1be>
            ledApagar();
   b5736:	f7fe feff 	bl	b4538 <_Z9ledApagarv>
   b573a:	e73d      	b.n	b55b8 <loop+0xac>
        if ( tagInfo[0] != -1 ) {
   b573c:	3501      	adds	r5, #1
   b573e:	f43f af3b 	beq.w	b55b8 <loop+0xac>
          showBitmap(2,0,"");
   b5742:	492f      	ldr	r1, [pc, #188]	; (b5800 <loop+0x2f4>)
   b5744:	a8c4      	add	r0, sp, #784	; 0x310
   b5746:	f003 f9dc 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b574a:	4631      	mov	r1, r6
   b574c:	aac4      	add	r2, sp, #784	; 0x310
   b574e:	2002      	movs	r0, #2
   b5750:	f7ff f8ea 	bl	b4928 <_Z10showBitmapii6String>
   b5754:	a8c4      	add	r0, sp, #784	; 0x310
   b5756:	f003 f989 	bl	b8a6c <_ZN6StringD1Ev>
          Serial.println("Tarjeta inválida para este modo");
   b575a:	f003 fca1 	bl	b90a0 <_Z16_fetch_usbserialv>
   b575e:	492d      	ldr	r1, [pc, #180]	; (b5814 <loop+0x308>)
   b5760:	e77c      	b.n	b565c <loop+0x150>
  } else if ( MODE == 1 ) {
   b5762:	2e01      	cmp	r6, #1
   b5764:	f040 8318 	bne.w	b5d98 <loop+0x88c>
    switch (tagInfo[0])
   b5768:	2d01      	cmp	r5, #1
   b576a:	f000 8088 	beq.w	b587e <loop+0x372>
   b576e:	2d06      	cmp	r5, #6
   b5770:	f040 82d4 	bne.w	b5d1c <loop+0x810>
        switch (tagInfo[1])
   b5774:	6865      	ldr	r5, [r4, #4]
   b5776:	2d01      	cmp	r5, #1
   b5778:	d058      	beq.n	b582c <loop+0x320>
   b577a:	2d02      	cmp	r5, #2
   b577c:	d065      	beq.n	b584a <loop+0x33e>
   b577e:	b92d      	cbnz	r5, b578c <loop+0x280>
            cambioModo(tagInfo[2]);
   b5780:	68a0      	ldr	r0, [r4, #8]
   b5782:	f7ff fca7 	bl	b50d4 <_Z10cambioModoi>
            resetFunc();
   b5786:	4b18      	ldr	r3, [pc, #96]	; (b57e8 <loop+0x2dc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	4798      	blx	r3
    tagInfo[0] = -1;
   b578c:	f04f 33ff 	mov.w	r3, #4294967295
   b5790:	6023      	str	r3, [r4, #0]
    display.display();
   b5792:	4813      	ldr	r0, [pc, #76]	; (b57e0 <loop+0x2d4>)
   b5794:	f002 fc22 	bl	b7fdc <_ZN16Adafruit_SSD13067displayEv>
    if (play) {
   b5798:	f898 3000 	ldrb.w	r3, [r8]
   b579c:	b14b      	cbz	r3, b57b2 <loop+0x2a6>
      if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b579e:	4d1e      	ldr	r5, [pc, #120]	; (b5818 <loop+0x30c>)
   b57a0:	682b      	ldr	r3, [r5, #0]
   b57a2:	2b00      	cmp	r3, #0
   b57a4:	f040 82c9 	bne.w	b5d3a <loop+0x82e>
   b57a8:	4b1c      	ldr	r3, [pc, #112]	; (b581c <loop+0x310>)
   b57aa:	781b      	ldrb	r3, [r3, #0]
   b57ac:	2b00      	cmp	r3, #0
   b57ae:	f040 82c7 	bne.w	b5d40 <loop+0x834>
}
   b57b2:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
   b57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b57ba:	bf00      	nop
   b57bc:	2003de54 	.word	0x2003de54
   b57c0:	2003d476 	.word	0x2003d476
   b57c4:	000ba103 	.word	0x000ba103
   b57c8:	2003d3e0 	.word	0x2003d3e0
   b57cc:	2003de44 	.word	0x2003de44
   b57d0:	2003d485 	.word	0x2003d485
   b57d4:	2003daa8 	.word	0x2003daa8
   b57d8:	2003e1a8 	.word	0x2003e1a8
   b57dc:	2003d3d4 	.word	0x2003d3d4
   b57e0:	2003daac 	.word	0x2003daac
   b57e4:	2003e184 	.word	0x2003e184
   b57e8:	2003e1a4 	.word	0x2003e1a4
   b57ec:	2003d488 	.word	0x2003d488
   b57f0:	2003e6b8 	.word	0x2003e6b8
   b57f4:	2003de3c 	.word	0x2003de3c
   b57f8:	000ba116 	.word	0x000ba116
   b57fc:	000ba124 	.word	0x000ba124
   b5800:	000ba0f5 	.word	0x000ba0f5
   b5804:	000ba13f 	.word	0x000ba13f
   b5808:	2003e6b4 	.word	0x2003e6b4
   b580c:	000ba163 	.word	0x000ba163
   b5810:	000ba174 	.word	0x000ba174
   b5814:	000ba187 	.word	0x000ba187
   b5818:	2003d3d8 	.word	0x2003d3d8
   b581c:	2003d484 	.word	0x2003d484
   b5820:	2003e190 	.word	0x2003e190
   b5824:	2003de40 	.word	0x2003de40
   b5828:	2003e18c 	.word	0x2003e18c
            showBitmap(3,0,"Ejecutando...");
   b582c:	499d      	ldr	r1, [pc, #628]	; (b5aa4 <loop+0x598>)
            play = true;
   b582e:	f888 5000 	strb.w	r5, [r8]
              showBitmap(3,0,"Borrado completo realizado");
   b5832:	a8c4      	add	r0, sp, #784	; 0x310
   b5834:	f003 f965 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5838:	aac4      	add	r2, sp, #784	; 0x310
   b583a:	2100      	movs	r1, #0
   b583c:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b583e:	f7ff f873 	bl	b4928 <_Z10showBitmapii6String>
   b5842:	a8c4      	add	r0, sp, #784	; 0x310
   b5844:	f003 f912 	bl	b8a6c <_ZN6StringD1Ev>
   b5848:	e7a0      	b.n	b578c <loop+0x280>
            if ( tagInfo[2] == 1 ) {
   b584a:	68a3      	ldr	r3, [r4, #8]
   b584c:	2b01      	cmp	r3, #1
   b584e:	d103      	bne.n	b5858 <loop+0x34c>
   switch (modo)
   b5850:	f7fe fc38 	bl	b40c4 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b5854:	4994      	ldr	r1, [pc, #592]	; (b5aa8 <loop+0x59c>)
   b5856:	e7ec      	b.n	b5832 <loop+0x326>
            } else if (tagInfo[2] == 2) {
   b5858:	2b02      	cmp	r3, #2
   b585a:	d103      	bne.n	b5864 <loop+0x358>
              borradoBLOQUE(1);
   b585c:	4630      	mov	r0, r6
   b585e:	f7ff f95f 	bl	b4b20 <_Z13borradoBLOQUEi>
   b5862:	e793      	b.n	b578c <loop+0x280>
              Serial.println("Borrado no permitido para este modo");
   b5864:	f003 fc1c 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5868:	4990      	ldr	r1, [pc, #576]	; (b5aac <loop+0x5a0>)
   b586a:	f003 fa18 	bl	b8c9e <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b586e:	4990      	ldr	r1, [pc, #576]	; (b5ab0 <loop+0x5a4>)
   b5870:	a8c4      	add	r0, sp, #784	; 0x310
   b5872:	f003 f946 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5876:	aac4      	add	r2, sp, #784	; 0x310
   b5878:	4631      	mov	r1, r6
          showBitmap(2,0,"");
   b587a:	2002      	movs	r0, #2
   b587c:	e7df      	b.n	b583e <loop+0x332>
        int deviceID = tagInfo[3];
   b587e:	68e7      	ldr	r7, [r4, #12]
        Serial.print("Ejecutando tag --> ");
   b5880:	4d8c      	ldr	r5, [pc, #560]	; (b5ab4 <loop+0x5a8>)
   b5882:	4e8d      	ldr	r6, [pc, #564]	; (b5ab8 <loop+0x5ac>)
   b5884:	f8df 924c 	ldr.w	r9, [pc, #588]	; b5ad4 <loop+0x5c8>
   b5888:	f8df b24c 	ldr.w	fp, [pc, #588]	; b5ad8 <loop+0x5cc>
   b588c:	f8df a23c 	ldr.w	sl, [pc, #572]	; b5acc <loop+0x5c0>
   b5890:	f003 fc06 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5894:	4989      	ldr	r1, [pc, #548]	; (b5abc <loop+0x5b0>)
   b5896:	f003 f9ef 	bl	b8c78 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b589a:	6863      	ldr	r3, [r4, #4]
   b589c:	2b05      	cmp	r3, #5
   b589e:	d83f      	bhi.n	b5920 <loop+0x414>
   b58a0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b58a4:	008e0006 	.word	0x008e0006
   b58a8:	01d601a2 	.word	0x01d601a2
   b58ac:	0225020b 	.word	0x0225020b
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b58b0:	f8df 9248 	ldr.w	r9, [pc, #584]	; b5afc <loop+0x5f0>
            Serial.println("Sensor detectado");
   b58b4:	f003 fbf4 	bl	b90a0 <_Z16_fetch_usbserialv>
   b58b8:	4981      	ldr	r1, [pc, #516]	; (b5ac0 <loop+0x5b4>)
   b58ba:	f003 f9f0 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b58be:	f899 3000 	ldrb.w	r3, [r9]
   b58c2:	2b00      	cmp	r3, #0
   b58c4:	d054      	beq.n	b5970 <loop+0x464>
   b58c6:	6832      	ldr	r2, [r6, #0]
   b58c8:	f8db 3000 	ldr.w	r3, [fp]
   b58cc:	429a      	cmp	r2, r3
   b58ce:	d158      	bne.n	b5982 <loop+0x476>
   b58d0:	4638      	mov	r0, r7
   b58d2:	f7ff fad7 	bl	b4e84 <_Z13isValidSensori>
   b58d6:	2800      	cmp	r0, #0
   b58d8:	d047      	beq.n	b596a <loop+0x45e>
              int puerto = isNewSensor(deviceID);
   b58da:	4638      	mov	r0, r7
   b58dc:	f7ff faf4 	bl	b4ec8 <_Z11isNewSensori>
              if (puerto == -1)
   b58e0:	1c43      	adds	r3, r0, #1
   b58e2:	d105      	bne.n	b58f0 <loop+0x3e4>
                puerto = asignarPuerto(tagInfo[2]);
   b58e4:	68a0      	ldr	r0, [r4, #8]
   b58e6:	f7ff fcd9 	bl	b529c <_Z13asignarPuertoi>
              if (puerto != -1) {
   b58ea:	1c41      	adds	r1, r0, #1
   b58ec:	f000 8156 	beq.w	b5b9c <loop+0x690>
                newSensor.bloque = numBloque;
   b58f0:	f8da c000 	ldr.w	ip, [sl]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b58f4:	6831      	ldr	r1, [r6, #0]
   b58f6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b58fa:	fb02 f20c 	mul.w	r2, r2, ip
   b58fe:	eb02 1301 	add.w	r3, r2, r1, lsl #4
   b5902:	442b      	add	r3, r5
                numSensoresBloque++;
   b5904:	3101      	adds	r1, #1
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5906:	605f      	str	r7, [r3, #4]
   b5908:	6927      	ldr	r7, [r4, #16]
   b590a:	6118      	str	r0, [r3, #16]
   b590c:	e9c3 7c02 	strd	r7, ip, [r3, #8]
                bloques[numBloque].numSensores++;
   b5910:	58ab      	ldr	r3, [r5, r2]
                numSensoresBloque++;
   b5912:	6031      	str	r1, [r6, #0]
                bloques[numBloque].numSensores++;
   b5914:	3301      	adds	r3, #1
                showPort(tagInfo[2], puerto);
   b5916:	4601      	mov	r1, r0
                bloques[numBloque].numSensores++;
   b5918:	50ab      	str	r3, [r5, r2]
                showPort(tagInfo[2], puerto);
   b591a:	68a0      	ldr	r0, [r4, #8]
   b591c:	f7ff f896 	bl	b4a4c <_Z8showPortii>
        Serial.println("Fin Tag");
   b5920:	f003 fbbe 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5924:	4967      	ldr	r1, [pc, #412]	; (b5ac4 <loop+0x5b8>)
   b5926:	f003 f9ba 	bl	b8c9e <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b592a:	f003 fbb9 	bl	b90a0 <_Z16_fetch_usbserialv>
   b592e:	4966      	ldr	r1, [pc, #408]	; (b5ac8 <loop+0x5bc>)
   b5930:	f003 f9b5 	bl	b8c9e <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b5934:	f003 fbb4 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5938:	4b64      	ldr	r3, [pc, #400]	; (b5acc <loop+0x5c0>)
   b593a:	4965      	ldr	r1, [pc, #404]	; (b5ad0 <loop+0x5c4>)
   b593c:	681a      	ldr	r2, [r3, #0]
   b593e:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5942:	fb03 5502 	mla	r5, r3, r2, r5
   b5946:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b594a:	9302      	str	r3, [sp, #8]
   b594c:	4b61      	ldr	r3, [pc, #388]	; (b5ad4 <loop+0x5c8>)
   b594e:	681b      	ldr	r3, [r3, #0]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	4b61      	ldr	r3, [pc, #388]	; (b5ad8 <loop+0x5cc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	9300      	str	r3, [sp, #0]
   b5958:	4b57      	ldr	r3, [pc, #348]	; (b5ab8 <loop+0x5ac>)
   b595a:	681b      	ldr	r3, [r3, #0]
   b595c:	f7fe fbde 	bl	b411c <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b5960:	f003 fb9e 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5964:	f003 f98f 	bl	b8c86 <_ZN5Print7printlnEv>
        break;
   b5968:	e710      	b.n	b578c <loop+0x280>
              if ((!IF_pasado)) {
   b596a:	f899 3000 	ldrb.w	r3, [r9]
   b596e:	b91b      	cbnz	r3, b5978 <loop+0x46c>
                Serial.println("Se esperaba IF tag");
   b5970:	f003 fb96 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5974:	4959      	ldr	r1, [pc, #356]	; (b5adc <loop+0x5d0>)
   b5976:	e007      	b.n	b5988 <loop+0x47c>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b5978:	6832      	ldr	r2, [r6, #0]
   b597a:	f8db 3000 	ldr.w	r3, [fp]
   b597e:	429a      	cmp	r2, r3
   b5980:	d00c      	beq.n	b599c <loop+0x490>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b5982:	f003 fb8d 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5986:	4956      	ldr	r1, [pc, #344]	; (b5ae0 <loop+0x5d4>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5988:	f003 f989 	bl	b8c9e <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b598c:	4948      	ldr	r1, [pc, #288]	; (b5ab0 <loop+0x5a4>)
   b598e:	a8c4      	add	r0, sp, #784	; 0x310
   b5990:	f003 f8b7 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5994:	2102      	movs	r1, #2
   b5996:	aac4      	add	r2, sp, #784	; 0x310
   b5998:	4608      	mov	r0, r1
   b599a:	e00b      	b.n	b59b4 <loop+0x4a8>
                Serial.println("Sensor invalido");
   b599c:	f003 fb80 	bl	b90a0 <_Z16_fetch_usbserialv>
   b59a0:	4950      	ldr	r1, [pc, #320]	; (b5ae4 <loop+0x5d8>)
   b59a2:	f003 f97c 	bl	b8c9e <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b59a6:	4942      	ldr	r1, [pc, #264]	; (b5ab0 <loop+0x5a4>)
   b59a8:	a8c4      	add	r0, sp, #784	; 0x310
   b59aa:	f003 f8aa 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b59ae:	aac4      	add	r2, sp, #784	; 0x310
   b59b0:	2105      	movs	r1, #5
                showBitmap(2,3,"");
   b59b2:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b59b4:	f7fe ffb8 	bl	b4928 <_Z10showBitmapii6String>
   b59b8:	a8c4      	add	r0, sp, #784	; 0x310
   b59ba:	f003 f857 	bl	b8a6c <_ZN6StringD1Ev>
   b59be:	e7af      	b.n	b5920 <loop+0x414>
            Serial.println("Actuador detectado");
   b59c0:	f003 fb6e 	bl	b90a0 <_Z16_fetch_usbserialv>
   b59c4:	4948      	ldr	r1, [pc, #288]	; (b5ae8 <loop+0x5dc>)
   b59c6:	f003 f96a 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b59ca:	4b48      	ldr	r3, [pc, #288]	; (b5aec <loop+0x5e0>)
            int deviceState = tagInfo[4];
   b59cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b59d0:	781e      	ldrb	r6, [r3, #0]
   b59d2:	2e00      	cmp	r6, #0
   b59d4:	d05a      	beq.n	b5a8c <loop+0x580>
   b59d6:	4b46      	ldr	r3, [pc, #280]	; (b5af0 <loop+0x5e4>)
   b59d8:	781b      	ldrb	r3, [r3, #0]
   b59da:	4639      	mov	r1, r7
   b59dc:	4658      	mov	r0, fp
   b59de:	2b00      	cmp	r3, #0
   b59e0:	d150      	bne.n	b5a84 <loop+0x578>
   b59e2:	f7ff fa99 	bl	b4f18 <_Z15isValidActuadorii>
   b59e6:	2800      	cmp	r0, #0
   b59e8:	d050      	beq.n	b5a8c <loop+0x580>
   b59ea:	f8d9 3000 	ldr.w	r3, [r9]
   b59ee:	2b00      	cmp	r3, #0
   b59f0:	d14c      	bne.n	b5a8c <loop+0x580>
              int puerto = isNewActuador(deviceID);
   b59f2:	4638      	mov	r0, r7
   b59f4:	f7ff faca 	bl	b4f8c <_Z13isNewActuadori>
              if (puerto == -1)
   b59f8:	1c42      	adds	r2, r0, #1
              int puerto = isNewActuador(deviceID);
   b59fa:	4606      	mov	r6, r0
              if (puerto == -1)
   b59fc:	d106      	bne.n	b5a0c <loop+0x500>
                puerto = asignarPuerto(tagInfo[2]);
   b59fe:	68a0      	ldr	r0, [r4, #8]
   b5a00:	f7ff fc4c 	bl	b529c <_Z13asignarPuertoi>
              if (puerto != -1) {
   b5a04:	1c43      	adds	r3, r0, #1
                puerto = asignarPuerto(tagInfo[2]);
   b5a06:	4606      	mov	r6, r0
              if (puerto != -1) {
   b5a08:	f000 80c8 	beq.w	b5b9c <loop+0x690>
                newActuador.bloque = numBloque;
   b5a0c:	f8da 0000 	ldr.w	r0, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5a10:	f8d9 2000 	ldr.w	r2, [r9]
   b5a14:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5a18:	fb03 f100 	mul.w	r1, r3, r0
   b5a1c:	2314      	movs	r3, #20
   b5a1e:	fb03 1302 	mla	r3, r3, r2, r1
   b5a22:	442b      	add	r3, r5
   b5a24:	f04f 0a01 	mov.w	sl, #1
   b5a28:	e9c3 0654 	strd	r0, r6, [r3, #336]	; 0x150
   b5a2c:	e9c3 7b52 	strd	r7, fp, [r3, #328]	; 0x148
   b5a30:	f883 a158 	strb.w	sl, [r3, #344]	; 0x158
                bloques[numBloque].numActuadores++;
   b5a34:	186b      	adds	r3, r5, r1
                numActuadoresBloque++;
   b5a36:	4452      	add	r2, sl
   b5a38:	f8c9 2000 	str.w	r2, [r9]
                bloques[numBloque].numActuadores++;
   b5a3c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                showPort(tagInfo[2], puerto);
   b5a40:	68a0      	ldr	r0, [r4, #8]
                bloques[numBloque].numActuadores++;
   b5a42:	4452      	add	r2, sl
   b5a44:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                showPort(tagInfo[2], puerto);
   b5a48:	4631      	mov	r1, r6
   b5a4a:	f7fe ffff 	bl	b4a4c <_Z8showPortii>
                if (deviceID == 0)
   b5a4e:	2f00      	cmp	r7, #0
   b5a50:	f47f af66 	bne.w	b5920 <loop+0x414>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5a54:	b2f1      	uxtb	r1, r6
   b5a56:	eb01 020a 	add.w	r2, r1, sl
   b5a5a:	aec4      	add	r6, sp, #784	; 0x310
   b5a5c:	2305      	movs	r3, #5
   b5a5e:	b2d2      	uxtb	r2, r2
   b5a60:	4630      	mov	r0, r6
   b5a62:	f002 fb55 	bl	b8110 <_ZN12ChainableLEDC1Ehhh>
   b5a66:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5a6a:	4f22      	ldr	r7, [pc, #136]	; (b5af4 <loop+0x5e8>)
   b5a6c:	e887 0003 	stmia.w	r7, {r0, r1}
   b5a70:	4630      	mov	r0, r6
   b5a72:	f002 fb5a 	bl	b812a <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5a76:	4638      	mov	r0, r7
   b5a78:	f002 fbfc 	bl	b8274 <_ZN12ChainableLED4initEv>
                  init = true;
   b5a7c:	4b1e      	ldr	r3, [pc, #120]	; (b5af8 <loop+0x5ec>)
   b5a7e:	f883 a000 	strb.w	sl, [r3]
   b5a82:	e74d      	b.n	b5920 <loop+0x414>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5a84:	f7ff fa48 	bl	b4f18 <_Z15isValidActuadorii>
   b5a88:	2800      	cmp	r0, #0
   b5a8a:	d13b      	bne.n	b5b04 <loop+0x5f8>
              if (!IF_pasado) {
   b5a8c:	4b1b      	ldr	r3, [pc, #108]	; (b5afc <loop+0x5f0>)
   b5a8e:	781b      	ldrb	r3, [r3, #0]
   b5a90:	2b00      	cmp	r3, #0
   b5a92:	f43f af6d 	beq.w	b5970 <loop+0x464>
              } else if (!THEN_pasado) {
   b5a96:	2e00      	cmp	r6, #0
   b5a98:	f040 808c 	bne.w	b5bb4 <loop+0x6a8>
                Serial.println("Se esperaba THEN tag");
   b5a9c:	f003 fb00 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5aa0:	4917      	ldr	r1, [pc, #92]	; (b5b00 <loop+0x5f4>)
   b5aa2:	e771      	b.n	b5988 <loop+0x47c>
   b5aa4:	000ba116 	.word	0x000ba116
   b5aa8:	000ba124 	.word	0x000ba124
   b5aac:	000ba13f 	.word	0x000ba13f
   b5ab0:	000ba0f5 	.word	0x000ba0f5
   b5ab4:	2003d488 	.word	0x2003d488
   b5ab8:	2003e18c 	.word	0x2003e18c
   b5abc:	000ba1a8 	.word	0x000ba1a8
   b5ac0:	000ba163 	.word	0x000ba163
   b5ac4:	000ba370 	.word	0x000ba370
   b5ac8:	000ba378 	.word	0x000ba378
   b5acc:	2003d3d8 	.word	0x2003d3d8
   b5ad0:	000ba3ad 	.word	0x000ba3ad
   b5ad4:	2003e184 	.word	0x2003e184
   b5ad8:	2003e188 	.word	0x2003e188
   b5adc:	000ba1bc 	.word	0x000ba1bc
   b5ae0:	000ba1cf 	.word	0x000ba1cf
   b5ae4:	000ba204 	.word	0x000ba204
   b5ae8:	000ba174 	.word	0x000ba174
   b5aec:	2003d484 	.word	0x2003d484
   b5af0:	2003d474 	.word	0x2003d474
   b5af4:	2003de4c 	.word	0x2003de4c
   b5af8:	2003de44 	.word	0x2003de44
   b5afc:	2003d475 	.word	0x2003d475
   b5b00:	000ba214 	.word	0x000ba214
              int puerto = isNewActuador(deviceID);
   b5b04:	4638      	mov	r0, r7
   b5b06:	f7ff fa41 	bl	b4f8c <_Z13isNewActuadori>
   b5b0a:	4606      	mov	r6, r0
              if (puerto == -1)
   b5b0c:	1c70      	adds	r0, r6, #1
   b5b0e:	d105      	bne.n	b5b1c <loop+0x610>
                puerto = asignarPuerto(tagInfo[2]);
   b5b10:	68a0      	ldr	r0, [r4, #8]
   b5b12:	f7ff fbc3 	bl	b529c <_Z13asignarPuertoi>
              if (puerto != -1) {
   b5b16:	1c41      	adds	r1, r0, #1
                puerto = asignarPuerto(tagInfo[2]);
   b5b18:	4606      	mov	r6, r0
              if (puerto != -1) {
   b5b1a:	d03f      	beq.n	b5b9c <loop+0x690>
                newActuador.bloque = numBloque;
   b5b1c:	f8da 2000 	ldr.w	r2, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5b20:	f8d9 c000 	ldr.w	ip, [r9]
   b5b24:	6920      	ldr	r0, [r4, #16]
   b5b26:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5b2a:	fb03 f102 	mul.w	r1, r3, r2
   b5b2e:	2314      	movs	r3, #20
   b5b30:	fb03 130c 	mla	r3, r3, ip, r1
   b5b34:	442b      	add	r3, r5
   b5b36:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
   b5b3a:	e9c3 0253 	strd	r0, r2, [r3, #332]	; 0x14c
   b5b3e:	f8c3 7148 	str.w	r7, [r3, #328]	; 0x148
   b5b42:	f8c3 6154 	str.w	r6, [r3, #340]	; 0x154
   b5b46:	2300      	movs	r3, #0
   b5b48:	f88e 3010 	strb.w	r3, [lr, #16]
                bloques[numBloque].numActuadores++;
   b5b4c:	186b      	adds	r3, r5, r1
                numActuadoresBloque++;
   b5b4e:	f10c 0001 	add.w	r0, ip, #1
                bloques[numBloque].numActuadores++;
   b5b52:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b5b56:	f8c9 0000 	str.w	r0, [r9]
                bloques[numBloque].numActuadores++;
   b5b5a:	3201      	adds	r2, #1
                showPort(tagInfo[2], puerto);
   b5b5c:	68a0      	ldr	r0, [r4, #8]
                bloques[numBloque].numActuadores++;
   b5b5e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                showPort(tagInfo[2], puerto);
   b5b62:	4631      	mov	r1, r6
   b5b64:	f7fe ff72 	bl	b4a4c <_Z8showPortii>
                if (deviceID == 0)
   b5b68:	2f00      	cmp	r7, #0
   b5b6a:	f47f aed9 	bne.w	b5920 <loop+0x414>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5b6e:	b2f1      	uxtb	r1, r6
   b5b70:	1c4a      	adds	r2, r1, #1
   b5b72:	aec4      	add	r6, sp, #784	; 0x310
   b5b74:	2305      	movs	r3, #5
   b5b76:	b2d2      	uxtb	r2, r2
   b5b78:	4630      	mov	r0, r6
   b5b7a:	f002 fac9 	bl	b8110 <_ZN12ChainableLEDC1Ehhh>
   b5b7e:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5b82:	4fa4      	ldr	r7, [pc, #656]	; (b5e14 <loop+0x908>)
   b5b84:	e887 0003 	stmia.w	r7, {r0, r1}
   b5b88:	4630      	mov	r0, r6
   b5b8a:	f002 face 	bl	b812a <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5b8e:	4638      	mov	r0, r7
   b5b90:	f002 fb70 	bl	b8274 <_ZN12ChainableLED4initEv>
                  init = true;
   b5b94:	4ba0      	ldr	r3, [pc, #640]	; (b5e18 <loop+0x90c>)
   b5b96:	2201      	movs	r2, #1
   b5b98:	701a      	strb	r2, [r3, #0]
   b5b9a:	e6c1      	b.n	b5920 <loop+0x414>
                Serial.println("Puerto no disponible");
   b5b9c:	f003 fa80 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5ba0:	499e      	ldr	r1, [pc, #632]	; (b5e1c <loop+0x910>)
   b5ba2:	f003 f87c 	bl	b8c9e <_ZN5Print7printlnEPKc>
                showBitmap(2,3,"");
   b5ba6:	499e      	ldr	r1, [pc, #632]	; (b5e20 <loop+0x914>)
   b5ba8:	a8c4      	add	r0, sp, #784	; 0x310
   b5baa:	f002 ffaa 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5bae:	aac4      	add	r2, sp, #784	; 0x310
   b5bb0:	2103      	movs	r1, #3
   b5bb2:	e6fe      	b.n	b59b2 <loop+0x4a6>
                if (!isValidActuador(deviceState, deviceID)) {
   b5bb4:	4639      	mov	r1, r7
   b5bb6:	4658      	mov	r0, fp
   b5bb8:	f7ff f9ae 	bl	b4f18 <_Z15isValidActuadorii>
   b5bbc:	b958      	cbnz	r0, b5bd6 <loop+0x6ca>
                  Serial.println("Invalid Actuador");
   b5bbe:	f003 fa6f 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5bc2:	4998      	ldr	r1, [pc, #608]	; (b5e24 <loop+0x918>)
   b5bc4:	f003 f86b 	bl	b8c9e <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b5bc8:	4995      	ldr	r1, [pc, #596]	; (b5e20 <loop+0x914>)
   b5bca:	a8c4      	add	r0, sp, #784	; 0x310
   b5bcc:	f002 ff99 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5bd0:	aac4      	add	r2, sp, #784	; 0x310
   b5bd2:	2106      	movs	r1, #6
   b5bd4:	e6ed      	b.n	b59b2 <loop+0x4a6>
                } else if(!ELSE_pasado) {
   b5bd6:	4b94      	ldr	r3, [pc, #592]	; (b5e28 <loop+0x91c>)
   b5bd8:	781b      	ldrb	r3, [r3, #0]
   b5bda:	2b00      	cmp	r3, #0
   b5bdc:	f47f aea0 	bne.w	b5920 <loop+0x414>
                  Serial.println("Se esperaba ELSE tag");
   b5be0:	f003 fa5e 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5be4:	4991      	ldr	r1, [pc, #580]	; (b5e2c <loop+0x920>)
   b5be6:	e6cf      	b.n	b5988 <loop+0x47c>
            Serial.println("IF detectado");
   b5be8:	f003 fa5a 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5bec:	4990      	ldr	r1, [pc, #576]	; (b5e30 <loop+0x924>)
   b5bee:	f003 f856 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5bf2:	f8da 3000 	ldr.w	r3, [sl]
   b5bf6:	1c5a      	adds	r2, r3, #1
   b5bf8:	d004      	beq.n	b5c04 <loop+0x6f8>
   b5bfa:	bb2b      	cbnz	r3, b5c48 <loop+0x73c>
   b5bfc:	f8d9 2000 	ldr.w	r2, [r9]
   b5c00:	2a00      	cmp	r2, #0
   b5c02:	dd21      	ble.n	b5c48 <loop+0x73c>
              IF_pasado = true;
   b5c04:	4a8b      	ldr	r2, [pc, #556]	; (b5e34 <loop+0x928>)
   b5c06:	2101      	movs	r1, #1
   b5c08:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b5c0a:	4a8b      	ldr	r2, [pc, #556]	; (b5e38 <loop+0x92c>)
              showBitmap(3,0,"IF");
   b5c0c:	498b      	ldr	r1, [pc, #556]	; (b5e3c <loop+0x930>)
              THEN_pasado = false;
   b5c0e:	2700      	movs	r7, #0
   b5c10:	7017      	strb	r7, [r2, #0]
              ELSE_pasado = false;
   b5c12:	4a85      	ldr	r2, [pc, #532]	; (b5e28 <loop+0x91c>)
              numCondicionalesBloque = 0;
   b5c14:	f8cb 7000 	str.w	r7, [fp]
              ELSE_pasado = false;
   b5c18:	7017      	strb	r7, [r2, #0]
              puertoAnalogico_bloque = 0;
   b5c1a:	4a89      	ldr	r2, [pc, #548]	; (b5e40 <loop+0x934>)
              numSensoresBloque = 0;
   b5c1c:	6037      	str	r7, [r6, #0]
              puertoAnalogico_bloque = 0;
   b5c1e:	6017      	str	r7, [r2, #0]
              puertoDigital_bloque = 0;
   b5c20:	4a88      	ldr	r2, [pc, #544]	; (b5e44 <loop+0x938>)
              numActuadoresBloque = 0;
   b5c22:	f8c9 7000 	str.w	r7, [r9]
              numBloque++;
   b5c26:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b5c28:	6017      	str	r7, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b5c2a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b5c2e:	f8ca 3000 	str.w	r3, [sl]
              bloques[numBloque] = nuevoBloque;
   b5c32:	4353      	muls	r3, r2
   b5c34:	18ea      	adds	r2, r5, r3
   b5c36:	50ef      	str	r7, [r5, r3]
   b5c38:	f8c2 7144 	str.w	r7, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b5c3c:	a8c4      	add	r0, sp, #784	; 0x310
   b5c3e:	f002 ff60 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5c42:	aac4      	add	r2, sp, #784	; 0x310
   b5c44:	2100      	movs	r1, #0
   b5c46:	e030      	b.n	b5caa <loop+0x79e>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5c48:	f003 fa2a 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5c4c:	497e      	ldr	r1, [pc, #504]	; (b5e48 <loop+0x93c>)
   b5c4e:	e69b      	b.n	b5988 <loop+0x47c>
            Serial.println("AND/OR detectado");
   b5c50:	f003 fa26 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5c54:	497d      	ldr	r1, [pc, #500]	; (b5e4c <loop+0x940>)
   b5c56:	f003 f822 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b5c5a:	4b76      	ldr	r3, [pc, #472]	; (b5e34 <loop+0x928>)
   b5c5c:	781b      	ldrb	r3, [r3, #0]
   b5c5e:	2b00      	cmp	r3, #0
   b5c60:	f43f ae86 	beq.w	b5970 <loop+0x464>
   b5c64:	f8db 3000 	ldr.w	r3, [fp]
   b5c68:	6832      	ldr	r2, [r6, #0]
   b5c6a:	4293      	cmp	r3, r2
   b5c6c:	da1f      	bge.n	b5cae <loop+0x7a2>
   b5c6e:	f8d9 6000 	ldr.w	r6, [r9]
   b5c72:	b9f6      	cbnz	r6, b5cb2 <loop+0x7a6>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5c74:	f8da 2000 	ldr.w	r2, [sl]
   b5c78:	68a7      	ldr	r7, [r4, #8]
   b5c7a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5c7e:	fb01 5202 	mla	r2, r1, r2, r5
   b5c82:	441a      	add	r2, r3
   b5c84:	2f00      	cmp	r7, #0
   b5c86:	bf14      	ite	ne
   b5c88:	2101      	movne	r1, #1
   b5c8a:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b5c8c:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5c90:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b5c94:	f8cb 3000 	str.w	r3, [fp]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b5c98:	d101      	bne.n	b5c9e <loop+0x792>
   b5c9a:	496d      	ldr	r1, [pc, #436]	; (b5e50 <loop+0x944>)
   b5c9c:	e7ce      	b.n	b5c3c <loop+0x730>
   b5c9e:	496d      	ldr	r1, [pc, #436]	; (b5e54 <loop+0x948>)
   b5ca0:	a8c4      	add	r0, sp, #784	; 0x310
   b5ca2:	f002 ff2e 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ca6:	aac4      	add	r2, sp, #784	; 0x310
   b5ca8:	4631      	mov	r1, r6
   b5caa:	2003      	movs	r0, #3
   b5cac:	e682      	b.n	b59b4 <loop+0x4a8>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b5cae:	f73f ae37 	bgt.w	b5920 <loop+0x414>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5cb2:	f003 f9f5 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5cb6:	4968      	ldr	r1, [pc, #416]	; (b5e58 <loop+0x94c>)
   b5cb8:	e666      	b.n	b5988 <loop+0x47c>
            Serial.println("THEN detectado");
   b5cba:	f003 f9f1 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5cbe:	4967      	ldr	r1, [pc, #412]	; (b5e5c <loop+0x950>)
   b5cc0:	f002 ffed 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b5cc4:	4b5b      	ldr	r3, [pc, #364]	; (b5e34 <loop+0x928>)
   b5cc6:	781b      	ldrb	r3, [r3, #0]
   b5cc8:	2b00      	cmp	r3, #0
   b5cca:	f43f ae51 	beq.w	b5970 <loop+0x464>
   b5cce:	6833      	ldr	r3, [r6, #0]
   b5cd0:	2b00      	cmp	r3, #0
   b5cd2:	dd08      	ble.n	b5ce6 <loop+0x7da>
   b5cd4:	f8db 2000 	ldr.w	r2, [fp]
   b5cd8:	4293      	cmp	r3, r2
   b5cda:	dd04      	ble.n	b5ce6 <loop+0x7da>
              THEN_pasado = true;
   b5cdc:	4b56      	ldr	r3, [pc, #344]	; (b5e38 <loop+0x92c>)
              showBitmap(3,0,"THEN");
   b5cde:	4960      	ldr	r1, [pc, #384]	; (b5e60 <loop+0x954>)
              THEN_pasado = true;
   b5ce0:	2201      	movs	r2, #1
   b5ce2:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b5ce4:	e7aa      	b.n	b5c3c <loop+0x730>
                Serial.println("Numero de sensores infucientes");
   b5ce6:	f003 f9db 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5cea:	495e      	ldr	r1, [pc, #376]	; (b5e64 <loop+0x958>)
   b5cec:	e64c      	b.n	b5988 <loop+0x47c>
            Serial.println("ELSE detectado");
   b5cee:	f003 f9d7 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5cf2:	495d      	ldr	r1, [pc, #372]	; (b5e68 <loop+0x95c>)
   b5cf4:	f002 ffd3 	bl	b8c9e <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b5cf8:	4b4e      	ldr	r3, [pc, #312]	; (b5e34 <loop+0x928>)
   b5cfa:	781b      	ldrb	r3, [r3, #0]
   b5cfc:	2b00      	cmp	r3, #0
   b5cfe:	f43f ae37 	beq.w	b5970 <loop+0x464>
   b5d02:	f8d9 3000 	ldr.w	r3, [r9]
   b5d06:	2b00      	cmp	r3, #0
   b5d08:	dd04      	ble.n	b5d14 <loop+0x808>
              ELSE_pasado = true;
   b5d0a:	4b47      	ldr	r3, [pc, #284]	; (b5e28 <loop+0x91c>)
              showBitmap(3,0,"ELSE");
   b5d0c:	4957      	ldr	r1, [pc, #348]	; (b5e6c <loop+0x960>)
              ELSE_pasado = true;
   b5d0e:	2201      	movs	r2, #1
   b5d10:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b5d12:	e793      	b.n	b5c3c <loop+0x730>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5d14:	f003 f9c4 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5d18:	4955      	ldr	r1, [pc, #340]	; (b5e70 <loop+0x964>)
   b5d1a:	e635      	b.n	b5988 <loop+0x47c>
        if ( tagInfo[0] != -1 ) {
   b5d1c:	3501      	adds	r5, #1
   b5d1e:	f43f ad35 	beq.w	b578c <loop+0x280>
          Serial.println("Tarjeta inválida para este modo");
   b5d22:	f003 f9bd 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5d26:	4953      	ldr	r1, [pc, #332]	; (b5e74 <loop+0x968>)
   b5d28:	f002 ffb9 	bl	b8c9e <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b5d2c:	493c      	ldr	r1, [pc, #240]	; (b5e20 <loop+0x914>)
   b5d2e:	a8c4      	add	r0, sp, #784	; 0x310
   b5d30:	f002 fee7 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5d34:	aac4      	add	r2, sp, #784	; 0x310
   b5d36:	2100      	movs	r1, #0
   b5d38:	e59f      	b.n	b587a <loop+0x36e>
      if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5d3a:	2b01      	cmp	r3, #1
   b5d3c:	f47f ad39 	bne.w	b57b2 <loop+0x2a6>
        bool evaluacion = makeEvaluate(bloques[0]);
   b5d40:	4c4d      	ldr	r4, [pc, #308]	; (b5e78 <loop+0x96c>)
   b5d42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5d46:	f104 0110 	add.w	r1, r4, #16
   b5d4a:	4668      	mov	r0, sp
   b5d4c:	f003 fe86 	bl	b9a5c <memcpy>
   b5d50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5d54:	f7ff f962 	bl	b501c <_Z12makeEvaluate6BLOQUE>
        ejecutarEvaluacion(evaluacion, 0);
   b5d58:	2100      	movs	r1, #0
   b5d5a:	f7ff f989 	bl	b5070 <_Z18ejecutarEvaluacionbi>
      if ( numBloque==1 && THEN_pasado ) {
   b5d5e:	682d      	ldr	r5, [r5, #0]
   b5d60:	2d01      	cmp	r5, #1
   b5d62:	f47f ad26 	bne.w	b57b2 <loop+0x2a6>
   b5d66:	4b34      	ldr	r3, [pc, #208]	; (b5e38 <loop+0x92c>)
   b5d68:	781b      	ldrb	r3, [r3, #0]
   b5d6a:	2b00      	cmp	r3, #0
   b5d6c:	f43f ad21 	beq.w	b57b2 <loop+0x2a6>
        bool evaluacion = makeEvaluate(bloques[1]);
   b5d70:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b5d74:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5d78:	4668      	mov	r0, sp
   b5d7a:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
   b5d7e:	f003 fe6d 	bl	b9a5c <memcpy>
   b5d82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5d86:	f7ff f949 	bl	b501c <_Z12makeEvaluate6BLOQUE>
        ejecutarEvaluacion(evaluacion, 1);
   b5d8a:	4629      	mov	r1, r5
}
   b5d8c:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
   b5d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ejecutarEvaluacion(evaluacion, 1);
   b5d94:	f7ff b96c 	b.w	b5070 <_Z18ejecutarEvaluacionbi>
    switch (tagInfo[0])
   b5d98:	2d02      	cmp	r5, #2
   b5d9a:	d077      	beq.n	b5e8c <loop+0x980>
   b5d9c:	2d06      	cmp	r5, #6
   b5d9e:	f040 8156 	bne.w	b604e <loop+0xb42>
      switch (tagInfo[1])
   b5da2:	6860      	ldr	r0, [r4, #4]
   b5da4:	2801      	cmp	r0, #1
   b5da6:	d016      	beq.n	b5dd6 <loop+0x8ca>
   b5da8:	2802      	cmp	r0, #2
   b5daa:	d023      	beq.n	b5df4 <loop+0x8e8>
   b5dac:	b928      	cbnz	r0, b5dba <loop+0x8ae>
          cambioModo(tagInfo[2]);
   b5dae:	68a0      	ldr	r0, [r4, #8]
   b5db0:	f7ff f990 	bl	b50d4 <_Z10cambioModoi>
          resetFunc();
   b5db4:	4b31      	ldr	r3, [pc, #196]	; (b5e7c <loop+0x970>)
   b5db6:	681b      	ldr	r3, [r3, #0]
   b5db8:	4798      	blx	r3
    tagInfo[0] = -1;
   b5dba:	f04f 33ff 	mov.w	r3, #4294967295
   b5dbe:	6023      	str	r3, [r4, #0]
    if (play) {
   b5dc0:	f898 3000 	ldrb.w	r3, [r8]
   b5dc4:	2b00      	cmp	r3, #0
   b5dc6:	f43f acf4 	beq.w	b57b2 <loop+0x2a6>
      reproducir();
   b5dca:	f7ff f80d 	bl	b4de8 <_Z10reproducirv>
      play = false;
   b5dce:	2300      	movs	r3, #0
   b5dd0:	f888 3000 	strb.w	r3, [r8]
}
   b5dd4:	e4ed      	b.n	b57b2 <loop+0x2a6>
          showBitmap(3,0,"Ejecutando...");   
   b5dd6:	492a      	ldr	r1, [pc, #168]	; (b5e80 <loop+0x974>)
          play = true;
   b5dd8:	f888 0000 	strb.w	r0, [r8]
            showBitmap(3,0,"Borrado completo realizado");
   b5ddc:	a8c4      	add	r0, sp, #784	; 0x310
   b5dde:	f002 fe90 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5de2:	aac4      	add	r2, sp, #784	; 0x310
   b5de4:	2100      	movs	r1, #0
   b5de6:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b5de8:	f7fe fd9e 	bl	b4928 <_Z10showBitmapii6String>
   b5dec:	a8c4      	add	r0, sp, #784	; 0x310
   b5dee:	f002 fe3d 	bl	b8a6c <_ZN6StringD1Ev>
   b5df2:	e7e2      	b.n	b5dba <loop+0x8ae>
          if ( tagInfo[2] == 0 ) {
   b5df4:	68a5      	ldr	r5, [r4, #8]
   b5df6:	b91d      	cbnz	r5, b5e00 <loop+0x8f4>
            borradoPOP();
   b5df8:	f7fe ff22 	bl	b4c40 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada última lectura");
   b5dfc:	4921      	ldr	r1, [pc, #132]	; (b5e84 <loop+0x978>)
   b5dfe:	e7ed      	b.n	b5ddc <loop+0x8d0>
          } else if ( tagInfo[2] == 1 ){
   b5e00:	2d01      	cmp	r5, #1
   b5e02:	d103      	bne.n	b5e0c <loop+0x900>
            borradoALL(2);
   b5e04:	f7fe fe68 	bl	b4ad8 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b5e08:	491f      	ldr	r1, [pc, #124]	; (b5e88 <loop+0x97c>)
   b5e0a:	e7e7      	b.n	b5ddc <loop+0x8d0>
            borradoBLOQUE(2);
   b5e0c:	f7fe fe88 	bl	b4b20 <_Z13borradoBLOQUEi>
   b5e10:	e7d3      	b.n	b5dba <loop+0x8ae>
   b5e12:	bf00      	nop
   b5e14:	2003de4c 	.word	0x2003de4c
   b5e18:	2003de44 	.word	0x2003de44
   b5e1c:	000b9e1b 	.word	0x000b9e1b
   b5e20:	000ba0f5 	.word	0x000ba0f5
   b5e24:	000ba229 	.word	0x000ba229
   b5e28:	2003d474 	.word	0x2003d474
   b5e2c:	000ba23a 	.word	0x000ba23a
   b5e30:	000ba24f 	.word	0x000ba24f
   b5e34:	2003d475 	.word	0x2003d475
   b5e38:	2003d484 	.word	0x2003d484
   b5e3c:	000ba25c 	.word	0x000ba25c
   b5e40:	2003e19c 	.word	0x2003e19c
   b5e44:	2003e1a0 	.word	0x2003e1a0
   b5e48:	000ba25f 	.word	0x000ba25f
   b5e4c:	000ba2b1 	.word	0x000ba2b1
   b5e50:	000ba201 	.word	0x000ba201
   b5e54:	000ba2c2 	.word	0x000ba2c2
   b5e58:	000ba2c6 	.word	0x000ba2c6
   b5e5c:	000ba2f8 	.word	0x000ba2f8
   b5e60:	000ba307 	.word	0x000ba307
   b5e64:	000ba30c 	.word	0x000ba30c
   b5e68:	000ba32b 	.word	0x000ba32b
   b5e6c:	000ba33a 	.word	0x000ba33a
   b5e70:	000ba33f 	.word	0x000ba33f
   b5e74:	000ba187 	.word	0x000ba187
   b5e78:	2003d488 	.word	0x2003d488
   b5e7c:	2003e1a4 	.word	0x2003e1a4
   b5e80:	000ba116 	.word	0x000ba116
   b5e84:	000ba3d0 	.word	0x000ba3d0
   b5e88:	000ba124 	.word	0x000ba124
      switch (tagInfo[1])
   b5e8c:	6866      	ldr	r6, [r4, #4]
   b5e8e:	2e01      	cmp	r6, #1
   b5e90:	d063      	beq.n	b5f5a <loop+0xa4e>
   b5e92:	2e02      	cmp	r6, #2
   b5e94:	f000 8093 	beq.w	b5fbe <loop+0xab2>
   b5e98:	2e00      	cmp	r6, #0
   b5e9a:	d18e      	bne.n	b5dba <loop+0x8ae>
        showBitmap(3,0,decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b5e9c:	68a1      	ldr	r1, [r4, #8]
   b5e9e:	a8b8      	add	r0, sp, #736	; 0x2e0
   b5ea0:	f7fe ff3e 	bl	b4d20 <_Z19decodificarNOTA_msgi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b5ea4:	a9b8      	add	r1, sp, #736	; 0x2e0
   b5ea6:	a8c0      	add	r0, sp, #768	; 0x300
   b5ea8:	f002 fe4e 	bl	b8b48 <_ZN6StringC1ERKS_>
   b5eac:	68e1      	ldr	r1, [r4, #12]
   b5eae:	a8bc      	add	r0, sp, #752	; 0x2f0
   b5eb0:	f7fe ff68 	bl	b4d84 <_Z19decodificarTIPO_msgi>
   b5eb4:	a9bc      	add	r1, sp, #752	; 0x2f0
   b5eb6:	a8c0      	add	r0, sp, #768	; 0x300
   b5eb8:	f002 fe8d 	bl	b8bd6 <_ZplRK15StringSumHelperRK6String>
   b5ebc:	4601      	mov	r1, r0
   b5ebe:	a8c4      	add	r0, sp, #784	; 0x310
   b5ec0:	f002 fe42 	bl	b8b48 <_ZN6StringC1ERKS_>
   b5ec4:	aac4      	add	r2, sp, #784	; 0x310
   b5ec6:	4631      	mov	r1, r6
   b5ec8:	2003      	movs	r0, #3
   b5eca:	f7fe fd2d 	bl	b4928 <_Z10showBitmapii6String>
   b5ece:	a8c4      	add	r0, sp, #784	; 0x310
   b5ed0:	f002 fdcc 	bl	b8a6c <_ZN6StringD1Ev>
   b5ed4:	a8bc      	add	r0, sp, #752	; 0x2f0
   b5ed6:	f002 fdc9 	bl	b8a6c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5eda:	a8c0      	add	r0, sp, #768	; 0x300
   b5edc:	f002 fdc6 	bl	b8a6c <_ZN6StringD1Ev>
   b5ee0:	a8b8      	add	r0, sp, #736	; 0x2e0
   b5ee2:	f002 fdc3 	bl	b8a6c <_ZN6StringD1Ev>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b5ee6:	f003 f8db 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5eea:	68a1      	ldr	r1, [r4, #8]
   b5eec:	4605      	mov	r5, r0
   b5eee:	a8bc      	add	r0, sp, #752	; 0x2f0
   b5ef0:	f7fe ff16 	bl	b4d20 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b5ef4:	a9bc      	add	r1, sp, #752	; 0x2f0
   b5ef6:	a8c4      	add	r0, sp, #784	; 0x310
   b5ef8:	f002 fe26 	bl	b8b48 <_ZN6StringC1ERKS_>
   b5efc:	68e1      	ldr	r1, [r4, #12]
   b5efe:	a8c0      	add	r0, sp, #768	; 0x300
   b5f00:	f7fe ff40 	bl	b4d84 <_Z19decodificarTIPO_msgi>
   b5f04:	a9c0      	add	r1, sp, #768	; 0x300
   b5f06:	a8c4      	add	r0, sp, #784	; 0x310
   b5f08:	f002 fe65 	bl	b8bd6 <_ZplRK15StringSumHelperRK6String>
   b5f0c:	6801      	ldr	r1, [r0, #0]
   b5f0e:	4628      	mov	r0, r5
   b5f10:	f7fe f904 	bl	b411c <_ZN5Print8printlnfEPKcz>
   b5f14:	a8c0      	add	r0, sp, #768	; 0x300
   b5f16:	f002 fda9 	bl	b8a6c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5f1a:	a8c4      	add	r0, sp, #784	; 0x310
   b5f1c:	f002 fda6 	bl	b8a6c <_ZN6StringD1Ev>
   b5f20:	a8bc      	add	r0, sp, #752	; 0x2f0
   b5f22:	f002 fda3 	bl	b8a6c <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b5f26:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b5f2a:	f7fe ff45 	bl	b4db8 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b5f2e:	4a4f      	ldr	r2, [pc, #316]	; (b606c <loop+0xb60>)
   b5f30:	494f      	ldr	r1, [pc, #316]	; (b6070 <loop+0xb64>)
   b5f32:	6813      	ldr	r3, [r2, #0]
   b5f34:	68a0      	ldr	r0, [r4, #8]
   b5f36:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b5f3a:	494e      	ldr	r1, [pc, #312]	; (b6074 <loop+0xb68>)
   b5f3c:	68e0      	ldr	r0, [r4, #12]
   b5f3e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        posicion++;
   b5f42:	3301      	adds	r3, #1
   b5f44:	6013      	str	r3, [r2, #0]
        if (bucle) {
   b5f46:	4b4c      	ldr	r3, [pc, #304]	; (b6078 <loop+0xb6c>)
   b5f48:	781b      	ldrb	r3, [r3, #0]
   b5f4a:	2b00      	cmp	r3, #0
   b5f4c:	f43f af35 	beq.w	b5dba <loop+0x8ae>
          tam_bucle++;
   b5f50:	4a4a      	ldr	r2, [pc, #296]	; (b607c <loop+0xb70>)
   b5f52:	6813      	ldr	r3, [r2, #0]
   b5f54:	3301      	adds	r3, #1
   b5f56:	6013      	str	r3, [r2, #0]
   b5f58:	e72f      	b.n	b5dba <loop+0x8ae>
        if (!bucle) {
   b5f5a:	f8df 911c 	ldr.w	r9, [pc, #284]	; b6078 <loop+0xb6c>
   b5f5e:	f899 7000 	ldrb.w	r7, [r9]
   b5f62:	b9ff      	cbnz	r7, b5fa4 <loop+0xa98>
          Serial.println("Loop");
   b5f64:	f003 f89c 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5f68:	4945      	ldr	r1, [pc, #276]	; (b6080 <loop+0xb74>)
   b5f6a:	f002 fe98 	bl	b8c9e <_ZN5Print7printlnEPKc>
          showBitmap(3,0,"Loop");
   b5f6e:	4944      	ldr	r1, [pc, #272]	; (b6080 <loop+0xb74>)
   b5f70:	a8c4      	add	r0, sp, #784	; 0x310
   b5f72:	f002 fdc6 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5f76:	aac4      	add	r2, sp, #784	; 0x310
   b5f78:	4639      	mov	r1, r7
   b5f7a:	2003      	movs	r0, #3
   b5f7c:	f7fe fcd4 	bl	b4928 <_Z10showBitmapii6String>
   b5f80:	a8c4      	add	r0, sp, #784	; 0x310
   b5f82:	f002 fd73 	bl	b8a6c <_ZN6StringD1Ev>
          notas[posicion] = -1;
   b5f86:	4a39      	ldr	r2, [pc, #228]	; (b606c <loop+0xb60>)
   b5f88:	4939      	ldr	r1, [pc, #228]	; (b6070 <loop+0xb64>)
   b5f8a:	6813      	ldr	r3, [r2, #0]
          bucle = true;
   b5f8c:	f889 6000 	strb.w	r6, [r9]
          notas[posicion] = -1;
   b5f90:	f04f 30ff 	mov.w	r0, #4294967295
   b5f94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
          duraciones[posicion] = 0;
   b5f98:	4936      	ldr	r1, [pc, #216]	; (b6074 <loop+0xb68>)
   b5f9a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
          posicion++;
   b5f9e:	3301      	adds	r3, #1
   b5fa0:	6013      	str	r3, [r2, #0]
          bucle = true;
   b5fa2:	e70a      	b.n	b5dba <loop+0x8ae>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b5fa4:	f003 f87c 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5fa8:	4936      	ldr	r1, [pc, #216]	; (b6084 <loop+0xb78>)
          Serial.println("Loop sin comenzar o sin contenido");
   b5faa:	f002 fe78 	bl	b8c9e <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b5fae:	4936      	ldr	r1, [pc, #216]	; (b6088 <loop+0xb7c>)
   b5fb0:	a8c4      	add	r0, sp, #784	; 0x310
   b5fb2:	f002 fda6 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b5fb6:	aac4      	add	r2, sp, #784	; 0x310
   b5fb8:	2102      	movs	r1, #2
        showBitmap(2,0,"");
   b5fba:	2002      	movs	r0, #2
   b5fbc:	e714      	b.n	b5de8 <loop+0x8dc>
        if (bucle && tam_bucle>0) {
   b5fbe:	4e2e      	ldr	r6, [pc, #184]	; (b6078 <loop+0xb6c>)
   b5fc0:	7833      	ldrb	r3, [r6, #0]
   b5fc2:	2b00      	cmp	r3, #0
   b5fc4:	d03f      	beq.n	b6046 <loop+0xb3a>
   b5fc6:	4d2d      	ldr	r5, [pc, #180]	; (b607c <loop+0xb70>)
   b5fc8:	682b      	ldr	r3, [r5, #0]
   b5fca:	2b00      	cmp	r3, #0
   b5fcc:	dd3b      	ble.n	b6046 <loop+0xb3a>
          Serial.println("END Loop");
   b5fce:	f003 f867 	bl	b90a0 <_Z16_fetch_usbserialv>
   b5fd2:	492e      	ldr	r1, [pc, #184]	; (b608c <loop+0xb80>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b5fd4:	4f27      	ldr	r7, [pc, #156]	; (b6074 <loop+0xb68>)
          Serial.println("END Loop");
   b5fd6:	f002 fe62 	bl	b8c9e <_ZN5Print7printlnEPKc>
          showBitmap(3,0,String(tagInfo[2]+2)+" iteraciones");
   b5fda:	68a1      	ldr	r1, [r4, #8]
   b5fdc:	220a      	movs	r2, #10
   b5fde:	3102      	adds	r1, #2
   b5fe0:	a8bc      	add	r0, sp, #752	; 0x2f0
   b5fe2:	f002 fdce 	bl	b8b82 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b5fe6:	a9bc      	add	r1, sp, #752	; 0x2f0
   b5fe8:	a8c0      	add	r0, sp, #768	; 0x300
   b5fea:	f002 fdad 	bl	b8b48 <_ZN6StringC1ERKS_>
   b5fee:	4928      	ldr	r1, [pc, #160]	; (b6090 <loop+0xb84>)
   b5ff0:	a8c0      	add	r0, sp, #768	; 0x300
   b5ff2:	f002 fdfc 	bl	b8bee <_ZplRK15StringSumHelperPKc>
   b5ff6:	4601      	mov	r1, r0
   b5ff8:	a8c4      	add	r0, sp, #784	; 0x310
   b5ffa:	f002 fda5 	bl	b8b48 <_ZN6StringC1ERKS_>
   b5ffe:	aac4      	add	r2, sp, #784	; 0x310
   b6000:	2100      	movs	r1, #0
   b6002:	2003      	movs	r0, #3
   b6004:	f7fe fc90 	bl	b4928 <_Z10showBitmapii6String>
   b6008:	a8c4      	add	r0, sp, #784	; 0x310
   b600a:	f002 fd2f 	bl	b8a6c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b600e:	a8c0      	add	r0, sp, #768	; 0x300
   b6010:	f002 fd2c 	bl	b8a6c <_ZN6StringD1Ev>
   b6014:	a8bc      	add	r0, sp, #752	; 0x2f0
   b6016:	f002 fd29 	bl	b8a6c <_ZN6StringD1Ev>
          notas[posicion] = -2;
   b601a:	4814      	ldr	r0, [pc, #80]	; (b606c <loop+0xb60>)
   b601c:	4a14      	ldr	r2, [pc, #80]	; (b6070 <loop+0xb64>)
   b601e:	6803      	ldr	r3, [r0, #0]
   b6020:	f06f 0101 	mvn.w	r1, #1
   b6024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b6028:	682a      	ldr	r2, [r5, #0]
   b602a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b602e:	68a1      	ldr	r1, [r4, #8]
   b6030:	3201      	adds	r2, #1
   b6032:	1a9a      	subs	r2, r3, r2
          posicion++;
   b6034:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b6036:	3102      	adds	r1, #2
          posicion++;
   b6038:	6003      	str	r3, [r0, #0]
          bucle = false;
   b603a:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b603c:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
          bucle = false;
   b6040:	7033      	strb	r3, [r6, #0]
          tam_bucle = 0;
   b6042:	602b      	str	r3, [r5, #0]
   b6044:	e6b9      	b.n	b5dba <loop+0x8ae>
          Serial.println("Loop sin comenzar o sin contenido");
   b6046:	f003 f82b 	bl	b90a0 <_Z16_fetch_usbserialv>
   b604a:	4912      	ldr	r1, [pc, #72]	; (b6094 <loop+0xb88>)
   b604c:	e7ad      	b.n	b5faa <loop+0xa9e>
      if ( tagInfo[0] != -1 ) {
   b604e:	3501      	adds	r5, #1
   b6050:	f43f aeb3 	beq.w	b5dba <loop+0x8ae>
        Serial.println("Tarjeta inválida para este modo");
   b6054:	f003 f824 	bl	b90a0 <_Z16_fetch_usbserialv>
   b6058:	490f      	ldr	r1, [pc, #60]	; (b6098 <loop+0xb8c>)
   b605a:	f002 fe20 	bl	b8c9e <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b605e:	490a      	ldr	r1, [pc, #40]	; (b6088 <loop+0xb7c>)
   b6060:	a8c4      	add	r0, sp, #784	; 0x310
   b6062:	f002 fd4e 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6066:	aac4      	add	r2, sp, #784	; 0x310
   b6068:	2100      	movs	r1, #0
   b606a:	e7a6      	b.n	b5fba <loop+0xaae>
   b606c:	2003e194 	.word	0x2003e194
   b6070:	2003de64 	.word	0x2003de64
   b6074:	2003db1c 	.word	0x2003db1c
   b6078:	2003da60 	.word	0x2003da60
   b607c:	2003e1b0 	.word	0x2003e1b0
   b6080:	000ba421 	.word	0x000ba421
   b6084:	000ba3e8 	.word	0x000ba3e8
   b6088:	000ba0f5 	.word	0x000ba0f5
   b608c:	000ba41d 	.word	0x000ba41d
   b6090:	000ba426 	.word	0x000ba426
   b6094:	000ba433 	.word	0x000ba433
   b6098:	000ba187 	.word	0x000ba187

000b609c <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b609c:	2305      	movs	r3, #5
}
   b609e:	b570      	push	{r4, r5, r6, lr}
   b60a0:	461a      	mov	r2, r3
   b60a2:	2104      	movs	r1, #4
   b60a4:	489f      	ldr	r0, [pc, #636]	; (b6324 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x288>)
                        "2#1#0","2#2#0","2#2#1"};
   b60a6:	4da0      	ldr	r5, [pc, #640]	; (b6328 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x28c>)
   b60a8:	4ea0      	ldr	r6, [pc, #640]	; (b632c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x290>)
   b60aa:	f002 f831 	bl	b8110 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b60ae:	4ba0      	ldr	r3, [pc, #640]	; (b6330 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x294>)
Adafruit_SSD1306 display(-1);
   b60b0:	48a0      	ldr	r0, [pc, #640]	; (b6334 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x298>)
   b60b2:	2400      	movs	r4, #0
   b60b4:	601c      	str	r4, [r3, #0]
   b60b6:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b60ba:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b60be:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b60c2:	f04f 31ff 	mov.w	r1, #4294967295
   b60c6:	f001 fc2d 	bl	b7924 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b60ca:	499b      	ldr	r1, [pc, #620]	; (b6338 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x29c>)
   b60cc:	489b      	ldr	r0, [pc, #620]	; (b633c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2a0>)
   b60ce:	f002 fd18 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b60d2:	4999      	ldr	r1, [pc, #612]	; (b6338 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x29c>)
   b60d4:	489a      	ldr	r0, [pc, #616]	; (b6340 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2a4>)
   b60d6:	f002 fd14 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1"};
   b60da:	499a      	ldr	r1, [pc, #616]	; (b6344 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2a8>)
   b60dc:	489a      	ldr	r0, [pc, #616]	; (b6348 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ac>)
   b60de:	f002 fd10 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b60e2:	499a      	ldr	r1, [pc, #616]	; (b634c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
   b60e4:	489a      	ldr	r0, [pc, #616]	; (b6350 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b60e6:	f002 fd0c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b60ea:	499a      	ldr	r1, [pc, #616]	; (b6354 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b60ec:	489a      	ldr	r0, [pc, #616]	; (b6358 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
   b60ee:	f002 fd08 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b60f2:	499a      	ldr	r1, [pc, #616]	; (b635c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b60f4:	489a      	ldr	r0, [pc, #616]	; (b6360 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b60f6:	f002 fd04 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b60fa:	499a      	ldr	r1, [pc, #616]	; (b6364 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b60fc:	489a      	ldr	r0, [pc, #616]	; (b6368 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b60fe:	f002 fd00 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6102:	499a      	ldr	r1, [pc, #616]	; (b636c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b6104:	489a      	ldr	r0, [pc, #616]	; (b6370 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b6106:	f002 fcfc 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b610a:	499a      	ldr	r1, [pc, #616]	; (b6374 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b610c:	489a      	ldr	r0, [pc, #616]	; (b6378 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b610e:	f002 fcf8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6112:	499a      	ldr	r1, [pc, #616]	; (b637c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b6114:	489a      	ldr	r0, [pc, #616]	; (b6380 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b6116:	f002 fcf4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b611a:	499a      	ldr	r1, [pc, #616]	; (b6384 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b611c:	489a      	ldr	r0, [pc, #616]	; (b6388 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b611e:	f002 fcf0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6122:	499a      	ldr	r1, [pc, #616]	; (b638c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b6124:	489a      	ldr	r0, [pc, #616]	; (b6390 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b6126:	f002 fcec 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b612a:	499a      	ldr	r1, [pc, #616]	; (b6394 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b612c:	489a      	ldr	r0, [pc, #616]	; (b6398 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b612e:	f002 fce8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6132:	499a      	ldr	r1, [pc, #616]	; (b639c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b6134:	489a      	ldr	r0, [pc, #616]	; (b63a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b6136:	f002 fce4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b613a:	499a      	ldr	r1, [pc, #616]	; (b63a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b613c:	489a      	ldr	r0, [pc, #616]	; (b63a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b613e:	f002 fce0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6142:	499a      	ldr	r1, [pc, #616]	; (b63ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b6144:	489a      	ldr	r0, [pc, #616]	; (b63b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b6146:	f002 fcdc 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b614a:	499a      	ldr	r1, [pc, #616]	; (b63b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b614c:	489a      	ldr	r0, [pc, #616]	; (b63b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b614e:	f002 fcd8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6152:	499a      	ldr	r1, [pc, #616]	; (b63bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b6154:	489a      	ldr	r0, [pc, #616]	; (b63c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b6156:	f002 fcd4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b615a:	499a      	ldr	r1, [pc, #616]	; (b63c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b615c:	489a      	ldr	r0, [pc, #616]	; (b63c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b615e:	f002 fcd0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6162:	499a      	ldr	r1, [pc, #616]	; (b63cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b6164:	489a      	ldr	r0, [pc, #616]	; (b63d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b6166:	f002 fccc 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b616a:	499a      	ldr	r1, [pc, #616]	; (b63d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b616c:	489a      	ldr	r0, [pc, #616]	; (b63d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b616e:	f002 fcc8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6172:	499a      	ldr	r1, [pc, #616]	; (b63dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b6174:	489a      	ldr	r0, [pc, #616]	; (b63e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b6176:	f002 fcc4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b617a:	499a      	ldr	r1, [pc, #616]	; (b63e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b617c:	489a      	ldr	r0, [pc, #616]	; (b63e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b617e:	f002 fcc0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6182:	499a      	ldr	r1, [pc, #616]	; (b63ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b6184:	489a      	ldr	r0, [pc, #616]	; (b63f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b6186:	f002 fcbc 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b618a:	499a      	ldr	r1, [pc, #616]	; (b63f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b618c:	489a      	ldr	r0, [pc, #616]	; (b63f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b618e:	f002 fcb8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6192:	499a      	ldr	r1, [pc, #616]	; (b63fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b6194:	489a      	ldr	r0, [pc, #616]	; (b6400 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b6196:	f002 fcb4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b619a:	499a      	ldr	r1, [pc, #616]	; (b6404 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b619c:	489a      	ldr	r0, [pc, #616]	; (b6408 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b619e:	f002 fcb0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61a2:	499a      	ldr	r1, [pc, #616]	; (b640c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b61a4:	489a      	ldr	r0, [pc, #616]	; (b6410 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b61a6:	f002 fcac 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61aa:	499a      	ldr	r1, [pc, #616]	; (b6414 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b61ac:	489a      	ldr	r0, [pc, #616]	; (b6418 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b61ae:	f002 fca8 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61b2:	499a      	ldr	r1, [pc, #616]	; (b641c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b61b4:	489a      	ldr	r0, [pc, #616]	; (b6420 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b61b6:	f002 fca4 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ba:	499a      	ldr	r1, [pc, #616]	; (b6424 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b61bc:	489a      	ldr	r0, [pc, #616]	; (b6428 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b61be:	f002 fca0 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61c2:	499a      	ldr	r1, [pc, #616]	; (b642c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b61c4:	489a      	ldr	r0, [pc, #616]	; (b6430 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b61c6:	f002 fc9c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ca:	499a      	ldr	r1, [pc, #616]	; (b6434 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b61cc:	489a      	ldr	r0, [pc, #616]	; (b6438 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b61ce:	f002 fc98 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61d2:	499a      	ldr	r1, [pc, #616]	; (b643c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b61d4:	489a      	ldr	r0, [pc, #616]	; (b6440 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b61d6:	f002 fc94 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61da:	499a      	ldr	r1, [pc, #616]	; (b6444 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b61dc:	489a      	ldr	r0, [pc, #616]	; (b6448 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b61de:	f002 fc90 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61e2:	499a      	ldr	r1, [pc, #616]	; (b644c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b61e4:	489a      	ldr	r0, [pc, #616]	; (b6450 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b61e6:	f002 fc8c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ea:	499a      	ldr	r1, [pc, #616]	; (b6454 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b61ec:	489a      	ldr	r0, [pc, #616]	; (b6458 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b61ee:	f002 fc88 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61f2:	499a      	ldr	r1, [pc, #616]	; (b645c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b61f4:	489a      	ldr	r0, [pc, #616]	; (b6460 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b61f6:	f002 fc84 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b61fa:	499a      	ldr	r1, [pc, #616]	; (b6464 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b61fc:	489a      	ldr	r0, [pc, #616]	; (b6468 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b61fe:	f002 fc80 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6202:	499a      	ldr	r1, [pc, #616]	; (b646c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b6204:	489a      	ldr	r0, [pc, #616]	; (b6470 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b6206:	f002 fc7c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b620a:	499a      	ldr	r1, [pc, #616]	; (b6474 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b620c:	489a      	ldr	r0, [pc, #616]	; (b6478 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b620e:	f002 fc78 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6212:	499a      	ldr	r1, [pc, #616]	; (b647c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b6214:	489a      	ldr	r0, [pc, #616]	; (b6480 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b6216:	f002 fc74 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b621a:	499a      	ldr	r1, [pc, #616]	; (b6484 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b621c:	489a      	ldr	r0, [pc, #616]	; (b6488 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b621e:	f002 fc70 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6222:	499a      	ldr	r1, [pc, #616]	; (b648c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b6224:	489a      	ldr	r0, [pc, #616]	; (b6490 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b6226:	f002 fc6c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b622a:	499a      	ldr	r1, [pc, #616]	; (b6494 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b622c:	489a      	ldr	r0, [pc, #616]	; (b6498 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b622e:	f002 fc68 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6232:	499a      	ldr	r1, [pc, #616]	; (b649c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b6234:	489a      	ldr	r0, [pc, #616]	; (b64a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b6236:	f002 fc64 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b623a:	499a      	ldr	r1, [pc, #616]	; (b64a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b623c:	489a      	ldr	r0, [pc, #616]	; (b64a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b623e:	f002 fc60 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6242:	499a      	ldr	r1, [pc, #616]	; (b64ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b6244:	489a      	ldr	r0, [pc, #616]	; (b64b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b6246:	f002 fc5c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b624a:	499a      	ldr	r1, [pc, #616]	; (b64b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b624c:	489a      	ldr	r0, [pc, #616]	; (b64b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b624e:	f002 fc58 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6252:	499a      	ldr	r1, [pc, #616]	; (b64bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b6254:	489a      	ldr	r0, [pc, #616]	; (b64c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b6256:	f002 fc54 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b625a:	499a      	ldr	r1, [pc, #616]	; (b64c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b625c:	489a      	ldr	r0, [pc, #616]	; (b64c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b625e:	f002 fc50 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6262:	499a      	ldr	r1, [pc, #616]	; (b64cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b6264:	489a      	ldr	r0, [pc, #616]	; (b64d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b6266:	f002 fc4c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b626a:	499a      	ldr	r1, [pc, #616]	; (b64d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b626c:	489a      	ldr	r0, [pc, #616]	; (b64d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b626e:	f002 fc48 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6272:	499a      	ldr	r1, [pc, #616]	; (b64dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b6274:	489a      	ldr	r0, [pc, #616]	; (b64e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b6276:	f002 fc44 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b627a:	499a      	ldr	r1, [pc, #616]	; (b64e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b627c:	489a      	ldr	r0, [pc, #616]	; (b64e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b627e:	f002 fc40 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6282:	499a      	ldr	r1, [pc, #616]	; (b64ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b6284:	489a      	ldr	r0, [pc, #616]	; (b64f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b6286:	f002 fc3c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b628a:	499a      	ldr	r1, [pc, #616]	; (b64f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b628c:	489a      	ldr	r0, [pc, #616]	; (b64f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b628e:	f002 fc38 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b6292:	499a      	ldr	r1, [pc, #616]	; (b64fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b6294:	489a      	ldr	r0, [pc, #616]	; (b6500 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b6296:	f002 fc34 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b629a:	499a      	ldr	r1, [pc, #616]	; (b6504 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b629c:	489a      	ldr	r0, [pc, #616]	; (b6508 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b629e:	f002 fc30 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62a2:	499a      	ldr	r1, [pc, #616]	; (b650c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b62a4:	489a      	ldr	r0, [pc, #616]	; (b6510 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b62a6:	f002 fc2c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62aa:	499a      	ldr	r1, [pc, #616]	; (b6514 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b62ac:	489a      	ldr	r0, [pc, #616]	; (b6518 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b62ae:	f002 fc28 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62b2:	499a      	ldr	r1, [pc, #616]	; (b651c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b62b4:	489a      	ldr	r0, [pc, #616]	; (b6520 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b62b6:	f002 fc24 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ba:	499a      	ldr	r1, [pc, #616]	; (b6524 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b62bc:	489a      	ldr	r0, [pc, #616]	; (b6528 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b62be:	f002 fc20 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62c2:	499a      	ldr	r1, [pc, #616]	; (b652c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b62c4:	489a      	ldr	r0, [pc, #616]	; (b6530 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b62c6:	f002 fc1c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ca:	499a      	ldr	r1, [pc, #616]	; (b6534 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b62cc:	489a      	ldr	r0, [pc, #616]	; (b6538 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b62ce:	f002 fc18 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62d2:	499a      	ldr	r1, [pc, #616]	; (b653c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b62d4:	489a      	ldr	r0, [pc, #616]	; (b6540 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b62d6:	f002 fc14 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62da:	499a      	ldr	r1, [pc, #616]	; (b6544 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b62dc:	489a      	ldr	r0, [pc, #616]	; (b6548 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b62de:	f002 fc10 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62e2:	499a      	ldr	r1, [pc, #616]	; (b654c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b62e4:	489a      	ldr	r0, [pc, #616]	; (b6550 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b62e6:	f002 fc0c 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ea:	499a      	ldr	r1, [pc, #616]	; (b6554 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b62ec:	489a      	ldr	r0, [pc, #616]	; (b6558 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b62ee:	f002 fc08 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62f2:	1928      	adds	r0, r5, r4
   b62f4:	4631      	mov	r1, r6
   b62f6:	3410      	adds	r4, #16
   b62f8:	f002 fc03 	bl	b8b02 <_ZN6StringC1EPK19__FlashStringHelper>
   b62fc:	2cd0      	cmp	r4, #208	; 0xd0
   b62fe:	d1f8      	bne.n	b62f2 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x256>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6300:	2208      	movs	r2, #8
   b6302:	4896      	ldr	r0, [pc, #600]	; (b655c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b6304:	2110      	movs	r1, #16
   b6306:	f000 fd42 	bl	b6d8e <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b630a:	4b95      	ldr	r3, [pc, #596]	; (b6560 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b630c:	2200      	movs	r2, #0
   b630e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6312:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6316:	609a      	str	r2, [r3, #8]
   b6318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b631c:	2002      	movs	r0, #2
   b631e:	f002 b983 	b.w	b8628 <set_system_mode>
   b6322:	bf00      	nop
   b6324:	2003de4c 	.word	0x2003de4c
   b6328:	2003e5e4 	.word	0x2003e5e4
   b632c:	000ba0f5 	.word	0x000ba0f5
   b6330:	2003d488 	.word	0x2003d488
   b6334:	2003daac 	.word	0x2003daac
   b6338:	000ba455 	.word	0x000ba455
   b633c:	2003dafc 	.word	0x2003dafc
   b6340:	2003db0c 	.word	0x2003db0c
   b6344:	000ba4d9 	.word	0x000ba4d9
   b6348:	2003e1b4 	.word	0x2003e1b4
   b634c:	000ba4ed 	.word	0x000ba4ed
   b6350:	2003e1c4 	.word	0x2003e1c4
   b6354:	000ba5e1 	.word	0x000ba5e1
   b6358:	2003e1d4 	.word	0x2003e1d4
   b635c:	000ba457 	.word	0x000ba457
   b6360:	2003e1e4 	.word	0x2003e1e4
   b6364:	000ba45f 	.word	0x000ba45f
   b6368:	2003e1f4 	.word	0x2003e1f4
   b636c:	000ba467 	.word	0x000ba467
   b6370:	2003e204 	.word	0x2003e204
   b6374:	000ba46f 	.word	0x000ba46f
   b6378:	2003e214 	.word	0x2003e214
   b637c:	000ba477 	.word	0x000ba477
   b6380:	2003e224 	.word	0x2003e224
   b6384:	000ba47f 	.word	0x000ba47f
   b6388:	2003e234 	.word	0x2003e234
   b638c:	000ba487 	.word	0x000ba487
   b6390:	2003e244 	.word	0x2003e244
   b6394:	000ba48f 	.word	0x000ba48f
   b6398:	2003e254 	.word	0x2003e254
   b639c:	000ba497 	.word	0x000ba497
   b63a0:	2003e264 	.word	0x2003e264
   b63a4:	000ba49d 	.word	0x000ba49d
   b63a8:	2003e274 	.word	0x2003e274
   b63ac:	000ba4a3 	.word	0x000ba4a3
   b63b0:	2003e284 	.word	0x2003e284
   b63b4:	000ba4a9 	.word	0x000ba4a9
   b63b8:	2003e294 	.word	0x2003e294
   b63bc:	000ba4af 	.word	0x000ba4af
   b63c0:	2003e2a4 	.word	0x2003e2a4
   b63c4:	000ba4b5 	.word	0x000ba4b5
   b63c8:	2003e2b4 	.word	0x2003e2b4
   b63cc:	000ba4bb 	.word	0x000ba4bb
   b63d0:	2003e2c4 	.word	0x2003e2c4
   b63d4:	000ba4c1 	.word	0x000ba4c1
   b63d8:	2003e2d4 	.word	0x2003e2d4
   b63dc:	000ba4cb 	.word	0x000ba4cb
   b63e0:	2003e2e4 	.word	0x2003e2e4
   b63e4:	000ba4d5 	.word	0x000ba4d5
   b63e8:	2003e2f4 	.word	0x2003e2f4
   b63ec:	000ba4df 	.word	0x000ba4df
   b63f0:	2003e304 	.word	0x2003e304
   b63f4:	000ba4e9 	.word	0x000ba4e9
   b63f8:	2003e314 	.word	0x2003e314
   b63fc:	000ba4f3 	.word	0x000ba4f3
   b6400:	2003e324 	.word	0x2003e324
   b6404:	000ba4fd 	.word	0x000ba4fd
   b6408:	2003e334 	.word	0x2003e334
   b640c:	000ba507 	.word	0x000ba507
   b6410:	2003e344 	.word	0x2003e344
   b6414:	000ba511 	.word	0x000ba511
   b6418:	2003e354 	.word	0x2003e354
   b641c:	000ba51b 	.word	0x000ba51b
   b6420:	2003e364 	.word	0x2003e364
   b6424:	000ba525 	.word	0x000ba525
   b6428:	2003e374 	.word	0x2003e374
   b642c:	000ba52f 	.word	0x000ba52f
   b6430:	2003e384 	.word	0x2003e384
   b6434:	000ba539 	.word	0x000ba539
   b6438:	2003e394 	.word	0x2003e394
   b643c:	000ba543 	.word	0x000ba543
   b6440:	2003e3a4 	.word	0x2003e3a4
   b6444:	000ba54d 	.word	0x000ba54d
   b6448:	2003e3b4 	.word	0x2003e3b4
   b644c:	000ba557 	.word	0x000ba557
   b6450:	2003e3c4 	.word	0x2003e3c4
   b6454:	000ba561 	.word	0x000ba561
   b6458:	2003e3d4 	.word	0x2003e3d4
   b645c:	000ba47b 	.word	0x000ba47b
   b6460:	2003e3e4 	.word	0x2003e3e4
   b6464:	000ba56b 	.word	0x000ba56b
   b6468:	2003e3f4 	.word	0x2003e3f4
   b646c:	000ba571 	.word	0x000ba571
   b6470:	2003e404 	.word	0x2003e404
   b6474:	000ba48b 	.word	0x000ba48b
   b6478:	2003e414 	.word	0x2003e414
   b647c:	000ba493 	.word	0x000ba493
   b6480:	2003e424 	.word	0x2003e424
   b6484:	000ba577 	.word	0x000ba577
   b6488:	2003e434 	.word	0x2003e434
   b648c:	000ba57f 	.word	0x000ba57f
   b6490:	2003e444 	.word	0x2003e444
   b6494:	000ba587 	.word	0x000ba587
   b6498:	2003e454 	.word	0x2003e454
   b649c:	000ba58f 	.word	0x000ba58f
   b64a0:	2003e464 	.word	0x2003e464
   b64a4:	000ba597 	.word	0x000ba597
   b64a8:	2003e474 	.word	0x2003e474
   b64ac:	000ba59f 	.word	0x000ba59f
   b64b0:	2003e484 	.word	0x2003e484
   b64b4:	000ba5a7 	.word	0x000ba5a7
   b64b8:	2003e494 	.word	0x2003e494
   b64bc:	000ba5af 	.word	0x000ba5af
   b64c0:	2003e4a4 	.word	0x2003e4a4
   b64c4:	000ba5b7 	.word	0x000ba5b7
   b64c8:	2003e4b4 	.word	0x2003e4b4
   b64cc:	000ba5bf 	.word	0x000ba5bf
   b64d0:	2003e4c4 	.word	0x2003e4c4
   b64d4:	000ba5c7 	.word	0x000ba5c7
   b64d8:	2003e4d4 	.word	0x2003e4d4
   b64dc:	000ba5cf 	.word	0x000ba5cf
   b64e0:	2003e4e4 	.word	0x2003e4e4
   b64e4:	000ba5d7 	.word	0x000ba5d7
   b64e8:	2003e4f4 	.word	0x2003e4f4
   b64ec:	000ba5df 	.word	0x000ba5df
   b64f0:	2003e504 	.word	0x2003e504
   b64f4:	000ba5e7 	.word	0x000ba5e7
   b64f8:	2003e514 	.word	0x2003e514
   b64fc:	000ba5ef 	.word	0x000ba5ef
   b6500:	2003e524 	.word	0x2003e524
   b6504:	000ba5f7 	.word	0x000ba5f7
   b6508:	2003e534 	.word	0x2003e534
   b650c:	000ba5ff 	.word	0x000ba5ff
   b6510:	2003e544 	.word	0x2003e544
   b6514:	000ba607 	.word	0x000ba607
   b6518:	2003e554 	.word	0x2003e554
   b651c:	000ba60f 	.word	0x000ba60f
   b6520:	2003e564 	.word	0x2003e564
   b6524:	000ba617 	.word	0x000ba617
   b6528:	2003e574 	.word	0x2003e574
   b652c:	000ba61f 	.word	0x000ba61f
   b6530:	2003e584 	.word	0x2003e584
   b6534:	000ba627 	.word	0x000ba627
   b6538:	2003e594 	.word	0x2003e594
   b653c:	000ba62f 	.word	0x000ba62f
   b6540:	2003e5a4 	.word	0x2003e5a4
   b6544:	000ba637 	.word	0x000ba637
   b6548:	2003e5b4 	.word	0x2003e5b4
   b654c:	000ba63d 	.word	0x000ba63d
   b6550:	2003e5c4 	.word	0x2003e5c4
   b6554:	000ba643 	.word	0x000ba643
   b6558:	2003e5d4 	.word	0x2003e5d4
   b655c:	2003de54 	.word	0x2003de54
   b6560:	2003d478 	.word	0x2003d478

000b6564 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6564:	4770      	bx	lr

000b6566 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6566:	b510      	push	{r4, lr}
  }
   b6568:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b656a:	4604      	mov	r4, r0
  }
   b656c:	f7fd fd93 	bl	b4096 <_ZdlPvj>
   b6570:	4620      	mov	r0, r4
   b6572:	bd10      	pop	{r4, pc}

000b6574 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6574:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6576:	4604      	mov	r4, r0
   b6578:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b657a:	7922      	ldrb	r2, [r4, #4]
   b657c:	68a3      	ldr	r3, [r4, #8]
   b657e:	b132      	cbz	r2, b658e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6580:	b9a3      	cbnz	r3, b65ac <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6582:	490b      	ldr	r1, [pc, #44]	; (b65b0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6584:	b002      	add	sp, #8
   b6586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b658a:	f002 bb75 	b.w	b8c78 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b658e:	4a09      	ldr	r2, [pc, #36]	; (b65b4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6590:	7b26      	ldrb	r6, [r4, #12]
   b6592:	4d09      	ldr	r5, [pc, #36]	; (b65b8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6594:	4909      	ldr	r1, [pc, #36]	; (b65bc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6596:	7b64      	ldrb	r4, [r4, #13]
   b6598:	2e01      	cmp	r6, #1
   b659a:	bf18      	it	ne
   b659c:	4629      	movne	r1, r5
   b659e:	e9cd 1400 	strd	r1, r4, [sp]
   b65a2:	4907      	ldr	r1, [pc, #28]	; (b65c0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b65a4:	f7fd fdac 	bl	b4100 <_ZN5Print6printfEPKcz>
  }
   b65a8:	b002      	add	sp, #8
   b65aa:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b65ac:	4a05      	ldr	r2, [pc, #20]	; (b65c4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b65ae:	e7ef      	b.n	b6590 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b65b0:	000ba661 	.word	0x000ba661
   b65b4:	000ba0f5 	.word	0x000ba0f5
   b65b8:	000ba65d 	.word	0x000ba65d
   b65bc:	000ba659 	.word	0x000ba659
   b65c0:	000ba677 	.word	0x000ba677
   b65c4:	000ba650 	.word	0x000ba650

000b65c8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b65c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65cc:	b085      	sub	sp, #20
   b65ce:	461f      	mov	r7, r3
   b65d0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b65d4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b65d8:	eba8 0902 	sub.w	r9, r8, r2
   b65dc:	eba7 0a01 	sub.w	sl, r7, r1
   b65e0:	f1b9 0f00 	cmp.w	r9, #0
   b65e4:	bfb8      	it	lt
   b65e6:	f1c9 0900 	rsblt	r9, r9, #0
   b65ea:	f1ba 0f00 	cmp.w	sl, #0
   b65ee:	bfb8      	it	lt
   b65f0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b65f4:	45d1      	cmp	r9, sl
        uint16_t color) {
   b65f6:	4683      	mov	fp, r0
   b65f8:	460c      	mov	r4, r1
   b65fa:	4615      	mov	r5, r2
    if (steep) {
   b65fc:	dd04      	ble.n	b6608 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b65fe:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b6600:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b6602:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b6604:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b6606:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b6608:	42bc      	cmp	r4, r7
   b660a:	dd05      	ble.n	b6618 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b660c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b660e:	4645      	mov	r5, r8
   b6610:	4690      	mov	r8, r2
    if (x0 > x1) {
   b6612:	4622      	mov	r2, r4
   b6614:	463c      	mov	r4, r7
   b6616:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b6618:	1b3e      	subs	r6, r7, r4
   b661a:	b2b2      	uxth	r2, r6
   b661c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b661e:	eba8 0205 	sub.w	r2, r8, r5
   b6622:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6626:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b662a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b662e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b6632:	4545      	cmp	r5, r8
   b6634:	bfb4      	ite	lt
   b6636:	2201      	movlt	r2, #1
   b6638:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b663c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b663e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b6640:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b6642:	42bc      	cmp	r4, r7
   b6644:	dc1c      	bgt.n	b6680 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b6646:	f8db 2000 	ldr.w	r2, [fp]
   b664a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b664c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b664e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b6652:	bfc7      	ittee	gt
   b6654:	4629      	movgt	r1, r5
   b6656:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b6658:	462a      	movle	r2, r5
   b665a:	4621      	movle	r1, r4
   b665c:	4658      	mov	r0, fp
   b665e:	47c0      	blx	r8
        }
        err -= dy;
   b6660:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b6662:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b6664:	1ab6      	subs	r6, r6, r2
   b6666:	b2b1      	uxth	r1, r6
   b6668:	b236      	sxth	r6, r6
        if (err < 0) {
   b666a:	2e00      	cmp	r6, #0
   b666c:	da05      	bge.n	b667a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b666e:	9a02      	ldr	r2, [sp, #8]
   b6670:	4415      	add	r5, r2
            err += dx;
   b6672:	9a00      	ldr	r2, [sp, #0]
   b6674:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b6676:	b22d      	sxth	r5, r5
            err += dx;
   b6678:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b667a:	3401      	adds	r4, #1
   b667c:	b224      	sxth	r4, r4
   b667e:	e7e0      	b.n	b6642 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b6680:	b005      	add	sp, #20
   b6682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6686 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b6686:	4770      	bx	lr

000b6688 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b6688:	b410      	push	{r4}
    drawPixel(x, y, color);
   b668a:	6804      	ldr	r4, [r0, #0]
   b668c:	6924      	ldr	r4, [r4, #16]
   b668e:	46a4      	mov	ip, r4
}
   b6690:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b6694:	4760      	bx	ip

000b6696 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6696:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b6698:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b669a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b669e:	9502      	str	r5, [sp, #8]
   b66a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b66a2:	46a4      	mov	ip, r4
}
   b66a4:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b66a6:	4760      	bx	ip

000b66a8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b66a8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b66aa:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b66ac:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b66b0:	9502      	str	r5, [sp, #8]
   b66b2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b66b4:	46a4      	mov	ip, r4
}
   b66b6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b66b8:	4760      	bx	ip

000b66ba <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b66ba:	b470      	push	{r4, r5, r6}
   b66bc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b66c0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b66c4:	6804      	ldr	r4, [r0, #0]
   b66c6:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b66ca:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b66cc:	46a4      	mov	ip, r4
}
   b66ce:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b66d0:	4760      	bx	ip

000b66d2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b66d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b66d6:	461c      	mov	r4, r3
    startWrite();
   b66d8:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b66da:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b66de:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b66e0:	4605      	mov	r5, r0
   b66e2:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b66e4:	3c01      	subs	r4, #1
   b66e6:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b66e8:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b66ea:	b224      	sxth	r4, r4
    startWrite();
   b66ec:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b66ee:	682b      	ldr	r3, [r5, #0]
   b66f0:	f8cd 8004 	str.w	r8, [sp, #4]
   b66f4:	9400      	str	r4, [sp, #0]
   b66f6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b66f8:	4628      	mov	r0, r5
   b66fa:	463b      	mov	r3, r7
   b66fc:	4632      	mov	r2, r6
   b66fe:	4639      	mov	r1, r7
   b6700:	47a0      	blx	r4
    endWrite();
   b6702:	682b      	ldr	r3, [r5, #0]
   b6704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6706:	4628      	mov	r0, r5
}
   b6708:	b002      	add	sp, #8
   b670a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b670e:	4718      	bx	r3

000b6710 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6714:	461d      	mov	r5, r3
    startWrite();
   b6716:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b6718:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b671c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b671e:	4604      	mov	r4, r0
   b6720:	4617      	mov	r7, r2
   b6722:	460e      	mov	r6, r1
    startWrite();
   b6724:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b6726:	e9cd 7800 	strd	r7, r8, [sp]
   b672a:	6822      	ldr	r2, [r4, #0]
   b672c:	1e6b      	subs	r3, r5, #1
   b672e:	4433      	add	r3, r6
   b6730:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b6732:	4620      	mov	r0, r4
   b6734:	b21b      	sxth	r3, r3
   b6736:	463a      	mov	r2, r7
   b6738:	4631      	mov	r1, r6
   b673a:	47a8      	blx	r5
    endWrite();
   b673c:	6823      	ldr	r3, [r4, #0]
   b673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6740:	4620      	mov	r0, r4
}
   b6742:	b002      	add	sp, #8
   b6744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6748:	4718      	bx	r3

000b674a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b674a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b674e:	461e      	mov	r6, r3
    startWrite();
   b6750:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6752:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b6756:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6758:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b675c:	460c      	mov	r4, r1
   b675e:	4605      	mov	r5, r0
   b6760:	4617      	mov	r7, r2
    startWrite();
   b6762:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b6764:	4426      	add	r6, r4
   b6766:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b6768:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b676a:	da0b      	bge.n	b6784 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b676c:	f8cd 8000 	str.w	r8, [sp]
   b6770:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6774:	4621      	mov	r1, r4
   b6776:	464b      	mov	r3, r9
   b6778:	463a      	mov	r2, r7
   b677a:	4628      	mov	r0, r5
   b677c:	3401      	adds	r4, #1
   b677e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b6780:	b224      	sxth	r4, r4
   b6782:	e7f0      	b.n	b6766 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b6784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6786:	4628      	mov	r0, r5
}
   b6788:	b002      	add	sp, #8
   b678a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b678e:	4718      	bx	r3

000b6790 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6790:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6792:	6802      	ldr	r2, [r0, #0]
   b6794:	9101      	str	r1, [sp, #4]
   b6796:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b679a:	9100      	str	r1, [sp, #0]
   b679c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b679e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b67a2:	2200      	movs	r2, #0
   b67a4:	4611      	mov	r1, r2
   b67a6:	47a0      	blx	r4
}
   b67a8:	b002      	add	sp, #8
   b67aa:	bd10      	pop	{r4, pc}

000b67ac <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b67ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b67b0:	4299      	cmp	r1, r3
        uint16_t color) {
   b67b2:	4616      	mov	r6, r2
   b67b4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b67b8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b67bc:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b67be:	4680      	mov	r8, r0
   b67c0:	460d      	mov	r5, r1
   b67c2:	461c      	mov	r4, r3
    if(x0 == x1){
   b67c4:	d113      	bne.n	b67ee <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b67c6:	42be      	cmp	r6, r7
   b67c8:	bfc8      	it	gt
   b67ca:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b67cc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b67d0:	bfc4      	itt	gt
   b67d2:	463e      	movgt	r6, r7
   b67d4:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b67d6:	1c7b      	adds	r3, r7, #1
   b67d8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b67da:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b67dc:	b21b      	sxth	r3, r3
   b67de:	4632      	mov	r2, r6
   b67e0:	4629      	mov	r1, r5
   b67e2:	4640      	mov	r0, r8
   b67e4:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b67e6:	b003      	add	sp, #12
   b67e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b67ec:	4760      	bx	ip
    } else if(y0 == y1){
   b67ee:	42be      	cmp	r6, r7
   b67f0:	d10a      	bne.n	b6808 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b67f2:	4299      	cmp	r1, r3
   b67f4:	bfc2      	ittt	gt
   b67f6:	460b      	movgt	r3, r1
   b67f8:	4625      	movgt	r5, r4
   b67fa:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b67fc:	1c63      	adds	r3, r4, #1
   b67fe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b6802:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6804:	1b5b      	subs	r3, r3, r5
   b6806:	e7e9      	b.n	b67dc <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b6808:	6953      	ldr	r3, [r2, #20]
   b680a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b680c:	e9cd 7900 	strd	r7, r9, [sp]
   b6810:	f8d8 3000 	ldr.w	r3, [r8]
   b6814:	4640      	mov	r0, r8
   b6816:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b6818:	4632      	mov	r2, r6
   b681a:	4623      	mov	r3, r4
   b681c:	4629      	mov	r1, r5
   b681e:	47b8      	blx	r7
        endWrite();
   b6820:	f8d8 3000 	ldr.w	r3, [r8]
   b6824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6826:	4640      	mov	r0, r8
}
   b6828:	b003      	add	sp, #12
   b682a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b682e:	4718      	bx	r3

000b6830 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6830:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6834:	461d      	mov	r5, r3
    startWrite();
   b6836:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6838:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b683c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b683e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6842:	4604      	mov	r4, r0
   b6844:	460f      	mov	r7, r1
   b6846:	4616      	mov	r6, r2
    startWrite();
   b6848:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b684a:	6823      	ldr	r3, [r4, #0]
   b684c:	f8cd 8000 	str.w	r8, [sp]
   b6850:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6854:	4632      	mov	r2, r6
   b6856:	462b      	mov	r3, r5
   b6858:	4639      	mov	r1, r7
   b685a:	4620      	mov	r0, r4
   b685c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b685e:	6823      	ldr	r3, [r4, #0]
   b6860:	f8cd 8000 	str.w	r8, [sp]
   b6864:	f109 32ff 	add.w	r2, r9, #4294967295
   b6868:	4432      	add	r2, r6
   b686a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b686e:	4639      	mov	r1, r7
   b6870:	462b      	mov	r3, r5
   b6872:	4620      	mov	r0, r4
   b6874:	b212      	sxth	r2, r2
   b6876:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b6878:	6823      	ldr	r3, [r4, #0]
   b687a:	f8cd 8000 	str.w	r8, [sp]
   b687e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6882:	4632      	mov	r2, r6
   b6884:	464b      	mov	r3, r9
   b6886:	4639      	mov	r1, r7
   b6888:	4620      	mov	r0, r4
   b688a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b688c:	1e6b      	subs	r3, r5, #1
   b688e:	19d9      	adds	r1, r3, r7
   b6890:	6823      	ldr	r3, [r4, #0]
   b6892:	f8cd 8000 	str.w	r8, [sp]
   b6896:	6a1d      	ldr	r5, [r3, #32]
   b6898:	4620      	mov	r0, r4
   b689a:	464b      	mov	r3, r9
   b689c:	4632      	mov	r2, r6
   b689e:	b209      	sxth	r1, r1
   b68a0:	47a8      	blx	r5
    endWrite();
   b68a2:	6823      	ldr	r3, [r4, #0]
   b68a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b68a6:	4620      	mov	r0, r4
}
   b68a8:	b002      	add	sp, #8
   b68aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b68ae:	4718      	bx	r3

000b68b0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b68b0:	4770      	bx	lr

000b68b2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b68b2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b68b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b68ba:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b68bc:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b68be:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b68c2:	bf59      	ittee	pl
   b68c4:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b68c6:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b68c8:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b68ca:	81c3      	strhmi	r3, [r0, #14]
}
   b68cc:	4770      	bx	lr
	...

000b68d0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b68d0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b68d2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b68d4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b68d6:	4a07      	ldr	r2, [pc, #28]	; (b68f4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b68d8:	4d07      	ldr	r5, [pc, #28]	; (b68f8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b68da:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b68dc:	2400      	movs	r4, #0
    _width    = WIDTH;
   b68de:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b68e0:	f04f 31ff 	mov.w	r1, #4294967295
   b68e4:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b68e8:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b68ea:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b68ec:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b68ee:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b68f0:	6204      	str	r4, [r0, #32]
}
   b68f2:	bd30      	pop	{r4, r5, pc}
   b68f4:	01000101 	.word	0x01000101
   b68f8:	000bab9c 	.word	0x000bab9c

000b68fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b68fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6900:	b089      	sub	sp, #36	; 0x24
   b6902:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6906:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6908:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b690c:	9304      	str	r3, [sp, #16]
   b690e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b6912:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6914:	9305      	str	r3, [sp, #20]
   b6916:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b691a:	4604      	mov	r4, r0
    startWrite();
   b691c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b691e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b6922:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6926:	bf48      	it	mi
   b6928:	f108 020e 	addmi.w	r2, r8, #14
   b692c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b6930:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b6932:	4635      	mov	r5, r6
   b6934:	9b03      	ldr	r3, [sp, #12]
   b6936:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b6938:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b693c:	189a      	adds	r2, r3, r2
   b693e:	9b05      	ldr	r3, [sp, #20]
   b6940:	428b      	cmp	r3, r1
   b6942:	b212      	sxth	r2, r2
   b6944:	dd27      	ble.n	b6996 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6946:	9b04      	ldr	r3, [sp, #16]
   b6948:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b694a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b694e:	9306      	str	r3, [sp, #24]
   b6950:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b6954:	4580      	cmp	r8, r0
   b6956:	fa1f f189 	uxth.w	r1, r9
   b695a:	dd17      	ble.n	b698c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b695c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b695e:	bf05      	ittet	eq
   b6960:	9b06      	ldreq	r3, [sp, #24]
   b6962:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b6964:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6966:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b6968:	bf18      	it	ne
   b696a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b696c:	062b      	lsls	r3, r5, #24
   b696e:	d50a      	bpl.n	b6986 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b6970:	9b02      	ldr	r3, [sp, #8]
   b6972:	6820      	ldr	r0, [r4, #0]
   b6974:	9207      	str	r2, [sp, #28]
   b6976:	4419      	add	r1, r3
   b6978:	6983      	ldr	r3, [r0, #24]
   b697a:	b209      	sxth	r1, r1
   b697c:	461f      	mov	r7, r3
   b697e:	4620      	mov	r0, r4
   b6980:	4653      	mov	r3, sl
   b6982:	47b8      	blx	r7
   b6984:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6986:	f109 0901 	add.w	r9, r9, #1
   b698a:	e7e1      	b.n	b6950 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b698c:	9b01      	ldr	r3, [sp, #4]
   b698e:	3301      	adds	r3, #1
   b6990:	9301      	str	r3, [sp, #4]
   b6992:	445e      	add	r6, fp
   b6994:	e7ce      	b.n	b6934 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6996:	6823      	ldr	r3, [r4, #0]
   b6998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b699a:	4620      	mov	r0, r4
}
   b699c:	b009      	add	sp, #36	; 0x24
   b699e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b69a2:	4718      	bx	r3

000b69a4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b69a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69a8:	ed2d 8b02 	vpush	{d8}
   b69ac:	b091      	sub	sp, #68	; 0x44
   b69ae:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b69b0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b69b2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b69b6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b69ba:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b69be:	9103      	str	r1, [sp, #12]
   b69c0:	461f      	mov	r7, r3
   b69c2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b69c6:	9304      	str	r3, [sp, #16]
   b69c8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b69ca:	2a00      	cmp	r2, #0
   b69cc:	f040 80c5 	bne.w	b6b5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b69d0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b69d4:	428b      	cmp	r3, r1
   b69d6:	f340 814c 	ble.w	b6c72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b69da:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b69de:	42b3      	cmp	r3, r6
   b69e0:	f340 8147 	ble.w	b6c72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b69e4:	2306      	movs	r3, #6
   b69e6:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b69ea:	2b00      	cmp	r3, #0
   b69ec:	f340 8141 	ble.w	b6c72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b69f0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b69f4:	2b00      	cmp	r3, #0
   b69f6:	f340 813c 	ble.w	b6c72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b69fa:	7f03      	ldrb	r3, [r0, #28]
   b69fc:	b91b      	cbnz	r3, b6a06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b69fe:	2faf      	cmp	r7, #175	; 0xaf
   b6a00:	bf84      	itt	hi
   b6a02:	3701      	addhi	r7, #1
   b6a04:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6a06:	f8db 3000 	ldr.w	r3, [fp]
   b6a0a:	4658      	mov	r0, fp
   b6a0c:	695b      	ldr	r3, [r3, #20]
   b6a0e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6a10:	2205      	movs	r2, #5
   b6a12:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6a14:	2200      	movs	r2, #0
   b6a16:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6a18:	4a98      	ldr	r2, [pc, #608]	; (b6c7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6a1a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b6a1e:	18d3      	adds	r3, r2, r3
   b6a20:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b6a22:	b2b3      	uxth	r3, r6
   b6a24:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6a26:	9a05      	ldr	r2, [sp, #20]
   b6a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6a2a:	5c9b      	ldrb	r3, [r3, r2]
   b6a2c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6a2e:	b2ab      	uxth	r3, r5
   b6a30:	930b      	str	r3, [sp, #44]	; 0x2c
   b6a32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b6a36:	9308      	str	r3, [sp, #32]
   b6a38:	9b03      	ldr	r3, [sp, #12]
   b6a3a:	fb02 f905 	mul.w	r9, r2, r5
   b6a3e:	fa19 f983 	uxtah	r9, r9, r3
   b6a42:	fa0f f389 	sxth.w	r3, r9
   b6a46:	ee08 3a10 	vmov	s16, r3
   b6a4a:	2308      	movs	r3, #8
   b6a4c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b6a4e:	9b03      	ldr	r3, [sp, #12]
   b6a50:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6a54:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b6a58:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b6a5c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b6a5e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b6a62:	07d2      	lsls	r2, r2, #31
   b6a64:	d552      	bpl.n	b6b0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b6a66:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6a68:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6a6c:	d13e      	bne.n	b6aec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b6a6e:	2c01      	cmp	r4, #1
   b6a70:	d13c      	bne.n	b6aec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b6a72:	699b      	ldr	r3, [r3, #24]
   b6a74:	9906      	ldr	r1, [sp, #24]
   b6a76:	461f      	mov	r7, r3
   b6a78:	9b04      	ldr	r3, [sp, #16]
   b6a7a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b6a7c:	b212      	sxth	r2, r2
   b6a7e:	4651      	mov	r1, sl
   b6a80:	4658      	mov	r0, fp
   b6a82:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6a84:	f109 0301 	add.w	r3, r9, #1
   b6a88:	fa4f f983 	sxtb.w	r9, r3
   b6a8c:	9b07      	ldr	r3, [sp, #28]
   b6a8e:	085b      	lsrs	r3, r3, #1
   b6a90:	9307      	str	r3, [sp, #28]
   b6a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6a94:	3b01      	subs	r3, #1
   b6a96:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6a9a:	930a      	str	r3, [sp, #40]	; 0x28
   b6a9c:	d1de      	bne.n	b6a5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6a9e:	9f05      	ldr	r7, [sp, #20]
   b6aa0:	3701      	adds	r7, #1
   b6aa2:	b27b      	sxtb	r3, r7
   b6aa4:	9305      	str	r3, [sp, #20]
   b6aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6aa8:	3b01      	subs	r3, #1
   b6aaa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6aae:	9309      	str	r3, [sp, #36]	; 0x24
   b6ab0:	d1b9      	bne.n	b6a26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b6ab2:	9b04      	ldr	r3, [sp, #16]
   b6ab4:	4543      	cmp	r3, r8
   b6ab6:	d00f      	beq.n	b6ad8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6ab8:	2d01      	cmp	r5, #1
   b6aba:	f8db 3000 	ldr.w	r3, [fp]
   b6abe:	d13b      	bne.n	b6b38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6ac0:	2c01      	cmp	r4, #1
   b6ac2:	d139      	bne.n	b6b38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6ac4:	9908      	ldr	r1, [sp, #32]
   b6ac6:	f8cd 8000 	str.w	r8, [sp]
   b6aca:	3105      	adds	r1, #5
   b6acc:	6a1c      	ldr	r4, [r3, #32]
   b6ace:	4632      	mov	r2, r6
   b6ad0:	2308      	movs	r3, #8
   b6ad2:	b209      	sxth	r1, r1
   b6ad4:	4658      	mov	r0, fp
   b6ad6:	47a0      	blx	r4
        endWrite();
   b6ad8:	f8db 3000 	ldr.w	r3, [fp]
   b6adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ade:	4658      	mov	r0, fp
}
   b6ae0:	b011      	add	sp, #68	; 0x44
   b6ae2:	ecbd 8b02 	vpop	{d8}
   b6ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6aea:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6aec:	9906      	ldr	r1, [sp, #24]
   b6aee:	fb14 f202 	smulbb	r2, r4, r2
   b6af2:	440a      	add	r2, r1
   b6af4:	9904      	ldr	r1, [sp, #16]
   b6af6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6af8:	9400      	str	r4, [sp, #0]
   b6afa:	69db      	ldr	r3, [r3, #28]
   b6afc:	ee18 1a10 	vmov	r1, s16
   b6b00:	461f      	mov	r7, r3
   b6b02:	b212      	sxth	r2, r2
   b6b04:	462b      	mov	r3, r5
   b6b06:	4658      	mov	r0, fp
   b6b08:	47b8      	blx	r7
   b6b0a:	e7bb      	b.n	b6a84 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6b0c:	9a04      	ldr	r2, [sp, #16]
   b6b0e:	4542      	cmp	r2, r8
   b6b10:	d0b8      	beq.n	b6a84 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b6b12:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6b14:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6b18:	d107      	bne.n	b6b2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6b1a:	2c01      	cmp	r4, #1
   b6b1c:	d105      	bne.n	b6b2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6b1e:	699b      	ldr	r3, [r3, #24]
   b6b20:	9906      	ldr	r1, [sp, #24]
   b6b22:	461f      	mov	r7, r3
   b6b24:	440a      	add	r2, r1
   b6b26:	4643      	mov	r3, r8
   b6b28:	e7a8      	b.n	b6a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6b2a:	9906      	ldr	r1, [sp, #24]
   b6b2c:	f8cd 8004 	str.w	r8, [sp, #4]
   b6b30:	fb14 f202 	smulbb	r2, r4, r2
   b6b34:	440a      	add	r2, r1
   b6b36:	e7df      	b.n	b6af8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6b3a:	f8cd 8004 	str.w	r8, [sp, #4]
   b6b3e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6b42:	9a08      	ldr	r2, [sp, #32]
   b6b44:	00e4      	lsls	r4, r4, #3
   b6b46:	440a      	add	r2, r1
   b6b48:	4611      	mov	r1, r2
   b6b4a:	9400      	str	r4, [sp, #0]
   b6b4c:	69dc      	ldr	r4, [r3, #28]
   b6b4e:	4632      	mov	r2, r6
   b6b50:	462b      	mov	r3, r5
   b6b52:	b209      	sxth	r1, r1
   b6b54:	4658      	mov	r0, fp
   b6b56:	47a0      	blx	r4
        endWrite();
   b6b58:	e7be      	b.n	b6ad8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6b5a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6b5c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6b5e:	6812      	ldr	r2, [r2, #0]
   b6b60:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6b62:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6b64:	b2ff      	uxtb	r7, r7
   b6b66:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b6b6a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6b6e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6b70:	789a      	ldrb	r2, [r3, #2]
   b6b72:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6b74:	78da      	ldrb	r2, [r3, #3]
   b6b76:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6b78:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6b7a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b6b7e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6b82:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6b84:	d801      	bhi.n	b6b8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6b86:	2c01      	cmp	r4, #1
   b6b88:	d957      	bls.n	b6c3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6b8a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b6b8e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6b90:	fa0f f38a 	sxth.w	r3, sl
   b6b94:	9307      	str	r3, [sp, #28]
        startWrite();
   b6b96:	f8db 3000 	ldr.w	r3, [fp]
   b6b9a:	4658      	mov	r0, fp
   b6b9c:	695b      	ldr	r3, [r3, #20]
   b6b9e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6ba0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6ba2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6ba6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6ba8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6bac:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b6bae:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6bb0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6bb4:	429f      	cmp	r7, r3
   b6bb6:	d28f      	bcs.n	b6ad8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6bb8:	9b07      	ldr	r3, [sp, #28]
   b6bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6bbc:	443b      	add	r3, r7
   b6bbe:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6bc2:	2200      	movs	r2, #0
   b6bc4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6bc8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6bca:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6bce:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6bd2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6bd6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6bda:	9905      	ldr	r1, [sp, #20]
   b6bdc:	4291      	cmp	r1, r2
   b6bde:	d241      	bcs.n	b6c64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6be0:	1c5a      	adds	r2, r3, #1
   b6be2:	b2d2      	uxtb	r2, r2
   b6be4:	075b      	lsls	r3, r3, #29
   b6be6:	920d      	str	r2, [sp, #52]	; 0x34
   b6be8:	d107      	bne.n	b6bfa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6bea:	9b06      	ldr	r3, [sp, #24]
   b6bec:	9906      	ldr	r1, [sp, #24]
   b6bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6bf0:	3301      	adds	r3, #1
   b6bf2:	b29b      	uxth	r3, r3
   b6bf4:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6bf8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6bfa:	f019 0f80 	tst.w	r9, #128	; 0x80
   b6bfe:	d012      	beq.n	b6c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6c00:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6c02:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6c06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6c0a:	d11a      	bne.n	b6c42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6c0c:	2c01      	cmp	r4, #1
   b6c0e:	d118      	bne.n	b6c42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6c12:	699b      	ldr	r3, [r3, #24]
   b6c14:	4411      	add	r1, r2
   b6c16:	9a05      	ldr	r2, [sp, #20]
   b6c18:	4411      	add	r1, r2
   b6c1a:	461e      	mov	r6, r3
   b6c1c:	4652      	mov	r2, sl
   b6c1e:	9b04      	ldr	r3, [sp, #16]
   b6c20:	b209      	sxth	r1, r1
   b6c22:	4658      	mov	r0, fp
   b6c24:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6c26:	9e05      	ldr	r6, [sp, #20]
   b6c28:	3601      	adds	r6, #1
   b6c2a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6c2c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6c30:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b6c32:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b6c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6c38:	e7ce      	b.n	b6bd8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6c3a:	2300      	movs	r3, #0
   b6c3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6c40:	e7a9      	b.n	b6b96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6c42:	9805      	ldr	r0, [sp, #20]
   b6c44:	9a08      	ldr	r2, [sp, #32]
   b6c46:	4402      	add	r2, r0
   b6c48:	fb02 1105 	mla	r1, r2, r5, r1
   b6c4c:	9a04      	ldr	r2, [sp, #16]
   b6c4e:	e9cd 4200 	strd	r4, r2, [sp]
   b6c52:	69db      	ldr	r3, [r3, #28]
   b6c54:	ee18 2a10 	vmov	r2, s16
   b6c58:	461e      	mov	r6, r3
   b6c5a:	b209      	sxth	r1, r1
   b6c5c:	462b      	mov	r3, r5
   b6c5e:	4658      	mov	r0, fp
   b6c60:	47b0      	blx	r6
   b6c62:	e7e0      	b.n	b6c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b6c66:	3701      	adds	r7, #1
   b6c68:	4498      	add	r8, r3
   b6c6a:	fa5f f888 	uxtb.w	r8, r8
   b6c6e:	b2ff      	uxtb	r7, r7
   b6c70:	e79f      	b.n	b6bb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b6c72:	b011      	add	sp, #68	; 0x44
   b6c74:	ecbd 8b02 	vpop	{d8}
   b6c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c7c:	000ba694 	.word	0x000ba694

000b6c80 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b6c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b6c82:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6c84:	b085      	sub	sp, #20
   b6c86:	4604      	mov	r4, r0
   b6c88:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6c8a:	2a00      	cmp	r2, #0
   b6c8c:	d134      	bne.n	b6cf8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b6c8e:	290a      	cmp	r1, #10
   b6c90:	d108      	bne.n	b6ca4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b6c92:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6c94:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6c96:	7e42      	ldrb	r2, [r0, #25]
   b6c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6c9c:	8263      	strh	r3, [r4, #18]
}
   b6c9e:	2001      	movs	r0, #1
   b6ca0:	b005      	add	sp, #20
   b6ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6ca4:	290d      	cmp	r1, #13
   b6ca6:	d0fa      	beq.n	b6c9e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6ca8:	7ee1      	ldrb	r1, [r4, #27]
   b6caa:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6cac:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6cae:	b171      	cbz	r1, b6cce <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6cb0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6cb4:	2106      	movs	r1, #6
   b6cb6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6cba:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b6cbe:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6cc0:	bfc1      	itttt	gt
   b6cc2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6cc6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6cc8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6ccc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6cce:	8ae2      	ldrh	r2, [r4, #22]
   b6cd0:	9201      	str	r2, [sp, #4]
   b6cd2:	8aa2      	ldrh	r2, [r4, #20]
   b6cd4:	9200      	str	r2, [sp, #0]
   b6cd6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6cda:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6cde:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	f7ff fe5e 	bl	b69a4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6ce8:	7e23      	ldrb	r3, [r4, #24]
   b6cea:	8a22      	ldrh	r2, [r4, #16]
   b6cec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6cf0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6cf4:	8223      	strh	r3, [r4, #16]
   b6cf6:	e7d2      	b.n	b6c9e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6cf8:	290a      	cmp	r1, #10
   b6cfa:	d107      	bne.n	b6d0c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6cfc:	2300      	movs	r3, #0
   b6cfe:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6d00:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6d02:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6d04:	8a43      	ldrh	r3, [r0, #18]
   b6d06:	fb01 3302 	mla	r3, r1, r2, r3
   b6d0a:	e7c7      	b.n	b6c9c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6d0c:	290d      	cmp	r1, #13
   b6d0e:	d0c6      	beq.n	b6c9e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6d10:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b6d12:	42a9      	cmp	r1, r5
   b6d14:	d3c3      	bcc.n	b6c9e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6d16:	7a51      	ldrb	r1, [r2, #9]
   b6d18:	4299      	cmp	r1, r3
   b6d1a:	d3c0      	bcc.n	b6c9e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6d1c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b6d1e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6d20:	b2ed      	uxtb	r5, r5
   b6d22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6d26:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6d28:	b328      	cbz	r0, b6d76 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6d2a:	78e9      	ldrb	r1, [r5, #3]
   b6d2c:	b319      	cbz	r1, b6d76 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6d2e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6d30:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6d32:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6d34:	b191      	cbz	r1, b6d5c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b6d36:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6d3a:	4408      	add	r0, r1
   b6d3c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6d40:	fb06 1100 	mla	r1, r6, r0, r1
   b6d44:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6d48:	4281      	cmp	r1, r0
   b6d4a:	dd07      	ble.n	b6d5c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6d4c:	2000      	movs	r0, #0
   b6d4e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6d50:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6d54:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6d56:	fb02 1207 	mla	r2, r2, r7, r1
   b6d5a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6d5c:	8ae2      	ldrh	r2, [r4, #22]
   b6d5e:	9201      	str	r2, [sp, #4]
   b6d60:	8aa2      	ldrh	r2, [r4, #20]
   b6d62:	9200      	str	r2, [sp, #0]
   b6d64:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6d68:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6d6c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6d70:	4620      	mov	r0, r4
   b6d72:	f7ff fe17 	bl	b69a4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6d76:	7929      	ldrb	r1, [r5, #4]
   b6d78:	7e22      	ldrb	r2, [r4, #24]
   b6d7a:	8a23      	ldrh	r3, [r4, #16]
   b6d7c:	fb01 3302 	mla	r3, r1, r2, r3
   b6d80:	e7b8      	b.n	b6cf4 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6d82 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6d82:	2901      	cmp	r1, #1
   b6d84:	bf38      	it	cc
   b6d86:	2101      	movcc	r1, #1
   b6d88:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6d8a:	7641      	strb	r1, [r0, #25]
}
   b6d8c:	4770      	bx	lr

000b6d8e <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6d8e:	b538      	push	{r3, r4, r5, lr}
   b6d90:	4604      	mov	r4, r0
   b6d92:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b6d94:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b6d96:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6d98:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b6d9a:	f002 fbab 	bl	b94f4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b6d9e:	7b20      	ldrb	r0, [r4, #12]
   b6da0:	2101      	movs	r1, #1
   b6da2:	f002 fbb8 	bl	b9516 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b6da6:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b6da8:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b6daa:	2101      	movs	r1, #1
   b6dac:	f002 fba2 	bl	b94f4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b6db0:	7b60      	ldrb	r0, [r4, #13]
   b6db2:	2100      	movs	r1, #0
   b6db4:	f002 fbaf 	bl	b9516 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b6db8:	4620      	mov	r0, r4
   b6dba:	bd38      	pop	{r3, r4, r5, pc}

000b6dbc <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b6dbc:	3901      	subs	r1, #1
   b6dbe:	b2c9      	uxtb	r1, r1
   b6dc0:	2908      	cmp	r1, #8
   b6dc2:	bf9a      	itte	ls
   b6dc4:	4b02      	ldrls	r3, [pc, #8]	; (b6dd0 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b6dc6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b6dca:	4802      	ldrhi	r0, [pc, #8]	; (b6dd4 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b6dcc:	4770      	bx	lr
   b6dce:	bf00      	nop
   b6dd0:	000bace4 	.word	0x000bace4
   b6dd4:	000babec 	.word	0x000babec

000b6dd8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b6dd8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6dda:	4c0b      	ldr	r4, [pc, #44]	; (b6e08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6ddc:	7821      	ldrb	r1, [r4, #0]
   b6dde:	f3bf 8f5b 	dmb	ish
   b6de2:	f011 0101 	ands.w	r1, r1, #1
   b6de6:	d10b      	bne.n	b6e00 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6de8:	4620      	mov	r0, r4
   b6dea:	9101      	str	r1, [sp, #4]
   b6dec:	f7fd f962 	bl	b40b4 <__cxa_guard_acquire>
   b6df0:	9901      	ldr	r1, [sp, #4]
   b6df2:	b128      	cbz	r0, b6e00 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6df4:	4805      	ldr	r0, [pc, #20]	; (b6e0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6df6:	f001 fd2f 	bl	b8858 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6dfa:	4620      	mov	r0, r4
   b6dfc:	f7fd f95f 	bl	b40be <__cxa_guard_release>
    }
   b6e00:	4802      	ldr	r0, [pc, #8]	; (b6e0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6e02:	b002      	add	sp, #8
   b6e04:	bd10      	pop	{r4, pc}
   b6e06:	bf00      	nop
   b6e08:	2003d468 	.word	0x2003d468
   b6e0c:	2003d46c 	.word	0x2003d46c

000b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b6e10:	b507      	push	{r0, r1, r2, lr}
   b6e12:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b6e14:	f7ff ffe0 	bl	b6dd8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6e18:	9901      	ldr	r1, [sp, #4]
    }
   b6e1a:	b003      	add	sp, #12
   b6e1c:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b6e20:	f001 bdc0 	b.w	b89a4 <_ZN8SPIClass8transferEh>

000b6e24 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b6e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e28:	4607      	mov	r7, r0
   b6e2a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b6e2e:	461e      	mov	r6, r3
	if (count == 0) {
   b6e30:	4615      	mov	r5, r2
   b6e32:	2a00      	cmp	r2, #0
   b6e34:	d042      	beq.n	b6ebc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6e36:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6e3a:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6e3c:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6e40:	2100      	movs	r1, #0
   b6e42:	f002 fb68 	bl	b9516 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6e46:	4648      	mov	r0, r9
   b6e48:	f7ff ffe2 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6e4c:	3d01      	subs	r5, #1
   b6e4e:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6e50:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b6e54:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6e58:	fa5f f48b 	uxtb.w	r4, fp
   b6e5c:	42a5      	cmp	r5, r4
   b6e5e:	d922      	bls.n	b6ea6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6e60:	b9dc      	cbnz	r4, b6e9a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6e62:	f1b8 0f00 	cmp.w	r8, #0
   b6e66:	d018      	beq.n	b6e9a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6e68:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6e6a:	b2d3      	uxtb	r3, r2
   b6e6c:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6e6e:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6e70:	d805      	bhi.n	b6e7e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b6e72:	fa0a f402 	lsl.w	r4, sl, r2
   b6e76:	430c      	orrs	r4, r1
   b6e78:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6e7a:	3201      	adds	r2, #1
   b6e7c:	e7f5      	b.n	b6e6a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6e7e:	4648      	mov	r0, r9
   b6e80:	9101      	str	r1, [sp, #4]
   b6e82:	f7ff ffc5 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b6e86:	7833      	ldrb	r3, [r6, #0]
   b6e88:	9901      	ldr	r1, [sp, #4]
   b6e8a:	4004      	ands	r4, r0
   b6e8c:	ea23 0301 	bic.w	r3, r3, r1
   b6e90:	431c      	orrs	r4, r3
   b6e92:	7034      	strb	r4, [r6, #0]
		index++;
   b6e94:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b6e98:	e7de      	b.n	b6e58 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b6e9a:	4648      	mov	r0, r9
   b6e9c:	f7ff ffb8 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6ea0:	f806 000b 	strb.w	r0, [r6, fp]
   b6ea4:	e7f6      	b.n	b6e94 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b6ea6:	2000      	movs	r0, #0
   b6ea8:	f7ff ffb2 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6eac:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6eae:	7b38      	ldrb	r0, [r7, #12]
   b6eb0:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b6eb2:	b003      	add	sp, #12
   b6eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6eb8:	f002 bb2d 	b.w	b9516 <digitalWrite>
} // End PCD_ReadRegister()
   b6ebc:	b003      	add	sp, #12
   b6ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b6ec2:	b538      	push	{r3, r4, r5, lr}
   b6ec4:	460c      	mov	r4, r1
   b6ec6:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6ec8:	2100      	movs	r1, #0
   b6eca:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6ecc:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6ed0:	f002 fb21 	bl	b9516 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6ed4:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b6ed8:	f7ff ff9a 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6edc:	2000      	movs	r0, #0
   b6ede:	f7ff ff97 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6ee2:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6ee4:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6ee6:	7b28      	ldrb	r0, [r5, #12]
   b6ee8:	f002 fb15 	bl	b9516 <digitalWrite>
} // End PCD_ReadRegister()
   b6eec:	4620      	mov	r0, r4
   b6eee:	bd38      	pop	{r3, r4, r5, pc}

000b6ef0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b6ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ef2:	460f      	mov	r7, r1
   b6ef4:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6ef6:	2100      	movs	r1, #0
   b6ef8:	7b00      	ldrb	r0, [r0, #12]
								) {
   b6efa:	4615      	mov	r5, r2
   b6efc:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6efe:	f002 fb0a 	bl	b9516 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b6f02:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b6f06:	f7ff ff83 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6f0a:	4425      	add	r5, r4
   b6f0c:	42ac      	cmp	r4, r5
   b6f0e:	d004      	beq.n	b6f1a <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b6f10:	f814 0b01 	ldrb.w	r0, [r4], #1
   b6f14:	f7ff ff7c 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6f18:	e7f8      	b.n	b6f0c <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6f1a:	7b30      	ldrb	r0, [r6, #12]
   b6f1c:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6f22:	f002 baf8 	b.w	b9516 <digitalWrite>

000b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b6f26:	b570      	push	{r4, r5, r6, lr}
   b6f28:	4604      	mov	r4, r0
   b6f2a:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6f2c:	7b00      	ldrb	r0, [r0, #12]
   b6f2e:	2100      	movs	r1, #0
								) {
   b6f30:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6f32:	f002 faf0 	bl	b9516 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b6f36:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b6f3a:	f7ff ff69 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b6f3e:	4628      	mov	r0, r5
   b6f40:	f7ff ff66 	bl	b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6f44:	7b20      	ldrb	r0, [r4, #12]
   b6f46:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6f4c:	f002 bae3 	b.w	b9516 <digitalWrite>

000b6f50 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6f50:	b570      	push	{r4, r5, r6, lr}
   b6f52:	4616      	mov	r6, r2
   b6f54:	4604      	mov	r4, r0
   b6f56:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6f58:	f7ff ffb3 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6f5c:	4330      	orrs	r0, r6
   b6f5e:	b2c2      	uxtb	r2, r0
   b6f60:	4629      	mov	r1, r5
   b6f62:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6f68:	f7ff bfdd 	b.w	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6f6c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6f6c:	b570      	push	{r4, r5, r6, lr}
   b6f6e:	4616      	mov	r6, r2
   b6f70:	4604      	mov	r4, r0
   b6f72:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6f74:	f7ff ffa5 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6f78:	ea20 0006 	bic.w	r0, r0, r6
   b6f7c:	b2c2      	uxtb	r2, r0
   b6f7e:	4629      	mov	r1, r5
   b6f80:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b6f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6f86:	f7ff bfce 	b.w	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6f8a <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b6f8a:	2208      	movs	r2, #8
   b6f8c:	2110      	movs	r1, #16
   b6f8e:	f7ff bfed 	b.w	b6f6c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b6f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f94:	4604      	mov	r4, r0
   b6f96:	4615      	mov	r5, r2
   b6f98:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6f9a:	2200      	movs	r2, #0
   b6f9c:	2102      	movs	r1, #2
					 ) {
   b6f9e:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6fa0:	f7ff ffc1 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b6fa4:	2204      	movs	r2, #4
   b6fa6:	210a      	movs	r1, #10
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff ffbc 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6fae:	2280      	movs	r2, #128	; 0x80
   b6fb0:	2114      	movs	r1, #20
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	f7ff ffcc 	bl	b6f50 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b6fb8:	462a      	mov	r2, r5
   b6fba:	463b      	mov	r3, r7
   b6fbc:	2112      	movs	r1, #18
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7ff ff96 	bl	b6ef0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b6fc4:	2203      	movs	r2, #3
   b6fc6:	2102      	movs	r1, #2
   b6fc8:	4620      	mov	r0, r4
   b6fca:	f7ff ffac 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b6fce:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b6fd2:	210a      	movs	r1, #10
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	f7ff ff74 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b6fda:	0743      	lsls	r3, r0, #29
   b6fdc:	d405      	bmi.n	b6fea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b6fde:	3d01      	subs	r5, #1
   b6fe0:	b2ad      	uxth	r5, r5
   b6fe2:	2d00      	cmp	r5, #0
   b6fe4:	d1f5      	bne.n	b6fd2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b6fe6:	2004      	movs	r0, #4
   b6fe8:	e00f      	b.n	b700a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b6fea:	2200      	movs	r2, #0
   b6fec:	2102      	movs	r1, #2
   b6fee:	4620      	mov	r0, r4
   b6ff0:	f7ff ff99 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6ff4:	2144      	movs	r1, #68	; 0x44
   b6ff6:	4620      	mov	r0, r4
   b6ff8:	f7ff ff63 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6ffc:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6ffe:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7000:	4620      	mov	r0, r4
   b7002:	f7ff ff5e 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7006:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b7008:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b700c <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b700c:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b700e:	220f      	movs	r2, #15
   b7010:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b7012:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7014:	f7ff ff87 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b7018:	2032      	movs	r0, #50	; 0x32
   b701a:	f001 feab 	bl	b8d74 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b701e:	2102      	movs	r1, #2
   b7020:	4620      	mov	r0, r4
   b7022:	f7ff ff4e 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7026:	06c3      	lsls	r3, r0, #27
   b7028:	d4f9      	bmi.n	b701e <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b702a:	bd10      	pop	{r4, pc}

000b702c <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b702c:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b702e:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b7030:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b7032:	f7ff ff46 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b7036:	f000 0303 	and.w	r3, r0, #3
   b703a:	2b03      	cmp	r3, #3
   b703c:	d008      	beq.n	b7050 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b703e:	f040 0203 	orr.w	r2, r0, #3
   b7042:	b2d2      	uxtb	r2, r2
   b7044:	4620      	mov	r0, r4
   b7046:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b7048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b704c:	f7ff bf6b 	b.w	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b7050:	bd10      	pop	{r4, pc}

000b7052 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b7052:	b510      	push	{r4, lr}
   b7054:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b7056:	7b40      	ldrb	r0, [r0, #13]
   b7058:	f002 fa76 	bl	b9548 <digitalRead>
   b705c:	bb48      	cbnz	r0, b70b2 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b705e:	7b60      	ldrb	r0, [r4, #13]
   b7060:	2101      	movs	r1, #1
   b7062:	f002 fa58 	bl	b9516 <digitalWrite>
		delay(50);
   b7066:	2032      	movs	r0, #50	; 0x32
   b7068:	f001 fe84 	bl	b8d74 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b706c:	4620      	mov	r0, r4
   b706e:	2280      	movs	r2, #128	; 0x80
   b7070:	2154      	movs	r1, #84	; 0x54
   b7072:	f7ff ff58 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b7076:	4620      	mov	r0, r4
   b7078:	22a9      	movs	r2, #169	; 0xa9
   b707a:	2156      	movs	r1, #86	; 0x56
   b707c:	f7ff ff53 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b7080:	4620      	mov	r0, r4
   b7082:	2203      	movs	r2, #3
   b7084:	2158      	movs	r1, #88	; 0x58
   b7086:	f7ff ff4e 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b708a:	4620      	mov	r0, r4
   b708c:	22e8      	movs	r2, #232	; 0xe8
   b708e:	215a      	movs	r1, #90	; 0x5a
   b7090:	f7ff ff49 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b7094:	4620      	mov	r0, r4
   b7096:	2240      	movs	r2, #64	; 0x40
   b7098:	212a      	movs	r1, #42	; 0x2a
   b709a:	f7ff ff44 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b709e:	4620      	mov	r0, r4
   b70a0:	223d      	movs	r2, #61	; 0x3d
   b70a2:	2122      	movs	r1, #34	; 0x22
   b70a4:	f7ff ff3f 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b70a8:	4620      	mov	r0, r4
} // End PCD_Init()
   b70aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b70ae:	f7ff bfbd 	b.w	b702c <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b70b2:	4620      	mov	r0, r4
   b70b4:	f7ff ffaa 	bl	b700c <_ZN7MFRC5229PCD_ResetEv>
   b70b8:	e7d8      	b.n	b706c <_ZN7MFRC5228PCD_InitEv+0x1a>

000b70ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b70ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70be:	b089      	sub	sp, #36	; 0x24
   b70c0:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b70c4:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b70c8:	9203      	str	r2, [sp, #12]
   b70ca:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b70ce:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b70d2:	9204      	str	r2, [sp, #16]
   b70d4:	4604      	mov	r4, r0
   b70d6:	468a      	mov	sl, r1
   b70d8:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b70da:	f1b9 0f00 	cmp.w	r9, #0
   b70de:	d03e      	beq.n	b715e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b70e0:	f899 8000 	ldrb.w	r8, [r9]
   b70e4:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b70e6:	2200      	movs	r2, #0
   b70e8:	2102      	movs	r1, #2
   b70ea:	4620      	mov	r0, r4
   b70ec:	f7ff ff1b 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b70f0:	227f      	movs	r2, #127	; 0x7f
   b70f2:	2108      	movs	r1, #8
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff ff16 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b70fa:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b70fe:	2280      	movs	r2, #128	; 0x80
   b7100:	2114      	movs	r1, #20
   b7102:	4620      	mov	r0, r4
   b7104:	f7ff ff24 	bl	b6f50 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7108:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b710c:	9b05      	ldr	r3, [sp, #20]
   b710e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b7112:	2112      	movs	r1, #18
   b7114:	4620      	mov	r0, r4
   b7116:	f7ff feeb 	bl	b6ef0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b711a:	4642      	mov	r2, r8
   b711c:	211a      	movs	r1, #26
   b711e:	4620      	mov	r0, r4
   b7120:	f7ff ff01 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b7124:	4652      	mov	r2, sl
   b7126:	2102      	movs	r1, #2
   b7128:	4620      	mov	r0, r4
   b712a:	f7ff fefc 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b712e:	f1ba 0f0c 	cmp.w	sl, #12
   b7132:	d104      	bne.n	b713e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b7134:	2280      	movs	r2, #128	; 0x80
   b7136:	211a      	movs	r1, #26
   b7138:	4620      	mov	r0, r4
   b713a:	f7ff ff09 	bl	b6f50 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b713e:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b7142:	2108      	movs	r1, #8
   b7144:	4620      	mov	r0, r4
   b7146:	f7ff febc 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b714a:	9b03      	ldr	r3, [sp, #12]
   b714c:	4218      	tst	r0, r3
   b714e:	d108      	bne.n	b7162 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b7150:	07c3      	lsls	r3, r0, #31
   b7152:	d402      	bmi.n	b715a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b7154:	f1b8 0801 	subs.w	r8, r8, #1
   b7158:	d1f3      	bne.n	b7142 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b715a:	2004      	movs	r0, #4
   b715c:	e04d      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b715e:	46c8      	mov	r8, r9
   b7160:	e7c0      	b.n	b70e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b7162:	210c      	movs	r1, #12
   b7164:	4620      	mov	r0, r4
   b7166:	f7ff feac 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b716a:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b716e:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b7170:	d146      	bne.n	b7200 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b7172:	b1dd      	cbz	r5, b71ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b7174:	b1d6      	cbz	r6, b71ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b7176:	2114      	movs	r1, #20
   b7178:	4620      	mov	r0, r4
   b717a:	f7ff fea2 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b717e:	7833      	ldrb	r3, [r6, #0]
   b7180:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b7182:	4602      	mov	r2, r0
		if (n > *backLen) {
   b7184:	d33e      	bcc.n	b7204 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b7186:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b7188:	462b      	mov	r3, r5
   b718a:	2112      	movs	r1, #18
   b718c:	4620      	mov	r0, r4
   b718e:	f8cd b000 	str.w	fp, [sp]
   b7192:	f7ff fe47 	bl	b6e24 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b7196:	2118      	movs	r1, #24
   b7198:	4620      	mov	r0, r4
   b719a:	f7ff fe92 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b719e:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b71a2:	f1b9 0f00 	cmp.w	r9, #0
   b71a6:	d001      	beq.n	b71ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b71a8:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b71ac:	f018 0f08 	tst.w	r8, #8
   b71b0:	d12a      	bne.n	b7208 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b71b2:	b35d      	cbz	r5, b720c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b71b4:	b356      	cbz	r6, b720c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b71b6:	9b04      	ldr	r3, [sp, #16]
   b71b8:	b343      	cbz	r3, b720c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b71ba:	7832      	ldrb	r2, [r6, #0]
   b71bc:	2a01      	cmp	r2, #1
   b71be:	d103      	bne.n	b71c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b71c0:	2f04      	cmp	r7, #4
   b71c2:	d125      	bne.n	b7210 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b71c4:	2009      	movs	r0, #9
   b71c6:	e018      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b71c8:	d922      	bls.n	b7210 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b71ca:	bb0f      	cbnz	r7, b7210 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b71cc:	3a02      	subs	r2, #2
   b71ce:	ab07      	add	r3, sp, #28
   b71d0:	b2d2      	uxtb	r2, r2
   b71d2:	4629      	mov	r1, r5
   b71d4:	4620      	mov	r0, r4
   b71d6:	f7ff fedc 	bl	b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b71da:	2801      	cmp	r0, #1
   b71dc:	d10d      	bne.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b71de:	7833      	ldrb	r3, [r6, #0]
   b71e0:	441d      	add	r5, r3
   b71e2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b71e6:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b71ea:	429a      	cmp	r2, r3
   b71ec:	d110      	bne.n	b7210 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b71ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b71f2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b71f6:	429a      	cmp	r2, r3
   b71f8:	d10a      	bne.n	b7210 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b71fa:	b009      	add	sp, #36	; 0x24
   b71fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b7200:	2002      	movs	r0, #2
   b7202:	e7fa      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b7204:	2005      	movs	r0, #5
   b7206:	e7f8      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b7208:	2003      	movs	r0, #3
   b720a:	e7f6      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b720c:	2001      	movs	r0, #1
   b720e:	e7f4      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b7210:	2008      	movs	r0, #8
   b7212:	e7f2      	b.n	b71fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b7214 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b7214:	b510      	push	{r4, lr}
   b7216:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b7218:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b721c:	9405      	str	r4, [sp, #20]
   b721e:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b7222:	9404      	str	r4, [sp, #16]
   b7224:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b7226:	9403      	str	r4, [sp, #12]
   b7228:	9c08      	ldr	r4, [sp, #32]
   b722a:	9200      	str	r2, [sp, #0]
   b722c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b7230:	2230      	movs	r2, #48	; 0x30
   b7232:	460b      	mov	r3, r1
   b7234:	210c      	movs	r1, #12
   b7236:	f7ff ff40 	bl	b70ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b723a:	b006      	add	sp, #24
   b723c:	bd10      	pop	{r4, pc}

000b723e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b723e:	b570      	push	{r4, r5, r6, lr}
   b7240:	b088      	sub	sp, #32
   b7242:	4606      	mov	r6, r0
   b7244:	461c      	mov	r4, r3
   b7246:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b724a:	4615      	mov	r5, r2
   b724c:	b31a      	cbz	r2, b7296 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b724e:	781b      	ldrb	r3, [r3, #0]
   b7250:	2b01      	cmp	r3, #1
   b7252:	d920      	bls.n	b7296 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b7254:	2280      	movs	r2, #128	; 0x80
   b7256:	211c      	movs	r1, #28
   b7258:	f7ff fe88 	bl	b6f6c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b725c:	2307      	movs	r3, #7
   b725e:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b7262:	2300      	movs	r3, #0
   b7264:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7268:	f10d 031f 	add.w	r3, sp, #31
   b726c:	e9cd 4300 	strd	r4, r3, [sp]
   b7270:	2201      	movs	r2, #1
   b7272:	462b      	mov	r3, r5
   b7274:	f10d 0117 	add.w	r1, sp, #23
   b7278:	4630      	mov	r0, r6
   b727a:	f7ff ffcb 	bl	b7214 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b727e:	2801      	cmp	r0, #1
   b7280:	d107      	bne.n	b7292 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b7282:	7823      	ldrb	r3, [r4, #0]
   b7284:	2b02      	cmp	r3, #2
   b7286:	d108      	bne.n	b729a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b7288:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b728c:	2b00      	cmp	r3, #0
   b728e:	bf18      	it	ne
   b7290:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b7292:	b008      	add	sp, #32
   b7294:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b7296:	2005      	movs	r0, #5
   b7298:	e7fb      	b.n	b7292 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b729a:	2002      	movs	r0, #2
   b729c:	e7f9      	b.n	b7292 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b729e <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b729e:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b72a0:	460a      	mov	r2, r1
   b72a2:	2126      	movs	r1, #38	; 0x26
   b72a4:	f7ff bfcb 	b.w	b723e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b72a8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b72a8:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b72aa:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b72ac:	f10d 0203 	add.w	r2, sp, #3
   b72b0:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b72b2:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b72b6:	f7ff fff2 	bl	b729e <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b72ba:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b72be:	1e43      	subs	r3, r0, #1
   b72c0:	4258      	negs	r0, r3
   b72c2:	4158      	adcs	r0, r3
   b72c4:	b003      	add	sp, #12
   b72c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b72ca <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b72ca:	b570      	push	{r4, r5, r6, lr}
   b72cc:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b72ce:	2350      	movs	r3, #80	; 0x50
   b72d0:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b72d4:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b72d6:	f10d 0316 	add.w	r3, sp, #22
   b72da:	2202      	movs	r2, #2
   b72dc:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b72de:	4606      	mov	r6, r0
	buffer[1] = 0;
   b72e0:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b72e4:	f7ff fe55 	bl	b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b72e8:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b72ea:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b72ec:	d10f      	bne.n	b730e <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b72ee:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b72f2:	e9cd 4400 	strd	r4, r4, [sp]
   b72f6:	4623      	mov	r3, r4
   b72f8:	2204      	movs	r2, #4
   b72fa:	a905      	add	r1, sp, #20
   b72fc:	4630      	mov	r0, r6
   b72fe:	f7ff ff89 	bl	b7214 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b7302:	2804      	cmp	r0, #4
   b7304:	d003      	beq.n	b730e <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b7306:	2801      	cmp	r0, #1
   b7308:	bf14      	ite	ne
   b730a:	4605      	movne	r5, r0
   b730c:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b730e:	4628      	mov	r0, r5
   b7310:	b006      	add	sp, #24
   b7312:	bd70      	pop	{r4, r5, r6, pc}

000b7314 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b7314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7316:	4606      	mov	r6, r0
   b7318:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b731a:	4614      	mov	r4, r2
   b731c:	b1ca      	cbz	r2, b7352 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b731e:	781b      	ldrb	r3, [r3, #0]
   b7320:	2b11      	cmp	r3, #17
   b7322:	d916      	bls.n	b7352 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b7324:	2330      	movs	r3, #48	; 0x30
   b7326:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b7328:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b732a:	1c93      	adds	r3, r2, #2
   b732c:	4621      	mov	r1, r4
   b732e:	2202      	movs	r2, #2
   b7330:	f7ff fe2f 	bl	b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b7334:	2801      	cmp	r0, #1
   b7336:	d10a      	bne.n	b734e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b7338:	2300      	movs	r3, #0
   b733a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b733e:	9003      	str	r0, [sp, #12]
   b7340:	9500      	str	r5, [sp, #0]
   b7342:	4623      	mov	r3, r4
   b7344:	2204      	movs	r2, #4
   b7346:	4621      	mov	r1, r4
   b7348:	4630      	mov	r0, r6
   b734a:	f7ff ff63 	bl	b7214 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b734e:	b004      	add	sp, #16
   b7350:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b7352:	2005      	movs	r0, #5
   b7354:	e7fb      	b.n	b734e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b7356 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b7356:	b510      	push	{r4, lr}
   b7358:	b08a      	sub	sp, #40	; 0x28
   b735a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b735c:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b7360:	681a      	ldr	r2, [r3, #0]
   b7362:	889b      	ldrh	r3, [r3, #4]
   b7364:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b7368:	7863      	ldrb	r3, [r4, #1]
   b736a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b736e:	78a3      	ldrb	r3, [r4, #2]
   b7370:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b7374:	78e3      	ldrb	r3, [r4, #3]
   b7376:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b737a:	7923      	ldrb	r3, [r4, #4]
   b737c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b7380:	2300      	movs	r3, #0
   b7382:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b7386:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b738a:	9301      	str	r3, [sp, #4]
   b738c:	230c      	movs	r3, #12
	sendData[0] = command;
   b738e:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b7392:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b7396:	9300      	str	r3, [sp, #0]
   b7398:	2210      	movs	r2, #16
   b739a:	ab07      	add	r3, sp, #28
   b739c:	210e      	movs	r1, #14
   b739e:	f7ff fe8c 	bl	b70ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b73a2:	b00a      	add	sp, #40	; 0x28
   b73a4:	bd10      	pop	{r4, pc}

000b73a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b73a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b73aa:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b73ac:	b08b      	sub	sp, #44	; 0x2c
   b73ae:	4682      	mov	sl, r0
   b73b0:	460f      	mov	r7, r1
   b73b2:	4690      	mov	r8, r2
	if (validBits > 80) {
   b73b4:	f200 8140 	bhi.w	b7638 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b73b8:	2280      	movs	r2, #128	; 0x80
   b73ba:	211c      	movs	r1, #28
   b73bc:	f7ff fdd6 	bl	b6f6c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b73c0:	2393      	movs	r3, #147	; 0x93
   b73c2:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b73c6:	f1b8 0f00 	cmp.w	r8, #0
   b73ca:	f000 80bc 	beq.w	b7546 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b73ce:	783c      	ldrb	r4, [r7, #0]
   b73d0:	2c04      	cmp	r4, #4
   b73d2:	bf94      	ite	ls
   b73d4:	2300      	movls	r3, #0
   b73d6:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b73d8:	2501      	movs	r5, #1
   b73da:	2600      	movs	r6, #0
   b73dc:	e00b      	b.n	b73f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b73de:	2395      	movs	r3, #149	; 0x95
   b73e0:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b73e4:	f1b8 0f00 	cmp.w	r8, #0
   b73e8:	f000 80af 	beq.w	b754a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b73ec:	783c      	ldrb	r4, [r7, #0]
   b73ee:	2c07      	cmp	r4, #7
   b73f0:	bf94      	ite	ls
   b73f2:	2300      	movls	r3, #0
   b73f4:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b73f6:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b73fa:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b73fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b7400:	2b00      	cmp	r3, #0
   b7402:	f000 80a4 	beq.w	b754e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b7406:	2288      	movs	r2, #136	; 0x88
   b7408:	f88d 201e 	strb.w	r2, [sp, #30]
   b740c:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b740e:	f014 0207 	ands.w	r2, r4, #7
   b7412:	bf18      	it	ne
   b7414:	2201      	movne	r2, #1
   b7416:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b741a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b741e:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b7420:	d01d      	beq.n	b745e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b7422:	2b00      	cmp	r3, #0
   b7424:	bf14      	ite	ne
   b7426:	f04f 0903 	movne.w	r9, #3
   b742a:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b742e:	f106 0c01 	add.w	ip, r6, #1
   b7432:	4591      	cmp	r9, r2
   b7434:	bf94      	ite	ls
   b7436:	eb01 0e09 	addls.w	lr, r1, r9
   b743a:	eb01 0e02 	addhi.w	lr, r1, r2
   b743e:	fa57 fc8c 	uxtab	ip, r7, ip
   b7442:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b7446:	460a      	mov	r2, r1
   b7448:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b744c:	3101      	adds	r1, #1
   b744e:	b2c9      	uxtb	r1, r1
   b7450:	445a      	add	r2, fp
   b7452:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b7456:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b745a:	4571      	cmp	r1, lr
   b745c:	d1f3      	bne.n	b7446 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b745e:	b10b      	cbz	r3, b7464 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b7460:	3008      	adds	r0, #8
   b7462:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b7464:	2c1f      	cmp	r4, #31
   b7466:	dd74      	ble.n	b7552 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b7468:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b746c:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b7470:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b7474:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7478:	4053      	eors	r3, r2
   b747a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b747e:	4053      	eors	r3, r2
   b7480:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b7484:	4053      	eors	r3, r2
   b7486:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b748a:	2207      	movs	r2, #7
   b748c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b7490:	a907      	add	r1, sp, #28
   b7492:	4650      	mov	r0, sl
   b7494:	f7ff fd7d 	bl	b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b7498:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b749a:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b749c:	f040 80c8 	bne.w	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b74a0:	2300      	movs	r3, #0
   b74a2:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b74a6:	2303      	movs	r3, #3
   b74a8:	f88d 301b 	strb.w	r3, [sp, #27]
   b74ac:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b74ae:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b74b2:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b74b6:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b74ba:	9305      	str	r3, [sp, #20]
   b74bc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b74c0:	b2d2      	uxtb	r2, r2
   b74c2:	211a      	movs	r1, #26
   b74c4:	4650      	mov	r0, sl
   b74c6:	f7ff fd2e 	bl	b6f26 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b74ca:	9b05      	ldr	r3, [sp, #20]
   b74cc:	9302      	str	r3, [sp, #8]
   b74ce:	f10d 031a 	add.w	r3, sp, #26
   b74d2:	2200      	movs	r2, #0
   b74d4:	9301      	str	r3, [sp, #4]
   b74d6:	f10d 031b 	add.w	r3, sp, #27
   b74da:	9203      	str	r2, [sp, #12]
   b74dc:	9300      	str	r3, [sp, #0]
   b74de:	464a      	mov	r2, r9
   b74e0:	465b      	mov	r3, fp
   b74e2:	a907      	add	r1, sp, #28
   b74e4:	4650      	mov	r0, sl
   b74e6:	f7ff fe95 	bl	b7214 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b74ea:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b74ec:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b74ee:	d14c      	bne.n	b758a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b74f0:	211c      	movs	r1, #28
   b74f2:	4650      	mov	r0, sl
   b74f4:	f7ff fce5 	bl	b6ec2 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b74f8:	0681      	lsls	r1, r0, #26
   b74fa:	f100 8099 	bmi.w	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b74fe:	f010 001f 	ands.w	r0, r0, #31
   b7502:	bf08      	it	eq
   b7504:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b7506:	42a0      	cmp	r0, r4
   b7508:	f340 8087 	ble.w	b761a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b750c:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b750e:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b7512:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7514:	f013 0307 	ands.w	r3, r3, #7
   b7518:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b751c:	bf18      	it	ne
   b751e:	2301      	movne	r3, #1
   b7520:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b7522:	4418      	add	r0, r3
   b7524:	ab0a      	add	r3, sp, #40	; 0x28
   b7526:	4418      	add	r0, r3
   b7528:	2301      	movs	r3, #1
   b752a:	fa03 f202 	lsl.w	r2, r3, r2
   b752e:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b7532:	4313      	orrs	r3, r2
   b7534:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b7538:	e794      	b.n	b7464 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b753a:	2397      	movs	r3, #151	; 0x97
   b753c:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b7540:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b7542:	4623      	mov	r3, r4
				break;
   b7544:	e757      	b.n	b73f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b7546:	4643      	mov	r3, r8
   b7548:	e746      	b.n	b73d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b754a:	4643      	mov	r3, r8
   b754c:	e753      	b.n	b73f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b754e:	2102      	movs	r1, #2
   b7550:	e75d      	b.n	b740e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b7552:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b7554:	3302      	adds	r3, #2
   b7556:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b7558:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b755c:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b7560:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b7564:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b7568:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b756c:	bf18      	it	ne
   b756e:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b7572:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7574:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b7576:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b757a:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b757e:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b7582:	f88d 301b 	strb.w	r3, [sp, #27]
   b7586:	9404      	str	r4, [sp, #16]
   b7588:	e795      	b.n	b74b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b758a:	2801      	cmp	r0, #1
   b758c:	d150      	bne.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b758e:	9b04      	ldr	r3, [sp, #16]
   b7590:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b7592:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b7596:	f77f af67 	ble.w	b7468 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b759a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b759e:	2b88      	cmp	r3, #136	; 0x88
   b75a0:	d13e      	bne.n	b7620 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b75a2:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b75a4:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b75a6:	3601      	adds	r6, #1
   b75a8:	441a      	add	r2, r3
   b75aa:	fa57 f686 	uxtab	r6, r7, r6
   b75ae:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b75b0:	4619      	mov	r1, r3
   b75b2:	a80a      	add	r0, sp, #40	; 0x28
   b75b4:	3301      	adds	r3, #1
   b75b6:	4401      	add	r1, r0
   b75b8:	b2db      	uxtb	r3, r3
   b75ba:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b75be:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b75c2:	4293      	cmp	r3, r2
   b75c4:	d1f4      	bne.n	b75b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b75c6:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b75ca:	2e03      	cmp	r6, #3
   b75cc:	d137      	bne.n	b763e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b75ce:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b75d2:	bba4      	cbnz	r4, b763e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b75d4:	f10d 031e 	add.w	r3, sp, #30
   b75d8:	2201      	movs	r2, #1
   b75da:	4659      	mov	r1, fp
   b75dc:	4650      	mov	r0, sl
   b75de:	f7ff fcd8 	bl	b6f92 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b75e2:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b75e4:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b75e6:	d123      	bne.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b75e8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b75ec:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b75f0:	429a      	cmp	r2, r3
   b75f2:	d127      	bne.n	b7644 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b75f4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b75f8:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b75fc:	429a      	cmp	r2, r3
   b75fe:	d121      	bne.n	b7644 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b7600:	f89b 3000 	ldrb.w	r3, [fp]
   b7604:	075a      	lsls	r2, r3, #29
   b7606:	d50e      	bpl.n	b7626 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b7608:	3501      	adds	r5, #1
   b760a:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b760c:	2d03      	cmp	r5, #3
   b760e:	d094      	beq.n	b753a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b7610:	2d04      	cmp	r5, #4
   b7612:	d002      	beq.n	b761a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b7614:	2d02      	cmp	r5, #2
   b7616:	f43f aee2 	beq.w	b73de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b761a:	f04f 0906 	mov.w	r9, #6
   b761e:	e007      	b.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b7620:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7622:	2204      	movs	r2, #4
   b7624:	e7bf      	b.n	b75a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b7626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b762a:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b762c:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b762e:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b7630:	4648      	mov	r0, r9
   b7632:	b00b      	add	sp, #44	; 0x2c
   b7634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b7638:	f04f 0907 	mov.w	r9, #7
   b763c:	e7f8      	b.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b763e:	f04f 0902 	mov.w	r9, #2
   b7642:	e7f5      	b.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b7644:	f04f 0908 	mov.w	r9, #8
   b7648:	e7f2      	b.n	b7630 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b764a <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b764a:	b508      	push	{r3, lr}
   b764c:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b764e:	2200      	movs	r2, #0
   b7650:	f7ff fea9 	bl	b73a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b7654:	1e43      	subs	r3, r0, #1
   b7656:	4258      	negs	r0, r3
   b7658:	4158      	adcs	r0, r3
   b765a:	bd08      	pop	{r3, pc}

000b765c <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b765c:	6001      	str	r1, [r0, #0]
}
   b765e:	4770      	bx	lr

000b7660 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b7660:	b510      	push	{r4, lr}
   b7662:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b7664:	2101      	movs	r1, #1
   b7666:	8800      	ldrh	r0, [r0, #0]
   b7668:	f001 ff44 	bl	b94f4 <pinMode>
	digitalWrite(_pin, LOW);
   b766c:	8820      	ldrh	r0, [r4, #0]
   b766e:	2100      	movs	r1, #0
   b7670:	f001 ff51 	bl	b9516 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7674:	2002      	movs	r0, #2
   b7676:	f000 fe77 	bl	b8368 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b767a:	8820      	ldrh	r0, [r4, #0]
   b767c:	2101      	movs	r1, #1
   b767e:	f001 ff4a 	bl	b9516 <digitalWrite>
   b7682:	2005      	movs	r0, #5
   b7684:	f000 fe70 	bl	b8368 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b7688:	8820      	ldrh	r0, [r4, #0]
   b768a:	2100      	movs	r1, #0
   b768c:	f001 ff43 	bl	b9516 <digitalWrite>
	pinMode(_pin,INPUT);
   b7690:	8820      	ldrh	r0, [r4, #0]
   b7692:	2100      	movs	r1, #0
   b7694:	f001 ff2e 	bl	b94f4 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b7698:	8820      	ldrh	r0, [r4, #0]
   b769a:	2101      	movs	r1, #1
   b769c:	f001 ff7e 	bl	b959c <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b76a0:	233a      	movs	r3, #58	; 0x3a
   b76a2:	fb90 f0f3 	sdiv	r0, r0, r3
   b76a6:	bd10      	pop	{r4, pc}

000b76a8 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b76a8:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b76aa:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b76ac:	2301      	movs	r3, #1
	_pin = pin;
   b76ae:	7181      	strb	r1, [r0, #6]
	_type = type;
   b76b0:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b76b2:	7403      	strb	r3, [r0, #16]
}
   b76b4:	bd10      	pop	{r4, pc}

000b76b6 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b76b6:	b510      	push	{r4, lr}
   b76b8:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b76ba:	2100      	movs	r1, #0
   b76bc:	7980      	ldrb	r0, [r0, #6]
   b76be:	f001 ff19 	bl	b94f4 <pinMode>
	digitalWrite(_pin, HIGH);
   b76c2:	79a0      	ldrb	r0, [r4, #6]
   b76c4:	2101      	movs	r1, #1
   b76c6:	f001 ff26 	bl	b9516 <digitalWrite>
	_lastreadtime = 0;
   b76ca:	2300      	movs	r3, #0
   b76cc:	60e3      	str	r3, [r4, #12]
}
   b76ce:	bd10      	pop	{r4, pc}

000b76d0 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b76d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b76d4:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b76d6:	f000 fe4f 	bl	b8378 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b76da:	68e3      	ldr	r3, [r4, #12]
   b76dc:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b76de:	bf84      	itt	hi
   b76e0:	2300      	movhi	r3, #0
   b76e2:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b76e4:	7c23      	ldrb	r3, [r4, #16]
   b76e6:	b923      	cbnz	r3, b76f2 <_ZN3DHT4readEv+0x22>
   b76e8:	68e3      	ldr	r3, [r4, #12]
   b76ea:	1ac0      	subs	r0, r0, r3
   b76ec:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b76f0:	d367      	bcc.n	b77c2 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b76f2:	2500      	movs	r5, #0
   b76f4:	7425      	strb	r5, [r4, #16]
   b76f6:	f000 fe3f 	bl	b8378 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b76fa:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b76fc:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b76fe:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b7700:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7702:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b7704:	f001 ff07 	bl	b9516 <digitalWrite>
	delay(250);
   b7708:	20fa      	movs	r0, #250	; 0xfa
   b770a:	f001 fb33 	bl	b8d74 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b770e:	79a0      	ldrb	r0, [r4, #6]
   b7710:	2101      	movs	r1, #1
   b7712:	f001 feef 	bl	b94f4 <pinMode>
	digitalWrite(_pin, LOW);
   b7716:	4629      	mov	r1, r5
   b7718:	79a0      	ldrb	r0, [r4, #6]
   b771a:	f001 fefc 	bl	b9516 <digitalWrite>
	delay(20);
   b771e:	2014      	movs	r0, #20
   b7720:	f001 fb28 	bl	b8d74 <delay>
	noInterrupts();
   b7724:	f001 fce2 	bl	b90ec <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b7728:	2101      	movs	r1, #1
   b772a:	79a0      	ldrb	r0, [r4, #6]
   b772c:	f001 fef3 	bl	b9516 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7730:	2028      	movs	r0, #40	; 0x28
   b7732:	f000 fe19 	bl	b8368 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b7736:	79a0      	ldrb	r0, [r4, #6]
   b7738:	4629      	mov	r1, r5
   b773a:	f001 fedb 	bl	b94f4 <pinMode>
	uint8_t j = 0, i;
   b773e:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b7740:	2701      	movs	r7, #1
   b7742:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b7746:	79a0      	ldrb	r0, [r4, #6]
   b7748:	f001 fefe 	bl	b9548 <digitalRead>
   b774c:	42b8      	cmp	r0, r7
   b774e:	fa5f f988 	uxtb.w	r9, r8
   b7752:	d108      	bne.n	b7766 <_ZN3DHT4readEv+0x96>
   b7754:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b7756:	f108 0801 	add.w	r8, r8, #1
   b775a:	f000 fe05 	bl	b8368 <HAL_Delay_Microseconds>
   b775e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7762:	d1f0      	bne.n	b7746 <_ZN3DHT4readEv+0x76>
   b7764:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b7766:	79a0      	ldrb	r0, [r4, #6]
   b7768:	f001 feee 	bl	b9548 <digitalRead>

		if (counter == 255) break;
   b776c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b7770:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b7772:	d014      	beq.n	b779e <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b7774:	2d03      	cmp	r5, #3
   b7776:	d90e      	bls.n	b7796 <_ZN3DHT4readEv+0xc6>
   b7778:	07ea      	lsls	r2, r5, #31
   b777a:	d40c      	bmi.n	b7796 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b777c:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b777e:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b7780:	5ca3      	ldrb	r3, [r4, r2]
   b7782:	005b      	lsls	r3, r3, #1
   b7784:	b2db      	uxtb	r3, r3
   b7786:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b7788:	7a21      	ldrb	r1, [r4, #8]
   b778a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b778c:	bf3c      	itt	cc
   b778e:	f043 0301 	orrcc.w	r3, r3, #1
   b7792:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b7794:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b7796:	3501      	adds	r5, #1
   b7798:	b2ed      	uxtb	r5, r5
   b779a:	2d55      	cmp	r5, #85	; 0x55
   b779c:	d1d1      	bne.n	b7742 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b779e:	f001 fca7 	bl	b90f0 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b77a2:	2e27      	cmp	r6, #39	; 0x27
   b77a4:	d90f      	bls.n	b77c6 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b77a6:	7863      	ldrb	r3, [r4, #1]
   b77a8:	7820      	ldrb	r0, [r4, #0]
   b77aa:	4418      	add	r0, r3
   b77ac:	78a3      	ldrb	r3, [r4, #2]
   b77ae:	4418      	add	r0, r3
   b77b0:	78e3      	ldrb	r3, [r4, #3]
   b77b2:	4418      	add	r0, r3
   b77b4:	7923      	ldrb	r3, [r4, #4]
   b77b6:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b77b8:	1ac3      	subs	r3, r0, r3
   b77ba:	4258      	negs	r0, r3
   b77bc:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b77be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b77c2:	2001      	movs	r0, #1
   b77c4:	e7fb      	b.n	b77be <_ZN3DHT4readEv+0xee>
	return false;
   b77c6:	2000      	movs	r0, #0
   b77c8:	e7f9      	b.n	b77be <_ZN3DHT4readEv+0xee>
	...

000b77cc <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b77cc:	b510      	push	{r4, lr}
   b77ce:	4604      	mov	r4, r0
	if (read()) {
   b77d0:	f7ff ff7e 	bl	b76d0 <_ZN3DHT4readEv>
   b77d4:	b320      	cbz	r0, b7820 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b77d6:	79e3      	ldrb	r3, [r4, #7]
   b77d8:	2b0b      	cmp	r3, #11
   b77da:	d01b      	beq.n	b7814 <_ZN3DHT15readTemperatureEv+0x48>
   b77dc:	3b15      	subs	r3, #21
   b77de:	2b01      	cmp	r3, #1
   b77e0:	d81e      	bhi.n	b7820 <_ZN3DHT15readTemperatureEv+0x54>
   b77e2:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b77e4:	eddf 6a10 	vldr	s13, [pc, #64]	; b7828 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b77e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b77ec:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b77f0:	78e2      	ldrb	r2, [r4, #3]
   b77f2:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b77f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b77fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b77fe:	061b      	lsls	r3, r3, #24
				f += data[3];
   b7800:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b7804:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b7808:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b780c:	d507      	bpl.n	b781e <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b780e:	eeb1 0a40 	vneg.f32	s0, s0
   b7812:	e004      	b.n	b781e <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b7814:	78a3      	ldrb	r3, [r4, #2]
   b7816:	ee00 3a10 	vmov	s0, r3
   b781a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b781e:	bd10      	pop	{r4, pc}
		switch (_type) {
   b7820:	ed9f 0a02 	vldr	s0, [pc, #8]	; b782c <_ZN3DHT15readTemperatureEv+0x60>
   b7824:	e7fb      	b.n	b781e <_ZN3DHT15readTemperatureEv+0x52>
   b7826:	bf00      	nop
   b7828:	43800000 	.word	0x43800000
   b782c:	7fc00000 	.word	0x7fc00000

000b7830 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b7830:	f7ff bfcc 	b.w	b77cc <_ZN3DHT15readTemperatureEv>

000b7834 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7834:	b510      	push	{r4, lr}
   b7836:	4b04      	ldr	r3, [pc, #16]	; (b7848 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7838:	6003      	str	r3, [r0, #0]
   b783a:	4604      	mov	r4, r0
  if(buffer) {
   b783c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b783e:	b108      	cbz	r0, b7844 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7840:	f000 ff8e 	bl	b8760 <free>
    buffer = NULL;
  }
}
   b7844:	4620      	mov	r0, r4
   b7846:	bd10      	pop	{r4, pc}
   b7848:	000bb304 	.word	0x000bb304

000b784c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b784c:	b510      	push	{r4, lr}
   b784e:	4604      	mov	r4, r0
}
   b7850:	f7ff fff0 	bl	b7834 <_ZN16Adafruit_SSD1306D1Ev>
   b7854:	4620      	mov	r0, r4
   b7856:	2150      	movs	r1, #80	; 0x50
   b7858:	f7fc fc1d 	bl	b4096 <_ZdlPvj>
   b785c:	4620      	mov	r0, r4
   b785e:	bd10      	pop	{r4, pc}

000b7860 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7860:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7862:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7864:	db4b      	blt.n	b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7866:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b786a:	428c      	cmp	r4, r1
   b786c:	dd47      	ble.n	b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b786e:	2a00      	cmp	r2, #0
   b7870:	db45      	blt.n	b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7872:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7876:	4294      	cmp	r4, r2
   b7878:	dd41      	ble.n	b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b787a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b787c:	2c02      	cmp	r4, #2
   b787e:	d01f      	beq.n	b78c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7880:	2c03      	cmp	r4, #3
   b7882:	d026      	beq.n	b78d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7884:	2c01      	cmp	r4, #1
   b7886:	d104      	bne.n	b7892 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7888:	8904      	ldrh	r4, [r0, #8]
   b788a:	43d2      	mvns	r2, r2
   b788c:	4414      	add	r4, r2
      break;
   b788e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7890:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7892:	2b01      	cmp	r3, #1
   b7894:	d023      	beq.n	b78de <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7896:	2b02      	cmp	r3, #2
   b7898:	d032      	beq.n	b7900 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b789a:	bb83      	cbnz	r3, b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b789c:	2a00      	cmp	r2, #0
   b789e:	4613      	mov	r3, r2
   b78a0:	8904      	ldrh	r4, [r0, #8]
   b78a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b78a4:	bfb8      	it	lt
   b78a6:	1dd3      	addlt	r3, r2, #7
   b78a8:	10db      	asrs	r3, r3, #3
   b78aa:	fb13 1104 	smlabb	r1, r3, r4, r1
   b78ae:	f002 0207 	and.w	r2, r2, #7
   b78b2:	2301      	movs	r3, #1
   b78b4:	4093      	lsls	r3, r2
   b78b6:	5c42      	ldrb	r2, [r0, r1]
   b78b8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b78bc:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b78be:	e01e      	b.n	b78fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b78c0:	8904      	ldrh	r4, [r0, #8]
   b78c2:	3c01      	subs	r4, #1
   b78c4:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b78c6:	8944      	ldrh	r4, [r0, #10]
   b78c8:	43d2      	mvns	r2, r2
   b78ca:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b78cc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b78ce:	b212      	sxth	r2, r2
      break;
   b78d0:	e7df      	b.n	b7892 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b78d2:	8944      	ldrh	r4, [r0, #10]
   b78d4:	3c01      	subs	r4, #1
   b78d6:	1a64      	subs	r4, r4, r1
      break;
   b78d8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b78da:	b222      	sxth	r2, r4
      break;
   b78dc:	e7d9      	b.n	b7892 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b78de:	2a00      	cmp	r2, #0
   b78e0:	8904      	ldrh	r4, [r0, #8]
   b78e2:	4613      	mov	r3, r2
   b78e4:	bfb8      	it	lt
   b78e6:	1dd3      	addlt	r3, r2, #7
   b78e8:	10db      	asrs	r3, r3, #3
   b78ea:	fb13 1104 	smlabb	r1, r3, r4, r1
   b78ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b78f0:	f002 0007 	and.w	r0, r2, #7
   b78f4:	2201      	movs	r2, #1
   b78f6:	4082      	lsls	r2, r0
   b78f8:	5c58      	ldrb	r0, [r3, r1]
   b78fa:	4302      	orrs	r2, r0
   b78fc:	545a      	strb	r2, [r3, r1]
}
   b78fe:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7900:	2a00      	cmp	r2, #0
   b7902:	4613      	mov	r3, r2
   b7904:	8904      	ldrh	r4, [r0, #8]
   b7906:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7908:	bfb8      	it	lt
   b790a:	1dd3      	addlt	r3, r2, #7
   b790c:	10db      	asrs	r3, r3, #3
   b790e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7912:	f002 0207 	and.w	r2, r2, #7
   b7916:	2301      	movs	r3, #1
   b7918:	fa03 f202 	lsl.w	r2, r3, r2
   b791c:	5c43      	ldrb	r3, [r0, r1]
   b791e:	405a      	eors	r2, r3
   b7920:	e7cc      	b.n	b78bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7924 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7924:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b7926:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7928:	4604      	mov	r4, r0
   b792a:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b792c:	2180      	movs	r1, #128	; 0x80
   b792e:	f7fe ffcf 	bl	b68d0 <_ZN12Adafruit_GFXC1Ess>
   b7932:	2500      	movs	r5, #0
   b7934:	4b0d      	ldr	r3, [pc, #52]	; (b796c <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b7936:	6023      	str	r3, [r4, #0]
   b7938:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b793a:	f001 fe9f 	bl	b967c <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b793e:	23ff      	movs	r3, #255	; 0xff
   b7940:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b7944:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b7948:	4b09      	ldr	r3, [pc, #36]	; (b7970 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b794a:	63a3      	str	r3, [r4, #56]	; 0x38
   b794c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7950:	2301      	movs	r3, #1
   b7952:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b7956:	86a2      	strh	r2, [r4, #52]	; 0x34
   b7958:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b795c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b7960:	6425      	str	r5, [r4, #64]	; 0x40
   b7962:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b7966:	4620      	mov	r0, r4
   b7968:	bd70      	pop	{r4, r5, r6, pc}
   b796a:	bf00      	nop
   b796c:	000bb304 	.word	0x000bb304
   b7970:	000bad10 	.word	0x000bad10

000b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7976:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7978:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b797a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b797c:	b190      	cbz	r0, b79a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b797e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7982:	f001 fc7f 	bl	b9284 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7986:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7988:	6803      	ldr	r3, [r0, #0]
   b798a:	2100      	movs	r1, #0
   b798c:	689b      	ldr	r3, [r3, #8]
   b798e:	4798      	blx	r3
    WIRE_WRITE(c);
   b7990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7992:	6803      	ldr	r3, [r0, #0]
   b7994:	4629      	mov	r1, r5
   b7996:	689b      	ldr	r3, [r3, #8]
   b7998:	4798      	blx	r3
    wire->endTransmission();
   b799a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b799c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b79a0:	f001 bc77 	b.w	b9292 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b79a4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b79a8:	4601      	mov	r1, r0
   b79aa:	b298      	uxth	r0, r3
   b79ac:	f001 fdb3 	bl	b9516 <digitalWrite>
  if(spi) {
   b79b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b79b2:	b120      	cbz	r0, b79be <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b79b4:	4629      	mov	r1, r5
}
   b79b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b79ba:	f000 bff3 	b.w	b89a4 <_ZN8SPIClass8transferEh>
   b79be:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b79c0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b79c2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b79c6:	ea05 0107 	and.w	r1, r5, r7
   b79ca:	b280      	uxth	r0, r0
   b79cc:	f001 fda3 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b79d0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b79d4:	2101      	movs	r1, #1
   b79d6:	b280      	uxth	r0, r0
   b79d8:	f001 fd9d 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b79dc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b79e0:	2100      	movs	r1, #0
   b79e2:	b280      	uxth	r0, r0
   b79e4:	f001 fd97 	bl	b9516 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b79e8:	3e01      	subs	r6, #1
   b79ea:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b79ee:	d1e8      	bne.n	b79c2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b79f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79f2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b79f2:	b538      	push	{r3, r4, r5, lr}
   b79f4:	4604      	mov	r4, r0
  TRANSACTION_START
   b79f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b79f8:	460d      	mov	r5, r1
  TRANSACTION_START
   b79fa:	b180      	cbz	r0, b7a1e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b79fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b79fe:	f001 fc33 	bl	b9268 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b7a02:	2d00      	cmp	r5, #0
   b7a04:	4620      	mov	r0, r4
   b7a06:	bf14      	ite	ne
   b7a08:	21a7      	movne	r1, #167	; 0xa7
   b7a0a:	21a6      	moveq	r1, #166	; 0xa6
   b7a0c:	f7ff ffb2 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b7a10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7a12:	b188      	cbz	r0, b7a38 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b7a14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a1a:	f001 bc25 	b.w	b9268 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b7a1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7a20:	b118      	cbz	r0, b7a2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b7a22:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7a26:	f000 ff4f 	bl	b88c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7a2a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7a2e:	2100      	movs	r1, #0
   b7a30:	b280      	uxth	r0, r0
   b7a32:	f001 fd70 	bl	b9516 <digitalWrite>
   b7a36:	e7e4      	b.n	b7a02 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b7a38:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7a3c:	2101      	movs	r1, #1
   b7a3e:	b280      	uxth	r0, r0
   b7a40:	f001 fd69 	bl	b9516 <digitalWrite>
   b7a44:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7a46:	b118      	cbz	r0, b7a50 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b7a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b7a4c:	f000 bf22 	b.w	b8894 <_ZN8SPIClass14endTransactionEv>
}
   b7a50:	bd38      	pop	{r3, r4, r5, pc}

000b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7a52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7a56:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7a58:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7a5a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7a5c:	188f      	adds	r7, r1, r2
   b7a5e:	b340      	cbz	r0, b7ab2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b7a60:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7a64:	f001 fc0e 	bl	b9284 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7a68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7a6a:	6803      	ldr	r3, [r0, #0]
   b7a6c:	2100      	movs	r1, #0
   b7a6e:	689b      	ldr	r3, [r3, #8]
   b7a70:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7a72:	2601      	movs	r6, #1
    while(n--) {
   b7a74:	42af      	cmp	r7, r5
        wire->endTransmission();
   b7a76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b7a78:	d017      	beq.n	b7aaa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b7a7a:	2e1f      	cmp	r6, #31
   b7a7c:	d90c      	bls.n	b7a98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b7a7e:	f001 fc08 	bl	b9292 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7a82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7a86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7a88:	f001 fbfc 	bl	b9284 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7a8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7a8e:	6803      	ldr	r3, [r0, #0]
   b7a90:	2100      	movs	r1, #0
   b7a92:	689b      	ldr	r3, [r3, #8]
   b7a94:	4798      	blx	r3
        bytesOut = 1;
   b7a96:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7a9a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7a9e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7aa0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7aa2:	689b      	ldr	r3, [r3, #8]
   b7aa4:	4798      	blx	r3
      bytesOut++;
   b7aa6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b7aa8:	e7e4      	b.n	b7a74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b7aaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b7aae:	f001 bbf0 	b.w	b9292 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7ab2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7ab6:	4601      	mov	r1, r0
   b7ab8:	b298      	uxth	r0, r3
   b7aba:	f001 fd2c 	bl	b9516 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7abe:	42bd      	cmp	r5, r7
   b7ac0:	d022      	beq.n	b7b08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b7ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7ac4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b7ac8:	b118      	cbz	r0, b7ad2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b7aca:	4649      	mov	r1, r9
   b7acc:	f000 ff6a 	bl	b89a4 <_ZN8SPIClass8transferEh>
   b7ad0:	e7f5      	b.n	b7abe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b7ad2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7ad4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7ad8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7adc:	ea09 0108 	and.w	r1, r9, r8
   b7ae0:	b280      	uxth	r0, r0
   b7ae2:	f001 fd18 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7ae6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7aea:	2101      	movs	r1, #1
   b7aec:	b280      	uxth	r0, r0
   b7aee:	f001 fd12 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7af2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7af6:	2100      	movs	r1, #0
   b7af8:	b280      	uxth	r0, r0
   b7afa:	f001 fd0c 	bl	b9516 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7afe:	3e01      	subs	r6, #1
   b7b00:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7b04:	d1e8      	bne.n	b7ad8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7b06:	e7da      	b.n	b7abe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7b0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b7b0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7b10:	1dda      	adds	r2, r3, #7
   b7b12:	bf48      	it	mi
   b7b14:	f103 020e 	addmi.w	r2, r3, #14
   b7b18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7b1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7b1e:	10d2      	asrs	r2, r2, #3
   b7b20:	435a      	muls	r2, r3
   b7b22:	2100      	movs	r1, #0
   b7b24:	f001 bfa8 	b.w	b9a78 <memset>

000b7b28 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7b28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7b2c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7b2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7b30:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7b34:	4604      	mov	r4, r0
   b7b36:	460f      	mov	r7, r1
   b7b38:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7b3a:	b1d3      	cbz	r3, b7b72 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	f7ff ffe5 	bl	b7b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7b42:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b7b46:	2a20      	cmp	r2, #32
   b7b48:	dc25      	bgt.n	b7b96 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7b4a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b7b4e:	2320      	movs	r3, #32
   b7b50:	3a20      	subs	r2, #32
   b7b52:	3973      	subs	r1, #115	; 0x73
   b7b54:	2001      	movs	r0, #1
   b7b56:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b7b5a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b7b5e:	2373      	movs	r3, #115	; 0x73
   b7b60:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7b64:	9300      	str	r3, [sp, #0]
   b7b66:	f342 024f 	sbfx	r2, r2, #1, #16
   b7b6a:	4b85      	ldr	r3, [pc, #532]	; (b7d80 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b7b6c:	f341 014f 	sbfx	r1, r1, #1, #16
   b7b70:	e01b      	b.n	b7baa <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7b72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7b76:	1dd8      	adds	r0, r3, #7
   b7b78:	bf48      	it	mi
   b7b7a:	f103 000e 	addmi.w	r0, r3, #14
   b7b7e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b7b82:	10c0      	asrs	r0, r0, #3
   b7b84:	4358      	muls	r0, r3
   b7b86:	f000 fde3 	bl	b8750 <malloc>
   b7b8a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b7b8c:	2800      	cmp	r0, #0
   b7b8e:	d1d5      	bne.n	b7b3c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b7b90:	b004      	add	sp, #16
   b7b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b7b96:	2340      	movs	r3, #64	; 0x40
   b7b98:	f04f 0c01 	mov.w	ip, #1
   b7b9c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b7ba0:	2380      	movs	r3, #128	; 0x80
   b7ba2:	9300      	str	r3, [sp, #0]
   b7ba4:	2200      	movs	r2, #0
   b7ba6:	4b77      	ldr	r3, [pc, #476]	; (b7d84 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b7ba8:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7baa:	4620      	mov	r0, r4
   b7bac:	f7fe fea6 	bl	b68fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b7bb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b7bb2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b7bb6:	2800      	cmp	r0, #0
   b7bb8:	d078      	beq.n	b7cac <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7bba:	2d00      	cmp	r5, #0
   b7bbc:	d174      	bne.n	b7ca8 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b7bbe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7bc2:	2b20      	cmp	r3, #32
   b7bc4:	bf0c      	ite	eq
   b7bc6:	253c      	moveq	r5, #60	; 0x3c
   b7bc8:	253d      	movne	r5, #61	; 0x3d
   b7bca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b7bce:	f1b8 0f00 	cmp.w	r8, #0
   b7bd2:	d001      	beq.n	b7bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b7bd4:	f001 fb4c 	bl	b9270 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b7bd8:	b1fe      	cbz	r6, b7c1a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b7bda:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7bde:	2800      	cmp	r0, #0
   b7be0:	db1b      	blt.n	b7c1a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b7be2:	2101      	movs	r1, #1
   b7be4:	b280      	uxth	r0, r0
   b7be6:	f001 fc85 	bl	b94f4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b7bea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7bee:	2101      	movs	r1, #1
   b7bf0:	b280      	uxth	r0, r0
   b7bf2:	f001 fc90 	bl	b9516 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7bf6:	2001      	movs	r0, #1
   b7bf8:	f001 f8bc 	bl	b8d74 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7bfc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7c00:	2100      	movs	r1, #0
   b7c02:	b280      	uxth	r0, r0
   b7c04:	f001 fc87 	bl	b9516 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7c08:	200a      	movs	r0, #10
   b7c0a:	f001 f8b3 	bl	b8d74 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b7c0e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7c12:	2101      	movs	r1, #1
   b7c14:	b280      	uxth	r0, r0
   b7c16:	f001 fc7e 	bl	b9516 <digitalWrite>
  TRANSACTION_START
   b7c1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7c1c:	2800      	cmp	r0, #0
   b7c1e:	d074      	beq.n	b7d0a <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b7c20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7c22:	f001 fb21 	bl	b9268 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7c26:	2204      	movs	r2, #4
   b7c28:	4957      	ldr	r1, [pc, #348]	; (b7d88 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b7c2a:	4620      	mov	r0, r4
   b7c2c:	f7ff ff11 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b7c30:	8961      	ldrh	r1, [r4, #10]
   b7c32:	3901      	subs	r1, #1
   b7c34:	b2c9      	uxtb	r1, r1
   b7c36:	4620      	mov	r0, r4
   b7c38:	f7ff fe9c 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b7c3c:	4953      	ldr	r1, [pc, #332]	; (b7d8c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b7c3e:	2204      	movs	r2, #4
   b7c40:	4620      	mov	r0, r4
   b7c42:	f7ff ff06 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b7c46:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7c4a:	2b01      	cmp	r3, #1
   b7c4c:	bf0c      	ite	eq
   b7c4e:	2110      	moveq	r1, #16
   b7c50:	2114      	movne	r1, #20
   b7c52:	4620      	mov	r0, r4
   b7c54:	f7ff fe8e 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b7c58:	2204      	movs	r2, #4
   b7c5a:	494d      	ldr	r1, [pc, #308]	; (b7d90 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	f7ff fef8 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b7c62:	68a3      	ldr	r3, [r4, #8]
   b7c64:	4a4b      	ldr	r2, [pc, #300]	; (b7d94 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7c66:	4293      	cmp	r3, r2
   b7c68:	d15c      	bne.n	b7d24 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b7c6a:	494b      	ldr	r1, [pc, #300]	; (b7d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b7c6c:	2204      	movs	r2, #4
   b7c6e:	4620      	mov	r0, r4
   b7c70:	f7ff feef 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b7c74:	21d9      	movs	r1, #217	; 0xd9
   b7c76:	4620      	mov	r0, r4
   b7c78:	f7ff fe7c 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b7c7c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7c80:	2b01      	cmp	r3, #1
   b7c82:	bf0c      	ite	eq
   b7c84:	2122      	moveq	r1, #34	; 0x22
   b7c86:	21f1      	movne	r1, #241	; 0xf1
   b7c88:	4620      	mov	r0, r4
   b7c8a:	f7ff fe73 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b7c8e:	4620      	mov	r0, r4
   b7c90:	4942      	ldr	r1, [pc, #264]	; (b7d9c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b7c92:	2206      	movs	r2, #6
   b7c94:	f7ff fedd 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b7c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7c9a:	2800      	cmp	r0, #0
   b7c9c:	d063      	beq.n	b7d66 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b7c9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b7ca0:	f001 fae2 	bl	b9268 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b7ca4:	2001      	movs	r0, #1
   b7ca6:	e773      	b.n	b7b90 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7ca8:	b26d      	sxtb	r5, r5
   b7caa:	e78e      	b.n	b7bca <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b7cac:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b7cb0:	2101      	movs	r1, #1
   b7cb2:	b280      	uxth	r0, r0
   b7cb4:	f001 fc1e 	bl	b94f4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b7cb8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7cbc:	2101      	movs	r1, #1
   b7cbe:	b280      	uxth	r0, r0
   b7cc0:	f001 fc18 	bl	b94f4 <pinMode>
    SSD1306_DESELECT
   b7cc4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7cc8:	2101      	movs	r1, #1
   b7cca:	b280      	uxth	r0, r0
   b7ccc:	f001 fc23 	bl	b9516 <digitalWrite>
    if(spi) { // Hardware SPI
   b7cd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b7cd2:	b13d      	cbz	r5, b7ce4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b7cd4:	f1b8 0f00 	cmp.w	r8, #0
   b7cd8:	f43f af7e 	beq.w	b7bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b7cdc:	4628      	mov	r0, r5
   b7cde:	f000 fdc5 	bl	b886c <_ZN8SPIClass5beginEv>
   b7ce2:	e779      	b.n	b7bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b7ce4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7ce8:	2101      	movs	r1, #1
   b7cea:	b280      	uxth	r0, r0
   b7cec:	f001 fc02 	bl	b94f4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b7cf0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7cf4:	2101      	movs	r1, #1
   b7cf6:	b280      	uxth	r0, r0
   b7cf8:	f001 fbfc 	bl	b94f4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7cfc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7d00:	4629      	mov	r1, r5
   b7d02:	b280      	uxth	r0, r0
   b7d04:	f001 fc07 	bl	b9516 <digitalWrite>
   b7d08:	e766      	b.n	b7bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b7d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7d0c:	b118      	cbz	r0, b7d16 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b7d0e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7d12:	f000 fdd9 	bl	b88c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7d16:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7d1a:	2100      	movs	r1, #0
   b7d1c:	b280      	uxth	r0, r0
   b7d1e:	f001 fbfa 	bl	b9516 <digitalWrite>
   b7d22:	e780      	b.n	b7c26 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7d24:	4a1e      	ldr	r2, [pc, #120]	; (b7da0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b7d26:	4293      	cmp	r3, r2
   b7d28:	d10e      	bne.n	b7d48 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b7d2a:	491e      	ldr	r1, [pc, #120]	; (b7da4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b7d2c:	2203      	movs	r2, #3
   b7d2e:	4620      	mov	r0, r4
   b7d30:	f7ff fe8f 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b7d34:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7d38:	2b01      	cmp	r3, #1
   b7d3a:	bf0c      	ite	eq
   b7d3c:	219f      	moveq	r1, #159	; 0x9f
   b7d3e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7d40:	4620      	mov	r0, r4
   b7d42:	f7ff fe17 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b7d46:	e795      	b.n	b7c74 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b7d48:	4a17      	ldr	r2, [pc, #92]	; (b7da8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b7d4a:	4293      	cmp	r3, r2
   b7d4c:	d192      	bne.n	b7c74 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b7d4e:	4917      	ldr	r1, [pc, #92]	; (b7dac <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7d50:	2203      	movs	r2, #3
   b7d52:	4620      	mov	r0, r4
   b7d54:	f7ff fe7d 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7d58:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7d5c:	2b01      	cmp	r3, #1
   b7d5e:	bf0c      	ite	eq
   b7d60:	2110      	moveq	r1, #16
   b7d62:	21af      	movne	r1, #175	; 0xaf
   b7d64:	e7ec      	b.n	b7d40 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b7d66:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7d6a:	2101      	movs	r1, #1
   b7d6c:	b280      	uxth	r0, r0
   b7d6e:	f001 fbd2 	bl	b9516 <digitalWrite>
   b7d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7d74:	2800      	cmp	r0, #0
   b7d76:	d095      	beq.n	b7ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b7d78:	f000 fd8c 	bl	b8894 <_ZN8SPIClass14endTransactionEv>
   b7d7c:	e792      	b.n	b7ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b7d7e:	bf00      	nop
   b7d80:	000bad1c 	.word	0x000bad1c
   b7d84:	000baefc 	.word	0x000baefc
   b7d88:	000bb364 	.word	0x000bb364
   b7d8c:	000bb368 	.word	0x000bb368
   b7d90:	000bb36c 	.word	0x000bb36c
   b7d94:	00200080 	.word	0x00200080
   b7d98:	000bb376 	.word	0x000bb376
   b7d9c:	000bb370 	.word	0x000bb370
   b7da0:	00400080 	.word	0x00400080
   b7da4:	000bb37a 	.word	0x000bb37a
   b7da8:	00100060 	.word	0x00100060
   b7dac:	000bb37d 	.word	0x000bb37d

000b7db0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7db0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b7db2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7db4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b7db8:	db3d      	blt.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7dba:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7dbe:	4294      	cmp	r4, r2
   b7dc0:	dd39      	ble.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b7dc2:	2900      	cmp	r1, #0
      w += x;
   b7dc4:	bfbe      	ittt	lt
   b7dc6:	185b      	addlt	r3, r3, r1
   b7dc8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b7dca:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b7dcc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b7dd0:	18ce      	adds	r6, r1, r3
   b7dd2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b7dd4:	bfc4      	itt	gt
   b7dd6:	1a63      	subgt	r3, r4, r1
   b7dd8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b7dda:	2b00      	cmp	r3, #0
   b7ddc:	dd2b      	ble.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b7dde:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7de0:	10d6      	asrs	r6, r2, #3
   b7de2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b7de6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b7de8:	f002 0007 	and.w	r0, r2, #7
   b7dec:	2201      	movs	r2, #1
   b7dee:	4082      	lsls	r2, r0
      switch(color) {
   b7df0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b7df2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b7df4:	d016      	beq.n	b7e24 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b7df6:	2d02      	cmp	r5, #2
   b7df8:	d00b      	beq.n	b7e12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b7dfa:	b9e5      	cbnz	r5, b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7dfc:	43d2      	mvns	r2, r2
   b7dfe:	b2d2      	uxtb	r2, r2
   b7e00:	440b      	add	r3, r1
   b7e02:	4299      	cmp	r1, r3
   b7e04:	d017      	beq.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7e06:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7e0a:	4010      	ands	r0, r2
   b7e0c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7e10:	e7f7      	b.n	b7e02 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b7e12:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7e14:	4299      	cmp	r1, r3
   b7e16:	d00e      	beq.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7e18:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7e1c:	4050      	eors	r0, r2
   b7e1e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7e22:	e7f7      	b.n	b7e14 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7e24:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b7e26:	4299      	cmp	r1, r3
   b7e28:	d005      	beq.n	b7e36 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7e2a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7e2e:	4310      	orrs	r0, r2
   b7e30:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7e34:	e7f7      	b.n	b7e26 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b7e36:	bd70      	pop	{r4, r5, r6, pc}

000b7e38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7e3a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7e3c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7e40:	db76      	blt.n	b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b7e42:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b7e46:	42b1      	cmp	r1, r6
   b7e48:	da72      	bge.n	b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b7e4a:	2a00      	cmp	r2, #0
      __h += __y;
   b7e4c:	bfbe      	ittt	lt
   b7e4e:	189b      	addlt	r3, r3, r2
   b7e50:	b21b      	sxthlt	r3, r3
      __y = 0;
   b7e52:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7e54:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7e58:	18d7      	adds	r7, r2, r3
   b7e5a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b7e5c:	bfc4      	itt	gt
   b7e5e:	1aa3      	subgt	r3, r4, r2
   b7e60:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b7e62:	2b00      	cmp	r3, #0
   b7e64:	dd64      	ble.n	b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7e66:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b7e6a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b7e6c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b7e70:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b7e74:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7e76:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b7e7a:	d023      	beq.n	b7ec4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b7e7c:	f1c2 0208 	rsb	r2, r2, #8
   b7e80:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7e82:	492d      	ldr	r1, [pc, #180]	; (b7f38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7e84:	4293      	cmp	r3, r2
   b7e86:	bf3c      	itt	cc
   b7e88:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b7e8c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7e90:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7e92:	bf3c      	itt	cc
   b7e94:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b7e98:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b7e9c:	2d01      	cmp	r5, #1
   b7e9e:	d007      	beq.n	b7eb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b7ea0:	2d02      	cmp	r5, #2
   b7ea2:	d02e      	beq.n	b7f02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b7ea4:	b94d      	cbnz	r5, b7eba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b7ea6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7eaa:	ea2c 0101 	bic.w	r1, ip, r1
   b7eae:	e003      	b.n	b7eb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b7eb0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7eb4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b7eb8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b7eba:	4293      	cmp	r3, r2
   b7ebc:	d338      	bcc.n	b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b7ebe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b7ec2:	440c      	add	r4, r1
        h -= mod;
   b7ec4:	1a9a      	subs	r2, r3, r2
   b7ec6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b7ec8:	2a07      	cmp	r2, #7
   b7eca:	d90e      	bls.n	b7eea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b7ecc:	2d02      	cmp	r5, #2
   b7ece:	d11d      	bne.n	b7f0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b7ed0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b7ed2:	7821      	ldrb	r1, [r4, #0]
   b7ed4:	43c9      	mvns	r1, r1
   b7ed6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b7ed8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b7eda:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b7ede:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b7ee0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b7ee2:	440c      	add	r4, r1
            } while(h >= 8);
   b7ee4:	d8f5      	bhi.n	b7ed2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b7ee6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b7eea:	b30a      	cbz	r2, b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b7eec:	4b13      	ldr	r3, [pc, #76]	; (b7f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b7eee:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b7ef0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b7ef2:	d01a      	beq.n	b7f2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b7ef4:	2d02      	cmp	r5, #2
   b7ef6:	d01c      	beq.n	b7f32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b7ef8:	b9d5      	cbnz	r5, b7f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b7efa:	7822      	ldrb	r2, [r4, #0]
   b7efc:	ea22 0303 	bic.w	r3, r2, r3
   b7f00:	e015      	b.n	b7f2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b7f02:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7f06:	ea81 010c 	eor.w	r1, r1, ip
   b7f0a:	e7d5      	b.n	b7eb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7f0c:	1e29      	subs	r1, r5, #0
   b7f0e:	bf18      	it	ne
   b7f10:	2101      	movne	r1, #1
   b7f12:	4249      	negs	r1, r1
   b7f14:	b2c9      	uxtb	r1, r1
   b7f16:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b7f18:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b7f1a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7f1c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b7f20:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b7f22:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7f24:	4434      	add	r4, r6
            } while(h >= 8);
   b7f26:	d8f7      	bhi.n	b7f18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b7f28:	e7dd      	b.n	b7ee6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b7f2a:	7822      	ldrb	r2, [r4, #0]
   b7f2c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b7f2e:	7023      	strb	r3, [r4, #0]
}
   b7f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b7f32:	7822      	ldrb	r2, [r4, #0]
   b7f34:	4053      	eors	r3, r2
   b7f36:	e7fa      	b.n	b7f2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b7f38:	000bb354 	.word	0x000bb354
   b7f3c:	000bb35c 	.word	0x000bb35c

000b7f40 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7f40:	b470      	push	{r4, r5, r6}
   b7f42:	4614      	mov	r4, r2
  switch(rotation) {
   b7f44:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7f46:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b7f4a:	2a02      	cmp	r2, #2
   b7f4c:	d00d      	beq.n	b7f6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b7f4e:	2a03      	cmp	r2, #3
   b7f50:	d018      	beq.n	b7f84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b7f52:	2a01      	cmp	r2, #1
   b7f54:	d111      	bne.n	b7f7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b7f56:	8902      	ldrh	r2, [r0, #8]
   b7f58:	43e4      	mvns	r4, r4
   b7f5a:	4414      	add	r4, r2
   b7f5c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7f5e:	9603      	str	r6, [sp, #12]
   b7f60:	460a      	mov	r2, r1
   b7f62:	4621      	mov	r1, r4
}
   b7f64:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7f66:	f7ff bf67 	b.w	b7e38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b7f6a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b7f6c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b7f6e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b7f70:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b7f72:	4414      	add	r4, r2
    x -= (w-1);
   b7f74:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b7f76:	b224      	sxth	r4, r4
    x -= (w-1);
   b7f78:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b7f7a:	9603      	str	r6, [sp, #12]
   b7f7c:	4622      	mov	r2, r4
}
   b7f7e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b7f80:	f7ff bf16 	b.w	b7db0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b7f84:	8945      	ldrh	r5, [r0, #10]
   b7f86:	4419      	add	r1, r3
   b7f88:	1a69      	subs	r1, r5, r1
   b7f8a:	b209      	sxth	r1, r1
    break;
   b7f8c:	e7e7      	b.n	b7f5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b7f8e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7f8e:	b430      	push	{r4, r5}
   b7f90:	4614      	mov	r4, r2
  switch(rotation) {
   b7f92:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7f94:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b7f98:	2a02      	cmp	r2, #2
   b7f9a:	d00d      	beq.n	b7fb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b7f9c:	2a03      	cmp	r2, #3
   b7f9e:	d018      	beq.n	b7fd2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b7fa0:	2a01      	cmp	r2, #1
   b7fa2:	d111      	bne.n	b7fc8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b7fa4:	18e2      	adds	r2, r4, r3
   b7fa6:	8904      	ldrh	r4, [r0, #8]
   b7fa8:	1aa4      	subs	r4, r4, r2
   b7faa:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b7fac:	9502      	str	r5, [sp, #8]
   b7fae:	460a      	mov	r2, r1
   b7fb0:	4621      	mov	r1, r4
}
   b7fb2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b7fb4:	f7ff befc 	b.w	b7db0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b7fb8:	8902      	ldrh	r2, [r0, #8]
   b7fba:	43c9      	mvns	r1, r1
   b7fbc:	4411      	add	r1, r2
    y -= (h-1);
   b7fbe:	18e2      	adds	r2, r4, r3
   b7fc0:	8944      	ldrh	r4, [r0, #10]
   b7fc2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b7fc4:	b209      	sxth	r1, r1
    y -= (h-1);
   b7fc6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b7fc8:	9502      	str	r5, [sp, #8]
   b7fca:	4622      	mov	r2, r4
}
   b7fcc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b7fce:	f7ff bf33 	b.w	b7e38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b7fd2:	8942      	ldrh	r2, [r0, #10]
   b7fd4:	43c9      	mvns	r1, r1
   b7fd6:	4411      	add	r1, r2
   b7fd8:	b209      	sxth	r1, r1
    break;
   b7fda:	e7e7      	b.n	b7fac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b7fdc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b7fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7fe0:	4604      	mov	r4, r0
  TRANSACTION_START
   b7fe2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7fe4:	2800      	cmp	r0, #0
   b7fe6:	d042      	beq.n	b806e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b7fe8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7fea:	f001 f93d 	bl	b9268 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b7fee:	4947      	ldr	r1, [pc, #284]	; (b810c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b7ff0:	2205      	movs	r2, #5
   b7ff2:	4620      	mov	r0, r4
   b7ff4:	f7ff fd2d 	bl	b7a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b7ff8:	8921      	ldrh	r1, [r4, #8]
   b7ffa:	3901      	subs	r1, #1
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	b2c9      	uxtb	r1, r1
   b8000:	f7ff fcb8 	bl	b7974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8004:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8008:	1dde      	adds	r6, r3, #7
   b800a:	bf48      	it	mi
   b800c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8010:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8014:	8923      	ldrh	r3, [r4, #8]
   b8016:	10f6      	asrs	r6, r6, #3
   b8018:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b801c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8020:	2800      	cmp	r0, #0
   b8022:	d03a      	beq.n	b809a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8024:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8028:	f001 f92c 	bl	b9284 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b802c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b802e:	6803      	ldr	r3, [r0, #0]
   b8030:	2140      	movs	r1, #64	; 0x40
   b8032:	689b      	ldr	r3, [r3, #8]
   b8034:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8036:	2701      	movs	r7, #1
    while(count--) {
   b8038:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b803a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b803c:	d024      	beq.n	b8088 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b803e:	2f1f      	cmp	r7, #31
   b8040:	d90c      	bls.n	b805c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8042:	f001 f926 	bl	b9292 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8046:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b804a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b804c:	f001 f91a 	bl	b9284 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8050:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8052:	6803      	ldr	r3, [r0, #0]
   b8054:	2140      	movs	r1, #64	; 0x40
   b8056:	689b      	ldr	r3, [r3, #8]
   b8058:	4798      	blx	r3
        bytesOut = 1;
   b805a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b805c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b805e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8062:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8064:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8066:	689b      	ldr	r3, [r3, #8]
   b8068:	4798      	blx	r3
      bytesOut++;
   b806a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b806c:	e7e4      	b.n	b8038 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b806e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8070:	b118      	cbz	r0, b807a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8072:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8076:	f000 fc27 	bl	b88c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b807a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b807e:	2100      	movs	r1, #0
   b8080:	b280      	uxth	r0, r0
   b8082:	f001 fa48 	bl	b9516 <digitalWrite>
   b8086:	e7b2      	b.n	b7fee <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8088:	f001 f903 	bl	b9292 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b808c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b808e:	b378      	cbz	r0, b80f0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8090:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8092:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8096:	f001 b8e7 	b.w	b9268 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b809a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b809e:	2101      	movs	r1, #1
   b80a0:	b280      	uxth	r0, r0
   b80a2:	f001 fa38 	bl	b9516 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b80a6:	42ae      	cmp	r6, r5
   b80a8:	d0f0      	beq.n	b808c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b80aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b80ac:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b80b0:	b118      	cbz	r0, b80ba <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b80b2:	4649      	mov	r1, r9
   b80b4:	f000 fc76 	bl	b89a4 <_ZN8SPIClass8transferEh>
   b80b8:	e7f5      	b.n	b80a6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b80ba:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b80bc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b80c0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b80c4:	ea09 0108 	and.w	r1, r9, r8
   b80c8:	b280      	uxth	r0, r0
   b80ca:	f001 fa24 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b80ce:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b80d2:	2101      	movs	r1, #1
   b80d4:	b280      	uxth	r0, r0
   b80d6:	f001 fa1e 	bl	b9516 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b80da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b80de:	2100      	movs	r1, #0
   b80e0:	b280      	uxth	r0, r0
   b80e2:	f001 fa18 	bl	b9516 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b80e6:	3f01      	subs	r7, #1
   b80e8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b80ec:	d1e8      	bne.n	b80c0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b80ee:	e7da      	b.n	b80a6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b80f0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b80f4:	2101      	movs	r1, #1
   b80f6:	b280      	uxth	r0, r0
   b80f8:	f001 fa0d 	bl	b9516 <digitalWrite>
   b80fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b80fe:	b118      	cbz	r0, b8108 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8100:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8104:	f000 bbc6 	b.w	b8894 <_ZN8SPIClass14endTransactionEv>
}
   b8108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b810c:	000bb380 	.word	0x000bb380

000b8110 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b8110:	b510      	push	{r4, lr}
   b8112:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b8114:	7001      	strb	r1, [r0, #0]
   b8116:	7042      	strb	r2, [r0, #1]
   b8118:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b811a:	2101      	movs	r1, #1
   b811c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b8120:	f001 fc94 	bl	b9a4c <calloc>
   b8124:	6060      	str	r0, [r4, #4]
}
   b8126:	4620      	mov	r0, r4
   b8128:	bd10      	pop	{r4, pc}

000b812a <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b812a:	b510      	push	{r4, lr}
   b812c:	4604      	mov	r4, r0
{
    free(_led_state);
   b812e:	6840      	ldr	r0, [r0, #4]
   b8130:	f000 fb16 	bl	b8760 <free>
}
   b8134:	4620      	mov	r0, r4
   b8136:	bd10      	pop	{r4, pc}

000b8138 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b8138:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b813a:	2100      	movs	r1, #0
{
   b813c:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b813e:	7800      	ldrb	r0, [r0, #0]
   b8140:	f001 f9e9 	bl	b9516 <digitalWrite>
   b8144:	2014      	movs	r0, #20
   b8146:	f000 f90f 	bl	b8368 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b814a:	7820      	ldrb	r0, [r4, #0]
   b814c:	2101      	movs	r1, #1
   b814e:	f001 f9e2 	bl	b9516 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b8152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8156:	2014      	movs	r0, #20
   b8158:	f000 b906 	b.w	b8368 <HAL_Delay_Microseconds>

000b815c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b815c:	b570      	push	{r4, r5, r6, lr}
   b815e:	4606      	mov	r6, r0
   b8160:	460c      	mov	r4, r1
   b8162:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b8164:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b8166:	bf4c      	ite	mi
   b8168:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b816a:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b816c:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b816e:	f001 f9d2 	bl	b9516 <digitalWrite>
    for (byte i=0; i<8; i++)
   b8172:	3d01      	subs	r5, #1
        clk();
   b8174:	4630      	mov	r0, r6
   b8176:	f7ff ffdf 	bl	b8138 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b817a:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b817c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b8180:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b8182:	d1ef      	bne.n	b8164 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b8184:	bd70      	pop	{r4, r5, r6, pc}

000b8186 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b8186:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b8188:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b818c:	461e      	mov	r6, r3
   b818e:	460c      	mov	r4, r1
   b8190:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b8192:	bf14      	ite	ne
   b8194:	21c0      	movne	r1, #192	; 0xc0
   b8196:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b8198:	0673      	lsls	r3, r6, #25
   b819a:	bf58      	it	pl
   b819c:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b81a0:	062a      	lsls	r2, r5, #24
   b81a2:	bf58      	it	pl
   b81a4:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b81a8:	066b      	lsls	r3, r5, #25
   b81aa:	bf58      	it	pl
   b81ac:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b81b0:	0622      	lsls	r2, r4, #24
   b81b2:	bf58      	it	pl
   b81b4:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b81b8:	0663      	lsls	r3, r4, #25
   b81ba:	bf58      	it	pl
   b81bc:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b81c0:	9001      	str	r0, [sp, #4]
   b81c2:	f7ff ffcb 	bl	b815c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b81c6:	9801      	ldr	r0, [sp, #4]
   b81c8:	4631      	mov	r1, r6
   b81ca:	f7ff ffc7 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b81ce:	9801      	ldr	r0, [sp, #4]
   b81d0:	4629      	mov	r1, r5
   b81d2:	f7ff ffc3 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b81d6:	9801      	ldr	r0, [sp, #4]
   b81d8:	4621      	mov	r1, r4
}
   b81da:	b002      	add	sp, #8
   b81dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b81e0:	f7ff bfbc 	b.w	b815c <_ZN12ChainableLED8sendByteEh>

000b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b81e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b81e8:	4604      	mov	r4, r0
   b81ea:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b81ec:	2100      	movs	r1, #0
{
   b81ee:	4690      	mov	r8, r2
   b81f0:	4699      	mov	r9, r3
   b81f2:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b81f6:	f7ff ffb1 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b81fa:	2100      	movs	r1, #0
   b81fc:	4620      	mov	r0, r4
   b81fe:	f7ff ffad 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8202:	2100      	movs	r1, #0
   b8204:	4620      	mov	r0, r4
   b8206:	f7ff ffa9 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b820a:	2100      	movs	r1, #0
   b820c:	4620      	mov	r0, r4
   b820e:	f7ff ffa5 	bl	b815c <_ZN12ChainableLED8sendByteEh>
   b8212:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b8214:	78a3      	ldrb	r3, [r4, #2]
   b8216:	b2f5      	uxtb	r5, r6
   b8218:	42ab      	cmp	r3, r5
   b821a:	d919      	bls.n	b8250 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b821c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b8220:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b8222:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b8226:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b822a:	d108      	bne.n	b823e <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b822c:	6861      	ldr	r1, [r4, #4]
   b822e:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b8232:	6861      	ldr	r1, [r4, #4]
   b8234:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b8238:	6861      	ldr	r1, [r4, #4]
   b823a:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b823e:	6861      	ldr	r1, [r4, #4]
   b8240:	5ccb      	ldrb	r3, [r1, r3]
   b8242:	5c8a      	ldrb	r2, [r1, r2]
   b8244:	5c09      	ldrb	r1, [r1, r0]
   b8246:	4620      	mov	r0, r4
   b8248:	f7ff ff9d 	bl	b8186 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b824c:	3601      	adds	r6, #1
   b824e:	e7e1      	b.n	b8214 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b8250:	4620      	mov	r0, r4
   b8252:	2100      	movs	r1, #0
   b8254:	f7ff ff82 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8258:	4620      	mov	r0, r4
   b825a:	2100      	movs	r1, #0
   b825c:	f7ff ff7e 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8260:	4620      	mov	r0, r4
   b8262:	2100      	movs	r1, #0
   b8264:	f7ff ff7a 	bl	b815c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8268:	4620      	mov	r0, r4
   b826a:	2100      	movs	r1, #0
}
   b826c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b8270:	f7ff bf74 	b.w	b815c <_ZN12ChainableLED8sendByteEh>

000b8274 <_ZN12ChainableLED4initEv>:
{
   b8274:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8276:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b8278:	2101      	movs	r1, #1
   b827a:	7800      	ldrb	r0, [r0, #0]
   b827c:	f001 f93a 	bl	b94f4 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b8280:	7860      	ldrb	r0, [r4, #1]
   b8282:	2101      	movs	r1, #1
   b8284:	f001 f936 	bl	b94f4 <pinMode>
   b8288:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b828a:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b828c:	78a3      	ldrb	r3, [r4, #2]
   b828e:	b2e9      	uxtb	r1, r5
   b8290:	428b      	cmp	r3, r1
   b8292:	d907      	bls.n	b82a4 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b8294:	2300      	movs	r3, #0
   b8296:	9600      	str	r6, [sp, #0]
   b8298:	461a      	mov	r2, r3
   b829a:	4620      	mov	r0, r4
   b829c:	f7ff ffa2 	bl	b81e4 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b82a0:	3501      	adds	r5, #1
   b82a2:	e7f3      	b.n	b828c <_ZN12ChainableLED4initEv+0x18>
}
   b82a4:	b002      	add	sp, #8
   b82a6:	bd70      	pop	{r4, r5, r6, pc}

000b82a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b82a8:	b508      	push	{r3, lr}
   b82aa:	4b02      	ldr	r3, [pc, #8]	; (b82b4 <netdb_freeaddrinfo+0xc>)
   b82ac:	681b      	ldr	r3, [r3, #0]
   b82ae:	689b      	ldr	r3, [r3, #8]
   b82b0:	9301      	str	r3, [sp, #4]
   b82b2:	bd08      	pop	{r3, pc}
   b82b4:	00030268 	.word	0x00030268

000b82b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b82b8:	b508      	push	{r3, lr}
   b82ba:	4b02      	ldr	r3, [pc, #8]	; (b82c4 <netdb_getaddrinfo+0xc>)
   b82bc:	681b      	ldr	r3, [r3, #0]
   b82be:	68db      	ldr	r3, [r3, #12]
   b82c0:	9301      	str	r3, [sp, #4]
   b82c2:	bd08      	pop	{r3, pc}
   b82c4:	00030268 	.word	0x00030268

000b82c8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b82c8:	b508      	push	{r3, lr}
   b82ca:	4b02      	ldr	r3, [pc, #8]	; (b82d4 <HAL_Validate_Pin_Function+0xc>)
   b82cc:	681b      	ldr	r3, [r3, #0]
   b82ce:	685b      	ldr	r3, [r3, #4]
   b82d0:	9301      	str	r3, [sp, #4]
   b82d2:	bd08      	pop	{r3, pc}
   b82d4:	0003022c 	.word	0x0003022c

000b82d8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b82d8:	b508      	push	{r3, lr}
   b82da:	4b02      	ldr	r3, [pc, #8]	; (b82e4 <HAL_Pin_Mode+0xc>)
   b82dc:	681b      	ldr	r3, [r3, #0]
   b82de:	689b      	ldr	r3, [r3, #8]
   b82e0:	9301      	str	r3, [sp, #4]
   b82e2:	bd08      	pop	{r3, pc}
   b82e4:	0003022c 	.word	0x0003022c

000b82e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b82e8:	b508      	push	{r3, lr}
   b82ea:	4b02      	ldr	r3, [pc, #8]	; (b82f4 <HAL_Get_Pin_Mode+0xc>)
   b82ec:	681b      	ldr	r3, [r3, #0]
   b82ee:	68db      	ldr	r3, [r3, #12]
   b82f0:	9301      	str	r3, [sp, #4]
   b82f2:	bd08      	pop	{r3, pc}
   b82f4:	0003022c 	.word	0x0003022c

000b82f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b82f8:	b508      	push	{r3, lr}
   b82fa:	4b02      	ldr	r3, [pc, #8]	; (b8304 <HAL_GPIO_Write+0xc>)
   b82fc:	681b      	ldr	r3, [r3, #0]
   b82fe:	691b      	ldr	r3, [r3, #16]
   b8300:	9301      	str	r3, [sp, #4]
   b8302:	bd08      	pop	{r3, pc}
   b8304:	0003022c 	.word	0x0003022c

000b8308 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8308:	b508      	push	{r3, lr}
   b830a:	4b02      	ldr	r3, [pc, #8]	; (b8314 <HAL_GPIO_Read+0xc>)
   b830c:	681b      	ldr	r3, [r3, #0]
   b830e:	695b      	ldr	r3, [r3, #20]
   b8310:	9301      	str	r3, [sp, #4]
   b8312:	bd08      	pop	{r3, pc}
   b8314:	0003022c 	.word	0x0003022c

000b8318 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b8318:	b508      	push	{r3, lr}
   b831a:	4b02      	ldr	r3, [pc, #8]	; (b8324 <HAL_Interrupts_Enable_All+0xc>)
   b831c:	681b      	ldr	r3, [r3, #0]
   b831e:	6a1b      	ldr	r3, [r3, #32]
   b8320:	9301      	str	r3, [sp, #4]
   b8322:	bd08      	pop	{r3, pc}
   b8324:	0003022c 	.word	0x0003022c

000b8328 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b8328:	b508      	push	{r3, lr}
   b832a:	4b02      	ldr	r3, [pc, #8]	; (b8334 <HAL_Interrupts_Disable_All+0xc>)
   b832c:	681b      	ldr	r3, [r3, #0]
   b832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8330:	9301      	str	r3, [sp, #4]
   b8332:	bd08      	pop	{r3, pc}
   b8334:	0003022c 	.word	0x0003022c

000b8338 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8338:	b508      	push	{r3, lr}
   b833a:	4b02      	ldr	r3, [pc, #8]	; (b8344 <hal_adc_read+0xc>)
   b833c:	681b      	ldr	r3, [r3, #0]
   b833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8340:	9301      	str	r3, [sp, #4]
   b8342:	bd08      	pop	{r3, pc}
   b8344:	0003022c 	.word	0x0003022c

000b8348 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b8348:	b508      	push	{r3, lr}
   b834a:	4b02      	ldr	r3, [pc, #8]	; (b8354 <HAL_Pulse_In+0xc>)
   b834c:	681b      	ldr	r3, [r3, #0]
   b834e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8350:	9301      	str	r3, [sp, #4]
   b8352:	bd08      	pop	{r3, pc}
   b8354:	0003022c 	.word	0x0003022c

000b8358 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8358:	b508      	push	{r3, lr}
   b835a:	4b02      	ldr	r3, [pc, #8]	; (b8364 <HAL_RNG_GetRandomNumber+0xc>)
   b835c:	681b      	ldr	r3, [r3, #0]
   b835e:	685b      	ldr	r3, [r3, #4]
   b8360:	9301      	str	r3, [sp, #4]
   b8362:	bd08      	pop	{r3, pc}
   b8364:	00030218 	.word	0x00030218

000b8368 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8368:	b508      	push	{r3, lr}
   b836a:	4b02      	ldr	r3, [pc, #8]	; (b8374 <HAL_Delay_Microseconds+0xc>)
   b836c:	681b      	ldr	r3, [r3, #0]
   b836e:	68db      	ldr	r3, [r3, #12]
   b8370:	9301      	str	r3, [sp, #4]
   b8372:	bd08      	pop	{r3, pc}
   b8374:	00030218 	.word	0x00030218

000b8378 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8378:	b508      	push	{r3, lr}
   b837a:	4b02      	ldr	r3, [pc, #8]	; (b8384 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b837c:	681b      	ldr	r3, [r3, #0]
   b837e:	695b      	ldr	r3, [r3, #20]
   b8380:	9301      	str	r3, [sp, #4]
   b8382:	bd08      	pop	{r3, pc}
   b8384:	00030218 	.word	0x00030218

000b8388 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b8388:	b508      	push	{r3, lr}
   b838a:	4b02      	ldr	r3, [pc, #8]	; (b8394 <HAL_EEPROM_Init+0xc>)
   b838c:	681b      	ldr	r3, [r3, #0]
   b838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8390:	9301      	str	r3, [sp, #4]
   b8392:	bd08      	pop	{r3, pc}
   b8394:	00030218 	.word	0x00030218

000b8398 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b8398:	b508      	push	{r3, lr}
   b839a:	4b02      	ldr	r3, [pc, #8]	; (b83a4 <HAL_EEPROM_Read+0xc>)
   b839c:	681b      	ldr	r3, [r3, #0]
   b839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83a0:	9301      	str	r3, [sp, #4]
   b83a2:	bd08      	pop	{r3, pc}
   b83a4:	00030218 	.word	0x00030218

000b83a8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b83a8:	b508      	push	{r3, lr}
   b83aa:	4b02      	ldr	r3, [pc, #8]	; (b83b4 <HAL_EEPROM_Put+0xc>)
   b83ac:	681b      	ldr	r3, [r3, #0]
   b83ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b83b0:	9301      	str	r3, [sp, #4]
   b83b2:	bd08      	pop	{r3, pc}
   b83b4:	00030218 	.word	0x00030218

000b83b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b83b8:	b508      	push	{r3, lr}
   b83ba:	4b02      	ldr	r3, [pc, #8]	; (b83c4 <os_mutex_recursive_create+0xc>)
   b83bc:	681b      	ldr	r3, [r3, #0]
   b83be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b83c0:	9301      	str	r3, [sp, #4]
   b83c2:	bd08      	pop	{r3, pc}
   b83c4:	00030248 	.word	0x00030248

000b83c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b83c8:	b508      	push	{r3, lr}
   b83ca:	4b02      	ldr	r3, [pc, #8]	; (b83d4 <inet_inet_ntop+0xc>)
   b83cc:	681b      	ldr	r3, [r3, #0]
   b83ce:	695b      	ldr	r3, [r3, #20]
   b83d0:	9301      	str	r3, [sp, #4]
   b83d2:	bd08      	pop	{r3, pc}
   b83d4:	00030264 	.word	0x00030264

000b83d8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b83d8:	b508      	push	{r3, lr}
   b83da:	4b02      	ldr	r3, [pc, #8]	; (b83e4 <hal_usart_write+0xc>)
   b83dc:	681b      	ldr	r3, [r3, #0]
   b83de:	68db      	ldr	r3, [r3, #12]
   b83e0:	9301      	str	r3, [sp, #4]
   b83e2:	bd08      	pop	{r3, pc}
   b83e4:	0003023c 	.word	0x0003023c

000b83e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b83e8:	b508      	push	{r3, lr}
   b83ea:	4b02      	ldr	r3, [pc, #8]	; (b83f4 <hal_usart_available+0xc>)
   b83ec:	681b      	ldr	r3, [r3, #0]
   b83ee:	691b      	ldr	r3, [r3, #16]
   b83f0:	9301      	str	r3, [sp, #4]
   b83f2:	bd08      	pop	{r3, pc}
   b83f4:	0003023c 	.word	0x0003023c

000b83f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b83f8:	b508      	push	{r3, lr}
   b83fa:	4b02      	ldr	r3, [pc, #8]	; (b8404 <hal_usart_read+0xc>)
   b83fc:	681b      	ldr	r3, [r3, #0]
   b83fe:	695b      	ldr	r3, [r3, #20]
   b8400:	9301      	str	r3, [sp, #4]
   b8402:	bd08      	pop	{r3, pc}
   b8404:	0003023c 	.word	0x0003023c

000b8408 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8408:	b508      	push	{r3, lr}
   b840a:	4b02      	ldr	r3, [pc, #8]	; (b8414 <hal_usart_peek+0xc>)
   b840c:	681b      	ldr	r3, [r3, #0]
   b840e:	699b      	ldr	r3, [r3, #24]
   b8410:	9301      	str	r3, [sp, #4]
   b8412:	bd08      	pop	{r3, pc}
   b8414:	0003023c 	.word	0x0003023c

000b8418 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8418:	b508      	push	{r3, lr}
   b841a:	4b02      	ldr	r3, [pc, #8]	; (b8424 <hal_usart_flush+0xc>)
   b841c:	681b      	ldr	r3, [r3, #0]
   b841e:	69db      	ldr	r3, [r3, #28]
   b8420:	9301      	str	r3, [sp, #4]
   b8422:	bd08      	pop	{r3, pc}
   b8424:	0003023c 	.word	0x0003023c

000b8428 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8428:	b508      	push	{r3, lr}
   b842a:	4b02      	ldr	r3, [pc, #8]	; (b8434 <hal_usart_is_enabled+0xc>)
   b842c:	681b      	ldr	r3, [r3, #0]
   b842e:	6a1b      	ldr	r3, [r3, #32]
   b8430:	9301      	str	r3, [sp, #4]
   b8432:	bd08      	pop	{r3, pc}
   b8434:	0003023c 	.word	0x0003023c

000b8438 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8438:	b508      	push	{r3, lr}
   b843a:	4b02      	ldr	r3, [pc, #8]	; (b8444 <hal_usart_available_data_for_write+0xc>)
   b843c:	681b      	ldr	r3, [r3, #0]
   b843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8440:	9301      	str	r3, [sp, #4]
   b8442:	bd08      	pop	{r3, pc}
   b8444:	0003023c 	.word	0x0003023c

000b8448 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8448:	b508      	push	{r3, lr}
   b844a:	4b02      	ldr	r3, [pc, #8]	; (b8454 <hal_usart_init_ex+0xc>)
   b844c:	681b      	ldr	r3, [r3, #0]
   b844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8450:	9301      	str	r3, [sp, #4]
   b8452:	bd08      	pop	{r3, pc}
   b8454:	0003023c 	.word	0x0003023c

000b8458 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b8458:	b508      	push	{r3, lr}
   b845a:	4b02      	ldr	r3, [pc, #8]	; (b8464 <hal_i2c_set_speed+0xc>)
   b845c:	681b      	ldr	r3, [r3, #0]
   b845e:	681b      	ldr	r3, [r3, #0]
   b8460:	9301      	str	r3, [sp, #4]
   b8462:	bd08      	pop	{r3, pc}
   b8464:	00030228 	.word	0x00030228

000b8468 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8468:	b508      	push	{r3, lr}
   b846a:	4b02      	ldr	r3, [pc, #8]	; (b8474 <hal_i2c_begin+0xc>)
   b846c:	681b      	ldr	r3, [r3, #0]
   b846e:	68db      	ldr	r3, [r3, #12]
   b8470:	9301      	str	r3, [sp, #4]
   b8472:	bd08      	pop	{r3, pc}
   b8474:	00030228 	.word	0x00030228

000b8478 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8478:	b508      	push	{r3, lr}
   b847a:	4b02      	ldr	r3, [pc, #8]	; (b8484 <hal_i2c_begin_transmission+0xc>)
   b847c:	681b      	ldr	r3, [r3, #0]
   b847e:	699b      	ldr	r3, [r3, #24]
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	bd08      	pop	{r3, pc}
   b8484:	00030228 	.word	0x00030228

000b8488 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8488:	b508      	push	{r3, lr}
   b848a:	4b02      	ldr	r3, [pc, #8]	; (b8494 <hal_i2c_end_transmission+0xc>)
   b848c:	681b      	ldr	r3, [r3, #0]
   b848e:	69db      	ldr	r3, [r3, #28]
   b8490:	9301      	str	r3, [sp, #4]
   b8492:	bd08      	pop	{r3, pc}
   b8494:	00030228 	.word	0x00030228

000b8498 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8498:	b508      	push	{r3, lr}
   b849a:	4b02      	ldr	r3, [pc, #8]	; (b84a4 <hal_i2c_write+0xc>)
   b849c:	681b      	ldr	r3, [r3, #0]
   b849e:	6a1b      	ldr	r3, [r3, #32]
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	bd08      	pop	{r3, pc}
   b84a4:	00030228 	.word	0x00030228

000b84a8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b84a8:	b508      	push	{r3, lr}
   b84aa:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <hal_i2c_available+0xc>)
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b84b0:	9301      	str	r3, [sp, #4]
   b84b2:	bd08      	pop	{r3, pc}
   b84b4:	00030228 	.word	0x00030228

000b84b8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b84b8:	b508      	push	{r3, lr}
   b84ba:	4b02      	ldr	r3, [pc, #8]	; (b84c4 <hal_i2c_read+0xc>)
   b84bc:	681b      	ldr	r3, [r3, #0]
   b84be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	bd08      	pop	{r3, pc}
   b84c4:	00030228 	.word	0x00030228

000b84c8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b84c8:	b508      	push	{r3, lr}
   b84ca:	4b02      	ldr	r3, [pc, #8]	; (b84d4 <hal_i2c_peek+0xc>)
   b84cc:	681b      	ldr	r3, [r3, #0]
   b84ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b84d0:	9301      	str	r3, [sp, #4]
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	00030228 	.word	0x00030228

000b84d8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b84d8:	b508      	push	{r3, lr}
   b84da:	4b02      	ldr	r3, [pc, #8]	; (b84e4 <hal_i2c_flush+0xc>)
   b84dc:	681b      	ldr	r3, [r3, #0]
   b84de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b84e0:	9301      	str	r3, [sp, #4]
   b84e2:	bd08      	pop	{r3, pc}
   b84e4:	00030228 	.word	0x00030228

000b84e8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b84e8:	b508      	push	{r3, lr}
   b84ea:	4b02      	ldr	r3, [pc, #8]	; (b84f4 <hal_i2c_is_enabled+0xc>)
   b84ec:	681b      	ldr	r3, [r3, #0]
   b84ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b84f0:	9301      	str	r3, [sp, #4]
   b84f2:	bd08      	pop	{r3, pc}
   b84f4:	00030228 	.word	0x00030228

000b84f8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b84f8:	b508      	push	{r3, lr}
   b84fa:	4b02      	ldr	r3, [pc, #8]	; (b8504 <hal_i2c_init+0xc>)
   b84fc:	681b      	ldr	r3, [r3, #0]
   b84fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	bd08      	pop	{r3, pc}
   b8504:	00030228 	.word	0x00030228

000b8508 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8508:	b508      	push	{r3, lr}
   b850a:	4b02      	ldr	r3, [pc, #8]	; (b8514 <hal_spi_begin+0xc>)
   b850c:	681b      	ldr	r3, [r3, #0]
   b850e:	681b      	ldr	r3, [r3, #0]
   b8510:	9301      	str	r3, [sp, #4]
   b8512:	bd08      	pop	{r3, pc}
   b8514:	00030230 	.word	0x00030230

000b8518 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8518:	b508      	push	{r3, lr}
   b851a:	4b02      	ldr	r3, [pc, #8]	; (b8524 <hal_spi_transfer+0xc>)
   b851c:	681b      	ldr	r3, [r3, #0]
   b851e:	695b      	ldr	r3, [r3, #20]
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	bd08      	pop	{r3, pc}
   b8524:	00030230 	.word	0x00030230

000b8528 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8528:	b508      	push	{r3, lr}
   b852a:	4b02      	ldr	r3, [pc, #8]	; (b8534 <hal_spi_init+0xc>)
   b852c:	681b      	ldr	r3, [r3, #0]
   b852e:	69db      	ldr	r3, [r3, #28]
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	bd08      	pop	{r3, pc}
   b8534:	00030230 	.word	0x00030230

000b8538 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8538:	b508      	push	{r3, lr}
   b853a:	4b02      	ldr	r3, [pc, #8]	; (b8544 <hal_spi_is_enabled+0xc>)
   b853c:	681b      	ldr	r3, [r3, #0]
   b853e:	6a1b      	ldr	r3, [r3, #32]
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	bd08      	pop	{r3, pc}
   b8544:	00030230 	.word	0x00030230

000b8548 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8548:	b508      	push	{r3, lr}
   b854a:	4b02      	ldr	r3, [pc, #8]	; (b8554 <hal_spi_info+0xc>)
   b854c:	681b      	ldr	r3, [r3, #0]
   b854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8550:	9301      	str	r3, [sp, #4]
   b8552:	bd08      	pop	{r3, pc}
   b8554:	00030230 	.word	0x00030230

000b8558 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8558:	b508      	push	{r3, lr}
   b855a:	4b02      	ldr	r3, [pc, #8]	; (b8564 <hal_spi_set_settings+0xc>)
   b855c:	681b      	ldr	r3, [r3, #0]
   b855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8560:	9301      	str	r3, [sp, #4]
   b8562:	bd08      	pop	{r3, pc}
   b8564:	00030230 	.word	0x00030230

000b8568 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8568:	b508      	push	{r3, lr}
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <hal_spi_acquire+0xc>)
   b856c:	681b      	ldr	r3, [r3, #0]
   b856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8570:	9301      	str	r3, [sp, #4]
   b8572:	bd08      	pop	{r3, pc}
   b8574:	00030230 	.word	0x00030230

000b8578 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8578:	b508      	push	{r3, lr}
   b857a:	4b02      	ldr	r3, [pc, #8]	; (b8584 <hal_spi_release+0xc>)
   b857c:	681b      	ldr	r3, [r3, #0]
   b857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8580:	9301      	str	r3, [sp, #4]
   b8582:	bd08      	pop	{r3, pc}
   b8584:	00030230 	.word	0x00030230

000b8588 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b8588:	b508      	push	{r3, lr}
   b858a:	4b02      	ldr	r3, [pc, #8]	; (b8594 <HAL_Tone_Start+0xc>)
   b858c:	681b      	ldr	r3, [r3, #0]
   b858e:	681b      	ldr	r3, [r3, #0]
   b8590:	9301      	str	r3, [sp, #4]
   b8592:	bd08      	pop	{r3, pc}
   b8594:	00030224 	.word	0x00030224

000b8598 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b8598:	b508      	push	{r3, lr}
   b859a:	4b02      	ldr	r3, [pc, #8]	; (b85a4 <HAL_Tone_Stop+0xc>)
   b859c:	681b      	ldr	r3, [r3, #0]
   b859e:	685b      	ldr	r3, [r3, #4]
   b85a0:	9301      	str	r3, [sp, #4]
   b85a2:	bd08      	pop	{r3, pc}
   b85a4:	00030224 	.word	0x00030224

000b85a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b85a8:	b508      	push	{r3, lr}
   b85aa:	4b02      	ldr	r3, [pc, #8]	; (b85b4 <HAL_USB_USART_Init+0xc>)
   b85ac:	681b      	ldr	r3, [r3, #0]
   b85ae:	681b      	ldr	r3, [r3, #0]
   b85b0:	9301      	str	r3, [sp, #4]
   b85b2:	bd08      	pop	{r3, pc}
   b85b4:	0003024c 	.word	0x0003024c

000b85b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b85b8:	b508      	push	{r3, lr}
   b85ba:	4b02      	ldr	r3, [pc, #8]	; (b85c4 <HAL_USB_USART_Begin+0xc>)
   b85bc:	681b      	ldr	r3, [r3, #0]
   b85be:	685b      	ldr	r3, [r3, #4]
   b85c0:	9301      	str	r3, [sp, #4]
   b85c2:	bd08      	pop	{r3, pc}
   b85c4:	0003024c 	.word	0x0003024c

000b85c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <HAL_USB_USART_Available_Data+0xc>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	691b      	ldr	r3, [r3, #16]
   b85d0:	9301      	str	r3, [sp, #4]
   b85d2:	bd08      	pop	{r3, pc}
   b85d4:	0003024c 	.word	0x0003024c

000b85d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	695b      	ldr	r3, [r3, #20]
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	0003024c 	.word	0x0003024c

000b85e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <HAL_USB_USART_Receive_Data+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	699b      	ldr	r3, [r3, #24]
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	0003024c 	.word	0x0003024c

000b85f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <HAL_USB_USART_Send_Data+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	69db      	ldr	r3, [r3, #28]
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	0003024c 	.word	0x0003024c

000b8608 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <HAL_USB_USART_Flush_Data+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	6a1b      	ldr	r3, [r3, #32]
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	0003024c 	.word	0x0003024c

000b8618 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b02      	ldr	r3, [pc, #8]	; (b8624 <panic_+0xc>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8620:	9301      	str	r3, [sp, #4]
   b8622:	bd08      	pop	{r3, pc}
   b8624:	00030260 	.word	0x00030260

000b8628 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8628:	b508      	push	{r3, lr}
   b862a:	4b02      	ldr	r3, [pc, #8]	; (b8634 <set_system_mode+0xc>)
   b862c:	681b      	ldr	r3, [r3, #0]
   b862e:	685b      	ldr	r3, [r3, #4]
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	bd08      	pop	{r3, pc}
   b8634:	00030220 	.word	0x00030220

000b8638 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8638:	b508      	push	{r3, lr}
   b863a:	4b02      	ldr	r3, [pc, #8]	; (b8644 <system_delay_ms+0xc>)
   b863c:	681b      	ldr	r3, [r3, #0]
   b863e:	695b      	ldr	r3, [r3, #20]
   b8640:	9301      	str	r3, [sp, #4]
   b8642:	bd08      	pop	{r3, pc}
   b8644:	00030220 	.word	0x00030220

000b8648 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8648:	b508      	push	{r3, lr}
   b864a:	4b03      	ldr	r3, [pc, #12]	; (b8658 <system_ctrl_set_app_request_handler+0x10>)
   b864c:	681b      	ldr	r3, [r3, #0]
   b864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8652:	9301      	str	r3, [sp, #4]
   b8654:	bd08      	pop	{r3, pc}
   b8656:	0000      	.short	0x0000
   b8658:	00030220 	.word	0x00030220

000b865c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b865c:	b508      	push	{r3, lr}
   b865e:	4b03      	ldr	r3, [pc, #12]	; (b866c <system_ctrl_set_result+0x10>)
   b8660:	681b      	ldr	r3, [r3, #0]
   b8662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8666:	9301      	str	r3, [sp, #4]
   b8668:	bd08      	pop	{r3, pc}
   b866a:	0000      	.short	0x0000
   b866c:	00030220 	.word	0x00030220

000b8670 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8670:	b508      	push	{r3, lr}
   b8672:	4b02      	ldr	r3, [pc, #8]	; (b867c <network_connect+0xc>)
   b8674:	681b      	ldr	r3, [r3, #0]
   b8676:	685b      	ldr	r3, [r3, #4]
   b8678:	9301      	str	r3, [sp, #4]
   b867a:	bd08      	pop	{r3, pc}
   b867c:	00030240 	.word	0x00030240

000b8680 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8680:	b508      	push	{r3, lr}
   b8682:	4b02      	ldr	r3, [pc, #8]	; (b868c <network_connecting+0xc>)
   b8684:	681b      	ldr	r3, [r3, #0]
   b8686:	689b      	ldr	r3, [r3, #8]
   b8688:	9301      	str	r3, [sp, #4]
   b868a:	bd08      	pop	{r3, pc}
   b868c:	00030240 	.word	0x00030240

000b8690 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8690:	b508      	push	{r3, lr}
   b8692:	4b02      	ldr	r3, [pc, #8]	; (b869c <network_disconnect+0xc>)
   b8694:	681b      	ldr	r3, [r3, #0]
   b8696:	68db      	ldr	r3, [r3, #12]
   b8698:	9301      	str	r3, [sp, #4]
   b869a:	bd08      	pop	{r3, pc}
   b869c:	00030240 	.word	0x00030240

000b86a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b86a0:	b508      	push	{r3, lr}
   b86a2:	4b02      	ldr	r3, [pc, #8]	; (b86ac <network_ready+0xc>)
   b86a4:	681b      	ldr	r3, [r3, #0]
   b86a6:	691b      	ldr	r3, [r3, #16]
   b86a8:	9301      	str	r3, [sp, #4]
   b86aa:	bd08      	pop	{r3, pc}
   b86ac:	00030240 	.word	0x00030240

000b86b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b86b0:	b508      	push	{r3, lr}
   b86b2:	4b02      	ldr	r3, [pc, #8]	; (b86bc <network_on+0xc>)
   b86b4:	681b      	ldr	r3, [r3, #0]
   b86b6:	695b      	ldr	r3, [r3, #20]
   b86b8:	9301      	str	r3, [sp, #4]
   b86ba:	bd08      	pop	{r3, pc}
   b86bc:	00030240 	.word	0x00030240

000b86c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b86c0:	b508      	push	{r3, lr}
   b86c2:	4b02      	ldr	r3, [pc, #8]	; (b86cc <network_off+0xc>)
   b86c4:	681b      	ldr	r3, [r3, #0]
   b86c6:	699b      	ldr	r3, [r3, #24]
   b86c8:	9301      	str	r3, [sp, #4]
   b86ca:	bd08      	pop	{r3, pc}
   b86cc:	00030240 	.word	0x00030240

000b86d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b86d0:	b508      	push	{r3, lr}
   b86d2:	4b02      	ldr	r3, [pc, #8]	; (b86dc <network_listen+0xc>)
   b86d4:	681b      	ldr	r3, [r3, #0]
   b86d6:	69db      	ldr	r3, [r3, #28]
   b86d8:	9301      	str	r3, [sp, #4]
   b86da:	bd08      	pop	{r3, pc}
   b86dc:	00030240 	.word	0x00030240

000b86e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b86e0:	b508      	push	{r3, lr}
   b86e2:	4b02      	ldr	r3, [pc, #8]	; (b86ec <network_listening+0xc>)
   b86e4:	681b      	ldr	r3, [r3, #0]
   b86e6:	6a1b      	ldr	r3, [r3, #32]
   b86e8:	9301      	str	r3, [sp, #4]
   b86ea:	bd08      	pop	{r3, pc}
   b86ec:	00030240 	.word	0x00030240

000b86f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b86f0:	b508      	push	{r3, lr}
   b86f2:	4b02      	ldr	r3, [pc, #8]	; (b86fc <network_set_listen_timeout+0xc>)
   b86f4:	681b      	ldr	r3, [r3, #0]
   b86f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b86f8:	9301      	str	r3, [sp, #4]
   b86fa:	bd08      	pop	{r3, pc}
   b86fc:	00030240 	.word	0x00030240

000b8700 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8700:	b508      	push	{r3, lr}
   b8702:	4b02      	ldr	r3, [pc, #8]	; (b870c <network_get_listen_timeout+0xc>)
   b8704:	681b      	ldr	r3, [r3, #0]
   b8706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8708:	9301      	str	r3, [sp, #4]
   b870a:	bd08      	pop	{r3, pc}
   b870c:	00030240 	.word	0x00030240

000b8710 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8710:	b508      	push	{r3, lr}
   b8712:	4b02      	ldr	r3, [pc, #8]	; (b871c <network_is_on+0xc>)
   b8714:	681b      	ldr	r3, [r3, #0]
   b8716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8718:	9301      	str	r3, [sp, #4]
   b871a:	bd08      	pop	{r3, pc}
   b871c:	00030240 	.word	0x00030240

000b8720 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b02      	ldr	r3, [pc, #8]	; (b872c <network_is_off+0xc>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8728:	9301      	str	r3, [sp, #4]
   b872a:	bd08      	pop	{r3, pc}
   b872c:	00030240 	.word	0x00030240

000b8730 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8730:	b508      	push	{r3, lr}
   b8732:	4b02      	ldr	r3, [pc, #8]	; (b873c <spark_set_random_seed_from_cloud_handler+0xc>)
   b8734:	681b      	ldr	r3, [r3, #0]
   b8736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8738:	9301      	str	r3, [sp, #4]
   b873a:	bd08      	pop	{r3, pc}
   b873c:	00030244 	.word	0x00030244

000b8740 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b8740:	b508      	push	{r3, lr}
   b8742:	4b02      	ldr	r3, [pc, #8]	; (b874c <spark_cloud_disconnect+0xc>)
   b8744:	681b      	ldr	r3, [r3, #0]
   b8746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8748:	9301      	str	r3, [sp, #4]
   b874a:	bd08      	pop	{r3, pc}
   b874c:	00030244 	.word	0x00030244

000b8750 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8750:	b508      	push	{r3, lr}
   b8752:	4b02      	ldr	r3, [pc, #8]	; (b875c <malloc+0xc>)
   b8754:	681b      	ldr	r3, [r3, #0]
   b8756:	681b      	ldr	r3, [r3, #0]
   b8758:	9301      	str	r3, [sp, #4]
   b875a:	bd08      	pop	{r3, pc}
   b875c:	0003021c 	.word	0x0003021c

000b8760 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8760:	b508      	push	{r3, lr}
   b8762:	4b02      	ldr	r3, [pc, #8]	; (b876c <free+0xc>)
   b8764:	681b      	ldr	r3, [r3, #0]
   b8766:	685b      	ldr	r3, [r3, #4]
   b8768:	9301      	str	r3, [sp, #4]
   b876a:	bd08      	pop	{r3, pc}
   b876c:	0003021c 	.word	0x0003021c

000b8770 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8770:	b508      	push	{r3, lr}
   b8772:	4b02      	ldr	r3, [pc, #8]	; (b877c <realloc+0xc>)
   b8774:	681b      	ldr	r3, [r3, #0]
   b8776:	689b      	ldr	r3, [r3, #8]
   b8778:	9301      	str	r3, [sp, #4]
   b877a:	bd08      	pop	{r3, pc}
   b877c:	0003021c 	.word	0x0003021c

000b8780 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b02      	ldr	r3, [pc, #8]	; (b878c <snprintf+0xc>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	69db      	ldr	r3, [r3, #28]
   b8788:	9301      	str	r3, [sp, #4]
   b878a:	bd08      	pop	{r3, pc}
   b878c:	0003021c 	.word	0x0003021c

000b8790 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <vsnprintf+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	0003021c 	.word	0x0003021c

000b87a0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <_malloc_r+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	0003021c 	.word	0x0003021c

000b87b0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <__assert_func+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	0003021c 	.word	0x0003021c

000b87c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <newlib_impure_ptr_callback+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	0003021c 	.word	0x0003021c

000b87d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b87d0:	2200      	movs	r2, #0
   b87d2:	6840      	ldr	r0, [r0, #4]
   b87d4:	4611      	mov	r1, r2
   b87d6:	f7ff bf83 	b.w	b86e0 <network_listening>

000b87da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b87da:	2200      	movs	r2, #0
   b87dc:	6840      	ldr	r0, [r0, #4]
   b87de:	4611      	mov	r1, r2
   b87e0:	f7ff bf8e 	b.w	b8700 <network_get_listen_timeout>

000b87e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b87e4:	6840      	ldr	r0, [r0, #4]
   b87e6:	2200      	movs	r2, #0
   b87e8:	f7ff bf82 	b.w	b86f0 <network_set_listen_timeout>

000b87ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b87ec:	6840      	ldr	r0, [r0, #4]
   b87ee:	2200      	movs	r2, #0
   b87f0:	f081 0101 	eor.w	r1, r1, #1
   b87f4:	f7ff bf6c 	b.w	b86d0 <network_listen>

000b87f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b87f8:	2300      	movs	r3, #0
   b87fa:	6840      	ldr	r0, [r0, #4]
   b87fc:	461a      	mov	r2, r3
   b87fe:	4619      	mov	r1, r3
   b8800:	f7ff bf5e 	b.w	b86c0 <network_off>

000b8804 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8804:	2300      	movs	r3, #0
   b8806:	6840      	ldr	r0, [r0, #4]
   b8808:	461a      	mov	r2, r3
   b880a:	4619      	mov	r1, r3
   b880c:	f7ff bf50 	b.w	b86b0 <network_on>

000b8810 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8810:	2200      	movs	r2, #0
   b8812:	6840      	ldr	r0, [r0, #4]
   b8814:	4611      	mov	r1, r2
   b8816:	f7ff bf43 	b.w	b86a0 <network_ready>

000b881a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b881a:	2200      	movs	r2, #0
   b881c:	6840      	ldr	r0, [r0, #4]
   b881e:	4611      	mov	r1, r2
   b8820:	f7ff bf2e 	b.w	b8680 <network_connecting>

000b8824 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8824:	6840      	ldr	r0, [r0, #4]
   b8826:	2200      	movs	r2, #0
   b8828:	2102      	movs	r1, #2
   b882a:	f7ff bf31 	b.w	b8690 <network_disconnect>

000b882e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b882e:	2300      	movs	r3, #0
   b8830:	6840      	ldr	r0, [r0, #4]
   b8832:	461a      	mov	r2, r3
   b8834:	f7ff bf1c 	b.w	b8670 <network_connect>

000b8838 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8838:	4b02      	ldr	r3, [pc, #8]	; (b8844 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b883a:	2203      	movs	r2, #3
   b883c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b883e:	4a02      	ldr	r2, [pc, #8]	; (b8848 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8840:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8842:	4770      	bx	lr
   b8844:	2003e6bc 	.word	0x2003e6bc
   b8848:	000bb390 	.word	0x000bb390

000b884c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b884c:	2100      	movs	r1, #0
   b884e:	f7ff be93 	b.w	b8578 <hal_spi_release>

000b8852 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8852:	2100      	movs	r1, #0
   b8854:	f7ff be88 	b.w	b8568 <hal_spi_acquire>

000b8858 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8858:	b510      	push	{r4, lr}
   b885a:	4604      	mov	r4, r0
   b885c:	4608      	mov	r0, r1
{
    _spi = spi;
   b885e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8860:	f7ff fe62 	bl	b8528 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8864:	2300      	movs	r3, #0
   b8866:	6063      	str	r3, [r4, #4]
}
   b8868:	4620      	mov	r0, r4
   b886a:	bd10      	pop	{r4, pc}

000b886c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b886c:	b513      	push	{r0, r1, r4, lr}
   b886e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8870:	7800      	ldrb	r0, [r0, #0]
   b8872:	f7ff ffee 	bl	b8852 <_ZN8SPIClass4lockEv.isra.0>
   b8876:	b958      	cbnz	r0, b8890 <_ZN8SPIClass5beginEv+0x24>
   b8878:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b887a:	9001      	str	r0, [sp, #4]
   b887c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8880:	f7ff fe42 	bl	b8508 <hal_spi_begin>
        unlock();
   b8884:	9801      	ldr	r0, [sp, #4]
    }
}
   b8886:	b002      	add	sp, #8
   b8888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b888c:	f7ff bfde 	b.w	b884c <_ZN8SPIClass6unlockEv.isra.0>
   b8890:	b002      	add	sp, #8
   b8892:	bd10      	pop	{r4, pc}

000b8894 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8894:	7800      	ldrb	r0, [r0, #0]
   b8896:	f7ff bfd9 	b.w	b884c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b889c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b889c:	0840      	lsrs	r0, r0, #1
{
   b889e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b88a0:	6018      	str	r0, [r3, #0]
   b88a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b88a4:	6818      	ldr	r0, [r3, #0]
   b88a6:	4288      	cmp	r0, r1
   b88a8:	b2e5      	uxtb	r5, r4
   b88aa:	d906      	bls.n	b88ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b88ac:	3401      	adds	r4, #1
   b88ae:	2c08      	cmp	r4, #8
   b88b0:	d002      	beq.n	b88b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b88b2:	0840      	lsrs	r0, r0, #1
   b88b4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b88b6:	e7f5      	b.n	b88a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b88b8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b88bc:	5d5b      	ldrb	r3, [r3, r5]
   b88be:	7013      	strb	r3, [r2, #0]
}
   b88c0:	bd30      	pop	{r4, r5, pc}
   b88c2:	bf00      	nop
   b88c4:	000bb3c4 	.word	0x000bb3c4

000b88c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b88c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88cc:	4606      	mov	r6, r0
   b88ce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b88d0:	7800      	ldrb	r0, [r0, #0]
{
   b88d2:	460c      	mov	r4, r1
    CHECK(lock());
   b88d4:	f7ff ffbd 	bl	b8852 <_ZN8SPIClass4lockEv.isra.0>
   b88d8:	2800      	cmp	r0, #0
   b88da:	db1b      	blt.n	b8914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b88dc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b88de:	2214      	movs	r2, #20
   b88e0:	2100      	movs	r1, #0
   b88e2:	a809      	add	r0, sp, #36	; 0x24
   b88e4:	f001 f8c8 	bl	b9a78 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b88e8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b88ea:	2200      	movs	r2, #0
   b88ec:	a909      	add	r1, sp, #36	; 0x24
   b88ee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b88f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b88f4:	f7ff fe28 	bl	b8548 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b88f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b88fc:	b113      	cbz	r3, b8904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b88fe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8902:	b155      	cbz	r5, b891a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8904:	2700      	movs	r7, #0
   b8906:	46b9      	mov	r9, r7
   b8908:	46b8      	mov	r8, r7
   b890a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b890c:	7923      	ldrb	r3, [r4, #4]
   b890e:	b15d      	cbz	r5, b8928 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8910:	b1c3      	cbz	r3, b8944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8912:	2000      	movs	r0, #0
}
   b8914:	b00f      	add	sp, #60	; 0x3c
   b8916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b891a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b891e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8922:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8926:	e7f1      	b.n	b890c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8928:	2b00      	cmp	r3, #0
   b892a:	d135      	bne.n	b8998 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b892c:	68a3      	ldr	r3, [r4, #8]
   b892e:	4543      	cmp	r3, r8
   b8930:	d108      	bne.n	b8944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8932:	f88d 9020 	strb.w	r9, [sp, #32]
   b8936:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b893a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b893e:	89a3      	ldrh	r3, [r4, #12]
   b8940:	429a      	cmp	r2, r3
   b8942:	d0e6      	beq.n	b8912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8944:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8946:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8948:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b894c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b894e:	ab04      	add	r3, sp, #16
   b8950:	f10d 020f 	add.w	r2, sp, #15
   b8954:	f7ff ffa2 	bl	b889c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8958:	7921      	ldrb	r1, [r4, #4]
   b895a:	b985      	cbnz	r5, b897e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b895c:	b989      	cbnz	r1, b8982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b895e:	68a3      	ldr	r3, [r4, #8]
   b8960:	4543      	cmp	r3, r8
   b8962:	d30e      	bcc.n	b8982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8964:	f88d 9020 	strb.w	r9, [sp, #32]
   b8968:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b896c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8970:	89a3      	ldrh	r3, [r4, #12]
   b8972:	429a      	cmp	r2, r3
   b8974:	d105      	bne.n	b8982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8976:	9b04      	ldr	r3, [sp, #16]
   b8978:	4543      	cmp	r3, r8
   b897a:	d102      	bne.n	b8982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b897c:	e7c9      	b.n	b8912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b897e:	2900      	cmp	r1, #0
   b8980:	d1f9      	bne.n	b8976 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8982:	2300      	movs	r3, #0
   b8984:	9301      	str	r3, [sp, #4]
   b8986:	7b63      	ldrb	r3, [r4, #13]
   b8988:	9300      	str	r3, [sp, #0]
   b898a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b898e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8990:	7830      	ldrb	r0, [r6, #0]
   b8992:	f7ff fde1 	bl	b8558 <hal_spi_set_settings>
   b8996:	e7bc      	b.n	b8912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8998:	e9cd 5500 	strd	r5, r5, [sp]
   b899c:	462b      	mov	r3, r5
   b899e:	462a      	mov	r2, r5
   b89a0:	2101      	movs	r1, #1
   b89a2:	e7f5      	b.n	b8990 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b89a4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b89a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b89a6:	7800      	ldrb	r0, [r0, #0]
   b89a8:	f7ff fdb6 	bl	b8518 <hal_spi_transfer>
}
   b89ac:	b2c0      	uxtb	r0, r0
   b89ae:	bd08      	pop	{r3, pc}

000b89b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b89b0:	4b05      	ldr	r3, [pc, #20]	; (b89c8 <_GLOBAL__sub_I_System+0x18>)
   b89b2:	2202      	movs	r2, #2
   b89b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b89b6:	4b05      	ldr	r3, [pc, #20]	; (b89cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b89b8:	4a05      	ldr	r2, [pc, #20]	; (b89d0 <_GLOBAL__sub_I_System+0x20>)
   b89ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b89bc:	2000      	movs	r0, #0
   b89be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b89c2:	f7ff be31 	b.w	b8628 <set_system_mode>
   b89c6:	bf00      	nop
   b89c8:	2003e6d0 	.word	0x2003e6d0
   b89cc:	2003e6c4 	.word	0x2003e6c4
   b89d0:	ffff0000 	.word	0xffff0000

000b89d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b89d4:	b510      	push	{r4, lr}
   b89d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b89d8:	f001 f89c 	bl	b9b14 <strlen>
   b89dc:	3801      	subs	r0, #1
   b89de:	1823      	adds	r3, r4, r0
   b89e0:	4620      	mov	r0, r4
	while(i<j){
   b89e2:	4283      	cmp	r3, r0
   b89e4:	d906      	bls.n	b89f4 <_Z11str_reversePc+0x20>
		c = *i;
   b89e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b89e8:	7819      	ldrb	r1, [r3, #0]
   b89ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b89ee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b89f2:	e7f6      	b.n	b89e2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b89f4:	bd10      	pop	{r4, pc}

000b89f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b89f6:	b570      	push	{r4, r5, r6, lr}
   b89f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b89fa:	1e91      	subs	r1, r2, #2
   b89fc:	2922      	cmp	r1, #34	; 0x22
   b89fe:	d81d      	bhi.n	b8a3c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8a00:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8a02:	b930      	cbnz	r0, b8a12 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8a04:	4423      	add	r3, r4
            *ptr++ = '0';
   b8a06:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8a08:	429d      	cmp	r5, r3
   b8a0a:	d210      	bcs.n	b8a2e <ultoa+0x38>
            *ptr++ = '0';
   b8a0c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8a10:	e7fa      	b.n	b8a08 <ultoa+0x12>
            result.quot = a/radix;
   b8a12:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8a16:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8a1a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8a1c:	2809      	cmp	r0, #9
                *ptr += '0';
   b8a1e:	bf94      	ite	ls
   b8a20:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8a22:	3157      	addhi	r1, #87	; 0x57
   b8a24:	b2c9      	uxtb	r1, r1
   b8a26:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8a2a:	4630      	mov	r0, r6
	while(a){
   b8a2c:	e7e9      	b.n	b8a02 <ultoa+0xc>

	*ptr = '\0';
   b8a2e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8a30:	4620      	mov	r0, r4
	*ptr = '\0';
   b8a32:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8a34:	f7ff ffce 	bl	b89d4 <_Z11str_reversePc>
	return buffer;
   b8a38:	4620      	mov	r0, r4
}
   b8a3a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8a3c:	2000      	movs	r0, #0
   b8a3e:	e7fc      	b.n	b8a3a <ultoa+0x44>

000b8a40 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8a40:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8a42:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8a44:	460c      	mov	r4, r1
   b8a46:	4615      	mov	r5, r2
	if(a<0){
   b8a48:	da0e      	bge.n	b8a68 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8a4e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8a52:	bf14      	ite	ne
   b8a54:	4258      	negne	r0, r3
   b8a56:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8a58:	2301      	movs	r3, #1
		*buffer = '-';
   b8a5a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8a5c:	462a      	mov	r2, r5
   b8a5e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8a60:	f7ff ffc9 	bl	b89f6 <ultoa>
	}
	return buffer;
}
   b8a64:	4620      	mov	r0, r4
   b8a66:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8a68:	2301      	movs	r3, #1
   b8a6a:	e7f9      	b.n	b8a60 <itoa+0x20>

000b8a6c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8a6c:	b510      	push	{r4, lr}
   b8a6e:	4604      	mov	r4, r0
{
	free(buffer);
   b8a70:	6800      	ldr	r0, [r0, #0]
   b8a72:	f7ff fe75 	bl	b8760 <free>
}
   b8a76:	4620      	mov	r0, r4
   b8a78:	bd10      	pop	{r4, pc}

000b8a7a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8a7a:	b510      	push	{r4, lr}
   b8a7c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8a7e:	6800      	ldr	r0, [r0, #0]
   b8a80:	b108      	cbz	r0, b8a86 <_ZN6String10invalidateEv+0xc>
   b8a82:	f7ff fe6d 	bl	b8760 <free>
	buffer = NULL;
   b8a86:	2300      	movs	r3, #0
	capacity = len = 0;
   b8a88:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8a8c:	6023      	str	r3, [r4, #0]
}
   b8a8e:	bd10      	pop	{r4, pc}

000b8a90 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8a90:	b538      	push	{r3, r4, r5, lr}
   b8a92:	4604      	mov	r4, r0
   b8a94:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8a96:	6800      	ldr	r0, [r0, #0]
   b8a98:	3101      	adds	r1, #1
   b8a9a:	f7ff fe69 	bl	b8770 <realloc>
	if (newbuffer) {
   b8a9e:	b110      	cbz	r0, b8aa6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8aa0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8aa4:	2001      	movs	r0, #1
	}
	return 0;
}
   b8aa6:	bd38      	pop	{r3, r4, r5, pc}

000b8aa8 <_ZN6String7reserveEj>:
{
   b8aa8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8aaa:	6803      	ldr	r3, [r0, #0]
{
   b8aac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8aae:	b123      	cbz	r3, b8aba <_ZN6String7reserveEj+0x12>
   b8ab0:	6843      	ldr	r3, [r0, #4]
   b8ab2:	428b      	cmp	r3, r1
   b8ab4:	d301      	bcc.n	b8aba <_ZN6String7reserveEj+0x12>
   b8ab6:	2001      	movs	r0, #1
}
   b8ab8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8aba:	4620      	mov	r0, r4
   b8abc:	f7ff ffe8 	bl	b8a90 <_ZN6String12changeBufferEj>
   b8ac0:	2800      	cmp	r0, #0
   b8ac2:	d0f9      	beq.n	b8ab8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8ac4:	68a3      	ldr	r3, [r4, #8]
   b8ac6:	2b00      	cmp	r3, #0
   b8ac8:	d1f5      	bne.n	b8ab6 <_ZN6String7reserveEj+0xe>
   b8aca:	6822      	ldr	r2, [r4, #0]
   b8acc:	7013      	strb	r3, [r2, #0]
   b8ace:	e7f2      	b.n	b8ab6 <_ZN6String7reserveEj+0xe>

000b8ad0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8ad2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8ad4:	4611      	mov	r1, r2
   b8ad6:	9201      	str	r2, [sp, #4]
{
   b8ad8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8ada:	f7ff ffe5 	bl	b8aa8 <_ZN6String7reserveEj>
   b8ade:	9a01      	ldr	r2, [sp, #4]
   b8ae0:	b928      	cbnz	r0, b8aee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8ae2:	4620      	mov	r0, r4
   b8ae4:	f7ff ffc9 	bl	b8a7a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8ae8:	4620      	mov	r0, r4
   b8aea:	b003      	add	sp, #12
   b8aec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8aee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8af0:	4629      	mov	r1, r5
   b8af2:	6820      	ldr	r0, [r4, #0]
   b8af4:	f000 ffb2 	bl	b9a5c <memcpy>
	buffer[len] = 0;
   b8af8:	6822      	ldr	r2, [r4, #0]
   b8afa:	68a3      	ldr	r3, [r4, #8]
   b8afc:	2100      	movs	r1, #0
   b8afe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8b00:	e7f2      	b.n	b8ae8 <_ZN6String4copyEPKcj+0x18>

000b8b02 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8b02:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8b04:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8b06:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8b0a:	4604      	mov	r4, r0
	len = 0;
   b8b0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b0e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8b10:	b141      	cbz	r1, b8b24 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8b12:	4608      	mov	r0, r1
   b8b14:	9101      	str	r1, [sp, #4]
   b8b16:	f000 fffd 	bl	b9b14 <strlen>
   b8b1a:	9901      	ldr	r1, [sp, #4]
   b8b1c:	4602      	mov	r2, r0
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f7ff ffd6 	bl	b8ad0 <_ZN6String4copyEPKcj>
}
   b8b24:	4620      	mov	r0, r4
   b8b26:	b002      	add	sp, #8
   b8b28:	bd10      	pop	{r4, pc}

000b8b2a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8b2a:	4288      	cmp	r0, r1
{
   b8b2c:	b510      	push	{r4, lr}
   b8b2e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8b30:	d005      	beq.n	b8b3e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8b32:	680b      	ldr	r3, [r1, #0]
   b8b34:	b12b      	cbz	r3, b8b42 <_ZN6StringaSERKS_+0x18>
   b8b36:	688a      	ldr	r2, [r1, #8]
   b8b38:	4619      	mov	r1, r3
   b8b3a:	f7ff ffc9 	bl	b8ad0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b3e:	4620      	mov	r0, r4
   b8b40:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b42:	f7ff ff9a 	bl	b8a7a <_ZN6String10invalidateEv>
   b8b46:	e7fa      	b.n	b8b3e <_ZN6StringaSERKS_+0x14>

000b8b48 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8b48:	b510      	push	{r4, lr}
	buffer = NULL;
   b8b4a:	2300      	movs	r3, #0
String::String(const String &value)
   b8b4c:	4604      	mov	r4, r0
	capacity = 0;
   b8b4e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8b52:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8b54:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8b56:	f7ff ffe8 	bl	b8b2a <_ZN6StringaSERKS_>
}
   b8b5a:	4620      	mov	r0, r4
   b8b5c:	bd10      	pop	{r4, pc}

000b8b5e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8b5e:	b513      	push	{r0, r1, r4, lr}
   b8b60:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8b62:	b159      	cbz	r1, b8b7c <_ZN6StringaSEPKc+0x1e>
   b8b64:	4608      	mov	r0, r1
   b8b66:	9101      	str	r1, [sp, #4]
   b8b68:	f000 ffd4 	bl	b9b14 <strlen>
   b8b6c:	9901      	ldr	r1, [sp, #4]
   b8b6e:	4602      	mov	r2, r0
   b8b70:	4620      	mov	r0, r4
   b8b72:	f7ff ffad 	bl	b8ad0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8b76:	4620      	mov	r0, r4
   b8b78:	b002      	add	sp, #8
   b8b7a:	bd10      	pop	{r4, pc}
	else invalidate();
   b8b7c:	f7ff ff7d 	bl	b8a7a <_ZN6String10invalidateEv>
   b8b80:	e7f9      	b.n	b8b76 <_ZN6StringaSEPKc+0x18>

000b8b82 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8b82:	b510      	push	{r4, lr}
   b8b84:	4604      	mov	r4, r0
   b8b86:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8b88:	2300      	movs	r3, #0
	capacity = 0;
   b8b8a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8b8e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8b90:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8b92:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8b94:	a901      	add	r1, sp, #4
   b8b96:	f7ff ff53 	bl	b8a40 <itoa>
	*this = buf;
   b8b9a:	a901      	add	r1, sp, #4
   b8b9c:	4620      	mov	r0, r4
   b8b9e:	f7ff ffde 	bl	b8b5e <_ZN6StringaSEPKc>
}
   b8ba2:	4620      	mov	r0, r4
   b8ba4:	b00a      	add	sp, #40	; 0x28
   b8ba6:	bd10      	pop	{r4, pc}

000b8ba8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8ba8:	b570      	push	{r4, r5, r6, lr}
   b8baa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8bac:	460e      	mov	r6, r1
   b8bae:	b909      	cbnz	r1, b8bb4 <_ZN6String6concatEPKcj+0xc>
   b8bb0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8bb2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8bb4:	b16a      	cbz	r2, b8bd2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8bb6:	6884      	ldr	r4, [r0, #8]
   b8bb8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8bba:	4621      	mov	r1, r4
   b8bbc:	f7ff ff74 	bl	b8aa8 <_ZN6String7reserveEj>
   b8bc0:	2800      	cmp	r0, #0
   b8bc2:	d0f5      	beq.n	b8bb0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8bc4:	6828      	ldr	r0, [r5, #0]
   b8bc6:	68ab      	ldr	r3, [r5, #8]
   b8bc8:	4631      	mov	r1, r6
   b8bca:	4418      	add	r0, r3
   b8bcc:	f000 ff9a 	bl	b9b04 <strcpy>
	len = newlen;
   b8bd0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8bd2:	2001      	movs	r0, #1
   b8bd4:	e7ed      	b.n	b8bb2 <_ZN6String6concatEPKcj+0xa>

000b8bd6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8bd6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8bd8:	688a      	ldr	r2, [r1, #8]
   b8bda:	6809      	ldr	r1, [r1, #0]
{
   b8bdc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8bde:	f7ff ffe3 	bl	b8ba8 <_ZN6String6concatEPKcj>
   b8be2:	b910      	cbnz	r0, b8bea <_ZplRK15StringSumHelperRK6String+0x14>
   b8be4:	4620      	mov	r0, r4
   b8be6:	f7ff ff48 	bl	b8a7a <_ZN6String10invalidateEv>
	return a;
}
   b8bea:	4620      	mov	r0, r4
   b8bec:	bd10      	pop	{r4, pc}

000b8bee <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8bee:	b513      	push	{r0, r1, r4, lr}
   b8bf0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8bf2:	b929      	cbnz	r1, b8c00 <_ZplRK15StringSumHelperPKc+0x12>
   b8bf4:	4620      	mov	r0, r4
   b8bf6:	f7ff ff40 	bl	b8a7a <_ZN6String10invalidateEv>
	return a;
}
   b8bfa:	4620      	mov	r0, r4
   b8bfc:	b002      	add	sp, #8
   b8bfe:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8c00:	4608      	mov	r0, r1
   b8c02:	9101      	str	r1, [sp, #4]
   b8c04:	f000 ff86 	bl	b9b14 <strlen>
   b8c08:	9901      	ldr	r1, [sp, #4]
   b8c0a:	4602      	mov	r2, r0
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f7ff ffcb 	bl	b8ba8 <_ZN6String6concatEPKcj>
   b8c12:	2800      	cmp	r0, #0
   b8c14:	d0ee      	beq.n	b8bf4 <_ZplRK15StringSumHelperPKc+0x6>
   b8c16:	e7f0      	b.n	b8bfa <_ZplRK15StringSumHelperPKc+0xc>

000b8c18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8c18:	4802      	ldr	r0, [pc, #8]	; (b8c24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8c1a:	2300      	movs	r3, #0
   b8c1c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8c1e:	f7ff bbcb 	b.w	b83b8 <os_mutex_recursive_create>
   b8c22:	bf00      	nop
   b8c24:	2003e6d4 	.word	0x2003e6d4

000b8c28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c2a:	4606      	mov	r6, r0
   b8c2c:	460d      	mov	r5, r1
  size_t n = 0;
   b8c2e:	188f      	adds	r7, r1, r2
   b8c30:	2400      	movs	r4, #0
  while (size--) {
   b8c32:	42bd      	cmp	r5, r7
   b8c34:	d00c      	beq.n	b8c50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8c36:	6833      	ldr	r3, [r6, #0]
   b8c38:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8c3c:	689b      	ldr	r3, [r3, #8]
   b8c3e:	4630      	mov	r0, r6
   b8c40:	4798      	blx	r3
     if (chunk>=0)
   b8c42:	1e03      	subs	r3, r0, #0
   b8c44:	db01      	blt.n	b8c4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8c46:	441c      	add	r4, r3
  while (size--) {
   b8c48:	e7f3      	b.n	b8c32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8c4a:	2c00      	cmp	r4, #0
   b8c4c:	bf08      	it	eq
   b8c4e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8c50:	4620      	mov	r0, r4
   b8c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8c54:	b513      	push	{r0, r1, r4, lr}
   b8c56:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8c58:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8c5a:	b159      	cbz	r1, b8c74 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8c5c:	9101      	str	r1, [sp, #4]
   b8c5e:	f000 ff59 	bl	b9b14 <strlen>
   b8c62:	6823      	ldr	r3, [r4, #0]
   b8c64:	9901      	ldr	r1, [sp, #4]
   b8c66:	68db      	ldr	r3, [r3, #12]
   b8c68:	4602      	mov	r2, r0
   b8c6a:	4620      	mov	r0, r4
    }
   b8c6c:	b002      	add	sp, #8
   b8c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8c72:	4718      	bx	r3
    }
   b8c74:	b002      	add	sp, #8
   b8c76:	bd10      	pop	{r4, pc}

000b8c78 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8c78:	b508      	push	{r3, lr}
  return write(str);
   b8c7a:	f7ff ffeb 	bl	b8c54 <_ZN5Print5writeEPKc>
}
   b8c7e:	bd08      	pop	{r3, pc}

000b8c80 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8c80:	6803      	ldr	r3, [r0, #0]
   b8c82:	689b      	ldr	r3, [r3, #8]
   b8c84:	4718      	bx	r3

000b8c86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8c86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8c88:	210d      	movs	r1, #13
{
   b8c8a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8c8c:	f7ff fff8 	bl	b8c80 <_ZN5Print5printEc>
  n += print('\n');
   b8c90:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8c92:	4604      	mov	r4, r0
  n += print('\n');
   b8c94:	4628      	mov	r0, r5
   b8c96:	f7ff fff3 	bl	b8c80 <_ZN5Print5printEc>
  return n;
}
   b8c9a:	4420      	add	r0, r4
   b8c9c:	bd38      	pop	{r3, r4, r5, pc}

000b8c9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8c9e:	b538      	push	{r3, r4, r5, lr}
   b8ca0:	4605      	mov	r5, r0
  return write(str);
   b8ca2:	f7ff ffd7 	bl	b8c54 <_ZN5Print5writeEPKc>
   b8ca6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8ca8:	4628      	mov	r0, r5
   b8caa:	f7ff ffec 	bl	b8c86 <_ZN5Print7printlnEv>
  return n;
}
   b8cae:	4420      	add	r0, r4
   b8cb0:	bd38      	pop	{r3, r4, r5, pc}

000b8cb2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8cb2:	b530      	push	{r4, r5, lr}
   b8cb4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8cb6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8cb8:	2a01      	cmp	r2, #1
  *str = '\0';
   b8cba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8cbe:	bf98      	it	ls
   b8cc0:	220a      	movls	r2, #10
   b8cc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8cc4:	460d      	mov	r5, r1
   b8cc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8cca:	fb01 5312 	mls	r3, r1, r2, r5
   b8cce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8cd2:	2b09      	cmp	r3, #9
   b8cd4:	bf94      	ite	ls
   b8cd6:	3330      	addls	r3, #48	; 0x30
   b8cd8:	3337      	addhi	r3, #55	; 0x37
   b8cda:	b2db      	uxtb	r3, r3
  } while(n);
   b8cdc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8cde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8ce2:	d9ef      	bls.n	b8cc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8ce4:	4621      	mov	r1, r4
   b8ce6:	f7ff ffb5 	bl	b8c54 <_ZN5Print5writeEPKc>
}
   b8cea:	b00b      	add	sp, #44	; 0x2c
   b8cec:	bd30      	pop	{r4, r5, pc}

000b8cee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8cf2:	b086      	sub	sp, #24
   b8cf4:	af00      	add	r7, sp, #0
   b8cf6:	4605      	mov	r5, r0
   b8cf8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8cfa:	1d38      	adds	r0, r7, #4
   b8cfc:	2114      	movs	r1, #20
{
   b8cfe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8d00:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8d02:	f7ff fd45 	bl	b8790 <vsnprintf>

    if (n<bufsize)
   b8d06:	2813      	cmp	r0, #19
   b8d08:	d80e      	bhi.n	b8d28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8d0a:	1d39      	adds	r1, r7, #4
   b8d0c:	4628      	mov	r0, r5
   b8d0e:	f7ff ffa1 	bl	b8c54 <_ZN5Print5writeEPKc>
   b8d12:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8d14:	b11e      	cbz	r6, b8d1e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8d16:	4628      	mov	r0, r5
   b8d18:	f7ff ffb5 	bl	b8c86 <_ZN5Print7printlnEv>
   b8d1c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8d1e:	4620      	mov	r0, r4
   b8d20:	3718      	adds	r7, #24
   b8d22:	46bd      	mov	sp, r7
   b8d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8d28:	f100 0308 	add.w	r3, r0, #8
   b8d2c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8d30:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8d32:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8d36:	4622      	mov	r2, r4
   b8d38:	1c41      	adds	r1, r0, #1
   b8d3a:	683b      	ldr	r3, [r7, #0]
   b8d3c:	4668      	mov	r0, sp
   b8d3e:	f7ff fd27 	bl	b8790 <vsnprintf>
  return write(str);
   b8d42:	4669      	mov	r1, sp
   b8d44:	4628      	mov	r0, r5
   b8d46:	f7ff ff85 	bl	b8c54 <_ZN5Print5writeEPKc>
   b8d4a:	4604      	mov	r4, r0
   b8d4c:	46c5      	mov	sp, r8
   b8d4e:	e7e1      	b.n	b8d14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8d50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8d50:	4b01      	ldr	r3, [pc, #4]	; (b8d58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8d52:	4a02      	ldr	r2, [pc, #8]	; (b8d5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8d54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8d56:	4770      	bx	lr
   b8d58:	2003e6d8 	.word	0x2003e6d8
   b8d5c:	000bb3cc 	.word	0x000bb3cc

000b8d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8d60:	4b02      	ldr	r3, [pc, #8]	; (b8d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8d62:	681a      	ldr	r2, [r3, #0]
   b8d64:	4b02      	ldr	r3, [pc, #8]	; (b8d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8d66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8d68:	4770      	bx	lr
   b8d6a:	bf00      	nop
   b8d6c:	2003d3fc 	.word	0x2003d3fc
   b8d70:	2003e6dc 	.word	0x2003e6dc

000b8d74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8d74:	2100      	movs	r1, #0
   b8d76:	f7ff bc5f 	b.w	b8638 <system_delay_ms>
	...

000b8d7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b8d7c:	4b01      	ldr	r3, [pc, #4]	; (b8d84 <_GLOBAL__sub_I_RGB+0x8>)
   b8d7e:	2200      	movs	r2, #0
   b8d80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8d82:	4770      	bx	lr
   b8d84:	2003e6e0 	.word	0x2003e6e0

000b8d88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8d88:	4b01      	ldr	r3, [pc, #4]	; (b8d90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8d8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8d8c:	4770      	bx	lr
   b8d8e:	bf00      	nop
   b8d90:	2003d400 	.word	0x2003d400

000b8d94 <serialEventRun>:
{
   b8d94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8d96:	4b0b      	ldr	r3, [pc, #44]	; (b8dc4 <serialEventRun+0x30>)
   b8d98:	b143      	cbz	r3, b8dac <serialEventRun+0x18>
   b8d9a:	f000 f981 	bl	b90a0 <_Z16_fetch_usbserialv>
   b8d9e:	6803      	ldr	r3, [r0, #0]
   b8da0:	691b      	ldr	r3, [r3, #16]
   b8da2:	4798      	blx	r3
   b8da4:	2800      	cmp	r0, #0
   b8da6:	dd01      	ble.n	b8dac <serialEventRun+0x18>
        serialEvent();
   b8da8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8dac:	4b06      	ldr	r3, [pc, #24]	; (b8dc8 <serialEventRun+0x34>)
   b8dae:	b143      	cbz	r3, b8dc2 <serialEventRun+0x2e>
   b8db0:	f000 fc12 	bl	b95d8 <_Z22__fetch_global_Serial1v>
   b8db4:	6803      	ldr	r3, [r0, #0]
   b8db6:	691b      	ldr	r3, [r3, #16]
   b8db8:	4798      	blx	r3
   b8dba:	2800      	cmp	r0, #0
   b8dbc:	dd01      	ble.n	b8dc2 <serialEventRun+0x2e>
        serialEvent1();
   b8dbe:	f3af 8000 	nop.w
}
   b8dc2:	bd08      	pop	{r3, pc}
	...

000b8dcc <_post_loop>:
{
   b8dcc:	b508      	push	{r3, lr}
	serialEventRun();
   b8dce:	f7ff ffe1 	bl	b8d94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8dd2:	f7ff fad1 	bl	b8378 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8dd6:	4b01      	ldr	r3, [pc, #4]	; (b8ddc <_post_loop+0x10>)
   b8dd8:	6018      	str	r0, [r3, #0]
}
   b8dda:	bd08      	pop	{r3, pc}
   b8ddc:	2003e738 	.word	0x2003e738

000b8de0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8de0:	4805      	ldr	r0, [pc, #20]	; (b8df8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8de2:	4a06      	ldr	r2, [pc, #24]	; (b8dfc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8de4:	4906      	ldr	r1, [pc, #24]	; (b8e00 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8de6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8de8:	1a12      	subs	r2, r2, r0
   b8dea:	f000 fe37 	bl	b9a5c <memcpy>
    __backup_sram_signature = signature;
   b8dee:	4b05      	ldr	r3, [pc, #20]	; (b8e04 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8df0:	4a05      	ldr	r2, [pc, #20]	; (b8e08 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8df2:	601a      	str	r2, [r3, #0]
}
   b8df4:	bd08      	pop	{r3, pc}
   b8df6:	bf00      	nop
   b8df8:	2003f400 	.word	0x2003f400
   b8dfc:	2003f404 	.word	0x2003f404
   b8e00:	000bb664 	.word	0x000bb664
   b8e04:	2003f400 	.word	0x2003f400
   b8e08:	9a271c1e 	.word	0x9a271c1e

000b8e0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8e0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8e0e:	2300      	movs	r3, #0
   b8e10:	9300      	str	r3, [sp, #0]
   b8e12:	461a      	mov	r2, r3
   b8e14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8e18:	f7ff fc20 	bl	b865c <system_ctrl_set_result>
}
   b8e1c:	b003      	add	sp, #12
   b8e1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8e24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8e24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8e26:	8843      	ldrh	r3, [r0, #2]
   b8e28:	2b0a      	cmp	r3, #10
   b8e2a:	d008      	beq.n	b8e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8e2c:	2b50      	cmp	r3, #80	; 0x50
   b8e2e:	d10b      	bne.n	b8e48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8e30:	4b09      	ldr	r3, [pc, #36]	; (b8e58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8e32:	681b      	ldr	r3, [r3, #0]
   b8e34:	b14b      	cbz	r3, b8e4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8e36:	b003      	add	sp, #12
   b8e38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8e3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8e3e:	f7ff ffe5 	bl	b8e0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8e42:	b003      	add	sp, #12
   b8e44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8e48:	2300      	movs	r3, #0
   b8e4a:	9300      	str	r3, [sp, #0]
   b8e4c:	461a      	mov	r2, r3
   b8e4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8e52:	f7ff fc03 	bl	b865c <system_ctrl_set_result>
}
   b8e56:	e7f4      	b.n	b8e42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8e58:	2003e6f4 	.word	0x2003e6f4

000b8e5c <module_user_init_hook>:
{
   b8e5c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8e5e:	4812      	ldr	r0, [pc, #72]	; (b8ea8 <module_user_init_hook+0x4c>)
   b8e60:	2100      	movs	r1, #0
   b8e62:	f7ff fcad 	bl	b87c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8e66:	4b11      	ldr	r3, [pc, #68]	; (b8eac <module_user_init_hook+0x50>)
   b8e68:	681a      	ldr	r2, [r3, #0]
   b8e6a:	4b11      	ldr	r3, [pc, #68]	; (b8eb0 <module_user_init_hook+0x54>)
   b8e6c:	429a      	cmp	r2, r3
   b8e6e:	4b11      	ldr	r3, [pc, #68]	; (b8eb4 <module_user_init_hook+0x58>)
   b8e70:	bf0c      	ite	eq
   b8e72:	2201      	moveq	r2, #1
   b8e74:	2200      	movne	r2, #0
   b8e76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8e78:	d001      	beq.n	b8e7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8e7a:	f7ff ffb1 	bl	b8de0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8e7e:	f7ff fa6b 	bl	b8358 <HAL_RNG_GetRandomNumber>
   b8e82:	4604      	mov	r4, r0
    srand(seed);
   b8e84:	f000 fe10 	bl	b9aa8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8e88:	4b0b      	ldr	r3, [pc, #44]	; (b8eb8 <module_user_init_hook+0x5c>)
   b8e8a:	b113      	cbz	r3, b8e92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8e8c:	4620      	mov	r0, r4
   b8e8e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8e92:	2100      	movs	r1, #0
   b8e94:	4808      	ldr	r0, [pc, #32]	; (b8eb8 <module_user_init_hook+0x5c>)
   b8e96:	f7ff fc4b 	bl	b8730 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8e9e:	4807      	ldr	r0, [pc, #28]	; (b8ebc <module_user_init_hook+0x60>)
   b8ea0:	2100      	movs	r1, #0
   b8ea2:	f7ff bbd1 	b.w	b8648 <system_ctrl_set_app_request_handler>
   b8ea6:	bf00      	nop
   b8ea8:	000b8d89 	.word	0x000b8d89
   b8eac:	2003f400 	.word	0x2003f400
   b8eb0:	9a271c1e 	.word	0x9a271c1e
   b8eb4:	2003e6f0 	.word	0x2003e6f0
   b8eb8:	00000000 	.word	0x00000000
   b8ebc:	000b8e25 	.word	0x000b8e25

000b8ec0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b8ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b8ec2:	230c      	movs	r3, #12
   b8ec4:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b8ec8:	6803      	ldr	r3, [r0, #0]
   b8eca:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b8ece:	7a03      	ldrb	r3, [r0, #8]
   b8ed0:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b8ed4:	6843      	ldr	r3, [r0, #4]
   b8ed6:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b8ed8:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b8eda:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b8edc:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8ee0:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b8ee2:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b8ee6:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8eea:	f7ff fc29 	bl	b8740 <spark_cloud_disconnect>
}
   b8eee:	b005      	add	sp, #20
   b8ef0:	f85d fb04 	ldr.w	pc, [sp], #4

000b8ef4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8ef4:	4770      	bx	lr

000b8ef6 <_ZN9IPAddressD0Ev>:
   b8ef6:	b510      	push	{r4, lr}
   b8ef8:	2118      	movs	r1, #24
   b8efa:	4604      	mov	r4, r0
   b8efc:	f7fb f8cb 	bl	b4096 <_ZdlPvj>
   b8f00:	4620      	mov	r0, r4
   b8f02:	bd10      	pop	{r4, pc}

000b8f04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8f04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8f06:	7d03      	ldrb	r3, [r0, #20]
   b8f08:	2b06      	cmp	r3, #6
{
   b8f0a:	b08d      	sub	sp, #52	; 0x34
   b8f0c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f0e:	f100 0704 	add.w	r7, r0, #4
   b8f12:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8f16:	d012      	beq.n	b8f3e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8f18:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8f1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8f20:	220a      	movs	r2, #10
   b8f22:	4630      	mov	r0, r6
   b8f24:	f7ff fec5 	bl	b8cb2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8f28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8f2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8f2c:	d019      	beq.n	b8f62 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8f2e:	2c00      	cmp	r4, #0
   b8f30:	d0f4      	beq.n	b8f1c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8f32:	212e      	movs	r1, #46	; 0x2e
   b8f34:	4630      	mov	r0, r6
   b8f36:	f7ff fea3 	bl	b8c80 <_ZN5Print5printEc>
   b8f3a:	4404      	add	r4, r0
   b8f3c:	e7ee      	b.n	b8f1c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f3e:	232f      	movs	r3, #47	; 0x2f
   b8f40:	466a      	mov	r2, sp
   b8f42:	4639      	mov	r1, r7
   b8f44:	200a      	movs	r0, #10
		buf[0] = 0;
   b8f46:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f4a:	f7ff fa3d 	bl	b83c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8f4e:	4668      	mov	r0, sp
   b8f50:	f000 fde0 	bl	b9b14 <strlen>
   b8f54:	6833      	ldr	r3, [r6, #0]
   b8f56:	4602      	mov	r2, r0
   b8f58:	68db      	ldr	r3, [r3, #12]
   b8f5a:	4669      	mov	r1, sp
   b8f5c:	4630      	mov	r0, r6
   b8f5e:	4798      	blx	r3
   b8f60:	4604      	mov	r4, r0
    }
    return n;
}
   b8f62:	4620      	mov	r0, r4
   b8f64:	b00d      	add	sp, #52	; 0x34
   b8f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8f68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8f68:	b510      	push	{r4, lr}
   b8f6a:	4b05      	ldr	r3, [pc, #20]	; (b8f80 <_ZN9IPAddressC1Ev+0x18>)
   b8f6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8f6e:	2211      	movs	r2, #17
   b8f70:	f840 3b04 	str.w	r3, [r0], #4
   b8f74:	2100      	movs	r1, #0
   b8f76:	f000 fd7f 	bl	b9a78 <memset>
}
   b8f7a:	4620      	mov	r0, r4
   b8f7c:	bd10      	pop	{r4, pc}
   b8f7e:	bf00      	nop
   b8f80:	000bb3f4 	.word	0x000bb3f4

000b8f84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8f84:	4603      	mov	r3, r0
   b8f86:	4a07      	ldr	r2, [pc, #28]	; (b8fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8f88:	b510      	push	{r4, lr}
   b8f8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8f8e:	f101 0210 	add.w	r2, r1, #16
   b8f92:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f96:	f843 4b04 	str.w	r4, [r3], #4
   b8f9a:	4291      	cmp	r1, r2
   b8f9c:	d1f9      	bne.n	b8f92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f9e:	780a      	ldrb	r2, [r1, #0]
   b8fa0:	701a      	strb	r2, [r3, #0]
}
   b8fa2:	bd10      	pop	{r4, pc}
   b8fa4:	000bb3f4 	.word	0x000bb3f4

000b8fa8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8fa8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8faa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8fae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8fb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8fb6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8fba:	2304      	movs	r3, #4
   b8fbc:	6041      	str	r1, [r0, #4]
   b8fbe:	7503      	strb	r3, [r0, #20]
}
   b8fc0:	bd10      	pop	{r4, pc}
	...

000b8fc4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8fc4:	b507      	push	{r0, r1, r2, lr}
   b8fc6:	4b06      	ldr	r3, [pc, #24]	; (b8fe0 <_ZN9IPAddressC1EPKh+0x1c>)
   b8fc8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8fca:	78cb      	ldrb	r3, [r1, #3]
   b8fcc:	9300      	str	r3, [sp, #0]
   b8fce:	788b      	ldrb	r3, [r1, #2]
   b8fd0:	784a      	ldrb	r2, [r1, #1]
   b8fd2:	7809      	ldrb	r1, [r1, #0]
   b8fd4:	f7ff ffe8 	bl	b8fa8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8fd8:	b003      	add	sp, #12
   b8fda:	f85d fb04 	ldr.w	pc, [sp], #4
   b8fde:	bf00      	nop
   b8fe0:	000bb3f4 	.word	0x000bb3f4

000b8fe4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8fe4:	7441      	strb	r1, [r0, #17]
}
   b8fe6:	4770      	bx	lr

000b8fe8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8fe8:	4770      	bx	lr

000b8fea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8fea:	4770      	bx	lr

000b8fec <_ZN9USBSerial4readEv>:
{
   b8fec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8fee:	2100      	movs	r1, #0
   b8ff0:	7c00      	ldrb	r0, [r0, #16]
   b8ff2:	f7ff faf9 	bl	b85e8 <HAL_USB_USART_Receive_Data>
}
   b8ff6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8ffa:	bd08      	pop	{r3, pc}

000b8ffc <_ZN9USBSerial4peekEv>:
{
   b8ffc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8ffe:	2101      	movs	r1, #1
   b9000:	7c00      	ldrb	r0, [r0, #16]
   b9002:	f7ff faf1 	bl	b85e8 <HAL_USB_USART_Receive_Data>
}
   b9006:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b900a:	bd08      	pop	{r3, pc}

000b900c <_ZN9USBSerial17availableForWriteEv>:
{
   b900c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b900e:	7c00      	ldrb	r0, [r0, #16]
   b9010:	f7ff fae2 	bl	b85d8 <HAL_USB_USART_Available_Data_For_Write>
}
   b9014:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9018:	bd08      	pop	{r3, pc}

000b901a <_ZN9USBSerial9availableEv>:
{
   b901a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b901c:	7c00      	ldrb	r0, [r0, #16]
   b901e:	f7ff fad3 	bl	b85c8 <HAL_USB_USART_Available_Data>
}
   b9022:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9026:	bd08      	pop	{r3, pc}

000b9028 <_ZN9USBSerial5writeEh>:
{
   b9028:	b513      	push	{r0, r1, r4, lr}
   b902a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b902c:	7c00      	ldrb	r0, [r0, #16]
{
   b902e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9030:	f7ff fad2 	bl	b85d8 <HAL_USB_USART_Available_Data_For_Write>
   b9034:	2800      	cmp	r0, #0
   b9036:	9901      	ldr	r1, [sp, #4]
   b9038:	dc01      	bgt.n	b903e <_ZN9USBSerial5writeEh+0x16>
   b903a:	7c60      	ldrb	r0, [r4, #17]
   b903c:	b120      	cbz	r0, b9048 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b903e:	7c20      	ldrb	r0, [r4, #16]
   b9040:	f7ff fada 	bl	b85f8 <HAL_USB_USART_Send_Data>
   b9044:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9048:	b002      	add	sp, #8
   b904a:	bd10      	pop	{r4, pc}

000b904c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b904c:	7c00      	ldrb	r0, [r0, #16]
   b904e:	f7ff badb 	b.w	b8608 <HAL_USB_USART_Flush_Data>

000b9052 <_ZN9USBSerialD0Ev>:
   b9052:	b510      	push	{r4, lr}
   b9054:	2114      	movs	r1, #20
   b9056:	4604      	mov	r4, r0
   b9058:	f7fb f81d 	bl	b4096 <_ZdlPvj>
   b905c:	4620      	mov	r0, r4
   b905e:	bd10      	pop	{r4, pc}

000b9060 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9060:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9066:	4604      	mov	r4, r0
   b9068:	4608      	mov	r0, r1
   b906a:	2100      	movs	r1, #0
   b906c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9070:	4b04      	ldr	r3, [pc, #16]	; (b9084 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9072:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9074:	2301      	movs	r3, #1
  _serial = serial;
   b9076:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9078:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b907a:	4611      	mov	r1, r2
   b907c:	f7ff fa94 	bl	b85a8 <HAL_USB_USART_Init>
}
   b9080:	4620      	mov	r0, r4
   b9082:	bd10      	pop	{r4, pc}
   b9084:	000bb408 	.word	0x000bb408

000b9088 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9088:	7c00      	ldrb	r0, [r0, #16]
   b908a:	2200      	movs	r2, #0
   b908c:	f7ff ba94 	b.w	b85b8 <HAL_USB_USART_Begin>

000b9090 <_Z19acquireSerialBufferv>:
{
   b9090:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9092:	2214      	movs	r2, #20
{
   b9094:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9096:	2100      	movs	r1, #0
   b9098:	f000 fcee 	bl	b9a78 <memset>
}
   b909c:	4620      	mov	r0, r4
   b909e:	bd10      	pop	{r4, pc}

000b90a0 <_Z16_fetch_usbserialv>:
{
   b90a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b90a2:	4c0f      	ldr	r4, [pc, #60]	; (b90e0 <_Z16_fetch_usbserialv+0x40>)
{
   b90a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b90a6:	a803      	add	r0, sp, #12
   b90a8:	f7ff fff2 	bl	b9090 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b90ac:	7821      	ldrb	r1, [r4, #0]
   b90ae:	f3bf 8f5b 	dmb	ish
   b90b2:	f011 0101 	ands.w	r1, r1, #1
   b90b6:	d10f      	bne.n	b90d8 <_Z16_fetch_usbserialv+0x38>
   b90b8:	4620      	mov	r0, r4
   b90ba:	9101      	str	r1, [sp, #4]
   b90bc:	f7fa fffa 	bl	b40b4 <__cxa_guard_acquire>
   b90c0:	9901      	ldr	r1, [sp, #4]
   b90c2:	b148      	cbz	r0, b90d8 <_Z16_fetch_usbserialv+0x38>
   b90c4:	aa03      	add	r2, sp, #12
   b90c6:	4807      	ldr	r0, [pc, #28]	; (b90e4 <_Z16_fetch_usbserialv+0x44>)
   b90c8:	f7ff ffca 	bl	b9060 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b90cc:	4620      	mov	r0, r4
   b90ce:	f7fa fff6 	bl	b40be <__cxa_guard_release>
   b90d2:	4805      	ldr	r0, [pc, #20]	; (b90e8 <_Z16_fetch_usbserialv+0x48>)
   b90d4:	f000 fcb4 	bl	b9a40 <atexit>
	return _usbserial;
}
   b90d8:	4802      	ldr	r0, [pc, #8]	; (b90e4 <_Z16_fetch_usbserialv+0x44>)
   b90da:	b008      	add	sp, #32
   b90dc:	bd10      	pop	{r4, pc}
   b90de:	bf00      	nop
   b90e0:	2003e6f8 	.word	0x2003e6f8
   b90e4:	2003e6fc 	.word	0x2003e6fc
   b90e8:	000b8fe9 	.word	0x000b8fe9

000b90ec <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b90ec:	f7ff b91c 	b.w	b8328 <HAL_Interrupts_Disable_All>

000b90f0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b90f0:	f7ff b912 	b.w	b8318 <HAL_Interrupts_Enable_All>

000b90f4 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b90f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b90f6:	b287      	uxth	r7, r0
{
   b90f8:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b90fa:	4638      	mov	r0, r7
{
   b90fc:	460d      	mov	r5, r1
   b90fe:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9100:	f000 f9ba 	bl	b9478 <pinAvailable>
   b9104:	b160      	cbz	r0, b9120 <tone+0x2c>
   b9106:	2102      	movs	r1, #2
   b9108:	4638      	mov	r0, r7
   b910a:	f7ff f8dd 	bl	b82c8 <HAL_Validate_Pin_Function>
   b910e:	2802      	cmp	r0, #2
   b9110:	d106      	bne.n	b9120 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b9112:	4632      	mov	r2, r6
   b9114:	4629      	mov	r1, r5
   b9116:	4620      	mov	r0, r4
    }
}
   b9118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b911c:	f7ff ba34 	b.w	b8588 <HAL_Tone_Start>
}
   b9120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9122 <noTone>:

void noTone(uint8_t pin)
{
   b9122:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9124:	b285      	uxth	r5, r0
{
   b9126:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9128:	4628      	mov	r0, r5
   b912a:	f000 f9a5 	bl	b9478 <pinAvailable>
   b912e:	b150      	cbz	r0, b9146 <noTone+0x24>
   b9130:	2102      	movs	r1, #2
   b9132:	4628      	mov	r0, r5
   b9134:	f7ff f8c8 	bl	b82c8 <HAL_Validate_Pin_Function>
   b9138:	2802      	cmp	r0, #2
   b913a:	d104      	bne.n	b9146 <noTone+0x24>
        HAL_Tone_Stop(pin);
   b913c:	4620      	mov	r0, r4
    }
}
   b913e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   b9142:	f7ff ba29 	b.w	b8598 <HAL_Tone_Stop>
}
   b9146:	bd38      	pop	{r3, r4, r5, pc}

000b9148 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9148:	4770      	bx	lr

000b914a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b914a:	7441      	strb	r1, [r0, #17]
}
   b914c:	4770      	bx	lr

000b914e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b914e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9150:	7c00      	ldrb	r0, [r0, #16]
   b9152:	f7ff f971 	bl	b8438 <hal_usart_available_data_for_write>
}
   b9156:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b915a:	bd08      	pop	{r3, pc}

000b915c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b915c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b915e:	7c00      	ldrb	r0, [r0, #16]
   b9160:	f7ff f942 	bl	b83e8 <hal_usart_available>
}
   b9164:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9168:	bd08      	pop	{r3, pc}

000b916a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b916a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b916c:	7c00      	ldrb	r0, [r0, #16]
   b916e:	f7ff f94b 	bl	b8408 <hal_usart_peek>
}
   b9172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9176:	bd08      	pop	{r3, pc}

000b9178 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9178:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b917a:	7c00      	ldrb	r0, [r0, #16]
   b917c:	f7ff f93c 	bl	b83f8 <hal_usart_read>
}
   b9180:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9184:	bd08      	pop	{r3, pc}

000b9186 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9186:	7c00      	ldrb	r0, [r0, #16]
   b9188:	f7ff b946 	b.w	b8418 <hal_usart_flush>

000b918c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b918c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b918e:	7c45      	ldrb	r5, [r0, #17]
{
   b9190:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9192:	b12d      	cbz	r5, b91a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9194:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9196:	b003      	add	sp, #12
   b9198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b919c:	f7ff b91c 	b.w	b83d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b91a0:	7c00      	ldrb	r0, [r0, #16]
   b91a2:	9101      	str	r1, [sp, #4]
   b91a4:	f7ff f948 	bl	b8438 <hal_usart_available_data_for_write>
   b91a8:	2800      	cmp	r0, #0
   b91aa:	9901      	ldr	r1, [sp, #4]
   b91ac:	dcf2      	bgt.n	b9194 <_ZN11USARTSerial5writeEh+0x8>
}
   b91ae:	4628      	mov	r0, r5
   b91b0:	b003      	add	sp, #12
   b91b2:	bd30      	pop	{r4, r5, pc}

000b91b4 <_ZN11USARTSerialD0Ev>:
   b91b4:	b510      	push	{r4, lr}
   b91b6:	2114      	movs	r1, #20
   b91b8:	4604      	mov	r4, r0
   b91ba:	f7fa ff6c 	bl	b4096 <_ZdlPvj>
   b91be:	4620      	mov	r0, r4
   b91c0:	bd10      	pop	{r4, pc}
	...

000b91c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b91c4:	b510      	push	{r4, lr}
   b91c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b91ca:	4604      	mov	r4, r0
   b91cc:	4608      	mov	r0, r1
   b91ce:	4611      	mov	r1, r2
   b91d0:	2200      	movs	r2, #0
   b91d2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b91d6:	4b04      	ldr	r3, [pc, #16]	; (b91e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b91d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b91da:	2301      	movs	r3, #1
  _serial = serial;
   b91dc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b91de:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b91e0:	f7ff f932 	bl	b8448 <hal_usart_init_ex>
}
   b91e4:	4620      	mov	r0, r4
   b91e6:	bd10      	pop	{r4, pc}
   b91e8:	000bb438 	.word	0x000bb438

000b91ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b91ec:	4770      	bx	lr

000b91ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b91ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b91f0:	4606      	mov	r6, r0
   b91f2:	4615      	mov	r5, r2
   b91f4:	460c      	mov	r4, r1
   b91f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b91f8:	42bc      	cmp	r4, r7
   b91fa:	d006      	beq.n	b920a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b91fc:	6833      	ldr	r3, [r6, #0]
   b91fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9202:	689b      	ldr	r3, [r3, #8]
   b9204:	4630      	mov	r0, r6
   b9206:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9208:	e7f6      	b.n	b91f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b920a:	4628      	mov	r0, r5
   b920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b920e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b920e:	7c00      	ldrb	r0, [r0, #16]
   b9210:	2200      	movs	r2, #0
   b9212:	f7ff b941 	b.w	b8498 <hal_i2c_write>

000b9216 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9216:	7c00      	ldrb	r0, [r0, #16]
   b9218:	2100      	movs	r1, #0
   b921a:	f7ff b945 	b.w	b84a8 <hal_i2c_available>

000b921e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b921e:	7c00      	ldrb	r0, [r0, #16]
   b9220:	2100      	movs	r1, #0
   b9222:	f7ff b949 	b.w	b84b8 <hal_i2c_read>

000b9226 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9226:	7c00      	ldrb	r0, [r0, #16]
   b9228:	2100      	movs	r1, #0
   b922a:	f7ff b94d 	b.w	b84c8 <hal_i2c_peek>

000b922e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b922e:	7c00      	ldrb	r0, [r0, #16]
   b9230:	2100      	movs	r1, #0
   b9232:	f7ff b951 	b.w	b84d8 <hal_i2c_flush>

000b9236 <_ZN7TwoWireD0Ev>:
   b9236:	b510      	push	{r4, lr}
   b9238:	2114      	movs	r1, #20
   b923a:	4604      	mov	r4, r0
   b923c:	f7fa ff2b 	bl	b4096 <_ZdlPvj>
   b9240:	4620      	mov	r0, r4
   b9242:	bd10      	pop	{r4, pc}

000b9244 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9244:	b510      	push	{r4, lr}
   b9246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b924a:	4604      	mov	r4, r0
   b924c:	4608      	mov	r0, r1
   b924e:	2100      	movs	r1, #0
   b9250:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9254:	4b03      	ldr	r3, [pc, #12]	; (b9264 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9256:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9258:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b925a:	4611      	mov	r1, r2
   b925c:	f7ff f94c 	bl	b84f8 <hal_i2c_init>
}
   b9260:	4620      	mov	r0, r4
   b9262:	bd10      	pop	{r4, pc}
   b9264:	000bb468 	.word	0x000bb468

000b9268 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b9268:	7c00      	ldrb	r0, [r0, #16]
   b926a:	2200      	movs	r2, #0
   b926c:	f7ff b8f4 	b.w	b8458 <hal_i2c_set_speed>

000b9270 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9270:	2300      	movs	r3, #0
   b9272:	7c00      	ldrb	r0, [r0, #16]
   b9274:	461a      	mov	r2, r3
   b9276:	4619      	mov	r1, r3
   b9278:	f7ff b8f6 	b.w	b8468 <hal_i2c_begin>

000b927c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b927c:	7c00      	ldrb	r0, [r0, #16]
   b927e:	2200      	movs	r2, #0
   b9280:	f7ff b8fa 	b.w	b8478 <hal_i2c_begin_transmission>

000b9284 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9284:	b2c9      	uxtb	r1, r1
   b9286:	f7ff bff9 	b.w	b927c <_ZN7TwoWire17beginTransmissionEh>

000b928a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b928a:	7c00      	ldrb	r0, [r0, #16]
   b928c:	2200      	movs	r2, #0
   b928e:	f7ff b8fb 	b.w	b8488 <hal_i2c_end_transmission>

000b9292 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9292:	2101      	movs	r1, #1
   b9294:	f7ff bff9 	b.w	b928a <_ZN7TwoWire15endTransmissionEh>

000b9298 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9298:	2200      	movs	r2, #0
   b929a:	6840      	ldr	r0, [r0, #4]
   b929c:	4611      	mov	r1, r2
   b929e:	f7ff b9ff 	b.w	b86a0 <network_ready>

000b92a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b92a2:	2200      	movs	r2, #0
   b92a4:	6840      	ldr	r0, [r0, #4]
   b92a6:	4611      	mov	r1, r2
   b92a8:	f7ff ba1a 	b.w	b86e0 <network_listening>

000b92ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b92ac:	2200      	movs	r2, #0
   b92ae:	6840      	ldr	r0, [r0, #4]
   b92b0:	4611      	mov	r1, r2
   b92b2:	f7ff ba25 	b.w	b8700 <network_get_listen_timeout>

000b92b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b92b6:	6840      	ldr	r0, [r0, #4]
   b92b8:	2200      	movs	r2, #0
   b92ba:	f7ff ba19 	b.w	b86f0 <network_set_listen_timeout>

000b92be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b92be:	6840      	ldr	r0, [r0, #4]
   b92c0:	2200      	movs	r2, #0
   b92c2:	f081 0101 	eor.w	r1, r1, #1
   b92c6:	f7ff ba03 	b.w	b86d0 <network_listen>

000b92ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b92ca:	2300      	movs	r3, #0
   b92cc:	6840      	ldr	r0, [r0, #4]
   b92ce:	461a      	mov	r2, r3
   b92d0:	4619      	mov	r1, r3
   b92d2:	f7ff b9f5 	b.w	b86c0 <network_off>

000b92d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b92d6:	2300      	movs	r3, #0
   b92d8:	6840      	ldr	r0, [r0, #4]
   b92da:	461a      	mov	r2, r3
   b92dc:	4619      	mov	r1, r3
   b92de:	f7ff b9e7 	b.w	b86b0 <network_on>

000b92e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b92e2:	2200      	movs	r2, #0
   b92e4:	6840      	ldr	r0, [r0, #4]
   b92e6:	4611      	mov	r1, r2
   b92e8:	f7ff b9ca 	b.w	b8680 <network_connecting>

000b92ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b92ec:	6840      	ldr	r0, [r0, #4]
   b92ee:	2200      	movs	r2, #0
   b92f0:	2102      	movs	r1, #2
   b92f2:	f7ff b9cd 	b.w	b8690 <network_disconnect>

000b92f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b92f6:	2300      	movs	r3, #0
   b92f8:	6840      	ldr	r0, [r0, #4]
   b92fa:	461a      	mov	r2, r3
   b92fc:	f7ff b9b8 	b.w	b8670 <network_connect>

000b9300 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9300:	4b02      	ldr	r3, [pc, #8]	; (b930c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9302:	2204      	movs	r2, #4
   b9304:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9306:	4a02      	ldr	r2, [pc, #8]	; (b9310 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9308:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b930a:	4770      	bx	lr
   b930c:	2003e710 	.word	0x2003e710
   b9310:	000bb490 	.word	0x000bb490

000b9314 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9314:	2300      	movs	r3, #0
   b9316:	6840      	ldr	r0, [r0, #4]
   b9318:	461a      	mov	r2, r3
   b931a:	f7ff b9a9 	b.w	b8670 <network_connect>

000b931e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b931e:	6840      	ldr	r0, [r0, #4]
   b9320:	2200      	movs	r2, #0
   b9322:	2102      	movs	r1, #2
   b9324:	f7ff b9b4 	b.w	b8690 <network_disconnect>

000b9328 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9328:	2200      	movs	r2, #0
   b932a:	6840      	ldr	r0, [r0, #4]
   b932c:	4611      	mov	r1, r2
   b932e:	f7ff b9a7 	b.w	b8680 <network_connecting>

000b9332 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9332:	2200      	movs	r2, #0
   b9334:	6840      	ldr	r0, [r0, #4]
   b9336:	4611      	mov	r1, r2
   b9338:	f7ff b9b2 	b.w	b86a0 <network_ready>

000b933c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b933c:	2300      	movs	r3, #0
   b933e:	6840      	ldr	r0, [r0, #4]
   b9340:	461a      	mov	r2, r3
   b9342:	4619      	mov	r1, r3
   b9344:	f7ff b9b4 	b.w	b86b0 <network_on>

000b9348 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9348:	2300      	movs	r3, #0
   b934a:	6840      	ldr	r0, [r0, #4]
   b934c:	461a      	mov	r2, r3
   b934e:	4619      	mov	r1, r3
   b9350:	f7ff b9b6 	b.w	b86c0 <network_off>

000b9354 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9354:	6840      	ldr	r0, [r0, #4]
   b9356:	2100      	movs	r1, #0
   b9358:	f7ff b9da 	b.w	b8710 <network_is_on>

000b935c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b935c:	6840      	ldr	r0, [r0, #4]
   b935e:	2100      	movs	r1, #0
   b9360:	f7ff b9de 	b.w	b8720 <network_is_off>

000b9364 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9364:	6840      	ldr	r0, [r0, #4]
   b9366:	2200      	movs	r2, #0
   b9368:	f081 0101 	eor.w	r1, r1, #1
   b936c:	f7ff b9b0 	b.w	b86d0 <network_listen>

000b9370 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9370:	6840      	ldr	r0, [r0, #4]
   b9372:	2200      	movs	r2, #0
   b9374:	f7ff b9bc 	b.w	b86f0 <network_set_listen_timeout>

000b9378 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9378:	2200      	movs	r2, #0
   b937a:	6840      	ldr	r0, [r0, #4]
   b937c:	4611      	mov	r1, r2
   b937e:	f7ff b9bf 	b.w	b8700 <network_get_listen_timeout>

000b9382 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9382:	2200      	movs	r2, #0
   b9384:	6840      	ldr	r0, [r0, #4]
   b9386:	4611      	mov	r1, r2
   b9388:	f7ff b9aa 	b.w	b86e0 <network_listening>

000b938c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b938c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9390:	b095      	sub	sp, #84	; 0x54
   b9392:	4614      	mov	r4, r2
   b9394:	460d      	mov	r5, r1
   b9396:	4607      	mov	r7, r0
    IPAddress addr;
   b9398:	f7ff fde6 	bl	b8f68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b939c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b939e:	221c      	movs	r2, #28
   b93a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b93a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b93a4:	f000 fb68 	bl	b9a78 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b93a8:	2340      	movs	r3, #64	; 0x40
   b93aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b93ac:	4620      	mov	r0, r4
   b93ae:	466b      	mov	r3, sp
   b93b0:	aa0c      	add	r2, sp, #48	; 0x30
   b93b2:	2100      	movs	r1, #0
   b93b4:	f7fe ff80 	bl	b82b8 <netdb_getaddrinfo>
    if (!r) {
   b93b8:	4604      	mov	r4, r0
   b93ba:	2800      	cmp	r0, #0
   b93bc:	d14b      	bne.n	b9456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b93be:	4602      	mov	r2, r0
   b93c0:	2101      	movs	r1, #1
   b93c2:	6868      	ldr	r0, [r5, #4]
   b93c4:	f7ff f96c 	bl	b86a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b93c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b93ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b93cc:	4622      	mov	r2, r4
   b93ce:	6868      	ldr	r0, [r5, #4]
   b93d0:	f7ff f966 	bl	b86a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b93d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b93d6:	4681      	mov	r9, r0
        bool ok = false;
   b93d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b93da:	2e00      	cmp	r6, #0
   b93dc:	d03b      	beq.n	b9456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b93de:	2900      	cmp	r1, #0
   b93e0:	d139      	bne.n	b9456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b93e2:	6873      	ldr	r3, [r6, #4]
   b93e4:	2b02      	cmp	r3, #2
   b93e6:	d003      	beq.n	b93f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b93e8:	2b0a      	cmp	r3, #10
   b93ea:	d011      	beq.n	b9410 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b93ec:	69f6      	ldr	r6, [r6, #28]
   b93ee:	e7f4      	b.n	b93da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b93f0:	f1b8 0f00 	cmp.w	r8, #0
   b93f4:	d0fa      	beq.n	b93ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b93f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b93f8:	a806      	add	r0, sp, #24
   b93fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b93fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b93fe:	f7ff fde1 	bl	b8fc4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9404:	1d3c      	adds	r4, r7, #4
   b9406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9408:	682b      	ldr	r3, [r5, #0]
   b940a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b940c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b940e:	e7ed      	b.n	b93ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9410:	f1b9 0f00 	cmp.w	r9, #0
   b9414:	d0ea      	beq.n	b93ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9416:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9418:	2210      	movs	r2, #16
   b941a:	a801      	add	r0, sp, #4
   b941c:	f000 fb2c 	bl	b9a78 <memset>
                    a.v = 6;
   b9420:	2306      	movs	r3, #6
   b9422:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9426:	ad01      	add	r5, sp, #4
   b9428:	f104 0308 	add.w	r3, r4, #8
   b942c:	3418      	adds	r4, #24
   b942e:	6818      	ldr	r0, [r3, #0]
   b9430:	6859      	ldr	r1, [r3, #4]
   b9432:	462a      	mov	r2, r5
   b9434:	c203      	stmia	r2!, {r0, r1}
   b9436:	3308      	adds	r3, #8
   b9438:	42a3      	cmp	r3, r4
   b943a:	4615      	mov	r5, r2
   b943c:	d1f7      	bne.n	b942e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b943e:	a901      	add	r1, sp, #4
   b9440:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9442:	ad07      	add	r5, sp, #28
   b9444:	f7ff fd9e 	bl	b8f84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b944a:	1d3c      	adds	r4, r7, #4
   b944c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b944e:	682b      	ldr	r3, [r5, #0]
   b9450:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9452:	4649      	mov	r1, r9
   b9454:	e7ca      	b.n	b93ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9456:	9800      	ldr	r0, [sp, #0]
   b9458:	f7fe ff26 	bl	b82a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b945c:	4638      	mov	r0, r7
   b945e:	b015      	add	sp, #84	; 0x54
   b9460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9464 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9464:	4b02      	ldr	r3, [pc, #8]	; (b9470 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9466:	4a03      	ldr	r2, [pc, #12]	; (b9474 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9468:	601a      	str	r2, [r3, #0]
   b946a:	2200      	movs	r2, #0
   b946c:	605a      	str	r2, [r3, #4]

} // spark
   b946e:	4770      	bx	lr
   b9470:	2003e718 	.word	0x2003e718
   b9474:	000bb4cc 	.word	0x000bb4cc

000b9478 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9478:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b947a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b947c:	d902      	bls.n	b9484 <pinAvailable+0xc>
    return false;
   b947e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9480:	b002      	add	sp, #8
   b9482:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9484:	f1a0 030b 	sub.w	r3, r0, #11
   b9488:	2b02      	cmp	r3, #2
   b948a:	d81a      	bhi.n	b94c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b948c:	4c17      	ldr	r4, [pc, #92]	; (b94ec <pinAvailable+0x74>)
   b948e:	7821      	ldrb	r1, [r4, #0]
   b9490:	f3bf 8f5b 	dmb	ish
   b9494:	f011 0101 	ands.w	r1, r1, #1
   b9498:	d10b      	bne.n	b94b2 <pinAvailable+0x3a>
   b949a:	4620      	mov	r0, r4
   b949c:	9101      	str	r1, [sp, #4]
   b949e:	f7fa fe09 	bl	b40b4 <__cxa_guard_acquire>
   b94a2:	9901      	ldr	r1, [sp, #4]
   b94a4:	b128      	cbz	r0, b94b2 <pinAvailable+0x3a>
   b94a6:	4812      	ldr	r0, [pc, #72]	; (b94f0 <pinAvailable+0x78>)
   b94a8:	f7ff f9d6 	bl	b8858 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b94ac:	4620      	mov	r0, r4
   b94ae:	f7fa fe06 	bl	b40be <__cxa_guard_release>
   b94b2:	4b0f      	ldr	r3, [pc, #60]	; (b94f0 <pinAvailable+0x78>)
   b94b4:	7818      	ldrb	r0, [r3, #0]
   b94b6:	f7ff f83f 	bl	b8538 <hal_spi_is_enabled>
   b94ba:	2800      	cmp	r0, #0
   b94bc:	d1df      	bne.n	b947e <pinAvailable+0x6>
  return true; // 'pin' is available
   b94be:	2001      	movs	r0, #1
   b94c0:	e7de      	b.n	b9480 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b94c2:	2801      	cmp	r0, #1
   b94c4:	d809      	bhi.n	b94da <pinAvailable+0x62>
   b94c6:	f000 f8d9 	bl	b967c <_Z19__fetch_global_Wirev>
   b94ca:	2100      	movs	r1, #0
   b94cc:	7c00      	ldrb	r0, [r0, #16]
   b94ce:	f7ff f80b 	bl	b84e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b94d2:	f080 0001 	eor.w	r0, r0, #1
   b94d6:	b2c0      	uxtb	r0, r0
   b94d8:	e7d2      	b.n	b9480 <pinAvailable+0x8>
   b94da:	3809      	subs	r0, #9
   b94dc:	2801      	cmp	r0, #1
   b94de:	d8ee      	bhi.n	b94be <pinAvailable+0x46>
   b94e0:	f000 f87a 	bl	b95d8 <_Z22__fetch_global_Serial1v>
   b94e4:	7c00      	ldrb	r0, [r0, #16]
   b94e6:	f7fe ff9f 	bl	b8428 <hal_usart_is_enabled>
   b94ea:	e7f2      	b.n	b94d2 <pinAvailable+0x5a>
   b94ec:	2003d468 	.word	0x2003d468
   b94f0:	2003d46c 	.word	0x2003d46c

000b94f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b94f4:	2823      	cmp	r0, #35	; 0x23
{
   b94f6:	b538      	push	{r3, r4, r5, lr}
   b94f8:	4604      	mov	r4, r0
   b94fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b94fc:	d80a      	bhi.n	b9514 <pinMode+0x20>
   b94fe:	29ff      	cmp	r1, #255	; 0xff
   b9500:	d008      	beq.n	b9514 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9502:	f7ff ffb9 	bl	b9478 <pinAvailable>
   b9506:	b128      	cbz	r0, b9514 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9508:	4629      	mov	r1, r5
   b950a:	4620      	mov	r0, r4
}
   b950c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9510:	f7fe bee2 	b.w	b82d8 <HAL_Pin_Mode>
}
   b9514:	bd38      	pop	{r3, r4, r5, pc}

000b9516 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9516:	b538      	push	{r3, r4, r5, lr}
   b9518:	4604      	mov	r4, r0
   b951a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b951c:	f7fe fee4 	bl	b82e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9520:	28ff      	cmp	r0, #255	; 0xff
   b9522:	d010      	beq.n	b9546 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9524:	2806      	cmp	r0, #6
   b9526:	d804      	bhi.n	b9532 <digitalWrite+0x1c>
   b9528:	234d      	movs	r3, #77	; 0x4d
   b952a:	fa23 f000 	lsr.w	r0, r3, r0
   b952e:	07c3      	lsls	r3, r0, #31
   b9530:	d409      	bmi.n	b9546 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9532:	4620      	mov	r0, r4
   b9534:	f7ff ffa0 	bl	b9478 <pinAvailable>
   b9538:	b128      	cbz	r0, b9546 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b953a:	4629      	mov	r1, r5
   b953c:	4620      	mov	r0, r4
}
   b953e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9542:	f7fe bed9 	b.w	b82f8 <HAL_GPIO_Write>
}
   b9546:	bd38      	pop	{r3, r4, r5, pc}

000b9548 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9548:	b510      	push	{r4, lr}
   b954a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b954c:	f7fe fecc 	bl	b82e8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9550:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9552:	b2db      	uxtb	r3, r3
   b9554:	2b01      	cmp	r3, #1
   b9556:	d908      	bls.n	b956a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9558:	4620      	mov	r0, r4
   b955a:	f7ff ff8d 	bl	b9478 <pinAvailable>
   b955e:	b120      	cbz	r0, b956a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9560:	4620      	mov	r0, r4
}
   b9562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9566:	f7fe becf 	b.w	b8308 <HAL_GPIO_Read>
}
   b956a:	2000      	movs	r0, #0
   b956c:	bd10      	pop	{r4, pc}

000b956e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b956e:	280d      	cmp	r0, #13
{
   b9570:	b510      	push	{r4, lr}
   b9572:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9574:	bf9c      	itt	ls
   b9576:	340e      	addls	r4, #14
   b9578:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b957a:	4620      	mov	r0, r4
   b957c:	f7ff ff7c 	bl	b9478 <pinAvailable>
   b9580:	b150      	cbz	r0, b9598 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b9582:	2103      	movs	r1, #3
   b9584:	4620      	mov	r0, r4
   b9586:	f7fe fe9f 	bl	b82c8 <HAL_Validate_Pin_Function>
   b958a:	2803      	cmp	r0, #3
   b958c:	d104      	bne.n	b9598 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b958e:	4620      	mov	r0, r4
}
   b9590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9594:	f7fe bed0 	b.w	b8338 <hal_adc_read>
}
   b9598:	2000      	movs	r0, #0
   b959a:	bd10      	pop	{r4, pc}

000b959c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b959c:	f7fe bed4 	b.w	b8348 <HAL_Pulse_In>

000b95a0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95a0:	4770      	bx	lr
	...

000b95a4 <_Z20acquireSerial1Bufferv>:
{
   b95a4:	b538      	push	{r3, r4, r5, lr}
   b95a6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b95a8:	2514      	movs	r5, #20
   b95aa:	462a      	mov	r2, r5
   b95ac:	2100      	movs	r1, #0
   b95ae:	f000 fa63 	bl	b9a78 <memset>
   b95b2:	8025      	strh	r5, [r4, #0]
   b95b4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95b6:	4907      	ldr	r1, [pc, #28]	; (b95d4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b95b8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95ba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b95bc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95be:	f000 f881 	bl	b96c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95c2:	4904      	ldr	r1, [pc, #16]	; (b95d4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b95c4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95c6:	4628      	mov	r0, r5
   b95c8:	f000 f87c 	bl	b96c4 <_ZnajRKSt9nothrow_t>
    };
   b95cc:	60e0      	str	r0, [r4, #12]
}
   b95ce:	4620      	mov	r0, r4
   b95d0:	bd38      	pop	{r3, r4, r5, pc}
   b95d2:	bf00      	nop
   b95d4:	000bb500 	.word	0x000bb500

000b95d8 <_Z22__fetch_global_Serial1v>:
{
   b95d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95da:	4d0e      	ldr	r5, [pc, #56]	; (b9614 <_Z22__fetch_global_Serial1v+0x3c>)
   b95dc:	7829      	ldrb	r1, [r5, #0]
   b95de:	f3bf 8f5b 	dmb	ish
   b95e2:	f011 0401 	ands.w	r4, r1, #1
{
   b95e6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95e8:	d111      	bne.n	b960e <_Z22__fetch_global_Serial1v+0x36>
   b95ea:	4628      	mov	r0, r5
   b95ec:	f7fa fd62 	bl	b40b4 <__cxa_guard_acquire>
   b95f0:	b168      	cbz	r0, b960e <_Z22__fetch_global_Serial1v+0x36>
   b95f2:	a801      	add	r0, sp, #4
   b95f4:	f7ff ffd6 	bl	b95a4 <_Z20acquireSerial1Bufferv>
   b95f8:	aa01      	add	r2, sp, #4
   b95fa:	4621      	mov	r1, r4
   b95fc:	4806      	ldr	r0, [pc, #24]	; (b9618 <_Z22__fetch_global_Serial1v+0x40>)
   b95fe:	f7ff fde1 	bl	b91c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9602:	4628      	mov	r0, r5
   b9604:	f7fa fd5b 	bl	b40be <__cxa_guard_release>
   b9608:	4804      	ldr	r0, [pc, #16]	; (b961c <_Z22__fetch_global_Serial1v+0x44>)
   b960a:	f000 fa19 	bl	b9a40 <atexit>
    return serial1;
}
   b960e:	4802      	ldr	r0, [pc, #8]	; (b9618 <_Z22__fetch_global_Serial1v+0x40>)
   b9610:	b007      	add	sp, #28
   b9612:	bd30      	pop	{r4, r5, pc}
   b9614:	2003e720 	.word	0x2003e720
   b9618:	2003e724 	.word	0x2003e724
   b961c:	000b95a1 	.word	0x000b95a1

000b9620 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b9620:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b9622:	4c08      	ldr	r4, [pc, #32]	; (b9644 <_Z21__fetch_global_EEPROMv+0x24>)
   b9624:	7823      	ldrb	r3, [r4, #0]
   b9626:	f3bf 8f5b 	dmb	ish
   b962a:	07db      	lsls	r3, r3, #31
   b962c:	d408      	bmi.n	b9640 <_Z21__fetch_global_EEPROMv+0x20>
   b962e:	4620      	mov	r0, r4
   b9630:	f7fa fd40 	bl	b40b4 <__cxa_guard_acquire>
   b9634:	b120      	cbz	r0, b9640 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9636:	f7fe fea7 	bl	b8388 <HAL_EEPROM_Init>
   b963a:	4620      	mov	r0, r4
   b963c:	f7fa fd3f 	bl	b40be <__cxa_guard_release>
	return eeprom;
}
   b9640:	4801      	ldr	r0, [pc, #4]	; (b9648 <_Z21__fetch_global_EEPROMv+0x28>)
   b9642:	bd10      	pop	{r4, pc}
   b9644:	2003e73c 	.word	0x2003e73c
   b9648:	2003e740 	.word	0x2003e740

000b964c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b964c:	4770      	bx	lr
	...

000b9650 <_Z17acquireWireBufferv>:
{
   b9650:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9652:	2520      	movs	r5, #32
   b9654:	2314      	movs	r3, #20
{
   b9656:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9658:	6003      	str	r3, [r0, #0]
   b965a:	6085      	str	r5, [r0, #8]
   b965c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b965e:	4906      	ldr	r1, [pc, #24]	; (b9678 <_Z17acquireWireBufferv+0x28>)
   b9660:	4628      	mov	r0, r5
   b9662:	f000 f82f 	bl	b96c4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9666:	4904      	ldr	r1, [pc, #16]	; (b9678 <_Z17acquireWireBufferv+0x28>)
	};
   b9668:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b966a:	4628      	mov	r0, r5
   b966c:	f000 f82a 	bl	b96c4 <_ZnajRKSt9nothrow_t>
	};
   b9670:	60e0      	str	r0, [r4, #12]
}
   b9672:	4620      	mov	r0, r4
   b9674:	bd38      	pop	{r3, r4, r5, pc}
   b9676:	bf00      	nop
   b9678:	000bb500 	.word	0x000bb500

000b967c <_Z19__fetch_global_Wirev>:
{
   b967c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b967e:	4d0e      	ldr	r5, [pc, #56]	; (b96b8 <_Z19__fetch_global_Wirev+0x3c>)
   b9680:	7829      	ldrb	r1, [r5, #0]
   b9682:	f3bf 8f5b 	dmb	ish
   b9686:	f011 0401 	ands.w	r4, r1, #1
{
   b968a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b968c:	d111      	bne.n	b96b2 <_Z19__fetch_global_Wirev+0x36>
   b968e:	4628      	mov	r0, r5
   b9690:	f7fa fd10 	bl	b40b4 <__cxa_guard_acquire>
   b9694:	b168      	cbz	r0, b96b2 <_Z19__fetch_global_Wirev+0x36>
   b9696:	a801      	add	r0, sp, #4
   b9698:	f7ff ffda 	bl	b9650 <_Z17acquireWireBufferv>
   b969c:	aa01      	add	r2, sp, #4
   b969e:	4621      	mov	r1, r4
   b96a0:	4806      	ldr	r0, [pc, #24]	; (b96bc <_Z19__fetch_global_Wirev+0x40>)
   b96a2:	f7ff fdcf 	bl	b9244 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b96a6:	4628      	mov	r0, r5
   b96a8:	f7fa fd09 	bl	b40be <__cxa_guard_release>
   b96ac:	4804      	ldr	r0, [pc, #16]	; (b96c0 <_Z19__fetch_global_Wirev+0x44>)
   b96ae:	f000 f9c7 	bl	b9a40 <atexit>
	return wire;
}
   b96b2:	4802      	ldr	r0, [pc, #8]	; (b96bc <_Z19__fetch_global_Wirev+0x40>)
   b96b4:	b007      	add	sp, #28
   b96b6:	bd30      	pop	{r4, r5, pc}
   b96b8:	2003e744 	.word	0x2003e744
   b96bc:	2003e748 	.word	0x2003e748
   b96c0:	000b964d 	.word	0x000b964d

000b96c4 <_ZnajRKSt9nothrow_t>:
   b96c4:	f7fa bce5 	b.w	b4092 <_Znaj>

000b96c8 <__aeabi_drsub>:
   b96c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b96cc:	e002      	b.n	b96d4 <__adddf3>
   b96ce:	bf00      	nop

000b96d0 <__aeabi_dsub>:
   b96d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b96d4 <__adddf3>:
   b96d4:	b530      	push	{r4, r5, lr}
   b96d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b96da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b96de:	ea94 0f05 	teq	r4, r5
   b96e2:	bf08      	it	eq
   b96e4:	ea90 0f02 	teqeq	r0, r2
   b96e8:	bf1f      	itttt	ne
   b96ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   b96ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   b96f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b96f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b96fa:	f000 80e2 	beq.w	b98c2 <__adddf3+0x1ee>
   b96fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9702:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9706:	bfb8      	it	lt
   b9708:	426d      	neglt	r5, r5
   b970a:	dd0c      	ble.n	b9726 <__adddf3+0x52>
   b970c:	442c      	add	r4, r5
   b970e:	ea80 0202 	eor.w	r2, r0, r2
   b9712:	ea81 0303 	eor.w	r3, r1, r3
   b9716:	ea82 0000 	eor.w	r0, r2, r0
   b971a:	ea83 0101 	eor.w	r1, r3, r1
   b971e:	ea80 0202 	eor.w	r2, r0, r2
   b9722:	ea81 0303 	eor.w	r3, r1, r3
   b9726:	2d36      	cmp	r5, #54	; 0x36
   b9728:	bf88      	it	hi
   b972a:	bd30      	pophi	{r4, r5, pc}
   b972c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9730:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9734:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9738:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b973c:	d002      	beq.n	b9744 <__adddf3+0x70>
   b973e:	4240      	negs	r0, r0
   b9740:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9744:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9748:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b974c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9750:	d002      	beq.n	b9758 <__adddf3+0x84>
   b9752:	4252      	negs	r2, r2
   b9754:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9758:	ea94 0f05 	teq	r4, r5
   b975c:	f000 80a7 	beq.w	b98ae <__adddf3+0x1da>
   b9760:	f1a4 0401 	sub.w	r4, r4, #1
   b9764:	f1d5 0e20 	rsbs	lr, r5, #32
   b9768:	db0d      	blt.n	b9786 <__adddf3+0xb2>
   b976a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b976e:	fa22 f205 	lsr.w	r2, r2, r5
   b9772:	1880      	adds	r0, r0, r2
   b9774:	f141 0100 	adc.w	r1, r1, #0
   b9778:	fa03 f20e 	lsl.w	r2, r3, lr
   b977c:	1880      	adds	r0, r0, r2
   b977e:	fa43 f305 	asr.w	r3, r3, r5
   b9782:	4159      	adcs	r1, r3
   b9784:	e00e      	b.n	b97a4 <__adddf3+0xd0>
   b9786:	f1a5 0520 	sub.w	r5, r5, #32
   b978a:	f10e 0e20 	add.w	lr, lr, #32
   b978e:	2a01      	cmp	r2, #1
   b9790:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9794:	bf28      	it	cs
   b9796:	f04c 0c02 	orrcs.w	ip, ip, #2
   b979a:	fa43 f305 	asr.w	r3, r3, r5
   b979e:	18c0      	adds	r0, r0, r3
   b97a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b97a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b97a8:	d507      	bpl.n	b97ba <__adddf3+0xe6>
   b97aa:	f04f 0e00 	mov.w	lr, #0
   b97ae:	f1dc 0c00 	rsbs	ip, ip, #0
   b97b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b97b6:	eb6e 0101 	sbc.w	r1, lr, r1
   b97ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b97be:	d31b      	bcc.n	b97f8 <__adddf3+0x124>
   b97c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b97c4:	d30c      	bcc.n	b97e0 <__adddf3+0x10c>
   b97c6:	0849      	lsrs	r1, r1, #1
   b97c8:	ea5f 0030 	movs.w	r0, r0, rrx
   b97cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b97d0:	f104 0401 	add.w	r4, r4, #1
   b97d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b97d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b97dc:	f080 809a 	bcs.w	b9914 <__adddf3+0x240>
   b97e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b97e4:	bf08      	it	eq
   b97e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b97ea:	f150 0000 	adcs.w	r0, r0, #0
   b97ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b97f2:	ea41 0105 	orr.w	r1, r1, r5
   b97f6:	bd30      	pop	{r4, r5, pc}
   b97f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b97fc:	4140      	adcs	r0, r0
   b97fe:	eb41 0101 	adc.w	r1, r1, r1
   b9802:	3c01      	subs	r4, #1
   b9804:	bf28      	it	cs
   b9806:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b980a:	d2e9      	bcs.n	b97e0 <__adddf3+0x10c>
   b980c:	f091 0f00 	teq	r1, #0
   b9810:	bf04      	itt	eq
   b9812:	4601      	moveq	r1, r0
   b9814:	2000      	moveq	r0, #0
   b9816:	fab1 f381 	clz	r3, r1
   b981a:	bf08      	it	eq
   b981c:	3320      	addeq	r3, #32
   b981e:	f1a3 030b 	sub.w	r3, r3, #11
   b9822:	f1b3 0220 	subs.w	r2, r3, #32
   b9826:	da0c      	bge.n	b9842 <__adddf3+0x16e>
   b9828:	320c      	adds	r2, #12
   b982a:	dd08      	ble.n	b983e <__adddf3+0x16a>
   b982c:	f102 0c14 	add.w	ip, r2, #20
   b9830:	f1c2 020c 	rsb	r2, r2, #12
   b9834:	fa01 f00c 	lsl.w	r0, r1, ip
   b9838:	fa21 f102 	lsr.w	r1, r1, r2
   b983c:	e00c      	b.n	b9858 <__adddf3+0x184>
   b983e:	f102 0214 	add.w	r2, r2, #20
   b9842:	bfd8      	it	le
   b9844:	f1c2 0c20 	rsble	ip, r2, #32
   b9848:	fa01 f102 	lsl.w	r1, r1, r2
   b984c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9850:	bfdc      	itt	le
   b9852:	ea41 010c 	orrle.w	r1, r1, ip
   b9856:	4090      	lslle	r0, r2
   b9858:	1ae4      	subs	r4, r4, r3
   b985a:	bfa2      	ittt	ge
   b985c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9860:	4329      	orrge	r1, r5
   b9862:	bd30      	popge	{r4, r5, pc}
   b9864:	ea6f 0404 	mvn.w	r4, r4
   b9868:	3c1f      	subs	r4, #31
   b986a:	da1c      	bge.n	b98a6 <__adddf3+0x1d2>
   b986c:	340c      	adds	r4, #12
   b986e:	dc0e      	bgt.n	b988e <__adddf3+0x1ba>
   b9870:	f104 0414 	add.w	r4, r4, #20
   b9874:	f1c4 0220 	rsb	r2, r4, #32
   b9878:	fa20 f004 	lsr.w	r0, r0, r4
   b987c:	fa01 f302 	lsl.w	r3, r1, r2
   b9880:	ea40 0003 	orr.w	r0, r0, r3
   b9884:	fa21 f304 	lsr.w	r3, r1, r4
   b9888:	ea45 0103 	orr.w	r1, r5, r3
   b988c:	bd30      	pop	{r4, r5, pc}
   b988e:	f1c4 040c 	rsb	r4, r4, #12
   b9892:	f1c4 0220 	rsb	r2, r4, #32
   b9896:	fa20 f002 	lsr.w	r0, r0, r2
   b989a:	fa01 f304 	lsl.w	r3, r1, r4
   b989e:	ea40 0003 	orr.w	r0, r0, r3
   b98a2:	4629      	mov	r1, r5
   b98a4:	bd30      	pop	{r4, r5, pc}
   b98a6:	fa21 f004 	lsr.w	r0, r1, r4
   b98aa:	4629      	mov	r1, r5
   b98ac:	bd30      	pop	{r4, r5, pc}
   b98ae:	f094 0f00 	teq	r4, #0
   b98b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b98b6:	bf06      	itte	eq
   b98b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b98bc:	3401      	addeq	r4, #1
   b98be:	3d01      	subne	r5, #1
   b98c0:	e74e      	b.n	b9760 <__adddf3+0x8c>
   b98c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b98c6:	bf18      	it	ne
   b98c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98cc:	d029      	beq.n	b9922 <__adddf3+0x24e>
   b98ce:	ea94 0f05 	teq	r4, r5
   b98d2:	bf08      	it	eq
   b98d4:	ea90 0f02 	teqeq	r0, r2
   b98d8:	d005      	beq.n	b98e6 <__adddf3+0x212>
   b98da:	ea54 0c00 	orrs.w	ip, r4, r0
   b98de:	bf04      	itt	eq
   b98e0:	4619      	moveq	r1, r3
   b98e2:	4610      	moveq	r0, r2
   b98e4:	bd30      	pop	{r4, r5, pc}
   b98e6:	ea91 0f03 	teq	r1, r3
   b98ea:	bf1e      	ittt	ne
   b98ec:	2100      	movne	r1, #0
   b98ee:	2000      	movne	r0, #0
   b98f0:	bd30      	popne	{r4, r5, pc}
   b98f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b98f6:	d105      	bne.n	b9904 <__adddf3+0x230>
   b98f8:	0040      	lsls	r0, r0, #1
   b98fa:	4149      	adcs	r1, r1
   b98fc:	bf28      	it	cs
   b98fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9902:	bd30      	pop	{r4, r5, pc}
   b9904:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9908:	bf3c      	itt	cc
   b990a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b990e:	bd30      	popcc	{r4, r5, pc}
   b9910:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9914:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b991c:	f04f 0000 	mov.w	r0, #0
   b9920:	bd30      	pop	{r4, r5, pc}
   b9922:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9926:	bf1a      	itte	ne
   b9928:	4619      	movne	r1, r3
   b992a:	4610      	movne	r0, r2
   b992c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9930:	bf1c      	itt	ne
   b9932:	460b      	movne	r3, r1
   b9934:	4602      	movne	r2, r0
   b9936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b993a:	bf06      	itte	eq
   b993c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9940:	ea91 0f03 	teqeq	r1, r3
   b9944:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9948:	bd30      	pop	{r4, r5, pc}
   b994a:	bf00      	nop

000b994c <__aeabi_ui2d>:
   b994c:	f090 0f00 	teq	r0, #0
   b9950:	bf04      	itt	eq
   b9952:	2100      	moveq	r1, #0
   b9954:	4770      	bxeq	lr
   b9956:	b530      	push	{r4, r5, lr}
   b9958:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b995c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9960:	f04f 0500 	mov.w	r5, #0
   b9964:	f04f 0100 	mov.w	r1, #0
   b9968:	e750      	b.n	b980c <__adddf3+0x138>
   b996a:	bf00      	nop

000b996c <__aeabi_i2d>:
   b996c:	f090 0f00 	teq	r0, #0
   b9970:	bf04      	itt	eq
   b9972:	2100      	moveq	r1, #0
   b9974:	4770      	bxeq	lr
   b9976:	b530      	push	{r4, r5, lr}
   b9978:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b997c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9980:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9984:	bf48      	it	mi
   b9986:	4240      	negmi	r0, r0
   b9988:	f04f 0100 	mov.w	r1, #0
   b998c:	e73e      	b.n	b980c <__adddf3+0x138>
   b998e:	bf00      	nop

000b9990 <__aeabi_f2d>:
   b9990:	0042      	lsls	r2, r0, #1
   b9992:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9996:	ea4f 0131 	mov.w	r1, r1, rrx
   b999a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b999e:	bf1f      	itttt	ne
   b99a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b99a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b99a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b99ac:	4770      	bxne	lr
   b99ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b99b2:	bf08      	it	eq
   b99b4:	4770      	bxeq	lr
   b99b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b99ba:	bf04      	itt	eq
   b99bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b99c0:	4770      	bxeq	lr
   b99c2:	b530      	push	{r4, r5, lr}
   b99c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b99c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b99cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b99d0:	e71c      	b.n	b980c <__adddf3+0x138>
   b99d2:	bf00      	nop

000b99d4 <__aeabi_ul2d>:
   b99d4:	ea50 0201 	orrs.w	r2, r0, r1
   b99d8:	bf08      	it	eq
   b99da:	4770      	bxeq	lr
   b99dc:	b530      	push	{r4, r5, lr}
   b99de:	f04f 0500 	mov.w	r5, #0
   b99e2:	e00a      	b.n	b99fa <__aeabi_l2d+0x16>

000b99e4 <__aeabi_l2d>:
   b99e4:	ea50 0201 	orrs.w	r2, r0, r1
   b99e8:	bf08      	it	eq
   b99ea:	4770      	bxeq	lr
   b99ec:	b530      	push	{r4, r5, lr}
   b99ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b99f2:	d502      	bpl.n	b99fa <__aeabi_l2d+0x16>
   b99f4:	4240      	negs	r0, r0
   b99f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b99fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b99fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9a02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9a06:	f43f aed8 	beq.w	b97ba <__adddf3+0xe6>
   b9a0a:	f04f 0203 	mov.w	r2, #3
   b9a0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9a12:	bf18      	it	ne
   b9a14:	3203      	addne	r2, #3
   b9a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9a1a:	bf18      	it	ne
   b9a1c:	3203      	addne	r2, #3
   b9a1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9a22:	f1c2 0320 	rsb	r3, r2, #32
   b9a26:	fa00 fc03 	lsl.w	ip, r0, r3
   b9a2a:	fa20 f002 	lsr.w	r0, r0, r2
   b9a2e:	fa01 fe03 	lsl.w	lr, r1, r3
   b9a32:	ea40 000e 	orr.w	r0, r0, lr
   b9a36:	fa21 f102 	lsr.w	r1, r1, r2
   b9a3a:	4414      	add	r4, r2
   b9a3c:	e6bd      	b.n	b97ba <__adddf3+0xe6>
   b9a3e:	bf00      	nop

000b9a40 <atexit>:
   b9a40:	2300      	movs	r3, #0
   b9a42:	4601      	mov	r1, r0
   b9a44:	461a      	mov	r2, r3
   b9a46:	4618      	mov	r0, r3
   b9a48:	f000 b8c8 	b.w	b9bdc <__register_exitproc>

000b9a4c <calloc>:
   b9a4c:	4b02      	ldr	r3, [pc, #8]	; (b9a58 <calloc+0xc>)
   b9a4e:	460a      	mov	r2, r1
   b9a50:	4601      	mov	r1, r0
   b9a52:	6818      	ldr	r0, [r3, #0]
   b9a54:	f000 b818 	b.w	b9a88 <_calloc_r>
   b9a58:	2003d400 	.word	0x2003d400

000b9a5c <memcpy>:
   b9a5c:	440a      	add	r2, r1
   b9a5e:	4291      	cmp	r1, r2
   b9a60:	f100 33ff 	add.w	r3, r0, #4294967295
   b9a64:	d100      	bne.n	b9a68 <memcpy+0xc>
   b9a66:	4770      	bx	lr
   b9a68:	b510      	push	{r4, lr}
   b9a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9a72:	4291      	cmp	r1, r2
   b9a74:	d1f9      	bne.n	b9a6a <memcpy+0xe>
   b9a76:	bd10      	pop	{r4, pc}

000b9a78 <memset>:
   b9a78:	4402      	add	r2, r0
   b9a7a:	4603      	mov	r3, r0
   b9a7c:	4293      	cmp	r3, r2
   b9a7e:	d100      	bne.n	b9a82 <memset+0xa>
   b9a80:	4770      	bx	lr
   b9a82:	f803 1b01 	strb.w	r1, [r3], #1
   b9a86:	e7f9      	b.n	b9a7c <memset+0x4>

000b9a88 <_calloc_r>:
   b9a88:	b513      	push	{r0, r1, r4, lr}
   b9a8a:	434a      	muls	r2, r1
   b9a8c:	4611      	mov	r1, r2
   b9a8e:	9201      	str	r2, [sp, #4]
   b9a90:	f7fe fe86 	bl	b87a0 <_malloc_r>
   b9a94:	4604      	mov	r4, r0
   b9a96:	b118      	cbz	r0, b9aa0 <_calloc_r+0x18>
   b9a98:	9a01      	ldr	r2, [sp, #4]
   b9a9a:	2100      	movs	r1, #0
   b9a9c:	f7ff ffec 	bl	b9a78 <memset>
   b9aa0:	4620      	mov	r0, r4
   b9aa2:	b002      	add	sp, #8
   b9aa4:	bd10      	pop	{r4, pc}
	...

000b9aa8 <srand>:
   b9aa8:	b538      	push	{r3, r4, r5, lr}
   b9aaa:	4b10      	ldr	r3, [pc, #64]	; (b9aec <srand+0x44>)
   b9aac:	681d      	ldr	r5, [r3, #0]
   b9aae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ab0:	4604      	mov	r4, r0
   b9ab2:	b9b3      	cbnz	r3, b9ae2 <srand+0x3a>
   b9ab4:	2018      	movs	r0, #24
   b9ab6:	f7fe fe4b 	bl	b8750 <malloc>
   b9aba:	4602      	mov	r2, r0
   b9abc:	63a8      	str	r0, [r5, #56]	; 0x38
   b9abe:	b920      	cbnz	r0, b9aca <srand+0x22>
   b9ac0:	4b0b      	ldr	r3, [pc, #44]	; (b9af0 <srand+0x48>)
   b9ac2:	480c      	ldr	r0, [pc, #48]	; (b9af4 <srand+0x4c>)
   b9ac4:	2142      	movs	r1, #66	; 0x42
   b9ac6:	f7fe fe73 	bl	b87b0 <__assert_func>
   b9aca:	490b      	ldr	r1, [pc, #44]	; (b9af8 <srand+0x50>)
   b9acc:	4b0b      	ldr	r3, [pc, #44]	; (b9afc <srand+0x54>)
   b9ace:	e9c0 1300 	strd	r1, r3, [r0]
   b9ad2:	4b0b      	ldr	r3, [pc, #44]	; (b9b00 <srand+0x58>)
   b9ad4:	6083      	str	r3, [r0, #8]
   b9ad6:	230b      	movs	r3, #11
   b9ad8:	8183      	strh	r3, [r0, #12]
   b9ada:	2100      	movs	r1, #0
   b9adc:	2001      	movs	r0, #1
   b9ade:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9ae2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9ae4:	2200      	movs	r2, #0
   b9ae6:	611c      	str	r4, [r3, #16]
   b9ae8:	615a      	str	r2, [r3, #20]
   b9aea:	bd38      	pop	{r3, r4, r5, pc}
   b9aec:	2003d400 	.word	0x2003d400
   b9af0:	000bb501 	.word	0x000bb501
   b9af4:	000bb518 	.word	0x000bb518
   b9af8:	abcd330e 	.word	0xabcd330e
   b9afc:	e66d1234 	.word	0xe66d1234
   b9b00:	0005deec 	.word	0x0005deec

000b9b04 <strcpy>:
   b9b04:	4603      	mov	r3, r0
   b9b06:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9b0a:	f803 2b01 	strb.w	r2, [r3], #1
   b9b0e:	2a00      	cmp	r2, #0
   b9b10:	d1f9      	bne.n	b9b06 <strcpy+0x2>
   b9b12:	4770      	bx	lr

000b9b14 <strlen>:
   b9b14:	4603      	mov	r3, r0
   b9b16:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9b1a:	2a00      	cmp	r2, #0
   b9b1c:	d1fb      	bne.n	b9b16 <strlen+0x2>
   b9b1e:	1a18      	subs	r0, r3, r0
   b9b20:	3801      	subs	r0, #1
   b9b22:	4770      	bx	lr

000b9b24 <strtok>:
   b9b24:	4b16      	ldr	r3, [pc, #88]	; (b9b80 <strtok+0x5c>)
   b9b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b28:	681e      	ldr	r6, [r3, #0]
   b9b2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9b2c:	4605      	mov	r5, r0
   b9b2e:	b9fc      	cbnz	r4, b9b70 <strtok+0x4c>
   b9b30:	2050      	movs	r0, #80	; 0x50
   b9b32:	9101      	str	r1, [sp, #4]
   b9b34:	f7fe fe0c 	bl	b8750 <malloc>
   b9b38:	9901      	ldr	r1, [sp, #4]
   b9b3a:	65b0      	str	r0, [r6, #88]	; 0x58
   b9b3c:	4602      	mov	r2, r0
   b9b3e:	b920      	cbnz	r0, b9b4a <strtok+0x26>
   b9b40:	4b10      	ldr	r3, [pc, #64]	; (b9b84 <strtok+0x60>)
   b9b42:	4811      	ldr	r0, [pc, #68]	; (b9b88 <strtok+0x64>)
   b9b44:	2157      	movs	r1, #87	; 0x57
   b9b46:	f7fe fe33 	bl	b87b0 <__assert_func>
   b9b4a:	e9c0 4400 	strd	r4, r4, [r0]
   b9b4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9b52:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b9b56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b9b5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9b5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9b62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b9b66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b9b6a:	6184      	str	r4, [r0, #24]
   b9b6c:	7704      	strb	r4, [r0, #28]
   b9b6e:	6244      	str	r4, [r0, #36]	; 0x24
   b9b70:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9b72:	2301      	movs	r3, #1
   b9b74:	4628      	mov	r0, r5
   b9b76:	b002      	add	sp, #8
   b9b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9b7c:	f000 b806 	b.w	b9b8c <__strtok_r>
   b9b80:	2003d400 	.word	0x2003d400
   b9b84:	000bb501 	.word	0x000bb501
   b9b88:	000bb595 	.word	0x000bb595

000b9b8c <__strtok_r>:
   b9b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9b8e:	b908      	cbnz	r0, b9b94 <__strtok_r+0x8>
   b9b90:	6810      	ldr	r0, [r2, #0]
   b9b92:	b188      	cbz	r0, b9bb8 <__strtok_r+0x2c>
   b9b94:	4604      	mov	r4, r0
   b9b96:	4620      	mov	r0, r4
   b9b98:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9b9c:	460f      	mov	r7, r1
   b9b9e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9ba2:	b91e      	cbnz	r6, b9bac <__strtok_r+0x20>
   b9ba4:	b965      	cbnz	r5, b9bc0 <__strtok_r+0x34>
   b9ba6:	6015      	str	r5, [r2, #0]
   b9ba8:	4628      	mov	r0, r5
   b9baa:	e005      	b.n	b9bb8 <__strtok_r+0x2c>
   b9bac:	42b5      	cmp	r5, r6
   b9bae:	d1f6      	bne.n	b9b9e <__strtok_r+0x12>
   b9bb0:	2b00      	cmp	r3, #0
   b9bb2:	d1f0      	bne.n	b9b96 <__strtok_r+0xa>
   b9bb4:	6014      	str	r4, [r2, #0]
   b9bb6:	7003      	strb	r3, [r0, #0]
   b9bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9bba:	461c      	mov	r4, r3
   b9bbc:	e00c      	b.n	b9bd8 <__strtok_r+0x4c>
   b9bbe:	b915      	cbnz	r5, b9bc6 <__strtok_r+0x3a>
   b9bc0:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9bc4:	460e      	mov	r6, r1
   b9bc6:	f816 5b01 	ldrb.w	r5, [r6], #1
   b9bca:	42ab      	cmp	r3, r5
   b9bcc:	d1f7      	bne.n	b9bbe <__strtok_r+0x32>
   b9bce:	2b00      	cmp	r3, #0
   b9bd0:	d0f3      	beq.n	b9bba <__strtok_r+0x2e>
   b9bd2:	2300      	movs	r3, #0
   b9bd4:	f804 3c01 	strb.w	r3, [r4, #-1]
   b9bd8:	6014      	str	r4, [r2, #0]
   b9bda:	e7ed      	b.n	b9bb8 <__strtok_r+0x2c>

000b9bdc <__register_exitproc>:
   b9bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9be0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9c9c <__register_exitproc+0xc0>
   b9be4:	4606      	mov	r6, r0
   b9be6:	f8d8 0000 	ldr.w	r0, [r8]
   b9bea:	461f      	mov	r7, r3
   b9bec:	460d      	mov	r5, r1
   b9bee:	4691      	mov	r9, r2
   b9bf0:	f000 f856 	bl	b9ca0 <__retarget_lock_acquire_recursive>
   b9bf4:	4b25      	ldr	r3, [pc, #148]	; (b9c8c <__register_exitproc+0xb0>)
   b9bf6:	681c      	ldr	r4, [r3, #0]
   b9bf8:	b934      	cbnz	r4, b9c08 <__register_exitproc+0x2c>
   b9bfa:	4c25      	ldr	r4, [pc, #148]	; (b9c90 <__register_exitproc+0xb4>)
   b9bfc:	601c      	str	r4, [r3, #0]
   b9bfe:	4b25      	ldr	r3, [pc, #148]	; (b9c94 <__register_exitproc+0xb8>)
   b9c00:	b113      	cbz	r3, b9c08 <__register_exitproc+0x2c>
   b9c02:	681b      	ldr	r3, [r3, #0]
   b9c04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9c08:	6863      	ldr	r3, [r4, #4]
   b9c0a:	2b1f      	cmp	r3, #31
   b9c0c:	dd07      	ble.n	b9c1e <__register_exitproc+0x42>
   b9c0e:	f8d8 0000 	ldr.w	r0, [r8]
   b9c12:	f000 f847 	bl	b9ca4 <__retarget_lock_release_recursive>
   b9c16:	f04f 30ff 	mov.w	r0, #4294967295
   b9c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c1e:	b34e      	cbz	r6, b9c74 <__register_exitproc+0x98>
   b9c20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9c24:	b988      	cbnz	r0, b9c4a <__register_exitproc+0x6e>
   b9c26:	4b1c      	ldr	r3, [pc, #112]	; (b9c98 <__register_exitproc+0xbc>)
   b9c28:	b923      	cbnz	r3, b9c34 <__register_exitproc+0x58>
   b9c2a:	f8d8 0000 	ldr.w	r0, [r8]
   b9c2e:	f000 f838 	bl	b9ca2 <__retarget_lock_release>
   b9c32:	e7f0      	b.n	b9c16 <__register_exitproc+0x3a>
   b9c34:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9c38:	f7fe fd8a 	bl	b8750 <malloc>
   b9c3c:	2800      	cmp	r0, #0
   b9c3e:	d0f4      	beq.n	b9c2a <__register_exitproc+0x4e>
   b9c40:	2300      	movs	r3, #0
   b9c42:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9c46:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9c4a:	6863      	ldr	r3, [r4, #4]
   b9c4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9c50:	2201      	movs	r2, #1
   b9c52:	409a      	lsls	r2, r3
   b9c54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9c58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9c5c:	4313      	orrs	r3, r2
   b9c5e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9c62:	2e02      	cmp	r6, #2
   b9c64:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9c68:	bf02      	ittt	eq
   b9c6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9c6e:	4313      	orreq	r3, r2
   b9c70:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9c74:	6863      	ldr	r3, [r4, #4]
   b9c76:	f8d8 0000 	ldr.w	r0, [r8]
   b9c7a:	1c5a      	adds	r2, r3, #1
   b9c7c:	3302      	adds	r3, #2
   b9c7e:	6062      	str	r2, [r4, #4]
   b9c80:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9c84:	f000 f80e 	bl	b9ca4 <__retarget_lock_release_recursive>
   b9c88:	2000      	movs	r0, #0
   b9c8a:	e7c6      	b.n	b9c1a <__register_exitproc+0x3e>
   b9c8c:	2003e7e8 	.word	0x2003e7e8
   b9c90:	2003e75c 	.word	0x2003e75c
   b9c94:	00000000 	.word	0x00000000
   b9c98:	000b8751 	.word	0x000b8751
   b9c9c:	2003d464 	.word	0x2003d464

000b9ca0 <__retarget_lock_acquire_recursive>:
   b9ca0:	4770      	bx	lr

000b9ca2 <__retarget_lock_release>:
   b9ca2:	4770      	bx	lr

000b9ca4 <__retarget_lock_release_recursive>:
   b9ca4:	4770      	bx	lr

000b9ca6 <link_code_end>:
	...

000b9ca8 <dynalib_user>:
   b9ca8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9cb8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9cc8:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   b9cd8:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   b9ce8:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   b9cf8:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   b9d08:	6f69 006e 4f4d 4f44 4220 5341 4349 004f     ion.MODO BASICO.
   b9d18:	4f4d 4f44 4120 4156 5a4e 4441 004f 4f4d     MODO AVANZADO.MO
   b9d28:	4f44 4d20 5355 4349 0041 6942 6d74 7061     DO MUSICA.Bitmap
   b9d38:	6e20 746f 6120 6176 6c69 6261 656c 002e      not available..
   b9d48:	4f43 454e 5443 5241 4120 4820 5845 4741     CONECTAR A HEXAG
   b9d58:	4e4f 004f 4f43 454e 5443 5241 4120 4320     ONO.CONECTAR A C
   b9d68:	4155 5244 4441 004f 4f43 454e 5443 5241     UADRADO.CONECTAR
   b9d78:	4120 5420 4952 4e41 5547 4f4c 4300 4e4f      A TRIANGULO.CON
   b9d88:	4345 4154 2052 2041 4f52 424d 004f 4f43     ECTAR A ROMBO.CO
   b9d98:	454e 5443 5241 4120 5320 4d45 4349 5249     NECTAR A SEMICIR
   b9da8:	5543 4f4c 4300 4e4f 4345 4154 2052 2041     CULO.CONECTAR A 
   b9db8:	4943 4352 4c55 004f 6154 6a72 7465 2061     CIRCULO.Tarjeta 
   b9dc8:	6e69 6176 696c 6164 7020 7261 2061 7365     invalida para es
   b9dd8:	6574 6d20 646f 006f 6f42 7272 6461 206f     te modo.Borrado 
   b9de8:	6e69 6176 696c 6f64 7020 7261 2061 7365     invalido para es
   b9df8:	6574 6d20 646f 006f 724f 6564 206e 6564     te modo.Orden de
   b9e08:	7420 7261 656a 6174 2073 6e69 6176 696c      tarjetas invali
   b9e18:	6f64 5000 6575 7472 206f 6f6e 6420 7369     do.Puerto no dis
   b9e28:	6f70 696e 6c62 0065 6c50 7961 6e20 206f     ponible.Play no 
   b9e38:	6964 7073 6e6f 6269 656c 5300 6e65 6f73     disponible.Senso
   b9e48:	2072 6f6e 6420 7369 6f70 696e 6c62 2065     r no disponible 
   b9e58:	6528 206e 7375 296f 4100 7463 6175 6f64     (en uso).Actuado
   b9e68:	2072 6f6e 6420 7369 6f70 696e 6c62 2065     r no disponible 
   b9e78:	6528 206e 7375 296f 4200 726f 6172 6f64     (en uso).Borrado
   b9e88:	6420 2065 6c62 716f 6575 7220 6165 696c      de bloque reali
   b9e98:	617a 6f64 4e00 6461 2061 7571 2065 6f62     zado.Nada que bo
   b9ea8:	7272 7261 4200 726f 6172 6f64 6420 2065     rrar.Borrado de 
   b9eb8:	6f6c 706f 7220 6165 696c 617a 6f64 4e00     loop realizado.N
   b9ec8:	6461 2061 7571 2065 6f62 7272 7261 002e     ada que borrar..
   b9ed8:	6f4e 6174 6920 766e a1c3 696c 6164 5400     Nota inv..lida.T
   b9ee8:	7069 206f 6e69 c376 6ca1 6469 006f 4552     ipo inv..lido.RE
   b9ef8:	4d00 0049 4146 5300 4c4f 4c00 0041 4953     .MI.FA.SOL.LA.SI
   b9f08:	4400 274f 5f00 0043 4e5f 5f00 0042 6425     .DO'._C._N._B.%d
   b9f18:	2d20 2520 0064 6946 616e 696c 617a 6520      - %d.Finaliza e
   b9f28:	206c 7562 6c63 2065 6e61 6574 2073 6564     l bucle antes de
   b9f38:	7220 7065 6f72 7564 6963 0072 6e49 6176      reproducir.Inva
   b9f48:	696c 2064 6573 736e 726f 2021 3e2d 5320     lid sensor! -> S
   b9f58:	6e65 6f73 2072 6572 6570 6974 6f64 6520     ensor repetido e
   b9f68:	206e 6c65 6220 6f6c 7571 0065 6f4d 6f64     n el bloque.Modo
   b9f78:	4220 5341 4349 204f 6564 6574 7463 6461      BASICO detectad
   b9f88:	006f 6e49 6369 6169 646e 206f 6f6d 6f64     o.Iniciando modo
   b9f98:	4220 5341 4349 2e4f 2e2e 4d00 646f 206f      BASICO....Modo 
   b9fa8:	5641 4e41 415a 4f44 6420 7465 6365 6174     AVANZADO detecta
   b9fb8:	6f64 4900 696e 6963 6e61 6f64 6d20 646f     do.Iniciando mod
   b9fc8:	206f 5641 4e41 415a 4f44 2e2e 002e 6f4d     o AVANZADO....Mo
   b9fd8:	6f64 4d20 5355 4349 2041 6564 6574 7463     do MUSICA detect
   b9fe8:	6461 006f 6e49 6369 6169 646e 206f 6f6d     ado.Iniciando mo
   b9ff8:	6f64 4d20 5355 4349 2e41 2e2e 4d00 4649     do MUSICA....MIF
   ba008:	5241 5f45 6552 6461 2928 6620 6961 656c     ARE_Read() faile
   ba018:	3a64 0020 4350 5f44 7541 6874 6e65 6974     d: .PCD_Authenti
   ba028:	6163 6574 2928 6620 6961 656c 3a64 0020     cate() failed: .
   ba038:	6154 4967 666e 3a6f 2520 0073 6f43 656e     TagInfo: %s.Cone
   ba048:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
   ba058:	0a30 4300 6e6f 6365 6174 2072 6c61 7020     0..Conectar al p
   ba068:	6575 7472 206f 3241 000a 6f43 656e 7463     uerto A2..Conect
   ba078:	7261 6120 206c 7570 7265 6f74 4120 0a34     ar al puerto A4.
   ba088:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   ba098:	7472 206f 3244 000a 6f43 656e 7463 7261     rto D2..Conectar
   ba0a8:	6120 206c 7570 7265 6f74 4420 0a34 4300      al puerto D4..C
   ba0b8:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   ba0c8:	206f 3644 000a 7245 6f72 3a72 4e20 206f     o D6..Error: No 
   ba0d8:	6168 2079 616d 2073 7570 7265 6f74 2073     hay mas puertos 
   ba0e8:	6964 7073 6e6f 6269 656c 2073 000a 4545     disponibles ..EE
   ba0f8:	5250 4d4f 6520 706d 7974 5400 6761 4420     PROM empty.Tag D
   ba108:	7465 6365 6174 6164 2d20 3e2d 0020 6a45     etectada --> .Ej
   ba118:	6365 7475 6e61 6f64 2e2e 002e 6f42 7272     ecutando....Borr
   ba128:	6461 206f 6f63 706d 656c 6f74 7220 6165     ado completo rea
   ba138:	696c 617a 6f64 4200 726f 6172 6f64 6e20     lizado.Borrado n
   ba148:	206f 6570 6d72 7469 6469 206f 6170 6172     o permitido para
   ba158:	6520 7473 2065 6f6d 6f64 5300 6e65 6f73      este modo.Senso
   ba168:	2072 6564 6574 7463 6461 006f 6341 7574     r detectado.Actu
   ba178:	6461 726f 6420 7465 6365 6174 6f64 5400     ador detectado.T
   ba188:	7261 656a 6174 6920 766e a1c3 696c 6164     arjeta inv..lida
   ba198:	7020 7261 2061 7365 6574 6d20 646f 006f      para este modo.
   ba1a8:	6a45 6365 7475 6e61 6f64 7420 6761 2d20     Ejecutando tag -
   ba1b8:	3e2d 0020 6553 6520 7073 7265 6261 2061     -> .Se esperaba 
   ba1c8:	4649 7420 6761 4400 7365 7570 7365 6420     IF tag.Despues d
   ba1d8:	2065 6e75 7320 6e65 6f73 2072 6573 6520     e un sensor se e
   ba1e8:	7073 7265 2061 6e75 2061 6f63 636e 6f69     spera una concio
   ba1f8:	3a6e 4120 444e 7520 4f20 0052 6553 736e     n: AND u OR.Sens
   ba208:	726f 6920 766e 6c61 6469 006f 6553 6520     or invalido.Se e
   ba218:	7073 7265 6261 2061 4854 4e45 7420 6761     speraba THEN tag
   ba228:	4900 766e 6c61 6469 4120 7463 6175 6f64     .Invalid Actuado
   ba238:	0072 6553 6520 7073 7265 6261 2061 4c45     r.Se esperaba EL
   ba248:	4553 7420 6761 4900 2046 6564 6574 7463     SE tag.IF detect
   ba258:	6461 006f 4649 4e00 6d75 7265 206f 6564     ado.IF.Numero de
   ba268:	6220 6f6c 7571 7365 3e20 3220 7c20 207c      bloques > 2 || 
   ba278:	6553 6e20 6365 7365 7469 2061 6c61 6d20     Se necesita al m
   ba288:	6e65 736f 7520 206e 6361 7574 6461 726f     enos un actuador
   ba298:	7020 7261 2061 6574 6d72 6e69 7261 6520      para terminar e
   ba2a8:	206c 6c62 716f 6575 4100 444e 4f2f 2052     l bloque.AND/OR 
   ba2b8:	6564 6574 7463 6461 006f 4e41 0044 6e55     detectado.AND.Un
   ba2c8:	2061 6f63 636e 6369 6f69 206e 6f73 6f6c     a concicion solo
   ba2d8:	7020 6575 6564 6920 2072 6573 7567 6469      puede ir seguid
   ba2e8:	2061 6564 7520 206e 6573 736e 726f 002e     a de un sensor..
   ba2f8:	4854 4e45 6420 7465 6365 6174 6f64 5400     THEN detectado.T
   ba308:	4548 004e 754e 656d 6f72 6420 2065 6573     HEN.Numero de se
   ba318:	736e 726f 7365 6920 666e 6375 6569 746e     nsores infucient
   ba328:	7365 4500 534c 2045 6564 6574 7463 6461     es.ELSE detectad
   ba338:	006f 4c45 4553 4900 746e 6f72 7564 6563     o.ELSE.Introduce
   ba348:	7520 206e 6341 7574 6461 726f 7020 7261      un Actuador par
   ba358:	2061 616c 6520 6176 756c 6361 c369 6eb3     a la evaluaci..n
   ba368:	6120 5420 5552 0045 6946 206e 6154 0067      a TRUE.Fin Tag.
   ba378:	2023 6c42 716f 6575 7c20 2320 5320 6e65     # Bloque | # Sen
   ba388:	6f73 6572 2073 207c 2023 6f43 646e 6369     sores | # Condic
   ba398:	6f69 656e 2073 207c 2023 6341 7574 6461     iones | # Actuad
   ba3a8:	726f 7365 2000 2020 2520 2064 7c09 2009     ores.    %d .|. 
   ba3b8:	6425 0920 097c 2520 2064 7c09 2009 6425     %d .|. %d .|. %d
   ba3c8:	0920 097c 2520 0064 6f42 7272 6461 2061      .|. %d.Borrada 
   ba3d8:	bac3 746c 6d69 2061 656c 7463 7275 0061     ..ltima lectura.
   ba3e8:	6150 6172 6320 6d6f 6e65 617a 2072 6e75     Para comenzar un
   ba3f8:	6c20 6f6f 2070 6168 2079 7571 2065 6966      loop hay que fi
   ba408:	616e 696c 617a 2072 6c65 6120 746e 7265     nalizar el anter
   ba418:	6f69 2e72 4500 444e 4c20 6f6f 0070 6920     ior..END Loop. i
   ba428:	6574 6172 6963 6e6f 7365 4c00 6f6f 2070     teraciones.Loop 
   ba438:	6973 206e 6f63 656d 7a6e 7261 6f20 7320     sin comenzar o s
   ba448:	6e69 6320 6e6f 6574 696e 6f64 2d00 3000     in contenido.-.0
   ba458:	3123 3123 3023 3000 3123 3123 3123 3000     #1#1#0.0#1#1#1.0
   ba468:	3023 3123 3023 3000 3023 3123 3123 3000     #0#1#0.0#0#1#1.0
   ba478:	3023 3123 3223 3000 3023 3123 3323 3000     #0#1#2.0#0#1#3.0
   ba488:	3023 3123 3423 3000 3023 3123 3523 3600     #0#1#4.0#0#1#5.6
   ba498:	3023 3023 3600 3023 3123 3600 3023 3223     #0#0.6#0#1.6#0#2
   ba4a8:	3600 3123 3023 3600 3223 3023 3600 3223     .6#1#0.6#2#0.6#2
   ba4b8:	3123 3600 3223 3223 3100 3023 3123 3723     #1.6#2#2.1#0#1#7
   ba4c8:	3023 3100 3023 3123 3723 3123 3100 3023     #0.1#0#1#7#1.1#0
   ba4d8:	3023 3223 3023 3100 3023 3023 3223 3123     #0#2#0.1#0#0#2#1
   ba4e8:	3100 3023 3023 3323 3023 3100 3023 3023     .1#0#0#3#0.1#0#0
   ba4f8:	3323 3123 3100 3023 3123 3423 3023 3100     #3#1.1#0#1#4#0.1
   ba508:	3023 3123 3423 3123 3100 3123 3123 3123     #0#1#4#1.1#1#1#1
   ba518:	3023 3100 3123 3123 3123 3123 3100 3123     #0.1#1#1#1#1.1#1
   ba528:	3123 3023 3023 3100 3123 3123 3023 3123     #1#0#0.1#1#1#0#1
   ba538:	3100 3123 3123 3023 3223 3100 3123 3123     .1#1#1#0#2.1#1#1
   ba548:	3023 3323 3100 3123 3123 3023 3423 3100     #0#3.1#1#1#0#4.1
   ba558:	3123 3123 3023 3623 3100 3123 3123 3023     #1#1#0#6.1#1#1#0
   ba568:	3723 3100 3323 3023 3100 3323 3123 3200     #7.1#3#0.1#3#1.2
   ba578:	3023 3023 3023 3200 3023 3023 3123 3200     #0#0#0.2#0#0#1.2
   ba588:	3023 3023 3223 3200 3023 3123 3023 3200     #0#0#2.2#0#1#0.2
   ba598:	3023 3123 3123 3200 3023 3123 3223 3200     #0#1#1.2#0#1#2.2
   ba5a8:	3023 3223 3023 3200 3023 3223 3123 3200     #0#2#0.2#0#2#1.2
   ba5b8:	3023 3223 3223 3200 3023 3323 3023 3200     #0#2#2.2#0#3#0.2
   ba5c8:	3023 3323 3123 3200 3023 3323 3223 3200     #0#3#1.2#0#3#2.2
   ba5d8:	3023 3423 3023 3200 3023 3423 3123 3200     #0#4#0.2#0#4#1.2
   ba5e8:	3023 3423 3223 3200 3023 3523 3023 3200     #0#4#2.2#0#5#0.2
   ba5f8:	3023 3523 3123 3200 3023 3523 3223 3200     #0#5#1.2#0#5#2.2
   ba608:	3023 3623 3023 3200 3023 3623 3123 3200     #0#6#0.2#0#6#1.2
   ba618:	3023 3623 3223 3200 3023 3723 3023 3200     #0#6#2.2#0#7#0.2
   ba628:	3023 3723 3123 3200 3023 3723 3223 3200     #0#7#1.2#0#7#2.2
   ba638:	3123 3023 3200 3223 3023 3200 3223 3123     #1#0.2#2#0.2#2#1
	...

000ba64a <CSWTCH.309>:
   ba64a:	00fa 01f4 03e8 6564 6166 6c75 2074 4d00     ......default .M
   ba65a:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   ba66a:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   ba67a:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   ba68a:	2073 4f4d 4544 7525 003e                    s MODE%u>.

000ba694 <_ZL4font>:
   ba694:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba6a4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba6b4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba6c4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba6d4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba6e4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba6f4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba704:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba714:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba724:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba734:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba744:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba754:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba764:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba774:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba784:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba794:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba7a4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba7b4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba7c4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba7d4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba7e4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba7f4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba804:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba814:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba824:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba834:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba844:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba854:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba864:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba874:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba884:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba894:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba8a4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba8b4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba8c4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba8d4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba8e4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba8f4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba904:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba914:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba924:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba934:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba944:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba954:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba964:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba974:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba984:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba994:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba9a4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba9b4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba9c4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba9d4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba9e4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba9f4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   baa04:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   baa14:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   baa24:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   baa34:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   baa44:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   baa54:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   baa64:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   baa74:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   baa84:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   baa94:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   baaa4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   baab4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   baac4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   baad4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   baae4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   baaf4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bab04:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bab14:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bab24:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bab34:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bab44:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bab54:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bab64:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bab74:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bab84:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bab94 <_ZTV12Adafruit_GFX>:
	...
   baba4:	6c81 000b 8c29 000b 409d 000b 6687 000b     .l..)....@...f..
   babb4:	6689 000b 66bb 000b 6697 000b 66a9 000b     .f...f...f...f..
   babc4:	65c9 000b 6687 000b 68b3 000b 68b1 000b     .e...f...h...h..
   babd4:	66d3 000b 6711 000b 674b 000b 6791 000b     .f...g..Kg...g..
   babe4:	67ad 000b 6831 000b 6e55 6e6b 776f 206e     .g..1h..Unknown 
   babf4:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bac04:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bac14:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bac24:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bac34:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bac44:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bac54:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bac64:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bac74:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bac84:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bac94:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   baca4:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bacb4:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bacc4:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bacd4:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bace4 <CSWTCH.84>:
   bace4:	abfa 000b ac03 000b ac1b 000b ac30 000b     ............0...
   bacf4:	ac4a 000b ac66 000b ac95 000b aca7 000b     J...f...........
   bad04:	acc1 000b                                   ....

000bad08 <_ZTVN8particle11SPISettingsE>:
	...
   bad10:	6575 000b 6565 000b 6567 000b               ue..ee..ge..

000bad1c <_ZL12splash2_data>:
   bad1c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bad2c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bad3c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bad58:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bad68:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bad78:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bad88:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bad98:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bada8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   badb8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   badc8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   badd8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bade8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   badf8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bae08:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bae18:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bae28:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bae38:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bae48:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bae58:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bae68:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bae78:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bae88:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bae98:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   baeb0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   baec0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   baed0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   baee0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   baef0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000baefc <_ZL14sucreLogo_data>:
   baefc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf1c:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   baf2c:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   baf3c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   baf4c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   baf5c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   baf6c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   baf7c:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   baf8c:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   baf9c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bafac:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bafbc:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bafcc:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bafdc:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bafec:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   baffc:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bb00c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb01c:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bb02c:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bb03c:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bb04c:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bb05c:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bb06c:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bb07c:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bb08c:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bb09c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bb0ac:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bb0bc:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bb0cc:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bb0dc:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bb0ec:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bb0fc:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bb10c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bb11c:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bb12c:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bb13c:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bb14c:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bb15c:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bb16c:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bb17c:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bb18c:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bb19c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1fc:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bb20c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bb21c:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bb22c:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bb23c:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bb24c:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bb25c:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bb26c:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bb27c:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bb28c:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bb29c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bb2ac:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bb2bc:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb2cc:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb2dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bb2fc <_ZTV16Adafruit_SSD1306>:
	...
   bb304:	7835 000b 784d 000b 6c81 000b 8c29 000b     5x..Mx...l..)...
   bb314:	7861 000b 6687 000b 6689 000b 66bb 000b     ax...f...f...f..
   bb324:	6697 000b 66a9 000b 65c9 000b 6687 000b     .f...f...e...f..
   bb334:	68b3 000b 79f3 000b 7f8f 000b 7f41 000b     .h...y......A...
   bb344:	674b 000b 6791 000b 67ad 000b 6831 000b     Kg...g...g..1h..

000bb354 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bb354:	8000 e0c0 f8f0 fefc                         ........

000bb35c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bb35c:	0100 0703 1f0f 7f3f                         ......?.

000bb364 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bb364:	d5ae a880                                   ....

000bb368 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bb368:	00d3 8d40                                   ..@.

000bb36c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bb36c:	0020 c8a1                                    ...

000bb370 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bb370:	40db a6a4 af2e                              .@....

000bb376 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bb376:	02da 8f81                                   ....

000bb37a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bb37a:	12da                                         ...

000bb37d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bb37d:	02da                                         ...

000bb380 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bb380:	0022 21ff 0000 0000                         "..!....

000bb388 <_ZTVN5spark13EthernetClassE>:
	...
   bb390:	882f 000b 8825 000b 881b 000b 8811 000b     /...%...........
   bb3a0:	8805 000b 87f9 000b 9355 000b 935d 000b     ........U...]...
   bb3b0:	87ed 000b 87e5 000b 87db 000b 87d1 000b     ................
   bb3c0:	938d 000b                                   ....

000bb3c4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb3c4:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bb3d4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bb3e4:	7361 7463 6d69 0065                         asctime.

000bb3ec <_ZTV9IPAddress>:
	...
   bb3f4:	8f05 000b 8ef5 000b 8ef7 000b               ............

000bb400 <_ZTV9USBSerial>:
	...
   bb408:	8feb 000b 9053 000b 9029 000b 8c29 000b     ....S...)...)...
   bb418:	901b 000b 8fed 000b 8ffd 000b 904d 000b     ............M...
   bb428:	900d 000b 8fe5 000b                         ........

000bb430 <_ZTV11USARTSerial>:
	...
   bb438:	9149 000b 91b5 000b 918d 000b 8c29 000b     I...........)...
   bb448:	915d 000b 9179 000b 916b 000b 9187 000b     ]...y...k.......
   bb458:	914b 000b 914f 000b                         K...O...

000bb460 <_ZTV7TwoWire>:
	...
   bb468:	91ed 000b 9237 000b 920f 000b 91ef 000b     ....7...........
   bb478:	9217 000b 921f 000b 9227 000b 922f 000b     ........'.../...

000bb488 <_ZTVN5spark9WiFiClassE>:
	...
   bb490:	92f7 000b 92ed 000b 92e3 000b 9299 000b     ................
   bb4a0:	92d7 000b 92cb 000b 9355 000b 935d 000b     ........U...]...
   bb4b0:	92bf 000b 92b7 000b 92ad 000b 92a3 000b     ................
   bb4c0:	938d 000b                                   ....

000bb4c4 <_ZTVN5spark12NetworkClassE>:
	...
   bb4cc:	9315 000b 931f 000b 9329 000b 9333 000b     ........)...3...
   bb4dc:	933d 000b 9349 000b 9355 000b 935d 000b     =...I...U...]...
   bb4ec:	9365 000b 9371 000b 9379 000b 9383 000b     e...q...y.......
   bb4fc:	938d 000b                                   ....

000bb500 <_ZSt7nothrow>:
   bb500:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bb510:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bb520:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bb530:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bb540:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bb550:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bb560:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bb570:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bb580:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bb590:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bb5a0:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bb5b0:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bb5c0:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bb5d0:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bb5e0:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bb5f0:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bb600:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bb610:	2e6b 0063                                   k.c.

000bb614 <link_const_variable_data_end>:
   bb614:	000b609d 	.word	0x000b609d
   bb618:	000b8839 	.word	0x000b8839
   bb61c:	000b89b1 	.word	0x000b89b1
   bb620:	000b8c19 	.word	0x000b8c19
   bb624:	000b8d51 	.word	0x000b8d51
   bb628:	000b8d61 	.word	0x000b8d61
   bb62c:	000b8d7d 	.word	0x000b8d7d
   bb630:	000b9301 	.word	0x000b9301
   bb634:	000b9465 	.word	0x000b9465

000bb638 <link_constructors_end>:
	...
