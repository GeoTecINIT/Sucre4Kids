
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008044  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc060  000bc060  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc084  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003ce80  000bc088  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018b8  2003cf38  2003cf38  0002cf38  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bc140  000bc140  0002c140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bc168  000bc168  0002c168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00166954  00000000  00000000  0002c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019051  00000000  00000000  00192ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00050b29  00000000  00000000  001abb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003740  00000000  00000000  001fc63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bee0  00000000  00000000  001ffd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce0  00000000  00000000  0020bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059c2c  00000000  00000000  0025093a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c411  00000000  00000000  002aa566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a670  00000000  00000000  003e6978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 ffe9 	bl	ba004 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fff1 	bl	ba020 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003ce80 	.word	0x2003ce80
   b4048:	000bc088 	.word	0x000bc088
   b404c:	2003cf38 	.word	0x2003cf38
   b4050:	2003cf38 	.word	0x2003cf38
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 f9d1 	bl	b9404 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bc03c 	.word	0x000bc03c
   b407c:	000bc060 	.word	0x000bc060

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f001 b9b4 	b.w	b53ec <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f001 fa5f 	bl	b5548 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 b971 	b.w	b9374 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f004 be31 	b.w	b8cf8 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f004 be37 	b.w	b8d08 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f004 fd8c 	bl	b8bc0 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b8911 	.word	0x000b8911
   b40b0:	000ba264 	.word	0x000ba264

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b40c4:	4a08      	ldr	r2, [pc, #32]	; (b40e8 <_Z10borradoALLi.part.0+0x24>)
   b40c6:	2300      	movs	r3, #0
   b40c8:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b40ca:	4a08      	ldr	r2, [pc, #32]	; (b40ec <_Z10borradoALLi.part.0+0x28>)
   b40cc:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b40ce:	4a08      	ldr	r2, [pc, #32]	; (b40f0 <_Z10borradoALLi.part.0+0x2c>)
   b40d0:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b40d2:	4a08      	ldr	r2, [pc, #32]	; (b40f4 <_Z10borradoALLi.part.0+0x30>)
   b40d4:	f04f 31ff 	mov.w	r1, #4294967295
   b40d8:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b40da:	4a07      	ldr	r2, [pc, #28]	; (b40f8 <_Z10borradoALLi.part.0+0x34>)
   b40dc:	2103      	movs	r1, #3
   b40de:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b40e0:	4a06      	ldr	r2, [pc, #24]	; (b40fc <_Z10borradoALLi.part.0+0x38>)
   b40e2:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b40e4:	4770      	bx	lr
   b40e6:	bf00      	nop
   b40e8:	2003cf45 	.word	0x2003cf45
   b40ec:	2003cf54 	.word	0x2003cf54
   b40f0:	2003cf44 	.word	0x2003cf44
   b40f4:	2003cea8 	.word	0x2003cea8
   b40f8:	2003ceac 	.word	0x2003ceac
   b40fc:	2003dc68 	.word	0x2003dc68

000b4100 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4100:	b40e      	push	{r1, r2, r3}
   b4102:	b503      	push	{r0, r1, lr}
   b4104:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4106:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4108:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b410c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b410e:	f005 f8c2 	bl	b9296 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4112:	b002      	add	sp, #8
   b4114:	f85d eb04 	ldr.w	lr, [sp], #4
   b4118:	b003      	add	sp, #12
   b411a:	4770      	bx	lr

000b411c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b503      	push	{r0, r1, lr}
   b4120:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4122:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4128:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b412a:	f005 f8b4 	bl	b9296 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b412e:	b002      	add	sp, #8
   b4130:	f85d eb04 	ldr.w	lr, [sp], #4
   b4134:	b003      	add	sp, #12
   b4136:	4770      	bx	lr

000b4138 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4138:	b507      	push	{r0, r1, r2, lr}
   b413a:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b413c:	a801      	add	r0, sp, #4
   b413e:	f003 fd61 	bl	b7c04 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4142:	a801      	add	r0, sp, #4
   b4144:	f003 fd60 	bl	b7c08 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4148:	2809      	cmp	r0, #9
   b414a:	bf8c      	ite	hi
   b414c:	2000      	movhi	r0, #0
   b414e:	2001      	movls	r0, #1
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4156:	b507      	push	{r0, r1, r2, lr}
   b4158:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b415a:	a801      	add	r0, sp, #4
   b415c:	f003 fd52 	bl	b7c04 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4160:	a801      	add	r0, sp, #4
   b4162:	f003 fd51 	bl	b7c08 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4166:	280a      	cmp	r0, #10
   b4168:	bfd4      	ite	le
   b416a:	2000      	movle	r0, #0
   b416c:	2001      	movgt	r0, #1
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4174:	2802      	cmp	r0, #2
{
   b4176:	b508      	push	{r3, lr}
    switch (puerto)
   b4178:	d00b      	beq.n	b4192 <_Z5siLuzi+0x1e>
   b417a:	2804      	cmp	r0, #4
   b417c:	d00b      	beq.n	b4196 <_Z5siLuzi+0x22>
   b417e:	b960      	cbnz	r0, b419a <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4180:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4182:	f005 fcc8 	bl	b9b16 <analogRead>
   b4186:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b418a:	bfb4      	ite	lt
   b418c:	2000      	movlt	r0, #0
   b418e:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4190:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4192:	2011      	movs	r0, #17
   b4194:	e7f5      	b.n	b4182 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4196:	200f      	movs	r0, #15
   b4198:	e7f3      	b.n	b4182 <_Z5siLuzi+0xe>
    switch (puerto)
   b419a:	2000      	movs	r0, #0
   b419c:	e7f8      	b.n	b4190 <_Z5siLuzi+0x1c>

000b419e <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b419e:	2802      	cmp	r0, #2
{
   b41a0:	b508      	push	{r3, lr}
    switch (puerto)
   b41a2:	d00b      	beq.n	b41bc <_Z5noLuzi+0x1e>
   b41a4:	2804      	cmp	r0, #4
   b41a6:	d00b      	beq.n	b41c0 <_Z5noLuzi+0x22>
   b41a8:	b960      	cbnz	r0, b41c4 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41aa:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41ac:	f005 fcb3 	bl	b9b16 <analogRead>
   b41b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41b4:	bfcc      	ite	gt
   b41b6:	2000      	movgt	r0, #0
   b41b8:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41ba:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41bc:	2011      	movs	r0, #17
   b41be:	e7f5      	b.n	b41ac <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41c0:	200f      	movs	r0, #15
   b41c2:	e7f3      	b.n	b41ac <_Z5noLuzi+0xe>
    switch (puerto)
   b41c4:	2000      	movs	r0, #0
   b41c6:	e7f8      	b.n	b41ba <_Z5noLuzi+0x1c>

000b41c8 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b41c8:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b41ca:	b280      	uxth	r0, r0
   b41cc:	f005 fca3 	bl	b9b16 <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b41d0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41d4:	bfb4      	ite	lt
   b41d6:	2000      	movlt	r0, #0
   b41d8:	2001      	movge	r0, #1
   b41da:	bd08      	pop	{r3, pc}

000b41dc <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41dc:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41de:	b280      	uxth	r0, r0
   b41e0:	f005 fc99 	bl	b9b16 <analogRead>
        return true;
    return false;
}
   b41e4:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41e8:	bfcc      	ite	gt
   b41ea:	2000      	movgt	r0, #0
   b41ec:	2001      	movle	r0, #1
   b41ee:	bd08      	pop	{r3, pc}

000b41f0 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41f0:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41f2:	b280      	uxth	r0, r0
   b41f4:	2100      	movs	r1, #0
   b41f6:	9001      	str	r0, [sp, #4]
   b41f8:	f005 fc50 	bl	b9a9c <pinMode>
    if (digitalRead(puerto) == HIGH)
   b41fc:	9801      	ldr	r0, [sp, #4]
   b41fe:	f005 fc77 	bl	b9af0 <digitalRead>
        return true;
    return false;
}
   b4202:	1e43      	subs	r3, r0, #1
   b4204:	4258      	negs	r0, r3
   b4206:	4158      	adcs	r0, r3
   b4208:	b003      	add	sp, #12
   b420a:	f85d fb04 	ldr.w	pc, [sp], #4

000b420e <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b420e:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4210:	b280      	uxth	r0, r0
   b4212:	2100      	movs	r1, #0
   b4214:	9001      	str	r0, [sp, #4]
   b4216:	f005 fc41 	bl	b9a9c <pinMode>
    if (digitalRead(puerto) == LOW)
   b421a:	9801      	ldr	r0, [sp, #4]
   b421c:	f005 fc68 	bl	b9af0 <digitalRead>
        return true;
    return false;
}
   b4220:	fab0 f080 	clz	r0, r0
   b4224:	0940      	lsrs	r0, r0, #5
   b4226:	b003      	add	sp, #12
   b4228:	f85d fb04 	ldr.w	pc, [sp], #4

000b422c <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b422c:	2802      	cmp	r0, #2
{
   b422e:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4230:	d024      	beq.n	b427c <_Z10siRotativoi+0x50>
   b4232:	2804      	cmp	r0, #4
   b4234:	d024      	beq.n	b4280 <_Z10siRotativoi+0x54>
   b4236:	b918      	cbnz	r0, b4240 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4238:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b423a:	f005 fc6c 	bl	b9b16 <analogRead>
   b423e:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4240:	eddd 7a01 	vldr	s15, [sp, #4]
   b4244:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4284 <_Z10siRotativoi+0x58>
   b4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b424c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4250:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4254:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4258:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4288 <_Z10siRotativoi+0x5c>
   b425c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4264:	eddf 7a09 	vldr	s15, [pc, #36]	; b428c <_Z10siRotativoi+0x60>
   b4268:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4270:	bfac      	ite	ge
   b4272:	2001      	movge	r0, #1
   b4274:	2000      	movlt	r0, #0
   b4276:	b003      	add	sp, #12
   b4278:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b427c:	2011      	movs	r0, #17
   b427e:	e7dc      	b.n	b423a <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4280:	200f      	movs	r0, #15
   b4282:	e7da      	b.n	b423a <_Z10siRotativoi+0xe>
   b4284:	447fc000 	.word	0x447fc000
   b4288:	43960000 	.word	0x43960000
   b428c:	442a0000 	.word	0x442a0000

000b4290 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4290:	2802      	cmp	r0, #2
{
   b4292:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4294:	d024      	beq.n	b42e0 <_Z10noRotativoi+0x50>
   b4296:	2804      	cmp	r0, #4
   b4298:	d024      	beq.n	b42e4 <_Z10noRotativoi+0x54>
   b429a:	b918      	cbnz	r0, b42a4 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b429c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b429e:	f005 fc3a 	bl	b9b16 <analogRead>
   b42a2:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b42a4:	eddd 7a01 	vldr	s15, [sp, #4]
   b42a8:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42e8 <_Z10noRotativoi+0x58>
   b42ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b42b8:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b42bc:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42ec <_Z10noRotativoi+0x5c>
   b42c0:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b42c8:	eddf 7a09 	vldr	s15, [pc, #36]	; b42f0 <_Z10noRotativoi+0x60>
   b42cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42d4:	bf94      	ite	ls
   b42d6:	2001      	movls	r0, #1
   b42d8:	2000      	movhi	r0, #0
   b42da:	b003      	add	sp, #12
   b42dc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42e0:	2011      	movs	r0, #17
   b42e2:	e7dc      	b.n	b429e <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42e4:	200f      	movs	r0, #15
   b42e6:	e7da      	b.n	b429e <_Z10noRotativoi+0xe>
   b42e8:	447fc000 	.word	0x447fc000
   b42ec:	43960000 	.word	0x43960000
   b42f0:	442a0000 	.word	0x442a0000

000b42f4 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b42f4:	b530      	push	{r4, r5, lr}
   b42f6:	ed2d 8b02 	vpush	{d8}
   b42fa:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b42fc:	b2c1      	uxtb	r1, r0
   b42fe:	2306      	movs	r3, #6
   b4300:	220b      	movs	r2, #11
   b4302:	a801      	add	r0, sp, #4
   b4304:	f003 fca4 	bl	b7c50 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4308:	a801      	add	r0, sp, #4
   b430a:	f003 fca8 	bl	b7c5e <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b430e:	a801      	add	r0, sp, #4
   b4310:	f003 fd62 	bl	b7dd8 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4314:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b431c:	eeb4 0a40 	vcmp.f32	s0, s0
   b4320:	bf0c      	ite	eq
   b4322:	2401      	moveq	r4, #1
   b4324:	2400      	movne	r4, #0
   b4326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b432a:	bf68      	it	vs
   b432c:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4330:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4334:	2c00      	cmp	r4, #0
   b4336:	d1ea      	bne.n	b430e <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4338:	f005 f986 	bl	b9648 <_Z16_fetch_usbserialv>
   b433c:	4605      	mov	r5, r0
   b433e:	ee18 0a10 	vmov	r0, s16
   b4342:	f005 fdf9 	bl	b9f38 <__aeabi_f2d>
   b4346:	4602      	mov	r2, r0
   b4348:	460b      	mov	r3, r1
   b434a:	4628      	mov	r0, r5
   b434c:	490a      	ldr	r1, [pc, #40]	; (b4378 <_Z8tempFrioi+0x84>)
   b434e:	f7ff fee5 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4352:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b435a:	dd08      	ble.n	b436e <_Z8tempFrioi+0x7a>
   b435c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4360:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4368:	bf4c      	ite	mi
   b436a:	2401      	movmi	r4, #1
   b436c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b436e:	4620      	mov	r0, r4
   b4370:	b007      	add	sp, #28
   b4372:	ecbd 8b02 	vpop	{d8}
   b4376:	bd30      	pop	{r4, r5, pc}
   b4378:	000ba279 	.word	0x000ba279

000b437c <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b437c:	b510      	push	{r4, lr}
   b437e:	ed2d 8b02 	vpush	{d8}
   b4382:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4384:	b2c1      	uxtb	r1, r0
   b4386:	2306      	movs	r3, #6
   b4388:	220b      	movs	r2, #11
   b438a:	a801      	add	r0, sp, #4
   b438c:	f003 fc60 	bl	b7c50 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4390:	a801      	add	r0, sp, #4
   b4392:	f003 fc64 	bl	b7c5e <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4396:	a801      	add	r0, sp, #4
   b4398:	f003 fd1e 	bl	b7dd8 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b439c:	eeb4 0a40 	vcmp.f32	s0, s0
   b43a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43a4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b43a8:	d6f5      	bvs.n	b4396 <_Z12tempTempladoi+0x1a>
   b43aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43b2:	d0f0      	beq.n	b4396 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b43b4:	f005 f948 	bl	b9648 <_Z16_fetch_usbserialv>
   b43b8:	4604      	mov	r4, r0
   b43ba:	ee18 0a10 	vmov	r0, s16
   b43be:	f005 fdbb 	bl	b9f38 <__aeabi_f2d>
   b43c2:	4602      	mov	r2, r0
   b43c4:	460b      	mov	r3, r1
   b43c6:	4620      	mov	r0, r4
   b43c8:	490c      	ldr	r1, [pc, #48]	; (b43fc <_Z12tempTempladoi+0x80>)
   b43ca:	f7ff fea7 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b43ce:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b43d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43da:	dc04      	bgt.n	b43e6 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43dc:	2000      	movs	r0, #0
}
   b43de:	b006      	add	sp, #24
   b43e0:	ecbd 8b02 	vpop	{d8}
   b43e4:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43e6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f2:	bf4c      	ite	mi
   b43f4:	2001      	movmi	r0, #1
   b43f6:	2000      	movpl	r0, #0
   b43f8:	e7f1      	b.n	b43de <_Z12tempTempladoi+0x62>
   b43fa:	bf00      	nop
   b43fc:	000ba279 	.word	0x000ba279

000b4400 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4400:	b530      	push	{r4, r5, lr}
   b4402:	ed2d 8b02 	vpush	{d8}
   b4406:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4408:	b2c1      	uxtb	r1, r0
   b440a:	2306      	movs	r3, #6
   b440c:	220b      	movs	r2, #11
   b440e:	a801      	add	r0, sp, #4
   b4410:	f003 fc1e 	bl	b7c50 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4414:	a801      	add	r0, sp, #4
   b4416:	f003 fc22 	bl	b7c5e <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b441a:	a801      	add	r0, sp, #4
   b441c:	f003 fcdc 	bl	b7dd8 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4420:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4428:	eeb4 0a40 	vcmp.f32	s0, s0
   b442c:	bf0c      	ite	eq
   b442e:	2401      	moveq	r4, #1
   b4430:	2400      	movne	r4, #0
   b4432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4436:	bf68      	it	vs
   b4438:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b443c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4440:	2c00      	cmp	r4, #0
   b4442:	d1ea      	bne.n	b441a <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4444:	f005 f900 	bl	b9648 <_Z16_fetch_usbserialv>
   b4448:	4605      	mov	r5, r0
   b444a:	ee18 0a10 	vmov	r0, s16
   b444e:	f005 fd73 	bl	b9f38 <__aeabi_f2d>
   b4452:	4602      	mov	r2, r0
   b4454:	460b      	mov	r3, r1
   b4456:	4628      	mov	r0, r5
   b4458:	490b      	ldr	r1, [pc, #44]	; (b4488 <_Z9tempCalori+0x88>)
   b445a:	f7ff fe5f 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b445e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4462:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b446a:	dd08      	ble.n	b447e <_Z9tempCalori+0x7e>
   b446c:	eddf 7a07 	vldr	s15, [pc, #28]	; b448c <_Z9tempCalori+0x8c>
   b4470:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4478:	bf4c      	ite	mi
   b447a:	2401      	movmi	r4, #1
   b447c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b447e:	4620      	mov	r0, r4
   b4480:	b007      	add	sp, #28
   b4482:	ecbd 8b02 	vpop	{d8}
   b4486:	bd30      	pop	{r4, r5, pc}
   b4488:	000ba279 	.word	0x000ba279
   b448c:	42480000 	.word	0x42480000

000b4490 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4490:	b508      	push	{r3, lr}
   b4492:	4603      	mov	r3, r0
   b4494:	3b01      	subs	r3, #1
   b4496:	4610      	mov	r0, r2
   b4498:	2b06      	cmp	r3, #6
   b449a:	d843      	bhi.n	b4524 <_Z10leerSensoriii+0x94>
   b449c:	e8df f003 	tbb	[pc, r3]
   b44a0:	1b120904 	.word	0x1b120904
   b44a4:	2d24      	.short	0x2d24
   b44a6:	04          	.byte	0x04
   b44a7:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44a8:	bbc1      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b44aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44ae:	f7ff be43 	b.w	b4138 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b2:	b919      	cbnz	r1, b44bc <_Z10leerSensoriii+0x2c>
   b44b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b8:	f7ff be71 	b.w	b419e <_Z5noLuzi>
   b44bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44c0:	f7ff be58 	b.w	b4174 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44c4:	b919      	cbnz	r1, b44ce <_Z10leerSensoriii+0x3e>
   b44c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44ca:	f7ff be87 	b.w	b41dc <_Z7noRuidoi>
   b44ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44d2:	f7ff be79 	b.w	b41c8 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44d6:	b919      	cbnz	r1, b44e0 <_Z10leerSensoriii+0x50>
   b44d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44dc:	f7ff be97 	b.w	b420e <_Z7noBotoni>
   b44e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44e4:	f7ff be84 	b.w	b41f0 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44e8:	b919      	cbnz	r1, b44f2 <_Z10leerSensoriii+0x62>
   b44ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44ee:	f7ff becf 	b.w	b4290 <_Z10noRotativoi>
   b44f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44f6:	f7ff be99 	b.w	b422c <_Z10siRotativoi>
        switch (condicion)
   b44fa:	2901      	cmp	r1, #1
   b44fc:	d006      	beq.n	b450c <_Z10leerSensoriii+0x7c>
   b44fe:	2902      	cmp	r1, #2
   b4500:	d008      	beq.n	b4514 <_Z10leerSensoriii+0x84>
   b4502:	b959      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>
   b4504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4508:	f7ff bef4 	b.w	b42f4 <_Z8tempFrioi>
   b450c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4510:	f7ff bf34 	b.w	b437c <_Z12tempTempladoi>
   b4514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4518:	f7ff bf72 	b.w	b4400 <_Z9tempCalori>
   b451c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4520:	f7ff be19 	b.w	b4156 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4524:	f005 f890 	bl	b9648 <_Z16_fetch_usbserialv>
   b4528:	4902      	ldr	r1, [pc, #8]	; (b4534 <_Z10leerSensoriii+0xa4>)
   b452a:	f004 fe8c 	bl	b9246 <_ZN5Print7printlnEPKc>
   b452e:	2000      	movs	r0, #0
   b4530:	bd08      	pop	{r3, pc}
   b4532:	bf00      	nop
   b4534:	000ba282 	.word	0x000ba282

000b4538 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b4538:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b453a:	2300      	movs	r3, #0
   b453c:	4804      	ldr	r0, [pc, #16]	; (b4550 <_Z9ledApagarv+0x18>)
   b453e:	9300      	str	r3, [sp, #0]
   b4540:	461a      	mov	r2, r3
   b4542:	4619      	mov	r1, r3
   b4544:	f004 f922 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4548:	b003      	add	sp, #12
   b454a:	f85d fb04 	ldr.w	pc, [sp], #4
   b454e:	bf00      	nop
   b4550:	2003d91c 	.word	0x2003d91c

000b4554 <_Z7ledRojov>:
void ledRojo()
{
   b4554:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4556:	2300      	movs	r3, #0
   b4558:	4804      	ldr	r0, [pc, #16]	; (b456c <_Z7ledRojov+0x18>)
   b455a:	9300      	str	r3, [sp, #0]
   b455c:	22ff      	movs	r2, #255	; 0xff
   b455e:	4619      	mov	r1, r3
   b4560:	f004 f914 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4564:	b003      	add	sp, #12
   b4566:	f85d fb04 	ldr.w	pc, [sp], #4
   b456a:	bf00      	nop
   b456c:	2003d91c 	.word	0x2003d91c

000b4570 <_Z8ledVerdev>:
void ledVerde()
{
   b4570:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4572:	230a      	movs	r3, #10
   b4574:	2200      	movs	r2, #0
   b4576:	9300      	str	r3, [sp, #0]
   b4578:	4803      	ldr	r0, [pc, #12]	; (b4588 <_Z8ledVerdev+0x18>)
   b457a:	23ff      	movs	r3, #255	; 0xff
   b457c:	4611      	mov	r1, r2
   b457e:	f004 f905 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4582:	b003      	add	sp, #12
   b4584:	f85d fb04 	ldr.w	pc, [sp], #4
   b4588:	2003d91c 	.word	0x2003d91c

000b458c <_Z7ledAzulv>:
void ledAzul()
{
   b458c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b458e:	23ff      	movs	r3, #255	; 0xff
   b4590:	9300      	str	r3, [sp, #0]
   b4592:	2300      	movs	r3, #0
   b4594:	4803      	ldr	r0, [pc, #12]	; (b45a4 <_Z7ledAzulv+0x18>)
   b4596:	461a      	mov	r2, r3
   b4598:	4619      	mov	r1, r3
   b459a:	f004 f8f7 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b459e:	b003      	add	sp, #12
   b45a0:	f85d fb04 	ldr.w	pc, [sp], #4
   b45a4:	2003d91c 	.word	0x2003d91c

000b45a8 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b45a8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b45aa:	2100      	movs	r1, #0
   b45ac:	4804      	ldr	r0, [pc, #16]	; (b45c0 <_Z11ledAmarillov+0x18>)
   b45ae:	9100      	str	r1, [sp, #0]
   b45b0:	23e9      	movs	r3, #233	; 0xe9
   b45b2:	22ff      	movs	r2, #255	; 0xff
   b45b4:	f004 f8ea 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45b8:	b003      	add	sp, #12
   b45ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b45be:	bf00      	nop
   b45c0:	2003d91c 	.word	0x2003d91c

000b45c4 <_Z9ledMoradov>:
void ledMorado()
{
   b45c4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b45c6:	2375      	movs	r3, #117	; 0x75
   b45c8:	9300      	str	r3, [sp, #0]
   b45ca:	4804      	ldr	r0, [pc, #16]	; (b45dc <_Z9ledMoradov+0x18>)
   b45cc:	2346      	movs	r3, #70	; 0x46
   b45ce:	226c      	movs	r2, #108	; 0x6c
   b45d0:	2100      	movs	r1, #0
   b45d2:	f004 f8db 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45d6:	b003      	add	sp, #12
   b45d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b45dc:	2003d91c 	.word	0x2003d91c

000b45e0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b45e0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b45e2:	2100      	movs	r1, #0
   b45e4:	4804      	ldr	r0, [pc, #16]	; (b45f8 <_Z10ledNaranjav+0x18>)
   b45e6:	9100      	str	r1, [sp, #0]
   b45e8:	2380      	movs	r3, #128	; 0x80
   b45ea:	22ff      	movs	r2, #255	; 0xff
   b45ec:	f004 f8ce 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45f0:	b003      	add	sp, #12
   b45f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b45f6:	bf00      	nop
   b45f8:	2003d91c 	.word	0x2003d91c

000b45fc <_Z9ledBlancov>:
void ledBlanco()
{
   b45fc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b45fe:	23ff      	movs	r3, #255	; 0xff
   b4600:	4804      	ldr	r0, [pc, #16]	; (b4614 <_Z9ledBlancov+0x18>)
   b4602:	9300      	str	r3, [sp, #0]
   b4604:	461a      	mov	r2, r3
   b4606:	2100      	movs	r1, #0
   b4608:	f004 f8c0 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b460c:	b003      	add	sp, #12
   b460e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4612:	bf00      	nop
   b4614:	2003d91c 	.word	0x2003d91c

000b4618 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b4618:	b510      	push	{r4, lr}
   switch (counter)
   b461a:	4c11      	ldr	r4, [pc, #68]	; (b4660 <_Z11ledArcoirisv+0x48>)
   b461c:	6823      	ldr	r3, [r4, #0]
   b461e:	2b05      	cmp	r3, #5
   b4620:	d809      	bhi.n	b4636 <_Z11ledArcoirisv+0x1e>
   b4622:	e8df f003 	tbb	[pc, r3]
   b4626:	0d03      	.short	0x0d03
   b4628:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b462c:	f7ff ff92 	bl	b4554 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b4630:	6823      	ldr	r3, [r4, #0]
   b4632:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b4634:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b463a:	2096      	movs	r0, #150	; 0x96
   b463c:	f004 be6e 	b.w	b931c <delay>
      ledNaranja();
   b4640:	f7ff ffce 	bl	b45e0 <_Z10ledNaranjav>
      counter++;
   b4644:	e7f4      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b4646:	f7ff ffaf 	bl	b45a8 <_Z11ledAmarillov>
      counter++;
   b464a:	e7f1      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b464c:	f7ff ff90 	bl	b4570 <_Z8ledVerdev>
      counter++;
   b4650:	e7ee      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b4652:	f7ff ffb7 	bl	b45c4 <_Z9ledMoradov>
   b4656:	e7eb      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b4658:	f7ff ff98 	bl	b458c <_Z7ledAzulv>
      counter = 0;
   b465c:	2300      	movs	r3, #0
   b465e:	e7e9      	b.n	b4634 <_Z11ledArcoirisv+0x1c>
   b4660:	2003d574 	.word	0x2003d574

000b4664 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4664:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4666:	2101      	movs	r1, #1
   b4668:	2006      	movs	r0, #6
   b466a:	f005 fa28 	bl	b9abe <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b466e:	2101      	movs	r1, #1
   b4670:	2006      	movs	r0, #6
   b4672:	f005 fa24 	bl	b9abe <digitalWrite>
   digitalWrite(D7, HIGH);
   b4676:	2101      	movs	r1, #1
   b4678:	2007      	movs	r0, #7
   b467a:	f005 fa20 	bl	b9abe <digitalWrite>
   digitalWrite(D7, 1);
}
   b467e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4682:	2101      	movs	r1, #1
   b4684:	2007      	movs	r0, #7
   b4686:	f005 ba1a 	b.w	b9abe <digitalWrite>

000b468a <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b468a:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b468c:	2100      	movs	r1, #0
   b468e:	2006      	movs	r0, #6
   b4690:	f005 fa15 	bl	b9abe <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4694:	2100      	movs	r1, #0
   b4696:	2006      	movs	r0, #6
   b4698:	f005 fa11 	bl	b9abe <digitalWrite>
   digitalWrite(D7, LOW);
   b469c:	2100      	movs	r1, #0
   b469e:	2007      	movs	r0, #7
   b46a0:	f005 fa0d 	bl	b9abe <digitalWrite>
   digitalWrite(D7, 0);
}
   b46a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b46a8:	2100      	movs	r1, #0
   b46aa:	2007      	movs	r0, #7
   b46ac:	f005 ba07 	b.w	b9abe <digitalWrite>

000b46b0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b46b0:	b508      	push	{r3, lr}
   pitidoON0();
   b46b2:	f7ff ffd7 	bl	b4664 <_Z9pitidoON0v>
   delay(100);
   b46b6:	2064      	movs	r0, #100	; 0x64
   b46b8:	f004 fe30 	bl	b931c <delay>
   pitidoOFF0();
   b46bc:	f7ff ffe5 	bl	b468a <_Z10pitidoOFF0v>
   delay(100);
}
   b46c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b46c4:	2064      	movs	r0, #100	; 0x64
   b46c6:	f004 be29 	b.w	b931c <delay>

000b46ca <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b46ca:	b108      	cbz	r0, b46d0 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b46cc:	f7ff bf5e 	b.w	b458c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b46d0:	f7ff bf86 	b.w	b45e0 <_Z10ledNaranjav>

000b46d4 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b46d4:	b108      	cbz	r0, b46da <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b46d6:	f7ff bf67 	b.w	b45a8 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b46da:	f7ff bf73 	b.w	b45c4 <_Z9ledMoradov>

000b46de <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b46de:	b108      	cbz	r0, b46e4 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b46e0:	f7ff bf46 	b.w	b4570 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b46e4:	f7ff bf36 	b.w	b4554 <_Z7ledRojov>

000b46e8 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b46e8:	b508      	push	{r3, lr}
   if (estado)
   b46ea:	b160      	cbz	r0, b4706 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b46ec:	f7ff ff86 	bl	b45fc <_Z9ledBlancov>
      delay(400);
   b46f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b46f4:	f004 fe12 	bl	b931c <delay>
      ledApagar();
   b46f8:	f7ff ff1e 	bl	b4538 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b46fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4700:	20c8      	movs	r0, #200	; 0xc8
   b4702:	f004 be0b 	b.w	b931c <delay>
}
   b4706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b470a:	f7ff bf15 	b.w	b4538 <_Z9ledApagarv>

000b470e <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b470e:	b108      	cbz	r0, b4714 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b4710:	f7ff bf74 	b.w	b45fc <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b4714:	f7ff bf10 	b.w	b4538 <_Z9ledApagarv>

000b4718 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b4718:	b108      	cbz	r0, b471e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b471a:	f7ff bf7d 	b.w	b4618 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b471e:	f7ff bf0b 	b.w	b4538 <_Z9ledApagarv>

000b4722 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b4722:	b108      	cbz	r0, b4728 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4724:	f7ff bfc4 	b.w	b46b0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4728:	f7ff bfaf 	b.w	b468a <_Z10pitidoOFF0v>

000b472c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b472c:	b108      	cbz	r0, b4732 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b472e:	f7ff bf99 	b.w	b4664 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4732:	f7ff bfaa 	b.w	b468a <_Z10pitidoOFF0v>
	...

000b4738 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   b4738:	4603      	mov	r3, r0
   b473a:	b513      	push	{r0, r1, r4, lr}
   b473c:	460c      	mov	r4, r1
   b473e:	4610      	mov	r0, r2
   switch (id)
   b4740:	b14b      	cbz	r3, b4756 <_Z15activarActuadoriib+0x1e>
   b4742:	2b01      	cmp	r3, #1
   b4744:	d02c      	beq.n	b47a0 <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4746:	f004 ff7f 	bl	b9648 <_Z16_fetch_usbserialv>
   b474a:	491e      	ldr	r1, [pc, #120]	; (b47c4 <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b474c:	b002      	add	sp, #8
   b474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b4752:	f004 bd78 	b.w	b9246 <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4756:	2905      	cmp	r1, #5
   b4758:	d8f5      	bhi.n	b4746 <_Z15activarActuadoriib+0xe>
   b475a:	e8df f001 	tbb	[pc, r1]
   b475e:	0803      	.short	0x0803
   b4760:	1c17120d 	.word	0x1c17120d
}
   b4764:	b002      	add	sp, #8
   b4766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b476a:	f7ff bfb8 	b.w	b46de <_Z12ledVerdeRojob>
}
   b476e:	b002      	add	sp, #8
   b4770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4774:	f7ff bfae 	b.w	b46d4 <_Z17ledMoradoAmarillob>
}
   b4778:	b002      	add	sp, #8
   b477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b477e:	f7ff bfa4 	b.w	b46ca <_Z14ledAzulNaranjab>
}
   b4782:	b002      	add	sp, #8
   b4784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4788:	f7ff bfae 	b.w	b46e8 <_Z9ledBlink0b>
}
   b478c:	b002      	add	sp, #8
   b478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b4792:	f7ff bfc1 	b.w	b4718 <_Z12ledArcoiris0b>
}
   b4796:	b002      	add	sp, #8
   b4798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b479c:	f7ff bfb7 	b.w	b470e <_Z8ledOnOffb>
   b47a0:	9201      	str	r2, [sp, #4]
      ledApagar();
   b47a2:	f7ff fec9 	bl	b4538 <_Z9ledApagarv>
      switch (opcion) {
   b47a6:	9801      	ldr	r0, [sp, #4]
   b47a8:	b134      	cbz	r4, b47b8 <_Z15activarActuadoriib+0x80>
   b47aa:	2c01      	cmp	r4, #1
   b47ac:	d1cb      	bne.n	b4746 <_Z15activarActuadoriib+0xe>
}
   b47ae:	b002      	add	sp, #8
   b47b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b47b4:	f7ff bfb5 	b.w	b4722 <_Z13blinkAndSleepb>
}
   b47b8:	b002      	add	sp, #8
   b47ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b47be:	f7ff bfb5 	b.w	b472c <_Z8zumbadorb>
   b47c2:	bf00      	nop
   b47c4:	000ba295 	.word	0x000ba295

000b47c8 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b47c8:	b508      	push	{r3, lr}
    ledBlanco();
   b47ca:	f7ff ff17 	bl	b45fc <_Z9ledBlancov>
    delay(400);
   b47ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b47d2:	f004 fda3 	bl	b931c <delay>
    ledApagar();
   b47d6:	f7ff feaf 	bl	b4538 <_Z9ledApagarv>
    delay(200);
}
   b47da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b47de:	20c8      	movs	r0, #200	; 0xc8
   b47e0:	f004 bd9c 	b.w	b931c <delay>

000b47e4 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b47e4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b47e6:	b284      	uxth	r4, r0
   b47e8:	4620      	mov	r0, r4
   b47ea:	2101      	movs	r1, #1
   b47ec:	f005 f967 	bl	b9abe <digitalWrite>
    digitalWrite(puerto, HIGH);
   b47f0:	4620      	mov	r0, r4
   b47f2:	2101      	movs	r1, #1
   b47f4:	f005 f963 	bl	b9abe <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b47f8:	1c60      	adds	r0, r4, #1
   b47fa:	b280      	uxth	r0, r0
   b47fc:	2101      	movs	r1, #1
   b47fe:	9001      	str	r0, [sp, #4]
   b4800:	f005 f95d 	bl	b9abe <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4804:	9801      	ldr	r0, [sp, #4]
   b4806:	2101      	movs	r1, #1
}
   b4808:	b002      	add	sp, #8
   b480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b480e:	f005 b956 	b.w	b9abe <digitalWrite>

000b4812 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b4812:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4814:	b284      	uxth	r4, r0
   b4816:	4620      	mov	r0, r4
   b4818:	2100      	movs	r1, #0
   b481a:	f005 f950 	bl	b9abe <digitalWrite>
    digitalWrite(puerto, LOW);
   b481e:	4620      	mov	r0, r4
   b4820:	2100      	movs	r1, #0
   b4822:	f005 f94c 	bl	b9abe <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4826:	1c60      	adds	r0, r4, #1
   b4828:	b280      	uxth	r0, r0
   b482a:	2100      	movs	r1, #0
   b482c:	9001      	str	r0, [sp, #4]
   b482e:	f005 f946 	bl	b9abe <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4832:	9801      	ldr	r0, [sp, #4]
   b4834:	2100      	movs	r1, #0
}
   b4836:	b002      	add	sp, #8
   b4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b483c:	f005 b93f 	b.w	b9abe <digitalWrite>

000b4840 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b4840:	b510      	push	{r4, lr}
   b4842:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b4844:	f7ff ffce 	bl	b47e4 <_Z9pitidoON1i>
    delay(100);
   b4848:	2064      	movs	r0, #100	; 0x64
   b484a:	f004 fd67 	bl	b931c <delay>
    pitidoOFF1(puerto);
   b484e:	4620      	mov	r0, r4
   b4850:	f7ff ffdf 	bl	b4812 <_Z10pitidoOFF1i>
    delay(100);
}
   b4854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4858:	2064      	movs	r0, #100	; 0x64
   b485a:	f004 bd5f 	b.w	b931c <delay>
	...

000b4860 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4860:	b508      	push	{r3, lr}
   b4862:	2807      	cmp	r0, #7
   b4864:	d825      	bhi.n	b48b2 <_Z10activarLEDii+0x52>
   b4866:	e8df f000 	tbb	[pc, r0]
   b486a:	0804      	.short	0x0804
   b486c:	1814100c 	.word	0x1814100c
   b4870:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b4876:	f7ff be7b 	b.w	b4570 <_Z8ledVerdev>
}
   b487a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b487e:	f7ff be69 	b.w	b4554 <_Z7ledRojov>
}
   b4882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b4886:	f7ff be8f 	b.w	b45a8 <_Z11ledAmarillov>
}
   b488a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b488e:	f7ff be99 	b.w	b45c4 <_Z9ledMoradov>
}
   b4892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b4896:	f7ff be79 	b.w	b458c <_Z7ledAzulv>
}
   b489a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b489e:	f7ff be9f 	b.w	b45e0 <_Z10ledNaranjav>
}
   b48a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b48a6:	f7ff bf8f 	b.w	b47c8 <_Z8ledBlinkv>
}
   b48aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b48ae:	f7ff beb3 	b.w	b4618 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b48b2:	f004 fec9 	bl	b9648 <_Z16_fetch_usbserialv>
}
   b48b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b48ba:	4901      	ldr	r1, [pc, #4]	; (b48c0 <_Z10activarLEDii+0x60>)
   b48bc:	f004 bcc3 	b.w	b9246 <_ZN5Print7printlnEPKc>
   b48c0:	000ba2a5 	.word	0x000ba2a5

000b48c4 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b48c4:	b538      	push	{r3, r4, r5, lr}
   b48c6:	460c      	mov	r4, r1
   b48c8:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b48ca:	2101      	movs	r1, #1
   b48cc:	b2a0      	uxth	r0, r4
   b48ce:	f005 f8e5 	bl	b9a9c <pinMode>

    switch (opcion)
   b48d2:	b145      	cbz	r5, b48e6 <_Z15activarZumbadorii+0x22>
   b48d4:	2d01      	cmp	r5, #1
   b48d6:	d00b      	beq.n	b48f0 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b48d8:	f004 feb6 	bl	b9648 <_Z16_fetch_usbserialv>
        break;
    }
}
   b48dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b48e0:	4906      	ldr	r1, [pc, #24]	; (b48fc <_Z15activarZumbadorii+0x38>)
   b48e2:	f004 bcb0 	b.w	b9246 <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b48e6:	4620      	mov	r0, r4
}
   b48e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b48ec:	f7ff bf7a 	b.w	b47e4 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b48f0:	4620      	mov	r0, r4
}
   b48f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b48f6:	f7ff bfa3 	b.w	b4840 <_Z12pitidoBlink1i>
   b48fa:	bf00      	nop
   b48fc:	000ba295 	.word	0x000ba295

000b4900 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4900:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4902:	b908      	cbnz	r0, b4908 <_Z14apagarActuadorii+0x8>
   b4904:	f7ff be18 	b.w	b4538 <_Z9ledApagarv>
   b4908:	2100      	movs	r1, #0
   b490a:	b298      	uxth	r0, r3
   b490c:	f005 b8d7 	b.w	b9abe <digitalWrite>

000b4910 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4910:	4603      	mov	r3, r0
    if (id < 2)
   b4912:	2b01      	cmp	r3, #1
{
   b4914:	4608      	mov	r0, r1
   b4916:	4611      	mov	r1, r2
    if (id < 2)
   b4918:	dc04      	bgt.n	b4924 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b491a:	b90b      	cbnz	r3, b4920 <_Z15actuadorHandleriii+0x10>
   b491c:	f7ff bfa0 	b.w	b4860 <_Z10activarLEDii>
   b4920:	f7ff bfd0 	b.w	b48c4 <_Z15activarZumbadorii>
}
   b4924:	4770      	bx	lr
	...

000b4928 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b4928:	b570      	push	{r4, r5, r6, lr}
   display.clearDisplay();
   b492a:	4e43      	ldr	r6, [pc, #268]	; (b4a38 <_Z10showBitmapii6String+0x110>)
void showBitmap(int id1, int id2, String msg) {
   b492c:	b086      	sub	sp, #24
   b492e:	4605      	mov	r5, r0
   display.clearDisplay();
   b4930:	4630      	mov	r0, r6
void showBitmap(int id1, int id2, String msg) {
   b4932:	460c      	mov	r4, r1
   b4934:	9201      	str	r2, [sp, #4]
   display.clearDisplay();
   b4936:	f003 fbbd 	bl	b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b493a:	2300      	movs	r3, #0
   b493c:	6133      	str	r3, [r6, #16]
   bitmap = true;
   b493e:	4b3f      	ldr	r3, [pc, #252]	; (b4a3c <_Z10showBitmapii6String+0x114>)
   b4940:	2201      	movs	r2, #1
   b4942:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4944:	f003 ffec 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b4948:	4b3d      	ldr	r3, [pc, #244]	; (b4a40 <_Z10showBitmapii6String+0x118>)
   b494a:	9901      	ldr	r1, [sp, #4]
   b494c:	6018      	str	r0, [r3, #0]
   switch (id1)
   b494e:	2d03      	cmp	r5, #3
   b4950:	d811      	bhi.n	b4976 <_Z10showBitmapii6String+0x4e>
   b4952:	e8df f005 	tbb	[pc, r5]
   b4956:	2302      	.short	0x2302
   b4958:	6953      	.short	0x6953
      switch (id2)
   b495a:	2c01      	cmp	r4, #1
   b495c:	d007      	beq.n	b496e <_Z10showBitmapii6String+0x46>
   b495e:	2c02      	cmp	r4, #2
   b4960:	d007      	beq.n	b4972 <_Z10showBitmapii6String+0x4a>
   b4962:	b944      	cbnz	r4, b4976 <_Z10showBitmapii6String+0x4e>
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b4964:	4937      	ldr	r1, [pc, #220]	; (b4a44 <_Z10showBitmapii6String+0x11c>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b4966:	4838      	ldr	r0, [pc, #224]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b4968:	f005 fba0 	bl	ba0ac <strcpy>
         break;
   b496c:	e00c      	b.n	b4988 <_Z10showBitmapii6String+0x60>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b496e:	4937      	ldr	r1, [pc, #220]	; (b4a4c <_Z10showBitmapii6String+0x124>)
   b4970:	e7f9      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b4972:	4937      	ldr	r1, [pc, #220]	; (b4a50 <_Z10showBitmapii6String+0x128>)
   b4974:	e7f7      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b4976:	4937      	ldr	r1, [pc, #220]	; (b4a54 <_Z10showBitmapii6String+0x12c>)
   b4978:	4833      	ldr	r0, [pc, #204]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b497a:	f005 fb97 	bl	ba0ac <strcpy>
         Serial.println("Bitmap not available.");
   b497e:	f004 fe63 	bl	b9648 <_Z16_fetch_usbserialv>
   b4982:	4934      	ldr	r1, [pc, #208]	; (b4a54 <_Z10showBitmapii6String+0x12c>)
   b4984:	f004 fc5f 	bl	b9246 <_ZN5Print7printlnEPKc>
   display.println(buf);
   b4988:	492f      	ldr	r1, [pc, #188]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b498a:	482b      	ldr	r0, [pc, #172]	; (b4a38 <_Z10showBitmapii6String+0x110>)
   b498c:	f004 fc5b 	bl	b9246 <_ZN5Print7printlnEPKc>
   display.display();
   b4990:	4829      	ldr	r0, [pc, #164]	; (b4a38 <_Z10showBitmapii6String+0x110>)
}
   b4992:	b006      	add	sp, #24
   b4994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   display.display();
   b4998:	f003 bdf4 	b.w	b8584 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b499c:	2c06      	cmp	r4, #6
   b499e:	d8ea      	bhi.n	b4976 <_Z10showBitmapii6String+0x4e>
   b49a0:	e8df f004 	tbb	[pc, r4]
   b49a4:	1e191404 	.word	0x1e191404
   b49a8:	2823      	.short	0x2823
   b49aa:	2a          	.byte	0x2a
   b49ab:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b49ac:	a802      	add	r0, sp, #8
   b49ae:	f004 fb9f 	bl	b90f0 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A HEXAGONO");
   b49b2:	4929      	ldr	r1, [pc, #164]	; (b4a58 <_Z10showBitmapii6String+0x130>)
         snprintf(buf, sizeof(buf), msg+" CONECTAR A SEMICIRCULO");
   b49b4:	a802      	add	r0, sp, #8
   b49b6:	f004 fbee 	bl	b9196 <_ZplRK15StringSumHelperPKc>
   b49ba:	2140      	movs	r1, #64	; 0x40
   b49bc:	6802      	ldr	r2, [r0, #0]
   b49be:	4822      	ldr	r0, [pc, #136]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b49c0:	f004 f9b2 	bl	b8d28 <snprintf>
class StringSumHelper : public String
   b49c4:	a802      	add	r0, sp, #8
   b49c6:	f004 fb25 	bl	b9014 <_ZN6StringD1Ev>
         break;
   b49ca:	e7dd      	b.n	b4988 <_Z10showBitmapii6String+0x60>
	StringSumHelper(const String &s) : String(s) {}
   b49cc:	a802      	add	r0, sp, #8
   b49ce:	f004 fb8f 	bl	b90f0 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A CUADRADO");
   b49d2:	4922      	ldr	r1, [pc, #136]	; (b4a5c <_Z10showBitmapii6String+0x134>)
   b49d4:	e7ee      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49d6:	a802      	add	r0, sp, #8
   b49d8:	f004 fb8a 	bl	b90f0 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A TRIANGULO");
   b49dc:	4920      	ldr	r1, [pc, #128]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b49de:	e7e9      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49e0:	a802      	add	r0, sp, #8
   b49e2:	f004 fb85 	bl	b90f0 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A ROMBO");
   b49e6:	491f      	ldr	r1, [pc, #124]	; (b4a64 <_Z10showBitmapii6String+0x13c>)
   b49e8:	e7e4      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49ea:	a802      	add	r0, sp, #8
   b49ec:	f004 fb80 	bl	b90f0 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A SEMICIRCULO");
   b49f0:	491d      	ldr	r1, [pc, #116]	; (b4a68 <_Z10showBitmapii6String+0x140>)
   b49f2:	e7df      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
         snprintf(buf, sizeof(buf), "CONECTAR A CIRCULO");
   b49f4:	491d      	ldr	r1, [pc, #116]	; (b4a6c <_Z10showBitmapii6String+0x144>)
   b49f6:	e7b6      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b49f8:	491d      	ldr	r1, [pc, #116]	; (b4a70 <_Z10showBitmapii6String+0x148>)
   b49fa:	e7b4      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
      switch (id2)
   b49fc:	2c06      	cmp	r4, #6
   b49fe:	d8ba      	bhi.n	b4976 <_Z10showBitmapii6String+0x4e>
   b4a00:	e8df f004 	tbb	[pc, r4]
   b4a04:	0a080604 	.word	0x0a080604
   b4a08:	0e0c      	.short	0x0e0c
   b4a0a:	10          	.byte	0x10
   b4a0b:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b4a0c:	4919      	ldr	r1, [pc, #100]	; (b4a74 <_Z10showBitmapii6String+0x14c>)
   b4a0e:	e7aa      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b4a10:	4919      	ldr	r1, [pc, #100]	; (b4a78 <_Z10showBitmapii6String+0x150>)
   b4a12:	e7a8      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b4a14:	4919      	ldr	r1, [pc, #100]	; (b4a7c <_Z10showBitmapii6String+0x154>)
   b4a16:	e7a6      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b4a18:	4919      	ldr	r1, [pc, #100]	; (b4a80 <_Z10showBitmapii6String+0x158>)
   b4a1a:	e7a4      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Play no disponible");
   b4a1c:	4919      	ldr	r1, [pc, #100]	; (b4a84 <_Z10showBitmapii6String+0x15c>)
   b4a1e:	e7a2      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b4a20:	4919      	ldr	r1, [pc, #100]	; (b4a88 <_Z10showBitmapii6String+0x160>)
   b4a22:	e7a0      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b4a24:	4919      	ldr	r1, [pc, #100]	; (b4a8c <_Z10showBitmapii6String+0x164>)
   b4a26:	e79e      	b.n	b4966 <_Z10showBitmapii6String+0x3e>
      switch (id2)
   b4a28:	2c00      	cmp	r4, #0
   b4a2a:	d1a4      	bne.n	b4976 <_Z10showBitmapii6String+0x4e>
         snprintf(buf, sizeof(buf), msg);
   b4a2c:	680a      	ldr	r2, [r1, #0]
   b4a2e:	4806      	ldr	r0, [pc, #24]	; (b4a48 <_Z10showBitmapii6String+0x120>)
   b4a30:	2140      	movs	r1, #64	; 0x40
   b4a32:	f004 f979 	bl	b8d28 <snprintf>
         break;
   b4a36:	e7a7      	b.n	b4988 <_Z10showBitmapii6String+0x60>
   b4a38:	2003d57c 	.word	0x2003d57c
   b4a3c:	2003cf55 	.word	0x2003cf55
   b4a40:	2003dc78 	.word	0x2003dc78
   b4a44:	000ba2b4 	.word	0x000ba2b4
   b4a48:	2003d531 	.word	0x2003d531
   b4a4c:	000ba2c0 	.word	0x000ba2c0
   b4a50:	000ba2ce 	.word	0x000ba2ce
   b4a54:	000ba2da 	.word	0x000ba2da
   b4a58:	000ba2f0 	.word	0x000ba2f0
   b4a5c:	000ba305 	.word	0x000ba305
   b4a60:	000ba31a 	.word	0x000ba31a
   b4a64:	000ba330 	.word	0x000ba330
   b4a68:	000ba342 	.word	0x000ba342
   b4a6c:	000ba35a 	.word	0x000ba35a
   b4a70:	000ba36d 	.word	0x000ba36d
   b4a74:	000ba37a 	.word	0x000ba37a
   b4a78:	000ba39a 	.word	0x000ba39a
   b4a7c:	000ba3ba 	.word	0x000ba3ba
   b4a80:	000ba3d5 	.word	0x000ba3d5
   b4a84:	000ba3ea 	.word	0x000ba3ea
   b4a88:	000ba3fd 	.word	0x000ba3fd
   b4a8c:	000ba41b 	.word	0x000ba41b

000b4a90 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b4a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b4a92:	4b24      	ldr	r3, [pc, #144]	; (b4b24 <_Z8showPortii+0x94>)
   b4a94:	689b      	ldr	r3, [r3, #8]
   b4a96:	bb4b      	cbnz	r3, b4aec <_Z8showPortii+0x5c>
      switch (puerto)
   b4a98:	2902      	cmp	r1, #2
   b4a9a:	d011      	beq.n	b4ac0 <_Z8showPortii+0x30>
   b4a9c:	2904      	cmp	r1, #4
   b4a9e:	d016      	beq.n	b4ace <_Z8showPortii+0x3e>
   b4aa0:	b9e1      	cbnz	r1, b4adc <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b4aa2:	4921      	ldr	r1, [pc, #132]	; (b4b28 <_Z8showPortii+0x98>)
   b4aa4:	4668      	mov	r0, sp
   b4aa6:	f004 fb00 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4aaa:	466a      	mov	r2, sp
   b4aac:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b4aae:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4ab0:	f7ff ff3a 	bl	b4928 <_Z10showBitmapii6String>
   b4ab4:	4668      	mov	r0, sp
   b4ab6:	f004 faad 	bl	b9014 <_ZN6StringD1Ev>
}
   b4aba:	b005      	add	sp, #20
   b4abc:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b4ac0:	4919      	ldr	r1, [pc, #100]	; (b4b28 <_Z8showPortii+0x98>)
   b4ac2:	4668      	mov	r0, sp
   b4ac4:	f004 faf1 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4ac8:	466a      	mov	r2, sp
   b4aca:	2104      	movs	r1, #4
   b4acc:	e7ef      	b.n	b4aae <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b4ace:	4916      	ldr	r1, [pc, #88]	; (b4b28 <_Z8showPortii+0x98>)
   b4ad0:	4668      	mov	r0, sp
   b4ad2:	f004 faea 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4ad6:	466a      	mov	r2, sp
   b4ad8:	2105      	movs	r1, #5
   b4ada:	e7e8      	b.n	b4aae <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4adc:	4912      	ldr	r1, [pc, #72]	; (b4b28 <_Z8showPortii+0x98>)
   b4ade:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4ae0:	f004 fae3 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4ae4:	466a      	mov	r2, sp
   b4ae6:	2103      	movs	r1, #3
   b4ae8:	2002      	movs	r0, #2
   b4aea:	e7e1      	b.n	b4ab0 <_Z8showPortii+0x20>
      switch (puerto)
   b4aec:	2904      	cmp	r1, #4
   b4aee:	d00a      	beq.n	b4b06 <_Z8showPortii+0x76>
   b4af0:	2906      	cmp	r1, #6
   b4af2:	d00f      	beq.n	b4b14 <_Z8showPortii+0x84>
   b4af4:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4af6:	4668      	mov	r0, sp
   b4af8:	490b      	ldr	r1, [pc, #44]	; (b4b28 <_Z8showPortii+0x98>)
      switch (puerto)
   b4afa:	d1f1      	bne.n	b4ae0 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b4afc:	f004 fad5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b00:	466a      	mov	r2, sp
   b4b02:	2100      	movs	r1, #0
   b4b04:	e7d3      	b.n	b4aae <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b4b06:	4908      	ldr	r1, [pc, #32]	; (b4b28 <_Z8showPortii+0x98>)
   b4b08:	4668      	mov	r0, sp
   b4b0a:	f004 face 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b0e:	466a      	mov	r2, sp
   b4b10:	2101      	movs	r1, #1
   b4b12:	e7cc      	b.n	b4aae <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b4b14:	4904      	ldr	r1, [pc, #16]	; (b4b28 <_Z8showPortii+0x98>)
   b4b16:	4668      	mov	r0, sp
   b4b18:	f004 fac7 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b1c:	466a      	mov	r2, sp
   b4b1e:	2102      	movs	r1, #2
   b4b20:	e7c5      	b.n	b4aae <_Z8showPortii+0x1e>
   b4b22:	bf00      	nop
   b4b24:	2003ceb0 	.word	0x2003ceb0
   b4b28:	000ba6af 	.word	0x000ba6af

000b4b2c <_Z10borradoALLi>:
   switch (modo)
   b4b2c:	2801      	cmp	r0, #1
   b4b2e:	d00b      	beq.n	b4b48 <_Z10borradoALLi+0x1c>
   b4b30:	2802      	cmp	r0, #2
   b4b32:	d00b      	beq.n	b4b4c <_Z10borradoALLi+0x20>
   b4b34:	b988      	cbnz	r0, b4b5a <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b4b36:	4b09      	ldr	r3, [pc, #36]	; (b4b5c <_Z10borradoALLi+0x30>)
   b4b38:	6018      	str	r0, [r3, #0]
   b4b3a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b4b3e:	4b08      	ldr	r3, [pc, #32]	; (b4b60 <_Z10borradoALLi+0x34>)
   b4b40:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b4b42:	4b08      	ldr	r3, [pc, #32]	; (b4b64 <_Z10borradoALLi+0x38>)
   b4b44:	6018      	str	r0, [r3, #0]
      break;
   b4b46:	4770      	bx	lr
   b4b48:	f7ff babc 	b.w	b40c4 <_Z10borradoALLi.part.0>
      posicion = 0;
   b4b4c:	4a06      	ldr	r2, [pc, #24]	; (b4b68 <_Z10borradoALLi+0x3c>)
   b4b4e:	2300      	movs	r3, #0
   b4b50:	6013      	str	r3, [r2, #0]
      bucle = false;
   b4b52:	4a06      	ldr	r2, [pc, #24]	; (b4b6c <_Z10borradoALLi+0x40>)
   b4b54:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b4b56:	4a06      	ldr	r2, [pc, #24]	; (b4b70 <_Z10borradoALLi+0x44>)
   b4b58:	6013      	str	r3, [r2, #0]
}
   b4b5a:	4770      	bx	lr
   b4b5c:	2003cf58 	.word	0x2003cf58
   b4b60:	2003dc5c 	.word	0x2003dc5c
   b4b64:	2003dc54 	.word	0x2003dc54
   b4b68:	2003dc64 	.word	0x2003dc64
   b4b6c:	2003d530 	.word	0x2003d530
   b4b70:	2003dc80 	.word	0x2003dc80

000b4b74 <_Z13borradoBLOQUEi>:

// Borrado del bloque/loop actual
void borradoBLOQUE(int modo)
{
   switch (modo)
   b4b74:	2801      	cmp	r0, #1
{
   b4b76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b4b78:	d003      	beq.n	b4b82 <_Z13borradoBLOQUEi+0xe>
   b4b7a:	2802      	cmp	r0, #2
   b4b7c:	d03c      	beq.n	b4bf8 <_Z13borradoBLOQUEi+0x84>
      break;

   default:
      break;
   }
}
   b4b7e:	b004      	add	sp, #16
   b4b80:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b4b82:	4b33      	ldr	r3, [pc, #204]	; (b4c50 <_Z13borradoBLOQUEi+0xdc>)
   b4b84:	681c      	ldr	r4, [r3, #0]
   b4b86:	b974      	cbnz	r4, b4ba6 <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b4b88:	f7ff fa9c 	bl	b40c4 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b4b8c:	4931      	ldr	r1, [pc, #196]	; (b4c54 <_Z13borradoBLOQUEi+0xe0>)
   b4b8e:	4668      	mov	r0, sp
   b4b90:	f004 fa8b 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b94:	466a      	mov	r2, sp
   b4b96:	2100      	movs	r1, #0
   b4b98:	2003      	movs	r0, #3
   b4b9a:	f7ff fec5 	bl	b4928 <_Z10showBitmapii6String>
   b4b9e:	4668      	mov	r0, sp
   b4ba0:	f004 fa38 	bl	b9014 <_ZN6StringD1Ev>
   b4ba4:	e7eb      	b.n	b4b7e <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b4ba6:	2c01      	cmp	r4, #1
   b4ba8:	d11e      	bne.n	b4be8 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b4baa:	2200      	movs	r2, #0
         numBloque = 0;
   b4bac:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b4bae:	492a      	ldr	r1, [pc, #168]	; (b4c58 <_Z13borradoBLOQUEi+0xe4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4bb0:	4b2a      	ldr	r3, [pc, #168]	; (b4c5c <_Z13borradoBLOQUEi+0xe8>)
         IF_pasado = false;
   b4bb2:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4bb4:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4bb6:	4a2a      	ldr	r2, [pc, #168]	; (b4c60 <_Z13borradoBLOQUEi+0xec>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4bb8:	4b2a      	ldr	r3, [pc, #168]	; (b4c64 <_Z13borradoBLOQUEi+0xf0>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bba:	482b      	ldr	r0, [pc, #172]	; (b4c68 <_Z13borradoBLOQUEi+0xf4>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4bbc:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4bbe:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bc0:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b4bc2:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b4bc4:	bf04      	itt	eq
   b4bc6:	2303      	moveq	r3, #3
   b4bc8:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b4bca:	4b28      	ldr	r3, [pc, #160]	; (b4c6c <_Z13borradoBLOQUEi+0xf8>)
   b4bcc:	6819      	ldr	r1, [r3, #0]
   b4bce:	3101      	adds	r1, #1
            puertoDigital=6;
   b4bd0:	bf04      	itt	eq
   b4bd2:	2106      	moveq	r1, #6
   b4bd4:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bd6:	6811      	ldr	r1, [r2, #0]
   b4bd8:	1a09      	subs	r1, r1, r0
   b4bda:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b4bdc:	4924      	ldr	r1, [pc, #144]	; (b4c70 <_Z13borradoBLOQUEi+0xfc>)
   b4bde:	681a      	ldr	r2, [r3, #0]
   b4be0:	6809      	ldr	r1, [r1, #0]
   b4be2:	1a52      	subs	r2, r2, r1
   b4be4:	601a      	str	r2, [r3, #0]
   b4be6:	e7d1      	b.n	b4b8c <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b4be8:	f004 fd2e 	bl	b9648 <_Z16_fetch_usbserialv>
   b4bec:	4921      	ldr	r1, [pc, #132]	; (b4c74 <_Z13borradoBLOQUEi+0x100>)
}
   b4bee:	b004      	add	sp, #16
   b4bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b4bf4:	f004 bb27 	b.w	b9246 <_ZN5Print7printlnEPKc>
      if (bucle) {
   b4bf8:	4d1f      	ldr	r5, [pc, #124]	; (b4c78 <_Z13borradoBLOQUEi+0x104>)
         posicion = posicion - (tam_bucle+1);
   b4bfa:	4a20      	ldr	r2, [pc, #128]	; (b4c7c <_Z13borradoBLOQUEi+0x108>)
      if (bucle) {
   b4bfc:	782e      	ldrb	r6, [r5, #0]
         posicion = posicion - (tam_bucle+1);
   b4bfe:	6813      	ldr	r3, [r2, #0]
   b4c00:	4c1f      	ldr	r4, [pc, #124]	; (b4c80 <_Z13borradoBLOQUEi+0x10c>)
      if (bucle) {
   b4c02:	b19e      	cbz	r6, b4c2c <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b4c04:	6821      	ldr	r1, [r4, #0]
   b4c06:	3101      	adds	r1, #1
   b4c08:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4c0a:	4668      	mov	r0, sp
   b4c0c:	491d      	ldr	r1, [pc, #116]	; (b4c84 <_Z13borradoBLOQUEi+0x110>)
         posicion = posicion - (tam_bucle+1);
   b4c0e:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b4c10:	f004 fa4b 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4c14:	2003      	movs	r0, #3
   b4c16:	466a      	mov	r2, sp
   b4c18:	2100      	movs	r1, #0
   b4c1a:	f7ff fe85 	bl	b4928 <_Z10showBitmapii6String>
   b4c1e:	4668      	mov	r0, sp
   b4c20:	f004 f9f8 	bl	b9014 <_ZN6StringD1Ev>
      bucle = false;
   b4c24:	2300      	movs	r3, #0
   b4c26:	702b      	strb	r3, [r5, #0]
      tam_bucle = 0;
   b4c28:	6023      	str	r3, [r4, #0]
}
   b4c2a:	e7a8      	b.n	b4b7e <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b4c2c:	4816      	ldr	r0, [pc, #88]	; (b4c88 <_Z13borradoBLOQUEi+0x114>)
   b4c2e:	1e59      	subs	r1, r3, #1
   b4c30:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b4c34:	3002      	adds	r0, #2
   b4c36:	d104      	bne.n	b4c42 <_Z13borradoBLOQUEi+0xce>
         posicion = posicion - (duraciones[posicion-1]+2);
   b4c38:	4814      	ldr	r0, [pc, #80]	; (b4c8c <_Z13borradoBLOQUEi+0x118>)
   b4c3a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4c3e:	3102      	adds	r1, #2
   b4c40:	e7e2      	b.n	b4c08 <_Z13borradoBLOQUEi+0x94>
         Serial.println("Nada que borrar.");
   b4c42:	f004 fd01 	bl	b9648 <_Z16_fetch_usbserialv>
   b4c46:	4912      	ldr	r1, [pc, #72]	; (b4c90 <_Z13borradoBLOQUEi+0x11c>)
   b4c48:	f004 fafd 	bl	b9246 <_ZN5Print7printlnEPKc>
   b4c4c:	e7ea      	b.n	b4c24 <_Z13borradoBLOQUEi+0xb0>
   b4c4e:	bf00      	nop
   b4c50:	2003cea8 	.word	0x2003cea8
   b4c54:	000ba43b 	.word	0x000ba43b
   b4c58:	2003cf45 	.word	0x2003cf45
   b4c5c:	2003cf54 	.word	0x2003cf54
   b4c60:	2003dc68 	.word	0x2003dc68
   b4c64:	2003dc54 	.word	0x2003dc54
   b4c68:	2003dc6c 	.word	0x2003dc6c
   b4c6c:	2003ceac 	.word	0x2003ceac
   b4c70:	2003dc70 	.word	0x2003dc70
   b4c74:	000ba457 	.word	0x000ba457
   b4c78:	2003d530 	.word	0x2003d530
   b4c7c:	2003dc64 	.word	0x2003dc64
   b4c80:	2003dc80 	.word	0x2003dc80
   b4c84:	000ba467 	.word	0x000ba467
   b4c88:	2003d934 	.word	0x2003d934
   b4c8c:	2003d5ec 	.word	0x2003d5ec
   b4c90:	000ba481 	.word	0x000ba481

000b4c94 <_Z10borradoPOPv>:

void borradoPOP(){
   posicion--;
   b4c94:	4a0e      	ldr	r2, [pc, #56]	; (b4cd0 <_Z10borradoPOPv+0x3c>)
   b4c96:	6813      	ldr	r3, [r2, #0]
   b4c98:	3b01      	subs	r3, #1
   b4c9a:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b4c9c:	4a0d      	ldr	r2, [pc, #52]	; (b4cd4 <_Z10borradoPOPv+0x40>)
   b4c9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4ca2:	1c8a      	adds	r2, r1, #2
   b4ca4:	4a0c      	ldr	r2, [pc, #48]	; (b4cd8 <_Z10borradoPOPv+0x44>)
   b4ca6:	d107      	bne.n	b4cb8 <_Z10borradoPOPv+0x24>
      bucle = true;
   b4ca8:	2101      	movs	r1, #1
   b4caa:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b4cac:	4a0b      	ldr	r2, [pc, #44]	; (b4cdc <_Z10borradoPOPv+0x48>)
   b4cae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4cb2:	4b0b      	ldr	r3, [pc, #44]	; (b4ce0 <_Z10borradoPOPv+0x4c>)
   b4cb4:	601a      	str	r2, [r3, #0]
   b4cb6:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b4cb8:	3101      	adds	r1, #1
   b4cba:	d102      	bne.n	b4cc2 <_Z10borradoPOPv+0x2e>
      bucle = false;
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	7013      	strb	r3, [r2, #0]
   b4cc0:	4770      	bx	lr

   } else {
      if (bucle) {
   b4cc2:	7813      	ldrb	r3, [r2, #0]
   b4cc4:	b11b      	cbz	r3, b4cce <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b4cc6:	4a06      	ldr	r2, [pc, #24]	; (b4ce0 <_Z10borradoPOPv+0x4c>)
   b4cc8:	6813      	ldr	r3, [r2, #0]
   b4cca:	3b01      	subs	r3, #1
   b4ccc:	6013      	str	r3, [r2, #0]
      }
   }
}
   b4cce:	4770      	bx	lr
   b4cd0:	2003dc64 	.word	0x2003dc64
   b4cd4:	2003d934 	.word	0x2003d934
   b4cd8:	2003d530 	.word	0x2003d530
   b4cdc:	2003d5ec 	.word	0x2003d5ec
   b4ce0:	2003dc80 	.word	0x2003dc80

000b4ce4 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	2807      	cmp	r0, #7
   b4ce8:	d816      	bhi.n	b4d18 <_Z15decodificarNOTAi+0x34>
   b4cea:	e8df f000 	tbb	[pc, r0]
   b4cee:	0704      	.short	0x0704
   b4cf0:	0f0d0b09 	.word	0x0f0d0b09
   b4cf4:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b4cf6:	4b0c      	ldr	r3, [pc, #48]	; (b4d28 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b4cf8:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b4cfa:	bd08      	pop	{r3, pc}
      return RE;
   b4cfc:	4b0b      	ldr	r3, [pc, #44]	; (b4d2c <_Z15decodificarNOTAi+0x48>)
   b4cfe:	e7fb      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return MI;
   b4d00:	4b0b      	ldr	r3, [pc, #44]	; (b4d30 <_Z15decodificarNOTAi+0x4c>)
   b4d02:	e7f9      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return FA;
   b4d04:	4b0b      	ldr	r3, [pc, #44]	; (b4d34 <_Z15decodificarNOTAi+0x50>)
   b4d06:	e7f7      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b4d08:	4b0b      	ldr	r3, [pc, #44]	; (b4d38 <_Z15decodificarNOTAi+0x54>)
   b4d0a:	e7f5      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return LA;
   b4d0c:	4b0b      	ldr	r3, [pc, #44]	; (b4d3c <_Z15decodificarNOTAi+0x58>)
   b4d0e:	e7f3      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return SI;
   b4d10:	4b0b      	ldr	r3, [pc, #44]	; (b4d40 <_Z15decodificarNOTAi+0x5c>)
   b4d12:	e7f1      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b4d14:	4b0b      	ldr	r3, [pc, #44]	; (b4d44 <_Z15decodificarNOTAi+0x60>)
   b4d16:	e7ef      	b.n	b4cf8 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b4d18:	f004 fc96 	bl	b9648 <_Z16_fetch_usbserialv>
   b4d1c:	490a      	ldr	r1, [pc, #40]	; (b4d48 <_Z15decodificarNOTAi+0x64>)
   b4d1e:	f004 fa92 	bl	b9246 <_ZN5Print7printlnEPKc>
      return -1;
   b4d22:	f04f 30ff 	mov.w	r0, #4294967295
   b4d26:	e7e8      	b.n	b4cfa <_Z15decodificarNOTAi+0x16>
   b4d28:	2003ce80 	.word	0x2003ce80
   b4d2c:	2003ce94 	.word	0x2003ce94
   b4d30:	2003ce90 	.word	0x2003ce90
   b4d34:	2003ce88 	.word	0x2003ce88
   b4d38:	2003ce9c 	.word	0x2003ce9c
   b4d3c:	2003ce8c 	.word	0x2003ce8c
   b4d40:	2003ce98 	.word	0x2003ce98
   b4d44:	2003ce84 	.word	0x2003ce84
   b4d48:	000ba492 	.word	0x000ba492

000b4d4c <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b4d4c:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b4d4e:	b508      	push	{r3, lr}
   b4d50:	d803      	bhi.n	b4d5a <_Z15decodificarTIPOi+0xe>
   b4d52:	4b06      	ldr	r3, [pc, #24]	; (b4d6c <_Z15decodificarTIPOi+0x20>)
   b4d54:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b4d58:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b4d5a:	f004 fc75 	bl	b9648 <_Z16_fetch_usbserialv>
   b4d5e:	4904      	ldr	r1, [pc, #16]	; (b4d70 <_Z15decodificarTIPOi+0x24>)
   b4d60:	f004 fa71 	bl	b9246 <_ZN5Print7printlnEPKc>
   b4d64:	f04f 30ff 	mov.w	r0, #4294967295
   b4d68:	e7f6      	b.n	b4d58 <_Z15decodificarTIPOi+0xc>
   b4d6a:	bf00      	nop
   b4d6c:	000bac72 	.word	0x000bac72
   b4d70:	000ba4a1 	.word	0x000ba4a1

000b4d74 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b4d74:	b510      	push	{r4, lr}
   b4d76:	4604      	mov	r4, r0
   b4d78:	2907      	cmp	r1, #7
   b4d7a:	d819      	bhi.n	b4db0 <_Z19decodificarNOTA_msgi+0x3c>
   b4d7c:	e8df f001 	tbb	[pc, r1]
   b4d80:	0e0c0a04 	.word	0x0e0c0a04
   b4d84:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b4d88:	490a      	ldr	r1, [pc, #40]	; (b4db4 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "DO'";

   default:
      return "Nota inválida";
   b4d8a:	4620      	mov	r0, r4
   b4d8c:	f004 f98d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4d90:	4620      	mov	r0, r4
   b4d92:	bd10      	pop	{r4, pc}
      return "RE";
   b4d94:	4908      	ldr	r1, [pc, #32]	; (b4db8 <_Z19decodificarNOTA_msgi+0x44>)
   b4d96:	e7f8      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b4d98:	4908      	ldr	r1, [pc, #32]	; (b4dbc <_Z19decodificarNOTA_msgi+0x48>)
   b4d9a:	e7f6      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b4d9c:	4908      	ldr	r1, [pc, #32]	; (b4dc0 <_Z19decodificarNOTA_msgi+0x4c>)
   b4d9e:	e7f4      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b4da0:	4908      	ldr	r1, [pc, #32]	; (b4dc4 <_Z19decodificarNOTA_msgi+0x50>)
   b4da2:	e7f2      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b4da4:	4908      	ldr	r1, [pc, #32]	; (b4dc8 <_Z19decodificarNOTA_msgi+0x54>)
   b4da6:	e7f0      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b4da8:	4908      	ldr	r1, [pc, #32]	; (b4dcc <_Z19decodificarNOTA_msgi+0x58>)
   b4daa:	e7ee      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "DO'";
   b4dac:	4908      	ldr	r1, [pc, #32]	; (b4dd0 <_Z19decodificarNOTA_msgi+0x5c>)
   b4dae:	e7ec      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b4db0:	4908      	ldr	r1, [pc, #32]	; (b4dd4 <_Z19decodificarNOTA_msgi+0x60>)
   b4db2:	e7ea      	b.n	b4d8a <_Z19decodificarNOTA_msgi+0x16>
   b4db4:	000ba317 	.word	0x000ba317
   b4db8:	000ba4b0 	.word	0x000ba4b0
   b4dbc:	000ba4b3 	.word	0x000ba4b3
   b4dc0:	000ba4b6 	.word	0x000ba4b6
   b4dc4:	000ba4b9 	.word	0x000ba4b9
   b4dc8:	000ba4bd 	.word	0x000ba4bd
   b4dcc:	000ba4c0 	.word	0x000ba4c0
   b4dd0:	000ba4c3 	.word	0x000ba4c3
   b4dd4:	000ba492 	.word	0x000ba492

000b4dd8 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b4dd8:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b4dda:	b510      	push	{r4, lr}
   b4ddc:	4604      	mov	r4, r0
   switch (tipo)
   b4dde:	d007      	beq.n	b4df0 <_Z19decodificarTIPO_msgi+0x18>
   b4de0:	2902      	cmp	r1, #2
   b4de2:	d007      	beq.n	b4df4 <_Z19decodificarTIPO_msgi+0x1c>
   b4de4:	b941      	cbnz	r1, b4df8 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b4de6:	4905      	ldr	r1, [pc, #20]	; (b4dfc <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b4de8:	f004 f95f 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4dec:	4620      	mov	r0, r4
   b4dee:	bd10      	pop	{r4, pc}
      return "_N";
   b4df0:	4903      	ldr	r1, [pc, #12]	; (b4e00 <_Z19decodificarTIPO_msgi+0x28>)
   b4df2:	e7f9      	b.n	b4de8 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b4df4:	4903      	ldr	r1, [pc, #12]	; (b4e04 <_Z19decodificarTIPO_msgi+0x2c>)
   b4df6:	e7f7      	b.n	b4de8 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b4df8:	4903      	ldr	r1, [pc, #12]	; (b4e08 <_Z19decodificarTIPO_msgi+0x30>)
   b4dfa:	e7f5      	b.n	b4de8 <_Z19decodificarTIPO_msgi+0x10>
   b4dfc:	000ba4c7 	.word	0x000ba4c7
   b4e00:	000ba4ca 	.word	0x000ba4ca
   b4e04:	000ba4cd 	.word	0x000ba4cd
   b4e08:	000ba4a1 	.word	0x000ba4a1

000b4e0c <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b4e0c:	b513      	push	{r0, r1, r4, lr}
   b4e0e:	460c      	mov	r4, r1

   int frecuencia = decodificarNOTA(nota);
   b4e10:	f7ff ff68 	bl	b4ce4 <_Z15decodificarNOTAi>
   b4e14:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4e16:	4620      	mov	r0, r4
   b4e18:	f7ff ff98 	bl	b4d4c <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b4e1c:	9901      	ldr	r1, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4e1e:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b4e20:	2200      	movs	r2, #0
   b4e22:	2006      	movs	r0, #6
   b4e24:	f004 fc3a 	bl	b969c <tone>
   delay(duracion);
   b4e28:	4620      	mov	r0, r4
   b4e2a:	f004 fa77 	bl	b931c <delay>
   noTone(Zumbador_PIN);
   b4e2e:	2006      	movs	r0, #6
}
   b4e30:	b002      	add	sp, #8
   b4e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   noTone(Zumbador_PIN);
   b4e36:	f004 bc48 	b.w	b96ca <noTone>
	...

000b4e3c <_Z10reproducirv>:

void reproducir() {
   b4e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b4e40:	4b1e      	ldr	r3, [pc, #120]	; (b4ebc <_Z10reproducirv+0x80>)
   b4e42:	781c      	ldrb	r4, [r3, #0]
   b4e44:	bb34      	cbnz	r4, b4e94 <_Z10reproducirv+0x58>
      int n;
      int iteracion;
      int inicio;

      int i = 0;
      while ( i < posicion) {
   b4e46:	f8df a08c 	ldr.w	sl, [pc, #140]	; b4ed4 <_Z10reproducirv+0x98>

         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e4a:	4e1d      	ldr	r6, [pc, #116]	; (b4ec0 <_Z10reproducirv+0x84>)
   b4e4c:	4f1d      	ldr	r7, [pc, #116]	; (b4ec4 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b4e4e:	f8da 3000 	ldr.w	r3, [sl]
   b4e52:	42a3      	cmp	r3, r4
   b4e54:	dd2f      	ble.n	b4eb6 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e56:	f004 fbf7 	bl	b9648 <_Z16_fetch_usbserialv>
   b4e5a:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b4e5e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b4e62:	4919      	ldr	r1, [pc, #100]	; (b4ec8 <_Z10reproducirv+0x8c>)
   b4e64:	f7ff f95a 	bl	b411c <_ZN5Print8printlnfEPKcz>

         if ( notas[i] == -1 ) {
   b4e68:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b4e6c:	1c42      	adds	r2, r0, #1
   b4e6e:	d105      	bne.n	b4e7c <_Z10reproducirv+0x40>
            n = duraciones[i];
   b4e70:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            iteracion = 0;            
            inicio=i;
   b4e74:	46a1      	mov	r9, r4
            iteracion = 0;            
   b4e76:	2500      	movs	r5, #0
            
         } else {
            reproducirNOTA(notas[i],duraciones[i]);
         }
         
         i++;
   b4e78:	3401      	adds	r4, #1
      while ( i < posicion) {
   b4e7a:	e7e8      	b.n	b4e4e <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b4e7c:	1c83      	adds	r3, r0, #2
   b4e7e:	d104      	bne.n	b4e8a <_Z10reproducirv+0x4e>
            iteracion++;
   b4e80:	3501      	adds	r5, #1
               i = inicio;
   b4e82:	45a8      	cmp	r8, r5
   b4e84:	bfc8      	it	gt
   b4e86:	464c      	movgt	r4, r9
   b4e88:	e7f6      	b.n	b4e78 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b4e8a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b4e8e:	f7ff ffbd 	bl	b4e0c <_Z14reproducirNOTAii>
   b4e92:	e7f1      	b.n	b4e78 <_Z10reproducirv+0x3c>

      }

   } else {
      Serial.println("Finaliza el bucle antes de reproducir");
   b4e94:	f004 fbd8 	bl	b9648 <_Z16_fetch_usbserialv>
   b4e98:	490c      	ldr	r1, [pc, #48]	; (b4ecc <_Z10reproducirv+0x90>)
   b4e9a:	f004 f9d4 	bl	b9246 <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b4e9e:	490c      	ldr	r1, [pc, #48]	; (b4ed0 <_Z10reproducirv+0x94>)
   b4ea0:	4668      	mov	r0, sp
   b4ea2:	f004 f902 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4ea6:	2002      	movs	r0, #2
   b4ea8:	466a      	mov	r2, sp
   b4eaa:	2104      	movs	r1, #4
   b4eac:	f7ff fd3c 	bl	b4928 <_Z10showBitmapii6String>
   b4eb0:	4668      	mov	r0, sp
   b4eb2:	f004 f8af 	bl	b9014 <_ZN6StringD1Ev>
   }
   
}
   b4eb6:	b004      	add	sp, #16
   b4eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ebc:	2003d530 	.word	0x2003d530
   b4ec0:	2003d5ec 	.word	0x2003d5ec
   b4ec4:	2003d934 	.word	0x2003d934
   b4ec8:	000ba4d0 	.word	0x000ba4d0
   b4ecc:	000ba4d8 	.word	0x000ba4d8
   b4ed0:	000ba6af 	.word	0x000ba6af
   b4ed4:	2003dc64 	.word	0x2003dc64

000b4ed8 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4ed8:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4eda:	4b0d      	ldr	r3, [pc, #52]	; (b4f10 <_Z13isValidSensori+0x38>)
   b4edc:	681a      	ldr	r2, [r3, #0]
   b4ede:	4b0d      	ldr	r3, [pc, #52]	; (b4f14 <_Z13isValidSensori+0x3c>)
   b4ee0:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4ee4:	434a      	muls	r2, r1
   b4ee6:	5899      	ldr	r1, [r3, r2]
   b4ee8:	4413      	add	r3, r2
   b4eea:	2200      	movs	r2, #0
   b4eec:	4291      	cmp	r1, r2
   b4eee:	dd0d      	ble.n	b4f0c <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b4ef0:	685c      	ldr	r4, [r3, #4]
   b4ef2:	4284      	cmp	r4, r0
   b4ef4:	f103 0310 	add.w	r3, r3, #16
   b4ef8:	d106      	bne.n	b4f08 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4efa:	f004 fba5 	bl	b9648 <_Z16_fetch_usbserialv>
   b4efe:	4906      	ldr	r1, [pc, #24]	; (b4f18 <_Z13isValidSensori+0x40>)
   b4f00:	f004 f9a1 	bl	b9246 <_ZN5Print7printlnEPKc>
   b4f04:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4f06:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4f08:	3201      	adds	r2, #1
   b4f0a:	e7ef      	b.n	b4eec <_Z13isValidSensori+0x14>
  return true;
   b4f0c:	2001      	movs	r0, #1
   b4f0e:	e7fa      	b.n	b4f06 <_Z13isValidSensori+0x2e>
   b4f10:	2003cea8 	.word	0x2003cea8
   b4f14:	2003cf58 	.word	0x2003cf58
   b4f18:	000ba4fe 	.word	0x000ba4fe

000b4f1c <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4f1e:	4b11      	ldr	r3, [pc, #68]	; (b4f64 <_Z11isNewSensori+0x48>)
   b4f20:	4a11      	ldr	r2, [pc, #68]	; (b4f68 <_Z11isNewSensori+0x4c>)
   b4f22:	681e      	ldr	r6, [r3, #0]
   b4f24:	4694      	mov	ip, r2
   b4f26:	2300      	movs	r3, #0
   b4f28:	429e      	cmp	r6, r3
   b4f2a:	db17      	blt.n	b4f5c <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f2c:	6817      	ldr	r7, [r2, #0]
   b4f2e:	4615      	mov	r5, r2
   b4f30:	2100      	movs	r1, #0
   b4f32:	428f      	cmp	r7, r1
   b4f34:	dd0e      	ble.n	b4f54 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4f36:	686c      	ldr	r4, [r5, #4]
   b4f38:	4284      	cmp	r4, r0
   b4f3a:	f105 0510 	add.w	r5, r5, #16
   b4f3e:	d107      	bne.n	b4f50 <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4f40:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f44:	4353      	muls	r3, r2
   b4f46:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4f4a:	4463      	add	r3, ip
   b4f4c:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f50:	3101      	adds	r1, #1
   b4f52:	e7ee      	b.n	b4f32 <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4f54:	3301      	adds	r3, #1
   b4f56:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4f5a:	e7e5      	b.n	b4f28 <_Z11isNewSensori+0xc>
  return -1;
   b4f5c:	f04f 30ff 	mov.w	r0, #4294967295
   b4f60:	e7f5      	b.n	b4f4e <_Z11isNewSensori+0x32>
   b4f62:	bf00      	nop
   b4f64:	2003cea8 	.word	0x2003cea8
   b4f68:	2003cf58 	.word	0x2003cf58

000b4f6c <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b4f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f70:	4d19      	ldr	r5, [pc, #100]	; (b4fd8 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b4f72:	4b1a      	ldr	r3, [pc, #104]	; (b4fdc <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f74:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4f78:	681f      	ldr	r7, [r3, #0]
{
   b4f7a:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f7c:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4f7e:	2400      	movs	r4, #0
   b4f80:	42a7      	cmp	r7, r4
   b4f82:	db23      	blt.n	b4fcc <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b4f84:	d110      	bne.n	b4fa8 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4f86:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b4f8a:	461a      	mov	r2, r3
   b4f8c:	2600      	movs	r6, #0
   b4f8e:	45b0      	cmp	r8, r6
   b4f90:	dd0a      	ble.n	b4fa8 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b4f92:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b4f96:	4560      	cmp	r0, ip
   b4f98:	d103      	bne.n	b4fa2 <_Z15isValidActuadorii+0x36>
   b4f9a:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b4f9e:	4288      	cmp	r0, r1
   b4fa0:	d017      	beq.n	b4fd2 <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4fa2:	3601      	adds	r6, #1
   b4fa4:	3214      	adds	r2, #20
   b4fa6:	e7f2      	b.n	b4f8e <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b4fa8:	2f01      	cmp	r7, #1
   b4faa:	d10b      	bne.n	b4fc4 <_Z15isValidActuadorii+0x58>
   b4fac:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fae:	2200      	movs	r2, #0
   b4fb0:	4596      	cmp	lr, r2
   b4fb2:	dd07      	ble.n	b4fc4 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b4fb4:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b4fb8:	4288      	cmp	r0, r1
   b4fba:	f106 0614 	add.w	r6, r6, #20
   b4fbe:	d008      	beq.n	b4fd2 <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fc0:	3201      	adds	r2, #1
   b4fc2:	e7f5      	b.n	b4fb0 <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b4fc4:	3401      	adds	r4, #1
   b4fc6:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4fca:	e7d9      	b.n	b4f80 <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b4fcc:	2001      	movs	r0, #1
}
   b4fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b4fd2:	2000      	movs	r0, #0
   b4fd4:	e7fb      	b.n	b4fce <_Z15isValidActuadorii+0x62>
   b4fd6:	bf00      	nop
   b4fd8:	2003cf58 	.word	0x2003cf58
   b4fdc:	2003cea8 	.word	0x2003cea8

000b4fe0 <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b4fe2:	4b13      	ldr	r3, [pc, #76]	; (b5030 <_Z13isNewActuadori+0x50>)
   b4fe4:	4a13      	ldr	r2, [pc, #76]	; (b5034 <_Z13isNewActuadori+0x54>)
   b4fe6:	681e      	ldr	r6, [r3, #0]
   b4fe8:	4694      	mov	ip, r2
   b4fea:	2300      	movs	r3, #0
   b4fec:	429e      	cmp	r6, r3
   b4fee:	db1b      	blt.n	b5028 <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4ff0:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b4ff4:	4615      	mov	r5, r2
   b4ff6:	2100      	movs	r1, #0
   b4ff8:	428f      	cmp	r7, r1
   b4ffa:	dd11      	ble.n	b5020 <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b4ffc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5000:	4284      	cmp	r4, r0
   b5002:	f105 0514 	add.w	r5, r5, #20
   b5006:	d109      	bne.n	b501c <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b5008:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b500c:	4353      	muls	r3, r2
   b500e:	2214      	movs	r2, #20
   b5010:	fb02 3301 	mla	r3, r2, r1, r3
   b5014:	4463      	add	r3, ip
   b5016:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b501c:	3101      	adds	r1, #1
   b501e:	e7eb      	b.n	b4ff8 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5020:	3301      	adds	r3, #1
   b5022:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5026:	e7e1      	b.n	b4fec <_Z13isNewActuadori+0xc>
  return -1;
   b5028:	f04f 30ff 	mov.w	r0, #4294967295
   b502c:	e7f5      	b.n	b501a <_Z13isNewActuadori+0x3a>
   b502e:	bf00      	nop
   b5030:	2003cea8 	.word	0x2003cea8
   b5034:	2003cf58 	.word	0x2003cf58

000b5038 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5038:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b503a:	4b0c      	ldr	r3, [pc, #48]	; (b506c <_Z14isActuadorDualii+0x34>)
   b503c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5040:	fb02 3101 	mla	r1, r2, r1, r3
   b5044:	2200      	movs	r2, #0
   b5046:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b504a:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b504c:	4294      	cmp	r4, r2
   b504e:	dd08      	ble.n	b5062 <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5050:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5054:	4285      	cmp	r5, r0
   b5056:	d101      	bne.n	b505c <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5058:	b92b      	cbnz	r3, b5066 <_Z14isActuadorDualii+0x2e>
   b505a:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b505c:	3201      	adds	r2, #1
   b505e:	3114      	adds	r1, #20
   b5060:	e7f4      	b.n	b504c <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5062:	2000      	movs	r0, #0
}
   b5064:	bd30      	pop	{r4, r5, pc}
      return true;
   b5066:	4618      	mov	r0, r3
   b5068:	e7fc      	b.n	b5064 <_Z14isActuadorDualii+0x2c>
   b506a:	bf00      	nop
   b506c:	2003cf58 	.word	0x2003cf58

000b5070 <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5070:	b084      	sub	sp, #16
   b5072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5074:	ac06      	add	r4, sp, #24
   b5076:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b507a:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b507e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5080:	f7ff fa06 	bl	b4490 <_Z10leerSensoriii>
   b5084:	ad06      	add	r5, sp, #24
   b5086:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5088:	afbc      	add	r7, sp, #752	; 0x2f0
   b508a:	2601      	movs	r6, #1
   b508c:	9b06      	ldr	r3, [sp, #24]
   b508e:	42b3      	cmp	r3, r6
   b5090:	dd12      	ble.n	b50b8 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b5092:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5096:	6a2a      	ldr	r2, [r5, #32]
   b5098:	f7ff f9fa 	bl	b4490 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b509c:	f817 3b01 	ldrb.w	r3, [r7], #1
   b50a0:	b133      	cbz	r3, b50b0 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b50a2:	2c00      	cmp	r4, #0
   b50a4:	bf08      	it	eq
   b50a6:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b50a8:	3601      	adds	r6, #1
   b50aa:	3510      	adds	r5, #16
   b50ac:	4604      	mov	r4, r0
   b50ae:	e7ed      	b.n	b508c <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b50b0:	2c00      	cmp	r4, #0
   b50b2:	bf18      	it	ne
   b50b4:	4620      	movne	r0, r4
   b50b6:	e7f7      	b.n	b50a8 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b50b8:	4620      	mov	r0, r4
   b50ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b50be:	b004      	add	sp, #16
   b50c0:	4770      	bx	lr
	...

000b50c4 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b50c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b50c8:	4c16      	ldr	r4, [pc, #88]	; (b5124 <_Z18ejecutarEvaluacionbi+0x60>)
   b50ca:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b50ce:	fb03 4401 	mla	r4, r3, r1, r4
   b50d2:	4607      	mov	r7, r0
   b50d4:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b50d6:	2600      	movs	r6, #0
   b50d8:	46a1      	mov	r9, r4
   b50da:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b50de:	42b3      	cmp	r3, r6
   b50e0:	dd1c      	ble.n	b511c <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b50e2:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b50e6:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b50ea:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b50ee:	42bb      	cmp	r3, r7
   b50f0:	d107      	bne.n	b5102 <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b50f2:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b50f6:	4640      	mov	r0, r8
   b50f8:	f7ff fc0a 	bl	b4910 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b50fc:	3601      	adds	r6, #1
   b50fe:	3414      	adds	r4, #20
   b5100:	e7eb      	b.n	b50da <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b5102:	4629      	mov	r1, r5
   b5104:	4640      	mov	r0, r8
   b5106:	9201      	str	r2, [sp, #4]
   b5108:	f7ff ff96 	bl	b5038 <_Z14isActuadorDualii>
   b510c:	9a01      	ldr	r2, [sp, #4]
   b510e:	2800      	cmp	r0, #0
   b5110:	d1f4      	bne.n	b50fc <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b5112:	4611      	mov	r1, r2
   b5114:	4640      	mov	r0, r8
   b5116:	f7ff fbf3 	bl	b4900 <_Z14apagarActuadorii>
   b511a:	e7ef      	b.n	b50fc <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b511c:	b003      	add	sp, #12
   b511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5122:	bf00      	nop
   b5124:	2003cf58 	.word	0x2003cf58

000b5128 <_Z10cambioModoi>:


void cambioModo(int modo)
{
   b5128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b512a:	4604      	mov	r4, r0
   b512c:	b9e0      	cbnz	r0, b5168 <_Z10cambioModoi+0x40>

      Serial.println("Modo BASICO detectado");
   b512e:	f004 fa8b 	bl	b9648 <_Z16_fetch_usbserialv>
   b5132:	4918      	ldr	r1, [pc, #96]	; (b5194 <_Z10cambioModoi+0x6c>)
   b5134:	f004 f887 	bl	b9246 <_ZN5Print7printlnEPKc>
      MODE = 0;
   b5138:	4b17      	ldr	r3, [pc, #92]	; (b5198 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b513a:	4918      	ldr	r1, [pc, #96]	; (b519c <_Z10cambioModoi+0x74>)
      MODE = 0;
   b513c:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");

   } else if (modo == 2) {
      Serial.println("Modo MUSICA detectado");
      MODE = 2;
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b513e:	4668      	mov	r0, sp
   b5140:	f003 ffb3 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5144:	2003      	movs	r0, #3
   b5146:	466a      	mov	r2, sp
   b5148:	2100      	movs	r1, #0
   b514a:	f7ff fbed 	bl	b4928 <_Z10showBitmapii6String>
   b514e:	4668      	mov	r0, sp
   b5150:	f003 ff60 	bl	b9014 <_ZN6StringD1Ev>

   }
   EEPROM.put(0, MODE);
   b5154:	f004 fd38 	bl	b9bc8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5158:	490f      	ldr	r1, [pc, #60]	; (b5198 <_Z10cambioModoi+0x70>)
   b515a:	2201      	movs	r2, #1
   b515c:	2000      	movs	r0, #0
}
   b515e:	b004      	add	sp, #16
   b5160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5164:	f003 bbf4 	b.w	b8950 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b5168:	2801      	cmp	r0, #1
   b516a:	d108      	bne.n	b517e <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b516c:	f004 fa6c 	bl	b9648 <_Z16_fetch_usbserialv>
   b5170:	490b      	ldr	r1, [pc, #44]	; (b51a0 <_Z10cambioModoi+0x78>)
   b5172:	f004 f868 	bl	b9246 <_ZN5Print7printlnEPKc>
      MODE = 1;
   b5176:	4b08      	ldr	r3, [pc, #32]	; (b5198 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b5178:	490a      	ldr	r1, [pc, #40]	; (b51a4 <_Z10cambioModoi+0x7c>)
      MODE = 1;
   b517a:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b517c:	e7df      	b.n	b513e <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b517e:	2802      	cmp	r0, #2
   b5180:	d1e8      	bne.n	b5154 <_Z10cambioModoi+0x2c>
      Serial.println("Modo MUSICA detectado");
   b5182:	f004 fa61 	bl	b9648 <_Z16_fetch_usbserialv>
   b5186:	4908      	ldr	r1, [pc, #32]	; (b51a8 <_Z10cambioModoi+0x80>)
   b5188:	f004 f85d 	bl	b9246 <_ZN5Print7printlnEPKc>
      MODE = 2;
   b518c:	4b02      	ldr	r3, [pc, #8]	; (b5198 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b518e:	4907      	ldr	r1, [pc, #28]	; (b51ac <_Z10cambioModoi+0x84>)
      MODE = 2;
   b5190:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b5192:	e7d4      	b.n	b513e <_Z10cambioModoi+0x16>
   b5194:	000ba52e 	.word	0x000ba52e
   b5198:	2003cf46 	.word	0x2003cf46
   b519c:	000ba544 	.word	0x000ba544
   b51a0:	000ba55d 	.word	0x000ba55d
   b51a4:	000ba575 	.word	0x000ba575
   b51a8:	000ba590 	.word	0x000ba590
   b51ac:	000ba5a6 	.word	0x000ba5a6

000b51b0 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b51b0:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b51b2:	7803      	ldrb	r3, [r0, #0]
   b51b4:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b51b6:	bf0c      	ite	eq
   b51b8:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b51ba:	2200      	movne	r2, #0
   int i = 0;
   b51bc:	4613      	mov	r3, r2
   b51be:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b51c0:	240a      	movs	r4, #10
      i++;
   b51c2:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b51c4:	f813 1b01 	ldrb.w	r1, [r3], #1
   b51c8:	3930      	subs	r1, #48	; 0x30
   b51ca:	b2cd      	uxtb	r5, r1
   b51cc:	2d09      	cmp	r5, #9
   b51ce:	d802      	bhi.n	b51d6 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b51d0:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b51d4:	e7f6      	b.n	b51c4 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b51d6:	b102      	cbz	r2, b51da <_Z4atoiPc+0x2a>
      num = -1 * num;
   b51d8:	4240      	negs	r0, r0
   return num;
}
   b51da:	bd30      	pop	{r4, r5, pc}

000b51dc <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b51dc:	b538      	push	{r3, r4, r5, lr}
   b51de:	4614      	mov	r4, r2
   b51e0:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b51e2:	f004 ff73 	bl	ba0cc <strtok>
   int j = 0;
   b51e6:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b51e8:	b140      	cbz	r0, b51fc <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b51ea:	f7ff ffe1 	bl	b51b0 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b51ee:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b51f0:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b51f4:	2000      	movs	r0, #0
   b51f6:	f004 ff69 	bl	ba0cc <strtok>
   while (ptr != NULL)
   b51fa:	e7f5      	b.n	b51e8 <_Z5splitPcS_Pi+0xc>
   }
}
   b51fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5200 <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b5200:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5202:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5206:	f10d 0307 	add.w	r3, sp, #7
   b520a:	460a      	mov	r2, r1
   b520c:	4601      	mov	r1, r0
   b520e:	480d      	ldr	r0, [pc, #52]	; (b5244 <_Z17readDataFromBlockhPhh+0x44>)
   b5210:	4d0d      	ldr	r5, [pc, #52]	; (b5248 <_Z17readDataFromBlockhPhh+0x48>)
   b5212:	f002 fb53 	bl	b78bc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5216:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5218:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b521a:	d010      	beq.n	b523e <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b521c:	f004 fa14 	bl	b9648 <_Z16_fetch_usbserialv>
   b5220:	490a      	ldr	r1, [pc, #40]	; (b524c <_Z17readDataFromBlockhPhh+0x4c>)
   b5222:	f003 fffd 	bl	b9220 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5226:	f004 fa0f 	bl	b9648 <_Z16_fetch_usbserialv>
   b522a:	7829      	ldrb	r1, [r5, #0]
   b522c:	4604      	mov	r4, r0
   b522e:	4805      	ldr	r0, [pc, #20]	; (b5244 <_Z17readDataFromBlockhPhh+0x44>)
   b5230:	f002 f898 	bl	b7364 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5234:	4601      	mov	r1, r0
   b5236:	4620      	mov	r0, r4
   b5238:	f004 f805 	bl	b9246 <_ZN5Print7printlnEPKc>
   b523c:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b523e:	b003      	add	sp, #12
   b5240:	bd30      	pop	{r4, r5, pc}
   b5242:	bf00      	nop
   b5244:	2003d924 	.word	0x2003d924
   b5248:	2003dc7c 	.word	0x2003dc7c
   b524c:	000ba5bf 	.word	0x000ba5bf

000b5250 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b5250:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5252:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5254:	4d1e      	ldr	r5, [pc, #120]	; (b52d0 <_Z8getTagIDPi+0x80>)
   b5256:	4a1f      	ldr	r2, [pc, #124]	; (b52d4 <_Z8getTagIDPi+0x84>)
   b5258:	9500      	str	r5, [sp, #0]
   b525a:	4b1f      	ldr	r3, [pc, #124]	; (b52d8 <_Z8getTagIDPi+0x88>)
   b525c:	7812      	ldrb	r2, [r2, #0]
   b525e:	4f1f      	ldr	r7, [pc, #124]	; (b52dc <_Z8getTagIDPi+0x8c>)
{
   b5260:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5262:	2160      	movs	r1, #96	; 0x60
   b5264:	4628      	mov	r0, r5
   b5266:	f002 fb4a 	bl	b78fe <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b526a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b526c:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b526e:	d00f      	beq.n	b5290 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b5270:	f004 f9ea 	bl	b9648 <_Z16_fetch_usbserialv>
   b5274:	491a      	ldr	r1, [pc, #104]	; (b52e0 <_Z8getTagIDPi+0x90>)
   b5276:	f003 ffd3 	bl	b9220 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b527a:	f004 f9e5 	bl	b9648 <_Z16_fetch_usbserialv>
   b527e:	7839      	ldrb	r1, [r7, #0]
   b5280:	4604      	mov	r4, r0
   b5282:	4628      	mov	r0, r5
   b5284:	f002 f86e 	bl	b7364 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5288:	4601      	mov	r1, r0
   b528a:	4620      	mov	r0, r4
   b528c:	f003 ffdb 	bl	b9246 <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b5290:	4b14      	ldr	r3, [pc, #80]	; (b52e4 <_Z8getTagIDPi+0x94>)
   b5292:	2212      	movs	r2, #18
   b5294:	7818      	ldrb	r0, [r3, #0]
   b5296:	a907      	add	r1, sp, #28
   b5298:	f7ff ffb2 	bl	b5200 <_Z17readDataFromBlockhPhh>
   b529c:	b1b0      	cbz	r0, b52cc <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b529e:	ac07      	add	r4, sp, #28
   b52a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b52a2:	ad03      	add	r5, sp, #12
   b52a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b52a6:	6823      	ldr	r3, [r4, #0]
   b52a8:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b52aa:	f004 f9cd 	bl	b9648 <_Z16_fetch_usbserialv>
   b52ae:	490e      	ldr	r1, [pc, #56]	; (b52e8 <_Z8getTagIDPi+0x98>)
   b52b0:	aa03      	add	r2, sp, #12
   b52b2:	f7fe ff33 	bl	b411c <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b52b6:	490d      	ldr	r1, [pc, #52]	; (b52ec <_Z8getTagIDPi+0x9c>)
   b52b8:	4632      	mov	r2, r6
   b52ba:	a803      	add	r0, sp, #12
   b52bc:	f7ff ff8e 	bl	b51dc <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b52c0:	4803      	ldr	r0, [pc, #12]	; (b52d0 <_Z8getTagIDPi+0x80>)
   b52c2:	f002 fad6 	bl	b7872 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b52c6:	4802      	ldr	r0, [pc, #8]	; (b52d0 <_Z8getTagIDPi+0x80>)
   b52c8:	f002 f933 	bl	b7532 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b52cc:	b00d      	add	sp, #52	; 0x34
   b52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b52d0:	2003d924 	.word	0x2003d924
   b52d4:	2003cec8 	.word	0x2003cec8
   b52d8:	2003d915 	.word	0x2003d915
   b52dc:	2003dc7c 	.word	0x2003dc7c
   b52e0:	000ba5d6 	.word	0x000ba5d6
   b52e4:	2003cea0 	.word	0x2003cea0
   b52e8:	000ba5f2 	.word	0x000ba5f2
   b52ec:	2003cea1 	.word	0x2003cea1

000b52f0 <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b52f0:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b52f2:	b940      	cbnz	r0, b5306 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b52f4:	4b32      	ldr	r3, [pc, #200]	; (b53c0 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b52f6:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b52f8:	2c05      	cmp	r4, #5
   b52fa:	d858      	bhi.n	b53ae <_Z13asignarPuertoi+0xbe>
   b52fc:	e8df f004 	tbb	[pc, r4]
   b5300:	32221305 	.word	0x32221305
   b5304:	483d      	.short	0x483d
      option = puertoDigital;
   b5306:	4b2f      	ldr	r3, [pc, #188]	; (b53c4 <_Z13asignarPuertoi+0xd4>)
   b5308:	e7f5      	b.n	b52f6 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b530a:	f004 f99d 	bl	b9648 <_Z16_fetch_usbserialv>
   b530e:	492e      	ldr	r1, [pc, #184]	; (b53c8 <_Z13asignarPuertoi+0xd8>)
   b5310:	f003 ff86 	bl	b9220 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5314:	4a2a      	ldr	r2, [pc, #168]	; (b53c0 <_Z13asignarPuertoi+0xd0>)
   b5316:	6813      	ldr	r3, [r2, #0]
   b5318:	3301      	adds	r3, #1
   b531a:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b531c:	4a2b      	ldr	r2, [pc, #172]	; (b53cc <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b531e:	6813      	ldr	r3, [r2, #0]
   b5320:	3301      	adds	r3, #1
   b5322:	6013      	str	r3, [r2, #0]
      return 4;
   b5324:	e01c      	b.n	b5360 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5326:	f004 f98f 	bl	b9648 <_Z16_fetch_usbserialv>
   b532a:	4929      	ldr	r1, [pc, #164]	; (b53d0 <_Z13asignarPuertoi+0xe0>)
   b532c:	f003 ff78 	bl	b9220 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5330:	4a23      	ldr	r2, [pc, #140]	; (b53c0 <_Z13asignarPuertoi+0xd0>)
   b5332:	6813      	ldr	r3, [r2, #0]
   b5334:	3301      	adds	r3, #1
   b5336:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5338:	4a24      	ldr	r2, [pc, #144]	; (b53cc <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b533a:	6813      	ldr	r3, [r2, #0]
   b533c:	3301      	adds	r3, #1
   b533e:	6013      	str	r3, [r2, #0]
      return 2;
   b5340:	2402      	movs	r4, #2
   b5342:	e00d      	b.n	b5360 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5344:	f004 f980 	bl	b9648 <_Z16_fetch_usbserialv>
   b5348:	4922      	ldr	r1, [pc, #136]	; (b53d4 <_Z13asignarPuertoi+0xe4>)
   b534a:	f003 ff69 	bl	b9220 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b534e:	4b1c      	ldr	r3, [pc, #112]	; (b53c0 <_Z13asignarPuertoi+0xd0>)
   b5350:	f04f 32ff 	mov.w	r2, #4294967295
   b5354:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5356:	4a1d      	ldr	r2, [pc, #116]	; (b53cc <_Z13asignarPuertoi+0xdc>)
   b5358:	6813      	ldr	r3, [r2, #0]
   b535a:	3301      	adds	r3, #1
   b535c:	6013      	str	r3, [r2, #0]
      return 4;
   b535e:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
   b5360:	4620      	mov	r0, r4
   b5362:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5364:	f004 f970 	bl	b9648 <_Z16_fetch_usbserialv>
   b5368:	491b      	ldr	r1, [pc, #108]	; (b53d8 <_Z13asignarPuertoi+0xe8>)
   b536a:	f003 ff59 	bl	b9220 <_ZN5Print5printEPKc>
      puertoDigital++;
   b536e:	4a15      	ldr	r2, [pc, #84]	; (b53c4 <_Z13asignarPuertoi+0xd4>)
   b5370:	6813      	ldr	r3, [r2, #0]
   b5372:	3301      	adds	r3, #1
   b5374:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5376:	4a19      	ldr	r2, [pc, #100]	; (b53dc <_Z13asignarPuertoi+0xec>)
   b5378:	e7df      	b.n	b533a <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b537a:	f004 f965 	bl	b9648 <_Z16_fetch_usbserialv>
   b537e:	4918      	ldr	r1, [pc, #96]	; (b53e0 <_Z13asignarPuertoi+0xf0>)
   b5380:	f003 ff4e 	bl	b9220 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5384:	4a0f      	ldr	r2, [pc, #60]	; (b53c4 <_Z13asignarPuertoi+0xd4>)
   b5386:	6813      	ldr	r3, [r2, #0]
   b5388:	3301      	adds	r3, #1
   b538a:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b538c:	4a13      	ldr	r2, [pc, #76]	; (b53dc <_Z13asignarPuertoi+0xec>)
   b538e:	e7c6      	b.n	b531e <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b5390:	f004 f95a 	bl	b9648 <_Z16_fetch_usbserialv>
   b5394:	4913      	ldr	r1, [pc, #76]	; (b53e4 <_Z13asignarPuertoi+0xf4>)
   b5396:	f003 ff43 	bl	b9220 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b539a:	4b0a      	ldr	r3, [pc, #40]	; (b53c4 <_Z13asignarPuertoi+0xd4>)
   b539c:	f04f 32ff 	mov.w	r2, #4294967295
   b53a0:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b53a2:	4a0e      	ldr	r2, [pc, #56]	; (b53dc <_Z13asignarPuertoi+0xec>)
   b53a4:	6813      	ldr	r3, [r2, #0]
   b53a6:	3301      	adds	r3, #1
   b53a8:	6013      	str	r3, [r2, #0]
      return 6;
   b53aa:	2406      	movs	r4, #6
   b53ac:	e7d8      	b.n	b5360 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b53ae:	f004 f94b 	bl	b9648 <_Z16_fetch_usbserialv>
   b53b2:	490d      	ldr	r1, [pc, #52]	; (b53e8 <_Z13asignarPuertoi+0xf8>)
   b53b4:	f003 ff34 	bl	b9220 <_ZN5Print5printEPKc>
      return -1;
   b53b8:	f04f 34ff 	mov.w	r4, #4294967295
   b53bc:	e7d0      	b.n	b5360 <_Z13asignarPuertoi+0x70>
   b53be:	bf00      	nop
   b53c0:	2003dc68 	.word	0x2003dc68
   b53c4:	2003ceac 	.word	0x2003ceac
   b53c8:	000ba5fe 	.word	0x000ba5fe
   b53cc:	2003dc6c 	.word	0x2003dc6c
   b53d0:	000ba615 	.word	0x000ba615
   b53d4:	000ba62c 	.word	0x000ba62c
   b53d8:	000ba643 	.word	0x000ba643
   b53dc:	2003dc70 	.word	0x2003dc70
   b53e0:	000ba65a 	.word	0x000ba65a
   b53e4:	000ba671 	.word	0x000ba671
   b53e8:	000ba688 	.word	0x000ba688

000b53ec <setup>:

// Unconnected mode ON, evita conexion wifi.
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b53ec:	b570      	push	{r4, r5, r6, lr}
   b53ee:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b53f0:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b53f2:	a807      	add	r0, sp, #28
   b53f4:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b53f8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b53fc:	f004 f834 	bl	b9468 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5400:	4843      	ldr	r0, [pc, #268]	; (b5510 <setup+0x124>)
   b5402:	4623      	mov	r3, r4
   b5404:	4622      	mov	r2, r4
   b5406:	4621      	mov	r1, r4
   b5408:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b540a:	4c42      	ldr	r4, [pc, #264]	; (b5514 <setup+0x128>)
   b540c:	f003 fc2c 	bl	b8c68 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b5410:	f004 f91a 	bl	b9648 <_Z16_fetch_usbserialv>
   b5414:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5418:	f004 f90a 	bl	b9630 <_ZN9USBSerial5beginEl>
   b541c:	7821      	ldrb	r1, [r4, #0]
   b541e:	f3bf 8f5b 	dmb	ish
   b5422:	f011 0101 	ands.w	r1, r1, #1
   b5426:	d10b      	bne.n	b5440 <setup+0x54>
   b5428:	4620      	mov	r0, r4
   b542a:	9105      	str	r1, [sp, #20]
   b542c:	f7fe fe42 	bl	b40b4 <__cxa_guard_acquire>
   b5430:	9905      	ldr	r1, [sp, #20]
   b5432:	b128      	cbz	r0, b5440 <setup+0x54>
   b5434:	4838      	ldr	r0, [pc, #224]	; (b5518 <setup+0x12c>)
   b5436:	f003 fce3 	bl	b8e00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b543a:	4620      	mov	r0, r4
   b543c:	f7fe fe3f 	bl	b40be <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5440:	4835      	ldr	r0, [pc, #212]	; (b5518 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b5442:	4c36      	ldr	r4, [pc, #216]	; (b551c <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5444:	2501      	movs	r5, #1
   b5446:	f003 fce5 	bl	b8e14 <_ZN8SPIClass5beginEv>
   b544a:	462b      	mov	r3, r5
   b544c:	223c      	movs	r2, #60	; 0x3c
   b544e:	2102      	movs	r1, #2
   b5450:	4833      	ldr	r0, [pc, #204]	; (b5520 <setup+0x134>)
   b5452:	9500      	str	r5, [sp, #0]
   b5454:	f002 fe3c 	bl	b80d0 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5458:	4831      	ldr	r0, [pc, #196]	; (b5520 <setup+0x134>)
   b545a:	f002 fe2b 	bl	b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b545e:	4830      	ldr	r0, [pc, #192]	; (b5520 <setup+0x134>)
   b5460:	f003 f890 	bl	b8584 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5464:	482f      	ldr	r0, [pc, #188]	; (b5524 <setup+0x138>)
   b5466:	f002 f8c8 	bl	b75fa <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b546a:	4a2f      	ldr	r2, [pc, #188]	; (b5528 <setup+0x13c>)
   b546c:	21ff      	movs	r1, #255	; 0xff
   b546e:	7011      	strb	r1, [r2, #0]
   b5470:	7051      	strb	r1, [r2, #1]
   b5472:	7091      	strb	r1, [r2, #2]
   b5474:	70d1      	strb	r1, [r2, #3]
   b5476:	7111      	strb	r1, [r2, #4]
   b5478:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b547a:	f004 fba5 	bl	b9bc8 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b547e:	2000      	movs	r0, #0
   b5480:	f003 fa5e 	bl	b8940 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5484:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5486:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5488:	d10d      	bne.n	b54a6 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b548a:	f004 f8dd 	bl	b9648 <_Z16_fetch_usbserialv>
    MODE = 0;
   b548e:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b5490:	4926      	ldr	r1, [pc, #152]	; (b552c <setup+0x140>)
   b5492:	f003 fed8 	bl	b9246 <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5496:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5498:	f004 fb96 	bl	b9bc8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b549c:	462a      	mov	r2, r5
   b549e:	4621      	mov	r1, r4
   b54a0:	4630      	mov	r0, r6
   b54a2:	f003 fa55 	bl	b8950 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b54a6:	7824      	ldrb	r4, [r4, #0]
   b54a8:	bb54      	cbnz	r4, b5500 <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b54aa:	2101      	movs	r1, #1
   b54ac:	2006      	movs	r0, #6
   b54ae:	f004 faf5 	bl	b9a9c <pinMode>
    ledObject.init();
   b54b2:	481f      	ldr	r0, [pc, #124]	; (b5530 <setup+0x144>)
   b54b4:	f003 f9b2 	bl	b881c <_ZN12ChainableLED4initEv>
    init = true;
   b54b8:	4b1e      	ldr	r3, [pc, #120]	; (b5534 <setup+0x148>)
   b54ba:	2201      	movs	r2, #1
   b54bc:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b54be:	4a1e      	ldr	r2, [pc, #120]	; (b5538 <setup+0x14c>)
   b54c0:	6813      	ldr	r3, [r2, #0]
   b54c2:	3301      	adds	r3, #1
   b54c4:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b54c6:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b54ca:	4a1c      	ldr	r2, [pc, #112]	; (b553c <setup+0x150>)
   b54cc:	434b      	muls	r3, r1
   b54ce:	18d1      	adds	r1, r2, r3
   b54d0:	50d4      	str	r4, [r2, r3]
   b54d2:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b54d6:	2340      	movs	r3, #64	; 0x40
   b54d8:	2201      	movs	r2, #1
   b54da:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b54de:	2200      	movs	r2, #0
   b54e0:	2380      	movs	r3, #128	; 0x80
   b54e2:	4611      	mov	r1, r2
   b54e4:	9300      	str	r3, [sp, #0]
   b54e6:	480e      	ldr	r0, [pc, #56]	; (b5520 <setup+0x134>)
   b54e8:	4b15      	ldr	r3, [pc, #84]	; (b5540 <setup+0x154>)
   b54ea:	f001 fcdb 	bl	b6ea4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b54ee:	480c      	ldr	r0, [pc, #48]	; (b5520 <setup+0x134>)
   b54f0:	f003 f848 	bl	b8584 <_ZN16Adafruit_SSD13067displayEv>
   b54f4:	f003 fa14 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b54f8:	4b12      	ldr	r3, [pc, #72]	; (b5544 <setup+0x158>)
   b54fa:	6018      	str	r0, [r3, #0]
  
}
   b54fc:	b00a      	add	sp, #40	; 0x28
   b54fe:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b5500:	2c01      	cmp	r4, #1
   b5502:	d0e8      	beq.n	b54d6 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b5504:	2101      	movs	r1, #1
   b5506:	2006      	movs	r0, #6
   b5508:	f004 fac8 	bl	b9a9c <pinMode>
   b550c:	e7e3      	b.n	b54d6 <setup+0xea>
   b550e:	bf00      	nop
   b5510:	2003e710 	.word	0x2003e710
   b5514:	2003cf38 	.word	0x2003cf38
   b5518:	2003cf3c 	.word	0x2003cf3c
   b551c:	2003cf46 	.word	0x2003cf46
   b5520:	2003d57c 	.word	0x2003d57c
   b5524:	2003d924 	.word	0x2003d924
   b5528:	2003d915 	.word	0x2003d915
   b552c:	000ba6b0 	.word	0x000ba6b0
   b5530:	2003d91c 	.word	0x2003d91c
   b5534:	2003d914 	.word	0x2003d914
   b5538:	2003cea8 	.word	0x2003cea8
   b553c:	2003cf58 	.word	0x2003cf58
   b5540:	000bac78 	.word	0x000bac78
   b5544:	2003dc78 	.word	0x2003dc78

000b5548 <loop>:
// Declaramos función reset en dirección 0.
void(* resetFunc) (void) = 0;


void loop()
{
   b5548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  if (iniciando) {
   b554c:	f8df 8280 	ldr.w	r8, [pc, #640]	; b57d0 <loop+0x288>
   b5550:	f898 3000 	ldrb.w	r3, [r8]
{
   b5554:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
  if (iniciando) {
   b5558:	b37b      	cbz	r3, b55ba <loop+0x72>
   b555a:	f003 f9e1 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b555e:	4e88      	ldr	r6, [pc, #544]	; (b5780 <loop+0x238>)
    while(currentTime-startTime<4000){
   b5560:	4f88      	ldr	r7, [pc, #544]	; (b5784 <loop+0x23c>)
    currentTime = millis();
   b5562:	6030      	str	r0, [r6, #0]
    while(currentTime-startTime<4000){
   b5564:	6833      	ldr	r3, [r6, #0]
   b5566:	683a      	ldr	r2, [r7, #0]
   b5568:	1a9b      	subs	r3, r3, r2
   b556a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   b556e:	d203      	bcs.n	b5578 <loop+0x30>
   b5570:	f003 f9d6 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b5574:	6030      	str	r0, [r6, #0]
    while(currentTime-startTime<4000){
   b5576:	e7f5      	b.n	b5564 <loop+0x1c>
    }

    display.clearDisplay();
   b5578:	4d83      	ldr	r5, [pc, #524]	; (b5788 <loop+0x240>)
   b557a:	4628      	mov	r0, r5
   b557c:	f002 fd9a 	bl	b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b5580:	4628      	mov	r0, r5
   b5582:	2101      	movs	r1, #1
   b5584:	f001 fed1 	bl	b732a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5588:	2400      	movs	r4, #0
   b558a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b558e:	e9c5 4304 	strd	r4, r3, [r5, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    if( MODE == 0 )
   b5592:	4b7e      	ldr	r3, [pc, #504]	; (b578c <loop+0x244>)
    {
      showBitmap(0,0,"");
   b5594:	497e      	ldr	r1, [pc, #504]	; (b5790 <loop+0x248>)
    if( MODE == 0 )
   b5596:	781d      	ldrb	r5, [r3, #0]
      showBitmap(0,0,"");
   b5598:	a8c6      	add	r0, sp, #792	; 0x318
    if( MODE == 0 )
   b559a:	2d00      	cmp	r5, #0
   b559c:	f040 8081 	bne.w	b56a2 <loop+0x15a>
      showBitmap(0,0,"");
   b55a0:	f003 fd83 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b55a4:	aac6      	add	r2, sp, #792	; 0x318
   b55a6:	4629      	mov	r1, r5
   b55a8:	4628      	mov	r0, r5
      showBitmap(0,2,"");
      bitmap=false;
      while(currentTime-startTime<limit){
        currentTime = millis();
      }
      showBitmap(1,3,"Zumbador:");
   b55aa:	f7ff f9bd 	bl	b4928 <_Z10showBitmapii6String>
   b55ae:	a8c6      	add	r0, sp, #792	; 0x318
   b55b0:	f003 fd30 	bl	b9014 <_ZN6StringD1Ev>
      
    }
    iniciando = false;
   b55b4:	2300      	movs	r3, #0
   b55b6:	f888 3000 	strb.w	r3, [r8]
  }
  
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b55ba:	4876      	ldr	r0, [pc, #472]	; (b5794 <loop+0x24c>)
   b55bc:	4c73      	ldr	r4, [pc, #460]	; (b578c <loop+0x244>)
   b55be:	4f76      	ldr	r7, [pc, #472]	; (b5798 <loop+0x250>)
   b55c0:	f002 f946 	bl	b7850 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b55c4:	b190      	cbz	r0, b55ec <loop+0xa4>
  {
    Serial.print("Tag Detectada --> ");
   b55c6:	f004 f83f 	bl	b9648 <_Z16_fetch_usbserialv>
   b55ca:	4974      	ldr	r1, [pc, #464]	; (b579c <loop+0x254>)
   b55cc:	f003 fe28 	bl	b9220 <_ZN5Print5printEPKc>
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b55d0:	4870      	ldr	r0, [pc, #448]	; (b5794 <loop+0x24c>)
   b55d2:	f002 fb0e 	bl	b7bf2 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b55d6:	4872      	ldr	r0, [pc, #456]	; (b57a0 <loop+0x258>)
   b55d8:	f7ff fe3a 	bl	b5250 <_Z8getTagIDPi>

    play = false;
   b55dc:	2300      	movs	r3, #0
   b55de:	703b      	strb	r3, [r7, #0]
    if ( MODE == 0 ) {
   b55e0:	7823      	ldrb	r3, [r4, #0]
   b55e2:	2b00      	cmp	r3, #0
   b55e4:	f040 8099 	bne.w	b571a <loop+0x1d2>
      pitidoOFF0();
   b55e8:	f7ff f84f 	bl	b468a <_Z10pitidoOFF0v>
      pitidoOFF1(6);
    }
  
  }

  if (!play && init) {
   b55ec:	783b      	ldrb	r3, [r7, #0]
   b55ee:	b923      	cbnz	r3, b55fa <loop+0xb2>
   b55f0:	4b6c      	ldr	r3, [pc, #432]	; (b57a4 <loop+0x25c>)
   b55f2:	781b      	ldrb	r3, [r3, #0]
   b55f4:	b10b      	cbz	r3, b55fa <loop+0xb2>
    ledApagar();
   b55f6:	f7fe ff9f 	bl	b4538 <_Z9ledApagarv>
  }

  if (bitmap) {
   b55fa:	4d6b      	ldr	r5, [pc, #428]	; (b57a8 <loop+0x260>)
   b55fc:	782b      	ldrb	r3, [r5, #0]
   b55fe:	b193      	cbz	r3, b5626 <loop+0xde>
   b5600:	f003 f98e 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b5604:	4b5e      	ldr	r3, [pc, #376]	; (b5780 <loop+0x238>)
   b5606:	6018      	str	r0, [r3, #0]
    // Si han pasado 4 segundos quitamos el bitmap/mensaje
    if ( currentTime-startTime >= limit ) {
   b5608:	4b5e      	ldr	r3, [pc, #376]	; (b5784 <loop+0x23c>)
   b560a:	681b      	ldr	r3, [r3, #0]
   b560c:	1ac0      	subs	r0, r0, r3
   b560e:	4b67      	ldr	r3, [pc, #412]	; (b57ac <loop+0x264>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	4298      	cmp	r0, r3
   b5614:	d307      	bcc.n	b5626 <loop+0xde>
      bitmap=false;
      display.clearDisplay();
   b5616:	485c      	ldr	r0, [pc, #368]	; (b5788 <loop+0x240>)
      bitmap=false;
   b5618:	2300      	movs	r3, #0
   b561a:	702b      	strb	r3, [r5, #0]
      display.clearDisplay();
   b561c:	f002 fd4a 	bl	b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b5620:	4859      	ldr	r0, [pc, #356]	; (b5788 <loop+0x240>)
   b5622:	f002 ffaf 	bl	b8584 <_ZN16Adafruit_SSD13067displayEv>
    }
  }

  // ------------------------------ Modo BASICO --------------------------------------
  if ( MODE == 0 ) 
   b5626:	7826      	ldrb	r6, [r4, #0]
  {
    
    // Tipo de tarjeta
    switch (tagInfo[0])
   b5628:	4c5d      	ldr	r4, [pc, #372]	; (b57a0 <loop+0x258>)
   b562a:	6825      	ldr	r5, [r4, #0]
  if ( MODE == 0 ) 
   b562c:	2e00      	cmp	r6, #0
   b562e:	f040 8155 	bne.w	b58dc <loop+0x394>
    switch (tagInfo[0])
   b5632:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b57d4 <loop+0x28c>
   b5636:	2d00      	cmp	r5, #0
   b5638:	f000 80ce 	beq.w	b57d8 <loop+0x290>
   b563c:	2d06      	cmp	r5, #6
   b563e:	f040 813a 	bne.w	b58b6 <loop+0x36e>
      pitidoBlink0();
   b5642:	f7ff f835 	bl	b46b0 <_Z12pitidoBlink0v>
    {

      // Tarjeta COMUN
      case 6:
        blinkAndSleep(true);
        switch (tagInfo[1])
   b5646:	6865      	ldr	r5, [r4, #4]
   b5648:	2d01      	cmp	r5, #1
   b564a:	d070      	beq.n	b572e <loop+0x1e6>
   b564c:	2d02      	cmp	r5, #2
   b564e:	d07c      	beq.n	b574a <loop+0x202>
   b5650:	b92d      	cbnz	r5, b565e <loop+0x116>
        {
          // Cambio de MODO
          case 0:
            
            cambioModo(tagInfo[2]);
   b5652:	68a0      	ldr	r0, [r4, #8]
   b5654:	f7ff fd68 	bl	b5128 <_Z10cambioModoi>
            resetFunc();
   b5658:	4b55      	ldr	r3, [pc, #340]	; (b57b0 <loop+0x268>)
   b565a:	681b      	ldr	r3, [r3, #0]
   b565c:	4798      	blx	r3
          Serial.println("Tarjeta inválida para este modo");
        }
        break;
    }

    if (tagInfo[0]!=-1) { 
   b565e:	6823      	ldr	r3, [r4, #0]
   b5660:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b5662:	bf1c      	itt	ne
   b5664:	f04f 33ff 	movne.w	r3, #4294967295
   b5668:	6023      	strne	r3, [r4, #0]
    }

    if (numActuadoresBloque > 0 && play == true)
   b566a:	f8d8 3000 	ldr.w	r3, [r8]
   b566e:	2b00      	cmp	r3, #0
   b5670:	f340 815a 	ble.w	b5928 <loop+0x3e0>
   b5674:	783b      	ldrb	r3, [r7, #0]
   b5676:	2b00      	cmp	r3, #0
   b5678:	f000 8156 	beq.w	b5928 <loop+0x3e0>
    {
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b567c:	4c4d      	ldr	r4, [pc, #308]	; (b57b4 <loop+0x26c>)
   b567e:	2101      	movs	r1, #1
   b5680:	6922      	ldr	r2, [r4, #16]
   b5682:	6860      	ldr	r0, [r4, #4]
   b5684:	f7fe ff04 	bl	b4490 <_Z10leerSensoriii>
   b5688:	4b4b      	ldr	r3, [pc, #300]	; (b57b8 <loop+0x270>)
   b568a:	7018      	strb	r0, [r3, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b568c:	4b4b      	ldr	r3, [pc, #300]	; (b57bc <loop+0x274>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b568e:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b5690:	6819      	ldr	r1, [r3, #0]
   b5692:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
      reproducir();
      play = false;
    }
  }

}
   b5696:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   b569a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b569e:	f7ff b84b 	b.w	b4738 <_Z15activarActuadoriib>
    } else if (MODE == 1)
   b56a2:	2d01      	cmp	r5, #1
   b56a4:	f8df a100 	ldr.w	sl, [pc, #256]	; b57a8 <loop+0x260>
   b56a8:	f8df 9100 	ldr.w	r9, [pc, #256]	; b57ac <loop+0x264>
   b56ac:	d116      	bne.n	b56dc <loop+0x194>
      showBitmap(0,1,"");
   b56ae:	f003 fcfc 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b56b2:	aac6      	add	r2, sp, #792	; 0x318
   b56b4:	4629      	mov	r1, r5
   b56b6:	4620      	mov	r0, r4
   b56b8:	f7ff f936 	bl	b4928 <_Z10showBitmapii6String>
   b56bc:	a8c6      	add	r0, sp, #792	; 0x318
   b56be:	f003 fca9 	bl	b9014 <_ZN6StringD1Ev>
      bitmap=false;
   b56c2:	f88a 4000 	strb.w	r4, [sl]
      while(currentTime-startTime<limit){
   b56c6:	683a      	ldr	r2, [r7, #0]
   b56c8:	6833      	ldr	r3, [r6, #0]
   b56ca:	1a9b      	subs	r3, r3, r2
   b56cc:	f8d9 2000 	ldr.w	r2, [r9]
   b56d0:	4293      	cmp	r3, r2
   b56d2:	d21a      	bcs.n	b570a <loop+0x1c2>
   b56d4:	f003 f924 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b56d8:	6030      	str	r0, [r6, #0]
      while(currentTime-startTime<limit){
   b56da:	e7f4      	b.n	b56c6 <loop+0x17e>
      showBitmap(0,2,"");
   b56dc:	f003 fce5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b56e0:	aac6      	add	r2, sp, #792	; 0x318
   b56e2:	2102      	movs	r1, #2
   b56e4:	4620      	mov	r0, r4
   b56e6:	f7ff f91f 	bl	b4928 <_Z10showBitmapii6String>
   b56ea:	a8c6      	add	r0, sp, #792	; 0x318
   b56ec:	f003 fc92 	bl	b9014 <_ZN6StringD1Ev>
      bitmap=false;
   b56f0:	f88a 4000 	strb.w	r4, [sl]
      while(currentTime-startTime<limit){
   b56f4:	683a      	ldr	r2, [r7, #0]
   b56f6:	6833      	ldr	r3, [r6, #0]
   b56f8:	1a9b      	subs	r3, r3, r2
   b56fa:	f8d9 2000 	ldr.w	r2, [r9]
   b56fe:	4293      	cmp	r3, r2
   b5700:	d203      	bcs.n	b570a <loop+0x1c2>
   b5702:	f003 f90d 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b5706:	6030      	str	r0, [r6, #0]
      while(currentTime-startTime<limit){
   b5708:	e7f4      	b.n	b56f4 <loop+0x1ac>
      showBitmap(1,3,"Zumbador:");
   b570a:	492d      	ldr	r1, [pc, #180]	; (b57c0 <loop+0x278>)
   b570c:	a8c6      	add	r0, sp, #792	; 0x318
   b570e:	f003 fccc 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5712:	aac6      	add	r2, sp, #792	; 0x318
   b5714:	2103      	movs	r1, #3
   b5716:	2001      	movs	r0, #1
   b5718:	e747      	b.n	b55aa <loop+0x62>
      pitidoOFF1(2);
   b571a:	2002      	movs	r0, #2
   b571c:	f7ff f879 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b5720:	2004      	movs	r0, #4
   b5722:	f7ff f876 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b5726:	2006      	movs	r0, #6
   b5728:	f7ff f873 	bl	b4812 <_Z10pitidoOFF1i>
   b572c:	e75e      	b.n	b55ec <loop+0xa4>
            showBitmap(3,0,"Ejecutando...");
   b572e:	4925      	ldr	r1, [pc, #148]	; (b57c4 <loop+0x27c>)
            play = true;
   b5730:	703d      	strb	r5, [r7, #0]
              showBitmap(3,0,"Borrado completo realizado");
   b5732:	a8c6      	add	r0, sp, #792	; 0x318
   b5734:	f003 fcb9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5738:	aac6      	add	r2, sp, #792	; 0x318
   b573a:	4631      	mov	r1, r6
   b573c:	2003      	movs	r0, #3
              showBitmap(1,1,""); //D4
   b573e:	f7ff f8f3 	bl	b4928 <_Z10showBitmapii6String>
   b5742:	a8c6      	add	r0, sp, #792	; 0x318
   b5744:	f003 fc66 	bl	b9014 <_ZN6StringD1Ev>
   b5748:	e789      	b.n	b565e <loop+0x116>
            if ( tagInfo[2] == 1 ) {
   b574a:	68a3      	ldr	r3, [r4, #8]
   b574c:	2b01      	cmp	r3, #1
   b574e:	d104      	bne.n	b575a <loop+0x212>
              borradoALL(0);
   b5750:	4630      	mov	r0, r6
   b5752:	f7ff f9eb 	bl	b4b2c <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b5756:	491c      	ldr	r1, [pc, #112]	; (b57c8 <loop+0x280>)
   b5758:	e7eb      	b.n	b5732 <loop+0x1ea>
              showBitmap(2,1,"");
   b575a:	490d      	ldr	r1, [pc, #52]	; (b5790 <loop+0x248>)
   b575c:	a8c6      	add	r0, sp, #792	; 0x318
   b575e:	f003 fca4 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5762:	2101      	movs	r1, #1
   b5764:	aac6      	add	r2, sp, #792	; 0x318
   b5766:	4628      	mov	r0, r5
   b5768:	f7ff f8de 	bl	b4928 <_Z10showBitmapii6String>
   b576c:	a8c6      	add	r0, sp, #792	; 0x318
   b576e:	f003 fc51 	bl	b9014 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b5772:	f003 ff69 	bl	b9648 <_Z16_fetch_usbserialv>
   b5776:	4915      	ldr	r1, [pc, #84]	; (b57cc <loop+0x284>)
          Serial.println("Tarjeta inválida para este modo");
   b5778:	f003 fd65 	bl	b9246 <_ZN5Print7printlnEPKc>
   b577c:	e76f      	b.n	b565e <loop+0x116>
   b577e:	bf00      	nop
   b5780:	2003d578 	.word	0x2003d578
   b5784:	2003dc78 	.word	0x2003dc78
   b5788:	2003d57c 	.word	0x2003d57c
   b578c:	2003cf46 	.word	0x2003cf46
   b5790:	000ba6af 	.word	0x000ba6af
   b5794:	2003d924 	.word	0x2003d924
   b5798:	2003dc60 	.word	0x2003dc60
   b579c:	000ba6c7 	.word	0x000ba6c7
   b57a0:	2003ceb0 	.word	0x2003ceb0
   b57a4:	2003d914 	.word	0x2003d914
   b57a8:	2003cf55 	.word	0x2003cf55
   b57ac:	2003cea4 	.word	0x2003cea4
   b57b0:	2003dc74 	.word	0x2003dc74
   b57b4:	2003cf58 	.word	0x2003cf58
   b57b8:	2003e6b8 	.word	0x2003e6b8
   b57bc:	2003d90c 	.word	0x2003d90c
   b57c0:	000ba6bd 	.word	0x000ba6bd
   b57c4:	000ba6da 	.word	0x000ba6da
   b57c8:	000ba6e8 	.word	0x000ba6e8
   b57cc:	000ba703 	.word	0x000ba703
   b57d0:	2003cea3 	.word	0x2003cea3
   b57d4:	2003dc54 	.word	0x2003dc54
        tipo = tagInfo[2];
   b57d8:	4eb3      	ldr	r6, [pc, #716]	; (b5aa8 <loop+0x560>)
        id = tagInfo[1];
   b57da:	6863      	ldr	r3, [r4, #4]
        tipo = tagInfo[2];
   b57dc:	68a2      	ldr	r2, [r4, #8]
        id = tagInfo[1];
   b57de:	f8df 931c 	ldr.w	r9, [pc, #796]	; b5afc <loop+0x5b4>
        tipo = tagInfo[2];
   b57e2:	6032      	str	r2, [r6, #0]
        estado = tagInfo[3];
   b57e4:	4ab1      	ldr	r2, [pc, #708]	; (b5aac <loop+0x564>)
   b57e6:	68e1      	ldr	r1, [r4, #12]
   b57e8:	f8df a314 	ldr.w	sl, [pc, #788]	; b5b00 <loop+0x5b8>
        id = tagInfo[1];
   b57ec:	f8c9 3000 	str.w	r3, [r9]
        if (id >= 2) {
   b57f0:	2b01      	cmp	r3, #1
        estado = tagInfo[3];
   b57f2:	6011      	str	r1, [r2, #0]
        if (id >= 2) {
   b57f4:	dd2a      	ble.n	b584c <loop+0x304>
          Serial.println("Sensor detectado");
   b57f6:	f003 ff27 	bl	b9648 <_Z16_fetch_usbserialv>
   b57fa:	49ad      	ldr	r1, [pc, #692]	; (b5ab0 <loop+0x568>)
   b57fc:	f003 fd23 	bl	b9246 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b5800:	4bac      	ldr	r3, [pc, #688]	; (b5ab4 <loop+0x56c>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5802:	f8d6 b000 	ldr.w	fp, [r6]
          sensor.id = id;
   b5806:	f8d9 2000 	ldr.w	r2, [r9]
          bloques[0].sensores[0] = sensor;
   b580a:	605a      	str	r2, [r3, #4]
          bloques[0].numSensores++;
   b580c:	681a      	ldr	r2, [r3, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b580e:	f1bb 0f00 	cmp.w	fp, #0
   b5812:	bf18      	it	ne
   b5814:	f04f 0b02 	movne.w	fp, #2
          bloques[0].numSensores++;
   b5818:	3201      	adds	r2, #1
          bloques[0].sensores[0] = sensor;
   b581a:	f8c3 b010 	str.w	fp, [r3, #16]
          bloques[0].numSensores++;
   b581e:	601a      	str	r2, [r3, #0]
          numSensoresBloque++;
   b5820:	f8da 3000 	ldr.w	r3, [sl]
   b5824:	3301      	adds	r3, #1
   b5826:	f8ca 3000 	str.w	r3, [sl]
   b582a:	f7fe ff41 	bl	b46b0 <_Z12pitidoBlink0v>
            showBitmap(1,3,""); //A0
   b582e:	49a2      	ldr	r1, [pc, #648]	; (b5ab8 <loop+0x570>)
   b5830:	a8c6      	add	r0, sp, #792	; 0x318
          if (sensor.puerto == 0) {
   b5832:	f1bb 0f00 	cmp.w	fp, #0
   b5836:	d136      	bne.n	b58a6 <loop+0x35e>
            showBitmap(1,3,""); //A0
   b5838:	f003 fc37 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b583c:	aac6      	add	r2, sp, #792	; 0x318
   b583e:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b5840:	2001      	movs	r0, #1
   b5842:	f7ff f871 	bl	b4928 <_Z10showBitmapii6String>
   b5846:	a8c6      	add	r0, sp, #792	; 0x318
   b5848:	f003 fbe4 	bl	b9014 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b584c:	f8da 3000 	ldr.w	r3, [sl]
   b5850:	2b00      	cmp	r3, #0
   b5852:	dd2d      	ble.n	b58b0 <loop+0x368>
          if (tagInfo[1] == 0 || tagInfo[1] == 1) {
   b5854:	6863      	ldr	r3, [r4, #4]
   b5856:	2b01      	cmp	r3, #1
   b5858:	f63f af01 	bhi.w	b565e <loop+0x116>
            Serial.println("Actuador detectado");
   b585c:	f003 fef4 	bl	b9648 <_Z16_fetch_usbserialv>
   b5860:	4996      	ldr	r1, [pc, #600]	; (b5abc <loop+0x574>)
   b5862:	f003 fcf0 	bl	b9246 <_ZN5Print7printlnEPKc>
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b5866:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b5868:	f8d9 1000 	ldr.w	r1, [r9]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b586c:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b586e:	4b91      	ldr	r3, [pc, #580]	; (b5ab4 <loop+0x56c>)
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b5870:	bf0c      	ite	eq
   b5872:	2202      	moveq	r2, #2
   b5874:	2204      	movne	r2, #4
            bloques[0].actuadores[0] = actuador;
   b5876:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b587a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            bloques[0].actuadores[0] = actuador;
   b587e:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b5882:	3201      	adds	r2, #1
   b5884:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b5888:	f8d8 3000 	ldr.w	r3, [r8]
   b588c:	3301      	adds	r3, #1
   b588e:	f8c8 3000 	str.w	r3, [r8]
   b5892:	f7fe ff0d 	bl	b46b0 <_Z12pitidoBlink0v>
              showBitmap(1,1,""); //D4
   b5896:	4988      	ldr	r1, [pc, #544]	; (b5ab8 <loop+0x570>)
   b5898:	a8c6      	add	r0, sp, #792	; 0x318
   b589a:	f003 fc06 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b589e:	2101      	movs	r1, #1
   b58a0:	aac6      	add	r2, sp, #792	; 0x318
   b58a2:	4608      	mov	r0, r1
   b58a4:	e74b      	b.n	b573e <loop+0x1f6>
            showBitmap(1,0,""); //D2
   b58a6:	f003 fc00 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b58aa:	aac6      	add	r2, sp, #792	; 0x318
   b58ac:	4629      	mov	r1, r5
   b58ae:	e7c7      	b.n	b5840 <loop+0x2f8>
            ledApagar();
   b58b0:	f7fe fe42 	bl	b4538 <_Z9ledApagarv>
   b58b4:	e6d3      	b.n	b565e <loop+0x116>
        if ( tagInfo[0] != -1 ) {
   b58b6:	3501      	adds	r5, #1
   b58b8:	f43f aed1 	beq.w	b565e <loop+0x116>
          showBitmap(2,0,"");
   b58bc:	497e      	ldr	r1, [pc, #504]	; (b5ab8 <loop+0x570>)
   b58be:	a8c6      	add	r0, sp, #792	; 0x318
   b58c0:	f003 fbf3 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b58c4:	4631      	mov	r1, r6
   b58c6:	aac6      	add	r2, sp, #792	; 0x318
   b58c8:	2002      	movs	r0, #2
   b58ca:	f7ff f82d 	bl	b4928 <_Z10showBitmapii6String>
   b58ce:	a8c6      	add	r0, sp, #792	; 0x318
   b58d0:	f003 fba0 	bl	b9014 <_ZN6StringD1Ev>
          Serial.println("Tarjeta inválida para este modo");
   b58d4:	f003 feb8 	bl	b9648 <_Z16_fetch_usbserialv>
   b58d8:	4979      	ldr	r1, [pc, #484]	; (b5ac0 <loop+0x578>)
   b58da:	e74d      	b.n	b5778 <loop+0x230>
  } else if ( MODE == 1 ) {
   b58dc:	2e01      	cmp	r6, #1
   b58de:	f040 8332 	bne.w	b5f46 <loop+0x9fe>
    switch (tagInfo[0])
   b58e2:	2d01      	cmp	r5, #1
   b58e4:	d04c      	beq.n	b5980 <loop+0x438>
   b58e6:	2d06      	cmp	r5, #6
   b58e8:	f040 82ef 	bne.w	b5eca <loop+0x982>
        switch (tagInfo[1])
   b58ec:	6865      	ldr	r5, [r4, #4]
   b58ee:	2d01      	cmp	r5, #1
   b58f0:	d01e      	beq.n	b5930 <loop+0x3e8>
   b58f2:	2d02      	cmp	r5, #2
   b58f4:	d02a      	beq.n	b594c <loop+0x404>
   b58f6:	b92d      	cbnz	r5, b5904 <loop+0x3bc>
            cambioModo(tagInfo[2]);
   b58f8:	68a0      	ldr	r0, [r4, #8]
   b58fa:	f7ff fc15 	bl	b5128 <_Z10cambioModoi>
            resetFunc();
   b58fe:	4b71      	ldr	r3, [pc, #452]	; (b5ac4 <loop+0x57c>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	4798      	blx	r3
    tagInfo[0] = -1;
   b5904:	f04f 33ff 	mov.w	r3, #4294967295
   b5908:	6023      	str	r3, [r4, #0]
    display.display();
   b590a:	486f      	ldr	r0, [pc, #444]	; (b5ac8 <loop+0x580>)
   b590c:	f002 fe3a 	bl	b8584 <_ZN16Adafruit_SSD13067displayEv>
    if (play) {
   b5910:	783b      	ldrb	r3, [r7, #0]
   b5912:	b14b      	cbz	r3, b5928 <loop+0x3e0>
      if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5914:	4d6d      	ldr	r5, [pc, #436]	; (b5acc <loop+0x584>)
   b5916:	682b      	ldr	r3, [r5, #0]
   b5918:	2b00      	cmp	r3, #0
   b591a:	f040 82e5 	bne.w	b5ee8 <loop+0x9a0>
   b591e:	4b6c      	ldr	r3, [pc, #432]	; (b5ad0 <loop+0x588>)
   b5920:	781b      	ldrb	r3, [r3, #0]
   b5922:	2b00      	cmp	r3, #0
   b5924:	f040 82e3 	bne.w	b5eee <loop+0x9a6>
}
   b5928:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   b592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            showBitmap(3,0,"Ejecutando...");
   b5930:	4968      	ldr	r1, [pc, #416]	; (b5ad4 <loop+0x58c>)
            play = true;
   b5932:	703d      	strb	r5, [r7, #0]
              showBitmap(3,0,"Borrado completo realizado");
   b5934:	a8c6      	add	r0, sp, #792	; 0x318
   b5936:	f003 fbb8 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b593a:	aac6      	add	r2, sp, #792	; 0x318
   b593c:	2100      	movs	r1, #0
   b593e:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b5940:	f7fe fff2 	bl	b4928 <_Z10showBitmapii6String>
   b5944:	a8c6      	add	r0, sp, #792	; 0x318
   b5946:	f003 fb65 	bl	b9014 <_ZN6StringD1Ev>
   b594a:	e7db      	b.n	b5904 <loop+0x3bc>
            if ( tagInfo[2] == 1 ) {
   b594c:	68a3      	ldr	r3, [r4, #8]
   b594e:	2b01      	cmp	r3, #1
   b5950:	d103      	bne.n	b595a <loop+0x412>
   switch (modo)
   b5952:	f7fe fbb7 	bl	b40c4 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b5956:	4960      	ldr	r1, [pc, #384]	; (b5ad8 <loop+0x590>)
   b5958:	e7ec      	b.n	b5934 <loop+0x3ec>
            } else if (tagInfo[2] == 2) {
   b595a:	2b02      	cmp	r3, #2
   b595c:	d103      	bne.n	b5966 <loop+0x41e>
              borradoBLOQUE(1);
   b595e:	4630      	mov	r0, r6
   b5960:	f7ff f908 	bl	b4b74 <_Z13borradoBLOQUEi>
   b5964:	e7ce      	b.n	b5904 <loop+0x3bc>
              Serial.println("Borrado no permitido para este modo");
   b5966:	f003 fe6f 	bl	b9648 <_Z16_fetch_usbserialv>
   b596a:	495c      	ldr	r1, [pc, #368]	; (b5adc <loop+0x594>)
   b596c:	f003 fc6b 	bl	b9246 <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b5970:	4951      	ldr	r1, [pc, #324]	; (b5ab8 <loop+0x570>)
   b5972:	a8c6      	add	r0, sp, #792	; 0x318
   b5974:	f003 fb99 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5978:	aac6      	add	r2, sp, #792	; 0x318
   b597a:	4631      	mov	r1, r6
          showBitmap(2,0,"");
   b597c:	2002      	movs	r0, #2
   b597e:	e7df      	b.n	b5940 <loop+0x3f8>
        int deviceID = tagInfo[3];
   b5980:	68e6      	ldr	r6, [r4, #12]
        Serial.print("Ejecutando tag --> ");
   b5982:	4d4c      	ldr	r5, [pc, #304]	; (b5ab4 <loop+0x56c>)
   b5984:	f8df 9178 	ldr.w	r9, [pc, #376]	; b5b00 <loop+0x5b8>
   b5988:	f8df 8164 	ldr.w	r8, [pc, #356]	; b5af0 <loop+0x5a8>
   b598c:	f8df b164 	ldr.w	fp, [pc, #356]	; b5af4 <loop+0x5ac>
   b5990:	f8df a138 	ldr.w	sl, [pc, #312]	; b5acc <loop+0x584>
   b5994:	f003 fe58 	bl	b9648 <_Z16_fetch_usbserialv>
   b5998:	4951      	ldr	r1, [pc, #324]	; (b5ae0 <loop+0x598>)
   b599a:	f003 fc41 	bl	b9220 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b599e:	6863      	ldr	r3, [r4, #4]
   b59a0:	2b05      	cmp	r3, #5
   b59a2:	d847      	bhi.n	b5a34 <loop+0x4ec>
   b59a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b59a8:	00d50006 	.word	0x00d50006
   b59ac:	022e01d4 	.word	0x022e01d4
   b59b0:	027a025f 	.word	0x027a025f
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b59b4:	f8df 814c 	ldr.w	r8, [pc, #332]	; b5b04 <loop+0x5bc>
            Serial.println("Sensor detectado");
   b59b8:	f003 fe46 	bl	b9648 <_Z16_fetch_usbserialv>
   b59bc:	493c      	ldr	r1, [pc, #240]	; (b5ab0 <loop+0x568>)
   b59be:	f003 fc42 	bl	b9246 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b59c2:	f898 3000 	ldrb.w	r3, [r8]
   b59c6:	2b00      	cmp	r3, #0
   b59c8:	d05d      	beq.n	b5a86 <loop+0x53e>
   b59ca:	f8d9 2000 	ldr.w	r2, [r9]
   b59ce:	f8db 3000 	ldr.w	r3, [fp]
   b59d2:	429a      	cmp	r2, r3
   b59d4:	f040 809e 	bne.w	b5b14 <loop+0x5cc>
   b59d8:	4630      	mov	r0, r6
   b59da:	f7ff fa7d 	bl	b4ed8 <_Z13isValidSensori>
   b59de:	2800      	cmp	r0, #0
   b59e0:	d04d      	beq.n	b5a7e <loop+0x536>
              int puerto = isNewSensor(deviceID);
   b59e2:	4630      	mov	r0, r6
   b59e4:	f7ff fa9a 	bl	b4f1c <_Z11isNewSensori>
              if (puerto == -1) {
   b59e8:	f1b0 3fff 	cmp.w	r0, #4294967295
              int puerto = isNewSensor(deviceID);
   b59ec:	4680      	mov	r8, r0
              if (puerto == -1) {
   b59ee:	d14e      	bne.n	b5a8e <loop+0x546>
                puerto = asignarPuerto(tagInfo[2]);
   b59f0:	68a0      	ldr	r0, [r4, #8]
   b59f2:	f7ff fc7d 	bl	b52f0 <_Z13asignarPuertoi>
   b59f6:	4680      	mov	r8, r0
                showPort(tagInfo[2], puerto);
   b59f8:	4601      	mov	r1, r0
   b59fa:	68a0      	ldr	r0, [r4, #8]
   b59fc:	f7ff f848 	bl	b4a90 <_Z8showPortii>
              if (puerto != -1) {
   b5a00:	f1b8 3fff 	cmp.w	r8, #4294967295
   b5a04:	f000 8184 	beq.w	b5d10 <loop+0x7c8>
                newSensor.bloque = numBloque;
   b5a08:	f8da 2000 	ldr.w	r2, [sl]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5a0c:	f8d9 0000 	ldr.w	r0, [r9]
   b5a10:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5a14:	4351      	muls	r1, r2
   b5a16:	eb01 1300 	add.w	r3, r1, r0, lsl #4
   b5a1a:	442b      	add	r3, r5
                numSensoresBloque++;
   b5a1c:	3001      	adds	r0, #1
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5a1e:	605e      	str	r6, [r3, #4]
   b5a20:	6926      	ldr	r6, [r4, #16]
   b5a22:	f8c3 8010 	str.w	r8, [r3, #16]
   b5a26:	e9c3 6202 	strd	r6, r2, [r3, #8]
                bloques[numBloque].numSensores++;
   b5a2a:	586b      	ldr	r3, [r5, r1]
                numSensoresBloque++;
   b5a2c:	f8c9 0000 	str.w	r0, [r9]
                bloques[numBloque].numSensores++;
   b5a30:	3301      	adds	r3, #1
   b5a32:	506b      	str	r3, [r5, r1]
        Serial.println("Fin Tag");
   b5a34:	f003 fe08 	bl	b9648 <_Z16_fetch_usbserialv>
   b5a38:	492a      	ldr	r1, [pc, #168]	; (b5ae4 <loop+0x59c>)
   b5a3a:	f003 fc04 	bl	b9246 <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b5a3e:	f003 fe03 	bl	b9648 <_Z16_fetch_usbserialv>
   b5a42:	4929      	ldr	r1, [pc, #164]	; (b5ae8 <loop+0x5a0>)
   b5a44:	f003 fbff 	bl	b9246 <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b5a48:	f003 fdfe 	bl	b9648 <_Z16_fetch_usbserialv>
   b5a4c:	f8da 2000 	ldr.w	r2, [sl]
   b5a50:	4926      	ldr	r1, [pc, #152]	; (b5aec <loop+0x5a4>)
   b5a52:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5a56:	fb03 5502 	mla	r5, r3, r2, r5
   b5a5a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b5a5e:	9302      	str	r3, [sp, #8]
   b5a60:	4b23      	ldr	r3, [pc, #140]	; (b5af0 <loop+0x5a8>)
   b5a62:	681b      	ldr	r3, [r3, #0]
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	4b23      	ldr	r3, [pc, #140]	; (b5af4 <loop+0x5ac>)
   b5a68:	681b      	ldr	r3, [r3, #0]
   b5a6a:	9300      	str	r3, [sp, #0]
   b5a6c:	f8d9 3000 	ldr.w	r3, [r9]
   b5a70:	f7fe fb54 	bl	b411c <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b5a74:	f003 fde8 	bl	b9648 <_Z16_fetch_usbserialv>
   b5a78:	f003 fbd9 	bl	b922e <_ZN5Print7printlnEv>
        break;
   b5a7c:	e742      	b.n	b5904 <loop+0x3bc>
              if ((!IF_pasado)) {
   b5a7e:	f898 3000 	ldrb.w	r3, [r8]
   b5a82:	2b00      	cmp	r3, #0
   b5a84:	d140      	bne.n	b5b08 <loop+0x5c0>
                Serial.println("Se esperaba IF tag");
   b5a86:	f003 fddf 	bl	b9648 <_Z16_fetch_usbserialv>
   b5a8a:	491b      	ldr	r1, [pc, #108]	; (b5af8 <loop+0x5b0>)
   b5a8c:	e045      	b.n	b5b1a <loop+0x5d2>
                showBitmap(1,6,"");
   b5a8e:	490a      	ldr	r1, [pc, #40]	; (b5ab8 <loop+0x570>)
   b5a90:	a8c6      	add	r0, sp, #792	; 0x318
   b5a92:	f003 fb0a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5a96:	aac6      	add	r2, sp, #792	; 0x318
   b5a98:	2106      	movs	r1, #6
   b5a9a:	2001      	movs	r0, #1
   b5a9c:	f7fe ff44 	bl	b4928 <_Z10showBitmapii6String>
   b5aa0:	a8c6      	add	r0, sp, #792	; 0x318
   b5aa2:	f003 fab7 	bl	b9014 <_ZN6StringD1Ev>
              if (puerto != -1) {
   b5aa6:	e7af      	b.n	b5a08 <loop+0x4c0>
   b5aa8:	2003e6b4 	.word	0x2003e6b4
   b5aac:	2003d90c 	.word	0x2003d90c
   b5ab0:	000ba727 	.word	0x000ba727
   b5ab4:	2003cf58 	.word	0x2003cf58
   b5ab8:	000ba6af 	.word	0x000ba6af
   b5abc:	000ba738 	.word	0x000ba738
   b5ac0:	000ba74b 	.word	0x000ba74b
   b5ac4:	2003dc74 	.word	0x2003dc74
   b5ac8:	2003d57c 	.word	0x2003d57c
   b5acc:	2003cea8 	.word	0x2003cea8
   b5ad0:	2003cf54 	.word	0x2003cf54
   b5ad4:	000ba6da 	.word	0x000ba6da
   b5ad8:	000ba6e8 	.word	0x000ba6e8
   b5adc:	000ba703 	.word	0x000ba703
   b5ae0:	000ba76c 	.word	0x000ba76c
   b5ae4:	000ba934 	.word	0x000ba934
   b5ae8:	000ba93c 	.word	0x000ba93c
   b5aec:	000ba971 	.word	0x000ba971
   b5af0:	2003dc54 	.word	0x2003dc54
   b5af4:	2003dc58 	.word	0x2003dc58
   b5af8:	000ba780 	.word	0x000ba780
   b5afc:	2003d910 	.word	0x2003d910
   b5b00:	2003dc5c 	.word	0x2003dc5c
   b5b04:	2003cf45 	.word	0x2003cf45
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b5b08:	f8d9 2000 	ldr.w	r2, [r9]
   b5b0c:	f8db 3000 	ldr.w	r3, [fp]
   b5b10:	429a      	cmp	r2, r3
   b5b12:	d00c      	beq.n	b5b2e <loop+0x5e6>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b5b14:	f003 fd98 	bl	b9648 <_Z16_fetch_usbserialv>
   b5b18:	49a8      	ldr	r1, [pc, #672]	; (b5dbc <loop+0x874>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5b1a:	f003 fb94 	bl	b9246 <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b5b1e:	49a8      	ldr	r1, [pc, #672]	; (b5dc0 <loop+0x878>)
   b5b20:	a8c6      	add	r0, sp, #792	; 0x318
   b5b22:	f003 fac2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5b26:	2102      	movs	r1, #2
   b5b28:	aac6      	add	r2, sp, #792	; 0x318
   b5b2a:	4608      	mov	r0, r1
   b5b2c:	e00b      	b.n	b5b46 <loop+0x5fe>
                Serial.println("Sensor invalido");
   b5b2e:	f003 fd8b 	bl	b9648 <_Z16_fetch_usbserialv>
   b5b32:	49a4      	ldr	r1, [pc, #656]	; (b5dc4 <loop+0x87c>)
   b5b34:	f003 fb87 	bl	b9246 <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b5b38:	49a1      	ldr	r1, [pc, #644]	; (b5dc0 <loop+0x878>)
   b5b3a:	a8c6      	add	r0, sp, #792	; 0x318
   b5b3c:	f003 fab5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5b40:	aac6      	add	r2, sp, #792	; 0x318
   b5b42:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b5b44:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b5b46:	f7fe feef 	bl	b4928 <_Z10showBitmapii6String>
   b5b4a:	a8c6      	add	r0, sp, #792	; 0x318
   b5b4c:	f003 fa62 	bl	b9014 <_ZN6StringD1Ev>
   b5b50:	e770      	b.n	b5a34 <loop+0x4ec>
            Serial.println("Actuador detectado");
   b5b52:	f003 fd79 	bl	b9648 <_Z16_fetch_usbserialv>
   b5b56:	499c      	ldr	r1, [pc, #624]	; (b5dc8 <loop+0x880>)
   b5b58:	f003 fb75 	bl	b9246 <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b5b5c:	4b9b      	ldr	r3, [pc, #620]	; (b5dcc <loop+0x884>)
            int deviceState = tagInfo[4];
   b5b5e:	f8d4 b010 	ldr.w	fp, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b5b62:	781b      	ldrb	r3, [r3, #0]
   b5b64:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b5b66:	2b00      	cmp	r3, #0
   b5b68:	d06a      	beq.n	b5c40 <loop+0x6f8>
   b5b6a:	4b99      	ldr	r3, [pc, #612]	; (b5dd0 <loop+0x888>)
   b5b6c:	781b      	ldrb	r3, [r3, #0]
   b5b6e:	4631      	mov	r1, r6
   b5b70:	4658      	mov	r0, fp
   b5b72:	2b00      	cmp	r3, #0
   b5b74:	d161      	bne.n	b5c3a <loop+0x6f2>
   b5b76:	f7ff f9f9 	bl	b4f6c <_Z15isValidActuadorii>
   b5b7a:	2800      	cmp	r0, #0
   b5b7c:	d060      	beq.n	b5c40 <loop+0x6f8>
   b5b7e:	f8d8 3000 	ldr.w	r3, [r8]
   b5b82:	2b00      	cmp	r3, #0
   b5b84:	d15c      	bne.n	b5c40 <loop+0x6f8>
              int puerto = isNewActuador(deviceID);
   b5b86:	4630      	mov	r0, r6
   b5b88:	f7ff fa2a 	bl	b4fe0 <_Z13isNewActuadori>
   b5b8c:	4603      	mov	r3, r0
              if (puerto == -1) {
   b5b8e:	1c58      	adds	r0, r3, #1
   b5b90:	d144      	bne.n	b5c1c <loop+0x6d4>
                puerto = asignarPuerto(tagInfo[2]);
   b5b92:	68a0      	ldr	r0, [r4, #8]
   b5b94:	f7ff fbac 	bl	b52f0 <_Z13asignarPuertoi>
                showPort(tagInfo[2], puerto);
   b5b98:	4601      	mov	r1, r0
   b5b9a:	90b9      	str	r0, [sp, #740]	; 0x2e4
   b5b9c:	68a0      	ldr	r0, [r4, #8]
   b5b9e:	f7fe ff77 	bl	b4a90 <_Z8showPortii>
              if (puerto != -1) {
   b5ba2:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b5ba4:	1c59      	adds	r1, r3, #1
   b5ba6:	f000 80b3 	beq.w	b5d10 <loop+0x7c8>
                newActuador.bloque = numBloque;
   b5baa:	f8da c000 	ldr.w	ip, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5bae:	f8d8 0000 	ldr.w	r0, [r8]
   b5bb2:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5bb6:	fb01 f10c 	mul.w	r1, r1, ip
   b5bba:	2214      	movs	r2, #20
   b5bbc:	fb02 1200 	mla	r2, r2, r0, r1
   b5bc0:	442a      	add	r2, r5
   b5bc2:	e9c2 6b52 	strd	r6, fp, [r2, #328]	; 0x148
                bloques[numBloque].numActuadores++;
   b5bc6:	4429      	add	r1, r5
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5bc8:	f04f 0b01 	mov.w	fp, #1
   b5bcc:	f882 b158 	strb.w	fp, [r2, #344]	; 0x158
   b5bd0:	e9c2 c354 	strd	ip, r3, [r2, #336]	; 0x150
                bloques[numBloque].numActuadores++;
   b5bd4:	f8d1 2144 	ldr.w	r2, [r1, #324]	; 0x144
                numActuadoresBloque++;
   b5bd8:	4458      	add	r0, fp
                bloques[numBloque].numActuadores++;
   b5bda:	445a      	add	r2, fp
                numActuadoresBloque++;
   b5bdc:	f8c8 0000 	str.w	r0, [r8]
                bloques[numBloque].numActuadores++;
   b5be0:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
                if (deviceID == 0)
   b5be4:	2e00      	cmp	r6, #0
   b5be6:	f47f af25 	bne.w	b5a34 <loop+0x4ec>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5bea:	b2d9      	uxtb	r1, r3
   b5bec:	eb01 020b 	add.w	r2, r1, fp
   b5bf0:	aec6      	add	r6, sp, #792	; 0x318
   b5bf2:	2305      	movs	r3, #5
   b5bf4:	b2d2      	uxtb	r2, r2
   b5bf6:	4630      	mov	r0, r6
   b5bf8:	f002 fd5e 	bl	b86b8 <_ZN12ChainableLEDC1Ehhh>
   b5bfc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5c00:	f8df 81fc 	ldr.w	r8, [pc, #508]	; b5e00 <loop+0x8b8>
   b5c04:	e888 0003 	stmia.w	r8, {r0, r1}
   b5c08:	4630      	mov	r0, r6
   b5c0a:	f002 fd62 	bl	b86d2 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5c0e:	4640      	mov	r0, r8
   b5c10:	f002 fe04 	bl	b881c <_ZN12ChainableLED4initEv>
                  init = true;
   b5c14:	4b6f      	ldr	r3, [pc, #444]	; (b5dd4 <loop+0x88c>)
   b5c16:	f883 b000 	strb.w	fp, [r3]
   b5c1a:	e70b      	b.n	b5a34 <loop+0x4ec>
                showBitmap(1,6,"");
   b5c1c:	4968      	ldr	r1, [pc, #416]	; (b5dc0 <loop+0x878>)
   b5c1e:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b5c20:	a8c6      	add	r0, sp, #792	; 0x318
   b5c22:	f003 fa42 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5c26:	aac6      	add	r2, sp, #792	; 0x318
   b5c28:	2106      	movs	r1, #6
   b5c2a:	2001      	movs	r0, #1
   b5c2c:	f7fe fe7c 	bl	b4928 <_Z10showBitmapii6String>
   b5c30:	a8c6      	add	r0, sp, #792	; 0x318
   b5c32:	f003 f9ef 	bl	b9014 <_ZN6StringD1Ev>
   b5c36:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
              if (puerto != -1) {
   b5c38:	e7b7      	b.n	b5baa <loop+0x662>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5c3a:	f7ff f997 	bl	b4f6c <_Z15isValidActuadorii>
   b5c3e:	b958      	cbnz	r0, b5c58 <loop+0x710>
              if (!IF_pasado) {
   b5c40:	4b65      	ldr	r3, [pc, #404]	; (b5dd8 <loop+0x890>)
   b5c42:	781b      	ldrb	r3, [r3, #0]
   b5c44:	2b00      	cmp	r3, #0
   b5c46:	f43f af1e 	beq.w	b5a86 <loop+0x53e>
              } else if (!THEN_pasado) {
   b5c4a:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b5c4c:	2b00      	cmp	r3, #0
   b5c4e:	d165      	bne.n	b5d1c <loop+0x7d4>
                Serial.println("Se esperaba THEN tag");
   b5c50:	f003 fcfa 	bl	b9648 <_Z16_fetch_usbserialv>
   b5c54:	4961      	ldr	r1, [pc, #388]	; (b5ddc <loop+0x894>)
   b5c56:	e760      	b.n	b5b1a <loop+0x5d2>
              int puerto = isNewActuador(deviceID);
   b5c58:	4630      	mov	r0, r6
   b5c5a:	f7ff f9c1 	bl	b4fe0 <_Z13isNewActuadori>
              if (puerto == -1) {
   b5c5e:	f1b0 3fff 	cmp.w	r0, #4294967295
              int puerto = isNewActuador(deviceID);
   b5c62:	4683      	mov	fp, r0
              if (puerto == -1) {
   b5c64:	d147      	bne.n	b5cf6 <loop+0x7ae>
                puerto = asignarPuerto(tagInfo[2]);
   b5c66:	68a0      	ldr	r0, [r4, #8]
   b5c68:	f7ff fb42 	bl	b52f0 <_Z13asignarPuertoi>
   b5c6c:	4683      	mov	fp, r0
                showPort(tagInfo[2], puerto);
   b5c6e:	4601      	mov	r1, r0
   b5c70:	68a0      	ldr	r0, [r4, #8]
   b5c72:	f7fe ff0d 	bl	b4a90 <_Z8showPortii>
              if (puerto != -1) {
   b5c76:	f1bb 3fff 	cmp.w	fp, #4294967295
   b5c7a:	d049      	beq.n	b5d10 <loop+0x7c8>
                newActuador.bloque = numBloque;
   b5c7c:	f8da c000 	ldr.w	ip, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5c80:	f8d8 0000 	ldr.w	r0, [r8]
   b5c84:	6922      	ldr	r2, [r4, #16]
   b5c86:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5c8a:	fb0c f101 	mul.w	r1, ip, r1
   b5c8e:	2314      	movs	r3, #20
   b5c90:	fb03 1300 	mla	r3, r3, r0, r1
   b5c94:	442b      	add	r3, r5
   b5c96:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
   b5c9a:	e9c3 2c53 	strd	r2, ip, [r3, #332]	; 0x14c
   b5c9e:	f8c3 6148 	str.w	r6, [r3, #328]	; 0x148
   b5ca2:	f8c3 b154 	str.w	fp, [r3, #340]	; 0x154
                bloques[numBloque].numActuadores++;
   b5ca6:	4429      	add	r1, r5
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5ca8:	2300      	movs	r3, #0
   b5caa:	f88e 3010 	strb.w	r3, [lr, #16]
                bloques[numBloque].numActuadores++;
   b5cae:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
                numActuadoresBloque++;
   b5cb2:	3001      	adds	r0, #1
                bloques[numBloque].numActuadores++;
   b5cb4:	3301      	adds	r3, #1
   b5cb6:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
                numActuadoresBloque++;
   b5cba:	f8c8 0000 	str.w	r0, [r8]
                if (deviceID == 0)
   b5cbe:	2e00      	cmp	r6, #0
   b5cc0:	f47f aeb8 	bne.w	b5a34 <loop+0x4ec>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5cc4:	fa5f f18b 	uxtb.w	r1, fp
   b5cc8:	1c4a      	adds	r2, r1, #1
   b5cca:	aec6      	add	r6, sp, #792	; 0x318
   b5ccc:	2305      	movs	r3, #5
   b5cce:	b2d2      	uxtb	r2, r2
   b5cd0:	4630      	mov	r0, r6
   b5cd2:	f002 fcf1 	bl	b86b8 <_ZN12ChainableLEDC1Ehhh>
   b5cd6:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5cda:	f8df 8124 	ldr.w	r8, [pc, #292]	; b5e00 <loop+0x8b8>
   b5cde:	e888 0003 	stmia.w	r8, {r0, r1}
   b5ce2:	4630      	mov	r0, r6
   b5ce4:	f002 fcf5 	bl	b86d2 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5ce8:	4640      	mov	r0, r8
   b5cea:	f002 fd97 	bl	b881c <_ZN12ChainableLED4initEv>
                  init = true;
   b5cee:	4b39      	ldr	r3, [pc, #228]	; (b5dd4 <loop+0x88c>)
   b5cf0:	2201      	movs	r2, #1
   b5cf2:	701a      	strb	r2, [r3, #0]
   b5cf4:	e69e      	b.n	b5a34 <loop+0x4ec>
                showBitmap(1,6,"");
   b5cf6:	4932      	ldr	r1, [pc, #200]	; (b5dc0 <loop+0x878>)
   b5cf8:	a8c6      	add	r0, sp, #792	; 0x318
   b5cfa:	f003 f9d6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5cfe:	aac6      	add	r2, sp, #792	; 0x318
   b5d00:	2106      	movs	r1, #6
   b5d02:	2001      	movs	r0, #1
   b5d04:	f7fe fe10 	bl	b4928 <_Z10showBitmapii6String>
   b5d08:	a8c6      	add	r0, sp, #792	; 0x318
   b5d0a:	f003 f983 	bl	b9014 <_ZN6StringD1Ev>
              if (puerto != -1) {
   b5d0e:	e7b5      	b.n	b5c7c <loop+0x734>
                Serial.println("Puerto no disponible");
   b5d10:	f003 fc9a 	bl	b9648 <_Z16_fetch_usbserialv>
   b5d14:	4932      	ldr	r1, [pc, #200]	; (b5de0 <loop+0x898>)
   b5d16:	f003 fa96 	bl	b9246 <_ZN5Print7printlnEPKc>
   b5d1a:	e68b      	b.n	b5a34 <loop+0x4ec>
                if (!isValidActuador(deviceState, deviceID)) {
   b5d1c:	4631      	mov	r1, r6
   b5d1e:	4658      	mov	r0, fp
   b5d20:	f7ff f924 	bl	b4f6c <_Z15isValidActuadorii>
   b5d24:	b958      	cbnz	r0, b5d3e <loop+0x7f6>
                  Serial.println("Invalid Actuador");
   b5d26:	f003 fc8f 	bl	b9648 <_Z16_fetch_usbserialv>
   b5d2a:	492e      	ldr	r1, [pc, #184]	; (b5de4 <loop+0x89c>)
   b5d2c:	f003 fa8b 	bl	b9246 <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b5d30:	4923      	ldr	r1, [pc, #140]	; (b5dc0 <loop+0x878>)
   b5d32:	a8c6      	add	r0, sp, #792	; 0x318
   b5d34:	f003 f9b9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5d38:	aac6      	add	r2, sp, #792	; 0x318
   b5d3a:	2106      	movs	r1, #6
   b5d3c:	e702      	b.n	b5b44 <loop+0x5fc>
                } else if(!ELSE_pasado) {
   b5d3e:	4b24      	ldr	r3, [pc, #144]	; (b5dd0 <loop+0x888>)
   b5d40:	781b      	ldrb	r3, [r3, #0]
   b5d42:	2b00      	cmp	r3, #0
   b5d44:	f47f ae76 	bne.w	b5a34 <loop+0x4ec>
                  Serial.println("Se esperaba ELSE tag");
   b5d48:	f003 fc7e 	bl	b9648 <_Z16_fetch_usbserialv>
   b5d4c:	4926      	ldr	r1, [pc, #152]	; (b5de8 <loop+0x8a0>)
   b5d4e:	e6e4      	b.n	b5b1a <loop+0x5d2>
            Serial.println("IF detectado");
   b5d50:	f003 fc7a 	bl	b9648 <_Z16_fetch_usbserialv>
   b5d54:	4925      	ldr	r1, [pc, #148]	; (b5dec <loop+0x8a4>)
   b5d56:	f003 fa76 	bl	b9246 <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5d5a:	f8da 3000 	ldr.w	r3, [sl]
   b5d5e:	1c5a      	adds	r2, r3, #1
   b5d60:	d004      	beq.n	b5d6c <loop+0x824>
   b5d62:	bb3b      	cbnz	r3, b5db4 <loop+0x86c>
   b5d64:	f8d8 2000 	ldr.w	r2, [r8]
   b5d68:	2a00      	cmp	r2, #0
   b5d6a:	dd23      	ble.n	b5db4 <loop+0x86c>
              IF_pasado = true;
   b5d6c:	4a1a      	ldr	r2, [pc, #104]	; (b5dd8 <loop+0x890>)
   b5d6e:	2101      	movs	r1, #1
   b5d70:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b5d72:	4a16      	ldr	r2, [pc, #88]	; (b5dcc <loop+0x884>)
              showBitmap(3,0,"IF");
   b5d74:	491e      	ldr	r1, [pc, #120]	; (b5df0 <loop+0x8a8>)
              THEN_pasado = false;
   b5d76:	2600      	movs	r6, #0
   b5d78:	7016      	strb	r6, [r2, #0]
              ELSE_pasado = false;
   b5d7a:	4a15      	ldr	r2, [pc, #84]	; (b5dd0 <loop+0x888>)
              numCondicionalesBloque = 0;
   b5d7c:	f8cb 6000 	str.w	r6, [fp]
              ELSE_pasado = false;
   b5d80:	7016      	strb	r6, [r2, #0]
              puertoAnalogico_bloque = 0;
   b5d82:	4a1c      	ldr	r2, [pc, #112]	; (b5df4 <loop+0x8ac>)
              numSensoresBloque = 0;
   b5d84:	f8c9 6000 	str.w	r6, [r9]
              puertoAnalogico_bloque = 0;
   b5d88:	6016      	str	r6, [r2, #0]
              puertoDigital_bloque = 0;
   b5d8a:	4a1b      	ldr	r2, [pc, #108]	; (b5df8 <loop+0x8b0>)
              numActuadoresBloque = 0;
   b5d8c:	f8c8 6000 	str.w	r6, [r8]
              numBloque++;
   b5d90:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b5d92:	6016      	str	r6, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b5d94:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b5d98:	f8ca 3000 	str.w	r3, [sl]
              bloques[numBloque] = nuevoBloque;
   b5d9c:	4353      	muls	r3, r2
   b5d9e:	18ea      	adds	r2, r5, r3
   b5da0:	50ee      	str	r6, [r5, r3]
   b5da2:	f8c2 6144 	str.w	r6, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b5da6:	a8c6      	add	r0, sp, #792	; 0x318
   b5da8:	f003 f97f 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5dac:	aac6      	add	r2, sp, #792	; 0x318
   b5dae:	2100      	movs	r1, #0
   b5db0:	2003      	movs	r0, #3
   b5db2:	e6c8      	b.n	b5b46 <loop+0x5fe>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5db4:	f003 fc48 	bl	b9648 <_Z16_fetch_usbserialv>
   b5db8:	4910      	ldr	r1, [pc, #64]	; (b5dfc <loop+0x8b4>)
   b5dba:	e6ae      	b.n	b5b1a <loop+0x5d2>
   b5dbc:	000ba793 	.word	0x000ba793
   b5dc0:	000ba6af 	.word	0x000ba6af
   b5dc4:	000ba7c8 	.word	0x000ba7c8
   b5dc8:	000ba738 	.word	0x000ba738
   b5dcc:	2003cf54 	.word	0x2003cf54
   b5dd0:	2003cf44 	.word	0x2003cf44
   b5dd4:	2003d914 	.word	0x2003d914
   b5dd8:	2003cf45 	.word	0x2003cf45
   b5ddc:	000ba7d8 	.word	0x000ba7d8
   b5de0:	000ba3d5 	.word	0x000ba3d5
   b5de4:	000ba7ed 	.word	0x000ba7ed
   b5de8:	000ba7fe 	.word	0x000ba7fe
   b5dec:	000ba813 	.word	0x000ba813
   b5df0:	000ba820 	.word	0x000ba820
   b5df4:	2003dc6c 	.word	0x2003dc6c
   b5df8:	2003dc70 	.word	0x2003dc70
   b5dfc:	000ba823 	.word	0x000ba823
   b5e00:	2003d91c 	.word	0x2003d91c
            Serial.println("AND/OR detectado");
   b5e04:	f003 fc20 	bl	b9648 <_Z16_fetch_usbserialv>
   b5e08:	49a0      	ldr	r1, [pc, #640]	; (b608c <loop+0xb44>)
   b5e0a:	f003 fa1c 	bl	b9246 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b5e0e:	4ba0      	ldr	r3, [pc, #640]	; (b6090 <loop+0xb48>)
   b5e10:	781b      	ldrb	r3, [r3, #0]
   b5e12:	2b00      	cmp	r3, #0
   b5e14:	f43f ae37 	beq.w	b5a86 <loop+0x53e>
   b5e18:	f8db 3000 	ldr.w	r3, [fp]
   b5e1c:	f8d9 2000 	ldr.w	r2, [r9]
   b5e20:	4293      	cmp	r3, r2
   b5e22:	da1a      	bge.n	b5e5a <loop+0x912>
   b5e24:	f8d8 6000 	ldr.w	r6, [r8]
   b5e28:	b9ce      	cbnz	r6, b5e5e <loop+0x916>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5e2a:	f8da 2000 	ldr.w	r2, [sl]
   b5e2e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b5e32:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5e36:	fb01 5202 	mla	r2, r1, r2, r5
   b5e3a:	f1b8 0f00 	cmp.w	r8, #0
   b5e3e:	441a      	add	r2, r3
   b5e40:	bf14      	ite	ne
   b5e42:	2101      	movne	r1, #1
   b5e44:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b5e46:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5e4a:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b5e4e:	f8cb 3000 	str.w	r3, [fp]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b5e52:	bf0c      	ite	eq
   b5e54:	498f      	ldreq	r1, [pc, #572]	; (b6094 <loop+0xb4c>)
   b5e56:	4990      	ldrne	r1, [pc, #576]	; (b6098 <loop+0xb50>)
   b5e58:	e7a5      	b.n	b5da6 <loop+0x85e>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b5e5a:	f73f adeb 	bgt.w	b5a34 <loop+0x4ec>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5e5e:	f003 fbf3 	bl	b9648 <_Z16_fetch_usbserialv>
   b5e62:	498e      	ldr	r1, [pc, #568]	; (b609c <loop+0xb54>)
   b5e64:	e659      	b.n	b5b1a <loop+0x5d2>
            Serial.println("THEN detectado");
   b5e66:	f003 fbef 	bl	b9648 <_Z16_fetch_usbserialv>
   b5e6a:	498d      	ldr	r1, [pc, #564]	; (b60a0 <loop+0xb58>)
   b5e6c:	f003 f9eb 	bl	b9246 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b5e70:	4b87      	ldr	r3, [pc, #540]	; (b6090 <loop+0xb48>)
   b5e72:	781b      	ldrb	r3, [r3, #0]
   b5e74:	2b00      	cmp	r3, #0
   b5e76:	f43f ae06 	beq.w	b5a86 <loop+0x53e>
   b5e7a:	f8d9 3000 	ldr.w	r3, [r9]
   b5e7e:	2b00      	cmp	r3, #0
   b5e80:	dd08      	ble.n	b5e94 <loop+0x94c>
   b5e82:	f8db 2000 	ldr.w	r2, [fp]
   b5e86:	4293      	cmp	r3, r2
   b5e88:	dd04      	ble.n	b5e94 <loop+0x94c>
              THEN_pasado = true;
   b5e8a:	4b86      	ldr	r3, [pc, #536]	; (b60a4 <loop+0xb5c>)
              showBitmap(3,0,"THEN");
   b5e8c:	4986      	ldr	r1, [pc, #536]	; (b60a8 <loop+0xb60>)
              THEN_pasado = true;
   b5e8e:	2201      	movs	r2, #1
   b5e90:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b5e92:	e788      	b.n	b5da6 <loop+0x85e>
                Serial.println("Numero de sensores infucientes");
   b5e94:	f003 fbd8 	bl	b9648 <_Z16_fetch_usbserialv>
   b5e98:	4984      	ldr	r1, [pc, #528]	; (b60ac <loop+0xb64>)
   b5e9a:	e63e      	b.n	b5b1a <loop+0x5d2>
            Serial.println("ELSE detectado");
   b5e9c:	f003 fbd4 	bl	b9648 <_Z16_fetch_usbserialv>
   b5ea0:	4983      	ldr	r1, [pc, #524]	; (b60b0 <loop+0xb68>)
   b5ea2:	f003 f9d0 	bl	b9246 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b5ea6:	4b7a      	ldr	r3, [pc, #488]	; (b6090 <loop+0xb48>)
   b5ea8:	781b      	ldrb	r3, [r3, #0]
   b5eaa:	2b00      	cmp	r3, #0
   b5eac:	f43f adeb 	beq.w	b5a86 <loop+0x53e>
   b5eb0:	f8d8 3000 	ldr.w	r3, [r8]
   b5eb4:	2b00      	cmp	r3, #0
   b5eb6:	dd04      	ble.n	b5ec2 <loop+0x97a>
              ELSE_pasado = true;
   b5eb8:	4b7e      	ldr	r3, [pc, #504]	; (b60b4 <loop+0xb6c>)
              showBitmap(3,0,"ELSE");
   b5eba:	497f      	ldr	r1, [pc, #508]	; (b60b8 <loop+0xb70>)
              ELSE_pasado = true;
   b5ebc:	2201      	movs	r2, #1
   b5ebe:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b5ec0:	e771      	b.n	b5da6 <loop+0x85e>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5ec2:	f003 fbc1 	bl	b9648 <_Z16_fetch_usbserialv>
   b5ec6:	497d      	ldr	r1, [pc, #500]	; (b60bc <loop+0xb74>)
   b5ec8:	e627      	b.n	b5b1a <loop+0x5d2>
        if ( tagInfo[0] != -1 ) {
   b5eca:	3501      	adds	r5, #1
   b5ecc:	f43f ad1a 	beq.w	b5904 <loop+0x3bc>
          Serial.println("Tarjeta inválida para este modo");
   b5ed0:	f003 fbba 	bl	b9648 <_Z16_fetch_usbserialv>
   b5ed4:	497a      	ldr	r1, [pc, #488]	; (b60c0 <loop+0xb78>)
   b5ed6:	f003 f9b6 	bl	b9246 <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b5eda:	497a      	ldr	r1, [pc, #488]	; (b60c4 <loop+0xb7c>)
   b5edc:	a8c6      	add	r0, sp, #792	; 0x318
   b5ede:	f003 f8e4 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5ee2:	aac6      	add	r2, sp, #792	; 0x318
   b5ee4:	2100      	movs	r1, #0
   b5ee6:	e549      	b.n	b597c <loop+0x434>
      if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5ee8:	2b01      	cmp	r3, #1
   b5eea:	f47f ad1d 	bne.w	b5928 <loop+0x3e0>
        bool evaluacion = makeEvaluate(bloques[0]);
   b5eee:	4c76      	ldr	r4, [pc, #472]	; (b60c8 <loop+0xb80>)
   b5ef0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5ef4:	f104 0110 	add.w	r1, r4, #16
   b5ef8:	4668      	mov	r0, sp
   b5efa:	f004 f883 	bl	ba004 <memcpy>
   b5efe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5f02:	f7ff f8b5 	bl	b5070 <_Z12makeEvaluate6BLOQUE>
        ejecutarEvaluacion(evaluacion, 0);
   b5f06:	2100      	movs	r1, #0
   b5f08:	f7ff f8dc 	bl	b50c4 <_Z18ejecutarEvaluacionbi>
      if ( numBloque==1 && THEN_pasado ) {
   b5f0c:	682d      	ldr	r5, [r5, #0]
   b5f0e:	2d01      	cmp	r5, #1
   b5f10:	f47f ad0a 	bne.w	b5928 <loop+0x3e0>
   b5f14:	4b63      	ldr	r3, [pc, #396]	; (b60a4 <loop+0xb5c>)
   b5f16:	781b      	ldrb	r3, [r3, #0]
   b5f18:	2b00      	cmp	r3, #0
   b5f1a:	f43f ad05 	beq.w	b5928 <loop+0x3e0>
        bool evaluacion = makeEvaluate(bloques[1]);
   b5f1e:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b5f22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5f26:	4668      	mov	r0, sp
   b5f28:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
   b5f2c:	f004 f86a 	bl	ba004 <memcpy>
   b5f30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5f34:	f7ff f89c 	bl	b5070 <_Z12makeEvaluate6BLOQUE>
        ejecutarEvaluacion(evaluacion, 1);
   b5f38:	4629      	mov	r1, r5
}
   b5f3a:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   b5f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ejecutarEvaluacion(evaluacion, 1);
   b5f42:	f7ff b8bf 	b.w	b50c4 <_Z18ejecutarEvaluacionbi>
    switch (tagInfo[0])
   b5f46:	2d02      	cmp	r5, #2
   b5f48:	d037      	beq.n	b5fba <loop+0xa72>
   b5f4a:	2d06      	cmp	r5, #6
   b5f4c:	f040 814d 	bne.w	b61ea <loop+0xca2>
      switch (tagInfo[1])
   b5f50:	6860      	ldr	r0, [r4, #4]
   b5f52:	2801      	cmp	r0, #1
   b5f54:	d014      	beq.n	b5f80 <loop+0xa38>
   b5f56:	2802      	cmp	r0, #2
   b5f58:	d020      	beq.n	b5f9c <loop+0xa54>
   b5f5a:	b928      	cbnz	r0, b5f68 <loop+0xa20>
          cambioModo(tagInfo[2]);
   b5f5c:	68a0      	ldr	r0, [r4, #8]
   b5f5e:	f7ff f8e3 	bl	b5128 <_Z10cambioModoi>
          resetFunc();
   b5f62:	4b5a      	ldr	r3, [pc, #360]	; (b60cc <loop+0xb84>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	4798      	blx	r3
    tagInfo[0] = -1;
   b5f68:	f04f 33ff 	mov.w	r3, #4294967295
   b5f6c:	6023      	str	r3, [r4, #0]
    if (play) {
   b5f6e:	783b      	ldrb	r3, [r7, #0]
   b5f70:	2b00      	cmp	r3, #0
   b5f72:	f43f acd9 	beq.w	b5928 <loop+0x3e0>
      reproducir();
   b5f76:	f7fe ff61 	bl	b4e3c <_Z10reproducirv>
      play = false;
   b5f7a:	2300      	movs	r3, #0
   b5f7c:	703b      	strb	r3, [r7, #0]
}
   b5f7e:	e4d3      	b.n	b5928 <loop+0x3e0>
          showBitmap(3,0,"Ejecutando...");   
   b5f80:	4953      	ldr	r1, [pc, #332]	; (b60d0 <loop+0xb88>)
          play = true;
   b5f82:	7038      	strb	r0, [r7, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b5f84:	a8c6      	add	r0, sp, #792	; 0x318
   b5f86:	f003 f890 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b5f8a:	aac6      	add	r2, sp, #792	; 0x318
   b5f8c:	2100      	movs	r1, #0
   b5f8e:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b5f90:	f7fe fcca 	bl	b4928 <_Z10showBitmapii6String>
   b5f94:	a8c6      	add	r0, sp, #792	; 0x318
   b5f96:	f003 f83d 	bl	b9014 <_ZN6StringD1Ev>
   b5f9a:	e7e5      	b.n	b5f68 <loop+0xa20>
          if ( tagInfo[2] == 0 ) {
   b5f9c:	68a5      	ldr	r5, [r4, #8]
   b5f9e:	b91d      	cbnz	r5, b5fa8 <loop+0xa60>
            borradoPOP();
   b5fa0:	f7fe fe78 	bl	b4c94 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b5fa4:	494b      	ldr	r1, [pc, #300]	; (b60d4 <loop+0xb8c>)
   b5fa6:	e7ed      	b.n	b5f84 <loop+0xa3c>
          } else if ( tagInfo[2] == 1 ){
   b5fa8:	2d01      	cmp	r5, #1
   b5faa:	d103      	bne.n	b5fb4 <loop+0xa6c>
            borradoALL(2);
   b5fac:	f7fe fdbe 	bl	b4b2c <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b5fb0:	4949      	ldr	r1, [pc, #292]	; (b60d8 <loop+0xb90>)
   b5fb2:	e7e7      	b.n	b5f84 <loop+0xa3c>
            borradoBLOQUE(2);
   b5fb4:	f7fe fdde 	bl	b4b74 <_Z13borradoBLOQUEi>
   b5fb8:	e7d6      	b.n	b5f68 <loop+0xa20>
      switch (tagInfo[1])
   b5fba:	6866      	ldr	r6, [r4, #4]
   b5fbc:	2e01      	cmp	r6, #1
   b5fbe:	f000 8097 	beq.w	b60f0 <loop+0xba8>
   b5fc2:	2e02      	cmp	r6, #2
   b5fc4:	f000 80c8 	beq.w	b6158 <loop+0xc10>
   b5fc8:	2e00      	cmp	r6, #0
   b5fca:	d1cd      	bne.n	b5f68 <loop+0xa20>
        showBitmap(3,0,decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b5fcc:	68a1      	ldr	r1, [r4, #8]
   b5fce:	a8ba      	add	r0, sp, #744	; 0x2e8
   b5fd0:	f7fe fed0 	bl	b4d74 <_Z19decodificarNOTA_msgi>
   b5fd4:	a9ba      	add	r1, sp, #744	; 0x2e8
   b5fd6:	a8c2      	add	r0, sp, #776	; 0x308
   b5fd8:	f003 f88a 	bl	b90f0 <_ZN6StringC1ERKS_>
   b5fdc:	68e1      	ldr	r1, [r4, #12]
   b5fde:	a8be      	add	r0, sp, #760	; 0x2f8
   b5fe0:	f7fe fefa 	bl	b4dd8 <_Z19decodificarTIPO_msgi>
   b5fe4:	a9be      	add	r1, sp, #760	; 0x2f8
   b5fe6:	a8c2      	add	r0, sp, #776	; 0x308
   b5fe8:	f003 f8c9 	bl	b917e <_ZplRK15StringSumHelperRK6String>
   b5fec:	4601      	mov	r1, r0
   b5fee:	a8c6      	add	r0, sp, #792	; 0x318
   b5ff0:	f003 f87e 	bl	b90f0 <_ZN6StringC1ERKS_>
   b5ff4:	aac6      	add	r2, sp, #792	; 0x318
   b5ff6:	4631      	mov	r1, r6
   b5ff8:	2003      	movs	r0, #3
   b5ffa:	f7fe fc95 	bl	b4928 <_Z10showBitmapii6String>
   b5ffe:	a8c6      	add	r0, sp, #792	; 0x318
   b6000:	f003 f808 	bl	b9014 <_ZN6StringD1Ev>
   b6004:	a8be      	add	r0, sp, #760	; 0x2f8
   b6006:	f003 f805 	bl	b9014 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b600a:	a8c2      	add	r0, sp, #776	; 0x308
   b600c:	f003 f802 	bl	b9014 <_ZN6StringD1Ev>
   b6010:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6012:	f002 ffff 	bl	b9014 <_ZN6StringD1Ev>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b6016:	f003 fb17 	bl	b9648 <_Z16_fetch_usbserialv>
   b601a:	68a1      	ldr	r1, [r4, #8]
   b601c:	4605      	mov	r5, r0
   b601e:	a8be      	add	r0, sp, #760	; 0x2f8
   b6020:	f7fe fea8 	bl	b4d74 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6024:	a9be      	add	r1, sp, #760	; 0x2f8
   b6026:	a8c6      	add	r0, sp, #792	; 0x318
   b6028:	f003 f862 	bl	b90f0 <_ZN6StringC1ERKS_>
   b602c:	68e1      	ldr	r1, [r4, #12]
   b602e:	a8c2      	add	r0, sp, #776	; 0x308
   b6030:	f7fe fed2 	bl	b4dd8 <_Z19decodificarTIPO_msgi>
   b6034:	a9c2      	add	r1, sp, #776	; 0x308
   b6036:	a8c6      	add	r0, sp, #792	; 0x318
   b6038:	f003 f8a1 	bl	b917e <_ZplRK15StringSumHelperRK6String>
   b603c:	6801      	ldr	r1, [r0, #0]
   b603e:	4628      	mov	r0, r5
   b6040:	f7fe f86c 	bl	b411c <_ZN5Print8printlnfEPKcz>
   b6044:	a8c2      	add	r0, sp, #776	; 0x308
   b6046:	f002 ffe5 	bl	b9014 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b604a:	a8c6      	add	r0, sp, #792	; 0x318
   b604c:	f002 ffe2 	bl	b9014 <_ZN6StringD1Ev>
   b6050:	a8be      	add	r0, sp, #760	; 0x2f8
   b6052:	f002 ffdf 	bl	b9014 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b6056:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b605a:	f7fe fed7 	bl	b4e0c <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b605e:	4a1f      	ldr	r2, [pc, #124]	; (b60dc <loop+0xb94>)
   b6060:	491f      	ldr	r1, [pc, #124]	; (b60e0 <loop+0xb98>)
   b6062:	6813      	ldr	r3, [r2, #0]
   b6064:	68a0      	ldr	r0, [r4, #8]
   b6066:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b606a:	491e      	ldr	r1, [pc, #120]	; (b60e4 <loop+0xb9c>)
   b606c:	68e0      	ldr	r0, [r4, #12]
   b606e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        posicion++;
   b6072:	3301      	adds	r3, #1
   b6074:	6013      	str	r3, [r2, #0]
        if (bucle) {
   b6076:	4b1c      	ldr	r3, [pc, #112]	; (b60e8 <loop+0xba0>)
   b6078:	781b      	ldrb	r3, [r3, #0]
   b607a:	2b00      	cmp	r3, #0
   b607c:	f43f af74 	beq.w	b5f68 <loop+0xa20>
          tam_bucle++;
   b6080:	4a1a      	ldr	r2, [pc, #104]	; (b60ec <loop+0xba4>)
   b6082:	6813      	ldr	r3, [r2, #0]
   b6084:	3301      	adds	r3, #1
   b6086:	6013      	str	r3, [r2, #0]
   b6088:	e76e      	b.n	b5f68 <loop+0xa20>
   b608a:	bf00      	nop
   b608c:	000ba875 	.word	0x000ba875
   b6090:	2003cf45 	.word	0x2003cf45
   b6094:	000ba7c5 	.word	0x000ba7c5
   b6098:	000ba886 	.word	0x000ba886
   b609c:	000ba88a 	.word	0x000ba88a
   b60a0:	000ba8bc 	.word	0x000ba8bc
   b60a4:	2003cf54 	.word	0x2003cf54
   b60a8:	000ba8cb 	.word	0x000ba8cb
   b60ac:	000ba8d0 	.word	0x000ba8d0
   b60b0:	000ba8ef 	.word	0x000ba8ef
   b60b4:	2003cf44 	.word	0x2003cf44
   b60b8:	000ba8fe 	.word	0x000ba8fe
   b60bc:	000ba903 	.word	0x000ba903
   b60c0:	000ba74b 	.word	0x000ba74b
   b60c4:	000ba6af 	.word	0x000ba6af
   b60c8:	2003cf58 	.word	0x2003cf58
   b60cc:	2003dc74 	.word	0x2003dc74
   b60d0:	000ba6da 	.word	0x000ba6da
   b60d4:	000ba994 	.word	0x000ba994
   b60d8:	000ba6e8 	.word	0x000ba6e8
   b60dc:	2003dc64 	.word	0x2003dc64
   b60e0:	2003d934 	.word	0x2003d934
   b60e4:	2003d5ec 	.word	0x2003d5ec
   b60e8:	2003d530 	.word	0x2003d530
   b60ec:	2003dc80 	.word	0x2003dc80
        if (!bucle) {
   b60f0:	f8df 912c 	ldr.w	r9, [pc, #300]	; b6220 <loop+0xcd8>
   b60f4:	f899 8000 	ldrb.w	r8, [r9]
   b60f8:	f1b8 0f00 	cmp.w	r8, #0
   b60fc:	d11f      	bne.n	b613e <loop+0xbf6>
          Serial.println("Loop");
   b60fe:	f003 faa3 	bl	b9648 <_Z16_fetch_usbserialv>
   b6102:	4941      	ldr	r1, [pc, #260]	; (b6208 <loop+0xcc0>)
   b6104:	f003 f89f 	bl	b9246 <_ZN5Print7printlnEPKc>
          showBitmap(3,0,"Loop");
   b6108:	493f      	ldr	r1, [pc, #252]	; (b6208 <loop+0xcc0>)
   b610a:	a8c6      	add	r0, sp, #792	; 0x318
   b610c:	f002 ffcd 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6110:	aac6      	add	r2, sp, #792	; 0x318
   b6112:	4641      	mov	r1, r8
   b6114:	2003      	movs	r0, #3
   b6116:	f7fe fc07 	bl	b4928 <_Z10showBitmapii6String>
   b611a:	a8c6      	add	r0, sp, #792	; 0x318
   b611c:	f002 ff7a 	bl	b9014 <_ZN6StringD1Ev>
          notas[posicion] = -1;
   b6120:	4a3a      	ldr	r2, [pc, #232]	; (b620c <loop+0xcc4>)
   b6122:	493b      	ldr	r1, [pc, #236]	; (b6210 <loop+0xcc8>)
   b6124:	6813      	ldr	r3, [r2, #0]
          bucle = true;
   b6126:	f889 6000 	strb.w	r6, [r9]
          notas[posicion] = -1;
   b612a:	f04f 30ff 	mov.w	r0, #4294967295
   b612e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
          duraciones[posicion] = 0;
   b6132:	4938      	ldr	r1, [pc, #224]	; (b6214 <loop+0xccc>)
   b6134:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
          posicion++;
   b6138:	3301      	adds	r3, #1
   b613a:	6013      	str	r3, [r2, #0]
          bucle = true;
   b613c:	e714      	b.n	b5f68 <loop+0xa20>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b613e:	f003 fa83 	bl	b9648 <_Z16_fetch_usbserialv>
   b6142:	4935      	ldr	r1, [pc, #212]	; (b6218 <loop+0xcd0>)
          Serial.println("Loop sin comenzar o sin contenido");
   b6144:	f003 f87f 	bl	b9246 <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b6148:	4934      	ldr	r1, [pc, #208]	; (b621c <loop+0xcd4>)
   b614a:	a8c6      	add	r0, sp, #792	; 0x318
   b614c:	f002 ffad 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6150:	aac6      	add	r2, sp, #792	; 0x318
   b6152:	2102      	movs	r1, #2
        showBitmap(2,0,"");
   b6154:	2002      	movs	r0, #2
   b6156:	e71b      	b.n	b5f90 <loop+0xa48>
        if (bucle && tam_bucle>0) {
   b6158:	4e31      	ldr	r6, [pc, #196]	; (b6220 <loop+0xcd8>)
   b615a:	7833      	ldrb	r3, [r6, #0]
   b615c:	2b00      	cmp	r3, #0
   b615e:	d040      	beq.n	b61e2 <loop+0xc9a>
   b6160:	4d30      	ldr	r5, [pc, #192]	; (b6224 <loop+0xcdc>)
   b6162:	682b      	ldr	r3, [r5, #0]
   b6164:	2b00      	cmp	r3, #0
   b6166:	dd3c      	ble.n	b61e2 <loop+0xc9a>
          Serial.println("END Loop");
   b6168:	f003 fa6e 	bl	b9648 <_Z16_fetch_usbserialv>
   b616c:	492e      	ldr	r1, [pc, #184]	; (b6228 <loop+0xce0>)
   b616e:	f003 f86a 	bl	b9246 <_ZN5Print7printlnEPKc>
          showBitmap(3,0,String(tagInfo[2]+2)+" iteraciones");
   b6172:	68a1      	ldr	r1, [r4, #8]
   b6174:	220a      	movs	r2, #10
   b6176:	3102      	adds	r1, #2
   b6178:	a8be      	add	r0, sp, #760	; 0x2f8
   b617a:	f002 ffd6 	bl	b912a <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b617e:	a9be      	add	r1, sp, #760	; 0x2f8
   b6180:	a8c2      	add	r0, sp, #776	; 0x308
   b6182:	f002 ffb5 	bl	b90f0 <_ZN6StringC1ERKS_>
   b6186:	4929      	ldr	r1, [pc, #164]	; (b622c <loop+0xce4>)
   b6188:	a8c2      	add	r0, sp, #776	; 0x308
   b618a:	f003 f804 	bl	b9196 <_ZplRK15StringSumHelperPKc>
   b618e:	4601      	mov	r1, r0
   b6190:	a8c6      	add	r0, sp, #792	; 0x318
   b6192:	f002 ffad 	bl	b90f0 <_ZN6StringC1ERKS_>
   b6196:	aac6      	add	r2, sp, #792	; 0x318
   b6198:	2100      	movs	r1, #0
   b619a:	2003      	movs	r0, #3
   b619c:	f7fe fbc4 	bl	b4928 <_Z10showBitmapii6String>
   b61a0:	a8c6      	add	r0, sp, #792	; 0x318
   b61a2:	f002 ff37 	bl	b9014 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b61a6:	a8c2      	add	r0, sp, #776	; 0x308
   b61a8:	f002 ff34 	bl	b9014 <_ZN6StringD1Ev>
   b61ac:	a8be      	add	r0, sp, #760	; 0x2f8
   b61ae:	f002 ff31 	bl	b9014 <_ZN6StringD1Ev>
          notas[posicion] = -2;
   b61b2:	4816      	ldr	r0, [pc, #88]	; (b620c <loop+0xcc4>)
   b61b4:	4a16      	ldr	r2, [pc, #88]	; (b6210 <loop+0xcc8>)
   b61b6:	6803      	ldr	r3, [r0, #0]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b61b8:	f8df c058 	ldr.w	ip, [pc, #88]	; b6214 <loop+0xccc>
          notas[posicion] = -2;
   b61bc:	f06f 0101 	mvn.w	r1, #1
   b61c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b61c4:	682a      	ldr	r2, [r5, #0]
   b61c6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b61ca:	68a1      	ldr	r1, [r4, #8]
   b61cc:	3201      	adds	r2, #1
   b61ce:	1a9a      	subs	r2, r3, r2
          posicion++;
   b61d0:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b61d2:	3102      	adds	r1, #2
          posicion++;
   b61d4:	6003      	str	r3, [r0, #0]
          bucle = false;
   b61d6:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b61d8:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
          bucle = false;
   b61dc:	7033      	strb	r3, [r6, #0]
          tam_bucle = 0;
   b61de:	602b      	str	r3, [r5, #0]
   b61e0:	e6c2      	b.n	b5f68 <loop+0xa20>
          Serial.println("Loop sin comenzar o sin contenido");
   b61e2:	f003 fa31 	bl	b9648 <_Z16_fetch_usbserialv>
   b61e6:	4912      	ldr	r1, [pc, #72]	; (b6230 <loop+0xce8>)
   b61e8:	e7ac      	b.n	b6144 <loop+0xbfc>
      if ( tagInfo[0] != -1 ) {
   b61ea:	3501      	adds	r5, #1
   b61ec:	f43f aebc 	beq.w	b5f68 <loop+0xa20>
        Serial.println("Tarjeta inválida para este modo");
   b61f0:	f003 fa2a 	bl	b9648 <_Z16_fetch_usbserialv>
   b61f4:	490f      	ldr	r1, [pc, #60]	; (b6234 <loop+0xcec>)
   b61f6:	f003 f826 	bl	b9246 <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b61fa:	4908      	ldr	r1, [pc, #32]	; (b621c <loop+0xcd4>)
   b61fc:	a8c6      	add	r0, sp, #792	; 0x318
   b61fe:	f002 ff54 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6202:	aac6      	add	r2, sp, #792	; 0x318
   b6204:	2100      	movs	r1, #0
   b6206:	e7a5      	b.n	b6154 <loop+0xc0c>
   b6208:	000ba9e4 	.word	0x000ba9e4
   b620c:	2003dc64 	.word	0x2003dc64
   b6210:	2003d934 	.word	0x2003d934
   b6214:	2003d5ec 	.word	0x2003d5ec
   b6218:	000ba9ab 	.word	0x000ba9ab
   b621c:	000ba6af 	.word	0x000ba6af
   b6220:	2003d530 	.word	0x2003d530
   b6224:	2003dc80 	.word	0x2003dc80
   b6228:	000ba9e0 	.word	0x000ba9e0
   b622c:	000ba9e9 	.word	0x000ba9e9
   b6230:	000ba9f6 	.word	0x000ba9f6
   b6234:	000ba74b 	.word	0x000ba74b

000b6238 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b6238:	2305      	movs	r3, #5
}
   b623a:	b570      	push	{r4, r5, r6, lr}
   b623c:	461a      	mov	r2, r3
   b623e:	2104      	movs	r1, #4
   b6240:	48a9      	ldr	r0, [pc, #676]	; (b64e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
                        "2#1#0","2#2#0","2#2#1"};
   b6242:	4daa      	ldr	r5, [pc, #680]	; (b64ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b6244:	4eaa      	ldr	r6, [pc, #680]	; (b64f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b6246:	f002 fa37 	bl	b86b8 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b624a:	4baa      	ldr	r3, [pc, #680]	; (b64f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
Adafruit_SSD1306 display(-1);
   b624c:	48aa      	ldr	r0, [pc, #680]	; (b64f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b624e:	2400      	movs	r4, #0
   b6250:	601c      	str	r4, [r3, #0]
   b6252:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b6256:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b625a:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b625e:	f04f 31ff 	mov.w	r1, #4294967295
   b6262:	f001 fe33 	bl	b7ecc <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b6266:	49a5      	ldr	r1, [pc, #660]	; (b64fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b6268:	48a5      	ldr	r0, [pc, #660]	; (b6500 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b626a:	f002 ff1e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b626e:	49a3      	ldr	r1, [pc, #652]	; (b64fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b6270:	48a4      	ldr	r0, [pc, #656]	; (b6504 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b6272:	f002 ff1a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[12] = { "0#2#0","0#3#0","0#4#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5" };
   b6276:	49a4      	ldr	r1, [pc, #656]	; (b6508 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b6278:	48a4      	ldr	r0, [pc, #656]	; (b650c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b627a:	f002 ff16 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b627e:	49a4      	ldr	r1, [pc, #656]	; (b6510 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b6280:	48a4      	ldr	r0, [pc, #656]	; (b6514 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b6282:	f002 ff12 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6286:	49a4      	ldr	r1, [pc, #656]	; (b6518 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b6288:	48a4      	ldr	r0, [pc, #656]	; (b651c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b628a:	f002 ff0e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b628e:	49a4      	ldr	r1, [pc, #656]	; (b6520 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b6290:	48a4      	ldr	r0, [pc, #656]	; (b6524 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b6292:	f002 ff0a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6296:	49a4      	ldr	r1, [pc, #656]	; (b6528 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b6298:	48a4      	ldr	r0, [pc, #656]	; (b652c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b629a:	f002 ff06 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b629e:	49a4      	ldr	r1, [pc, #656]	; (b6530 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b62a0:	48a4      	ldr	r0, [pc, #656]	; (b6534 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b62a2:	f002 ff02 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62a6:	49a4      	ldr	r1, [pc, #656]	; (b6538 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b62a8:	48a4      	ldr	r0, [pc, #656]	; (b653c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b62aa:	f002 fefe 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62ae:	49a4      	ldr	r1, [pc, #656]	; (b6540 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b62b0:	48a4      	ldr	r0, [pc, #656]	; (b6544 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b62b2:	f002 fefa 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62b6:	49a4      	ldr	r1, [pc, #656]	; (b6548 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b62b8:	48a4      	ldr	r0, [pc, #656]	; (b654c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b62ba:	f002 fef6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62be:	49a4      	ldr	r1, [pc, #656]	; (b6550 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b62c0:	48a4      	ldr	r0, [pc, #656]	; (b6554 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b62c2:	f002 fef2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62c6:	49a4      	ldr	r1, [pc, #656]	; (b6558 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b62c8:	48a4      	ldr	r0, [pc, #656]	; (b655c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b62ca:	f002 feee 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62ce:	4988      	ldr	r1, [pc, #544]	; (b64f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b62d0:	48a3      	ldr	r0, [pc, #652]	; (b6560 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b62d2:	f002 feea 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b62d6:	49a3      	ldr	r1, [pc, #652]	; (b6564 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b62d8:	48a3      	ldr	r0, [pc, #652]	; (b6568 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b62da:	f002 fee6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62de:	49a3      	ldr	r1, [pc, #652]	; (b656c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b62e0:	48a3      	ldr	r0, [pc, #652]	; (b6570 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b62e2:	f002 fee2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62e6:	49a3      	ldr	r1, [pc, #652]	; (b6574 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b62e8:	48a3      	ldr	r0, [pc, #652]	; (b6578 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b62ea:	f002 fede 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62ee:	49a3      	ldr	r1, [pc, #652]	; (b657c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b62f0:	48a3      	ldr	r0, [pc, #652]	; (b6580 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b62f2:	f002 feda 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62f6:	49a3      	ldr	r1, [pc, #652]	; (b6584 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b62f8:	48a3      	ldr	r0, [pc, #652]	; (b6588 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b62fa:	f002 fed6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b62fe:	49a3      	ldr	r1, [pc, #652]	; (b658c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b6300:	48a3      	ldr	r0, [pc, #652]	; (b6590 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b6302:	f002 fed2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6306:	49a3      	ldr	r1, [pc, #652]	; (b6594 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b6308:	48a3      	ldr	r0, [pc, #652]	; (b6598 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b630a:	f002 fece 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b630e:	49a3      	ldr	r1, [pc, #652]	; (b659c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b6310:	48a3      	ldr	r0, [pc, #652]	; (b65a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b6312:	f002 feca 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6316:	49a3      	ldr	r1, [pc, #652]	; (b65a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b6318:	48a3      	ldr	r0, [pc, #652]	; (b65a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b631a:	f002 fec6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b631e:	49a3      	ldr	r1, [pc, #652]	; (b65ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b6320:	48a3      	ldr	r0, [pc, #652]	; (b65b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b6322:	f002 fec2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6326:	49a3      	ldr	r1, [pc, #652]	; (b65b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b6328:	48a3      	ldr	r0, [pc, #652]	; (b65b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b632a:	f002 febe 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b632e:	49a3      	ldr	r1, [pc, #652]	; (b65bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b6330:	48a3      	ldr	r0, [pc, #652]	; (b65c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b6332:	f002 feba 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6336:	49a3      	ldr	r1, [pc, #652]	; (b65c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b6338:	48a3      	ldr	r0, [pc, #652]	; (b65c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b633a:	f002 feb6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b633e:	49a3      	ldr	r1, [pc, #652]	; (b65cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b6340:	48a3      	ldr	r0, [pc, #652]	; (b65d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b6342:	f002 feb2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6346:	49a3      	ldr	r1, [pc, #652]	; (b65d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b6348:	48a3      	ldr	r0, [pc, #652]	; (b65d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b634a:	f002 feae 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b634e:	49a3      	ldr	r1, [pc, #652]	; (b65dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b6350:	48a3      	ldr	r0, [pc, #652]	; (b65e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b6352:	f002 feaa 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6356:	49a3      	ldr	r1, [pc, #652]	; (b65e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b6358:	48a3      	ldr	r0, [pc, #652]	; (b65e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b635a:	f002 fea6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b635e:	49a3      	ldr	r1, [pc, #652]	; (b65ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b6360:	48a3      	ldr	r0, [pc, #652]	; (b65f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b6362:	f002 fea2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6366:	49a3      	ldr	r1, [pc, #652]	; (b65f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b6368:	48a3      	ldr	r0, [pc, #652]	; (b65f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b636a:	f002 fe9e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b636e:	49a3      	ldr	r1, [pc, #652]	; (b65fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b6370:	48a3      	ldr	r0, [pc, #652]	; (b6600 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b6372:	f002 fe9a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6376:	49a3      	ldr	r1, [pc, #652]	; (b6604 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b6378:	48a3      	ldr	r0, [pc, #652]	; (b6608 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b637a:	f002 fe96 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b637e:	49a3      	ldr	r1, [pc, #652]	; (b660c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b6380:	48a3      	ldr	r0, [pc, #652]	; (b6610 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b6382:	f002 fe92 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6386:	49a3      	ldr	r1, [pc, #652]	; (b6614 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b6388:	48a3      	ldr	r0, [pc, #652]	; (b6618 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b638a:	f002 fe8e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b638e:	49a3      	ldr	r1, [pc, #652]	; (b661c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b6390:	48a3      	ldr	r0, [pc, #652]	; (b6620 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b6392:	f002 fe8a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6396:	49a3      	ldr	r1, [pc, #652]	; (b6624 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b6398:	48a3      	ldr	r0, [pc, #652]	; (b6628 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b639a:	f002 fe86 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b639e:	49a3      	ldr	r1, [pc, #652]	; (b662c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b63a0:	48a3      	ldr	r0, [pc, #652]	; (b6630 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b63a2:	f002 fe82 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63a6:	49a3      	ldr	r1, [pc, #652]	; (b6634 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b63a8:	48a3      	ldr	r0, [pc, #652]	; (b6638 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b63aa:	f002 fe7e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63ae:	49a3      	ldr	r1, [pc, #652]	; (b663c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b63b0:	48a3      	ldr	r0, [pc, #652]	; (b6640 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b63b2:	f002 fe7a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b63b6:	49a3      	ldr	r1, [pc, #652]	; (b6644 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b63b8:	48a3      	ldr	r0, [pc, #652]	; (b6648 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b63ba:	f002 fe76 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63be:	49a3      	ldr	r1, [pc, #652]	; (b664c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b63c0:	48a3      	ldr	r0, [pc, #652]	; (b6650 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b63c2:	f002 fe72 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63c6:	49a3      	ldr	r1, [pc, #652]	; (b6654 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b63c8:	48a3      	ldr	r0, [pc, #652]	; (b6658 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b63ca:	f002 fe6e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63ce:	49a3      	ldr	r1, [pc, #652]	; (b665c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b63d0:	48a3      	ldr	r0, [pc, #652]	; (b6660 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b63d2:	f002 fe6a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63d6:	49a3      	ldr	r1, [pc, #652]	; (b6664 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b63d8:	48a3      	ldr	r0, [pc, #652]	; (b6668 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b63da:	f002 fe66 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63de:	49a3      	ldr	r1, [pc, #652]	; (b666c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b63e0:	48a3      	ldr	r0, [pc, #652]	; (b6670 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b63e2:	f002 fe62 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63e6:	49a3      	ldr	r1, [pc, #652]	; (b6674 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b63e8:	48a3      	ldr	r0, [pc, #652]	; (b6678 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b63ea:	f002 fe5e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63ee:	49a3      	ldr	r1, [pc, #652]	; (b667c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b63f0:	48a3      	ldr	r0, [pc, #652]	; (b6680 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b63f2:	f002 fe5a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63f6:	49a3      	ldr	r1, [pc, #652]	; (b6684 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b63f8:	48a3      	ldr	r0, [pc, #652]	; (b6688 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b63fa:	f002 fe56 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b63fe:	49a3      	ldr	r1, [pc, #652]	; (b668c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b6400:	48a3      	ldr	r0, [pc, #652]	; (b6690 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b6402:	f002 fe52 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6406:	49a3      	ldr	r1, [pc, #652]	; (b6694 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b6408:	48a3      	ldr	r0, [pc, #652]	; (b6698 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b640a:	f002 fe4e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b640e:	49a3      	ldr	r1, [pc, #652]	; (b669c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b6410:	48a3      	ldr	r0, [pc, #652]	; (b66a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b6412:	f002 fe4a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6416:	49a3      	ldr	r1, [pc, #652]	; (b66a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b6418:	48a3      	ldr	r0, [pc, #652]	; (b66a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b641a:	f002 fe46 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b641e:	49a3      	ldr	r1, [pc, #652]	; (b66ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b6420:	48a3      	ldr	r0, [pc, #652]	; (b66b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b6422:	f002 fe42 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6426:	49a3      	ldr	r1, [pc, #652]	; (b66b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b6428:	48a3      	ldr	r0, [pc, #652]	; (b66b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b642a:	f002 fe3e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b642e:	49a3      	ldr	r1, [pc, #652]	; (b66bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b6430:	48a3      	ldr	r0, [pc, #652]	; (b66c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b6432:	f002 fe3a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6436:	49a3      	ldr	r1, [pc, #652]	; (b66c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b6438:	48a3      	ldr	r0, [pc, #652]	; (b66c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b643a:	f002 fe36 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b643e:	49a3      	ldr	r1, [pc, #652]	; (b66cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b6440:	48a3      	ldr	r0, [pc, #652]	; (b66d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b6442:	f002 fe32 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6446:	49a3      	ldr	r1, [pc, #652]	; (b66d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b6448:	48a3      	ldr	r0, [pc, #652]	; (b66d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b644a:	f002 fe2e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b644e:	49a3      	ldr	r1, [pc, #652]	; (b66dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b6450:	48a3      	ldr	r0, [pc, #652]	; (b66e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b6452:	f002 fe2a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6456:	49a3      	ldr	r1, [pc, #652]	; (b66e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b6458:	48a3      	ldr	r0, [pc, #652]	; (b66e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b645a:	f002 fe26 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b645e:	49a3      	ldr	r1, [pc, #652]	; (b66ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b6460:	48a3      	ldr	r0, [pc, #652]	; (b66f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b6462:	f002 fe22 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6466:	49a3      	ldr	r1, [pc, #652]	; (b66f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b6468:	48a3      	ldr	r0, [pc, #652]	; (b66f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b646a:	f002 fe1e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b646e:	49a3      	ldr	r1, [pc, #652]	; (b66fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b6470:	48a3      	ldr	r0, [pc, #652]	; (b6700 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c8>)
   b6472:	f002 fe1a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6476:	49a3      	ldr	r1, [pc, #652]	; (b6704 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4cc>)
   b6478:	48a3      	ldr	r0, [pc, #652]	; (b6708 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d0>)
   b647a:	f002 fe16 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b647e:	49a3      	ldr	r1, [pc, #652]	; (b670c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d4>)
   b6480:	48a3      	ldr	r0, [pc, #652]	; (b6710 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d8>)
   b6482:	f002 fe12 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6486:	49a3      	ldr	r1, [pc, #652]	; (b6714 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4dc>)
   b6488:	48a3      	ldr	r0, [pc, #652]	; (b6718 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e0>)
   b648a:	f002 fe0e 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b648e:	49a3      	ldr	r1, [pc, #652]	; (b671c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e4>)
   b6490:	48a3      	ldr	r0, [pc, #652]	; (b6720 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e8>)
   b6492:	f002 fe0a 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6496:	49a3      	ldr	r1, [pc, #652]	; (b6724 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ec>)
   b6498:	48a3      	ldr	r0, [pc, #652]	; (b6728 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f0>)
   b649a:	f002 fe06 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b649e:	49a3      	ldr	r1, [pc, #652]	; (b672c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f4>)
   b64a0:	48a3      	ldr	r0, [pc, #652]	; (b6730 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f8>)
   b64a2:	f002 fe02 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64a6:	49a3      	ldr	r1, [pc, #652]	; (b6734 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4fc>)
   b64a8:	48a3      	ldr	r0, [pc, #652]	; (b6738 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x500>)
   b64aa:	f002 fdfe 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64ae:	49a3      	ldr	r1, [pc, #652]	; (b673c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x504>)
   b64b0:	48a3      	ldr	r0, [pc, #652]	; (b6740 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x508>)
   b64b2:	f002 fdfa 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64b6:	49a3      	ldr	r1, [pc, #652]	; (b6744 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x50c>)
   b64b8:	48a3      	ldr	r0, [pc, #652]	; (b6748 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x510>)
   b64ba:	f002 fdf6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64be:	49a3      	ldr	r1, [pc, #652]	; (b674c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x514>)
   b64c0:	48a3      	ldr	r0, [pc, #652]	; (b6750 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x518>)
   b64c2:	f002 fdf2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64c6:	490a      	ldr	r1, [pc, #40]	; (b64f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b64c8:	48a2      	ldr	r0, [pc, #648]	; (b6754 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x51c>)
   b64ca:	f002 fdee 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b64ce:	49a2      	ldr	r1, [pc, #648]	; (b6758 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x520>)
   b64d0:	48a2      	ldr	r0, [pc, #648]	; (b675c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x524>)
   b64d2:	f002 fdea 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64d6:	49a2      	ldr	r1, [pc, #648]	; (b6760 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x528>)
   b64d8:	48a2      	ldr	r0, [pc, #648]	; (b6764 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x52c>)
   b64da:	f002 fde6 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64de:	49a2      	ldr	r1, [pc, #648]	; (b6768 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x530>)
   b64e0:	48a2      	ldr	r0, [pc, #648]	; (b676c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x534>)
   b64e2:	f002 fde2 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b64e6:	e143      	b.n	b6770 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x538>
   b64e8:	2003d91c 	.word	0x2003d91c
   b64ec:	2003dfa4 	.word	0x2003dfa4
   b64f0:	000ba6af 	.word	0x000ba6af
   b64f4:	2003cf58 	.word	0x2003cf58
   b64f8:	2003d57c 	.word	0x2003d57c
   b64fc:	000baa18 	.word	0x000baa18
   b6500:	2003d5cc 	.word	0x2003d5cc
   b6504:	2003d5dc 	.word	0x2003d5dc
   b6508:	000baa72 	.word	0x000baa72
   b650c:	2003e3c4 	.word	0x2003e3c4
   b6510:	000baa86 	.word	0x000baa86
   b6514:	2003e3d4 	.word	0x2003e3d4
   b6518:	000babb6 	.word	0x000babb6
   b651c:	2003e3e4 	.word	0x2003e3e4
   b6520:	000baa1a 	.word	0x000baa1a
   b6524:	2003e3f4 	.word	0x2003e3f4
   b6528:	000baa22 	.word	0x000baa22
   b652c:	2003e404 	.word	0x2003e404
   b6530:	000baa2a 	.word	0x000baa2a
   b6534:	2003e414 	.word	0x2003e414
   b6538:	000baa32 	.word	0x000baa32
   b653c:	2003e424 	.word	0x2003e424
   b6540:	000baa3a 	.word	0x000baa3a
   b6544:	2003e434 	.word	0x2003e434
   b6548:	000baa42 	.word	0x000baa42
   b654c:	2003e444 	.word	0x2003e444
   b6550:	000baa4a 	.word	0x000baa4a
   b6554:	2003e454 	.word	0x2003e454
   b6558:	000baa52 	.word	0x000baa52
   b655c:	2003e464 	.word	0x2003e464
   b6560:	2003e474 	.word	0x2003e474
   b6564:	000baa5a 	.word	0x000baa5a
   b6568:	2003e204 	.word	0x2003e204
   b656c:	000baa64 	.word	0x000baa64
   b6570:	2003e214 	.word	0x2003e214
   b6574:	000baa6e 	.word	0x000baa6e
   b6578:	2003e224 	.word	0x2003e224
   b657c:	000baa78 	.word	0x000baa78
   b6580:	2003e234 	.word	0x2003e234
   b6584:	000baa82 	.word	0x000baa82
   b6588:	2003e244 	.word	0x2003e244
   b658c:	000baa8c 	.word	0x000baa8c
   b6590:	2003e254 	.word	0x2003e254
   b6594:	000baa96 	.word	0x000baa96
   b6598:	2003e264 	.word	0x2003e264
   b659c:	000baaa0 	.word	0x000baaa0
   b65a0:	2003e274 	.word	0x2003e274
   b65a4:	000baaaa 	.word	0x000baaaa
   b65a8:	2003e284 	.word	0x2003e284
   b65ac:	000baab4 	.word	0x000baab4
   b65b0:	2003e294 	.word	0x2003e294
   b65b4:	000baabe 	.word	0x000baabe
   b65b8:	2003e2a4 	.word	0x2003e2a4
   b65bc:	000baac8 	.word	0x000baac8
   b65c0:	2003e2b4 	.word	0x2003e2b4
   b65c4:	000baad2 	.word	0x000baad2
   b65c8:	2003e2c4 	.word	0x2003e2c4
   b65cc:	000baadc 	.word	0x000baadc
   b65d0:	2003e2d4 	.word	0x2003e2d4
   b65d4:	000baae6 	.word	0x000baae6
   b65d8:	2003e2e4 	.word	0x2003e2e4
   b65dc:	000baaf0 	.word	0x000baaf0
   b65e0:	2003e2f4 	.word	0x2003e2f4
   b65e4:	000baafa 	.word	0x000baafa
   b65e8:	2003e304 	.word	0x2003e304
   b65ec:	000bab04 	.word	0x000bab04
   b65f0:	2003e314 	.word	0x2003e314
   b65f4:	000bab0e 	.word	0x000bab0e
   b65f8:	2003e324 	.word	0x2003e324
   b65fc:	000bab18 	.word	0x000bab18
   b6600:	2003e334 	.word	0x2003e334
   b6604:	000bab22 	.word	0x000bab22
   b6608:	2003e344 	.word	0x2003e344
   b660c:	000bab2c 	.word	0x000bab2c
   b6610:	2003e354 	.word	0x2003e354
   b6614:	000bab36 	.word	0x000bab36
   b6618:	2003e364 	.word	0x2003e364
   b661c:	000baa3e 	.word	0x000baa3e
   b6620:	2003e374 	.word	0x2003e374
   b6624:	000bab40 	.word	0x000bab40
   b6628:	2003e384 	.word	0x2003e384
   b662c:	000bab46 	.word	0x000bab46
   b6630:	2003e394 	.word	0x2003e394
   b6634:	000baa4e 	.word	0x000baa4e
   b6638:	2003e3a4 	.word	0x2003e3a4
   b663c:	000baa56 	.word	0x000baa56
   b6640:	2003e3b4 	.word	0x2003e3b4
   b6644:	000bab4c 	.word	0x000bab4c
   b6648:	2003e484 	.word	0x2003e484
   b664c:	000bab54 	.word	0x000bab54
   b6650:	2003e494 	.word	0x2003e494
   b6654:	000bab5c 	.word	0x000bab5c
   b6658:	2003e4a4 	.word	0x2003e4a4
   b665c:	000bab64 	.word	0x000bab64
   b6660:	2003e4b4 	.word	0x2003e4b4
   b6664:	000bab6c 	.word	0x000bab6c
   b6668:	2003e4c4 	.word	0x2003e4c4
   b666c:	000bab74 	.word	0x000bab74
   b6670:	2003e4d4 	.word	0x2003e4d4
   b6674:	000bab7c 	.word	0x000bab7c
   b6678:	2003e4e4 	.word	0x2003e4e4
   b667c:	000bab84 	.word	0x000bab84
   b6680:	2003e4f4 	.word	0x2003e4f4
   b6684:	000bab8c 	.word	0x000bab8c
   b6688:	2003e504 	.word	0x2003e504
   b668c:	000bab94 	.word	0x000bab94
   b6690:	2003e514 	.word	0x2003e514
   b6694:	000bab9c 	.word	0x000bab9c
   b6698:	2003e524 	.word	0x2003e524
   b669c:	000baba4 	.word	0x000baba4
   b66a0:	2003e534 	.word	0x2003e534
   b66a4:	000babac 	.word	0x000babac
   b66a8:	2003e544 	.word	0x2003e544
   b66ac:	000babb4 	.word	0x000babb4
   b66b0:	2003e554 	.word	0x2003e554
   b66b4:	000babbc 	.word	0x000babbc
   b66b8:	2003e564 	.word	0x2003e564
   b66bc:	000babc4 	.word	0x000babc4
   b66c0:	2003e574 	.word	0x2003e574
   b66c4:	000babcc 	.word	0x000babcc
   b66c8:	2003e584 	.word	0x2003e584
   b66cc:	000babd4 	.word	0x000babd4
   b66d0:	2003e594 	.word	0x2003e594
   b66d4:	000babdc 	.word	0x000babdc
   b66d8:	2003e5a4 	.word	0x2003e5a4
   b66dc:	000babe4 	.word	0x000babe4
   b66e0:	2003e5b4 	.word	0x2003e5b4
   b66e4:	000babec 	.word	0x000babec
   b66e8:	2003e5c4 	.word	0x2003e5c4
   b66ec:	000babf4 	.word	0x000babf4
   b66f0:	2003e5d4 	.word	0x2003e5d4
   b66f4:	000babfc 	.word	0x000babfc
   b66f8:	2003e5e4 	.word	0x2003e5e4
   b66fc:	000bac04 	.word	0x000bac04
   b6700:	2003e5f4 	.word	0x2003e5f4
   b6704:	000bac0c 	.word	0x000bac0c
   b6708:	2003e604 	.word	0x2003e604
   b670c:	000bac12 	.word	0x000bac12
   b6710:	2003e614 	.word	0x2003e614
   b6714:	000bac18 	.word	0x000bac18
   b6718:	2003e624 	.word	0x2003e624
   b671c:	000bac1e 	.word	0x000bac1e
   b6720:	2003e634 	.word	0x2003e634
   b6724:	000bac24 	.word	0x000bac24
   b6728:	2003e644 	.word	0x2003e644
   b672c:	000bac2a 	.word	0x000bac2a
   b6730:	2003e654 	.word	0x2003e654
   b6734:	000bac30 	.word	0x000bac30
   b6738:	2003e664 	.word	0x2003e664
   b673c:	000bac36 	.word	0x000bac36
   b6740:	2003e674 	.word	0x2003e674
   b6744:	000bac3c 	.word	0x000bac3c
   b6748:	2003e684 	.word	0x2003e684
   b674c:	000bac42 	.word	0x000bac42
   b6750:	2003e694 	.word	0x2003e694
   b6754:	2003e6a4 	.word	0x2003e6a4
   b6758:	000bac48 	.word	0x000bac48
   b675c:	2003e184 	.word	0x2003e184
   b6760:	000bac4e 	.word	0x000bac4e
   b6764:	2003e194 	.word	0x2003e194
   b6768:	000bac54 	.word	0x000bac54
   b676c:	2003e1a4 	.word	0x2003e1a4
   b6770:	497a      	ldr	r1, [pc, #488]	; (b695c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x724>)
   b6772:	487b      	ldr	r0, [pc, #492]	; (b6960 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x728>)
   b6774:	f002 fc99 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6778:	497a      	ldr	r1, [pc, #488]	; (b6964 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x72c>)
   b677a:	487b      	ldr	r0, [pc, #492]	; (b6968 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x730>)
   b677c:	f002 fc95 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6780:	497a      	ldr	r1, [pc, #488]	; (b696c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x734>)
   b6782:	487b      	ldr	r0, [pc, #492]	; (b6970 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x738>)
   b6784:	f002 fc91 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6788:	497a      	ldr	r1, [pc, #488]	; (b6974 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x73c>)
   b678a:	487b      	ldr	r0, [pc, #492]	; (b6978 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x740>)
   b678c:	f002 fc8d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6790:	497a      	ldr	r1, [pc, #488]	; (b697c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x744>)
   b6792:	487b      	ldr	r0, [pc, #492]	; (b6980 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x748>)
   b6794:	f002 fc89 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1"};
   b6798:	4970      	ldr	r1, [pc, #448]	; (b695c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x724>)
   b679a:	487a      	ldr	r0, [pc, #488]	; (b6984 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x74c>)
   b679c:	f002 fc85 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67a0:	4970      	ldr	r1, [pc, #448]	; (b6964 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x72c>)
   b67a2:	4879      	ldr	r0, [pc, #484]	; (b6988 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x750>)
   b67a4:	f002 fc81 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67a8:	4970      	ldr	r1, [pc, #448]	; (b696c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x734>)
   b67aa:	4878      	ldr	r0, [pc, #480]	; (b698c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x754>)
   b67ac:	f002 fc7d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67b0:	4970      	ldr	r1, [pc, #448]	; (b6974 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x73c>)
   b67b2:	4877      	ldr	r0, [pc, #476]	; (b6990 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x758>)
   b67b4:	f002 fc79 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67b8:	4976      	ldr	r1, [pc, #472]	; (b6994 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x75c>)
   b67ba:	4877      	ldr	r0, [pc, #476]	; (b6998 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x760>)
   b67bc:	f002 fc75 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67c0:	4976      	ldr	r1, [pc, #472]	; (b699c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x764>)
   b67c2:	4877      	ldr	r0, [pc, #476]	; (b69a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x768>)
   b67c4:	f002 fc71 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67c8:	4976      	ldr	r1, [pc, #472]	; (b69a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x76c>)
   b67ca:	4877      	ldr	r0, [pc, #476]	; (b69a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x770>)
   b67cc:	f002 fc6d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67d0:	4976      	ldr	r1, [pc, #472]	; (b69ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x774>)
   b67d2:	4877      	ldr	r0, [pc, #476]	; (b69b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x778>)
   b67d4:	f002 fc69 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67d8:	4976      	ldr	r1, [pc, #472]	; (b69b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x77c>)
   b67da:	4877      	ldr	r0, [pc, #476]	; (b69b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x780>)
   b67dc:	f002 fc65 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67e0:	4976      	ldr	r1, [pc, #472]	; (b69bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x784>)
   b67e2:	4877      	ldr	r0, [pc, #476]	; (b69c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x788>)
   b67e4:	f002 fc61 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67e8:	4976      	ldr	r1, [pc, #472]	; (b69c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x78c>)
   b67ea:	4877      	ldr	r0, [pc, #476]	; (b69c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x790>)
   b67ec:	f002 fc5d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67f0:	4976      	ldr	r1, [pc, #472]	; (b69cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x794>)
   b67f2:	4877      	ldr	r0, [pc, #476]	; (b69d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x798>)
   b67f4:	f002 fc59 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b67f8:	4976      	ldr	r1, [pc, #472]	; (b69d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x79c>)
   b67fa:	4877      	ldr	r0, [pc, #476]	; (b69d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7a0>)
   b67fc:	f002 fc55 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6800:	4976      	ldr	r1, [pc, #472]	; (b69dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7a4>)
   b6802:	4877      	ldr	r0, [pc, #476]	; (b69e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7a8>)
   b6804:	f002 fc51 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6808:	4976      	ldr	r1, [pc, #472]	; (b69e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7ac>)
   b680a:	4877      	ldr	r0, [pc, #476]	; (b69e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7b0>)
   b680c:	f002 fc4d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6810:	4976      	ldr	r1, [pc, #472]	; (b69ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7b4>)
   b6812:	4877      	ldr	r0, [pc, #476]	; (b69f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7b8>)
   b6814:	f002 fc49 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6818:	4976      	ldr	r1, [pc, #472]	; (b69f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7bc>)
   b681a:	4877      	ldr	r0, [pc, #476]	; (b69f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7c0>)
   b681c:	f002 fc45 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6820:	4976      	ldr	r1, [pc, #472]	; (b69fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7c4>)
   b6822:	4877      	ldr	r0, [pc, #476]	; (b6a00 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7c8>)
   b6824:	f002 fc41 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6828:	4976      	ldr	r1, [pc, #472]	; (b6a04 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7cc>)
   b682a:	4877      	ldr	r0, [pc, #476]	; (b6a08 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7d0>)
   b682c:	f002 fc3d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6830:	4976      	ldr	r1, [pc, #472]	; (b6a0c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7d4>)
   b6832:	4877      	ldr	r0, [pc, #476]	; (b6a10 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7d8>)
   b6834:	f002 fc39 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6838:	4976      	ldr	r1, [pc, #472]	; (b6a14 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7dc>)
   b683a:	4877      	ldr	r0, [pc, #476]	; (b6a18 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e0>)
   b683c:	f002 fc35 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6840:	4976      	ldr	r1, [pc, #472]	; (b6a1c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e4>)
   b6842:	4877      	ldr	r0, [pc, #476]	; (b6a20 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e8>)
   b6844:	f002 fc31 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6848:	4976      	ldr	r1, [pc, #472]	; (b6a24 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7ec>)
   b684a:	4877      	ldr	r0, [pc, #476]	; (b6a28 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f0>)
   b684c:	f002 fc2d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6850:	4976      	ldr	r1, [pc, #472]	; (b6a2c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f4>)
   b6852:	4877      	ldr	r0, [pc, #476]	; (b6a30 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f8>)
   b6854:	f002 fc29 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6858:	4976      	ldr	r1, [pc, #472]	; (b6a34 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7fc>)
   b685a:	4877      	ldr	r0, [pc, #476]	; (b6a38 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x800>)
   b685c:	f002 fc25 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6860:	4976      	ldr	r1, [pc, #472]	; (b6a3c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x804>)
   b6862:	4877      	ldr	r0, [pc, #476]	; (b6a40 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x808>)
   b6864:	f002 fc21 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6868:	4976      	ldr	r1, [pc, #472]	; (b6a44 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x80c>)
   b686a:	4877      	ldr	r0, [pc, #476]	; (b6a48 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x810>)
   b686c:	f002 fc1d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6870:	4976      	ldr	r1, [pc, #472]	; (b6a4c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x814>)
   b6872:	4877      	ldr	r0, [pc, #476]	; (b6a50 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x818>)
   b6874:	f002 fc19 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6878:	4976      	ldr	r1, [pc, #472]	; (b6a54 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x81c>)
   b687a:	4877      	ldr	r0, [pc, #476]	; (b6a58 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x820>)
   b687c:	f002 fc15 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6880:	4976      	ldr	r1, [pc, #472]	; (b6a5c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x824>)
   b6882:	4877      	ldr	r0, [pc, #476]	; (b6a60 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x828>)
   b6884:	f002 fc11 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6888:	4976      	ldr	r1, [pc, #472]	; (b6a64 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x82c>)
   b688a:	4877      	ldr	r0, [pc, #476]	; (b6a68 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x830>)
   b688c:	f002 fc0d 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6890:	4976      	ldr	r1, [pc, #472]	; (b6a6c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x834>)
   b6892:	4877      	ldr	r0, [pc, #476]	; (b6a70 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x838>)
   b6894:	f002 fc09 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6898:	4976      	ldr	r1, [pc, #472]	; (b6a74 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x83c>)
   b689a:	4877      	ldr	r0, [pc, #476]	; (b6a78 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x840>)
   b689c:	f002 fc05 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68a0:	4976      	ldr	r1, [pc, #472]	; (b6a7c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x844>)
   b68a2:	4877      	ldr	r0, [pc, #476]	; (b6a80 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x848>)
   b68a4:	f002 fc01 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68a8:	4976      	ldr	r1, [pc, #472]	; (b6a84 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x84c>)
   b68aa:	4877      	ldr	r0, [pc, #476]	; (b6a88 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x850>)
   b68ac:	f002 fbfd 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68b0:	4976      	ldr	r1, [pc, #472]	; (b6a8c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x854>)
   b68b2:	4877      	ldr	r0, [pc, #476]	; (b6a90 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x858>)
   b68b4:	f002 fbf9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68b8:	4976      	ldr	r1, [pc, #472]	; (b6a94 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x85c>)
   b68ba:	4877      	ldr	r0, [pc, #476]	; (b6a98 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x860>)
   b68bc:	f002 fbf5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68c0:	4976      	ldr	r1, [pc, #472]	; (b6a9c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x864>)
   b68c2:	4877      	ldr	r0, [pc, #476]	; (b6aa0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x868>)
   b68c4:	f002 fbf1 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68c8:	4976      	ldr	r1, [pc, #472]	; (b6aa4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x86c>)
   b68ca:	4877      	ldr	r0, [pc, #476]	; (b6aa8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x870>)
   b68cc:	f002 fbed 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68d0:	4976      	ldr	r1, [pc, #472]	; (b6aac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x874>)
   b68d2:	4877      	ldr	r0, [pc, #476]	; (b6ab0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x878>)
   b68d4:	f002 fbe9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68d8:	4976      	ldr	r1, [pc, #472]	; (b6ab4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x87c>)
   b68da:	4877      	ldr	r0, [pc, #476]	; (b6ab8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x880>)
   b68dc:	f002 fbe5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68e0:	4976      	ldr	r1, [pc, #472]	; (b6abc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x884>)
   b68e2:	4877      	ldr	r0, [pc, #476]	; (b6ac0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x888>)
   b68e4:	f002 fbe1 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68e8:	4976      	ldr	r1, [pc, #472]	; (b6ac4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x88c>)
   b68ea:	4877      	ldr	r0, [pc, #476]	; (b6ac8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x890>)
   b68ec:	f002 fbdd 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68f0:	4976      	ldr	r1, [pc, #472]	; (b6acc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x894>)
   b68f2:	4877      	ldr	r0, [pc, #476]	; (b6ad0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x898>)
   b68f4:	f002 fbd9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b68f8:	4976      	ldr	r1, [pc, #472]	; (b6ad4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x89c>)
   b68fa:	4877      	ldr	r0, [pc, #476]	; (b6ad8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a0>)
   b68fc:	f002 fbd5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6900:	4976      	ldr	r1, [pc, #472]	; (b6adc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a4>)
   b6902:	4877      	ldr	r0, [pc, #476]	; (b6ae0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a8>)
   b6904:	f002 fbd1 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6908:	4976      	ldr	r1, [pc, #472]	; (b6ae4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8ac>)
   b690a:	4877      	ldr	r0, [pc, #476]	; (b6ae8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b0>)
   b690c:	f002 fbcd 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6910:	4976      	ldr	r1, [pc, #472]	; (b6aec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b4>)
   b6912:	4877      	ldr	r0, [pc, #476]	; (b6af0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b8>)
   b6914:	f002 fbc9 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6918:	4976      	ldr	r1, [pc, #472]	; (b6af4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8bc>)
   b691a:	4877      	ldr	r0, [pc, #476]	; (b6af8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c0>)
   b691c:	f002 fbc5 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6920:	4976      	ldr	r1, [pc, #472]	; (b6afc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c4>)
   b6922:	4877      	ldr	r0, [pc, #476]	; (b6b00 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c8>)
   b6924:	f002 fbc1 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6928:	1928      	adds	r0, r5, r4
   b692a:	4631      	mov	r1, r6
   b692c:	3410      	adds	r4, #16
   b692e:	f002 fbbc 	bl	b90aa <_ZN6StringC1EPK19__FlashStringHelper>
   b6932:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b6936:	d1f7      	bne.n	b6928 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x6f0>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6938:	2208      	movs	r2, #8
   b693a:	4872      	ldr	r0, [pc, #456]	; (b6b04 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8cc>)
   b693c:	2110      	movs	r1, #16
   b693e:	f000 fcfa 	bl	b7336 <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6942:	4b71      	ldr	r3, [pc, #452]	; (b6b08 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8d0>)
   b6944:	2200      	movs	r2, #0
   b6946:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b694a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b694e:	609a      	str	r2, [r3, #8]
   b6950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6954:	2002      	movs	r0, #2
   b6956:	f002 b93b 	b.w	b8bd0 <set_system_mode>
   b695a:	bf00      	nop
   b695c:	000bac5a 	.word	0x000bac5a
   b6960:	2003e1b4 	.word	0x2003e1b4
   b6964:	000bac60 	.word	0x000bac60
   b6968:	2003e1c4 	.word	0x2003e1c4
   b696c:	000bac66 	.word	0x000bac66
   b6970:	2003e1d4 	.word	0x2003e1d4
   b6974:	000bac6c 	.word	0x000bac6c
   b6978:	2003e1e4 	.word	0x2003e1e4
   b697c:	000ba6af 	.word	0x000ba6af
   b6980:	2003e1f4 	.word	0x2003e1f4
   b6984:	2003dc84 	.word	0x2003dc84
   b6988:	2003dc94 	.word	0x2003dc94
   b698c:	2003dca4 	.word	0x2003dca4
   b6990:	2003dcb4 	.word	0x2003dcb4
   b6994:	000baa5a 	.word	0x000baa5a
   b6998:	2003dcc4 	.word	0x2003dcc4
   b699c:	000baa64 	.word	0x000baa64
   b69a0:	2003dcd4 	.word	0x2003dcd4
   b69a4:	000baa6e 	.word	0x000baa6e
   b69a8:	2003dce4 	.word	0x2003dce4
   b69ac:	000baa78 	.word	0x000baa78
   b69b0:	2003dcf4 	.word	0x2003dcf4
   b69b4:	000baa82 	.word	0x000baa82
   b69b8:	2003dd04 	.word	0x2003dd04
   b69bc:	000baa8c 	.word	0x000baa8c
   b69c0:	2003dd14 	.word	0x2003dd14
   b69c4:	000baa96 	.word	0x000baa96
   b69c8:	2003dd24 	.word	0x2003dd24
   b69cc:	000baaa0 	.word	0x000baaa0
   b69d0:	2003dd34 	.word	0x2003dd34
   b69d4:	000baadc 	.word	0x000baadc
   b69d8:	2003dd44 	.word	0x2003dd44
   b69dc:	000baae6 	.word	0x000baae6
   b69e0:	2003dd54 	.word	0x2003dd54
   b69e4:	000baaf0 	.word	0x000baaf0
   b69e8:	2003dd64 	.word	0x2003dd64
   b69ec:	000baafa 	.word	0x000baafa
   b69f0:	2003dd74 	.word	0x2003dd74
   b69f4:	000bab04 	.word	0x000bab04
   b69f8:	2003dd84 	.word	0x2003dd84
   b69fc:	000bab0e 	.word	0x000bab0e
   b6a00:	2003dd94 	.word	0x2003dd94
   b6a04:	000baa3e 	.word	0x000baa3e
   b6a08:	2003dda4 	.word	0x2003dda4
   b6a0c:	000bab40 	.word	0x000bab40
   b6a10:	2003ddb4 	.word	0x2003ddb4
   b6a14:	000bab46 	.word	0x000bab46
   b6a18:	2003ddc4 	.word	0x2003ddc4
   b6a1c:	000baa4e 	.word	0x000baa4e
   b6a20:	2003ddd4 	.word	0x2003ddd4
   b6a24:	000baa56 	.word	0x000baa56
   b6a28:	2003dde4 	.word	0x2003dde4
   b6a2c:	000bab4c 	.word	0x000bab4c
   b6a30:	2003ddf4 	.word	0x2003ddf4
   b6a34:	000bab54 	.word	0x000bab54
   b6a38:	2003de04 	.word	0x2003de04
   b6a3c:	000bab5c 	.word	0x000bab5c
   b6a40:	2003de14 	.word	0x2003de14
   b6a44:	000bab64 	.word	0x000bab64
   b6a48:	2003de24 	.word	0x2003de24
   b6a4c:	000bab6c 	.word	0x000bab6c
   b6a50:	2003de34 	.word	0x2003de34
   b6a54:	000bab74 	.word	0x000bab74
   b6a58:	2003de44 	.word	0x2003de44
   b6a5c:	000bab7c 	.word	0x000bab7c
   b6a60:	2003de54 	.word	0x2003de54
   b6a64:	000bab84 	.word	0x000bab84
   b6a68:	2003de64 	.word	0x2003de64
   b6a6c:	000bab8c 	.word	0x000bab8c
   b6a70:	2003de74 	.word	0x2003de74
   b6a74:	000bab94 	.word	0x000bab94
   b6a78:	2003de84 	.word	0x2003de84
   b6a7c:	000bab9c 	.word	0x000bab9c
   b6a80:	2003de94 	.word	0x2003de94
   b6a84:	000baba4 	.word	0x000baba4
   b6a88:	2003dea4 	.word	0x2003dea4
   b6a8c:	000babac 	.word	0x000babac
   b6a90:	2003deb4 	.word	0x2003deb4
   b6a94:	000babb4 	.word	0x000babb4
   b6a98:	2003dec4 	.word	0x2003dec4
   b6a9c:	000babbc 	.word	0x000babbc
   b6aa0:	2003ded4 	.word	0x2003ded4
   b6aa4:	000babc4 	.word	0x000babc4
   b6aa8:	2003dee4 	.word	0x2003dee4
   b6aac:	000babcc 	.word	0x000babcc
   b6ab0:	2003def4 	.word	0x2003def4
   b6ab4:	000babd4 	.word	0x000babd4
   b6ab8:	2003df04 	.word	0x2003df04
   b6abc:	000babdc 	.word	0x000babdc
   b6ac0:	2003df14 	.word	0x2003df14
   b6ac4:	000babe4 	.word	0x000babe4
   b6ac8:	2003df24 	.word	0x2003df24
   b6acc:	000babec 	.word	0x000babec
   b6ad0:	2003df34 	.word	0x2003df34
   b6ad4:	000babf4 	.word	0x000babf4
   b6ad8:	2003df44 	.word	0x2003df44
   b6adc:	000babfc 	.word	0x000babfc
   b6ae0:	2003df54 	.word	0x2003df54
   b6ae4:	000bac04 	.word	0x000bac04
   b6ae8:	2003df64 	.word	0x2003df64
   b6aec:	000bac0c 	.word	0x000bac0c
   b6af0:	2003df74 	.word	0x2003df74
   b6af4:	000bac12 	.word	0x000bac12
   b6af8:	2003df84 	.word	0x2003df84
   b6afc:	000bac18 	.word	0x000bac18
   b6b00:	2003df94 	.word	0x2003df94
   b6b04:	2003d924 	.word	0x2003d924
   b6b08:	2003cf48 	.word	0x2003cf48

000b6b0c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6b0c:	4770      	bx	lr

000b6b0e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6b0e:	b510      	push	{r4, lr}
  }
   b6b10:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6b12:	4604      	mov	r4, r0
  }
   b6b14:	f7fd fabf 	bl	b4096 <_ZdlPvj>
   b6b18:	4620      	mov	r0, r4
   b6b1a:	bd10      	pop	{r4, pc}

000b6b1c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b1e:	4604      	mov	r4, r0
   b6b20:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6b22:	7922      	ldrb	r2, [r4, #4]
   b6b24:	68a3      	ldr	r3, [r4, #8]
   b6b26:	b132      	cbz	r2, b6b36 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6b28:	b9a3      	cbnz	r3, b6b54 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6b2a:	490b      	ldr	r1, [pc, #44]	; (b6b58 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6b2c:	b002      	add	sp, #8
   b6b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6b32:	f002 bb75 	b.w	b9220 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6b36:	4a09      	ldr	r2, [pc, #36]	; (b6b5c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6b38:	7b26      	ldrb	r6, [r4, #12]
   b6b3a:	4d09      	ldr	r5, [pc, #36]	; (b6b60 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6b3c:	4909      	ldr	r1, [pc, #36]	; (b6b64 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6b3e:	7b64      	ldrb	r4, [r4, #13]
   b6b40:	2e01      	cmp	r6, #1
   b6b42:	bf18      	it	ne
   b6b44:	4629      	movne	r1, r5
   b6b46:	e9cd 1400 	strd	r1, r4, [sp]
   b6b4a:	4907      	ldr	r1, [pc, #28]	; (b6b68 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6b4c:	f7fd fad8 	bl	b4100 <_ZN5Print6printfEPKcz>
  }
   b6b50:	b002      	add	sp, #8
   b6b52:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6b54:	4a05      	ldr	r2, [pc, #20]	; (b6b6c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6b56:	e7ef      	b.n	b6b38 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6b58:	000bb089 	.word	0x000bb089
   b6b5c:	000ba6af 	.word	0x000ba6af
   b6b60:	000bb085 	.word	0x000bb085
   b6b64:	000bb081 	.word	0x000bb081
   b6b68:	000bb09f 	.word	0x000bb09f
   b6b6c:	000bb078 	.word	0x000bb078

000b6b70 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b74:	b085      	sub	sp, #20
   b6b76:	461f      	mov	r7, r3
   b6b78:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6b7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b6b80:	eba8 0902 	sub.w	r9, r8, r2
   b6b84:	eba7 0a01 	sub.w	sl, r7, r1
   b6b88:	f1b9 0f00 	cmp.w	r9, #0
   b6b8c:	bfb8      	it	lt
   b6b8e:	f1c9 0900 	rsblt	r9, r9, #0
   b6b92:	f1ba 0f00 	cmp.w	sl, #0
   b6b96:	bfb8      	it	lt
   b6b98:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b6b9c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b6b9e:	4683      	mov	fp, r0
   b6ba0:	460c      	mov	r4, r1
   b6ba2:	4615      	mov	r5, r2
    if (steep) {
   b6ba4:	dd04      	ble.n	b6bb0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b6ba6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b6ba8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b6baa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b6bac:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b6bae:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b6bb0:	42bc      	cmp	r4, r7
   b6bb2:	dd05      	ble.n	b6bc0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b6bb4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b6bb6:	4645      	mov	r5, r8
   b6bb8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b6bba:	4622      	mov	r2, r4
   b6bbc:	463c      	mov	r4, r7
   b6bbe:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b6bc0:	1b3e      	subs	r6, r7, r4
   b6bc2:	b2b2      	uxth	r2, r6
   b6bc4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b6bc6:	eba8 0205 	sub.w	r2, r8, r5
   b6bca:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6bce:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b6bd2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b6bd6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b6bda:	4545      	cmp	r5, r8
   b6bdc:	bfb4      	ite	lt
   b6bde:	2201      	movlt	r2, #1
   b6be0:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b6be4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b6be6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b6be8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b6bea:	42bc      	cmp	r4, r7
   b6bec:	dc1c      	bgt.n	b6c28 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b6bee:	f8db 2000 	ldr.w	r2, [fp]
   b6bf2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b6bf4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b6bf6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b6bfa:	bfc7      	ittee	gt
   b6bfc:	4629      	movgt	r1, r5
   b6bfe:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b6c00:	462a      	movle	r2, r5
   b6c02:	4621      	movle	r1, r4
   b6c04:	4658      	mov	r0, fp
   b6c06:	47c0      	blx	r8
        }
        err -= dy;
   b6c08:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b6c0a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b6c0c:	1ab6      	subs	r6, r6, r2
   b6c0e:	b2b1      	uxth	r1, r6
   b6c10:	b236      	sxth	r6, r6
        if (err < 0) {
   b6c12:	2e00      	cmp	r6, #0
   b6c14:	da05      	bge.n	b6c22 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b6c16:	9a02      	ldr	r2, [sp, #8]
   b6c18:	4415      	add	r5, r2
            err += dx;
   b6c1a:	9a00      	ldr	r2, [sp, #0]
   b6c1c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b6c1e:	b22d      	sxth	r5, r5
            err += dx;
   b6c20:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b6c22:	3401      	adds	r4, #1
   b6c24:	b224      	sxth	r4, r4
   b6c26:	e7e0      	b.n	b6bea <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b6c28:	b005      	add	sp, #20
   b6c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6c2e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b6c2e:	4770      	bx	lr

000b6c30 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b6c30:	b410      	push	{r4}
    drawPixel(x, y, color);
   b6c32:	6804      	ldr	r4, [r0, #0]
   b6c34:	6924      	ldr	r4, [r4, #16]
   b6c36:	46a4      	mov	ip, r4
}
   b6c38:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b6c3c:	4760      	bx	ip

000b6c3e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6c3e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b6c40:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b6c42:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b6c46:	9502      	str	r5, [sp, #8]
   b6c48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b6c4a:	46a4      	mov	ip, r4
}
   b6c4c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b6c4e:	4760      	bx	ip

000b6c50 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6c50:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b6c52:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b6c54:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b6c58:	9502      	str	r5, [sp, #8]
   b6c5a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b6c5c:	46a4      	mov	ip, r4
}
   b6c5e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b6c60:	4760      	bx	ip

000b6c62 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6c62:	b470      	push	{r4, r5, r6}
   b6c64:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b6c68:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b6c6c:	6804      	ldr	r4, [r0, #0]
   b6c6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b6c72:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b6c74:	46a4      	mov	ip, r4
}
   b6c76:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b6c78:	4760      	bx	ip

000b6c7a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6c7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6c7e:	461c      	mov	r4, r3
    startWrite();
   b6c80:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b6c82:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6c86:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b6c88:	4605      	mov	r5, r0
   b6c8a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b6c8c:	3c01      	subs	r4, #1
   b6c8e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b6c90:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b6c92:	b224      	sxth	r4, r4
    startWrite();
   b6c94:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b6c96:	682b      	ldr	r3, [r5, #0]
   b6c98:	f8cd 8004 	str.w	r8, [sp, #4]
   b6c9c:	9400      	str	r4, [sp, #0]
   b6c9e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b6ca0:	4628      	mov	r0, r5
   b6ca2:	463b      	mov	r3, r7
   b6ca4:	4632      	mov	r2, r6
   b6ca6:	4639      	mov	r1, r7
   b6ca8:	47a0      	blx	r4
    endWrite();
   b6caa:	682b      	ldr	r3, [r5, #0]
   b6cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cae:	4628      	mov	r0, r5
}
   b6cb0:	b002      	add	sp, #8
   b6cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6cb6:	4718      	bx	r3

000b6cb8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6cbc:	461d      	mov	r5, r3
    startWrite();
   b6cbe:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b6cc0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6cc4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b6cc6:	4604      	mov	r4, r0
   b6cc8:	4617      	mov	r7, r2
   b6cca:	460e      	mov	r6, r1
    startWrite();
   b6ccc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b6cce:	e9cd 7800 	strd	r7, r8, [sp]
   b6cd2:	6822      	ldr	r2, [r4, #0]
   b6cd4:	1e6b      	subs	r3, r5, #1
   b6cd6:	4433      	add	r3, r6
   b6cd8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b6cda:	4620      	mov	r0, r4
   b6cdc:	b21b      	sxth	r3, r3
   b6cde:	463a      	mov	r2, r7
   b6ce0:	4631      	mov	r1, r6
   b6ce2:	47a8      	blx	r5
    endWrite();
   b6ce4:	6823      	ldr	r3, [r4, #0]
   b6ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ce8:	4620      	mov	r0, r4
}
   b6cea:	b002      	add	sp, #8
   b6cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6cf0:	4718      	bx	r3

000b6cf2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6cf2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6cf6:	461e      	mov	r6, r3
    startWrite();
   b6cf8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6cfa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b6cfe:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6d00:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b6d04:	460c      	mov	r4, r1
   b6d06:	4605      	mov	r5, r0
   b6d08:	4617      	mov	r7, r2
    startWrite();
   b6d0a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b6d0c:	4426      	add	r6, r4
   b6d0e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b6d10:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b6d12:	da0b      	bge.n	b6d2c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b6d14:	f8cd 8000 	str.w	r8, [sp]
   b6d18:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6d1c:	4621      	mov	r1, r4
   b6d1e:	464b      	mov	r3, r9
   b6d20:	463a      	mov	r2, r7
   b6d22:	4628      	mov	r0, r5
   b6d24:	3401      	adds	r4, #1
   b6d26:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b6d28:	b224      	sxth	r4, r4
   b6d2a:	e7f0      	b.n	b6d0e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b6d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d2e:	4628      	mov	r0, r5
}
   b6d30:	b002      	add	sp, #8
   b6d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6d36:	4718      	bx	r3

000b6d38 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6d38:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6d3a:	6802      	ldr	r2, [r0, #0]
   b6d3c:	9101      	str	r1, [sp, #4]
   b6d3e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b6d42:	9100      	str	r1, [sp, #0]
   b6d44:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b6d46:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6d4a:	2200      	movs	r2, #0
   b6d4c:	4611      	mov	r1, r2
   b6d4e:	47a0      	blx	r4
}
   b6d50:	b002      	add	sp, #8
   b6d52:	bd10      	pop	{r4, pc}

000b6d54 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b6d58:	4299      	cmp	r1, r3
        uint16_t color) {
   b6d5a:	4616      	mov	r6, r2
   b6d5c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b6d60:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6d64:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b6d66:	4680      	mov	r8, r0
   b6d68:	460d      	mov	r5, r1
   b6d6a:	461c      	mov	r4, r3
    if(x0 == x1){
   b6d6c:	d113      	bne.n	b6d96 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6d6e:	42be      	cmp	r6, r7
   b6d70:	bfc8      	it	gt
   b6d72:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6d74:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6d78:	bfc4      	itt	gt
   b6d7a:	463e      	movgt	r6, r7
   b6d7c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6d7e:	1c7b      	adds	r3, r7, #1
   b6d80:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b6d82:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6d84:	b21b      	sxth	r3, r3
   b6d86:	4632      	mov	r2, r6
   b6d88:	4629      	mov	r1, r5
   b6d8a:	4640      	mov	r0, r8
   b6d8c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b6d8e:	b003      	add	sp, #12
   b6d90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6d94:	4760      	bx	ip
    } else if(y0 == y1){
   b6d96:	42be      	cmp	r6, r7
   b6d98:	d10a      	bne.n	b6db0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b6d9a:	4299      	cmp	r1, r3
   b6d9c:	bfc2      	ittt	gt
   b6d9e:	460b      	movgt	r3, r1
   b6da0:	4625      	movgt	r5, r4
   b6da2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6da4:	1c63      	adds	r3, r4, #1
   b6da6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b6daa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6dac:	1b5b      	subs	r3, r3, r5
   b6dae:	e7e9      	b.n	b6d84 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b6db0:	6953      	ldr	r3, [r2, #20]
   b6db2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b6db4:	e9cd 7900 	strd	r7, r9, [sp]
   b6db8:	f8d8 3000 	ldr.w	r3, [r8]
   b6dbc:	4640      	mov	r0, r8
   b6dbe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b6dc0:	4632      	mov	r2, r6
   b6dc2:	4623      	mov	r3, r4
   b6dc4:	4629      	mov	r1, r5
   b6dc6:	47b8      	blx	r7
        endWrite();
   b6dc8:	f8d8 3000 	ldr.w	r3, [r8]
   b6dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6dce:	4640      	mov	r0, r8
}
   b6dd0:	b003      	add	sp, #12
   b6dd2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b6dd6:	4718      	bx	r3

000b6dd8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6dd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ddc:	461d      	mov	r5, r3
    startWrite();
   b6dde:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6de0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b6de4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6de6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6dea:	4604      	mov	r4, r0
   b6dec:	460f      	mov	r7, r1
   b6dee:	4616      	mov	r6, r2
    startWrite();
   b6df0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b6df2:	6823      	ldr	r3, [r4, #0]
   b6df4:	f8cd 8000 	str.w	r8, [sp]
   b6df8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6dfc:	4632      	mov	r2, r6
   b6dfe:	462b      	mov	r3, r5
   b6e00:	4639      	mov	r1, r7
   b6e02:	4620      	mov	r0, r4
   b6e04:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b6e06:	6823      	ldr	r3, [r4, #0]
   b6e08:	f8cd 8000 	str.w	r8, [sp]
   b6e0c:	f109 32ff 	add.w	r2, r9, #4294967295
   b6e10:	4432      	add	r2, r6
   b6e12:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6e16:	4639      	mov	r1, r7
   b6e18:	462b      	mov	r3, r5
   b6e1a:	4620      	mov	r0, r4
   b6e1c:	b212      	sxth	r2, r2
   b6e1e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b6e20:	6823      	ldr	r3, [r4, #0]
   b6e22:	f8cd 8000 	str.w	r8, [sp]
   b6e26:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6e2a:	4632      	mov	r2, r6
   b6e2c:	464b      	mov	r3, r9
   b6e2e:	4639      	mov	r1, r7
   b6e30:	4620      	mov	r0, r4
   b6e32:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b6e34:	1e6b      	subs	r3, r5, #1
   b6e36:	19d9      	adds	r1, r3, r7
   b6e38:	6823      	ldr	r3, [r4, #0]
   b6e3a:	f8cd 8000 	str.w	r8, [sp]
   b6e3e:	6a1d      	ldr	r5, [r3, #32]
   b6e40:	4620      	mov	r0, r4
   b6e42:	464b      	mov	r3, r9
   b6e44:	4632      	mov	r2, r6
   b6e46:	b209      	sxth	r1, r1
   b6e48:	47a8      	blx	r5
    endWrite();
   b6e4a:	6823      	ldr	r3, [r4, #0]
   b6e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e4e:	4620      	mov	r0, r4
}
   b6e50:	b002      	add	sp, #8
   b6e52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6e56:	4718      	bx	r3

000b6e58 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b6e58:	4770      	bx	lr

000b6e5a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b6e5a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6e5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b6e62:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b6e64:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b6e66:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6e6a:	bf59      	ittee	pl
   b6e6c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6e6e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6e70:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b6e72:	81c3      	strhmi	r3, [r0, #14]
}
   b6e74:	4770      	bx	lr
	...

000b6e78 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6e78:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b6e7a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6e7c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6e7e:	4a07      	ldr	r2, [pc, #28]	; (b6e9c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6e80:	4d07      	ldr	r5, [pc, #28]	; (b6ea0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b6e82:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b6e84:	2400      	movs	r4, #0
    _width    = WIDTH;
   b6e86:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b6e88:	f04f 31ff 	mov.w	r1, #4294967295
   b6e8c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b6e90:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b6e92:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b6e94:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b6e96:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b6e98:	6204      	str	r4, [r0, #32]
}
   b6e9a:	bd30      	pop	{r4, r5, pc}
   b6e9c:	01000101 	.word	0x01000101
   b6ea0:	000bb5c4 	.word	0x000bb5c4

000b6ea4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ea8:	b089      	sub	sp, #36	; 0x24
   b6eaa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6eae:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6eb0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b6eb4:	9304      	str	r3, [sp, #16]
   b6eb6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b6eba:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6ebc:	9305      	str	r3, [sp, #20]
   b6ebe:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b6ec2:	4604      	mov	r4, r0
    startWrite();
   b6ec4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6ec6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b6eca:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6ece:	bf48      	it	mi
   b6ed0:	f108 020e 	addmi.w	r2, r8, #14
   b6ed4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b6ed8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b6eda:	4635      	mov	r5, r6
   b6edc:	9b03      	ldr	r3, [sp, #12]
   b6ede:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b6ee0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b6ee4:	189a      	adds	r2, r3, r2
   b6ee6:	9b05      	ldr	r3, [sp, #20]
   b6ee8:	428b      	cmp	r3, r1
   b6eea:	b212      	sxth	r2, r2
   b6eec:	dd27      	ble.n	b6f3e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6eee:	9b04      	ldr	r3, [sp, #16]
   b6ef0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b6ef2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6ef6:	9306      	str	r3, [sp, #24]
   b6ef8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b6efc:	4580      	cmp	r8, r0
   b6efe:	fa1f f189 	uxth.w	r1, r9
   b6f02:	dd17      	ble.n	b6f34 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b6f04:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6f06:	bf05      	ittet	eq
   b6f08:	9b06      	ldreq	r3, [sp, #24]
   b6f0a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b6f0c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6f0e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b6f10:	bf18      	it	ne
   b6f12:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b6f14:	062b      	lsls	r3, r5, #24
   b6f16:	d50a      	bpl.n	b6f2e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b6f18:	9b02      	ldr	r3, [sp, #8]
   b6f1a:	6820      	ldr	r0, [r4, #0]
   b6f1c:	9207      	str	r2, [sp, #28]
   b6f1e:	4419      	add	r1, r3
   b6f20:	6983      	ldr	r3, [r0, #24]
   b6f22:	b209      	sxth	r1, r1
   b6f24:	461f      	mov	r7, r3
   b6f26:	4620      	mov	r0, r4
   b6f28:	4653      	mov	r3, sl
   b6f2a:	47b8      	blx	r7
   b6f2c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6f2e:	f109 0901 	add.w	r9, r9, #1
   b6f32:	e7e1      	b.n	b6ef8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b6f34:	9b01      	ldr	r3, [sp, #4]
   b6f36:	3301      	adds	r3, #1
   b6f38:	9301      	str	r3, [sp, #4]
   b6f3a:	445e      	add	r6, fp
   b6f3c:	e7ce      	b.n	b6edc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6f3e:	6823      	ldr	r3, [r4, #0]
   b6f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f42:	4620      	mov	r0, r4
}
   b6f44:	b009      	add	sp, #36	; 0x24
   b6f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b6f4a:	4718      	bx	r3

000b6f4c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f50:	ed2d 8b02 	vpush	{d8}
   b6f54:	b091      	sub	sp, #68	; 0x44
   b6f56:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6f58:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6f5a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6f5e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6f62:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b6f66:	9103      	str	r1, [sp, #12]
   b6f68:	461f      	mov	r7, r3
   b6f6a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6f6e:	9304      	str	r3, [sp, #16]
   b6f70:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6f72:	2a00      	cmp	r2, #0
   b6f74:	f040 80c5 	bne.w	b7102 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6f78:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6f7c:	428b      	cmp	r3, r1
   b6f7e:	f340 814c 	ble.w	b721a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6f82:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b6f86:	42b3      	cmp	r3, r6
   b6f88:	f340 8147 	ble.w	b721a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6f8c:	2306      	movs	r3, #6
   b6f8e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6f92:	2b00      	cmp	r3, #0
   b6f94:	f340 8141 	ble.w	b721a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b6f98:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6f9c:	2b00      	cmp	r3, #0
   b6f9e:	f340 813c 	ble.w	b721a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6fa2:	7f03      	ldrb	r3, [r0, #28]
   b6fa4:	b91b      	cbnz	r3, b6fae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b6fa6:	2faf      	cmp	r7, #175	; 0xaf
   b6fa8:	bf84      	itt	hi
   b6faa:	3701      	addhi	r7, #1
   b6fac:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6fae:	f8db 3000 	ldr.w	r3, [fp]
   b6fb2:	4658      	mov	r0, fp
   b6fb4:	695b      	ldr	r3, [r3, #20]
   b6fb6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6fb8:	2205      	movs	r2, #5
   b6fba:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6fbc:	2200      	movs	r2, #0
   b6fbe:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6fc0:	4a98      	ldr	r2, [pc, #608]	; (b7224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6fc2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b6fc6:	18d3      	adds	r3, r2, r3
   b6fc8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b6fca:	b2b3      	uxth	r3, r6
   b6fcc:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6fce:	9a05      	ldr	r2, [sp, #20]
   b6fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6fd2:	5c9b      	ldrb	r3, [r3, r2]
   b6fd4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6fd6:	b2ab      	uxth	r3, r5
   b6fd8:	930b      	str	r3, [sp, #44]	; 0x2c
   b6fda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b6fde:	9308      	str	r3, [sp, #32]
   b6fe0:	9b03      	ldr	r3, [sp, #12]
   b6fe2:	fb02 f905 	mul.w	r9, r2, r5
   b6fe6:	fa19 f983 	uxtah	r9, r9, r3
   b6fea:	fa0f f389 	sxth.w	r3, r9
   b6fee:	ee08 3a10 	vmov	s16, r3
   b6ff2:	2308      	movs	r3, #8
   b6ff4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b6ff6:	9b03      	ldr	r3, [sp, #12]
   b6ff8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6ffc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b7000:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b7004:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b7006:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b700a:	07d2      	lsls	r2, r2, #31
   b700c:	d552      	bpl.n	b70b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b700e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b7010:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b7014:	d13e      	bne.n	b7094 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b7016:	2c01      	cmp	r4, #1
   b7018:	d13c      	bne.n	b7094 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b701a:	699b      	ldr	r3, [r3, #24]
   b701c:	9906      	ldr	r1, [sp, #24]
   b701e:	461f      	mov	r7, r3
   b7020:	9b04      	ldr	r3, [sp, #16]
   b7022:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b7024:	b212      	sxth	r2, r2
   b7026:	4651      	mov	r1, sl
   b7028:	4658      	mov	r0, fp
   b702a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b702c:	f109 0301 	add.w	r3, r9, #1
   b7030:	fa4f f983 	sxtb.w	r9, r3
   b7034:	9b07      	ldr	r3, [sp, #28]
   b7036:	085b      	lsrs	r3, r3, #1
   b7038:	9307      	str	r3, [sp, #28]
   b703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b703c:	3b01      	subs	r3, #1
   b703e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7042:	930a      	str	r3, [sp, #40]	; 0x28
   b7044:	d1de      	bne.n	b7004 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b7046:	9f05      	ldr	r7, [sp, #20]
   b7048:	3701      	adds	r7, #1
   b704a:	b27b      	sxtb	r3, r7
   b704c:	9305      	str	r3, [sp, #20]
   b704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7050:	3b01      	subs	r3, #1
   b7052:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7056:	9309      	str	r3, [sp, #36]	; 0x24
   b7058:	d1b9      	bne.n	b6fce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b705a:	9b04      	ldr	r3, [sp, #16]
   b705c:	4543      	cmp	r3, r8
   b705e:	d00f      	beq.n	b7080 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b7060:	2d01      	cmp	r5, #1
   b7062:	f8db 3000 	ldr.w	r3, [fp]
   b7066:	d13b      	bne.n	b70e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b7068:	2c01      	cmp	r4, #1
   b706a:	d139      	bne.n	b70e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b706c:	9908      	ldr	r1, [sp, #32]
   b706e:	f8cd 8000 	str.w	r8, [sp]
   b7072:	3105      	adds	r1, #5
   b7074:	6a1c      	ldr	r4, [r3, #32]
   b7076:	4632      	mov	r2, r6
   b7078:	2308      	movs	r3, #8
   b707a:	b209      	sxth	r1, r1
   b707c:	4658      	mov	r0, fp
   b707e:	47a0      	blx	r4
        endWrite();
   b7080:	f8db 3000 	ldr.w	r3, [fp]
   b7084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7086:	4658      	mov	r0, fp
}
   b7088:	b011      	add	sp, #68	; 0x44
   b708a:	ecbd 8b02 	vpop	{d8}
   b708e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b7092:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b7094:	9906      	ldr	r1, [sp, #24]
   b7096:	fb14 f202 	smulbb	r2, r4, r2
   b709a:	440a      	add	r2, r1
   b709c:	9904      	ldr	r1, [sp, #16]
   b709e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b70a0:	9400      	str	r4, [sp, #0]
   b70a2:	69db      	ldr	r3, [r3, #28]
   b70a4:	ee18 1a10 	vmov	r1, s16
   b70a8:	461f      	mov	r7, r3
   b70aa:	b212      	sxth	r2, r2
   b70ac:	462b      	mov	r3, r5
   b70ae:	4658      	mov	r0, fp
   b70b0:	47b8      	blx	r7
   b70b2:	e7bb      	b.n	b702c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b70b4:	9a04      	ldr	r2, [sp, #16]
   b70b6:	4542      	cmp	r2, r8
   b70b8:	d0b8      	beq.n	b702c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b70ba:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b70bc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b70c0:	d107      	bne.n	b70d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b70c2:	2c01      	cmp	r4, #1
   b70c4:	d105      	bne.n	b70d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b70c6:	699b      	ldr	r3, [r3, #24]
   b70c8:	9906      	ldr	r1, [sp, #24]
   b70ca:	461f      	mov	r7, r3
   b70cc:	440a      	add	r2, r1
   b70ce:	4643      	mov	r3, r8
   b70d0:	e7a8      	b.n	b7024 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b70d2:	9906      	ldr	r1, [sp, #24]
   b70d4:	f8cd 8004 	str.w	r8, [sp, #4]
   b70d8:	fb14 f202 	smulbb	r2, r4, r2
   b70dc:	440a      	add	r2, r1
   b70de:	e7df      	b.n	b70a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b70e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b70e2:	f8cd 8004 	str.w	r8, [sp, #4]
   b70e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b70ea:	9a08      	ldr	r2, [sp, #32]
   b70ec:	00e4      	lsls	r4, r4, #3
   b70ee:	440a      	add	r2, r1
   b70f0:	4611      	mov	r1, r2
   b70f2:	9400      	str	r4, [sp, #0]
   b70f4:	69dc      	ldr	r4, [r3, #28]
   b70f6:	4632      	mov	r2, r6
   b70f8:	462b      	mov	r3, r5
   b70fa:	b209      	sxth	r1, r1
   b70fc:	4658      	mov	r0, fp
   b70fe:	47a0      	blx	r4
        endWrite();
   b7100:	e7be      	b.n	b7080 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b7102:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b7104:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b7106:	6812      	ldr	r2, [r2, #0]
   b7108:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b710a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b710c:	b2ff      	uxtb	r7, r7
   b710e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b7112:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b7116:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b7118:	789a      	ldrb	r2, [r3, #2]
   b711a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b711c:	78da      	ldrb	r2, [r3, #3]
   b711e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b7120:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b7122:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b7126:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b712a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b712c:	d801      	bhi.n	b7132 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b712e:	2c01      	cmp	r4, #1
   b7130:	d957      	bls.n	b71e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b7132:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b7136:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b7138:	fa0f f38a 	sxth.w	r3, sl
   b713c:	9307      	str	r3, [sp, #28]
        startWrite();
   b713e:	f8db 3000 	ldr.w	r3, [fp]
   b7142:	4658      	mov	r0, fp
   b7144:	695b      	ldr	r3, [r3, #20]
   b7146:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7148:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b714a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b714e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7150:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b7154:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b7156:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7158:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b715a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b715c:	429f      	cmp	r7, r3
   b715e:	d28f      	bcs.n	b7080 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7160:	9b07      	ldr	r3, [sp, #28]
   b7162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b7164:	443b      	add	r3, r7
   b7166:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b716a:	2200      	movs	r2, #0
   b716c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b716e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7170:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7172:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7176:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b717a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b717e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b7180:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b7182:	9905      	ldr	r1, [sp, #20]
   b7184:	4291      	cmp	r1, r2
   b7186:	d241      	bcs.n	b720c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b7188:	1c5a      	adds	r2, r3, #1
   b718a:	b2d2      	uxtb	r2, r2
   b718c:	075b      	lsls	r3, r3, #29
   b718e:	920d      	str	r2, [sp, #52]	; 0x34
   b7190:	d107      	bne.n	b71a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b7192:	9b06      	ldr	r3, [sp, #24]
   b7194:	9906      	ldr	r1, [sp, #24]
   b7196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7198:	3301      	adds	r3, #1
   b719a:	b29b      	uxth	r3, r3
   b719c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b71a0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b71a2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b71a6:	d012      	beq.n	b71ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b71a8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b71aa:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b71ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b71b2:	d11a      	bne.n	b71ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b71b4:	2c01      	cmp	r4, #1
   b71b6:	d118      	bne.n	b71ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b71b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b71ba:	699b      	ldr	r3, [r3, #24]
   b71bc:	4411      	add	r1, r2
   b71be:	9a05      	ldr	r2, [sp, #20]
   b71c0:	4411      	add	r1, r2
   b71c2:	461e      	mov	r6, r3
   b71c4:	4652      	mov	r2, sl
   b71c6:	9b04      	ldr	r3, [sp, #16]
   b71c8:	b209      	sxth	r1, r1
   b71ca:	4658      	mov	r0, fp
   b71cc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b71ce:	9e05      	ldr	r6, [sp, #20]
   b71d0:	3601      	adds	r6, #1
   b71d2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b71d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b71d8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b71da:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b71de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b71e0:	e7ce      	b.n	b7180 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b71e2:	2300      	movs	r3, #0
   b71e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b71e8:	e7a9      	b.n	b713e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b71ea:	9805      	ldr	r0, [sp, #20]
   b71ec:	9a08      	ldr	r2, [sp, #32]
   b71ee:	4402      	add	r2, r0
   b71f0:	fb02 1105 	mla	r1, r2, r5, r1
   b71f4:	9a04      	ldr	r2, [sp, #16]
   b71f6:	e9cd 4200 	strd	r4, r2, [sp]
   b71fa:	69db      	ldr	r3, [r3, #28]
   b71fc:	ee18 2a10 	vmov	r2, s16
   b7200:	461e      	mov	r6, r3
   b7202:	b209      	sxth	r1, r1
   b7204:	462b      	mov	r3, r5
   b7206:	4658      	mov	r0, fp
   b7208:	47b0      	blx	r6
   b720a:	e7e0      	b.n	b71ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b720e:	3701      	adds	r7, #1
   b7210:	4498      	add	r8, r3
   b7212:	fa5f f888 	uxtb.w	r8, r8
   b7216:	b2ff      	uxtb	r7, r7
   b7218:	e79f      	b.n	b715a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b721a:	b011      	add	sp, #68	; 0x44
   b721c:	ecbd 8b02 	vpop	{d8}
   b7220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7224:	000bb0bc 	.word	0x000bb0bc

000b7228 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7228:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b722a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b722c:	b085      	sub	sp, #20
   b722e:	4604      	mov	r4, r0
   b7230:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b7232:	2a00      	cmp	r2, #0
   b7234:	d134      	bne.n	b72a0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b7236:	290a      	cmp	r1, #10
   b7238:	d108      	bne.n	b724c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b723a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b723c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b723e:	7e42      	ldrb	r2, [r0, #25]
   b7240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b7244:	8263      	strh	r3, [r4, #18]
}
   b7246:	2001      	movs	r0, #1
   b7248:	b005      	add	sp, #20
   b724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b724c:	290d      	cmp	r1, #13
   b724e:	d0fa      	beq.n	b7246 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7250:	7ee1      	ldrb	r1, [r4, #27]
   b7252:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7254:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7256:	b171      	cbz	r1, b7276 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b7258:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b725c:	2106      	movs	r1, #6
   b725e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b7262:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b7266:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b7268:	bfc1      	itttt	gt
   b726a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b726e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b7270:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7274:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7276:	8ae2      	ldrh	r2, [r4, #22]
   b7278:	9201      	str	r2, [sp, #4]
   b727a:	8aa2      	ldrh	r2, [r4, #20]
   b727c:	9200      	str	r2, [sp, #0]
   b727e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b7282:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7286:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b728a:	4620      	mov	r0, r4
   b728c:	f7ff fe5e 	bl	b6f4c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b7290:	7e23      	ldrb	r3, [r4, #24]
   b7292:	8a22      	ldrh	r2, [r4, #16]
   b7294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7298:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b729c:	8223      	strh	r3, [r4, #16]
   b729e:	e7d2      	b.n	b7246 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b72a0:	290a      	cmp	r1, #10
   b72a2:	d107      	bne.n	b72b4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b72a4:	2300      	movs	r3, #0
   b72a6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b72a8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b72aa:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b72ac:	8a43      	ldrh	r3, [r0, #18]
   b72ae:	fb01 3302 	mla	r3, r1, r2, r3
   b72b2:	e7c7      	b.n	b7244 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b72b4:	290d      	cmp	r1, #13
   b72b6:	d0c6      	beq.n	b7246 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b72b8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b72ba:	42a9      	cmp	r1, r5
   b72bc:	d3c3      	bcc.n	b7246 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b72be:	7a51      	ldrb	r1, [r2, #9]
   b72c0:	4299      	cmp	r1, r3
   b72c2:	d3c0      	bcc.n	b7246 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b72c4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b72c6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b72c8:	b2ed      	uxtb	r5, r5
   b72ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b72ce:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b72d0:	b328      	cbz	r0, b731e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b72d2:	78e9      	ldrb	r1, [r5, #3]
   b72d4:	b319      	cbz	r1, b731e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b72d6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b72d8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b72da:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b72dc:	b191      	cbz	r1, b7304 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b72de:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b72e2:	4408      	add	r0, r1
   b72e4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b72e8:	fb06 1100 	mla	r1, r6, r0, r1
   b72ec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b72f0:	4281      	cmp	r1, r0
   b72f2:	dd07      	ble.n	b7304 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b72f4:	2000      	movs	r0, #0
   b72f6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b72f8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b72fc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b72fe:	fb02 1207 	mla	r2, r2, r7, r1
   b7302:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7304:	8ae2      	ldrh	r2, [r4, #22]
   b7306:	9201      	str	r2, [sp, #4]
   b7308:	8aa2      	ldrh	r2, [r4, #20]
   b730a:	9200      	str	r2, [sp, #0]
   b730c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b7310:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7314:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7318:	4620      	mov	r0, r4
   b731a:	f7ff fe17 	bl	b6f4c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b731e:	7929      	ldrb	r1, [r5, #4]
   b7320:	7e22      	ldrb	r2, [r4, #24]
   b7322:	8a23      	ldrh	r3, [r4, #16]
   b7324:	fb01 3302 	mla	r3, r1, r2, r3
   b7328:	e7b8      	b.n	b729c <_ZN12Adafruit_GFX5writeEh+0x74>

000b732a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b732a:	2901      	cmp	r1, #1
   b732c:	bf38      	it	cc
   b732e:	2101      	movcc	r1, #1
   b7330:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b7332:	7641      	strb	r1, [r0, #25]
}
   b7334:	4770      	bx	lr

000b7336 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b7336:	b538      	push	{r3, r4, r5, lr}
   b7338:	4604      	mov	r4, r0
   b733a:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b733c:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b733e:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b7340:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b7342:	f002 fbab 	bl	b9a9c <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b7346:	7b20      	ldrb	r0, [r4, #12]
   b7348:	2101      	movs	r1, #1
   b734a:	f002 fbb8 	bl	b9abe <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b734e:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b7350:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b7352:	2101      	movs	r1, #1
   b7354:	f002 fba2 	bl	b9a9c <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b7358:	7b60      	ldrb	r0, [r4, #13]
   b735a:	2100      	movs	r1, #0
   b735c:	f002 fbaf 	bl	b9abe <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b7360:	4620      	mov	r0, r4
   b7362:	bd38      	pop	{r3, r4, r5, pc}

000b7364 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b7364:	3901      	subs	r1, #1
   b7366:	b2c9      	uxtb	r1, r1
   b7368:	2908      	cmp	r1, #8
   b736a:	bf9a      	itte	ls
   b736c:	4b02      	ldrls	r3, [pc, #8]	; (b7378 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b736e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b7372:	4802      	ldrhi	r0, [pc, #8]	; (b737c <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b7374:	4770      	bx	lr
   b7376:	bf00      	nop
   b7378:	000bb70c 	.word	0x000bb70c
   b737c:	000bb614 	.word	0x000bb614

000b7380 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b7380:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b7382:	4c0b      	ldr	r4, [pc, #44]	; (b73b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7384:	7821      	ldrb	r1, [r4, #0]
   b7386:	f3bf 8f5b 	dmb	ish
   b738a:	f011 0101 	ands.w	r1, r1, #1
   b738e:	d10b      	bne.n	b73a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7390:	4620      	mov	r0, r4
   b7392:	9101      	str	r1, [sp, #4]
   b7394:	f7fc fe8e 	bl	b40b4 <__cxa_guard_acquire>
   b7398:	9901      	ldr	r1, [sp, #4]
   b739a:	b128      	cbz	r0, b73a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b739c:	4805      	ldr	r0, [pc, #20]	; (b73b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b739e:	f001 fd2f 	bl	b8e00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b73a2:	4620      	mov	r0, r4
   b73a4:	f7fc fe8b 	bl	b40be <__cxa_guard_release>
    }
   b73a8:	4802      	ldr	r0, [pc, #8]	; (b73b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b73aa:	b002      	add	sp, #8
   b73ac:	bd10      	pop	{r4, pc}
   b73ae:	bf00      	nop
   b73b0:	2003cf38 	.word	0x2003cf38
   b73b4:	2003cf3c 	.word	0x2003cf3c

000b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b73b8:	b507      	push	{r0, r1, r2, lr}
   b73ba:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b73bc:	f7ff ffe0 	bl	b7380 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b73c0:	9901      	ldr	r1, [sp, #4]
    }
   b73c2:	b003      	add	sp, #12
   b73c4:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b73c8:	f001 bdc0 	b.w	b8f4c <_ZN8SPIClass8transferEh>

000b73cc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b73cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73d0:	4607      	mov	r7, r0
   b73d2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b73d6:	461e      	mov	r6, r3
	if (count == 0) {
   b73d8:	4615      	mov	r5, r2
   b73da:	2a00      	cmp	r2, #0
   b73dc:	d042      	beq.n	b7464 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b73de:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b73e2:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b73e4:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b73e8:	2100      	movs	r1, #0
   b73ea:	f002 fb68 	bl	b9abe <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b73ee:	4648      	mov	r0, r9
   b73f0:	f7ff ffe2 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b73f4:	3d01      	subs	r5, #1
   b73f6:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b73f8:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b73fc:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b7400:	fa5f f48b 	uxtb.w	r4, fp
   b7404:	42a5      	cmp	r5, r4
   b7406:	d922      	bls.n	b744e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b7408:	b9dc      	cbnz	r4, b7442 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b740a:	f1b8 0f00 	cmp.w	r8, #0
   b740e:	d018      	beq.n	b7442 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b7410:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b7412:	b2d3      	uxtb	r3, r2
   b7414:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b7416:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b7418:	d805      	bhi.n	b7426 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b741a:	fa0a f402 	lsl.w	r4, sl, r2
   b741e:	430c      	orrs	r4, r1
   b7420:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b7422:	3201      	adds	r2, #1
   b7424:	e7f5      	b.n	b7412 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b7426:	4648      	mov	r0, r9
   b7428:	9101      	str	r1, [sp, #4]
   b742a:	f7ff ffc5 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b742e:	7833      	ldrb	r3, [r6, #0]
   b7430:	9901      	ldr	r1, [sp, #4]
   b7432:	4004      	ands	r4, r0
   b7434:	ea23 0301 	bic.w	r3, r3, r1
   b7438:	431c      	orrs	r4, r3
   b743a:	7034      	strb	r4, [r6, #0]
		index++;
   b743c:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b7440:	e7de      	b.n	b7400 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b7442:	4648      	mov	r0, r9
   b7444:	f7ff ffb8 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7448:	f806 000b 	strb.w	r0, [r6, fp]
   b744c:	e7f6      	b.n	b743c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b744e:	2000      	movs	r0, #0
   b7450:	f7ff ffb2 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7454:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7456:	7b38      	ldrb	r0, [r7, #12]
   b7458:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b745a:	b003      	add	sp, #12
   b745c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7460:	f002 bb2d 	b.w	b9abe <digitalWrite>
} // End PCD_ReadRegister()
   b7464:	b003      	add	sp, #12
   b7466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b746a <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b746a:	b538      	push	{r3, r4, r5, lr}
   b746c:	460c      	mov	r4, r1
   b746e:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7470:	2100      	movs	r1, #0
   b7472:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7474:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7478:	f002 fb21 	bl	b9abe <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b747c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b7480:	f7ff ff9a 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7484:	2000      	movs	r0, #0
   b7486:	f7ff ff97 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b748a:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b748c:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b748e:	7b28      	ldrb	r0, [r5, #12]
   b7490:	f002 fb15 	bl	b9abe <digitalWrite>
} // End PCD_ReadRegister()
   b7494:	4620      	mov	r0, r4
   b7496:	bd38      	pop	{r3, r4, r5, pc}

000b7498 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b7498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b749a:	460f      	mov	r7, r1
   b749c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b749e:	2100      	movs	r1, #0
   b74a0:	7b00      	ldrb	r0, [r0, #12]
								) {
   b74a2:	4615      	mov	r5, r2
   b74a4:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b74a6:	f002 fb0a 	bl	b9abe <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b74aa:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b74ae:	f7ff ff83 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b74b2:	4425      	add	r5, r4
   b74b4:	42ac      	cmp	r4, r5
   b74b6:	d004      	beq.n	b74c2 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b74b8:	f814 0b01 	ldrb.w	r0, [r4], #1
   b74bc:	f7ff ff7c 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b74c0:	e7f8      	b.n	b74b4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b74c2:	7b30      	ldrb	r0, [r6, #12]
   b74c4:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b74c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b74ca:	f002 baf8 	b.w	b9abe <digitalWrite>

000b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b74ce:	b570      	push	{r4, r5, r6, lr}
   b74d0:	4604      	mov	r4, r0
   b74d2:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b74d4:	7b00      	ldrb	r0, [r0, #12]
   b74d6:	2100      	movs	r1, #0
								) {
   b74d8:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b74da:	f002 faf0 	bl	b9abe <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b74de:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b74e2:	f7ff ff69 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b74e6:	4628      	mov	r0, r5
   b74e8:	f7ff ff66 	bl	b73b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b74ec:	7b20      	ldrb	r0, [r4, #12]
   b74ee:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b74f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b74f4:	f002 bae3 	b.w	b9abe <digitalWrite>

000b74f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b74f8:	b570      	push	{r4, r5, r6, lr}
   b74fa:	4616      	mov	r6, r2
   b74fc:	4604      	mov	r4, r0
   b74fe:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b7500:	f7ff ffb3 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b7504:	4330      	orrs	r0, r6
   b7506:	b2c2      	uxtb	r2, r0
   b7508:	4629      	mov	r1, r5
   b750a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b750c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b7510:	f7ff bfdd 	b.w	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b7514 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b7514:	b570      	push	{r4, r5, r6, lr}
   b7516:	4616      	mov	r6, r2
   b7518:	4604      	mov	r4, r0
   b751a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b751c:	f7ff ffa5 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b7520:	ea20 0006 	bic.w	r0, r0, r6
   b7524:	b2c2      	uxtb	r2, r0
   b7526:	4629      	mov	r1, r5
   b7528:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b752a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b752e:	f7ff bfce 	b.w	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b7532 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b7532:	2208      	movs	r2, #8
   b7534:	2110      	movs	r1, #16
   b7536:	f7ff bfed 	b.w	b7514 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b753c:	4604      	mov	r4, r0
   b753e:	4615      	mov	r5, r2
   b7540:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7542:	2200      	movs	r2, #0
   b7544:	2102      	movs	r1, #2
					 ) {
   b7546:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7548:	f7ff ffc1 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b754c:	2204      	movs	r2, #4
   b754e:	210a      	movs	r1, #10
   b7550:	4620      	mov	r0, r4
   b7552:	f7ff ffbc 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b7556:	2280      	movs	r2, #128	; 0x80
   b7558:	2114      	movs	r1, #20
   b755a:	4620      	mov	r0, r4
   b755c:	f7ff ffcc 	bl	b74f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b7560:	462a      	mov	r2, r5
   b7562:	463b      	mov	r3, r7
   b7564:	2112      	movs	r1, #18
   b7566:	4620      	mov	r0, r4
   b7568:	f7ff ff96 	bl	b7498 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b756c:	2203      	movs	r2, #3
   b756e:	2102      	movs	r1, #2
   b7570:	4620      	mov	r0, r4
   b7572:	f7ff ffac 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b7576:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b757a:	210a      	movs	r1, #10
   b757c:	4620      	mov	r0, r4
   b757e:	f7ff ff74 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b7582:	0743      	lsls	r3, r0, #29
   b7584:	d405      	bmi.n	b7592 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b7586:	3d01      	subs	r5, #1
   b7588:	b2ad      	uxth	r5, r5
   b758a:	2d00      	cmp	r5, #0
   b758c:	d1f5      	bne.n	b757a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b758e:	2004      	movs	r0, #4
   b7590:	e00f      	b.n	b75b2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b7592:	2200      	movs	r2, #0
   b7594:	2102      	movs	r1, #2
   b7596:	4620      	mov	r0, r4
   b7598:	f7ff ff99 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b759c:	2144      	movs	r1, #68	; 0x44
   b759e:	4620      	mov	r0, r4
   b75a0:	f7ff ff63 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b75a4:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b75a6:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b75a8:	4620      	mov	r0, r4
   b75aa:	f7ff ff5e 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b75ae:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b75b0:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b75b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75b4 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b75b4:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b75b6:	220f      	movs	r2, #15
   b75b8:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b75ba:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b75bc:	f7ff ff87 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b75c0:	2032      	movs	r0, #50	; 0x32
   b75c2:	f001 feab 	bl	b931c <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b75c6:	2102      	movs	r1, #2
   b75c8:	4620      	mov	r0, r4
   b75ca:	f7ff ff4e 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b75ce:	06c3      	lsls	r3, r0, #27
   b75d0:	d4f9      	bmi.n	b75c6 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b75d2:	bd10      	pop	{r4, pc}

000b75d4 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b75d4:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b75d6:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b75d8:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b75da:	f7ff ff46 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b75de:	f000 0303 	and.w	r3, r0, #3
   b75e2:	2b03      	cmp	r3, #3
   b75e4:	d008      	beq.n	b75f8 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b75e6:	f040 0203 	orr.w	r2, r0, #3
   b75ea:	b2d2      	uxtb	r2, r2
   b75ec:	4620      	mov	r0, r4
   b75ee:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b75f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b75f4:	f7ff bf6b 	b.w	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b75f8:	bd10      	pop	{r4, pc}

000b75fa <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b75fa:	b510      	push	{r4, lr}
   b75fc:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b75fe:	7b40      	ldrb	r0, [r0, #13]
   b7600:	f002 fa76 	bl	b9af0 <digitalRead>
   b7604:	bb48      	cbnz	r0, b765a <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b7606:	7b60      	ldrb	r0, [r4, #13]
   b7608:	2101      	movs	r1, #1
   b760a:	f002 fa58 	bl	b9abe <digitalWrite>
		delay(50);
   b760e:	2032      	movs	r0, #50	; 0x32
   b7610:	f001 fe84 	bl	b931c <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b7614:	4620      	mov	r0, r4
   b7616:	2280      	movs	r2, #128	; 0x80
   b7618:	2154      	movs	r1, #84	; 0x54
   b761a:	f7ff ff58 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b761e:	4620      	mov	r0, r4
   b7620:	22a9      	movs	r2, #169	; 0xa9
   b7622:	2156      	movs	r1, #86	; 0x56
   b7624:	f7ff ff53 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b7628:	4620      	mov	r0, r4
   b762a:	2203      	movs	r2, #3
   b762c:	2158      	movs	r1, #88	; 0x58
   b762e:	f7ff ff4e 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b7632:	4620      	mov	r0, r4
   b7634:	22e8      	movs	r2, #232	; 0xe8
   b7636:	215a      	movs	r1, #90	; 0x5a
   b7638:	f7ff ff49 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b763c:	4620      	mov	r0, r4
   b763e:	2240      	movs	r2, #64	; 0x40
   b7640:	212a      	movs	r1, #42	; 0x2a
   b7642:	f7ff ff44 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b7646:	4620      	mov	r0, r4
   b7648:	223d      	movs	r2, #61	; 0x3d
   b764a:	2122      	movs	r1, #34	; 0x22
   b764c:	f7ff ff3f 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7650:	4620      	mov	r0, r4
} // End PCD_Init()
   b7652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7656:	f7ff bfbd 	b.w	b75d4 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b765a:	4620      	mov	r0, r4
   b765c:	f7ff ffaa 	bl	b75b4 <_ZN7MFRC5229PCD_ResetEv>
   b7660:	e7d8      	b.n	b7614 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b7662 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b7662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7666:	b089      	sub	sp, #36	; 0x24
   b7668:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b766c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b7670:	9203      	str	r2, [sp, #12]
   b7672:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b7676:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b767a:	9204      	str	r2, [sp, #16]
   b767c:	4604      	mov	r4, r0
   b767e:	468a      	mov	sl, r1
   b7680:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b7682:	f1b9 0f00 	cmp.w	r9, #0
   b7686:	d03e      	beq.n	b7706 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b7688:	f899 8000 	ldrb.w	r8, [r9]
   b768c:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b768e:	2200      	movs	r2, #0
   b7690:	2102      	movs	r1, #2
   b7692:	4620      	mov	r0, r4
   b7694:	f7ff ff1b 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b7698:	227f      	movs	r2, #127	; 0x7f
   b769a:	2108      	movs	r1, #8
   b769c:	4620      	mov	r0, r4
   b769e:	f7ff ff16 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b76a2:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b76a6:	2280      	movs	r2, #128	; 0x80
   b76a8:	2114      	movs	r1, #20
   b76aa:	4620      	mov	r0, r4
   b76ac:	f7ff ff24 	bl	b74f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b76b0:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b76b4:	9b05      	ldr	r3, [sp, #20]
   b76b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b76ba:	2112      	movs	r1, #18
   b76bc:	4620      	mov	r0, r4
   b76be:	f7ff feeb 	bl	b7498 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b76c2:	4642      	mov	r2, r8
   b76c4:	211a      	movs	r1, #26
   b76c6:	4620      	mov	r0, r4
   b76c8:	f7ff ff01 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b76cc:	4652      	mov	r2, sl
   b76ce:	2102      	movs	r1, #2
   b76d0:	4620      	mov	r0, r4
   b76d2:	f7ff fefc 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b76d6:	f1ba 0f0c 	cmp.w	sl, #12
   b76da:	d104      	bne.n	b76e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b76dc:	2280      	movs	r2, #128	; 0x80
   b76de:	211a      	movs	r1, #26
   b76e0:	4620      	mov	r0, r4
   b76e2:	f7ff ff09 	bl	b74f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b76e6:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b76ea:	2108      	movs	r1, #8
   b76ec:	4620      	mov	r0, r4
   b76ee:	f7ff febc 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b76f2:	9b03      	ldr	r3, [sp, #12]
   b76f4:	4218      	tst	r0, r3
   b76f6:	d108      	bne.n	b770a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b76f8:	07c3      	lsls	r3, r0, #31
   b76fa:	d402      	bmi.n	b7702 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b76fc:	f1b8 0801 	subs.w	r8, r8, #1
   b7700:	d1f3      	bne.n	b76ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b7702:	2004      	movs	r0, #4
   b7704:	e04d      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b7706:	46c8      	mov	r8, r9
   b7708:	e7c0      	b.n	b768c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b770a:	210c      	movs	r1, #12
   b770c:	4620      	mov	r0, r4
   b770e:	f7ff feac 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b7712:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b7716:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b7718:	d146      	bne.n	b77a8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b771a:	b1dd      	cbz	r5, b7754 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b771c:	b1d6      	cbz	r6, b7754 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b771e:	2114      	movs	r1, #20
   b7720:	4620      	mov	r0, r4
   b7722:	f7ff fea2 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b7726:	7833      	ldrb	r3, [r6, #0]
   b7728:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b772a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b772c:	d33e      	bcc.n	b77ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b772e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b7730:	462b      	mov	r3, r5
   b7732:	2112      	movs	r1, #18
   b7734:	4620      	mov	r0, r4
   b7736:	f8cd b000 	str.w	fp, [sp]
   b773a:	f7ff fe47 	bl	b73cc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b773e:	2118      	movs	r1, #24
   b7740:	4620      	mov	r0, r4
   b7742:	f7ff fe92 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7746:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b774a:	f1b9 0f00 	cmp.w	r9, #0
   b774e:	d001      	beq.n	b7754 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b7750:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b7754:	f018 0f08 	tst.w	r8, #8
   b7758:	d12a      	bne.n	b77b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b775a:	b35d      	cbz	r5, b77b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b775c:	b356      	cbz	r6, b77b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b775e:	9b04      	ldr	r3, [sp, #16]
   b7760:	b343      	cbz	r3, b77b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b7762:	7832      	ldrb	r2, [r6, #0]
   b7764:	2a01      	cmp	r2, #1
   b7766:	d103      	bne.n	b7770 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b7768:	2f04      	cmp	r7, #4
   b776a:	d125      	bne.n	b77b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b776c:	2009      	movs	r0, #9
   b776e:	e018      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b7770:	d922      	bls.n	b77b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b7772:	bb0f      	cbnz	r7, b77b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b7774:	3a02      	subs	r2, #2
   b7776:	ab07      	add	r3, sp, #28
   b7778:	b2d2      	uxtb	r2, r2
   b777a:	4629      	mov	r1, r5
   b777c:	4620      	mov	r0, r4
   b777e:	f7ff fedc 	bl	b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b7782:	2801      	cmp	r0, #1
   b7784:	d10d      	bne.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b7786:	7833      	ldrb	r3, [r6, #0]
   b7788:	441d      	add	r5, r3
   b778a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b778e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b7792:	429a      	cmp	r2, r3
   b7794:	d110      	bne.n	b77b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b7796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b779a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b779e:	429a      	cmp	r2, r3
   b77a0:	d10a      	bne.n	b77b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b77a2:	b009      	add	sp, #36	; 0x24
   b77a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b77a8:	2002      	movs	r0, #2
   b77aa:	e7fa      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b77ac:	2005      	movs	r0, #5
   b77ae:	e7f8      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b77b0:	2003      	movs	r0, #3
   b77b2:	e7f6      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b77b4:	2001      	movs	r0, #1
   b77b6:	e7f4      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b77b8:	2008      	movs	r0, #8
   b77ba:	e7f2      	b.n	b77a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b77bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b77bc:	b510      	push	{r4, lr}
   b77be:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b77c0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b77c4:	9405      	str	r4, [sp, #20]
   b77c6:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b77ca:	9404      	str	r4, [sp, #16]
   b77cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b77ce:	9403      	str	r4, [sp, #12]
   b77d0:	9c08      	ldr	r4, [sp, #32]
   b77d2:	9200      	str	r2, [sp, #0]
   b77d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b77d8:	2230      	movs	r2, #48	; 0x30
   b77da:	460b      	mov	r3, r1
   b77dc:	210c      	movs	r1, #12
   b77de:	f7ff ff40 	bl	b7662 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b77e2:	b006      	add	sp, #24
   b77e4:	bd10      	pop	{r4, pc}

000b77e6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b77e6:	b570      	push	{r4, r5, r6, lr}
   b77e8:	b088      	sub	sp, #32
   b77ea:	4606      	mov	r6, r0
   b77ec:	461c      	mov	r4, r3
   b77ee:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b77f2:	4615      	mov	r5, r2
   b77f4:	b31a      	cbz	r2, b783e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b77f6:	781b      	ldrb	r3, [r3, #0]
   b77f8:	2b01      	cmp	r3, #1
   b77fa:	d920      	bls.n	b783e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b77fc:	2280      	movs	r2, #128	; 0x80
   b77fe:	211c      	movs	r1, #28
   b7800:	f7ff fe88 	bl	b7514 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b7804:	2307      	movs	r3, #7
   b7806:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b780a:	2300      	movs	r3, #0
   b780c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7810:	f10d 031f 	add.w	r3, sp, #31
   b7814:	e9cd 4300 	strd	r4, r3, [sp]
   b7818:	2201      	movs	r2, #1
   b781a:	462b      	mov	r3, r5
   b781c:	f10d 0117 	add.w	r1, sp, #23
   b7820:	4630      	mov	r0, r6
   b7822:	f7ff ffcb 	bl	b77bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b7826:	2801      	cmp	r0, #1
   b7828:	d107      	bne.n	b783a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b782a:	7823      	ldrb	r3, [r4, #0]
   b782c:	2b02      	cmp	r3, #2
   b782e:	d108      	bne.n	b7842 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b7830:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b7834:	2b00      	cmp	r3, #0
   b7836:	bf18      	it	ne
   b7838:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b783a:	b008      	add	sp, #32
   b783c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b783e:	2005      	movs	r0, #5
   b7840:	e7fb      	b.n	b783a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b7842:	2002      	movs	r0, #2
   b7844:	e7f9      	b.n	b783a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b7846 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b7846:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b7848:	460a      	mov	r2, r1
   b784a:	2126      	movs	r1, #38	; 0x26
   b784c:	f7ff bfcb 	b.w	b77e6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b7850 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b7850:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b7852:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b7854:	f10d 0203 	add.w	r2, sp, #3
   b7858:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b785a:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b785e:	f7ff fff2 	bl	b7846 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b7862:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b7866:	1e43      	subs	r3, r0, #1
   b7868:	4258      	negs	r0, r3
   b786a:	4158      	adcs	r0, r3
   b786c:	b003      	add	sp, #12
   b786e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7872 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b7872:	b570      	push	{r4, r5, r6, lr}
   b7874:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b7876:	2350      	movs	r3, #80	; 0x50
   b7878:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b787c:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b787e:	f10d 0316 	add.w	r3, sp, #22
   b7882:	2202      	movs	r2, #2
   b7884:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b7886:	4606      	mov	r6, r0
	buffer[1] = 0;
   b7888:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b788c:	f7ff fe55 	bl	b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b7890:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7892:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b7894:	d10f      	bne.n	b78b6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b7896:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b789a:	e9cd 4400 	strd	r4, r4, [sp]
   b789e:	4623      	mov	r3, r4
   b78a0:	2204      	movs	r2, #4
   b78a2:	a905      	add	r1, sp, #20
   b78a4:	4630      	mov	r0, r6
   b78a6:	f7ff ff89 	bl	b77bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b78aa:	2804      	cmp	r0, #4
   b78ac:	d003      	beq.n	b78b6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b78ae:	2801      	cmp	r0, #1
   b78b0:	bf14      	ite	ne
   b78b2:	4605      	movne	r5, r0
   b78b4:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b78b6:	4628      	mov	r0, r5
   b78b8:	b006      	add	sp, #24
   b78ba:	bd70      	pop	{r4, r5, r6, pc}

000b78bc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b78bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b78be:	4606      	mov	r6, r0
   b78c0:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b78c2:	4614      	mov	r4, r2
   b78c4:	b1ca      	cbz	r2, b78fa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b78c6:	781b      	ldrb	r3, [r3, #0]
   b78c8:	2b11      	cmp	r3, #17
   b78ca:	d916      	bls.n	b78fa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b78cc:	2330      	movs	r3, #48	; 0x30
   b78ce:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b78d0:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b78d2:	1c93      	adds	r3, r2, #2
   b78d4:	4621      	mov	r1, r4
   b78d6:	2202      	movs	r2, #2
   b78d8:	f7ff fe2f 	bl	b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b78dc:	2801      	cmp	r0, #1
   b78de:	d10a      	bne.n	b78f6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b78e0:	2300      	movs	r3, #0
   b78e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b78e6:	9003      	str	r0, [sp, #12]
   b78e8:	9500      	str	r5, [sp, #0]
   b78ea:	4623      	mov	r3, r4
   b78ec:	2204      	movs	r2, #4
   b78ee:	4621      	mov	r1, r4
   b78f0:	4630      	mov	r0, r6
   b78f2:	f7ff ff63 	bl	b77bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b78f6:	b004      	add	sp, #16
   b78f8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b78fa:	2005      	movs	r0, #5
   b78fc:	e7fb      	b.n	b78f6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b78fe <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b78fe:	b510      	push	{r4, lr}
   b7900:	b08a      	sub	sp, #40	; 0x28
   b7902:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b7904:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b7908:	681a      	ldr	r2, [r3, #0]
   b790a:	889b      	ldrh	r3, [r3, #4]
   b790c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b7910:	7863      	ldrb	r3, [r4, #1]
   b7912:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b7916:	78a3      	ldrb	r3, [r4, #2]
   b7918:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b791c:	78e3      	ldrb	r3, [r4, #3]
   b791e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b7922:	7923      	ldrb	r3, [r4, #4]
   b7924:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b7928:	2300      	movs	r3, #0
   b792a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b792e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7932:	9301      	str	r3, [sp, #4]
   b7934:	230c      	movs	r3, #12
	sendData[0] = command;
   b7936:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b793a:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b793e:	9300      	str	r3, [sp, #0]
   b7940:	2210      	movs	r2, #16
   b7942:	ab07      	add	r3, sp, #28
   b7944:	210e      	movs	r1, #14
   b7946:	f7ff fe8c 	bl	b7662 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b794a:	b00a      	add	sp, #40	; 0x28
   b794c:	bd10      	pop	{r4, pc}

000b794e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b794e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b7952:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b7954:	b08b      	sub	sp, #44	; 0x2c
   b7956:	4682      	mov	sl, r0
   b7958:	460f      	mov	r7, r1
   b795a:	4690      	mov	r8, r2
	if (validBits > 80) {
   b795c:	f200 8140 	bhi.w	b7be0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b7960:	2280      	movs	r2, #128	; 0x80
   b7962:	211c      	movs	r1, #28
   b7964:	f7ff fdd6 	bl	b7514 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b7968:	2393      	movs	r3, #147	; 0x93
   b796a:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b796e:	f1b8 0f00 	cmp.w	r8, #0
   b7972:	f000 80bc 	beq.w	b7aee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b7976:	783c      	ldrb	r4, [r7, #0]
   b7978:	2c04      	cmp	r4, #4
   b797a:	bf94      	ite	ls
   b797c:	2300      	movls	r3, #0
   b797e:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b7980:	2501      	movs	r5, #1
   b7982:	2600      	movs	r6, #0
   b7984:	e00b      	b.n	b799e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b7986:	2395      	movs	r3, #149	; 0x95
   b7988:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b798c:	f1b8 0f00 	cmp.w	r8, #0
   b7990:	f000 80af 	beq.w	b7af2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b7994:	783c      	ldrb	r4, [r7, #0]
   b7996:	2c07      	cmp	r4, #7
   b7998:	bf94      	ite	ls
   b799a:	2300      	movls	r3, #0
   b799c:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b799e:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b79a2:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b79a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b79a8:	2b00      	cmp	r3, #0
   b79aa:	f000 80a4 	beq.w	b7af6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b79ae:	2288      	movs	r2, #136	; 0x88
   b79b0:	f88d 201e 	strb.w	r2, [sp, #30]
   b79b4:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b79b6:	f014 0207 	ands.w	r2, r4, #7
   b79ba:	bf18      	it	ne
   b79bc:	2201      	movne	r2, #1
   b79be:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b79c2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b79c6:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b79c8:	d01d      	beq.n	b7a06 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b79ca:	2b00      	cmp	r3, #0
   b79cc:	bf14      	ite	ne
   b79ce:	f04f 0903 	movne.w	r9, #3
   b79d2:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b79d6:	f106 0c01 	add.w	ip, r6, #1
   b79da:	4591      	cmp	r9, r2
   b79dc:	bf94      	ite	ls
   b79de:	eb01 0e09 	addls.w	lr, r1, r9
   b79e2:	eb01 0e02 	addhi.w	lr, r1, r2
   b79e6:	fa57 fc8c 	uxtab	ip, r7, ip
   b79ea:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b79ee:	460a      	mov	r2, r1
   b79f0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b79f4:	3101      	adds	r1, #1
   b79f6:	b2c9      	uxtb	r1, r1
   b79f8:	445a      	add	r2, fp
   b79fa:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b79fe:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b7a02:	4571      	cmp	r1, lr
   b7a04:	d1f3      	bne.n	b79ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b7a06:	b10b      	cbz	r3, b7a0c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b7a08:	3008      	adds	r0, #8
   b7a0a:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b7a0c:	2c1f      	cmp	r4, #31
   b7a0e:	dd74      	ble.n	b7afa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b7a10:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b7a14:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b7a18:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b7a1c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7a20:	4053      	eors	r3, r2
   b7a22:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b7a26:	4053      	eors	r3, r2
   b7a28:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b7a2c:	4053      	eors	r3, r2
   b7a2e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b7a32:	2207      	movs	r2, #7
   b7a34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b7a38:	a907      	add	r1, sp, #28
   b7a3a:	4650      	mov	r0, sl
   b7a3c:	f7ff fd7d 	bl	b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b7a40:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b7a42:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b7a44:	f040 80c8 	bne.w	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b7a48:	2300      	movs	r3, #0
   b7a4a:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b7a4e:	2303      	movs	r3, #3
   b7a50:	f88d 301b 	strb.w	r3, [sp, #27]
   b7a54:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b7a56:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b7a5a:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b7a5e:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7a62:	9305      	str	r3, [sp, #20]
   b7a64:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b7a68:	b2d2      	uxtb	r2, r2
   b7a6a:	211a      	movs	r1, #26
   b7a6c:	4650      	mov	r0, sl
   b7a6e:	f7ff fd2e 	bl	b74ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b7a72:	9b05      	ldr	r3, [sp, #20]
   b7a74:	9302      	str	r3, [sp, #8]
   b7a76:	f10d 031a 	add.w	r3, sp, #26
   b7a7a:	2200      	movs	r2, #0
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	f10d 031b 	add.w	r3, sp, #27
   b7a82:	9203      	str	r2, [sp, #12]
   b7a84:	9300      	str	r3, [sp, #0]
   b7a86:	464a      	mov	r2, r9
   b7a88:	465b      	mov	r3, fp
   b7a8a:	a907      	add	r1, sp, #28
   b7a8c:	4650      	mov	r0, sl
   b7a8e:	f7ff fe95 	bl	b77bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b7a92:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b7a94:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b7a96:	d14c      	bne.n	b7b32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b7a98:	211c      	movs	r1, #28
   b7a9a:	4650      	mov	r0, sl
   b7a9c:	f7ff fce5 	bl	b746a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b7aa0:	0681      	lsls	r1, r0, #26
   b7aa2:	f100 8099 	bmi.w	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b7aa6:	f010 001f 	ands.w	r0, r0, #31
   b7aaa:	bf08      	it	eq
   b7aac:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b7aae:	42a0      	cmp	r0, r4
   b7ab0:	f340 8087 	ble.w	b7bc2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b7ab4:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7ab6:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b7aba:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7abc:	f013 0307 	ands.w	r3, r3, #7
   b7ac0:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b7ac4:	bf18      	it	ne
   b7ac6:	2301      	movne	r3, #1
   b7ac8:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b7aca:	4418      	add	r0, r3
   b7acc:	ab0a      	add	r3, sp, #40	; 0x28
   b7ace:	4418      	add	r0, r3
   b7ad0:	2301      	movs	r3, #1
   b7ad2:	fa03 f202 	lsl.w	r2, r3, r2
   b7ad6:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b7ada:	4313      	orrs	r3, r2
   b7adc:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b7ae0:	e794      	b.n	b7a0c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b7ae2:	2397      	movs	r3, #151	; 0x97
   b7ae4:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b7ae8:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b7aea:	4623      	mov	r3, r4
				break;
   b7aec:	e757      	b.n	b799e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b7aee:	4643      	mov	r3, r8
   b7af0:	e746      	b.n	b7980 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b7af2:	4643      	mov	r3, r8
   b7af4:	e753      	b.n	b799e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b7af6:	2102      	movs	r1, #2
   b7af8:	e75d      	b.n	b79b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b7afa:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b7afc:	3302      	adds	r3, #2
   b7afe:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b7b00:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7b04:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b7b08:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b7b0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b7b10:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7b14:	bf18      	it	ne
   b7b16:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b7b1a:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7b1c:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b7b1e:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b7b22:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7b26:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b7b2a:	f88d 301b 	strb.w	r3, [sp, #27]
   b7b2e:	9404      	str	r4, [sp, #16]
   b7b30:	e795      	b.n	b7a5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b7b32:	2801      	cmp	r0, #1
   b7b34:	d150      	bne.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b7b36:	9b04      	ldr	r3, [sp, #16]
   b7b38:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b7b3a:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b7b3e:	f77f af67 	ble.w	b7a10 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b7b42:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7b46:	2b88      	cmp	r3, #136	; 0x88
   b7b48:	d13e      	bne.n	b7bc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b7b4a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7b4c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b7b4e:	3601      	adds	r6, #1
   b7b50:	441a      	add	r2, r3
   b7b52:	fa57 f686 	uxtab	r6, r7, r6
   b7b56:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b7b58:	4619      	mov	r1, r3
   b7b5a:	a80a      	add	r0, sp, #40	; 0x28
   b7b5c:	3301      	adds	r3, #1
   b7b5e:	4401      	add	r1, r0
   b7b60:	b2db      	uxtb	r3, r3
   b7b62:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b7b66:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b7b6a:	4293      	cmp	r3, r2
   b7b6c:	d1f4      	bne.n	b7b58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b7b6e:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b7b72:	2e03      	cmp	r6, #3
   b7b74:	d137      	bne.n	b7be6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b7b76:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b7b7a:	bba4      	cbnz	r4, b7be6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7b7c:	f10d 031e 	add.w	r3, sp, #30
   b7b80:	2201      	movs	r2, #1
   b7b82:	4659      	mov	r1, fp
   b7b84:	4650      	mov	r0, sl
   b7b86:	f7ff fcd8 	bl	b753a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b7b8a:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7b8c:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b7b8e:	d123      	bne.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b7b90:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7b94:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b7b98:	429a      	cmp	r2, r3
   b7b9a:	d127      	bne.n	b7bec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b7b9c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7ba0:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b7ba4:	429a      	cmp	r2, r3
   b7ba6:	d121      	bne.n	b7bec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b7ba8:	f89b 3000 	ldrb.w	r3, [fp]
   b7bac:	075a      	lsls	r2, r3, #29
   b7bae:	d50e      	bpl.n	b7bce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b7bb0:	3501      	adds	r5, #1
   b7bb2:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b7bb4:	2d03      	cmp	r5, #3
   b7bb6:	d094      	beq.n	b7ae2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b7bb8:	2d04      	cmp	r5, #4
   b7bba:	d002      	beq.n	b7bc2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b7bbc:	2d02      	cmp	r5, #2
   b7bbe:	f43f aee2 	beq.w	b7986 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b7bc2:	f04f 0906 	mov.w	r9, #6
   b7bc6:	e007      	b.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b7bc8:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7bca:	2204      	movs	r2, #4
   b7bcc:	e7bf      	b.n	b7b4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b7bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b7bd2:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b7bd4:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b7bd6:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b7bd8:	4648      	mov	r0, r9
   b7bda:	b00b      	add	sp, #44	; 0x2c
   b7bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b7be0:	f04f 0907 	mov.w	r9, #7
   b7be4:	e7f8      	b.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b7be6:	f04f 0902 	mov.w	r9, #2
   b7bea:	e7f5      	b.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b7bec:	f04f 0908 	mov.w	r9, #8
   b7bf0:	e7f2      	b.n	b7bd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b7bf2 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b7bf2:	b508      	push	{r3, lr}
   b7bf4:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b7bf6:	2200      	movs	r2, #0
   b7bf8:	f7ff fea9 	bl	b794e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b7bfc:	1e43      	subs	r3, r0, #1
   b7bfe:	4258      	negs	r0, r3
   b7c00:	4158      	adcs	r0, r3
   b7c02:	bd08      	pop	{r3, pc}

000b7c04 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b7c04:	6001      	str	r1, [r0, #0]
}
   b7c06:	4770      	bx	lr

000b7c08 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b7c08:	b510      	push	{r4, lr}
   b7c0a:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b7c0c:	2101      	movs	r1, #1
   b7c0e:	8800      	ldrh	r0, [r0, #0]
   b7c10:	f001 ff44 	bl	b9a9c <pinMode>
	digitalWrite(_pin, LOW);
   b7c14:	8820      	ldrh	r0, [r4, #0]
   b7c16:	2100      	movs	r1, #0
   b7c18:	f001 ff51 	bl	b9abe <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7c1c:	2002      	movs	r0, #2
   b7c1e:	f000 fe77 	bl	b8910 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b7c22:	8820      	ldrh	r0, [r4, #0]
   b7c24:	2101      	movs	r1, #1
   b7c26:	f001 ff4a 	bl	b9abe <digitalWrite>
   b7c2a:	2005      	movs	r0, #5
   b7c2c:	f000 fe70 	bl	b8910 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b7c30:	8820      	ldrh	r0, [r4, #0]
   b7c32:	2100      	movs	r1, #0
   b7c34:	f001 ff43 	bl	b9abe <digitalWrite>
	pinMode(_pin,INPUT);
   b7c38:	8820      	ldrh	r0, [r4, #0]
   b7c3a:	2100      	movs	r1, #0
   b7c3c:	f001 ff2e 	bl	b9a9c <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b7c40:	8820      	ldrh	r0, [r4, #0]
   b7c42:	2101      	movs	r1, #1
   b7c44:	f001 ff7e 	bl	b9b44 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b7c48:	233a      	movs	r3, #58	; 0x3a
   b7c4a:	fb90 f0f3 	sdiv	r0, r0, r3
   b7c4e:	bd10      	pop	{r4, pc}

000b7c50 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b7c50:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b7c52:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b7c54:	2301      	movs	r3, #1
	_pin = pin;
   b7c56:	7181      	strb	r1, [r0, #6]
	_type = type;
   b7c58:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b7c5a:	7403      	strb	r3, [r0, #16]
}
   b7c5c:	bd10      	pop	{r4, pc}

000b7c5e <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b7c5e:	b510      	push	{r4, lr}
   b7c60:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b7c62:	2100      	movs	r1, #0
   b7c64:	7980      	ldrb	r0, [r0, #6]
   b7c66:	f001 ff19 	bl	b9a9c <pinMode>
	digitalWrite(_pin, HIGH);
   b7c6a:	79a0      	ldrb	r0, [r4, #6]
   b7c6c:	2101      	movs	r1, #1
   b7c6e:	f001 ff26 	bl	b9abe <digitalWrite>
	_lastreadtime = 0;
   b7c72:	2300      	movs	r3, #0
   b7c74:	60e3      	str	r3, [r4, #12]
}
   b7c76:	bd10      	pop	{r4, pc}

000b7c78 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b7c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7c7c:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7c7e:	f000 fe4f 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b7c82:	68e3      	ldr	r3, [r4, #12]
   b7c84:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b7c86:	bf84      	itt	hi
   b7c88:	2300      	movhi	r3, #0
   b7c8a:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b7c8c:	7c23      	ldrb	r3, [r4, #16]
   b7c8e:	b923      	cbnz	r3, b7c9a <_ZN3DHT4readEv+0x22>
   b7c90:	68e3      	ldr	r3, [r4, #12]
   b7c92:	1ac0      	subs	r0, r0, r3
   b7c94:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b7c98:	d367      	bcc.n	b7d6a <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b7c9a:	2500      	movs	r5, #0
   b7c9c:	7425      	strb	r5, [r4, #16]
   b7c9e:	f000 fe3f 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b7ca2:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b7ca4:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7ca6:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b7ca8:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7caa:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b7cac:	f001 ff07 	bl	b9abe <digitalWrite>
	delay(250);
   b7cb0:	20fa      	movs	r0, #250	; 0xfa
   b7cb2:	f001 fb33 	bl	b931c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b7cb6:	79a0      	ldrb	r0, [r4, #6]
   b7cb8:	2101      	movs	r1, #1
   b7cba:	f001 feef 	bl	b9a9c <pinMode>
	digitalWrite(_pin, LOW);
   b7cbe:	4629      	mov	r1, r5
   b7cc0:	79a0      	ldrb	r0, [r4, #6]
   b7cc2:	f001 fefc 	bl	b9abe <digitalWrite>
	delay(20);
   b7cc6:	2014      	movs	r0, #20
   b7cc8:	f001 fb28 	bl	b931c <delay>
	noInterrupts();
   b7ccc:	f001 fce2 	bl	b9694 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b7cd0:	2101      	movs	r1, #1
   b7cd2:	79a0      	ldrb	r0, [r4, #6]
   b7cd4:	f001 fef3 	bl	b9abe <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7cd8:	2028      	movs	r0, #40	; 0x28
   b7cda:	f000 fe19 	bl	b8910 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b7cde:	79a0      	ldrb	r0, [r4, #6]
   b7ce0:	4629      	mov	r1, r5
   b7ce2:	f001 fedb 	bl	b9a9c <pinMode>
	uint8_t j = 0, i;
   b7ce6:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b7ce8:	2701      	movs	r7, #1
   b7cea:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b7cee:	79a0      	ldrb	r0, [r4, #6]
   b7cf0:	f001 fefe 	bl	b9af0 <digitalRead>
   b7cf4:	42b8      	cmp	r0, r7
   b7cf6:	fa5f f988 	uxtb.w	r9, r8
   b7cfa:	d108      	bne.n	b7d0e <_ZN3DHT4readEv+0x96>
   b7cfc:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b7cfe:	f108 0801 	add.w	r8, r8, #1
   b7d02:	f000 fe05 	bl	b8910 <HAL_Delay_Microseconds>
   b7d06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7d0a:	d1f0      	bne.n	b7cee <_ZN3DHT4readEv+0x76>
   b7d0c:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b7d0e:	79a0      	ldrb	r0, [r4, #6]
   b7d10:	f001 feee 	bl	b9af0 <digitalRead>

		if (counter == 255) break;
   b7d14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b7d18:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b7d1a:	d014      	beq.n	b7d46 <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b7d1c:	2d03      	cmp	r5, #3
   b7d1e:	d90e      	bls.n	b7d3e <_ZN3DHT4readEv+0xc6>
   b7d20:	07ea      	lsls	r2, r5, #31
   b7d22:	d40c      	bmi.n	b7d3e <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b7d24:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b7d26:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b7d28:	5ca3      	ldrb	r3, [r4, r2]
   b7d2a:	005b      	lsls	r3, r3, #1
   b7d2c:	b2db      	uxtb	r3, r3
   b7d2e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b7d30:	7a21      	ldrb	r1, [r4, #8]
   b7d32:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b7d34:	bf3c      	itt	cc
   b7d36:	f043 0301 	orrcc.w	r3, r3, #1
   b7d3a:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b7d3c:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b7d3e:	3501      	adds	r5, #1
   b7d40:	b2ed      	uxtb	r5, r5
   b7d42:	2d55      	cmp	r5, #85	; 0x55
   b7d44:	d1d1      	bne.n	b7cea <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b7d46:	f001 fca7 	bl	b9698 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b7d4a:	2e27      	cmp	r6, #39	; 0x27
   b7d4c:	d90f      	bls.n	b7d6e <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b7d4e:	7863      	ldrb	r3, [r4, #1]
   b7d50:	7820      	ldrb	r0, [r4, #0]
   b7d52:	4418      	add	r0, r3
   b7d54:	78a3      	ldrb	r3, [r4, #2]
   b7d56:	4418      	add	r0, r3
   b7d58:	78e3      	ldrb	r3, [r4, #3]
   b7d5a:	4418      	add	r0, r3
   b7d5c:	7923      	ldrb	r3, [r4, #4]
   b7d5e:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b7d60:	1ac3      	subs	r3, r0, r3
   b7d62:	4258      	negs	r0, r3
   b7d64:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b7d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b7d6a:	2001      	movs	r0, #1
   b7d6c:	e7fb      	b.n	b7d66 <_ZN3DHT4readEv+0xee>
	return false;
   b7d6e:	2000      	movs	r0, #0
   b7d70:	e7f9      	b.n	b7d66 <_ZN3DHT4readEv+0xee>
	...

000b7d74 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b7d74:	b510      	push	{r4, lr}
   b7d76:	4604      	mov	r4, r0
	if (read()) {
   b7d78:	f7ff ff7e 	bl	b7c78 <_ZN3DHT4readEv>
   b7d7c:	b320      	cbz	r0, b7dc8 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b7d7e:	79e3      	ldrb	r3, [r4, #7]
   b7d80:	2b0b      	cmp	r3, #11
   b7d82:	d01b      	beq.n	b7dbc <_ZN3DHT15readTemperatureEv+0x48>
   b7d84:	3b15      	subs	r3, #21
   b7d86:	2b01      	cmp	r3, #1
   b7d88:	d81e      	bhi.n	b7dc8 <_ZN3DHT15readTemperatureEv+0x54>
   b7d8a:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b7d8c:	eddf 6a10 	vldr	s13, [pc, #64]	; b7dd0 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b7d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b7d94:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b7d98:	78e2      	ldrb	r2, [r4, #3]
   b7d9a:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b7d9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b7da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b7da6:	061b      	lsls	r3, r3, #24
				f += data[3];
   b7da8:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b7dac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b7db0:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b7db4:	d507      	bpl.n	b7dc6 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b7db6:	eeb1 0a40 	vneg.f32	s0, s0
   b7dba:	e004      	b.n	b7dc6 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b7dbc:	78a3      	ldrb	r3, [r4, #2]
   b7dbe:	ee00 3a10 	vmov	s0, r3
   b7dc2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b7dc6:	bd10      	pop	{r4, pc}
		switch (_type) {
   b7dc8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7dd4 <_ZN3DHT15readTemperatureEv+0x60>
   b7dcc:	e7fb      	b.n	b7dc6 <_ZN3DHT15readTemperatureEv+0x52>
   b7dce:	bf00      	nop
   b7dd0:	43800000 	.word	0x43800000
   b7dd4:	7fc00000 	.word	0x7fc00000

000b7dd8 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b7dd8:	f7ff bfcc 	b.w	b7d74 <_ZN3DHT15readTemperatureEv>

000b7ddc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7ddc:	b510      	push	{r4, lr}
   b7dde:	4b04      	ldr	r3, [pc, #16]	; (b7df0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7de0:	6003      	str	r3, [r0, #0]
   b7de2:	4604      	mov	r4, r0
  if(buffer) {
   b7de4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7de6:	b108      	cbz	r0, b7dec <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7de8:	f000 ff8e 	bl	b8d08 <free>
    buffer = NULL;
  }
}
   b7dec:	4620      	mov	r0, r4
   b7dee:	bd10      	pop	{r4, pc}
   b7df0:	000bbd2c 	.word	0x000bbd2c

000b7df4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7df4:	b510      	push	{r4, lr}
   b7df6:	4604      	mov	r4, r0
}
   b7df8:	f7ff fff0 	bl	b7ddc <_ZN16Adafruit_SSD1306D1Ev>
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	2150      	movs	r1, #80	; 0x50
   b7e00:	f7fc f949 	bl	b4096 <_ZdlPvj>
   b7e04:	4620      	mov	r0, r4
   b7e06:	bd10      	pop	{r4, pc}

000b7e08 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7e08:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7e0a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7e0c:	db4b      	blt.n	b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7e0e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b7e12:	428c      	cmp	r4, r1
   b7e14:	dd47      	ble.n	b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7e16:	2a00      	cmp	r2, #0
   b7e18:	db45      	blt.n	b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7e1a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7e1e:	4294      	cmp	r4, r2
   b7e20:	dd41      	ble.n	b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b7e22:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b7e24:	2c02      	cmp	r4, #2
   b7e26:	d01f      	beq.n	b7e68 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7e28:	2c03      	cmp	r4, #3
   b7e2a:	d026      	beq.n	b7e7a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7e2c:	2c01      	cmp	r4, #1
   b7e2e:	d104      	bne.n	b7e3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7e30:	8904      	ldrh	r4, [r0, #8]
   b7e32:	43d2      	mvns	r2, r2
   b7e34:	4414      	add	r4, r2
      break;
   b7e36:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7e38:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7e3a:	2b01      	cmp	r3, #1
   b7e3c:	d023      	beq.n	b7e86 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7e3e:	2b02      	cmp	r3, #2
   b7e40:	d032      	beq.n	b7ea8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b7e42:	bb83      	cbnz	r3, b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b7e44:	2a00      	cmp	r2, #0
   b7e46:	4613      	mov	r3, r2
   b7e48:	8904      	ldrh	r4, [r0, #8]
   b7e4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7e4c:	bfb8      	it	lt
   b7e4e:	1dd3      	addlt	r3, r2, #7
   b7e50:	10db      	asrs	r3, r3, #3
   b7e52:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7e56:	f002 0207 	and.w	r2, r2, #7
   b7e5a:	2301      	movs	r3, #1
   b7e5c:	4093      	lsls	r3, r2
   b7e5e:	5c42      	ldrb	r2, [r0, r1]
   b7e60:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7e64:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b7e66:	e01e      	b.n	b7ea6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b7e68:	8904      	ldrh	r4, [r0, #8]
   b7e6a:	3c01      	subs	r4, #1
   b7e6c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b7e6e:	8944      	ldrh	r4, [r0, #10]
   b7e70:	43d2      	mvns	r2, r2
   b7e72:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b7e74:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b7e76:	b212      	sxth	r2, r2
      break;
   b7e78:	e7df      	b.n	b7e3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b7e7a:	8944      	ldrh	r4, [r0, #10]
   b7e7c:	3c01      	subs	r4, #1
   b7e7e:	1a64      	subs	r4, r4, r1
      break;
   b7e80:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b7e82:	b222      	sxth	r2, r4
      break;
   b7e84:	e7d9      	b.n	b7e3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b7e86:	2a00      	cmp	r2, #0
   b7e88:	8904      	ldrh	r4, [r0, #8]
   b7e8a:	4613      	mov	r3, r2
   b7e8c:	bfb8      	it	lt
   b7e8e:	1dd3      	addlt	r3, r2, #7
   b7e90:	10db      	asrs	r3, r3, #3
   b7e92:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7e96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7e98:	f002 0007 	and.w	r0, r2, #7
   b7e9c:	2201      	movs	r2, #1
   b7e9e:	4082      	lsls	r2, r0
   b7ea0:	5c58      	ldrb	r0, [r3, r1]
   b7ea2:	4302      	orrs	r2, r0
   b7ea4:	545a      	strb	r2, [r3, r1]
}
   b7ea6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7ea8:	2a00      	cmp	r2, #0
   b7eaa:	4613      	mov	r3, r2
   b7eac:	8904      	ldrh	r4, [r0, #8]
   b7eae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7eb0:	bfb8      	it	lt
   b7eb2:	1dd3      	addlt	r3, r2, #7
   b7eb4:	10db      	asrs	r3, r3, #3
   b7eb6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7eba:	f002 0207 	and.w	r2, r2, #7
   b7ebe:	2301      	movs	r3, #1
   b7ec0:	fa03 f202 	lsl.w	r2, r3, r2
   b7ec4:	5c43      	ldrb	r3, [r0, r1]
   b7ec6:	405a      	eors	r2, r3
   b7ec8:	e7cc      	b.n	b7e64 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7ecc <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7ecc:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b7ece:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7ed0:	4604      	mov	r4, r0
   b7ed2:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b7ed4:	2180      	movs	r1, #128	; 0x80
   b7ed6:	f7fe ffcf 	bl	b6e78 <_ZN12Adafruit_GFXC1Ess>
   b7eda:	2500      	movs	r5, #0
   b7edc:	4b0d      	ldr	r3, [pc, #52]	; (b7f14 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b7ede:	6023      	str	r3, [r4, #0]
   b7ee0:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b7ee2:	f001 fe9f 	bl	b9c24 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b7ee6:	23ff      	movs	r3, #255	; 0xff
   b7ee8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b7eec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b7ef0:	4b09      	ldr	r3, [pc, #36]	; (b7f18 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b7ef2:	63a3      	str	r3, [r4, #56]	; 0x38
   b7ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7ef8:	2301      	movs	r3, #1
   b7efa:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b7efe:	86a2      	strh	r2, [r4, #52]	; 0x34
   b7f00:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b7f04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b7f08:	6425      	str	r5, [r4, #64]	; 0x40
   b7f0a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b7f0e:	4620      	mov	r0, r4
   b7f10:	bd70      	pop	{r4, r5, r6, pc}
   b7f12:	bf00      	nop
   b7f14:	000bbd2c 	.word	0x000bbd2c
   b7f18:	000bb738 	.word	0x000bb738

000b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f1e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7f20:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7f22:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7f24:	b190      	cbz	r0, b7f4c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b7f26:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7f2a:	f001 fc7f 	bl	b982c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7f2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7f30:	6803      	ldr	r3, [r0, #0]
   b7f32:	2100      	movs	r1, #0
   b7f34:	689b      	ldr	r3, [r3, #8]
   b7f36:	4798      	blx	r3
    WIRE_WRITE(c);
   b7f38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7f3a:	6803      	ldr	r3, [r0, #0]
   b7f3c:	4629      	mov	r1, r5
   b7f3e:	689b      	ldr	r3, [r3, #8]
   b7f40:	4798      	blx	r3
    wire->endTransmission();
   b7f42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b7f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b7f48:	f001 bc77 	b.w	b983a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7f4c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7f50:	4601      	mov	r1, r0
   b7f52:	b298      	uxth	r0, r3
   b7f54:	f001 fdb3 	bl	b9abe <digitalWrite>
  if(spi) {
   b7f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7f5a:	b120      	cbz	r0, b7f66 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b7f5c:	4629      	mov	r1, r5
}
   b7f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b7f62:	f000 bff3 	b.w	b8f4c <_ZN8SPIClass8transferEh>
   b7f66:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7f68:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7f6a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7f6e:	ea05 0107 	and.w	r1, r5, r7
   b7f72:	b280      	uxth	r0, r0
   b7f74:	f001 fda3 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7f78:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7f7c:	2101      	movs	r1, #1
   b7f7e:	b280      	uxth	r0, r0
   b7f80:	f001 fd9d 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7f84:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7f88:	2100      	movs	r1, #0
   b7f8a:	b280      	uxth	r0, r0
   b7f8c:	f001 fd97 	bl	b9abe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7f90:	3e01      	subs	r6, #1
   b7f92:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b7f96:	d1e8      	bne.n	b7f6a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b7f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f9a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7f9a:	b538      	push	{r3, r4, r5, lr}
   b7f9c:	4604      	mov	r4, r0
  TRANSACTION_START
   b7f9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7fa0:	460d      	mov	r5, r1
  TRANSACTION_START
   b7fa2:	b180      	cbz	r0, b7fc6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b7fa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7fa6:	f001 fc33 	bl	b9810 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b7faa:	2d00      	cmp	r5, #0
   b7fac:	4620      	mov	r0, r4
   b7fae:	bf14      	ite	ne
   b7fb0:	21a7      	movne	r1, #167	; 0xa7
   b7fb2:	21a6      	moveq	r1, #166	; 0xa6
   b7fb4:	f7ff ffb2 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b7fb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7fba:	b188      	cbz	r0, b7fe0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b7fbc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7fc2:	f001 bc25 	b.w	b9810 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b7fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7fc8:	b118      	cbz	r0, b7fd2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b7fca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7fce:	f000 ff4f 	bl	b8e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7fd2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7fd6:	2100      	movs	r1, #0
   b7fd8:	b280      	uxth	r0, r0
   b7fda:	f001 fd70 	bl	b9abe <digitalWrite>
   b7fde:	e7e4      	b.n	b7faa <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b7fe0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7fe4:	2101      	movs	r1, #1
   b7fe6:	b280      	uxth	r0, r0
   b7fe8:	f001 fd69 	bl	b9abe <digitalWrite>
   b7fec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7fee:	b118      	cbz	r0, b7ff8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b7ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b7ff4:	f000 bf22 	b.w	b8e3c <_ZN8SPIClass14endTransactionEv>
}
   b7ff8:	bd38      	pop	{r3, r4, r5, pc}

000b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7ffa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7ffe:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8000:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8002:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8004:	188f      	adds	r7, r1, r2
   b8006:	b340      	cbz	r0, b805a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b8008:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b800c:	f001 fc0e 	bl	b982c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8010:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8012:	6803      	ldr	r3, [r0, #0]
   b8014:	2100      	movs	r1, #0
   b8016:	689b      	ldr	r3, [r3, #8]
   b8018:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b801a:	2601      	movs	r6, #1
    while(n--) {
   b801c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b801e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b8020:	d017      	beq.n	b8052 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b8022:	2e1f      	cmp	r6, #31
   b8024:	d90c      	bls.n	b8040 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b8026:	f001 fc08 	bl	b983a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b802a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b802e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8030:	f001 fbfc 	bl	b982c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8034:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8036:	6803      	ldr	r3, [r0, #0]
   b8038:	2100      	movs	r1, #0
   b803a:	689b      	ldr	r3, [r3, #8]
   b803c:	4798      	blx	r3
        bytesOut = 1;
   b803e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8040:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8042:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8046:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8048:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b804a:	689b      	ldr	r3, [r3, #8]
   b804c:	4798      	blx	r3
      bytesOut++;
   b804e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b8050:	e7e4      	b.n	b801c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b8052:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b8056:	f001 bbf0 	b.w	b983a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b805a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b805e:	4601      	mov	r1, r0
   b8060:	b298      	uxth	r0, r3
   b8062:	f001 fd2c 	bl	b9abe <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b8066:	42bd      	cmp	r5, r7
   b8068:	d022      	beq.n	b80b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b806a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b806c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8070:	b118      	cbz	r0, b807a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b8072:	4649      	mov	r1, r9
   b8074:	f000 ff6a 	bl	b8f4c <_ZN8SPIClass8transferEh>
   b8078:	e7f5      	b.n	b8066 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b807a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b807c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8080:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8084:	ea09 0108 	and.w	r1, r9, r8
   b8088:	b280      	uxth	r0, r0
   b808a:	f001 fd18 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b808e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8092:	2101      	movs	r1, #1
   b8094:	b280      	uxth	r0, r0
   b8096:	f001 fd12 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b809a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b809e:	2100      	movs	r1, #0
   b80a0:	b280      	uxth	r0, r0
   b80a2:	f001 fd0c 	bl	b9abe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b80a6:	3e01      	subs	r6, #1
   b80a8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b80ac:	d1e8      	bne.n	b8080 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b80ae:	e7da      	b.n	b8066 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b80b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b80b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b80b8:	1dda      	adds	r2, r3, #7
   b80ba:	bf48      	it	mi
   b80bc:	f103 020e 	addmi.w	r2, r3, #14
   b80c0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b80c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b80c6:	10d2      	asrs	r2, r2, #3
   b80c8:	435a      	muls	r2, r3
   b80ca:	2100      	movs	r1, #0
   b80cc:	f001 bfa8 	b.w	ba020 <memset>

000b80d0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b80d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b80d4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b80d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b80d8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b80dc:	4604      	mov	r4, r0
   b80de:	460f      	mov	r7, r1
   b80e0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b80e2:	b1d3      	cbz	r3, b811a <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b80e4:	4620      	mov	r0, r4
   b80e6:	f7ff ffe5 	bl	b80b4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b80ea:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b80ee:	2a20      	cmp	r2, #32
   b80f0:	dc25      	bgt.n	b813e <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b80f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b80f6:	2320      	movs	r3, #32
   b80f8:	3a20      	subs	r2, #32
   b80fa:	3973      	subs	r1, #115	; 0x73
   b80fc:	2001      	movs	r0, #1
   b80fe:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8102:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b8106:	2373      	movs	r3, #115	; 0x73
   b8108:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b810c:	9300      	str	r3, [sp, #0]
   b810e:	f342 024f 	sbfx	r2, r2, #1, #16
   b8112:	4b85      	ldr	r3, [pc, #532]	; (b8328 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b8114:	f341 014f 	sbfx	r1, r1, #1, #16
   b8118:	e01b      	b.n	b8152 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b811a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b811e:	1dd8      	adds	r0, r3, #7
   b8120:	bf48      	it	mi
   b8122:	f103 000e 	addmi.w	r0, r3, #14
   b8126:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b812a:	10c0      	asrs	r0, r0, #3
   b812c:	4358      	muls	r0, r3
   b812e:	f000 fde3 	bl	b8cf8 <malloc>
   b8132:	62e0      	str	r0, [r4, #44]	; 0x2c
   b8134:	2800      	cmp	r0, #0
   b8136:	d1d5      	bne.n	b80e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8138:	b004      	add	sp, #16
   b813a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b813e:	2340      	movs	r3, #64	; 0x40
   b8140:	f04f 0c01 	mov.w	ip, #1
   b8144:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b8148:	2380      	movs	r3, #128	; 0x80
   b814a:	9300      	str	r3, [sp, #0]
   b814c:	2200      	movs	r2, #0
   b814e:	4b77      	ldr	r3, [pc, #476]	; (b832c <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b8150:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8152:	4620      	mov	r0, r4
   b8154:	f7fe fea6 	bl	b6ea4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b8158:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b815a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b815e:	2800      	cmp	r0, #0
   b8160:	d078      	beq.n	b8254 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8162:	2d00      	cmp	r5, #0
   b8164:	d174      	bne.n	b8250 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b8166:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b816a:	2b20      	cmp	r3, #32
   b816c:	bf0c      	ite	eq
   b816e:	253c      	moveq	r5, #60	; 0x3c
   b8170:	253d      	movne	r5, #61	; 0x3d
   b8172:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b8176:	f1b8 0f00 	cmp.w	r8, #0
   b817a:	d001      	beq.n	b8180 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b817c:	f001 fb4c 	bl	b9818 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b8180:	b1fe      	cbz	r6, b81c2 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b8182:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8186:	2800      	cmp	r0, #0
   b8188:	db1b      	blt.n	b81c2 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b818a:	2101      	movs	r1, #1
   b818c:	b280      	uxth	r0, r0
   b818e:	f001 fc85 	bl	b9a9c <pinMode>
    digitalWrite(rstPin, HIGH);
   b8192:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8196:	2101      	movs	r1, #1
   b8198:	b280      	uxth	r0, r0
   b819a:	f001 fc90 	bl	b9abe <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b819e:	2001      	movs	r0, #1
   b81a0:	f001 f8bc 	bl	b931c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b81a4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b81a8:	2100      	movs	r1, #0
   b81aa:	b280      	uxth	r0, r0
   b81ac:	f001 fc87 	bl	b9abe <digitalWrite>
    delay(10);                  // Wait 10 ms
   b81b0:	200a      	movs	r0, #10
   b81b2:	f001 f8b3 	bl	b931c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b81b6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b81ba:	2101      	movs	r1, #1
   b81bc:	b280      	uxth	r0, r0
   b81be:	f001 fc7e 	bl	b9abe <digitalWrite>
  TRANSACTION_START
   b81c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b81c4:	2800      	cmp	r0, #0
   b81c6:	d074      	beq.n	b82b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b81c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b81ca:	f001 fb21 	bl	b9810 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b81ce:	2204      	movs	r2, #4
   b81d0:	4957      	ldr	r1, [pc, #348]	; (b8330 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b81d2:	4620      	mov	r0, r4
   b81d4:	f7ff ff11 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b81d8:	8961      	ldrh	r1, [r4, #10]
   b81da:	3901      	subs	r1, #1
   b81dc:	b2c9      	uxtb	r1, r1
   b81de:	4620      	mov	r0, r4
   b81e0:	f7ff fe9c 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b81e4:	4953      	ldr	r1, [pc, #332]	; (b8334 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b81e6:	2204      	movs	r2, #4
   b81e8:	4620      	mov	r0, r4
   b81ea:	f7ff ff06 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b81ee:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b81f2:	2b01      	cmp	r3, #1
   b81f4:	bf0c      	ite	eq
   b81f6:	2110      	moveq	r1, #16
   b81f8:	2114      	movne	r1, #20
   b81fa:	4620      	mov	r0, r4
   b81fc:	f7ff fe8e 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8200:	2204      	movs	r2, #4
   b8202:	494d      	ldr	r1, [pc, #308]	; (b8338 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8204:	4620      	mov	r0, r4
   b8206:	f7ff fef8 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b820a:	68a3      	ldr	r3, [r4, #8]
   b820c:	4a4b      	ldr	r2, [pc, #300]	; (b833c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b820e:	4293      	cmp	r3, r2
   b8210:	d15c      	bne.n	b82cc <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8212:	494b      	ldr	r1, [pc, #300]	; (b8340 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b8214:	2204      	movs	r2, #4
   b8216:	4620      	mov	r0, r4
   b8218:	f7ff feef 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b821c:	21d9      	movs	r1, #217	; 0xd9
   b821e:	4620      	mov	r0, r4
   b8220:	f7ff fe7c 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8224:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8228:	2b01      	cmp	r3, #1
   b822a:	bf0c      	ite	eq
   b822c:	2122      	moveq	r1, #34	; 0x22
   b822e:	21f1      	movne	r1, #241	; 0xf1
   b8230:	4620      	mov	r0, r4
   b8232:	f7ff fe73 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8236:	4620      	mov	r0, r4
   b8238:	4942      	ldr	r1, [pc, #264]	; (b8344 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b823a:	2206      	movs	r2, #6
   b823c:	f7ff fedd 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8242:	2800      	cmp	r0, #0
   b8244:	d063      	beq.n	b830e <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b8246:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8248:	f001 fae2 	bl	b9810 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b824c:	2001      	movs	r0, #1
   b824e:	e773      	b.n	b8138 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8250:	b26d      	sxtb	r5, r5
   b8252:	e78e      	b.n	b8172 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8254:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8258:	2101      	movs	r1, #1
   b825a:	b280      	uxth	r0, r0
   b825c:	f001 fc1e 	bl	b9a9c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8260:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8264:	2101      	movs	r1, #1
   b8266:	b280      	uxth	r0, r0
   b8268:	f001 fc18 	bl	b9a9c <pinMode>
    SSD1306_DESELECT
   b826c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8270:	2101      	movs	r1, #1
   b8272:	b280      	uxth	r0, r0
   b8274:	f001 fc23 	bl	b9abe <digitalWrite>
    if(spi) { // Hardware SPI
   b8278:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b827a:	b13d      	cbz	r5, b828c <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b827c:	f1b8 0f00 	cmp.w	r8, #0
   b8280:	f43f af7e 	beq.w	b8180 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8284:	4628      	mov	r0, r5
   b8286:	f000 fdc5 	bl	b8e14 <_ZN8SPIClass5beginEv>
   b828a:	e779      	b.n	b8180 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b828c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8290:	2101      	movs	r1, #1
   b8292:	b280      	uxth	r0, r0
   b8294:	f001 fc02 	bl	b9a9c <pinMode>
      pinMode(clkPin , OUTPUT);
   b8298:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b829c:	2101      	movs	r1, #1
   b829e:	b280      	uxth	r0, r0
   b82a0:	f001 fbfc 	bl	b9a9c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b82a4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b82a8:	4629      	mov	r1, r5
   b82aa:	b280      	uxth	r0, r0
   b82ac:	f001 fc07 	bl	b9abe <digitalWrite>
   b82b0:	e766      	b.n	b8180 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b82b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b82b4:	b118      	cbz	r0, b82be <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b82b6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b82ba:	f000 fdd9 	bl	b8e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b82be:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b82c2:	2100      	movs	r1, #0
   b82c4:	b280      	uxth	r0, r0
   b82c6:	f001 fbfa 	bl	b9abe <digitalWrite>
   b82ca:	e780      	b.n	b81ce <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b82cc:	4a1e      	ldr	r2, [pc, #120]	; (b8348 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b82ce:	4293      	cmp	r3, r2
   b82d0:	d10e      	bne.n	b82f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b82d2:	491e      	ldr	r1, [pc, #120]	; (b834c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b82d4:	2203      	movs	r2, #3
   b82d6:	4620      	mov	r0, r4
   b82d8:	f7ff fe8f 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b82dc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b82e0:	2b01      	cmp	r3, #1
   b82e2:	bf0c      	ite	eq
   b82e4:	219f      	moveq	r1, #159	; 0x9f
   b82e6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b82e8:	4620      	mov	r0, r4
   b82ea:	f7ff fe17 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b82ee:	e795      	b.n	b821c <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b82f0:	4a17      	ldr	r2, [pc, #92]	; (b8350 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b82f2:	4293      	cmp	r3, r2
   b82f4:	d192      	bne.n	b821c <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b82f6:	4917      	ldr	r1, [pc, #92]	; (b8354 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b82f8:	2203      	movs	r2, #3
   b82fa:	4620      	mov	r0, r4
   b82fc:	f7ff fe7d 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8300:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8304:	2b01      	cmp	r3, #1
   b8306:	bf0c      	ite	eq
   b8308:	2110      	moveq	r1, #16
   b830a:	21af      	movne	r1, #175	; 0xaf
   b830c:	e7ec      	b.n	b82e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b830e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8312:	2101      	movs	r1, #1
   b8314:	b280      	uxth	r0, r0
   b8316:	f001 fbd2 	bl	b9abe <digitalWrite>
   b831a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b831c:	2800      	cmp	r0, #0
   b831e:	d095      	beq.n	b824c <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b8320:	f000 fd8c 	bl	b8e3c <_ZN8SPIClass14endTransactionEv>
   b8324:	e792      	b.n	b824c <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b8326:	bf00      	nop
   b8328:	000bb744 	.word	0x000bb744
   b832c:	000bb924 	.word	0x000bb924
   b8330:	000bbd8c 	.word	0x000bbd8c
   b8334:	000bbd90 	.word	0x000bbd90
   b8338:	000bbd94 	.word	0x000bbd94
   b833c:	00200080 	.word	0x00200080
   b8340:	000bbd9e 	.word	0x000bbd9e
   b8344:	000bbd98 	.word	0x000bbd98
   b8348:	00400080 	.word	0x00400080
   b834c:	000bbda2 	.word	0x000bbda2
   b8350:	00100060 	.word	0x00100060
   b8354:	000bbda5 	.word	0x000bbda5

000b8358 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8358:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b835a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b835c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8360:	db3d      	blt.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8362:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8366:	4294      	cmp	r4, r2
   b8368:	dd39      	ble.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b836a:	2900      	cmp	r1, #0
      w += x;
   b836c:	bfbe      	ittt	lt
   b836e:	185b      	addlt	r3, r3, r1
   b8370:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8372:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8374:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8378:	18ce      	adds	r6, r1, r3
   b837a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b837c:	bfc4      	itt	gt
   b837e:	1a63      	subgt	r3, r4, r1
   b8380:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8382:	2b00      	cmp	r3, #0
   b8384:	dd2b      	ble.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8386:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8388:	10d6      	asrs	r6, r2, #3
   b838a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b838e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8390:	f002 0007 	and.w	r0, r2, #7
   b8394:	2201      	movs	r2, #1
   b8396:	4082      	lsls	r2, r0
      switch(color) {
   b8398:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b839a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b839c:	d016      	beq.n	b83cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b839e:	2d02      	cmp	r5, #2
   b83a0:	d00b      	beq.n	b83ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b83a2:	b9e5      	cbnz	r5, b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b83a4:	43d2      	mvns	r2, r2
   b83a6:	b2d2      	uxtb	r2, r2
   b83a8:	440b      	add	r3, r1
   b83aa:	4299      	cmp	r1, r3
   b83ac:	d017      	beq.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b83ae:	f811 0b01 	ldrb.w	r0, [r1], #1
   b83b2:	4010      	ands	r0, r2
   b83b4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b83b8:	e7f7      	b.n	b83aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b83ba:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b83bc:	4299      	cmp	r1, r3
   b83be:	d00e      	beq.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b83c0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b83c4:	4050      	eors	r0, r2
   b83c6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b83ca:	e7f7      	b.n	b83bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b83cc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b83ce:	4299      	cmp	r1, r3
   b83d0:	d005      	beq.n	b83de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b83d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b83d6:	4310      	orrs	r0, r2
   b83d8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b83dc:	e7f7      	b.n	b83ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b83de:	bd70      	pop	{r4, r5, r6, pc}

000b83e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b83e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b83e2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b83e4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b83e8:	db76      	blt.n	b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b83ea:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b83ee:	42b1      	cmp	r1, r6
   b83f0:	da72      	bge.n	b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b83f2:	2a00      	cmp	r2, #0
      __h += __y;
   b83f4:	bfbe      	ittt	lt
   b83f6:	189b      	addlt	r3, r3, r2
   b83f8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b83fa:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b83fc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8400:	18d7      	adds	r7, r2, r3
   b8402:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8404:	bfc4      	itt	gt
   b8406:	1aa3      	subgt	r3, r4, r2
   b8408:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b840a:	2b00      	cmp	r3, #0
   b840c:	dd64      	ble.n	b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b840e:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8412:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8414:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8418:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b841c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b841e:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8422:	d023      	beq.n	b846c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8424:	f1c2 0208 	rsb	r2, r2, #8
   b8428:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b842a:	492d      	ldr	r1, [pc, #180]	; (b84e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b842c:	4293      	cmp	r3, r2
   b842e:	bf3c      	itt	cc
   b8430:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8434:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8438:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b843a:	bf3c      	itt	cc
   b843c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8440:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8444:	2d01      	cmp	r5, #1
   b8446:	d007      	beq.n	b8458 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8448:	2d02      	cmp	r5, #2
   b844a:	d02e      	beq.n	b84aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b844c:	b94d      	cbnz	r5, b8462 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b844e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8452:	ea2c 0101 	bic.w	r1, ip, r1
   b8456:	e003      	b.n	b8460 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8458:	f817 c006 	ldrb.w	ip, [r7, r6]
   b845c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8460:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8462:	4293      	cmp	r3, r2
   b8464:	d338      	bcc.n	b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8466:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b846a:	440c      	add	r4, r1
        h -= mod;
   b846c:	1a9a      	subs	r2, r3, r2
   b846e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8470:	2a07      	cmp	r2, #7
   b8472:	d90e      	bls.n	b8492 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8474:	2d02      	cmp	r5, #2
   b8476:	d11d      	bne.n	b84b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8478:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b847a:	7821      	ldrb	r1, [r4, #0]
   b847c:	43c9      	mvns	r1, r1
   b847e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8480:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8482:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8486:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8488:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b848a:	440c      	add	r4, r1
            } while(h >= 8);
   b848c:	d8f5      	bhi.n	b847a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b848e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8492:	b30a      	cbz	r2, b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8494:	4b13      	ldr	r3, [pc, #76]	; (b84e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8496:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8498:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b849a:	d01a      	beq.n	b84d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b849c:	2d02      	cmp	r5, #2
   b849e:	d01c      	beq.n	b84da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b84a0:	b9d5      	cbnz	r5, b84d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b84a2:	7822      	ldrb	r2, [r4, #0]
   b84a4:	ea22 0303 	bic.w	r3, r2, r3
   b84a8:	e015      	b.n	b84d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b84aa:	f817 c006 	ldrb.w	ip, [r7, r6]
   b84ae:	ea81 010c 	eor.w	r1, r1, ip
   b84b2:	e7d5      	b.n	b8460 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b84b4:	1e29      	subs	r1, r5, #0
   b84b6:	bf18      	it	ne
   b84b8:	2101      	movne	r1, #1
   b84ba:	4249      	negs	r1, r1
   b84bc:	b2c9      	uxtb	r1, r1
   b84be:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b84c0:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b84c2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b84c4:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b84c8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b84ca:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b84cc:	4434      	add	r4, r6
            } while(h >= 8);
   b84ce:	d8f7      	bhi.n	b84c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b84d0:	e7dd      	b.n	b848e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b84d2:	7822      	ldrb	r2, [r4, #0]
   b84d4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b84d6:	7023      	strb	r3, [r4, #0]
}
   b84d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b84da:	7822      	ldrb	r2, [r4, #0]
   b84dc:	4053      	eors	r3, r2
   b84de:	e7fa      	b.n	b84d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b84e0:	000bbd7c 	.word	0x000bbd7c
   b84e4:	000bbd84 	.word	0x000bbd84

000b84e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b84e8:	b470      	push	{r4, r5, r6}
   b84ea:	4614      	mov	r4, r2
  switch(rotation) {
   b84ec:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b84ee:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b84f2:	2a02      	cmp	r2, #2
   b84f4:	d00d      	beq.n	b8512 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b84f6:	2a03      	cmp	r2, #3
   b84f8:	d018      	beq.n	b852c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b84fa:	2a01      	cmp	r2, #1
   b84fc:	d111      	bne.n	b8522 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b84fe:	8902      	ldrh	r2, [r0, #8]
   b8500:	43e4      	mvns	r4, r4
   b8502:	4414      	add	r4, r2
   b8504:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8506:	9603      	str	r6, [sp, #12]
   b8508:	460a      	mov	r2, r1
   b850a:	4621      	mov	r1, r4
}
   b850c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b850e:	f7ff bf67 	b.w	b83e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8512:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8514:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8516:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8518:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b851a:	4414      	add	r4, r2
    x -= (w-1);
   b851c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b851e:	b224      	sxth	r4, r4
    x -= (w-1);
   b8520:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8522:	9603      	str	r6, [sp, #12]
   b8524:	4622      	mov	r2, r4
}
   b8526:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8528:	f7ff bf16 	b.w	b8358 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b852c:	8945      	ldrh	r5, [r0, #10]
   b852e:	4419      	add	r1, r3
   b8530:	1a69      	subs	r1, r5, r1
   b8532:	b209      	sxth	r1, r1
    break;
   b8534:	e7e7      	b.n	b8506 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8536 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8536:	b430      	push	{r4, r5}
   b8538:	4614      	mov	r4, r2
  switch(rotation) {
   b853a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b853c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8540:	2a02      	cmp	r2, #2
   b8542:	d00d      	beq.n	b8560 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8544:	2a03      	cmp	r2, #3
   b8546:	d018      	beq.n	b857a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8548:	2a01      	cmp	r2, #1
   b854a:	d111      	bne.n	b8570 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b854c:	18e2      	adds	r2, r4, r3
   b854e:	8904      	ldrh	r4, [r0, #8]
   b8550:	1aa4      	subs	r4, r4, r2
   b8552:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8554:	9502      	str	r5, [sp, #8]
   b8556:	460a      	mov	r2, r1
   b8558:	4621      	mov	r1, r4
}
   b855a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b855c:	f7ff befc 	b.w	b8358 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8560:	8902      	ldrh	r2, [r0, #8]
   b8562:	43c9      	mvns	r1, r1
   b8564:	4411      	add	r1, r2
    y -= (h-1);
   b8566:	18e2      	adds	r2, r4, r3
   b8568:	8944      	ldrh	r4, [r0, #10]
   b856a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b856c:	b209      	sxth	r1, r1
    y -= (h-1);
   b856e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8570:	9502      	str	r5, [sp, #8]
   b8572:	4622      	mov	r2, r4
}
   b8574:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8576:	f7ff bf33 	b.w	b83e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b857a:	8942      	ldrh	r2, [r0, #10]
   b857c:	43c9      	mvns	r1, r1
   b857e:	4411      	add	r1, r2
   b8580:	b209      	sxth	r1, r1
    break;
   b8582:	e7e7      	b.n	b8554 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8584 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8588:	4604      	mov	r4, r0
  TRANSACTION_START
   b858a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b858c:	2800      	cmp	r0, #0
   b858e:	d042      	beq.n	b8616 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8592:	f001 f93d 	bl	b9810 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8596:	4947      	ldr	r1, [pc, #284]	; (b86b4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8598:	2205      	movs	r2, #5
   b859a:	4620      	mov	r0, r4
   b859c:	f7ff fd2d 	bl	b7ffa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b85a0:	8921      	ldrh	r1, [r4, #8]
   b85a2:	3901      	subs	r1, #1
   b85a4:	4620      	mov	r0, r4
   b85a6:	b2c9      	uxtb	r1, r1
   b85a8:	f7ff fcb8 	bl	b7f1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b85ac:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b85b0:	1dde      	adds	r6, r3, #7
   b85b2:	bf48      	it	mi
   b85b4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b85b8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b85bc:	8923      	ldrh	r3, [r4, #8]
   b85be:	10f6      	asrs	r6, r6, #3
   b85c0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b85c4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b85c8:	2800      	cmp	r0, #0
   b85ca:	d03a      	beq.n	b8642 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b85cc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b85d0:	f001 f92c 	bl	b982c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b85d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b85d6:	6803      	ldr	r3, [r0, #0]
   b85d8:	2140      	movs	r1, #64	; 0x40
   b85da:	689b      	ldr	r3, [r3, #8]
   b85dc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b85de:	2701      	movs	r7, #1
    while(count--) {
   b85e0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b85e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b85e4:	d024      	beq.n	b8630 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b85e6:	2f1f      	cmp	r7, #31
   b85e8:	d90c      	bls.n	b8604 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b85ea:	f001 f926 	bl	b983a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b85ee:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b85f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b85f4:	f001 f91a 	bl	b982c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b85f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b85fa:	6803      	ldr	r3, [r0, #0]
   b85fc:	2140      	movs	r1, #64	; 0x40
   b85fe:	689b      	ldr	r3, [r3, #8]
   b8600:	4798      	blx	r3
        bytesOut = 1;
   b8602:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8604:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8606:	f815 1b01 	ldrb.w	r1, [r5], #1
   b860a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b860c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b860e:	689b      	ldr	r3, [r3, #8]
   b8610:	4798      	blx	r3
      bytesOut++;
   b8612:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8614:	e7e4      	b.n	b85e0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8616:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8618:	b118      	cbz	r0, b8622 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b861a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b861e:	f000 fc27 	bl	b8e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8622:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8626:	2100      	movs	r1, #0
   b8628:	b280      	uxth	r0, r0
   b862a:	f001 fa48 	bl	b9abe <digitalWrite>
   b862e:	e7b2      	b.n	b8596 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8630:	f001 f903 	bl	b983a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8634:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8636:	b378      	cbz	r0, b8698 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8638:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b863a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b863e:	f001 b8e7 	b.w	b9810 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8642:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8646:	2101      	movs	r1, #1
   b8648:	b280      	uxth	r0, r0
   b864a:	f001 fa38 	bl	b9abe <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b864e:	42ae      	cmp	r6, r5
   b8650:	d0f0      	beq.n	b8634 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8652:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8654:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8658:	b118      	cbz	r0, b8662 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b865a:	4649      	mov	r1, r9
   b865c:	f000 fc76 	bl	b8f4c <_ZN8SPIClass8transferEh>
   b8660:	e7f5      	b.n	b864e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8662:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8664:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8668:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b866c:	ea09 0108 	and.w	r1, r9, r8
   b8670:	b280      	uxth	r0, r0
   b8672:	f001 fa24 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8676:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b867a:	2101      	movs	r1, #1
   b867c:	b280      	uxth	r0, r0
   b867e:	f001 fa1e 	bl	b9abe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8682:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8686:	2100      	movs	r1, #0
   b8688:	b280      	uxth	r0, r0
   b868a:	f001 fa18 	bl	b9abe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b868e:	3f01      	subs	r7, #1
   b8690:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8694:	d1e8      	bne.n	b8668 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8696:	e7da      	b.n	b864e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8698:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b869c:	2101      	movs	r1, #1
   b869e:	b280      	uxth	r0, r0
   b86a0:	f001 fa0d 	bl	b9abe <digitalWrite>
   b86a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b86a6:	b118      	cbz	r0, b86b0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b86a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b86ac:	f000 bbc6 	b.w	b8e3c <_ZN8SPIClass14endTransactionEv>
}
   b86b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b86b4:	000bbda8 	.word	0x000bbda8

000b86b8 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b86b8:	b510      	push	{r4, lr}
   b86ba:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b86bc:	7001      	strb	r1, [r0, #0]
   b86be:	7042      	strb	r2, [r0, #1]
   b86c0:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b86c2:	2101      	movs	r1, #1
   b86c4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b86c8:	f001 fc94 	bl	b9ff4 <calloc>
   b86cc:	6060      	str	r0, [r4, #4]
}
   b86ce:	4620      	mov	r0, r4
   b86d0:	bd10      	pop	{r4, pc}

000b86d2 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b86d2:	b510      	push	{r4, lr}
   b86d4:	4604      	mov	r4, r0
{
    free(_led_state);
   b86d6:	6840      	ldr	r0, [r0, #4]
   b86d8:	f000 fb16 	bl	b8d08 <free>
}
   b86dc:	4620      	mov	r0, r4
   b86de:	bd10      	pop	{r4, pc}

000b86e0 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b86e0:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b86e2:	2100      	movs	r1, #0
{
   b86e4:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b86e6:	7800      	ldrb	r0, [r0, #0]
   b86e8:	f001 f9e9 	bl	b9abe <digitalWrite>
   b86ec:	2014      	movs	r0, #20
   b86ee:	f000 f90f 	bl	b8910 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b86f2:	7820      	ldrb	r0, [r4, #0]
   b86f4:	2101      	movs	r1, #1
   b86f6:	f001 f9e2 	bl	b9abe <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b86fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b86fe:	2014      	movs	r0, #20
   b8700:	f000 b906 	b.w	b8910 <HAL_Delay_Microseconds>

000b8704 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b8704:	b570      	push	{r4, r5, r6, lr}
   b8706:	4606      	mov	r6, r0
   b8708:	460c      	mov	r4, r1
   b870a:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b870c:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b870e:	bf4c      	ite	mi
   b8710:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b8712:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b8714:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b8716:	f001 f9d2 	bl	b9abe <digitalWrite>
    for (byte i=0; i<8; i++)
   b871a:	3d01      	subs	r5, #1
        clk();
   b871c:	4630      	mov	r0, r6
   b871e:	f7ff ffdf 	bl	b86e0 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b8722:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b8724:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b8728:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b872a:	d1ef      	bne.n	b870c <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b872c:	bd70      	pop	{r4, r5, r6, pc}

000b872e <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b872e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b8730:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b8734:	461e      	mov	r6, r3
   b8736:	460c      	mov	r4, r1
   b8738:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b873a:	bf14      	ite	ne
   b873c:	21c0      	movne	r1, #192	; 0xc0
   b873e:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b8740:	0673      	lsls	r3, r6, #25
   b8742:	bf58      	it	pl
   b8744:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b8748:	062a      	lsls	r2, r5, #24
   b874a:	bf58      	it	pl
   b874c:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b8750:	066b      	lsls	r3, r5, #25
   b8752:	bf58      	it	pl
   b8754:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b8758:	0622      	lsls	r2, r4, #24
   b875a:	bf58      	it	pl
   b875c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b8760:	0663      	lsls	r3, r4, #25
   b8762:	bf58      	it	pl
   b8764:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b8768:	9001      	str	r0, [sp, #4]
   b876a:	f7ff ffcb 	bl	b8704 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b876e:	9801      	ldr	r0, [sp, #4]
   b8770:	4631      	mov	r1, r6
   b8772:	f7ff ffc7 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b8776:	9801      	ldr	r0, [sp, #4]
   b8778:	4629      	mov	r1, r5
   b877a:	f7ff ffc3 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b877e:	9801      	ldr	r0, [sp, #4]
   b8780:	4621      	mov	r1, r4
}
   b8782:	b002      	add	sp, #8
   b8784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b8788:	f7ff bfbc 	b.w	b8704 <_ZN12ChainableLED8sendByteEh>

000b878c <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8790:	4604      	mov	r4, r0
   b8792:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b8794:	2100      	movs	r1, #0
{
   b8796:	4690      	mov	r8, r2
   b8798:	4699      	mov	r9, r3
   b879a:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b879e:	f7ff ffb1 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b87a2:	2100      	movs	r1, #0
   b87a4:	4620      	mov	r0, r4
   b87a6:	f7ff ffad 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b87aa:	2100      	movs	r1, #0
   b87ac:	4620      	mov	r0, r4
   b87ae:	f7ff ffa9 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b87b2:	2100      	movs	r1, #0
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7ff ffa5 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
   b87ba:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b87bc:	78a3      	ldrb	r3, [r4, #2]
   b87be:	b2f5      	uxtb	r5, r6
   b87c0:	42ab      	cmp	r3, r5
   b87c2:	d919      	bls.n	b87f8 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b87c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b87c8:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b87ca:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b87ce:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b87d2:	d108      	bne.n	b87e6 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b87d4:	6861      	ldr	r1, [r4, #4]
   b87d6:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b87da:	6861      	ldr	r1, [r4, #4]
   b87dc:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b87e0:	6861      	ldr	r1, [r4, #4]
   b87e2:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b87e6:	6861      	ldr	r1, [r4, #4]
   b87e8:	5ccb      	ldrb	r3, [r1, r3]
   b87ea:	5c8a      	ldrb	r2, [r1, r2]
   b87ec:	5c09      	ldrb	r1, [r1, r0]
   b87ee:	4620      	mov	r0, r4
   b87f0:	f7ff ff9d 	bl	b872e <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b87f4:	3601      	adds	r6, #1
   b87f6:	e7e1      	b.n	b87bc <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b87f8:	4620      	mov	r0, r4
   b87fa:	2100      	movs	r1, #0
   b87fc:	f7ff ff82 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8800:	4620      	mov	r0, r4
   b8802:	2100      	movs	r1, #0
   b8804:	f7ff ff7e 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8808:	4620      	mov	r0, r4
   b880a:	2100      	movs	r1, #0
   b880c:	f7ff ff7a 	bl	b8704 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8810:	4620      	mov	r0, r4
   b8812:	2100      	movs	r1, #0
}
   b8814:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b8818:	f7ff bf74 	b.w	b8704 <_ZN12ChainableLED8sendByteEh>

000b881c <_ZN12ChainableLED4initEv>:
{
   b881c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b881e:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b8820:	2101      	movs	r1, #1
   b8822:	7800      	ldrb	r0, [r0, #0]
   b8824:	f001 f93a 	bl	b9a9c <pinMode>
    pinMode(_data_pin, OUTPUT);
   b8828:	7860      	ldrb	r0, [r4, #1]
   b882a:	2101      	movs	r1, #1
   b882c:	f001 f936 	bl	b9a9c <pinMode>
   b8830:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b8832:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b8834:	78a3      	ldrb	r3, [r4, #2]
   b8836:	b2e9      	uxtb	r1, r5
   b8838:	428b      	cmp	r3, r1
   b883a:	d907      	bls.n	b884c <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b883c:	2300      	movs	r3, #0
   b883e:	9600      	str	r6, [sp, #0]
   b8840:	461a      	mov	r2, r3
   b8842:	4620      	mov	r0, r4
   b8844:	f7ff ffa2 	bl	b878c <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b8848:	3501      	adds	r5, #1
   b884a:	e7f3      	b.n	b8834 <_ZN12ChainableLED4initEv+0x18>
}
   b884c:	b002      	add	sp, #8
   b884e:	bd70      	pop	{r4, r5, r6, pc}

000b8850 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8850:	b508      	push	{r3, lr}
   b8852:	4b02      	ldr	r3, [pc, #8]	; (b885c <netdb_freeaddrinfo+0xc>)
   b8854:	681b      	ldr	r3, [r3, #0]
   b8856:	689b      	ldr	r3, [r3, #8]
   b8858:	9301      	str	r3, [sp, #4]
   b885a:	bd08      	pop	{r3, pc}
   b885c:	00030268 	.word	0x00030268

000b8860 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8860:	b508      	push	{r3, lr}
   b8862:	4b02      	ldr	r3, [pc, #8]	; (b886c <netdb_getaddrinfo+0xc>)
   b8864:	681b      	ldr	r3, [r3, #0]
   b8866:	68db      	ldr	r3, [r3, #12]
   b8868:	9301      	str	r3, [sp, #4]
   b886a:	bd08      	pop	{r3, pc}
   b886c:	00030268 	.word	0x00030268

000b8870 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8870:	b508      	push	{r3, lr}
   b8872:	4b02      	ldr	r3, [pc, #8]	; (b887c <HAL_Validate_Pin_Function+0xc>)
   b8874:	681b      	ldr	r3, [r3, #0]
   b8876:	685b      	ldr	r3, [r3, #4]
   b8878:	9301      	str	r3, [sp, #4]
   b887a:	bd08      	pop	{r3, pc}
   b887c:	0003022c 	.word	0x0003022c

000b8880 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8880:	b508      	push	{r3, lr}
   b8882:	4b02      	ldr	r3, [pc, #8]	; (b888c <HAL_Pin_Mode+0xc>)
   b8884:	681b      	ldr	r3, [r3, #0]
   b8886:	689b      	ldr	r3, [r3, #8]
   b8888:	9301      	str	r3, [sp, #4]
   b888a:	bd08      	pop	{r3, pc}
   b888c:	0003022c 	.word	0x0003022c

000b8890 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8890:	b508      	push	{r3, lr}
   b8892:	4b02      	ldr	r3, [pc, #8]	; (b889c <HAL_Get_Pin_Mode+0xc>)
   b8894:	681b      	ldr	r3, [r3, #0]
   b8896:	68db      	ldr	r3, [r3, #12]
   b8898:	9301      	str	r3, [sp, #4]
   b889a:	bd08      	pop	{r3, pc}
   b889c:	0003022c 	.word	0x0003022c

000b88a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b88a0:	b508      	push	{r3, lr}
   b88a2:	4b02      	ldr	r3, [pc, #8]	; (b88ac <HAL_GPIO_Write+0xc>)
   b88a4:	681b      	ldr	r3, [r3, #0]
   b88a6:	691b      	ldr	r3, [r3, #16]
   b88a8:	9301      	str	r3, [sp, #4]
   b88aa:	bd08      	pop	{r3, pc}
   b88ac:	0003022c 	.word	0x0003022c

000b88b0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b88b0:	b508      	push	{r3, lr}
   b88b2:	4b02      	ldr	r3, [pc, #8]	; (b88bc <HAL_GPIO_Read+0xc>)
   b88b4:	681b      	ldr	r3, [r3, #0]
   b88b6:	695b      	ldr	r3, [r3, #20]
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	bd08      	pop	{r3, pc}
   b88bc:	0003022c 	.word	0x0003022c

000b88c0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b88c0:	b508      	push	{r3, lr}
   b88c2:	4b02      	ldr	r3, [pc, #8]	; (b88cc <HAL_Interrupts_Enable_All+0xc>)
   b88c4:	681b      	ldr	r3, [r3, #0]
   b88c6:	6a1b      	ldr	r3, [r3, #32]
   b88c8:	9301      	str	r3, [sp, #4]
   b88ca:	bd08      	pop	{r3, pc}
   b88cc:	0003022c 	.word	0x0003022c

000b88d0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b88d0:	b508      	push	{r3, lr}
   b88d2:	4b02      	ldr	r3, [pc, #8]	; (b88dc <HAL_Interrupts_Disable_All+0xc>)
   b88d4:	681b      	ldr	r3, [r3, #0]
   b88d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	0003022c 	.word	0x0003022c

000b88e0 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b88e0:	b508      	push	{r3, lr}
   b88e2:	4b02      	ldr	r3, [pc, #8]	; (b88ec <hal_adc_read+0xc>)
   b88e4:	681b      	ldr	r3, [r3, #0]
   b88e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b88e8:	9301      	str	r3, [sp, #4]
   b88ea:	bd08      	pop	{r3, pc}
   b88ec:	0003022c 	.word	0x0003022c

000b88f0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b02      	ldr	r3, [pc, #8]	; (b88fc <HAL_Pulse_In+0xc>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b88f8:	9301      	str	r3, [sp, #4]
   b88fa:	bd08      	pop	{r3, pc}
   b88fc:	0003022c 	.word	0x0003022c

000b8900 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8900:	b508      	push	{r3, lr}
   b8902:	4b02      	ldr	r3, [pc, #8]	; (b890c <HAL_RNG_GetRandomNumber+0xc>)
   b8904:	681b      	ldr	r3, [r3, #0]
   b8906:	685b      	ldr	r3, [r3, #4]
   b8908:	9301      	str	r3, [sp, #4]
   b890a:	bd08      	pop	{r3, pc}
   b890c:	00030218 	.word	0x00030218

000b8910 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8910:	b508      	push	{r3, lr}
   b8912:	4b02      	ldr	r3, [pc, #8]	; (b891c <HAL_Delay_Microseconds+0xc>)
   b8914:	681b      	ldr	r3, [r3, #0]
   b8916:	68db      	ldr	r3, [r3, #12]
   b8918:	9301      	str	r3, [sp, #4]
   b891a:	bd08      	pop	{r3, pc}
   b891c:	00030218 	.word	0x00030218

000b8920 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8920:	b508      	push	{r3, lr}
   b8922:	4b02      	ldr	r3, [pc, #8]	; (b892c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8924:	681b      	ldr	r3, [r3, #0]
   b8926:	695b      	ldr	r3, [r3, #20]
   b8928:	9301      	str	r3, [sp, #4]
   b892a:	bd08      	pop	{r3, pc}
   b892c:	00030218 	.word	0x00030218

000b8930 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b8930:	b508      	push	{r3, lr}
   b8932:	4b02      	ldr	r3, [pc, #8]	; (b893c <HAL_EEPROM_Init+0xc>)
   b8934:	681b      	ldr	r3, [r3, #0]
   b8936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8938:	9301      	str	r3, [sp, #4]
   b893a:	bd08      	pop	{r3, pc}
   b893c:	00030218 	.word	0x00030218

000b8940 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b8940:	b508      	push	{r3, lr}
   b8942:	4b02      	ldr	r3, [pc, #8]	; (b894c <HAL_EEPROM_Read+0xc>)
   b8944:	681b      	ldr	r3, [r3, #0]
   b8946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8948:	9301      	str	r3, [sp, #4]
   b894a:	bd08      	pop	{r3, pc}
   b894c:	00030218 	.word	0x00030218

000b8950 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b8950:	b508      	push	{r3, lr}
   b8952:	4b02      	ldr	r3, [pc, #8]	; (b895c <HAL_EEPROM_Put+0xc>)
   b8954:	681b      	ldr	r3, [r3, #0]
   b8956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8958:	9301      	str	r3, [sp, #4]
   b895a:	bd08      	pop	{r3, pc}
   b895c:	00030218 	.word	0x00030218

000b8960 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8960:	b508      	push	{r3, lr}
   b8962:	4b02      	ldr	r3, [pc, #8]	; (b896c <os_mutex_recursive_create+0xc>)
   b8964:	681b      	ldr	r3, [r3, #0]
   b8966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8968:	9301      	str	r3, [sp, #4]
   b896a:	bd08      	pop	{r3, pc}
   b896c:	00030248 	.word	0x00030248

000b8970 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8970:	b508      	push	{r3, lr}
   b8972:	4b02      	ldr	r3, [pc, #8]	; (b897c <inet_inet_ntop+0xc>)
   b8974:	681b      	ldr	r3, [r3, #0]
   b8976:	695b      	ldr	r3, [r3, #20]
   b8978:	9301      	str	r3, [sp, #4]
   b897a:	bd08      	pop	{r3, pc}
   b897c:	00030264 	.word	0x00030264

000b8980 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8980:	b508      	push	{r3, lr}
   b8982:	4b02      	ldr	r3, [pc, #8]	; (b898c <hal_usart_write+0xc>)
   b8984:	681b      	ldr	r3, [r3, #0]
   b8986:	68db      	ldr	r3, [r3, #12]
   b8988:	9301      	str	r3, [sp, #4]
   b898a:	bd08      	pop	{r3, pc}
   b898c:	0003023c 	.word	0x0003023c

000b8990 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8990:	b508      	push	{r3, lr}
   b8992:	4b02      	ldr	r3, [pc, #8]	; (b899c <hal_usart_available+0xc>)
   b8994:	681b      	ldr	r3, [r3, #0]
   b8996:	691b      	ldr	r3, [r3, #16]
   b8998:	9301      	str	r3, [sp, #4]
   b899a:	bd08      	pop	{r3, pc}
   b899c:	0003023c 	.word	0x0003023c

000b89a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b89a0:	b508      	push	{r3, lr}
   b89a2:	4b02      	ldr	r3, [pc, #8]	; (b89ac <hal_usart_read+0xc>)
   b89a4:	681b      	ldr	r3, [r3, #0]
   b89a6:	695b      	ldr	r3, [r3, #20]
   b89a8:	9301      	str	r3, [sp, #4]
   b89aa:	bd08      	pop	{r3, pc}
   b89ac:	0003023c 	.word	0x0003023c

000b89b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b89b0:	b508      	push	{r3, lr}
   b89b2:	4b02      	ldr	r3, [pc, #8]	; (b89bc <hal_usart_peek+0xc>)
   b89b4:	681b      	ldr	r3, [r3, #0]
   b89b6:	699b      	ldr	r3, [r3, #24]
   b89b8:	9301      	str	r3, [sp, #4]
   b89ba:	bd08      	pop	{r3, pc}
   b89bc:	0003023c 	.word	0x0003023c

000b89c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b02      	ldr	r3, [pc, #8]	; (b89cc <hal_usart_flush+0xc>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	69db      	ldr	r3, [r3, #28]
   b89c8:	9301      	str	r3, [sp, #4]
   b89ca:	bd08      	pop	{r3, pc}
   b89cc:	0003023c 	.word	0x0003023c

000b89d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b89d0:	b508      	push	{r3, lr}
   b89d2:	4b02      	ldr	r3, [pc, #8]	; (b89dc <hal_usart_is_enabled+0xc>)
   b89d4:	681b      	ldr	r3, [r3, #0]
   b89d6:	6a1b      	ldr	r3, [r3, #32]
   b89d8:	9301      	str	r3, [sp, #4]
   b89da:	bd08      	pop	{r3, pc}
   b89dc:	0003023c 	.word	0x0003023c

000b89e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b02      	ldr	r3, [pc, #8]	; (b89ec <hal_usart_available_data_for_write+0xc>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b89e8:	9301      	str	r3, [sp, #4]
   b89ea:	bd08      	pop	{r3, pc}
   b89ec:	0003023c 	.word	0x0003023c

000b89f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b89f0:	b508      	push	{r3, lr}
   b89f2:	4b02      	ldr	r3, [pc, #8]	; (b89fc <hal_usart_init_ex+0xc>)
   b89f4:	681b      	ldr	r3, [r3, #0]
   b89f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b89f8:	9301      	str	r3, [sp, #4]
   b89fa:	bd08      	pop	{r3, pc}
   b89fc:	0003023c 	.word	0x0003023c

000b8a00 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b8a00:	b508      	push	{r3, lr}
   b8a02:	4b02      	ldr	r3, [pc, #8]	; (b8a0c <hal_i2c_set_speed+0xc>)
   b8a04:	681b      	ldr	r3, [r3, #0]
   b8a06:	681b      	ldr	r3, [r3, #0]
   b8a08:	9301      	str	r3, [sp, #4]
   b8a0a:	bd08      	pop	{r3, pc}
   b8a0c:	00030228 	.word	0x00030228

000b8a10 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8a10:	b508      	push	{r3, lr}
   b8a12:	4b02      	ldr	r3, [pc, #8]	; (b8a1c <hal_i2c_begin+0xc>)
   b8a14:	681b      	ldr	r3, [r3, #0]
   b8a16:	68db      	ldr	r3, [r3, #12]
   b8a18:	9301      	str	r3, [sp, #4]
   b8a1a:	bd08      	pop	{r3, pc}
   b8a1c:	00030228 	.word	0x00030228

000b8a20 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8a20:	b508      	push	{r3, lr}
   b8a22:	4b02      	ldr	r3, [pc, #8]	; (b8a2c <hal_i2c_begin_transmission+0xc>)
   b8a24:	681b      	ldr	r3, [r3, #0]
   b8a26:	699b      	ldr	r3, [r3, #24]
   b8a28:	9301      	str	r3, [sp, #4]
   b8a2a:	bd08      	pop	{r3, pc}
   b8a2c:	00030228 	.word	0x00030228

000b8a30 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8a30:	b508      	push	{r3, lr}
   b8a32:	4b02      	ldr	r3, [pc, #8]	; (b8a3c <hal_i2c_end_transmission+0xc>)
   b8a34:	681b      	ldr	r3, [r3, #0]
   b8a36:	69db      	ldr	r3, [r3, #28]
   b8a38:	9301      	str	r3, [sp, #4]
   b8a3a:	bd08      	pop	{r3, pc}
   b8a3c:	00030228 	.word	0x00030228

000b8a40 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8a40:	b508      	push	{r3, lr}
   b8a42:	4b02      	ldr	r3, [pc, #8]	; (b8a4c <hal_i2c_write+0xc>)
   b8a44:	681b      	ldr	r3, [r3, #0]
   b8a46:	6a1b      	ldr	r3, [r3, #32]
   b8a48:	9301      	str	r3, [sp, #4]
   b8a4a:	bd08      	pop	{r3, pc}
   b8a4c:	00030228 	.word	0x00030228

000b8a50 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <hal_i2c_available+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030228 	.word	0x00030228

000b8a60 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <hal_i2c_read+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030228 	.word	0x00030228

000b8a70 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <hal_i2c_peek+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030228 	.word	0x00030228

000b8a80 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <hal_i2c_flush+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030228 	.word	0x00030228

000b8a90 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <hal_i2c_is_enabled+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	00030228 	.word	0x00030228

000b8aa0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <hal_i2c_init+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	00030228 	.word	0x00030228

000b8ab0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <hal_spi_begin+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	681b      	ldr	r3, [r3, #0]
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	00030230 	.word	0x00030230

000b8ac0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <hal_spi_transfer+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	695b      	ldr	r3, [r3, #20]
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	00030230 	.word	0x00030230

000b8ad0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <hal_spi_init+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	69db      	ldr	r3, [r3, #28]
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	00030230 	.word	0x00030230

000b8ae0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <hal_spi_is_enabled+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	6a1b      	ldr	r3, [r3, #32]
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	00030230 	.word	0x00030230

000b8af0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <hal_spi_info+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	00030230 	.word	0x00030230

000b8b00 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <hal_spi_set_settings+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	00030230 	.word	0x00030230

000b8b10 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <hal_spi_acquire+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	00030230 	.word	0x00030230

000b8b20 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <hal_spi_release+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	00030230 	.word	0x00030230

000b8b30 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <HAL_Tone_Start+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	681b      	ldr	r3, [r3, #0]
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	00030224 	.word	0x00030224

000b8b40 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <HAL_Tone_Stop+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	685b      	ldr	r3, [r3, #4]
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	00030224 	.word	0x00030224

000b8b50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <HAL_USB_USART_Init+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	681b      	ldr	r3, [r3, #0]
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	0003024c 	.word	0x0003024c

000b8b60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <HAL_USB_USART_Begin+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	685b      	ldr	r3, [r3, #4]
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	0003024c 	.word	0x0003024c

000b8b70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <HAL_USB_USART_Available_Data+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	691b      	ldr	r3, [r3, #16]
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	0003024c 	.word	0x0003024c

000b8b80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	695b      	ldr	r3, [r3, #20]
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	0003024c 	.word	0x0003024c

000b8b90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8b90:	b508      	push	{r3, lr}
   b8b92:	4b02      	ldr	r3, [pc, #8]	; (b8b9c <HAL_USB_USART_Receive_Data+0xc>)
   b8b94:	681b      	ldr	r3, [r3, #0]
   b8b96:	699b      	ldr	r3, [r3, #24]
   b8b98:	9301      	str	r3, [sp, #4]
   b8b9a:	bd08      	pop	{r3, pc}
   b8b9c:	0003024c 	.word	0x0003024c

000b8ba0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8ba0:	b508      	push	{r3, lr}
   b8ba2:	4b02      	ldr	r3, [pc, #8]	; (b8bac <HAL_USB_USART_Send_Data+0xc>)
   b8ba4:	681b      	ldr	r3, [r3, #0]
   b8ba6:	69db      	ldr	r3, [r3, #28]
   b8ba8:	9301      	str	r3, [sp, #4]
   b8baa:	bd08      	pop	{r3, pc}
   b8bac:	0003024c 	.word	0x0003024c

000b8bb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8bb0:	b508      	push	{r3, lr}
   b8bb2:	4b02      	ldr	r3, [pc, #8]	; (b8bbc <HAL_USB_USART_Flush_Data+0xc>)
   b8bb4:	681b      	ldr	r3, [r3, #0]
   b8bb6:	6a1b      	ldr	r3, [r3, #32]
   b8bb8:	9301      	str	r3, [sp, #4]
   b8bba:	bd08      	pop	{r3, pc}
   b8bbc:	0003024c 	.word	0x0003024c

000b8bc0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <panic_+0xc>)
   b8bc4:	681b      	ldr	r3, [r3, #0]
   b8bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8bc8:	9301      	str	r3, [sp, #4]
   b8bca:	bd08      	pop	{r3, pc}
   b8bcc:	00030260 	.word	0x00030260

000b8bd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b02      	ldr	r3, [pc, #8]	; (b8bdc <set_system_mode+0xc>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	685b      	ldr	r3, [r3, #4]
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	bd08      	pop	{r3, pc}
   b8bdc:	00030220 	.word	0x00030220

000b8be0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8be0:	b508      	push	{r3, lr}
   b8be2:	4b02      	ldr	r3, [pc, #8]	; (b8bec <system_delay_ms+0xc>)
   b8be4:	681b      	ldr	r3, [r3, #0]
   b8be6:	695b      	ldr	r3, [r3, #20]
   b8be8:	9301      	str	r3, [sp, #4]
   b8bea:	bd08      	pop	{r3, pc}
   b8bec:	00030220 	.word	0x00030220

000b8bf0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8bf0:	b508      	push	{r3, lr}
   b8bf2:	4b03      	ldr	r3, [pc, #12]	; (b8c00 <system_ctrl_set_app_request_handler+0x10>)
   b8bf4:	681b      	ldr	r3, [r3, #0]
   b8bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8bfa:	9301      	str	r3, [sp, #4]
   b8bfc:	bd08      	pop	{r3, pc}
   b8bfe:	0000      	.short	0x0000
   b8c00:	00030220 	.word	0x00030220

000b8c04 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8c04:	b508      	push	{r3, lr}
   b8c06:	4b03      	ldr	r3, [pc, #12]	; (b8c14 <system_ctrl_set_result+0x10>)
   b8c08:	681b      	ldr	r3, [r3, #0]
   b8c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8c0e:	9301      	str	r3, [sp, #4]
   b8c10:	bd08      	pop	{r3, pc}
   b8c12:	0000      	.short	0x0000
   b8c14:	00030220 	.word	0x00030220

000b8c18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8c18:	b508      	push	{r3, lr}
   b8c1a:	4b02      	ldr	r3, [pc, #8]	; (b8c24 <network_connect+0xc>)
   b8c1c:	681b      	ldr	r3, [r3, #0]
   b8c1e:	685b      	ldr	r3, [r3, #4]
   b8c20:	9301      	str	r3, [sp, #4]
   b8c22:	bd08      	pop	{r3, pc}
   b8c24:	00030240 	.word	0x00030240

000b8c28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8c28:	b508      	push	{r3, lr}
   b8c2a:	4b02      	ldr	r3, [pc, #8]	; (b8c34 <network_connecting+0xc>)
   b8c2c:	681b      	ldr	r3, [r3, #0]
   b8c2e:	689b      	ldr	r3, [r3, #8]
   b8c30:	9301      	str	r3, [sp, #4]
   b8c32:	bd08      	pop	{r3, pc}
   b8c34:	00030240 	.word	0x00030240

000b8c38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8c38:	b508      	push	{r3, lr}
   b8c3a:	4b02      	ldr	r3, [pc, #8]	; (b8c44 <network_disconnect+0xc>)
   b8c3c:	681b      	ldr	r3, [r3, #0]
   b8c3e:	68db      	ldr	r3, [r3, #12]
   b8c40:	9301      	str	r3, [sp, #4]
   b8c42:	bd08      	pop	{r3, pc}
   b8c44:	00030240 	.word	0x00030240

000b8c48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8c48:	b508      	push	{r3, lr}
   b8c4a:	4b02      	ldr	r3, [pc, #8]	; (b8c54 <network_ready+0xc>)
   b8c4c:	681b      	ldr	r3, [r3, #0]
   b8c4e:	691b      	ldr	r3, [r3, #16]
   b8c50:	9301      	str	r3, [sp, #4]
   b8c52:	bd08      	pop	{r3, pc}
   b8c54:	00030240 	.word	0x00030240

000b8c58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8c58:	b508      	push	{r3, lr}
   b8c5a:	4b02      	ldr	r3, [pc, #8]	; (b8c64 <network_on+0xc>)
   b8c5c:	681b      	ldr	r3, [r3, #0]
   b8c5e:	695b      	ldr	r3, [r3, #20]
   b8c60:	9301      	str	r3, [sp, #4]
   b8c62:	bd08      	pop	{r3, pc}
   b8c64:	00030240 	.word	0x00030240

000b8c68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8c68:	b508      	push	{r3, lr}
   b8c6a:	4b02      	ldr	r3, [pc, #8]	; (b8c74 <network_off+0xc>)
   b8c6c:	681b      	ldr	r3, [r3, #0]
   b8c6e:	699b      	ldr	r3, [r3, #24]
   b8c70:	9301      	str	r3, [sp, #4]
   b8c72:	bd08      	pop	{r3, pc}
   b8c74:	00030240 	.word	0x00030240

000b8c78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8c78:	b508      	push	{r3, lr}
   b8c7a:	4b02      	ldr	r3, [pc, #8]	; (b8c84 <network_listen+0xc>)
   b8c7c:	681b      	ldr	r3, [r3, #0]
   b8c7e:	69db      	ldr	r3, [r3, #28]
   b8c80:	9301      	str	r3, [sp, #4]
   b8c82:	bd08      	pop	{r3, pc}
   b8c84:	00030240 	.word	0x00030240

000b8c88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8c88:	b508      	push	{r3, lr}
   b8c8a:	4b02      	ldr	r3, [pc, #8]	; (b8c94 <network_listening+0xc>)
   b8c8c:	681b      	ldr	r3, [r3, #0]
   b8c8e:	6a1b      	ldr	r3, [r3, #32]
   b8c90:	9301      	str	r3, [sp, #4]
   b8c92:	bd08      	pop	{r3, pc}
   b8c94:	00030240 	.word	0x00030240

000b8c98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8c98:	b508      	push	{r3, lr}
   b8c9a:	4b02      	ldr	r3, [pc, #8]	; (b8ca4 <network_set_listen_timeout+0xc>)
   b8c9c:	681b      	ldr	r3, [r3, #0]
   b8c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8ca0:	9301      	str	r3, [sp, #4]
   b8ca2:	bd08      	pop	{r3, pc}
   b8ca4:	00030240 	.word	0x00030240

000b8ca8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8ca8:	b508      	push	{r3, lr}
   b8caa:	4b02      	ldr	r3, [pc, #8]	; (b8cb4 <network_get_listen_timeout+0xc>)
   b8cac:	681b      	ldr	r3, [r3, #0]
   b8cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8cb0:	9301      	str	r3, [sp, #4]
   b8cb2:	bd08      	pop	{r3, pc}
   b8cb4:	00030240 	.word	0x00030240

000b8cb8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8cb8:	b508      	push	{r3, lr}
   b8cba:	4b02      	ldr	r3, [pc, #8]	; (b8cc4 <network_is_on+0xc>)
   b8cbc:	681b      	ldr	r3, [r3, #0]
   b8cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8cc0:	9301      	str	r3, [sp, #4]
   b8cc2:	bd08      	pop	{r3, pc}
   b8cc4:	00030240 	.word	0x00030240

000b8cc8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8cc8:	b508      	push	{r3, lr}
   b8cca:	4b02      	ldr	r3, [pc, #8]	; (b8cd4 <network_is_off+0xc>)
   b8ccc:	681b      	ldr	r3, [r3, #0]
   b8cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8cd0:	9301      	str	r3, [sp, #4]
   b8cd2:	bd08      	pop	{r3, pc}
   b8cd4:	00030240 	.word	0x00030240

000b8cd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8cd8:	b508      	push	{r3, lr}
   b8cda:	4b02      	ldr	r3, [pc, #8]	; (b8ce4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8cdc:	681b      	ldr	r3, [r3, #0]
   b8cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8ce0:	9301      	str	r3, [sp, #4]
   b8ce2:	bd08      	pop	{r3, pc}
   b8ce4:	00030244 	.word	0x00030244

000b8ce8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b8ce8:	b508      	push	{r3, lr}
   b8cea:	4b02      	ldr	r3, [pc, #8]	; (b8cf4 <spark_cloud_disconnect+0xc>)
   b8cec:	681b      	ldr	r3, [r3, #0]
   b8cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8cf0:	9301      	str	r3, [sp, #4]
   b8cf2:	bd08      	pop	{r3, pc}
   b8cf4:	00030244 	.word	0x00030244

000b8cf8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8cf8:	b508      	push	{r3, lr}
   b8cfa:	4b02      	ldr	r3, [pc, #8]	; (b8d04 <malloc+0xc>)
   b8cfc:	681b      	ldr	r3, [r3, #0]
   b8cfe:	681b      	ldr	r3, [r3, #0]
   b8d00:	9301      	str	r3, [sp, #4]
   b8d02:	bd08      	pop	{r3, pc}
   b8d04:	0003021c 	.word	0x0003021c

000b8d08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8d08:	b508      	push	{r3, lr}
   b8d0a:	4b02      	ldr	r3, [pc, #8]	; (b8d14 <free+0xc>)
   b8d0c:	681b      	ldr	r3, [r3, #0]
   b8d0e:	685b      	ldr	r3, [r3, #4]
   b8d10:	9301      	str	r3, [sp, #4]
   b8d12:	bd08      	pop	{r3, pc}
   b8d14:	0003021c 	.word	0x0003021c

000b8d18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8d18:	b508      	push	{r3, lr}
   b8d1a:	4b02      	ldr	r3, [pc, #8]	; (b8d24 <realloc+0xc>)
   b8d1c:	681b      	ldr	r3, [r3, #0]
   b8d1e:	689b      	ldr	r3, [r3, #8]
   b8d20:	9301      	str	r3, [sp, #4]
   b8d22:	bd08      	pop	{r3, pc}
   b8d24:	0003021c 	.word	0x0003021c

000b8d28 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8d28:	b508      	push	{r3, lr}
   b8d2a:	4b02      	ldr	r3, [pc, #8]	; (b8d34 <snprintf+0xc>)
   b8d2c:	681b      	ldr	r3, [r3, #0]
   b8d2e:	69db      	ldr	r3, [r3, #28]
   b8d30:	9301      	str	r3, [sp, #4]
   b8d32:	bd08      	pop	{r3, pc}
   b8d34:	0003021c 	.word	0x0003021c

000b8d38 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8d38:	b508      	push	{r3, lr}
   b8d3a:	4b02      	ldr	r3, [pc, #8]	; (b8d44 <vsnprintf+0xc>)
   b8d3c:	681b      	ldr	r3, [r3, #0]
   b8d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8d40:	9301      	str	r3, [sp, #4]
   b8d42:	bd08      	pop	{r3, pc}
   b8d44:	0003021c 	.word	0x0003021c

000b8d48 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8d48:	b508      	push	{r3, lr}
   b8d4a:	4b02      	ldr	r3, [pc, #8]	; (b8d54 <_malloc_r+0xc>)
   b8d4c:	681b      	ldr	r3, [r3, #0]
   b8d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8d50:	9301      	str	r3, [sp, #4]
   b8d52:	bd08      	pop	{r3, pc}
   b8d54:	0003021c 	.word	0x0003021c

000b8d58 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8d58:	b508      	push	{r3, lr}
   b8d5a:	4b02      	ldr	r3, [pc, #8]	; (b8d64 <__assert_func+0xc>)
   b8d5c:	681b      	ldr	r3, [r3, #0]
   b8d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8d60:	9301      	str	r3, [sp, #4]
   b8d62:	bd08      	pop	{r3, pc}
   b8d64:	0003021c 	.word	0x0003021c

000b8d68 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8d68:	b508      	push	{r3, lr}
   b8d6a:	4b02      	ldr	r3, [pc, #8]	; (b8d74 <newlib_impure_ptr_callback+0xc>)
   b8d6c:	681b      	ldr	r3, [r3, #0]
   b8d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8d70:	9301      	str	r3, [sp, #4]
   b8d72:	bd08      	pop	{r3, pc}
   b8d74:	0003021c 	.word	0x0003021c

000b8d78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8d78:	2200      	movs	r2, #0
   b8d7a:	6840      	ldr	r0, [r0, #4]
   b8d7c:	4611      	mov	r1, r2
   b8d7e:	f7ff bf83 	b.w	b8c88 <network_listening>

000b8d82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8d82:	2200      	movs	r2, #0
   b8d84:	6840      	ldr	r0, [r0, #4]
   b8d86:	4611      	mov	r1, r2
   b8d88:	f7ff bf8e 	b.w	b8ca8 <network_get_listen_timeout>

000b8d8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8d8c:	6840      	ldr	r0, [r0, #4]
   b8d8e:	2200      	movs	r2, #0
   b8d90:	f7ff bf82 	b.w	b8c98 <network_set_listen_timeout>

000b8d94 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8d94:	6840      	ldr	r0, [r0, #4]
   b8d96:	2200      	movs	r2, #0
   b8d98:	f081 0101 	eor.w	r1, r1, #1
   b8d9c:	f7ff bf6c 	b.w	b8c78 <network_listen>

000b8da0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8da0:	2300      	movs	r3, #0
   b8da2:	6840      	ldr	r0, [r0, #4]
   b8da4:	461a      	mov	r2, r3
   b8da6:	4619      	mov	r1, r3
   b8da8:	f7ff bf5e 	b.w	b8c68 <network_off>

000b8dac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8dac:	2300      	movs	r3, #0
   b8dae:	6840      	ldr	r0, [r0, #4]
   b8db0:	461a      	mov	r2, r3
   b8db2:	4619      	mov	r1, r3
   b8db4:	f7ff bf50 	b.w	b8c58 <network_on>

000b8db8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8db8:	2200      	movs	r2, #0
   b8dba:	6840      	ldr	r0, [r0, #4]
   b8dbc:	4611      	mov	r1, r2
   b8dbe:	f7ff bf43 	b.w	b8c48 <network_ready>

000b8dc2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8dc2:	2200      	movs	r2, #0
   b8dc4:	6840      	ldr	r0, [r0, #4]
   b8dc6:	4611      	mov	r1, r2
   b8dc8:	f7ff bf2e 	b.w	b8c28 <network_connecting>

000b8dcc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8dcc:	6840      	ldr	r0, [r0, #4]
   b8dce:	2200      	movs	r2, #0
   b8dd0:	2102      	movs	r1, #2
   b8dd2:	f7ff bf31 	b.w	b8c38 <network_disconnect>

000b8dd6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8dd6:	2300      	movs	r3, #0
   b8dd8:	6840      	ldr	r0, [r0, #4]
   b8dda:	461a      	mov	r2, r3
   b8ddc:	f7ff bf1c 	b.w	b8c18 <network_connect>

000b8de0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8de0:	4b02      	ldr	r3, [pc, #8]	; (b8dec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8de2:	2203      	movs	r2, #3
   b8de4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8de6:	4a02      	ldr	r2, [pc, #8]	; (b8df0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8de8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8dea:	4770      	bx	lr
   b8dec:	2003e6bc 	.word	0x2003e6bc
   b8df0:	000bbdb8 	.word	0x000bbdb8

000b8df4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8df4:	2100      	movs	r1, #0
   b8df6:	f7ff be93 	b.w	b8b20 <hal_spi_release>

000b8dfa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8dfa:	2100      	movs	r1, #0
   b8dfc:	f7ff be88 	b.w	b8b10 <hal_spi_acquire>

000b8e00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8e00:	b510      	push	{r4, lr}
   b8e02:	4604      	mov	r4, r0
   b8e04:	4608      	mov	r0, r1
{
    _spi = spi;
   b8e06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8e08:	f7ff fe62 	bl	b8ad0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8e0c:	2300      	movs	r3, #0
   b8e0e:	6063      	str	r3, [r4, #4]
}
   b8e10:	4620      	mov	r0, r4
   b8e12:	bd10      	pop	{r4, pc}

000b8e14 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8e14:	b513      	push	{r0, r1, r4, lr}
   b8e16:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8e18:	7800      	ldrb	r0, [r0, #0]
   b8e1a:	f7ff ffee 	bl	b8dfa <_ZN8SPIClass4lockEv.isra.0>
   b8e1e:	b958      	cbnz	r0, b8e38 <_ZN8SPIClass5beginEv+0x24>
   b8e20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8e22:	9001      	str	r0, [sp, #4]
   b8e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8e28:	f7ff fe42 	bl	b8ab0 <hal_spi_begin>
        unlock();
   b8e2c:	9801      	ldr	r0, [sp, #4]
    }
}
   b8e2e:	b002      	add	sp, #8
   b8e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8e34:	f7ff bfde 	b.w	b8df4 <_ZN8SPIClass6unlockEv.isra.0>
   b8e38:	b002      	add	sp, #8
   b8e3a:	bd10      	pop	{r4, pc}

000b8e3c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8e3c:	7800      	ldrb	r0, [r0, #0]
   b8e3e:	f7ff bfd9 	b.w	b8df4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8e44 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8e44:	0840      	lsrs	r0, r0, #1
{
   b8e46:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8e48:	6018      	str	r0, [r3, #0]
   b8e4a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8e4c:	6818      	ldr	r0, [r3, #0]
   b8e4e:	4288      	cmp	r0, r1
   b8e50:	b2e5      	uxtb	r5, r4
   b8e52:	d906      	bls.n	b8e62 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8e54:	3401      	adds	r4, #1
   b8e56:	2c08      	cmp	r4, #8
   b8e58:	d002      	beq.n	b8e60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8e5a:	0840      	lsrs	r0, r0, #1
   b8e5c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8e5e:	e7f5      	b.n	b8e4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8e60:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8e62:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8e64:	5d5b      	ldrb	r3, [r3, r5]
   b8e66:	7013      	strb	r3, [r2, #0]
}
   b8e68:	bd30      	pop	{r4, r5, pc}
   b8e6a:	bf00      	nop
   b8e6c:	000bbdec 	.word	0x000bbdec

000b8e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e74:	4606      	mov	r6, r0
   b8e76:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8e78:	7800      	ldrb	r0, [r0, #0]
{
   b8e7a:	460c      	mov	r4, r1
    CHECK(lock());
   b8e7c:	f7ff ffbd 	bl	b8dfa <_ZN8SPIClass4lockEv.isra.0>
   b8e80:	2800      	cmp	r0, #0
   b8e82:	db1b      	blt.n	b8ebc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8e84:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8e86:	2214      	movs	r2, #20
   b8e88:	2100      	movs	r1, #0
   b8e8a:	a809      	add	r0, sp, #36	; 0x24
   b8e8c:	f001 f8c8 	bl	ba020 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8e90:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8e92:	2200      	movs	r2, #0
   b8e94:	a909      	add	r1, sp, #36	; 0x24
   b8e96:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8e98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8e9c:	f7ff fe28 	bl	b8af0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8ea0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8ea4:	b113      	cbz	r3, b8eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8ea6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8eaa:	b155      	cbz	r5, b8ec2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8eac:	2700      	movs	r7, #0
   b8eae:	46b9      	mov	r9, r7
   b8eb0:	46b8      	mov	r8, r7
   b8eb2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8eb4:	7923      	ldrb	r3, [r4, #4]
   b8eb6:	b15d      	cbz	r5, b8ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8eb8:	b1c3      	cbz	r3, b8eec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8eba:	2000      	movs	r0, #0
}
   b8ebc:	b00f      	add	sp, #60	; 0x3c
   b8ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8ec2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8ec6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8eca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8ece:	e7f1      	b.n	b8eb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8ed0:	2b00      	cmp	r3, #0
   b8ed2:	d135      	bne.n	b8f40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8ed4:	68a3      	ldr	r3, [r4, #8]
   b8ed6:	4543      	cmp	r3, r8
   b8ed8:	d108      	bne.n	b8eec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8eda:	f88d 9020 	strb.w	r9, [sp, #32]
   b8ede:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8ee2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8ee6:	89a3      	ldrh	r3, [r4, #12]
   b8ee8:	429a      	cmp	r2, r3
   b8eea:	d0e6      	beq.n	b8eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8eec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8eee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8ef0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8ef4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8ef6:	ab04      	add	r3, sp, #16
   b8ef8:	f10d 020f 	add.w	r2, sp, #15
   b8efc:	f7ff ffa2 	bl	b8e44 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8f00:	7921      	ldrb	r1, [r4, #4]
   b8f02:	b985      	cbnz	r5, b8f26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8f04:	b989      	cbnz	r1, b8f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8f06:	68a3      	ldr	r3, [r4, #8]
   b8f08:	4543      	cmp	r3, r8
   b8f0a:	d30e      	bcc.n	b8f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8f0c:	f88d 9020 	strb.w	r9, [sp, #32]
   b8f10:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8f14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8f18:	89a3      	ldrh	r3, [r4, #12]
   b8f1a:	429a      	cmp	r2, r3
   b8f1c:	d105      	bne.n	b8f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8f1e:	9b04      	ldr	r3, [sp, #16]
   b8f20:	4543      	cmp	r3, r8
   b8f22:	d102      	bne.n	b8f2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8f24:	e7c9      	b.n	b8eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8f26:	2900      	cmp	r1, #0
   b8f28:	d1f9      	bne.n	b8f1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8f2a:	2300      	movs	r3, #0
   b8f2c:	9301      	str	r3, [sp, #4]
   b8f2e:	7b63      	ldrb	r3, [r4, #13]
   b8f30:	9300      	str	r3, [sp, #0]
   b8f32:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8f36:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8f38:	7830      	ldrb	r0, [r6, #0]
   b8f3a:	f7ff fde1 	bl	b8b00 <hal_spi_set_settings>
   b8f3e:	e7bc      	b.n	b8eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8f40:	e9cd 5500 	strd	r5, r5, [sp]
   b8f44:	462b      	mov	r3, r5
   b8f46:	462a      	mov	r2, r5
   b8f48:	2101      	movs	r1, #1
   b8f4a:	e7f5      	b.n	b8f38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8f4c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8f4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8f4e:	7800      	ldrb	r0, [r0, #0]
   b8f50:	f7ff fdb6 	bl	b8ac0 <hal_spi_transfer>
}
   b8f54:	b2c0      	uxtb	r0, r0
   b8f56:	bd08      	pop	{r3, pc}

000b8f58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8f58:	4b05      	ldr	r3, [pc, #20]	; (b8f70 <_GLOBAL__sub_I_System+0x18>)
   b8f5a:	2202      	movs	r2, #2
   b8f5c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8f5e:	4b05      	ldr	r3, [pc, #20]	; (b8f74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8f60:	4a05      	ldr	r2, [pc, #20]	; (b8f78 <_GLOBAL__sub_I_System+0x20>)
   b8f62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8f64:	2000      	movs	r0, #0
   b8f66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8f6a:	f7ff be31 	b.w	b8bd0 <set_system_mode>
   b8f6e:	bf00      	nop
   b8f70:	2003e6d0 	.word	0x2003e6d0
   b8f74:	2003e6c4 	.word	0x2003e6c4
   b8f78:	ffff0000 	.word	0xffff0000

000b8f7c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8f7c:	b510      	push	{r4, lr}
   b8f7e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8f80:	f001 f89c 	bl	ba0bc <strlen>
   b8f84:	3801      	subs	r0, #1
   b8f86:	1823      	adds	r3, r4, r0
   b8f88:	4620      	mov	r0, r4
	while(i<j){
   b8f8a:	4283      	cmp	r3, r0
   b8f8c:	d906      	bls.n	b8f9c <_Z11str_reversePc+0x20>
		c = *i;
   b8f8e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8f90:	7819      	ldrb	r1, [r3, #0]
   b8f92:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8f96:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8f9a:	e7f6      	b.n	b8f8a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8f9c:	bd10      	pop	{r4, pc}

000b8f9e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8f9e:	b570      	push	{r4, r5, r6, lr}
   b8fa0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8fa2:	1e91      	subs	r1, r2, #2
   b8fa4:	2922      	cmp	r1, #34	; 0x22
   b8fa6:	d81d      	bhi.n	b8fe4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8fa8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8faa:	b930      	cbnz	r0, b8fba <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8fac:	4423      	add	r3, r4
            *ptr++ = '0';
   b8fae:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8fb0:	429d      	cmp	r5, r3
   b8fb2:	d210      	bcs.n	b8fd6 <ultoa+0x38>
            *ptr++ = '0';
   b8fb4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8fb8:	e7fa      	b.n	b8fb0 <ultoa+0x12>
            result.quot = a/radix;
   b8fba:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8fbe:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8fc2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8fc4:	2809      	cmp	r0, #9
                *ptr += '0';
   b8fc6:	bf94      	ite	ls
   b8fc8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8fca:	3157      	addhi	r1, #87	; 0x57
   b8fcc:	b2c9      	uxtb	r1, r1
   b8fce:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8fd2:	4630      	mov	r0, r6
	while(a){
   b8fd4:	e7e9      	b.n	b8faa <ultoa+0xc>

	*ptr = '\0';
   b8fd6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8fd8:	4620      	mov	r0, r4
	*ptr = '\0';
   b8fda:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8fdc:	f7ff ffce 	bl	b8f7c <_Z11str_reversePc>
	return buffer;
   b8fe0:	4620      	mov	r0, r4
}
   b8fe2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8fe4:	2000      	movs	r0, #0
   b8fe6:	e7fc      	b.n	b8fe2 <ultoa+0x44>

000b8fe8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8fe8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8fea:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8fec:	460c      	mov	r4, r1
   b8fee:	4615      	mov	r5, r2
	if(a<0){
   b8ff0:	da0e      	bge.n	b9010 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8ff6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8ffa:	bf14      	ite	ne
   b8ffc:	4258      	negne	r0, r3
   b8ffe:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9000:	2301      	movs	r3, #1
		*buffer = '-';
   b9002:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9004:	462a      	mov	r2, r5
   b9006:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9008:	f7ff ffc9 	bl	b8f9e <ultoa>
	}
	return buffer;
}
   b900c:	4620      	mov	r0, r4
   b900e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9010:	2301      	movs	r3, #1
   b9012:	e7f9      	b.n	b9008 <itoa+0x20>

000b9014 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9014:	b510      	push	{r4, lr}
   b9016:	4604      	mov	r4, r0
{
	free(buffer);
   b9018:	6800      	ldr	r0, [r0, #0]
   b901a:	f7ff fe75 	bl	b8d08 <free>
}
   b901e:	4620      	mov	r0, r4
   b9020:	bd10      	pop	{r4, pc}

000b9022 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9022:	b510      	push	{r4, lr}
   b9024:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9026:	6800      	ldr	r0, [r0, #0]
   b9028:	b108      	cbz	r0, b902e <_ZN6String10invalidateEv+0xc>
   b902a:	f7ff fe6d 	bl	b8d08 <free>
	buffer = NULL;
   b902e:	2300      	movs	r3, #0
	capacity = len = 0;
   b9030:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9034:	6023      	str	r3, [r4, #0]
}
   b9036:	bd10      	pop	{r4, pc}

000b9038 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9038:	b538      	push	{r3, r4, r5, lr}
   b903a:	4604      	mov	r4, r0
   b903c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b903e:	6800      	ldr	r0, [r0, #0]
   b9040:	3101      	adds	r1, #1
   b9042:	f7ff fe69 	bl	b8d18 <realloc>
	if (newbuffer) {
   b9046:	b110      	cbz	r0, b904e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9048:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b904c:	2001      	movs	r0, #1
	}
	return 0;
}
   b904e:	bd38      	pop	{r3, r4, r5, pc}

000b9050 <_ZN6String7reserveEj>:
{
   b9050:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9052:	6803      	ldr	r3, [r0, #0]
{
   b9054:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9056:	b123      	cbz	r3, b9062 <_ZN6String7reserveEj+0x12>
   b9058:	6843      	ldr	r3, [r0, #4]
   b905a:	428b      	cmp	r3, r1
   b905c:	d301      	bcc.n	b9062 <_ZN6String7reserveEj+0x12>
   b905e:	2001      	movs	r0, #1
}
   b9060:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9062:	4620      	mov	r0, r4
   b9064:	f7ff ffe8 	bl	b9038 <_ZN6String12changeBufferEj>
   b9068:	2800      	cmp	r0, #0
   b906a:	d0f9      	beq.n	b9060 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b906c:	68a3      	ldr	r3, [r4, #8]
   b906e:	2b00      	cmp	r3, #0
   b9070:	d1f5      	bne.n	b905e <_ZN6String7reserveEj+0xe>
   b9072:	6822      	ldr	r2, [r4, #0]
   b9074:	7013      	strb	r3, [r2, #0]
   b9076:	e7f2      	b.n	b905e <_ZN6String7reserveEj+0xe>

000b9078 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9078:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b907a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b907c:	4611      	mov	r1, r2
   b907e:	9201      	str	r2, [sp, #4]
{
   b9080:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9082:	f7ff ffe5 	bl	b9050 <_ZN6String7reserveEj>
   b9086:	9a01      	ldr	r2, [sp, #4]
   b9088:	b928      	cbnz	r0, b9096 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b908a:	4620      	mov	r0, r4
   b908c:	f7ff ffc9 	bl	b9022 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9090:	4620      	mov	r0, r4
   b9092:	b003      	add	sp, #12
   b9094:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9096:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9098:	4629      	mov	r1, r5
   b909a:	6820      	ldr	r0, [r4, #0]
   b909c:	f000 ffb2 	bl	ba004 <memcpy>
	buffer[len] = 0;
   b90a0:	6822      	ldr	r2, [r4, #0]
   b90a2:	68a3      	ldr	r3, [r4, #8]
   b90a4:	2100      	movs	r1, #0
   b90a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b90a8:	e7f2      	b.n	b9090 <_ZN6String4copyEPKcj+0x18>

000b90aa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b90aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b90ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b90ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b90b2:	4604      	mov	r4, r0
	len = 0;
   b90b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b90b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b90b8:	b141      	cbz	r1, b90cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b90ba:	4608      	mov	r0, r1
   b90bc:	9101      	str	r1, [sp, #4]
   b90be:	f000 fffd 	bl	ba0bc <strlen>
   b90c2:	9901      	ldr	r1, [sp, #4]
   b90c4:	4602      	mov	r2, r0
   b90c6:	4620      	mov	r0, r4
   b90c8:	f7ff ffd6 	bl	b9078 <_ZN6String4copyEPKcj>
}
   b90cc:	4620      	mov	r0, r4
   b90ce:	b002      	add	sp, #8
   b90d0:	bd10      	pop	{r4, pc}

000b90d2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b90d2:	4288      	cmp	r0, r1
{
   b90d4:	b510      	push	{r4, lr}
   b90d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b90d8:	d005      	beq.n	b90e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b90da:	680b      	ldr	r3, [r1, #0]
   b90dc:	b12b      	cbz	r3, b90ea <_ZN6StringaSERKS_+0x18>
   b90de:	688a      	ldr	r2, [r1, #8]
   b90e0:	4619      	mov	r1, r3
   b90e2:	f7ff ffc9 	bl	b9078 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b90e6:	4620      	mov	r0, r4
   b90e8:	bd10      	pop	{r4, pc}
	else invalidate();
   b90ea:	f7ff ff9a 	bl	b9022 <_ZN6String10invalidateEv>
   b90ee:	e7fa      	b.n	b90e6 <_ZN6StringaSERKS_+0x14>

000b90f0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b90f0:	b510      	push	{r4, lr}
	buffer = NULL;
   b90f2:	2300      	movs	r3, #0
String::String(const String &value)
   b90f4:	4604      	mov	r4, r0
	capacity = 0;
   b90f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b90fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   b90fc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b90fe:	f7ff ffe8 	bl	b90d2 <_ZN6StringaSERKS_>
}
   b9102:	4620      	mov	r0, r4
   b9104:	bd10      	pop	{r4, pc}

000b9106 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9106:	b513      	push	{r0, r1, r4, lr}
   b9108:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b910a:	b159      	cbz	r1, b9124 <_ZN6StringaSEPKc+0x1e>
   b910c:	4608      	mov	r0, r1
   b910e:	9101      	str	r1, [sp, #4]
   b9110:	f000 ffd4 	bl	ba0bc <strlen>
   b9114:	9901      	ldr	r1, [sp, #4]
   b9116:	4602      	mov	r2, r0
   b9118:	4620      	mov	r0, r4
   b911a:	f7ff ffad 	bl	b9078 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b911e:	4620      	mov	r0, r4
   b9120:	b002      	add	sp, #8
   b9122:	bd10      	pop	{r4, pc}
	else invalidate();
   b9124:	f7ff ff7d 	bl	b9022 <_ZN6String10invalidateEv>
   b9128:	e7f9      	b.n	b911e <_ZN6StringaSEPKc+0x18>

000b912a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b912a:	b510      	push	{r4, lr}
   b912c:	4604      	mov	r4, r0
   b912e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9130:	2300      	movs	r3, #0
	capacity = 0;
   b9132:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9136:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9138:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b913a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b913c:	a901      	add	r1, sp, #4
   b913e:	f7ff ff53 	bl	b8fe8 <itoa>
	*this = buf;
   b9142:	a901      	add	r1, sp, #4
   b9144:	4620      	mov	r0, r4
   b9146:	f7ff ffde 	bl	b9106 <_ZN6StringaSEPKc>
}
   b914a:	4620      	mov	r0, r4
   b914c:	b00a      	add	sp, #40	; 0x28
   b914e:	bd10      	pop	{r4, pc}

000b9150 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9150:	b570      	push	{r4, r5, r6, lr}
   b9152:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9154:	460e      	mov	r6, r1
   b9156:	b909      	cbnz	r1, b915c <_ZN6String6concatEPKcj+0xc>
   b9158:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b915a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b915c:	b16a      	cbz	r2, b917a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b915e:	6884      	ldr	r4, [r0, #8]
   b9160:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9162:	4621      	mov	r1, r4
   b9164:	f7ff ff74 	bl	b9050 <_ZN6String7reserveEj>
   b9168:	2800      	cmp	r0, #0
   b916a:	d0f5      	beq.n	b9158 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b916c:	6828      	ldr	r0, [r5, #0]
   b916e:	68ab      	ldr	r3, [r5, #8]
   b9170:	4631      	mov	r1, r6
   b9172:	4418      	add	r0, r3
   b9174:	f000 ff9a 	bl	ba0ac <strcpy>
	len = newlen;
   b9178:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b917a:	2001      	movs	r0, #1
   b917c:	e7ed      	b.n	b915a <_ZN6String6concatEPKcj+0xa>

000b917e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b917e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9180:	688a      	ldr	r2, [r1, #8]
   b9182:	6809      	ldr	r1, [r1, #0]
{
   b9184:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9186:	f7ff ffe3 	bl	b9150 <_ZN6String6concatEPKcj>
   b918a:	b910      	cbnz	r0, b9192 <_ZplRK15StringSumHelperRK6String+0x14>
   b918c:	4620      	mov	r0, r4
   b918e:	f7ff ff48 	bl	b9022 <_ZN6String10invalidateEv>
	return a;
}
   b9192:	4620      	mov	r0, r4
   b9194:	bd10      	pop	{r4, pc}

000b9196 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b9196:	b513      	push	{r0, r1, r4, lr}
   b9198:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b919a:	b929      	cbnz	r1, b91a8 <_ZplRK15StringSumHelperPKc+0x12>
   b919c:	4620      	mov	r0, r4
   b919e:	f7ff ff40 	bl	b9022 <_ZN6String10invalidateEv>
	return a;
}
   b91a2:	4620      	mov	r0, r4
   b91a4:	b002      	add	sp, #8
   b91a6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b91a8:	4608      	mov	r0, r1
   b91aa:	9101      	str	r1, [sp, #4]
   b91ac:	f000 ff86 	bl	ba0bc <strlen>
   b91b0:	9901      	ldr	r1, [sp, #4]
   b91b2:	4602      	mov	r2, r0
   b91b4:	4620      	mov	r0, r4
   b91b6:	f7ff ffcb 	bl	b9150 <_ZN6String6concatEPKcj>
   b91ba:	2800      	cmp	r0, #0
   b91bc:	d0ee      	beq.n	b919c <_ZplRK15StringSumHelperPKc+0x6>
   b91be:	e7f0      	b.n	b91a2 <_ZplRK15StringSumHelperPKc+0xc>

000b91c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b91c0:	4802      	ldr	r0, [pc, #8]	; (b91cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b91c2:	2300      	movs	r3, #0
   b91c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b91c6:	f7ff bbcb 	b.w	b8960 <os_mutex_recursive_create>
   b91ca:	bf00      	nop
   b91cc:	2003e6d4 	.word	0x2003e6d4

000b91d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b91d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b91d2:	4606      	mov	r6, r0
   b91d4:	460d      	mov	r5, r1
  size_t n = 0;
   b91d6:	188f      	adds	r7, r1, r2
   b91d8:	2400      	movs	r4, #0
  while (size--) {
   b91da:	42bd      	cmp	r5, r7
   b91dc:	d00c      	beq.n	b91f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b91de:	6833      	ldr	r3, [r6, #0]
   b91e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b91e4:	689b      	ldr	r3, [r3, #8]
   b91e6:	4630      	mov	r0, r6
   b91e8:	4798      	blx	r3
     if (chunk>=0)
   b91ea:	1e03      	subs	r3, r0, #0
   b91ec:	db01      	blt.n	b91f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b91ee:	441c      	add	r4, r3
  while (size--) {
   b91f0:	e7f3      	b.n	b91da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b91f2:	2c00      	cmp	r4, #0
   b91f4:	bf08      	it	eq
   b91f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b91f8:	4620      	mov	r0, r4
   b91fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b91fc:	b513      	push	{r0, r1, r4, lr}
   b91fe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b9200:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9202:	b159      	cbz	r1, b921c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9204:	9101      	str	r1, [sp, #4]
   b9206:	f000 ff59 	bl	ba0bc <strlen>
   b920a:	6823      	ldr	r3, [r4, #0]
   b920c:	9901      	ldr	r1, [sp, #4]
   b920e:	68db      	ldr	r3, [r3, #12]
   b9210:	4602      	mov	r2, r0
   b9212:	4620      	mov	r0, r4
    }
   b9214:	b002      	add	sp, #8
   b9216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b921a:	4718      	bx	r3
    }
   b921c:	b002      	add	sp, #8
   b921e:	bd10      	pop	{r4, pc}

000b9220 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9220:	b508      	push	{r3, lr}
  return write(str);
   b9222:	f7ff ffeb 	bl	b91fc <_ZN5Print5writeEPKc>
}
   b9226:	bd08      	pop	{r3, pc}

000b9228 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9228:	6803      	ldr	r3, [r0, #0]
   b922a:	689b      	ldr	r3, [r3, #8]
   b922c:	4718      	bx	r3

000b922e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b922e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9230:	210d      	movs	r1, #13
{
   b9232:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9234:	f7ff fff8 	bl	b9228 <_ZN5Print5printEc>
  n += print('\n');
   b9238:	210a      	movs	r1, #10
  size_t n = print('\r');
   b923a:	4604      	mov	r4, r0
  n += print('\n');
   b923c:	4628      	mov	r0, r5
   b923e:	f7ff fff3 	bl	b9228 <_ZN5Print5printEc>
  return n;
}
   b9242:	4420      	add	r0, r4
   b9244:	bd38      	pop	{r3, r4, r5, pc}

000b9246 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9246:	b538      	push	{r3, r4, r5, lr}
   b9248:	4605      	mov	r5, r0
  return write(str);
   b924a:	f7ff ffd7 	bl	b91fc <_ZN5Print5writeEPKc>
   b924e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9250:	4628      	mov	r0, r5
   b9252:	f7ff ffec 	bl	b922e <_ZN5Print7printlnEv>
  return n;
}
   b9256:	4420      	add	r0, r4
   b9258:	bd38      	pop	{r3, r4, r5, pc}

000b925a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b925a:	b530      	push	{r4, r5, lr}
   b925c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b925e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9260:	2a01      	cmp	r2, #1
  *str = '\0';
   b9262:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9266:	bf98      	it	ls
   b9268:	220a      	movls	r2, #10
   b926a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b926c:	460d      	mov	r5, r1
   b926e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9272:	fb01 5312 	mls	r3, r1, r2, r5
   b9276:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b927a:	2b09      	cmp	r3, #9
   b927c:	bf94      	ite	ls
   b927e:	3330      	addls	r3, #48	; 0x30
   b9280:	3337      	addhi	r3, #55	; 0x37
   b9282:	b2db      	uxtb	r3, r3
  } while(n);
   b9284:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9286:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b928a:	d9ef      	bls.n	b926c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b928c:	4621      	mov	r1, r4
   b928e:	f7ff ffb5 	bl	b91fc <_ZN5Print5writeEPKc>
}
   b9292:	b00b      	add	sp, #44	; 0x2c
   b9294:	bd30      	pop	{r4, r5, pc}

000b9296 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b929a:	b086      	sub	sp, #24
   b929c:	af00      	add	r7, sp, #0
   b929e:	4605      	mov	r5, r0
   b92a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b92a2:	1d38      	adds	r0, r7, #4
   b92a4:	2114      	movs	r1, #20
{
   b92a6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b92a8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b92aa:	f7ff fd45 	bl	b8d38 <vsnprintf>

    if (n<bufsize)
   b92ae:	2813      	cmp	r0, #19
   b92b0:	d80e      	bhi.n	b92d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b92b2:	1d39      	adds	r1, r7, #4
   b92b4:	4628      	mov	r0, r5
   b92b6:	f7ff ffa1 	bl	b91fc <_ZN5Print5writeEPKc>
   b92ba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b92bc:	b11e      	cbz	r6, b92c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b92be:	4628      	mov	r0, r5
   b92c0:	f7ff ffb5 	bl	b922e <_ZN5Print7printlnEv>
   b92c4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b92c6:	4620      	mov	r0, r4
   b92c8:	3718      	adds	r7, #24
   b92ca:	46bd      	mov	sp, r7
   b92cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b92d0:	f100 0308 	add.w	r3, r0, #8
   b92d4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b92d8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b92da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b92de:	4622      	mov	r2, r4
   b92e0:	1c41      	adds	r1, r0, #1
   b92e2:	683b      	ldr	r3, [r7, #0]
   b92e4:	4668      	mov	r0, sp
   b92e6:	f7ff fd27 	bl	b8d38 <vsnprintf>
  return write(str);
   b92ea:	4669      	mov	r1, sp
   b92ec:	4628      	mov	r0, r5
   b92ee:	f7ff ff85 	bl	b91fc <_ZN5Print5writeEPKc>
   b92f2:	4604      	mov	r4, r0
   b92f4:	46c5      	mov	sp, r8
   b92f6:	e7e1      	b.n	b92bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b92f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b92f8:	4b01      	ldr	r3, [pc, #4]	; (b9300 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b92fa:	4a02      	ldr	r2, [pc, #8]	; (b9304 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b92fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b92fe:	4770      	bx	lr
   b9300:	2003e6d8 	.word	0x2003e6d8
   b9304:	000bbdf4 	.word	0x000bbdf4

000b9308 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9308:	4b02      	ldr	r3, [pc, #8]	; (b9314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b930a:	681a      	ldr	r2, [r3, #0]
   b930c:	4b02      	ldr	r3, [pc, #8]	; (b9318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b930e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9310:	4770      	bx	lr
   b9312:	bf00      	nop
   b9314:	2003cecc 	.word	0x2003cecc
   b9318:	2003e6dc 	.word	0x2003e6dc

000b931c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b931c:	2100      	movs	r1, #0
   b931e:	f7ff bc5f 	b.w	b8be0 <system_delay_ms>
	...

000b9324 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b9324:	4b01      	ldr	r3, [pc, #4]	; (b932c <_GLOBAL__sub_I_RGB+0x8>)
   b9326:	2200      	movs	r2, #0
   b9328:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b932a:	4770      	bx	lr
   b932c:	2003e6e0 	.word	0x2003e6e0

000b9330 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9330:	4b01      	ldr	r3, [pc, #4]	; (b9338 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9332:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9334:	4770      	bx	lr
   b9336:	bf00      	nop
   b9338:	2003ced0 	.word	0x2003ced0

000b933c <serialEventRun>:
{
   b933c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b933e:	4b0b      	ldr	r3, [pc, #44]	; (b936c <serialEventRun+0x30>)
   b9340:	b143      	cbz	r3, b9354 <serialEventRun+0x18>
   b9342:	f000 f981 	bl	b9648 <_Z16_fetch_usbserialv>
   b9346:	6803      	ldr	r3, [r0, #0]
   b9348:	691b      	ldr	r3, [r3, #16]
   b934a:	4798      	blx	r3
   b934c:	2800      	cmp	r0, #0
   b934e:	dd01      	ble.n	b9354 <serialEventRun+0x18>
        serialEvent();
   b9350:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9354:	4b06      	ldr	r3, [pc, #24]	; (b9370 <serialEventRun+0x34>)
   b9356:	b143      	cbz	r3, b936a <serialEventRun+0x2e>
   b9358:	f000 fc12 	bl	b9b80 <_Z22__fetch_global_Serial1v>
   b935c:	6803      	ldr	r3, [r0, #0]
   b935e:	691b      	ldr	r3, [r3, #16]
   b9360:	4798      	blx	r3
   b9362:	2800      	cmp	r0, #0
   b9364:	dd01      	ble.n	b936a <serialEventRun+0x2e>
        serialEvent1();
   b9366:	f3af 8000 	nop.w
}
   b936a:	bd08      	pop	{r3, pc}
	...

000b9374 <_post_loop>:
{
   b9374:	b508      	push	{r3, lr}
	serialEventRun();
   b9376:	f7ff ffe1 	bl	b933c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b937a:	f7ff fad1 	bl	b8920 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b937e:	4b01      	ldr	r3, [pc, #4]	; (b9384 <_post_loop+0x10>)
   b9380:	6018      	str	r0, [r3, #0]
}
   b9382:	bd08      	pop	{r3, pc}
   b9384:	2003e738 	.word	0x2003e738

000b9388 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9388:	4805      	ldr	r0, [pc, #20]	; (b93a0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b938a:	4a06      	ldr	r2, [pc, #24]	; (b93a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b938c:	4906      	ldr	r1, [pc, #24]	; (b93a8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b938e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9390:	1a12      	subs	r2, r2, r0
   b9392:	f000 fe37 	bl	ba004 <memcpy>
    __backup_sram_signature = signature;
   b9396:	4b05      	ldr	r3, [pc, #20]	; (b93ac <_Z33system_initialize_user_backup_ramv+0x24>)
   b9398:	4a05      	ldr	r2, [pc, #20]	; (b93b0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b939a:	601a      	str	r2, [r3, #0]
}
   b939c:	bd08      	pop	{r3, pc}
   b939e:	bf00      	nop
   b93a0:	2003f400 	.word	0x2003f400
   b93a4:	2003f404 	.word	0x2003f404
   b93a8:	000bc084 	.word	0x000bc084
   b93ac:	2003f400 	.word	0x2003f400
   b93b0:	9a271c1e 	.word	0x9a271c1e

000b93b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b93b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b93b6:	2300      	movs	r3, #0
   b93b8:	9300      	str	r3, [sp, #0]
   b93ba:	461a      	mov	r2, r3
   b93bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b93c0:	f7ff fc20 	bl	b8c04 <system_ctrl_set_result>
}
   b93c4:	b003      	add	sp, #12
   b93c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b93cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b93cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b93ce:	8843      	ldrh	r3, [r0, #2]
   b93d0:	2b0a      	cmp	r3, #10
   b93d2:	d008      	beq.n	b93e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b93d4:	2b50      	cmp	r3, #80	; 0x50
   b93d6:	d10b      	bne.n	b93f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b93d8:	4b09      	ldr	r3, [pc, #36]	; (b9400 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b93da:	681b      	ldr	r3, [r3, #0]
   b93dc:	b14b      	cbz	r3, b93f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b93de:	b003      	add	sp, #12
   b93e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b93e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b93e6:	f7ff ffe5 	bl	b93b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b93ea:	b003      	add	sp, #12
   b93ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b93f0:	2300      	movs	r3, #0
   b93f2:	9300      	str	r3, [sp, #0]
   b93f4:	461a      	mov	r2, r3
   b93f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b93fa:	f7ff fc03 	bl	b8c04 <system_ctrl_set_result>
}
   b93fe:	e7f4      	b.n	b93ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9400:	2003e6f4 	.word	0x2003e6f4

000b9404 <module_user_init_hook>:
{
   b9404:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9406:	4812      	ldr	r0, [pc, #72]	; (b9450 <module_user_init_hook+0x4c>)
   b9408:	2100      	movs	r1, #0
   b940a:	f7ff fcad 	bl	b8d68 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b940e:	4b11      	ldr	r3, [pc, #68]	; (b9454 <module_user_init_hook+0x50>)
   b9410:	681a      	ldr	r2, [r3, #0]
   b9412:	4b11      	ldr	r3, [pc, #68]	; (b9458 <module_user_init_hook+0x54>)
   b9414:	429a      	cmp	r2, r3
   b9416:	4b11      	ldr	r3, [pc, #68]	; (b945c <module_user_init_hook+0x58>)
   b9418:	bf0c      	ite	eq
   b941a:	2201      	moveq	r2, #1
   b941c:	2200      	movne	r2, #0
   b941e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9420:	d001      	beq.n	b9426 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9422:	f7ff ffb1 	bl	b9388 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9426:	f7ff fa6b 	bl	b8900 <HAL_RNG_GetRandomNumber>
   b942a:	4604      	mov	r4, r0
    srand(seed);
   b942c:	f000 fe10 	bl	ba050 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9430:	4b0b      	ldr	r3, [pc, #44]	; (b9460 <module_user_init_hook+0x5c>)
   b9432:	b113      	cbz	r3, b943a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9434:	4620      	mov	r0, r4
   b9436:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b943a:	2100      	movs	r1, #0
   b943c:	4808      	ldr	r0, [pc, #32]	; (b9460 <module_user_init_hook+0x5c>)
   b943e:	f7ff fc4b 	bl	b8cd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9446:	4807      	ldr	r0, [pc, #28]	; (b9464 <module_user_init_hook+0x60>)
   b9448:	2100      	movs	r1, #0
   b944a:	f7ff bbd1 	b.w	b8bf0 <system_ctrl_set_app_request_handler>
   b944e:	bf00      	nop
   b9450:	000b9331 	.word	0x000b9331
   b9454:	2003f400 	.word	0x2003f400
   b9458:	9a271c1e 	.word	0x9a271c1e
   b945c:	2003e6f0 	.word	0x2003e6f0
   b9460:	00000000 	.word	0x00000000
   b9464:	000b93cd 	.word	0x000b93cd

000b9468 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b946a:	230c      	movs	r3, #12
   b946c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b9470:	6803      	ldr	r3, [r0, #0]
   b9472:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b9476:	7a03      	ldrb	r3, [r0, #8]
   b9478:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b947c:	6843      	ldr	r3, [r0, #4]
   b947e:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b9480:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b9482:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b9484:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9488:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b948a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b948e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9492:	f7ff fc29 	bl	b8ce8 <spark_cloud_disconnect>
}
   b9496:	b005      	add	sp, #20
   b9498:	f85d fb04 	ldr.w	pc, [sp], #4

000b949c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b949c:	4770      	bx	lr

000b949e <_ZN9IPAddressD0Ev>:
   b949e:	b510      	push	{r4, lr}
   b94a0:	2118      	movs	r1, #24
   b94a2:	4604      	mov	r4, r0
   b94a4:	f7fa fdf7 	bl	b4096 <_ZdlPvj>
   b94a8:	4620      	mov	r0, r4
   b94aa:	bd10      	pop	{r4, pc}

000b94ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b94ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b94ae:	7d03      	ldrb	r3, [r0, #20]
   b94b0:	2b06      	cmp	r3, #6
{
   b94b2:	b08d      	sub	sp, #52	; 0x34
   b94b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94b6:	f100 0704 	add.w	r7, r0, #4
   b94ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b94be:	d012      	beq.n	b94e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b94c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b94c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b94c8:	220a      	movs	r2, #10
   b94ca:	4630      	mov	r0, r6
   b94cc:	f7ff fec5 	bl	b925a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b94d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b94d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b94d4:	d019      	beq.n	b950a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b94d6:	2c00      	cmp	r4, #0
   b94d8:	d0f4      	beq.n	b94c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b94da:	212e      	movs	r1, #46	; 0x2e
   b94dc:	4630      	mov	r0, r6
   b94de:	f7ff fea3 	bl	b9228 <_ZN5Print5printEc>
   b94e2:	4404      	add	r4, r0
   b94e4:	e7ee      	b.n	b94c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94e6:	232f      	movs	r3, #47	; 0x2f
   b94e8:	466a      	mov	r2, sp
   b94ea:	4639      	mov	r1, r7
   b94ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b94ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94f2:	f7ff fa3d 	bl	b8970 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b94f6:	4668      	mov	r0, sp
   b94f8:	f000 fde0 	bl	ba0bc <strlen>
   b94fc:	6833      	ldr	r3, [r6, #0]
   b94fe:	4602      	mov	r2, r0
   b9500:	68db      	ldr	r3, [r3, #12]
   b9502:	4669      	mov	r1, sp
   b9504:	4630      	mov	r0, r6
   b9506:	4798      	blx	r3
   b9508:	4604      	mov	r4, r0
    }
    return n;
}
   b950a:	4620      	mov	r0, r4
   b950c:	b00d      	add	sp, #52	; 0x34
   b950e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9510 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9510:	b510      	push	{r4, lr}
   b9512:	4b05      	ldr	r3, [pc, #20]	; (b9528 <_ZN9IPAddressC1Ev+0x18>)
   b9514:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9516:	2211      	movs	r2, #17
   b9518:	f840 3b04 	str.w	r3, [r0], #4
   b951c:	2100      	movs	r1, #0
   b951e:	f000 fd7f 	bl	ba020 <memset>
}
   b9522:	4620      	mov	r0, r4
   b9524:	bd10      	pop	{r4, pc}
   b9526:	bf00      	nop
   b9528:	000bbe1c 	.word	0x000bbe1c

000b952c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b952c:	4603      	mov	r3, r0
   b952e:	4a07      	ldr	r2, [pc, #28]	; (b954c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9530:	b510      	push	{r4, lr}
   b9532:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9536:	f101 0210 	add.w	r2, r1, #16
   b953a:	f851 4b04 	ldr.w	r4, [r1], #4
   b953e:	f843 4b04 	str.w	r4, [r3], #4
   b9542:	4291      	cmp	r1, r2
   b9544:	d1f9      	bne.n	b953a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9546:	780a      	ldrb	r2, [r1, #0]
   b9548:	701a      	strb	r2, [r3, #0]
}
   b954a:	bd10      	pop	{r4, pc}
   b954c:	000bbe1c 	.word	0x000bbe1c

000b9550 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9550:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9552:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9556:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b955a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b955e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9562:	2304      	movs	r3, #4
   b9564:	6041      	str	r1, [r0, #4]
   b9566:	7503      	strb	r3, [r0, #20]
}
   b9568:	bd10      	pop	{r4, pc}
	...

000b956c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b956c:	b507      	push	{r0, r1, r2, lr}
   b956e:	4b06      	ldr	r3, [pc, #24]	; (b9588 <_ZN9IPAddressC1EPKh+0x1c>)
   b9570:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9572:	78cb      	ldrb	r3, [r1, #3]
   b9574:	9300      	str	r3, [sp, #0]
   b9576:	788b      	ldrb	r3, [r1, #2]
   b9578:	784a      	ldrb	r2, [r1, #1]
   b957a:	7809      	ldrb	r1, [r1, #0]
   b957c:	f7ff ffe8 	bl	b9550 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9580:	b003      	add	sp, #12
   b9582:	f85d fb04 	ldr.w	pc, [sp], #4
   b9586:	bf00      	nop
   b9588:	000bbe1c 	.word	0x000bbe1c

000b958c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b958c:	7441      	strb	r1, [r0, #17]
}
   b958e:	4770      	bx	lr

000b9590 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9590:	4770      	bx	lr

000b9592 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9592:	4770      	bx	lr

000b9594 <_ZN9USBSerial4readEv>:
{
   b9594:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9596:	2100      	movs	r1, #0
   b9598:	7c00      	ldrb	r0, [r0, #16]
   b959a:	f7ff faf9 	bl	b8b90 <HAL_USB_USART_Receive_Data>
}
   b959e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95a2:	bd08      	pop	{r3, pc}

000b95a4 <_ZN9USBSerial4peekEv>:
{
   b95a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b95a6:	2101      	movs	r1, #1
   b95a8:	7c00      	ldrb	r0, [r0, #16]
   b95aa:	f7ff faf1 	bl	b8b90 <HAL_USB_USART_Receive_Data>
}
   b95ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95b2:	bd08      	pop	{r3, pc}

000b95b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b95b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b95b6:	7c00      	ldrb	r0, [r0, #16]
   b95b8:	f7ff fae2 	bl	b8b80 <HAL_USB_USART_Available_Data_For_Write>
}
   b95bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b95c0:	bd08      	pop	{r3, pc}

000b95c2 <_ZN9USBSerial9availableEv>:
{
   b95c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b95c4:	7c00      	ldrb	r0, [r0, #16]
   b95c6:	f7ff fad3 	bl	b8b70 <HAL_USB_USART_Available_Data>
}
   b95ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b95ce:	bd08      	pop	{r3, pc}

000b95d0 <_ZN9USBSerial5writeEh>:
{
   b95d0:	b513      	push	{r0, r1, r4, lr}
   b95d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b95d4:	7c00      	ldrb	r0, [r0, #16]
{
   b95d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b95d8:	f7ff fad2 	bl	b8b80 <HAL_USB_USART_Available_Data_For_Write>
   b95dc:	2800      	cmp	r0, #0
   b95de:	9901      	ldr	r1, [sp, #4]
   b95e0:	dc01      	bgt.n	b95e6 <_ZN9USBSerial5writeEh+0x16>
   b95e2:	7c60      	ldrb	r0, [r4, #17]
   b95e4:	b120      	cbz	r0, b95f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b95e6:	7c20      	ldrb	r0, [r4, #16]
   b95e8:	f7ff fada 	bl	b8ba0 <HAL_USB_USART_Send_Data>
   b95ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b95f0:	b002      	add	sp, #8
   b95f2:	bd10      	pop	{r4, pc}

000b95f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b95f4:	7c00      	ldrb	r0, [r0, #16]
   b95f6:	f7ff badb 	b.w	b8bb0 <HAL_USB_USART_Flush_Data>

000b95fa <_ZN9USBSerialD0Ev>:
   b95fa:	b510      	push	{r4, lr}
   b95fc:	2114      	movs	r1, #20
   b95fe:	4604      	mov	r4, r0
   b9600:	f7fa fd49 	bl	b4096 <_ZdlPvj>
   b9604:	4620      	mov	r0, r4
   b9606:	bd10      	pop	{r4, pc}

000b9608 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9608:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b960a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b960e:	4604      	mov	r4, r0
   b9610:	4608      	mov	r0, r1
   b9612:	2100      	movs	r1, #0
   b9614:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9618:	4b04      	ldr	r3, [pc, #16]	; (b962c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b961a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b961c:	2301      	movs	r3, #1
  _serial = serial;
   b961e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9620:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9622:	4611      	mov	r1, r2
   b9624:	f7ff fa94 	bl	b8b50 <HAL_USB_USART_Init>
}
   b9628:	4620      	mov	r0, r4
   b962a:	bd10      	pop	{r4, pc}
   b962c:	000bbe30 	.word	0x000bbe30

000b9630 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9630:	7c00      	ldrb	r0, [r0, #16]
   b9632:	2200      	movs	r2, #0
   b9634:	f7ff ba94 	b.w	b8b60 <HAL_USB_USART_Begin>

000b9638 <_Z19acquireSerialBufferv>:
{
   b9638:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b963a:	2214      	movs	r2, #20
{
   b963c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b963e:	2100      	movs	r1, #0
   b9640:	f000 fcee 	bl	ba020 <memset>
}
   b9644:	4620      	mov	r0, r4
   b9646:	bd10      	pop	{r4, pc}

000b9648 <_Z16_fetch_usbserialv>:
{
   b9648:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b964a:	4c0f      	ldr	r4, [pc, #60]	; (b9688 <_Z16_fetch_usbserialv+0x40>)
{
   b964c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b964e:	a803      	add	r0, sp, #12
   b9650:	f7ff fff2 	bl	b9638 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9654:	7821      	ldrb	r1, [r4, #0]
   b9656:	f3bf 8f5b 	dmb	ish
   b965a:	f011 0101 	ands.w	r1, r1, #1
   b965e:	d10f      	bne.n	b9680 <_Z16_fetch_usbserialv+0x38>
   b9660:	4620      	mov	r0, r4
   b9662:	9101      	str	r1, [sp, #4]
   b9664:	f7fa fd26 	bl	b40b4 <__cxa_guard_acquire>
   b9668:	9901      	ldr	r1, [sp, #4]
   b966a:	b148      	cbz	r0, b9680 <_Z16_fetch_usbserialv+0x38>
   b966c:	aa03      	add	r2, sp, #12
   b966e:	4807      	ldr	r0, [pc, #28]	; (b968c <_Z16_fetch_usbserialv+0x44>)
   b9670:	f7ff ffca 	bl	b9608 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9674:	4620      	mov	r0, r4
   b9676:	f7fa fd22 	bl	b40be <__cxa_guard_release>
   b967a:	4805      	ldr	r0, [pc, #20]	; (b9690 <_Z16_fetch_usbserialv+0x48>)
   b967c:	f000 fcb4 	bl	b9fe8 <atexit>
	return _usbserial;
}
   b9680:	4802      	ldr	r0, [pc, #8]	; (b968c <_Z16_fetch_usbserialv+0x44>)
   b9682:	b008      	add	sp, #32
   b9684:	bd10      	pop	{r4, pc}
   b9686:	bf00      	nop
   b9688:	2003e6f8 	.word	0x2003e6f8
   b968c:	2003e6fc 	.word	0x2003e6fc
   b9690:	000b9591 	.word	0x000b9591

000b9694 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b9694:	f7ff b91c 	b.w	b88d0 <HAL_Interrupts_Disable_All>

000b9698 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b9698:	f7ff b912 	b.w	b88c0 <HAL_Interrupts_Enable_All>

000b969c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b969e:	b287      	uxth	r7, r0
{
   b96a0:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b96a2:	4638      	mov	r0, r7
{
   b96a4:	460d      	mov	r5, r1
   b96a6:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b96a8:	f000 f9ba 	bl	b9a20 <pinAvailable>
   b96ac:	b160      	cbz	r0, b96c8 <tone+0x2c>
   b96ae:	2102      	movs	r1, #2
   b96b0:	4638      	mov	r0, r7
   b96b2:	f7ff f8dd 	bl	b8870 <HAL_Validate_Pin_Function>
   b96b6:	2802      	cmp	r0, #2
   b96b8:	d106      	bne.n	b96c8 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b96ba:	4632      	mov	r2, r6
   b96bc:	4629      	mov	r1, r5
   b96be:	4620      	mov	r0, r4
    }
}
   b96c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b96c4:	f7ff ba34 	b.w	b8b30 <HAL_Tone_Start>
}
   b96c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96ca <noTone>:

void noTone(uint8_t pin)
{
   b96ca:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b96cc:	b285      	uxth	r5, r0
{
   b96ce:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b96d0:	4628      	mov	r0, r5
   b96d2:	f000 f9a5 	bl	b9a20 <pinAvailable>
   b96d6:	b150      	cbz	r0, b96ee <noTone+0x24>
   b96d8:	2102      	movs	r1, #2
   b96da:	4628      	mov	r0, r5
   b96dc:	f7ff f8c8 	bl	b8870 <HAL_Validate_Pin_Function>
   b96e0:	2802      	cmp	r0, #2
   b96e2:	d104      	bne.n	b96ee <noTone+0x24>
        HAL_Tone_Stop(pin);
   b96e4:	4620      	mov	r0, r4
    }
}
   b96e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   b96ea:	f7ff ba29 	b.w	b8b40 <HAL_Tone_Stop>
}
   b96ee:	bd38      	pop	{r3, r4, r5, pc}

000b96f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b96f0:	4770      	bx	lr

000b96f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b96f2:	7441      	strb	r1, [r0, #17]
}
   b96f4:	4770      	bx	lr

000b96f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b96f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b96f8:	7c00      	ldrb	r0, [r0, #16]
   b96fa:	f7ff f971 	bl	b89e0 <hal_usart_available_data_for_write>
}
   b96fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9702:	bd08      	pop	{r3, pc}

000b9704 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9704:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9706:	7c00      	ldrb	r0, [r0, #16]
   b9708:	f7ff f942 	bl	b8990 <hal_usart_available>
}
   b970c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9710:	bd08      	pop	{r3, pc}

000b9712 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9712:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9714:	7c00      	ldrb	r0, [r0, #16]
   b9716:	f7ff f94b 	bl	b89b0 <hal_usart_peek>
}
   b971a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b971e:	bd08      	pop	{r3, pc}

000b9720 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9720:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9722:	7c00      	ldrb	r0, [r0, #16]
   b9724:	f7ff f93c 	bl	b89a0 <hal_usart_read>
}
   b9728:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b972c:	bd08      	pop	{r3, pc}

000b972e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b972e:	7c00      	ldrb	r0, [r0, #16]
   b9730:	f7ff b946 	b.w	b89c0 <hal_usart_flush>

000b9734 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9734:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9736:	7c45      	ldrb	r5, [r0, #17]
{
   b9738:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b973a:	b12d      	cbz	r5, b9748 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b973c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b973e:	b003      	add	sp, #12
   b9740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9744:	f7ff b91c 	b.w	b8980 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9748:	7c00      	ldrb	r0, [r0, #16]
   b974a:	9101      	str	r1, [sp, #4]
   b974c:	f7ff f948 	bl	b89e0 <hal_usart_available_data_for_write>
   b9750:	2800      	cmp	r0, #0
   b9752:	9901      	ldr	r1, [sp, #4]
   b9754:	dcf2      	bgt.n	b973c <_ZN11USARTSerial5writeEh+0x8>
}
   b9756:	4628      	mov	r0, r5
   b9758:	b003      	add	sp, #12
   b975a:	bd30      	pop	{r4, r5, pc}

000b975c <_ZN11USARTSerialD0Ev>:
   b975c:	b510      	push	{r4, lr}
   b975e:	2114      	movs	r1, #20
   b9760:	4604      	mov	r4, r0
   b9762:	f7fa fc98 	bl	b4096 <_ZdlPvj>
   b9766:	4620      	mov	r0, r4
   b9768:	bd10      	pop	{r4, pc}
	...

000b976c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b976c:	b510      	push	{r4, lr}
   b976e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9772:	4604      	mov	r4, r0
   b9774:	4608      	mov	r0, r1
   b9776:	4611      	mov	r1, r2
   b9778:	2200      	movs	r2, #0
   b977a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b977e:	4b04      	ldr	r3, [pc, #16]	; (b9790 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9780:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9782:	2301      	movs	r3, #1
  _serial = serial;
   b9784:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9786:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9788:	f7ff f932 	bl	b89f0 <hal_usart_init_ex>
}
   b978c:	4620      	mov	r0, r4
   b978e:	bd10      	pop	{r4, pc}
   b9790:	000bbe60 	.word	0x000bbe60

000b9794 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9794:	4770      	bx	lr

000b9796 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9798:	4606      	mov	r6, r0
   b979a:	4615      	mov	r5, r2
   b979c:	460c      	mov	r4, r1
   b979e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b97a0:	42bc      	cmp	r4, r7
   b97a2:	d006      	beq.n	b97b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b97a4:	6833      	ldr	r3, [r6, #0]
   b97a6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b97aa:	689b      	ldr	r3, [r3, #8]
   b97ac:	4630      	mov	r0, r6
   b97ae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b97b0:	e7f6      	b.n	b97a0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b97b2:	4628      	mov	r0, r5
   b97b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b97b6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b97b6:	7c00      	ldrb	r0, [r0, #16]
   b97b8:	2200      	movs	r2, #0
   b97ba:	f7ff b941 	b.w	b8a40 <hal_i2c_write>

000b97be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b97be:	7c00      	ldrb	r0, [r0, #16]
   b97c0:	2100      	movs	r1, #0
   b97c2:	f7ff b945 	b.w	b8a50 <hal_i2c_available>

000b97c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b97c6:	7c00      	ldrb	r0, [r0, #16]
   b97c8:	2100      	movs	r1, #0
   b97ca:	f7ff b949 	b.w	b8a60 <hal_i2c_read>

000b97ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b97ce:	7c00      	ldrb	r0, [r0, #16]
   b97d0:	2100      	movs	r1, #0
   b97d2:	f7ff b94d 	b.w	b8a70 <hal_i2c_peek>

000b97d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b97d6:	7c00      	ldrb	r0, [r0, #16]
   b97d8:	2100      	movs	r1, #0
   b97da:	f7ff b951 	b.w	b8a80 <hal_i2c_flush>

000b97de <_ZN7TwoWireD0Ev>:
   b97de:	b510      	push	{r4, lr}
   b97e0:	2114      	movs	r1, #20
   b97e2:	4604      	mov	r4, r0
   b97e4:	f7fa fc57 	bl	b4096 <_ZdlPvj>
   b97e8:	4620      	mov	r0, r4
   b97ea:	bd10      	pop	{r4, pc}

000b97ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b97ec:	b510      	push	{r4, lr}
   b97ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b97f2:	4604      	mov	r4, r0
   b97f4:	4608      	mov	r0, r1
   b97f6:	2100      	movs	r1, #0
   b97f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b97fc:	4b03      	ldr	r3, [pc, #12]	; (b980c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b97fe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9800:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9802:	4611      	mov	r1, r2
   b9804:	f7ff f94c 	bl	b8aa0 <hal_i2c_init>
}
   b9808:	4620      	mov	r0, r4
   b980a:	bd10      	pop	{r4, pc}
   b980c:	000bbe90 	.word	0x000bbe90

000b9810 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b9810:	7c00      	ldrb	r0, [r0, #16]
   b9812:	2200      	movs	r2, #0
   b9814:	f7ff b8f4 	b.w	b8a00 <hal_i2c_set_speed>

000b9818 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9818:	2300      	movs	r3, #0
   b981a:	7c00      	ldrb	r0, [r0, #16]
   b981c:	461a      	mov	r2, r3
   b981e:	4619      	mov	r1, r3
   b9820:	f7ff b8f6 	b.w	b8a10 <hal_i2c_begin>

000b9824 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9824:	7c00      	ldrb	r0, [r0, #16]
   b9826:	2200      	movs	r2, #0
   b9828:	f7ff b8fa 	b.w	b8a20 <hal_i2c_begin_transmission>

000b982c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b982c:	b2c9      	uxtb	r1, r1
   b982e:	f7ff bff9 	b.w	b9824 <_ZN7TwoWire17beginTransmissionEh>

000b9832 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9832:	7c00      	ldrb	r0, [r0, #16]
   b9834:	2200      	movs	r2, #0
   b9836:	f7ff b8fb 	b.w	b8a30 <hal_i2c_end_transmission>

000b983a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b983a:	2101      	movs	r1, #1
   b983c:	f7ff bff9 	b.w	b9832 <_ZN7TwoWire15endTransmissionEh>

000b9840 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9840:	2200      	movs	r2, #0
   b9842:	6840      	ldr	r0, [r0, #4]
   b9844:	4611      	mov	r1, r2
   b9846:	f7ff b9ff 	b.w	b8c48 <network_ready>

000b984a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b984a:	2200      	movs	r2, #0
   b984c:	6840      	ldr	r0, [r0, #4]
   b984e:	4611      	mov	r1, r2
   b9850:	f7ff ba1a 	b.w	b8c88 <network_listening>

000b9854 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9854:	2200      	movs	r2, #0
   b9856:	6840      	ldr	r0, [r0, #4]
   b9858:	4611      	mov	r1, r2
   b985a:	f7ff ba25 	b.w	b8ca8 <network_get_listen_timeout>

000b985e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b985e:	6840      	ldr	r0, [r0, #4]
   b9860:	2200      	movs	r2, #0
   b9862:	f7ff ba19 	b.w	b8c98 <network_set_listen_timeout>

000b9866 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9866:	6840      	ldr	r0, [r0, #4]
   b9868:	2200      	movs	r2, #0
   b986a:	f081 0101 	eor.w	r1, r1, #1
   b986e:	f7ff ba03 	b.w	b8c78 <network_listen>

000b9872 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9872:	2300      	movs	r3, #0
   b9874:	6840      	ldr	r0, [r0, #4]
   b9876:	461a      	mov	r2, r3
   b9878:	4619      	mov	r1, r3
   b987a:	f7ff b9f5 	b.w	b8c68 <network_off>

000b987e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b987e:	2300      	movs	r3, #0
   b9880:	6840      	ldr	r0, [r0, #4]
   b9882:	461a      	mov	r2, r3
   b9884:	4619      	mov	r1, r3
   b9886:	f7ff b9e7 	b.w	b8c58 <network_on>

000b988a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b988a:	2200      	movs	r2, #0
   b988c:	6840      	ldr	r0, [r0, #4]
   b988e:	4611      	mov	r1, r2
   b9890:	f7ff b9ca 	b.w	b8c28 <network_connecting>

000b9894 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9894:	6840      	ldr	r0, [r0, #4]
   b9896:	2200      	movs	r2, #0
   b9898:	2102      	movs	r1, #2
   b989a:	f7ff b9cd 	b.w	b8c38 <network_disconnect>

000b989e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b989e:	2300      	movs	r3, #0
   b98a0:	6840      	ldr	r0, [r0, #4]
   b98a2:	461a      	mov	r2, r3
   b98a4:	f7ff b9b8 	b.w	b8c18 <network_connect>

000b98a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b98a8:	4b02      	ldr	r3, [pc, #8]	; (b98b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b98aa:	2204      	movs	r2, #4
   b98ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b98ae:	4a02      	ldr	r2, [pc, #8]	; (b98b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b98b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b98b2:	4770      	bx	lr
   b98b4:	2003e710 	.word	0x2003e710
   b98b8:	000bbeb8 	.word	0x000bbeb8

000b98bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b98bc:	2300      	movs	r3, #0
   b98be:	6840      	ldr	r0, [r0, #4]
   b98c0:	461a      	mov	r2, r3
   b98c2:	f7ff b9a9 	b.w	b8c18 <network_connect>

000b98c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b98c6:	6840      	ldr	r0, [r0, #4]
   b98c8:	2200      	movs	r2, #0
   b98ca:	2102      	movs	r1, #2
   b98cc:	f7ff b9b4 	b.w	b8c38 <network_disconnect>

000b98d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b98d0:	2200      	movs	r2, #0
   b98d2:	6840      	ldr	r0, [r0, #4]
   b98d4:	4611      	mov	r1, r2
   b98d6:	f7ff b9a7 	b.w	b8c28 <network_connecting>

000b98da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b98da:	2200      	movs	r2, #0
   b98dc:	6840      	ldr	r0, [r0, #4]
   b98de:	4611      	mov	r1, r2
   b98e0:	f7ff b9b2 	b.w	b8c48 <network_ready>

000b98e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b98e4:	2300      	movs	r3, #0
   b98e6:	6840      	ldr	r0, [r0, #4]
   b98e8:	461a      	mov	r2, r3
   b98ea:	4619      	mov	r1, r3
   b98ec:	f7ff b9b4 	b.w	b8c58 <network_on>

000b98f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b98f0:	2300      	movs	r3, #0
   b98f2:	6840      	ldr	r0, [r0, #4]
   b98f4:	461a      	mov	r2, r3
   b98f6:	4619      	mov	r1, r3
   b98f8:	f7ff b9b6 	b.w	b8c68 <network_off>

000b98fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b98fc:	6840      	ldr	r0, [r0, #4]
   b98fe:	2100      	movs	r1, #0
   b9900:	f7ff b9da 	b.w	b8cb8 <network_is_on>

000b9904 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9904:	6840      	ldr	r0, [r0, #4]
   b9906:	2100      	movs	r1, #0
   b9908:	f7ff b9de 	b.w	b8cc8 <network_is_off>

000b990c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b990c:	6840      	ldr	r0, [r0, #4]
   b990e:	2200      	movs	r2, #0
   b9910:	f081 0101 	eor.w	r1, r1, #1
   b9914:	f7ff b9b0 	b.w	b8c78 <network_listen>

000b9918 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9918:	6840      	ldr	r0, [r0, #4]
   b991a:	2200      	movs	r2, #0
   b991c:	f7ff b9bc 	b.w	b8c98 <network_set_listen_timeout>

000b9920 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9920:	2200      	movs	r2, #0
   b9922:	6840      	ldr	r0, [r0, #4]
   b9924:	4611      	mov	r1, r2
   b9926:	f7ff b9bf 	b.w	b8ca8 <network_get_listen_timeout>

000b992a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b992a:	2200      	movs	r2, #0
   b992c:	6840      	ldr	r0, [r0, #4]
   b992e:	4611      	mov	r1, r2
   b9930:	f7ff b9aa 	b.w	b8c88 <network_listening>

000b9934 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9938:	b095      	sub	sp, #84	; 0x54
   b993a:	4614      	mov	r4, r2
   b993c:	460d      	mov	r5, r1
   b993e:	4607      	mov	r7, r0
    IPAddress addr;
   b9940:	f7ff fde6 	bl	b9510 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9944:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9946:	221c      	movs	r2, #28
   b9948:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b994a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b994c:	f000 fb68 	bl	ba020 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9950:	2340      	movs	r3, #64	; 0x40
   b9952:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9954:	4620      	mov	r0, r4
   b9956:	466b      	mov	r3, sp
   b9958:	aa0c      	add	r2, sp, #48	; 0x30
   b995a:	2100      	movs	r1, #0
   b995c:	f7fe ff80 	bl	b8860 <netdb_getaddrinfo>
    if (!r) {
   b9960:	4604      	mov	r4, r0
   b9962:	2800      	cmp	r0, #0
   b9964:	d14b      	bne.n	b99fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9966:	4602      	mov	r2, r0
   b9968:	2101      	movs	r1, #1
   b996a:	6868      	ldr	r0, [r5, #4]
   b996c:	f7ff f96c 	bl	b8c48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9970:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9972:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9974:	4622      	mov	r2, r4
   b9976:	6868      	ldr	r0, [r5, #4]
   b9978:	f7ff f966 	bl	b8c48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b997c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b997e:	4681      	mov	r9, r0
        bool ok = false;
   b9980:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9982:	2e00      	cmp	r6, #0
   b9984:	d03b      	beq.n	b99fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9986:	2900      	cmp	r1, #0
   b9988:	d139      	bne.n	b99fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b998a:	6873      	ldr	r3, [r6, #4]
   b998c:	2b02      	cmp	r3, #2
   b998e:	d003      	beq.n	b9998 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9990:	2b0a      	cmp	r3, #10
   b9992:	d011      	beq.n	b99b8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9994:	69f6      	ldr	r6, [r6, #28]
   b9996:	e7f4      	b.n	b9982 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9998:	f1b8 0f00 	cmp.w	r8, #0
   b999c:	d0fa      	beq.n	b9994 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b999e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b99a0:	a806      	add	r0, sp, #24
   b99a2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b99a4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b99a6:	f7ff fde1 	bl	b956c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b99aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b99ac:	1d3c      	adds	r4, r7, #4
   b99ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b99b0:	682b      	ldr	r3, [r5, #0]
   b99b2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b99b4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b99b6:	e7ed      	b.n	b9994 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b99b8:	f1b9 0f00 	cmp.w	r9, #0
   b99bc:	d0ea      	beq.n	b9994 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b99be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b99c0:	2210      	movs	r2, #16
   b99c2:	a801      	add	r0, sp, #4
   b99c4:	f000 fb2c 	bl	ba020 <memset>
                    a.v = 6;
   b99c8:	2306      	movs	r3, #6
   b99ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b99ce:	ad01      	add	r5, sp, #4
   b99d0:	f104 0308 	add.w	r3, r4, #8
   b99d4:	3418      	adds	r4, #24
   b99d6:	6818      	ldr	r0, [r3, #0]
   b99d8:	6859      	ldr	r1, [r3, #4]
   b99da:	462a      	mov	r2, r5
   b99dc:	c203      	stmia	r2!, {r0, r1}
   b99de:	3308      	adds	r3, #8
   b99e0:	42a3      	cmp	r3, r4
   b99e2:	4615      	mov	r5, r2
   b99e4:	d1f7      	bne.n	b99d6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b99e6:	a901      	add	r1, sp, #4
   b99e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b99ea:	ad07      	add	r5, sp, #28
   b99ec:	f7ff fd9e 	bl	b952c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b99f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b99f2:	1d3c      	adds	r4, r7, #4
   b99f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b99f6:	682b      	ldr	r3, [r5, #0]
   b99f8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b99fa:	4649      	mov	r1, r9
   b99fc:	e7ca      	b.n	b9994 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b99fe:	9800      	ldr	r0, [sp, #0]
   b9a00:	f7fe ff26 	bl	b8850 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9a04:	4638      	mov	r0, r7
   b9a06:	b015      	add	sp, #84	; 0x54
   b9a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9a0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9a0c:	4b02      	ldr	r3, [pc, #8]	; (b9a18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9a0e:	4a03      	ldr	r2, [pc, #12]	; (b9a1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9a10:	601a      	str	r2, [r3, #0]
   b9a12:	2200      	movs	r2, #0
   b9a14:	605a      	str	r2, [r3, #4]

} // spark
   b9a16:	4770      	bx	lr
   b9a18:	2003e718 	.word	0x2003e718
   b9a1c:	000bbef4 	.word	0x000bbef4

000b9a20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9a20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9a22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9a24:	d902      	bls.n	b9a2c <pinAvailable+0xc>
    return false;
   b9a26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9a28:	b002      	add	sp, #8
   b9a2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9a2c:	f1a0 030b 	sub.w	r3, r0, #11
   b9a30:	2b02      	cmp	r3, #2
   b9a32:	d81a      	bhi.n	b9a6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9a34:	4c17      	ldr	r4, [pc, #92]	; (b9a94 <pinAvailable+0x74>)
   b9a36:	7821      	ldrb	r1, [r4, #0]
   b9a38:	f3bf 8f5b 	dmb	ish
   b9a3c:	f011 0101 	ands.w	r1, r1, #1
   b9a40:	d10b      	bne.n	b9a5a <pinAvailable+0x3a>
   b9a42:	4620      	mov	r0, r4
   b9a44:	9101      	str	r1, [sp, #4]
   b9a46:	f7fa fb35 	bl	b40b4 <__cxa_guard_acquire>
   b9a4a:	9901      	ldr	r1, [sp, #4]
   b9a4c:	b128      	cbz	r0, b9a5a <pinAvailable+0x3a>
   b9a4e:	4812      	ldr	r0, [pc, #72]	; (b9a98 <pinAvailable+0x78>)
   b9a50:	f7ff f9d6 	bl	b8e00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9a54:	4620      	mov	r0, r4
   b9a56:	f7fa fb32 	bl	b40be <__cxa_guard_release>
   b9a5a:	4b0f      	ldr	r3, [pc, #60]	; (b9a98 <pinAvailable+0x78>)
   b9a5c:	7818      	ldrb	r0, [r3, #0]
   b9a5e:	f7ff f83f 	bl	b8ae0 <hal_spi_is_enabled>
   b9a62:	2800      	cmp	r0, #0
   b9a64:	d1df      	bne.n	b9a26 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9a66:	2001      	movs	r0, #1
   b9a68:	e7de      	b.n	b9a28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9a6a:	2801      	cmp	r0, #1
   b9a6c:	d809      	bhi.n	b9a82 <pinAvailable+0x62>
   b9a6e:	f000 f8d9 	bl	b9c24 <_Z19__fetch_global_Wirev>
   b9a72:	2100      	movs	r1, #0
   b9a74:	7c00      	ldrb	r0, [r0, #16]
   b9a76:	f7ff f80b 	bl	b8a90 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9a7a:	f080 0001 	eor.w	r0, r0, #1
   b9a7e:	b2c0      	uxtb	r0, r0
   b9a80:	e7d2      	b.n	b9a28 <pinAvailable+0x8>
   b9a82:	3809      	subs	r0, #9
   b9a84:	2801      	cmp	r0, #1
   b9a86:	d8ee      	bhi.n	b9a66 <pinAvailable+0x46>
   b9a88:	f000 f87a 	bl	b9b80 <_Z22__fetch_global_Serial1v>
   b9a8c:	7c00      	ldrb	r0, [r0, #16]
   b9a8e:	f7fe ff9f 	bl	b89d0 <hal_usart_is_enabled>
   b9a92:	e7f2      	b.n	b9a7a <pinAvailable+0x5a>
   b9a94:	2003cf38 	.word	0x2003cf38
   b9a98:	2003cf3c 	.word	0x2003cf3c

000b9a9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9a9c:	2823      	cmp	r0, #35	; 0x23
{
   b9a9e:	b538      	push	{r3, r4, r5, lr}
   b9aa0:	4604      	mov	r4, r0
   b9aa2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9aa4:	d80a      	bhi.n	b9abc <pinMode+0x20>
   b9aa6:	29ff      	cmp	r1, #255	; 0xff
   b9aa8:	d008      	beq.n	b9abc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9aaa:	f7ff ffb9 	bl	b9a20 <pinAvailable>
   b9aae:	b128      	cbz	r0, b9abc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9ab0:	4629      	mov	r1, r5
   b9ab2:	4620      	mov	r0, r4
}
   b9ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9ab8:	f7fe bee2 	b.w	b8880 <HAL_Pin_Mode>
}
   b9abc:	bd38      	pop	{r3, r4, r5, pc}

000b9abe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9abe:	b538      	push	{r3, r4, r5, lr}
   b9ac0:	4604      	mov	r4, r0
   b9ac2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9ac4:	f7fe fee4 	bl	b8890 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9ac8:	28ff      	cmp	r0, #255	; 0xff
   b9aca:	d010      	beq.n	b9aee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9acc:	2806      	cmp	r0, #6
   b9ace:	d804      	bhi.n	b9ada <digitalWrite+0x1c>
   b9ad0:	234d      	movs	r3, #77	; 0x4d
   b9ad2:	fa23 f000 	lsr.w	r0, r3, r0
   b9ad6:	07c3      	lsls	r3, r0, #31
   b9ad8:	d409      	bmi.n	b9aee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9ada:	4620      	mov	r0, r4
   b9adc:	f7ff ffa0 	bl	b9a20 <pinAvailable>
   b9ae0:	b128      	cbz	r0, b9aee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9ae2:	4629      	mov	r1, r5
   b9ae4:	4620      	mov	r0, r4
}
   b9ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9aea:	f7fe bed9 	b.w	b88a0 <HAL_GPIO_Write>
}
   b9aee:	bd38      	pop	{r3, r4, r5, pc}

000b9af0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9af0:	b510      	push	{r4, lr}
   b9af2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9af4:	f7fe fecc 	bl	b8890 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9af8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9afa:	b2db      	uxtb	r3, r3
   b9afc:	2b01      	cmp	r3, #1
   b9afe:	d908      	bls.n	b9b12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9b00:	4620      	mov	r0, r4
   b9b02:	f7ff ff8d 	bl	b9a20 <pinAvailable>
   b9b06:	b120      	cbz	r0, b9b12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9b08:	4620      	mov	r0, r4
}
   b9b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9b0e:	f7fe becf 	b.w	b88b0 <HAL_GPIO_Read>
}
   b9b12:	2000      	movs	r0, #0
   b9b14:	bd10      	pop	{r4, pc}

000b9b16 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9b16:	280d      	cmp	r0, #13
{
   b9b18:	b510      	push	{r4, lr}
   b9b1a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9b1c:	bf9c      	itt	ls
   b9b1e:	340e      	addls	r4, #14
   b9b20:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b9b22:	4620      	mov	r0, r4
   b9b24:	f7ff ff7c 	bl	b9a20 <pinAvailable>
   b9b28:	b150      	cbz	r0, b9b40 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b9b2a:	2103      	movs	r1, #3
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	f7fe fe9f 	bl	b8870 <HAL_Validate_Pin_Function>
   b9b32:	2803      	cmp	r0, #3
   b9b34:	d104      	bne.n	b9b40 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b9b36:	4620      	mov	r0, r4
}
   b9b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9b3c:	f7fe bed0 	b.w	b88e0 <hal_adc_read>
}
   b9b40:	2000      	movs	r0, #0
   b9b42:	bd10      	pop	{r4, pc}

000b9b44 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b9b44:	f7fe bed4 	b.w	b88f0 <HAL_Pulse_In>

000b9b48 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9b48:	4770      	bx	lr
	...

000b9b4c <_Z20acquireSerial1Bufferv>:
{
   b9b4c:	b538      	push	{r3, r4, r5, lr}
   b9b4e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9b50:	2514      	movs	r5, #20
   b9b52:	462a      	mov	r2, r5
   b9b54:	2100      	movs	r1, #0
   b9b56:	f000 fa63 	bl	ba020 <memset>
   b9b5a:	8025      	strh	r5, [r4, #0]
   b9b5c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9b5e:	4907      	ldr	r1, [pc, #28]	; (b9b7c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9b60:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9b62:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9b64:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9b66:	f000 f881 	bl	b9c6c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9b6a:	4904      	ldr	r1, [pc, #16]	; (b9b7c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9b6c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9b6e:	4628      	mov	r0, r5
   b9b70:	f000 f87c 	bl	b9c6c <_ZnajRKSt9nothrow_t>
    };
   b9b74:	60e0      	str	r0, [r4, #12]
}
   b9b76:	4620      	mov	r0, r4
   b9b78:	bd38      	pop	{r3, r4, r5, pc}
   b9b7a:	bf00      	nop
   b9b7c:	000bbf28 	.word	0x000bbf28

000b9b80 <_Z22__fetch_global_Serial1v>:
{
   b9b80:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9b82:	4d0e      	ldr	r5, [pc, #56]	; (b9bbc <_Z22__fetch_global_Serial1v+0x3c>)
   b9b84:	7829      	ldrb	r1, [r5, #0]
   b9b86:	f3bf 8f5b 	dmb	ish
   b9b8a:	f011 0401 	ands.w	r4, r1, #1
{
   b9b8e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9b90:	d111      	bne.n	b9bb6 <_Z22__fetch_global_Serial1v+0x36>
   b9b92:	4628      	mov	r0, r5
   b9b94:	f7fa fa8e 	bl	b40b4 <__cxa_guard_acquire>
   b9b98:	b168      	cbz	r0, b9bb6 <_Z22__fetch_global_Serial1v+0x36>
   b9b9a:	a801      	add	r0, sp, #4
   b9b9c:	f7ff ffd6 	bl	b9b4c <_Z20acquireSerial1Bufferv>
   b9ba0:	aa01      	add	r2, sp, #4
   b9ba2:	4621      	mov	r1, r4
   b9ba4:	4806      	ldr	r0, [pc, #24]	; (b9bc0 <_Z22__fetch_global_Serial1v+0x40>)
   b9ba6:	f7ff fde1 	bl	b976c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9baa:	4628      	mov	r0, r5
   b9bac:	f7fa fa87 	bl	b40be <__cxa_guard_release>
   b9bb0:	4804      	ldr	r0, [pc, #16]	; (b9bc4 <_Z22__fetch_global_Serial1v+0x44>)
   b9bb2:	f000 fa19 	bl	b9fe8 <atexit>
    return serial1;
}
   b9bb6:	4802      	ldr	r0, [pc, #8]	; (b9bc0 <_Z22__fetch_global_Serial1v+0x40>)
   b9bb8:	b007      	add	sp, #28
   b9bba:	bd30      	pop	{r4, r5, pc}
   b9bbc:	2003e720 	.word	0x2003e720
   b9bc0:	2003e724 	.word	0x2003e724
   b9bc4:	000b9b49 	.word	0x000b9b49

000b9bc8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b9bc8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b9bca:	4c08      	ldr	r4, [pc, #32]	; (b9bec <_Z21__fetch_global_EEPROMv+0x24>)
   b9bcc:	7823      	ldrb	r3, [r4, #0]
   b9bce:	f3bf 8f5b 	dmb	ish
   b9bd2:	07db      	lsls	r3, r3, #31
   b9bd4:	d408      	bmi.n	b9be8 <_Z21__fetch_global_EEPROMv+0x20>
   b9bd6:	4620      	mov	r0, r4
   b9bd8:	f7fa fa6c 	bl	b40b4 <__cxa_guard_acquire>
   b9bdc:	b120      	cbz	r0, b9be8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9bde:	f7fe fea7 	bl	b8930 <HAL_EEPROM_Init>
   b9be2:	4620      	mov	r0, r4
   b9be4:	f7fa fa6b 	bl	b40be <__cxa_guard_release>
	return eeprom;
}
   b9be8:	4801      	ldr	r0, [pc, #4]	; (b9bf0 <_Z21__fetch_global_EEPROMv+0x28>)
   b9bea:	bd10      	pop	{r4, pc}
   b9bec:	2003e73c 	.word	0x2003e73c
   b9bf0:	2003e740 	.word	0x2003e740

000b9bf4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9bf4:	4770      	bx	lr
	...

000b9bf8 <_Z17acquireWireBufferv>:
{
   b9bf8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9bfa:	2520      	movs	r5, #32
   b9bfc:	2314      	movs	r3, #20
{
   b9bfe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9c00:	6003      	str	r3, [r0, #0]
   b9c02:	6085      	str	r5, [r0, #8]
   b9c04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c06:	4906      	ldr	r1, [pc, #24]	; (b9c20 <_Z17acquireWireBufferv+0x28>)
   b9c08:	4628      	mov	r0, r5
   b9c0a:	f000 f82f 	bl	b9c6c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c0e:	4904      	ldr	r1, [pc, #16]	; (b9c20 <_Z17acquireWireBufferv+0x28>)
	};
   b9c10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c12:	4628      	mov	r0, r5
   b9c14:	f000 f82a 	bl	b9c6c <_ZnajRKSt9nothrow_t>
	};
   b9c18:	60e0      	str	r0, [r4, #12]
}
   b9c1a:	4620      	mov	r0, r4
   b9c1c:	bd38      	pop	{r3, r4, r5, pc}
   b9c1e:	bf00      	nop
   b9c20:	000bbf28 	.word	0x000bbf28

000b9c24 <_Z19__fetch_global_Wirev>:
{
   b9c24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9c26:	4d0e      	ldr	r5, [pc, #56]	; (b9c60 <_Z19__fetch_global_Wirev+0x3c>)
   b9c28:	7829      	ldrb	r1, [r5, #0]
   b9c2a:	f3bf 8f5b 	dmb	ish
   b9c2e:	f011 0401 	ands.w	r4, r1, #1
{
   b9c32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9c34:	d111      	bne.n	b9c5a <_Z19__fetch_global_Wirev+0x36>
   b9c36:	4628      	mov	r0, r5
   b9c38:	f7fa fa3c 	bl	b40b4 <__cxa_guard_acquire>
   b9c3c:	b168      	cbz	r0, b9c5a <_Z19__fetch_global_Wirev+0x36>
   b9c3e:	a801      	add	r0, sp, #4
   b9c40:	f7ff ffda 	bl	b9bf8 <_Z17acquireWireBufferv>
   b9c44:	aa01      	add	r2, sp, #4
   b9c46:	4621      	mov	r1, r4
   b9c48:	4806      	ldr	r0, [pc, #24]	; (b9c64 <_Z19__fetch_global_Wirev+0x40>)
   b9c4a:	f7ff fdcf 	bl	b97ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9c4e:	4628      	mov	r0, r5
   b9c50:	f7fa fa35 	bl	b40be <__cxa_guard_release>
   b9c54:	4804      	ldr	r0, [pc, #16]	; (b9c68 <_Z19__fetch_global_Wirev+0x44>)
   b9c56:	f000 f9c7 	bl	b9fe8 <atexit>
	return wire;
}
   b9c5a:	4802      	ldr	r0, [pc, #8]	; (b9c64 <_Z19__fetch_global_Wirev+0x40>)
   b9c5c:	b007      	add	sp, #28
   b9c5e:	bd30      	pop	{r4, r5, pc}
   b9c60:	2003e744 	.word	0x2003e744
   b9c64:	2003e748 	.word	0x2003e748
   b9c68:	000b9bf5 	.word	0x000b9bf5

000b9c6c <_ZnajRKSt9nothrow_t>:
   b9c6c:	f7fa ba11 	b.w	b4092 <_Znaj>

000b9c70 <__aeabi_drsub>:
   b9c70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9c74:	e002      	b.n	b9c7c <__adddf3>
   b9c76:	bf00      	nop

000b9c78 <__aeabi_dsub>:
   b9c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9c7c <__adddf3>:
   b9c7c:	b530      	push	{r4, r5, lr}
   b9c7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9c82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9c86:	ea94 0f05 	teq	r4, r5
   b9c8a:	bf08      	it	eq
   b9c8c:	ea90 0f02 	teqeq	r0, r2
   b9c90:	bf1f      	itttt	ne
   b9c92:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9c96:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9c9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9c9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9ca2:	f000 80e2 	beq.w	b9e6a <__adddf3+0x1ee>
   b9ca6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9caa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9cae:	bfb8      	it	lt
   b9cb0:	426d      	neglt	r5, r5
   b9cb2:	dd0c      	ble.n	b9cce <__adddf3+0x52>
   b9cb4:	442c      	add	r4, r5
   b9cb6:	ea80 0202 	eor.w	r2, r0, r2
   b9cba:	ea81 0303 	eor.w	r3, r1, r3
   b9cbe:	ea82 0000 	eor.w	r0, r2, r0
   b9cc2:	ea83 0101 	eor.w	r1, r3, r1
   b9cc6:	ea80 0202 	eor.w	r2, r0, r2
   b9cca:	ea81 0303 	eor.w	r3, r1, r3
   b9cce:	2d36      	cmp	r5, #54	; 0x36
   b9cd0:	bf88      	it	hi
   b9cd2:	bd30      	pophi	{r4, r5, pc}
   b9cd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9cdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9ce0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9ce4:	d002      	beq.n	b9cec <__adddf3+0x70>
   b9ce6:	4240      	negs	r0, r0
   b9ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9cec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9cf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9cf8:	d002      	beq.n	b9d00 <__adddf3+0x84>
   b9cfa:	4252      	negs	r2, r2
   b9cfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9d00:	ea94 0f05 	teq	r4, r5
   b9d04:	f000 80a7 	beq.w	b9e56 <__adddf3+0x1da>
   b9d08:	f1a4 0401 	sub.w	r4, r4, #1
   b9d0c:	f1d5 0e20 	rsbs	lr, r5, #32
   b9d10:	db0d      	blt.n	b9d2e <__adddf3+0xb2>
   b9d12:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9d16:	fa22 f205 	lsr.w	r2, r2, r5
   b9d1a:	1880      	adds	r0, r0, r2
   b9d1c:	f141 0100 	adc.w	r1, r1, #0
   b9d20:	fa03 f20e 	lsl.w	r2, r3, lr
   b9d24:	1880      	adds	r0, r0, r2
   b9d26:	fa43 f305 	asr.w	r3, r3, r5
   b9d2a:	4159      	adcs	r1, r3
   b9d2c:	e00e      	b.n	b9d4c <__adddf3+0xd0>
   b9d2e:	f1a5 0520 	sub.w	r5, r5, #32
   b9d32:	f10e 0e20 	add.w	lr, lr, #32
   b9d36:	2a01      	cmp	r2, #1
   b9d38:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9d3c:	bf28      	it	cs
   b9d3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9d42:	fa43 f305 	asr.w	r3, r3, r5
   b9d46:	18c0      	adds	r0, r0, r3
   b9d48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9d50:	d507      	bpl.n	b9d62 <__adddf3+0xe6>
   b9d52:	f04f 0e00 	mov.w	lr, #0
   b9d56:	f1dc 0c00 	rsbs	ip, ip, #0
   b9d5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9d5e:	eb6e 0101 	sbc.w	r1, lr, r1
   b9d62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9d66:	d31b      	bcc.n	b9da0 <__adddf3+0x124>
   b9d68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9d6c:	d30c      	bcc.n	b9d88 <__adddf3+0x10c>
   b9d6e:	0849      	lsrs	r1, r1, #1
   b9d70:	ea5f 0030 	movs.w	r0, r0, rrx
   b9d74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9d78:	f104 0401 	add.w	r4, r4, #1
   b9d7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9d80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9d84:	f080 809a 	bcs.w	b9ebc <__adddf3+0x240>
   b9d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9d8c:	bf08      	it	eq
   b9d8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9d92:	f150 0000 	adcs.w	r0, r0, #0
   b9d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9d9a:	ea41 0105 	orr.w	r1, r1, r5
   b9d9e:	bd30      	pop	{r4, r5, pc}
   b9da0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9da4:	4140      	adcs	r0, r0
   b9da6:	eb41 0101 	adc.w	r1, r1, r1
   b9daa:	3c01      	subs	r4, #1
   b9dac:	bf28      	it	cs
   b9dae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9db2:	d2e9      	bcs.n	b9d88 <__adddf3+0x10c>
   b9db4:	f091 0f00 	teq	r1, #0
   b9db8:	bf04      	itt	eq
   b9dba:	4601      	moveq	r1, r0
   b9dbc:	2000      	moveq	r0, #0
   b9dbe:	fab1 f381 	clz	r3, r1
   b9dc2:	bf08      	it	eq
   b9dc4:	3320      	addeq	r3, #32
   b9dc6:	f1a3 030b 	sub.w	r3, r3, #11
   b9dca:	f1b3 0220 	subs.w	r2, r3, #32
   b9dce:	da0c      	bge.n	b9dea <__adddf3+0x16e>
   b9dd0:	320c      	adds	r2, #12
   b9dd2:	dd08      	ble.n	b9de6 <__adddf3+0x16a>
   b9dd4:	f102 0c14 	add.w	ip, r2, #20
   b9dd8:	f1c2 020c 	rsb	r2, r2, #12
   b9ddc:	fa01 f00c 	lsl.w	r0, r1, ip
   b9de0:	fa21 f102 	lsr.w	r1, r1, r2
   b9de4:	e00c      	b.n	b9e00 <__adddf3+0x184>
   b9de6:	f102 0214 	add.w	r2, r2, #20
   b9dea:	bfd8      	it	le
   b9dec:	f1c2 0c20 	rsble	ip, r2, #32
   b9df0:	fa01 f102 	lsl.w	r1, r1, r2
   b9df4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9df8:	bfdc      	itt	le
   b9dfa:	ea41 010c 	orrle.w	r1, r1, ip
   b9dfe:	4090      	lslle	r0, r2
   b9e00:	1ae4      	subs	r4, r4, r3
   b9e02:	bfa2      	ittt	ge
   b9e04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9e08:	4329      	orrge	r1, r5
   b9e0a:	bd30      	popge	{r4, r5, pc}
   b9e0c:	ea6f 0404 	mvn.w	r4, r4
   b9e10:	3c1f      	subs	r4, #31
   b9e12:	da1c      	bge.n	b9e4e <__adddf3+0x1d2>
   b9e14:	340c      	adds	r4, #12
   b9e16:	dc0e      	bgt.n	b9e36 <__adddf3+0x1ba>
   b9e18:	f104 0414 	add.w	r4, r4, #20
   b9e1c:	f1c4 0220 	rsb	r2, r4, #32
   b9e20:	fa20 f004 	lsr.w	r0, r0, r4
   b9e24:	fa01 f302 	lsl.w	r3, r1, r2
   b9e28:	ea40 0003 	orr.w	r0, r0, r3
   b9e2c:	fa21 f304 	lsr.w	r3, r1, r4
   b9e30:	ea45 0103 	orr.w	r1, r5, r3
   b9e34:	bd30      	pop	{r4, r5, pc}
   b9e36:	f1c4 040c 	rsb	r4, r4, #12
   b9e3a:	f1c4 0220 	rsb	r2, r4, #32
   b9e3e:	fa20 f002 	lsr.w	r0, r0, r2
   b9e42:	fa01 f304 	lsl.w	r3, r1, r4
   b9e46:	ea40 0003 	orr.w	r0, r0, r3
   b9e4a:	4629      	mov	r1, r5
   b9e4c:	bd30      	pop	{r4, r5, pc}
   b9e4e:	fa21 f004 	lsr.w	r0, r1, r4
   b9e52:	4629      	mov	r1, r5
   b9e54:	bd30      	pop	{r4, r5, pc}
   b9e56:	f094 0f00 	teq	r4, #0
   b9e5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9e5e:	bf06      	itte	eq
   b9e60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9e64:	3401      	addeq	r4, #1
   b9e66:	3d01      	subne	r5, #1
   b9e68:	e74e      	b.n	b9d08 <__adddf3+0x8c>
   b9e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9e6e:	bf18      	it	ne
   b9e70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9e74:	d029      	beq.n	b9eca <__adddf3+0x24e>
   b9e76:	ea94 0f05 	teq	r4, r5
   b9e7a:	bf08      	it	eq
   b9e7c:	ea90 0f02 	teqeq	r0, r2
   b9e80:	d005      	beq.n	b9e8e <__adddf3+0x212>
   b9e82:	ea54 0c00 	orrs.w	ip, r4, r0
   b9e86:	bf04      	itt	eq
   b9e88:	4619      	moveq	r1, r3
   b9e8a:	4610      	moveq	r0, r2
   b9e8c:	bd30      	pop	{r4, r5, pc}
   b9e8e:	ea91 0f03 	teq	r1, r3
   b9e92:	bf1e      	ittt	ne
   b9e94:	2100      	movne	r1, #0
   b9e96:	2000      	movne	r0, #0
   b9e98:	bd30      	popne	{r4, r5, pc}
   b9e9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9e9e:	d105      	bne.n	b9eac <__adddf3+0x230>
   b9ea0:	0040      	lsls	r0, r0, #1
   b9ea2:	4149      	adcs	r1, r1
   b9ea4:	bf28      	it	cs
   b9ea6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9eaa:	bd30      	pop	{r4, r5, pc}
   b9eac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9eb0:	bf3c      	itt	cc
   b9eb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9eb6:	bd30      	popcc	{r4, r5, pc}
   b9eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9ebc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9ec0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9ec4:	f04f 0000 	mov.w	r0, #0
   b9ec8:	bd30      	pop	{r4, r5, pc}
   b9eca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9ece:	bf1a      	itte	ne
   b9ed0:	4619      	movne	r1, r3
   b9ed2:	4610      	movne	r0, r2
   b9ed4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9ed8:	bf1c      	itt	ne
   b9eda:	460b      	movne	r3, r1
   b9edc:	4602      	movne	r2, r0
   b9ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9ee2:	bf06      	itte	eq
   b9ee4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9ee8:	ea91 0f03 	teqeq	r1, r3
   b9eec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9ef0:	bd30      	pop	{r4, r5, pc}
   b9ef2:	bf00      	nop

000b9ef4 <__aeabi_ui2d>:
   b9ef4:	f090 0f00 	teq	r0, #0
   b9ef8:	bf04      	itt	eq
   b9efa:	2100      	moveq	r1, #0
   b9efc:	4770      	bxeq	lr
   b9efe:	b530      	push	{r4, r5, lr}
   b9f00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9f04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9f08:	f04f 0500 	mov.w	r5, #0
   b9f0c:	f04f 0100 	mov.w	r1, #0
   b9f10:	e750      	b.n	b9db4 <__adddf3+0x138>
   b9f12:	bf00      	nop

000b9f14 <__aeabi_i2d>:
   b9f14:	f090 0f00 	teq	r0, #0
   b9f18:	bf04      	itt	eq
   b9f1a:	2100      	moveq	r1, #0
   b9f1c:	4770      	bxeq	lr
   b9f1e:	b530      	push	{r4, r5, lr}
   b9f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9f24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9f28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9f2c:	bf48      	it	mi
   b9f2e:	4240      	negmi	r0, r0
   b9f30:	f04f 0100 	mov.w	r1, #0
   b9f34:	e73e      	b.n	b9db4 <__adddf3+0x138>
   b9f36:	bf00      	nop

000b9f38 <__aeabi_f2d>:
   b9f38:	0042      	lsls	r2, r0, #1
   b9f3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9f3e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9f42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9f46:	bf1f      	itttt	ne
   b9f48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9f50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9f54:	4770      	bxne	lr
   b9f56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9f5a:	bf08      	it	eq
   b9f5c:	4770      	bxeq	lr
   b9f5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9f62:	bf04      	itt	eq
   b9f64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9f68:	4770      	bxeq	lr
   b9f6a:	b530      	push	{r4, r5, lr}
   b9f6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9f78:	e71c      	b.n	b9db4 <__adddf3+0x138>
   b9f7a:	bf00      	nop

000b9f7c <__aeabi_ul2d>:
   b9f7c:	ea50 0201 	orrs.w	r2, r0, r1
   b9f80:	bf08      	it	eq
   b9f82:	4770      	bxeq	lr
   b9f84:	b530      	push	{r4, r5, lr}
   b9f86:	f04f 0500 	mov.w	r5, #0
   b9f8a:	e00a      	b.n	b9fa2 <__aeabi_l2d+0x16>

000b9f8c <__aeabi_l2d>:
   b9f8c:	ea50 0201 	orrs.w	r2, r0, r1
   b9f90:	bf08      	it	eq
   b9f92:	4770      	bxeq	lr
   b9f94:	b530      	push	{r4, r5, lr}
   b9f96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9f9a:	d502      	bpl.n	b9fa2 <__aeabi_l2d+0x16>
   b9f9c:	4240      	negs	r0, r0
   b9f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9fa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9fa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9faa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9fae:	f43f aed8 	beq.w	b9d62 <__adddf3+0xe6>
   b9fb2:	f04f 0203 	mov.w	r2, #3
   b9fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9fba:	bf18      	it	ne
   b9fbc:	3203      	addne	r2, #3
   b9fbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9fc2:	bf18      	it	ne
   b9fc4:	3203      	addne	r2, #3
   b9fc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9fca:	f1c2 0320 	rsb	r3, r2, #32
   b9fce:	fa00 fc03 	lsl.w	ip, r0, r3
   b9fd2:	fa20 f002 	lsr.w	r0, r0, r2
   b9fd6:	fa01 fe03 	lsl.w	lr, r1, r3
   b9fda:	ea40 000e 	orr.w	r0, r0, lr
   b9fde:	fa21 f102 	lsr.w	r1, r1, r2
   b9fe2:	4414      	add	r4, r2
   b9fe4:	e6bd      	b.n	b9d62 <__adddf3+0xe6>
   b9fe6:	bf00      	nop

000b9fe8 <atexit>:
   b9fe8:	2300      	movs	r3, #0
   b9fea:	4601      	mov	r1, r0
   b9fec:	461a      	mov	r2, r3
   b9fee:	4618      	mov	r0, r3
   b9ff0:	f000 b8c8 	b.w	ba184 <__register_exitproc>

000b9ff4 <calloc>:
   b9ff4:	4b02      	ldr	r3, [pc, #8]	; (ba000 <calloc+0xc>)
   b9ff6:	460a      	mov	r2, r1
   b9ff8:	4601      	mov	r1, r0
   b9ffa:	6818      	ldr	r0, [r3, #0]
   b9ffc:	f000 b818 	b.w	ba030 <_calloc_r>
   ba000:	2003ced0 	.word	0x2003ced0

000ba004 <memcpy>:
   ba004:	440a      	add	r2, r1
   ba006:	4291      	cmp	r1, r2
   ba008:	f100 33ff 	add.w	r3, r0, #4294967295
   ba00c:	d100      	bne.n	ba010 <memcpy+0xc>
   ba00e:	4770      	bx	lr
   ba010:	b510      	push	{r4, lr}
   ba012:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba016:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba01a:	4291      	cmp	r1, r2
   ba01c:	d1f9      	bne.n	ba012 <memcpy+0xe>
   ba01e:	bd10      	pop	{r4, pc}

000ba020 <memset>:
   ba020:	4402      	add	r2, r0
   ba022:	4603      	mov	r3, r0
   ba024:	4293      	cmp	r3, r2
   ba026:	d100      	bne.n	ba02a <memset+0xa>
   ba028:	4770      	bx	lr
   ba02a:	f803 1b01 	strb.w	r1, [r3], #1
   ba02e:	e7f9      	b.n	ba024 <memset+0x4>

000ba030 <_calloc_r>:
   ba030:	b513      	push	{r0, r1, r4, lr}
   ba032:	434a      	muls	r2, r1
   ba034:	4611      	mov	r1, r2
   ba036:	9201      	str	r2, [sp, #4]
   ba038:	f7fe fe86 	bl	b8d48 <_malloc_r>
   ba03c:	4604      	mov	r4, r0
   ba03e:	b118      	cbz	r0, ba048 <_calloc_r+0x18>
   ba040:	9a01      	ldr	r2, [sp, #4]
   ba042:	2100      	movs	r1, #0
   ba044:	f7ff ffec 	bl	ba020 <memset>
   ba048:	4620      	mov	r0, r4
   ba04a:	b002      	add	sp, #8
   ba04c:	bd10      	pop	{r4, pc}
	...

000ba050 <srand>:
   ba050:	b538      	push	{r3, r4, r5, lr}
   ba052:	4b10      	ldr	r3, [pc, #64]	; (ba094 <srand+0x44>)
   ba054:	681d      	ldr	r5, [r3, #0]
   ba056:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba058:	4604      	mov	r4, r0
   ba05a:	b9b3      	cbnz	r3, ba08a <srand+0x3a>
   ba05c:	2018      	movs	r0, #24
   ba05e:	f7fe fe4b 	bl	b8cf8 <malloc>
   ba062:	4602      	mov	r2, r0
   ba064:	63a8      	str	r0, [r5, #56]	; 0x38
   ba066:	b920      	cbnz	r0, ba072 <srand+0x22>
   ba068:	4b0b      	ldr	r3, [pc, #44]	; (ba098 <srand+0x48>)
   ba06a:	480c      	ldr	r0, [pc, #48]	; (ba09c <srand+0x4c>)
   ba06c:	2142      	movs	r1, #66	; 0x42
   ba06e:	f7fe fe73 	bl	b8d58 <__assert_func>
   ba072:	490b      	ldr	r1, [pc, #44]	; (ba0a0 <srand+0x50>)
   ba074:	4b0b      	ldr	r3, [pc, #44]	; (ba0a4 <srand+0x54>)
   ba076:	e9c0 1300 	strd	r1, r3, [r0]
   ba07a:	4b0b      	ldr	r3, [pc, #44]	; (ba0a8 <srand+0x58>)
   ba07c:	6083      	str	r3, [r0, #8]
   ba07e:	230b      	movs	r3, #11
   ba080:	8183      	strh	r3, [r0, #12]
   ba082:	2100      	movs	r1, #0
   ba084:	2001      	movs	r0, #1
   ba086:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba08a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba08c:	2200      	movs	r2, #0
   ba08e:	611c      	str	r4, [r3, #16]
   ba090:	615a      	str	r2, [r3, #20]
   ba092:	bd38      	pop	{r3, r4, r5, pc}
   ba094:	2003ced0 	.word	0x2003ced0
   ba098:	000bbf29 	.word	0x000bbf29
   ba09c:	000bbf40 	.word	0x000bbf40
   ba0a0:	abcd330e 	.word	0xabcd330e
   ba0a4:	e66d1234 	.word	0xe66d1234
   ba0a8:	0005deec 	.word	0x0005deec

000ba0ac <strcpy>:
   ba0ac:	4603      	mov	r3, r0
   ba0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba0b2:	f803 2b01 	strb.w	r2, [r3], #1
   ba0b6:	2a00      	cmp	r2, #0
   ba0b8:	d1f9      	bne.n	ba0ae <strcpy+0x2>
   ba0ba:	4770      	bx	lr

000ba0bc <strlen>:
   ba0bc:	4603      	mov	r3, r0
   ba0be:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba0c2:	2a00      	cmp	r2, #0
   ba0c4:	d1fb      	bne.n	ba0be <strlen+0x2>
   ba0c6:	1a18      	subs	r0, r3, r0
   ba0c8:	3801      	subs	r0, #1
   ba0ca:	4770      	bx	lr

000ba0cc <strtok>:
   ba0cc:	4b16      	ldr	r3, [pc, #88]	; (ba128 <strtok+0x5c>)
   ba0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba0d0:	681e      	ldr	r6, [r3, #0]
   ba0d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   ba0d4:	4605      	mov	r5, r0
   ba0d6:	b9fc      	cbnz	r4, ba118 <strtok+0x4c>
   ba0d8:	2050      	movs	r0, #80	; 0x50
   ba0da:	9101      	str	r1, [sp, #4]
   ba0dc:	f7fe fe0c 	bl	b8cf8 <malloc>
   ba0e0:	9901      	ldr	r1, [sp, #4]
   ba0e2:	65b0      	str	r0, [r6, #88]	; 0x58
   ba0e4:	4602      	mov	r2, r0
   ba0e6:	b920      	cbnz	r0, ba0f2 <strtok+0x26>
   ba0e8:	4b10      	ldr	r3, [pc, #64]	; (ba12c <strtok+0x60>)
   ba0ea:	4811      	ldr	r0, [pc, #68]	; (ba130 <strtok+0x64>)
   ba0ec:	2157      	movs	r1, #87	; 0x57
   ba0ee:	f7fe fe33 	bl	b8d58 <__assert_func>
   ba0f2:	e9c0 4400 	strd	r4, r4, [r0]
   ba0f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   ba0fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   ba0fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   ba102:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   ba106:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   ba10a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   ba10e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   ba112:	6184      	str	r4, [r0, #24]
   ba114:	7704      	strb	r4, [r0, #28]
   ba116:	6244      	str	r4, [r0, #36]	; 0x24
   ba118:	6db2      	ldr	r2, [r6, #88]	; 0x58
   ba11a:	2301      	movs	r3, #1
   ba11c:	4628      	mov	r0, r5
   ba11e:	b002      	add	sp, #8
   ba120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba124:	f000 b806 	b.w	ba134 <__strtok_r>
   ba128:	2003ced0 	.word	0x2003ced0
   ba12c:	000bbf29 	.word	0x000bbf29
   ba130:	000bbfbd 	.word	0x000bbfbd

000ba134 <__strtok_r>:
   ba134:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba136:	b908      	cbnz	r0, ba13c <__strtok_r+0x8>
   ba138:	6810      	ldr	r0, [r2, #0]
   ba13a:	b188      	cbz	r0, ba160 <__strtok_r+0x2c>
   ba13c:	4604      	mov	r4, r0
   ba13e:	4620      	mov	r0, r4
   ba140:	f814 5b01 	ldrb.w	r5, [r4], #1
   ba144:	460f      	mov	r7, r1
   ba146:	f817 6b01 	ldrb.w	r6, [r7], #1
   ba14a:	b91e      	cbnz	r6, ba154 <__strtok_r+0x20>
   ba14c:	b965      	cbnz	r5, ba168 <__strtok_r+0x34>
   ba14e:	6015      	str	r5, [r2, #0]
   ba150:	4628      	mov	r0, r5
   ba152:	e005      	b.n	ba160 <__strtok_r+0x2c>
   ba154:	42b5      	cmp	r5, r6
   ba156:	d1f6      	bne.n	ba146 <__strtok_r+0x12>
   ba158:	2b00      	cmp	r3, #0
   ba15a:	d1f0      	bne.n	ba13e <__strtok_r+0xa>
   ba15c:	6014      	str	r4, [r2, #0]
   ba15e:	7003      	strb	r3, [r0, #0]
   ba160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba162:	461c      	mov	r4, r3
   ba164:	e00c      	b.n	ba180 <__strtok_r+0x4c>
   ba166:	b915      	cbnz	r5, ba16e <__strtok_r+0x3a>
   ba168:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba16c:	460e      	mov	r6, r1
   ba16e:	f816 5b01 	ldrb.w	r5, [r6], #1
   ba172:	42ab      	cmp	r3, r5
   ba174:	d1f7      	bne.n	ba166 <__strtok_r+0x32>
   ba176:	2b00      	cmp	r3, #0
   ba178:	d0f3      	beq.n	ba162 <__strtok_r+0x2e>
   ba17a:	2300      	movs	r3, #0
   ba17c:	f804 3c01 	strb.w	r3, [r4, #-1]
   ba180:	6014      	str	r4, [r2, #0]
   ba182:	e7ed      	b.n	ba160 <__strtok_r+0x2c>

000ba184 <__register_exitproc>:
   ba184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba188:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba244 <__register_exitproc+0xc0>
   ba18c:	4606      	mov	r6, r0
   ba18e:	f8d8 0000 	ldr.w	r0, [r8]
   ba192:	461f      	mov	r7, r3
   ba194:	460d      	mov	r5, r1
   ba196:	4691      	mov	r9, r2
   ba198:	f000 f856 	bl	ba248 <__retarget_lock_acquire_recursive>
   ba19c:	4b25      	ldr	r3, [pc, #148]	; (ba234 <__register_exitproc+0xb0>)
   ba19e:	681c      	ldr	r4, [r3, #0]
   ba1a0:	b934      	cbnz	r4, ba1b0 <__register_exitproc+0x2c>
   ba1a2:	4c25      	ldr	r4, [pc, #148]	; (ba238 <__register_exitproc+0xb4>)
   ba1a4:	601c      	str	r4, [r3, #0]
   ba1a6:	4b25      	ldr	r3, [pc, #148]	; (ba23c <__register_exitproc+0xb8>)
   ba1a8:	b113      	cbz	r3, ba1b0 <__register_exitproc+0x2c>
   ba1aa:	681b      	ldr	r3, [r3, #0]
   ba1ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba1b0:	6863      	ldr	r3, [r4, #4]
   ba1b2:	2b1f      	cmp	r3, #31
   ba1b4:	dd07      	ble.n	ba1c6 <__register_exitproc+0x42>
   ba1b6:	f8d8 0000 	ldr.w	r0, [r8]
   ba1ba:	f000 f847 	bl	ba24c <__retarget_lock_release_recursive>
   ba1be:	f04f 30ff 	mov.w	r0, #4294967295
   ba1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba1c6:	b34e      	cbz	r6, ba21c <__register_exitproc+0x98>
   ba1c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba1cc:	b988      	cbnz	r0, ba1f2 <__register_exitproc+0x6e>
   ba1ce:	4b1c      	ldr	r3, [pc, #112]	; (ba240 <__register_exitproc+0xbc>)
   ba1d0:	b923      	cbnz	r3, ba1dc <__register_exitproc+0x58>
   ba1d2:	f8d8 0000 	ldr.w	r0, [r8]
   ba1d6:	f000 f838 	bl	ba24a <__retarget_lock_release>
   ba1da:	e7f0      	b.n	ba1be <__register_exitproc+0x3a>
   ba1dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba1e0:	f7fe fd8a 	bl	b8cf8 <malloc>
   ba1e4:	2800      	cmp	r0, #0
   ba1e6:	d0f4      	beq.n	ba1d2 <__register_exitproc+0x4e>
   ba1e8:	2300      	movs	r3, #0
   ba1ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba1ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba1f2:	6863      	ldr	r3, [r4, #4]
   ba1f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba1f8:	2201      	movs	r2, #1
   ba1fa:	409a      	lsls	r2, r3
   ba1fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba200:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba204:	4313      	orrs	r3, r2
   ba206:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba20a:	2e02      	cmp	r6, #2
   ba20c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba210:	bf02      	ittt	eq
   ba212:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba216:	4313      	orreq	r3, r2
   ba218:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba21c:	6863      	ldr	r3, [r4, #4]
   ba21e:	f8d8 0000 	ldr.w	r0, [r8]
   ba222:	1c5a      	adds	r2, r3, #1
   ba224:	3302      	adds	r3, #2
   ba226:	6062      	str	r2, [r4, #4]
   ba228:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba22c:	f000 f80e 	bl	ba24c <__retarget_lock_release_recursive>
   ba230:	2000      	movs	r0, #0
   ba232:	e7c6      	b.n	ba1c2 <__register_exitproc+0x3e>
   ba234:	2003e7e8 	.word	0x2003e7e8
   ba238:	2003e75c 	.word	0x2003e75c
   ba23c:	00000000 	.word	0x00000000
   ba240:	000b8cf9 	.word	0x000b8cf9
   ba244:	2003cf34 	.word	0x2003cf34

000ba248 <__retarget_lock_acquire_recursive>:
   ba248:	4770      	bx	lr

000ba24a <__retarget_lock_release>:
   ba24a:	4770      	bx	lr

000ba24c <__retarget_lock_release_recursive>:
   ba24c:	4770      	bx	lr

000ba24e <link_code_end>:
	...

000ba250 <dynalib_user>:
   ba250:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   ba260:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba270:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   ba280:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   ba290:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   ba2a0:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   ba2b0:	6f69 006e 4f4d 4f44 4220 5341 4349 004f     ion.MODO BASICO.
   ba2c0:	4f4d 4f44 4120 4156 5a4e 4441 004f 4f4d     MODO AVANZADO.MO
   ba2d0:	4f44 4d20 5355 4349 0041 6942 6d74 7061     DO MUSICA.Bitmap
   ba2e0:	6e20 746f 6120 6176 6c69 6261 656c 002e      not available..
   ba2f0:	4320 4e4f 4345 4154 2052 2041 4548 4158      CONECTAR A HEXA
   ba300:	4f47 4f4e 2000 4f43 454e 5443 5241 4120     GONO. CONECTAR A
   ba310:	4320 4155 5244 4441 004f 4320 4e4f 4345      CUADRADO. CONEC
   ba320:	4154 2052 2041 5254 4149 474e 4c55 004f     TAR A TRIANGULO.
   ba330:	4320 4e4f 4345 4154 2052 2041 4f52 424d      CONECTAR A ROMB
   ba340:	004f 4320 4e4f 4345 4154 2052 2041 4553     O. CONECTAR A SE
   ba350:	494d 4943 4352 4c55 004f 4f43 454e 5443     MICIRCULO.CONECT
   ba360:	5241 4120 4320 5249 5543 4f4c 5900 2041     AR A CIRCULO.YA 
   ba370:	4f43 454e 5443 4441 004f 6154 6a72 7465     CONECTADO.Tarjet
   ba380:	2061 6e69 6176 696c 6164 7020 7261 2061     a invalida para 
   ba390:	7365 6574 6d20 646f 006f 6f42 7272 6461     este modo.Borrad
   ba3a0:	206f 6e69 6176 696c 6f64 7020 7261 2061     o invalido para 
   ba3b0:	7365 6574 6d20 646f 006f 724f 6564 206e     este modo.Orden 
   ba3c0:	6564 7420 7261 656a 6174 2073 6e69 6176     de tarjetas inva
   ba3d0:	696c 6f64 5000 6575 7472 206f 6f6e 6420     lido.Puerto no d
   ba3e0:	7369 6f70 696e 6c62 0065 6c50 7961 6e20     isponible.Play n
   ba3f0:	206f 6964 7073 6e6f 6269 656c 5300 6e65     o disponible.Sen
   ba400:	6f73 2072 6f6e 6420 7369 6f70 696e 6c62     sor no disponibl
   ba410:	2065 6528 206e 7375 296f 4100 7463 6175     e (en uso).Actua
   ba420:	6f64 2072 6f6e 6420 7369 6f70 696e 6c62     dor no disponibl
   ba430:	2065 6528 206e 7375 296f 4200 726f 6172     e (en uso).Borra
   ba440:	6f64 6420 2065 6c62 716f 6575 7220 6165     do de bloque rea
   ba450:	696c 617a 6f64 4e00 6461 2061 7571 2065     lizado.Nada que 
   ba460:	6f62 7272 7261 4200 726f 6172 6f64 6420     borrar.Borrado d
   ba470:	2065 6f6c 706f 7220 6165 696c 617a 6f64     e loop realizado
   ba480:	4e00 6461 2061 7571 2065 6f62 7272 7261     .Nada que borrar
   ba490:	002e 6f4e 6174 6920 766e a1c3 696c 6164     ..Nota inv..lida
   ba4a0:	5400 7069 206f 6e69 c376 6ca1 6469 006f     .Tipo inv..lido.
   ba4b0:	4552 4d00 0049 4146 5300 4c4f 4c00 0041     RE.MI.FA.SOL.LA.
   ba4c0:	4953 4400 274f 5f00 0043 4e5f 5f00 0042     SI.DO'._C._N._B.
   ba4d0:	6425 2d20 2520 0064 6946 616e 696c 617a     %d - %d.Finaliza
   ba4e0:	6520 206c 7562 6c63 2065 6e61 6574 2073      el bucle antes 
   ba4f0:	6564 7220 7065 6f72 7564 6963 0072 6e49     de reproducir.In
   ba500:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   ba510:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   ba520:	6520 206e 6c65 6220 6f6c 7571 0065 6f4d      en el bloque.Mo
   ba530:	6f64 4220 5341 4349 204f 6564 6574 7463     do BASICO detect
   ba540:	6461 006f 6e49 6369 6169 646e 206f 6f6d     ado.Iniciando mo
   ba550:	6f64 4220 5341 4349 2e4f 2e2e 4d00 646f     do BASICO....Mod
   ba560:	206f 5641 4e41 415a 4f44 6420 7465 6365     o AVANZADO detec
   ba570:	6174 6f64 4900 696e 6963 6e61 6f64 6d20     tado.Iniciando m
   ba580:	646f 206f 5641 4e41 415a 4f44 2e2e 002e     odo AVANZADO....
   ba590:	6f4d 6f64 4d20 5355 4349 2041 6564 6574     Modo MUSICA dete
   ba5a0:	7463 6461 006f 6e49 6369 6169 646e 206f     ctado.Iniciando 
   ba5b0:	6f6d 6f64 4d20 5355 4349 2e41 2e2e 4d00     modo MUSICA....M
   ba5c0:	4649 5241 5f45 6552 6461 2928 6620 6961     IFARE_Read() fai
   ba5d0:	656c 3a64 0020 4350 5f44 7541 6874 6e65     led: .PCD_Authen
   ba5e0:	6974 6163 6574 2928 6620 6961 656c 3a64     ticate() failed:
   ba5f0:	0020 6154 4967 666e 3a6f 2520 0073 6f43      .TagInfo: %s.Co
   ba600:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
   ba610:	4120 0a30 4300 6e6f 6365 6174 2072 6c61      A0..Conectar al
   ba620:	7020 6575 7472 206f 3241 000a 6f43 656e      puerto A2..Cone
   ba630:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
   ba640:	0a34 4300 6e6f 6365 6174 2072 6c61 7020     4..Conectar al p
   ba650:	6575 7472 206f 3244 000a 6f43 656e 7463     uerto D2..Conect
   ba660:	7261 6120 206c 7570 7265 6f74 4420 0a34     ar al puerto D4.
   ba670:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   ba680:	7472 206f 3644 000a 7245 6f72 3a72 4e20     rto D6..Error: N
   ba690:	206f 6168 2079 616d 2073 7570 7265 6f74     o hay mas puerto
   ba6a0:	2073 6964 7073 6e6f 6269 656c 2073 000a     s disponibles ..
   ba6b0:	4545 5250 4d4f 6520 706d 7974 5a00 6d75     EEPROM empty.Zum
   ba6c0:	6162 6f64 3a72 5400 6761 4420 7465 6365     bador:.Tag Detec
   ba6d0:	6174 6164 2d20 3e2d 0020 6a45 6365 7475     tada --> .Ejecut
   ba6e0:	6e61 6f64 2e2e 002e 6f42 7272 6461 206f     ando....Borrado 
   ba6f0:	6f63 706d 656c 6f74 7220 6165 696c 617a     completo realiza
   ba700:	6f64 4200 726f 6172 6f64 6e20 206f 6570     do.Borrado no pe
   ba710:	6d72 7469 6469 206f 6170 6172 6520 7473     rmitido para est
   ba720:	2065 6f6d 6f64 5300 6e65 6f73 2072 6564     e modo.Sensor de
   ba730:	6574 7463 6461 006f 6341 7574 6461 726f     tectado.Actuador
   ba740:	6420 7465 6365 6174 6f64 5400 7261 656a      detectado.Tarje
   ba750:	6174 6920 766e a1c3 696c 6164 7020 7261     ta inv..lida par
   ba760:	2061 7365 6574 6d20 646f 006f 6a45 6365     a este modo.Ejec
   ba770:	7475 6e61 6f64 7420 6761 2d20 3e2d 0020     utando tag --> .
   ba780:	6553 6520 7073 7265 6261 2061 4649 7420     Se esperaba IF t
   ba790:	6761 4400 7365 7570 7365 6420 2065 6e75     ag.Despues de un
   ba7a0:	7320 6e65 6f73 2072 6573 6520 7073 7265      sensor se esper
   ba7b0:	2061 6e75 2061 6f63 636e 6f69 3a6e 4120     a una concion: A
   ba7c0:	444e 7520 4f20 0052 6553 736e 726f 6920     ND u OR.Sensor i
   ba7d0:	766e 6c61 6469 006f 6553 6520 7073 7265     nvalido.Se esper
   ba7e0:	6261 2061 4854 4e45 7420 6761 4900 766e     aba THEN tag.Inv
   ba7f0:	6c61 6469 4120 7463 6175 6f64 0072 6553     alid Actuador.Se
   ba800:	6520 7073 7265 6261 2061 4c45 4553 7420      esperaba ELSE t
   ba810:	6761 4900 2046 6564 6574 7463 6461 006f     ag.IF detectado.
   ba820:	4649 4e00 6d75 7265 206f 6564 6220 6f6c     IF.Numero de blo
   ba830:	7571 7365 3e20 3220 7c20 207c 6553 6e20     ques > 2 || Se n
   ba840:	6365 7365 7469 2061 6c61 6d20 6e65 736f     ecesita al menos
   ba850:	7520 206e 6361 7574 6461 726f 7020 7261      un actuador par
   ba860:	2061 6574 6d72 6e69 7261 6520 206c 6c62     a terminar el bl
   ba870:	716f 6575 4100 444e 4f2f 2052 6564 6574     oque.AND/OR dete
   ba880:	7463 6461 006f 4e41 0044 6e55 2061 6f63     ctado.AND.Una co
   ba890:	636e 6369 6f69 206e 6f73 6f6c 7020 6575     ncicion solo pue
   ba8a0:	6564 6920 2072 6573 7567 6469 2061 6564     de ir seguida de
   ba8b0:	7520 206e 6573 736e 726f 002e 4854 4e45      un sensor..THEN
   ba8c0:	6420 7465 6365 6174 6f64 5400 4548 004e      detectado.THEN.
   ba8d0:	754e 656d 6f72 6420 2065 6573 736e 726f     Numero de sensor
   ba8e0:	7365 6920 666e 6375 6569 746e 7365 4500     es infucientes.E
   ba8f0:	534c 2045 6564 6574 7463 6461 006f 4c45     LSE detectado.EL
   ba900:	4553 4900 746e 6f72 7564 6563 7520 206e     SE.Introduce un 
   ba910:	6341 7574 6461 726f 7020 7261 2061 616c     Actuador para la
   ba920:	6520 6176 756c 6361 c369 6eb3 6120 5420      evaluaci..n a T
   ba930:	5552 0045 6946 206e 6154 0067 2023 6c42     RUE.Fin Tag.# Bl
   ba940:	716f 6575 7c20 2320 5320 6e65 6f73 6572     oque | # Sensore
   ba950:	2073 207c 2023 6f43 646e 6369 6f69 656e     s | # Condicione
   ba960:	2073 207c 2023 6341 7574 6461 726f 7365     s | # Actuadores
   ba970:	2000 2020 2520 2064 7c09 2009 6425 0920     .    %d .|. %d .
   ba980:	097c 2520 2064 7c09 2009 6425 0920 097c     |. %d .|. %d .|.
   ba990:	2520 0064 6f42 7272 6461 2061 6c75 6974      %d.Borrada ulti
   ba9a0:	616d 6c20 6365 7574 6172 5000 7261 2061     ma lectura.Para 
   ba9b0:	6f63 656d 7a6e 7261 7520 206e 6f6c 706f     comenzar un loop
   ba9c0:	6820 7961 7120 6575 6620 6e69 6c61 7a69      hay que finaliz
   ba9d0:	7261 6520 206c 6e61 6574 6972 726f 002e     ar el anterior..
   ba9e0:	4e45 2044 6f4c 706f 2000 7469 7265 6361     END Loop. iterac
   ba9f0:	6f69 656e 0073 6f4c 706f 7320 6e69 6320     iones.Loop sin c
   baa00:	6d6f 6e65 617a 2072 206f 6973 206e 6f63     omenzar o sin co
   baa10:	746e 6e65 6469 006f 002d 2330 2331 2331     ntenido.-.0#1#1#
   baa20:	0030 2330 2331 2331 0031 2330 2330 2331     0.0#1#1#1.0#0#1#
   baa30:	0030 2330 2330 2331 0031 2330 2330 2331     0.0#0#1#1.0#0#1#
   baa40:	0032 2330 2330 2331 0033 2330 2330 2331     2.0#0#1#3.0#0#1#
   baa50:	0034 2330 2330 2331 0035 2331 2330 2331     4.0#0#1#5.1#0#1#
   baa60:	2337 0030 2331 2330 2331 2337 0031 2331     7#0.1#0#1#7#1.1#
   baa70:	2330 2330 2332 0030 2331 2330 2330 2332     0#0#2#0.1#0#0#2#
   baa80:	0031 2331 2330 2330 2333 0030 2331 2330     1.1#0#0#3#0.1#0#
   baa90:	2330 2333 0031 2331 2330 2331 2334 0030     0#3#1.1#0#1#4#0.
   baaa0:	2331 2330 2331 2334 0031 2331 2330 2331     1#0#1#4#1.1#0#1#
   baab0:	2335 0030 2331 2330 2331 2335 0031 2331     5#0.1#0#1#5#1.1#
   baac0:	2330 2331 2336 0030 2331 2330 2331 2336     0#1#6#0.1#0#1#6#
   baad0:	0031 2331 2330 2331 2336 0032 2331 2331     1.1#0#1#6#2.1#1#
   baae0:	2331 2331 0030 2331 2331 2331 2331 0031     1#1#0.1#1#1#1#1.
   baaf0:	2331 2331 2331 2330 0030 2331 2331 2331     1#1#1#0#0.1#1#1#
   bab00:	2330 0031 2331 2331 2331 2330 0032 2331     0#1.1#1#1#0#2.1#
   bab10:	2331 2331 2330 0033 2331 2331 2331 2330     1#1#0#3.1#1#1#0#
   bab20:	0034 2331 2331 2331 2330 0035 2331 2331     4.1#1#1#0#5.1#1#
   bab30:	2331 2330 0036 2331 2331 2331 2330 0037     1#0#6.1#1#1#0#7.
   bab40:	2331 2333 0030 2331 2333 0031 2332 2330     1#3#0.1#3#1.2#0#
   bab50:	2330 0030 2332 2330 2330 0031 2332 2330     0#0.2#0#0#1.2#0#
   bab60:	2330 0032 2332 2330 2331 0030 2332 2330     0#2.2#0#1#0.2#0#
   bab70:	2331 0031 2332 2330 2331 0032 2332 2330     1#1.2#0#1#2.2#0#
   bab80:	2332 0030 2332 2330 2332 0031 2332 2330     2#0.2#0#2#1.2#0#
   bab90:	2332 0032 2332 2330 2333 0030 2332 2330     2#2.2#0#3#0.2#0#
   baba0:	2333 0031 2332 2330 2333 0032 2332 2330     3#1.2#0#3#2.2#0#
   babb0:	2334 0030 2332 2330 2334 0031 2332 2330     4#0.2#0#4#1.2#0#
   babc0:	2334 0032 2332 2330 2335 0030 2332 2330     4#2.2#0#5#0.2#0#
   babd0:	2335 0031 2332 2330 2335 0032 2332 2330     5#1.2#0#5#2.2#0#
   babe0:	2336 0030 2332 2330 2336 0031 2332 2330     6#0.2#0#6#1.2#0#
   babf0:	2336 0032 2332 2330 2337 0030 2332 2330     6#2.2#0#7#0.2#0#
   bac00:	2337 0031 2332 2330 2337 0032 2332 2331     7#1.2#0#7#2.2#1#
   bac10:	0030 2332 2332 0030 2332 2332 0031 2332     0.2#2#0.2#2#1.2#
   bac20:	2332 0032 2332 2332 0033 2332 2332 0034     2#2.2#2#3.2#2#4.
   bac30:	2332 2332 0035 2332 2332 0036 2332 2332     2#2#5.2#2#6.2#2#
   bac40:	0037 2332 2332 0038 2336 2330 0030 2336     7.2#2#8.6#0#0.6#
   bac50:	2330 0031 2336 2330 0032 2336 2331 0030     0#1.6#0#2.6#1#0.
   bac60:	2336 2332 0030 2336 2332 0031 2336 2332     6#2#0.6#2#1.6#2#
   bac70:	0032                                        2.

000bac72 <CSWTCH.325>:
   bac72:	00fa 01f4 03e8                              ......

000bac78 <_ZL14sucreLogo_data>:
   bac78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac98:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   baca8:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bacb8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bacc8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bacd8:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bace8:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bacf8:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bad08:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bad18:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bad28:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bad38:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bad48:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bad58:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bad68:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bad78:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bad88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad98:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bada8:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   badb8:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   badc8:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   badd8:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bade8:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   badf8:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bae08:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bae18:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bae28:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bae38:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bae48:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bae58:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bae68:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bae78:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bae88:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bae98:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   baea8:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   baeb8:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   baec8:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   baed8:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   baee8:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   baef8:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   baf08:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   baf18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf78:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   baf88:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   baf98:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bafa8:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bafb8:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bafc8:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bafd8:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bafe8:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   baff8:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bb008:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bb018:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bb028:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bb038:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb048:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb068:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb078:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bb088:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bb098:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bb0a8:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bb0b8:	7525 003e                                   %u>.

000bb0bc <_ZL4font>:
   bb0bc:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bb0cc:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bb0dc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bb0ec:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bb0fc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bb10c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bb11c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bb12c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bb13c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bb14c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bb15c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bb16c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bb17c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bb18c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bb19c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bb1ac:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bb1bc:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bb1cc:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bb1dc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bb1ec:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bb1fc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bb20c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bb21c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bb22c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bb23c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bb24c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bb25c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bb26c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bb27c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bb28c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bb29c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bb2ac:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bb2bc:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bb2cc:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bb2dc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bb2ec:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bb2fc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bb30c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bb31c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bb32c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bb33c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bb34c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bb35c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bb36c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bb37c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bb38c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bb39c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bb3ac:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bb3bc:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bb3cc:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bb3dc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bb3ec:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bb3fc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bb40c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bb41c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bb42c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bb43c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bb44c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bb45c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bb46c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bb47c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bb48c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bb49c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bb4ac:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bb4bc:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bb4cc:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bb4dc:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bb4ec:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bb4fc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bb50c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bb51c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bb52c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bb53c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bb54c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bb55c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bb56c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bb57c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bb58c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bb59c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bb5ac:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bb5bc <_ZTV12Adafruit_GFX>:
	...
   bb5cc:	7229 000b 91d1 000b 409d 000b 6c2f 000b     )r.......@../l..
   bb5dc:	6c31 000b 6c63 000b 6c3f 000b 6c51 000b     1l..cl..?l..Ql..
   bb5ec:	6b71 000b 6c2f 000b 6e5b 000b 6e59 000b     qk../l..[n..Yn..
   bb5fc:	6c7b 000b 6cb9 000b 6cf3 000b 6d39 000b     {l...l...l..9m..
   bb60c:	6d55 000b 6dd9 000b 6e55 6e6b 776f 206e     Um...m..Unknown 
   bb61c:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bb62c:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bb63c:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bb64c:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bb65c:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bb66c:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bb67c:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bb68c:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bb69c:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bb6ac:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bb6bc:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bb6cc:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bb6dc:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bb6ec:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bb6fc:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bb70c <CSWTCH.84>:
   bb70c:	b622 000b b62b 000b b643 000b b658 000b     "...+...C...X...
   bb71c:	b672 000b b68e 000b b6bd 000b b6cf 000b     r...............
   bb72c:	b6e9 000b                                   ....

000bb730 <_ZTVN8particle11SPISettingsE>:
	...
   bb738:	6b1d 000b 6b0d 000b 6b0f 000b               .k...k...k..

000bb744 <_ZL12splash2_data>:
   bb744:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bb754:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bb764:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bb780:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bb790:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bb7a0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bb7b0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bb7c0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bb7d0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bb7e0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bb7f0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bb800:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bb810:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bb820:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bb830:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bb840:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bb850:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bb860:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bb870:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bb880:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bb890:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bb8a0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bb8b0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bb8c0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bb8d8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bb8e8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bb8f8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bb908:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bb918:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bb924 <_ZL14sucreLogo_data>:
   bb924:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb934:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb944:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bb954:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bb964:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb974:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb984:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb994:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb9a4:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bb9b4:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bb9c4:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bb9d4:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bb9e4:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bb9f4:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bba04:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bba14:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bba24:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bba34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba44:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bba54:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bba64:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bba74:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bba84:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bba94:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bbaa4:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bbab4:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bbac4:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bbad4:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bbae4:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bbaf4:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bbb04:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bbb14:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bbb24:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bbb34:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bbb44:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bbb54:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bbb64:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bbb74:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bbb84:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bbb94:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bbba4:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bbbb4:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bbbc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbbd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbbe4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbbf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbc04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbc14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbc24:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bbc34:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bbc44:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bbc54:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bbc64:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bbc74:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bbc84:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bbc94:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bbca4:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bbcb4:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bbcc4:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bbcd4:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bbce4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbcf4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbd04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbd14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bbd24 <_ZTV16Adafruit_SSD1306>:
	...
   bbd2c:	7ddd 000b 7df5 000b 7229 000b 91d1 000b     .}...}..)r......
   bbd3c:	7e09 000b 6c2f 000b 6c31 000b 6c63 000b     .~../l..1l..cl..
   bbd4c:	6c3f 000b 6c51 000b 6b71 000b 6c2f 000b     ?l..Ql..qk../l..
   bbd5c:	6e5b 000b 7f9b 000b 8537 000b 84e9 000b     [n......7.......
   bbd6c:	6cf3 000b 6d39 000b 6d55 000b 6dd9 000b     .l..9m..Um...m..

000bbd7c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bbd7c:	8000 e0c0 f8f0 fefc                         ........

000bbd84 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bbd84:	0100 0703 1f0f 7f3f                         ......?.

000bbd8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bbd8c:	d5ae a880                                   ....

000bbd90 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bbd90:	00d3 8d40                                   ..@.

000bbd94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bbd94:	0020 c8a1                                    ...

000bbd98 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bbd98:	40db a6a4 af2e                              .@....

000bbd9e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bbd9e:	02da 8f81                                   ....

000bbda2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bbda2:	12da                                         ...

000bbda5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bbda5:	02da                                         ...

000bbda8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bbda8:	0022 21ff 0000 0000                         "..!....

000bbdb0 <_ZTVN5spark13EthernetClassE>:
	...
   bbdb8:	8dd7 000b 8dcd 000b 8dc3 000b 8db9 000b     ................
   bbdc8:	8dad 000b 8da1 000b 98fd 000b 9905 000b     ................
   bbdd8:	8d95 000b 8d8d 000b 8d83 000b 8d79 000b     ............y...
   bbde8:	9935 000b                                   5...

000bbdec <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bbdec:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bbdfc:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bbe0c:	7361 7463 6d69 0065                         asctime.

000bbe14 <_ZTV9IPAddress>:
	...
   bbe1c:	94ad 000b 949d 000b 949f 000b               ............

000bbe28 <_ZTV9USBSerial>:
	...
   bbe30:	9593 000b 95fb 000b 95d1 000b 91d1 000b     ................
   bbe40:	95c3 000b 9595 000b 95a5 000b 95f5 000b     ................
   bbe50:	95b5 000b 958d 000b                         ........

000bbe58 <_ZTV11USARTSerial>:
	...
   bbe60:	96f1 000b 975d 000b 9735 000b 91d1 000b     ....]...5.......
   bbe70:	9705 000b 9721 000b 9713 000b 972f 000b     ....!......./...
   bbe80:	96f3 000b 96f7 000b                         ........

000bbe88 <_ZTV7TwoWire>:
	...
   bbe90:	9795 000b 97df 000b 97b7 000b 9797 000b     ................
   bbea0:	97bf 000b 97c7 000b 97cf 000b 97d7 000b     ................

000bbeb0 <_ZTVN5spark9WiFiClassE>:
	...
   bbeb8:	989f 000b 9895 000b 988b 000b 9841 000b     ............A...
   bbec8:	987f 000b 9873 000b 98fd 000b 9905 000b     ....s...........
   bbed8:	9867 000b 985f 000b 9855 000b 984b 000b     g..._...U...K...
   bbee8:	9935 000b                                   5...

000bbeec <_ZTVN5spark12NetworkClassE>:
	...
   bbef4:	98bd 000b 98c7 000b 98d1 000b 98db 000b     ................
   bbf04:	98e5 000b 98f1 000b 98fd 000b 9905 000b     ................
   bbf14:	990d 000b 9919 000b 9921 000b 992b 000b     ........!...+...
   bbf24:	9935 000b                                   5...

000bbf28 <_ZSt7nothrow>:
   bbf28:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bbf38:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bbf48:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bbf58:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bbf68:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bbf78:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bbf88:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bbf98:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bbfa8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bbfb8:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bbfc8:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bbfd8:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bbfe8:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bbff8:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bc008:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bc018:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bc028:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bc038:	2e6b 0063                                   k.c.

000bc03c <link_const_variable_data_end>:
   bc03c:	000b6239 	.word	0x000b6239
   bc040:	000b8de1 	.word	0x000b8de1
   bc044:	000b8f59 	.word	0x000b8f59
   bc048:	000b91c1 	.word	0x000b91c1
   bc04c:	000b92f9 	.word	0x000b92f9
   bc050:	000b9309 	.word	0x000b9309
   bc054:	000b9325 	.word	0x000b9325
   bc058:	000b98a9 	.word	0x000b98a9
   bc05c:	000b9a0d 	.word	0x000b9a0d
