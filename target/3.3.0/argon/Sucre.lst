
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009230  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd250  000bd250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd274  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003c71c  000bd278  0001c71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000201c  2003c7d4  2003c7d4  0002c7d4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bd330  000bd330  0001d330  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd358  000bd358  0001d358  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00167632  00000000  00000000  0001d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001903f  00000000  00000000  0018498e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00050862  00000000  00000000  0019d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003728  00000000  00000000  001ee22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bf78  00000000  00000000  001f1957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce0  00000000  00000000  001fd8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059d6f  00000000  00000000  002425af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c42d  00000000  00000000  0029c31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a788  00000000  00000000  003d874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f8ad 	bl	bb190 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f8b5 	bl	bb1ac <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003c71c 	.word	0x2003c71c
   b404c:	000bd278 	.word	0x000bd278
   b4050:	2003c7d4 	.word	0x2003c7d4
   b4054:	2003c7d4 	.word	0x2003c7d4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 ff4d 	bl	b9f00 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd224 	.word	0x000bd224
   b4080:	000bd248 	.word	0x000bd248

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bf64 	b.w	b4f50 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f8c7 	bl	b621c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 beed 	b.w	b9e70 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f005 bac9 	b.w	b962c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f005 bacf 	b.w	b963c <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f005 fa24 	bl	b94f4 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b9245 	.word	0x000b9245
   b40b4:	000bb3f0 	.word	0x000bb3f0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b40c8:	4a08      	ldr	r2, [pc, #32]	; (b40ec <_Z10borradoALLi.part.0+0x24>)
   b40ca:	2300      	movs	r3, #0
   b40cc:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b40ce:	4a08      	ldr	r2, [pc, #32]	; (b40f0 <_Z10borradoALLi.part.0+0x28>)
   b40d0:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b40d2:	4a08      	ldr	r2, [pc, #32]	; (b40f4 <_Z10borradoALLi.part.0+0x2c>)
   b40d4:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b40d6:	4a08      	ldr	r2, [pc, #32]	; (b40f8 <_Z10borradoALLi.part.0+0x30>)
   b40d8:	f04f 31ff 	mov.w	r1, #4294967295
   b40dc:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b40de:	4a07      	ldr	r2, [pc, #28]	; (b40fc <_Z10borradoALLi.part.0+0x34>)
   b40e0:	2103      	movs	r1, #3
   b40e2:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b40e4:	4a06      	ldr	r2, [pc, #24]	; (b4100 <_Z10borradoALLi.part.0+0x38>)
   b40e6:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b40e8:	4770      	bx	lr
   b40ea:	bf00      	nop
   b40ec:	2003c7e1 	.word	0x2003c7e1
   b40f0:	2003c7f0 	.word	0x2003c7f0
   b40f4:	2003c7e0 	.word	0x2003c7e0
   b40f8:	2003c744 	.word	0x2003c744
   b40fc:	2003c748 	.word	0x2003c748
   b4100:	2003d508 	.word	0x2003d508

000b4104 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4104:	b40e      	push	{r1, r2, r3}
   b4106:	b503      	push	{r0, r1, lr}
   b4108:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b410a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4110:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4112:	f005 fe3d 	bl	b9d90 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4116:	b002      	add	sp, #8
   b4118:	f85d eb04 	ldr.w	lr, [sp], #4
   b411c:	b003      	add	sp, #12
   b411e:	4770      	bx	lr

000b4120 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4120:	b40e      	push	{r1, r2, r3}
   b4122:	b503      	push	{r0, r1, lr}
   b4124:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4126:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4128:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b412c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b412e:	f005 fe2f 	bl	b9d90 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4132:	b002      	add	sp, #8
   b4134:	f85d eb04 	ldr.w	lr, [sp], #4
   b4138:	b003      	add	sp, #12
   b413a:	4770      	bx	lr

000b413c <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b413c:	b507      	push	{r0, r1, r2, lr}
   b413e:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4140:	a801      	add	r0, sp, #4
   b4142:	f004 f9f9 	bl	b8538 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4146:	a801      	add	r0, sp, #4
   b4148:	f004 f9f8 	bl	b853c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b414c:	2809      	cmp	r0, #9
   b414e:	bf8c      	ite	hi
   b4150:	2000      	movhi	r0, #0
   b4152:	2001      	movls	r0, #1
   b4154:	b003      	add	sp, #12
   b4156:	f85d fb04 	ldr.w	pc, [sp], #4

000b415a <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b415a:	b507      	push	{r0, r1, r2, lr}
   b415c:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b415e:	a801      	add	r0, sp, #4
   b4160:	f004 f9ea 	bl	b8538 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4164:	a801      	add	r0, sp, #4
   b4166:	f004 f9e9 	bl	b853c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b416a:	280a      	cmp	r0, #10
   b416c:	bfd4      	ite	le
   b416e:	2000      	movle	r0, #0
   b4170:	2001      	movgt	r0, #1
   b4172:	b003      	add	sp, #12
   b4174:	f85d fb04 	ldr.w	pc, [sp], #4

000b4178 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4178:	2802      	cmp	r0, #2
{
   b417a:	b508      	push	{r3, lr}
    switch (puerto)
   b417c:	d00b      	beq.n	b4196 <_Z5siLuzi+0x1e>
   b417e:	2804      	cmp	r0, #4
   b4180:	d00b      	beq.n	b419a <_Z5siLuzi+0x22>
   b4182:	b960      	cbnz	r0, b419e <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4184:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4186:	f006 fa44 	bl	ba612 <analogRead>
   b418a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b418e:	bfb4      	ite	lt
   b4190:	2000      	movlt	r0, #0
   b4192:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4194:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4196:	2011      	movs	r0, #17
   b4198:	e7f5      	b.n	b4186 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b419a:	200f      	movs	r0, #15
   b419c:	e7f3      	b.n	b4186 <_Z5siLuzi+0xe>
    switch (puerto)
   b419e:	2000      	movs	r0, #0
   b41a0:	e7f8      	b.n	b4194 <_Z5siLuzi+0x1c>

000b41a2 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b41a2:	2802      	cmp	r0, #2
{
   b41a4:	b508      	push	{r3, lr}
    switch (puerto)
   b41a6:	d00b      	beq.n	b41c0 <_Z5noLuzi+0x1e>
   b41a8:	2804      	cmp	r0, #4
   b41aa:	d00b      	beq.n	b41c4 <_Z5noLuzi+0x22>
   b41ac:	b960      	cbnz	r0, b41c8 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41ae:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41b0:	f006 fa2f 	bl	ba612 <analogRead>
   b41b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41b8:	bfcc      	ite	gt
   b41ba:	2000      	movgt	r0, #0
   b41bc:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41be:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41c0:	2011      	movs	r0, #17
   b41c2:	e7f5      	b.n	b41b0 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41c4:	200f      	movs	r0, #15
   b41c6:	e7f3      	b.n	b41b0 <_Z5noLuzi+0xe>
    switch (puerto)
   b41c8:	2000      	movs	r0, #0
   b41ca:	e7f8      	b.n	b41be <_Z5noLuzi+0x1c>

000b41cc <_Z7siRuidoi>:
    return false;
}*/


bool siRuido(int puerto)
{
   b41cc:	b570      	push	{r4, r5, r6, lr}
   b41ce:	2520      	movs	r5, #32
    int soundValue = 0; //create variable to store many different readings
   b41d0:	2400      	movs	r4, #0
    for (int i = 0; i < 32; i++) //create a for loop to read 
    { soundValue += analogRead(puerto);  } //read the sound sensor
   b41d2:	b286      	uxth	r6, r0
   b41d4:	4630      	mov	r0, r6
   b41d6:	f006 fa1c 	bl	ba612 <analogRead>
    for (int i = 0; i < 32; i++) //create a for loop to read 
   b41da:	3d01      	subs	r5, #1
    { soundValue += analogRead(puerto);  } //read the sound sensor
   b41dc:	4404      	add	r4, r0
    for (int i = 0; i < 32; i++) //create a for loop to read 
   b41de:	d1f9      	bne.n	b41d4 <_Z7siRuidoi+0x8>
 
    soundValue >>= 5; //bitshift operation 
    Serial.println(soundValue);
   b41e0:	f005 ffb0 	bl	ba144 <_Z16_fetch_usbserialv>
    soundValue >>= 5; //bitshift operation 
   b41e4:	1164      	asrs	r4, r4, #5
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41e6:	2c00      	cmp	r4, #0
    Serial.println(soundValue);
   b41e8:	4605      	mov	r5, r0
   b41ea:	da10      	bge.n	b420e <_Z7siRuidoi+0x42>
            t = print('-');
   b41ec:	212d      	movs	r1, #45	; 0x2d
   b41ee:	f005 fcb5 	bl	b9b5c <_ZN5Print5printEc>
            val = -n;
   b41f2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41f4:	220a      	movs	r2, #10
   b41f6:	4628      	mov	r0, r5
   b41f8:	f005 fcc9 	bl	b9b8e <_ZN5Print11printNumberEmh>
        n += println();
   b41fc:	4628      	mov	r0, r5
   b41fe:	f005 fcb0 	bl	b9b62 <_ZN5Print7printlnEv>
    
    if (soundValue > 500)
        return true;
    return false;
}
   b4202:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   b4206:	bfd4      	ite	le
   b4208:	2000      	movle	r0, #0
   b420a:	2001      	movgt	r0, #1
   b420c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   b420e:	4621      	mov	r1, r4
   b4210:	e7f0      	b.n	b41f4 <_Z7siRuidoi+0x28>

000b4212 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4212:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4214:	b280      	uxth	r0, r0
   b4216:	f006 f9fc 	bl	ba612 <analogRead>
        return true;
    return false;
}
   b421a:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b421e:	bfcc      	ite	gt
   b4220:	2000      	movgt	r0, #0
   b4222:	2001      	movle	r0, #1
   b4224:	bd08      	pop	{r3, pc}

000b4226 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4226:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4228:	b280      	uxth	r0, r0
   b422a:	2100      	movs	r1, #0
   b422c:	9001      	str	r0, [sp, #4]
   b422e:	f006 f9b3 	bl	ba598 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4232:	9801      	ldr	r0, [sp, #4]
   b4234:	f006 f9da 	bl	ba5ec <digitalRead>
        return true;
    return false;
}
   b4238:	1e43      	subs	r3, r0, #1
   b423a:	4258      	negs	r0, r3
   b423c:	4158      	adcs	r0, r3
   b423e:	b003      	add	sp, #12
   b4240:	f85d fb04 	ldr.w	pc, [sp], #4

000b4244 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4244:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4246:	b280      	uxth	r0, r0
   b4248:	2100      	movs	r1, #0
   b424a:	9001      	str	r0, [sp, #4]
   b424c:	f006 f9a4 	bl	ba598 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4250:	9801      	ldr	r0, [sp, #4]
   b4252:	f006 f9cb 	bl	ba5ec <digitalRead>
        return true;
    return false;
}
   b4256:	fab0 f080 	clz	r0, r0
   b425a:	0940      	lsrs	r0, r0, #5
   b425c:	b003      	add	sp, #12
   b425e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4262:	0000      	movs	r0, r0
   b4264:	0000      	movs	r0, r0
	...

000b4268 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4268:	2802      	cmp	r0, #2
{
   b426a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b426c:	d030      	beq.n	b42d0 <_Z10siRotativoi+0x68>
   b426e:	2804      	cmp	r0, #4
   b4270:	d030      	beq.n	b42d4 <_Z10siRotativoi+0x6c>
   b4272:	b918      	cbnz	r0, b427c <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4274:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4276:	f006 f9cc 	bl	ba612 <analogRead>
   b427a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b427c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4284:	ee17 0a90 	vmov	r0, s15
   b4288:	f006 fbd4 	bl	baa34 <__aeabi_f2d>
   b428c:	a314      	add	r3, pc, #80	; (adr r3, b42e0 <_Z10siRotativoi+0x78>)
   b428e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4292:	f006 fc27 	bl	baae4 <__aeabi_dmul>
   b4296:	a314      	add	r3, pc, #80	; (adr r3, b42e8 <_Z10siRotativoi+0x80>)
   b4298:	e9d3 2300 	ldrd	r2, r3, [r3]
   b429c:	f006 fd4c 	bl	bad38 <__aeabi_ddiv>
   b42a0:	f006 ff18 	bl	bb0d4 <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b42a4:	eddf 7a0c 	vldr	s15, [pc, #48]	; b42d8 <_Z10siRotativoi+0x70>
   b42a8:	ee07 0a10 	vmov	s14, r0
   b42ac:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b42b8:	eddf 7a08 	vldr	s15, [pc, #32]	; b42dc <_Z10siRotativoi+0x74>
   b42bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42c4:	bf94      	ite	ls
   b42c6:	2001      	movls	r0, #1
   b42c8:	2000      	movhi	r0, #0
   b42ca:	b003      	add	sp, #12
   b42cc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42d0:	2011      	movs	r0, #17
   b42d2:	e7d0      	b.n	b4276 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42d4:	200f      	movs	r0, #15
   b42d6:	e7ce      	b.n	b4276 <_Z10siRotativoi+0xe>
   b42d8:	43960000 	.word	0x43960000
   b42dc:	43b40000 	.word	0x43b40000
   b42e0:	66666666 	.word	0x66666666
   b42e4:	400a6666 	.word	0x400a6666
   b42e8:	00000000 	.word	0x00000000
   b42ec:	408ff800 	.word	0x408ff800

000b42f0 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b42f0:	2802      	cmp	r0, #2
{
   b42f2:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b42f4:	d030      	beq.n	b4358 <_Z10noRotativoi+0x68>
   b42f6:	2804      	cmp	r0, #4
   b42f8:	d030      	beq.n	b435c <_Z10noRotativoi+0x6c>
   b42fa:	b918      	cbnz	r0, b4304 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b42fc:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b42fe:	f006 f988 	bl	ba612 <analogRead>
   b4302:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4304:	eddd 7a01 	vldr	s15, [sp, #4]
   b4308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b430c:	ee17 0a90 	vmov	r0, s15
   b4310:	f006 fb90 	bl	baa34 <__aeabi_f2d>
   b4314:	a314      	add	r3, pc, #80	; (adr r3, b4368 <_Z10noRotativoi+0x78>)
   b4316:	e9d3 2300 	ldrd	r2, r3, [r3]
   b431a:	f006 fbe3 	bl	baae4 <__aeabi_dmul>
   b431e:	a314      	add	r3, pc, #80	; (adr r3, b4370 <_Z10noRotativoi+0x80>)
   b4320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4324:	f006 fd08 	bl	bad38 <__aeabi_ddiv>
   b4328:	f006 fed4 	bl	bb0d4 <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b432c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4360 <_Z10noRotativoi+0x70>
   b4330:	ee07 0a10 	vmov	s14, r0
   b4334:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4338:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b433c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4340:	eddf 7a08 	vldr	s15, [pc, #32]	; b4364 <_Z10noRotativoi+0x74>
   b4344:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b434c:	bfac      	ite	ge
   b434e:	2001      	movge	r0, #1
   b4350:	2000      	movlt	r0, #0
   b4352:	b003      	add	sp, #12
   b4354:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4358:	2011      	movs	r0, #17
   b435a:	e7d0      	b.n	b42fe <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b435c:	200f      	movs	r0, #15
   b435e:	e7ce      	b.n	b42fe <_Z10noRotativoi+0xe>
   b4360:	43960000 	.word	0x43960000
   b4364:	43b40000 	.word	0x43b40000
   b4368:	66666666 	.word	0x66666666
   b436c:	400a6666 	.word	0x400a6666
   b4370:	00000000 	.word	0x00000000
   b4374:	408ff800 	.word	0x408ff800

000b4378 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4378:	b500      	push	{lr}
   b437a:	ed2d 8b02 	vpush	{d8}
   b437e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4380:	b2c1      	uxtb	r1, r0
   b4382:	2306      	movs	r3, #6
   b4384:	220b      	movs	r2, #11
   b4386:	a801      	add	r0, sp, #4
   b4388:	f004 f8fc 	bl	b8584 <_ZN3DHTC1Ehhh>
    dht.begin();
   b438c:	a801      	add	r0, sp, #4
   b438e:	f004 f900 	bl	b8592 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4392:	a801      	add	r0, sp, #4
   b4394:	f004 f9ba 	bl	b870c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4398:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43a0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b43a4:	d0f5      	beq.n	b4392 <_Z8tempFrioi+0x1a>
   b43a6:	eeb4 0a40 	vcmp.f32	s0, s0
   b43aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43ae:	d6f0      	bvs.n	b4392 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.println(t, 1);
   b43b0:	f005 fec8 	bl	ba144 <_Z16_fetch_usbserialv>
   b43b4:	2101      	movs	r1, #1
   b43b6:	eeb0 0a48 	vmov.f32	s0, s16
   b43ba:	f005 fcda 	bl	b9d72 <_ZN5Print7printlnEfi>
    if (t <= 16)
   b43be:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   b43c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    else
        return false;
}
   b43ca:	bf94      	ite	ls
   b43cc:	2001      	movls	r0, #1
   b43ce:	2000      	movhi	r0, #0
   b43d0:	b007      	add	sp, #28
   b43d2:	ecbd 8b02 	vpop	{d8}
   b43d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b43da <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b43da:	b500      	push	{lr}
   b43dc:	ed2d 8b02 	vpush	{d8}
   b43e0:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b43e2:	b2c1      	uxtb	r1, r0
   b43e4:	2306      	movs	r3, #6
   b43e6:	220b      	movs	r2, #11
   b43e8:	a801      	add	r0, sp, #4
   b43ea:	f004 f8cb 	bl	b8584 <_ZN3DHTC1Ehhh>
    dht.begin();
   b43ee:	a801      	add	r0, sp, #4
   b43f0:	f004 f8cf 	bl	b8592 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43f4:	a801      	add	r0, sp, #4
   b43f6:	f004 f989 	bl	b870c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b43fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4402:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4406:	d0f5      	beq.n	b43f4 <_Z9tempCalori+0x1a>
   b4408:	eeb4 0a40 	vcmp.f32	s0, s0
   b440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4410:	d6f0      	bvs.n	b43f4 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.println(t, 1);
   b4412:	f005 fe97 	bl	ba144 <_Z16_fetch_usbserialv>
   b4416:	2101      	movs	r1, #1
   b4418:	eeb0 0a48 	vmov.f32	s0, s16
   b441c:	f005 fca9 	bl	b9d72 <_ZN5Print7printlnEfi>
    if (t > 16)
   b4420:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   b4424:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    else
        return false;
}
   b442c:	bfcc      	ite	gt
   b442e:	2001      	movgt	r0, #1
   b4430:	2000      	movle	r0, #0
   b4432:	b007      	add	sp, #28
   b4434:	ecbd 8b02 	vpop	{d8}
   b4438:	f85d fb04 	ldr.w	pc, [sp], #4

000b443c <_Z10leerSensoriii>:
        return false;
}
*/

bool leerSensor(int id, int condicion, int puerto)
{
   b443c:	b508      	push	{r3, lr}
   b443e:	4603      	mov	r3, r0
   b4440:	3b01      	subs	r3, #1
   b4442:	4610      	mov	r0, r2
   b4444:	2b06      	cmp	r3, #6
   b4446:	d83b      	bhi.n	b44c0 <_Z10leerSensoriii+0x84>
   b4448:	e8df f003 	tbb	[pc, r3]
   b444c:	1f160d04 	.word	0x1f160d04
   b4450:	3128      	.short	0x3128
   b4452:	04          	.byte	0x04
   b4453:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4454:	b919      	cbnz	r1, b445e <_Z10leerSensoriii+0x22>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b445a:	f7ff be6f 	b.w	b413c <_Z11noDistanciai>
   b445e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4462:	f7ff be7a 	b.w	b415a <_Z11siDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4466:	b919      	cbnz	r1, b4470 <_Z10leerSensoriii+0x34>
   b4468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b446c:	f7ff be99 	b.w	b41a2 <_Z5noLuzi>
   b4470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4474:	f7ff be80 	b.w	b4178 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4478:	b919      	cbnz	r1, b4482 <_Z10leerSensoriii+0x46>
   b447a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b447e:	f7ff bec8 	b.w	b4212 <_Z7noRuidoi>
   b4482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4486:	f7ff bea1 	b.w	b41cc <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b448a:	b919      	cbnz	r1, b4494 <_Z10leerSensoriii+0x58>
   b448c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4490:	f7ff bed8 	b.w	b4244 <_Z7noBotoni>
   b4494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4498:	f7ff bec5 	b.w	b4226 <_Z7siBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b449c:	b919      	cbnz	r1, b44a6 <_Z10leerSensoriii+0x6a>
   b449e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b44a2:	f7ff bf25 	b.w	b42f0 <_Z10noRotativoi>
   b44a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b44aa:	f7ff bedd 	b.w	b4268 <_Z10siRotativoi>
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44ae:	b919      	cbnz	r1, b44b8 <_Z10leerSensoriii+0x7c>
   b44b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44b4:	f7ff bf60 	b.w	b4378 <_Z8tempFrioi>
   b44b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44bc:	f7ff bf8d 	b.w	b43da <_Z9tempCalori>
        Serial.println("InvalidSensorError");
   b44c0:	f005 fe40 	bl	ba144 <_Z16_fetch_usbserialv>
   b44c4:	4902      	ldr	r1, [pc, #8]	; (b44d0 <_Z10leerSensoriii+0x94>)
   b44c6:	f005 fb58 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b44ca:	2000      	movs	r0, #0
   b44cc:	bd08      	pop	{r3, pc}
   b44ce:	bf00      	nop
   b44d0:	000bb405 	.word	0x000bb405

000b44d4 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b44d4:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b44d6:	2300      	movs	r3, #0
   b44d8:	4804      	ldr	r0, [pc, #16]	; (b44ec <_Z9ledApagarv+0x18>)
   b44da:	9300      	str	r3, [sp, #0]
   b44dc:	461a      	mov	r2, r3
   b44de:	4619      	mov	r1, r3
   b44e0:	f004 fdee 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44e4:	b003      	add	sp, #12
   b44e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b44ea:	bf00      	nop
   b44ec:	2003d1b8 	.word	0x2003d1b8

000b44f0 <_Z7ledRojov>:
void ledRojo()
{
   b44f0:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b44f2:	2300      	movs	r3, #0
   b44f4:	4804      	ldr	r0, [pc, #16]	; (b4508 <_Z7ledRojov+0x18>)
   b44f6:	9300      	str	r3, [sp, #0]
   b44f8:	22ff      	movs	r2, #255	; 0xff
   b44fa:	4619      	mov	r1, r3
   b44fc:	f004 fde0 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4500:	b003      	add	sp, #12
   b4502:	f85d fb04 	ldr.w	pc, [sp], #4
   b4506:	bf00      	nop
   b4508:	2003d1b8 	.word	0x2003d1b8

000b450c <_Z8ledVerdev>:
void ledVerde()
{
   b450c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b450e:	230a      	movs	r3, #10
   b4510:	2200      	movs	r2, #0
   b4512:	9300      	str	r3, [sp, #0]
   b4514:	4803      	ldr	r0, [pc, #12]	; (b4524 <_Z8ledVerdev+0x18>)
   b4516:	23ff      	movs	r3, #255	; 0xff
   b4518:	4611      	mov	r1, r2
   b451a:	f004 fdd1 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b451e:	b003      	add	sp, #12
   b4520:	f85d fb04 	ldr.w	pc, [sp], #4
   b4524:	2003d1b8 	.word	0x2003d1b8

000b4528 <_Z7ledAzulv>:
void ledAzul()
{
   b4528:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b452a:	23ff      	movs	r3, #255	; 0xff
   b452c:	9300      	str	r3, [sp, #0]
   b452e:	2300      	movs	r3, #0
   b4530:	4803      	ldr	r0, [pc, #12]	; (b4540 <_Z7ledAzulv+0x18>)
   b4532:	461a      	mov	r2, r3
   b4534:	4619      	mov	r1, r3
   b4536:	f004 fdc3 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b453a:	b003      	add	sp, #12
   b453c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4540:	2003d1b8 	.word	0x2003d1b8

000b4544 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4544:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4546:	2100      	movs	r1, #0
   b4548:	4804      	ldr	r0, [pc, #16]	; (b455c <_Z11ledAmarillov+0x18>)
   b454a:	9100      	str	r1, [sp, #0]
   b454c:	23e9      	movs	r3, #233	; 0xe9
   b454e:	22ff      	movs	r2, #255	; 0xff
   b4550:	f004 fdb6 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4554:	b003      	add	sp, #12
   b4556:	f85d fb04 	ldr.w	pc, [sp], #4
   b455a:	bf00      	nop
   b455c:	2003d1b8 	.word	0x2003d1b8

000b4560 <_Z9ledMoradov>:
void ledMorado()
{
   b4560:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4562:	2375      	movs	r3, #117	; 0x75
   b4564:	9300      	str	r3, [sp, #0]
   b4566:	4804      	ldr	r0, [pc, #16]	; (b4578 <_Z9ledMoradov+0x18>)
   b4568:	2346      	movs	r3, #70	; 0x46
   b456a:	226c      	movs	r2, #108	; 0x6c
   b456c:	2100      	movs	r1, #0
   b456e:	f004 fda7 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4572:	b003      	add	sp, #12
   b4574:	f85d fb04 	ldr.w	pc, [sp], #4
   b4578:	2003d1b8 	.word	0x2003d1b8

000b457c <_Z10ledNaranjav>:
void ledNaranja()
{
   b457c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b457e:	2100      	movs	r1, #0
   b4580:	4804      	ldr	r0, [pc, #16]	; (b4594 <_Z10ledNaranjav+0x18>)
   b4582:	9100      	str	r1, [sp, #0]
   b4584:	2380      	movs	r3, #128	; 0x80
   b4586:	22ff      	movs	r2, #255	; 0xff
   b4588:	f004 fd9a 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b458c:	b003      	add	sp, #12
   b458e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4592:	bf00      	nop
   b4594:	2003d1b8 	.word	0x2003d1b8

000b4598 <_Z9ledBlancov>:
void ledBlanco()
{
   b4598:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b459a:	23ff      	movs	r3, #255	; 0xff
   b459c:	4804      	ldr	r0, [pc, #16]	; (b45b0 <_Z9ledBlancov+0x18>)
   b459e:	9300      	str	r3, [sp, #0]
   b45a0:	461a      	mov	r2, r3
   b45a2:	2100      	movs	r1, #0
   b45a4:	f004 fd8c 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45a8:	b003      	add	sp, #12
   b45aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b45ae:	bf00      	nop
   b45b0:	2003d1b8 	.word	0x2003d1b8

000b45b4 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b45b4:	b510      	push	{r4, lr}
   switch (counter)
   b45b6:	4c11      	ldr	r4, [pc, #68]	; (b45fc <_Z11ledArcoirisv+0x48>)
   b45b8:	6823      	ldr	r3, [r4, #0]
   b45ba:	2b05      	cmp	r3, #5
   b45bc:	d809      	bhi.n	b45d2 <_Z11ledArcoirisv+0x1e>
   b45be:	e8df f003 	tbb	[pc, r3]
   b45c2:	0d03      	.short	0x0d03
   b45c4:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b45c8:	f7ff ff92 	bl	b44f0 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b45cc:	6823      	ldr	r3, [r4, #0]
   b45ce:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b45d0:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b45d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b45d6:	2096      	movs	r0, #150	; 0x96
   b45d8:	f005 bc1e 	b.w	b9e18 <delay>
      ledNaranja();
   b45dc:	f7ff ffce 	bl	b457c <_Z10ledNaranjav>
      counter++;
   b45e0:	e7f4      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b45e2:	f7ff ffaf 	bl	b4544 <_Z11ledAmarillov>
      counter++;
   b45e6:	e7f1      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledVerde();
   b45e8:	f7ff ff90 	bl	b450c <_Z8ledVerdev>
      counter++;
   b45ec:	e7ee      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledMorado();
   b45ee:	f7ff ffb7 	bl	b4560 <_Z9ledMoradov>
   b45f2:	e7eb      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledAzul();
   b45f4:	f7ff ff98 	bl	b4528 <_Z7ledAzulv>
      counter = 0;
   b45f8:	2300      	movs	r3, #0
   b45fa:	e7e9      	b.n	b45d0 <_Z11ledArcoirisv+0x1c>
   b45fc:	2003ce10 	.word	0x2003ce10

000b4600 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4600:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4602:	2101      	movs	r1, #1
   b4604:	2006      	movs	r0, #6
   b4606:	f005 ffd8 	bl	ba5ba <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b460a:	2101      	movs	r1, #1
   b460c:	2006      	movs	r0, #6
   b460e:	f005 ffd4 	bl	ba5ba <digitalWrite>
   digitalWrite(D7, HIGH);
   b4612:	2101      	movs	r1, #1
   b4614:	2007      	movs	r0, #7
   b4616:	f005 ffd0 	bl	ba5ba <digitalWrite>
   digitalWrite(D7, 1);
}
   b461a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b461e:	2101      	movs	r1, #1
   b4620:	2007      	movs	r0, #7
   b4622:	f005 bfca 	b.w	ba5ba <digitalWrite>

000b4626 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b4626:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b4628:	2100      	movs	r1, #0
   b462a:	2006      	movs	r0, #6
   b462c:	f005 ffc5 	bl	ba5ba <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4630:	2100      	movs	r1, #0
   b4632:	2006      	movs	r0, #6
   b4634:	f005 ffc1 	bl	ba5ba <digitalWrite>
   digitalWrite(D7, LOW);
   b4638:	2100      	movs	r1, #0
   b463a:	2007      	movs	r0, #7
   b463c:	f005 ffbd 	bl	ba5ba <digitalWrite>
   digitalWrite(D7, 0);
}
   b4640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b4644:	2100      	movs	r1, #0
   b4646:	2007      	movs	r0, #7
   b4648:	f005 bfb7 	b.w	ba5ba <digitalWrite>

000b464c <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b464c:	b508      	push	{r3, lr}
   pitidoON0();
   b464e:	f7ff ffd7 	bl	b4600 <_Z9pitidoON0v>
   delay(100);
   b4652:	2064      	movs	r0, #100	; 0x64
   b4654:	f005 fbe0 	bl	b9e18 <delay>
   pitidoOFF0();
   b4658:	f7ff ffe5 	bl	b4626 <_Z10pitidoOFF0v>
   delay(100);
}
   b465c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b4660:	2064      	movs	r0, #100	; 0x64
   b4662:	f005 bbd9 	b.w	b9e18 <delay>

000b4666 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b4666:	b108      	cbz	r0, b466c <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b4668:	f7ff bf5e 	b.w	b4528 <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b466c:	f7ff bf86 	b.w	b457c <_Z10ledNaranjav>

000b4670 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b4670:	b108      	cbz	r0, b4676 <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b4672:	f7ff bf67 	b.w	b4544 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b4676:	f7ff bf73 	b.w	b4560 <_Z9ledMoradov>

000b467a <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b467a:	b108      	cbz	r0, b4680 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b467c:	f7ff bf46 	b.w	b450c <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b4680:	f7ff bf36 	b.w	b44f0 <_Z7ledRojov>

000b4684 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b4684:	b508      	push	{r3, lr}
   if (estado)
   b4686:	b160      	cbz	r0, b46a2 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b4688:	f7ff ff86 	bl	b4598 <_Z9ledBlancov>
      delay(400);
   b468c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4690:	f005 fbc2 	bl	b9e18 <delay>
      ledApagar();
   b4694:	f7ff ff1e 	bl	b44d4 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b4698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b469c:	20c8      	movs	r0, #200	; 0xc8
   b469e:	f005 bbbb 	b.w	b9e18 <delay>
}
   b46a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b46a6:	f7ff bf15 	b.w	b44d4 <_Z9ledApagarv>

000b46aa <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b46aa:	b108      	cbz	r0, b46b0 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b46ac:	f7ff bf74 	b.w	b4598 <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b46b0:	f7ff bf10 	b.w	b44d4 <_Z9ledApagarv>

000b46b4 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b46b4:	b108      	cbz	r0, b46ba <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b46b6:	f7ff bf7d 	b.w	b45b4 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b46ba:	f7ff bf0b 	b.w	b44d4 <_Z9ledApagarv>

000b46be <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b46be:	b108      	cbz	r0, b46c4 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b46c0:	f7ff bfc4 	b.w	b464c <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b46c4:	f7ff bfaf 	b.w	b4626 <_Z10pitidoOFF0v>

000b46c8 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b46c8:	b108      	cbz	r0, b46ce <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b46ca:	f7ff bf99 	b.w	b4600 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b46ce:	f7ff bfaa 	b.w	b4626 <_Z10pitidoOFF0v>
	...

000b46d4 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   b46d4:	4603      	mov	r3, r0
   b46d6:	b513      	push	{r0, r1, r4, lr}
   b46d8:	460c      	mov	r4, r1
   b46da:	4610      	mov	r0, r2
   switch (id)
   b46dc:	b14b      	cbz	r3, b46f2 <_Z15activarActuadoriib+0x1e>
   b46de:	2b01      	cmp	r3, #1
   b46e0:	d02c      	beq.n	b473c <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b46e2:	f005 fd2f 	bl	ba144 <_Z16_fetch_usbserialv>
   b46e6:	491e      	ldr	r1, [pc, #120]	; (b4760 <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b46e8:	b002      	add	sp, #8
   b46ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b46ee:	f005 ba44 	b.w	b9b7a <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b46f2:	2905      	cmp	r1, #5
   b46f4:	d8f5      	bhi.n	b46e2 <_Z15activarActuadoriib+0xe>
   b46f6:	e8df f001 	tbb	[pc, r1]
   b46fa:	0803      	.short	0x0803
   b46fc:	1c17120d 	.word	0x1c17120d
}
   b4700:	b002      	add	sp, #8
   b4702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b4706:	f7ff bfb8 	b.w	b467a <_Z12ledVerdeRojob>
}
   b470a:	b002      	add	sp, #8
   b470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4710:	f7ff bfae 	b.w	b4670 <_Z17ledMoradoAmarillob>
}
   b4714:	b002      	add	sp, #8
   b4716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b471a:	f7ff bfa4 	b.w	b4666 <_Z14ledAzulNaranjab>
}
   b471e:	b002      	add	sp, #8
   b4720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4724:	f7ff bfae 	b.w	b4684 <_Z9ledBlink0b>
}
   b4728:	b002      	add	sp, #8
   b472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b472e:	f7ff bfc1 	b.w	b46b4 <_Z12ledArcoiris0b>
}
   b4732:	b002      	add	sp, #8
   b4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b4738:	f7ff bfb7 	b.w	b46aa <_Z8ledOnOffb>
   b473c:	9201      	str	r2, [sp, #4]
      ledApagar();
   b473e:	f7ff fec9 	bl	b44d4 <_Z9ledApagarv>
      switch (opcion) {
   b4742:	9801      	ldr	r0, [sp, #4]
   b4744:	b134      	cbz	r4, b4754 <_Z15activarActuadoriib+0x80>
   b4746:	2c01      	cmp	r4, #1
   b4748:	d1cb      	bne.n	b46e2 <_Z15activarActuadoriib+0xe>
}
   b474a:	b002      	add	sp, #8
   b474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b4750:	f7ff bfb5 	b.w	b46be <_Z13blinkAndSleepb>
}
   b4754:	b002      	add	sp, #8
   b4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b475a:	f7ff bfb5 	b.w	b46c8 <_Z8zumbadorb>
   b475e:	bf00      	nop
   b4760:	000bb418 	.word	0x000bb418

000b4764 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b4764:	b508      	push	{r3, lr}
    ledBlanco();
   b4766:	f7ff ff17 	bl	b4598 <_Z9ledBlancov>
    delay(400);
   b476a:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b476e:	f005 fb53 	bl	b9e18 <delay>
    ledApagar();
   b4772:	f7ff feaf 	bl	b44d4 <_Z9ledApagarv>
    delay(200);
}
   b4776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b477a:	20c8      	movs	r0, #200	; 0xc8
   b477c:	f005 bb4c 	b.w	b9e18 <delay>

000b4780 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b4780:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4782:	b284      	uxth	r4, r0
   b4784:	4620      	mov	r0, r4
   b4786:	2101      	movs	r1, #1
   b4788:	f005 ff17 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto, HIGH);
   b478c:	4620      	mov	r0, r4
   b478e:	2101      	movs	r1, #1
   b4790:	f005 ff13 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4794:	1c60      	adds	r0, r4, #1
   b4796:	b280      	uxth	r0, r0
   b4798:	2101      	movs	r1, #1
   b479a:	9001      	str	r0, [sp, #4]
   b479c:	f005 ff0d 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b47a0:	9801      	ldr	r0, [sp, #4]
   b47a2:	2101      	movs	r1, #1
}
   b47a4:	b002      	add	sp, #8
   b47a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b47aa:	f005 bf06 	b.w	ba5ba <digitalWrite>

000b47ae <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b47ae:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b47b0:	b284      	uxth	r4, r0
   b47b2:	4620      	mov	r0, r4
   b47b4:	2100      	movs	r1, #0
   b47b6:	f005 ff00 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto, LOW);
   b47ba:	4620      	mov	r0, r4
   b47bc:	2100      	movs	r1, #0
   b47be:	f005 fefc 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b47c2:	1c60      	adds	r0, r4, #1
   b47c4:	b280      	uxth	r0, r0
   b47c6:	2100      	movs	r1, #0
   b47c8:	9001      	str	r0, [sp, #4]
   b47ca:	f005 fef6 	bl	ba5ba <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b47ce:	9801      	ldr	r0, [sp, #4]
   b47d0:	2100      	movs	r1, #0
}
   b47d2:	b002      	add	sp, #8
   b47d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b47d8:	f005 beef 	b.w	ba5ba <digitalWrite>

000b47dc <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b47dc:	b510      	push	{r4, lr}
   b47de:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b47e0:	f7ff ffce 	bl	b4780 <_Z9pitidoON1i>
    delay(100);
   b47e4:	2064      	movs	r0, #100	; 0x64
   b47e6:	f005 fb17 	bl	b9e18 <delay>
    pitidoOFF1(puerto);
   b47ea:	4620      	mov	r0, r4
   b47ec:	f7ff ffdf 	bl	b47ae <_Z10pitidoOFF1i>
    delay(100);
}
   b47f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b47f4:	2064      	movs	r0, #100	; 0x64
   b47f6:	f005 bb0f 	b.w	b9e18 <delay>
	...

000b47fc <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b47fc:	b508      	push	{r3, lr}
   b47fe:	2808      	cmp	r0, #8
   b4800:	d82a      	bhi.n	b4858 <_Z10activarLEDii+0x5c>
   b4802:	e8df f000 	tbb	[pc, r0]
   b4806:	0905      	.short	0x0905
   b4808:	1915110d 	.word	0x1915110d
   b480c:	211d      	.short	0x211d
   b480e:	25          	.byte	0x25
   b480f:	00          	.byte	0x00

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledVerde();
   b4814:	f7ff be7a 	b.w	b450c <_Z8ledVerdev>
}
   b4818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledRojo();
   b481c:	f7ff be68 	b.w	b44f0 <_Z7ledRojov>
}
   b4820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledAmarillo();
   b4824:	f7ff be8e 	b.w	b4544 <_Z11ledAmarillov>
}
   b4828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledMorado();
   b482c:	f7ff be98 	b.w	b4560 <_Z9ledMoradov>
}
   b4830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledAzul();
   b4834:	f7ff be78 	b.w	b4528 <_Z7ledAzulv>
}
   b4838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledNaranja();
   b483c:	f7ff be9e 	b.w	b457c <_Z10ledNaranjav>
}
   b4840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledBlink();
   b4844:	f7ff bf8e 	b.w	b4764 <_Z8ledBlinkv>
}
   b4848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledArcoiris();
   b484c:	f7ff beb2 	b.w	b45b4 <_Z11ledArcoirisv>
}
   b4850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b4854:	f7ff be3e 	b.w	b44d4 <_Z9ledApagarv>
        Serial.println("LedErrorOption");
   b4858:	f005 fc74 	bl	ba144 <_Z16_fetch_usbserialv>
}
   b485c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b4860:	4901      	ldr	r1, [pc, #4]	; (b4868 <_Z10activarLEDii+0x6c>)
   b4862:	f005 b98a 	b.w	b9b7a <_ZN5Print7printlnEPKc>
   b4866:	bf00      	nop
   b4868:	000bb428 	.word	0x000bb428

000b486c <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b486c:	b538      	push	{r3, r4, r5, lr}
   b486e:	460c      	mov	r4, r1
   b4870:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4872:	2101      	movs	r1, #1
   b4874:	b2a0      	uxth	r0, r4
   b4876:	f005 fe8f 	bl	ba598 <pinMode>

    switch (opcion)
   b487a:	b145      	cbz	r5, b488e <_Z15activarZumbadorii+0x22>
   b487c:	2d01      	cmp	r5, #1
   b487e:	d00b      	beq.n	b4898 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4880:	f005 fc60 	bl	ba144 <_Z16_fetch_usbserialv>
        break;
    }
}
   b4884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4888:	4906      	ldr	r1, [pc, #24]	; (b48a4 <_Z15activarZumbadorii+0x38>)
   b488a:	f005 b976 	b.w	b9b7a <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b488e:	4620      	mov	r0, r4
}
   b4890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b4894:	f7ff bf74 	b.w	b4780 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b4898:	4620      	mov	r0, r4
}
   b489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b489e:	f7ff bf9d 	b.w	b47dc <_Z12pitidoBlink1i>
   b48a2:	bf00      	nop
   b48a4:	000bb418 	.word	0x000bb418

000b48a8 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b48a8:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b48aa:	b908      	cbnz	r0, b48b0 <_Z14apagarActuadorii+0x8>
   b48ac:	f7ff be12 	b.w	b44d4 <_Z9ledApagarv>
   b48b0:	2100      	movs	r1, #0
   b48b2:	b298      	uxth	r0, r3
   b48b4:	f005 be81 	b.w	ba5ba <digitalWrite>

000b48b8 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b48b8:	4603      	mov	r3, r0
    if (id < 2)
   b48ba:	2b01      	cmp	r3, #1
{
   b48bc:	4608      	mov	r0, r1
   b48be:	4611      	mov	r1, r2
    if (id < 2)
   b48c0:	dc04      	bgt.n	b48cc <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b48c2:	b90b      	cbnz	r3, b48c8 <_Z15actuadorHandleriii+0x10>
   b48c4:	f7ff bf9a 	b.w	b47fc <_Z10activarLEDii>
   b48c8:	f7ff bfd0 	b.w	b486c <_Z15activarZumbadorii>
}
   b48cc:	4770      	bx	lr
	...

000b48d0 <_Z10borradoALLi>:
   switch (modo)
   b48d0:	2801      	cmp	r0, #1
   b48d2:	d00b      	beq.n	b48ec <_Z10borradoALLi+0x1c>
   b48d4:	2802      	cmp	r0, #2
   b48d6:	d00b      	beq.n	b48f0 <_Z10borradoALLi+0x20>
   b48d8:	b988      	cbnz	r0, b48fe <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b48da:	4b09      	ldr	r3, [pc, #36]	; (b4900 <_Z10borradoALLi+0x30>)
   b48dc:	6018      	str	r0, [r3, #0]
   b48de:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b48e2:	4b08      	ldr	r3, [pc, #32]	; (b4904 <_Z10borradoALLi+0x34>)
   b48e4:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b48e6:	4b08      	ldr	r3, [pc, #32]	; (b4908 <_Z10borradoALLi+0x38>)
   b48e8:	6018      	str	r0, [r3, #0]
      break;
   b48ea:	4770      	bx	lr
   b48ec:	f7ff bbec 	b.w	b40c8 <_Z10borradoALLi.part.0>
      posicion = 0;
   b48f0:	4a06      	ldr	r2, [pc, #24]	; (b490c <_Z10borradoALLi+0x3c>)
   b48f2:	2300      	movs	r3, #0
   b48f4:	6013      	str	r3, [r2, #0]
      bucle = false;
   b48f6:	4a06      	ldr	r2, [pc, #24]	; (b4910 <_Z10borradoALLi+0x40>)
   b48f8:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b48fa:	4a06      	ldr	r2, [pc, #24]	; (b4914 <_Z10borradoALLi+0x44>)
   b48fc:	6013      	str	r3, [r2, #0]
}
   b48fe:	4770      	bx	lr
   b4900:	2003c7f4 	.word	0x2003c7f4
   b4904:	2003d4f8 	.word	0x2003d4f8
   b4908:	2003d4f0 	.word	0x2003d4f0
   b490c:	2003d500 	.word	0x2003d500
   b4910:	2003cdcc 	.word	0x2003cdcc
   b4914:	2003d700 	.word	0x2003d700

000b4918 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b4918:	4a0e      	ldr	r2, [pc, #56]	; (b4954 <_Z10borradoPOPv+0x3c>)
   b491a:	6813      	ldr	r3, [r2, #0]
   b491c:	3b01      	subs	r3, #1
   b491e:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b4920:	4a0d      	ldr	r2, [pc, #52]	; (b4958 <_Z10borradoPOPv+0x40>)
   b4922:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4926:	1c8a      	adds	r2, r1, #2
   b4928:	4a0c      	ldr	r2, [pc, #48]	; (b495c <_Z10borradoPOPv+0x44>)
   b492a:	d107      	bne.n	b493c <_Z10borradoPOPv+0x24>
      bucle = true;
   b492c:	2101      	movs	r1, #1
   b492e:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b4930:	4a0b      	ldr	r2, [pc, #44]	; (b4960 <_Z10borradoPOPv+0x48>)
   b4932:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4936:	4b0b      	ldr	r3, [pc, #44]	; (b4964 <_Z10borradoPOPv+0x4c>)
   b4938:	601a      	str	r2, [r3, #0]
   b493a:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b493c:	3101      	adds	r1, #1
   b493e:	d102      	bne.n	b4946 <_Z10borradoPOPv+0x2e>
      bucle = false;
   b4940:	2300      	movs	r3, #0
   b4942:	7013      	strb	r3, [r2, #0]
   b4944:	4770      	bx	lr

   } else {
      if (bucle) {
   b4946:	7813      	ldrb	r3, [r2, #0]
   b4948:	b11b      	cbz	r3, b4952 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b494a:	4a06      	ldr	r2, [pc, #24]	; (b4964 <_Z10borradoPOPv+0x4c>)
   b494c:	6813      	ldr	r3, [r2, #0]
   b494e:	3b01      	subs	r3, #1
   b4950:	6013      	str	r3, [r2, #0]
      }
   }
}
   b4952:	4770      	bx	lr
   b4954:	2003d500 	.word	0x2003d500
   b4958:	2003d1d0 	.word	0x2003d1d0
   b495c:	2003cdcc 	.word	0x2003cdcc
   b4960:	2003ce88 	.word	0x2003ce88
   b4964:	2003d700 	.word	0x2003d700

000b4968 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b4968:	b508      	push	{r3, lr}
   b496a:	2807      	cmp	r0, #7
   b496c:	d816      	bhi.n	b499c <_Z15decodificarNOTAi+0x34>
   b496e:	e8df f000 	tbb	[pc, r0]
   b4972:	0704      	.short	0x0704
   b4974:	0f0d0b09 	.word	0x0f0d0b09
   b4978:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b497a:	4b0c      	ldr	r3, [pc, #48]	; (b49ac <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b497c:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b497e:	bd08      	pop	{r3, pc}
      return RE;
   b4980:	4b0b      	ldr	r3, [pc, #44]	; (b49b0 <_Z15decodificarNOTAi+0x48>)
   b4982:	e7fb      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return MI;
   b4984:	4b0b      	ldr	r3, [pc, #44]	; (b49b4 <_Z15decodificarNOTAi+0x4c>)
   b4986:	e7f9      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return FA;
   b4988:	4b0b      	ldr	r3, [pc, #44]	; (b49b8 <_Z15decodificarNOTAi+0x50>)
   b498a:	e7f7      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return SOL;
   b498c:	4b0b      	ldr	r3, [pc, #44]	; (b49bc <_Z15decodificarNOTAi+0x54>)
   b498e:	e7f5      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return LA;
   b4990:	4b0b      	ldr	r3, [pc, #44]	; (b49c0 <_Z15decodificarNOTAi+0x58>)
   b4992:	e7f3      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return SI;
   b4994:	4b0b      	ldr	r3, [pc, #44]	; (b49c4 <_Z15decodificarNOTAi+0x5c>)
   b4996:	e7f1      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      return DO_;
   b4998:	4b0b      	ldr	r3, [pc, #44]	; (b49c8 <_Z15decodificarNOTAi+0x60>)
   b499a:	e7ef      	b.n	b497c <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b499c:	f005 fbd2 	bl	ba144 <_Z16_fetch_usbserialv>
   b49a0:	490a      	ldr	r1, [pc, #40]	; (b49cc <_Z15decodificarNOTAi+0x64>)
   b49a2:	f005 f8ea 	bl	b9b7a <_ZN5Print7printlnEPKc>
      return -1;
   b49a6:	f04f 30ff 	mov.w	r0, #4294967295
   b49aa:	e7e8      	b.n	b497e <_Z15decodificarNOTAi+0x16>
   b49ac:	2003c71c 	.word	0x2003c71c
   b49b0:	2003c730 	.word	0x2003c730
   b49b4:	2003c72c 	.word	0x2003c72c
   b49b8:	2003c724 	.word	0x2003c724
   b49bc:	2003c738 	.word	0x2003c738
   b49c0:	2003c728 	.word	0x2003c728
   b49c4:	2003c734 	.word	0x2003c734
   b49c8:	2003c720 	.word	0x2003c720
   b49cc:	000bb437 	.word	0x000bb437

000b49d0 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b49d0:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b49d2:	b508      	push	{r3, lr}
   b49d4:	d803      	bhi.n	b49de <_Z15decodificarTIPOi+0xe>
   b49d6:	4b06      	ldr	r3, [pc, #24]	; (b49f0 <_Z15decodificarTIPOi+0x20>)
   b49d8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b49dc:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b49de:	f005 fbb1 	bl	ba144 <_Z16_fetch_usbserialv>
   b49e2:	4904      	ldr	r1, [pc, #16]	; (b49f4 <_Z15decodificarTIPOi+0x24>)
   b49e4:	f005 f8c9 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b49e8:	f04f 30ff 	mov.w	r0, #4294967295
   b49ec:	e7f6      	b.n	b49dc <_Z15decodificarTIPOi+0xc>
   b49ee:	bf00      	nop
   b49f0:	000bbe4c 	.word	0x000bbe4c
   b49f4:	000bb446 	.word	0x000bb446

000b49f8 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b49f8:	b510      	push	{r4, lr}
   b49fa:	4604      	mov	r4, r0
   b49fc:	2907      	cmp	r1, #7
   b49fe:	d819      	bhi.n	b4a34 <_Z19decodificarNOTA_msgi+0x3c>
   b4a00:	e8df f001 	tbb	[pc, r1]
   b4a04:	0e0c0a04 	.word	0x0e0c0a04
   b4a08:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b4a0c:	490a      	ldr	r1, [pc, #40]	; (b4a38 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b4a0e:	4620      	mov	r0, r4
   b4a10:	f004 ffe5 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4a14:	4620      	mov	r0, r4
   b4a16:	bd10      	pop	{r4, pc}
      return "RE";
   b4a18:	4908      	ldr	r1, [pc, #32]	; (b4a3c <_Z19decodificarNOTA_msgi+0x44>)
   b4a1a:	e7f8      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b4a1c:	4908      	ldr	r1, [pc, #32]	; (b4a40 <_Z19decodificarNOTA_msgi+0x48>)
   b4a1e:	e7f6      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b4a20:	4908      	ldr	r1, [pc, #32]	; (b4a44 <_Z19decodificarNOTA_msgi+0x4c>)
   b4a22:	e7f4      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b4a24:	4908      	ldr	r1, [pc, #32]	; (b4a48 <_Z19decodificarNOTA_msgi+0x50>)
   b4a26:	e7f2      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b4a28:	4908      	ldr	r1, [pc, #32]	; (b4a4c <_Z19decodificarNOTA_msgi+0x54>)
   b4a2a:	e7f0      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b4a2c:	4908      	ldr	r1, [pc, #32]	; (b4a50 <_Z19decodificarNOTA_msgi+0x58>)
   b4a2e:	e7ee      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b4a30:	4908      	ldr	r1, [pc, #32]	; (b4a54 <_Z19decodificarNOTA_msgi+0x5c>)
   b4a32:	e7ec      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b4a34:	4908      	ldr	r1, [pc, #32]	; (b4a58 <_Z19decodificarNOTA_msgi+0x60>)
   b4a36:	e7ea      	b.n	b4a0e <_Z19decodificarNOTA_msgi+0x16>
   b4a38:	000bb894 	.word	0x000bb894
   b4a3c:	000bb455 	.word	0x000bb455
   b4a40:	000bb458 	.word	0x000bb458
   b4a44:	000bb45b 	.word	0x000bb45b
   b4a48:	000bb45e 	.word	0x000bb45e
   b4a4c:	000bb462 	.word	0x000bb462
   b4a50:	000bb465 	.word	0x000bb465
   b4a54:	000bba52 	.word	0x000bba52
   b4a58:	000bb437 	.word	0x000bb437

000b4a5c <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b4a5c:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b4a5e:	b510      	push	{r4, lr}
   b4a60:	4604      	mov	r4, r0
   switch (tipo)
   b4a62:	d007      	beq.n	b4a74 <_Z19decodificarTIPO_msgi+0x18>
   b4a64:	2902      	cmp	r1, #2
   b4a66:	d007      	beq.n	b4a78 <_Z19decodificarTIPO_msgi+0x1c>
   b4a68:	b941      	cbnz	r1, b4a7c <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b4a6a:	4905      	ldr	r1, [pc, #20]	; (b4a80 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b4a6c:	f004 ffb7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4a70:	4620      	mov	r0, r4
   b4a72:	bd10      	pop	{r4, pc}
      return "_N";
   b4a74:	4903      	ldr	r1, [pc, #12]	; (b4a84 <_Z19decodificarTIPO_msgi+0x28>)
   b4a76:	e7f9      	b.n	b4a6c <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b4a78:	4903      	ldr	r1, [pc, #12]	; (b4a88 <_Z19decodificarTIPO_msgi+0x2c>)
   b4a7a:	e7f7      	b.n	b4a6c <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b4a7c:	4903      	ldr	r1, [pc, #12]	; (b4a8c <_Z19decodificarTIPO_msgi+0x30>)
   b4a7e:	e7f5      	b.n	b4a6c <_Z19decodificarTIPO_msgi+0x10>
   b4a80:	000bb468 	.word	0x000bb468
   b4a84:	000bb46b 	.word	0x000bb46b
   b4a88:	000bb46e 	.word	0x000bb46e
   b4a8c:	000bb446 	.word	0x000bb446

000b4a90 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b4a90:	b513      	push	{r0, r1, r4, lr}
   b4a92:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b4a94:	f7ff ff68 	bl	b4968 <_Z15decodificarNOTAi>
   b4a98:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	f7ff ff98 	bl	b49d0 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b4aa0:	9901      	ldr	r1, [sp, #4]
   b4aa2:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b4aa4:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b4aa6:	2006      	movs	r0, #6
   b4aa8:	f005 fb76 	bl	ba198 <tone>
   delay(duracion);
   b4aac:	4620      	mov	r0, r4
   b4aae:	f005 f9b3 	bl	b9e18 <delay>
   noTone(Zumbador_PIN);
   b4ab2:	2006      	movs	r0, #6
   b4ab4:	f005 fb87 	bl	ba1c6 <noTone>
   delay(30);
   b4ab8:	201e      	movs	r0, #30
}
   b4aba:	b002      	add	sp, #8
   b4abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b4ac0:	f005 b9aa 	b.w	b9e18 <delay>

000b4ac4 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4ac4:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4ac6:	4b0d      	ldr	r3, [pc, #52]	; (b4afc <_Z13isValidSensori+0x38>)
   b4ac8:	681a      	ldr	r2, [r3, #0]
   b4aca:	4b0d      	ldr	r3, [pc, #52]	; (b4b00 <_Z13isValidSensori+0x3c>)
   b4acc:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4ad0:	434a      	muls	r2, r1
   b4ad2:	5899      	ldr	r1, [r3, r2]
   b4ad4:	4413      	add	r3, r2
   b4ad6:	2200      	movs	r2, #0
   b4ad8:	4291      	cmp	r1, r2
   b4ada:	dd0d      	ble.n	b4af8 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b4adc:	685c      	ldr	r4, [r3, #4]
   b4ade:	4284      	cmp	r4, r0
   b4ae0:	f103 0310 	add.w	r3, r3, #16
   b4ae4:	d106      	bne.n	b4af4 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4ae6:	f005 fb2d 	bl	ba144 <_Z16_fetch_usbserialv>
   b4aea:	4906      	ldr	r1, [pc, #24]	; (b4b04 <_Z13isValidSensori+0x40>)
   b4aec:	f005 f845 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b4af0:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4af2:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4af4:	3201      	adds	r2, #1
   b4af6:	e7ef      	b.n	b4ad8 <_Z13isValidSensori+0x14>
  return true;
   b4af8:	2001      	movs	r0, #1
   b4afa:	e7fa      	b.n	b4af2 <_Z13isValidSensori+0x2e>
   b4afc:	2003c744 	.word	0x2003c744
   b4b00:	2003c7f4 	.word	0x2003c7f4
   b4b04:	000bb471 	.word	0x000bb471

000b4b08 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4b0a:	4b11      	ldr	r3, [pc, #68]	; (b4b50 <_Z11isNewSensori+0x48>)
   b4b0c:	4a11      	ldr	r2, [pc, #68]	; (b4b54 <_Z11isNewSensori+0x4c>)
   b4b0e:	681e      	ldr	r6, [r3, #0]
   b4b10:	4694      	mov	ip, r2
   b4b12:	2300      	movs	r3, #0
   b4b14:	429e      	cmp	r6, r3
   b4b16:	db17      	blt.n	b4b48 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4b18:	6817      	ldr	r7, [r2, #0]
   b4b1a:	4615      	mov	r5, r2
   b4b1c:	2100      	movs	r1, #0
   b4b1e:	428f      	cmp	r7, r1
   b4b20:	dd0e      	ble.n	b4b40 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4b22:	686c      	ldr	r4, [r5, #4]
   b4b24:	4284      	cmp	r4, r0
   b4b26:	f105 0510 	add.w	r5, r5, #16
   b4b2a:	d107      	bne.n	b4b3c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4b2c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4b30:	4353      	muls	r3, r2
   b4b32:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4b36:	4463      	add	r3, ip
   b4b38:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4b3c:	3101      	adds	r1, #1
   b4b3e:	e7ee      	b.n	b4b1e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4b40:	3301      	adds	r3, #1
   b4b42:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4b46:	e7e5      	b.n	b4b14 <_Z11isNewSensori+0xc>
  return -1;
   b4b48:	f04f 30ff 	mov.w	r0, #4294967295
   b4b4c:	e7f5      	b.n	b4b3a <_Z11isNewSensori+0x32>
   b4b4e:	bf00      	nop
   b4b50:	2003c744 	.word	0x2003c744
   b4b54:	2003c7f4 	.word	0x2003c7f4

000b4b58 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b4b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4b5c:	4d19      	ldr	r5, [pc, #100]	; (b4bc4 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b4b5e:	4b1a      	ldr	r3, [pc, #104]	; (b4bc8 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4b60:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4b64:	681f      	ldr	r7, [r3, #0]
{
   b4b66:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4b68:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4b6a:	2400      	movs	r4, #0
   b4b6c:	42a7      	cmp	r7, r4
   b4b6e:	db23      	blt.n	b4bb8 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b4b70:	d110      	bne.n	b4b94 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4b72:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b4b76:	461a      	mov	r2, r3
   b4b78:	2600      	movs	r6, #0
   b4b7a:	45b0      	cmp	r8, r6
   b4b7c:	dd0a      	ble.n	b4b94 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b4b7e:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b4b82:	4560      	cmp	r0, ip
   b4b84:	d103      	bne.n	b4b8e <_Z15isValidActuadorii+0x36>
   b4b86:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b4b8a:	4288      	cmp	r0, r1
   b4b8c:	d017      	beq.n	b4bbe <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4b8e:	3601      	adds	r6, #1
   b4b90:	3214      	adds	r2, #20
   b4b92:	e7f2      	b.n	b4b7a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b4b94:	2f01      	cmp	r7, #1
   b4b96:	d10b      	bne.n	b4bb0 <_Z15isValidActuadorii+0x58>
   b4b98:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4b9a:	2200      	movs	r2, #0
   b4b9c:	4596      	cmp	lr, r2
   b4b9e:	dd07      	ble.n	b4bb0 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b4ba0:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b4ba4:	4288      	cmp	r0, r1
   b4ba6:	f106 0614 	add.w	r6, r6, #20
   b4baa:	d008      	beq.n	b4bbe <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4bac:	3201      	adds	r2, #1
   b4bae:	e7f5      	b.n	b4b9c <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b4bb0:	3401      	adds	r4, #1
   b4bb2:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4bb6:	e7d9      	b.n	b4b6c <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b4bb8:	2001      	movs	r0, #1
}
   b4bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b4bbe:	2000      	movs	r0, #0
   b4bc0:	e7fb      	b.n	b4bba <_Z15isValidActuadorii+0x62>
   b4bc2:	bf00      	nop
   b4bc4:	2003c7f4 	.word	0x2003c7f4
   b4bc8:	2003c744 	.word	0x2003c744

000b4bcc <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b4bce:	4b13      	ldr	r3, [pc, #76]	; (b4c1c <_Z13isNewActuadori+0x50>)
   b4bd0:	4a13      	ldr	r2, [pc, #76]	; (b4c20 <_Z13isNewActuadori+0x54>)
   b4bd2:	681e      	ldr	r6, [r3, #0]
   b4bd4:	4694      	mov	ip, r2
   b4bd6:	2300      	movs	r3, #0
   b4bd8:	429e      	cmp	r6, r3
   b4bda:	db1b      	blt.n	b4c14 <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4bdc:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b4be0:	4615      	mov	r5, r2
   b4be2:	2100      	movs	r1, #0
   b4be4:	428f      	cmp	r7, r1
   b4be6:	dd11      	ble.n	b4c0c <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b4be8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b4bec:	4284      	cmp	r4, r0
   b4bee:	f105 0514 	add.w	r5, r5, #20
   b4bf2:	d109      	bne.n	b4c08 <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b4bf4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4bf8:	4353      	muls	r3, r2
   b4bfa:	2214      	movs	r2, #20
   b4bfc:	fb02 3301 	mla	r3, r2, r1, r3
   b4c00:	4463      	add	r3, ip
   b4c02:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b4c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4c08:	3101      	adds	r1, #1
   b4c0a:	e7eb      	b.n	b4be4 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b4c0c:	3301      	adds	r3, #1
   b4c0e:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4c12:	e7e1      	b.n	b4bd8 <_Z13isNewActuadori+0xc>
  return -1;
   b4c14:	f04f 30ff 	mov.w	r0, #4294967295
   b4c18:	e7f5      	b.n	b4c06 <_Z13isNewActuadori+0x3a>
   b4c1a:	bf00      	nop
   b4c1c:	2003c744 	.word	0x2003c744
   b4c20:	2003c7f4 	.word	0x2003c7f4

000b4c24 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b4c24:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b4c26:	4b0c      	ldr	r3, [pc, #48]	; (b4c58 <_Z14isActuadorDualii+0x34>)
   b4c28:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4c2c:	fb02 3101 	mla	r1, r2, r1, r3
   b4c30:	2200      	movs	r2, #0
   b4c32:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b4c36:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b4c38:	4294      	cmp	r4, r2
   b4c3a:	dd08      	ble.n	b4c4e <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b4c3c:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b4c40:	4285      	cmp	r5, r0
   b4c42:	d101      	bne.n	b4c48 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b4c44:	b92b      	cbnz	r3, b4c52 <_Z14isActuadorDualii+0x2e>
   b4c46:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b4c48:	3201      	adds	r2, #1
   b4c4a:	3114      	adds	r1, #20
   b4c4c:	e7f4      	b.n	b4c38 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b4c4e:	2000      	movs	r0, #0
}
   b4c50:	bd30      	pop	{r4, r5, pc}
      return true;
   b4c52:	4618      	mov	r0, r3
   b4c54:	e7fc      	b.n	b4c50 <_Z14isActuadorDualii+0x2c>
   b4c56:	bf00      	nop
   b4c58:	2003c7f4 	.word	0x2003c7f4

000b4c5c <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b4c5c:	b084      	sub	sp, #16
   b4c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c60:	ac06      	add	r4, sp, #24
   b4c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b4c66:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b4c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4c6c:	f7ff fbe6 	bl	b443c <_Z10leerSensoriii>
   b4c70:	ad06      	add	r5, sp, #24
   b4c72:	4604      	mov	r4, r0
   
   for (int i = 1; i < bloque.numSensores; i++)
   b4c74:	afbc      	add	r7, sp, #752	; 0x2f0
   b4c76:	2601      	movs	r6, #1
   b4c78:	9b06      	ldr	r3, [sp, #24]
   b4c7a:	42b3      	cmp	r3, r6
   b4c7c:	dd12      	ble.n	b4ca4 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4c7e:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b4c82:	6a2a      	ldr	r2, [r5, #32]
   b4c84:	f7ff fbda 	bl	b443c <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b4c88:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4c8c:	b133      	cbz	r3, b4c9c <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b4c8e:	2c00      	cmp	r4, #0
   b4c90:	bf08      	it	eq
   b4c92:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b4c94:	3601      	adds	r6, #1
   b4c96:	3510      	adds	r5, #16
   b4c98:	4604      	mov	r4, r0
   b4c9a:	e7ed      	b.n	b4c78 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b4c9c:	2c00      	cmp	r4, #0
   b4c9e:	bf18      	it	ne
   b4ca0:	4620      	movne	r0, r4
   b4ca2:	e7f7      	b.n	b4c94 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b4caa:	b004      	add	sp, #16
   b4cac:	4770      	bx	lr
	...

000b4cb0 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b4cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4cb4:	4c16      	ldr	r4, [pc, #88]	; (b4d10 <_Z18ejecutarEvaluacionbi+0x60>)
   b4cb6:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b4cba:	fb03 4401 	mla	r4, r3, r1, r4
   b4cbe:	4607      	mov	r7, r0
   b4cc0:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b4cc2:	2600      	movs	r6, #0
   b4cc4:	46a1      	mov	r9, r4
   b4cc6:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b4cca:	42b3      	cmp	r3, r6
   b4ccc:	dd1c      	ble.n	b4d08 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b4cce:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b4cd2:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b4cd6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b4cda:	42bb      	cmp	r3, r7
   b4cdc:	d107      	bne.n	b4cee <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b4cde:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b4ce2:	4640      	mov	r0, r8
   b4ce4:	f7ff fde8 	bl	b48b8 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b4ce8:	3601      	adds	r6, #1
   b4cea:	3414      	adds	r4, #20
   b4cec:	e7eb      	b.n	b4cc6 <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b4cee:	4629      	mov	r1, r5
   b4cf0:	4640      	mov	r0, r8
   b4cf2:	9201      	str	r2, [sp, #4]
   b4cf4:	f7ff ff96 	bl	b4c24 <_Z14isActuadorDualii>
   b4cf8:	9a01      	ldr	r2, [sp, #4]
   b4cfa:	2800      	cmp	r0, #0
   b4cfc:	d1f4      	bne.n	b4ce8 <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b4cfe:	4611      	mov	r1, r2
   b4d00:	4640      	mov	r0, r8
   b4d02:	f7ff fdd1 	bl	b48a8 <_Z14apagarActuadorii>
   b4d06:	e7ef      	b.n	b4ce8 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b4d08:	b003      	add	sp, #12
   b4d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4d0e:	bf00      	nop
   b4d10:	2003c7f4 	.word	0x2003c7f4

000b4d14 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b4d14:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b4d16:	7803      	ldrb	r3, [r0, #0]
   b4d18:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b4d1a:	bf0c      	ite	eq
   b4d1c:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b4d1e:	2200      	movne	r2, #0
   int i = 0;
   b4d20:	4613      	mov	r3, r2
   b4d22:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b4d24:	240a      	movs	r4, #10
      i++;
   b4d26:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b4d28:	f813 1b01 	ldrb.w	r1, [r3], #1
   b4d2c:	3930      	subs	r1, #48	; 0x30
   b4d2e:	b2cd      	uxtb	r5, r1
   b4d30:	2d09      	cmp	r5, #9
   b4d32:	d802      	bhi.n	b4d3a <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b4d34:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b4d38:	e7f6      	b.n	b4d28 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b4d3a:	b102      	cbz	r2, b4d3e <_Z4atoiPc+0x2a>
      num = -1 * num;
   b4d3c:	4240      	negs	r0, r0
   return num;
}
   b4d3e:	bd30      	pop	{r4, r5, pc}

000b4d40 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b4d40:	b538      	push	{r3, r4, r5, lr}
   b4d42:	4614      	mov	r4, r2
   b4d44:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b4d46:	f006 fa87 	bl	bb258 <strtok>
   int j = 0;
   b4d4a:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b4d4c:	b140      	cbz	r0, b4d60 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4d4e:	f7ff ffe1 	bl	b4d14 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4d52:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4d54:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b4d58:	2000      	movs	r0, #0
   b4d5a:	f006 fa7d 	bl	bb258 <strtok>
   while (ptr != NULL)
   b4d5e:	e7f5      	b.n	b4d4c <_Z5splitPcS_Pi+0xc>
   }
}
   b4d60:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4d64 <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d66:	f88d 2007 	strb.w	r2, [sp, #7]
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4d6a:	f10d 0307 	add.w	r3, sp, #7
   b4d6e:	460a      	mov	r2, r1
   b4d70:	4601      	mov	r1, r0
   b4d72:	480d      	ldr	r0, [pc, #52]	; (b4da8 <_Z17readDataFromBlockhPhh+0x44>)
   b4d74:	4d0d      	ldr	r5, [pc, #52]	; (b4dac <_Z17readDataFromBlockhPhh+0x48>)
   b4d76:	f003 fa3b 	bl	b81f0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b4d7a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4d7c:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4d7e:	d010      	beq.n	b4da2 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4d80:	f005 f9e0 	bl	ba144 <_Z16_fetch_usbserialv>
   b4d84:	490a      	ldr	r1, [pc, #40]	; (b4db0 <_Z17readDataFromBlockhPhh+0x4c>)
   b4d86:	f004 fee5 	bl	b9b54 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b4d8a:	f005 f9db 	bl	ba144 <_Z16_fetch_usbserialv>
   b4d8e:	7829      	ldrb	r1, [r5, #0]
   b4d90:	4604      	mov	r4, r0
   b4d92:	4805      	ldr	r0, [pc, #20]	; (b4da8 <_Z17readDataFromBlockhPhh+0x44>)
   b4d94:	f002 ff80 	bl	b7c98 <_ZN7MFRC52217GetStatusCodeNameEh>
   b4d98:	4601      	mov	r1, r0
   b4d9a:	4620      	mov	r0, r4
   b4d9c:	f004 feed 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b4da0:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b4da2:	b003      	add	sp, #12
   b4da4:	bd30      	pop	{r4, r5, pc}
   b4da6:	bf00      	nop
   b4da8:	2003d1c0 	.word	0x2003d1c0
   b4dac:	2003d6fc 	.word	0x2003d6fc
   b4db0:	000bb4a1 	.word	0x000bb4a1

000b4db4 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4db6:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4db8:	4d1e      	ldr	r5, [pc, #120]	; (b4e34 <_Z8getTagIDPi+0x80>)
   b4dba:	4a1f      	ldr	r2, [pc, #124]	; (b4e38 <_Z8getTagIDPi+0x84>)
   b4dbc:	9500      	str	r5, [sp, #0]
   b4dbe:	4b1f      	ldr	r3, [pc, #124]	; (b4e3c <_Z8getTagIDPi+0x88>)
   b4dc0:	7812      	ldrb	r2, [r2, #0]
   b4dc2:	4f1f      	ldr	r7, [pc, #124]	; (b4e40 <_Z8getTagIDPi+0x8c>)
{
   b4dc4:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4dc6:	2160      	movs	r1, #96	; 0x60
   b4dc8:	4628      	mov	r0, r5
   b4dca:	f003 fa32 	bl	b8232 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b4dce:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4dd0:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b4dd2:	d00f      	beq.n	b4df4 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4dd4:	f005 f9b6 	bl	ba144 <_Z16_fetch_usbserialv>
   b4dd8:	491a      	ldr	r1, [pc, #104]	; (b4e44 <_Z8getTagIDPi+0x90>)
   b4dda:	f004 febb 	bl	b9b54 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b4dde:	f005 f9b1 	bl	ba144 <_Z16_fetch_usbserialv>
   b4de2:	7839      	ldrb	r1, [r7, #0]
   b4de4:	4604      	mov	r4, r0
   b4de6:	4628      	mov	r0, r5
   b4de8:	f002 ff56 	bl	b7c98 <_ZN7MFRC52217GetStatusCodeNameEh>
   b4dec:	4601      	mov	r1, r0
   b4dee:	4620      	mov	r0, r4
   b4df0:	f004 fec3 	bl	b9b7a <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b4df4:	4b14      	ldr	r3, [pc, #80]	; (b4e48 <_Z8getTagIDPi+0x94>)
   b4df6:	2212      	movs	r2, #18
   b4df8:	7818      	ldrb	r0, [r3, #0]
   b4dfa:	a907      	add	r1, sp, #28
   b4dfc:	f7ff ffb2 	bl	b4d64 <_Z17readDataFromBlockhPhh>
   b4e00:	b1b0      	cbz	r0, b4e30 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b4e02:	ac07      	add	r4, sp, #28
   b4e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e06:	ad03      	add	r5, sp, #12
   b4e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4e0a:	6823      	ldr	r3, [r4, #0]
   b4e0c:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b4e0e:	f005 f999 	bl	ba144 <_Z16_fetch_usbserialv>
   b4e12:	490e      	ldr	r1, [pc, #56]	; (b4e4c <_Z8getTagIDPi+0x98>)
   b4e14:	aa03      	add	r2, sp, #12
   b4e16:	f7ff f983 	bl	b4120 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b4e1a:	490d      	ldr	r1, [pc, #52]	; (b4e50 <_Z8getTagIDPi+0x9c>)
   b4e1c:	4632      	mov	r2, r6
   b4e1e:	a803      	add	r0, sp, #12
   b4e20:	f7ff ff8e 	bl	b4d40 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b4e24:	4803      	ldr	r0, [pc, #12]	; (b4e34 <_Z8getTagIDPi+0x80>)
   b4e26:	f003 f9be 	bl	b81a6 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b4e2a:	4802      	ldr	r0, [pc, #8]	; (b4e34 <_Z8getTagIDPi+0x80>)
   b4e2c:	f003 f81b 	bl	b7e66 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b4e30:	b00d      	add	sp, #52	; 0x34
   b4e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4e34:	2003d1c0 	.word	0x2003d1c0
   b4e38:	2003c764 	.word	0x2003c764
   b4e3c:	2003d1b1 	.word	0x2003d1b1
   b4e40:	2003d6fc 	.word	0x2003d6fc
   b4e44:	000bb4b8 	.word	0x000bb4b8
   b4e48:	2003c73c 	.word	0x2003c73c
   b4e4c:	000bb4d4 	.word	0x000bb4d4
   b4e50:	2003c73d 	.word	0x2003c73d

000b4e54 <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b4e54:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b4e56:	b940      	cbnz	r0, b4e6a <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b4e58:	4b32      	ldr	r3, [pc, #200]	; (b4f24 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b4e5a:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b4e5c:	2c05      	cmp	r4, #5
   b4e5e:	d858      	bhi.n	b4f12 <_Z13asignarPuertoi+0xbe>
   b4e60:	e8df f004 	tbb	[pc, r4]
   b4e64:	32221305 	.word	0x32221305
   b4e68:	483d      	.short	0x483d
      option = puertoDigital;
   b4e6a:	4b2f      	ldr	r3, [pc, #188]	; (b4f28 <_Z13asignarPuertoi+0xd4>)
   b4e6c:	e7f5      	b.n	b4e5a <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4e6e:	f005 f969 	bl	ba144 <_Z16_fetch_usbserialv>
   b4e72:	492e      	ldr	r1, [pc, #184]	; (b4f2c <_Z13asignarPuertoi+0xd8>)
   b4e74:	f004 fe6e 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4e78:	4a2a      	ldr	r2, [pc, #168]	; (b4f24 <_Z13asignarPuertoi+0xd0>)
   b4e7a:	6813      	ldr	r3, [r2, #0]
   b4e7c:	3301      	adds	r3, #1
   b4e7e:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b4e80:	4a2b      	ldr	r2, [pc, #172]	; (b4f30 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b4e82:	6813      	ldr	r3, [r2, #0]
   b4e84:	3301      	adds	r3, #1
   b4e86:	6013      	str	r3, [r2, #0]
      return 4;
   b4e88:	e01c      	b.n	b4ec4 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b4e8a:	f005 f95b 	bl	ba144 <_Z16_fetch_usbserialv>
   b4e8e:	4929      	ldr	r1, [pc, #164]	; (b4f34 <_Z13asignarPuertoi+0xe0>)
   b4e90:	f004 fe60 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4e94:	4a23      	ldr	r2, [pc, #140]	; (b4f24 <_Z13asignarPuertoi+0xd0>)
   b4e96:	6813      	ldr	r3, [r2, #0]
   b4e98:	3301      	adds	r3, #1
   b4e9a:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b4e9c:	4a24      	ldr	r2, [pc, #144]	; (b4f30 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b4e9e:	6813      	ldr	r3, [r2, #0]
   b4ea0:	3301      	adds	r3, #1
   b4ea2:	6013      	str	r3, [r2, #0]
      return 2;
   b4ea4:	2402      	movs	r4, #2
   b4ea6:	e00d      	b.n	b4ec4 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b4ea8:	f005 f94c 	bl	ba144 <_Z16_fetch_usbserialv>
   b4eac:	4922      	ldr	r1, [pc, #136]	; (b4f38 <_Z13asignarPuertoi+0xe4>)
   b4eae:	f004 fe51 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b4eb2:	4b1c      	ldr	r3, [pc, #112]	; (b4f24 <_Z13asignarPuertoi+0xd0>)
   b4eb4:	f04f 32ff 	mov.w	r2, #4294967295
   b4eb8:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b4eba:	4a1d      	ldr	r2, [pc, #116]	; (b4f30 <_Z13asignarPuertoi+0xdc>)
   b4ebc:	6813      	ldr	r3, [r2, #0]
   b4ebe:	3301      	adds	r3, #1
   b4ec0:	6013      	str	r3, [r2, #0]
      return 4;
   b4ec2:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4ec8:	f005 f93c 	bl	ba144 <_Z16_fetch_usbserialv>
   b4ecc:	491b      	ldr	r1, [pc, #108]	; (b4f3c <_Z13asignarPuertoi+0xe8>)
   b4ece:	f004 fe41 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoDigital++;
   b4ed2:	4a15      	ldr	r2, [pc, #84]	; (b4f28 <_Z13asignarPuertoi+0xd4>)
   b4ed4:	6813      	ldr	r3, [r2, #0]
   b4ed6:	3301      	adds	r3, #1
   b4ed8:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b4eda:	4a19      	ldr	r2, [pc, #100]	; (b4f40 <_Z13asignarPuertoi+0xec>)
   b4edc:	e7df      	b.n	b4e9e <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b4ede:	f005 f931 	bl	ba144 <_Z16_fetch_usbserialv>
   b4ee2:	4918      	ldr	r1, [pc, #96]	; (b4f44 <_Z13asignarPuertoi+0xf0>)
   b4ee4:	f004 fe36 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoDigital++;
   b4ee8:	4a0f      	ldr	r2, [pc, #60]	; (b4f28 <_Z13asignarPuertoi+0xd4>)
   b4eea:	6813      	ldr	r3, [r2, #0]
   b4eec:	3301      	adds	r3, #1
   b4eee:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b4ef0:	4a13      	ldr	r2, [pc, #76]	; (b4f40 <_Z13asignarPuertoi+0xec>)
   b4ef2:	e7c6      	b.n	b4e82 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b4ef4:	f005 f926 	bl	ba144 <_Z16_fetch_usbserialv>
   b4ef8:	4913      	ldr	r1, [pc, #76]	; (b4f48 <_Z13asignarPuertoi+0xf4>)
   b4efa:	f004 fe2b 	bl	b9b54 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b4efe:	4b0a      	ldr	r3, [pc, #40]	; (b4f28 <_Z13asignarPuertoi+0xd4>)
   b4f00:	f04f 32ff 	mov.w	r2, #4294967295
   b4f04:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b4f06:	4a0e      	ldr	r2, [pc, #56]	; (b4f40 <_Z13asignarPuertoi+0xec>)
   b4f08:	6813      	ldr	r3, [r2, #0]
   b4f0a:	3301      	adds	r3, #1
   b4f0c:	6013      	str	r3, [r2, #0]
      return 6;
   b4f0e:	2406      	movs	r4, #6
   b4f10:	e7d8      	b.n	b4ec4 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b4f12:	f005 f917 	bl	ba144 <_Z16_fetch_usbserialv>
   b4f16:	490d      	ldr	r1, [pc, #52]	; (b4f4c <_Z13asignarPuertoi+0xf8>)
   b4f18:	f004 fe1c 	bl	b9b54 <_ZN5Print5printEPKc>
      return -1;
   b4f1c:	f04f 34ff 	mov.w	r4, #4294967295
   b4f20:	e7d0      	b.n	b4ec4 <_Z13asignarPuertoi+0x70>
   b4f22:	bf00      	nop
   b4f24:	2003d508 	.word	0x2003d508
   b4f28:	2003c748 	.word	0x2003c748
   b4f2c:	000bb4e0 	.word	0x000bb4e0
   b4f30:	2003d50c 	.word	0x2003d50c
   b4f34:	000bb4f7 	.word	0x000bb4f7
   b4f38:	000bb50e 	.word	0x000bb50e
   b4f3c:	000bb525 	.word	0x000bb525
   b4f40:	2003d510 	.word	0x2003d510
   b4f44:	000bb53c 	.word	0x000bb53c
   b4f48:	000bb553 	.word	0x000bb553
   b4f4c:	000bb56a 	.word	0x000bb56a

000b4f50 <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b4f50:	b570      	push	{r4, r5, r6, lr}
   b4f52:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4f54:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4f56:	a807      	add	r0, sp, #28
   b4f58:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b4f5c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b4f60:	f005 f800 	bl	b9f64 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4f64:	4843      	ldr	r0, [pc, #268]	; (b5074 <setup+0x124>)
   b4f66:	4623      	mov	r3, r4
   b4f68:	4622      	mov	r2, r4
   b4f6a:	4621      	mov	r1, r4
   b4f6c:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f6e:	4c42      	ldr	r4, [pc, #264]	; (b5078 <setup+0x128>)
   b4f70:	f004 fb14 	bl	b959c <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4f74:	f005 f8e6 	bl	ba144 <_Z16_fetch_usbserialv>
   b4f78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f7c:	f005 f8d6 	bl	ba12c <_ZN9USBSerial5beginEl>
   b4f80:	7821      	ldrb	r1, [r4, #0]
   b4f82:	f3bf 8f5b 	dmb	ish
   b4f86:	f011 0101 	ands.w	r1, r1, #1
   b4f8a:	d10b      	bne.n	b4fa4 <setup+0x54>
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	9105      	str	r1, [sp, #20]
   b4f90:	f7ff f892 	bl	b40b8 <__cxa_guard_acquire>
   b4f94:	9905      	ldr	r1, [sp, #20]
   b4f96:	b128      	cbz	r0, b4fa4 <setup+0x54>
   b4f98:	4838      	ldr	r0, [pc, #224]	; (b507c <setup+0x12c>)
   b4f9a:	f004 fbcb 	bl	b9734 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	f7ff f88f 	bl	b40c2 <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4fa4:	4835      	ldr	r0, [pc, #212]	; (b507c <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b4fa6:	4c36      	ldr	r4, [pc, #216]	; (b5080 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4fa8:	2501      	movs	r5, #1
   b4faa:	f004 fbcd 	bl	b9748 <_ZN8SPIClass5beginEv>
   b4fae:	462b      	mov	r3, r5
   b4fb0:	223c      	movs	r2, #60	; 0x3c
   b4fb2:	2102      	movs	r1, #2
   b4fb4:	4833      	ldr	r0, [pc, #204]	; (b5084 <setup+0x134>)
   b4fb6:	9500      	str	r5, [sp, #0]
   b4fb8:	f003 fd24 	bl	b8a04 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b4fbc:	4831      	ldr	r0, [pc, #196]	; (b5084 <setup+0x134>)
   b4fbe:	f003 fd13 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b4fc2:	4830      	ldr	r0, [pc, #192]	; (b5084 <setup+0x134>)
   b4fc4:	f003 ff78 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b4fc8:	482f      	ldr	r0, [pc, #188]	; (b5088 <setup+0x138>)
   b4fca:	f002 ffb0 	bl	b7f2e <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b4fce:	4a2f      	ldr	r2, [pc, #188]	; (b508c <setup+0x13c>)
   b4fd0:	21ff      	movs	r1, #255	; 0xff
   b4fd2:	7011      	strb	r1, [r2, #0]
   b4fd4:	7051      	strb	r1, [r2, #1]
   b4fd6:	7091      	strb	r1, [r2, #2]
   b4fd8:	70d1      	strb	r1, [r2, #3]
   b4fda:	7111      	strb	r1, [r2, #4]
   b4fdc:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b4fde:	f005 fb71 	bl	ba6c4 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b4fe2:	2000      	movs	r0, #0
   b4fe4:	f004 f946 	bl	b9274 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b4fe8:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b4fea:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b4fec:	d10d      	bne.n	b500a <setup+0xba>
    
    Serial.println("EEPROM empty");
   b4fee:	f005 f8a9 	bl	ba144 <_Z16_fetch_usbserialv>
    MODE = 0;
   b4ff2:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b4ff4:	4926      	ldr	r1, [pc, #152]	; (b5090 <setup+0x140>)
   b4ff6:	f004 fdc0 	bl	b9b7a <_ZN5Print7printlnEPKc>
    MODE = 0;
   b4ffa:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b4ffc:	f005 fb62 	bl	ba6c4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5000:	462a      	mov	r2, r5
   b5002:	4621      	mov	r1, r4
   b5004:	4630      	mov	r0, r6
   b5006:	f004 f93d 	bl	b9284 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b500a:	7824      	ldrb	r4, [r4, #0]
   b500c:	bb54      	cbnz	r4, b5064 <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b500e:	2101      	movs	r1, #1
   b5010:	2006      	movs	r0, #6
   b5012:	f005 fac1 	bl	ba598 <pinMode>
    ledObject.init();
   b5016:	481f      	ldr	r0, [pc, #124]	; (b5094 <setup+0x144>)
   b5018:	f004 f89a 	bl	b9150 <_ZN12ChainableLED4initEv>
    init = true;
   b501c:	4b1e      	ldr	r3, [pc, #120]	; (b5098 <setup+0x148>)
   b501e:	2201      	movs	r2, #1
   b5020:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b5022:	4a1e      	ldr	r2, [pc, #120]	; (b509c <setup+0x14c>)
   b5024:	6813      	ldr	r3, [r2, #0]
   b5026:	3301      	adds	r3, #1
   b5028:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b502a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b502e:	4a1c      	ldr	r2, [pc, #112]	; (b50a0 <setup+0x150>)
   b5030:	434b      	muls	r3, r1
   b5032:	18d1      	adds	r1, r2, r3
   b5034:	50d4      	str	r4, [r2, r3]
   b5036:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b503a:	2340      	movs	r3, #64	; 0x40
   b503c:	2201      	movs	r2, #1
   b503e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5042:	2200      	movs	r2, #0
   b5044:	2380      	movs	r3, #128	; 0x80
   b5046:	4611      	mov	r1, r2
   b5048:	9300      	str	r3, [sp, #0]
   b504a:	480e      	ldr	r0, [pc, #56]	; (b5084 <setup+0x134>)
   b504c:	4b15      	ldr	r3, [pc, #84]	; (b50a4 <setup+0x154>)
   b504e:	f002 fbc3 	bl	b77d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b5052:	480c      	ldr	r0, [pc, #48]	; (b5084 <setup+0x134>)
   b5054:	f003 ff30 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5058:	f004 f8fc 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b505c:	4b12      	ldr	r3, [pc, #72]	; (b50a8 <setup+0x158>)
   b505e:	6018      	str	r0, [r3, #0]
  
}
   b5060:	b00a      	add	sp, #40	; 0x28
   b5062:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b5064:	2c01      	cmp	r4, #1
   b5066:	d0e8      	beq.n	b503a <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b5068:	2101      	movs	r1, #1
   b506a:	2006      	movs	r0, #6
   b506c:	f005 fa94 	bl	ba598 <pinMode>
   b5070:	e7e3      	b.n	b503a <setup+0xea>
   b5072:	bf00      	nop
   b5074:	2003e710 	.word	0x2003e710
   b5078:	2003c7d4 	.word	0x2003c7d4
   b507c:	2003c7d8 	.word	0x2003c7d8
   b5080:	2003c7e2 	.word	0x2003c7e2
   b5084:	2003ce18 	.word	0x2003ce18
   b5088:	2003d1c0 	.word	0x2003d1c0
   b508c:	2003d1b1 	.word	0x2003d1b1
   b5090:	000bb592 	.word	0x000bb592
   b5094:	2003d1b8 	.word	0x2003d1b8
   b5098:	2003d1b0 	.word	0x2003d1b0
   b509c:	2003c744 	.word	0x2003c744
   b50a0:	2003c7f4 	.word	0x2003c7f4
   b50a4:	000bbe52 	.word	0x000bbe52
   b50a8:	2003d6f8 	.word	0x2003d6f8

000b50ac <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b50ac:	2305      	movs	r3, #5
    if (play) {
      reproducir();
      play = false;
    }
  }
   b50ae:	b570      	push	{r4, r5, r6, lr}
   b50b0:	461a      	mov	r2, r3
   b50b2:	2104      	movs	r1, #4
   b50b4:	48a9      	ldr	r0, [pc, #676]	; (b535c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
                        "0#1#1#1#0","0#1#1#1#1","0#1#1#0#0","0#1#1#0#1","0#1#1#0#3","0#1#1#0#4","0#1#1#0#5"};
   b50b6:	4daa      	ldr	r5, [pc, #680]	; (b5360 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b50b8:	4eaa      	ldr	r6, [pc, #680]	; (b5364 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b50ba:	f003 ff97 	bl	b8fec <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b50be:	4baa      	ldr	r3, [pc, #680]	; (b5368 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
Adafruit_SSD1306 display(-1);
   b50c0:	48aa      	ldr	r0, [pc, #680]	; (b536c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b50c2:	2400      	movs	r4, #0
   b50c4:	601c      	str	r4, [r3, #0]
   b50c6:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b50ca:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b50ce:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b50d2:	f04f 31ff 	mov.w	r1, #4294967295
   b50d6:	f003 fb93 	bl	b8800 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b50da:	49a5      	ldr	r1, [pc, #660]	; (b5370 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b50dc:	48a5      	ldr	r0, [pc, #660]	; (b5374 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b50de:	f004 fc7e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b50e2:	49a3      	ldr	r1, [pc, #652]	; (b5370 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b50e4:	48a4      	ldr	r0, [pc, #656]	; (b5378 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b50e6:	f004 fc7a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
                        "0#1#1#1#0","0#1#1#1#1","0#1#1#0#0","0#1#1#0#1","0#1#1#0#2","0#1#1#0#3","0#1#1#0#4","0#1#1#0#5" };
   b50ea:	49a4      	ldr	r1, [pc, #656]	; (b537c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b50ec:	48a4      	ldr	r0, [pc, #656]	; (b5380 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b50ee:	f004 fc76 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b50f2:	49a4      	ldr	r1, [pc, #656]	; (b5384 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b50f4:	48a4      	ldr	r0, [pc, #656]	; (b5388 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b50f6:	f004 fc72 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b50fa:	49a4      	ldr	r1, [pc, #656]	; (b538c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b50fc:	48a4      	ldr	r0, [pc, #656]	; (b5390 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b50fe:	f004 fc6e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5102:	49a4      	ldr	r1, [pc, #656]	; (b5394 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b5104:	48a4      	ldr	r0, [pc, #656]	; (b5398 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b5106:	f004 fc6a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b510a:	49a4      	ldr	r1, [pc, #656]	; (b539c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b510c:	48a4      	ldr	r0, [pc, #656]	; (b53a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b510e:	f004 fc66 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5112:	49a4      	ldr	r1, [pc, #656]	; (b53a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b5114:	48a4      	ldr	r0, [pc, #656]	; (b53a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b5116:	f004 fc62 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b511a:	49a4      	ldr	r1, [pc, #656]	; (b53ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b511c:	48a4      	ldr	r0, [pc, #656]	; (b53b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b511e:	f004 fc5e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5122:	49a4      	ldr	r1, [pc, #656]	; (b53b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b5124:	48a4      	ldr	r0, [pc, #656]	; (b53b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b5126:	f004 fc5a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b512a:	49a4      	ldr	r1, [pc, #656]	; (b53bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b512c:	48a4      	ldr	r0, [pc, #656]	; (b53c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b512e:	f004 fc56 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5132:	49a4      	ldr	r1, [pc, #656]	; (b53c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b5134:	48a4      	ldr	r0, [pc, #656]	; (b53c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b5136:	f004 fc52 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b513a:	49a4      	ldr	r1, [pc, #656]	; (b53cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b513c:	48a4      	ldr	r0, [pc, #656]	; (b53d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b513e:	f004 fc4e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5142:	49a4      	ldr	r1, [pc, #656]	; (b53d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b5144:	48a4      	ldr	r0, [pc, #656]	; (b53d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b5146:	f004 fc4a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b514a:	49a4      	ldr	r1, [pc, #656]	; (b53dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b514c:	48a4      	ldr	r0, [pc, #656]	; (b53e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b514e:	f004 fc46 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5152:	49a4      	ldr	r1, [pc, #656]	; (b53e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b5154:	48a4      	ldr	r0, [pc, #656]	; (b53e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b5156:	f004 fc42 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b515a:	49a4      	ldr	r1, [pc, #656]	; (b53ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b515c:	48a4      	ldr	r0, [pc, #656]	; (b53f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b515e:	f004 fc3e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5162:	49a4      	ldr	r1, [pc, #656]	; (b53f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b5164:	48a4      	ldr	r0, [pc, #656]	; (b53f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b5166:	f004 fc3a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b516a:	49a4      	ldr	r1, [pc, #656]	; (b53fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b516c:	48a4      	ldr	r0, [pc, #656]	; (b5400 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b516e:	f004 fc36 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5172:	49a4      	ldr	r1, [pc, #656]	; (b5404 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b5174:	48a4      	ldr	r0, [pc, #656]	; (b5408 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b5176:	f004 fc32 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b517a:	49a4      	ldr	r1, [pc, #656]	; (b540c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b517c:	48a4      	ldr	r0, [pc, #656]	; (b5410 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b517e:	f004 fc2e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5182:	49a4      	ldr	r1, [pc, #656]	; (b5414 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b5184:	48a4      	ldr	r0, [pc, #656]	; (b5418 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b5186:	f004 fc2a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b518a:	49a4      	ldr	r1, [pc, #656]	; (b541c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b518c:	48a4      	ldr	r0, [pc, #656]	; (b5420 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b518e:	f004 fc26 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5192:	49a4      	ldr	r1, [pc, #656]	; (b5424 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b5194:	48a4      	ldr	r0, [pc, #656]	; (b5428 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b5196:	f004 fc22 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b519a:	49a4      	ldr	r1, [pc, #656]	; (b542c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b519c:	48a4      	ldr	r0, [pc, #656]	; (b5430 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b519e:	f004 fc1e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51a2:	49a4      	ldr	r1, [pc, #656]	; (b5434 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b51a4:	48a4      	ldr	r0, [pc, #656]	; (b5438 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b51a6:	f004 fc1a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51aa:	49a4      	ldr	r1, [pc, #656]	; (b543c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b51ac:	48a4      	ldr	r0, [pc, #656]	; (b5440 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b51ae:	f004 fc16 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51b2:	49a4      	ldr	r1, [pc, #656]	; (b5444 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b51b4:	48a4      	ldr	r0, [pc, #656]	; (b5448 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b51b6:	f004 fc12 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51ba:	49a4      	ldr	r1, [pc, #656]	; (b544c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b51bc:	48a4      	ldr	r0, [pc, #656]	; (b5450 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b51be:	f004 fc0e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51c2:	49a4      	ldr	r1, [pc, #656]	; (b5454 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b51c4:	48a4      	ldr	r0, [pc, #656]	; (b5458 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b51c6:	f004 fc0a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51ca:	49a4      	ldr	r1, [pc, #656]	; (b545c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b51cc:	48a4      	ldr	r0, [pc, #656]	; (b5460 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b51ce:	f004 fc06 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51d2:	49a4      	ldr	r1, [pc, #656]	; (b5464 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b51d4:	48a4      	ldr	r0, [pc, #656]	; (b5468 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b51d6:	f004 fc02 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51da:	49a4      	ldr	r1, [pc, #656]	; (b546c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b51dc:	48a4      	ldr	r0, [pc, #656]	; (b5470 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b51de:	f004 fbfe 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51e2:	49a4      	ldr	r1, [pc, #656]	; (b5474 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b51e4:	48a4      	ldr	r0, [pc, #656]	; (b5478 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b51e6:	f004 fbfa 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51ea:	49a4      	ldr	r1, [pc, #656]	; (b547c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b51ec:	48a4      	ldr	r0, [pc, #656]	; (b5480 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b51ee:	f004 fbf6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51f2:	49a4      	ldr	r1, [pc, #656]	; (b5484 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b51f4:	48a4      	ldr	r0, [pc, #656]	; (b5488 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b51f6:	f004 fbf2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b51fa:	49a4      	ldr	r1, [pc, #656]	; (b548c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b51fc:	48a4      	ldr	r0, [pc, #656]	; (b5490 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b51fe:	f004 fbee 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5202:	49a4      	ldr	r1, [pc, #656]	; (b5494 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b5204:	48a4      	ldr	r0, [pc, #656]	; (b5498 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b5206:	f004 fbea 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b520a:	49a4      	ldr	r1, [pc, #656]	; (b549c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b520c:	48a4      	ldr	r0, [pc, #656]	; (b54a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b520e:	f004 fbe6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5212:	49a4      	ldr	r1, [pc, #656]	; (b54a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b5214:	48a4      	ldr	r0, [pc, #656]	; (b54a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b5216:	f004 fbe2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b521a:	49a4      	ldr	r1, [pc, #656]	; (b54ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b521c:	48a4      	ldr	r0, [pc, #656]	; (b54b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b521e:	f004 fbde 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5222:	49a4      	ldr	r1, [pc, #656]	; (b54b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b5224:	48a4      	ldr	r0, [pc, #656]	; (b54b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b5226:	f004 fbda 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b522a:	49a4      	ldr	r1, [pc, #656]	; (b54bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b522c:	48a4      	ldr	r0, [pc, #656]	; (b54c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b522e:	f004 fbd6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5232:	49a4      	ldr	r1, [pc, #656]	; (b54c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b5234:	48a4      	ldr	r0, [pc, #656]	; (b54c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b5236:	f004 fbd2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b523a:	49a4      	ldr	r1, [pc, #656]	; (b54cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b523c:	48a4      	ldr	r0, [pc, #656]	; (b54d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b523e:	f004 fbce 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5242:	49a4      	ldr	r1, [pc, #656]	; (b54d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b5244:	48a4      	ldr	r0, [pc, #656]	; (b54d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b5246:	f004 fbca 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b524a:	49a4      	ldr	r1, [pc, #656]	; (b54dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b524c:	48a4      	ldr	r0, [pc, #656]	; (b54e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b524e:	f004 fbc6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5252:	49a4      	ldr	r1, [pc, #656]	; (b54e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b5254:	48a4      	ldr	r0, [pc, #656]	; (b54e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b5256:	f004 fbc2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b525a:	49a4      	ldr	r1, [pc, #656]	; (b54ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b525c:	48a4      	ldr	r0, [pc, #656]	; (b54f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b525e:	f004 fbbe 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5262:	49a4      	ldr	r1, [pc, #656]	; (b54f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b5264:	48a4      	ldr	r0, [pc, #656]	; (b54f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b5266:	f004 fbba 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b526a:	49a4      	ldr	r1, [pc, #656]	; (b54fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b526c:	48a4      	ldr	r0, [pc, #656]	; (b5500 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b526e:	f004 fbb6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5272:	49a4      	ldr	r1, [pc, #656]	; (b5504 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b5274:	48a4      	ldr	r0, [pc, #656]	; (b5508 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b5276:	f004 fbb2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b527a:	49a4      	ldr	r1, [pc, #656]	; (b550c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b527c:	48a4      	ldr	r0, [pc, #656]	; (b5510 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b527e:	f004 fbae 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5282:	49a4      	ldr	r1, [pc, #656]	; (b5514 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b5284:	48a4      	ldr	r0, [pc, #656]	; (b5518 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b5286:	f004 fbaa 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b528a:	49a4      	ldr	r1, [pc, #656]	; (b551c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b528c:	48a4      	ldr	r0, [pc, #656]	; (b5520 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b528e:	f004 fba6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5292:	49a4      	ldr	r1, [pc, #656]	; (b5524 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b5294:	48a4      	ldr	r0, [pc, #656]	; (b5528 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b5296:	f004 fba2 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b529a:	49a4      	ldr	r1, [pc, #656]	; (b552c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b529c:	48a4      	ldr	r0, [pc, #656]	; (b5530 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b529e:	f004 fb9e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52a2:	49a4      	ldr	r1, [pc, #656]	; (b5534 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b52a4:	48a4      	ldr	r0, [pc, #656]	; (b5538 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b52a6:	f004 fb9a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52aa:	49a4      	ldr	r1, [pc, #656]	; (b553c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b52ac:	48a4      	ldr	r0, [pc, #656]	; (b5540 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b52ae:	f004 fb96 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52b2:	49a4      	ldr	r1, [pc, #656]	; (b5544 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b52b4:	48a4      	ldr	r0, [pc, #656]	; (b5548 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b52b6:	f004 fb92 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52ba:	49a4      	ldr	r1, [pc, #656]	; (b554c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b52bc:	48a4      	ldr	r0, [pc, #656]	; (b5550 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b52be:	f004 fb8e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52c2:	49a4      	ldr	r1, [pc, #656]	; (b5554 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b52c4:	48a4      	ldr	r0, [pc, #656]	; (b5558 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b52c6:	f004 fb8a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52ca:	49a4      	ldr	r1, [pc, #656]	; (b555c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b52cc:	48a4      	ldr	r0, [pc, #656]	; (b5560 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b52ce:	f004 fb86 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52d2:	49a4      	ldr	r1, [pc, #656]	; (b5564 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b52d4:	48a4      	ldr	r0, [pc, #656]	; (b5568 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b52d6:	f004 fb82 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52da:	49a4      	ldr	r1, [pc, #656]	; (b556c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b52dc:	48a4      	ldr	r0, [pc, #656]	; (b5570 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b52de:	f004 fb7e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52e2:	49a4      	ldr	r1, [pc, #656]	; (b5574 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c8>)
   b52e4:	48a4      	ldr	r0, [pc, #656]	; (b5578 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4cc>)
   b52e6:	f004 fb7a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52ea:	49a4      	ldr	r1, [pc, #656]	; (b557c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d0>)
   b52ec:	48a4      	ldr	r0, [pc, #656]	; (b5580 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d4>)
   b52ee:	f004 fb76 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52f2:	49a4      	ldr	r1, [pc, #656]	; (b5584 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d8>)
   b52f4:	48a4      	ldr	r0, [pc, #656]	; (b5588 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4dc>)
   b52f6:	f004 fb72 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b52fa:	49a4      	ldr	r1, [pc, #656]	; (b558c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e0>)
   b52fc:	48a4      	ldr	r0, [pc, #656]	; (b5590 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e4>)
   b52fe:	f004 fb6e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5302:	49a4      	ldr	r1, [pc, #656]	; (b5594 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e8>)
   b5304:	48a4      	ldr	r0, [pc, #656]	; (b5598 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ec>)
   b5306:	f004 fb6a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b530a:	49a4      	ldr	r1, [pc, #656]	; (b559c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f0>)
   b530c:	48a4      	ldr	r0, [pc, #656]	; (b55a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f4>)
   b530e:	f004 fb66 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5312:	49a4      	ldr	r1, [pc, #656]	; (b55a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f8>)
   b5314:	48a4      	ldr	r0, [pc, #656]	; (b55a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4fc>)
   b5316:	f004 fb62 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b531a:	49a4      	ldr	r1, [pc, #656]	; (b55ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x500>)
   b531c:	48a4      	ldr	r0, [pc, #656]	; (b55b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x504>)
   b531e:	f004 fb5e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5322:	49a4      	ldr	r1, [pc, #656]	; (b55b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x508>)
   b5324:	48a4      	ldr	r0, [pc, #656]	; (b55b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x50c>)
   b5326:	f004 fb5a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b532a:	49a4      	ldr	r1, [pc, #656]	; (b55bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x510>)
   b532c:	48a4      	ldr	r0, [pc, #656]	; (b55c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x514>)
   b532e:	f004 fb56 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5332:	49a4      	ldr	r1, [pc, #656]	; (b55c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x518>)
   b5334:	48a4      	ldr	r0, [pc, #656]	; (b55c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x51c>)
   b5336:	f004 fb52 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b533a:	49a4      	ldr	r1, [pc, #656]	; (b55cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x520>)
   b533c:	48a4      	ldr	r0, [pc, #656]	; (b55d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x524>)
   b533e:	f004 fb4e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5342:	49a4      	ldr	r1, [pc, #656]	; (b55d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x528>)
   b5344:	48a4      	ldr	r0, [pc, #656]	; (b55d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x52c>)
   b5346:	f004 fb4a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b534a:	4906      	ldr	r1, [pc, #24]	; (b5364 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b534c:	48a3      	ldr	r0, [pc, #652]	; (b55dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x530>)
   b534e:	f004 fb46 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b5352:	49a3      	ldr	r1, [pc, #652]	; (b55e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x534>)
   b5354:	48a3      	ldr	r0, [pc, #652]	; (b55e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x538>)
   b5356:	f004 fb42 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b535a:	e145      	b.n	b55e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x53c>
   b535c:	2003d1b8 	.word	0x2003d1b8
   b5360:	2003d7a4 	.word	0x2003d7a4
   b5364:	000bb591 	.word	0x000bb591
   b5368:	2003c7f4 	.word	0x2003c7f4
   b536c:	2003ce18 	.word	0x2003ce18
   b5370:	000bb59f 	.word	0x000bb59f
   b5374:	2003ce68 	.word	0x2003ce68
   b5378:	2003ce78 	.word	0x2003ce78
   b537c:	000bb5a1 	.word	0x000bb5a1
   b5380:	2003de74 	.word	0x2003de74
   b5384:	000bb5a9 	.word	0x000bb5a9
   b5388:	2003de84 	.word	0x2003de84
   b538c:	000bb5b1 	.word	0x000bb5b1
   b5390:	2003de94 	.word	0x2003de94
   b5394:	000bb5b9 	.word	0x000bb5b9
   b5398:	2003dea4 	.word	0x2003dea4
   b539c:	000bb5c1 	.word	0x000bb5c1
   b53a0:	2003deb4 	.word	0x2003deb4
   b53a4:	000bb5c9 	.word	0x000bb5c9
   b53a8:	2003dec4 	.word	0x2003dec4
   b53ac:	000bb5d1 	.word	0x000bb5d1
   b53b0:	2003ded4 	.word	0x2003ded4
   b53b4:	000bb5db 	.word	0x000bb5db
   b53b8:	2003dee4 	.word	0x2003dee4
   b53bc:	000bb5e5 	.word	0x000bb5e5
   b53c0:	2003def4 	.word	0x2003def4
   b53c4:	000bb5ef 	.word	0x000bb5ef
   b53c8:	2003df04 	.word	0x2003df04
   b53cc:	000bb5f9 	.word	0x000bb5f9
   b53d0:	2003df14 	.word	0x2003df14
   b53d4:	000bb603 	.word	0x000bb603
   b53d8:	2003df24 	.word	0x2003df24
   b53dc:	000bb60d 	.word	0x000bb60d
   b53e0:	2003df34 	.word	0x2003df34
   b53e4:	000bb617 	.word	0x000bb617
   b53e8:	2003df44 	.word	0x2003df44
   b53ec:	000bb621 	.word	0x000bb621
   b53f0:	2003dcb4 	.word	0x2003dcb4
   b53f4:	000bb62b 	.word	0x000bb62b
   b53f8:	2003dcc4 	.word	0x2003dcc4
   b53fc:	000bb635 	.word	0x000bb635
   b5400:	2003dcd4 	.word	0x2003dcd4
   b5404:	000bb63f 	.word	0x000bb63f
   b5408:	2003dce4 	.word	0x2003dce4
   b540c:	000bb649 	.word	0x000bb649
   b5410:	2003dcf4 	.word	0x2003dcf4
   b5414:	000bb653 	.word	0x000bb653
   b5418:	2003dd04 	.word	0x2003dd04
   b541c:	000bb65d 	.word	0x000bb65d
   b5420:	2003dd14 	.word	0x2003dd14
   b5424:	000bb667 	.word	0x000bb667
   b5428:	2003dd24 	.word	0x2003dd24
   b542c:	000bb671 	.word	0x000bb671
   b5430:	2003dd34 	.word	0x2003dd34
   b5434:	000bb67b 	.word	0x000bb67b
   b5438:	2003dd44 	.word	0x2003dd44
   b543c:	000bb685 	.word	0x000bb685
   b5440:	2003dd54 	.word	0x2003dd54
   b5444:	000bb68f 	.word	0x000bb68f
   b5448:	2003dd64 	.word	0x2003dd64
   b544c:	000bb699 	.word	0x000bb699
   b5450:	2003dd74 	.word	0x2003dd74
   b5454:	000bb6a3 	.word	0x000bb6a3
   b5458:	2003dd84 	.word	0x2003dd84
   b545c:	000bb6ad 	.word	0x000bb6ad
   b5460:	2003dd94 	.word	0x2003dd94
   b5464:	000bb6b7 	.word	0x000bb6b7
   b5468:	2003dda4 	.word	0x2003dda4
   b546c:	000bb6c1 	.word	0x000bb6c1
   b5470:	2003ddb4 	.word	0x2003ddb4
   b5474:	000bb6cb 	.word	0x000bb6cb
   b5478:	2003ddc4 	.word	0x2003ddc4
   b547c:	000bb6d5 	.word	0x000bb6d5
   b5480:	2003ddd4 	.word	0x2003ddd4
   b5484:	000bb6df 	.word	0x000bb6df
   b5488:	2003dde4 	.word	0x2003dde4
   b548c:	000bb6e9 	.word	0x000bb6e9
   b5490:	2003ddf4 	.word	0x2003ddf4
   b5494:	000bb6f3 	.word	0x000bb6f3
   b5498:	2003de04 	.word	0x2003de04
   b549c:	000bb6fd 	.word	0x000bb6fd
   b54a0:	2003de14 	.word	0x2003de14
   b54a4:	000bb743 	.word	0x000bb743
   b54a8:	2003de24 	.word	0x2003de24
   b54ac:	000bb707 	.word	0x000bb707
   b54b0:	2003de34 	.word	0x2003de34
   b54b4:	000bb70d 	.word	0x000bb70d
   b54b8:	2003de44 	.word	0x2003de44
   b54bc:	000bb5b5 	.word	0x000bb5b5
   b54c0:	2003de54 	.word	0x2003de54
   b54c4:	000bb713 	.word	0x000bb713
   b54c8:	2003de64 	.word	0x2003de64
   b54cc:	000bb717 	.word	0x000bb717
   b54d0:	2003df54 	.word	0x2003df54
   b54d4:	000bb71f 	.word	0x000bb71f
   b54d8:	2003df64 	.word	0x2003df64
   b54dc:	000bb727 	.word	0x000bb727
   b54e0:	2003df74 	.word	0x2003df74
   b54e4:	000bb72f 	.word	0x000bb72f
   b54e8:	2003df84 	.word	0x2003df84
   b54ec:	000bb737 	.word	0x000bb737
   b54f0:	2003df94 	.word	0x2003df94
   b54f4:	000bb73f 	.word	0x000bb73f
   b54f8:	2003dfa4 	.word	0x2003dfa4
   b54fc:	000bb747 	.word	0x000bb747
   b5500:	2003dfb4 	.word	0x2003dfb4
   b5504:	000bb74f 	.word	0x000bb74f
   b5508:	2003dfc4 	.word	0x2003dfc4
   b550c:	000bb757 	.word	0x000bb757
   b5510:	2003dfd4 	.word	0x2003dfd4
   b5514:	000bb75f 	.word	0x000bb75f
   b5518:	2003dfe4 	.word	0x2003dfe4
   b551c:	000bb767 	.word	0x000bb767
   b5520:	2003dff4 	.word	0x2003dff4
   b5524:	000bb76f 	.word	0x000bb76f
   b5528:	2003e004 	.word	0x2003e004
   b552c:	000bb777 	.word	0x000bb777
   b5530:	2003e014 	.word	0x2003e014
   b5534:	000bb77f 	.word	0x000bb77f
   b5538:	2003e024 	.word	0x2003e024
   b553c:	000bb787 	.word	0x000bb787
   b5540:	2003e034 	.word	0x2003e034
   b5544:	000bb78f 	.word	0x000bb78f
   b5548:	2003e044 	.word	0x2003e044
   b554c:	000bb797 	.word	0x000bb797
   b5550:	2003e054 	.word	0x2003e054
   b5554:	000bb79f 	.word	0x000bb79f
   b5558:	2003e064 	.word	0x2003e064
   b555c:	000bb7a7 	.word	0x000bb7a7
   b5560:	2003e074 	.word	0x2003e074
   b5564:	000bb7af 	.word	0x000bb7af
   b5568:	2003e084 	.word	0x2003e084
   b556c:	000bb7b7 	.word	0x000bb7b7
   b5570:	2003e094 	.word	0x2003e094
   b5574:	000bb7bf 	.word	0x000bb7bf
   b5578:	2003e0a4 	.word	0x2003e0a4
   b557c:	000bb7c7 	.word	0x000bb7c7
   b5580:	2003e0b4 	.word	0x2003e0b4
   b5584:	000bb7cf 	.word	0x000bb7cf
   b5588:	2003e0c4 	.word	0x2003e0c4
   b558c:	000bb7d7 	.word	0x000bb7d7
   b5590:	2003e0d4 	.word	0x2003e0d4
   b5594:	000bb7dd 	.word	0x000bb7dd
   b5598:	2003e0e4 	.word	0x2003e0e4
   b559c:	000bb7e3 	.word	0x000bb7e3
   b55a0:	2003e0f4 	.word	0x2003e0f4
   b55a4:	000bb7e9 	.word	0x000bb7e9
   b55a8:	2003e104 	.word	0x2003e104
   b55ac:	000bb7ef 	.word	0x000bb7ef
   b55b0:	2003e114 	.word	0x2003e114
   b55b4:	000bb7f5 	.word	0x000bb7f5
   b55b8:	2003e124 	.word	0x2003e124
   b55bc:	000bb7fb 	.word	0x000bb7fb
   b55c0:	2003e134 	.word	0x2003e134
   b55c4:	000bb801 	.word	0x000bb801
   b55c8:	2003e144 	.word	0x2003e144
   b55cc:	000bb807 	.word	0x000bb807
   b55d0:	2003e154 	.word	0x2003e154
   b55d4:	000bb80d 	.word	0x000bb80d
   b55d8:	2003e164 	.word	0x2003e164
   b55dc:	2003e174 	.word	0x2003e174
   b55e0:	000bb813 	.word	0x000bb813
   b55e4:	2003dc34 	.word	0x2003dc34
   b55e8:	49a8      	ldr	r1, [pc, #672]	; (b588c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e0>)
   b55ea:	48a9      	ldr	r0, [pc, #676]	; (b5890 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e4>)
   b55ec:	f004 f9f7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b55f0:	49a8      	ldr	r1, [pc, #672]	; (b5894 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e8>)
   b55f2:	48a9      	ldr	r0, [pc, #676]	; (b5898 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7ec>)
   b55f4:	f004 f9f3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b55f8:	49a8      	ldr	r1, [pc, #672]	; (b589c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f0>)
   b55fa:	48a9      	ldr	r0, [pc, #676]	; (b58a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f4>)
   b55fc:	f004 f9ef 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5600:	49a8      	ldr	r1, [pc, #672]	; (b58a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7f8>)
   b5602:	48a9      	ldr	r0, [pc, #676]	; (b58a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7fc>)
   b5604:	f004 f9eb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5608:	49a8      	ldr	r1, [pc, #672]	; (b58ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x800>)
   b560a:	48a9      	ldr	r0, [pc, #676]	; (b58b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x804>)
   b560c:	f004 f9e7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5610:	49a8      	ldr	r1, [pc, #672]	; (b58b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x808>)
   b5612:	48a9      	ldr	r0, [pc, #676]	; (b58b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x80c>)
   b5614:	f004 f9e3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5618:	49a8      	ldr	r1, [pc, #672]	; (b58bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x810>)
   b561a:	48a9      	ldr	r0, [pc, #676]	; (b58c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x814>)
   b561c:	f004 f9df 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
                     "6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b5620:	49a8      	ldr	r1, [pc, #672]	; (b58c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x818>)
   b5622:	48a9      	ldr	r0, [pc, #676]	; (b58c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x81c>)
   b5624:	f004 f9db 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5628:	49a8      	ldr	r1, [pc, #672]	; (b58cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x820>)
   b562a:	48a9      	ldr	r0, [pc, #676]	; (b58d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x824>)
   b562c:	f004 f9d7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5630:	49a8      	ldr	r1, [pc, #672]	; (b58d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x828>)
   b5632:	48a9      	ldr	r0, [pc, #676]	; (b58d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x82c>)
   b5634:	f004 f9d3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5638:	49a8      	ldr	r1, [pc, #672]	; (b58dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x830>)
   b563a:	48a9      	ldr	r0, [pc, #676]	; (b58e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x834>)
   b563c:	f004 f9cf 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5640:	49a8      	ldr	r1, [pc, #672]	; (b58e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x838>)
   b5642:	48a9      	ldr	r0, [pc, #676]	; (b58e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x83c>)
   b5644:	f004 f9cb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5648:	49a8      	ldr	r1, [pc, #672]	; (b58ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x840>)
   b564a:	48a9      	ldr	r0, [pc, #676]	; (b58f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x844>)
   b564c:	f004 f9c7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5650:	49a8      	ldr	r1, [pc, #672]	; (b58f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x848>)
   b5652:	48a9      	ldr	r0, [pc, #676]	; (b58f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x84c>)
   b5654:	f004 f9c3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5658:	49a8      	ldr	r1, [pc, #672]	; (b58fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x850>)
   b565a:	48a9      	ldr	r0, [pc, #676]	; (b5900 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x854>)
   b565c:	f004 f9bf 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5660:	49a8      	ldr	r1, [pc, #672]	; (b5904 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x858>)
   b5662:	48a9      	ldr	r0, [pc, #676]	; (b5908 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x85c>)
   b5664:	f004 f9bb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5668:	49a8      	ldr	r1, [pc, #672]	; (b590c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x860>)
   b566a:	48a9      	ldr	r0, [pc, #676]	; (b5910 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x864>)
   b566c:	f004 f9b7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5670:	49a8      	ldr	r1, [pc, #672]	; (b5914 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x868>)
   b5672:	48a9      	ldr	r0, [pc, #676]	; (b5918 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x86c>)
   b5674:	f004 f9b3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5678:	49a8      	ldr	r1, [pc, #672]	; (b591c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x870>)
   b567a:	48a9      	ldr	r0, [pc, #676]	; (b5920 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x874>)
   b567c:	f004 f9af 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5680:	49a8      	ldr	r1, [pc, #672]	; (b5924 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x878>)
   b5682:	48a9      	ldr	r0, [pc, #676]	; (b5928 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x87c>)
   b5684:	f004 f9ab 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5688:	49a8      	ldr	r1, [pc, #672]	; (b592c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x880>)
   b568a:	48a9      	ldr	r0, [pc, #676]	; (b5930 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x884>)
   b568c:	f004 f9a7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5690:	49a8      	ldr	r1, [pc, #672]	; (b5934 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x888>)
   b5692:	48a9      	ldr	r0, [pc, #676]	; (b5938 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x88c>)
   b5694:	f004 f9a3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5698:	49a8      	ldr	r1, [pc, #672]	; (b593c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x890>)
   b569a:	48a9      	ldr	r0, [pc, #676]	; (b5940 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x894>)
   b569c:	f004 f99f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56a0:	49a8      	ldr	r1, [pc, #672]	; (b5944 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x898>)
   b56a2:	48a9      	ldr	r0, [pc, #676]	; (b5948 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x89c>)
   b56a4:	f004 f99b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56a8:	49a8      	ldr	r1, [pc, #672]	; (b594c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a0>)
   b56aa:	48a9      	ldr	r0, [pc, #676]	; (b5950 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a4>)
   b56ac:	f004 f997 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56b0:	49a8      	ldr	r1, [pc, #672]	; (b5954 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8a8>)
   b56b2:	48a9      	ldr	r0, [pc, #676]	; (b5958 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8ac>)
   b56b4:	f004 f993 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56b8:	49a8      	ldr	r1, [pc, #672]	; (b595c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b0>)
   b56ba:	48a9      	ldr	r0, [pc, #676]	; (b5960 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b4>)
   b56bc:	f004 f98f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56c0:	49a8      	ldr	r1, [pc, #672]	; (b5964 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8b8>)
   b56c2:	48a9      	ldr	r0, [pc, #676]	; (b5968 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8bc>)
   b56c4:	f004 f98b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56c8:	49a8      	ldr	r1, [pc, #672]	; (b596c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c0>)
   b56ca:	48a9      	ldr	r0, [pc, #676]	; (b5970 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c4>)
   b56cc:	f004 f987 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56d0:	49a8      	ldr	r1, [pc, #672]	; (b5974 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8c8>)
   b56d2:	48a9      	ldr	r0, [pc, #676]	; (b5978 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8cc>)
   b56d4:	f004 f983 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56d8:	49a8      	ldr	r1, [pc, #672]	; (b597c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8d0>)
   b56da:	48a9      	ldr	r0, [pc, #676]	; (b5980 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8d4>)
   b56dc:	f004 f97f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56e0:	49a8      	ldr	r1, [pc, #672]	; (b5984 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8d8>)
   b56e2:	48a9      	ldr	r0, [pc, #676]	; (b5988 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8dc>)
   b56e4:	f004 f97b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56e8:	49a8      	ldr	r1, [pc, #672]	; (b598c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8e0>)
   b56ea:	48a9      	ldr	r0, [pc, #676]	; (b5990 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8e4>)
   b56ec:	f004 f977 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56f0:	49a8      	ldr	r1, [pc, #672]	; (b5994 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8e8>)
   b56f2:	48a9      	ldr	r0, [pc, #676]	; (b5998 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8ec>)
   b56f4:	f004 f973 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b56f8:	49a8      	ldr	r1, [pc, #672]	; (b599c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8f0>)
   b56fa:	48a9      	ldr	r0, [pc, #676]	; (b59a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8f4>)
   b56fc:	f004 f96f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5700:	49a8      	ldr	r1, [pc, #672]	; (b59a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8f8>)
   b5702:	48a9      	ldr	r0, [pc, #676]	; (b59a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x8fc>)
   b5704:	f004 f96b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5708:	49a8      	ldr	r1, [pc, #672]	; (b59ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x900>)
   b570a:	48a9      	ldr	r0, [pc, #676]	; (b59b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x904>)
   b570c:	f004 f967 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5710:	49a8      	ldr	r1, [pc, #672]	; (b59b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x908>)
   b5712:	48a9      	ldr	r0, [pc, #676]	; (b59b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x90c>)
   b5714:	f004 f963 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5718:	49a8      	ldr	r1, [pc, #672]	; (b59bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x910>)
   b571a:	48a9      	ldr	r0, [pc, #676]	; (b59c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x914>)
   b571c:	f004 f95f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5720:	49a8      	ldr	r1, [pc, #672]	; (b59c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x918>)
   b5722:	48a9      	ldr	r0, [pc, #676]	; (b59c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x91c>)
   b5724:	f004 f95b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5728:	49a8      	ldr	r1, [pc, #672]	; (b59cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x920>)
   b572a:	48a9      	ldr	r0, [pc, #676]	; (b59d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x924>)
   b572c:	f004 f957 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5730:	49a8      	ldr	r1, [pc, #672]	; (b59d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x928>)
   b5732:	48a9      	ldr	r0, [pc, #676]	; (b59d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x92c>)
   b5734:	f004 f953 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5738:	49a8      	ldr	r1, [pc, #672]	; (b59dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x930>)
   b573a:	48a9      	ldr	r0, [pc, #676]	; (b59e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x934>)
   b573c:	f004 f94f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5740:	49a8      	ldr	r1, [pc, #672]	; (b59e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x938>)
   b5742:	48a9      	ldr	r0, [pc, #676]	; (b59e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x93c>)
   b5744:	f004 f94b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5748:	49a8      	ldr	r1, [pc, #672]	; (b59ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x940>)
   b574a:	48a9      	ldr	r0, [pc, #676]	; (b59f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x944>)
   b574c:	f004 f947 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5750:	49a8      	ldr	r1, [pc, #672]	; (b59f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x948>)
   b5752:	48a9      	ldr	r0, [pc, #676]	; (b59f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x94c>)
   b5754:	f004 f943 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5758:	49a8      	ldr	r1, [pc, #672]	; (b59fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x950>)
   b575a:	48a9      	ldr	r0, [pc, #676]	; (b5a00 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x954>)
   b575c:	f004 f93f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5760:	49a8      	ldr	r1, [pc, #672]	; (b5a04 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x958>)
   b5762:	48a9      	ldr	r0, [pc, #676]	; (b5a08 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x95c>)
   b5764:	f004 f93b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5768:	49a8      	ldr	r1, [pc, #672]	; (b5a0c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x960>)
   b576a:	48a9      	ldr	r0, [pc, #676]	; (b5a10 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x964>)
   b576c:	f004 f937 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5770:	49a8      	ldr	r1, [pc, #672]	; (b5a14 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x968>)
   b5772:	48a9      	ldr	r0, [pc, #676]	; (b5a18 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x96c>)
   b5774:	f004 f933 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5778:	49a8      	ldr	r1, [pc, #672]	; (b5a1c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x970>)
   b577a:	48a9      	ldr	r0, [pc, #676]	; (b5a20 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x974>)
   b577c:	f004 f92f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5780:	49a8      	ldr	r1, [pc, #672]	; (b5a24 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x978>)
   b5782:	48a9      	ldr	r0, [pc, #676]	; (b5a28 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x97c>)
   b5784:	f004 f92b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5788:	49a8      	ldr	r1, [pc, #672]	; (b5a2c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x980>)
   b578a:	48a9      	ldr	r0, [pc, #676]	; (b5a30 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x984>)
   b578c:	f004 f927 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5790:	49a8      	ldr	r1, [pc, #672]	; (b5a34 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x988>)
   b5792:	48a9      	ldr	r0, [pc, #676]	; (b5a38 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x98c>)
   b5794:	f004 f923 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5798:	49a8      	ldr	r1, [pc, #672]	; (b5a3c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x990>)
   b579a:	48a9      	ldr	r0, [pc, #676]	; (b5a40 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x994>)
   b579c:	f004 f91f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57a0:	49a8      	ldr	r1, [pc, #672]	; (b5a44 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x998>)
   b57a2:	48a9      	ldr	r0, [pc, #676]	; (b5a48 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x99c>)
   b57a4:	f004 f91b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57a8:	49a8      	ldr	r1, [pc, #672]	; (b5a4c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9a0>)
   b57aa:	48a9      	ldr	r0, [pc, #676]	; (b5a50 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9a4>)
   b57ac:	f004 f917 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57b0:	49a8      	ldr	r1, [pc, #672]	; (b5a54 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9a8>)
   b57b2:	48a9      	ldr	r0, [pc, #676]	; (b5a58 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9ac>)
   b57b4:	f004 f913 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57b8:	49a8      	ldr	r1, [pc, #672]	; (b5a5c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9b0>)
   b57ba:	48a9      	ldr	r0, [pc, #676]	; (b5a60 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9b4>)
   b57bc:	f004 f90f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57c0:	49a8      	ldr	r1, [pc, #672]	; (b5a64 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9b8>)
   b57c2:	48a9      	ldr	r0, [pc, #676]	; (b5a68 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9bc>)
   b57c4:	f004 f90b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57c8:	49a8      	ldr	r1, [pc, #672]	; (b5a6c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9c0>)
   b57ca:	48a9      	ldr	r0, [pc, #676]	; (b5a70 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9c4>)
   b57cc:	f004 f907 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57d0:	49a8      	ldr	r1, [pc, #672]	; (b5a74 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9c8>)
   b57d2:	48a9      	ldr	r0, [pc, #676]	; (b5a78 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9cc>)
   b57d4:	f004 f903 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57d8:	49a8      	ldr	r1, [pc, #672]	; (b5a7c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9d0>)
   b57da:	48a9      	ldr	r0, [pc, #676]	; (b5a80 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9d4>)
   b57dc:	f004 f8ff 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57e0:	49a8      	ldr	r1, [pc, #672]	; (b5a84 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9d8>)
   b57e2:	48a9      	ldr	r0, [pc, #676]	; (b5a88 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9dc>)
   b57e4:	f004 f8fb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57e8:	49a8      	ldr	r1, [pc, #672]	; (b5a8c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9e0>)
   b57ea:	48a9      	ldr	r0, [pc, #676]	; (b5a90 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9e4>)
   b57ec:	f004 f8f7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57f0:	49a8      	ldr	r1, [pc, #672]	; (b5a94 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9e8>)
   b57f2:	48a9      	ldr	r0, [pc, #676]	; (b5a98 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9ec>)
   b57f4:	f004 f8f3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b57f8:	49a8      	ldr	r1, [pc, #672]	; (b5a9c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9f0>)
   b57fa:	48a9      	ldr	r0, [pc, #676]	; (b5aa0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9f4>)
   b57fc:	f004 f8ef 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5800:	49a8      	ldr	r1, [pc, #672]	; (b5aa4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9f8>)
   b5802:	48a9      	ldr	r0, [pc, #676]	; (b5aa8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x9fc>)
   b5804:	f004 f8eb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5808:	49a8      	ldr	r1, [pc, #672]	; (b5aac <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa00>)
   b580a:	48a9      	ldr	r0, [pc, #676]	; (b5ab0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa04>)
   b580c:	f004 f8e7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5810:	49a8      	ldr	r1, [pc, #672]	; (b5ab4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa08>)
   b5812:	48a9      	ldr	r0, [pc, #676]	; (b5ab8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa0c>)
   b5814:	f004 f8e3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5818:	49a8      	ldr	r1, [pc, #672]	; (b5abc <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa10>)
   b581a:	48a9      	ldr	r0, [pc, #676]	; (b5ac0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa14>)
   b581c:	f004 f8df 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5820:	49a8      	ldr	r1, [pc, #672]	; (b5ac4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa18>)
   b5822:	48a9      	ldr	r0, [pc, #676]	; (b5ac8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa1c>)
   b5824:	f004 f8db 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5828:	49a8      	ldr	r1, [pc, #672]	; (b5acc <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa20>)
   b582a:	48a9      	ldr	r0, [pc, #676]	; (b5ad0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa24>)
   b582c:	f004 f8d7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5830:	49a8      	ldr	r1, [pc, #672]	; (b5ad4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa28>)
   b5832:	48a9      	ldr	r0, [pc, #676]	; (b5ad8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa2c>)
   b5834:	f004 f8d3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5838:	49a8      	ldr	r1, [pc, #672]	; (b5adc <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa30>)
   b583a:	48a9      	ldr	r0, [pc, #676]	; (b5ae0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa34>)
   b583c:	f004 f8cf 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5840:	49a8      	ldr	r1, [pc, #672]	; (b5ae4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa38>)
   b5842:	48a9      	ldr	r0, [pc, #676]	; (b5ae8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa3c>)
   b5844:	f004 f8cb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5848:	49a8      	ldr	r1, [pc, #672]	; (b5aec <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa40>)
   b584a:	48a9      	ldr	r0, [pc, #676]	; (b5af0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa44>)
   b584c:	f004 f8c7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5850:	49a8      	ldr	r1, [pc, #672]	; (b5af4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa48>)
   b5852:	48a9      	ldr	r0, [pc, #676]	; (b5af8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa4c>)
   b5854:	f004 f8c3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5858:	49a8      	ldr	r1, [pc, #672]	; (b5afc <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa50>)
   b585a:	48a9      	ldr	r0, [pc, #676]	; (b5b00 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa54>)
   b585c:	f004 f8bf 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5860:	49a8      	ldr	r1, [pc, #672]	; (b5b04 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa58>)
   b5862:	48a9      	ldr	r0, [pc, #676]	; (b5b08 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa5c>)
   b5864:	f004 f8bb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5868:	49a8      	ldr	r1, [pc, #672]	; (b5b0c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa60>)
   b586a:	48a9      	ldr	r0, [pc, #676]	; (b5b10 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa64>)
   b586c:	f004 f8b7 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5870:	49a8      	ldr	r1, [pc, #672]	; (b5b14 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa68>)
   b5872:	48a9      	ldr	r0, [pc, #676]	; (b5b18 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa6c>)
   b5874:	f004 f8b3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5878:	49a8      	ldr	r1, [pc, #672]	; (b5b1c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa70>)
   b587a:	48a9      	ldr	r0, [pc, #676]	; (b5b20 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa74>)
   b587c:	f004 f8af 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5880:	49a8      	ldr	r1, [pc, #672]	; (b5b24 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa78>)
   b5882:	48a9      	ldr	r0, [pc, #676]	; (b5b28 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa7c>)
   b5884:	f004 f8ab 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5888:	4900      	ldr	r1, [pc, #0]	; (b588c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7e0>)
   b588a:	e14f      	b.n	b5b2c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xa80>
   b588c:	000bb819 	.word	0x000bb819
   b5890:	2003dc44 	.word	0x2003dc44
   b5894:	000bb81f 	.word	0x000bb81f
   b5898:	2003dc54 	.word	0x2003dc54
   b589c:	000bb825 	.word	0x000bb825
   b58a0:	2003dc64 	.word	0x2003dc64
   b58a4:	000bb82b 	.word	0x000bb82b
   b58a8:	2003dc74 	.word	0x2003dc74
   b58ac:	000bb831 	.word	0x000bb831
   b58b0:	2003dc84 	.word	0x2003dc84
   b58b4:	000bb837 	.word	0x000bb837
   b58b8:	2003dc94 	.word	0x2003dc94
   b58bc:	000bb591 	.word	0x000bb591
   b58c0:	2003dca4 	.word	0x2003dca4
   b58c4:	000bb5a1 	.word	0x000bb5a1
   b58c8:	2003e188 	.word	0x2003e188
   b58cc:	000bb5a9 	.word	0x000bb5a9
   b58d0:	2003e198 	.word	0x2003e198
   b58d4:	000bb5b1 	.word	0x000bb5b1
   b58d8:	2003e1a8 	.word	0x2003e1a8
   b58dc:	000bb5b9 	.word	0x000bb5b9
   b58e0:	2003e1b8 	.word	0x2003e1b8
   b58e4:	000bb5c1 	.word	0x000bb5c1
   b58e8:	2003e1c8 	.word	0x2003e1c8
   b58ec:	000bb5c9 	.word	0x000bb5c9
   b58f0:	2003e1d8 	.word	0x2003e1d8
   b58f4:	000bb5d1 	.word	0x000bb5d1
   b58f8:	2003e1e8 	.word	0x2003e1e8
   b58fc:	000bb5db 	.word	0x000bb5db
   b5900:	2003e1f8 	.word	0x2003e1f8
   b5904:	000bb5e5 	.word	0x000bb5e5
   b5908:	2003e208 	.word	0x2003e208
   b590c:	000bb5ef 	.word	0x000bb5ef
   b5910:	2003e218 	.word	0x2003e218
   b5914:	000bb5f9 	.word	0x000bb5f9
   b5918:	2003e228 	.word	0x2003e228
   b591c:	000bb603 	.word	0x000bb603
   b5920:	2003e238 	.word	0x2003e238
   b5924:	000bb60d 	.word	0x000bb60d
   b5928:	2003e248 	.word	0x2003e248
   b592c:	000bb617 	.word	0x000bb617
   b5930:	2003e258 	.word	0x2003e258
   b5934:	000bb621 	.word	0x000bb621
   b5938:	2003e268 	.word	0x2003e268
   b593c:	000bb62b 	.word	0x000bb62b
   b5940:	2003e278 	.word	0x2003e278
   b5944:	000bb635 	.word	0x000bb635
   b5948:	2003e288 	.word	0x2003e288
   b594c:	000bb63f 	.word	0x000bb63f
   b5950:	2003e298 	.word	0x2003e298
   b5954:	000bb649 	.word	0x000bb649
   b5958:	2003e2a8 	.word	0x2003e2a8
   b595c:	000bb653 	.word	0x000bb653
   b5960:	2003e2b8 	.word	0x2003e2b8
   b5964:	000bb65d 	.word	0x000bb65d
   b5968:	2003e2c8 	.word	0x2003e2c8
   b596c:	000bb667 	.word	0x000bb667
   b5970:	2003e2d8 	.word	0x2003e2d8
   b5974:	000bb671 	.word	0x000bb671
   b5978:	2003e2e8 	.word	0x2003e2e8
   b597c:	000bb67b 	.word	0x000bb67b
   b5980:	2003e2f8 	.word	0x2003e2f8
   b5984:	000bb685 	.word	0x000bb685
   b5988:	2003e308 	.word	0x2003e308
   b598c:	000bb68f 	.word	0x000bb68f
   b5990:	2003e318 	.word	0x2003e318
   b5994:	000bb699 	.word	0x000bb699
   b5998:	2003e328 	.word	0x2003e328
   b599c:	000bb6a3 	.word	0x000bb6a3
   b59a0:	2003e338 	.word	0x2003e338
   b59a4:	000bb6ad 	.word	0x000bb6ad
   b59a8:	2003e348 	.word	0x2003e348
   b59ac:	000bb6b7 	.word	0x000bb6b7
   b59b0:	2003e358 	.word	0x2003e358
   b59b4:	000bb6c1 	.word	0x000bb6c1
   b59b8:	2003e368 	.word	0x2003e368
   b59bc:	000bb6cb 	.word	0x000bb6cb
   b59c0:	2003e378 	.word	0x2003e378
   b59c4:	000bb6d5 	.word	0x000bb6d5
   b59c8:	2003e388 	.word	0x2003e388
   b59cc:	000bb6df 	.word	0x000bb6df
   b59d0:	2003e398 	.word	0x2003e398
   b59d4:	000bb6e9 	.word	0x000bb6e9
   b59d8:	2003e3a8 	.word	0x2003e3a8
   b59dc:	000bb6f3 	.word	0x000bb6f3
   b59e0:	2003e3b8 	.word	0x2003e3b8
   b59e4:	000bb6fd 	.word	0x000bb6fd
   b59e8:	2003e3c8 	.word	0x2003e3c8
   b59ec:	000bb743 	.word	0x000bb743
   b59f0:	2003e3d8 	.word	0x2003e3d8
   b59f4:	000bb707 	.word	0x000bb707
   b59f8:	2003e3e8 	.word	0x2003e3e8
   b59fc:	000bb70d 	.word	0x000bb70d
   b5a00:	2003e3f8 	.word	0x2003e3f8
   b5a04:	000bb5b5 	.word	0x000bb5b5
   b5a08:	2003e408 	.word	0x2003e408
   b5a0c:	000bb713 	.word	0x000bb713
   b5a10:	2003e418 	.word	0x2003e418
   b5a14:	000bb717 	.word	0x000bb717
   b5a18:	2003e428 	.word	0x2003e428
   b5a1c:	000bb71f 	.word	0x000bb71f
   b5a20:	2003e438 	.word	0x2003e438
   b5a24:	000bb727 	.word	0x000bb727
   b5a28:	2003e448 	.word	0x2003e448
   b5a2c:	000bb72f 	.word	0x000bb72f
   b5a30:	2003e458 	.word	0x2003e458
   b5a34:	000bb737 	.word	0x000bb737
   b5a38:	2003e468 	.word	0x2003e468
   b5a3c:	000bb73f 	.word	0x000bb73f
   b5a40:	2003e478 	.word	0x2003e478
   b5a44:	000bb747 	.word	0x000bb747
   b5a48:	2003e488 	.word	0x2003e488
   b5a4c:	000bb74f 	.word	0x000bb74f
   b5a50:	2003e498 	.word	0x2003e498
   b5a54:	000bb757 	.word	0x000bb757
   b5a58:	2003e4a8 	.word	0x2003e4a8
   b5a5c:	000bb75f 	.word	0x000bb75f
   b5a60:	2003e4b8 	.word	0x2003e4b8
   b5a64:	000bb767 	.word	0x000bb767
   b5a68:	2003e4c8 	.word	0x2003e4c8
   b5a6c:	000bb76f 	.word	0x000bb76f
   b5a70:	2003e4d8 	.word	0x2003e4d8
   b5a74:	000bb777 	.word	0x000bb777
   b5a78:	2003e4e8 	.word	0x2003e4e8
   b5a7c:	000bb77f 	.word	0x000bb77f
   b5a80:	2003e4f8 	.word	0x2003e4f8
   b5a84:	000bb787 	.word	0x000bb787
   b5a88:	2003e508 	.word	0x2003e508
   b5a8c:	000bb78f 	.word	0x000bb78f
   b5a90:	2003e518 	.word	0x2003e518
   b5a94:	000bb797 	.word	0x000bb797
   b5a98:	2003e528 	.word	0x2003e528
   b5a9c:	000bb79f 	.word	0x000bb79f
   b5aa0:	2003e538 	.word	0x2003e538
   b5aa4:	000bb7a7 	.word	0x000bb7a7
   b5aa8:	2003e548 	.word	0x2003e548
   b5aac:	000bb7af 	.word	0x000bb7af
   b5ab0:	2003e558 	.word	0x2003e558
   b5ab4:	000bb7b7 	.word	0x000bb7b7
   b5ab8:	2003e568 	.word	0x2003e568
   b5abc:	000bb7bf 	.word	0x000bb7bf
   b5ac0:	2003e578 	.word	0x2003e578
   b5ac4:	000bb7c7 	.word	0x000bb7c7
   b5ac8:	2003e588 	.word	0x2003e588
   b5acc:	000bb7cf 	.word	0x000bb7cf
   b5ad0:	2003e598 	.word	0x2003e598
   b5ad4:	000bb7d7 	.word	0x000bb7d7
   b5ad8:	2003e5a8 	.word	0x2003e5a8
   b5adc:	000bb7dd 	.word	0x000bb7dd
   b5ae0:	2003e5b8 	.word	0x2003e5b8
   b5ae4:	000bb7e3 	.word	0x000bb7e3
   b5ae8:	2003e5c8 	.word	0x2003e5c8
   b5aec:	000bb7e9 	.word	0x000bb7e9
   b5af0:	2003e5d8 	.word	0x2003e5d8
   b5af4:	000bb7ef 	.word	0x000bb7ef
   b5af8:	2003e5e8 	.word	0x2003e5e8
   b5afc:	000bb7f5 	.word	0x000bb7f5
   b5b00:	2003e5f8 	.word	0x2003e5f8
   b5b04:	000bb7fb 	.word	0x000bb7fb
   b5b08:	2003e608 	.word	0x2003e608
   b5b0c:	000bb801 	.word	0x000bb801
   b5b10:	2003e618 	.word	0x2003e618
   b5b14:	000bb807 	.word	0x000bb807
   b5b18:	2003e628 	.word	0x2003e628
   b5b1c:	000bb80d 	.word	0x000bb80d
   b5b20:	2003e638 	.word	0x2003e638
   b5b24:	000bb813 	.word	0x000bb813
   b5b28:	2003e648 	.word	0x2003e648
   b5b2c:	4831      	ldr	r0, [pc, #196]	; (b5bf4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb48>)
   b5b2e:	f003 ff56 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b32:	4931      	ldr	r1, [pc, #196]	; (b5bf8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb4c>)
   b5b34:	4831      	ldr	r0, [pc, #196]	; (b5bfc <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb50>)
   b5b36:	f003 ff52 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b3a:	4931      	ldr	r1, [pc, #196]	; (b5c00 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb54>)
   b5b3c:	4831      	ldr	r0, [pc, #196]	; (b5c04 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb58>)
   b5b3e:	f003 ff4e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b42:	4931      	ldr	r1, [pc, #196]	; (b5c08 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb5c>)
   b5b44:	4831      	ldr	r0, [pc, #196]	; (b5c0c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb60>)
   b5b46:	f003 ff4a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b4a:	4931      	ldr	r1, [pc, #196]	; (b5c10 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb64>)
   b5b4c:	4831      	ldr	r0, [pc, #196]	; (b5c14 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb68>)
   b5b4e:	f003 ff46 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b52:	4931      	ldr	r1, [pc, #196]	; (b5c18 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb6c>)
   b5b54:	4831      	ldr	r0, [pc, #196]	; (b5c1c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb70>)
   b5b56:	f003 ff42 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
                        "0#1#1#1#0","0#1#1#1#1","0#1#1#0#0","0#1#1#0#1","0#1#1#0#3","0#1#1#0#4","0#1#1#0#5"};
   b5b5a:	4931      	ldr	r1, [pc, #196]	; (b5c20 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb74>)
   b5b5c:	4831      	ldr	r0, [pc, #196]	; (b5c24 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb78>)
   b5b5e:	f003 ff3e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b62:	4931      	ldr	r1, [pc, #196]	; (b5c28 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb7c>)
   b5b64:	4831      	ldr	r0, [pc, #196]	; (b5c2c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb80>)
   b5b66:	f003 ff3a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b6a:	4931      	ldr	r1, [pc, #196]	; (b5c30 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb84>)
   b5b6c:	4831      	ldr	r0, [pc, #196]	; (b5c34 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb88>)
   b5b6e:	f003 ff36 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b72:	4931      	ldr	r1, [pc, #196]	; (b5c38 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb8c>)
   b5b74:	4831      	ldr	r0, [pc, #196]	; (b5c3c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb90>)
   b5b76:	f003 ff32 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b7a:	4931      	ldr	r1, [pc, #196]	; (b5c40 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb94>)
   b5b7c:	4831      	ldr	r0, [pc, #196]	; (b5c44 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb98>)
   b5b7e:	f003 ff2e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b82:	4931      	ldr	r1, [pc, #196]	; (b5c48 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb9c>)
   b5b84:	4831      	ldr	r0, [pc, #196]	; (b5c4c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xba0>)
   b5b86:	f003 ff2a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b8a:	4931      	ldr	r1, [pc, #196]	; (b5c50 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xba4>)
   b5b8c:	4831      	ldr	r0, [pc, #196]	; (b5c54 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xba8>)
   b5b8e:	f003 ff26 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b92:	4931      	ldr	r1, [pc, #196]	; (b5c58 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbac>)
   b5b94:	4831      	ldr	r0, [pc, #196]	; (b5c5c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbb0>)
   b5b96:	f003 ff22 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5b9a:	4931      	ldr	r1, [pc, #196]	; (b5c60 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbb4>)
   b5b9c:	4831      	ldr	r0, [pc, #196]	; (b5c64 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbb8>)
   b5b9e:	f003 ff1e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5ba2:	4931      	ldr	r1, [pc, #196]	; (b5c68 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbbc>)
   b5ba4:	4831      	ldr	r0, [pc, #196]	; (b5c6c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbc0>)
   b5ba6:	f003 ff1a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5baa:	1928      	adds	r0, r5, r4
   b5bac:	4631      	mov	r1, r6
   b5bae:	3410      	adds	r4, #16
   b5bb0:	f003 ff15 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5bb4:	f5b4 6f92 	cmp.w	r4, #1168	; 0x490
   b5bb8:	d1f7      	bne.n	b5baa <_GLOBAL__sub_I__Z13leerSensorLuzv+0xafe>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b5bba:	482d      	ldr	r0, [pc, #180]	; (b5c70 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbc4>)
String secuencia[30];
   b5bbc:	4d2d      	ldr	r5, [pc, #180]	; (b5c74 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbc8>)
   b5bbe:	4e2e      	ldr	r6, [pc, #184]	; (b5c78 <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbcc>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b5bc0:	2208      	movs	r2, #8
   b5bc2:	2110      	movs	r1, #16
   b5bc4:	f002 f851 	bl	b7c6a <_ZN7MFRC522C1Ehh>
   b5bc8:	2400      	movs	r4, #0
String secuencia[30];
   b5bca:	1928      	adds	r0, r5, r4
   b5bcc:	4631      	mov	r1, r6
   b5bce:	3410      	adds	r4, #16
   b5bd0:	f003 ff05 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5bd4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b5bd8:	d1f7      	bne.n	b5bca <_GLOBAL__sub_I__Z13leerSensorLuzv+0xb1e>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5bda:	4b28      	ldr	r3, [pc, #160]	; (b5c7c <_GLOBAL__sub_I__Z13leerSensorLuzv+0xbd0>)
   b5bdc:	2200      	movs	r2, #0
   b5bde:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b5be2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5be6:	609a      	str	r2, [r3, #8]
   b5be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5bec:	2002      	movs	r0, #2
   b5bee:	f003 bc89 	b.w	b9504 <set_system_mode>
   b5bf2:	bf00      	nop
   b5bf4:	2003e658 	.word	0x2003e658
   b5bf8:	000bb81f 	.word	0x000bb81f
   b5bfc:	2003e668 	.word	0x2003e668
   b5c00:	000bb825 	.word	0x000bb825
   b5c04:	2003e678 	.word	0x2003e678
   b5c08:	000bb82b 	.word	0x000bb82b
   b5c0c:	2003e688 	.word	0x2003e688
   b5c10:	000bb831 	.word	0x000bb831
   b5c14:	2003e698 	.word	0x2003e698
   b5c18:	000bb837 	.word	0x000bb837
   b5c1c:	2003e6a8 	.word	0x2003e6a8
   b5c20:	000bb5a1 	.word	0x000bb5a1
   b5c24:	2003d704 	.word	0x2003d704
   b5c28:	000bb5a9 	.word	0x000bb5a9
   b5c2c:	2003d714 	.word	0x2003d714
   b5c30:	000bb5b1 	.word	0x000bb5b1
   b5c34:	2003d724 	.word	0x2003d724
   b5c38:	000bb5d1 	.word	0x000bb5d1
   b5c3c:	2003d734 	.word	0x2003d734
   b5c40:	000bb5db 	.word	0x000bb5db
   b5c44:	2003d744 	.word	0x2003d744
   b5c48:	000bb5e5 	.word	0x000bb5e5
   b5c4c:	2003d754 	.word	0x2003d754
   b5c50:	000bb5ef 	.word	0x000bb5ef
   b5c54:	2003d764 	.word	0x2003d764
   b5c58:	000bb603 	.word	0x000bb603
   b5c5c:	2003d774 	.word	0x2003d774
   b5c60:	000bb60d 	.word	0x000bb60d
   b5c64:	2003d784 	.word	0x2003d784
   b5c68:	000bb617 	.word	0x000bb617
   b5c6c:	2003d794 	.word	0x2003d794
   b5c70:	2003d1c0 	.word	0x2003d1c0
   b5c74:	2003d518 	.word	0x2003d518
   b5c78:	000bb591 	.word	0x000bb591
   b5c7c:	2003c7e4 	.word	0x2003c7e4

000b5c80 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b5c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b5c84:	4f98      	ldr	r7, [pc, #608]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
void showBitmap(int id1, int id2, String msg) {
   b5c86:	b088      	sub	sp, #32
   b5c88:	4606      	mov	r6, r0
   display.clearDisplay();
   b5c8a:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b5c8c:	460c      	mov	r4, r1
   b5c8e:	4615      	mov	r5, r2
   display.clearDisplay();
   b5c90:	f002 feaa 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5c94:	2300      	movs	r3, #0
   b5c96:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b5c98:	4b94      	ldr	r3, [pc, #592]	; (b5eec <_Z10showBitmapii6String+0x26c>)
   b5c9a:	2201      	movs	r2, #1
   b5c9c:	701a      	strb	r2, [r3, #0]
   b5c9e:	f003 fad9 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b5ca2:	4b93      	ldr	r3, [pc, #588]	; (b5ef0 <_Z10showBitmapii6String+0x270>)
   b5ca4:	6018      	str	r0, [r3, #0]
   switch (id1)
   b5ca6:	2e03      	cmp	r6, #3
   b5ca8:	d813      	bhi.n	b5cd2 <_Z10showBitmapii6String+0x52>
   b5caa:	e8df f016 	tbh	[pc, r6, lsl #1]
   b5cae:	0004      	.short	0x0004
   b5cb0:	00ed002a 	.word	0x00ed002a
   b5cb4:	0113      	.short	0x0113
      switch (id2)
   b5cb6:	2c01      	cmp	r4, #1
   b5cb8:	d007      	beq.n	b5cca <_Z10showBitmapii6String+0x4a>
   b5cba:	2c02      	cmp	r4, #2
   b5cbc:	d007      	beq.n	b5cce <_Z10showBitmapii6String+0x4e>
   b5cbe:	b944      	cbnz	r4, b5cd2 <_Z10showBitmapii6String+0x52>
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b5cc0:	498c      	ldr	r1, [pc, #560]	; (b5ef4 <_Z10showBitmapii6String+0x274>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b5cc2:	488d      	ldr	r0, [pc, #564]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5cc4:	f005 fab8 	bl	bb238 <strcpy>
         break;
   b5cc8:	e00c      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b5cca:	498c      	ldr	r1, [pc, #560]	; (b5efc <_Z10showBitmapii6String+0x27c>)
   b5ccc:	e7f9      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b5cce:	498c      	ldr	r1, [pc, #560]	; (b5f00 <_Z10showBitmapii6String+0x280>)
   b5cd0:	e7f7      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b5cd2:	498c      	ldr	r1, [pc, #560]	; (b5f04 <_Z10showBitmapii6String+0x284>)
   b5cd4:	4888      	ldr	r0, [pc, #544]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5cd6:	f005 faaf 	bl	bb238 <strcpy>
         Serial.println("Bitmap not available.");
   b5cda:	f004 fa33 	bl	ba144 <_Z16_fetch_usbserialv>
   b5cde:	4989      	ldr	r1, [pc, #548]	; (b5f04 <_Z10showBitmapii6String+0x284>)
   b5ce0:	f003 ff4b 	bl	b9b7a <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b5ce4:	f004 fa2e 	bl	ba144 <_Z16_fetch_usbserialv>
   b5ce8:	4983      	ldr	r1, [pc, #524]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5cea:	f003 ff46 	bl	b9b7a <_ZN5Print7printlnEPKc>
   display.print(buf);
   b5cee:	4982      	ldr	r1, [pc, #520]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5cf0:	487d      	ldr	r0, [pc, #500]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5cf2:	f003 ff2f 	bl	b9b54 <_ZN5Print5printEPKc>
   display.display();
   b5cf6:	487c      	ldr	r0, [pc, #496]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
}
   b5cf8:	b008      	add	sp, #32
   b5cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b5cfe:	f003 b8db 	b.w	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b5d02:	2c06      	cmp	r4, #6
   b5d04:	d8e5      	bhi.n	b5cd2 <_Z10showBitmapii6String+0x52>
   b5d06:	e8df f004 	tbb	[pc, r4]
   b5d0a:	3704      	.short	0x3704
   b5d0c:	b0906c51 	.word	0xb0906c51
   b5d10:	bd          	.byte	0xbd
   b5d11:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b5d12:	4629      	mov	r1, r5
   b5d14:	a804      	add	r0, sp, #16
   b5d16:	f003 fe85 	bl	b9a24 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b5d1a:	497b      	ldr	r1, [pc, #492]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5d1c:	a804      	add	r0, sp, #16
   b5d1e:	f003 fed4 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b5d22:	2140      	movs	r1, #64	; 0x40
   b5d24:	6802      	ldr	r2, [r0, #0]
   b5d26:	4874      	ldr	r0, [pc, #464]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5d28:	f003 fc98 	bl	b965c <snprintf>
class StringSumHelper : public String
   b5d2c:	a804      	add	r0, sp, #16
   b5d2e:	f003 fe0b 	bl	b9948 <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b5d32:	2414      	movs	r4, #20
   b5d34:	2501      	movs	r5, #1
   b5d36:	2632      	movs	r6, #50	; 0x32
   b5d38:	2228      	movs	r2, #40	; 0x28
   b5d3a:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b5d3e:	4611      	mov	r1, r2
   b5d40:	4869      	ldr	r0, [pc, #420]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5d42:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b5d44:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b5d46:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b5d4a:	e9cd 4600 	strd	r4, r6, [sp]
   b5d4e:	f001 fc59 	bl	b7604 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b5d52:	4623      	mov	r3, r4
   b5d54:	4622      	mov	r2, r4
   b5d56:	4631      	mov	r1, r6
   b5d58:	4863      	ldr	r0, [pc, #396]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5d5a:	9501      	str	r5, [sp, #4]
   b5d5c:	9700      	str	r7, [sp, #0]
   b5d5e:	f001 fab0 	bl	b72c2 <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b5d62:	2146      	movs	r1, #70	; 0x46
   b5d64:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b5d68:	e9cd 7100 	strd	r7, r1, [sp]
   b5d6c:	2350      	movs	r3, #80	; 0x50
   b5d6e:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b5d70:	485d      	ldr	r0, [pc, #372]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5d72:	f001 fc47 	bl	b7604 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b5d76:	e7b5      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
	StringSumHelper(const String &s) : String(s) {}
   b5d78:	4629      	mov	r1, r5
   b5d7a:	a804      	add	r0, sp, #16
   b5d7c:	f003 fe52 	bl	b9a24 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b5d80:	4961      	ldr	r1, [pc, #388]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5d82:	a804      	add	r0, sp, #16
   b5d84:	f003 fea1 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b5d88:	2140      	movs	r1, #64	; 0x40
   b5d8a:	6802      	ldr	r2, [r0, #0]
   b5d8c:	485a      	ldr	r0, [pc, #360]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5d8e:	f003 fc65 	bl	b965c <snprintf>
class StringSumHelper : public String
   b5d92:	a804      	add	r0, sp, #16
   b5d94:	f003 fdd8 	bl	b9948 <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b5d98:	2328      	movs	r3, #40	; 0x28
   b5d9a:	2001      	movs	r0, #1
   b5d9c:	e9cd 3000 	strd	r3, r0, [sp]
   b5da0:	2214      	movs	r2, #20
   b5da2:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b5da4:	4850      	ldr	r0, [pc, #320]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5da6:	f001 fa8c 	bl	b72c2 <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b5daa:	e79b      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
	StringSumHelper(const String &s) : String(s) {}
   b5dac:	4629      	mov	r1, r5
   b5dae:	a804      	add	r0, sp, #16
   b5db0:	f003 fe38 	bl	b9a24 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b5db4:	4954      	ldr	r1, [pc, #336]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5db6:	a804      	add	r0, sp, #16
   b5db8:	f003 fe87 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b5dbc:	2140      	movs	r1, #64	; 0x40
   b5dbe:	6802      	ldr	r2, [r0, #0]
   b5dc0:	484d      	ldr	r0, [pc, #308]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5dc2:	f003 fc4b 	bl	b965c <snprintf>
class StringSumHelper : public String
   b5dc6:	a804      	add	r0, sp, #16
   b5dc8:	f003 fdbe 	bl	b9948 <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b5dcc:	2364      	movs	r3, #100	; 0x64
   b5dce:	225a      	movs	r2, #90	; 0x5a
   b5dd0:	2101      	movs	r1, #1
   b5dd2:	e9cd 3200 	strd	r3, r2, [sp]
   b5dd6:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b5dda:	2214      	movs	r2, #20
   b5ddc:	231e      	movs	r3, #30
   b5dde:	213c      	movs	r1, #60	; 0x3c
   b5de0:	e7c6      	b.n	b5d70 <_Z10showBitmapii6String+0xf0>
	StringSumHelper(const String &s) : String(s) {}
   b5de2:	4629      	mov	r1, r5
   b5de4:	a804      	add	r0, sp, #16
   b5de6:	f003 fe1d 	bl	b9a24 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b5dea:	4947      	ldr	r1, [pc, #284]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5dec:	a804      	add	r0, sp, #16
   b5dee:	f003 fe6c 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b5df2:	2140      	movs	r1, #64	; 0x40
   b5df4:	6802      	ldr	r2, [r0, #0]
   b5df6:	4840      	ldr	r0, [pc, #256]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5df8:	f003 fc30 	bl	b965c <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b5dfc:	2428      	movs	r4, #40	; 0x28
   b5dfe:	2601      	movs	r6, #1
   b5e00:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b5e02:	a804      	add	r0, sp, #16
   b5e04:	f003 fda0 	bl	b9948 <_ZN6StringD1Ev>
   b5e08:	2334      	movs	r3, #52	; 0x34
   b5e0a:	2214      	movs	r2, #20
   b5e0c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b5e10:	e9cd 4500 	strd	r4, r5, [sp]
   b5e14:	4834      	ldr	r0, [pc, #208]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5e16:	213c      	movs	r1, #60	; 0x3c
   b5e18:	f001 fbf4 	bl	b7604 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b5e1c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b5e20:	e9cd 4500 	strd	r4, r5, [sp]
   b5e24:	2334      	movs	r3, #52	; 0x34
   b5e26:	223c      	movs	r2, #60	; 0x3c
   b5e28:	e7d9      	b.n	b5dde <_Z10showBitmapii6String+0x15e>
	StringSumHelper(const String &s) : String(s) {}
   b5e2a:	4629      	mov	r1, r5
   b5e2c:	a804      	add	r0, sp, #16
   b5e2e:	f003 fdf9 	bl	b9a24 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b5e32:	4935      	ldr	r1, [pc, #212]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5e34:	a804      	add	r0, sp, #16
   b5e36:	f003 fe48 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b5e3a:	2140      	movs	r1, #64	; 0x40
   b5e3c:	6802      	ldr	r2, [r0, #0]
   b5e3e:	482e      	ldr	r0, [pc, #184]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5e40:	f003 fc0c 	bl	b965c <snprintf>
class StringSumHelper : public String
   b5e44:	a804      	add	r0, sp, #16
   b5e46:	f003 fd7f 	bl	b9948 <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b5e4a:	2301      	movs	r3, #1
   b5e4c:	9300      	str	r3, [sp, #0]
   b5e4e:	2232      	movs	r2, #50	; 0x32
   b5e50:	230f      	movs	r3, #15
   b5e52:	213c      	movs	r1, #60	; 0x3c
   b5e54:	4824      	ldr	r0, [pc, #144]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5e56:	f001 fbaa 	bl	b75ae <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b5e5a:	2328      	movs	r3, #40	; 0x28
   b5e5c:	2200      	movs	r2, #0
   b5e5e:	e9cd 3200 	strd	r3, r2, [sp]
   b5e62:	210a      	movs	r1, #10
   b5e64:	235a      	movs	r3, #90	; 0x5a
   b5e66:	2232      	movs	r2, #50	; 0x32
   b5e68:	e79c      	b.n	b5da4 <_Z10showBitmapii6String+0x124>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b5e6a:	4927      	ldr	r1, [pc, #156]	; (b5f08 <_Z10showBitmapii6String+0x288>)
   b5e6c:	4822      	ldr	r0, [pc, #136]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5e6e:	f005 f9e3 	bl	bb238 <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b5e72:	2301      	movs	r3, #1
   b5e74:	9300      	str	r3, [sp, #0]
   b5e76:	481c      	ldr	r0, [pc, #112]	; (b5ee8 <_Z10showBitmapii6String+0x268>)
   b5e78:	230f      	movs	r3, #15
   b5e7a:	2228      	movs	r2, #40	; 0x28
   b5e7c:	213c      	movs	r1, #60	; 0x3c
   b5e7e:	f001 fb96 	bl	b75ae <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b5e82:	e72f      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b5e84:	4921      	ldr	r1, [pc, #132]	; (b5f0c <_Z10showBitmapii6String+0x28c>)
   b5e86:	e71c      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
      switch (id2)
   b5e88:	2c06      	cmp	r4, #6
   b5e8a:	f63f af22 	bhi.w	b5cd2 <_Z10showBitmapii6String+0x52>
   b5e8e:	e8df f004 	tbb	[pc, r4]
   b5e92:	0604      	.short	0x0604
   b5e94:	1d0c0a08 	.word	0x1d0c0a08
   b5e98:	1f          	.byte	0x1f
   b5e99:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b5e9a:	491d      	ldr	r1, [pc, #116]	; (b5f10 <_Z10showBitmapii6String+0x290>)
   b5e9c:	e711      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b5e9e:	491d      	ldr	r1, [pc, #116]	; (b5f14 <_Z10showBitmapii6String+0x294>)
   b5ea0:	e70f      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b5ea2:	491d      	ldr	r1, [pc, #116]	; (b5f18 <_Z10showBitmapii6String+0x298>)
   b5ea4:	e70d      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b5ea6:	491d      	ldr	r1, [pc, #116]	; (b5f1c <_Z10showBitmapii6String+0x29c>)
   b5ea8:	e70b      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
	StringSumHelper(const char *p) : String(p) {}
   b5eaa:	491d      	ldr	r1, [pc, #116]	; (b5f20 <_Z10showBitmapii6String+0x2a0>)
   b5eac:	a804      	add	r0, sp, #16
   b5eae:	f003 fd96 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b5eb2:	4629      	mov	r1, r5
   b5eb4:	a804      	add	r0, sp, #16
   b5eb6:	f003 fdfc 	bl	b9ab2 <_ZplRK15StringSumHelperRK6String>
   b5eba:	2140      	movs	r1, #64	; 0x40
   b5ebc:	6802      	ldr	r2, [r0, #0]
   b5ebe:	480e      	ldr	r0, [pc, #56]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5ec0:	f003 fbcc 	bl	b965c <snprintf>
class StringSumHelper : public String
   b5ec4:	a804      	add	r0, sp, #16
   b5ec6:	f003 fd3f 	bl	b9948 <_ZN6StringD1Ev>
         break;
   b5eca:	e70b      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b5ecc:	4915      	ldr	r1, [pc, #84]	; (b5f24 <_Z10showBitmapii6String+0x2a4>)
   b5ece:	e6f8      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b5ed0:	4915      	ldr	r1, [pc, #84]	; (b5f28 <_Z10showBitmapii6String+0x2a8>)
   b5ed2:	e6f6      	b.n	b5cc2 <_Z10showBitmapii6String+0x42>
      switch (id2)
   b5ed4:	2c00      	cmp	r4, #0
   b5ed6:	f47f aefc 	bne.w	b5cd2 <_Z10showBitmapii6String+0x52>
         snprintf(buf, sizeof(buf), msg);
   b5eda:	682a      	ldr	r2, [r5, #0]
   b5edc:	4806      	ldr	r0, [pc, #24]	; (b5ef8 <_Z10showBitmapii6String+0x278>)
   b5ede:	2140      	movs	r1, #64	; 0x40
   b5ee0:	f003 fbbc 	bl	b965c <snprintf>
         break;
   b5ee4:	e6fe      	b.n	b5ce4 <_Z10showBitmapii6String+0x64>
   b5ee6:	bf00      	nop
   b5ee8:	2003ce18 	.word	0x2003ce18
   b5eec:	2003c7f1 	.word	0x2003c7f1
   b5ef0:	2003d6f8 	.word	0x2003d6f8
   b5ef4:	000bb83d 	.word	0x000bb83d
   b5ef8:	2003cdcd 	.word	0x2003cdcd
   b5efc:	000bb849 	.word	0x000bb849
   b5f00:	000bb857 	.word	0x000bb857
   b5f04:	000bb863 	.word	0x000bb863
   b5f08:	000bb879 	.word	0x000bb879
   b5f0c:	000bb88a 	.word	0x000bb88a
   b5f10:	000bb897 	.word	0x000bb897
   b5f14:	000bb8b7 	.word	0x000bb8b7
   b5f18:	000bb8d7 	.word	0x000bb8d7
   b5f1c:	000bb8f2 	.word	0x000bb8f2
   b5f20:	000bb907 	.word	0x000bb907
   b5f24:	000bb91a 	.word	0x000bb91a
   b5f28:	000bb938 	.word	0x000bb938

000b5f2c <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b5f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b5f2e:	4b24      	ldr	r3, [pc, #144]	; (b5fc0 <_Z8showPortii+0x94>)
   b5f30:	689b      	ldr	r3, [r3, #8]
   b5f32:	bb4b      	cbnz	r3, b5f88 <_Z8showPortii+0x5c>
      switch (puerto)
   b5f34:	2902      	cmp	r1, #2
   b5f36:	d011      	beq.n	b5f5c <_Z8showPortii+0x30>
   b5f38:	2904      	cmp	r1, #4
   b5f3a:	d016      	beq.n	b5f6a <_Z8showPortii+0x3e>
   b5f3c:	b9e1      	cbnz	r1, b5f78 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b5f3e:	4921      	ldr	r1, [pc, #132]	; (b5fc4 <_Z8showPortii+0x98>)
   b5f40:	4668      	mov	r0, sp
   b5f42:	f003 fd4c 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5f46:	466a      	mov	r2, sp
   b5f48:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b5f4a:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b5f4c:	f7ff fe98 	bl	b5c80 <_Z10showBitmapii6String>
   b5f50:	4668      	mov	r0, sp
   b5f52:	f003 fcf9 	bl	b9948 <_ZN6StringD1Ev>
}
   b5f56:	b005      	add	sp, #20
   b5f58:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b5f5c:	4919      	ldr	r1, [pc, #100]	; (b5fc4 <_Z8showPortii+0x98>)
   b5f5e:	4668      	mov	r0, sp
   b5f60:	f003 fd3d 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5f64:	466a      	mov	r2, sp
   b5f66:	2104      	movs	r1, #4
   b5f68:	e7ef      	b.n	b5f4a <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b5f6a:	4916      	ldr	r1, [pc, #88]	; (b5fc4 <_Z8showPortii+0x98>)
   b5f6c:	4668      	mov	r0, sp
   b5f6e:	f003 fd36 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5f72:	466a      	mov	r2, sp
   b5f74:	2105      	movs	r1, #5
   b5f76:	e7e8      	b.n	b5f4a <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b5f78:	4912      	ldr	r1, [pc, #72]	; (b5fc4 <_Z8showPortii+0x98>)
   b5f7a:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b5f7c:	f003 fd2f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5f80:	466a      	mov	r2, sp
   b5f82:	2103      	movs	r1, #3
   b5f84:	2002      	movs	r0, #2
   b5f86:	e7e1      	b.n	b5f4c <_Z8showPortii+0x20>
      switch (puerto)
   b5f88:	2904      	cmp	r1, #4
   b5f8a:	d00a      	beq.n	b5fa2 <_Z8showPortii+0x76>
   b5f8c:	2906      	cmp	r1, #6
   b5f8e:	d00f      	beq.n	b5fb0 <_Z8showPortii+0x84>
   b5f90:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b5f92:	4668      	mov	r0, sp
   b5f94:	490b      	ldr	r1, [pc, #44]	; (b5fc4 <_Z8showPortii+0x98>)
      switch (puerto)
   b5f96:	d1f1      	bne.n	b5f7c <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b5f98:	f003 fd21 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5f9c:	466a      	mov	r2, sp
   b5f9e:	2100      	movs	r1, #0
   b5fa0:	e7d3      	b.n	b5f4a <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b5fa2:	4908      	ldr	r1, [pc, #32]	; (b5fc4 <_Z8showPortii+0x98>)
   b5fa4:	4668      	mov	r0, sp
   b5fa6:	f003 fd1a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5faa:	466a      	mov	r2, sp
   b5fac:	2101      	movs	r1, #1
   b5fae:	e7cc      	b.n	b5f4a <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b5fb0:	4904      	ldr	r1, [pc, #16]	; (b5fc4 <_Z8showPortii+0x98>)
   b5fb2:	4668      	mov	r0, sp
   b5fb4:	f003 fd13 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5fb8:	466a      	mov	r2, sp
   b5fba:	2102      	movs	r1, #2
   b5fbc:	e7c5      	b.n	b5f4a <_Z8showPortii+0x1e>
   b5fbe:	bf00      	nop
   b5fc0:	2003c74c 	.word	0x2003c74c
   b5fc4:	000bb591 	.word	0x000bb591

000b5fc8 <_Z13borradoBLOQUEi>:
   switch (modo)
   b5fc8:	2801      	cmp	r0, #1
{
   b5fca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b5fcc:	d003      	beq.n	b5fd6 <_Z13borradoBLOQUEi+0xe>
   b5fce:	2802      	cmp	r0, #2
   b5fd0:	d03c      	beq.n	b604c <_Z13borradoBLOQUEi+0x84>
}
   b5fd2:	b004      	add	sp, #16
   b5fd4:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b5fd6:	4b37      	ldr	r3, [pc, #220]	; (b60b4 <_Z13borradoBLOQUEi+0xec>)
   b5fd8:	681c      	ldr	r4, [r3, #0]
   b5fda:	b974      	cbnz	r4, b5ffa <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b5fdc:	f7fe f874 	bl	b40c8 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b5fe0:	4935      	ldr	r1, [pc, #212]	; (b60b8 <_Z13borradoBLOQUEi+0xf0>)
   b5fe2:	4668      	mov	r0, sp
   b5fe4:	f003 fcfb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b5fe8:	466a      	mov	r2, sp
   b5fea:	2100      	movs	r1, #0
   b5fec:	2003      	movs	r0, #3
   b5fee:	f7ff fe47 	bl	b5c80 <_Z10showBitmapii6String>
   b5ff2:	4668      	mov	r0, sp
   b5ff4:	f003 fca8 	bl	b9948 <_ZN6StringD1Ev>
   b5ff8:	e7eb      	b.n	b5fd2 <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b5ffa:	2c01      	cmp	r4, #1
   b5ffc:	d11e      	bne.n	b603c <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b5ffe:	2200      	movs	r2, #0
         numBloque = 0;
   b6000:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b6002:	492e      	ldr	r1, [pc, #184]	; (b60bc <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6004:	4b2e      	ldr	r3, [pc, #184]	; (b60c0 <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b6006:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6008:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b600a:	4a2e      	ldr	r2, [pc, #184]	; (b60c4 <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b600c:	4b2e      	ldr	r3, [pc, #184]	; (b60c8 <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b600e:	482f      	ldr	r0, [pc, #188]	; (b60cc <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6010:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6012:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6014:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b6016:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b6018:	bf04      	itt	eq
   b601a:	2303      	moveq	r3, #3
   b601c:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b601e:	4b2c      	ldr	r3, [pc, #176]	; (b60d0 <_Z13borradoBLOQUEi+0x108>)
   b6020:	6819      	ldr	r1, [r3, #0]
   b6022:	3101      	adds	r1, #1
            puertoDigital=6;
   b6024:	bf04      	itt	eq
   b6026:	2106      	moveq	r1, #6
   b6028:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b602a:	6811      	ldr	r1, [r2, #0]
   b602c:	1a09      	subs	r1, r1, r0
   b602e:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b6030:	4928      	ldr	r1, [pc, #160]	; (b60d4 <_Z13borradoBLOQUEi+0x10c>)
   b6032:	681a      	ldr	r2, [r3, #0]
   b6034:	6809      	ldr	r1, [r1, #0]
   b6036:	1a52      	subs	r2, r2, r1
   b6038:	601a      	str	r2, [r3, #0]
   b603a:	e7d1      	b.n	b5fe0 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b603c:	f004 f882 	bl	ba144 <_Z16_fetch_usbserialv>
   b6040:	4925      	ldr	r1, [pc, #148]	; (b60d8 <_Z13borradoBLOQUEi+0x110>)
}
   b6042:	b004      	add	sp, #16
   b6044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b6048:	f003 bd97 	b.w	b9b7a <_ZN5Print7printlnEPKc>
      if (bucle) {
   b604c:	4e23      	ldr	r6, [pc, #140]	; (b60dc <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b604e:	4a24      	ldr	r2, [pc, #144]	; (b60e0 <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b6050:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6052:	6813      	ldr	r3, [r2, #0]
   b6054:	4d23      	ldr	r5, [pc, #140]	; (b60e4 <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b6056:	b19c      	cbz	r4, b6080 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b6058:	6829      	ldr	r1, [r5, #0]
   b605a:	3101      	adds	r1, #1
   b605c:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b605e:	4668      	mov	r0, sp
   b6060:	4921      	ldr	r1, [pc, #132]	; (b60e8 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b6062:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6064:	f003 fcbb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6068:	466a      	mov	r2, sp
   b606a:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b606c:	2003      	movs	r0, #3
   b606e:	f7ff fe07 	bl	b5c80 <_Z10showBitmapii6String>
   b6072:	4668      	mov	r0, sp
   b6074:	f003 fc68 	bl	b9948 <_ZN6StringD1Ev>
      bucle = false;
   b6078:	2300      	movs	r3, #0
   b607a:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b607c:	602b      	str	r3, [r5, #0]
}
   b607e:	e7a8      	b.n	b5fd2 <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6080:	481a      	ldr	r0, [pc, #104]	; (b60ec <_Z13borradoBLOQUEi+0x124>)
   b6082:	1e59      	subs	r1, r3, #1
   b6084:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b6088:	3002      	adds	r0, #2
   b608a:	d10c      	bne.n	b60a6 <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b608c:	4818      	ldr	r0, [pc, #96]	; (b60f0 <_Z13borradoBLOQUEi+0x128>)
   b608e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b6092:	3102      	adds	r1, #2
   b6094:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6096:	4914      	ldr	r1, [pc, #80]	; (b60e8 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b6098:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b609a:	4668      	mov	r0, sp
   b609c:	f003 fc9f 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b60a0:	466a      	mov	r2, sp
   b60a2:	4621      	mov	r1, r4
   b60a4:	e7e2      	b.n	b606c <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b60a6:	f004 f84d 	bl	ba144 <_Z16_fetch_usbserialv>
   b60aa:	4912      	ldr	r1, [pc, #72]	; (b60f4 <_Z13borradoBLOQUEi+0x12c>)
   b60ac:	f003 fd65 	bl	b9b7a <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b60b0:	4910      	ldr	r1, [pc, #64]	; (b60f4 <_Z13borradoBLOQUEi+0x12c>)
   b60b2:	e7f2      	b.n	b609a <_Z13borradoBLOQUEi+0xd2>
   b60b4:	2003c744 	.word	0x2003c744
   b60b8:	000bb958 	.word	0x000bb958
   b60bc:	2003c7e1 	.word	0x2003c7e1
   b60c0:	2003c7f0 	.word	0x2003c7f0
   b60c4:	2003d508 	.word	0x2003d508
   b60c8:	2003d4f0 	.word	0x2003d4f0
   b60cc:	2003d50c 	.word	0x2003d50c
   b60d0:	2003c748 	.word	0x2003c748
   b60d4:	2003d510 	.word	0x2003d510
   b60d8:	000bb974 	.word	0x000bb974
   b60dc:	2003cdcc 	.word	0x2003cdcc
   b60e0:	2003d500 	.word	0x2003d500
   b60e4:	2003d700 	.word	0x2003d700
   b60e8:	000bb984 	.word	0x000bb984
   b60ec:	2003d1d0 	.word	0x2003d1d0
   b60f0:	2003ce88 	.word	0x2003ce88
   b60f4:	000bb99e 	.word	0x000bb99e

000b60f8 <_Z10reproducirv>:
void reproducir() {
   b60f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b60fc:	4b1e      	ldr	r3, [pc, #120]	; (b6178 <_Z10reproducirv+0x80>)
   b60fe:	781c      	ldrb	r4, [r3, #0]
   b6100:	bb34      	cbnz	r4, b6150 <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b6102:	f8df a08c 	ldr.w	sl, [pc, #140]	; b6190 <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6106:	4e1d      	ldr	r6, [pc, #116]	; (b617c <_Z10reproducirv+0x84>)
   b6108:	4f1d      	ldr	r7, [pc, #116]	; (b6180 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b610a:	f8da 3000 	ldr.w	r3, [sl]
   b610e:	42a3      	cmp	r3, r4
   b6110:	dd2f      	ble.n	b6172 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6112:	f004 f817 	bl	ba144 <_Z16_fetch_usbserialv>
   b6116:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b611a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b611e:	4919      	ldr	r1, [pc, #100]	; (b6184 <_Z10reproducirv+0x8c>)
   b6120:	f7fd fffe 	bl	b4120 <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b6124:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b6128:	1c42      	adds	r2, r0, #1
   b612a:	d105      	bne.n	b6138 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b612c:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b6130:	46a1      	mov	r9, r4
            iteracion = 0;            
   b6132:	2500      	movs	r5, #0
         i++;
   b6134:	3401      	adds	r4, #1
      while ( i < posicion) {
   b6136:	e7e8      	b.n	b610a <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b6138:	1c83      	adds	r3, r0, #2
   b613a:	d104      	bne.n	b6146 <_Z10reproducirv+0x4e>
            iteracion++;
   b613c:	3501      	adds	r5, #1
               i = inicio;
   b613e:	45a8      	cmp	r8, r5
   b6140:	bfc8      	it	gt
   b6142:	464c      	movgt	r4, r9
   b6144:	e7f6      	b.n	b6134 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b6146:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b614a:	f7fe fca1 	bl	b4a90 <_Z14reproducirNOTAii>
   b614e:	e7f1      	b.n	b6134 <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b6150:	f003 fff8 	bl	ba144 <_Z16_fetch_usbserialv>
   b6154:	490c      	ldr	r1, [pc, #48]	; (b6188 <_Z10reproducirv+0x90>)
   b6156:	f003 fd10 	bl	b9b7a <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b615a:	490c      	ldr	r1, [pc, #48]	; (b618c <_Z10reproducirv+0x94>)
   b615c:	4668      	mov	r0, sp
   b615e:	f003 fc3e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6162:	2002      	movs	r0, #2
   b6164:	466a      	mov	r2, sp
   b6166:	2104      	movs	r1, #4
   b6168:	f7ff fd8a 	bl	b5c80 <_Z10showBitmapii6String>
   b616c:	4668      	mov	r0, sp
   b616e:	f003 fbeb 	bl	b9948 <_ZN6StringD1Ev>
}
   b6172:	b004      	add	sp, #16
   b6174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6178:	2003cdcc 	.word	0x2003cdcc
   b617c:	2003ce88 	.word	0x2003ce88
   b6180:	2003d1d0 	.word	0x2003d1d0
   b6184:	000bb9af 	.word	0x000bb9af
   b6188:	000bb9b7 	.word	0x000bb9b7
   b618c:	000bb591 	.word	0x000bb591
   b6190:	2003d500 	.word	0x2003d500

000b6194 <_Z10cambioModoi>:
{
   b6194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b6196:	4604      	mov	r4, r0
   b6198:	b9e0      	cbnz	r0, b61d4 <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b619a:	f003 ffd3 	bl	ba144 <_Z16_fetch_usbserialv>
   b619e:	4918      	ldr	r1, [pc, #96]	; (b6200 <_Z10cambioModoi+0x6c>)
   b61a0:	f003 fceb 	bl	b9b7a <_ZN5Print7printlnEPKc>
      MODE = 0;
   b61a4:	4b17      	ldr	r3, [pc, #92]	; (b6204 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b61a6:	4918      	ldr	r1, [pc, #96]	; (b6208 <_Z10cambioModoi+0x74>)
      MODE = 0;
   b61a8:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b61aa:	4668      	mov	r0, sp
   b61ac:	f003 fc17 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b61b0:	2003      	movs	r0, #3
   b61b2:	466a      	mov	r2, sp
   b61b4:	2100      	movs	r1, #0
   b61b6:	f7ff fd63 	bl	b5c80 <_Z10showBitmapii6String>
   b61ba:	4668      	mov	r0, sp
   b61bc:	f003 fbc4 	bl	b9948 <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b61c0:	f004 fa80 	bl	ba6c4 <_Z21__fetch_global_EEPROMv>
   b61c4:	490f      	ldr	r1, [pc, #60]	; (b6204 <_Z10cambioModoi+0x70>)
   b61c6:	2201      	movs	r2, #1
   b61c8:	2000      	movs	r0, #0
}
   b61ca:	b004      	add	sp, #16
   b61cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b61d0:	f003 b858 	b.w	b9284 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b61d4:	2801      	cmp	r0, #1
   b61d6:	d108      	bne.n	b61ea <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b61d8:	f003 ffb4 	bl	ba144 <_Z16_fetch_usbserialv>
   b61dc:	490b      	ldr	r1, [pc, #44]	; (b620c <_Z10cambioModoi+0x78>)
   b61de:	f003 fccc 	bl	b9b7a <_ZN5Print7printlnEPKc>
      MODE = 1;
   b61e2:	4b08      	ldr	r3, [pc, #32]	; (b6204 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b61e4:	490a      	ldr	r1, [pc, #40]	; (b6210 <_Z10cambioModoi+0x7c>)
      MODE = 1;
   b61e6:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b61e8:	e7df      	b.n	b61aa <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b61ea:	2802      	cmp	r0, #2
   b61ec:	d1e8      	bne.n	b61c0 <_Z10cambioModoi+0x2c>
      Serial.println("Modo MUSICA detectado");
   b61ee:	f003 ffa9 	bl	ba144 <_Z16_fetch_usbserialv>
   b61f2:	4908      	ldr	r1, [pc, #32]	; (b6214 <_Z10cambioModoi+0x80>)
   b61f4:	f003 fcc1 	bl	b9b7a <_ZN5Print7printlnEPKc>
      MODE = 2;
   b61f8:	4b02      	ldr	r3, [pc, #8]	; (b6204 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b61fa:	4907      	ldr	r1, [pc, #28]	; (b6218 <_Z10cambioModoi+0x84>)
      MODE = 2;
   b61fc:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b61fe:	e7d4      	b.n	b61aa <_Z10cambioModoi+0x16>
   b6200:	000bb9dd 	.word	0x000bb9dd
   b6204:	2003c7e2 	.word	0x2003c7e2
   b6208:	000bb9f3 	.word	0x000bb9f3
   b620c:	000bba0c 	.word	0x000bba0c
   b6210:	000bba24 	.word	0x000bba24
   b6214:	000bba3f 	.word	0x000bba3f
   b6218:	000bba55 	.word	0x000bba55

000b621c <loop>:
{
   b621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b6220:	f8df 82d8 	ldr.w	r8, [pc, #728]	; b64fc <loop+0x2e0>
   b6224:	f898 3000 	ldrb.w	r3, [r8]
{
   b6228:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
  if (iniciando) {
   b622c:	2b00      	cmp	r3, #0
   b622e:	d034      	beq.n	b629a <loop+0x7e>
   b6230:	f003 f810 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6234:	4f9a      	ldr	r7, [pc, #616]	; (b64a0 <loop+0x284>)
    while(currentTime-startTime<limit){
   b6236:	f8df 9290 	ldr.w	r9, [pc, #656]	; b64c8 <loop+0x2ac>
   b623a:	f8df a290 	ldr.w	sl, [pc, #656]	; b64cc <loop+0x2b0>
    currentTime = millis();
   b623e:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6240:	f8d9 2000 	ldr.w	r2, [r9]
   b6244:	683b      	ldr	r3, [r7, #0]
   b6246:	1a9b      	subs	r3, r3, r2
   b6248:	f8da 2000 	ldr.w	r2, [sl]
   b624c:	4293      	cmp	r3, r2
   b624e:	d203      	bcs.n	b6258 <loop+0x3c>
   b6250:	f003 f800 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b6254:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6256:	e7f3      	b.n	b6240 <loop+0x24>
    display.clearDisplay();
   b6258:	4e92      	ldr	r6, [pc, #584]	; (b64a4 <loop+0x288>)
   b625a:	4630      	mov	r0, r6
   b625c:	f002 fbc4 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b6260:	2101      	movs	r1, #1
   b6262:	4630      	mov	r0, r6
   b6264:	f001 fcfb 	bl	b7c5e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6268:	2400      	movs	r4, #0
   b626a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b626e:	e9c6 4304 	strd	r4, r3, [r6, #16]
    if( MODE == 0 )
   b6272:	4b8d      	ldr	r3, [pc, #564]	; (b64a8 <loop+0x28c>)
      showBitmap(0,0,"");
   b6274:	498d      	ldr	r1, [pc, #564]	; (b64ac <loop+0x290>)
    if( MODE == 0 )
   b6276:	781d      	ldrb	r5, [r3, #0]
      showBitmap(0,0,"");
   b6278:	a8c2      	add	r0, sp, #776	; 0x308
    if( MODE == 0 )
   b627a:	2d00      	cmp	r5, #0
   b627c:	d15d      	bne.n	b633a <loop+0x11e>
      showBitmap(0,0,"");
   b627e:	f003 fbae 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6282:	aac2      	add	r2, sp, #776	; 0x308
   b6284:	4629      	mov	r1, r5
   b6286:	4628      	mov	r0, r5
      showBitmap(1,2,"Zumbador:");
   b6288:	f7ff fcfa 	bl	b5c80 <_Z10showBitmapii6String>
   b628c:	a8c2      	add	r0, sp, #776	; 0x308
   b628e:	f003 fb5b 	bl	b9948 <_ZN6StringD1Ev>
    iniciando = false;
   b6292:	2300      	movs	r3, #0
   b6294:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6298:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b629a:	4885      	ldr	r0, [pc, #532]	; (b64b0 <loop+0x294>)
   b629c:	4e85      	ldr	r6, [pc, #532]	; (b64b4 <loop+0x298>)
   b629e:	f001 ff71 	bl	b8184 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b62a2:	b190      	cbz	r0, b62ca <loop+0xae>
    Serial.print("Tag Detectada --> ");
   b62a4:	f003 ff4e 	bl	ba144 <_Z16_fetch_usbserialv>
   b62a8:	4983      	ldr	r1, [pc, #524]	; (b64b8 <loop+0x29c>)
   b62aa:	f003 fc53 	bl	b9b54 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b62ae:	4880      	ldr	r0, [pc, #512]	; (b64b0 <loop+0x294>)
   b62b0:	f002 f939 	bl	b8526 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b62b4:	4881      	ldr	r0, [pc, #516]	; (b64bc <loop+0x2a0>)
   b62b6:	f7fe fd7d 	bl	b4db4 <_Z8getTagIDPi>
    play = false;
   b62ba:	2300      	movs	r3, #0
   b62bc:	7033      	strb	r3, [r6, #0]
    if ( MODE == 0 ) {
   b62be:	4b7a      	ldr	r3, [pc, #488]	; (b64a8 <loop+0x28c>)
   b62c0:	781b      	ldrb	r3, [r3, #0]
   b62c2:	2b00      	cmp	r3, #0
   b62c4:	d161      	bne.n	b638a <loop+0x16e>
      pitidoOFF0();
   b62c6:	f7fe f9ae 	bl	b4626 <_Z10pitidoOFF0v>
  if (!play && init) {
   b62ca:	7833      	ldrb	r3, [r6, #0]
   b62cc:	b923      	cbnz	r3, b62d8 <loop+0xbc>
   b62ce:	4b7c      	ldr	r3, [pc, #496]	; (b64c0 <loop+0x2a4>)
   b62d0:	781b      	ldrb	r3, [r3, #0]
   b62d2:	b10b      	cbz	r3, b62d8 <loop+0xbc>
    ledApagar();
   b62d4:	f7fe f8fe 	bl	b44d4 <_Z9ledApagarv>
  if (bitmap) {
   b62d8:	4d7a      	ldr	r5, [pc, #488]	; (b64c4 <loop+0x2a8>)
   b62da:	782b      	ldrb	r3, [r5, #0]
   b62dc:	2b00      	cmp	r3, #0
   b62de:	d065      	beq.n	b63ac <loop+0x190>
   b62e0:	f002 ffb8 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b62e4:	4b6e      	ldr	r3, [pc, #440]	; (b64a0 <loop+0x284>)
   b62e6:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b62e8:	4b77      	ldr	r3, [pc, #476]	; (b64c8 <loop+0x2ac>)
   b62ea:	681b      	ldr	r3, [r3, #0]
   b62ec:	1ac0      	subs	r0, r0, r3
   b62ee:	4b77      	ldr	r3, [pc, #476]	; (b64cc <loop+0x2b0>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	4298      	cmp	r0, r3
   b62f4:	d35a      	bcc.n	b63ac <loop+0x190>
   b62f6:	486b      	ldr	r0, [pc, #428]	; (b64a4 <loop+0x288>)
      for (int i = 0; i < posicion; i++)
   b62f8:	4f75      	ldr	r7, [pc, #468]	; (b64d0 <loop+0x2b4>)
          snprintf(buf, sizeof(buf), "...");
   b62fa:	f8df 8204 	ldr.w	r8, [pc, #516]	; b6500 <loop+0x2e4>
      bitmap=false;
   b62fe:	2400      	movs	r4, #0
   b6300:	6104      	str	r4, [r0, #16]
   b6302:	702c      	strb	r4, [r5, #0]
      display.clearDisplay();
   b6304:	f002 fb70 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b6308:	4866      	ldr	r0, [pc, #408]	; (b64a4 <loop+0x288>)
          snprintf(buf, sizeof(buf), "...");
   b630a:	4d72      	ldr	r5, [pc, #456]	; (b64d4 <loop+0x2b8>)
      display.display();
   b630c:	f002 fdd4 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6310:	683b      	ldr	r3, [r7, #0]
   b6312:	42a3      	cmp	r3, r4
   b6314:	dd4a      	ble.n	b63ac <loop+0x190>
        if (i<23) {
   b6316:	2c16      	cmp	r4, #22
   b6318:	dc41      	bgt.n	b639e <loop+0x182>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b631a:	4b6f      	ldr	r3, [pc, #444]	; (b64d8 <loop+0x2bc>)
	const char * c_str() const { return buffer; }
   b631c:	0122      	lsls	r2, r4, #4
   b631e:	2140      	movs	r1, #64	; 0x40
   b6320:	58d2      	ldr	r2, [r2, r3]
   b6322:	4628      	mov	r0, r5
   b6324:	f003 f99a 	bl	b965c <snprintf>
        display.print(buf);
   b6328:	4629      	mov	r1, r5
   b632a:	485e      	ldr	r0, [pc, #376]	; (b64a4 <loop+0x288>)
   b632c:	f003 fc12 	bl	b9b54 <_ZN5Print5printEPKc>
        display.display();
   b6330:	485c      	ldr	r0, [pc, #368]	; (b64a4 <loop+0x288>)
   b6332:	f002 fdc1 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6336:	3401      	adds	r4, #1
   b6338:	e7ea      	b.n	b6310 <loop+0xf4>
    } else if (MODE == 1)
   b633a:	2d01      	cmp	r5, #1
   b633c:	d105      	bne.n	b634a <loop+0x12e>
      showBitmap(0,1,"");
   b633e:	f003 fb4e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6342:	aac2      	add	r2, sp, #776	; 0x308
   b6344:	4629      	mov	r1, r5
   b6346:	4620      	mov	r0, r4
   b6348:	e79e      	b.n	b6288 <loop+0x6c>
      showBitmap(0,2,"");
   b634a:	f003 fb48 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b634e:	aac2      	add	r2, sp, #776	; 0x308
   b6350:	2102      	movs	r1, #2
   b6352:	4620      	mov	r0, r4
   b6354:	f7ff fc94 	bl	b5c80 <_Z10showBitmapii6String>
   b6358:	a8c2      	add	r0, sp, #776	; 0x308
   b635a:	f003 faf5 	bl	b9948 <_ZN6StringD1Ev>
      bitmap=false;
   b635e:	4b59      	ldr	r3, [pc, #356]	; (b64c4 <loop+0x2a8>)
   b6360:	701c      	strb	r4, [r3, #0]
      while(currentTime-startTime<limit){
   b6362:	f8d9 2000 	ldr.w	r2, [r9]
   b6366:	683b      	ldr	r3, [r7, #0]
   b6368:	1a9b      	subs	r3, r3, r2
   b636a:	f8da 2000 	ldr.w	r2, [sl]
   b636e:	4293      	cmp	r3, r2
   b6370:	d203      	bcs.n	b637a <loop+0x15e>
   b6372:	f002 ff6f 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b6376:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b6378:	e7f3      	b.n	b6362 <loop+0x146>
      showBitmap(1,2,"Zumbador:");
   b637a:	4958      	ldr	r1, [pc, #352]	; (b64dc <loop+0x2c0>)
   b637c:	a8c2      	add	r0, sp, #776	; 0x308
   b637e:	f003 fb2e 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6382:	aac2      	add	r2, sp, #776	; 0x308
   b6384:	2102      	movs	r1, #2
   b6386:	2001      	movs	r0, #1
   b6388:	e77e      	b.n	b6288 <loop+0x6c>
      pitidoOFF1(2);
   b638a:	2002      	movs	r0, #2
   b638c:	f7fe fa0f 	bl	b47ae <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b6390:	2004      	movs	r0, #4
   b6392:	f7fe fa0c 	bl	b47ae <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b6396:	2006      	movs	r0, #6
   b6398:	f7fe fa09 	bl	b47ae <_Z10pitidoOFF1i>
   b639c:	e795      	b.n	b62ca <loop+0xae>
        } else if (i==23){
   b639e:	2c17      	cmp	r4, #23
   b63a0:	d1c2      	bne.n	b6328 <loop+0x10c>
          snprintf(buf, sizeof(buf), "...");
   b63a2:	4641      	mov	r1, r8
   b63a4:	4628      	mov	r0, r5
   b63a6:	f004 ff47 	bl	bb238 <strcpy>
   b63aa:	e7bd      	b.n	b6328 <loop+0x10c>
  if ( MODE == 0 ) 
   b63ac:	4b3e      	ldr	r3, [pc, #248]	; (b64a8 <loop+0x28c>)
    switch (tagInfo[0])
   b63ae:	4c43      	ldr	r4, [pc, #268]	; (b64bc <loop+0x2a0>)
  if ( MODE == 0 ) 
   b63b0:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b63b2:	6825      	ldr	r5, [r4, #0]
  if ( MODE == 0 ) 
   b63b4:	2f00      	cmp	r7, #0
   b63b6:	f040 8141 	bne.w	b663c <loop+0x420>
    switch (tagInfo[0])
   b63ba:	f8df 8148 	ldr.w	r8, [pc, #328]	; b6504 <loop+0x2e8>
   b63be:	2d00      	cmp	r5, #0
   b63c0:	f000 80a2 	beq.w	b6508 <loop+0x2ec>
   b63c4:	2d06      	cmp	r5, #6
   b63c6:	f040 8118 	bne.w	b65fa <loop+0x3de>
        switch (tagInfo[1])
   b63ca:	6865      	ldr	r5, [r4, #4]
   b63cc:	2d01      	cmp	r5, #1
   b63ce:	d03f      	beq.n	b6450 <loop+0x234>
   b63d0:	2d02      	cmp	r5, #2
   b63d2:	d03f      	beq.n	b6454 <loop+0x238>
   b63d4:	b92d      	cbnz	r5, b63e2 <loop+0x1c6>
            cambioModo(tagInfo[2]);
   b63d6:	68a0      	ldr	r0, [r4, #8]
   b63d8:	f7ff fedc 	bl	b6194 <_Z10cambioModoi>
            resetFunc();
   b63dc:	4b40      	ldr	r3, [pc, #256]	; (b64e0 <loop+0x2c4>)
   b63de:	681b      	ldr	r3, [r3, #0]
   b63e0:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b63e2:	6823      	ldr	r3, [r4, #0]
   b63e4:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b63e6:	bf1c      	itt	ne
   b63e8:	f04f 33ff 	movne.w	r3, #4294967295
   b63ec:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b63ee:	f8d8 4000 	ldr.w	r4, [r8]
   b63f2:	2c00      	cmp	r4, #0
   b63f4:	f340 810e 	ble.w	b6614 <loop+0x3f8>
   b63f8:	7833      	ldrb	r3, [r6, #0]
   b63fa:	2b00      	cmp	r3, #0
   b63fc:	f000 811a 	beq.w	b6634 <loop+0x418>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6400:	4c38      	ldr	r4, [pc, #224]	; (b64e4 <loop+0x2c8>)
   b6402:	4d39      	ldr	r5, [pc, #228]	; (b64e8 <loop+0x2cc>)
   b6404:	6922      	ldr	r2, [r4, #16]
   b6406:	6860      	ldr	r0, [r4, #4]
   b6408:	2101      	movs	r1, #1
   b640a:	f7fe f817 	bl	b443c <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b640e:	4b37      	ldr	r3, [pc, #220]	; (b64ec <loop+0x2d0>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6410:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6412:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6414:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6416:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b641a:	f7fe f95b 	bl	b46d4 <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b641e:	782b      	ldrb	r3, [r5, #0]
   b6420:	2b00      	cmp	r3, #0
   b6422:	f000 80f5 	beq.w	b6610 <loop+0x3f4>
   b6426:	4932      	ldr	r1, [pc, #200]	; (b64f0 <loop+0x2d4>)
      display.clearDisplay();
   b6428:	4c1e      	ldr	r4, [pc, #120]	; (b64a4 <loop+0x288>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b642a:	482a      	ldr	r0, [pc, #168]	; (b64d4 <loop+0x2b8>)
   b642c:	f004 ff04 	bl	bb238 <strcpy>
      display.clearDisplay();
   b6430:	4620      	mov	r0, r4
   b6432:	f002 fad9 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6436:	2300      	movs	r3, #0
      display.print(buf);
   b6438:	4926      	ldr	r1, [pc, #152]	; (b64d4 <loop+0x2b8>)
   b643a:	6123      	str	r3, [r4, #16]
   b643c:	4620      	mov	r0, r4
   b643e:	f003 fb89 	bl	b9b54 <_ZN5Print5printEPKc>
      display.display();
   b6442:	4620      	mov	r0, r4
   b6444:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b6448:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      display.display();
   b644c:	f002 bd34 	b.w	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b6450:	7035      	strb	r5, [r6, #0]
            break;
   b6452:	e7c6      	b.n	b63e2 <loop+0x1c6>
            if ( tagInfo[2] == 1 ) {
   b6454:	68a3      	ldr	r3, [r4, #8]
   b6456:	2b01      	cmp	r3, #1
   b6458:	d10f      	bne.n	b647a <loop+0x25e>
              borradoALL(0);
   b645a:	4638      	mov	r0, r7
   b645c:	f7fe fa38 	bl	b48d0 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b6460:	4924      	ldr	r1, [pc, #144]	; (b64f4 <loop+0x2d8>)
   b6462:	a8c2      	add	r0, sp, #776	; 0x308
   b6464:	f003 fabb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6468:	aac2      	add	r2, sp, #776	; 0x308
   b646a:	4639      	mov	r1, r7
   b646c:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b646e:	f7ff fc07 	bl	b5c80 <_Z10showBitmapii6String>
   b6472:	a8c2      	add	r0, sp, #776	; 0x308
   b6474:	f003 fa68 	bl	b9948 <_ZN6StringD1Ev>
   b6478:	e7b3      	b.n	b63e2 <loop+0x1c6>
              showBitmap(2,1,"");
   b647a:	490c      	ldr	r1, [pc, #48]	; (b64ac <loop+0x290>)
   b647c:	a8c2      	add	r0, sp, #776	; 0x308
   b647e:	f003 faae 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6482:	aac2      	add	r2, sp, #776	; 0x308
   b6484:	2101      	movs	r1, #1
   b6486:	4628      	mov	r0, r5
   b6488:	f7ff fbfa 	bl	b5c80 <_Z10showBitmapii6String>
   b648c:	a8c2      	add	r0, sp, #776	; 0x308
   b648e:	f003 fa5b 	bl	b9948 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b6492:	f003 fe57 	bl	ba144 <_Z16_fetch_usbserialv>
   b6496:	4918      	ldr	r1, [pc, #96]	; (b64f8 <loop+0x2dc>)
   b6498:	f003 fb6f 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b649c:	e7a1      	b.n	b63e2 <loop+0x1c6>
   b649e:	bf00      	nop
   b64a0:	2003ce14 	.word	0x2003ce14
   b64a4:	2003ce18 	.word	0x2003ce18
   b64a8:	2003c7e2 	.word	0x2003c7e2
   b64ac:	000bb591 	.word	0x000bb591
   b64b0:	2003d1c0 	.word	0x2003d1c0
   b64b4:	2003d4fc 	.word	0x2003d4fc
   b64b8:	000bba78 	.word	0x000bba78
   b64bc:	2003c74c 	.word	0x2003c74c
   b64c0:	2003d1b0 	.word	0x2003d1b0
   b64c4:	2003c7f1 	.word	0x2003c7f1
   b64c8:	2003d6f8 	.word	0x2003d6f8
   b64cc:	2003c740 	.word	0x2003c740
   b64d0:	2003d500 	.word	0x2003d500
   b64d4:	2003cdcd 	.word	0x2003cdcd
   b64d8:	2003d518 	.word	0x2003d518
   b64dc:	000bba6e 	.word	0x000bba6e
   b64e0:	2003d514 	.word	0x2003d514
   b64e4:	2003c7f4 	.word	0x2003c7f4
   b64e8:	2003e6b8 	.word	0x2003e6b8
   b64ec:	2003d1a8 	.word	0x2003d1a8
   b64f0:	000bbd59 	.word	0x000bbd59
   b64f4:	000bba8b 	.word	0x000bba8b
   b64f8:	000bbaa6 	.word	0x000bbaa6
   b64fc:	2003c73f 	.word	0x2003c73f
   b6500:	000bba6a 	.word	0x000bba6a
   b6504:	2003d4f0 	.word	0x2003d4f0
        id = tagInfo[3];
   b6508:	4f88      	ldr	r7, [pc, #544]	; (b672c <loop+0x510>)
   b650a:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b650c:	4d88      	ldr	r5, [pc, #544]	; (b6730 <loop+0x514>)
        if (tagInfo[1] == 0) {
   b650e:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b6512:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b6514:	68a3      	ldr	r3, [r4, #8]
   b6516:	f8df 924c 	ldr.w	r9, [pc, #588]	; b6764 <loop+0x548>
   b651a:	602b      	str	r3, [r5, #0]
        if (tagInfo[1] == 0) {
   b651c:	f1ba 0f00 	cmp.w	sl, #0
   b6520:	d123      	bne.n	b656a <loop+0x34e>
          Serial.println("Sensor detectado");
   b6522:	f003 fe0f 	bl	ba144 <_Z16_fetch_usbserialv>
   b6526:	4983      	ldr	r1, [pc, #524]	; (b6734 <loop+0x518>)
   b6528:	f003 fb27 	bl	b9b7a <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b652c:	4a82      	ldr	r2, [pc, #520]	; (b6738 <loop+0x51c>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b652e:	682b      	ldr	r3, [r5, #0]
          sensor.id = id;
   b6530:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b6532:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b6534:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b6536:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b6538:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b653c:	bf18      	it	ne
   b653e:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b6540:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b6542:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b6544:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b6548:	497c      	ldr	r1, [pc, #496]	; (b673c <loop+0x520>)
          numSensoresBloque++;
   b654a:	3201      	adds	r2, #1
   b654c:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b6550:	a8c2      	add	r0, sp, #776	; 0x308
          if (sensor.puerto == 0) {
   b6552:	2b00      	cmp	r3, #0
   b6554:	d13b      	bne.n	b65ce <loop+0x3b2>
            showBitmap(1,3,""); //A0
   b6556:	f003 fa42 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b655a:	aac2      	add	r2, sp, #776	; 0x308
   b655c:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b655e:	2001      	movs	r0, #1
   b6560:	f7ff fb8e 	bl	b5c80 <_Z10showBitmapii6String>
   b6564:	a8c2      	add	r0, sp, #776	; 0x308
   b6566:	f003 f9ef 	bl	b9948 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b656a:	f8d9 3000 	ldr.w	r3, [r9]
   b656e:	2b00      	cmp	r3, #0
   b6570:	dd40      	ble.n	b65f4 <loop+0x3d8>
          if (tagInfo[1] == 1) {
   b6572:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b6576:	f1b9 0f01 	cmp.w	r9, #1
   b657a:	f47f af32 	bne.w	b63e2 <loop+0x1c6>
            Serial.println("Actuador detectado");
   b657e:	f003 fde1 	bl	ba144 <_Z16_fetch_usbserialv>
   b6582:	496f      	ldr	r1, [pc, #444]	; (b6740 <loop+0x524>)
   b6584:	f003 faf9 	bl	b9b7a <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b6588:	4b6e      	ldr	r3, [pc, #440]	; (b6744 <loop+0x528>)
   b658a:	6922      	ldr	r2, [r4, #16]
   b658c:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b658e:	682b      	ldr	r3, [r5, #0]
            actuador.id = id;
   b6590:	683f      	ldr	r7, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b6592:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b6594:	4b68      	ldr	r3, [pc, #416]	; (b6738 <loop+0x51c>)
            bloques[0].numActuadores++;
   b6596:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            bloques[0].actuadores[0] = actuador;
   b659a:	f8c3 7148 	str.w	r7, [r3, #328]	; 0x148
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b659e:	bf0c      	ite	eq
   b65a0:	2102      	moveq	r1, #2
   b65a2:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b65a4:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b65a6:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b65aa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b65ae:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b65b2:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b65b4:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b65b8:	4960      	ldr	r1, [pc, #384]	; (b673c <loop+0x520>)
            numActuadoresBloque++;
   b65ba:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b65be:	a8c2      	add	r0, sp, #776	; 0x308
            if (actuador.puerto == 2) {
   b65c0:	d10a      	bne.n	b65d8 <loop+0x3bc>
              showBitmap(1,4,""); //A2
   b65c2:	f003 fa0c 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b65c6:	aac2      	add	r2, sp, #776	; 0x308
   b65c8:	2104      	movs	r1, #4
   b65ca:	4648      	mov	r0, r9
   b65cc:	e74f      	b.n	b646e <loop+0x252>
            showBitmap(1,0,""); //D2
   b65ce:	f003 fa06 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b65d2:	aac2      	add	r2, sp, #776	; 0x308
   b65d4:	4651      	mov	r1, sl
   b65d6:	e7c2      	b.n	b655e <loop+0x342>
              if (actuador.id == 1) {
   b65d8:	2f01      	cmp	r7, #1
   b65da:	d105      	bne.n	b65e8 <loop+0x3cc>
                showBitmap(1,2,""); //D6
   b65dc:	f003 f9ff 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b65e0:	aac2      	add	r2, sp, #776	; 0x308
   b65e2:	2102      	movs	r1, #2
   b65e4:	4638      	mov	r0, r7
   b65e6:	e742      	b.n	b646e <loop+0x252>
                showBitmap(1,1,""); //D4
   b65e8:	f003 f9f9 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b65ec:	aac2      	add	r2, sp, #776	; 0x308
   b65ee:	4649      	mov	r1, r9
   b65f0:	4648      	mov	r0, r9
   b65f2:	e73c      	b.n	b646e <loop+0x252>
            ledApagar();
   b65f4:	f7fd ff6e 	bl	b44d4 <_Z9ledApagarv>
   b65f8:	e6f3      	b.n	b63e2 <loop+0x1c6>
        if ( tagInfo[0] != -1 ) {
   b65fa:	3501      	adds	r5, #1
   b65fc:	f43f aef1 	beq.w	b63e2 <loop+0x1c6>
          showBitmap(2,0,"");
   b6600:	494e      	ldr	r1, [pc, #312]	; (b673c <loop+0x520>)
   b6602:	a8c2      	add	r0, sp, #776	; 0x308
   b6604:	f003 f9eb 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6608:	aac2      	add	r2, sp, #776	; 0x308
   b660a:	4639      	mov	r1, r7
   b660c:	2002      	movs	r0, #2
   b660e:	e72e      	b.n	b646e <loop+0x252>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6610:	494d      	ldr	r1, [pc, #308]	; (b6748 <loop+0x52c>)
   b6612:	e709      	b.n	b6428 <loop+0x20c>
    } else if (numActuadoresBloque==0 && play == true) {
   b6614:	d10e      	bne.n	b6634 <loop+0x418>
   b6616:	7833      	ldrb	r3, [r6, #0]
   b6618:	b163      	cbz	r3, b6634 <loop+0x418>
      showBitmap(2,4,"");
   b661a:	4948      	ldr	r1, [pc, #288]	; (b673c <loop+0x520>)
   b661c:	a8c2      	add	r0, sp, #776	; 0x308
   b661e:	f003 f9de 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6622:	aac2      	add	r2, sp, #776	; 0x308
   b6624:	2104      	movs	r1, #4
   b6626:	2002      	movs	r0, #2
   b6628:	f7ff fb2a 	bl	b5c80 <_Z10showBitmapii6String>
   b662c:	a8c2      	add	r0, sp, #776	; 0x308
   b662e:	f003 f98b 	bl	b9948 <_ZN6StringD1Ev>
      play=false;
   b6632:	7034      	strb	r4, [r6, #0]
   b6634:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b6638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b663c:	2f01      	cmp	r7, #1
   b663e:	f040 8370 	bne.w	b6d22 <loop+0xb06>
    switch (tagInfo[0])
   b6642:	2d01      	cmp	r5, #1
   b6644:	d055      	beq.n	b66f2 <loop+0x4d6>
   b6646:	2d06      	cmp	r5, #6
   b6648:	f040 830a 	bne.w	b6c60 <loop+0xa44>
        switch (tagInfo[1])
   b664c:	6865      	ldr	r5, [r4, #4]
   b664e:	2d01      	cmp	r5, #1
   b6650:	d028      	beq.n	b66a4 <loop+0x488>
   b6652:	2d02      	cmp	r5, #2
   b6654:	d028      	beq.n	b66a8 <loop+0x48c>
   b6656:	b92d      	cbnz	r5, b6664 <loop+0x448>
            cambioModo(tagInfo[2]);
   b6658:	68a0      	ldr	r0, [r4, #8]
   b665a:	f7ff fd9b 	bl	b6194 <_Z10cambioModoi>
            resetFunc();
   b665e:	4b3b      	ldr	r3, [pc, #236]	; (b674c <loop+0x530>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	4798      	blx	r3
    tagInfo[0] = -1;
   b6664:	f04f 33ff 	mov.w	r3, #4294967295
   b6668:	6023      	str	r3, [r4, #0]
    if (play) {
   b666a:	7833      	ldrb	r3, [r6, #0]
   b666c:	2b00      	cmp	r3, #0
   b666e:	d0e1      	beq.n	b6634 <loop+0x418>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b6670:	4d37      	ldr	r5, [pc, #220]	; (b6750 <loop+0x534>)
   b6672:	682b      	ldr	r3, [r5, #0]
   b6674:	2b00      	cmp	r3, #0
   b6676:	f040 8302 	bne.w	b6c7e <loop+0xa62>
   b667a:	4b2f      	ldr	r3, [pc, #188]	; (b6738 <loop+0x51c>)
   b667c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b6680:	2b00      	cmp	r3, #0
   b6682:	f300 82ff 	bgt.w	b6c84 <loop+0xa68>
        showBitmap(2,4,"  acaba bloque 1");
   b6686:	4933      	ldr	r1, [pc, #204]	; (b6754 <loop+0x538>)
   b6688:	a8c2      	add	r0, sp, #776	; 0x308
   b668a:	f003 f9a8 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b668e:	aac2      	add	r2, sp, #776	; 0x308
   b6690:	2104      	movs	r1, #4
   b6692:	2002      	movs	r0, #2
   b6694:	f7ff faf4 	bl	b5c80 <_Z10showBitmapii6String>
   b6698:	a8c2      	add	r0, sp, #776	; 0x308
   b669a:	f003 f955 	bl	b9948 <_ZN6StringD1Ev>
        play = false;
   b669e:	2300      	movs	r3, #0
   b66a0:	7033      	strb	r3, [r6, #0]
   b66a2:	e30b      	b.n	b6cbc <loop+0xaa0>
            play = true;
   b66a4:	7035      	strb	r5, [r6, #0]
            break;
   b66a6:	e7dd      	b.n	b6664 <loop+0x448>
            if ( tagInfo[2] == 1 ) {
   b66a8:	68a3      	ldr	r3, [r4, #8]
   b66aa:	2b01      	cmp	r3, #1
   b66ac:	d10e      	bne.n	b66cc <loop+0x4b0>
   switch (modo)
   b66ae:	f7fd fd0b 	bl	b40c8 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b66b2:	a8c2      	add	r0, sp, #776	; 0x308
   b66b4:	4928      	ldr	r1, [pc, #160]	; (b6758 <loop+0x53c>)
   b66b6:	f003 f992 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b66ba:	aac2      	add	r2, sp, #776	; 0x308
   b66bc:	2100      	movs	r1, #0
   b66be:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b66c0:	f7ff fade 	bl	b5c80 <_Z10showBitmapii6String>
   b66c4:	a8c2      	add	r0, sp, #776	; 0x308
   b66c6:	f003 f93f 	bl	b9948 <_ZN6StringD1Ev>
   b66ca:	e7cb      	b.n	b6664 <loop+0x448>
            } else if (tagInfo[2] == 2) {
   b66cc:	2b02      	cmp	r3, #2
   b66ce:	d103      	bne.n	b66d8 <loop+0x4bc>
              borradoBLOQUE(1);
   b66d0:	4638      	mov	r0, r7
   b66d2:	f7ff fc79 	bl	b5fc8 <_Z13borradoBLOQUEi>
   b66d6:	e7c5      	b.n	b6664 <loop+0x448>
              Serial.println("Borrado no permitido para este modo");
   b66d8:	f003 fd34 	bl	ba144 <_Z16_fetch_usbserialv>
   b66dc:	491f      	ldr	r1, [pc, #124]	; (b675c <loop+0x540>)
   b66de:	f003 fa4c 	bl	b9b7a <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b66e2:	4916      	ldr	r1, [pc, #88]	; (b673c <loop+0x520>)
   b66e4:	a8c2      	add	r0, sp, #776	; 0x308
   b66e6:	f003 f97a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b66ea:	aac2      	add	r2, sp, #776	; 0x308
   b66ec:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b66ee:	2002      	movs	r0, #2
   b66f0:	e7e6      	b.n	b66c0 <loop+0x4a4>
        id = tagInfo[3];
   b66f2:	4f0e      	ldr	r7, [pc, #56]	; (b672c <loop+0x510>)
   b66f4:	68e3      	ldr	r3, [r4, #12]
   b66f6:	603b      	str	r3, [r7, #0]
        Serial.print("Ejecutando tag --> ");
   b66f8:	f003 fd24 	bl	ba144 <_Z16_fetch_usbserialv>
   b66fc:	4918      	ldr	r1, [pc, #96]	; (b6760 <loop+0x544>)
   b66fe:	4d0e      	ldr	r5, [pc, #56]	; (b6738 <loop+0x51c>)
   b6700:	f8df 9060 	ldr.w	r9, [pc, #96]	; b6764 <loop+0x548>
   b6704:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6768 <loop+0x54c>
   b6708:	f8df a060 	ldr.w	sl, [pc, #96]	; b676c <loop+0x550>
   b670c:	f8df b040 	ldr.w	fp, [pc, #64]	; b6750 <loop+0x534>
   b6710:	f003 fa20 	bl	b9b54 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b6714:	6863      	ldr	r3, [r4, #4]
   b6716:	2b05      	cmp	r3, #5
   b6718:	d86d      	bhi.n	b67f6 <loop+0x5da>
   b671a:	e8df f013 	tbh	[pc, r3, lsl #1]
   b671e:	0029      	.short	0x0029
   b6720:	020800d0 	.word	0x020800d0
   b6724:	026f023e 	.word	0x026f023e
   b6728:	028a      	.short	0x028a
   b672a:	bf00      	nop
   b672c:	2003d1ac 	.word	0x2003d1ac
   b6730:	2003e184 	.word	0x2003e184
   b6734:	000bbaca 	.word	0x000bbaca
   b6738:	2003c7f4 	.word	0x2003c7f4
   b673c:	000bb591 	.word	0x000bb591
   b6740:	000bbadb 	.word	0x000bbadb
   b6744:	2003d1a8 	.word	0x2003d1a8
   b6748:	000bbd68 	.word	0x000bbd68
   b674c:	2003d514 	.word	0x2003d514
   b6750:	2003c744 	.word	0x2003c744
   b6754:	000bbd6e 	.word	0x000bbd6e
   b6758:	000bba8b 	.word	0x000bba8b
   b675c:	000bbaa6 	.word	0x000bbaa6
   b6760:	000bbaee 	.word	0x000bbaee
   b6764:	2003d4f8 	.word	0x2003d4f8
   b6768:	2003d4f0 	.word	0x2003d4f0
   b676c:	2003d4f4 	.word	0x2003d4f4
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b6770:	f8df 82b4 	ldr.w	r8, [pc, #692]	; b6a28 <loop+0x80c>
            Serial.println("Sensor detectado");
   b6774:	f003 fce6 	bl	ba144 <_Z16_fetch_usbserialv>
   b6778:	4999      	ldr	r1, [pc, #612]	; (b69e0 <loop+0x7c4>)
   b677a:	f003 f9fe 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b677e:	f898 3000 	ldrb.w	r3, [r8]
   b6782:	2b00      	cmp	r3, #0
   b6784:	d05f      	beq.n	b6846 <loop+0x62a>
   b6786:	f8d9 2000 	ldr.w	r2, [r9]
   b678a:	f8da 3000 	ldr.w	r3, [sl]
   b678e:	429a      	cmp	r2, r3
   b6790:	d176      	bne.n	b6880 <loop+0x664>
   b6792:	6838      	ldr	r0, [r7, #0]
   b6794:	f7fe f996 	bl	b4ac4 <_Z13isValidSensori>
   b6798:	2800      	cmp	r0, #0
   b679a:	d051      	beq.n	b6840 <loop+0x624>
              puerto = isNewSensor(id);
   b679c:	6838      	ldr	r0, [r7, #0]
   b679e:	f8df 8290 	ldr.w	r8, [pc, #656]	; b6a30 <loop+0x814>
   b67a2:	f7fe f9b1 	bl	b4b08 <_Z11isNewSensori>
   b67a6:	f8c8 0000 	str.w	r0, [r8]
              if (puerto == -1) {
   b67aa:	3001      	adds	r0, #1
   b67ac:	d14f      	bne.n	b684e <loop+0x632>
                puerto = asignarPuerto(tagInfo[2]);
   b67ae:	68a0      	ldr	r0, [r4, #8]
   b67b0:	f7fe fb50 	bl	b4e54 <_Z13asignarPuertoi>
   b67b4:	4601      	mov	r1, r0
   b67b6:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b67ba:	68a0      	ldr	r0, [r4, #8]
   b67bc:	f7ff fbb6 	bl	b5f2c <_Z8showPortii>
              if (puerto != -1) {
   b67c0:	f8d8 0000 	ldr.w	r0, [r8]
   b67c4:	1c42      	adds	r2, r0, #1
   b67c6:	d04f      	beq.n	b6868 <loop+0x64c>
                newSensor.bloque = numBloque;
   b67c8:	f8db 8000 	ldr.w	r8, [fp]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b67cc:	f8d9 1000 	ldr.w	r1, [r9]
   b67d0:	683f      	ldr	r7, [r7, #0]
   b67d2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b67d6:	fb02 f208 	mul.w	r2, r2, r8
   b67da:	eb02 1301 	add.w	r3, r2, r1, lsl #4
   b67de:	442b      	add	r3, r5
   b67e0:	605f      	str	r7, [r3, #4]
   b67e2:	6927      	ldr	r7, [r4, #16]
   b67e4:	6118      	str	r0, [r3, #16]
   b67e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
                bloques[numBloque].numSensores++;
   b67ea:	58ab      	ldr	r3, [r5, r2]
   b67ec:	3301      	adds	r3, #1
   b67ee:	50ab      	str	r3, [r5, r2]
                numSensoresBloque++;
   b67f0:	1c4b      	adds	r3, r1, #1
   b67f2:	f8c9 3000 	str.w	r3, [r9]
        Serial.println("Fin Tag");
   b67f6:	f003 fca5 	bl	ba144 <_Z16_fetch_usbserialv>
   b67fa:	497a      	ldr	r1, [pc, #488]	; (b69e4 <loop+0x7c8>)
   b67fc:	f003 f9bd 	bl	b9b7a <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b6800:	f003 fca0 	bl	ba144 <_Z16_fetch_usbserialv>
   b6804:	4978      	ldr	r1, [pc, #480]	; (b69e8 <loop+0x7cc>)
   b6806:	f003 f9b8 	bl	b9b7a <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b680a:	f003 fc9b 	bl	ba144 <_Z16_fetch_usbserialv>
   b680e:	4b77      	ldr	r3, [pc, #476]	; (b69ec <loop+0x7d0>)
   b6810:	4977      	ldr	r1, [pc, #476]	; (b69f0 <loop+0x7d4>)
   b6812:	681a      	ldr	r2, [r3, #0]
   b6814:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b6818:	fb03 5502 	mla	r5, r3, r2, r5
   b681c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b6820:	9302      	str	r3, [sp, #8]
   b6822:	4b74      	ldr	r3, [pc, #464]	; (b69f4 <loop+0x7d8>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	9301      	str	r3, [sp, #4]
   b6828:	4b73      	ldr	r3, [pc, #460]	; (b69f8 <loop+0x7dc>)
   b682a:	681b      	ldr	r3, [r3, #0]
   b682c:	9300      	str	r3, [sp, #0]
   b682e:	4b73      	ldr	r3, [pc, #460]	; (b69fc <loop+0x7e0>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	f7fd fc75 	bl	b4120 <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b6836:	f003 fc85 	bl	ba144 <_Z16_fetch_usbserialv>
   b683a:	f003 f992 	bl	b9b62 <_ZN5Print7printlnEv>
        break;
   b683e:	e711      	b.n	b6664 <loop+0x448>
              if ((!IF_pasado)) {
   b6840:	f898 3000 	ldrb.w	r3, [r8]
   b6844:	b9b3      	cbnz	r3, b6874 <loop+0x658>
                Serial.println("Se esperaba IF tag");
   b6846:	f003 fc7d 	bl	ba144 <_Z16_fetch_usbserialv>
   b684a:	496d      	ldr	r1, [pc, #436]	; (b6a00 <loop+0x7e4>)
   b684c:	e01b      	b.n	b6886 <loop+0x66a>
                showBitmap(1,6,"");
   b684e:	496d      	ldr	r1, [pc, #436]	; (b6a04 <loop+0x7e8>)
   b6850:	a8c2      	add	r0, sp, #776	; 0x308
   b6852:	f003 f8c4 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6856:	aac2      	add	r2, sp, #776	; 0x308
   b6858:	2106      	movs	r1, #6
   b685a:	2001      	movs	r0, #1
   b685c:	f7ff fa10 	bl	b5c80 <_Z10showBitmapii6String>
   b6860:	a8c2      	add	r0, sp, #776	; 0x308
   b6862:	f003 f871 	bl	b9948 <_ZN6StringD1Ev>
   b6866:	e7ab      	b.n	b67c0 <loop+0x5a4>
                Serial.println("Puerto no disponibleeee");
   b6868:	f003 fc6c 	bl	ba144 <_Z16_fetch_usbserialv>
   b686c:	4966      	ldr	r1, [pc, #408]	; (b6a08 <loop+0x7ec>)
                Serial.println("Puerto no disponible");
   b686e:	f003 f984 	bl	b9b7a <_ZN5Print7printlnEPKc>
   b6872:	e7c0      	b.n	b67f6 <loop+0x5da>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b6874:	f8d9 2000 	ldr.w	r2, [r9]
   b6878:	f8da 3000 	ldr.w	r3, [sl]
   b687c:	429a      	cmp	r2, r3
   b687e:	d00c      	beq.n	b689a <loop+0x67e>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b6880:	f003 fc60 	bl	ba144 <_Z16_fetch_usbserialv>
   b6884:	4961      	ldr	r1, [pc, #388]	; (b6a0c <loop+0x7f0>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b6886:	f003 f978 	bl	b9b7a <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b688a:	495e      	ldr	r1, [pc, #376]	; (b6a04 <loop+0x7e8>)
   b688c:	a8c2      	add	r0, sp, #776	; 0x308
   b688e:	f003 f8a6 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6892:	2102      	movs	r1, #2
   b6894:	aac2      	add	r2, sp, #776	; 0x308
   b6896:	4608      	mov	r0, r1
   b6898:	e00b      	b.n	b68b2 <loop+0x696>
                Serial.println("Sensor invalido");
   b689a:	f003 fc53 	bl	ba144 <_Z16_fetch_usbserialv>
   b689e:	495c      	ldr	r1, [pc, #368]	; (b6a10 <loop+0x7f4>)
   b68a0:	f003 f96b 	bl	b9b7a <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b68a4:	4957      	ldr	r1, [pc, #348]	; (b6a04 <loop+0x7e8>)
   b68a6:	a8c2      	add	r0, sp, #776	; 0x308
   b68a8:	f003 f899 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b68ac:	aac2      	add	r2, sp, #776	; 0x308
   b68ae:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b68b0:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b68b2:	f7ff f9e5 	bl	b5c80 <_Z10showBitmapii6String>
   b68b6:	a8c2      	add	r0, sp, #776	; 0x308
   b68b8:	f003 f846 	bl	b9948 <_ZN6StringD1Ev>
   b68bc:	e79b      	b.n	b67f6 <loop+0x5da>
            Serial.println("Actuador detectado");
   b68be:	f003 fc41 	bl	ba144 <_Z16_fetch_usbserialv>
   b68c2:	4954      	ldr	r1, [pc, #336]	; (b6a14 <loop+0x7f8>)
            estado = tagInfo[4];
   b68c4:	f8df 916c 	ldr.w	r9, [pc, #364]	; b6a34 <loop+0x818>
            Serial.println("Actuador detectado");
   b68c8:	f003 f957 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b68cc:	4a52      	ldr	r2, [pc, #328]	; (b6a18 <loop+0x7fc>)
            estado = tagInfo[4];
   b68ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b68d2:	7813      	ldrb	r3, [r2, #0]
            estado = tagInfo[4];
   b68d4:	f8c9 a000 	str.w	sl, [r9]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b68d8:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b68da:	2b00      	cmp	r3, #0
   b68dc:	d073      	beq.n	b69c6 <loop+0x7aa>
   b68de:	4a4f      	ldr	r2, [pc, #316]	; (b6a1c <loop+0x800>)
   b68e0:	6839      	ldr	r1, [r7, #0]
   b68e2:	7812      	ldrb	r2, [r2, #0]
   b68e4:	4650      	mov	r0, sl
   b68e6:	2a00      	cmp	r2, #0
   b68e8:	d169      	bne.n	b69be <loop+0x7a2>
   b68ea:	f7fe f935 	bl	b4b58 <_Z15isValidActuadorii>
   b68ee:	2800      	cmp	r0, #0
   b68f0:	d069      	beq.n	b69c6 <loop+0x7aa>
   b68f2:	f8d8 2000 	ldr.w	r2, [r8]
   b68f6:	2a00      	cmp	r2, #0
   b68f8:	d165      	bne.n	b69c6 <loop+0x7aa>
              puerto = isNewActuador(id);
   b68fa:	4608      	mov	r0, r1
   b68fc:	f7fe f966 	bl	b4bcc <_Z13isNewActuadori>
   b6900:	f8df a12c 	ldr.w	sl, [pc, #300]	; b6a30 <loop+0x814>
   b6904:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b6908:	3001      	adds	r0, #1
   b690a:	d147      	bne.n	b699c <loop+0x780>
                puerto = asignarPuerto(tagInfo[2]);
   b690c:	68a0      	ldr	r0, [r4, #8]
   b690e:	f7fe faa1 	bl	b4e54 <_Z13asignarPuertoi>
   b6912:	4601      	mov	r1, r0
   b6914:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b6918:	68a0      	ldr	r0, [r4, #8]
   b691a:	f7ff fb07 	bl	b5f2c <_Z8showPortii>
              if (puerto != -1) {
   b691e:	f8da 1000 	ldr.w	r1, [sl]
   b6922:	1c4b      	adds	r3, r1, #1
   b6924:	d047      	beq.n	b69b6 <loop+0x79a>
                newActuador.id = id;
   b6926:	6838      	ldr	r0, [r7, #0]
                newActuador.bloque = numBloque;
   b6928:	f8db 7000 	ldr.w	r7, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b692c:	f8d8 c000 	ldr.w	ip, [r8]
                newActuador.condicion = estado;
   b6930:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b6934:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b6938:	fb03 f207 	mul.w	r2, r3, r7
   b693c:	2314      	movs	r3, #20
   b693e:	fb03 230c 	mla	r3, r3, ip, r2
   b6942:	442b      	add	r3, r5
   b6944:	e9c3 7154 	strd	r7, r1, [r3, #336]	; 0x150
   b6948:	2701      	movs	r7, #1
   b694a:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b694e:	f883 7158 	strb.w	r7, [r3, #344]	; 0x158
                numActuadoresBloque++;
   b6952:	eb0c 0307 	add.w	r3, ip, r7
   b6956:	f8c8 3000 	str.w	r3, [r8]
                bloques[numBloque].numActuadores++;
   b695a:	18ab      	adds	r3, r5, r2
   b695c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b6960:	443a      	add	r2, r7
   b6962:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b6966:	2800      	cmp	r0, #0
   b6968:	f47f af45 	bne.w	b67f6 <loop+0x5da>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b696c:	b2c9      	uxtb	r1, r1
   b696e:	19ca      	adds	r2, r1, r7
   b6970:	f50d 7842 	add.w	r8, sp, #776	; 0x308
   b6974:	2305      	movs	r3, #5
   b6976:	b2d2      	uxtb	r2, r2
   b6978:	4640      	mov	r0, r8
   b697a:	f002 fb37 	bl	b8fec <_ZN12ChainableLEDC1Ehhh>
   b697e:	e898 0003 	ldmia.w	r8, {r0, r1}
   b6982:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b6a38 <loop+0x81c>
   b6986:	e889 0003 	stmia.w	r9, {r0, r1}
   b698a:	4640      	mov	r0, r8
   b698c:	f002 fb3b 	bl	b9006 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b6990:	4648      	mov	r0, r9
   b6992:	f002 fbdd 	bl	b9150 <_ZN12ChainableLED4initEv>
                  init = true;
   b6996:	4b22      	ldr	r3, [pc, #136]	; (b6a20 <loop+0x804>)
   b6998:	701f      	strb	r7, [r3, #0]
   b699a:	e72c      	b.n	b67f6 <loop+0x5da>
                showBitmap(1,6,"");
   b699c:	4919      	ldr	r1, [pc, #100]	; (b6a04 <loop+0x7e8>)
   b699e:	a8c2      	add	r0, sp, #776	; 0x308
   b69a0:	f003 f81d 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b69a4:	aac2      	add	r2, sp, #776	; 0x308
   b69a6:	2106      	movs	r1, #6
   b69a8:	2001      	movs	r0, #1
   b69aa:	f7ff f969 	bl	b5c80 <_Z10showBitmapii6String>
   b69ae:	a8c2      	add	r0, sp, #776	; 0x308
   b69b0:	f002 ffca 	bl	b9948 <_ZN6StringD1Ev>
   b69b4:	e7b3      	b.n	b691e <loop+0x702>
                Serial.println("Puerto no disponible");
   b69b6:	f003 fbc5 	bl	ba144 <_Z16_fetch_usbserialv>
   b69ba:	491a      	ldr	r1, [pc, #104]	; (b6a24 <loop+0x808>)
   b69bc:	e757      	b.n	b686e <loop+0x652>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(estado, id) ) {
   b69be:	f7fe f8cb 	bl	b4b58 <_Z15isValidActuadorii>
   b69c2:	2800      	cmp	r0, #0
   b69c4:	d13a      	bne.n	b6a3c <loop+0x820>
              if (!IF_pasado) {
   b69c6:	4a18      	ldr	r2, [pc, #96]	; (b6a28 <loop+0x80c>)
   b69c8:	7812      	ldrb	r2, [r2, #0]
   b69ca:	2a00      	cmp	r2, #0
   b69cc:	f43f af3b 	beq.w	b6846 <loop+0x62a>
              } else if (!THEN_pasado) {
   b69d0:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b69d2:	2b00      	cmp	r3, #0
   b69d4:	f040 8091 	bne.w	b6afa <loop+0x8de>
                Serial.println("Se esperaba THEN tag");
   b69d8:	f003 fbb4 	bl	ba144 <_Z16_fetch_usbserialv>
   b69dc:	4913      	ldr	r1, [pc, #76]	; (b6a2c <loop+0x810>)
   b69de:	e752      	b.n	b6886 <loop+0x66a>
   b69e0:	000bbaca 	.word	0x000bbaca
   b69e4:	000bbcce 	.word	0x000bbcce
   b69e8:	000bbcd6 	.word	0x000bbcd6
   b69ec:	2003c744 	.word	0x2003c744
   b69f0:	000bbd0b 	.word	0x000bbd0b
   b69f4:	2003d4f0 	.word	0x2003d4f0
   b69f8:	2003d4f4 	.word	0x2003d4f4
   b69fc:	2003d4f8 	.word	0x2003d4f8
   b6a00:	000bbb1a 	.word	0x000bbb1a
   b6a04:	000bb591 	.word	0x000bb591
   b6a08:	000bbb02 	.word	0x000bbb02
   b6a0c:	000bbb2d 	.word	0x000bbb2d
   b6a10:	000bbb62 	.word	0x000bbb62
   b6a14:	000bbadb 	.word	0x000bbadb
   b6a18:	2003c7f0 	.word	0x2003c7f0
   b6a1c:	2003c7e0 	.word	0x2003c7e0
   b6a20:	2003d1b0 	.word	0x2003d1b0
   b6a24:	000bb8f2 	.word	0x000bb8f2
   b6a28:	2003c7e1 	.word	0x2003c7e1
   b6a2c:	000bbb72 	.word	0x000bbb72
   b6a30:	2003d504 	.word	0x2003d504
   b6a34:	2003d1a8 	.word	0x2003d1a8
   b6a38:	2003d1b8 	.word	0x2003d1b8
              puerto = isNewActuador(id);
   b6a3c:	4608      	mov	r0, r1
   b6a3e:	f7fe f8c5 	bl	b4bcc <_Z13isNewActuadori>
   b6a42:	f8df a3d0 	ldr.w	sl, [pc, #976]	; b6e14 <loop+0xbf8>
   b6a46:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b6a4a:	3001      	adds	r0, #1
   b6a4c:	d148      	bne.n	b6ae0 <loop+0x8c4>
                puerto = asignarPuerto(tagInfo[2]);
   b6a4e:	68a0      	ldr	r0, [r4, #8]
   b6a50:	f7fe fa00 	bl	b4e54 <_Z13asignarPuertoi>
   b6a54:	4601      	mov	r1, r0
   b6a56:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b6a5a:	68a0      	ldr	r0, [r4, #8]
   b6a5c:	f7ff fa66 	bl	b5f2c <_Z8showPortii>
              if (puerto != -1) {
   b6a60:	f8da 1000 	ldr.w	r1, [sl]
   b6a64:	1c48      	adds	r0, r1, #1
   b6a66:	d0a6      	beq.n	b69b6 <loop+0x79a>
                newActuador.bloque = numBloque;
   b6a68:	f8db c000 	ldr.w	ip, [fp]
                newActuador.id = id;
   b6a6c:	6838      	ldr	r0, [r7, #0]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b6a6e:	f8d8 7000 	ldr.w	r7, [r8]
                newActuador.condicion = estado;
   b6a72:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b6a76:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b6a7a:	fb03 f20c 	mul.w	r2, r3, ip
   b6a7e:	2314      	movs	r3, #20
   b6a80:	fb03 2307 	mla	r3, r3, r7, r2
   b6a84:	442b      	add	r3, r5
   b6a86:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b6a8a:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b6a8e:	e9c3 c154 	strd	ip, r1, [r3, #336]	; 0x150
   b6a92:	2300      	movs	r3, #0
   b6a94:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b6a98:	18ab      	adds	r3, r5, r2
                numActuadoresBloque++;
   b6a9a:	3701      	adds	r7, #1
                bloques[numBloque].numActuadores++;
   b6a9c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b6aa0:	f8c8 7000 	str.w	r7, [r8]
                bloques[numBloque].numActuadores++;
   b6aa4:	3201      	adds	r2, #1
   b6aa6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b6aaa:	2800      	cmp	r0, #0
   b6aac:	f47f aea3 	bne.w	b67f6 <loop+0x5da>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b6ab0:	b2c9      	uxtb	r1, r1
   b6ab2:	1c4a      	adds	r2, r1, #1
   b6ab4:	afc2      	add	r7, sp, #776	; 0x308
   b6ab6:	2305      	movs	r3, #5
   b6ab8:	b2d2      	uxtb	r2, r2
   b6aba:	4638      	mov	r0, r7
   b6abc:	f002 fa96 	bl	b8fec <_ZN12ChainableLEDC1Ehhh>
   b6ac0:	e897 0003 	ldmia.w	r7, {r0, r1}
   b6ac4:	f8df 8350 	ldr.w	r8, [pc, #848]	; b6e18 <loop+0xbfc>
   b6ac8:	e888 0003 	stmia.w	r8, {r0, r1}
   b6acc:	4638      	mov	r0, r7
   b6ace:	f002 fa9a 	bl	b9006 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b6ad2:	4640      	mov	r0, r8
   b6ad4:	f002 fb3c 	bl	b9150 <_ZN12ChainableLED4initEv>
                  init = true;
   b6ad8:	4bab      	ldr	r3, [pc, #684]	; (b6d88 <loop+0xb6c>)
   b6ada:	2201      	movs	r2, #1
   b6adc:	701a      	strb	r2, [r3, #0]
   b6ade:	e68a      	b.n	b67f6 <loop+0x5da>
                showBitmap(1,6,"");
   b6ae0:	49aa      	ldr	r1, [pc, #680]	; (b6d8c <loop+0xb70>)
   b6ae2:	a8c2      	add	r0, sp, #776	; 0x308
   b6ae4:	f002 ff7b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6ae8:	aac2      	add	r2, sp, #776	; 0x308
   b6aea:	2106      	movs	r1, #6
   b6aec:	2001      	movs	r0, #1
   b6aee:	f7ff f8c7 	bl	b5c80 <_Z10showBitmapii6String>
   b6af2:	a8c2      	add	r0, sp, #776	; 0x308
   b6af4:	f002 ff28 	bl	b9948 <_ZN6StringD1Ev>
   b6af8:	e7b2      	b.n	b6a60 <loop+0x844>
                if (!isValidActuador(estado, id)) {
   b6afa:	6839      	ldr	r1, [r7, #0]
   b6afc:	4650      	mov	r0, sl
   b6afe:	f7fe f82b 	bl	b4b58 <_Z15isValidActuadorii>
   b6b02:	b958      	cbnz	r0, b6b1c <loop+0x900>
                  Serial.println("Invalid Actuador");
   b6b04:	f003 fb1e 	bl	ba144 <_Z16_fetch_usbserialv>
   b6b08:	49a1      	ldr	r1, [pc, #644]	; (b6d90 <loop+0xb74>)
   b6b0a:	f003 f836 	bl	b9b7a <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b6b0e:	499f      	ldr	r1, [pc, #636]	; (b6d8c <loop+0xb70>)
   b6b10:	a8c2      	add	r0, sp, #776	; 0x308
   b6b12:	f002 ff64 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6b16:	aac2      	add	r2, sp, #776	; 0x308
   b6b18:	2106      	movs	r1, #6
   b6b1a:	e6c9      	b.n	b68b0 <loop+0x694>
                } else if(!ELSE_pasado) {
   b6b1c:	4b9d      	ldr	r3, [pc, #628]	; (b6d94 <loop+0xb78>)
   b6b1e:	781b      	ldrb	r3, [r3, #0]
   b6b20:	2b00      	cmp	r3, #0
   b6b22:	f47f ae68 	bne.w	b67f6 <loop+0x5da>
                  Serial.println("Se esperaba ELSE tag");
   b6b26:	f003 fb0d 	bl	ba144 <_Z16_fetch_usbserialv>
   b6b2a:	499b      	ldr	r1, [pc, #620]	; (b6d98 <loop+0xb7c>)
   b6b2c:	e6ab      	b.n	b6886 <loop+0x66a>
            Serial.println("IF detectado");
   b6b2e:	f003 fb09 	bl	ba144 <_Z16_fetch_usbserialv>
   b6b32:	499a      	ldr	r1, [pc, #616]	; (b6d9c <loop+0xb80>)
   b6b34:	f003 f821 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b6b38:	f8db 3000 	ldr.w	r3, [fp]
   b6b3c:	1c5a      	adds	r2, r3, #1
   b6b3e:	d004      	beq.n	b6b4a <loop+0x92e>
   b6b40:	bb3b      	cbnz	r3, b6b92 <loop+0x976>
   b6b42:	f8d8 2000 	ldr.w	r2, [r8]
   b6b46:	2a00      	cmp	r2, #0
   b6b48:	dd23      	ble.n	b6b92 <loop+0x976>
              IF_pasado = true;
   b6b4a:	4a95      	ldr	r2, [pc, #596]	; (b6da0 <loop+0xb84>)
   b6b4c:	2101      	movs	r1, #1
   b6b4e:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b6b50:	4a94      	ldr	r2, [pc, #592]	; (b6da4 <loop+0xb88>)
              showBitmap(3,0,"IF");
   b6b52:	4995      	ldr	r1, [pc, #596]	; (b6da8 <loop+0xb8c>)
              THEN_pasado = false;
   b6b54:	2700      	movs	r7, #0
   b6b56:	7017      	strb	r7, [r2, #0]
              ELSE_pasado = false;
   b6b58:	4a8e      	ldr	r2, [pc, #568]	; (b6d94 <loop+0xb78>)
              numCondicionalesBloque = 0;
   b6b5a:	f8ca 7000 	str.w	r7, [sl]
              ELSE_pasado = false;
   b6b5e:	7017      	strb	r7, [r2, #0]
              puertoAnalogico_bloque = 0;
   b6b60:	4a92      	ldr	r2, [pc, #584]	; (b6dac <loop+0xb90>)
              numSensoresBloque = 0;
   b6b62:	f8c9 7000 	str.w	r7, [r9]
              puertoAnalogico_bloque = 0;
   b6b66:	6017      	str	r7, [r2, #0]
              puertoDigital_bloque = 0;
   b6b68:	4a91      	ldr	r2, [pc, #580]	; (b6db0 <loop+0xb94>)
              numActuadoresBloque = 0;
   b6b6a:	f8c8 7000 	str.w	r7, [r8]
              numBloque++;
   b6b6e:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b6b70:	6017      	str	r7, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b6b72:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b6b76:	f8cb 3000 	str.w	r3, [fp]
              bloques[numBloque] = nuevoBloque;
   b6b7a:	4353      	muls	r3, r2
   b6b7c:	18ea      	adds	r2, r5, r3
   b6b7e:	50ef      	str	r7, [r5, r3]
   b6b80:	f8c2 7144 	str.w	r7, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b6b84:	a8c2      	add	r0, sp, #776	; 0x308
   b6b86:	f002 ff2a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6b8a:	aac2      	add	r2, sp, #776	; 0x308
   b6b8c:	2100      	movs	r1, #0
   b6b8e:	2003      	movs	r0, #3
   b6b90:	e68f      	b.n	b68b2 <loop+0x696>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b6b92:	f003 fad7 	bl	ba144 <_Z16_fetch_usbserialv>
   b6b96:	4987      	ldr	r1, [pc, #540]	; (b6db4 <loop+0xb98>)
   b6b98:	e675      	b.n	b6886 <loop+0x66a>
            Serial.println("AND/OR detectado");
   b6b9a:	f003 fad3 	bl	ba144 <_Z16_fetch_usbserialv>
   b6b9e:	4986      	ldr	r1, [pc, #536]	; (b6db8 <loop+0xb9c>)
   b6ba0:	f002 ffeb 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b6ba4:	4b7e      	ldr	r3, [pc, #504]	; (b6da0 <loop+0xb84>)
   b6ba6:	781b      	ldrb	r3, [r3, #0]
   b6ba8:	2b00      	cmp	r3, #0
   b6baa:	f43f ae4c 	beq.w	b6846 <loop+0x62a>
   b6bae:	f8da 3000 	ldr.w	r3, [sl]
   b6bb2:	f8d9 2000 	ldr.w	r2, [r9]
   b6bb6:	4293      	cmp	r3, r2
   b6bb8:	da1a      	bge.n	b6bf0 <loop+0x9d4>
   b6bba:	f8d8 7000 	ldr.w	r7, [r8]
   b6bbe:	b9cf      	cbnz	r7, b6bf4 <loop+0x9d8>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b6bc0:	f8db 2000 	ldr.w	r2, [fp]
   b6bc4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b6bc8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b6bcc:	fb01 5202 	mla	r2, r1, r2, r5
   b6bd0:	f1b8 0f00 	cmp.w	r8, #0
   b6bd4:	441a      	add	r2, r3
   b6bd6:	bf14      	ite	ne
   b6bd8:	2101      	movne	r1, #1
   b6bda:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b6bdc:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b6be0:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b6be4:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b6be8:	bf0c      	ite	eq
   b6bea:	4974      	ldreq	r1, [pc, #464]	; (b6dbc <loop+0xba0>)
   b6bec:	4974      	ldrne	r1, [pc, #464]	; (b6dc0 <loop+0xba4>)
   b6bee:	e7c9      	b.n	b6b84 <loop+0x968>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b6bf0:	f73f ae01 	bgt.w	b67f6 <loop+0x5da>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b6bf4:	f003 faa6 	bl	ba144 <_Z16_fetch_usbserialv>
   b6bf8:	4972      	ldr	r1, [pc, #456]	; (b6dc4 <loop+0xba8>)
   b6bfa:	e644      	b.n	b6886 <loop+0x66a>
            Serial.println("THEN detectado");
   b6bfc:	f003 faa2 	bl	ba144 <_Z16_fetch_usbserialv>
   b6c00:	4971      	ldr	r1, [pc, #452]	; (b6dc8 <loop+0xbac>)
   b6c02:	f002 ffba 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b6c06:	4b66      	ldr	r3, [pc, #408]	; (b6da0 <loop+0xb84>)
   b6c08:	781b      	ldrb	r3, [r3, #0]
   b6c0a:	2b00      	cmp	r3, #0
   b6c0c:	f43f ae1b 	beq.w	b6846 <loop+0x62a>
   b6c10:	f8d9 3000 	ldr.w	r3, [r9]
   b6c14:	2b00      	cmp	r3, #0
   b6c16:	dd08      	ble.n	b6c2a <loop+0xa0e>
   b6c18:	f8da 2000 	ldr.w	r2, [sl]
   b6c1c:	4293      	cmp	r3, r2
   b6c1e:	dd04      	ble.n	b6c2a <loop+0xa0e>
              THEN_pasado = true;
   b6c20:	4b60      	ldr	r3, [pc, #384]	; (b6da4 <loop+0xb88>)
              showBitmap(3,0,"THEN");
   b6c22:	496a      	ldr	r1, [pc, #424]	; (b6dcc <loop+0xbb0>)
              THEN_pasado = true;
   b6c24:	2201      	movs	r2, #1
   b6c26:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b6c28:	e7ac      	b.n	b6b84 <loop+0x968>
                Serial.println("Numero de sensores infucientes");
   b6c2a:	f003 fa8b 	bl	ba144 <_Z16_fetch_usbserialv>
   b6c2e:	4968      	ldr	r1, [pc, #416]	; (b6dd0 <loop+0xbb4>)
   b6c30:	e629      	b.n	b6886 <loop+0x66a>
            Serial.println("ELSE detectado");
   b6c32:	f003 fa87 	bl	ba144 <_Z16_fetch_usbserialv>
   b6c36:	4967      	ldr	r1, [pc, #412]	; (b6dd4 <loop+0xbb8>)
   b6c38:	f002 ff9f 	bl	b9b7a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b6c3c:	4b58      	ldr	r3, [pc, #352]	; (b6da0 <loop+0xb84>)
   b6c3e:	781b      	ldrb	r3, [r3, #0]
   b6c40:	2b00      	cmp	r3, #0
   b6c42:	f43f ae00 	beq.w	b6846 <loop+0x62a>
   b6c46:	f8d8 3000 	ldr.w	r3, [r8]
   b6c4a:	2b00      	cmp	r3, #0
   b6c4c:	dd04      	ble.n	b6c58 <loop+0xa3c>
              ELSE_pasado = true;
   b6c4e:	4b51      	ldr	r3, [pc, #324]	; (b6d94 <loop+0xb78>)
              showBitmap(3,0,"ELSE");
   b6c50:	4961      	ldr	r1, [pc, #388]	; (b6dd8 <loop+0xbbc>)
              ELSE_pasado = true;
   b6c52:	2201      	movs	r2, #1
   b6c54:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b6c56:	e795      	b.n	b6b84 <loop+0x968>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b6c58:	f003 fa74 	bl	ba144 <_Z16_fetch_usbserialv>
   b6c5c:	495f      	ldr	r1, [pc, #380]	; (b6ddc <loop+0xbc0>)
   b6c5e:	e612      	b.n	b6886 <loop+0x66a>
        if ( tagInfo[0] != -1 ) {
   b6c60:	3501      	adds	r5, #1
   b6c62:	f43f acff 	beq.w	b6664 <loop+0x448>
          Serial.println("Tarjeta inválida para este modo");
   b6c66:	f003 fa6d 	bl	ba144 <_Z16_fetch_usbserialv>
   b6c6a:	495d      	ldr	r1, [pc, #372]	; (b6de0 <loop+0xbc4>)
   b6c6c:	f002 ff85 	bl	b9b7a <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b6c70:	4946      	ldr	r1, [pc, #280]	; (b6d8c <loop+0xb70>)
   b6c72:	a8c2      	add	r0, sp, #776	; 0x308
   b6c74:	f002 feb3 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6c78:	aac2      	add	r2, sp, #776	; 0x308
   b6c7a:	2100      	movs	r1, #0
   b6c7c:	e537      	b.n	b66ee <loop+0x4d2>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b6c7e:	2b01      	cmp	r3, #1
   b6c80:	f47f ad01 	bne.w	b6686 <loop+0x46a>
        valor = makeEvaluate(bloques[0]);
   b6c84:	4c57      	ldr	r4, [pc, #348]	; (b6de4 <loop+0xbc8>)
   b6c86:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b6c8a:	f104 0110 	add.w	r1, r4, #16
   b6c8e:	4668      	mov	r0, sp
   b6c90:	f004 fa7e 	bl	bb190 <memcpy>
   b6c94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b6c98:	f7fd ffe0 	bl	b4c5c <_Z12makeEvaluate6BLOQUE>
   b6c9c:	4c52      	ldr	r4, [pc, #328]	; (b6de8 <loop+0xbcc>)
        ejecutarEvaluacion(valor, 0);
   b6c9e:	2100      	movs	r1, #0
        valor = makeEvaluate(bloques[0]);
   b6ca0:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 0);
   b6ca2:	f7fe f805 	bl	b4cb0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b6ca6:	7823      	ldrb	r3, [r4, #0]
   b6ca8:	2b00      	cmp	r3, #0
   b6caa:	d034      	beq.n	b6d16 <loop+0xafa>
   b6cac:	494f      	ldr	r1, [pc, #316]	; (b6dec <loop+0xbd0>)
   b6cae:	4850      	ldr	r0, [pc, #320]	; (b6df0 <loop+0xbd4>)
   b6cb0:	f004 fac2 	bl	bb238 <strcpy>
        display.println(buf);
   b6cb4:	494e      	ldr	r1, [pc, #312]	; (b6df0 <loop+0xbd4>)
   b6cb6:	484f      	ldr	r0, [pc, #316]	; (b6df4 <loop+0xbd8>)
   b6cb8:	f002 ff5f 	bl	b9b7a <_ZN5Print7printlnEPKc>
      if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b6cbc:	682d      	ldr	r5, [r5, #0]
   b6cbe:	2d01      	cmp	r5, #1
   b6cc0:	d11f      	bne.n	b6d02 <loop+0xae6>
   b6cc2:	4c48      	ldr	r4, [pc, #288]	; (b6de4 <loop+0xbc8>)
   b6cc4:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b6cc8:	2b00      	cmp	r3, #0
   b6cca:	dd28      	ble.n	b6d1e <loop+0xb02>
        valor = makeEvaluate(bloques[1]);
   b6ccc:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b6cd0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b6cd4:	4668      	mov	r0, sp
   b6cd6:	f004 fa5b 	bl	bb190 <memcpy>
   b6cda:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b6cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6ce0:	f7fd ffbc 	bl	b4c5c <_Z12makeEvaluate6BLOQUE>
   b6ce4:	4c40      	ldr	r4, [pc, #256]	; (b6de8 <loop+0xbcc>)
        ejecutarEvaluacion(valor, 1);
   b6ce6:	4629      	mov	r1, r5
        valor = makeEvaluate(bloques[1]);
   b6ce8:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 1);
   b6cea:	f7fd ffe1 	bl	b4cb0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b6cee:	7823      	ldrb	r3, [r4, #0]
   b6cf0:	b19b      	cbz	r3, b6d1a <loop+0xafe>
   b6cf2:	4941      	ldr	r1, [pc, #260]	; (b6df8 <loop+0xbdc>)
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b6cf4:	483e      	ldr	r0, [pc, #248]	; (b6df0 <loop+0xbd4>)
   b6cf6:	f004 fa9f 	bl	bb238 <strcpy>
        display.print(buf);
   b6cfa:	493d      	ldr	r1, [pc, #244]	; (b6df0 <loop+0xbd4>)
   b6cfc:	483d      	ldr	r0, [pc, #244]	; (b6df4 <loop+0xbd8>)
   b6cfe:	f002 ff29 	bl	b9b54 <_ZN5Print5printEPKc>
      display.display();
   b6d02:	4c3c      	ldr	r4, [pc, #240]	; (b6df4 <loop+0xbd8>)
   b6d04:	4620      	mov	r0, r4
   b6d06:	f002 f8d7 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b6d0a:	4620      	mov	r0, r4
   b6d0c:	f001 fe6c 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6d10:	2300      	movs	r3, #0
   b6d12:	6123      	str	r3, [r4, #16]
   b6d14:	e48e      	b.n	b6634 <loop+0x418>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b6d16:	4939      	ldr	r1, [pc, #228]	; (b6dfc <loop+0xbe0>)
   b6d18:	e7c9      	b.n	b6cae <loop+0xa92>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b6d1a:	4939      	ldr	r1, [pc, #228]	; (b6e00 <loop+0xbe4>)
   b6d1c:	e7ea      	b.n	b6cf4 <loop+0xad8>
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b6d1e:	4939      	ldr	r1, [pc, #228]	; (b6e04 <loop+0xbe8>)
   b6d20:	e7e8      	b.n	b6cf4 <loop+0xad8>
    switch (tagInfo[0])
   b6d22:	2d02      	cmp	r5, #2
   b6d24:	f000 8083 	beq.w	b6e2e <loop+0xc12>
   b6d28:	2d06      	cmp	r5, #6
   b6d2a:	f040 81a2 	bne.w	b7072 <loop+0xe56>
      switch (tagInfo[1])
   b6d2e:	6860      	ldr	r0, [r4, #4]
   b6d30:	2801      	cmp	r0, #1
   b6d32:	d014      	beq.n	b6d5e <loop+0xb42>
   b6d34:	2802      	cmp	r0, #2
   b6d36:	d020      	beq.n	b6d7a <loop+0xb5e>
   b6d38:	b928      	cbnz	r0, b6d46 <loop+0xb2a>
          cambioModo(tagInfo[2]);
   b6d3a:	68a0      	ldr	r0, [r4, #8]
   b6d3c:	f7ff fa2a 	bl	b6194 <_Z10cambioModoi>
          resetFunc();
   b6d40:	4b31      	ldr	r3, [pc, #196]	; (b6e08 <loop+0xbec>)
   b6d42:	681b      	ldr	r3, [r3, #0]
   b6d44:	4798      	blx	r3
    tagInfo[0] = -1;
   b6d46:	f04f 33ff 	mov.w	r3, #4294967295
   b6d4a:	6023      	str	r3, [r4, #0]
    if (play) {
   b6d4c:	7833      	ldrb	r3, [r6, #0]
   b6d4e:	2b00      	cmp	r3, #0
   b6d50:	f43f ac70 	beq.w	b6634 <loop+0x418>
      reproducir();
   b6d54:	f7ff f9d0 	bl	b60f8 <_Z10reproducirv>
      play = false;
   b6d58:	2300      	movs	r3, #0
   b6d5a:	7033      	strb	r3, [r6, #0]
   b6d5c:	e46a      	b.n	b6634 <loop+0x418>
          showBitmap(3,0,"Ejecutando...");   
   b6d5e:	492b      	ldr	r1, [pc, #172]	; (b6e0c <loop+0xbf0>)
          play = true;
   b6d60:	7030      	strb	r0, [r6, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b6d62:	a8c2      	add	r0, sp, #776	; 0x308
   b6d64:	f002 fe3b 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6d68:	aac2      	add	r2, sp, #776	; 0x308
   b6d6a:	2100      	movs	r1, #0
   b6d6c:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b6d6e:	f7fe ff87 	bl	b5c80 <_Z10showBitmapii6String>
   b6d72:	a8c2      	add	r0, sp, #776	; 0x308
   b6d74:	f002 fde8 	bl	b9948 <_ZN6StringD1Ev>
   b6d78:	e7e5      	b.n	b6d46 <loop+0xb2a>
          if ( tagInfo[2] == 0 ) {
   b6d7a:	68a5      	ldr	r5, [r4, #8]
   b6d7c:	2d00      	cmp	r5, #0
   b6d7e:	d14d      	bne.n	b6e1c <loop+0xc00>
            borradoPOP();
   b6d80:	f7fd fdca 	bl	b4918 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b6d84:	4922      	ldr	r1, [pc, #136]	; (b6e10 <loop+0xbf4>)
   b6d86:	e7ec      	b.n	b6d62 <loop+0xb46>
   b6d88:	2003d1b0 	.word	0x2003d1b0
   b6d8c:	000bb591 	.word	0x000bb591
   b6d90:	000bbb87 	.word	0x000bbb87
   b6d94:	2003c7e0 	.word	0x2003c7e0
   b6d98:	000bbb98 	.word	0x000bbb98
   b6d9c:	000bbbad 	.word	0x000bbbad
   b6da0:	2003c7e1 	.word	0x2003c7e1
   b6da4:	2003c7f0 	.word	0x2003c7f0
   b6da8:	000bbbba 	.word	0x000bbbba
   b6dac:	2003d50c 	.word	0x2003d50c
   b6db0:	2003d510 	.word	0x2003d510
   b6db4:	000bbbbd 	.word	0x000bbbbd
   b6db8:	000bbc0f 	.word	0x000bbc0f
   b6dbc:	000bbb5f 	.word	0x000bbb5f
   b6dc0:	000bbc20 	.word	0x000bbc20
   b6dc4:	000bbc24 	.word	0x000bbc24
   b6dc8:	000bbc56 	.word	0x000bbc56
   b6dcc:	000bbc65 	.word	0x000bbc65
   b6dd0:	000bbc6a 	.word	0x000bbc6a
   b6dd4:	000bbc89 	.word	0x000bbc89
   b6dd8:	000bbc98 	.word	0x000bbc98
   b6ddc:	000bbc9d 	.word	0x000bbc9d
   b6de0:	000bbd2e 	.word	0x000bbd2e
   b6de4:	2003c7f4 	.word	0x2003c7f4
   b6de8:	2003e6b8 	.word	0x2003e6b8
   b6dec:	000bbd4f 	.word	0x000bbd4f
   b6df0:	2003cdcd 	.word	0x2003cdcd
   b6df4:	2003ce18 	.word	0x2003ce18
   b6df8:	000bbd7f 	.word	0x000bbd7f
   b6dfc:	000bbd5e 	.word	0x000bbd5e
   b6e00:	000bbd8e 	.word	0x000bbd8e
   b6e04:	000bbd9e 	.word	0x000bbd9e
   b6e08:	2003d514 	.word	0x2003d514
   b6e0c:	000bbdb8 	.word	0x000bbdb8
   b6e10:	000bbdc6 	.word	0x000bbdc6
   b6e14:	2003d504 	.word	0x2003d504
   b6e18:	2003d1b8 	.word	0x2003d1b8
          } else if ( tagInfo[2] == 1 ){
   b6e1c:	2d01      	cmp	r5, #1
   b6e1e:	d103      	bne.n	b6e28 <loop+0xc0c>
            borradoALL(2);
   b6e20:	f7fd fd56 	bl	b48d0 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b6e24:	499a      	ldr	r1, [pc, #616]	; (b7090 <loop+0xe74>)
   b6e26:	e79c      	b.n	b6d62 <loop+0xb46>
            borradoBLOQUE(2);
   b6e28:	f7ff f8ce 	bl	b5fc8 <_Z13borradoBLOQUEi>
   b6e2c:	e78b      	b.n	b6d46 <loop+0xb2a>
      switch (tagInfo[1])
   b6e2e:	6863      	ldr	r3, [r4, #4]
   b6e30:	2b01      	cmp	r3, #1
   b6e32:	d078      	beq.n	b6f26 <loop+0xd0a>
   b6e34:	2b02      	cmp	r3, #2
   b6e36:	f000 80bc 	beq.w	b6fb2 <loop+0xd96>
   b6e3a:	2b00      	cmp	r3, #0
   b6e3c:	d183      	bne.n	b6d46 <loop+0xb2a>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b6e3e:	68a1      	ldr	r1, [r4, #8]
   b6e40:	4d94      	ldr	r5, [pc, #592]	; (b7094 <loop+0xe78>)
   b6e42:	4f95      	ldr	r7, [pc, #596]	; (b7098 <loop+0xe7c>)
   b6e44:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6e46:	f7fd fdd7 	bl	b49f8 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6e4a:	a9ba      	add	r1, sp, #744	; 0x2e8
   b6e4c:	a8c2      	add	r0, sp, #776	; 0x308
   b6e4e:	f002 fde9 	bl	b9a24 <_ZN6StringC1ERKS_>
   b6e52:	68e1      	ldr	r1, [r4, #12]
   b6e54:	a8be      	add	r0, sp, #760	; 0x2f8
   b6e56:	f7fd fe01 	bl	b4a5c <_Z19decodificarTIPO_msgi>
   b6e5a:	a9be      	add	r1, sp, #760	; 0x2f8
   b6e5c:	a8c2      	add	r0, sp, #776	; 0x308
   b6e5e:	f002 fe28 	bl	b9ab2 <_ZplRK15StringSumHelperRK6String>
   b6e62:	498e      	ldr	r1, [pc, #568]	; (b709c <loop+0xe80>)
   b6e64:	f002 fe31 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b6e68:	4601      	mov	r1, r0
   b6e6a:	6828      	ldr	r0, [r5, #0]
   b6e6c:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b6e70:	f002 fdc9 	bl	b9a06 <_ZN6StringaSERKS_>
   b6e74:	a8be      	add	r0, sp, #760	; 0x2f8
   b6e76:	f002 fd67 	bl	b9948 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6e7a:	a8c2      	add	r0, sp, #776	; 0x308
   b6e7c:	f002 fd64 	bl	b9948 <_ZN6StringD1Ev>
   b6e80:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6e82:	f002 fd61 	bl	b9948 <_ZN6StringD1Ev>
        if (posicion<23) {
   b6e86:	682b      	ldr	r3, [r5, #0]
   b6e88:	2b16      	cmp	r3, #22
   b6e8a:	dc45      	bgt.n	b6f18 <loop+0xcfc>
	const char * c_str() const { return buffer; }
   b6e8c:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b6e8e:	4884      	ldr	r0, [pc, #528]	; (b70a0 <loop+0xe84>)
   b6e90:	58fa      	ldr	r2, [r7, r3]
   b6e92:	2140      	movs	r1, #64	; 0x40
   b6e94:	f002 fbe2 	bl	b965c <snprintf>
          display.print(buf);
   b6e98:	4981      	ldr	r1, [pc, #516]	; (b70a0 <loop+0xe84>)
   b6e9a:	4882      	ldr	r0, [pc, #520]	; (b70a4 <loop+0xe88>)
   b6e9c:	f002 fe5a 	bl	b9b54 <_ZN5Print5printEPKc>
          display.display();
   b6ea0:	4880      	ldr	r0, [pc, #512]	; (b70a4 <loop+0xe88>)
   b6ea2:	f002 f809 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b6ea6:	f003 f94d 	bl	ba144 <_Z16_fetch_usbserialv>
   b6eaa:	68a1      	ldr	r1, [r4, #8]
   b6eac:	4607      	mov	r7, r0
   b6eae:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6eb0:	f7fd fda2 	bl	b49f8 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6eb4:	a9ba      	add	r1, sp, #744	; 0x2e8
   b6eb6:	a8c2      	add	r0, sp, #776	; 0x308
   b6eb8:	f002 fdb4 	bl	b9a24 <_ZN6StringC1ERKS_>
   b6ebc:	68e1      	ldr	r1, [r4, #12]
   b6ebe:	a8be      	add	r0, sp, #760	; 0x2f8
   b6ec0:	f7fd fdcc 	bl	b4a5c <_Z19decodificarTIPO_msgi>
   b6ec4:	a9be      	add	r1, sp, #760	; 0x2f8
   b6ec6:	a8c2      	add	r0, sp, #776	; 0x308
   b6ec8:	f002 fdf3 	bl	b9ab2 <_ZplRK15StringSumHelperRK6String>
   b6ecc:	6801      	ldr	r1, [r0, #0]
   b6ece:	4638      	mov	r0, r7
   b6ed0:	f7fd f926 	bl	b4120 <_ZN5Print8printlnfEPKcz>
   b6ed4:	a8be      	add	r0, sp, #760	; 0x2f8
   b6ed6:	f002 fd37 	bl	b9948 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6eda:	a8c2      	add	r0, sp, #776	; 0x308
   b6edc:	f002 fd34 	bl	b9948 <_ZN6StringD1Ev>
   b6ee0:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6ee2:	f002 fd31 	bl	b9948 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b6ee6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b6eea:	f7fd fdd1 	bl	b4a90 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b6eee:	682b      	ldr	r3, [r5, #0]
   b6ef0:	4a6d      	ldr	r2, [pc, #436]	; (b70a8 <loop+0xe8c>)
   b6ef2:	68a1      	ldr	r1, [r4, #8]
   b6ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b6ef8:	4a6c      	ldr	r2, [pc, #432]	; (b70ac <loop+0xe90>)
   b6efa:	68e1      	ldr	r1, [r4, #12]
   b6efc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b6f00:	3301      	adds	r3, #1
   b6f02:	602b      	str	r3, [r5, #0]
        if (bucle) {
   b6f04:	4b6a      	ldr	r3, [pc, #424]	; (b70b0 <loop+0xe94>)
   b6f06:	781b      	ldrb	r3, [r3, #0]
   b6f08:	2b00      	cmp	r3, #0
   b6f0a:	f43f af1c 	beq.w	b6d46 <loop+0xb2a>
          tam_bucle++;
   b6f0e:	4a69      	ldr	r2, [pc, #420]	; (b70b4 <loop+0xe98>)
   b6f10:	6813      	ldr	r3, [r2, #0]
   b6f12:	3301      	adds	r3, #1
   b6f14:	6013      	str	r3, [r2, #0]
   b6f16:	e716      	b.n	b6d46 <loop+0xb2a>
        } else if (posicion==23){
   b6f18:	2b17      	cmp	r3, #23
   b6f1a:	d1c4      	bne.n	b6ea6 <loop+0xc8a>
          snprintf(buf, sizeof(buf), "...");
   b6f1c:	4966      	ldr	r1, [pc, #408]	; (b70b8 <loop+0xe9c>)
   b6f1e:	4860      	ldr	r0, [pc, #384]	; (b70a0 <loop+0xe84>)
   b6f20:	f004 f98a 	bl	bb238 <strcpy>
   b6f24:	e7b8      	b.n	b6e98 <loop+0xc7c>
        if (!bucle) {
   b6f26:	4f62      	ldr	r7, [pc, #392]	; (b70b0 <loop+0xe94>)
   b6f28:	783b      	ldrb	r3, [r7, #0]
   b6f2a:	2b00      	cmp	r3, #0
   b6f2c:	d134      	bne.n	b6f98 <loop+0xd7c>
          secuencia[posicion] = "Loop - ";
   b6f2e:	4d59      	ldr	r5, [pc, #356]	; (b7094 <loop+0xe78>)
   b6f30:	f8df 8164 	ldr.w	r8, [pc, #356]	; b7098 <loop+0xe7c>
          Serial.println("Loop");
   b6f34:	f003 f906 	bl	ba144 <_Z16_fetch_usbserialv>
   b6f38:	4960      	ldr	r1, [pc, #384]	; (b70bc <loop+0xea0>)
   b6f3a:	f002 fe1e 	bl	b9b7a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b6f3e:	6828      	ldr	r0, [r5, #0]
   b6f40:	495f      	ldr	r1, [pc, #380]	; (b70c0 <loop+0xea4>)
   b6f42:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b6f46:	f002 fd78 	bl	b9a3a <_ZN6StringaSEPKc>
          if (posicion<23) {
   b6f4a:	682b      	ldr	r3, [r5, #0]
   b6f4c:	2b16      	cmp	r3, #22
   b6f4e:	dc1c      	bgt.n	b6f8a <loop+0xd6e>
	const char * c_str() const { return buffer; }
   b6f50:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b6f52:	4853      	ldr	r0, [pc, #332]	; (b70a0 <loop+0xe84>)
   b6f54:	f858 2003 	ldr.w	r2, [r8, r3]
   b6f58:	2140      	movs	r1, #64	; 0x40
   b6f5a:	f002 fb7f 	bl	b965c <snprintf>
            display.print(buf);
   b6f5e:	4950      	ldr	r1, [pc, #320]	; (b70a0 <loop+0xe84>)
   b6f60:	4850      	ldr	r0, [pc, #320]	; (b70a4 <loop+0xe88>)
   b6f62:	f002 fdf7 	bl	b9b54 <_ZN5Print5printEPKc>
            display.display();
   b6f66:	484f      	ldr	r0, [pc, #316]	; (b70a4 <loop+0xe88>)
   b6f68:	f001 ffa6 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b6f6c:	682b      	ldr	r3, [r5, #0]
   b6f6e:	4a4e      	ldr	r2, [pc, #312]	; (b70a8 <loop+0xe8c>)
   b6f70:	f04f 31ff 	mov.w	r1, #4294967295
   b6f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b6f78:	4a4c      	ldr	r2, [pc, #304]	; (b70ac <loop+0xe90>)
   b6f7a:	2100      	movs	r1, #0
   b6f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b6f80:	3301      	adds	r3, #1
   b6f82:	602b      	str	r3, [r5, #0]
          bucle = true;
   b6f84:	2301      	movs	r3, #1
   b6f86:	703b      	strb	r3, [r7, #0]
   b6f88:	e6dd      	b.n	b6d46 <loop+0xb2a>
          } else if (posicion==23){
   b6f8a:	2b17      	cmp	r3, #23
   b6f8c:	d1ee      	bne.n	b6f6c <loop+0xd50>
            snprintf(buf, sizeof(buf), "...");
   b6f8e:	494a      	ldr	r1, [pc, #296]	; (b70b8 <loop+0xe9c>)
   b6f90:	4843      	ldr	r0, [pc, #268]	; (b70a0 <loop+0xe84>)
   b6f92:	f004 f951 	bl	bb238 <strcpy>
   b6f96:	e7e2      	b.n	b6f5e <loop+0xd42>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b6f98:	f003 f8d4 	bl	ba144 <_Z16_fetch_usbserialv>
   b6f9c:	4949      	ldr	r1, [pc, #292]	; (b70c4 <loop+0xea8>)
          Serial.println("Loop sin comenzar o sin contenido");
   b6f9e:	f002 fdec 	bl	b9b7a <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b6fa2:	4949      	ldr	r1, [pc, #292]	; (b70c8 <loop+0xeac>)
   b6fa4:	a8c2      	add	r0, sp, #776	; 0x308
   b6fa6:	f002 fd1a 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b6faa:	aac2      	add	r2, sp, #776	; 0x308
   b6fac:	2102      	movs	r1, #2
        showBitmap(2,0,"");
   b6fae:	2002      	movs	r0, #2
   b6fb0:	e6dd      	b.n	b6d6e <loop+0xb52>
        if (bucle && tam_bucle>0) {
   b6fb2:	4f3f      	ldr	r7, [pc, #252]	; (b70b0 <loop+0xe94>)
   b6fb4:	783b      	ldrb	r3, [r7, #0]
   b6fb6:	2b00      	cmp	r3, #0
   b6fb8:	d057      	beq.n	b706a <loop+0xe4e>
   b6fba:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b70b4 <loop+0xe98>
   b6fbe:	f8d8 3000 	ldr.w	r3, [r8]
   b6fc2:	2b00      	cmp	r3, #0
   b6fc4:	dd51      	ble.n	b706a <loop+0xe4e>
          Serial.println("END Loop");
   b6fc6:	f003 f8bd 	bl	ba144 <_Z16_fetch_usbserialv>
   b6fca:	4940      	ldr	r1, [pc, #256]	; (b70cc <loop+0xeb0>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b6fcc:	4d31      	ldr	r5, [pc, #196]	; (b7094 <loop+0xe78>)
   b6fce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b7098 <loop+0xe7c>
          Serial.println("END Loop");
   b6fd2:	f002 fdd2 	bl	b9b7a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b6fd6:	68a1      	ldr	r1, [r4, #8]
   b6fd8:	220a      	movs	r2, #10
   b6fda:	3102      	adds	r1, #2
   b6fdc:	a8be      	add	r0, sp, #760	; 0x2f8
   b6fde:	f002 fd3e 	bl	b9a5e <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b6fe2:	a9be      	add	r1, sp, #760	; 0x2f8
   b6fe4:	a8c2      	add	r0, sp, #776	; 0x308
   b6fe6:	f002 fd1d 	bl	b9a24 <_ZN6StringC1ERKS_>
   b6fea:	4939      	ldr	r1, [pc, #228]	; (b70d0 <loop+0xeb4>)
   b6fec:	a8c2      	add	r0, sp, #776	; 0x308
   b6fee:	f002 fd6c 	bl	b9aca <_ZplRK15StringSumHelperPKc>
   b6ff2:	4601      	mov	r1, r0
   b6ff4:	6828      	ldr	r0, [r5, #0]
   b6ff6:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b6ffa:	f002 fd04 	bl	b9a06 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b6ffe:	a8c2      	add	r0, sp, #776	; 0x308
   b7000:	f002 fca2 	bl	b9948 <_ZN6StringD1Ev>
   b7004:	a8be      	add	r0, sp, #760	; 0x2f8
   b7006:	f002 fc9f 	bl	b9948 <_ZN6StringD1Ev>
          if (posicion<23) {
   b700a:	682b      	ldr	r3, [r5, #0]
   b700c:	2b16      	cmp	r3, #22
   b700e:	dc25      	bgt.n	b705c <loop+0xe40>
	const char * c_str() const { return buffer; }
   b7010:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7012:	4823      	ldr	r0, [pc, #140]	; (b70a0 <loop+0xe84>)
   b7014:	f859 2003 	ldr.w	r2, [r9, r3]
   b7018:	2140      	movs	r1, #64	; 0x40
   b701a:	f002 fb1f 	bl	b965c <snprintf>
            display.print(buf);
   b701e:	4920      	ldr	r1, [pc, #128]	; (b70a0 <loop+0xe84>)
   b7020:	4820      	ldr	r0, [pc, #128]	; (b70a4 <loop+0xe88>)
   b7022:	f002 fd97 	bl	b9b54 <_ZN5Print5printEPKc>
            display.display();
   b7026:	481f      	ldr	r0, [pc, #124]	; (b70a4 <loop+0xe88>)
   b7028:	f001 ff46 	bl	b8eb8 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b702c:	682b      	ldr	r3, [r5, #0]
   b702e:	4a1e      	ldr	r2, [pc, #120]	; (b70a8 <loop+0xe8c>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b7030:	481e      	ldr	r0, [pc, #120]	; (b70ac <loop+0xe90>)
          notas[posicion] = -2;
   b7032:	f06f 0101 	mvn.w	r1, #1
   b7036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b703a:	f8d8 2000 	ldr.w	r2, [r8]
   b703e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7042:	68a1      	ldr	r1, [r4, #8]
   b7044:	3201      	adds	r2, #1
   b7046:	1a9a      	subs	r2, r3, r2
          posicion++;
   b7048:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b704a:	3102      	adds	r1, #2
          posicion++;
   b704c:	602b      	str	r3, [r5, #0]
          bucle = false;
   b704e:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7050:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b7054:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b7056:	f8c8 3000 	str.w	r3, [r8]
   b705a:	e674      	b.n	b6d46 <loop+0xb2a>
          } else if (posicion==23){
   b705c:	2b17      	cmp	r3, #23
   b705e:	d1e5      	bne.n	b702c <loop+0xe10>
            snprintf(buf, sizeof(buf), "...");
   b7060:	4915      	ldr	r1, [pc, #84]	; (b70b8 <loop+0xe9c>)
   b7062:	480f      	ldr	r0, [pc, #60]	; (b70a0 <loop+0xe84>)
   b7064:	f004 f8e8 	bl	bb238 <strcpy>
   b7068:	e7d9      	b.n	b701e <loop+0xe02>
          Serial.println("Loop sin comenzar o sin contenido");
   b706a:	f003 f86b 	bl	ba144 <_Z16_fetch_usbserialv>
   b706e:	4919      	ldr	r1, [pc, #100]	; (b70d4 <loop+0xeb8>)
   b7070:	e795      	b.n	b6f9e <loop+0xd82>
      if ( tagInfo[0] != -1 ) {
   b7072:	3501      	adds	r5, #1
   b7074:	f43f ae67 	beq.w	b6d46 <loop+0xb2a>
        Serial.println("Tarjeta inválida para este modo");
   b7078:	f003 f864 	bl	ba144 <_Z16_fetch_usbserialv>
   b707c:	4916      	ldr	r1, [pc, #88]	; (b70d8 <loop+0xebc>)
   b707e:	f002 fd7c 	bl	b9b7a <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b7082:	4911      	ldr	r1, [pc, #68]	; (b70c8 <loop+0xeac>)
   b7084:	a8c2      	add	r0, sp, #776	; 0x308
   b7086:	f002 fcaa 	bl	b99de <_ZN6StringC1EPK19__FlashStringHelper>
   b708a:	aac2      	add	r2, sp, #776	; 0x308
   b708c:	2100      	movs	r1, #0
   b708e:	e78e      	b.n	b6fae <loop+0xd92>
   b7090:	000bba8b 	.word	0x000bba8b
   b7094:	2003d500 	.word	0x2003d500
   b7098:	2003d518 	.word	0x2003d518
   b709c:	000bbe26 	.word	0x000bbe26
   b70a0:	2003cdcd 	.word	0x2003cdcd
   b70a4:	2003ce18 	.word	0x2003ce18
   b70a8:	2003d1d0 	.word	0x2003d1d0
   b70ac:	2003ce88 	.word	0x2003ce88
   b70b0:	2003cdcc 	.word	0x2003cdcc
   b70b4:	2003d700 	.word	0x2003d700
   b70b8:	000bba6a 	.word	0x000bba6a
   b70bc:	000bbe1e 	.word	0x000bbe1e
   b70c0:	000bbddd 	.word	0x000bbddd
   b70c4:	000bbde5 	.word	0x000bbde5
   b70c8:	000bb591 	.word	0x000bb591
   b70cc:	000bbe1a 	.word	0x000bbe1a
   b70d0:	000bbe23 	.word	0x000bbe23
   b70d4:	000bbe2a 	.word	0x000bbe2a
   b70d8:	000bbd2e 	.word	0x000bbd2e

000b70dc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b70dc:	4770      	bx	lr

000b70de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b70de:	b510      	push	{r4, lr}
  }
   b70e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b70e2:	4604      	mov	r4, r0
  }
   b70e4:	f7fc ffd9 	bl	b409a <_ZdlPvj>
   b70e8:	4620      	mov	r0, r4
   b70ea:	bd10      	pop	{r4, pc}

000b70ec <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b70ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b70ee:	4604      	mov	r4, r0
   b70f0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b70f2:	7922      	ldrb	r2, [r4, #4]
   b70f4:	68a3      	ldr	r3, [r4, #8]
   b70f6:	b132      	cbz	r2, b7106 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b70f8:	b9a3      	cbnz	r3, b7124 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b70fa:	490b      	ldr	r1, [pc, #44]	; (b7128 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b70fc:	b002      	add	sp, #8
   b70fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7102:	f002 bd27 	b.w	b9b54 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7106:	4a09      	ldr	r2, [pc, #36]	; (b712c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7108:	7b26      	ldrb	r6, [r4, #12]
   b710a:	4d09      	ldr	r5, [pc, #36]	; (b7130 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b710c:	4909      	ldr	r1, [pc, #36]	; (b7134 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b710e:	7b64      	ldrb	r4, [r4, #13]
   b7110:	2e01      	cmp	r6, #1
   b7112:	bf18      	it	ne
   b7114:	4629      	movne	r1, r5
   b7116:	e9cd 1400 	strd	r1, r4, [sp]
   b711a:	4907      	ldr	r1, [pc, #28]	; (b7138 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b711c:	f7fc fff2 	bl	b4104 <_ZN5Print6printfEPKcz>
  }
   b7120:	b002      	add	sp, #8
   b7122:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7124:	4a05      	ldr	r2, [pc, #20]	; (b713c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7126:	e7ef      	b.n	b7108 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7128:	000bc263 	.word	0x000bc263
   b712c:	000bb591 	.word	0x000bb591
   b7130:	000bc25f 	.word	0x000bc25f
   b7134:	000bc25b 	.word	0x000bc25b
   b7138:	000bc279 	.word	0x000bc279
   b713c:	000bc252 	.word	0x000bc252

000b7140 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7144:	b085      	sub	sp, #20
   b7146:	461f      	mov	r7, r3
   b7148:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b714c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7150:	eba8 0902 	sub.w	r9, r8, r2
   b7154:	eba7 0a01 	sub.w	sl, r7, r1
   b7158:	f1b9 0f00 	cmp.w	r9, #0
   b715c:	bfb8      	it	lt
   b715e:	f1c9 0900 	rsblt	r9, r9, #0
   b7162:	f1ba 0f00 	cmp.w	sl, #0
   b7166:	bfb8      	it	lt
   b7168:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b716c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b716e:	4683      	mov	fp, r0
   b7170:	460c      	mov	r4, r1
   b7172:	4615      	mov	r5, r2
    if (steep) {
   b7174:	dd04      	ble.n	b7180 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7176:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7178:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b717a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b717c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b717e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7180:	42bc      	cmp	r4, r7
   b7182:	dd05      	ble.n	b7190 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7184:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7186:	4645      	mov	r5, r8
   b7188:	4690      	mov	r8, r2
    if (x0 > x1) {
   b718a:	4622      	mov	r2, r4
   b718c:	463c      	mov	r4, r7
   b718e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7190:	1b3e      	subs	r6, r7, r4
   b7192:	b2b2      	uxth	r2, r6
   b7194:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7196:	eba8 0205 	sub.w	r2, r8, r5
   b719a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b719e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b71a2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b71a6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b71aa:	4545      	cmp	r5, r8
   b71ac:	bfb4      	ite	lt
   b71ae:	2201      	movlt	r2, #1
   b71b0:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b71b4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b71b6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b71b8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b71ba:	42bc      	cmp	r4, r7
   b71bc:	dc1c      	bgt.n	b71f8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b71be:	f8db 2000 	ldr.w	r2, [fp]
   b71c2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b71c4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b71c6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b71ca:	bfc7      	ittee	gt
   b71cc:	4629      	movgt	r1, r5
   b71ce:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b71d0:	462a      	movle	r2, r5
   b71d2:	4621      	movle	r1, r4
   b71d4:	4658      	mov	r0, fp
   b71d6:	47c0      	blx	r8
        }
        err -= dy;
   b71d8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b71da:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b71dc:	1ab6      	subs	r6, r6, r2
   b71de:	b2b1      	uxth	r1, r6
   b71e0:	b236      	sxth	r6, r6
        if (err < 0) {
   b71e2:	2e00      	cmp	r6, #0
   b71e4:	da05      	bge.n	b71f2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b71e6:	9a02      	ldr	r2, [sp, #8]
   b71e8:	4415      	add	r5, r2
            err += dx;
   b71ea:	9a00      	ldr	r2, [sp, #0]
   b71ec:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b71ee:	b22d      	sxth	r5, r5
            err += dx;
   b71f0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b71f2:	3401      	adds	r4, #1
   b71f4:	b224      	sxth	r4, r4
   b71f6:	e7e0      	b.n	b71ba <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b71f8:	b005      	add	sp, #20
   b71fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b71fe <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b71fe:	4770      	bx	lr

000b7200 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7200:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7202:	6804      	ldr	r4, [r0, #0]
   b7204:	6924      	ldr	r4, [r4, #16]
   b7206:	46a4      	mov	ip, r4
}
   b7208:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b720c:	4760      	bx	ip

000b720e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b720e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7210:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7212:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7216:	9502      	str	r5, [sp, #8]
   b7218:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b721a:	46a4      	mov	ip, r4
}
   b721c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b721e:	4760      	bx	ip

000b7220 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7220:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7222:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7224:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7228:	9502      	str	r5, [sp, #8]
   b722a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b722c:	46a4      	mov	ip, r4
}
   b722e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7230:	4760      	bx	ip

000b7232 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7232:	b470      	push	{r4, r5, r6}
   b7234:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7238:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b723c:	6804      	ldr	r4, [r0, #0]
   b723e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7242:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7244:	46a4      	mov	ip, r4
}
   b7246:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7248:	4760      	bx	ip

000b724a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b724a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b724e:	461c      	mov	r4, r3
    startWrite();
   b7250:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7252:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7256:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7258:	4605      	mov	r5, r0
   b725a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b725c:	3c01      	subs	r4, #1
   b725e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7260:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7262:	b224      	sxth	r4, r4
    startWrite();
   b7264:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7266:	682b      	ldr	r3, [r5, #0]
   b7268:	f8cd 8004 	str.w	r8, [sp, #4]
   b726c:	9400      	str	r4, [sp, #0]
   b726e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7270:	4628      	mov	r0, r5
   b7272:	463b      	mov	r3, r7
   b7274:	4632      	mov	r2, r6
   b7276:	4639      	mov	r1, r7
   b7278:	47a0      	blx	r4
    endWrite();
   b727a:	682b      	ldr	r3, [r5, #0]
   b727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b727e:	4628      	mov	r0, r5
}
   b7280:	b002      	add	sp, #8
   b7282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7286:	4718      	bx	r3

000b7288 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b728c:	461d      	mov	r5, r3
    startWrite();
   b728e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b7290:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7294:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b7296:	4604      	mov	r4, r0
   b7298:	4617      	mov	r7, r2
   b729a:	460e      	mov	r6, r1
    startWrite();
   b729c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b729e:	e9cd 7800 	strd	r7, r8, [sp]
   b72a2:	6822      	ldr	r2, [r4, #0]
   b72a4:	1e6b      	subs	r3, r5, #1
   b72a6:	4433      	add	r3, r6
   b72a8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b72aa:	4620      	mov	r0, r4
   b72ac:	b21b      	sxth	r3, r3
   b72ae:	463a      	mov	r2, r7
   b72b0:	4631      	mov	r1, r6
   b72b2:	47a8      	blx	r5
    endWrite();
   b72b4:	6823      	ldr	r3, [r4, #0]
   b72b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b72b8:	4620      	mov	r0, r4
}
   b72ba:	b002      	add	sp, #8
   b72bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b72c0:	4718      	bx	r3

000b72c2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b72c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b72c6:	461e      	mov	r6, r3
    startWrite();
   b72c8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b72ca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b72ce:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b72d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b72d4:	460c      	mov	r4, r1
   b72d6:	4605      	mov	r5, r0
   b72d8:	4617      	mov	r7, r2
    startWrite();
   b72da:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b72dc:	4426      	add	r6, r4
   b72de:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b72e0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b72e2:	da0b      	bge.n	b72fc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b72e4:	f8cd 8000 	str.w	r8, [sp]
   b72e8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b72ec:	4621      	mov	r1, r4
   b72ee:	464b      	mov	r3, r9
   b72f0:	463a      	mov	r2, r7
   b72f2:	4628      	mov	r0, r5
   b72f4:	3401      	adds	r4, #1
   b72f6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b72f8:	b224      	sxth	r4, r4
   b72fa:	e7f0      	b.n	b72de <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b72fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b72fe:	4628      	mov	r0, r5
}
   b7300:	b002      	add	sp, #8
   b7302:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7306:	4718      	bx	r3

000b7308 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b7308:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b730a:	6802      	ldr	r2, [r0, #0]
   b730c:	9101      	str	r1, [sp, #4]
   b730e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b7312:	9100      	str	r1, [sp, #0]
   b7314:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b7316:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b731a:	2200      	movs	r2, #0
   b731c:	4611      	mov	r1, r2
   b731e:	47a0      	blx	r4
}
   b7320:	b002      	add	sp, #8
   b7322:	bd10      	pop	{r4, pc}

000b7324 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b7328:	4299      	cmp	r1, r3
        uint16_t color) {
   b732a:	4616      	mov	r6, r2
   b732c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b7330:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7334:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b7336:	4680      	mov	r8, r0
   b7338:	460d      	mov	r5, r1
   b733a:	461c      	mov	r4, r3
    if(x0 == x1){
   b733c:	d113      	bne.n	b7366 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b733e:	42be      	cmp	r6, r7
   b7340:	bfc8      	it	gt
   b7342:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7344:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7348:	bfc4      	itt	gt
   b734a:	463e      	movgt	r6, r7
   b734c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b734e:	1c7b      	adds	r3, r7, #1
   b7350:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b7352:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7354:	b21b      	sxth	r3, r3
   b7356:	4632      	mov	r2, r6
   b7358:	4629      	mov	r1, r5
   b735a:	4640      	mov	r0, r8
   b735c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b735e:	b003      	add	sp, #12
   b7360:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7364:	4760      	bx	ip
    } else if(y0 == y1){
   b7366:	42be      	cmp	r6, r7
   b7368:	d10a      	bne.n	b7380 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b736a:	4299      	cmp	r1, r3
   b736c:	bfc2      	ittt	gt
   b736e:	460b      	movgt	r3, r1
   b7370:	4625      	movgt	r5, r4
   b7372:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7374:	1c63      	adds	r3, r4, #1
   b7376:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b737a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b737c:	1b5b      	subs	r3, r3, r5
   b737e:	e7e9      	b.n	b7354 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b7380:	6953      	ldr	r3, [r2, #20]
   b7382:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b7384:	e9cd 7900 	strd	r7, r9, [sp]
   b7388:	f8d8 3000 	ldr.w	r3, [r8]
   b738c:	4640      	mov	r0, r8
   b738e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b7390:	4632      	mov	r2, r6
   b7392:	4623      	mov	r3, r4
   b7394:	4629      	mov	r1, r5
   b7396:	47b8      	blx	r7
        endWrite();
   b7398:	f8d8 3000 	ldr.w	r3, [r8]
   b739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b739e:	4640      	mov	r0, r8
}
   b73a0:	b003      	add	sp, #12
   b73a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b73a6:	4718      	bx	r3

000b73a8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b73a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b73ac:	461d      	mov	r5, r3
    startWrite();
   b73ae:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b73b0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b73b4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b73b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b73ba:	4604      	mov	r4, r0
   b73bc:	460f      	mov	r7, r1
   b73be:	4616      	mov	r6, r2
    startWrite();
   b73c0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b73c2:	6823      	ldr	r3, [r4, #0]
   b73c4:	f8cd 8000 	str.w	r8, [sp]
   b73c8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b73cc:	4632      	mov	r2, r6
   b73ce:	462b      	mov	r3, r5
   b73d0:	4639      	mov	r1, r7
   b73d2:	4620      	mov	r0, r4
   b73d4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b73d6:	6823      	ldr	r3, [r4, #0]
   b73d8:	f8cd 8000 	str.w	r8, [sp]
   b73dc:	f109 32ff 	add.w	r2, r9, #4294967295
   b73e0:	4432      	add	r2, r6
   b73e2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b73e6:	4639      	mov	r1, r7
   b73e8:	462b      	mov	r3, r5
   b73ea:	4620      	mov	r0, r4
   b73ec:	b212      	sxth	r2, r2
   b73ee:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b73f0:	6823      	ldr	r3, [r4, #0]
   b73f2:	f8cd 8000 	str.w	r8, [sp]
   b73f6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b73fa:	4632      	mov	r2, r6
   b73fc:	464b      	mov	r3, r9
   b73fe:	4639      	mov	r1, r7
   b7400:	4620      	mov	r0, r4
   b7402:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b7404:	1e6b      	subs	r3, r5, #1
   b7406:	19d9      	adds	r1, r3, r7
   b7408:	6823      	ldr	r3, [r4, #0]
   b740a:	f8cd 8000 	str.w	r8, [sp]
   b740e:	6a1d      	ldr	r5, [r3, #32]
   b7410:	4620      	mov	r0, r4
   b7412:	464b      	mov	r3, r9
   b7414:	4632      	mov	r2, r6
   b7416:	b209      	sxth	r1, r1
   b7418:	47a8      	blx	r5
    endWrite();
   b741a:	6823      	ldr	r3, [r4, #0]
   b741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b741e:	4620      	mov	r0, r4
}
   b7420:	b002      	add	sp, #8
   b7422:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7426:	4718      	bx	r3

000b7428 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b7428:	4770      	bx	lr

000b742a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b742a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b742e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b7432:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b7434:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b7436:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b743a:	bf59      	ittee	pl
   b743c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b743e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b7440:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b7442:	81c3      	strhmi	r3, [r0, #14]
}
   b7444:	4770      	bx	lr
	...

000b7448 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b7448:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b744a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b744c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b744e:	4a07      	ldr	r2, [pc, #28]	; (b746c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b7450:	4d07      	ldr	r5, [pc, #28]	; (b7470 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b7452:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b7454:	2400      	movs	r4, #0
    _width    = WIDTH;
   b7456:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b7458:	f04f 31ff 	mov.w	r1, #4294967295
   b745c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b7460:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b7462:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b7464:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b7466:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b7468:	6204      	str	r4, [r0, #32]
}
   b746a:	bd30      	pop	{r4, r5, pc}
   b746c:	01000101 	.word	0x01000101
   b7470:	000bc7a0 	.word	0x000bc7a0

000b7474 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b7474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7478:	b08b      	sub	sp, #44	; 0x2c
   b747a:	461c      	mov	r4, r3
   b747c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b7480:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b7482:	b2a3      	uxth	r3, r4
   b7484:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b7488:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b748c:	005b      	lsls	r3, r3, #1
   b748e:	b21b      	sxth	r3, r3
   b7490:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b7492:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b7496:	3301      	adds	r3, #1
   b7498:	b29b      	uxth	r3, r3
   b749a:	9305      	str	r3, [sp, #20]
   b749c:	b293      	uxth	r3, r2
   b749e:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b74a0:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b74a2:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b74a4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b74a8:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b74aa:	2300      	movs	r3, #0
   b74ac:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b74ae:	f001 0301 	and.w	r3, r1, #1
   b74b2:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b74b4:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b74b8:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b74bc:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b74be:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b74c0:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b74c2:	9b02      	ldr	r3, [sp, #8]
   b74c4:	42a3      	cmp	r3, r4
   b74c6:	da6f      	bge.n	b75a8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b74c8:	2d00      	cmp	r5, #0
   b74ca:	db6b      	blt.n	b75a4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b74cc:	9b07      	ldr	r3, [sp, #28]
   b74ce:	3302      	adds	r3, #2
            y--;
   b74d0:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b74d2:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b74d4:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b74d8:	b236      	sxth	r6, r6
            ddF_y += 2;
   b74da:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b74dc:	b22d      	sxth	r5, r5
        x++;
   b74de:	9f02      	ldr	r7, [sp, #8]
   b74e0:	3701      	adds	r7, #1
   b74e2:	fa1f f987 	uxth.w	r9, r7
   b74e6:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b74e8:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b74ec:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b74ee:	429e      	cmp	r6, r3
   b74f0:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b74f2:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b74f4:	db29      	blt.n	b754a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b74f6:	9b08      	ldr	r3, [sp, #32]
   b74f8:	b193      	cbz	r3, b7520 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b74fa:	9804      	ldr	r0, [sp, #16]
   b74fc:	9000      	str	r0, [sp, #0]
   b74fe:	f8db 0000 	ldr.w	r0, [fp]
   b7502:	9906      	ldr	r1, [sp, #24]
   b7504:	9b05      	ldr	r3, [sp, #20]
   b7506:	6a00      	ldr	r0, [r0, #32]
   b7508:	b2b2      	uxth	r2, r6
   b750a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b750e:	1a8a      	subs	r2, r1, r2
   b7510:	eb09 0108 	add.w	r1, r9, r8
   b7514:	4607      	mov	r7, r0
   b7516:	b21b      	sxth	r3, r3
   b7518:	b212      	sxth	r2, r2
   b751a:	b209      	sxth	r1, r1
   b751c:	4658      	mov	r0, fp
   b751e:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b7520:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7522:	b193      	cbz	r3, b754a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b7524:	9906      	ldr	r1, [sp, #24]
   b7526:	9804      	ldr	r0, [sp, #16]
   b7528:	9b05      	ldr	r3, [sp, #20]
   b752a:	9000      	str	r0, [sp, #0]
   b752c:	b2b2      	uxth	r2, r6
   b752e:	f8db 0000 	ldr.w	r0, [fp]
   b7532:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b7536:	1a8a      	subs	r2, r1, r2
   b7538:	eba8 0109 	sub.w	r1, r8, r9
   b753c:	b21b      	sxth	r3, r3
   b753e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7542:	b212      	sxth	r2, r2
   b7544:	b209      	sxth	r1, r1
   b7546:	4658      	mov	r0, fp
   b7548:	47c8      	blx	r9
        if(y != py) {
   b754a:	42b4      	cmp	r4, r6
   b754c:	d020      	beq.n	b7590 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b754e:	9b08      	ldr	r3, [sp, #32]
   b7550:	b173      	cbz	r3, b7570 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b7552:	f8db 3000 	ldr.w	r3, [fp]
   b7556:	9a04      	ldr	r2, [sp, #16]
   b7558:	9200      	str	r2, [sp, #0]
   b755a:	eb08 0104 	add.w	r1, r8, r4
   b755e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7562:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b7566:	fa0f f28a 	sxth.w	r2, sl
   b756a:	b209      	sxth	r1, r1
   b756c:	4658      	mov	r0, fp
   b756e:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b7570:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7572:	b16b      	cbz	r3, b7590 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b7574:	f8db 3000 	ldr.w	r3, [fp]
   b7578:	9a04      	ldr	r2, [sp, #16]
   b757a:	9200      	str	r2, [sp, #0]
   b757c:	eba8 0104 	sub.w	r1, r8, r4
   b7580:	fa0f f28a 	sxth.w	r2, sl
   b7584:	6a1c      	ldr	r4, [r3, #32]
   b7586:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b758a:	b209      	sxth	r1, r1
   b758c:	4658      	mov	r0, fp
   b758e:	47a0      	blx	r4
   b7590:	f10a 33ff 	add.w	r3, sl, #4294967295
   b7594:	fa1f fa83 	uxth.w	sl, r3
   b7598:	9b03      	ldr	r3, [sp, #12]
   b759a:	3302      	adds	r3, #2
   b759c:	b29b      	uxth	r3, r3
   b759e:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b75a0:	4634      	mov	r4, r6
   b75a2:	e78e      	b.n	b74c2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b75a4:	4626      	mov	r6, r4
   b75a6:	e79a      	b.n	b74de <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b75a8:	b00b      	add	sp, #44	; 0x2c
   b75aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b75ae <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b75ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b75b2:	461e      	mov	r6, r3
   b75b4:	b086      	sub	sp, #24
    startWrite();
   b75b6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b75b8:	9105      	str	r1, [sp, #20]
   b75ba:	4604      	mov	r4, r0
    startWrite();
   b75bc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b75be:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b75c2:	4615      	mov	r5, r2
    startWrite();
   b75c4:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b75c6:	b2b2      	uxth	r2, r6
   b75c8:	6820      	ldr	r0, [r4, #0]
   b75ca:	9700      	str	r7, [sp, #0]
   b75cc:	0053      	lsls	r3, r2, #1
   b75ce:	3301      	adds	r3, #1
   b75d0:	1aaa      	subs	r2, r5, r2
   b75d2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b75d6:	9905      	ldr	r1, [sp, #20]
   b75d8:	4620      	mov	r0, r4
   b75da:	b21b      	sxth	r3, r3
   b75dc:	b212      	sxth	r2, r2
   b75de:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b75e0:	2303      	movs	r3, #3
   b75e2:	2200      	movs	r2, #0
   b75e4:	e9cd 3200 	strd	r3, r2, [sp]
   b75e8:	4620      	mov	r0, r4
   b75ea:	4633      	mov	r3, r6
   b75ec:	9905      	ldr	r1, [sp, #20]
   b75ee:	9702      	str	r7, [sp, #8]
   b75f0:	462a      	mov	r2, r5
   b75f2:	f7ff ff3f 	bl	b7474 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b75f6:	6823      	ldr	r3, [r4, #0]
   b75f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75fa:	4620      	mov	r0, r4
}
   b75fc:	b006      	add	sp, #24
   b75fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7602:	4718      	bx	r3

000b7604 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b7604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7608:	b08d      	sub	sp, #52	; 0x34
   b760a:	461d      	mov	r5, r3
   b760c:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b7610:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b7614:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b7618:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b761c:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b761e:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b7620:	4683      	mov	fp, r0
   b7622:	4689      	mov	r9, r1
   b7624:	4614      	mov	r4, r2
    if (y0 > y1) {
   b7626:	f340 80ce 	ble.w	b77c6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b762a:	42ba      	cmp	r2, r7
   b762c:	dd17      	ble.n	b765e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b762e:	42b7      	cmp	r7, r6
   b7630:	da0f      	bge.n	b7652 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b7632:	4633      	mov	r3, r6
   b7634:	463e      	mov	r6, r7
   b7636:	4627      	mov	r7, r4
   b7638:	461c      	mov	r4, r3
   b763a:	462b      	mov	r3, r5
   b763c:	4645      	mov	r5, r8
   b763e:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b7640:	4699      	mov	r9, r3
   b7642:	e00c      	b.n	b765e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b7644:	4623      	mov	r3, r4
   b7646:	4634      	mov	r4, r6
   b7648:	461e      	mov	r6, r3
   b764a:	464b      	mov	r3, r9
   b764c:	46a9      	mov	r9, r5
   b764e:	461d      	mov	r5, r3
   b7650:	e7ed      	b.n	b762e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b7652:	4623      	mov	r3, r4
   b7654:	463c      	mov	r4, r7
   b7656:	461f      	mov	r7, r3
   b7658:	464b      	mov	r3, r9
   b765a:	46c1      	mov	r9, r8
   b765c:	4698      	mov	r8, r3
    startWrite();
   b765e:	f8db 3000 	ldr.w	r3, [fp]
   b7662:	4658      	mov	r0, fp
   b7664:	695b      	ldr	r3, [r3, #20]
   b7666:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b7668:	42be      	cmp	r6, r7
   b766a:	d122      	bne.n	b76b2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b766c:	454d      	cmp	r5, r9
   b766e:	bfc2      	ittt	gt
   b7670:	462b      	movgt	r3, r5
   b7672:	464d      	movgt	r5, r9
   b7674:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b7676:	4545      	cmp	r5, r8
   b7678:	dc05      	bgt.n	b7686 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b767a:	45c1      	cmp	r9, r8
   b767c:	bfb8      	it	lt
   b767e:	46c1      	movlt	r9, r8
   b7680:	fa0f f989 	sxth.w	r9, r9
   b7684:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b7686:	f8db 2000 	ldr.w	r2, [fp]
   b768a:	9904      	ldr	r1, [sp, #16]
   b768c:	9100      	str	r1, [sp, #0]
   b768e:	f109 0301 	add.w	r3, r9, #1
   b7692:	eba3 0308 	sub.w	r3, r3, r8
   b7696:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b7698:	b21b      	sxth	r3, r3
   b769a:	4632      	mov	r2, r6
   b769c:	4641      	mov	r1, r8
   b769e:	4658      	mov	r0, fp
   b76a0:	47a0      	blx	r4
    endWrite();
   b76a2:	f8db 3000 	ldr.w	r3, [fp]
   b76a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b76a8:	4658      	mov	r0, fp
}
   b76aa:	b00d      	add	sp, #52	; 0x34
   b76ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b76b0:	4718      	bx	r3
    dx01 = x1 - x0,
   b76b2:	fa1f f389 	uxth.w	r3, r9
   b76b6:	9303      	str	r3, [sp, #12]
   b76b8:	b2ab      	uxth	r3, r5
   b76ba:	9302      	str	r3, [sp, #8]
   b76bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b76c0:	1a9b      	subs	r3, r3, r2
   b76c2:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b76c4:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b76c8:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b76ca:	b2a3      	uxth	r3, r4
   b76cc:	eba3 020c 	sub.w	r2, r3, ip
   b76d0:	b212      	sxth	r2, r2
   b76d2:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b76d4:	9a02      	ldr	r2, [sp, #8]
   b76d6:	fa1f f188 	uxth.w	r1, r8
   b76da:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b76de:	b2ba      	uxth	r2, r7
   b76e0:	eba2 0c0c 	sub.w	ip, r2, ip
   b76e4:	fa0f f08c 	sxth.w	r0, ip
   b76e8:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b76ea:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b76ec:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b76ee:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b76f2:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b76f6:	bf18      	it	ne
   b76f8:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b76fc:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b76fe:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b7700:	bf18      	it	ne
   b7702:	b21b      	sxthne	r3, r3
    sb   = 0;
   b7704:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b7708:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b770a:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b770e:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b7710:	bf14      	ite	ne
   b7712:	9305      	strne	r3, [sp, #20]
   b7714:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b7716:	4632      	mov	r2, r6
    sa   = 0,
   b7718:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b771a:	9b05      	ldr	r3, [sp, #20]
   b771c:	429a      	cmp	r2, r3
   b771e:	dc24      	bgt.n	b776a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b7720:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b7722:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b7724:	fb9a f1f3 	sdiv	r1, sl, r3
   b7728:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b772a:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b772c:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b772e:	9b06      	ldr	r3, [sp, #24]
   b7730:	fb99 f3f3 	sdiv	r3, r9, r3
   b7734:	4403      	add	r3, r0
        sa += dx01;
   b7736:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b7738:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b773a:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b773c:	4299      	cmp	r1, r3
        sa += dx01;
   b773e:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b7740:	9804      	ldr	r0, [sp, #16]
   b7742:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b7744:	bfc8      	it	gt
   b7746:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b7748:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b774c:	bfc4      	itt	gt
   b774e:	4619      	movgt	r1, r3
   b7750:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b7752:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7754:	3301      	adds	r3, #1
   b7756:	1a5b      	subs	r3, r3, r1
   b7758:	4605      	mov	r5, r0
   b775a:	b21b      	sxth	r3, r3
   b775c:	4658      	mov	r0, fp
   b775e:	47a8      	blx	r5
   b7760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7762:	3201      	adds	r2, #1
        sb += dx02;
   b7764:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b7766:	b212      	sxth	r2, r2
   b7768:	e7d7      	b.n	b771a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b776a:	9b07      	ldr	r3, [sp, #28]
   b776c:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b776e:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b7770:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b7772:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b7776:	42ba      	cmp	r2, r7
   b7778:	dc93      	bgt.n	b76a2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b777c:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b777e:	fb94 f1f3 	sdiv	r1, r4, r3
   b7782:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b7784:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b7786:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b7788:	9b06      	ldr	r3, [sp, #24]
   b778a:	fb96 f3f3 	sdiv	r3, r6, r3
   b778e:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b7790:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b7792:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b7794:	4299      	cmp	r1, r3
        sa += dx12;
   b7796:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b7798:	bfc8      	it	gt
   b779a:	468c      	movgt	ip, r1
        sa += dx12;
   b779c:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b779e:	bfc8      	it	gt
   b77a0:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b77a2:	9804      	ldr	r0, [sp, #16]
   b77a4:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b77a6:	bfc8      	it	gt
   b77a8:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b77aa:	f8db 0000 	ldr.w	r0, [fp]
   b77ae:	3301      	adds	r3, #1
   b77b0:	1a5b      	subs	r3, r3, r1
   b77b2:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b77b6:	b21b      	sxth	r3, r3
   b77b8:	4658      	mov	r0, fp
   b77ba:	47c8      	blx	r9
   b77bc:	9a05      	ldr	r2, [sp, #20]
   b77be:	3201      	adds	r2, #1
        sb += dx02;
   b77c0:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b77c2:	b212      	sxth	r2, r2
   b77c4:	e7d7      	b.n	b7776 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b77c6:	42be      	cmp	r6, r7
   b77c8:	f73f af3c 	bgt.w	b7644 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b77cc:	4633      	mov	r3, r6
   b77ce:	461c      	mov	r4, r3
   b77d0:	4616      	mov	r6, r2
   b77d2:	462b      	mov	r3, r5
   b77d4:	460d      	mov	r5, r1
   b77d6:	e733      	b.n	b7640 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b77d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b77d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77dc:	b089      	sub	sp, #36	; 0x24
   b77de:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b77e2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b77e4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b77e8:	9304      	str	r3, [sp, #16]
   b77ea:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b77ee:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b77f0:	9305      	str	r3, [sp, #20]
   b77f2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b77f6:	4604      	mov	r4, r0
    startWrite();
   b77f8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b77fa:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b77fe:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b7802:	bf48      	it	mi
   b7804:	f108 020e 	addmi.w	r2, r8, #14
   b7808:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b780c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b780e:	4635      	mov	r5, r6
   b7810:	9b03      	ldr	r3, [sp, #12]
   b7812:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b7814:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b7818:	189a      	adds	r2, r3, r2
   b781a:	9b05      	ldr	r3, [sp, #20]
   b781c:	428b      	cmp	r3, r1
   b781e:	b212      	sxth	r2, r2
   b7820:	dd27      	ble.n	b7872 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7822:	9b04      	ldr	r3, [sp, #16]
   b7824:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b7826:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b782a:	9306      	str	r3, [sp, #24]
   b782c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b7830:	4580      	cmp	r8, r0
   b7832:	fa1f f189 	uxth.w	r1, r9
   b7836:	dd17      	ble.n	b7868 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b7838:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b783a:	bf05      	ittet	eq
   b783c:	9b06      	ldreq	r3, [sp, #24]
   b783e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b7840:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b7842:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b7844:	bf18      	it	ne
   b7846:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b7848:	062b      	lsls	r3, r5, #24
   b784a:	d50a      	bpl.n	b7862 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b784c:	9b02      	ldr	r3, [sp, #8]
   b784e:	6820      	ldr	r0, [r4, #0]
   b7850:	9207      	str	r2, [sp, #28]
   b7852:	4419      	add	r1, r3
   b7854:	6983      	ldr	r3, [r0, #24]
   b7856:	b209      	sxth	r1, r1
   b7858:	461f      	mov	r7, r3
   b785a:	4620      	mov	r0, r4
   b785c:	4653      	mov	r3, sl
   b785e:	47b8      	blx	r7
   b7860:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b7862:	f109 0901 	add.w	r9, r9, #1
   b7866:	e7e1      	b.n	b782c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b7868:	9b01      	ldr	r3, [sp, #4]
   b786a:	3301      	adds	r3, #1
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	445e      	add	r6, fp
   b7870:	e7ce      	b.n	b7810 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b7872:	6823      	ldr	r3, [r4, #0]
   b7874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7876:	4620      	mov	r0, r4
}
   b7878:	b009      	add	sp, #36	; 0x24
   b787a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b787e:	4718      	bx	r3

000b7880 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b7880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7884:	ed2d 8b02 	vpush	{d8}
   b7888:	b091      	sub	sp, #68	; 0x44
   b788a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b788c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b788e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b7892:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b7896:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b789a:	9103      	str	r1, [sp, #12]
   b789c:	461f      	mov	r7, r3
   b789e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b78a2:	9304      	str	r3, [sp, #16]
   b78a4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b78a6:	2a00      	cmp	r2, #0
   b78a8:	f040 80c5 	bne.w	b7a36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b78ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b78b0:	428b      	cmp	r3, r1
   b78b2:	f340 814c 	ble.w	b7b4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b78b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b78ba:	42b3      	cmp	r3, r6
   b78bc:	f340 8147 	ble.w	b7b4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b78c0:	2306      	movs	r3, #6
   b78c2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b78c6:	2b00      	cmp	r3, #0
   b78c8:	f340 8141 	ble.w	b7b4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b78cc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b78d0:	2b00      	cmp	r3, #0
   b78d2:	f340 813c 	ble.w	b7b4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b78d6:	7f03      	ldrb	r3, [r0, #28]
   b78d8:	b91b      	cbnz	r3, b78e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b78da:	2faf      	cmp	r7, #175	; 0xaf
   b78dc:	bf84      	itt	hi
   b78de:	3701      	addhi	r7, #1
   b78e0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b78e2:	f8db 3000 	ldr.w	r3, [fp]
   b78e6:	4658      	mov	r0, fp
   b78e8:	695b      	ldr	r3, [r3, #20]
   b78ea:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b78ec:	2205      	movs	r2, #5
   b78ee:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b78f0:	2200      	movs	r2, #0
   b78f2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b78f4:	4a98      	ldr	r2, [pc, #608]	; (b7b58 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b78f6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b78fa:	18d3      	adds	r3, r2, r3
   b78fc:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b78fe:	b2b3      	uxth	r3, r6
   b7900:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b7902:	9a05      	ldr	r2, [sp, #20]
   b7904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7906:	5c9b      	ldrb	r3, [r3, r2]
   b7908:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b790a:	b2ab      	uxth	r3, r5
   b790c:	930b      	str	r3, [sp, #44]	; 0x2c
   b790e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b7912:	9308      	str	r3, [sp, #32]
   b7914:	9b03      	ldr	r3, [sp, #12]
   b7916:	fb02 f905 	mul.w	r9, r2, r5
   b791a:	fa19 f983 	uxtah	r9, r9, r3
   b791e:	fa0f f389 	sxth.w	r3, r9
   b7922:	ee08 3a10 	vmov	s16, r3
   b7926:	2308      	movs	r3, #8
   b7928:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b792a:	9b03      	ldr	r3, [sp, #12]
   b792c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b7930:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b7934:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b7938:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b793a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b793e:	07d2      	lsls	r2, r2, #31
   b7940:	d552      	bpl.n	b79e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b7942:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b7944:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b7948:	d13e      	bne.n	b79c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b794a:	2c01      	cmp	r4, #1
   b794c:	d13c      	bne.n	b79c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b794e:	699b      	ldr	r3, [r3, #24]
   b7950:	9906      	ldr	r1, [sp, #24]
   b7952:	461f      	mov	r7, r3
   b7954:	9b04      	ldr	r3, [sp, #16]
   b7956:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b7958:	b212      	sxth	r2, r2
   b795a:	4651      	mov	r1, sl
   b795c:	4658      	mov	r0, fp
   b795e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b7960:	f109 0301 	add.w	r3, r9, #1
   b7964:	fa4f f983 	sxtb.w	r9, r3
   b7968:	9b07      	ldr	r3, [sp, #28]
   b796a:	085b      	lsrs	r3, r3, #1
   b796c:	9307      	str	r3, [sp, #28]
   b796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7970:	3b01      	subs	r3, #1
   b7972:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b7976:	930a      	str	r3, [sp, #40]	; 0x28
   b7978:	d1de      	bne.n	b7938 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b797a:	9f05      	ldr	r7, [sp, #20]
   b797c:	3701      	adds	r7, #1
   b797e:	b27b      	sxtb	r3, r7
   b7980:	9305      	str	r3, [sp, #20]
   b7982:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7984:	3b01      	subs	r3, #1
   b7986:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b798a:	9309      	str	r3, [sp, #36]	; 0x24
   b798c:	d1b9      	bne.n	b7902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b798e:	9b04      	ldr	r3, [sp, #16]
   b7990:	4543      	cmp	r3, r8
   b7992:	d00f      	beq.n	b79b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b7994:	2d01      	cmp	r5, #1
   b7996:	f8db 3000 	ldr.w	r3, [fp]
   b799a:	d13b      	bne.n	b7a14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b799c:	2c01      	cmp	r4, #1
   b799e:	d139      	bne.n	b7a14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b79a0:	9908      	ldr	r1, [sp, #32]
   b79a2:	f8cd 8000 	str.w	r8, [sp]
   b79a6:	3105      	adds	r1, #5
   b79a8:	6a1c      	ldr	r4, [r3, #32]
   b79aa:	4632      	mov	r2, r6
   b79ac:	2308      	movs	r3, #8
   b79ae:	b209      	sxth	r1, r1
   b79b0:	4658      	mov	r0, fp
   b79b2:	47a0      	blx	r4
        endWrite();
   b79b4:	f8db 3000 	ldr.w	r3, [fp]
   b79b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79ba:	4658      	mov	r0, fp
}
   b79bc:	b011      	add	sp, #68	; 0x44
   b79be:	ecbd 8b02 	vpop	{d8}
   b79c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b79c6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b79c8:	9906      	ldr	r1, [sp, #24]
   b79ca:	fb14 f202 	smulbb	r2, r4, r2
   b79ce:	440a      	add	r2, r1
   b79d0:	9904      	ldr	r1, [sp, #16]
   b79d2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b79d4:	9400      	str	r4, [sp, #0]
   b79d6:	69db      	ldr	r3, [r3, #28]
   b79d8:	ee18 1a10 	vmov	r1, s16
   b79dc:	461f      	mov	r7, r3
   b79de:	b212      	sxth	r2, r2
   b79e0:	462b      	mov	r3, r5
   b79e2:	4658      	mov	r0, fp
   b79e4:	47b8      	blx	r7
   b79e6:	e7bb      	b.n	b7960 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b79e8:	9a04      	ldr	r2, [sp, #16]
   b79ea:	4542      	cmp	r2, r8
   b79ec:	d0b8      	beq.n	b7960 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b79ee:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b79f0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b79f4:	d107      	bne.n	b7a06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b79f6:	2c01      	cmp	r4, #1
   b79f8:	d105      	bne.n	b7a06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b79fa:	699b      	ldr	r3, [r3, #24]
   b79fc:	9906      	ldr	r1, [sp, #24]
   b79fe:	461f      	mov	r7, r3
   b7a00:	440a      	add	r2, r1
   b7a02:	4643      	mov	r3, r8
   b7a04:	e7a8      	b.n	b7958 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b7a06:	9906      	ldr	r1, [sp, #24]
   b7a08:	f8cd 8004 	str.w	r8, [sp, #4]
   b7a0c:	fb14 f202 	smulbb	r2, r4, r2
   b7a10:	440a      	add	r2, r1
   b7a12:	e7df      	b.n	b79d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b7a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7a16:	f8cd 8004 	str.w	r8, [sp, #4]
   b7a1a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b7a1e:	9a08      	ldr	r2, [sp, #32]
   b7a20:	00e4      	lsls	r4, r4, #3
   b7a22:	440a      	add	r2, r1
   b7a24:	4611      	mov	r1, r2
   b7a26:	9400      	str	r4, [sp, #0]
   b7a28:	69dc      	ldr	r4, [r3, #28]
   b7a2a:	4632      	mov	r2, r6
   b7a2c:	462b      	mov	r3, r5
   b7a2e:	b209      	sxth	r1, r1
   b7a30:	4658      	mov	r0, fp
   b7a32:	47a0      	blx	r4
        endWrite();
   b7a34:	e7be      	b.n	b79b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b7a36:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b7a38:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b7a3a:	6812      	ldr	r2, [r2, #0]
   b7a3c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b7a3e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b7a40:	b2ff      	uxtb	r7, r7
   b7a42:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b7a46:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b7a4a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b7a4c:	789a      	ldrb	r2, [r3, #2]
   b7a4e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b7a50:	78da      	ldrb	r2, [r3, #3]
   b7a52:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b7a54:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b7a56:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b7a5a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b7a5e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b7a60:	d801      	bhi.n	b7a66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b7a62:	2c01      	cmp	r4, #1
   b7a64:	d957      	bls.n	b7b16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b7a66:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b7a6a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b7a6c:	fa0f f38a 	sxth.w	r3, sl
   b7a70:	9307      	str	r3, [sp, #28]
        startWrite();
   b7a72:	f8db 3000 	ldr.w	r3, [fp]
   b7a76:	4658      	mov	r0, fp
   b7a78:	695b      	ldr	r3, [r3, #20]
   b7a7a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7a7c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b7a7e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7a82:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7a84:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b7a88:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b7a8a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7a8c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b7a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7a90:	429f      	cmp	r7, r3
   b7a92:	d28f      	bcs.n	b79b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7a94:	9b07      	ldr	r3, [sp, #28]
   b7a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b7a98:	443b      	add	r3, r7
   b7a9a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b7a9e:	2200      	movs	r2, #0
   b7aa0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7aa4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7aa6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7aaa:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7aae:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7ab2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b7ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b7ab6:	9905      	ldr	r1, [sp, #20]
   b7ab8:	4291      	cmp	r1, r2
   b7aba:	d241      	bcs.n	b7b40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b7abc:	1c5a      	adds	r2, r3, #1
   b7abe:	b2d2      	uxtb	r2, r2
   b7ac0:	075b      	lsls	r3, r3, #29
   b7ac2:	920d      	str	r2, [sp, #52]	; 0x34
   b7ac4:	d107      	bne.n	b7ad6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b7ac6:	9b06      	ldr	r3, [sp, #24]
   b7ac8:	9906      	ldr	r1, [sp, #24]
   b7aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7acc:	3301      	adds	r3, #1
   b7ace:	b29b      	uxth	r3, r3
   b7ad0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b7ad4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b7ad6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b7ada:	d012      	beq.n	b7b02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b7adc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7ade:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b7ae2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b7ae6:	d11a      	bne.n	b7b1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b7ae8:	2c01      	cmp	r4, #1
   b7aea:	d118      	bne.n	b7b1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7aee:	699b      	ldr	r3, [r3, #24]
   b7af0:	4411      	add	r1, r2
   b7af2:	9a05      	ldr	r2, [sp, #20]
   b7af4:	4411      	add	r1, r2
   b7af6:	461e      	mov	r6, r3
   b7af8:	4652      	mov	r2, sl
   b7afa:	9b04      	ldr	r3, [sp, #16]
   b7afc:	b209      	sxth	r1, r1
   b7afe:	4658      	mov	r0, fp
   b7b00:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b7b02:	9e05      	ldr	r6, [sp, #20]
   b7b04:	3601      	adds	r6, #1
   b7b06:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b7b08:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b7b0c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b7b0e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b7b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b7b14:	e7ce      	b.n	b7ab4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b7b16:	2300      	movs	r3, #0
   b7b18:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b7b1c:	e7a9      	b.n	b7a72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7b1e:	9805      	ldr	r0, [sp, #20]
   b7b20:	9a08      	ldr	r2, [sp, #32]
   b7b22:	4402      	add	r2, r0
   b7b24:	fb02 1105 	mla	r1, r2, r5, r1
   b7b28:	9a04      	ldr	r2, [sp, #16]
   b7b2a:	e9cd 4200 	strd	r4, r2, [sp]
   b7b2e:	69db      	ldr	r3, [r3, #28]
   b7b30:	ee18 2a10 	vmov	r2, s16
   b7b34:	461e      	mov	r6, r3
   b7b36:	b209      	sxth	r1, r1
   b7b38:	462b      	mov	r3, r5
   b7b3a:	4658      	mov	r0, fp
   b7b3c:	47b0      	blx	r6
   b7b3e:	e7e0      	b.n	b7b02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b7b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b7b42:	3701      	adds	r7, #1
   b7b44:	4498      	add	r8, r3
   b7b46:	fa5f f888 	uxtb.w	r8, r8
   b7b4a:	b2ff      	uxtb	r7, r7
   b7b4c:	e79f      	b.n	b7a8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b7b4e:	b011      	add	sp, #68	; 0x44
   b7b50:	ecbd 8b02 	vpop	{d8}
   b7b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b58:	000bc296 	.word	0x000bc296

000b7b5c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b7b5e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b7b60:	b085      	sub	sp, #20
   b7b62:	4604      	mov	r4, r0
   b7b64:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b7b66:	2a00      	cmp	r2, #0
   b7b68:	d134      	bne.n	b7bd4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b7b6a:	290a      	cmp	r1, #10
   b7b6c:	d108      	bne.n	b7b80 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b7b6e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b7b70:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b7b72:	7e42      	ldrb	r2, [r0, #25]
   b7b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b7b78:	8263      	strh	r3, [r4, #18]
}
   b7b7a:	2001      	movs	r0, #1
   b7b7c:	b005      	add	sp, #20
   b7b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b7b80:	290d      	cmp	r1, #13
   b7b82:	d0fa      	beq.n	b7b7a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7b84:	7ee1      	ldrb	r1, [r4, #27]
   b7b86:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7b88:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7b8a:	b171      	cbz	r1, b7baa <_ZN12Adafruit_GFX5writeEh+0x4e>
   b7b8c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b7b90:	2106      	movs	r1, #6
   b7b92:	fb11 6100 	smlabb	r1, r1, r0, r6
   b7b96:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b7b9a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b7b9c:	bfc1      	itttt	gt
   b7b9e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b7ba2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b7ba4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7ba8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7baa:	8ae2      	ldrh	r2, [r4, #22]
   b7bac:	9201      	str	r2, [sp, #4]
   b7bae:	8aa2      	ldrh	r2, [r4, #20]
   b7bb0:	9200      	str	r2, [sp, #0]
   b7bb2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b7bb6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7bba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7bbe:	4620      	mov	r0, r4
   b7bc0:	f7ff fe5e 	bl	b7880 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b7bc4:	7e23      	ldrb	r3, [r4, #24]
   b7bc6:	8a22      	ldrh	r2, [r4, #16]
   b7bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7bcc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7bd0:	8223      	strh	r3, [r4, #16]
   b7bd2:	e7d2      	b.n	b7b7a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b7bd4:	290a      	cmp	r1, #10
   b7bd6:	d107      	bne.n	b7be8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b7bd8:	2300      	movs	r3, #0
   b7bda:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b7bdc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7bde:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b7be0:	8a43      	ldrh	r3, [r0, #18]
   b7be2:	fb01 3302 	mla	r3, r1, r2, r3
   b7be6:	e7c7      	b.n	b7b78 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b7be8:	290d      	cmp	r1, #13
   b7bea:	d0c6      	beq.n	b7b7a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b7bec:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b7bee:	42a9      	cmp	r1, r5
   b7bf0:	d3c3      	bcc.n	b7b7a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b7bf2:	7a51      	ldrb	r1, [r2, #9]
   b7bf4:	4299      	cmp	r1, r3
   b7bf6:	d3c0      	bcc.n	b7b7a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b7bf8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b7bfa:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b7bfc:	b2ed      	uxtb	r5, r5
   b7bfe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b7c02:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b7c04:	b328      	cbz	r0, b7c52 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b7c06:	78e9      	ldrb	r1, [r5, #3]
   b7c08:	b319      	cbz	r1, b7c52 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7c0a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7c0c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7c0e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7c10:	b191      	cbz	r1, b7c38 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b7c12:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b7c16:	4408      	add	r0, r1
   b7c18:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7c1c:	fb06 1100 	mla	r1, r6, r0, r1
   b7c20:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b7c24:	4281      	cmp	r1, r0
   b7c26:	dd07      	ble.n	b7c38 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b7c28:	2000      	movs	r0, #0
   b7c2a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b7c2c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7c30:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b7c32:	fb02 1207 	mla	r2, r2, r7, r1
   b7c36:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7c38:	8ae2      	ldrh	r2, [r4, #22]
   b7c3a:	9201      	str	r2, [sp, #4]
   b7c3c:	8aa2      	ldrh	r2, [r4, #20]
   b7c3e:	9200      	str	r2, [sp, #0]
   b7c40:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b7c44:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7c48:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	f7ff fe17 	bl	b7880 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7c52:	7929      	ldrb	r1, [r5, #4]
   b7c54:	7e22      	ldrb	r2, [r4, #24]
   b7c56:	8a23      	ldrh	r3, [r4, #16]
   b7c58:	fb01 3302 	mla	r3, r1, r2, r3
   b7c5c:	e7b8      	b.n	b7bd0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b7c5e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b7c5e:	2901      	cmp	r1, #1
   b7c60:	bf38      	it	cc
   b7c62:	2101      	movcc	r1, #1
   b7c64:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b7c66:	7641      	strb	r1, [r0, #25]
}
   b7c68:	4770      	bx	lr

000b7c6a <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b7c6a:	b538      	push	{r3, r4, r5, lr}
   b7c6c:	4604      	mov	r4, r0
   b7c6e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b7c70:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b7c72:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b7c74:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b7c76:	f002 fc8f 	bl	ba598 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b7c7a:	7b20      	ldrb	r0, [r4, #12]
   b7c7c:	2101      	movs	r1, #1
   b7c7e:	f002 fc9c 	bl	ba5ba <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b7c82:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b7c84:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b7c86:	2101      	movs	r1, #1
   b7c88:	f002 fc86 	bl	ba598 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b7c8c:	7b60      	ldrb	r0, [r4, #13]
   b7c8e:	2100      	movs	r1, #0
   b7c90:	f002 fc93 	bl	ba5ba <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd38      	pop	{r3, r4, r5, pc}

000b7c98 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b7c98:	3901      	subs	r1, #1
   b7c9a:	b2c9      	uxtb	r1, r1
   b7c9c:	2908      	cmp	r1, #8
   b7c9e:	bf9a      	itte	ls
   b7ca0:	4b02      	ldrls	r3, [pc, #8]	; (b7cac <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b7ca2:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b7ca6:	4802      	ldrhi	r0, [pc, #8]	; (b7cb0 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b7ca8:	4770      	bx	lr
   b7caa:	bf00      	nop
   b7cac:	000bc8e8 	.word	0x000bc8e8
   b7cb0:	000bc7f0 	.word	0x000bc7f0

000b7cb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b7cb4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b7cb6:	4c0b      	ldr	r4, [pc, #44]	; (b7ce4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7cb8:	7821      	ldrb	r1, [r4, #0]
   b7cba:	f3bf 8f5b 	dmb	ish
   b7cbe:	f011 0101 	ands.w	r1, r1, #1
   b7cc2:	d10b      	bne.n	b7cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7cc4:	4620      	mov	r0, r4
   b7cc6:	9101      	str	r1, [sp, #4]
   b7cc8:	f7fc f9f6 	bl	b40b8 <__cxa_guard_acquire>
   b7ccc:	9901      	ldr	r1, [sp, #4]
   b7cce:	b128      	cbz	r0, b7cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7cd0:	4805      	ldr	r0, [pc, #20]	; (b7ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7cd2:	f001 fd2f 	bl	b9734 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7cd6:	4620      	mov	r0, r4
   b7cd8:	f7fc f9f3 	bl	b40c2 <__cxa_guard_release>
    }
   b7cdc:	4802      	ldr	r0, [pc, #8]	; (b7ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7cde:	b002      	add	sp, #8
   b7ce0:	bd10      	pop	{r4, pc}
   b7ce2:	bf00      	nop
   b7ce4:	2003c7d4 	.word	0x2003c7d4
   b7ce8:	2003c7d8 	.word	0x2003c7d8

000b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b7cec:	b507      	push	{r0, r1, r2, lr}
   b7cee:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b7cf0:	f7ff ffe0 	bl	b7cb4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7cf4:	9901      	ldr	r1, [sp, #4]
    }
   b7cf6:	b003      	add	sp, #12
   b7cf8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b7cfc:	f001 bdc0 	b.w	b9880 <_ZN8SPIClass8transferEh>

000b7d00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b7d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d04:	4607      	mov	r7, r0
   b7d06:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b7d0a:	461e      	mov	r6, r3
	if (count == 0) {
   b7d0c:	4615      	mov	r5, r2
   b7d0e:	2a00      	cmp	r2, #0
   b7d10:	d042      	beq.n	b7d98 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7d12:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7d16:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7d18:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7d1c:	2100      	movs	r1, #0
   b7d1e:	f002 fc4c 	bl	ba5ba <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b7d22:	4648      	mov	r0, r9
   b7d24:	f7ff ffe2 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b7d28:	3d01      	subs	r5, #1
   b7d2a:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b7d2c:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b7d30:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b7d34:	fa5f f48b 	uxtb.w	r4, fp
   b7d38:	42a5      	cmp	r5, r4
   b7d3a:	d922      	bls.n	b7d82 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b7d3c:	b9dc      	cbnz	r4, b7d76 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b7d3e:	f1b8 0f00 	cmp.w	r8, #0
   b7d42:	d018      	beq.n	b7d76 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b7d44:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b7d46:	b2d3      	uxtb	r3, r2
   b7d48:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b7d4a:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b7d4c:	d805      	bhi.n	b7d5a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b7d4e:	fa0a f402 	lsl.w	r4, sl, r2
   b7d52:	430c      	orrs	r4, r1
   b7d54:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b7d56:	3201      	adds	r2, #1
   b7d58:	e7f5      	b.n	b7d46 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b7d5a:	4648      	mov	r0, r9
   b7d5c:	9101      	str	r1, [sp, #4]
   b7d5e:	f7ff ffc5 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b7d62:	7833      	ldrb	r3, [r6, #0]
   b7d64:	9901      	ldr	r1, [sp, #4]
   b7d66:	4004      	ands	r4, r0
   b7d68:	ea23 0301 	bic.w	r3, r3, r1
   b7d6c:	431c      	orrs	r4, r3
   b7d6e:	7034      	strb	r4, [r6, #0]
		index++;
   b7d70:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b7d74:	e7de      	b.n	b7d34 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b7d76:	4648      	mov	r0, r9
   b7d78:	f7ff ffb8 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7d7c:	f806 000b 	strb.w	r0, [r6, fp]
   b7d80:	e7f6      	b.n	b7d70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b7d82:	2000      	movs	r0, #0
   b7d84:	f7ff ffb2 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7d88:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7d8a:	7b38      	ldrb	r0, [r7, #12]
   b7d8c:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b7d8e:	b003      	add	sp, #12
   b7d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7d94:	f002 bc11 	b.w	ba5ba <digitalWrite>
} // End PCD_ReadRegister()
   b7d98:	b003      	add	sp, #12
   b7d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b7d9e:	b538      	push	{r3, r4, r5, lr}
   b7da0:	460c      	mov	r4, r1
   b7da2:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7da4:	2100      	movs	r1, #0
   b7da6:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7da8:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7dac:	f002 fc05 	bl	ba5ba <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7db0:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b7db4:	f7ff ff9a 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7db8:	2000      	movs	r0, #0
   b7dba:	f7ff ff97 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7dbe:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7dc0:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7dc2:	7b28      	ldrb	r0, [r5, #12]
   b7dc4:	f002 fbf9 	bl	ba5ba <digitalWrite>
} // End PCD_ReadRegister()
   b7dc8:	4620      	mov	r0, r4
   b7dca:	bd38      	pop	{r3, r4, r5, pc}

000b7dcc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b7dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dce:	460f      	mov	r7, r1
   b7dd0:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7dd2:	2100      	movs	r1, #0
   b7dd4:	7b00      	ldrb	r0, [r0, #12]
								) {
   b7dd6:	4615      	mov	r5, r2
   b7dd8:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7dda:	f002 fbee 	bl	ba5ba <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b7dde:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b7de2:	f7ff ff83 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b7de6:	4425      	add	r5, r4
   b7de8:	42ac      	cmp	r4, r5
   b7dea:	d004      	beq.n	b7df6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b7dec:	f814 0b01 	ldrb.w	r0, [r4], #1
   b7df0:	f7ff ff7c 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b7df4:	e7f8      	b.n	b7de8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b7df6:	7b30      	ldrb	r0, [r6, #12]
   b7df8:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b7dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b7dfe:	f002 bbdc 	b.w	ba5ba <digitalWrite>

000b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b7e02:	b570      	push	{r4, r5, r6, lr}
   b7e04:	4604      	mov	r4, r0
   b7e06:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7e08:	7b00      	ldrb	r0, [r0, #12]
   b7e0a:	2100      	movs	r1, #0
								) {
   b7e0c:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7e0e:	f002 fbd4 	bl	ba5ba <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b7e12:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b7e16:	f7ff ff69 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b7e1a:	4628      	mov	r0, r5
   b7e1c:	f7ff ff66 	bl	b7cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b7e20:	7b20      	ldrb	r0, [r4, #12]
   b7e22:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b7e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b7e28:	f002 bbc7 	b.w	ba5ba <digitalWrite>

000b7e2c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b7e2c:	b570      	push	{r4, r5, r6, lr}
   b7e2e:	4616      	mov	r6, r2
   b7e30:	4604      	mov	r4, r0
   b7e32:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b7e34:	f7ff ffb3 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b7e38:	4330      	orrs	r0, r6
   b7e3a:	b2c2      	uxtb	r2, r0
   b7e3c:	4629      	mov	r1, r5
   b7e3e:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b7e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b7e44:	f7ff bfdd 	b.w	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b7e48 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b7e48:	b570      	push	{r4, r5, r6, lr}
   b7e4a:	4616      	mov	r6, r2
   b7e4c:	4604      	mov	r4, r0
   b7e4e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b7e50:	f7ff ffa5 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b7e54:	ea20 0006 	bic.w	r0, r0, r6
   b7e58:	b2c2      	uxtb	r2, r0
   b7e5a:	4629      	mov	r1, r5
   b7e5c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b7e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b7e62:	f7ff bfce 	b.w	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b7e66 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b7e66:	2208      	movs	r2, #8
   b7e68:	2110      	movs	r1, #16
   b7e6a:	f7ff bfed 	b.w	b7e48 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b7e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e70:	4604      	mov	r4, r0
   b7e72:	4615      	mov	r5, r2
   b7e74:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7e76:	2200      	movs	r2, #0
   b7e78:	2102      	movs	r1, #2
					 ) {
   b7e7a:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7e7c:	f7ff ffc1 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b7e80:	2204      	movs	r2, #4
   b7e82:	210a      	movs	r1, #10
   b7e84:	4620      	mov	r0, r4
   b7e86:	f7ff ffbc 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b7e8a:	2280      	movs	r2, #128	; 0x80
   b7e8c:	2114      	movs	r1, #20
   b7e8e:	4620      	mov	r0, r4
   b7e90:	f7ff ffcc 	bl	b7e2c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b7e94:	462a      	mov	r2, r5
   b7e96:	463b      	mov	r3, r7
   b7e98:	2112      	movs	r1, #18
   b7e9a:	4620      	mov	r0, r4
   b7e9c:	f7ff ff96 	bl	b7dcc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b7ea0:	2203      	movs	r2, #3
   b7ea2:	2102      	movs	r1, #2
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	f7ff ffac 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b7eaa:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b7eae:	210a      	movs	r1, #10
   b7eb0:	4620      	mov	r0, r4
   b7eb2:	f7ff ff74 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b7eb6:	0743      	lsls	r3, r0, #29
   b7eb8:	d405      	bmi.n	b7ec6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b7eba:	3d01      	subs	r5, #1
   b7ebc:	b2ad      	uxth	r5, r5
   b7ebe:	2d00      	cmp	r5, #0
   b7ec0:	d1f5      	bne.n	b7eae <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b7ec2:	2004      	movs	r0, #4
   b7ec4:	e00f      	b.n	b7ee6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b7ec6:	2200      	movs	r2, #0
   b7ec8:	2102      	movs	r1, #2
   b7eca:	4620      	mov	r0, r4
   b7ecc:	f7ff ff99 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b7ed0:	2144      	movs	r1, #68	; 0x44
   b7ed2:	4620      	mov	r0, r4
   b7ed4:	f7ff ff63 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7ed8:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b7eda:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7edc:	4620      	mov	r0, r4
   b7ede:	f7ff ff5e 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7ee2:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b7ee4:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b7ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ee8 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b7ee8:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7eea:	220f      	movs	r2, #15
   b7eec:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b7eee:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7ef0:	f7ff ff87 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b7ef4:	2032      	movs	r0, #50	; 0x32
   b7ef6:	f001 ff8f 	bl	b9e18 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b7efa:	2102      	movs	r1, #2
   b7efc:	4620      	mov	r0, r4
   b7efe:	f7ff ff4e 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7f02:	06c3      	lsls	r3, r0, #27
   b7f04:	d4f9      	bmi.n	b7efa <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b7f06:	bd10      	pop	{r4, pc}

000b7f08 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b7f08:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b7f0a:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b7f0c:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b7f0e:	f7ff ff46 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b7f12:	f000 0303 	and.w	r3, r0, #3
   b7f16:	2b03      	cmp	r3, #3
   b7f18:	d008      	beq.n	b7f2c <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b7f1a:	f040 0203 	orr.w	r2, r0, #3
   b7f1e:	b2d2      	uxtb	r2, r2
   b7f20:	4620      	mov	r0, r4
   b7f22:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b7f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b7f28:	f7ff bf6b 	b.w	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b7f2c:	bd10      	pop	{r4, pc}

000b7f2e <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b7f2e:	b510      	push	{r4, lr}
   b7f30:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b7f32:	7b40      	ldrb	r0, [r0, #13]
   b7f34:	f002 fb5a 	bl	ba5ec <digitalRead>
   b7f38:	bb48      	cbnz	r0, b7f8e <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b7f3a:	7b60      	ldrb	r0, [r4, #13]
   b7f3c:	2101      	movs	r1, #1
   b7f3e:	f002 fb3c 	bl	ba5ba <digitalWrite>
		delay(50);
   b7f42:	2032      	movs	r0, #50	; 0x32
   b7f44:	f001 ff68 	bl	b9e18 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b7f48:	4620      	mov	r0, r4
   b7f4a:	2280      	movs	r2, #128	; 0x80
   b7f4c:	2154      	movs	r1, #84	; 0x54
   b7f4e:	f7ff ff58 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b7f52:	4620      	mov	r0, r4
   b7f54:	22a9      	movs	r2, #169	; 0xa9
   b7f56:	2156      	movs	r1, #86	; 0x56
   b7f58:	f7ff ff53 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b7f5c:	4620      	mov	r0, r4
   b7f5e:	2203      	movs	r2, #3
   b7f60:	2158      	movs	r1, #88	; 0x58
   b7f62:	f7ff ff4e 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b7f66:	4620      	mov	r0, r4
   b7f68:	22e8      	movs	r2, #232	; 0xe8
   b7f6a:	215a      	movs	r1, #90	; 0x5a
   b7f6c:	f7ff ff49 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b7f70:	4620      	mov	r0, r4
   b7f72:	2240      	movs	r2, #64	; 0x40
   b7f74:	212a      	movs	r1, #42	; 0x2a
   b7f76:	f7ff ff44 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b7f7a:	4620      	mov	r0, r4
   b7f7c:	223d      	movs	r2, #61	; 0x3d
   b7f7e:	2122      	movs	r1, #34	; 0x22
   b7f80:	f7ff ff3f 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7f84:	4620      	mov	r0, r4
} // End PCD_Init()
   b7f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7f8a:	f7ff bfbd 	b.w	b7f08 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b7f8e:	4620      	mov	r0, r4
   b7f90:	f7ff ffaa 	bl	b7ee8 <_ZN7MFRC5229PCD_ResetEv>
   b7f94:	e7d8      	b.n	b7f48 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b7f96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b7f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f9a:	b089      	sub	sp, #36	; 0x24
   b7f9c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b7fa0:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b7fa4:	9203      	str	r2, [sp, #12]
   b7fa6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b7faa:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b7fae:	9204      	str	r2, [sp, #16]
   b7fb0:	4604      	mov	r4, r0
   b7fb2:	468a      	mov	sl, r1
   b7fb4:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b7fb6:	f1b9 0f00 	cmp.w	r9, #0
   b7fba:	d03e      	beq.n	b803a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b7fbc:	f899 8000 	ldrb.w	r8, [r9]
   b7fc0:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7fc2:	2200      	movs	r2, #0
   b7fc4:	2102      	movs	r1, #2
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	f7ff ff1b 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b7fcc:	227f      	movs	r2, #127	; 0x7f
   b7fce:	2108      	movs	r1, #8
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	f7ff ff16 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7fd6:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b7fda:	2280      	movs	r2, #128	; 0x80
   b7fdc:	2114      	movs	r1, #20
   b7fde:	4620      	mov	r0, r4
   b7fe0:	f7ff ff24 	bl	b7e2c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7fe4:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b7fe8:	9b05      	ldr	r3, [sp, #20]
   b7fea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b7fee:	2112      	movs	r1, #18
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	f7ff feeb 	bl	b7dcc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b7ff6:	4642      	mov	r2, r8
   b7ff8:	211a      	movs	r1, #26
   b7ffa:	4620      	mov	r0, r4
   b7ffc:	f7ff ff01 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b8000:	4652      	mov	r2, sl
   b8002:	2102      	movs	r1, #2
   b8004:	4620      	mov	r0, r4
   b8006:	f7ff fefc 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b800a:	f1ba 0f0c 	cmp.w	sl, #12
   b800e:	d104      	bne.n	b801a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b8010:	2280      	movs	r2, #128	; 0x80
   b8012:	211a      	movs	r1, #26
   b8014:	4620      	mov	r0, r4
   b8016:	f7ff ff09 	bl	b7e2c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b801a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b801e:	2108      	movs	r1, #8
   b8020:	4620      	mov	r0, r4
   b8022:	f7ff febc 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b8026:	9b03      	ldr	r3, [sp, #12]
   b8028:	4218      	tst	r0, r3
   b802a:	d108      	bne.n	b803e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b802c:	07c3      	lsls	r3, r0, #31
   b802e:	d402      	bmi.n	b8036 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b8030:	f1b8 0801 	subs.w	r8, r8, #1
   b8034:	d1f3      	bne.n	b801e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b8036:	2004      	movs	r0, #4
   b8038:	e04d      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b803a:	46c8      	mov	r8, r9
   b803c:	e7c0      	b.n	b7fc0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b803e:	210c      	movs	r1, #12
   b8040:	4620      	mov	r0, r4
   b8042:	f7ff feac 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8046:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b804a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b804c:	d146      	bne.n	b80dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b804e:	b1dd      	cbz	r5, b8088 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b8050:	b1d6      	cbz	r6, b8088 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b8052:	2114      	movs	r1, #20
   b8054:	4620      	mov	r0, r4
   b8056:	f7ff fea2 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b805a:	7833      	ldrb	r3, [r6, #0]
   b805c:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b805e:	4602      	mov	r2, r0
		if (n > *backLen) {
   b8060:	d33e      	bcc.n	b80e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b8062:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b8064:	462b      	mov	r3, r5
   b8066:	2112      	movs	r1, #18
   b8068:	4620      	mov	r0, r4
   b806a:	f8cd b000 	str.w	fp, [sp]
   b806e:	f7ff fe47 	bl	b7d00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b8072:	2118      	movs	r1, #24
   b8074:	4620      	mov	r0, r4
   b8076:	f7ff fe92 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b807a:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b807e:	f1b9 0f00 	cmp.w	r9, #0
   b8082:	d001      	beq.n	b8088 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b8084:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b8088:	f018 0f08 	tst.w	r8, #8
   b808c:	d12a      	bne.n	b80e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b808e:	b35d      	cbz	r5, b80e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8090:	b356      	cbz	r6, b80e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8092:	9b04      	ldr	r3, [sp, #16]
   b8094:	b343      	cbz	r3, b80e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b8096:	7832      	ldrb	r2, [r6, #0]
   b8098:	2a01      	cmp	r2, #1
   b809a:	d103      	bne.n	b80a4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b809c:	2f04      	cmp	r7, #4
   b809e:	d125      	bne.n	b80ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b80a0:	2009      	movs	r0, #9
   b80a2:	e018      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b80a4:	d922      	bls.n	b80ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b80a6:	bb0f      	cbnz	r7, b80ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b80a8:	3a02      	subs	r2, #2
   b80aa:	ab07      	add	r3, sp, #28
   b80ac:	b2d2      	uxtb	r2, r2
   b80ae:	4629      	mov	r1, r5
   b80b0:	4620      	mov	r0, r4
   b80b2:	f7ff fedc 	bl	b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b80b6:	2801      	cmp	r0, #1
   b80b8:	d10d      	bne.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b80ba:	7833      	ldrb	r3, [r6, #0]
   b80bc:	441d      	add	r5, r3
   b80be:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b80c2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b80c6:	429a      	cmp	r2, r3
   b80c8:	d110      	bne.n	b80ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b80ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b80ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b80d2:	429a      	cmp	r2, r3
   b80d4:	d10a      	bne.n	b80ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b80d6:	b009      	add	sp, #36	; 0x24
   b80d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b80dc:	2002      	movs	r0, #2
   b80de:	e7fa      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b80e0:	2005      	movs	r0, #5
   b80e2:	e7f8      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b80e4:	2003      	movs	r0, #3
   b80e6:	e7f6      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b80e8:	2001      	movs	r0, #1
   b80ea:	e7f4      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b80ec:	2008      	movs	r0, #8
   b80ee:	e7f2      	b.n	b80d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b80f0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b80f0:	b510      	push	{r4, lr}
   b80f2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b80f4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b80f8:	9405      	str	r4, [sp, #20]
   b80fa:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b80fe:	9404      	str	r4, [sp, #16]
   b8100:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b8102:	9403      	str	r4, [sp, #12]
   b8104:	9c08      	ldr	r4, [sp, #32]
   b8106:	9200      	str	r2, [sp, #0]
   b8108:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b810c:	2230      	movs	r2, #48	; 0x30
   b810e:	460b      	mov	r3, r1
   b8110:	210c      	movs	r1, #12
   b8112:	f7ff ff40 	bl	b7f96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b8116:	b006      	add	sp, #24
   b8118:	bd10      	pop	{r4, pc}

000b811a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b811a:	b570      	push	{r4, r5, r6, lr}
   b811c:	b088      	sub	sp, #32
   b811e:	4606      	mov	r6, r0
   b8120:	461c      	mov	r4, r3
   b8122:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b8126:	4615      	mov	r5, r2
   b8128:	b31a      	cbz	r2, b8172 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b812a:	781b      	ldrb	r3, [r3, #0]
   b812c:	2b01      	cmp	r3, #1
   b812e:	d920      	bls.n	b8172 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b8130:	2280      	movs	r2, #128	; 0x80
   b8132:	211c      	movs	r1, #28
   b8134:	f7ff fe88 	bl	b7e48 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b8138:	2307      	movs	r3, #7
   b813a:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b813e:	2300      	movs	r3, #0
   b8140:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8144:	f10d 031f 	add.w	r3, sp, #31
   b8148:	e9cd 4300 	strd	r4, r3, [sp]
   b814c:	2201      	movs	r2, #1
   b814e:	462b      	mov	r3, r5
   b8150:	f10d 0117 	add.w	r1, sp, #23
   b8154:	4630      	mov	r0, r6
   b8156:	f7ff ffcb 	bl	b80f0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b815a:	2801      	cmp	r0, #1
   b815c:	d107      	bne.n	b816e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b815e:	7823      	ldrb	r3, [r4, #0]
   b8160:	2b02      	cmp	r3, #2
   b8162:	d108      	bne.n	b8176 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b8164:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b8168:	2b00      	cmp	r3, #0
   b816a:	bf18      	it	ne
   b816c:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b816e:	b008      	add	sp, #32
   b8170:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b8172:	2005      	movs	r0, #5
   b8174:	e7fb      	b.n	b816e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b8176:	2002      	movs	r0, #2
   b8178:	e7f9      	b.n	b816e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b817a <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b817a:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b817c:	460a      	mov	r2, r1
   b817e:	2126      	movs	r1, #38	; 0x26
   b8180:	f7ff bfcb 	b.w	b811a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b8184 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b8184:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b8186:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8188:	f10d 0203 	add.w	r2, sp, #3
   b818c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b818e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8192:	f7ff fff2 	bl	b817a <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b8196:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b819a:	1e43      	subs	r3, r0, #1
   b819c:	4258      	negs	r0, r3
   b819e:	4158      	adcs	r0, r3
   b81a0:	b003      	add	sp, #12
   b81a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b81a6 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b81a6:	b570      	push	{r4, r5, r6, lr}
   b81a8:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b81aa:	2350      	movs	r3, #80	; 0x50
   b81ac:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b81b0:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b81b2:	f10d 0316 	add.w	r3, sp, #22
   b81b6:	2202      	movs	r2, #2
   b81b8:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b81ba:	4606      	mov	r6, r0
	buffer[1] = 0;
   b81bc:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b81c0:	f7ff fe55 	bl	b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b81c4:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b81c6:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b81c8:	d10f      	bne.n	b81ea <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b81ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b81ce:	e9cd 4400 	strd	r4, r4, [sp]
   b81d2:	4623      	mov	r3, r4
   b81d4:	2204      	movs	r2, #4
   b81d6:	a905      	add	r1, sp, #20
   b81d8:	4630      	mov	r0, r6
   b81da:	f7ff ff89 	bl	b80f0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b81de:	2804      	cmp	r0, #4
   b81e0:	d003      	beq.n	b81ea <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b81e2:	2801      	cmp	r0, #1
   b81e4:	bf14      	ite	ne
   b81e6:	4605      	movne	r5, r0
   b81e8:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b81ea:	4628      	mov	r0, r5
   b81ec:	b006      	add	sp, #24
   b81ee:	bd70      	pop	{r4, r5, r6, pc}

000b81f0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b81f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b81f2:	4606      	mov	r6, r0
   b81f4:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b81f6:	4614      	mov	r4, r2
   b81f8:	b1ca      	cbz	r2, b822e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b81fa:	781b      	ldrb	r3, [r3, #0]
   b81fc:	2b11      	cmp	r3, #17
   b81fe:	d916      	bls.n	b822e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b8200:	2330      	movs	r3, #48	; 0x30
   b8202:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b8204:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8206:	1c93      	adds	r3, r2, #2
   b8208:	4621      	mov	r1, r4
   b820a:	2202      	movs	r2, #2
   b820c:	f7ff fe2f 	bl	b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8210:	2801      	cmp	r0, #1
   b8212:	d10a      	bne.n	b822a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b8214:	2300      	movs	r3, #0
   b8216:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b821a:	9003      	str	r0, [sp, #12]
   b821c:	9500      	str	r5, [sp, #0]
   b821e:	4623      	mov	r3, r4
   b8220:	2204      	movs	r2, #4
   b8222:	4621      	mov	r1, r4
   b8224:	4630      	mov	r0, r6
   b8226:	f7ff ff63 	bl	b80f0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b822a:	b004      	add	sp, #16
   b822c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b822e:	2005      	movs	r0, #5
   b8230:	e7fb      	b.n	b822a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b8232 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b8232:	b510      	push	{r4, lr}
   b8234:	b08a      	sub	sp, #40	; 0x28
   b8236:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b8238:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b823c:	681a      	ldr	r2, [r3, #0]
   b823e:	889b      	ldrh	r3, [r3, #4]
   b8240:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b8244:	7863      	ldrb	r3, [r4, #1]
   b8246:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b824a:	78a3      	ldrb	r3, [r4, #2]
   b824c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b8250:	78e3      	ldrb	r3, [r4, #3]
   b8252:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b8256:	7923      	ldrb	r3, [r4, #4]
   b8258:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b825c:	2300      	movs	r3, #0
   b825e:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b8262:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8266:	9301      	str	r3, [sp, #4]
   b8268:	230c      	movs	r3, #12
	sendData[0] = command;
   b826a:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b826e:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b8272:	9300      	str	r3, [sp, #0]
   b8274:	2210      	movs	r2, #16
   b8276:	ab07      	add	r3, sp, #28
   b8278:	210e      	movs	r1, #14
   b827a:	f7ff fe8c 	bl	b7f96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b827e:	b00a      	add	sp, #40	; 0x28
   b8280:	bd10      	pop	{r4, pc}

000b8282 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b8282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b8286:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b8288:	b08b      	sub	sp, #44	; 0x2c
   b828a:	4682      	mov	sl, r0
   b828c:	460f      	mov	r7, r1
   b828e:	4690      	mov	r8, r2
	if (validBits > 80) {
   b8290:	f200 8140 	bhi.w	b8514 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b8294:	2280      	movs	r2, #128	; 0x80
   b8296:	211c      	movs	r1, #28
   b8298:	f7ff fdd6 	bl	b7e48 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b829c:	2393      	movs	r3, #147	; 0x93
   b829e:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b82a2:	f1b8 0f00 	cmp.w	r8, #0
   b82a6:	f000 80bc 	beq.w	b8422 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b82aa:	783c      	ldrb	r4, [r7, #0]
   b82ac:	2c04      	cmp	r4, #4
   b82ae:	bf94      	ite	ls
   b82b0:	2300      	movls	r3, #0
   b82b2:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b82b4:	2501      	movs	r5, #1
   b82b6:	2600      	movs	r6, #0
   b82b8:	e00b      	b.n	b82d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b82ba:	2395      	movs	r3, #149	; 0x95
   b82bc:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b82c0:	f1b8 0f00 	cmp.w	r8, #0
   b82c4:	f000 80af 	beq.w	b8426 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b82c8:	783c      	ldrb	r4, [r7, #0]
   b82ca:	2c07      	cmp	r4, #7
   b82cc:	bf94      	ite	ls
   b82ce:	2300      	movls	r3, #0
   b82d0:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b82d2:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b82d6:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b82d8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b82dc:	2b00      	cmp	r3, #0
   b82de:	f000 80a4 	beq.w	b842a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b82e2:	2288      	movs	r2, #136	; 0x88
   b82e4:	f88d 201e 	strb.w	r2, [sp, #30]
   b82e8:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b82ea:	f014 0207 	ands.w	r2, r4, #7
   b82ee:	bf18      	it	ne
   b82f0:	2201      	movne	r2, #1
   b82f2:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b82f6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b82fa:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b82fc:	d01d      	beq.n	b833a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b82fe:	2b00      	cmp	r3, #0
   b8300:	bf14      	ite	ne
   b8302:	f04f 0903 	movne.w	r9, #3
   b8306:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b830a:	f106 0c01 	add.w	ip, r6, #1
   b830e:	4591      	cmp	r9, r2
   b8310:	bf94      	ite	ls
   b8312:	eb01 0e09 	addls.w	lr, r1, r9
   b8316:	eb01 0e02 	addhi.w	lr, r1, r2
   b831a:	fa57 fc8c 	uxtab	ip, r7, ip
   b831e:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b8322:	460a      	mov	r2, r1
   b8324:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b8328:	3101      	adds	r1, #1
   b832a:	b2c9      	uxtb	r1, r1
   b832c:	445a      	add	r2, fp
   b832e:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b8332:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b8336:	4571      	cmp	r1, lr
   b8338:	d1f3      	bne.n	b8322 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b833a:	b10b      	cbz	r3, b8340 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b833c:	3008      	adds	r0, #8
   b833e:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b8340:	2c1f      	cmp	r4, #31
   b8342:	dd74      	ble.n	b842e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b8344:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b8348:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b834c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b8350:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b8354:	4053      	eors	r3, r2
   b8356:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b835a:	4053      	eors	r3, r2
   b835c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b8360:	4053      	eors	r3, r2
   b8362:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b8366:	2207      	movs	r2, #7
   b8368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b836c:	a907      	add	r1, sp, #28
   b836e:	4650      	mov	r0, sl
   b8370:	f7ff fd7d 	bl	b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b8374:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b8376:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b8378:	f040 80c8 	bne.w	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b837c:	2300      	movs	r3, #0
   b837e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b8382:	2303      	movs	r3, #3
   b8384:	f88d 301b 	strb.w	r3, [sp, #27]
   b8388:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b838a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b838e:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b8392:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8396:	9305      	str	r3, [sp, #20]
   b8398:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b839c:	b2d2      	uxtb	r2, r2
   b839e:	211a      	movs	r1, #26
   b83a0:	4650      	mov	r0, sl
   b83a2:	f7ff fd2e 	bl	b7e02 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b83a6:	9b05      	ldr	r3, [sp, #20]
   b83a8:	9302      	str	r3, [sp, #8]
   b83aa:	f10d 031a 	add.w	r3, sp, #26
   b83ae:	2200      	movs	r2, #0
   b83b0:	9301      	str	r3, [sp, #4]
   b83b2:	f10d 031b 	add.w	r3, sp, #27
   b83b6:	9203      	str	r2, [sp, #12]
   b83b8:	9300      	str	r3, [sp, #0]
   b83ba:	464a      	mov	r2, r9
   b83bc:	465b      	mov	r3, fp
   b83be:	a907      	add	r1, sp, #28
   b83c0:	4650      	mov	r0, sl
   b83c2:	f7ff fe95 	bl	b80f0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b83c6:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b83c8:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b83ca:	d14c      	bne.n	b8466 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b83cc:	211c      	movs	r1, #28
   b83ce:	4650      	mov	r0, sl
   b83d0:	f7ff fce5 	bl	b7d9e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b83d4:	0681      	lsls	r1, r0, #26
   b83d6:	f100 8099 	bmi.w	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b83da:	f010 001f 	ands.w	r0, r0, #31
   b83de:	bf08      	it	eq
   b83e0:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b83e2:	42a0      	cmp	r0, r4
   b83e4:	f340 8087 	ble.w	b84f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b83e8:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b83ea:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b83ee:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b83f0:	f013 0307 	ands.w	r3, r3, #7
   b83f4:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b83f8:	bf18      	it	ne
   b83fa:	2301      	movne	r3, #1
   b83fc:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b83fe:	4418      	add	r0, r3
   b8400:	ab0a      	add	r3, sp, #40	; 0x28
   b8402:	4418      	add	r0, r3
   b8404:	2301      	movs	r3, #1
   b8406:	fa03 f202 	lsl.w	r2, r3, r2
   b840a:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b840e:	4313      	orrs	r3, r2
   b8410:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b8414:	e794      	b.n	b8340 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b8416:	2397      	movs	r3, #151	; 0x97
   b8418:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b841c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b841e:	4623      	mov	r3, r4
				break;
   b8420:	e757      	b.n	b82d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b8422:	4643      	mov	r3, r8
   b8424:	e746      	b.n	b82b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b8426:	4643      	mov	r3, r8
   b8428:	e753      	b.n	b82d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b842a:	2102      	movs	r1, #2
   b842c:	e75d      	b.n	b82ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b842e:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b8430:	3302      	adds	r3, #2
   b8432:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b8434:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8438:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b843c:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b8440:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b8444:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8448:	bf18      	it	ne
   b844a:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b844e:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8450:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b8452:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b8456:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b845a:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b845e:	f88d 301b 	strb.w	r3, [sp, #27]
   b8462:	9404      	str	r4, [sp, #16]
   b8464:	e795      	b.n	b8392 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b8466:	2801      	cmp	r0, #1
   b8468:	d150      	bne.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b846a:	9b04      	ldr	r3, [sp, #16]
   b846c:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b846e:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b8472:	f77f af67 	ble.w	b8344 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b8476:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b847a:	2b88      	cmp	r3, #136	; 0x88
   b847c:	d13e      	bne.n	b84fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b847e:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b8480:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b8482:	3601      	adds	r6, #1
   b8484:	441a      	add	r2, r3
   b8486:	fa57 f686 	uxtab	r6, r7, r6
   b848a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b848c:	4619      	mov	r1, r3
   b848e:	a80a      	add	r0, sp, #40	; 0x28
   b8490:	3301      	adds	r3, #1
   b8492:	4401      	add	r1, r0
   b8494:	b2db      	uxtb	r3, r3
   b8496:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b849a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b849e:	4293      	cmp	r3, r2
   b84a0:	d1f4      	bne.n	b848c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b84a2:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b84a6:	2e03      	cmp	r6, #3
   b84a8:	d137      	bne.n	b851a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b84aa:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b84ae:	bba4      	cbnz	r4, b851a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b84b0:	f10d 031e 	add.w	r3, sp, #30
   b84b4:	2201      	movs	r2, #1
   b84b6:	4659      	mov	r1, fp
   b84b8:	4650      	mov	r0, sl
   b84ba:	f7ff fcd8 	bl	b7e6e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b84be:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b84c0:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b84c2:	d123      	bne.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b84c4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b84c8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b84cc:	429a      	cmp	r2, r3
   b84ce:	d127      	bne.n	b8520 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b84d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b84d4:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b84d8:	429a      	cmp	r2, r3
   b84da:	d121      	bne.n	b8520 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b84dc:	f89b 3000 	ldrb.w	r3, [fp]
   b84e0:	075a      	lsls	r2, r3, #29
   b84e2:	d50e      	bpl.n	b8502 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b84e4:	3501      	adds	r5, #1
   b84e6:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b84e8:	2d03      	cmp	r5, #3
   b84ea:	d094      	beq.n	b8416 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b84ec:	2d04      	cmp	r5, #4
   b84ee:	d002      	beq.n	b84f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b84f0:	2d02      	cmp	r5, #2
   b84f2:	f43f aee2 	beq.w	b82ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b84f6:	f04f 0906 	mov.w	r9, #6
   b84fa:	e007      	b.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b84fc:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b84fe:	2204      	movs	r2, #4
   b8500:	e7bf      	b.n	b8482 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b8502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b8506:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b8508:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b850a:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b850c:	4648      	mov	r0, r9
   b850e:	b00b      	add	sp, #44	; 0x2c
   b8510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b8514:	f04f 0907 	mov.w	r9, #7
   b8518:	e7f8      	b.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b851a:	f04f 0902 	mov.w	r9, #2
   b851e:	e7f5      	b.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b8520:	f04f 0908 	mov.w	r9, #8
   b8524:	e7f2      	b.n	b850c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b8526 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b8526:	b508      	push	{r3, lr}
   b8528:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b852a:	2200      	movs	r2, #0
   b852c:	f7ff fea9 	bl	b8282 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b8530:	1e43      	subs	r3, r0, #1
   b8532:	4258      	negs	r0, r3
   b8534:	4158      	adcs	r0, r3
   b8536:	bd08      	pop	{r3, pc}

000b8538 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b8538:	6001      	str	r1, [r0, #0]
}
   b853a:	4770      	bx	lr

000b853c <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b853c:	b510      	push	{r4, lr}
   b853e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b8540:	2101      	movs	r1, #1
   b8542:	8800      	ldrh	r0, [r0, #0]
   b8544:	f002 f828 	bl	ba598 <pinMode>
	digitalWrite(_pin, LOW);
   b8548:	8820      	ldrh	r0, [r4, #0]
   b854a:	2100      	movs	r1, #0
   b854c:	f002 f835 	bl	ba5ba <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b8550:	2002      	movs	r0, #2
   b8552:	f000 fe77 	bl	b9244 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b8556:	8820      	ldrh	r0, [r4, #0]
   b8558:	2101      	movs	r1, #1
   b855a:	f002 f82e 	bl	ba5ba <digitalWrite>
   b855e:	2005      	movs	r0, #5
   b8560:	f000 fe70 	bl	b9244 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b8564:	8820      	ldrh	r0, [r4, #0]
   b8566:	2100      	movs	r1, #0
   b8568:	f002 f827 	bl	ba5ba <digitalWrite>
	pinMode(_pin,INPUT);
   b856c:	8820      	ldrh	r0, [r4, #0]
   b856e:	2100      	movs	r1, #0
   b8570:	f002 f812 	bl	ba598 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b8574:	8820      	ldrh	r0, [r4, #0]
   b8576:	2101      	movs	r1, #1
   b8578:	f002 f862 	bl	ba640 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b857c:	233a      	movs	r3, #58	; 0x3a
   b857e:	fb90 f0f3 	sdiv	r0, r0, r3
   b8582:	bd10      	pop	{r4, pc}

000b8584 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b8584:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b8586:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b8588:	2301      	movs	r3, #1
	_pin = pin;
   b858a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b858c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b858e:	7403      	strb	r3, [r0, #16]
}
   b8590:	bd10      	pop	{r4, pc}

000b8592 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b8592:	b510      	push	{r4, lr}
   b8594:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b8596:	2100      	movs	r1, #0
   b8598:	7980      	ldrb	r0, [r0, #6]
   b859a:	f001 fffd 	bl	ba598 <pinMode>
	digitalWrite(_pin, HIGH);
   b859e:	79a0      	ldrb	r0, [r4, #6]
   b85a0:	2101      	movs	r1, #1
   b85a2:	f002 f80a 	bl	ba5ba <digitalWrite>
	_lastreadtime = 0;
   b85a6:	2300      	movs	r3, #0
   b85a8:	60e3      	str	r3, [r4, #12]
}
   b85aa:	bd10      	pop	{r4, pc}

000b85ac <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b85ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b85b0:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b85b2:	f000 fe4f 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b85b6:	68e3      	ldr	r3, [r4, #12]
   b85b8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b85ba:	bf84      	itt	hi
   b85bc:	2300      	movhi	r3, #0
   b85be:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b85c0:	7c23      	ldrb	r3, [r4, #16]
   b85c2:	b923      	cbnz	r3, b85ce <_ZN3DHT4readEv+0x22>
   b85c4:	68e3      	ldr	r3, [r4, #12]
   b85c6:	1ac0      	subs	r0, r0, r3
   b85c8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b85cc:	d367      	bcc.n	b869e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b85ce:	2500      	movs	r5, #0
   b85d0:	7425      	strb	r5, [r4, #16]
   b85d2:	f000 fe3f 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b85d6:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b85d8:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b85da:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b85dc:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b85de:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b85e0:	f001 ffeb 	bl	ba5ba <digitalWrite>
	delay(250);
   b85e4:	20fa      	movs	r0, #250	; 0xfa
   b85e6:	f001 fc17 	bl	b9e18 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b85ea:	79a0      	ldrb	r0, [r4, #6]
   b85ec:	2101      	movs	r1, #1
   b85ee:	f001 ffd3 	bl	ba598 <pinMode>
	digitalWrite(_pin, LOW);
   b85f2:	4629      	mov	r1, r5
   b85f4:	79a0      	ldrb	r0, [r4, #6]
   b85f6:	f001 ffe0 	bl	ba5ba <digitalWrite>
	delay(20);
   b85fa:	2014      	movs	r0, #20
   b85fc:	f001 fc0c 	bl	b9e18 <delay>
	noInterrupts();
   b8600:	f001 fdc6 	bl	ba190 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b8604:	2101      	movs	r1, #1
   b8606:	79a0      	ldrb	r0, [r4, #6]
   b8608:	f001 ffd7 	bl	ba5ba <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b860c:	2028      	movs	r0, #40	; 0x28
   b860e:	f000 fe19 	bl	b9244 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b8612:	79a0      	ldrb	r0, [r4, #6]
   b8614:	4629      	mov	r1, r5
   b8616:	f001 ffbf 	bl	ba598 <pinMode>
	uint8_t j = 0, i;
   b861a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b861c:	2701      	movs	r7, #1
   b861e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b8622:	79a0      	ldrb	r0, [r4, #6]
   b8624:	f001 ffe2 	bl	ba5ec <digitalRead>
   b8628:	42b8      	cmp	r0, r7
   b862a:	fa5f f988 	uxtb.w	r9, r8
   b862e:	d108      	bne.n	b8642 <_ZN3DHT4readEv+0x96>
   b8630:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b8632:	f108 0801 	add.w	r8, r8, #1
   b8636:	f000 fe05 	bl	b9244 <HAL_Delay_Microseconds>
   b863a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b863e:	d1f0      	bne.n	b8622 <_ZN3DHT4readEv+0x76>
   b8640:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b8642:	79a0      	ldrb	r0, [r4, #6]
   b8644:	f001 ffd2 	bl	ba5ec <digitalRead>

		if (counter == 255) break;
   b8648:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b864c:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b864e:	d014      	beq.n	b867a <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b8650:	2d03      	cmp	r5, #3
   b8652:	d90e      	bls.n	b8672 <_ZN3DHT4readEv+0xc6>
   b8654:	07ea      	lsls	r2, r5, #31
   b8656:	d40c      	bmi.n	b8672 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b8658:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b865a:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b865c:	5ca3      	ldrb	r3, [r4, r2]
   b865e:	005b      	lsls	r3, r3, #1
   b8660:	b2db      	uxtb	r3, r3
   b8662:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b8664:	7a21      	ldrb	r1, [r4, #8]
   b8666:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b8668:	bf3c      	itt	cc
   b866a:	f043 0301 	orrcc.w	r3, r3, #1
   b866e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b8670:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b8672:	3501      	adds	r5, #1
   b8674:	b2ed      	uxtb	r5, r5
   b8676:	2d55      	cmp	r5, #85	; 0x55
   b8678:	d1d1      	bne.n	b861e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b867a:	f001 fd8b 	bl	ba194 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b867e:	2e27      	cmp	r6, #39	; 0x27
   b8680:	d90f      	bls.n	b86a2 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b8682:	7863      	ldrb	r3, [r4, #1]
   b8684:	7820      	ldrb	r0, [r4, #0]
   b8686:	4418      	add	r0, r3
   b8688:	78a3      	ldrb	r3, [r4, #2]
   b868a:	4418      	add	r0, r3
   b868c:	78e3      	ldrb	r3, [r4, #3]
   b868e:	4418      	add	r0, r3
   b8690:	7923      	ldrb	r3, [r4, #4]
   b8692:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b8694:	1ac3      	subs	r3, r0, r3
   b8696:	4258      	negs	r0, r3
   b8698:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b869e:	2001      	movs	r0, #1
   b86a0:	e7fb      	b.n	b869a <_ZN3DHT4readEv+0xee>
	return false;
   b86a2:	2000      	movs	r0, #0
   b86a4:	e7f9      	b.n	b869a <_ZN3DHT4readEv+0xee>
	...

000b86a8 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b86a8:	b510      	push	{r4, lr}
   b86aa:	4604      	mov	r4, r0
	if (read()) {
   b86ac:	f7ff ff7e 	bl	b85ac <_ZN3DHT4readEv>
   b86b0:	b320      	cbz	r0, b86fc <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b86b2:	79e3      	ldrb	r3, [r4, #7]
   b86b4:	2b0b      	cmp	r3, #11
   b86b6:	d01b      	beq.n	b86f0 <_ZN3DHT15readTemperatureEv+0x48>
   b86b8:	3b15      	subs	r3, #21
   b86ba:	2b01      	cmp	r3, #1
   b86bc:	d81e      	bhi.n	b86fc <_ZN3DHT15readTemperatureEv+0x54>
   b86be:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b86c0:	eddf 6a10 	vldr	s13, [pc, #64]	; b8704 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b86c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b86c8:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b86cc:	78e2      	ldrb	r2, [r4, #3]
   b86ce:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b86d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b86d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b86da:	061b      	lsls	r3, r3, #24
				f += data[3];
   b86dc:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b86e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b86e4:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b86e8:	d507      	bpl.n	b86fa <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b86ea:	eeb1 0a40 	vneg.f32	s0, s0
   b86ee:	e004      	b.n	b86fa <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b86f0:	78a3      	ldrb	r3, [r4, #2]
   b86f2:	ee00 3a10 	vmov	s0, r3
   b86f6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b86fa:	bd10      	pop	{r4, pc}
		switch (_type) {
   b86fc:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8708 <_ZN3DHT15readTemperatureEv+0x60>
   b8700:	e7fb      	b.n	b86fa <_ZN3DHT15readTemperatureEv+0x52>
   b8702:	bf00      	nop
   b8704:	43800000 	.word	0x43800000
   b8708:	7fc00000 	.word	0x7fc00000

000b870c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b870c:	f7ff bfcc 	b.w	b86a8 <_ZN3DHT15readTemperatureEv>

000b8710 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8710:	b510      	push	{r4, lr}
   b8712:	4b04      	ldr	r3, [pc, #16]	; (b8724 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8714:	6003      	str	r3, [r0, #0]
   b8716:	4604      	mov	r4, r0
  if(buffer) {
   b8718:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b871a:	b108      	cbz	r0, b8720 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b871c:	f000 ff8e 	bl	b963c <free>
    buffer = NULL;
  }
}
   b8720:	4620      	mov	r0, r4
   b8722:	bd10      	pop	{r4, pc}
   b8724:	000bcf08 	.word	0x000bcf08

000b8728 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8728:	b510      	push	{r4, lr}
   b872a:	4604      	mov	r4, r0
}
   b872c:	f7ff fff0 	bl	b8710 <_ZN16Adafruit_SSD1306D1Ev>
   b8730:	4620      	mov	r0, r4
   b8732:	2150      	movs	r1, #80	; 0x50
   b8734:	f7fb fcb1 	bl	b409a <_ZdlPvj>
   b8738:	4620      	mov	r0, r4
   b873a:	bd10      	pop	{r4, pc}

000b873c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b873c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b873e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8740:	db4b      	blt.n	b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8742:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8746:	428c      	cmp	r4, r1
   b8748:	dd47      	ble.n	b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b874a:	2a00      	cmp	r2, #0
   b874c:	db45      	blt.n	b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b874e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b8752:	4294      	cmp	r4, r2
   b8754:	dd41      	ble.n	b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b8756:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b8758:	2c02      	cmp	r4, #2
   b875a:	d01f      	beq.n	b879c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b875c:	2c03      	cmp	r4, #3
   b875e:	d026      	beq.n	b87ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b8760:	2c01      	cmp	r4, #1
   b8762:	d104      	bne.n	b876e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b8764:	8904      	ldrh	r4, [r0, #8]
   b8766:	43d2      	mvns	r2, r2
   b8768:	4414      	add	r4, r2
      break;
   b876a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b876c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b876e:	2b01      	cmp	r3, #1
   b8770:	d023      	beq.n	b87ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b8772:	2b02      	cmp	r3, #2
   b8774:	d032      	beq.n	b87dc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b8776:	bb83      	cbnz	r3, b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b8778:	2a00      	cmp	r2, #0
   b877a:	4613      	mov	r3, r2
   b877c:	8904      	ldrh	r4, [r0, #8]
   b877e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8780:	bfb8      	it	lt
   b8782:	1dd3      	addlt	r3, r2, #7
   b8784:	10db      	asrs	r3, r3, #3
   b8786:	fb13 1104 	smlabb	r1, r3, r4, r1
   b878a:	f002 0207 	and.w	r2, r2, #7
   b878e:	2301      	movs	r3, #1
   b8790:	4093      	lsls	r3, r2
   b8792:	5c42      	ldrb	r2, [r0, r1]
   b8794:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b8798:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b879a:	e01e      	b.n	b87da <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b879c:	8904      	ldrh	r4, [r0, #8]
   b879e:	3c01      	subs	r4, #1
   b87a0:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b87a2:	8944      	ldrh	r4, [r0, #10]
   b87a4:	43d2      	mvns	r2, r2
   b87a6:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b87a8:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b87aa:	b212      	sxth	r2, r2
      break;
   b87ac:	e7df      	b.n	b876e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b87ae:	8944      	ldrh	r4, [r0, #10]
   b87b0:	3c01      	subs	r4, #1
   b87b2:	1a64      	subs	r4, r4, r1
      break;
   b87b4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b87b6:	b222      	sxth	r2, r4
      break;
   b87b8:	e7d9      	b.n	b876e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b87ba:	2a00      	cmp	r2, #0
   b87bc:	8904      	ldrh	r4, [r0, #8]
   b87be:	4613      	mov	r3, r2
   b87c0:	bfb8      	it	lt
   b87c2:	1dd3      	addlt	r3, r2, #7
   b87c4:	10db      	asrs	r3, r3, #3
   b87c6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b87ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b87cc:	f002 0007 	and.w	r0, r2, #7
   b87d0:	2201      	movs	r2, #1
   b87d2:	4082      	lsls	r2, r0
   b87d4:	5c58      	ldrb	r0, [r3, r1]
   b87d6:	4302      	orrs	r2, r0
   b87d8:	545a      	strb	r2, [r3, r1]
}
   b87da:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b87dc:	2a00      	cmp	r2, #0
   b87de:	4613      	mov	r3, r2
   b87e0:	8904      	ldrh	r4, [r0, #8]
   b87e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b87e4:	bfb8      	it	lt
   b87e6:	1dd3      	addlt	r3, r2, #7
   b87e8:	10db      	asrs	r3, r3, #3
   b87ea:	fb13 1104 	smlabb	r1, r3, r4, r1
   b87ee:	f002 0207 	and.w	r2, r2, #7
   b87f2:	2301      	movs	r3, #1
   b87f4:	fa03 f202 	lsl.w	r2, r3, r2
   b87f8:	5c43      	ldrb	r3, [r0, r1]
   b87fa:	405a      	eors	r2, r3
   b87fc:	e7cc      	b.n	b8798 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b8800 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b8800:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b8802:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b8804:	4604      	mov	r4, r0
   b8806:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b8808:	2180      	movs	r1, #128	; 0x80
   b880a:	f7fe fe1d 	bl	b7448 <_ZN12Adafruit_GFXC1Ess>
   b880e:	2500      	movs	r5, #0
   b8810:	4b0d      	ldr	r3, [pc, #52]	; (b8848 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b8812:	6023      	str	r3, [r4, #0]
   b8814:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b8816:	f001 ff83 	bl	ba720 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b881a:	23ff      	movs	r3, #255	; 0xff
   b881c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b8820:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b8824:	4b09      	ldr	r3, [pc, #36]	; (b884c <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b8826:	63a3      	str	r3, [r4, #56]	; 0x38
   b8828:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b882c:	2301      	movs	r3, #1
   b882e:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b8832:	86a2      	strh	r2, [r4, #52]	; 0x34
   b8834:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b8838:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b883c:	6425      	str	r5, [r4, #64]	; 0x40
   b883e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b8842:	4620      	mov	r0, r4
   b8844:	bd70      	pop	{r4, r5, r6, pc}
   b8846:	bf00      	nop
   b8848:	000bcf08 	.word	0x000bcf08
   b884c:	000bc914 	.word	0x000bc914

000b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8852:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8854:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8856:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8858:	b190      	cbz	r0, b8880 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b885a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b885e:	f001 fd63 	bl	ba328 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8864:	6803      	ldr	r3, [r0, #0]
   b8866:	2100      	movs	r1, #0
   b8868:	689b      	ldr	r3, [r3, #8]
   b886a:	4798      	blx	r3
    WIRE_WRITE(c);
   b886c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b886e:	6803      	ldr	r3, [r0, #0]
   b8870:	4629      	mov	r1, r5
   b8872:	689b      	ldr	r3, [r3, #8]
   b8874:	4798      	blx	r3
    wire->endTransmission();
   b8876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b8878:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b887c:	f001 bd5b 	b.w	ba336 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8880:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8884:	4601      	mov	r1, r0
   b8886:	b298      	uxth	r0, r3
   b8888:	f001 fe97 	bl	ba5ba <digitalWrite>
  if(spi) {
   b888c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b888e:	b120      	cbz	r0, b889a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b8890:	4629      	mov	r1, r5
}
   b8892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b8896:	f000 bff3 	b.w	b9880 <_ZN8SPIClass8transferEh>
   b889a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b889c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b889e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b88a2:	ea05 0107 	and.w	r1, r5, r7
   b88a6:	b280      	uxth	r0, r0
   b88a8:	f001 fe87 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b88ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88b0:	2101      	movs	r1, #1
   b88b2:	b280      	uxth	r0, r0
   b88b4:	f001 fe81 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b88b8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b88bc:	2100      	movs	r1, #0
   b88be:	b280      	uxth	r0, r0
   b88c0:	f001 fe7b 	bl	ba5ba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b88c4:	3e01      	subs	r6, #1
   b88c6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b88ca:	d1e8      	bne.n	b889e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b88cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b88ce <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b88ce:	b538      	push	{r3, r4, r5, lr}
   b88d0:	4604      	mov	r4, r0
  TRANSACTION_START
   b88d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b88d4:	460d      	mov	r5, r1
  TRANSACTION_START
   b88d6:	b180      	cbz	r0, b88fa <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b88d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b88da:	f001 fd17 	bl	ba30c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b88de:	2d00      	cmp	r5, #0
   b88e0:	4620      	mov	r0, r4
   b88e2:	bf14      	ite	ne
   b88e4:	21a7      	movne	r1, #167	; 0xa7
   b88e6:	21a6      	moveq	r1, #166	; 0xa6
   b88e8:	f7ff ffb2 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b88ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b88ee:	b188      	cbz	r0, b8914 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b88f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b88f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b88f6:	f001 bd09 	b.w	ba30c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b88fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b88fc:	b118      	cbz	r0, b8906 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b88fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8902:	f000 ff4f 	bl	b97a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8906:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b890a:	2100      	movs	r1, #0
   b890c:	b280      	uxth	r0, r0
   b890e:	f001 fe54 	bl	ba5ba <digitalWrite>
   b8912:	e7e4      	b.n	b88de <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b8914:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8918:	2101      	movs	r1, #1
   b891a:	b280      	uxth	r0, r0
   b891c:	f001 fe4d 	bl	ba5ba <digitalWrite>
   b8920:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8922:	b118      	cbz	r0, b892c <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b8924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b8928:	f000 bf22 	b.w	b9770 <_ZN8SPIClass14endTransactionEv>
}
   b892c:	bd38      	pop	{r3, r4, r5, pc}

000b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b892e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8932:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8934:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8936:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8938:	188f      	adds	r7, r1, r2
   b893a:	b340      	cbz	r0, b898e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b893c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8940:	f001 fcf2 	bl	ba328 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8944:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8946:	6803      	ldr	r3, [r0, #0]
   b8948:	2100      	movs	r1, #0
   b894a:	689b      	ldr	r3, [r3, #8]
   b894c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b894e:	2601      	movs	r6, #1
    while(n--) {
   b8950:	42af      	cmp	r7, r5
        wire->endTransmission();
   b8952:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b8954:	d017      	beq.n	b8986 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b8956:	2e1f      	cmp	r6, #31
   b8958:	d90c      	bls.n	b8974 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b895a:	f001 fcec 	bl	ba336 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b895e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8962:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8964:	f001 fce0 	bl	ba328 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8968:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b896a:	6803      	ldr	r3, [r0, #0]
   b896c:	2100      	movs	r1, #0
   b896e:	689b      	ldr	r3, [r3, #8]
   b8970:	4798      	blx	r3
        bytesOut = 1;
   b8972:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8974:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8976:	f815 1b01 	ldrb.w	r1, [r5], #1
   b897a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b897c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b897e:	689b      	ldr	r3, [r3, #8]
   b8980:	4798      	blx	r3
      bytesOut++;
   b8982:	b2f6      	uxtb	r6, r6
    while(n--) {
   b8984:	e7e4      	b.n	b8950 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b8986:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b898a:	f001 bcd4 	b.w	ba336 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b898e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8992:	4601      	mov	r1, r0
   b8994:	b298      	uxth	r0, r3
   b8996:	f001 fe10 	bl	ba5ba <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b899a:	42bd      	cmp	r5, r7
   b899c:	d022      	beq.n	b89e4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b899e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b89a0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b89a4:	b118      	cbz	r0, b89ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b89a6:	4649      	mov	r1, r9
   b89a8:	f000 ff6a 	bl	b9880 <_ZN8SPIClass8transferEh>
   b89ac:	e7f5      	b.n	b899a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b89ae:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b89b0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b89b4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b89b8:	ea09 0108 	and.w	r1, r9, r8
   b89bc:	b280      	uxth	r0, r0
   b89be:	f001 fdfc 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b89c2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b89c6:	2101      	movs	r1, #1
   b89c8:	b280      	uxth	r0, r0
   b89ca:	f001 fdf6 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b89ce:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b89d2:	2100      	movs	r1, #0
   b89d4:	b280      	uxth	r0, r0
   b89d6:	f001 fdf0 	bl	ba5ba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b89da:	3e01      	subs	r6, #1
   b89dc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b89e0:	d1e8      	bne.n	b89b4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b89e2:	e7da      	b.n	b899a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b89e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b89e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b89ec:	1dda      	adds	r2, r3, #7
   b89ee:	bf48      	it	mi
   b89f0:	f103 020e 	addmi.w	r2, r3, #14
   b89f4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b89f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b89fa:	10d2      	asrs	r2, r2, #3
   b89fc:	435a      	muls	r2, r3
   b89fe:	2100      	movs	r1, #0
   b8a00:	f002 bbd4 	b.w	bb1ac <memset>

000b8a04 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b8a04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8a08:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b8a0c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8a10:	4604      	mov	r4, r0
   b8a12:	460f      	mov	r7, r1
   b8a14:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8a16:	b1d3      	cbz	r3, b8a4e <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b8a18:	4620      	mov	r0, r4
   b8a1a:	f7ff ffe5 	bl	b89e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b8a1e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b8a22:	2a20      	cmp	r2, #32
   b8a24:	dc25      	bgt.n	b8a72 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8a26:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b8a2a:	2320      	movs	r3, #32
   b8a2c:	3a20      	subs	r2, #32
   b8a2e:	3973      	subs	r1, #115	; 0x73
   b8a30:	2001      	movs	r0, #1
   b8a32:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8a36:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b8a3a:	2373      	movs	r3, #115	; 0x73
   b8a3c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8a40:	9300      	str	r3, [sp, #0]
   b8a42:	f342 024f 	sbfx	r2, r2, #1, #16
   b8a46:	4b85      	ldr	r3, [pc, #532]	; (b8c5c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b8a48:	f341 014f 	sbfx	r1, r1, #1, #16
   b8a4c:	e01b      	b.n	b8a86 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8a4e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b8a52:	1dd8      	adds	r0, r3, #7
   b8a54:	bf48      	it	mi
   b8a56:	f103 000e 	addmi.w	r0, r3, #14
   b8a5a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b8a5e:	10c0      	asrs	r0, r0, #3
   b8a60:	4358      	muls	r0, r3
   b8a62:	f000 fde3 	bl	b962c <malloc>
   b8a66:	62e0      	str	r0, [r4, #44]	; 0x2c
   b8a68:	2800      	cmp	r0, #0
   b8a6a:	d1d5      	bne.n	b8a18 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8a6c:	b004      	add	sp, #16
   b8a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b8a72:	2340      	movs	r3, #64	; 0x40
   b8a74:	f04f 0c01 	mov.w	ip, #1
   b8a78:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b8a7c:	2380      	movs	r3, #128	; 0x80
   b8a7e:	9300      	str	r3, [sp, #0]
   b8a80:	2200      	movs	r2, #0
   b8a82:	4b77      	ldr	r3, [pc, #476]	; (b8c60 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b8a84:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8a86:	4620      	mov	r0, r4
   b8a88:	f7fe fea6 	bl	b77d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b8a8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b8a8e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b8a92:	2800      	cmp	r0, #0
   b8a94:	d078      	beq.n	b8b88 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8a96:	2d00      	cmp	r5, #0
   b8a98:	d174      	bne.n	b8b84 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b8a9a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8a9e:	2b20      	cmp	r3, #32
   b8aa0:	bf0c      	ite	eq
   b8aa2:	253c      	moveq	r5, #60	; 0x3c
   b8aa4:	253d      	movne	r5, #61	; 0x3d
   b8aa6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b8aaa:	f1b8 0f00 	cmp.w	r8, #0
   b8aae:	d001      	beq.n	b8ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8ab0:	f001 fc30 	bl	ba314 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b8ab4:	b1fe      	cbz	r6, b8af6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b8ab6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8aba:	2800      	cmp	r0, #0
   b8abc:	db1b      	blt.n	b8af6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b8abe:	2101      	movs	r1, #1
   b8ac0:	b280      	uxth	r0, r0
   b8ac2:	f001 fd69 	bl	ba598 <pinMode>
    digitalWrite(rstPin, HIGH);
   b8ac6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8aca:	2101      	movs	r1, #1
   b8acc:	b280      	uxth	r0, r0
   b8ace:	f001 fd74 	bl	ba5ba <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b8ad2:	2001      	movs	r0, #1
   b8ad4:	f001 f9a0 	bl	b9e18 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b8ad8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8adc:	2100      	movs	r1, #0
   b8ade:	b280      	uxth	r0, r0
   b8ae0:	f001 fd6b 	bl	ba5ba <digitalWrite>
    delay(10);                  // Wait 10 ms
   b8ae4:	200a      	movs	r0, #10
   b8ae6:	f001 f997 	bl	b9e18 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b8aea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b8aee:	2101      	movs	r1, #1
   b8af0:	b280      	uxth	r0, r0
   b8af2:	f001 fd62 	bl	ba5ba <digitalWrite>
  TRANSACTION_START
   b8af6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8af8:	2800      	cmp	r0, #0
   b8afa:	d074      	beq.n	b8be6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b8afc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8afe:	f001 fc05 	bl	ba30c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8b02:	2204      	movs	r2, #4
   b8b04:	4957      	ldr	r1, [pc, #348]	; (b8c64 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b8b06:	4620      	mov	r0, r4
   b8b08:	f7ff ff11 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8b0c:	8961      	ldrh	r1, [r4, #10]
   b8b0e:	3901      	subs	r1, #1
   b8b10:	b2c9      	uxtb	r1, r1
   b8b12:	4620      	mov	r0, r4
   b8b14:	f7ff fe9c 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8b18:	4953      	ldr	r1, [pc, #332]	; (b8c68 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b8b1a:	2204      	movs	r2, #4
   b8b1c:	4620      	mov	r0, r4
   b8b1e:	f7ff ff06 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b8b22:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b26:	2b01      	cmp	r3, #1
   b8b28:	bf0c      	ite	eq
   b8b2a:	2110      	moveq	r1, #16
   b8b2c:	2114      	movne	r1, #20
   b8b2e:	4620      	mov	r0, r4
   b8b30:	f7ff fe8e 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8b34:	2204      	movs	r2, #4
   b8b36:	494d      	ldr	r1, [pc, #308]	; (b8c6c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8b38:	4620      	mov	r0, r4
   b8b3a:	f7ff fef8 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b8b3e:	68a3      	ldr	r3, [r4, #8]
   b8b40:	4a4b      	ldr	r2, [pc, #300]	; (b8c70 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8b42:	4293      	cmp	r3, r2
   b8b44:	d15c      	bne.n	b8c00 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8b46:	494b      	ldr	r1, [pc, #300]	; (b8c74 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b8b48:	2204      	movs	r2, #4
   b8b4a:	4620      	mov	r0, r4
   b8b4c:	f7ff feef 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b8b50:	21d9      	movs	r1, #217	; 0xd9
   b8b52:	4620      	mov	r0, r4
   b8b54:	f7ff fe7c 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8b58:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8b5c:	2b01      	cmp	r3, #1
   b8b5e:	bf0c      	ite	eq
   b8b60:	2122      	moveq	r1, #34	; 0x22
   b8b62:	21f1      	movne	r1, #241	; 0xf1
   b8b64:	4620      	mov	r0, r4
   b8b66:	f7ff fe73 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8b6a:	4620      	mov	r0, r4
   b8b6c:	4942      	ldr	r1, [pc, #264]	; (b8c78 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8b6e:	2206      	movs	r2, #6
   b8b70:	f7ff fedd 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8b74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8b76:	2800      	cmp	r0, #0
   b8b78:	d063      	beq.n	b8c42 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b8b7a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8b7c:	f001 fbc6 	bl	ba30c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b8b80:	2001      	movs	r0, #1
   b8b82:	e773      	b.n	b8a6c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8b84:	b26d      	sxtb	r5, r5
   b8b86:	e78e      	b.n	b8aa6 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8b88:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8b8c:	2101      	movs	r1, #1
   b8b8e:	b280      	uxth	r0, r0
   b8b90:	f001 fd02 	bl	ba598 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8b94:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8b98:	2101      	movs	r1, #1
   b8b9a:	b280      	uxth	r0, r0
   b8b9c:	f001 fcfc 	bl	ba598 <pinMode>
    SSD1306_DESELECT
   b8ba0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8ba4:	2101      	movs	r1, #1
   b8ba6:	b280      	uxth	r0, r0
   b8ba8:	f001 fd07 	bl	ba5ba <digitalWrite>
    if(spi) { // Hardware SPI
   b8bac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8bae:	b13d      	cbz	r5, b8bc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b8bb0:	f1b8 0f00 	cmp.w	r8, #0
   b8bb4:	f43f af7e 	beq.w	b8ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8bb8:	4628      	mov	r0, r5
   b8bba:	f000 fdc5 	bl	b9748 <_ZN8SPIClass5beginEv>
   b8bbe:	e779      	b.n	b8ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b8bc0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8bc4:	2101      	movs	r1, #1
   b8bc6:	b280      	uxth	r0, r0
   b8bc8:	f001 fce6 	bl	ba598 <pinMode>
      pinMode(clkPin , OUTPUT);
   b8bcc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8bd0:	2101      	movs	r1, #1
   b8bd2:	b280      	uxth	r0, r0
   b8bd4:	f001 fce0 	bl	ba598 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8bd8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8bdc:	4629      	mov	r1, r5
   b8bde:	b280      	uxth	r0, r0
   b8be0:	f001 fceb 	bl	ba5ba <digitalWrite>
   b8be4:	e766      	b.n	b8ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b8be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8be8:	b118      	cbz	r0, b8bf2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8bea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8bee:	f000 fdd9 	bl	b97a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8bf2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8bf6:	2100      	movs	r1, #0
   b8bf8:	b280      	uxth	r0, r0
   b8bfa:	f001 fcde 	bl	ba5ba <digitalWrite>
   b8bfe:	e780      	b.n	b8b02 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8c00:	4a1e      	ldr	r2, [pc, #120]	; (b8c7c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8c02:	4293      	cmp	r3, r2
   b8c04:	d10e      	bne.n	b8c24 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8c06:	491e      	ldr	r1, [pc, #120]	; (b8c80 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8c08:	2203      	movs	r2, #3
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	f7ff fe8f 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8c10:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8c14:	2b01      	cmp	r3, #1
   b8c16:	bf0c      	ite	eq
   b8c18:	219f      	moveq	r1, #159	; 0x9f
   b8c1a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	f7ff fe17 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b8c22:	e795      	b.n	b8b50 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8c24:	4a17      	ldr	r2, [pc, #92]	; (b8c84 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b8c26:	4293      	cmp	r3, r2
   b8c28:	d192      	bne.n	b8b50 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b8c2a:	4917      	ldr	r1, [pc, #92]	; (b8c88 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b8c2c:	2203      	movs	r2, #3
   b8c2e:	4620      	mov	r0, r4
   b8c30:	f7ff fe7d 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8c34:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8c38:	2b01      	cmp	r3, #1
   b8c3a:	bf0c      	ite	eq
   b8c3c:	2110      	moveq	r1, #16
   b8c3e:	21af      	movne	r1, #175	; 0xaf
   b8c40:	e7ec      	b.n	b8c1c <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b8c42:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8c46:	2101      	movs	r1, #1
   b8c48:	b280      	uxth	r0, r0
   b8c4a:	f001 fcb6 	bl	ba5ba <digitalWrite>
   b8c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8c50:	2800      	cmp	r0, #0
   b8c52:	d095      	beq.n	b8b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b8c54:	f000 fd8c 	bl	b9770 <_ZN8SPIClass14endTransactionEv>
   b8c58:	e792      	b.n	b8b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b8c5a:	bf00      	nop
   b8c5c:	000bc920 	.word	0x000bc920
   b8c60:	000bcb00 	.word	0x000bcb00
   b8c64:	000bcf68 	.word	0x000bcf68
   b8c68:	000bcf6c 	.word	0x000bcf6c
   b8c6c:	000bcf70 	.word	0x000bcf70
   b8c70:	00200080 	.word	0x00200080
   b8c74:	000bcf7a 	.word	0x000bcf7a
   b8c78:	000bcf74 	.word	0x000bcf74
   b8c7c:	00400080 	.word	0x00400080
   b8c80:	000bcf7e 	.word	0x000bcf7e
   b8c84:	00100060 	.word	0x00100060
   b8c88:	000bcf81 	.word	0x000bcf81

000b8c8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8c8c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8c8e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8c90:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8c94:	db3d      	blt.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8c96:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8c9a:	4294      	cmp	r4, r2
   b8c9c:	dd39      	ble.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8c9e:	2900      	cmp	r1, #0
      w += x;
   b8ca0:	bfbe      	ittt	lt
   b8ca2:	185b      	addlt	r3, r3, r1
   b8ca4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8ca6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8ca8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8cac:	18ce      	adds	r6, r1, r3
   b8cae:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8cb0:	bfc4      	itt	gt
   b8cb2:	1a63      	subgt	r3, r4, r1
   b8cb4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8cb6:	2b00      	cmp	r3, #0
   b8cb8:	dd2b      	ble.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8cba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8cbc:	10d6      	asrs	r6, r2, #3
   b8cbe:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8cc2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8cc4:	f002 0007 	and.w	r0, r2, #7
   b8cc8:	2201      	movs	r2, #1
   b8cca:	4082      	lsls	r2, r0
      switch(color) {
   b8ccc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8cce:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8cd0:	d016      	beq.n	b8d00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8cd2:	2d02      	cmp	r5, #2
   b8cd4:	d00b      	beq.n	b8cee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8cd6:	b9e5      	cbnz	r5, b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8cd8:	43d2      	mvns	r2, r2
   b8cda:	b2d2      	uxtb	r2, r2
   b8cdc:	440b      	add	r3, r1
   b8cde:	4299      	cmp	r1, r3
   b8ce0:	d017      	beq.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8ce2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8ce6:	4010      	ands	r0, r2
   b8ce8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8cec:	e7f7      	b.n	b8cde <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8cee:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8cf0:	4299      	cmp	r1, r3
   b8cf2:	d00e      	beq.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8cf4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8cf8:	4050      	eors	r0, r2
   b8cfa:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8cfe:	e7f7      	b.n	b8cf0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8d00:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8d02:	4299      	cmp	r1, r3
   b8d04:	d005      	beq.n	b8d12 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8d06:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8d0a:	4310      	orrs	r0, r2
   b8d0c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8d10:	e7f7      	b.n	b8d02 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8d12:	bd70      	pop	{r4, r5, r6, pc}

000b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8d16:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8d18:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8d1c:	db76      	blt.n	b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b8d1e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b8d22:	42b1      	cmp	r1, r6
   b8d24:	da72      	bge.n	b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8d26:	2a00      	cmp	r2, #0
      __h += __y;
   b8d28:	bfbe      	ittt	lt
   b8d2a:	189b      	addlt	r3, r3, r2
   b8d2c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b8d2e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b8d30:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8d34:	18d7      	adds	r7, r2, r3
   b8d36:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8d38:	bfc4      	itt	gt
   b8d3a:	1aa3      	subgt	r3, r4, r2
   b8d3c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b8d3e:	2b00      	cmp	r3, #0
   b8d40:	dd64      	ble.n	b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8d42:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8d46:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8d48:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8d4c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b8d50:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b8d52:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8d56:	d023      	beq.n	b8da0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8d58:	f1c2 0208 	rsb	r2, r2, #8
   b8d5c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8d5e:	492d      	ldr	r1, [pc, #180]	; (b8e14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8d60:	4293      	cmp	r3, r2
   b8d62:	bf3c      	itt	cc
   b8d64:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8d68:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8d6c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8d6e:	bf3c      	itt	cc
   b8d70:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8d74:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8d78:	2d01      	cmp	r5, #1
   b8d7a:	d007      	beq.n	b8d8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8d7c:	2d02      	cmp	r5, #2
   b8d7e:	d02e      	beq.n	b8dde <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8d80:	b94d      	cbnz	r5, b8d96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8d82:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8d86:	ea2c 0101 	bic.w	r1, ip, r1
   b8d8a:	e003      	b.n	b8d94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8d8c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8d90:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8d94:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8d96:	4293      	cmp	r3, r2
   b8d98:	d338      	bcc.n	b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8d9a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8d9e:	440c      	add	r4, r1
        h -= mod;
   b8da0:	1a9a      	subs	r2, r3, r2
   b8da2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8da4:	2a07      	cmp	r2, #7
   b8da6:	d90e      	bls.n	b8dc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8da8:	2d02      	cmp	r5, #2
   b8daa:	d11d      	bne.n	b8de8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8dac:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8dae:	7821      	ldrb	r1, [r4, #0]
   b8db0:	43c9      	mvns	r1, r1
   b8db2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8db4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8db6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8dba:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8dbc:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8dbe:	440c      	add	r4, r1
            } while(h >= 8);
   b8dc0:	d8f5      	bhi.n	b8dae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8dc2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8dc6:	b30a      	cbz	r2, b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8dc8:	4b13      	ldr	r3, [pc, #76]	; (b8e18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8dca:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8dcc:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8dce:	d01a      	beq.n	b8e06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8dd0:	2d02      	cmp	r5, #2
   b8dd2:	d01c      	beq.n	b8e0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8dd4:	b9d5      	cbnz	r5, b8e0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8dd6:	7822      	ldrb	r2, [r4, #0]
   b8dd8:	ea22 0303 	bic.w	r3, r2, r3
   b8ddc:	e015      	b.n	b8e0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8dde:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8de2:	ea81 010c 	eor.w	r1, r1, ip
   b8de6:	e7d5      	b.n	b8d94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8de8:	1e29      	subs	r1, r5, #0
   b8dea:	bf18      	it	ne
   b8dec:	2101      	movne	r1, #1
   b8dee:	4249      	negs	r1, r1
   b8df0:	b2c9      	uxtb	r1, r1
   b8df2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8df4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8df6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8df8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8dfc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8dfe:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8e00:	4434      	add	r4, r6
            } while(h >= 8);
   b8e02:	d8f7      	bhi.n	b8df4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8e04:	e7dd      	b.n	b8dc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8e06:	7822      	ldrb	r2, [r4, #0]
   b8e08:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8e0a:	7023      	strb	r3, [r4, #0]
}
   b8e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b8e0e:	7822      	ldrb	r2, [r4, #0]
   b8e10:	4053      	eors	r3, r2
   b8e12:	e7fa      	b.n	b8e0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8e14:	000bcf58 	.word	0x000bcf58
   b8e18:	000bcf60 	.word	0x000bcf60

000b8e1c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8e1c:	b470      	push	{r4, r5, r6}
   b8e1e:	4614      	mov	r4, r2
  switch(rotation) {
   b8e20:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8e22:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8e26:	2a02      	cmp	r2, #2
   b8e28:	d00d      	beq.n	b8e46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8e2a:	2a03      	cmp	r2, #3
   b8e2c:	d018      	beq.n	b8e60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b8e2e:	2a01      	cmp	r2, #1
   b8e30:	d111      	bne.n	b8e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b8e32:	8902      	ldrh	r2, [r0, #8]
   b8e34:	43e4      	mvns	r4, r4
   b8e36:	4414      	add	r4, r2
   b8e38:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8e3a:	9603      	str	r6, [sp, #12]
   b8e3c:	460a      	mov	r2, r1
   b8e3e:	4621      	mov	r1, r4
}
   b8e40:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8e42:	f7ff bf67 	b.w	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8e46:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8e48:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8e4a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8e4c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b8e4e:	4414      	add	r4, r2
    x -= (w-1);
   b8e50:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b8e52:	b224      	sxth	r4, r4
    x -= (w-1);
   b8e54:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8e56:	9603      	str	r6, [sp, #12]
   b8e58:	4622      	mov	r2, r4
}
   b8e5a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8e5c:	f7ff bf16 	b.w	b8c8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8e60:	8945      	ldrh	r5, [r0, #10]
   b8e62:	4419      	add	r1, r3
   b8e64:	1a69      	subs	r1, r5, r1
   b8e66:	b209      	sxth	r1, r1
    break;
   b8e68:	e7e7      	b.n	b8e3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8e6a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8e6a:	b430      	push	{r4, r5}
   b8e6c:	4614      	mov	r4, r2
  switch(rotation) {
   b8e6e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8e70:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8e74:	2a02      	cmp	r2, #2
   b8e76:	d00d      	beq.n	b8e94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8e78:	2a03      	cmp	r2, #3
   b8e7a:	d018      	beq.n	b8eae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8e7c:	2a01      	cmp	r2, #1
   b8e7e:	d111      	bne.n	b8ea4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8e80:	18e2      	adds	r2, r4, r3
   b8e82:	8904      	ldrh	r4, [r0, #8]
   b8e84:	1aa4      	subs	r4, r4, r2
   b8e86:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8e88:	9502      	str	r5, [sp, #8]
   b8e8a:	460a      	mov	r2, r1
   b8e8c:	4621      	mov	r1, r4
}
   b8e8e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8e90:	f7ff befc 	b.w	b8c8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8e94:	8902      	ldrh	r2, [r0, #8]
   b8e96:	43c9      	mvns	r1, r1
   b8e98:	4411      	add	r1, r2
    y -= (h-1);
   b8e9a:	18e2      	adds	r2, r4, r3
   b8e9c:	8944      	ldrh	r4, [r0, #10]
   b8e9e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8ea0:	b209      	sxth	r1, r1
    y -= (h-1);
   b8ea2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8ea4:	9502      	str	r5, [sp, #8]
   b8ea6:	4622      	mov	r2, r4
}
   b8ea8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8eaa:	f7ff bf33 	b.w	b8d14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8eae:	8942      	ldrh	r2, [r0, #10]
   b8eb0:	43c9      	mvns	r1, r1
   b8eb2:	4411      	add	r1, r2
   b8eb4:	b209      	sxth	r1, r1
    break;
   b8eb6:	e7e7      	b.n	b8e88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8eb8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ebc:	4604      	mov	r4, r0
  TRANSACTION_START
   b8ebe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8ec0:	2800      	cmp	r0, #0
   b8ec2:	d042      	beq.n	b8f4a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8ec6:	f001 fa21 	bl	ba30c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8eca:	4947      	ldr	r1, [pc, #284]	; (b8fe8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8ecc:	2205      	movs	r2, #5
   b8ece:	4620      	mov	r0, r4
   b8ed0:	f7ff fd2d 	bl	b892e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8ed4:	8921      	ldrh	r1, [r4, #8]
   b8ed6:	3901      	subs	r1, #1
   b8ed8:	4620      	mov	r0, r4
   b8eda:	b2c9      	uxtb	r1, r1
   b8edc:	f7ff fcb8 	bl	b8850 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8ee0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8ee4:	1dde      	adds	r6, r3, #7
   b8ee6:	bf48      	it	mi
   b8ee8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8eec:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8ef0:	8923      	ldrh	r3, [r4, #8]
   b8ef2:	10f6      	asrs	r6, r6, #3
   b8ef4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8ef8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8efc:	2800      	cmp	r0, #0
   b8efe:	d03a      	beq.n	b8f76 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8f00:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8f04:	f001 fa10 	bl	ba328 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8f08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8f0a:	6803      	ldr	r3, [r0, #0]
   b8f0c:	2140      	movs	r1, #64	; 0x40
   b8f0e:	689b      	ldr	r3, [r3, #8]
   b8f10:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8f12:	2701      	movs	r7, #1
    while(count--) {
   b8f14:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8f16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8f18:	d024      	beq.n	b8f64 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8f1a:	2f1f      	cmp	r7, #31
   b8f1c:	d90c      	bls.n	b8f38 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b8f1e:	f001 fa0a 	bl	ba336 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b8f22:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8f26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8f28:	f001 f9fe 	bl	ba328 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8f2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8f2e:	6803      	ldr	r3, [r0, #0]
   b8f30:	2140      	movs	r1, #64	; 0x40
   b8f32:	689b      	ldr	r3, [r3, #8]
   b8f34:	4798      	blx	r3
        bytesOut = 1;
   b8f36:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8f38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8f3a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8f3e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b8f40:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b8f42:	689b      	ldr	r3, [r3, #8]
   b8f44:	4798      	blx	r3
      bytesOut++;
   b8f46:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8f48:	e7e4      	b.n	b8f14 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8f4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8f4c:	b118      	cbz	r0, b8f56 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b8f4e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8f52:	f000 fc27 	bl	b97a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8f56:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8f5a:	2100      	movs	r1, #0
   b8f5c:	b280      	uxth	r0, r0
   b8f5e:	f001 fb2c 	bl	ba5ba <digitalWrite>
   b8f62:	e7b2      	b.n	b8eca <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8f64:	f001 f9e7 	bl	ba336 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8f68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8f6a:	b378      	cbz	r0, b8fcc <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8f6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8f6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8f72:	f001 b9cb 	b.w	ba30c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8f76:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8f7a:	2101      	movs	r1, #1
   b8f7c:	b280      	uxth	r0, r0
   b8f7e:	f001 fb1c 	bl	ba5ba <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8f82:	42ae      	cmp	r6, r5
   b8f84:	d0f0      	beq.n	b8f68 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8f86:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8f88:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8f8c:	b118      	cbz	r0, b8f96 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8f8e:	4649      	mov	r1, r9
   b8f90:	f000 fc76 	bl	b9880 <_ZN8SPIClass8transferEh>
   b8f94:	e7f5      	b.n	b8f82 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8f96:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8f98:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8f9c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8fa0:	ea09 0108 	and.w	r1, r9, r8
   b8fa4:	b280      	uxth	r0, r0
   b8fa6:	f001 fb08 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8faa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8fae:	2101      	movs	r1, #1
   b8fb0:	b280      	uxth	r0, r0
   b8fb2:	f001 fb02 	bl	ba5ba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8fb6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8fba:	2100      	movs	r1, #0
   b8fbc:	b280      	uxth	r0, r0
   b8fbe:	f001 fafc 	bl	ba5ba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8fc2:	3f01      	subs	r7, #1
   b8fc4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8fc8:	d1e8      	bne.n	b8f9c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8fca:	e7da      	b.n	b8f82 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8fcc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8fd0:	2101      	movs	r1, #1
   b8fd2:	b280      	uxth	r0, r0
   b8fd4:	f001 faf1 	bl	ba5ba <digitalWrite>
   b8fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8fda:	b118      	cbz	r0, b8fe4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8fdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8fe0:	f000 bbc6 	b.w	b9770 <_ZN8SPIClass14endTransactionEv>
}
   b8fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8fe8:	000bcf84 	.word	0x000bcf84

000b8fec <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b8fec:	b510      	push	{r4, lr}
   b8fee:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b8ff0:	7001      	strb	r1, [r0, #0]
   b8ff2:	7042      	strb	r2, [r0, #1]
   b8ff4:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b8ff6:	2101      	movs	r1, #1
   b8ff8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b8ffc:	f002 f8c0 	bl	bb180 <calloc>
   b9000:	6060      	str	r0, [r4, #4]
}
   b9002:	4620      	mov	r0, r4
   b9004:	bd10      	pop	{r4, pc}

000b9006 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b9006:	b510      	push	{r4, lr}
   b9008:	4604      	mov	r4, r0
{
    free(_led_state);
   b900a:	6840      	ldr	r0, [r0, #4]
   b900c:	f000 fb16 	bl	b963c <free>
}
   b9010:	4620      	mov	r0, r4
   b9012:	bd10      	pop	{r4, pc}

000b9014 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b9014:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b9016:	2100      	movs	r1, #0
{
   b9018:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b901a:	7800      	ldrb	r0, [r0, #0]
   b901c:	f001 facd 	bl	ba5ba <digitalWrite>
   b9020:	2014      	movs	r0, #20
   b9022:	f000 f90f 	bl	b9244 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b9026:	7820      	ldrb	r0, [r4, #0]
   b9028:	2101      	movs	r1, #1
   b902a:	f001 fac6 	bl	ba5ba <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b902e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9032:	2014      	movs	r0, #20
   b9034:	f000 b906 	b.w	b9244 <HAL_Delay_Microseconds>

000b9038 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b9038:	b570      	push	{r4, r5, r6, lr}
   b903a:	4606      	mov	r6, r0
   b903c:	460c      	mov	r4, r1
   b903e:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b9040:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b9042:	bf4c      	ite	mi
   b9044:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b9046:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b9048:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b904a:	f001 fab6 	bl	ba5ba <digitalWrite>
    for (byte i=0; i<8; i++)
   b904e:	3d01      	subs	r5, #1
        clk();
   b9050:	4630      	mov	r0, r6
   b9052:	f7ff ffdf 	bl	b9014 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b9056:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b9058:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b905c:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b905e:	d1ef      	bne.n	b9040 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b9060:	bd70      	pop	{r4, r5, r6, pc}

000b9062 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b9062:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b9064:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b9068:	461e      	mov	r6, r3
   b906a:	460c      	mov	r4, r1
   b906c:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b906e:	bf14      	ite	ne
   b9070:	21c0      	movne	r1, #192	; 0xc0
   b9072:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b9074:	0673      	lsls	r3, r6, #25
   b9076:	bf58      	it	pl
   b9078:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b907c:	062a      	lsls	r2, r5, #24
   b907e:	bf58      	it	pl
   b9080:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b9084:	066b      	lsls	r3, r5, #25
   b9086:	bf58      	it	pl
   b9088:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b908c:	0622      	lsls	r2, r4, #24
   b908e:	bf58      	it	pl
   b9090:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b9094:	0663      	lsls	r3, r4, #25
   b9096:	bf58      	it	pl
   b9098:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b909c:	9001      	str	r0, [sp, #4]
   b909e:	f7ff ffcb 	bl	b9038 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b90a2:	9801      	ldr	r0, [sp, #4]
   b90a4:	4631      	mov	r1, r6
   b90a6:	f7ff ffc7 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b90aa:	9801      	ldr	r0, [sp, #4]
   b90ac:	4629      	mov	r1, r5
   b90ae:	f7ff ffc3 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b90b2:	9801      	ldr	r0, [sp, #4]
   b90b4:	4621      	mov	r1, r4
}
   b90b6:	b002      	add	sp, #8
   b90b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b90bc:	f7ff bfbc 	b.w	b9038 <_ZN12ChainableLED8sendByteEh>

000b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b90c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b90c4:	4604      	mov	r4, r0
   b90c6:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b90c8:	2100      	movs	r1, #0
{
   b90ca:	4690      	mov	r8, r2
   b90cc:	4699      	mov	r9, r3
   b90ce:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b90d2:	f7ff ffb1 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b90d6:	2100      	movs	r1, #0
   b90d8:	4620      	mov	r0, r4
   b90da:	f7ff ffad 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b90de:	2100      	movs	r1, #0
   b90e0:	4620      	mov	r0, r4
   b90e2:	f7ff ffa9 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b90e6:	2100      	movs	r1, #0
   b90e8:	4620      	mov	r0, r4
   b90ea:	f7ff ffa5 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
   b90ee:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b90f0:	78a3      	ldrb	r3, [r4, #2]
   b90f2:	b2f5      	uxtb	r5, r6
   b90f4:	42ab      	cmp	r3, r5
   b90f6:	d919      	bls.n	b912c <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b90f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b90fc:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b90fe:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b9102:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b9106:	d108      	bne.n	b911a <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b9108:	6861      	ldr	r1, [r4, #4]
   b910a:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b910e:	6861      	ldr	r1, [r4, #4]
   b9110:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b9114:	6861      	ldr	r1, [r4, #4]
   b9116:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b911a:	6861      	ldr	r1, [r4, #4]
   b911c:	5ccb      	ldrb	r3, [r1, r3]
   b911e:	5c8a      	ldrb	r2, [r1, r2]
   b9120:	5c09      	ldrb	r1, [r1, r0]
   b9122:	4620      	mov	r0, r4
   b9124:	f7ff ff9d 	bl	b9062 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b9128:	3601      	adds	r6, #1
   b912a:	e7e1      	b.n	b90f0 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b912c:	4620      	mov	r0, r4
   b912e:	2100      	movs	r1, #0
   b9130:	f7ff ff82 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9134:	4620      	mov	r0, r4
   b9136:	2100      	movs	r1, #0
   b9138:	f7ff ff7e 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b913c:	4620      	mov	r0, r4
   b913e:	2100      	movs	r1, #0
   b9140:	f7ff ff7a 	bl	b9038 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9144:	4620      	mov	r0, r4
   b9146:	2100      	movs	r1, #0
}
   b9148:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b914c:	f7ff bf74 	b.w	b9038 <_ZN12ChainableLED8sendByteEh>

000b9150 <_ZN12ChainableLED4initEv>:
{
   b9150:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9152:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b9154:	2101      	movs	r1, #1
   b9156:	7800      	ldrb	r0, [r0, #0]
   b9158:	f001 fa1e 	bl	ba598 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b915c:	7860      	ldrb	r0, [r4, #1]
   b915e:	2101      	movs	r1, #1
   b9160:	f001 fa1a 	bl	ba598 <pinMode>
   b9164:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b9166:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b9168:	78a3      	ldrb	r3, [r4, #2]
   b916a:	b2e9      	uxtb	r1, r5
   b916c:	428b      	cmp	r3, r1
   b916e:	d907      	bls.n	b9180 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b9170:	2300      	movs	r3, #0
   b9172:	9600      	str	r6, [sp, #0]
   b9174:	461a      	mov	r2, r3
   b9176:	4620      	mov	r0, r4
   b9178:	f7ff ffa2 	bl	b90c0 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b917c:	3501      	adds	r5, #1
   b917e:	e7f3      	b.n	b9168 <_ZN12ChainableLED4initEv+0x18>
}
   b9180:	b002      	add	sp, #8
   b9182:	bd70      	pop	{r4, r5, r6, pc}

000b9184 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9184:	b508      	push	{r3, lr}
   b9186:	4b02      	ldr	r3, [pc, #8]	; (b9190 <netdb_freeaddrinfo+0xc>)
   b9188:	681b      	ldr	r3, [r3, #0]
   b918a:	689b      	ldr	r3, [r3, #8]
   b918c:	9301      	str	r3, [sp, #4]
   b918e:	bd08      	pop	{r3, pc}
   b9190:	00030268 	.word	0x00030268

000b9194 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9194:	b508      	push	{r3, lr}
   b9196:	4b02      	ldr	r3, [pc, #8]	; (b91a0 <netdb_getaddrinfo+0xc>)
   b9198:	681b      	ldr	r3, [r3, #0]
   b919a:	68db      	ldr	r3, [r3, #12]
   b919c:	9301      	str	r3, [sp, #4]
   b919e:	bd08      	pop	{r3, pc}
   b91a0:	00030268 	.word	0x00030268

000b91a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b91a4:	b508      	push	{r3, lr}
   b91a6:	4b02      	ldr	r3, [pc, #8]	; (b91b0 <HAL_Validate_Pin_Function+0xc>)
   b91a8:	681b      	ldr	r3, [r3, #0]
   b91aa:	685b      	ldr	r3, [r3, #4]
   b91ac:	9301      	str	r3, [sp, #4]
   b91ae:	bd08      	pop	{r3, pc}
   b91b0:	0003022c 	.word	0x0003022c

000b91b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b91b4:	b508      	push	{r3, lr}
   b91b6:	4b02      	ldr	r3, [pc, #8]	; (b91c0 <HAL_Pin_Mode+0xc>)
   b91b8:	681b      	ldr	r3, [r3, #0]
   b91ba:	689b      	ldr	r3, [r3, #8]
   b91bc:	9301      	str	r3, [sp, #4]
   b91be:	bd08      	pop	{r3, pc}
   b91c0:	0003022c 	.word	0x0003022c

000b91c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b91c4:	b508      	push	{r3, lr}
   b91c6:	4b02      	ldr	r3, [pc, #8]	; (b91d0 <HAL_Get_Pin_Mode+0xc>)
   b91c8:	681b      	ldr	r3, [r3, #0]
   b91ca:	68db      	ldr	r3, [r3, #12]
   b91cc:	9301      	str	r3, [sp, #4]
   b91ce:	bd08      	pop	{r3, pc}
   b91d0:	0003022c 	.word	0x0003022c

000b91d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b91d4:	b508      	push	{r3, lr}
   b91d6:	4b02      	ldr	r3, [pc, #8]	; (b91e0 <HAL_GPIO_Write+0xc>)
   b91d8:	681b      	ldr	r3, [r3, #0]
   b91da:	691b      	ldr	r3, [r3, #16]
   b91dc:	9301      	str	r3, [sp, #4]
   b91de:	bd08      	pop	{r3, pc}
   b91e0:	0003022c 	.word	0x0003022c

000b91e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b91e4:	b508      	push	{r3, lr}
   b91e6:	4b02      	ldr	r3, [pc, #8]	; (b91f0 <HAL_GPIO_Read+0xc>)
   b91e8:	681b      	ldr	r3, [r3, #0]
   b91ea:	695b      	ldr	r3, [r3, #20]
   b91ec:	9301      	str	r3, [sp, #4]
   b91ee:	bd08      	pop	{r3, pc}
   b91f0:	0003022c 	.word	0x0003022c

000b91f4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b91f4:	b508      	push	{r3, lr}
   b91f6:	4b02      	ldr	r3, [pc, #8]	; (b9200 <HAL_Interrupts_Enable_All+0xc>)
   b91f8:	681b      	ldr	r3, [r3, #0]
   b91fa:	6a1b      	ldr	r3, [r3, #32]
   b91fc:	9301      	str	r3, [sp, #4]
   b91fe:	bd08      	pop	{r3, pc}
   b9200:	0003022c 	.word	0x0003022c

000b9204 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b9204:	b508      	push	{r3, lr}
   b9206:	4b02      	ldr	r3, [pc, #8]	; (b9210 <HAL_Interrupts_Disable_All+0xc>)
   b9208:	681b      	ldr	r3, [r3, #0]
   b920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b920c:	9301      	str	r3, [sp, #4]
   b920e:	bd08      	pop	{r3, pc}
   b9210:	0003022c 	.word	0x0003022c

000b9214 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9214:	b508      	push	{r3, lr}
   b9216:	4b02      	ldr	r3, [pc, #8]	; (b9220 <hal_adc_read+0xc>)
   b9218:	681b      	ldr	r3, [r3, #0]
   b921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b921c:	9301      	str	r3, [sp, #4]
   b921e:	bd08      	pop	{r3, pc}
   b9220:	0003022c 	.word	0x0003022c

000b9224 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b9224:	b508      	push	{r3, lr}
   b9226:	4b02      	ldr	r3, [pc, #8]	; (b9230 <HAL_Pulse_In+0xc>)
   b9228:	681b      	ldr	r3, [r3, #0]
   b922a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b922c:	9301      	str	r3, [sp, #4]
   b922e:	bd08      	pop	{r3, pc}
   b9230:	0003022c 	.word	0x0003022c

000b9234 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9234:	b508      	push	{r3, lr}
   b9236:	4b02      	ldr	r3, [pc, #8]	; (b9240 <HAL_RNG_GetRandomNumber+0xc>)
   b9238:	681b      	ldr	r3, [r3, #0]
   b923a:	685b      	ldr	r3, [r3, #4]
   b923c:	9301      	str	r3, [sp, #4]
   b923e:	bd08      	pop	{r3, pc}
   b9240:	00030218 	.word	0x00030218

000b9244 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9244:	b508      	push	{r3, lr}
   b9246:	4b02      	ldr	r3, [pc, #8]	; (b9250 <HAL_Delay_Microseconds+0xc>)
   b9248:	681b      	ldr	r3, [r3, #0]
   b924a:	68db      	ldr	r3, [r3, #12]
   b924c:	9301      	str	r3, [sp, #4]
   b924e:	bd08      	pop	{r3, pc}
   b9250:	00030218 	.word	0x00030218

000b9254 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9254:	b508      	push	{r3, lr}
   b9256:	4b02      	ldr	r3, [pc, #8]	; (b9260 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9258:	681b      	ldr	r3, [r3, #0]
   b925a:	695b      	ldr	r3, [r3, #20]
   b925c:	9301      	str	r3, [sp, #4]
   b925e:	bd08      	pop	{r3, pc}
   b9260:	00030218 	.word	0x00030218

000b9264 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b9264:	b508      	push	{r3, lr}
   b9266:	4b02      	ldr	r3, [pc, #8]	; (b9270 <HAL_EEPROM_Init+0xc>)
   b9268:	681b      	ldr	r3, [r3, #0]
   b926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b926c:	9301      	str	r3, [sp, #4]
   b926e:	bd08      	pop	{r3, pc}
   b9270:	00030218 	.word	0x00030218

000b9274 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b9274:	b508      	push	{r3, lr}
   b9276:	4b02      	ldr	r3, [pc, #8]	; (b9280 <HAL_EEPROM_Read+0xc>)
   b9278:	681b      	ldr	r3, [r3, #0]
   b927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b927c:	9301      	str	r3, [sp, #4]
   b927e:	bd08      	pop	{r3, pc}
   b9280:	00030218 	.word	0x00030218

000b9284 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b9284:	b508      	push	{r3, lr}
   b9286:	4b02      	ldr	r3, [pc, #8]	; (b9290 <HAL_EEPROM_Put+0xc>)
   b9288:	681b      	ldr	r3, [r3, #0]
   b928a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b928c:	9301      	str	r3, [sp, #4]
   b928e:	bd08      	pop	{r3, pc}
   b9290:	00030218 	.word	0x00030218

000b9294 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9294:	b508      	push	{r3, lr}
   b9296:	4b02      	ldr	r3, [pc, #8]	; (b92a0 <os_mutex_recursive_create+0xc>)
   b9298:	681b      	ldr	r3, [r3, #0]
   b929a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b929c:	9301      	str	r3, [sp, #4]
   b929e:	bd08      	pop	{r3, pc}
   b92a0:	00030248 	.word	0x00030248

000b92a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b92a4:	b508      	push	{r3, lr}
   b92a6:	4b02      	ldr	r3, [pc, #8]	; (b92b0 <inet_inet_ntop+0xc>)
   b92a8:	681b      	ldr	r3, [r3, #0]
   b92aa:	695b      	ldr	r3, [r3, #20]
   b92ac:	9301      	str	r3, [sp, #4]
   b92ae:	bd08      	pop	{r3, pc}
   b92b0:	00030264 	.word	0x00030264

000b92b4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b92b4:	b508      	push	{r3, lr}
   b92b6:	4b02      	ldr	r3, [pc, #8]	; (b92c0 <hal_usart_write+0xc>)
   b92b8:	681b      	ldr	r3, [r3, #0]
   b92ba:	68db      	ldr	r3, [r3, #12]
   b92bc:	9301      	str	r3, [sp, #4]
   b92be:	bd08      	pop	{r3, pc}
   b92c0:	0003023c 	.word	0x0003023c

000b92c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b92c4:	b508      	push	{r3, lr}
   b92c6:	4b02      	ldr	r3, [pc, #8]	; (b92d0 <hal_usart_available+0xc>)
   b92c8:	681b      	ldr	r3, [r3, #0]
   b92ca:	691b      	ldr	r3, [r3, #16]
   b92cc:	9301      	str	r3, [sp, #4]
   b92ce:	bd08      	pop	{r3, pc}
   b92d0:	0003023c 	.word	0x0003023c

000b92d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b92d4:	b508      	push	{r3, lr}
   b92d6:	4b02      	ldr	r3, [pc, #8]	; (b92e0 <hal_usart_read+0xc>)
   b92d8:	681b      	ldr	r3, [r3, #0]
   b92da:	695b      	ldr	r3, [r3, #20]
   b92dc:	9301      	str	r3, [sp, #4]
   b92de:	bd08      	pop	{r3, pc}
   b92e0:	0003023c 	.word	0x0003023c

000b92e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b92e4:	b508      	push	{r3, lr}
   b92e6:	4b02      	ldr	r3, [pc, #8]	; (b92f0 <hal_usart_peek+0xc>)
   b92e8:	681b      	ldr	r3, [r3, #0]
   b92ea:	699b      	ldr	r3, [r3, #24]
   b92ec:	9301      	str	r3, [sp, #4]
   b92ee:	bd08      	pop	{r3, pc}
   b92f0:	0003023c 	.word	0x0003023c

000b92f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b92f4:	b508      	push	{r3, lr}
   b92f6:	4b02      	ldr	r3, [pc, #8]	; (b9300 <hal_usart_flush+0xc>)
   b92f8:	681b      	ldr	r3, [r3, #0]
   b92fa:	69db      	ldr	r3, [r3, #28]
   b92fc:	9301      	str	r3, [sp, #4]
   b92fe:	bd08      	pop	{r3, pc}
   b9300:	0003023c 	.word	0x0003023c

000b9304 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9304:	b508      	push	{r3, lr}
   b9306:	4b02      	ldr	r3, [pc, #8]	; (b9310 <hal_usart_is_enabled+0xc>)
   b9308:	681b      	ldr	r3, [r3, #0]
   b930a:	6a1b      	ldr	r3, [r3, #32]
   b930c:	9301      	str	r3, [sp, #4]
   b930e:	bd08      	pop	{r3, pc}
   b9310:	0003023c 	.word	0x0003023c

000b9314 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9314:	b508      	push	{r3, lr}
   b9316:	4b02      	ldr	r3, [pc, #8]	; (b9320 <hal_usart_available_data_for_write+0xc>)
   b9318:	681b      	ldr	r3, [r3, #0]
   b931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b931c:	9301      	str	r3, [sp, #4]
   b931e:	bd08      	pop	{r3, pc}
   b9320:	0003023c 	.word	0x0003023c

000b9324 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9324:	b508      	push	{r3, lr}
   b9326:	4b02      	ldr	r3, [pc, #8]	; (b9330 <hal_usart_init_ex+0xc>)
   b9328:	681b      	ldr	r3, [r3, #0]
   b932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b932c:	9301      	str	r3, [sp, #4]
   b932e:	bd08      	pop	{r3, pc}
   b9330:	0003023c 	.word	0x0003023c

000b9334 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9334:	b508      	push	{r3, lr}
   b9336:	4b02      	ldr	r3, [pc, #8]	; (b9340 <hal_i2c_set_speed+0xc>)
   b9338:	681b      	ldr	r3, [r3, #0]
   b933a:	681b      	ldr	r3, [r3, #0]
   b933c:	9301      	str	r3, [sp, #4]
   b933e:	bd08      	pop	{r3, pc}
   b9340:	00030228 	.word	0x00030228

000b9344 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9344:	b508      	push	{r3, lr}
   b9346:	4b02      	ldr	r3, [pc, #8]	; (b9350 <hal_i2c_begin+0xc>)
   b9348:	681b      	ldr	r3, [r3, #0]
   b934a:	68db      	ldr	r3, [r3, #12]
   b934c:	9301      	str	r3, [sp, #4]
   b934e:	bd08      	pop	{r3, pc}
   b9350:	00030228 	.word	0x00030228

000b9354 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9354:	b508      	push	{r3, lr}
   b9356:	4b02      	ldr	r3, [pc, #8]	; (b9360 <hal_i2c_begin_transmission+0xc>)
   b9358:	681b      	ldr	r3, [r3, #0]
   b935a:	699b      	ldr	r3, [r3, #24]
   b935c:	9301      	str	r3, [sp, #4]
   b935e:	bd08      	pop	{r3, pc}
   b9360:	00030228 	.word	0x00030228

000b9364 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9364:	b508      	push	{r3, lr}
   b9366:	4b02      	ldr	r3, [pc, #8]	; (b9370 <hal_i2c_end_transmission+0xc>)
   b9368:	681b      	ldr	r3, [r3, #0]
   b936a:	69db      	ldr	r3, [r3, #28]
   b936c:	9301      	str	r3, [sp, #4]
   b936e:	bd08      	pop	{r3, pc}
   b9370:	00030228 	.word	0x00030228

000b9374 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9374:	b508      	push	{r3, lr}
   b9376:	4b02      	ldr	r3, [pc, #8]	; (b9380 <hal_i2c_write+0xc>)
   b9378:	681b      	ldr	r3, [r3, #0]
   b937a:	6a1b      	ldr	r3, [r3, #32]
   b937c:	9301      	str	r3, [sp, #4]
   b937e:	bd08      	pop	{r3, pc}
   b9380:	00030228 	.word	0x00030228

000b9384 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9384:	b508      	push	{r3, lr}
   b9386:	4b02      	ldr	r3, [pc, #8]	; (b9390 <hal_i2c_available+0xc>)
   b9388:	681b      	ldr	r3, [r3, #0]
   b938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b938c:	9301      	str	r3, [sp, #4]
   b938e:	bd08      	pop	{r3, pc}
   b9390:	00030228 	.word	0x00030228

000b9394 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9394:	b508      	push	{r3, lr}
   b9396:	4b02      	ldr	r3, [pc, #8]	; (b93a0 <hal_i2c_read+0xc>)
   b9398:	681b      	ldr	r3, [r3, #0]
   b939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b939c:	9301      	str	r3, [sp, #4]
   b939e:	bd08      	pop	{r3, pc}
   b93a0:	00030228 	.word	0x00030228

000b93a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b93a4:	b508      	push	{r3, lr}
   b93a6:	4b02      	ldr	r3, [pc, #8]	; (b93b0 <hal_i2c_peek+0xc>)
   b93a8:	681b      	ldr	r3, [r3, #0]
   b93aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b93ac:	9301      	str	r3, [sp, #4]
   b93ae:	bd08      	pop	{r3, pc}
   b93b0:	00030228 	.word	0x00030228

000b93b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b93b4:	b508      	push	{r3, lr}
   b93b6:	4b02      	ldr	r3, [pc, #8]	; (b93c0 <hal_i2c_flush+0xc>)
   b93b8:	681b      	ldr	r3, [r3, #0]
   b93ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b93bc:	9301      	str	r3, [sp, #4]
   b93be:	bd08      	pop	{r3, pc}
   b93c0:	00030228 	.word	0x00030228

000b93c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b93c4:	b508      	push	{r3, lr}
   b93c6:	4b02      	ldr	r3, [pc, #8]	; (b93d0 <hal_i2c_is_enabled+0xc>)
   b93c8:	681b      	ldr	r3, [r3, #0]
   b93ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b93cc:	9301      	str	r3, [sp, #4]
   b93ce:	bd08      	pop	{r3, pc}
   b93d0:	00030228 	.word	0x00030228

000b93d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b93d4:	b508      	push	{r3, lr}
   b93d6:	4b02      	ldr	r3, [pc, #8]	; (b93e0 <hal_i2c_init+0xc>)
   b93d8:	681b      	ldr	r3, [r3, #0]
   b93da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b93dc:	9301      	str	r3, [sp, #4]
   b93de:	bd08      	pop	{r3, pc}
   b93e0:	00030228 	.word	0x00030228

000b93e4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b93e4:	b508      	push	{r3, lr}
   b93e6:	4b02      	ldr	r3, [pc, #8]	; (b93f0 <hal_spi_begin+0xc>)
   b93e8:	681b      	ldr	r3, [r3, #0]
   b93ea:	681b      	ldr	r3, [r3, #0]
   b93ec:	9301      	str	r3, [sp, #4]
   b93ee:	bd08      	pop	{r3, pc}
   b93f0:	00030230 	.word	0x00030230

000b93f4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b93f4:	b508      	push	{r3, lr}
   b93f6:	4b02      	ldr	r3, [pc, #8]	; (b9400 <hal_spi_transfer+0xc>)
   b93f8:	681b      	ldr	r3, [r3, #0]
   b93fa:	695b      	ldr	r3, [r3, #20]
   b93fc:	9301      	str	r3, [sp, #4]
   b93fe:	bd08      	pop	{r3, pc}
   b9400:	00030230 	.word	0x00030230

000b9404 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9404:	b508      	push	{r3, lr}
   b9406:	4b02      	ldr	r3, [pc, #8]	; (b9410 <hal_spi_init+0xc>)
   b9408:	681b      	ldr	r3, [r3, #0]
   b940a:	69db      	ldr	r3, [r3, #28]
   b940c:	9301      	str	r3, [sp, #4]
   b940e:	bd08      	pop	{r3, pc}
   b9410:	00030230 	.word	0x00030230

000b9414 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9414:	b508      	push	{r3, lr}
   b9416:	4b02      	ldr	r3, [pc, #8]	; (b9420 <hal_spi_is_enabled+0xc>)
   b9418:	681b      	ldr	r3, [r3, #0]
   b941a:	6a1b      	ldr	r3, [r3, #32]
   b941c:	9301      	str	r3, [sp, #4]
   b941e:	bd08      	pop	{r3, pc}
   b9420:	00030230 	.word	0x00030230

000b9424 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9424:	b508      	push	{r3, lr}
   b9426:	4b02      	ldr	r3, [pc, #8]	; (b9430 <hal_spi_info+0xc>)
   b9428:	681b      	ldr	r3, [r3, #0]
   b942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b942c:	9301      	str	r3, [sp, #4]
   b942e:	bd08      	pop	{r3, pc}
   b9430:	00030230 	.word	0x00030230

000b9434 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9434:	b508      	push	{r3, lr}
   b9436:	4b02      	ldr	r3, [pc, #8]	; (b9440 <hal_spi_set_settings+0xc>)
   b9438:	681b      	ldr	r3, [r3, #0]
   b943a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b943c:	9301      	str	r3, [sp, #4]
   b943e:	bd08      	pop	{r3, pc}
   b9440:	00030230 	.word	0x00030230

000b9444 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9444:	b508      	push	{r3, lr}
   b9446:	4b02      	ldr	r3, [pc, #8]	; (b9450 <hal_spi_acquire+0xc>)
   b9448:	681b      	ldr	r3, [r3, #0]
   b944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b944c:	9301      	str	r3, [sp, #4]
   b944e:	bd08      	pop	{r3, pc}
   b9450:	00030230 	.word	0x00030230

000b9454 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9454:	b508      	push	{r3, lr}
   b9456:	4b02      	ldr	r3, [pc, #8]	; (b9460 <hal_spi_release+0xc>)
   b9458:	681b      	ldr	r3, [r3, #0]
   b945a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b945c:	9301      	str	r3, [sp, #4]
   b945e:	bd08      	pop	{r3, pc}
   b9460:	00030230 	.word	0x00030230

000b9464 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b9464:	b508      	push	{r3, lr}
   b9466:	4b02      	ldr	r3, [pc, #8]	; (b9470 <HAL_Tone_Start+0xc>)
   b9468:	681b      	ldr	r3, [r3, #0]
   b946a:	681b      	ldr	r3, [r3, #0]
   b946c:	9301      	str	r3, [sp, #4]
   b946e:	bd08      	pop	{r3, pc}
   b9470:	00030224 	.word	0x00030224

000b9474 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b9474:	b508      	push	{r3, lr}
   b9476:	4b02      	ldr	r3, [pc, #8]	; (b9480 <HAL_Tone_Stop+0xc>)
   b9478:	681b      	ldr	r3, [r3, #0]
   b947a:	685b      	ldr	r3, [r3, #4]
   b947c:	9301      	str	r3, [sp, #4]
   b947e:	bd08      	pop	{r3, pc}
   b9480:	00030224 	.word	0x00030224

000b9484 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9484:	b508      	push	{r3, lr}
   b9486:	4b02      	ldr	r3, [pc, #8]	; (b9490 <HAL_USB_USART_Init+0xc>)
   b9488:	681b      	ldr	r3, [r3, #0]
   b948a:	681b      	ldr	r3, [r3, #0]
   b948c:	9301      	str	r3, [sp, #4]
   b948e:	bd08      	pop	{r3, pc}
   b9490:	0003024c 	.word	0x0003024c

000b9494 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9494:	b508      	push	{r3, lr}
   b9496:	4b02      	ldr	r3, [pc, #8]	; (b94a0 <HAL_USB_USART_Begin+0xc>)
   b9498:	681b      	ldr	r3, [r3, #0]
   b949a:	685b      	ldr	r3, [r3, #4]
   b949c:	9301      	str	r3, [sp, #4]
   b949e:	bd08      	pop	{r3, pc}
   b94a0:	0003024c 	.word	0x0003024c

000b94a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b94a4:	b508      	push	{r3, lr}
   b94a6:	4b02      	ldr	r3, [pc, #8]	; (b94b0 <HAL_USB_USART_Available_Data+0xc>)
   b94a8:	681b      	ldr	r3, [r3, #0]
   b94aa:	691b      	ldr	r3, [r3, #16]
   b94ac:	9301      	str	r3, [sp, #4]
   b94ae:	bd08      	pop	{r3, pc}
   b94b0:	0003024c 	.word	0x0003024c

000b94b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b94b4:	b508      	push	{r3, lr}
   b94b6:	4b02      	ldr	r3, [pc, #8]	; (b94c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b94b8:	681b      	ldr	r3, [r3, #0]
   b94ba:	695b      	ldr	r3, [r3, #20]
   b94bc:	9301      	str	r3, [sp, #4]
   b94be:	bd08      	pop	{r3, pc}
   b94c0:	0003024c 	.word	0x0003024c

000b94c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b94c4:	b508      	push	{r3, lr}
   b94c6:	4b02      	ldr	r3, [pc, #8]	; (b94d0 <HAL_USB_USART_Receive_Data+0xc>)
   b94c8:	681b      	ldr	r3, [r3, #0]
   b94ca:	699b      	ldr	r3, [r3, #24]
   b94cc:	9301      	str	r3, [sp, #4]
   b94ce:	bd08      	pop	{r3, pc}
   b94d0:	0003024c 	.word	0x0003024c

000b94d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b94d4:	b508      	push	{r3, lr}
   b94d6:	4b02      	ldr	r3, [pc, #8]	; (b94e0 <HAL_USB_USART_Send_Data+0xc>)
   b94d8:	681b      	ldr	r3, [r3, #0]
   b94da:	69db      	ldr	r3, [r3, #28]
   b94dc:	9301      	str	r3, [sp, #4]
   b94de:	bd08      	pop	{r3, pc}
   b94e0:	0003024c 	.word	0x0003024c

000b94e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b94e4:	b508      	push	{r3, lr}
   b94e6:	4b02      	ldr	r3, [pc, #8]	; (b94f0 <HAL_USB_USART_Flush_Data+0xc>)
   b94e8:	681b      	ldr	r3, [r3, #0]
   b94ea:	6a1b      	ldr	r3, [r3, #32]
   b94ec:	9301      	str	r3, [sp, #4]
   b94ee:	bd08      	pop	{r3, pc}
   b94f0:	0003024c 	.word	0x0003024c

000b94f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b94f4:	b508      	push	{r3, lr}
   b94f6:	4b02      	ldr	r3, [pc, #8]	; (b9500 <panic_+0xc>)
   b94f8:	681b      	ldr	r3, [r3, #0]
   b94fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b94fc:	9301      	str	r3, [sp, #4]
   b94fe:	bd08      	pop	{r3, pc}
   b9500:	00030260 	.word	0x00030260

000b9504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9504:	b508      	push	{r3, lr}
   b9506:	4b02      	ldr	r3, [pc, #8]	; (b9510 <set_system_mode+0xc>)
   b9508:	681b      	ldr	r3, [r3, #0]
   b950a:	685b      	ldr	r3, [r3, #4]
   b950c:	9301      	str	r3, [sp, #4]
   b950e:	bd08      	pop	{r3, pc}
   b9510:	00030220 	.word	0x00030220

000b9514 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9514:	b508      	push	{r3, lr}
   b9516:	4b02      	ldr	r3, [pc, #8]	; (b9520 <system_delay_ms+0xc>)
   b9518:	681b      	ldr	r3, [r3, #0]
   b951a:	695b      	ldr	r3, [r3, #20]
   b951c:	9301      	str	r3, [sp, #4]
   b951e:	bd08      	pop	{r3, pc}
   b9520:	00030220 	.word	0x00030220

000b9524 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9524:	b508      	push	{r3, lr}
   b9526:	4b03      	ldr	r3, [pc, #12]	; (b9534 <system_ctrl_set_app_request_handler+0x10>)
   b9528:	681b      	ldr	r3, [r3, #0]
   b952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b952e:	9301      	str	r3, [sp, #4]
   b9530:	bd08      	pop	{r3, pc}
   b9532:	0000      	.short	0x0000
   b9534:	00030220 	.word	0x00030220

000b9538 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9538:	b508      	push	{r3, lr}
   b953a:	4b03      	ldr	r3, [pc, #12]	; (b9548 <system_ctrl_set_result+0x10>)
   b953c:	681b      	ldr	r3, [r3, #0]
   b953e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9542:	9301      	str	r3, [sp, #4]
   b9544:	bd08      	pop	{r3, pc}
   b9546:	0000      	.short	0x0000
   b9548:	00030220 	.word	0x00030220

000b954c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b954c:	b508      	push	{r3, lr}
   b954e:	4b02      	ldr	r3, [pc, #8]	; (b9558 <network_connect+0xc>)
   b9550:	681b      	ldr	r3, [r3, #0]
   b9552:	685b      	ldr	r3, [r3, #4]
   b9554:	9301      	str	r3, [sp, #4]
   b9556:	bd08      	pop	{r3, pc}
   b9558:	00030240 	.word	0x00030240

000b955c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b955c:	b508      	push	{r3, lr}
   b955e:	4b02      	ldr	r3, [pc, #8]	; (b9568 <network_connecting+0xc>)
   b9560:	681b      	ldr	r3, [r3, #0]
   b9562:	689b      	ldr	r3, [r3, #8]
   b9564:	9301      	str	r3, [sp, #4]
   b9566:	bd08      	pop	{r3, pc}
   b9568:	00030240 	.word	0x00030240

000b956c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b956c:	b508      	push	{r3, lr}
   b956e:	4b02      	ldr	r3, [pc, #8]	; (b9578 <network_disconnect+0xc>)
   b9570:	681b      	ldr	r3, [r3, #0]
   b9572:	68db      	ldr	r3, [r3, #12]
   b9574:	9301      	str	r3, [sp, #4]
   b9576:	bd08      	pop	{r3, pc}
   b9578:	00030240 	.word	0x00030240

000b957c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b957c:	b508      	push	{r3, lr}
   b957e:	4b02      	ldr	r3, [pc, #8]	; (b9588 <network_ready+0xc>)
   b9580:	681b      	ldr	r3, [r3, #0]
   b9582:	691b      	ldr	r3, [r3, #16]
   b9584:	9301      	str	r3, [sp, #4]
   b9586:	bd08      	pop	{r3, pc}
   b9588:	00030240 	.word	0x00030240

000b958c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b958c:	b508      	push	{r3, lr}
   b958e:	4b02      	ldr	r3, [pc, #8]	; (b9598 <network_on+0xc>)
   b9590:	681b      	ldr	r3, [r3, #0]
   b9592:	695b      	ldr	r3, [r3, #20]
   b9594:	9301      	str	r3, [sp, #4]
   b9596:	bd08      	pop	{r3, pc}
   b9598:	00030240 	.word	0x00030240

000b959c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b959c:	b508      	push	{r3, lr}
   b959e:	4b02      	ldr	r3, [pc, #8]	; (b95a8 <network_off+0xc>)
   b95a0:	681b      	ldr	r3, [r3, #0]
   b95a2:	699b      	ldr	r3, [r3, #24]
   b95a4:	9301      	str	r3, [sp, #4]
   b95a6:	bd08      	pop	{r3, pc}
   b95a8:	00030240 	.word	0x00030240

000b95ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b95ac:	b508      	push	{r3, lr}
   b95ae:	4b02      	ldr	r3, [pc, #8]	; (b95b8 <network_listen+0xc>)
   b95b0:	681b      	ldr	r3, [r3, #0]
   b95b2:	69db      	ldr	r3, [r3, #28]
   b95b4:	9301      	str	r3, [sp, #4]
   b95b6:	bd08      	pop	{r3, pc}
   b95b8:	00030240 	.word	0x00030240

000b95bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b95bc:	b508      	push	{r3, lr}
   b95be:	4b02      	ldr	r3, [pc, #8]	; (b95c8 <network_listening+0xc>)
   b95c0:	681b      	ldr	r3, [r3, #0]
   b95c2:	6a1b      	ldr	r3, [r3, #32]
   b95c4:	9301      	str	r3, [sp, #4]
   b95c6:	bd08      	pop	{r3, pc}
   b95c8:	00030240 	.word	0x00030240

000b95cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b95cc:	b508      	push	{r3, lr}
   b95ce:	4b02      	ldr	r3, [pc, #8]	; (b95d8 <network_set_listen_timeout+0xc>)
   b95d0:	681b      	ldr	r3, [r3, #0]
   b95d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b95d4:	9301      	str	r3, [sp, #4]
   b95d6:	bd08      	pop	{r3, pc}
   b95d8:	00030240 	.word	0x00030240

000b95dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b95dc:	b508      	push	{r3, lr}
   b95de:	4b02      	ldr	r3, [pc, #8]	; (b95e8 <network_get_listen_timeout+0xc>)
   b95e0:	681b      	ldr	r3, [r3, #0]
   b95e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b95e4:	9301      	str	r3, [sp, #4]
   b95e6:	bd08      	pop	{r3, pc}
   b95e8:	00030240 	.word	0x00030240

000b95ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b95ec:	b508      	push	{r3, lr}
   b95ee:	4b02      	ldr	r3, [pc, #8]	; (b95f8 <network_is_on+0xc>)
   b95f0:	681b      	ldr	r3, [r3, #0]
   b95f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b95f4:	9301      	str	r3, [sp, #4]
   b95f6:	bd08      	pop	{r3, pc}
   b95f8:	00030240 	.word	0x00030240

000b95fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b95fc:	b508      	push	{r3, lr}
   b95fe:	4b02      	ldr	r3, [pc, #8]	; (b9608 <network_is_off+0xc>)
   b9600:	681b      	ldr	r3, [r3, #0]
   b9602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9604:	9301      	str	r3, [sp, #4]
   b9606:	bd08      	pop	{r3, pc}
   b9608:	00030240 	.word	0x00030240

000b960c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b960c:	b508      	push	{r3, lr}
   b960e:	4b02      	ldr	r3, [pc, #8]	; (b9618 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9610:	681b      	ldr	r3, [r3, #0]
   b9612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9614:	9301      	str	r3, [sp, #4]
   b9616:	bd08      	pop	{r3, pc}
   b9618:	00030244 	.word	0x00030244

000b961c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b961c:	b508      	push	{r3, lr}
   b961e:	4b02      	ldr	r3, [pc, #8]	; (b9628 <spark_cloud_disconnect+0xc>)
   b9620:	681b      	ldr	r3, [r3, #0]
   b9622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9624:	9301      	str	r3, [sp, #4]
   b9626:	bd08      	pop	{r3, pc}
   b9628:	00030244 	.word	0x00030244

000b962c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b962c:	b508      	push	{r3, lr}
   b962e:	4b02      	ldr	r3, [pc, #8]	; (b9638 <malloc+0xc>)
   b9630:	681b      	ldr	r3, [r3, #0]
   b9632:	681b      	ldr	r3, [r3, #0]
   b9634:	9301      	str	r3, [sp, #4]
   b9636:	bd08      	pop	{r3, pc}
   b9638:	0003021c 	.word	0x0003021c

000b963c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b963c:	b508      	push	{r3, lr}
   b963e:	4b02      	ldr	r3, [pc, #8]	; (b9648 <free+0xc>)
   b9640:	681b      	ldr	r3, [r3, #0]
   b9642:	685b      	ldr	r3, [r3, #4]
   b9644:	9301      	str	r3, [sp, #4]
   b9646:	bd08      	pop	{r3, pc}
   b9648:	0003021c 	.word	0x0003021c

000b964c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b964c:	b508      	push	{r3, lr}
   b964e:	4b02      	ldr	r3, [pc, #8]	; (b9658 <realloc+0xc>)
   b9650:	681b      	ldr	r3, [r3, #0]
   b9652:	689b      	ldr	r3, [r3, #8]
   b9654:	9301      	str	r3, [sp, #4]
   b9656:	bd08      	pop	{r3, pc}
   b9658:	0003021c 	.word	0x0003021c

000b965c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b965c:	b508      	push	{r3, lr}
   b965e:	4b02      	ldr	r3, [pc, #8]	; (b9668 <snprintf+0xc>)
   b9660:	681b      	ldr	r3, [r3, #0]
   b9662:	69db      	ldr	r3, [r3, #28]
   b9664:	9301      	str	r3, [sp, #4]
   b9666:	bd08      	pop	{r3, pc}
   b9668:	0003021c 	.word	0x0003021c

000b966c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b966c:	b508      	push	{r3, lr}
   b966e:	4b02      	ldr	r3, [pc, #8]	; (b9678 <vsnprintf+0xc>)
   b9670:	681b      	ldr	r3, [r3, #0]
   b9672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9674:	9301      	str	r3, [sp, #4]
   b9676:	bd08      	pop	{r3, pc}
   b9678:	0003021c 	.word	0x0003021c

000b967c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b967c:	b508      	push	{r3, lr}
   b967e:	4b02      	ldr	r3, [pc, #8]	; (b9688 <_malloc_r+0xc>)
   b9680:	681b      	ldr	r3, [r3, #0]
   b9682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9684:	9301      	str	r3, [sp, #4]
   b9686:	bd08      	pop	{r3, pc}
   b9688:	0003021c 	.word	0x0003021c

000b968c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b968c:	b508      	push	{r3, lr}
   b968e:	4b02      	ldr	r3, [pc, #8]	; (b9698 <__assert_func+0xc>)
   b9690:	681b      	ldr	r3, [r3, #0]
   b9692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9694:	9301      	str	r3, [sp, #4]
   b9696:	bd08      	pop	{r3, pc}
   b9698:	0003021c 	.word	0x0003021c

000b969c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b969c:	b508      	push	{r3, lr}
   b969e:	4b02      	ldr	r3, [pc, #8]	; (b96a8 <newlib_impure_ptr_callback+0xc>)
   b96a0:	681b      	ldr	r3, [r3, #0]
   b96a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b96a4:	9301      	str	r3, [sp, #4]
   b96a6:	bd08      	pop	{r3, pc}
   b96a8:	0003021c 	.word	0x0003021c

000b96ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b96ac:	2200      	movs	r2, #0
   b96ae:	6840      	ldr	r0, [r0, #4]
   b96b0:	4611      	mov	r1, r2
   b96b2:	f7ff bf83 	b.w	b95bc <network_listening>

000b96b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b96b6:	2200      	movs	r2, #0
   b96b8:	6840      	ldr	r0, [r0, #4]
   b96ba:	4611      	mov	r1, r2
   b96bc:	f7ff bf8e 	b.w	b95dc <network_get_listen_timeout>

000b96c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b96c0:	6840      	ldr	r0, [r0, #4]
   b96c2:	2200      	movs	r2, #0
   b96c4:	f7ff bf82 	b.w	b95cc <network_set_listen_timeout>

000b96c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b96c8:	6840      	ldr	r0, [r0, #4]
   b96ca:	2200      	movs	r2, #0
   b96cc:	f081 0101 	eor.w	r1, r1, #1
   b96d0:	f7ff bf6c 	b.w	b95ac <network_listen>

000b96d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b96d4:	2300      	movs	r3, #0
   b96d6:	6840      	ldr	r0, [r0, #4]
   b96d8:	461a      	mov	r2, r3
   b96da:	4619      	mov	r1, r3
   b96dc:	f7ff bf5e 	b.w	b959c <network_off>

000b96e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b96e0:	2300      	movs	r3, #0
   b96e2:	6840      	ldr	r0, [r0, #4]
   b96e4:	461a      	mov	r2, r3
   b96e6:	4619      	mov	r1, r3
   b96e8:	f7ff bf50 	b.w	b958c <network_on>

000b96ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b96ec:	2200      	movs	r2, #0
   b96ee:	6840      	ldr	r0, [r0, #4]
   b96f0:	4611      	mov	r1, r2
   b96f2:	f7ff bf43 	b.w	b957c <network_ready>

000b96f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b96f6:	2200      	movs	r2, #0
   b96f8:	6840      	ldr	r0, [r0, #4]
   b96fa:	4611      	mov	r1, r2
   b96fc:	f7ff bf2e 	b.w	b955c <network_connecting>

000b9700 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9700:	6840      	ldr	r0, [r0, #4]
   b9702:	2200      	movs	r2, #0
   b9704:	2102      	movs	r1, #2
   b9706:	f7ff bf31 	b.w	b956c <network_disconnect>

000b970a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b970a:	2300      	movs	r3, #0
   b970c:	6840      	ldr	r0, [r0, #4]
   b970e:	461a      	mov	r2, r3
   b9710:	f7ff bf1c 	b.w	b954c <network_connect>

000b9714 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9714:	4b02      	ldr	r3, [pc, #8]	; (b9720 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9716:	2203      	movs	r2, #3
   b9718:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b971a:	4a02      	ldr	r2, [pc, #8]	; (b9724 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b971c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b971e:	4770      	bx	lr
   b9720:	2003e6bc 	.word	0x2003e6bc
   b9724:	000bcf94 	.word	0x000bcf94

000b9728 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b9728:	2100      	movs	r1, #0
   b972a:	f7ff be93 	b.w	b9454 <hal_spi_release>

000b972e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b972e:	2100      	movs	r1, #0
   b9730:	f7ff be88 	b.w	b9444 <hal_spi_acquire>

000b9734 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9734:	b510      	push	{r4, lr}
   b9736:	4604      	mov	r4, r0
   b9738:	4608      	mov	r0, r1
{
    _spi = spi;
   b973a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b973c:	f7ff fe62 	bl	b9404 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9740:	2300      	movs	r3, #0
   b9742:	6063      	str	r3, [r4, #4]
}
   b9744:	4620      	mov	r0, r4
   b9746:	bd10      	pop	{r4, pc}

000b9748 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b9748:	b513      	push	{r0, r1, r4, lr}
   b974a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b974c:	7800      	ldrb	r0, [r0, #0]
   b974e:	f7ff ffee 	bl	b972e <_ZN8SPIClass4lockEv.isra.0>
   b9752:	b958      	cbnz	r0, b976c <_ZN8SPIClass5beginEv+0x24>
   b9754:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b9756:	9001      	str	r0, [sp, #4]
   b9758:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b975c:	f7ff fe42 	bl	b93e4 <hal_spi_begin>
        unlock();
   b9760:	9801      	ldr	r0, [sp, #4]
    }
}
   b9762:	b002      	add	sp, #8
   b9764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9768:	f7ff bfde 	b.w	b9728 <_ZN8SPIClass6unlockEv.isra.0>
   b976c:	b002      	add	sp, #8
   b976e:	bd10      	pop	{r4, pc}

000b9770 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b9770:	7800      	ldrb	r0, [r0, #0]
   b9772:	f7ff bfd9 	b.w	b9728 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b9778 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b9778:	0840      	lsrs	r0, r0, #1
{
   b977a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b977c:	6018      	str	r0, [r3, #0]
   b977e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b9780:	6818      	ldr	r0, [r3, #0]
   b9782:	4288      	cmp	r0, r1
   b9784:	b2e5      	uxtb	r5, r4
   b9786:	d906      	bls.n	b9796 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b9788:	3401      	adds	r4, #1
   b978a:	2c08      	cmp	r4, #8
   b978c:	d002      	beq.n	b9794 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b978e:	0840      	lsrs	r0, r0, #1
   b9790:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b9792:	e7f5      	b.n	b9780 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b9794:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b9796:	4b02      	ldr	r3, [pc, #8]	; (b97a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b9798:	5d5b      	ldrb	r3, [r3, r5]
   b979a:	7013      	strb	r3, [r2, #0]
}
   b979c:	bd30      	pop	{r4, r5, pc}
   b979e:	bf00      	nop
   b97a0:	000bcfc8 	.word	0x000bcfc8

000b97a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b97a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b97a8:	4606      	mov	r6, r0
   b97aa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b97ac:	7800      	ldrb	r0, [r0, #0]
{
   b97ae:	460c      	mov	r4, r1
    CHECK(lock());
   b97b0:	f7ff ffbd 	bl	b972e <_ZN8SPIClass4lockEv.isra.0>
   b97b4:	2800      	cmp	r0, #0
   b97b6:	db1b      	blt.n	b97f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b97b8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b97ba:	2214      	movs	r2, #20
   b97bc:	2100      	movs	r1, #0
   b97be:	a809      	add	r0, sp, #36	; 0x24
   b97c0:	f001 fcf4 	bl	bb1ac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b97c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b97c6:	2200      	movs	r2, #0
   b97c8:	a909      	add	r1, sp, #36	; 0x24
   b97ca:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b97cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b97d0:	f7ff fe28 	bl	b9424 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b97d4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b97d8:	b113      	cbz	r3, b97e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b97da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b97de:	b155      	cbz	r5, b97f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b97e0:	2700      	movs	r7, #0
   b97e2:	46b9      	mov	r9, r7
   b97e4:	46b8      	mov	r8, r7
   b97e6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b97e8:	7923      	ldrb	r3, [r4, #4]
   b97ea:	b15d      	cbz	r5, b9804 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b97ec:	b1c3      	cbz	r3, b9820 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b97ee:	2000      	movs	r0, #0
}
   b97f0:	b00f      	add	sp, #60	; 0x3c
   b97f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b97f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b97fa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b97fe:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b9802:	e7f1      	b.n	b97e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9804:	2b00      	cmp	r3, #0
   b9806:	d135      	bne.n	b9874 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b9808:	68a3      	ldr	r3, [r4, #8]
   b980a:	4543      	cmp	r3, r8
   b980c:	d108      	bne.n	b9820 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b980e:	f88d 9020 	strb.w	r9, [sp, #32]
   b9812:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9816:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b981a:	89a3      	ldrh	r3, [r4, #12]
   b981c:	429a      	cmp	r2, r3
   b981e:	d0e6      	beq.n	b97ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b9820:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9822:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9824:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9828:	980a      	ldr	r0, [sp, #40]	; 0x28
   b982a:	ab04      	add	r3, sp, #16
   b982c:	f10d 020f 	add.w	r2, sp, #15
   b9830:	f7ff ffa2 	bl	b9778 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9834:	7921      	ldrb	r1, [r4, #4]
   b9836:	b985      	cbnz	r5, b985a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b9838:	b989      	cbnz	r1, b985e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b983a:	68a3      	ldr	r3, [r4, #8]
   b983c:	4543      	cmp	r3, r8
   b983e:	d30e      	bcc.n	b985e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b9840:	f88d 9020 	strb.w	r9, [sp, #32]
   b9844:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9848:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b984c:	89a3      	ldrh	r3, [r4, #12]
   b984e:	429a      	cmp	r2, r3
   b9850:	d105      	bne.n	b985e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b9852:	9b04      	ldr	r3, [sp, #16]
   b9854:	4543      	cmp	r3, r8
   b9856:	d102      	bne.n	b985e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9858:	e7c9      	b.n	b97ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b985a:	2900      	cmp	r1, #0
   b985c:	d1f9      	bne.n	b9852 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b985e:	2300      	movs	r3, #0
   b9860:	9301      	str	r3, [sp, #4]
   b9862:	7b63      	ldrb	r3, [r4, #13]
   b9864:	9300      	str	r3, [sp, #0]
   b9866:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b986a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b986c:	7830      	ldrb	r0, [r6, #0]
   b986e:	f7ff fde1 	bl	b9434 <hal_spi_set_settings>
   b9872:	e7bc      	b.n	b97ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b9874:	e9cd 5500 	strd	r5, r5, [sp]
   b9878:	462b      	mov	r3, r5
   b987a:	462a      	mov	r2, r5
   b987c:	2101      	movs	r1, #1
   b987e:	e7f5      	b.n	b986c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b9880 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b9880:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b9882:	7800      	ldrb	r0, [r0, #0]
   b9884:	f7ff fdb6 	bl	b93f4 <hal_spi_transfer>
}
   b9888:	b2c0      	uxtb	r0, r0
   b988a:	bd08      	pop	{r3, pc}

000b988c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b988c:	4b05      	ldr	r3, [pc, #20]	; (b98a4 <_GLOBAL__sub_I_System+0x18>)
   b988e:	2202      	movs	r2, #2
   b9890:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9892:	4b05      	ldr	r3, [pc, #20]	; (b98a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9894:	4a05      	ldr	r2, [pc, #20]	; (b98ac <_GLOBAL__sub_I_System+0x20>)
   b9896:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9898:	2000      	movs	r0, #0
   b989a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b989e:	f7ff be31 	b.w	b9504 <set_system_mode>
   b98a2:	bf00      	nop
   b98a4:	2003e6d0 	.word	0x2003e6d0
   b98a8:	2003e6c4 	.word	0x2003e6c4
   b98ac:	ffff0000 	.word	0xffff0000

000b98b0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b98b0:	b510      	push	{r4, lr}
   b98b2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b98b4:	f001 fcc8 	bl	bb248 <strlen>
   b98b8:	3801      	subs	r0, #1
   b98ba:	1823      	adds	r3, r4, r0
   b98bc:	4620      	mov	r0, r4
	while(i<j){
   b98be:	4283      	cmp	r3, r0
   b98c0:	d906      	bls.n	b98d0 <_Z11str_reversePc+0x20>
		c = *i;
   b98c2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b98c4:	7819      	ldrb	r1, [r3, #0]
   b98c6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b98ca:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b98ce:	e7f6      	b.n	b98be <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b98d0:	bd10      	pop	{r4, pc}

000b98d2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b98d2:	b570      	push	{r4, r5, r6, lr}
   b98d4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b98d6:	1e91      	subs	r1, r2, #2
   b98d8:	2922      	cmp	r1, #34	; 0x22
   b98da:	d81d      	bhi.n	b9918 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b98dc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b98de:	b930      	cbnz	r0, b98ee <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b98e0:	4423      	add	r3, r4
            *ptr++ = '0';
   b98e2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b98e4:	429d      	cmp	r5, r3
   b98e6:	d210      	bcs.n	b990a <ultoa+0x38>
            *ptr++ = '0';
   b98e8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b98ec:	e7fa      	b.n	b98e4 <ultoa+0x12>
            result.quot = a/radix;
   b98ee:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b98f2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b98f6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b98f8:	2809      	cmp	r0, #9
                *ptr += '0';
   b98fa:	bf94      	ite	ls
   b98fc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b98fe:	3157      	addhi	r1, #87	; 0x57
   b9900:	b2c9      	uxtb	r1, r1
   b9902:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9906:	4630      	mov	r0, r6
	while(a){
   b9908:	e7e9      	b.n	b98de <ultoa+0xc>

	*ptr = '\0';
   b990a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b990c:	4620      	mov	r0, r4
	*ptr = '\0';
   b990e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9910:	f7ff ffce 	bl	b98b0 <_Z11str_reversePc>
	return buffer;
   b9914:	4620      	mov	r0, r4
}
   b9916:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9918:	2000      	movs	r0, #0
   b991a:	e7fc      	b.n	b9916 <ultoa+0x44>

000b991c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b991c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b991e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9920:	460c      	mov	r4, r1
   b9922:	4615      	mov	r5, r2
	if(a<0){
   b9924:	da0e      	bge.n	b9944 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b992a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b992e:	bf14      	ite	ne
   b9930:	4258      	negne	r0, r3
   b9932:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9934:	2301      	movs	r3, #1
		*buffer = '-';
   b9936:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9938:	462a      	mov	r2, r5
   b993a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b993c:	f7ff ffc9 	bl	b98d2 <ultoa>
	}
	return buffer;
}
   b9940:	4620      	mov	r0, r4
   b9942:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9944:	2301      	movs	r3, #1
   b9946:	e7f9      	b.n	b993c <itoa+0x20>

000b9948 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9948:	b510      	push	{r4, lr}
   b994a:	4604      	mov	r4, r0
{
	free(buffer);
   b994c:	6800      	ldr	r0, [r0, #0]
   b994e:	f7ff fe75 	bl	b963c <free>
}
   b9952:	4620      	mov	r0, r4
   b9954:	bd10      	pop	{r4, pc}

000b9956 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9956:	b510      	push	{r4, lr}
   b9958:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b995a:	6800      	ldr	r0, [r0, #0]
   b995c:	b108      	cbz	r0, b9962 <_ZN6String10invalidateEv+0xc>
   b995e:	f7ff fe6d 	bl	b963c <free>
	buffer = NULL;
   b9962:	2300      	movs	r3, #0
	capacity = len = 0;
   b9964:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9968:	6023      	str	r3, [r4, #0]
}
   b996a:	bd10      	pop	{r4, pc}

000b996c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b996c:	b538      	push	{r3, r4, r5, lr}
   b996e:	4604      	mov	r4, r0
   b9970:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9972:	6800      	ldr	r0, [r0, #0]
   b9974:	3101      	adds	r1, #1
   b9976:	f7ff fe69 	bl	b964c <realloc>
	if (newbuffer) {
   b997a:	b110      	cbz	r0, b9982 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b997c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9980:	2001      	movs	r0, #1
	}
	return 0;
}
   b9982:	bd38      	pop	{r3, r4, r5, pc}

000b9984 <_ZN6String7reserveEj>:
{
   b9984:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9986:	6803      	ldr	r3, [r0, #0]
{
   b9988:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b998a:	b123      	cbz	r3, b9996 <_ZN6String7reserveEj+0x12>
   b998c:	6843      	ldr	r3, [r0, #4]
   b998e:	428b      	cmp	r3, r1
   b9990:	d301      	bcc.n	b9996 <_ZN6String7reserveEj+0x12>
   b9992:	2001      	movs	r0, #1
}
   b9994:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9996:	4620      	mov	r0, r4
   b9998:	f7ff ffe8 	bl	b996c <_ZN6String12changeBufferEj>
   b999c:	2800      	cmp	r0, #0
   b999e:	d0f9      	beq.n	b9994 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b99a0:	68a3      	ldr	r3, [r4, #8]
   b99a2:	2b00      	cmp	r3, #0
   b99a4:	d1f5      	bne.n	b9992 <_ZN6String7reserveEj+0xe>
   b99a6:	6822      	ldr	r2, [r4, #0]
   b99a8:	7013      	strb	r3, [r2, #0]
   b99aa:	e7f2      	b.n	b9992 <_ZN6String7reserveEj+0xe>

000b99ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b99ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b99ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b99b0:	4611      	mov	r1, r2
   b99b2:	9201      	str	r2, [sp, #4]
{
   b99b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b99b6:	f7ff ffe5 	bl	b9984 <_ZN6String7reserveEj>
   b99ba:	9a01      	ldr	r2, [sp, #4]
   b99bc:	b928      	cbnz	r0, b99ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b99be:	4620      	mov	r0, r4
   b99c0:	f7ff ffc9 	bl	b9956 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b99c4:	4620      	mov	r0, r4
   b99c6:	b003      	add	sp, #12
   b99c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b99ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b99cc:	4629      	mov	r1, r5
   b99ce:	6820      	ldr	r0, [r4, #0]
   b99d0:	f001 fbde 	bl	bb190 <memcpy>
	buffer[len] = 0;
   b99d4:	6822      	ldr	r2, [r4, #0]
   b99d6:	68a3      	ldr	r3, [r4, #8]
   b99d8:	2100      	movs	r1, #0
   b99da:	54d1      	strb	r1, [r2, r3]
	return *this;
   b99dc:	e7f2      	b.n	b99c4 <_ZN6String4copyEPKcj+0x18>

000b99de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b99de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b99e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b99e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b99e6:	4604      	mov	r4, r0
	len = 0;
   b99e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b99ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b99ec:	b141      	cbz	r1, b9a00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b99ee:	4608      	mov	r0, r1
   b99f0:	9101      	str	r1, [sp, #4]
   b99f2:	f001 fc29 	bl	bb248 <strlen>
   b99f6:	9901      	ldr	r1, [sp, #4]
   b99f8:	4602      	mov	r2, r0
   b99fa:	4620      	mov	r0, r4
   b99fc:	f7ff ffd6 	bl	b99ac <_ZN6String4copyEPKcj>
}
   b9a00:	4620      	mov	r0, r4
   b9a02:	b002      	add	sp, #8
   b9a04:	bd10      	pop	{r4, pc}

000b9a06 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9a06:	4288      	cmp	r0, r1
{
   b9a08:	b510      	push	{r4, lr}
   b9a0a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9a0c:	d005      	beq.n	b9a1a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b9a0e:	680b      	ldr	r3, [r1, #0]
   b9a10:	b12b      	cbz	r3, b9a1e <_ZN6StringaSERKS_+0x18>
   b9a12:	688a      	ldr	r2, [r1, #8]
   b9a14:	4619      	mov	r1, r3
   b9a16:	f7ff ffc9 	bl	b99ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9a1a:	4620      	mov	r0, r4
   b9a1c:	bd10      	pop	{r4, pc}
	else invalidate();
   b9a1e:	f7ff ff9a 	bl	b9956 <_ZN6String10invalidateEv>
   b9a22:	e7fa      	b.n	b9a1a <_ZN6StringaSERKS_+0x14>

000b9a24 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9a24:	b510      	push	{r4, lr}
	buffer = NULL;
   b9a26:	2300      	movs	r3, #0
String::String(const String &value)
   b9a28:	4604      	mov	r4, r0
	capacity = 0;
   b9a2a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b9a2e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9a30:	7303      	strb	r3, [r0, #12]
	*this = value;
   b9a32:	f7ff ffe8 	bl	b9a06 <_ZN6StringaSERKS_>
}
   b9a36:	4620      	mov	r0, r4
   b9a38:	bd10      	pop	{r4, pc}

000b9a3a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9a3a:	b513      	push	{r0, r1, r4, lr}
   b9a3c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9a3e:	b159      	cbz	r1, b9a58 <_ZN6StringaSEPKc+0x1e>
   b9a40:	4608      	mov	r0, r1
   b9a42:	9101      	str	r1, [sp, #4]
   b9a44:	f001 fc00 	bl	bb248 <strlen>
   b9a48:	9901      	ldr	r1, [sp, #4]
   b9a4a:	4602      	mov	r2, r0
   b9a4c:	4620      	mov	r0, r4
   b9a4e:	f7ff ffad 	bl	b99ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9a52:	4620      	mov	r0, r4
   b9a54:	b002      	add	sp, #8
   b9a56:	bd10      	pop	{r4, pc}
	else invalidate();
   b9a58:	f7ff ff7d 	bl	b9956 <_ZN6String10invalidateEv>
   b9a5c:	e7f9      	b.n	b9a52 <_ZN6StringaSEPKc+0x18>

000b9a5e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9a5e:	b510      	push	{r4, lr}
   b9a60:	4604      	mov	r4, r0
   b9a62:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9a64:	2300      	movs	r3, #0
	capacity = 0;
   b9a66:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9a6a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9a6c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b9a6e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b9a70:	a901      	add	r1, sp, #4
   b9a72:	f7ff ff53 	bl	b991c <itoa>
	*this = buf;
   b9a76:	a901      	add	r1, sp, #4
   b9a78:	4620      	mov	r0, r4
   b9a7a:	f7ff ffde 	bl	b9a3a <_ZN6StringaSEPKc>
}
   b9a7e:	4620      	mov	r0, r4
   b9a80:	b00a      	add	sp, #40	; 0x28
   b9a82:	bd10      	pop	{r4, pc}

000b9a84 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9a84:	b570      	push	{r4, r5, r6, lr}
   b9a86:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9a88:	460e      	mov	r6, r1
   b9a8a:	b909      	cbnz	r1, b9a90 <_ZN6String6concatEPKcj+0xc>
   b9a8c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9a8e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9a90:	b16a      	cbz	r2, b9aae <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9a92:	6884      	ldr	r4, [r0, #8]
   b9a94:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9a96:	4621      	mov	r1, r4
   b9a98:	f7ff ff74 	bl	b9984 <_ZN6String7reserveEj>
   b9a9c:	2800      	cmp	r0, #0
   b9a9e:	d0f5      	beq.n	b9a8c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9aa0:	6828      	ldr	r0, [r5, #0]
   b9aa2:	68ab      	ldr	r3, [r5, #8]
   b9aa4:	4631      	mov	r1, r6
   b9aa6:	4418      	add	r0, r3
   b9aa8:	f001 fbc6 	bl	bb238 <strcpy>
	len = newlen;
   b9aac:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b9aae:	2001      	movs	r0, #1
   b9ab0:	e7ed      	b.n	b9a8e <_ZN6String6concatEPKcj+0xa>

000b9ab2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9ab2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9ab4:	688a      	ldr	r2, [r1, #8]
   b9ab6:	6809      	ldr	r1, [r1, #0]
{
   b9ab8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9aba:	f7ff ffe3 	bl	b9a84 <_ZN6String6concatEPKcj>
   b9abe:	b910      	cbnz	r0, b9ac6 <_ZplRK15StringSumHelperRK6String+0x14>
   b9ac0:	4620      	mov	r0, r4
   b9ac2:	f7ff ff48 	bl	b9956 <_ZN6String10invalidateEv>
	return a;
}
   b9ac6:	4620      	mov	r0, r4
   b9ac8:	bd10      	pop	{r4, pc}

000b9aca <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b9aca:	b513      	push	{r0, r1, r4, lr}
   b9acc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9ace:	b929      	cbnz	r1, b9adc <_ZplRK15StringSumHelperPKc+0x12>
   b9ad0:	4620      	mov	r0, r4
   b9ad2:	f7ff ff40 	bl	b9956 <_ZN6String10invalidateEv>
	return a;
}
   b9ad6:	4620      	mov	r0, r4
   b9ad8:	b002      	add	sp, #8
   b9ada:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b9adc:	4608      	mov	r0, r1
   b9ade:	9101      	str	r1, [sp, #4]
   b9ae0:	f001 fbb2 	bl	bb248 <strlen>
   b9ae4:	9901      	ldr	r1, [sp, #4]
   b9ae6:	4602      	mov	r2, r0
   b9ae8:	4620      	mov	r0, r4
   b9aea:	f7ff ffcb 	bl	b9a84 <_ZN6String6concatEPKcj>
   b9aee:	2800      	cmp	r0, #0
   b9af0:	d0ee      	beq.n	b9ad0 <_ZplRK15StringSumHelperPKc+0x6>
   b9af2:	e7f0      	b.n	b9ad6 <_ZplRK15StringSumHelperPKc+0xc>

000b9af4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9af4:	4802      	ldr	r0, [pc, #8]	; (b9b00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9af6:	2300      	movs	r3, #0
   b9af8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b9afa:	f7ff bbcb 	b.w	b9294 <os_mutex_recursive_create>
   b9afe:	bf00      	nop
   b9b00:	2003e6d4 	.word	0x2003e6d4

000b9b04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b06:	4606      	mov	r6, r0
   b9b08:	460d      	mov	r5, r1
  size_t n = 0;
   b9b0a:	188f      	adds	r7, r1, r2
   b9b0c:	2400      	movs	r4, #0
  while (size--) {
   b9b0e:	42bd      	cmp	r5, r7
   b9b10:	d00c      	beq.n	b9b2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9b12:	6833      	ldr	r3, [r6, #0]
   b9b14:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9b18:	689b      	ldr	r3, [r3, #8]
   b9b1a:	4630      	mov	r0, r6
   b9b1c:	4798      	blx	r3
     if (chunk>=0)
   b9b1e:	1e03      	subs	r3, r0, #0
   b9b20:	db01      	blt.n	b9b26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9b22:	441c      	add	r4, r3
  while (size--) {
   b9b24:	e7f3      	b.n	b9b0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9b26:	2c00      	cmp	r4, #0
   b9b28:	bf08      	it	eq
   b9b2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9b30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b9b30:	b513      	push	{r0, r1, r4, lr}
   b9b32:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b9b34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9b36:	b159      	cbz	r1, b9b50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9b38:	9101      	str	r1, [sp, #4]
   b9b3a:	f001 fb85 	bl	bb248 <strlen>
   b9b3e:	6823      	ldr	r3, [r4, #0]
   b9b40:	9901      	ldr	r1, [sp, #4]
   b9b42:	68db      	ldr	r3, [r3, #12]
   b9b44:	4602      	mov	r2, r0
   b9b46:	4620      	mov	r0, r4
    }
   b9b48:	b002      	add	sp, #8
   b9b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9b4e:	4718      	bx	r3
    }
   b9b50:	b002      	add	sp, #8
   b9b52:	bd10      	pop	{r4, pc}

000b9b54 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9b54:	b508      	push	{r3, lr}
  return write(str);
   b9b56:	f7ff ffeb 	bl	b9b30 <_ZN5Print5writeEPKc>
}
   b9b5a:	bd08      	pop	{r3, pc}

000b9b5c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9b5c:	6803      	ldr	r3, [r0, #0]
   b9b5e:	689b      	ldr	r3, [r3, #8]
   b9b60:	4718      	bx	r3

000b9b62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9b62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9b64:	210d      	movs	r1, #13
{
   b9b66:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9b68:	f7ff fff8 	bl	b9b5c <_ZN5Print5printEc>
  n += print('\n');
   b9b6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9b6e:	4604      	mov	r4, r0
  n += print('\n');
   b9b70:	4628      	mov	r0, r5
   b9b72:	f7ff fff3 	bl	b9b5c <_ZN5Print5printEc>
  return n;
}
   b9b76:	4420      	add	r0, r4
   b9b78:	bd38      	pop	{r3, r4, r5, pc}

000b9b7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9b7a:	b538      	push	{r3, r4, r5, lr}
   b9b7c:	4605      	mov	r5, r0
  return write(str);
   b9b7e:	f7ff ffd7 	bl	b9b30 <_ZN5Print5writeEPKc>
   b9b82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9b84:	4628      	mov	r0, r5
   b9b86:	f7ff ffec 	bl	b9b62 <_ZN5Print7printlnEv>
  return n;
}
   b9b8a:	4420      	add	r0, r4
   b9b8c:	bd38      	pop	{r3, r4, r5, pc}

000b9b8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9b8e:	b530      	push	{r4, r5, lr}
   b9b90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9b92:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9b94:	2a01      	cmp	r2, #1
  *str = '\0';
   b9b96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9b9a:	bf98      	it	ls
   b9b9c:	220a      	movls	r2, #10
   b9b9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9ba0:	460d      	mov	r5, r1
   b9ba2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9ba6:	fb01 5312 	mls	r3, r1, r2, r5
   b9baa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9bae:	2b09      	cmp	r3, #9
   b9bb0:	bf94      	ite	ls
   b9bb2:	3330      	addls	r3, #48	; 0x30
   b9bb4:	3337      	addhi	r3, #55	; 0x37
   b9bb6:	b2db      	uxtb	r3, r3
  } while(n);
   b9bb8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9bba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9bbe:	d9ef      	bls.n	b9ba0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9bc0:	4621      	mov	r1, r4
   b9bc2:	f7ff ffb5 	bl	b9b30 <_ZN5Print5writeEPKc>
}
   b9bc6:	b00b      	add	sp, #44	; 0x2c
   b9bc8:	bd30      	pop	{r4, r5, pc}
	...

000b9bcc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b9bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bd0:	ec55 4b10 	vmov	r4, r5, d0
   b9bd4:	4606      	mov	r6, r0
   b9bd6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b9bd8:	ee10 2a10 	vmov	r2, s0
   b9bdc:	ee10 0a10 	vmov	r0, s0
   b9be0:	462b      	mov	r3, r5
   b9be2:	4629      	mov	r1, r5
   b9be4:	f001 fa18 	bl	bb018 <__aeabi_dcmpun>
   b9be8:	b140      	cbz	r0, b9bfc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b9bea:	4953      	ldr	r1, [pc, #332]	; (b9d38 <_ZN5Print10printFloatEdh+0x16c>)
   b9bec:	4630      	mov	r0, r6
   b9bee:	f7ff ff9f 	bl	b9b30 <_ZN5Print5writeEPKc>
   b9bf2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9bf4:	4650      	mov	r0, sl
   b9bf6:	b003      	add	sp, #12
   b9bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b9bfc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9c00:	4b4e      	ldr	r3, [pc, #312]	; (b9d3c <_ZN5Print10printFloatEdh+0x170>)
   b9c02:	f04f 32ff 	mov.w	r2, #4294967295
   b9c06:	4620      	mov	r0, r4
   b9c08:	4649      	mov	r1, r9
   b9c0a:	f001 fa05 	bl	bb018 <__aeabi_dcmpun>
   b9c0e:	b948      	cbnz	r0, b9c24 <_ZN5Print10printFloatEdh+0x58>
   b9c10:	4b4a      	ldr	r3, [pc, #296]	; (b9d3c <_ZN5Print10printFloatEdh+0x170>)
   b9c12:	f04f 32ff 	mov.w	r2, #4294967295
   b9c16:	4620      	mov	r0, r4
   b9c18:	4649      	mov	r1, r9
   b9c1a:	f001 f9df 	bl	bafdc <__aeabi_dcmple>
   b9c1e:	b908      	cbnz	r0, b9c24 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b9c20:	4947      	ldr	r1, [pc, #284]	; (b9d40 <_ZN5Print10printFloatEdh+0x174>)
   b9c22:	e7e3      	b.n	b9bec <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b9c24:	4b47      	ldr	r3, [pc, #284]	; (b9d44 <_ZN5Print10printFloatEdh+0x178>)
   b9c26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9c2a:	4620      	mov	r0, r4
   b9c2c:	4629      	mov	r1, r5
   b9c2e:	f001 f9e9 	bl	bb004 <__aeabi_dcmpgt>
   b9c32:	b108      	cbz	r0, b9c38 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b9c34:	4944      	ldr	r1, [pc, #272]	; (b9d48 <_ZN5Print10printFloatEdh+0x17c>)
   b9c36:	e7d9      	b.n	b9bec <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b9c38:	4b44      	ldr	r3, [pc, #272]	; (b9d4c <_ZN5Print10printFloatEdh+0x180>)
   b9c3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b9c3e:	4620      	mov	r0, r4
   b9c40:	4629      	mov	r1, r5
   b9c42:	f001 f9c1 	bl	bafc8 <__aeabi_dcmplt>
   b9c46:	2800      	cmp	r0, #0
   b9c48:	d1f4      	bne.n	b9c34 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b9c4a:	2200      	movs	r2, #0
   b9c4c:	2300      	movs	r3, #0
   b9c4e:	4620      	mov	r0, r4
   b9c50:	4629      	mov	r1, r5
   b9c52:	f001 f9b9 	bl	bafc8 <__aeabi_dcmplt>
   b9c56:	b1d0      	cbz	r0, b9c8e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b9c58:	212d      	movs	r1, #45	; 0x2d
   b9c5a:	4630      	mov	r0, r6
   b9c5c:	f7ff ff7e 	bl	b9b5c <_ZN5Print5printEc>
     number = -number;
   b9c60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b9c64:	4682      	mov	sl, r0
     number = -number;
   b9c66:	461d      	mov	r5, r3
  double rounding = 0.5;
   b9c68:	4939      	ldr	r1, [pc, #228]	; (b9d50 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b9c6a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b9d58 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b9c6e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b9c72:	2000      	movs	r0, #0
    rounding /= 10.0;
   b9c74:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b9c78:	fa5f f38b 	uxtb.w	r3, fp
   b9c7c:	429f      	cmp	r7, r3
   b9c7e:	d908      	bls.n	b9c92 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9c80:	4642      	mov	r2, r8
   b9c82:	464b      	mov	r3, r9
   b9c84:	f001 f858 	bl	bad38 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9c88:	f10b 0b01 	add.w	fp, fp, #1
   b9c8c:	e7f4      	b.n	b9c78 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b9c8e:	4682      	mov	sl, r0
   b9c90:	e7ea      	b.n	b9c68 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9c92:	4622      	mov	r2, r4
   b9c94:	462b      	mov	r3, r5
   b9c96:	f000 fd6f 	bl	ba778 <__adddf3>
   b9c9a:	460d      	mov	r5, r1
   b9c9c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b9c9e:	f001 f9f9 	bl	bb094 <__aeabi_d2uiz>
   b9ca2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9ca4:	f000 fea4 	bl	ba9f0 <__aeabi_ui2d>
   b9ca8:	4602      	mov	r2, r0
   b9caa:	460b      	mov	r3, r1
   b9cac:	4620      	mov	r0, r4
   b9cae:	4629      	mov	r1, r5
   b9cb0:	f000 fd60 	bl	ba774 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9cb4:	220a      	movs	r2, #10
   b9cb6:	4604      	mov	r4, r0
   b9cb8:	460d      	mov	r5, r1
   b9cba:	4630      	mov	r0, r6
   b9cbc:	4641      	mov	r1, r8
   b9cbe:	f7ff ff66 	bl	b9b8e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9cc2:	4482      	add	sl, r0
  if (digits > 0) {
   b9cc4:	2f00      	cmp	r7, #0
   b9cc6:	d095      	beq.n	b9bf4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9cc8:	4922      	ldr	r1, [pc, #136]	; (b9d54 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b9cca:	f8df 908c 	ldr.w	r9, [pc, #140]	; b9d58 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b9cce:	4630      	mov	r0, r6
   b9cd0:	f7ff ff2e 	bl	b9b30 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9cd4:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b9cd8:	4482      	add	sl, r0
  while (digits-- > 0)
   b9cda:	2f00      	cmp	r7, #0
   b9cdc:	d08a      	beq.n	b9bf4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b9cde:	4642      	mov	r2, r8
   b9ce0:	464b      	mov	r3, r9
   b9ce2:	4620      	mov	r0, r4
   b9ce4:	4629      	mov	r1, r5
   b9ce6:	f000 fefd 	bl	baae4 <__aeabi_dmul>
   b9cea:	4604      	mov	r4, r0
   b9cec:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b9cee:	f001 f9a9 	bl	bb044 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9cf2:	f1b0 0b00 	subs.w	fp, r0, #0
   b9cf6:	da1c      	bge.n	b9d32 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b9cf8:	212d      	movs	r1, #45	; 0x2d
   b9cfa:	4630      	mov	r0, r6
   b9cfc:	f7ff ff2e 	bl	b9b5c <_ZN5Print5printEc>
            val = -n;
   b9d00:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9d04:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b9d06:	220a      	movs	r2, #10
   b9d08:	4630      	mov	r0, r6
   b9d0a:	9301      	str	r3, [sp, #4]
   b9d0c:	f7ff ff3f 	bl	b9b8e <_ZN5Print11printNumberEmh>
   b9d10:	9b01      	ldr	r3, [sp, #4]
   b9d12:	4418      	add	r0, r3
    n += print(toPrint);
   b9d14:	4482      	add	sl, r0
    remainder -= toPrint;
   b9d16:	4658      	mov	r0, fp
   b9d18:	f000 fe7a 	bl	baa10 <__aeabi_i2d>
   b9d1c:	4602      	mov	r2, r0
   b9d1e:	460b      	mov	r3, r1
   b9d20:	4620      	mov	r0, r4
   b9d22:	4629      	mov	r1, r5
   b9d24:	f000 fd26 	bl	ba774 <__aeabi_dsub>
   b9d28:	3f01      	subs	r7, #1
   b9d2a:	4604      	mov	r4, r0
   b9d2c:	460d      	mov	r5, r1
   b9d2e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b9d30:	e7d3      	b.n	b9cda <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b9d32:	4659      	mov	r1, fp
        size_t t = 0;
   b9d34:	2300      	movs	r3, #0
   b9d36:	e7e6      	b.n	b9d06 <_ZN5Print10printFloatEdh+0x13a>
   b9d38:	000bcfd0 	.word	0x000bcfd0
   b9d3c:	7fefffff 	.word	0x7fefffff
   b9d40:	000bcfd4 	.word	0x000bcfd4
   b9d44:	41efffff 	.word	0x41efffff
   b9d48:	000bcfd8 	.word	0x000bcfd8
   b9d4c:	c1efffff 	.word	0xc1efffff
   b9d50:	3fe00000 	.word	0x3fe00000
   b9d54:	000bba6c 	.word	0x000bba6c
   b9d58:	40240000 	.word	0x40240000

000b9d5c <_ZN5Print7printlnEdi>:
{
   b9d5c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b9d5e:	b2c9      	uxtb	r1, r1
{
   b9d60:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b9d62:	f7ff ff33 	bl	b9bcc <_ZN5Print10printFloatEdh>
   b9d66:	4604      	mov	r4, r0
  n += println();
   b9d68:	4628      	mov	r0, r5
   b9d6a:	f7ff fefa 	bl	b9b62 <_ZN5Print7printlnEv>
}
   b9d6e:	4420      	add	r0, r4
   b9d70:	bd38      	pop	{r3, r4, r5, pc}

000b9d72 <_ZN5Print7printlnEfi>:
{
   b9d72:	b538      	push	{r3, r4, r5, lr}
   b9d74:	4604      	mov	r4, r0
   b9d76:	ee10 0a10 	vmov	r0, s0
   b9d7a:	460d      	mov	r5, r1
    return println((double)num, digits);
   b9d7c:	f000 fe5a 	bl	baa34 <__aeabi_f2d>
   b9d80:	ec41 0b10 	vmov	d0, r0, r1
   b9d84:	4629      	mov	r1, r5
   b9d86:	4620      	mov	r0, r4
}
   b9d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b9d8c:	f7ff bfe6 	b.w	b9d5c <_ZN5Print7printlnEdi>

000b9d90 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d94:	b086      	sub	sp, #24
   b9d96:	af00      	add	r7, sp, #0
   b9d98:	4605      	mov	r5, r0
   b9d9a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9d9c:	1d38      	adds	r0, r7, #4
   b9d9e:	2114      	movs	r1, #20
{
   b9da0:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9da2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9da4:	f7ff fc62 	bl	b966c <vsnprintf>

    if (n<bufsize)
   b9da8:	2813      	cmp	r0, #19
   b9daa:	d80e      	bhi.n	b9dca <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9dac:	1d39      	adds	r1, r7, #4
   b9dae:	4628      	mov	r0, r5
   b9db0:	f7ff febe 	bl	b9b30 <_ZN5Print5writeEPKc>
   b9db4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9db6:	b11e      	cbz	r6, b9dc0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9db8:	4628      	mov	r0, r5
   b9dba:	f7ff fed2 	bl	b9b62 <_ZN5Print7printlnEv>
   b9dbe:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9dc0:	4620      	mov	r0, r4
   b9dc2:	3718      	adds	r7, #24
   b9dc4:	46bd      	mov	sp, r7
   b9dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9dca:	f100 0308 	add.w	r3, r0, #8
   b9dce:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9dd2:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9dd4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9dd8:	4622      	mov	r2, r4
   b9dda:	1c41      	adds	r1, r0, #1
   b9ddc:	683b      	ldr	r3, [r7, #0]
   b9dde:	4668      	mov	r0, sp
   b9de0:	f7ff fc44 	bl	b966c <vsnprintf>
  return write(str);
   b9de4:	4669      	mov	r1, sp
   b9de6:	4628      	mov	r0, r5
   b9de8:	f7ff fea2 	bl	b9b30 <_ZN5Print5writeEPKc>
   b9dec:	4604      	mov	r4, r0
   b9dee:	46c5      	mov	sp, r8
   b9df0:	e7e1      	b.n	b9db6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b9df4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9df4:	4b01      	ldr	r3, [pc, #4]	; (b9dfc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9df6:	4a02      	ldr	r2, [pc, #8]	; (b9e00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9df8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9dfa:	4770      	bx	lr
   b9dfc:	2003e6d8 	.word	0x2003e6d8
   b9e00:	000bcfdc 	.word	0x000bcfdc

000b9e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9e04:	4b02      	ldr	r3, [pc, #8]	; (b9e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9e06:	681a      	ldr	r2, [r3, #0]
   b9e08:	4b02      	ldr	r3, [pc, #8]	; (b9e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9e0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9e0c:	4770      	bx	lr
   b9e0e:	bf00      	nop
   b9e10:	2003c768 	.word	0x2003c768
   b9e14:	2003e6dc 	.word	0x2003e6dc

000b9e18 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9e18:	2100      	movs	r1, #0
   b9e1a:	f7ff bb7b 	b.w	b9514 <system_delay_ms>
	...

000b9e20 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b9e20:	4b01      	ldr	r3, [pc, #4]	; (b9e28 <_GLOBAL__sub_I_RGB+0x8>)
   b9e22:	2200      	movs	r2, #0
   b9e24:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9e26:	4770      	bx	lr
   b9e28:	2003e6e0 	.word	0x2003e6e0

000b9e2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9e2c:	4b01      	ldr	r3, [pc, #4]	; (b9e34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9e2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9e30:	4770      	bx	lr
   b9e32:	bf00      	nop
   b9e34:	2003c76c 	.word	0x2003c76c

000b9e38 <serialEventRun>:
{
   b9e38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9e3a:	4b0b      	ldr	r3, [pc, #44]	; (b9e68 <serialEventRun+0x30>)
   b9e3c:	b143      	cbz	r3, b9e50 <serialEventRun+0x18>
   b9e3e:	f000 f981 	bl	ba144 <_Z16_fetch_usbserialv>
   b9e42:	6803      	ldr	r3, [r0, #0]
   b9e44:	691b      	ldr	r3, [r3, #16]
   b9e46:	4798      	blx	r3
   b9e48:	2800      	cmp	r0, #0
   b9e4a:	dd01      	ble.n	b9e50 <serialEventRun+0x18>
        serialEvent();
   b9e4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9e50:	4b06      	ldr	r3, [pc, #24]	; (b9e6c <serialEventRun+0x34>)
   b9e52:	b143      	cbz	r3, b9e66 <serialEventRun+0x2e>
   b9e54:	f000 fc12 	bl	ba67c <_Z22__fetch_global_Serial1v>
   b9e58:	6803      	ldr	r3, [r0, #0]
   b9e5a:	691b      	ldr	r3, [r3, #16]
   b9e5c:	4798      	blx	r3
   b9e5e:	2800      	cmp	r0, #0
   b9e60:	dd01      	ble.n	b9e66 <serialEventRun+0x2e>
        serialEvent1();
   b9e62:	f3af 8000 	nop.w
}
   b9e66:	bd08      	pop	{r3, pc}
	...

000b9e70 <_post_loop>:
{
   b9e70:	b508      	push	{r3, lr}
	serialEventRun();
   b9e72:	f7ff ffe1 	bl	b9e38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9e76:	f7ff f9ed 	bl	b9254 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9e7a:	4b01      	ldr	r3, [pc, #4]	; (b9e80 <_post_loop+0x10>)
   b9e7c:	6018      	str	r0, [r3, #0]
}
   b9e7e:	bd08      	pop	{r3, pc}
   b9e80:	2003e738 	.word	0x2003e738

000b9e84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9e84:	4805      	ldr	r0, [pc, #20]	; (b9e9c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9e86:	4a06      	ldr	r2, [pc, #24]	; (b9ea0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9e88:	4906      	ldr	r1, [pc, #24]	; (b9ea4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9e8a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9e8c:	1a12      	subs	r2, r2, r0
   b9e8e:	f001 f97f 	bl	bb190 <memcpy>
    __backup_sram_signature = signature;
   b9e92:	4b05      	ldr	r3, [pc, #20]	; (b9ea8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9e94:	4a05      	ldr	r2, [pc, #20]	; (b9eac <_Z33system_initialize_user_backup_ramv+0x28>)
   b9e96:	601a      	str	r2, [r3, #0]
}
   b9e98:	bd08      	pop	{r3, pc}
   b9e9a:	bf00      	nop
   b9e9c:	2003f400 	.word	0x2003f400
   b9ea0:	2003f404 	.word	0x2003f404
   b9ea4:	000bd274 	.word	0x000bd274
   b9ea8:	2003f400 	.word	0x2003f400
   b9eac:	9a271c1e 	.word	0x9a271c1e

000b9eb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9eb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9eb2:	2300      	movs	r3, #0
   b9eb4:	9300      	str	r3, [sp, #0]
   b9eb6:	461a      	mov	r2, r3
   b9eb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9ebc:	f7ff fb3c 	bl	b9538 <system_ctrl_set_result>
}
   b9ec0:	b003      	add	sp, #12
   b9ec2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9ec8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9ec8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9eca:	8843      	ldrh	r3, [r0, #2]
   b9ecc:	2b0a      	cmp	r3, #10
   b9ece:	d008      	beq.n	b9ee2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9ed0:	2b50      	cmp	r3, #80	; 0x50
   b9ed2:	d10b      	bne.n	b9eec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9ed4:	4b09      	ldr	r3, [pc, #36]	; (b9efc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9ed6:	681b      	ldr	r3, [r3, #0]
   b9ed8:	b14b      	cbz	r3, b9eee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9eda:	b003      	add	sp, #12
   b9edc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9ee0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9ee2:	f7ff ffe5 	bl	b9eb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9ee6:	b003      	add	sp, #12
   b9ee8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9eec:	2300      	movs	r3, #0
   b9eee:	9300      	str	r3, [sp, #0]
   b9ef0:	461a      	mov	r2, r3
   b9ef2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9ef6:	f7ff fb1f 	bl	b9538 <system_ctrl_set_result>
}
   b9efa:	e7f4      	b.n	b9ee6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9efc:	2003e6f4 	.word	0x2003e6f4

000b9f00 <module_user_init_hook>:
{
   b9f00:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9f02:	4812      	ldr	r0, [pc, #72]	; (b9f4c <module_user_init_hook+0x4c>)
   b9f04:	2100      	movs	r1, #0
   b9f06:	f7ff fbc9 	bl	b969c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9f0a:	4b11      	ldr	r3, [pc, #68]	; (b9f50 <module_user_init_hook+0x50>)
   b9f0c:	681a      	ldr	r2, [r3, #0]
   b9f0e:	4b11      	ldr	r3, [pc, #68]	; (b9f54 <module_user_init_hook+0x54>)
   b9f10:	429a      	cmp	r2, r3
   b9f12:	4b11      	ldr	r3, [pc, #68]	; (b9f58 <module_user_init_hook+0x58>)
   b9f14:	bf0c      	ite	eq
   b9f16:	2201      	moveq	r2, #1
   b9f18:	2200      	movne	r2, #0
   b9f1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9f1c:	d001      	beq.n	b9f22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9f1e:	f7ff ffb1 	bl	b9e84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9f22:	f7ff f987 	bl	b9234 <HAL_RNG_GetRandomNumber>
   b9f26:	4604      	mov	r4, r0
    srand(seed);
   b9f28:	f001 f958 	bl	bb1dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9f2c:	4b0b      	ldr	r3, [pc, #44]	; (b9f5c <module_user_init_hook+0x5c>)
   b9f2e:	b113      	cbz	r3, b9f36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9f30:	4620      	mov	r0, r4
   b9f32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9f36:	2100      	movs	r1, #0
   b9f38:	4808      	ldr	r0, [pc, #32]	; (b9f5c <module_user_init_hook+0x5c>)
   b9f3a:	f7ff fb67 	bl	b960c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9f42:	4807      	ldr	r0, [pc, #28]	; (b9f60 <module_user_init_hook+0x60>)
   b9f44:	2100      	movs	r1, #0
   b9f46:	f7ff baed 	b.w	b9524 <system_ctrl_set_app_request_handler>
   b9f4a:	bf00      	nop
   b9f4c:	000b9e2d 	.word	0x000b9e2d
   b9f50:	2003f400 	.word	0x2003f400
   b9f54:	9a271c1e 	.word	0x9a271c1e
   b9f58:	2003e6f0 	.word	0x2003e6f0
   b9f5c:	00000000 	.word	0x00000000
   b9f60:	000b9ec9 	.word	0x000b9ec9

000b9f64 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b9f66:	230c      	movs	r3, #12
   b9f68:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b9f6c:	6803      	ldr	r3, [r0, #0]
   b9f6e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b9f72:	7a03      	ldrb	r3, [r0, #8]
   b9f74:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b9f78:	6843      	ldr	r3, [r0, #4]
   b9f7a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b9f7c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b9f7e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b9f80:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9f84:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b9f86:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b9f8a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9f8e:	f7ff fb45 	bl	b961c <spark_cloud_disconnect>
}
   b9f92:	b005      	add	sp, #20
   b9f94:	f85d fb04 	ldr.w	pc, [sp], #4

000b9f98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9f98:	4770      	bx	lr

000b9f9a <_ZN9IPAddressD0Ev>:
   b9f9a:	b510      	push	{r4, lr}
   b9f9c:	2118      	movs	r1, #24
   b9f9e:	4604      	mov	r4, r0
   b9fa0:	f7fa f87b 	bl	b409a <_ZdlPvj>
   b9fa4:	4620      	mov	r0, r4
   b9fa6:	bd10      	pop	{r4, pc}

000b9fa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9faa:	7d03      	ldrb	r3, [r0, #20]
   b9fac:	2b06      	cmp	r3, #6
{
   b9fae:	b08d      	sub	sp, #52	; 0x34
   b9fb0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9fb2:	f100 0704 	add.w	r7, r0, #4
   b9fb6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9fba:	d012      	beq.n	b9fe2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9fbc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b9fc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9fc4:	220a      	movs	r2, #10
   b9fc6:	4630      	mov	r0, r6
   b9fc8:	f7ff fde1 	bl	b9b8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9fcc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9fce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9fd0:	d019      	beq.n	ba006 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9fd2:	2c00      	cmp	r4, #0
   b9fd4:	d0f4      	beq.n	b9fc0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9fd6:	212e      	movs	r1, #46	; 0x2e
   b9fd8:	4630      	mov	r0, r6
   b9fda:	f7ff fdbf 	bl	b9b5c <_ZN5Print5printEc>
   b9fde:	4404      	add	r4, r0
   b9fe0:	e7ee      	b.n	b9fc0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9fe2:	232f      	movs	r3, #47	; 0x2f
   b9fe4:	466a      	mov	r2, sp
   b9fe6:	4639      	mov	r1, r7
   b9fe8:	200a      	movs	r0, #10
		buf[0] = 0;
   b9fea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9fee:	f7ff f959 	bl	b92a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9ff2:	4668      	mov	r0, sp
   b9ff4:	f001 f928 	bl	bb248 <strlen>
   b9ff8:	6833      	ldr	r3, [r6, #0]
   b9ffa:	4602      	mov	r2, r0
   b9ffc:	68db      	ldr	r3, [r3, #12]
   b9ffe:	4669      	mov	r1, sp
   ba000:	4630      	mov	r0, r6
   ba002:	4798      	blx	r3
   ba004:	4604      	mov	r4, r0
    }
    return n;
}
   ba006:	4620      	mov	r0, r4
   ba008:	b00d      	add	sp, #52	; 0x34
   ba00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba00c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba00c:	b510      	push	{r4, lr}
   ba00e:	4b05      	ldr	r3, [pc, #20]	; (ba024 <_ZN9IPAddressC1Ev+0x18>)
   ba010:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba012:	2211      	movs	r2, #17
   ba014:	f840 3b04 	str.w	r3, [r0], #4
   ba018:	2100      	movs	r1, #0
   ba01a:	f001 f8c7 	bl	bb1ac <memset>
}
   ba01e:	4620      	mov	r0, r4
   ba020:	bd10      	pop	{r4, pc}
   ba022:	bf00      	nop
   ba024:	000bd004 	.word	0x000bd004

000ba028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba028:	4603      	mov	r3, r0
   ba02a:	4a07      	ldr	r2, [pc, #28]	; (ba048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba02c:	b510      	push	{r4, lr}
   ba02e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba032:	f101 0210 	add.w	r2, r1, #16
   ba036:	f851 4b04 	ldr.w	r4, [r1], #4
   ba03a:	f843 4b04 	str.w	r4, [r3], #4
   ba03e:	4291      	cmp	r1, r2
   ba040:	d1f9      	bne.n	ba036 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba042:	780a      	ldrb	r2, [r1, #0]
   ba044:	701a      	strb	r2, [r3, #0]
}
   ba046:	bd10      	pop	{r4, pc}
   ba048:	000bd004 	.word	0x000bd004

000ba04c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba04c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba04e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba052:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba056:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba05a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba05e:	2304      	movs	r3, #4
   ba060:	6041      	str	r1, [r0, #4]
   ba062:	7503      	strb	r3, [r0, #20]
}
   ba064:	bd10      	pop	{r4, pc}
	...

000ba068 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba068:	b507      	push	{r0, r1, r2, lr}
   ba06a:	4b06      	ldr	r3, [pc, #24]	; (ba084 <_ZN9IPAddressC1EPKh+0x1c>)
   ba06c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba06e:	78cb      	ldrb	r3, [r1, #3]
   ba070:	9300      	str	r3, [sp, #0]
   ba072:	788b      	ldrb	r3, [r1, #2]
   ba074:	784a      	ldrb	r2, [r1, #1]
   ba076:	7809      	ldrb	r1, [r1, #0]
   ba078:	f7ff ffe8 	bl	ba04c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba07c:	b003      	add	sp, #12
   ba07e:	f85d fb04 	ldr.w	pc, [sp], #4
   ba082:	bf00      	nop
   ba084:	000bd004 	.word	0x000bd004

000ba088 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba088:	7441      	strb	r1, [r0, #17]
}
   ba08a:	4770      	bx	lr

000ba08c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba08c:	4770      	bx	lr

000ba08e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba08e:	4770      	bx	lr

000ba090 <_ZN9USBSerial4readEv>:
{
   ba090:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba092:	2100      	movs	r1, #0
   ba094:	7c00      	ldrb	r0, [r0, #16]
   ba096:	f7ff fa15 	bl	b94c4 <HAL_USB_USART_Receive_Data>
}
   ba09a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba09e:	bd08      	pop	{r3, pc}

000ba0a0 <_ZN9USBSerial4peekEv>:
{
   ba0a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba0a2:	2101      	movs	r1, #1
   ba0a4:	7c00      	ldrb	r0, [r0, #16]
   ba0a6:	f7ff fa0d 	bl	b94c4 <HAL_USB_USART_Receive_Data>
}
   ba0aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba0ae:	bd08      	pop	{r3, pc}

000ba0b0 <_ZN9USBSerial17availableForWriteEv>:
{
   ba0b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba0b2:	7c00      	ldrb	r0, [r0, #16]
   ba0b4:	f7ff f9fe 	bl	b94b4 <HAL_USB_USART_Available_Data_For_Write>
}
   ba0b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba0bc:	bd08      	pop	{r3, pc}

000ba0be <_ZN9USBSerial9availableEv>:
{
   ba0be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba0c0:	7c00      	ldrb	r0, [r0, #16]
   ba0c2:	f7ff f9ef 	bl	b94a4 <HAL_USB_USART_Available_Data>
}
   ba0c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba0ca:	bd08      	pop	{r3, pc}

000ba0cc <_ZN9USBSerial5writeEh>:
{
   ba0cc:	b513      	push	{r0, r1, r4, lr}
   ba0ce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba0d0:	7c00      	ldrb	r0, [r0, #16]
{
   ba0d2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba0d4:	f7ff f9ee 	bl	b94b4 <HAL_USB_USART_Available_Data_For_Write>
   ba0d8:	2800      	cmp	r0, #0
   ba0da:	9901      	ldr	r1, [sp, #4]
   ba0dc:	dc01      	bgt.n	ba0e2 <_ZN9USBSerial5writeEh+0x16>
   ba0de:	7c60      	ldrb	r0, [r4, #17]
   ba0e0:	b120      	cbz	r0, ba0ec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba0e2:	7c20      	ldrb	r0, [r4, #16]
   ba0e4:	f7ff f9f6 	bl	b94d4 <HAL_USB_USART_Send_Data>
   ba0e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba0ec:	b002      	add	sp, #8
   ba0ee:	bd10      	pop	{r4, pc}

000ba0f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba0f0:	7c00      	ldrb	r0, [r0, #16]
   ba0f2:	f7ff b9f7 	b.w	b94e4 <HAL_USB_USART_Flush_Data>

000ba0f6 <_ZN9USBSerialD0Ev>:
   ba0f6:	b510      	push	{r4, lr}
   ba0f8:	2114      	movs	r1, #20
   ba0fa:	4604      	mov	r4, r0
   ba0fc:	f7f9 ffcd 	bl	b409a <_ZdlPvj>
   ba100:	4620      	mov	r0, r4
   ba102:	bd10      	pop	{r4, pc}

000ba104 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba104:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba10a:	4604      	mov	r4, r0
   ba10c:	4608      	mov	r0, r1
   ba10e:	2100      	movs	r1, #0
   ba110:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba114:	4b04      	ldr	r3, [pc, #16]	; (ba128 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba116:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba118:	2301      	movs	r3, #1
  _serial = serial;
   ba11a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba11c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba11e:	4611      	mov	r1, r2
   ba120:	f7ff f9b0 	bl	b9484 <HAL_USB_USART_Init>
}
   ba124:	4620      	mov	r0, r4
   ba126:	bd10      	pop	{r4, pc}
   ba128:	000bd018 	.word	0x000bd018

000ba12c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba12c:	7c00      	ldrb	r0, [r0, #16]
   ba12e:	2200      	movs	r2, #0
   ba130:	f7ff b9b0 	b.w	b9494 <HAL_USB_USART_Begin>

000ba134 <_Z19acquireSerialBufferv>:
{
   ba134:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba136:	2214      	movs	r2, #20
{
   ba138:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba13a:	2100      	movs	r1, #0
   ba13c:	f001 f836 	bl	bb1ac <memset>
}
   ba140:	4620      	mov	r0, r4
   ba142:	bd10      	pop	{r4, pc}

000ba144 <_Z16_fetch_usbserialv>:
{
   ba144:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba146:	4c0f      	ldr	r4, [pc, #60]	; (ba184 <_Z16_fetch_usbserialv+0x40>)
{
   ba148:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba14a:	a803      	add	r0, sp, #12
   ba14c:	f7ff fff2 	bl	ba134 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba150:	7821      	ldrb	r1, [r4, #0]
   ba152:	f3bf 8f5b 	dmb	ish
   ba156:	f011 0101 	ands.w	r1, r1, #1
   ba15a:	d10f      	bne.n	ba17c <_Z16_fetch_usbserialv+0x38>
   ba15c:	4620      	mov	r0, r4
   ba15e:	9101      	str	r1, [sp, #4]
   ba160:	f7f9 ffaa 	bl	b40b8 <__cxa_guard_acquire>
   ba164:	9901      	ldr	r1, [sp, #4]
   ba166:	b148      	cbz	r0, ba17c <_Z16_fetch_usbserialv+0x38>
   ba168:	aa03      	add	r2, sp, #12
   ba16a:	4807      	ldr	r0, [pc, #28]	; (ba188 <_Z16_fetch_usbserialv+0x44>)
   ba16c:	f7ff ffca 	bl	ba104 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba170:	4620      	mov	r0, r4
   ba172:	f7f9 ffa6 	bl	b40c2 <__cxa_guard_release>
   ba176:	4805      	ldr	r0, [pc, #20]	; (ba18c <_Z16_fetch_usbserialv+0x48>)
   ba178:	f000 fffc 	bl	bb174 <atexit>
	return _usbserial;
}
   ba17c:	4802      	ldr	r0, [pc, #8]	; (ba188 <_Z16_fetch_usbserialv+0x44>)
   ba17e:	b008      	add	sp, #32
   ba180:	bd10      	pop	{r4, pc}
   ba182:	bf00      	nop
   ba184:	2003e6f8 	.word	0x2003e6f8
   ba188:	2003e6fc 	.word	0x2003e6fc
   ba18c:	000ba08d 	.word	0x000ba08d

000ba190 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   ba190:	f7ff b838 	b.w	b9204 <HAL_Interrupts_Disable_All>

000ba194 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   ba194:	f7ff b82e 	b.w	b91f4 <HAL_Interrupts_Enable_All>

000ba198 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   ba198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   ba19a:	b287      	uxth	r7, r0
{
   ba19c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   ba19e:	4638      	mov	r0, r7
{
   ba1a0:	460d      	mov	r5, r1
   ba1a2:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   ba1a4:	f000 f9ba 	bl	ba51c <pinAvailable>
   ba1a8:	b160      	cbz	r0, ba1c4 <tone+0x2c>
   ba1aa:	2102      	movs	r1, #2
   ba1ac:	4638      	mov	r0, r7
   ba1ae:	f7fe fff9 	bl	b91a4 <HAL_Validate_Pin_Function>
   ba1b2:	2802      	cmp	r0, #2
   ba1b4:	d106      	bne.n	ba1c4 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   ba1b6:	4632      	mov	r2, r6
   ba1b8:	4629      	mov	r1, r5
   ba1ba:	4620      	mov	r0, r4
    }
}
   ba1bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   ba1c0:	f7ff b950 	b.w	b9464 <HAL_Tone_Start>
}
   ba1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba1c6 <noTone>:

void noTone(uint8_t pin)
{
   ba1c6:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   ba1c8:	b285      	uxth	r5, r0
{
   ba1ca:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   ba1cc:	4628      	mov	r0, r5
   ba1ce:	f000 f9a5 	bl	ba51c <pinAvailable>
   ba1d2:	b150      	cbz	r0, ba1ea <noTone+0x24>
   ba1d4:	2102      	movs	r1, #2
   ba1d6:	4628      	mov	r0, r5
   ba1d8:	f7fe ffe4 	bl	b91a4 <HAL_Validate_Pin_Function>
   ba1dc:	2802      	cmp	r0, #2
   ba1de:	d104      	bne.n	ba1ea <noTone+0x24>
        HAL_Tone_Stop(pin);
   ba1e0:	4620      	mov	r0, r4
    }
}
   ba1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   ba1e6:	f7ff b945 	b.w	b9474 <HAL_Tone_Stop>
}
   ba1ea:	bd38      	pop	{r3, r4, r5, pc}

000ba1ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba1ec:	4770      	bx	lr

000ba1ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba1ee:	7441      	strb	r1, [r0, #17]
}
   ba1f0:	4770      	bx	lr

000ba1f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba1f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba1f4:	7c00      	ldrb	r0, [r0, #16]
   ba1f6:	f7ff f88d 	bl	b9314 <hal_usart_available_data_for_write>
}
   ba1fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1fe:	bd08      	pop	{r3, pc}

000ba200 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba200:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba202:	7c00      	ldrb	r0, [r0, #16]
   ba204:	f7ff f85e 	bl	b92c4 <hal_usart_available>
}
   ba208:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba20c:	bd08      	pop	{r3, pc}

000ba20e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba20e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba210:	7c00      	ldrb	r0, [r0, #16]
   ba212:	f7ff f867 	bl	b92e4 <hal_usart_peek>
}
   ba216:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba21a:	bd08      	pop	{r3, pc}

000ba21c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba21c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba21e:	7c00      	ldrb	r0, [r0, #16]
   ba220:	f7ff f858 	bl	b92d4 <hal_usart_read>
}
   ba224:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba228:	bd08      	pop	{r3, pc}

000ba22a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba22a:	7c00      	ldrb	r0, [r0, #16]
   ba22c:	f7ff b862 	b.w	b92f4 <hal_usart_flush>

000ba230 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba230:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba232:	7c45      	ldrb	r5, [r0, #17]
{
   ba234:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba236:	b12d      	cbz	r5, ba244 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba238:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba23a:	b003      	add	sp, #12
   ba23c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba240:	f7ff b838 	b.w	b92b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba244:	7c00      	ldrb	r0, [r0, #16]
   ba246:	9101      	str	r1, [sp, #4]
   ba248:	f7ff f864 	bl	b9314 <hal_usart_available_data_for_write>
   ba24c:	2800      	cmp	r0, #0
   ba24e:	9901      	ldr	r1, [sp, #4]
   ba250:	dcf2      	bgt.n	ba238 <_ZN11USARTSerial5writeEh+0x8>
}
   ba252:	4628      	mov	r0, r5
   ba254:	b003      	add	sp, #12
   ba256:	bd30      	pop	{r4, r5, pc}

000ba258 <_ZN11USARTSerialD0Ev>:
   ba258:	b510      	push	{r4, lr}
   ba25a:	2114      	movs	r1, #20
   ba25c:	4604      	mov	r4, r0
   ba25e:	f7f9 ff1c 	bl	b409a <_ZdlPvj>
   ba262:	4620      	mov	r0, r4
   ba264:	bd10      	pop	{r4, pc}
	...

000ba268 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba268:	b510      	push	{r4, lr}
   ba26a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba26e:	4604      	mov	r4, r0
   ba270:	4608      	mov	r0, r1
   ba272:	4611      	mov	r1, r2
   ba274:	2200      	movs	r2, #0
   ba276:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba27a:	4b04      	ldr	r3, [pc, #16]	; (ba28c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba27c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba27e:	2301      	movs	r3, #1
  _serial = serial;
   ba280:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba282:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba284:	f7ff f84e 	bl	b9324 <hal_usart_init_ex>
}
   ba288:	4620      	mov	r0, r4
   ba28a:	bd10      	pop	{r4, pc}
   ba28c:	000bd048 	.word	0x000bd048

000ba290 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba290:	4770      	bx	lr

000ba292 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba294:	4606      	mov	r6, r0
   ba296:	4615      	mov	r5, r2
   ba298:	460c      	mov	r4, r1
   ba29a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba29c:	42bc      	cmp	r4, r7
   ba29e:	d006      	beq.n	ba2ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba2a0:	6833      	ldr	r3, [r6, #0]
   ba2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba2a6:	689b      	ldr	r3, [r3, #8]
   ba2a8:	4630      	mov	r0, r6
   ba2aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba2ac:	e7f6      	b.n	ba29c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba2ae:	4628      	mov	r0, r5
   ba2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba2b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba2b2:	7c00      	ldrb	r0, [r0, #16]
   ba2b4:	2200      	movs	r2, #0
   ba2b6:	f7ff b85d 	b.w	b9374 <hal_i2c_write>

000ba2ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba2ba:	7c00      	ldrb	r0, [r0, #16]
   ba2bc:	2100      	movs	r1, #0
   ba2be:	f7ff b861 	b.w	b9384 <hal_i2c_available>

000ba2c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba2c2:	7c00      	ldrb	r0, [r0, #16]
   ba2c4:	2100      	movs	r1, #0
   ba2c6:	f7ff b865 	b.w	b9394 <hal_i2c_read>

000ba2ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba2ca:	7c00      	ldrb	r0, [r0, #16]
   ba2cc:	2100      	movs	r1, #0
   ba2ce:	f7ff b869 	b.w	b93a4 <hal_i2c_peek>

000ba2d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba2d2:	7c00      	ldrb	r0, [r0, #16]
   ba2d4:	2100      	movs	r1, #0
   ba2d6:	f7ff b86d 	b.w	b93b4 <hal_i2c_flush>

000ba2da <_ZN7TwoWireD0Ev>:
   ba2da:	b510      	push	{r4, lr}
   ba2dc:	2114      	movs	r1, #20
   ba2de:	4604      	mov	r4, r0
   ba2e0:	f7f9 fedb 	bl	b409a <_ZdlPvj>
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	bd10      	pop	{r4, pc}

000ba2e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba2e8:	b510      	push	{r4, lr}
   ba2ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba2ee:	4604      	mov	r4, r0
   ba2f0:	4608      	mov	r0, r1
   ba2f2:	2100      	movs	r1, #0
   ba2f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba2f8:	4b03      	ldr	r3, [pc, #12]	; (ba308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba2fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba2fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba2fe:	4611      	mov	r1, r2
   ba300:	f7ff f868 	bl	b93d4 <hal_i2c_init>
}
   ba304:	4620      	mov	r0, r4
   ba306:	bd10      	pop	{r4, pc}
   ba308:	000bd078 	.word	0x000bd078

000ba30c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   ba30c:	7c00      	ldrb	r0, [r0, #16]
   ba30e:	2200      	movs	r2, #0
   ba310:	f7ff b810 	b.w	b9334 <hal_i2c_set_speed>

000ba314 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba314:	2300      	movs	r3, #0
   ba316:	7c00      	ldrb	r0, [r0, #16]
   ba318:	461a      	mov	r2, r3
   ba31a:	4619      	mov	r1, r3
   ba31c:	f7ff b812 	b.w	b9344 <hal_i2c_begin>

000ba320 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba320:	7c00      	ldrb	r0, [r0, #16]
   ba322:	2200      	movs	r2, #0
   ba324:	f7ff b816 	b.w	b9354 <hal_i2c_begin_transmission>

000ba328 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ba328:	b2c9      	uxtb	r1, r1
   ba32a:	f7ff bff9 	b.w	ba320 <_ZN7TwoWire17beginTransmissionEh>

000ba32e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba32e:	7c00      	ldrb	r0, [r0, #16]
   ba330:	2200      	movs	r2, #0
   ba332:	f7ff b817 	b.w	b9364 <hal_i2c_end_transmission>

000ba336 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   ba336:	2101      	movs	r1, #1
   ba338:	f7ff bff9 	b.w	ba32e <_ZN7TwoWire15endTransmissionEh>

000ba33c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba33c:	2200      	movs	r2, #0
   ba33e:	6840      	ldr	r0, [r0, #4]
   ba340:	4611      	mov	r1, r2
   ba342:	f7ff b91b 	b.w	b957c <network_ready>

000ba346 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba346:	2200      	movs	r2, #0
   ba348:	6840      	ldr	r0, [r0, #4]
   ba34a:	4611      	mov	r1, r2
   ba34c:	f7ff b936 	b.w	b95bc <network_listening>

000ba350 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba350:	2200      	movs	r2, #0
   ba352:	6840      	ldr	r0, [r0, #4]
   ba354:	4611      	mov	r1, r2
   ba356:	f7ff b941 	b.w	b95dc <network_get_listen_timeout>

000ba35a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba35a:	6840      	ldr	r0, [r0, #4]
   ba35c:	2200      	movs	r2, #0
   ba35e:	f7ff b935 	b.w	b95cc <network_set_listen_timeout>

000ba362 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba362:	6840      	ldr	r0, [r0, #4]
   ba364:	2200      	movs	r2, #0
   ba366:	f081 0101 	eor.w	r1, r1, #1
   ba36a:	f7ff b91f 	b.w	b95ac <network_listen>

000ba36e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba36e:	2300      	movs	r3, #0
   ba370:	6840      	ldr	r0, [r0, #4]
   ba372:	461a      	mov	r2, r3
   ba374:	4619      	mov	r1, r3
   ba376:	f7ff b911 	b.w	b959c <network_off>

000ba37a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba37a:	2300      	movs	r3, #0
   ba37c:	6840      	ldr	r0, [r0, #4]
   ba37e:	461a      	mov	r2, r3
   ba380:	4619      	mov	r1, r3
   ba382:	f7ff b903 	b.w	b958c <network_on>

000ba386 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba386:	2200      	movs	r2, #0
   ba388:	6840      	ldr	r0, [r0, #4]
   ba38a:	4611      	mov	r1, r2
   ba38c:	f7ff b8e6 	b.w	b955c <network_connecting>

000ba390 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba390:	6840      	ldr	r0, [r0, #4]
   ba392:	2200      	movs	r2, #0
   ba394:	2102      	movs	r1, #2
   ba396:	f7ff b8e9 	b.w	b956c <network_disconnect>

000ba39a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba39a:	2300      	movs	r3, #0
   ba39c:	6840      	ldr	r0, [r0, #4]
   ba39e:	461a      	mov	r2, r3
   ba3a0:	f7ff b8d4 	b.w	b954c <network_connect>

000ba3a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba3a4:	4b02      	ldr	r3, [pc, #8]	; (ba3b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba3a6:	2204      	movs	r2, #4
   ba3a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba3aa:	4a02      	ldr	r2, [pc, #8]	; (ba3b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba3ac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba3ae:	4770      	bx	lr
   ba3b0:	2003e710 	.word	0x2003e710
   ba3b4:	000bd0a0 	.word	0x000bd0a0

000ba3b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba3b8:	2300      	movs	r3, #0
   ba3ba:	6840      	ldr	r0, [r0, #4]
   ba3bc:	461a      	mov	r2, r3
   ba3be:	f7ff b8c5 	b.w	b954c <network_connect>

000ba3c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba3c2:	6840      	ldr	r0, [r0, #4]
   ba3c4:	2200      	movs	r2, #0
   ba3c6:	2102      	movs	r1, #2
   ba3c8:	f7ff b8d0 	b.w	b956c <network_disconnect>

000ba3cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba3cc:	2200      	movs	r2, #0
   ba3ce:	6840      	ldr	r0, [r0, #4]
   ba3d0:	4611      	mov	r1, r2
   ba3d2:	f7ff b8c3 	b.w	b955c <network_connecting>

000ba3d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba3d6:	2200      	movs	r2, #0
   ba3d8:	6840      	ldr	r0, [r0, #4]
   ba3da:	4611      	mov	r1, r2
   ba3dc:	f7ff b8ce 	b.w	b957c <network_ready>

000ba3e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba3e0:	2300      	movs	r3, #0
   ba3e2:	6840      	ldr	r0, [r0, #4]
   ba3e4:	461a      	mov	r2, r3
   ba3e6:	4619      	mov	r1, r3
   ba3e8:	f7ff b8d0 	b.w	b958c <network_on>

000ba3ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba3ec:	2300      	movs	r3, #0
   ba3ee:	6840      	ldr	r0, [r0, #4]
   ba3f0:	461a      	mov	r2, r3
   ba3f2:	4619      	mov	r1, r3
   ba3f4:	f7ff b8d2 	b.w	b959c <network_off>

000ba3f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba3f8:	6840      	ldr	r0, [r0, #4]
   ba3fa:	2100      	movs	r1, #0
   ba3fc:	f7ff b8f6 	b.w	b95ec <network_is_on>

000ba400 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba400:	6840      	ldr	r0, [r0, #4]
   ba402:	2100      	movs	r1, #0
   ba404:	f7ff b8fa 	b.w	b95fc <network_is_off>

000ba408 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba408:	6840      	ldr	r0, [r0, #4]
   ba40a:	2200      	movs	r2, #0
   ba40c:	f081 0101 	eor.w	r1, r1, #1
   ba410:	f7ff b8cc 	b.w	b95ac <network_listen>

000ba414 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba414:	6840      	ldr	r0, [r0, #4]
   ba416:	2200      	movs	r2, #0
   ba418:	f7ff b8d8 	b.w	b95cc <network_set_listen_timeout>

000ba41c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba41c:	2200      	movs	r2, #0
   ba41e:	6840      	ldr	r0, [r0, #4]
   ba420:	4611      	mov	r1, r2
   ba422:	f7ff b8db 	b.w	b95dc <network_get_listen_timeout>

000ba426 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba426:	2200      	movs	r2, #0
   ba428:	6840      	ldr	r0, [r0, #4]
   ba42a:	4611      	mov	r1, r2
   ba42c:	f7ff b8c6 	b.w	b95bc <network_listening>

000ba430 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba434:	b095      	sub	sp, #84	; 0x54
   ba436:	4614      	mov	r4, r2
   ba438:	460d      	mov	r5, r1
   ba43a:	4607      	mov	r7, r0
    IPAddress addr;
   ba43c:	f7ff fde6 	bl	ba00c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba440:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba442:	221c      	movs	r2, #28
   ba444:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba446:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba448:	f000 feb0 	bl	bb1ac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba44c:	2340      	movs	r3, #64	; 0x40
   ba44e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba450:	4620      	mov	r0, r4
   ba452:	466b      	mov	r3, sp
   ba454:	aa0c      	add	r2, sp, #48	; 0x30
   ba456:	2100      	movs	r1, #0
   ba458:	f7fe fe9c 	bl	b9194 <netdb_getaddrinfo>
    if (!r) {
   ba45c:	4604      	mov	r4, r0
   ba45e:	2800      	cmp	r0, #0
   ba460:	d14b      	bne.n	ba4fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba462:	4602      	mov	r2, r0
   ba464:	2101      	movs	r1, #1
   ba466:	6868      	ldr	r0, [r5, #4]
   ba468:	f7ff f888 	bl	b957c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba46c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba46e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba470:	4622      	mov	r2, r4
   ba472:	6868      	ldr	r0, [r5, #4]
   ba474:	f7ff f882 	bl	b957c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba478:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba47a:	4681      	mov	r9, r0
        bool ok = false;
   ba47c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba47e:	2e00      	cmp	r6, #0
   ba480:	d03b      	beq.n	ba4fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba482:	2900      	cmp	r1, #0
   ba484:	d139      	bne.n	ba4fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba486:	6873      	ldr	r3, [r6, #4]
   ba488:	2b02      	cmp	r3, #2
   ba48a:	d003      	beq.n	ba494 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba48c:	2b0a      	cmp	r3, #10
   ba48e:	d011      	beq.n	ba4b4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba490:	69f6      	ldr	r6, [r6, #28]
   ba492:	e7f4      	b.n	ba47e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba494:	f1b8 0f00 	cmp.w	r8, #0
   ba498:	d0fa      	beq.n	ba490 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba49a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba49c:	a806      	add	r0, sp, #24
   ba49e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba4a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba4a2:	f7ff fde1 	bl	ba068 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba4a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba4a8:	1d3c      	adds	r4, r7, #4
   ba4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba4ac:	682b      	ldr	r3, [r5, #0]
   ba4ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba4b0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba4b2:	e7ed      	b.n	ba490 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba4b4:	f1b9 0f00 	cmp.w	r9, #0
   ba4b8:	d0ea      	beq.n	ba490 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba4ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba4bc:	2210      	movs	r2, #16
   ba4be:	a801      	add	r0, sp, #4
   ba4c0:	f000 fe74 	bl	bb1ac <memset>
                    a.v = 6;
   ba4c4:	2306      	movs	r3, #6
   ba4c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba4ca:	ad01      	add	r5, sp, #4
   ba4cc:	f104 0308 	add.w	r3, r4, #8
   ba4d0:	3418      	adds	r4, #24
   ba4d2:	6818      	ldr	r0, [r3, #0]
   ba4d4:	6859      	ldr	r1, [r3, #4]
   ba4d6:	462a      	mov	r2, r5
   ba4d8:	c203      	stmia	r2!, {r0, r1}
   ba4da:	3308      	adds	r3, #8
   ba4dc:	42a3      	cmp	r3, r4
   ba4de:	4615      	mov	r5, r2
   ba4e0:	d1f7      	bne.n	ba4d2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba4e2:	a901      	add	r1, sp, #4
   ba4e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba4e6:	ad07      	add	r5, sp, #28
   ba4e8:	f7ff fd9e 	bl	ba028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba4ee:	1d3c      	adds	r4, r7, #4
   ba4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba4f2:	682b      	ldr	r3, [r5, #0]
   ba4f4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba4f6:	4649      	mov	r1, r9
   ba4f8:	e7ca      	b.n	ba490 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba4fa:	9800      	ldr	r0, [sp, #0]
   ba4fc:	f7fe fe42 	bl	b9184 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba500:	4638      	mov	r0, r7
   ba502:	b015      	add	sp, #84	; 0x54
   ba504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba508 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba508:	4b02      	ldr	r3, [pc, #8]	; (ba514 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba50a:	4a03      	ldr	r2, [pc, #12]	; (ba518 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba50c:	601a      	str	r2, [r3, #0]
   ba50e:	2200      	movs	r2, #0
   ba510:	605a      	str	r2, [r3, #4]

} // spark
   ba512:	4770      	bx	lr
   ba514:	2003e718 	.word	0x2003e718
   ba518:	000bd0dc 	.word	0x000bd0dc

000ba51c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba51c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba51e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba520:	d902      	bls.n	ba528 <pinAvailable+0xc>
    return false;
   ba522:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba524:	b002      	add	sp, #8
   ba526:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba528:	f1a0 030b 	sub.w	r3, r0, #11
   ba52c:	2b02      	cmp	r3, #2
   ba52e:	d81a      	bhi.n	ba566 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba530:	4c17      	ldr	r4, [pc, #92]	; (ba590 <pinAvailable+0x74>)
   ba532:	7821      	ldrb	r1, [r4, #0]
   ba534:	f3bf 8f5b 	dmb	ish
   ba538:	f011 0101 	ands.w	r1, r1, #1
   ba53c:	d10b      	bne.n	ba556 <pinAvailable+0x3a>
   ba53e:	4620      	mov	r0, r4
   ba540:	9101      	str	r1, [sp, #4]
   ba542:	f7f9 fdb9 	bl	b40b8 <__cxa_guard_acquire>
   ba546:	9901      	ldr	r1, [sp, #4]
   ba548:	b128      	cbz	r0, ba556 <pinAvailable+0x3a>
   ba54a:	4812      	ldr	r0, [pc, #72]	; (ba594 <pinAvailable+0x78>)
   ba54c:	f7ff f8f2 	bl	b9734 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba550:	4620      	mov	r0, r4
   ba552:	f7f9 fdb6 	bl	b40c2 <__cxa_guard_release>
   ba556:	4b0f      	ldr	r3, [pc, #60]	; (ba594 <pinAvailable+0x78>)
   ba558:	7818      	ldrb	r0, [r3, #0]
   ba55a:	f7fe ff5b 	bl	b9414 <hal_spi_is_enabled>
   ba55e:	2800      	cmp	r0, #0
   ba560:	d1df      	bne.n	ba522 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba562:	2001      	movs	r0, #1
   ba564:	e7de      	b.n	ba524 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba566:	2801      	cmp	r0, #1
   ba568:	d809      	bhi.n	ba57e <pinAvailable+0x62>
   ba56a:	f000 f8d9 	bl	ba720 <_Z19__fetch_global_Wirev>
   ba56e:	2100      	movs	r1, #0
   ba570:	7c00      	ldrb	r0, [r0, #16]
   ba572:	f7fe ff27 	bl	b93c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba576:	f080 0001 	eor.w	r0, r0, #1
   ba57a:	b2c0      	uxtb	r0, r0
   ba57c:	e7d2      	b.n	ba524 <pinAvailable+0x8>
   ba57e:	3809      	subs	r0, #9
   ba580:	2801      	cmp	r0, #1
   ba582:	d8ee      	bhi.n	ba562 <pinAvailable+0x46>
   ba584:	f000 f87a 	bl	ba67c <_Z22__fetch_global_Serial1v>
   ba588:	7c00      	ldrb	r0, [r0, #16]
   ba58a:	f7fe febb 	bl	b9304 <hal_usart_is_enabled>
   ba58e:	e7f2      	b.n	ba576 <pinAvailable+0x5a>
   ba590:	2003c7d4 	.word	0x2003c7d4
   ba594:	2003c7d8 	.word	0x2003c7d8

000ba598 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba598:	2823      	cmp	r0, #35	; 0x23
{
   ba59a:	b538      	push	{r3, r4, r5, lr}
   ba59c:	4604      	mov	r4, r0
   ba59e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba5a0:	d80a      	bhi.n	ba5b8 <pinMode+0x20>
   ba5a2:	29ff      	cmp	r1, #255	; 0xff
   ba5a4:	d008      	beq.n	ba5b8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba5a6:	f7ff ffb9 	bl	ba51c <pinAvailable>
   ba5aa:	b128      	cbz	r0, ba5b8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba5ac:	4629      	mov	r1, r5
   ba5ae:	4620      	mov	r0, r4
}
   ba5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba5b4:	f7fe bdfe 	b.w	b91b4 <HAL_Pin_Mode>
}
   ba5b8:	bd38      	pop	{r3, r4, r5, pc}

000ba5ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ba5ba:	b538      	push	{r3, r4, r5, lr}
   ba5bc:	4604      	mov	r4, r0
   ba5be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ba5c0:	f7fe fe00 	bl	b91c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba5c4:	28ff      	cmp	r0, #255	; 0xff
   ba5c6:	d010      	beq.n	ba5ea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba5c8:	2806      	cmp	r0, #6
   ba5ca:	d804      	bhi.n	ba5d6 <digitalWrite+0x1c>
   ba5cc:	234d      	movs	r3, #77	; 0x4d
   ba5ce:	fa23 f000 	lsr.w	r0, r3, r0
   ba5d2:	07c3      	lsls	r3, r0, #31
   ba5d4:	d409      	bmi.n	ba5ea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba5d6:	4620      	mov	r0, r4
   ba5d8:	f7ff ffa0 	bl	ba51c <pinAvailable>
   ba5dc:	b128      	cbz	r0, ba5ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ba5de:	4629      	mov	r1, r5
   ba5e0:	4620      	mov	r0, r4
}
   ba5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   ba5e6:	f7fe bdf5 	b.w	b91d4 <HAL_GPIO_Write>
}
   ba5ea:	bd38      	pop	{r3, r4, r5, pc}

000ba5ec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   ba5ec:	b510      	push	{r4, lr}
   ba5ee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ba5f0:	f7fe fde8 	bl	b91c4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   ba5f4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   ba5f6:	b2db      	uxtb	r3, r3
   ba5f8:	2b01      	cmp	r3, #1
   ba5fa:	d908      	bls.n	ba60e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   ba5fc:	4620      	mov	r0, r4
   ba5fe:	f7ff ff8d 	bl	ba51c <pinAvailable>
   ba602:	b120      	cbz	r0, ba60e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   ba604:	4620      	mov	r0, r4
}
   ba606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   ba60a:	f7fe bdeb 	b.w	b91e4 <HAL_GPIO_Read>
}
   ba60e:	2000      	movs	r0, #0
   ba610:	bd10      	pop	{r4, pc}

000ba612 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   ba612:	280d      	cmp	r0, #13
{
   ba614:	b510      	push	{r4, lr}
   ba616:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   ba618:	bf9c      	itt	ls
   ba61a:	340e      	addls	r4, #14
   ba61c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   ba61e:	4620      	mov	r0, r4
   ba620:	f7ff ff7c 	bl	ba51c <pinAvailable>
   ba624:	b150      	cbz	r0, ba63c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   ba626:	2103      	movs	r1, #3
   ba628:	4620      	mov	r0, r4
   ba62a:	f7fe fdbb 	bl	b91a4 <HAL_Validate_Pin_Function>
   ba62e:	2803      	cmp	r0, #3
   ba630:	d104      	bne.n	ba63c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   ba632:	4620      	mov	r0, r4
}
   ba634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   ba638:	f7fe bdec 	b.w	b9214 <hal_adc_read>
}
   ba63c:	2000      	movs	r0, #0
   ba63e:	bd10      	pop	{r4, pc}

000ba640 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   ba640:	f7fe bdf0 	b.w	b9224 <HAL_Pulse_In>

000ba644 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba644:	4770      	bx	lr
	...

000ba648 <_Z20acquireSerial1Bufferv>:
{
   ba648:	b538      	push	{r3, r4, r5, lr}
   ba64a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba64c:	2514      	movs	r5, #20
   ba64e:	462a      	mov	r2, r5
   ba650:	2100      	movs	r1, #0
   ba652:	f000 fdab 	bl	bb1ac <memset>
   ba656:	8025      	strh	r5, [r4, #0]
   ba658:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba65a:	4907      	ldr	r1, [pc, #28]	; (ba678 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba65c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba65e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba660:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba662:	f000 f881 	bl	ba768 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba666:	4904      	ldr	r1, [pc, #16]	; (ba678 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba668:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba66a:	4628      	mov	r0, r5
   ba66c:	f000 f87c 	bl	ba768 <_ZnajRKSt9nothrow_t>
    };
   ba670:	60e0      	str	r0, [r4, #12]
}
   ba672:	4620      	mov	r0, r4
   ba674:	bd38      	pop	{r3, r4, r5, pc}
   ba676:	bf00      	nop
   ba678:	000bd110 	.word	0x000bd110

000ba67c <_Z22__fetch_global_Serial1v>:
{
   ba67c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba67e:	4d0e      	ldr	r5, [pc, #56]	; (ba6b8 <_Z22__fetch_global_Serial1v+0x3c>)
   ba680:	7829      	ldrb	r1, [r5, #0]
   ba682:	f3bf 8f5b 	dmb	ish
   ba686:	f011 0401 	ands.w	r4, r1, #1
{
   ba68a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba68c:	d111      	bne.n	ba6b2 <_Z22__fetch_global_Serial1v+0x36>
   ba68e:	4628      	mov	r0, r5
   ba690:	f7f9 fd12 	bl	b40b8 <__cxa_guard_acquire>
   ba694:	b168      	cbz	r0, ba6b2 <_Z22__fetch_global_Serial1v+0x36>
   ba696:	a801      	add	r0, sp, #4
   ba698:	f7ff ffd6 	bl	ba648 <_Z20acquireSerial1Bufferv>
   ba69c:	aa01      	add	r2, sp, #4
   ba69e:	4621      	mov	r1, r4
   ba6a0:	4806      	ldr	r0, [pc, #24]	; (ba6bc <_Z22__fetch_global_Serial1v+0x40>)
   ba6a2:	f7ff fde1 	bl	ba268 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba6a6:	4628      	mov	r0, r5
   ba6a8:	f7f9 fd0b 	bl	b40c2 <__cxa_guard_release>
   ba6ac:	4804      	ldr	r0, [pc, #16]	; (ba6c0 <_Z22__fetch_global_Serial1v+0x44>)
   ba6ae:	f000 fd61 	bl	bb174 <atexit>
    return serial1;
}
   ba6b2:	4802      	ldr	r0, [pc, #8]	; (ba6bc <_Z22__fetch_global_Serial1v+0x40>)
   ba6b4:	b007      	add	sp, #28
   ba6b6:	bd30      	pop	{r4, r5, pc}
   ba6b8:	2003e720 	.word	0x2003e720
   ba6bc:	2003e724 	.word	0x2003e724
   ba6c0:	000ba645 	.word	0x000ba645

000ba6c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   ba6c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   ba6c6:	4c08      	ldr	r4, [pc, #32]	; (ba6e8 <_Z21__fetch_global_EEPROMv+0x24>)
   ba6c8:	7823      	ldrb	r3, [r4, #0]
   ba6ca:	f3bf 8f5b 	dmb	ish
   ba6ce:	07db      	lsls	r3, r3, #31
   ba6d0:	d408      	bmi.n	ba6e4 <_Z21__fetch_global_EEPROMv+0x20>
   ba6d2:	4620      	mov	r0, r4
   ba6d4:	f7f9 fcf0 	bl	b40b8 <__cxa_guard_acquire>
   ba6d8:	b120      	cbz	r0, ba6e4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   ba6da:	f7fe fdc3 	bl	b9264 <HAL_EEPROM_Init>
   ba6de:	4620      	mov	r0, r4
   ba6e0:	f7f9 fcef 	bl	b40c2 <__cxa_guard_release>
	return eeprom;
}
   ba6e4:	4801      	ldr	r0, [pc, #4]	; (ba6ec <_Z21__fetch_global_EEPROMv+0x28>)
   ba6e6:	bd10      	pop	{r4, pc}
   ba6e8:	2003e73c 	.word	0x2003e73c
   ba6ec:	2003e740 	.word	0x2003e740

000ba6f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba6f0:	4770      	bx	lr
	...

000ba6f4 <_Z17acquireWireBufferv>:
{
   ba6f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba6f6:	2520      	movs	r5, #32
   ba6f8:	2314      	movs	r3, #20
{
   ba6fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba6fc:	6003      	str	r3, [r0, #0]
   ba6fe:	6085      	str	r5, [r0, #8]
   ba700:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba702:	4906      	ldr	r1, [pc, #24]	; (ba71c <_Z17acquireWireBufferv+0x28>)
   ba704:	4628      	mov	r0, r5
   ba706:	f000 f82f 	bl	ba768 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba70a:	4904      	ldr	r1, [pc, #16]	; (ba71c <_Z17acquireWireBufferv+0x28>)
	};
   ba70c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   ba70e:	4628      	mov	r0, r5
   ba710:	f000 f82a 	bl	ba768 <_ZnajRKSt9nothrow_t>
	};
   ba714:	60e0      	str	r0, [r4, #12]
}
   ba716:	4620      	mov	r0, r4
   ba718:	bd38      	pop	{r3, r4, r5, pc}
   ba71a:	bf00      	nop
   ba71c:	000bd110 	.word	0x000bd110

000ba720 <_Z19__fetch_global_Wirev>:
{
   ba720:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba722:	4d0e      	ldr	r5, [pc, #56]	; (ba75c <_Z19__fetch_global_Wirev+0x3c>)
   ba724:	7829      	ldrb	r1, [r5, #0]
   ba726:	f3bf 8f5b 	dmb	ish
   ba72a:	f011 0401 	ands.w	r4, r1, #1
{
   ba72e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba730:	d111      	bne.n	ba756 <_Z19__fetch_global_Wirev+0x36>
   ba732:	4628      	mov	r0, r5
   ba734:	f7f9 fcc0 	bl	b40b8 <__cxa_guard_acquire>
   ba738:	b168      	cbz	r0, ba756 <_Z19__fetch_global_Wirev+0x36>
   ba73a:	a801      	add	r0, sp, #4
   ba73c:	f7ff ffda 	bl	ba6f4 <_Z17acquireWireBufferv>
   ba740:	aa01      	add	r2, sp, #4
   ba742:	4621      	mov	r1, r4
   ba744:	4806      	ldr	r0, [pc, #24]	; (ba760 <_Z19__fetch_global_Wirev+0x40>)
   ba746:	f7ff fdcf 	bl	ba2e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba74a:	4628      	mov	r0, r5
   ba74c:	f7f9 fcb9 	bl	b40c2 <__cxa_guard_release>
   ba750:	4804      	ldr	r0, [pc, #16]	; (ba764 <_Z19__fetch_global_Wirev+0x44>)
   ba752:	f000 fd0f 	bl	bb174 <atexit>
	return wire;
}
   ba756:	4802      	ldr	r0, [pc, #8]	; (ba760 <_Z19__fetch_global_Wirev+0x40>)
   ba758:	b007      	add	sp, #28
   ba75a:	bd30      	pop	{r4, r5, pc}
   ba75c:	2003e744 	.word	0x2003e744
   ba760:	2003e748 	.word	0x2003e748
   ba764:	000ba6f1 	.word	0x000ba6f1

000ba768 <_ZnajRKSt9nothrow_t>:
   ba768:	f7f9 bc95 	b.w	b4096 <_Znaj>

000ba76c <__aeabi_drsub>:
   ba76c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba770:	e002      	b.n	ba778 <__adddf3>
   ba772:	bf00      	nop

000ba774 <__aeabi_dsub>:
   ba774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba778 <__adddf3>:
   ba778:	b530      	push	{r4, r5, lr}
   ba77a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba77e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba782:	ea94 0f05 	teq	r4, r5
   ba786:	bf08      	it	eq
   ba788:	ea90 0f02 	teqeq	r0, r2
   ba78c:	bf1f      	itttt	ne
   ba78e:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba792:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba796:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba79a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba79e:	f000 80e2 	beq.w	ba966 <__adddf3+0x1ee>
   ba7a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba7a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba7aa:	bfb8      	it	lt
   ba7ac:	426d      	neglt	r5, r5
   ba7ae:	dd0c      	ble.n	ba7ca <__adddf3+0x52>
   ba7b0:	442c      	add	r4, r5
   ba7b2:	ea80 0202 	eor.w	r2, r0, r2
   ba7b6:	ea81 0303 	eor.w	r3, r1, r3
   ba7ba:	ea82 0000 	eor.w	r0, r2, r0
   ba7be:	ea83 0101 	eor.w	r1, r3, r1
   ba7c2:	ea80 0202 	eor.w	r2, r0, r2
   ba7c6:	ea81 0303 	eor.w	r3, r1, r3
   ba7ca:	2d36      	cmp	r5, #54	; 0x36
   ba7cc:	bf88      	it	hi
   ba7ce:	bd30      	pophi	{r4, r5, pc}
   ba7d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba7d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba7d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba7dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba7e0:	d002      	beq.n	ba7e8 <__adddf3+0x70>
   ba7e2:	4240      	negs	r0, r0
   ba7e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba7e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba7ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba7f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba7f4:	d002      	beq.n	ba7fc <__adddf3+0x84>
   ba7f6:	4252      	negs	r2, r2
   ba7f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba7fc:	ea94 0f05 	teq	r4, r5
   ba800:	f000 80a7 	beq.w	ba952 <__adddf3+0x1da>
   ba804:	f1a4 0401 	sub.w	r4, r4, #1
   ba808:	f1d5 0e20 	rsbs	lr, r5, #32
   ba80c:	db0d      	blt.n	ba82a <__adddf3+0xb2>
   ba80e:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba812:	fa22 f205 	lsr.w	r2, r2, r5
   ba816:	1880      	adds	r0, r0, r2
   ba818:	f141 0100 	adc.w	r1, r1, #0
   ba81c:	fa03 f20e 	lsl.w	r2, r3, lr
   ba820:	1880      	adds	r0, r0, r2
   ba822:	fa43 f305 	asr.w	r3, r3, r5
   ba826:	4159      	adcs	r1, r3
   ba828:	e00e      	b.n	ba848 <__adddf3+0xd0>
   ba82a:	f1a5 0520 	sub.w	r5, r5, #32
   ba82e:	f10e 0e20 	add.w	lr, lr, #32
   ba832:	2a01      	cmp	r2, #1
   ba834:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba838:	bf28      	it	cs
   ba83a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba83e:	fa43 f305 	asr.w	r3, r3, r5
   ba842:	18c0      	adds	r0, r0, r3
   ba844:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba84c:	d507      	bpl.n	ba85e <__adddf3+0xe6>
   ba84e:	f04f 0e00 	mov.w	lr, #0
   ba852:	f1dc 0c00 	rsbs	ip, ip, #0
   ba856:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba85a:	eb6e 0101 	sbc.w	r1, lr, r1
   ba85e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba862:	d31b      	bcc.n	ba89c <__adddf3+0x124>
   ba864:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba868:	d30c      	bcc.n	ba884 <__adddf3+0x10c>
   ba86a:	0849      	lsrs	r1, r1, #1
   ba86c:	ea5f 0030 	movs.w	r0, r0, rrx
   ba870:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba874:	f104 0401 	add.w	r4, r4, #1
   ba878:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba87c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba880:	f080 809a 	bcs.w	ba9b8 <__adddf3+0x240>
   ba884:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba888:	bf08      	it	eq
   ba88a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba88e:	f150 0000 	adcs.w	r0, r0, #0
   ba892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba896:	ea41 0105 	orr.w	r1, r1, r5
   ba89a:	bd30      	pop	{r4, r5, pc}
   ba89c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba8a0:	4140      	adcs	r0, r0
   ba8a2:	eb41 0101 	adc.w	r1, r1, r1
   ba8a6:	3c01      	subs	r4, #1
   ba8a8:	bf28      	it	cs
   ba8aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba8ae:	d2e9      	bcs.n	ba884 <__adddf3+0x10c>
   ba8b0:	f091 0f00 	teq	r1, #0
   ba8b4:	bf04      	itt	eq
   ba8b6:	4601      	moveq	r1, r0
   ba8b8:	2000      	moveq	r0, #0
   ba8ba:	fab1 f381 	clz	r3, r1
   ba8be:	bf08      	it	eq
   ba8c0:	3320      	addeq	r3, #32
   ba8c2:	f1a3 030b 	sub.w	r3, r3, #11
   ba8c6:	f1b3 0220 	subs.w	r2, r3, #32
   ba8ca:	da0c      	bge.n	ba8e6 <__adddf3+0x16e>
   ba8cc:	320c      	adds	r2, #12
   ba8ce:	dd08      	ble.n	ba8e2 <__adddf3+0x16a>
   ba8d0:	f102 0c14 	add.w	ip, r2, #20
   ba8d4:	f1c2 020c 	rsb	r2, r2, #12
   ba8d8:	fa01 f00c 	lsl.w	r0, r1, ip
   ba8dc:	fa21 f102 	lsr.w	r1, r1, r2
   ba8e0:	e00c      	b.n	ba8fc <__adddf3+0x184>
   ba8e2:	f102 0214 	add.w	r2, r2, #20
   ba8e6:	bfd8      	it	le
   ba8e8:	f1c2 0c20 	rsble	ip, r2, #32
   ba8ec:	fa01 f102 	lsl.w	r1, r1, r2
   ba8f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba8f4:	bfdc      	itt	le
   ba8f6:	ea41 010c 	orrle.w	r1, r1, ip
   ba8fa:	4090      	lslle	r0, r2
   ba8fc:	1ae4      	subs	r4, r4, r3
   ba8fe:	bfa2      	ittt	ge
   ba900:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba904:	4329      	orrge	r1, r5
   ba906:	bd30      	popge	{r4, r5, pc}
   ba908:	ea6f 0404 	mvn.w	r4, r4
   ba90c:	3c1f      	subs	r4, #31
   ba90e:	da1c      	bge.n	ba94a <__adddf3+0x1d2>
   ba910:	340c      	adds	r4, #12
   ba912:	dc0e      	bgt.n	ba932 <__adddf3+0x1ba>
   ba914:	f104 0414 	add.w	r4, r4, #20
   ba918:	f1c4 0220 	rsb	r2, r4, #32
   ba91c:	fa20 f004 	lsr.w	r0, r0, r4
   ba920:	fa01 f302 	lsl.w	r3, r1, r2
   ba924:	ea40 0003 	orr.w	r0, r0, r3
   ba928:	fa21 f304 	lsr.w	r3, r1, r4
   ba92c:	ea45 0103 	orr.w	r1, r5, r3
   ba930:	bd30      	pop	{r4, r5, pc}
   ba932:	f1c4 040c 	rsb	r4, r4, #12
   ba936:	f1c4 0220 	rsb	r2, r4, #32
   ba93a:	fa20 f002 	lsr.w	r0, r0, r2
   ba93e:	fa01 f304 	lsl.w	r3, r1, r4
   ba942:	ea40 0003 	orr.w	r0, r0, r3
   ba946:	4629      	mov	r1, r5
   ba948:	bd30      	pop	{r4, r5, pc}
   ba94a:	fa21 f004 	lsr.w	r0, r1, r4
   ba94e:	4629      	mov	r1, r5
   ba950:	bd30      	pop	{r4, r5, pc}
   ba952:	f094 0f00 	teq	r4, #0
   ba956:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba95a:	bf06      	itte	eq
   ba95c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba960:	3401      	addeq	r4, #1
   ba962:	3d01      	subne	r5, #1
   ba964:	e74e      	b.n	ba804 <__adddf3+0x8c>
   ba966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba96a:	bf18      	it	ne
   ba96c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba970:	d029      	beq.n	ba9c6 <__adddf3+0x24e>
   ba972:	ea94 0f05 	teq	r4, r5
   ba976:	bf08      	it	eq
   ba978:	ea90 0f02 	teqeq	r0, r2
   ba97c:	d005      	beq.n	ba98a <__adddf3+0x212>
   ba97e:	ea54 0c00 	orrs.w	ip, r4, r0
   ba982:	bf04      	itt	eq
   ba984:	4619      	moveq	r1, r3
   ba986:	4610      	moveq	r0, r2
   ba988:	bd30      	pop	{r4, r5, pc}
   ba98a:	ea91 0f03 	teq	r1, r3
   ba98e:	bf1e      	ittt	ne
   ba990:	2100      	movne	r1, #0
   ba992:	2000      	movne	r0, #0
   ba994:	bd30      	popne	{r4, r5, pc}
   ba996:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba99a:	d105      	bne.n	ba9a8 <__adddf3+0x230>
   ba99c:	0040      	lsls	r0, r0, #1
   ba99e:	4149      	adcs	r1, r1
   ba9a0:	bf28      	it	cs
   ba9a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba9a6:	bd30      	pop	{r4, r5, pc}
   ba9a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba9ac:	bf3c      	itt	cc
   ba9ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba9b2:	bd30      	popcc	{r4, r5, pc}
   ba9b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba9b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba9bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba9c0:	f04f 0000 	mov.w	r0, #0
   ba9c4:	bd30      	pop	{r4, r5, pc}
   ba9c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba9ca:	bf1a      	itte	ne
   ba9cc:	4619      	movne	r1, r3
   ba9ce:	4610      	movne	r0, r2
   ba9d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba9d4:	bf1c      	itt	ne
   ba9d6:	460b      	movne	r3, r1
   ba9d8:	4602      	movne	r2, r0
   ba9da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba9de:	bf06      	itte	eq
   ba9e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba9e4:	ea91 0f03 	teqeq	r1, r3
   ba9e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba9ec:	bd30      	pop	{r4, r5, pc}
   ba9ee:	bf00      	nop

000ba9f0 <__aeabi_ui2d>:
   ba9f0:	f090 0f00 	teq	r0, #0
   ba9f4:	bf04      	itt	eq
   ba9f6:	2100      	moveq	r1, #0
   ba9f8:	4770      	bxeq	lr
   ba9fa:	b530      	push	{r4, r5, lr}
   ba9fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa04:	f04f 0500 	mov.w	r5, #0
   baa08:	f04f 0100 	mov.w	r1, #0
   baa0c:	e750      	b.n	ba8b0 <__adddf3+0x138>
   baa0e:	bf00      	nop

000baa10 <__aeabi_i2d>:
   baa10:	f090 0f00 	teq	r0, #0
   baa14:	bf04      	itt	eq
   baa16:	2100      	moveq	r1, #0
   baa18:	4770      	bxeq	lr
   baa1a:	b530      	push	{r4, r5, lr}
   baa1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baa28:	bf48      	it	mi
   baa2a:	4240      	negmi	r0, r0
   baa2c:	f04f 0100 	mov.w	r1, #0
   baa30:	e73e      	b.n	ba8b0 <__adddf3+0x138>
   baa32:	bf00      	nop

000baa34 <__aeabi_f2d>:
   baa34:	0042      	lsls	r2, r0, #1
   baa36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baa3a:	ea4f 0131 	mov.w	r1, r1, rrx
   baa3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa42:	bf1f      	itttt	ne
   baa44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baa50:	4770      	bxne	lr
   baa52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baa56:	bf08      	it	eq
   baa58:	4770      	bxeq	lr
   baa5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baa5e:	bf04      	itt	eq
   baa60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baa64:	4770      	bxeq	lr
   baa66:	b530      	push	{r4, r5, lr}
   baa68:	f44f 7460 	mov.w	r4, #896	; 0x380
   baa6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baa74:	e71c      	b.n	ba8b0 <__adddf3+0x138>
   baa76:	bf00      	nop

000baa78 <__aeabi_ul2d>:
   baa78:	ea50 0201 	orrs.w	r2, r0, r1
   baa7c:	bf08      	it	eq
   baa7e:	4770      	bxeq	lr
   baa80:	b530      	push	{r4, r5, lr}
   baa82:	f04f 0500 	mov.w	r5, #0
   baa86:	e00a      	b.n	baa9e <__aeabi_l2d+0x16>

000baa88 <__aeabi_l2d>:
   baa88:	ea50 0201 	orrs.w	r2, r0, r1
   baa8c:	bf08      	it	eq
   baa8e:	4770      	bxeq	lr
   baa90:	b530      	push	{r4, r5, lr}
   baa92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baa96:	d502      	bpl.n	baa9e <__aeabi_l2d+0x16>
   baa98:	4240      	negs	r0, r0
   baa9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baaa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baaa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baaaa:	f43f aed8 	beq.w	ba85e <__adddf3+0xe6>
   baaae:	f04f 0203 	mov.w	r2, #3
   baab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baab6:	bf18      	it	ne
   baab8:	3203      	addne	r2, #3
   baaba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baabe:	bf18      	it	ne
   baac0:	3203      	addne	r2, #3
   baac2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baac6:	f1c2 0320 	rsb	r3, r2, #32
   baaca:	fa00 fc03 	lsl.w	ip, r0, r3
   baace:	fa20 f002 	lsr.w	r0, r0, r2
   baad2:	fa01 fe03 	lsl.w	lr, r1, r3
   baad6:	ea40 000e 	orr.w	r0, r0, lr
   baada:	fa21 f102 	lsr.w	r1, r1, r2
   baade:	4414      	add	r4, r2
   baae0:	e6bd      	b.n	ba85e <__adddf3+0xe6>
   baae2:	bf00      	nop

000baae4 <__aeabi_dmul>:
   baae4:	b570      	push	{r4, r5, r6, lr}
   baae6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baaea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baaee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baaf2:	bf1d      	ittte	ne
   baaf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baaf8:	ea94 0f0c 	teqne	r4, ip
   baafc:	ea95 0f0c 	teqne	r5, ip
   bab00:	f000 f8de 	bleq	bacc0 <__aeabi_dmul+0x1dc>
   bab04:	442c      	add	r4, r5
   bab06:	ea81 0603 	eor.w	r6, r1, r3
   bab0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bab0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bab12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bab16:	bf18      	it	ne
   bab18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bab1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bab20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bab24:	d038      	beq.n	bab98 <__aeabi_dmul+0xb4>
   bab26:	fba0 ce02 	umull	ip, lr, r0, r2
   bab2a:	f04f 0500 	mov.w	r5, #0
   bab2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   bab32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bab36:	fbe0 e503 	umlal	lr, r5, r0, r3
   bab3a:	f04f 0600 	mov.w	r6, #0
   bab3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bab42:	f09c 0f00 	teq	ip, #0
   bab46:	bf18      	it	ne
   bab48:	f04e 0e01 	orrne.w	lr, lr, #1
   bab4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bab50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bab54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bab58:	d204      	bcs.n	bab64 <__aeabi_dmul+0x80>
   bab5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bab5e:	416d      	adcs	r5, r5
   bab60:	eb46 0606 	adc.w	r6, r6, r6
   bab64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bab68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bab6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bab70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bab74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bab78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bab7c:	bf88      	it	hi
   bab7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bab82:	d81e      	bhi.n	babc2 <__aeabi_dmul+0xde>
   bab84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bab88:	bf08      	it	eq
   bab8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bab8e:	f150 0000 	adcs.w	r0, r0, #0
   bab92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bab96:	bd70      	pop	{r4, r5, r6, pc}
   bab98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bab9c:	ea46 0101 	orr.w	r1, r6, r1
   baba0:	ea40 0002 	orr.w	r0, r0, r2
   baba4:	ea81 0103 	eor.w	r1, r1, r3
   baba8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   babac:	bfc2      	ittt	gt
   babae:	ebd4 050c 	rsbsgt	r5, r4, ip
   babb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   babb6:	bd70      	popgt	{r4, r5, r6, pc}
   babb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   babbc:	f04f 0e00 	mov.w	lr, #0
   babc0:	3c01      	subs	r4, #1
   babc2:	f300 80ab 	bgt.w	bad1c <__aeabi_dmul+0x238>
   babc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   babca:	bfde      	ittt	le
   babcc:	2000      	movle	r0, #0
   babce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   babd2:	bd70      	pople	{r4, r5, r6, pc}
   babd4:	f1c4 0400 	rsb	r4, r4, #0
   babd8:	3c20      	subs	r4, #32
   babda:	da35      	bge.n	bac48 <__aeabi_dmul+0x164>
   babdc:	340c      	adds	r4, #12
   babde:	dc1b      	bgt.n	bac18 <__aeabi_dmul+0x134>
   babe0:	f104 0414 	add.w	r4, r4, #20
   babe4:	f1c4 0520 	rsb	r5, r4, #32
   babe8:	fa00 f305 	lsl.w	r3, r0, r5
   babec:	fa20 f004 	lsr.w	r0, r0, r4
   babf0:	fa01 f205 	lsl.w	r2, r1, r5
   babf4:	ea40 0002 	orr.w	r0, r0, r2
   babf8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   babfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bac00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac04:	fa21 f604 	lsr.w	r6, r1, r4
   bac08:	eb42 0106 	adc.w	r1, r2, r6
   bac0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac10:	bf08      	it	eq
   bac12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac16:	bd70      	pop	{r4, r5, r6, pc}
   bac18:	f1c4 040c 	rsb	r4, r4, #12
   bac1c:	f1c4 0520 	rsb	r5, r4, #32
   bac20:	fa00 f304 	lsl.w	r3, r0, r4
   bac24:	fa20 f005 	lsr.w	r0, r0, r5
   bac28:	fa01 f204 	lsl.w	r2, r1, r4
   bac2c:	ea40 0002 	orr.w	r0, r0, r2
   bac30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac38:	f141 0100 	adc.w	r1, r1, #0
   bac3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac40:	bf08      	it	eq
   bac42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac46:	bd70      	pop	{r4, r5, r6, pc}
   bac48:	f1c4 0520 	rsb	r5, r4, #32
   bac4c:	fa00 f205 	lsl.w	r2, r0, r5
   bac50:	ea4e 0e02 	orr.w	lr, lr, r2
   bac54:	fa20 f304 	lsr.w	r3, r0, r4
   bac58:	fa01 f205 	lsl.w	r2, r1, r5
   bac5c:	ea43 0302 	orr.w	r3, r3, r2
   bac60:	fa21 f004 	lsr.w	r0, r1, r4
   bac64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac68:	fa21 f204 	lsr.w	r2, r1, r4
   bac6c:	ea20 0002 	bic.w	r0, r0, r2
   bac70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bac74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac78:	bf08      	it	eq
   bac7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac7e:	bd70      	pop	{r4, r5, r6, pc}
   bac80:	f094 0f00 	teq	r4, #0
   bac84:	d10f      	bne.n	baca6 <__aeabi_dmul+0x1c2>
   bac86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bac8a:	0040      	lsls	r0, r0, #1
   bac8c:	eb41 0101 	adc.w	r1, r1, r1
   bac90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac94:	bf08      	it	eq
   bac96:	3c01      	subeq	r4, #1
   bac98:	d0f7      	beq.n	bac8a <__aeabi_dmul+0x1a6>
   bac9a:	ea41 0106 	orr.w	r1, r1, r6
   bac9e:	f095 0f00 	teq	r5, #0
   baca2:	bf18      	it	ne
   baca4:	4770      	bxne	lr
   baca6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bacaa:	0052      	lsls	r2, r2, #1
   bacac:	eb43 0303 	adc.w	r3, r3, r3
   bacb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bacb4:	bf08      	it	eq
   bacb6:	3d01      	subeq	r5, #1
   bacb8:	d0f7      	beq.n	bacaa <__aeabi_dmul+0x1c6>
   bacba:	ea43 0306 	orr.w	r3, r3, r6
   bacbe:	4770      	bx	lr
   bacc0:	ea94 0f0c 	teq	r4, ip
   bacc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bacc8:	bf18      	it	ne
   bacca:	ea95 0f0c 	teqne	r5, ip
   bacce:	d00c      	beq.n	bacea <__aeabi_dmul+0x206>
   bacd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacd4:	bf18      	it	ne
   bacd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacda:	d1d1      	bne.n	bac80 <__aeabi_dmul+0x19c>
   bacdc:	ea81 0103 	eor.w	r1, r1, r3
   bace0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bace4:	f04f 0000 	mov.w	r0, #0
   bace8:	bd70      	pop	{r4, r5, r6, pc}
   bacea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacee:	bf06      	itte	eq
   bacf0:	4610      	moveq	r0, r2
   bacf2:	4619      	moveq	r1, r3
   bacf4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacf8:	d019      	beq.n	bad2e <__aeabi_dmul+0x24a>
   bacfa:	ea94 0f0c 	teq	r4, ip
   bacfe:	d102      	bne.n	bad06 <__aeabi_dmul+0x222>
   bad00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bad04:	d113      	bne.n	bad2e <__aeabi_dmul+0x24a>
   bad06:	ea95 0f0c 	teq	r5, ip
   bad0a:	d105      	bne.n	bad18 <__aeabi_dmul+0x234>
   bad0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bad10:	bf1c      	itt	ne
   bad12:	4610      	movne	r0, r2
   bad14:	4619      	movne	r1, r3
   bad16:	d10a      	bne.n	bad2e <__aeabi_dmul+0x24a>
   bad18:	ea81 0103 	eor.w	r1, r1, r3
   bad1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bad20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bad28:	f04f 0000 	mov.w	r0, #0
   bad2c:	bd70      	pop	{r4, r5, r6, pc}
   bad2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bad36:	bd70      	pop	{r4, r5, r6, pc}

000bad38 <__aeabi_ddiv>:
   bad38:	b570      	push	{r4, r5, r6, lr}
   bad3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad46:	bf1d      	ittte	ne
   bad48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad4c:	ea94 0f0c 	teqne	r4, ip
   bad50:	ea95 0f0c 	teqne	r5, ip
   bad54:	f000 f8a7 	bleq	baea6 <__aeabi_ddiv+0x16e>
   bad58:	eba4 0405 	sub.w	r4, r4, r5
   bad5c:	ea81 0e03 	eor.w	lr, r1, r3
   bad60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bad64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad68:	f000 8088 	beq.w	bae7c <__aeabi_ddiv+0x144>
   bad6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bad70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bad74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bad78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bad7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bad80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bad84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bad88:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bad8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bad90:	429d      	cmp	r5, r3
   bad92:	bf08      	it	eq
   bad94:	4296      	cmpeq	r6, r2
   bad96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bad9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bad9e:	d202      	bcs.n	bada6 <__aeabi_ddiv+0x6e>
   bada0:	085b      	lsrs	r3, r3, #1
   bada2:	ea4f 0232 	mov.w	r2, r2, rrx
   bada6:	1ab6      	subs	r6, r6, r2
   bada8:	eb65 0503 	sbc.w	r5, r5, r3
   badac:	085b      	lsrs	r3, r3, #1
   badae:	ea4f 0232 	mov.w	r2, r2, rrx
   badb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   badb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   badba:	ebb6 0e02 	subs.w	lr, r6, r2
   badbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   badc2:	bf22      	ittt	cs
   badc4:	1ab6      	subcs	r6, r6, r2
   badc6:	4675      	movcs	r5, lr
   badc8:	ea40 000c 	orrcs.w	r0, r0, ip
   badcc:	085b      	lsrs	r3, r3, #1
   badce:	ea4f 0232 	mov.w	r2, r2, rrx
   badd2:	ebb6 0e02 	subs.w	lr, r6, r2
   badd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   badda:	bf22      	ittt	cs
   baddc:	1ab6      	subcs	r6, r6, r2
   badde:	4675      	movcs	r5, lr
   bade0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bade4:	085b      	lsrs	r3, r3, #1
   bade6:	ea4f 0232 	mov.w	r2, r2, rrx
   badea:	ebb6 0e02 	subs.w	lr, r6, r2
   badee:	eb75 0e03 	sbcs.w	lr, r5, r3
   badf2:	bf22      	ittt	cs
   badf4:	1ab6      	subcs	r6, r6, r2
   badf6:	4675      	movcs	r5, lr
   badf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   badfc:	085b      	lsrs	r3, r3, #1
   badfe:	ea4f 0232 	mov.w	r2, r2, rrx
   bae02:	ebb6 0e02 	subs.w	lr, r6, r2
   bae06:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae0a:	bf22      	ittt	cs
   bae0c:	1ab6      	subcs	r6, r6, r2
   bae0e:	4675      	movcs	r5, lr
   bae10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bae14:	ea55 0e06 	orrs.w	lr, r5, r6
   bae18:	d018      	beq.n	bae4c <__aeabi_ddiv+0x114>
   bae1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bae1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bae22:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bae26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bae2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bae2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bae32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bae36:	d1c0      	bne.n	badba <__aeabi_ddiv+0x82>
   bae38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae3c:	d10b      	bne.n	bae56 <__aeabi_ddiv+0x11e>
   bae3e:	ea41 0100 	orr.w	r1, r1, r0
   bae42:	f04f 0000 	mov.w	r0, #0
   bae46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bae4a:	e7b6      	b.n	badba <__aeabi_ddiv+0x82>
   bae4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae50:	bf04      	itt	eq
   bae52:	4301      	orreq	r1, r0
   bae54:	2000      	moveq	r0, #0
   bae56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bae5a:	bf88      	it	hi
   bae5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bae60:	f63f aeaf 	bhi.w	babc2 <__aeabi_dmul+0xde>
   bae64:	ebb5 0c03 	subs.w	ip, r5, r3
   bae68:	bf04      	itt	eq
   bae6a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bae6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae72:	f150 0000 	adcs.w	r0, r0, #0
   bae76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae7a:	bd70      	pop	{r4, r5, r6, pc}
   bae7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bae80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bae84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bae88:	bfc2      	ittt	gt
   bae8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bae8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bae92:	bd70      	popgt	{r4, r5, r6, pc}
   bae94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae98:	f04f 0e00 	mov.w	lr, #0
   bae9c:	3c01      	subs	r4, #1
   bae9e:	e690      	b.n	babc2 <__aeabi_dmul+0xde>
   baea0:	ea45 0e06 	orr.w	lr, r5, r6
   baea4:	e68d      	b.n	babc2 <__aeabi_dmul+0xde>
   baea6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baeaa:	ea94 0f0c 	teq	r4, ip
   baeae:	bf08      	it	eq
   baeb0:	ea95 0f0c 	teqeq	r5, ip
   baeb4:	f43f af3b 	beq.w	bad2e <__aeabi_dmul+0x24a>
   baeb8:	ea94 0f0c 	teq	r4, ip
   baebc:	d10a      	bne.n	baed4 <__aeabi_ddiv+0x19c>
   baebe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baec2:	f47f af34 	bne.w	bad2e <__aeabi_dmul+0x24a>
   baec6:	ea95 0f0c 	teq	r5, ip
   baeca:	f47f af25 	bne.w	bad18 <__aeabi_dmul+0x234>
   baece:	4610      	mov	r0, r2
   baed0:	4619      	mov	r1, r3
   baed2:	e72c      	b.n	bad2e <__aeabi_dmul+0x24a>
   baed4:	ea95 0f0c 	teq	r5, ip
   baed8:	d106      	bne.n	baee8 <__aeabi_ddiv+0x1b0>
   baeda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baede:	f43f aefd 	beq.w	bacdc <__aeabi_dmul+0x1f8>
   baee2:	4610      	mov	r0, r2
   baee4:	4619      	mov	r1, r3
   baee6:	e722      	b.n	bad2e <__aeabi_dmul+0x24a>
   baee8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baeec:	bf18      	it	ne
   baeee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baef2:	f47f aec5 	bne.w	bac80 <__aeabi_dmul+0x19c>
   baef6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   baefa:	f47f af0d 	bne.w	bad18 <__aeabi_dmul+0x234>
   baefe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   baf02:	f47f aeeb 	bne.w	bacdc <__aeabi_dmul+0x1f8>
   baf06:	e712      	b.n	bad2e <__aeabi_dmul+0x24a>

000baf08 <__gedf2>:
   baf08:	f04f 3cff 	mov.w	ip, #4294967295
   baf0c:	e006      	b.n	baf1c <__cmpdf2+0x4>
   baf0e:	bf00      	nop

000baf10 <__ledf2>:
   baf10:	f04f 0c01 	mov.w	ip, #1
   baf14:	e002      	b.n	baf1c <__cmpdf2+0x4>
   baf16:	bf00      	nop

000baf18 <__cmpdf2>:
   baf18:	f04f 0c01 	mov.w	ip, #1
   baf1c:	f84d cd04 	str.w	ip, [sp, #-4]!
   baf20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf2c:	bf18      	it	ne
   baf2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baf32:	d01b      	beq.n	baf6c <__cmpdf2+0x54>
   baf34:	b001      	add	sp, #4
   baf36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baf3a:	bf0c      	ite	eq
   baf3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   baf40:	ea91 0f03 	teqne	r1, r3
   baf44:	bf02      	ittt	eq
   baf46:	ea90 0f02 	teqeq	r0, r2
   baf4a:	2000      	moveq	r0, #0
   baf4c:	4770      	bxeq	lr
   baf4e:	f110 0f00 	cmn.w	r0, #0
   baf52:	ea91 0f03 	teq	r1, r3
   baf56:	bf58      	it	pl
   baf58:	4299      	cmppl	r1, r3
   baf5a:	bf08      	it	eq
   baf5c:	4290      	cmpeq	r0, r2
   baf5e:	bf2c      	ite	cs
   baf60:	17d8      	asrcs	r0, r3, #31
   baf62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   baf66:	f040 0001 	orr.w	r0, r0, #1
   baf6a:	4770      	bx	lr
   baf6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf74:	d102      	bne.n	baf7c <__cmpdf2+0x64>
   baf76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baf7a:	d107      	bne.n	baf8c <__cmpdf2+0x74>
   baf7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf84:	d1d6      	bne.n	baf34 <__cmpdf2+0x1c>
   baf86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baf8a:	d0d3      	beq.n	baf34 <__cmpdf2+0x1c>
   baf8c:	f85d 0b04 	ldr.w	r0, [sp], #4
   baf90:	4770      	bx	lr
   baf92:	bf00      	nop

000baf94 <__aeabi_cdrcmple>:
   baf94:	4684      	mov	ip, r0
   baf96:	4610      	mov	r0, r2
   baf98:	4662      	mov	r2, ip
   baf9a:	468c      	mov	ip, r1
   baf9c:	4619      	mov	r1, r3
   baf9e:	4663      	mov	r3, ip
   bafa0:	e000      	b.n	bafa4 <__aeabi_cdcmpeq>
   bafa2:	bf00      	nop

000bafa4 <__aeabi_cdcmpeq>:
   bafa4:	b501      	push	{r0, lr}
   bafa6:	f7ff ffb7 	bl	baf18 <__cmpdf2>
   bafaa:	2800      	cmp	r0, #0
   bafac:	bf48      	it	mi
   bafae:	f110 0f00 	cmnmi.w	r0, #0
   bafb2:	bd01      	pop	{r0, pc}

000bafb4 <__aeabi_dcmpeq>:
   bafb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafb8:	f7ff fff4 	bl	bafa4 <__aeabi_cdcmpeq>
   bafbc:	bf0c      	ite	eq
   bafbe:	2001      	moveq	r0, #1
   bafc0:	2000      	movne	r0, #0
   bafc2:	f85d fb08 	ldr.w	pc, [sp], #8
   bafc6:	bf00      	nop

000bafc8 <__aeabi_dcmplt>:
   bafc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafcc:	f7ff ffea 	bl	bafa4 <__aeabi_cdcmpeq>
   bafd0:	bf34      	ite	cc
   bafd2:	2001      	movcc	r0, #1
   bafd4:	2000      	movcs	r0, #0
   bafd6:	f85d fb08 	ldr.w	pc, [sp], #8
   bafda:	bf00      	nop

000bafdc <__aeabi_dcmple>:
   bafdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafe0:	f7ff ffe0 	bl	bafa4 <__aeabi_cdcmpeq>
   bafe4:	bf94      	ite	ls
   bafe6:	2001      	movls	r0, #1
   bafe8:	2000      	movhi	r0, #0
   bafea:	f85d fb08 	ldr.w	pc, [sp], #8
   bafee:	bf00      	nop

000baff0 <__aeabi_dcmpge>:
   baff0:	f84d ed08 	str.w	lr, [sp, #-8]!
   baff4:	f7ff ffce 	bl	baf94 <__aeabi_cdrcmple>
   baff8:	bf94      	ite	ls
   baffa:	2001      	movls	r0, #1
   baffc:	2000      	movhi	r0, #0
   baffe:	f85d fb08 	ldr.w	pc, [sp], #8
   bb002:	bf00      	nop

000bb004 <__aeabi_dcmpgt>:
   bb004:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb008:	f7ff ffc4 	bl	baf94 <__aeabi_cdrcmple>
   bb00c:	bf34      	ite	cc
   bb00e:	2001      	movcc	r0, #1
   bb010:	2000      	movcs	r0, #0
   bb012:	f85d fb08 	ldr.w	pc, [sp], #8
   bb016:	bf00      	nop

000bb018 <__aeabi_dcmpun>:
   bb018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb020:	d102      	bne.n	bb028 <__aeabi_dcmpun+0x10>
   bb022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb026:	d10a      	bne.n	bb03e <__aeabi_dcmpun+0x26>
   bb028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb02c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb030:	d102      	bne.n	bb038 <__aeabi_dcmpun+0x20>
   bb032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb036:	d102      	bne.n	bb03e <__aeabi_dcmpun+0x26>
   bb038:	f04f 0000 	mov.w	r0, #0
   bb03c:	4770      	bx	lr
   bb03e:	f04f 0001 	mov.w	r0, #1
   bb042:	4770      	bx	lr

000bb044 <__aeabi_d2iz>:
   bb044:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb048:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb04c:	d215      	bcs.n	bb07a <__aeabi_d2iz+0x36>
   bb04e:	d511      	bpl.n	bb074 <__aeabi_d2iz+0x30>
   bb050:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb054:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb058:	d912      	bls.n	bb080 <__aeabi_d2iz+0x3c>
   bb05a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb05e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb062:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb066:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb06a:	fa23 f002 	lsr.w	r0, r3, r2
   bb06e:	bf18      	it	ne
   bb070:	4240      	negne	r0, r0
   bb072:	4770      	bx	lr
   bb074:	f04f 0000 	mov.w	r0, #0
   bb078:	4770      	bx	lr
   bb07a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb07e:	d105      	bne.n	bb08c <__aeabi_d2iz+0x48>
   bb080:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bb084:	bf08      	it	eq
   bb086:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bb08a:	4770      	bx	lr
   bb08c:	f04f 0000 	mov.w	r0, #0
   bb090:	4770      	bx	lr
   bb092:	bf00      	nop

000bb094 <__aeabi_d2uiz>:
   bb094:	004a      	lsls	r2, r1, #1
   bb096:	d211      	bcs.n	bb0bc <__aeabi_d2uiz+0x28>
   bb098:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb09c:	d211      	bcs.n	bb0c2 <__aeabi_d2uiz+0x2e>
   bb09e:	d50d      	bpl.n	bb0bc <__aeabi_d2uiz+0x28>
   bb0a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb0a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb0a8:	d40e      	bmi.n	bb0c8 <__aeabi_d2uiz+0x34>
   bb0aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb0ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb0b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb0b6:	fa23 f002 	lsr.w	r0, r3, r2
   bb0ba:	4770      	bx	lr
   bb0bc:	f04f 0000 	mov.w	r0, #0
   bb0c0:	4770      	bx	lr
   bb0c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb0c6:	d102      	bne.n	bb0ce <__aeabi_d2uiz+0x3a>
   bb0c8:	f04f 30ff 	mov.w	r0, #4294967295
   bb0cc:	4770      	bx	lr
   bb0ce:	f04f 0000 	mov.w	r0, #0
   bb0d2:	4770      	bx	lr

000bb0d4 <__aeabi_d2f>:
   bb0d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb0d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb0dc:	bf24      	itt	cs
   bb0de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb0e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb0e6:	d90d      	bls.n	bb104 <__aeabi_d2f+0x30>
   bb0e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb0ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb0f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb0f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb0f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb0fc:	bf08      	it	eq
   bb0fe:	f020 0001 	biceq.w	r0, r0, #1
   bb102:	4770      	bx	lr
   bb104:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb108:	d121      	bne.n	bb14e <__aeabi_d2f+0x7a>
   bb10a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb10e:	bfbc      	itt	lt
   bb110:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb114:	4770      	bxlt	lr
   bb116:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb11a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb11e:	f1c2 0218 	rsb	r2, r2, #24
   bb122:	f1c2 0c20 	rsb	ip, r2, #32
   bb126:	fa10 f30c 	lsls.w	r3, r0, ip
   bb12a:	fa20 f002 	lsr.w	r0, r0, r2
   bb12e:	bf18      	it	ne
   bb130:	f040 0001 	orrne.w	r0, r0, #1
   bb134:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb138:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb13c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb140:	ea40 000c 	orr.w	r0, r0, ip
   bb144:	fa23 f302 	lsr.w	r3, r3, r2
   bb148:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb14c:	e7cc      	b.n	bb0e8 <__aeabi_d2f+0x14>
   bb14e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb152:	d107      	bne.n	bb164 <__aeabi_d2f+0x90>
   bb154:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb158:	bf1e      	ittt	ne
   bb15a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb15e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb162:	4770      	bxne	lr
   bb164:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb168:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb16c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb170:	4770      	bx	lr
   bb172:	bf00      	nop

000bb174 <atexit>:
   bb174:	2300      	movs	r3, #0
   bb176:	4601      	mov	r1, r0
   bb178:	461a      	mov	r2, r3
   bb17a:	4618      	mov	r0, r3
   bb17c:	f000 b8c8 	b.w	bb310 <__register_exitproc>

000bb180 <calloc>:
   bb180:	4b02      	ldr	r3, [pc, #8]	; (bb18c <calloc+0xc>)
   bb182:	460a      	mov	r2, r1
   bb184:	4601      	mov	r1, r0
   bb186:	6818      	ldr	r0, [r3, #0]
   bb188:	f000 b818 	b.w	bb1bc <_calloc_r>
   bb18c:	2003c76c 	.word	0x2003c76c

000bb190 <memcpy>:
   bb190:	440a      	add	r2, r1
   bb192:	4291      	cmp	r1, r2
   bb194:	f100 33ff 	add.w	r3, r0, #4294967295
   bb198:	d100      	bne.n	bb19c <memcpy+0xc>
   bb19a:	4770      	bx	lr
   bb19c:	b510      	push	{r4, lr}
   bb19e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb1a6:	4291      	cmp	r1, r2
   bb1a8:	d1f9      	bne.n	bb19e <memcpy+0xe>
   bb1aa:	bd10      	pop	{r4, pc}

000bb1ac <memset>:
   bb1ac:	4402      	add	r2, r0
   bb1ae:	4603      	mov	r3, r0
   bb1b0:	4293      	cmp	r3, r2
   bb1b2:	d100      	bne.n	bb1b6 <memset+0xa>
   bb1b4:	4770      	bx	lr
   bb1b6:	f803 1b01 	strb.w	r1, [r3], #1
   bb1ba:	e7f9      	b.n	bb1b0 <memset+0x4>

000bb1bc <_calloc_r>:
   bb1bc:	b513      	push	{r0, r1, r4, lr}
   bb1be:	434a      	muls	r2, r1
   bb1c0:	4611      	mov	r1, r2
   bb1c2:	9201      	str	r2, [sp, #4]
   bb1c4:	f7fe fa5a 	bl	b967c <_malloc_r>
   bb1c8:	4604      	mov	r4, r0
   bb1ca:	b118      	cbz	r0, bb1d4 <_calloc_r+0x18>
   bb1cc:	9a01      	ldr	r2, [sp, #4]
   bb1ce:	2100      	movs	r1, #0
   bb1d0:	f7ff ffec 	bl	bb1ac <memset>
   bb1d4:	4620      	mov	r0, r4
   bb1d6:	b002      	add	sp, #8
   bb1d8:	bd10      	pop	{r4, pc}
	...

000bb1dc <srand>:
   bb1dc:	b538      	push	{r3, r4, r5, lr}
   bb1de:	4b10      	ldr	r3, [pc, #64]	; (bb220 <srand+0x44>)
   bb1e0:	681d      	ldr	r5, [r3, #0]
   bb1e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1e4:	4604      	mov	r4, r0
   bb1e6:	b9b3      	cbnz	r3, bb216 <srand+0x3a>
   bb1e8:	2018      	movs	r0, #24
   bb1ea:	f7fe fa1f 	bl	b962c <malloc>
   bb1ee:	4602      	mov	r2, r0
   bb1f0:	63a8      	str	r0, [r5, #56]	; 0x38
   bb1f2:	b920      	cbnz	r0, bb1fe <srand+0x22>
   bb1f4:	4b0b      	ldr	r3, [pc, #44]	; (bb224 <srand+0x48>)
   bb1f6:	480c      	ldr	r0, [pc, #48]	; (bb228 <srand+0x4c>)
   bb1f8:	2142      	movs	r1, #66	; 0x42
   bb1fa:	f7fe fa47 	bl	b968c <__assert_func>
   bb1fe:	490b      	ldr	r1, [pc, #44]	; (bb22c <srand+0x50>)
   bb200:	4b0b      	ldr	r3, [pc, #44]	; (bb230 <srand+0x54>)
   bb202:	e9c0 1300 	strd	r1, r3, [r0]
   bb206:	4b0b      	ldr	r3, [pc, #44]	; (bb234 <srand+0x58>)
   bb208:	6083      	str	r3, [r0, #8]
   bb20a:	230b      	movs	r3, #11
   bb20c:	8183      	strh	r3, [r0, #12]
   bb20e:	2100      	movs	r1, #0
   bb210:	2001      	movs	r0, #1
   bb212:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb216:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb218:	2200      	movs	r2, #0
   bb21a:	611c      	str	r4, [r3, #16]
   bb21c:	615a      	str	r2, [r3, #20]
   bb21e:	bd38      	pop	{r3, r4, r5, pc}
   bb220:	2003c76c 	.word	0x2003c76c
   bb224:	000bd111 	.word	0x000bd111
   bb228:	000bd128 	.word	0x000bd128
   bb22c:	abcd330e 	.word	0xabcd330e
   bb230:	e66d1234 	.word	0xe66d1234
   bb234:	0005deec 	.word	0x0005deec

000bb238 <strcpy>:
   bb238:	4603      	mov	r3, r0
   bb23a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb23e:	f803 2b01 	strb.w	r2, [r3], #1
   bb242:	2a00      	cmp	r2, #0
   bb244:	d1f9      	bne.n	bb23a <strcpy+0x2>
   bb246:	4770      	bx	lr

000bb248 <strlen>:
   bb248:	4603      	mov	r3, r0
   bb24a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb24e:	2a00      	cmp	r2, #0
   bb250:	d1fb      	bne.n	bb24a <strlen+0x2>
   bb252:	1a18      	subs	r0, r3, r0
   bb254:	3801      	subs	r0, #1
   bb256:	4770      	bx	lr

000bb258 <strtok>:
   bb258:	4b16      	ldr	r3, [pc, #88]	; (bb2b4 <strtok+0x5c>)
   bb25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb25c:	681e      	ldr	r6, [r3, #0]
   bb25e:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb260:	4605      	mov	r5, r0
   bb262:	b9fc      	cbnz	r4, bb2a4 <strtok+0x4c>
   bb264:	2050      	movs	r0, #80	; 0x50
   bb266:	9101      	str	r1, [sp, #4]
   bb268:	f7fe f9e0 	bl	b962c <malloc>
   bb26c:	9901      	ldr	r1, [sp, #4]
   bb26e:	65b0      	str	r0, [r6, #88]	; 0x58
   bb270:	4602      	mov	r2, r0
   bb272:	b920      	cbnz	r0, bb27e <strtok+0x26>
   bb274:	4b10      	ldr	r3, [pc, #64]	; (bb2b8 <strtok+0x60>)
   bb276:	4811      	ldr	r0, [pc, #68]	; (bb2bc <strtok+0x64>)
   bb278:	2157      	movs	r1, #87	; 0x57
   bb27a:	f7fe fa07 	bl	b968c <__assert_func>
   bb27e:	e9c0 4400 	strd	r4, r4, [r0]
   bb282:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb286:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb28a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb28e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb292:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb296:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb29a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb29e:	6184      	str	r4, [r0, #24]
   bb2a0:	7704      	strb	r4, [r0, #28]
   bb2a2:	6244      	str	r4, [r0, #36]	; 0x24
   bb2a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb2a6:	2301      	movs	r3, #1
   bb2a8:	4628      	mov	r0, r5
   bb2aa:	b002      	add	sp, #8
   bb2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb2b0:	f000 b806 	b.w	bb2c0 <__strtok_r>
   bb2b4:	2003c76c 	.word	0x2003c76c
   bb2b8:	000bd111 	.word	0x000bd111
   bb2bc:	000bd1a5 	.word	0x000bd1a5

000bb2c0 <__strtok_r>:
   bb2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb2c2:	b908      	cbnz	r0, bb2c8 <__strtok_r+0x8>
   bb2c4:	6810      	ldr	r0, [r2, #0]
   bb2c6:	b188      	cbz	r0, bb2ec <__strtok_r+0x2c>
   bb2c8:	4604      	mov	r4, r0
   bb2ca:	4620      	mov	r0, r4
   bb2cc:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb2d0:	460f      	mov	r7, r1
   bb2d2:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb2d6:	b91e      	cbnz	r6, bb2e0 <__strtok_r+0x20>
   bb2d8:	b965      	cbnz	r5, bb2f4 <__strtok_r+0x34>
   bb2da:	6015      	str	r5, [r2, #0]
   bb2dc:	4628      	mov	r0, r5
   bb2de:	e005      	b.n	bb2ec <__strtok_r+0x2c>
   bb2e0:	42b5      	cmp	r5, r6
   bb2e2:	d1f6      	bne.n	bb2d2 <__strtok_r+0x12>
   bb2e4:	2b00      	cmp	r3, #0
   bb2e6:	d1f0      	bne.n	bb2ca <__strtok_r+0xa>
   bb2e8:	6014      	str	r4, [r2, #0]
   bb2ea:	7003      	strb	r3, [r0, #0]
   bb2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb2ee:	461c      	mov	r4, r3
   bb2f0:	e00c      	b.n	bb30c <__strtok_r+0x4c>
   bb2f2:	b915      	cbnz	r5, bb2fa <__strtok_r+0x3a>
   bb2f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb2f8:	460e      	mov	r6, r1
   bb2fa:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb2fe:	42ab      	cmp	r3, r5
   bb300:	d1f7      	bne.n	bb2f2 <__strtok_r+0x32>
   bb302:	2b00      	cmp	r3, #0
   bb304:	d0f3      	beq.n	bb2ee <__strtok_r+0x2e>
   bb306:	2300      	movs	r3, #0
   bb308:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb30c:	6014      	str	r4, [r2, #0]
   bb30e:	e7ed      	b.n	bb2ec <__strtok_r+0x2c>

000bb310 <__register_exitproc>:
   bb310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb314:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb3d0 <__register_exitproc+0xc0>
   bb318:	4606      	mov	r6, r0
   bb31a:	f8d8 0000 	ldr.w	r0, [r8]
   bb31e:	461f      	mov	r7, r3
   bb320:	460d      	mov	r5, r1
   bb322:	4691      	mov	r9, r2
   bb324:	f000 f856 	bl	bb3d4 <__retarget_lock_acquire_recursive>
   bb328:	4b25      	ldr	r3, [pc, #148]	; (bb3c0 <__register_exitproc+0xb0>)
   bb32a:	681c      	ldr	r4, [r3, #0]
   bb32c:	b934      	cbnz	r4, bb33c <__register_exitproc+0x2c>
   bb32e:	4c25      	ldr	r4, [pc, #148]	; (bb3c4 <__register_exitproc+0xb4>)
   bb330:	601c      	str	r4, [r3, #0]
   bb332:	4b25      	ldr	r3, [pc, #148]	; (bb3c8 <__register_exitproc+0xb8>)
   bb334:	b113      	cbz	r3, bb33c <__register_exitproc+0x2c>
   bb336:	681b      	ldr	r3, [r3, #0]
   bb338:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb33c:	6863      	ldr	r3, [r4, #4]
   bb33e:	2b1f      	cmp	r3, #31
   bb340:	dd07      	ble.n	bb352 <__register_exitproc+0x42>
   bb342:	f8d8 0000 	ldr.w	r0, [r8]
   bb346:	f000 f847 	bl	bb3d8 <__retarget_lock_release_recursive>
   bb34a:	f04f 30ff 	mov.w	r0, #4294967295
   bb34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb352:	b34e      	cbz	r6, bb3a8 <__register_exitproc+0x98>
   bb354:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb358:	b988      	cbnz	r0, bb37e <__register_exitproc+0x6e>
   bb35a:	4b1c      	ldr	r3, [pc, #112]	; (bb3cc <__register_exitproc+0xbc>)
   bb35c:	b923      	cbnz	r3, bb368 <__register_exitproc+0x58>
   bb35e:	f8d8 0000 	ldr.w	r0, [r8]
   bb362:	f000 f838 	bl	bb3d6 <__retarget_lock_release>
   bb366:	e7f0      	b.n	bb34a <__register_exitproc+0x3a>
   bb368:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb36c:	f7fe f95e 	bl	b962c <malloc>
   bb370:	2800      	cmp	r0, #0
   bb372:	d0f4      	beq.n	bb35e <__register_exitproc+0x4e>
   bb374:	2300      	movs	r3, #0
   bb376:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb37a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb37e:	6863      	ldr	r3, [r4, #4]
   bb380:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb384:	2201      	movs	r2, #1
   bb386:	409a      	lsls	r2, r3
   bb388:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb38c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb390:	4313      	orrs	r3, r2
   bb392:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb396:	2e02      	cmp	r6, #2
   bb398:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb39c:	bf02      	ittt	eq
   bb39e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb3a2:	4313      	orreq	r3, r2
   bb3a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb3a8:	6863      	ldr	r3, [r4, #4]
   bb3aa:	f8d8 0000 	ldr.w	r0, [r8]
   bb3ae:	1c5a      	adds	r2, r3, #1
   bb3b0:	3302      	adds	r3, #2
   bb3b2:	6062      	str	r2, [r4, #4]
   bb3b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb3b8:	f000 f80e 	bl	bb3d8 <__retarget_lock_release_recursive>
   bb3bc:	2000      	movs	r0, #0
   bb3be:	e7c6      	b.n	bb34e <__register_exitproc+0x3e>
   bb3c0:	2003e7e8 	.word	0x2003e7e8
   bb3c4:	2003e75c 	.word	0x2003e75c
   bb3c8:	00000000 	.word	0x00000000
   bb3cc:	000b962d 	.word	0x000b962d
   bb3d0:	2003c7d0 	.word	0x2003c7d0

000bb3d4 <__retarget_lock_acquire_recursive>:
   bb3d4:	4770      	bx	lr

000bb3d6 <__retarget_lock_release>:
   bb3d6:	4770      	bx	lr

000bb3d8 <__retarget_lock_release_recursive>:
   bb3d8:	4770      	bx	lr

000bb3da <link_code_end>:
	...

000bb3dc <dynalib_user>:
   bb3dc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb3ec:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb3fc:	7620 7269 7574 6c61 4900 766e 6c61 6469      virtual.Invalid
   bb40c:	6553 736e 726f 7245 6f72 0072 6156 6f6c     SensorError.Valo
   bb41c:	2072 6f6e 7620 6c61 6469 006f 654c 4564     r no valido.LedE
   bb42c:	7272 726f 704f 6974 6e6f 4e00 746f 2061     rrorOption.Nota 
   bb43c:	6e69 c376 6ca1 6469 0061 6954 6f70 6920     inv..lida.Tipo i
   bb44c:	766e a1c3 696c 6f64 5200 0045 494d 4600     nv..lido.RE.MI.F
   bb45c:	0041 4f53 004c 414c 5300 0049 435f 5f00     A.SOL.LA.SI._C._
   bb46c:	004e 425f 4900 766e 6c61 6469 7320 6e65     N._B.Invalid sen
   bb47c:	6f73 2172 2d20 203e 6553 736e 726f 7220     sor! -> Sensor r
   bb48c:	7065 7465 6469 206f 6e65 6520 206c 6c62     epetido en el bl
   bb49c:	716f 6575 4d00 4649 5241 5f45 6552 6461     oque.MIFARE_Read
   bb4ac:	2928 6620 6961 656c 3a64 0020 4350 5f44     () failed: .PCD_
   bb4bc:	7541 6874 6e65 6974 6163 6574 2928 6620     Authenticate() f
   bb4cc:	6961 656c 3a64 0020 6154 4967 666e 3a6f     ailed: .TagInfo:
   bb4dc:	2520 0073 6f43 656e 7463 7261 6120 206c      %s.Conectar al 
   bb4ec:	7570 7265 6f74 4120 0a30 4300 6e6f 6365     puerto A0..Conec
   bb4fc:	6174 2072 6c61 7020 6575 7472 206f 3241     tar al puerto A2
   bb50c:	000a 6f43 656e 7463 7261 6120 206c 7570     ..Conectar al pu
   bb51c:	7265 6f74 4120 0a34 4300 6e6f 6365 6174     erto A4..Conecta
   bb52c:	2072 6c61 7020 6575 7472 206f 3244 000a     r al puerto D2..
   bb53c:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   bb54c:	6f74 4420 0a34 4300 6e6f 6365 6174 2072     to D4..Conectar 
   bb55c:	6c61 7020 6575 7472 206f 3644 000a 7245     al puerto D6..Er
   bb56c:	6f72 3a72 4e20 206f 6168 2079 616d 2073     ror: No hay mas 
   bb57c:	7570 7265 6f74 2073 6964 7073 6e6f 6269     puertos disponib
   bb58c:	656c 2073 000a 4545 5250 4d4f 6520 706d     les ..EEPROM emp
   bb59c:	7974 2d00 3000 3023 3023 3223 3000 3023     ty.-.0#0#0#2.0#0
   bb5ac:	3023 3323 3000 3023 3123 3423 3000 3023     #0#3.0#0#1#4.0#0
   bb5bc:	3023 3523 3000 3023 3123 3623 3000 3023     #0#5.0#0#1#6.0#0
   bb5cc:	3123 3723 3000 3123 3123 3123 3023 3000     #1#7.0#1#1#1#0.0
   bb5dc:	3123 3123 3123 3123 3000 3123 3123 3023     #1#1#1#1.0#1#1#0
   bb5ec:	3023 3000 3123 3123 3023 3123 3000 3123     #0.0#1#1#0#1.0#1
   bb5fc:	3123 3023 3223 3000 3123 3123 3023 3323     #1#0#2.0#1#1#0#3
   bb60c:	3000 3123 3123 3023 3423 3000 3123 3123     .0#1#1#0#4.0#1#1
   bb61c:	3023 3523 3100 3023 3123 3723 3023 3100     #0#5.1#0#1#7#0.1
   bb62c:	3023 3123 3723 3123 3100 3023 3023 3223     #0#1#7#1.1#0#0#2
   bb63c:	3023 3100 3023 3023 3223 3123 3100 3023     #0.1#0#0#2#1.1#0
   bb64c:	3023 3323 3023 3100 3023 3023 3323 3123     #0#3#0.1#0#0#3#1
   bb65c:	3100 3023 3123 3423 3023 3100 3023 3123     .1#0#1#4#0.1#0#1
   bb66c:	3423 3123 3100 3023 3023 3523 3023 3100     #4#1.1#0#0#5#0.1
   bb67c:	3023 3023 3523 3123 3100 3023 3123 3623     #0#0#5#1.1#0#1#6
   bb68c:	3023 3100 3023 3123 3623 3223 3100 3123     #0.1#0#1#6#2.1#1
   bb69c:	3123 3123 3023 3100 3123 3123 3123 3123     #1#1#0.1#1#1#1#1
   bb6ac:	3100 3123 3123 3023 3023 3100 3123 3123     .1#1#1#0#0.1#1#1
   bb6bc:	3023 3123 3100 3123 3123 3023 3223 3100     #0#1.1#1#1#0#2.1
   bb6cc:	3123 3123 3023 3323 3100 3123 3123 3023     #1#1#0#3.1#1#1#0
   bb6dc:	3423 3100 3123 3123 3023 3523 3100 3123     #4.1#1#1#0#5.1#1
   bb6ec:	3123 3023 3623 3100 3123 3123 3023 3723     #1#0#6.1#1#1#0#7
   bb6fc:	3100 3123 3123 3023 3823 3100 3323 3023     .1#1#1#0#8.1#3#0
   bb70c:	3100 3323 3123 3100 3523 3200 3023 3023     .1#3#1.1#5.2#0#0
   bb71c:	3023 3200 3023 3023 3123 3200 3023 3023     #0.2#0#0#1.2#0#0
   bb72c:	3223 3200 3023 3123 3023 3200 3023 3123     #2.2#0#1#0.2#0#1
   bb73c:	3123 3200 3023 3123 3223 3200 3023 3223     #1.2#0#1#2.2#0#2
   bb74c:	3023 3200 3023 3223 3123 3200 3023 3223     #0.2#0#2#1.2#0#2
   bb75c:	3223 3200 3023 3323 3023 3200 3023 3323     #2.2#0#3#0.2#0#3
   bb76c:	3123 3200 3023 3323 3223 3200 3023 3423     #1.2#0#3#2.2#0#4
   bb77c:	3023 3200 3023 3423 3123 3200 3023 3423     #0.2#0#4#1.2#0#4
   bb78c:	3223 3200 3023 3523 3023 3200 3023 3523     #2.2#0#5#0.2#0#5
   bb79c:	3123 3200 3023 3523 3223 3200 3023 3623     #1.2#0#5#2.2#0#6
   bb7ac:	3023 3200 3023 3623 3123 3200 3023 3623     #0.2#0#6#1.2#0#6
   bb7bc:	3223 3200 3023 3723 3023 3200 3023 3723     #2.2#0#7#0.2#0#7
   bb7cc:	3123 3200 3023 3723 3223 3200 3123 3023     #1.2#0#7#2.2#1#0
   bb7dc:	3200 3223 3023 3200 3223 3123 3200 3223     .2#2#0.2#2#1.2#2
   bb7ec:	3223 3200 3223 3323 3200 3223 3423 3200     #2.2#2#3.2#2#4.2
   bb7fc:	3223 3523 3200 3223 3623 3200 3223 3723     #2#5.2#2#6.2#2#7
   bb80c:	3200 3223 3823 3600 3023 3023 3600 3023     .2#2#8.6#0#0.6#0
   bb81c:	3123 3600 3023 3223 3600 3123 3023 3600     #1.6#0#2.6#1#0.6
   bb82c:	3223 3023 3600 3223 3123 3600 3223 3223     #2#0.6#2#1.6#2#2
   bb83c:	4d00 444f 204f 4142 4953 4f43 4d00 444f     .MODO BASICO.MOD
   bb84c:	204f 5641 4e41 415a 4f44 4d00 444f 204f     O AVANZADO.MODO 
   bb85c:	554d 4953 4143 4200 7469 616d 2070 6f6e     MUSICA.Bitmap no
   bb86c:	2074 7661 6961 616c 6c62 2e65 2000 2020     t available..   
   bb87c:	2020 4f43 454e 5443 5241 4120 003a 4159       CONECTAR A:.YA
   bb88c:	4320 4e4f 4345 4154 4f44 5400 7261 656a      CONECTADO.Tarje
   bb89c:	6174 6920 766e 6c61 6469 2061 6170 6172     ta invalida para
   bb8ac:	6520 7473 2065 6f6d 6f64 4200 726f 6172      este modo.Borra
   bb8bc:	6f64 6920 766e 6c61 6469 206f 6170 6172     do invalido para
   bb8cc:	6520 7473 2065 6f6d 6f64 4f00 6472 6e65      este modo.Orden
   bb8dc:	6420 2065 6174 6a72 7465 7361 6920 766e      de tarjetas inv
   bb8ec:	6c61 6469 006f 7550 7265 6f74 6e20 206f     alido.Puerto no 
   bb8fc:	6964 7073 6e6f 6269 656c 5000 616c 2079     disponible.Play 
   bb90c:	6f6e 6420 7369 6f70 696e 6c62 0065 6553     no disponible.Se
   bb91c:	736e 726f 6e20 206f 6964 7073 6e6f 6269     nsor no disponib
   bb92c:	656c 2820 6e65 7520 6f73 0029 6341 7574     le (en uso).Actu
   bb93c:	6461 726f 6e20 206f 6964 7073 6e6f 6269     ador no disponib
   bb94c:	656c 2820 6e65 7520 6f73 0029 6f42 7272     le (en uso).Borr
   bb95c:	6461 206f 6564 6220 6f6c 7571 2065 6572     ado de bloque re
   bb96c:	6c61 7a69 6461 006f 614e 6164 7120 6575     alizado.Nada que
   bb97c:	6220 726f 6172 0072 6f42 7272 6461 206f      borrar.Borrado 
   bb98c:	6564 6c20 6f6f 2070 6572 6c61 7a69 6461     de loop realizad
   bb99c:	006f 614e 6164 7120 6575 6220 726f 6172     o.Nada que borra
   bb9ac:	2e72 2500 2064 202d 6425 4600 6e69 6c61     r..%d - %d.Final
   bb9bc:	7a69 2061 6c65 6220 6375 656c 6120 746e     iza el bucle ant
   bb9cc:	7365 6420 2065 6572 7270 646f 6375 7269     es de reproducir
   bb9dc:	4d00 646f 206f 4142 4953 4f43 6420 7465     .Modo BASICO det
   bb9ec:	6365 6174 6f64 4900 696e 6963 6e61 6f64     ectado.Iniciando
   bb9fc:	6d20 646f 206f 4142 4953 4f43 2e2e 002e      modo BASICO....
   bba0c:	6f4d 6f64 4120 4156 5a4e 4441 204f 6564     Modo AVANZADO de
   bba1c:	6574 7463 6461 006f 6e49 6369 6169 646e     tectado.Iniciand
   bba2c:	206f 6f6d 6f64 4120 4156 5a4e 4441 2e4f     o modo AVANZADO.
   bba3c:	2e2e 4d00 646f 206f 554d 4953 4143 6420     ...Modo MUSICA d
   bba4c:	7465 6365 6174 6f64 4900 696e 6963 6e61     etectado.Inician
   bba5c:	6f64 6d20 646f 206f 554d 4953 4143 2e2e     do modo MUSICA..
   bba6c:	002e 755a 626d 6461 726f 003a 6154 2067     ..Zumbador:.Tag 
   bba7c:	6544 6574 7463 6461 2061 2d2d 203e 4200     Detectada --> .B
   bba8c:	726f 6172 6f64 6320 6d6f 6c70 7465 206f     orrado completo 
   bba9c:	6572 6c61 7a69 6461 006f 6f42 7272 6461     realizado.Borrad
   bbaac:	206f 6f6e 7020 7265 696d 6974 6f64 7020     o no permitido p
   bbabc:	7261 2061 7365 6574 6d20 646f 006f 6553     ara este modo.Se
   bbacc:	736e 726f 6420 7465 6365 6174 6f64 4100     nsor detectado.A
   bbadc:	7463 6175 6f64 2072 6564 6574 7463 6461     ctuador detectad
   bbaec:	006f 6a45 6365 7475 6e61 6f64 7420 6761     o.Ejecutando tag
   bbafc:	2d20 3e2d 0020 7550 7265 6f74 6e20 206f      --> .Puerto no 
   bbb0c:	6964 7073 6e6f 6269 656c 6565 0065 6553     disponibleeee.Se
   bbb1c:	6520 7073 7265 6261 2061 4649 7420 6761      esperaba IF tag
   bbb2c:	4400 7365 7570 7365 6420 2065 6e75 7320     .Despues de un s
   bbb3c:	6e65 6f73 2072 6573 6520 7073 7265 2061     ensor se espera 
   bbb4c:	6e75 2061 6f63 636e 6f69 3a6e 4120 444e     una concion: AND
   bbb5c:	7520 4f20 0052 6553 736e 726f 6920 766e      u OR.Sensor inv
   bbb6c:	6c61 6469 006f 6553 6520 7073 7265 6261     alido.Se esperab
   bbb7c:	2061 4854 4e45 7420 6761 4900 766e 6c61     a THEN tag.Inval
   bbb8c:	6469 4120 7463 6175 6f64 0072 6553 6520     id Actuador.Se e
   bbb9c:	7073 7265 6261 2061 4c45 4553 7420 6761     speraba ELSE tag
   bbbac:	4900 2046 6564 6574 7463 6461 006f 4649     .IF detectado.IF
   bbbbc:	4e00 6d75 7265 206f 6564 6220 6f6c 7571     .Numero de bloqu
   bbbcc:	7365 3e20 3220 7c20 207c 6553 6e20 6365     es > 2 || Se nec
   bbbdc:	7365 7469 2061 6c61 6d20 6e65 736f 7520     esita al menos u
   bbbec:	206e 6361 7574 6461 726f 7020 7261 2061     n actuador para 
   bbbfc:	6574 6d72 6e69 7261 6520 206c 6c62 716f     terminar el bloq
   bbc0c:	6575 4100 444e 4f2f 2052 6564 6574 7463     ue.AND/OR detect
   bbc1c:	6461 006f 4e41 0044 6e55 2061 6f63 636e     ado.AND.Una conc
   bbc2c:	6369 6f69 206e 6f73 6f6c 7020 6575 6564     icion solo puede
   bbc3c:	6920 2072 6573 7567 6469 2061 6564 7520      ir seguida de u
   bbc4c:	206e 6573 736e 726f 002e 4854 4e45 6420     n sensor..THEN d
   bbc5c:	7465 6365 6174 6f64 5400 4548 004e 754e     etectado.THEN.Nu
   bbc6c:	656d 6f72 6420 2065 6573 736e 726f 7365     mero de sensores
   bbc7c:	6920 666e 6375 6569 746e 7365 4500 534c      infucientes.ELS
   bbc8c:	2045 6564 6574 7463 6461 006f 4c45 4553     E detectado.ELSE
   bbc9c:	4900 746e 6f72 7564 6563 7520 206e 6341     .Introduce un Ac
   bbcac:	7574 6461 726f 7020 7261 2061 616c 6520     tuador para la e
   bbcbc:	6176 756c 6361 c369 6eb3 6120 5420 5552     valuaci..n a TRU
   bbccc:	0045 6946 206e 6154 0067 2023 6c42 716f     E.Fin Tag.# Bloq
   bbcdc:	6575 7c20 2320 5320 6e65 6f73 6572 2073     ue | # Sensores 
   bbcec:	207c 2023 6f43 646e 6369 6f69 656e 2073     | # Condiciones 
   bbcfc:	207c 2023 6341 7574 6461 726f 7365 2000     | # Actuadores. 
   bbd0c:	2020 2520 2064 7c09 2009 6425 0920 097c        %d .|. %d .|.
   bbd1c:	2520 2064 7c09 2009 6425 0920 097c 2520      %d .|. %d .|. %
   bbd2c:	0064 6154 6a72 7465 2061 6e69 c376 6ca1     d.Tarjeta inv..l
   bbd3c:	6469 2061 6170 6172 6520 7473 2065 6f6d     ida para este mo
   bbd4c:	6f64 4200 4f4c 5551 2045 3a31 5420 5552     do.BLOQUE 1: TRU
   bbd5c:	0045 4c42 514f 4555 3120 203a 4146 534c     E.BLOQUE 1: FALS
   bbd6c:	0045 2020 6361 6261 2061 6c62 716f 6575     E.  acaba bloque
   bbd7c:	3120 4200 4f4c 5551 2045 3a32 5420 5552      1.BLOQUE 2: TRU
   bbd8c:	0045 4c42 514f 4555 3220 203a 4146 534c     E.BLOQUE 2: FALS
   bbd9c:	0045 4c42 514f 4555 3220 203a 2020 6f6e     E.BLOQUE 2:   no
   bbdac:	6620 6e69 6c61 7a69 6461 006f 6a45 6365      finalizado.Ejec
   bbdbc:	7475 6e61 6f64 2e2e 002e 6f42 7272 6461     utando....Borrad
   bbdcc:	2061 6c75 6974 616d 6c20 6365 7574 6172     a ultima lectura
   bbddc:	4c00 6f6f 2070 202d 5000 7261 2061 6f63     .Loop - .Para co
   bbdec:	656d 7a6e 7261 7520 206e 6f6c 706f 6820     menzar un loop h
   bbdfc:	7961 7120 6575 6620 6e69 6c61 7a69 7261     ay que finalizar
   bbe0c:	6520 206c 6e61 6574 6972 726f 002e 4e45      el anterior..EN
   bbe1c:	2044 6f4c 706f 7200 7065 2d20 0020 6f4c     D Loop.rep - .Lo
   bbe2c:	706f 7320 6e69 6320 6d6f 6e65 617a 2072     op sin comenzar 
   bbe3c:	206f 6973 206e 6f63 746e 6e65 6469 006f     o sin contenido.

000bbe4c <CSWTCH.368>:
   bbe4c:	00fa 01f4 03e8                              ......

000bbe52 <_ZL14sucreLogo_data>:
   bbe52:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe62:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe72:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bbe82:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bbe92:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bbea2:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bbeb2:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bbec2:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bbed2:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bbee2:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bbef2:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bbf02:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bbf12:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bbf22:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bbf32:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bbf42:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bbf52:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bbf62:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbf72:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bbf82:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bbf92:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bbfa2:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bbfb2:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bbfc2:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bbfd2:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bbfe2:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bbff2:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bc002:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bc012:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bc022:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bc032:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bc042:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bc052:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bc062:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bc072:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bc082:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bc092:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bc0a2:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bc0b2:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bc0c2:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bc0d2:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bc0e2:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bc0f2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc102:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc112:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc122:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc132:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc142:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc152:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bc162:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bc172:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bc182:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bc192:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bc1a2:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bc1b2:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bc1c2:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bc1d2:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bc1e2:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bc1f2:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bc202:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bc212:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc222:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc232:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc242:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc252:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bc262:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bc272:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bc282:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bc292:	7525 003e                                   %u>.

000bc296 <_ZL4font>:
   bc296:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc2a6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bc2b6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bc2c6:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bc2d6:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc2e6:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc2f6:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc306:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc316:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc326:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc336:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc346:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc356:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc366:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc376:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc386:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc396:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc3a6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc3b6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc3c6:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc3d6:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc3e6:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc3f6:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc406:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc416:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc426:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc436:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc446:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc456:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc466:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc476:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc486:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc496:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc4a6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc4b6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc4c6:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc4d6:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc4e6:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc4f6:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc506:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc516:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc526:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bc536:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc546:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc556:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bc566:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc576:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bc586:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bc596:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bc5a6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc5b6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc5c6:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc5d6:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc5e6:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc5f6:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc606:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bc616:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bc626:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bc636:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bc646:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bc656:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bc666:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bc676:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bc686:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bc696:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bc6a6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bc6b6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bc6c6:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bc6d6:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bc6e6:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bc6f6:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bc706:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bc716:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bc726:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bc736:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bc746:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bc756:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bc766:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bc776:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bc786:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bc798 <_ZTV12Adafruit_GFX>:
	...
   bc7a8:	7b5d 000b 9b05 000b 40a1 000b 71ff 000b     ]{.......@...q..
   bc7b8:	7201 000b 7233 000b 720f 000b 7221 000b     .r..3r...r..!r..
   bc7c8:	7141 000b 71ff 000b 742b 000b 7429 000b     Aq...q..+t..)t..
   bc7d8:	724b 000b 7289 000b 72c3 000b 7309 000b     Kr...r...r...s..
   bc7e8:	7325 000b 73a9 000b 6e55 6e6b 776f 206e     %s...s..Unknown 
   bc7f8:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bc808:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bc818:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bc828:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bc838:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bc848:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bc858:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bc868:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bc878:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bc888:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bc898:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bc8a8:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bc8b8:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bc8c8:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bc8d8:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bc8e8 <CSWTCH.84>:
   bc8e8:	c7fe 000b c807 000b c81f 000b c834 000b     ............4...
   bc8f8:	c84e 000b c86a 000b c899 000b c8ab 000b     N...j...........
   bc908:	c8c5 000b                                   ....

000bc90c <_ZTVN8particle11SPISettingsE>:
	...
   bc914:	70ed 000b 70dd 000b 70df 000b               .p...p...p..

000bc920 <_ZL12splash2_data>:
   bc920:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bc930:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bc940:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bc95c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bc96c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bc97c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bc98c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bc99c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bc9ac:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bc9bc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bc9cc:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bc9dc:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bc9ec:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bc9fc:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bca0c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bca1c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bca2c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bca3c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bca4c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bca5c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bca6c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bca7c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bca8c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bca9c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bcab4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bcac4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bcad4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bcae4:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bcaf4:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bcb00 <_ZL14sucreLogo_data>:
   bcb00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb20:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bcb30:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bcb40:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcb50:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcb60:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcb70:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcb80:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bcb90:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bcba0:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bcbb0:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bcbc0:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bcbd0:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bcbe0:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bcbf0:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bcc00:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bcc10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc20:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bcc30:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bcc40:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bcc50:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bcc60:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bcc70:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bcc80:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bcc90:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bcca0:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bccb0:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bccc0:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bccd0:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bcce0:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bccf0:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bcd00:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bcd10:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bcd20:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bcd30:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bcd40:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bcd50:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bcd60:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bcd70:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bcd80:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bcd90:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bcda0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcde0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce00:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bce10:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bce20:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bce30:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bce40:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bce50:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bce60:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bce70:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bce80:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bce90:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bcea0:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bceb0:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bcec0:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bced0:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bcee0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcef0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bcf00 <_ZTV16Adafruit_SSD1306>:
	...
   bcf08:	8711 000b 8729 000b 7b5d 000b 9b05 000b     ....)...]{......
   bcf18:	873d 000b 71ff 000b 7201 000b 7233 000b     =....q...r..3r..
   bcf28:	720f 000b 7221 000b 7141 000b 71ff 000b     .r..!r..Aq...q..
   bcf38:	742b 000b 88cf 000b 8e6b 000b 8e1d 000b     +t......k.......
   bcf48:	72c3 000b 7309 000b 7325 000b 73a9 000b     .r...s..%s...s..

000bcf58 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bcf58:	8000 e0c0 f8f0 fefc                         ........

000bcf60 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bcf60:	0100 0703 1f0f 7f3f                         ......?.

000bcf68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bcf68:	d5ae a880                                   ....

000bcf6c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bcf6c:	00d3 8d40                                   ..@.

000bcf70 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bcf70:	0020 c8a1                                    ...

000bcf74 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bcf74:	40db a6a4 af2e                              .@....

000bcf7a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bcf7a:	02da 8f81                                   ....

000bcf7e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bcf7e:	12da                                         ...

000bcf81 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bcf81:	02da                                         ...

000bcf84 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bcf84:	0022 21ff 0000 0000                         "..!....

000bcf8c <_ZTVN5spark13EthernetClassE>:
	...
   bcf94:	970b 000b 9701 000b 96f7 000b 96ed 000b     ................
   bcfa4:	96e1 000b 96d5 000b a3f9 000b a401 000b     ................
   bcfb4:	96c9 000b 96c1 000b 96b7 000b 96ad 000b     ................
   bcfc4:	a431 000b                                   1...

000bcfc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcfc8:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   bcfd8:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   bcfe8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bcff8:	6d69 0065                                   ime.

000bcffc <_ZTV9IPAddress>:
	...
   bd004:	9fa9 000b 9f99 000b 9f9b 000b               ............

000bd010 <_ZTV9USBSerial>:
	...
   bd018:	a08f 000b a0f7 000b a0cd 000b 9b05 000b     ................
   bd028:	a0bf 000b a091 000b a0a1 000b a0f1 000b     ................
   bd038:	a0b1 000b a089 000b                         ........

000bd040 <_ZTV11USARTSerial>:
	...
   bd048:	a1ed 000b a259 000b a231 000b 9b05 000b     ....Y...1.......
   bd058:	a201 000b a21d 000b a20f 000b a22b 000b     ............+...
   bd068:	a1ef 000b a1f3 000b                         ........

000bd070 <_ZTV7TwoWire>:
	...
   bd078:	a291 000b a2db 000b a2b3 000b a293 000b     ................
   bd088:	a2bb 000b a2c3 000b a2cb 000b a2d3 000b     ................

000bd098 <_ZTVN5spark9WiFiClassE>:
	...
   bd0a0:	a39b 000b a391 000b a387 000b a33d 000b     ............=...
   bd0b0:	a37b 000b a36f 000b a3f9 000b a401 000b     {...o...........
   bd0c0:	a363 000b a35b 000b a351 000b a347 000b     c...[...Q...G...
   bd0d0:	a431 000b                                   1...

000bd0d4 <_ZTVN5spark12NetworkClassE>:
	...
   bd0dc:	a3b9 000b a3c3 000b a3cd 000b a3d7 000b     ................
   bd0ec:	a3e1 000b a3ed 000b a3f9 000b a401 000b     ................
   bd0fc:	a409 000b a415 000b a41d 000b a427 000b     ............'...
   bd10c:	a431 000b                                   1...

000bd110 <_ZSt7nothrow>:
   bd110:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bd120:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd130:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd140:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd150:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd160:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd170:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd180:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd190:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bd1a0:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bd1b0:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bd1c0:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bd1d0:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bd1e0:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bd1f0:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bd200:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bd210:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bd220:	2e6b 0063                                   k.c.

000bd224 <link_const_variable_data_end>:
   bd224:	000b50ad 	.word	0x000b50ad
   bd228:	000b9715 	.word	0x000b9715
   bd22c:	000b988d 	.word	0x000b988d
   bd230:	000b9af5 	.word	0x000b9af5
   bd234:	000b9df5 	.word	0x000b9df5
   bd238:	000b9e05 	.word	0x000b9e05
   bd23c:	000b9e21 	.word	0x000b9e21
   bd240:	000ba3a5 	.word	0x000ba3a5
   bd244:	000ba509 	.word	0x000ba509

000bd248 <link_constructors_end>:
	...
