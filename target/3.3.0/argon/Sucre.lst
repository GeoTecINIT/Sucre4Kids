
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006db0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000badd0  000badd0  0000add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000badf4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003df34  000badf8  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000828  2003dfc8  2003dfc8  0002dfc8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bae8c  000bae8c  0002ae8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000baeb4  000baeb4  0002aeb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015fd43  00000000  00000000  0002aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000186eb  00000000  00000000  0018abfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004f476  00000000  00000000  001a32e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003660  00000000  00000000  001f275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bdc0  00000000  00000000  001f5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004391b  00000000  00000000  00201b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00056bc4  00000000  00000000  00245497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c013  00000000  00000000  0029c05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a5e8  00000000  00000000  003d8070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fa7d 	bl	b9530 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fa85 	bl	b954c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df34 	.word	0x2003df34
   b404c:	000badf8 	.word	0x000badf8
   b4050:	2003dfc8 	.word	0x2003dfc8
   b4054:	2003dfc8 	.word	0x2003dfc8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f985 	bl	b8370 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bada4 	.word	0x000bada4
   b4080:	000badc8 	.word	0x000badc8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bed4 	b.w	b4e30 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f867 	bl	b515c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b925 	b.w	b82e0 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f003 bde5 	b.w	b7c64 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 bdeb 	b.w	b7c74 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f003 fd40 	bl	b7b2c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b789d 	.word	0x000b789d
   b40b4:	000b9790 	.word	0x000b9790

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f004 f894 	bl	b8202 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	b40e      	push	{r1, r2, r3}
   b40e6:	b503      	push	{r0, r1, lr}
   b40e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40ea:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40f2:	f004 f886 	bl	b8202 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f6:	b002      	add	sp, #8
   b40f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40fc:	b003      	add	sp, #12
   b40fe:	4770      	bx	lr

000b4100 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4100:	b507      	push	{r0, r1, r2, lr}
   b4102:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4104:	a801      	add	r0, sp, #4
   b4106:	f002 fc01 	bl	b690c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b410a:	a801      	add	r0, sp, #4
   b410c:	f002 fc00 	bl	b6910 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4110:	2809      	cmp	r0, #9
   b4112:	bf8c      	ite	hi
   b4114:	2000      	movhi	r0, #0
   b4116:	2001      	movls	r0, #1
   b4118:	b003      	add	sp, #12
   b411a:	f85d fb04 	ldr.w	pc, [sp], #4

000b411e <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b411e:	b507      	push	{r0, r1, r2, lr}
   b4120:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4122:	a801      	add	r0, sp, #4
   b4124:	f002 fbf2 	bl	b690c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4128:	a801      	add	r0, sp, #4
   b412a:	f002 fbf1 	bl	b6910 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b412e:	280a      	cmp	r0, #10
   b4130:	bfd4      	ite	le
   b4132:	2000      	movle	r0, #0
   b4134:	2001      	movgt	r0, #1
   b4136:	b003      	add	sp, #12
   b4138:	f85d fb04 	ldr.w	pc, [sp], #4

000b413c <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b413c:	2802      	cmp	r0, #2
{
   b413e:	b508      	push	{r3, lr}
    switch (puerto)
   b4140:	d00b      	beq.n	b415a <_Z5siLuzi+0x1e>
   b4142:	2804      	cmp	r0, #4
   b4144:	d00b      	beq.n	b415e <_Z5siLuzi+0x22>
   b4146:	b960      	cbnz	r0, b4162 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4148:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b414a:	f004 fc70 	bl	b8a2e <analogRead>
   b414e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4152:	bfb4      	ite	lt
   b4154:	2000      	movlt	r0, #0
   b4156:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4158:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b415a:	2011      	movs	r0, #17
   b415c:	e7f5      	b.n	b414a <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b415e:	200f      	movs	r0, #15
   b4160:	e7f3      	b.n	b414a <_Z5siLuzi+0xe>
    switch (puerto)
   b4162:	2000      	movs	r0, #0
   b4164:	e7f8      	b.n	b4158 <_Z5siLuzi+0x1c>

000b4166 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4166:	2802      	cmp	r0, #2
{
   b4168:	b508      	push	{r3, lr}
    switch (puerto)
   b416a:	d00b      	beq.n	b4184 <_Z5noLuzi+0x1e>
   b416c:	2804      	cmp	r0, #4
   b416e:	d00b      	beq.n	b4188 <_Z5noLuzi+0x22>
   b4170:	b960      	cbnz	r0, b418c <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4172:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4174:	f004 fc5b 	bl	b8a2e <analogRead>
   b4178:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b417c:	bfcc      	ite	gt
   b417e:	2000      	movgt	r0, #0
   b4180:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4182:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4184:	2011      	movs	r0, #17
   b4186:	e7f5      	b.n	b4174 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4188:	200f      	movs	r0, #15
   b418a:	e7f3      	b.n	b4174 <_Z5noLuzi+0xe>
    switch (puerto)
   b418c:	2000      	movs	r0, #0
   b418e:	e7f8      	b.n	b4182 <_Z5noLuzi+0x1c>

000b4190 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b4190:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b4192:	b280      	uxth	r0, r0
   b4194:	f004 fc4b 	bl	b8a2e <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b4198:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b419c:	bfb4      	ite	lt
   b419e:	2000      	movlt	r0, #0
   b41a0:	2001      	movge	r0, #1
   b41a2:	bd08      	pop	{r3, pc}

000b41a4 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41a4:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41a6:	b280      	uxth	r0, r0
   b41a8:	f004 fc41 	bl	b8a2e <analogRead>
        return true;
    return false;
}
   b41ac:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41b0:	bfcc      	ite	gt
   b41b2:	2000      	movgt	r0, #0
   b41b4:	2001      	movle	r0, #1
   b41b6:	bd08      	pop	{r3, pc}

000b41b8 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41b8:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41ba:	b280      	uxth	r0, r0
   b41bc:	2100      	movs	r1, #0
   b41be:	9001      	str	r0, [sp, #4]
   b41c0:	f004 fbf8 	bl	b89b4 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b41c4:	9801      	ldr	r0, [sp, #4]
   b41c6:	f004 fc1f 	bl	b8a08 <digitalRead>
        return true;
    return false;
}
   b41ca:	1e43      	subs	r3, r0, #1
   b41cc:	4258      	negs	r0, r3
   b41ce:	4158      	adcs	r0, r3
   b41d0:	b003      	add	sp, #12
   b41d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b41d6 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b41d6:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41d8:	b280      	uxth	r0, r0
   b41da:	2100      	movs	r1, #0
   b41dc:	9001      	str	r0, [sp, #4]
   b41de:	f004 fbe9 	bl	b89b4 <pinMode>
    if (digitalRead(puerto) == LOW)
   b41e2:	9801      	ldr	r0, [sp, #4]
   b41e4:	f004 fc10 	bl	b8a08 <digitalRead>
        return true;
    return false;
}
   b41e8:	fab0 f080 	clz	r0, r0
   b41ec:	0940      	lsrs	r0, r0, #5
   b41ee:	b003      	add	sp, #12
   b41f0:	f85d fb04 	ldr.w	pc, [sp], #4

000b41f4 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b41f4:	2802      	cmp	r0, #2
{
   b41f6:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b41f8:	d024      	beq.n	b4244 <_Z10siRotativoi+0x50>
   b41fa:	2804      	cmp	r0, #4
   b41fc:	d024      	beq.n	b4248 <_Z10siRotativoi+0x54>
   b41fe:	b918      	cbnz	r0, b4208 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4200:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4202:	f004 fc14 	bl	b8a2e <analogRead>
   b4206:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4208:	eddd 7a01 	vldr	s15, [sp, #4]
   b420c:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b424c <_Z10siRotativoi+0x58>
   b4210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4214:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4218:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b421c:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4220:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4250 <_Z10siRotativoi+0x5c>
   b4224:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4228:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b422c:	eddf 7a09 	vldr	s15, [pc, #36]	; b4254 <_Z10siRotativoi+0x60>
   b4230:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4238:	bfac      	ite	ge
   b423a:	2001      	movge	r0, #1
   b423c:	2000      	movlt	r0, #0
   b423e:	b003      	add	sp, #12
   b4240:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4244:	2011      	movs	r0, #17
   b4246:	e7dc      	b.n	b4202 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4248:	200f      	movs	r0, #15
   b424a:	e7da      	b.n	b4202 <_Z10siRotativoi+0xe>
   b424c:	447fc000 	.word	0x447fc000
   b4250:	43960000 	.word	0x43960000
   b4254:	442a0000 	.word	0x442a0000

000b4258 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4258:	2802      	cmp	r0, #2
{
   b425a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b425c:	d024      	beq.n	b42a8 <_Z10noRotativoi+0x50>
   b425e:	2804      	cmp	r0, #4
   b4260:	d024      	beq.n	b42ac <_Z10noRotativoi+0x54>
   b4262:	b918      	cbnz	r0, b426c <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4264:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4266:	f004 fbe2 	bl	b8a2e <analogRead>
   b426a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b426c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4270:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42b0 <_Z10noRotativoi+0x58>
   b4274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4278:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b427c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4280:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4284:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42b4 <_Z10noRotativoi+0x5c>
   b4288:	ee67 7a27 	vmul.f32	s15, s14, s15
   b428c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b4290:	eddf 7a09 	vldr	s15, [pc, #36]	; b42b8 <_Z10noRotativoi+0x60>
   b4294:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b429c:	bf94      	ite	ls
   b429e:	2001      	movls	r0, #1
   b42a0:	2000      	movhi	r0, #0
   b42a2:	b003      	add	sp, #12
   b42a4:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42a8:	2011      	movs	r0, #17
   b42aa:	e7dc      	b.n	b4266 <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42ac:	200f      	movs	r0, #15
   b42ae:	e7da      	b.n	b4266 <_Z10noRotativoi+0xe>
   b42b0:	447fc000 	.word	0x447fc000
   b42b4:	43960000 	.word	0x43960000
   b42b8:	442a0000 	.word	0x442a0000

000b42bc <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b42bc:	b530      	push	{r4, r5, lr}
   b42be:	ed2d 8b02 	vpush	{d8}
   b42c2:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b42c4:	b2c1      	uxtb	r1, r0
   b42c6:	2306      	movs	r3, #6
   b42c8:	220b      	movs	r2, #11
   b42ca:	a801      	add	r0, sp, #4
   b42cc:	f002 fb44 	bl	b6958 <_ZN3DHTC1Ehhh>
    dht.begin();
   b42d0:	a801      	add	r0, sp, #4
   b42d2:	f002 fb48 	bl	b6966 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b42d6:	a801      	add	r0, sp, #4
   b42d8:	f002 fc02 	bl	b6ae0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b42dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b42e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b42e4:	eeb4 0a40 	vcmp.f32	s0, s0
   b42e8:	bf0c      	ite	eq
   b42ea:	2401      	moveq	r4, #1
   b42ec:	2400      	movne	r4, #0
   b42ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b42f2:	bf68      	it	vs
   b42f4:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b42f8:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b42fc:	2c00      	cmp	r4, #0
   b42fe:	d1ea      	bne.n	b42d6 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4300:	f004 f958 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4304:	4605      	mov	r5, r0
   b4306:	ee18 0a10 	vmov	r0, s16
   b430a:	f004 fda1 	bl	b8e50 <__aeabi_f2d>
   b430e:	4602      	mov	r2, r0
   b4310:	460b      	mov	r3, r1
   b4312:	4628      	mov	r0, r5
   b4314:	490a      	ldr	r1, [pc, #40]	; (b4340 <_Z8tempFrioi+0x84>)
   b4316:	f7ff fee5 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b431a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4322:	dd08      	ble.n	b4336 <_Z8tempFrioi+0x7a>
   b4324:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4328:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4330:	bf4c      	ite	mi
   b4332:	2401      	movmi	r4, #1
   b4334:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4336:	4620      	mov	r0, r4
   b4338:	b007      	add	sp, #28
   b433a:	ecbd 8b02 	vpop	{d8}
   b433e:	bd30      	pop	{r4, r5, pc}
   b4340:	000b97b2 	.word	0x000b97b2

000b4344 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4344:	b510      	push	{r4, lr}
   b4346:	ed2d 8b02 	vpush	{d8}
   b434a:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b434c:	b2c1      	uxtb	r1, r0
   b434e:	2306      	movs	r3, #6
   b4350:	220b      	movs	r2, #11
   b4352:	a801      	add	r0, sp, #4
   b4354:	f002 fb00 	bl	b6958 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4358:	a801      	add	r0, sp, #4
   b435a:	f002 fb04 	bl	b6966 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b435e:	a801      	add	r0, sp, #4
   b4360:	f002 fbbe 	bl	b6ae0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4364:	eeb4 0a40 	vcmp.f32	s0, s0
   b4368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b436c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4370:	d6f5      	bvs.n	b435e <_Z12tempTempladoi+0x1a>
   b4372:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b437a:	d0f0      	beq.n	b435e <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b437c:	f004 f91a 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4380:	4604      	mov	r4, r0
   b4382:	ee18 0a10 	vmov	r0, s16
   b4386:	f004 fd63 	bl	b8e50 <__aeabi_f2d>
   b438a:	4602      	mov	r2, r0
   b438c:	460b      	mov	r3, r1
   b438e:	4620      	mov	r0, r4
   b4390:	490c      	ldr	r1, [pc, #48]	; (b43c4 <_Z12tempTempladoi+0x80>)
   b4392:	f7ff fea7 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4396:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b439a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43a2:	dc04      	bgt.n	b43ae <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43a4:	2000      	movs	r0, #0
}
   b43a6:	b006      	add	sp, #24
   b43a8:	ecbd 8b02 	vpop	{d8}
   b43ac:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43ae:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43ba:	bf4c      	ite	mi
   b43bc:	2001      	movmi	r0, #1
   b43be:	2000      	movpl	r0, #0
   b43c0:	e7f1      	b.n	b43a6 <_Z12tempTempladoi+0x62>
   b43c2:	bf00      	nop
   b43c4:	000b97b2 	.word	0x000b97b2

000b43c8 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b43c8:	b530      	push	{r4, r5, lr}
   b43ca:	ed2d 8b02 	vpush	{d8}
   b43ce:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b43d0:	b2c1      	uxtb	r1, r0
   b43d2:	2306      	movs	r3, #6
   b43d4:	220b      	movs	r2, #11
   b43d6:	a801      	add	r0, sp, #4
   b43d8:	f002 fabe 	bl	b6958 <_ZN3DHTC1Ehhh>
    dht.begin();
   b43dc:	a801      	add	r0, sp, #4
   b43de:	f002 fac2 	bl	b6966 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43e2:	a801      	add	r0, sp, #4
   b43e4:	f002 fb7c 	bl	b6ae0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b43e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f0:	eeb4 0a40 	vcmp.f32	s0, s0
   b43f4:	bf0c      	ite	eq
   b43f6:	2401      	moveq	r4, #1
   b43f8:	2400      	movne	r4, #0
   b43fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43fe:	bf68      	it	vs
   b4400:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4404:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4408:	2c00      	cmp	r4, #0
   b440a:	d1ea      	bne.n	b43e2 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b440c:	f004 f8d2 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4410:	4605      	mov	r5, r0
   b4412:	ee18 0a10 	vmov	r0, s16
   b4416:	f004 fd1b 	bl	b8e50 <__aeabi_f2d>
   b441a:	4602      	mov	r2, r0
   b441c:	460b      	mov	r3, r1
   b441e:	4628      	mov	r0, r5
   b4420:	490b      	ldr	r1, [pc, #44]	; (b4450 <_Z9tempCalori+0x88>)
   b4422:	f7ff fe5f 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4426:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b442a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4432:	dd08      	ble.n	b4446 <_Z9tempCalori+0x7e>
   b4434:	eddf 7a07 	vldr	s15, [pc, #28]	; b4454 <_Z9tempCalori+0x8c>
   b4438:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4440:	bf4c      	ite	mi
   b4442:	2401      	movmi	r4, #1
   b4444:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4446:	4620      	mov	r0, r4
   b4448:	b007      	add	sp, #28
   b444a:	ecbd 8b02 	vpop	{d8}
   b444e:	bd30      	pop	{r4, r5, pc}
   b4450:	000b97b2 	.word	0x000b97b2
   b4454:	42480000 	.word	0x42480000

000b4458 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4458:	b508      	push	{r3, lr}
   b445a:	4603      	mov	r3, r0
   b445c:	3b01      	subs	r3, #1
   b445e:	4610      	mov	r0, r2
   b4460:	2b06      	cmp	r3, #6
   b4462:	d843      	bhi.n	b44ec <_Z10leerSensoriii+0x94>
   b4464:	e8df f003 	tbb	[pc, r3]
   b4468:	1b120904 	.word	0x1b120904
   b446c:	2d24      	.short	0x2d24
   b446e:	04          	.byte	0x04
   b446f:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4470:	bbc1      	cbnz	r1, b44e4 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4476:	f7ff be43 	b.w	b4100 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b447a:	b919      	cbnz	r1, b4484 <_Z10leerSensoriii+0x2c>
   b447c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4480:	f7ff be71 	b.w	b4166 <_Z5noLuzi>
   b4484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4488:	f7ff be58 	b.w	b413c <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b448c:	b919      	cbnz	r1, b4496 <_Z10leerSensoriii+0x3e>
   b448e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4492:	f7ff be87 	b.w	b41a4 <_Z7noRuidoi>
   b4496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b449a:	f7ff be79 	b.w	b4190 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b449e:	b919      	cbnz	r1, b44a8 <_Z10leerSensoriii+0x50>
   b44a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44a4:	f7ff be97 	b.w	b41d6 <_Z7noBotoni>
   b44a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44ac:	f7ff be84 	b.w	b41b8 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44b0:	b919      	cbnz	r1, b44ba <_Z10leerSensoriii+0x62>
   b44b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44b6:	f7ff becf 	b.w	b4258 <_Z10noRotativoi>
   b44ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44be:	f7ff be99 	b.w	b41f4 <_Z10siRotativoi>
        switch (condicion)
   b44c2:	2901      	cmp	r1, #1
   b44c4:	d006      	beq.n	b44d4 <_Z10leerSensoriii+0x7c>
   b44c6:	2902      	cmp	r1, #2
   b44c8:	d008      	beq.n	b44dc <_Z10leerSensoriii+0x84>
   b44ca:	b959      	cbnz	r1, b44e4 <_Z10leerSensoriii+0x8c>
   b44cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b44d0:	f7ff bef4 	b.w	b42bc <_Z8tempFrioi>
   b44d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b44d8:	f7ff bf34 	b.w	b4344 <_Z12tempTempladoi>
   b44dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b44e0:	f7ff bf72 	b.w	b43c8 <_Z9tempCalori>
   b44e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b44e8:	f7ff be19 	b.w	b411e <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b44ec:	f004 f862 	bl	b85b4 <_Z16_fetch_usbserialv>
   b44f0:	4902      	ldr	r1, [pc, #8]	; (b44fc <_Z10leerSensoriii+0xa4>)
   b44f2:	f003 fe5e 	bl	b81b2 <_ZN5Print7printlnEPKc>
   b44f6:	2000      	movs	r0, #0
   b44f8:	bd08      	pop	{r3, pc}
   b44fa:	bf00      	nop
   b44fc:	000b97bb 	.word	0x000b97bb

000b4500 <_Z12makeEvaluate6BLOQUE>:
}

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b4500:	b084      	sub	sp, #16
   b4502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4504:	ac06      	add	r4, sp, #24
   b4506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b450a:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b450e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4510:	f7ff ffa2 	bl	b4458 <_Z10leerSensoriii>
   b4514:	ad06      	add	r5, sp, #24
   b4516:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b4518:	afbc      	add	r7, sp, #752	; 0x2f0
   b451a:	2601      	movs	r6, #1
   b451c:	9b06      	ldr	r3, [sp, #24]
   b451e:	42b3      	cmp	r3, r6
   b4520:	dd12      	ble.n	b4548 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4522:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b4526:	6a2a      	ldr	r2, [r5, #32]
   b4528:	f7ff ff96 	bl	b4458 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b452c:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4530:	b133      	cbz	r3, b4540 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b4532:	2c00      	cmp	r4, #0
   b4534:	bf08      	it	eq
   b4536:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b4538:	3601      	adds	r6, #1
   b453a:	3510      	adds	r5, #16
   b453c:	4604      	mov	r4, r0
   b453e:	e7ed      	b.n	b451c <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b4540:	2c00      	cmp	r4, #0
   b4542:	bf18      	it	ne
   b4544:	4620      	movne	r0, r4
   b4546:	e7f7      	b.n	b4538 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b4548:	4620      	mov	r0, r4
   b454a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b454e:	b004      	add	sp, #16
   b4550:	4770      	bx	lr
	...

000b4554 <_Z13displayPrint0i>:

void displayPrint0(int n)
{
   b4554:	b538      	push	{r3, r4, r5, lr}
   b4556:	4604      	mov	r4, r0
   display.clearDisplay();
   b4558:	481a      	ldr	r0, [pc, #104]	; (b45c4 <_Z13displayPrint0i+0x70>)
   b455a:	f002 fc2f 	bl	b6dbc <_ZN16Adafruit_SSD130612clearDisplayEv>

   switch (n)
   b455e:	2c05      	cmp	r4, #5
   b4560:	d82a      	bhi.n	b45b8 <_Z13displayPrint0i+0x64>
   b4562:	e8df f004 	tbb	[pc, r4]
   b4566:	1e03      	.short	0x1e03
   b4568:	27252320 	.word	0x27252320
   {
   case 0:
      dispositivos[0] = "Actuador RGB";
   b456c:	4916      	ldr	r1, [pc, #88]	; (b45c8 <_Z13displayPrint0i+0x74>)
      break;

   case 1:
      dispositivos[0] = "Actuador Zumbador";
   b456e:	4817      	ldr	r0, [pc, #92]	; (b45cc <_Z13displayPrint0i+0x78>)
   b4570:	f003 fd7f 	bl	b8072 <_ZN6StringaSEPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4574:	4d15      	ldr	r5, [pc, #84]	; (b45cc <_Z13displayPrint0i+0x78>)
      Serial.println("No es valido");
      break;
   }

   snprintf(buf, sizeof(buf), dispositivos[1]);
   display.println(buf);
   b4576:	4c13      	ldr	r4, [pc, #76]	; (b45c4 <_Z13displayPrint0i+0x70>)
   snprintf(buf, sizeof(buf), dispositivos[1]);
   b4578:	692a      	ldr	r2, [r5, #16]
   b457a:	4815      	ldr	r0, [pc, #84]	; (b45d0 <_Z13displayPrint0i+0x7c>)
   b457c:	2140      	movs	r1, #64	; 0x40
   b457e:	f003 fb89 	bl	b7c94 <snprintf>
   display.println(buf);
   b4582:	4913      	ldr	r1, [pc, #76]	; (b45d0 <_Z13displayPrint0i+0x7c>)
   b4584:	4620      	mov	r0, r4
   b4586:	f003 fe14 	bl	b81b2 <_ZN5Print7printlnEPKc>

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b458a:	682a      	ldr	r2, [r5, #0]
   b458c:	4810      	ldr	r0, [pc, #64]	; (b45d0 <_Z13displayPrint0i+0x7c>)
   b458e:	2140      	movs	r1, #64	; 0x40
   b4590:	f003 fb80 	bl	b7c94 <snprintf>
   display.println(buf);
   b4594:	490e      	ldr	r1, [pc, #56]	; (b45d0 <_Z13displayPrint0i+0x7c>)
   b4596:	4620      	mov	r0, r4
   b4598:	f003 fe0b 	bl	b81b2 <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b459c:	2300      	movs	r3, #0
   b459e:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b45a0:	bd38      	pop	{r3, r4, r5, pc}
      dispositivos[0] = "Actuador Zumbador";
   b45a2:	490c      	ldr	r1, [pc, #48]	; (b45d4 <_Z13displayPrint0i+0x80>)
   b45a4:	e7e3      	b.n	b456e <_Z13displayPrint0i+0x1a>
      dispositivos[1] = "Sensor de Luz";
   b45a6:	490c      	ldr	r1, [pc, #48]	; (b45d8 <_Z13displayPrint0i+0x84>)
      dispositivos[1] = "Sensor Rotativo";
   b45a8:	480c      	ldr	r0, [pc, #48]	; (b45dc <_Z13displayPrint0i+0x88>)
   b45aa:	e7e1      	b.n	b4570 <_Z13displayPrint0i+0x1c>
      dispositivos[1] = "Sensor de Ruido";
   b45ac:	490c      	ldr	r1, [pc, #48]	; (b45e0 <_Z13displayPrint0i+0x8c>)
   b45ae:	e7fb      	b.n	b45a8 <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Boton";
   b45b0:	490c      	ldr	r1, [pc, #48]	; (b45e4 <_Z13displayPrint0i+0x90>)
   b45b2:	e7f9      	b.n	b45a8 <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Rotativo";
   b45b4:	490c      	ldr	r1, [pc, #48]	; (b45e8 <_Z13displayPrint0i+0x94>)
   b45b6:	e7f7      	b.n	b45a8 <_Z13displayPrint0i+0x54>
      Serial.println("No es valido");
   b45b8:	f003 fffc 	bl	b85b4 <_Z16_fetch_usbserialv>
   b45bc:	490b      	ldr	r1, [pc, #44]	; (b45ec <_Z13displayPrint0i+0x98>)
   b45be:	f003 fdf8 	bl	b81b2 <_ZN5Print7printlnEPKc>
      break;
   b45c2:	e7d7      	b.n	b4574 <_Z13displayPrint0i+0x20>
   b45c4:	2003e600 	.word	0x2003e600
   b45c8:	000b97ce 	.word	0x000b97ce
   b45cc:	2003e650 	.word	0x2003e650
   b45d0:	2003e5c0 	.word	0x2003e5c0
   b45d4:	000b97db 	.word	0x000b97db
   b45d8:	000b97ed 	.word	0x000b97ed
   b45dc:	2003e660 	.word	0x2003e660
   b45e0:	000b97fb 	.word	0x000b97fb
   b45e4:	000b980b 	.word	0x000b980b
   b45e8:	000b9818 	.word	0x000b9818
   b45ec:	000b97a5 	.word	0x000b97a5

000b45f0 <_Z12displayPrintbbiii>:

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b45f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b45f4:	b088      	sub	sp, #32
   b45f6:	4680      	mov	r8, r0
   display.clearDisplay();
   b45f8:	4850      	ldr	r0, [pc, #320]	; (b473c <_Z12displayPrintbbiii+0x14c>)
{
   b45fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   b45fc:	460e      	mov	r6, r1
   b45fe:	4615      	mov	r5, r2
   b4600:	461c      	mov	r4, r3
   display.clearDisplay();
   b4602:	f002 fbdb 	bl	b6dbc <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b4606:	f1b8 0f00 	cmp.w	r8, #0
   b460a:	d06d      	beq.n	b46e8 <_Z12displayPrintbbiii+0xf8>
   {
      switch (id)
   b460c:	3d01      	subs	r5, #1
   b460e:	2d06      	cmp	r5, #6
   b4610:	d862      	bhi.n	b46d8 <_Z12displayPrintbbiii+0xe8>
   b4612:	e8df f005 	tbb	[pc, r5]
   b4616:	3604      	.short	0x3604
   b4618:	504b4641 	.word	0x504b4641
   b461c:	5c          	.byte	0x5c
   b461d:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b461e:	bb74      	cbnz	r4, b467e <_Z12displayPrintbbiii+0x8e>
   b4620:	4947      	ldr	r1, [pc, #284]	; (b4740 <_Z12displayPrintbbiii+0x150>)

      // Luz
      case 2:
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
         // dispositivos[1] = "Sensor de Luz";
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4622:	4848      	ldr	r0, [pc, #288]	; (b4744 <_Z12displayPrintbbiii+0x154>)
   b4624:	f003 fd25 	bl	b8072 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4628:	4946      	ldr	r1, [pc, #280]	; (b4744 <_Z12displayPrintbbiii+0x154>)
   b462a:	4668      	mov	r0, sp
   b462c:	f003 fd16 	bl	b805c <_ZN6StringC1ERKS_>
      default:
         Serial.println("ActuadorNoValidoError");
         break;
      }
      
      snprintf(buf, sizeof(buf), dispositivos[0] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4630:	4b45      	ldr	r3, [pc, #276]	; (b4748 <_Z12displayPrintbbiii+0x158>)
   b4632:	4946      	ldr	r1, [pc, #280]	; (b474c <_Z12displayPrintbbiii+0x15c>)
   b4634:	4668      	mov	r0, sp
   b4636:	2e00      	cmp	r6, #0
   b4638:	bf08      	it	eq
   b463a:	4619      	moveq	r1, r3
   b463c:	f003 fd61 	bl	b8102 <_ZplRK15StringSumHelperPKc>
   b4640:	220a      	movs	r2, #10
   b4642:	4604      	mov	r4, r0
   b4644:	4639      	mov	r1, r7
   b4646:	a804      	add	r0, sp, #16
   b4648:	f003 fd25 	bl	b8096 <_ZN6StringC1Eih>
   b464c:	a904      	add	r1, sp, #16
   b464e:	4620      	mov	r0, r4
   b4650:	f003 fd4b 	bl	b80ea <_ZplRK15StringSumHelperRK6String>
   b4654:	2140      	movs	r1, #64	; 0x40
   b4656:	6802      	ldr	r2, [r0, #0]
   b4658:	483d      	ldr	r0, [pc, #244]	; (b4750 <_Z12displayPrintbbiii+0x160>)
   b465a:	f003 fb1b 	bl	b7c94 <snprintf>
   b465e:	a804      	add	r0, sp, #16
   b4660:	f003 fc8e 	bl	b7f80 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4664:	4668      	mov	r0, sp
   b4666:	f003 fc8b 	bl	b7f80 <_ZN6StringD1Ev>
      display.println(buf);
   b466a:	4939      	ldr	r1, [pc, #228]	; (b4750 <_Z12displayPrintbbiii+0x160>)
   b466c:	4833      	ldr	r0, [pc, #204]	; (b473c <_Z12displayPrintbbiii+0x14c>)
   b466e:	f003 fda0 	bl	b81b2 <_ZN5Print7printlnEPKc>
   b4672:	4b32      	ldr	r3, [pc, #200]	; (b473c <_Z12displayPrintbbiii+0x14c>)
   b4674:	2200      	movs	r2, #0
   b4676:	611a      	str	r2, [r3, #16]

   }

   display.setCursor(0, 0);
}
   b4678:	b008      	add	sp, #32
   b467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b467e:	4935      	ldr	r1, [pc, #212]	; (b4754 <_Z12displayPrintbbiii+0x164>)
   b4680:	e7cf      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b4682:	f003 ff97 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4686:	4934      	ldr	r1, [pc, #208]	; (b4758 <_Z12displayPrintbbiii+0x168>)
   b4688:	4622      	mov	r2, r4
   b468a:	f7ff fd2b 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b468e:	b90c      	cbnz	r4, b4694 <_Z12displayPrintbbiii+0xa4>
   b4690:	4932      	ldr	r1, [pc, #200]	; (b475c <_Z12displayPrintbbiii+0x16c>)
   b4692:	e7c6      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
   b4694:	4932      	ldr	r1, [pc, #200]	; (b4760 <_Z12displayPrintbbiii+0x170>)
   b4696:	e7c4      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b4698:	b90c      	cbnz	r4, b469e <_Z12displayPrintbbiii+0xae>
   b469a:	4932      	ldr	r1, [pc, #200]	; (b4764 <_Z12displayPrintbbiii+0x174>)
   b469c:	e7c1      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
   b469e:	4932      	ldr	r1, [pc, #200]	; (b4768 <_Z12displayPrintbbiii+0x178>)
   b46a0:	e7bf      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b46a2:	b90c      	cbnz	r4, b46a8 <_Z12displayPrintbbiii+0xb8>
   b46a4:	4931      	ldr	r1, [pc, #196]	; (b476c <_Z12displayPrintbbiii+0x17c>)
   b46a6:	e7bc      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
   b46a8:	4931      	ldr	r1, [pc, #196]	; (b4770 <_Z12displayPrintbbiii+0x180>)
   b46aa:	e7ba      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b46ac:	b90c      	cbnz	r4, b46b2 <_Z12displayPrintbbiii+0xc2>
   b46ae:	4931      	ldr	r1, [pc, #196]	; (b4774 <_Z12displayPrintbbiii+0x184>)
   b46b0:	e7b7      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
   b46b2:	4931      	ldr	r1, [pc, #196]	; (b4778 <_Z12displayPrintbbiii+0x188>)
   b46b4:	e7b5      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         switch (condicion)
   b46b6:	2c01      	cmp	r4, #1
   b46b8:	d005      	beq.n	b46c6 <_Z12displayPrintbbiii+0xd6>
   b46ba:	2c02      	cmp	r4, #2
   b46bc:	d005      	beq.n	b46ca <_Z12displayPrintbbiii+0xda>
   b46be:	2c00      	cmp	r4, #0
   b46c0:	d1b2      	bne.n	b4628 <_Z12displayPrintbbiii+0x38>
            dispositivos[1] = "Sensor Temp.Frio";
   b46c2:	492e      	ldr	r1, [pc, #184]	; (b477c <_Z12displayPrintbbiii+0x18c>)
   b46c4:	e7ad      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Templado";
   b46c6:	492e      	ldr	r1, [pc, #184]	; (b4780 <_Z12displayPrintbbiii+0x190>)
   b46c8:	e7ab      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Calor";
   b46ca:	492e      	ldr	r1, [pc, #184]	; (b4784 <_Z12displayPrintbbiii+0x194>)
   b46cc:	e7a9      	b.n	b4622 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b46ce:	b94c      	cbnz	r4, b46e4 <_Z12displayPrintbbiii+0xf4>
   b46d0:	492d      	ldr	r1, [pc, #180]	; (b4788 <_Z12displayPrintbbiii+0x198>)
   b46d2:	481c      	ldr	r0, [pc, #112]	; (b4744 <_Z12displayPrintbbiii+0x154>)
   b46d4:	f003 fccd 	bl	b8072 <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b46d8:	f003 ff6c 	bl	b85b4 <_Z16_fetch_usbserialv>
   b46dc:	492b      	ldr	r1, [pc, #172]	; (b478c <_Z12displayPrintbbiii+0x19c>)
   b46de:	f003 fd68 	bl	b81b2 <_ZN5Print7printlnEPKc>
         break;
   b46e2:	e7a1      	b.n	b4628 <_Z12displayPrintbbiii+0x38>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b46e4:	492a      	ldr	r1, [pc, #168]	; (b4790 <_Z12displayPrintbbiii+0x1a0>)
   b46e6:	e7f4      	b.n	b46d2 <_Z12displayPrintbbiii+0xe2>
      switch (id)
   b46e8:	b13d      	cbz	r5, b46fa <_Z12displayPrintbbiii+0x10a>
   b46ea:	2d01      	cmp	r5, #1
   b46ec:	d021      	beq.n	b4732 <_Z12displayPrintbbiii+0x142>
         Serial.println("ActuadorNoValidoError");
   b46ee:	f003 ff61 	bl	b85b4 <_Z16_fetch_usbserialv>
   b46f2:	4928      	ldr	r1, [pc, #160]	; (b4794 <_Z12displayPrintbbiii+0x1a4>)
   b46f4:	f003 fd5d 	bl	b81b2 <_ZN5Print7printlnEPKc>
         break;
   b46f8:	e00b      	b.n	b4712 <_Z12displayPrintbbiii+0x122>
         switch (condicion)
   b46fa:	2c07      	cmp	r4, #7
   b46fc:	d809      	bhi.n	b4712 <_Z12displayPrintbbiii+0x122>
   b46fe:	e8df f004 	tbb	[pc, r4]
   b4702:	0a04      	.short	0x0a04
   b4704:	12100e0c 	.word	0x12100e0c
   b4708:	1614      	.short	0x1614
            dispositivos[0] = "RGB Verde";
   b470a:	4923      	ldr	r1, [pc, #140]	; (b4798 <_Z12displayPrintbbiii+0x1a8>)
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b470c:	4823      	ldr	r0, [pc, #140]	; (b479c <_Z12displayPrintbbiii+0x1ac>)
   b470e:	f003 fcb0 	bl	b8072 <_ZN6StringaSEPKc>
	StringSumHelper(const String &s) : String(s) {}
   b4712:	4922      	ldr	r1, [pc, #136]	; (b479c <_Z12displayPrintbbiii+0x1ac>)
   b4714:	e789      	b.n	b462a <_Z12displayPrintbbiii+0x3a>
            dispositivos[0] = "RGB Rojo";
   b4716:	4922      	ldr	r1, [pc, #136]	; (b47a0 <_Z12displayPrintbbiii+0x1b0>)
   b4718:	e7f8      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Amarillo";
   b471a:	4922      	ldr	r1, [pc, #136]	; (b47a4 <_Z12displayPrintbbiii+0x1b4>)
   b471c:	e7f6      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Morado";
   b471e:	4922      	ldr	r1, [pc, #136]	; (b47a8 <_Z12displayPrintbbiii+0x1b8>)
   b4720:	e7f4      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Azul";
   b4722:	4922      	ldr	r1, [pc, #136]	; (b47ac <_Z12displayPrintbbiii+0x1bc>)
   b4724:	e7f2      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Naranja";
   b4726:	4922      	ldr	r1, [pc, #136]	; (b47b0 <_Z12displayPrintbbiii+0x1c0>)
   b4728:	e7f0      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Blink";
   b472a:	4922      	ldr	r1, [pc, #136]	; (b47b4 <_Z12displayPrintbbiii+0x1c4>)
   b472c:	e7ee      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Rainbow";
   b472e:	4922      	ldr	r1, [pc, #136]	; (b47b8 <_Z12displayPrintbbiii+0x1c8>)
   b4730:	e7ec      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4732:	b90c      	cbnz	r4, b4738 <_Z12displayPrintbbiii+0x148>
   b4734:	4921      	ldr	r1, [pc, #132]	; (b47bc <_Z12displayPrintbbiii+0x1cc>)
   b4736:	e7e9      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
   b4738:	4921      	ldr	r1, [pc, #132]	; (b47c0 <_Z12displayPrintbbiii+0x1d0>)
   b473a:	e7e7      	b.n	b470c <_Z12displayPrintbbiii+0x11c>
   b473c:	2003e600 	.word	0x2003e600
   b4740:	000b982e 	.word	0x000b982e
   b4744:	2003e660 	.word	0x2003e660
   b4748:	000b982b 	.word	0x000b982b
   b474c:	000b9828 	.word	0x000b9828
   b4750:	2003e5c0 	.word	0x2003e5c0
   b4754:	000b9844 	.word	0x000b9844
   b4758:	000b985b 	.word	0x000b985b
   b475c:	000b9872 	.word	0x000b9872
   b4760:	000b9880 	.word	0x000b9880
   b4764:	000b988e 	.word	0x000b988e
   b4768:	000b989e 	.word	0x000b989e
   b476c:	000b98ae 	.word	0x000b98ae
   b4770:	000b98be 	.word	0x000b98be
   b4774:	000b98ce 	.word	0x000b98ce
   b4778:	000b98e1 	.word	0x000b98e1
   b477c:	000b98f4 	.word	0x000b98f4
   b4780:	000b9905 	.word	0x000b9905
   b4784:	000b991a 	.word	0x000b991a
   b4788:	000b992c 	.word	0x000b992c
   b478c:	000b995a 	.word	0x000b995a
   b4790:	000b9943 	.word	0x000b9943
   b4794:	000b99e3 	.word	0x000b99e3
   b4798:	000b996e 	.word	0x000b996e
   b479c:	2003e650 	.word	0x2003e650
   b47a0:	000b9978 	.word	0x000b9978
   b47a4:	000b9981 	.word	0x000b9981
   b47a8:	000b998e 	.word	0x000b998e
   b47ac:	000b9999 	.word	0x000b9999
   b47b0:	000b99a2 	.word	0x000b99a2
   b47b4:	000b99ae 	.word	0x000b99ae
   b47b8:	000b99b8 	.word	0x000b99b8
   b47bc:	000b99c4 	.word	0x000b99c4
   b47c0:	000b99d4 	.word	0x000b99d4

000b47c4 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b47c4:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b47c6:	7803      	ldrb	r3, [r0, #0]
   b47c8:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b47ca:	bf0c      	ite	eq
   b47cc:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b47ce:	2200      	movne	r2, #0
   int i = 0;
   b47d0:	4613      	mov	r3, r2
   b47d2:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b47d4:	240a      	movs	r4, #10
      i++;
   b47d6:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b47d8:	f813 1b01 	ldrb.w	r1, [r3], #1
   b47dc:	3930      	subs	r1, #48	; 0x30
   b47de:	b2cd      	uxtb	r5, r1
   b47e0:	2d09      	cmp	r5, #9
   b47e2:	d802      	bhi.n	b47ea <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b47e4:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b47e8:	e7f6      	b.n	b47d8 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b47ea:	b102      	cbz	r2, b47ee <_Z4atoiPc+0x2a>
      num = -1 * num;
   b47ec:	4240      	negs	r0, r0
   return num;
}
   b47ee:	bd30      	pop	{r4, r5, pc}

000b47f0 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b47f0:	b570      	push	{r4, r5, r6, lr}
   b47f2:	4614      	mov	r4, r2
   b47f4:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b47f6:	f004 feff 	bl	b95f8 <strtok>
   int j = 0;
   b47fa:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b47fc:	b140      	cbz	r0, b4810 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b47fe:	f7ff ffe1 	bl	b47c4 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4802:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4804:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4808:	2000      	movs	r0, #0
   b480a:	f004 fef5 	bl	b95f8 <strtok>
   while (ptr != NULL)
   b480e:	e7f5      	b.n	b47fc <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4810:	6823      	ldr	r3, [r4, #0]
   b4812:	b913      	cbnz	r3, b481a <_Z5splitPcS_Pi+0x2a>
      haveSensor = true;
   b4814:	4b01      	ldr	r3, [pc, #4]	; (b481c <_Z5splitPcS_Pi+0x2c>)
   b4816:	2201      	movs	r2, #1
   b4818:	701a      	strb	r2, [r3, #0]
}
   b481a:	bd70      	pop	{r4, r5, r6, pc}
   b481c:	2003e674 	.word	0x2003e674

000b4820 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4822:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4826:	f10d 0307 	add.w	r3, sp, #7
   b482a:	460a      	mov	r2, r1
   b482c:	4601      	mov	r1, r0
   b482e:	480d      	ldr	r0, [pc, #52]	; (b4864 <_Z17readDataFromBlockhPhh+0x44>)
   b4830:	4d0d      	ldr	r5, [pc, #52]	; (b4868 <_Z17readDataFromBlockhPhh+0x48>)
   b4832:	f001 fec7 	bl	b65c4 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b4836:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4838:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b483a:	d010      	beq.n	b485e <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b483c:	f003 feba 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4840:	490a      	ldr	r1, [pc, #40]	; (b486c <_Z17readDataFromBlockhPhh+0x4c>)
   b4842:	f003 fca3 	bl	b818c <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b4846:	f003 feb5 	bl	b85b4 <_Z16_fetch_usbserialv>
   b484a:	7829      	ldrb	r1, [r5, #0]
   b484c:	4604      	mov	r4, r0
   b484e:	4805      	ldr	r0, [pc, #20]	; (b4864 <_Z17readDataFromBlockhPhh+0x44>)
   b4850:	f001 fc0c 	bl	b606c <_ZN7MFRC52217GetStatusCodeNameEh>
   b4854:	4601      	mov	r1, r0
   b4856:	4620      	mov	r0, r4
   b4858:	f003 fcab 	bl	b81b2 <_ZN5Print7printlnEPKc>
   b485c:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b485e:	b003      	add	sp, #12
   b4860:	bd30      	pop	{r4, r5, pc}
   b4862:	bf00      	nop
   b4864:	2003e68c 	.word	0x2003e68c
   b4868:	2003e6b0 	.word	0x2003e6b0
   b486c:	000b99f9 	.word	0x000b99f9

000b4870 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4870:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4872:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4874:	4d1e      	ldr	r5, [pc, #120]	; (b48f0 <_Z8getTagIDPi+0x80>)
   b4876:	4a1f      	ldr	r2, [pc, #124]	; (b48f4 <_Z8getTagIDPi+0x84>)
   b4878:	9500      	str	r5, [sp, #0]
   b487a:	4b1f      	ldr	r3, [pc, #124]	; (b48f8 <_Z8getTagIDPi+0x88>)
   b487c:	7812      	ldrb	r2, [r2, #0]
   b487e:	4f1f      	ldr	r7, [pc, #124]	; (b48fc <_Z8getTagIDPi+0x8c>)
{
   b4880:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4882:	2160      	movs	r1, #96	; 0x60
   b4884:	4628      	mov	r0, r5
   b4886:	f001 febe 	bl	b6606 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b488a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b488c:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b488e:	d00f      	beq.n	b48b0 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4890:	f003 fe90 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4894:	491a      	ldr	r1, [pc, #104]	; (b4900 <_Z8getTagIDPi+0x90>)
   b4896:	f003 fc79 	bl	b818c <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b489a:	f003 fe8b 	bl	b85b4 <_Z16_fetch_usbserialv>
   b489e:	7839      	ldrb	r1, [r7, #0]
   b48a0:	4604      	mov	r4, r0
   b48a2:	4628      	mov	r0, r5
   b48a4:	f001 fbe2 	bl	b606c <_ZN7MFRC52217GetStatusCodeNameEh>
   b48a8:	4601      	mov	r1, r0
   b48aa:	4620      	mov	r0, r4
   b48ac:	f003 fc81 	bl	b81b2 <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b48b0:	4b14      	ldr	r3, [pc, #80]	; (b4904 <_Z8getTagIDPi+0x94>)
   b48b2:	2212      	movs	r2, #18
   b48b4:	7818      	ldrb	r0, [r3, #0]
   b48b6:	a907      	add	r1, sp, #28
   b48b8:	f7ff ffb2 	bl	b4820 <_Z17readDataFromBlockhPhh>
   b48bc:	b1b0      	cbz	r0, b48ec <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b48be:	ac07      	add	r4, sp, #28
   b48c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b48c2:	ad03      	add	r5, sp, #12
   b48c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b48c6:	6823      	ldr	r3, [r4, #0]
   b48c8:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b48ca:	f003 fe73 	bl	b85b4 <_Z16_fetch_usbserialv>
   b48ce:	490e      	ldr	r1, [pc, #56]	; (b4908 <_Z8getTagIDPi+0x98>)
   b48d0:	aa03      	add	r2, sp, #12
   b48d2:	f7ff fc07 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b48d6:	490d      	ldr	r1, [pc, #52]	; (b490c <_Z8getTagIDPi+0x9c>)
   b48d8:	4632      	mov	r2, r6
   b48da:	a803      	add	r0, sp, #12
   b48dc:	f7ff ff88 	bl	b47f0 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b48e0:	4803      	ldr	r0, [pc, #12]	; (b48f0 <_Z8getTagIDPi+0x80>)
   b48e2:	f001 fe4a 	bl	b657a <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b48e6:	4802      	ldr	r0, [pc, #8]	; (b48f0 <_Z8getTagIDPi+0x80>)
   b48e8:	f001 fca7 	bl	b623a <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b48ec:	b00d      	add	sp, #52	; 0x34
   b48ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b48f0:	2003e68c 	.word	0x2003e68c
   b48f4:	2003df58 	.word	0x2003df58
   b48f8:	2003e67c 	.word	0x2003e67c
   b48fc:	2003e6b0 	.word	0x2003e6b0
   b4900:	000b9a10 	.word	0x000b9a10
   b4904:	2003df34 	.word	0x2003df34
   b4908:	000b9a2c 	.word	0x000b9a2c
   b490c:	2003df35 	.word	0x2003df35

000b4910 <_Z13asignarPuertoi>:
   }
}*/


int asignarPuerto(int type)
{
   b4910:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b4912:	b940      	cbnz	r0, b4926 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b4914:	4b26      	ldr	r3, [pc, #152]	; (b49b0 <_Z13asignarPuertoi+0xa0>)
   }
   else
      option = puertoDigital;
   b4916:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b4918:	2c05      	cmp	r4, #5
   b491a:	d840      	bhi.n	b499e <_Z13asignarPuertoi+0x8e>
   b491c:	e8df f004 	tbb	[pc, r4]
   b4920:	261a0f05 	.word	0x261a0f05
   b4924:	342d      	.short	0x342d
      option = puertoDigital;
   b4926:	4b23      	ldr	r3, [pc, #140]	; (b49b4 <_Z13asignarPuertoi+0xa4>)
   b4928:	e7f5      	b.n	b4916 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b492a:	f003 fe43 	bl	b85b4 <_Z16_fetch_usbserialv>
   b492e:	4922      	ldr	r1, [pc, #136]	; (b49b8 <_Z13asignarPuertoi+0xa8>)
   b4930:	f003 fc2c 	bl	b818c <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4934:	4a1e      	ldr	r2, [pc, #120]	; (b49b0 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
   b4936:	6813      	ldr	r3, [r2, #0]
   b4938:	3301      	adds	r3, #1
   b493a:	6013      	str	r3, [r2, #0]
      return 4;
   b493c:	e014      	b.n	b4968 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b493e:	f003 fe39 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4942:	491e      	ldr	r1, [pc, #120]	; (b49bc <_Z13asignarPuertoi+0xac>)
   b4944:	f003 fc22 	bl	b818c <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4948:	4a19      	ldr	r2, [pc, #100]	; (b49b0 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b494a:	6813      	ldr	r3, [r2, #0]
   b494c:	3301      	adds	r3, #1
   b494e:	6013      	str	r3, [r2, #0]
      return 2;
   b4950:	2402      	movs	r4, #2
   b4952:	e009      	b.n	b4968 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b4954:	f003 fe2e 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4958:	4919      	ldr	r1, [pc, #100]	; (b49c0 <_Z13asignarPuertoi+0xb0>)
   b495a:	f003 fc17 	bl	b818c <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b495e:	4b14      	ldr	r3, [pc, #80]	; (b49b0 <_Z13asignarPuertoi+0xa0>)
   b4960:	f04f 32ff 	mov.w	r2, #4294967295
   b4964:	601a      	str	r2, [r3, #0]
      return 4;
   b4966:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b4968:	4620      	mov	r0, r4
   b496a:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b496c:	f003 fe22 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4970:	4914      	ldr	r1, [pc, #80]	; (b49c4 <_Z13asignarPuertoi+0xb4>)
   b4972:	f003 fc0b 	bl	b818c <_ZN5Print5printEPKc>
      puertoDigital++;
   b4976:	4a0f      	ldr	r2, [pc, #60]	; (b49b4 <_Z13asignarPuertoi+0xa4>)
   b4978:	e7e7      	b.n	b494a <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b497a:	f003 fe1b 	bl	b85b4 <_Z16_fetch_usbserialv>
   b497e:	4912      	ldr	r1, [pc, #72]	; (b49c8 <_Z13asignarPuertoi+0xb8>)
   b4980:	f003 fc04 	bl	b818c <_ZN5Print5printEPKc>
      puertoDigital++;
   b4984:	4a0b      	ldr	r2, [pc, #44]	; (b49b4 <_Z13asignarPuertoi+0xa4>)
   b4986:	e7d6      	b.n	b4936 <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b4988:	f003 fe14 	bl	b85b4 <_Z16_fetch_usbserialv>
   b498c:	490f      	ldr	r1, [pc, #60]	; (b49cc <_Z13asignarPuertoi+0xbc>)
   b498e:	f003 fbfd 	bl	b818c <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b4992:	4b08      	ldr	r3, [pc, #32]	; (b49b4 <_Z13asignarPuertoi+0xa4>)
   b4994:	f04f 32ff 	mov.w	r2, #4294967295
   b4998:	601a      	str	r2, [r3, #0]
      return 6;
   b499a:	2406      	movs	r4, #6
   b499c:	e7e4      	b.n	b4968 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b499e:	f003 fe09 	bl	b85b4 <_Z16_fetch_usbserialv>
   b49a2:	490b      	ldr	r1, [pc, #44]	; (b49d0 <_Z13asignarPuertoi+0xc0>)
   b49a4:	f003 fbf2 	bl	b818c <_ZN5Print5printEPKc>
      return -1;
   b49a8:	f04f 34ff 	mov.w	r4, #4294967295
   b49ac:	e7dc      	b.n	b4968 <_Z13asignarPuertoi+0x58>
   b49ae:	bf00      	nop
   b49b0:	2003e6a8 	.word	0x2003e6a8
   b49b4:	2003df3c 	.word	0x2003df3c
   b49b8:	000b9a38 	.word	0x000b9a38
   b49bc:	000b9a4f 	.word	0x000b9a4f
   b49c0:	000b9a66 	.word	0x000b9a66
   b49c4:	000b9a7d 	.word	0x000b9a7d
   b49c8:	000b9a94 	.word	0x000b9a94
   b49cc:	000b9aab 	.word	0x000b9aab
   b49d0:	000b9ac2 	.word	0x000b9ac2

000b49d4 <_Z9ledApagarv>:

ChainableLED ledObject  = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
bool init = true;

void ledApagar()
{
   b49d4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b49d6:	2300      	movs	r3, #0
   b49d8:	4804      	ldr	r0, [pc, #16]	; (b49ec <_Z9ledApagarv+0x18>)
   b49da:	9300      	str	r3, [sp, #0]
   b49dc:	461a      	mov	r2, r3
   b49de:	4619      	mov	r1, r3
   b49e0:	f002 fd58 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b49e4:	b003      	add	sp, #12
   b49e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b49ea:	bf00      	nop
   b49ec:	2003e684 	.word	0x2003e684

000b49f0 <_Z7ledRojov>:
void ledRojo()
{
   b49f0:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b49f2:	2300      	movs	r3, #0
   b49f4:	4804      	ldr	r0, [pc, #16]	; (b4a08 <_Z7ledRojov+0x18>)
   b49f6:	9300      	str	r3, [sp, #0]
   b49f8:	22ff      	movs	r2, #255	; 0xff
   b49fa:	4619      	mov	r1, r3
   b49fc:	f002 fd4a 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a00:	b003      	add	sp, #12
   b4a02:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a06:	bf00      	nop
   b4a08:	2003e684 	.word	0x2003e684

000b4a0c <_Z8ledVerdev>:
void ledVerde()
{
   b4a0c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4a0e:	230a      	movs	r3, #10
   b4a10:	2200      	movs	r2, #0
   b4a12:	9300      	str	r3, [sp, #0]
   b4a14:	4803      	ldr	r0, [pc, #12]	; (b4a24 <_Z8ledVerdev+0x18>)
   b4a16:	23ff      	movs	r3, #255	; 0xff
   b4a18:	4611      	mov	r1, r2
   b4a1a:	f002 fd3b 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a1e:	b003      	add	sp, #12
   b4a20:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a24:	2003e684 	.word	0x2003e684

000b4a28 <_Z7ledAzulv>:
void ledAzul()
{
   b4a28:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b4a2a:	23ff      	movs	r3, #255	; 0xff
   b4a2c:	9300      	str	r3, [sp, #0]
   b4a2e:	2300      	movs	r3, #0
   b4a30:	4803      	ldr	r0, [pc, #12]	; (b4a40 <_Z7ledAzulv+0x18>)
   b4a32:	461a      	mov	r2, r3
   b4a34:	4619      	mov	r1, r3
   b4a36:	f002 fd2d 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a3a:	b003      	add	sp, #12
   b4a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a40:	2003e684 	.word	0x2003e684

000b4a44 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4a44:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4a46:	2100      	movs	r1, #0
   b4a48:	4804      	ldr	r0, [pc, #16]	; (b4a5c <_Z11ledAmarillov+0x18>)
   b4a4a:	9100      	str	r1, [sp, #0]
   b4a4c:	23e9      	movs	r3, #233	; 0xe9
   b4a4e:	22ff      	movs	r2, #255	; 0xff
   b4a50:	f002 fd20 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a54:	b003      	add	sp, #12
   b4a56:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a5a:	bf00      	nop
   b4a5c:	2003e684 	.word	0x2003e684

000b4a60 <_Z9ledMoradov>:
void ledMorado()
{
   b4a60:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4a62:	2375      	movs	r3, #117	; 0x75
   b4a64:	9300      	str	r3, [sp, #0]
   b4a66:	4804      	ldr	r0, [pc, #16]	; (b4a78 <_Z9ledMoradov+0x18>)
   b4a68:	2346      	movs	r3, #70	; 0x46
   b4a6a:	226c      	movs	r2, #108	; 0x6c
   b4a6c:	2100      	movs	r1, #0
   b4a6e:	f002 fd11 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a72:	b003      	add	sp, #12
   b4a74:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a78:	2003e684 	.word	0x2003e684

000b4a7c <_Z10ledNaranjav>:
void ledNaranja()
{
   b4a7c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b4a7e:	2100      	movs	r1, #0
   b4a80:	4804      	ldr	r0, [pc, #16]	; (b4a94 <_Z10ledNaranjav+0x18>)
   b4a82:	9100      	str	r1, [sp, #0]
   b4a84:	2380      	movs	r3, #128	; 0x80
   b4a86:	22ff      	movs	r2, #255	; 0xff
   b4a88:	f002 fd04 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a8c:	b003      	add	sp, #12
   b4a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a92:	bf00      	nop
   b4a94:	2003e684 	.word	0x2003e684

000b4a98 <_Z9ledBlancov>:
void ledBlanco()
{
   b4a98:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b4a9a:	23ff      	movs	r3, #255	; 0xff
   b4a9c:	4804      	ldr	r0, [pc, #16]	; (b4ab0 <_Z9ledBlancov+0x18>)
   b4a9e:	9300      	str	r3, [sp, #0]
   b4aa0:	461a      	mov	r2, r3
   b4aa2:	2100      	movs	r1, #0
   b4aa4:	f002 fcf6 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4aa8:	b003      	add	sp, #12
   b4aaa:	f85d fb04 	ldr.w	pc, [sp], #4
   b4aae:	bf00      	nop
   b4ab0:	2003e684 	.word	0x2003e684
   b4ab4:	00000000 	.word	0x00000000

000b4ab8 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b4ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (double i = 0; i < 1; i += 0.01)
   b4abc:	f20f 0944 	addw	r9, pc, #68	; 0x44
   b4ac0:	e9d9 8900 	ldrd	r8, r9, [r9]
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4ac4:	4f0e      	ldr	r7, [pc, #56]	; (b4b00 <_Z11ledArcoirisv+0x48>)
{
   b4ac6:	2664      	movs	r6, #100	; 0x64
    for (double i = 0; i < 1; i += 0.01)
   b4ac8:	2400      	movs	r4, #0
   b4aca:	2500      	movs	r5, #0
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4acc:	4629      	mov	r1, r5
   b4ace:	4620      	mov	r0, r4
   b4ad0:	f004 fcd0 	bl	b9474 <__aeabi_d2f>
   b4ad4:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
   b4ad8:	ee00 0a10 	vmov	s0, r0
   b4adc:	eef0 0a41 	vmov.f32	s1, s2
   b4ae0:	2100      	movs	r1, #0
   b4ae2:	4638      	mov	r0, r7
   b4ae4:	f002 fdb8 	bl	b7658 <_ZN12ChainableLED11setColorHSBEhfff>
    for (double i = 0; i < 1; i += 0.01)
   b4ae8:	4620      	mov	r0, r4
   b4aea:	4629      	mov	r1, r5
   b4aec:	4642      	mov	r2, r8
   b4aee:	464b      	mov	r3, r9
   b4af0:	f004 f850 	bl	b8b94 <__adddf3>
   b4af4:	3e01      	subs	r6, #1
   b4af6:	4604      	mov	r4, r0
   b4af8:	460d      	mov	r5, r1
   b4afa:	d1e7      	bne.n	b4acc <_Z11ledArcoirisv+0x14>
    }

}
   b4afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4b00:	2003e684 	.word	0x2003e684
   b4b04:	47ae147b 	.word	0x47ae147b
   b4b08:	3f847ae1 	.word	0x3f847ae1

000b4b0c <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4b0c:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4b0e:	2101      	movs	r1, #1
   b4b10:	2006      	movs	r0, #6
   b4b12:	f003 ff60 	bl	b89d6 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b4b16:	2101      	movs	r1, #1
   b4b18:	2006      	movs	r0, #6
   b4b1a:	f003 ff5c 	bl	b89d6 <digitalWrite>
   digitalWrite(D7, HIGH);
   b4b1e:	2101      	movs	r1, #1
   b4b20:	2007      	movs	r0, #7
   b4b22:	f003 ff58 	bl	b89d6 <digitalWrite>
   digitalWrite(D7, 1);
}
   b4b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4b2a:	2101      	movs	r1, #1
   b4b2c:	2007      	movs	r0, #7
   b4b2e:	f003 bf52 	b.w	b89d6 <digitalWrite>

000b4b32 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b4b32:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b4b34:	2100      	movs	r1, #0
   b4b36:	2006      	movs	r0, #6
   b4b38:	f003 ff4d 	bl	b89d6 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4b3c:	2100      	movs	r1, #0
   b4b3e:	2006      	movs	r0, #6
   b4b40:	f003 ff49 	bl	b89d6 <digitalWrite>
   digitalWrite(D7, LOW);
   b4b44:	2100      	movs	r1, #0
   b4b46:	2007      	movs	r0, #7
   b4b48:	f003 ff45 	bl	b89d6 <digitalWrite>
   digitalWrite(D7, 0);
}
   b4b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b4b50:	2100      	movs	r1, #0
   b4b52:	2007      	movs	r0, #7
   b4b54:	f003 bf3f 	b.w	b89d6 <digitalWrite>

000b4b58 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b4b58:	b508      	push	{r3, lr}
   pitidoON0();
   b4b5a:	f7ff ffd7 	bl	b4b0c <_Z9pitidoON0v>
   delay(100);
   b4b5e:	2064      	movs	r0, #100	; 0x64
   b4b60:	f003 fb92 	bl	b8288 <delay>
   pitidoOFF0();
   b4b64:	f7ff ffe5 	bl	b4b32 <_Z10pitidoOFF0v>
   delay(100);
}
   b4b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b4b6c:	2064      	movs	r0, #100	; 0x64
   b4b6e:	f003 bb8b 	b.w	b8288 <delay>

000b4b72 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b4b72:	b108      	cbz	r0, b4b78 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b4b74:	f7ff bf58 	b.w	b4a28 <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b4b78:	f7ff bf80 	b.w	b4a7c <_Z10ledNaranjav>

000b4b7c <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b4b7c:	b108      	cbz	r0, b4b82 <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b4b7e:	f7ff bf61 	b.w	b4a44 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b4b82:	f7ff bf6d 	b.w	b4a60 <_Z9ledMoradov>

000b4b86 <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b4b86:	b108      	cbz	r0, b4b8c <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b4b88:	f7ff bf40 	b.w	b4a0c <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b4b8c:	f7ff bf30 	b.w	b49f0 <_Z7ledRojov>

000b4b90 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b4b90:	b508      	push	{r3, lr}
   if (estado)
   b4b92:	b160      	cbz	r0, b4bae <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b4b94:	f7ff ff80 	bl	b4a98 <_Z9ledBlancov>
      delay(400);
   b4b98:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4b9c:	f003 fb74 	bl	b8288 <delay>
      ledApagar();
   b4ba0:	f7ff ff18 	bl	b49d4 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b4ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4ba8:	20c8      	movs	r0, #200	; 0xc8
   b4baa:	f003 bb6d 	b.w	b8288 <delay>
}
   b4bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b4bb2:	f7ff bf0f 	b.w	b49d4 <_Z9ledApagarv>

000b4bb6 <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b4bb6:	b108      	cbz	r0, b4bbc <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b4bb8:	f7ff bf6e 	b.w	b4a98 <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b4bbc:	f7ff bf0a 	b.w	b49d4 <_Z9ledApagarv>

000b4bc0 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b4bc0:	b108      	cbz	r0, b4bc6 <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b4bc2:	f7ff bf79 	b.w	b4ab8 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b4bc6:	f7ff bf05 	b.w	b49d4 <_Z9ledApagarv>

000b4bca <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b4bca:	b108      	cbz	r0, b4bd0 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4bcc:	f7ff bfc4 	b.w	b4b58 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4bd0:	f7ff bfaf 	b.w	b4b32 <_Z10pitidoOFF0v>

000b4bd4 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b4bd4:	b108      	cbz	r0, b4bda <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b4bd6:	f7ff bf99 	b.w	b4b0c <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4bda:	f7ff bfaa 	b.w	b4b32 <_Z10pitidoOFF0v>
	...

000b4be0 <_Z15activarActuador8ACTUADORib>:
   }
}

void activarActuador(Actuador actuador, int opcion, boolean valor)
{
   b4be0:	b084      	sub	sp, #16
   b4be2:	b538      	push	{r3, r4, r5, lr}
   b4be4:	ac04      	add	r4, sp, #16
   b4be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4bea:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b4bec:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   switch (actuador.id)
   b4bf0:	b148      	cbz	r0, b4c06 <_Z15activarActuador8ACTUADORib+0x26>
   b4bf2:	2801      	cmp	r0, #1
   b4bf4:	d032      	beq.n	b4c5c <_Z15activarActuador8ACTUADORib+0x7c>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4bf6:	f003 fcdd 	bl	b85b4 <_Z16_fetch_usbserialv>
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b4bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b4bfe:	4920      	ldr	r1, [pc, #128]	; (b4c80 <_Z15activarActuador8ACTUADORib+0xa0>)
}
   b4c00:	b004      	add	sp, #16
            Serial.println("Valor no valido");
   b4c02:	f003 bad6 	b.w	b81b2 <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4c06:	2d05      	cmp	r5, #5
   b4c08:	d8f5      	bhi.n	b4bf6 <_Z15activarActuador8ACTUADORib+0x16>
   b4c0a:	e8df f005 	tbb	[pc, r5]
   b4c0e:	0903      	.short	0x0903
   b4c10:	211b150f 	.word	0x211b150f
            ledVerdeRojo(valor);
   b4c14:	4620      	mov	r0, r4
}
   b4c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c1a:	b004      	add	sp, #16
            ledVerdeRojo(valor);
   b4c1c:	f7ff bfb3 	b.w	b4b86 <_Z12ledVerdeRojob>
            ledMoradoAmarillo(valor);
   b4c20:	4620      	mov	r0, r4
}
   b4c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c26:	b004      	add	sp, #16
            ledMoradoAmarillo(valor);
   b4c28:	f7ff bfa8 	b.w	b4b7c <_Z17ledMoradoAmarillob>
            ledAzulNaranja(valor);
   b4c2c:	4620      	mov	r0, r4
}
   b4c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c32:	b004      	add	sp, #16
            ledAzulNaranja(valor);
   b4c34:	f7ff bf9d 	b.w	b4b72 <_Z14ledAzulNaranjab>
            ledBlink0(valor);
   b4c38:	4620      	mov	r0, r4
}
   b4c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c3e:	b004      	add	sp, #16
            ledBlink0(valor);
   b4c40:	f7ff bfa6 	b.w	b4b90 <_Z9ledBlink0b>
            ledArcoiris0(valor);
   b4c44:	4620      	mov	r0, r4
}
   b4c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c4a:	b004      	add	sp, #16
            ledArcoiris0(valor);
   b4c4c:	f7ff bfb8 	b.w	b4bc0 <_Z12ledArcoiris0b>
            ledOnOff(valor);
   b4c50:	4620      	mov	r0, r4
}
   b4c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c56:	b004      	add	sp, #16
            ledOnOff(valor);
   b4c58:	f7ff bfad 	b.w	b4bb6 <_Z8ledOnOffb>
      ledApagar();
   b4c5c:	f7ff feba 	bl	b49d4 <_Z9ledApagarv>
      switch (opcion) {
   b4c60:	b13d      	cbz	r5, b4c72 <_Z15activarActuador8ACTUADORib+0x92>
   b4c62:	2d01      	cmp	r5, #1
   b4c64:	d1c7      	bne.n	b4bf6 <_Z15activarActuador8ACTUADORib+0x16>
            blinkAndSleep(valor);
   b4c66:	4620      	mov	r0, r4
}
   b4c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c6c:	b004      	add	sp, #16
            blinkAndSleep(valor);
   b4c6e:	f7ff bfac 	b.w	b4bca <_Z13blinkAndSleepb>
            zumbador(valor);
   b4c72:	4620      	mov	r0, r4
}
   b4c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c78:	b004      	add	sp, #16
            zumbador(valor);
   b4c7a:	f7ff bfab 	b.w	b4bd4 <_Z8zumbadorb>
   b4c7e:	bf00      	nop
   b4c80:	000b9aea 	.word	0x000b9aea

000b4c84 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b4c84:	b508      	push	{r3, lr}
    ledBlanco();
   b4c86:	f7ff ff07 	bl	b4a98 <_Z9ledBlancov>
    delay(400);
   b4c8a:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4c8e:	f003 fafb 	bl	b8288 <delay>
    ledApagar();
   b4c92:	f7ff fe9f 	bl	b49d4 <_Z9ledApagarv>
    delay(200);
}
   b4c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4c9a:	20c8      	movs	r0, #200	; 0xc8
   b4c9c:	f003 baf4 	b.w	b8288 <delay>

000b4ca0 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b4ca0:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4ca2:	b284      	uxth	r4, r0
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	2101      	movs	r1, #1
   b4ca8:	f003 fe95 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b4cac:	4620      	mov	r0, r4
   b4cae:	2101      	movs	r1, #1
   b4cb0:	f003 fe91 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4cb4:	1c60      	adds	r0, r4, #1
   b4cb6:	b280      	uxth	r0, r0
   b4cb8:	2101      	movs	r1, #1
   b4cba:	9001      	str	r0, [sp, #4]
   b4cbc:	f003 fe8b 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4cc0:	9801      	ldr	r0, [sp, #4]
   b4cc2:	2101      	movs	r1, #1
}
   b4cc4:	b002      	add	sp, #8
   b4cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b4cca:	f003 be84 	b.w	b89d6 <digitalWrite>

000b4cce <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b4cce:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4cd0:	b284      	uxth	r4, r0
   b4cd2:	4620      	mov	r0, r4
   b4cd4:	2100      	movs	r1, #0
   b4cd6:	f003 fe7e 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto, LOW);
   b4cda:	4620      	mov	r0, r4
   b4cdc:	2100      	movs	r1, #0
   b4cde:	f003 fe7a 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4ce2:	1c60      	adds	r0, r4, #1
   b4ce4:	b280      	uxth	r0, r0
   b4ce6:	2100      	movs	r1, #0
   b4ce8:	9001      	str	r0, [sp, #4]
   b4cea:	f003 fe74 	bl	b89d6 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4cee:	9801      	ldr	r0, [sp, #4]
   b4cf0:	2100      	movs	r1, #0
}
   b4cf2:	b002      	add	sp, #8
   b4cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4cf8:	f003 be6d 	b.w	b89d6 <digitalWrite>

000b4cfc <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b4cfc:	b510      	push	{r4, lr}
   b4cfe:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b4d00:	f7ff ffce 	bl	b4ca0 <_Z9pitidoON1i>
    delay(100);
   b4d04:	2064      	movs	r0, #100	; 0x64
   b4d06:	f003 fabf 	bl	b8288 <delay>
    pitidoOFF1(puerto);
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f7ff ffdf 	bl	b4cce <_Z10pitidoOFF1i>
    delay(100);
}
   b4d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4d14:	2064      	movs	r0, #100	; 0x64
   b4d16:	f003 bab7 	b.w	b8288 <delay>
	...

000b4d1c <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Serial.println("Actiaver LED");
    if (init)
   b4d1e:	4f28      	ldr	r7, [pc, #160]	; (b4dc0 <_Z10activarLEDii+0xa4>)
   b4d20:	783b      	ldrb	r3, [r7, #0]
{
   b4d22:	4604      	mov	r4, r0
    if (init)
   b4d24:	b1a3      	cbz	r3, b4d50 <_Z10activarLEDii+0x34>
    {
        ledObject = ChainableLED(puerto, puerto + 1, 5);
   b4d26:	b2c9      	uxtb	r1, r1
   b4d28:	1c4a      	adds	r2, r1, #1
   b4d2a:	466d      	mov	r5, sp
   b4d2c:	2305      	movs	r3, #5
   b4d2e:	b2d2      	uxtb	r2, r2
   b4d30:	4628      	mov	r0, r5
   b4d32:	f002 fb45 	bl	b73c0 <_ZN12ChainableLEDC1Ehhh>
   b4d36:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4d3a:	4e22      	ldr	r6, [pc, #136]	; (b4dc4 <_Z10activarLEDii+0xa8>)
   b4d3c:	e886 0003 	stmia.w	r6, {r0, r1}
   b4d40:	4628      	mov	r0, r5
   b4d42:	f002 fb4a 	bl	b73da <_ZN12ChainableLEDD1Ev>
        ledObject.init();
   b4d46:	4630      	mov	r0, r6
   b4d48:	f002 fbec 	bl	b7524 <_ZN12ChainableLED4initEv>
        init = false;
   b4d4c:	2300      	movs	r3, #0
   b4d4e:	703b      	strb	r3, [r7, #0]
    }

    switch (opcion)
   b4d50:	2c07      	cmp	r4, #7
   b4d52:	d82d      	bhi.n	b4db0 <_Z10activarLEDii+0x94>
   b4d54:	e8df f004 	tbb	[pc, r4]
   b4d58:	130e0904 	.word	0x130e0904
   b4d5c:	27221d18 	.word	0x27221d18

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4d60:	b003      	add	sp, #12
   b4d62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerde();
   b4d66:	f7ff be51 	b.w	b4a0c <_Z8ledVerdev>
}
   b4d6a:	b003      	add	sp, #12
   b4d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledRojo();
   b4d70:	f7ff be3e 	b.w	b49f0 <_Z7ledRojov>
}
   b4d74:	b003      	add	sp, #12
   b4d76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAmarillo();
   b4d7a:	f7ff be63 	b.w	b4a44 <_Z11ledAmarillov>
}
   b4d7e:	b003      	add	sp, #12
   b4d80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMorado();
   b4d84:	f7ff be6c 	b.w	b4a60 <_Z9ledMoradov>
}
   b4d88:	b003      	add	sp, #12
   b4d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzul();
   b4d8e:	f7ff be4b 	b.w	b4a28 <_Z7ledAzulv>
}
   b4d92:	b003      	add	sp, #12
   b4d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledNaranja();
   b4d98:	f7ff be70 	b.w	b4a7c <_Z10ledNaranjav>
}
   b4d9c:	b003      	add	sp, #12
   b4d9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink();
   b4da2:	f7ff bf6f 	b.w	b4c84 <_Z8ledBlinkv>
}
   b4da6:	b003      	add	sp, #12
   b4da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris();
   b4dac:	f7ff be84 	b.w	b4ab8 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b4db0:	f003 fc00 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4db4:	4904      	ldr	r1, [pc, #16]	; (b4dc8 <_Z10activarLEDii+0xac>)
}
   b4db6:	b003      	add	sp, #12
   b4db8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b4dbc:	f003 b9f9 	b.w	b81b2 <_ZN5Print7printlnEPKc>
   b4dc0:	2003df37 	.word	0x2003df37
   b4dc4:	2003e684 	.word	0x2003e684
   b4dc8:	000b9afa 	.word	0x000b9afa

000b4dcc <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b4dcc:	b538      	push	{r3, r4, r5, lr}
   b4dce:	460c      	mov	r4, r1
   b4dd0:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4dd2:	2101      	movs	r1, #1
   b4dd4:	b2a0      	uxth	r0, r4
   b4dd6:	f003 fded 	bl	b89b4 <pinMode>

    switch (opcion)
   b4dda:	b145      	cbz	r5, b4dee <_Z15activarZumbadorii+0x22>
   b4ddc:	2d01      	cmp	r5, #1
   b4dde:	d00b      	beq.n	b4df8 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4de0:	f003 fbe8 	bl	b85b4 <_Z16_fetch_usbserialv>
        break;
    }
}
   b4de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4de8:	4906      	ldr	r1, [pc, #24]	; (b4e04 <_Z15activarZumbadorii+0x38>)
   b4dea:	f003 b9e2 	b.w	b81b2 <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b4dee:	4620      	mov	r0, r4
}
   b4df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b4df4:	f7ff bf54 	b.w	b4ca0 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b4df8:	4620      	mov	r0, r4
}
   b4dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b4dfe:	f7ff bf7d 	b.w	b4cfc <_Z12pitidoBlink1i>
   b4e02:	bf00      	nop
   b4e04:	000b9aea 	.word	0x000b9aea

000b4e08 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4e08:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4e0a:	b908      	cbnz	r0, b4e10 <_Z14apagarActuadorii+0x8>
   b4e0c:	f7ff bde2 	b.w	b49d4 <_Z9ledApagarv>
   b4e10:	2100      	movs	r1, #0
   b4e12:	b298      	uxth	r0, r3
   b4e14:	f003 bddf 	b.w	b89d6 <digitalWrite>

000b4e18 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4e18:	4603      	mov	r3, r0
    if (id < 2)
   b4e1a:	2b01      	cmp	r3, #1
{
   b4e1c:	4608      	mov	r0, r1
   b4e1e:	4611      	mov	r1, r2
    if (id < 2)
   b4e20:	dc04      	bgt.n	b4e2c <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b4e22:	b90b      	cbnz	r3, b4e28 <_Z15actuadorHandleriii+0x10>
   b4e24:	f7ff bf7a 	b.w	b4d1c <_Z10activarLEDii>
   b4e28:	f7ff bfd0 	b.w	b4dcc <_Z15activarZumbadorii>
   b4e2c:	4770      	bx	lr
	...

000b4e30 <setup>:
int puerto;

Bloque bloques[2];

void setup()
{
   b4e30:	b570      	push	{r4, r5, r6, lr}
   b4e32:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4e34:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4e36:	a805      	add	r0, sp, #20
   b4e38:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4e3c:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4e40:	f003 fac8 	bl	b83d4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4e44:	4839      	ldr	r0, [pc, #228]	; (b4f2c <setup+0xfc>)
   b4e46:	4623      	mov	r3, r4
   b4e48:	4622      	mov	r2, r4
   b4e4a:	4621      	mov	r1, r4
   b4e4c:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4e4e:	4c38      	ldr	r4, [pc, #224]	; (b4f30 <setup+0x100>)
   b4e50:	f002 fec0 	bl	b7bd4 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4e54:	f003 fbae 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4e58:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e5c:	f003 fb9e 	bl	b859c <_ZN9USBSerial5beginEl>
   b4e60:	7821      	ldrb	r1, [r4, #0]
   b4e62:	f3bf 8f5b 	dmb	ish
   b4e66:	f011 0101 	ands.w	r1, r1, #1
   b4e6a:	d10b      	bne.n	b4e84 <setup+0x54>
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	9103      	str	r1, [sp, #12]
   b4e70:	f7ff f922 	bl	b40b8 <__cxa_guard_acquire>
   b4e74:	9903      	ldr	r1, [sp, #12]
   b4e76:	b128      	cbz	r0, b4e84 <setup+0x54>
   b4e78:	482e      	ldr	r0, [pc, #184]	; (b4f34 <setup+0x104>)
   b4e7a:	f002 ff77 	bl	b7d6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f7ff f91f 	bl	b40c2 <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4e84:	482b      	ldr	r0, [pc, #172]	; (b4f34 <setup+0x104>)
  {
    key.keyByte[i] = 0xFF;
  }
  // initializeBLocks(bloques);

  MODE = EEPROM.read(0);
   b4e86:	4c2c      	ldr	r4, [pc, #176]	; (b4f38 <setup+0x108>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4e88:	2501      	movs	r5, #1
   b4e8a:	f002 ff79 	bl	b7d80 <_ZN8SPIClass5beginEv>
   b4e8e:	462b      	mov	r3, r5
   b4e90:	223c      	movs	r2, #60	; 0x3c
   b4e92:	2102      	movs	r1, #2
   b4e94:	4829      	ldr	r0, [pc, #164]	; (b4f3c <setup+0x10c>)
   b4e96:	9500      	str	r5, [sp, #0]
   b4e98:	f001 ff9e 	bl	b6dd8 <_ZN16Adafruit_SSD13065beginEhhbb>
  mfrc522.PCD_Init();
   b4e9c:	4828      	ldr	r0, [pc, #160]	; (b4f40 <setup+0x110>)
   b4e9e:	f001 fa30 	bl	b6302 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b4ea2:	4a28      	ldr	r2, [pc, #160]	; (b4f44 <setup+0x114>)
   b4ea4:	21ff      	movs	r1, #255	; 0xff
   b4ea6:	7011      	strb	r1, [r2, #0]
   b4ea8:	7051      	strb	r1, [r2, #1]
   b4eaa:	7091      	strb	r1, [r2, #2]
   b4eac:	70d1      	strb	r1, [r2, #3]
   b4eae:	7111      	strb	r1, [r2, #4]
   b4eb0:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b4eb2:	f003 fe15 	bl	b8ae0 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b4eb6:	2000      	movs	r0, #0
   b4eb8:	f002 fd08 	bl	b78cc <HAL_EEPROM_Read>

  if ( MODE == 0xFF ) {
   b4ebc:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b4ebe:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b4ec0:	d10d      	bne.n	b4ede <setup+0xae>
    // EEPROM empty
    Serial.println("EEPROM empty");
   b4ec2:	f003 fb77 	bl	b85b4 <_Z16_fetch_usbserialv>
    MODE = 0;
   b4ec6:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b4ec8:	491f      	ldr	r1, [pc, #124]	; (b4f48 <setup+0x118>)
   b4eca:	f003 f972 	bl	b81b2 <_ZN5Print7printlnEPKc>
    MODE = 0;
   b4ece:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b4ed0:	f003 fe06 	bl	b8ae0 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b4ed4:	462a      	mov	r2, r5
   b4ed6:	4621      	mov	r1, r4
   b4ed8:	4630      	mov	r0, r6
   b4eda:	f002 fcff 	bl	b78dc <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b4ede:	7824      	ldrb	r4, [r4, #0]
   b4ee0:	b9cc      	cbnz	r4, b4f16 <setup+0xe6>

    Serial.println("MODO BÁSICO iniciado");
   b4ee2:	f003 fb67 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4ee6:	4919      	ldr	r1, [pc, #100]	; (b4f4c <setup+0x11c>)
   b4ee8:	f003 f963 	bl	b81b2 <_ZN5Print7printlnEPKc>

    ledObject.init();
   b4eec:	4818      	ldr	r0, [pc, #96]	; (b4f50 <setup+0x120>)
   b4eee:	f002 fb19 	bl	b7524 <_ZN12ChainableLED4initEv>
    pinMode(Zumbador_PIN, OUTPUT);
   b4ef2:	2101      	movs	r1, #1
   b4ef4:	2006      	movs	r0, #6
   b4ef6:	f003 fd5d 	bl	b89b4 <pinMode>

    Bloque bloque;
    numBloque++;
   b4efa:	4a16      	ldr	r2, [pc, #88]	; (b4f54 <setup+0x124>)
   b4efc:	6813      	ldr	r3, [r2, #0]
   b4efe:	3301      	adds	r3, #1
   b4f00:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b4f02:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4f06:	4a14      	ldr	r2, [pc, #80]	; (b4f58 <setup+0x128>)
   b4f08:	434b      	muls	r3, r1
   b4f0a:	18d1      	adds	r1, r2, r3
   b4f0c:	50d4      	str	r4, [r2, r3]
   b4f0e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144

    Serial.println("MODO AVANZADO iniciado");

  }
  
}
   b4f12:	b008      	add	sp, #32
   b4f14:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b4f16:	2c01      	cmp	r4, #1
   b4f18:	d1fb      	bne.n	b4f12 <setup+0xe2>
    Serial.println("MODO AVANZADO iniciado");
   b4f1a:	f003 fb4b 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4f1e:	490f      	ldr	r1, [pc, #60]	; (b4f5c <setup+0x12c>)
}
   b4f20:	b008      	add	sp, #32
   b4f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("MODO AVANZADO iniciado");
   b4f26:	f003 b944 	b.w	b81b2 <_ZN5Print7printlnEPKc>
   b4f2a:	bf00      	nop
   b4f2c:	2003e710 	.word	0x2003e710
   b4f30:	2003dfc8 	.word	0x2003dfc8
   b4f34:	2003dfcc 	.word	0x2003dfcc
   b4f38:	2003dfd6 	.word	0x2003dfd6
   b4f3c:	2003e600 	.word	0x2003e600
   b4f40:	2003e68c 	.word	0x2003e68c
   b4f44:	2003e67c 	.word	0x2003e67c
   b4f48:	000b9b09 	.word	0x000b9b09
   b4f4c:	000b9b16 	.word	0x000b9b16
   b4f50:	2003e684 	.word	0x2003e684
   b4f54:	2003df38 	.word	0x2003df38
   b4f58:	2003dfe8 	.word	0x2003dfe8
   b4f5c:	000b9b2c 	.word	0x000b9b2c

000b4f60 <_Z13isValidSensori>:
// Declaramos función reset en dirección 0.
void(* resetFunc) (void) = 0;

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4f60:	b570      	push	{r4, r5, r6, lr}
  Bloque bloque = bloques[numBloque];
   b4f62:	4b12      	ldr	r3, [pc, #72]	; (b4fac <_Z13isValidSensori+0x4c>)
   b4f64:	4e12      	ldr	r6, [pc, #72]	; (b4fb0 <_Z13isValidSensori+0x50>)
   b4f66:	681c      	ldr	r4, [r3, #0]
   b4f68:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f6c:	4354      	muls	r4, r2
{
   b4f6e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
  Bloque bloque = bloques[numBloque];
   b4f72:	1931      	adds	r1, r6, r4
{
   b4f74:	4605      	mov	r5, r0
  Bloque bloque = bloques[numBloque];
   b4f76:	a801      	add	r0, sp, #4
   b4f78:	f004 fada 	bl	b9530 <memcpy>
   b4f7c:	5931      	ldr	r1, [r6, r4]
  for (int i = 0; i < bloque.numSensores; i++)
   b4f7e:	ab01      	add	r3, sp, #4
   b4f80:	2200      	movs	r2, #0
   b4f82:	428a      	cmp	r2, r1
   b4f84:	da0f      	bge.n	b4fa6 <_Z13isValidSensori+0x46>
  {
    if (bloque.sensores[i].id == deviceID)
   b4f86:	6858      	ldr	r0, [r3, #4]
   b4f88:	42a8      	cmp	r0, r5
   b4f8a:	f103 0310 	add.w	r3, r3, #16
   b4f8e:	d108      	bne.n	b4fa2 <_Z13isValidSensori+0x42>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4f90:	f003 fb10 	bl	b85b4 <_Z16_fetch_usbserialv>
   b4f94:	4907      	ldr	r1, [pc, #28]	; (b4fb4 <_Z13isValidSensori+0x54>)
   b4f96:	f003 f90c 	bl	b81b2 <_ZN5Print7printlnEPKc>
   b4f9a:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4f9c:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   b4fa0:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < bloque.numSensores; i++)
   b4fa2:	3201      	adds	r2, #1
   b4fa4:	e7ed      	b.n	b4f82 <_Z13isValidSensori+0x22>
  return true;
   b4fa6:	2001      	movs	r0, #1
   b4fa8:	e7f8      	b.n	b4f9c <_Z13isValidSensori+0x3c>
   b4faa:	bf00      	nop
   b4fac:	2003df38 	.word	0x2003df38
   b4fb0:	2003dfe8 	.word	0x2003dfe8
   b4fb4:	000b9b43 	.word	0x000b9b43

000b4fb8 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4fba:	4b11      	ldr	r3, [pc, #68]	; (b5000 <_Z11isNewSensori+0x48>)
   b4fbc:	4a11      	ldr	r2, [pc, #68]	; (b5004 <_Z11isNewSensori+0x4c>)
   b4fbe:	681e      	ldr	r6, [r3, #0]
   b4fc0:	4694      	mov	ip, r2
   b4fc2:	2300      	movs	r3, #0
   b4fc4:	429e      	cmp	r6, r3
   b4fc6:	db17      	blt.n	b4ff8 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4fc8:	6817      	ldr	r7, [r2, #0]
   b4fca:	4615      	mov	r5, r2
   b4fcc:	2100      	movs	r1, #0
   b4fce:	428f      	cmp	r7, r1
   b4fd0:	dd0e      	ble.n	b4ff0 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4fd2:	686c      	ldr	r4, [r5, #4]
   b4fd4:	4284      	cmp	r4, r0
   b4fd6:	f105 0510 	add.w	r5, r5, #16
   b4fda:	d107      	bne.n	b4fec <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4fdc:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4fe0:	4353      	muls	r3, r2
   b4fe2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4fe6:	4463      	add	r3, ip
   b4fe8:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4fec:	3101      	adds	r1, #1
   b4fee:	e7ee      	b.n	b4fce <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4ff0:	3301      	adds	r3, #1
   b4ff2:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4ff6:	e7e5      	b.n	b4fc4 <_Z11isNewSensori+0xc>
  return -1;
   b4ff8:	f04f 30ff 	mov.w	r0, #4294967295
   b4ffc:	e7f5      	b.n	b4fea <_Z11isNewSensori+0x32>
   b4ffe:	bf00      	nop
   b5000:	2003df38 	.word	0x2003df38
   b5004:	2003dfe8 	.word	0x2003dfe8

000b5008 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b5008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b500c:	4d18      	ldr	r5, [pc, #96]	; (b5070 <_Z15isValidActuadorii+0x68>)
  for (int i = 0; i <= numBloque; i++)
   b500e:	4b19      	ldr	r3, [pc, #100]	; (b5074 <_Z15isValidActuadorii+0x6c>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5010:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b5014:	681f      	ldr	r7, [r3, #0]
{
   b5016:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5018:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b501a:	2400      	movs	r4, #0
   b501c:	42a7      	cmp	r7, r4
   b501e:	db21      	blt.n	b5064 <_Z15isValidActuadorii+0x5c>
    if ( i == numBloque ) 
   b5020:	d10e      	bne.n	b5040 <_Z15isValidActuadorii+0x38>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b5022:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b5026:	461a      	mov	r2, r3
   b5028:	2600      	movs	r6, #0
   b502a:	45b0      	cmp	r8, r6
   b502c:	dd08      	ble.n	b5040 <_Z15isValidActuadorii+0x38>
        if (actuador.condicion == deviceState && actuador.id == actuadorID)
   b502e:	e9d2 9052 	ldrd	r9, r0, [r2, #328]	; 0x148
   b5032:	4560      	cmp	r0, ip
   b5034:	d101      	bne.n	b503a <_Z15isValidActuadorii+0x32>
   b5036:	4589      	cmp	r9, r1
   b5038:	d017      	beq.n	b506a <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b503a:	3601      	adds	r6, #1
   b503c:	3214      	adds	r2, #20
   b503e:	e7f4      	b.n	b502a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b5040:	2f01      	cmp	r7, #1
   b5042:	d10b      	bne.n	b505c <_Z15isValidActuadorii+0x54>
   b5044:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5046:	2200      	movs	r2, #0
   b5048:	4596      	cmp	lr, r2
   b504a:	dd07      	ble.n	b505c <_Z15isValidActuadorii+0x54>
      {
        Actuador actuador = bloques[0].actuadores[j];
        // Mismo actuador
        if (actuador.id == actuadorID)
   b504c:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b5050:	4281      	cmp	r1, r0
   b5052:	f106 0614 	add.w	r6, r6, #20
   b5056:	d008      	beq.n	b506a <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5058:	3201      	adds	r2, #1
   b505a:	e7f5      	b.n	b5048 <_Z15isValidActuadorii+0x40>
  for (int i = 0; i <= numBloque; i++)
   b505c:	3401      	adds	r4, #1
   b505e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b5062:	e7db      	b.n	b501c <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b5064:	2001      	movs	r0, #1
}
   b5066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return false;
   b506a:	2000      	movs	r0, #0
   b506c:	e7fb      	b.n	b5066 <_Z15isValidActuadorii+0x5e>
   b506e:	bf00      	nop
   b5070:	2003dfe8 	.word	0x2003dfe8
   b5074:	2003df38 	.word	0x2003df38

000b5078 <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5078:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b507a:	4b0f      	ldr	r3, [pc, #60]	; (b50b8 <_Z13isNewActuadori+0x40>)
   b507c:	681e      	ldr	r6, [r3, #0]
   b507e:	4b0f      	ldr	r3, [pc, #60]	; (b50bc <_Z13isNewActuadori+0x44>)
   b5080:	2100      	movs	r1, #0
   b5082:	428e      	cmp	r6, r1
   b5084:	db13      	blt.n	b50ae <_Z13isNewActuadori+0x36>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5086:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
   b508a:	461a      	mov	r2, r3
   b508c:	2400      	movs	r4, #0
   b508e:	42a7      	cmp	r7, r4
   b5090:	dd09      	ble.n	b50a6 <_Z13isNewActuadori+0x2e>
    {
      Actuador actuador = bloques[j].actuadores[i];
   b5092:	f8d2 c148 	ldr.w	ip, [r2, #328]	; 0x148

      if (actuador.id == deviceID)
   b5096:	4584      	cmp	ip, r0
   b5098:	f102 0214 	add.w	r2, r2, #20
      Actuador actuador = bloques[j].actuadores[i];
   b509c:	f8d2 5140 	ldr.w	r5, [r2, #320]	; 0x140
      if (actuador.id == deviceID)
   b50a0:	d007      	beq.n	b50b2 <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b50a2:	3401      	adds	r4, #1
   b50a4:	e7f3      	b.n	b508e <_Z13isNewActuadori+0x16>
  for (int j = 0; j <= numBloque; j++)
   b50a6:	3101      	adds	r1, #1
   b50a8:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b50ac:	e7e9      	b.n	b5082 <_Z13isNewActuadori+0xa>
        return actuador.puerto;
      }
    }
  }

  return -1;
   b50ae:	f04f 35ff 	mov.w	r5, #4294967295
}
   b50b2:	4628      	mov	r0, r5
   b50b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b50b6:	bf00      	nop
   b50b8:	2003df38 	.word	0x2003df38
   b50bc:	2003dfe8 	.word	0x2003dfe8

000b50c0 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b50c0:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50c2:	4b0c      	ldr	r3, [pc, #48]	; (b50f4 <_Z14isActuadorDualii+0x34>)
   b50c4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b50c8:	fb02 3101 	mla	r1, r2, r1, r3
   b50cc:	2200      	movs	r2, #0
   b50ce:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b50d2:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50d4:	4294      	cmp	r4, r2
   b50d6:	dd08      	ble.n	b50ea <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b50d8:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b50dc:	4285      	cmp	r5, r0
   b50de:	d101      	bne.n	b50e4 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b50e0:	b92b      	cbnz	r3, b50ee <_Z14isActuadorDualii+0x2e>
   b50e2:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50e4:	3201      	adds	r2, #1
   b50e6:	3114      	adds	r1, #20
   b50e8:	e7f4      	b.n	b50d4 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b50ea:	2000      	movs	r0, #0
}
   b50ec:	bd30      	pop	{r4, r5, pc}
      return true;
   b50ee:	4618      	mov	r0, r3
   b50f0:	e7fc      	b.n	b50ec <_Z14isActuadorDualii+0x2c>
   b50f2:	bf00      	nop
   b50f4:	2003dfe8 	.word	0x2003dfe8

000b50f8 <_Z18ejecutarEvaluacionbi>:
    numBloque++;
  }

}

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b50f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b50fc:	4c16      	ldr	r4, [pc, #88]	; (b5158 <_Z18ejecutarEvaluacionbi+0x60>)
   b50fe:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5102:	fb03 4401 	mla	r4, r3, r1, r4
   b5106:	4607      	mov	r7, r0
   b5108:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b510a:	2600      	movs	r6, #0
   b510c:	46a1      	mov	r9, r4
   b510e:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b5112:	42b3      	cmp	r3, r6
   b5114:	dd1c      	ble.n	b5150 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    // Serial.printlnf("Actuandor: %d , %s", actuador.id, actuador.evaluate ? "True" : "False");
    if (evaluacion == actuador.evaluate)
   b5116:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b511a:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b511e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5122:	42bb      	cmp	r3, r7
   b5124:	d107      	bne.n	b5136 <_Z18ejecutarEvaluacionbi+0x3e>
    {
      // Serial.println("ActivarActuador");
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5126:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b512a:	4640      	mov	r0, r8
   b512c:	f7ff fe74 	bl	b4e18 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5130:	3601      	adds	r6, #1
   b5132:	3414      	adds	r4, #20
   b5134:	e7eb      	b.n	b510e <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b5136:	4629      	mov	r1, r5
   b5138:	4640      	mov	r0, r8
   b513a:	9201      	str	r2, [sp, #4]
   b513c:	f7ff ffc0 	bl	b50c0 <_Z14isActuadorDualii>
   b5140:	9a01      	ldr	r2, [sp, #4]
   b5142:	2800      	cmp	r0, #0
   b5144:	d1f4      	bne.n	b5130 <_Z18ejecutarEvaluacionbi+0x38>
      {
        // Serial.println("ApagarActuador");
        apagarActuador(actuador.id, actuador.puerto);
   b5146:	4611      	mov	r1, r2
   b5148:	4640      	mov	r0, r8
   b514a:	f7ff fe5d 	bl	b4e08 <_Z14apagarActuadorii>
   b514e:	e7ef      	b.n	b5130 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b5150:	b003      	add	sp, #12
   b5152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5156:	bf00      	nop
   b5158:	2003dfe8 	.word	0x2003dfe8

000b515c <loop>:

void loop()
{
   b515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b5160:	4892      	ldr	r0, [pc, #584]	; (b53ac <loop+0x250>)
{
   b5162:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
  if (mfrc522.PICC_IsNewCardPresent())
   b5166:	f001 f9f7 	bl	b6558 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b516a:	b1b8      	cbz	r0, b519c <loop+0x40>
  {
    Serial.print("Tag Detectada --> ");
   b516c:	f003 fa22 	bl	b85b4 <_Z16_fetch_usbserialv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }

    display.clearDisplay();
   b5170:	4c8f      	ldr	r4, [pc, #572]	; (b53b0 <loop+0x254>)
    Serial.print("Tag Detectada --> ");
   b5172:	4990      	ldr	r1, [pc, #576]	; (b53b4 <loop+0x258>)
   b5174:	f003 f80a 	bl	b818c <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b5178:	488c      	ldr	r0, [pc, #560]	; (b53ac <loop+0x250>)
   b517a:	f001 fbbe 	bl	b68fa <_ZN7MFRC52219PICC_ReadCardSerialEv>
    display.clearDisplay();
   b517e:	4620      	mov	r0, r4
   b5180:	f001 fe1c 	bl	b6dbc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b5184:	2101      	movs	r1, #1
   b5186:	4620      	mov	r0, r4
   b5188:	f000 ff53 	bl	b6032 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b518c:	2100      	movs	r1, #0
   b518e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5192:	e9c4 1304 	strd	r1, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b5196:	4888      	ldr	r0, [pc, #544]	; (b53b8 <loop+0x25c>)
   b5198:	f7ff fb6a 	bl	b4870 <_Z8getTagIDPi>
  }


  // Modo KIDS
  if ( MODE == 0 ) 
   b519c:	f8df b220 	ldr.w	fp, [pc, #544]	; b53c0 <loop+0x264>
  {
    
    // Cambio de modo
    if (tagInfo[0] == 6 ) {
   b51a0:	4c85      	ldr	r4, [pc, #532]	; (b53b8 <loop+0x25c>)
  if ( MODE == 0 ) 
   b51a2:	f89b 2000 	ldrb.w	r2, [fp]
    if (tagInfo[0] == 6 ) {
   b51a6:	6823      	ldr	r3, [r4, #0]
  if ( MODE == 0 ) 
   b51a8:	2a00      	cmp	r2, #0
   b51aa:	f040 8091 	bne.w	b52d0 <loop+0x174>
    if (tagInfo[0] == 6 ) {
   b51ae:	2b06      	cmp	r3, #6

      if (tagInfo[1] == 0 ) {
   b51b0:	6865      	ldr	r5, [r4, #4]
    if (tagInfo[0] == 6 ) {
   b51b2:	d11e      	bne.n	b51f2 <loop+0x96>
      if (tagInfo[1] == 0 ) {
   b51b4:	b9bd      	cbnz	r5, b51e6 <loop+0x8a>

        Serial.println("Modo KIDS detectado");
   b51b6:	f003 f9fd 	bl	b85b4 <_Z16_fetch_usbserialv>
   b51ba:	4980      	ldr	r1, [pc, #512]	; (b53bc <loop+0x260>)
        MODE = 0;
        

      } else if (tagInfo[1] == 1) {

        Serial.println("Modo SUCRE detectado");
   b51bc:	f002 fff9 	bl	b81b2 <_ZN5Print7printlnEPKc>
        MODE = 1;
   b51c0:	f88b 5000 	strb.w	r5, [fp]

      }

      EEPROM.put(0, MODE);
   b51c4:	f003 fc8c 	bl	b8ae0 <_Z21__fetch_global_EEPROMv>
   b51c8:	497d      	ldr	r1, [pc, #500]	; (b53c0 <loop+0x264>)
   b51ca:	2201      	movs	r2, #1
   b51cc:	2000      	movs	r0, #0
   b51ce:	f002 fb85 	bl	b78dc <HAL_EEPROM_Put>
      resetFunc();
   b51d2:	4b7c      	ldr	r3, [pc, #496]	; (b53c4 <loop+0x268>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	4798      	blx	r3
      }

    }

    // Mostramos la información que hayamos actualizado de la pantalla.
    display.display();
   b51d8:	4875      	ldr	r0, [pc, #468]	; (b53b0 <loop+0x254>)
            }
          }
        }
      } */
  }
}
   b51da:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b51de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display();
   b51e2:	f002 b853 	b.w	b728c <_ZN16Adafruit_SSD13067displayEv>
      } else if (tagInfo[1] == 1) {
   b51e6:	2d01      	cmp	r5, #1
   b51e8:	d1ec      	bne.n	b51c4 <loop+0x68>
        Serial.println("Modo SUCRE detectado");
   b51ea:	f003 f9e3 	bl	b85b4 <_Z16_fetch_usbserialv>
   b51ee:	4976      	ldr	r1, [pc, #472]	; (b53c8 <loop+0x26c>)
   b51f0:	e7e4      	b.n	b51bc <loop+0x60>
      id = tagInfo[0];
   b51f2:	4e76      	ldr	r6, [pc, #472]	; (b53cc <loop+0x270>)
      tipo = tagInfo[1];
   b51f4:	4f76      	ldr	r7, [pc, #472]	; (b53d0 <loop+0x274>)
      estado = tagInfo[2];
   b51f6:	f8df 8208 	ldr.w	r8, [pc, #520]	; b5400 <loop+0x2a4>
   b51fa:	68a2      	ldr	r2, [r4, #8]
      tipo = tagInfo[1];
   b51fc:	603d      	str	r5, [r7, #0]
      if (id >= 2) {
   b51fe:	2b01      	cmp	r3, #1
   b5200:	4d74      	ldr	r5, [pc, #464]	; (b53d4 <loop+0x278>)
      id = tagInfo[0];
   b5202:	6033      	str	r3, [r6, #0]
      estado = tagInfo[2];
   b5204:	f8c8 2000 	str.w	r2, [r8]
      if (id >= 2) {
   b5208:	dd1a      	ble.n	b5240 <loop+0xe4>
        Serial.println("Sensor detectado: ");
   b520a:	f003 f9d3 	bl	b85b4 <_Z16_fetch_usbserialv>
   b520e:	4972      	ldr	r1, [pc, #456]	; (b53d8 <loop+0x27c>)
   b5210:	f002 ffcf 	bl	b81b2 <_ZN5Print7printlnEPKc>
        tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5214:	683a      	ldr	r2, [r7, #0]
        bloques[0].sensores[0] = sensor;
   b5216:	4b71      	ldr	r3, [pc, #452]	; (b53dc <loop+0x280>)
        sensor.id = id;
   b5218:	6831      	ldr	r1, [r6, #0]
        bloques[0].sensores[0] = sensor;
   b521a:	6059      	str	r1, [r3, #4]
        tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b521c:	2a00      	cmp	r2, #0
   b521e:	bf18      	it	ne
   b5220:	2202      	movne	r2, #2
        bloques[0].sensores[0] = sensor;
   b5222:	611a      	str	r2, [r3, #16]
        bloques[0].numSensores++;
   b5224:	681a      	ldr	r2, [r3, #0]
   b5226:	3201      	adds	r2, #1
   b5228:	601a      	str	r2, [r3, #0]
        numSensoresBloque++;
   b522a:	682b      	ldr	r3, [r5, #0]
   b522c:	3301      	adds	r3, #1
   b522e:	602b      	str	r3, [r5, #0]
      pitidoBlink0();
   b5230:	f7ff fc92 	bl	b4b58 <_Z12pitidoBlink0v>
        displayPrint0(id); // Actualizamos la información de la pantalla con el nuevo sensor.
   b5234:	6830      	ldr	r0, [r6, #0]
   b5236:	f7ff f98d 	bl	b4554 <_Z13displayPrint0i>
        tagInfo[0] = -1;
   b523a:	f04f 33ff 	mov.w	r3, #4294967295
   b523e:	6023      	str	r3, [r4, #0]
      if ( numSensoresBloque > 0) {
   b5240:	682b      	ldr	r3, [r5, #0]
   b5242:	f8df 91c0 	ldr.w	r9, [pc, #448]	; b5404 <loop+0x2a8>
   b5246:	2b00      	cmp	r3, #0
   b5248:	dd3f      	ble.n	b52ca <loop+0x16e>
        valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b524a:	4d64      	ldr	r5, [pc, #400]	; (b53dc <loop+0x280>)
   b524c:	2101      	movs	r1, #1
   b524e:	692a      	ldr	r2, [r5, #16]
   b5250:	6868      	ldr	r0, [r5, #4]
   b5252:	f7ff f901 	bl	b4458 <_Z10leerSensoriii>
   b5256:	4b62      	ldr	r3, [pc, #392]	; (b53e0 <loop+0x284>)
   b5258:	7018      	strb	r0, [r3, #0]
        if (tagInfo[0] == 0 || tagInfo[0] == 1) {
   b525a:	6823      	ldr	r3, [r4, #0]
   b525c:	2b01      	cmp	r3, #1
   b525e:	d820      	bhi.n	b52a2 <loop+0x146>
          Serial.println("Actuador detectado: ");
   b5260:	f003 f9a8 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5264:	495f      	ldr	r1, [pc, #380]	; (b53e4 <loop+0x288>)
   b5266:	f002 ffa4 	bl	b81b2 <_ZN5Print7printlnEPKc>
          tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b526a:	683b      	ldr	r3, [r7, #0]
          actuador.id = id;
   b526c:	6832      	ldr	r2, [r6, #0]
          bloques[0].actuadores[0] = actuador;
   b526e:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
          tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b5272:	2b00      	cmp	r3, #0
   b5274:	bf0c      	ite	eq
   b5276:	2302      	moveq	r3, #2
   b5278:	2304      	movne	r3, #4
          bloques[0].actuadores[0] = actuador;
   b527a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
          bloques[0].numActuadores++;
   b527e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b5282:	3301      	adds	r3, #1
   b5284:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
          numActuadoresBloque++;
   b5288:	f8d9 3000 	ldr.w	r3, [r9]
   b528c:	3301      	adds	r3, #1
   b528e:	f8c9 3000 	str.w	r3, [r9]
   b5292:	f7ff fc61 	bl	b4b58 <_Z12pitidoBlink0v>
          displayPrint0(id); // Actualizamos la información de la pantalla con el nuevo sensor.
   b5296:	6830      	ldr	r0, [r6, #0]
   b5298:	f7ff f95c 	bl	b4554 <_Z13displayPrint0i>
          tagInfo[0] = -1;
   b529c:	f04f 33ff 	mov.w	r3, #4294967295
   b52a0:	6023      	str	r3, [r4, #0]
      if (numActuadoresBloque > 0)
   b52a2:	f8d9 3000 	ldr.w	r3, [r9]
   b52a6:	2b00      	cmp	r3, #0
   b52a8:	dd96      	ble.n	b51d8 <loop+0x7c>
          activarActuador(bloques[0].actuadores[0], estado, valor);
   b52aa:	4a4d      	ldr	r2, [pc, #308]	; (b53e0 <loop+0x284>)
   b52ac:	4b4b      	ldr	r3, [pc, #300]	; (b53dc <loop+0x280>)
   b52ae:	7812      	ldrb	r2, [r2, #0]
   b52b0:	9202      	str	r2, [sp, #8]
   b52b2:	f8d8 2000 	ldr.w	r2, [r8]
   b52b6:	9201      	str	r2, [sp, #4]
   b52b8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
   b52bc:	9200      	str	r2, [sp, #0]
   b52be:	f503 73a4 	add.w	r3, r3, #328	; 0x148
   b52c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52c4:	f7ff fc8c 	bl	b4be0 <_Z15activarActuador8ACTUADORib>
   b52c8:	e786      	b.n	b51d8 <loop+0x7c>
          ledApagar();
   b52ca:	f7ff fb83 	bl	b49d4 <_Z9ledApagarv>
   b52ce:	e7e8      	b.n	b52a2 <loop+0x146>
    if (tagInfo[0] != -1)
   b52d0:	3301      	adds	r3, #1
   b52d2:	4f45      	ldr	r7, [pc, #276]	; (b53e8 <loop+0x28c>)
   b52d4:	f000 810d 	beq.w	b54f2 <loop+0x396>
      int deviceID = tagInfo[2];
   b52d8:	68a6      	ldr	r6, [r4, #8]
      Serial.print("Ejecutando tag --> ");
   b52da:	4d40      	ldr	r5, [pc, #256]	; (b53dc <loop+0x280>)
   b52dc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b53d4 <loop+0x278>
   b52e0:	f8df 8120 	ldr.w	r8, [pc, #288]	; b5404 <loop+0x2a8>
   b52e4:	f8df a120 	ldr.w	sl, [pc, #288]	; b5408 <loop+0x2ac>
   b52e8:	f003 f964 	bl	b85b4 <_Z16_fetch_usbserialv>
   b52ec:	493f      	ldr	r1, [pc, #252]	; (b53ec <loop+0x290>)
   b52ee:	f002 ff4d 	bl	b818c <_ZN5Print5printEPKc>
      switch (tagInfo[0]) {
   b52f2:	6823      	ldr	r3, [r4, #0]
   b52f4:	2b06      	cmp	r3, #6
   b52f6:	f200 81df 	bhi.w	b56b8 <loop+0x55c>
   b52fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   b52fe:	0007      	.short	0x0007
   b5300:	01480089 	.word	0x01480089
   b5304:	01980171 	.word	0x01980171
   b5308:	01c301b2 	.word	0x01c301b2
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b530c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b540c <loop+0x2b0>
        Serial.println("Sensor detectado");
   b5310:	f003 f950 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5314:	4936      	ldr	r1, [pc, #216]	; (b53f0 <loop+0x294>)
   b5316:	f002 ff4c 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b531a:	f898 3000 	ldrb.w	r3, [r8]
   b531e:	b383      	cbz	r3, b5382 <loop+0x226>
   b5320:	f8d9 2000 	ldr.w	r2, [r9]
   b5324:	f8da 3000 	ldr.w	r3, [sl]
   b5328:	429a      	cmp	r2, r3
   b532a:	d13b      	bne.n	b53a4 <loop+0x248>
   b532c:	4630      	mov	r0, r6
   b532e:	f7ff fe17 	bl	b4f60 <_Z13isValidSensori>
   b5332:	b318      	cbz	r0, b537c <loop+0x220>
          int puerto = isNewSensor(deviceID);
   b5334:	4630      	mov	r0, r6
   b5336:	f7ff fe3f 	bl	b4fb8 <_Z11isNewSensori>
          if (puerto == -1)
   b533a:	1c42      	adds	r2, r0, #1
   b533c:	d104      	bne.n	b5348 <loop+0x1ec>
            puerto = asignarPuerto(tagInfo[1]);
   b533e:	6860      	ldr	r0, [r4, #4]
   b5340:	f7ff fae6 	bl	b4910 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b5344:	1c43      	adds	r3, r0, #1
   b5346:	d020      	beq.n	b538a <loop+0x22e>
            newSensor.bloque = numBloque;
   b5348:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b534c:	f8d9 c000 	ldr.w	ip, [r9]
            newSensor.condicion = tagInfo[3];
   b5350:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5352:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5356:	fb01 f10e 	mul.w	r1, r1, lr
   b535a:	eb01 120c 	add.w	r2, r1, ip, lsl #4
   b535e:	442a      	add	r2, r5
   b5360:	e9c2 6301 	strd	r6, r3, [r2, #4]
   b5364:	e9c2 e003 	strd	lr, r0, [r2, #12]
            bloques[numBloque].numSensores++;
   b5368:	586a      	ldr	r2, [r5, r1]
   b536a:	3201      	adds	r2, #1
   b536c:	506a      	str	r2, [r5, r1]
            numSensoresBloque++;
   b536e:	f10c 0201 	add.w	r2, ip, #1
   b5372:	f8c9 2000 	str.w	r2, [r9]
   return type == 0;
   b5376:	6861      	ldr	r1, [r4, #4]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b5378:	9000      	str	r0, [sp, #0]
   b537a:	e08a      	b.n	b5492 <loop+0x336>
          if ((!IF_pasado)) {
   b537c:	f898 3000 	ldrb.w	r3, [r8]
   b5380:	b94b      	cbnz	r3, b5396 <loop+0x23a>
            Serial.println("Se esperaba IF tag");
   b5382:	f003 f917 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5386:	491b      	ldr	r1, [pc, #108]	; (b53f4 <loop+0x298>)
   b5388:	e002      	b.n	b5390 <loop+0x234>
            Serial.println("Error Puerto");
   b538a:	f003 f913 	bl	b85b4 <_Z16_fetch_usbserialv>
   b538e:	491a      	ldr	r1, [pc, #104]	; (b53f8 <loop+0x29c>)
        Serial.println("ID Tag incorrecta");
   b5390:	f002 ff0f 	bl	b81b2 <_ZN5Print7printlnEPKc>
        break;
   b5394:	e087      	b.n	b54a6 <loop+0x34a>
          if (numSensoresBloque != numCondicionalesBloque) {
   b5396:	f8d9 2000 	ldr.w	r2, [r9]
   b539a:	f8da 3000 	ldr.w	r3, [sl]
   b539e:	429a      	cmp	r2, r3
   b53a0:	f000 8081 	beq.w	b54a6 <loop+0x34a>
              Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b53a4:	f003 f906 	bl	b85b4 <_Z16_fetch_usbserialv>
   b53a8:	4914      	ldr	r1, [pc, #80]	; (b53fc <loop+0x2a0>)
   b53aa:	e7f1      	b.n	b5390 <loop+0x234>
   b53ac:	2003e68c 	.word	0x2003e68c
   b53b0:	2003e600 	.word	0x2003e600
   b53b4:	000b9b73 	.word	0x000b9b73
   b53b8:	2003df40 	.word	0x2003df40
   b53bc:	000b9b86 	.word	0x000b9b86
   b53c0:	2003dfd6 	.word	0x2003dfd6
   b53c4:	2003e6ac 	.word	0x2003e6ac
   b53c8:	000b9b9a 	.word	0x000b9b9a
   b53cc:	2003e678 	.word	0x2003e678
   b53d0:	2003e6b4 	.word	0x2003e6b4
   b53d4:	2003e6a4 	.word	0x2003e6a4
   b53d8:	000b9baf 	.word	0x000b9baf
   b53dc:	2003dfe8 	.word	0x2003dfe8
   b53e0:	2003e6b8 	.word	0x2003e6b8
   b53e4:	000b9bc2 	.word	0x000b9bc2
   b53e8:	2003df38 	.word	0x2003df38
   b53ec:	000b9bd7 	.word	0x000b9bd7
   b53f0:	000b9beb 	.word	0x000b9beb
   b53f4:	000b9c09 	.word	0x000b9c09
   b53f8:	000b9bfc 	.word	0x000b9bfc
   b53fc:	000b9c1c 	.word	0x000b9c1c
   b5400:	2003e670 	.word	0x2003e670
   b5404:	2003e69c 	.word	0x2003e69c
   b5408:	2003e6a0 	.word	0x2003e6a0
   b540c:	2003dfd5 	.word	0x2003dfd5
        Serial.println("Actuador detectado");
   b5410:	f003 f8d0 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5414:	49aa      	ldr	r1, [pc, #680]	; (b56c0 <loop+0x564>)
   b5416:	f002 fecc 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b541a:	4baa      	ldr	r3, [pc, #680]	; (b56c4 <loop+0x568>)
   b541c:	f893 a000 	ldrb.w	sl, [r3]
   b5420:	f1ba 0f00 	cmp.w	sl, #0
   b5424:	d078      	beq.n	b5518 <loop+0x3bc>
   b5426:	4ba8      	ldr	r3, [pc, #672]	; (b56c8 <loop+0x56c>)
        int deviceState = tagInfo[3];
   b5428:	f8d4 900c 	ldr.w	r9, [r4, #12]
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b542c:	781b      	ldrb	r3, [r3, #0]
   b542e:	4631      	mov	r1, r6
   b5430:	4648      	mov	r0, r9
   b5432:	2b00      	cmp	r3, #0
   b5434:	d16d      	bne.n	b5512 <loop+0x3b6>
   b5436:	f7ff fde7 	bl	b5008 <_Z15isValidActuadorii>
   b543a:	2800      	cmp	r0, #0
   b543c:	d06c      	beq.n	b5518 <loop+0x3bc>
          int puerto = isNewActuador(deviceID);
   b543e:	4630      	mov	r0, r6
   b5440:	f7ff fe1a 	bl	b5078 <_Z13isNewActuadori>
          if (puerto == -1)
   b5444:	1c41      	adds	r1, r0, #1
   b5446:	d104      	bne.n	b5452 <loop+0x2f6>
            puerto = asignarPuerto(tagInfo[1]);
   b5448:	6860      	ldr	r0, [r4, #4]
   b544a:	f7ff fa61 	bl	b4910 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b544e:	1c42      	adds	r2, r0, #1
   b5450:	d029      	beq.n	b54a6 <loop+0x34a>
            newActuador.bloque = numBloque;
   b5452:	f8d7 c000 	ldr.w	ip, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5456:	f8d8 1000 	ldr.w	r1, [r8]
   b545a:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b545e:	fb03 f30c 	mul.w	r3, r3, ip
   b5462:	2214      	movs	r2, #20
   b5464:	fb02 3201 	mla	r2, r2, r1, r3
   b5468:	442a      	add	r2, r5
   b546a:	e9c2 c054 	strd	ip, r0, [r2, #336]	; 0x150
            bloques[numBloque].numActuadores++;
   b546e:	442b      	add	r3, r5
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5470:	f04f 0c01 	mov.w	ip, #1
   b5474:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
   b5478:	e9c2 6952 	strd	r6, r9, [r2, #328]	; 0x148
            bloques[numBloque].numActuadores++;
   b547c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b5480:	4461      	add	r1, ip
            bloques[numBloque].numActuadores++;
   b5482:	4462      	add	r2, ip
            numActuadoresBloque++;
   b5484:	f8c8 1000 	str.w	r1, [r8]
            bloques[numBloque].numActuadores++;
   b5488:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   b548c:	6861      	ldr	r1, [r4, #4]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b548e:	9000      	str	r0, [sp, #0]
   b5490:	464b      	mov	r3, r9
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b5492:	6820      	ldr	r0, [r4, #0]
   b5494:	fab1 f181 	clz	r1, r1
   b5498:	fab0 f080 	clz	r0, r0
   b549c:	4632      	mov	r2, r6
   b549e:	0949      	lsrs	r1, r1, #5
   b54a0:	0940      	lsrs	r0, r0, #5
   b54a2:	f7ff f8a5 	bl	b45f0 <_Z12displayPrintbbiii>
      Serial.println("Fin Tag");
   b54a6:	f003 f885 	bl	b85b4 <_Z16_fetch_usbserialv>
   b54aa:	4988      	ldr	r1, [pc, #544]	; (b56cc <loop+0x570>)
   b54ac:	f002 fe81 	bl	b81b2 <_ZN5Print7printlnEPKc>
      Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b54b0:	f003 f880 	bl	b85b4 <_Z16_fetch_usbserialv>
   b54b4:	4986      	ldr	r1, [pc, #536]	; (b56d0 <loop+0x574>)
   b54b6:	f002 fe7c 	bl	b81b2 <_ZN5Print7printlnEPKc>
      Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b54ba:	f003 f87b 	bl	b85b4 <_Z16_fetch_usbserialv>
   b54be:	683a      	ldr	r2, [r7, #0]
   b54c0:	4984      	ldr	r1, [pc, #528]	; (b56d4 <loop+0x578>)
   b54c2:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b54c6:	fb03 5502 	mla	r5, r3, r2, r5
   b54ca:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b54ce:	9302      	str	r3, [sp, #8]
   b54d0:	4b81      	ldr	r3, [pc, #516]	; (b56d8 <loop+0x57c>)
   b54d2:	681b      	ldr	r3, [r3, #0]
   b54d4:	9301      	str	r3, [sp, #4]
   b54d6:	4b81      	ldr	r3, [pc, #516]	; (b56dc <loop+0x580>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	9300      	str	r3, [sp, #0]
   b54dc:	4b80      	ldr	r3, [pc, #512]	; (b56e0 <loop+0x584>)
   b54de:	681b      	ldr	r3, [r3, #0]
   b54e0:	f7fe fe00 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
      tagInfo[0] = -1;
   b54e4:	f04f 33ff 	mov.w	r3, #4294967295
   b54e8:	6023      	str	r3, [r4, #0]
      Serial.println();
   b54ea:	f003 f863 	bl	b85b4 <_Z16_fetch_usbserialv>
   b54ee:	f002 fe54 	bl	b819a <_ZN5Print7printlnEv>
    display.display();
   b54f2:	487c      	ldr	r0, [pc, #496]	; (b56e4 <loop+0x588>)
   b54f4:	f001 feca 	bl	b728c <_ZN16Adafruit_SSD13067displayEv>
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b54f8:	683b      	ldr	r3, [r7, #0]
   b54fa:	2b00      	cmp	r3, #0
   b54fc:	f040 8112 	bne.w	b5724 <loop+0x5c8>
   b5500:	4b70      	ldr	r3, [pc, #448]	; (b56c4 <loop+0x568>)
   b5502:	781b      	ldrb	r3, [r3, #0]
   b5504:	2b00      	cmp	r3, #0
   b5506:	f040 8110 	bne.w	b572a <loop+0x5ce>
}
   b550a:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5512:	f7ff fd79 	bl	b5008 <_Z15isValidActuadorii>
   b5516:	b958      	cbnz	r0, b5530 <loop+0x3d4>
          if (!IF_pasado) {
   b5518:	4b73      	ldr	r3, [pc, #460]	; (b56e8 <loop+0x58c>)
   b551a:	781b      	ldrb	r3, [r3, #0]
   b551c:	2b00      	cmp	r3, #0
   b551e:	f43f af30 	beq.w	b5382 <loop+0x226>
          } else if (!THEN_pasado) {
   b5522:	f1ba 0f00 	cmp.w	sl, #0
   b5526:	d12e      	bne.n	b5586 <loop+0x42a>
            Serial.println("Se esperaba THEN tag");
   b5528:	f003 f844 	bl	b85b4 <_Z16_fetch_usbserialv>
   b552c:	496f      	ldr	r1, [pc, #444]	; (b56ec <loop+0x590>)
   b552e:	e72f      	b.n	b5390 <loop+0x234>
          int puerto = isNewActuador(deviceID);
   b5530:	4630      	mov	r0, r6
   b5532:	f7ff fda1 	bl	b5078 <_Z13isNewActuadori>
          if (puerto == -1)
   b5536:	1c43      	adds	r3, r0, #1
   b5538:	d104      	bne.n	b5544 <loop+0x3e8>
            puerto = asignarPuerto(tagInfo[1]);
   b553a:	6860      	ldr	r0, [r4, #4]
   b553c:	f7ff f9e8 	bl	b4910 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b5540:	1c41      	adds	r1, r0, #1
   b5542:	d0b0      	beq.n	b54a6 <loop+0x34a>
            newActuador.bloque = numBloque;
   b5544:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5548:	f8d8 c000 	ldr.w	ip, [r8]
            newActuador.condicion = tagInfo[3];
   b554c:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b554e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5552:	fb02 f10e 	mul.w	r1, r2, lr
   b5556:	2214      	movs	r2, #20
   b5558:	fb02 120c 	mla	r2, r2, ip, r1
   b555c:	442a      	add	r2, r5
   b555e:	f502 79a4 	add.w	r9, r2, #328	; 0x148
   b5562:	e9c2 6352 	strd	r6, r3, [r2, #328]	; 0x148
   b5566:	e9c2 e054 	strd	lr, r0, [r2, #336]	; 0x150
   b556a:	2200      	movs	r2, #0
   b556c:	f889 2010 	strb.w	r2, [r9, #16]
            bloques[numBloque].numActuadores++;
   b5570:	186a      	adds	r2, r5, r1
   b5572:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
   b5576:	3101      	adds	r1, #1
   b5578:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
            numActuadoresBloque++;
   b557c:	f10c 0201 	add.w	r2, ip, #1
   b5580:	f8c8 2000 	str.w	r2, [r8]
   b5584:	e6f7      	b.n	b5376 <loop+0x21a>
            Serial.println("Invalid Actuador");
   b5586:	f003 f815 	bl	b85b4 <_Z16_fetch_usbserialv>
   b558a:	4959      	ldr	r1, [pc, #356]	; (b56f0 <loop+0x594>)
   b558c:	e700      	b.n	b5390 <loop+0x234>
        Serial.println("IF detectado");
   b558e:	f003 f811 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5592:	4958      	ldr	r1, [pc, #352]	; (b56f4 <loop+0x598>)
   b5594:	f002 fe0d 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5598:	683b      	ldr	r3, [r7, #0]
   b559a:	1c5a      	adds	r2, r3, #1
   b559c:	d004      	beq.n	b55a8 <loop+0x44c>
   b559e:	b9db      	cbnz	r3, b55d8 <loop+0x47c>
   b55a0:	f8d8 2000 	ldr.w	r2, [r8]
   b55a4:	2a00      	cmp	r2, #0
   b55a6:	dd17      	ble.n	b55d8 <loop+0x47c>
          IF_pasado = true;
   b55a8:	4a4f      	ldr	r2, [pc, #316]	; (b56e8 <loop+0x58c>)
   b55aa:	2101      	movs	r1, #1
   b55ac:	7011      	strb	r1, [r2, #0]
          THEN_pasado = false;
   b55ae:	4945      	ldr	r1, [pc, #276]	; (b56c4 <loop+0x568>)
   b55b0:	2200      	movs	r2, #0
   b55b2:	700a      	strb	r2, [r1, #0]
          ELSE_pasado = false;
   b55b4:	4944      	ldr	r1, [pc, #272]	; (b56c8 <loop+0x56c>)
          numCondicionalesBloque = 0;
   b55b6:	f8ca 2000 	str.w	r2, [sl]
          numBloque++;
   b55ba:	3301      	adds	r3, #1
          ELSE_pasado = false;
   b55bc:	700a      	strb	r2, [r1, #0]
          bloques[numBloque] = nuevoBloque;
   b55be:	f44f 713b 	mov.w	r1, #748	; 0x2ec
          numBloque++;
   b55c2:	603b      	str	r3, [r7, #0]
          bloques[numBloque] = nuevoBloque;
   b55c4:	434b      	muls	r3, r1
   b55c6:	18e9      	adds	r1, r5, r3
   b55c8:	50ea      	str	r2, [r5, r3]
          numSensoresBloque = 0;
   b55ca:	f8c9 2000 	str.w	r2, [r9]
          numActuadoresBloque = 0;
   b55ce:	f8c8 2000 	str.w	r2, [r8]
          bloques[numBloque] = nuevoBloque;
   b55d2:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
   b55d6:	e766      	b.n	b54a6 <loop+0x34a>
          Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b55d8:	f002 ffec 	bl	b85b4 <_Z16_fetch_usbserialv>
   b55dc:	4946      	ldr	r1, [pc, #280]	; (b56f8 <loop+0x59c>)
   b55de:	e6d7      	b.n	b5390 <loop+0x234>
        Serial.println("AND/OR detectado");
   b55e0:	f002 ffe8 	bl	b85b4 <_Z16_fetch_usbserialv>
   b55e4:	4945      	ldr	r1, [pc, #276]	; (b56fc <loop+0x5a0>)
   b55e6:	f002 fde4 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if ( (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b55ea:	f8da 3000 	ldr.w	r3, [sl]
   b55ee:	f8d9 2000 	ldr.w	r2, [r9]
   b55f2:	4293      	cmp	r3, r2
   b55f4:	da12      	bge.n	b561c <loop+0x4c0>
   b55f6:	f8d8 2000 	ldr.w	r2, [r8]
   b55fa:	b97a      	cbnz	r2, b561c <loop+0x4c0>
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b55fc:	683a      	ldr	r2, [r7, #0]
   b55fe:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5602:	fb01 5202 	mla	r2, r1, r2, r5
   b5606:	6861      	ldr	r1, [r4, #4]
   b5608:	441a      	add	r2, r3
   b560a:	3900      	subs	r1, #0
   b560c:	bf18      	it	ne
   b560e:	2101      	movne	r1, #1
          numCondicionalesBloque++;
   b5610:	3301      	adds	r3, #1
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b5612:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
          numCondicionalesBloque++;
   b5616:	f8ca 3000 	str.w	r3, [sl]
   b561a:	e744      	b.n	b54a6 <loop+0x34a>
          if (!IF_pasado) {
   b561c:	4b32      	ldr	r3, [pc, #200]	; (b56e8 <loop+0x58c>)
   b561e:	781b      	ldrb	r3, [r3, #0]
   b5620:	2b00      	cmp	r3, #0
   b5622:	f43f aeae 	beq.w	b5382 <loop+0x226>
          Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5626:	f002 ffc5 	bl	b85b4 <_Z16_fetch_usbserialv>
   b562a:	4935      	ldr	r1, [pc, #212]	; (b5700 <loop+0x5a4>)
   b562c:	e6b0      	b.n	b5390 <loop+0x234>
        Serial.println("THEN detectado");
   b562e:	f002 ffc1 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5632:	4934      	ldr	r1, [pc, #208]	; (b5704 <loop+0x5a8>)
   b5634:	f002 fdbd 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if ((numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b5638:	f8d9 3000 	ldr.w	r3, [r9]
   b563c:	2b00      	cmp	r3, #0
   b563e:	dd07      	ble.n	b5650 <loop+0x4f4>
   b5640:	f8da 2000 	ldr.w	r2, [sl]
   b5644:	4293      	cmp	r3, r2
   b5646:	dd03      	ble.n	b5650 <loop+0x4f4>
          THEN_pasado = true;
   b5648:	4b1e      	ldr	r3, [pc, #120]	; (b56c4 <loop+0x568>)
          ELSE_pasado = true;
   b564a:	2201      	movs	r2, #1
   b564c:	701a      	strb	r2, [r3, #0]
   b564e:	e72a      	b.n	b54a6 <loop+0x34a>
          if (!IF_pasado) {
   b5650:	4b25      	ldr	r3, [pc, #148]	; (b56e8 <loop+0x58c>)
   b5652:	781b      	ldrb	r3, [r3, #0]
   b5654:	2b00      	cmp	r3, #0
   b5656:	f43f ae94 	beq.w	b5382 <loop+0x226>
          Serial.println("Numero de sensores infucientes");
   b565a:	f002 ffab 	bl	b85b4 <_Z16_fetch_usbserialv>
   b565e:	492a      	ldr	r1, [pc, #168]	; (b5708 <loop+0x5ac>)
   b5660:	e696      	b.n	b5390 <loop+0x234>
        Serial.println("ELSE detectado");
   b5662:	f002 ffa7 	bl	b85b4 <_Z16_fetch_usbserialv>
   b5666:	4929      	ldr	r1, [pc, #164]	; (b570c <loop+0x5b0>)
   b5668:	f002 fda3 	bl	b81b2 <_ZN5Print7printlnEPKc>
        if (numActuadoresBloque > 0) {
   b566c:	f8d8 3000 	ldr.w	r3, [r8]
   b5670:	2b00      	cmp	r3, #0
   b5672:	dd01      	ble.n	b5678 <loop+0x51c>
          ELSE_pasado = true;
   b5674:	4b14      	ldr	r3, [pc, #80]	; (b56c8 <loop+0x56c>)
   b5676:	e7e8      	b.n	b564a <loop+0x4ee>
          if (!IF_pasado) {
   b5678:	4b1b      	ldr	r3, [pc, #108]	; (b56e8 <loop+0x58c>)
   b567a:	781b      	ldrb	r3, [r3, #0]
   b567c:	2b00      	cmp	r3, #0
   b567e:	f47f af12 	bne.w	b54a6 <loop+0x34a>
   b5682:	e67e      	b.n	b5382 <loop+0x226>
        if (tagInfo[1] == 0 ) {
   b5684:	6866      	ldr	r6, [r4, #4]
   b5686:	b98e      	cbnz	r6, b56ac <loop+0x550>
          Serial.println("Modo KIDS detectado");
   b5688:	f002 ff94 	bl	b85b4 <_Z16_fetch_usbserialv>
   b568c:	4920      	ldr	r1, [pc, #128]	; (b5710 <loop+0x5b4>)
          Serial.println("Modo SUCRE detectado");
   b568e:	f002 fd90 	bl	b81b2 <_ZN5Print7printlnEPKc>
          MODE = 1;
   b5692:	f88b 6000 	strb.w	r6, [fp]
        EEPROM.put(0, MODE);
   b5696:	f003 fa23 	bl	b8ae0 <_Z21__fetch_global_EEPROMv>
   b569a:	491e      	ldr	r1, [pc, #120]	; (b5714 <loop+0x5b8>)
   b569c:	2201      	movs	r2, #1
   b569e:	2000      	movs	r0, #0
   b56a0:	f002 f91c 	bl	b78dc <HAL_EEPROM_Put>
        resetFunc();
   b56a4:	4b1c      	ldr	r3, [pc, #112]	; (b5718 <loop+0x5bc>)
   b56a6:	681b      	ldr	r3, [r3, #0]
   b56a8:	4798      	blx	r3
        break;
   b56aa:	e6fc      	b.n	b54a6 <loop+0x34a>
        } else if (tagInfo[1] == 1) {
   b56ac:	2e01      	cmp	r6, #1
   b56ae:	d1f2      	bne.n	b5696 <loop+0x53a>
          Serial.println("Modo SUCRE detectado");
   b56b0:	f002 ff80 	bl	b85b4 <_Z16_fetch_usbserialv>
   b56b4:	4919      	ldr	r1, [pc, #100]	; (b571c <loop+0x5c0>)
   b56b6:	e7ea      	b.n	b568e <loop+0x532>
        Serial.println("ID Tag incorrecta");
   b56b8:	f002 ff7c 	bl	b85b4 <_Z16_fetch_usbserialv>
   b56bc:	4918      	ldr	r1, [pc, #96]	; (b5720 <loop+0x5c4>)
   b56be:	e667      	b.n	b5390 <loop+0x234>
   b56c0:	000b9c51 	.word	0x000b9c51
   b56c4:	2003dfe4 	.word	0x2003dfe4
   b56c8:	2003dfd4 	.word	0x2003dfd4
   b56cc:	000b9d7b 	.word	0x000b9d7b
   b56d0:	000b9d83 	.word	0x000b9d83
   b56d4:	000b9db8 	.word	0x000b9db8
   b56d8:	2003e69c 	.word	0x2003e69c
   b56dc:	2003e6a0 	.word	0x2003e6a0
   b56e0:	2003e6a4 	.word	0x2003e6a4
   b56e4:	2003e600 	.word	0x2003e600
   b56e8:	2003dfd5 	.word	0x2003dfd5
   b56ec:	000b9c64 	.word	0x000b9c64
   b56f0:	000b9c79 	.word	0x000b9c79
   b56f4:	000b9c8a 	.word	0x000b9c8a
   b56f8:	000b9c97 	.word	0x000b9c97
   b56fc:	000b9ce9 	.word	0x000b9ce9
   b5700:	000b9cfa 	.word	0x000b9cfa
   b5704:	000b9d2c 	.word	0x000b9d2c
   b5708:	000b9d3b 	.word	0x000b9d3b
   b570c:	000b9d5a 	.word	0x000b9d5a
   b5710:	000b9b86 	.word	0x000b9b86
   b5714:	2003dfd6 	.word	0x2003dfd6
   b5718:	2003e6ac 	.word	0x2003e6ac
   b571c:	000b9b9a 	.word	0x000b9b9a
   b5720:	000b9d69 	.word	0x000b9d69
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5724:	2b01      	cmp	r3, #1
   b5726:	f47f aef0 	bne.w	b550a <loop+0x3ae>
      Bloque bloque = bloques[0];
   b572a:	acb9      	add	r4, sp, #740	; 0x2e4
   b572c:	4916      	ldr	r1, [pc, #88]	; (b5788 <loop+0x62c>)
   b572e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5732:	4620      	mov	r0, r4
   b5734:	f003 fefc 	bl	b9530 <memcpy>
      bool evaluacion = makeEvaluate(bloque);
   b5738:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b573c:	a9bd      	add	r1, sp, #756	; 0x2f4
   b573e:	4668      	mov	r0, sp
   b5740:	f003 fef6 	bl	b9530 <memcpy>
   b5744:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5748:	f7fe feda 	bl	b4500 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 0);
   b574c:	2100      	movs	r1, #0
   b574e:	f7ff fcd3 	bl	b50f8 <_Z18ejecutarEvaluacionbi>
    if ( numBloque==1 && THEN_pasado ) {
   b5752:	683c      	ldr	r4, [r7, #0]
   b5754:	2c01      	cmp	r4, #1
   b5756:	f47f aed8 	bne.w	b550a <loop+0x3ae>
   b575a:	4b0c      	ldr	r3, [pc, #48]	; (b578c <loop+0x630>)
   b575c:	781b      	ldrb	r3, [r3, #0]
   b575e:	2b00      	cmp	r3, #0
   b5760:	f43f aed3 	beq.w	b550a <loop+0x3ae>
      bool evaluacion = makeEvaluate(bloques[1]);
   b5764:	490a      	ldr	r1, [pc, #40]	; (b5790 <loop+0x634>)
   b5766:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b576a:	4668      	mov	r0, sp
   b576c:	f003 fee0 	bl	b9530 <memcpy>
   b5770:	4b08      	ldr	r3, [pc, #32]	; (b5794 <loop+0x638>)
   b5772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5774:	f7fe fec4 	bl	b4500 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 1);
   b5778:	4621      	mov	r1, r4
}
   b577a:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b577e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ejecutarEvaluacion(evaluacion, 1);
   b5782:	f7ff bcb9 	b.w	b50f8 <_Z18ejecutarEvaluacionbi>
   b5786:	bf00      	nop
   b5788:	2003dfe8 	.word	0x2003dfe8
   b578c:	2003dfe4 	.word	0x2003dfe4
   b5790:	2003e2e4 	.word	0x2003e2e4
   b5794:	2003e2d4 	.word	0x2003e2d4

000b5798 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
}
   b5798:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b579a:	4c16      	ldr	r4, [pc, #88]	; (b57f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c>)
Adafruit_SSD1306 display(-1);
   b579c:	4816      	ldr	r0, [pc, #88]	; (b57f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x60>)
   b579e:	f04f 31ff 	mov.w	r1, #4294967295
   b57a2:	f001 fa17 	bl	b6bd4 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b57a6:	4915      	ldr	r1, [pc, #84]	; (b57fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x64>)
   b57a8:	4620      	mov	r0, r4
   b57aa:	f002 fc34 	bl	b8016 <_ZN6StringC1EPK19__FlashStringHelper>
   b57ae:	4913      	ldr	r1, [pc, #76]	; (b57fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x64>)
   b57b0:	f104 0010 	add.w	r0, r4, #16
   b57b4:	f002 fc2f 	bl	b8016 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b57b8:	2208      	movs	r2, #8
   b57ba:	2110      	movs	r1, #16
   b57bc:	4810      	ldr	r0, [pc, #64]	; (b5800 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x68>)
   b57be:	f000 fc3e 	bl	b603e <_ZN7MFRC522C1Ehh>
ChainableLED ledObject  = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b57c2:	2305      	movs	r3, #5
   b57c4:	461a      	mov	r2, r3
   b57c6:	2104      	movs	r1, #4
   b57c8:	480e      	ldr	r0, [pc, #56]	; (b5804 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x6c>)
   b57ca:	f001 fdf9 	bl	b73c0 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b57ce:	4b0e      	ldr	r3, [pc, #56]	; (b5808 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x70>)
    SleepResult() {}
   b57d0:	4a0e      	ldr	r2, [pc, #56]	; (b580c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x74>)
   b57d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b57d4:	2400      	movs	r4, #0
   b57d6:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b57da:	2002      	movs	r0, #2
   b57dc:	f002 f9ae 	bl	b7b3c <set_system_mode>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b57e0:	4b0b      	ldr	r3, [pc, #44]	; (b5810 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x78>)
   b57e2:	601c      	str	r4, [r3, #0]
   b57e4:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b57e8:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b57ec:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b57f0:	bd10      	pop	{r4, pc}
   b57f2:	bf00      	nop
   b57f4:	2003e650 	.word	0x2003e650
   b57f8:	2003e600 	.word	0x2003e600
   b57fc:	000b9ddb 	.word	0x000b9ddb
   b5800:	2003e68c 	.word	0x2003e68c
   b5804:	2003e684 	.word	0x2003e684
   b5808:	2003dfd8 	.word	0x2003dfd8
   b580c:	ffff0000 	.word	0xffff0000
   b5810:	2003dfe8 	.word	0x2003dfe8

000b5814 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5814:	4770      	bx	lr

000b5816 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5816:	b510      	push	{r4, lr}
  }
   b5818:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b581a:	4604      	mov	r4, r0
  }
   b581c:	f7fe fc3d 	bl	b409a <_ZdlPvj>
   b5820:	4620      	mov	r0, r4
   b5822:	bd10      	pop	{r4, pc}

000b5824 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5824:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5826:	4604      	mov	r4, r0
   b5828:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b582a:	7922      	ldrb	r2, [r4, #4]
   b582c:	68a3      	ldr	r3, [r4, #8]
   b582e:	b132      	cbz	r2, b583e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5830:	b9a3      	cbnz	r3, b585c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5832:	490b      	ldr	r1, [pc, #44]	; (b5860 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5834:	b002      	add	sp, #8
   b5836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b583a:	f002 bca7 	b.w	b818c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b583e:	4a09      	ldr	r2, [pc, #36]	; (b5864 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5840:	7b26      	ldrb	r6, [r4, #12]
   b5842:	4d09      	ldr	r5, [pc, #36]	; (b5868 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5844:	4909      	ldr	r1, [pc, #36]	; (b586c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5846:	7b64      	ldrb	r4, [r4, #13]
   b5848:	2e01      	cmp	r6, #1
   b584a:	bf18      	it	ne
   b584c:	4629      	movne	r1, r5
   b584e:	e9cd 1400 	strd	r1, r4, [sp]
   b5852:	4907      	ldr	r1, [pc, #28]	; (b5870 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5854:	f7fe fc38 	bl	b40c8 <_ZN5Print6printfEPKcz>
  }
   b5858:	b002      	add	sp, #8
   b585a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b585c:	4a05      	ldr	r2, [pc, #20]	; (b5874 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b585e:	e7ef      	b.n	b5840 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5860:	000b9dee 	.word	0x000b9dee
   b5864:	000b9ae9 	.word	0x000b9ae9
   b5868:	000b9dea 	.word	0x000b9dea
   b586c:	000b9de6 	.word	0x000b9de6
   b5870:	000b9e04 	.word	0x000b9e04
   b5874:	000b9ddd 	.word	0x000b9ddd

000b5878 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b587c:	b085      	sub	sp, #20
   b587e:	461f      	mov	r7, r3
   b5880:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5884:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5888:	eba8 0902 	sub.w	r9, r8, r2
   b588c:	eba7 0a01 	sub.w	sl, r7, r1
   b5890:	f1b9 0f00 	cmp.w	r9, #0
   b5894:	bfb8      	it	lt
   b5896:	f1c9 0900 	rsblt	r9, r9, #0
   b589a:	f1ba 0f00 	cmp.w	sl, #0
   b589e:	bfb8      	it	lt
   b58a0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b58a4:	45d1      	cmp	r9, sl
        uint16_t color) {
   b58a6:	4683      	mov	fp, r0
   b58a8:	460c      	mov	r4, r1
   b58aa:	4615      	mov	r5, r2
    if (steep) {
   b58ac:	dd04      	ble.n	b58b8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b58ae:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b58b0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b58b2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b58b4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b58b6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b58b8:	42bc      	cmp	r4, r7
   b58ba:	dd05      	ble.n	b58c8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b58bc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b58be:	4645      	mov	r5, r8
   b58c0:	4690      	mov	r8, r2
    if (x0 > x1) {
   b58c2:	4622      	mov	r2, r4
   b58c4:	463c      	mov	r4, r7
   b58c6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b58c8:	1b3e      	subs	r6, r7, r4
   b58ca:	b2b2      	uxth	r2, r6
   b58cc:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b58ce:	eba8 0205 	sub.w	r2, r8, r5
   b58d2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b58d6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b58da:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b58de:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b58e2:	4545      	cmp	r5, r8
   b58e4:	bfb4      	ite	lt
   b58e6:	2201      	movlt	r2, #1
   b58e8:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b58ec:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b58ee:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b58f0:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b58f2:	42bc      	cmp	r4, r7
   b58f4:	dc1c      	bgt.n	b5930 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b58f6:	f8db 2000 	ldr.w	r2, [fp]
   b58fa:	9303      	str	r3, [sp, #12]
        if (steep) {
   b58fc:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b58fe:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5902:	bfc7      	ittee	gt
   b5904:	4629      	movgt	r1, r5
   b5906:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5908:	462a      	movle	r2, r5
   b590a:	4621      	movle	r1, r4
   b590c:	4658      	mov	r0, fp
   b590e:	47c0      	blx	r8
        }
        err -= dy;
   b5910:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5912:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5914:	1ab6      	subs	r6, r6, r2
   b5916:	b2b1      	uxth	r1, r6
   b5918:	b236      	sxth	r6, r6
        if (err < 0) {
   b591a:	2e00      	cmp	r6, #0
   b591c:	da05      	bge.n	b592a <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b591e:	9a02      	ldr	r2, [sp, #8]
   b5920:	4415      	add	r5, r2
            err += dx;
   b5922:	9a00      	ldr	r2, [sp, #0]
   b5924:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5926:	b22d      	sxth	r5, r5
            err += dx;
   b5928:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b592a:	3401      	adds	r4, #1
   b592c:	b224      	sxth	r4, r4
   b592e:	e7e0      	b.n	b58f2 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5930:	b005      	add	sp, #20
   b5932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5936 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5936:	4770      	bx	lr

000b5938 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5938:	b410      	push	{r4}
    drawPixel(x, y, color);
   b593a:	6804      	ldr	r4, [r0, #0]
   b593c:	6924      	ldr	r4, [r4, #16]
   b593e:	46a4      	mov	ip, r4
}
   b5940:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5944:	4760      	bx	ip

000b5946 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5946:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5948:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b594a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b594e:	9502      	str	r5, [sp, #8]
   b5950:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5952:	46a4      	mov	ip, r4
}
   b5954:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5956:	4760      	bx	ip

000b5958 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5958:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b595a:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b595c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5960:	9502      	str	r5, [sp, #8]
   b5962:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5964:	46a4      	mov	ip, r4
}
   b5966:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5968:	4760      	bx	ip

000b596a <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b596a:	b470      	push	{r4, r5, r6}
   b596c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5970:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5974:	6804      	ldr	r4, [r0, #0]
   b5976:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b597a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b597c:	46a4      	mov	ip, r4
}
   b597e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5980:	4760      	bx	ip

000b5982 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5982:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5986:	461c      	mov	r4, r3
    startWrite();
   b5988:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b598a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b598e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5990:	4605      	mov	r5, r0
   b5992:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5994:	3c01      	subs	r4, #1
   b5996:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5998:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b599a:	b224      	sxth	r4, r4
    startWrite();
   b599c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b599e:	682b      	ldr	r3, [r5, #0]
   b59a0:	f8cd 8004 	str.w	r8, [sp, #4]
   b59a4:	9400      	str	r4, [sp, #0]
   b59a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b59a8:	4628      	mov	r0, r5
   b59aa:	463b      	mov	r3, r7
   b59ac:	4632      	mov	r2, r6
   b59ae:	4639      	mov	r1, r7
   b59b0:	47a0      	blx	r4
    endWrite();
   b59b2:	682b      	ldr	r3, [r5, #0]
   b59b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59b6:	4628      	mov	r0, r5
}
   b59b8:	b002      	add	sp, #8
   b59ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b59be:	4718      	bx	r3

000b59c0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b59c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b59c4:	461d      	mov	r5, r3
    startWrite();
   b59c6:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b59c8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b59cc:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b59ce:	4604      	mov	r4, r0
   b59d0:	4617      	mov	r7, r2
   b59d2:	460e      	mov	r6, r1
    startWrite();
   b59d4:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b59d6:	e9cd 7800 	strd	r7, r8, [sp]
   b59da:	6822      	ldr	r2, [r4, #0]
   b59dc:	1e6b      	subs	r3, r5, #1
   b59de:	4433      	add	r3, r6
   b59e0:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b59e2:	4620      	mov	r0, r4
   b59e4:	b21b      	sxth	r3, r3
   b59e6:	463a      	mov	r2, r7
   b59e8:	4631      	mov	r1, r6
   b59ea:	47a8      	blx	r5
    endWrite();
   b59ec:	6823      	ldr	r3, [r4, #0]
   b59ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59f0:	4620      	mov	r0, r4
}
   b59f2:	b002      	add	sp, #8
   b59f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b59f8:	4718      	bx	r3

000b59fa <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b59fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b59fe:	461e      	mov	r6, r3
    startWrite();
   b5a00:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5a02:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5a06:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5a08:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5a0c:	460c      	mov	r4, r1
   b5a0e:	4605      	mov	r5, r0
   b5a10:	4617      	mov	r7, r2
    startWrite();
   b5a12:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5a14:	4426      	add	r6, r4
   b5a16:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5a18:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5a1a:	da0b      	bge.n	b5a34 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5a1c:	f8cd 8000 	str.w	r8, [sp]
   b5a20:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5a24:	4621      	mov	r1, r4
   b5a26:	464b      	mov	r3, r9
   b5a28:	463a      	mov	r2, r7
   b5a2a:	4628      	mov	r0, r5
   b5a2c:	3401      	adds	r4, #1
   b5a2e:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5a30:	b224      	sxth	r4, r4
   b5a32:	e7f0      	b.n	b5a16 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a36:	4628      	mov	r0, r5
}
   b5a38:	b002      	add	sp, #8
   b5a3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5a3e:	4718      	bx	r3

000b5a40 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5a40:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5a42:	6802      	ldr	r2, [r0, #0]
   b5a44:	9101      	str	r1, [sp, #4]
   b5a46:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5a4a:	9100      	str	r1, [sp, #0]
   b5a4c:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5a4e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5a52:	2200      	movs	r2, #0
   b5a54:	4611      	mov	r1, r2
   b5a56:	47a0      	blx	r4
}
   b5a58:	b002      	add	sp, #8
   b5a5a:	bd10      	pop	{r4, pc}

000b5a5c <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5a60:	4299      	cmp	r1, r3
        uint16_t color) {
   b5a62:	4616      	mov	r6, r2
   b5a64:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5a68:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5a6c:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5a6e:	4680      	mov	r8, r0
   b5a70:	460d      	mov	r5, r1
   b5a72:	461c      	mov	r4, r3
    if(x0 == x1){
   b5a74:	d113      	bne.n	b5a9e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5a76:	42be      	cmp	r6, r7
   b5a78:	bfc8      	it	gt
   b5a7a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5a7c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5a80:	bfc4      	itt	gt
   b5a82:	463e      	movgt	r6, r7
   b5a84:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5a86:	1c7b      	adds	r3, r7, #1
   b5a88:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5a8a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5a8c:	b21b      	sxth	r3, r3
   b5a8e:	4632      	mov	r2, r6
   b5a90:	4629      	mov	r1, r5
   b5a92:	4640      	mov	r0, r8
   b5a94:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5a96:	b003      	add	sp, #12
   b5a98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5a9c:	4760      	bx	ip
    } else if(y0 == y1){
   b5a9e:	42be      	cmp	r6, r7
   b5aa0:	d10a      	bne.n	b5ab8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5aa2:	4299      	cmp	r1, r3
   b5aa4:	bfc2      	ittt	gt
   b5aa6:	460b      	movgt	r3, r1
   b5aa8:	4625      	movgt	r5, r4
   b5aaa:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5aac:	1c63      	adds	r3, r4, #1
   b5aae:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5ab2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5ab4:	1b5b      	subs	r3, r3, r5
   b5ab6:	e7e9      	b.n	b5a8c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5ab8:	6953      	ldr	r3, [r2, #20]
   b5aba:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5abc:	e9cd 7900 	strd	r7, r9, [sp]
   b5ac0:	f8d8 3000 	ldr.w	r3, [r8]
   b5ac4:	4640      	mov	r0, r8
   b5ac6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5ac8:	4632      	mov	r2, r6
   b5aca:	4623      	mov	r3, r4
   b5acc:	4629      	mov	r1, r5
   b5ace:	47b8      	blx	r7
        endWrite();
   b5ad0:	f8d8 3000 	ldr.w	r3, [r8]
   b5ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ad6:	4640      	mov	r0, r8
}
   b5ad8:	b003      	add	sp, #12
   b5ada:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5ade:	4718      	bx	r3

000b5ae0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5ae4:	461d      	mov	r5, r3
    startWrite();
   b5ae6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5ae8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5aec:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5aee:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5af2:	4604      	mov	r4, r0
   b5af4:	460f      	mov	r7, r1
   b5af6:	4616      	mov	r6, r2
    startWrite();
   b5af8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5afa:	6823      	ldr	r3, [r4, #0]
   b5afc:	f8cd 8000 	str.w	r8, [sp]
   b5b00:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5b04:	4632      	mov	r2, r6
   b5b06:	462b      	mov	r3, r5
   b5b08:	4639      	mov	r1, r7
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5b0e:	6823      	ldr	r3, [r4, #0]
   b5b10:	f8cd 8000 	str.w	r8, [sp]
   b5b14:	f109 32ff 	add.w	r2, r9, #4294967295
   b5b18:	4432      	add	r2, r6
   b5b1a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5b1e:	4639      	mov	r1, r7
   b5b20:	462b      	mov	r3, r5
   b5b22:	4620      	mov	r0, r4
   b5b24:	b212      	sxth	r2, r2
   b5b26:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5b28:	6823      	ldr	r3, [r4, #0]
   b5b2a:	f8cd 8000 	str.w	r8, [sp]
   b5b2e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5b32:	4632      	mov	r2, r6
   b5b34:	464b      	mov	r3, r9
   b5b36:	4639      	mov	r1, r7
   b5b38:	4620      	mov	r0, r4
   b5b3a:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5b3c:	1e6b      	subs	r3, r5, #1
   b5b3e:	19d9      	adds	r1, r3, r7
   b5b40:	6823      	ldr	r3, [r4, #0]
   b5b42:	f8cd 8000 	str.w	r8, [sp]
   b5b46:	6a1d      	ldr	r5, [r3, #32]
   b5b48:	4620      	mov	r0, r4
   b5b4a:	464b      	mov	r3, r9
   b5b4c:	4632      	mov	r2, r6
   b5b4e:	b209      	sxth	r1, r1
   b5b50:	47a8      	blx	r5
    endWrite();
   b5b52:	6823      	ldr	r3, [r4, #0]
   b5b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b56:	4620      	mov	r0, r4
}
   b5b58:	b002      	add	sp, #8
   b5b5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5b5e:	4718      	bx	r3

000b5b60 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5b60:	4770      	bx	lr

000b5b62 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5b62:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5b66:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5b6a:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5b6c:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5b6e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5b72:	bf59      	ittee	pl
   b5b74:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5b76:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5b78:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5b7a:	81c3      	strhmi	r3, [r0, #14]
}
   b5b7c:	4770      	bx	lr
	...

000b5b80 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5b80:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5b82:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5b84:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5b86:	4a07      	ldr	r2, [pc, #28]	; (b5ba4 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5b88:	4d07      	ldr	r5, [pc, #28]	; (b5ba8 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5b8a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5b8c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5b8e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5b90:	f04f 31ff 	mov.w	r1, #4294967295
   b5b94:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5b98:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5b9a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5b9c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5b9e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5ba0:	6204      	str	r4, [r0, #32]
}
   b5ba2:	bd30      	pop	{r4, r5, pc}
   b5ba4:	01000101 	.word	0x01000101
   b5ba8:	000ba32c 	.word	0x000ba32c

000b5bac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bb0:	b089      	sub	sp, #36	; 0x24
   b5bb2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5bb6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5bb8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5bbc:	9304      	str	r3, [sp, #16]
   b5bbe:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5bc2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5bc4:	9305      	str	r3, [sp, #20]
   b5bc6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5bca:	4604      	mov	r4, r0
    startWrite();
   b5bcc:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5bce:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5bd2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5bd6:	bf48      	it	mi
   b5bd8:	f108 020e 	addmi.w	r2, r8, #14
   b5bdc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5be0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5be2:	4635      	mov	r5, r6
   b5be4:	9b03      	ldr	r3, [sp, #12]
   b5be6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5be8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5bec:	189a      	adds	r2, r3, r2
   b5bee:	9b05      	ldr	r3, [sp, #20]
   b5bf0:	428b      	cmp	r3, r1
   b5bf2:	b212      	sxth	r2, r2
   b5bf4:	dd27      	ble.n	b5c46 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5bf6:	9b04      	ldr	r3, [sp, #16]
   b5bf8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5bfa:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5bfe:	9306      	str	r3, [sp, #24]
   b5c00:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5c04:	4580      	cmp	r8, r0
   b5c06:	fa1f f189 	uxth.w	r1, r9
   b5c0a:	dd17      	ble.n	b5c3c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5c0c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c0e:	bf05      	ittet	eq
   b5c10:	9b06      	ldreq	r3, [sp, #24]
   b5c12:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5c14:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c16:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5c18:	bf18      	it	ne
   b5c1a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5c1c:	062b      	lsls	r3, r5, #24
   b5c1e:	d50a      	bpl.n	b5c36 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5c20:	9b02      	ldr	r3, [sp, #8]
   b5c22:	6820      	ldr	r0, [r4, #0]
   b5c24:	9207      	str	r2, [sp, #28]
   b5c26:	4419      	add	r1, r3
   b5c28:	6983      	ldr	r3, [r0, #24]
   b5c2a:	b209      	sxth	r1, r1
   b5c2c:	461f      	mov	r7, r3
   b5c2e:	4620      	mov	r0, r4
   b5c30:	4653      	mov	r3, sl
   b5c32:	47b8      	blx	r7
   b5c34:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5c36:	f109 0901 	add.w	r9, r9, #1
   b5c3a:	e7e1      	b.n	b5c00 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5c3c:	9b01      	ldr	r3, [sp, #4]
   b5c3e:	3301      	adds	r3, #1
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	445e      	add	r6, fp
   b5c44:	e7ce      	b.n	b5be4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5c46:	6823      	ldr	r3, [r4, #0]
   b5c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c4a:	4620      	mov	r0, r4
}
   b5c4c:	b009      	add	sp, #36	; 0x24
   b5c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5c52:	4718      	bx	r3

000b5c54 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c58:	ed2d 8b02 	vpush	{d8}
   b5c5c:	b091      	sub	sp, #68	; 0x44
   b5c5e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5c60:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5c62:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5c66:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5c6a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5c6e:	9103      	str	r1, [sp, #12]
   b5c70:	461f      	mov	r7, r3
   b5c72:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5c76:	9304      	str	r3, [sp, #16]
   b5c78:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5c7a:	2a00      	cmp	r2, #0
   b5c7c:	f040 80c5 	bne.w	b5e0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5c80:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5c84:	428b      	cmp	r3, r1
   b5c86:	f340 814c 	ble.w	b5f22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5c8a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5c8e:	42b3      	cmp	r3, r6
   b5c90:	f340 8147 	ble.w	b5f22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5c94:	2306      	movs	r3, #6
   b5c96:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5c9a:	2b00      	cmp	r3, #0
   b5c9c:	f340 8141 	ble.w	b5f22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5ca0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5ca4:	2b00      	cmp	r3, #0
   b5ca6:	f340 813c 	ble.w	b5f22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5caa:	7f03      	ldrb	r3, [r0, #28]
   b5cac:	b91b      	cbnz	r3, b5cb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5cae:	2faf      	cmp	r7, #175	; 0xaf
   b5cb0:	bf84      	itt	hi
   b5cb2:	3701      	addhi	r7, #1
   b5cb4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5cb6:	f8db 3000 	ldr.w	r3, [fp]
   b5cba:	4658      	mov	r0, fp
   b5cbc:	695b      	ldr	r3, [r3, #20]
   b5cbe:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5cc0:	2205      	movs	r2, #5
   b5cc2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5cc4:	2200      	movs	r2, #0
   b5cc6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5cc8:	4a98      	ldr	r2, [pc, #608]	; (b5f2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5cca:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5cce:	18d3      	adds	r3, r2, r3
   b5cd0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5cd2:	b2b3      	uxth	r3, r6
   b5cd4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5cd6:	9a05      	ldr	r2, [sp, #20]
   b5cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5cda:	5c9b      	ldrb	r3, [r3, r2]
   b5cdc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5cde:	b2ab      	uxth	r3, r5
   b5ce0:	930b      	str	r3, [sp, #44]	; 0x2c
   b5ce2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5ce6:	9308      	str	r3, [sp, #32]
   b5ce8:	9b03      	ldr	r3, [sp, #12]
   b5cea:	fb02 f905 	mul.w	r9, r2, r5
   b5cee:	fa19 f983 	uxtah	r9, r9, r3
   b5cf2:	fa0f f389 	sxth.w	r3, r9
   b5cf6:	ee08 3a10 	vmov	s16, r3
   b5cfa:	2308      	movs	r3, #8
   b5cfc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5cfe:	9b03      	ldr	r3, [sp, #12]
   b5d00:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5d04:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5d08:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5d0c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5d0e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5d12:	07d2      	lsls	r2, r2, #31
   b5d14:	d552      	bpl.n	b5dbc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5d16:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5d18:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5d1c:	d13e      	bne.n	b5d9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5d1e:	2c01      	cmp	r4, #1
   b5d20:	d13c      	bne.n	b5d9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5d22:	699b      	ldr	r3, [r3, #24]
   b5d24:	9906      	ldr	r1, [sp, #24]
   b5d26:	461f      	mov	r7, r3
   b5d28:	9b04      	ldr	r3, [sp, #16]
   b5d2a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5d2c:	b212      	sxth	r2, r2
   b5d2e:	4651      	mov	r1, sl
   b5d30:	4658      	mov	r0, fp
   b5d32:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5d34:	f109 0301 	add.w	r3, r9, #1
   b5d38:	fa4f f983 	sxtb.w	r9, r3
   b5d3c:	9b07      	ldr	r3, [sp, #28]
   b5d3e:	085b      	lsrs	r3, r3, #1
   b5d40:	9307      	str	r3, [sp, #28]
   b5d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5d44:	3b01      	subs	r3, #1
   b5d46:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5d4a:	930a      	str	r3, [sp, #40]	; 0x28
   b5d4c:	d1de      	bne.n	b5d0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5d4e:	9f05      	ldr	r7, [sp, #20]
   b5d50:	3701      	adds	r7, #1
   b5d52:	b27b      	sxtb	r3, r7
   b5d54:	9305      	str	r3, [sp, #20]
   b5d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5d58:	3b01      	subs	r3, #1
   b5d5a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5d5e:	9309      	str	r3, [sp, #36]	; 0x24
   b5d60:	d1b9      	bne.n	b5cd6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5d62:	9b04      	ldr	r3, [sp, #16]
   b5d64:	4543      	cmp	r3, r8
   b5d66:	d00f      	beq.n	b5d88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5d68:	2d01      	cmp	r5, #1
   b5d6a:	f8db 3000 	ldr.w	r3, [fp]
   b5d6e:	d13b      	bne.n	b5de8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5d70:	2c01      	cmp	r4, #1
   b5d72:	d139      	bne.n	b5de8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5d74:	9908      	ldr	r1, [sp, #32]
   b5d76:	f8cd 8000 	str.w	r8, [sp]
   b5d7a:	3105      	adds	r1, #5
   b5d7c:	6a1c      	ldr	r4, [r3, #32]
   b5d7e:	4632      	mov	r2, r6
   b5d80:	2308      	movs	r3, #8
   b5d82:	b209      	sxth	r1, r1
   b5d84:	4658      	mov	r0, fp
   b5d86:	47a0      	blx	r4
        endWrite();
   b5d88:	f8db 3000 	ldr.w	r3, [fp]
   b5d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d8e:	4658      	mov	r0, fp
}
   b5d90:	b011      	add	sp, #68	; 0x44
   b5d92:	ecbd 8b02 	vpop	{d8}
   b5d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5d9a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5d9c:	9906      	ldr	r1, [sp, #24]
   b5d9e:	fb14 f202 	smulbb	r2, r4, r2
   b5da2:	440a      	add	r2, r1
   b5da4:	9904      	ldr	r1, [sp, #16]
   b5da6:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5da8:	9400      	str	r4, [sp, #0]
   b5daa:	69db      	ldr	r3, [r3, #28]
   b5dac:	ee18 1a10 	vmov	r1, s16
   b5db0:	461f      	mov	r7, r3
   b5db2:	b212      	sxth	r2, r2
   b5db4:	462b      	mov	r3, r5
   b5db6:	4658      	mov	r0, fp
   b5db8:	47b8      	blx	r7
   b5dba:	e7bb      	b.n	b5d34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5dbc:	9a04      	ldr	r2, [sp, #16]
   b5dbe:	4542      	cmp	r2, r8
   b5dc0:	d0b8      	beq.n	b5d34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5dc2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5dc4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5dc8:	d107      	bne.n	b5dda <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5dca:	2c01      	cmp	r4, #1
   b5dcc:	d105      	bne.n	b5dda <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5dce:	699b      	ldr	r3, [r3, #24]
   b5dd0:	9906      	ldr	r1, [sp, #24]
   b5dd2:	461f      	mov	r7, r3
   b5dd4:	440a      	add	r2, r1
   b5dd6:	4643      	mov	r3, r8
   b5dd8:	e7a8      	b.n	b5d2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5dda:	9906      	ldr	r1, [sp, #24]
   b5ddc:	f8cd 8004 	str.w	r8, [sp, #4]
   b5de0:	fb14 f202 	smulbb	r2, r4, r2
   b5de4:	440a      	add	r2, r1
   b5de6:	e7df      	b.n	b5da8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5dea:	f8cd 8004 	str.w	r8, [sp, #4]
   b5dee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5df2:	9a08      	ldr	r2, [sp, #32]
   b5df4:	00e4      	lsls	r4, r4, #3
   b5df6:	440a      	add	r2, r1
   b5df8:	4611      	mov	r1, r2
   b5dfa:	9400      	str	r4, [sp, #0]
   b5dfc:	69dc      	ldr	r4, [r3, #28]
   b5dfe:	4632      	mov	r2, r6
   b5e00:	462b      	mov	r3, r5
   b5e02:	b209      	sxth	r1, r1
   b5e04:	4658      	mov	r0, fp
   b5e06:	47a0      	blx	r4
        endWrite();
   b5e08:	e7be      	b.n	b5d88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e0a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5e0c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5e0e:	6812      	ldr	r2, [r2, #0]
   b5e10:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e12:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5e14:	b2ff      	uxtb	r7, r7
   b5e16:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5e1a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5e1e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5e20:	789a      	ldrb	r2, [r3, #2]
   b5e22:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5e24:	78da      	ldrb	r2, [r3, #3]
   b5e26:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5e28:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5e2a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5e2e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5e32:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5e34:	d801      	bhi.n	b5e3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5e36:	2c01      	cmp	r4, #1
   b5e38:	d957      	bls.n	b5eea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5e3a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5e3e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5e40:	fa0f f38a 	sxth.w	r3, sl
   b5e44:	9307      	str	r3, [sp, #28]
        startWrite();
   b5e46:	f8db 3000 	ldr.w	r3, [fp]
   b5e4a:	4658      	mov	r0, fp
   b5e4c:	695b      	ldr	r3, [r3, #20]
   b5e4e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e50:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5e52:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e56:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5e58:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5e5c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5e5e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5e60:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5e64:	429f      	cmp	r7, r3
   b5e66:	d28f      	bcs.n	b5d88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e68:	9b07      	ldr	r3, [sp, #28]
   b5e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5e6c:	443b      	add	r3, r7
   b5e6e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5e72:	2200      	movs	r2, #0
   b5e74:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e78:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5e7a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e7e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5e82:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5e86:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5e8a:	9905      	ldr	r1, [sp, #20]
   b5e8c:	4291      	cmp	r1, r2
   b5e8e:	d241      	bcs.n	b5f14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5e90:	1c5a      	adds	r2, r3, #1
   b5e92:	b2d2      	uxtb	r2, r2
   b5e94:	075b      	lsls	r3, r3, #29
   b5e96:	920d      	str	r2, [sp, #52]	; 0x34
   b5e98:	d107      	bne.n	b5eaa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5e9a:	9b06      	ldr	r3, [sp, #24]
   b5e9c:	9906      	ldr	r1, [sp, #24]
   b5e9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5ea0:	3301      	adds	r3, #1
   b5ea2:	b29b      	uxth	r3, r3
   b5ea4:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5ea8:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5eaa:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5eae:	d012      	beq.n	b5ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5eb0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5eb2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5eb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5eba:	d11a      	bne.n	b5ef2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5ebc:	2c01      	cmp	r4, #1
   b5ebe:	d118      	bne.n	b5ef2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5ec2:	699b      	ldr	r3, [r3, #24]
   b5ec4:	4411      	add	r1, r2
   b5ec6:	9a05      	ldr	r2, [sp, #20]
   b5ec8:	4411      	add	r1, r2
   b5eca:	461e      	mov	r6, r3
   b5ecc:	4652      	mov	r2, sl
   b5ece:	9b04      	ldr	r3, [sp, #16]
   b5ed0:	b209      	sxth	r1, r1
   b5ed2:	4658      	mov	r0, fp
   b5ed4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5ed6:	9e05      	ldr	r6, [sp, #20]
   b5ed8:	3601      	adds	r6, #1
   b5eda:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5edc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5ee0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5ee2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5ee8:	e7ce      	b.n	b5e88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5eea:	2300      	movs	r3, #0
   b5eec:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5ef0:	e7a9      	b.n	b5e46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ef2:	9805      	ldr	r0, [sp, #20]
   b5ef4:	9a08      	ldr	r2, [sp, #32]
   b5ef6:	4402      	add	r2, r0
   b5ef8:	fb02 1105 	mla	r1, r2, r5, r1
   b5efc:	9a04      	ldr	r2, [sp, #16]
   b5efe:	e9cd 4200 	strd	r4, r2, [sp]
   b5f02:	69db      	ldr	r3, [r3, #28]
   b5f04:	ee18 2a10 	vmov	r2, s16
   b5f08:	461e      	mov	r6, r3
   b5f0a:	b209      	sxth	r1, r1
   b5f0c:	462b      	mov	r3, r5
   b5f0e:	4658      	mov	r0, fp
   b5f10:	47b0      	blx	r6
   b5f12:	e7e0      	b.n	b5ed6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5f16:	3701      	adds	r7, #1
   b5f18:	4498      	add	r8, r3
   b5f1a:	fa5f f888 	uxtb.w	r8, r8
   b5f1e:	b2ff      	uxtb	r7, r7
   b5f20:	e79f      	b.n	b5e62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5f22:	b011      	add	sp, #68	; 0x44
   b5f24:	ecbd 8b02 	vpop	{d8}
   b5f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f2c:	000b9e21 	.word	0x000b9e21

000b5f30 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5f32:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5f34:	b085      	sub	sp, #20
   b5f36:	4604      	mov	r4, r0
   b5f38:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5f3a:	2a00      	cmp	r2, #0
   b5f3c:	d134      	bne.n	b5fa8 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5f3e:	290a      	cmp	r1, #10
   b5f40:	d108      	bne.n	b5f54 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5f42:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5f44:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5f46:	7e42      	ldrb	r2, [r0, #25]
   b5f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5f4c:	8263      	strh	r3, [r4, #18]
}
   b5f4e:	2001      	movs	r0, #1
   b5f50:	b005      	add	sp, #20
   b5f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5f54:	290d      	cmp	r1, #13
   b5f56:	d0fa      	beq.n	b5f4e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5f58:	7ee1      	ldrb	r1, [r4, #27]
   b5f5a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5f5c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5f5e:	b171      	cbz	r1, b5f7e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5f60:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5f64:	2106      	movs	r1, #6
   b5f66:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5f6a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5f6e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5f70:	bfc1      	itttt	gt
   b5f72:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5f76:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5f78:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5f7c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5f7e:	8ae2      	ldrh	r2, [r4, #22]
   b5f80:	9201      	str	r2, [sp, #4]
   b5f82:	8aa2      	ldrh	r2, [r4, #20]
   b5f84:	9200      	str	r2, [sp, #0]
   b5f86:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5f8a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5f8e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5f92:	4620      	mov	r0, r4
   b5f94:	f7ff fe5e 	bl	b5c54 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5f98:	7e23      	ldrb	r3, [r4, #24]
   b5f9a:	8a22      	ldrh	r2, [r4, #16]
   b5f9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5fa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5fa4:	8223      	strh	r3, [r4, #16]
   b5fa6:	e7d2      	b.n	b5f4e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5fa8:	290a      	cmp	r1, #10
   b5faa:	d107      	bne.n	b5fbc <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5fac:	2300      	movs	r3, #0
   b5fae:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5fb0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5fb2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5fb4:	8a43      	ldrh	r3, [r0, #18]
   b5fb6:	fb01 3302 	mla	r3, r1, r2, r3
   b5fba:	e7c7      	b.n	b5f4c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5fbc:	290d      	cmp	r1, #13
   b5fbe:	d0c6      	beq.n	b5f4e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5fc0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5fc2:	42a9      	cmp	r1, r5
   b5fc4:	d3c3      	bcc.n	b5f4e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5fc6:	7a51      	ldrb	r1, [r2, #9]
   b5fc8:	4299      	cmp	r1, r3
   b5fca:	d3c0      	bcc.n	b5f4e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5fcc:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5fce:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5fd0:	b2ed      	uxtb	r5, r5
   b5fd2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5fd6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5fd8:	b328      	cbz	r0, b6026 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5fda:	78e9      	ldrb	r1, [r5, #3]
   b5fdc:	b319      	cbz	r1, b6026 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5fde:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5fe0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5fe2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5fe4:	b191      	cbz	r1, b600c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5fe6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5fea:	4408      	add	r0, r1
   b5fec:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5ff0:	fb06 1100 	mla	r1, r6, r0, r1
   b5ff4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5ff8:	4281      	cmp	r1, r0
   b5ffa:	dd07      	ble.n	b600c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5ffc:	2000      	movs	r0, #0
   b5ffe:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6000:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6004:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6006:	fb02 1207 	mla	r2, r2, r7, r1
   b600a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b600c:	8ae2      	ldrh	r2, [r4, #22]
   b600e:	9201      	str	r2, [sp, #4]
   b6010:	8aa2      	ldrh	r2, [r4, #20]
   b6012:	9200      	str	r2, [sp, #0]
   b6014:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6018:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b601c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6020:	4620      	mov	r0, r4
   b6022:	f7ff fe17 	bl	b5c54 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6026:	7929      	ldrb	r1, [r5, #4]
   b6028:	7e22      	ldrb	r2, [r4, #24]
   b602a:	8a23      	ldrh	r3, [r4, #16]
   b602c:	fb01 3302 	mla	r3, r1, r2, r3
   b6030:	e7b8      	b.n	b5fa4 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6032 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6032:	2901      	cmp	r1, #1
   b6034:	bf38      	it	cc
   b6036:	2101      	movcc	r1, #1
   b6038:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b603a:	7641      	strb	r1, [r0, #25]
}
   b603c:	4770      	bx	lr

000b603e <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b603e:	b538      	push	{r3, r4, r5, lr}
   b6040:	4604      	mov	r4, r0
   b6042:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b6044:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b6046:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6048:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b604a:	f002 fcb3 	bl	b89b4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b604e:	7b20      	ldrb	r0, [r4, #12]
   b6050:	2101      	movs	r1, #1
   b6052:	f002 fcc0 	bl	b89d6 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b6056:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b6058:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b605a:	2101      	movs	r1, #1
   b605c:	f002 fcaa 	bl	b89b4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b6060:	7b60      	ldrb	r0, [r4, #13]
   b6062:	2100      	movs	r1, #0
   b6064:	f002 fcb7 	bl	b89d6 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b6068:	4620      	mov	r0, r4
   b606a:	bd38      	pop	{r3, r4, r5, pc}

000b606c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b606c:	3901      	subs	r1, #1
   b606e:	b2c9      	uxtb	r1, r1
   b6070:	2908      	cmp	r1, #8
   b6072:	bf9a      	itte	ls
   b6074:	4b02      	ldrls	r3, [pc, #8]	; (b6080 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b6076:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b607a:	4802      	ldrhi	r0, [pc, #8]	; (b6084 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b607c:	4770      	bx	lr
   b607e:	bf00      	nop
   b6080:	000ba474 	.word	0x000ba474
   b6084:	000ba37c 	.word	0x000ba37c

000b6088 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b6088:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b608a:	4c0b      	ldr	r4, [pc, #44]	; (b60b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b608c:	7821      	ldrb	r1, [r4, #0]
   b608e:	f3bf 8f5b 	dmb	ish
   b6092:	f011 0101 	ands.w	r1, r1, #1
   b6096:	d10b      	bne.n	b60b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6098:	4620      	mov	r0, r4
   b609a:	9101      	str	r1, [sp, #4]
   b609c:	f7fe f80c 	bl	b40b8 <__cxa_guard_acquire>
   b60a0:	9901      	ldr	r1, [sp, #4]
   b60a2:	b128      	cbz	r0, b60b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b60a4:	4805      	ldr	r0, [pc, #20]	; (b60bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b60a6:	f001 fe61 	bl	b7d6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b60aa:	4620      	mov	r0, r4
   b60ac:	f7fe f809 	bl	b40c2 <__cxa_guard_release>
    }
   b60b0:	4802      	ldr	r0, [pc, #8]	; (b60bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b60b2:	b002      	add	sp, #8
   b60b4:	bd10      	pop	{r4, pc}
   b60b6:	bf00      	nop
   b60b8:	2003dfc8 	.word	0x2003dfc8
   b60bc:	2003dfcc 	.word	0x2003dfcc

000b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b60c0:	b507      	push	{r0, r1, r2, lr}
   b60c2:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b60c4:	f7ff ffe0 	bl	b6088 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b60c8:	9901      	ldr	r1, [sp, #4]
    }
   b60ca:	b003      	add	sp, #12
   b60cc:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b60d0:	f001 bef2 	b.w	b7eb8 <_ZN8SPIClass8transferEh>

000b60d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b60d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60d8:	4607      	mov	r7, r0
   b60da:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b60de:	461e      	mov	r6, r3
	if (count == 0) {
   b60e0:	4615      	mov	r5, r2
   b60e2:	2a00      	cmp	r2, #0
   b60e4:	d042      	beq.n	b616c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b60e6:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b60ea:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b60ec:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b60f0:	2100      	movs	r1, #0
   b60f2:	f002 fc70 	bl	b89d6 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b60f6:	4648      	mov	r0, r9
   b60f8:	f7ff ffe2 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b60fc:	3d01      	subs	r5, #1
   b60fe:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6100:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b6104:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6108:	fa5f f48b 	uxtb.w	r4, fp
   b610c:	42a5      	cmp	r5, r4
   b610e:	d922      	bls.n	b6156 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6110:	b9dc      	cbnz	r4, b614a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6112:	f1b8 0f00 	cmp.w	r8, #0
   b6116:	d018      	beq.n	b614a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6118:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b611a:	b2d3      	uxtb	r3, r2
   b611c:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b611e:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6120:	d805      	bhi.n	b612e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b6122:	fa0a f402 	lsl.w	r4, sl, r2
   b6126:	430c      	orrs	r4, r1
   b6128:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b612a:	3201      	adds	r2, #1
   b612c:	e7f5      	b.n	b611a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b612e:	4648      	mov	r0, r9
   b6130:	9101      	str	r1, [sp, #4]
   b6132:	f7ff ffc5 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b6136:	7833      	ldrb	r3, [r6, #0]
   b6138:	9901      	ldr	r1, [sp, #4]
   b613a:	4004      	ands	r4, r0
   b613c:	ea23 0301 	bic.w	r3, r3, r1
   b6140:	431c      	orrs	r4, r3
   b6142:	7034      	strb	r4, [r6, #0]
		index++;
   b6144:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b6148:	e7de      	b.n	b6108 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b614a:	4648      	mov	r0, r9
   b614c:	f7ff ffb8 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6150:	f806 000b 	strb.w	r0, [r6, fp]
   b6154:	e7f6      	b.n	b6144 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b6156:	2000      	movs	r0, #0
   b6158:	f7ff ffb2 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b615c:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b615e:	7b38      	ldrb	r0, [r7, #12]
   b6160:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b6162:	b003      	add	sp, #12
   b6164:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6168:	f002 bc35 	b.w	b89d6 <digitalWrite>
} // End PCD_ReadRegister()
   b616c:	b003      	add	sp, #12
   b616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b6172:	b538      	push	{r3, r4, r5, lr}
   b6174:	460c      	mov	r4, r1
   b6176:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6178:	2100      	movs	r1, #0
   b617a:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b617c:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6180:	f002 fc29 	bl	b89d6 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6184:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b6188:	f7ff ff9a 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b618c:	2000      	movs	r0, #0
   b618e:	f7ff ff97 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6192:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6194:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6196:	7b28      	ldrb	r0, [r5, #12]
   b6198:	f002 fc1d 	bl	b89d6 <digitalWrite>
} // End PCD_ReadRegister()
   b619c:	4620      	mov	r0, r4
   b619e:	bd38      	pop	{r3, r4, r5, pc}

000b61a0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b61a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61a2:	460f      	mov	r7, r1
   b61a4:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61a6:	2100      	movs	r1, #0
   b61a8:	7b00      	ldrb	r0, [r0, #12]
								) {
   b61aa:	4615      	mov	r5, r2
   b61ac:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61ae:	f002 fc12 	bl	b89d6 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b61b2:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b61b6:	f7ff ff83 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b61ba:	4425      	add	r5, r4
   b61bc:	42ac      	cmp	r4, r5
   b61be:	d004      	beq.n	b61ca <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b61c0:	f814 0b01 	ldrb.w	r0, [r4], #1
   b61c4:	f7ff ff7c 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b61c8:	e7f8      	b.n	b61bc <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b61ca:	7b30      	ldrb	r0, [r6, #12]
   b61cc:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b61ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b61d2:	f002 bc00 	b.w	b89d6 <digitalWrite>

000b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b61d6:	b570      	push	{r4, r5, r6, lr}
   b61d8:	4604      	mov	r4, r0
   b61da:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61dc:	7b00      	ldrb	r0, [r0, #12]
   b61de:	2100      	movs	r1, #0
								) {
   b61e0:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61e2:	f002 fbf8 	bl	b89d6 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b61e6:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b61ea:	f7ff ff69 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b61ee:	4628      	mov	r0, r5
   b61f0:	f7ff ff66 	bl	b60c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b61f4:	7b20      	ldrb	r0, [r4, #12]
   b61f6:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b61f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b61fc:	f002 bbeb 	b.w	b89d6 <digitalWrite>

000b6200 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6200:	b570      	push	{r4, r5, r6, lr}
   b6202:	4616      	mov	r6, r2
   b6204:	4604      	mov	r4, r0
   b6206:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6208:	f7ff ffb3 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b620c:	4330      	orrs	r0, r6
   b620e:	b2c2      	uxtb	r2, r0
   b6210:	4629      	mov	r1, r5
   b6212:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6218:	f7ff bfdd 	b.w	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b621c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b621c:	b570      	push	{r4, r5, r6, lr}
   b621e:	4616      	mov	r6, r2
   b6220:	4604      	mov	r4, r0
   b6222:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6224:	f7ff ffa5 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6228:	ea20 0006 	bic.w	r0, r0, r6
   b622c:	b2c2      	uxtb	r2, r0
   b622e:	4629      	mov	r1, r5
   b6230:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b6232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6236:	f7ff bfce 	b.w	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b623a <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b623a:	2208      	movs	r2, #8
   b623c:	2110      	movs	r1, #16
   b623e:	f7ff bfed 	b.w	b621c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b6242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6244:	4604      	mov	r4, r0
   b6246:	4615      	mov	r5, r2
   b6248:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b624a:	2200      	movs	r2, #0
   b624c:	2102      	movs	r1, #2
					 ) {
   b624e:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6250:	f7ff ffc1 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b6254:	2204      	movs	r2, #4
   b6256:	210a      	movs	r1, #10
   b6258:	4620      	mov	r0, r4
   b625a:	f7ff ffbc 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b625e:	2280      	movs	r2, #128	; 0x80
   b6260:	2114      	movs	r1, #20
   b6262:	4620      	mov	r0, r4
   b6264:	f7ff ffcc 	bl	b6200 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b6268:	462a      	mov	r2, r5
   b626a:	463b      	mov	r3, r7
   b626c:	2112      	movs	r1, #18
   b626e:	4620      	mov	r0, r4
   b6270:	f7ff ff96 	bl	b61a0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b6274:	2203      	movs	r2, #3
   b6276:	2102      	movs	r1, #2
   b6278:	4620      	mov	r0, r4
   b627a:	f7ff ffac 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b627e:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b6282:	210a      	movs	r1, #10
   b6284:	4620      	mov	r0, r4
   b6286:	f7ff ff74 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b628a:	0743      	lsls	r3, r0, #29
   b628c:	d405      	bmi.n	b629a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b628e:	3d01      	subs	r5, #1
   b6290:	b2ad      	uxth	r5, r5
   b6292:	2d00      	cmp	r5, #0
   b6294:	d1f5      	bne.n	b6282 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b6296:	2004      	movs	r0, #4
   b6298:	e00f      	b.n	b62ba <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b629a:	2200      	movs	r2, #0
   b629c:	2102      	movs	r1, #2
   b629e:	4620      	mov	r0, r4
   b62a0:	f7ff ff99 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b62a4:	2144      	movs	r1, #68	; 0x44
   b62a6:	4620      	mov	r0, r4
   b62a8:	f7ff ff63 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b62ac:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b62ae:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b62b0:	4620      	mov	r0, r4
   b62b2:	f7ff ff5e 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b62b6:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b62b8:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b62ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b62bc <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b62bc:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b62be:	220f      	movs	r2, #15
   b62c0:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b62c2:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b62c4:	f7ff ff87 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b62c8:	2032      	movs	r0, #50	; 0x32
   b62ca:	f001 ffdd 	bl	b8288 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b62ce:	2102      	movs	r1, #2
   b62d0:	4620      	mov	r0, r4
   b62d2:	f7ff ff4e 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b62d6:	06c3      	lsls	r3, r0, #27
   b62d8:	d4f9      	bmi.n	b62ce <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b62da:	bd10      	pop	{r4, pc}

000b62dc <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b62dc:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b62de:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b62e0:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b62e2:	f7ff ff46 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b62e6:	f000 0303 	and.w	r3, r0, #3
   b62ea:	2b03      	cmp	r3, #3
   b62ec:	d008      	beq.n	b6300 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b62ee:	f040 0203 	orr.w	r2, r0, #3
   b62f2:	b2d2      	uxtb	r2, r2
   b62f4:	4620      	mov	r0, r4
   b62f6:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b62f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b62fc:	f7ff bf6b 	b.w	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b6300:	bd10      	pop	{r4, pc}

000b6302 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b6302:	b510      	push	{r4, lr}
   b6304:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b6306:	7b40      	ldrb	r0, [r0, #13]
   b6308:	f002 fb7e 	bl	b8a08 <digitalRead>
   b630c:	bb48      	cbnz	r0, b6362 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b630e:	7b60      	ldrb	r0, [r4, #13]
   b6310:	2101      	movs	r1, #1
   b6312:	f002 fb60 	bl	b89d6 <digitalWrite>
		delay(50);
   b6316:	2032      	movs	r0, #50	; 0x32
   b6318:	f001 ffb6 	bl	b8288 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b631c:	4620      	mov	r0, r4
   b631e:	2280      	movs	r2, #128	; 0x80
   b6320:	2154      	movs	r1, #84	; 0x54
   b6322:	f7ff ff58 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b6326:	4620      	mov	r0, r4
   b6328:	22a9      	movs	r2, #169	; 0xa9
   b632a:	2156      	movs	r1, #86	; 0x56
   b632c:	f7ff ff53 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6330:	4620      	mov	r0, r4
   b6332:	2203      	movs	r2, #3
   b6334:	2158      	movs	r1, #88	; 0x58
   b6336:	f7ff ff4e 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b633a:	4620      	mov	r0, r4
   b633c:	22e8      	movs	r2, #232	; 0xe8
   b633e:	215a      	movs	r1, #90	; 0x5a
   b6340:	f7ff ff49 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b6344:	4620      	mov	r0, r4
   b6346:	2240      	movs	r2, #64	; 0x40
   b6348:	212a      	movs	r1, #42	; 0x2a
   b634a:	f7ff ff44 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b634e:	4620      	mov	r0, r4
   b6350:	223d      	movs	r2, #61	; 0x3d
   b6352:	2122      	movs	r1, #34	; 0x22
   b6354:	f7ff ff3f 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6358:	4620      	mov	r0, r4
} // End PCD_Init()
   b635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b635e:	f7ff bfbd 	b.w	b62dc <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b6362:	4620      	mov	r0, r4
   b6364:	f7ff ffaa 	bl	b62bc <_ZN7MFRC5229PCD_ResetEv>
   b6368:	e7d8      	b.n	b631c <_ZN7MFRC5228PCD_InitEv+0x1a>

000b636a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b636a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b636e:	b089      	sub	sp, #36	; 0x24
   b6370:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b6374:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b6378:	9203      	str	r2, [sp, #12]
   b637a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b637e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b6382:	9204      	str	r2, [sp, #16]
   b6384:	4604      	mov	r4, r0
   b6386:	468a      	mov	sl, r1
   b6388:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b638a:	f1b9 0f00 	cmp.w	r9, #0
   b638e:	d03e      	beq.n	b640e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b6390:	f899 8000 	ldrb.w	r8, [r9]
   b6394:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6396:	2200      	movs	r2, #0
   b6398:	2102      	movs	r1, #2
   b639a:	4620      	mov	r0, r4
   b639c:	f7ff ff1b 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b63a0:	227f      	movs	r2, #127	; 0x7f
   b63a2:	2108      	movs	r1, #8
   b63a4:	4620      	mov	r0, r4
   b63a6:	f7ff ff16 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b63aa:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b63ae:	2280      	movs	r2, #128	; 0x80
   b63b0:	2114      	movs	r1, #20
   b63b2:	4620      	mov	r0, r4
   b63b4:	f7ff ff24 	bl	b6200 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b63b8:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b63bc:	9b05      	ldr	r3, [sp, #20]
   b63be:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b63c2:	2112      	movs	r1, #18
   b63c4:	4620      	mov	r0, r4
   b63c6:	f7ff feeb 	bl	b61a0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b63ca:	4642      	mov	r2, r8
   b63cc:	211a      	movs	r1, #26
   b63ce:	4620      	mov	r0, r4
   b63d0:	f7ff ff01 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b63d4:	4652      	mov	r2, sl
   b63d6:	2102      	movs	r1, #2
   b63d8:	4620      	mov	r0, r4
   b63da:	f7ff fefc 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b63de:	f1ba 0f0c 	cmp.w	sl, #12
   b63e2:	d104      	bne.n	b63ee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b63e4:	2280      	movs	r2, #128	; 0x80
   b63e6:	211a      	movs	r1, #26
   b63e8:	4620      	mov	r0, r4
   b63ea:	f7ff ff09 	bl	b6200 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b63ee:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b63f2:	2108      	movs	r1, #8
   b63f4:	4620      	mov	r0, r4
   b63f6:	f7ff febc 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b63fa:	9b03      	ldr	r3, [sp, #12]
   b63fc:	4218      	tst	r0, r3
   b63fe:	d108      	bne.n	b6412 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b6400:	07c3      	lsls	r3, r0, #31
   b6402:	d402      	bmi.n	b640a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b6404:	f1b8 0801 	subs.w	r8, r8, #1
   b6408:	d1f3      	bne.n	b63f2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b640a:	2004      	movs	r0, #4
   b640c:	e04d      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b640e:	46c8      	mov	r8, r9
   b6410:	e7c0      	b.n	b6394 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6412:	210c      	movs	r1, #12
   b6414:	4620      	mov	r0, r4
   b6416:	f7ff feac 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b641a:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b641e:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6420:	d146      	bne.n	b64b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b6422:	b1dd      	cbz	r5, b645c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b6424:	b1d6      	cbz	r6, b645c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6426:	2114      	movs	r1, #20
   b6428:	4620      	mov	r0, r4
   b642a:	f7ff fea2 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b642e:	7833      	ldrb	r3, [r6, #0]
   b6430:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6432:	4602      	mov	r2, r0
		if (n > *backLen) {
   b6434:	d33e      	bcc.n	b64b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b6436:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6438:	462b      	mov	r3, r5
   b643a:	2112      	movs	r1, #18
   b643c:	4620      	mov	r0, r4
   b643e:	f8cd b000 	str.w	fp, [sp]
   b6442:	f7ff fe47 	bl	b60d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b6446:	2118      	movs	r1, #24
   b6448:	4620      	mov	r0, r4
   b644a:	f7ff fe92 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b644e:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b6452:	f1b9 0f00 	cmp.w	r9, #0
   b6456:	d001      	beq.n	b645c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b6458:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b645c:	f018 0f08 	tst.w	r8, #8
   b6460:	d12a      	bne.n	b64b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b6462:	b35d      	cbz	r5, b64bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6464:	b356      	cbz	r6, b64bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6466:	9b04      	ldr	r3, [sp, #16]
   b6468:	b343      	cbz	r3, b64bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b646a:	7832      	ldrb	r2, [r6, #0]
   b646c:	2a01      	cmp	r2, #1
   b646e:	d103      	bne.n	b6478 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b6470:	2f04      	cmp	r7, #4
   b6472:	d125      	bne.n	b64c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b6474:	2009      	movs	r0, #9
   b6476:	e018      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b6478:	d922      	bls.n	b64c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b647a:	bb0f      	cbnz	r7, b64c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b647c:	3a02      	subs	r2, #2
   b647e:	ab07      	add	r3, sp, #28
   b6480:	b2d2      	uxtb	r2, r2
   b6482:	4629      	mov	r1, r5
   b6484:	4620      	mov	r0, r4
   b6486:	f7ff fedc 	bl	b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b648a:	2801      	cmp	r0, #1
   b648c:	d10d      	bne.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b648e:	7833      	ldrb	r3, [r6, #0]
   b6490:	441d      	add	r5, r3
   b6492:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b6496:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b649a:	429a      	cmp	r2, r3
   b649c:	d110      	bne.n	b64c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b649e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b64a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b64a6:	429a      	cmp	r2, r3
   b64a8:	d10a      	bne.n	b64c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b64aa:	b009      	add	sp, #36	; 0x24
   b64ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b64b0:	2002      	movs	r0, #2
   b64b2:	e7fa      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b64b4:	2005      	movs	r0, #5
   b64b6:	e7f8      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b64b8:	2003      	movs	r0, #3
   b64ba:	e7f6      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b64bc:	2001      	movs	r0, #1
   b64be:	e7f4      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b64c0:	2008      	movs	r0, #8
   b64c2:	e7f2      	b.n	b64aa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b64c4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b64c4:	b510      	push	{r4, lr}
   b64c6:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b64c8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b64cc:	9405      	str	r4, [sp, #20]
   b64ce:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b64d2:	9404      	str	r4, [sp, #16]
   b64d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b64d6:	9403      	str	r4, [sp, #12]
   b64d8:	9c08      	ldr	r4, [sp, #32]
   b64da:	9200      	str	r2, [sp, #0]
   b64dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b64e0:	2230      	movs	r2, #48	; 0x30
   b64e2:	460b      	mov	r3, r1
   b64e4:	210c      	movs	r1, #12
   b64e6:	f7ff ff40 	bl	b636a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b64ea:	b006      	add	sp, #24
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b64ee:	b570      	push	{r4, r5, r6, lr}
   b64f0:	b088      	sub	sp, #32
   b64f2:	4606      	mov	r6, r0
   b64f4:	461c      	mov	r4, r3
   b64f6:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b64fa:	4615      	mov	r5, r2
   b64fc:	b31a      	cbz	r2, b6546 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b64fe:	781b      	ldrb	r3, [r3, #0]
   b6500:	2b01      	cmp	r3, #1
   b6502:	d920      	bls.n	b6546 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6504:	2280      	movs	r2, #128	; 0x80
   b6506:	211c      	movs	r1, #28
   b6508:	f7ff fe88 	bl	b621c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b650c:	2307      	movs	r3, #7
   b650e:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b6512:	2300      	movs	r3, #0
   b6514:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6518:	f10d 031f 	add.w	r3, sp, #31
   b651c:	e9cd 4300 	strd	r4, r3, [sp]
   b6520:	2201      	movs	r2, #1
   b6522:	462b      	mov	r3, r5
   b6524:	f10d 0117 	add.w	r1, sp, #23
   b6528:	4630      	mov	r0, r6
   b652a:	f7ff ffcb 	bl	b64c4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b652e:	2801      	cmp	r0, #1
   b6530:	d107      	bne.n	b6542 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b6532:	7823      	ldrb	r3, [r4, #0]
   b6534:	2b02      	cmp	r3, #2
   b6536:	d108      	bne.n	b654a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6538:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b653c:	2b00      	cmp	r3, #0
   b653e:	bf18      	it	ne
   b6540:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b6542:	b008      	add	sp, #32
   b6544:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6546:	2005      	movs	r0, #5
   b6548:	e7fb      	b.n	b6542 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b654a:	2002      	movs	r0, #2
   b654c:	e7f9      	b.n	b6542 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b654e <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b654e:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b6550:	460a      	mov	r2, r1
   b6552:	2126      	movs	r1, #38	; 0x26
   b6554:	f7ff bfcb 	b.w	b64ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b6558 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b6558:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b655a:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b655c:	f10d 0203 	add.w	r2, sp, #3
   b6560:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b6562:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6566:	f7ff fff2 	bl	b654e <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b656a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b656e:	1e43      	subs	r3, r0, #1
   b6570:	4258      	negs	r0, r3
   b6572:	4158      	adcs	r0, r3
   b6574:	b003      	add	sp, #12
   b6576:	f85d fb04 	ldr.w	pc, [sp], #4

000b657a <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b657a:	b570      	push	{r4, r5, r6, lr}
   b657c:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b657e:	2350      	movs	r3, #80	; 0x50
   b6580:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b6584:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6586:	f10d 0316 	add.w	r3, sp, #22
   b658a:	2202      	movs	r2, #2
   b658c:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b658e:	4606      	mov	r6, r0
	buffer[1] = 0;
   b6590:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6594:	f7ff fe55 	bl	b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6598:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b659a:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b659c:	d10f      	bne.n	b65be <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b659e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b65a2:	e9cd 4400 	strd	r4, r4, [sp]
   b65a6:	4623      	mov	r3, r4
   b65a8:	2204      	movs	r2, #4
   b65aa:	a905      	add	r1, sp, #20
   b65ac:	4630      	mov	r0, r6
   b65ae:	f7ff ff89 	bl	b64c4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b65b2:	2804      	cmp	r0, #4
   b65b4:	d003      	beq.n	b65be <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b65b6:	2801      	cmp	r0, #1
   b65b8:	bf14      	ite	ne
   b65ba:	4605      	movne	r5, r0
   b65bc:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b65be:	4628      	mov	r0, r5
   b65c0:	b006      	add	sp, #24
   b65c2:	bd70      	pop	{r4, r5, r6, pc}

000b65c4 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b65c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b65c6:	4606      	mov	r6, r0
   b65c8:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b65ca:	4614      	mov	r4, r2
   b65cc:	b1ca      	cbz	r2, b6602 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b65ce:	781b      	ldrb	r3, [r3, #0]
   b65d0:	2b11      	cmp	r3, #17
   b65d2:	d916      	bls.n	b6602 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b65d4:	2330      	movs	r3, #48	; 0x30
   b65d6:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b65d8:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b65da:	1c93      	adds	r3, r2, #2
   b65dc:	4621      	mov	r1, r4
   b65de:	2202      	movs	r2, #2
   b65e0:	f7ff fe2f 	bl	b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b65e4:	2801      	cmp	r0, #1
   b65e6:	d10a      	bne.n	b65fe <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b65e8:	2300      	movs	r3, #0
   b65ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b65ee:	9003      	str	r0, [sp, #12]
   b65f0:	9500      	str	r5, [sp, #0]
   b65f2:	4623      	mov	r3, r4
   b65f4:	2204      	movs	r2, #4
   b65f6:	4621      	mov	r1, r4
   b65f8:	4630      	mov	r0, r6
   b65fa:	f7ff ff63 	bl	b64c4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b65fe:	b004      	add	sp, #16
   b6600:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6602:	2005      	movs	r0, #5
   b6604:	e7fb      	b.n	b65fe <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b6606 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b6606:	b510      	push	{r4, lr}
   b6608:	b08a      	sub	sp, #40	; 0x28
   b660a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b660c:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6610:	681a      	ldr	r2, [r3, #0]
   b6612:	889b      	ldrh	r3, [r3, #4]
   b6614:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6618:	7863      	ldrb	r3, [r4, #1]
   b661a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b661e:	78a3      	ldrb	r3, [r4, #2]
   b6620:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b6624:	78e3      	ldrb	r3, [r4, #3]
   b6626:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b662a:	7923      	ldrb	r3, [r4, #4]
   b662c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6630:	2300      	movs	r3, #0
   b6632:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b6636:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b663a:	9301      	str	r3, [sp, #4]
   b663c:	230c      	movs	r3, #12
	sendData[0] = command;
   b663e:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b6642:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6646:	9300      	str	r3, [sp, #0]
   b6648:	2210      	movs	r2, #16
   b664a:	ab07      	add	r3, sp, #28
   b664c:	210e      	movs	r1, #14
   b664e:	f7ff fe8c 	bl	b636a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b6652:	b00a      	add	sp, #40	; 0x28
   b6654:	bd10      	pop	{r4, pc}

000b6656 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b6656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b665a:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b665c:	b08b      	sub	sp, #44	; 0x2c
   b665e:	4682      	mov	sl, r0
   b6660:	460f      	mov	r7, r1
   b6662:	4690      	mov	r8, r2
	if (validBits > 80) {
   b6664:	f200 8140 	bhi.w	b68e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6668:	2280      	movs	r2, #128	; 0x80
   b666a:	211c      	movs	r1, #28
   b666c:	f7ff fdd6 	bl	b621c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6670:	2393      	movs	r3, #147	; 0x93
   b6672:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6676:	f1b8 0f00 	cmp.w	r8, #0
   b667a:	f000 80bc 	beq.w	b67f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b667e:	783c      	ldrb	r4, [r7, #0]
   b6680:	2c04      	cmp	r4, #4
   b6682:	bf94      	ite	ls
   b6684:	2300      	movls	r3, #0
   b6686:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6688:	2501      	movs	r5, #1
   b668a:	2600      	movs	r6, #0
   b668c:	e00b      	b.n	b66a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b668e:	2395      	movs	r3, #149	; 0x95
   b6690:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6694:	f1b8 0f00 	cmp.w	r8, #0
   b6698:	f000 80af 	beq.w	b67fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b669c:	783c      	ldrb	r4, [r7, #0]
   b669e:	2c07      	cmp	r4, #7
   b66a0:	bf94      	ite	ls
   b66a2:	2300      	movls	r3, #0
   b66a4:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b66a6:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b66aa:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b66ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b66b0:	2b00      	cmp	r3, #0
   b66b2:	f000 80a4 	beq.w	b67fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b66b6:	2288      	movs	r2, #136	; 0x88
   b66b8:	f88d 201e 	strb.w	r2, [sp, #30]
   b66bc:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b66be:	f014 0207 	ands.w	r2, r4, #7
   b66c2:	bf18      	it	ne
   b66c4:	2201      	movne	r2, #1
   b66c6:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b66ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b66ce:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b66d0:	d01d      	beq.n	b670e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b66d2:	2b00      	cmp	r3, #0
   b66d4:	bf14      	ite	ne
   b66d6:	f04f 0903 	movne.w	r9, #3
   b66da:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b66de:	f106 0c01 	add.w	ip, r6, #1
   b66e2:	4591      	cmp	r9, r2
   b66e4:	bf94      	ite	ls
   b66e6:	eb01 0e09 	addls.w	lr, r1, r9
   b66ea:	eb01 0e02 	addhi.w	lr, r1, r2
   b66ee:	fa57 fc8c 	uxtab	ip, r7, ip
   b66f2:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b66f6:	460a      	mov	r2, r1
   b66f8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b66fc:	3101      	adds	r1, #1
   b66fe:	b2c9      	uxtb	r1, r1
   b6700:	445a      	add	r2, fp
   b6702:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b6706:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b670a:	4571      	cmp	r1, lr
   b670c:	d1f3      	bne.n	b66f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b670e:	b10b      	cbz	r3, b6714 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6710:	3008      	adds	r0, #8
   b6712:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b6714:	2c1f      	cmp	r4, #31
   b6716:	dd74      	ble.n	b6802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6718:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b671c:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6720:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6724:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6728:	4053      	eors	r3, r2
   b672a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b672e:	4053      	eors	r3, r2
   b6730:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b6734:	4053      	eors	r3, r2
   b6736:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b673a:	2207      	movs	r2, #7
   b673c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6740:	a907      	add	r1, sp, #28
   b6742:	4650      	mov	r0, sl
   b6744:	f7ff fd7d 	bl	b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b6748:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b674a:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b674c:	f040 80c8 	bne.w	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6750:	2300      	movs	r3, #0
   b6752:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b6756:	2303      	movs	r3, #3
   b6758:	f88d 301b 	strb.w	r3, [sp, #27]
   b675c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b675e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b6762:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b6766:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b676a:	9305      	str	r3, [sp, #20]
   b676c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6770:	b2d2      	uxtb	r2, r2
   b6772:	211a      	movs	r1, #26
   b6774:	4650      	mov	r0, sl
   b6776:	f7ff fd2e 	bl	b61d6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b677a:	9b05      	ldr	r3, [sp, #20]
   b677c:	9302      	str	r3, [sp, #8]
   b677e:	f10d 031a 	add.w	r3, sp, #26
   b6782:	2200      	movs	r2, #0
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	f10d 031b 	add.w	r3, sp, #27
   b678a:	9203      	str	r2, [sp, #12]
   b678c:	9300      	str	r3, [sp, #0]
   b678e:	464a      	mov	r2, r9
   b6790:	465b      	mov	r3, fp
   b6792:	a907      	add	r1, sp, #28
   b6794:	4650      	mov	r0, sl
   b6796:	f7ff fe95 	bl	b64c4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b679a:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b679c:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b679e:	d14c      	bne.n	b683a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b67a0:	211c      	movs	r1, #28
   b67a2:	4650      	mov	r0, sl
   b67a4:	f7ff fce5 	bl	b6172 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b67a8:	0681      	lsls	r1, r0, #26
   b67aa:	f100 8099 	bmi.w	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b67ae:	f010 001f 	ands.w	r0, r0, #31
   b67b2:	bf08      	it	eq
   b67b4:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b67b6:	42a0      	cmp	r0, r4
   b67b8:	f340 8087 	ble.w	b68ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b67bc:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b67be:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b67c2:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b67c4:	f013 0307 	ands.w	r3, r3, #7
   b67c8:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b67cc:	bf18      	it	ne
   b67ce:	2301      	movne	r3, #1
   b67d0:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b67d2:	4418      	add	r0, r3
   b67d4:	ab0a      	add	r3, sp, #40	; 0x28
   b67d6:	4418      	add	r0, r3
   b67d8:	2301      	movs	r3, #1
   b67da:	fa03 f202 	lsl.w	r2, r3, r2
   b67de:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b67e2:	4313      	orrs	r3, r2
   b67e4:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b67e8:	e794      	b.n	b6714 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b67ea:	2397      	movs	r3, #151	; 0x97
   b67ec:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b67f0:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b67f2:	4623      	mov	r3, r4
				break;
   b67f4:	e757      	b.n	b66a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b67f6:	4643      	mov	r3, r8
   b67f8:	e746      	b.n	b6688 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b67fa:	4643      	mov	r3, r8
   b67fc:	e753      	b.n	b66a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b67fe:	2102      	movs	r1, #2
   b6800:	e75d      	b.n	b66be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b6802:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6804:	3302      	adds	r3, #2
   b6806:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6808:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b680c:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6810:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6814:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6818:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b681c:	bf18      	it	ne
   b681e:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b6822:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6824:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b6826:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b682a:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b682e:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b6832:	f88d 301b 	strb.w	r3, [sp, #27]
   b6836:	9404      	str	r4, [sp, #16]
   b6838:	e795      	b.n	b6766 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b683a:	2801      	cmp	r0, #1
   b683c:	d150      	bne.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b683e:	9b04      	ldr	r3, [sp, #16]
   b6840:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b6842:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6846:	f77f af67 	ble.w	b6718 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b684a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b684e:	2b88      	cmp	r3, #136	; 0x88
   b6850:	d13e      	bne.n	b68d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b6852:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6854:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b6856:	3601      	adds	r6, #1
   b6858:	441a      	add	r2, r3
   b685a:	fa57 f686 	uxtab	r6, r7, r6
   b685e:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6860:	4619      	mov	r1, r3
   b6862:	a80a      	add	r0, sp, #40	; 0x28
   b6864:	3301      	adds	r3, #1
   b6866:	4401      	add	r1, r0
   b6868:	b2db      	uxtb	r3, r3
   b686a:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b686e:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b6872:	4293      	cmp	r3, r2
   b6874:	d1f4      	bne.n	b6860 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b6876:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b687a:	2e03      	cmp	r6, #3
   b687c:	d137      	bne.n	b68ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b687e:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b6882:	bba4      	cbnz	r4, b68ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6884:	f10d 031e 	add.w	r3, sp, #30
   b6888:	2201      	movs	r2, #1
   b688a:	4659      	mov	r1, fp
   b688c:	4650      	mov	r0, sl
   b688e:	f7ff fcd8 	bl	b6242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b6892:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6894:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b6896:	d123      	bne.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6898:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b689c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b68a0:	429a      	cmp	r2, r3
   b68a2:	d127      	bne.n	b68f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b68a4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b68a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b68ac:	429a      	cmp	r2, r3
   b68ae:	d121      	bne.n	b68f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b68b0:	f89b 3000 	ldrb.w	r3, [fp]
   b68b4:	075a      	lsls	r2, r3, #29
   b68b6:	d50e      	bpl.n	b68d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b68b8:	3501      	adds	r5, #1
   b68ba:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b68bc:	2d03      	cmp	r5, #3
   b68be:	d094      	beq.n	b67ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b68c0:	2d04      	cmp	r5, #4
   b68c2:	d002      	beq.n	b68ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b68c4:	2d02      	cmp	r5, #2
   b68c6:	f43f aee2 	beq.w	b668e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b68ca:	f04f 0906 	mov.w	r9, #6
   b68ce:	e007      	b.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b68d0:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b68d2:	2204      	movs	r2, #4
   b68d4:	e7bf      	b.n	b6856 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b68d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b68da:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b68dc:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b68de:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b68e0:	4648      	mov	r0, r9
   b68e2:	b00b      	add	sp, #44	; 0x2c
   b68e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b68e8:	f04f 0907 	mov.w	r9, #7
   b68ec:	e7f8      	b.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b68ee:	f04f 0902 	mov.w	r9, #2
   b68f2:	e7f5      	b.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b68f4:	f04f 0908 	mov.w	r9, #8
   b68f8:	e7f2      	b.n	b68e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b68fa <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b68fa:	b508      	push	{r3, lr}
   b68fc:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b68fe:	2200      	movs	r2, #0
   b6900:	f7ff fea9 	bl	b6656 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6904:	1e43      	subs	r3, r0, #1
   b6906:	4258      	negs	r0, r3
   b6908:	4158      	adcs	r0, r3
   b690a:	bd08      	pop	{r3, pc}

000b690c <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b690c:	6001      	str	r1, [r0, #0]
}
   b690e:	4770      	bx	lr

000b6910 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6910:	b510      	push	{r4, lr}
   b6912:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6914:	2101      	movs	r1, #1
   b6916:	8800      	ldrh	r0, [r0, #0]
   b6918:	f002 f84c 	bl	b89b4 <pinMode>
	digitalWrite(_pin, LOW);
   b691c:	8820      	ldrh	r0, [r4, #0]
   b691e:	2100      	movs	r1, #0
   b6920:	f002 f859 	bl	b89d6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6924:	2002      	movs	r0, #2
   b6926:	f000 ffb9 	bl	b789c <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b692a:	8820      	ldrh	r0, [r4, #0]
   b692c:	2101      	movs	r1, #1
   b692e:	f002 f852 	bl	b89d6 <digitalWrite>
   b6932:	2005      	movs	r0, #5
   b6934:	f000 ffb2 	bl	b789c <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b6938:	8820      	ldrh	r0, [r4, #0]
   b693a:	2100      	movs	r1, #0
   b693c:	f002 f84b 	bl	b89d6 <digitalWrite>
	pinMode(_pin,INPUT);
   b6940:	8820      	ldrh	r0, [r4, #0]
   b6942:	2100      	movs	r1, #0
   b6944:	f002 f836 	bl	b89b4 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b6948:	8820      	ldrh	r0, [r4, #0]
   b694a:	2101      	movs	r1, #1
   b694c:	f002 f886 	bl	b8a5c <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b6950:	233a      	movs	r3, #58	; 0x3a
   b6952:	fb90 f0f3 	sdiv	r0, r0, r3
   b6956:	bd10      	pop	{r4, pc}

000b6958 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b6958:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b695a:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b695c:	2301      	movs	r3, #1
	_pin = pin;
   b695e:	7181      	strb	r1, [r0, #6]
	_type = type;
   b6960:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b6962:	7403      	strb	r3, [r0, #16]
}
   b6964:	bd10      	pop	{r4, pc}

000b6966 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b6966:	b510      	push	{r4, lr}
   b6968:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b696a:	2100      	movs	r1, #0
   b696c:	7980      	ldrb	r0, [r0, #6]
   b696e:	f002 f821 	bl	b89b4 <pinMode>
	digitalWrite(_pin, HIGH);
   b6972:	79a0      	ldrb	r0, [r4, #6]
   b6974:	2101      	movs	r1, #1
   b6976:	f002 f82e 	bl	b89d6 <digitalWrite>
	_lastreadtime = 0;
   b697a:	2300      	movs	r3, #0
   b697c:	60e3      	str	r3, [r4, #12]
}
   b697e:	bd10      	pop	{r4, pc}

000b6980 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b6980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6984:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6986:	f000 ff91 	bl	b78ac <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b698a:	68e3      	ldr	r3, [r4, #12]
   b698c:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b698e:	bf84      	itt	hi
   b6990:	2300      	movhi	r3, #0
   b6992:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b6994:	7c23      	ldrb	r3, [r4, #16]
   b6996:	b923      	cbnz	r3, b69a2 <_ZN3DHT4readEv+0x22>
   b6998:	68e3      	ldr	r3, [r4, #12]
   b699a:	1ac0      	subs	r0, r0, r3
   b699c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b69a0:	d367      	bcc.n	b6a72 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b69a2:	2500      	movs	r5, #0
   b69a4:	7425      	strb	r5, [r4, #16]
   b69a6:	f000 ff81 	bl	b78ac <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b69aa:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b69ac:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b69ae:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b69b0:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b69b2:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b69b4:	f002 f80f 	bl	b89d6 <digitalWrite>
	delay(250);
   b69b8:	20fa      	movs	r0, #250	; 0xfa
   b69ba:	f001 fc65 	bl	b8288 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b69be:	79a0      	ldrb	r0, [r4, #6]
   b69c0:	2101      	movs	r1, #1
   b69c2:	f001 fff7 	bl	b89b4 <pinMode>
	digitalWrite(_pin, LOW);
   b69c6:	4629      	mov	r1, r5
   b69c8:	79a0      	ldrb	r0, [r4, #6]
   b69ca:	f002 f804 	bl	b89d6 <digitalWrite>
	delay(20);
   b69ce:	2014      	movs	r0, #20
   b69d0:	f001 fc5a 	bl	b8288 <delay>
	noInterrupts();
   b69d4:	f001 fe14 	bl	b8600 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b69d8:	2101      	movs	r1, #1
   b69da:	79a0      	ldrb	r0, [r4, #6]
   b69dc:	f001 fffb 	bl	b89d6 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b69e0:	2028      	movs	r0, #40	; 0x28
   b69e2:	f000 ff5b 	bl	b789c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b69e6:	79a0      	ldrb	r0, [r4, #6]
   b69e8:	4629      	mov	r1, r5
   b69ea:	f001 ffe3 	bl	b89b4 <pinMode>
	uint8_t j = 0, i;
   b69ee:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b69f0:	2701      	movs	r7, #1
   b69f2:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b69f6:	79a0      	ldrb	r0, [r4, #6]
   b69f8:	f002 f806 	bl	b8a08 <digitalRead>
   b69fc:	42b8      	cmp	r0, r7
   b69fe:	fa5f f988 	uxtb.w	r9, r8
   b6a02:	d108      	bne.n	b6a16 <_ZN3DHT4readEv+0x96>
   b6a04:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b6a06:	f108 0801 	add.w	r8, r8, #1
   b6a0a:	f000 ff47 	bl	b789c <HAL_Delay_Microseconds>
   b6a0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6a12:	d1f0      	bne.n	b69f6 <_ZN3DHT4readEv+0x76>
   b6a14:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b6a16:	79a0      	ldrb	r0, [r4, #6]
   b6a18:	f001 fff6 	bl	b8a08 <digitalRead>

		if (counter == 255) break;
   b6a1c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b6a20:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b6a22:	d014      	beq.n	b6a4e <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b6a24:	2d03      	cmp	r5, #3
   b6a26:	d90e      	bls.n	b6a46 <_ZN3DHT4readEv+0xc6>
   b6a28:	07ea      	lsls	r2, r5, #31
   b6a2a:	d40c      	bmi.n	b6a46 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b6a2c:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b6a2e:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b6a30:	5ca3      	ldrb	r3, [r4, r2]
   b6a32:	005b      	lsls	r3, r3, #1
   b6a34:	b2db      	uxtb	r3, r3
   b6a36:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b6a38:	7a21      	ldrb	r1, [r4, #8]
   b6a3a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b6a3c:	bf3c      	itt	cc
   b6a3e:	f043 0301 	orrcc.w	r3, r3, #1
   b6a42:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b6a44:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b6a46:	3501      	adds	r5, #1
   b6a48:	b2ed      	uxtb	r5, r5
   b6a4a:	2d55      	cmp	r5, #85	; 0x55
   b6a4c:	d1d1      	bne.n	b69f2 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b6a4e:	f001 fdd9 	bl	b8604 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b6a52:	2e27      	cmp	r6, #39	; 0x27
   b6a54:	d90f      	bls.n	b6a76 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b6a56:	7863      	ldrb	r3, [r4, #1]
   b6a58:	7820      	ldrb	r0, [r4, #0]
   b6a5a:	4418      	add	r0, r3
   b6a5c:	78a3      	ldrb	r3, [r4, #2]
   b6a5e:	4418      	add	r0, r3
   b6a60:	78e3      	ldrb	r3, [r4, #3]
   b6a62:	4418      	add	r0, r3
   b6a64:	7923      	ldrb	r3, [r4, #4]
   b6a66:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b6a68:	1ac3      	subs	r3, r0, r3
   b6a6a:	4258      	negs	r0, r3
   b6a6c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b6a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b6a72:	2001      	movs	r0, #1
   b6a74:	e7fb      	b.n	b6a6e <_ZN3DHT4readEv+0xee>
	return false;
   b6a76:	2000      	movs	r0, #0
   b6a78:	e7f9      	b.n	b6a6e <_ZN3DHT4readEv+0xee>
	...

000b6a7c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b6a7c:	b510      	push	{r4, lr}
   b6a7e:	4604      	mov	r4, r0
	if (read()) {
   b6a80:	f7ff ff7e 	bl	b6980 <_ZN3DHT4readEv>
   b6a84:	b320      	cbz	r0, b6ad0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b6a86:	79e3      	ldrb	r3, [r4, #7]
   b6a88:	2b0b      	cmp	r3, #11
   b6a8a:	d01b      	beq.n	b6ac4 <_ZN3DHT15readTemperatureEv+0x48>
   b6a8c:	3b15      	subs	r3, #21
   b6a8e:	2b01      	cmp	r3, #1
   b6a90:	d81e      	bhi.n	b6ad0 <_ZN3DHT15readTemperatureEv+0x54>
   b6a92:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b6a94:	eddf 6a10 	vldr	s13, [pc, #64]	; b6ad8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b6a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b6a9c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b6aa0:	78e2      	ldrb	r2, [r4, #3]
   b6aa2:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b6aa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b6aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b6aae:	061b      	lsls	r3, r3, #24
				f += data[3];
   b6ab0:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b6ab4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b6ab8:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b6abc:	d507      	bpl.n	b6ace <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b6abe:	eeb1 0a40 	vneg.f32	s0, s0
   b6ac2:	e004      	b.n	b6ace <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b6ac4:	78a3      	ldrb	r3, [r4, #2]
   b6ac6:	ee00 3a10 	vmov	s0, r3
   b6aca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b6ace:	bd10      	pop	{r4, pc}
		switch (_type) {
   b6ad0:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6adc <_ZN3DHT15readTemperatureEv+0x60>
   b6ad4:	e7fb      	b.n	b6ace <_ZN3DHT15readTemperatureEv+0x52>
   b6ad6:	bf00      	nop
   b6ad8:	43800000 	.word	0x43800000
   b6adc:	7fc00000 	.word	0x7fc00000

000b6ae0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b6ae0:	f7ff bfcc 	b.w	b6a7c <_ZN3DHT15readTemperatureEv>

000b6ae4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6ae4:	b510      	push	{r4, lr}
   b6ae6:	4b04      	ldr	r3, [pc, #16]	; (b6af8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6ae8:	6003      	str	r3, [r0, #0]
   b6aea:	4604      	mov	r4, r0
  if(buffer) {
   b6aec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6aee:	b108      	cbz	r0, b6af4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6af0:	f001 f8c0 	bl	b7c74 <free>
    buffer = NULL;
  }
}
   b6af4:	4620      	mov	r0, r4
   b6af6:	bd10      	pop	{r4, pc}
   b6af8:	000baa94 	.word	0x000baa94

000b6afc <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6afc:	b510      	push	{r4, lr}
   b6afe:	4604      	mov	r4, r0
}
   b6b00:	f7ff fff0 	bl	b6ae4 <_ZN16Adafruit_SSD1306D1Ev>
   b6b04:	4620      	mov	r0, r4
   b6b06:	2150      	movs	r1, #80	; 0x50
   b6b08:	f7fd fac7 	bl	b409a <_ZdlPvj>
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	bd10      	pop	{r4, pc}

000b6b10 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6b10:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6b12:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6b14:	db4b      	blt.n	b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b16:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6b1a:	428c      	cmp	r4, r1
   b6b1c:	dd47      	ble.n	b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b1e:	2a00      	cmp	r2, #0
   b6b20:	db45      	blt.n	b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b22:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6b26:	4294      	cmp	r4, r2
   b6b28:	dd41      	ble.n	b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6b2a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6b2c:	2c02      	cmp	r4, #2
   b6b2e:	d01f      	beq.n	b6b70 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6b30:	2c03      	cmp	r4, #3
   b6b32:	d026      	beq.n	b6b82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6b34:	2c01      	cmp	r4, #1
   b6b36:	d104      	bne.n	b6b42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6b38:	8904      	ldrh	r4, [r0, #8]
   b6b3a:	43d2      	mvns	r2, r2
   b6b3c:	4414      	add	r4, r2
      break;
   b6b3e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6b40:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6b42:	2b01      	cmp	r3, #1
   b6b44:	d023      	beq.n	b6b8e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6b46:	2b02      	cmp	r3, #2
   b6b48:	d032      	beq.n	b6bb0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6b4a:	bb83      	cbnz	r3, b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6b4c:	2a00      	cmp	r2, #0
   b6b4e:	4613      	mov	r3, r2
   b6b50:	8904      	ldrh	r4, [r0, #8]
   b6b52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6b54:	bfb8      	it	lt
   b6b56:	1dd3      	addlt	r3, r2, #7
   b6b58:	10db      	asrs	r3, r3, #3
   b6b5a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6b5e:	f002 0207 	and.w	r2, r2, #7
   b6b62:	2301      	movs	r3, #1
   b6b64:	4093      	lsls	r3, r2
   b6b66:	5c42      	ldrb	r2, [r0, r1]
   b6b68:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6b6c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6b6e:	e01e      	b.n	b6bae <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6b70:	8904      	ldrh	r4, [r0, #8]
   b6b72:	3c01      	subs	r4, #1
   b6b74:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6b76:	8944      	ldrh	r4, [r0, #10]
   b6b78:	43d2      	mvns	r2, r2
   b6b7a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6b7c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6b7e:	b212      	sxth	r2, r2
      break;
   b6b80:	e7df      	b.n	b6b42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6b82:	8944      	ldrh	r4, [r0, #10]
   b6b84:	3c01      	subs	r4, #1
   b6b86:	1a64      	subs	r4, r4, r1
      break;
   b6b88:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6b8a:	b222      	sxth	r2, r4
      break;
   b6b8c:	e7d9      	b.n	b6b42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6b8e:	2a00      	cmp	r2, #0
   b6b90:	8904      	ldrh	r4, [r0, #8]
   b6b92:	4613      	mov	r3, r2
   b6b94:	bfb8      	it	lt
   b6b96:	1dd3      	addlt	r3, r2, #7
   b6b98:	10db      	asrs	r3, r3, #3
   b6b9a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6b9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6ba0:	f002 0007 	and.w	r0, r2, #7
   b6ba4:	2201      	movs	r2, #1
   b6ba6:	4082      	lsls	r2, r0
   b6ba8:	5c58      	ldrb	r0, [r3, r1]
   b6baa:	4302      	orrs	r2, r0
   b6bac:	545a      	strb	r2, [r3, r1]
}
   b6bae:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6bb0:	2a00      	cmp	r2, #0
   b6bb2:	4613      	mov	r3, r2
   b6bb4:	8904      	ldrh	r4, [r0, #8]
   b6bb6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6bb8:	bfb8      	it	lt
   b6bba:	1dd3      	addlt	r3, r2, #7
   b6bbc:	10db      	asrs	r3, r3, #3
   b6bbe:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6bc2:	f002 0207 	and.w	r2, r2, #7
   b6bc6:	2301      	movs	r3, #1
   b6bc8:	fa03 f202 	lsl.w	r2, r3, r2
   b6bcc:	5c43      	ldrb	r3, [r0, r1]
   b6bce:	405a      	eors	r2, r3
   b6bd0:	e7cc      	b.n	b6b6c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6bd4 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6bd4:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b6bd6:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6bd8:	4604      	mov	r4, r0
   b6bda:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b6bdc:	2180      	movs	r1, #128	; 0x80
   b6bde:	f7fe ffcf 	bl	b5b80 <_ZN12Adafruit_GFXC1Ess>
   b6be2:	2500      	movs	r5, #0
   b6be4:	4b0d      	ldr	r3, [pc, #52]	; (b6c1c <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b6be6:	6023      	str	r3, [r4, #0]
   b6be8:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b6bea:	f001 ffa7 	bl	b8b3c <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b6bee:	23ff      	movs	r3, #255	; 0xff
   b6bf0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6bf4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b6bf8:	4b09      	ldr	r3, [pc, #36]	; (b6c20 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b6bfa:	63a3      	str	r3, [r4, #56]	; 0x38
   b6bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6c00:	2301      	movs	r3, #1
   b6c02:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b6c06:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6c08:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b6c0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6c10:	6425      	str	r5, [r4, #64]	; 0x40
   b6c12:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b6c16:	4620      	mov	r0, r4
   b6c18:	bd70      	pop	{r4, r5, r6, pc}
   b6c1a:	bf00      	nop
   b6c1c:	000baa94 	.word	0x000baa94
   b6c20:	000ba4a0 	.word	0x000ba4a0

000b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c26:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6c28:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6c2a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6c2c:	b190      	cbz	r0, b6c54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6c2e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6c32:	f001 fd87 	bl	b8744 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6c36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6c38:	6803      	ldr	r3, [r0, #0]
   b6c3a:	2100      	movs	r1, #0
   b6c3c:	689b      	ldr	r3, [r3, #8]
   b6c3e:	4798      	blx	r3
    WIRE_WRITE(c);
   b6c40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6c42:	6803      	ldr	r3, [r0, #0]
   b6c44:	4629      	mov	r1, r5
   b6c46:	689b      	ldr	r3, [r3, #8]
   b6c48:	4798      	blx	r3
    wire->endTransmission();
   b6c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6c50:	f001 bd7f 	b.w	b8752 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6c54:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6c58:	4601      	mov	r1, r0
   b6c5a:	b298      	uxth	r0, r3
   b6c5c:	f001 febb 	bl	b89d6 <digitalWrite>
  if(spi) {
   b6c60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6c62:	b120      	cbz	r0, b6c6e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6c64:	4629      	mov	r1, r5
}
   b6c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6c6a:	f001 b925 	b.w	b7eb8 <_ZN8SPIClass8transferEh>
   b6c6e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6c70:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6c72:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6c76:	ea05 0107 	and.w	r1, r5, r7
   b6c7a:	b280      	uxth	r0, r0
   b6c7c:	f001 feab 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6c80:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6c84:	2101      	movs	r1, #1
   b6c86:	b280      	uxth	r0, r0
   b6c88:	f001 fea5 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6c8c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6c90:	2100      	movs	r1, #0
   b6c92:	b280      	uxth	r0, r0
   b6c94:	f001 fe9f 	bl	b89d6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6c98:	3e01      	subs	r6, #1
   b6c9a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6c9e:	d1e8      	bne.n	b6c72 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ca2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6ca2:	b538      	push	{r3, r4, r5, lr}
   b6ca4:	4604      	mov	r4, r0
  TRANSACTION_START
   b6ca6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6ca8:	460d      	mov	r5, r1
  TRANSACTION_START
   b6caa:	b180      	cbz	r0, b6cce <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6cae:	f001 fd3b 	bl	b8728 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6cb2:	2d00      	cmp	r5, #0
   b6cb4:	4620      	mov	r0, r4
   b6cb6:	bf14      	ite	ne
   b6cb8:	21a7      	movne	r1, #167	; 0xa7
   b6cba:	21a6      	moveq	r1, #166	; 0xa6
   b6cbc:	f7ff ffb2 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6cc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6cc2:	b188      	cbz	r0, b6ce8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6cc4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6cca:	f001 bd2d 	b.w	b8728 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6cce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6cd0:	b118      	cbz	r0, b6cda <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6cd2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6cd6:	f001 f881 	bl	b7ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6cda:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6cde:	2100      	movs	r1, #0
   b6ce0:	b280      	uxth	r0, r0
   b6ce2:	f001 fe78 	bl	b89d6 <digitalWrite>
   b6ce6:	e7e4      	b.n	b6cb2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6ce8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6cec:	2101      	movs	r1, #1
   b6cee:	b280      	uxth	r0, r0
   b6cf0:	f001 fe71 	bl	b89d6 <digitalWrite>
   b6cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6cf6:	b118      	cbz	r0, b6d00 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6cfc:	f001 b854 	b.w	b7da8 <_ZN8SPIClass14endTransactionEv>
}
   b6d00:	bd38      	pop	{r3, r4, r5, pc}

000b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6d02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d06:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6d08:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6d0a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6d0c:	188f      	adds	r7, r1, r2
   b6d0e:	b340      	cbz	r0, b6d62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6d10:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6d14:	f001 fd16 	bl	b8744 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6d18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d1a:	6803      	ldr	r3, [r0, #0]
   b6d1c:	2100      	movs	r1, #0
   b6d1e:	689b      	ldr	r3, [r3, #8]
   b6d20:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6d22:	2601      	movs	r6, #1
    while(n--) {
   b6d24:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6d26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6d28:	d017      	beq.n	b6d5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6d2a:	2e1f      	cmp	r6, #31
   b6d2c:	d90c      	bls.n	b6d48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6d2e:	f001 fd10 	bl	b8752 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6d32:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6d36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d38:	f001 fd04 	bl	b8744 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d3e:	6803      	ldr	r3, [r0, #0]
   b6d40:	2100      	movs	r1, #0
   b6d42:	689b      	ldr	r3, [r3, #8]
   b6d44:	4798      	blx	r3
        bytesOut = 1;
   b6d46:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6d48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d4a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6d4e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6d50:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6d52:	689b      	ldr	r3, [r3, #8]
   b6d54:	4798      	blx	r3
      bytesOut++;
   b6d56:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6d58:	e7e4      	b.n	b6d24 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6d5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6d5e:	f001 bcf8 	b.w	b8752 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6d62:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6d66:	4601      	mov	r1, r0
   b6d68:	b298      	uxth	r0, r3
   b6d6a:	f001 fe34 	bl	b89d6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6d6e:	42bd      	cmp	r5, r7
   b6d70:	d022      	beq.n	b6db8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6d74:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6d78:	b118      	cbz	r0, b6d82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6d7a:	4649      	mov	r1, r9
   b6d7c:	f001 f89c 	bl	b7eb8 <_ZN8SPIClass8transferEh>
   b6d80:	e7f5      	b.n	b6d6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6d82:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6d84:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6d88:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6d8c:	ea09 0108 	and.w	r1, r9, r8
   b6d90:	b280      	uxth	r0, r0
   b6d92:	f001 fe20 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6d96:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6d9a:	2101      	movs	r1, #1
   b6d9c:	b280      	uxth	r0, r0
   b6d9e:	f001 fe1a 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6da2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6da6:	2100      	movs	r1, #0
   b6da8:	b280      	uxth	r0, r0
   b6daa:	f001 fe14 	bl	b89d6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6dae:	3e01      	subs	r6, #1
   b6db0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6db4:	d1e8      	bne.n	b6d88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6db6:	e7da      	b.n	b6d6e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6dbc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6dbc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6dc0:	1dda      	adds	r2, r3, #7
   b6dc2:	bf48      	it	mi
   b6dc4:	f103 020e 	addmi.w	r2, r3, #14
   b6dc8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6dcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6dce:	10d2      	asrs	r2, r2, #3
   b6dd0:	435a      	muls	r2, r3
   b6dd2:	2100      	movs	r1, #0
   b6dd4:	f002 bbba 	b.w	b954c <memset>

000b6dd8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6dd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6ddc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6dde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6de0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6de4:	4604      	mov	r4, r0
   b6de6:	460f      	mov	r7, r1
   b6de8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6dea:	b1d3      	cbz	r3, b6e22 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b6dec:	4620      	mov	r0, r4
   b6dee:	f7ff ffe5 	bl	b6dbc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6df2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b6df6:	2a20      	cmp	r2, #32
   b6df8:	dc25      	bgt.n	b6e46 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6dfa:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b6dfe:	2320      	movs	r3, #32
   b6e00:	3a20      	subs	r2, #32
   b6e02:	3973      	subs	r1, #115	; 0x73
   b6e04:	2001      	movs	r0, #1
   b6e06:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6e0a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b6e0e:	2373      	movs	r3, #115	; 0x73
   b6e10:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6e14:	9300      	str	r3, [sp, #0]
   b6e16:	f342 024f 	sbfx	r2, r2, #1, #16
   b6e1a:	4b85      	ldr	r3, [pc, #532]	; (b7030 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b6e1c:	f341 014f 	sbfx	r1, r1, #1, #16
   b6e20:	e01b      	b.n	b6e5a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6e22:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6e26:	1dd8      	adds	r0, r3, #7
   b6e28:	bf48      	it	mi
   b6e2a:	f103 000e 	addmi.w	r0, r3, #14
   b6e2e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6e32:	10c0      	asrs	r0, r0, #3
   b6e34:	4358      	muls	r0, r3
   b6e36:	f000 ff15 	bl	b7c64 <malloc>
   b6e3a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6e3c:	2800      	cmp	r0, #0
   b6e3e:	d1d5      	bne.n	b6dec <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6e40:	b004      	add	sp, #16
   b6e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b6e46:	2340      	movs	r3, #64	; 0x40
   b6e48:	f04f 0c01 	mov.w	ip, #1
   b6e4c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b6e50:	2380      	movs	r3, #128	; 0x80
   b6e52:	9300      	str	r3, [sp, #0]
   b6e54:	2200      	movs	r2, #0
   b6e56:	4b77      	ldr	r3, [pc, #476]	; (b7034 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b6e58:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6e5a:	4620      	mov	r0, r4
   b6e5c:	f7fe fea6 	bl	b5bac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6e62:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6e66:	2800      	cmp	r0, #0
   b6e68:	d078      	beq.n	b6f5c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6e6a:	2d00      	cmp	r5, #0
   b6e6c:	d174      	bne.n	b6f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b6e6e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6e72:	2b20      	cmp	r3, #32
   b6e74:	bf0c      	ite	eq
   b6e76:	253c      	moveq	r5, #60	; 0x3c
   b6e78:	253d      	movne	r5, #61	; 0x3d
   b6e7a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6e7e:	f1b8 0f00 	cmp.w	r8, #0
   b6e82:	d001      	beq.n	b6e88 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6e84:	f001 fc54 	bl	b8730 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6e88:	b1fe      	cbz	r6, b6eca <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b6e8a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6e8e:	2800      	cmp	r0, #0
   b6e90:	db1b      	blt.n	b6eca <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b6e92:	2101      	movs	r1, #1
   b6e94:	b280      	uxth	r0, r0
   b6e96:	f001 fd8d 	bl	b89b4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b6e9a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6e9e:	2101      	movs	r1, #1
   b6ea0:	b280      	uxth	r0, r0
   b6ea2:	f001 fd98 	bl	b89d6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6ea6:	2001      	movs	r0, #1
   b6ea8:	f001 f9ee 	bl	b8288 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6eac:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6eb0:	2100      	movs	r1, #0
   b6eb2:	b280      	uxth	r0, r0
   b6eb4:	f001 fd8f 	bl	b89d6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6eb8:	200a      	movs	r0, #10
   b6eba:	f001 f9e5 	bl	b8288 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b6ebe:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ec2:	2101      	movs	r1, #1
   b6ec4:	b280      	uxth	r0, r0
   b6ec6:	f001 fd86 	bl	b89d6 <digitalWrite>
  TRANSACTION_START
   b6eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ecc:	2800      	cmp	r0, #0
   b6ece:	d074      	beq.n	b6fba <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b6ed0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6ed2:	f001 fc29 	bl	b8728 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6ed6:	2204      	movs	r2, #4
   b6ed8:	4957      	ldr	r1, [pc, #348]	; (b7038 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b6eda:	4620      	mov	r0, r4
   b6edc:	f7ff ff11 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6ee0:	8961      	ldrh	r1, [r4, #10]
   b6ee2:	3901      	subs	r1, #1
   b6ee4:	b2c9      	uxtb	r1, r1
   b6ee6:	4620      	mov	r0, r4
   b6ee8:	f7ff fe9c 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6eec:	4953      	ldr	r1, [pc, #332]	; (b703c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6eee:	2204      	movs	r2, #4
   b6ef0:	4620      	mov	r0, r4
   b6ef2:	f7ff ff06 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6ef6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6efa:	2b01      	cmp	r3, #1
   b6efc:	bf0c      	ite	eq
   b6efe:	2110      	moveq	r1, #16
   b6f00:	2114      	movne	r1, #20
   b6f02:	4620      	mov	r0, r4
   b6f04:	f7ff fe8e 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6f08:	2204      	movs	r2, #4
   b6f0a:	494d      	ldr	r1, [pc, #308]	; (b7040 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	f7ff fef8 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6f12:	68a3      	ldr	r3, [r4, #8]
   b6f14:	4a4b      	ldr	r2, [pc, #300]	; (b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b6f16:	4293      	cmp	r3, r2
   b6f18:	d15c      	bne.n	b6fd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6f1a:	494b      	ldr	r1, [pc, #300]	; (b7048 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b6f1c:	2204      	movs	r2, #4
   b6f1e:	4620      	mov	r0, r4
   b6f20:	f7ff feef 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6f24:	21d9      	movs	r1, #217	; 0xd9
   b6f26:	4620      	mov	r0, r4
   b6f28:	f7ff fe7c 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6f2c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6f30:	2b01      	cmp	r3, #1
   b6f32:	bf0c      	ite	eq
   b6f34:	2122      	moveq	r1, #34	; 0x22
   b6f36:	21f1      	movne	r1, #241	; 0xf1
   b6f38:	4620      	mov	r0, r4
   b6f3a:	f7ff fe73 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6f3e:	4620      	mov	r0, r4
   b6f40:	4942      	ldr	r1, [pc, #264]	; (b704c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6f42:	2206      	movs	r2, #6
   b6f44:	f7ff fedd 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6f48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f4a:	2800      	cmp	r0, #0
   b6f4c:	d063      	beq.n	b7016 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b6f4e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6f50:	f001 fbea 	bl	b8728 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6f54:	2001      	movs	r0, #1
   b6f56:	e773      	b.n	b6e40 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6f58:	b26d      	sxtb	r5, r5
   b6f5a:	e78e      	b.n	b6e7a <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6f5c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6f60:	2101      	movs	r1, #1
   b6f62:	b280      	uxth	r0, r0
   b6f64:	f001 fd26 	bl	b89b4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6f68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f6c:	2101      	movs	r1, #1
   b6f6e:	b280      	uxth	r0, r0
   b6f70:	f001 fd20 	bl	b89b4 <pinMode>
    SSD1306_DESELECT
   b6f74:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6f78:	2101      	movs	r1, #1
   b6f7a:	b280      	uxth	r0, r0
   b6f7c:	f001 fd2b 	bl	b89d6 <digitalWrite>
    if(spi) { // Hardware SPI
   b6f80:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6f82:	b13d      	cbz	r5, b6f94 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b6f84:	f1b8 0f00 	cmp.w	r8, #0
   b6f88:	f43f af7e 	beq.w	b6e88 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6f8c:	4628      	mov	r0, r5
   b6f8e:	f000 fef7 	bl	b7d80 <_ZN8SPIClass5beginEv>
   b6f92:	e779      	b.n	b6e88 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6f94:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6f98:	2101      	movs	r1, #1
   b6f9a:	b280      	uxth	r0, r0
   b6f9c:	f001 fd0a 	bl	b89b4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b6fa0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6fa4:	2101      	movs	r1, #1
   b6fa6:	b280      	uxth	r0, r0
   b6fa8:	f001 fd04 	bl	b89b4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6fac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6fb0:	4629      	mov	r1, r5
   b6fb2:	b280      	uxth	r0, r0
   b6fb4:	f001 fd0f 	bl	b89d6 <digitalWrite>
   b6fb8:	e766      	b.n	b6e88 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b6fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6fbc:	b118      	cbz	r0, b6fc6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6fbe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6fc2:	f000 ff0b 	bl	b7ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6fc6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6fca:	2100      	movs	r1, #0
   b6fcc:	b280      	uxth	r0, r0
   b6fce:	f001 fd02 	bl	b89d6 <digitalWrite>
   b6fd2:	e780      	b.n	b6ed6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6fd4:	4a1e      	ldr	r2, [pc, #120]	; (b7050 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6fd6:	4293      	cmp	r3, r2
   b6fd8:	d10e      	bne.n	b6ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6fda:	491e      	ldr	r1, [pc, #120]	; (b7054 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6fdc:	2203      	movs	r2, #3
   b6fde:	4620      	mov	r0, r4
   b6fe0:	f7ff fe8f 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6fe4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6fe8:	2b01      	cmp	r3, #1
   b6fea:	bf0c      	ite	eq
   b6fec:	219f      	moveq	r1, #159	; 0x9f
   b6fee:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	f7ff fe17 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6ff6:	e795      	b.n	b6f24 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6ff8:	4a17      	ldr	r2, [pc, #92]	; (b7058 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b6ffa:	4293      	cmp	r3, r2
   b6ffc:	d192      	bne.n	b6f24 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b6ffe:	4917      	ldr	r1, [pc, #92]	; (b705c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7000:	2203      	movs	r2, #3
   b7002:	4620      	mov	r0, r4
   b7004:	f7ff fe7d 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7008:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b700c:	2b01      	cmp	r3, #1
   b700e:	bf0c      	ite	eq
   b7010:	2110      	moveq	r1, #16
   b7012:	21af      	movne	r1, #175	; 0xaf
   b7014:	e7ec      	b.n	b6ff0 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b7016:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b701a:	2101      	movs	r1, #1
   b701c:	b280      	uxth	r0, r0
   b701e:	f001 fcda 	bl	b89d6 <digitalWrite>
   b7022:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7024:	2800      	cmp	r0, #0
   b7026:	d095      	beq.n	b6f54 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b7028:	f000 febe 	bl	b7da8 <_ZN8SPIClass14endTransactionEv>
   b702c:	e792      	b.n	b6f54 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b702e:	bf00      	nop
   b7030:	000ba4ac 	.word	0x000ba4ac
   b7034:	000ba68c 	.word	0x000ba68c
   b7038:	000baaf4 	.word	0x000baaf4
   b703c:	000baaf8 	.word	0x000baaf8
   b7040:	000baafc 	.word	0x000baafc
   b7044:	00200080 	.word	0x00200080
   b7048:	000bab06 	.word	0x000bab06
   b704c:	000bab00 	.word	0x000bab00
   b7050:	00400080 	.word	0x00400080
   b7054:	000bab0a 	.word	0x000bab0a
   b7058:	00100060 	.word	0x00100060
   b705c:	000bab0d 	.word	0x000bab0d

000b7060 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7060:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b7062:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7064:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b7068:	db3d      	blt.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b706a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b706e:	4294      	cmp	r4, r2
   b7070:	dd39      	ble.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b7072:	2900      	cmp	r1, #0
      w += x;
   b7074:	bfbe      	ittt	lt
   b7076:	185b      	addlt	r3, r3, r1
   b7078:	b21b      	sxthlt	r3, r3
      x  = 0;
   b707a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b707c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b7080:	18ce      	adds	r6, r1, r3
   b7082:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b7084:	bfc4      	itt	gt
   b7086:	1a63      	subgt	r3, r4, r1
   b7088:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b708a:	2b00      	cmp	r3, #0
   b708c:	dd2b      	ble.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b708e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7090:	10d6      	asrs	r6, r2, #3
   b7092:	fb14 1106 	smlabb	r1, r4, r6, r1
   b7096:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b7098:	f002 0007 	and.w	r0, r2, #7
   b709c:	2201      	movs	r2, #1
   b709e:	4082      	lsls	r2, r0
      switch(color) {
   b70a0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b70a2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b70a4:	d016      	beq.n	b70d4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b70a6:	2d02      	cmp	r5, #2
   b70a8:	d00b      	beq.n	b70c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b70aa:	b9e5      	cbnz	r5, b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b70ac:	43d2      	mvns	r2, r2
   b70ae:	b2d2      	uxtb	r2, r2
   b70b0:	440b      	add	r3, r1
   b70b2:	4299      	cmp	r1, r3
   b70b4:	d017      	beq.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b70b6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b70ba:	4010      	ands	r0, r2
   b70bc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b70c0:	e7f7      	b.n	b70b2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b70c2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b70c4:	4299      	cmp	r1, r3
   b70c6:	d00e      	beq.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b70c8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b70cc:	4050      	eors	r0, r2
   b70ce:	f801 0c01 	strb.w	r0, [r1, #-1]
   b70d2:	e7f7      	b.n	b70c4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b70d4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b70d6:	4299      	cmp	r1, r3
   b70d8:	d005      	beq.n	b70e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b70da:	f811 0b01 	ldrb.w	r0, [r1], #1
   b70de:	4310      	orrs	r0, r2
   b70e0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b70e4:	e7f7      	b.n	b70d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b70e6:	bd70      	pop	{r4, r5, r6, pc}

000b70e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b70e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b70ea:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b70ec:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b70f0:	db76      	blt.n	b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b70f2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b70f6:	42b1      	cmp	r1, r6
   b70f8:	da72      	bge.n	b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b70fa:	2a00      	cmp	r2, #0
      __h += __y;
   b70fc:	bfbe      	ittt	lt
   b70fe:	189b      	addlt	r3, r3, r2
   b7100:	b21b      	sxthlt	r3, r3
      __y = 0;
   b7102:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7104:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7108:	18d7      	adds	r7, r2, r3
   b710a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b710c:	bfc4      	itt	gt
   b710e:	1aa3      	subgt	r3, r4, r2
   b7110:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b7112:	2b00      	cmp	r3, #0
   b7114:	dd64      	ble.n	b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7116:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b711a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b711c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b7120:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b7124:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7126:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b712a:	d023      	beq.n	b7174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b712c:	f1c2 0208 	rsb	r2, r2, #8
   b7130:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7132:	492d      	ldr	r1, [pc, #180]	; (b71e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7134:	4293      	cmp	r3, r2
   b7136:	bf3c      	itt	cc
   b7138:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b713c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7140:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7142:	bf3c      	itt	cc
   b7144:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b7148:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b714c:	2d01      	cmp	r5, #1
   b714e:	d007      	beq.n	b7160 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b7150:	2d02      	cmp	r5, #2
   b7152:	d02e      	beq.n	b71b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b7154:	b94d      	cbnz	r5, b716a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b7156:	f817 c006 	ldrb.w	ip, [r7, r6]
   b715a:	ea2c 0101 	bic.w	r1, ip, r1
   b715e:	e003      	b.n	b7168 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b7160:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7164:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b7168:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b716a:	4293      	cmp	r3, r2
   b716c:	d338      	bcc.n	b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b716e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b7172:	440c      	add	r4, r1
        h -= mod;
   b7174:	1a9a      	subs	r2, r3, r2
   b7176:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b7178:	2a07      	cmp	r2, #7
   b717a:	d90e      	bls.n	b719a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b717c:	2d02      	cmp	r5, #2
   b717e:	d11d      	bne.n	b71bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b7180:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b7182:	7821      	ldrb	r1, [r4, #0]
   b7184:	43c9      	mvns	r1, r1
   b7186:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b7188:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b718a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b718e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b7190:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b7192:	440c      	add	r4, r1
            } while(h >= 8);
   b7194:	d8f5      	bhi.n	b7182 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b7196:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b719a:	b30a      	cbz	r2, b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b719c:	4b13      	ldr	r3, [pc, #76]	; (b71ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b719e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b71a0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b71a2:	d01a      	beq.n	b71da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b71a4:	2d02      	cmp	r5, #2
   b71a6:	d01c      	beq.n	b71e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b71a8:	b9d5      	cbnz	r5, b71e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b71aa:	7822      	ldrb	r2, [r4, #0]
   b71ac:	ea22 0303 	bic.w	r3, r2, r3
   b71b0:	e015      	b.n	b71de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b71b2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b71b6:	ea81 010c 	eor.w	r1, r1, ip
   b71ba:	e7d5      	b.n	b7168 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b71bc:	1e29      	subs	r1, r5, #0
   b71be:	bf18      	it	ne
   b71c0:	2101      	movne	r1, #1
   b71c2:	4249      	negs	r1, r1
   b71c4:	b2c9      	uxtb	r1, r1
   b71c6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b71c8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b71ca:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b71cc:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b71d0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b71d2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b71d4:	4434      	add	r4, r6
            } while(h >= 8);
   b71d6:	d8f7      	bhi.n	b71c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b71d8:	e7dd      	b.n	b7196 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b71da:	7822      	ldrb	r2, [r4, #0]
   b71dc:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b71de:	7023      	strb	r3, [r4, #0]
}
   b71e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b71e2:	7822      	ldrb	r2, [r4, #0]
   b71e4:	4053      	eors	r3, r2
   b71e6:	e7fa      	b.n	b71de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b71e8:	000baae4 	.word	0x000baae4
   b71ec:	000baaec 	.word	0x000baaec

000b71f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b71f0:	b470      	push	{r4, r5, r6}
   b71f2:	4614      	mov	r4, r2
  switch(rotation) {
   b71f4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b71f6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b71fa:	2a02      	cmp	r2, #2
   b71fc:	d00d      	beq.n	b721a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b71fe:	2a03      	cmp	r2, #3
   b7200:	d018      	beq.n	b7234 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b7202:	2a01      	cmp	r2, #1
   b7204:	d111      	bne.n	b722a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b7206:	8902      	ldrh	r2, [r0, #8]
   b7208:	43e4      	mvns	r4, r4
   b720a:	4414      	add	r4, r2
   b720c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b720e:	9603      	str	r6, [sp, #12]
   b7210:	460a      	mov	r2, r1
   b7212:	4621      	mov	r1, r4
}
   b7214:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7216:	f7ff bf67 	b.w	b70e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b721a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b721c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b721e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b7220:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b7222:	4414      	add	r4, r2
    x -= (w-1);
   b7224:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b7226:	b224      	sxth	r4, r4
    x -= (w-1);
   b7228:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b722a:	9603      	str	r6, [sp, #12]
   b722c:	4622      	mov	r2, r4
}
   b722e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b7230:	f7ff bf16 	b.w	b7060 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b7234:	8945      	ldrh	r5, [r0, #10]
   b7236:	4419      	add	r1, r3
   b7238:	1a69      	subs	r1, r5, r1
   b723a:	b209      	sxth	r1, r1
    break;
   b723c:	e7e7      	b.n	b720e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b723e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b723e:	b430      	push	{r4, r5}
   b7240:	4614      	mov	r4, r2
  switch(rotation) {
   b7242:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7244:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b7248:	2a02      	cmp	r2, #2
   b724a:	d00d      	beq.n	b7268 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b724c:	2a03      	cmp	r2, #3
   b724e:	d018      	beq.n	b7282 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b7250:	2a01      	cmp	r2, #1
   b7252:	d111      	bne.n	b7278 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b7254:	18e2      	adds	r2, r4, r3
   b7256:	8904      	ldrh	r4, [r0, #8]
   b7258:	1aa4      	subs	r4, r4, r2
   b725a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b725c:	9502      	str	r5, [sp, #8]
   b725e:	460a      	mov	r2, r1
   b7260:	4621      	mov	r1, r4
}
   b7262:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b7264:	f7ff befc 	b.w	b7060 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b7268:	8902      	ldrh	r2, [r0, #8]
   b726a:	43c9      	mvns	r1, r1
   b726c:	4411      	add	r1, r2
    y -= (h-1);
   b726e:	18e2      	adds	r2, r4, r3
   b7270:	8944      	ldrh	r4, [r0, #10]
   b7272:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b7274:	b209      	sxth	r1, r1
    y -= (h-1);
   b7276:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b7278:	9502      	str	r5, [sp, #8]
   b727a:	4622      	mov	r2, r4
}
   b727c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b727e:	f7ff bf33 	b.w	b70e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b7282:	8942      	ldrh	r2, [r0, #10]
   b7284:	43c9      	mvns	r1, r1
   b7286:	4411      	add	r1, r2
   b7288:	b209      	sxth	r1, r1
    break;
   b728a:	e7e7      	b.n	b725c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b728c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b728c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7290:	4604      	mov	r4, r0
  TRANSACTION_START
   b7292:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7294:	2800      	cmp	r0, #0
   b7296:	d042      	beq.n	b731e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b7298:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b729a:	f001 fa45 	bl	b8728 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b729e:	4947      	ldr	r1, [pc, #284]	; (b73bc <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b72a0:	2205      	movs	r2, #5
   b72a2:	4620      	mov	r0, r4
   b72a4:	f7ff fd2d 	bl	b6d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b72a8:	8921      	ldrh	r1, [r4, #8]
   b72aa:	3901      	subs	r1, #1
   b72ac:	4620      	mov	r0, r4
   b72ae:	b2c9      	uxtb	r1, r1
   b72b0:	f7ff fcb8 	bl	b6c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b72b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b72b8:	1dde      	adds	r6, r3, #7
   b72ba:	bf48      	it	mi
   b72bc:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b72c0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b72c4:	8923      	ldrh	r3, [r4, #8]
   b72c6:	10f6      	asrs	r6, r6, #3
   b72c8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b72cc:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b72d0:	2800      	cmp	r0, #0
   b72d2:	d03a      	beq.n	b734a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b72d4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b72d8:	f001 fa34 	bl	b8744 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b72dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b72de:	6803      	ldr	r3, [r0, #0]
   b72e0:	2140      	movs	r1, #64	; 0x40
   b72e2:	689b      	ldr	r3, [r3, #8]
   b72e4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b72e6:	2701      	movs	r7, #1
    while(count--) {
   b72e8:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b72ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b72ec:	d024      	beq.n	b7338 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b72ee:	2f1f      	cmp	r7, #31
   b72f0:	d90c      	bls.n	b730c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b72f2:	f001 fa2e 	bl	b8752 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b72f6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b72fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b72fc:	f001 fa22 	bl	b8744 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b7300:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7302:	6803      	ldr	r3, [r0, #0]
   b7304:	2140      	movs	r1, #64	; 0x40
   b7306:	689b      	ldr	r3, [r3, #8]
   b7308:	4798      	blx	r3
        bytesOut = 1;
   b730a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b730c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b730e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7312:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7314:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b7316:	689b      	ldr	r3, [r3, #8]
   b7318:	4798      	blx	r3
      bytesOut++;
   b731a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b731c:	e7e4      	b.n	b72e8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b731e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7320:	b118      	cbz	r0, b732a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b7322:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7326:	f000 fd59 	bl	b7ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b732a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b732e:	2100      	movs	r1, #0
   b7330:	b280      	uxth	r0, r0
   b7332:	f001 fb50 	bl	b89d6 <digitalWrite>
   b7336:	e7b2      	b.n	b729e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b7338:	f001 fa0b 	bl	b8752 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b733c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b733e:	b378      	cbz	r0, b73a0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b7340:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7342:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7346:	f001 b9ef 	b.w	b8728 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b734a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b734e:	2101      	movs	r1, #1
   b7350:	b280      	uxth	r0, r0
   b7352:	f001 fb40 	bl	b89d6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b7356:	42ae      	cmp	r6, r5
   b7358:	d0f0      	beq.n	b733c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b735a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b735c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b7360:	b118      	cbz	r0, b736a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b7362:	4649      	mov	r1, r9
   b7364:	f000 fda8 	bl	b7eb8 <_ZN8SPIClass8transferEh>
   b7368:	e7f5      	b.n	b7356 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b736a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b736c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7370:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7374:	ea09 0108 	and.w	r1, r9, r8
   b7378:	b280      	uxth	r0, r0
   b737a:	f001 fb2c 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b737e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7382:	2101      	movs	r1, #1
   b7384:	b280      	uxth	r0, r0
   b7386:	f001 fb26 	bl	b89d6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b738a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b738e:	2100      	movs	r1, #0
   b7390:	b280      	uxth	r0, r0
   b7392:	f001 fb20 	bl	b89d6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7396:	3f01      	subs	r7, #1
   b7398:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b739c:	d1e8      	bne.n	b7370 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b739e:	e7da      	b.n	b7356 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b73a0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b73a4:	2101      	movs	r1, #1
   b73a6:	b280      	uxth	r0, r0
   b73a8:	f001 fb15 	bl	b89d6 <digitalWrite>
   b73ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b73ae:	b118      	cbz	r0, b73b8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b73b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b73b4:	f000 bcf8 	b.w	b7da8 <_ZN8SPIClass14endTransactionEv>
}
   b73b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b73bc:	000bab10 	.word	0x000bab10

000b73c0 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b73c0:	b510      	push	{r4, lr}
   b73c2:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b73c4:	7001      	strb	r1, [r0, #0]
   b73c6:	7042      	strb	r2, [r0, #1]
   b73c8:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b73ca:	2101      	movs	r1, #1
   b73cc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b73d0:	f002 f8a6 	bl	b9520 <calloc>
   b73d4:	6060      	str	r0, [r4, #4]
}
   b73d6:	4620      	mov	r0, r4
   b73d8:	bd10      	pop	{r4, pc}

000b73da <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b73da:	b510      	push	{r4, lr}
   b73dc:	4604      	mov	r4, r0
{
    free(_led_state);
   b73de:	6840      	ldr	r0, [r0, #4]
   b73e0:	f000 fc48 	bl	b7c74 <free>
}
   b73e4:	4620      	mov	r0, r4
   b73e6:	bd10      	pop	{r4, pc}

000b73e8 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b73e8:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b73ea:	2100      	movs	r1, #0
{
   b73ec:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b73ee:	7800      	ldrb	r0, [r0, #0]
   b73f0:	f001 faf1 	bl	b89d6 <digitalWrite>
   b73f4:	2014      	movs	r0, #20
   b73f6:	f000 fa51 	bl	b789c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b73fa:	7820      	ldrb	r0, [r4, #0]
   b73fc:	2101      	movs	r1, #1
   b73fe:	f001 faea 	bl	b89d6 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b7402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7406:	2014      	movs	r0, #20
   b7408:	f000 ba48 	b.w	b789c <HAL_Delay_Microseconds>

000b740c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b740c:	b570      	push	{r4, r5, r6, lr}
   b740e:	4606      	mov	r6, r0
   b7410:	460c      	mov	r4, r1
   b7412:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b7414:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b7416:	bf4c      	ite	mi
   b7418:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b741a:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b741c:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b741e:	f001 fada 	bl	b89d6 <digitalWrite>
    for (byte i=0; i<8; i++)
   b7422:	3d01      	subs	r5, #1
        clk();
   b7424:	4630      	mov	r0, r6
   b7426:	f7ff ffdf 	bl	b73e8 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b742a:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b742c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b7430:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b7432:	d1ef      	bne.n	b7414 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b7434:	bd70      	pop	{r4, r5, r6, pc}

000b7436 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b7436:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b7438:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b743c:	461e      	mov	r6, r3
   b743e:	460c      	mov	r4, r1
   b7440:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b7442:	bf14      	ite	ne
   b7444:	21c0      	movne	r1, #192	; 0xc0
   b7446:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b7448:	0673      	lsls	r3, r6, #25
   b744a:	bf58      	it	pl
   b744c:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b7450:	062a      	lsls	r2, r5, #24
   b7452:	bf58      	it	pl
   b7454:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b7458:	066b      	lsls	r3, r5, #25
   b745a:	bf58      	it	pl
   b745c:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b7460:	0622      	lsls	r2, r4, #24
   b7462:	bf58      	it	pl
   b7464:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b7468:	0663      	lsls	r3, r4, #25
   b746a:	bf58      	it	pl
   b746c:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b7470:	9001      	str	r0, [sp, #4]
   b7472:	f7ff ffcb 	bl	b740c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b7476:	9801      	ldr	r0, [sp, #4]
   b7478:	4631      	mov	r1, r6
   b747a:	f7ff ffc7 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b747e:	9801      	ldr	r0, [sp, #4]
   b7480:	4629      	mov	r1, r5
   b7482:	f7ff ffc3 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b7486:	9801      	ldr	r0, [sp, #4]
   b7488:	4621      	mov	r1, r4
}
   b748a:	b002      	add	sp, #8
   b748c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b7490:	f7ff bfbc 	b.w	b740c <_ZN12ChainableLED8sendByteEh>

000b7494 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b7494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7498:	4604      	mov	r4, r0
   b749a:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b749c:	2100      	movs	r1, #0
{
   b749e:	4690      	mov	r8, r2
   b74a0:	4699      	mov	r9, r3
   b74a2:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b74a6:	f7ff ffb1 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b74aa:	2100      	movs	r1, #0
   b74ac:	4620      	mov	r0, r4
   b74ae:	f7ff ffad 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b74b2:	2100      	movs	r1, #0
   b74b4:	4620      	mov	r0, r4
   b74b6:	f7ff ffa9 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b74ba:	2100      	movs	r1, #0
   b74bc:	4620      	mov	r0, r4
   b74be:	f7ff ffa5 	bl	b740c <_ZN12ChainableLED8sendByteEh>
   b74c2:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b74c4:	78a3      	ldrb	r3, [r4, #2]
   b74c6:	b2f5      	uxtb	r5, r6
   b74c8:	42ab      	cmp	r3, r5
   b74ca:	d919      	bls.n	b7500 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b74cc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b74d0:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b74d2:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b74d6:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b74da:	d108      	bne.n	b74ee <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b74dc:	6861      	ldr	r1, [r4, #4]
   b74de:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b74e2:	6861      	ldr	r1, [r4, #4]
   b74e4:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b74e8:	6861      	ldr	r1, [r4, #4]
   b74ea:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b74ee:	6861      	ldr	r1, [r4, #4]
   b74f0:	5ccb      	ldrb	r3, [r1, r3]
   b74f2:	5c8a      	ldrb	r2, [r1, r2]
   b74f4:	5c09      	ldrb	r1, [r1, r0]
   b74f6:	4620      	mov	r0, r4
   b74f8:	f7ff ff9d 	bl	b7436 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b74fc:	3601      	adds	r6, #1
   b74fe:	e7e1      	b.n	b74c4 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b7500:	4620      	mov	r0, r4
   b7502:	2100      	movs	r1, #0
   b7504:	f7ff ff82 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7508:	4620      	mov	r0, r4
   b750a:	2100      	movs	r1, #0
   b750c:	f7ff ff7e 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7510:	4620      	mov	r0, r4
   b7512:	2100      	movs	r1, #0
   b7514:	f7ff ff7a 	bl	b740c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7518:	4620      	mov	r0, r4
   b751a:	2100      	movs	r1, #0
}
   b751c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b7520:	f7ff bf74 	b.w	b740c <_ZN12ChainableLED8sendByteEh>

000b7524 <_ZN12ChainableLED4initEv>:
{
   b7524:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7526:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b7528:	2101      	movs	r1, #1
   b752a:	7800      	ldrb	r0, [r0, #0]
   b752c:	f001 fa42 	bl	b89b4 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b7530:	7860      	ldrb	r0, [r4, #1]
   b7532:	2101      	movs	r1, #1
   b7534:	f001 fa3e 	bl	b89b4 <pinMode>
   b7538:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b753a:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b753c:	78a3      	ldrb	r3, [r4, #2]
   b753e:	b2e9      	uxtb	r1, r5
   b7540:	428b      	cmp	r3, r1
   b7542:	d907      	bls.n	b7554 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b7544:	2300      	movs	r3, #0
   b7546:	9600      	str	r6, [sp, #0]
   b7548:	461a      	mov	r2, r3
   b754a:	4620      	mov	r0, r4
   b754c:	f7ff ffa2 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b7550:	3501      	adds	r5, #1
   b7552:	e7f3      	b.n	b753c <_ZN12ChainableLED4initEv+0x18>
}
   b7554:	b002      	add	sp, #8
   b7556:	bd70      	pop	{r4, r5, r6, pc}

000b7558 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   b7558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   b755a:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   b755e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b7562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7566:	ed2d 8b04 	vpush	{d8-d9}
   b756a:	eef0 8a41 	vmov.f32	s17, s2
        t += 1.0;
   b756e:	bf48      	it	mi
   b7570:	ee71 8a27 	vaddmi.f32	s17, s2, s15
{
   b7574:	eeb0 9a40 	vmov.f32	s18, s0
    if(t > 1.0)
   b7578:	eef4 8ae7 	vcmpe.f32	s17, s15
   b757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   b7580:	bfc8      	it	gt
   b7582:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
{
   b7586:	eeb0 8a60 	vmov.f32	s16, s1
    if(t < 1.0/6.0)
   b758a:	ee18 0a90 	vmov	r0, s17
   b758e:	f001 fc5f 	bl	b8e50 <__aeabi_f2d>
   b7592:	a32e      	add	r3, pc, #184	; (adr r3, b764c <_Z7hue2rgbfff+0xf4>)
   b7594:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7598:	4604      	mov	r4, r0
   b759a:	460d      	mov	r5, r1
   b759c:	f001 ff22 	bl	b93e4 <__aeabi_dcmplt>
   b75a0:	b310      	cbz	r0, b75e8 <_Z7hue2rgbfff+0x90>
        return p + (q - p) * 6.0 * t;
   b75a2:	ee78 7a49 	vsub.f32	s15, s16, s18
   b75a6:	ee17 0a90 	vmov	r0, s15
   b75aa:	f001 fc51 	bl	b8e50 <__aeabi_f2d>
   b75ae:	4b26      	ldr	r3, [pc, #152]	; (b7648 <_Z7hue2rgbfff+0xf0>)
   b75b0:	2200      	movs	r2, #0
   b75b2:	f001 fca5 	bl	b8f00 <__aeabi_dmul>
   b75b6:	4622      	mov	r2, r4
   b75b8:	462b      	mov	r3, r5
    if(t < 1.0/2.0)
        return q;
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b75ba:	f001 fca1 	bl	b8f00 <__aeabi_dmul>
   b75be:	4604      	mov	r4, r0
   b75c0:	ee19 0a10 	vmov	r0, s18
   b75c4:	460d      	mov	r5, r1
   b75c6:	f001 fc43 	bl	b8e50 <__aeabi_f2d>
   b75ca:	4602      	mov	r2, r0
   b75cc:	460b      	mov	r3, r1
   b75ce:	4620      	mov	r0, r4
   b75d0:	4629      	mov	r1, r5
   b75d2:	f001 fadf 	bl	b8b94 <__adddf3>
   b75d6:	f001 ff4d 	bl	b9474 <__aeabi_d2f>
   b75da:	ee08 0a10 	vmov	s16, r0

    return p;
}
   b75de:	eeb0 0a48 	vmov.f32	s0, s16
   b75e2:	ecbd 8b04 	vpop	{d8-d9}
   b75e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(t < 1.0/2.0)
   b75e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b75ec:	eef4 8ae7 	vcmpe.f32	s17, s15
   b75f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75f4:	d4f3      	bmi.n	b75de <_Z7hue2rgbfff+0x86>
    if(t < 2.0/3.0)
   b75f6:	a312      	add	r3, pc, #72	; (adr r3, b7640 <_Z7hue2rgbfff+0xe8>)
   b75f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75fc:	4620      	mov	r0, r4
   b75fe:	4629      	mov	r1, r5
   b7600:	f001 fef0 	bl	b93e4 <__aeabi_dcmplt>
   b7604:	b1b8      	cbz	r0, b7636 <_Z7hue2rgbfff+0xde>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b7606:	ee78 7a49 	vsub.f32	s15, s16, s18
   b760a:	ee17 0a90 	vmov	r0, s15
   b760e:	f001 fc1f 	bl	b8e50 <__aeabi_f2d>
   b7612:	4622      	mov	r2, r4
   b7614:	4606      	mov	r6, r0
   b7616:	460f      	mov	r7, r1
   b7618:	462b      	mov	r3, r5
   b761a:	a109      	add	r1, pc, #36	; (adr r1, b7640 <_Z7hue2rgbfff+0xe8>)
   b761c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7620:	f001 fab6 	bl	b8b90 <__aeabi_dsub>
   b7624:	4602      	mov	r2, r0
   b7626:	460b      	mov	r3, r1
   b7628:	4630      	mov	r0, r6
   b762a:	4639      	mov	r1, r7
   b762c:	f001 fc68 	bl	b8f00 <__aeabi_dmul>
   b7630:	4b05      	ldr	r3, [pc, #20]	; (b7648 <_Z7hue2rgbfff+0xf0>)
   b7632:	2200      	movs	r2, #0
   b7634:	e7c1      	b.n	b75ba <_Z7hue2rgbfff+0x62>
    return p;
   b7636:	eeb0 8a49 	vmov.f32	s16, s18
   b763a:	e7d0      	b.n	b75de <_Z7hue2rgbfff+0x86>
   b763c:	f3af 8000 	nop.w
   b7640:	55555555 	.word	0x55555555
   b7644:	3fe55555 	.word	0x3fe55555
   b7648:	40180000 	.word	0x40180000
   b764c:	55555555 	.word	0x55555555
   b7650:	3fc55555 	.word	0x3fc55555
   b7654:	00000000 	.word	0x00000000

000b7658 <_ZN12ChainableLED11setColorHSBEhfff>:
{
   b7658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b765c:	ed2d 8b04 	vpush	{d8-d9}
    if(saturation == 0.0)
   b7660:	eef5 0a40 	vcmp.f32	s1, #0.0
   b7664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7668:	b083      	sub	sp, #12
   b766a:	4680      	mov	r8, r0
   b766c:	4689      	mov	r9, r1
   b766e:	eef0 9a40 	vmov.f32	s19, s0
   b7672:	eeb0 9a60 	vmov.f32	s18, s1
   b7676:	eeb0 8a41 	vmov.f32	s16, s2
    if(saturation == 0.0)
   b767a:	f000 809d 	beq.w	b77b8 <_ZN12ChainableLED11setColorHSBEhfff+0x160>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b767e:	ee11 0a10 	vmov	r0, s2
   b7682:	f001 fbe5 	bl	b8e50 <__aeabi_f2d>
        float q = brightness < 0.5 ?
   b7686:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b768a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7692:	4606      	mov	r6, r0
   b7694:	460f      	mov	r7, r1
   b7696:	f140 808a 	bpl.w	b77ae <_ZN12ChainableLED11setColorHSBEhfff+0x156>
   b769a:	ee19 0a10 	vmov	r0, s18
   b769e:	f001 fbd7 	bl	b8e50 <__aeabi_f2d>
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b76a2:	4b4d      	ldr	r3, [pc, #308]	; (b77d8 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   b76a4:	2200      	movs	r2, #0
   b76a6:	f001 fa75 	bl	b8b94 <__adddf3>
   b76aa:	4632      	mov	r2, r6
   b76ac:	463b      	mov	r3, r7
   b76ae:	f001 fc27 	bl	b8f00 <__aeabi_dmul>
        float q = brightness < 0.5 ?
   b76b2:	f001 fedf 	bl	b9474 <__aeabi_d2f>
   b76b6:	ee08 0a90 	vmov	s17, r0
   b76ba:	ee19 0a90 	vmov	r0, s19
   b76be:	f001 fbc7 	bl	b8e50 <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   b76c2:	4632      	mov	r2, r6
   b76c4:	4604      	mov	r4, r0
   b76c6:	463b      	mov	r3, r7
   b76c8:	460d      	mov	r5, r1
   b76ca:	4630      	mov	r0, r6
   b76cc:	4639      	mov	r1, r7
   b76ce:	f001 fa61 	bl	b8b94 <__adddf3>
   b76d2:	4606      	mov	r6, r0
   b76d4:	ee18 0a90 	vmov	r0, s17
   b76d8:	460f      	mov	r7, r1
   b76da:	f001 fbb9 	bl	b8e50 <__aeabi_f2d>
   b76de:	4602      	mov	r2, r0
   b76e0:	460b      	mov	r3, r1
   b76e2:	4630      	mov	r0, r6
   b76e4:	4639      	mov	r1, r7
   b76e6:	f001 fa53 	bl	b8b90 <__aeabi_dsub>
   b76ea:	f001 fec3 	bl	b9474 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b76ee:	a336      	add	r3, pc, #216	; (adr r3, b77c8 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b76f0:	e9d3 2300 	ldrd	r2, r3, [r3]
        float p = 2.0 * brightness - q;
   b76f4:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b76f8:	4629      	mov	r1, r5
   b76fa:	4620      	mov	r0, r4
   b76fc:	f001 fa4a 	bl	b8b94 <__adddf3>
   b7700:	f001 feb8 	bl	b9474 <__aeabi_d2f>
   b7704:	eef0 0a68 	vmov.f32	s1, s17
   b7708:	ee01 0a10 	vmov	s2, r0
   b770c:	eeb0 0a49 	vmov.f32	s0, s18
   b7710:	f7ff ff22 	bl	b7558 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   b7714:	eeb0 1a69 	vmov.f32	s2, s19
   b7718:	eef0 0a68 	vmov.f32	s1, s17
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b771c:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   b7720:	eeb0 0a49 	vmov.f32	s0, s18
   b7724:	f7ff ff18 	bl	b7558 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b7728:	a327      	add	r3, pc, #156	; (adr r3, b77c8 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b772a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b772e:	4620      	mov	r0, r4
   b7730:	4629      	mov	r1, r5
        g = hue2rgb(p, q, hue);
   b7732:	ee10 6a10 	vmov	r6, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b7736:	f001 fa2b 	bl	b8b90 <__aeabi_dsub>
   b773a:	f001 fe9b 	bl	b9474 <__aeabi_d2f>
   b773e:	eef0 0a68 	vmov.f32	s1, s17
   b7742:	ee01 0a10 	vmov	s2, r0
   b7746:	eeb0 0a49 	vmov.f32	s0, s18
   b774a:	f7ff ff05 	bl	b7558 <_Z7hue2rgbfff>
   b774e:	ee10 4a10 	vmov	r4, s0
    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   b7752:	4630      	mov	r0, r6
   b7754:	f001 fb7c 	bl	b8e50 <__aeabi_f2d>
   b7758:	a31d      	add	r3, pc, #116	; (adr r3, b77d0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b775a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b775e:	f001 fbcf 	bl	b8f00 <__aeabi_dmul>
   b7762:	f001 fe67 	bl	b9434 <__aeabi_d2uiz>
   b7766:	b2c6      	uxtb	r6, r0
   b7768:	ee18 0a10 	vmov	r0, s16
   b776c:	f001 fb70 	bl	b8e50 <__aeabi_f2d>
   b7770:	a317      	add	r3, pc, #92	; (adr r3, b77d0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b7772:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7776:	f001 fbc3 	bl	b8f00 <__aeabi_dmul>
   b777a:	f001 fe5b 	bl	b9434 <__aeabi_d2uiz>
   b777e:	b2c5      	uxtb	r5, r0
   b7780:	4620      	mov	r0, r4
   b7782:	f001 fb65 	bl	b8e50 <__aeabi_f2d>
   b7786:	a312      	add	r3, pc, #72	; (adr r3, b77d0 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b7788:	e9d3 2300 	ldrd	r2, r3, [r3]
   b778c:	f001 fbb8 	bl	b8f00 <__aeabi_dmul>
   b7790:	f001 fe50 	bl	b9434 <__aeabi_d2uiz>
   b7794:	b2c0      	uxtb	r0, r0
   b7796:	9000      	str	r0, [sp, #0]
   b7798:	4633      	mov	r3, r6
   b779a:	462a      	mov	r2, r5
   b779c:	4649      	mov	r1, r9
   b779e:	4640      	mov	r0, r8
   b77a0:	f7ff fe78 	bl	b7494 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b77a4:	b003      	add	sp, #12
   b77a6:	ecbd 8b04 	vpop	{d8-d9}
   b77aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b77ae:	ee79 8a08 	vadd.f32	s17, s18, s16
        float q = brightness < 0.5 ?
   b77b2:	eee9 8a48 	vfms.f32	s17, s18, s16
   b77b6:	e780      	b.n	b76ba <_ZN12ChainableLED11setColorHSBEhfff+0x62>
        r = g = b = brightness;
   b77b8:	ee11 4a10 	vmov	r4, s2
   b77bc:	ee11 6a10 	vmov	r6, s2
   b77c0:	e7c7      	b.n	b7752 <_ZN12ChainableLED11setColorHSBEhfff+0xfa>
   b77c2:	bf00      	nop
   b77c4:	f3af 8000 	nop.w
   b77c8:	55555555 	.word	0x55555555
   b77cc:	3fd55555 	.word	0x3fd55555
   b77d0:	00000000 	.word	0x00000000
   b77d4:	406fe000 	.word	0x406fe000
   b77d8:	3ff00000 	.word	0x3ff00000

000b77dc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b77dc:	b508      	push	{r3, lr}
   b77de:	4b02      	ldr	r3, [pc, #8]	; (b77e8 <netdb_freeaddrinfo+0xc>)
   b77e0:	681b      	ldr	r3, [r3, #0]
   b77e2:	689b      	ldr	r3, [r3, #8]
   b77e4:	9301      	str	r3, [sp, #4]
   b77e6:	bd08      	pop	{r3, pc}
   b77e8:	00030268 	.word	0x00030268

000b77ec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b77ec:	b508      	push	{r3, lr}
   b77ee:	4b02      	ldr	r3, [pc, #8]	; (b77f8 <netdb_getaddrinfo+0xc>)
   b77f0:	681b      	ldr	r3, [r3, #0]
   b77f2:	68db      	ldr	r3, [r3, #12]
   b77f4:	9301      	str	r3, [sp, #4]
   b77f6:	bd08      	pop	{r3, pc}
   b77f8:	00030268 	.word	0x00030268

000b77fc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b77fc:	b508      	push	{r3, lr}
   b77fe:	4b02      	ldr	r3, [pc, #8]	; (b7808 <HAL_Validate_Pin_Function+0xc>)
   b7800:	681b      	ldr	r3, [r3, #0]
   b7802:	685b      	ldr	r3, [r3, #4]
   b7804:	9301      	str	r3, [sp, #4]
   b7806:	bd08      	pop	{r3, pc}
   b7808:	0003022c 	.word	0x0003022c

000b780c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b780c:	b508      	push	{r3, lr}
   b780e:	4b02      	ldr	r3, [pc, #8]	; (b7818 <HAL_Pin_Mode+0xc>)
   b7810:	681b      	ldr	r3, [r3, #0]
   b7812:	689b      	ldr	r3, [r3, #8]
   b7814:	9301      	str	r3, [sp, #4]
   b7816:	bd08      	pop	{r3, pc}
   b7818:	0003022c 	.word	0x0003022c

000b781c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b781c:	b508      	push	{r3, lr}
   b781e:	4b02      	ldr	r3, [pc, #8]	; (b7828 <HAL_Get_Pin_Mode+0xc>)
   b7820:	681b      	ldr	r3, [r3, #0]
   b7822:	68db      	ldr	r3, [r3, #12]
   b7824:	9301      	str	r3, [sp, #4]
   b7826:	bd08      	pop	{r3, pc}
   b7828:	0003022c 	.word	0x0003022c

000b782c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b782c:	b508      	push	{r3, lr}
   b782e:	4b02      	ldr	r3, [pc, #8]	; (b7838 <HAL_GPIO_Write+0xc>)
   b7830:	681b      	ldr	r3, [r3, #0]
   b7832:	691b      	ldr	r3, [r3, #16]
   b7834:	9301      	str	r3, [sp, #4]
   b7836:	bd08      	pop	{r3, pc}
   b7838:	0003022c 	.word	0x0003022c

000b783c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b783c:	b508      	push	{r3, lr}
   b783e:	4b02      	ldr	r3, [pc, #8]	; (b7848 <HAL_GPIO_Read+0xc>)
   b7840:	681b      	ldr	r3, [r3, #0]
   b7842:	695b      	ldr	r3, [r3, #20]
   b7844:	9301      	str	r3, [sp, #4]
   b7846:	bd08      	pop	{r3, pc}
   b7848:	0003022c 	.word	0x0003022c

000b784c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b784c:	b508      	push	{r3, lr}
   b784e:	4b02      	ldr	r3, [pc, #8]	; (b7858 <HAL_Interrupts_Enable_All+0xc>)
   b7850:	681b      	ldr	r3, [r3, #0]
   b7852:	6a1b      	ldr	r3, [r3, #32]
   b7854:	9301      	str	r3, [sp, #4]
   b7856:	bd08      	pop	{r3, pc}
   b7858:	0003022c 	.word	0x0003022c

000b785c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b785c:	b508      	push	{r3, lr}
   b785e:	4b02      	ldr	r3, [pc, #8]	; (b7868 <HAL_Interrupts_Disable_All+0xc>)
   b7860:	681b      	ldr	r3, [r3, #0]
   b7862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7864:	9301      	str	r3, [sp, #4]
   b7866:	bd08      	pop	{r3, pc}
   b7868:	0003022c 	.word	0x0003022c

000b786c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b786c:	b508      	push	{r3, lr}
   b786e:	4b02      	ldr	r3, [pc, #8]	; (b7878 <hal_adc_read+0xc>)
   b7870:	681b      	ldr	r3, [r3, #0]
   b7872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7874:	9301      	str	r3, [sp, #4]
   b7876:	bd08      	pop	{r3, pc}
   b7878:	0003022c 	.word	0x0003022c

000b787c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b787c:	b508      	push	{r3, lr}
   b787e:	4b02      	ldr	r3, [pc, #8]	; (b7888 <HAL_Pulse_In+0xc>)
   b7880:	681b      	ldr	r3, [r3, #0]
   b7882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7884:	9301      	str	r3, [sp, #4]
   b7886:	bd08      	pop	{r3, pc}
   b7888:	0003022c 	.word	0x0003022c

000b788c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b788c:	b508      	push	{r3, lr}
   b788e:	4b02      	ldr	r3, [pc, #8]	; (b7898 <HAL_RNG_GetRandomNumber+0xc>)
   b7890:	681b      	ldr	r3, [r3, #0]
   b7892:	685b      	ldr	r3, [r3, #4]
   b7894:	9301      	str	r3, [sp, #4]
   b7896:	bd08      	pop	{r3, pc}
   b7898:	00030218 	.word	0x00030218

000b789c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b789c:	b508      	push	{r3, lr}
   b789e:	4b02      	ldr	r3, [pc, #8]	; (b78a8 <HAL_Delay_Microseconds+0xc>)
   b78a0:	681b      	ldr	r3, [r3, #0]
   b78a2:	68db      	ldr	r3, [r3, #12]
   b78a4:	9301      	str	r3, [sp, #4]
   b78a6:	bd08      	pop	{r3, pc}
   b78a8:	00030218 	.word	0x00030218

000b78ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b78ac:	b508      	push	{r3, lr}
   b78ae:	4b02      	ldr	r3, [pc, #8]	; (b78b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b78b0:	681b      	ldr	r3, [r3, #0]
   b78b2:	695b      	ldr	r3, [r3, #20]
   b78b4:	9301      	str	r3, [sp, #4]
   b78b6:	bd08      	pop	{r3, pc}
   b78b8:	00030218 	.word	0x00030218

000b78bc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b78bc:	b508      	push	{r3, lr}
   b78be:	4b02      	ldr	r3, [pc, #8]	; (b78c8 <HAL_EEPROM_Init+0xc>)
   b78c0:	681b      	ldr	r3, [r3, #0]
   b78c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78c4:	9301      	str	r3, [sp, #4]
   b78c6:	bd08      	pop	{r3, pc}
   b78c8:	00030218 	.word	0x00030218

000b78cc <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b78cc:	b508      	push	{r3, lr}
   b78ce:	4b02      	ldr	r3, [pc, #8]	; (b78d8 <HAL_EEPROM_Read+0xc>)
   b78d0:	681b      	ldr	r3, [r3, #0]
   b78d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b78d4:	9301      	str	r3, [sp, #4]
   b78d6:	bd08      	pop	{r3, pc}
   b78d8:	00030218 	.word	0x00030218

000b78dc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b78dc:	b508      	push	{r3, lr}
   b78de:	4b02      	ldr	r3, [pc, #8]	; (b78e8 <HAL_EEPROM_Put+0xc>)
   b78e0:	681b      	ldr	r3, [r3, #0]
   b78e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b78e4:	9301      	str	r3, [sp, #4]
   b78e6:	bd08      	pop	{r3, pc}
   b78e8:	00030218 	.word	0x00030218

000b78ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b78ec:	b508      	push	{r3, lr}
   b78ee:	4b02      	ldr	r3, [pc, #8]	; (b78f8 <os_mutex_recursive_create+0xc>)
   b78f0:	681b      	ldr	r3, [r3, #0]
   b78f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b78f4:	9301      	str	r3, [sp, #4]
   b78f6:	bd08      	pop	{r3, pc}
   b78f8:	00030248 	.word	0x00030248

000b78fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b78fc:	b508      	push	{r3, lr}
   b78fe:	4b02      	ldr	r3, [pc, #8]	; (b7908 <inet_inet_ntop+0xc>)
   b7900:	681b      	ldr	r3, [r3, #0]
   b7902:	695b      	ldr	r3, [r3, #20]
   b7904:	9301      	str	r3, [sp, #4]
   b7906:	bd08      	pop	{r3, pc}
   b7908:	00030264 	.word	0x00030264

000b790c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b790c:	b508      	push	{r3, lr}
   b790e:	4b02      	ldr	r3, [pc, #8]	; (b7918 <hal_usart_write+0xc>)
   b7910:	681b      	ldr	r3, [r3, #0]
   b7912:	68db      	ldr	r3, [r3, #12]
   b7914:	9301      	str	r3, [sp, #4]
   b7916:	bd08      	pop	{r3, pc}
   b7918:	0003023c 	.word	0x0003023c

000b791c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b791c:	b508      	push	{r3, lr}
   b791e:	4b02      	ldr	r3, [pc, #8]	; (b7928 <hal_usart_available+0xc>)
   b7920:	681b      	ldr	r3, [r3, #0]
   b7922:	691b      	ldr	r3, [r3, #16]
   b7924:	9301      	str	r3, [sp, #4]
   b7926:	bd08      	pop	{r3, pc}
   b7928:	0003023c 	.word	0x0003023c

000b792c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b792c:	b508      	push	{r3, lr}
   b792e:	4b02      	ldr	r3, [pc, #8]	; (b7938 <hal_usart_read+0xc>)
   b7930:	681b      	ldr	r3, [r3, #0]
   b7932:	695b      	ldr	r3, [r3, #20]
   b7934:	9301      	str	r3, [sp, #4]
   b7936:	bd08      	pop	{r3, pc}
   b7938:	0003023c 	.word	0x0003023c

000b793c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b793c:	b508      	push	{r3, lr}
   b793e:	4b02      	ldr	r3, [pc, #8]	; (b7948 <hal_usart_peek+0xc>)
   b7940:	681b      	ldr	r3, [r3, #0]
   b7942:	699b      	ldr	r3, [r3, #24]
   b7944:	9301      	str	r3, [sp, #4]
   b7946:	bd08      	pop	{r3, pc}
   b7948:	0003023c 	.word	0x0003023c

000b794c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b794c:	b508      	push	{r3, lr}
   b794e:	4b02      	ldr	r3, [pc, #8]	; (b7958 <hal_usart_flush+0xc>)
   b7950:	681b      	ldr	r3, [r3, #0]
   b7952:	69db      	ldr	r3, [r3, #28]
   b7954:	9301      	str	r3, [sp, #4]
   b7956:	bd08      	pop	{r3, pc}
   b7958:	0003023c 	.word	0x0003023c

000b795c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b795c:	b508      	push	{r3, lr}
   b795e:	4b02      	ldr	r3, [pc, #8]	; (b7968 <hal_usart_is_enabled+0xc>)
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	6a1b      	ldr	r3, [r3, #32]
   b7964:	9301      	str	r3, [sp, #4]
   b7966:	bd08      	pop	{r3, pc}
   b7968:	0003023c 	.word	0x0003023c

000b796c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b796c:	b508      	push	{r3, lr}
   b796e:	4b02      	ldr	r3, [pc, #8]	; (b7978 <hal_usart_available_data_for_write+0xc>)
   b7970:	681b      	ldr	r3, [r3, #0]
   b7972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7974:	9301      	str	r3, [sp, #4]
   b7976:	bd08      	pop	{r3, pc}
   b7978:	0003023c 	.word	0x0003023c

000b797c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b797c:	b508      	push	{r3, lr}
   b797e:	4b02      	ldr	r3, [pc, #8]	; (b7988 <hal_usart_init_ex+0xc>)
   b7980:	681b      	ldr	r3, [r3, #0]
   b7982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7984:	9301      	str	r3, [sp, #4]
   b7986:	bd08      	pop	{r3, pc}
   b7988:	0003023c 	.word	0x0003023c

000b798c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b798c:	b508      	push	{r3, lr}
   b798e:	4b02      	ldr	r3, [pc, #8]	; (b7998 <hal_i2c_set_speed+0xc>)
   b7990:	681b      	ldr	r3, [r3, #0]
   b7992:	681b      	ldr	r3, [r3, #0]
   b7994:	9301      	str	r3, [sp, #4]
   b7996:	bd08      	pop	{r3, pc}
   b7998:	00030228 	.word	0x00030228

000b799c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b799c:	b508      	push	{r3, lr}
   b799e:	4b02      	ldr	r3, [pc, #8]	; (b79a8 <hal_i2c_begin+0xc>)
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	68db      	ldr	r3, [r3, #12]
   b79a4:	9301      	str	r3, [sp, #4]
   b79a6:	bd08      	pop	{r3, pc}
   b79a8:	00030228 	.word	0x00030228

000b79ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b79ac:	b508      	push	{r3, lr}
   b79ae:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <hal_i2c_begin_transmission+0xc>)
   b79b0:	681b      	ldr	r3, [r3, #0]
   b79b2:	699b      	ldr	r3, [r3, #24]
   b79b4:	9301      	str	r3, [sp, #4]
   b79b6:	bd08      	pop	{r3, pc}
   b79b8:	00030228 	.word	0x00030228

000b79bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b79bc:	b508      	push	{r3, lr}
   b79be:	4b02      	ldr	r3, [pc, #8]	; (b79c8 <hal_i2c_end_transmission+0xc>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	69db      	ldr	r3, [r3, #28]
   b79c4:	9301      	str	r3, [sp, #4]
   b79c6:	bd08      	pop	{r3, pc}
   b79c8:	00030228 	.word	0x00030228

000b79cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b79cc:	b508      	push	{r3, lr}
   b79ce:	4b02      	ldr	r3, [pc, #8]	; (b79d8 <hal_i2c_write+0xc>)
   b79d0:	681b      	ldr	r3, [r3, #0]
   b79d2:	6a1b      	ldr	r3, [r3, #32]
   b79d4:	9301      	str	r3, [sp, #4]
   b79d6:	bd08      	pop	{r3, pc}
   b79d8:	00030228 	.word	0x00030228

000b79dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b79dc:	b508      	push	{r3, lr}
   b79de:	4b02      	ldr	r3, [pc, #8]	; (b79e8 <hal_i2c_available+0xc>)
   b79e0:	681b      	ldr	r3, [r3, #0]
   b79e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79e4:	9301      	str	r3, [sp, #4]
   b79e6:	bd08      	pop	{r3, pc}
   b79e8:	00030228 	.word	0x00030228

000b79ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b79ec:	b508      	push	{r3, lr}
   b79ee:	4b02      	ldr	r3, [pc, #8]	; (b79f8 <hal_i2c_read+0xc>)
   b79f0:	681b      	ldr	r3, [r3, #0]
   b79f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79f4:	9301      	str	r3, [sp, #4]
   b79f6:	bd08      	pop	{r3, pc}
   b79f8:	00030228 	.word	0x00030228

000b79fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b79fc:	b508      	push	{r3, lr}
   b79fe:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <hal_i2c_peek+0xc>)
   b7a00:	681b      	ldr	r3, [r3, #0]
   b7a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a04:	9301      	str	r3, [sp, #4]
   b7a06:	bd08      	pop	{r3, pc}
   b7a08:	00030228 	.word	0x00030228

000b7a0c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7a0c:	b508      	push	{r3, lr}
   b7a0e:	4b02      	ldr	r3, [pc, #8]	; (b7a18 <hal_i2c_flush+0xc>)
   b7a10:	681b      	ldr	r3, [r3, #0]
   b7a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a14:	9301      	str	r3, [sp, #4]
   b7a16:	bd08      	pop	{r3, pc}
   b7a18:	00030228 	.word	0x00030228

000b7a1c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <hal_i2c_is_enabled+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030228 	.word	0x00030228

000b7a2c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <hal_i2c_init+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030228 	.word	0x00030228

000b7a3c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <hal_spi_begin+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	681b      	ldr	r3, [r3, #0]
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	00030230 	.word	0x00030230

000b7a4c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <hal_spi_transfer+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	695b      	ldr	r3, [r3, #20]
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	00030230 	.word	0x00030230

000b7a5c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <hal_spi_init+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	69db      	ldr	r3, [r3, #28]
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	00030230 	.word	0x00030230

000b7a6c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <hal_spi_is_enabled+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	6a1b      	ldr	r3, [r3, #32]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	00030230 	.word	0x00030230

000b7a7c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <hal_spi_info+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	00030230 	.word	0x00030230

000b7a8c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <hal_spi_set_settings+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	00030230 	.word	0x00030230

000b7a9c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <hal_spi_acquire+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	00030230 	.word	0x00030230

000b7aac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <hal_spi_release+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	00030230 	.word	0x00030230

000b7abc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <HAL_USB_USART_Init+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	681b      	ldr	r3, [r3, #0]
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	0003024c 	.word	0x0003024c

000b7acc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <HAL_USB_USART_Begin+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	685b      	ldr	r3, [r3, #4]
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	0003024c 	.word	0x0003024c

000b7adc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <HAL_USB_USART_Available_Data+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	691b      	ldr	r3, [r3, #16]
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	0003024c 	.word	0x0003024c

000b7aec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	695b      	ldr	r3, [r3, #20]
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	0003024c 	.word	0x0003024c

000b7afc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <HAL_USB_USART_Receive_Data+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	699b      	ldr	r3, [r3, #24]
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	0003024c 	.word	0x0003024c

000b7b0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <HAL_USB_USART_Send_Data+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	69db      	ldr	r3, [r3, #28]
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	0003024c 	.word	0x0003024c

000b7b1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <HAL_USB_USART_Flush_Data+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	6a1b      	ldr	r3, [r3, #32]
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	0003024c 	.word	0x0003024c

000b7b2c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <panic_+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030260 	.word	0x00030260

000b7b3c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <set_system_mode+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	685b      	ldr	r3, [r3, #4]
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030220 	.word	0x00030220

000b7b4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <system_delay_ms+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	695b      	ldr	r3, [r3, #20]
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030220 	.word	0x00030220

000b7b5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b03      	ldr	r3, [pc, #12]	; (b7b6c <system_ctrl_set_app_request_handler+0x10>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7b66:	9301      	str	r3, [sp, #4]
   b7b68:	bd08      	pop	{r3, pc}
   b7b6a:	0000      	.short	0x0000
   b7b6c:	00030220 	.word	0x00030220

000b7b70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7b70:	b508      	push	{r3, lr}
   b7b72:	4b03      	ldr	r3, [pc, #12]	; (b7b80 <system_ctrl_set_result+0x10>)
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7b7a:	9301      	str	r3, [sp, #4]
   b7b7c:	bd08      	pop	{r3, pc}
   b7b7e:	0000      	.short	0x0000
   b7b80:	00030220 	.word	0x00030220

000b7b84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b84:	b508      	push	{r3, lr}
   b7b86:	4b02      	ldr	r3, [pc, #8]	; (b7b90 <network_connect+0xc>)
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	685b      	ldr	r3, [r3, #4]
   b7b8c:	9301      	str	r3, [sp, #4]
   b7b8e:	bd08      	pop	{r3, pc}
   b7b90:	00030240 	.word	0x00030240

000b7b94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7b94:	b508      	push	{r3, lr}
   b7b96:	4b02      	ldr	r3, [pc, #8]	; (b7ba0 <network_connecting+0xc>)
   b7b98:	681b      	ldr	r3, [r3, #0]
   b7b9a:	689b      	ldr	r3, [r3, #8]
   b7b9c:	9301      	str	r3, [sp, #4]
   b7b9e:	bd08      	pop	{r3, pc}
   b7ba0:	00030240 	.word	0x00030240

000b7ba4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7ba4:	b508      	push	{r3, lr}
   b7ba6:	4b02      	ldr	r3, [pc, #8]	; (b7bb0 <network_disconnect+0xc>)
   b7ba8:	681b      	ldr	r3, [r3, #0]
   b7baa:	68db      	ldr	r3, [r3, #12]
   b7bac:	9301      	str	r3, [sp, #4]
   b7bae:	bd08      	pop	{r3, pc}
   b7bb0:	00030240 	.word	0x00030240

000b7bb4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7bb4:	b508      	push	{r3, lr}
   b7bb6:	4b02      	ldr	r3, [pc, #8]	; (b7bc0 <network_ready+0xc>)
   b7bb8:	681b      	ldr	r3, [r3, #0]
   b7bba:	691b      	ldr	r3, [r3, #16]
   b7bbc:	9301      	str	r3, [sp, #4]
   b7bbe:	bd08      	pop	{r3, pc}
   b7bc0:	00030240 	.word	0x00030240

000b7bc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bc4:	b508      	push	{r3, lr}
   b7bc6:	4b02      	ldr	r3, [pc, #8]	; (b7bd0 <network_on+0xc>)
   b7bc8:	681b      	ldr	r3, [r3, #0]
   b7bca:	695b      	ldr	r3, [r3, #20]
   b7bcc:	9301      	str	r3, [sp, #4]
   b7bce:	bd08      	pop	{r3, pc}
   b7bd0:	00030240 	.word	0x00030240

000b7bd4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bd4:	b508      	push	{r3, lr}
   b7bd6:	4b02      	ldr	r3, [pc, #8]	; (b7be0 <network_off+0xc>)
   b7bd8:	681b      	ldr	r3, [r3, #0]
   b7bda:	699b      	ldr	r3, [r3, #24]
   b7bdc:	9301      	str	r3, [sp, #4]
   b7bde:	bd08      	pop	{r3, pc}
   b7be0:	00030240 	.word	0x00030240

000b7be4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7be4:	b508      	push	{r3, lr}
   b7be6:	4b02      	ldr	r3, [pc, #8]	; (b7bf0 <network_listen+0xc>)
   b7be8:	681b      	ldr	r3, [r3, #0]
   b7bea:	69db      	ldr	r3, [r3, #28]
   b7bec:	9301      	str	r3, [sp, #4]
   b7bee:	bd08      	pop	{r3, pc}
   b7bf0:	00030240 	.word	0x00030240

000b7bf4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7bf4:	b508      	push	{r3, lr}
   b7bf6:	4b02      	ldr	r3, [pc, #8]	; (b7c00 <network_listening+0xc>)
   b7bf8:	681b      	ldr	r3, [r3, #0]
   b7bfa:	6a1b      	ldr	r3, [r3, #32]
   b7bfc:	9301      	str	r3, [sp, #4]
   b7bfe:	bd08      	pop	{r3, pc}
   b7c00:	00030240 	.word	0x00030240

000b7c04 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c04:	b508      	push	{r3, lr}
   b7c06:	4b02      	ldr	r3, [pc, #8]	; (b7c10 <network_set_listen_timeout+0xc>)
   b7c08:	681b      	ldr	r3, [r3, #0]
   b7c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c0c:	9301      	str	r3, [sp, #4]
   b7c0e:	bd08      	pop	{r3, pc}
   b7c10:	00030240 	.word	0x00030240

000b7c14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c14:	b508      	push	{r3, lr}
   b7c16:	4b02      	ldr	r3, [pc, #8]	; (b7c20 <network_get_listen_timeout+0xc>)
   b7c18:	681b      	ldr	r3, [r3, #0]
   b7c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c1c:	9301      	str	r3, [sp, #4]
   b7c1e:	bd08      	pop	{r3, pc}
   b7c20:	00030240 	.word	0x00030240

000b7c24 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7c24:	b508      	push	{r3, lr}
   b7c26:	4b02      	ldr	r3, [pc, #8]	; (b7c30 <network_is_on+0xc>)
   b7c28:	681b      	ldr	r3, [r3, #0]
   b7c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c2c:	9301      	str	r3, [sp, #4]
   b7c2e:	bd08      	pop	{r3, pc}
   b7c30:	00030240 	.word	0x00030240

000b7c34 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7c34:	b508      	push	{r3, lr}
   b7c36:	4b02      	ldr	r3, [pc, #8]	; (b7c40 <network_is_off+0xc>)
   b7c38:	681b      	ldr	r3, [r3, #0]
   b7c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c3c:	9301      	str	r3, [sp, #4]
   b7c3e:	bd08      	pop	{r3, pc}
   b7c40:	00030240 	.word	0x00030240

000b7c44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7c44:	b508      	push	{r3, lr}
   b7c46:	4b02      	ldr	r3, [pc, #8]	; (b7c50 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7c48:	681b      	ldr	r3, [r3, #0]
   b7c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c4c:	9301      	str	r3, [sp, #4]
   b7c4e:	bd08      	pop	{r3, pc}
   b7c50:	00030244 	.word	0x00030244

000b7c54 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b7c54:	b508      	push	{r3, lr}
   b7c56:	4b02      	ldr	r3, [pc, #8]	; (b7c60 <spark_cloud_disconnect+0xc>)
   b7c58:	681b      	ldr	r3, [r3, #0]
   b7c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c5c:	9301      	str	r3, [sp, #4]
   b7c5e:	bd08      	pop	{r3, pc}
   b7c60:	00030244 	.word	0x00030244

000b7c64 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7c64:	b508      	push	{r3, lr}
   b7c66:	4b02      	ldr	r3, [pc, #8]	; (b7c70 <malloc+0xc>)
   b7c68:	681b      	ldr	r3, [r3, #0]
   b7c6a:	681b      	ldr	r3, [r3, #0]
   b7c6c:	9301      	str	r3, [sp, #4]
   b7c6e:	bd08      	pop	{r3, pc}
   b7c70:	0003021c 	.word	0x0003021c

000b7c74 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7c74:	b508      	push	{r3, lr}
   b7c76:	4b02      	ldr	r3, [pc, #8]	; (b7c80 <free+0xc>)
   b7c78:	681b      	ldr	r3, [r3, #0]
   b7c7a:	685b      	ldr	r3, [r3, #4]
   b7c7c:	9301      	str	r3, [sp, #4]
   b7c7e:	bd08      	pop	{r3, pc}
   b7c80:	0003021c 	.word	0x0003021c

000b7c84 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7c84:	b508      	push	{r3, lr}
   b7c86:	4b02      	ldr	r3, [pc, #8]	; (b7c90 <realloc+0xc>)
   b7c88:	681b      	ldr	r3, [r3, #0]
   b7c8a:	689b      	ldr	r3, [r3, #8]
   b7c8c:	9301      	str	r3, [sp, #4]
   b7c8e:	bd08      	pop	{r3, pc}
   b7c90:	0003021c 	.word	0x0003021c

000b7c94 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7c94:	b508      	push	{r3, lr}
   b7c96:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <snprintf+0xc>)
   b7c98:	681b      	ldr	r3, [r3, #0]
   b7c9a:	69db      	ldr	r3, [r3, #28]
   b7c9c:	9301      	str	r3, [sp, #4]
   b7c9e:	bd08      	pop	{r3, pc}
   b7ca0:	0003021c 	.word	0x0003021c

000b7ca4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7ca4:	b508      	push	{r3, lr}
   b7ca6:	4b02      	ldr	r3, [pc, #8]	; (b7cb0 <vsnprintf+0xc>)
   b7ca8:	681b      	ldr	r3, [r3, #0]
   b7caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7cac:	9301      	str	r3, [sp, #4]
   b7cae:	bd08      	pop	{r3, pc}
   b7cb0:	0003021c 	.word	0x0003021c

000b7cb4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7cb4:	b508      	push	{r3, lr}
   b7cb6:	4b02      	ldr	r3, [pc, #8]	; (b7cc0 <_malloc_r+0xc>)
   b7cb8:	681b      	ldr	r3, [r3, #0]
   b7cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7cbc:	9301      	str	r3, [sp, #4]
   b7cbe:	bd08      	pop	{r3, pc}
   b7cc0:	0003021c 	.word	0x0003021c

000b7cc4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7cc4:	b508      	push	{r3, lr}
   b7cc6:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <__assert_func+0xc>)
   b7cc8:	681b      	ldr	r3, [r3, #0]
   b7cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ccc:	9301      	str	r3, [sp, #4]
   b7cce:	bd08      	pop	{r3, pc}
   b7cd0:	0003021c 	.word	0x0003021c

000b7cd4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7cd4:	b508      	push	{r3, lr}
   b7cd6:	4b02      	ldr	r3, [pc, #8]	; (b7ce0 <newlib_impure_ptr_callback+0xc>)
   b7cd8:	681b      	ldr	r3, [r3, #0]
   b7cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7cdc:	9301      	str	r3, [sp, #4]
   b7cde:	bd08      	pop	{r3, pc}
   b7ce0:	0003021c 	.word	0x0003021c

000b7ce4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ce4:	2200      	movs	r2, #0
   b7ce6:	6840      	ldr	r0, [r0, #4]
   b7ce8:	4611      	mov	r1, r2
   b7cea:	f7ff bf83 	b.w	b7bf4 <network_listening>

000b7cee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7cee:	2200      	movs	r2, #0
   b7cf0:	6840      	ldr	r0, [r0, #4]
   b7cf2:	4611      	mov	r1, r2
   b7cf4:	f7ff bf8e 	b.w	b7c14 <network_get_listen_timeout>

000b7cf8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cf8:	6840      	ldr	r0, [r0, #4]
   b7cfa:	2200      	movs	r2, #0
   b7cfc:	f7ff bf82 	b.w	b7c04 <network_set_listen_timeout>

000b7d00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7d00:	6840      	ldr	r0, [r0, #4]
   b7d02:	2200      	movs	r2, #0
   b7d04:	f081 0101 	eor.w	r1, r1, #1
   b7d08:	f7ff bf6c 	b.w	b7be4 <network_listen>

000b7d0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d0c:	2300      	movs	r3, #0
   b7d0e:	6840      	ldr	r0, [r0, #4]
   b7d10:	461a      	mov	r2, r3
   b7d12:	4619      	mov	r1, r3
   b7d14:	f7ff bf5e 	b.w	b7bd4 <network_off>

000b7d18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d18:	2300      	movs	r3, #0
   b7d1a:	6840      	ldr	r0, [r0, #4]
   b7d1c:	461a      	mov	r2, r3
   b7d1e:	4619      	mov	r1, r3
   b7d20:	f7ff bf50 	b.w	b7bc4 <network_on>

000b7d24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7d24:	2200      	movs	r2, #0
   b7d26:	6840      	ldr	r0, [r0, #4]
   b7d28:	4611      	mov	r1, r2
   b7d2a:	f7ff bf43 	b.w	b7bb4 <network_ready>

000b7d2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d2e:	2200      	movs	r2, #0
   b7d30:	6840      	ldr	r0, [r0, #4]
   b7d32:	4611      	mov	r1, r2
   b7d34:	f7ff bf2e 	b.w	b7b94 <network_connecting>

000b7d38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d38:	6840      	ldr	r0, [r0, #4]
   b7d3a:	2200      	movs	r2, #0
   b7d3c:	2102      	movs	r1, #2
   b7d3e:	f7ff bf31 	b.w	b7ba4 <network_disconnect>

000b7d42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d42:	2300      	movs	r3, #0
   b7d44:	6840      	ldr	r0, [r0, #4]
   b7d46:	461a      	mov	r2, r3
   b7d48:	f7ff bf1c 	b.w	b7b84 <network_connect>

000b7d4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7d4c:	4b02      	ldr	r3, [pc, #8]	; (b7d58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7d4e:	2203      	movs	r2, #3
   b7d50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7d52:	4a02      	ldr	r2, [pc, #8]	; (b7d5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7d54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7d56:	4770      	bx	lr
   b7d58:	2003e6bc 	.word	0x2003e6bc
   b7d5c:	000bab20 	.word	0x000bab20

000b7d60 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7d60:	2100      	movs	r1, #0
   b7d62:	f7ff bea3 	b.w	b7aac <hal_spi_release>

000b7d66 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7d66:	2100      	movs	r1, #0
   b7d68:	f7ff be98 	b.w	b7a9c <hal_spi_acquire>

000b7d6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d6c:	b510      	push	{r4, lr}
   b7d6e:	4604      	mov	r4, r0
   b7d70:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d72:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d74:	f7ff fe72 	bl	b7a5c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d78:	2300      	movs	r3, #0
   b7d7a:	6063      	str	r3, [r4, #4]
}
   b7d7c:	4620      	mov	r0, r4
   b7d7e:	bd10      	pop	{r4, pc}

000b7d80 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7d80:	b513      	push	{r0, r1, r4, lr}
   b7d82:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7d84:	7800      	ldrb	r0, [r0, #0]
   b7d86:	f7ff ffee 	bl	b7d66 <_ZN8SPIClass4lockEv.isra.0>
   b7d8a:	b958      	cbnz	r0, b7da4 <_ZN8SPIClass5beginEv+0x24>
   b7d8c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7d8e:	9001      	str	r0, [sp, #4]
   b7d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7d94:	f7ff fe52 	bl	b7a3c <hal_spi_begin>
        unlock();
   b7d98:	9801      	ldr	r0, [sp, #4]
    }
}
   b7d9a:	b002      	add	sp, #8
   b7d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7da0:	f7ff bfde 	b.w	b7d60 <_ZN8SPIClass6unlockEv.isra.0>
   b7da4:	b002      	add	sp, #8
   b7da6:	bd10      	pop	{r4, pc}

000b7da8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7da8:	7800      	ldrb	r0, [r0, #0]
   b7daa:	f7ff bfd9 	b.w	b7d60 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7db0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7db0:	0840      	lsrs	r0, r0, #1
{
   b7db2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7db4:	6018      	str	r0, [r3, #0]
   b7db6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7db8:	6818      	ldr	r0, [r3, #0]
   b7dba:	4288      	cmp	r0, r1
   b7dbc:	b2e5      	uxtb	r5, r4
   b7dbe:	d906      	bls.n	b7dce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7dc0:	3401      	adds	r4, #1
   b7dc2:	2c08      	cmp	r4, #8
   b7dc4:	d002      	beq.n	b7dcc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7dc6:	0840      	lsrs	r0, r0, #1
   b7dc8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7dca:	e7f5      	b.n	b7db8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7dcc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7dce:	4b02      	ldr	r3, [pc, #8]	; (b7dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7dd0:	5d5b      	ldrb	r3, [r3, r5]
   b7dd2:	7013      	strb	r3, [r2, #0]
}
   b7dd4:	bd30      	pop	{r4, r5, pc}
   b7dd6:	bf00      	nop
   b7dd8:	000bab54 	.word	0x000bab54

000b7ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7de0:	4606      	mov	r6, r0
   b7de2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7de4:	7800      	ldrb	r0, [r0, #0]
{
   b7de6:	460c      	mov	r4, r1
    CHECK(lock());
   b7de8:	f7ff ffbd 	bl	b7d66 <_ZN8SPIClass4lockEv.isra.0>
   b7dec:	2800      	cmp	r0, #0
   b7dee:	db1b      	blt.n	b7e28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7df0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7df2:	2214      	movs	r2, #20
   b7df4:	2100      	movs	r1, #0
   b7df6:	a809      	add	r0, sp, #36	; 0x24
   b7df8:	f001 fba8 	bl	b954c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7dfc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7dfe:	2200      	movs	r2, #0
   b7e00:	a909      	add	r1, sp, #36	; 0x24
   b7e02:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e04:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7e08:	f7ff fe38 	bl	b7a7c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7e0c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7e10:	b113      	cbz	r3, b7e18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7e12:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7e16:	b155      	cbz	r5, b7e2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7e18:	2700      	movs	r7, #0
   b7e1a:	46b9      	mov	r9, r7
   b7e1c:	46b8      	mov	r8, r7
   b7e1e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7e20:	7923      	ldrb	r3, [r4, #4]
   b7e22:	b15d      	cbz	r5, b7e3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7e24:	b1c3      	cbz	r3, b7e58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7e26:	2000      	movs	r0, #0
}
   b7e28:	b00f      	add	sp, #60	; 0x3c
   b7e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7e2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7e32:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7e36:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7e3a:	e7f1      	b.n	b7e20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7e3c:	2b00      	cmp	r3, #0
   b7e3e:	d135      	bne.n	b7eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7e40:	68a3      	ldr	r3, [r4, #8]
   b7e42:	4543      	cmp	r3, r8
   b7e44:	d108      	bne.n	b7e58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7e46:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e4a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e4e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e52:	89a3      	ldrh	r3, [r4, #12]
   b7e54:	429a      	cmp	r2, r3
   b7e56:	d0e6      	beq.n	b7e26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7e58:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e5a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7e5c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e60:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7e62:	ab04      	add	r3, sp, #16
   b7e64:	f10d 020f 	add.w	r2, sp, #15
   b7e68:	f7ff ffa2 	bl	b7db0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7e6c:	7921      	ldrb	r1, [r4, #4]
   b7e6e:	b985      	cbnz	r5, b7e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7e70:	b989      	cbnz	r1, b7e96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e72:	68a3      	ldr	r3, [r4, #8]
   b7e74:	4543      	cmp	r3, r8
   b7e76:	d30e      	bcc.n	b7e96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7e78:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e7c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e84:	89a3      	ldrh	r3, [r4, #12]
   b7e86:	429a      	cmp	r2, r3
   b7e88:	d105      	bne.n	b7e96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7e8a:	9b04      	ldr	r3, [sp, #16]
   b7e8c:	4543      	cmp	r3, r8
   b7e8e:	d102      	bne.n	b7e96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e90:	e7c9      	b.n	b7e26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7e92:	2900      	cmp	r1, #0
   b7e94:	d1f9      	bne.n	b7e8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7e96:	2300      	movs	r3, #0
   b7e98:	9301      	str	r3, [sp, #4]
   b7e9a:	7b63      	ldrb	r3, [r4, #13]
   b7e9c:	9300      	str	r3, [sp, #0]
   b7e9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7ea2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7ea4:	7830      	ldrb	r0, [r6, #0]
   b7ea6:	f7ff fdf1 	bl	b7a8c <hal_spi_set_settings>
   b7eaa:	e7bc      	b.n	b7e26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7eac:	e9cd 5500 	strd	r5, r5, [sp]
   b7eb0:	462b      	mov	r3, r5
   b7eb2:	462a      	mov	r2, r5
   b7eb4:	2101      	movs	r1, #1
   b7eb6:	e7f5      	b.n	b7ea4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7eb8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7eb8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7eba:	7800      	ldrb	r0, [r0, #0]
   b7ebc:	f7ff fdc6 	bl	b7a4c <hal_spi_transfer>
}
   b7ec0:	b2c0      	uxtb	r0, r0
   b7ec2:	bd08      	pop	{r3, pc}

000b7ec4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7ec4:	4b05      	ldr	r3, [pc, #20]	; (b7edc <_GLOBAL__sub_I_System+0x18>)
   b7ec6:	2202      	movs	r2, #2
   b7ec8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7eca:	4b05      	ldr	r3, [pc, #20]	; (b7ee0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7ecc:	4a05      	ldr	r2, [pc, #20]	; (b7ee4 <_GLOBAL__sub_I_System+0x20>)
   b7ece:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7ed0:	2000      	movs	r0, #0
   b7ed2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7ed6:	f7ff be31 	b.w	b7b3c <set_system_mode>
   b7eda:	bf00      	nop
   b7edc:	2003e6d0 	.word	0x2003e6d0
   b7ee0:	2003e6c4 	.word	0x2003e6c4
   b7ee4:	ffff0000 	.word	0xffff0000

000b7ee8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7ee8:	b510      	push	{r4, lr}
   b7eea:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7eec:	f001 fb7c 	bl	b95e8 <strlen>
   b7ef0:	3801      	subs	r0, #1
   b7ef2:	1823      	adds	r3, r4, r0
   b7ef4:	4620      	mov	r0, r4
	while(i<j){
   b7ef6:	4283      	cmp	r3, r0
   b7ef8:	d906      	bls.n	b7f08 <_Z11str_reversePc+0x20>
		c = *i;
   b7efa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7efc:	7819      	ldrb	r1, [r3, #0]
   b7efe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7f02:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7f06:	e7f6      	b.n	b7ef6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7f08:	bd10      	pop	{r4, pc}

000b7f0a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7f0a:	b570      	push	{r4, r5, r6, lr}
   b7f0c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7f0e:	1e91      	subs	r1, r2, #2
   b7f10:	2922      	cmp	r1, #34	; 0x22
   b7f12:	d81d      	bhi.n	b7f50 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7f14:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7f16:	b930      	cbnz	r0, b7f26 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7f18:	4423      	add	r3, r4
            *ptr++ = '0';
   b7f1a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7f1c:	429d      	cmp	r5, r3
   b7f1e:	d210      	bcs.n	b7f42 <ultoa+0x38>
            *ptr++ = '0';
   b7f20:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7f24:	e7fa      	b.n	b7f1c <ultoa+0x12>
            result.quot = a/radix;
   b7f26:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7f2a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7f2e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7f30:	2809      	cmp	r0, #9
                *ptr += '0';
   b7f32:	bf94      	ite	ls
   b7f34:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7f36:	3157      	addhi	r1, #87	; 0x57
   b7f38:	b2c9      	uxtb	r1, r1
   b7f3a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7f3e:	4630      	mov	r0, r6
	while(a){
   b7f40:	e7e9      	b.n	b7f16 <ultoa+0xc>

	*ptr = '\0';
   b7f42:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7f44:	4620      	mov	r0, r4
	*ptr = '\0';
   b7f46:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7f48:	f7ff ffce 	bl	b7ee8 <_Z11str_reversePc>
	return buffer;
   b7f4c:	4620      	mov	r0, r4
}
   b7f4e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7f50:	2000      	movs	r0, #0
   b7f52:	e7fc      	b.n	b7f4e <ultoa+0x44>

000b7f54 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f54:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7f56:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f58:	460c      	mov	r4, r1
   b7f5a:	4615      	mov	r5, r2
	if(a<0){
   b7f5c:	da0e      	bge.n	b7f7c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7f62:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f66:	bf14      	ite	ne
   b7f68:	4258      	negne	r0, r3
   b7f6a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7f6c:	2301      	movs	r3, #1
		*buffer = '-';
   b7f6e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7f70:	462a      	mov	r2, r5
   b7f72:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7f74:	f7ff ffc9 	bl	b7f0a <ultoa>
	}
	return buffer;
}
   b7f78:	4620      	mov	r0, r4
   b7f7a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7f7c:	2301      	movs	r3, #1
   b7f7e:	e7f9      	b.n	b7f74 <itoa+0x20>

000b7f80 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7f80:	b510      	push	{r4, lr}
   b7f82:	4604      	mov	r4, r0
{
	free(buffer);
   b7f84:	6800      	ldr	r0, [r0, #0]
   b7f86:	f7ff fe75 	bl	b7c74 <free>
}
   b7f8a:	4620      	mov	r0, r4
   b7f8c:	bd10      	pop	{r4, pc}

000b7f8e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7f8e:	b510      	push	{r4, lr}
   b7f90:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7f92:	6800      	ldr	r0, [r0, #0]
   b7f94:	b108      	cbz	r0, b7f9a <_ZN6String10invalidateEv+0xc>
   b7f96:	f7ff fe6d 	bl	b7c74 <free>
	buffer = NULL;
   b7f9a:	2300      	movs	r3, #0
	capacity = len = 0;
   b7f9c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7fa0:	6023      	str	r3, [r4, #0]
}
   b7fa2:	bd10      	pop	{r4, pc}

000b7fa4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7fa4:	b538      	push	{r3, r4, r5, lr}
   b7fa6:	4604      	mov	r4, r0
   b7fa8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7faa:	6800      	ldr	r0, [r0, #0]
   b7fac:	3101      	adds	r1, #1
   b7fae:	f7ff fe69 	bl	b7c84 <realloc>
	if (newbuffer) {
   b7fb2:	b110      	cbz	r0, b7fba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7fb4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7fb8:	2001      	movs	r0, #1
	}
	return 0;
}
   b7fba:	bd38      	pop	{r3, r4, r5, pc}

000b7fbc <_ZN6String7reserveEj>:
{
   b7fbc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7fbe:	6803      	ldr	r3, [r0, #0]
{
   b7fc0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7fc2:	b123      	cbz	r3, b7fce <_ZN6String7reserveEj+0x12>
   b7fc4:	6843      	ldr	r3, [r0, #4]
   b7fc6:	428b      	cmp	r3, r1
   b7fc8:	d301      	bcc.n	b7fce <_ZN6String7reserveEj+0x12>
   b7fca:	2001      	movs	r0, #1
}
   b7fcc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7fce:	4620      	mov	r0, r4
   b7fd0:	f7ff ffe8 	bl	b7fa4 <_ZN6String12changeBufferEj>
   b7fd4:	2800      	cmp	r0, #0
   b7fd6:	d0f9      	beq.n	b7fcc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7fd8:	68a3      	ldr	r3, [r4, #8]
   b7fda:	2b00      	cmp	r3, #0
   b7fdc:	d1f5      	bne.n	b7fca <_ZN6String7reserveEj+0xe>
   b7fde:	6822      	ldr	r2, [r4, #0]
   b7fe0:	7013      	strb	r3, [r2, #0]
   b7fe2:	e7f2      	b.n	b7fca <_ZN6String7reserveEj+0xe>

000b7fe4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fe6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7fe8:	4611      	mov	r1, r2
   b7fea:	9201      	str	r2, [sp, #4]
{
   b7fec:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7fee:	f7ff ffe5 	bl	b7fbc <_ZN6String7reserveEj>
   b7ff2:	9a01      	ldr	r2, [sp, #4]
   b7ff4:	b928      	cbnz	r0, b8002 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff ffc9 	bl	b7f8e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	b003      	add	sp, #12
   b8000:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8002:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8004:	4629      	mov	r1, r5
   b8006:	6820      	ldr	r0, [r4, #0]
   b8008:	f001 fa92 	bl	b9530 <memcpy>
	buffer[len] = 0;
   b800c:	6822      	ldr	r2, [r4, #0]
   b800e:	68a3      	ldr	r3, [r4, #8]
   b8010:	2100      	movs	r1, #0
   b8012:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8014:	e7f2      	b.n	b7ffc <_ZN6String4copyEPKcj+0x18>

000b8016 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8016:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8018:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b801a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b801e:	4604      	mov	r4, r0
	len = 0;
   b8020:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8022:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8024:	b141      	cbz	r1, b8038 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8026:	4608      	mov	r0, r1
   b8028:	9101      	str	r1, [sp, #4]
   b802a:	f001 fadd 	bl	b95e8 <strlen>
   b802e:	9901      	ldr	r1, [sp, #4]
   b8030:	4602      	mov	r2, r0
   b8032:	4620      	mov	r0, r4
   b8034:	f7ff ffd6 	bl	b7fe4 <_ZN6String4copyEPKcj>
}
   b8038:	4620      	mov	r0, r4
   b803a:	b002      	add	sp, #8
   b803c:	bd10      	pop	{r4, pc}

000b803e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b803e:	4288      	cmp	r0, r1
{
   b8040:	b510      	push	{r4, lr}
   b8042:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8044:	d005      	beq.n	b8052 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8046:	680b      	ldr	r3, [r1, #0]
   b8048:	b12b      	cbz	r3, b8056 <_ZN6StringaSERKS_+0x18>
   b804a:	688a      	ldr	r2, [r1, #8]
   b804c:	4619      	mov	r1, r3
   b804e:	f7ff ffc9 	bl	b7fe4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8052:	4620      	mov	r0, r4
   b8054:	bd10      	pop	{r4, pc}
	else invalidate();
   b8056:	f7ff ff9a 	bl	b7f8e <_ZN6String10invalidateEv>
   b805a:	e7fa      	b.n	b8052 <_ZN6StringaSERKS_+0x14>

000b805c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b805c:	b510      	push	{r4, lr}
	buffer = NULL;
   b805e:	2300      	movs	r3, #0
String::String(const String &value)
   b8060:	4604      	mov	r4, r0
	capacity = 0;
   b8062:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8066:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8068:	7303      	strb	r3, [r0, #12]
	*this = value;
   b806a:	f7ff ffe8 	bl	b803e <_ZN6StringaSERKS_>
}
   b806e:	4620      	mov	r0, r4
   b8070:	bd10      	pop	{r4, pc}

000b8072 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8072:	b513      	push	{r0, r1, r4, lr}
   b8074:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8076:	b159      	cbz	r1, b8090 <_ZN6StringaSEPKc+0x1e>
   b8078:	4608      	mov	r0, r1
   b807a:	9101      	str	r1, [sp, #4]
   b807c:	f001 fab4 	bl	b95e8 <strlen>
   b8080:	9901      	ldr	r1, [sp, #4]
   b8082:	4602      	mov	r2, r0
   b8084:	4620      	mov	r0, r4
   b8086:	f7ff ffad 	bl	b7fe4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b808a:	4620      	mov	r0, r4
   b808c:	b002      	add	sp, #8
   b808e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8090:	f7ff ff7d 	bl	b7f8e <_ZN6String10invalidateEv>
   b8094:	e7f9      	b.n	b808a <_ZN6StringaSEPKc+0x18>

000b8096 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8096:	b510      	push	{r4, lr}
   b8098:	4604      	mov	r4, r0
   b809a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b809c:	2300      	movs	r3, #0
	capacity = 0;
   b809e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b80a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b80a4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b80a6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b80a8:	a901      	add	r1, sp, #4
   b80aa:	f7ff ff53 	bl	b7f54 <itoa>
	*this = buf;
   b80ae:	a901      	add	r1, sp, #4
   b80b0:	4620      	mov	r0, r4
   b80b2:	f7ff ffde 	bl	b8072 <_ZN6StringaSEPKc>
}
   b80b6:	4620      	mov	r0, r4
   b80b8:	b00a      	add	sp, #40	; 0x28
   b80ba:	bd10      	pop	{r4, pc}

000b80bc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b80bc:	b570      	push	{r4, r5, r6, lr}
   b80be:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b80c0:	460e      	mov	r6, r1
   b80c2:	b909      	cbnz	r1, b80c8 <_ZN6String6concatEPKcj+0xc>
   b80c4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b80c6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b80c8:	b16a      	cbz	r2, b80e6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b80ca:	6884      	ldr	r4, [r0, #8]
   b80cc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b80ce:	4621      	mov	r1, r4
   b80d0:	f7ff ff74 	bl	b7fbc <_ZN6String7reserveEj>
   b80d4:	2800      	cmp	r0, #0
   b80d6:	d0f5      	beq.n	b80c4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b80d8:	6828      	ldr	r0, [r5, #0]
   b80da:	68ab      	ldr	r3, [r5, #8]
   b80dc:	4631      	mov	r1, r6
   b80de:	4418      	add	r0, r3
   b80e0:	f001 fa7a 	bl	b95d8 <strcpy>
	len = newlen;
   b80e4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b80e6:	2001      	movs	r0, #1
   b80e8:	e7ed      	b.n	b80c6 <_ZN6String6concatEPKcj+0xa>

000b80ea <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b80ea:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b80ec:	688a      	ldr	r2, [r1, #8]
   b80ee:	6809      	ldr	r1, [r1, #0]
{
   b80f0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b80f2:	f7ff ffe3 	bl	b80bc <_ZN6String6concatEPKcj>
   b80f6:	b910      	cbnz	r0, b80fe <_ZplRK15StringSumHelperRK6String+0x14>
   b80f8:	4620      	mov	r0, r4
   b80fa:	f7ff ff48 	bl	b7f8e <_ZN6String10invalidateEv>
	return a;
}
   b80fe:	4620      	mov	r0, r4
   b8100:	bd10      	pop	{r4, pc}

000b8102 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8102:	b513      	push	{r0, r1, r4, lr}
   b8104:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8106:	b929      	cbnz	r1, b8114 <_ZplRK15StringSumHelperPKc+0x12>
   b8108:	4620      	mov	r0, r4
   b810a:	f7ff ff40 	bl	b7f8e <_ZN6String10invalidateEv>
	return a;
}
   b810e:	4620      	mov	r0, r4
   b8110:	b002      	add	sp, #8
   b8112:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8114:	4608      	mov	r0, r1
   b8116:	9101      	str	r1, [sp, #4]
   b8118:	f001 fa66 	bl	b95e8 <strlen>
   b811c:	9901      	ldr	r1, [sp, #4]
   b811e:	4602      	mov	r2, r0
   b8120:	4620      	mov	r0, r4
   b8122:	f7ff ffcb 	bl	b80bc <_ZN6String6concatEPKcj>
   b8126:	2800      	cmp	r0, #0
   b8128:	d0ee      	beq.n	b8108 <_ZplRK15StringSumHelperPKc+0x6>
   b812a:	e7f0      	b.n	b810e <_ZplRK15StringSumHelperPKc+0xc>

000b812c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b812c:	4802      	ldr	r0, [pc, #8]	; (b8138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b812e:	2300      	movs	r3, #0
   b8130:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8132:	f7ff bbdb 	b.w	b78ec <os_mutex_recursive_create>
   b8136:	bf00      	nop
   b8138:	2003e6d4 	.word	0x2003e6d4

000b813c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b813e:	4606      	mov	r6, r0
   b8140:	460d      	mov	r5, r1
  size_t n = 0;
   b8142:	188f      	adds	r7, r1, r2
   b8144:	2400      	movs	r4, #0
  while (size--) {
   b8146:	42bd      	cmp	r5, r7
   b8148:	d00c      	beq.n	b8164 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b814a:	6833      	ldr	r3, [r6, #0]
   b814c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8150:	689b      	ldr	r3, [r3, #8]
   b8152:	4630      	mov	r0, r6
   b8154:	4798      	blx	r3
     if (chunk>=0)
   b8156:	1e03      	subs	r3, r0, #0
   b8158:	db01      	blt.n	b815e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b815a:	441c      	add	r4, r3
  while (size--) {
   b815c:	e7f3      	b.n	b8146 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b815e:	2c00      	cmp	r4, #0
   b8160:	bf08      	it	eq
   b8162:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8164:	4620      	mov	r0, r4
   b8166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8168 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8168:	b513      	push	{r0, r1, r4, lr}
   b816a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b816c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b816e:	b159      	cbz	r1, b8188 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8170:	9101      	str	r1, [sp, #4]
   b8172:	f001 fa39 	bl	b95e8 <strlen>
   b8176:	6823      	ldr	r3, [r4, #0]
   b8178:	9901      	ldr	r1, [sp, #4]
   b817a:	68db      	ldr	r3, [r3, #12]
   b817c:	4602      	mov	r2, r0
   b817e:	4620      	mov	r0, r4
    }
   b8180:	b002      	add	sp, #8
   b8182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8186:	4718      	bx	r3
    }
   b8188:	b002      	add	sp, #8
   b818a:	bd10      	pop	{r4, pc}

000b818c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b818c:	b508      	push	{r3, lr}
  return write(str);
   b818e:	f7ff ffeb 	bl	b8168 <_ZN5Print5writeEPKc>
}
   b8192:	bd08      	pop	{r3, pc}

000b8194 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8194:	6803      	ldr	r3, [r0, #0]
   b8196:	689b      	ldr	r3, [r3, #8]
   b8198:	4718      	bx	r3

000b819a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b819a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b819c:	210d      	movs	r1, #13
{
   b819e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b81a0:	f7ff fff8 	bl	b8194 <_ZN5Print5printEc>
  n += print('\n');
   b81a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b81a6:	4604      	mov	r4, r0
  n += print('\n');
   b81a8:	4628      	mov	r0, r5
   b81aa:	f7ff fff3 	bl	b8194 <_ZN5Print5printEc>
  return n;
}
   b81ae:	4420      	add	r0, r4
   b81b0:	bd38      	pop	{r3, r4, r5, pc}

000b81b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b81b2:	b538      	push	{r3, r4, r5, lr}
   b81b4:	4605      	mov	r5, r0
  return write(str);
   b81b6:	f7ff ffd7 	bl	b8168 <_ZN5Print5writeEPKc>
   b81ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b81bc:	4628      	mov	r0, r5
   b81be:	f7ff ffec 	bl	b819a <_ZN5Print7printlnEv>
  return n;
}
   b81c2:	4420      	add	r0, r4
   b81c4:	bd38      	pop	{r3, r4, r5, pc}

000b81c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b81c6:	b530      	push	{r4, r5, lr}
   b81c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b81ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b81cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b81ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b81d2:	bf98      	it	ls
   b81d4:	220a      	movls	r2, #10
   b81d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b81d8:	460d      	mov	r5, r1
   b81da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b81de:	fb01 5312 	mls	r3, r1, r2, r5
   b81e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b81e6:	2b09      	cmp	r3, #9
   b81e8:	bf94      	ite	ls
   b81ea:	3330      	addls	r3, #48	; 0x30
   b81ec:	3337      	addhi	r3, #55	; 0x37
   b81ee:	b2db      	uxtb	r3, r3
  } while(n);
   b81f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b81f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b81f6:	d9ef      	bls.n	b81d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b81f8:	4621      	mov	r1, r4
   b81fa:	f7ff ffb5 	bl	b8168 <_ZN5Print5writeEPKc>
}
   b81fe:	b00b      	add	sp, #44	; 0x2c
   b8200:	bd30      	pop	{r4, r5, pc}

000b8202 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8206:	b086      	sub	sp, #24
   b8208:	af00      	add	r7, sp, #0
   b820a:	4605      	mov	r5, r0
   b820c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b820e:	1d38      	adds	r0, r7, #4
   b8210:	2114      	movs	r1, #20
{
   b8212:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8214:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8216:	f7ff fd45 	bl	b7ca4 <vsnprintf>

    if (n<bufsize)
   b821a:	2813      	cmp	r0, #19
   b821c:	d80e      	bhi.n	b823c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b821e:	1d39      	adds	r1, r7, #4
   b8220:	4628      	mov	r0, r5
   b8222:	f7ff ffa1 	bl	b8168 <_ZN5Print5writeEPKc>
   b8226:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8228:	b11e      	cbz	r6, b8232 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b822a:	4628      	mov	r0, r5
   b822c:	f7ff ffb5 	bl	b819a <_ZN5Print7printlnEv>
   b8230:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8232:	4620      	mov	r0, r4
   b8234:	3718      	adds	r7, #24
   b8236:	46bd      	mov	sp, r7
   b8238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b823c:	f100 0308 	add.w	r3, r0, #8
   b8240:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8244:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8246:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b824a:	4622      	mov	r2, r4
   b824c:	1c41      	adds	r1, r0, #1
   b824e:	683b      	ldr	r3, [r7, #0]
   b8250:	4668      	mov	r0, sp
   b8252:	f7ff fd27 	bl	b7ca4 <vsnprintf>
  return write(str);
   b8256:	4669      	mov	r1, sp
   b8258:	4628      	mov	r0, r5
   b825a:	f7ff ff85 	bl	b8168 <_ZN5Print5writeEPKc>
   b825e:	4604      	mov	r4, r0
   b8260:	46c5      	mov	sp, r8
   b8262:	e7e1      	b.n	b8228 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8264 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8264:	4b01      	ldr	r3, [pc, #4]	; (b826c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8266:	4a02      	ldr	r2, [pc, #8]	; (b8270 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8268:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b826a:	4770      	bx	lr
   b826c:	2003e6d8 	.word	0x2003e6d8
   b8270:	000bab5c 	.word	0x000bab5c

000b8274 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8274:	4b02      	ldr	r3, [pc, #8]	; (b8280 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8276:	681a      	ldr	r2, [r3, #0]
   b8278:	4b02      	ldr	r3, [pc, #8]	; (b8284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b827a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b827c:	4770      	bx	lr
   b827e:	bf00      	nop
   b8280:	2003df5c 	.word	0x2003df5c
   b8284:	2003e6dc 	.word	0x2003e6dc

000b8288 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8288:	2100      	movs	r1, #0
   b828a:	f7ff bc5f 	b.w	b7b4c <system_delay_ms>
	...

000b8290 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b8290:	4b01      	ldr	r3, [pc, #4]	; (b8298 <_GLOBAL__sub_I_RGB+0x8>)
   b8292:	2200      	movs	r2, #0
   b8294:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8296:	4770      	bx	lr
   b8298:	2003e6e0 	.word	0x2003e6e0

000b829c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b829c:	4b01      	ldr	r3, [pc, #4]	; (b82a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b829e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b82a0:	4770      	bx	lr
   b82a2:	bf00      	nop
   b82a4:	2003df60 	.word	0x2003df60

000b82a8 <serialEventRun>:
{
   b82a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b82aa:	4b0b      	ldr	r3, [pc, #44]	; (b82d8 <serialEventRun+0x30>)
   b82ac:	b143      	cbz	r3, b82c0 <serialEventRun+0x18>
   b82ae:	f000 f981 	bl	b85b4 <_Z16_fetch_usbserialv>
   b82b2:	6803      	ldr	r3, [r0, #0]
   b82b4:	691b      	ldr	r3, [r3, #16]
   b82b6:	4798      	blx	r3
   b82b8:	2800      	cmp	r0, #0
   b82ba:	dd01      	ble.n	b82c0 <serialEventRun+0x18>
        serialEvent();
   b82bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b82c0:	4b06      	ldr	r3, [pc, #24]	; (b82dc <serialEventRun+0x34>)
   b82c2:	b143      	cbz	r3, b82d6 <serialEventRun+0x2e>
   b82c4:	f000 fbe8 	bl	b8a98 <_Z22__fetch_global_Serial1v>
   b82c8:	6803      	ldr	r3, [r0, #0]
   b82ca:	691b      	ldr	r3, [r3, #16]
   b82cc:	4798      	blx	r3
   b82ce:	2800      	cmp	r0, #0
   b82d0:	dd01      	ble.n	b82d6 <serialEventRun+0x2e>
        serialEvent1();
   b82d2:	f3af 8000 	nop.w
}
   b82d6:	bd08      	pop	{r3, pc}
	...

000b82e0 <_post_loop>:
{
   b82e0:	b508      	push	{r3, lr}
	serialEventRun();
   b82e2:	f7ff ffe1 	bl	b82a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b82e6:	f7ff fae1 	bl	b78ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b82ea:	4b01      	ldr	r3, [pc, #4]	; (b82f0 <_post_loop+0x10>)
   b82ec:	6018      	str	r0, [r3, #0]
}
   b82ee:	bd08      	pop	{r3, pc}
   b82f0:	2003e738 	.word	0x2003e738

000b82f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b82f4:	4805      	ldr	r0, [pc, #20]	; (b830c <_Z33system_initialize_user_backup_ramv+0x18>)
   b82f6:	4a06      	ldr	r2, [pc, #24]	; (b8310 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b82f8:	4906      	ldr	r1, [pc, #24]	; (b8314 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b82fa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b82fc:	1a12      	subs	r2, r2, r0
   b82fe:	f001 f917 	bl	b9530 <memcpy>
    __backup_sram_signature = signature;
   b8302:	4b05      	ldr	r3, [pc, #20]	; (b8318 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8304:	4a05      	ldr	r2, [pc, #20]	; (b831c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8306:	601a      	str	r2, [r3, #0]
}
   b8308:	bd08      	pop	{r3, pc}
   b830a:	bf00      	nop
   b830c:	2003f400 	.word	0x2003f400
   b8310:	2003f404 	.word	0x2003f404
   b8314:	000badf4 	.word	0x000badf4
   b8318:	2003f400 	.word	0x2003f400
   b831c:	9a271c1e 	.word	0x9a271c1e

000b8320 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8320:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8322:	2300      	movs	r3, #0
   b8324:	9300      	str	r3, [sp, #0]
   b8326:	461a      	mov	r2, r3
   b8328:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b832c:	f7ff fc20 	bl	b7b70 <system_ctrl_set_result>
}
   b8330:	b003      	add	sp, #12
   b8332:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8338 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8338:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b833a:	8843      	ldrh	r3, [r0, #2]
   b833c:	2b0a      	cmp	r3, #10
   b833e:	d008      	beq.n	b8352 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8340:	2b50      	cmp	r3, #80	; 0x50
   b8342:	d10b      	bne.n	b835c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8344:	4b09      	ldr	r3, [pc, #36]	; (b836c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8346:	681b      	ldr	r3, [r3, #0]
   b8348:	b14b      	cbz	r3, b835e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b834a:	b003      	add	sp, #12
   b834c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8350:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8352:	f7ff ffe5 	bl	b8320 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8356:	b003      	add	sp, #12
   b8358:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b835c:	2300      	movs	r3, #0
   b835e:	9300      	str	r3, [sp, #0]
   b8360:	461a      	mov	r2, r3
   b8362:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8366:	f7ff fc03 	bl	b7b70 <system_ctrl_set_result>
}
   b836a:	e7f4      	b.n	b8356 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b836c:	2003e6f4 	.word	0x2003e6f4

000b8370 <module_user_init_hook>:
{
   b8370:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8372:	4812      	ldr	r0, [pc, #72]	; (b83bc <module_user_init_hook+0x4c>)
   b8374:	2100      	movs	r1, #0
   b8376:	f7ff fcad 	bl	b7cd4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b837a:	4b11      	ldr	r3, [pc, #68]	; (b83c0 <module_user_init_hook+0x50>)
   b837c:	681a      	ldr	r2, [r3, #0]
   b837e:	4b11      	ldr	r3, [pc, #68]	; (b83c4 <module_user_init_hook+0x54>)
   b8380:	429a      	cmp	r2, r3
   b8382:	4b11      	ldr	r3, [pc, #68]	; (b83c8 <module_user_init_hook+0x58>)
   b8384:	bf0c      	ite	eq
   b8386:	2201      	moveq	r2, #1
   b8388:	2200      	movne	r2, #0
   b838a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b838c:	d001      	beq.n	b8392 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b838e:	f7ff ffb1 	bl	b82f4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8392:	f7ff fa7b 	bl	b788c <HAL_RNG_GetRandomNumber>
   b8396:	4604      	mov	r4, r0
    srand(seed);
   b8398:	f001 f8f0 	bl	b957c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b839c:	4b0b      	ldr	r3, [pc, #44]	; (b83cc <module_user_init_hook+0x5c>)
   b839e:	b113      	cbz	r3, b83a6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b83a0:	4620      	mov	r0, r4
   b83a2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b83a6:	2100      	movs	r1, #0
   b83a8:	4808      	ldr	r0, [pc, #32]	; (b83cc <module_user_init_hook+0x5c>)
   b83aa:	f7ff fc4b 	bl	b7c44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b83ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b83b2:	4807      	ldr	r0, [pc, #28]	; (b83d0 <module_user_init_hook+0x60>)
   b83b4:	2100      	movs	r1, #0
   b83b6:	f7ff bbd1 	b.w	b7b5c <system_ctrl_set_app_request_handler>
   b83ba:	bf00      	nop
   b83bc:	000b829d 	.word	0x000b829d
   b83c0:	2003f400 	.word	0x2003f400
   b83c4:	9a271c1e 	.word	0x9a271c1e
   b83c8:	2003e6f0 	.word	0x2003e6f0
   b83cc:	00000000 	.word	0x00000000
   b83d0:	000b8339 	.word	0x000b8339

000b83d4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b83d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b83d6:	230c      	movs	r3, #12
   b83d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b83dc:	6803      	ldr	r3, [r0, #0]
   b83de:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b83e2:	7a03      	ldrb	r3, [r0, #8]
   b83e4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b83e8:	6843      	ldr	r3, [r0, #4]
   b83ea:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b83ec:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b83ee:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b83f0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b83f4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b83f6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b83fa:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b83fe:	f7ff fc29 	bl	b7c54 <spark_cloud_disconnect>
}
   b8402:	b005      	add	sp, #20
   b8404:	f85d fb04 	ldr.w	pc, [sp], #4

000b8408 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8408:	4770      	bx	lr

000b840a <_ZN9IPAddressD0Ev>:
   b840a:	b510      	push	{r4, lr}
   b840c:	2118      	movs	r1, #24
   b840e:	4604      	mov	r4, r0
   b8410:	f7fb fe43 	bl	b409a <_ZdlPvj>
   b8414:	4620      	mov	r0, r4
   b8416:	bd10      	pop	{r4, pc}

000b8418 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8418:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b841a:	7d03      	ldrb	r3, [r0, #20]
   b841c:	2b06      	cmp	r3, #6
{
   b841e:	b08d      	sub	sp, #52	; 0x34
   b8420:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8422:	f100 0704 	add.w	r7, r0, #4
   b8426:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b842a:	d012      	beq.n	b8452 <_ZNK9IPAddress7printToER5Print+0x3a>
   b842c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8430:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8434:	220a      	movs	r2, #10
   b8436:	4630      	mov	r0, r6
   b8438:	f7ff fec5 	bl	b81c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b843c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b843e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8440:	d019      	beq.n	b8476 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8442:	2c00      	cmp	r4, #0
   b8444:	d0f4      	beq.n	b8430 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8446:	212e      	movs	r1, #46	; 0x2e
   b8448:	4630      	mov	r0, r6
   b844a:	f7ff fea3 	bl	b8194 <_ZN5Print5printEc>
   b844e:	4404      	add	r4, r0
   b8450:	e7ee      	b.n	b8430 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8452:	232f      	movs	r3, #47	; 0x2f
   b8454:	466a      	mov	r2, sp
   b8456:	4639      	mov	r1, r7
   b8458:	200a      	movs	r0, #10
		buf[0] = 0;
   b845a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b845e:	f7ff fa4d 	bl	b78fc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8462:	4668      	mov	r0, sp
   b8464:	f001 f8c0 	bl	b95e8 <strlen>
   b8468:	6833      	ldr	r3, [r6, #0]
   b846a:	4602      	mov	r2, r0
   b846c:	68db      	ldr	r3, [r3, #12]
   b846e:	4669      	mov	r1, sp
   b8470:	4630      	mov	r0, r6
   b8472:	4798      	blx	r3
   b8474:	4604      	mov	r4, r0
    }
    return n;
}
   b8476:	4620      	mov	r0, r4
   b8478:	b00d      	add	sp, #52	; 0x34
   b847a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b847c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b847c:	b510      	push	{r4, lr}
   b847e:	4b05      	ldr	r3, [pc, #20]	; (b8494 <_ZN9IPAddressC1Ev+0x18>)
   b8480:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8482:	2211      	movs	r2, #17
   b8484:	f840 3b04 	str.w	r3, [r0], #4
   b8488:	2100      	movs	r1, #0
   b848a:	f001 f85f 	bl	b954c <memset>
}
   b848e:	4620      	mov	r0, r4
   b8490:	bd10      	pop	{r4, pc}
   b8492:	bf00      	nop
   b8494:	000bab84 	.word	0x000bab84

000b8498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8498:	4603      	mov	r3, r0
   b849a:	4a07      	ldr	r2, [pc, #28]	; (b84b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b849c:	b510      	push	{r4, lr}
   b849e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b84a2:	f101 0210 	add.w	r2, r1, #16
   b84a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b84aa:	f843 4b04 	str.w	r4, [r3], #4
   b84ae:	4291      	cmp	r1, r2
   b84b0:	d1f9      	bne.n	b84a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b84b2:	780a      	ldrb	r2, [r1, #0]
   b84b4:	701a      	strb	r2, [r3, #0]
}
   b84b6:	bd10      	pop	{r4, pc}
   b84b8:	000bab84 	.word	0x000bab84

000b84bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b84bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b84be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b84c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b84c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b84ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b84ce:	2304      	movs	r3, #4
   b84d0:	6041      	str	r1, [r0, #4]
   b84d2:	7503      	strb	r3, [r0, #20]
}
   b84d4:	bd10      	pop	{r4, pc}
	...

000b84d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b84d8:	b507      	push	{r0, r1, r2, lr}
   b84da:	4b06      	ldr	r3, [pc, #24]	; (b84f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b84dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b84de:	78cb      	ldrb	r3, [r1, #3]
   b84e0:	9300      	str	r3, [sp, #0]
   b84e2:	788b      	ldrb	r3, [r1, #2]
   b84e4:	784a      	ldrb	r2, [r1, #1]
   b84e6:	7809      	ldrb	r1, [r1, #0]
   b84e8:	f7ff ffe8 	bl	b84bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b84ec:	b003      	add	sp, #12
   b84ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b84f2:	bf00      	nop
   b84f4:	000bab84 	.word	0x000bab84

000b84f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b84f8:	7441      	strb	r1, [r0, #17]
}
   b84fa:	4770      	bx	lr

000b84fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84fc:	4770      	bx	lr

000b84fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b84fe:	4770      	bx	lr

000b8500 <_ZN9USBSerial4readEv>:
{
   b8500:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8502:	2100      	movs	r1, #0
   b8504:	7c00      	ldrb	r0, [r0, #16]
   b8506:	f7ff faf9 	bl	b7afc <HAL_USB_USART_Receive_Data>
}
   b850a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b850e:	bd08      	pop	{r3, pc}

000b8510 <_ZN9USBSerial4peekEv>:
{
   b8510:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8512:	2101      	movs	r1, #1
   b8514:	7c00      	ldrb	r0, [r0, #16]
   b8516:	f7ff faf1 	bl	b7afc <HAL_USB_USART_Receive_Data>
}
   b851a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b851e:	bd08      	pop	{r3, pc}

000b8520 <_ZN9USBSerial17availableForWriteEv>:
{
   b8520:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8522:	7c00      	ldrb	r0, [r0, #16]
   b8524:	f7ff fae2 	bl	b7aec <HAL_USB_USART_Available_Data_For_Write>
}
   b8528:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b852c:	bd08      	pop	{r3, pc}

000b852e <_ZN9USBSerial9availableEv>:
{
   b852e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8530:	7c00      	ldrb	r0, [r0, #16]
   b8532:	f7ff fad3 	bl	b7adc <HAL_USB_USART_Available_Data>
}
   b8536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b853a:	bd08      	pop	{r3, pc}

000b853c <_ZN9USBSerial5writeEh>:
{
   b853c:	b513      	push	{r0, r1, r4, lr}
   b853e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8540:	7c00      	ldrb	r0, [r0, #16]
{
   b8542:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8544:	f7ff fad2 	bl	b7aec <HAL_USB_USART_Available_Data_For_Write>
   b8548:	2800      	cmp	r0, #0
   b854a:	9901      	ldr	r1, [sp, #4]
   b854c:	dc01      	bgt.n	b8552 <_ZN9USBSerial5writeEh+0x16>
   b854e:	7c60      	ldrb	r0, [r4, #17]
   b8550:	b120      	cbz	r0, b855c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8552:	7c20      	ldrb	r0, [r4, #16]
   b8554:	f7ff fada 	bl	b7b0c <HAL_USB_USART_Send_Data>
   b8558:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b855c:	b002      	add	sp, #8
   b855e:	bd10      	pop	{r4, pc}

000b8560 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8560:	7c00      	ldrb	r0, [r0, #16]
   b8562:	f7ff badb 	b.w	b7b1c <HAL_USB_USART_Flush_Data>

000b8566 <_ZN9USBSerialD0Ev>:
   b8566:	b510      	push	{r4, lr}
   b8568:	2114      	movs	r1, #20
   b856a:	4604      	mov	r4, r0
   b856c:	f7fb fd95 	bl	b409a <_ZdlPvj>
   b8570:	4620      	mov	r0, r4
   b8572:	bd10      	pop	{r4, pc}

000b8574 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8574:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b857a:	4604      	mov	r4, r0
   b857c:	4608      	mov	r0, r1
   b857e:	2100      	movs	r1, #0
   b8580:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8584:	4b04      	ldr	r3, [pc, #16]	; (b8598 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8586:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8588:	2301      	movs	r3, #1
  _serial = serial;
   b858a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b858c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b858e:	4611      	mov	r1, r2
   b8590:	f7ff fa94 	bl	b7abc <HAL_USB_USART_Init>
}
   b8594:	4620      	mov	r0, r4
   b8596:	bd10      	pop	{r4, pc}
   b8598:	000bab98 	.word	0x000bab98

000b859c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b859c:	7c00      	ldrb	r0, [r0, #16]
   b859e:	2200      	movs	r2, #0
   b85a0:	f7ff ba94 	b.w	b7acc <HAL_USB_USART_Begin>

000b85a4 <_Z19acquireSerialBufferv>:
{
   b85a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b85a6:	2214      	movs	r2, #20
{
   b85a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b85aa:	2100      	movs	r1, #0
   b85ac:	f000 ffce 	bl	b954c <memset>
}
   b85b0:	4620      	mov	r0, r4
   b85b2:	bd10      	pop	{r4, pc}

000b85b4 <_Z16_fetch_usbserialv>:
{
   b85b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85b6:	4c0f      	ldr	r4, [pc, #60]	; (b85f4 <_Z16_fetch_usbserialv+0x40>)
{
   b85b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b85ba:	a803      	add	r0, sp, #12
   b85bc:	f7ff fff2 	bl	b85a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85c0:	7821      	ldrb	r1, [r4, #0]
   b85c2:	f3bf 8f5b 	dmb	ish
   b85c6:	f011 0101 	ands.w	r1, r1, #1
   b85ca:	d10f      	bne.n	b85ec <_Z16_fetch_usbserialv+0x38>
   b85cc:	4620      	mov	r0, r4
   b85ce:	9101      	str	r1, [sp, #4]
   b85d0:	f7fb fd72 	bl	b40b8 <__cxa_guard_acquire>
   b85d4:	9901      	ldr	r1, [sp, #4]
   b85d6:	b148      	cbz	r0, b85ec <_Z16_fetch_usbserialv+0x38>
   b85d8:	aa03      	add	r2, sp, #12
   b85da:	4807      	ldr	r0, [pc, #28]	; (b85f8 <_Z16_fetch_usbserialv+0x44>)
   b85dc:	f7ff ffca 	bl	b8574 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b85e0:	4620      	mov	r0, r4
   b85e2:	f7fb fd6e 	bl	b40c2 <__cxa_guard_release>
   b85e6:	4805      	ldr	r0, [pc, #20]	; (b85fc <_Z16_fetch_usbserialv+0x48>)
   b85e8:	f000 ff94 	bl	b9514 <atexit>
	return _usbserial;
}
   b85ec:	4802      	ldr	r0, [pc, #8]	; (b85f8 <_Z16_fetch_usbserialv+0x44>)
   b85ee:	b008      	add	sp, #32
   b85f0:	bd10      	pop	{r4, pc}
   b85f2:	bf00      	nop
   b85f4:	2003e6f8 	.word	0x2003e6f8
   b85f8:	2003e6fc 	.word	0x2003e6fc
   b85fc:	000b84fd 	.word	0x000b84fd

000b8600 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b8600:	f7ff b92c 	b.w	b785c <HAL_Interrupts_Disable_All>

000b8604 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b8604:	f7ff b922 	b.w	b784c <HAL_Interrupts_Enable_All>

000b8608 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8608:	4770      	bx	lr

000b860a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b860a:	7441      	strb	r1, [r0, #17]
}
   b860c:	4770      	bx	lr

000b860e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b860e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8610:	7c00      	ldrb	r0, [r0, #16]
   b8612:	f7ff f9ab 	bl	b796c <hal_usart_available_data_for_write>
}
   b8616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b861a:	bd08      	pop	{r3, pc}

000b861c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b861c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b861e:	7c00      	ldrb	r0, [r0, #16]
   b8620:	f7ff f97c 	bl	b791c <hal_usart_available>
}
   b8624:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8628:	bd08      	pop	{r3, pc}

000b862a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b862a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b862c:	7c00      	ldrb	r0, [r0, #16]
   b862e:	f7ff f985 	bl	b793c <hal_usart_peek>
}
   b8632:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8636:	bd08      	pop	{r3, pc}

000b8638 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8638:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b863a:	7c00      	ldrb	r0, [r0, #16]
   b863c:	f7ff f976 	bl	b792c <hal_usart_read>
}
   b8640:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8644:	bd08      	pop	{r3, pc}

000b8646 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8646:	7c00      	ldrb	r0, [r0, #16]
   b8648:	f7ff b980 	b.w	b794c <hal_usart_flush>

000b864c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b864e:	7c45      	ldrb	r5, [r0, #17]
{
   b8650:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8652:	b12d      	cbz	r5, b8660 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8654:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8656:	b003      	add	sp, #12
   b8658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b865c:	f7ff b956 	b.w	b790c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8660:	7c00      	ldrb	r0, [r0, #16]
   b8662:	9101      	str	r1, [sp, #4]
   b8664:	f7ff f982 	bl	b796c <hal_usart_available_data_for_write>
   b8668:	2800      	cmp	r0, #0
   b866a:	9901      	ldr	r1, [sp, #4]
   b866c:	dcf2      	bgt.n	b8654 <_ZN11USARTSerial5writeEh+0x8>
}
   b866e:	4628      	mov	r0, r5
   b8670:	b003      	add	sp, #12
   b8672:	bd30      	pop	{r4, r5, pc}

000b8674 <_ZN11USARTSerialD0Ev>:
   b8674:	b510      	push	{r4, lr}
   b8676:	2114      	movs	r1, #20
   b8678:	4604      	mov	r4, r0
   b867a:	f7fb fd0e 	bl	b409a <_ZdlPvj>
   b867e:	4620      	mov	r0, r4
   b8680:	bd10      	pop	{r4, pc}
	...

000b8684 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8684:	b510      	push	{r4, lr}
   b8686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b868a:	4604      	mov	r4, r0
   b868c:	4608      	mov	r0, r1
   b868e:	4611      	mov	r1, r2
   b8690:	2200      	movs	r2, #0
   b8692:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8696:	4b04      	ldr	r3, [pc, #16]	; (b86a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8698:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b869a:	2301      	movs	r3, #1
  _serial = serial;
   b869c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b869e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b86a0:	f7ff f96c 	bl	b797c <hal_usart_init_ex>
}
   b86a4:	4620      	mov	r0, r4
   b86a6:	bd10      	pop	{r4, pc}
   b86a8:	000babc8 	.word	0x000babc8

000b86ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b86ac:	4770      	bx	lr

000b86ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b86ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86b0:	4606      	mov	r6, r0
   b86b2:	4615      	mov	r5, r2
   b86b4:	460c      	mov	r4, r1
   b86b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b86b8:	42bc      	cmp	r4, r7
   b86ba:	d006      	beq.n	b86ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b86bc:	6833      	ldr	r3, [r6, #0]
   b86be:	f814 1b01 	ldrb.w	r1, [r4], #1
   b86c2:	689b      	ldr	r3, [r3, #8]
   b86c4:	4630      	mov	r0, r6
   b86c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b86c8:	e7f6      	b.n	b86b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b86ca:	4628      	mov	r0, r5
   b86cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b86ce:	7c00      	ldrb	r0, [r0, #16]
   b86d0:	2200      	movs	r2, #0
   b86d2:	f7ff b97b 	b.w	b79cc <hal_i2c_write>

000b86d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b86d6:	7c00      	ldrb	r0, [r0, #16]
   b86d8:	2100      	movs	r1, #0
   b86da:	f7ff b97f 	b.w	b79dc <hal_i2c_available>

000b86de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b86de:	7c00      	ldrb	r0, [r0, #16]
   b86e0:	2100      	movs	r1, #0
   b86e2:	f7ff b983 	b.w	b79ec <hal_i2c_read>

000b86e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b86e6:	7c00      	ldrb	r0, [r0, #16]
   b86e8:	2100      	movs	r1, #0
   b86ea:	f7ff b987 	b.w	b79fc <hal_i2c_peek>

000b86ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b86ee:	7c00      	ldrb	r0, [r0, #16]
   b86f0:	2100      	movs	r1, #0
   b86f2:	f7ff b98b 	b.w	b7a0c <hal_i2c_flush>

000b86f6 <_ZN7TwoWireD0Ev>:
   b86f6:	b510      	push	{r4, lr}
   b86f8:	2114      	movs	r1, #20
   b86fa:	4604      	mov	r4, r0
   b86fc:	f7fb fccd 	bl	b409a <_ZdlPvj>
   b8700:	4620      	mov	r0, r4
   b8702:	bd10      	pop	{r4, pc}

000b8704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8704:	b510      	push	{r4, lr}
   b8706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b870a:	4604      	mov	r4, r0
   b870c:	4608      	mov	r0, r1
   b870e:	2100      	movs	r1, #0
   b8710:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8714:	4b03      	ldr	r3, [pc, #12]	; (b8724 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8716:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8718:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b871a:	4611      	mov	r1, r2
   b871c:	f7ff f986 	bl	b7a2c <hal_i2c_init>
}
   b8720:	4620      	mov	r0, r4
   b8722:	bd10      	pop	{r4, pc}
   b8724:	000babf8 	.word	0x000babf8

000b8728 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b8728:	7c00      	ldrb	r0, [r0, #16]
   b872a:	2200      	movs	r2, #0
   b872c:	f7ff b92e 	b.w	b798c <hal_i2c_set_speed>

000b8730 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8730:	2300      	movs	r3, #0
   b8732:	7c00      	ldrb	r0, [r0, #16]
   b8734:	461a      	mov	r2, r3
   b8736:	4619      	mov	r1, r3
   b8738:	f7ff b930 	b.w	b799c <hal_i2c_begin>

000b873c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b873c:	7c00      	ldrb	r0, [r0, #16]
   b873e:	2200      	movs	r2, #0
   b8740:	f7ff b934 	b.w	b79ac <hal_i2c_begin_transmission>

000b8744 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8744:	b2c9      	uxtb	r1, r1
   b8746:	f7ff bff9 	b.w	b873c <_ZN7TwoWire17beginTransmissionEh>

000b874a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b874a:	7c00      	ldrb	r0, [r0, #16]
   b874c:	2200      	movs	r2, #0
   b874e:	f7ff b935 	b.w	b79bc <hal_i2c_end_transmission>

000b8752 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8752:	2101      	movs	r1, #1
   b8754:	f7ff bff9 	b.w	b874a <_ZN7TwoWire15endTransmissionEh>

000b8758 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8758:	2200      	movs	r2, #0
   b875a:	6840      	ldr	r0, [r0, #4]
   b875c:	4611      	mov	r1, r2
   b875e:	f7ff ba29 	b.w	b7bb4 <network_ready>

000b8762 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8762:	2200      	movs	r2, #0
   b8764:	6840      	ldr	r0, [r0, #4]
   b8766:	4611      	mov	r1, r2
   b8768:	f7ff ba44 	b.w	b7bf4 <network_listening>

000b876c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b876c:	2200      	movs	r2, #0
   b876e:	6840      	ldr	r0, [r0, #4]
   b8770:	4611      	mov	r1, r2
   b8772:	f7ff ba4f 	b.w	b7c14 <network_get_listen_timeout>

000b8776 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8776:	6840      	ldr	r0, [r0, #4]
   b8778:	2200      	movs	r2, #0
   b877a:	f7ff ba43 	b.w	b7c04 <network_set_listen_timeout>

000b877e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b877e:	6840      	ldr	r0, [r0, #4]
   b8780:	2200      	movs	r2, #0
   b8782:	f081 0101 	eor.w	r1, r1, #1
   b8786:	f7ff ba2d 	b.w	b7be4 <network_listen>

000b878a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b878a:	2300      	movs	r3, #0
   b878c:	6840      	ldr	r0, [r0, #4]
   b878e:	461a      	mov	r2, r3
   b8790:	4619      	mov	r1, r3
   b8792:	f7ff ba1f 	b.w	b7bd4 <network_off>

000b8796 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8796:	2300      	movs	r3, #0
   b8798:	6840      	ldr	r0, [r0, #4]
   b879a:	461a      	mov	r2, r3
   b879c:	4619      	mov	r1, r3
   b879e:	f7ff ba11 	b.w	b7bc4 <network_on>

000b87a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b87a2:	2200      	movs	r2, #0
   b87a4:	6840      	ldr	r0, [r0, #4]
   b87a6:	4611      	mov	r1, r2
   b87a8:	f7ff b9f4 	b.w	b7b94 <network_connecting>

000b87ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b87ac:	6840      	ldr	r0, [r0, #4]
   b87ae:	2200      	movs	r2, #0
   b87b0:	2102      	movs	r1, #2
   b87b2:	f7ff b9f7 	b.w	b7ba4 <network_disconnect>

000b87b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b87b6:	2300      	movs	r3, #0
   b87b8:	6840      	ldr	r0, [r0, #4]
   b87ba:	461a      	mov	r2, r3
   b87bc:	f7ff b9e2 	b.w	b7b84 <network_connect>

000b87c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b87c0:	4b02      	ldr	r3, [pc, #8]	; (b87cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b87c2:	2204      	movs	r2, #4
   b87c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b87c6:	4a02      	ldr	r2, [pc, #8]	; (b87d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b87c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b87ca:	4770      	bx	lr
   b87cc:	2003e710 	.word	0x2003e710
   b87d0:	000bac20 	.word	0x000bac20

000b87d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b87d4:	2300      	movs	r3, #0
   b87d6:	6840      	ldr	r0, [r0, #4]
   b87d8:	461a      	mov	r2, r3
   b87da:	f7ff b9d3 	b.w	b7b84 <network_connect>

000b87de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b87de:	6840      	ldr	r0, [r0, #4]
   b87e0:	2200      	movs	r2, #0
   b87e2:	2102      	movs	r1, #2
   b87e4:	f7ff b9de 	b.w	b7ba4 <network_disconnect>

000b87e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b87e8:	2200      	movs	r2, #0
   b87ea:	6840      	ldr	r0, [r0, #4]
   b87ec:	4611      	mov	r1, r2
   b87ee:	f7ff b9d1 	b.w	b7b94 <network_connecting>

000b87f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b87f2:	2200      	movs	r2, #0
   b87f4:	6840      	ldr	r0, [r0, #4]
   b87f6:	4611      	mov	r1, r2
   b87f8:	f7ff b9dc 	b.w	b7bb4 <network_ready>

000b87fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b87fc:	2300      	movs	r3, #0
   b87fe:	6840      	ldr	r0, [r0, #4]
   b8800:	461a      	mov	r2, r3
   b8802:	4619      	mov	r1, r3
   b8804:	f7ff b9de 	b.w	b7bc4 <network_on>

000b8808 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8808:	2300      	movs	r3, #0
   b880a:	6840      	ldr	r0, [r0, #4]
   b880c:	461a      	mov	r2, r3
   b880e:	4619      	mov	r1, r3
   b8810:	f7ff b9e0 	b.w	b7bd4 <network_off>

000b8814 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8814:	6840      	ldr	r0, [r0, #4]
   b8816:	2100      	movs	r1, #0
   b8818:	f7ff ba04 	b.w	b7c24 <network_is_on>

000b881c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b881c:	6840      	ldr	r0, [r0, #4]
   b881e:	2100      	movs	r1, #0
   b8820:	f7ff ba08 	b.w	b7c34 <network_is_off>

000b8824 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8824:	6840      	ldr	r0, [r0, #4]
   b8826:	2200      	movs	r2, #0
   b8828:	f081 0101 	eor.w	r1, r1, #1
   b882c:	f7ff b9da 	b.w	b7be4 <network_listen>

000b8830 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8830:	6840      	ldr	r0, [r0, #4]
   b8832:	2200      	movs	r2, #0
   b8834:	f7ff b9e6 	b.w	b7c04 <network_set_listen_timeout>

000b8838 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8838:	2200      	movs	r2, #0
   b883a:	6840      	ldr	r0, [r0, #4]
   b883c:	4611      	mov	r1, r2
   b883e:	f7ff b9e9 	b.w	b7c14 <network_get_listen_timeout>

000b8842 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8842:	2200      	movs	r2, #0
   b8844:	6840      	ldr	r0, [r0, #4]
   b8846:	4611      	mov	r1, r2
   b8848:	f7ff b9d4 	b.w	b7bf4 <network_listening>

000b884c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b884c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8850:	b095      	sub	sp, #84	; 0x54
   b8852:	4614      	mov	r4, r2
   b8854:	460d      	mov	r5, r1
   b8856:	4607      	mov	r7, r0
    IPAddress addr;
   b8858:	f7ff fe10 	bl	b847c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b885c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b885e:	221c      	movs	r2, #28
   b8860:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8862:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8864:	f000 fe72 	bl	b954c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8868:	2340      	movs	r3, #64	; 0x40
   b886a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b886c:	4620      	mov	r0, r4
   b886e:	466b      	mov	r3, sp
   b8870:	aa0c      	add	r2, sp, #48	; 0x30
   b8872:	2100      	movs	r1, #0
   b8874:	f7fe ffba 	bl	b77ec <netdb_getaddrinfo>
    if (!r) {
   b8878:	4604      	mov	r4, r0
   b887a:	2800      	cmp	r0, #0
   b887c:	d14b      	bne.n	b8916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b887e:	4602      	mov	r2, r0
   b8880:	2101      	movs	r1, #1
   b8882:	6868      	ldr	r0, [r5, #4]
   b8884:	f7ff f996 	bl	b7bb4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8888:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b888a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b888c:	4622      	mov	r2, r4
   b888e:	6868      	ldr	r0, [r5, #4]
   b8890:	f7ff f990 	bl	b7bb4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8894:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8896:	4681      	mov	r9, r0
        bool ok = false;
   b8898:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b889a:	2e00      	cmp	r6, #0
   b889c:	d03b      	beq.n	b8916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b889e:	2900      	cmp	r1, #0
   b88a0:	d139      	bne.n	b8916 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b88a2:	6873      	ldr	r3, [r6, #4]
   b88a4:	2b02      	cmp	r3, #2
   b88a6:	d003      	beq.n	b88b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b88a8:	2b0a      	cmp	r3, #10
   b88aa:	d011      	beq.n	b88d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88ac:	69f6      	ldr	r6, [r6, #28]
   b88ae:	e7f4      	b.n	b889a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b88b0:	f1b8 0f00 	cmp.w	r8, #0
   b88b4:	d0fa      	beq.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b88b6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b88b8:	a806      	add	r0, sp, #24
   b88ba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b88bc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b88be:	f7ff fe0b 	bl	b84d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b88c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88c4:	1d3c      	adds	r4, r7, #4
   b88c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88c8:	682b      	ldr	r3, [r5, #0]
   b88ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88cc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b88ce:	e7ed      	b.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b88d0:	f1b9 0f00 	cmp.w	r9, #0
   b88d4:	d0ea      	beq.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b88d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b88d8:	2210      	movs	r2, #16
   b88da:	a801      	add	r0, sp, #4
   b88dc:	f000 fe36 	bl	b954c <memset>
                    a.v = 6;
   b88e0:	2306      	movs	r3, #6
   b88e2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b88e6:	ad01      	add	r5, sp, #4
   b88e8:	f104 0308 	add.w	r3, r4, #8
   b88ec:	3418      	adds	r4, #24
   b88ee:	6818      	ldr	r0, [r3, #0]
   b88f0:	6859      	ldr	r1, [r3, #4]
   b88f2:	462a      	mov	r2, r5
   b88f4:	c203      	stmia	r2!, {r0, r1}
   b88f6:	3308      	adds	r3, #8
   b88f8:	42a3      	cmp	r3, r4
   b88fa:	4615      	mov	r5, r2
   b88fc:	d1f7      	bne.n	b88ee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b88fe:	a901      	add	r1, sp, #4
   b8900:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8902:	ad07      	add	r5, sp, #28
   b8904:	f7ff fdc8 	bl	b8498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b890a:	1d3c      	adds	r4, r7, #4
   b890c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b890e:	682b      	ldr	r3, [r5, #0]
   b8910:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8912:	4649      	mov	r1, r9
   b8914:	e7ca      	b.n	b88ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8916:	9800      	ldr	r0, [sp, #0]
   b8918:	f7fe ff60 	bl	b77dc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b891c:	4638      	mov	r0, r7
   b891e:	b015      	add	sp, #84	; 0x54
   b8920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8924 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8924:	4b02      	ldr	r3, [pc, #8]	; (b8930 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8926:	4a03      	ldr	r2, [pc, #12]	; (b8934 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8928:	601a      	str	r2, [r3, #0]
   b892a:	2200      	movs	r2, #0
   b892c:	605a      	str	r2, [r3, #4]

} // spark
   b892e:	4770      	bx	lr
   b8930:	2003e718 	.word	0x2003e718
   b8934:	000bac5c 	.word	0x000bac5c

000b8938 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8938:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b893a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b893c:	d902      	bls.n	b8944 <pinAvailable+0xc>
    return false;
   b893e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8940:	b002      	add	sp, #8
   b8942:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8944:	f1a0 030b 	sub.w	r3, r0, #11
   b8948:	2b02      	cmp	r3, #2
   b894a:	d81a      	bhi.n	b8982 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b894c:	4c17      	ldr	r4, [pc, #92]	; (b89ac <pinAvailable+0x74>)
   b894e:	7821      	ldrb	r1, [r4, #0]
   b8950:	f3bf 8f5b 	dmb	ish
   b8954:	f011 0101 	ands.w	r1, r1, #1
   b8958:	d10b      	bne.n	b8972 <pinAvailable+0x3a>
   b895a:	4620      	mov	r0, r4
   b895c:	9101      	str	r1, [sp, #4]
   b895e:	f7fb fbab 	bl	b40b8 <__cxa_guard_acquire>
   b8962:	9901      	ldr	r1, [sp, #4]
   b8964:	b128      	cbz	r0, b8972 <pinAvailable+0x3a>
   b8966:	4812      	ldr	r0, [pc, #72]	; (b89b0 <pinAvailable+0x78>)
   b8968:	f7ff fa00 	bl	b7d6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b896c:	4620      	mov	r0, r4
   b896e:	f7fb fba8 	bl	b40c2 <__cxa_guard_release>
   b8972:	4b0f      	ldr	r3, [pc, #60]	; (b89b0 <pinAvailable+0x78>)
   b8974:	7818      	ldrb	r0, [r3, #0]
   b8976:	f7ff f879 	bl	b7a6c <hal_spi_is_enabled>
   b897a:	2800      	cmp	r0, #0
   b897c:	d1df      	bne.n	b893e <pinAvailable+0x6>
  return true; // 'pin' is available
   b897e:	2001      	movs	r0, #1
   b8980:	e7de      	b.n	b8940 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8982:	2801      	cmp	r0, #1
   b8984:	d809      	bhi.n	b899a <pinAvailable+0x62>
   b8986:	f000 f8d9 	bl	b8b3c <_Z19__fetch_global_Wirev>
   b898a:	2100      	movs	r1, #0
   b898c:	7c00      	ldrb	r0, [r0, #16]
   b898e:	f7ff f845 	bl	b7a1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8992:	f080 0001 	eor.w	r0, r0, #1
   b8996:	b2c0      	uxtb	r0, r0
   b8998:	e7d2      	b.n	b8940 <pinAvailable+0x8>
   b899a:	3809      	subs	r0, #9
   b899c:	2801      	cmp	r0, #1
   b899e:	d8ee      	bhi.n	b897e <pinAvailable+0x46>
   b89a0:	f000 f87a 	bl	b8a98 <_Z22__fetch_global_Serial1v>
   b89a4:	7c00      	ldrb	r0, [r0, #16]
   b89a6:	f7fe ffd9 	bl	b795c <hal_usart_is_enabled>
   b89aa:	e7f2      	b.n	b8992 <pinAvailable+0x5a>
   b89ac:	2003dfc8 	.word	0x2003dfc8
   b89b0:	2003dfcc 	.word	0x2003dfcc

000b89b4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b89b4:	2823      	cmp	r0, #35	; 0x23
{
   b89b6:	b538      	push	{r3, r4, r5, lr}
   b89b8:	4604      	mov	r4, r0
   b89ba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b89bc:	d80a      	bhi.n	b89d4 <pinMode+0x20>
   b89be:	29ff      	cmp	r1, #255	; 0xff
   b89c0:	d008      	beq.n	b89d4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b89c2:	f7ff ffb9 	bl	b8938 <pinAvailable>
   b89c6:	b128      	cbz	r0, b89d4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b89c8:	4629      	mov	r1, r5
   b89ca:	4620      	mov	r0, r4
}
   b89cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b89d0:	f7fe bf1c 	b.w	b780c <HAL_Pin_Mode>
}
   b89d4:	bd38      	pop	{r3, r4, r5, pc}

000b89d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b89d6:	b538      	push	{r3, r4, r5, lr}
   b89d8:	4604      	mov	r4, r0
   b89da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b89dc:	f7fe ff1e 	bl	b781c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b89e0:	28ff      	cmp	r0, #255	; 0xff
   b89e2:	d010      	beq.n	b8a06 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b89e4:	2806      	cmp	r0, #6
   b89e6:	d804      	bhi.n	b89f2 <digitalWrite+0x1c>
   b89e8:	234d      	movs	r3, #77	; 0x4d
   b89ea:	fa23 f000 	lsr.w	r0, r3, r0
   b89ee:	07c3      	lsls	r3, r0, #31
   b89f0:	d409      	bmi.n	b8a06 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b89f2:	4620      	mov	r0, r4
   b89f4:	f7ff ffa0 	bl	b8938 <pinAvailable>
   b89f8:	b128      	cbz	r0, b8a06 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b89fa:	4629      	mov	r1, r5
   b89fc:	4620      	mov	r0, r4
}
   b89fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8a02:	f7fe bf13 	b.w	b782c <HAL_GPIO_Write>
}
   b8a06:	bd38      	pop	{r3, r4, r5, pc}

000b8a08 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8a08:	b510      	push	{r4, lr}
   b8a0a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8a0c:	f7fe ff06 	bl	b781c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8a10:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8a12:	b2db      	uxtb	r3, r3
   b8a14:	2b01      	cmp	r3, #1
   b8a16:	d908      	bls.n	b8a2a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8a18:	4620      	mov	r0, r4
   b8a1a:	f7ff ff8d 	bl	b8938 <pinAvailable>
   b8a1e:	b120      	cbz	r0, b8a2a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8a20:	4620      	mov	r0, r4
}
   b8a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8a26:	f7fe bf09 	b.w	b783c <HAL_GPIO_Read>
}
   b8a2a:	2000      	movs	r0, #0
   b8a2c:	bd10      	pop	{r4, pc}

000b8a2e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8a2e:	280d      	cmp	r0, #13
{
   b8a30:	b510      	push	{r4, lr}
   b8a32:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8a34:	bf9c      	itt	ls
   b8a36:	340e      	addls	r4, #14
   b8a38:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8a3a:	4620      	mov	r0, r4
   b8a3c:	f7ff ff7c 	bl	b8938 <pinAvailable>
   b8a40:	b150      	cbz	r0, b8a58 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8a42:	2103      	movs	r1, #3
   b8a44:	4620      	mov	r0, r4
   b8a46:	f7fe fed9 	bl	b77fc <HAL_Validate_Pin_Function>
   b8a4a:	2803      	cmp	r0, #3
   b8a4c:	d104      	bne.n	b8a58 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8a4e:	4620      	mov	r0, r4
}
   b8a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8a54:	f7fe bf0a 	b.w	b786c <hal_adc_read>
}
   b8a58:	2000      	movs	r0, #0
   b8a5a:	bd10      	pop	{r4, pc}

000b8a5c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b8a5c:	f7fe bf0e 	b.w	b787c <HAL_Pulse_In>

000b8a60 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a60:	4770      	bx	lr
	...

000b8a64 <_Z20acquireSerial1Bufferv>:
{
   b8a64:	b538      	push	{r3, r4, r5, lr}
   b8a66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8a68:	2514      	movs	r5, #20
   b8a6a:	462a      	mov	r2, r5
   b8a6c:	2100      	movs	r1, #0
   b8a6e:	f000 fd6d 	bl	b954c <memset>
   b8a72:	8025      	strh	r5, [r4, #0]
   b8a74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a76:	4907      	ldr	r1, [pc, #28]	; (b8a94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8a78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8a7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a7e:	f000 f881 	bl	b8b84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a82:	4904      	ldr	r1, [pc, #16]	; (b8a94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8a84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a86:	4628      	mov	r0, r5
   b8a88:	f000 f87c 	bl	b8b84 <_ZnajRKSt9nothrow_t>
    };
   b8a8c:	60e0      	str	r0, [r4, #12]
}
   b8a8e:	4620      	mov	r0, r4
   b8a90:	bd38      	pop	{r3, r4, r5, pc}
   b8a92:	bf00      	nop
   b8a94:	000bac90 	.word	0x000bac90

000b8a98 <_Z22__fetch_global_Serial1v>:
{
   b8a98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a9a:	4d0e      	ldr	r5, [pc, #56]	; (b8ad4 <_Z22__fetch_global_Serial1v+0x3c>)
   b8a9c:	7829      	ldrb	r1, [r5, #0]
   b8a9e:	f3bf 8f5b 	dmb	ish
   b8aa2:	f011 0401 	ands.w	r4, r1, #1
{
   b8aa6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8aa8:	d111      	bne.n	b8ace <_Z22__fetch_global_Serial1v+0x36>
   b8aaa:	4628      	mov	r0, r5
   b8aac:	f7fb fb04 	bl	b40b8 <__cxa_guard_acquire>
   b8ab0:	b168      	cbz	r0, b8ace <_Z22__fetch_global_Serial1v+0x36>
   b8ab2:	a801      	add	r0, sp, #4
   b8ab4:	f7ff ffd6 	bl	b8a64 <_Z20acquireSerial1Bufferv>
   b8ab8:	aa01      	add	r2, sp, #4
   b8aba:	4621      	mov	r1, r4
   b8abc:	4806      	ldr	r0, [pc, #24]	; (b8ad8 <_Z22__fetch_global_Serial1v+0x40>)
   b8abe:	f7ff fde1 	bl	b8684 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8ac2:	4628      	mov	r0, r5
   b8ac4:	f7fb fafd 	bl	b40c2 <__cxa_guard_release>
   b8ac8:	4804      	ldr	r0, [pc, #16]	; (b8adc <_Z22__fetch_global_Serial1v+0x44>)
   b8aca:	f000 fd23 	bl	b9514 <atexit>
    return serial1;
}
   b8ace:	4802      	ldr	r0, [pc, #8]	; (b8ad8 <_Z22__fetch_global_Serial1v+0x40>)
   b8ad0:	b007      	add	sp, #28
   b8ad2:	bd30      	pop	{r4, r5, pc}
   b8ad4:	2003e720 	.word	0x2003e720
   b8ad8:	2003e724 	.word	0x2003e724
   b8adc:	000b8a61 	.word	0x000b8a61

000b8ae0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b8ae0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b8ae2:	4c08      	ldr	r4, [pc, #32]	; (b8b04 <_Z21__fetch_global_EEPROMv+0x24>)
   b8ae4:	7823      	ldrb	r3, [r4, #0]
   b8ae6:	f3bf 8f5b 	dmb	ish
   b8aea:	07db      	lsls	r3, r3, #31
   b8aec:	d408      	bmi.n	b8b00 <_Z21__fetch_global_EEPROMv+0x20>
   b8aee:	4620      	mov	r0, r4
   b8af0:	f7fb fae2 	bl	b40b8 <__cxa_guard_acquire>
   b8af4:	b120      	cbz	r0, b8b00 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b8af6:	f7fe fee1 	bl	b78bc <HAL_EEPROM_Init>
   b8afa:	4620      	mov	r0, r4
   b8afc:	f7fb fae1 	bl	b40c2 <__cxa_guard_release>
	return eeprom;
}
   b8b00:	4801      	ldr	r0, [pc, #4]	; (b8b08 <_Z21__fetch_global_EEPROMv+0x28>)
   b8b02:	bd10      	pop	{r4, pc}
   b8b04:	2003e73c 	.word	0x2003e73c
   b8b08:	2003e740 	.word	0x2003e740

000b8b0c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b0c:	4770      	bx	lr
	...

000b8b10 <_Z17acquireWireBufferv>:
{
   b8b10:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8b12:	2520      	movs	r5, #32
   b8b14:	2314      	movs	r3, #20
{
   b8b16:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8b18:	6003      	str	r3, [r0, #0]
   b8b1a:	6085      	str	r5, [r0, #8]
   b8b1c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b1e:	4906      	ldr	r1, [pc, #24]	; (b8b38 <_Z17acquireWireBufferv+0x28>)
   b8b20:	4628      	mov	r0, r5
   b8b22:	f000 f82f 	bl	b8b84 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b26:	4904      	ldr	r1, [pc, #16]	; (b8b38 <_Z17acquireWireBufferv+0x28>)
	};
   b8b28:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b2a:	4628      	mov	r0, r5
   b8b2c:	f000 f82a 	bl	b8b84 <_ZnajRKSt9nothrow_t>
	};
   b8b30:	60e0      	str	r0, [r4, #12]
}
   b8b32:	4620      	mov	r0, r4
   b8b34:	bd38      	pop	{r3, r4, r5, pc}
   b8b36:	bf00      	nop
   b8b38:	000bac90 	.word	0x000bac90

000b8b3c <_Z19__fetch_global_Wirev>:
{
   b8b3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b3e:	4d0e      	ldr	r5, [pc, #56]	; (b8b78 <_Z19__fetch_global_Wirev+0x3c>)
   b8b40:	7829      	ldrb	r1, [r5, #0]
   b8b42:	f3bf 8f5b 	dmb	ish
   b8b46:	f011 0401 	ands.w	r4, r1, #1
{
   b8b4a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b4c:	d111      	bne.n	b8b72 <_Z19__fetch_global_Wirev+0x36>
   b8b4e:	4628      	mov	r0, r5
   b8b50:	f7fb fab2 	bl	b40b8 <__cxa_guard_acquire>
   b8b54:	b168      	cbz	r0, b8b72 <_Z19__fetch_global_Wirev+0x36>
   b8b56:	a801      	add	r0, sp, #4
   b8b58:	f7ff ffda 	bl	b8b10 <_Z17acquireWireBufferv>
   b8b5c:	aa01      	add	r2, sp, #4
   b8b5e:	4621      	mov	r1, r4
   b8b60:	4806      	ldr	r0, [pc, #24]	; (b8b7c <_Z19__fetch_global_Wirev+0x40>)
   b8b62:	f7ff fdcf 	bl	b8704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8b66:	4628      	mov	r0, r5
   b8b68:	f7fb faab 	bl	b40c2 <__cxa_guard_release>
   b8b6c:	4804      	ldr	r0, [pc, #16]	; (b8b80 <_Z19__fetch_global_Wirev+0x44>)
   b8b6e:	f000 fcd1 	bl	b9514 <atexit>
	return wire;
}
   b8b72:	4802      	ldr	r0, [pc, #8]	; (b8b7c <_Z19__fetch_global_Wirev+0x40>)
   b8b74:	b007      	add	sp, #28
   b8b76:	bd30      	pop	{r4, r5, pc}
   b8b78:	2003e744 	.word	0x2003e744
   b8b7c:	2003e748 	.word	0x2003e748
   b8b80:	000b8b0d 	.word	0x000b8b0d

000b8b84 <_ZnajRKSt9nothrow_t>:
   b8b84:	f7fb ba87 	b.w	b4096 <_Znaj>

000b8b88 <__aeabi_drsub>:
   b8b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8b8c:	e002      	b.n	b8b94 <__adddf3>
   b8b8e:	bf00      	nop

000b8b90 <__aeabi_dsub>:
   b8b90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8b94 <__adddf3>:
   b8b94:	b530      	push	{r4, r5, lr}
   b8b96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8b9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8b9e:	ea94 0f05 	teq	r4, r5
   b8ba2:	bf08      	it	eq
   b8ba4:	ea90 0f02 	teqeq	r0, r2
   b8ba8:	bf1f      	itttt	ne
   b8baa:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8bae:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8bb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8bb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8bba:	f000 80e2 	beq.w	b8d82 <__adddf3+0x1ee>
   b8bbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8bc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8bc6:	bfb8      	it	lt
   b8bc8:	426d      	neglt	r5, r5
   b8bca:	dd0c      	ble.n	b8be6 <__adddf3+0x52>
   b8bcc:	442c      	add	r4, r5
   b8bce:	ea80 0202 	eor.w	r2, r0, r2
   b8bd2:	ea81 0303 	eor.w	r3, r1, r3
   b8bd6:	ea82 0000 	eor.w	r0, r2, r0
   b8bda:	ea83 0101 	eor.w	r1, r3, r1
   b8bde:	ea80 0202 	eor.w	r2, r0, r2
   b8be2:	ea81 0303 	eor.w	r3, r1, r3
   b8be6:	2d36      	cmp	r5, #54	; 0x36
   b8be8:	bf88      	it	hi
   b8bea:	bd30      	pophi	{r4, r5, pc}
   b8bec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8bf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8bf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8bfc:	d002      	beq.n	b8c04 <__adddf3+0x70>
   b8bfe:	4240      	negs	r0, r0
   b8c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8c04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8c08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8c0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8c10:	d002      	beq.n	b8c18 <__adddf3+0x84>
   b8c12:	4252      	negs	r2, r2
   b8c14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8c18:	ea94 0f05 	teq	r4, r5
   b8c1c:	f000 80a7 	beq.w	b8d6e <__adddf3+0x1da>
   b8c20:	f1a4 0401 	sub.w	r4, r4, #1
   b8c24:	f1d5 0e20 	rsbs	lr, r5, #32
   b8c28:	db0d      	blt.n	b8c46 <__adddf3+0xb2>
   b8c2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8c2e:	fa22 f205 	lsr.w	r2, r2, r5
   b8c32:	1880      	adds	r0, r0, r2
   b8c34:	f141 0100 	adc.w	r1, r1, #0
   b8c38:	fa03 f20e 	lsl.w	r2, r3, lr
   b8c3c:	1880      	adds	r0, r0, r2
   b8c3e:	fa43 f305 	asr.w	r3, r3, r5
   b8c42:	4159      	adcs	r1, r3
   b8c44:	e00e      	b.n	b8c64 <__adddf3+0xd0>
   b8c46:	f1a5 0520 	sub.w	r5, r5, #32
   b8c4a:	f10e 0e20 	add.w	lr, lr, #32
   b8c4e:	2a01      	cmp	r2, #1
   b8c50:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8c54:	bf28      	it	cs
   b8c56:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8c5a:	fa43 f305 	asr.w	r3, r3, r5
   b8c5e:	18c0      	adds	r0, r0, r3
   b8c60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8c68:	d507      	bpl.n	b8c7a <__adddf3+0xe6>
   b8c6a:	f04f 0e00 	mov.w	lr, #0
   b8c6e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8c72:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8c76:	eb6e 0101 	sbc.w	r1, lr, r1
   b8c7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8c7e:	d31b      	bcc.n	b8cb8 <__adddf3+0x124>
   b8c80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8c84:	d30c      	bcc.n	b8ca0 <__adddf3+0x10c>
   b8c86:	0849      	lsrs	r1, r1, #1
   b8c88:	ea5f 0030 	movs.w	r0, r0, rrx
   b8c8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8c90:	f104 0401 	add.w	r4, r4, #1
   b8c94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8c98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8c9c:	f080 809a 	bcs.w	b8dd4 <__adddf3+0x240>
   b8ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8ca4:	bf08      	it	eq
   b8ca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8caa:	f150 0000 	adcs.w	r0, r0, #0
   b8cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8cb2:	ea41 0105 	orr.w	r1, r1, r5
   b8cb6:	bd30      	pop	{r4, r5, pc}
   b8cb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8cbc:	4140      	adcs	r0, r0
   b8cbe:	eb41 0101 	adc.w	r1, r1, r1
   b8cc2:	3c01      	subs	r4, #1
   b8cc4:	bf28      	it	cs
   b8cc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8cca:	d2e9      	bcs.n	b8ca0 <__adddf3+0x10c>
   b8ccc:	f091 0f00 	teq	r1, #0
   b8cd0:	bf04      	itt	eq
   b8cd2:	4601      	moveq	r1, r0
   b8cd4:	2000      	moveq	r0, #0
   b8cd6:	fab1 f381 	clz	r3, r1
   b8cda:	bf08      	it	eq
   b8cdc:	3320      	addeq	r3, #32
   b8cde:	f1a3 030b 	sub.w	r3, r3, #11
   b8ce2:	f1b3 0220 	subs.w	r2, r3, #32
   b8ce6:	da0c      	bge.n	b8d02 <__adddf3+0x16e>
   b8ce8:	320c      	adds	r2, #12
   b8cea:	dd08      	ble.n	b8cfe <__adddf3+0x16a>
   b8cec:	f102 0c14 	add.w	ip, r2, #20
   b8cf0:	f1c2 020c 	rsb	r2, r2, #12
   b8cf4:	fa01 f00c 	lsl.w	r0, r1, ip
   b8cf8:	fa21 f102 	lsr.w	r1, r1, r2
   b8cfc:	e00c      	b.n	b8d18 <__adddf3+0x184>
   b8cfe:	f102 0214 	add.w	r2, r2, #20
   b8d02:	bfd8      	it	le
   b8d04:	f1c2 0c20 	rsble	ip, r2, #32
   b8d08:	fa01 f102 	lsl.w	r1, r1, r2
   b8d0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8d10:	bfdc      	itt	le
   b8d12:	ea41 010c 	orrle.w	r1, r1, ip
   b8d16:	4090      	lslle	r0, r2
   b8d18:	1ae4      	subs	r4, r4, r3
   b8d1a:	bfa2      	ittt	ge
   b8d1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8d20:	4329      	orrge	r1, r5
   b8d22:	bd30      	popge	{r4, r5, pc}
   b8d24:	ea6f 0404 	mvn.w	r4, r4
   b8d28:	3c1f      	subs	r4, #31
   b8d2a:	da1c      	bge.n	b8d66 <__adddf3+0x1d2>
   b8d2c:	340c      	adds	r4, #12
   b8d2e:	dc0e      	bgt.n	b8d4e <__adddf3+0x1ba>
   b8d30:	f104 0414 	add.w	r4, r4, #20
   b8d34:	f1c4 0220 	rsb	r2, r4, #32
   b8d38:	fa20 f004 	lsr.w	r0, r0, r4
   b8d3c:	fa01 f302 	lsl.w	r3, r1, r2
   b8d40:	ea40 0003 	orr.w	r0, r0, r3
   b8d44:	fa21 f304 	lsr.w	r3, r1, r4
   b8d48:	ea45 0103 	orr.w	r1, r5, r3
   b8d4c:	bd30      	pop	{r4, r5, pc}
   b8d4e:	f1c4 040c 	rsb	r4, r4, #12
   b8d52:	f1c4 0220 	rsb	r2, r4, #32
   b8d56:	fa20 f002 	lsr.w	r0, r0, r2
   b8d5a:	fa01 f304 	lsl.w	r3, r1, r4
   b8d5e:	ea40 0003 	orr.w	r0, r0, r3
   b8d62:	4629      	mov	r1, r5
   b8d64:	bd30      	pop	{r4, r5, pc}
   b8d66:	fa21 f004 	lsr.w	r0, r1, r4
   b8d6a:	4629      	mov	r1, r5
   b8d6c:	bd30      	pop	{r4, r5, pc}
   b8d6e:	f094 0f00 	teq	r4, #0
   b8d72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8d76:	bf06      	itte	eq
   b8d78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8d7c:	3401      	addeq	r4, #1
   b8d7e:	3d01      	subne	r5, #1
   b8d80:	e74e      	b.n	b8c20 <__adddf3+0x8c>
   b8d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8d86:	bf18      	it	ne
   b8d88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8d8c:	d029      	beq.n	b8de2 <__adddf3+0x24e>
   b8d8e:	ea94 0f05 	teq	r4, r5
   b8d92:	bf08      	it	eq
   b8d94:	ea90 0f02 	teqeq	r0, r2
   b8d98:	d005      	beq.n	b8da6 <__adddf3+0x212>
   b8d9a:	ea54 0c00 	orrs.w	ip, r4, r0
   b8d9e:	bf04      	itt	eq
   b8da0:	4619      	moveq	r1, r3
   b8da2:	4610      	moveq	r0, r2
   b8da4:	bd30      	pop	{r4, r5, pc}
   b8da6:	ea91 0f03 	teq	r1, r3
   b8daa:	bf1e      	ittt	ne
   b8dac:	2100      	movne	r1, #0
   b8dae:	2000      	movne	r0, #0
   b8db0:	bd30      	popne	{r4, r5, pc}
   b8db2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8db6:	d105      	bne.n	b8dc4 <__adddf3+0x230>
   b8db8:	0040      	lsls	r0, r0, #1
   b8dba:	4149      	adcs	r1, r1
   b8dbc:	bf28      	it	cs
   b8dbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8dc2:	bd30      	pop	{r4, r5, pc}
   b8dc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8dc8:	bf3c      	itt	cc
   b8dca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8dce:	bd30      	popcc	{r4, r5, pc}
   b8dd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8dd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8ddc:	f04f 0000 	mov.w	r0, #0
   b8de0:	bd30      	pop	{r4, r5, pc}
   b8de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8de6:	bf1a      	itte	ne
   b8de8:	4619      	movne	r1, r3
   b8dea:	4610      	movne	r0, r2
   b8dec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8df0:	bf1c      	itt	ne
   b8df2:	460b      	movne	r3, r1
   b8df4:	4602      	movne	r2, r0
   b8df6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8dfa:	bf06      	itte	eq
   b8dfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8e00:	ea91 0f03 	teqeq	r1, r3
   b8e04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8e08:	bd30      	pop	{r4, r5, pc}
   b8e0a:	bf00      	nop

000b8e0c <__aeabi_ui2d>:
   b8e0c:	f090 0f00 	teq	r0, #0
   b8e10:	bf04      	itt	eq
   b8e12:	2100      	moveq	r1, #0
   b8e14:	4770      	bxeq	lr
   b8e16:	b530      	push	{r4, r5, lr}
   b8e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8e20:	f04f 0500 	mov.w	r5, #0
   b8e24:	f04f 0100 	mov.w	r1, #0
   b8e28:	e750      	b.n	b8ccc <__adddf3+0x138>
   b8e2a:	bf00      	nop

000b8e2c <__aeabi_i2d>:
   b8e2c:	f090 0f00 	teq	r0, #0
   b8e30:	bf04      	itt	eq
   b8e32:	2100      	moveq	r1, #0
   b8e34:	4770      	bxeq	lr
   b8e36:	b530      	push	{r4, r5, lr}
   b8e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8e40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8e44:	bf48      	it	mi
   b8e46:	4240      	negmi	r0, r0
   b8e48:	f04f 0100 	mov.w	r1, #0
   b8e4c:	e73e      	b.n	b8ccc <__adddf3+0x138>
   b8e4e:	bf00      	nop

000b8e50 <__aeabi_f2d>:
   b8e50:	0042      	lsls	r2, r0, #1
   b8e52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8e56:	ea4f 0131 	mov.w	r1, r1, rrx
   b8e5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8e5e:	bf1f      	itttt	ne
   b8e60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8e64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8e68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8e6c:	4770      	bxne	lr
   b8e6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8e72:	bf08      	it	eq
   b8e74:	4770      	bxeq	lr
   b8e76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8e7a:	bf04      	itt	eq
   b8e7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8e80:	4770      	bxeq	lr
   b8e82:	b530      	push	{r4, r5, lr}
   b8e84:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8e8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8e90:	e71c      	b.n	b8ccc <__adddf3+0x138>
   b8e92:	bf00      	nop

000b8e94 <__aeabi_ul2d>:
   b8e94:	ea50 0201 	orrs.w	r2, r0, r1
   b8e98:	bf08      	it	eq
   b8e9a:	4770      	bxeq	lr
   b8e9c:	b530      	push	{r4, r5, lr}
   b8e9e:	f04f 0500 	mov.w	r5, #0
   b8ea2:	e00a      	b.n	b8eba <__aeabi_l2d+0x16>

000b8ea4 <__aeabi_l2d>:
   b8ea4:	ea50 0201 	orrs.w	r2, r0, r1
   b8ea8:	bf08      	it	eq
   b8eaa:	4770      	bxeq	lr
   b8eac:	b530      	push	{r4, r5, lr}
   b8eae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8eb2:	d502      	bpl.n	b8eba <__aeabi_l2d+0x16>
   b8eb4:	4240      	negs	r0, r0
   b8eb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8eba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8ebe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8ec2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8ec6:	f43f aed8 	beq.w	b8c7a <__adddf3+0xe6>
   b8eca:	f04f 0203 	mov.w	r2, #3
   b8ece:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8ed2:	bf18      	it	ne
   b8ed4:	3203      	addne	r2, #3
   b8ed6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8eda:	bf18      	it	ne
   b8edc:	3203      	addne	r2, #3
   b8ede:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8ee2:	f1c2 0320 	rsb	r3, r2, #32
   b8ee6:	fa00 fc03 	lsl.w	ip, r0, r3
   b8eea:	fa20 f002 	lsr.w	r0, r0, r2
   b8eee:	fa01 fe03 	lsl.w	lr, r1, r3
   b8ef2:	ea40 000e 	orr.w	r0, r0, lr
   b8ef6:	fa21 f102 	lsr.w	r1, r1, r2
   b8efa:	4414      	add	r4, r2
   b8efc:	e6bd      	b.n	b8c7a <__adddf3+0xe6>
   b8efe:	bf00      	nop

000b8f00 <__aeabi_dmul>:
   b8f00:	b570      	push	{r4, r5, r6, lr}
   b8f02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8f06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8f0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8f0e:	bf1d      	ittte	ne
   b8f10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8f14:	ea94 0f0c 	teqne	r4, ip
   b8f18:	ea95 0f0c 	teqne	r5, ip
   b8f1c:	f000 f8de 	bleq	b90dc <__aeabi_dmul+0x1dc>
   b8f20:	442c      	add	r4, r5
   b8f22:	ea81 0603 	eor.w	r6, r1, r3
   b8f26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8f2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8f2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8f32:	bf18      	it	ne
   b8f34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8f38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8f40:	d038      	beq.n	b8fb4 <__aeabi_dmul+0xb4>
   b8f42:	fba0 ce02 	umull	ip, lr, r0, r2
   b8f46:	f04f 0500 	mov.w	r5, #0
   b8f4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8f4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8f52:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8f56:	f04f 0600 	mov.w	r6, #0
   b8f5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8f5e:	f09c 0f00 	teq	ip, #0
   b8f62:	bf18      	it	ne
   b8f64:	f04e 0e01 	orrne.w	lr, lr, #1
   b8f68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8f6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8f70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8f74:	d204      	bcs.n	b8f80 <__aeabi_dmul+0x80>
   b8f76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8f7a:	416d      	adcs	r5, r5
   b8f7c:	eb46 0606 	adc.w	r6, r6, r6
   b8f80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8f84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8f88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8f8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8f90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8f94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8f98:	bf88      	it	hi
   b8f9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8f9e:	d81e      	bhi.n	b8fde <__aeabi_dmul+0xde>
   b8fa0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8fa4:	bf08      	it	eq
   b8fa6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8faa:	f150 0000 	adcs.w	r0, r0, #0
   b8fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8fb2:	bd70      	pop	{r4, r5, r6, pc}
   b8fb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8fb8:	ea46 0101 	orr.w	r1, r6, r1
   b8fbc:	ea40 0002 	orr.w	r0, r0, r2
   b8fc0:	ea81 0103 	eor.w	r1, r1, r3
   b8fc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8fc8:	bfc2      	ittt	gt
   b8fca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8fd2:	bd70      	popgt	{r4, r5, r6, pc}
   b8fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8fd8:	f04f 0e00 	mov.w	lr, #0
   b8fdc:	3c01      	subs	r4, #1
   b8fde:	f300 80ab 	bgt.w	b9138 <__aeabi_dmul+0x238>
   b8fe2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8fe6:	bfde      	ittt	le
   b8fe8:	2000      	movle	r0, #0
   b8fea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8fee:	bd70      	pople	{r4, r5, r6, pc}
   b8ff0:	f1c4 0400 	rsb	r4, r4, #0
   b8ff4:	3c20      	subs	r4, #32
   b8ff6:	da35      	bge.n	b9064 <__aeabi_dmul+0x164>
   b8ff8:	340c      	adds	r4, #12
   b8ffa:	dc1b      	bgt.n	b9034 <__aeabi_dmul+0x134>
   b8ffc:	f104 0414 	add.w	r4, r4, #20
   b9000:	f1c4 0520 	rsb	r5, r4, #32
   b9004:	fa00 f305 	lsl.w	r3, r0, r5
   b9008:	fa20 f004 	lsr.w	r0, r0, r4
   b900c:	fa01 f205 	lsl.w	r2, r1, r5
   b9010:	ea40 0002 	orr.w	r0, r0, r2
   b9014:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b901c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9020:	fa21 f604 	lsr.w	r6, r1, r4
   b9024:	eb42 0106 	adc.w	r1, r2, r6
   b9028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b902c:	bf08      	it	eq
   b902e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9032:	bd70      	pop	{r4, r5, r6, pc}
   b9034:	f1c4 040c 	rsb	r4, r4, #12
   b9038:	f1c4 0520 	rsb	r5, r4, #32
   b903c:	fa00 f304 	lsl.w	r3, r0, r4
   b9040:	fa20 f005 	lsr.w	r0, r0, r5
   b9044:	fa01 f204 	lsl.w	r2, r1, r4
   b9048:	ea40 0002 	orr.w	r0, r0, r2
   b904c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9054:	f141 0100 	adc.w	r1, r1, #0
   b9058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b905c:	bf08      	it	eq
   b905e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9062:	bd70      	pop	{r4, r5, r6, pc}
   b9064:	f1c4 0520 	rsb	r5, r4, #32
   b9068:	fa00 f205 	lsl.w	r2, r0, r5
   b906c:	ea4e 0e02 	orr.w	lr, lr, r2
   b9070:	fa20 f304 	lsr.w	r3, r0, r4
   b9074:	fa01 f205 	lsl.w	r2, r1, r5
   b9078:	ea43 0302 	orr.w	r3, r3, r2
   b907c:	fa21 f004 	lsr.w	r0, r1, r4
   b9080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9084:	fa21 f204 	lsr.w	r2, r1, r4
   b9088:	ea20 0002 	bic.w	r0, r0, r2
   b908c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9094:	bf08      	it	eq
   b9096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b909a:	bd70      	pop	{r4, r5, r6, pc}
   b909c:	f094 0f00 	teq	r4, #0
   b90a0:	d10f      	bne.n	b90c2 <__aeabi_dmul+0x1c2>
   b90a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b90a6:	0040      	lsls	r0, r0, #1
   b90a8:	eb41 0101 	adc.w	r1, r1, r1
   b90ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b90b0:	bf08      	it	eq
   b90b2:	3c01      	subeq	r4, #1
   b90b4:	d0f7      	beq.n	b90a6 <__aeabi_dmul+0x1a6>
   b90b6:	ea41 0106 	orr.w	r1, r1, r6
   b90ba:	f095 0f00 	teq	r5, #0
   b90be:	bf18      	it	ne
   b90c0:	4770      	bxne	lr
   b90c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b90c6:	0052      	lsls	r2, r2, #1
   b90c8:	eb43 0303 	adc.w	r3, r3, r3
   b90cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b90d0:	bf08      	it	eq
   b90d2:	3d01      	subeq	r5, #1
   b90d4:	d0f7      	beq.n	b90c6 <__aeabi_dmul+0x1c6>
   b90d6:	ea43 0306 	orr.w	r3, r3, r6
   b90da:	4770      	bx	lr
   b90dc:	ea94 0f0c 	teq	r4, ip
   b90e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b90e4:	bf18      	it	ne
   b90e6:	ea95 0f0c 	teqne	r5, ip
   b90ea:	d00c      	beq.n	b9106 <__aeabi_dmul+0x206>
   b90ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b90f0:	bf18      	it	ne
   b90f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b90f6:	d1d1      	bne.n	b909c <__aeabi_dmul+0x19c>
   b90f8:	ea81 0103 	eor.w	r1, r1, r3
   b90fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9100:	f04f 0000 	mov.w	r0, #0
   b9104:	bd70      	pop	{r4, r5, r6, pc}
   b9106:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b910a:	bf06      	itte	eq
   b910c:	4610      	moveq	r0, r2
   b910e:	4619      	moveq	r1, r3
   b9110:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9114:	d019      	beq.n	b914a <__aeabi_dmul+0x24a>
   b9116:	ea94 0f0c 	teq	r4, ip
   b911a:	d102      	bne.n	b9122 <__aeabi_dmul+0x222>
   b911c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9120:	d113      	bne.n	b914a <__aeabi_dmul+0x24a>
   b9122:	ea95 0f0c 	teq	r5, ip
   b9126:	d105      	bne.n	b9134 <__aeabi_dmul+0x234>
   b9128:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b912c:	bf1c      	itt	ne
   b912e:	4610      	movne	r0, r2
   b9130:	4619      	movne	r1, r3
   b9132:	d10a      	bne.n	b914a <__aeabi_dmul+0x24a>
   b9134:	ea81 0103 	eor.w	r1, r1, r3
   b9138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b913c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9140:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9144:	f04f 0000 	mov.w	r0, #0
   b9148:	bd70      	pop	{r4, r5, r6, pc}
   b914a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b914e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9152:	bd70      	pop	{r4, r5, r6, pc}

000b9154 <__aeabi_ddiv>:
   b9154:	b570      	push	{r4, r5, r6, lr}
   b9156:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b915a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b915e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9162:	bf1d      	ittte	ne
   b9164:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9168:	ea94 0f0c 	teqne	r4, ip
   b916c:	ea95 0f0c 	teqne	r5, ip
   b9170:	f000 f8a7 	bleq	b92c2 <__aeabi_ddiv+0x16e>
   b9174:	eba4 0405 	sub.w	r4, r4, r5
   b9178:	ea81 0e03 	eor.w	lr, r1, r3
   b917c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9180:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9184:	f000 8088 	beq.w	b9298 <__aeabi_ddiv+0x144>
   b9188:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b918c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9190:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9194:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9198:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b919c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b91a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b91a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b91a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b91ac:	429d      	cmp	r5, r3
   b91ae:	bf08      	it	eq
   b91b0:	4296      	cmpeq	r6, r2
   b91b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b91b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b91ba:	d202      	bcs.n	b91c2 <__aeabi_ddiv+0x6e>
   b91bc:	085b      	lsrs	r3, r3, #1
   b91be:	ea4f 0232 	mov.w	r2, r2, rrx
   b91c2:	1ab6      	subs	r6, r6, r2
   b91c4:	eb65 0503 	sbc.w	r5, r5, r3
   b91c8:	085b      	lsrs	r3, r3, #1
   b91ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b91ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b91d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b91d6:	ebb6 0e02 	subs.w	lr, r6, r2
   b91da:	eb75 0e03 	sbcs.w	lr, r5, r3
   b91de:	bf22      	ittt	cs
   b91e0:	1ab6      	subcs	r6, r6, r2
   b91e2:	4675      	movcs	r5, lr
   b91e4:	ea40 000c 	orrcs.w	r0, r0, ip
   b91e8:	085b      	lsrs	r3, r3, #1
   b91ea:	ea4f 0232 	mov.w	r2, r2, rrx
   b91ee:	ebb6 0e02 	subs.w	lr, r6, r2
   b91f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b91f6:	bf22      	ittt	cs
   b91f8:	1ab6      	subcs	r6, r6, r2
   b91fa:	4675      	movcs	r5, lr
   b91fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9200:	085b      	lsrs	r3, r3, #1
   b9202:	ea4f 0232 	mov.w	r2, r2, rrx
   b9206:	ebb6 0e02 	subs.w	lr, r6, r2
   b920a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b920e:	bf22      	ittt	cs
   b9210:	1ab6      	subcs	r6, r6, r2
   b9212:	4675      	movcs	r5, lr
   b9214:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9218:	085b      	lsrs	r3, r3, #1
   b921a:	ea4f 0232 	mov.w	r2, r2, rrx
   b921e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9222:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9226:	bf22      	ittt	cs
   b9228:	1ab6      	subcs	r6, r6, r2
   b922a:	4675      	movcs	r5, lr
   b922c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9230:	ea55 0e06 	orrs.w	lr, r5, r6
   b9234:	d018      	beq.n	b9268 <__aeabi_ddiv+0x114>
   b9236:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b923a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b923e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9242:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9246:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b924a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b924e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9252:	d1c0      	bne.n	b91d6 <__aeabi_ddiv+0x82>
   b9254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9258:	d10b      	bne.n	b9272 <__aeabi_ddiv+0x11e>
   b925a:	ea41 0100 	orr.w	r1, r1, r0
   b925e:	f04f 0000 	mov.w	r0, #0
   b9262:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9266:	e7b6      	b.n	b91d6 <__aeabi_ddiv+0x82>
   b9268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b926c:	bf04      	itt	eq
   b926e:	4301      	orreq	r1, r0
   b9270:	2000      	moveq	r0, #0
   b9272:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9276:	bf88      	it	hi
   b9278:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b927c:	f63f aeaf 	bhi.w	b8fde <__aeabi_dmul+0xde>
   b9280:	ebb5 0c03 	subs.w	ip, r5, r3
   b9284:	bf04      	itt	eq
   b9286:	ebb6 0c02 	subseq.w	ip, r6, r2
   b928a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b928e:	f150 0000 	adcs.w	r0, r0, #0
   b9292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9296:	bd70      	pop	{r4, r5, r6, pc}
   b9298:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b929c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b92a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b92a4:	bfc2      	ittt	gt
   b92a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b92aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b92ae:	bd70      	popgt	{r4, r5, r6, pc}
   b92b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b92b4:	f04f 0e00 	mov.w	lr, #0
   b92b8:	3c01      	subs	r4, #1
   b92ba:	e690      	b.n	b8fde <__aeabi_dmul+0xde>
   b92bc:	ea45 0e06 	orr.w	lr, r5, r6
   b92c0:	e68d      	b.n	b8fde <__aeabi_dmul+0xde>
   b92c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b92c6:	ea94 0f0c 	teq	r4, ip
   b92ca:	bf08      	it	eq
   b92cc:	ea95 0f0c 	teqeq	r5, ip
   b92d0:	f43f af3b 	beq.w	b914a <__aeabi_dmul+0x24a>
   b92d4:	ea94 0f0c 	teq	r4, ip
   b92d8:	d10a      	bne.n	b92f0 <__aeabi_ddiv+0x19c>
   b92da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b92de:	f47f af34 	bne.w	b914a <__aeabi_dmul+0x24a>
   b92e2:	ea95 0f0c 	teq	r5, ip
   b92e6:	f47f af25 	bne.w	b9134 <__aeabi_dmul+0x234>
   b92ea:	4610      	mov	r0, r2
   b92ec:	4619      	mov	r1, r3
   b92ee:	e72c      	b.n	b914a <__aeabi_dmul+0x24a>
   b92f0:	ea95 0f0c 	teq	r5, ip
   b92f4:	d106      	bne.n	b9304 <__aeabi_ddiv+0x1b0>
   b92f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b92fa:	f43f aefd 	beq.w	b90f8 <__aeabi_dmul+0x1f8>
   b92fe:	4610      	mov	r0, r2
   b9300:	4619      	mov	r1, r3
   b9302:	e722      	b.n	b914a <__aeabi_dmul+0x24a>
   b9304:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9308:	bf18      	it	ne
   b930a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b930e:	f47f aec5 	bne.w	b909c <__aeabi_dmul+0x19c>
   b9312:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9316:	f47f af0d 	bne.w	b9134 <__aeabi_dmul+0x234>
   b931a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b931e:	f47f aeeb 	bne.w	b90f8 <__aeabi_dmul+0x1f8>
   b9322:	e712      	b.n	b914a <__aeabi_dmul+0x24a>

000b9324 <__gedf2>:
   b9324:	f04f 3cff 	mov.w	ip, #4294967295
   b9328:	e006      	b.n	b9338 <__cmpdf2+0x4>
   b932a:	bf00      	nop

000b932c <__ledf2>:
   b932c:	f04f 0c01 	mov.w	ip, #1
   b9330:	e002      	b.n	b9338 <__cmpdf2+0x4>
   b9332:	bf00      	nop

000b9334 <__cmpdf2>:
   b9334:	f04f 0c01 	mov.w	ip, #1
   b9338:	f84d cd04 	str.w	ip, [sp, #-4]!
   b933c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9348:	bf18      	it	ne
   b934a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b934e:	d01b      	beq.n	b9388 <__cmpdf2+0x54>
   b9350:	b001      	add	sp, #4
   b9352:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9356:	bf0c      	ite	eq
   b9358:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b935c:	ea91 0f03 	teqne	r1, r3
   b9360:	bf02      	ittt	eq
   b9362:	ea90 0f02 	teqeq	r0, r2
   b9366:	2000      	moveq	r0, #0
   b9368:	4770      	bxeq	lr
   b936a:	f110 0f00 	cmn.w	r0, #0
   b936e:	ea91 0f03 	teq	r1, r3
   b9372:	bf58      	it	pl
   b9374:	4299      	cmppl	r1, r3
   b9376:	bf08      	it	eq
   b9378:	4290      	cmpeq	r0, r2
   b937a:	bf2c      	ite	cs
   b937c:	17d8      	asrcs	r0, r3, #31
   b937e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9382:	f040 0001 	orr.w	r0, r0, #1
   b9386:	4770      	bx	lr
   b9388:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b938c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9390:	d102      	bne.n	b9398 <__cmpdf2+0x64>
   b9392:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9396:	d107      	bne.n	b93a8 <__cmpdf2+0x74>
   b9398:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b939c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b93a0:	d1d6      	bne.n	b9350 <__cmpdf2+0x1c>
   b93a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b93a6:	d0d3      	beq.n	b9350 <__cmpdf2+0x1c>
   b93a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b93ac:	4770      	bx	lr
   b93ae:	bf00      	nop

000b93b0 <__aeabi_cdrcmple>:
   b93b0:	4684      	mov	ip, r0
   b93b2:	4610      	mov	r0, r2
   b93b4:	4662      	mov	r2, ip
   b93b6:	468c      	mov	ip, r1
   b93b8:	4619      	mov	r1, r3
   b93ba:	4663      	mov	r3, ip
   b93bc:	e000      	b.n	b93c0 <__aeabi_cdcmpeq>
   b93be:	bf00      	nop

000b93c0 <__aeabi_cdcmpeq>:
   b93c0:	b501      	push	{r0, lr}
   b93c2:	f7ff ffb7 	bl	b9334 <__cmpdf2>
   b93c6:	2800      	cmp	r0, #0
   b93c8:	bf48      	it	mi
   b93ca:	f110 0f00 	cmnmi.w	r0, #0
   b93ce:	bd01      	pop	{r0, pc}

000b93d0 <__aeabi_dcmpeq>:
   b93d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93d4:	f7ff fff4 	bl	b93c0 <__aeabi_cdcmpeq>
   b93d8:	bf0c      	ite	eq
   b93da:	2001      	moveq	r0, #1
   b93dc:	2000      	movne	r0, #0
   b93de:	f85d fb08 	ldr.w	pc, [sp], #8
   b93e2:	bf00      	nop

000b93e4 <__aeabi_dcmplt>:
   b93e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93e8:	f7ff ffea 	bl	b93c0 <__aeabi_cdcmpeq>
   b93ec:	bf34      	ite	cc
   b93ee:	2001      	movcc	r0, #1
   b93f0:	2000      	movcs	r0, #0
   b93f2:	f85d fb08 	ldr.w	pc, [sp], #8
   b93f6:	bf00      	nop

000b93f8 <__aeabi_dcmple>:
   b93f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93fc:	f7ff ffe0 	bl	b93c0 <__aeabi_cdcmpeq>
   b9400:	bf94      	ite	ls
   b9402:	2001      	movls	r0, #1
   b9404:	2000      	movhi	r0, #0
   b9406:	f85d fb08 	ldr.w	pc, [sp], #8
   b940a:	bf00      	nop

000b940c <__aeabi_dcmpge>:
   b940c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9410:	f7ff ffce 	bl	b93b0 <__aeabi_cdrcmple>
   b9414:	bf94      	ite	ls
   b9416:	2001      	movls	r0, #1
   b9418:	2000      	movhi	r0, #0
   b941a:	f85d fb08 	ldr.w	pc, [sp], #8
   b941e:	bf00      	nop

000b9420 <__aeabi_dcmpgt>:
   b9420:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9424:	f7ff ffc4 	bl	b93b0 <__aeabi_cdrcmple>
   b9428:	bf34      	ite	cc
   b942a:	2001      	movcc	r0, #1
   b942c:	2000      	movcs	r0, #0
   b942e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9432:	bf00      	nop

000b9434 <__aeabi_d2uiz>:
   b9434:	004a      	lsls	r2, r1, #1
   b9436:	d211      	bcs.n	b945c <__aeabi_d2uiz+0x28>
   b9438:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b943c:	d211      	bcs.n	b9462 <__aeabi_d2uiz+0x2e>
   b943e:	d50d      	bpl.n	b945c <__aeabi_d2uiz+0x28>
   b9440:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9444:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9448:	d40e      	bmi.n	b9468 <__aeabi_d2uiz+0x34>
   b944a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b944e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9452:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9456:	fa23 f002 	lsr.w	r0, r3, r2
   b945a:	4770      	bx	lr
   b945c:	f04f 0000 	mov.w	r0, #0
   b9460:	4770      	bx	lr
   b9462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9466:	d102      	bne.n	b946e <__aeabi_d2uiz+0x3a>
   b9468:	f04f 30ff 	mov.w	r0, #4294967295
   b946c:	4770      	bx	lr
   b946e:	f04f 0000 	mov.w	r0, #0
   b9472:	4770      	bx	lr

000b9474 <__aeabi_d2f>:
   b9474:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9478:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b947c:	bf24      	itt	cs
   b947e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9482:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9486:	d90d      	bls.n	b94a4 <__aeabi_d2f+0x30>
   b9488:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b948c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9490:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9494:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9498:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b949c:	bf08      	it	eq
   b949e:	f020 0001 	biceq.w	r0, r0, #1
   b94a2:	4770      	bx	lr
   b94a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b94a8:	d121      	bne.n	b94ee <__aeabi_d2f+0x7a>
   b94aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b94ae:	bfbc      	itt	lt
   b94b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b94b4:	4770      	bxlt	lr
   b94b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b94ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b94be:	f1c2 0218 	rsb	r2, r2, #24
   b94c2:	f1c2 0c20 	rsb	ip, r2, #32
   b94c6:	fa10 f30c 	lsls.w	r3, r0, ip
   b94ca:	fa20 f002 	lsr.w	r0, r0, r2
   b94ce:	bf18      	it	ne
   b94d0:	f040 0001 	orrne.w	r0, r0, #1
   b94d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b94d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b94dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b94e0:	ea40 000c 	orr.w	r0, r0, ip
   b94e4:	fa23 f302 	lsr.w	r3, r3, r2
   b94e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b94ec:	e7cc      	b.n	b9488 <__aeabi_d2f+0x14>
   b94ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b94f2:	d107      	bne.n	b9504 <__aeabi_d2f+0x90>
   b94f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b94f8:	bf1e      	ittt	ne
   b94fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b94fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b9502:	4770      	bxne	lr
   b9504:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b950c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9510:	4770      	bx	lr
   b9512:	bf00      	nop

000b9514 <atexit>:
   b9514:	2300      	movs	r3, #0
   b9516:	4601      	mov	r1, r0
   b9518:	461a      	mov	r2, r3
   b951a:	4618      	mov	r0, r3
   b951c:	f000 b8c8 	b.w	b96b0 <__register_exitproc>

000b9520 <calloc>:
   b9520:	4b02      	ldr	r3, [pc, #8]	; (b952c <calloc+0xc>)
   b9522:	460a      	mov	r2, r1
   b9524:	4601      	mov	r1, r0
   b9526:	6818      	ldr	r0, [r3, #0]
   b9528:	f000 b818 	b.w	b955c <_calloc_r>
   b952c:	2003df60 	.word	0x2003df60

000b9530 <memcpy>:
   b9530:	440a      	add	r2, r1
   b9532:	4291      	cmp	r1, r2
   b9534:	f100 33ff 	add.w	r3, r0, #4294967295
   b9538:	d100      	bne.n	b953c <memcpy+0xc>
   b953a:	4770      	bx	lr
   b953c:	b510      	push	{r4, lr}
   b953e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9542:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9546:	4291      	cmp	r1, r2
   b9548:	d1f9      	bne.n	b953e <memcpy+0xe>
   b954a:	bd10      	pop	{r4, pc}

000b954c <memset>:
   b954c:	4402      	add	r2, r0
   b954e:	4603      	mov	r3, r0
   b9550:	4293      	cmp	r3, r2
   b9552:	d100      	bne.n	b9556 <memset+0xa>
   b9554:	4770      	bx	lr
   b9556:	f803 1b01 	strb.w	r1, [r3], #1
   b955a:	e7f9      	b.n	b9550 <memset+0x4>

000b955c <_calloc_r>:
   b955c:	b513      	push	{r0, r1, r4, lr}
   b955e:	434a      	muls	r2, r1
   b9560:	4611      	mov	r1, r2
   b9562:	9201      	str	r2, [sp, #4]
   b9564:	f7fe fba6 	bl	b7cb4 <_malloc_r>
   b9568:	4604      	mov	r4, r0
   b956a:	b118      	cbz	r0, b9574 <_calloc_r+0x18>
   b956c:	9a01      	ldr	r2, [sp, #4]
   b956e:	2100      	movs	r1, #0
   b9570:	f7ff ffec 	bl	b954c <memset>
   b9574:	4620      	mov	r0, r4
   b9576:	b002      	add	sp, #8
   b9578:	bd10      	pop	{r4, pc}
	...

000b957c <srand>:
   b957c:	b538      	push	{r3, r4, r5, lr}
   b957e:	4b10      	ldr	r3, [pc, #64]	; (b95c0 <srand+0x44>)
   b9580:	681d      	ldr	r5, [r3, #0]
   b9582:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9584:	4604      	mov	r4, r0
   b9586:	b9b3      	cbnz	r3, b95b6 <srand+0x3a>
   b9588:	2018      	movs	r0, #24
   b958a:	f7fe fb6b 	bl	b7c64 <malloc>
   b958e:	4602      	mov	r2, r0
   b9590:	63a8      	str	r0, [r5, #56]	; 0x38
   b9592:	b920      	cbnz	r0, b959e <srand+0x22>
   b9594:	4b0b      	ldr	r3, [pc, #44]	; (b95c4 <srand+0x48>)
   b9596:	480c      	ldr	r0, [pc, #48]	; (b95c8 <srand+0x4c>)
   b9598:	2142      	movs	r1, #66	; 0x42
   b959a:	f7fe fb93 	bl	b7cc4 <__assert_func>
   b959e:	490b      	ldr	r1, [pc, #44]	; (b95cc <srand+0x50>)
   b95a0:	4b0b      	ldr	r3, [pc, #44]	; (b95d0 <srand+0x54>)
   b95a2:	e9c0 1300 	strd	r1, r3, [r0]
   b95a6:	4b0b      	ldr	r3, [pc, #44]	; (b95d4 <srand+0x58>)
   b95a8:	6083      	str	r3, [r0, #8]
   b95aa:	230b      	movs	r3, #11
   b95ac:	8183      	strh	r3, [r0, #12]
   b95ae:	2100      	movs	r1, #0
   b95b0:	2001      	movs	r0, #1
   b95b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b95b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b95b8:	2200      	movs	r2, #0
   b95ba:	611c      	str	r4, [r3, #16]
   b95bc:	615a      	str	r2, [r3, #20]
   b95be:	bd38      	pop	{r3, r4, r5, pc}
   b95c0:	2003df60 	.word	0x2003df60
   b95c4:	000bac91 	.word	0x000bac91
   b95c8:	000baca8 	.word	0x000baca8
   b95cc:	abcd330e 	.word	0xabcd330e
   b95d0:	e66d1234 	.word	0xe66d1234
   b95d4:	0005deec 	.word	0x0005deec

000b95d8 <strcpy>:
   b95d8:	4603      	mov	r3, r0
   b95da:	f811 2b01 	ldrb.w	r2, [r1], #1
   b95de:	f803 2b01 	strb.w	r2, [r3], #1
   b95e2:	2a00      	cmp	r2, #0
   b95e4:	d1f9      	bne.n	b95da <strcpy+0x2>
   b95e6:	4770      	bx	lr

000b95e8 <strlen>:
   b95e8:	4603      	mov	r3, r0
   b95ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   b95ee:	2a00      	cmp	r2, #0
   b95f0:	d1fb      	bne.n	b95ea <strlen+0x2>
   b95f2:	1a18      	subs	r0, r3, r0
   b95f4:	3801      	subs	r0, #1
   b95f6:	4770      	bx	lr

000b95f8 <strtok>:
   b95f8:	4b16      	ldr	r3, [pc, #88]	; (b9654 <strtok+0x5c>)
   b95fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b95fc:	681e      	ldr	r6, [r3, #0]
   b95fe:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9600:	4605      	mov	r5, r0
   b9602:	b9fc      	cbnz	r4, b9644 <strtok+0x4c>
   b9604:	2050      	movs	r0, #80	; 0x50
   b9606:	9101      	str	r1, [sp, #4]
   b9608:	f7fe fb2c 	bl	b7c64 <malloc>
   b960c:	9901      	ldr	r1, [sp, #4]
   b960e:	65b0      	str	r0, [r6, #88]	; 0x58
   b9610:	4602      	mov	r2, r0
   b9612:	b920      	cbnz	r0, b961e <strtok+0x26>
   b9614:	4b10      	ldr	r3, [pc, #64]	; (b9658 <strtok+0x60>)
   b9616:	4811      	ldr	r0, [pc, #68]	; (b965c <strtok+0x64>)
   b9618:	2157      	movs	r1, #87	; 0x57
   b961a:	f7fe fb53 	bl	b7cc4 <__assert_func>
   b961e:	e9c0 4400 	strd	r4, r4, [r0]
   b9622:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9626:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b962a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b962e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9632:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9636:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b963a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b963e:	6184      	str	r4, [r0, #24]
   b9640:	7704      	strb	r4, [r0, #28]
   b9642:	6244      	str	r4, [r0, #36]	; 0x24
   b9644:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9646:	2301      	movs	r3, #1
   b9648:	4628      	mov	r0, r5
   b964a:	b002      	add	sp, #8
   b964c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9650:	f000 b806 	b.w	b9660 <__strtok_r>
   b9654:	2003df60 	.word	0x2003df60
   b9658:	000bac91 	.word	0x000bac91
   b965c:	000bad25 	.word	0x000bad25

000b9660 <__strtok_r>:
   b9660:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9662:	b908      	cbnz	r0, b9668 <__strtok_r+0x8>
   b9664:	6810      	ldr	r0, [r2, #0]
   b9666:	b188      	cbz	r0, b968c <__strtok_r+0x2c>
   b9668:	4604      	mov	r4, r0
   b966a:	4620      	mov	r0, r4
   b966c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9670:	460f      	mov	r7, r1
   b9672:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9676:	b91e      	cbnz	r6, b9680 <__strtok_r+0x20>
   b9678:	b965      	cbnz	r5, b9694 <__strtok_r+0x34>
   b967a:	6015      	str	r5, [r2, #0]
   b967c:	4628      	mov	r0, r5
   b967e:	e005      	b.n	b968c <__strtok_r+0x2c>
   b9680:	42b5      	cmp	r5, r6
   b9682:	d1f6      	bne.n	b9672 <__strtok_r+0x12>
   b9684:	2b00      	cmp	r3, #0
   b9686:	d1f0      	bne.n	b966a <__strtok_r+0xa>
   b9688:	6014      	str	r4, [r2, #0]
   b968a:	7003      	strb	r3, [r0, #0]
   b968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b968e:	461c      	mov	r4, r3
   b9690:	e00c      	b.n	b96ac <__strtok_r+0x4c>
   b9692:	b915      	cbnz	r5, b969a <__strtok_r+0x3a>
   b9694:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9698:	460e      	mov	r6, r1
   b969a:	f816 5b01 	ldrb.w	r5, [r6], #1
   b969e:	42ab      	cmp	r3, r5
   b96a0:	d1f7      	bne.n	b9692 <__strtok_r+0x32>
   b96a2:	2b00      	cmp	r3, #0
   b96a4:	d0f3      	beq.n	b968e <__strtok_r+0x2e>
   b96a6:	2300      	movs	r3, #0
   b96a8:	f804 3c01 	strb.w	r3, [r4, #-1]
   b96ac:	6014      	str	r4, [r2, #0]
   b96ae:	e7ed      	b.n	b968c <__strtok_r+0x2c>

000b96b0 <__register_exitproc>:
   b96b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b96b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9770 <__register_exitproc+0xc0>
   b96b8:	4606      	mov	r6, r0
   b96ba:	f8d8 0000 	ldr.w	r0, [r8]
   b96be:	461f      	mov	r7, r3
   b96c0:	460d      	mov	r5, r1
   b96c2:	4691      	mov	r9, r2
   b96c4:	f000 f856 	bl	b9774 <__retarget_lock_acquire_recursive>
   b96c8:	4b25      	ldr	r3, [pc, #148]	; (b9760 <__register_exitproc+0xb0>)
   b96ca:	681c      	ldr	r4, [r3, #0]
   b96cc:	b934      	cbnz	r4, b96dc <__register_exitproc+0x2c>
   b96ce:	4c25      	ldr	r4, [pc, #148]	; (b9764 <__register_exitproc+0xb4>)
   b96d0:	601c      	str	r4, [r3, #0]
   b96d2:	4b25      	ldr	r3, [pc, #148]	; (b9768 <__register_exitproc+0xb8>)
   b96d4:	b113      	cbz	r3, b96dc <__register_exitproc+0x2c>
   b96d6:	681b      	ldr	r3, [r3, #0]
   b96d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b96dc:	6863      	ldr	r3, [r4, #4]
   b96de:	2b1f      	cmp	r3, #31
   b96e0:	dd07      	ble.n	b96f2 <__register_exitproc+0x42>
   b96e2:	f8d8 0000 	ldr.w	r0, [r8]
   b96e6:	f000 f847 	bl	b9778 <__retarget_lock_release_recursive>
   b96ea:	f04f 30ff 	mov.w	r0, #4294967295
   b96ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b96f2:	b34e      	cbz	r6, b9748 <__register_exitproc+0x98>
   b96f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b96f8:	b988      	cbnz	r0, b971e <__register_exitproc+0x6e>
   b96fa:	4b1c      	ldr	r3, [pc, #112]	; (b976c <__register_exitproc+0xbc>)
   b96fc:	b923      	cbnz	r3, b9708 <__register_exitproc+0x58>
   b96fe:	f8d8 0000 	ldr.w	r0, [r8]
   b9702:	f000 f838 	bl	b9776 <__retarget_lock_release>
   b9706:	e7f0      	b.n	b96ea <__register_exitproc+0x3a>
   b9708:	f44f 7084 	mov.w	r0, #264	; 0x108
   b970c:	f7fe faaa 	bl	b7c64 <malloc>
   b9710:	2800      	cmp	r0, #0
   b9712:	d0f4      	beq.n	b96fe <__register_exitproc+0x4e>
   b9714:	2300      	movs	r3, #0
   b9716:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b971a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b971e:	6863      	ldr	r3, [r4, #4]
   b9720:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9724:	2201      	movs	r2, #1
   b9726:	409a      	lsls	r2, r3
   b9728:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b972c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9730:	4313      	orrs	r3, r2
   b9732:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9736:	2e02      	cmp	r6, #2
   b9738:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b973c:	bf02      	ittt	eq
   b973e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9742:	4313      	orreq	r3, r2
   b9744:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9748:	6863      	ldr	r3, [r4, #4]
   b974a:	f8d8 0000 	ldr.w	r0, [r8]
   b974e:	1c5a      	adds	r2, r3, #1
   b9750:	3302      	adds	r3, #2
   b9752:	6062      	str	r2, [r4, #4]
   b9754:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9758:	f000 f80e 	bl	b9778 <__retarget_lock_release_recursive>
   b975c:	2000      	movs	r0, #0
   b975e:	e7c6      	b.n	b96ee <__register_exitproc+0x3e>
   b9760:	2003e7e8 	.word	0x2003e7e8
   b9764:	2003e75c 	.word	0x2003e75c
   b9768:	00000000 	.word	0x00000000
   b976c:	000b7c65 	.word	0x000b7c65
   b9770:	2003dfc4 	.word	0x2003dfc4

000b9774 <__retarget_lock_acquire_recursive>:
   b9774:	4770      	bx	lr

000b9776 <__retarget_lock_release>:
   b9776:	4770      	bx	lr

000b9778 <__retarget_lock_release_recursive>:
   b9778:	4770      	bx	lr

000b977a <link_code_end>:
	...

000b977c <dynalib_user>:
   b977c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b978c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b979c:	7620 7269 7574 6c61 4e00 206f 7365 7620      virtual.No es v
   b97ac:	6c61 6469 006f 6554 706d 203a 6625 4900     alido.Temp: %f.I
   b97bc:	766e 6c61 6469 6553 736e 726f 7245 6f72     nvalidSensorErro
   b97cc:	0072 6341 7574 6461 726f 5220 4247 4100     r.Actuador RGB.A
   b97dc:	7463 6175 6f64 2072 755a 626d 6461 726f     ctuador Zumbador
   b97ec:	5300 6e65 6f73 2072 6564 4c20 7a75 5300     .Sensor de Luz.S
   b97fc:	6e65 6f73 2072 6564 5220 6975 6f64 5300     ensor de Ruido.S
   b980c:	6e65 6f73 2072 6f42 6f74 006e 6553 736e     ensor Boton.Sens
   b981c:	726f 5220 746f 7461 7669 006f 4120 2000     or Rotativo. A. 
   b982c:	0044 6553 736e 726f 5020 636f 2061 6944     D.Sensor Poca Di
   b983c:	7473 6e61 6963 0061 6553 736e 726f 4d20     stancia.Sensor M
   b984c:	6375 6168 4420 7369 6174 636e 6169 4f00     ucha Distancia.O
   b985c:	454c 3a44 5320 6e65 6f73 2072 754c 207a     LED: Sensor Luz 
   b986c:	3e2d 2520 0064 6553 736e 726f 4e20 206f     -> %d.Sensor No 
   b987c:	754c 007a 6553 736e 726f 5320 2069 754c     Luz.Sensor Si Lu
   b988c:	007a 6553 736e 726f 4e20 206f 7552 6469     z.Sensor No Ruid
   b989c:	006f 6553 736e 726f 5320 2069 7552 6469     o.Sensor Si Ruid
   b98ac:	006f 6553 736e 726f 4e20 206f 6f42 6f74     o.Sensor No Boto
   b98bc:	006e 6553 736e 726f 5320 2069 6f42 6f74     n.Sensor Si Boto
   b98cc:	006e 6553 736e 726f 4e20 206f 6f52 6174     n.Sensor No Rota
   b98dc:	6974 6f76 5300 6e65 6f73 2072 6953 5220     tivo.Sensor Si R
   b98ec:	746f 7461 7669 006f 6553 736e 726f 5420     otativo.Sensor T
   b98fc:	6d65 2e70 7246 6f69 5300 6e65 6f73 2072     emp.Frio.Sensor 
   b990c:	6554 706d 542e 6d65 6c70 6461 006f 6553     Temp.Templado.Se
   b991c:	736e 726f 5420 6d65 2e70 6143 6f6c 0072     nsor Temp.Calor.
   b992c:	6553 736e 726f 4420 7369 6174 636e 6169     Sensor Distancia
   b993c:	4320 7265 6163 5300 6e65 6f73 2072 6944      Cerca.Sensor Di
   b994c:	7473 6e61 6963 2061 654c 6f6a 0073 6553     stancia Lejos.Se
   b995c:	736e 726f 6f4e 6156 696c 6f64 7245 6f72     nsorNoValidoErro
   b996c:	0072 4752 2042 6556 6472 0065 4752 2042     r.RGB Verde.RGB 
   b997c:	6f52 6f6a 5200 4247 4120 616d 6972 6c6c     Rojo.RGB Amarill
   b998c:	006f 4752 2042 6f4d 6172 6f64 5200 4247     o.RGB Morado.RGB
   b999c:	4120 757a 006c 4752 2042 614e 6172 6a6e      Azul.RGB Naranj
   b99ac:	0061 4752 2042 6c42 6e69 006b 4752 2042     a.RGB Blink.RGB 
   b99bc:	6152 6e69 6f62 0077 755a 626d 6461 726f     Rainbow.Zumbador
   b99cc:	4f20 2d6e 664f 0066 755a 626d 6461 726f      On-Off.Zumbador
   b99dc:	4220 696c 6b6e 4100 7463 6175 6f64 4e72      Blink.ActuadorN
   b99ec:	566f 6c61 6469 456f 7272 726f 4d00 4649     oValidoError.MIF
   b99fc:	5241 5f45 6552 6461 2928 6620 6961 656c     ARE_Read() faile
   b9a0c:	3a64 0020 4350 5f44 7541 6874 6e65 6974     d: .PCD_Authenti
   b9a1c:	6163 6574 2928 6620 6961 656c 3a64 0020     cate() failed: .
   b9a2c:	6154 4967 666e 3a6f 2520 0073 6f43 656e     TagInfo: %s.Cone
   b9a3c:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
   b9a4c:	0a30 4300 6e6f 6365 6174 2072 6c61 7020     0..Conectar al p
   b9a5c:	6575 7472 206f 3241 000a 6f43 656e 7463     uerto A2..Conect
   b9a6c:	7261 6120 206c 7570 7265 6f74 4120 0a34     ar al puerto A4.
   b9a7c:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b9a8c:	7472 206f 3244 000a 6f43 656e 7463 7261     rto D2..Conectar
   b9a9c:	6120 206c 7570 7265 6f74 4420 0a34 4300      al puerto D4..C
   b9aac:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b9abc:	206f 3644 000a 7245 6f72 3a72 4e20 206f     o D6..Error: No 
   b9acc:	6168 2079 616d 2073 7570 7265 6f74 2073     hay mas puertos 
   b9adc:	6964 7073 6e6f 6269 656c 2073 000a 6156     disponibles ..Va
   b9aec:	6f6c 2072 6f6e 7620 6c61 6469 006f 654c     lor no valido.Le
   b9afc:	4564 7272 726f 704f 6974 6e6f 4500 5045     dErrorOption.EEP
   b9b0c:	4f52 204d 6d65 7470 0079 4f4d 4f44 4220     ROM empty.MODO B
   b9b1c:	81c3 4953 4f43 6920 696e 6963 6461 006f     ..SICO iniciado.
   b9b2c:	4f4d 4f44 4120 4156 5a4e 4441 204f 6e69     MODO AVANZADO in
   b9b3c:	6369 6169 6f64 4900 766e 6c61 6469 7320     iciado.Invalid s
   b9b4c:	6e65 6f73 2172 2d20 203e 6553 736e 726f     ensor! -> Sensor
   b9b5c:	7220 7065 7465 6469 206f 6e65 6520 206c      repetido en el 
   b9b6c:	6c62 716f 6575 5400 6761 4420 7465 6365     bloque.Tag Detec
   b9b7c:	6174 6164 2d20 3e2d 0020 6f4d 6f64 4b20     tada --> .Modo K
   b9b8c:	4449 2053 6564 6574 7463 6461 006f 6f4d     IDS detectado.Mo
   b9b9c:	6f64 5320 4355 4552 6420 7465 6365 6174     do SUCRE detecta
   b9bac:	6f64 5300 6e65 6f73 2072 6564 6574 7463     do.Sensor detect
   b9bbc:	6461 3a6f 0020 6341 7574 6461 726f 6420     ado: .Actuador d
   b9bcc:	7465 6365 6174 6f64 203a 4500 656a 7563     etectado: .Ejecu
   b9bdc:	6174 646e 206f 6174 2067 2d2d 203e 5300     tando tag --> .S
   b9bec:	6e65 6f73 2072 6564 6574 7463 6461 006f     ensor detectado.
   b9bfc:	7245 6f72 2072 7550 7265 6f74 5300 2065     Error Puerto.Se 
   b9c0c:	7365 6570 6172 6162 4920 2046 6174 0067     esperaba IF tag.
   b9c1c:	6544 7073 6575 2073 6564 7520 206e 6573     Despues de un se
   b9c2c:	736e 726f 7320 2065 7365 6570 6172 7520     nsor se espera u
   b9c3c:	616e 6320 6e6f 6963 6e6f 203a 4e41 2044     na concion: AND 
   b9c4c:	2075 524f 4100 7463 6175 6f64 2072 6564     u OR.Actuador de
   b9c5c:	6574 7463 6461 006f 6553 6520 7073 7265     tectado.Se esper
   b9c6c:	6261 2061 4854 4e45 7420 6761 4900 766e     aba THEN tag.Inv
   b9c7c:	6c61 6469 4120 7463 6175 6f64 0072 4649     alid Actuador.IF
   b9c8c:	6420 7465 6365 6174 6f64 4e00 6d75 7265      detectado.Numer
   b9c9c:	206f 6564 6220 6f6c 7571 7365 3e20 3220     o de bloques > 2
   b9cac:	7c20 207c 6553 6e20 6365 7365 7469 2061      || Se necesita 
   b9cbc:	6c61 6d20 6e65 736f 7520 206e 6361 7574     al menos un actu
   b9ccc:	6461 726f 7020 7261 2061 6574 6d72 6e69     ador para termin
   b9cdc:	7261 6520 206c 6c62 716f 6575 4100 444e     ar el bloque.AND
   b9cec:	4f2f 2052 6564 6574 7463 6461 006f 6e55     /OR detectado.Un
   b9cfc:	2061 6f63 636e 6369 6f69 206e 6f73 6f6c     a concicion solo
   b9d0c:	7020 6575 6564 6920 2072 6573 7567 6469      puede ir seguid
   b9d1c:	2061 6564 7520 206e 6573 736e 726f 002e     a de un sensor..
   b9d2c:	4854 4e45 6420 7465 6365 6174 6f64 4e00     THEN detectado.N
   b9d3c:	6d75 7265 206f 6564 7320 6e65 6f73 6572     umero de sensore
   b9d4c:	2073 6e69 7566 6963 6e65 6574 0073 4c45     s infucientes.EL
   b9d5c:	4553 6420 7465 6365 6174 6f64 4900 2044     SE detectado.ID 
   b9d6c:	6154 2067 6e69 6f63 7272 6365 6174 4600     Tag incorrecta.F
   b9d7c:	6e69 5420 6761 2300 4220 6f6c 7571 2065     in Tag.# Bloque 
   b9d8c:	207c 2023 6553 736e 726f 7365 7c20 2320     | # Sensores | #
   b9d9c:	4320 6e6f 6964 6963 6e6f 7365 7c20 2320      Condiciones | #
   b9dac:	4120 7463 6175 6f64 6572 0073 2020 2020      Actuadores.    
   b9dbc:	6425 0920 097c 2520 2064 7c09 2009 6425     %d .|. %d .|. %d
   b9dcc:	0920 097c 2520 2064 7c09 2009 6425 2d00      .|. %d .|. %d.-
   b9ddc:	6400 6665 7561 746c 0020 534d 0042 534c     .default .MSB.LS
   b9dec:	0042 533c 4950 6553 7474 6e69 7367 6420     B.<SPISettings d
   b9dfc:	6665 7561 746c 003e 533c 4950 6553 7474     efault>.<SPISett
   b9e0c:	6e69 7367 2520 2573 2075 7325 4d20 444f     ings %s%u %s MOD
   b9e1c:	2545 3e75                                    E%u>.

000b9e21 <_ZL4font>:
   b9e21:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9e31:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b9e41:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b9e51:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9e61:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9e71:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9e81:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9e91:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9ea1:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9eb1:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9ec1:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b9ed1:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b9ee1:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b9ef1:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b9f01:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b9f11:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b9f21:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9f31:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b9f41:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b9f51:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b9f61:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9f71:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9f81:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9f91:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9fa1:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9fb1:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9fc1:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9fd1:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9fe1:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9ff1:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba001:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba011:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba021:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba031:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba041:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba051:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba061:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba071:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba081:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba091:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba0a1:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba0b1:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba0c1:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba0d1:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba0e1:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba0f1:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba101:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba111:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba121:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba131:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba141:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba151:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba161:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba171:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba181:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba191:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba1a1:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba1b1:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba1c1:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba1d1:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba1e1:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba1f1:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba201:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba211:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba221:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba231:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba241:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba251:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba261:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba271:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba281:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba291:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba2a1:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba2b1:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba2c1:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba2d1:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba2e1:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba2f1:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba301:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba311:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   ba321:	0000                                         ...

000ba324 <_ZTV12Adafruit_GFX>:
	...
   ba334:	5f31 000b 813d 000b 40a1 000b 5937 000b     1_..=....@..7Y..
   ba344:	5939 000b 596b 000b 5947 000b 5959 000b     9Y..kY..GY..YY..
   ba354:	5879 000b 5937 000b 5b63 000b 5b61 000b     yX..7Y..c[..a[..
   ba364:	5983 000b 59c1 000b 59fb 000b 5a41 000b     .Y...Y...Y..AZ..
   ba374:	5a5d 000b 5ae1 000b 6e55 6e6b 776f 206e     ]Z...Z..Unknown 
   ba384:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   ba394:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   ba3a4:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   ba3b4:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   ba3c4:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   ba3d4:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   ba3e4:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   ba3f4:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   ba404:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   ba414:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   ba424:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   ba434:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   ba444:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   ba454:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   ba464:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000ba474 <CSWTCH.84>:
   ba474:	a38a 000b a393 000b a3ab 000b a3c0 000b     ................
   ba484:	a3da 000b a3f6 000b a425 000b a437 000b     ........%...7...
   ba494:	a451 000b                                   Q...

000ba498 <_ZTVN8particle11SPISettingsE>:
	...
   ba4a0:	5825 000b 5815 000b 5817 000b               %X...X...X..

000ba4ac <_ZL12splash2_data>:
   ba4ac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   ba4bc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ba4cc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ba4e8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ba4f8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ba508:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ba518:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ba528:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   ba538:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   ba548:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   ba558:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   ba568:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   ba578:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   ba588:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   ba598:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ba5a8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ba5b8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ba5c8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ba5d8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ba5e8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ba5f8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ba608:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ba618:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ba628:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ba640:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ba650:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ba660:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ba670:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ba680:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ba68c <_ZL17sucreLogoNew_data>:
   ba68c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba69c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6ac:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   ba6bc:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   ba6cc:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba6dc:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba6ec:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba6fc:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba70c:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   ba71c:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   ba72c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   ba73c:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   ba74c:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   ba75c:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   ba76c:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   ba77c:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   ba78c:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   ba79c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7ac:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   ba7bc:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   ba7cc:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   ba7dc:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   ba7ec:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   ba7fc:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   ba80c:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   ba81c:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   ba82c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   ba83c:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   ba84c:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   ba85c:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   ba86c:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   ba87c:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   ba88c:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   ba89c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   ba8ac:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   ba8bc:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   ba8cc:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   ba8dc:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   ba8ec:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   ba8fc:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   ba90c:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   ba91c:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   ba92c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba93c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba94c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba95c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba96c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba97c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba98c:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   ba99c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   ba9ac:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   ba9bc:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   ba9cc:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   ba9dc:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   ba9ec:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   ba9fc:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   baa0c:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   baa1c:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   baa2c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   baa3c:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   baa4c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   baa5c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   baa6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000baa8c <_ZTV16Adafruit_SSD1306>:
	...
   baa94:	6ae5 000b 6afd 000b 5f31 000b 813d 000b     .j...j..1_..=...
   baaa4:	6b11 000b 5937 000b 5939 000b 596b 000b     .k..7Y..9Y..kY..
   baab4:	5947 000b 5959 000b 5879 000b 5937 000b     GY..YY..yX..7Y..
   baac4:	5b63 000b 6ca3 000b 723f 000b 71f1 000b     c[...l..?r...q..
   baad4:	59fb 000b 5a41 000b 5a5d 000b 5ae1 000b     .Y..AZ..]Z...Z..

000baae4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   baae4:	8000 e0c0 f8f0 fefc                         ........

000baaec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   baaec:	0100 0703 1f0f 7f3f                         ......?.

000baaf4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baaf4:	d5ae a880                                   ....

000baaf8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baaf8:	00d3 8d40                                   ..@.

000baafc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baafc:	0020 c8a1                                    ...

000bab00 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bab00:	40db a6a4 af2e                              .@....

000bab06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bab06:	02da 8f81                                   ....

000bab0a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bab0a:	12da                                         ...

000bab0d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bab0d:	02da                                         ...

000bab10 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bab10:	0022 21ff 0000 0000                         "..!....

000bab18 <_ZTVN5spark13EthernetClassE>:
	...
   bab20:	7d43 000b 7d39 000b 7d2f 000b 7d25 000b     C}..9}../}..%}..
   bab30:	7d19 000b 7d0d 000b 8815 000b 881d 000b     .}...}..........
   bab40:	7d01 000b 7cf9 000b 7cef 000b 7ce5 000b     .}...|...|...|..
   bab50:	884d 000b                                   M...

000bab54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bab54:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bab64:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bab74:	7361 7463 6d69 0065                         asctime.

000bab7c <_ZTV9IPAddress>:
	...
   bab84:	8419 000b 8409 000b 840b 000b               ............

000bab90 <_ZTV9USBSerial>:
	...
   bab98:	84ff 000b 8567 000b 853d 000b 813d 000b     ....g...=...=...
   baba8:	852f 000b 8501 000b 8511 000b 8561 000b     /...........a...
   babb8:	8521 000b 84f9 000b                         !.......

000babc0 <_ZTV11USARTSerial>:
	...
   babc8:	8609 000b 8675 000b 864d 000b 813d 000b     ....u...M...=...
   babd8:	861d 000b 8639 000b 862b 000b 8647 000b     ....9...+...G...
   babe8:	860b 000b 860f 000b                         ........

000babf0 <_ZTV7TwoWire>:
	...
   babf8:	86ad 000b 86f7 000b 86cf 000b 86af 000b     ................
   bac08:	86d7 000b 86df 000b 86e7 000b 86ef 000b     ................

000bac18 <_ZTVN5spark9WiFiClassE>:
	...
   bac20:	87b7 000b 87ad 000b 87a3 000b 8759 000b     ............Y...
   bac30:	8797 000b 878b 000b 8815 000b 881d 000b     ................
   bac40:	877f 000b 8777 000b 876d 000b 8763 000b     ....w...m...c...
   bac50:	884d 000b                                   M...

000bac54 <_ZTVN5spark12NetworkClassE>:
	...
   bac5c:	87d5 000b 87df 000b 87e9 000b 87f3 000b     ................
   bac6c:	87fd 000b 8809 000b 8815 000b 881d 000b     ................
   bac7c:	8825 000b 8831 000b 8839 000b 8843 000b     %...1...9...C...
   bac8c:	884d 000b                                   M...

000bac90 <_ZSt7nothrow>:
   bac90:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   baca0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bacb0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bacc0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bacd0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bace0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bacf0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bad00:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bad10:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bad20:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bad30:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bad40:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bad50:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bad60:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bad70:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bad80:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bad90:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bada0:	2e6b 0063                                   k.c.

000bada4 <link_const_variable_data_end>:
   bada4:	000b5799 	.word	0x000b5799
   bada8:	000b7d4d 	.word	0x000b7d4d
   badac:	000b7ec5 	.word	0x000b7ec5
   badb0:	000b812d 	.word	0x000b812d
   badb4:	000b8265 	.word	0x000b8265
   badb8:	000b8275 	.word	0x000b8275
   badbc:	000b8291 	.word	0x000b8291
   badc0:	000b87c1 	.word	0x000b87c1
   badc4:	000b8925 	.word	0x000b8925

000badc8 <link_constructors_end>:
	...
