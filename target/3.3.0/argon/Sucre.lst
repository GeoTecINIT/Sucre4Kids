
/Users/marcosgarciagarcia/Documents/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e34  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9e50  000b9e50  00009e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9e74  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003df54  000b9e78  0001df54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000808  2003dfe8  2003dfe8  0002dfe8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9f0c  000b9f0c  00029f0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9f34  000b9f34  00029f34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015b7b3  00000000  00000000  00029f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00018462  00000000  00000000  001856eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004ea0e  00000000  00000000  0019db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000035a0  00000000  00000000  001ec55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bcc0  00000000  00000000  001efafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042963  00000000  00000000  001fb7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000571e2  00000000  00000000  0023e11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b88e  00000000  00000000  00295300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a198  00000000  00000000  003d0b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fb81 	bl	b8734 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fb89 	bl	b8750 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df54 	.word	0x2003df54
   b4048:	000b9e78 	.word	0x000b9e78
   b404c:	2003dfe8 	.word	0x2003dfe8
   b4050:	2003dfe8 	.word	0x2003dfe8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 f85b 	bl	b8118 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9e2c 	.word	0x000b9e2c
   b407c:	000b9e50 	.word	0x000b9e50

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdc6 	b.w	b4c10 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fedd 	bl	b4e44 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bffb 	b.w	b8088 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f003 ba09 	b.w	b74a8 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f003 ba0f 	b.w	b74b8 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f003 f964 	bl	b7370 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b7071 	.word	0x000b7071
   b40b0:	000b8994 	.word	0x000b8994

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c4:	b40e      	push	{r1, r2, r3}
   b40c6:	b503      	push	{r0, r1, lr}
   b40c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d2:	f003 fc7c 	bl	b79ce <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d6:	b002      	add	sp, #8
   b40d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40dc:	b003      	add	sp, #12
   b40de:	4770      	bx	lr

000b40e0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e0:	b40e      	push	{r1, r2, r3}
   b40e2:	b503      	push	{r0, r1, lr}
   b40e4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ec:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ee:	f003 fc6e 	bl	b79ce <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f2:	b002      	add	sp, #8
   b40f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f8:	b003      	add	sp, #12
   b40fa:	4770      	bx	lr

000b40fc <_Z11noDistanciai>:

// Distance
#include "Grove-Ultrasonic-Ranger.h"

bool noDistancia(int puerto)
{
   b40fc:	b507      	push	{r0, r1, r2, lr}
   b40fe:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4100:	a801      	add	r0, sp, #4
   b4102:	f002 fa67 	bl	b65d4 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4106:	a801      	add	r0, sp, #4
   b4108:	f002 fa66 	bl	b65d8 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b410c:	2809      	cmp	r0, #9
   b410e:	bf8c      	ite	hi
   b4110:	2000      	movhi	r0, #0
   b4112:	2001      	movls	r0, #1
   b4114:	b003      	add	sp, #12
   b4116:	f85d fb04 	ldr.w	pc, [sp], #4

000b411a <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b411a:	b507      	push	{r0, r1, r2, lr}
   b411c:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b411e:	a801      	add	r0, sp, #4
   b4120:	f002 fa58 	bl	b65d4 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4124:	a801      	add	r0, sp, #4
   b4126:	f002 fa57 	bl	b65d8 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b412a:	280a      	cmp	r0, #10
   b412c:	bfd4      	ite	le
   b412e:	2000      	movle	r0, #0
   b4130:	2001      	movgt	r0, #1
   b4132:	b003      	add	sp, #12
   b4134:	f85d fb04 	ldr.w	pc, [sp], #4

000b4138 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4138:	2802      	cmp	r0, #2
{
   b413a:	b508      	push	{r3, lr}
    switch (puerto)
   b413c:	d00b      	beq.n	b4156 <_Z5siLuzi+0x1e>
   b413e:	2804      	cmp	r0, #4
   b4140:	d00b      	beq.n	b415a <_Z5siLuzi+0x22>
   b4142:	b960      	cbnz	r0, b415e <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4144:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4146:	f004 f894 	bl	b8272 <analogRead>
   b414a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b414e:	bfb4      	ite	lt
   b4150:	2000      	movlt	r0, #0
   b4152:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4154:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4156:	2011      	movs	r0, #17
   b4158:	e7f5      	b.n	b4146 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b415a:	200f      	movs	r0, #15
   b415c:	e7f3      	b.n	b4146 <_Z5siLuzi+0xe>
    switch (puerto)
   b415e:	2000      	movs	r0, #0
   b4160:	e7f8      	b.n	b4154 <_Z5siLuzi+0x1c>

000b4162 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4162:	2802      	cmp	r0, #2
{
   b4164:	b508      	push	{r3, lr}
    switch (puerto)
   b4166:	d00b      	beq.n	b4180 <_Z5noLuzi+0x1e>
   b4168:	2804      	cmp	r0, #4
   b416a:	d00b      	beq.n	b4184 <_Z5noLuzi+0x22>
   b416c:	b960      	cbnz	r0, b4188 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b416e:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4170:	f004 f87f 	bl	b8272 <analogRead>
   b4174:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4178:	bfcc      	ite	gt
   b417a:	2000      	movgt	r0, #0
   b417c:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b417e:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4180:	2011      	movs	r0, #17
   b4182:	e7f5      	b.n	b4170 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4184:	200f      	movs	r0, #15
   b4186:	e7f3      	b.n	b4170 <_Z5noLuzi+0xe>
    switch (puerto)
   b4188:	2000      	movs	r0, #0
   b418a:	e7f8      	b.n	b417e <_Z5noLuzi+0x1c>

000b418c <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b418c:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b418e:	b280      	uxth	r0, r0
   b4190:	f004 f86f 	bl	b8272 <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b4194:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4198:	bfb4      	ite	lt
   b419a:	2000      	movlt	r0, #0
   b419c:	2001      	movge	r0, #1
   b419e:	bd08      	pop	{r3, pc}

000b41a0 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41a0:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41a2:	b280      	uxth	r0, r0
   b41a4:	f004 f865 	bl	b8272 <analogRead>
        return true;
    return false;
}
   b41a8:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41ac:	bfcc      	ite	gt
   b41ae:	2000      	movgt	r0, #0
   b41b0:	2001      	movle	r0, #1
   b41b2:	bd08      	pop	{r3, pc}

000b41b4 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41b4:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41b6:	b280      	uxth	r0, r0
   b41b8:	2100      	movs	r1, #0
   b41ba:	9001      	str	r0, [sp, #4]
   b41bc:	f004 f81c 	bl	b81f8 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b41c0:	9801      	ldr	r0, [sp, #4]
   b41c2:	f004 f843 	bl	b824c <digitalRead>
        return true;
    return false;
}
   b41c6:	1e43      	subs	r3, r0, #1
   b41c8:	4258      	negs	r0, r3
   b41ca:	4158      	adcs	r0, r3
   b41cc:	b003      	add	sp, #12
   b41ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b41d2 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b41d2:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41d4:	b280      	uxth	r0, r0
   b41d6:	2100      	movs	r1, #0
   b41d8:	9001      	str	r0, [sp, #4]
   b41da:	f004 f80d 	bl	b81f8 <pinMode>
    if (digitalRead(puerto) == LOW)
   b41de:	9801      	ldr	r0, [sp, #4]
   b41e0:	f004 f834 	bl	b824c <digitalRead>
        return true;
    return false;
}
   b41e4:	fab0 f080 	clz	r0, r0
   b41e8:	0940      	lsrs	r0, r0, #5
   b41ea:	b003      	add	sp, #12
   b41ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b41f0 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b41f0:	2802      	cmp	r0, #2
{
   b41f2:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b41f4:	d024      	beq.n	b4240 <_Z10siRotativoi+0x50>
   b41f6:	2804      	cmp	r0, #4
   b41f8:	d024      	beq.n	b4244 <_Z10siRotativoi+0x54>
   b41fa:	b918      	cbnz	r0, b4204 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b41fc:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b41fe:	f004 f838 	bl	b8272 <analogRead>
   b4202:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4204:	eddd 7a01 	vldr	s15, [sp, #4]
   b4208:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4248 <_Z10siRotativoi+0x58>
   b420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4210:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4214:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4218:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b421c:	eddf 7a0b 	vldr	s15, [pc, #44]	; b424c <_Z10siRotativoi+0x5c>
   b4220:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4224:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4228:	eddf 7a09 	vldr	s15, [pc, #36]	; b4250 <_Z10siRotativoi+0x60>
   b422c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4234:	bfac      	ite	ge
   b4236:	2001      	movge	r0, #1
   b4238:	2000      	movlt	r0, #0
   b423a:	b003      	add	sp, #12
   b423c:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4240:	2011      	movs	r0, #17
   b4242:	e7dc      	b.n	b41fe <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4244:	200f      	movs	r0, #15
   b4246:	e7da      	b.n	b41fe <_Z10siRotativoi+0xe>
   b4248:	447fc000 	.word	0x447fc000
   b424c:	43960000 	.word	0x43960000
   b4250:	442a0000 	.word	0x442a0000

000b4254 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4254:	2802      	cmp	r0, #2
{
   b4256:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4258:	d024      	beq.n	b42a4 <_Z10noRotativoi+0x50>
   b425a:	2804      	cmp	r0, #4
   b425c:	d024      	beq.n	b42a8 <_Z10noRotativoi+0x54>
   b425e:	b918      	cbnz	r0, b4268 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4260:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4262:	f004 f806 	bl	b8272 <analogRead>
   b4266:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4268:	eddd 7a01 	vldr	s15, [sp, #4]
   b426c:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42ac <_Z10noRotativoi+0x58>
   b4270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4274:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4278:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b427c:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4280:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42b0 <_Z10noRotativoi+0x5c>
   b4284:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4288:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b428c:	eddf 7a09 	vldr	s15, [pc, #36]	; b42b4 <_Z10noRotativoi+0x60>
   b4290:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4298:	bf94      	ite	ls
   b429a:	2001      	movls	r0, #1
   b429c:	2000      	movhi	r0, #0
   b429e:	b003      	add	sp, #12
   b42a0:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42a4:	2011      	movs	r0, #17
   b42a6:	e7dc      	b.n	b4262 <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42a8:	200f      	movs	r0, #15
   b42aa:	e7da      	b.n	b4262 <_Z10noRotativoi+0xe>
   b42ac:	447fc000 	.word	0x447fc000
   b42b0:	43960000 	.word	0x43960000
   b42b4:	442a0000 	.word	0x442a0000

000b42b8 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b42b8:	b530      	push	{r4, r5, lr}
   b42ba:	ed2d 8b02 	vpush	{d8}
   b42be:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b42c0:	b2c1      	uxtb	r1, r0
   b42c2:	2306      	movs	r3, #6
   b42c4:	220b      	movs	r2, #11
   b42c6:	a801      	add	r0, sp, #4
   b42c8:	f001 f81e 	bl	b5308 <_ZN3DHTC1Ehhh>
    dht.begin();
   b42cc:	a801      	add	r0, sp, #4
   b42ce:	f001 f822 	bl	b5316 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b42d2:	a801      	add	r0, sp, #4
   b42d4:	f001 f8dc 	bl	b5490 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b42d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b42dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b42e0:	eeb4 0a40 	vcmp.f32	s0, s0
   b42e4:	bf0c      	ite	eq
   b42e6:	2401      	moveq	r4, #1
   b42e8:	2400      	movne	r4, #0
   b42ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b42ee:	bf68      	it	vs
   b42f0:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b42f4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b42f8:	2c00      	cmp	r4, #0
   b42fa:	d1ea      	bne.n	b42d2 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b42fc:	f003 fdf2 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4300:	4605      	mov	r5, r0
   b4302:	ee18 0a10 	vmov	r0, s16
   b4306:	f004 f9af 	bl	b8668 <__aeabi_f2d>
   b430a:	4602      	mov	r2, r0
   b430c:	460b      	mov	r3, r1
   b430e:	4628      	mov	r0, r5
   b4310:	490a      	ldr	r1, [pc, #40]	; (b433c <_Z8tempFrioi+0x84>)
   b4312:	f7ff fee5 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4316:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b431e:	dd08      	ble.n	b4332 <_Z8tempFrioi+0x7a>
   b4320:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4324:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b432c:	bf4c      	ite	mi
   b432e:	2401      	movmi	r4, #1
   b4330:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4332:	4620      	mov	r0, r4
   b4334:	b007      	add	sp, #28
   b4336:	ecbd 8b02 	vpop	{d8}
   b433a:	bd30      	pop	{r4, r5, pc}
   b433c:	000b89a9 	.word	0x000b89a9

000b4340 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4340:	b510      	push	{r4, lr}
   b4342:	ed2d 8b02 	vpush	{d8}
   b4346:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4348:	b2c1      	uxtb	r1, r0
   b434a:	2306      	movs	r3, #6
   b434c:	220b      	movs	r2, #11
   b434e:	a801      	add	r0, sp, #4
   b4350:	f000 ffda 	bl	b5308 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4354:	a801      	add	r0, sp, #4
   b4356:	f000 ffde 	bl	b5316 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b435a:	a801      	add	r0, sp, #4
   b435c:	f001 f898 	bl	b5490 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4360:	eeb4 0a40 	vcmp.f32	s0, s0
   b4364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4368:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b436c:	d6f5      	bvs.n	b435a <_Z12tempTempladoi+0x1a>
   b436e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4376:	d0f0      	beq.n	b435a <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4378:	f003 fdb4 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b437c:	4604      	mov	r4, r0
   b437e:	ee18 0a10 	vmov	r0, s16
   b4382:	f004 f971 	bl	b8668 <__aeabi_f2d>
   b4386:	4602      	mov	r2, r0
   b4388:	460b      	mov	r3, r1
   b438a:	4620      	mov	r0, r4
   b438c:	490c      	ldr	r1, [pc, #48]	; (b43c0 <_Z12tempTempladoi+0x80>)
   b438e:	f7ff fea7 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4392:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4396:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b439e:	dc04      	bgt.n	b43aa <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43a0:	2000      	movs	r0, #0
}
   b43a2:	b006      	add	sp, #24
   b43a4:	ecbd 8b02 	vpop	{d8}
   b43a8:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43aa:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43b6:	bf4c      	ite	mi
   b43b8:	2001      	movmi	r0, #1
   b43ba:	2000      	movpl	r0, #0
   b43bc:	e7f1      	b.n	b43a2 <_Z12tempTempladoi+0x62>
   b43be:	bf00      	nop
   b43c0:	000b89a9 	.word	0x000b89a9

000b43c4 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b43c4:	b530      	push	{r4, r5, lr}
   b43c6:	ed2d 8b02 	vpush	{d8}
   b43ca:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b43cc:	b2c1      	uxtb	r1, r0
   b43ce:	2306      	movs	r3, #6
   b43d0:	220b      	movs	r2, #11
   b43d2:	a801      	add	r0, sp, #4
   b43d4:	f000 ff98 	bl	b5308 <_ZN3DHTC1Ehhh>
    dht.begin();
   b43d8:	a801      	add	r0, sp, #4
   b43da:	f000 ff9c 	bl	b5316 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43de:	a801      	add	r0, sp, #4
   b43e0:	f001 f856 	bl	b5490 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b43e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43ec:	eeb4 0a40 	vcmp.f32	s0, s0
   b43f0:	bf0c      	ite	eq
   b43f2:	2401      	moveq	r4, #1
   b43f4:	2400      	movne	r4, #0
   b43f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43fa:	bf68      	it	vs
   b43fc:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4400:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4404:	2c00      	cmp	r4, #0
   b4406:	d1ea      	bne.n	b43de <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4408:	f003 fd6c 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b440c:	4605      	mov	r5, r0
   b440e:	ee18 0a10 	vmov	r0, s16
   b4412:	f004 f929 	bl	b8668 <__aeabi_f2d>
   b4416:	4602      	mov	r2, r0
   b4418:	460b      	mov	r3, r1
   b441a:	4628      	mov	r0, r5
   b441c:	490b      	ldr	r1, [pc, #44]	; (b444c <_Z9tempCalori+0x88>)
   b441e:	f7ff fe5f 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4422:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4426:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b442e:	dd08      	ble.n	b4442 <_Z9tempCalori+0x7e>
   b4430:	eddf 7a07 	vldr	s15, [pc, #28]	; b4450 <_Z9tempCalori+0x8c>
   b4434:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b443c:	bf4c      	ite	mi
   b443e:	2401      	movmi	r4, #1
   b4440:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4442:	4620      	mov	r0, r4
   b4444:	b007      	add	sp, #28
   b4446:	ecbd 8b02 	vpop	{d8}
   b444a:	bd30      	pop	{r4, r5, pc}
   b444c:	000b89a9 	.word	0x000b89a9
   b4450:	42480000 	.word	0x42480000

000b4454 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4454:	b508      	push	{r3, lr}
   b4456:	4603      	mov	r3, r0
   b4458:	3b01      	subs	r3, #1
   b445a:	4610      	mov	r0, r2
   b445c:	2b06      	cmp	r3, #6
   b445e:	d843      	bhi.n	b44e8 <_Z10leerSensoriii+0x94>
   b4460:	e8df f003 	tbb	[pc, r3]
   b4464:	1b120904 	.word	0x1b120904
   b4468:	2d24      	.short	0x2d24
   b446a:	04          	.byte	0x04
   b446b:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b446c:	bbc1      	cbnz	r1, b44e0 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b446e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4472:	f7ff be43 	b.w	b40fc <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4476:	b919      	cbnz	r1, b4480 <_Z10leerSensoriii+0x2c>
   b4478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b447c:	f7ff be71 	b.w	b4162 <_Z5noLuzi>
   b4480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4484:	f7ff be58 	b.w	b4138 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4488:	b919      	cbnz	r1, b4492 <_Z10leerSensoriii+0x3e>
   b448a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b448e:	f7ff be87 	b.w	b41a0 <_Z7noRuidoi>
   b4492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4496:	f7ff be79 	b.w	b418c <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b449a:	b919      	cbnz	r1, b44a4 <_Z10leerSensoriii+0x50>
   b449c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44a0:	f7ff be97 	b.w	b41d2 <_Z7noBotoni>
   b44a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44a8:	f7ff be84 	b.w	b41b4 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44ac:	b919      	cbnz	r1, b44b6 <_Z10leerSensoriii+0x62>
   b44ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44b2:	f7ff becf 	b.w	b4254 <_Z10noRotativoi>
   b44b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44ba:	f7ff be99 	b.w	b41f0 <_Z10siRotativoi>
        switch (condicion)
   b44be:	2901      	cmp	r1, #1
   b44c0:	d006      	beq.n	b44d0 <_Z10leerSensoriii+0x7c>
   b44c2:	2902      	cmp	r1, #2
   b44c4:	d008      	beq.n	b44d8 <_Z10leerSensoriii+0x84>
   b44c6:	b959      	cbnz	r1, b44e0 <_Z10leerSensoriii+0x8c>
   b44c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b44cc:	f7ff bef4 	b.w	b42b8 <_Z8tempFrioi>
   b44d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b44d4:	f7ff bf34 	b.w	b4340 <_Z12tempTempladoi>
   b44d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b44dc:	f7ff bf72 	b.w	b43c4 <_Z9tempCalori>
   b44e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b44e4:	f7ff be19 	b.w	b411a <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b44e8:	f003 fcfc 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b44ec:	4902      	ldr	r1, [pc, #8]	; (b44f8 <_Z10leerSensoriii+0xa4>)
   b44ee:	f003 fa46 	bl	b797e <_ZN5Print7printlnEPKc>
   b44f2:	2000      	movs	r0, #0
   b44f4:	bd08      	pop	{r3, pc}
   b44f6:	bf00      	nop
   b44f8:	000b89b2 	.word	0x000b89b2

000b44fc <_Z12makeEvaluateP6SENSORPb>:
}

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(SENSOR sensores[], bool condiciones[])
{
   b44fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4500:	460e      	mov	r6, r1
   bool valorEvaluado = leerSensor(sensores[0].id, sensores[0].condicion, sensores[0].puerto);
   b4502:	68c2      	ldr	r2, [r0, #12]

   for (int i = 1; i < numSensoresBloque; i++)
   b4504:	f8df 8048 	ldr.w	r8, [pc, #72]	; b4550 <_Z12makeEvaluateP6SENSORPb+0x54>
{
   b4508:	4604      	mov	r4, r0
   bool valorEvaluado = leerSensor(sensores[0].id, sensores[0].condicion, sensores[0].puerto);
   b450a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b450e:	f7ff ffa1 	bl	b4454 <_Z10leerSensoriii>
   b4512:	1e77      	subs	r7, r6, #1
   b4514:	4605      	mov	r5, r0
   for (int i = 1; i < numSensoresBloque; i++)
   b4516:	f1c6 0602 	rsb	r6, r6, #2
   b451a:	f8d8 2000 	ldr.w	r2, [r8]
   b451e:	19f3      	adds	r3, r6, r7
   b4520:	429a      	cmp	r2, r3
   b4522:	dd11      	ble.n	b4548 <_Z12makeEvaluateP6SENSORPb+0x4c>
   {
      struct SENSOR sigSensor = sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4524:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   b4528:	69e2      	ldr	r2, [r4, #28]
   b452a:	f7ff ff93 	bl	b4454 <_Z10leerSensoriii>

      if (condiciones[i - 1])
   b452e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   b4532:	b12b      	cbz	r3, b4540 <_Z12makeEvaluateP6SENSORPb+0x44>
         valorEvaluado = (valorEvaluado && nextValor);
   b4534:	2d00      	cmp	r5, #0
   b4536:	bf08      	it	eq
   b4538:	2000      	moveq	r0, #0
   for (int i = 1; i < numSensoresBloque; i++)
   b453a:	3410      	adds	r4, #16
   b453c:	4605      	mov	r5, r0
   b453e:	e7ec      	b.n	b451a <_Z12makeEvaluateP6SENSORPb+0x1e>
         valorEvaluado = (valorEvaluado && nextValor);
   b4540:	2d00      	cmp	r5, #0
   b4542:	bf18      	it	ne
   b4544:	4628      	movne	r0, r5
   b4546:	e7f8      	b.n	b453a <_Z12makeEvaluateP6SENSORPb+0x3e>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b4548:	4628      	mov	r0, r5
   b454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b454e:	bf00      	nop
   b4550:	2003e6b8 	.word	0x2003e6b8

000b4554 <_Z12displayPrintbbiii>:

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b4554:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4556:	4607      	mov	r7, r0
   b4558:	b089      	sub	sp, #36	; 0x24
   display.clearDisplay();
   b455a:	4853      	ldr	r0, [pc, #332]	; (b46a8 <_Z12displayPrintbbiii+0x154>)
{
   b455c:	460e      	mov	r6, r1
   b455e:	4615      	mov	r5, r2
   b4560:	461c      	mov	r4, r3
   display.clearDisplay();
   b4562:	f001 fd19 	bl	b5f98 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b4566:	2f00      	cmp	r7, #0
   b4568:	d077      	beq.n	b465a <_Z12displayPrintbbiii+0x106>
   {
      switch (id)
   b456a:	3d01      	subs	r5, #1
   b456c:	2d06      	cmp	r5, #6
   b456e:	d86c      	bhi.n	b464a <_Z12displayPrintbbiii+0xf6>
   b4570:	e8df f005 	tbb	[pc, r5]
   b4574:	504b4004 	.word	0x504b4004
   b4578:	5a55      	.short	0x5a55
   b457a:	66          	.byte	0x66
   b457b:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b457c:	2c00      	cmp	r4, #0
   b457e:	d137      	bne.n	b45f0 <_Z12displayPrintbbiii+0x9c>
   b4580:	494a      	ldr	r1, [pc, #296]	; (b46ac <_Z12displayPrintbbiii+0x158>)
         break;

      // Ruido
      case 3:
         // dispositivos[1] = "Sensor de Ruido";
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b4582:	484b      	ldr	r0, [pc, #300]	; (b46b0 <_Z12displayPrintbbiii+0x15c>)
            dispositivos[0] = "RGB-On-Off";
            break;
         }

      case 1:
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4584:	f003 fb85 	bl	b7c92 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4588:	4949      	ldr	r1, [pc, #292]	; (b46b0 <_Z12displayPrintbbiii+0x15c>)
   b458a:	4668      	mov	r0, sp
   b458c:	f003 fb76 	bl	b7c7c <_ZN6StringC1ERKS_>
         Serial.println("ActuadorNoValidoError");
         break;
      }
   }

   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4590:	4b48      	ldr	r3, [pc, #288]	; (b46b4 <_Z12displayPrintbbiii+0x160>)
   b4592:	4949      	ldr	r1, [pc, #292]	; (b46b8 <_Z12displayPrintbbiii+0x164>)
   b4594:	4668      	mov	r0, sp
   b4596:	2e00      	cmp	r6, #0
   b4598:	bf08      	it	eq
   b459a:	4619      	moveq	r1, r3
   b459c:	f003 fbc1 	bl	b7d22 <_ZplRK15StringSumHelperPKc>
   b45a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   b45a2:	4604      	mov	r4, r0
   b45a4:	220a      	movs	r2, #10
   b45a6:	a804      	add	r0, sp, #16
   b45a8:	f003 fb85 	bl	b7cb6 <_ZN6StringC1Eih>
   b45ac:	a904      	add	r1, sp, #16
   b45ae:	4620      	mov	r0, r4
   b45b0:	f003 fbab 	bl	b7d0a <_ZplRK15StringSumHelperRK6String>
   b45b4:	2140      	movs	r1, #64	; 0x40
   b45b6:	6802      	ldr	r2, [r0, #0]
   b45b8:	4840      	ldr	r0, [pc, #256]	; (b46bc <_Z12displayPrintbbiii+0x168>)
   display.println(buf);
   b45ba:	4c3b      	ldr	r4, [pc, #236]	; (b46a8 <_Z12displayPrintbbiii+0x154>)
   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b45bc:	f002 ff8c 	bl	b74d8 <snprintf>
   b45c0:	a804      	add	r0, sp, #16
   b45c2:	f003 faed 	bl	b7ba0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45c6:	4668      	mov	r0, sp
   b45c8:	f003 faea 	bl	b7ba0 <_ZN6StringD1Ev>
   display.println(buf);
   b45cc:	493b      	ldr	r1, [pc, #236]	; (b46bc <_Z12displayPrintbbiii+0x168>)
   b45ce:	4620      	mov	r0, r4
   b45d0:	f003 f9d5 	bl	b797e <_ZN5Print7printlnEPKc>
	const char * c_str() const { return buffer; }
   b45d4:	4b3a      	ldr	r3, [pc, #232]	; (b46c0 <_Z12displayPrintbbiii+0x16c>)

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b45d6:	4839      	ldr	r0, [pc, #228]	; (b46bc <_Z12displayPrintbbiii+0x168>)
   b45d8:	681a      	ldr	r2, [r3, #0]
   b45da:	2140      	movs	r1, #64	; 0x40
   b45dc:	f002 ff7c 	bl	b74d8 <snprintf>
   display.println(buf);
   b45e0:	4936      	ldr	r1, [pc, #216]	; (b46bc <_Z12displayPrintbbiii+0x168>)
   b45e2:	4620      	mov	r0, r4
   b45e4:	f003 f9cb 	bl	b797e <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b45e8:	2300      	movs	r3, #0
   b45ea:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b45ec:	b009      	add	sp, #36	; 0x24
   b45ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b45f0:	4934      	ldr	r1, [pc, #208]	; (b46c4 <_Z12displayPrintbbiii+0x170>)
   b45f2:	e7c6      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b45f4:	f003 fc76 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b45f8:	4933      	ldr	r1, [pc, #204]	; (b46c8 <_Z12displayPrintbbiii+0x174>)
   b45fa:	4622      	mov	r2, r4
   b45fc:	f7ff fd70 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4600:	b90c      	cbnz	r4, b4606 <_Z12displayPrintbbiii+0xb2>
   b4602:	4932      	ldr	r1, [pc, #200]	; (b46cc <_Z12displayPrintbbiii+0x178>)
   b4604:	e7bd      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
   b4606:	4932      	ldr	r1, [pc, #200]	; (b46d0 <_Z12displayPrintbbiii+0x17c>)
   b4608:	e7bb      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b460a:	b90c      	cbnz	r4, b4610 <_Z12displayPrintbbiii+0xbc>
   b460c:	4931      	ldr	r1, [pc, #196]	; (b46d4 <_Z12displayPrintbbiii+0x180>)
   b460e:	e7b8      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
   b4610:	4931      	ldr	r1, [pc, #196]	; (b46d8 <_Z12displayPrintbbiii+0x184>)
   b4612:	e7b6      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b4614:	b90c      	cbnz	r4, b461a <_Z12displayPrintbbiii+0xc6>
   b4616:	4931      	ldr	r1, [pc, #196]	; (b46dc <_Z12displayPrintbbiii+0x188>)
   b4618:	e7b3      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
   b461a:	4931      	ldr	r1, [pc, #196]	; (b46e0 <_Z12displayPrintbbiii+0x18c>)
   b461c:	e7b1      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b461e:	b90c      	cbnz	r4, b4624 <_Z12displayPrintbbiii+0xd0>
   b4620:	4930      	ldr	r1, [pc, #192]	; (b46e4 <_Z12displayPrintbbiii+0x190>)
   b4622:	e7ae      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
   b4624:	4930      	ldr	r1, [pc, #192]	; (b46e8 <_Z12displayPrintbbiii+0x194>)
   b4626:	e7ac      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         switch (condicion)
   b4628:	2c01      	cmp	r4, #1
   b462a:	d005      	beq.n	b4638 <_Z12displayPrintbbiii+0xe4>
   b462c:	2c02      	cmp	r4, #2
   b462e:	d005      	beq.n	b463c <_Z12displayPrintbbiii+0xe8>
   b4630:	2c00      	cmp	r4, #0
   b4632:	d1a9      	bne.n	b4588 <_Z12displayPrintbbiii+0x34>
            dispositivos[1] = "Sensor Temp.Frio";
   b4634:	492d      	ldr	r1, [pc, #180]	; (b46ec <_Z12displayPrintbbiii+0x198>)
   b4636:	e7a4      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Templado";
   b4638:	492d      	ldr	r1, [pc, #180]	; (b46f0 <_Z12displayPrintbbiii+0x19c>)
   b463a:	e7a2      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Calor";
   b463c:	492d      	ldr	r1, [pc, #180]	; (b46f4 <_Z12displayPrintbbiii+0x1a0>)
   b463e:	e7a0      	b.n	b4582 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b4640:	b94c      	cbnz	r4, b4656 <_Z12displayPrintbbiii+0x102>
   b4642:	492d      	ldr	r1, [pc, #180]	; (b46f8 <_Z12displayPrintbbiii+0x1a4>)
   b4644:	481a      	ldr	r0, [pc, #104]	; (b46b0 <_Z12displayPrintbbiii+0x15c>)
   b4646:	f003 fb24 	bl	b7c92 <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b464a:	f003 fc4b 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b464e:	492b      	ldr	r1, [pc, #172]	; (b46fc <_Z12displayPrintbbiii+0x1a8>)
         Serial.println("ActuadorNoValidoError");
   b4650:	f003 f995 	bl	b797e <_ZN5Print7printlnEPKc>
         break;
   b4654:	e798      	b.n	b4588 <_Z12displayPrintbbiii+0x34>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b4656:	492a      	ldr	r1, [pc, #168]	; (b4700 <_Z12displayPrintbbiii+0x1ac>)
   b4658:	e7f4      	b.n	b4644 <_Z12displayPrintbbiii+0xf0>
      switch (id)
   b465a:	b12d      	cbz	r5, b4668 <_Z12displayPrintbbiii+0x114>
   b465c:	2d01      	cmp	r5, #1
   b465e:	d01f      	beq.n	b46a0 <_Z12displayPrintbbiii+0x14c>
         Serial.println("ActuadorNoValidoError");
   b4660:	f003 fc40 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4664:	4927      	ldr	r1, [pc, #156]	; (b4704 <_Z12displayPrintbbiii+0x1b0>)
   b4666:	e7f3      	b.n	b4650 <_Z12displayPrintbbiii+0xfc>
         switch (condicion)
   b4668:	2c05      	cmp	r4, #5
   b466a:	d80f      	bhi.n	b468c <_Z12displayPrintbbiii+0x138>
   b466c:	e8df f004 	tbb	[pc, r4]
   b4670:	12100a03 	.word	0x12100a03
   b4674:	1614      	.short	0x1614
            dispositivos[0] = "RGB-Verde-Rojo";
   b4676:	4924      	ldr	r1, [pc, #144]	; (b4708 <_Z12displayPrintbbiii+0x1b4>)
   b4678:	4811      	ldr	r0, [pc, #68]	; (b46c0 <_Z12displayPrintbbiii+0x16c>)
   b467a:	f003 fb0a 	bl	b7c92 <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b467e:	4923      	ldr	r1, [pc, #140]	; (b470c <_Z12displayPrintbbiii+0x1b8>)
   b4680:	480f      	ldr	r0, [pc, #60]	; (b46c0 <_Z12displayPrintbbiii+0x16c>)
   b4682:	e77f      	b.n	b4584 <_Z12displayPrintbbiii+0x30>
            dispositivos[0] = "RGB-Amarillo-Morado";
   b4684:	4922      	ldr	r1, [pc, #136]	; (b4710 <_Z12displayPrintbbiii+0x1bc>)
            dispositivos[0] = "RGB-Azul-Naranja";
   b4686:	480e      	ldr	r0, [pc, #56]	; (b46c0 <_Z12displayPrintbbiii+0x16c>)
   b4688:	f003 fb03 	bl	b7c92 <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b468c:	4921      	ldr	r1, [pc, #132]	; (b4714 <_Z12displayPrintbbiii+0x1c0>)
   b468e:	e7f7      	b.n	b4680 <_Z12displayPrintbbiii+0x12c>
            dispositivos[0] = "RGB-Azul-Naranja";
   b4690:	4921      	ldr	r1, [pc, #132]	; (b4718 <_Z12displayPrintbbiii+0x1c4>)
   b4692:	e7f8      	b.n	b4686 <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-Blink";
   b4694:	4921      	ldr	r1, [pc, #132]	; (b471c <_Z12displayPrintbbiii+0x1c8>)
   b4696:	e7f6      	b.n	b4686 <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-RainBow";
   b4698:	4921      	ldr	r1, [pc, #132]	; (b4720 <_Z12displayPrintbbiii+0x1cc>)
   b469a:	e7f4      	b.n	b4686 <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-On-Off";
   b469c:	4921      	ldr	r1, [pc, #132]	; (b4724 <_Z12displayPrintbbiii+0x1d0>)
   b469e:	e7f2      	b.n	b4686 <_Z12displayPrintbbiii+0x132>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b46a0:	2c00      	cmp	r4, #0
   b46a2:	d0ec      	beq.n	b467e <_Z12displayPrintbbiii+0x12a>
   b46a4:	e7f2      	b.n	b468c <_Z12displayPrintbbiii+0x138>
   b46a6:	bf00      	nop
   b46a8:	2003e620 	.word	0x2003e620
   b46ac:	000b89cb 	.word	0x000b89cb
   b46b0:	2003e680 	.word	0x2003e680
   b46b4:	000b89c8 	.word	0x000b89c8
   b46b8:	000b89c5 	.word	0x000b89c5
   b46bc:	2003e5e0 	.word	0x2003e5e0
   b46c0:	2003e670 	.word	0x2003e670
   b46c4:	000b89e1 	.word	0x000b89e1
   b46c8:	000b89f8 	.word	0x000b89f8
   b46cc:	000b8a0f 	.word	0x000b8a0f
   b46d0:	000b8a1d 	.word	0x000b8a1d
   b46d4:	000b8a2b 	.word	0x000b8a2b
   b46d8:	000b8a3b 	.word	0x000b8a3b
   b46dc:	000b8a4b 	.word	0x000b8a4b
   b46e0:	000b8a5b 	.word	0x000b8a5b
   b46e4:	000b8a6b 	.word	0x000b8a6b
   b46e8:	000b8a7e 	.word	0x000b8a7e
   b46ec:	000b8a91 	.word	0x000b8a91
   b46f0:	000b8aa2 	.word	0x000b8aa2
   b46f4:	000b8ab7 	.word	0x000b8ab7
   b46f8:	000b8ac9 	.word	0x000b8ac9
   b46fc:	000b8af7 	.word	0x000b8af7
   b4700:	000b8ae0 	.word	0x000b8ae0
   b4704:	000b8b7f 	.word	0x000b8b7f
   b4708:	000b8b0b 	.word	0x000b8b0b
   b470c:	000b8b60 	.word	0x000b8b60
   b4710:	000b8b1a 	.word	0x000b8b1a
   b4714:	000b8b70 	.word	0x000b8b70
   b4718:	000b8b2e 	.word	0x000b8b2e
   b471c:	000b8b3f 	.word	0x000b8b3f
   b4720:	000b8b49 	.word	0x000b8b49
   b4724:	000b8b55 	.word	0x000b8b55

000b4728 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b4728:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b472a:	7803      	ldrb	r3, [r0, #0]
   b472c:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b472e:	bf0c      	ite	eq
   b4730:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b4732:	2200      	movne	r2, #0
   int i = 0;
   b4734:	4613      	mov	r3, r2
   b4736:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b4738:	240a      	movs	r4, #10
      i++;
   b473a:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b473c:	f813 1b01 	ldrb.w	r1, [r3], #1
   b4740:	3930      	subs	r1, #48	; 0x30
   b4742:	b2cd      	uxtb	r5, r1
   b4744:	2d09      	cmp	r5, #9
   b4746:	d802      	bhi.n	b474e <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b4748:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b474c:	e7f6      	b.n	b473c <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b474e:	b102      	cbz	r2, b4752 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b4750:	4240      	negs	r0, r0
   return num;
}
   b4752:	bd30      	pop	{r4, r5, pc}

000b4754 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b4754:	b570      	push	{r4, r5, r6, lr}
   b4756:	4614      	mov	r4, r2
   b4758:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b475a:	f004 f84f 	bl	b87fc <strtok>
   int j = 0;
   b475e:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4760:	b140      	cbz	r0, b4774 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4762:	f7ff ffe1 	bl	b4728 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4766:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4768:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b476c:	2000      	movs	r0, #0
   b476e:	f004 f845 	bl	b87fc <strtok>
   while (ptr != NULL)
   b4772:	e7f5      	b.n	b4760 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4774:	6823      	ldr	r3, [r4, #0]
   b4776:	b913      	cbnz	r3, b477e <_Z5splitPcS_Pi+0x2a>
      haveSensor = true;
   b4778:	4b01      	ldr	r3, [pc, #4]	; (b4780 <_Z5splitPcS_Pi+0x2c>)
   b477a:	2201      	movs	r2, #1
   b477c:	701a      	strb	r2, [r3, #0]
}
   b477e:	bd70      	pop	{r4, r5, r6, pc}
   b4780:	2003e690 	.word	0x2003e690

000b4784 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4784:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4786:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b478a:	f10d 0307 	add.w	r3, sp, #7
   b478e:	460a      	mov	r2, r1
   b4790:	4601      	mov	r1, r0
   b4792:	480d      	ldr	r0, [pc, #52]	; (b47c8 <_Z17readDataFromBlockhPhh+0x44>)
   b4794:	4d0d      	ldr	r5, [pc, #52]	; (b47cc <_Z17readDataFromBlockhPhh+0x48>)
   b4796:	f002 fab7 	bl	b6d08 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b479a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b479c:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b479e:	d010      	beq.n	b47c2 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b47a0:	f003 fba0 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b47a4:	490a      	ldr	r1, [pc, #40]	; (b47d0 <_Z17readDataFromBlockhPhh+0x4c>)
   b47a6:	f003 f8d7 	bl	b7958 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b47aa:	f003 fb9b 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b47ae:	7829      	ldrb	r1, [r5, #0]
   b47b0:	4604      	mov	r4, r0
   b47b2:	4805      	ldr	r0, [pc, #20]	; (b47c8 <_Z17readDataFromBlockhPhh+0x44>)
   b47b4:	f002 f818 	bl	b67e8 <_ZN7MFRC52217GetStatusCodeNameEh>
   b47b8:	4601      	mov	r1, r0
   b47ba:	4620      	mov	r0, r4
   b47bc:	f003 f8df 	bl	b797e <_ZN5Print7printlnEPKc>
   b47c0:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b47c2:	b003      	add	sp, #12
   b47c4:	bd30      	pop	{r4, r5, pc}
   b47c6:	bf00      	nop
   b47c8:	2003e6a0 	.word	0x2003e6a0
   b47cc:	2003e6c0 	.word	0x2003e6c0
   b47d0:	000b8b95 	.word	0x000b8b95

000b47d4 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b47d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b47d6:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b47d8:	4d1e      	ldr	r5, [pc, #120]	; (b4854 <_Z8getTagIDPi+0x80>)
   b47da:	4a1f      	ldr	r2, [pc, #124]	; (b4858 <_Z8getTagIDPi+0x84>)
   b47dc:	9500      	str	r5, [sp, #0]
   b47de:	4b1f      	ldr	r3, [pc, #124]	; (b485c <_Z8getTagIDPi+0x88>)
   b47e0:	7812      	ldrb	r2, [r2, #0]
   b47e2:	4f1f      	ldr	r7, [pc, #124]	; (b4860 <_Z8getTagIDPi+0x8c>)
{
   b47e4:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b47e6:	2160      	movs	r1, #96	; 0x60
   b47e8:	4628      	mov	r0, r5
   b47ea:	f002 faae 	bl	b6d4a <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b47ee:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b47f0:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b47f2:	d00f      	beq.n	b4814 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b47f4:	f003 fb76 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b47f8:	491a      	ldr	r1, [pc, #104]	; (b4864 <_Z8getTagIDPi+0x90>)
   b47fa:	f003 f8ad 	bl	b7958 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b47fe:	f003 fb71 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4802:	7839      	ldrb	r1, [r7, #0]
   b4804:	4604      	mov	r4, r0
   b4806:	4628      	mov	r0, r5
   b4808:	f001 ffee 	bl	b67e8 <_ZN7MFRC52217GetStatusCodeNameEh>
   b480c:	4601      	mov	r1, r0
   b480e:	4620      	mov	r0, r4
   b4810:	f003 f8b5 	bl	b797e <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b4814:	4b14      	ldr	r3, [pc, #80]	; (b4868 <_Z8getTagIDPi+0x94>)
   b4816:	2212      	movs	r2, #18
   b4818:	7818      	ldrb	r0, [r3, #0]
   b481a:	a907      	add	r1, sp, #28
   b481c:	f7ff ffb2 	bl	b4784 <_Z17readDataFromBlockhPhh>
   b4820:	b1b0      	cbz	r0, b4850 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b4822:	ac07      	add	r4, sp, #28
   b4824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4826:	ad03      	add	r5, sp, #12
   b4828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b482a:	6823      	ldr	r3, [r4, #0]
   b482c:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b482e:	f003 fb59 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4832:	490e      	ldr	r1, [pc, #56]	; (b486c <_Z8getTagIDPi+0x98>)
   b4834:	aa03      	add	r2, sp, #12
   b4836:	f7ff fc53 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b483a:	490d      	ldr	r1, [pc, #52]	; (b4870 <_Z8getTagIDPi+0x9c>)
   b483c:	4632      	mov	r2, r6
   b483e:	a803      	add	r0, sp, #12
   b4840:	f7ff ff88 	bl	b4754 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b4844:	4803      	ldr	r0, [pc, #12]	; (b4854 <_Z8getTagIDPi+0x80>)
   b4846:	f002 fa3a 	bl	b6cbe <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b484a:	4802      	ldr	r0, [pc, #8]	; (b4854 <_Z8getTagIDPi+0x80>)
   b484c:	f002 f897 	bl	b697e <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b4850:	b00d      	add	sp, #52	; 0x34
   b4852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4854:	2003e6a0 	.word	0x2003e6a0
   b4858:	2003df78 	.word	0x2003df78
   b485c:	2003e691 	.word	0x2003e691
   b4860:	2003e6c0 	.word	0x2003e6c0
   b4864:	000b8bac 	.word	0x000b8bac
   b4868:	2003df54 	.word	0x2003df54
   b486c:	000b8bc8 	.word	0x000b8bc8
   b4870:	2003df55 	.word	0x2003df55

000b4874 <_Z13asignarPuertoii>:

int asignarPuerto(int id, int type)
{
   b4874:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);
   if (esAnalogico(type))
   b4876:	b969      	cbnz	r1, b4894 <_Z13asignarPuertoii+0x20>
   {
      // Serial.print(" \t y es analógico\n");
      Serial.println("Es analogico");
   b4878:	f003 fb34 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b487c:	4927      	ldr	r1, [pc, #156]	; (b491c <_Z13asignarPuertoii+0xa8>)
   b487e:	f003 f87e 	bl	b797e <_ZN5Print7printlnEPKc>
      option = puertoAnalogico;
   b4882:	4b27      	ldr	r3, [pc, #156]	; (b4920 <_Z13asignarPuertoii+0xac>)
   }
   else
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b4884:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b4886:	2c05      	cmp	r4, #5
   b4888:	d840      	bhi.n	b490c <_Z13asignarPuertoii+0x98>
   b488a:	e8df f004 	tbb	[pc, r4]
   b488e:	0f05      	.short	0x0f05
   b4890:	342d261a 	.word	0x342d261a
      option = puertoDigital;
   b4894:	4b23      	ldr	r3, [pc, #140]	; (b4924 <_Z13asignarPuertoii+0xb0>)
   b4896:	e7f5      	b.n	b4884 <_Z13asignarPuertoii+0x10>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4898:	f003 fb24 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b489c:	4922      	ldr	r1, [pc, #136]	; (b4928 <_Z13asignarPuertoii+0xb4>)
   b489e:	f003 f85b 	bl	b7958 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b48a2:	4a1f      	ldr	r2, [pc, #124]	; (b4920 <_Z13asignarPuertoii+0xac>)
      puertoDigital++;
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
   b48a4:	6813      	ldr	r3, [r2, #0]
   b48a6:	3301      	adds	r3, #1
   b48a8:	6013      	str	r3, [r2, #0]
      return 4;
   b48aa:	e014      	b.n	b48d6 <_Z13asignarPuertoii+0x62>
      Serial.print("Conectar al puerto A2\n");
   b48ac:	f003 fb1a 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b48b0:	491e      	ldr	r1, [pc, #120]	; (b492c <_Z13asignarPuertoii+0xb8>)
   b48b2:	f003 f851 	bl	b7958 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b48b6:	4a1a      	ldr	r2, [pc, #104]	; (b4920 <_Z13asignarPuertoii+0xac>)
      puertoDigital++;
   b48b8:	6813      	ldr	r3, [r2, #0]
   b48ba:	3301      	adds	r3, #1
   b48bc:	6013      	str	r3, [r2, #0]
      return 2;
   b48be:	2402      	movs	r4, #2
   b48c0:	e009      	b.n	b48d6 <_Z13asignarPuertoii+0x62>
      Serial.print("Conectar al puerto A4\n");
   b48c2:	f003 fb0f 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b48c6:	491a      	ldr	r1, [pc, #104]	; (b4930 <_Z13asignarPuertoii+0xbc>)
   b48c8:	f003 f846 	bl	b7958 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b48cc:	4b14      	ldr	r3, [pc, #80]	; (b4920 <_Z13asignarPuertoii+0xac>)
   b48ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b48d2:	601a      	str	r2, [r3, #0]
      return 4;
   b48d4:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b48d6:	4620      	mov	r0, r4
   b48d8:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b48da:	f003 fb03 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b48de:	4915      	ldr	r1, [pc, #84]	; (b4934 <_Z13asignarPuertoii+0xc0>)
   b48e0:	f003 f83a 	bl	b7958 <_ZN5Print5printEPKc>
      puertoDigital++;
   b48e4:	4a0f      	ldr	r2, [pc, #60]	; (b4924 <_Z13asignarPuertoii+0xb0>)
   b48e6:	e7e7      	b.n	b48b8 <_Z13asignarPuertoii+0x44>
      Serial.print("Conectar al puerto D4\n");
   b48e8:	f003 fafc 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b48ec:	4912      	ldr	r1, [pc, #72]	; (b4938 <_Z13asignarPuertoii+0xc4>)
   b48ee:	f003 f833 	bl	b7958 <_ZN5Print5printEPKc>
      puertoDigital++;
   b48f2:	4a0c      	ldr	r2, [pc, #48]	; (b4924 <_Z13asignarPuertoii+0xb0>)
   b48f4:	e7d6      	b.n	b48a4 <_Z13asignarPuertoii+0x30>
      Serial.print("Conectar al puerto D6\n");
   b48f6:	f003 faf5 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b48fa:	4910      	ldr	r1, [pc, #64]	; (b493c <_Z13asignarPuertoii+0xc8>)
   b48fc:	f003 f82c 	bl	b7958 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b4900:	4b08      	ldr	r3, [pc, #32]	; (b4924 <_Z13asignarPuertoii+0xb0>)
   b4902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4906:	601a      	str	r2, [r3, #0]
      return 6;
   b4908:	2406      	movs	r4, #6
   b490a:	e7e4      	b.n	b48d6 <_Z13asignarPuertoii+0x62>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b490c:	f003 faea 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4910:	490b      	ldr	r1, [pc, #44]	; (b4940 <_Z13asignarPuertoii+0xcc>)
   b4912:	f003 f821 	bl	b7958 <_ZN5Print5printEPKc>
      return -1;
   b4916:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b491a:	e7dc      	b.n	b48d6 <_Z13asignarPuertoii+0x62>
   b491c:	000b8bd4 	.word	0x000b8bd4
   b4920:	2003e6bc 	.word	0x2003e6bc
   b4924:	2003df5c 	.word	0x2003df5c
   b4928:	000b8be1 	.word	0x000b8be1
   b492c:	000b8bf8 	.word	0x000b8bf8
   b4930:	000b8c0f 	.word	0x000b8c0f
   b4934:	000b8c26 	.word	0x000b8c26
   b4938:	000b8c3d 	.word	0x000b8c3d
   b493c:	000b8c54 	.word	0x000b8c54
   b4940:	000b8c6b 	.word	0x000b8c6b

000b4944 <_Z9ledApagarv>:

bool init = true;
ChainableLED ledObject = ChainableLED(0, 1, 5);

void ledApagar()
{
   b4944:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b4946:	2300      	movs	r3, #0
   b4948:	4804      	ldr	r0, [pc, #16]	; (b495c <_Z9ledApagarv+0x18>)
   b494a:	9300      	str	r3, [sp, #0]
   b494c:	461a      	mov	r2, r3
   b494e:	4619      	mov	r1, r3
   b4950:	f001 fed0 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4954:	b003      	add	sp, #12
   b4956:	f85d fb04 	ldr.w	pc, [sp], #4
   b495a:	bf00      	nop
   b495c:	2003e698 	.word	0x2003e698

000b4960 <_Z7ledRojov>:
void ledRojo()
{
   b4960:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4962:	2300      	movs	r3, #0
   b4964:	4804      	ldr	r0, [pc, #16]	; (b4978 <_Z7ledRojov+0x18>)
   b4966:	9300      	str	r3, [sp, #0]
   b4968:	22ff      	movs	r2, #255	; 0xff
   b496a:	4619      	mov	r1, r3
   b496c:	f001 fec2 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4970:	b003      	add	sp, #12
   b4972:	f85d fb04 	ldr.w	pc, [sp], #4
   b4976:	bf00      	nop
   b4978:	2003e698 	.word	0x2003e698

000b497c <_Z8ledVerdev>:
void ledVerde()
{
   b497c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b497e:	230a      	movs	r3, #10
   b4980:	2200      	movs	r2, #0
   b4982:	9300      	str	r3, [sp, #0]
   b4984:	4803      	ldr	r0, [pc, #12]	; (b4994 <_Z8ledVerdev+0x18>)
   b4986:	23ff      	movs	r3, #255	; 0xff
   b4988:	4611      	mov	r1, r2
   b498a:	f001 feb3 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b498e:	b003      	add	sp, #12
   b4990:	f85d fb04 	ldr.w	pc, [sp], #4
   b4994:	2003e698 	.word	0x2003e698

000b4998 <_Z7ledAzulv>:
void ledAzul()
{
   b4998:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b499a:	23ff      	movs	r3, #255	; 0xff
   b499c:	9300      	str	r3, [sp, #0]
   b499e:	2300      	movs	r3, #0
   b49a0:	4803      	ldr	r0, [pc, #12]	; (b49b0 <_Z7ledAzulv+0x18>)
   b49a2:	461a      	mov	r2, r3
   b49a4:	4619      	mov	r1, r3
   b49a6:	f001 fea5 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b49aa:	b003      	add	sp, #12
   b49ac:	f85d fb04 	ldr.w	pc, [sp], #4
   b49b0:	2003e698 	.word	0x2003e698

000b49b4 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b49b4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b49b6:	2100      	movs	r1, #0
   b49b8:	4804      	ldr	r0, [pc, #16]	; (b49cc <_Z11ledAmarillov+0x18>)
   b49ba:	9100      	str	r1, [sp, #0]
   b49bc:	23e9      	movs	r3, #233	; 0xe9
   b49be:	22ff      	movs	r2, #255	; 0xff
   b49c0:	f001 fe98 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b49c4:	b003      	add	sp, #12
   b49c6:	f85d fb04 	ldr.w	pc, [sp], #4
   b49ca:	bf00      	nop
   b49cc:	2003e698 	.word	0x2003e698

000b49d0 <_Z9ledMoradov>:
void ledMorado()
{
   b49d0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b49d2:	2375      	movs	r3, #117	; 0x75
   b49d4:	9300      	str	r3, [sp, #0]
   b49d6:	4804      	ldr	r0, [pc, #16]	; (b49e8 <_Z9ledMoradov+0x18>)
   b49d8:	2346      	movs	r3, #70	; 0x46
   b49da:	226c      	movs	r2, #108	; 0x6c
   b49dc:	2100      	movs	r1, #0
   b49de:	f001 fe89 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b49e2:	b003      	add	sp, #12
   b49e4:	f85d fb04 	ldr.w	pc, [sp], #4
   b49e8:	2003e698 	.word	0x2003e698

000b49ec <_Z10ledNaranjav>:
void ledNaranja()
{
   b49ec:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b49ee:	2100      	movs	r1, #0
   b49f0:	4804      	ldr	r0, [pc, #16]	; (b4a04 <_Z10ledNaranjav+0x18>)
   b49f2:	9100      	str	r1, [sp, #0]
   b49f4:	2380      	movs	r3, #128	; 0x80
   b49f6:	22ff      	movs	r2, #255	; 0xff
   b49f8:	f001 fe7c 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b49fc:	b003      	add	sp, #12
   b49fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a02:	bf00      	nop
   b4a04:	2003e698 	.word	0x2003e698

000b4a08 <_Z9ledBlancov>:
void ledBlanco()
{
   b4a08:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b4a0a:	23ff      	movs	r3, #255	; 0xff
   b4a0c:	4804      	ldr	r0, [pc, #16]	; (b4a20 <_Z9ledBlancov+0x18>)
   b4a0e:	9300      	str	r3, [sp, #0]
   b4a10:	461a      	mov	r2, r3
   b4a12:	2100      	movs	r1, #0
   b4a14:	f001 fe6e 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a18:	b003      	add	sp, #12
   b4a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a1e:	bf00      	nop
   b4a20:	2003e698 	.word	0x2003e698

000b4a24 <_Z8ledBlinkv>:

void ledBlink()
{
   b4a24:	b508      	push	{r3, lr}
    ledBlanco();
   b4a26:	f7ff ffef 	bl	b4a08 <_Z9ledBlancov>
    delay(400);
   b4a2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4a2e:	f002 fd7b 	bl	b7528 <delay>
    ledApagar();
   b4a32:	f7ff ff87 	bl	b4944 <_Z9ledApagarv>
    delay(200);
}
   b4a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4a3a:	20c8      	movs	r0, #200	; 0xc8
   b4a3c:	f002 bd74 	b.w	b7528 <delay>

000b4a40 <_Z11ledArcoirisv>:

void ledArcoiris()
{
   b4a40:	b508      	push	{r3, lr}

    ledRojo();
   b4a42:	f7ff ff8d 	bl	b4960 <_Z7ledRojov>
    delay(200);
   b4a46:	20c8      	movs	r0, #200	; 0xc8
   b4a48:	f002 fd6e 	bl	b7528 <delay>
    ledNaranja();
   b4a4c:	f7ff ffce 	bl	b49ec <_Z10ledNaranjav>
    delay(200);
   b4a50:	20c8      	movs	r0, #200	; 0xc8
   b4a52:	f002 fd69 	bl	b7528 <delay>
    ledAmarillo();
   b4a56:	f7ff ffad 	bl	b49b4 <_Z11ledAmarillov>
    delay(200);
   b4a5a:	20c8      	movs	r0, #200	; 0xc8
   b4a5c:	f002 fd64 	bl	b7528 <delay>
    ledVerde();
   b4a60:	f7ff ff8c 	bl	b497c <_Z8ledVerdev>
    delay(200);
   b4a64:	20c8      	movs	r0, #200	; 0xc8
   b4a66:	f002 fd5f 	bl	b7528 <delay>
    ledMorado();
   b4a6a:	f7ff ffb1 	bl	b49d0 <_Z9ledMoradov>
    delay(200);
   b4a6e:	20c8      	movs	r0, #200	; 0xc8
   b4a70:	f002 fd5a 	bl	b7528 <delay>
    ledAzul();
   b4a74:	f7ff ff90 	bl	b4998 <_Z7ledAzulv>
    delay(200);
}
   b4a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4a7c:	20c8      	movs	r0, #200	; 0xc8
   b4a7e:	f002 bd53 	b.w	b7528 <delay>

000b4a82 <_Z8pitidoONi>:

// Acciones del zumbador
void pitidoON(int puerto)
{
   b4a82:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4a84:	b284      	uxth	r4, r0
   b4a86:	4620      	mov	r0, r4
   b4a88:	2101      	movs	r1, #1
   b4a8a:	f003 fbc6 	bl	b821a <digitalWrite>
    digitalWrite(puerto, HIGH);
   b4a8e:	4620      	mov	r0, r4
   b4a90:	2101      	movs	r1, #1
   b4a92:	f003 fbc2 	bl	b821a <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4a96:	1c60      	adds	r0, r4, #1
   b4a98:	b280      	uxth	r0, r0
   b4a9a:	2101      	movs	r1, #1
   b4a9c:	9001      	str	r0, [sp, #4]
   b4a9e:	f003 fbbc 	bl	b821a <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4aa2:	9801      	ldr	r0, [sp, #4]
   b4aa4:	2101      	movs	r1, #1
}
   b4aa6:	b002      	add	sp, #8
   b4aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b4aac:	f003 bbb5 	b.w	b821a <digitalWrite>

000b4ab0 <_Z9pitidoOFFi>:

void pitidoOFF(int puerto)
{
   b4ab0:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4ab2:	b284      	uxth	r4, r0
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	2100      	movs	r1, #0
   b4ab8:	f003 fbaf 	bl	b821a <digitalWrite>
    digitalWrite(puerto, LOW);
   b4abc:	4620      	mov	r0, r4
   b4abe:	2100      	movs	r1, #0
   b4ac0:	f003 fbab 	bl	b821a <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4ac4:	1c60      	adds	r0, r4, #1
   b4ac6:	b280      	uxth	r0, r0
   b4ac8:	2100      	movs	r1, #0
   b4aca:	9001      	str	r0, [sp, #4]
   b4acc:	f003 fba5 	bl	b821a <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4ad0:	9801      	ldr	r0, [sp, #4]
   b4ad2:	2100      	movs	r1, #0
}
   b4ad4:	b002      	add	sp, #8
   b4ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4ada:	f003 bb9e 	b.w	b821a <digitalWrite>

000b4ade <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b4ade:	b510      	push	{r4, lr}
   b4ae0:	4604      	mov	r4, r0
    pitidoON(puerto);
   b4ae2:	f7ff ffce 	bl	b4a82 <_Z8pitidoONi>
    delay(100);
   b4ae6:	2064      	movs	r0, #100	; 0x64
   b4ae8:	f002 fd1e 	bl	b7528 <delay>
    pitidoOFF(puerto);
   b4aec:	4620      	mov	r0, r4
   b4aee:	f7ff ffdf 	bl	b4ab0 <_Z9pitidoOFFi>
    delay(100);
}
   b4af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4af6:	2064      	movs	r0, #100	; 0x64
   b4af8:	f002 bd16 	b.w	b7528 <delay>

000b4afc <_Z10activarLEDii>:
        pitidoOFF(puerto);
}

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Serial.println("Actiaver LED");
    if (init)
   b4afe:	4f28      	ldr	r7, [pc, #160]	; (b4ba0 <_Z10activarLEDii+0xa4>)
   b4b00:	783b      	ldrb	r3, [r7, #0]
{
   b4b02:	4604      	mov	r4, r0
    if (init)
   b4b04:	b1a3      	cbz	r3, b4b30 <_Z10activarLEDii+0x34>
    {
        ledObject = ChainableLED(puerto, puerto + 1, 5);
   b4b06:	b2c9      	uxtb	r1, r1
   b4b08:	1c4a      	adds	r2, r1, #1
   b4b0a:	466d      	mov	r5, sp
   b4b0c:	2305      	movs	r3, #5
   b4b0e:	b2d2      	uxtb	r2, r2
   b4b10:	4628      	mov	r0, r5
   b4b12:	f001 fd85 	bl	b6620 <_ZN12ChainableLEDC1Ehhh>
   b4b16:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4b1a:	4e22      	ldr	r6, [pc, #136]	; (b4ba4 <_Z10activarLEDii+0xa8>)
   b4b1c:	e886 0003 	stmia.w	r6, {r0, r1}
   b4b20:	4628      	mov	r0, r5
   b4b22:	f001 fd8a 	bl	b663a <_ZN12ChainableLEDD1Ev>
        ledObject.init();
   b4b26:	4630      	mov	r0, r6
   b4b28:	f001 fe2c 	bl	b6784 <_ZN12ChainableLED4initEv>
        init = false;
   b4b2c:	2300      	movs	r3, #0
   b4b2e:	703b      	strb	r3, [r7, #0]
    }

    switch (opcion)
   b4b30:	2c07      	cmp	r4, #7
   b4b32:	d82d      	bhi.n	b4b90 <_Z10activarLEDii+0x94>
   b4b34:	e8df f004 	tbb	[pc, r4]
   b4b38:	130e0904 	.word	0x130e0904
   b4b3c:	27221d18 	.word	0x27221d18

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4b40:	b003      	add	sp, #12
   b4b42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerde();
   b4b46:	f7ff bf19 	b.w	b497c <_Z8ledVerdev>
}
   b4b4a:	b003      	add	sp, #12
   b4b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledRojo();
   b4b50:	f7ff bf06 	b.w	b4960 <_Z7ledRojov>
}
   b4b54:	b003      	add	sp, #12
   b4b56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAmarillo();
   b4b5a:	f7ff bf2b 	b.w	b49b4 <_Z11ledAmarillov>
}
   b4b5e:	b003      	add	sp, #12
   b4b60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMorado();
   b4b64:	f7ff bf34 	b.w	b49d0 <_Z9ledMoradov>
}
   b4b68:	b003      	add	sp, #12
   b4b6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzul();
   b4b6e:	f7ff bf13 	b.w	b4998 <_Z7ledAzulv>
}
   b4b72:	b003      	add	sp, #12
   b4b74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledNaranja();
   b4b78:	f7ff bf38 	b.w	b49ec <_Z10ledNaranjav>
}
   b4b7c:	b003      	add	sp, #12
   b4b7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink();
   b4b82:	f7ff bf4f 	b.w	b4a24 <_Z8ledBlinkv>
}
   b4b86:	b003      	add	sp, #12
   b4b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris();
   b4b8c:	f7ff bf58 	b.w	b4a40 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b4b90:	f003 f9a8 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4b94:	4904      	ldr	r1, [pc, #16]	; (b4ba8 <_Z10activarLEDii+0xac>)
}
   b4b96:	b003      	add	sp, #12
   b4b98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b4b9c:	f002 beef 	b.w	b797e <_ZN5Print7printlnEPKc>
   b4ba0:	2003df57 	.word	0x2003df57
   b4ba4:	2003e698 	.word	0x2003e698
   b4ba8:	000b8c93 	.word	0x000b8c93

000b4bac <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b4bac:	b538      	push	{r3, r4, r5, lr}
   b4bae:	460c      	mov	r4, r1
   b4bb0:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4bb2:	2101      	movs	r1, #1
   b4bb4:	b2a0      	uxth	r0, r4
   b4bb6:	f003 fb1f 	bl	b81f8 <pinMode>

    switch (opcion)
   b4bba:	b145      	cbz	r5, b4bce <_Z15activarZumbadorii+0x22>
   b4bbc:	2d01      	cmp	r5, #1
   b4bbe:	d00b      	beq.n	b4bd8 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4bc0:	f003 f990 	bl	b7ee4 <_Z16_fetch_usbserialv>
        break;
    }
}
   b4bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4bc8:	4906      	ldr	r1, [pc, #24]	; (b4be4 <_Z15activarZumbadorii+0x38>)
   b4bca:	f002 bed8 	b.w	b797e <_ZN5Print7printlnEPKc>
        pitidoON(puerto);
   b4bce:	4620      	mov	r0, r4
}
   b4bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON(puerto);
   b4bd4:	f7ff bf55 	b.w	b4a82 <_Z8pitidoONi>
        pitidoBlink(puerto);
   b4bd8:	4620      	mov	r0, r4
}
   b4bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink(puerto);
   b4bde:	f7ff bf7e 	b.w	b4ade <_Z11pitidoBlinki>
   b4be2:	bf00      	nop
   b4be4:	000b8ca2 	.word	0x000b8ca2

000b4be8 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4be8:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4bea:	b908      	cbnz	r0, b4bf0 <_Z14apagarActuadorii+0x8>
   b4bec:	f7ff beaa 	b.w	b4944 <_Z9ledApagarv>
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	b298      	uxth	r0, r3
   b4bf4:	f003 bb11 	b.w	b821a <digitalWrite>

000b4bf8 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4bf8:	4603      	mov	r3, r0
    if (id < 2)
   b4bfa:	2b01      	cmp	r3, #1
{
   b4bfc:	4608      	mov	r0, r1
   b4bfe:	4611      	mov	r1, r2
    if (id < 2)
   b4c00:	dc04      	bgt.n	b4c0c <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b4c02:	b90b      	cbnz	r3, b4c08 <_Z15actuadorHandleriii+0x10>
   b4c04:	f7ff bf7a 	b.w	b4afc <_Z10activarLEDii>
   b4c08:	f7ff bfd0 	b.w	b4bac <_Z15activarZumbadorii>
   b4c0c:	4770      	bx	lr
	...

000b4c10 <setup>:

// Informacion de la tarjeta leida.
int tagInfo[6] = {-1, -1, -1, -1, -1, -1};

void setup()
{
   b4c10:	b510      	push	{r4, lr}
   b4c12:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4c14:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4c16:	a805      	add	r0, sp, #20
   b4c18:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4c1c:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4c20:	f002 fc8e 	bl	b7540 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4c24:	481b      	ldr	r0, [pc, #108]	; (b4c94 <setup+0x84>)
   b4c26:	4623      	mov	r3, r4
   b4c28:	4622      	mov	r2, r4
   b4c2a:	4621      	mov	r1, r4
   b4c2c:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4c2e:	4c1a      	ldr	r4, [pc, #104]	; (b4c98 <setup+0x88>)
   b4c30:	f002 fc02 	bl	b7438 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4c34:	f003 f956 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4c38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c3c:	f003 f946 	bl	b7ecc <_ZN9USBSerial5beginEl>
   b4c40:	7821      	ldrb	r1, [r4, #0]
   b4c42:	f3bf 8f5b 	dmb	ish
   b4c46:	f011 0101 	ands.w	r1, r1, #1
   b4c4a:	d10b      	bne.n	b4c64 <setup+0x54>
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	9103      	str	r1, [sp, #12]
   b4c50:	f7ff fa30 	bl	b40b4 <__cxa_guard_acquire>
   b4c54:	9903      	ldr	r1, [sp, #12]
   b4c56:	b128      	cbz	r0, b4c64 <setup+0x54>
   b4c58:	4810      	ldr	r0, [pc, #64]	; (b4c9c <setup+0x8c>)
   b4c5a:	f002 fef5 	bl	b7a48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4c5e:	4620      	mov	r0, r4
   b4c60:	f7ff fa2d 	bl	b40be <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4c64:	480d      	ldr	r0, [pc, #52]	; (b4c9c <setup+0x8c>)
   b4c66:	f002 fef9 	bl	b7a5c <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4c6a:	2301      	movs	r3, #1
   b4c6c:	9300      	str	r3, [sp, #0]
   b4c6e:	223c      	movs	r2, #60	; 0x3c
   b4c70:	2102      	movs	r1, #2
   b4c72:	480b      	ldr	r0, [pc, #44]	; (b4ca0 <setup+0x90>)
   b4c74:	f001 f99e 	bl	b5fb4 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4c78:	480a      	ldr	r0, [pc, #40]	; (b4ca4 <setup+0x94>)
   b4c7a:	f001 fee4 	bl	b6a46 <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b4c7e:	4b0a      	ldr	r3, [pc, #40]	; (b4ca8 <setup+0x98>)
   b4c80:	22ff      	movs	r2, #255	; 0xff
   b4c82:	701a      	strb	r2, [r3, #0]
   b4c84:	705a      	strb	r2, [r3, #1]
   b4c86:	709a      	strb	r2, [r3, #2]
   b4c88:	70da      	strb	r2, [r3, #3]
   b4c8a:	711a      	strb	r2, [r3, #4]
   b4c8c:	715a      	strb	r2, [r3, #5]
  }

  // initializeBLocks(bloques);
}
   b4c8e:	b008      	add	sp, #32
   b4c90:	bd10      	pop	{r4, pc}
   b4c92:	bf00      	nop
   b4c94:	2003e718 	.word	0x2003e718
   b4c98:	2003dfe8 	.word	0x2003dfe8
   b4c9c:	2003dfec 	.word	0x2003dfec
   b4ca0:	2003e620 	.word	0x2003e620
   b4ca4:	2003e6a0 	.word	0x2003e6a0
   b4ca8:	2003e691 	.word	0x2003e691

000b4cac <_Z13isValidSensori>:

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4cac:	b510      	push	{r4, lr}
  // Serial.printlnf("deviceID:%d", deviceID);

  BLOQUE bloque = bloques[numBloque];
   b4cae:	4b12      	ldr	r3, [pc, #72]	; (b4cf8 <_Z13isValidSensori+0x4c>)
   b4cb0:	6819      	ldr	r1, [r3, #0]
   b4cb2:	4b12      	ldr	r3, [pc, #72]	; (b4cfc <_Z13isValidSensori+0x50>)
{
   b4cb4:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
  BLOQUE bloque = bloques[numBloque];
   b4cb8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4cbc:	fb02 3101 	mla	r1, r2, r1, r3
{
   b4cc0:	4604      	mov	r4, r0
  BLOQUE bloque = bloques[numBloque];
   b4cc2:	a801      	add	r0, sp, #4
   b4cc4:	f003 fd36 	bl	b8734 <memcpy>
  for (int i = 0; i < numSensoresBloque; i++)
   b4cc8:	4b0d      	ldr	r3, [pc, #52]	; (b4d00 <_Z13isValidSensori+0x54>)
   b4cca:	2200      	movs	r2, #0
   b4ccc:	6819      	ldr	r1, [r3, #0]
   b4cce:	ab01      	add	r3, sp, #4
   b4cd0:	4291      	cmp	r1, r2
   b4cd2:	dd0f      	ble.n	b4cf4 <_Z13isValidSensori+0x48>
  {
    // Serial.printlnf("SensorBloqueID:%d", bloque.sensores[i].id);
    if (bloque.sensores[i].id == deviceID)
   b4cd4:	6858      	ldr	r0, [r3, #4]
   b4cd6:	42a0      	cmp	r0, r4
   b4cd8:	f103 0310 	add.w	r3, r3, #16
   b4cdc:	d108      	bne.n	b4cf0 <_Z13isValidSensori+0x44>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4cde:	f003 f901 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4ce2:	4908      	ldr	r1, [pc, #32]	; (b4d04 <_Z13isValidSensori+0x58>)
   b4ce4:	f002 fe4b 	bl	b797e <_ZN5Print7printlnEPKc>
   b4ce8:	2000      	movs	r0, #0
    }
  };

  // Serial.println("Valid sensor!");
  return true;
}
   b4cea:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   b4cee:	bd10      	pop	{r4, pc}
  for (int i = 0; i < numSensoresBloque; i++)
   b4cf0:	3201      	adds	r2, #1
   b4cf2:	e7ed      	b.n	b4cd0 <_Z13isValidSensori+0x24>
  return true;
   b4cf4:	2001      	movs	r0, #1
   b4cf6:	e7f8      	b.n	b4cea <_Z13isValidSensori+0x3e>
   b4cf8:	2003df58 	.word	0x2003df58
   b4cfc:	2003e008 	.word	0x2003e008
   b4d00:	2003e6b8 	.word	0x2003e6b8
   b4d04:	000b8cb2 	.word	0x000b8cb2

000b4d08 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4d08:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i <= numBloque; i++)
   b4d0a:	4b0c      	ldr	r3, [pc, #48]	; (b4d3c <_Z11isNewSensori+0x34>)
  {
    BLOQUE bloque = bloques[i];
   b4d0c:	4c0c      	ldr	r4, [pc, #48]	; (b4d40 <_Z11isNewSensori+0x38>)
  for (int i = 0; i <= numBloque; i++)
   b4d0e:	6819      	ldr	r1, [r3, #0]
    BLOQUE bloque = bloques[i];
   b4d10:	f44f 753b 	mov.w	r5, #748	; 0x2ec
  for (int i = 0; i <= numBloque; i++)
   b4d14:	2300      	movs	r3, #0
   b4d16:	4299      	cmp	r1, r3
   b4d18:	db0c      	blt.n	b4d34 <_Z11isNewSensori+0x2c>
    BLOQUE bloque = bloques[i];
   b4d1a:	fb05 4203 	mla	r2, r5, r3, r4
   b4d1e:	6856      	ldr	r6, [r2, #4]
   b4d20:	6912      	ldr	r2, [r2, #16]
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d22:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4d26:	d203      	bcs.n	b4d30 <_Z11isNewSensori+0x28>
    {
      if (bloque.sensores[j].id == deviceID)
   b4d28:	4286      	cmp	r6, r0
   b4d2a:	d005      	beq.n	b4d38 <_Z11isNewSensori+0x30>
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d2c:	3301      	adds	r3, #1
   b4d2e:	e7f8      	b.n	b4d22 <_Z11isNewSensori+0x1a>
  for (int i = 0; i <= numBloque; i++)
   b4d30:	3301      	adds	r3, #1
   b4d32:	e7f0      	b.n	b4d16 <_Z11isNewSensori+0xe>
        return bloque.sensores[j].puerto;
    }
  }
  return -1;
   b4d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
   b4d38:	4610      	mov	r0, r2
   b4d3a:	bd70      	pop	{r4, r5, r6, pc}
   b4d3c:	2003df58 	.word	0x2003df58
   b4d40:	2003e008 	.word	0x2003e008

000b4d44 <_Z15isValidActuadorbi>:
// True cuando el actuador no se ha usado en ningun Then (evalState=T) ni Else (evalState=F) de NINGUN bloque;
// Actuador valido tanto en el then como en el else, cuando no ha sido usado en ningun bloque para ese state.
// No puedo poner el led verde ON en then de bloque 1 a la vez que led rojo OFF en then de bloque 2.
// Si es posible poner led verde ON en then de bloque 1 y led rojo ON en else de bloque 2.
bool isValidActuador(bool evalState, int actuadorID)
{
   b4d44:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4d46:	4b0f      	ldr	r3, [pc, #60]	; (b4d84 <_Z15isValidActuadorbi+0x40>)
   b4d48:	681e      	ldr	r6, [r3, #0]
   b4d4a:	4b0f      	ldr	r3, [pc, #60]	; (b4d88 <_Z15isValidActuadorbi+0x44>)
   b4d4c:	2400      	movs	r4, #0
   b4d4e:	42a6      	cmp	r6, r4
   b4d50:	db14      	blt.n	b4d7c <_Z15isValidActuadorbi+0x38>
  {
    BLOQUE bloque = bloques[i];
    for (int j = 0; j < bloques[i].numActuadores; j++)
   b4d52:	f853 7c04 	ldr.w	r7, [r3, #-4]
   b4d56:	461a      	mov	r2, r3
   b4d58:	2500      	movs	r5, #0
   b4d5a:	42af      	cmp	r7, r5
   b4d5c:	dd0a      	ble.n	b4d74 <_Z15isValidActuadorbi+0x30>
    {
      ACTUADOR actuador = bloques[i].actuadores[j];
      if (actuador.evaluate == evalState && actuador.id == actuadorID)
   b4d5e:	f892 e010 	ldrb.w	lr, [r2, #16]
      ACTUADOR actuador = bloques[i].actuadores[j];
   b4d62:	f8d2 c000 	ldr.w	ip, [r2]
      if (actuador.evaluate == evalState && actuador.id == actuadorID)
   b4d66:	4586      	cmp	lr, r0
   b4d68:	d101      	bne.n	b4d6e <_Z15isValidActuadorbi+0x2a>
   b4d6a:	458c      	cmp	ip, r1
   b4d6c:	d008      	beq.n	b4d80 <_Z15isValidActuadorbi+0x3c>
    for (int j = 0; j < bloques[i].numActuadores; j++)
   b4d6e:	3501      	adds	r5, #1
   b4d70:	3214      	adds	r2, #20
   b4d72:	e7f2      	b.n	b4d5a <_Z15isValidActuadorbi+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4d74:	3401      	adds	r4, #1
   b4d76:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4d7a:	e7e8      	b.n	b4d4e <_Z15isValidActuadorbi+0xa>
        return false;
    }
  }
  return true;
   b4d7c:	2001      	movs	r0, #1
}
   b4d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
   b4d80:	2000      	movs	r0, #0
   b4d82:	e7fc      	b.n	b4d7e <_Z15isValidActuadorbi+0x3a>
   b4d84:	2003df58 	.word	0x2003df58
   b4d88:	2003e150 	.word	0x2003e150

000b4d8c <_Z13isNewActuadori>:

// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d90:	4c18      	ldr	r4, [pc, #96]	; (b4df4 <_Z13isNewActuadori+0x68>)
  for (int j = 0; j <= numBloque; j++)
   b4d92:	f8df 9064 	ldr.w	r9, [pc, #100]	; b4df8 <_Z13isNewActuadori+0x6c>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
    {
      ACTUADOR actuador = bloques[numBloque].actuadores[i];
      Serial.printlnf("isNewActuador comparing  %d - %d", deviceID, actuador.id);
   b4d96:	f8df b064 	ldr.w	fp, [pc, #100]	; b4dfc <_Z13isNewActuadori+0x70>
{
   b4d9a:	4605      	mov	r5, r0
  for (int j = 0; j <= numBloque; j++)
   b4d9c:	2700      	movs	r7, #0
   b4d9e:	f8d9 3000 	ldr.w	r3, [r9]
   b4da2:	42bb      	cmp	r3, r7
   b4da4:	db21      	blt.n	b4dea <_Z13isNewActuadori+0x5e>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4da6:	2600      	movs	r6, #0
   b4da8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
      ACTUADOR actuador = bloques[numBloque].actuadores[i];
   b4dac:	f8d9 3000 	ldr.w	r3, [r9]
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4db0:	42b2      	cmp	r2, r6
   b4db2:	dd16      	ble.n	b4de2 <_Z13isNewActuadori+0x56>
      ACTUADOR actuador = bloques[numBloque].actuadores[i];
   b4db4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4db8:	4353      	muls	r3, r2
   b4dba:	2214      	movs	r2, #20
   b4dbc:	fb02 3306 	mla	r3, r2, r6, r3
   b4dc0:	4a0c      	ldr	r2, [pc, #48]	; (b4df4 <_Z13isNewActuadori+0x68>)
   b4dc2:	4413      	add	r3, r2
   b4dc4:	f8d3 a148 	ldr.w	sl, [r3, #328]	; 0x148
   b4dc8:	f8d3 8154 	ldr.w	r8, [r3, #340]	; 0x154
      Serial.printlnf("isNewActuador comparing  %d - %d", deviceID, actuador.id);
   b4dcc:	f003 f88a 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4dd0:	4653      	mov	r3, sl
   b4dd2:	462a      	mov	r2, r5
   b4dd4:	4659      	mov	r1, fp
   b4dd6:	f7ff f983 	bl	b40e0 <_ZN5Print8printlnfEPKcz>

      if (actuador.id == deviceID)
   b4dda:	45aa      	cmp	sl, r5
   b4ddc:	d007      	beq.n	b4dee <_Z13isNewActuadori+0x62>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4dde:	3601      	adds	r6, #1
   b4de0:	e7e2      	b.n	b4da8 <_Z13isNewActuadori+0x1c>
  for (int j = 0; j <= numBloque; j++)
   b4de2:	3701      	adds	r7, #1
   b4de4:	f504 743b 	add.w	r4, r4, #748	; 0x2ec
   b4de8:	e7d9      	b.n	b4d9e <_Z13isNewActuadori+0x12>
        return actuador.puerto;
      }
    }
  }

  return -1;
   b4dea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
}
   b4dee:	4640      	mov	r0, r8
   b4df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4df4:	2003e008 	.word	0x2003e008
   b4df8:	2003df58 	.word	0x2003df58
   b4dfc:	000b8ce2 	.word	0x000b8ce2

000b4e00 <_Z14isActuadorDuali>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID)
{
   b4e00:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < numActuadoresBloque; i++)
   b4e02:	4b0d      	ldr	r3, [pc, #52]	; (b4e38 <_Z14isActuadorDuali+0x38>)
   b4e04:	4a0d      	ldr	r2, [pc, #52]	; (b4e3c <_Z14isActuadorDuali+0x3c>)
   b4e06:	681c      	ldr	r4, [r3, #0]
  {
    if (bloques[numBloque].actuadores[i].id == deviceID)
   b4e08:	4b0d      	ldr	r3, [pc, #52]	; (b4e40 <_Z14isActuadorDuali+0x40>)
   b4e0a:	681b      	ldr	r3, [r3, #0]
   b4e0c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4e10:	fb01 2203 	mla	r2, r1, r3, r2
  for (int i = 0; i < numActuadoresBloque; i++)
   b4e14:	2100      	movs	r1, #0
  int contador = 0;
   b4e16:	460b      	mov	r3, r1
  for (int i = 0; i < numActuadoresBloque; i++)
   b4e18:	428c      	cmp	r4, r1
   b4e1a:	dd08      	ble.n	b4e2e <_Z14isActuadorDuali+0x2e>
    if (bloques[numBloque].actuadores[i].id == deviceID)
   b4e1c:	f8d2 5148 	ldr.w	r5, [r2, #328]	; 0x148
   b4e20:	4285      	cmp	r5, r0
   b4e22:	d101      	bne.n	b4e28 <_Z14isActuadorDuali+0x28>
      contador++;

    if (contador > 1)
   b4e24:	b92b      	cbnz	r3, b4e32 <_Z14isActuadorDuali+0x32>
   b4e26:	2301      	movs	r3, #1
  for (int i = 0; i < numActuadoresBloque; i++)
   b4e28:	3101      	adds	r1, #1
   b4e2a:	3214      	adds	r2, #20
   b4e2c:	e7f4      	b.n	b4e18 <_Z14isActuadorDuali+0x18>
      return true;
  }

  return false;
   b4e2e:	2000      	movs	r0, #0
}
   b4e30:	bd30      	pop	{r4, r5, pc}
      return true;
   b4e32:	4618      	mov	r0, r3
   b4e34:	e7fc      	b.n	b4e30 <_Z14isActuadorDuali+0x30>
   b4e36:	bf00      	nop
   b4e38:	2003e6b0 	.word	0x2003e6b0
   b4e3c:	2003e008 	.word	0x2003e008
   b4e40:	2003df58 	.word	0x2003df58

000b4e44 <loop>:

void loop()
{
   b4e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b4e48:	48b2      	ldr	r0, [pc, #712]	; (b5114 <loop+0x2d0>)
{
   b4e4a:	b087      	sub	sp, #28
  if (mfrc522.PICC_IsNewCardPresent())
   b4e4c:	f001 ff26 	bl	b6c9c <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4e50:	b1b8      	cbz	r0, b4e82 <loop+0x3e>
  {
    Serial.print("Tag Detectada --> ");
   b4e52:	f003 f847 	bl	b7ee4 <_Z16_fetch_usbserialv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }

    display.clearDisplay();
   b4e56:	4cb0      	ldr	r4, [pc, #704]	; (b5118 <loop+0x2d4>)
    Serial.print("Tag Detectada --> ");
   b4e58:	49b0      	ldr	r1, [pc, #704]	; (b511c <loop+0x2d8>)
   b4e5a:	f002 fd7d 	bl	b7958 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b4e5e:	48ad      	ldr	r0, [pc, #692]	; (b5114 <loop+0x2d0>)
   b4e60:	f002 f8ed 	bl	b703e <_ZN7MFRC52219PICC_ReadCardSerialEv>
    display.clearDisplay();
   b4e64:	4620      	mov	r0, r4
   b4e66:	f001 f897 	bl	b5f98 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4e6a:	2101      	movs	r1, #1
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	f000 feee 	bl	b5c4e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4e72:	2100      	movs	r1, #0
   b4e74:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4e78:	e9c4 1304 	strd	r1, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b4e7c:	48a8      	ldr	r0, [pc, #672]	; (b5120 <loop+0x2dc>)
   b4e7e:	f7ff fca9 	bl	b47d4 <_Z8getTagIDPi>
  }

  // Si se ha pasado nueva tag; se limpia al finalizar su lectura.
  if (tagInfo[0] != -1)
   b4e82:	4da7      	ldr	r5, [pc, #668]	; (b5120 <loop+0x2dc>)
   b4e84:	4ca7      	ldr	r4, [pc, #668]	; (b5124 <loop+0x2e0>)
   b4e86:	682b      	ldr	r3, [r5, #0]
   b4e88:	4fa7      	ldr	r7, [pc, #668]	; (b5128 <loop+0x2e4>)
   b4e8a:	3301      	adds	r3, #1
   b4e8c:	d07c      	beq.n	b4f88 <loop+0x144>
  {
    int deviceID = tagInfo[2];
   b4e8e:	68ae      	ldr	r6, [r5, #8]
    Serial.print("Ejecutando tag --> ");
   b4e90:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b5168 <loop+0x324>
   b4e94:	f8df a2a8 	ldr.w	sl, [pc, #680]	; b5140 <loop+0x2fc>
   b4e98:	f8df 92a0 	ldr.w	r9, [pc, #672]	; b513c <loop+0x2f8>
   b4e9c:	f003 f822 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4ea0:	49a2      	ldr	r1, [pc, #648]	; (b512c <loop+0x2e8>)
   b4ea2:	f002 fd59 	bl	b7958 <_ZN5Print5printEPKc>

    switch (tagInfo[0])
   b4ea6:	682b      	ldr	r3, [r5, #0]
   b4ea8:	2b05      	cmp	r3, #5
   b4eaa:	f200 81c6 	bhi.w	b523a <loop+0x3f6>
   b4eae:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4eb2:	0006      	.short	0x0006
   b4eb4:	015d00c0 	.word	0x015d00c0
   b4eb8:	01a30181 	.word	0x01a30181
   b4ebc:	01b8      	.short	0x01b8
    {
    // Sensor
    case 0:
      if (IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID))
   b4ebe:	f8df 92a0 	ldr.w	r9, [pc, #672]	; b5160 <loop+0x31c>
   b4ec2:	f899 3000 	ldrb.w	r3, [r9]
   b4ec6:	2b00      	cmp	r3, #0
   b4ec8:	f000 809f 	beq.w	b500a <loop+0x1c6>
   b4ecc:	f8d8 2000 	ldr.w	r2, [r8]
   b4ed0:	f8da 3000 	ldr.w	r3, [sl]
   b4ed4:	429a      	cmp	r2, r3
   b4ed6:	f040 80a8 	bne.w	b502a <loop+0x1e6>
   b4eda:	4630      	mov	r0, r6
   b4edc:	f7ff fee6 	bl	b4cac <_Z13isValidSensori>
   b4ee0:	2800      	cmp	r0, #0
   b4ee2:	f000 808f 	beq.w	b5004 <loop+0x1c0>
      {

        int puerto = isNewSensor(deviceID);
   b4ee6:	4630      	mov	r0, r6
   b4ee8:	f7ff ff0e 	bl	b4d08 <_Z11isNewSensori>
        // Si el puerto es distinto de -1 el sensor ha sido usado previamente. Si es nuevo, obtenemos un puerto disponible.
        if (puerto == -1)
   b4eec:	1c42      	adds	r2, r0, #1
   b4eee:	d106      	bne.n	b4efe <loop+0xba>
          puerto = asignarPuerto(deviceID, tagInfo[1]);
   b4ef0:	6869      	ldr	r1, [r5, #4]
   b4ef2:	4630      	mov	r0, r6
   b4ef4:	f7ff fcbe 	bl	b4874 <_Z13asignarPuertoii>

        if (puerto != -1)
   b4ef8:	1c43      	adds	r3, r0, #1
   b4efa:	f000 808a 	beq.w	b5012 <loop+0x1ce>
        {

          SENSOR newSensor;
          newSensor.id = deviceID;
          newSensor.condicion = tagInfo[3];
          newSensor.bloque = numBloque;
   b4efe:	f8d4 c000 	ldr.w	ip, [r4]
          newSensor.puerto = puerto;

          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4f02:	f8d8 1000 	ldr.w	r1, [r8]
          newSensor.condicion = tagInfo[3];
   b4f06:	68eb      	ldr	r3, [r5, #12]
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4f08:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f0c:	fb02 f20c 	mul.w	r2, r2, ip
   b4f10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   b4f14:	443a      	add	r2, r7
          numSensoresBloque++;
   b4f16:	3101      	adds	r1, #1
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4f18:	e9c2 c003 	strd	ip, r0, [r2, #12]
   b4f1c:	e9c2 6301 	strd	r6, r3, [r2, #4]
          numSensoresBloque++;
   b4f20:	f8c8 1000 	str.w	r1, [r8]
   return type == 0;
   b4f24:	6869      	ldr	r1, [r5, #4]

          displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newSensor.id, newSensor.condicion, newSensor.puerto);
   b4f26:	9000      	str	r0, [sp, #0]
   b4f28:	6828      	ldr	r0, [r5, #0]
   b4f2a:	fab1 f181 	clz	r1, r1
   b4f2e:	fab0 f080 	clz	r0, r0
   b4f32:	4632      	mov	r2, r6
   b4f34:	0949      	lsrs	r1, r1, #5
   b4f36:	0940      	lsrs	r0, r0, #5
   b4f38:	f7ff fb0c 	bl	b4554 <_Z12displayPrintbbiii>
    default:
      Serial.println("ID Tag incorrecta");
      break;
    }

    Serial.println("Fin Tag");
   b4f3c:	f002 ffd2 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4f40:	497b      	ldr	r1, [pc, #492]	; (b5130 <loop+0x2ec>)
   b4f42:	f002 fd1c 	bl	b797e <_ZN5Print7printlnEPKc>
    Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b4f46:	f002 ffcd 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4f4a:	497a      	ldr	r1, [pc, #488]	; (b5134 <loop+0x2f0>)
   b4f4c:	f002 fd17 	bl	b797e <_ZN5Print7printlnEPKc>
    Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b4f50:	f002 ffc8 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4f54:	6822      	ldr	r2, [r4, #0]
   b4f56:	4978      	ldr	r1, [pc, #480]	; (b5138 <loop+0x2f4>)
   b4f58:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b4f5c:	fb03 7702 	mla	r7, r3, r2, r7
   b4f60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   b4f64:	9302      	str	r3, [sp, #8]
   b4f66:	4b75      	ldr	r3, [pc, #468]	; (b513c <loop+0x2f8>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	9301      	str	r3, [sp, #4]
   b4f6c:	4b74      	ldr	r3, [pc, #464]	; (b5140 <loop+0x2fc>)
   b4f6e:	681b      	ldr	r3, [r3, #0]
   b4f70:	9300      	str	r3, [sp, #0]
   b4f72:	f8d8 3000 	ldr.w	r3, [r8]
   b4f76:	f7ff f8b3 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    // Serial.printlnf("Num bloques: %d", numBloque);
    // Serial.printlnf("Num sensoresBLoque: %d", numSensoresBloque);
    // Serial.printlnf("Num condicionesBLoque: %d", numCondicionalesBloque);
    // Serial.printlnf("Num ActuadoresBloque: %d", numActuadoresBloque);

    tagInfo[0] = -1;
   b4f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f7e:	602b      	str	r3, [r5, #0]
    Serial.println();
   b4f80:	f002 ffb0 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b4f84:	f002 fcef 	bl	b7966 <_ZN5Print7printlnEv>
  }

  display.display();
   b4f88:	4863      	ldr	r0, [pc, #396]	; (b5118 <loop+0x2d4>)
   b4f8a:	4f67      	ldr	r7, [pc, #412]	; (b5128 <loop+0x2e4>)
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4f8c:	f8df a188 	ldr.w	sl, [pc, #392]	; b5118 <loop+0x2d4>
   b4f90:	f001 fa6a 	bl	b6468 <_ZN16Adafruit_SSD13067displayEv>

  for (int i = 0; i <= numBloque; i++)
   b4f94:	f04f 0900 	mov.w	r9, #0
   b4f98:	6823      	ldr	r3, [r4, #0]
   b4f9a:	454b      	cmp	r3, r9
   b4f9c:	f2c0 8165 	blt.w	b526a <loop+0x426>
  {
    // Para cada iterazion del loop debemos evaluar los sensores de cada bloque y actuar en consecuencia.
    if (THEN_pasado)
   b4fa0:	4b68      	ldr	r3, [pc, #416]	; (b5144 <loop+0x300>)
   b4fa2:	781b      	ldrb	r3, [r3, #0]
   b4fa4:	2b00      	cmp	r3, #0
   b4fa6:	f000 815b 	beq.w	b5260 <loop+0x41c>
    {
      bool evaluacion = makeEvaluate(bloques[i].sensores, bloques[i].condiciones.condicionesBloque);
   b4faa:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
   b4fae:	1d38      	adds	r0, r7, #4
   b4fb0:	f7ff faa4 	bl	b44fc <_Z12makeEvaluateP6SENSORPb>
   b4fb4:	2600      	movs	r6, #0
   b4fb6:	4680      	mov	r8, r0
   b4fb8:	f8ca 6010 	str.w	r6, [sl, #16]
      display.setCursor(0, 0);
      display.clearDisplay();
   b4fbc:	4856      	ldr	r0, [pc, #344]	; (b5118 <loop+0x2d4>)
      display.print(evaluacion ? "True" : "False");
      for (int j = 0; j < numActuadoresBloque; j++)
   b4fbe:	f8df b17c 	ldr.w	fp, [pc, #380]	; b513c <loop+0x2f8>
      display.clearDisplay();
   b4fc2:	f000 ffe9 	bl	b5f98 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.print(evaluacion ? "True" : "False");
   b4fc6:	4b60      	ldr	r3, [pc, #384]	; (b5148 <loop+0x304>)
   b4fc8:	4960      	ldr	r1, [pc, #384]	; (b514c <loop+0x308>)
   b4fca:	4650      	mov	r0, sl
   b4fcc:	45b0      	cmp	r8, r6
   b4fce:	bf18      	it	ne
   b4fd0:	4619      	movne	r1, r3
   b4fd2:	f002 fcc1 	bl	b7958 <_ZN5Print5printEPKc>
   b4fd6:	463d      	mov	r5, r7
      for (int j = 0; j < numActuadoresBloque; j++)
   b4fd8:	f8db 3000 	ldr.w	r3, [fp]
   b4fdc:	42b3      	cmp	r3, r6
   b4fde:	f340 813f 	ble.w	b5260 <loop+0x41c>
      {
        ACTUADOR actuador = bloques[i].actuadores[j];
        // Serial.printlnf("Actuandor: %d , %s", actuador.id, actuador.evaluate ? "True" : "False");
        if (evaluacion == actuador.evaluate)
   b4fe2:	f895 1158 	ldrb.w	r1, [r5, #344]	; 0x158
        ACTUADOR actuador = bloques[i].actuadores[j];
   b4fe6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   b4fea:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
        if (evaluacion == actuador.evaluate)
   b4fee:	4541      	cmp	r1, r8
   b4ff0:	f040 8127 	bne.w	b5242 <loop+0x3fe>
        {
          // Serial.println("ActivarActuador");
          actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b4ff4:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
   b4ff8:	4618      	mov	r0, r3
   b4ffa:	f7ff fdfd 	bl	b4bf8 <_Z15actuadorHandleriii>
      for (int j = 0; j < numActuadoresBloque; j++)
   b4ffe:	3601      	adds	r6, #1
   b5000:	3514      	adds	r5, #20
   b5002:	e7e9      	b.n	b4fd8 <loop+0x194>
        if (!IF_pasado)
   b5004:	f899 3000 	ldrb.w	r3, [r9]
   b5008:	b94b      	cbnz	r3, b501e <loop+0x1da>
            Serial.println("Se esperaba IF tag");
   b500a:	f002 ff6b 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b500e:	4950      	ldr	r1, [pc, #320]	; (b5150 <loop+0x30c>)
   b5010:	e002      	b.n	b5018 <loop+0x1d4>
          Serial.println("Error Puerto");
   b5012:	f002 ff67 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b5016:	494f      	ldr	r1, [pc, #316]	; (b5154 <loop+0x310>)
      Serial.println("ID Tag incorrecta");
   b5018:	f002 fcb1 	bl	b797e <_ZN5Print7printlnEPKc>
      break;
   b501c:	e78e      	b.n	b4f3c <loop+0xf8>
        if (numSensoresBloque != numCondicionalesBloque)
   b501e:	f8d8 2000 	ldr.w	r2, [r8]
   b5022:	f8da 3000 	ldr.w	r3, [sl]
   b5026:	429a      	cmp	r2, r3
   b5028:	d088      	beq.n	b4f3c <loop+0xf8>
          Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b502a:	f002 ff5b 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b502e:	494a      	ldr	r1, [pc, #296]	; (b5158 <loop+0x314>)
   b5030:	e7f2      	b.n	b5018 <loop+0x1d4>
      if (THEN_pasado && !ELSE_pasado && isValidActuador(true, deviceID))
   b5032:	4b44      	ldr	r3, [pc, #272]	; (b5144 <loop+0x300>)
   b5034:	781b      	ldrb	r3, [r3, #0]
   b5036:	b3b3      	cbz	r3, b50a6 <loop+0x262>
   b5038:	4b48      	ldr	r3, [pc, #288]	; (b515c <loop+0x318>)
   b503a:	781b      	ldrb	r3, [r3, #0]
   b503c:	4631      	mov	r1, r6
   b503e:	bb73      	cbnz	r3, b509e <loop+0x25a>
   b5040:	2001      	movs	r0, #1
   b5042:	f7ff fe7f 	bl	b4d44 <_Z15isValidActuadorbi>
   b5046:	b370      	cbz	r0, b50a6 <loop+0x262>
        int puerto = isNewActuador(deviceID);
   b5048:	4630      	mov	r0, r6
   b504a:	f7ff fe9f 	bl	b4d8c <_Z13isNewActuadori>
        if (puerto == -1)
   b504e:	1c41      	adds	r1, r0, #1
   b5050:	d106      	bne.n	b5060 <loop+0x21c>
          puerto = asignarPuerto(deviceID, tagInfo[1]);
   b5052:	6869      	ldr	r1, [r5, #4]
   b5054:	4630      	mov	r0, r6
   b5056:	f7ff fc0d 	bl	b4874 <_Z13asignarPuertoii>
        if (puerto != -1)
   b505a:	1c42      	adds	r2, r0, #1
   b505c:	f43f af6e 	beq.w	b4f3c <loop+0xf8>
          newActuador.bloque = numBloque;
   b5060:	6822      	ldr	r2, [r4, #0]
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5062:	f8d9 c000 	ldr.w	ip, [r9]
   b5066:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b506a:	4351      	muls	r1, r2
   b506c:	2314      	movs	r3, #20
   b506e:	fb03 130c 	mla	r3, r3, ip, r1
   b5072:	443b      	add	r3, r7
          bloques[numBloque].numActuadores++;
   b5074:	4439      	add	r1, r7
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5076:	f8c3 6148 	str.w	r6, [r3, #328]	; 0x148
   b507a:	68ee      	ldr	r6, [r5, #12]
   b507c:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
   b5080:	e9c3 6253 	strd	r6, r2, [r3, #332]	; 0x14c
   b5084:	2201      	movs	r2, #1
   b5086:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
          numActuadoresBloque++;
   b508a:	eb0c 0302 	add.w	r3, ip, r2
   b508e:	f8c9 3000 	str.w	r3, [r9]
          bloques[numBloque].numActuadores++;
   b5092:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   b5096:	4413      	add	r3, r2
   b5098:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
   b509c:	e74e      	b.n	b4f3c <loop+0xf8>
        if (THEN_pasado && ELSE_pasado && isValidActuador(false, deviceID))
   b509e:	2000      	movs	r0, #0
   b50a0:	f7ff fe50 	bl	b4d44 <_Z15isValidActuadorbi>
   b50a4:	b938      	cbnz	r0, b50b6 <loop+0x272>
          if (!IF_pasado)
   b50a6:	4b2e      	ldr	r3, [pc, #184]	; (b5160 <loop+0x31c>)
   b50a8:	781b      	ldrb	r3, [r3, #0]
   b50aa:	2b00      	cmp	r3, #0
   b50ac:	d0ad      	beq.n	b500a <loop+0x1c6>
          Serial.println("Invalid Actuador");
   b50ae:	f002 ff19 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b50b2:	492c      	ldr	r1, [pc, #176]	; (b5164 <loop+0x320>)
   b50b4:	e7b0      	b.n	b5018 <loop+0x1d4>
          int puerto = isNewActuador(deviceID);
   b50b6:	4630      	mov	r0, r6
   b50b8:	f7ff fe68 	bl	b4d8c <_Z13isNewActuadori>
          if (puerto == -1)
   b50bc:	1c43      	adds	r3, r0, #1
   b50be:	d106      	bne.n	b50ce <loop+0x28a>
            puerto = asignarPuerto(deviceID, tagInfo[1]);
   b50c0:	6869      	ldr	r1, [r5, #4]
   b50c2:	4630      	mov	r0, r6
   b50c4:	f7ff fbd6 	bl	b4874 <_Z13asignarPuertoii>
          if (puerto != -1)
   b50c8:	1c41      	adds	r1, r0, #1
   b50ca:	f43f af37 	beq.w	b4f3c <loop+0xf8>
            newActuador.bloque = numBloque;
   b50ce:	f8d4 e000 	ldr.w	lr, [r4]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b50d2:	f8d9 2000 	ldr.w	r2, [r9]
   b50d6:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b50da:	fb01 f10e 	mul.w	r1, r1, lr
   b50de:	2314      	movs	r3, #20
   b50e0:	fb03 1302 	mla	r3, r3, r2, r1
   b50e4:	443b      	add	r3, r7
   b50e6:	f503 7aa4 	add.w	sl, r3, #328	; 0x148
   b50ea:	f8c3 6148 	str.w	r6, [r3, #328]	; 0x148
   b50ee:	68ee      	ldr	r6, [r5, #12]
   b50f0:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
   b50f4:	e9c3 6e53 	strd	r6, lr, [r3, #332]	; 0x14c
            bloques[numBloque].numActuadores++;
   b50f8:	4439      	add	r1, r7
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b50fa:	2300      	movs	r3, #0
   b50fc:	f88a 3010 	strb.w	r3, [sl, #16]
            bloques[numBloque].numActuadores++;
   b5100:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   b5104:	3301      	adds	r3, #1
   b5106:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
            numActuadoresBloque++;
   b510a:	1c53      	adds	r3, r2, #1
   b510c:	f8c9 3000 	str.w	r3, [r9]
   b5110:	e714      	b.n	b4f3c <loop+0xf8>
   b5112:	bf00      	nop
   b5114:	2003e6a0 	.word	0x2003e6a0
   b5118:	2003e620 	.word	0x2003e620
   b511c:	000b8d0e 	.word	0x000b8d0e
   b5120:	2003df60 	.word	0x2003df60
   b5124:	2003df58 	.word	0x2003df58
   b5128:	2003e008 	.word	0x2003e008
   b512c:	000b8d21 	.word	0x000b8d21
   b5130:	000b8e50 	.word	0x000b8e50
   b5134:	000b8e58 	.word	0x000b8e58
   b5138:	000b8e8d 	.word	0x000b8e8d
   b513c:	2003e6b0 	.word	0x2003e6b0
   b5140:	2003e6b4 	.word	0x2003e6b4
   b5144:	2003e004 	.word	0x2003e004
   b5148:	000b8d03 	.word	0x000b8d03
   b514c:	000b8d08 	.word	0x000b8d08
   b5150:	000b8d42 	.word	0x000b8d42
   b5154:	000b8d35 	.word	0x000b8d35
   b5158:	000b8d55 	.word	0x000b8d55
   b515c:	2003dff4 	.word	0x2003dff4
   b5160:	2003dff5 	.word	0x2003dff5
   b5164:	000b8d8a 	.word	0x000b8d8a
   b5168:	2003e6b8 	.word	0x2003e6b8
      if (numBloque == -1 || numBloque == 0 && numActuadoresBloque > 0)
   b516c:	6823      	ldr	r3, [r4, #0]
   b516e:	1c5a      	adds	r2, r3, #1
   b5170:	d004      	beq.n	b517c <loop+0x338>
   b5172:	b9db      	cbnz	r3, b51ac <loop+0x368>
   b5174:	f8d9 2000 	ldr.w	r2, [r9]
   b5178:	2a00      	cmp	r2, #0
   b517a:	dd17      	ble.n	b51ac <loop+0x368>
        IF_pasado = true;
   b517c:	4a3c      	ldr	r2, [pc, #240]	; (b5270 <loop+0x42c>)
   b517e:	2101      	movs	r1, #1
   b5180:	7011      	strb	r1, [r2, #0]
        THEN_pasado = false;
   b5182:	493c      	ldr	r1, [pc, #240]	; (b5274 <loop+0x430>)
   b5184:	2200      	movs	r2, #0
   b5186:	700a      	strb	r2, [r1, #0]
        ELSE_pasado = false;
   b5188:	493b      	ldr	r1, [pc, #236]	; (b5278 <loop+0x434>)
        numCondicionalesBloque = 0;
   b518a:	f8ca 2000 	str.w	r2, [sl]
        numBloque++;
   b518e:	3301      	adds	r3, #1
        ELSE_pasado = false;
   b5190:	700a      	strb	r2, [r1, #0]
        bloques[numBloque] = nuevoBloque;
   b5192:	f44f 713b 	mov.w	r1, #748	; 0x2ec
        numBloque++;
   b5196:	6023      	str	r3, [r4, #0]
        bloques[numBloque] = nuevoBloque;
   b5198:	434b      	muls	r3, r1
   b519a:	18f9      	adds	r1, r7, r3
   b519c:	50fa      	str	r2, [r7, r3]
        numSensoresBloque = 0;
   b519e:	f8c8 2000 	str.w	r2, [r8]
        numActuadoresBloque = 0;
   b51a2:	f8c9 2000 	str.w	r2, [r9]
        bloques[numBloque] = nuevoBloque;
   b51a6:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
   b51aa:	e6c7      	b.n	b4f3c <loop+0xf8>
        Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b51ac:	f002 fe9a 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b51b0:	4932      	ldr	r1, [pc, #200]	; (b527c <loop+0x438>)
   b51b2:	e731      	b.n	b5018 <loop+0x1d4>
      if (numCondicionalesBloque < numSensoresBloque && numActuadoresBloque == 0)
   b51b4:	f8da 3000 	ldr.w	r3, [sl]
   b51b8:	f8d8 2000 	ldr.w	r2, [r8]
   b51bc:	4293      	cmp	r3, r2
   b51be:	da12      	bge.n	b51e6 <loop+0x3a2>
   b51c0:	f8d9 2000 	ldr.w	r2, [r9]
   b51c4:	b97a      	cbnz	r2, b51e6 <loop+0x3a2>
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b51c6:	6822      	ldr	r2, [r4, #0]
   b51c8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b51cc:	fb01 7202 	mla	r2, r1, r2, r7
   b51d0:	6869      	ldr	r1, [r5, #4]
   b51d2:	441a      	add	r2, r3
   b51d4:	3900      	subs	r1, #0
   b51d6:	bf18      	it	ne
   b51d8:	2101      	movne	r1, #1
        numCondicionalesBloque++;
   b51da:	3301      	adds	r3, #1
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b51dc:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
        numCondicionalesBloque++;
   b51e0:	f8ca 3000 	str.w	r3, [sl]
   b51e4:	e6aa      	b.n	b4f3c <loop+0xf8>
        if (!IF_pasado)
   b51e6:	4b22      	ldr	r3, [pc, #136]	; (b5270 <loop+0x42c>)
   b51e8:	781b      	ldrb	r3, [r3, #0]
   b51ea:	2b00      	cmp	r3, #0
   b51ec:	f43f af0d 	beq.w	b500a <loop+0x1c6>
        Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b51f0:	f002 fe78 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b51f4:	4922      	ldr	r1, [pc, #136]	; (b5280 <loop+0x43c>)
   b51f6:	e70f      	b.n	b5018 <loop+0x1d4>
      if (numSensoresBloque > 0 && numSensoresBloque > numCondicionalesBloque)
   b51f8:	f8d8 3000 	ldr.w	r3, [r8]
   b51fc:	2b00      	cmp	r3, #0
   b51fe:	dd07      	ble.n	b5210 <loop+0x3cc>
   b5200:	f8da 2000 	ldr.w	r2, [sl]
   b5204:	4293      	cmp	r3, r2
   b5206:	dd03      	ble.n	b5210 <loop+0x3cc>
        THEN_pasado = true;
   b5208:	4b1a      	ldr	r3, [pc, #104]	; (b5274 <loop+0x430>)
        ELSE_pasado = true;
   b520a:	2201      	movs	r2, #1
   b520c:	701a      	strb	r2, [r3, #0]
   b520e:	e695      	b.n	b4f3c <loop+0xf8>
        if (!IF_pasado)
   b5210:	4b17      	ldr	r3, [pc, #92]	; (b5270 <loop+0x42c>)
   b5212:	781b      	ldrb	r3, [r3, #0]
   b5214:	2b00      	cmp	r3, #0
   b5216:	f43f aef8 	beq.w	b500a <loop+0x1c6>
        Serial.println("Numero de sensores infucientes");
   b521a:	f002 fe63 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b521e:	4919      	ldr	r1, [pc, #100]	; (b5284 <loop+0x440>)
   b5220:	e6fa      	b.n	b5018 <loop+0x1d4>
      if (numActuadoresBloque > 0)
   b5222:	f8d9 3000 	ldr.w	r3, [r9]
   b5226:	2b00      	cmp	r3, #0
   b5228:	dd01      	ble.n	b522e <loop+0x3ea>
        ELSE_pasado = true;
   b522a:	4b13      	ldr	r3, [pc, #76]	; (b5278 <loop+0x434>)
   b522c:	e7ed      	b.n	b520a <loop+0x3c6>
        if (!IF_pasado)
   b522e:	4b10      	ldr	r3, [pc, #64]	; (b5270 <loop+0x42c>)
   b5230:	781b      	ldrb	r3, [r3, #0]
   b5232:	2b00      	cmp	r3, #0
   b5234:	f47f ae82 	bne.w	b4f3c <loop+0xf8>
   b5238:	e6e7      	b.n	b500a <loop+0x1c6>
      Serial.println("ID Tag incorrecta");
   b523a:	f002 fe53 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b523e:	4912      	ldr	r1, [pc, #72]	; (b5288 <loop+0x444>)
   b5240:	e6ea      	b.n	b5018 <loop+0x1d4>
        }
        else
        {
          if (!isActuadorDual(actuador.id))
   b5242:	4618      	mov	r0, r3
   b5244:	9205      	str	r2, [sp, #20]
   b5246:	9304      	str	r3, [sp, #16]
   b5248:	f7ff fdda 	bl	b4e00 <_Z14isActuadorDuali>
   b524c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5250:	2800      	cmp	r0, #0
   b5252:	f47f aed4 	bne.w	b4ffe <loop+0x1ba>
          {
            // Serial.println("ApagarActuador");
            apagarActuador(actuador.id, actuador.puerto);
   b5256:	4611      	mov	r1, r2
   b5258:	4618      	mov	r0, r3
   b525a:	f7ff fcc5 	bl	b4be8 <_Z14apagarActuadorii>
   b525e:	e6ce      	b.n	b4ffe <loop+0x1ba>
  for (int i = 0; i <= numBloque; i++)
   b5260:	f109 0901 	add.w	r9, r9, #1
   b5264:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
   b5268:	e696      	b.n	b4f98 <loop+0x154>
          }
        }
      }
    }
  }
}
   b526a:	b007      	add	sp, #28
   b526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5270:	2003dff5 	.word	0x2003dff5
   b5274:	2003e004 	.word	0x2003e004
   b5278:	2003dff4 	.word	0x2003dff4
   b527c:	000b8d9b 	.word	0x000b8d9b
   b5280:	000b8ded 	.word	0x000b8ded
   b5284:	000b8e1f 	.word	0x000b8e1f
   b5288:	000b8e3e 	.word	0x000b8e3e

000b528c <_GLOBAL__sub_I__Z11noDistanciai>:
   b528c:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b528e:	4c16      	ldr	r4, [pc, #88]	; (b52e8 <_GLOBAL__sub_I__Z11noDistanciai+0x5c>)
Adafruit_SSD1306 display(-1);
   b5290:	4816      	ldr	r0, [pc, #88]	; (b52ec <_GLOBAL__sub_I__Z11noDistanciai+0x60>)
   b5292:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5296:	f000 fd8b 	bl	b5db0 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b529a:	4915      	ldr	r1, [pc, #84]	; (b52f0 <_GLOBAL__sub_I__Z11noDistanciai+0x64>)
   b529c:	4620      	mov	r0, r4
   b529e:	f002 fcca 	bl	b7c36 <_ZN6StringC1EPK19__FlashStringHelper>
   b52a2:	4913      	ldr	r1, [pc, #76]	; (b52f0 <_GLOBAL__sub_I__Z11noDistanciai+0x64>)
   b52a4:	f104 0010 	add.w	r0, r4, #16
   b52a8:	f002 fcc5 	bl	b7c36 <_ZN6StringC1EPK19__FlashStringHelper>
    int bloque;
    int puerto;
    bool evaluate;
};

struct BLOQUE
   b52ac:	4b11      	ldr	r3, [pc, #68]	; (b52f4 <_GLOBAL__sub_I__Z11noDistanciai+0x68>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b52ae:	4812      	ldr	r0, [pc, #72]	; (b52f8 <_GLOBAL__sub_I__Z11noDistanciai+0x6c>)
   b52b0:	2400      	movs	r4, #0
   b52b2:	601c      	str	r4, [r3, #0]
   b52b4:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b52b8:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b52bc:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b52c0:	2208      	movs	r2, #8
   b52c2:	2110      	movs	r1, #16
   b52c4:	f001 fa78 	bl	b67b8 <_ZN7MFRC522C1Ehh>
ChainableLED ledObject = ChainableLED(0, 1, 5);
   b52c8:	2305      	movs	r3, #5
   b52ca:	2201      	movs	r2, #1
   b52cc:	4621      	mov	r1, r4
   b52ce:	480b      	ldr	r0, [pc, #44]	; (b52fc <_GLOBAL__sub_I__Z11noDistanciai+0x70>)
   b52d0:	f001 f9a6 	bl	b6620 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b52d4:	4b0a      	ldr	r3, [pc, #40]	; (b5300 <_GLOBAL__sub_I__Z11noDistanciai+0x74>)
    SleepResult() {}
   b52d6:	4a0b      	ldr	r2, [pc, #44]	; (b5304 <_GLOBAL__sub_I__Z11noDistanciai+0x78>)
   b52d8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b52da:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b52de:	2002      	movs	r0, #2
   b52e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52e4:	f002 b84c 	b.w	b7380 <set_system_mode>
   b52e8:	2003e670 	.word	0x2003e670
   b52ec:	2003e620 	.word	0x2003e620
   b52f0:	000b8eb0 	.word	0x000b8eb0
   b52f4:	2003e008 	.word	0x2003e008
   b52f8:	2003e6a0 	.word	0x2003e6a0
   b52fc:	2003e698 	.word	0x2003e698
   b5300:	2003dff8 	.word	0x2003dff8
   b5304:	ffff0000 	.word	0xffff0000

000b5308 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b5308:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b530a:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b530c:	2301      	movs	r3, #1
	_pin = pin;
   b530e:	7181      	strb	r1, [r0, #6]
	_type = type;
   b5310:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b5312:	7403      	strb	r3, [r0, #16]
}
   b5314:	bd10      	pop	{r4, pc}

000b5316 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b5316:	b510      	push	{r4, lr}
   b5318:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b531a:	2100      	movs	r1, #0
   b531c:	7980      	ldrb	r0, [r0, #6]
   b531e:	f002 ff6b 	bl	b81f8 <pinMode>
	digitalWrite(_pin, HIGH);
   b5322:	79a0      	ldrb	r0, [r4, #6]
   b5324:	2101      	movs	r1, #1
   b5326:	f002 ff78 	bl	b821a <digitalWrite>
	_lastreadtime = 0;
   b532a:	2300      	movs	r3, #0
   b532c:	60e3      	str	r3, [r4, #12]
}
   b532e:	bd10      	pop	{r4, pc}

000b5330 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b5330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5334:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5336:	f001 fea3 	bl	b7080 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b533a:	68e3      	ldr	r3, [r4, #12]
   b533c:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b533e:	bf84      	itt	hi
   b5340:	2300      	movhi	r3, #0
   b5342:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b5344:	7c23      	ldrb	r3, [r4, #16]
   b5346:	b923      	cbnz	r3, b5352 <_ZN3DHT4readEv+0x22>
   b5348:	68e3      	ldr	r3, [r4, #12]
   b534a:	1ac0      	subs	r0, r0, r3
   b534c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5350:	d367      	bcc.n	b5422 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b5352:	2500      	movs	r5, #0
   b5354:	7425      	strb	r5, [r4, #16]
   b5356:	f001 fe93 	bl	b7080 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b535a:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b535c:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b535e:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b5360:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b5362:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b5364:	f002 ff59 	bl	b821a <digitalWrite>
	delay(250);
   b5368:	20fa      	movs	r0, #250	; 0xfa
   b536a:	f002 f8dd 	bl	b7528 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b536e:	79a0      	ldrb	r0, [r4, #6]
   b5370:	2101      	movs	r1, #1
   b5372:	f002 ff41 	bl	b81f8 <pinMode>
	digitalWrite(_pin, LOW);
   b5376:	4629      	mov	r1, r5
   b5378:	79a0      	ldrb	r0, [r4, #6]
   b537a:	f002 ff4e 	bl	b821a <digitalWrite>
	delay(20);
   b537e:	2014      	movs	r0, #20
   b5380:	f002 f8d2 	bl	b7528 <delay>
	noInterrupts();
   b5384:	f002 f98a 	bl	b769c <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b5388:	2101      	movs	r1, #1
   b538a:	79a0      	ldrb	r0, [r4, #6]
   b538c:	f002 ff45 	bl	b821a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5390:	2028      	movs	r0, #40	; 0x28
   b5392:	f001 fe6d 	bl	b7070 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b5396:	79a0      	ldrb	r0, [r4, #6]
   b5398:	4629      	mov	r1, r5
   b539a:	f002 ff2d 	bl	b81f8 <pinMode>
	uint8_t j = 0, i;
   b539e:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b53a0:	2701      	movs	r7, #1
   b53a2:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b53a6:	79a0      	ldrb	r0, [r4, #6]
   b53a8:	f002 ff50 	bl	b824c <digitalRead>
   b53ac:	42b8      	cmp	r0, r7
   b53ae:	fa5f f988 	uxtb.w	r9, r8
   b53b2:	d108      	bne.n	b53c6 <_ZN3DHT4readEv+0x96>
   b53b4:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b53b6:	f108 0801 	add.w	r8, r8, #1
   b53ba:	f001 fe59 	bl	b7070 <HAL_Delay_Microseconds>
   b53be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b53c2:	d1f0      	bne.n	b53a6 <_ZN3DHT4readEv+0x76>
   b53c4:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b53c6:	79a0      	ldrb	r0, [r4, #6]
   b53c8:	f002 ff40 	bl	b824c <digitalRead>

		if (counter == 255) break;
   b53cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b53d0:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b53d2:	d014      	beq.n	b53fe <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b53d4:	2d03      	cmp	r5, #3
   b53d6:	d90e      	bls.n	b53f6 <_ZN3DHT4readEv+0xc6>
   b53d8:	07ea      	lsls	r2, r5, #31
   b53da:	d40c      	bmi.n	b53f6 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b53dc:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b53de:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b53e0:	5ca3      	ldrb	r3, [r4, r2]
   b53e2:	005b      	lsls	r3, r3, #1
   b53e4:	b2db      	uxtb	r3, r3
   b53e6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b53e8:	7a21      	ldrb	r1, [r4, #8]
   b53ea:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b53ec:	bf3c      	itt	cc
   b53ee:	f043 0301 	orrcc.w	r3, r3, #1
   b53f2:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b53f4:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b53f6:	3501      	adds	r5, #1
   b53f8:	b2ed      	uxtb	r5, r5
   b53fa:	2d55      	cmp	r5, #85	; 0x55
   b53fc:	d1d1      	bne.n	b53a2 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b53fe:	f002 f94f 	bl	b76a0 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b5402:	2e27      	cmp	r6, #39	; 0x27
   b5404:	d90f      	bls.n	b5426 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b5406:	7863      	ldrb	r3, [r4, #1]
   b5408:	7820      	ldrb	r0, [r4, #0]
   b540a:	4418      	add	r0, r3
   b540c:	78a3      	ldrb	r3, [r4, #2]
   b540e:	4418      	add	r0, r3
   b5410:	78e3      	ldrb	r3, [r4, #3]
   b5412:	4418      	add	r0, r3
   b5414:	7923      	ldrb	r3, [r4, #4]
   b5416:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b5418:	1ac3      	subs	r3, r0, r3
   b541a:	4258      	negs	r0, r3
   b541c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b541e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b5422:	2001      	movs	r0, #1
   b5424:	e7fb      	b.n	b541e <_ZN3DHT4readEv+0xee>
	return false;
   b5426:	2000      	movs	r0, #0
   b5428:	e7f9      	b.n	b541e <_ZN3DHT4readEv+0xee>
	...

000b542c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b542c:	b510      	push	{r4, lr}
   b542e:	4604      	mov	r4, r0
	if (read()) {
   b5430:	f7ff ff7e 	bl	b5330 <_ZN3DHT4readEv>
   b5434:	b320      	cbz	r0, b5480 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b5436:	79e3      	ldrb	r3, [r4, #7]
   b5438:	2b0b      	cmp	r3, #11
   b543a:	d01b      	beq.n	b5474 <_ZN3DHT15readTemperatureEv+0x48>
   b543c:	3b15      	subs	r3, #21
   b543e:	2b01      	cmp	r3, #1
   b5440:	d81e      	bhi.n	b5480 <_ZN3DHT15readTemperatureEv+0x54>
   b5442:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b5444:	eddf 6a10 	vldr	s13, [pc, #64]	; b5488 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b5448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b544c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b5450:	78e2      	ldrb	r2, [r4, #3]
   b5452:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b5456:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b545e:	061b      	lsls	r3, r3, #24
				f += data[3];
   b5460:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b5464:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b5468:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b546c:	d507      	bpl.n	b547e <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b546e:	eeb1 0a40 	vneg.f32	s0, s0
   b5472:	e004      	b.n	b547e <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b5474:	78a3      	ldrb	r3, [r4, #2]
   b5476:	ee00 3a10 	vmov	s0, r3
   b547a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b547e:	bd10      	pop	{r4, pc}
		switch (_type) {
   b5480:	ed9f 0a02 	vldr	s0, [pc, #8]	; b548c <_ZN3DHT15readTemperatureEv+0x60>
   b5484:	e7fb      	b.n	b547e <_ZN3DHT15readTemperatureEv+0x52>
   b5486:	bf00      	nop
   b5488:	43800000 	.word	0x43800000
   b548c:	7fc00000 	.word	0x7fc00000

000b5490 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b5490:	f7ff bfcc 	b.w	b542c <_ZN3DHT15readTemperatureEv>

000b5494 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5498:	b085      	sub	sp, #20
   b549a:	461f      	mov	r7, r3
   b549c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b54a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b54a4:	eba8 0902 	sub.w	r9, r8, r2
   b54a8:	eba7 0a01 	sub.w	sl, r7, r1
   b54ac:	f1b9 0f00 	cmp.w	r9, #0
   b54b0:	bfb8      	it	lt
   b54b2:	f1c9 0900 	rsblt	r9, r9, #0
   b54b6:	f1ba 0f00 	cmp.w	sl, #0
   b54ba:	bfb8      	it	lt
   b54bc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b54c0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b54c2:	4683      	mov	fp, r0
   b54c4:	460c      	mov	r4, r1
   b54c6:	4615      	mov	r5, r2
    if (steep) {
   b54c8:	dd04      	ble.n	b54d4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b54ca:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b54cc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b54ce:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b54d0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b54d2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b54d4:	42bc      	cmp	r4, r7
   b54d6:	dd05      	ble.n	b54e4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b54d8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b54da:	4645      	mov	r5, r8
   b54dc:	4690      	mov	r8, r2
    if (x0 > x1) {
   b54de:	4622      	mov	r2, r4
   b54e0:	463c      	mov	r4, r7
   b54e2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b54e4:	1b3e      	subs	r6, r7, r4
   b54e6:	b2b2      	uxth	r2, r6
   b54e8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b54ea:	eba8 0205 	sub.w	r2, r8, r5
   b54ee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b54f2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b54f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b54fa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b54fe:	4545      	cmp	r5, r8
   b5500:	bfb4      	ite	lt
   b5502:	2201      	movlt	r2, #1
   b5504:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5508:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b550a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b550c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b550e:	42bc      	cmp	r4, r7
   b5510:	dc1c      	bgt.n	b554c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5512:	f8db 2000 	ldr.w	r2, [fp]
   b5516:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5518:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b551a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b551e:	bfc7      	ittee	gt
   b5520:	4629      	movgt	r1, r5
   b5522:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5524:	462a      	movle	r2, r5
   b5526:	4621      	movle	r1, r4
   b5528:	4658      	mov	r0, fp
   b552a:	47c0      	blx	r8
        }
        err -= dy;
   b552c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b552e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5530:	1ab6      	subs	r6, r6, r2
   b5532:	b2b1      	uxth	r1, r6
   b5534:	b236      	sxth	r6, r6
        if (err < 0) {
   b5536:	2e00      	cmp	r6, #0
   b5538:	da05      	bge.n	b5546 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b553a:	9a02      	ldr	r2, [sp, #8]
   b553c:	4415      	add	r5, r2
            err += dx;
   b553e:	9a00      	ldr	r2, [sp, #0]
   b5540:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5542:	b22d      	sxth	r5, r5
            err += dx;
   b5544:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5546:	3401      	adds	r4, #1
   b5548:	b224      	sxth	r4, r4
   b554a:	e7e0      	b.n	b550e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b554c:	b005      	add	sp, #20
   b554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5552 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5552:	4770      	bx	lr

000b5554 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5554:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5556:	6804      	ldr	r4, [r0, #0]
   b5558:	6924      	ldr	r4, [r4, #16]
   b555a:	46a4      	mov	ip, r4
}
   b555c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5560:	4760      	bx	ip

000b5562 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5562:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5564:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5566:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b556a:	9502      	str	r5, [sp, #8]
   b556c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b556e:	46a4      	mov	ip, r4
}
   b5570:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5572:	4760      	bx	ip

000b5574 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5574:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5576:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5578:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b557c:	9502      	str	r5, [sp, #8]
   b557e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5580:	46a4      	mov	ip, r4
}
   b5582:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5584:	4760      	bx	ip

000b5586 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5586:	b470      	push	{r4, r5, r6}
   b5588:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b558c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5590:	6804      	ldr	r4, [r0, #0]
   b5592:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5596:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5598:	46a4      	mov	ip, r4
}
   b559a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b559c:	4760      	bx	ip

000b559e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b559e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b55a2:	461c      	mov	r4, r3
    startWrite();
   b55a4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b55a6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b55aa:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b55ac:	4605      	mov	r5, r0
   b55ae:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b55b0:	3c01      	subs	r4, #1
   b55b2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b55b4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b55b6:	b224      	sxth	r4, r4
    startWrite();
   b55b8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b55ba:	682b      	ldr	r3, [r5, #0]
   b55bc:	f8cd 8004 	str.w	r8, [sp, #4]
   b55c0:	9400      	str	r4, [sp, #0]
   b55c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b55c4:	4628      	mov	r0, r5
   b55c6:	463b      	mov	r3, r7
   b55c8:	4632      	mov	r2, r6
   b55ca:	4639      	mov	r1, r7
   b55cc:	47a0      	blx	r4
    endWrite();
   b55ce:	682b      	ldr	r3, [r5, #0]
   b55d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55d2:	4628      	mov	r0, r5
}
   b55d4:	b002      	add	sp, #8
   b55d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b55da:	4718      	bx	r3

000b55dc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b55dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b55e0:	461d      	mov	r5, r3
    startWrite();
   b55e2:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b55e4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b55e8:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b55ea:	4604      	mov	r4, r0
   b55ec:	4617      	mov	r7, r2
   b55ee:	460e      	mov	r6, r1
    startWrite();
   b55f0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b55f2:	e9cd 7800 	strd	r7, r8, [sp]
   b55f6:	6822      	ldr	r2, [r4, #0]
   b55f8:	1e6b      	subs	r3, r5, #1
   b55fa:	4433      	add	r3, r6
   b55fc:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b55fe:	4620      	mov	r0, r4
   b5600:	b21b      	sxth	r3, r3
   b5602:	463a      	mov	r2, r7
   b5604:	4631      	mov	r1, r6
   b5606:	47a8      	blx	r5
    endWrite();
   b5608:	6823      	ldr	r3, [r4, #0]
   b560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b560c:	4620      	mov	r0, r4
}
   b560e:	b002      	add	sp, #8
   b5610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5614:	4718      	bx	r3

000b5616 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5616:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b561a:	461e      	mov	r6, r3
    startWrite();
   b561c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b561e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5622:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5624:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5628:	460c      	mov	r4, r1
   b562a:	4605      	mov	r5, r0
   b562c:	4617      	mov	r7, r2
    startWrite();
   b562e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5630:	4426      	add	r6, r4
   b5632:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5634:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5636:	da0b      	bge.n	b5650 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5638:	f8cd 8000 	str.w	r8, [sp]
   b563c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5640:	4621      	mov	r1, r4
   b5642:	464b      	mov	r3, r9
   b5644:	463a      	mov	r2, r7
   b5646:	4628      	mov	r0, r5
   b5648:	3401      	adds	r4, #1
   b564a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b564c:	b224      	sxth	r4, r4
   b564e:	e7f0      	b.n	b5632 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5652:	4628      	mov	r0, r5
}
   b5654:	b002      	add	sp, #8
   b5656:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b565a:	4718      	bx	r3

000b565c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b565c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b565e:	6802      	ldr	r2, [r0, #0]
   b5660:	9101      	str	r1, [sp, #4]
   b5662:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5666:	9100      	str	r1, [sp, #0]
   b5668:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b566a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b566e:	2200      	movs	r2, #0
   b5670:	4611      	mov	r1, r2
   b5672:	47a0      	blx	r4
}
   b5674:	b002      	add	sp, #8
   b5676:	bd10      	pop	{r4, pc}

000b5678 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b567c:	4299      	cmp	r1, r3
        uint16_t color) {
   b567e:	4616      	mov	r6, r2
   b5680:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5684:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5688:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b568a:	4680      	mov	r8, r0
   b568c:	460d      	mov	r5, r1
   b568e:	461c      	mov	r4, r3
    if(x0 == x1){
   b5690:	d113      	bne.n	b56ba <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5692:	42be      	cmp	r6, r7
   b5694:	bfc8      	it	gt
   b5696:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5698:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b569c:	bfc4      	itt	gt
   b569e:	463e      	movgt	r6, r7
   b56a0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b56a2:	1c7b      	adds	r3, r7, #1
   b56a4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b56a6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b56a8:	b21b      	sxth	r3, r3
   b56aa:	4632      	mov	r2, r6
   b56ac:	4629      	mov	r1, r5
   b56ae:	4640      	mov	r0, r8
   b56b0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b56b2:	b003      	add	sp, #12
   b56b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b56b8:	4760      	bx	ip
    } else if(y0 == y1){
   b56ba:	42be      	cmp	r6, r7
   b56bc:	d10a      	bne.n	b56d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b56be:	4299      	cmp	r1, r3
   b56c0:	bfc2      	ittt	gt
   b56c2:	460b      	movgt	r3, r1
   b56c4:	4625      	movgt	r5, r4
   b56c6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b56c8:	1c63      	adds	r3, r4, #1
   b56ca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b56ce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b56d0:	1b5b      	subs	r3, r3, r5
   b56d2:	e7e9      	b.n	b56a8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b56d4:	6953      	ldr	r3, [r2, #20]
   b56d6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b56d8:	e9cd 7900 	strd	r7, r9, [sp]
   b56dc:	f8d8 3000 	ldr.w	r3, [r8]
   b56e0:	4640      	mov	r0, r8
   b56e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b56e4:	4632      	mov	r2, r6
   b56e6:	4623      	mov	r3, r4
   b56e8:	4629      	mov	r1, r5
   b56ea:	47b8      	blx	r7
        endWrite();
   b56ec:	f8d8 3000 	ldr.w	r3, [r8]
   b56f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56f2:	4640      	mov	r0, r8
}
   b56f4:	b003      	add	sp, #12
   b56f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b56fa:	4718      	bx	r3

000b56fc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b56fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5700:	461d      	mov	r5, r3
    startWrite();
   b5702:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5704:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5708:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b570a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b570e:	4604      	mov	r4, r0
   b5710:	460f      	mov	r7, r1
   b5712:	4616      	mov	r6, r2
    startWrite();
   b5714:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5716:	6823      	ldr	r3, [r4, #0]
   b5718:	f8cd 8000 	str.w	r8, [sp]
   b571c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5720:	4632      	mov	r2, r6
   b5722:	462b      	mov	r3, r5
   b5724:	4639      	mov	r1, r7
   b5726:	4620      	mov	r0, r4
   b5728:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b572a:	6823      	ldr	r3, [r4, #0]
   b572c:	f8cd 8000 	str.w	r8, [sp]
   b5730:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5734:	4432      	add	r2, r6
   b5736:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b573a:	4639      	mov	r1, r7
   b573c:	462b      	mov	r3, r5
   b573e:	4620      	mov	r0, r4
   b5740:	b212      	sxth	r2, r2
   b5742:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5744:	6823      	ldr	r3, [r4, #0]
   b5746:	f8cd 8000 	str.w	r8, [sp]
   b574a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b574e:	4632      	mov	r2, r6
   b5750:	464b      	mov	r3, r9
   b5752:	4639      	mov	r1, r7
   b5754:	4620      	mov	r0, r4
   b5756:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5758:	1e6b      	subs	r3, r5, #1
   b575a:	19d9      	adds	r1, r3, r7
   b575c:	6823      	ldr	r3, [r4, #0]
   b575e:	f8cd 8000 	str.w	r8, [sp]
   b5762:	6a1d      	ldr	r5, [r3, #32]
   b5764:	4620      	mov	r0, r4
   b5766:	464b      	mov	r3, r9
   b5768:	4632      	mov	r2, r6
   b576a:	b209      	sxth	r1, r1
   b576c:	47a8      	blx	r5
    endWrite();
   b576e:	6823      	ldr	r3, [r4, #0]
   b5770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5772:	4620      	mov	r0, r4
}
   b5774:	b002      	add	sp, #8
   b5776:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b577a:	4718      	bx	r3

000b577c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b577c:	4770      	bx	lr

000b577e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b577e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5782:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5786:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5788:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b578a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b578e:	bf59      	ittee	pl
   b5790:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5792:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5794:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5796:	81c3      	strhmi	r3, [r0, #14]
}
   b5798:	4770      	bx	lr
	...

000b579c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b579c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b579e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b57a0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b57a2:	4a07      	ldr	r2, [pc, #28]	; (b57c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b57a4:	4d07      	ldr	r5, [pc, #28]	; (b57c4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b57a6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b57a8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b57aa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b57ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b57b0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b57b4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b57b6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b57b8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b57ba:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b57bc:	6204      	str	r4, [r0, #32]
}
   b57be:	bd30      	pop	{r4, r5, pc}
   b57c0:	01000101 	.word	0x01000101
   b57c4:	000b93bc 	.word	0x000b93bc

000b57c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b57c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57cc:	b089      	sub	sp, #36	; 0x24
   b57ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b57d2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b57d4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b57d8:	9304      	str	r3, [sp, #16]
   b57da:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b57de:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b57e0:	9305      	str	r3, [sp, #20]
   b57e2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b57e6:	4604      	mov	r4, r0
    startWrite();
   b57e8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b57ea:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b57ee:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b57f2:	bf48      	it	mi
   b57f4:	f108 020e 	addmi.w	r2, r8, #14
   b57f8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b57fc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b57fe:	4635      	mov	r5, r6
   b5800:	9b03      	ldr	r3, [sp, #12]
   b5802:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5804:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5808:	189a      	adds	r2, r3, r2
   b580a:	9b05      	ldr	r3, [sp, #20]
   b580c:	428b      	cmp	r3, r1
   b580e:	b212      	sxth	r2, r2
   b5810:	dd27      	ble.n	b5862 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5812:	9b04      	ldr	r3, [sp, #16]
   b5814:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5816:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b581a:	9306      	str	r3, [sp, #24]
   b581c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5820:	4580      	cmp	r8, r0
   b5822:	fa1f f189 	uxth.w	r1, r9
   b5826:	dd17      	ble.n	b5858 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5828:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b582a:	bf05      	ittet	eq
   b582c:	9b06      	ldreq	r3, [sp, #24]
   b582e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5830:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5832:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5834:	bf18      	it	ne
   b5836:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5838:	062b      	lsls	r3, r5, #24
   b583a:	d50a      	bpl.n	b5852 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b583c:	9b02      	ldr	r3, [sp, #8]
   b583e:	6820      	ldr	r0, [r4, #0]
   b5840:	9207      	str	r2, [sp, #28]
   b5842:	4419      	add	r1, r3
   b5844:	6983      	ldr	r3, [r0, #24]
   b5846:	b209      	sxth	r1, r1
   b5848:	461f      	mov	r7, r3
   b584a:	4620      	mov	r0, r4
   b584c:	4653      	mov	r3, sl
   b584e:	47b8      	blx	r7
   b5850:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5852:	f109 0901 	add.w	r9, r9, #1
   b5856:	e7e1      	b.n	b581c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5858:	9b01      	ldr	r3, [sp, #4]
   b585a:	3301      	adds	r3, #1
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	445e      	add	r6, fp
   b5860:	e7ce      	b.n	b5800 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5862:	6823      	ldr	r3, [r4, #0]
   b5864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5866:	4620      	mov	r0, r4
}
   b5868:	b009      	add	sp, #36	; 0x24
   b586a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b586e:	4718      	bx	r3

000b5870 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5874:	ed2d 8b02 	vpush	{d8}
   b5878:	b091      	sub	sp, #68	; 0x44
   b587a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b587c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b587e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5882:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5886:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b588a:	9103      	str	r1, [sp, #12]
   b588c:	461f      	mov	r7, r3
   b588e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5892:	9304      	str	r3, [sp, #16]
   b5894:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5896:	2a00      	cmp	r2, #0
   b5898:	f040 80c5 	bne.w	b5a26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b589c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b58a0:	428b      	cmp	r3, r1
   b58a2:	f340 814c 	ble.w	b5b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b58a6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b58aa:	42b3      	cmp	r3, r6
   b58ac:	f340 8147 	ble.w	b5b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b58b0:	2306      	movs	r3, #6
   b58b2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b58b6:	2b00      	cmp	r3, #0
   b58b8:	f340 8141 	ble.w	b5b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b58bc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b58c0:	2b00      	cmp	r3, #0
   b58c2:	f340 813c 	ble.w	b5b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b58c6:	7f03      	ldrb	r3, [r0, #28]
   b58c8:	b91b      	cbnz	r3, b58d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b58ca:	2faf      	cmp	r7, #175	; 0xaf
   b58cc:	bf84      	itt	hi
   b58ce:	3701      	addhi	r7, #1
   b58d0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b58d2:	f8db 3000 	ldr.w	r3, [fp]
   b58d6:	4658      	mov	r0, fp
   b58d8:	695b      	ldr	r3, [r3, #20]
   b58da:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b58dc:	2205      	movs	r2, #5
   b58de:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b58e0:	2200      	movs	r2, #0
   b58e2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b58e4:	4a98      	ldr	r2, [pc, #608]	; (b5b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b58e6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b58ea:	18d3      	adds	r3, r2, r3
   b58ec:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b58ee:	b2b3      	uxth	r3, r6
   b58f0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b58f2:	9a05      	ldr	r2, [sp, #20]
   b58f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b58f6:	5c9b      	ldrb	r3, [r3, r2]
   b58f8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b58fa:	b2ab      	uxth	r3, r5
   b58fc:	930b      	str	r3, [sp, #44]	; 0x2c
   b58fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5902:	9308      	str	r3, [sp, #32]
   b5904:	9b03      	ldr	r3, [sp, #12]
   b5906:	fb02 f905 	mul.w	r9, r2, r5
   b590a:	fa19 f983 	uxtah	r9, r9, r3
   b590e:	fa0f f389 	sxth.w	r3, r9
   b5912:	ee08 3a10 	vmov	s16, r3
   b5916:	2308      	movs	r3, #8
   b5918:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b591a:	9b03      	ldr	r3, [sp, #12]
   b591c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5920:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5924:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5928:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b592a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b592e:	07d2      	lsls	r2, r2, #31
   b5930:	d552      	bpl.n	b59d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5932:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5934:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5938:	d13e      	bne.n	b59b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b593a:	2c01      	cmp	r4, #1
   b593c:	d13c      	bne.n	b59b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b593e:	699b      	ldr	r3, [r3, #24]
   b5940:	9906      	ldr	r1, [sp, #24]
   b5942:	461f      	mov	r7, r3
   b5944:	9b04      	ldr	r3, [sp, #16]
   b5946:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5948:	b212      	sxth	r2, r2
   b594a:	4651      	mov	r1, sl
   b594c:	4658      	mov	r0, fp
   b594e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5950:	f109 0301 	add.w	r3, r9, #1
   b5954:	fa4f f983 	sxtb.w	r9, r3
   b5958:	9b07      	ldr	r3, [sp, #28]
   b595a:	085b      	lsrs	r3, r3, #1
   b595c:	9307      	str	r3, [sp, #28]
   b595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5960:	3b01      	subs	r3, #1
   b5962:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5966:	930a      	str	r3, [sp, #40]	; 0x28
   b5968:	d1de      	bne.n	b5928 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b596a:	9f05      	ldr	r7, [sp, #20]
   b596c:	3701      	adds	r7, #1
   b596e:	b27b      	sxtb	r3, r7
   b5970:	9305      	str	r3, [sp, #20]
   b5972:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5974:	3b01      	subs	r3, #1
   b5976:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b597a:	9309      	str	r3, [sp, #36]	; 0x24
   b597c:	d1b9      	bne.n	b58f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b597e:	9b04      	ldr	r3, [sp, #16]
   b5980:	4543      	cmp	r3, r8
   b5982:	d00f      	beq.n	b59a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5984:	2d01      	cmp	r5, #1
   b5986:	f8db 3000 	ldr.w	r3, [fp]
   b598a:	d13b      	bne.n	b5a04 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b598c:	2c01      	cmp	r4, #1
   b598e:	d139      	bne.n	b5a04 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5990:	9908      	ldr	r1, [sp, #32]
   b5992:	f8cd 8000 	str.w	r8, [sp]
   b5996:	3105      	adds	r1, #5
   b5998:	6a1c      	ldr	r4, [r3, #32]
   b599a:	4632      	mov	r2, r6
   b599c:	2308      	movs	r3, #8
   b599e:	b209      	sxth	r1, r1
   b59a0:	4658      	mov	r0, fp
   b59a2:	47a0      	blx	r4
        endWrite();
   b59a4:	f8db 3000 	ldr.w	r3, [fp]
   b59a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59aa:	4658      	mov	r0, fp
}
   b59ac:	b011      	add	sp, #68	; 0x44
   b59ae:	ecbd 8b02 	vpop	{d8}
   b59b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b59b6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b59b8:	9906      	ldr	r1, [sp, #24]
   b59ba:	fb14 f202 	smulbb	r2, r4, r2
   b59be:	440a      	add	r2, r1
   b59c0:	9904      	ldr	r1, [sp, #16]
   b59c2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b59c4:	9400      	str	r4, [sp, #0]
   b59c6:	69db      	ldr	r3, [r3, #28]
   b59c8:	ee18 1a10 	vmov	r1, s16
   b59cc:	461f      	mov	r7, r3
   b59ce:	b212      	sxth	r2, r2
   b59d0:	462b      	mov	r3, r5
   b59d2:	4658      	mov	r0, fp
   b59d4:	47b8      	blx	r7
   b59d6:	e7bb      	b.n	b5950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b59d8:	9a04      	ldr	r2, [sp, #16]
   b59da:	4542      	cmp	r2, r8
   b59dc:	d0b8      	beq.n	b5950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b59de:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b59e0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b59e4:	d107      	bne.n	b59f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b59e6:	2c01      	cmp	r4, #1
   b59e8:	d105      	bne.n	b59f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b59ea:	699b      	ldr	r3, [r3, #24]
   b59ec:	9906      	ldr	r1, [sp, #24]
   b59ee:	461f      	mov	r7, r3
   b59f0:	440a      	add	r2, r1
   b59f2:	4643      	mov	r3, r8
   b59f4:	e7a8      	b.n	b5948 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b59f6:	9906      	ldr	r1, [sp, #24]
   b59f8:	f8cd 8004 	str.w	r8, [sp, #4]
   b59fc:	fb14 f202 	smulbb	r2, r4, r2
   b5a00:	440a      	add	r2, r1
   b5a02:	e7df      	b.n	b59c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5a06:	f8cd 8004 	str.w	r8, [sp, #4]
   b5a0a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5a0e:	9a08      	ldr	r2, [sp, #32]
   b5a10:	00e4      	lsls	r4, r4, #3
   b5a12:	440a      	add	r2, r1
   b5a14:	4611      	mov	r1, r2
   b5a16:	9400      	str	r4, [sp, #0]
   b5a18:	69dc      	ldr	r4, [r3, #28]
   b5a1a:	4632      	mov	r2, r6
   b5a1c:	462b      	mov	r3, r5
   b5a1e:	b209      	sxth	r1, r1
   b5a20:	4658      	mov	r0, fp
   b5a22:	47a0      	blx	r4
        endWrite();
   b5a24:	e7be      	b.n	b59a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5a26:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5a28:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5a2a:	6812      	ldr	r2, [r2, #0]
   b5a2c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5a2e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5a30:	b2ff      	uxtb	r7, r7
   b5a32:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5a36:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5a3a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5a3c:	789a      	ldrb	r2, [r3, #2]
   b5a3e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5a40:	78da      	ldrb	r2, [r3, #3]
   b5a42:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5a44:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5a46:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5a4a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5a4e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5a50:	d801      	bhi.n	b5a56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5a52:	2c01      	cmp	r4, #1
   b5a54:	d957      	bls.n	b5b06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5a56:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5a5a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5a5c:	fa0f f38a 	sxth.w	r3, sl
   b5a60:	9307      	str	r3, [sp, #28]
        startWrite();
   b5a62:	f8db 3000 	ldr.w	r3, [fp]
   b5a66:	4658      	mov	r0, fp
   b5a68:	695b      	ldr	r3, [r3, #20]
   b5a6a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a6c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5a6e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a72:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a74:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5a78:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5a7a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a7c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5a80:	429f      	cmp	r7, r3
   b5a82:	d28f      	bcs.n	b59a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a84:	9b07      	ldr	r3, [sp, #28]
   b5a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5a88:	443b      	add	r3, r7
   b5a8a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5a8e:	2200      	movs	r2, #0
   b5a90:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a94:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a96:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5a9a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5a9e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5aa2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5aa6:	9905      	ldr	r1, [sp, #20]
   b5aa8:	4291      	cmp	r1, r2
   b5aaa:	d241      	bcs.n	b5b30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5aac:	1c5a      	adds	r2, r3, #1
   b5aae:	b2d2      	uxtb	r2, r2
   b5ab0:	075b      	lsls	r3, r3, #29
   b5ab2:	920d      	str	r2, [sp, #52]	; 0x34
   b5ab4:	d107      	bne.n	b5ac6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5ab6:	9b06      	ldr	r3, [sp, #24]
   b5ab8:	9906      	ldr	r1, [sp, #24]
   b5aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5abc:	3301      	adds	r3, #1
   b5abe:	b29b      	uxth	r3, r3
   b5ac0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5ac4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5ac6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5aca:	d012      	beq.n	b5af2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5acc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5ace:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5ad2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5ad6:	d11a      	bne.n	b5b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5ad8:	2c01      	cmp	r4, #1
   b5ada:	d118      	bne.n	b5b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5ade:	699b      	ldr	r3, [r3, #24]
   b5ae0:	4411      	add	r1, r2
   b5ae2:	9a05      	ldr	r2, [sp, #20]
   b5ae4:	4411      	add	r1, r2
   b5ae6:	461e      	mov	r6, r3
   b5ae8:	4652      	mov	r2, sl
   b5aea:	9b04      	ldr	r3, [sp, #16]
   b5aec:	b209      	sxth	r1, r1
   b5aee:	4658      	mov	r0, fp
   b5af0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5af2:	9e05      	ldr	r6, [sp, #20]
   b5af4:	3601      	adds	r6, #1
   b5af6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5af8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5afc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5afe:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5b04:	e7ce      	b.n	b5aa4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5b06:	2300      	movs	r3, #0
   b5b08:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5b0c:	e7a9      	b.n	b5a62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5b0e:	9805      	ldr	r0, [sp, #20]
   b5b10:	9a08      	ldr	r2, [sp, #32]
   b5b12:	4402      	add	r2, r0
   b5b14:	fb02 1105 	mla	r1, r2, r5, r1
   b5b18:	9a04      	ldr	r2, [sp, #16]
   b5b1a:	e9cd 4200 	strd	r4, r2, [sp]
   b5b1e:	69db      	ldr	r3, [r3, #28]
   b5b20:	ee18 2a10 	vmov	r2, s16
   b5b24:	461e      	mov	r6, r3
   b5b26:	b209      	sxth	r1, r1
   b5b28:	462b      	mov	r3, r5
   b5b2a:	4658      	mov	r0, fp
   b5b2c:	47b0      	blx	r6
   b5b2e:	e7e0      	b.n	b5af2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5b32:	3701      	adds	r7, #1
   b5b34:	4498      	add	r8, r3
   b5b36:	fa5f f888 	uxtb.w	r8, r8
   b5b3a:	b2ff      	uxtb	r7, r7
   b5b3c:	e79f      	b.n	b5a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5b3e:	b011      	add	sp, #68	; 0x44
   b5b40:	ecbd 8b02 	vpop	{d8}
   b5b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b48:	000b8eb2 	.word	0x000b8eb2

000b5b4c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5b4e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5b50:	b085      	sub	sp, #20
   b5b52:	4604      	mov	r4, r0
   b5b54:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5b56:	2a00      	cmp	r2, #0
   b5b58:	d134      	bne.n	b5bc4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5b5a:	290a      	cmp	r1, #10
   b5b5c:	d108      	bne.n	b5b70 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5b5e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5b60:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5b62:	7e42      	ldrb	r2, [r0, #25]
   b5b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5b68:	8263      	strh	r3, [r4, #18]
}
   b5b6a:	2001      	movs	r0, #1
   b5b6c:	b005      	add	sp, #20
   b5b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5b70:	290d      	cmp	r1, #13
   b5b72:	d0fa      	beq.n	b5b6a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5b74:	7ee1      	ldrb	r1, [r4, #27]
   b5b76:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5b78:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5b7a:	b171      	cbz	r1, b5b9a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5b7c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5b80:	2106      	movs	r1, #6
   b5b82:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5b86:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5b8a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5b8c:	bfc1      	itttt	gt
   b5b8e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5b92:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5b94:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5b98:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5b9a:	8ae2      	ldrh	r2, [r4, #22]
   b5b9c:	9201      	str	r2, [sp, #4]
   b5b9e:	8aa2      	ldrh	r2, [r4, #20]
   b5ba0:	9200      	str	r2, [sp, #0]
   b5ba2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5ba6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5baa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5bae:	4620      	mov	r0, r4
   b5bb0:	f7ff fe5e 	bl	b5870 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5bb4:	7e23      	ldrb	r3, [r4, #24]
   b5bb6:	8a22      	ldrh	r2, [r4, #16]
   b5bb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5bbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5bc0:	8223      	strh	r3, [r4, #16]
   b5bc2:	e7d2      	b.n	b5b6a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5bc4:	290a      	cmp	r1, #10
   b5bc6:	d107      	bne.n	b5bd8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5bc8:	2300      	movs	r3, #0
   b5bca:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5bcc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5bce:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5bd0:	8a43      	ldrh	r3, [r0, #18]
   b5bd2:	fb01 3302 	mla	r3, r1, r2, r3
   b5bd6:	e7c7      	b.n	b5b68 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5bd8:	290d      	cmp	r1, #13
   b5bda:	d0c6      	beq.n	b5b6a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5bdc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5bde:	42a9      	cmp	r1, r5
   b5be0:	d3c3      	bcc.n	b5b6a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5be2:	7a51      	ldrb	r1, [r2, #9]
   b5be4:	4299      	cmp	r1, r3
   b5be6:	d3c0      	bcc.n	b5b6a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5be8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5bea:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5bec:	b2ed      	uxtb	r5, r5
   b5bee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5bf2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5bf4:	b328      	cbz	r0, b5c42 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5bf6:	78e9      	ldrb	r1, [r5, #3]
   b5bf8:	b319      	cbz	r1, b5c42 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5bfa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5bfc:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5bfe:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5c00:	b191      	cbz	r1, b5c28 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5c02:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5c06:	4408      	add	r0, r1
   b5c08:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5c0c:	fb06 1100 	mla	r1, r6, r0, r1
   b5c10:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5c14:	4281      	cmp	r1, r0
   b5c16:	dd07      	ble.n	b5c28 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5c18:	2000      	movs	r0, #0
   b5c1a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5c1c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5c20:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5c22:	fb02 1207 	mla	r2, r2, r7, r1
   b5c26:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5c28:	8ae2      	ldrh	r2, [r4, #22]
   b5c2a:	9201      	str	r2, [sp, #4]
   b5c2c:	8aa2      	ldrh	r2, [r4, #20]
   b5c2e:	9200      	str	r2, [sp, #0]
   b5c30:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5c34:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5c38:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	f7ff fe17 	bl	b5870 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5c42:	7929      	ldrb	r1, [r5, #4]
   b5c44:	7e22      	ldrb	r2, [r4, #24]
   b5c46:	8a23      	ldrh	r3, [r4, #16]
   b5c48:	fb01 3302 	mla	r3, r1, r2, r3
   b5c4c:	e7b8      	b.n	b5bc0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5c4e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5c4e:	2901      	cmp	r1, #1
   b5c50:	bf38      	it	cc
   b5c52:	2101      	movcc	r1, #1
   b5c54:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5c56:	7641      	strb	r1, [r0, #25]
}
   b5c58:	4770      	bx	lr

000b5c5a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5c5a:	4770      	bx	lr

000b5c5c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5c5c:	b510      	push	{r4, lr}
  }
   b5c5e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5c60:	4604      	mov	r4, r0
  }
   b5c62:	f7fe fa18 	bl	b4096 <_ZdlPvj>
   b5c66:	4620      	mov	r0, r4
   b5c68:	bd10      	pop	{r4, pc}
	...

000b5c6c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c6e:	4604      	mov	r4, r0
   b5c70:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5c72:	7922      	ldrb	r2, [r4, #4]
   b5c74:	68a3      	ldr	r3, [r4, #8]
   b5c76:	b132      	cbz	r2, b5c86 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5c78:	b9a3      	cbnz	r3, b5ca4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5c7a:	490b      	ldr	r1, [pc, #44]	; (b5ca8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5c7c:	b002      	add	sp, #8
   b5c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5c82:	f001 be69 	b.w	b7958 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5c86:	4a09      	ldr	r2, [pc, #36]	; (b5cac <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5c88:	7b26      	ldrb	r6, [r4, #12]
   b5c8a:	4d09      	ldr	r5, [pc, #36]	; (b5cb0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5c8c:	4909      	ldr	r1, [pc, #36]	; (b5cb4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5c8e:	7b64      	ldrb	r4, [r4, #13]
   b5c90:	2e01      	cmp	r6, #1
   b5c92:	bf18      	it	ne
   b5c94:	4629      	movne	r1, r5
   b5c96:	e9cd 1400 	strd	r1, r4, [sp]
   b5c9a:	4907      	ldr	r1, [pc, #28]	; (b5cb8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5c9c:	f7fe fa12 	bl	b40c4 <_ZN5Print6printfEPKcz>
  }
   b5ca0:	b002      	add	sp, #8
   b5ca2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5ca4:	4a05      	ldr	r2, [pc, #20]	; (b5cbc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5ca6:	e7ef      	b.n	b5c88 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5ca8:	000b941d 	.word	0x000b941d
   b5cac:	000b8c92 	.word	0x000b8c92
   b5cb0:	000b9419 	.word	0x000b9419
   b5cb4:	000b9415 	.word	0x000b9415
   b5cb8:	000b9433 	.word	0x000b9433
   b5cbc:	000b940c 	.word	0x000b940c

000b5cc0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	4b04      	ldr	r3, [pc, #16]	; (b5cd4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5cc4:	6003      	str	r3, [r0, #0]
   b5cc6:	4604      	mov	r4, r0
  if(buffer) {
   b5cc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5cca:	b108      	cbz	r0, b5cd0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5ccc:	f001 fbf4 	bl	b74b8 <free>
    buffer = NULL;
  }
}
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd10      	pop	{r4, pc}
   b5cd4:	000b9a4c 	.word	0x000b9a4c

000b5cd8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5cd8:	b510      	push	{r4, lr}
   b5cda:	4604      	mov	r4, r0
}
   b5cdc:	f7ff fff0 	bl	b5cc0 <_ZN16Adafruit_SSD1306D1Ev>
   b5ce0:	4620      	mov	r0, r4
   b5ce2:	2150      	movs	r1, #80	; 0x50
   b5ce4:	f7fe f9d7 	bl	b4096 <_ZdlPvj>
   b5ce8:	4620      	mov	r0, r4
   b5cea:	bd10      	pop	{r4, pc}

000b5cec <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5cec:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5cee:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5cf0:	db4b      	blt.n	b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5cf2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5cf6:	428c      	cmp	r4, r1
   b5cf8:	dd47      	ble.n	b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5cfa:	2a00      	cmp	r2, #0
   b5cfc:	db45      	blt.n	b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5cfe:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5d02:	4294      	cmp	r4, r2
   b5d04:	dd41      	ble.n	b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5d06:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5d08:	2c02      	cmp	r4, #2
   b5d0a:	d01f      	beq.n	b5d4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5d0c:	2c03      	cmp	r4, #3
   b5d0e:	d026      	beq.n	b5d5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5d10:	2c01      	cmp	r4, #1
   b5d12:	d104      	bne.n	b5d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5d14:	8904      	ldrh	r4, [r0, #8]
   b5d16:	43d2      	mvns	r2, r2
   b5d18:	4414      	add	r4, r2
      break;
   b5d1a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5d1c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5d1e:	2b01      	cmp	r3, #1
   b5d20:	d023      	beq.n	b5d6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5d22:	2b02      	cmp	r3, #2
   b5d24:	d032      	beq.n	b5d8c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5d26:	bb83      	cbnz	r3, b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5d28:	2a00      	cmp	r2, #0
   b5d2a:	4613      	mov	r3, r2
   b5d2c:	8904      	ldrh	r4, [r0, #8]
   b5d2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5d30:	bfb8      	it	lt
   b5d32:	1dd3      	addlt	r3, r2, #7
   b5d34:	10db      	asrs	r3, r3, #3
   b5d36:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5d3a:	f002 0207 	and.w	r2, r2, #7
   b5d3e:	2301      	movs	r3, #1
   b5d40:	4093      	lsls	r3, r2
   b5d42:	5c42      	ldrb	r2, [r0, r1]
   b5d44:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5d48:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5d4a:	e01e      	b.n	b5d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5d4c:	8904      	ldrh	r4, [r0, #8]
   b5d4e:	3c01      	subs	r4, #1
   b5d50:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5d52:	8944      	ldrh	r4, [r0, #10]
   b5d54:	43d2      	mvns	r2, r2
   b5d56:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5d58:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5d5a:	b212      	sxth	r2, r2
      break;
   b5d5c:	e7df      	b.n	b5d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5d5e:	8944      	ldrh	r4, [r0, #10]
   b5d60:	3c01      	subs	r4, #1
   b5d62:	1a64      	subs	r4, r4, r1
      break;
   b5d64:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5d66:	b222      	sxth	r2, r4
      break;
   b5d68:	e7d9      	b.n	b5d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5d6a:	2a00      	cmp	r2, #0
   b5d6c:	8904      	ldrh	r4, [r0, #8]
   b5d6e:	4613      	mov	r3, r2
   b5d70:	bfb8      	it	lt
   b5d72:	1dd3      	addlt	r3, r2, #7
   b5d74:	10db      	asrs	r3, r3, #3
   b5d76:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5d7c:	f002 0007 	and.w	r0, r2, #7
   b5d80:	2201      	movs	r2, #1
   b5d82:	4082      	lsls	r2, r0
   b5d84:	5c58      	ldrb	r0, [r3, r1]
   b5d86:	4302      	orrs	r2, r0
   b5d88:	545a      	strb	r2, [r3, r1]
}
   b5d8a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5d8c:	2a00      	cmp	r2, #0
   b5d8e:	4613      	mov	r3, r2
   b5d90:	8904      	ldrh	r4, [r0, #8]
   b5d92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5d94:	bfb8      	it	lt
   b5d96:	1dd3      	addlt	r3, r2, #7
   b5d98:	10db      	asrs	r3, r3, #3
   b5d9a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5d9e:	f002 0207 	and.w	r2, r2, #7
   b5da2:	2301      	movs	r3, #1
   b5da4:	fa03 f202 	lsl.w	r2, r3, r2
   b5da8:	5c43      	ldrb	r3, [r0, r1]
   b5daa:	405a      	eors	r2, r3
   b5dac:	e7cc      	b.n	b5d48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5db0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b5db0:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b5db2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b5db4:	4604      	mov	r4, r0
   b5db6:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b5db8:	2180      	movs	r1, #128	; 0x80
   b5dba:	f7ff fcef 	bl	b579c <_ZN12Adafruit_GFXC1Ess>
   b5dbe:	2500      	movs	r5, #0
   b5dc0:	4b0d      	ldr	r3, [pc, #52]	; (b5df8 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b5dc2:	6023      	str	r3, [r4, #0]
   b5dc4:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5dc6:	f002 fa85 	bl	b82d4 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b5dca:	23ff      	movs	r3, #255	; 0xff
   b5dcc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5dd0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b5dd4:	4b09      	ldr	r3, [pc, #36]	; (b5dfc <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b5dd6:	63a3      	str	r3, [r4, #56]	; 0x38
   b5dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5ddc:	2301      	movs	r3, #1
   b5dde:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b5de2:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5de4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b5de8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5dec:	6425      	str	r5, [r4, #64]	; 0x40
   b5dee:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b5df2:	4620      	mov	r0, r4
   b5df4:	bd70      	pop	{r4, r5, r6, pc}
   b5df6:	bf00      	nop
   b5df8:	000b9a4c 	.word	0x000b9a4c
   b5dfc:	000b9458 	.word	0x000b9458

000b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e02:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5e04:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5e06:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5e08:	b190      	cbz	r0, b5e30 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5e0a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5e0e:	f001 fc3b 	bl	b7688 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5e12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e14:	6803      	ldr	r3, [r0, #0]
   b5e16:	2100      	movs	r1, #0
   b5e18:	689b      	ldr	r3, [r3, #8]
   b5e1a:	4798      	blx	r3
    WIRE_WRITE(c);
   b5e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e1e:	6803      	ldr	r3, [r0, #0]
   b5e20:	4629      	mov	r1, r5
   b5e22:	689b      	ldr	r3, [r3, #8]
   b5e24:	4798      	blx	r3
    wire->endTransmission();
   b5e26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5e28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5e2c:	f001 bc33 	b.w	b7696 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5e30:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5e34:	4601      	mov	r1, r0
   b5e36:	b298      	uxth	r0, r3
   b5e38:	f002 f9ef 	bl	b821a <digitalWrite>
  if(spi) {
   b5e3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e3e:	b120      	cbz	r0, b5e4a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5e40:	4629      	mov	r1, r5
}
   b5e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5e46:	f001 bea5 	b.w	b7b94 <_ZN8SPIClass8transferEh>
   b5e4a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5e4c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5e4e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5e52:	ea05 0107 	and.w	r1, r5, r7
   b5e56:	b280      	uxth	r0, r0
   b5e58:	f002 f9df 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5e5c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e60:	2101      	movs	r1, #1
   b5e62:	b280      	uxth	r0, r0
   b5e64:	f002 f9d9 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5e68:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e6c:	2100      	movs	r1, #0
   b5e6e:	b280      	uxth	r0, r0
   b5e70:	f002 f9d3 	bl	b821a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5e74:	3e01      	subs	r6, #1
   b5e76:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5e7a:	d1e8      	bne.n	b5e4e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e7e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5e7e:	b538      	push	{r3, r4, r5, lr}
   b5e80:	4604      	mov	r4, r0
  TRANSACTION_START
   b5e82:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5e84:	460d      	mov	r5, r1
  TRANSACTION_START
   b5e86:	b180      	cbz	r0, b5eaa <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5e88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5e8a:	f001 fbef 	bl	b766c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5e8e:	2d00      	cmp	r5, #0
   b5e90:	4620      	mov	r0, r4
   b5e92:	bf14      	ite	ne
   b5e94:	21a7      	movne	r1, #167	; 0xa7
   b5e96:	21a6      	moveq	r1, #166	; 0xa6
   b5e98:	f7ff ffb2 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e9e:	b188      	cbz	r0, b5ec4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5ea0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5ea6:	f001 bbe1 	b.w	b766c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5eac:	b118      	cbz	r0, b5eb6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5eae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5eb2:	f001 fe01 	bl	b7ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5eb6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5eba:	2100      	movs	r1, #0
   b5ebc:	b280      	uxth	r0, r0
   b5ebe:	f002 f9ac 	bl	b821a <digitalWrite>
   b5ec2:	e7e4      	b.n	b5e8e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5ec4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5ec8:	2101      	movs	r1, #1
   b5eca:	b280      	uxth	r0, r0
   b5ecc:	f002 f9a5 	bl	b821a <digitalWrite>
   b5ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ed2:	b118      	cbz	r0, b5edc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5ed8:	f001 bdd4 	b.w	b7a84 <_ZN8SPIClass14endTransactionEv>
}
   b5edc:	bd38      	pop	{r3, r4, r5, pc}

000b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ee2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5ee4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5ee6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5ee8:	188f      	adds	r7, r1, r2
   b5eea:	b340      	cbz	r0, b5f3e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5eec:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5ef0:	f001 fbca 	bl	b7688 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ef6:	6803      	ldr	r3, [r0, #0]
   b5ef8:	2100      	movs	r1, #0
   b5efa:	689b      	ldr	r3, [r3, #8]
   b5efc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5efe:	2601      	movs	r6, #1
    while(n--) {
   b5f00:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5f02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5f04:	d017      	beq.n	b5f36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5f06:	2e1f      	cmp	r6, #31
   b5f08:	d90c      	bls.n	b5f24 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5f0a:	f001 fbc4 	bl	b7696 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5f0e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5f12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f14:	f001 fbb8 	bl	b7688 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5f18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f1a:	6803      	ldr	r3, [r0, #0]
   b5f1c:	2100      	movs	r1, #0
   b5f1e:	689b      	ldr	r3, [r3, #8]
   b5f20:	4798      	blx	r3
        bytesOut = 1;
   b5f22:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f26:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5f2a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5f2c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5f2e:	689b      	ldr	r3, [r3, #8]
   b5f30:	4798      	blx	r3
      bytesOut++;
   b5f32:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5f34:	e7e4      	b.n	b5f00 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5f36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5f3a:	f001 bbac 	b.w	b7696 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5f3e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5f42:	4601      	mov	r1, r0
   b5f44:	b298      	uxth	r0, r3
   b5f46:	f002 f968 	bl	b821a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5f4a:	42bd      	cmp	r5, r7
   b5f4c:	d022      	beq.n	b5f94 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5f50:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5f54:	b118      	cbz	r0, b5f5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5f56:	4649      	mov	r1, r9
   b5f58:	f001 fe1c 	bl	b7b94 <_ZN8SPIClass8transferEh>
   b5f5c:	e7f5      	b.n	b5f4a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5f5e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5f60:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5f64:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5f68:	ea09 0108 	and.w	r1, r9, r8
   b5f6c:	b280      	uxth	r0, r0
   b5f6e:	f002 f954 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5f72:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f76:	2101      	movs	r1, #1
   b5f78:	b280      	uxth	r0, r0
   b5f7a:	f002 f94e 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5f7e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f82:	2100      	movs	r1, #0
   b5f84:	b280      	uxth	r0, r0
   b5f86:	f002 f948 	bl	b821a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5f8a:	3e01      	subs	r6, #1
   b5f8c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5f90:	d1e8      	bne.n	b5f64 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5f92:	e7da      	b.n	b5f4a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5f98 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5f98:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5f9c:	1dda      	adds	r2, r3, #7
   b5f9e:	bf48      	it	mi
   b5fa0:	f103 020e 	addmi.w	r2, r3, #14
   b5fa4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5fa8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5faa:	10d2      	asrs	r2, r2, #3
   b5fac:	435a      	muls	r2, r3
   b5fae:	2100      	movs	r1, #0
   b5fb0:	f002 bbce 	b.w	b8750 <memset>

000b5fb4 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5fb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5fb8:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5fba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5fbc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5fc0:	4604      	mov	r4, r0
   b5fc2:	460f      	mov	r7, r1
   b5fc4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5fc6:	b1d3      	cbz	r3, b5ffe <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b5fc8:	4620      	mov	r0, r4
   b5fca:	f7ff ffe5 	bl	b5f98 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5fce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b5fd2:	2a20      	cmp	r2, #32
   b5fd4:	dc25      	bgt.n	b6022 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5fd6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5fda:	2320      	movs	r3, #32
   b5fdc:	3a20      	subs	r2, #32
   b5fde:	3973      	subs	r1, #115	; 0x73
   b5fe0:	2001      	movs	r0, #1
   b5fe2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5fe6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b5fea:	2373      	movs	r3, #115	; 0x73
   b5fec:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5ff0:	9300      	str	r3, [sp, #0]
   b5ff2:	f342 024f 	sbfx	r2, r2, #1, #16
   b5ff6:	4b85      	ldr	r3, [pc, #532]	; (b620c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b5ff8:	f341 014f 	sbfx	r1, r1, #1, #16
   b5ffc:	e01b      	b.n	b6036 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5ffe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6002:	1dd8      	adds	r0, r3, #7
   b6004:	bf48      	it	mi
   b6006:	f103 000e 	addmi.w	r0, r3, #14
   b600a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b600e:	10c0      	asrs	r0, r0, #3
   b6010:	4358      	muls	r0, r3
   b6012:	f001 fa49 	bl	b74a8 <malloc>
   b6016:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6018:	2800      	cmp	r0, #0
   b601a:	d1d5      	bne.n	b5fc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b601c:	b004      	add	sp, #16
   b601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b6022:	2340      	movs	r3, #64	; 0x40
   b6024:	f04f 0c01 	mov.w	ip, #1
   b6028:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b602c:	2380      	movs	r3, #128	; 0x80
   b602e:	9300      	str	r3, [sp, #0]
   b6030:	2200      	movs	r2, #0
   b6032:	4b77      	ldr	r3, [pc, #476]	; (b6210 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b6034:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6036:	4620      	mov	r0, r4
   b6038:	f7ff fbc6 	bl	b57c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b603c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b603e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6042:	2800      	cmp	r0, #0
   b6044:	d078      	beq.n	b6138 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6046:	2d00      	cmp	r5, #0
   b6048:	d174      	bne.n	b6134 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b604a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b604e:	2b20      	cmp	r3, #32
   b6050:	bf0c      	ite	eq
   b6052:	253c      	moveq	r5, #60	; 0x3c
   b6054:	253d      	movne	r5, #61	; 0x3d
   b6056:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b605a:	f1b8 0f00 	cmp.w	r8, #0
   b605e:	d001      	beq.n	b6064 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6060:	f001 fb08 	bl	b7674 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6064:	b1fe      	cbz	r6, b60a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b6066:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b606a:	2800      	cmp	r0, #0
   b606c:	db1b      	blt.n	b60a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b606e:	2101      	movs	r1, #1
   b6070:	b280      	uxth	r0, r0
   b6072:	f002 f8c1 	bl	b81f8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b6076:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b607a:	2101      	movs	r1, #1
   b607c:	b280      	uxth	r0, r0
   b607e:	f002 f8cc 	bl	b821a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6082:	2001      	movs	r0, #1
   b6084:	f001 fa50 	bl	b7528 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6088:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b608c:	2100      	movs	r1, #0
   b608e:	b280      	uxth	r0, r0
   b6090:	f002 f8c3 	bl	b821a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6094:	200a      	movs	r0, #10
   b6096:	f001 fa47 	bl	b7528 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b609a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b609e:	2101      	movs	r1, #1
   b60a0:	b280      	uxth	r0, r0
   b60a2:	f002 f8ba 	bl	b821a <digitalWrite>
  TRANSACTION_START
   b60a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b60a8:	2800      	cmp	r0, #0
   b60aa:	d074      	beq.n	b6196 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b60ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b60ae:	f001 fadd 	bl	b766c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b60b2:	2204      	movs	r2, #4
   b60b4:	4957      	ldr	r1, [pc, #348]	; (b6214 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b60b6:	4620      	mov	r0, r4
   b60b8:	f7ff ff11 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b60bc:	8961      	ldrh	r1, [r4, #10]
   b60be:	3901      	subs	r1, #1
   b60c0:	b2c9      	uxtb	r1, r1
   b60c2:	4620      	mov	r0, r4
   b60c4:	f7ff fe9c 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b60c8:	4953      	ldr	r1, [pc, #332]	; (b6218 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b60ca:	2204      	movs	r2, #4
   b60cc:	4620      	mov	r0, r4
   b60ce:	f7ff ff06 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b60d2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b60d6:	2b01      	cmp	r3, #1
   b60d8:	bf0c      	ite	eq
   b60da:	2110      	moveq	r1, #16
   b60dc:	2114      	movne	r1, #20
   b60de:	4620      	mov	r0, r4
   b60e0:	f7ff fe8e 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b60e4:	2204      	movs	r2, #4
   b60e6:	494d      	ldr	r1, [pc, #308]	; (b621c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b60e8:	4620      	mov	r0, r4
   b60ea:	f7ff fef8 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b60ee:	68a3      	ldr	r3, [r4, #8]
   b60f0:	4a4b      	ldr	r2, [pc, #300]	; (b6220 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b60f2:	4293      	cmp	r3, r2
   b60f4:	d15c      	bne.n	b61b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b60f6:	494b      	ldr	r1, [pc, #300]	; (b6224 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b60f8:	2204      	movs	r2, #4
   b60fa:	4620      	mov	r0, r4
   b60fc:	f7ff feef 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6100:	21d9      	movs	r1, #217	; 0xd9
   b6102:	4620      	mov	r0, r4
   b6104:	f7ff fe7c 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6108:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b610c:	2b01      	cmp	r3, #1
   b610e:	bf0c      	ite	eq
   b6110:	2122      	moveq	r1, #34	; 0x22
   b6112:	21f1      	movne	r1, #241	; 0xf1
   b6114:	4620      	mov	r0, r4
   b6116:	f7ff fe73 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b611a:	4620      	mov	r0, r4
   b611c:	4942      	ldr	r1, [pc, #264]	; (b6228 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b611e:	2206      	movs	r2, #6
   b6120:	f7ff fedd 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6124:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6126:	2800      	cmp	r0, #0
   b6128:	d063      	beq.n	b61f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b612a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b612c:	f001 fa9e 	bl	b766c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6130:	2001      	movs	r0, #1
   b6132:	e773      	b.n	b601c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6134:	b26d      	sxtb	r5, r5
   b6136:	e78e      	b.n	b6056 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6138:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b613c:	2101      	movs	r1, #1
   b613e:	b280      	uxth	r0, r0
   b6140:	f002 f85a 	bl	b81f8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6144:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6148:	2101      	movs	r1, #1
   b614a:	b280      	uxth	r0, r0
   b614c:	f002 f854 	bl	b81f8 <pinMode>
    SSD1306_DESELECT
   b6150:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6154:	2101      	movs	r1, #1
   b6156:	b280      	uxth	r0, r0
   b6158:	f002 f85f 	bl	b821a <digitalWrite>
    if(spi) { // Hardware SPI
   b615c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b615e:	b13d      	cbz	r5, b6170 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b6160:	f1b8 0f00 	cmp.w	r8, #0
   b6164:	f43f af7e 	beq.w	b6064 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6168:	4628      	mov	r0, r5
   b616a:	f001 fc77 	bl	b7a5c <_ZN8SPIClass5beginEv>
   b616e:	e779      	b.n	b6064 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6170:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6174:	2101      	movs	r1, #1
   b6176:	b280      	uxth	r0, r0
   b6178:	f002 f83e 	bl	b81f8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b617c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6180:	2101      	movs	r1, #1
   b6182:	b280      	uxth	r0, r0
   b6184:	f002 f838 	bl	b81f8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6188:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b618c:	4629      	mov	r1, r5
   b618e:	b280      	uxth	r0, r0
   b6190:	f002 f843 	bl	b821a <digitalWrite>
   b6194:	e766      	b.n	b6064 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b6196:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6198:	b118      	cbz	r0, b61a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b619a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b619e:	f001 fc8b 	bl	b7ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b61a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61a6:	2100      	movs	r1, #0
   b61a8:	b280      	uxth	r0, r0
   b61aa:	f002 f836 	bl	b821a <digitalWrite>
   b61ae:	e780      	b.n	b60b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b61b0:	4a1e      	ldr	r2, [pc, #120]	; (b622c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b61b2:	4293      	cmp	r3, r2
   b61b4:	d10e      	bne.n	b61d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b61b6:	491e      	ldr	r1, [pc, #120]	; (b6230 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b61b8:	2203      	movs	r2, #3
   b61ba:	4620      	mov	r0, r4
   b61bc:	f7ff fe8f 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b61c0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b61c4:	2b01      	cmp	r3, #1
   b61c6:	bf0c      	ite	eq
   b61c8:	219f      	moveq	r1, #159	; 0x9f
   b61ca:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b61cc:	4620      	mov	r0, r4
   b61ce:	f7ff fe17 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b61d2:	e795      	b.n	b6100 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b61d4:	4a17      	ldr	r2, [pc, #92]	; (b6234 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b61d6:	4293      	cmp	r3, r2
   b61d8:	d192      	bne.n	b6100 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b61da:	4917      	ldr	r1, [pc, #92]	; (b6238 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b61dc:	2203      	movs	r2, #3
   b61de:	4620      	mov	r0, r4
   b61e0:	f7ff fe7d 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b61e4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b61e8:	2b01      	cmp	r3, #1
   b61ea:	bf0c      	ite	eq
   b61ec:	2110      	moveq	r1, #16
   b61ee:	21af      	movne	r1, #175	; 0xaf
   b61f0:	e7ec      	b.n	b61cc <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b61f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61f6:	2101      	movs	r1, #1
   b61f8:	b280      	uxth	r0, r0
   b61fa:	f002 f80e 	bl	b821a <digitalWrite>
   b61fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6200:	2800      	cmp	r0, #0
   b6202:	d095      	beq.n	b6130 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b6204:	f001 fc3e 	bl	b7a84 <_ZN8SPIClass14endTransactionEv>
   b6208:	e792      	b.n	b6130 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b620a:	bf00      	nop
   b620c:	000b9464 	.word	0x000b9464
   b6210:	000b9644 	.word	0x000b9644
   b6214:	000b9aac 	.word	0x000b9aac
   b6218:	000b9ab0 	.word	0x000b9ab0
   b621c:	000b9ab4 	.word	0x000b9ab4
   b6220:	00200080 	.word	0x00200080
   b6224:	000b9abe 	.word	0x000b9abe
   b6228:	000b9ab8 	.word	0x000b9ab8
   b622c:	00400080 	.word	0x00400080
   b6230:	000b9ac2 	.word	0x000b9ac2
   b6234:	00100060 	.word	0x00100060
   b6238:	000b9ac5 	.word	0x000b9ac5

000b623c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b623c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b623e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6240:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6244:	db3d      	blt.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6246:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b624a:	4294      	cmp	r4, r2
   b624c:	dd39      	ble.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b624e:	2900      	cmp	r1, #0
      w += x;
   b6250:	bfbe      	ittt	lt
   b6252:	185b      	addlt	r3, r3, r1
   b6254:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6256:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6258:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b625c:	18ce      	adds	r6, r1, r3
   b625e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6260:	bfc4      	itt	gt
   b6262:	1a63      	subgt	r3, r4, r1
   b6264:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6266:	2b00      	cmp	r3, #0
   b6268:	dd2b      	ble.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b626a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b626c:	10d6      	asrs	r6, r2, #3
   b626e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6272:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6274:	f002 0007 	and.w	r0, r2, #7
   b6278:	2201      	movs	r2, #1
   b627a:	4082      	lsls	r2, r0
      switch(color) {
   b627c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b627e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6280:	d016      	beq.n	b62b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6282:	2d02      	cmp	r5, #2
   b6284:	d00b      	beq.n	b629e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6286:	b9e5      	cbnz	r5, b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6288:	43d2      	mvns	r2, r2
   b628a:	b2d2      	uxtb	r2, r2
   b628c:	440b      	add	r3, r1
   b628e:	4299      	cmp	r1, r3
   b6290:	d017      	beq.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6292:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6296:	4010      	ands	r0, r2
   b6298:	f801 0c01 	strb.w	r0, [r1, #-1]
   b629c:	e7f7      	b.n	b628e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b629e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b62a0:	4299      	cmp	r1, r3
   b62a2:	d00e      	beq.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b62a4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b62a8:	4050      	eors	r0, r2
   b62aa:	f801 0c01 	strb.w	r0, [r1, #-1]
   b62ae:	e7f7      	b.n	b62a0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b62b0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b62b2:	4299      	cmp	r1, r3
   b62b4:	d005      	beq.n	b62c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b62b6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b62ba:	4310      	orrs	r0, r2
   b62bc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b62c0:	e7f7      	b.n	b62b2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b62c2:	bd70      	pop	{r4, r5, r6, pc}

000b62c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b62c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b62c6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b62c8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b62cc:	db76      	blt.n	b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b62ce:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b62d2:	42b1      	cmp	r1, r6
   b62d4:	da72      	bge.n	b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b62d6:	2a00      	cmp	r2, #0
      __h += __y;
   b62d8:	bfbe      	ittt	lt
   b62da:	189b      	addlt	r3, r3, r2
   b62dc:	b21b      	sxthlt	r3, r3
      __y = 0;
   b62de:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b62e0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b62e4:	18d7      	adds	r7, r2, r3
   b62e6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b62e8:	bfc4      	itt	gt
   b62ea:	1aa3      	subgt	r3, r4, r2
   b62ec:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b62ee:	2b00      	cmp	r3, #0
   b62f0:	dd64      	ble.n	b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b62f2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b62f6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b62f8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b62fc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6300:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6302:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6306:	d023      	beq.n	b6350 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6308:	f1c2 0208 	rsb	r2, r2, #8
   b630c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b630e:	492d      	ldr	r1, [pc, #180]	; (b63c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6310:	4293      	cmp	r3, r2
   b6312:	bf3c      	itt	cc
   b6314:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6318:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b631c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b631e:	bf3c      	itt	cc
   b6320:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6324:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6328:	2d01      	cmp	r5, #1
   b632a:	d007      	beq.n	b633c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b632c:	2d02      	cmp	r5, #2
   b632e:	d02e      	beq.n	b638e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6330:	b94d      	cbnz	r5, b6346 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6332:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6336:	ea2c 0101 	bic.w	r1, ip, r1
   b633a:	e003      	b.n	b6344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b633c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6340:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6344:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6346:	4293      	cmp	r3, r2
   b6348:	d338      	bcc.n	b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b634a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b634e:	440c      	add	r4, r1
        h -= mod;
   b6350:	1a9a      	subs	r2, r3, r2
   b6352:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6354:	2a07      	cmp	r2, #7
   b6356:	d90e      	bls.n	b6376 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6358:	2d02      	cmp	r5, #2
   b635a:	d11d      	bne.n	b6398 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b635c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b635e:	7821      	ldrb	r1, [r4, #0]
   b6360:	43c9      	mvns	r1, r1
   b6362:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6364:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6366:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b636a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b636c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b636e:	440c      	add	r4, r1
            } while(h >= 8);
   b6370:	d8f5      	bhi.n	b635e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6372:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6376:	b30a      	cbz	r2, b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6378:	4b13      	ldr	r3, [pc, #76]	; (b63c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b637a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b637c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b637e:	d01a      	beq.n	b63b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6380:	2d02      	cmp	r5, #2
   b6382:	d01c      	beq.n	b63be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6384:	b9d5      	cbnz	r5, b63bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6386:	7822      	ldrb	r2, [r4, #0]
   b6388:	ea22 0303 	bic.w	r3, r2, r3
   b638c:	e015      	b.n	b63ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b638e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6392:	ea81 010c 	eor.w	r1, r1, ip
   b6396:	e7d5      	b.n	b6344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6398:	1e29      	subs	r1, r5, #0
   b639a:	bf18      	it	ne
   b639c:	2101      	movne	r1, #1
   b639e:	4249      	negs	r1, r1
   b63a0:	b2c9      	uxtb	r1, r1
   b63a2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b63a4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b63a6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b63a8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b63ac:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b63ae:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b63b0:	4434      	add	r4, r6
            } while(h >= 8);
   b63b2:	d8f7      	bhi.n	b63a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b63b4:	e7dd      	b.n	b6372 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b63b6:	7822      	ldrb	r2, [r4, #0]
   b63b8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b63ba:	7023      	strb	r3, [r4, #0]
}
   b63bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b63be:	7822      	ldrb	r2, [r4, #0]
   b63c0:	4053      	eors	r3, r2
   b63c2:	e7fa      	b.n	b63ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b63c4:	000b9a9c 	.word	0x000b9a9c
   b63c8:	000b9aa4 	.word	0x000b9aa4

000b63cc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b63cc:	b470      	push	{r4, r5, r6}
   b63ce:	4614      	mov	r4, r2
  switch(rotation) {
   b63d0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b63d2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b63d6:	2a02      	cmp	r2, #2
   b63d8:	d00d      	beq.n	b63f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b63da:	2a03      	cmp	r2, #3
   b63dc:	d018      	beq.n	b6410 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b63de:	2a01      	cmp	r2, #1
   b63e0:	d111      	bne.n	b6406 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b63e2:	8902      	ldrh	r2, [r0, #8]
   b63e4:	43e4      	mvns	r4, r4
   b63e6:	4414      	add	r4, r2
   b63e8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b63ea:	9603      	str	r6, [sp, #12]
   b63ec:	460a      	mov	r2, r1
   b63ee:	4621      	mov	r1, r4
}
   b63f0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b63f2:	f7ff bf67 	b.w	b62c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b63f6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b63f8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b63fa:	43e4      	mvns	r4, r4
    x -= (w-1);
   b63fc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b63fe:	4414      	add	r4, r2
    x -= (w-1);
   b6400:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6402:	b224      	sxth	r4, r4
    x -= (w-1);
   b6404:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6406:	9603      	str	r6, [sp, #12]
   b6408:	4622      	mov	r2, r4
}
   b640a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b640c:	f7ff bf16 	b.w	b623c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6410:	8945      	ldrh	r5, [r0, #10]
   b6412:	4419      	add	r1, r3
   b6414:	1a69      	subs	r1, r5, r1
   b6416:	b209      	sxth	r1, r1
    break;
   b6418:	e7e7      	b.n	b63ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b641a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b641a:	b430      	push	{r4, r5}
   b641c:	4614      	mov	r4, r2
  switch(rotation) {
   b641e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6420:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6424:	2a02      	cmp	r2, #2
   b6426:	d00d      	beq.n	b6444 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6428:	2a03      	cmp	r2, #3
   b642a:	d018      	beq.n	b645e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b642c:	2a01      	cmp	r2, #1
   b642e:	d111      	bne.n	b6454 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6430:	18e2      	adds	r2, r4, r3
   b6432:	8904      	ldrh	r4, [r0, #8]
   b6434:	1aa4      	subs	r4, r4, r2
   b6436:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6438:	9502      	str	r5, [sp, #8]
   b643a:	460a      	mov	r2, r1
   b643c:	4621      	mov	r1, r4
}
   b643e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6440:	f7ff befc 	b.w	b623c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6444:	8902      	ldrh	r2, [r0, #8]
   b6446:	43c9      	mvns	r1, r1
   b6448:	4411      	add	r1, r2
    y -= (h-1);
   b644a:	18e2      	adds	r2, r4, r3
   b644c:	8944      	ldrh	r4, [r0, #10]
   b644e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6450:	b209      	sxth	r1, r1
    y -= (h-1);
   b6452:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6454:	9502      	str	r5, [sp, #8]
   b6456:	4622      	mov	r2, r4
}
   b6458:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b645a:	f7ff bf33 	b.w	b62c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b645e:	8942      	ldrh	r2, [r0, #10]
   b6460:	43c9      	mvns	r1, r1
   b6462:	4411      	add	r1, r2
   b6464:	b209      	sxth	r1, r1
    break;
   b6466:	e7e7      	b.n	b6438 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6468 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b646c:	4604      	mov	r4, r0
  TRANSACTION_START
   b646e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6470:	2800      	cmp	r0, #0
   b6472:	d042      	beq.n	b64fa <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6476:	f001 f8f9 	bl	b766c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b647a:	4947      	ldr	r1, [pc, #284]	; (b6598 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b647c:	2205      	movs	r2, #5
   b647e:	4620      	mov	r0, r4
   b6480:	f7ff fd2d 	bl	b5ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6484:	8921      	ldrh	r1, [r4, #8]
   b6486:	3901      	subs	r1, #1
   b6488:	4620      	mov	r0, r4
   b648a:	b2c9      	uxtb	r1, r1
   b648c:	f7ff fcb8 	bl	b5e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6490:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6494:	1dde      	adds	r6, r3, #7
   b6496:	bf48      	it	mi
   b6498:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b649c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b64a0:	8923      	ldrh	r3, [r4, #8]
   b64a2:	10f6      	asrs	r6, r6, #3
   b64a4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b64a8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b64ac:	2800      	cmp	r0, #0
   b64ae:	d03a      	beq.n	b6526 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b64b0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b64b4:	f001 f8e8 	bl	b7688 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b64b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64ba:	6803      	ldr	r3, [r0, #0]
   b64bc:	2140      	movs	r1, #64	; 0x40
   b64be:	689b      	ldr	r3, [r3, #8]
   b64c0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b64c2:	2701      	movs	r7, #1
    while(count--) {
   b64c4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b64c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b64c8:	d024      	beq.n	b6514 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b64ca:	2f1f      	cmp	r7, #31
   b64cc:	d90c      	bls.n	b64e8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b64ce:	f001 f8e2 	bl	b7696 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b64d2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b64d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64d8:	f001 f8d6 	bl	b7688 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b64dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64de:	6803      	ldr	r3, [r0, #0]
   b64e0:	2140      	movs	r1, #64	; 0x40
   b64e2:	689b      	ldr	r3, [r3, #8]
   b64e4:	4798      	blx	r3
        bytesOut = 1;
   b64e6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b64e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64ea:	f815 1b01 	ldrb.w	r1, [r5], #1
   b64ee:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b64f0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b64f2:	689b      	ldr	r3, [r3, #8]
   b64f4:	4798      	blx	r3
      bytesOut++;
   b64f6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b64f8:	e7e4      	b.n	b64c4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b64fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b64fc:	b118      	cbz	r0, b6506 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b64fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6502:	f001 fad9 	bl	b7ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6506:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b650a:	2100      	movs	r1, #0
   b650c:	b280      	uxth	r0, r0
   b650e:	f001 fe84 	bl	b821a <digitalWrite>
   b6512:	e7b2      	b.n	b647a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6514:	f001 f8bf 	bl	b7696 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6518:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b651a:	b378      	cbz	r0, b657c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b651c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b651e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6522:	f001 b8a3 	b.w	b766c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6526:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b652a:	2101      	movs	r1, #1
   b652c:	b280      	uxth	r0, r0
   b652e:	f001 fe74 	bl	b821a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6532:	42ae      	cmp	r6, r5
   b6534:	d0f0      	beq.n	b6518 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6536:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6538:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b653c:	b118      	cbz	r0, b6546 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b653e:	4649      	mov	r1, r9
   b6540:	f001 fb28 	bl	b7b94 <_ZN8SPIClass8transferEh>
   b6544:	e7f5      	b.n	b6532 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6546:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6548:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b654c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6550:	ea09 0108 	and.w	r1, r9, r8
   b6554:	b280      	uxth	r0, r0
   b6556:	f001 fe60 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b655a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b655e:	2101      	movs	r1, #1
   b6560:	b280      	uxth	r0, r0
   b6562:	f001 fe5a 	bl	b821a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6566:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b656a:	2100      	movs	r1, #0
   b656c:	b280      	uxth	r0, r0
   b656e:	f001 fe54 	bl	b821a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6572:	3f01      	subs	r7, #1
   b6574:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6578:	d1e8      	bne.n	b654c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b657a:	e7da      	b.n	b6532 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b657c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6580:	2101      	movs	r1, #1
   b6582:	b280      	uxth	r0, r0
   b6584:	f001 fe49 	bl	b821a <digitalWrite>
   b6588:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b658a:	b118      	cbz	r0, b6594 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b658c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6590:	f001 ba78 	b.w	b7a84 <_ZN8SPIClass14endTransactionEv>
}
   b6594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6598:	000b9ac8 	.word	0x000b9ac8

000b659c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b659c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b659e:	4c0b      	ldr	r4, [pc, #44]	; (b65cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b65a0:	7821      	ldrb	r1, [r4, #0]
   b65a2:	f3bf 8f5b 	dmb	ish
   b65a6:	f011 0101 	ands.w	r1, r1, #1
   b65aa:	d10b      	bne.n	b65c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b65ac:	4620      	mov	r0, r4
   b65ae:	9101      	str	r1, [sp, #4]
   b65b0:	f7fd fd80 	bl	b40b4 <__cxa_guard_acquire>
   b65b4:	9901      	ldr	r1, [sp, #4]
   b65b6:	b128      	cbz	r0, b65c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b65b8:	4805      	ldr	r0, [pc, #20]	; (b65d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b65ba:	f001 fa45 	bl	b7a48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b65be:	4620      	mov	r0, r4
   b65c0:	f7fd fd7d 	bl	b40be <__cxa_guard_release>
    }
   b65c4:	4802      	ldr	r0, [pc, #8]	; (b65d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b65c6:	b002      	add	sp, #8
   b65c8:	bd10      	pop	{r4, pc}
   b65ca:	bf00      	nop
   b65cc:	2003dfe8 	.word	0x2003dfe8
   b65d0:	2003dfec 	.word	0x2003dfec

000b65d4 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b65d4:	6001      	str	r1, [r0, #0]
}
   b65d6:	4770      	bx	lr

000b65d8 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b65d8:	b510      	push	{r4, lr}
   b65da:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b65dc:	2101      	movs	r1, #1
   b65de:	8800      	ldrh	r0, [r0, #0]
   b65e0:	f001 fe0a 	bl	b81f8 <pinMode>
	digitalWrite(_pin, LOW);
   b65e4:	8820      	ldrh	r0, [r4, #0]
   b65e6:	2100      	movs	r1, #0
   b65e8:	f001 fe17 	bl	b821a <digitalWrite>
   b65ec:	2002      	movs	r0, #2
   b65ee:	f000 fd3f 	bl	b7070 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b65f2:	8820      	ldrh	r0, [r4, #0]
   b65f4:	2101      	movs	r1, #1
   b65f6:	f001 fe10 	bl	b821a <digitalWrite>
   b65fa:	2005      	movs	r0, #5
   b65fc:	f000 fd38 	bl	b7070 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b6600:	8820      	ldrh	r0, [r4, #0]
   b6602:	2100      	movs	r1, #0
   b6604:	f001 fe09 	bl	b821a <digitalWrite>
	pinMode(_pin,INPUT);
   b6608:	8820      	ldrh	r0, [r4, #0]
   b660a:	2100      	movs	r1, #0
   b660c:	f001 fdf4 	bl	b81f8 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b6610:	8820      	ldrh	r0, [r4, #0]
   b6612:	2101      	movs	r1, #1
   b6614:	f001 fe44 	bl	b82a0 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b6618:	233a      	movs	r3, #58	; 0x3a
   b661a:	fb90 f0f3 	sdiv	r0, r0, r3
   b661e:	bd10      	pop	{r4, pc}

000b6620 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b6620:	b510      	push	{r4, lr}
   b6622:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b6624:	7001      	strb	r1, [r0, #0]
   b6626:	7042      	strb	r2, [r0, #1]
   b6628:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b662a:	2101      	movs	r1, #1
   b662c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b6630:	f002 f878 	bl	b8724 <calloc>
   b6634:	6060      	str	r0, [r4, #4]
}
   b6636:	4620      	mov	r0, r4
   b6638:	bd10      	pop	{r4, pc}

000b663a <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b663a:	b510      	push	{r4, lr}
   b663c:	4604      	mov	r4, r0
{
    free(_led_state);
   b663e:	6840      	ldr	r0, [r0, #4]
   b6640:	f000 ff3a 	bl	b74b8 <free>
}
   b6644:	4620      	mov	r0, r4
   b6646:	bd10      	pop	{r4, pc}

000b6648 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b6648:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b664a:	2100      	movs	r1, #0
{
   b664c:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b664e:	7800      	ldrb	r0, [r0, #0]
   b6650:	f001 fde3 	bl	b821a <digitalWrite>
   b6654:	2014      	movs	r0, #20
   b6656:	f000 fd0b 	bl	b7070 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b665a:	7820      	ldrb	r0, [r4, #0]
   b665c:	2101      	movs	r1, #1
   b665e:	f001 fddc 	bl	b821a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b6662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6666:	2014      	movs	r0, #20
   b6668:	f000 bd02 	b.w	b7070 <HAL_Delay_Microseconds>

000b666c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b666c:	b570      	push	{r4, r5, r6, lr}
   b666e:	4606      	mov	r6, r0
   b6670:	460c      	mov	r4, r1
   b6672:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b6674:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b6676:	bf4c      	ite	mi
   b6678:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b667a:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b667c:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b667e:	f001 fdcc 	bl	b821a <digitalWrite>
    for (byte i=0; i<8; i++)
   b6682:	3d01      	subs	r5, #1
        clk();
   b6684:	4630      	mov	r0, r6
   b6686:	f7ff ffdf 	bl	b6648 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b668a:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b668c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b6690:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b6692:	d1ef      	bne.n	b6674 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b6694:	bd70      	pop	{r4, r5, r6, pc}

000b6696 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b6696:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b6698:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b669c:	461e      	mov	r6, r3
   b669e:	460c      	mov	r4, r1
   b66a0:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b66a2:	bf14      	ite	ne
   b66a4:	21c0      	movne	r1, #192	; 0xc0
   b66a6:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b66a8:	0673      	lsls	r3, r6, #25
   b66aa:	bf58      	it	pl
   b66ac:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b66b0:	062a      	lsls	r2, r5, #24
   b66b2:	bf58      	it	pl
   b66b4:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b66b8:	066b      	lsls	r3, r5, #25
   b66ba:	bf58      	it	pl
   b66bc:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b66c0:	0622      	lsls	r2, r4, #24
   b66c2:	bf58      	it	pl
   b66c4:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b66c8:	0663      	lsls	r3, r4, #25
   b66ca:	bf58      	it	pl
   b66cc:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b66d0:	9001      	str	r0, [sp, #4]
   b66d2:	f7ff ffcb 	bl	b666c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b66d6:	9801      	ldr	r0, [sp, #4]
   b66d8:	4631      	mov	r1, r6
   b66da:	f7ff ffc7 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b66de:	9801      	ldr	r0, [sp, #4]
   b66e0:	4629      	mov	r1, r5
   b66e2:	f7ff ffc3 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b66e6:	9801      	ldr	r0, [sp, #4]
   b66e8:	4621      	mov	r1, r4
}
   b66ea:	b002      	add	sp, #8
   b66ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b66f0:	f7ff bfbc 	b.w	b666c <_ZN12ChainableLED8sendByteEh>

000b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b66f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b66f8:	4604      	mov	r4, r0
   b66fa:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b66fc:	2100      	movs	r1, #0
{
   b66fe:	4690      	mov	r8, r2
   b6700:	4699      	mov	r9, r3
   b6702:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b6706:	f7ff ffb1 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b670a:	2100      	movs	r1, #0
   b670c:	4620      	mov	r0, r4
   b670e:	f7ff ffad 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6712:	2100      	movs	r1, #0
   b6714:	4620      	mov	r0, r4
   b6716:	f7ff ffa9 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b671a:	2100      	movs	r1, #0
   b671c:	4620      	mov	r0, r4
   b671e:	f7ff ffa5 	bl	b666c <_ZN12ChainableLED8sendByteEh>
   b6722:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b6724:	78a3      	ldrb	r3, [r4, #2]
   b6726:	b2f5      	uxtb	r5, r6
   b6728:	42ab      	cmp	r3, r5
   b672a:	d919      	bls.n	b6760 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b672c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b6730:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b6732:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b6736:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b673a:	d108      	bne.n	b674e <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b673c:	6861      	ldr	r1, [r4, #4]
   b673e:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b6742:	6861      	ldr	r1, [r4, #4]
   b6744:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b6748:	6861      	ldr	r1, [r4, #4]
   b674a:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b674e:	6861      	ldr	r1, [r4, #4]
   b6750:	5ccb      	ldrb	r3, [r1, r3]
   b6752:	5c8a      	ldrb	r2, [r1, r2]
   b6754:	5c09      	ldrb	r1, [r1, r0]
   b6756:	4620      	mov	r0, r4
   b6758:	f7ff ff9d 	bl	b6696 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b675c:	3601      	adds	r6, #1
   b675e:	e7e1      	b.n	b6724 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b6760:	4620      	mov	r0, r4
   b6762:	2100      	movs	r1, #0
   b6764:	f7ff ff82 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6768:	4620      	mov	r0, r4
   b676a:	2100      	movs	r1, #0
   b676c:	f7ff ff7e 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6770:	4620      	mov	r0, r4
   b6772:	2100      	movs	r1, #0
   b6774:	f7ff ff7a 	bl	b666c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6778:	4620      	mov	r0, r4
   b677a:	2100      	movs	r1, #0
}
   b677c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b6780:	f7ff bf74 	b.w	b666c <_ZN12ChainableLED8sendByteEh>

000b6784 <_ZN12ChainableLED4initEv>:
{
   b6784:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6786:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b6788:	2101      	movs	r1, #1
   b678a:	7800      	ldrb	r0, [r0, #0]
   b678c:	f001 fd34 	bl	b81f8 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b6790:	7860      	ldrb	r0, [r4, #1]
   b6792:	2101      	movs	r1, #1
   b6794:	f001 fd30 	bl	b81f8 <pinMode>
   b6798:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b679a:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b679c:	78a3      	ldrb	r3, [r4, #2]
   b679e:	b2e9      	uxtb	r1, r5
   b67a0:	428b      	cmp	r3, r1
   b67a2:	d907      	bls.n	b67b4 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b67a4:	2300      	movs	r3, #0
   b67a6:	9600      	str	r6, [sp, #0]
   b67a8:	461a      	mov	r2, r3
   b67aa:	4620      	mov	r0, r4
   b67ac:	f7ff ffa2 	bl	b66f4 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b67b0:	3501      	adds	r5, #1
   b67b2:	e7f3      	b.n	b679c <_ZN12ChainableLED4initEv+0x18>
}
   b67b4:	b002      	add	sp, #8
   b67b6:	bd70      	pop	{r4, r5, r6, pc}

000b67b8 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b67b8:	b538      	push	{r3, r4, r5, lr}
   b67ba:	4604      	mov	r4, r0
   b67bc:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b67be:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b67c0:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b67c2:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b67c4:	f001 fd18 	bl	b81f8 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b67c8:	7b20      	ldrb	r0, [r4, #12]
   b67ca:	2101      	movs	r1, #1
   b67cc:	f001 fd25 	bl	b821a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b67d0:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b67d2:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b67d4:	2101      	movs	r1, #1
   b67d6:	f001 fd0f 	bl	b81f8 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b67da:	7b60      	ldrb	r0, [r4, #13]
   b67dc:	2100      	movs	r1, #0
   b67de:	f001 fd1c 	bl	b821a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b67e2:	4620      	mov	r0, r4
   b67e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b67e8 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b67e8:	3901      	subs	r1, #1
   b67ea:	b2c9      	uxtb	r1, r1
   b67ec:	2908      	cmp	r1, #8
   b67ee:	bf9a      	itte	ls
   b67f0:	4b02      	ldrls	r3, [pc, #8]	; (b67fc <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b67f2:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b67f6:	4802      	ldrhi	r0, [pc, #8]	; (b6800 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b67f8:	4770      	bx	lr
   b67fa:	bf00      	nop
   b67fc:	000b9bc4 	.word	0x000b9bc4
   b6800:	000b9acd 	.word	0x000b9acd

000b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b6804:	b507      	push	{r0, r1, r2, lr}
   b6806:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b6808:	f7ff fec8 	bl	b659c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b680c:	9901      	ldr	r1, [sp, #4]
    }
   b680e:	b003      	add	sp, #12
   b6810:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b6814:	f001 b9be 	b.w	b7b94 <_ZN8SPIClass8transferEh>

000b6818 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b6818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b681c:	4607      	mov	r7, r0
   b681e:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b6822:	461e      	mov	r6, r3
	if (count == 0) {
   b6824:	4615      	mov	r5, r2
   b6826:	2a00      	cmp	r2, #0
   b6828:	d042      	beq.n	b68b0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b682a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b682e:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6830:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6834:	2100      	movs	r1, #0
   b6836:	f001 fcf0 	bl	b821a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b683a:	4648      	mov	r0, r9
   b683c:	f7ff ffe2 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6840:	3d01      	subs	r5, #1
   b6842:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6844:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b6848:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b684c:	fa5f f48b 	uxtb.w	r4, fp
   b6850:	42a5      	cmp	r5, r4
   b6852:	d922      	bls.n	b689a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6854:	b9dc      	cbnz	r4, b688e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6856:	f1b8 0f00 	cmp.w	r8, #0
   b685a:	d018      	beq.n	b688e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b685c:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b685e:	b2d3      	uxtb	r3, r2
   b6860:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6862:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6864:	d805      	bhi.n	b6872 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b6866:	fa0a f402 	lsl.w	r4, sl, r2
   b686a:	430c      	orrs	r4, r1
   b686c:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b686e:	3201      	adds	r2, #1
   b6870:	e7f5      	b.n	b685e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6872:	4648      	mov	r0, r9
   b6874:	9101      	str	r1, [sp, #4]
   b6876:	f7ff ffc5 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b687a:	7833      	ldrb	r3, [r6, #0]
   b687c:	9901      	ldr	r1, [sp, #4]
   b687e:	4004      	ands	r4, r0
   b6880:	ea23 0301 	bic.w	r3, r3, r1
   b6884:	431c      	orrs	r4, r3
   b6886:	7034      	strb	r4, [r6, #0]
		index++;
   b6888:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b688c:	e7de      	b.n	b684c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b688e:	4648      	mov	r0, r9
   b6890:	f7ff ffb8 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6894:	f806 000b 	strb.w	r0, [r6, fp]
   b6898:	e7f6      	b.n	b6888 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b689a:	2000      	movs	r0, #0
   b689c:	f7ff ffb2 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b68a0:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b68a2:	7b38      	ldrb	r0, [r7, #12]
   b68a4:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b68a6:	b003      	add	sp, #12
   b68a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b68ac:	f001 bcb5 	b.w	b821a <digitalWrite>
} // End PCD_ReadRegister()
   b68b0:	b003      	add	sp, #12
   b68b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b68b6:	b538      	push	{r3, r4, r5, lr}
   b68b8:	460c      	mov	r4, r1
   b68ba:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b68bc:	2100      	movs	r1, #0
   b68be:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b68c0:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b68c4:	f001 fca9 	bl	b821a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b68c8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b68cc:	f7ff ff9a 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b68d0:	2000      	movs	r0, #0
   b68d2:	f7ff ff97 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b68d6:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b68d8:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b68da:	7b28      	ldrb	r0, [r5, #12]
   b68dc:	f001 fc9d 	bl	b821a <digitalWrite>
} // End PCD_ReadRegister()
   b68e0:	4620      	mov	r0, r4
   b68e2:	bd38      	pop	{r3, r4, r5, pc}

000b68e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68e6:	460f      	mov	r7, r1
   b68e8:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b68ea:	2100      	movs	r1, #0
   b68ec:	7b00      	ldrb	r0, [r0, #12]
								) {
   b68ee:	4615      	mov	r5, r2
   b68f0:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b68f2:	f001 fc92 	bl	b821a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b68f6:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b68fa:	f7ff ff83 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b68fe:	4425      	add	r5, r4
   b6900:	42ac      	cmp	r4, r5
   b6902:	d004      	beq.n	b690e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b6904:	f814 0b01 	ldrb.w	r0, [r4], #1
   b6908:	f7ff ff7c 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b690c:	e7f8      	b.n	b6900 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b690e:	7b30      	ldrb	r0, [r6, #12]
   b6910:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6916:	f001 bc80 	b.w	b821a <digitalWrite>

000b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b691a:	b570      	push	{r4, r5, r6, lr}
   b691c:	4604      	mov	r4, r0
   b691e:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6920:	7b00      	ldrb	r0, [r0, #12]
   b6922:	2100      	movs	r1, #0
								) {
   b6924:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6926:	f001 fc78 	bl	b821a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b692a:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b692e:	f7ff ff69 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b6932:	4628      	mov	r0, r5
   b6934:	f7ff ff66 	bl	b6804 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6938:	7b20      	ldrb	r0, [r4, #12]
   b693a:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b693c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6940:	f001 bc6b 	b.w	b821a <digitalWrite>

000b6944 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6944:	b570      	push	{r4, r5, r6, lr}
   b6946:	4616      	mov	r6, r2
   b6948:	4604      	mov	r4, r0
   b694a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b694c:	f7ff ffb3 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6950:	4330      	orrs	r0, r6
   b6952:	b2c2      	uxtb	r2, r0
   b6954:	4629      	mov	r1, r5
   b6956:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b695c:	f7ff bfdd 	b.w	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6960 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6960:	b570      	push	{r4, r5, r6, lr}
   b6962:	4616      	mov	r6, r2
   b6964:	4604      	mov	r4, r0
   b6966:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6968:	f7ff ffa5 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b696c:	ea20 0006 	bic.w	r0, r0, r6
   b6970:	b2c2      	uxtb	r2, r0
   b6972:	4629      	mov	r1, r5
   b6974:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b6976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b697a:	f7ff bfce 	b.w	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b697e <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b697e:	2208      	movs	r2, #8
   b6980:	2110      	movs	r1, #16
   b6982:	f7ff bfed 	b.w	b6960 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b6986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6988:	4604      	mov	r4, r0
   b698a:	4615      	mov	r5, r2
   b698c:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b698e:	2200      	movs	r2, #0
   b6990:	2102      	movs	r1, #2
					 ) {
   b6992:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6994:	f7ff ffc1 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b6998:	2204      	movs	r2, #4
   b699a:	210a      	movs	r1, #10
   b699c:	4620      	mov	r0, r4
   b699e:	f7ff ffbc 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b69a2:	2280      	movs	r2, #128	; 0x80
   b69a4:	2114      	movs	r1, #20
   b69a6:	4620      	mov	r0, r4
   b69a8:	f7ff ffcc 	bl	b6944 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b69ac:	462a      	mov	r2, r5
   b69ae:	463b      	mov	r3, r7
   b69b0:	2112      	movs	r1, #18
   b69b2:	4620      	mov	r0, r4
   b69b4:	f7ff ff96 	bl	b68e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b69b8:	2203      	movs	r2, #3
   b69ba:	2102      	movs	r1, #2
   b69bc:	4620      	mov	r0, r4
   b69be:	f7ff ffac 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b69c2:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b69c6:	210a      	movs	r1, #10
   b69c8:	4620      	mov	r0, r4
   b69ca:	f7ff ff74 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b69ce:	0743      	lsls	r3, r0, #29
   b69d0:	d405      	bmi.n	b69de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b69d2:	3d01      	subs	r5, #1
   b69d4:	b2ad      	uxth	r5, r5
   b69d6:	2d00      	cmp	r5, #0
   b69d8:	d1f5      	bne.n	b69c6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b69da:	2004      	movs	r0, #4
   b69dc:	e00f      	b.n	b69fe <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b69de:	2200      	movs	r2, #0
   b69e0:	2102      	movs	r1, #2
   b69e2:	4620      	mov	r0, r4
   b69e4:	f7ff ff99 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b69e8:	2144      	movs	r1, #68	; 0x44
   b69ea:	4620      	mov	r0, r4
   b69ec:	f7ff ff63 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b69f0:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b69f2:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b69f4:	4620      	mov	r0, r4
   b69f6:	f7ff ff5e 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b69fa:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b69fc:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b69fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a00 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b6a00:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6a02:	220f      	movs	r2, #15
   b6a04:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b6a06:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6a08:	f7ff ff87 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b6a0c:	2032      	movs	r0, #50	; 0x32
   b6a0e:	f000 fd8b 	bl	b7528 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b6a12:	2102      	movs	r1, #2
   b6a14:	4620      	mov	r0, r4
   b6a16:	f7ff ff4e 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6a1a:	06c3      	lsls	r3, r0, #27
   b6a1c:	d4f9      	bmi.n	b6a12 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b6a1e:	bd10      	pop	{r4, pc}

000b6a20 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b6a20:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b6a22:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b6a24:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b6a26:	f7ff ff46 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b6a2a:	f000 0303 	and.w	r3, r0, #3
   b6a2e:	2b03      	cmp	r3, #3
   b6a30:	d008      	beq.n	b6a44 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6a32:	f040 0203 	orr.w	r2, r0, #3
   b6a36:	b2d2      	uxtb	r2, r2
   b6a38:	4620      	mov	r0, r4
   b6a3a:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b6a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6a40:	f7ff bf6b 	b.w	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b6a44:	bd10      	pop	{r4, pc}

000b6a46 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b6a46:	b510      	push	{r4, lr}
   b6a48:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b6a4a:	7b40      	ldrb	r0, [r0, #13]
   b6a4c:	f001 fbfe 	bl	b824c <digitalRead>
   b6a50:	bb48      	cbnz	r0, b6aa6 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b6a52:	7b60      	ldrb	r0, [r4, #13]
   b6a54:	2101      	movs	r1, #1
   b6a56:	f001 fbe0 	bl	b821a <digitalWrite>
		delay(50);
   b6a5a:	2032      	movs	r0, #50	; 0x32
   b6a5c:	f000 fd64 	bl	b7528 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6a60:	4620      	mov	r0, r4
   b6a62:	2280      	movs	r2, #128	; 0x80
   b6a64:	2154      	movs	r1, #84	; 0x54
   b6a66:	f7ff ff58 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b6a6a:	4620      	mov	r0, r4
   b6a6c:	22a9      	movs	r2, #169	; 0xa9
   b6a6e:	2156      	movs	r1, #86	; 0x56
   b6a70:	f7ff ff53 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6a74:	4620      	mov	r0, r4
   b6a76:	2203      	movs	r2, #3
   b6a78:	2158      	movs	r1, #88	; 0x58
   b6a7a:	f7ff ff4e 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b6a7e:	4620      	mov	r0, r4
   b6a80:	22e8      	movs	r2, #232	; 0xe8
   b6a82:	215a      	movs	r1, #90	; 0x5a
   b6a84:	f7ff ff49 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b6a88:	4620      	mov	r0, r4
   b6a8a:	2240      	movs	r2, #64	; 0x40
   b6a8c:	212a      	movs	r1, #42	; 0x2a
   b6a8e:	f7ff ff44 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b6a92:	4620      	mov	r0, r4
   b6a94:	223d      	movs	r2, #61	; 0x3d
   b6a96:	2122      	movs	r1, #34	; 0x22
   b6a98:	f7ff ff3f 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6a9c:	4620      	mov	r0, r4
} // End PCD_Init()
   b6a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6aa2:	f7ff bfbd 	b.w	b6a20 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	f7ff ffaa 	bl	b6a00 <_ZN7MFRC5229PCD_ResetEv>
   b6aac:	e7d8      	b.n	b6a60 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b6aae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b6aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ab2:	b089      	sub	sp, #36	; 0x24
   b6ab4:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b6ab8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b6abc:	9203      	str	r2, [sp, #12]
   b6abe:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b6ac2:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b6ac6:	9204      	str	r2, [sp, #16]
   b6ac8:	4604      	mov	r4, r0
   b6aca:	468a      	mov	sl, r1
   b6acc:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b6ace:	f1b9 0f00 	cmp.w	r9, #0
   b6ad2:	d03e      	beq.n	b6b52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b6ad4:	f899 8000 	ldrb.w	r8, [r9]
   b6ad8:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6ada:	2200      	movs	r2, #0
   b6adc:	2102      	movs	r1, #2
   b6ade:	4620      	mov	r0, r4
   b6ae0:	f7ff ff1b 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b6ae4:	227f      	movs	r2, #127	; 0x7f
   b6ae6:	2108      	movs	r1, #8
   b6ae8:	4620      	mov	r0, r4
   b6aea:	f7ff ff16 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6aee:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6af2:	2280      	movs	r2, #128	; 0x80
   b6af4:	2114      	movs	r1, #20
   b6af6:	4620      	mov	r0, r4
   b6af8:	f7ff ff24 	bl	b6944 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6afc:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b6b00:	9b05      	ldr	r3, [sp, #20]
   b6b02:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b6b06:	2112      	movs	r1, #18
   b6b08:	4620      	mov	r0, r4
   b6b0a:	f7ff feeb 	bl	b68e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b6b0e:	4642      	mov	r2, r8
   b6b10:	211a      	movs	r1, #26
   b6b12:	4620      	mov	r0, r4
   b6b14:	f7ff ff01 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b6b18:	4652      	mov	r2, sl
   b6b1a:	2102      	movs	r1, #2
   b6b1c:	4620      	mov	r0, r4
   b6b1e:	f7ff fefc 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b6b22:	f1ba 0f0c 	cmp.w	sl, #12
   b6b26:	d104      	bne.n	b6b32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b6b28:	2280      	movs	r2, #128	; 0x80
   b6b2a:	211a      	movs	r1, #26
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	f7ff ff09 	bl	b6944 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b6b32:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b6b36:	2108      	movs	r1, #8
   b6b38:	4620      	mov	r0, r4
   b6b3a:	f7ff febc 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b6b3e:	9b03      	ldr	r3, [sp, #12]
   b6b40:	4218      	tst	r0, r3
   b6b42:	d108      	bne.n	b6b56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b6b44:	07c3      	lsls	r3, r0, #31
   b6b46:	d402      	bmi.n	b6b4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b6b48:	f1b8 0801 	subs.w	r8, r8, #1
   b6b4c:	d1f3      	bne.n	b6b36 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b6b4e:	2004      	movs	r0, #4
   b6b50:	e04d      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b6b52:	46c8      	mov	r8, r9
   b6b54:	e7c0      	b.n	b6ad8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6b56:	210c      	movs	r1, #12
   b6b58:	4620      	mov	r0, r4
   b6b5a:	f7ff feac 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6b5e:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6b62:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6b64:	d146      	bne.n	b6bf4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b6b66:	b1dd      	cbz	r5, b6ba0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b6b68:	b1d6      	cbz	r6, b6ba0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6b6a:	2114      	movs	r1, #20
   b6b6c:	4620      	mov	r0, r4
   b6b6e:	f7ff fea2 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b6b72:	7833      	ldrb	r3, [r6, #0]
   b6b74:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6b76:	4602      	mov	r2, r0
		if (n > *backLen) {
   b6b78:	d33e      	bcc.n	b6bf8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b6b7a:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6b7c:	462b      	mov	r3, r5
   b6b7e:	2112      	movs	r1, #18
   b6b80:	4620      	mov	r0, r4
   b6b82:	f8cd b000 	str.w	fp, [sp]
   b6b86:	f7ff fe47 	bl	b6818 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b6b8a:	2118      	movs	r1, #24
   b6b8c:	4620      	mov	r0, r4
   b6b8e:	f7ff fe92 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6b92:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b6b96:	f1b9 0f00 	cmp.w	r9, #0
   b6b9a:	d001      	beq.n	b6ba0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b6b9c:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b6ba0:	f018 0f08 	tst.w	r8, #8
   b6ba4:	d12a      	bne.n	b6bfc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b6ba6:	b35d      	cbz	r5, b6c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6ba8:	b356      	cbz	r6, b6c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6baa:	9b04      	ldr	r3, [sp, #16]
   b6bac:	b343      	cbz	r3, b6c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b6bae:	7832      	ldrb	r2, [r6, #0]
   b6bb0:	2a01      	cmp	r2, #1
   b6bb2:	d103      	bne.n	b6bbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b6bb4:	2f04      	cmp	r7, #4
   b6bb6:	d125      	bne.n	b6c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b6bb8:	2009      	movs	r0, #9
   b6bba:	e018      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b6bbc:	d922      	bls.n	b6c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6bbe:	bb0f      	cbnz	r7, b6c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b6bc0:	3a02      	subs	r2, #2
   b6bc2:	ab07      	add	r3, sp, #28
   b6bc4:	b2d2      	uxtb	r2, r2
   b6bc6:	4629      	mov	r1, r5
   b6bc8:	4620      	mov	r0, r4
   b6bca:	f7ff fedc 	bl	b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b6bce:	2801      	cmp	r0, #1
   b6bd0:	d10d      	bne.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b6bd2:	7833      	ldrb	r3, [r6, #0]
   b6bd4:	441d      	add	r5, r3
   b6bd6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b6bda:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b6bde:	429a      	cmp	r2, r3
   b6be0:	d110      	bne.n	b6c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6be2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b6be6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b6bea:	429a      	cmp	r2, r3
   b6bec:	d10a      	bne.n	b6c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b6bee:	b009      	add	sp, #36	; 0x24
   b6bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b6bf4:	2002      	movs	r0, #2
   b6bf6:	e7fa      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b6bf8:	2005      	movs	r0, #5
   b6bfa:	e7f8      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b6bfc:	2003      	movs	r0, #3
   b6bfe:	e7f6      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b6c00:	2001      	movs	r0, #1
   b6c02:	e7f4      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b6c04:	2008      	movs	r0, #8
   b6c06:	e7f2      	b.n	b6bee <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b6c08 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b6c08:	b510      	push	{r4, lr}
   b6c0a:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b6c0c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b6c10:	9405      	str	r4, [sp, #20]
   b6c12:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b6c16:	9404      	str	r4, [sp, #16]
   b6c18:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b6c1a:	9403      	str	r4, [sp, #12]
   b6c1c:	9c08      	ldr	r4, [sp, #32]
   b6c1e:	9200      	str	r2, [sp, #0]
   b6c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b6c24:	2230      	movs	r2, #48	; 0x30
   b6c26:	460b      	mov	r3, r1
   b6c28:	210c      	movs	r1, #12
   b6c2a:	f7ff ff40 	bl	b6aae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b6c2e:	b006      	add	sp, #24
   b6c30:	bd10      	pop	{r4, pc}

000b6c32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b6c32:	b570      	push	{r4, r5, r6, lr}
   b6c34:	b088      	sub	sp, #32
   b6c36:	4606      	mov	r6, r0
   b6c38:	461c      	mov	r4, r3
   b6c3a:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b6c3e:	4615      	mov	r5, r2
   b6c40:	b31a      	cbz	r2, b6c8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b6c42:	781b      	ldrb	r3, [r3, #0]
   b6c44:	2b01      	cmp	r3, #1
   b6c46:	d920      	bls.n	b6c8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6c48:	2280      	movs	r2, #128	; 0x80
   b6c4a:	211c      	movs	r1, #28
   b6c4c:	f7ff fe88 	bl	b6960 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6c50:	2307      	movs	r3, #7
   b6c52:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b6c56:	2300      	movs	r3, #0
   b6c58:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6c5c:	f10d 031f 	add.w	r3, sp, #31
   b6c60:	e9cd 4300 	strd	r4, r3, [sp]
   b6c64:	2201      	movs	r2, #1
   b6c66:	462b      	mov	r3, r5
   b6c68:	f10d 0117 	add.w	r1, sp, #23
   b6c6c:	4630      	mov	r0, r6
   b6c6e:	f7ff ffcb 	bl	b6c08 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6c72:	2801      	cmp	r0, #1
   b6c74:	d107      	bne.n	b6c86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b6c76:	7823      	ldrb	r3, [r4, #0]
   b6c78:	2b02      	cmp	r3, #2
   b6c7a:	d108      	bne.n	b6c8e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6c7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6c80:	2b00      	cmp	r3, #0
   b6c82:	bf18      	it	ne
   b6c84:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b6c86:	b008      	add	sp, #32
   b6c88:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6c8a:	2005      	movs	r0, #5
   b6c8c:	e7fb      	b.n	b6c86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b6c8e:	2002      	movs	r0, #2
   b6c90:	e7f9      	b.n	b6c86 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b6c92 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b6c92:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b6c94:	460a      	mov	r2, r1
   b6c96:	2126      	movs	r1, #38	; 0x26
   b6c98:	f7ff bfcb 	b.w	b6c32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b6c9c <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b6c9c:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b6c9e:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6ca0:	f10d 0203 	add.w	r2, sp, #3
   b6ca4:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b6ca6:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6caa:	f7ff fff2 	bl	b6c92 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b6cae:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b6cb2:	1e43      	subs	r3, r0, #1
   b6cb4:	4258      	negs	r0, r3
   b6cb6:	4158      	adcs	r0, r3
   b6cb8:	b003      	add	sp, #12
   b6cba:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cbe <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b6cbe:	b570      	push	{r4, r5, r6, lr}
   b6cc0:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b6cc2:	2350      	movs	r3, #80	; 0x50
   b6cc4:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b6cc8:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6cca:	f10d 0316 	add.w	r3, sp, #22
   b6cce:	2202      	movs	r2, #2
   b6cd0:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b6cd2:	4606      	mov	r6, r0
	buffer[1] = 0;
   b6cd4:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6cd8:	f7ff fe55 	bl	b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6cdc:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6cde:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b6ce0:	d10f      	bne.n	b6d02 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b6ce2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6ce6:	e9cd 4400 	strd	r4, r4, [sp]
   b6cea:	4623      	mov	r3, r4
   b6cec:	2204      	movs	r2, #4
   b6cee:	a905      	add	r1, sp, #20
   b6cf0:	4630      	mov	r0, r6
   b6cf2:	f7ff ff89 	bl	b6c08 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b6cf6:	2804      	cmp	r0, #4
   b6cf8:	d003      	beq.n	b6d02 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b6cfa:	2801      	cmp	r0, #1
   b6cfc:	bf14      	ite	ne
   b6cfe:	4605      	movne	r5, r0
   b6d00:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b6d02:	4628      	mov	r0, r5
   b6d04:	b006      	add	sp, #24
   b6d06:	bd70      	pop	{r4, r5, r6, pc}

000b6d08 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b6d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6d0a:	4606      	mov	r6, r0
   b6d0c:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b6d0e:	4614      	mov	r4, r2
   b6d10:	b1ca      	cbz	r2, b6d46 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b6d12:	781b      	ldrb	r3, [r3, #0]
   b6d14:	2b11      	cmp	r3, #17
   b6d16:	d916      	bls.n	b6d46 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b6d18:	2330      	movs	r3, #48	; 0x30
   b6d1a:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b6d1c:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6d1e:	1c93      	adds	r3, r2, #2
   b6d20:	4621      	mov	r1, r4
   b6d22:	2202      	movs	r2, #2
   b6d24:	f7ff fe2f 	bl	b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6d28:	2801      	cmp	r0, #1
   b6d2a:	d10a      	bne.n	b6d42 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b6d2c:	2300      	movs	r3, #0
   b6d2e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6d32:	9003      	str	r0, [sp, #12]
   b6d34:	9500      	str	r5, [sp, #0]
   b6d36:	4623      	mov	r3, r4
   b6d38:	2204      	movs	r2, #4
   b6d3a:	4621      	mov	r1, r4
   b6d3c:	4630      	mov	r0, r6
   b6d3e:	f7ff ff63 	bl	b6c08 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b6d42:	b004      	add	sp, #16
   b6d44:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6d46:	2005      	movs	r0, #5
   b6d48:	e7fb      	b.n	b6d42 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b6d4a <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b6d4a:	b510      	push	{r4, lr}
   b6d4c:	b08a      	sub	sp, #40	; 0x28
   b6d4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6d50:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6d54:	681a      	ldr	r2, [r3, #0]
   b6d56:	889b      	ldrh	r3, [r3, #4]
   b6d58:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6d5c:	7863      	ldrb	r3, [r4, #1]
   b6d5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6d62:	78a3      	ldrb	r3, [r4, #2]
   b6d64:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b6d68:	78e3      	ldrb	r3, [r4, #3]
   b6d6a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6d6e:	7923      	ldrb	r3, [r4, #4]
   b6d70:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6d74:	2300      	movs	r3, #0
   b6d76:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b6d7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6d7e:	9301      	str	r3, [sp, #4]
   b6d80:	230c      	movs	r3, #12
	sendData[0] = command;
   b6d82:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b6d86:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6d8a:	9300      	str	r3, [sp, #0]
   b6d8c:	2210      	movs	r2, #16
   b6d8e:	ab07      	add	r3, sp, #28
   b6d90:	210e      	movs	r1, #14
   b6d92:	f7ff fe8c 	bl	b6aae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b6d96:	b00a      	add	sp, #40	; 0x28
   b6d98:	bd10      	pop	{r4, pc}

000b6d9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b6d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b6d9e:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b6da0:	b08b      	sub	sp, #44	; 0x2c
   b6da2:	4682      	mov	sl, r0
   b6da4:	460f      	mov	r7, r1
   b6da6:	4690      	mov	r8, r2
	if (validBits > 80) {
   b6da8:	f200 8140 	bhi.w	b702c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6dac:	2280      	movs	r2, #128	; 0x80
   b6dae:	211c      	movs	r1, #28
   b6db0:	f7ff fdd6 	bl	b6960 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6db4:	2393      	movs	r3, #147	; 0x93
   b6db6:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6dba:	f1b8 0f00 	cmp.w	r8, #0
   b6dbe:	f000 80bc 	beq.w	b6f3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b6dc2:	783c      	ldrb	r4, [r7, #0]
   b6dc4:	2c04      	cmp	r4, #4
   b6dc6:	bf94      	ite	ls
   b6dc8:	2300      	movls	r3, #0
   b6dca:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6dcc:	2501      	movs	r5, #1
   b6dce:	2600      	movs	r6, #0
   b6dd0:	e00b      	b.n	b6dea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b6dd2:	2395      	movs	r3, #149	; 0x95
   b6dd4:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6dd8:	f1b8 0f00 	cmp.w	r8, #0
   b6ddc:	f000 80af 	beq.w	b6f3e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b6de0:	783c      	ldrb	r4, [r7, #0]
   b6de2:	2c07      	cmp	r4, #7
   b6de4:	bf94      	ite	ls
   b6de6:	2300      	movls	r3, #0
   b6de8:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b6dea:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b6dee:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b6df0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b6df4:	2b00      	cmp	r3, #0
   b6df6:	f000 80a4 	beq.w	b6f42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b6dfa:	2288      	movs	r2, #136	; 0x88
   b6dfc:	f88d 201e 	strb.w	r2, [sp, #30]
   b6e00:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6e02:	f014 0207 	ands.w	r2, r4, #7
   b6e06:	bf18      	it	ne
   b6e08:	2201      	movne	r2, #1
   b6e0a:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b6e0e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6e12:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b6e14:	d01d      	beq.n	b6e52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b6e16:	2b00      	cmp	r3, #0
   b6e18:	bf14      	ite	ne
   b6e1a:	f04f 0903 	movne.w	r9, #3
   b6e1e:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b6e22:	f106 0c01 	add.w	ip, r6, #1
   b6e26:	4591      	cmp	r9, r2
   b6e28:	bf94      	ite	ls
   b6e2a:	eb01 0e09 	addls.w	lr, r1, r9
   b6e2e:	eb01 0e02 	addhi.w	lr, r1, r2
   b6e32:	fa57 fc8c 	uxtab	ip, r7, ip
   b6e36:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b6e3a:	460a      	mov	r2, r1
   b6e3c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6e40:	3101      	adds	r1, #1
   b6e42:	b2c9      	uxtb	r1, r1
   b6e44:	445a      	add	r2, fp
   b6e46:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b6e4a:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6e4e:	4571      	cmp	r1, lr
   b6e50:	d1f3      	bne.n	b6e3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6e52:	b10b      	cbz	r3, b6e58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6e54:	3008      	adds	r0, #8
   b6e56:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b6e58:	2c1f      	cmp	r4, #31
   b6e5a:	dd74      	ble.n	b6f46 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6e5c:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6e60:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6e64:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6e68:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6e6c:	4053      	eors	r3, r2
   b6e6e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6e72:	4053      	eors	r3, r2
   b6e74:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b6e78:	4053      	eors	r3, r2
   b6e7a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6e7e:	2207      	movs	r2, #7
   b6e80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6e84:	a907      	add	r1, sp, #28
   b6e86:	4650      	mov	r0, sl
   b6e88:	f7ff fd7d 	bl	b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b6e8c:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6e8e:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b6e90:	f040 80c8 	bne.w	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6e94:	2300      	movs	r3, #0
   b6e96:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b6e9a:	2303      	movs	r3, #3
   b6e9c:	f88d 301b 	strb.w	r3, [sp, #27]
   b6ea0:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b6ea2:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b6ea6:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b6eaa:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6eae:	9305      	str	r3, [sp, #20]
   b6eb0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6eb4:	b2d2      	uxtb	r2, r2
   b6eb6:	211a      	movs	r1, #26
   b6eb8:	4650      	mov	r0, sl
   b6eba:	f7ff fd2e 	bl	b691a <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6ebe:	9b05      	ldr	r3, [sp, #20]
   b6ec0:	9302      	str	r3, [sp, #8]
   b6ec2:	f10d 031a 	add.w	r3, sp, #26
   b6ec6:	2200      	movs	r2, #0
   b6ec8:	9301      	str	r3, [sp, #4]
   b6eca:	f10d 031b 	add.w	r3, sp, #27
   b6ece:	9203      	str	r2, [sp, #12]
   b6ed0:	9300      	str	r3, [sp, #0]
   b6ed2:	464a      	mov	r2, r9
   b6ed4:	465b      	mov	r3, fp
   b6ed6:	a907      	add	r1, sp, #28
   b6ed8:	4650      	mov	r0, sl
   b6eda:	f7ff fe95 	bl	b6c08 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6ede:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6ee0:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6ee2:	d14c      	bne.n	b6f7e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b6ee4:	211c      	movs	r1, #28
   b6ee6:	4650      	mov	r0, sl
   b6ee8:	f7ff fce5 	bl	b68b6 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b6eec:	0681      	lsls	r1, r0, #26
   b6eee:	f100 8099 	bmi.w	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b6ef2:	f010 001f 	ands.w	r0, r0, #31
   b6ef6:	bf08      	it	eq
   b6ef8:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b6efa:	42a0      	cmp	r0, r4
   b6efc:	f340 8087 	ble.w	b700e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b6f00:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6f02:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b6f06:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6f08:	f013 0307 	ands.w	r3, r3, #7
   b6f0c:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b6f10:	bf18      	it	ne
   b6f12:	2301      	movne	r3, #1
   b6f14:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b6f16:	4418      	add	r0, r3
   b6f18:	ab0a      	add	r3, sp, #40	; 0x28
   b6f1a:	4418      	add	r0, r3
   b6f1c:	2301      	movs	r3, #1
   b6f1e:	fa03 f202 	lsl.w	r2, r3, r2
   b6f22:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b6f26:	4313      	orrs	r3, r2
   b6f28:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b6f2c:	e794      	b.n	b6e58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b6f2e:	2397      	movs	r3, #151	; 0x97
   b6f30:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b6f34:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b6f36:	4623      	mov	r3, r4
				break;
   b6f38:	e757      	b.n	b6dea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6f3a:	4643      	mov	r3, r8
   b6f3c:	e746      	b.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6f3e:	4643      	mov	r3, r8
   b6f40:	e753      	b.n	b6dea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b6f42:	2102      	movs	r1, #2
   b6f44:	e75d      	b.n	b6e02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b6f46:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6f48:	3302      	adds	r3, #2
   b6f4a:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6f4c:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6f50:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6f54:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6f58:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6f5c:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6f60:	bf18      	it	ne
   b6f62:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b6f66:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6f68:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b6f6a:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6f6e:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6f72:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b6f76:	f88d 301b 	strb.w	r3, [sp, #27]
   b6f7a:	9404      	str	r4, [sp, #16]
   b6f7c:	e795      	b.n	b6eaa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6f7e:	2801      	cmp	r0, #1
   b6f80:	d150      	bne.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6f82:	9b04      	ldr	r3, [sp, #16]
   b6f84:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b6f86:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6f8a:	f77f af67 	ble.w	b6e5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6f8e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6f92:	2b88      	cmp	r3, #136	; 0x88
   b6f94:	d13e      	bne.n	b7014 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b6f96:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6f98:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b6f9a:	3601      	adds	r6, #1
   b6f9c:	441a      	add	r2, r3
   b6f9e:	fa57 f686 	uxtab	r6, r7, r6
   b6fa2:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6fa4:	4619      	mov	r1, r3
   b6fa6:	a80a      	add	r0, sp, #40	; 0x28
   b6fa8:	3301      	adds	r3, #1
   b6faa:	4401      	add	r1, r0
   b6fac:	b2db      	uxtb	r3, r3
   b6fae:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6fb2:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b6fb6:	4293      	cmp	r3, r2
   b6fb8:	d1f4      	bne.n	b6fa4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b6fba:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6fbe:	2e03      	cmp	r6, #3
   b6fc0:	d137      	bne.n	b7032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6fc2:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b6fc6:	bba4      	cbnz	r4, b7032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6fc8:	f10d 031e 	add.w	r3, sp, #30
   b6fcc:	2201      	movs	r2, #1
   b6fce:	4659      	mov	r1, fp
   b6fd0:	4650      	mov	r0, sl
   b6fd2:	f7ff fcd8 	bl	b6986 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b6fd6:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6fd8:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b6fda:	d123      	bne.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6fdc:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6fe0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b6fe4:	429a      	cmp	r2, r3
   b6fe6:	d127      	bne.n	b7038 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b6fe8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6fec:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6ff0:	429a      	cmp	r2, r3
   b6ff2:	d121      	bne.n	b7038 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6ff4:	f89b 3000 	ldrb.w	r3, [fp]
   b6ff8:	075a      	lsls	r2, r3, #29
   b6ffa:	d50e      	bpl.n	b701a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b6ffc:	3501      	adds	r5, #1
   b6ffe:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b7000:	2d03      	cmp	r5, #3
   b7002:	d094      	beq.n	b6f2e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b7004:	2d04      	cmp	r5, #4
   b7006:	d002      	beq.n	b700e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b7008:	2d02      	cmp	r5, #2
   b700a:	f43f aee2 	beq.w	b6dd2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b700e:	f04f 0906 	mov.w	r9, #6
   b7012:	e007      	b.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b7014:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7016:	2204      	movs	r2, #4
   b7018:	e7bf      	b.n	b6f9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b701a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b701e:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b7020:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b7022:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b7024:	4648      	mov	r0, r9
   b7026:	b00b      	add	sp, #44	; 0x2c
   b7028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b702c:	f04f 0907 	mov.w	r9, #7
   b7030:	e7f8      	b.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b7032:	f04f 0902 	mov.w	r9, #2
   b7036:	e7f5      	b.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b7038:	f04f 0908 	mov.w	r9, #8
   b703c:	e7f2      	b.n	b7024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b703e <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b703e:	b508      	push	{r3, lr}
   b7040:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b7042:	2200      	movs	r2, #0
   b7044:	f7ff fea9 	bl	b6d9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b7048:	1e43      	subs	r3, r0, #1
   b704a:	4258      	negs	r0, r3
   b704c:	4158      	adcs	r0, r3
   b704e:	bd08      	pop	{r3, pc}

000b7050 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7050:	b508      	push	{r3, lr}
   b7052:	4b02      	ldr	r3, [pc, #8]	; (b705c <os_mutex_recursive_create+0xc>)
   b7054:	681b      	ldr	r3, [r3, #0]
   b7056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	bd08      	pop	{r3, pc}
   b705c:	00030248 	.word	0x00030248

000b7060 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7060:	b508      	push	{r3, lr}
   b7062:	4b02      	ldr	r3, [pc, #8]	; (b706c <HAL_RNG_GetRandomNumber+0xc>)
   b7064:	681b      	ldr	r3, [r3, #0]
   b7066:	685b      	ldr	r3, [r3, #4]
   b7068:	9301      	str	r3, [sp, #4]
   b706a:	bd08      	pop	{r3, pc}
   b706c:	00030218 	.word	0x00030218

000b7070 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7070:	b508      	push	{r3, lr}
   b7072:	4b02      	ldr	r3, [pc, #8]	; (b707c <HAL_Delay_Microseconds+0xc>)
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	68db      	ldr	r3, [r3, #12]
   b7078:	9301      	str	r3, [sp, #4]
   b707a:	bd08      	pop	{r3, pc}
   b707c:	00030218 	.word	0x00030218

000b7080 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7080:	b508      	push	{r3, lr}
   b7082:	4b02      	ldr	r3, [pc, #8]	; (b708c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7084:	681b      	ldr	r3, [r3, #0]
   b7086:	695b      	ldr	r3, [r3, #20]
   b7088:	9301      	str	r3, [sp, #4]
   b708a:	bd08      	pop	{r3, pc}
   b708c:	00030218 	.word	0x00030218

000b7090 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7090:	b508      	push	{r3, lr}
   b7092:	4b02      	ldr	r3, [pc, #8]	; (b709c <HAL_Validate_Pin_Function+0xc>)
   b7094:	681b      	ldr	r3, [r3, #0]
   b7096:	685b      	ldr	r3, [r3, #4]
   b7098:	9301      	str	r3, [sp, #4]
   b709a:	bd08      	pop	{r3, pc}
   b709c:	0003022c 	.word	0x0003022c

000b70a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b70a0:	b508      	push	{r3, lr}
   b70a2:	4b02      	ldr	r3, [pc, #8]	; (b70ac <HAL_Pin_Mode+0xc>)
   b70a4:	681b      	ldr	r3, [r3, #0]
   b70a6:	689b      	ldr	r3, [r3, #8]
   b70a8:	9301      	str	r3, [sp, #4]
   b70aa:	bd08      	pop	{r3, pc}
   b70ac:	0003022c 	.word	0x0003022c

000b70b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b02      	ldr	r3, [pc, #8]	; (b70bc <HAL_Get_Pin_Mode+0xc>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	68db      	ldr	r3, [r3, #12]
   b70b8:	9301      	str	r3, [sp, #4]
   b70ba:	bd08      	pop	{r3, pc}
   b70bc:	0003022c 	.word	0x0003022c

000b70c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b70c0:	b508      	push	{r3, lr}
   b70c2:	4b02      	ldr	r3, [pc, #8]	; (b70cc <HAL_GPIO_Write+0xc>)
   b70c4:	681b      	ldr	r3, [r3, #0]
   b70c6:	691b      	ldr	r3, [r3, #16]
   b70c8:	9301      	str	r3, [sp, #4]
   b70ca:	bd08      	pop	{r3, pc}
   b70cc:	0003022c 	.word	0x0003022c

000b70d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b70d0:	b508      	push	{r3, lr}
   b70d2:	4b02      	ldr	r3, [pc, #8]	; (b70dc <HAL_GPIO_Read+0xc>)
   b70d4:	681b      	ldr	r3, [r3, #0]
   b70d6:	695b      	ldr	r3, [r3, #20]
   b70d8:	9301      	str	r3, [sp, #4]
   b70da:	bd08      	pop	{r3, pc}
   b70dc:	0003022c 	.word	0x0003022c

000b70e0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b70e0:	b508      	push	{r3, lr}
   b70e2:	4b02      	ldr	r3, [pc, #8]	; (b70ec <HAL_Interrupts_Enable_All+0xc>)
   b70e4:	681b      	ldr	r3, [r3, #0]
   b70e6:	6a1b      	ldr	r3, [r3, #32]
   b70e8:	9301      	str	r3, [sp, #4]
   b70ea:	bd08      	pop	{r3, pc}
   b70ec:	0003022c 	.word	0x0003022c

000b70f0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b70f0:	b508      	push	{r3, lr}
   b70f2:	4b02      	ldr	r3, [pc, #8]	; (b70fc <HAL_Interrupts_Disable_All+0xc>)
   b70f4:	681b      	ldr	r3, [r3, #0]
   b70f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70f8:	9301      	str	r3, [sp, #4]
   b70fa:	bd08      	pop	{r3, pc}
   b70fc:	0003022c 	.word	0x0003022c

000b7100 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7100:	b508      	push	{r3, lr}
   b7102:	4b02      	ldr	r3, [pc, #8]	; (b710c <hal_adc_read+0xc>)
   b7104:	681b      	ldr	r3, [r3, #0]
   b7106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7108:	9301      	str	r3, [sp, #4]
   b710a:	bd08      	pop	{r3, pc}
   b710c:	0003022c 	.word	0x0003022c

000b7110 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b7110:	b508      	push	{r3, lr}
   b7112:	4b02      	ldr	r3, [pc, #8]	; (b711c <HAL_Pulse_In+0xc>)
   b7114:	681b      	ldr	r3, [r3, #0]
   b7116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7118:	9301      	str	r3, [sp, #4]
   b711a:	bd08      	pop	{r3, pc}
   b711c:	0003022c 	.word	0x0003022c

000b7120 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7120:	b508      	push	{r3, lr}
   b7122:	4b02      	ldr	r3, [pc, #8]	; (b712c <hal_i2c_set_speed+0xc>)
   b7124:	681b      	ldr	r3, [r3, #0]
   b7126:	681b      	ldr	r3, [r3, #0]
   b7128:	9301      	str	r3, [sp, #4]
   b712a:	bd08      	pop	{r3, pc}
   b712c:	00030228 	.word	0x00030228

000b7130 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7130:	b508      	push	{r3, lr}
   b7132:	4b02      	ldr	r3, [pc, #8]	; (b713c <hal_i2c_begin+0xc>)
   b7134:	681b      	ldr	r3, [r3, #0]
   b7136:	68db      	ldr	r3, [r3, #12]
   b7138:	9301      	str	r3, [sp, #4]
   b713a:	bd08      	pop	{r3, pc}
   b713c:	00030228 	.word	0x00030228

000b7140 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7140:	b508      	push	{r3, lr}
   b7142:	4b02      	ldr	r3, [pc, #8]	; (b714c <hal_i2c_begin_transmission+0xc>)
   b7144:	681b      	ldr	r3, [r3, #0]
   b7146:	699b      	ldr	r3, [r3, #24]
   b7148:	9301      	str	r3, [sp, #4]
   b714a:	bd08      	pop	{r3, pc}
   b714c:	00030228 	.word	0x00030228

000b7150 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7150:	b508      	push	{r3, lr}
   b7152:	4b02      	ldr	r3, [pc, #8]	; (b715c <hal_i2c_end_transmission+0xc>)
   b7154:	681b      	ldr	r3, [r3, #0]
   b7156:	69db      	ldr	r3, [r3, #28]
   b7158:	9301      	str	r3, [sp, #4]
   b715a:	bd08      	pop	{r3, pc}
   b715c:	00030228 	.word	0x00030228

000b7160 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7160:	b508      	push	{r3, lr}
   b7162:	4b02      	ldr	r3, [pc, #8]	; (b716c <hal_i2c_write+0xc>)
   b7164:	681b      	ldr	r3, [r3, #0]
   b7166:	6a1b      	ldr	r3, [r3, #32]
   b7168:	9301      	str	r3, [sp, #4]
   b716a:	bd08      	pop	{r3, pc}
   b716c:	00030228 	.word	0x00030228

000b7170 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <hal_i2c_available+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	00030228 	.word	0x00030228

000b7180 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <hal_i2c_read+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	00030228 	.word	0x00030228

000b7190 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <hal_i2c_peek+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	00030228 	.word	0x00030228

000b71a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <hal_i2c_flush+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	00030228 	.word	0x00030228

000b71b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <hal_i2c_is_enabled+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030228 	.word	0x00030228

000b71c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <hal_i2c_init+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030228 	.word	0x00030228

000b71d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <inet_inet_ntop+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	695b      	ldr	r3, [r3, #20]
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030264 	.word	0x00030264

000b71e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <netdb_freeaddrinfo+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	689b      	ldr	r3, [r3, #8]
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030268 	.word	0x00030268

000b71f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <netdb_getaddrinfo+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	68db      	ldr	r3, [r3, #12]
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030268 	.word	0x00030268

000b7200 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <hal_spi_begin+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	681b      	ldr	r3, [r3, #0]
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030230 	.word	0x00030230

000b7210 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <hal_spi_transfer+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	695b      	ldr	r3, [r3, #20]
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	00030230 	.word	0x00030230

000b7220 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <hal_spi_init+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	69db      	ldr	r3, [r3, #28]
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	00030230 	.word	0x00030230

000b7230 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <hal_spi_is_enabled+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	6a1b      	ldr	r3, [r3, #32]
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	00030230 	.word	0x00030230

000b7240 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <hal_spi_info+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	00030230 	.word	0x00030230

000b7250 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <hal_spi_set_settings+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	00030230 	.word	0x00030230

000b7260 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <hal_spi_acquire+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	00030230 	.word	0x00030230

000b7270 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <hal_spi_release+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	00030230 	.word	0x00030230

000b7280 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <hal_usart_write+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	68db      	ldr	r3, [r3, #12]
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	0003023c 	.word	0x0003023c

000b7290 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <hal_usart_available+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	691b      	ldr	r3, [r3, #16]
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	0003023c 	.word	0x0003023c

000b72a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <hal_usart_read+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	695b      	ldr	r3, [r3, #20]
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	0003023c 	.word	0x0003023c

000b72b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <hal_usart_peek+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	699b      	ldr	r3, [r3, #24]
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	0003023c 	.word	0x0003023c

000b72c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <hal_usart_flush+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	69db      	ldr	r3, [r3, #28]
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	0003023c 	.word	0x0003023c

000b72d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <hal_usart_is_enabled+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	6a1b      	ldr	r3, [r3, #32]
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	0003023c 	.word	0x0003023c

000b72e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <hal_usart_available_data_for_write+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	0003023c 	.word	0x0003023c

000b72f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <hal_usart_init_ex+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	0003023c 	.word	0x0003023c

000b7300 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <HAL_USB_USART_Init+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	681b      	ldr	r3, [r3, #0]
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	0003024c 	.word	0x0003024c

000b7310 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <HAL_USB_USART_Begin+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	685b      	ldr	r3, [r3, #4]
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	0003024c 	.word	0x0003024c

000b7320 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <HAL_USB_USART_Available_Data+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	691b      	ldr	r3, [r3, #16]
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	0003024c 	.word	0x0003024c

000b7330 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	695b      	ldr	r3, [r3, #20]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	0003024c 	.word	0x0003024c

000b7340 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <HAL_USB_USART_Receive_Data+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	699b      	ldr	r3, [r3, #24]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	0003024c 	.word	0x0003024c

000b7350 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <HAL_USB_USART_Send_Data+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	69db      	ldr	r3, [r3, #28]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	0003024c 	.word	0x0003024c

000b7360 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <HAL_USB_USART_Flush_Data+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	6a1b      	ldr	r3, [r3, #32]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	0003024c 	.word	0x0003024c

000b7370 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <panic_+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	00030260 	.word	0x00030260

000b7380 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <set_system_mode+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	685b      	ldr	r3, [r3, #4]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	00030220 	.word	0x00030220

000b7390 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <system_delay_ms+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	695b      	ldr	r3, [r3, #20]
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	00030220 	.word	0x00030220

000b73a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b03      	ldr	r3, [pc, #12]	; (b73b0 <system_ctrl_set_app_request_handler+0x10>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b73aa:	9301      	str	r3, [sp, #4]
   b73ac:	bd08      	pop	{r3, pc}
   b73ae:	0000      	.short	0x0000
   b73b0:	00030220 	.word	0x00030220

000b73b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b03      	ldr	r3, [pc, #12]	; (b73c4 <system_ctrl_set_result+0x10>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b73be:	9301      	str	r3, [sp, #4]
   b73c0:	bd08      	pop	{r3, pc}
   b73c2:	0000      	.short	0x0000
   b73c4:	00030220 	.word	0x00030220

000b73c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b73c8:	b508      	push	{r3, lr}
   b73ca:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b73cc:	681b      	ldr	r3, [r3, #0]
   b73ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73d0:	9301      	str	r3, [sp, #4]
   b73d2:	bd08      	pop	{r3, pc}
   b73d4:	00030244 	.word	0x00030244

000b73d8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b73d8:	b508      	push	{r3, lr}
   b73da:	4b02      	ldr	r3, [pc, #8]	; (b73e4 <spark_cloud_disconnect+0xc>)
   b73dc:	681b      	ldr	r3, [r3, #0]
   b73de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	bd08      	pop	{r3, pc}
   b73e4:	00030244 	.word	0x00030244

000b73e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b73e8:	b508      	push	{r3, lr}
   b73ea:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <network_connect+0xc>)
   b73ec:	681b      	ldr	r3, [r3, #0]
   b73ee:	685b      	ldr	r3, [r3, #4]
   b73f0:	9301      	str	r3, [sp, #4]
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	00030240 	.word	0x00030240

000b73f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b73f8:	b508      	push	{r3, lr}
   b73fa:	4b02      	ldr	r3, [pc, #8]	; (b7404 <network_connecting+0xc>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	689b      	ldr	r3, [r3, #8]
   b7400:	9301      	str	r3, [sp, #4]
   b7402:	bd08      	pop	{r3, pc}
   b7404:	00030240 	.word	0x00030240

000b7408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7408:	b508      	push	{r3, lr}
   b740a:	4b02      	ldr	r3, [pc, #8]	; (b7414 <network_disconnect+0xc>)
   b740c:	681b      	ldr	r3, [r3, #0]
   b740e:	68db      	ldr	r3, [r3, #12]
   b7410:	9301      	str	r3, [sp, #4]
   b7412:	bd08      	pop	{r3, pc}
   b7414:	00030240 	.word	0x00030240

000b7418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <network_ready+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	691b      	ldr	r3, [r3, #16]
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	00030240 	.word	0x00030240

000b7428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <network_on+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	695b      	ldr	r3, [r3, #20]
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	00030240 	.word	0x00030240

000b7438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <network_off+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	699b      	ldr	r3, [r3, #24]
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	00030240 	.word	0x00030240

000b7448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <network_listen+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	69db      	ldr	r3, [r3, #28]
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	00030240 	.word	0x00030240

000b7458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <network_listening+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	6a1b      	ldr	r3, [r3, #32]
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	00030240 	.word	0x00030240

000b7468 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <network_set_listen_timeout+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	00030240 	.word	0x00030240

000b7478 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <network_get_listen_timeout+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	00030240 	.word	0x00030240

000b7488 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <network_is_on+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030240 	.word	0x00030240

000b7498 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <network_is_off+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030240 	.word	0x00030240

000b74a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <malloc+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	681b      	ldr	r3, [r3, #0]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	0003021c 	.word	0x0003021c

000b74b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <free+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	685b      	ldr	r3, [r3, #4]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	0003021c 	.word	0x0003021c

000b74c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <realloc+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	689b      	ldr	r3, [r3, #8]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	0003021c 	.word	0x0003021c

000b74d8 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <snprintf+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	69db      	ldr	r3, [r3, #28]
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	0003021c 	.word	0x0003021c

000b74e8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <vsnprintf+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	0003021c 	.word	0x0003021c

000b74f8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <_malloc_r+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	0003021c 	.word	0x0003021c

000b7508 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <__assert_func+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	0003021c 	.word	0x0003021c

000b7518 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <newlib_impure_ptr_callback+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	0003021c 	.word	0x0003021c

000b7528 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7528:	2100      	movs	r1, #0
   b752a:	f7ff bf31 	b.w	b7390 <system_delay_ms>
	...

000b7530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7530:	4802      	ldr	r0, [pc, #8]	; (b753c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7532:	2300      	movs	r3, #0
   b7534:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7536:	f7ff bd8b 	b.w	b7050 <os_mutex_recursive_create>
   b753a:	bf00      	nop
   b753c:	2003e6c4 	.word	0x2003e6c4

000b7540 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b7540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b7542:	230c      	movs	r3, #12
   b7544:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b7548:	6803      	ldr	r3, [r0, #0]
   b754a:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b754e:	7a03      	ldrb	r3, [r0, #8]
   b7550:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b7554:	6843      	ldr	r3, [r0, #4]
   b7556:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b7558:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b755a:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b755c:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7560:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b7562:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b7566:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b756a:	f7ff ff35 	bl	b73d8 <spark_cloud_disconnect>
}
   b756e:	b005      	add	sp, #20
   b7570:	f85d fb04 	ldr.w	pc, [sp], #4

000b7574 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7574:	2200      	movs	r2, #0
   b7576:	6840      	ldr	r0, [r0, #4]
   b7578:	4611      	mov	r1, r2
   b757a:	f7ff bf6d 	b.w	b7458 <network_listening>

000b757e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b757e:	2200      	movs	r2, #0
   b7580:	6840      	ldr	r0, [r0, #4]
   b7582:	4611      	mov	r1, r2
   b7584:	f7ff bf78 	b.w	b7478 <network_get_listen_timeout>

000b7588 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7588:	6840      	ldr	r0, [r0, #4]
   b758a:	2200      	movs	r2, #0
   b758c:	f7ff bf6c 	b.w	b7468 <network_set_listen_timeout>

000b7590 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7590:	6840      	ldr	r0, [r0, #4]
   b7592:	2200      	movs	r2, #0
   b7594:	f081 0101 	eor.w	r1, r1, #1
   b7598:	f7ff bf56 	b.w	b7448 <network_listen>

000b759c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b759c:	2300      	movs	r3, #0
   b759e:	6840      	ldr	r0, [r0, #4]
   b75a0:	461a      	mov	r2, r3
   b75a2:	4619      	mov	r1, r3
   b75a4:	f7ff bf48 	b.w	b7438 <network_off>

000b75a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b75a8:	2300      	movs	r3, #0
   b75aa:	6840      	ldr	r0, [r0, #4]
   b75ac:	461a      	mov	r2, r3
   b75ae:	4619      	mov	r1, r3
   b75b0:	f7ff bf3a 	b.w	b7428 <network_on>

000b75b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b75b4:	2200      	movs	r2, #0
   b75b6:	6840      	ldr	r0, [r0, #4]
   b75b8:	4611      	mov	r1, r2
   b75ba:	f7ff bf2d 	b.w	b7418 <network_ready>

000b75be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b75be:	2200      	movs	r2, #0
   b75c0:	6840      	ldr	r0, [r0, #4]
   b75c2:	4611      	mov	r1, r2
   b75c4:	f7ff bf18 	b.w	b73f8 <network_connecting>

000b75c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b75c8:	6840      	ldr	r0, [r0, #4]
   b75ca:	2200      	movs	r2, #0
   b75cc:	2102      	movs	r1, #2
   b75ce:	f7ff bf1b 	b.w	b7408 <network_disconnect>

000b75d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b75d2:	2300      	movs	r3, #0
   b75d4:	6840      	ldr	r0, [r0, #4]
   b75d6:	461a      	mov	r2, r3
   b75d8:	f7ff bf06 	b.w	b73e8 <network_connect>

000b75dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b75dc:	4b02      	ldr	r3, [pc, #8]	; (b75e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b75de:	2203      	movs	r2, #3
   b75e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b75e2:	4a02      	ldr	r2, [pc, #8]	; (b75ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b75e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b75e6:	4770      	bx	lr
   b75e8:	2003e6c8 	.word	0x2003e6c8
   b75ec:	000b9bf0 	.word	0x000b9bf0

000b75f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b75f0:	4770      	bx	lr

000b75f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b75f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75f4:	4606      	mov	r6, r0
   b75f6:	4615      	mov	r5, r2
   b75f8:	460c      	mov	r4, r1
   b75fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b75fc:	42bc      	cmp	r4, r7
   b75fe:	d006      	beq.n	b760e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7600:	6833      	ldr	r3, [r6, #0]
   b7602:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7606:	689b      	ldr	r3, [r3, #8]
   b7608:	4630      	mov	r0, r6
   b760a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b760c:	e7f6      	b.n	b75fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b760e:	4628      	mov	r0, r5
   b7610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7612 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7612:	7c00      	ldrb	r0, [r0, #16]
   b7614:	2200      	movs	r2, #0
   b7616:	f7ff bda3 	b.w	b7160 <hal_i2c_write>

000b761a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b761a:	7c00      	ldrb	r0, [r0, #16]
   b761c:	2100      	movs	r1, #0
   b761e:	f7ff bda7 	b.w	b7170 <hal_i2c_available>

000b7622 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7622:	7c00      	ldrb	r0, [r0, #16]
   b7624:	2100      	movs	r1, #0
   b7626:	f7ff bdab 	b.w	b7180 <hal_i2c_read>

000b762a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b762a:	7c00      	ldrb	r0, [r0, #16]
   b762c:	2100      	movs	r1, #0
   b762e:	f7ff bdaf 	b.w	b7190 <hal_i2c_peek>

000b7632 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7632:	7c00      	ldrb	r0, [r0, #16]
   b7634:	2100      	movs	r1, #0
   b7636:	f7ff bdb3 	b.w	b71a0 <hal_i2c_flush>

000b763a <_ZN7TwoWireD0Ev>:
   b763a:	b510      	push	{r4, lr}
   b763c:	2114      	movs	r1, #20
   b763e:	4604      	mov	r4, r0
   b7640:	f7fc fd29 	bl	b4096 <_ZdlPvj>
   b7644:	4620      	mov	r0, r4
   b7646:	bd10      	pop	{r4, pc}

000b7648 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7648:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b764a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b764e:	4604      	mov	r4, r0
   b7650:	4608      	mov	r0, r1
   b7652:	2100      	movs	r1, #0
   b7654:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7658:	4b03      	ldr	r3, [pc, #12]	; (b7668 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b765a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b765c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b765e:	4611      	mov	r1, r2
   b7660:	f7ff fdae 	bl	b71c0 <hal_i2c_init>
}
   b7664:	4620      	mov	r0, r4
   b7666:	bd10      	pop	{r4, pc}
   b7668:	000b9c2c 	.word	0x000b9c2c

000b766c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b766c:	7c00      	ldrb	r0, [r0, #16]
   b766e:	2200      	movs	r2, #0
   b7670:	f7ff bd56 	b.w	b7120 <hal_i2c_set_speed>

000b7674 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7674:	2300      	movs	r3, #0
   b7676:	7c00      	ldrb	r0, [r0, #16]
   b7678:	461a      	mov	r2, r3
   b767a:	4619      	mov	r1, r3
   b767c:	f7ff bd58 	b.w	b7130 <hal_i2c_begin>

000b7680 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7680:	7c00      	ldrb	r0, [r0, #16]
   b7682:	2200      	movs	r2, #0
   b7684:	f7ff bd5c 	b.w	b7140 <hal_i2c_begin_transmission>

000b7688 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7688:	b2c9      	uxtb	r1, r1
   b768a:	f7ff bff9 	b.w	b7680 <_ZN7TwoWire17beginTransmissionEh>

000b768e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b768e:	7c00      	ldrb	r0, [r0, #16]
   b7690:	2200      	movs	r2, #0
   b7692:	f7ff bd5d 	b.w	b7150 <hal_i2c_end_transmission>

000b7696 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7696:	2101      	movs	r1, #1
   b7698:	f7ff bff9 	b.w	b768e <_ZN7TwoWire15endTransmissionEh>

000b769c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b769c:	f7ff bd28 	b.w	b70f0 <HAL_Interrupts_Disable_All>

000b76a0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b76a0:	f7ff bd1e 	b.w	b70e0 <HAL_Interrupts_Enable_All>

000b76a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b76a4:	4770      	bx	lr

000b76a6 <_ZN9IPAddressD0Ev>:
   b76a6:	b510      	push	{r4, lr}
   b76a8:	2118      	movs	r1, #24
   b76aa:	4604      	mov	r4, r0
   b76ac:	f7fc fcf3 	bl	b4096 <_ZdlPvj>
   b76b0:	4620      	mov	r0, r4
   b76b2:	bd10      	pop	{r4, pc}

000b76b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b76b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b76b6:	7d03      	ldrb	r3, [r0, #20]
   b76b8:	2b06      	cmp	r3, #6
{
   b76ba:	b08d      	sub	sp, #52	; 0x34
   b76bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76be:	f100 0704 	add.w	r7, r0, #4
   b76c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b76c6:	d012      	beq.n	b76ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b76c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b76cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b76d0:	220a      	movs	r2, #10
   b76d2:	4630      	mov	r0, r6
   b76d4:	f000 f95d 	bl	b7992 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b76d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b76da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b76dc:	d019      	beq.n	b7712 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b76de:	2c00      	cmp	r4, #0
   b76e0:	d0f4      	beq.n	b76cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b76e2:	212e      	movs	r1, #46	; 0x2e
   b76e4:	4630      	mov	r0, r6
   b76e6:	f000 f93b 	bl	b7960 <_ZN5Print5printEc>
   b76ea:	4404      	add	r4, r0
   b76ec:	e7ee      	b.n	b76cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76ee:	232f      	movs	r3, #47	; 0x2f
   b76f0:	466a      	mov	r2, sp
   b76f2:	4639      	mov	r1, r7
   b76f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b76f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76fa:	f7ff fd69 	bl	b71d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b76fe:	4668      	mov	r0, sp
   b7700:	f001 f874 	bl	b87ec <strlen>
   b7704:	6833      	ldr	r3, [r6, #0]
   b7706:	4602      	mov	r2, r0
   b7708:	68db      	ldr	r3, [r3, #12]
   b770a:	4669      	mov	r1, sp
   b770c:	4630      	mov	r0, r6
   b770e:	4798      	blx	r3
   b7710:	4604      	mov	r4, r0
    }
    return n;
}
   b7712:	4620      	mov	r0, r4
   b7714:	b00d      	add	sp, #52	; 0x34
   b7716:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7718 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7718:	b510      	push	{r4, lr}
   b771a:	4b05      	ldr	r3, [pc, #20]	; (b7730 <_ZN9IPAddressC1Ev+0x18>)
   b771c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b771e:	2211      	movs	r2, #17
   b7720:	f840 3b04 	str.w	r3, [r0], #4
   b7724:	2100      	movs	r1, #0
   b7726:	f001 f813 	bl	b8750 <memset>
}
   b772a:	4620      	mov	r0, r4
   b772c:	bd10      	pop	{r4, pc}
   b772e:	bf00      	nop
   b7730:	000b9c54 	.word	0x000b9c54

000b7734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7734:	4603      	mov	r3, r0
   b7736:	4a07      	ldr	r2, [pc, #28]	; (b7754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7738:	b510      	push	{r4, lr}
   b773a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b773e:	f101 0210 	add.w	r2, r1, #16
   b7742:	f851 4b04 	ldr.w	r4, [r1], #4
   b7746:	f843 4b04 	str.w	r4, [r3], #4
   b774a:	4291      	cmp	r1, r2
   b774c:	d1f9      	bne.n	b7742 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b774e:	780a      	ldrb	r2, [r1, #0]
   b7750:	701a      	strb	r2, [r3, #0]
}
   b7752:	bd10      	pop	{r4, pc}
   b7754:	000b9c54 	.word	0x000b9c54

000b7758 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7758:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b775a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b775e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7762:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7766:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b776a:	2304      	movs	r3, #4
   b776c:	6041      	str	r1, [r0, #4]
   b776e:	7503      	strb	r3, [r0, #20]
}
   b7770:	bd10      	pop	{r4, pc}
	...

000b7774 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7774:	b507      	push	{r0, r1, r2, lr}
   b7776:	4b06      	ldr	r3, [pc, #24]	; (b7790 <_ZN9IPAddressC1EPKh+0x1c>)
   b7778:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b777a:	78cb      	ldrb	r3, [r1, #3]
   b777c:	9300      	str	r3, [sp, #0]
   b777e:	788b      	ldrb	r3, [r1, #2]
   b7780:	784a      	ldrb	r2, [r1, #1]
   b7782:	7809      	ldrb	r1, [r1, #0]
   b7784:	f7ff ffe8 	bl	b7758 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7788:	b003      	add	sp, #12
   b778a:	f85d fb04 	ldr.w	pc, [sp], #4
   b778e:	bf00      	nop
   b7790:	000b9c54 	.word	0x000b9c54

000b7794 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7794:	4b01      	ldr	r3, [pc, #4]	; (b779c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7796:	4a02      	ldr	r2, [pc, #8]	; (b77a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7798:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b779a:	4770      	bx	lr
   b779c:	2003e6d0 	.word	0x2003e6d0
   b77a0:	000b9c60 	.word	0x000b9c60

000b77a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b77a4:	2300      	movs	r3, #0
   b77a6:	6840      	ldr	r0, [r0, #4]
   b77a8:	461a      	mov	r2, r3
   b77aa:	f7ff be1d 	b.w	b73e8 <network_connect>

000b77ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b77ae:	6840      	ldr	r0, [r0, #4]
   b77b0:	2200      	movs	r2, #0
   b77b2:	2102      	movs	r1, #2
   b77b4:	f7ff be28 	b.w	b7408 <network_disconnect>

000b77b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b77b8:	2200      	movs	r2, #0
   b77ba:	6840      	ldr	r0, [r0, #4]
   b77bc:	4611      	mov	r1, r2
   b77be:	f7ff be1b 	b.w	b73f8 <network_connecting>

000b77c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b77c2:	2200      	movs	r2, #0
   b77c4:	6840      	ldr	r0, [r0, #4]
   b77c6:	4611      	mov	r1, r2
   b77c8:	f7ff be26 	b.w	b7418 <network_ready>

000b77cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b77cc:	2300      	movs	r3, #0
   b77ce:	6840      	ldr	r0, [r0, #4]
   b77d0:	461a      	mov	r2, r3
   b77d2:	4619      	mov	r1, r3
   b77d4:	f7ff be28 	b.w	b7428 <network_on>

000b77d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b77d8:	2300      	movs	r3, #0
   b77da:	6840      	ldr	r0, [r0, #4]
   b77dc:	461a      	mov	r2, r3
   b77de:	4619      	mov	r1, r3
   b77e0:	f7ff be2a 	b.w	b7438 <network_off>

000b77e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b77e4:	6840      	ldr	r0, [r0, #4]
   b77e6:	2100      	movs	r1, #0
   b77e8:	f7ff be4e 	b.w	b7488 <network_is_on>

000b77ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b77ec:	6840      	ldr	r0, [r0, #4]
   b77ee:	2100      	movs	r1, #0
   b77f0:	f7ff be52 	b.w	b7498 <network_is_off>

000b77f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b77f4:	6840      	ldr	r0, [r0, #4]
   b77f6:	2200      	movs	r2, #0
   b77f8:	f081 0101 	eor.w	r1, r1, #1
   b77fc:	f7ff be24 	b.w	b7448 <network_listen>

000b7800 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7800:	6840      	ldr	r0, [r0, #4]
   b7802:	2200      	movs	r2, #0
   b7804:	f7ff be30 	b.w	b7468 <network_set_listen_timeout>

000b7808 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7808:	2200      	movs	r2, #0
   b780a:	6840      	ldr	r0, [r0, #4]
   b780c:	4611      	mov	r1, r2
   b780e:	f7ff be33 	b.w	b7478 <network_get_listen_timeout>

000b7812 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7812:	2200      	movs	r2, #0
   b7814:	6840      	ldr	r0, [r0, #4]
   b7816:	4611      	mov	r1, r2
   b7818:	f7ff be1e 	b.w	b7458 <network_listening>

000b781c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b781c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7820:	b095      	sub	sp, #84	; 0x54
   b7822:	4614      	mov	r4, r2
   b7824:	460d      	mov	r5, r1
   b7826:	4607      	mov	r7, r0
    IPAddress addr;
   b7828:	f7ff ff76 	bl	b7718 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b782c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b782e:	221c      	movs	r2, #28
   b7830:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7832:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7834:	f000 ff8c 	bl	b8750 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7838:	2340      	movs	r3, #64	; 0x40
   b783a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b783c:	4620      	mov	r0, r4
   b783e:	466b      	mov	r3, sp
   b7840:	aa0c      	add	r2, sp, #48	; 0x30
   b7842:	2100      	movs	r1, #0
   b7844:	f7ff fcd4 	bl	b71f0 <netdb_getaddrinfo>
    if (!r) {
   b7848:	4604      	mov	r4, r0
   b784a:	2800      	cmp	r0, #0
   b784c:	d14b      	bne.n	b78e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b784e:	4602      	mov	r2, r0
   b7850:	2101      	movs	r1, #1
   b7852:	6868      	ldr	r0, [r5, #4]
   b7854:	f7ff fde0 	bl	b7418 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7858:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b785a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b785c:	4622      	mov	r2, r4
   b785e:	6868      	ldr	r0, [r5, #4]
   b7860:	f7ff fdda 	bl	b7418 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7864:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7866:	4681      	mov	r9, r0
        bool ok = false;
   b7868:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b786a:	2e00      	cmp	r6, #0
   b786c:	d03b      	beq.n	b78e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b786e:	2900      	cmp	r1, #0
   b7870:	d139      	bne.n	b78e6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7872:	6873      	ldr	r3, [r6, #4]
   b7874:	2b02      	cmp	r3, #2
   b7876:	d003      	beq.n	b7880 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7878:	2b0a      	cmp	r3, #10
   b787a:	d011      	beq.n	b78a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b787c:	69f6      	ldr	r6, [r6, #28]
   b787e:	e7f4      	b.n	b786a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7880:	f1b8 0f00 	cmp.w	r8, #0
   b7884:	d0fa      	beq.n	b787c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7886:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7888:	a806      	add	r0, sp, #24
   b788a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b788c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b788e:	f7ff ff71 	bl	b7774 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7894:	1d3c      	adds	r4, r7, #4
   b7896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7898:	682b      	ldr	r3, [r5, #0]
   b789a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b789c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b789e:	e7ed      	b.n	b787c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b78a0:	f1b9 0f00 	cmp.w	r9, #0
   b78a4:	d0ea      	beq.n	b787c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b78a6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b78a8:	2210      	movs	r2, #16
   b78aa:	a801      	add	r0, sp, #4
   b78ac:	f000 ff50 	bl	b8750 <memset>
                    a.v = 6;
   b78b0:	2306      	movs	r3, #6
   b78b2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b78b6:	ad01      	add	r5, sp, #4
   b78b8:	f104 0308 	add.w	r3, r4, #8
   b78bc:	3418      	adds	r4, #24
   b78be:	6818      	ldr	r0, [r3, #0]
   b78c0:	6859      	ldr	r1, [r3, #4]
   b78c2:	462a      	mov	r2, r5
   b78c4:	c203      	stmia	r2!, {r0, r1}
   b78c6:	3308      	adds	r3, #8
   b78c8:	42a3      	cmp	r3, r4
   b78ca:	4615      	mov	r5, r2
   b78cc:	d1f7      	bne.n	b78be <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b78ce:	a901      	add	r1, sp, #4
   b78d0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b78d2:	ad07      	add	r5, sp, #28
   b78d4:	f7ff ff2e 	bl	b7734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b78d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78da:	1d3c      	adds	r4, r7, #4
   b78dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78de:	682b      	ldr	r3, [r5, #0]
   b78e0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b78e2:	4649      	mov	r1, r9
   b78e4:	e7ca      	b.n	b787c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b78e6:	9800      	ldr	r0, [sp, #0]
   b78e8:	f7ff fc7a 	bl	b71e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b78ec:	4638      	mov	r0, r7
   b78ee:	b015      	add	sp, #84	; 0x54
   b78f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b78f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b78f4:	4b02      	ldr	r3, [pc, #8]	; (b7900 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b78f6:	4a03      	ldr	r2, [pc, #12]	; (b7904 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b78f8:	601a      	str	r2, [r3, #0]
   b78fa:	2200      	movs	r2, #0
   b78fc:	605a      	str	r2, [r3, #4]

} // spark
   b78fe:	4770      	bx	lr
   b7900:	2003e6d4 	.word	0x2003e6d4
   b7904:	000b9c6c 	.word	0x000b9c6c

000b7908 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b790a:	4606      	mov	r6, r0
   b790c:	460d      	mov	r5, r1
  size_t n = 0;
   b790e:	188f      	adds	r7, r1, r2
   b7910:	2400      	movs	r4, #0
  while (size--) {
   b7912:	42bd      	cmp	r5, r7
   b7914:	d00c      	beq.n	b7930 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7916:	6833      	ldr	r3, [r6, #0]
   b7918:	f815 1b01 	ldrb.w	r1, [r5], #1
   b791c:	689b      	ldr	r3, [r3, #8]
   b791e:	4630      	mov	r0, r6
   b7920:	4798      	blx	r3
     if (chunk>=0)
   b7922:	1e03      	subs	r3, r0, #0
   b7924:	db01      	blt.n	b792a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7926:	441c      	add	r4, r3
  while (size--) {
   b7928:	e7f3      	b.n	b7912 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b792a:	2c00      	cmp	r4, #0
   b792c:	bf08      	it	eq
   b792e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7930:	4620      	mov	r0, r4
   b7932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7934 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7934:	b513      	push	{r0, r1, r4, lr}
   b7936:	4604      	mov	r4, r0
    }
   b7938:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b793a:	b159      	cbz	r1, b7954 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b793c:	9101      	str	r1, [sp, #4]
   b793e:	f000 ff55 	bl	b87ec <strlen>
   b7942:	6823      	ldr	r3, [r4, #0]
   b7944:	9901      	ldr	r1, [sp, #4]
   b7946:	68db      	ldr	r3, [r3, #12]
   b7948:	4602      	mov	r2, r0
   b794a:	4620      	mov	r0, r4
    }
   b794c:	b002      	add	sp, #8
   b794e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7952:	4718      	bx	r3
    }
   b7954:	b002      	add	sp, #8
   b7956:	bd10      	pop	{r4, pc}

000b7958 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7958:	b508      	push	{r3, lr}
  return write(str);
   b795a:	f7ff ffeb 	bl	b7934 <_ZN5Print5writeEPKc>
}
   b795e:	bd08      	pop	{r3, pc}

000b7960 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7960:	6803      	ldr	r3, [r0, #0]
   b7962:	689b      	ldr	r3, [r3, #8]
   b7964:	4718      	bx	r3

000b7966 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7966:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7968:	210d      	movs	r1, #13
{
   b796a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b796c:	f7ff fff8 	bl	b7960 <_ZN5Print5printEc>
  n += print('\n');
   b7970:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7972:	4604      	mov	r4, r0
  n += print('\n');
   b7974:	4628      	mov	r0, r5
   b7976:	f7ff fff3 	bl	b7960 <_ZN5Print5printEc>
  return n;
}
   b797a:	4420      	add	r0, r4
   b797c:	bd38      	pop	{r3, r4, r5, pc}

000b797e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b797e:	b538      	push	{r3, r4, r5, lr}
   b7980:	4605      	mov	r5, r0
  return write(str);
   b7982:	f7ff ffd7 	bl	b7934 <_ZN5Print5writeEPKc>
   b7986:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7988:	4628      	mov	r0, r5
   b798a:	f7ff ffec 	bl	b7966 <_ZN5Print7printlnEv>
  return n;
}
   b798e:	4420      	add	r0, r4
   b7990:	bd38      	pop	{r3, r4, r5, pc}

000b7992 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7992:	b530      	push	{r4, r5, lr}
   b7994:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7996:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7998:	2a01      	cmp	r2, #1
  *str = '\0';
   b799a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b799e:	bf98      	it	ls
   b79a0:	220a      	movls	r2, #10
   b79a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b79a4:	460d      	mov	r5, r1
   b79a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b79aa:	fb01 5312 	mls	r3, r1, r2, r5
   b79ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79b2:	2b09      	cmp	r3, #9
   b79b4:	bf94      	ite	ls
   b79b6:	3330      	addls	r3, #48	; 0x30
   b79b8:	3337      	addhi	r3, #55	; 0x37
   b79ba:	b2db      	uxtb	r3, r3
  } while(n);
   b79bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b79c2:	d9ef      	bls.n	b79a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b79c4:	4621      	mov	r1, r4
   b79c6:	f7ff ffb5 	bl	b7934 <_ZN5Print5writeEPKc>
}
   b79ca:	b00b      	add	sp, #44	; 0x2c
   b79cc:	bd30      	pop	{r4, r5, pc}

000b79ce <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b79ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79d2:	b086      	sub	sp, #24
   b79d4:	af00      	add	r7, sp, #0
   b79d6:	4605      	mov	r5, r0
   b79d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b79da:	1d38      	adds	r0, r7, #4
   b79dc:	2114      	movs	r1, #20
{
   b79de:	4614      	mov	r4, r2
    va_copy(args2, args);
   b79e0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b79e2:	f7ff fd81 	bl	b74e8 <vsnprintf>

    if (n<bufsize)
   b79e6:	2813      	cmp	r0, #19
   b79e8:	d80e      	bhi.n	b7a08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b79ea:	1d39      	adds	r1, r7, #4
   b79ec:	4628      	mov	r0, r5
   b79ee:	f7ff ffa1 	bl	b7934 <_ZN5Print5writeEPKc>
   b79f2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b79f4:	b11e      	cbz	r6, b79fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b79f6:	4628      	mov	r0, r5
   b79f8:	f7ff ffb5 	bl	b7966 <_ZN5Print7printlnEv>
   b79fc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b79fe:	4620      	mov	r0, r4
   b7a00:	3718      	adds	r7, #24
   b7a02:	46bd      	mov	sp, r7
   b7a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7a08:	f100 0308 	add.w	r3, r0, #8
   b7a0c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7a10:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7a12:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7a16:	4622      	mov	r2, r4
   b7a18:	1c41      	adds	r1, r0, #1
   b7a1a:	683b      	ldr	r3, [r7, #0]
   b7a1c:	4668      	mov	r0, sp
   b7a1e:	f7ff fd63 	bl	b74e8 <vsnprintf>
  return write(str);
   b7a22:	4669      	mov	r1, sp
   b7a24:	4628      	mov	r0, r5
   b7a26:	f7ff ff85 	bl	b7934 <_ZN5Print5writeEPKc>
   b7a2a:	4604      	mov	r4, r0
   b7a2c:	46c5      	mov	sp, r8
   b7a2e:	e7e1      	b.n	b79f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7a30 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7a30:	4b01      	ldr	r3, [pc, #4]	; (b7a38 <_GLOBAL__sub_I_RGB+0x8>)
   b7a32:	2200      	movs	r2, #0
   b7a34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7a36:	4770      	bx	lr
   b7a38:	2003e6dc 	.word	0x2003e6dc

000b7a3c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7a3c:	2100      	movs	r1, #0
   b7a3e:	f7ff bc17 	b.w	b7270 <hal_spi_release>

000b7a42 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7a42:	2100      	movs	r1, #0
   b7a44:	f7ff bc0c 	b.w	b7260 <hal_spi_acquire>

000b7a48 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7a48:	b510      	push	{r4, lr}
   b7a4a:	4604      	mov	r4, r0
   b7a4c:	4608      	mov	r0, r1
{
    _spi = spi;
   b7a4e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7a50:	f7ff fbe6 	bl	b7220 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7a54:	2300      	movs	r3, #0
   b7a56:	6063      	str	r3, [r4, #4]
}
   b7a58:	4620      	mov	r0, r4
   b7a5a:	bd10      	pop	{r4, pc}

000b7a5c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7a5c:	b513      	push	{r0, r1, r4, lr}
   b7a5e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7a60:	7800      	ldrb	r0, [r0, #0]
   b7a62:	f7ff ffee 	bl	b7a42 <_ZN8SPIClass4lockEv.isra.0>
   b7a66:	b958      	cbnz	r0, b7a80 <_ZN8SPIClass5beginEv+0x24>
   b7a68:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7a6a:	9001      	str	r0, [sp, #4]
   b7a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7a70:	f7ff fbc6 	bl	b7200 <hal_spi_begin>
        unlock();
   b7a74:	9801      	ldr	r0, [sp, #4]
    }
}
   b7a76:	b002      	add	sp, #8
   b7a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7a7c:	f7ff bfde 	b.w	b7a3c <_ZN8SPIClass6unlockEv.isra.0>
   b7a80:	b002      	add	sp, #8
   b7a82:	bd10      	pop	{r4, pc}

000b7a84 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7a84:	7800      	ldrb	r0, [r0, #0]
   b7a86:	f7ff bfd9 	b.w	b7a3c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7a8c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7a8c:	0840      	lsrs	r0, r0, #1
{
   b7a8e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7a90:	6018      	str	r0, [r3, #0]
   b7a92:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7a94:	6818      	ldr	r0, [r3, #0]
   b7a96:	4288      	cmp	r0, r1
   b7a98:	b2e5      	uxtb	r5, r4
   b7a9a:	d906      	bls.n	b7aaa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7a9c:	3401      	adds	r4, #1
   b7a9e:	2c08      	cmp	r4, #8
   b7aa0:	d002      	beq.n	b7aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7aa2:	0840      	lsrs	r0, r0, #1
   b7aa4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7aa6:	e7f5      	b.n	b7a94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7aa8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7aaa:	4b02      	ldr	r3, [pc, #8]	; (b7ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7aac:	5d5b      	ldrb	r3, [r3, r5]
   b7aae:	7013      	strb	r3, [r2, #0]
}
   b7ab0:	bd30      	pop	{r4, r5, pc}
   b7ab2:	bf00      	nop
   b7ab4:	000b9ca0 	.word	0x000b9ca0

000b7ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7abc:	4606      	mov	r6, r0
   b7abe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7ac0:	7800      	ldrb	r0, [r0, #0]
{
   b7ac2:	460c      	mov	r4, r1
    CHECK(lock());
   b7ac4:	f7ff ffbd 	bl	b7a42 <_ZN8SPIClass4lockEv.isra.0>
   b7ac8:	2800      	cmp	r0, #0
   b7aca:	db1b      	blt.n	b7b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7acc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7ace:	2214      	movs	r2, #20
   b7ad0:	2100      	movs	r1, #0
   b7ad2:	a809      	add	r0, sp, #36	; 0x24
   b7ad4:	f000 fe3c 	bl	b8750 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ad8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7ada:	2200      	movs	r2, #0
   b7adc:	a909      	add	r1, sp, #36	; 0x24
   b7ade:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ae0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7ae4:	f7ff fbac 	bl	b7240 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7ae8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7aec:	b113      	cbz	r3, b7af4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7aee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7af2:	b155      	cbz	r5, b7b0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7af4:	2700      	movs	r7, #0
   b7af6:	46b9      	mov	r9, r7
   b7af8:	46b8      	mov	r8, r7
   b7afa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7afc:	7923      	ldrb	r3, [r4, #4]
   b7afe:	b15d      	cbz	r5, b7b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7b00:	b1c3      	cbz	r3, b7b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7b02:	2000      	movs	r0, #0
}
   b7b04:	b00f      	add	sp, #60	; 0x3c
   b7b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7b0a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7b0e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7b12:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7b16:	e7f1      	b.n	b7afc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7b18:	2b00      	cmp	r3, #0
   b7b1a:	d135      	bne.n	b7b88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7b1c:	68a3      	ldr	r3, [r4, #8]
   b7b1e:	4543      	cmp	r3, r8
   b7b20:	d108      	bne.n	b7b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7b22:	f88d 9020 	strb.w	r9, [sp, #32]
   b7b26:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7b2a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7b2e:	89a3      	ldrh	r3, [r4, #12]
   b7b30:	429a      	cmp	r2, r3
   b7b32:	d0e6      	beq.n	b7b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7b34:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7b36:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7b38:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7b3e:	ab04      	add	r3, sp, #16
   b7b40:	f10d 020f 	add.w	r2, sp, #15
   b7b44:	f7ff ffa2 	bl	b7a8c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7b48:	7921      	ldrb	r1, [r4, #4]
   b7b4a:	b985      	cbnz	r5, b7b6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7b4c:	b989      	cbnz	r1, b7b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7b4e:	68a3      	ldr	r3, [r4, #8]
   b7b50:	4543      	cmp	r3, r8
   b7b52:	d30e      	bcc.n	b7b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7b54:	f88d 9020 	strb.w	r9, [sp, #32]
   b7b58:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7b5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7b60:	89a3      	ldrh	r3, [r4, #12]
   b7b62:	429a      	cmp	r2, r3
   b7b64:	d105      	bne.n	b7b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7b66:	9b04      	ldr	r3, [sp, #16]
   b7b68:	4543      	cmp	r3, r8
   b7b6a:	d102      	bne.n	b7b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7b6c:	e7c9      	b.n	b7b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7b6e:	2900      	cmp	r1, #0
   b7b70:	d1f9      	bne.n	b7b66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7b72:	2300      	movs	r3, #0
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	7b63      	ldrb	r3, [r4, #13]
   b7b78:	9300      	str	r3, [sp, #0]
   b7b7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7b7e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7b80:	7830      	ldrb	r0, [r6, #0]
   b7b82:	f7ff fb65 	bl	b7250 <hal_spi_set_settings>
   b7b86:	e7bc      	b.n	b7b02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7b88:	e9cd 5500 	strd	r5, r5, [sp]
   b7b8c:	462b      	mov	r3, r5
   b7b8e:	462a      	mov	r2, r5
   b7b90:	2101      	movs	r1, #1
   b7b92:	e7f5      	b.n	b7b80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7b94 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7b94:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7b96:	7800      	ldrb	r0, [r0, #0]
   b7b98:	f7ff fb3a 	bl	b7210 <hal_spi_transfer>
}
   b7b9c:	b2c0      	uxtb	r0, r0
   b7b9e:	bd08      	pop	{r3, pc}

000b7ba0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7ba0:	b510      	push	{r4, lr}
   b7ba2:	4604      	mov	r4, r0
{
	free(buffer);
   b7ba4:	6800      	ldr	r0, [r0, #0]
   b7ba6:	f7ff fc87 	bl	b74b8 <free>
}
   b7baa:	4620      	mov	r0, r4
   b7bac:	bd10      	pop	{r4, pc}

000b7bae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7bae:	b510      	push	{r4, lr}
   b7bb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7bb2:	6800      	ldr	r0, [r0, #0]
   b7bb4:	b108      	cbz	r0, b7bba <_ZN6String10invalidateEv+0xc>
   b7bb6:	f7ff fc7f 	bl	b74b8 <free>
	buffer = NULL;
   b7bba:	2300      	movs	r3, #0
	capacity = len = 0;
   b7bbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7bc0:	6023      	str	r3, [r4, #0]
}
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7bc4:	b538      	push	{r3, r4, r5, lr}
   b7bc6:	4604      	mov	r4, r0
   b7bc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7bca:	6800      	ldr	r0, [r0, #0]
   b7bcc:	3101      	adds	r1, #1
   b7bce:	f7ff fc7b 	bl	b74c8 <realloc>
	if (newbuffer) {
   b7bd2:	b110      	cbz	r0, b7bda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7bd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7bd8:	2001      	movs	r0, #1
	}
	return 0;
}
   b7bda:	bd38      	pop	{r3, r4, r5, pc}

000b7bdc <_ZN6String7reserveEj>:
{
   b7bdc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7bde:	6803      	ldr	r3, [r0, #0]
{
   b7be0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7be2:	b123      	cbz	r3, b7bee <_ZN6String7reserveEj+0x12>
   b7be4:	6843      	ldr	r3, [r0, #4]
   b7be6:	428b      	cmp	r3, r1
   b7be8:	d301      	bcc.n	b7bee <_ZN6String7reserveEj+0x12>
   b7bea:	2001      	movs	r0, #1
}
   b7bec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7bee:	4620      	mov	r0, r4
   b7bf0:	f7ff ffe8 	bl	b7bc4 <_ZN6String12changeBufferEj>
   b7bf4:	2800      	cmp	r0, #0
   b7bf6:	d0f9      	beq.n	b7bec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7bf8:	68a3      	ldr	r3, [r4, #8]
   b7bfa:	2b00      	cmp	r3, #0
   b7bfc:	d1f5      	bne.n	b7bea <_ZN6String7reserveEj+0xe>
   b7bfe:	6822      	ldr	r2, [r4, #0]
   b7c00:	7013      	strb	r3, [r2, #0]
   b7c02:	e7f2      	b.n	b7bea <_ZN6String7reserveEj+0xe>

000b7c04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7c08:	4611      	mov	r1, r2
   b7c0a:	9201      	str	r2, [sp, #4]
{
   b7c0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7c0e:	f7ff ffe5 	bl	b7bdc <_ZN6String7reserveEj>
   b7c12:	9a01      	ldr	r2, [sp, #4]
   b7c14:	b928      	cbnz	r0, b7c22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7c16:	4620      	mov	r0, r4
   b7c18:	f7ff ffc9 	bl	b7bae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	b003      	add	sp, #12
   b7c20:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7c22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7c24:	4629      	mov	r1, r5
   b7c26:	6820      	ldr	r0, [r4, #0]
   b7c28:	f000 fd84 	bl	b8734 <memcpy>
	buffer[len] = 0;
   b7c2c:	6822      	ldr	r2, [r4, #0]
   b7c2e:	68a3      	ldr	r3, [r4, #8]
   b7c30:	2100      	movs	r1, #0
   b7c32:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7c34:	e7f2      	b.n	b7c1c <_ZN6String4copyEPKcj+0x18>

000b7c36 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7c36:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7c38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7c3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7c3e:	4604      	mov	r4, r0
	len = 0;
   b7c40:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7c42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7c44:	b141      	cbz	r1, b7c58 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7c46:	4608      	mov	r0, r1
   b7c48:	9101      	str	r1, [sp, #4]
   b7c4a:	f000 fdcf 	bl	b87ec <strlen>
   b7c4e:	9901      	ldr	r1, [sp, #4]
   b7c50:	4602      	mov	r2, r0
   b7c52:	4620      	mov	r0, r4
   b7c54:	f7ff ffd6 	bl	b7c04 <_ZN6String4copyEPKcj>
}
   b7c58:	4620      	mov	r0, r4
   b7c5a:	b002      	add	sp, #8
   b7c5c:	bd10      	pop	{r4, pc}

000b7c5e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7c5e:	4288      	cmp	r0, r1
{
   b7c60:	b510      	push	{r4, lr}
   b7c62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7c64:	d005      	beq.n	b7c72 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7c66:	680b      	ldr	r3, [r1, #0]
   b7c68:	b12b      	cbz	r3, b7c76 <_ZN6StringaSERKS_+0x18>
   b7c6a:	688a      	ldr	r2, [r1, #8]
   b7c6c:	4619      	mov	r1, r3
   b7c6e:	f7ff ffc9 	bl	b7c04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7c72:	4620      	mov	r0, r4
   b7c74:	bd10      	pop	{r4, pc}
	else invalidate();
   b7c76:	f7ff ff9a 	bl	b7bae <_ZN6String10invalidateEv>
   b7c7a:	e7fa      	b.n	b7c72 <_ZN6StringaSERKS_+0x14>

000b7c7c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7c7c:	b510      	push	{r4, lr}
	buffer = NULL;
   b7c7e:	2300      	movs	r3, #0
String::String(const String &value)
   b7c80:	4604      	mov	r4, r0
	capacity = 0;
   b7c82:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7c86:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7c88:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7c8a:	f7ff ffe8 	bl	b7c5e <_ZN6StringaSERKS_>
}
   b7c8e:	4620      	mov	r0, r4
   b7c90:	bd10      	pop	{r4, pc}

000b7c92 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7c92:	b513      	push	{r0, r1, r4, lr}
   b7c94:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7c96:	b159      	cbz	r1, b7cb0 <_ZN6StringaSEPKc+0x1e>
   b7c98:	4608      	mov	r0, r1
   b7c9a:	9101      	str	r1, [sp, #4]
   b7c9c:	f000 fda6 	bl	b87ec <strlen>
   b7ca0:	9901      	ldr	r1, [sp, #4]
   b7ca2:	4602      	mov	r2, r0
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	f7ff ffad 	bl	b7c04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7caa:	4620      	mov	r0, r4
   b7cac:	b002      	add	sp, #8
   b7cae:	bd10      	pop	{r4, pc}
	else invalidate();
   b7cb0:	f7ff ff7d 	bl	b7bae <_ZN6String10invalidateEv>
   b7cb4:	e7f9      	b.n	b7caa <_ZN6StringaSEPKc+0x18>

000b7cb6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7cb6:	b510      	push	{r4, lr}
   b7cb8:	4604      	mov	r4, r0
   b7cba:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7cbc:	2300      	movs	r3, #0
	capacity = 0;
   b7cbe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7cc2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7cc4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7cc6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7cc8:	a901      	add	r1, sp, #4
   b7cca:	f000 f9a5 	bl	b8018 <itoa>
	*this = buf;
   b7cce:	a901      	add	r1, sp, #4
   b7cd0:	4620      	mov	r0, r4
   b7cd2:	f7ff ffde 	bl	b7c92 <_ZN6StringaSEPKc>
}
   b7cd6:	4620      	mov	r0, r4
   b7cd8:	b00a      	add	sp, #40	; 0x28
   b7cda:	bd10      	pop	{r4, pc}

000b7cdc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7cdc:	b570      	push	{r4, r5, r6, lr}
   b7cde:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7ce0:	460e      	mov	r6, r1
   b7ce2:	b909      	cbnz	r1, b7ce8 <_ZN6String6concatEPKcj+0xc>
   b7ce4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7ce6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7ce8:	b16a      	cbz	r2, b7d06 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7cea:	6884      	ldr	r4, [r0, #8]
   b7cec:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7cee:	4621      	mov	r1, r4
   b7cf0:	f7ff ff74 	bl	b7bdc <_ZN6String7reserveEj>
   b7cf4:	2800      	cmp	r0, #0
   b7cf6:	d0f5      	beq.n	b7ce4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7cf8:	6828      	ldr	r0, [r5, #0]
   b7cfa:	68ab      	ldr	r3, [r5, #8]
   b7cfc:	4631      	mov	r1, r6
   b7cfe:	4418      	add	r0, r3
   b7d00:	f000 fd6c 	bl	b87dc <strcpy>
	len = newlen;
   b7d04:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7d06:	2001      	movs	r0, #1
   b7d08:	e7ed      	b.n	b7ce6 <_ZN6String6concatEPKcj+0xa>

000b7d0a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7d0a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7d0c:	688a      	ldr	r2, [r1, #8]
   b7d0e:	6809      	ldr	r1, [r1, #0]
{
   b7d10:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7d12:	f7ff ffe3 	bl	b7cdc <_ZN6String6concatEPKcj>
   b7d16:	b910      	cbnz	r0, b7d1e <_ZplRK15StringSumHelperRK6String+0x14>
   b7d18:	4620      	mov	r0, r4
   b7d1a:	f7ff ff48 	bl	b7bae <_ZN6String10invalidateEv>
	return a;
}
   b7d1e:	4620      	mov	r0, r4
   b7d20:	bd10      	pop	{r4, pc}

000b7d22 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7d22:	b513      	push	{r0, r1, r4, lr}
   b7d24:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7d26:	b929      	cbnz	r1, b7d34 <_ZplRK15StringSumHelperPKc+0x12>
   b7d28:	4620      	mov	r0, r4
   b7d2a:	f7ff ff40 	bl	b7bae <_ZN6String10invalidateEv>
	return a;
}
   b7d2e:	4620      	mov	r0, r4
   b7d30:	b002      	add	sp, #8
   b7d32:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7d34:	4608      	mov	r0, r1
   b7d36:	9101      	str	r1, [sp, #4]
   b7d38:	f000 fd58 	bl	b87ec <strlen>
   b7d3c:	9901      	ldr	r1, [sp, #4]
   b7d3e:	4602      	mov	r2, r0
   b7d40:	4620      	mov	r0, r4
   b7d42:	f7ff ffcb 	bl	b7cdc <_ZN6String6concatEPKcj>
   b7d46:	2800      	cmp	r0, #0
   b7d48:	d0ee      	beq.n	b7d28 <_ZplRK15StringSumHelperPKc+0x6>
   b7d4a:	e7f0      	b.n	b7d2e <_ZplRK15StringSumHelperPKc+0xc>

000b7d4c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7d4c:	4b05      	ldr	r3, [pc, #20]	; (b7d64 <_GLOBAL__sub_I_System+0x18>)
   b7d4e:	2202      	movs	r2, #2
   b7d50:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7d52:	4b05      	ldr	r3, [pc, #20]	; (b7d68 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7d54:	4a05      	ldr	r2, [pc, #20]	; (b7d6c <_GLOBAL__sub_I_System+0x20>)
   b7d56:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7d58:	2000      	movs	r0, #0
   b7d5a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7d5e:	f7ff bb0f 	b.w	b7380 <set_system_mode>
   b7d62:	bf00      	nop
   b7d64:	2003e6f8 	.word	0x2003e6f8
   b7d68:	2003e6ec 	.word	0x2003e6ec
   b7d6c:	ffff0000 	.word	0xffff0000

000b7d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7d70:	4b02      	ldr	r3, [pc, #8]	; (b7d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7d72:	681a      	ldr	r2, [r3, #0]
   b7d74:	4b02      	ldr	r3, [pc, #8]	; (b7d80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7d76:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7d78:	4770      	bx	lr
   b7d7a:	bf00      	nop
   b7d7c:	2003df7c 	.word	0x2003df7c
   b7d80:	2003e6fc 	.word	0x2003e6fc

000b7d84 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7d84:	4770      	bx	lr

000b7d86 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d86:	7441      	strb	r1, [r0, #17]
}
   b7d88:	4770      	bx	lr

000b7d8a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7d8a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
   b7d8e:	f7ff faa7 	bl	b72e0 <hal_usart_available_data_for_write>
}
   b7d92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d96:	bd08      	pop	{r3, pc}

000b7d98 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7d98:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7d9a:	7c00      	ldrb	r0, [r0, #16]
   b7d9c:	f7ff fa78 	bl	b7290 <hal_usart_available>
}
   b7da0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7da4:	bd08      	pop	{r3, pc}

000b7da6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7da6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7da8:	7c00      	ldrb	r0, [r0, #16]
   b7daa:	f7ff fa81 	bl	b72b0 <hal_usart_peek>
}
   b7dae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7db2:	bd08      	pop	{r3, pc}

000b7db4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7db4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7db6:	7c00      	ldrb	r0, [r0, #16]
   b7db8:	f7ff fa72 	bl	b72a0 <hal_usart_read>
}
   b7dbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7dc0:	bd08      	pop	{r3, pc}

000b7dc2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7dc2:	7c00      	ldrb	r0, [r0, #16]
   b7dc4:	f7ff ba7c 	b.w	b72c0 <hal_usart_flush>

000b7dc8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7dca:	7c45      	ldrb	r5, [r0, #17]
{
   b7dcc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7dce:	b12d      	cbz	r5, b7ddc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7dd0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7dd2:	b003      	add	sp, #12
   b7dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7dd8:	f7ff ba52 	b.w	b7280 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ddc:	7c00      	ldrb	r0, [r0, #16]
   b7dde:	9101      	str	r1, [sp, #4]
   b7de0:	f7ff fa7e 	bl	b72e0 <hal_usart_available_data_for_write>
   b7de4:	2800      	cmp	r0, #0
   b7de6:	9901      	ldr	r1, [sp, #4]
   b7de8:	dcf2      	bgt.n	b7dd0 <_ZN11USARTSerial5writeEh+0x8>
}
   b7dea:	4628      	mov	r0, r5
   b7dec:	b003      	add	sp, #12
   b7dee:	bd30      	pop	{r4, r5, pc}

000b7df0 <_ZN11USARTSerialD0Ev>:
   b7df0:	b510      	push	{r4, lr}
   b7df2:	2114      	movs	r1, #20
   b7df4:	4604      	mov	r4, r0
   b7df6:	f7fc f94e 	bl	b4096 <_ZdlPvj>
   b7dfa:	4620      	mov	r0, r4
   b7dfc:	bd10      	pop	{r4, pc}
	...

000b7e00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7e00:	b510      	push	{r4, lr}
   b7e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e06:	4604      	mov	r4, r0
   b7e08:	4608      	mov	r0, r1
   b7e0a:	4611      	mov	r1, r2
   b7e0c:	2200      	movs	r2, #0
   b7e0e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7e12:	4b04      	ldr	r3, [pc, #16]	; (b7e24 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7e14:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e16:	2301      	movs	r3, #1
  _serial = serial;
   b7e18:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e1a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7e1c:	f7ff fa68 	bl	b72f0 <hal_usart_init_ex>
}
   b7e20:	4620      	mov	r0, r4
   b7e22:	bd10      	pop	{r4, pc}
   b7e24:	000b9ccc 	.word	0x000b9ccc

000b7e28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e28:	7441      	strb	r1, [r0, #17]
}
   b7e2a:	4770      	bx	lr

000b7e2c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e2c:	4770      	bx	lr

000b7e2e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7e2e:	4770      	bx	lr

000b7e30 <_ZN9USBSerial4readEv>:
{
   b7e30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7e32:	2100      	movs	r1, #0
   b7e34:	7c00      	ldrb	r0, [r0, #16]
   b7e36:	f7ff fa83 	bl	b7340 <HAL_USB_USART_Receive_Data>
}
   b7e3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e3e:	bd08      	pop	{r3, pc}

000b7e40 <_ZN9USBSerial4peekEv>:
{
   b7e40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7e42:	2101      	movs	r1, #1
   b7e44:	7c00      	ldrb	r0, [r0, #16]
   b7e46:	f7ff fa7b 	bl	b7340 <HAL_USB_USART_Receive_Data>
}
   b7e4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e4e:	bd08      	pop	{r3, pc}

000b7e50 <_ZN9USBSerial17availableForWriteEv>:
{
   b7e50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7e52:	7c00      	ldrb	r0, [r0, #16]
   b7e54:	f7ff fa6c 	bl	b7330 <HAL_USB_USART_Available_Data_For_Write>
}
   b7e58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e5c:	bd08      	pop	{r3, pc}

000b7e5e <_ZN9USBSerial9availableEv>:
{
   b7e5e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7e60:	7c00      	ldrb	r0, [r0, #16]
   b7e62:	f7ff fa5d 	bl	b7320 <HAL_USB_USART_Available_Data>
}
   b7e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e6a:	bd08      	pop	{r3, pc}

000b7e6c <_ZN9USBSerial5writeEh>:
{
   b7e6c:	b513      	push	{r0, r1, r4, lr}
   b7e6e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e70:	7c00      	ldrb	r0, [r0, #16]
{
   b7e72:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e74:	f7ff fa5c 	bl	b7330 <HAL_USB_USART_Available_Data_For_Write>
   b7e78:	2800      	cmp	r0, #0
   b7e7a:	9901      	ldr	r1, [sp, #4]
   b7e7c:	dc01      	bgt.n	b7e82 <_ZN9USBSerial5writeEh+0x16>
   b7e7e:	7c60      	ldrb	r0, [r4, #17]
   b7e80:	b120      	cbz	r0, b7e8c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7e82:	7c20      	ldrb	r0, [r4, #16]
   b7e84:	f7ff fa64 	bl	b7350 <HAL_USB_USART_Send_Data>
   b7e88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7e8c:	b002      	add	sp, #8
   b7e8e:	bd10      	pop	{r4, pc}

000b7e90 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7e90:	7c00      	ldrb	r0, [r0, #16]
   b7e92:	f7ff ba65 	b.w	b7360 <HAL_USB_USART_Flush_Data>

000b7e96 <_ZN9USBSerialD0Ev>:
   b7e96:	b510      	push	{r4, lr}
   b7e98:	2114      	movs	r1, #20
   b7e9a:	4604      	mov	r4, r0
   b7e9c:	f7fc f8fb 	bl	b4096 <_ZdlPvj>
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	bd10      	pop	{r4, pc}

000b7ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7ea4:	b510      	push	{r4, lr}
   b7ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7eaa:	4604      	mov	r4, r0
   b7eac:	4608      	mov	r0, r1
   b7eae:	2100      	movs	r1, #0
   b7eb0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7eb4:	4b04      	ldr	r3, [pc, #16]	; (b7ec8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7eb6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7eb8:	2301      	movs	r3, #1
  _serial = serial;
   b7eba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ebc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7ebe:	4611      	mov	r1, r2
   b7ec0:	f7ff fa1e 	bl	b7300 <HAL_USB_USART_Init>
}
   b7ec4:	4620      	mov	r0, r4
   b7ec6:	bd10      	pop	{r4, pc}
   b7ec8:	000b9cfc 	.word	0x000b9cfc

000b7ecc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7ecc:	7c00      	ldrb	r0, [r0, #16]
   b7ece:	2200      	movs	r2, #0
   b7ed0:	f7ff ba1e 	b.w	b7310 <HAL_USB_USART_Begin>

000b7ed4 <_Z19acquireSerialBufferv>:
{
   b7ed4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7ed6:	2214      	movs	r2, #20
{
   b7ed8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7eda:	2100      	movs	r1, #0
   b7edc:	f000 fc38 	bl	b8750 <memset>
}
   b7ee0:	4620      	mov	r0, r4
   b7ee2:	bd10      	pop	{r4, pc}

000b7ee4 <_Z16_fetch_usbserialv>:
{
   b7ee4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ee6:	4c0f      	ldr	r4, [pc, #60]	; (b7f24 <_Z16_fetch_usbserialv+0x40>)
{
   b7ee8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7eea:	a803      	add	r0, sp, #12
   b7eec:	f7ff fff2 	bl	b7ed4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ef0:	7821      	ldrb	r1, [r4, #0]
   b7ef2:	f3bf 8f5b 	dmb	ish
   b7ef6:	f011 0101 	ands.w	r1, r1, #1
   b7efa:	d10f      	bne.n	b7f1c <_Z16_fetch_usbserialv+0x38>
   b7efc:	4620      	mov	r0, r4
   b7efe:	9101      	str	r1, [sp, #4]
   b7f00:	f7fc f8d8 	bl	b40b4 <__cxa_guard_acquire>
   b7f04:	9901      	ldr	r1, [sp, #4]
   b7f06:	b148      	cbz	r0, b7f1c <_Z16_fetch_usbserialv+0x38>
   b7f08:	aa03      	add	r2, sp, #12
   b7f0a:	4807      	ldr	r0, [pc, #28]	; (b7f28 <_Z16_fetch_usbserialv+0x44>)
   b7f0c:	f7ff ffca 	bl	b7ea4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7f10:	4620      	mov	r0, r4
   b7f12:	f7fc f8d4 	bl	b40be <__cxa_guard_release>
   b7f16:	4805      	ldr	r0, [pc, #20]	; (b7f2c <_Z16_fetch_usbserialv+0x48>)
   b7f18:	f000 fbfe 	bl	b8718 <atexit>
	return _usbserial;
}
   b7f1c:	4802      	ldr	r0, [pc, #8]	; (b7f28 <_Z16_fetch_usbserialv+0x44>)
   b7f1e:	b008      	add	sp, #32
   b7f20:	bd10      	pop	{r4, pc}
   b7f22:	bf00      	nop
   b7f24:	2003e700 	.word	0x2003e700
   b7f28:	2003e704 	.word	0x2003e704
   b7f2c:	000b7e2d 	.word	0x000b7e2d

000b7f30 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7f30:	2200      	movs	r2, #0
   b7f32:	6840      	ldr	r0, [r0, #4]
   b7f34:	4611      	mov	r1, r2
   b7f36:	f7ff ba6f 	b.w	b7418 <network_ready>

000b7f3a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7f3a:	2200      	movs	r2, #0
   b7f3c:	6840      	ldr	r0, [r0, #4]
   b7f3e:	4611      	mov	r1, r2
   b7f40:	f7ff ba8a 	b.w	b7458 <network_listening>

000b7f44 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7f44:	2200      	movs	r2, #0
   b7f46:	6840      	ldr	r0, [r0, #4]
   b7f48:	4611      	mov	r1, r2
   b7f4a:	f7ff ba95 	b.w	b7478 <network_get_listen_timeout>

000b7f4e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7f4e:	6840      	ldr	r0, [r0, #4]
   b7f50:	2200      	movs	r2, #0
   b7f52:	f7ff ba89 	b.w	b7468 <network_set_listen_timeout>

000b7f56 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7f56:	6840      	ldr	r0, [r0, #4]
   b7f58:	2200      	movs	r2, #0
   b7f5a:	f081 0101 	eor.w	r1, r1, #1
   b7f5e:	f7ff ba73 	b.w	b7448 <network_listen>

000b7f62 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7f62:	2300      	movs	r3, #0
   b7f64:	6840      	ldr	r0, [r0, #4]
   b7f66:	461a      	mov	r2, r3
   b7f68:	4619      	mov	r1, r3
   b7f6a:	f7ff ba65 	b.w	b7438 <network_off>

000b7f6e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7f6e:	2300      	movs	r3, #0
   b7f70:	6840      	ldr	r0, [r0, #4]
   b7f72:	461a      	mov	r2, r3
   b7f74:	4619      	mov	r1, r3
   b7f76:	f7ff ba57 	b.w	b7428 <network_on>

000b7f7a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f7a:	2200      	movs	r2, #0
   b7f7c:	6840      	ldr	r0, [r0, #4]
   b7f7e:	4611      	mov	r1, r2
   b7f80:	f7ff ba3a 	b.w	b73f8 <network_connecting>

000b7f84 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f84:	6840      	ldr	r0, [r0, #4]
   b7f86:	2200      	movs	r2, #0
   b7f88:	2102      	movs	r1, #2
   b7f8a:	f7ff ba3d 	b.w	b7408 <network_disconnect>

000b7f8e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f8e:	2300      	movs	r3, #0
   b7f90:	6840      	ldr	r0, [r0, #4]
   b7f92:	461a      	mov	r2, r3
   b7f94:	f7ff ba28 	b.w	b73e8 <network_connect>

000b7f98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7f98:	4b02      	ldr	r3, [pc, #8]	; (b7fa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7f9a:	2204      	movs	r2, #4
   b7f9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7f9e:	4a02      	ldr	r2, [pc, #8]	; (b7fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7fa0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7fa2:	4770      	bx	lr
   b7fa4:	2003e718 	.word	0x2003e718
   b7fa8:	000b9d2c 	.word	0x000b9d2c

000b7fac <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7fac:	b510      	push	{r4, lr}
   b7fae:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7fb0:	f000 fc1c 	bl	b87ec <strlen>
   b7fb4:	3801      	subs	r0, #1
   b7fb6:	1823      	adds	r3, r4, r0
   b7fb8:	4620      	mov	r0, r4
	while(i<j){
   b7fba:	4283      	cmp	r3, r0
   b7fbc:	d906      	bls.n	b7fcc <_Z11str_reversePc+0x20>
		c = *i;
   b7fbe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7fc0:	7819      	ldrb	r1, [r3, #0]
   b7fc2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7fc6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7fca:	e7f6      	b.n	b7fba <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7fcc:	bd10      	pop	{r4, pc}

000b7fce <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7fce:	b570      	push	{r4, r5, r6, lr}
   b7fd0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7fd2:	1e91      	subs	r1, r2, #2
   b7fd4:	2922      	cmp	r1, #34	; 0x22
   b7fd6:	d81d      	bhi.n	b8014 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7fd8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7fda:	b930      	cbnz	r0, b7fea <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7fdc:	4423      	add	r3, r4
            *ptr++ = '0';
   b7fde:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7fe0:	429d      	cmp	r5, r3
   b7fe2:	d210      	bcs.n	b8006 <ultoa+0x38>
            *ptr++ = '0';
   b7fe4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7fe8:	e7fa      	b.n	b7fe0 <ultoa+0x12>
            result.quot = a/radix;
   b7fea:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7fee:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7ff2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7ff4:	2809      	cmp	r0, #9
                *ptr += '0';
   b7ff6:	bf94      	ite	ls
   b7ff8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7ffa:	3157      	addhi	r1, #87	; 0x57
   b7ffc:	b2c9      	uxtb	r1, r1
   b7ffe:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8002:	4630      	mov	r0, r6
	while(a){
   b8004:	e7e9      	b.n	b7fda <ultoa+0xc>

	*ptr = '\0';
   b8006:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8008:	4620      	mov	r0, r4
	*ptr = '\0';
   b800a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b800c:	f7ff ffce 	bl	b7fac <_Z11str_reversePc>
	return buffer;
   b8010:	4620      	mov	r0, r4
}
   b8012:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8014:	2000      	movs	r0, #0
   b8016:	e7fc      	b.n	b8012 <ultoa+0x44>

000b8018 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8018:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b801a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b801c:	460c      	mov	r4, r1
   b801e:	4615      	mov	r5, r2
	if(a<0){
   b8020:	da0e      	bge.n	b8040 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8026:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b802a:	bf14      	ite	ne
   b802c:	4258      	negne	r0, r3
   b802e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8030:	2301      	movs	r3, #1
		*buffer = '-';
   b8032:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8034:	462a      	mov	r2, r5
   b8036:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8038:	f7ff ffc9 	bl	b7fce <ultoa>
	}
	return buffer;
}
   b803c:	4620      	mov	r0, r4
   b803e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8040:	2301      	movs	r3, #1
   b8042:	e7f9      	b.n	b8038 <itoa+0x20>

000b8044 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8044:	4b01      	ldr	r3, [pc, #4]	; (b804c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8046:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8048:	4770      	bx	lr
   b804a:	bf00      	nop
   b804c:	2003df80 	.word	0x2003df80

000b8050 <serialEventRun>:
{
   b8050:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8052:	4b0b      	ldr	r3, [pc, #44]	; (b8080 <serialEventRun+0x30>)
   b8054:	b143      	cbz	r3, b8068 <serialEventRun+0x18>
   b8056:	f7ff ff45 	bl	b7ee4 <_Z16_fetch_usbserialv>
   b805a:	6803      	ldr	r3, [r0, #0]
   b805c:	691b      	ldr	r3, [r3, #16]
   b805e:	4798      	blx	r3
   b8060:	2800      	cmp	r0, #0
   b8062:	dd01      	ble.n	b8068 <serialEventRun+0x18>
        serialEvent();
   b8064:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8068:	4b06      	ldr	r3, [pc, #24]	; (b8084 <serialEventRun+0x34>)
   b806a:	b143      	cbz	r3, b807e <serialEventRun+0x2e>
   b806c:	f000 f972 	bl	b8354 <_Z22__fetch_global_Serial1v>
   b8070:	6803      	ldr	r3, [r0, #0]
   b8072:	691b      	ldr	r3, [r3, #16]
   b8074:	4798      	blx	r3
   b8076:	2800      	cmp	r0, #0
   b8078:	dd01      	ble.n	b807e <serialEventRun+0x2e>
        serialEvent1();
   b807a:	f3af 8000 	nop.w
}
   b807e:	bd08      	pop	{r3, pc}
	...

000b8088 <_post_loop>:
{
   b8088:	b508      	push	{r3, lr}
	serialEventRun();
   b808a:	f7ff ffe1 	bl	b8050 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b808e:	f7fe fff7 	bl	b7080 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8092:	4b01      	ldr	r3, [pc, #4]	; (b8098 <_post_loop+0x10>)
   b8094:	6018      	str	r0, [r3, #0]
}
   b8096:	bd08      	pop	{r3, pc}
   b8098:	2003e728 	.word	0x2003e728

000b809c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b809c:	4805      	ldr	r0, [pc, #20]	; (b80b4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b809e:	4a06      	ldr	r2, [pc, #24]	; (b80b8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b80a0:	4906      	ldr	r1, [pc, #24]	; (b80bc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b80a2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b80a4:	1a12      	subs	r2, r2, r0
   b80a6:	f000 fb45 	bl	b8734 <memcpy>
    __backup_sram_signature = signature;
   b80aa:	4b05      	ldr	r3, [pc, #20]	; (b80c0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b80ac:	4a05      	ldr	r2, [pc, #20]	; (b80c4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b80ae:	601a      	str	r2, [r3, #0]
}
   b80b0:	bd08      	pop	{r3, pc}
   b80b2:	bf00      	nop
   b80b4:	2003f400 	.word	0x2003f400
   b80b8:	2003f404 	.word	0x2003f404
   b80bc:	000b9e74 	.word	0x000b9e74
   b80c0:	2003f400 	.word	0x2003f400
   b80c4:	9a271c1e 	.word	0x9a271c1e

000b80c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b80c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b80ca:	2300      	movs	r3, #0
   b80cc:	9300      	str	r3, [sp, #0]
   b80ce:	461a      	mov	r2, r3
   b80d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b80d4:	f7ff f96e 	bl	b73b4 <system_ctrl_set_result>
}
   b80d8:	b003      	add	sp, #12
   b80da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b80e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b80e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b80e2:	8843      	ldrh	r3, [r0, #2]
   b80e4:	2b0a      	cmp	r3, #10
   b80e6:	d008      	beq.n	b80fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b80e8:	2b50      	cmp	r3, #80	; 0x50
   b80ea:	d10b      	bne.n	b8104 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b80ec:	4b09      	ldr	r3, [pc, #36]	; (b8114 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b80ee:	681b      	ldr	r3, [r3, #0]
   b80f0:	b14b      	cbz	r3, b8106 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b80f2:	b003      	add	sp, #12
   b80f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b80f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b80fa:	f7ff ffe5 	bl	b80c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b80fe:	b003      	add	sp, #12
   b8100:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8104:	2300      	movs	r3, #0
   b8106:	9300      	str	r3, [sp, #0]
   b8108:	461a      	mov	r2, r3
   b810a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b810e:	f7ff f951 	bl	b73b4 <system_ctrl_set_result>
}
   b8112:	e7f4      	b.n	b80fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8114:	2003e724 	.word	0x2003e724

000b8118 <module_user_init_hook>:
{
   b8118:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b811a:	4812      	ldr	r0, [pc, #72]	; (b8164 <module_user_init_hook+0x4c>)
   b811c:	2100      	movs	r1, #0
   b811e:	f7ff f9fb 	bl	b7518 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8122:	4b11      	ldr	r3, [pc, #68]	; (b8168 <module_user_init_hook+0x50>)
   b8124:	681a      	ldr	r2, [r3, #0]
   b8126:	4b11      	ldr	r3, [pc, #68]	; (b816c <module_user_init_hook+0x54>)
   b8128:	429a      	cmp	r2, r3
   b812a:	4b11      	ldr	r3, [pc, #68]	; (b8170 <module_user_init_hook+0x58>)
   b812c:	bf0c      	ite	eq
   b812e:	2201      	moveq	r2, #1
   b8130:	2200      	movne	r2, #0
   b8132:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8134:	d001      	beq.n	b813a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8136:	f7ff ffb1 	bl	b809c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b813a:	f7fe ff91 	bl	b7060 <HAL_RNG_GetRandomNumber>
   b813e:	4604      	mov	r4, r0
    srand(seed);
   b8140:	f000 fb1e 	bl	b8780 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8144:	4b0b      	ldr	r3, [pc, #44]	; (b8174 <module_user_init_hook+0x5c>)
   b8146:	b113      	cbz	r3, b814e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8148:	4620      	mov	r0, r4
   b814a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b814e:	2100      	movs	r1, #0
   b8150:	4808      	ldr	r0, [pc, #32]	; (b8174 <module_user_init_hook+0x5c>)
   b8152:	f7ff f939 	bl	b73c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b815a:	4807      	ldr	r0, [pc, #28]	; (b8178 <module_user_init_hook+0x60>)
   b815c:	2100      	movs	r1, #0
   b815e:	f7ff b91f 	b.w	b73a0 <system_ctrl_set_app_request_handler>
   b8162:	bf00      	nop
   b8164:	000b8045 	.word	0x000b8045
   b8168:	2003f400 	.word	0x2003f400
   b816c:	9a271c1e 	.word	0x9a271c1e
   b8170:	2003e720 	.word	0x2003e720
   b8174:	00000000 	.word	0x00000000
   b8178:	000b80e1 	.word	0x000b80e1

000b817c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b817c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b817e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8180:	d902      	bls.n	b8188 <pinAvailable+0xc>
    return false;
   b8182:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8184:	b002      	add	sp, #8
   b8186:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8188:	f1a0 030b 	sub.w	r3, r0, #11
   b818c:	2b02      	cmp	r3, #2
   b818e:	d81a      	bhi.n	b81c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8190:	4c17      	ldr	r4, [pc, #92]	; (b81f0 <pinAvailable+0x74>)
   b8192:	7821      	ldrb	r1, [r4, #0]
   b8194:	f3bf 8f5b 	dmb	ish
   b8198:	f011 0101 	ands.w	r1, r1, #1
   b819c:	d10b      	bne.n	b81b6 <pinAvailable+0x3a>
   b819e:	4620      	mov	r0, r4
   b81a0:	9101      	str	r1, [sp, #4]
   b81a2:	f7fb ff87 	bl	b40b4 <__cxa_guard_acquire>
   b81a6:	9901      	ldr	r1, [sp, #4]
   b81a8:	b128      	cbz	r0, b81b6 <pinAvailable+0x3a>
   b81aa:	4812      	ldr	r0, [pc, #72]	; (b81f4 <pinAvailable+0x78>)
   b81ac:	f7ff fc4c 	bl	b7a48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b81b0:	4620      	mov	r0, r4
   b81b2:	f7fb ff84 	bl	b40be <__cxa_guard_release>
   b81b6:	4b0f      	ldr	r3, [pc, #60]	; (b81f4 <pinAvailable+0x78>)
   b81b8:	7818      	ldrb	r0, [r3, #0]
   b81ba:	f7ff f839 	bl	b7230 <hal_spi_is_enabled>
   b81be:	2800      	cmp	r0, #0
   b81c0:	d1df      	bne.n	b8182 <pinAvailable+0x6>
  return true; // 'pin' is available
   b81c2:	2001      	movs	r0, #1
   b81c4:	e7de      	b.n	b8184 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b81c6:	2801      	cmp	r0, #1
   b81c8:	d809      	bhi.n	b81de <pinAvailable+0x62>
   b81ca:	f000 f883 	bl	b82d4 <_Z19__fetch_global_Wirev>
   b81ce:	2100      	movs	r1, #0
   b81d0:	7c00      	ldrb	r0, [r0, #16]
   b81d2:	f7fe ffed 	bl	b71b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b81d6:	f080 0001 	eor.w	r0, r0, #1
   b81da:	b2c0      	uxtb	r0, r0
   b81dc:	e7d2      	b.n	b8184 <pinAvailable+0x8>
   b81de:	3809      	subs	r0, #9
   b81e0:	2801      	cmp	r0, #1
   b81e2:	d8ee      	bhi.n	b81c2 <pinAvailable+0x46>
   b81e4:	f000 f8b6 	bl	b8354 <_Z22__fetch_global_Serial1v>
   b81e8:	7c00      	ldrb	r0, [r0, #16]
   b81ea:	f7ff f871 	bl	b72d0 <hal_usart_is_enabled>
   b81ee:	e7f2      	b.n	b81d6 <pinAvailable+0x5a>
   b81f0:	2003dfe8 	.word	0x2003dfe8
   b81f4:	2003dfec 	.word	0x2003dfec

000b81f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b81f8:	2823      	cmp	r0, #35	; 0x23
{
   b81fa:	b538      	push	{r3, r4, r5, lr}
   b81fc:	4604      	mov	r4, r0
   b81fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8200:	d80a      	bhi.n	b8218 <pinMode+0x20>
   b8202:	29ff      	cmp	r1, #255	; 0xff
   b8204:	d008      	beq.n	b8218 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8206:	f7ff ffb9 	bl	b817c <pinAvailable>
   b820a:	b128      	cbz	r0, b8218 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b820c:	4629      	mov	r1, r5
   b820e:	4620      	mov	r0, r4
}
   b8210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8214:	f7fe bf44 	b.w	b70a0 <HAL_Pin_Mode>
}
   b8218:	bd38      	pop	{r3, r4, r5, pc}

000b821a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b821a:	b538      	push	{r3, r4, r5, lr}
   b821c:	4604      	mov	r4, r0
   b821e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8220:	f7fe ff46 	bl	b70b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8224:	28ff      	cmp	r0, #255	; 0xff
   b8226:	d010      	beq.n	b824a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8228:	2806      	cmp	r0, #6
   b822a:	d804      	bhi.n	b8236 <digitalWrite+0x1c>
   b822c:	234d      	movs	r3, #77	; 0x4d
   b822e:	fa23 f000 	lsr.w	r0, r3, r0
   b8232:	07c3      	lsls	r3, r0, #31
   b8234:	d409      	bmi.n	b824a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8236:	4620      	mov	r0, r4
   b8238:	f7ff ffa0 	bl	b817c <pinAvailable>
   b823c:	b128      	cbz	r0, b824a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b823e:	4629      	mov	r1, r5
   b8240:	4620      	mov	r0, r4
}
   b8242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8246:	f7fe bf3b 	b.w	b70c0 <HAL_GPIO_Write>
}
   b824a:	bd38      	pop	{r3, r4, r5, pc}

000b824c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b824c:	b510      	push	{r4, lr}
   b824e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8250:	f7fe ff2e 	bl	b70b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8254:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8256:	b2db      	uxtb	r3, r3
   b8258:	2b01      	cmp	r3, #1
   b825a:	d908      	bls.n	b826e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b825c:	4620      	mov	r0, r4
   b825e:	f7ff ff8d 	bl	b817c <pinAvailable>
   b8262:	b120      	cbz	r0, b826e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8264:	4620      	mov	r0, r4
}
   b8266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b826a:	f7fe bf31 	b.w	b70d0 <HAL_GPIO_Read>
}
   b826e:	2000      	movs	r0, #0
   b8270:	bd10      	pop	{r4, pc}

000b8272 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8272:	280d      	cmp	r0, #13
{
   b8274:	b510      	push	{r4, lr}
   b8276:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8278:	bf9c      	itt	ls
   b827a:	340e      	addls	r4, #14
   b827c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b827e:	4620      	mov	r0, r4
   b8280:	f7ff ff7c 	bl	b817c <pinAvailable>
   b8284:	b150      	cbz	r0, b829c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8286:	2103      	movs	r1, #3
   b8288:	4620      	mov	r0, r4
   b828a:	f7fe ff01 	bl	b7090 <HAL_Validate_Pin_Function>
   b828e:	2803      	cmp	r0, #3
   b8290:	d104      	bne.n	b829c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8292:	4620      	mov	r0, r4
}
   b8294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8298:	f7fe bf32 	b.w	b7100 <hal_adc_read>
}
   b829c:	2000      	movs	r0, #0
   b829e:	bd10      	pop	{r4, pc}

000b82a0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b82a0:	f7fe bf36 	b.w	b7110 <HAL_Pulse_In>

000b82a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82a4:	4770      	bx	lr
	...

000b82a8 <_Z17acquireWireBufferv>:
{
   b82a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b82aa:	2520      	movs	r5, #32
   b82ac:	2314      	movs	r3, #20
{
   b82ae:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b82b0:	6003      	str	r3, [r0, #0]
   b82b2:	6085      	str	r5, [r0, #8]
   b82b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b82b6:	4906      	ldr	r1, [pc, #24]	; (b82d0 <_Z17acquireWireBufferv+0x28>)
   b82b8:	4628      	mov	r0, r5
   b82ba:	f000 f86f 	bl	b839c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b82be:	4904      	ldr	r1, [pc, #16]	; (b82d0 <_Z17acquireWireBufferv+0x28>)
	};
   b82c0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b82c2:	4628      	mov	r0, r5
   b82c4:	f000 f86a 	bl	b839c <_ZnajRKSt9nothrow_t>
	};
   b82c8:	60e0      	str	r0, [r4, #12]
}
   b82ca:	4620      	mov	r0, r4
   b82cc:	bd38      	pop	{r3, r4, r5, pc}
   b82ce:	bf00      	nop
   b82d0:	000b9d60 	.word	0x000b9d60

000b82d4 <_Z19__fetch_global_Wirev>:
{
   b82d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82d6:	4d0e      	ldr	r5, [pc, #56]	; (b8310 <_Z19__fetch_global_Wirev+0x3c>)
   b82d8:	7829      	ldrb	r1, [r5, #0]
   b82da:	f3bf 8f5b 	dmb	ish
   b82de:	f011 0401 	ands.w	r4, r1, #1
{
   b82e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82e4:	d111      	bne.n	b830a <_Z19__fetch_global_Wirev+0x36>
   b82e6:	4628      	mov	r0, r5
   b82e8:	f7fb fee4 	bl	b40b4 <__cxa_guard_acquire>
   b82ec:	b168      	cbz	r0, b830a <_Z19__fetch_global_Wirev+0x36>
   b82ee:	a801      	add	r0, sp, #4
   b82f0:	f7ff ffda 	bl	b82a8 <_Z17acquireWireBufferv>
   b82f4:	aa01      	add	r2, sp, #4
   b82f6:	4621      	mov	r1, r4
   b82f8:	4806      	ldr	r0, [pc, #24]	; (b8314 <_Z19__fetch_global_Wirev+0x40>)
   b82fa:	f7ff f9a5 	bl	b7648 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b82fe:	4628      	mov	r0, r5
   b8300:	f7fb fedd 	bl	b40be <__cxa_guard_release>
   b8304:	4804      	ldr	r0, [pc, #16]	; (b8318 <_Z19__fetch_global_Wirev+0x44>)
   b8306:	f000 fa07 	bl	b8718 <atexit>
	return wire;
}
   b830a:	4802      	ldr	r0, [pc, #8]	; (b8314 <_Z19__fetch_global_Wirev+0x40>)
   b830c:	b007      	add	sp, #28
   b830e:	bd30      	pop	{r4, r5, pc}
   b8310:	2003e72c 	.word	0x2003e72c
   b8314:	2003e730 	.word	0x2003e730
   b8318:	000b82a5 	.word	0x000b82a5

000b831c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b831c:	4770      	bx	lr
	...

000b8320 <_Z20acquireSerial1Bufferv>:
{
   b8320:	b538      	push	{r3, r4, r5, lr}
   b8322:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8324:	2514      	movs	r5, #20
   b8326:	462a      	mov	r2, r5
   b8328:	2100      	movs	r1, #0
   b832a:	f000 fa11 	bl	b8750 <memset>
   b832e:	8025      	strh	r5, [r4, #0]
   b8330:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8332:	4907      	ldr	r1, [pc, #28]	; (b8350 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8334:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8336:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8338:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b833a:	f000 f82f 	bl	b839c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b833e:	4904      	ldr	r1, [pc, #16]	; (b8350 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8340:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8342:	4628      	mov	r0, r5
   b8344:	f000 f82a 	bl	b839c <_ZnajRKSt9nothrow_t>
    };
   b8348:	60e0      	str	r0, [r4, #12]
}
   b834a:	4620      	mov	r0, r4
   b834c:	bd38      	pop	{r3, r4, r5, pc}
   b834e:	bf00      	nop
   b8350:	000b9d60 	.word	0x000b9d60

000b8354 <_Z22__fetch_global_Serial1v>:
{
   b8354:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8356:	4d0e      	ldr	r5, [pc, #56]	; (b8390 <_Z22__fetch_global_Serial1v+0x3c>)
   b8358:	7829      	ldrb	r1, [r5, #0]
   b835a:	f3bf 8f5b 	dmb	ish
   b835e:	f011 0401 	ands.w	r4, r1, #1
{
   b8362:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8364:	d111      	bne.n	b838a <_Z22__fetch_global_Serial1v+0x36>
   b8366:	4628      	mov	r0, r5
   b8368:	f7fb fea4 	bl	b40b4 <__cxa_guard_acquire>
   b836c:	b168      	cbz	r0, b838a <_Z22__fetch_global_Serial1v+0x36>
   b836e:	a801      	add	r0, sp, #4
   b8370:	f7ff ffd6 	bl	b8320 <_Z20acquireSerial1Bufferv>
   b8374:	aa01      	add	r2, sp, #4
   b8376:	4621      	mov	r1, r4
   b8378:	4806      	ldr	r0, [pc, #24]	; (b8394 <_Z22__fetch_global_Serial1v+0x40>)
   b837a:	f7ff fd41 	bl	b7e00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b837e:	4628      	mov	r0, r5
   b8380:	f7fb fe9d 	bl	b40be <__cxa_guard_release>
   b8384:	4804      	ldr	r0, [pc, #16]	; (b8398 <_Z22__fetch_global_Serial1v+0x44>)
   b8386:	f000 f9c7 	bl	b8718 <atexit>
    return serial1;
}
   b838a:	4802      	ldr	r0, [pc, #8]	; (b8394 <_Z22__fetch_global_Serial1v+0x40>)
   b838c:	b007      	add	sp, #28
   b838e:	bd30      	pop	{r4, r5, pc}
   b8390:	2003e744 	.word	0x2003e744
   b8394:	2003e748 	.word	0x2003e748
   b8398:	000b831d 	.word	0x000b831d

000b839c <_ZnajRKSt9nothrow_t>:
   b839c:	f7fb be79 	b.w	b4092 <_Znaj>

000b83a0 <__aeabi_drsub>:
   b83a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b83a4:	e002      	b.n	b83ac <__adddf3>
   b83a6:	bf00      	nop

000b83a8 <__aeabi_dsub>:
   b83a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b83ac <__adddf3>:
   b83ac:	b530      	push	{r4, r5, lr}
   b83ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b83b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b83b6:	ea94 0f05 	teq	r4, r5
   b83ba:	bf08      	it	eq
   b83bc:	ea90 0f02 	teqeq	r0, r2
   b83c0:	bf1f      	itttt	ne
   b83c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b83c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b83ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b83ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b83d2:	f000 80e2 	beq.w	b859a <__adddf3+0x1ee>
   b83d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b83da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b83de:	bfb8      	it	lt
   b83e0:	426d      	neglt	r5, r5
   b83e2:	dd0c      	ble.n	b83fe <__adddf3+0x52>
   b83e4:	442c      	add	r4, r5
   b83e6:	ea80 0202 	eor.w	r2, r0, r2
   b83ea:	ea81 0303 	eor.w	r3, r1, r3
   b83ee:	ea82 0000 	eor.w	r0, r2, r0
   b83f2:	ea83 0101 	eor.w	r1, r3, r1
   b83f6:	ea80 0202 	eor.w	r2, r0, r2
   b83fa:	ea81 0303 	eor.w	r3, r1, r3
   b83fe:	2d36      	cmp	r5, #54	; 0x36
   b8400:	bf88      	it	hi
   b8402:	bd30      	pophi	{r4, r5, pc}
   b8404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8408:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b840c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8414:	d002      	beq.n	b841c <__adddf3+0x70>
   b8416:	4240      	negs	r0, r0
   b8418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b841c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8420:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8428:	d002      	beq.n	b8430 <__adddf3+0x84>
   b842a:	4252      	negs	r2, r2
   b842c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8430:	ea94 0f05 	teq	r4, r5
   b8434:	f000 80a7 	beq.w	b8586 <__adddf3+0x1da>
   b8438:	f1a4 0401 	sub.w	r4, r4, #1
   b843c:	f1d5 0e20 	rsbs	lr, r5, #32
   b8440:	db0d      	blt.n	b845e <__adddf3+0xb2>
   b8442:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8446:	fa22 f205 	lsr.w	r2, r2, r5
   b844a:	1880      	adds	r0, r0, r2
   b844c:	f141 0100 	adc.w	r1, r1, #0
   b8450:	fa03 f20e 	lsl.w	r2, r3, lr
   b8454:	1880      	adds	r0, r0, r2
   b8456:	fa43 f305 	asr.w	r3, r3, r5
   b845a:	4159      	adcs	r1, r3
   b845c:	e00e      	b.n	b847c <__adddf3+0xd0>
   b845e:	f1a5 0520 	sub.w	r5, r5, #32
   b8462:	f10e 0e20 	add.w	lr, lr, #32
   b8466:	2a01      	cmp	r2, #1
   b8468:	fa03 fc0e 	lsl.w	ip, r3, lr
   b846c:	bf28      	it	cs
   b846e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8472:	fa43 f305 	asr.w	r3, r3, r5
   b8476:	18c0      	adds	r0, r0, r3
   b8478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b847c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8480:	d507      	bpl.n	b8492 <__adddf3+0xe6>
   b8482:	f04f 0e00 	mov.w	lr, #0
   b8486:	f1dc 0c00 	rsbs	ip, ip, #0
   b848a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b848e:	eb6e 0101 	sbc.w	r1, lr, r1
   b8492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8496:	d31b      	bcc.n	b84d0 <__adddf3+0x124>
   b8498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b849c:	d30c      	bcc.n	b84b8 <__adddf3+0x10c>
   b849e:	0849      	lsrs	r1, r1, #1
   b84a0:	ea5f 0030 	movs.w	r0, r0, rrx
   b84a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b84a8:	f104 0401 	add.w	r4, r4, #1
   b84ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b84b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b84b4:	f080 809a 	bcs.w	b85ec <__adddf3+0x240>
   b84b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b84bc:	bf08      	it	eq
   b84be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b84c2:	f150 0000 	adcs.w	r0, r0, #0
   b84c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b84ca:	ea41 0105 	orr.w	r1, r1, r5
   b84ce:	bd30      	pop	{r4, r5, pc}
   b84d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b84d4:	4140      	adcs	r0, r0
   b84d6:	eb41 0101 	adc.w	r1, r1, r1
   b84da:	3c01      	subs	r4, #1
   b84dc:	bf28      	it	cs
   b84de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b84e2:	d2e9      	bcs.n	b84b8 <__adddf3+0x10c>
   b84e4:	f091 0f00 	teq	r1, #0
   b84e8:	bf04      	itt	eq
   b84ea:	4601      	moveq	r1, r0
   b84ec:	2000      	moveq	r0, #0
   b84ee:	fab1 f381 	clz	r3, r1
   b84f2:	bf08      	it	eq
   b84f4:	3320      	addeq	r3, #32
   b84f6:	f1a3 030b 	sub.w	r3, r3, #11
   b84fa:	f1b3 0220 	subs.w	r2, r3, #32
   b84fe:	da0c      	bge.n	b851a <__adddf3+0x16e>
   b8500:	320c      	adds	r2, #12
   b8502:	dd08      	ble.n	b8516 <__adddf3+0x16a>
   b8504:	f102 0c14 	add.w	ip, r2, #20
   b8508:	f1c2 020c 	rsb	r2, r2, #12
   b850c:	fa01 f00c 	lsl.w	r0, r1, ip
   b8510:	fa21 f102 	lsr.w	r1, r1, r2
   b8514:	e00c      	b.n	b8530 <__adddf3+0x184>
   b8516:	f102 0214 	add.w	r2, r2, #20
   b851a:	bfd8      	it	le
   b851c:	f1c2 0c20 	rsble	ip, r2, #32
   b8520:	fa01 f102 	lsl.w	r1, r1, r2
   b8524:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8528:	bfdc      	itt	le
   b852a:	ea41 010c 	orrle.w	r1, r1, ip
   b852e:	4090      	lslle	r0, r2
   b8530:	1ae4      	subs	r4, r4, r3
   b8532:	bfa2      	ittt	ge
   b8534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8538:	4329      	orrge	r1, r5
   b853a:	bd30      	popge	{r4, r5, pc}
   b853c:	ea6f 0404 	mvn.w	r4, r4
   b8540:	3c1f      	subs	r4, #31
   b8542:	da1c      	bge.n	b857e <__adddf3+0x1d2>
   b8544:	340c      	adds	r4, #12
   b8546:	dc0e      	bgt.n	b8566 <__adddf3+0x1ba>
   b8548:	f104 0414 	add.w	r4, r4, #20
   b854c:	f1c4 0220 	rsb	r2, r4, #32
   b8550:	fa20 f004 	lsr.w	r0, r0, r4
   b8554:	fa01 f302 	lsl.w	r3, r1, r2
   b8558:	ea40 0003 	orr.w	r0, r0, r3
   b855c:	fa21 f304 	lsr.w	r3, r1, r4
   b8560:	ea45 0103 	orr.w	r1, r5, r3
   b8564:	bd30      	pop	{r4, r5, pc}
   b8566:	f1c4 040c 	rsb	r4, r4, #12
   b856a:	f1c4 0220 	rsb	r2, r4, #32
   b856e:	fa20 f002 	lsr.w	r0, r0, r2
   b8572:	fa01 f304 	lsl.w	r3, r1, r4
   b8576:	ea40 0003 	orr.w	r0, r0, r3
   b857a:	4629      	mov	r1, r5
   b857c:	bd30      	pop	{r4, r5, pc}
   b857e:	fa21 f004 	lsr.w	r0, r1, r4
   b8582:	4629      	mov	r1, r5
   b8584:	bd30      	pop	{r4, r5, pc}
   b8586:	f094 0f00 	teq	r4, #0
   b858a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b858e:	bf06      	itte	eq
   b8590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8594:	3401      	addeq	r4, #1
   b8596:	3d01      	subne	r5, #1
   b8598:	e74e      	b.n	b8438 <__adddf3+0x8c>
   b859a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b859e:	bf18      	it	ne
   b85a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b85a4:	d029      	beq.n	b85fa <__adddf3+0x24e>
   b85a6:	ea94 0f05 	teq	r4, r5
   b85aa:	bf08      	it	eq
   b85ac:	ea90 0f02 	teqeq	r0, r2
   b85b0:	d005      	beq.n	b85be <__adddf3+0x212>
   b85b2:	ea54 0c00 	orrs.w	ip, r4, r0
   b85b6:	bf04      	itt	eq
   b85b8:	4619      	moveq	r1, r3
   b85ba:	4610      	moveq	r0, r2
   b85bc:	bd30      	pop	{r4, r5, pc}
   b85be:	ea91 0f03 	teq	r1, r3
   b85c2:	bf1e      	ittt	ne
   b85c4:	2100      	movne	r1, #0
   b85c6:	2000      	movne	r0, #0
   b85c8:	bd30      	popne	{r4, r5, pc}
   b85ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b85ce:	d105      	bne.n	b85dc <__adddf3+0x230>
   b85d0:	0040      	lsls	r0, r0, #1
   b85d2:	4149      	adcs	r1, r1
   b85d4:	bf28      	it	cs
   b85d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b85da:	bd30      	pop	{r4, r5, pc}
   b85dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b85e0:	bf3c      	itt	cc
   b85e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b85e6:	bd30      	popcc	{r4, r5, pc}
   b85e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b85ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b85f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b85f4:	f04f 0000 	mov.w	r0, #0
   b85f8:	bd30      	pop	{r4, r5, pc}
   b85fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b85fe:	bf1a      	itte	ne
   b8600:	4619      	movne	r1, r3
   b8602:	4610      	movne	r0, r2
   b8604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8608:	bf1c      	itt	ne
   b860a:	460b      	movne	r3, r1
   b860c:	4602      	movne	r2, r0
   b860e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8612:	bf06      	itte	eq
   b8614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8618:	ea91 0f03 	teqeq	r1, r3
   b861c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8620:	bd30      	pop	{r4, r5, pc}
   b8622:	bf00      	nop

000b8624 <__aeabi_ui2d>:
   b8624:	f090 0f00 	teq	r0, #0
   b8628:	bf04      	itt	eq
   b862a:	2100      	moveq	r1, #0
   b862c:	4770      	bxeq	lr
   b862e:	b530      	push	{r4, r5, lr}
   b8630:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8634:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8638:	f04f 0500 	mov.w	r5, #0
   b863c:	f04f 0100 	mov.w	r1, #0
   b8640:	e750      	b.n	b84e4 <__adddf3+0x138>
   b8642:	bf00      	nop

000b8644 <__aeabi_i2d>:
   b8644:	f090 0f00 	teq	r0, #0
   b8648:	bf04      	itt	eq
   b864a:	2100      	moveq	r1, #0
   b864c:	4770      	bxeq	lr
   b864e:	b530      	push	{r4, r5, lr}
   b8650:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8654:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b865c:	bf48      	it	mi
   b865e:	4240      	negmi	r0, r0
   b8660:	f04f 0100 	mov.w	r1, #0
   b8664:	e73e      	b.n	b84e4 <__adddf3+0x138>
   b8666:	bf00      	nop

000b8668 <__aeabi_f2d>:
   b8668:	0042      	lsls	r2, r0, #1
   b866a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b866e:	ea4f 0131 	mov.w	r1, r1, rrx
   b8672:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8676:	bf1f      	itttt	ne
   b8678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b867c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8684:	4770      	bxne	lr
   b8686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b868a:	bf08      	it	eq
   b868c:	4770      	bxeq	lr
   b868e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8692:	bf04      	itt	eq
   b8694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8698:	4770      	bxeq	lr
   b869a:	b530      	push	{r4, r5, lr}
   b869c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b86a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b86a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b86a8:	e71c      	b.n	b84e4 <__adddf3+0x138>
   b86aa:	bf00      	nop

000b86ac <__aeabi_ul2d>:
   b86ac:	ea50 0201 	orrs.w	r2, r0, r1
   b86b0:	bf08      	it	eq
   b86b2:	4770      	bxeq	lr
   b86b4:	b530      	push	{r4, r5, lr}
   b86b6:	f04f 0500 	mov.w	r5, #0
   b86ba:	e00a      	b.n	b86d2 <__aeabi_l2d+0x16>

000b86bc <__aeabi_l2d>:
   b86bc:	ea50 0201 	orrs.w	r2, r0, r1
   b86c0:	bf08      	it	eq
   b86c2:	4770      	bxeq	lr
   b86c4:	b530      	push	{r4, r5, lr}
   b86c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b86ca:	d502      	bpl.n	b86d2 <__aeabi_l2d+0x16>
   b86cc:	4240      	negs	r0, r0
   b86ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b86d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b86d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b86da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b86de:	f43f aed8 	beq.w	b8492 <__adddf3+0xe6>
   b86e2:	f04f 0203 	mov.w	r2, #3
   b86e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86ea:	bf18      	it	ne
   b86ec:	3203      	addne	r2, #3
   b86ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86f2:	bf18      	it	ne
   b86f4:	3203      	addne	r2, #3
   b86f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b86fa:	f1c2 0320 	rsb	r3, r2, #32
   b86fe:	fa00 fc03 	lsl.w	ip, r0, r3
   b8702:	fa20 f002 	lsr.w	r0, r0, r2
   b8706:	fa01 fe03 	lsl.w	lr, r1, r3
   b870a:	ea40 000e 	orr.w	r0, r0, lr
   b870e:	fa21 f102 	lsr.w	r1, r1, r2
   b8712:	4414      	add	r4, r2
   b8714:	e6bd      	b.n	b8492 <__adddf3+0xe6>
   b8716:	bf00      	nop

000b8718 <atexit>:
   b8718:	2300      	movs	r3, #0
   b871a:	4601      	mov	r1, r0
   b871c:	461a      	mov	r2, r3
   b871e:	4618      	mov	r0, r3
   b8720:	f000 b8c8 	b.w	b88b4 <__register_exitproc>

000b8724 <calloc>:
   b8724:	4b02      	ldr	r3, [pc, #8]	; (b8730 <calloc+0xc>)
   b8726:	460a      	mov	r2, r1
   b8728:	4601      	mov	r1, r0
   b872a:	6818      	ldr	r0, [r3, #0]
   b872c:	f000 b818 	b.w	b8760 <_calloc_r>
   b8730:	2003df80 	.word	0x2003df80

000b8734 <memcpy>:
   b8734:	440a      	add	r2, r1
   b8736:	4291      	cmp	r1, r2
   b8738:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b873c:	d100      	bne.n	b8740 <memcpy+0xc>
   b873e:	4770      	bx	lr
   b8740:	b510      	push	{r4, lr}
   b8742:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8746:	f803 4f01 	strb.w	r4, [r3, #1]!
   b874a:	4291      	cmp	r1, r2
   b874c:	d1f9      	bne.n	b8742 <memcpy+0xe>
   b874e:	bd10      	pop	{r4, pc}

000b8750 <memset>:
   b8750:	4402      	add	r2, r0
   b8752:	4603      	mov	r3, r0
   b8754:	4293      	cmp	r3, r2
   b8756:	d100      	bne.n	b875a <memset+0xa>
   b8758:	4770      	bx	lr
   b875a:	f803 1b01 	strb.w	r1, [r3], #1
   b875e:	e7f9      	b.n	b8754 <memset+0x4>

000b8760 <_calloc_r>:
   b8760:	b513      	push	{r0, r1, r4, lr}
   b8762:	434a      	muls	r2, r1
   b8764:	4611      	mov	r1, r2
   b8766:	9201      	str	r2, [sp, #4]
   b8768:	f7fe fec6 	bl	b74f8 <_malloc_r>
   b876c:	4604      	mov	r4, r0
   b876e:	b118      	cbz	r0, b8778 <_calloc_r+0x18>
   b8770:	9a01      	ldr	r2, [sp, #4]
   b8772:	2100      	movs	r1, #0
   b8774:	f7ff ffec 	bl	b8750 <memset>
   b8778:	4620      	mov	r0, r4
   b877a:	b002      	add	sp, #8
   b877c:	bd10      	pop	{r4, pc}
	...

000b8780 <srand>:
   b8780:	b538      	push	{r3, r4, r5, lr}
   b8782:	4b10      	ldr	r3, [pc, #64]	; (b87c4 <srand+0x44>)
   b8784:	681d      	ldr	r5, [r3, #0]
   b8786:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8788:	4604      	mov	r4, r0
   b878a:	b9b3      	cbnz	r3, b87ba <srand+0x3a>
   b878c:	2018      	movs	r0, #24
   b878e:	f7fe fe8b 	bl	b74a8 <malloc>
   b8792:	4602      	mov	r2, r0
   b8794:	63a8      	str	r0, [r5, #56]	; 0x38
   b8796:	b920      	cbnz	r0, b87a2 <srand+0x22>
   b8798:	4b0b      	ldr	r3, [pc, #44]	; (b87c8 <srand+0x48>)
   b879a:	480c      	ldr	r0, [pc, #48]	; (b87cc <srand+0x4c>)
   b879c:	2142      	movs	r1, #66	; 0x42
   b879e:	f7fe feb3 	bl	b7508 <__assert_func>
   b87a2:	490b      	ldr	r1, [pc, #44]	; (b87d0 <srand+0x50>)
   b87a4:	4b0b      	ldr	r3, [pc, #44]	; (b87d4 <srand+0x54>)
   b87a6:	e9c0 1300 	strd	r1, r3, [r0]
   b87aa:	4b0b      	ldr	r3, [pc, #44]	; (b87d8 <srand+0x58>)
   b87ac:	6083      	str	r3, [r0, #8]
   b87ae:	230b      	movs	r3, #11
   b87b0:	8183      	strh	r3, [r0, #12]
   b87b2:	2100      	movs	r1, #0
   b87b4:	2001      	movs	r0, #1
   b87b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b87ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b87bc:	2200      	movs	r2, #0
   b87be:	611c      	str	r4, [r3, #16]
   b87c0:	615a      	str	r2, [r3, #20]
   b87c2:	bd38      	pop	{r3, r4, r5, pc}
   b87c4:	2003df80 	.word	0x2003df80
   b87c8:	000b9d61 	.word	0x000b9d61
   b87cc:	000b9d78 	.word	0x000b9d78
   b87d0:	abcd330e 	.word	0xabcd330e
   b87d4:	e66d1234 	.word	0xe66d1234
   b87d8:	0005deec 	.word	0x0005deec

000b87dc <strcpy>:
   b87dc:	4603      	mov	r3, r0
   b87de:	f811 2b01 	ldrb.w	r2, [r1], #1
   b87e2:	f803 2b01 	strb.w	r2, [r3], #1
   b87e6:	2a00      	cmp	r2, #0
   b87e8:	d1f9      	bne.n	b87de <strcpy+0x2>
   b87ea:	4770      	bx	lr

000b87ec <strlen>:
   b87ec:	4603      	mov	r3, r0
   b87ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   b87f2:	2a00      	cmp	r2, #0
   b87f4:	d1fb      	bne.n	b87ee <strlen+0x2>
   b87f6:	1a18      	subs	r0, r3, r0
   b87f8:	3801      	subs	r0, #1
   b87fa:	4770      	bx	lr

000b87fc <strtok>:
   b87fc:	4b16      	ldr	r3, [pc, #88]	; (b8858 <strtok+0x5c>)
   b87fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8800:	681e      	ldr	r6, [r3, #0]
   b8802:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b8804:	4605      	mov	r5, r0
   b8806:	b9fc      	cbnz	r4, b8848 <strtok+0x4c>
   b8808:	2050      	movs	r0, #80	; 0x50
   b880a:	9101      	str	r1, [sp, #4]
   b880c:	f7fe fe4c 	bl	b74a8 <malloc>
   b8810:	9901      	ldr	r1, [sp, #4]
   b8812:	65b0      	str	r0, [r6, #88]	; 0x58
   b8814:	4602      	mov	r2, r0
   b8816:	b920      	cbnz	r0, b8822 <strtok+0x26>
   b8818:	4b10      	ldr	r3, [pc, #64]	; (b885c <strtok+0x60>)
   b881a:	4811      	ldr	r0, [pc, #68]	; (b8860 <strtok+0x64>)
   b881c:	2157      	movs	r1, #87	; 0x57
   b881e:	f7fe fe73 	bl	b7508 <__assert_func>
   b8822:	e9c0 4400 	strd	r4, r4, [r0]
   b8826:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b882a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b882e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b8832:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8836:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b883a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b883e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b8842:	6184      	str	r4, [r0, #24]
   b8844:	7704      	strb	r4, [r0, #28]
   b8846:	6244      	str	r4, [r0, #36]	; 0x24
   b8848:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b884a:	2301      	movs	r3, #1
   b884c:	4628      	mov	r0, r5
   b884e:	b002      	add	sp, #8
   b8850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8854:	f000 b806 	b.w	b8864 <__strtok_r>
   b8858:	2003df80 	.word	0x2003df80
   b885c:	000b9d61 	.word	0x000b9d61
   b8860:	000b9dd1 	.word	0x000b9dd1

000b8864 <__strtok_r>:
   b8864:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8866:	b908      	cbnz	r0, b886c <__strtok_r+0x8>
   b8868:	6810      	ldr	r0, [r2, #0]
   b886a:	b188      	cbz	r0, b8890 <__strtok_r+0x2c>
   b886c:	4604      	mov	r4, r0
   b886e:	4620      	mov	r0, r4
   b8870:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8874:	460f      	mov	r7, r1
   b8876:	f817 6b01 	ldrb.w	r6, [r7], #1
   b887a:	b91e      	cbnz	r6, b8884 <__strtok_r+0x20>
   b887c:	b965      	cbnz	r5, b8898 <__strtok_r+0x34>
   b887e:	6015      	str	r5, [r2, #0]
   b8880:	4628      	mov	r0, r5
   b8882:	e005      	b.n	b8890 <__strtok_r+0x2c>
   b8884:	42b5      	cmp	r5, r6
   b8886:	d1f6      	bne.n	b8876 <__strtok_r+0x12>
   b8888:	2b00      	cmp	r3, #0
   b888a:	d1f0      	bne.n	b886e <__strtok_r+0xa>
   b888c:	6014      	str	r4, [r2, #0]
   b888e:	7003      	strb	r3, [r0, #0]
   b8890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8892:	461c      	mov	r4, r3
   b8894:	e00c      	b.n	b88b0 <__strtok_r+0x4c>
   b8896:	b915      	cbnz	r5, b889e <__strtok_r+0x3a>
   b8898:	f814 3b01 	ldrb.w	r3, [r4], #1
   b889c:	460e      	mov	r6, r1
   b889e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b88a2:	42ab      	cmp	r3, r5
   b88a4:	d1f7      	bne.n	b8896 <__strtok_r+0x32>
   b88a6:	2b00      	cmp	r3, #0
   b88a8:	d0f3      	beq.n	b8892 <__strtok_r+0x2e>
   b88aa:	2300      	movs	r3, #0
   b88ac:	f804 3c01 	strb.w	r3, [r4, #-1]
   b88b0:	6014      	str	r4, [r2, #0]
   b88b2:	e7ed      	b.n	b8890 <__strtok_r+0x2c>

000b88b4 <__register_exitproc>:
   b88b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b88b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8974 <__register_exitproc+0xc0>
   b88bc:	4606      	mov	r6, r0
   b88be:	f8d8 0000 	ldr.w	r0, [r8]
   b88c2:	461f      	mov	r7, r3
   b88c4:	460d      	mov	r5, r1
   b88c6:	4691      	mov	r9, r2
   b88c8:	f000 f856 	bl	b8978 <__retarget_lock_acquire_recursive>
   b88cc:	4b25      	ldr	r3, [pc, #148]	; (b8964 <__register_exitproc+0xb0>)
   b88ce:	681c      	ldr	r4, [r3, #0]
   b88d0:	b934      	cbnz	r4, b88e0 <__register_exitproc+0x2c>
   b88d2:	4c25      	ldr	r4, [pc, #148]	; (b8968 <__register_exitproc+0xb4>)
   b88d4:	601c      	str	r4, [r3, #0]
   b88d6:	4b25      	ldr	r3, [pc, #148]	; (b896c <__register_exitproc+0xb8>)
   b88d8:	b113      	cbz	r3, b88e0 <__register_exitproc+0x2c>
   b88da:	681b      	ldr	r3, [r3, #0]
   b88dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b88e0:	6863      	ldr	r3, [r4, #4]
   b88e2:	2b1f      	cmp	r3, #31
   b88e4:	dd07      	ble.n	b88f6 <__register_exitproc+0x42>
   b88e6:	f8d8 0000 	ldr.w	r0, [r8]
   b88ea:	f000 f847 	bl	b897c <__retarget_lock_release_recursive>
   b88ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b88f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b88f6:	b34e      	cbz	r6, b894c <__register_exitproc+0x98>
   b88f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b88fc:	b988      	cbnz	r0, b8922 <__register_exitproc+0x6e>
   b88fe:	4b1c      	ldr	r3, [pc, #112]	; (b8970 <__register_exitproc+0xbc>)
   b8900:	b923      	cbnz	r3, b890c <__register_exitproc+0x58>
   b8902:	f8d8 0000 	ldr.w	r0, [r8]
   b8906:	f000 f838 	bl	b897a <__retarget_lock_release>
   b890a:	e7f0      	b.n	b88ee <__register_exitproc+0x3a>
   b890c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8910:	f7fe fdca 	bl	b74a8 <malloc>
   b8914:	2800      	cmp	r0, #0
   b8916:	d0f4      	beq.n	b8902 <__register_exitproc+0x4e>
   b8918:	2300      	movs	r3, #0
   b891a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b891e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8922:	6863      	ldr	r3, [r4, #4]
   b8924:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8928:	2201      	movs	r2, #1
   b892a:	409a      	lsls	r2, r3
   b892c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8930:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8934:	4313      	orrs	r3, r2
   b8936:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b893a:	2e02      	cmp	r6, #2
   b893c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8940:	bf02      	ittt	eq
   b8942:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8946:	4313      	orreq	r3, r2
   b8948:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b894c:	6863      	ldr	r3, [r4, #4]
   b894e:	f8d8 0000 	ldr.w	r0, [r8]
   b8952:	1c5a      	adds	r2, r3, #1
   b8954:	3302      	adds	r3, #2
   b8956:	6062      	str	r2, [r4, #4]
   b8958:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b895c:	f000 f80e 	bl	b897c <__retarget_lock_release_recursive>
   b8960:	2000      	movs	r0, #0
   b8962:	e7c6      	b.n	b88f2 <__register_exitproc+0x3e>
   b8964:	2003e7e8 	.word	0x2003e7e8
   b8968:	2003e75c 	.word	0x2003e75c
   b896c:	00000000 	.word	0x00000000
   b8970:	000b74a9 	.word	0x000b74a9
   b8974:	2003dfe4 	.word	0x2003dfe4

000b8978 <__retarget_lock_acquire_recursive>:
   b8978:	4770      	bx	lr

000b897a <__retarget_lock_release>:
   b897a:	4770      	bx	lr

000b897c <__retarget_lock_release_recursive>:
   b897c:	4770      	bx	lr

000b897e <link_code_end>:
	...

000b8980 <dynalib_user>:
   b8980:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8990:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b89a0:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   b89b0:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   b89c0:	7272 726f 2000 0041 4420 5300 6e65 6f73     rror. A. D.Senso
   b89d0:	2072 6f50 6163 4420 7369 6174 636e 6169     r Poca Distancia
   b89e0:	5300 6e65 6f73 2072 754d 6863 2061 6944     .Sensor Mucha Di
   b89f0:	7473 6e61 6963 0061 4c4f 4445 203a 6553     stancia.OLED: Se
   b8a00:	736e 726f 4c20 7a75 2d20 203e 6425 5300     nsor Luz -> %d.S
   b8a10:	6e65 6f73 2072 6f4e 4c20 7a75 5300 6e65     ensor No Luz.Sen
   b8a20:	6f73 2072 6953 4c20 7a75 5300 6e65 6f73     sor Si Luz.Senso
   b8a30:	2072 6f4e 5220 6975 6f64 5300 6e65 6f73     r No Ruido.Senso
   b8a40:	2072 6953 5220 6975 6f64 5300 6e65 6f73     r Si Ruido.Senso
   b8a50:	2072 6f4e 4220 746f 6e6f 5300 6e65 6f73     r No Boton.Senso
   b8a60:	2072 6953 4220 746f 6e6f 5300 6e65 6f73     r Si Boton.Senso
   b8a70:	2072 6f4e 5220 746f 7461 7669 006f 6553     r No Rotativo.Se
   b8a80:	736e 726f 5320 2069 6f52 6174 6974 6f76     nsor Si Rotativo
   b8a90:	5300 6e65 6f73 2072 6554 706d 462e 6972     .Sensor Temp.Fri
   b8aa0:	006f 6553 736e 726f 5420 6d65 2e70 6554     o.Sensor Temp.Te
   b8ab0:	706d 616c 6f64 5300 6e65 6f73 2072 6554     mplado.Sensor Te
   b8ac0:	706d 432e 6c61 726f 5300 6e65 6f73 2072     mp.Calor.Sensor 
   b8ad0:	6944 7473 6e61 6963 2061 6543 6372 0061     Distancia Cerca.
   b8ae0:	6553 736e 726f 4420 7369 6174 636e 6169     Sensor Distancia
   b8af0:	4c20 6a65 736f 5300 6e65 6f73 4e72 566f      Lejos.SensorNoV
   b8b00:	6c61 6469 456f 7272 726f 5200 4247 562d     alidoError.RGB-V
   b8b10:	7265 6564 522d 6a6f 006f 4752 2d42 6d41     erde-Rojo.RGB-Am
   b8b20:	7261 6c69 6f6c 4d2d 726f 6461 006f 4752     arillo-Morado.RG
   b8b30:	2d42 7a41 6c75 4e2d 7261 6e61 616a 5200     B-Azul-Naranja.R
   b8b40:	4247 422d 696c 6b6e 5200 4247 522d 6961     GB-Blink.RGB-Rai
   b8b50:	426e 776f 5200 4247 4f2d 2d6e 664f 0066     nBow.RGB-On-Off.
   b8b60:	755a 626d 6461 726f 4f20 2d6e 664f 0066     Zumbador On-Off.
   b8b70:	755a 626d 6461 726f 4220 696c 6b6e 4100     Zumbador Blink.A
   b8b80:	7463 6175 6f64 4e72 566f 6c61 6469 456f     ctuadorNoValidoE
   b8b90:	7272 726f 4d00 4649 5241 5f45 6552 6461     rror.MIFARE_Read
   b8ba0:	2928 6620 6961 656c 3a64 0020 4350 5f44     () failed: .PCD_
   b8bb0:	7541 6874 6e65 6974 6163 6574 2928 6620     Authenticate() f
   b8bc0:	6961 656c 3a64 0020 6154 4967 666e 3a6f     ailed: .TagInfo:
   b8bd0:	2520 0073 7345 6120 616e 6f6c 6967 6f63      %s.Es analogico
   b8be0:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b8bf0:	7472 206f 3041 000a 6f43 656e 7463 7261     rto A0..Conectar
   b8c00:	6120 206c 7570 7265 6f74 4120 0a32 4300      al puerto A2..C
   b8c10:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b8c20:	206f 3441 000a 6f43 656e 7463 7261 6120     o A4..Conectar a
   b8c30:	206c 7570 7265 6f74 4420 0a32 4300 6e6f     l puerto D2..Con
   b8c40:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   b8c50:	3444 000a 6f43 656e 7463 7261 6120 206c     D4..Conectar al 
   b8c60:	7570 7265 6f74 4420 0a36 4500 7272 726f     puerto D6..Error
   b8c70:	203a 6f4e 6820 7961 6d20 7361 7020 6575     : No hay mas pue
   b8c80:	7472 736f 6420 7369 6f70 696e 6c62 7365     rtos disponibles
   b8c90:	0a20 4c00 6465 7245 6f72 4f72 7470 6f69      ..LedErrorOptio
   b8ca0:	006e 6156 6f6c 2072 6f6e 7620 6c61 6469     n.Valor no valid
   b8cb0:	006f 6e49 6176 696c 2064 6573 736e 726f     o.Invalid sensor
   b8cc0:	2021 3e2d 5320 6e65 6f73 2072 6572 6570     ! -> Sensor repe
   b8cd0:	6974 6f64 6520 206e 6c65 6220 6f6c 7571     tido en el bloqu
   b8ce0:	0065 7369 654e 4177 7463 6175 6f64 2072     e.isNewActuador 
   b8cf0:	6f63 706d 7261 6e69 2067 2520 2064 202d     comparing  %d - 
   b8d00:	6425 5400 7572 0065 6146 736c 0065 6154     %d.True.False.Ta
   b8d10:	2067 6544 6574 7463 6461 2061 2d2d 203e     g Detectada --> 
   b8d20:	4500 656a 7563 6174 646e 206f 6174 2067     .Ejecutando tag 
   b8d30:	2d2d 203e 4500 7272 726f 5020 6575 7472     --> .Error Puert
   b8d40:	006f 6553 6520 7073 7265 6261 2061 4649     o.Se esperaba IF
   b8d50:	7420 6761 4400 7365 7570 7365 6420 2065      tag.Despues de 
   b8d60:	6e75 7320 6e65 6f73 2072 6573 6520 7073     un sensor se esp
   b8d70:	7265 2061 6e75 2061 6f63 636e 6f69 3a6e     era una concion:
   b8d80:	4120 444e 7520 4f20 0052 6e49 6176 696c      AND u OR.Invali
   b8d90:	2064 6341 7574 6461 726f 4e00 6d75 7265     d Actuador.Numer
   b8da0:	206f 6564 6220 6f6c 7571 7365 3e20 3220     o de bloques > 2
   b8db0:	7c20 207c 6553 6e20 6365 7365 7469 2061      || Se necesita 
   b8dc0:	6c61 6d20 6e65 736f 7520 206e 6361 7574     al menos un actu
   b8dd0:	6461 726f 7020 7261 2061 6574 6d72 6e69     ador para termin
   b8de0:	7261 6520 206c 6c62 716f 6575 5500 616e     ar el bloque.Una
   b8df0:	6320 6e6f 6963 6963 6e6f 7320 6c6f 206f      concicion solo 
   b8e00:	7570 6465 2065 7269 7320 6765 6975 6164     puede ir seguida
   b8e10:	6420 2065 6e75 7320 6e65 6f73 2e72 4e00      de un sensor..N
   b8e20:	6d75 7265 206f 6564 7320 6e65 6f73 6572     umero de sensore
   b8e30:	2073 6e69 7566 6963 6e65 6574 0073 4449     s infucientes.ID
   b8e40:	5420 6761 6920 636e 726f 6572 7463 0061      Tag incorrecta.
   b8e50:	6946 206e 6154 0067 2023 6c42 716f 6575     Fin Tag.# Bloque
   b8e60:	7c20 2320 5320 6e65 6f73 6572 2073 207c      | # Sensores | 
   b8e70:	2023 6f43 646e 6369 6f69 656e 2073 207c     # Condiciones | 
   b8e80:	2023 6341 7574 6461 726f 7365 2000 2020     # Actuadores.   
   b8e90:	2520 2064 7c09 2009 6425 0920 097c 2520      %d .|. %d .|. %
   b8ea0:	2064 7c09 2009 6425 0920 097c 2520 0064     d .|. %d .|. %d.
   b8eb0:	002d                                        -.

000b8eb2 <_ZL4font>:
   b8eb2:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8ec2:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8ed2:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8ee2:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8ef2:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8f02:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8f12:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8f22:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8f32:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8f42:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8f52:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8f62:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8f72:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8f82:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8f92:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8fa2:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8fb2:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8fc2:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8fd2:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8fe2:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8ff2:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9002:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9012:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9022:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9032:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9042:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9052:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9062:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9072:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9082:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b9092:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b90a2:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b90b2:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b90c2:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b90d2:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b90e2:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b90f2:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b9102:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b9112:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b9122:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9132:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9142:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b9152:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b9162:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b9172:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b9182:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b9192:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b91a2:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b91b2:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b91c2:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b91d2:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b91e2:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b91f2:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b9202:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b9212:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b9222:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b9232:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b9242:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b9252:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b9262:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b9272:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b9282:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b9292:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b92a2:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b92b2:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b92c2:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b92d2:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b92e2:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b92f2:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b9302:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b9312:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b9322:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b9332:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b9342:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b9352:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b9362:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b9372:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b9382:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b9392:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b93a2:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b93b4 <_ZTV12Adafruit_GFX>:
	...
   b93c4:	5b4d 000b 7909 000b 409d 000b 5553 000b     M[...y...@..SU..
   b93d4:	5555 000b 5587 000b 5563 000b 5575 000b     UU...U..cU..uU..
   b93e4:	5495 000b 5553 000b 577f 000b 577d 000b     .T..SU...W..}W..
   b93f4:	559f 000b 55dd 000b 5617 000b 565d 000b     .U...U...V..]V..
   b9404:	5679 000b 56fd 000b 6564 6166 6c75 2074     yV...V..default 
   b9414:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b9424:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b9434:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b9444:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b9450 <_ZTVN8particle11SPISettingsE>:
	...
   b9458:	5c6d 000b 5c5b 000b 5c5d 000b               m\..[\..]\..

000b9464 <_ZL12splash2_data>:
   b9464:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9474:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9484:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b94a0:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b94b0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b94c0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b94d0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b94e0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b94f0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9500:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9510:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9520:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9530:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b9540:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b9550:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9560:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9570:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9580:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9590:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b95a0:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b95b0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b95c0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b95d0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b95e0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b95f8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9608:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9618:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9628:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9638:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b9644 <_ZL17sucreLogoNew_data>:
   b9644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9664:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b9674:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b9684:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b9694:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b96a4:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b96b4:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b96c4:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b96d4:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b96e4:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b96f4:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b9704:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b9714:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b9724:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b9734:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b9744:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b9754:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9764:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b9774:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b9784:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b9794:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b97a4:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b97b4:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b97c4:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b97d4:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b97e4:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b97f4:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b9804:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b9814:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b9824:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b9834:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b9844:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b9854:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b9864:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b9874:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b9884:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b9894:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b98a4:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b98b4:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b98c4:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b98d4:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b98e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b98f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9904:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9914:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9924:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9934:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9944:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b9954:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b9964:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b9974:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b9984:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b9994:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b99a4:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b99b4:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b99c4:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b99d4:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b99e4:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b99f4:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b9a04:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b9a14:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b9a24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9a34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b9a44 <_ZTV16Adafruit_SSD1306>:
	...
   b9a4c:	5cc1 000b 5cd9 000b 5b4d 000b 7909 000b     .\...\..M[...y..
   b9a5c:	5ced 000b 5553 000b 5555 000b 5587 000b     .\..SU..UU...U..
   b9a6c:	5563 000b 5575 000b 5495 000b 5553 000b     cU..uU...T..SU..
   b9a7c:	577f 000b 5e7f 000b 641b 000b 63cd 000b     .W...^...d...c..
   b9a8c:	5617 000b 565d 000b 5679 000b 56fd 000b     .V..]V..yV...V..

000b9a9c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9a9c:	8000 e0c0 f8f0 fefc                         ........

000b9aa4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9aa4:	0100 0703 1f0f 7f3f                         ......?.

000b9aac <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9aac:	d5ae a880                                   ....

000b9ab0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9ab0:	00d3 8d40                                   ..@.

000b9ab4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9ab4:	0020 c8a1                                    ...

000b9ab8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9ab8:	40db a6a4 af2e                              .@....

000b9abe <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9abe:	02da 8f81                                   ....

000b9ac2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9ac2:	12da                                         ...

000b9ac5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9ac5:	02da                                         ...

000b9ac8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9ac8:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
   b9ad8:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
   b9ae8:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
   b9af8:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
   b9b08:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
   b9b18:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
   b9b28:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
   b9b38:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
   b9b48:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
   b9b58:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
   b9b68:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
   b9b78:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
   b9b88:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
   b9b98:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
   b9ba8:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
   b9bb8:	2064 6977 6874 4e20 4b41 002e               d with NAK..

000b9bc4 <CSWTCH.84>:
   b9bc4:	9adb 000b 9ae4 000b 9afc 000b 9b11 000b     ................
   b9bd4:	9b2b 000b 9b47 000b 9b76 000b 9b88 000b     +...G...v.......
   b9be4:	9ba2 000b                                   ....

000b9be8 <_ZTVN5spark13EthernetClassE>:
	...
   b9bf0:	75d3 000b 75c9 000b 75bf 000b 75b5 000b     .u...u...u...u..
   b9c00:	75a9 000b 759d 000b 77e5 000b 77ed 000b     .u...u...w...w..
   b9c10:	7591 000b 7589 000b 757f 000b 7575 000b     .u...u...u..uu..
   b9c20:	781d 000b                                   .x..

000b9c24 <_ZTV7TwoWire>:
	...
   b9c2c:	75f1 000b 763b 000b 7613 000b 75f3 000b     .u..;v...v...u..
   b9c3c:	761b 000b 7623 000b 762b 000b 7633 000b     .v..#v..+v..3v..

000b9c4c <_ZTV9IPAddress>:
	...
   b9c54:	76b5 000b 76a5 000b 76a7 000b 7061 0070     .v...v...v..app.

000b9c64 <_ZTVN5spark12NetworkClassE>:
	...
   b9c6c:	77a5 000b 77af 000b 77b9 000b 77c3 000b     .w...w...w...w..
   b9c7c:	77cd 000b 77d9 000b 77e5 000b 77ed 000b     .w...w...w...w..
   b9c8c:	77f5 000b 7801 000b 7809 000b 7813 000b     .w...x...x...x..
   b9c9c:	781d 000b                                   .x..

000b9ca0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9ca0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9cb0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9cc0:	6d69 0065                                   ime.

000b9cc4 <_ZTV11USARTSerial>:
	...
   b9ccc:	7d85 000b 7df1 000b 7dc9 000b 7909 000b     .}...}...}...y..
   b9cdc:	7d99 000b 7db5 000b 7da7 000b 7dc3 000b     .}...}...}...}..
   b9cec:	7d87 000b 7d8b 000b                         .}...}..

000b9cf4 <_ZTV9USBSerial>:
	...
   b9cfc:	7e2f 000b 7e97 000b 7e6d 000b 7909 000b     /~...~..m~...y..
   b9d0c:	7e5f 000b 7e31 000b 7e41 000b 7e91 000b     _~..1~..A~...~..
   b9d1c:	7e51 000b 7e29 000b                         Q~..)~..

000b9d24 <_ZTVN5spark9WiFiClassE>:
	...
   b9d2c:	7f8f 000b 7f85 000b 7f7b 000b 7f31 000b     ........{...1...
   b9d3c:	7f6f 000b 7f63 000b 77e5 000b 77ed 000b     o...c....w...w..
   b9d4c:	7f57 000b 7f4f 000b 7f45 000b 7f3b 000b     W...O...E...;...
   b9d5c:	781d 000b                                   .x..

000b9d60 <_ZSt7nothrow>:
   b9d60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9d70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9d80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9d90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9da0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b9db0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9dc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b9dd0:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b9de0:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b9df0:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b9e00:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b9e10:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b9e20:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b9e2c <link_const_variable_data_end>:
   b9e2c:	000b528d 	.word	0x000b528d
   b9e30:	000b7531 	.word	0x000b7531
   b9e34:	000b75dd 	.word	0x000b75dd
   b9e38:	000b7795 	.word	0x000b7795
   b9e3c:	000b78f5 	.word	0x000b78f5
   b9e40:	000b7a31 	.word	0x000b7a31
   b9e44:	000b7d4d 	.word	0x000b7d4d
   b9e48:	000b7d71 	.word	0x000b7d71
   b9e4c:	000b7f99 	.word	0x000b7f99
