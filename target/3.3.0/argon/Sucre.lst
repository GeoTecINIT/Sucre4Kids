
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bae80  000bae80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000baea4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  2003df40  000baea8  0001df40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000814  2003dfdc  2003dfdc  0002dfdc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000baf44  000baf44  0002af44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000baf6c  000baf6c  0002af6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015ed74  00000000  00000000  0002af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000184e4  00000000  00000000  00189ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004f66f  00000000  00000000  001a21c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003678  00000000  00000000  001f1837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bdf0  00000000  00000000  001f4eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043899  00000000  00000000  00200c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005691c  00000000  00000000  00244538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013bce9  00000000  00000000  0029ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a66c  00000000  00000000  003d6b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 faff 	bl	b9634 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fb07 	bl	b9650 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df40 	.word	0x2003df40
   b404c:	000baea8 	.word	0x000baea8
   b4050:	2003dfdc 	.word	0x2003dfdc
   b4054:	2003dfdc 	.word	0x2003dfdc
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fa1d 	bl	b84a0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bae50 	.word	0x000bae50
   b4080:	000bae74 	.word	0x000bae74

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bfde 	b.w	b5044 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f967 	bl	b535c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b9bd 	b.w	b8410 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f003 be7d 	b.w	b7d94 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 be83 	b.w	b7da4 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f003 fdd8 	bl	b7c5c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b79fd 	.word	0x000b79fd
   b40b4:	000b9894 	.word	0x000b9894

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f004 f92c 	bl	b8332 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	b40e      	push	{r1, r2, r3}
   b40e6:	b503      	push	{r0, r1, lr}
   b40e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40ea:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40f2:	f004 f91e 	bl	b8332 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f6:	b002      	add	sp, #8
   b40f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40fc:	b003      	add	sp, #12
   b40fe:	4770      	bx	lr

000b4100 <_Z13leerSensorLuzv>:
#define boton_PIN D2
#define sensorSonido_PIN A4
#define rotoryAngle_PIN A0

boolean leerSensorLuz()
{
   b4100:	b508      	push	{r3, lr}
   if (analogRead(sensorLuz_PIN) >= 2500)
   b4102:	2011      	movs	r0, #17
   b4104:	f004 fd2b 	bl	b8b5e <analogRead>
      return true;
   return false;
}
   b4108:	f640 13c3 	movw	r3, #2499	; 0x9c3
   b410c:	4298      	cmp	r0, r3
   b410e:	bfd4      	ite	le
   b4110:	2000      	movle	r0, #0
   b4112:	2001      	movgt	r0, #1
   b4114:	bd08      	pop	{r3, pc}

000b4116 <_Z9leerBotonv>:

boolean leerBoton()
{
   b4116:	b508      	push	{r3, lr}
   pinMode(boton_PIN, INPUT);
   b4118:	2100      	movs	r1, #0
   b411a:	2002      	movs	r0, #2
   b411c:	f004 fce2 	bl	b8ae4 <pinMode>
   // Serial.printlnf("Valor boton %d , %d", analogRead(boton_PIN), digitalRead(boton_PIN));
   if (digitalRead(boton_PIN) == HIGH)
   b4120:	2002      	movs	r0, #2
   b4122:	f004 fd09 	bl	b8b38 <digitalRead>
      return true;
   return false;
}
   b4126:	1e43      	subs	r3, r0, #1
   b4128:	4258      	negs	r0, r3
   b412a:	4158      	adcs	r0, r3
   b412c:	bd08      	pop	{r3, pc}
	...

000b4130 <_Z10leerAngulov>:

boolean leerAngulo()
{
   b4130:	b508      	push	{r3, lr}
   float voltage;
   int sensor_value = analogRead(rotoryAngle_PIN);
   b4132:	2013      	movs	r0, #19
   b4134:	f004 fd13 	bl	b8b5e <analogRead>
   voltage = (float)sensor_value * 5 / 1023;
   b4138:	ee07 0a90 	vmov	s15, r0
   b413c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4140:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4144:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4148:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4170 <_Z10leerAngulov+0x40>
   b414c:	ee87 7a86 	vdiv.f32	s14, s15, s12
   float degrees = (voltage * 300) / 5;
   b4150:	eddf 7a08 	vldr	s15, [pc, #32]	; b4174 <_Z10leerAngulov+0x44>
   b4154:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4158:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   if (degrees >= 680)
   b415c:	eddf 7a06 	vldr	s15, [pc, #24]	; b4178 <_Z10leerAngulov+0x48>
   b4160:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      //Serial.println(degrees);
      return true;
   }

   return false;
}
   b4168:	bfac      	ite	ge
   b416a:	2001      	movge	r0, #1
   b416c:	2000      	movlt	r0, #0
   b416e:	bd08      	pop	{r3, pc}
   b4170:	447fc000 	.word	0x447fc000
   b4174:	43960000 	.word	0x43960000
   b4178:	442a0000 	.word	0x442a0000

000b417c <_Z16leerSensorSonidov>:

boolean leerSensorSonido()
{
   b417c:	b508      	push	{r3, lr}
   // Serial.printlnf("analogico: %d", analogRead(A4));
   if (analogRead(sensorSonido_PIN) >= 700)
   b417e:	200f      	movs	r0, #15
   b4180:	f004 fced 	bl	b8b5e <analogRead>
      return true;
   return false;
}
   b4184:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4188:	bfb4      	ite	lt
   b418a:	2000      	movlt	r0, #0
   b418c:	2001      	movge	r0, #1
   b418e:	bd08      	pop	{r3, pc}

000b4190 <_Z11leerSensor0i>:

boolean leerSensor0(int sensor)
{
   switch (sensor)
   b4190:	3802      	subs	r0, #2
{
   b4192:	b508      	push	{r3, lr}
   b4194:	2803      	cmp	r0, #3
   b4196:	d813      	bhi.n	b41c0 <_Z11leerSensor0i+0x30>
   b4198:	e8df f000 	tbb	[pc, r0]
   b419c:	0e0a0602 	.word	0x0e0a0602
   default:
      Serial.println("No es valido");
      return false;
      break;
   }
   b41a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      return leerSensorLuz();
   b41a4:	f7ff bfac 	b.w	b4100 <_Z13leerSensorLuzv>
   b41a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      return leerSensorSonido();
   b41ac:	f7ff bfe6 	b.w	b417c <_Z16leerSensorSonidov>
   b41b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      return leerBoton();
   b41b4:	f7ff bfaf 	b.w	b4116 <_Z9leerBotonv>
   b41b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      return leerAngulo();
   b41bc:	f7ff bfb8 	b.w	b4130 <_Z10leerAngulov>
      Serial.println("No es valido");
   b41c0:	f004 fa90 	bl	b86e4 <_Z16_fetch_usbserialv>
   b41c4:	4902      	ldr	r1, [pc, #8]	; (b41d0 <_Z11leerSensor0i+0x40>)
   b41c6:	f004 f88c 	bl	b82e2 <_ZN5Print7printlnEPKc>
   b41ca:	2000      	movs	r0, #0
   b41cc:	bd08      	pop	{r3, pc}
   b41ce:	bf00      	nop
   b41d0:	000b98a9 	.word	0x000b98a9

000b41d4 <_Z11noDistanciai>:

// Distance
#include "Grove-Ultrasonic-Ranger.h"

bool noDistancia(int puerto)
{
   b41d4:	b507      	push	{r0, r1, r2, lr}
   b41d6:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b41d8:	a801      	add	r0, sp, #4
   b41da:	f002 fc45 	bl	b6a68 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b41de:	a801      	add	r0, sp, #4
   b41e0:	f002 fc44 	bl	b6a6c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b41e4:	2809      	cmp	r0, #9
   b41e6:	bf8c      	ite	hi
   b41e8:	2000      	movhi	r0, #0
   b41ea:	2001      	movls	r0, #1
   b41ec:	b003      	add	sp, #12
   b41ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b41f2 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b41f2:	b507      	push	{r0, r1, r2, lr}
   b41f4:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b41f6:	a801      	add	r0, sp, #4
   b41f8:	f002 fc36 	bl	b6a68 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b41fc:	a801      	add	r0, sp, #4
   b41fe:	f002 fc35 	bl	b6a6c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4202:	280a      	cmp	r0, #10
   b4204:	bfd4      	ite	le
   b4206:	2000      	movle	r0, #0
   b4208:	2001      	movgt	r0, #1
   b420a:	b003      	add	sp, #12
   b420c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4210 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4210:	2802      	cmp	r0, #2
{
   b4212:	b508      	push	{r3, lr}
    switch (puerto)
   b4214:	d00b      	beq.n	b422e <_Z5siLuzi+0x1e>
   b4216:	2804      	cmp	r0, #4
   b4218:	d00b      	beq.n	b4232 <_Z5siLuzi+0x22>
   b421a:	b960      	cbnz	r0, b4236 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b421c:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b421e:	f004 fc9e 	bl	b8b5e <analogRead>
   b4222:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4226:	bfb4      	ite	lt
   b4228:	2000      	movlt	r0, #0
   b422a:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b422c:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b422e:	2011      	movs	r0, #17
   b4230:	e7f5      	b.n	b421e <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4232:	200f      	movs	r0, #15
   b4234:	e7f3      	b.n	b421e <_Z5siLuzi+0xe>
    switch (puerto)
   b4236:	2000      	movs	r0, #0
   b4238:	e7f8      	b.n	b422c <_Z5siLuzi+0x1c>

000b423a <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b423a:	2802      	cmp	r0, #2
{
   b423c:	b508      	push	{r3, lr}
    switch (puerto)
   b423e:	d00b      	beq.n	b4258 <_Z5noLuzi+0x1e>
   b4240:	2804      	cmp	r0, #4
   b4242:	d00b      	beq.n	b425c <_Z5noLuzi+0x22>
   b4244:	b960      	cbnz	r0, b4260 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4246:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4248:	f004 fc89 	bl	b8b5e <analogRead>
   b424c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4250:	bfcc      	ite	gt
   b4252:	2000      	movgt	r0, #0
   b4254:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4256:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4258:	2011      	movs	r0, #17
   b425a:	e7f5      	b.n	b4248 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b425c:	200f      	movs	r0, #15
   b425e:	e7f3      	b.n	b4248 <_Z5noLuzi+0xe>
    switch (puerto)
   b4260:	2000      	movs	r0, #0
   b4262:	e7f8      	b.n	b4256 <_Z5noLuzi+0x1c>

000b4264 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b4264:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b4266:	b280      	uxth	r0, r0
   b4268:	f004 fc79 	bl	b8b5e <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b426c:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4270:	bfb4      	ite	lt
   b4272:	2000      	movlt	r0, #0
   b4274:	2001      	movge	r0, #1
   b4276:	bd08      	pop	{r3, pc}

000b4278 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4278:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b427a:	b280      	uxth	r0, r0
   b427c:	f004 fc6f 	bl	b8b5e <analogRead>
        return true;
    return false;
}
   b4280:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4284:	bfcc      	ite	gt
   b4286:	2000      	movgt	r0, #0
   b4288:	2001      	movle	r0, #1
   b428a:	bd08      	pop	{r3, pc}

000b428c <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b428c:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b428e:	b280      	uxth	r0, r0
   b4290:	2100      	movs	r1, #0
   b4292:	9001      	str	r0, [sp, #4]
   b4294:	f004 fc26 	bl	b8ae4 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4298:	9801      	ldr	r0, [sp, #4]
   b429a:	f004 fc4d 	bl	b8b38 <digitalRead>
        return true;
    return false;
}
   b429e:	1e43      	subs	r3, r0, #1
   b42a0:	4258      	negs	r0, r3
   b42a2:	4158      	adcs	r0, r3
   b42a4:	b003      	add	sp, #12
   b42a6:	f85d fb04 	ldr.w	pc, [sp], #4

000b42aa <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b42aa:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b42ac:	b280      	uxth	r0, r0
   b42ae:	2100      	movs	r1, #0
   b42b0:	9001      	str	r0, [sp, #4]
   b42b2:	f004 fc17 	bl	b8ae4 <pinMode>
    if (digitalRead(puerto) == LOW)
   b42b6:	9801      	ldr	r0, [sp, #4]
   b42b8:	f004 fc3e 	bl	b8b38 <digitalRead>
        return true;
    return false;
}
   b42bc:	fab0 f080 	clz	r0, r0
   b42c0:	0940      	lsrs	r0, r0, #5
   b42c2:	b003      	add	sp, #12
   b42c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b42c8 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b42c8:	2802      	cmp	r0, #2
{
   b42ca:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b42cc:	d024      	beq.n	b4318 <_Z10siRotativoi+0x50>
   b42ce:	2804      	cmp	r0, #4
   b42d0:	d024      	beq.n	b431c <_Z10siRotativoi+0x54>
   b42d2:	b918      	cbnz	r0, b42dc <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b42d4:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b42d6:	f004 fc42 	bl	b8b5e <analogRead>
   b42da:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b42dc:	eddd 7a01 	vldr	s15, [sp, #4]
   b42e0:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4320 <_Z10siRotativoi+0x58>
   b42e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42e8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b42f0:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b42f4:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4324 <_Z10siRotativoi+0x5c>
   b42f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4300:	eddf 7a09 	vldr	s15, [pc, #36]	; b4328 <_Z10siRotativoi+0x60>
   b4304:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b430c:	bfac      	ite	ge
   b430e:	2001      	movge	r0, #1
   b4310:	2000      	movlt	r0, #0
   b4312:	b003      	add	sp, #12
   b4314:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4318:	2011      	movs	r0, #17
   b431a:	e7dc      	b.n	b42d6 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b431c:	200f      	movs	r0, #15
   b431e:	e7da      	b.n	b42d6 <_Z10siRotativoi+0xe>
   b4320:	447fc000 	.word	0x447fc000
   b4324:	43960000 	.word	0x43960000
   b4328:	442a0000 	.word	0x442a0000

000b432c <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b432c:	2802      	cmp	r0, #2
{
   b432e:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4330:	d024      	beq.n	b437c <_Z10noRotativoi+0x50>
   b4332:	2804      	cmp	r0, #4
   b4334:	d024      	beq.n	b4380 <_Z10noRotativoi+0x54>
   b4336:	b918      	cbnz	r0, b4340 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4338:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b433a:	f004 fc10 	bl	b8b5e <analogRead>
   b433e:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4340:	eddd 7a01 	vldr	s15, [sp, #4]
   b4344:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4384 <_Z10noRotativoi+0x58>
   b4348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b434c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4350:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4354:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4358:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4388 <_Z10noRotativoi+0x5c>
   b435c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4360:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b4364:	eddf 7a09 	vldr	s15, [pc, #36]	; b438c <_Z10noRotativoi+0x60>
   b4368:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4370:	bf94      	ite	ls
   b4372:	2001      	movls	r0, #1
   b4374:	2000      	movhi	r0, #0
   b4376:	b003      	add	sp, #12
   b4378:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b437c:	2011      	movs	r0, #17
   b437e:	e7dc      	b.n	b433a <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4380:	200f      	movs	r0, #15
   b4382:	e7da      	b.n	b433a <_Z10noRotativoi+0xe>
   b4384:	447fc000 	.word	0x447fc000
   b4388:	43960000 	.word	0x43960000
   b438c:	442a0000 	.word	0x442a0000

000b4390 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4390:	b530      	push	{r4, r5, lr}
   b4392:	ed2d 8b02 	vpush	{d8}
   b4396:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4398:	b2c1      	uxtb	r1, r0
   b439a:	2306      	movs	r3, #6
   b439c:	220b      	movs	r2, #11
   b439e:	a801      	add	r0, sp, #4
   b43a0:	f002 fb88 	bl	b6ab4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b43a4:	a801      	add	r0, sp, #4
   b43a6:	f002 fb8c 	bl	b6ac2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43aa:	a801      	add	r0, sp, #4
   b43ac:	f002 fc46 	bl	b6c3c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b43b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b43b8:	eeb4 0a40 	vcmp.f32	s0, s0
   b43bc:	bf0c      	ite	eq
   b43be:	2401      	moveq	r4, #1
   b43c0:	2400      	movne	r4, #0
   b43c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43c6:	bf68      	it	vs
   b43c8:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b43cc:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b43d0:	2c00      	cmp	r4, #0
   b43d2:	d1ea      	bne.n	b43aa <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b43d4:	f004 f986 	bl	b86e4 <_Z16_fetch_usbserialv>
   b43d8:	4605      	mov	r5, r0
   b43da:	ee18 0a10 	vmov	r0, s16
   b43de:	f004 fdb9 	bl	b8f54 <__aeabi_f2d>
   b43e2:	4602      	mov	r2, r0
   b43e4:	460b      	mov	r3, r1
   b43e6:	4628      	mov	r0, r5
   b43e8:	490a      	ldr	r1, [pc, #40]	; (b4414 <_Z8tempFrioi+0x84>)
   b43ea:	f7ff fe7b 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b43ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b43f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f6:	dd08      	ble.n	b440a <_Z8tempFrioi+0x7a>
   b43f8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b43fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4404:	bf4c      	ite	mi
   b4406:	2401      	movmi	r4, #1
   b4408:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b440a:	4620      	mov	r0, r4
   b440c:	b007      	add	sp, #28
   b440e:	ecbd 8b02 	vpop	{d8}
   b4412:	bd30      	pop	{r4, r5, pc}
   b4414:	000b98b6 	.word	0x000b98b6

000b4418 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4418:	b510      	push	{r4, lr}
   b441a:	ed2d 8b02 	vpush	{d8}
   b441e:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4420:	b2c1      	uxtb	r1, r0
   b4422:	2306      	movs	r3, #6
   b4424:	220b      	movs	r2, #11
   b4426:	a801      	add	r0, sp, #4
   b4428:	f002 fb44 	bl	b6ab4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b442c:	a801      	add	r0, sp, #4
   b442e:	f002 fb48 	bl	b6ac2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4432:	a801      	add	r0, sp, #4
   b4434:	f002 fc02 	bl	b6c3c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4438:	eeb4 0a40 	vcmp.f32	s0, s0
   b443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4440:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4444:	d6f5      	bvs.n	b4432 <_Z12tempTempladoi+0x1a>
   b4446:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b444e:	d0f0      	beq.n	b4432 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4450:	f004 f948 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4454:	4604      	mov	r4, r0
   b4456:	ee18 0a10 	vmov	r0, s16
   b445a:	f004 fd7b 	bl	b8f54 <__aeabi_f2d>
   b445e:	4602      	mov	r2, r0
   b4460:	460b      	mov	r3, r1
   b4462:	4620      	mov	r0, r4
   b4464:	490c      	ldr	r1, [pc, #48]	; (b4498 <_Z12tempTempladoi+0x80>)
   b4466:	f7ff fe3d 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b446a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b446e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4476:	dc04      	bgt.n	b4482 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4478:	2000      	movs	r0, #0
}
   b447a:	b006      	add	sp, #24
   b447c:	ecbd 8b02 	vpop	{d8}
   b4480:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4482:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4486:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b448e:	bf4c      	ite	mi
   b4490:	2001      	movmi	r0, #1
   b4492:	2000      	movpl	r0, #0
   b4494:	e7f1      	b.n	b447a <_Z12tempTempladoi+0x62>
   b4496:	bf00      	nop
   b4498:	000b98b6 	.word	0x000b98b6

000b449c <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b449c:	b530      	push	{r4, r5, lr}
   b449e:	ed2d 8b02 	vpush	{d8}
   b44a2:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b44a4:	b2c1      	uxtb	r1, r0
   b44a6:	2306      	movs	r3, #6
   b44a8:	220b      	movs	r2, #11
   b44aa:	a801      	add	r0, sp, #4
   b44ac:	f002 fb02 	bl	b6ab4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b44b0:	a801      	add	r0, sp, #4
   b44b2:	f002 fb06 	bl	b6ac2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b44b6:	a801      	add	r0, sp, #4
   b44b8:	f002 fbc0 	bl	b6c3c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b44bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b44c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44c4:	eeb4 0a40 	vcmp.f32	s0, s0
   b44c8:	bf0c      	ite	eq
   b44ca:	2401      	moveq	r4, #1
   b44cc:	2400      	movne	r4, #0
   b44ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44d2:	bf68      	it	vs
   b44d4:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b44d8:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b44dc:	2c00      	cmp	r4, #0
   b44de:	d1ea      	bne.n	b44b6 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b44e0:	f004 f900 	bl	b86e4 <_Z16_fetch_usbserialv>
   b44e4:	4605      	mov	r5, r0
   b44e6:	ee18 0a10 	vmov	r0, s16
   b44ea:	f004 fd33 	bl	b8f54 <__aeabi_f2d>
   b44ee:	4602      	mov	r2, r0
   b44f0:	460b      	mov	r3, r1
   b44f2:	4628      	mov	r0, r5
   b44f4:	490b      	ldr	r1, [pc, #44]	; (b4524 <_Z9tempCalori+0x88>)
   b44f6:	f7ff fdf5 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b44fa:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b44fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4506:	dd08      	ble.n	b451a <_Z9tempCalori+0x7e>
   b4508:	eddf 7a07 	vldr	s15, [pc, #28]	; b4528 <_Z9tempCalori+0x8c>
   b450c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4514:	bf4c      	ite	mi
   b4516:	2401      	movmi	r4, #1
   b4518:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b451a:	4620      	mov	r0, r4
   b451c:	b007      	add	sp, #28
   b451e:	ecbd 8b02 	vpop	{d8}
   b4522:	bd30      	pop	{r4, r5, pc}
   b4524:	000b98b6 	.word	0x000b98b6
   b4528:	42480000 	.word	0x42480000

000b452c <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b452c:	b508      	push	{r3, lr}
   b452e:	4603      	mov	r3, r0
   b4530:	3b01      	subs	r3, #1
   b4532:	4610      	mov	r0, r2
   b4534:	2b06      	cmp	r3, #6
   b4536:	d843      	bhi.n	b45c0 <_Z10leerSensoriii+0x94>
   b4538:	e8df f003 	tbb	[pc, r3]
   b453c:	1b120904 	.word	0x1b120904
   b4540:	2d24      	.short	0x2d24
   b4542:	04          	.byte	0x04
   b4543:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4544:	bbc1      	cbnz	r1, b45b8 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b454a:	f7ff be43 	b.w	b41d4 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b454e:	b919      	cbnz	r1, b4558 <_Z10leerSensoriii+0x2c>
   b4550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4554:	f7ff be71 	b.w	b423a <_Z5noLuzi>
   b4558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b455c:	f7ff be58 	b.w	b4210 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4560:	b919      	cbnz	r1, b456a <_Z10leerSensoriii+0x3e>
   b4562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4566:	f7ff be87 	b.w	b4278 <_Z7noRuidoi>
   b456a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b456e:	f7ff be79 	b.w	b4264 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4572:	b919      	cbnz	r1, b457c <_Z10leerSensoriii+0x50>
   b4574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4578:	f7ff be97 	b.w	b42aa <_Z7noBotoni>
   b457c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4580:	f7ff be84 	b.w	b428c <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4584:	b919      	cbnz	r1, b458e <_Z10leerSensoriii+0x62>
   b4586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b458a:	f7ff becf 	b.w	b432c <_Z10noRotativoi>
   b458e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4592:	f7ff be99 	b.w	b42c8 <_Z10siRotativoi>
        switch (condicion)
   b4596:	2901      	cmp	r1, #1
   b4598:	d006      	beq.n	b45a8 <_Z10leerSensoriii+0x7c>
   b459a:	2902      	cmp	r1, #2
   b459c:	d008      	beq.n	b45b0 <_Z10leerSensoriii+0x84>
   b459e:	b959      	cbnz	r1, b45b8 <_Z10leerSensoriii+0x8c>
   b45a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b45a4:	f7ff bef4 	b.w	b4390 <_Z8tempFrioi>
   b45a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b45ac:	f7ff bf34 	b.w	b4418 <_Z12tempTempladoi>
   b45b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b45b4:	f7ff bf72 	b.w	b449c <_Z9tempCalori>
   b45b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b45bc:	f7ff be19 	b.w	b41f2 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b45c0:	f004 f890 	bl	b86e4 <_Z16_fetch_usbserialv>
   b45c4:	4902      	ldr	r1, [pc, #8]	; (b45d0 <_Z10leerSensoriii+0xa4>)
   b45c6:	f003 fe8c 	bl	b82e2 <_ZN5Print7printlnEPKc>
   b45ca:	2000      	movs	r0, #0
   b45cc:	bd08      	pop	{r3, pc}
   b45ce:	bf00      	nop
   b45d0:	000b98bf 	.word	0x000b98bf

000b45d4 <_Z12makeEvaluate6BLOQUE>:
}

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b45d4:	b084      	sub	sp, #16
   b45d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b45d8:	ac06      	add	r4, sp, #24
   b45da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b45de:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b45e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b45e4:	f7ff ffa2 	bl	b452c <_Z10leerSensoriii>
   b45e8:	ad06      	add	r5, sp, #24
   b45ea:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b45ec:	afbc      	add	r7, sp, #752	; 0x2f0
   b45ee:	2601      	movs	r6, #1
   b45f0:	9b06      	ldr	r3, [sp, #24]
   b45f2:	42b3      	cmp	r3, r6
   b45f4:	dd12      	ble.n	b461c <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b45f6:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b45fa:	6a2a      	ldr	r2, [r5, #32]
   b45fc:	f7ff ff96 	bl	b452c <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b4600:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4604:	b133      	cbz	r3, b4614 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b4606:	2c00      	cmp	r4, #0
   b4608:	bf08      	it	eq
   b460a:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b460c:	3601      	adds	r6, #1
   b460e:	3510      	adds	r5, #16
   b4610:	4604      	mov	r4, r0
   b4612:	e7ed      	b.n	b45f0 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b4614:	2c00      	cmp	r4, #0
   b4616:	bf18      	it	ne
   b4618:	4620      	movne	r0, r4
   b461a:	e7f7      	b.n	b460c <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b461c:	4620      	mov	r0, r4
   b461e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b4622:	b004      	add	sp, #16
   b4624:	4770      	bx	lr
	...

000b4628 <_Z13displayPrint0i>:

void displayPrint0(int n)
{
   b4628:	b538      	push	{r3, r4, r5, lr}
   b462a:	4604      	mov	r4, r0
   display.clearDisplay();
   b462c:	481a      	ldr	r0, [pc, #104]	; (b4698 <_Z13displayPrint0i+0x70>)
   b462e:	f002 fc73 	bl	b6f18 <_ZN16Adafruit_SSD130612clearDisplayEv>

   switch (n)
   b4632:	2c05      	cmp	r4, #5
   b4634:	d82a      	bhi.n	b468c <_Z13displayPrint0i+0x64>
   b4636:	e8df f004 	tbb	[pc, r4]
   b463a:	1e03      	.short	0x1e03
   b463c:	27252320 	.word	0x27252320
   {
   case 0:
      dispositivos[0] = "Actuador RGB";
   b4640:	4916      	ldr	r1, [pc, #88]	; (b469c <_Z13displayPrint0i+0x74>)
      break;

   case 1:
      dispositivos[0] = "Actuador Zumbador";
   b4642:	4817      	ldr	r0, [pc, #92]	; (b46a0 <_Z13displayPrint0i+0x78>)
   b4644:	f003 fdad 	bl	b81a2 <_ZN6StringaSEPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4648:	4d15      	ldr	r5, [pc, #84]	; (b46a0 <_Z13displayPrint0i+0x78>)
      Serial.println("No es valido");
      break;
   }

   snprintf(buf, sizeof(buf), dispositivos[1]);
   display.println(buf);
   b464a:	4c13      	ldr	r4, [pc, #76]	; (b4698 <_Z13displayPrint0i+0x70>)
   snprintf(buf, sizeof(buf), dispositivos[1]);
   b464c:	692a      	ldr	r2, [r5, #16]
   b464e:	4815      	ldr	r0, [pc, #84]	; (b46a4 <_Z13displayPrint0i+0x7c>)
   b4650:	2140      	movs	r1, #64	; 0x40
   b4652:	f003 fbb7 	bl	b7dc4 <snprintf>
   display.println(buf);
   b4656:	4913      	ldr	r1, [pc, #76]	; (b46a4 <_Z13displayPrint0i+0x7c>)
   b4658:	4620      	mov	r0, r4
   b465a:	f003 fe42 	bl	b82e2 <_ZN5Print7printlnEPKc>

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b465e:	682a      	ldr	r2, [r5, #0]
   b4660:	4810      	ldr	r0, [pc, #64]	; (b46a4 <_Z13displayPrint0i+0x7c>)
   b4662:	2140      	movs	r1, #64	; 0x40
   b4664:	f003 fbae 	bl	b7dc4 <snprintf>
   display.println(buf);
   b4668:	490e      	ldr	r1, [pc, #56]	; (b46a4 <_Z13displayPrint0i+0x7c>)
   b466a:	4620      	mov	r0, r4
   b466c:	f003 fe39 	bl	b82e2 <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4670:	2300      	movs	r3, #0
   b4672:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b4674:	bd38      	pop	{r3, r4, r5, pc}
      dispositivos[0] = "Actuador Zumbador";
   b4676:	490c      	ldr	r1, [pc, #48]	; (b46a8 <_Z13displayPrint0i+0x80>)
   b4678:	e7e3      	b.n	b4642 <_Z13displayPrint0i+0x1a>
      dispositivos[1] = "Sensor de Luz";
   b467a:	490c      	ldr	r1, [pc, #48]	; (b46ac <_Z13displayPrint0i+0x84>)
      dispositivos[1] = "Sensor Rotativo";
   b467c:	480c      	ldr	r0, [pc, #48]	; (b46b0 <_Z13displayPrint0i+0x88>)
   b467e:	e7e1      	b.n	b4644 <_Z13displayPrint0i+0x1c>
      dispositivos[1] = "Sensor de Ruido";
   b4680:	490c      	ldr	r1, [pc, #48]	; (b46b4 <_Z13displayPrint0i+0x8c>)
   b4682:	e7fb      	b.n	b467c <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Boton";
   b4684:	490c      	ldr	r1, [pc, #48]	; (b46b8 <_Z13displayPrint0i+0x90>)
   b4686:	e7f9      	b.n	b467c <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Rotativo";
   b4688:	490c      	ldr	r1, [pc, #48]	; (b46bc <_Z13displayPrint0i+0x94>)
   b468a:	e7f7      	b.n	b467c <_Z13displayPrint0i+0x54>
      Serial.println("No es valido");
   b468c:	f004 f82a 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4690:	490b      	ldr	r1, [pc, #44]	; (b46c0 <_Z13displayPrint0i+0x98>)
   b4692:	f003 fe26 	bl	b82e2 <_ZN5Print7printlnEPKc>
      break;
   b4696:	e7d7      	b.n	b4648 <_Z13displayPrint0i+0x20>
   b4698:	2003e618 	.word	0x2003e618
   b469c:	000b98d2 	.word	0x000b98d2
   b46a0:	2003e668 	.word	0x2003e668
   b46a4:	2003e5d8 	.word	0x2003e5d8
   b46a8:	000b98df 	.word	0x000b98df
   b46ac:	000b98f1 	.word	0x000b98f1
   b46b0:	2003e678 	.word	0x2003e678
   b46b4:	000b98ff 	.word	0x000b98ff
   b46b8:	000b990f 	.word	0x000b990f
   b46bc:	000b991c 	.word	0x000b991c
   b46c0:	000b98a9 	.word	0x000b98a9

000b46c4 <_Z12displayPrintbbiii>:

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b46c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b46c8:	b088      	sub	sp, #32
   b46ca:	4680      	mov	r8, r0
   display.clearDisplay();
   b46cc:	4850      	ldr	r0, [pc, #320]	; (b4810 <_Z12displayPrintbbiii+0x14c>)
{
   b46ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   b46d0:	460e      	mov	r6, r1
   b46d2:	4615      	mov	r5, r2
   b46d4:	461c      	mov	r4, r3
   display.clearDisplay();
   b46d6:	f002 fc1f 	bl	b6f18 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b46da:	f1b8 0f00 	cmp.w	r8, #0
   b46de:	d06d      	beq.n	b47bc <_Z12displayPrintbbiii+0xf8>
   {
      switch (id)
   b46e0:	3d01      	subs	r5, #1
   b46e2:	2d06      	cmp	r5, #6
   b46e4:	d862      	bhi.n	b47ac <_Z12displayPrintbbiii+0xe8>
   b46e6:	e8df f005 	tbb	[pc, r5]
   b46ea:	3604      	.short	0x3604
   b46ec:	504b4641 	.word	0x504b4641
   b46f0:	5c          	.byte	0x5c
   b46f1:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b46f2:	bb74      	cbnz	r4, b4752 <_Z12displayPrintbbiii+0x8e>
   b46f4:	4947      	ldr	r1, [pc, #284]	; (b4814 <_Z12displayPrintbbiii+0x150>)

      // Luz
      case 2:
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
         // dispositivos[1] = "Sensor de Luz";
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b46f6:	4848      	ldr	r0, [pc, #288]	; (b4818 <_Z12displayPrintbbiii+0x154>)
   b46f8:	f003 fd53 	bl	b81a2 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b46fc:	4946      	ldr	r1, [pc, #280]	; (b4818 <_Z12displayPrintbbiii+0x154>)
   b46fe:	4668      	mov	r0, sp
   b4700:	f003 fd44 	bl	b818c <_ZN6StringC1ERKS_>
      default:
         Serial.println("ActuadorNoValidoError");
         break;
      }
      
      snprintf(buf, sizeof(buf), dispositivos[0] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4704:	4b45      	ldr	r3, [pc, #276]	; (b481c <_Z12displayPrintbbiii+0x158>)
   b4706:	4946      	ldr	r1, [pc, #280]	; (b4820 <_Z12displayPrintbbiii+0x15c>)
   b4708:	4668      	mov	r0, sp
   b470a:	2e00      	cmp	r6, #0
   b470c:	bf08      	it	eq
   b470e:	4619      	moveq	r1, r3
   b4710:	f003 fd8f 	bl	b8232 <_ZplRK15StringSumHelperPKc>
   b4714:	220a      	movs	r2, #10
   b4716:	4604      	mov	r4, r0
   b4718:	4639      	mov	r1, r7
   b471a:	a804      	add	r0, sp, #16
   b471c:	f003 fd53 	bl	b81c6 <_ZN6StringC1Eih>
   b4720:	a904      	add	r1, sp, #16
   b4722:	4620      	mov	r0, r4
   b4724:	f003 fd79 	bl	b821a <_ZplRK15StringSumHelperRK6String>
   b4728:	2140      	movs	r1, #64	; 0x40
   b472a:	6802      	ldr	r2, [r0, #0]
   b472c:	483d      	ldr	r0, [pc, #244]	; (b4824 <_Z12displayPrintbbiii+0x160>)
   b472e:	f003 fb49 	bl	b7dc4 <snprintf>
   b4732:	a804      	add	r0, sp, #16
   b4734:	f003 fcbc 	bl	b80b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4738:	4668      	mov	r0, sp
   b473a:	f003 fcb9 	bl	b80b0 <_ZN6StringD1Ev>
      display.println(buf);
   b473e:	4939      	ldr	r1, [pc, #228]	; (b4824 <_Z12displayPrintbbiii+0x160>)
   b4740:	4833      	ldr	r0, [pc, #204]	; (b4810 <_Z12displayPrintbbiii+0x14c>)
   b4742:	f003 fdce 	bl	b82e2 <_ZN5Print7printlnEPKc>
   b4746:	4b32      	ldr	r3, [pc, #200]	; (b4810 <_Z12displayPrintbbiii+0x14c>)
   b4748:	2200      	movs	r2, #0
   b474a:	611a      	str	r2, [r3, #16]

   }

   display.setCursor(0, 0);
}
   b474c:	b008      	add	sp, #32
   b474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4752:	4935      	ldr	r1, [pc, #212]	; (b4828 <_Z12displayPrintbbiii+0x164>)
   b4754:	e7cf      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b4756:	f003 ffc5 	bl	b86e4 <_Z16_fetch_usbserialv>
   b475a:	4934      	ldr	r1, [pc, #208]	; (b482c <_Z12displayPrintbbiii+0x168>)
   b475c:	4622      	mov	r2, r4
   b475e:	f7ff fcc1 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4762:	b90c      	cbnz	r4, b4768 <_Z12displayPrintbbiii+0xa4>
   b4764:	4932      	ldr	r1, [pc, #200]	; (b4830 <_Z12displayPrintbbiii+0x16c>)
   b4766:	e7c6      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
   b4768:	4932      	ldr	r1, [pc, #200]	; (b4834 <_Z12displayPrintbbiii+0x170>)
   b476a:	e7c4      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b476c:	b90c      	cbnz	r4, b4772 <_Z12displayPrintbbiii+0xae>
   b476e:	4932      	ldr	r1, [pc, #200]	; (b4838 <_Z12displayPrintbbiii+0x174>)
   b4770:	e7c1      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
   b4772:	4932      	ldr	r1, [pc, #200]	; (b483c <_Z12displayPrintbbiii+0x178>)
   b4774:	e7bf      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b4776:	b90c      	cbnz	r4, b477c <_Z12displayPrintbbiii+0xb8>
   b4778:	4931      	ldr	r1, [pc, #196]	; (b4840 <_Z12displayPrintbbiii+0x17c>)
   b477a:	e7bc      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
   b477c:	4931      	ldr	r1, [pc, #196]	; (b4844 <_Z12displayPrintbbiii+0x180>)
   b477e:	e7ba      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b4780:	b90c      	cbnz	r4, b4786 <_Z12displayPrintbbiii+0xc2>
   b4782:	4931      	ldr	r1, [pc, #196]	; (b4848 <_Z12displayPrintbbiii+0x184>)
   b4784:	e7b7      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
   b4786:	4931      	ldr	r1, [pc, #196]	; (b484c <_Z12displayPrintbbiii+0x188>)
   b4788:	e7b5      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         switch (condicion)
   b478a:	2c01      	cmp	r4, #1
   b478c:	d005      	beq.n	b479a <_Z12displayPrintbbiii+0xd6>
   b478e:	2c02      	cmp	r4, #2
   b4790:	d005      	beq.n	b479e <_Z12displayPrintbbiii+0xda>
   b4792:	2c00      	cmp	r4, #0
   b4794:	d1b2      	bne.n	b46fc <_Z12displayPrintbbiii+0x38>
            dispositivos[1] = "Sensor Temp.Frio";
   b4796:	492e      	ldr	r1, [pc, #184]	; (b4850 <_Z12displayPrintbbiii+0x18c>)
   b4798:	e7ad      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Templado";
   b479a:	492e      	ldr	r1, [pc, #184]	; (b4854 <_Z12displayPrintbbiii+0x190>)
   b479c:	e7ab      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Calor";
   b479e:	492e      	ldr	r1, [pc, #184]	; (b4858 <_Z12displayPrintbbiii+0x194>)
   b47a0:	e7a9      	b.n	b46f6 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b47a2:	b94c      	cbnz	r4, b47b8 <_Z12displayPrintbbiii+0xf4>
   b47a4:	492d      	ldr	r1, [pc, #180]	; (b485c <_Z12displayPrintbbiii+0x198>)
   b47a6:	481c      	ldr	r0, [pc, #112]	; (b4818 <_Z12displayPrintbbiii+0x154>)
   b47a8:	f003 fcfb 	bl	b81a2 <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b47ac:	f003 ff9a 	bl	b86e4 <_Z16_fetch_usbserialv>
   b47b0:	492b      	ldr	r1, [pc, #172]	; (b4860 <_Z12displayPrintbbiii+0x19c>)
   b47b2:	f003 fd96 	bl	b82e2 <_ZN5Print7printlnEPKc>
         break;
   b47b6:	e7a1      	b.n	b46fc <_Z12displayPrintbbiii+0x38>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b47b8:	492a      	ldr	r1, [pc, #168]	; (b4864 <_Z12displayPrintbbiii+0x1a0>)
   b47ba:	e7f4      	b.n	b47a6 <_Z12displayPrintbbiii+0xe2>
      switch (id)
   b47bc:	b13d      	cbz	r5, b47ce <_Z12displayPrintbbiii+0x10a>
   b47be:	2d01      	cmp	r5, #1
   b47c0:	d021      	beq.n	b4806 <_Z12displayPrintbbiii+0x142>
         Serial.println("ActuadorNoValidoError");
   b47c2:	f003 ff8f 	bl	b86e4 <_Z16_fetch_usbserialv>
   b47c6:	4928      	ldr	r1, [pc, #160]	; (b4868 <_Z12displayPrintbbiii+0x1a4>)
   b47c8:	f003 fd8b 	bl	b82e2 <_ZN5Print7printlnEPKc>
         break;
   b47cc:	e00b      	b.n	b47e6 <_Z12displayPrintbbiii+0x122>
         switch (condicion)
   b47ce:	2c07      	cmp	r4, #7
   b47d0:	d809      	bhi.n	b47e6 <_Z12displayPrintbbiii+0x122>
   b47d2:	e8df f004 	tbb	[pc, r4]
   b47d6:	0a04      	.short	0x0a04
   b47d8:	12100e0c 	.word	0x12100e0c
   b47dc:	1614      	.short	0x1614
            dispositivos[0] = "RGB Verde";
   b47de:	4923      	ldr	r1, [pc, #140]	; (b486c <_Z12displayPrintbbiii+0x1a8>)
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b47e0:	4823      	ldr	r0, [pc, #140]	; (b4870 <_Z12displayPrintbbiii+0x1ac>)
   b47e2:	f003 fcde 	bl	b81a2 <_ZN6StringaSEPKc>
	StringSumHelper(const String &s) : String(s) {}
   b47e6:	4922      	ldr	r1, [pc, #136]	; (b4870 <_Z12displayPrintbbiii+0x1ac>)
   b47e8:	e789      	b.n	b46fe <_Z12displayPrintbbiii+0x3a>
            dispositivos[0] = "RGB Rojo";
   b47ea:	4922      	ldr	r1, [pc, #136]	; (b4874 <_Z12displayPrintbbiii+0x1b0>)
   b47ec:	e7f8      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Amarillo";
   b47ee:	4922      	ldr	r1, [pc, #136]	; (b4878 <_Z12displayPrintbbiii+0x1b4>)
   b47f0:	e7f6      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Morado";
   b47f2:	4922      	ldr	r1, [pc, #136]	; (b487c <_Z12displayPrintbbiii+0x1b8>)
   b47f4:	e7f4      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Azul";
   b47f6:	4922      	ldr	r1, [pc, #136]	; (b4880 <_Z12displayPrintbbiii+0x1bc>)
   b47f8:	e7f2      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Naranja";
   b47fa:	4922      	ldr	r1, [pc, #136]	; (b4884 <_Z12displayPrintbbiii+0x1c0>)
   b47fc:	e7f0      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Blink";
   b47fe:	4922      	ldr	r1, [pc, #136]	; (b4888 <_Z12displayPrintbbiii+0x1c4>)
   b4800:	e7ee      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Rainbow";
   b4802:	4922      	ldr	r1, [pc, #136]	; (b488c <_Z12displayPrintbbiii+0x1c8>)
   b4804:	e7ec      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4806:	b90c      	cbnz	r4, b480c <_Z12displayPrintbbiii+0x148>
   b4808:	4921      	ldr	r1, [pc, #132]	; (b4890 <_Z12displayPrintbbiii+0x1cc>)
   b480a:	e7e9      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
   b480c:	4921      	ldr	r1, [pc, #132]	; (b4894 <_Z12displayPrintbbiii+0x1d0>)
   b480e:	e7e7      	b.n	b47e0 <_Z12displayPrintbbiii+0x11c>
   b4810:	2003e618 	.word	0x2003e618
   b4814:	000b9932 	.word	0x000b9932
   b4818:	2003e678 	.word	0x2003e678
   b481c:	000b992f 	.word	0x000b992f
   b4820:	000b992c 	.word	0x000b992c
   b4824:	2003e5d8 	.word	0x2003e5d8
   b4828:	000b9948 	.word	0x000b9948
   b482c:	000b995f 	.word	0x000b995f
   b4830:	000b9976 	.word	0x000b9976
   b4834:	000b9984 	.word	0x000b9984
   b4838:	000b9992 	.word	0x000b9992
   b483c:	000b99a2 	.word	0x000b99a2
   b4840:	000b99b2 	.word	0x000b99b2
   b4844:	000b99c2 	.word	0x000b99c2
   b4848:	000b99d2 	.word	0x000b99d2
   b484c:	000b99e5 	.word	0x000b99e5
   b4850:	000b99f8 	.word	0x000b99f8
   b4854:	000b9a09 	.word	0x000b9a09
   b4858:	000b9a1e 	.word	0x000b9a1e
   b485c:	000b9a30 	.word	0x000b9a30
   b4860:	000b9a5e 	.word	0x000b9a5e
   b4864:	000b9a47 	.word	0x000b9a47
   b4868:	000b9ae7 	.word	0x000b9ae7
   b486c:	000b9a72 	.word	0x000b9a72
   b4870:	2003e668 	.word	0x2003e668
   b4874:	000b9a7c 	.word	0x000b9a7c
   b4878:	000b9a85 	.word	0x000b9a85
   b487c:	000b9a92 	.word	0x000b9a92
   b4880:	000b9a9d 	.word	0x000b9a9d
   b4884:	000b9aa6 	.word	0x000b9aa6
   b4888:	000b9ab2 	.word	0x000b9ab2
   b488c:	000b9abc 	.word	0x000b9abc
   b4890:	000b9ac8 	.word	0x000b9ac8
   b4894:	000b9ad8 	.word	0x000b9ad8

000b4898 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b4898:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b489a:	7803      	ldrb	r3, [r0, #0]
   b489c:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b489e:	bf0c      	ite	eq
   b48a0:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b48a2:	2200      	movne	r2, #0
   int i = 0;
   b48a4:	4613      	mov	r3, r2
   b48a6:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b48a8:	240a      	movs	r4, #10
      i++;
   b48aa:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b48ac:	f813 1b01 	ldrb.w	r1, [r3], #1
   b48b0:	3930      	subs	r1, #48	; 0x30
   b48b2:	b2cd      	uxtb	r5, r1
   b48b4:	2d09      	cmp	r5, #9
   b48b6:	d802      	bhi.n	b48be <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b48b8:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b48bc:	e7f6      	b.n	b48ac <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b48be:	b102      	cbz	r2, b48c2 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b48c0:	4240      	negs	r0, r0
   return num;
}
   b48c2:	bd30      	pop	{r4, r5, pc}

000b48c4 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b48c4:	b570      	push	{r4, r5, r6, lr}
   b48c6:	4614      	mov	r4, r2
   b48c8:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b48ca:	f004 ff17 	bl	b96fc <strtok>
   int j = 0;
   b48ce:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b48d0:	b140      	cbz	r0, b48e4 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b48d2:	f7ff ffe1 	bl	b4898 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b48d6:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b48d8:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b48dc:	2000      	movs	r0, #0
   b48de:	f004 ff0d 	bl	b96fc <strtok>
   while (ptr != NULL)
   b48e2:	e7f5      	b.n	b48d0 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b48e4:	6823      	ldr	r3, [r4, #0]
   b48e6:	b913      	cbnz	r3, b48ee <_Z5splitPcS_Pi+0x2a>
      haveSensor = true;
   b48e8:	4b01      	ldr	r3, [pc, #4]	; (b48f0 <_Z5splitPcS_Pi+0x2c>)
   b48ea:	2201      	movs	r2, #1
   b48ec:	701a      	strb	r2, [r3, #0]
}
   b48ee:	bd70      	pop	{r4, r5, r6, pc}
   b48f0:	2003e688 	.word	0x2003e688

000b48f4 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b48f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b48f6:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b48fa:	f10d 0307 	add.w	r3, sp, #7
   b48fe:	460a      	mov	r2, r1
   b4900:	4601      	mov	r1, r0
   b4902:	480d      	ldr	r0, [pc, #52]	; (b4938 <_Z17readDataFromBlockhPhh+0x44>)
   b4904:	4d0d      	ldr	r5, [pc, #52]	; (b493c <_Z17readDataFromBlockhPhh+0x48>)
   b4906:	f001 ff0b 	bl	b6720 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b490a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b490c:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b490e:	d010      	beq.n	b4932 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4910:	f003 fee8 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4914:	490a      	ldr	r1, [pc, #40]	; (b4940 <_Z17readDataFromBlockhPhh+0x4c>)
   b4916:	f003 fcd1 	bl	b82bc <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b491a:	f003 fee3 	bl	b86e4 <_Z16_fetch_usbserialv>
   b491e:	7829      	ldrb	r1, [r5, #0]
   b4920:	4604      	mov	r4, r0
   b4922:	4805      	ldr	r0, [pc, #20]	; (b4938 <_Z17readDataFromBlockhPhh+0x44>)
   b4924:	f001 fc50 	bl	b61c8 <_ZN7MFRC52217GetStatusCodeNameEh>
   b4928:	4601      	mov	r1, r0
   b492a:	4620      	mov	r0, r4
   b492c:	f003 fcd9 	bl	b82e2 <_ZN5Print7printlnEPKc>
   b4930:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b4932:	b003      	add	sp, #12
   b4934:	bd30      	pop	{r4, r5, pc}
   b4936:	bf00      	nop
   b4938:	2003e6a0 	.word	0x2003e6a0
   b493c:	2003e6c0 	.word	0x2003e6c0
   b4940:	000b9afd 	.word	0x000b9afd

000b4944 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4944:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4946:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4948:	4d1e      	ldr	r5, [pc, #120]	; (b49c4 <_Z8getTagIDPi+0x80>)
   b494a:	4a1f      	ldr	r2, [pc, #124]	; (b49c8 <_Z8getTagIDPi+0x84>)
   b494c:	9500      	str	r5, [sp, #0]
   b494e:	4b1f      	ldr	r3, [pc, #124]	; (b49cc <_Z8getTagIDPi+0x88>)
   b4950:	7812      	ldrb	r2, [r2, #0]
   b4952:	4f1f      	ldr	r7, [pc, #124]	; (b49d0 <_Z8getTagIDPi+0x8c>)
{
   b4954:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4956:	2160      	movs	r1, #96	; 0x60
   b4958:	4628      	mov	r0, r5
   b495a:	f001 ff02 	bl	b6762 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b495e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4960:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b4962:	d00f      	beq.n	b4984 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4964:	f003 febe 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4968:	491a      	ldr	r1, [pc, #104]	; (b49d4 <_Z8getTagIDPi+0x90>)
   b496a:	f003 fca7 	bl	b82bc <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b496e:	f003 feb9 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4972:	7839      	ldrb	r1, [r7, #0]
   b4974:	4604      	mov	r4, r0
   b4976:	4628      	mov	r0, r5
   b4978:	f001 fc26 	bl	b61c8 <_ZN7MFRC52217GetStatusCodeNameEh>
   b497c:	4601      	mov	r1, r0
   b497e:	4620      	mov	r0, r4
   b4980:	f003 fcaf 	bl	b82e2 <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b4984:	4b14      	ldr	r3, [pc, #80]	; (b49d8 <_Z8getTagIDPi+0x94>)
   b4986:	2212      	movs	r2, #18
   b4988:	7818      	ldrb	r0, [r3, #0]
   b498a:	a907      	add	r1, sp, #28
   b498c:	f7ff ffb2 	bl	b48f4 <_Z17readDataFromBlockhPhh>
   b4990:	b1b0      	cbz	r0, b49c0 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b4992:	ac07      	add	r4, sp, #28
   b4994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4996:	ad03      	add	r5, sp, #12
   b4998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b499a:	6823      	ldr	r3, [r4, #0]
   b499c:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b499e:	f003 fea1 	bl	b86e4 <_Z16_fetch_usbserialv>
   b49a2:	490e      	ldr	r1, [pc, #56]	; (b49dc <_Z8getTagIDPi+0x98>)
   b49a4:	aa03      	add	r2, sp, #12
   b49a6:	f7ff fb9d 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b49aa:	490d      	ldr	r1, [pc, #52]	; (b49e0 <_Z8getTagIDPi+0x9c>)
   b49ac:	4632      	mov	r2, r6
   b49ae:	a803      	add	r0, sp, #12
   b49b0:	f7ff ff88 	bl	b48c4 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b49b4:	4803      	ldr	r0, [pc, #12]	; (b49c4 <_Z8getTagIDPi+0x80>)
   b49b6:	f001 fe8e 	bl	b66d6 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b49ba:	4802      	ldr	r0, [pc, #8]	; (b49c4 <_Z8getTagIDPi+0x80>)
   b49bc:	f001 fceb 	bl	b6396 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b49c0:	b00d      	add	sp, #52	; 0x34
   b49c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49c4:	2003e6a0 	.word	0x2003e6a0
   b49c8:	2003df6c 	.word	0x2003df6c
   b49cc:	2003e689 	.word	0x2003e689
   b49d0:	2003e6c0 	.word	0x2003e6c0
   b49d4:	000b9b14 	.word	0x000b9b14
   b49d8:	2003df44 	.word	0x2003df44
   b49dc:	000b9b30 	.word	0x000b9b30
   b49e0:	2003df45 	.word	0x2003df45

000b49e4 <_Z13asignarPuertoii>:
   }
}*/


int asignarPuerto(int id, int type)
{
   b49e4:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);
   if (esAnalogico(type))
   b49e6:	b969      	cbnz	r1, b4a04 <_Z13asignarPuertoii+0x20>
   {
      // Serial.print(" \t y es analógico\n");
      Serial.println("Es analogico");
   b49e8:	f003 fe7c 	bl	b86e4 <_Z16_fetch_usbserialv>
   b49ec:	4927      	ldr	r1, [pc, #156]	; (b4a8c <_Z13asignarPuertoii+0xa8>)
   b49ee:	f003 fc78 	bl	b82e2 <_ZN5Print7printlnEPKc>
      option = puertoAnalogico;
   b49f2:	4b27      	ldr	r3, [pc, #156]	; (b4a90 <_Z13asignarPuertoii+0xac>)
   }
   else
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b49f4:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b49f6:	2c05      	cmp	r4, #5
   b49f8:	d840      	bhi.n	b4a7c <_Z13asignarPuertoii+0x98>
   b49fa:	e8df f004 	tbb	[pc, r4]
   b49fe:	0f05      	.short	0x0f05
   b4a00:	342d261a 	.word	0x342d261a
      option = puertoDigital;
   b4a04:	4b23      	ldr	r3, [pc, #140]	; (b4a94 <_Z13asignarPuertoii+0xb0>)
   b4a06:	e7f5      	b.n	b49f4 <_Z13asignarPuertoii+0x10>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4a08:	f003 fe6c 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a0c:	4922      	ldr	r1, [pc, #136]	; (b4a98 <_Z13asignarPuertoii+0xb4>)
   b4a0e:	f003 fc55 	bl	b82bc <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4a12:	4a1f      	ldr	r2, [pc, #124]	; (b4a90 <_Z13asignarPuertoii+0xac>)
      puertoDigital++;
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
   b4a14:	6813      	ldr	r3, [r2, #0]
   b4a16:	3301      	adds	r3, #1
   b4a18:	6013      	str	r3, [r2, #0]
      return 4;
   b4a1a:	e014      	b.n	b4a46 <_Z13asignarPuertoii+0x62>
      Serial.print("Conectar al puerto A2\n");
   b4a1c:	f003 fe62 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a20:	491e      	ldr	r1, [pc, #120]	; (b4a9c <_Z13asignarPuertoii+0xb8>)
   b4a22:	f003 fc4b 	bl	b82bc <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4a26:	4a1a      	ldr	r2, [pc, #104]	; (b4a90 <_Z13asignarPuertoii+0xac>)
      puertoDigital++;
   b4a28:	6813      	ldr	r3, [r2, #0]
   b4a2a:	3301      	adds	r3, #1
   b4a2c:	6013      	str	r3, [r2, #0]
      return 2;
   b4a2e:	2402      	movs	r4, #2
   b4a30:	e009      	b.n	b4a46 <_Z13asignarPuertoii+0x62>
      Serial.print("Conectar al puerto A4\n");
   b4a32:	f003 fe57 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a36:	491a      	ldr	r1, [pc, #104]	; (b4aa0 <_Z13asignarPuertoii+0xbc>)
   b4a38:	f003 fc40 	bl	b82bc <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b4a3c:	4b14      	ldr	r3, [pc, #80]	; (b4a90 <_Z13asignarPuertoii+0xac>)
   b4a3e:	f04f 32ff 	mov.w	r2, #4294967295
   b4a42:	601a      	str	r2, [r3, #0]
      return 4;
   b4a44:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b4a46:	4620      	mov	r0, r4
   b4a48:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4a4a:	f003 fe4b 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a4e:	4915      	ldr	r1, [pc, #84]	; (b4aa4 <_Z13asignarPuertoii+0xc0>)
   b4a50:	f003 fc34 	bl	b82bc <_ZN5Print5printEPKc>
      puertoDigital++;
   b4a54:	4a0f      	ldr	r2, [pc, #60]	; (b4a94 <_Z13asignarPuertoii+0xb0>)
   b4a56:	e7e7      	b.n	b4a28 <_Z13asignarPuertoii+0x44>
      Serial.print("Conectar al puerto D4\n");
   b4a58:	f003 fe44 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a5c:	4912      	ldr	r1, [pc, #72]	; (b4aa8 <_Z13asignarPuertoii+0xc4>)
   b4a5e:	f003 fc2d 	bl	b82bc <_ZN5Print5printEPKc>
      puertoDigital++;
   b4a62:	4a0c      	ldr	r2, [pc, #48]	; (b4a94 <_Z13asignarPuertoii+0xb0>)
   b4a64:	e7d6      	b.n	b4a14 <_Z13asignarPuertoii+0x30>
      Serial.print("Conectar al puerto D6\n");
   b4a66:	f003 fe3d 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a6a:	4910      	ldr	r1, [pc, #64]	; (b4aac <_Z13asignarPuertoii+0xc8>)
   b4a6c:	f003 fc26 	bl	b82bc <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b4a70:	4b08      	ldr	r3, [pc, #32]	; (b4a94 <_Z13asignarPuertoii+0xb0>)
   b4a72:	f04f 32ff 	mov.w	r2, #4294967295
   b4a76:	601a      	str	r2, [r3, #0]
      return 6;
   b4a78:	2406      	movs	r4, #6
   b4a7a:	e7e4      	b.n	b4a46 <_Z13asignarPuertoii+0x62>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b4a7c:	f003 fe32 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4a80:	490b      	ldr	r1, [pc, #44]	; (b4ab0 <_Z13asignarPuertoii+0xcc>)
   b4a82:	f003 fc1b 	bl	b82bc <_ZN5Print5printEPKc>
      return -1;
   b4a86:	f04f 34ff 	mov.w	r4, #4294967295
   b4a8a:	e7dc      	b.n	b4a46 <_Z13asignarPuertoii+0x62>
   b4a8c:	000b9b3c 	.word	0x000b9b3c
   b4a90:	2003e6bc 	.word	0x2003e6bc
   b4a94:	2003df4c 	.word	0x2003df4c
   b4a98:	000b9b49 	.word	0x000b9b49
   b4a9c:	000b9b60 	.word	0x000b9b60
   b4aa0:	000b9b77 	.word	0x000b9b77
   b4aa4:	000b9b8e 	.word	0x000b9b8e
   b4aa8:	000b9ba5 	.word	0x000b9ba5
   b4aac:	000b9bbc 	.word	0x000b9bbc
   b4ab0:	000b9bd3 	.word	0x000b9bd3

000b4ab4 <_Z10ledApagar0v>:
#define NUM_LEDS 5

ChainableLED leds(led_PIN1, led_PIN2, NUM_LEDS);

void ledApagar0()
{
   b4ab4:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 0, 0, 0);
   b4ab6:	2300      	movs	r3, #0
   b4ab8:	4804      	ldr	r0, [pc, #16]	; (b4acc <_Z10ledApagar0v+0x18>)
   b4aba:	9300      	str	r3, [sp, #0]
   b4abc:	461a      	mov	r2, r3
   b4abe:	4619      	mov	r1, r3
   b4ac0:	f002 fd96 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4ac4:	b003      	add	sp, #12
   b4ac6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4aca:	bf00      	nop
   b4acc:	2003e698 	.word	0x2003e698

000b4ad0 <_Z8ledRojo0v>:
void ledRojo0()
{
   b4ad0:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 255, 0, 0);
   b4ad2:	2300      	movs	r3, #0
   b4ad4:	4804      	ldr	r0, [pc, #16]	; (b4ae8 <_Z8ledRojo0v+0x18>)
   b4ad6:	9300      	str	r3, [sp, #0]
   b4ad8:	22ff      	movs	r2, #255	; 0xff
   b4ada:	4619      	mov	r1, r3
   b4adc:	f002 fd88 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4ae0:	b003      	add	sp, #12
   b4ae2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ae6:	bf00      	nop
   b4ae8:	2003e698 	.word	0x2003e698

000b4aec <_Z9ledVerde0v>:
void ledVerde0()
{
   b4aec:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 0, 255, 10);
   b4aee:	230a      	movs	r3, #10
   b4af0:	2200      	movs	r2, #0
   b4af2:	9300      	str	r3, [sp, #0]
   b4af4:	4803      	ldr	r0, [pc, #12]	; (b4b04 <_Z9ledVerde0v+0x18>)
   b4af6:	23ff      	movs	r3, #255	; 0xff
   b4af8:	4611      	mov	r1, r2
   b4afa:	f002 fd79 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4afe:	b003      	add	sp, #12
   b4b00:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b04:	2003e698 	.word	0x2003e698

000b4b08 <_Z8ledAzul0v>:
void ledAzul0()
{
   b4b08:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 0, 0, 255);
   b4b0a:	23ff      	movs	r3, #255	; 0xff
   b4b0c:	9300      	str	r3, [sp, #0]
   b4b0e:	2300      	movs	r3, #0
   b4b10:	4803      	ldr	r0, [pc, #12]	; (b4b20 <_Z8ledAzul0v+0x18>)
   b4b12:	461a      	mov	r2, r3
   b4b14:	4619      	mov	r1, r3
   b4b16:	f002 fd6b 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4b1a:	b003      	add	sp, #12
   b4b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b20:	2003e698 	.word	0x2003e698

000b4b24 <_Z12ledAmarillo0v>:
void ledAmarillo0()
{
   b4b24:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 255, 233, 0);
   b4b26:	2100      	movs	r1, #0
   b4b28:	4804      	ldr	r0, [pc, #16]	; (b4b3c <_Z12ledAmarillo0v+0x18>)
   b4b2a:	9100      	str	r1, [sp, #0]
   b4b2c:	23e9      	movs	r3, #233	; 0xe9
   b4b2e:	22ff      	movs	r2, #255	; 0xff
   b4b30:	f002 fd5e 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4b34:	b003      	add	sp, #12
   b4b36:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b3a:	bf00      	nop
   b4b3c:	2003e698 	.word	0x2003e698

000b4b40 <_Z10ledMorado0v>:
void ledMorado0()
{
   b4b40:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 108, 70, 117);
   b4b42:	2375      	movs	r3, #117	; 0x75
   b4b44:	9300      	str	r3, [sp, #0]
   b4b46:	4804      	ldr	r0, [pc, #16]	; (b4b58 <_Z10ledMorado0v+0x18>)
   b4b48:	2346      	movs	r3, #70	; 0x46
   b4b4a:	226c      	movs	r2, #108	; 0x6c
   b4b4c:	2100      	movs	r1, #0
   b4b4e:	f002 fd4f 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4b52:	b003      	add	sp, #12
   b4b54:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b58:	2003e698 	.word	0x2003e698

000b4b5c <_Z11ledNaranja0v>:
void ledNaranja0()
{
   b4b5c:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 255, 128, 0);
   b4b5e:	2100      	movs	r1, #0
   b4b60:	4804      	ldr	r0, [pc, #16]	; (b4b74 <_Z11ledNaranja0v+0x18>)
   b4b62:	9100      	str	r1, [sp, #0]
   b4b64:	2380      	movs	r3, #128	; 0x80
   b4b66:	22ff      	movs	r2, #255	; 0xff
   b4b68:	f002 fd42 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4b6c:	b003      	add	sp, #12
   b4b6e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b72:	bf00      	nop
   b4b74:	2003e698 	.word	0x2003e698

000b4b78 <_Z10ledBlanco0v>:
void ledBlanco0()
{
   b4b78:	b507      	push	{r0, r1, r2, lr}
   leds.setColorRGB(0, 255, 255, 255);
   b4b7a:	23ff      	movs	r3, #255	; 0xff
   b4b7c:	4804      	ldr	r0, [pc, #16]	; (b4b90 <_Z10ledBlanco0v+0x18>)
   b4b7e:	9300      	str	r3, [sp, #0]
   b4b80:	461a      	mov	r2, r3
   b4b82:	2100      	movs	r1, #0
   b4b84:	f002 fd34 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4b88:	b003      	add	sp, #12
   b4b8a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b8e:	bf00      	nop
   b4b90:	2003e698 	.word	0x2003e698

000b4b94 <_Z9pitidoON0v>:

// Acciones del zumbador
void 
pitidoON0()
{
   b4b94:	b508      	push	{r3, lr}
   pinMode(Zumbador_PIN, OUTPUT);
   b4b96:	2101      	movs	r1, #1
   b4b98:	2006      	movs	r0, #6
   b4b9a:	f003 ffa3 	bl	b8ae4 <pinMode>
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4b9e:	2101      	movs	r1, #1
   b4ba0:	2006      	movs	r0, #6
   b4ba2:	f003 ffb0 	bl	b8b06 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b4ba6:	2101      	movs	r1, #1
   b4ba8:	2006      	movs	r0, #6
   b4baa:	f003 ffac 	bl	b8b06 <digitalWrite>
   digitalWrite(D7, HIGH);
   b4bae:	2101      	movs	r1, #1
   b4bb0:	2007      	movs	r0, #7
   b4bb2:	f003 ffa8 	bl	b8b06 <digitalWrite>
   digitalWrite(D7, 1);
}
   b4bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4bba:	2101      	movs	r1, #1
   b4bbc:	2007      	movs	r0, #7
   b4bbe:	f003 bfa2 	b.w	b8b06 <digitalWrite>

000b4bc2 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b4bc2:	b508      	push	{r3, lr}
   pinMode(Zumbador_PIN, OUTPUT);
   b4bc4:	2101      	movs	r1, #1
   b4bc6:	2006      	movs	r0, #6
   b4bc8:	f003 ff8c 	bl	b8ae4 <pinMode>
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b4bcc:	2100      	movs	r1, #0
   b4bce:	2006      	movs	r0, #6
   b4bd0:	f003 ff99 	bl	b8b06 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4bd4:	2100      	movs	r1, #0
   b4bd6:	2006      	movs	r0, #6
   b4bd8:	f003 ff95 	bl	b8b06 <digitalWrite>
   digitalWrite(D7, LOW);
   b4bdc:	2100      	movs	r1, #0
   b4bde:	2007      	movs	r0, #7
   b4be0:	f003 ff91 	bl	b8b06 <digitalWrite>
   digitalWrite(D7, 0);
}
   b4be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b4be8:	2100      	movs	r1, #0
   b4bea:	2007      	movs	r0, #7
   b4bec:	f003 bf8b 	b.w	b8b06 <digitalWrite>

000b4bf0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b4bf0:	b508      	push	{r3, lr}
   pitidoON0();
   b4bf2:	f7ff ffcf 	bl	b4b94 <_Z9pitidoON0v>
   delay(100);
   b4bf6:	2064      	movs	r0, #100	; 0x64
   b4bf8:	f003 fbde 	bl	b83b8 <delay>
   pitidoOFF0();
   b4bfc:	f7ff ffe1 	bl	b4bc2 <_Z10pitidoOFF0v>
   delay(100);
}
   b4c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b4c04:	2064      	movs	r0, #100	; 0x64
   b4c06:	f003 bbd7 	b.w	b83b8 <delay>

000b4c0a <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b4c0a:	b108      	cbz	r0, b4c10 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul0();
   b4c0c:	f7ff bf7c 	b.w	b4b08 <_Z8ledAzul0v>
   }
   else
   {
      ledNaranja0();
   b4c10:	f7ff bfa4 	b.w	b4b5c <_Z11ledNaranja0v>

000b4c14 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b4c14:	b108      	cbz	r0, b4c1a <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo0();
   b4c16:	f7ff bf85 	b.w	b4b24 <_Z12ledAmarillo0v>
   }
   else
   {
      ledMorado0();
   b4c1a:	f7ff bf91 	b.w	b4b40 <_Z10ledMorado0v>

000b4c1e <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b4c1e:	b108      	cbz	r0, b4c24 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde0();
   b4c20:	f7ff bf64 	b.w	b4aec <_Z9ledVerde0v>
   }
   else
   {
      ledRojo0();
   b4c24:	f7ff bf54 	b.w	b4ad0 <_Z8ledRojo0v>

000b4c28 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b4c28:	b508      	push	{r3, lr}
   if (estado)
   b4c2a:	b160      	cbz	r0, b4c46 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco0();
   b4c2c:	f7ff ffa4 	bl	b4b78 <_Z10ledBlanco0v>
      delay(400);
   b4c30:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4c34:	f003 fbc0 	bl	b83b8 <delay>
      ledApagar0();
   b4c38:	f7ff ff3c 	bl	b4ab4 <_Z10ledApagar0v>
   }
   else
   {
      ledApagar0();
   }
}
   b4c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4c40:	20c8      	movs	r0, #200	; 0xc8
   b4c42:	f003 bbb9 	b.w	b83b8 <delay>
}
   b4c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar0();
   b4c4a:	f7ff bf33 	b.w	b4ab4 <_Z10ledApagar0v>

000b4c4e <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b4c4e:	b108      	cbz	r0, b4c54 <_Z8ledOnOffb+0x6>
   {
      ledBlanco0();
   b4c50:	f7ff bf92 	b.w	b4b78 <_Z10ledBlanco0v>
   }
   else
   {
      ledApagar0();
   b4c54:	f7ff bf2e 	b.w	b4ab4 <_Z10ledApagar0v>

000b4c58 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   b4c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   if (estado)
   b4c5c:	b308      	cbz	r0, b4ca2 <_Z12ledArcoiris0b+0x4a>
      delay(200);
      ledAzul0();
      delay(200);
      */

      for (double i = 0; i < 1; i += 0.01)
   b4c5e:	f20f 0954 	addw	r9, pc, #84	; 0x54
   b4c62:	e9d9 8900 	ldrd	r8, r9, [r9]
      {
        leds.setColorHSB(0, i, 0.75, 0.75);
   b4c66:	4f12      	ldr	r7, [pc, #72]	; (b4cb0 <_Z12ledArcoiris0b+0x58>)
   b4c68:	2664      	movs	r6, #100	; 0x64
      for (double i = 0; i < 1; i += 0.01)
   b4c6a:	2400      	movs	r4, #0
   b4c6c:	2500      	movs	r5, #0
        leds.setColorHSB(0, i, 0.75, 0.75);
   b4c6e:	4629      	mov	r1, r5
   b4c70:	4620      	mov	r0, r4
   b4c72:	f004 fc81 	bl	b9578 <__aeabi_d2f>
   b4c76:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
   b4c7a:	ee00 0a10 	vmov	s0, r0
   b4c7e:	eef0 0a41 	vmov.f32	s1, s2
   b4c82:	2100      	movs	r1, #0
   b4c84:	4638      	mov	r0, r7
   b4c86:	f002 fd97 	bl	b77b8 <_ZN12ChainableLED11setColorHSBEhfff>
      for (double i = 0; i < 1; i += 0.01)
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	4629      	mov	r1, r5
   b4c8e:	4642      	mov	r2, r8
   b4c90:	464b      	mov	r3, r9
   b4c92:	f004 f801 	bl	b8c98 <__adddf3>
   b4c96:	3e01      	subs	r6, #1
   b4c98:	4604      	mov	r4, r0
   b4c9a:	460d      	mov	r5, r1
   b4c9c:	d1e7      	bne.n	b4c6e <_Z12ledArcoiris0b+0x16>
   }
   else
   {
      ledApagar0();
   }
}
   b4c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4ca2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      ledApagar0();
   b4ca6:	f7ff bf05 	b.w	b4ab4 <_Z10ledApagar0v>
   b4caa:	bf00      	nop
   b4cac:	f3af 8000 	nop.w
   b4cb0:	2003e698 	.word	0x2003e698
   b4cb4:	47ae147b 	.word	0x47ae147b
   b4cb8:	3f847ae1 	.word	0x3f847ae1

000b4cbc <_Z13blinkAndSleepb>:
void blinkAndSleep(boolean estado)
{
   if (estado)
   b4cbc:	b108      	cbz	r0, b4cc2 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4cbe:	f7ff bf97 	b.w	b4bf0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4cc2:	f7ff bf7e 	b.w	b4bc2 <_Z10pitidoOFF0v>

000b4cc6 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b4cc6:	b108      	cbz	r0, b4ccc <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b4cc8:	f7ff bf64 	b.w	b4b94 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4ccc:	f7ff bf79 	b.w	b4bc2 <_Z10pitidoOFF0v>

000b4cd0 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int actuador, int opcion, boolean valor)
{
   b4cd0:	4603      	mov	r3, r0
   b4cd2:	b513      	push	{r0, r1, r4, lr}
   b4cd4:	460c      	mov	r4, r1
   b4cd6:	4610      	mov	r0, r2
   switch (actuador)
   b4cd8:	b14b      	cbz	r3, b4cee <_Z15activarActuadoriib+0x1e>
   b4cda:	2b01      	cmp	r3, #1
   b4cdc:	d02c      	beq.n	b4d38 <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4cde:	f003 fd01 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4ce2:	491e      	ldr	r1, [pc, #120]	; (b4d5c <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
   b4ce4:	b002      	add	sp, #8
   b4ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b4cea:	f003 bafa 	b.w	b82e2 <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4cee:	2905      	cmp	r1, #5
   b4cf0:	d8f5      	bhi.n	b4cde <_Z15activarActuadoriib+0xe>
   b4cf2:	e8df f001 	tbb	[pc, r1]
   b4cf6:	0803      	.short	0x0803
   b4cf8:	1c17120d 	.word	0x1c17120d
   b4cfc:	b002      	add	sp, #8
   b4cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b4d02:	f7ff bf8c 	b.w	b4c1e <_Z12ledVerdeRojob>
   b4d06:	b002      	add	sp, #8
   b4d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4d0c:	f7ff bf82 	b.w	b4c14 <_Z17ledMoradoAmarillob>
   b4d10:	b002      	add	sp, #8
   b4d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b4d16:	f7ff bf78 	b.w	b4c0a <_Z14ledAzulNaranjab>
   b4d1a:	b002      	add	sp, #8
   b4d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4d20:	f7ff bf82 	b.w	b4c28 <_Z9ledBlink0b>
   b4d24:	b002      	add	sp, #8
   b4d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b4d2a:	f7ff bf95 	b.w	b4c58 <_Z12ledArcoiris0b>
   b4d2e:	b002      	add	sp, #8
   b4d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b4d34:	f7ff bf8b 	b.w	b4c4e <_Z8ledOnOffb>
   b4d38:	9201      	str	r2, [sp, #4]
      ledApagar0();
   b4d3a:	f7ff febb 	bl	b4ab4 <_Z10ledApagar0v>
      switch (opcion) {
   b4d3e:	9801      	ldr	r0, [sp, #4]
   b4d40:	b134      	cbz	r4, b4d50 <_Z15activarActuadoriib+0x80>
   b4d42:	2c01      	cmp	r4, #1
   b4d44:	d1cb      	bne.n	b4cde <_Z15activarActuadoriib+0xe>
   b4d46:	b002      	add	sp, #8
   b4d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b4d4c:	f7ff bfb6 	b.w	b4cbc <_Z13blinkAndSleepb>
   b4d50:	b002      	add	sp, #8
   b4d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b4d56:	f7ff bfb6 	b.w	b4cc6 <_Z8zumbadorb>
   b4d5a:	bf00      	nop
   b4d5c:	000b9bfb 	.word	0x000b9bfb

000b4d60 <_Z9ledApagarv>:

bool init = true;
ChainableLED ledObject = ChainableLED(0, 1, 5);

void ledApagar()
{
   b4d60:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b4d62:	2300      	movs	r3, #0
   b4d64:	4804      	ldr	r0, [pc, #16]	; (b4d78 <_Z9ledApagarv+0x18>)
   b4d66:	9300      	str	r3, [sp, #0]
   b4d68:	461a      	mov	r2, r3
   b4d6a:	4619      	mov	r1, r3
   b4d6c:	f002 fc40 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4d70:	b003      	add	sp, #12
   b4d72:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d76:	bf00      	nop
   b4d78:	2003e690 	.word	0x2003e690

000b4d7c <_Z7ledRojov>:
void ledRojo()
{
   b4d7c:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4d7e:	2300      	movs	r3, #0
   b4d80:	4804      	ldr	r0, [pc, #16]	; (b4d94 <_Z7ledRojov+0x18>)
   b4d82:	9300      	str	r3, [sp, #0]
   b4d84:	22ff      	movs	r2, #255	; 0xff
   b4d86:	4619      	mov	r1, r3
   b4d88:	f002 fc32 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4d8c:	b003      	add	sp, #12
   b4d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d92:	bf00      	nop
   b4d94:	2003e690 	.word	0x2003e690

000b4d98 <_Z8ledVerdev>:
void ledVerde()
{
   b4d98:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4d9a:	230a      	movs	r3, #10
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	9300      	str	r3, [sp, #0]
   b4da0:	4803      	ldr	r0, [pc, #12]	; (b4db0 <_Z8ledVerdev+0x18>)
   b4da2:	23ff      	movs	r3, #255	; 0xff
   b4da4:	4611      	mov	r1, r2
   b4da6:	f002 fc23 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4daa:	b003      	add	sp, #12
   b4dac:	f85d fb04 	ldr.w	pc, [sp], #4
   b4db0:	2003e690 	.word	0x2003e690

000b4db4 <_Z7ledAzulv>:
void ledAzul()
{
   b4db4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b4db6:	23ff      	movs	r3, #255	; 0xff
   b4db8:	9300      	str	r3, [sp, #0]
   b4dba:	2300      	movs	r3, #0
   b4dbc:	4803      	ldr	r0, [pc, #12]	; (b4dcc <_Z7ledAzulv+0x18>)
   b4dbe:	461a      	mov	r2, r3
   b4dc0:	4619      	mov	r1, r3
   b4dc2:	f002 fc15 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4dc6:	b003      	add	sp, #12
   b4dc8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4dcc:	2003e690 	.word	0x2003e690

000b4dd0 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4dd0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	4804      	ldr	r0, [pc, #16]	; (b4de8 <_Z11ledAmarillov+0x18>)
   b4dd6:	9100      	str	r1, [sp, #0]
   b4dd8:	23e9      	movs	r3, #233	; 0xe9
   b4dda:	22ff      	movs	r2, #255	; 0xff
   b4ddc:	f002 fc08 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4de0:	b003      	add	sp, #12
   b4de2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4de6:	bf00      	nop
   b4de8:	2003e690 	.word	0x2003e690

000b4dec <_Z9ledMoradov>:
void ledMorado()
{
   b4dec:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4dee:	2375      	movs	r3, #117	; 0x75
   b4df0:	9300      	str	r3, [sp, #0]
   b4df2:	4804      	ldr	r0, [pc, #16]	; (b4e04 <_Z9ledMoradov+0x18>)
   b4df4:	2346      	movs	r3, #70	; 0x46
   b4df6:	226c      	movs	r2, #108	; 0x6c
   b4df8:	2100      	movs	r1, #0
   b4dfa:	f002 fbf9 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4dfe:	b003      	add	sp, #12
   b4e00:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e04:	2003e690 	.word	0x2003e690

000b4e08 <_Z10ledNaranjav>:
void ledNaranja()
{
   b4e08:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b4e0a:	2100      	movs	r1, #0
   b4e0c:	4804      	ldr	r0, [pc, #16]	; (b4e20 <_Z10ledNaranjav+0x18>)
   b4e0e:	9100      	str	r1, [sp, #0]
   b4e10:	2380      	movs	r3, #128	; 0x80
   b4e12:	22ff      	movs	r2, #255	; 0xff
   b4e14:	f002 fbec 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4e18:	b003      	add	sp, #12
   b4e1a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e1e:	bf00      	nop
   b4e20:	2003e690 	.word	0x2003e690

000b4e24 <_Z9ledBlancov>:
void ledBlanco()
{
   b4e24:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b4e26:	23ff      	movs	r3, #255	; 0xff
   b4e28:	4804      	ldr	r0, [pc, #16]	; (b4e3c <_Z9ledBlancov+0x18>)
   b4e2a:	9300      	str	r3, [sp, #0]
   b4e2c:	461a      	mov	r2, r3
   b4e2e:	2100      	movs	r1, #0
   b4e30:	f002 fbde 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4e34:	b003      	add	sp, #12
   b4e36:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e3a:	bf00      	nop
   b4e3c:	2003e690 	.word	0x2003e690

000b4e40 <_Z8ledBlinkv>:

void ledBlink()
{
   b4e40:	b508      	push	{r3, lr}
    ledBlanco();
   b4e42:	f7ff ffef 	bl	b4e24 <_Z9ledBlancov>
    delay(400);
   b4e46:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4e4a:	f003 fab5 	bl	b83b8 <delay>
    ledApagar();
   b4e4e:	f7ff ff87 	bl	b4d60 <_Z9ledApagarv>
    delay(200);
}
   b4e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4e56:	20c8      	movs	r0, #200	; 0xc8
   b4e58:	f003 baae 	b.w	b83b8 <delay>
   b4e5c:	0000      	movs	r0, r0
	...

000b4e60 <_Z11ledArcoirisv>:

void ledArcoiris()
{
   b4e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    for (double i = 0; i < 1; i += 0.01)
   b4e64:	f20f 0944 	addw	r9, pc, #68	; 0x44
   b4e68:	e9d9 8900 	ldrd	r8, r9, [r9]
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4e6c:	4f0e      	ldr	r7, [pc, #56]	; (b4ea8 <_Z11ledArcoirisv+0x48>)
{
   b4e6e:	2664      	movs	r6, #100	; 0x64
    for (double i = 0; i < 1; i += 0.01)
   b4e70:	2400      	movs	r4, #0
   b4e72:	2500      	movs	r5, #0
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4e74:	4629      	mov	r1, r5
   b4e76:	4620      	mov	r0, r4
   b4e78:	f004 fb7e 	bl	b9578 <__aeabi_d2f>
   b4e7c:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
   b4e80:	ee00 0a10 	vmov	s0, r0
   b4e84:	eef0 0a41 	vmov.f32	s1, s2
   b4e88:	2100      	movs	r1, #0
   b4e8a:	4638      	mov	r0, r7
   b4e8c:	f002 fc94 	bl	b77b8 <_ZN12ChainableLED11setColorHSBEhfff>
    for (double i = 0; i < 1; i += 0.01)
   b4e90:	4620      	mov	r0, r4
   b4e92:	4629      	mov	r1, r5
   b4e94:	4642      	mov	r2, r8
   b4e96:	464b      	mov	r3, r9
   b4e98:	f003 fefe 	bl	b8c98 <__adddf3>
   b4e9c:	3e01      	subs	r6, #1
   b4e9e:	4604      	mov	r4, r0
   b4ea0:	460d      	mov	r5, r1
   b4ea2:	d1e7      	bne.n	b4e74 <_Z11ledArcoirisv+0x14>
    }

}
   b4ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4ea8:	2003e690 	.word	0x2003e690
   b4eac:	47ae147b 	.word	0x47ae147b
   b4eb0:	3f847ae1 	.word	0x3f847ae1

000b4eb4 <_Z8pitidoONi>:

// Acciones del zumbador MODO 1
void pitidoON(int puerto)
{
   b4eb4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4eb6:	b284      	uxth	r4, r0
   b4eb8:	4620      	mov	r0, r4
   b4eba:	2101      	movs	r1, #1
   b4ebc:	f003 fe23 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b4ec0:	4620      	mov	r0, r4
   b4ec2:	2101      	movs	r1, #1
   b4ec4:	f003 fe1f 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4ec8:	1c60      	adds	r0, r4, #1
   b4eca:	b280      	uxth	r0, r0
   b4ecc:	2101      	movs	r1, #1
   b4ece:	9001      	str	r0, [sp, #4]
   b4ed0:	f003 fe19 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4ed4:	9801      	ldr	r0, [sp, #4]
   b4ed6:	2101      	movs	r1, #1
}
   b4ed8:	b002      	add	sp, #8
   b4eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b4ede:	f003 be12 	b.w	b8b06 <digitalWrite>

000b4ee2 <_Z9pitidoOFFi>:

void pitidoOFF(int puerto)
{
   b4ee2:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4ee4:	b284      	uxth	r4, r0
   b4ee6:	4620      	mov	r0, r4
   b4ee8:	2100      	movs	r1, #0
   b4eea:	f003 fe0c 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto, LOW);
   b4eee:	4620      	mov	r0, r4
   b4ef0:	2100      	movs	r1, #0
   b4ef2:	f003 fe08 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4ef6:	1c60      	adds	r0, r4, #1
   b4ef8:	b280      	uxth	r0, r0
   b4efa:	2100      	movs	r1, #0
   b4efc:	9001      	str	r0, [sp, #4]
   b4efe:	f003 fe02 	bl	b8b06 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4f02:	9801      	ldr	r0, [sp, #4]
   b4f04:	2100      	movs	r1, #0
}
   b4f06:	b002      	add	sp, #8
   b4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4f0c:	f003 bdfb 	b.w	b8b06 <digitalWrite>

000b4f10 <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b4f10:	b510      	push	{r4, lr}
   b4f12:	4604      	mov	r4, r0
    pitidoON(puerto);
   b4f14:	f7ff ffce 	bl	b4eb4 <_Z8pitidoONi>
    delay(100);
   b4f18:	2064      	movs	r0, #100	; 0x64
   b4f1a:	f003 fa4d 	bl	b83b8 <delay>
    pitidoOFF(puerto);
   b4f1e:	4620      	mov	r0, r4
   b4f20:	f7ff ffdf 	bl	b4ee2 <_Z9pitidoOFFi>
    delay(100);
}
   b4f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4f28:	2064      	movs	r0, #100	; 0x64
   b4f2a:	f003 ba45 	b.w	b83b8 <delay>
	...

000b4f30 <_Z10activarLEDii>:
}
*/

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Serial.println("Actiaver LED");
    if (init)
   b4f32:	4f28      	ldr	r7, [pc, #160]	; (b4fd4 <_Z10activarLEDii+0xa4>)
   b4f34:	783b      	ldrb	r3, [r7, #0]
{
   b4f36:	4604      	mov	r4, r0
    if (init)
   b4f38:	b1a3      	cbz	r3, b4f64 <_Z10activarLEDii+0x34>
    {
        ledObject = ChainableLED(puerto, puerto + 1, 5);
   b4f3a:	b2c9      	uxtb	r1, r1
   b4f3c:	1c4a      	adds	r2, r1, #1
   b4f3e:	466d      	mov	r5, sp
   b4f40:	2305      	movs	r3, #5
   b4f42:	b2d2      	uxtb	r2, r2
   b4f44:	4628      	mov	r0, r5
   b4f46:	f002 fae9 	bl	b751c <_ZN12ChainableLEDC1Ehhh>
   b4f4a:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4f4e:	4e22      	ldr	r6, [pc, #136]	; (b4fd8 <_Z10activarLEDii+0xa8>)
   b4f50:	e886 0003 	stmia.w	r6, {r0, r1}
   b4f54:	4628      	mov	r0, r5
   b4f56:	f002 faee 	bl	b7536 <_ZN12ChainableLEDD1Ev>
        ledObject.init();
   b4f5a:	4630      	mov	r0, r6
   b4f5c:	f002 fb90 	bl	b7680 <_ZN12ChainableLED4initEv>
        init = false;
   b4f60:	2300      	movs	r3, #0
   b4f62:	703b      	strb	r3, [r7, #0]
    }

    switch (opcion)
   b4f64:	2c07      	cmp	r4, #7
   b4f66:	d82d      	bhi.n	b4fc4 <_Z10activarLEDii+0x94>
   b4f68:	e8df f004 	tbb	[pc, r4]
   b4f6c:	130e0904 	.word	0x130e0904
   b4f70:	27221d18 	.word	0x27221d18

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4f74:	b003      	add	sp, #12
   b4f76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerde();
   b4f7a:	f7ff bf0d 	b.w	b4d98 <_Z8ledVerdev>
}
   b4f7e:	b003      	add	sp, #12
   b4f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledRojo();
   b4f84:	f7ff befa 	b.w	b4d7c <_Z7ledRojov>
}
   b4f88:	b003      	add	sp, #12
   b4f8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAmarillo();
   b4f8e:	f7ff bf1f 	b.w	b4dd0 <_Z11ledAmarillov>
}
   b4f92:	b003      	add	sp, #12
   b4f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMorado();
   b4f98:	f7ff bf28 	b.w	b4dec <_Z9ledMoradov>
}
   b4f9c:	b003      	add	sp, #12
   b4f9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzul();
   b4fa2:	f7ff bf07 	b.w	b4db4 <_Z7ledAzulv>
}
   b4fa6:	b003      	add	sp, #12
   b4fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledNaranja();
   b4fac:	f7ff bf2c 	b.w	b4e08 <_Z10ledNaranjav>
}
   b4fb0:	b003      	add	sp, #12
   b4fb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink();
   b4fb6:	f7ff bf43 	b.w	b4e40 <_Z8ledBlinkv>
}
   b4fba:	b003      	add	sp, #12
   b4fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris();
   b4fc0:	f7ff bf4e 	b.w	b4e60 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b4fc4:	f003 fb8e 	bl	b86e4 <_Z16_fetch_usbserialv>
   b4fc8:	4904      	ldr	r1, [pc, #16]	; (b4fdc <_Z10activarLEDii+0xac>)
}
   b4fca:	b003      	add	sp, #12
   b4fcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b4fd0:	f003 b987 	b.w	b82e2 <_ZN5Print7printlnEPKc>
   b4fd4:	2003df47 	.word	0x2003df47
   b4fd8:	2003e690 	.word	0x2003e690
   b4fdc:	000b9c0b 	.word	0x000b9c0b

000b4fe0 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b4fe0:	b538      	push	{r3, r4, r5, lr}
   b4fe2:	460c      	mov	r4, r1
   b4fe4:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4fe6:	2101      	movs	r1, #1
   b4fe8:	b2a0      	uxth	r0, r4
   b4fea:	f003 fd7b 	bl	b8ae4 <pinMode>

    switch (opcion)
   b4fee:	b145      	cbz	r5, b5002 <_Z15activarZumbadorii+0x22>
   b4ff0:	2d01      	cmp	r5, #1
   b4ff2:	d00b      	beq.n	b500c <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4ff4:	f003 fb76 	bl	b86e4 <_Z16_fetch_usbserialv>
        break;
    }
}
   b4ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4ffc:	4906      	ldr	r1, [pc, #24]	; (b5018 <_Z15activarZumbadorii+0x38>)
   b4ffe:	f003 b970 	b.w	b82e2 <_ZN5Print7printlnEPKc>
        pitidoON(puerto);
   b5002:	4620      	mov	r0, r4
}
   b5004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON(puerto);
   b5008:	f7ff bf54 	b.w	b4eb4 <_Z8pitidoONi>
        pitidoBlink(puerto);
   b500c:	4620      	mov	r0, r4
}
   b500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink(puerto);
   b5012:	f7ff bf7d 	b.w	b4f10 <_Z11pitidoBlinki>
   b5016:	bf00      	nop
   b5018:	000b9bfb 	.word	0x000b9bfb

000b501c <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b501c:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b501e:	b908      	cbnz	r0, b5024 <_Z14apagarActuadorii+0x8>
   b5020:	f7ff be9e 	b.w	b4d60 <_Z9ledApagarv>
   b5024:	2100      	movs	r1, #0
   b5026:	b298      	uxth	r0, r3
   b5028:	f003 bd6d 	b.w	b8b06 <digitalWrite>

000b502c <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b502c:	4603      	mov	r3, r0
    if (id < 2)
   b502e:	2b01      	cmp	r3, #1
{
   b5030:	4608      	mov	r0, r1
   b5032:	4611      	mov	r1, r2
    if (id < 2)
   b5034:	dc04      	bgt.n	b5040 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b5036:	b90b      	cbnz	r3, b503c <_Z15actuadorHandleriii+0x10>
   b5038:	f7ff bf7a 	b.w	b4f30 <_Z10activarLEDii>
   b503c:	f7ff bfd0 	b.w	b4fe0 <_Z15activarZumbadorii>
   b5040:	4770      	bx	lr
	...

000b5044 <setup>:
int actuador = -1;

Bloque bloques[2];

void setup()
{
   b5044:	b510      	push	{r4, lr}
   b5046:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5048:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b504a:	a805      	add	r0, sp, #20
   b504c:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b5050:	f8ad 401c 	strh.w	r4, [sp, #28]
   b5054:	f003 fa56 	bl	b8504 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5058:	481f      	ldr	r0, [pc, #124]	; (b50d8 <setup+0x94>)
   b505a:	4623      	mov	r3, r4
   b505c:	4622      	mov	r2, r4
   b505e:	4621      	mov	r1, r4
   b5060:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5062:	4c1e      	ldr	r4, [pc, #120]	; (b50dc <setup+0x98>)
   b5064:	f002 fe4e 	bl	b7d04 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b5068:	f003 fb3c 	bl	b86e4 <_Z16_fetch_usbserialv>
   b506c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5070:	f003 fb2c 	bl	b86cc <_ZN9USBSerial5beginEl>
   b5074:	7821      	ldrb	r1, [r4, #0]
   b5076:	f3bf 8f5b 	dmb	ish
   b507a:	f011 0101 	ands.w	r1, r1, #1
   b507e:	d10b      	bne.n	b5098 <setup+0x54>
   b5080:	4620      	mov	r0, r4
   b5082:	9103      	str	r1, [sp, #12]
   b5084:	f7ff f818 	bl	b40b8 <__cxa_guard_acquire>
   b5088:	9903      	ldr	r1, [sp, #12]
   b508a:	b128      	cbz	r0, b5098 <setup+0x54>
   b508c:	4814      	ldr	r0, [pc, #80]	; (b50e0 <setup+0x9c>)
   b508e:	f002 ff05 	bl	b7e9c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5092:	4620      	mov	r0, r4
   b5094:	f7ff f815 	bl	b40c2 <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5098:	4811      	ldr	r0, [pc, #68]	; (b50e0 <setup+0x9c>)
   b509a:	f002 ff09 	bl	b7eb0 <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b509e:	2301      	movs	r3, #1
   b50a0:	9300      	str	r3, [sp, #0]
   b50a2:	223c      	movs	r2, #60	; 0x3c
   b50a4:	2102      	movs	r1, #2
   b50a6:	480f      	ldr	r0, [pc, #60]	; (b50e4 <setup+0xa0>)
   b50a8:	f001 ff44 	bl	b6f34 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b50ac:	480e      	ldr	r0, [pc, #56]	; (b50e8 <setup+0xa4>)
   b50ae:	f001 f9d6 	bl	b645e <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b50b2:	4b0e      	ldr	r3, [pc, #56]	; (b50ec <setup+0xa8>)
   b50b4:	22ff      	movs	r2, #255	; 0xff
   b50b6:	701a      	strb	r2, [r3, #0]
   b50b8:	705a      	strb	r2, [r3, #1]
   b50ba:	709a      	strb	r2, [r3, #2]
   b50bc:	70da      	strb	r2, [r3, #3]
   b50be:	711a      	strb	r2, [r3, #4]
   b50c0:	715a      	strb	r2, [r3, #5]
  }
  // initializeBLocks(bloques);

  if ( MODE == 0 ) {
   b50c2:	4b0b      	ldr	r3, [pc, #44]	; (b50f0 <setup+0xac>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	b92b      	cbnz	r3, b50d4 <setup+0x90>
    leds.init();
   b50c8:	480a      	ldr	r0, [pc, #40]	; (b50f4 <setup+0xb0>)
  }
  
}
   b50ca:	b008      	add	sp, #32
   b50cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    leds.init();
   b50d0:	f002 bad6 	b.w	b7680 <_ZN12ChainableLED4initEv>
}
   b50d4:	b008      	add	sp, #32
   b50d6:	bd10      	pop	{r4, pc}
   b50d8:	2003e718 	.word	0x2003e718
   b50dc:	2003dfdc 	.word	0x2003dfdc
   b50e0:	2003dfe0 	.word	0x2003dfe0
   b50e4:	2003e618 	.word	0x2003e618
   b50e8:	2003e6a0 	.word	0x2003e6a0
   b50ec:	2003e689 	.word	0x2003e689
   b50f0:	2003dfec 	.word	0x2003dfec
   b50f4:	2003e698 	.word	0x2003e698

000b50f8 <_Z13isValidSensori>:

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b50f8:	b570      	push	{r4, r5, r6, lr}
  Bloque bloque = bloques[numBloque];
   b50fa:	4b12      	ldr	r3, [pc, #72]	; (b5144 <_Z13isValidSensori+0x4c>)
   b50fc:	4e12      	ldr	r6, [pc, #72]	; (b5148 <_Z13isValidSensori+0x50>)
   b50fe:	681c      	ldr	r4, [r3, #0]
   b5100:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5104:	4354      	muls	r4, r2
{
   b5106:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
  Bloque bloque = bloques[numBloque];
   b510a:	1931      	adds	r1, r6, r4
{
   b510c:	4605      	mov	r5, r0
  Bloque bloque = bloques[numBloque];
   b510e:	a801      	add	r0, sp, #4
   b5110:	f004 fa90 	bl	b9634 <memcpy>
   b5114:	5931      	ldr	r1, [r6, r4]
  for (int i = 0; i < bloque.numSensores; i++)
   b5116:	ab01      	add	r3, sp, #4
   b5118:	2200      	movs	r2, #0
   b511a:	428a      	cmp	r2, r1
   b511c:	da0f      	bge.n	b513e <_Z13isValidSensori+0x46>
  {
    if (bloque.sensores[i].id == deviceID)
   b511e:	6858      	ldr	r0, [r3, #4]
   b5120:	42a8      	cmp	r0, r5
   b5122:	f103 0310 	add.w	r3, r3, #16
   b5126:	d108      	bne.n	b513a <_Z13isValidSensori+0x42>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b5128:	f003 fadc 	bl	b86e4 <_Z16_fetch_usbserialv>
   b512c:	4907      	ldr	r1, [pc, #28]	; (b514c <_Z13isValidSensori+0x54>)
   b512e:	f003 f8d8 	bl	b82e2 <_ZN5Print7printlnEPKc>
   b5132:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b5134:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   b5138:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < bloque.numSensores; i++)
   b513a:	3201      	adds	r2, #1
   b513c:	e7ed      	b.n	b511a <_Z13isValidSensori+0x22>
  return true;
   b513e:	2001      	movs	r0, #1
   b5140:	e7f8      	b.n	b5134 <_Z13isValidSensori+0x3c>
   b5142:	bf00      	nop
   b5144:	2003df48 	.word	0x2003df48
   b5148:	2003e000 	.word	0x2003e000
   b514c:	000b9c1a 	.word	0x000b9c1a

000b5150 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5150:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5152:	4b11      	ldr	r3, [pc, #68]	; (b5198 <_Z11isNewSensori+0x48>)
   b5154:	4a11      	ldr	r2, [pc, #68]	; (b519c <_Z11isNewSensori+0x4c>)
   b5156:	681e      	ldr	r6, [r3, #0]
   b5158:	4694      	mov	ip, r2
   b515a:	2300      	movs	r3, #0
   b515c:	429e      	cmp	r6, r3
   b515e:	db17      	blt.n	b5190 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5160:	6817      	ldr	r7, [r2, #0]
   b5162:	4615      	mov	r5, r2
   b5164:	2100      	movs	r1, #0
   b5166:	428f      	cmp	r7, r1
   b5168:	dd0e      	ble.n	b5188 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b516a:	686c      	ldr	r4, [r5, #4]
   b516c:	4284      	cmp	r4, r0
   b516e:	f105 0510 	add.w	r5, r5, #16
   b5172:	d107      	bne.n	b5184 <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5174:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5178:	4353      	muls	r3, r2
   b517a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b517e:	4463      	add	r3, ip
   b5180:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5184:	3101      	adds	r1, #1
   b5186:	e7ee      	b.n	b5166 <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5188:	3301      	adds	r3, #1
   b518a:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b518e:	e7e5      	b.n	b515c <_Z11isNewSensori+0xc>
  return -1;
   b5190:	f04f 30ff 	mov.w	r0, #4294967295
   b5194:	e7f5      	b.n	b5182 <_Z11isNewSensori+0x32>
   b5196:	bf00      	nop
   b5198:	2003df48 	.word	0x2003df48
   b519c:	2003e000 	.word	0x2003e000

000b51a0 <_Z15isValidActuadorii>:
// TRUE cuando el actuador no ha sido empleado en el bloque anterior
// Y cuando no se ha empleado en el mismo MODO en el bloque actual
// FALSE cuando se ha empleado el mismo actuador con el mismo MODO en el bloque actual
// Y cuando se ha empleado en el bloque anterior
bool isValidActuador(int deviceState, int actuadorID)
{
   b51a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b51a4:	4d18      	ldr	r5, [pc, #96]	; (b5208 <_Z15isValidActuadorii+0x68>)
  for (int i = 0; i <= numBloque; i++)
   b51a6:	4b19      	ldr	r3, [pc, #100]	; (b520c <_Z15isValidActuadorii+0x6c>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b51a8:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b51ac:	681f      	ldr	r7, [r3, #0]
{
   b51ae:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b51b0:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b51b2:	2400      	movs	r4, #0
   b51b4:	42a7      	cmp	r7, r4
   b51b6:	db21      	blt.n	b51fc <_Z15isValidActuadorii+0x5c>
    if ( i == numBloque ) 
   b51b8:	d10e      	bne.n	b51d8 <_Z15isValidActuadorii+0x38>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b51ba:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b51be:	461a      	mov	r2, r3
   b51c0:	2600      	movs	r6, #0
   b51c2:	45b0      	cmp	r8, r6
   b51c4:	dd08      	ble.n	b51d8 <_Z15isValidActuadorii+0x38>
        if (actuador.condicion == deviceState && actuador.id == actuadorID)
   b51c6:	e9d2 9052 	ldrd	r9, r0, [r2, #328]	; 0x148
   b51ca:	4560      	cmp	r0, ip
   b51cc:	d101      	bne.n	b51d2 <_Z15isValidActuadorii+0x32>
   b51ce:	4589      	cmp	r9, r1
   b51d0:	d017      	beq.n	b5202 <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b51d2:	3601      	adds	r6, #1
   b51d4:	3214      	adds	r2, #20
   b51d6:	e7f4      	b.n	b51c2 <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b51d8:	2f01      	cmp	r7, #1
   b51da:	d10b      	bne.n	b51f4 <_Z15isValidActuadorii+0x54>
   b51dc:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b51de:	2200      	movs	r2, #0
   b51e0:	4596      	cmp	lr, r2
   b51e2:	dd07      	ble.n	b51f4 <_Z15isValidActuadorii+0x54>
      {
        Actuador actuador = bloques[0].actuadores[j];
        // Mismo actuador
        if (actuador.id == actuadorID)
   b51e4:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b51e8:	4281      	cmp	r1, r0
   b51ea:	f106 0614 	add.w	r6, r6, #20
   b51ee:	d008      	beq.n	b5202 <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b51f0:	3201      	adds	r2, #1
   b51f2:	e7f5      	b.n	b51e0 <_Z15isValidActuadorii+0x40>
  for (int i = 0; i <= numBloque; i++)
   b51f4:	3401      	adds	r4, #1
   b51f6:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b51fa:	e7db      	b.n	b51b4 <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b51fc:	2001      	movs	r0, #1
}
   b51fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return false;
   b5202:	2000      	movs	r0, #0
   b5204:	e7fb      	b.n	b51fe <_Z15isValidActuadorii+0x5e>
   b5206:	bf00      	nop
   b5208:	2003e000 	.word	0x2003e000
   b520c:	2003df48 	.word	0x2003df48

000b5210 <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5210:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b5212:	4b0f      	ldr	r3, [pc, #60]	; (b5250 <_Z13isNewActuadori+0x40>)
   b5214:	681e      	ldr	r6, [r3, #0]
   b5216:	4b0f      	ldr	r3, [pc, #60]	; (b5254 <_Z13isNewActuadori+0x44>)
   b5218:	2100      	movs	r1, #0
   b521a:	428e      	cmp	r6, r1
   b521c:	db13      	blt.n	b5246 <_Z13isNewActuadori+0x36>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b521e:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
   b5222:	461a      	mov	r2, r3
   b5224:	2400      	movs	r4, #0
   b5226:	42a7      	cmp	r7, r4
   b5228:	dd09      	ble.n	b523e <_Z13isNewActuadori+0x2e>
    {
      Actuador actuador = bloques[j].actuadores[i];
   b522a:	f8d2 c148 	ldr.w	ip, [r2, #328]	; 0x148

      if (actuador.id == deviceID)
   b522e:	4584      	cmp	ip, r0
   b5230:	f102 0214 	add.w	r2, r2, #20
      Actuador actuador = bloques[j].actuadores[i];
   b5234:	f8d2 5140 	ldr.w	r5, [r2, #320]	; 0x140
      if (actuador.id == deviceID)
   b5238:	d007      	beq.n	b524a <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b523a:	3401      	adds	r4, #1
   b523c:	e7f3      	b.n	b5226 <_Z13isNewActuadori+0x16>
  for (int j = 0; j <= numBloque; j++)
   b523e:	3101      	adds	r1, #1
   b5240:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b5244:	e7e9      	b.n	b521a <_Z13isNewActuadori+0xa>
        return actuador.puerto;
      }
    }
  }

  return -1;
   b5246:	f04f 35ff 	mov.w	r5, #4294967295
}
   b524a:	4628      	mov	r0, r5
   b524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b524e:	bf00      	nop
   b5250:	2003df48 	.word	0x2003df48
   b5254:	2003e000 	.word	0x2003e000

000b5258 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5258:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b525a:	4b0c      	ldr	r3, [pc, #48]	; (b528c <_Z14isActuadorDualii+0x34>)
   b525c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5260:	fb02 3101 	mla	r1, r2, r1, r3
   b5264:	2200      	movs	r2, #0
   b5266:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b526a:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b526c:	4294      	cmp	r4, r2
   b526e:	dd08      	ble.n	b5282 <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5270:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5274:	4285      	cmp	r5, r0
   b5276:	d101      	bne.n	b527c <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5278:	b92b      	cbnz	r3, b5286 <_Z14isActuadorDualii+0x2e>
   b527a:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b527c:	3201      	adds	r2, #1
   b527e:	3114      	adds	r1, #20
   b5280:	e7f4      	b.n	b526c <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5282:	2000      	movs	r0, #0
}
   b5284:	bd30      	pop	{r4, r5, pc}
      return true;
   b5286:	4618      	mov	r0, r3
   b5288:	e7fc      	b.n	b5284 <_Z14isActuadorDualii+0x2c>
   b528a:	bf00      	nop
   b528c:	2003e000 	.word	0x2003e000

000b5290 <_Z9resetModev>:

void resetMode() 
{
  IF_pasado = false;
   b5290:	4a0e      	ldr	r2, [pc, #56]	; (b52cc <_Z9resetModev+0x3c>)
   b5292:	2300      	movs	r3, #0
   b5294:	7013      	strb	r3, [r2, #0]
  THEN_pasado = false;
   b5296:	4a0e      	ldr	r2, [pc, #56]	; (b52d0 <_Z9resetModev+0x40>)
   b5298:	7013      	strb	r3, [r2, #0]
  ELSE_pasado = false;
   b529a:	4a0e      	ldr	r2, [pc, #56]	; (b52d4 <_Z9resetModev+0x44>)
   b529c:	7013      	strb	r3, [r2, #0]

  numBloque = -1;
   b529e:	4a0e      	ldr	r2, [pc, #56]	; (b52d8 <_Z9resetModev+0x48>)
   b52a0:	f04f 31ff 	mov.w	r1, #4294967295
   b52a4:	6011      	str	r1, [r2, #0]
  numCondicionalesBloque = 0;
   b52a6:	4a0d      	ldr	r2, [pc, #52]	; (b52dc <_Z9resetModev+0x4c>)
   b52a8:	6013      	str	r3, [r2, #0]
  numSensoresBloque = 0;
   b52aa:	4a0d      	ldr	r2, [pc, #52]	; (b52e0 <_Z9resetModev+0x50>)
   b52ac:	6013      	str	r3, [r2, #0]
  numActuadoresBloque = 0;
   b52ae:	4a0d      	ldr	r2, [pc, #52]	; (b52e4 <_Z9resetModev+0x54>)
   b52b0:	6013      	str	r3, [r2, #0]

  Bloque nuevoBloque;
  bloques[0] = nuevoBloque;
   b52b2:	4a0d      	ldr	r2, [pc, #52]	; (b52e8 <_Z9resetModev+0x58>)
   b52b4:	6013      	str	r3, [r2, #0]
   b52b6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

  haveSensor = false;
   b52ba:	4a0c      	ldr	r2, [pc, #48]	; (b52ec <_Z9resetModev+0x5c>)
   b52bc:	7013      	strb	r3, [r2, #0]

  puertoDigital = 3;
   b52be:	4a0c      	ldr	r2, [pc, #48]	; (b52f0 <_Z9resetModev+0x60>)
   b52c0:	2103      	movs	r1, #3
   b52c2:	6011      	str	r1, [r2, #0]
  puertoAnalogico = 0;
   b52c4:	4a0b      	ldr	r2, [pc, #44]	; (b52f4 <_Z9resetModev+0x64>)
   b52c6:	6013      	str	r3, [r2, #0]
}
   b52c8:	4770      	bx	lr
   b52ca:	bf00      	nop
   b52cc:	2003dfe9 	.word	0x2003dfe9
   b52d0:	2003dffc 	.word	0x2003dffc
   b52d4:	2003dfe8 	.word	0x2003dfe8
   b52d8:	2003df48 	.word	0x2003df48
   b52dc:	2003e6b4 	.word	0x2003e6b4
   b52e0:	2003e6b8 	.word	0x2003e6b8
   b52e4:	2003e6b0 	.word	0x2003e6b0
   b52e8:	2003e000 	.word	0x2003e000
   b52ec:	2003e688 	.word	0x2003e688
   b52f0:	2003df4c 	.word	0x2003df4c
   b52f4:	2003e6bc 	.word	0x2003e6bc

000b52f8 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b52f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b52fc:	4c16      	ldr	r4, [pc, #88]	; (b5358 <_Z18ejecutarEvaluacionbi+0x60>)
   b52fe:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5302:	fb03 4401 	mla	r4, r3, r1, r4
   b5306:	4607      	mov	r7, r0
   b5308:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b530a:	2600      	movs	r6, #0
   b530c:	46a1      	mov	r9, r4
   b530e:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b5312:	42b3      	cmp	r3, r6
   b5314:	dd1c      	ble.n	b5350 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    // Serial.printlnf("Actuandor: %d , %s", actuador.id, actuador.evaluate ? "True" : "False");
    if (evaluacion == actuador.evaluate)
   b5316:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b531a:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b531e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5322:	42bb      	cmp	r3, r7
   b5324:	d107      	bne.n	b5336 <_Z18ejecutarEvaluacionbi+0x3e>
    {
      // Serial.println("ActivarActuador");
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5326:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b532a:	4640      	mov	r0, r8
   b532c:	f7ff fe7e 	bl	b502c <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5330:	3601      	adds	r6, #1
   b5332:	3414      	adds	r4, #20
   b5334:	e7eb      	b.n	b530e <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b5336:	4629      	mov	r1, r5
   b5338:	4640      	mov	r0, r8
   b533a:	9201      	str	r2, [sp, #4]
   b533c:	f7ff ff8c 	bl	b5258 <_Z14isActuadorDualii>
   b5340:	9a01      	ldr	r2, [sp, #4]
   b5342:	2800      	cmp	r0, #0
   b5344:	d1f4      	bne.n	b5330 <_Z18ejecutarEvaluacionbi+0x38>
      {
        // Serial.println("ApagarActuador");
        apagarActuador(actuador.id, actuador.puerto);
   b5346:	4611      	mov	r1, r2
   b5348:	4640      	mov	r0, r8
   b534a:	f7ff fe67 	bl	b501c <_Z14apagarActuadorii>
   b534e:	e7ef      	b.n	b5330 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b5350:	b003      	add	sp, #12
   b5352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5356:	bf00      	nop
   b5358:	2003e000 	.word	0x2003e000

000b535c <loop>:

void loop()
{
   b535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b5360:	4870      	ldr	r0, [pc, #448]	; (b5524 <loop+0x1c8>)
{
   b5362:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
  if (mfrc522.PICC_IsNewCardPresent())
   b5366:	f001 f9a5 	bl	b66b4 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b536a:	b1b8      	cbz	r0, b539c <loop+0x40>
  {
    Serial.print("Tag Detectada --> ");
   b536c:	f003 f9ba 	bl	b86e4 <_Z16_fetch_usbserialv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }

    display.clearDisplay();
   b5370:	4c6d      	ldr	r4, [pc, #436]	; (b5528 <loop+0x1cc>)
    Serial.print("Tag Detectada --> ");
   b5372:	496e      	ldr	r1, [pc, #440]	; (b552c <loop+0x1d0>)
   b5374:	f002 ffa2 	bl	b82bc <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b5378:	486a      	ldr	r0, [pc, #424]	; (b5524 <loop+0x1c8>)
   b537a:	f001 fb6c 	bl	b6a56 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    display.clearDisplay();
   b537e:	4620      	mov	r0, r4
   b5380:	f001 fdca 	bl	b6f18 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b5384:	4620      	mov	r0, r4
   b5386:	2101      	movs	r1, #1
   b5388:	f000 ff01 	bl	b618e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b538c:	2600      	movs	r6, #0
   b538e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5392:	e9c4 6304 	strd	r6, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b5396:	4866      	ldr	r0, [pc, #408]	; (b5530 <loop+0x1d4>)
   b5398:	f7ff fad4 	bl	b4944 <_Z8getTagIDPi>
  }


  // Modo KIDS
  if ( MODE == 0 ) 
   b539c:	f8df b1cc 	ldr.w	fp, [pc, #460]	; b556c <loop+0x210>
  {
    
    // Cambio de modo
    if (tagInfo[0] == 6 ) {
   b53a0:	4c63      	ldr	r4, [pc, #396]	; (b5530 <loop+0x1d4>)
  if ( MODE == 0 ) 
   b53a2:	f8db 2000 	ldr.w	r2, [fp]
    if (tagInfo[0] == 6 ) {
   b53a6:	6823      	ldr	r3, [r4, #0]
  if ( MODE == 0 ) 
   b53a8:	2a00      	cmp	r2, #0
   b53aa:	d14b      	bne.n	b5444 <loop+0xe8>
    if (tagInfo[0] == 6 ) {
   b53ac:	2b06      	cmp	r3, #6
   b53ae:	d114      	bne.n	b53da <loop+0x7e>

      if (tagInfo[1] == 0 ) {
   b53b0:	6864      	ldr	r4, [r4, #4]
   b53b2:	b964      	cbnz	r4, b53ce <loop+0x72>

        Serial.println("Modo KIDS detectado");
   b53b4:	f003 f996 	bl	b86e4 <_Z16_fetch_usbserialv>
   b53b8:	495e      	ldr	r1, [pc, #376]	; (b5534 <loop+0x1d8>)
        MODE = 0;

      } else if (tagInfo[1] == 1) {

        Serial.println("Modo SUCRE detectado");
   b53ba:	f002 ff92 	bl	b82e2 <_ZN5Print7printlnEPKc>
        MODE = 1;
   b53be:	f8cb 4000 	str.w	r4, [fp]
            }
          }
        }
      } */
  }
}
   b53c2:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b53c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      resetMode();
   b53ca:	f7ff bf61 	b.w	b5290 <_Z9resetModev>
      } else if (tagInfo[1] == 1) {
   b53ce:	2c01      	cmp	r4, #1
   b53d0:	d1f7      	bne.n	b53c2 <loop+0x66>
        Serial.println("Modo SUCRE detectado");
   b53d2:	f003 f987 	bl	b86e4 <_Z16_fetch_usbserialv>
   b53d6:	4958      	ldr	r1, [pc, #352]	; (b5538 <loop+0x1dc>)
   b53d8:	e7ef      	b.n	b53ba <loop+0x5e>
      if (tagInfo[0] >= 2)
   b53da:	2b01      	cmp	r3, #1
   b53dc:	4d57      	ldr	r5, [pc, #348]	; (b553c <loop+0x1e0>)
   b53de:	dd08      	ble.n	b53f2 <loop+0x96>
          sensor = tagInfo[0];
   b53e0:	602b      	str	r3, [r5, #0]
      pitidoBlink0();
   b53e2:	f7ff fc05 	bl	b4bf0 <_Z12pitidoBlink0v>
          displayPrint0(sensor); // Actualizamos la información de la pantalla con el nuevo sensor.
   b53e6:	6828      	ldr	r0, [r5, #0]
   b53e8:	f7ff f91e 	bl	b4628 <_Z13displayPrint0i>
          tagInfo[0] = -1;
   b53ec:	f04f 33ff 	mov.w	r3, #4294967295
   b53f0:	6023      	str	r3, [r4, #0]
      if (sensor != -1)
   b53f2:	6828      	ldr	r0, [r5, #0]
   b53f4:	1c45      	adds	r5, r0, #1
   b53f6:	4d52      	ldr	r5, [pc, #328]	; (b5540 <loop+0x1e4>)
   b53f8:	d021      	beq.n	b543e <loop+0xe2>
          valor = leerSensor0(sensor);
   b53fa:	f7fe fec9 	bl	b4190 <_Z11leerSensor0i>
   b53fe:	4b51      	ldr	r3, [pc, #324]	; (b5544 <loop+0x1e8>)
   b5400:	7018      	strb	r0, [r3, #0]
          if (tagInfo[0] == 0 || tagInfo[0] == 1)
   b5402:	6823      	ldr	r3, [r4, #0]
   b5404:	2b01      	cmp	r3, #1
   b5406:	d808      	bhi.n	b541a <loop+0xbe>
            actuador = tagInfo[0];
   b5408:	602b      	str	r3, [r5, #0]
   b540a:	f7ff fbf1 	bl	b4bf0 <_Z12pitidoBlink0v>
            displayPrint0(actuador); // Actualizamos la información de la pantalla con el nuevo sensor.
   b540e:	6828      	ldr	r0, [r5, #0]
   b5410:	f7ff f90a 	bl	b4628 <_Z13displayPrint0i>
            tagInfo[0] = -1;
   b5414:	f04f 33ff 	mov.w	r3, #4294967295
   b5418:	6023      	str	r3, [r4, #0]
      if (actuador != -1)
   b541a:	6828      	ldr	r0, [r5, #0]
   b541c:	1c41      	adds	r1, r0, #1
   b541e:	d004      	beq.n	b542a <loop+0xce>
          activarActuador(actuador, tagInfo[1], valor);
   b5420:	4b48      	ldr	r3, [pc, #288]	; (b5544 <loop+0x1e8>)
   b5422:	6861      	ldr	r1, [r4, #4]
   b5424:	781a      	ldrb	r2, [r3, #0]
   b5426:	f7ff fc53 	bl	b4cd0 <_Z15activarActuadoriib>
      display.display();
   b542a:	483f      	ldr	r0, [pc, #252]	; (b5528 <loop+0x1cc>)
   b542c:	f001 ffdc 	bl	b73e8 <_ZN16Adafruit_SSD13067displayEv>
      tagInfo[0] = -1;
   b5430:	f04f 33ff 	mov.w	r3, #4294967295
   b5434:	6023      	str	r3, [r4, #0]
}
   b5436:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ledApagar0();
   b543e:	f7ff fb39 	bl	b4ab4 <_Z10ledApagar0v>
   b5442:	e7ea      	b.n	b541a <loop+0xbe>
    if (tagInfo[0] != -1)
   b5444:	3301      	adds	r3, #1
   b5446:	4f40      	ldr	r7, [pc, #256]	; (b5548 <loop+0x1ec>)
   b5448:	f000 810c 	beq.w	b5664 <loop+0x308>
      int deviceID = tagInfo[2];
   b544c:	68a5      	ldr	r5, [r4, #8]
      Serial.print("Ejecutando tag --> ");
   b544e:	f8df 8120 	ldr.w	r8, [pc, #288]	; b5570 <loop+0x214>
   b5452:	f8df 9114 	ldr.w	r9, [pc, #276]	; b5568 <loop+0x20c>
   b5456:	4e3d      	ldr	r6, [pc, #244]	; (b554c <loop+0x1f0>)
   b5458:	f8df a108 	ldr.w	sl, [pc, #264]	; b5564 <loop+0x208>
   b545c:	f003 f942 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5460:	493b      	ldr	r1, [pc, #236]	; (b5550 <loop+0x1f4>)
   b5462:	f002 ff2b 	bl	b82bc <_ZN5Print5printEPKc>
      switch (tagInfo[0]) {
   b5466:	6823      	ldr	r3, [r4, #0]
   b5468:	2b06      	cmp	r3, #6
   b546a:	f200 8231 	bhi.w	b58d0 <loop+0x574>
   b546e:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5472:	0007      	.short	0x0007
   b5474:	01710083 	.word	0x01710083
   b5478:	01c1019a 	.word	0x01c1019a
   b547c:	01ec01db 	.word	0x01ec01db
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b5480:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b5574 <loop+0x218>
        Serial.println("Sensor detectado");
   b5484:	f003 f92e 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5488:	4932      	ldr	r1, [pc, #200]	; (b5554 <loop+0x1f8>)
   b548a:	f002 ff2a 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b548e:	f89a 3000 	ldrb.w	r3, [sl]
   b5492:	b393      	cbz	r3, b54fa <loop+0x19e>
   b5494:	f8d8 2000 	ldr.w	r2, [r8]
   b5498:	f8d9 3000 	ldr.w	r3, [r9]
   b549c:	429a      	cmp	r2, r3
   b549e:	d13c      	bne.n	b551a <loop+0x1be>
   b54a0:	4628      	mov	r0, r5
   b54a2:	f7ff fe29 	bl	b50f8 <_Z13isValidSensori>
   b54a6:	b328      	cbz	r0, b54f4 <loop+0x198>
          int puerto = isNewSensor(deviceID);
   b54a8:	4628      	mov	r0, r5
   b54aa:	f7ff fe51 	bl	b5150 <_Z11isNewSensori>
          if (puerto == -1)
   b54ae:	1c42      	adds	r2, r0, #1
   b54b0:	d105      	bne.n	b54be <loop+0x162>
            puerto = asignarPuerto(deviceID, tagInfo[1]);
   b54b2:	6861      	ldr	r1, [r4, #4]
   b54b4:	4628      	mov	r0, r5
   b54b6:	f7ff fa95 	bl	b49e4 <_Z13asignarPuertoii>
          if (puerto != -1) {
   b54ba:	1c43      	adds	r3, r0, #1
   b54bc:	d021      	beq.n	b5502 <loop+0x1a6>
            newSensor.bloque = numBloque;
   b54be:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b54c2:	f8d8 c000 	ldr.w	ip, [r8]
            newSensor.condicion = tagInfo[3];
   b54c6:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b54c8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b54cc:	fb01 f10e 	mul.w	r1, r1, lr
   b54d0:	eb01 120c 	add.w	r2, r1, ip, lsl #4
   b54d4:	4432      	add	r2, r6
   b54d6:	e9c2 5301 	strd	r5, r3, [r2, #4]
   b54da:	e9c2 e003 	strd	lr, r0, [r2, #12]
            bloques[numBloque].numSensores++;
   b54de:	5872      	ldr	r2, [r6, r1]
   b54e0:	3201      	adds	r2, #1
   b54e2:	5072      	str	r2, [r6, r1]
            numSensoresBloque++;
   b54e4:	f10c 0201 	add.w	r2, ip, #1
   b54e8:	f8c8 2000 	str.w	r2, [r8]
   return id == 0;
   b54ec:	e9d4 6100 	ldrd	r6, r1, [r4]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b54f0:	9000      	str	r0, [sp, #0]
   b54f2:	e087      	b.n	b5604 <loop+0x2a8>
          if ((!IF_pasado)) {
   b54f4:	f89a 3000 	ldrb.w	r3, [sl]
   b54f8:	b94b      	cbnz	r3, b550e <loop+0x1b2>
            Serial.println("Se esperaba IF tag");
   b54fa:	f003 f8f3 	bl	b86e4 <_Z16_fetch_usbserialv>
   b54fe:	4916      	ldr	r1, [pc, #88]	; (b5558 <loop+0x1fc>)
   b5500:	e002      	b.n	b5508 <loop+0x1ac>
            Serial.println("Error Puerto");
   b5502:	f003 f8ef 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5506:	4915      	ldr	r1, [pc, #84]	; (b555c <loop+0x200>)
        Serial.println("ID Tag incorrecta");
   b5508:	f002 feeb 	bl	b82e2 <_ZN5Print7printlnEPKc>
        break;
   b550c:	e083      	b.n	b5616 <loop+0x2ba>
          if (numSensoresBloque != numCondicionalesBloque) {
   b550e:	f8d8 2000 	ldr.w	r2, [r8]
   b5512:	f8d9 3000 	ldr.w	r3, [r9]
   b5516:	429a      	cmp	r2, r3
   b5518:	d07d      	beq.n	b5616 <loop+0x2ba>
              Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b551a:	f003 f8e3 	bl	b86e4 <_Z16_fetch_usbserialv>
   b551e:	4910      	ldr	r1, [pc, #64]	; (b5560 <loop+0x204>)
   b5520:	e7f2      	b.n	b5508 <loop+0x1ac>
   b5522:	bf00      	nop
   b5524:	2003e6a0 	.word	0x2003e6a0
   b5528:	2003e618 	.word	0x2003e618
   b552c:	000b9c4a 	.word	0x000b9c4a
   b5530:	2003df54 	.word	0x2003df54
   b5534:	000b9c5d 	.word	0x000b9c5d
   b5538:	000b9c71 	.word	0x000b9c71
   b553c:	2003df50 	.word	0x2003df50
   b5540:	2003df40 	.word	0x2003df40
   b5544:	2003e6c1 	.word	0x2003e6c1
   b5548:	2003df48 	.word	0x2003df48
   b554c:	2003e000 	.word	0x2003e000
   b5550:	000b9c86 	.word	0x000b9c86
   b5554:	000b9c9a 	.word	0x000b9c9a
   b5558:	000b9cb8 	.word	0x000b9cb8
   b555c:	000b9cab 	.word	0x000b9cab
   b5560:	000b9ccb 	.word	0x000b9ccb
   b5564:	2003e6b0 	.word	0x2003e6b0
   b5568:	2003e6b4 	.word	0x2003e6b4
   b556c:	2003dfec 	.word	0x2003dfec
   b5570:	2003e6b8 	.word	0x2003e6b8
   b5574:	2003dfe9 	.word	0x2003dfe9
        Serial.println("Actuador detectado");
   b5578:	f003 f8b4 	bl	b86e4 <_Z16_fetch_usbserialv>
   b557c:	49bc      	ldr	r1, [pc, #752]	; (b5870 <loop+0x514>)
   b557e:	f002 feb0 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5582:	4bbc      	ldr	r3, [pc, #752]	; (b5874 <loop+0x518>)
   b5584:	f893 b000 	ldrb.w	fp, [r3]
   b5588:	f1bb 0f00 	cmp.w	fp, #0
   b558c:	f000 80a7 	beq.w	b56de <loop+0x382>
   b5590:	4bb9      	ldr	r3, [pc, #740]	; (b5878 <loop+0x51c>)
        int deviceState = tagInfo[3];
   b5592:	f8d4 900c 	ldr.w	r9, [r4, #12]
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5596:	781b      	ldrb	r3, [r3, #0]
   b5598:	4629      	mov	r1, r5
   b559a:	4648      	mov	r0, r9
   b559c:	2b00      	cmp	r3, #0
   b559e:	f040 809b 	bne.w	b56d8 <loop+0x37c>
   b55a2:	f7ff fdfd 	bl	b51a0 <_Z15isValidActuadorii>
   b55a6:	2800      	cmp	r0, #0
   b55a8:	f000 8099 	beq.w	b56de <loop+0x382>
          int puerto = isNewActuador(deviceID);
   b55ac:	4628      	mov	r0, r5
   b55ae:	f7ff fe2f 	bl	b5210 <_Z13isNewActuadori>
          if (puerto == -1)
   b55b2:	1c41      	adds	r1, r0, #1
   b55b4:	d105      	bne.n	b55c2 <loop+0x266>
            puerto = asignarPuerto(deviceID, tagInfo[1]);
   b55b6:	6861      	ldr	r1, [r4, #4]
   b55b8:	4628      	mov	r0, r5
   b55ba:	f7ff fa13 	bl	b49e4 <_Z13asignarPuertoii>
          if (puerto != -1) {
   b55be:	1c42      	adds	r2, r0, #1
   b55c0:	d029      	beq.n	b5616 <loop+0x2ba>
            newActuador.bloque = numBloque;
   b55c2:	f8d7 c000 	ldr.w	ip, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b55c6:	f8da 1000 	ldr.w	r1, [sl]
   b55ca:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b55ce:	fb02 f20c 	mul.w	r2, r2, ip
   b55d2:	2314      	movs	r3, #20
   b55d4:	fb03 2301 	mla	r3, r3, r1, r2
   b55d8:	4433      	add	r3, r6
   b55da:	e9c3 c054 	strd	ip, r0, [r3, #336]	; 0x150
            bloques[numBloque].numActuadores++;
   b55de:	4416      	add	r6, r2
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b55e0:	f04f 0c01 	mov.w	ip, #1
   b55e4:	f883 c158 	strb.w	ip, [r3, #344]	; 0x158
   b55e8:	e9c3 5952 	strd	r5, r9, [r3, #328]	; 0x148
            bloques[numBloque].numActuadores++;
   b55ec:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
            numActuadoresBloque++;
   b55f0:	4461      	add	r1, ip
            bloques[numBloque].numActuadores++;
   b55f2:	4463      	add	r3, ip
   b55f4:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
            numActuadoresBloque++;
   b55f8:	f8ca 1000 	str.w	r1, [sl]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b55fc:	464b      	mov	r3, r9
   b55fe:	e9d4 6100 	ldrd	r6, r1, [r4]
   b5602:	9000      	str	r0, [sp, #0]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b5604:	fab1 f181 	clz	r1, r1
   b5608:	fab6 f086 	clz	r0, r6
   b560c:	462a      	mov	r2, r5
   b560e:	0949      	lsrs	r1, r1, #5
   b5610:	0940      	lsrs	r0, r0, #5
   b5612:	f7ff f857 	bl	b46c4 <_Z12displayPrintbbiii>
      Serial.println("Fin Tag");
   b5616:	f003 f865 	bl	b86e4 <_Z16_fetch_usbserialv>
   b561a:	4998      	ldr	r1, [pc, #608]	; (b587c <loop+0x520>)
   b561c:	f002 fe61 	bl	b82e2 <_ZN5Print7printlnEPKc>
      Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b5620:	f003 f860 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5624:	4996      	ldr	r1, [pc, #600]	; (b5880 <loop+0x524>)
   b5626:	f002 fe5c 	bl	b82e2 <_ZN5Print7printlnEPKc>
      Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b562a:	f003 f85b 	bl	b86e4 <_Z16_fetch_usbserialv>
   b562e:	683a      	ldr	r2, [r7, #0]
   b5630:	4b94      	ldr	r3, [pc, #592]	; (b5884 <loop+0x528>)
   b5632:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5636:	fb01 3302 	mla	r3, r1, r2, r3
   b563a:	4993      	ldr	r1, [pc, #588]	; (b5888 <loop+0x52c>)
   b563c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b5640:	9302      	str	r3, [sp, #8]
   b5642:	4b92      	ldr	r3, [pc, #584]	; (b588c <loop+0x530>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	9301      	str	r3, [sp, #4]
   b5648:	4b91      	ldr	r3, [pc, #580]	; (b5890 <loop+0x534>)
   b564a:	681b      	ldr	r3, [r3, #0]
   b564c:	9300      	str	r3, [sp, #0]
   b564e:	f8d8 3000 	ldr.w	r3, [r8]
   b5652:	f7fe fd47 	bl	b40e4 <_ZN5Print8printlnfEPKcz>
      tagInfo[0] = -1;
   b5656:	f04f 33ff 	mov.w	r3, #4294967295
   b565a:	6023      	str	r3, [r4, #0]
      Serial.println();
   b565c:	f003 f842 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5660:	f002 fe33 	bl	b82ca <_ZN5Print7printlnEv>
    display.display();
   b5664:	488b      	ldr	r0, [pc, #556]	; (b5894 <loop+0x538>)
   b5666:	f001 febf 	bl	b73e8 <_ZN16Adafruit_SSD13067displayEv>
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b566a:	683b      	ldr	r3, [r7, #0]
   b566c:	2b00      	cmp	r3, #0
   b566e:	f040 8133 	bne.w	b58d8 <loop+0x57c>
   b5672:	4b80      	ldr	r3, [pc, #512]	; (b5874 <loop+0x518>)
   b5674:	781b      	ldrb	r3, [r3, #0]
   b5676:	2b00      	cmp	r3, #0
   b5678:	f43f aedd 	beq.w	b5436 <loop+0xda>
      Bloque bloque = bloques[0];
   b567c:	acb9      	add	r4, sp, #740	; 0x2e4
   b567e:	4981      	ldr	r1, [pc, #516]	; (b5884 <loop+0x528>)
   b5680:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5684:	4620      	mov	r0, r4
   b5686:	f003 ffd5 	bl	b9634 <memcpy>
      bool evaluacion = makeEvaluate(bloque);
   b568a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b568e:	a9bd      	add	r1, sp, #756	; 0x2f4
   b5690:	4668      	mov	r0, sp
   b5692:	f003 ffcf 	bl	b9634 <memcpy>
   b5696:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b569a:	f7fe ff9b 	bl	b45d4 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 0);
   b569e:	2100      	movs	r1, #0
   b56a0:	f7ff fe2a 	bl	b52f8 <_Z18ejecutarEvaluacionbi>
    if ( numBloque==1 && THEN_pasado ) {
   b56a4:	683c      	ldr	r4, [r7, #0]
   b56a6:	2c01      	cmp	r4, #1
   b56a8:	f47f aec5 	bne.w	b5436 <loop+0xda>
   b56ac:	4b71      	ldr	r3, [pc, #452]	; (b5874 <loop+0x518>)
   b56ae:	781b      	ldrb	r3, [r3, #0]
   b56b0:	2b00      	cmp	r3, #0
   b56b2:	f43f aec0 	beq.w	b5436 <loop+0xda>
      bool evaluacion = makeEvaluate(bloques[1]);
   b56b6:	4978      	ldr	r1, [pc, #480]	; (b5898 <loop+0x53c>)
   b56b8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b56bc:	4668      	mov	r0, sp
   b56be:	f003 ffb9 	bl	b9634 <memcpy>
   b56c2:	4b76      	ldr	r3, [pc, #472]	; (b589c <loop+0x540>)
   b56c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56c6:	f7fe ff85 	bl	b45d4 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 1);
   b56ca:	4621      	mov	r1, r4
}
   b56cc:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b56d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ejecutarEvaluacion(evaluacion, 1);
   b56d4:	f7ff be10 	b.w	b52f8 <_Z18ejecutarEvaluacionbi>
        } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b56d8:	f7ff fd62 	bl	b51a0 <_Z15isValidActuadorii>
   b56dc:	b958      	cbnz	r0, b56f6 <loop+0x39a>
          if (!IF_pasado) {
   b56de:	4b70      	ldr	r3, [pc, #448]	; (b58a0 <loop+0x544>)
   b56e0:	781b      	ldrb	r3, [r3, #0]
   b56e2:	2b00      	cmp	r3, #0
   b56e4:	f43f af09 	beq.w	b54fa <loop+0x19e>
          } else if (!THEN_pasado) {
   b56e8:	f1bb 0f00 	cmp.w	fp, #0
   b56ec:	d12e      	bne.n	b574c <loop+0x3f0>
            Serial.println("Se esperaba THEN tag");
   b56ee:	f002 fff9 	bl	b86e4 <_Z16_fetch_usbserialv>
   b56f2:	496c      	ldr	r1, [pc, #432]	; (b58a4 <loop+0x548>)
   b56f4:	e708      	b.n	b5508 <loop+0x1ac>
          int puerto = isNewActuador(deviceID);
   b56f6:	4628      	mov	r0, r5
   b56f8:	f7ff fd8a 	bl	b5210 <_Z13isNewActuadori>
          if (puerto == -1)
   b56fc:	1c43      	adds	r3, r0, #1
   b56fe:	d105      	bne.n	b570c <loop+0x3b0>
            puerto = asignarPuerto(deviceID, tagInfo[1]);
   b5700:	6861      	ldr	r1, [r4, #4]
   b5702:	4628      	mov	r0, r5
   b5704:	f7ff f96e 	bl	b49e4 <_Z13asignarPuertoii>
          if (puerto != -1) {
   b5708:	1c41      	adds	r1, r0, #1
   b570a:	d084      	beq.n	b5616 <loop+0x2ba>
            newActuador.bloque = numBloque;
   b570c:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5710:	f8da 1000 	ldr.w	r1, [sl]
            newActuador.condicion = tagInfo[3];
   b5714:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5716:	f44f 7c3b 	mov.w	ip, #748	; 0x2ec
   b571a:	fb0c fc0e 	mul.w	ip, ip, lr
   b571e:	2214      	movs	r2, #20
   b5720:	fb02 c201 	mla	r2, r2, r1, ip
   b5724:	4432      	add	r2, r6
   b5726:	f502 79a4 	add.w	r9, r2, #328	; 0x148
   b572a:	e9c2 5352 	strd	r5, r3, [r2, #328]	; 0x148
   b572e:	e9c2 e054 	strd	lr, r0, [r2, #336]	; 0x150
            bloques[numBloque].numActuadores++;
   b5732:	4466      	add	r6, ip
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5734:	2200      	movs	r2, #0
   b5736:	f889 2010 	strb.w	r2, [r9, #16]
            bloques[numBloque].numActuadores++;
   b573a:	f8d6 2144 	ldr.w	r2, [r6, #324]	; 0x144
            numActuadoresBloque++;
   b573e:	3101      	adds	r1, #1
            bloques[numBloque].numActuadores++;
   b5740:	3201      	adds	r2, #1
   b5742:	f8c6 2144 	str.w	r2, [r6, #324]	; 0x144
            numActuadoresBloque++;
   b5746:	f8ca 1000 	str.w	r1, [sl]
   b574a:	e6cf      	b.n	b54ec <loop+0x190>
            Serial.println("Invalid Actuador");
   b574c:	f002 ffca 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5750:	4955      	ldr	r1, [pc, #340]	; (b58a8 <loop+0x54c>)
   b5752:	e6d9      	b.n	b5508 <loop+0x1ac>
        Serial.println("IF detectado");
   b5754:	f002 ffc6 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5758:	4954      	ldr	r1, [pc, #336]	; (b58ac <loop+0x550>)
   b575a:	f002 fdc2 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b575e:	683b      	ldr	r3, [r7, #0]
   b5760:	1c5a      	adds	r2, r3, #1
   b5762:	d004      	beq.n	b576e <loop+0x412>
   b5764:	b9db      	cbnz	r3, b579e <loop+0x442>
   b5766:	f8da 2000 	ldr.w	r2, [sl]
   b576a:	2a00      	cmp	r2, #0
   b576c:	dd17      	ble.n	b579e <loop+0x442>
          IF_pasado = true;
   b576e:	4a4c      	ldr	r2, [pc, #304]	; (b58a0 <loop+0x544>)
   b5770:	2101      	movs	r1, #1
   b5772:	7011      	strb	r1, [r2, #0]
          THEN_pasado = false;
   b5774:	493f      	ldr	r1, [pc, #252]	; (b5874 <loop+0x518>)
   b5776:	2200      	movs	r2, #0
   b5778:	700a      	strb	r2, [r1, #0]
          ELSE_pasado = false;
   b577a:	493f      	ldr	r1, [pc, #252]	; (b5878 <loop+0x51c>)
          numCondicionalesBloque = 0;
   b577c:	f8c9 2000 	str.w	r2, [r9]
          numBloque++;
   b5780:	3301      	adds	r3, #1
          ELSE_pasado = false;
   b5782:	700a      	strb	r2, [r1, #0]
          bloques[numBloque] = nuevoBloque;
   b5784:	f44f 713b 	mov.w	r1, #748	; 0x2ec
          numBloque++;
   b5788:	603b      	str	r3, [r7, #0]
          bloques[numBloque] = nuevoBloque;
   b578a:	434b      	muls	r3, r1
   b578c:	18f1      	adds	r1, r6, r3
   b578e:	50f2      	str	r2, [r6, r3]
          numSensoresBloque = 0;
   b5790:	f8c8 2000 	str.w	r2, [r8]
          numActuadoresBloque = 0;
   b5794:	f8ca 2000 	str.w	r2, [sl]
          bloques[numBloque] = nuevoBloque;
   b5798:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
   b579c:	e73b      	b.n	b5616 <loop+0x2ba>
          Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b579e:	f002 ffa1 	bl	b86e4 <_Z16_fetch_usbserialv>
   b57a2:	4943      	ldr	r1, [pc, #268]	; (b58b0 <loop+0x554>)
   b57a4:	e6b0      	b.n	b5508 <loop+0x1ac>
        Serial.println("AND/OR detectado");
   b57a6:	f002 ff9d 	bl	b86e4 <_Z16_fetch_usbserialv>
   b57aa:	4942      	ldr	r1, [pc, #264]	; (b58b4 <loop+0x558>)
   b57ac:	f002 fd99 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if ( (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b57b0:	f8d9 3000 	ldr.w	r3, [r9]
   b57b4:	f8d8 2000 	ldr.w	r2, [r8]
   b57b8:	4293      	cmp	r3, r2
   b57ba:	da12      	bge.n	b57e2 <loop+0x486>
   b57bc:	f8da 2000 	ldr.w	r2, [sl]
   b57c0:	b97a      	cbnz	r2, b57e2 <loop+0x486>
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b57c2:	683a      	ldr	r2, [r7, #0]
   b57c4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b57c8:	fb01 6602 	mla	r6, r1, r2, r6
   b57cc:	6862      	ldr	r2, [r4, #4]
   b57ce:	441e      	add	r6, r3
   b57d0:	3a00      	subs	r2, #0
   b57d2:	bf18      	it	ne
   b57d4:	2201      	movne	r2, #1
          numCondicionalesBloque++;
   b57d6:	3301      	adds	r3, #1
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b57d8:	f886 22d8 	strb.w	r2, [r6, #728]	; 0x2d8
          numCondicionalesBloque++;
   b57dc:	f8c9 3000 	str.w	r3, [r9]
   b57e0:	e719      	b.n	b5616 <loop+0x2ba>
          if (!IF_pasado) {
   b57e2:	4b2f      	ldr	r3, [pc, #188]	; (b58a0 <loop+0x544>)
   b57e4:	781b      	ldrb	r3, [r3, #0]
   b57e6:	2b00      	cmp	r3, #0
   b57e8:	f43f ae87 	beq.w	b54fa <loop+0x19e>
          Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b57ec:	f002 ff7a 	bl	b86e4 <_Z16_fetch_usbserialv>
   b57f0:	4931      	ldr	r1, [pc, #196]	; (b58b8 <loop+0x55c>)
   b57f2:	e689      	b.n	b5508 <loop+0x1ac>
        Serial.println("THEN detectado");
   b57f4:	f002 ff76 	bl	b86e4 <_Z16_fetch_usbserialv>
   b57f8:	4930      	ldr	r1, [pc, #192]	; (b58bc <loop+0x560>)
   b57fa:	f002 fd72 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if ((numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b57fe:	f8d8 3000 	ldr.w	r3, [r8]
   b5802:	2b00      	cmp	r3, #0
   b5804:	dd07      	ble.n	b5816 <loop+0x4ba>
   b5806:	f8d9 2000 	ldr.w	r2, [r9]
   b580a:	4293      	cmp	r3, r2
   b580c:	dd03      	ble.n	b5816 <loop+0x4ba>
          THEN_pasado = true;
   b580e:	4b19      	ldr	r3, [pc, #100]	; (b5874 <loop+0x518>)
          ELSE_pasado = true;
   b5810:	2201      	movs	r2, #1
   b5812:	701a      	strb	r2, [r3, #0]
   b5814:	e6ff      	b.n	b5616 <loop+0x2ba>
          if (!IF_pasado) {
   b5816:	4b22      	ldr	r3, [pc, #136]	; (b58a0 <loop+0x544>)
   b5818:	781b      	ldrb	r3, [r3, #0]
   b581a:	2b00      	cmp	r3, #0
   b581c:	f43f ae6d 	beq.w	b54fa <loop+0x19e>
          Serial.println("Numero de sensores infucientes");
   b5820:	f002 ff60 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5824:	4926      	ldr	r1, [pc, #152]	; (b58c0 <loop+0x564>)
   b5826:	e66f      	b.n	b5508 <loop+0x1ac>
        Serial.println("ELSE detectado");
   b5828:	f002 ff5c 	bl	b86e4 <_Z16_fetch_usbserialv>
   b582c:	4925      	ldr	r1, [pc, #148]	; (b58c4 <loop+0x568>)
   b582e:	f002 fd58 	bl	b82e2 <_ZN5Print7printlnEPKc>
        if (numActuadoresBloque > 0) {
   b5832:	f8da 3000 	ldr.w	r3, [sl]
   b5836:	2b00      	cmp	r3, #0
   b5838:	dd01      	ble.n	b583e <loop+0x4e2>
          ELSE_pasado = true;
   b583a:	4b0f      	ldr	r3, [pc, #60]	; (b5878 <loop+0x51c>)
   b583c:	e7e8      	b.n	b5810 <loop+0x4b4>
          if (!IF_pasado) {
   b583e:	4b18      	ldr	r3, [pc, #96]	; (b58a0 <loop+0x544>)
   b5840:	781b      	ldrb	r3, [r3, #0]
   b5842:	2b00      	cmp	r3, #0
   b5844:	f47f aee7 	bne.w	b5616 <loop+0x2ba>
   b5848:	e657      	b.n	b54fa <loop+0x19e>
        if (tagInfo[1] == 0 ) {
   b584a:	6865      	ldr	r5, [r4, #4]
   b584c:	b94d      	cbnz	r5, b5862 <loop+0x506>
          Serial.println("Modo KIDS detectado");
   b584e:	f002 ff49 	bl	b86e4 <_Z16_fetch_usbserialv>
   b5852:	491d      	ldr	r1, [pc, #116]	; (b58c8 <loop+0x56c>)
          Serial.println("Modo SUCRE detectado");
   b5854:	f002 fd45 	bl	b82e2 <_ZN5Print7printlnEPKc>
          MODE = 1;
   b5858:	f8cb 5000 	str.w	r5, [fp]
        resetMode();
   b585c:	f7ff fd18 	bl	b5290 <_Z9resetModev>
        break;
   b5860:	e6d9      	b.n	b5616 <loop+0x2ba>
        } else if (tagInfo[1] == 1) {
   b5862:	2d01      	cmp	r5, #1
   b5864:	d1fa      	bne.n	b585c <loop+0x500>
          Serial.println("Modo SUCRE detectado");
   b5866:	f002 ff3d 	bl	b86e4 <_Z16_fetch_usbserialv>
   b586a:	4918      	ldr	r1, [pc, #96]	; (b58cc <loop+0x570>)
   b586c:	e7f2      	b.n	b5854 <loop+0x4f8>
   b586e:	bf00      	nop
   b5870:	000b9d00 	.word	0x000b9d00
   b5874:	2003dffc 	.word	0x2003dffc
   b5878:	2003dfe8 	.word	0x2003dfe8
   b587c:	000b9e2a 	.word	0x000b9e2a
   b5880:	000b9e32 	.word	0x000b9e32
   b5884:	2003e000 	.word	0x2003e000
   b5888:	000b9e67 	.word	0x000b9e67
   b588c:	2003e6b0 	.word	0x2003e6b0
   b5890:	2003e6b4 	.word	0x2003e6b4
   b5894:	2003e618 	.word	0x2003e618
   b5898:	2003e2fc 	.word	0x2003e2fc
   b589c:	2003e2ec 	.word	0x2003e2ec
   b58a0:	2003dfe9 	.word	0x2003dfe9
   b58a4:	000b9d13 	.word	0x000b9d13
   b58a8:	000b9d28 	.word	0x000b9d28
   b58ac:	000b9d39 	.word	0x000b9d39
   b58b0:	000b9d46 	.word	0x000b9d46
   b58b4:	000b9d98 	.word	0x000b9d98
   b58b8:	000b9da9 	.word	0x000b9da9
   b58bc:	000b9ddb 	.word	0x000b9ddb
   b58c0:	000b9dea 	.word	0x000b9dea
   b58c4:	000b9e09 	.word	0x000b9e09
   b58c8:	000b9c5d 	.word	0x000b9c5d
   b58cc:	000b9c71 	.word	0x000b9c71
        Serial.println("ID Tag incorrecta");
   b58d0:	f002 ff08 	bl	b86e4 <_Z16_fetch_usbserialv>
   b58d4:	4902      	ldr	r1, [pc, #8]	; (b58e0 <loop+0x584>)
   b58d6:	e617      	b.n	b5508 <loop+0x1ac>
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b58d8:	2b01      	cmp	r3, #1
   b58da:	f43f aecf 	beq.w	b567c <loop+0x320>
   b58de:	e5aa      	b.n	b5436 <loop+0xda>
   b58e0:	000b9e18 	.word	0x000b9e18

000b58e4 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
}
   b58e4:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b58e6:	4c19      	ldr	r4, [pc, #100]	; (b594c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x68>)
Adafruit_SSD1306 display(-1);
   b58e8:	4819      	ldr	r0, [pc, #100]	; (b5950 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x6c>)
   b58ea:	f04f 31ff 	mov.w	r1, #4294967295
   b58ee:	f001 fa1f 	bl	b6d30 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b58f2:	4918      	ldr	r1, [pc, #96]	; (b5954 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x70>)
   b58f4:	4620      	mov	r0, r4
   b58f6:	f002 fc26 	bl	b8146 <_ZN6StringC1EPK19__FlashStringHelper>
   b58fa:	4916      	ldr	r1, [pc, #88]	; (b5954 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x70>)
   b58fc:	f104 0010 	add.w	r0, r4, #16
   b5900:	f002 fc21 	bl	b8146 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b5904:	2208      	movs	r2, #8
   b5906:	2110      	movs	r1, #16
   b5908:	4813      	ldr	r0, [pc, #76]	; (b5958 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x74>)
   b590a:	f000 fc46 	bl	b619a <_ZN7MFRC522C1Ehh>
ChainableLED leds(led_PIN1, led_PIN2, NUM_LEDS);
   b590e:	2305      	movs	r3, #5
   b5910:	461a      	mov	r2, r3
   b5912:	2104      	movs	r1, #4
   b5914:	4811      	ldr	r0, [pc, #68]	; (b595c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x78>)
   b5916:	f001 fe01 	bl	b751c <_ZN12ChainableLEDC1Ehhh>
ChainableLED ledObject = ChainableLED(0, 1, 5);
   b591a:	2305      	movs	r3, #5
   b591c:	2201      	movs	r2, #1
   b591e:	2100      	movs	r1, #0
   b5920:	480f      	ldr	r0, [pc, #60]	; (b5960 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x7c>)
   b5922:	f001 fdfb 	bl	b751c <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5926:	4b0f      	ldr	r3, [pc, #60]	; (b5964 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x80>)
    SleepResult() {}
   b5928:	4a0f      	ldr	r2, [pc, #60]	; (b5968 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x84>)
   b592a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b592c:	2400      	movs	r4, #0
   b592e:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5932:	2002      	movs	r0, #2
   b5934:	f002 f99a 	bl	b7c6c <set_system_mode>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b5938:	4b0c      	ldr	r3, [pc, #48]	; (b596c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x88>)
   b593a:	601c      	str	r4, [r3, #0]
   b593c:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b5940:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b5944:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b5948:	bd10      	pop	{r4, pc}
   b594a:	bf00      	nop
   b594c:	2003e668 	.word	0x2003e668
   b5950:	2003e618 	.word	0x2003e618
   b5954:	000b9e8a 	.word	0x000b9e8a
   b5958:	2003e6a0 	.word	0x2003e6a0
   b595c:	2003e698 	.word	0x2003e698
   b5960:	2003e690 	.word	0x2003e690
   b5964:	2003dff0 	.word	0x2003dff0
   b5968:	ffff0000 	.word	0xffff0000
   b596c:	2003e000 	.word	0x2003e000

000b5970 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5970:	4770      	bx	lr

000b5972 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5972:	b510      	push	{r4, lr}
  }
   b5974:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5976:	4604      	mov	r4, r0
  }
   b5978:	f7fe fb8f 	bl	b409a <_ZdlPvj>
   b597c:	4620      	mov	r0, r4
   b597e:	bd10      	pop	{r4, pc}

000b5980 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5980:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5982:	4604      	mov	r4, r0
   b5984:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5986:	7922      	ldrb	r2, [r4, #4]
   b5988:	68a3      	ldr	r3, [r4, #8]
   b598a:	b132      	cbz	r2, b599a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b598c:	b9a3      	cbnz	r3, b59b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b598e:	490b      	ldr	r1, [pc, #44]	; (b59bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5990:	b002      	add	sp, #8
   b5992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5996:	f002 bc91 	b.w	b82bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b599a:	4a09      	ldr	r2, [pc, #36]	; (b59c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b599c:	7b26      	ldrb	r6, [r4, #12]
   b599e:	4d09      	ldr	r5, [pc, #36]	; (b59c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b59a0:	4909      	ldr	r1, [pc, #36]	; (b59c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b59a2:	7b64      	ldrb	r4, [r4, #13]
   b59a4:	2e01      	cmp	r6, #1
   b59a6:	bf18      	it	ne
   b59a8:	4629      	movne	r1, r5
   b59aa:	e9cd 1400 	strd	r1, r4, [sp]
   b59ae:	4907      	ldr	r1, [pc, #28]	; (b59cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b59b0:	f7fe fb8a 	bl	b40c8 <_ZN5Print6printfEPKcz>
  }
   b59b4:	b002      	add	sp, #8
   b59b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b59b8:	4a05      	ldr	r2, [pc, #20]	; (b59d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b59ba:	e7ef      	b.n	b599c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b59bc:	000b9e9d 	.word	0x000b9e9d
   b59c0:	000b9bfa 	.word	0x000b9bfa
   b59c4:	000b9e99 	.word	0x000b9e99
   b59c8:	000b9e95 	.word	0x000b9e95
   b59cc:	000b9eb3 	.word	0x000b9eb3
   b59d0:	000b9e8c 	.word	0x000b9e8c

000b59d4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b59d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59d8:	b085      	sub	sp, #20
   b59da:	461f      	mov	r7, r3
   b59dc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b59e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b59e4:	eba8 0902 	sub.w	r9, r8, r2
   b59e8:	eba7 0a01 	sub.w	sl, r7, r1
   b59ec:	f1b9 0f00 	cmp.w	r9, #0
   b59f0:	bfb8      	it	lt
   b59f2:	f1c9 0900 	rsblt	r9, r9, #0
   b59f6:	f1ba 0f00 	cmp.w	sl, #0
   b59fa:	bfb8      	it	lt
   b59fc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5a00:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5a02:	4683      	mov	fp, r0
   b5a04:	460c      	mov	r4, r1
   b5a06:	4615      	mov	r5, r2
    if (steep) {
   b5a08:	dd04      	ble.n	b5a14 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5a0a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5a0c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5a0e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5a10:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5a12:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5a14:	42bc      	cmp	r4, r7
   b5a16:	dd05      	ble.n	b5a24 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5a18:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5a1a:	4645      	mov	r5, r8
   b5a1c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5a1e:	4622      	mov	r2, r4
   b5a20:	463c      	mov	r4, r7
   b5a22:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5a24:	1b3e      	subs	r6, r7, r4
   b5a26:	b2b2      	uxth	r2, r6
   b5a28:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5a2a:	eba8 0205 	sub.w	r2, r8, r5
   b5a2e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5a32:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5a36:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5a3a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5a3e:	4545      	cmp	r5, r8
   b5a40:	bfb4      	ite	lt
   b5a42:	2201      	movlt	r2, #1
   b5a44:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5a48:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5a4a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5a4c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5a4e:	42bc      	cmp	r4, r7
   b5a50:	dc1c      	bgt.n	b5a8c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5a52:	f8db 2000 	ldr.w	r2, [fp]
   b5a56:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5a58:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5a5a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5a5e:	bfc7      	ittee	gt
   b5a60:	4629      	movgt	r1, r5
   b5a62:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5a64:	462a      	movle	r2, r5
   b5a66:	4621      	movle	r1, r4
   b5a68:	4658      	mov	r0, fp
   b5a6a:	47c0      	blx	r8
        }
        err -= dy;
   b5a6c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5a6e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5a70:	1ab6      	subs	r6, r6, r2
   b5a72:	b2b1      	uxth	r1, r6
   b5a74:	b236      	sxth	r6, r6
        if (err < 0) {
   b5a76:	2e00      	cmp	r6, #0
   b5a78:	da05      	bge.n	b5a86 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5a7a:	9a02      	ldr	r2, [sp, #8]
   b5a7c:	4415      	add	r5, r2
            err += dx;
   b5a7e:	9a00      	ldr	r2, [sp, #0]
   b5a80:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5a82:	b22d      	sxth	r5, r5
            err += dx;
   b5a84:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5a86:	3401      	adds	r4, #1
   b5a88:	b224      	sxth	r4, r4
   b5a8a:	e7e0      	b.n	b5a4e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5a8c:	b005      	add	sp, #20
   b5a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5a92 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5a92:	4770      	bx	lr

000b5a94 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5a94:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5a96:	6804      	ldr	r4, [r0, #0]
   b5a98:	6924      	ldr	r4, [r4, #16]
   b5a9a:	46a4      	mov	ip, r4
}
   b5a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5aa0:	4760      	bx	ip

000b5aa2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5aa2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5aa4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5aa6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5aaa:	9502      	str	r5, [sp, #8]
   b5aac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5aae:	46a4      	mov	ip, r4
}
   b5ab0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5ab2:	4760      	bx	ip

000b5ab4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5ab4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5ab6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5ab8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5abc:	9502      	str	r5, [sp, #8]
   b5abe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5ac0:	46a4      	mov	ip, r4
}
   b5ac2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5ac4:	4760      	bx	ip

000b5ac6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5ac6:	b470      	push	{r4, r5, r6}
   b5ac8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5acc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5ad0:	6804      	ldr	r4, [r0, #0]
   b5ad2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5ad6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5ad8:	46a4      	mov	ip, r4
}
   b5ada:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5adc:	4760      	bx	ip

000b5ade <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5ade:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5ae2:	461c      	mov	r4, r3
    startWrite();
   b5ae4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5ae6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5aea:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5aec:	4605      	mov	r5, r0
   b5aee:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5af0:	3c01      	subs	r4, #1
   b5af2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5af4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5af6:	b224      	sxth	r4, r4
    startWrite();
   b5af8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5afa:	682b      	ldr	r3, [r5, #0]
   b5afc:	f8cd 8004 	str.w	r8, [sp, #4]
   b5b00:	9400      	str	r4, [sp, #0]
   b5b02:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5b04:	4628      	mov	r0, r5
   b5b06:	463b      	mov	r3, r7
   b5b08:	4632      	mov	r2, r6
   b5b0a:	4639      	mov	r1, r7
   b5b0c:	47a0      	blx	r4
    endWrite();
   b5b0e:	682b      	ldr	r3, [r5, #0]
   b5b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b12:	4628      	mov	r0, r5
}
   b5b14:	b002      	add	sp, #8
   b5b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5b1a:	4718      	bx	r3

000b5b1c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b20:	461d      	mov	r5, r3
    startWrite();
   b5b22:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5b24:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5b28:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5b2a:	4604      	mov	r4, r0
   b5b2c:	4617      	mov	r7, r2
   b5b2e:	460e      	mov	r6, r1
    startWrite();
   b5b30:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5b32:	e9cd 7800 	strd	r7, r8, [sp]
   b5b36:	6822      	ldr	r2, [r4, #0]
   b5b38:	1e6b      	subs	r3, r5, #1
   b5b3a:	4433      	add	r3, r6
   b5b3c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5b3e:	4620      	mov	r0, r4
   b5b40:	b21b      	sxth	r3, r3
   b5b42:	463a      	mov	r2, r7
   b5b44:	4631      	mov	r1, r6
   b5b46:	47a8      	blx	r5
    endWrite();
   b5b48:	6823      	ldr	r3, [r4, #0]
   b5b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b4c:	4620      	mov	r0, r4
}
   b5b4e:	b002      	add	sp, #8
   b5b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5b54:	4718      	bx	r3

000b5b56 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5b5a:	461e      	mov	r6, r3
    startWrite();
   b5b5c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5b5e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5b62:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5b64:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5b68:	460c      	mov	r4, r1
   b5b6a:	4605      	mov	r5, r0
   b5b6c:	4617      	mov	r7, r2
    startWrite();
   b5b6e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5b70:	4426      	add	r6, r4
   b5b72:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5b74:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5b76:	da0b      	bge.n	b5b90 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5b78:	f8cd 8000 	str.w	r8, [sp]
   b5b7c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5b80:	4621      	mov	r1, r4
   b5b82:	464b      	mov	r3, r9
   b5b84:	463a      	mov	r2, r7
   b5b86:	4628      	mov	r0, r5
   b5b88:	3401      	adds	r4, #1
   b5b8a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5b8c:	b224      	sxth	r4, r4
   b5b8e:	e7f0      	b.n	b5b72 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b92:	4628      	mov	r0, r5
}
   b5b94:	b002      	add	sp, #8
   b5b96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5b9a:	4718      	bx	r3

000b5b9c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5b9c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5b9e:	6802      	ldr	r2, [r0, #0]
   b5ba0:	9101      	str	r1, [sp, #4]
   b5ba2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5ba6:	9100      	str	r1, [sp, #0]
   b5ba8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5baa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5bae:	2200      	movs	r2, #0
   b5bb0:	4611      	mov	r1, r2
   b5bb2:	47a0      	blx	r4
}
   b5bb4:	b002      	add	sp, #8
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5bbc:	4299      	cmp	r1, r3
        uint16_t color) {
   b5bbe:	4616      	mov	r6, r2
   b5bc0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5bc4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5bc8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5bca:	4680      	mov	r8, r0
   b5bcc:	460d      	mov	r5, r1
   b5bce:	461c      	mov	r4, r3
    if(x0 == x1){
   b5bd0:	d113      	bne.n	b5bfa <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5bd2:	42be      	cmp	r6, r7
   b5bd4:	bfc8      	it	gt
   b5bd6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5bd8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5bdc:	bfc4      	itt	gt
   b5bde:	463e      	movgt	r6, r7
   b5be0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5be2:	1c7b      	adds	r3, r7, #1
   b5be4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5be6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5be8:	b21b      	sxth	r3, r3
   b5bea:	4632      	mov	r2, r6
   b5bec:	4629      	mov	r1, r5
   b5bee:	4640      	mov	r0, r8
   b5bf0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5bf2:	b003      	add	sp, #12
   b5bf4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5bf8:	4760      	bx	ip
    } else if(y0 == y1){
   b5bfa:	42be      	cmp	r6, r7
   b5bfc:	d10a      	bne.n	b5c14 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5bfe:	4299      	cmp	r1, r3
   b5c00:	bfc2      	ittt	gt
   b5c02:	460b      	movgt	r3, r1
   b5c04:	4625      	movgt	r5, r4
   b5c06:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5c08:	1c63      	adds	r3, r4, #1
   b5c0a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5c0e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5c10:	1b5b      	subs	r3, r3, r5
   b5c12:	e7e9      	b.n	b5be8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5c14:	6953      	ldr	r3, [r2, #20]
   b5c16:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5c18:	e9cd 7900 	strd	r7, r9, [sp]
   b5c1c:	f8d8 3000 	ldr.w	r3, [r8]
   b5c20:	4640      	mov	r0, r8
   b5c22:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5c24:	4632      	mov	r2, r6
   b5c26:	4623      	mov	r3, r4
   b5c28:	4629      	mov	r1, r5
   b5c2a:	47b8      	blx	r7
        endWrite();
   b5c2c:	f8d8 3000 	ldr.w	r3, [r8]
   b5c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c32:	4640      	mov	r0, r8
}
   b5c34:	b003      	add	sp, #12
   b5c36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5c3a:	4718      	bx	r3

000b5c3c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c40:	461d      	mov	r5, r3
    startWrite();
   b5c42:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5c44:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5c48:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5c4a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5c4e:	4604      	mov	r4, r0
   b5c50:	460f      	mov	r7, r1
   b5c52:	4616      	mov	r6, r2
    startWrite();
   b5c54:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5c56:	6823      	ldr	r3, [r4, #0]
   b5c58:	f8cd 8000 	str.w	r8, [sp]
   b5c5c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5c60:	4632      	mov	r2, r6
   b5c62:	462b      	mov	r3, r5
   b5c64:	4639      	mov	r1, r7
   b5c66:	4620      	mov	r0, r4
   b5c68:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5c6a:	6823      	ldr	r3, [r4, #0]
   b5c6c:	f8cd 8000 	str.w	r8, [sp]
   b5c70:	f109 32ff 	add.w	r2, r9, #4294967295
   b5c74:	4432      	add	r2, r6
   b5c76:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	462b      	mov	r3, r5
   b5c7e:	4620      	mov	r0, r4
   b5c80:	b212      	sxth	r2, r2
   b5c82:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5c84:	6823      	ldr	r3, [r4, #0]
   b5c86:	f8cd 8000 	str.w	r8, [sp]
   b5c8a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5c8e:	4632      	mov	r2, r6
   b5c90:	464b      	mov	r3, r9
   b5c92:	4639      	mov	r1, r7
   b5c94:	4620      	mov	r0, r4
   b5c96:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5c98:	1e6b      	subs	r3, r5, #1
   b5c9a:	19d9      	adds	r1, r3, r7
   b5c9c:	6823      	ldr	r3, [r4, #0]
   b5c9e:	f8cd 8000 	str.w	r8, [sp]
   b5ca2:	6a1d      	ldr	r5, [r3, #32]
   b5ca4:	4620      	mov	r0, r4
   b5ca6:	464b      	mov	r3, r9
   b5ca8:	4632      	mov	r2, r6
   b5caa:	b209      	sxth	r1, r1
   b5cac:	47a8      	blx	r5
    endWrite();
   b5cae:	6823      	ldr	r3, [r4, #0]
   b5cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cb2:	4620      	mov	r0, r4
}
   b5cb4:	b002      	add	sp, #8
   b5cb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5cba:	4718      	bx	r3

000b5cbc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5cbc:	4770      	bx	lr

000b5cbe <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5cbe:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5cc2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5cc6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5cc8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5cca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5cce:	bf59      	ittee	pl
   b5cd0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5cd2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5cd4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5cd6:	81c3      	strhmi	r3, [r0, #14]
}
   b5cd8:	4770      	bx	lr
	...

000b5cdc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5cdc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5cde:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5ce0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5ce2:	4a07      	ldr	r2, [pc, #28]	; (b5d00 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5ce4:	4d07      	ldr	r5, [pc, #28]	; (b5d04 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5ce6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5ce8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5cea:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5cec:	f04f 31ff 	mov.w	r1, #4294967295
   b5cf0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5cf4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5cf6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5cf8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5cfa:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5cfc:	6204      	str	r4, [r0, #32]
}
   b5cfe:	bd30      	pop	{r4, r5, pc}
   b5d00:	01000101 	.word	0x01000101
   b5d04:	000ba3d8 	.word	0x000ba3d8

000b5d08 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d0c:	b089      	sub	sp, #36	; 0x24
   b5d0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5d12:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d14:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5d18:	9304      	str	r3, [sp, #16]
   b5d1a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5d1e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5d20:	9305      	str	r3, [sp, #20]
   b5d22:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5d26:	4604      	mov	r4, r0
    startWrite();
   b5d28:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5d2a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5d2e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5d32:	bf48      	it	mi
   b5d34:	f108 020e 	addmi.w	r2, r8, #14
   b5d38:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5d3c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5d3e:	4635      	mov	r5, r6
   b5d40:	9b03      	ldr	r3, [sp, #12]
   b5d42:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5d44:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5d48:	189a      	adds	r2, r3, r2
   b5d4a:	9b05      	ldr	r3, [sp, #20]
   b5d4c:	428b      	cmp	r3, r1
   b5d4e:	b212      	sxth	r2, r2
   b5d50:	dd27      	ble.n	b5da2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5d52:	9b04      	ldr	r3, [sp, #16]
   b5d54:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5d56:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5d5a:	9306      	str	r3, [sp, #24]
   b5d5c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5d60:	4580      	cmp	r8, r0
   b5d62:	fa1f f189 	uxth.w	r1, r9
   b5d66:	dd17      	ble.n	b5d98 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5d68:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5d6a:	bf05      	ittet	eq
   b5d6c:	9b06      	ldreq	r3, [sp, #24]
   b5d6e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5d70:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5d72:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5d74:	bf18      	it	ne
   b5d76:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5d78:	062b      	lsls	r3, r5, #24
   b5d7a:	d50a      	bpl.n	b5d92 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5d7c:	9b02      	ldr	r3, [sp, #8]
   b5d7e:	6820      	ldr	r0, [r4, #0]
   b5d80:	9207      	str	r2, [sp, #28]
   b5d82:	4419      	add	r1, r3
   b5d84:	6983      	ldr	r3, [r0, #24]
   b5d86:	b209      	sxth	r1, r1
   b5d88:	461f      	mov	r7, r3
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	4653      	mov	r3, sl
   b5d8e:	47b8      	blx	r7
   b5d90:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5d92:	f109 0901 	add.w	r9, r9, #1
   b5d96:	e7e1      	b.n	b5d5c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5d98:	9b01      	ldr	r3, [sp, #4]
   b5d9a:	3301      	adds	r3, #1
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	445e      	add	r6, fp
   b5da0:	e7ce      	b.n	b5d40 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5da2:	6823      	ldr	r3, [r4, #0]
   b5da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5da6:	4620      	mov	r0, r4
}
   b5da8:	b009      	add	sp, #36	; 0x24
   b5daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5dae:	4718      	bx	r3

000b5db0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5db4:	ed2d 8b02 	vpush	{d8}
   b5db8:	b091      	sub	sp, #68	; 0x44
   b5dba:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5dbc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5dbe:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5dc2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5dc6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5dca:	9103      	str	r1, [sp, #12]
   b5dcc:	461f      	mov	r7, r3
   b5dce:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5dd2:	9304      	str	r3, [sp, #16]
   b5dd4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5dd6:	2a00      	cmp	r2, #0
   b5dd8:	f040 80c5 	bne.w	b5f66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5ddc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5de0:	428b      	cmp	r3, r1
   b5de2:	f340 814c 	ble.w	b607e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5de6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5dea:	42b3      	cmp	r3, r6
   b5dec:	f340 8147 	ble.w	b607e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5df0:	2306      	movs	r3, #6
   b5df2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5df6:	2b00      	cmp	r3, #0
   b5df8:	f340 8141 	ble.w	b607e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5dfc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5e00:	2b00      	cmp	r3, #0
   b5e02:	f340 813c 	ble.w	b607e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5e06:	7f03      	ldrb	r3, [r0, #28]
   b5e08:	b91b      	cbnz	r3, b5e12 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5e0a:	2faf      	cmp	r7, #175	; 0xaf
   b5e0c:	bf84      	itt	hi
   b5e0e:	3701      	addhi	r7, #1
   b5e10:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5e12:	f8db 3000 	ldr.w	r3, [fp]
   b5e16:	4658      	mov	r0, fp
   b5e18:	695b      	ldr	r3, [r3, #20]
   b5e1a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e1c:	2205      	movs	r2, #5
   b5e1e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5e20:	2200      	movs	r2, #0
   b5e22:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e24:	4a98      	ldr	r2, [pc, #608]	; (b6088 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5e26:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5e2a:	18d3      	adds	r3, r2, r3
   b5e2c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5e2e:	b2b3      	uxth	r3, r6
   b5e30:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5e32:	9a05      	ldr	r2, [sp, #20]
   b5e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5e36:	5c9b      	ldrb	r3, [r3, r2]
   b5e38:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e3a:	b2ab      	uxth	r3, r5
   b5e3c:	930b      	str	r3, [sp, #44]	; 0x2c
   b5e3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5e42:	9308      	str	r3, [sp, #32]
   b5e44:	9b03      	ldr	r3, [sp, #12]
   b5e46:	fb02 f905 	mul.w	r9, r2, r5
   b5e4a:	fa19 f983 	uxtah	r9, r9, r3
   b5e4e:	fa0f f389 	sxth.w	r3, r9
   b5e52:	ee08 3a10 	vmov	s16, r3
   b5e56:	2308      	movs	r3, #8
   b5e58:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5e5a:	9b03      	ldr	r3, [sp, #12]
   b5e5c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5e60:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5e64:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5e68:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5e6a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5e6e:	07d2      	lsls	r2, r2, #31
   b5e70:	d552      	bpl.n	b5f18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5e72:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5e74:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5e78:	d13e      	bne.n	b5ef8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5e7a:	2c01      	cmp	r4, #1
   b5e7c:	d13c      	bne.n	b5ef8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5e7e:	699b      	ldr	r3, [r3, #24]
   b5e80:	9906      	ldr	r1, [sp, #24]
   b5e82:	461f      	mov	r7, r3
   b5e84:	9b04      	ldr	r3, [sp, #16]
   b5e86:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5e88:	b212      	sxth	r2, r2
   b5e8a:	4651      	mov	r1, sl
   b5e8c:	4658      	mov	r0, fp
   b5e8e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5e90:	f109 0301 	add.w	r3, r9, #1
   b5e94:	fa4f f983 	sxtb.w	r9, r3
   b5e98:	9b07      	ldr	r3, [sp, #28]
   b5e9a:	085b      	lsrs	r3, r3, #1
   b5e9c:	9307      	str	r3, [sp, #28]
   b5e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5ea0:	3b01      	subs	r3, #1
   b5ea2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5ea6:	930a      	str	r3, [sp, #40]	; 0x28
   b5ea8:	d1de      	bne.n	b5e68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5eaa:	9f05      	ldr	r7, [sp, #20]
   b5eac:	3701      	adds	r7, #1
   b5eae:	b27b      	sxtb	r3, r7
   b5eb0:	9305      	str	r3, [sp, #20]
   b5eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5eb4:	3b01      	subs	r3, #1
   b5eb6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5eba:	9309      	str	r3, [sp, #36]	; 0x24
   b5ebc:	d1b9      	bne.n	b5e32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5ebe:	9b04      	ldr	r3, [sp, #16]
   b5ec0:	4543      	cmp	r3, r8
   b5ec2:	d00f      	beq.n	b5ee4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5ec4:	2d01      	cmp	r5, #1
   b5ec6:	f8db 3000 	ldr.w	r3, [fp]
   b5eca:	d13b      	bne.n	b5f44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5ecc:	2c01      	cmp	r4, #1
   b5ece:	d139      	bne.n	b5f44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5ed0:	9908      	ldr	r1, [sp, #32]
   b5ed2:	f8cd 8000 	str.w	r8, [sp]
   b5ed6:	3105      	adds	r1, #5
   b5ed8:	6a1c      	ldr	r4, [r3, #32]
   b5eda:	4632      	mov	r2, r6
   b5edc:	2308      	movs	r3, #8
   b5ede:	b209      	sxth	r1, r1
   b5ee0:	4658      	mov	r0, fp
   b5ee2:	47a0      	blx	r4
        endWrite();
   b5ee4:	f8db 3000 	ldr.w	r3, [fp]
   b5ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5eea:	4658      	mov	r0, fp
}
   b5eec:	b011      	add	sp, #68	; 0x44
   b5eee:	ecbd 8b02 	vpop	{d8}
   b5ef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5ef6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5ef8:	9906      	ldr	r1, [sp, #24]
   b5efa:	fb14 f202 	smulbb	r2, r4, r2
   b5efe:	440a      	add	r2, r1
   b5f00:	9904      	ldr	r1, [sp, #16]
   b5f02:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f04:	9400      	str	r4, [sp, #0]
   b5f06:	69db      	ldr	r3, [r3, #28]
   b5f08:	ee18 1a10 	vmov	r1, s16
   b5f0c:	461f      	mov	r7, r3
   b5f0e:	b212      	sxth	r2, r2
   b5f10:	462b      	mov	r3, r5
   b5f12:	4658      	mov	r0, fp
   b5f14:	47b8      	blx	r7
   b5f16:	e7bb      	b.n	b5e90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5f18:	9a04      	ldr	r2, [sp, #16]
   b5f1a:	4542      	cmp	r2, r8
   b5f1c:	d0b8      	beq.n	b5e90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5f1e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5f20:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5f24:	d107      	bne.n	b5f36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5f26:	2c01      	cmp	r4, #1
   b5f28:	d105      	bne.n	b5f36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5f2a:	699b      	ldr	r3, [r3, #24]
   b5f2c:	9906      	ldr	r1, [sp, #24]
   b5f2e:	461f      	mov	r7, r3
   b5f30:	440a      	add	r2, r1
   b5f32:	4643      	mov	r3, r8
   b5f34:	e7a8      	b.n	b5e88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f36:	9906      	ldr	r1, [sp, #24]
   b5f38:	f8cd 8004 	str.w	r8, [sp, #4]
   b5f3c:	fb14 f202 	smulbb	r2, r4, r2
   b5f40:	440a      	add	r2, r1
   b5f42:	e7df      	b.n	b5f04 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5f44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f46:	f8cd 8004 	str.w	r8, [sp, #4]
   b5f4a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5f4e:	9a08      	ldr	r2, [sp, #32]
   b5f50:	00e4      	lsls	r4, r4, #3
   b5f52:	440a      	add	r2, r1
   b5f54:	4611      	mov	r1, r2
   b5f56:	9400      	str	r4, [sp, #0]
   b5f58:	69dc      	ldr	r4, [r3, #28]
   b5f5a:	4632      	mov	r2, r6
   b5f5c:	462b      	mov	r3, r5
   b5f5e:	b209      	sxth	r1, r1
   b5f60:	4658      	mov	r0, fp
   b5f62:	47a0      	blx	r4
        endWrite();
   b5f64:	e7be      	b.n	b5ee4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5f66:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5f68:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5f6a:	6812      	ldr	r2, [r2, #0]
   b5f6c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5f6e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5f70:	b2ff      	uxtb	r7, r7
   b5f72:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5f76:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5f7a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5f7c:	789a      	ldrb	r2, [r3, #2]
   b5f7e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5f80:	78da      	ldrb	r2, [r3, #3]
   b5f82:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5f84:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5f86:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5f8a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5f8e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5f90:	d801      	bhi.n	b5f96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5f92:	2c01      	cmp	r4, #1
   b5f94:	d957      	bls.n	b6046 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5f96:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5f9a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5f9c:	fa0f f38a 	sxth.w	r3, sl
   b5fa0:	9307      	str	r3, [sp, #28]
        startWrite();
   b5fa2:	f8db 3000 	ldr.w	r3, [fp]
   b5fa6:	4658      	mov	r0, fp
   b5fa8:	695b      	ldr	r3, [r3, #20]
   b5faa:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fac:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5fae:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fb2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5fb4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5fb8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5fba:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5fbc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5fc0:	429f      	cmp	r7, r3
   b5fc2:	d28f      	bcs.n	b5ee4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fc4:	9b07      	ldr	r3, [sp, #28]
   b5fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5fc8:	443b      	add	r3, r7
   b5fca:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5fce:	2200      	movs	r2, #0
   b5fd0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5fd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fd4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5fd6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fda:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5fde:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fe2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5fe6:	9905      	ldr	r1, [sp, #20]
   b5fe8:	4291      	cmp	r1, r2
   b5fea:	d241      	bcs.n	b6070 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5fec:	1c5a      	adds	r2, r3, #1
   b5fee:	b2d2      	uxtb	r2, r2
   b5ff0:	075b      	lsls	r3, r3, #29
   b5ff2:	920d      	str	r2, [sp, #52]	; 0x34
   b5ff4:	d107      	bne.n	b6006 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5ff6:	9b06      	ldr	r3, [sp, #24]
   b5ff8:	9906      	ldr	r1, [sp, #24]
   b5ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5ffc:	3301      	adds	r3, #1
   b5ffe:	b29b      	uxth	r3, r3
   b6000:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6004:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6006:	f019 0f80 	tst.w	r9, #128	; 0x80
   b600a:	d012      	beq.n	b6032 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b600c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b600e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6012:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6016:	d11a      	bne.n	b604e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6018:	2c01      	cmp	r4, #1
   b601a:	d118      	bne.n	b604e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b601c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b601e:	699b      	ldr	r3, [r3, #24]
   b6020:	4411      	add	r1, r2
   b6022:	9a05      	ldr	r2, [sp, #20]
   b6024:	4411      	add	r1, r2
   b6026:	461e      	mov	r6, r3
   b6028:	4652      	mov	r2, sl
   b602a:	9b04      	ldr	r3, [sp, #16]
   b602c:	b209      	sxth	r1, r1
   b602e:	4658      	mov	r0, fp
   b6030:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6032:	9e05      	ldr	r6, [sp, #20]
   b6034:	3601      	adds	r6, #1
   b6036:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6038:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b603c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b603e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b6042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6044:	e7ce      	b.n	b5fe4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6046:	2300      	movs	r3, #0
   b6048:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b604c:	e7a9      	b.n	b5fa2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b604e:	9805      	ldr	r0, [sp, #20]
   b6050:	9a08      	ldr	r2, [sp, #32]
   b6052:	4402      	add	r2, r0
   b6054:	fb02 1105 	mla	r1, r2, r5, r1
   b6058:	9a04      	ldr	r2, [sp, #16]
   b605a:	e9cd 4200 	strd	r4, r2, [sp]
   b605e:	69db      	ldr	r3, [r3, #28]
   b6060:	ee18 2a10 	vmov	r2, s16
   b6064:	461e      	mov	r6, r3
   b6066:	b209      	sxth	r1, r1
   b6068:	462b      	mov	r3, r5
   b606a:	4658      	mov	r0, fp
   b606c:	47b0      	blx	r6
   b606e:	e7e0      	b.n	b6032 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6070:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b6072:	3701      	adds	r7, #1
   b6074:	4498      	add	r8, r3
   b6076:	fa5f f888 	uxtb.w	r8, r8
   b607a:	b2ff      	uxtb	r7, r7
   b607c:	e79f      	b.n	b5fbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b607e:	b011      	add	sp, #68	; 0x44
   b6080:	ecbd 8b02 	vpop	{d8}
   b6084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6088:	000b9ed0 	.word	0x000b9ed0

000b608c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b608c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b608e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6090:	b085      	sub	sp, #20
   b6092:	4604      	mov	r4, r0
   b6094:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6096:	2a00      	cmp	r2, #0
   b6098:	d134      	bne.n	b6104 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b609a:	290a      	cmp	r1, #10
   b609c:	d108      	bne.n	b60b0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b609e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b60a0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b60a2:	7e42      	ldrb	r2, [r0, #25]
   b60a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b60a8:	8263      	strh	r3, [r4, #18]
}
   b60aa:	2001      	movs	r0, #1
   b60ac:	b005      	add	sp, #20
   b60ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b60b0:	290d      	cmp	r1, #13
   b60b2:	d0fa      	beq.n	b60aa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b60b4:	7ee1      	ldrb	r1, [r4, #27]
   b60b6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b60b8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b60ba:	b171      	cbz	r1, b60da <_ZN12Adafruit_GFX5writeEh+0x4e>
   b60bc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b60c0:	2106      	movs	r1, #6
   b60c2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b60c6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b60ca:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b60cc:	bfc1      	itttt	gt
   b60ce:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b60d2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b60d4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b60d8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b60da:	8ae2      	ldrh	r2, [r4, #22]
   b60dc:	9201      	str	r2, [sp, #4]
   b60de:	8aa2      	ldrh	r2, [r4, #20]
   b60e0:	9200      	str	r2, [sp, #0]
   b60e2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b60e6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b60ea:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b60ee:	4620      	mov	r0, r4
   b60f0:	f7ff fe5e 	bl	b5db0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b60f4:	7e23      	ldrb	r3, [r4, #24]
   b60f6:	8a22      	ldrh	r2, [r4, #16]
   b60f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b60fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6100:	8223      	strh	r3, [r4, #16]
   b6102:	e7d2      	b.n	b60aa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6104:	290a      	cmp	r1, #10
   b6106:	d107      	bne.n	b6118 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6108:	2300      	movs	r3, #0
   b610a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b610c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b610e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6110:	8a43      	ldrh	r3, [r0, #18]
   b6112:	fb01 3302 	mla	r3, r1, r2, r3
   b6116:	e7c7      	b.n	b60a8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6118:	290d      	cmp	r1, #13
   b611a:	d0c6      	beq.n	b60aa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b611c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b611e:	42a9      	cmp	r1, r5
   b6120:	d3c3      	bcc.n	b60aa <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6122:	7a51      	ldrb	r1, [r2, #9]
   b6124:	4299      	cmp	r1, r3
   b6126:	d3c0      	bcc.n	b60aa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6128:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b612a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b612c:	b2ed      	uxtb	r5, r5
   b612e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6132:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6134:	b328      	cbz	r0, b6182 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6136:	78e9      	ldrb	r1, [r5, #3]
   b6138:	b319      	cbz	r1, b6182 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b613a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b613c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b613e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6140:	b191      	cbz	r1, b6168 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b6142:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6146:	4408      	add	r0, r1
   b6148:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b614c:	fb06 1100 	mla	r1, r6, r0, r1
   b6150:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6154:	4281      	cmp	r1, r0
   b6156:	dd07      	ble.n	b6168 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6158:	2000      	movs	r0, #0
   b615a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b615c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6160:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6162:	fb02 1207 	mla	r2, r2, r7, r1
   b6166:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6168:	8ae2      	ldrh	r2, [r4, #22]
   b616a:	9201      	str	r2, [sp, #4]
   b616c:	8aa2      	ldrh	r2, [r4, #20]
   b616e:	9200      	str	r2, [sp, #0]
   b6170:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6174:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6178:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b617c:	4620      	mov	r0, r4
   b617e:	f7ff fe17 	bl	b5db0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6182:	7929      	ldrb	r1, [r5, #4]
   b6184:	7e22      	ldrb	r2, [r4, #24]
   b6186:	8a23      	ldrh	r3, [r4, #16]
   b6188:	fb01 3302 	mla	r3, r1, r2, r3
   b618c:	e7b8      	b.n	b6100 <_ZN12Adafruit_GFX5writeEh+0x74>

000b618e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b618e:	2901      	cmp	r1, #1
   b6190:	bf38      	it	cc
   b6192:	2101      	movcc	r1, #1
   b6194:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6196:	7641      	strb	r1, [r0, #25]
}
   b6198:	4770      	bx	lr

000b619a <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b619a:	b538      	push	{r3, r4, r5, lr}
   b619c:	4604      	mov	r4, r0
   b619e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b61a0:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b61a2:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b61a4:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b61a6:	f002 fc9d 	bl	b8ae4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b61aa:	7b20      	ldrb	r0, [r4, #12]
   b61ac:	2101      	movs	r1, #1
   b61ae:	f002 fcaa 	bl	b8b06 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b61b2:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b61b4:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b61b6:	2101      	movs	r1, #1
   b61b8:	f002 fc94 	bl	b8ae4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b61bc:	7b60      	ldrb	r0, [r4, #13]
   b61be:	2100      	movs	r1, #0
   b61c0:	f002 fca1 	bl	b8b06 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b61c4:	4620      	mov	r0, r4
   b61c6:	bd38      	pop	{r3, r4, r5, pc}

000b61c8 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b61c8:	3901      	subs	r1, #1
   b61ca:	b2c9      	uxtb	r1, r1
   b61cc:	2908      	cmp	r1, #8
   b61ce:	bf9a      	itte	ls
   b61d0:	4b02      	ldrls	r3, [pc, #8]	; (b61dc <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b61d2:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b61d6:	4802      	ldrhi	r0, [pc, #8]	; (b61e0 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b61d8:	4770      	bx	lr
   b61da:	bf00      	nop
   b61dc:	000ba520 	.word	0x000ba520
   b61e0:	000ba428 	.word	0x000ba428

000b61e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b61e4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b61e6:	4c0b      	ldr	r4, [pc, #44]	; (b6214 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b61e8:	7821      	ldrb	r1, [r4, #0]
   b61ea:	f3bf 8f5b 	dmb	ish
   b61ee:	f011 0101 	ands.w	r1, r1, #1
   b61f2:	d10b      	bne.n	b620c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b61f4:	4620      	mov	r0, r4
   b61f6:	9101      	str	r1, [sp, #4]
   b61f8:	f7fd ff5e 	bl	b40b8 <__cxa_guard_acquire>
   b61fc:	9901      	ldr	r1, [sp, #4]
   b61fe:	b128      	cbz	r0, b620c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6200:	4805      	ldr	r0, [pc, #20]	; (b6218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6202:	f001 fe4b 	bl	b7e9c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6206:	4620      	mov	r0, r4
   b6208:	f7fd ff5b 	bl	b40c2 <__cxa_guard_release>
    }
   b620c:	4802      	ldr	r0, [pc, #8]	; (b6218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b620e:	b002      	add	sp, #8
   b6210:	bd10      	pop	{r4, pc}
   b6212:	bf00      	nop
   b6214:	2003dfdc 	.word	0x2003dfdc
   b6218:	2003dfe0 	.word	0x2003dfe0

000b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b621c:	b507      	push	{r0, r1, r2, lr}
   b621e:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b6220:	f7ff ffe0 	bl	b61e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6224:	9901      	ldr	r1, [sp, #4]
    }
   b6226:	b003      	add	sp, #12
   b6228:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b622c:	f001 bedc 	b.w	b7fe8 <_ZN8SPIClass8transferEh>

000b6230 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b6230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6234:	4607      	mov	r7, r0
   b6236:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b623a:	461e      	mov	r6, r3
	if (count == 0) {
   b623c:	4615      	mov	r5, r2
   b623e:	2a00      	cmp	r2, #0
   b6240:	d042      	beq.n	b62c8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6242:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6246:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6248:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b624c:	2100      	movs	r1, #0
   b624e:	f002 fc5a 	bl	b8b06 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6252:	4648      	mov	r0, r9
   b6254:	f7ff ffe2 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6258:	3d01      	subs	r5, #1
   b625a:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b625c:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b6260:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6264:	fa5f f48b 	uxtb.w	r4, fp
   b6268:	42a5      	cmp	r5, r4
   b626a:	d922      	bls.n	b62b2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b626c:	b9dc      	cbnz	r4, b62a6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b626e:	f1b8 0f00 	cmp.w	r8, #0
   b6272:	d018      	beq.n	b62a6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6274:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6276:	b2d3      	uxtb	r3, r2
   b6278:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b627a:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b627c:	d805      	bhi.n	b628a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b627e:	fa0a f402 	lsl.w	r4, sl, r2
   b6282:	430c      	orrs	r4, r1
   b6284:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6286:	3201      	adds	r2, #1
   b6288:	e7f5      	b.n	b6276 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b628a:	4648      	mov	r0, r9
   b628c:	9101      	str	r1, [sp, #4]
   b628e:	f7ff ffc5 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b6292:	7833      	ldrb	r3, [r6, #0]
   b6294:	9901      	ldr	r1, [sp, #4]
   b6296:	4004      	ands	r4, r0
   b6298:	ea23 0301 	bic.w	r3, r3, r1
   b629c:	431c      	orrs	r4, r3
   b629e:	7034      	strb	r4, [r6, #0]
		index++;
   b62a0:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b62a4:	e7de      	b.n	b6264 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b62a6:	4648      	mov	r0, r9
   b62a8:	f7ff ffb8 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b62ac:	f806 000b 	strb.w	r0, [r6, fp]
   b62b0:	e7f6      	b.n	b62a0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b62b2:	2000      	movs	r0, #0
   b62b4:	f7ff ffb2 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b62b8:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b62ba:	7b38      	ldrb	r0, [r7, #12]
   b62bc:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b62be:	b003      	add	sp, #12
   b62c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b62c4:	f002 bc1f 	b.w	b8b06 <digitalWrite>
} // End PCD_ReadRegister()
   b62c8:	b003      	add	sp, #12
   b62ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b62ce:	b538      	push	{r3, r4, r5, lr}
   b62d0:	460c      	mov	r4, r1
   b62d2:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b62d4:	2100      	movs	r1, #0
   b62d6:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b62d8:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b62dc:	f002 fc13 	bl	b8b06 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b62e0:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b62e4:	f7ff ff9a 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b62e8:	2000      	movs	r0, #0
   b62ea:	f7ff ff97 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b62ee:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b62f0:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b62f2:	7b28      	ldrb	r0, [r5, #12]
   b62f4:	f002 fc07 	bl	b8b06 <digitalWrite>
} // End PCD_ReadRegister()
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd38      	pop	{r3, r4, r5, pc}

000b62fc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b62fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62fe:	460f      	mov	r7, r1
   b6300:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6302:	2100      	movs	r1, #0
   b6304:	7b00      	ldrb	r0, [r0, #12]
								) {
   b6306:	4615      	mov	r5, r2
   b6308:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b630a:	f002 fbfc 	bl	b8b06 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b630e:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b6312:	f7ff ff83 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6316:	4425      	add	r5, r4
   b6318:	42ac      	cmp	r4, r5
   b631a:	d004      	beq.n	b6326 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b631c:	f814 0b01 	ldrb.w	r0, [r4], #1
   b6320:	f7ff ff7c 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6324:	e7f8      	b.n	b6318 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6326:	7b30      	ldrb	r0, [r6, #12]
   b6328:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b632a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b632e:	f002 bbea 	b.w	b8b06 <digitalWrite>

000b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b6332:	b570      	push	{r4, r5, r6, lr}
   b6334:	4604      	mov	r4, r0
   b6336:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6338:	7b00      	ldrb	r0, [r0, #12]
   b633a:	2100      	movs	r1, #0
								) {
   b633c:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b633e:	f002 fbe2 	bl	b8b06 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b6342:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b6346:	f7ff ff69 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b634a:	4628      	mov	r0, r5
   b634c:	f7ff ff66 	bl	b621c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6350:	7b20      	ldrb	r0, [r4, #12]
   b6352:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6358:	f002 bbd5 	b.w	b8b06 <digitalWrite>

000b635c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b635c:	b570      	push	{r4, r5, r6, lr}
   b635e:	4616      	mov	r6, r2
   b6360:	4604      	mov	r4, r0
   b6362:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6364:	f7ff ffb3 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6368:	4330      	orrs	r0, r6
   b636a:	b2c2      	uxtb	r2, r0
   b636c:	4629      	mov	r1, r5
   b636e:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6374:	f7ff bfdd 	b.w	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6378 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6378:	b570      	push	{r4, r5, r6, lr}
   b637a:	4616      	mov	r6, r2
   b637c:	4604      	mov	r4, r0
   b637e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6380:	f7ff ffa5 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6384:	ea20 0006 	bic.w	r0, r0, r6
   b6388:	b2c2      	uxtb	r2, r0
   b638a:	4629      	mov	r1, r5
   b638c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b638e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6392:	f7ff bfce 	b.w	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6396 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b6396:	2208      	movs	r2, #8
   b6398:	2110      	movs	r1, #16
   b639a:	f7ff bfed 	b.w	b6378 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b639e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63a0:	4604      	mov	r4, r0
   b63a2:	4615      	mov	r5, r2
   b63a4:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b63a6:	2200      	movs	r2, #0
   b63a8:	2102      	movs	r1, #2
					 ) {
   b63aa:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b63ac:	f7ff ffc1 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b63b0:	2204      	movs	r2, #4
   b63b2:	210a      	movs	r1, #10
   b63b4:	4620      	mov	r0, r4
   b63b6:	f7ff ffbc 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b63ba:	2280      	movs	r2, #128	; 0x80
   b63bc:	2114      	movs	r1, #20
   b63be:	4620      	mov	r0, r4
   b63c0:	f7ff ffcc 	bl	b635c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b63c4:	462a      	mov	r2, r5
   b63c6:	463b      	mov	r3, r7
   b63c8:	2112      	movs	r1, #18
   b63ca:	4620      	mov	r0, r4
   b63cc:	f7ff ff96 	bl	b62fc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b63d0:	2203      	movs	r2, #3
   b63d2:	2102      	movs	r1, #2
   b63d4:	4620      	mov	r0, r4
   b63d6:	f7ff ffac 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b63da:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b63de:	210a      	movs	r1, #10
   b63e0:	4620      	mov	r0, r4
   b63e2:	f7ff ff74 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b63e6:	0743      	lsls	r3, r0, #29
   b63e8:	d405      	bmi.n	b63f6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b63ea:	3d01      	subs	r5, #1
   b63ec:	b2ad      	uxth	r5, r5
   b63ee:	2d00      	cmp	r5, #0
   b63f0:	d1f5      	bne.n	b63de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b63f2:	2004      	movs	r0, #4
   b63f4:	e00f      	b.n	b6416 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b63f6:	2200      	movs	r2, #0
   b63f8:	2102      	movs	r1, #2
   b63fa:	4620      	mov	r0, r4
   b63fc:	f7ff ff99 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6400:	2144      	movs	r1, #68	; 0x44
   b6402:	4620      	mov	r0, r4
   b6404:	f7ff ff63 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6408:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b640a:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b640c:	4620      	mov	r0, r4
   b640e:	f7ff ff5e 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6412:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b6414:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b6416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6418 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b6418:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b641a:	220f      	movs	r2, #15
   b641c:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b641e:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6420:	f7ff ff87 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b6424:	2032      	movs	r0, #50	; 0x32
   b6426:	f001 ffc7 	bl	b83b8 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b642a:	2102      	movs	r1, #2
   b642c:	4620      	mov	r0, r4
   b642e:	f7ff ff4e 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6432:	06c3      	lsls	r3, r0, #27
   b6434:	d4f9      	bmi.n	b642a <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b6436:	bd10      	pop	{r4, pc}

000b6438 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b6438:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b643a:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b643c:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b643e:	f7ff ff46 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b6442:	f000 0303 	and.w	r3, r0, #3
   b6446:	2b03      	cmp	r3, #3
   b6448:	d008      	beq.n	b645c <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b644a:	f040 0203 	orr.w	r2, r0, #3
   b644e:	b2d2      	uxtb	r2, r2
   b6450:	4620      	mov	r0, r4
   b6452:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b6454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6458:	f7ff bf6b 	b.w	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b645c:	bd10      	pop	{r4, pc}

000b645e <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b645e:	b510      	push	{r4, lr}
   b6460:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b6462:	7b40      	ldrb	r0, [r0, #13]
   b6464:	f002 fb68 	bl	b8b38 <digitalRead>
   b6468:	bb48      	cbnz	r0, b64be <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b646a:	7b60      	ldrb	r0, [r4, #13]
   b646c:	2101      	movs	r1, #1
   b646e:	f002 fb4a 	bl	b8b06 <digitalWrite>
		delay(50);
   b6472:	2032      	movs	r0, #50	; 0x32
   b6474:	f001 ffa0 	bl	b83b8 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6478:	4620      	mov	r0, r4
   b647a:	2280      	movs	r2, #128	; 0x80
   b647c:	2154      	movs	r1, #84	; 0x54
   b647e:	f7ff ff58 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b6482:	4620      	mov	r0, r4
   b6484:	22a9      	movs	r2, #169	; 0xa9
   b6486:	2156      	movs	r1, #86	; 0x56
   b6488:	f7ff ff53 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b648c:	4620      	mov	r0, r4
   b648e:	2203      	movs	r2, #3
   b6490:	2158      	movs	r1, #88	; 0x58
   b6492:	f7ff ff4e 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b6496:	4620      	mov	r0, r4
   b6498:	22e8      	movs	r2, #232	; 0xe8
   b649a:	215a      	movs	r1, #90	; 0x5a
   b649c:	f7ff ff49 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b64a0:	4620      	mov	r0, r4
   b64a2:	2240      	movs	r2, #64	; 0x40
   b64a4:	212a      	movs	r1, #42	; 0x2a
   b64a6:	f7ff ff44 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b64aa:	4620      	mov	r0, r4
   b64ac:	223d      	movs	r2, #61	; 0x3d
   b64ae:	2122      	movs	r1, #34	; 0x22
   b64b0:	f7ff ff3f 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b64b4:	4620      	mov	r0, r4
} // End PCD_Init()
   b64b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b64ba:	f7ff bfbd 	b.w	b6438 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b64be:	4620      	mov	r0, r4
   b64c0:	f7ff ffaa 	bl	b6418 <_ZN7MFRC5229PCD_ResetEv>
   b64c4:	e7d8      	b.n	b6478 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b64c6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b64c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64ca:	b089      	sub	sp, #36	; 0x24
   b64cc:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b64d0:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b64d4:	9203      	str	r2, [sp, #12]
   b64d6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b64da:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b64de:	9204      	str	r2, [sp, #16]
   b64e0:	4604      	mov	r4, r0
   b64e2:	468a      	mov	sl, r1
   b64e4:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b64e6:	f1b9 0f00 	cmp.w	r9, #0
   b64ea:	d03e      	beq.n	b656a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b64ec:	f899 8000 	ldrb.w	r8, [r9]
   b64f0:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b64f2:	2200      	movs	r2, #0
   b64f4:	2102      	movs	r1, #2
   b64f6:	4620      	mov	r0, r4
   b64f8:	f7ff ff1b 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b64fc:	227f      	movs	r2, #127	; 0x7f
   b64fe:	2108      	movs	r1, #8
   b6500:	4620      	mov	r0, r4
   b6502:	f7ff ff16 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6506:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b650a:	2280      	movs	r2, #128	; 0x80
   b650c:	2114      	movs	r1, #20
   b650e:	4620      	mov	r0, r4
   b6510:	f7ff ff24 	bl	b635c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6514:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b6518:	9b05      	ldr	r3, [sp, #20]
   b651a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b651e:	2112      	movs	r1, #18
   b6520:	4620      	mov	r0, r4
   b6522:	f7ff feeb 	bl	b62fc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b6526:	4642      	mov	r2, r8
   b6528:	211a      	movs	r1, #26
   b652a:	4620      	mov	r0, r4
   b652c:	f7ff ff01 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b6530:	4652      	mov	r2, sl
   b6532:	2102      	movs	r1, #2
   b6534:	4620      	mov	r0, r4
   b6536:	f7ff fefc 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b653a:	f1ba 0f0c 	cmp.w	sl, #12
   b653e:	d104      	bne.n	b654a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b6540:	2280      	movs	r2, #128	; 0x80
   b6542:	211a      	movs	r1, #26
   b6544:	4620      	mov	r0, r4
   b6546:	f7ff ff09 	bl	b635c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b654a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b654e:	2108      	movs	r1, #8
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff febc 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b6556:	9b03      	ldr	r3, [sp, #12]
   b6558:	4218      	tst	r0, r3
   b655a:	d108      	bne.n	b656e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b655c:	07c3      	lsls	r3, r0, #31
   b655e:	d402      	bmi.n	b6566 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b6560:	f1b8 0801 	subs.w	r8, r8, #1
   b6564:	d1f3      	bne.n	b654e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b6566:	2004      	movs	r0, #4
   b6568:	e04d      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b656a:	46c8      	mov	r8, r9
   b656c:	e7c0      	b.n	b64f0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b656e:	210c      	movs	r1, #12
   b6570:	4620      	mov	r0, r4
   b6572:	f7ff feac 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6576:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b657a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b657c:	d146      	bne.n	b660c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b657e:	b1dd      	cbz	r5, b65b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b6580:	b1d6      	cbz	r6, b65b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6582:	2114      	movs	r1, #20
   b6584:	4620      	mov	r0, r4
   b6586:	f7ff fea2 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b658a:	7833      	ldrb	r3, [r6, #0]
   b658c:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b658e:	4602      	mov	r2, r0
		if (n > *backLen) {
   b6590:	d33e      	bcc.n	b6610 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b6592:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6594:	462b      	mov	r3, r5
   b6596:	2112      	movs	r1, #18
   b6598:	4620      	mov	r0, r4
   b659a:	f8cd b000 	str.w	fp, [sp]
   b659e:	f7ff fe47 	bl	b6230 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b65a2:	2118      	movs	r1, #24
   b65a4:	4620      	mov	r0, r4
   b65a6:	f7ff fe92 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
   b65aa:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b65ae:	f1b9 0f00 	cmp.w	r9, #0
   b65b2:	d001      	beq.n	b65b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b65b4:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b65b8:	f018 0f08 	tst.w	r8, #8
   b65bc:	d12a      	bne.n	b6614 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b65be:	b35d      	cbz	r5, b6618 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b65c0:	b356      	cbz	r6, b6618 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b65c2:	9b04      	ldr	r3, [sp, #16]
   b65c4:	b343      	cbz	r3, b6618 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b65c6:	7832      	ldrb	r2, [r6, #0]
   b65c8:	2a01      	cmp	r2, #1
   b65ca:	d103      	bne.n	b65d4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b65cc:	2f04      	cmp	r7, #4
   b65ce:	d125      	bne.n	b661c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b65d0:	2009      	movs	r0, #9
   b65d2:	e018      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b65d4:	d922      	bls.n	b661c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b65d6:	bb0f      	cbnz	r7, b661c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b65d8:	3a02      	subs	r2, #2
   b65da:	ab07      	add	r3, sp, #28
   b65dc:	b2d2      	uxtb	r2, r2
   b65de:	4629      	mov	r1, r5
   b65e0:	4620      	mov	r0, r4
   b65e2:	f7ff fedc 	bl	b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b65e6:	2801      	cmp	r0, #1
   b65e8:	d10d      	bne.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b65ea:	7833      	ldrb	r3, [r6, #0]
   b65ec:	441d      	add	r5, r3
   b65ee:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b65f2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b65f6:	429a      	cmp	r2, r3
   b65f8:	d110      	bne.n	b661c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b65fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b65fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b6602:	429a      	cmp	r2, r3
   b6604:	d10a      	bne.n	b661c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b6606:	b009      	add	sp, #36	; 0x24
   b6608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b660c:	2002      	movs	r0, #2
   b660e:	e7fa      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b6610:	2005      	movs	r0, #5
   b6612:	e7f8      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b6614:	2003      	movs	r0, #3
   b6616:	e7f6      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b6618:	2001      	movs	r0, #1
   b661a:	e7f4      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b661c:	2008      	movs	r0, #8
   b661e:	e7f2      	b.n	b6606 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b6620 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b6620:	b510      	push	{r4, lr}
   b6622:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b6624:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b6628:	9405      	str	r4, [sp, #20]
   b662a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b662e:	9404      	str	r4, [sp, #16]
   b6630:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b6632:	9403      	str	r4, [sp, #12]
   b6634:	9c08      	ldr	r4, [sp, #32]
   b6636:	9200      	str	r2, [sp, #0]
   b6638:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b663c:	2230      	movs	r2, #48	; 0x30
   b663e:	460b      	mov	r3, r1
   b6640:	210c      	movs	r1, #12
   b6642:	f7ff ff40 	bl	b64c6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b6646:	b006      	add	sp, #24
   b6648:	bd10      	pop	{r4, pc}

000b664a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b664a:	b570      	push	{r4, r5, r6, lr}
   b664c:	b088      	sub	sp, #32
   b664e:	4606      	mov	r6, r0
   b6650:	461c      	mov	r4, r3
   b6652:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b6656:	4615      	mov	r5, r2
   b6658:	b31a      	cbz	r2, b66a2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b665a:	781b      	ldrb	r3, [r3, #0]
   b665c:	2b01      	cmp	r3, #1
   b665e:	d920      	bls.n	b66a2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6660:	2280      	movs	r2, #128	; 0x80
   b6662:	211c      	movs	r1, #28
   b6664:	f7ff fe88 	bl	b6378 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6668:	2307      	movs	r3, #7
   b666a:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b666e:	2300      	movs	r3, #0
   b6670:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6674:	f10d 031f 	add.w	r3, sp, #31
   b6678:	e9cd 4300 	strd	r4, r3, [sp]
   b667c:	2201      	movs	r2, #1
   b667e:	462b      	mov	r3, r5
   b6680:	f10d 0117 	add.w	r1, sp, #23
   b6684:	4630      	mov	r0, r6
   b6686:	f7ff ffcb 	bl	b6620 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b668a:	2801      	cmp	r0, #1
   b668c:	d107      	bne.n	b669e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b668e:	7823      	ldrb	r3, [r4, #0]
   b6690:	2b02      	cmp	r3, #2
   b6692:	d108      	bne.n	b66a6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6694:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6698:	2b00      	cmp	r3, #0
   b669a:	bf18      	it	ne
   b669c:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b669e:	b008      	add	sp, #32
   b66a0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b66a2:	2005      	movs	r0, #5
   b66a4:	e7fb      	b.n	b669e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b66a6:	2002      	movs	r0, #2
   b66a8:	e7f9      	b.n	b669e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b66aa <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b66aa:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b66ac:	460a      	mov	r2, r1
   b66ae:	2126      	movs	r1, #38	; 0x26
   b66b0:	f7ff bfcb 	b.w	b664a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b66b4 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b66b4:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b66b6:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b66b8:	f10d 0203 	add.w	r2, sp, #3
   b66bc:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b66be:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b66c2:	f7ff fff2 	bl	b66aa <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b66c6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b66ca:	1e43      	subs	r3, r0, #1
   b66cc:	4258      	negs	r0, r3
   b66ce:	4158      	adcs	r0, r3
   b66d0:	b003      	add	sp, #12
   b66d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b66d6 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b66d6:	b570      	push	{r4, r5, r6, lr}
   b66d8:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b66da:	2350      	movs	r3, #80	; 0x50
   b66dc:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b66e0:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b66e2:	f10d 0316 	add.w	r3, sp, #22
   b66e6:	2202      	movs	r2, #2
   b66e8:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b66ea:	4606      	mov	r6, r0
	buffer[1] = 0;
   b66ec:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b66f0:	f7ff fe55 	bl	b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b66f4:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b66f6:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b66f8:	d10f      	bne.n	b671a <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b66fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b66fe:	e9cd 4400 	strd	r4, r4, [sp]
   b6702:	4623      	mov	r3, r4
   b6704:	2204      	movs	r2, #4
   b6706:	a905      	add	r1, sp, #20
   b6708:	4630      	mov	r0, r6
   b670a:	f7ff ff89 	bl	b6620 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b670e:	2804      	cmp	r0, #4
   b6710:	d003      	beq.n	b671a <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b6712:	2801      	cmp	r0, #1
   b6714:	bf14      	ite	ne
   b6716:	4605      	movne	r5, r0
   b6718:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b671a:	4628      	mov	r0, r5
   b671c:	b006      	add	sp, #24
   b671e:	bd70      	pop	{r4, r5, r6, pc}

000b6720 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b6720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6722:	4606      	mov	r6, r0
   b6724:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b6726:	4614      	mov	r4, r2
   b6728:	b1ca      	cbz	r2, b675e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b672a:	781b      	ldrb	r3, [r3, #0]
   b672c:	2b11      	cmp	r3, #17
   b672e:	d916      	bls.n	b675e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b6730:	2330      	movs	r3, #48	; 0x30
   b6732:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b6734:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6736:	1c93      	adds	r3, r2, #2
   b6738:	4621      	mov	r1, r4
   b673a:	2202      	movs	r2, #2
   b673c:	f7ff fe2f 	bl	b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6740:	2801      	cmp	r0, #1
   b6742:	d10a      	bne.n	b675a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b6744:	2300      	movs	r3, #0
   b6746:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b674a:	9003      	str	r0, [sp, #12]
   b674c:	9500      	str	r5, [sp, #0]
   b674e:	4623      	mov	r3, r4
   b6750:	2204      	movs	r2, #4
   b6752:	4621      	mov	r1, r4
   b6754:	4630      	mov	r0, r6
   b6756:	f7ff ff63 	bl	b6620 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b675a:	b004      	add	sp, #16
   b675c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b675e:	2005      	movs	r0, #5
   b6760:	e7fb      	b.n	b675a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b6762 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b6762:	b510      	push	{r4, lr}
   b6764:	b08a      	sub	sp, #40	; 0x28
   b6766:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6768:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b676c:	681a      	ldr	r2, [r3, #0]
   b676e:	889b      	ldrh	r3, [r3, #4]
   b6770:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6774:	7863      	ldrb	r3, [r4, #1]
   b6776:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b677a:	78a3      	ldrb	r3, [r4, #2]
   b677c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b6780:	78e3      	ldrb	r3, [r4, #3]
   b6782:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6786:	7923      	ldrb	r3, [r4, #4]
   b6788:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b678c:	2300      	movs	r3, #0
   b678e:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b6792:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6796:	9301      	str	r3, [sp, #4]
   b6798:	230c      	movs	r3, #12
	sendData[0] = command;
   b679a:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b679e:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b67a2:	9300      	str	r3, [sp, #0]
   b67a4:	2210      	movs	r2, #16
   b67a6:	ab07      	add	r3, sp, #28
   b67a8:	210e      	movs	r1, #14
   b67aa:	f7ff fe8c 	bl	b64c6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b67ae:	b00a      	add	sp, #40	; 0x28
   b67b0:	bd10      	pop	{r4, pc}

000b67b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b67b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b67b6:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b67b8:	b08b      	sub	sp, #44	; 0x2c
   b67ba:	4682      	mov	sl, r0
   b67bc:	460f      	mov	r7, r1
   b67be:	4690      	mov	r8, r2
	if (validBits > 80) {
   b67c0:	f200 8140 	bhi.w	b6a44 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b67c4:	2280      	movs	r2, #128	; 0x80
   b67c6:	211c      	movs	r1, #28
   b67c8:	f7ff fdd6 	bl	b6378 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b67cc:	2393      	movs	r3, #147	; 0x93
   b67ce:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b67d2:	f1b8 0f00 	cmp.w	r8, #0
   b67d6:	f000 80bc 	beq.w	b6952 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b67da:	783c      	ldrb	r4, [r7, #0]
   b67dc:	2c04      	cmp	r4, #4
   b67de:	bf94      	ite	ls
   b67e0:	2300      	movls	r3, #0
   b67e2:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b67e4:	2501      	movs	r5, #1
   b67e6:	2600      	movs	r6, #0
   b67e8:	e00b      	b.n	b6802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b67ea:	2395      	movs	r3, #149	; 0x95
   b67ec:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b67f0:	f1b8 0f00 	cmp.w	r8, #0
   b67f4:	f000 80af 	beq.w	b6956 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b67f8:	783c      	ldrb	r4, [r7, #0]
   b67fa:	2c07      	cmp	r4, #7
   b67fc:	bf94      	ite	ls
   b67fe:	2300      	movls	r3, #0
   b6800:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b6802:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b6806:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b6808:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b680c:	2b00      	cmp	r3, #0
   b680e:	f000 80a4 	beq.w	b695a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b6812:	2288      	movs	r2, #136	; 0x88
   b6814:	f88d 201e 	strb.w	r2, [sp, #30]
   b6818:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b681a:	f014 0207 	ands.w	r2, r4, #7
   b681e:	bf18      	it	ne
   b6820:	2201      	movne	r2, #1
   b6822:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b6826:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b682a:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b682c:	d01d      	beq.n	b686a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b682e:	2b00      	cmp	r3, #0
   b6830:	bf14      	ite	ne
   b6832:	f04f 0903 	movne.w	r9, #3
   b6836:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b683a:	f106 0c01 	add.w	ip, r6, #1
   b683e:	4591      	cmp	r9, r2
   b6840:	bf94      	ite	ls
   b6842:	eb01 0e09 	addls.w	lr, r1, r9
   b6846:	eb01 0e02 	addhi.w	lr, r1, r2
   b684a:	fa57 fc8c 	uxtab	ip, r7, ip
   b684e:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b6852:	460a      	mov	r2, r1
   b6854:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6858:	3101      	adds	r1, #1
   b685a:	b2c9      	uxtb	r1, r1
   b685c:	445a      	add	r2, fp
   b685e:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b6862:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6866:	4571      	cmp	r1, lr
   b6868:	d1f3      	bne.n	b6852 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b686a:	b10b      	cbz	r3, b6870 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b686c:	3008      	adds	r0, #8
   b686e:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b6870:	2c1f      	cmp	r4, #31
   b6872:	dd74      	ble.n	b695e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6874:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6878:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b687c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6880:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6884:	4053      	eors	r3, r2
   b6886:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b688a:	4053      	eors	r3, r2
   b688c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b6890:	4053      	eors	r3, r2
   b6892:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6896:	2207      	movs	r2, #7
   b6898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b689c:	a907      	add	r1, sp, #28
   b689e:	4650      	mov	r0, sl
   b68a0:	f7ff fd7d 	bl	b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b68a4:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b68a6:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b68a8:	f040 80c8 	bne.w	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b68ac:	2300      	movs	r3, #0
   b68ae:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b68b2:	2303      	movs	r3, #3
   b68b4:	f88d 301b 	strb.w	r3, [sp, #27]
   b68b8:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b68ba:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b68be:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b68c2:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b68c6:	9305      	str	r3, [sp, #20]
   b68c8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b68cc:	b2d2      	uxtb	r2, r2
   b68ce:	211a      	movs	r1, #26
   b68d0:	4650      	mov	r0, sl
   b68d2:	f7ff fd2e 	bl	b6332 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b68d6:	9b05      	ldr	r3, [sp, #20]
   b68d8:	9302      	str	r3, [sp, #8]
   b68da:	f10d 031a 	add.w	r3, sp, #26
   b68de:	2200      	movs	r2, #0
   b68e0:	9301      	str	r3, [sp, #4]
   b68e2:	f10d 031b 	add.w	r3, sp, #27
   b68e6:	9203      	str	r2, [sp, #12]
   b68e8:	9300      	str	r3, [sp, #0]
   b68ea:	464a      	mov	r2, r9
   b68ec:	465b      	mov	r3, fp
   b68ee:	a907      	add	r1, sp, #28
   b68f0:	4650      	mov	r0, sl
   b68f2:	f7ff fe95 	bl	b6620 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b68f6:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b68f8:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b68fa:	d14c      	bne.n	b6996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b68fc:	211c      	movs	r1, #28
   b68fe:	4650      	mov	r0, sl
   b6900:	f7ff fce5 	bl	b62ce <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b6904:	0681      	lsls	r1, r0, #26
   b6906:	f100 8099 	bmi.w	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b690a:	f010 001f 	ands.w	r0, r0, #31
   b690e:	bf08      	it	eq
   b6910:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b6912:	42a0      	cmp	r0, r4
   b6914:	f340 8087 	ble.w	b6a26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b6918:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b691a:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b691e:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6920:	f013 0307 	ands.w	r3, r3, #7
   b6924:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b6928:	bf18      	it	ne
   b692a:	2301      	movne	r3, #1
   b692c:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b692e:	4418      	add	r0, r3
   b6930:	ab0a      	add	r3, sp, #40	; 0x28
   b6932:	4418      	add	r0, r3
   b6934:	2301      	movs	r3, #1
   b6936:	fa03 f202 	lsl.w	r2, r3, r2
   b693a:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b693e:	4313      	orrs	r3, r2
   b6940:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b6944:	e794      	b.n	b6870 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b6946:	2397      	movs	r3, #151	; 0x97
   b6948:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b694c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b694e:	4623      	mov	r3, r4
				break;
   b6950:	e757      	b.n	b6802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6952:	4643      	mov	r3, r8
   b6954:	e746      	b.n	b67e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6956:	4643      	mov	r3, r8
   b6958:	e753      	b.n	b6802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b695a:	2102      	movs	r1, #2
   b695c:	e75d      	b.n	b681a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b695e:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6960:	3302      	adds	r3, #2
   b6962:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6964:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6968:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b696c:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6970:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6974:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6978:	bf18      	it	ne
   b697a:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b697e:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6980:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b6982:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6986:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b698a:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b698e:	f88d 301b 	strb.w	r3, [sp, #27]
   b6992:	9404      	str	r4, [sp, #16]
   b6994:	e795      	b.n	b68c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6996:	2801      	cmp	r0, #1
   b6998:	d150      	bne.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b699a:	9b04      	ldr	r3, [sp, #16]
   b699c:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b699e:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b69a2:	f77f af67 	ble.w	b6874 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b69a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b69aa:	2b88      	cmp	r3, #136	; 0x88
   b69ac:	d13e      	bne.n	b6a2c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b69ae:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b69b0:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b69b2:	3601      	adds	r6, #1
   b69b4:	441a      	add	r2, r3
   b69b6:	fa57 f686 	uxtab	r6, r7, r6
   b69ba:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b69bc:	4619      	mov	r1, r3
   b69be:	a80a      	add	r0, sp, #40	; 0x28
   b69c0:	3301      	adds	r3, #1
   b69c2:	4401      	add	r1, r0
   b69c4:	b2db      	uxtb	r3, r3
   b69c6:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b69ca:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b69ce:	4293      	cmp	r3, r2
   b69d0:	d1f4      	bne.n	b69bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b69d2:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b69d6:	2e03      	cmp	r6, #3
   b69d8:	d137      	bne.n	b6a4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b69da:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b69de:	bba4      	cbnz	r4, b6a4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b69e0:	f10d 031e 	add.w	r3, sp, #30
   b69e4:	2201      	movs	r2, #1
   b69e6:	4659      	mov	r1, fp
   b69e8:	4650      	mov	r0, sl
   b69ea:	f7ff fcd8 	bl	b639e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b69ee:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b69f0:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b69f2:	d123      	bne.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b69f4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b69f8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b69fc:	429a      	cmp	r2, r3
   b69fe:	d127      	bne.n	b6a50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b6a00:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6a04:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6a08:	429a      	cmp	r2, r3
   b6a0a:	d121      	bne.n	b6a50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6a0c:	f89b 3000 	ldrb.w	r3, [fp]
   b6a10:	075a      	lsls	r2, r3, #29
   b6a12:	d50e      	bpl.n	b6a32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b6a14:	3501      	adds	r5, #1
   b6a16:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b6a18:	2d03      	cmp	r5, #3
   b6a1a:	d094      	beq.n	b6946 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b6a1c:	2d04      	cmp	r5, #4
   b6a1e:	d002      	beq.n	b6a26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b6a20:	2d02      	cmp	r5, #2
   b6a22:	f43f aee2 	beq.w	b67ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b6a26:	f04f 0906 	mov.w	r9, #6
   b6a2a:	e007      	b.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6a2c:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6a2e:	2204      	movs	r2, #4
   b6a30:	e7bf      	b.n	b69b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b6a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6a36:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6a38:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6a3a:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6a3c:	4648      	mov	r0, r9
   b6a3e:	b00b      	add	sp, #44	; 0x2c
   b6a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b6a44:	f04f 0907 	mov.w	r9, #7
   b6a48:	e7f8      	b.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6a4a:	f04f 0902 	mov.w	r9, #2
   b6a4e:	e7f5      	b.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b6a50:	f04f 0908 	mov.w	r9, #8
   b6a54:	e7f2      	b.n	b6a3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b6a56 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b6a56:	b508      	push	{r3, lr}
   b6a58:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6a5a:	2200      	movs	r2, #0
   b6a5c:	f7ff fea9 	bl	b67b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6a60:	1e43      	subs	r3, r0, #1
   b6a62:	4258      	negs	r0, r3
   b6a64:	4158      	adcs	r0, r3
   b6a66:	bd08      	pop	{r3, pc}

000b6a68 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b6a68:	6001      	str	r1, [r0, #0]
}
   b6a6a:	4770      	bx	lr

000b6a6c <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6a6c:	b510      	push	{r4, lr}
   b6a6e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6a70:	2101      	movs	r1, #1
   b6a72:	8800      	ldrh	r0, [r0, #0]
   b6a74:	f002 f836 	bl	b8ae4 <pinMode>
	digitalWrite(_pin, LOW);
   b6a78:	8820      	ldrh	r0, [r4, #0]
   b6a7a:	2100      	movs	r1, #0
   b6a7c:	f002 f843 	bl	b8b06 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6a80:	2002      	movs	r0, #2
   b6a82:	f000 ffbb 	bl	b79fc <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b6a86:	8820      	ldrh	r0, [r4, #0]
   b6a88:	2101      	movs	r1, #1
   b6a8a:	f002 f83c 	bl	b8b06 <digitalWrite>
   b6a8e:	2005      	movs	r0, #5
   b6a90:	f000 ffb4 	bl	b79fc <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b6a94:	8820      	ldrh	r0, [r4, #0]
   b6a96:	2100      	movs	r1, #0
   b6a98:	f002 f835 	bl	b8b06 <digitalWrite>
	pinMode(_pin,INPUT);
   b6a9c:	8820      	ldrh	r0, [r4, #0]
   b6a9e:	2100      	movs	r1, #0
   b6aa0:	f002 f820 	bl	b8ae4 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b6aa4:	8820      	ldrh	r0, [r4, #0]
   b6aa6:	2101      	movs	r1, #1
   b6aa8:	f002 f870 	bl	b8b8c <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b6aac:	233a      	movs	r3, #58	; 0x3a
   b6aae:	fb90 f0f3 	sdiv	r0, r0, r3
   b6ab2:	bd10      	pop	{r4, pc}

000b6ab4 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b6ab4:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b6ab6:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b6ab8:	2301      	movs	r3, #1
	_pin = pin;
   b6aba:	7181      	strb	r1, [r0, #6]
	_type = type;
   b6abc:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b6abe:	7403      	strb	r3, [r0, #16]
}
   b6ac0:	bd10      	pop	{r4, pc}

000b6ac2 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b6ac2:	b510      	push	{r4, lr}
   b6ac4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b6ac6:	2100      	movs	r1, #0
   b6ac8:	7980      	ldrb	r0, [r0, #6]
   b6aca:	f002 f80b 	bl	b8ae4 <pinMode>
	digitalWrite(_pin, HIGH);
   b6ace:	79a0      	ldrb	r0, [r4, #6]
   b6ad0:	2101      	movs	r1, #1
   b6ad2:	f002 f818 	bl	b8b06 <digitalWrite>
	_lastreadtime = 0;
   b6ad6:	2300      	movs	r3, #0
   b6ad8:	60e3      	str	r3, [r4, #12]
}
   b6ada:	bd10      	pop	{r4, pc}

000b6adc <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b6adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6ae0:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ae2:	f000 ff93 	bl	b7a0c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b6ae6:	68e3      	ldr	r3, [r4, #12]
   b6ae8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b6aea:	bf84      	itt	hi
   b6aec:	2300      	movhi	r3, #0
   b6aee:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b6af0:	7c23      	ldrb	r3, [r4, #16]
   b6af2:	b923      	cbnz	r3, b6afe <_ZN3DHT4readEv+0x22>
   b6af4:	68e3      	ldr	r3, [r4, #12]
   b6af6:	1ac0      	subs	r0, r0, r3
   b6af8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6afc:	d367      	bcc.n	b6bce <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b6afe:	2500      	movs	r5, #0
   b6b00:	7425      	strb	r5, [r4, #16]
   b6b02:	f000 ff83 	bl	b7a0c <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b6b06:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b6b08:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6b0a:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b6b0c:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6b0e:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b6b10:	f001 fff9 	bl	b8b06 <digitalWrite>
	delay(250);
   b6b14:	20fa      	movs	r0, #250	; 0xfa
   b6b16:	f001 fc4f 	bl	b83b8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b6b1a:	79a0      	ldrb	r0, [r4, #6]
   b6b1c:	2101      	movs	r1, #1
   b6b1e:	f001 ffe1 	bl	b8ae4 <pinMode>
	digitalWrite(_pin, LOW);
   b6b22:	4629      	mov	r1, r5
   b6b24:	79a0      	ldrb	r0, [r4, #6]
   b6b26:	f001 ffee 	bl	b8b06 <digitalWrite>
	delay(20);
   b6b2a:	2014      	movs	r0, #20
   b6b2c:	f001 fc44 	bl	b83b8 <delay>
	noInterrupts();
   b6b30:	f001 fdfe 	bl	b8730 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b6b34:	2101      	movs	r1, #1
   b6b36:	79a0      	ldrb	r0, [r4, #6]
   b6b38:	f001 ffe5 	bl	b8b06 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6b3c:	2028      	movs	r0, #40	; 0x28
   b6b3e:	f000 ff5d 	bl	b79fc <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b6b42:	79a0      	ldrb	r0, [r4, #6]
   b6b44:	4629      	mov	r1, r5
   b6b46:	f001 ffcd 	bl	b8ae4 <pinMode>
	uint8_t j = 0, i;
   b6b4a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b6b4c:	2701      	movs	r7, #1
   b6b4e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b6b52:	79a0      	ldrb	r0, [r4, #6]
   b6b54:	f001 fff0 	bl	b8b38 <digitalRead>
   b6b58:	42b8      	cmp	r0, r7
   b6b5a:	fa5f f988 	uxtb.w	r9, r8
   b6b5e:	d108      	bne.n	b6b72 <_ZN3DHT4readEv+0x96>
   b6b60:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b6b62:	f108 0801 	add.w	r8, r8, #1
   b6b66:	f000 ff49 	bl	b79fc <HAL_Delay_Microseconds>
   b6b6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6b6e:	d1f0      	bne.n	b6b52 <_ZN3DHT4readEv+0x76>
   b6b70:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b6b72:	79a0      	ldrb	r0, [r4, #6]
   b6b74:	f001 ffe0 	bl	b8b38 <digitalRead>

		if (counter == 255) break;
   b6b78:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b6b7c:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b6b7e:	d014      	beq.n	b6baa <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b6b80:	2d03      	cmp	r5, #3
   b6b82:	d90e      	bls.n	b6ba2 <_ZN3DHT4readEv+0xc6>
   b6b84:	07ea      	lsls	r2, r5, #31
   b6b86:	d40c      	bmi.n	b6ba2 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b6b88:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b6b8a:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b6b8c:	5ca3      	ldrb	r3, [r4, r2]
   b6b8e:	005b      	lsls	r3, r3, #1
   b6b90:	b2db      	uxtb	r3, r3
   b6b92:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b6b94:	7a21      	ldrb	r1, [r4, #8]
   b6b96:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b6b98:	bf3c      	itt	cc
   b6b9a:	f043 0301 	orrcc.w	r3, r3, #1
   b6b9e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b6ba0:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b6ba2:	3501      	adds	r5, #1
   b6ba4:	b2ed      	uxtb	r5, r5
   b6ba6:	2d55      	cmp	r5, #85	; 0x55
   b6ba8:	d1d1      	bne.n	b6b4e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b6baa:	f001 fdc3 	bl	b8734 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b6bae:	2e27      	cmp	r6, #39	; 0x27
   b6bb0:	d90f      	bls.n	b6bd2 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b6bb2:	7863      	ldrb	r3, [r4, #1]
   b6bb4:	7820      	ldrb	r0, [r4, #0]
   b6bb6:	4418      	add	r0, r3
   b6bb8:	78a3      	ldrb	r3, [r4, #2]
   b6bba:	4418      	add	r0, r3
   b6bbc:	78e3      	ldrb	r3, [r4, #3]
   b6bbe:	4418      	add	r0, r3
   b6bc0:	7923      	ldrb	r3, [r4, #4]
   b6bc2:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b6bc4:	1ac3      	subs	r3, r0, r3
   b6bc6:	4258      	negs	r0, r3
   b6bc8:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b6bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b6bce:	2001      	movs	r0, #1
   b6bd0:	e7fb      	b.n	b6bca <_ZN3DHT4readEv+0xee>
	return false;
   b6bd2:	2000      	movs	r0, #0
   b6bd4:	e7f9      	b.n	b6bca <_ZN3DHT4readEv+0xee>
	...

000b6bd8 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b6bd8:	b510      	push	{r4, lr}
   b6bda:	4604      	mov	r4, r0
	if (read()) {
   b6bdc:	f7ff ff7e 	bl	b6adc <_ZN3DHT4readEv>
   b6be0:	b320      	cbz	r0, b6c2c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b6be2:	79e3      	ldrb	r3, [r4, #7]
   b6be4:	2b0b      	cmp	r3, #11
   b6be6:	d01b      	beq.n	b6c20 <_ZN3DHT15readTemperatureEv+0x48>
   b6be8:	3b15      	subs	r3, #21
   b6bea:	2b01      	cmp	r3, #1
   b6bec:	d81e      	bhi.n	b6c2c <_ZN3DHT15readTemperatureEv+0x54>
   b6bee:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b6bf0:	eddf 6a10 	vldr	s13, [pc, #64]	; b6c34 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b6bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b6bf8:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b6bfc:	78e2      	ldrb	r2, [r4, #3]
   b6bfe:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b6c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b6c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b6c0a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b6c0c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b6c10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b6c14:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b6c18:	d507      	bpl.n	b6c2a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b6c1a:	eeb1 0a40 	vneg.f32	s0, s0
   b6c1e:	e004      	b.n	b6c2a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b6c20:	78a3      	ldrb	r3, [r4, #2]
   b6c22:	ee00 3a10 	vmov	s0, r3
   b6c26:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b6c2a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b6c2c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6c38 <_ZN3DHT15readTemperatureEv+0x60>
   b6c30:	e7fb      	b.n	b6c2a <_ZN3DHT15readTemperatureEv+0x52>
   b6c32:	bf00      	nop
   b6c34:	43800000 	.word	0x43800000
   b6c38:	7fc00000 	.word	0x7fc00000

000b6c3c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b6c3c:	f7ff bfcc 	b.w	b6bd8 <_ZN3DHT15readTemperatureEv>

000b6c40 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6c40:	b510      	push	{r4, lr}
   b6c42:	4b04      	ldr	r3, [pc, #16]	; (b6c54 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6c44:	6003      	str	r3, [r0, #0]
   b6c46:	4604      	mov	r4, r0
  if(buffer) {
   b6c48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6c4a:	b108      	cbz	r0, b6c50 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6c4c:	f001 f8aa 	bl	b7da4 <free>
    buffer = NULL;
  }
}
   b6c50:	4620      	mov	r0, r4
   b6c52:	bd10      	pop	{r4, pc}
   b6c54:	000bab40 	.word	0x000bab40

000b6c58 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6c58:	b510      	push	{r4, lr}
   b6c5a:	4604      	mov	r4, r0
}
   b6c5c:	f7ff fff0 	bl	b6c40 <_ZN16Adafruit_SSD1306D1Ev>
   b6c60:	4620      	mov	r0, r4
   b6c62:	2150      	movs	r1, #80	; 0x50
   b6c64:	f7fd fa19 	bl	b409a <_ZdlPvj>
   b6c68:	4620      	mov	r0, r4
   b6c6a:	bd10      	pop	{r4, pc}

000b6c6c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6c6c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6c6e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6c70:	db4b      	blt.n	b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6c72:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6c76:	428c      	cmp	r4, r1
   b6c78:	dd47      	ble.n	b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6c7a:	2a00      	cmp	r2, #0
   b6c7c:	db45      	blt.n	b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6c7e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6c82:	4294      	cmp	r4, r2
   b6c84:	dd41      	ble.n	b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6c86:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6c88:	2c02      	cmp	r4, #2
   b6c8a:	d01f      	beq.n	b6ccc <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6c8c:	2c03      	cmp	r4, #3
   b6c8e:	d026      	beq.n	b6cde <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6c90:	2c01      	cmp	r4, #1
   b6c92:	d104      	bne.n	b6c9e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6c94:	8904      	ldrh	r4, [r0, #8]
   b6c96:	43d2      	mvns	r2, r2
   b6c98:	4414      	add	r4, r2
      break;
   b6c9a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6c9c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6c9e:	2b01      	cmp	r3, #1
   b6ca0:	d023      	beq.n	b6cea <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6ca2:	2b02      	cmp	r3, #2
   b6ca4:	d032      	beq.n	b6d0c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6ca6:	bb83      	cbnz	r3, b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6ca8:	2a00      	cmp	r2, #0
   b6caa:	4613      	mov	r3, r2
   b6cac:	8904      	ldrh	r4, [r0, #8]
   b6cae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6cb0:	bfb8      	it	lt
   b6cb2:	1dd3      	addlt	r3, r2, #7
   b6cb4:	10db      	asrs	r3, r3, #3
   b6cb6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6cba:	f002 0207 	and.w	r2, r2, #7
   b6cbe:	2301      	movs	r3, #1
   b6cc0:	4093      	lsls	r3, r2
   b6cc2:	5c42      	ldrb	r2, [r0, r1]
   b6cc4:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6cc8:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6cca:	e01e      	b.n	b6d0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6ccc:	8904      	ldrh	r4, [r0, #8]
   b6cce:	3c01      	subs	r4, #1
   b6cd0:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6cd2:	8944      	ldrh	r4, [r0, #10]
   b6cd4:	43d2      	mvns	r2, r2
   b6cd6:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6cd8:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6cda:	b212      	sxth	r2, r2
      break;
   b6cdc:	e7df      	b.n	b6c9e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6cde:	8944      	ldrh	r4, [r0, #10]
   b6ce0:	3c01      	subs	r4, #1
   b6ce2:	1a64      	subs	r4, r4, r1
      break;
   b6ce4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6ce6:	b222      	sxth	r2, r4
      break;
   b6ce8:	e7d9      	b.n	b6c9e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6cea:	2a00      	cmp	r2, #0
   b6cec:	8904      	ldrh	r4, [r0, #8]
   b6cee:	4613      	mov	r3, r2
   b6cf0:	bfb8      	it	lt
   b6cf2:	1dd3      	addlt	r3, r2, #7
   b6cf4:	10db      	asrs	r3, r3, #3
   b6cf6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6cfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6cfc:	f002 0007 	and.w	r0, r2, #7
   b6d00:	2201      	movs	r2, #1
   b6d02:	4082      	lsls	r2, r0
   b6d04:	5c58      	ldrb	r0, [r3, r1]
   b6d06:	4302      	orrs	r2, r0
   b6d08:	545a      	strb	r2, [r3, r1]
}
   b6d0a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6d0c:	2a00      	cmp	r2, #0
   b6d0e:	4613      	mov	r3, r2
   b6d10:	8904      	ldrh	r4, [r0, #8]
   b6d12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6d14:	bfb8      	it	lt
   b6d16:	1dd3      	addlt	r3, r2, #7
   b6d18:	10db      	asrs	r3, r3, #3
   b6d1a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6d1e:	f002 0207 	and.w	r2, r2, #7
   b6d22:	2301      	movs	r3, #1
   b6d24:	fa03 f202 	lsl.w	r2, r3, r2
   b6d28:	5c43      	ldrb	r3, [r0, r1]
   b6d2a:	405a      	eors	r2, r3
   b6d2c:	e7cc      	b.n	b6cc8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6d30 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6d30:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b6d32:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6d34:	4604      	mov	r4, r0
   b6d36:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b6d38:	2180      	movs	r1, #128	; 0x80
   b6d3a:	f7fe ffcf 	bl	b5cdc <_ZN12Adafruit_GFXC1Ess>
   b6d3e:	2500      	movs	r5, #0
   b6d40:	4b0d      	ldr	r3, [pc, #52]	; (b6d78 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b6d42:	6023      	str	r3, [r4, #0]
   b6d44:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b6d46:	f001 ff7b 	bl	b8c40 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b6d4a:	23ff      	movs	r3, #255	; 0xff
   b6d4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6d50:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b6d54:	4b09      	ldr	r3, [pc, #36]	; (b6d7c <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b6d56:	63a3      	str	r3, [r4, #56]	; 0x38
   b6d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6d5c:	2301      	movs	r3, #1
   b6d5e:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b6d62:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6d64:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b6d68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6d6c:	6425      	str	r5, [r4, #64]	; 0x40
   b6d6e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b6d72:	4620      	mov	r0, r4
   b6d74:	bd70      	pop	{r4, r5, r6, pc}
   b6d76:	bf00      	nop
   b6d78:	000bab40 	.word	0x000bab40
   b6d7c:	000ba54c 	.word	0x000ba54c

000b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d82:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6d84:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6d86:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6d88:	b190      	cbz	r0, b6db0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6d8a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6d8e:	f001 fd71 	bl	b8874 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6d92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d94:	6803      	ldr	r3, [r0, #0]
   b6d96:	2100      	movs	r1, #0
   b6d98:	689b      	ldr	r3, [r3, #8]
   b6d9a:	4798      	blx	r3
    WIRE_WRITE(c);
   b6d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d9e:	6803      	ldr	r3, [r0, #0]
   b6da0:	4629      	mov	r1, r5
   b6da2:	689b      	ldr	r3, [r3, #8]
   b6da4:	4798      	blx	r3
    wire->endTransmission();
   b6da6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6dac:	f001 bd69 	b.w	b8882 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6db0:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6db4:	4601      	mov	r1, r0
   b6db6:	b298      	uxth	r0, r3
   b6db8:	f001 fea5 	bl	b8b06 <digitalWrite>
  if(spi) {
   b6dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6dbe:	b120      	cbz	r0, b6dca <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6dc0:	4629      	mov	r1, r5
}
   b6dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6dc6:	f001 b90f 	b.w	b7fe8 <_ZN8SPIClass8transferEh>
   b6dca:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6dcc:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6dce:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6dd2:	ea05 0107 	and.w	r1, r5, r7
   b6dd6:	b280      	uxth	r0, r0
   b6dd8:	f001 fe95 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6ddc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6de0:	2101      	movs	r1, #1
   b6de2:	b280      	uxth	r0, r0
   b6de4:	f001 fe8f 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6de8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6dec:	2100      	movs	r1, #0
   b6dee:	b280      	uxth	r0, r0
   b6df0:	f001 fe89 	bl	b8b06 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6df4:	3e01      	subs	r6, #1
   b6df6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6dfa:	d1e8      	bne.n	b6dce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dfe <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6dfe:	b538      	push	{r3, r4, r5, lr}
   b6e00:	4604      	mov	r4, r0
  TRANSACTION_START
   b6e02:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6e04:	460d      	mov	r5, r1
  TRANSACTION_START
   b6e06:	b180      	cbz	r0, b6e2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6e08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6e0a:	f001 fd25 	bl	b8858 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6e0e:	2d00      	cmp	r5, #0
   b6e10:	4620      	mov	r0, r4
   b6e12:	bf14      	ite	ne
   b6e14:	21a7      	movne	r1, #167	; 0xa7
   b6e16:	21a6      	moveq	r1, #166	; 0xa6
   b6e18:	f7ff ffb2 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e1e:	b188      	cbz	r0, b6e44 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6e20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6e26:	f001 bd17 	b.w	b8858 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6e2c:	b118      	cbz	r0, b6e36 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6e2e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6e32:	f001 f86b 	bl	b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6e36:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6e3a:	2100      	movs	r1, #0
   b6e3c:	b280      	uxth	r0, r0
   b6e3e:	f001 fe62 	bl	b8b06 <digitalWrite>
   b6e42:	e7e4      	b.n	b6e0e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6e44:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6e48:	2101      	movs	r1, #1
   b6e4a:	b280      	uxth	r0, r0
   b6e4c:	f001 fe5b 	bl	b8b06 <digitalWrite>
   b6e50:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6e52:	b118      	cbz	r0, b6e5c <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6e58:	f001 b83e 	b.w	b7ed8 <_ZN8SPIClass14endTransactionEv>
}
   b6e5c:	bd38      	pop	{r3, r4, r5, pc}

000b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6e5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e62:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6e64:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6e66:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6e68:	188f      	adds	r7, r1, r2
   b6e6a:	b340      	cbz	r0, b6ebe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6e6c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6e70:	f001 fd00 	bl	b8874 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6e74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e76:	6803      	ldr	r3, [r0, #0]
   b6e78:	2100      	movs	r1, #0
   b6e7a:	689b      	ldr	r3, [r3, #8]
   b6e7c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6e7e:	2601      	movs	r6, #1
    while(n--) {
   b6e80:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6e82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6e84:	d017      	beq.n	b6eb6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6e86:	2e1f      	cmp	r6, #31
   b6e88:	d90c      	bls.n	b6ea4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6e8a:	f001 fcfa 	bl	b8882 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6e8e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6e92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e94:	f001 fcee 	bl	b8874 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6e98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e9a:	6803      	ldr	r3, [r0, #0]
   b6e9c:	2100      	movs	r1, #0
   b6e9e:	689b      	ldr	r3, [r3, #8]
   b6ea0:	4798      	blx	r3
        bytesOut = 1;
   b6ea2:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6ea4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ea6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6eaa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6eac:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6eae:	689b      	ldr	r3, [r3, #8]
   b6eb0:	4798      	blx	r3
      bytesOut++;
   b6eb2:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6eb4:	e7e4      	b.n	b6e80 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6eb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6eba:	f001 bce2 	b.w	b8882 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6ebe:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6ec2:	4601      	mov	r1, r0
   b6ec4:	b298      	uxth	r0, r3
   b6ec6:	f001 fe1e 	bl	b8b06 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6eca:	42bd      	cmp	r5, r7
   b6ecc:	d022      	beq.n	b6f14 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6ed0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6ed4:	b118      	cbz	r0, b6ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6ed6:	4649      	mov	r1, r9
   b6ed8:	f001 f886 	bl	b7fe8 <_ZN8SPIClass8transferEh>
   b6edc:	e7f5      	b.n	b6eca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6ede:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6ee0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6ee4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6ee8:	ea09 0108 	and.w	r1, r9, r8
   b6eec:	b280      	uxth	r0, r0
   b6eee:	f001 fe0a 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6ef2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ef6:	2101      	movs	r1, #1
   b6ef8:	b280      	uxth	r0, r0
   b6efa:	f001 fe04 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6efe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f02:	2100      	movs	r1, #0
   b6f04:	b280      	uxth	r0, r0
   b6f06:	f001 fdfe 	bl	b8b06 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f0a:	3e01      	subs	r6, #1
   b6f0c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6f10:	d1e8      	bne.n	b6ee4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6f12:	e7da      	b.n	b6eca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6f18 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6f18:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6f1c:	1dda      	adds	r2, r3, #7
   b6f1e:	bf48      	it	mi
   b6f20:	f103 020e 	addmi.w	r2, r3, #14
   b6f24:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6f28:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6f2a:	10d2      	asrs	r2, r2, #3
   b6f2c:	435a      	muls	r2, r3
   b6f2e:	2100      	movs	r1, #0
   b6f30:	f002 bb8e 	b.w	b9650 <memset>

000b6f34 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6f34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6f38:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6f3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6f3c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6f40:	4604      	mov	r4, r0
   b6f42:	460f      	mov	r7, r1
   b6f44:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6f46:	b1d3      	cbz	r3, b6f7e <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b6f48:	4620      	mov	r0, r4
   b6f4a:	f7ff ffe5 	bl	b6f18 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6f4e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b6f52:	2a20      	cmp	r2, #32
   b6f54:	dc25      	bgt.n	b6fa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6f56:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b6f5a:	2320      	movs	r3, #32
   b6f5c:	3a20      	subs	r2, #32
   b6f5e:	3973      	subs	r1, #115	; 0x73
   b6f60:	2001      	movs	r0, #1
   b6f62:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6f66:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b6f6a:	2373      	movs	r3, #115	; 0x73
   b6f6c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6f70:	9300      	str	r3, [sp, #0]
   b6f72:	f342 024f 	sbfx	r2, r2, #1, #16
   b6f76:	4b85      	ldr	r3, [pc, #532]	; (b718c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b6f78:	f341 014f 	sbfx	r1, r1, #1, #16
   b6f7c:	e01b      	b.n	b6fb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6f7e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6f82:	1dd8      	adds	r0, r3, #7
   b6f84:	bf48      	it	mi
   b6f86:	f103 000e 	addmi.w	r0, r3, #14
   b6f8a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6f8e:	10c0      	asrs	r0, r0, #3
   b6f90:	4358      	muls	r0, r3
   b6f92:	f000 feff 	bl	b7d94 <malloc>
   b6f96:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6f98:	2800      	cmp	r0, #0
   b6f9a:	d1d5      	bne.n	b6f48 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6f9c:	b004      	add	sp, #16
   b6f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b6fa2:	2340      	movs	r3, #64	; 0x40
   b6fa4:	f04f 0c01 	mov.w	ip, #1
   b6fa8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b6fac:	2380      	movs	r3, #128	; 0x80
   b6fae:	9300      	str	r3, [sp, #0]
   b6fb0:	2200      	movs	r2, #0
   b6fb2:	4b77      	ldr	r3, [pc, #476]	; (b7190 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b6fb4:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	f7fe fea6 	bl	b5d08 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6fbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6fbe:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6fc2:	2800      	cmp	r0, #0
   b6fc4:	d078      	beq.n	b70b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6fc6:	2d00      	cmp	r5, #0
   b6fc8:	d174      	bne.n	b70b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b6fca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6fce:	2b20      	cmp	r3, #32
   b6fd0:	bf0c      	ite	eq
   b6fd2:	253c      	moveq	r5, #60	; 0x3c
   b6fd4:	253d      	movne	r5, #61	; 0x3d
   b6fd6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6fda:	f1b8 0f00 	cmp.w	r8, #0
   b6fde:	d001      	beq.n	b6fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6fe0:	f001 fc3e 	bl	b8860 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6fe4:	b1fe      	cbz	r6, b7026 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b6fe6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6fea:	2800      	cmp	r0, #0
   b6fec:	db1b      	blt.n	b7026 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b6fee:	2101      	movs	r1, #1
   b6ff0:	b280      	uxth	r0, r0
   b6ff2:	f001 fd77 	bl	b8ae4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b6ff6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ffa:	2101      	movs	r1, #1
   b6ffc:	b280      	uxth	r0, r0
   b6ffe:	f001 fd82 	bl	b8b06 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7002:	2001      	movs	r0, #1
   b7004:	f001 f9d8 	bl	b83b8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7008:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b700c:	2100      	movs	r1, #0
   b700e:	b280      	uxth	r0, r0
   b7010:	f001 fd79 	bl	b8b06 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7014:	200a      	movs	r0, #10
   b7016:	f001 f9cf 	bl	b83b8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b701a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b701e:	2101      	movs	r1, #1
   b7020:	b280      	uxth	r0, r0
   b7022:	f001 fd70 	bl	b8b06 <digitalWrite>
  TRANSACTION_START
   b7026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7028:	2800      	cmp	r0, #0
   b702a:	d074      	beq.n	b7116 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b702c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b702e:	f001 fc13 	bl	b8858 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7032:	2204      	movs	r2, #4
   b7034:	4957      	ldr	r1, [pc, #348]	; (b7194 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b7036:	4620      	mov	r0, r4
   b7038:	f7ff ff11 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b703c:	8961      	ldrh	r1, [r4, #10]
   b703e:	3901      	subs	r1, #1
   b7040:	b2c9      	uxtb	r1, r1
   b7042:	4620      	mov	r0, r4
   b7044:	f7ff fe9c 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b7048:	4953      	ldr	r1, [pc, #332]	; (b7198 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b704a:	2204      	movs	r2, #4
   b704c:	4620      	mov	r0, r4
   b704e:	f7ff ff06 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b7052:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7056:	2b01      	cmp	r3, #1
   b7058:	bf0c      	ite	eq
   b705a:	2110      	moveq	r1, #16
   b705c:	2114      	movne	r1, #20
   b705e:	4620      	mov	r0, r4
   b7060:	f7ff fe8e 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b7064:	2204      	movs	r2, #4
   b7066:	494d      	ldr	r1, [pc, #308]	; (b719c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b7068:	4620      	mov	r0, r4
   b706a:	f7ff fef8 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b706e:	68a3      	ldr	r3, [r4, #8]
   b7070:	4a4b      	ldr	r2, [pc, #300]	; (b71a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7072:	4293      	cmp	r3, r2
   b7074:	d15c      	bne.n	b7130 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b7076:	494b      	ldr	r1, [pc, #300]	; (b71a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b7078:	2204      	movs	r2, #4
   b707a:	4620      	mov	r0, r4
   b707c:	f7ff feef 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b7080:	21d9      	movs	r1, #217	; 0xd9
   b7082:	4620      	mov	r0, r4
   b7084:	f7ff fe7c 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b7088:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b708c:	2b01      	cmp	r3, #1
   b708e:	bf0c      	ite	eq
   b7090:	2122      	moveq	r1, #34	; 0x22
   b7092:	21f1      	movne	r1, #241	; 0xf1
   b7094:	4620      	mov	r0, r4
   b7096:	f7ff fe73 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b709a:	4620      	mov	r0, r4
   b709c:	4942      	ldr	r1, [pc, #264]	; (b71a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b709e:	2206      	movs	r2, #6
   b70a0:	f7ff fedd 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b70a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b70a6:	2800      	cmp	r0, #0
   b70a8:	d063      	beq.n	b7172 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b70aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b70ac:	f001 fbd4 	bl	b8858 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b70b0:	2001      	movs	r0, #1
   b70b2:	e773      	b.n	b6f9c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b70b4:	b26d      	sxtb	r5, r5
   b70b6:	e78e      	b.n	b6fd6 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b70b8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b70bc:	2101      	movs	r1, #1
   b70be:	b280      	uxth	r0, r0
   b70c0:	f001 fd10 	bl	b8ae4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b70c4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b70c8:	2101      	movs	r1, #1
   b70ca:	b280      	uxth	r0, r0
   b70cc:	f001 fd0a 	bl	b8ae4 <pinMode>
    SSD1306_DESELECT
   b70d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b70d4:	2101      	movs	r1, #1
   b70d6:	b280      	uxth	r0, r0
   b70d8:	f001 fd15 	bl	b8b06 <digitalWrite>
    if(spi) { // Hardware SPI
   b70dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b70de:	b13d      	cbz	r5, b70f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b70e0:	f1b8 0f00 	cmp.w	r8, #0
   b70e4:	f43f af7e 	beq.w	b6fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b70e8:	4628      	mov	r0, r5
   b70ea:	f000 fee1 	bl	b7eb0 <_ZN8SPIClass5beginEv>
   b70ee:	e779      	b.n	b6fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b70f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b70f4:	2101      	movs	r1, #1
   b70f6:	b280      	uxth	r0, r0
   b70f8:	f001 fcf4 	bl	b8ae4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b70fc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7100:	2101      	movs	r1, #1
   b7102:	b280      	uxth	r0, r0
   b7104:	f001 fcee 	bl	b8ae4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7108:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b710c:	4629      	mov	r1, r5
   b710e:	b280      	uxth	r0, r0
   b7110:	f001 fcf9 	bl	b8b06 <digitalWrite>
   b7114:	e766      	b.n	b6fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b7116:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7118:	b118      	cbz	r0, b7122 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b711a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b711e:	f000 fef5 	bl	b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7122:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7126:	2100      	movs	r1, #0
   b7128:	b280      	uxth	r0, r0
   b712a:	f001 fcec 	bl	b8b06 <digitalWrite>
   b712e:	e780      	b.n	b7032 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7130:	4a1e      	ldr	r2, [pc, #120]	; (b71ac <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b7132:	4293      	cmp	r3, r2
   b7134:	d10e      	bne.n	b7154 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b7136:	491e      	ldr	r1, [pc, #120]	; (b71b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b7138:	2203      	movs	r2, #3
   b713a:	4620      	mov	r0, r4
   b713c:	f7ff fe8f 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b7140:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7144:	2b01      	cmp	r3, #1
   b7146:	bf0c      	ite	eq
   b7148:	219f      	moveq	r1, #159	; 0x9f
   b714a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b714c:	4620      	mov	r0, r4
   b714e:	f7ff fe17 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b7152:	e795      	b.n	b7080 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b7154:	4a17      	ldr	r2, [pc, #92]	; (b71b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b7156:	4293      	cmp	r3, r2
   b7158:	d192      	bne.n	b7080 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b715a:	4917      	ldr	r1, [pc, #92]	; (b71b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b715c:	2203      	movs	r2, #3
   b715e:	4620      	mov	r0, r4
   b7160:	f7ff fe7d 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7164:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7168:	2b01      	cmp	r3, #1
   b716a:	bf0c      	ite	eq
   b716c:	2110      	moveq	r1, #16
   b716e:	21af      	movne	r1, #175	; 0xaf
   b7170:	e7ec      	b.n	b714c <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b7172:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7176:	2101      	movs	r1, #1
   b7178:	b280      	uxth	r0, r0
   b717a:	f001 fcc4 	bl	b8b06 <digitalWrite>
   b717e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7180:	2800      	cmp	r0, #0
   b7182:	d095      	beq.n	b70b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b7184:	f000 fea8 	bl	b7ed8 <_ZN8SPIClass14endTransactionEv>
   b7188:	e792      	b.n	b70b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b718a:	bf00      	nop
   b718c:	000ba558 	.word	0x000ba558
   b7190:	000ba738 	.word	0x000ba738
   b7194:	000baba0 	.word	0x000baba0
   b7198:	000baba4 	.word	0x000baba4
   b719c:	000baba8 	.word	0x000baba8
   b71a0:	00200080 	.word	0x00200080
   b71a4:	000babb2 	.word	0x000babb2
   b71a8:	000babac 	.word	0x000babac
   b71ac:	00400080 	.word	0x00400080
   b71b0:	000babb6 	.word	0x000babb6
   b71b4:	00100060 	.word	0x00100060
   b71b8:	000babb9 	.word	0x000babb9

000b71bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b71bc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b71be:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b71c0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b71c4:	db3d      	blt.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b71c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b71ca:	4294      	cmp	r4, r2
   b71cc:	dd39      	ble.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b71ce:	2900      	cmp	r1, #0
      w += x;
   b71d0:	bfbe      	ittt	lt
   b71d2:	185b      	addlt	r3, r3, r1
   b71d4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b71d6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b71d8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b71dc:	18ce      	adds	r6, r1, r3
   b71de:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b71e0:	bfc4      	itt	gt
   b71e2:	1a63      	subgt	r3, r4, r1
   b71e4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b71e6:	2b00      	cmp	r3, #0
   b71e8:	dd2b      	ble.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b71ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b71ec:	10d6      	asrs	r6, r2, #3
   b71ee:	fb14 1106 	smlabb	r1, r4, r6, r1
   b71f2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b71f4:	f002 0007 	and.w	r0, r2, #7
   b71f8:	2201      	movs	r2, #1
   b71fa:	4082      	lsls	r2, r0
      switch(color) {
   b71fc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b71fe:	b2d2      	uxtb	r2, r2
      switch(color) {
   b7200:	d016      	beq.n	b7230 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b7202:	2d02      	cmp	r5, #2
   b7204:	d00b      	beq.n	b721e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b7206:	b9e5      	cbnz	r5, b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7208:	43d2      	mvns	r2, r2
   b720a:	b2d2      	uxtb	r2, r2
   b720c:	440b      	add	r3, r1
   b720e:	4299      	cmp	r1, r3
   b7210:	d017      	beq.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7212:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7216:	4010      	ands	r0, r2
   b7218:	f801 0c01 	strb.w	r0, [r1, #-1]
   b721c:	e7f7      	b.n	b720e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b721e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7220:	4299      	cmp	r1, r3
   b7222:	d00e      	beq.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7224:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7228:	4050      	eors	r0, r2
   b722a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b722e:	e7f7      	b.n	b7220 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7230:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b7232:	4299      	cmp	r1, r3
   b7234:	d005      	beq.n	b7242 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7236:	f811 0b01 	ldrb.w	r0, [r1], #1
   b723a:	4310      	orrs	r0, r2
   b723c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7240:	e7f7      	b.n	b7232 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b7242:	bd70      	pop	{r4, r5, r6, pc}

000b7244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7244:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7246:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7248:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b724c:	db76      	blt.n	b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b724e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b7252:	42b1      	cmp	r1, r6
   b7254:	da72      	bge.n	b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b7256:	2a00      	cmp	r2, #0
      __h += __y;
   b7258:	bfbe      	ittt	lt
   b725a:	189b      	addlt	r3, r3, r2
   b725c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b725e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7260:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b7264:	18d7      	adds	r7, r2, r3
   b7266:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b7268:	bfc4      	itt	gt
   b726a:	1aa3      	subgt	r3, r4, r2
   b726c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b726e:	2b00      	cmp	r3, #0
   b7270:	dd64      	ble.n	b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7272:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b7276:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b7278:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b727c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b7280:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b7282:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b7286:	d023      	beq.n	b72d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b7288:	f1c2 0208 	rsb	r2, r2, #8
   b728c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b728e:	492d      	ldr	r1, [pc, #180]	; (b7344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7290:	4293      	cmp	r3, r2
   b7292:	bf3c      	itt	cc
   b7294:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b7298:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b729c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b729e:	bf3c      	itt	cc
   b72a0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b72a4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b72a8:	2d01      	cmp	r5, #1
   b72aa:	d007      	beq.n	b72bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b72ac:	2d02      	cmp	r5, #2
   b72ae:	d02e      	beq.n	b730e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b72b0:	b94d      	cbnz	r5, b72c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b72b2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b72b6:	ea2c 0101 	bic.w	r1, ip, r1
   b72ba:	e003      	b.n	b72c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b72bc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b72c0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b72c4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b72c6:	4293      	cmp	r3, r2
   b72c8:	d338      	bcc.n	b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b72ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b72ce:	440c      	add	r4, r1
        h -= mod;
   b72d0:	1a9a      	subs	r2, r3, r2
   b72d2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b72d4:	2a07      	cmp	r2, #7
   b72d6:	d90e      	bls.n	b72f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b72d8:	2d02      	cmp	r5, #2
   b72da:	d11d      	bne.n	b7318 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b72dc:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b72de:	7821      	ldrb	r1, [r4, #0]
   b72e0:	43c9      	mvns	r1, r1
   b72e2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b72e4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b72e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b72ea:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b72ec:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b72ee:	440c      	add	r4, r1
            } while(h >= 8);
   b72f0:	d8f5      	bhi.n	b72de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b72f2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b72f6:	b30a      	cbz	r2, b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b72f8:	4b13      	ldr	r3, [pc, #76]	; (b7348 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b72fa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b72fc:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b72fe:	d01a      	beq.n	b7336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b7300:	2d02      	cmp	r5, #2
   b7302:	d01c      	beq.n	b733e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b7304:	b9d5      	cbnz	r5, b733c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b7306:	7822      	ldrb	r2, [r4, #0]
   b7308:	ea22 0303 	bic.w	r3, r2, r3
   b730c:	e015      	b.n	b733a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b730e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7312:	ea81 010c 	eor.w	r1, r1, ip
   b7316:	e7d5      	b.n	b72c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7318:	1e29      	subs	r1, r5, #0
   b731a:	bf18      	it	ne
   b731c:	2101      	movne	r1, #1
   b731e:	4249      	negs	r1, r1
   b7320:	b2c9      	uxtb	r1, r1
   b7322:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b7324:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b7326:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7328:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b732c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b732e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7330:	4434      	add	r4, r6
            } while(h >= 8);
   b7332:	d8f7      	bhi.n	b7324 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b7334:	e7dd      	b.n	b72f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b7336:	7822      	ldrb	r2, [r4, #0]
   b7338:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b733a:	7023      	strb	r3, [r4, #0]
}
   b733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b733e:	7822      	ldrb	r2, [r4, #0]
   b7340:	4053      	eors	r3, r2
   b7342:	e7fa      	b.n	b733a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b7344:	000bab90 	.word	0x000bab90
   b7348:	000bab98 	.word	0x000bab98

000b734c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b734c:	b470      	push	{r4, r5, r6}
   b734e:	4614      	mov	r4, r2
  switch(rotation) {
   b7350:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7352:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b7356:	2a02      	cmp	r2, #2
   b7358:	d00d      	beq.n	b7376 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b735a:	2a03      	cmp	r2, #3
   b735c:	d018      	beq.n	b7390 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b735e:	2a01      	cmp	r2, #1
   b7360:	d111      	bne.n	b7386 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b7362:	8902      	ldrh	r2, [r0, #8]
   b7364:	43e4      	mvns	r4, r4
   b7366:	4414      	add	r4, r2
   b7368:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b736a:	9603      	str	r6, [sp, #12]
   b736c:	460a      	mov	r2, r1
   b736e:	4621      	mov	r1, r4
}
   b7370:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7372:	f7ff bf67 	b.w	b7244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b7376:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b7378:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b737a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b737c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b737e:	4414      	add	r4, r2
    x -= (w-1);
   b7380:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b7382:	b224      	sxth	r4, r4
    x -= (w-1);
   b7384:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b7386:	9603      	str	r6, [sp, #12]
   b7388:	4622      	mov	r2, r4
}
   b738a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b738c:	f7ff bf16 	b.w	b71bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b7390:	8945      	ldrh	r5, [r0, #10]
   b7392:	4419      	add	r1, r3
   b7394:	1a69      	subs	r1, r5, r1
   b7396:	b209      	sxth	r1, r1
    break;
   b7398:	e7e7      	b.n	b736a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b739a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b739a:	b430      	push	{r4, r5}
   b739c:	4614      	mov	r4, r2
  switch(rotation) {
   b739e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b73a0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b73a4:	2a02      	cmp	r2, #2
   b73a6:	d00d      	beq.n	b73c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b73a8:	2a03      	cmp	r2, #3
   b73aa:	d018      	beq.n	b73de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b73ac:	2a01      	cmp	r2, #1
   b73ae:	d111      	bne.n	b73d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b73b0:	18e2      	adds	r2, r4, r3
   b73b2:	8904      	ldrh	r4, [r0, #8]
   b73b4:	1aa4      	subs	r4, r4, r2
   b73b6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b73b8:	9502      	str	r5, [sp, #8]
   b73ba:	460a      	mov	r2, r1
   b73bc:	4621      	mov	r1, r4
}
   b73be:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b73c0:	f7ff befc 	b.w	b71bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b73c4:	8902      	ldrh	r2, [r0, #8]
   b73c6:	43c9      	mvns	r1, r1
   b73c8:	4411      	add	r1, r2
    y -= (h-1);
   b73ca:	18e2      	adds	r2, r4, r3
   b73cc:	8944      	ldrh	r4, [r0, #10]
   b73ce:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b73d0:	b209      	sxth	r1, r1
    y -= (h-1);
   b73d2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b73d4:	9502      	str	r5, [sp, #8]
   b73d6:	4622      	mov	r2, r4
}
   b73d8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b73da:	f7ff bf33 	b.w	b7244 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b73de:	8942      	ldrh	r2, [r0, #10]
   b73e0:	43c9      	mvns	r1, r1
   b73e2:	4411      	add	r1, r2
   b73e4:	b209      	sxth	r1, r1
    break;
   b73e6:	e7e7      	b.n	b73b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b73e8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b73e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b73ec:	4604      	mov	r4, r0
  TRANSACTION_START
   b73ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b73f0:	2800      	cmp	r0, #0
   b73f2:	d042      	beq.n	b747a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b73f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b73f6:	f001 fa2f 	bl	b8858 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b73fa:	4947      	ldr	r1, [pc, #284]	; (b7518 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b73fc:	2205      	movs	r2, #5
   b73fe:	4620      	mov	r0, r4
   b7400:	f7ff fd2d 	bl	b6e5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b7404:	8921      	ldrh	r1, [r4, #8]
   b7406:	3901      	subs	r1, #1
   b7408:	4620      	mov	r0, r4
   b740a:	b2c9      	uxtb	r1, r1
   b740c:	f7ff fcb8 	bl	b6d80 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7410:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7414:	1dde      	adds	r6, r3, #7
   b7416:	bf48      	it	mi
   b7418:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b741c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7420:	8923      	ldrh	r3, [r4, #8]
   b7422:	10f6      	asrs	r6, r6, #3
   b7424:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b7428:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b742c:	2800      	cmp	r0, #0
   b742e:	d03a      	beq.n	b74a6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b7430:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7434:	f001 fa1e 	bl	b8874 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b7438:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b743a:	6803      	ldr	r3, [r0, #0]
   b743c:	2140      	movs	r1, #64	; 0x40
   b743e:	689b      	ldr	r3, [r3, #8]
   b7440:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7442:	2701      	movs	r7, #1
    while(count--) {
   b7444:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b7446:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b7448:	d024      	beq.n	b7494 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b744a:	2f1f      	cmp	r7, #31
   b744c:	d90c      	bls.n	b7468 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b744e:	f001 fa18 	bl	b8882 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7452:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7456:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7458:	f001 fa0c 	bl	b8874 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b745c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b745e:	6803      	ldr	r3, [r0, #0]
   b7460:	2140      	movs	r1, #64	; 0x40
   b7462:	689b      	ldr	r3, [r3, #8]
   b7464:	4798      	blx	r3
        bytesOut = 1;
   b7466:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b7468:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b746a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b746e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7470:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b7472:	689b      	ldr	r3, [r3, #8]
   b7474:	4798      	blx	r3
      bytesOut++;
   b7476:	b2ff      	uxtb	r7, r7
    while(count--) {
   b7478:	e7e4      	b.n	b7444 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b747a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b747c:	b118      	cbz	r0, b7486 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b747e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7482:	f000 fd43 	bl	b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7486:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b748a:	2100      	movs	r1, #0
   b748c:	b280      	uxth	r0, r0
   b748e:	f001 fb3a 	bl	b8b06 <digitalWrite>
   b7492:	e7b2      	b.n	b73fa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b7494:	f001 f9f5 	bl	b8882 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b7498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b749a:	b378      	cbz	r0, b74fc <_ZN16Adafruit_SSD13067displayEv+0x114>
   b749c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b749e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74a2:	f001 b9d9 	b.w	b8858 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b74a6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b74aa:	2101      	movs	r1, #1
   b74ac:	b280      	uxth	r0, r0
   b74ae:	f001 fb2a 	bl	b8b06 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b74b2:	42ae      	cmp	r6, r5
   b74b4:	d0f0      	beq.n	b7498 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b74b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b74b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b74bc:	b118      	cbz	r0, b74c6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b74be:	4649      	mov	r1, r9
   b74c0:	f000 fd92 	bl	b7fe8 <_ZN8SPIClass8transferEh>
   b74c4:	e7f5      	b.n	b74b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b74c6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b74c8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b74cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b74d0:	ea09 0108 	and.w	r1, r9, r8
   b74d4:	b280      	uxth	r0, r0
   b74d6:	f001 fb16 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b74da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b74de:	2101      	movs	r1, #1
   b74e0:	b280      	uxth	r0, r0
   b74e2:	f001 fb10 	bl	b8b06 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b74e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b74ea:	2100      	movs	r1, #0
   b74ec:	b280      	uxth	r0, r0
   b74ee:	f001 fb0a 	bl	b8b06 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b74f2:	3f01      	subs	r7, #1
   b74f4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b74f8:	d1e8      	bne.n	b74cc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b74fa:	e7da      	b.n	b74b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b74fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7500:	2101      	movs	r1, #1
   b7502:	b280      	uxth	r0, r0
   b7504:	f001 faff 	bl	b8b06 <digitalWrite>
   b7508:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b750a:	b118      	cbz	r0, b7514 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b750c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b7510:	f000 bce2 	b.w	b7ed8 <_ZN8SPIClass14endTransactionEv>
}
   b7514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7518:	000babbc 	.word	0x000babbc

000b751c <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b751c:	b510      	push	{r4, lr}
   b751e:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b7520:	7001      	strb	r1, [r0, #0]
   b7522:	7042      	strb	r2, [r0, #1]
   b7524:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b7526:	2101      	movs	r1, #1
   b7528:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b752c:	f002 f87a 	bl	b9624 <calloc>
   b7530:	6060      	str	r0, [r4, #4]
}
   b7532:	4620      	mov	r0, r4
   b7534:	bd10      	pop	{r4, pc}

000b7536 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b7536:	b510      	push	{r4, lr}
   b7538:	4604      	mov	r4, r0
{
    free(_led_state);
   b753a:	6840      	ldr	r0, [r0, #4]
   b753c:	f000 fc32 	bl	b7da4 <free>
}
   b7540:	4620      	mov	r0, r4
   b7542:	bd10      	pop	{r4, pc}

000b7544 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b7544:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b7546:	2100      	movs	r1, #0
{
   b7548:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b754a:	7800      	ldrb	r0, [r0, #0]
   b754c:	f001 fadb 	bl	b8b06 <digitalWrite>
   b7550:	2014      	movs	r0, #20
   b7552:	f000 fa53 	bl	b79fc <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b7556:	7820      	ldrb	r0, [r4, #0]
   b7558:	2101      	movs	r1, #1
   b755a:	f001 fad4 	bl	b8b06 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b755e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7562:	2014      	movs	r0, #20
   b7564:	f000 ba4a 	b.w	b79fc <HAL_Delay_Microseconds>

000b7568 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b7568:	b570      	push	{r4, r5, r6, lr}
   b756a:	4606      	mov	r6, r0
   b756c:	460c      	mov	r4, r1
   b756e:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b7570:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b7572:	bf4c      	ite	mi
   b7574:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b7576:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b7578:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b757a:	f001 fac4 	bl	b8b06 <digitalWrite>
    for (byte i=0; i<8; i++)
   b757e:	3d01      	subs	r5, #1
        clk();
   b7580:	4630      	mov	r0, r6
   b7582:	f7ff ffdf 	bl	b7544 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b7586:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b7588:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b758c:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b758e:	d1ef      	bne.n	b7570 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b7590:	bd70      	pop	{r4, r5, r6, pc}

000b7592 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b7592:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b7594:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b7598:	461e      	mov	r6, r3
   b759a:	460c      	mov	r4, r1
   b759c:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b759e:	bf14      	ite	ne
   b75a0:	21c0      	movne	r1, #192	; 0xc0
   b75a2:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b75a4:	0673      	lsls	r3, r6, #25
   b75a6:	bf58      	it	pl
   b75a8:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b75ac:	062a      	lsls	r2, r5, #24
   b75ae:	bf58      	it	pl
   b75b0:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b75b4:	066b      	lsls	r3, r5, #25
   b75b6:	bf58      	it	pl
   b75b8:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b75bc:	0622      	lsls	r2, r4, #24
   b75be:	bf58      	it	pl
   b75c0:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b75c4:	0663      	lsls	r3, r4, #25
   b75c6:	bf58      	it	pl
   b75c8:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b75cc:	9001      	str	r0, [sp, #4]
   b75ce:	f7ff ffcb 	bl	b7568 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b75d2:	9801      	ldr	r0, [sp, #4]
   b75d4:	4631      	mov	r1, r6
   b75d6:	f7ff ffc7 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b75da:	9801      	ldr	r0, [sp, #4]
   b75dc:	4629      	mov	r1, r5
   b75de:	f7ff ffc3 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b75e2:	9801      	ldr	r0, [sp, #4]
   b75e4:	4621      	mov	r1, r4
}
   b75e6:	b002      	add	sp, #8
   b75e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b75ec:	f7ff bfbc 	b.w	b7568 <_ZN12ChainableLED8sendByteEh>

000b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b75f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b75f4:	4604      	mov	r4, r0
   b75f6:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b75f8:	2100      	movs	r1, #0
{
   b75fa:	4690      	mov	r8, r2
   b75fc:	4699      	mov	r9, r3
   b75fe:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b7602:	f7ff ffb1 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7606:	2100      	movs	r1, #0
   b7608:	4620      	mov	r0, r4
   b760a:	f7ff ffad 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b760e:	2100      	movs	r1, #0
   b7610:	4620      	mov	r0, r4
   b7612:	f7ff ffa9 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7616:	2100      	movs	r1, #0
   b7618:	4620      	mov	r0, r4
   b761a:	f7ff ffa5 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
   b761e:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b7620:	78a3      	ldrb	r3, [r4, #2]
   b7622:	b2f5      	uxtb	r5, r6
   b7624:	42ab      	cmp	r3, r5
   b7626:	d919      	bls.n	b765c <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b7628:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b762c:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b762e:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b7632:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b7636:	d108      	bne.n	b764a <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b7638:	6861      	ldr	r1, [r4, #4]
   b763a:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b763e:	6861      	ldr	r1, [r4, #4]
   b7640:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b7644:	6861      	ldr	r1, [r4, #4]
   b7646:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b764a:	6861      	ldr	r1, [r4, #4]
   b764c:	5ccb      	ldrb	r3, [r1, r3]
   b764e:	5c8a      	ldrb	r2, [r1, r2]
   b7650:	5c09      	ldrb	r1, [r1, r0]
   b7652:	4620      	mov	r0, r4
   b7654:	f7ff ff9d 	bl	b7592 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b7658:	3601      	adds	r6, #1
   b765a:	e7e1      	b.n	b7620 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b765c:	4620      	mov	r0, r4
   b765e:	2100      	movs	r1, #0
   b7660:	f7ff ff82 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7664:	4620      	mov	r0, r4
   b7666:	2100      	movs	r1, #0
   b7668:	f7ff ff7e 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b766c:	4620      	mov	r0, r4
   b766e:	2100      	movs	r1, #0
   b7670:	f7ff ff7a 	bl	b7568 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7674:	4620      	mov	r0, r4
   b7676:	2100      	movs	r1, #0
}
   b7678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b767c:	f7ff bf74 	b.w	b7568 <_ZN12ChainableLED8sendByteEh>

000b7680 <_ZN12ChainableLED4initEv>:
{
   b7680:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7682:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b7684:	2101      	movs	r1, #1
   b7686:	7800      	ldrb	r0, [r0, #0]
   b7688:	f001 fa2c 	bl	b8ae4 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b768c:	7860      	ldrb	r0, [r4, #1]
   b768e:	2101      	movs	r1, #1
   b7690:	f001 fa28 	bl	b8ae4 <pinMode>
   b7694:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b7696:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b7698:	78a3      	ldrb	r3, [r4, #2]
   b769a:	b2e9      	uxtb	r1, r5
   b769c:	428b      	cmp	r3, r1
   b769e:	d907      	bls.n	b76b0 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b76a0:	2300      	movs	r3, #0
   b76a2:	9600      	str	r6, [sp, #0]
   b76a4:	461a      	mov	r2, r3
   b76a6:	4620      	mov	r0, r4
   b76a8:	f7ff ffa2 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b76ac:	3501      	adds	r5, #1
   b76ae:	e7f3      	b.n	b7698 <_ZN12ChainableLED4initEv+0x18>
}
   b76b0:	b002      	add	sp, #8
   b76b2:	bd70      	pop	{r4, r5, r6, pc}
   b76b4:	0000      	movs	r0, r0
	...

000b76b8 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   b76b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   b76ba:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   b76be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b76c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b76c6:	ed2d 8b04 	vpush	{d8-d9}
   b76ca:	eef0 8a41 	vmov.f32	s17, s2
        t += 1.0;
   b76ce:	bf48      	it	mi
   b76d0:	ee71 8a27 	vaddmi.f32	s17, s2, s15
{
   b76d4:	eeb0 9a40 	vmov.f32	s18, s0
    if(t > 1.0)
   b76d8:	eef4 8ae7 	vcmpe.f32	s17, s15
   b76dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   b76e0:	bfc8      	it	gt
   b76e2:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
{
   b76e6:	eeb0 8a60 	vmov.f32	s16, s1
    if(t < 1.0/6.0)
   b76ea:	ee18 0a90 	vmov	r0, s17
   b76ee:	f001 fc31 	bl	b8f54 <__aeabi_f2d>
   b76f2:	a32e      	add	r3, pc, #184	; (adr r3, b77ac <_Z7hue2rgbfff+0xf4>)
   b76f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76f8:	4604      	mov	r4, r0
   b76fa:	460d      	mov	r5, r1
   b76fc:	f001 fef4 	bl	b94e8 <__aeabi_dcmplt>
   b7700:	b310      	cbz	r0, b7748 <_Z7hue2rgbfff+0x90>
        return p + (q - p) * 6.0 * t;
   b7702:	ee78 7a49 	vsub.f32	s15, s16, s18
   b7706:	ee17 0a90 	vmov	r0, s15
   b770a:	f001 fc23 	bl	b8f54 <__aeabi_f2d>
   b770e:	4b26      	ldr	r3, [pc, #152]	; (b77a8 <_Z7hue2rgbfff+0xf0>)
   b7710:	2200      	movs	r2, #0
   b7712:	f001 fc77 	bl	b9004 <__aeabi_dmul>
   b7716:	4622      	mov	r2, r4
   b7718:	462b      	mov	r3, r5
    if(t < 1.0/2.0)
        return q;
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b771a:	f001 fc73 	bl	b9004 <__aeabi_dmul>
   b771e:	4604      	mov	r4, r0
   b7720:	ee19 0a10 	vmov	r0, s18
   b7724:	460d      	mov	r5, r1
   b7726:	f001 fc15 	bl	b8f54 <__aeabi_f2d>
   b772a:	4602      	mov	r2, r0
   b772c:	460b      	mov	r3, r1
   b772e:	4620      	mov	r0, r4
   b7730:	4629      	mov	r1, r5
   b7732:	f001 fab1 	bl	b8c98 <__adddf3>
   b7736:	f001 ff1f 	bl	b9578 <__aeabi_d2f>
   b773a:	ee08 0a10 	vmov	s16, r0

    return p;
}
   b773e:	eeb0 0a48 	vmov.f32	s0, s16
   b7742:	ecbd 8b04 	vpop	{d8-d9}
   b7746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(t < 1.0/2.0)
   b7748:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b774c:	eef4 8ae7 	vcmpe.f32	s17, s15
   b7750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7754:	d4f3      	bmi.n	b773e <_Z7hue2rgbfff+0x86>
    if(t < 2.0/3.0)
   b7756:	a312      	add	r3, pc, #72	; (adr r3, b77a0 <_Z7hue2rgbfff+0xe8>)
   b7758:	e9d3 2300 	ldrd	r2, r3, [r3]
   b775c:	4620      	mov	r0, r4
   b775e:	4629      	mov	r1, r5
   b7760:	f001 fec2 	bl	b94e8 <__aeabi_dcmplt>
   b7764:	b1b8      	cbz	r0, b7796 <_Z7hue2rgbfff+0xde>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b7766:	ee78 7a49 	vsub.f32	s15, s16, s18
   b776a:	ee17 0a90 	vmov	r0, s15
   b776e:	f001 fbf1 	bl	b8f54 <__aeabi_f2d>
   b7772:	4622      	mov	r2, r4
   b7774:	4606      	mov	r6, r0
   b7776:	460f      	mov	r7, r1
   b7778:	462b      	mov	r3, r5
   b777a:	a109      	add	r1, pc, #36	; (adr r1, b77a0 <_Z7hue2rgbfff+0xe8>)
   b777c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7780:	f001 fa88 	bl	b8c94 <__aeabi_dsub>
   b7784:	4602      	mov	r2, r0
   b7786:	460b      	mov	r3, r1
   b7788:	4630      	mov	r0, r6
   b778a:	4639      	mov	r1, r7
   b778c:	f001 fc3a 	bl	b9004 <__aeabi_dmul>
   b7790:	4b05      	ldr	r3, [pc, #20]	; (b77a8 <_Z7hue2rgbfff+0xf0>)
   b7792:	2200      	movs	r2, #0
   b7794:	e7c1      	b.n	b771a <_Z7hue2rgbfff+0x62>
    return p;
   b7796:	eeb0 8a49 	vmov.f32	s16, s18
   b779a:	e7d0      	b.n	b773e <_Z7hue2rgbfff+0x86>
   b779c:	f3af 8000 	nop.w
   b77a0:	55555555 	.word	0x55555555
   b77a4:	3fe55555 	.word	0x3fe55555
   b77a8:	40180000 	.word	0x40180000
   b77ac:	55555555 	.word	0x55555555
   b77b0:	3fc55555 	.word	0x3fc55555
   b77b4:	00000000 	.word	0x00000000

000b77b8 <_ZN12ChainableLED11setColorHSBEhfff>:
{
   b77b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77bc:	ed2d 8b04 	vpush	{d8-d9}
    if(saturation == 0.0)
   b77c0:	eef5 0a40 	vcmp.f32	s1, #0.0
   b77c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b77c8:	b083      	sub	sp, #12
   b77ca:	4680      	mov	r8, r0
   b77cc:	4689      	mov	r9, r1
   b77ce:	eef0 9a40 	vmov.f32	s19, s0
   b77d2:	eeb0 9a60 	vmov.f32	s18, s1
   b77d6:	eeb0 8a41 	vmov.f32	s16, s2
    if(saturation == 0.0)
   b77da:	f000 809d 	beq.w	b7918 <_ZN12ChainableLED11setColorHSBEhfff+0x160>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b77de:	ee11 0a10 	vmov	r0, s2
   b77e2:	f001 fbb7 	bl	b8f54 <__aeabi_f2d>
        float q = brightness < 0.5 ?
   b77e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b77ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b77ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b77f2:	4606      	mov	r6, r0
   b77f4:	460f      	mov	r7, r1
   b77f6:	f140 808a 	bpl.w	b790e <_ZN12ChainableLED11setColorHSBEhfff+0x156>
   b77fa:	ee19 0a10 	vmov	r0, s18
   b77fe:	f001 fba9 	bl	b8f54 <__aeabi_f2d>
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b7802:	4b4d      	ldr	r3, [pc, #308]	; (b7938 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   b7804:	2200      	movs	r2, #0
   b7806:	f001 fa47 	bl	b8c98 <__adddf3>
   b780a:	4632      	mov	r2, r6
   b780c:	463b      	mov	r3, r7
   b780e:	f001 fbf9 	bl	b9004 <__aeabi_dmul>
        float q = brightness < 0.5 ?
   b7812:	f001 feb1 	bl	b9578 <__aeabi_d2f>
   b7816:	ee08 0a90 	vmov	s17, r0
   b781a:	ee19 0a90 	vmov	r0, s19
   b781e:	f001 fb99 	bl	b8f54 <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   b7822:	4632      	mov	r2, r6
   b7824:	4604      	mov	r4, r0
   b7826:	463b      	mov	r3, r7
   b7828:	460d      	mov	r5, r1
   b782a:	4630      	mov	r0, r6
   b782c:	4639      	mov	r1, r7
   b782e:	f001 fa33 	bl	b8c98 <__adddf3>
   b7832:	4606      	mov	r6, r0
   b7834:	ee18 0a90 	vmov	r0, s17
   b7838:	460f      	mov	r7, r1
   b783a:	f001 fb8b 	bl	b8f54 <__aeabi_f2d>
   b783e:	4602      	mov	r2, r0
   b7840:	460b      	mov	r3, r1
   b7842:	4630      	mov	r0, r6
   b7844:	4639      	mov	r1, r7
   b7846:	f001 fa25 	bl	b8c94 <__aeabi_dsub>
   b784a:	f001 fe95 	bl	b9578 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b784e:	a336      	add	r3, pc, #216	; (adr r3, b7928 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b7850:	e9d3 2300 	ldrd	r2, r3, [r3]
        float p = 2.0 * brightness - q;
   b7854:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b7858:	4629      	mov	r1, r5
   b785a:	4620      	mov	r0, r4
   b785c:	f001 fa1c 	bl	b8c98 <__adddf3>
   b7860:	f001 fe8a 	bl	b9578 <__aeabi_d2f>
   b7864:	eef0 0a68 	vmov.f32	s1, s17
   b7868:	ee01 0a10 	vmov	s2, r0
   b786c:	eeb0 0a49 	vmov.f32	s0, s18
   b7870:	f7ff ff22 	bl	b76b8 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   b7874:	eeb0 1a69 	vmov.f32	s2, s19
   b7878:	eef0 0a68 	vmov.f32	s1, s17
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b787c:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   b7880:	eeb0 0a49 	vmov.f32	s0, s18
   b7884:	f7ff ff18 	bl	b76b8 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b7888:	a327      	add	r3, pc, #156	; (adr r3, b7928 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b788a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b788e:	4620      	mov	r0, r4
   b7890:	4629      	mov	r1, r5
        g = hue2rgb(p, q, hue);
   b7892:	ee10 6a10 	vmov	r6, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b7896:	f001 f9fd 	bl	b8c94 <__aeabi_dsub>
   b789a:	f001 fe6d 	bl	b9578 <__aeabi_d2f>
   b789e:	eef0 0a68 	vmov.f32	s1, s17
   b78a2:	ee01 0a10 	vmov	s2, r0
   b78a6:	eeb0 0a49 	vmov.f32	s0, s18
   b78aa:	f7ff ff05 	bl	b76b8 <_Z7hue2rgbfff>
   b78ae:	ee10 4a10 	vmov	r4, s0
    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   b78b2:	4630      	mov	r0, r6
   b78b4:	f001 fb4e 	bl	b8f54 <__aeabi_f2d>
   b78b8:	a31d      	add	r3, pc, #116	; (adr r3, b7930 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b78ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78be:	f001 fba1 	bl	b9004 <__aeabi_dmul>
   b78c2:	f001 fe39 	bl	b9538 <__aeabi_d2uiz>
   b78c6:	b2c6      	uxtb	r6, r0
   b78c8:	ee18 0a10 	vmov	r0, s16
   b78cc:	f001 fb42 	bl	b8f54 <__aeabi_f2d>
   b78d0:	a317      	add	r3, pc, #92	; (adr r3, b7930 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b78d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78d6:	f001 fb95 	bl	b9004 <__aeabi_dmul>
   b78da:	f001 fe2d 	bl	b9538 <__aeabi_d2uiz>
   b78de:	b2c5      	uxtb	r5, r0
   b78e0:	4620      	mov	r0, r4
   b78e2:	f001 fb37 	bl	b8f54 <__aeabi_f2d>
   b78e6:	a312      	add	r3, pc, #72	; (adr r3, b7930 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b78e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78ec:	f001 fb8a 	bl	b9004 <__aeabi_dmul>
   b78f0:	f001 fe22 	bl	b9538 <__aeabi_d2uiz>
   b78f4:	b2c0      	uxtb	r0, r0
   b78f6:	9000      	str	r0, [sp, #0]
   b78f8:	4633      	mov	r3, r6
   b78fa:	462a      	mov	r2, r5
   b78fc:	4649      	mov	r1, r9
   b78fe:	4640      	mov	r0, r8
   b7900:	f7ff fe76 	bl	b75f0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b7904:	b003      	add	sp, #12
   b7906:	ecbd 8b04 	vpop	{d8-d9}
   b790a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b790e:	ee79 8a08 	vadd.f32	s17, s18, s16
        float q = brightness < 0.5 ?
   b7912:	eee9 8a48 	vfms.f32	s17, s18, s16
   b7916:	e780      	b.n	b781a <_ZN12ChainableLED11setColorHSBEhfff+0x62>
        r = g = b = brightness;
   b7918:	ee11 4a10 	vmov	r4, s2
   b791c:	ee11 6a10 	vmov	r6, s2
   b7920:	e7c7      	b.n	b78b2 <_ZN12ChainableLED11setColorHSBEhfff+0xfa>
   b7922:	bf00      	nop
   b7924:	f3af 8000 	nop.w
   b7928:	55555555 	.word	0x55555555
   b792c:	3fd55555 	.word	0x3fd55555
   b7930:	00000000 	.word	0x00000000
   b7934:	406fe000 	.word	0x406fe000
   b7938:	3ff00000 	.word	0x3ff00000

000b793c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b793c:	b508      	push	{r3, lr}
   b793e:	4b02      	ldr	r3, [pc, #8]	; (b7948 <netdb_freeaddrinfo+0xc>)
   b7940:	681b      	ldr	r3, [r3, #0]
   b7942:	689b      	ldr	r3, [r3, #8]
   b7944:	9301      	str	r3, [sp, #4]
   b7946:	bd08      	pop	{r3, pc}
   b7948:	00030268 	.word	0x00030268

000b794c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b794c:	b508      	push	{r3, lr}
   b794e:	4b02      	ldr	r3, [pc, #8]	; (b7958 <netdb_getaddrinfo+0xc>)
   b7950:	681b      	ldr	r3, [r3, #0]
   b7952:	68db      	ldr	r3, [r3, #12]
   b7954:	9301      	str	r3, [sp, #4]
   b7956:	bd08      	pop	{r3, pc}
   b7958:	00030268 	.word	0x00030268

000b795c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b795c:	b508      	push	{r3, lr}
   b795e:	4b02      	ldr	r3, [pc, #8]	; (b7968 <HAL_Validate_Pin_Function+0xc>)
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	685b      	ldr	r3, [r3, #4]
   b7964:	9301      	str	r3, [sp, #4]
   b7966:	bd08      	pop	{r3, pc}
   b7968:	0003022c 	.word	0x0003022c

000b796c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b796c:	b508      	push	{r3, lr}
   b796e:	4b02      	ldr	r3, [pc, #8]	; (b7978 <HAL_Pin_Mode+0xc>)
   b7970:	681b      	ldr	r3, [r3, #0]
   b7972:	689b      	ldr	r3, [r3, #8]
   b7974:	9301      	str	r3, [sp, #4]
   b7976:	bd08      	pop	{r3, pc}
   b7978:	0003022c 	.word	0x0003022c

000b797c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b797c:	b508      	push	{r3, lr}
   b797e:	4b02      	ldr	r3, [pc, #8]	; (b7988 <HAL_Get_Pin_Mode+0xc>)
   b7980:	681b      	ldr	r3, [r3, #0]
   b7982:	68db      	ldr	r3, [r3, #12]
   b7984:	9301      	str	r3, [sp, #4]
   b7986:	bd08      	pop	{r3, pc}
   b7988:	0003022c 	.word	0x0003022c

000b798c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b798c:	b508      	push	{r3, lr}
   b798e:	4b02      	ldr	r3, [pc, #8]	; (b7998 <HAL_GPIO_Write+0xc>)
   b7990:	681b      	ldr	r3, [r3, #0]
   b7992:	691b      	ldr	r3, [r3, #16]
   b7994:	9301      	str	r3, [sp, #4]
   b7996:	bd08      	pop	{r3, pc}
   b7998:	0003022c 	.word	0x0003022c

000b799c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b799c:	b508      	push	{r3, lr}
   b799e:	4b02      	ldr	r3, [pc, #8]	; (b79a8 <HAL_GPIO_Read+0xc>)
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	695b      	ldr	r3, [r3, #20]
   b79a4:	9301      	str	r3, [sp, #4]
   b79a6:	bd08      	pop	{r3, pc}
   b79a8:	0003022c 	.word	0x0003022c

000b79ac <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b79ac:	b508      	push	{r3, lr}
   b79ae:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <HAL_Interrupts_Enable_All+0xc>)
   b79b0:	681b      	ldr	r3, [r3, #0]
   b79b2:	6a1b      	ldr	r3, [r3, #32]
   b79b4:	9301      	str	r3, [sp, #4]
   b79b6:	bd08      	pop	{r3, pc}
   b79b8:	0003022c 	.word	0x0003022c

000b79bc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b79bc:	b508      	push	{r3, lr}
   b79be:	4b02      	ldr	r3, [pc, #8]	; (b79c8 <HAL_Interrupts_Disable_All+0xc>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79c4:	9301      	str	r3, [sp, #4]
   b79c6:	bd08      	pop	{r3, pc}
   b79c8:	0003022c 	.word	0x0003022c

000b79cc <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b79cc:	b508      	push	{r3, lr}
   b79ce:	4b02      	ldr	r3, [pc, #8]	; (b79d8 <hal_adc_read+0xc>)
   b79d0:	681b      	ldr	r3, [r3, #0]
   b79d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b79d4:	9301      	str	r3, [sp, #4]
   b79d6:	bd08      	pop	{r3, pc}
   b79d8:	0003022c 	.word	0x0003022c

000b79dc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b79dc:	b508      	push	{r3, lr}
   b79de:	4b02      	ldr	r3, [pc, #8]	; (b79e8 <HAL_Pulse_In+0xc>)
   b79e0:	681b      	ldr	r3, [r3, #0]
   b79e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b79e4:	9301      	str	r3, [sp, #4]
   b79e6:	bd08      	pop	{r3, pc}
   b79e8:	0003022c 	.word	0x0003022c

000b79ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b79ec:	b508      	push	{r3, lr}
   b79ee:	4b02      	ldr	r3, [pc, #8]	; (b79f8 <HAL_RNG_GetRandomNumber+0xc>)
   b79f0:	681b      	ldr	r3, [r3, #0]
   b79f2:	685b      	ldr	r3, [r3, #4]
   b79f4:	9301      	str	r3, [sp, #4]
   b79f6:	bd08      	pop	{r3, pc}
   b79f8:	00030218 	.word	0x00030218

000b79fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b79fc:	b508      	push	{r3, lr}
   b79fe:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <HAL_Delay_Microseconds+0xc>)
   b7a00:	681b      	ldr	r3, [r3, #0]
   b7a02:	68db      	ldr	r3, [r3, #12]
   b7a04:	9301      	str	r3, [sp, #4]
   b7a06:	bd08      	pop	{r3, pc}
   b7a08:	00030218 	.word	0x00030218

000b7a0c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7a0c:	b508      	push	{r3, lr}
   b7a0e:	4b02      	ldr	r3, [pc, #8]	; (b7a18 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7a10:	681b      	ldr	r3, [r3, #0]
   b7a12:	695b      	ldr	r3, [r3, #20]
   b7a14:	9301      	str	r3, [sp, #4]
   b7a16:	bd08      	pop	{r3, pc}
   b7a18:	00030218 	.word	0x00030218

000b7a1c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <os_mutex_recursive_create+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030248 	.word	0x00030248

000b7a2c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <inet_inet_ntop+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	695b      	ldr	r3, [r3, #20]
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030264 	.word	0x00030264

000b7a3c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <hal_usart_write+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	68db      	ldr	r3, [r3, #12]
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	0003023c 	.word	0x0003023c

000b7a4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <hal_usart_available+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	691b      	ldr	r3, [r3, #16]
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	0003023c 	.word	0x0003023c

000b7a5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <hal_usart_read+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	695b      	ldr	r3, [r3, #20]
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	0003023c 	.word	0x0003023c

000b7a6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <hal_usart_peek+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	699b      	ldr	r3, [r3, #24]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	0003023c 	.word	0x0003023c

000b7a7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <hal_usart_flush+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	69db      	ldr	r3, [r3, #28]
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	0003023c 	.word	0x0003023c

000b7a8c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <hal_usart_is_enabled+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	6a1b      	ldr	r3, [r3, #32]
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	0003023c 	.word	0x0003023c

000b7a9c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <hal_usart_available_data_for_write+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	0003023c 	.word	0x0003023c

000b7aac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <hal_usart_init_ex+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	0003023c 	.word	0x0003023c

000b7abc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <hal_i2c_set_speed+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	681b      	ldr	r3, [r3, #0]
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	00030228 	.word	0x00030228

000b7acc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <hal_i2c_begin+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	68db      	ldr	r3, [r3, #12]
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	00030228 	.word	0x00030228

000b7adc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <hal_i2c_begin_transmission+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	699b      	ldr	r3, [r3, #24]
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	00030228 	.word	0x00030228

000b7aec <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <hal_i2c_end_transmission+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	69db      	ldr	r3, [r3, #28]
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	00030228 	.word	0x00030228

000b7afc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <hal_i2c_write+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6a1b      	ldr	r3, [r3, #32]
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030228 	.word	0x00030228

000b7b0c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <hal_i2c_available+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	00030228 	.word	0x00030228

000b7b1c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <hal_i2c_read+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	00030228 	.word	0x00030228

000b7b2c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <hal_i2c_peek+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030228 	.word	0x00030228

000b7b3c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <hal_i2c_flush+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030228 	.word	0x00030228

000b7b4c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <hal_i2c_is_enabled+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030228 	.word	0x00030228

000b7b5c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <hal_i2c_init+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	00030228 	.word	0x00030228

000b7b6c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <hal_spi_begin+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	681b      	ldr	r3, [r3, #0]
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	00030230 	.word	0x00030230

000b7b7c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <hal_spi_transfer+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	695b      	ldr	r3, [r3, #20]
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	00030230 	.word	0x00030230

000b7b8c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <hal_spi_init+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	69db      	ldr	r3, [r3, #28]
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	00030230 	.word	0x00030230

000b7b9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <hal_spi_is_enabled+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	6a1b      	ldr	r3, [r3, #32]
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	00030230 	.word	0x00030230

000b7bac <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <hal_spi_info+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030230 	.word	0x00030230

000b7bbc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <hal_spi_set_settings+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030230 	.word	0x00030230

000b7bcc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <hal_spi_acquire+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030230 	.word	0x00030230

000b7bdc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <hal_spi_release+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030230 	.word	0x00030230

000b7bec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <HAL_USB_USART_Init+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	681b      	ldr	r3, [r3, #0]
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	0003024c 	.word	0x0003024c

000b7bfc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <HAL_USB_USART_Begin+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	685b      	ldr	r3, [r3, #4]
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	0003024c 	.word	0x0003024c

000b7c0c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <HAL_USB_USART_Available_Data+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	691b      	ldr	r3, [r3, #16]
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	0003024c 	.word	0x0003024c

000b7c1c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	695b      	ldr	r3, [r3, #20]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	0003024c 	.word	0x0003024c

000b7c2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <HAL_USB_USART_Receive_Data+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	699b      	ldr	r3, [r3, #24]
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	0003024c 	.word	0x0003024c

000b7c3c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <HAL_USB_USART_Send_Data+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	69db      	ldr	r3, [r3, #28]
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	0003024c 	.word	0x0003024c

000b7c4c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <HAL_USB_USART_Flush_Data+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	6a1b      	ldr	r3, [r3, #32]
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	0003024c 	.word	0x0003024c

000b7c5c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <panic_+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	00030260 	.word	0x00030260

000b7c6c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <set_system_mode+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	685b      	ldr	r3, [r3, #4]
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	00030220 	.word	0x00030220

000b7c7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <system_delay_ms+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	695b      	ldr	r3, [r3, #20]
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	00030220 	.word	0x00030220

000b7c8c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b03      	ldr	r3, [pc, #12]	; (b7c9c <system_ctrl_set_app_request_handler+0x10>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7c96:	9301      	str	r3, [sp, #4]
   b7c98:	bd08      	pop	{r3, pc}
   b7c9a:	0000      	.short	0x0000
   b7c9c:	00030220 	.word	0x00030220

000b7ca0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7ca0:	b508      	push	{r3, lr}
   b7ca2:	4b03      	ldr	r3, [pc, #12]	; (b7cb0 <system_ctrl_set_result+0x10>)
   b7ca4:	681b      	ldr	r3, [r3, #0]
   b7ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7caa:	9301      	str	r3, [sp, #4]
   b7cac:	bd08      	pop	{r3, pc}
   b7cae:	0000      	.short	0x0000
   b7cb0:	00030220 	.word	0x00030220

000b7cb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7cb4:	b508      	push	{r3, lr}
   b7cb6:	4b02      	ldr	r3, [pc, #8]	; (b7cc0 <network_connect+0xc>)
   b7cb8:	681b      	ldr	r3, [r3, #0]
   b7cba:	685b      	ldr	r3, [r3, #4]
   b7cbc:	9301      	str	r3, [sp, #4]
   b7cbe:	bd08      	pop	{r3, pc}
   b7cc0:	00030240 	.word	0x00030240

000b7cc4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7cc4:	b508      	push	{r3, lr}
   b7cc6:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <network_connecting+0xc>)
   b7cc8:	681b      	ldr	r3, [r3, #0]
   b7cca:	689b      	ldr	r3, [r3, #8]
   b7ccc:	9301      	str	r3, [sp, #4]
   b7cce:	bd08      	pop	{r3, pc}
   b7cd0:	00030240 	.word	0x00030240

000b7cd4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7cd4:	b508      	push	{r3, lr}
   b7cd6:	4b02      	ldr	r3, [pc, #8]	; (b7ce0 <network_disconnect+0xc>)
   b7cd8:	681b      	ldr	r3, [r3, #0]
   b7cda:	68db      	ldr	r3, [r3, #12]
   b7cdc:	9301      	str	r3, [sp, #4]
   b7cde:	bd08      	pop	{r3, pc}
   b7ce0:	00030240 	.word	0x00030240

000b7ce4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7ce4:	b508      	push	{r3, lr}
   b7ce6:	4b02      	ldr	r3, [pc, #8]	; (b7cf0 <network_ready+0xc>)
   b7ce8:	681b      	ldr	r3, [r3, #0]
   b7cea:	691b      	ldr	r3, [r3, #16]
   b7cec:	9301      	str	r3, [sp, #4]
   b7cee:	bd08      	pop	{r3, pc}
   b7cf0:	00030240 	.word	0x00030240

000b7cf4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7cf4:	b508      	push	{r3, lr}
   b7cf6:	4b02      	ldr	r3, [pc, #8]	; (b7d00 <network_on+0xc>)
   b7cf8:	681b      	ldr	r3, [r3, #0]
   b7cfa:	695b      	ldr	r3, [r3, #20]
   b7cfc:	9301      	str	r3, [sp, #4]
   b7cfe:	bd08      	pop	{r3, pc}
   b7d00:	00030240 	.word	0x00030240

000b7d04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7d04:	b508      	push	{r3, lr}
   b7d06:	4b02      	ldr	r3, [pc, #8]	; (b7d10 <network_off+0xc>)
   b7d08:	681b      	ldr	r3, [r3, #0]
   b7d0a:	699b      	ldr	r3, [r3, #24]
   b7d0c:	9301      	str	r3, [sp, #4]
   b7d0e:	bd08      	pop	{r3, pc}
   b7d10:	00030240 	.word	0x00030240

000b7d14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7d14:	b508      	push	{r3, lr}
   b7d16:	4b02      	ldr	r3, [pc, #8]	; (b7d20 <network_listen+0xc>)
   b7d18:	681b      	ldr	r3, [r3, #0]
   b7d1a:	69db      	ldr	r3, [r3, #28]
   b7d1c:	9301      	str	r3, [sp, #4]
   b7d1e:	bd08      	pop	{r3, pc}
   b7d20:	00030240 	.word	0x00030240

000b7d24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7d24:	b508      	push	{r3, lr}
   b7d26:	4b02      	ldr	r3, [pc, #8]	; (b7d30 <network_listening+0xc>)
   b7d28:	681b      	ldr	r3, [r3, #0]
   b7d2a:	6a1b      	ldr	r3, [r3, #32]
   b7d2c:	9301      	str	r3, [sp, #4]
   b7d2e:	bd08      	pop	{r3, pc}
   b7d30:	00030240 	.word	0x00030240

000b7d34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7d34:	b508      	push	{r3, lr}
   b7d36:	4b02      	ldr	r3, [pc, #8]	; (b7d40 <network_set_listen_timeout+0xc>)
   b7d38:	681b      	ldr	r3, [r3, #0]
   b7d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d3c:	9301      	str	r3, [sp, #4]
   b7d3e:	bd08      	pop	{r3, pc}
   b7d40:	00030240 	.word	0x00030240

000b7d44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7d44:	b508      	push	{r3, lr}
   b7d46:	4b02      	ldr	r3, [pc, #8]	; (b7d50 <network_get_listen_timeout+0xc>)
   b7d48:	681b      	ldr	r3, [r3, #0]
   b7d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7d4c:	9301      	str	r3, [sp, #4]
   b7d4e:	bd08      	pop	{r3, pc}
   b7d50:	00030240 	.word	0x00030240

000b7d54 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7d54:	b508      	push	{r3, lr}
   b7d56:	4b02      	ldr	r3, [pc, #8]	; (b7d60 <network_is_on+0xc>)
   b7d58:	681b      	ldr	r3, [r3, #0]
   b7d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d5c:	9301      	str	r3, [sp, #4]
   b7d5e:	bd08      	pop	{r3, pc}
   b7d60:	00030240 	.word	0x00030240

000b7d64 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7d64:	b508      	push	{r3, lr}
   b7d66:	4b02      	ldr	r3, [pc, #8]	; (b7d70 <network_is_off+0xc>)
   b7d68:	681b      	ldr	r3, [r3, #0]
   b7d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d6c:	9301      	str	r3, [sp, #4]
   b7d6e:	bd08      	pop	{r3, pc}
   b7d70:	00030240 	.word	0x00030240

000b7d74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7d74:	b508      	push	{r3, lr}
   b7d76:	4b02      	ldr	r3, [pc, #8]	; (b7d80 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7d78:	681b      	ldr	r3, [r3, #0]
   b7d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d7c:	9301      	str	r3, [sp, #4]
   b7d7e:	bd08      	pop	{r3, pc}
   b7d80:	00030244 	.word	0x00030244

000b7d84 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b7d84:	b508      	push	{r3, lr}
   b7d86:	4b02      	ldr	r3, [pc, #8]	; (b7d90 <spark_cloud_disconnect+0xc>)
   b7d88:	681b      	ldr	r3, [r3, #0]
   b7d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d8c:	9301      	str	r3, [sp, #4]
   b7d8e:	bd08      	pop	{r3, pc}
   b7d90:	00030244 	.word	0x00030244

000b7d94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7d94:	b508      	push	{r3, lr}
   b7d96:	4b02      	ldr	r3, [pc, #8]	; (b7da0 <malloc+0xc>)
   b7d98:	681b      	ldr	r3, [r3, #0]
   b7d9a:	681b      	ldr	r3, [r3, #0]
   b7d9c:	9301      	str	r3, [sp, #4]
   b7d9e:	bd08      	pop	{r3, pc}
   b7da0:	0003021c 	.word	0x0003021c

000b7da4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7da4:	b508      	push	{r3, lr}
   b7da6:	4b02      	ldr	r3, [pc, #8]	; (b7db0 <free+0xc>)
   b7da8:	681b      	ldr	r3, [r3, #0]
   b7daa:	685b      	ldr	r3, [r3, #4]
   b7dac:	9301      	str	r3, [sp, #4]
   b7dae:	bd08      	pop	{r3, pc}
   b7db0:	0003021c 	.word	0x0003021c

000b7db4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7db4:	b508      	push	{r3, lr}
   b7db6:	4b02      	ldr	r3, [pc, #8]	; (b7dc0 <realloc+0xc>)
   b7db8:	681b      	ldr	r3, [r3, #0]
   b7dba:	689b      	ldr	r3, [r3, #8]
   b7dbc:	9301      	str	r3, [sp, #4]
   b7dbe:	bd08      	pop	{r3, pc}
   b7dc0:	0003021c 	.word	0x0003021c

000b7dc4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7dc4:	b508      	push	{r3, lr}
   b7dc6:	4b02      	ldr	r3, [pc, #8]	; (b7dd0 <snprintf+0xc>)
   b7dc8:	681b      	ldr	r3, [r3, #0]
   b7dca:	69db      	ldr	r3, [r3, #28]
   b7dcc:	9301      	str	r3, [sp, #4]
   b7dce:	bd08      	pop	{r3, pc}
   b7dd0:	0003021c 	.word	0x0003021c

000b7dd4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7dd4:	b508      	push	{r3, lr}
   b7dd6:	4b02      	ldr	r3, [pc, #8]	; (b7de0 <vsnprintf+0xc>)
   b7dd8:	681b      	ldr	r3, [r3, #0]
   b7dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ddc:	9301      	str	r3, [sp, #4]
   b7dde:	bd08      	pop	{r3, pc}
   b7de0:	0003021c 	.word	0x0003021c

000b7de4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7de4:	b508      	push	{r3, lr}
   b7de6:	4b02      	ldr	r3, [pc, #8]	; (b7df0 <_malloc_r+0xc>)
   b7de8:	681b      	ldr	r3, [r3, #0]
   b7dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7dec:	9301      	str	r3, [sp, #4]
   b7dee:	bd08      	pop	{r3, pc}
   b7df0:	0003021c 	.word	0x0003021c

000b7df4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7df4:	b508      	push	{r3, lr}
   b7df6:	4b02      	ldr	r3, [pc, #8]	; (b7e00 <__assert_func+0xc>)
   b7df8:	681b      	ldr	r3, [r3, #0]
   b7dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7dfc:	9301      	str	r3, [sp, #4]
   b7dfe:	bd08      	pop	{r3, pc}
   b7e00:	0003021c 	.word	0x0003021c

000b7e04 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7e04:	b508      	push	{r3, lr}
   b7e06:	4b02      	ldr	r3, [pc, #8]	; (b7e10 <newlib_impure_ptr_callback+0xc>)
   b7e08:	681b      	ldr	r3, [r3, #0]
   b7e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7e0c:	9301      	str	r3, [sp, #4]
   b7e0e:	bd08      	pop	{r3, pc}
   b7e10:	0003021c 	.word	0x0003021c

000b7e14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e14:	2200      	movs	r2, #0
   b7e16:	6840      	ldr	r0, [r0, #4]
   b7e18:	4611      	mov	r1, r2
   b7e1a:	f7ff bf83 	b.w	b7d24 <network_listening>

000b7e1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e1e:	2200      	movs	r2, #0
   b7e20:	6840      	ldr	r0, [r0, #4]
   b7e22:	4611      	mov	r1, r2
   b7e24:	f7ff bf8e 	b.w	b7d44 <network_get_listen_timeout>

000b7e28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e28:	6840      	ldr	r0, [r0, #4]
   b7e2a:	2200      	movs	r2, #0
   b7e2c:	f7ff bf82 	b.w	b7d34 <network_set_listen_timeout>

000b7e30 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7e30:	6840      	ldr	r0, [r0, #4]
   b7e32:	2200      	movs	r2, #0
   b7e34:	f081 0101 	eor.w	r1, r1, #1
   b7e38:	f7ff bf6c 	b.w	b7d14 <network_listen>

000b7e3c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7e3c:	2300      	movs	r3, #0
   b7e3e:	6840      	ldr	r0, [r0, #4]
   b7e40:	461a      	mov	r2, r3
   b7e42:	4619      	mov	r1, r3
   b7e44:	f7ff bf5e 	b.w	b7d04 <network_off>

000b7e48 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7e48:	2300      	movs	r3, #0
   b7e4a:	6840      	ldr	r0, [r0, #4]
   b7e4c:	461a      	mov	r2, r3
   b7e4e:	4619      	mov	r1, r3
   b7e50:	f7ff bf50 	b.w	b7cf4 <network_on>

000b7e54 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7e54:	2200      	movs	r2, #0
   b7e56:	6840      	ldr	r0, [r0, #4]
   b7e58:	4611      	mov	r1, r2
   b7e5a:	f7ff bf43 	b.w	b7ce4 <network_ready>

000b7e5e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7e5e:	2200      	movs	r2, #0
   b7e60:	6840      	ldr	r0, [r0, #4]
   b7e62:	4611      	mov	r1, r2
   b7e64:	f7ff bf2e 	b.w	b7cc4 <network_connecting>

000b7e68 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7e68:	6840      	ldr	r0, [r0, #4]
   b7e6a:	2200      	movs	r2, #0
   b7e6c:	2102      	movs	r1, #2
   b7e6e:	f7ff bf31 	b.w	b7cd4 <network_disconnect>

000b7e72 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7e72:	2300      	movs	r3, #0
   b7e74:	6840      	ldr	r0, [r0, #4]
   b7e76:	461a      	mov	r2, r3
   b7e78:	f7ff bf1c 	b.w	b7cb4 <network_connect>

000b7e7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7e7c:	4b02      	ldr	r3, [pc, #8]	; (b7e88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7e7e:	2203      	movs	r2, #3
   b7e80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7e82:	4a02      	ldr	r2, [pc, #8]	; (b7e8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7e84:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7e86:	4770      	bx	lr
   b7e88:	2003e6c4 	.word	0x2003e6c4
   b7e8c:	000babcc 	.word	0x000babcc

000b7e90 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7e90:	2100      	movs	r1, #0
   b7e92:	f7ff bea3 	b.w	b7bdc <hal_spi_release>

000b7e96 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7e96:	2100      	movs	r1, #0
   b7e98:	f7ff be98 	b.w	b7bcc <hal_spi_acquire>

000b7e9c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7e9c:	b510      	push	{r4, lr}
   b7e9e:	4604      	mov	r4, r0
   b7ea0:	4608      	mov	r0, r1
{
    _spi = spi;
   b7ea2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7ea4:	f7ff fe72 	bl	b7b8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7ea8:	2300      	movs	r3, #0
   b7eaa:	6063      	str	r3, [r4, #4]
}
   b7eac:	4620      	mov	r0, r4
   b7eae:	bd10      	pop	{r4, pc}

000b7eb0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7eb0:	b513      	push	{r0, r1, r4, lr}
   b7eb2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7eb4:	7800      	ldrb	r0, [r0, #0]
   b7eb6:	f7ff ffee 	bl	b7e96 <_ZN8SPIClass4lockEv.isra.0>
   b7eba:	b958      	cbnz	r0, b7ed4 <_ZN8SPIClass5beginEv+0x24>
   b7ebc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7ebe:	9001      	str	r0, [sp, #4]
   b7ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7ec4:	f7ff fe52 	bl	b7b6c <hal_spi_begin>
        unlock();
   b7ec8:	9801      	ldr	r0, [sp, #4]
    }
}
   b7eca:	b002      	add	sp, #8
   b7ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ed0:	f7ff bfde 	b.w	b7e90 <_ZN8SPIClass6unlockEv.isra.0>
   b7ed4:	b002      	add	sp, #8
   b7ed6:	bd10      	pop	{r4, pc}

000b7ed8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7ed8:	7800      	ldrb	r0, [r0, #0]
   b7eda:	f7ff bfd9 	b.w	b7e90 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7ee0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7ee0:	0840      	lsrs	r0, r0, #1
{
   b7ee2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7ee4:	6018      	str	r0, [r3, #0]
   b7ee6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7ee8:	6818      	ldr	r0, [r3, #0]
   b7eea:	4288      	cmp	r0, r1
   b7eec:	b2e5      	uxtb	r5, r4
   b7eee:	d906      	bls.n	b7efe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7ef0:	3401      	adds	r4, #1
   b7ef2:	2c08      	cmp	r4, #8
   b7ef4:	d002      	beq.n	b7efc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7ef6:	0840      	lsrs	r0, r0, #1
   b7ef8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7efa:	e7f5      	b.n	b7ee8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7efc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7efe:	4b02      	ldr	r3, [pc, #8]	; (b7f08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7f00:	5d5b      	ldrb	r3, [r3, r5]
   b7f02:	7013      	strb	r3, [r2, #0]
}
   b7f04:	bd30      	pop	{r4, r5, pc}
   b7f06:	bf00      	nop
   b7f08:	000bac00 	.word	0x000bac00

000b7f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7f10:	4606      	mov	r6, r0
   b7f12:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7f14:	7800      	ldrb	r0, [r0, #0]
{
   b7f16:	460c      	mov	r4, r1
    CHECK(lock());
   b7f18:	f7ff ffbd 	bl	b7e96 <_ZN8SPIClass4lockEv.isra.0>
   b7f1c:	2800      	cmp	r0, #0
   b7f1e:	db1b      	blt.n	b7f58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7f20:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7f22:	2214      	movs	r2, #20
   b7f24:	2100      	movs	r1, #0
   b7f26:	a809      	add	r0, sp, #36	; 0x24
   b7f28:	f001 fb92 	bl	b9650 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7f2c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7f2e:	2200      	movs	r2, #0
   b7f30:	a909      	add	r1, sp, #36	; 0x24
   b7f32:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7f34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7f38:	f7ff fe38 	bl	b7bac <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7f3c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7f40:	b113      	cbz	r3, b7f48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7f42:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7f46:	b155      	cbz	r5, b7f5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7f48:	2700      	movs	r7, #0
   b7f4a:	46b9      	mov	r9, r7
   b7f4c:	46b8      	mov	r8, r7
   b7f4e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7f50:	7923      	ldrb	r3, [r4, #4]
   b7f52:	b15d      	cbz	r5, b7f6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7f54:	b1c3      	cbz	r3, b7f88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7f56:	2000      	movs	r0, #0
}
   b7f58:	b00f      	add	sp, #60	; 0x3c
   b7f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7f5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7f62:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7f66:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7f6a:	e7f1      	b.n	b7f50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7f6c:	2b00      	cmp	r3, #0
   b7f6e:	d135      	bne.n	b7fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7f70:	68a3      	ldr	r3, [r4, #8]
   b7f72:	4543      	cmp	r3, r8
   b7f74:	d108      	bne.n	b7f88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7f76:	f88d 9020 	strb.w	r9, [sp, #32]
   b7f7a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7f7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7f82:	89a3      	ldrh	r3, [r4, #12]
   b7f84:	429a      	cmp	r2, r3
   b7f86:	d0e6      	beq.n	b7f56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7f88:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7f8a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7f8c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7f90:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7f92:	ab04      	add	r3, sp, #16
   b7f94:	f10d 020f 	add.w	r2, sp, #15
   b7f98:	f7ff ffa2 	bl	b7ee0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7f9c:	7921      	ldrb	r1, [r4, #4]
   b7f9e:	b985      	cbnz	r5, b7fc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7fa0:	b989      	cbnz	r1, b7fc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7fa2:	68a3      	ldr	r3, [r4, #8]
   b7fa4:	4543      	cmp	r3, r8
   b7fa6:	d30e      	bcc.n	b7fc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7fa8:	f88d 9020 	strb.w	r9, [sp, #32]
   b7fac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7fb0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7fb4:	89a3      	ldrh	r3, [r4, #12]
   b7fb6:	429a      	cmp	r2, r3
   b7fb8:	d105      	bne.n	b7fc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7fba:	9b04      	ldr	r3, [sp, #16]
   b7fbc:	4543      	cmp	r3, r8
   b7fbe:	d102      	bne.n	b7fc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7fc0:	e7c9      	b.n	b7f56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7fc2:	2900      	cmp	r1, #0
   b7fc4:	d1f9      	bne.n	b7fba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7fc6:	2300      	movs	r3, #0
   b7fc8:	9301      	str	r3, [sp, #4]
   b7fca:	7b63      	ldrb	r3, [r4, #13]
   b7fcc:	9300      	str	r3, [sp, #0]
   b7fce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7fd2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7fd4:	7830      	ldrb	r0, [r6, #0]
   b7fd6:	f7ff fdf1 	bl	b7bbc <hal_spi_set_settings>
   b7fda:	e7bc      	b.n	b7f56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7fdc:	e9cd 5500 	strd	r5, r5, [sp]
   b7fe0:	462b      	mov	r3, r5
   b7fe2:	462a      	mov	r2, r5
   b7fe4:	2101      	movs	r1, #1
   b7fe6:	e7f5      	b.n	b7fd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7fe8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7fe8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7fea:	7800      	ldrb	r0, [r0, #0]
   b7fec:	f7ff fdc6 	bl	b7b7c <hal_spi_transfer>
}
   b7ff0:	b2c0      	uxtb	r0, r0
   b7ff2:	bd08      	pop	{r3, pc}

000b7ff4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7ff4:	4b05      	ldr	r3, [pc, #20]	; (b800c <_GLOBAL__sub_I_System+0x18>)
   b7ff6:	2202      	movs	r2, #2
   b7ff8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7ffa:	4b05      	ldr	r3, [pc, #20]	; (b8010 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7ffc:	4a05      	ldr	r2, [pc, #20]	; (b8014 <_GLOBAL__sub_I_System+0x20>)
   b7ffe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8000:	2000      	movs	r0, #0
   b8002:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8006:	f7ff be31 	b.w	b7c6c <set_system_mode>
   b800a:	bf00      	nop
   b800c:	2003e6d8 	.word	0x2003e6d8
   b8010:	2003e6cc 	.word	0x2003e6cc
   b8014:	ffff0000 	.word	0xffff0000

000b8018 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8018:	b510      	push	{r4, lr}
   b801a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b801c:	f001 fb66 	bl	b96ec <strlen>
   b8020:	3801      	subs	r0, #1
   b8022:	1823      	adds	r3, r4, r0
   b8024:	4620      	mov	r0, r4
	while(i<j){
   b8026:	4283      	cmp	r3, r0
   b8028:	d906      	bls.n	b8038 <_Z11str_reversePc+0x20>
		c = *i;
   b802a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b802c:	7819      	ldrb	r1, [r3, #0]
   b802e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8032:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8036:	e7f6      	b.n	b8026 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8038:	bd10      	pop	{r4, pc}

000b803a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b803a:	b570      	push	{r4, r5, r6, lr}
   b803c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b803e:	1e91      	subs	r1, r2, #2
   b8040:	2922      	cmp	r1, #34	; 0x22
   b8042:	d81d      	bhi.n	b8080 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8044:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8046:	b930      	cbnz	r0, b8056 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8048:	4423      	add	r3, r4
            *ptr++ = '0';
   b804a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b804c:	429d      	cmp	r5, r3
   b804e:	d210      	bcs.n	b8072 <ultoa+0x38>
            *ptr++ = '0';
   b8050:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8054:	e7fa      	b.n	b804c <ultoa+0x12>
            result.quot = a/radix;
   b8056:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b805a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b805e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8060:	2809      	cmp	r0, #9
                *ptr += '0';
   b8062:	bf94      	ite	ls
   b8064:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8066:	3157      	addhi	r1, #87	; 0x57
   b8068:	b2c9      	uxtb	r1, r1
   b806a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b806e:	4630      	mov	r0, r6
	while(a){
   b8070:	e7e9      	b.n	b8046 <ultoa+0xc>

	*ptr = '\0';
   b8072:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8074:	4620      	mov	r0, r4
	*ptr = '\0';
   b8076:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8078:	f7ff ffce 	bl	b8018 <_Z11str_reversePc>
	return buffer;
   b807c:	4620      	mov	r0, r4
}
   b807e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8080:	2000      	movs	r0, #0
   b8082:	e7fc      	b.n	b807e <ultoa+0x44>

000b8084 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8084:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8086:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8088:	460c      	mov	r4, r1
   b808a:	4615      	mov	r5, r2
	if(a<0){
   b808c:	da0e      	bge.n	b80ac <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b808e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8092:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8096:	bf14      	ite	ne
   b8098:	4258      	negne	r0, r3
   b809a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b809c:	2301      	movs	r3, #1
		*buffer = '-';
   b809e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b80a0:	462a      	mov	r2, r5
   b80a2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b80a4:	f7ff ffc9 	bl	b803a <ultoa>
	}
	return buffer;
}
   b80a8:	4620      	mov	r0, r4
   b80aa:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b80ac:	2301      	movs	r3, #1
   b80ae:	e7f9      	b.n	b80a4 <itoa+0x20>

000b80b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b80b0:	b510      	push	{r4, lr}
   b80b2:	4604      	mov	r4, r0
{
	free(buffer);
   b80b4:	6800      	ldr	r0, [r0, #0]
   b80b6:	f7ff fe75 	bl	b7da4 <free>
}
   b80ba:	4620      	mov	r0, r4
   b80bc:	bd10      	pop	{r4, pc}

000b80be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b80be:	b510      	push	{r4, lr}
   b80c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b80c2:	6800      	ldr	r0, [r0, #0]
   b80c4:	b108      	cbz	r0, b80ca <_ZN6String10invalidateEv+0xc>
   b80c6:	f7ff fe6d 	bl	b7da4 <free>
	buffer = NULL;
   b80ca:	2300      	movs	r3, #0
	capacity = len = 0;
   b80cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b80d0:	6023      	str	r3, [r4, #0]
}
   b80d2:	bd10      	pop	{r4, pc}

000b80d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b80d4:	b538      	push	{r3, r4, r5, lr}
   b80d6:	4604      	mov	r4, r0
   b80d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b80da:	6800      	ldr	r0, [r0, #0]
   b80dc:	3101      	adds	r1, #1
   b80de:	f7ff fe69 	bl	b7db4 <realloc>
	if (newbuffer) {
   b80e2:	b110      	cbz	r0, b80ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b80e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b80e8:	2001      	movs	r0, #1
	}
	return 0;
}
   b80ea:	bd38      	pop	{r3, r4, r5, pc}

000b80ec <_ZN6String7reserveEj>:
{
   b80ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b80ee:	6803      	ldr	r3, [r0, #0]
{
   b80f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b80f2:	b123      	cbz	r3, b80fe <_ZN6String7reserveEj+0x12>
   b80f4:	6843      	ldr	r3, [r0, #4]
   b80f6:	428b      	cmp	r3, r1
   b80f8:	d301      	bcc.n	b80fe <_ZN6String7reserveEj+0x12>
   b80fa:	2001      	movs	r0, #1
}
   b80fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b80fe:	4620      	mov	r0, r4
   b8100:	f7ff ffe8 	bl	b80d4 <_ZN6String12changeBufferEj>
   b8104:	2800      	cmp	r0, #0
   b8106:	d0f9      	beq.n	b80fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8108:	68a3      	ldr	r3, [r4, #8]
   b810a:	2b00      	cmp	r3, #0
   b810c:	d1f5      	bne.n	b80fa <_ZN6String7reserveEj+0xe>
   b810e:	6822      	ldr	r2, [r4, #0]
   b8110:	7013      	strb	r3, [r2, #0]
   b8112:	e7f2      	b.n	b80fa <_ZN6String7reserveEj+0xe>

000b8114 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8114:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8116:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8118:	4611      	mov	r1, r2
   b811a:	9201      	str	r2, [sp, #4]
{
   b811c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b811e:	f7ff ffe5 	bl	b80ec <_ZN6String7reserveEj>
   b8122:	9a01      	ldr	r2, [sp, #4]
   b8124:	b928      	cbnz	r0, b8132 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8126:	4620      	mov	r0, r4
   b8128:	f7ff ffc9 	bl	b80be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b812c:	4620      	mov	r0, r4
   b812e:	b003      	add	sp, #12
   b8130:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8132:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8134:	4629      	mov	r1, r5
   b8136:	6820      	ldr	r0, [r4, #0]
   b8138:	f001 fa7c 	bl	b9634 <memcpy>
	buffer[len] = 0;
   b813c:	6822      	ldr	r2, [r4, #0]
   b813e:	68a3      	ldr	r3, [r4, #8]
   b8140:	2100      	movs	r1, #0
   b8142:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8144:	e7f2      	b.n	b812c <_ZN6String4copyEPKcj+0x18>

000b8146 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8146:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8148:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b814a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b814e:	4604      	mov	r4, r0
	len = 0;
   b8150:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8152:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8154:	b141      	cbz	r1, b8168 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8156:	4608      	mov	r0, r1
   b8158:	9101      	str	r1, [sp, #4]
   b815a:	f001 fac7 	bl	b96ec <strlen>
   b815e:	9901      	ldr	r1, [sp, #4]
   b8160:	4602      	mov	r2, r0
   b8162:	4620      	mov	r0, r4
   b8164:	f7ff ffd6 	bl	b8114 <_ZN6String4copyEPKcj>
}
   b8168:	4620      	mov	r0, r4
   b816a:	b002      	add	sp, #8
   b816c:	bd10      	pop	{r4, pc}

000b816e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b816e:	4288      	cmp	r0, r1
{
   b8170:	b510      	push	{r4, lr}
   b8172:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8174:	d005      	beq.n	b8182 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8176:	680b      	ldr	r3, [r1, #0]
   b8178:	b12b      	cbz	r3, b8186 <_ZN6StringaSERKS_+0x18>
   b817a:	688a      	ldr	r2, [r1, #8]
   b817c:	4619      	mov	r1, r3
   b817e:	f7ff ffc9 	bl	b8114 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8182:	4620      	mov	r0, r4
   b8184:	bd10      	pop	{r4, pc}
	else invalidate();
   b8186:	f7ff ff9a 	bl	b80be <_ZN6String10invalidateEv>
   b818a:	e7fa      	b.n	b8182 <_ZN6StringaSERKS_+0x14>

000b818c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b818c:	b510      	push	{r4, lr}
	buffer = NULL;
   b818e:	2300      	movs	r3, #0
String::String(const String &value)
   b8190:	4604      	mov	r4, r0
	capacity = 0;
   b8192:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8196:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8198:	7303      	strb	r3, [r0, #12]
	*this = value;
   b819a:	f7ff ffe8 	bl	b816e <_ZN6StringaSERKS_>
}
   b819e:	4620      	mov	r0, r4
   b81a0:	bd10      	pop	{r4, pc}

000b81a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b81a2:	b513      	push	{r0, r1, r4, lr}
   b81a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b81a6:	b159      	cbz	r1, b81c0 <_ZN6StringaSEPKc+0x1e>
   b81a8:	4608      	mov	r0, r1
   b81aa:	9101      	str	r1, [sp, #4]
   b81ac:	f001 fa9e 	bl	b96ec <strlen>
   b81b0:	9901      	ldr	r1, [sp, #4]
   b81b2:	4602      	mov	r2, r0
   b81b4:	4620      	mov	r0, r4
   b81b6:	f7ff ffad 	bl	b8114 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b81ba:	4620      	mov	r0, r4
   b81bc:	b002      	add	sp, #8
   b81be:	bd10      	pop	{r4, pc}
	else invalidate();
   b81c0:	f7ff ff7d 	bl	b80be <_ZN6String10invalidateEv>
   b81c4:	e7f9      	b.n	b81ba <_ZN6StringaSEPKc+0x18>

000b81c6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b81c6:	b510      	push	{r4, lr}
   b81c8:	4604      	mov	r4, r0
   b81ca:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b81cc:	2300      	movs	r3, #0
	capacity = 0;
   b81ce:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b81d2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b81d4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b81d6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b81d8:	a901      	add	r1, sp, #4
   b81da:	f7ff ff53 	bl	b8084 <itoa>
	*this = buf;
   b81de:	a901      	add	r1, sp, #4
   b81e0:	4620      	mov	r0, r4
   b81e2:	f7ff ffde 	bl	b81a2 <_ZN6StringaSEPKc>
}
   b81e6:	4620      	mov	r0, r4
   b81e8:	b00a      	add	sp, #40	; 0x28
   b81ea:	bd10      	pop	{r4, pc}

000b81ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b81ec:	b570      	push	{r4, r5, r6, lr}
   b81ee:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b81f0:	460e      	mov	r6, r1
   b81f2:	b909      	cbnz	r1, b81f8 <_ZN6String6concatEPKcj+0xc>
   b81f4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b81f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b81f8:	b16a      	cbz	r2, b8216 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b81fa:	6884      	ldr	r4, [r0, #8]
   b81fc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81fe:	4621      	mov	r1, r4
   b8200:	f7ff ff74 	bl	b80ec <_ZN6String7reserveEj>
   b8204:	2800      	cmp	r0, #0
   b8206:	d0f5      	beq.n	b81f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8208:	6828      	ldr	r0, [r5, #0]
   b820a:	68ab      	ldr	r3, [r5, #8]
   b820c:	4631      	mov	r1, r6
   b820e:	4418      	add	r0, r3
   b8210:	f001 fa64 	bl	b96dc <strcpy>
	len = newlen;
   b8214:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8216:	2001      	movs	r0, #1
   b8218:	e7ed      	b.n	b81f6 <_ZN6String6concatEPKcj+0xa>

000b821a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b821a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b821c:	688a      	ldr	r2, [r1, #8]
   b821e:	6809      	ldr	r1, [r1, #0]
{
   b8220:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8222:	f7ff ffe3 	bl	b81ec <_ZN6String6concatEPKcj>
   b8226:	b910      	cbnz	r0, b822e <_ZplRK15StringSumHelperRK6String+0x14>
   b8228:	4620      	mov	r0, r4
   b822a:	f7ff ff48 	bl	b80be <_ZN6String10invalidateEv>
	return a;
}
   b822e:	4620      	mov	r0, r4
   b8230:	bd10      	pop	{r4, pc}

000b8232 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8232:	b513      	push	{r0, r1, r4, lr}
   b8234:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8236:	b929      	cbnz	r1, b8244 <_ZplRK15StringSumHelperPKc+0x12>
   b8238:	4620      	mov	r0, r4
   b823a:	f7ff ff40 	bl	b80be <_ZN6String10invalidateEv>
	return a;
}
   b823e:	4620      	mov	r0, r4
   b8240:	b002      	add	sp, #8
   b8242:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8244:	4608      	mov	r0, r1
   b8246:	9101      	str	r1, [sp, #4]
   b8248:	f001 fa50 	bl	b96ec <strlen>
   b824c:	9901      	ldr	r1, [sp, #4]
   b824e:	4602      	mov	r2, r0
   b8250:	4620      	mov	r0, r4
   b8252:	f7ff ffcb 	bl	b81ec <_ZN6String6concatEPKcj>
   b8256:	2800      	cmp	r0, #0
   b8258:	d0ee      	beq.n	b8238 <_ZplRK15StringSumHelperPKc+0x6>
   b825a:	e7f0      	b.n	b823e <_ZplRK15StringSumHelperPKc+0xc>

000b825c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b825c:	4802      	ldr	r0, [pc, #8]	; (b8268 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b825e:	2300      	movs	r3, #0
   b8260:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8262:	f7ff bbdb 	b.w	b7a1c <os_mutex_recursive_create>
   b8266:	bf00      	nop
   b8268:	2003e6dc 	.word	0x2003e6dc

000b826c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b826e:	4606      	mov	r6, r0
   b8270:	460d      	mov	r5, r1
  size_t n = 0;
   b8272:	188f      	adds	r7, r1, r2
   b8274:	2400      	movs	r4, #0
  while (size--) {
   b8276:	42bd      	cmp	r5, r7
   b8278:	d00c      	beq.n	b8294 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b827a:	6833      	ldr	r3, [r6, #0]
   b827c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8280:	689b      	ldr	r3, [r3, #8]
   b8282:	4630      	mov	r0, r6
   b8284:	4798      	blx	r3
     if (chunk>=0)
   b8286:	1e03      	subs	r3, r0, #0
   b8288:	db01      	blt.n	b828e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b828a:	441c      	add	r4, r3
  while (size--) {
   b828c:	e7f3      	b.n	b8276 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b828e:	2c00      	cmp	r4, #0
   b8290:	bf08      	it	eq
   b8292:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8294:	4620      	mov	r0, r4
   b8296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8298 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8298:	b513      	push	{r0, r1, r4, lr}
   b829a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b829c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b829e:	b159      	cbz	r1, b82b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b82a0:	9101      	str	r1, [sp, #4]
   b82a2:	f001 fa23 	bl	b96ec <strlen>
   b82a6:	6823      	ldr	r3, [r4, #0]
   b82a8:	9901      	ldr	r1, [sp, #4]
   b82aa:	68db      	ldr	r3, [r3, #12]
   b82ac:	4602      	mov	r2, r0
   b82ae:	4620      	mov	r0, r4
    }
   b82b0:	b002      	add	sp, #8
   b82b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b82b6:	4718      	bx	r3
    }
   b82b8:	b002      	add	sp, #8
   b82ba:	bd10      	pop	{r4, pc}

000b82bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b82bc:	b508      	push	{r3, lr}
  return write(str);
   b82be:	f7ff ffeb 	bl	b8298 <_ZN5Print5writeEPKc>
}
   b82c2:	bd08      	pop	{r3, pc}

000b82c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b82c4:	6803      	ldr	r3, [r0, #0]
   b82c6:	689b      	ldr	r3, [r3, #8]
   b82c8:	4718      	bx	r3

000b82ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b82ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b82cc:	210d      	movs	r1, #13
{
   b82ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b82d0:	f7ff fff8 	bl	b82c4 <_ZN5Print5printEc>
  n += print('\n');
   b82d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b82d6:	4604      	mov	r4, r0
  n += print('\n');
   b82d8:	4628      	mov	r0, r5
   b82da:	f7ff fff3 	bl	b82c4 <_ZN5Print5printEc>
  return n;
}
   b82de:	4420      	add	r0, r4
   b82e0:	bd38      	pop	{r3, r4, r5, pc}

000b82e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b82e2:	b538      	push	{r3, r4, r5, lr}
   b82e4:	4605      	mov	r5, r0
  return write(str);
   b82e6:	f7ff ffd7 	bl	b8298 <_ZN5Print5writeEPKc>
   b82ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b82ec:	4628      	mov	r0, r5
   b82ee:	f7ff ffec 	bl	b82ca <_ZN5Print7printlnEv>
  return n;
}
   b82f2:	4420      	add	r0, r4
   b82f4:	bd38      	pop	{r3, r4, r5, pc}

000b82f6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b82f6:	b530      	push	{r4, r5, lr}
   b82f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b82fa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b82fc:	2a01      	cmp	r2, #1
  *str = '\0';
   b82fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8302:	bf98      	it	ls
   b8304:	220a      	movls	r2, #10
   b8306:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8308:	460d      	mov	r5, r1
   b830a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b830e:	fb01 5312 	mls	r3, r1, r2, r5
   b8312:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8316:	2b09      	cmp	r3, #9
   b8318:	bf94      	ite	ls
   b831a:	3330      	addls	r3, #48	; 0x30
   b831c:	3337      	addhi	r3, #55	; 0x37
   b831e:	b2db      	uxtb	r3, r3
  } while(n);
   b8320:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8322:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8326:	d9ef      	bls.n	b8308 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8328:	4621      	mov	r1, r4
   b832a:	f7ff ffb5 	bl	b8298 <_ZN5Print5writeEPKc>
}
   b832e:	b00b      	add	sp, #44	; 0x2c
   b8330:	bd30      	pop	{r4, r5, pc}

000b8332 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8336:	b086      	sub	sp, #24
   b8338:	af00      	add	r7, sp, #0
   b833a:	4605      	mov	r5, r0
   b833c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b833e:	1d38      	adds	r0, r7, #4
   b8340:	2114      	movs	r1, #20
{
   b8342:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8344:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8346:	f7ff fd45 	bl	b7dd4 <vsnprintf>

    if (n<bufsize)
   b834a:	2813      	cmp	r0, #19
   b834c:	d80e      	bhi.n	b836c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b834e:	1d39      	adds	r1, r7, #4
   b8350:	4628      	mov	r0, r5
   b8352:	f7ff ffa1 	bl	b8298 <_ZN5Print5writeEPKc>
   b8356:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8358:	b11e      	cbz	r6, b8362 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b835a:	4628      	mov	r0, r5
   b835c:	f7ff ffb5 	bl	b82ca <_ZN5Print7printlnEv>
   b8360:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8362:	4620      	mov	r0, r4
   b8364:	3718      	adds	r7, #24
   b8366:	46bd      	mov	sp, r7
   b8368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b836c:	f100 0308 	add.w	r3, r0, #8
   b8370:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8374:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8376:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b837a:	4622      	mov	r2, r4
   b837c:	1c41      	adds	r1, r0, #1
   b837e:	683b      	ldr	r3, [r7, #0]
   b8380:	4668      	mov	r0, sp
   b8382:	f7ff fd27 	bl	b7dd4 <vsnprintf>
  return write(str);
   b8386:	4669      	mov	r1, sp
   b8388:	4628      	mov	r0, r5
   b838a:	f7ff ff85 	bl	b8298 <_ZN5Print5writeEPKc>
   b838e:	4604      	mov	r4, r0
   b8390:	46c5      	mov	sp, r8
   b8392:	e7e1      	b.n	b8358 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8394 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8394:	4b01      	ldr	r3, [pc, #4]	; (b839c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8396:	4a02      	ldr	r2, [pc, #8]	; (b83a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8398:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b839a:	4770      	bx	lr
   b839c:	2003e6e0 	.word	0x2003e6e0
   b83a0:	000bac08 	.word	0x000bac08

000b83a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b83a4:	4b02      	ldr	r3, [pc, #8]	; (b83b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b83a6:	681a      	ldr	r2, [r3, #0]
   b83a8:	4b02      	ldr	r3, [pc, #8]	; (b83b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b83aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b83ac:	4770      	bx	lr
   b83ae:	bf00      	nop
   b83b0:	2003df70 	.word	0x2003df70
   b83b4:	2003e6e4 	.word	0x2003e6e4

000b83b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b83b8:	2100      	movs	r1, #0
   b83ba:	f7ff bc5f 	b.w	b7c7c <system_delay_ms>
	...

000b83c0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b83c0:	4b01      	ldr	r3, [pc, #4]	; (b83c8 <_GLOBAL__sub_I_RGB+0x8>)
   b83c2:	2200      	movs	r2, #0
   b83c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b83c6:	4770      	bx	lr
   b83c8:	2003e6e8 	.word	0x2003e6e8

000b83cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b83cc:	4b01      	ldr	r3, [pc, #4]	; (b83d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b83ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b83d0:	4770      	bx	lr
   b83d2:	bf00      	nop
   b83d4:	2003df74 	.word	0x2003df74

000b83d8 <serialEventRun>:
{
   b83d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b83da:	4b0b      	ldr	r3, [pc, #44]	; (b8408 <serialEventRun+0x30>)
   b83dc:	b143      	cbz	r3, b83f0 <serialEventRun+0x18>
   b83de:	f000 f981 	bl	b86e4 <_Z16_fetch_usbserialv>
   b83e2:	6803      	ldr	r3, [r0, #0]
   b83e4:	691b      	ldr	r3, [r3, #16]
   b83e6:	4798      	blx	r3
   b83e8:	2800      	cmp	r0, #0
   b83ea:	dd01      	ble.n	b83f0 <serialEventRun+0x18>
        serialEvent();
   b83ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b83f0:	4b06      	ldr	r3, [pc, #24]	; (b840c <serialEventRun+0x34>)
   b83f2:	b143      	cbz	r3, b8406 <serialEventRun+0x2e>
   b83f4:	f000 fbe8 	bl	b8bc8 <_Z22__fetch_global_Serial1v>
   b83f8:	6803      	ldr	r3, [r0, #0]
   b83fa:	691b      	ldr	r3, [r3, #16]
   b83fc:	4798      	blx	r3
   b83fe:	2800      	cmp	r0, #0
   b8400:	dd01      	ble.n	b8406 <serialEventRun+0x2e>
        serialEvent1();
   b8402:	f3af 8000 	nop.w
}
   b8406:	bd08      	pop	{r3, pc}
	...

000b8410 <_post_loop>:
{
   b8410:	b508      	push	{r3, lr}
	serialEventRun();
   b8412:	f7ff ffe1 	bl	b83d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8416:	f7ff faf9 	bl	b7a0c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b841a:	4b01      	ldr	r3, [pc, #4]	; (b8420 <_post_loop+0x10>)
   b841c:	6018      	str	r0, [r3, #0]
}
   b841e:	bd08      	pop	{r3, pc}
   b8420:	2003e740 	.word	0x2003e740

000b8424 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8424:	4805      	ldr	r0, [pc, #20]	; (b843c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8426:	4a06      	ldr	r2, [pc, #24]	; (b8440 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8428:	4906      	ldr	r1, [pc, #24]	; (b8444 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b842a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b842c:	1a12      	subs	r2, r2, r0
   b842e:	f001 f901 	bl	b9634 <memcpy>
    __backup_sram_signature = signature;
   b8432:	4b05      	ldr	r3, [pc, #20]	; (b8448 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8434:	4a05      	ldr	r2, [pc, #20]	; (b844c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8436:	601a      	str	r2, [r3, #0]
}
   b8438:	bd08      	pop	{r3, pc}
   b843a:	bf00      	nop
   b843c:	2003f400 	.word	0x2003f400
   b8440:	2003f404 	.word	0x2003f404
   b8444:	000baea4 	.word	0x000baea4
   b8448:	2003f400 	.word	0x2003f400
   b844c:	9a271c1e 	.word	0x9a271c1e

000b8450 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8450:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8452:	2300      	movs	r3, #0
   b8454:	9300      	str	r3, [sp, #0]
   b8456:	461a      	mov	r2, r3
   b8458:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b845c:	f7ff fc20 	bl	b7ca0 <system_ctrl_set_result>
}
   b8460:	b003      	add	sp, #12
   b8462:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8468 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8468:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b846a:	8843      	ldrh	r3, [r0, #2]
   b846c:	2b0a      	cmp	r3, #10
   b846e:	d008      	beq.n	b8482 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8470:	2b50      	cmp	r3, #80	; 0x50
   b8472:	d10b      	bne.n	b848c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8474:	4b09      	ldr	r3, [pc, #36]	; (b849c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8476:	681b      	ldr	r3, [r3, #0]
   b8478:	b14b      	cbz	r3, b848e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b847a:	b003      	add	sp, #12
   b847c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8480:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8482:	f7ff ffe5 	bl	b8450 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8486:	b003      	add	sp, #12
   b8488:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b848c:	2300      	movs	r3, #0
   b848e:	9300      	str	r3, [sp, #0]
   b8490:	461a      	mov	r2, r3
   b8492:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8496:	f7ff fc03 	bl	b7ca0 <system_ctrl_set_result>
}
   b849a:	e7f4      	b.n	b8486 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b849c:	2003e6fc 	.word	0x2003e6fc

000b84a0 <module_user_init_hook>:
{
   b84a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b84a2:	4812      	ldr	r0, [pc, #72]	; (b84ec <module_user_init_hook+0x4c>)
   b84a4:	2100      	movs	r1, #0
   b84a6:	f7ff fcad 	bl	b7e04 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b84aa:	4b11      	ldr	r3, [pc, #68]	; (b84f0 <module_user_init_hook+0x50>)
   b84ac:	681a      	ldr	r2, [r3, #0]
   b84ae:	4b11      	ldr	r3, [pc, #68]	; (b84f4 <module_user_init_hook+0x54>)
   b84b0:	429a      	cmp	r2, r3
   b84b2:	4b11      	ldr	r3, [pc, #68]	; (b84f8 <module_user_init_hook+0x58>)
   b84b4:	bf0c      	ite	eq
   b84b6:	2201      	moveq	r2, #1
   b84b8:	2200      	movne	r2, #0
   b84ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b84bc:	d001      	beq.n	b84c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b84be:	f7ff ffb1 	bl	b8424 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b84c2:	f7ff fa93 	bl	b79ec <HAL_RNG_GetRandomNumber>
   b84c6:	4604      	mov	r4, r0
    srand(seed);
   b84c8:	f001 f8da 	bl	b9680 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b84cc:	4b0b      	ldr	r3, [pc, #44]	; (b84fc <module_user_init_hook+0x5c>)
   b84ce:	b113      	cbz	r3, b84d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b84d0:	4620      	mov	r0, r4
   b84d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b84d6:	2100      	movs	r1, #0
   b84d8:	4808      	ldr	r0, [pc, #32]	; (b84fc <module_user_init_hook+0x5c>)
   b84da:	f7ff fc4b 	bl	b7d74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b84de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b84e2:	4807      	ldr	r0, [pc, #28]	; (b8500 <module_user_init_hook+0x60>)
   b84e4:	2100      	movs	r1, #0
   b84e6:	f7ff bbd1 	b.w	b7c8c <system_ctrl_set_app_request_handler>
   b84ea:	bf00      	nop
   b84ec:	000b83cd 	.word	0x000b83cd
   b84f0:	2003f400 	.word	0x2003f400
   b84f4:	9a271c1e 	.word	0x9a271c1e
   b84f8:	2003e6f8 	.word	0x2003e6f8
   b84fc:	00000000 	.word	0x00000000
   b8500:	000b8469 	.word	0x000b8469

000b8504 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b8504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b8506:	230c      	movs	r3, #12
   b8508:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b850c:	6803      	ldr	r3, [r0, #0]
   b850e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b8512:	7a03      	ldrb	r3, [r0, #8]
   b8514:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b8518:	6843      	ldr	r3, [r0, #4]
   b851a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b851c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b851e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b8520:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8524:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b8526:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b852a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b852e:	f7ff fc29 	bl	b7d84 <spark_cloud_disconnect>
}
   b8532:	b005      	add	sp, #20
   b8534:	f85d fb04 	ldr.w	pc, [sp], #4

000b8538 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8538:	4770      	bx	lr

000b853a <_ZN9IPAddressD0Ev>:
   b853a:	b510      	push	{r4, lr}
   b853c:	2118      	movs	r1, #24
   b853e:	4604      	mov	r4, r0
   b8540:	f7fb fdab 	bl	b409a <_ZdlPvj>
   b8544:	4620      	mov	r0, r4
   b8546:	bd10      	pop	{r4, pc}

000b8548 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8548:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b854a:	7d03      	ldrb	r3, [r0, #20]
   b854c:	2b06      	cmp	r3, #6
{
   b854e:	b08d      	sub	sp, #52	; 0x34
   b8550:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8552:	f100 0704 	add.w	r7, r0, #4
   b8556:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b855a:	d012      	beq.n	b8582 <_ZNK9IPAddress7printToER5Print+0x3a>
   b855c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8560:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8564:	220a      	movs	r2, #10
   b8566:	4630      	mov	r0, r6
   b8568:	f7ff fec5 	bl	b82f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b856c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b856e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8570:	d019      	beq.n	b85a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8572:	2c00      	cmp	r4, #0
   b8574:	d0f4      	beq.n	b8560 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8576:	212e      	movs	r1, #46	; 0x2e
   b8578:	4630      	mov	r0, r6
   b857a:	f7ff fea3 	bl	b82c4 <_ZN5Print5printEc>
   b857e:	4404      	add	r4, r0
   b8580:	e7ee      	b.n	b8560 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8582:	232f      	movs	r3, #47	; 0x2f
   b8584:	466a      	mov	r2, sp
   b8586:	4639      	mov	r1, r7
   b8588:	200a      	movs	r0, #10
		buf[0] = 0;
   b858a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b858e:	f7ff fa4d 	bl	b7a2c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8592:	4668      	mov	r0, sp
   b8594:	f001 f8aa 	bl	b96ec <strlen>
   b8598:	6833      	ldr	r3, [r6, #0]
   b859a:	4602      	mov	r2, r0
   b859c:	68db      	ldr	r3, [r3, #12]
   b859e:	4669      	mov	r1, sp
   b85a0:	4630      	mov	r0, r6
   b85a2:	4798      	blx	r3
   b85a4:	4604      	mov	r4, r0
    }
    return n;
}
   b85a6:	4620      	mov	r0, r4
   b85a8:	b00d      	add	sp, #52	; 0x34
   b85aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b85ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b85ac:	b510      	push	{r4, lr}
   b85ae:	4b05      	ldr	r3, [pc, #20]	; (b85c4 <_ZN9IPAddressC1Ev+0x18>)
   b85b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b85b2:	2211      	movs	r2, #17
   b85b4:	f840 3b04 	str.w	r3, [r0], #4
   b85b8:	2100      	movs	r1, #0
   b85ba:	f001 f849 	bl	b9650 <memset>
}
   b85be:	4620      	mov	r0, r4
   b85c0:	bd10      	pop	{r4, pc}
   b85c2:	bf00      	nop
   b85c4:	000bac30 	.word	0x000bac30

000b85c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b85c8:	4603      	mov	r3, r0
   b85ca:	4a07      	ldr	r2, [pc, #28]	; (b85e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b85cc:	b510      	push	{r4, lr}
   b85ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b85d2:	f101 0210 	add.w	r2, r1, #16
   b85d6:	f851 4b04 	ldr.w	r4, [r1], #4
   b85da:	f843 4b04 	str.w	r4, [r3], #4
   b85de:	4291      	cmp	r1, r2
   b85e0:	d1f9      	bne.n	b85d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b85e2:	780a      	ldrb	r2, [r1, #0]
   b85e4:	701a      	strb	r2, [r3, #0]
}
   b85e6:	bd10      	pop	{r4, pc}
   b85e8:	000bac30 	.word	0x000bac30

000b85ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b85ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b85ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b85f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b85f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b85fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b85fe:	2304      	movs	r3, #4
   b8600:	6041      	str	r1, [r0, #4]
   b8602:	7503      	strb	r3, [r0, #20]
}
   b8604:	bd10      	pop	{r4, pc}
	...

000b8608 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8608:	b507      	push	{r0, r1, r2, lr}
   b860a:	4b06      	ldr	r3, [pc, #24]	; (b8624 <_ZN9IPAddressC1EPKh+0x1c>)
   b860c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b860e:	78cb      	ldrb	r3, [r1, #3]
   b8610:	9300      	str	r3, [sp, #0]
   b8612:	788b      	ldrb	r3, [r1, #2]
   b8614:	784a      	ldrb	r2, [r1, #1]
   b8616:	7809      	ldrb	r1, [r1, #0]
   b8618:	f7ff ffe8 	bl	b85ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b861c:	b003      	add	sp, #12
   b861e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8622:	bf00      	nop
   b8624:	000bac30 	.word	0x000bac30

000b8628 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8628:	7441      	strb	r1, [r0, #17]
}
   b862a:	4770      	bx	lr

000b862c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b862c:	4770      	bx	lr

000b862e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b862e:	4770      	bx	lr

000b8630 <_ZN9USBSerial4readEv>:
{
   b8630:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8632:	2100      	movs	r1, #0
   b8634:	7c00      	ldrb	r0, [r0, #16]
   b8636:	f7ff faf9 	bl	b7c2c <HAL_USB_USART_Receive_Data>
}
   b863a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b863e:	bd08      	pop	{r3, pc}

000b8640 <_ZN9USBSerial4peekEv>:
{
   b8640:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8642:	2101      	movs	r1, #1
   b8644:	7c00      	ldrb	r0, [r0, #16]
   b8646:	f7ff faf1 	bl	b7c2c <HAL_USB_USART_Receive_Data>
}
   b864a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b864e:	bd08      	pop	{r3, pc}

000b8650 <_ZN9USBSerial17availableForWriteEv>:
{
   b8650:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8652:	7c00      	ldrb	r0, [r0, #16]
   b8654:	f7ff fae2 	bl	b7c1c <HAL_USB_USART_Available_Data_For_Write>
}
   b8658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b865c:	bd08      	pop	{r3, pc}

000b865e <_ZN9USBSerial9availableEv>:
{
   b865e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8660:	7c00      	ldrb	r0, [r0, #16]
   b8662:	f7ff fad3 	bl	b7c0c <HAL_USB_USART_Available_Data>
}
   b8666:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b866a:	bd08      	pop	{r3, pc}

000b866c <_ZN9USBSerial5writeEh>:
{
   b866c:	b513      	push	{r0, r1, r4, lr}
   b866e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8670:	7c00      	ldrb	r0, [r0, #16]
{
   b8672:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8674:	f7ff fad2 	bl	b7c1c <HAL_USB_USART_Available_Data_For_Write>
   b8678:	2800      	cmp	r0, #0
   b867a:	9901      	ldr	r1, [sp, #4]
   b867c:	dc01      	bgt.n	b8682 <_ZN9USBSerial5writeEh+0x16>
   b867e:	7c60      	ldrb	r0, [r4, #17]
   b8680:	b120      	cbz	r0, b868c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8682:	7c20      	ldrb	r0, [r4, #16]
   b8684:	f7ff fada 	bl	b7c3c <HAL_USB_USART_Send_Data>
   b8688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b868c:	b002      	add	sp, #8
   b868e:	bd10      	pop	{r4, pc}

000b8690 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8690:	7c00      	ldrb	r0, [r0, #16]
   b8692:	f7ff badb 	b.w	b7c4c <HAL_USB_USART_Flush_Data>

000b8696 <_ZN9USBSerialD0Ev>:
   b8696:	b510      	push	{r4, lr}
   b8698:	2114      	movs	r1, #20
   b869a:	4604      	mov	r4, r0
   b869c:	f7fb fcfd 	bl	b409a <_ZdlPvj>
   b86a0:	4620      	mov	r0, r4
   b86a2:	bd10      	pop	{r4, pc}

000b86a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b86a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b86a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b86aa:	4604      	mov	r4, r0
   b86ac:	4608      	mov	r0, r1
   b86ae:	2100      	movs	r1, #0
   b86b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b86b4:	4b04      	ldr	r3, [pc, #16]	; (b86c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b86b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b86b8:	2301      	movs	r3, #1
  _serial = serial;
   b86ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b86bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b86be:	4611      	mov	r1, r2
   b86c0:	f7ff fa94 	bl	b7bec <HAL_USB_USART_Init>
}
   b86c4:	4620      	mov	r0, r4
   b86c6:	bd10      	pop	{r4, pc}
   b86c8:	000bac44 	.word	0x000bac44

000b86cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b86cc:	7c00      	ldrb	r0, [r0, #16]
   b86ce:	2200      	movs	r2, #0
   b86d0:	f7ff ba94 	b.w	b7bfc <HAL_USB_USART_Begin>

000b86d4 <_Z19acquireSerialBufferv>:
{
   b86d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b86d6:	2214      	movs	r2, #20
{
   b86d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b86da:	2100      	movs	r1, #0
   b86dc:	f000 ffb8 	bl	b9650 <memset>
}
   b86e0:	4620      	mov	r0, r4
   b86e2:	bd10      	pop	{r4, pc}

000b86e4 <_Z16_fetch_usbserialv>:
{
   b86e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b86e6:	4c0f      	ldr	r4, [pc, #60]	; (b8724 <_Z16_fetch_usbserialv+0x40>)
{
   b86e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b86ea:	a803      	add	r0, sp, #12
   b86ec:	f7ff fff2 	bl	b86d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b86f0:	7821      	ldrb	r1, [r4, #0]
   b86f2:	f3bf 8f5b 	dmb	ish
   b86f6:	f011 0101 	ands.w	r1, r1, #1
   b86fa:	d10f      	bne.n	b871c <_Z16_fetch_usbserialv+0x38>
   b86fc:	4620      	mov	r0, r4
   b86fe:	9101      	str	r1, [sp, #4]
   b8700:	f7fb fcda 	bl	b40b8 <__cxa_guard_acquire>
   b8704:	9901      	ldr	r1, [sp, #4]
   b8706:	b148      	cbz	r0, b871c <_Z16_fetch_usbserialv+0x38>
   b8708:	aa03      	add	r2, sp, #12
   b870a:	4807      	ldr	r0, [pc, #28]	; (b8728 <_Z16_fetch_usbserialv+0x44>)
   b870c:	f7ff ffca 	bl	b86a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8710:	4620      	mov	r0, r4
   b8712:	f7fb fcd6 	bl	b40c2 <__cxa_guard_release>
   b8716:	4805      	ldr	r0, [pc, #20]	; (b872c <_Z16_fetch_usbserialv+0x48>)
   b8718:	f000 ff7e 	bl	b9618 <atexit>
	return _usbserial;
}
   b871c:	4802      	ldr	r0, [pc, #8]	; (b8728 <_Z16_fetch_usbserialv+0x44>)
   b871e:	b008      	add	sp, #32
   b8720:	bd10      	pop	{r4, pc}
   b8722:	bf00      	nop
   b8724:	2003e700 	.word	0x2003e700
   b8728:	2003e704 	.word	0x2003e704
   b872c:	000b862d 	.word	0x000b862d

000b8730 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b8730:	f7ff b944 	b.w	b79bc <HAL_Interrupts_Disable_All>

000b8734 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b8734:	f7ff b93a 	b.w	b79ac <HAL_Interrupts_Enable_All>

000b8738 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8738:	4770      	bx	lr

000b873a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b873a:	7441      	strb	r1, [r0, #17]
}
   b873c:	4770      	bx	lr

000b873e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b873e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8740:	7c00      	ldrb	r0, [r0, #16]
   b8742:	f7ff f9ab 	bl	b7a9c <hal_usart_available_data_for_write>
}
   b8746:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b874a:	bd08      	pop	{r3, pc}

000b874c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b874c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b874e:	7c00      	ldrb	r0, [r0, #16]
   b8750:	f7ff f97c 	bl	b7a4c <hal_usart_available>
}
   b8754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8758:	bd08      	pop	{r3, pc}

000b875a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b875a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b875c:	7c00      	ldrb	r0, [r0, #16]
   b875e:	f7ff f985 	bl	b7a6c <hal_usart_peek>
}
   b8762:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8766:	bd08      	pop	{r3, pc}

000b8768 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8768:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b876a:	7c00      	ldrb	r0, [r0, #16]
   b876c:	f7ff f976 	bl	b7a5c <hal_usart_read>
}
   b8770:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8774:	bd08      	pop	{r3, pc}

000b8776 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8776:	7c00      	ldrb	r0, [r0, #16]
   b8778:	f7ff b980 	b.w	b7a7c <hal_usart_flush>

000b877c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b877c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b877e:	7c45      	ldrb	r5, [r0, #17]
{
   b8780:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8782:	b12d      	cbz	r5, b8790 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8784:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8786:	b003      	add	sp, #12
   b8788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b878c:	f7ff b956 	b.w	b7a3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8790:	7c00      	ldrb	r0, [r0, #16]
   b8792:	9101      	str	r1, [sp, #4]
   b8794:	f7ff f982 	bl	b7a9c <hal_usart_available_data_for_write>
   b8798:	2800      	cmp	r0, #0
   b879a:	9901      	ldr	r1, [sp, #4]
   b879c:	dcf2      	bgt.n	b8784 <_ZN11USARTSerial5writeEh+0x8>
}
   b879e:	4628      	mov	r0, r5
   b87a0:	b003      	add	sp, #12
   b87a2:	bd30      	pop	{r4, r5, pc}

000b87a4 <_ZN11USARTSerialD0Ev>:
   b87a4:	b510      	push	{r4, lr}
   b87a6:	2114      	movs	r1, #20
   b87a8:	4604      	mov	r4, r0
   b87aa:	f7fb fc76 	bl	b409a <_ZdlPvj>
   b87ae:	4620      	mov	r0, r4
   b87b0:	bd10      	pop	{r4, pc}
	...

000b87b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b87b4:	b510      	push	{r4, lr}
   b87b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b87ba:	4604      	mov	r4, r0
   b87bc:	4608      	mov	r0, r1
   b87be:	4611      	mov	r1, r2
   b87c0:	2200      	movs	r2, #0
   b87c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b87c6:	4b04      	ldr	r3, [pc, #16]	; (b87d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b87c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b87ca:	2301      	movs	r3, #1
  _serial = serial;
   b87cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b87ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b87d0:	f7ff f96c 	bl	b7aac <hal_usart_init_ex>
}
   b87d4:	4620      	mov	r0, r4
   b87d6:	bd10      	pop	{r4, pc}
   b87d8:	000bac74 	.word	0x000bac74

000b87dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b87dc:	4770      	bx	lr

000b87de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b87de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87e0:	4606      	mov	r6, r0
   b87e2:	4615      	mov	r5, r2
   b87e4:	460c      	mov	r4, r1
   b87e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b87e8:	42bc      	cmp	r4, r7
   b87ea:	d006      	beq.n	b87fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b87ec:	6833      	ldr	r3, [r6, #0]
   b87ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b87f2:	689b      	ldr	r3, [r3, #8]
   b87f4:	4630      	mov	r0, r6
   b87f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b87f8:	e7f6      	b.n	b87e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b87fa:	4628      	mov	r0, r5
   b87fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b87fe:	7c00      	ldrb	r0, [r0, #16]
   b8800:	2200      	movs	r2, #0
   b8802:	f7ff b97b 	b.w	b7afc <hal_i2c_write>

000b8806 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8806:	7c00      	ldrb	r0, [r0, #16]
   b8808:	2100      	movs	r1, #0
   b880a:	f7ff b97f 	b.w	b7b0c <hal_i2c_available>

000b880e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b880e:	7c00      	ldrb	r0, [r0, #16]
   b8810:	2100      	movs	r1, #0
   b8812:	f7ff b983 	b.w	b7b1c <hal_i2c_read>

000b8816 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8816:	7c00      	ldrb	r0, [r0, #16]
   b8818:	2100      	movs	r1, #0
   b881a:	f7ff b987 	b.w	b7b2c <hal_i2c_peek>

000b881e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b881e:	7c00      	ldrb	r0, [r0, #16]
   b8820:	2100      	movs	r1, #0
   b8822:	f7ff b98b 	b.w	b7b3c <hal_i2c_flush>

000b8826 <_ZN7TwoWireD0Ev>:
   b8826:	b510      	push	{r4, lr}
   b8828:	2114      	movs	r1, #20
   b882a:	4604      	mov	r4, r0
   b882c:	f7fb fc35 	bl	b409a <_ZdlPvj>
   b8830:	4620      	mov	r0, r4
   b8832:	bd10      	pop	{r4, pc}

000b8834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8834:	b510      	push	{r4, lr}
   b8836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b883a:	4604      	mov	r4, r0
   b883c:	4608      	mov	r0, r1
   b883e:	2100      	movs	r1, #0
   b8840:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8844:	4b03      	ldr	r3, [pc, #12]	; (b8854 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8846:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8848:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b884a:	4611      	mov	r1, r2
   b884c:	f7ff f986 	bl	b7b5c <hal_i2c_init>
}
   b8850:	4620      	mov	r0, r4
   b8852:	bd10      	pop	{r4, pc}
   b8854:	000baca4 	.word	0x000baca4

000b8858 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b8858:	7c00      	ldrb	r0, [r0, #16]
   b885a:	2200      	movs	r2, #0
   b885c:	f7ff b92e 	b.w	b7abc <hal_i2c_set_speed>

000b8860 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8860:	2300      	movs	r3, #0
   b8862:	7c00      	ldrb	r0, [r0, #16]
   b8864:	461a      	mov	r2, r3
   b8866:	4619      	mov	r1, r3
   b8868:	f7ff b930 	b.w	b7acc <hal_i2c_begin>

000b886c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b886c:	7c00      	ldrb	r0, [r0, #16]
   b886e:	2200      	movs	r2, #0
   b8870:	f7ff b934 	b.w	b7adc <hal_i2c_begin_transmission>

000b8874 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8874:	b2c9      	uxtb	r1, r1
   b8876:	f7ff bff9 	b.w	b886c <_ZN7TwoWire17beginTransmissionEh>

000b887a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b887a:	7c00      	ldrb	r0, [r0, #16]
   b887c:	2200      	movs	r2, #0
   b887e:	f7ff b935 	b.w	b7aec <hal_i2c_end_transmission>

000b8882 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8882:	2101      	movs	r1, #1
   b8884:	f7ff bff9 	b.w	b887a <_ZN7TwoWire15endTransmissionEh>

000b8888 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8888:	2200      	movs	r2, #0
   b888a:	6840      	ldr	r0, [r0, #4]
   b888c:	4611      	mov	r1, r2
   b888e:	f7ff ba29 	b.w	b7ce4 <network_ready>

000b8892 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8892:	2200      	movs	r2, #0
   b8894:	6840      	ldr	r0, [r0, #4]
   b8896:	4611      	mov	r1, r2
   b8898:	f7ff ba44 	b.w	b7d24 <network_listening>

000b889c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b889c:	2200      	movs	r2, #0
   b889e:	6840      	ldr	r0, [r0, #4]
   b88a0:	4611      	mov	r1, r2
   b88a2:	f7ff ba4f 	b.w	b7d44 <network_get_listen_timeout>

000b88a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b88a6:	6840      	ldr	r0, [r0, #4]
   b88a8:	2200      	movs	r2, #0
   b88aa:	f7ff ba43 	b.w	b7d34 <network_set_listen_timeout>

000b88ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b88ae:	6840      	ldr	r0, [r0, #4]
   b88b0:	2200      	movs	r2, #0
   b88b2:	f081 0101 	eor.w	r1, r1, #1
   b88b6:	f7ff ba2d 	b.w	b7d14 <network_listen>

000b88ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b88ba:	2300      	movs	r3, #0
   b88bc:	6840      	ldr	r0, [r0, #4]
   b88be:	461a      	mov	r2, r3
   b88c0:	4619      	mov	r1, r3
   b88c2:	f7ff ba1f 	b.w	b7d04 <network_off>

000b88c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b88c6:	2300      	movs	r3, #0
   b88c8:	6840      	ldr	r0, [r0, #4]
   b88ca:	461a      	mov	r2, r3
   b88cc:	4619      	mov	r1, r3
   b88ce:	f7ff ba11 	b.w	b7cf4 <network_on>

000b88d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b88d2:	2200      	movs	r2, #0
   b88d4:	6840      	ldr	r0, [r0, #4]
   b88d6:	4611      	mov	r1, r2
   b88d8:	f7ff b9f4 	b.w	b7cc4 <network_connecting>

000b88dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b88dc:	6840      	ldr	r0, [r0, #4]
   b88de:	2200      	movs	r2, #0
   b88e0:	2102      	movs	r1, #2
   b88e2:	f7ff b9f7 	b.w	b7cd4 <network_disconnect>

000b88e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b88e6:	2300      	movs	r3, #0
   b88e8:	6840      	ldr	r0, [r0, #4]
   b88ea:	461a      	mov	r2, r3
   b88ec:	f7ff b9e2 	b.w	b7cb4 <network_connect>

000b88f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b88f0:	4b02      	ldr	r3, [pc, #8]	; (b88fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b88f2:	2204      	movs	r2, #4
   b88f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b88f6:	4a02      	ldr	r2, [pc, #8]	; (b8900 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b88f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b88fa:	4770      	bx	lr
   b88fc:	2003e718 	.word	0x2003e718
   b8900:	000baccc 	.word	0x000baccc

000b8904 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8904:	2300      	movs	r3, #0
   b8906:	6840      	ldr	r0, [r0, #4]
   b8908:	461a      	mov	r2, r3
   b890a:	f7ff b9d3 	b.w	b7cb4 <network_connect>

000b890e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b890e:	6840      	ldr	r0, [r0, #4]
   b8910:	2200      	movs	r2, #0
   b8912:	2102      	movs	r1, #2
   b8914:	f7ff b9de 	b.w	b7cd4 <network_disconnect>

000b8918 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8918:	2200      	movs	r2, #0
   b891a:	6840      	ldr	r0, [r0, #4]
   b891c:	4611      	mov	r1, r2
   b891e:	f7ff b9d1 	b.w	b7cc4 <network_connecting>

000b8922 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8922:	2200      	movs	r2, #0
   b8924:	6840      	ldr	r0, [r0, #4]
   b8926:	4611      	mov	r1, r2
   b8928:	f7ff b9dc 	b.w	b7ce4 <network_ready>

000b892c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b892c:	2300      	movs	r3, #0
   b892e:	6840      	ldr	r0, [r0, #4]
   b8930:	461a      	mov	r2, r3
   b8932:	4619      	mov	r1, r3
   b8934:	f7ff b9de 	b.w	b7cf4 <network_on>

000b8938 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8938:	2300      	movs	r3, #0
   b893a:	6840      	ldr	r0, [r0, #4]
   b893c:	461a      	mov	r2, r3
   b893e:	4619      	mov	r1, r3
   b8940:	f7ff b9e0 	b.w	b7d04 <network_off>

000b8944 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8944:	6840      	ldr	r0, [r0, #4]
   b8946:	2100      	movs	r1, #0
   b8948:	f7ff ba04 	b.w	b7d54 <network_is_on>

000b894c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b894c:	6840      	ldr	r0, [r0, #4]
   b894e:	2100      	movs	r1, #0
   b8950:	f7ff ba08 	b.w	b7d64 <network_is_off>

000b8954 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8954:	6840      	ldr	r0, [r0, #4]
   b8956:	2200      	movs	r2, #0
   b8958:	f081 0101 	eor.w	r1, r1, #1
   b895c:	f7ff b9da 	b.w	b7d14 <network_listen>

000b8960 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8960:	6840      	ldr	r0, [r0, #4]
   b8962:	2200      	movs	r2, #0
   b8964:	f7ff b9e6 	b.w	b7d34 <network_set_listen_timeout>

000b8968 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8968:	2200      	movs	r2, #0
   b896a:	6840      	ldr	r0, [r0, #4]
   b896c:	4611      	mov	r1, r2
   b896e:	f7ff b9e9 	b.w	b7d44 <network_get_listen_timeout>

000b8972 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8972:	2200      	movs	r2, #0
   b8974:	6840      	ldr	r0, [r0, #4]
   b8976:	4611      	mov	r1, r2
   b8978:	f7ff b9d4 	b.w	b7d24 <network_listening>

000b897c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b897c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8980:	b095      	sub	sp, #84	; 0x54
   b8982:	4614      	mov	r4, r2
   b8984:	460d      	mov	r5, r1
   b8986:	4607      	mov	r7, r0
    IPAddress addr;
   b8988:	f7ff fe10 	bl	b85ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b898c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b898e:	221c      	movs	r2, #28
   b8990:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8992:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8994:	f000 fe5c 	bl	b9650 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8998:	2340      	movs	r3, #64	; 0x40
   b899a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b899c:	4620      	mov	r0, r4
   b899e:	466b      	mov	r3, sp
   b89a0:	aa0c      	add	r2, sp, #48	; 0x30
   b89a2:	2100      	movs	r1, #0
   b89a4:	f7fe ffd2 	bl	b794c <netdb_getaddrinfo>
    if (!r) {
   b89a8:	4604      	mov	r4, r0
   b89aa:	2800      	cmp	r0, #0
   b89ac:	d14b      	bne.n	b8a46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b89ae:	4602      	mov	r2, r0
   b89b0:	2101      	movs	r1, #1
   b89b2:	6868      	ldr	r0, [r5, #4]
   b89b4:	f7ff f996 	bl	b7ce4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b89b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b89ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b89bc:	4622      	mov	r2, r4
   b89be:	6868      	ldr	r0, [r5, #4]
   b89c0:	f7ff f990 	bl	b7ce4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b89c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b89c6:	4681      	mov	r9, r0
        bool ok = false;
   b89c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b89ca:	2e00      	cmp	r6, #0
   b89cc:	d03b      	beq.n	b8a46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b89ce:	2900      	cmp	r1, #0
   b89d0:	d139      	bne.n	b8a46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b89d2:	6873      	ldr	r3, [r6, #4]
   b89d4:	2b02      	cmp	r3, #2
   b89d6:	d003      	beq.n	b89e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b89d8:	2b0a      	cmp	r3, #10
   b89da:	d011      	beq.n	b8a00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b89dc:	69f6      	ldr	r6, [r6, #28]
   b89de:	e7f4      	b.n	b89ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b89e0:	f1b8 0f00 	cmp.w	r8, #0
   b89e4:	d0fa      	beq.n	b89dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b89e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b89e8:	a806      	add	r0, sp, #24
   b89ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b89ec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b89ee:	f7ff fe0b 	bl	b8608 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b89f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b89f4:	1d3c      	adds	r4, r7, #4
   b89f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b89f8:	682b      	ldr	r3, [r5, #0]
   b89fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b89fc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b89fe:	e7ed      	b.n	b89dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8a00:	f1b9 0f00 	cmp.w	r9, #0
   b8a04:	d0ea      	beq.n	b89dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8a06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8a08:	2210      	movs	r2, #16
   b8a0a:	a801      	add	r0, sp, #4
   b8a0c:	f000 fe20 	bl	b9650 <memset>
                    a.v = 6;
   b8a10:	2306      	movs	r3, #6
   b8a12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8a16:	ad01      	add	r5, sp, #4
   b8a18:	f104 0308 	add.w	r3, r4, #8
   b8a1c:	3418      	adds	r4, #24
   b8a1e:	6818      	ldr	r0, [r3, #0]
   b8a20:	6859      	ldr	r1, [r3, #4]
   b8a22:	462a      	mov	r2, r5
   b8a24:	c203      	stmia	r2!, {r0, r1}
   b8a26:	3308      	adds	r3, #8
   b8a28:	42a3      	cmp	r3, r4
   b8a2a:	4615      	mov	r5, r2
   b8a2c:	d1f7      	bne.n	b8a1e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8a2e:	a901      	add	r1, sp, #4
   b8a30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8a32:	ad07      	add	r5, sp, #28
   b8a34:	f7ff fdc8 	bl	b85c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a3a:	1d3c      	adds	r4, r7, #4
   b8a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a3e:	682b      	ldr	r3, [r5, #0]
   b8a40:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8a42:	4649      	mov	r1, r9
   b8a44:	e7ca      	b.n	b89dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8a46:	9800      	ldr	r0, [sp, #0]
   b8a48:	f7fe ff78 	bl	b793c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8a4c:	4638      	mov	r0, r7
   b8a4e:	b015      	add	sp, #84	; 0x54
   b8a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8a54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8a54:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8a56:	4a03      	ldr	r2, [pc, #12]	; (b8a64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8a58:	601a      	str	r2, [r3, #0]
   b8a5a:	2200      	movs	r2, #0
   b8a5c:	605a      	str	r2, [r3, #4]

} // spark
   b8a5e:	4770      	bx	lr
   b8a60:	2003e720 	.word	0x2003e720
   b8a64:	000bad08 	.word	0x000bad08

000b8a68 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8a68:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8a6a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8a6c:	d902      	bls.n	b8a74 <pinAvailable+0xc>
    return false;
   b8a6e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8a70:	b002      	add	sp, #8
   b8a72:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8a74:	f1a0 030b 	sub.w	r3, r0, #11
   b8a78:	2b02      	cmp	r3, #2
   b8a7a:	d81a      	bhi.n	b8ab2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8a7c:	4c17      	ldr	r4, [pc, #92]	; (b8adc <pinAvailable+0x74>)
   b8a7e:	7821      	ldrb	r1, [r4, #0]
   b8a80:	f3bf 8f5b 	dmb	ish
   b8a84:	f011 0101 	ands.w	r1, r1, #1
   b8a88:	d10b      	bne.n	b8aa2 <pinAvailable+0x3a>
   b8a8a:	4620      	mov	r0, r4
   b8a8c:	9101      	str	r1, [sp, #4]
   b8a8e:	f7fb fb13 	bl	b40b8 <__cxa_guard_acquire>
   b8a92:	9901      	ldr	r1, [sp, #4]
   b8a94:	b128      	cbz	r0, b8aa2 <pinAvailable+0x3a>
   b8a96:	4812      	ldr	r0, [pc, #72]	; (b8ae0 <pinAvailable+0x78>)
   b8a98:	f7ff fa00 	bl	b7e9c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8a9c:	4620      	mov	r0, r4
   b8a9e:	f7fb fb10 	bl	b40c2 <__cxa_guard_release>
   b8aa2:	4b0f      	ldr	r3, [pc, #60]	; (b8ae0 <pinAvailable+0x78>)
   b8aa4:	7818      	ldrb	r0, [r3, #0]
   b8aa6:	f7ff f879 	bl	b7b9c <hal_spi_is_enabled>
   b8aaa:	2800      	cmp	r0, #0
   b8aac:	d1df      	bne.n	b8a6e <pinAvailable+0x6>
  return true; // 'pin' is available
   b8aae:	2001      	movs	r0, #1
   b8ab0:	e7de      	b.n	b8a70 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8ab2:	2801      	cmp	r0, #1
   b8ab4:	d809      	bhi.n	b8aca <pinAvailable+0x62>
   b8ab6:	f000 f8c3 	bl	b8c40 <_Z19__fetch_global_Wirev>
   b8aba:	2100      	movs	r1, #0
   b8abc:	7c00      	ldrb	r0, [r0, #16]
   b8abe:	f7ff f845 	bl	b7b4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8ac2:	f080 0001 	eor.w	r0, r0, #1
   b8ac6:	b2c0      	uxtb	r0, r0
   b8ac8:	e7d2      	b.n	b8a70 <pinAvailable+0x8>
   b8aca:	3809      	subs	r0, #9
   b8acc:	2801      	cmp	r0, #1
   b8ace:	d8ee      	bhi.n	b8aae <pinAvailable+0x46>
   b8ad0:	f000 f87a 	bl	b8bc8 <_Z22__fetch_global_Serial1v>
   b8ad4:	7c00      	ldrb	r0, [r0, #16]
   b8ad6:	f7fe ffd9 	bl	b7a8c <hal_usart_is_enabled>
   b8ada:	e7f2      	b.n	b8ac2 <pinAvailable+0x5a>
   b8adc:	2003dfdc 	.word	0x2003dfdc
   b8ae0:	2003dfe0 	.word	0x2003dfe0

000b8ae4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8ae4:	2823      	cmp	r0, #35	; 0x23
{
   b8ae6:	b538      	push	{r3, r4, r5, lr}
   b8ae8:	4604      	mov	r4, r0
   b8aea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8aec:	d80a      	bhi.n	b8b04 <pinMode+0x20>
   b8aee:	29ff      	cmp	r1, #255	; 0xff
   b8af0:	d008      	beq.n	b8b04 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8af2:	f7ff ffb9 	bl	b8a68 <pinAvailable>
   b8af6:	b128      	cbz	r0, b8b04 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8af8:	4629      	mov	r1, r5
   b8afa:	4620      	mov	r0, r4
}
   b8afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8b00:	f7fe bf34 	b.w	b796c <HAL_Pin_Mode>
}
   b8b04:	bd38      	pop	{r3, r4, r5, pc}

000b8b06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8b06:	b538      	push	{r3, r4, r5, lr}
   b8b08:	4604      	mov	r4, r0
   b8b0a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8b0c:	f7fe ff36 	bl	b797c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8b10:	28ff      	cmp	r0, #255	; 0xff
   b8b12:	d010      	beq.n	b8b36 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8b14:	2806      	cmp	r0, #6
   b8b16:	d804      	bhi.n	b8b22 <digitalWrite+0x1c>
   b8b18:	234d      	movs	r3, #77	; 0x4d
   b8b1a:	fa23 f000 	lsr.w	r0, r3, r0
   b8b1e:	07c3      	lsls	r3, r0, #31
   b8b20:	d409      	bmi.n	b8b36 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8b22:	4620      	mov	r0, r4
   b8b24:	f7ff ffa0 	bl	b8a68 <pinAvailable>
   b8b28:	b128      	cbz	r0, b8b36 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8b2a:	4629      	mov	r1, r5
   b8b2c:	4620      	mov	r0, r4
}
   b8b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8b32:	f7fe bf2b 	b.w	b798c <HAL_GPIO_Write>
}
   b8b36:	bd38      	pop	{r3, r4, r5, pc}

000b8b38 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8b38:	b510      	push	{r4, lr}
   b8b3a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8b3c:	f7fe ff1e 	bl	b797c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8b40:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8b42:	b2db      	uxtb	r3, r3
   b8b44:	2b01      	cmp	r3, #1
   b8b46:	d908      	bls.n	b8b5a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8b48:	4620      	mov	r0, r4
   b8b4a:	f7ff ff8d 	bl	b8a68 <pinAvailable>
   b8b4e:	b120      	cbz	r0, b8b5a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8b50:	4620      	mov	r0, r4
}
   b8b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8b56:	f7fe bf21 	b.w	b799c <HAL_GPIO_Read>
}
   b8b5a:	2000      	movs	r0, #0
   b8b5c:	bd10      	pop	{r4, pc}

000b8b5e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8b5e:	280d      	cmp	r0, #13
{
   b8b60:	b510      	push	{r4, lr}
   b8b62:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8b64:	bf9c      	itt	ls
   b8b66:	340e      	addls	r4, #14
   b8b68:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8b6a:	4620      	mov	r0, r4
   b8b6c:	f7ff ff7c 	bl	b8a68 <pinAvailable>
   b8b70:	b150      	cbz	r0, b8b88 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8b72:	2103      	movs	r1, #3
   b8b74:	4620      	mov	r0, r4
   b8b76:	f7fe fef1 	bl	b795c <HAL_Validate_Pin_Function>
   b8b7a:	2803      	cmp	r0, #3
   b8b7c:	d104      	bne.n	b8b88 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8b7e:	4620      	mov	r0, r4
}
   b8b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8b84:	f7fe bf22 	b.w	b79cc <hal_adc_read>
}
   b8b88:	2000      	movs	r0, #0
   b8b8a:	bd10      	pop	{r4, pc}

000b8b8c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b8b8c:	f7fe bf26 	b.w	b79dc <HAL_Pulse_In>

000b8b90 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8b90:	4770      	bx	lr
	...

000b8b94 <_Z20acquireSerial1Bufferv>:
{
   b8b94:	b538      	push	{r3, r4, r5, lr}
   b8b96:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8b98:	2514      	movs	r5, #20
   b8b9a:	462a      	mov	r2, r5
   b8b9c:	2100      	movs	r1, #0
   b8b9e:	f000 fd57 	bl	b9650 <memset>
   b8ba2:	8025      	strh	r5, [r4, #0]
   b8ba4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8ba6:	4907      	ldr	r1, [pc, #28]	; (b8bc4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8ba8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8baa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8bac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8bae:	f000 f86b 	bl	b8c88 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8bb2:	4904      	ldr	r1, [pc, #16]	; (b8bc4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8bb4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8bb6:	4628      	mov	r0, r5
   b8bb8:	f000 f866 	bl	b8c88 <_ZnajRKSt9nothrow_t>
    };
   b8bbc:	60e0      	str	r0, [r4, #12]
}
   b8bbe:	4620      	mov	r0, r4
   b8bc0:	bd38      	pop	{r3, r4, r5, pc}
   b8bc2:	bf00      	nop
   b8bc4:	000bad3c 	.word	0x000bad3c

000b8bc8 <_Z22__fetch_global_Serial1v>:
{
   b8bc8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8bca:	4d0e      	ldr	r5, [pc, #56]	; (b8c04 <_Z22__fetch_global_Serial1v+0x3c>)
   b8bcc:	7829      	ldrb	r1, [r5, #0]
   b8bce:	f3bf 8f5b 	dmb	ish
   b8bd2:	f011 0401 	ands.w	r4, r1, #1
{
   b8bd6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8bd8:	d111      	bne.n	b8bfe <_Z22__fetch_global_Serial1v+0x36>
   b8bda:	4628      	mov	r0, r5
   b8bdc:	f7fb fa6c 	bl	b40b8 <__cxa_guard_acquire>
   b8be0:	b168      	cbz	r0, b8bfe <_Z22__fetch_global_Serial1v+0x36>
   b8be2:	a801      	add	r0, sp, #4
   b8be4:	f7ff ffd6 	bl	b8b94 <_Z20acquireSerial1Bufferv>
   b8be8:	aa01      	add	r2, sp, #4
   b8bea:	4621      	mov	r1, r4
   b8bec:	4806      	ldr	r0, [pc, #24]	; (b8c08 <_Z22__fetch_global_Serial1v+0x40>)
   b8bee:	f7ff fde1 	bl	b87b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8bf2:	4628      	mov	r0, r5
   b8bf4:	f7fb fa65 	bl	b40c2 <__cxa_guard_release>
   b8bf8:	4804      	ldr	r0, [pc, #16]	; (b8c0c <_Z22__fetch_global_Serial1v+0x44>)
   b8bfa:	f000 fd0d 	bl	b9618 <atexit>
    return serial1;
}
   b8bfe:	4802      	ldr	r0, [pc, #8]	; (b8c08 <_Z22__fetch_global_Serial1v+0x40>)
   b8c00:	b007      	add	sp, #28
   b8c02:	bd30      	pop	{r4, r5, pc}
   b8c04:	2003e728 	.word	0x2003e728
   b8c08:	2003e72c 	.word	0x2003e72c
   b8c0c:	000b8b91 	.word	0x000b8b91

000b8c10 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8c10:	4770      	bx	lr
	...

000b8c14 <_Z17acquireWireBufferv>:
{
   b8c14:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8c16:	2520      	movs	r5, #32
   b8c18:	2314      	movs	r3, #20
{
   b8c1a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8c1c:	6003      	str	r3, [r0, #0]
   b8c1e:	6085      	str	r5, [r0, #8]
   b8c20:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8c22:	4906      	ldr	r1, [pc, #24]	; (b8c3c <_Z17acquireWireBufferv+0x28>)
   b8c24:	4628      	mov	r0, r5
   b8c26:	f000 f82f 	bl	b8c88 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8c2a:	4904      	ldr	r1, [pc, #16]	; (b8c3c <_Z17acquireWireBufferv+0x28>)
	};
   b8c2c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8c2e:	4628      	mov	r0, r5
   b8c30:	f000 f82a 	bl	b8c88 <_ZnajRKSt9nothrow_t>
	};
   b8c34:	60e0      	str	r0, [r4, #12]
}
   b8c36:	4620      	mov	r0, r4
   b8c38:	bd38      	pop	{r3, r4, r5, pc}
   b8c3a:	bf00      	nop
   b8c3c:	000bad3c 	.word	0x000bad3c

000b8c40 <_Z19__fetch_global_Wirev>:
{
   b8c40:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8c42:	4d0e      	ldr	r5, [pc, #56]	; (b8c7c <_Z19__fetch_global_Wirev+0x3c>)
   b8c44:	7829      	ldrb	r1, [r5, #0]
   b8c46:	f3bf 8f5b 	dmb	ish
   b8c4a:	f011 0401 	ands.w	r4, r1, #1
{
   b8c4e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8c50:	d111      	bne.n	b8c76 <_Z19__fetch_global_Wirev+0x36>
   b8c52:	4628      	mov	r0, r5
   b8c54:	f7fb fa30 	bl	b40b8 <__cxa_guard_acquire>
   b8c58:	b168      	cbz	r0, b8c76 <_Z19__fetch_global_Wirev+0x36>
   b8c5a:	a801      	add	r0, sp, #4
   b8c5c:	f7ff ffda 	bl	b8c14 <_Z17acquireWireBufferv>
   b8c60:	aa01      	add	r2, sp, #4
   b8c62:	4621      	mov	r1, r4
   b8c64:	4806      	ldr	r0, [pc, #24]	; (b8c80 <_Z19__fetch_global_Wirev+0x40>)
   b8c66:	f7ff fde5 	bl	b8834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8c6a:	4628      	mov	r0, r5
   b8c6c:	f7fb fa29 	bl	b40c2 <__cxa_guard_release>
   b8c70:	4804      	ldr	r0, [pc, #16]	; (b8c84 <_Z19__fetch_global_Wirev+0x44>)
   b8c72:	f000 fcd1 	bl	b9618 <atexit>
	return wire;
}
   b8c76:	4802      	ldr	r0, [pc, #8]	; (b8c80 <_Z19__fetch_global_Wirev+0x40>)
   b8c78:	b007      	add	sp, #28
   b8c7a:	bd30      	pop	{r4, r5, pc}
   b8c7c:	2003e744 	.word	0x2003e744
   b8c80:	2003e748 	.word	0x2003e748
   b8c84:	000b8c11 	.word	0x000b8c11

000b8c88 <_ZnajRKSt9nothrow_t>:
   b8c88:	f7fb ba05 	b.w	b4096 <_Znaj>

000b8c8c <__aeabi_drsub>:
   b8c8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8c90:	e002      	b.n	b8c98 <__adddf3>
   b8c92:	bf00      	nop

000b8c94 <__aeabi_dsub>:
   b8c94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8c98 <__adddf3>:
   b8c98:	b530      	push	{r4, r5, lr}
   b8c9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8c9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8ca2:	ea94 0f05 	teq	r4, r5
   b8ca6:	bf08      	it	eq
   b8ca8:	ea90 0f02 	teqeq	r0, r2
   b8cac:	bf1f      	itttt	ne
   b8cae:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8cb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8cb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8cba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8cbe:	f000 80e2 	beq.w	b8e86 <__adddf3+0x1ee>
   b8cc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8cc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8cca:	bfb8      	it	lt
   b8ccc:	426d      	neglt	r5, r5
   b8cce:	dd0c      	ble.n	b8cea <__adddf3+0x52>
   b8cd0:	442c      	add	r4, r5
   b8cd2:	ea80 0202 	eor.w	r2, r0, r2
   b8cd6:	ea81 0303 	eor.w	r3, r1, r3
   b8cda:	ea82 0000 	eor.w	r0, r2, r0
   b8cde:	ea83 0101 	eor.w	r1, r3, r1
   b8ce2:	ea80 0202 	eor.w	r2, r0, r2
   b8ce6:	ea81 0303 	eor.w	r3, r1, r3
   b8cea:	2d36      	cmp	r5, #54	; 0x36
   b8cec:	bf88      	it	hi
   b8cee:	bd30      	pophi	{r4, r5, pc}
   b8cf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8cf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8cf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8cfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8d00:	d002      	beq.n	b8d08 <__adddf3+0x70>
   b8d02:	4240      	negs	r0, r0
   b8d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8d08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8d0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8d10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8d14:	d002      	beq.n	b8d1c <__adddf3+0x84>
   b8d16:	4252      	negs	r2, r2
   b8d18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8d1c:	ea94 0f05 	teq	r4, r5
   b8d20:	f000 80a7 	beq.w	b8e72 <__adddf3+0x1da>
   b8d24:	f1a4 0401 	sub.w	r4, r4, #1
   b8d28:	f1d5 0e20 	rsbs	lr, r5, #32
   b8d2c:	db0d      	blt.n	b8d4a <__adddf3+0xb2>
   b8d2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8d32:	fa22 f205 	lsr.w	r2, r2, r5
   b8d36:	1880      	adds	r0, r0, r2
   b8d38:	f141 0100 	adc.w	r1, r1, #0
   b8d3c:	fa03 f20e 	lsl.w	r2, r3, lr
   b8d40:	1880      	adds	r0, r0, r2
   b8d42:	fa43 f305 	asr.w	r3, r3, r5
   b8d46:	4159      	adcs	r1, r3
   b8d48:	e00e      	b.n	b8d68 <__adddf3+0xd0>
   b8d4a:	f1a5 0520 	sub.w	r5, r5, #32
   b8d4e:	f10e 0e20 	add.w	lr, lr, #32
   b8d52:	2a01      	cmp	r2, #1
   b8d54:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8d58:	bf28      	it	cs
   b8d5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8d5e:	fa43 f305 	asr.w	r3, r3, r5
   b8d62:	18c0      	adds	r0, r0, r3
   b8d64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8d68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8d6c:	d507      	bpl.n	b8d7e <__adddf3+0xe6>
   b8d6e:	f04f 0e00 	mov.w	lr, #0
   b8d72:	f1dc 0c00 	rsbs	ip, ip, #0
   b8d76:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8d7a:	eb6e 0101 	sbc.w	r1, lr, r1
   b8d7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8d82:	d31b      	bcc.n	b8dbc <__adddf3+0x124>
   b8d84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8d88:	d30c      	bcc.n	b8da4 <__adddf3+0x10c>
   b8d8a:	0849      	lsrs	r1, r1, #1
   b8d8c:	ea5f 0030 	movs.w	r0, r0, rrx
   b8d90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8d94:	f104 0401 	add.w	r4, r4, #1
   b8d98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8d9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8da0:	f080 809a 	bcs.w	b8ed8 <__adddf3+0x240>
   b8da4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8da8:	bf08      	it	eq
   b8daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8dae:	f150 0000 	adcs.w	r0, r0, #0
   b8db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8db6:	ea41 0105 	orr.w	r1, r1, r5
   b8dba:	bd30      	pop	{r4, r5, pc}
   b8dbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8dc0:	4140      	adcs	r0, r0
   b8dc2:	eb41 0101 	adc.w	r1, r1, r1
   b8dc6:	3c01      	subs	r4, #1
   b8dc8:	bf28      	it	cs
   b8dca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8dce:	d2e9      	bcs.n	b8da4 <__adddf3+0x10c>
   b8dd0:	f091 0f00 	teq	r1, #0
   b8dd4:	bf04      	itt	eq
   b8dd6:	4601      	moveq	r1, r0
   b8dd8:	2000      	moveq	r0, #0
   b8dda:	fab1 f381 	clz	r3, r1
   b8dde:	bf08      	it	eq
   b8de0:	3320      	addeq	r3, #32
   b8de2:	f1a3 030b 	sub.w	r3, r3, #11
   b8de6:	f1b3 0220 	subs.w	r2, r3, #32
   b8dea:	da0c      	bge.n	b8e06 <__adddf3+0x16e>
   b8dec:	320c      	adds	r2, #12
   b8dee:	dd08      	ble.n	b8e02 <__adddf3+0x16a>
   b8df0:	f102 0c14 	add.w	ip, r2, #20
   b8df4:	f1c2 020c 	rsb	r2, r2, #12
   b8df8:	fa01 f00c 	lsl.w	r0, r1, ip
   b8dfc:	fa21 f102 	lsr.w	r1, r1, r2
   b8e00:	e00c      	b.n	b8e1c <__adddf3+0x184>
   b8e02:	f102 0214 	add.w	r2, r2, #20
   b8e06:	bfd8      	it	le
   b8e08:	f1c2 0c20 	rsble	ip, r2, #32
   b8e0c:	fa01 f102 	lsl.w	r1, r1, r2
   b8e10:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8e14:	bfdc      	itt	le
   b8e16:	ea41 010c 	orrle.w	r1, r1, ip
   b8e1a:	4090      	lslle	r0, r2
   b8e1c:	1ae4      	subs	r4, r4, r3
   b8e1e:	bfa2      	ittt	ge
   b8e20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8e24:	4329      	orrge	r1, r5
   b8e26:	bd30      	popge	{r4, r5, pc}
   b8e28:	ea6f 0404 	mvn.w	r4, r4
   b8e2c:	3c1f      	subs	r4, #31
   b8e2e:	da1c      	bge.n	b8e6a <__adddf3+0x1d2>
   b8e30:	340c      	adds	r4, #12
   b8e32:	dc0e      	bgt.n	b8e52 <__adddf3+0x1ba>
   b8e34:	f104 0414 	add.w	r4, r4, #20
   b8e38:	f1c4 0220 	rsb	r2, r4, #32
   b8e3c:	fa20 f004 	lsr.w	r0, r0, r4
   b8e40:	fa01 f302 	lsl.w	r3, r1, r2
   b8e44:	ea40 0003 	orr.w	r0, r0, r3
   b8e48:	fa21 f304 	lsr.w	r3, r1, r4
   b8e4c:	ea45 0103 	orr.w	r1, r5, r3
   b8e50:	bd30      	pop	{r4, r5, pc}
   b8e52:	f1c4 040c 	rsb	r4, r4, #12
   b8e56:	f1c4 0220 	rsb	r2, r4, #32
   b8e5a:	fa20 f002 	lsr.w	r0, r0, r2
   b8e5e:	fa01 f304 	lsl.w	r3, r1, r4
   b8e62:	ea40 0003 	orr.w	r0, r0, r3
   b8e66:	4629      	mov	r1, r5
   b8e68:	bd30      	pop	{r4, r5, pc}
   b8e6a:	fa21 f004 	lsr.w	r0, r1, r4
   b8e6e:	4629      	mov	r1, r5
   b8e70:	bd30      	pop	{r4, r5, pc}
   b8e72:	f094 0f00 	teq	r4, #0
   b8e76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8e7a:	bf06      	itte	eq
   b8e7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8e80:	3401      	addeq	r4, #1
   b8e82:	3d01      	subne	r5, #1
   b8e84:	e74e      	b.n	b8d24 <__adddf3+0x8c>
   b8e86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8e8a:	bf18      	it	ne
   b8e8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8e90:	d029      	beq.n	b8ee6 <__adddf3+0x24e>
   b8e92:	ea94 0f05 	teq	r4, r5
   b8e96:	bf08      	it	eq
   b8e98:	ea90 0f02 	teqeq	r0, r2
   b8e9c:	d005      	beq.n	b8eaa <__adddf3+0x212>
   b8e9e:	ea54 0c00 	orrs.w	ip, r4, r0
   b8ea2:	bf04      	itt	eq
   b8ea4:	4619      	moveq	r1, r3
   b8ea6:	4610      	moveq	r0, r2
   b8ea8:	bd30      	pop	{r4, r5, pc}
   b8eaa:	ea91 0f03 	teq	r1, r3
   b8eae:	bf1e      	ittt	ne
   b8eb0:	2100      	movne	r1, #0
   b8eb2:	2000      	movne	r0, #0
   b8eb4:	bd30      	popne	{r4, r5, pc}
   b8eb6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8eba:	d105      	bne.n	b8ec8 <__adddf3+0x230>
   b8ebc:	0040      	lsls	r0, r0, #1
   b8ebe:	4149      	adcs	r1, r1
   b8ec0:	bf28      	it	cs
   b8ec2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8ec6:	bd30      	pop	{r4, r5, pc}
   b8ec8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8ecc:	bf3c      	itt	cc
   b8ece:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8ed2:	bd30      	popcc	{r4, r5, pc}
   b8ed4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8ed8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8edc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8ee0:	f04f 0000 	mov.w	r0, #0
   b8ee4:	bd30      	pop	{r4, r5, pc}
   b8ee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8eea:	bf1a      	itte	ne
   b8eec:	4619      	movne	r1, r3
   b8eee:	4610      	movne	r0, r2
   b8ef0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8ef4:	bf1c      	itt	ne
   b8ef6:	460b      	movne	r3, r1
   b8ef8:	4602      	movne	r2, r0
   b8efa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8efe:	bf06      	itte	eq
   b8f00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8f04:	ea91 0f03 	teqeq	r1, r3
   b8f08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8f0c:	bd30      	pop	{r4, r5, pc}
   b8f0e:	bf00      	nop

000b8f10 <__aeabi_ui2d>:
   b8f10:	f090 0f00 	teq	r0, #0
   b8f14:	bf04      	itt	eq
   b8f16:	2100      	moveq	r1, #0
   b8f18:	4770      	bxeq	lr
   b8f1a:	b530      	push	{r4, r5, lr}
   b8f1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8f20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8f24:	f04f 0500 	mov.w	r5, #0
   b8f28:	f04f 0100 	mov.w	r1, #0
   b8f2c:	e750      	b.n	b8dd0 <__adddf3+0x138>
   b8f2e:	bf00      	nop

000b8f30 <__aeabi_i2d>:
   b8f30:	f090 0f00 	teq	r0, #0
   b8f34:	bf04      	itt	eq
   b8f36:	2100      	moveq	r1, #0
   b8f38:	4770      	bxeq	lr
   b8f3a:	b530      	push	{r4, r5, lr}
   b8f3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8f40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8f44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8f48:	bf48      	it	mi
   b8f4a:	4240      	negmi	r0, r0
   b8f4c:	f04f 0100 	mov.w	r1, #0
   b8f50:	e73e      	b.n	b8dd0 <__adddf3+0x138>
   b8f52:	bf00      	nop

000b8f54 <__aeabi_f2d>:
   b8f54:	0042      	lsls	r2, r0, #1
   b8f56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8f5a:	ea4f 0131 	mov.w	r1, r1, rrx
   b8f5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8f62:	bf1f      	itttt	ne
   b8f64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8f68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8f6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8f70:	4770      	bxne	lr
   b8f72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8f76:	bf08      	it	eq
   b8f78:	4770      	bxeq	lr
   b8f7a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8f7e:	bf04      	itt	eq
   b8f80:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8f84:	4770      	bxeq	lr
   b8f86:	b530      	push	{r4, r5, lr}
   b8f88:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8f8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8f90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8f94:	e71c      	b.n	b8dd0 <__adddf3+0x138>
   b8f96:	bf00      	nop

000b8f98 <__aeabi_ul2d>:
   b8f98:	ea50 0201 	orrs.w	r2, r0, r1
   b8f9c:	bf08      	it	eq
   b8f9e:	4770      	bxeq	lr
   b8fa0:	b530      	push	{r4, r5, lr}
   b8fa2:	f04f 0500 	mov.w	r5, #0
   b8fa6:	e00a      	b.n	b8fbe <__aeabi_l2d+0x16>

000b8fa8 <__aeabi_l2d>:
   b8fa8:	ea50 0201 	orrs.w	r2, r0, r1
   b8fac:	bf08      	it	eq
   b8fae:	4770      	bxeq	lr
   b8fb0:	b530      	push	{r4, r5, lr}
   b8fb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8fb6:	d502      	bpl.n	b8fbe <__aeabi_l2d+0x16>
   b8fb8:	4240      	negs	r0, r0
   b8fba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8fbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8fc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8fc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8fca:	f43f aed8 	beq.w	b8d7e <__adddf3+0xe6>
   b8fce:	f04f 0203 	mov.w	r2, #3
   b8fd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8fd6:	bf18      	it	ne
   b8fd8:	3203      	addne	r2, #3
   b8fda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8fde:	bf18      	it	ne
   b8fe0:	3203      	addne	r2, #3
   b8fe2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8fe6:	f1c2 0320 	rsb	r3, r2, #32
   b8fea:	fa00 fc03 	lsl.w	ip, r0, r3
   b8fee:	fa20 f002 	lsr.w	r0, r0, r2
   b8ff2:	fa01 fe03 	lsl.w	lr, r1, r3
   b8ff6:	ea40 000e 	orr.w	r0, r0, lr
   b8ffa:	fa21 f102 	lsr.w	r1, r1, r2
   b8ffe:	4414      	add	r4, r2
   b9000:	e6bd      	b.n	b8d7e <__adddf3+0xe6>
   b9002:	bf00      	nop

000b9004 <__aeabi_dmul>:
   b9004:	b570      	push	{r4, r5, r6, lr}
   b9006:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b900a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b900e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9012:	bf1d      	ittte	ne
   b9014:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9018:	ea94 0f0c 	teqne	r4, ip
   b901c:	ea95 0f0c 	teqne	r5, ip
   b9020:	f000 f8de 	bleq	b91e0 <__aeabi_dmul+0x1dc>
   b9024:	442c      	add	r4, r5
   b9026:	ea81 0603 	eor.w	r6, r1, r3
   b902a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b902e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9032:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9036:	bf18      	it	ne
   b9038:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b903c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9044:	d038      	beq.n	b90b8 <__aeabi_dmul+0xb4>
   b9046:	fba0 ce02 	umull	ip, lr, r0, r2
   b904a:	f04f 0500 	mov.w	r5, #0
   b904e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9052:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9056:	fbe0 e503 	umlal	lr, r5, r0, r3
   b905a:	f04f 0600 	mov.w	r6, #0
   b905e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9062:	f09c 0f00 	teq	ip, #0
   b9066:	bf18      	it	ne
   b9068:	f04e 0e01 	orrne.w	lr, lr, #1
   b906c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9070:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9074:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9078:	d204      	bcs.n	b9084 <__aeabi_dmul+0x80>
   b907a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b907e:	416d      	adcs	r5, r5
   b9080:	eb46 0606 	adc.w	r6, r6, r6
   b9084:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9088:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b908c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9090:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9094:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9098:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b909c:	bf88      	it	hi
   b909e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b90a2:	d81e      	bhi.n	b90e2 <__aeabi_dmul+0xde>
   b90a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b90a8:	bf08      	it	eq
   b90aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b90ae:	f150 0000 	adcs.w	r0, r0, #0
   b90b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b90b6:	bd70      	pop	{r4, r5, r6, pc}
   b90b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b90bc:	ea46 0101 	orr.w	r1, r6, r1
   b90c0:	ea40 0002 	orr.w	r0, r0, r2
   b90c4:	ea81 0103 	eor.w	r1, r1, r3
   b90c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b90cc:	bfc2      	ittt	gt
   b90ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b90d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b90d6:	bd70      	popgt	{r4, r5, r6, pc}
   b90d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b90dc:	f04f 0e00 	mov.w	lr, #0
   b90e0:	3c01      	subs	r4, #1
   b90e2:	f300 80ab 	bgt.w	b923c <__aeabi_dmul+0x238>
   b90e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b90ea:	bfde      	ittt	le
   b90ec:	2000      	movle	r0, #0
   b90ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b90f2:	bd70      	pople	{r4, r5, r6, pc}
   b90f4:	f1c4 0400 	rsb	r4, r4, #0
   b90f8:	3c20      	subs	r4, #32
   b90fa:	da35      	bge.n	b9168 <__aeabi_dmul+0x164>
   b90fc:	340c      	adds	r4, #12
   b90fe:	dc1b      	bgt.n	b9138 <__aeabi_dmul+0x134>
   b9100:	f104 0414 	add.w	r4, r4, #20
   b9104:	f1c4 0520 	rsb	r5, r4, #32
   b9108:	fa00 f305 	lsl.w	r3, r0, r5
   b910c:	fa20 f004 	lsr.w	r0, r0, r4
   b9110:	fa01 f205 	lsl.w	r2, r1, r5
   b9114:	ea40 0002 	orr.w	r0, r0, r2
   b9118:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b911c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9124:	fa21 f604 	lsr.w	r6, r1, r4
   b9128:	eb42 0106 	adc.w	r1, r2, r6
   b912c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9130:	bf08      	it	eq
   b9132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9136:	bd70      	pop	{r4, r5, r6, pc}
   b9138:	f1c4 040c 	rsb	r4, r4, #12
   b913c:	f1c4 0520 	rsb	r5, r4, #32
   b9140:	fa00 f304 	lsl.w	r3, r0, r4
   b9144:	fa20 f005 	lsr.w	r0, r0, r5
   b9148:	fa01 f204 	lsl.w	r2, r1, r4
   b914c:	ea40 0002 	orr.w	r0, r0, r2
   b9150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9154:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9158:	f141 0100 	adc.w	r1, r1, #0
   b915c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9160:	bf08      	it	eq
   b9162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9166:	bd70      	pop	{r4, r5, r6, pc}
   b9168:	f1c4 0520 	rsb	r5, r4, #32
   b916c:	fa00 f205 	lsl.w	r2, r0, r5
   b9170:	ea4e 0e02 	orr.w	lr, lr, r2
   b9174:	fa20 f304 	lsr.w	r3, r0, r4
   b9178:	fa01 f205 	lsl.w	r2, r1, r5
   b917c:	ea43 0302 	orr.w	r3, r3, r2
   b9180:	fa21 f004 	lsr.w	r0, r1, r4
   b9184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9188:	fa21 f204 	lsr.w	r2, r1, r4
   b918c:	ea20 0002 	bic.w	r0, r0, r2
   b9190:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9198:	bf08      	it	eq
   b919a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b919e:	bd70      	pop	{r4, r5, r6, pc}
   b91a0:	f094 0f00 	teq	r4, #0
   b91a4:	d10f      	bne.n	b91c6 <__aeabi_dmul+0x1c2>
   b91a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b91aa:	0040      	lsls	r0, r0, #1
   b91ac:	eb41 0101 	adc.w	r1, r1, r1
   b91b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b91b4:	bf08      	it	eq
   b91b6:	3c01      	subeq	r4, #1
   b91b8:	d0f7      	beq.n	b91aa <__aeabi_dmul+0x1a6>
   b91ba:	ea41 0106 	orr.w	r1, r1, r6
   b91be:	f095 0f00 	teq	r5, #0
   b91c2:	bf18      	it	ne
   b91c4:	4770      	bxne	lr
   b91c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b91ca:	0052      	lsls	r2, r2, #1
   b91cc:	eb43 0303 	adc.w	r3, r3, r3
   b91d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b91d4:	bf08      	it	eq
   b91d6:	3d01      	subeq	r5, #1
   b91d8:	d0f7      	beq.n	b91ca <__aeabi_dmul+0x1c6>
   b91da:	ea43 0306 	orr.w	r3, r3, r6
   b91de:	4770      	bx	lr
   b91e0:	ea94 0f0c 	teq	r4, ip
   b91e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b91e8:	bf18      	it	ne
   b91ea:	ea95 0f0c 	teqne	r5, ip
   b91ee:	d00c      	beq.n	b920a <__aeabi_dmul+0x206>
   b91f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b91f4:	bf18      	it	ne
   b91f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b91fa:	d1d1      	bne.n	b91a0 <__aeabi_dmul+0x19c>
   b91fc:	ea81 0103 	eor.w	r1, r1, r3
   b9200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9204:	f04f 0000 	mov.w	r0, #0
   b9208:	bd70      	pop	{r4, r5, r6, pc}
   b920a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b920e:	bf06      	itte	eq
   b9210:	4610      	moveq	r0, r2
   b9212:	4619      	moveq	r1, r3
   b9214:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9218:	d019      	beq.n	b924e <__aeabi_dmul+0x24a>
   b921a:	ea94 0f0c 	teq	r4, ip
   b921e:	d102      	bne.n	b9226 <__aeabi_dmul+0x222>
   b9220:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9224:	d113      	bne.n	b924e <__aeabi_dmul+0x24a>
   b9226:	ea95 0f0c 	teq	r5, ip
   b922a:	d105      	bne.n	b9238 <__aeabi_dmul+0x234>
   b922c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9230:	bf1c      	itt	ne
   b9232:	4610      	movne	r0, r2
   b9234:	4619      	movne	r1, r3
   b9236:	d10a      	bne.n	b924e <__aeabi_dmul+0x24a>
   b9238:	ea81 0103 	eor.w	r1, r1, r3
   b923c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9240:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9248:	f04f 0000 	mov.w	r0, #0
   b924c:	bd70      	pop	{r4, r5, r6, pc}
   b924e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9252:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9256:	bd70      	pop	{r4, r5, r6, pc}

000b9258 <__aeabi_ddiv>:
   b9258:	b570      	push	{r4, r5, r6, lr}
   b925a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b925e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9262:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9266:	bf1d      	ittte	ne
   b9268:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b926c:	ea94 0f0c 	teqne	r4, ip
   b9270:	ea95 0f0c 	teqne	r5, ip
   b9274:	f000 f8a7 	bleq	b93c6 <__aeabi_ddiv+0x16e>
   b9278:	eba4 0405 	sub.w	r4, r4, r5
   b927c:	ea81 0e03 	eor.w	lr, r1, r3
   b9280:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9284:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9288:	f000 8088 	beq.w	b939c <__aeabi_ddiv+0x144>
   b928c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9290:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9294:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9298:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b929c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b92a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b92a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b92a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b92ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b92b0:	429d      	cmp	r5, r3
   b92b2:	bf08      	it	eq
   b92b4:	4296      	cmpeq	r6, r2
   b92b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b92ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b92be:	d202      	bcs.n	b92c6 <__aeabi_ddiv+0x6e>
   b92c0:	085b      	lsrs	r3, r3, #1
   b92c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b92c6:	1ab6      	subs	r6, r6, r2
   b92c8:	eb65 0503 	sbc.w	r5, r5, r3
   b92cc:	085b      	lsrs	r3, r3, #1
   b92ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b92d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b92d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b92da:	ebb6 0e02 	subs.w	lr, r6, r2
   b92de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b92e2:	bf22      	ittt	cs
   b92e4:	1ab6      	subcs	r6, r6, r2
   b92e6:	4675      	movcs	r5, lr
   b92e8:	ea40 000c 	orrcs.w	r0, r0, ip
   b92ec:	085b      	lsrs	r3, r3, #1
   b92ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b92f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b92f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b92fa:	bf22      	ittt	cs
   b92fc:	1ab6      	subcs	r6, r6, r2
   b92fe:	4675      	movcs	r5, lr
   b9300:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9304:	085b      	lsrs	r3, r3, #1
   b9306:	ea4f 0232 	mov.w	r2, r2, rrx
   b930a:	ebb6 0e02 	subs.w	lr, r6, r2
   b930e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9312:	bf22      	ittt	cs
   b9314:	1ab6      	subcs	r6, r6, r2
   b9316:	4675      	movcs	r5, lr
   b9318:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b931c:	085b      	lsrs	r3, r3, #1
   b931e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9322:	ebb6 0e02 	subs.w	lr, r6, r2
   b9326:	eb75 0e03 	sbcs.w	lr, r5, r3
   b932a:	bf22      	ittt	cs
   b932c:	1ab6      	subcs	r6, r6, r2
   b932e:	4675      	movcs	r5, lr
   b9330:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9334:	ea55 0e06 	orrs.w	lr, r5, r6
   b9338:	d018      	beq.n	b936c <__aeabi_ddiv+0x114>
   b933a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b933e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9342:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b934a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b934e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9352:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9356:	d1c0      	bne.n	b92da <__aeabi_ddiv+0x82>
   b9358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b935c:	d10b      	bne.n	b9376 <__aeabi_ddiv+0x11e>
   b935e:	ea41 0100 	orr.w	r1, r1, r0
   b9362:	f04f 0000 	mov.w	r0, #0
   b9366:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b936a:	e7b6      	b.n	b92da <__aeabi_ddiv+0x82>
   b936c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9370:	bf04      	itt	eq
   b9372:	4301      	orreq	r1, r0
   b9374:	2000      	moveq	r0, #0
   b9376:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b937a:	bf88      	it	hi
   b937c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9380:	f63f aeaf 	bhi.w	b90e2 <__aeabi_dmul+0xde>
   b9384:	ebb5 0c03 	subs.w	ip, r5, r3
   b9388:	bf04      	itt	eq
   b938a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b938e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9392:	f150 0000 	adcs.w	r0, r0, #0
   b9396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b939a:	bd70      	pop	{r4, r5, r6, pc}
   b939c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b93a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b93a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b93a8:	bfc2      	ittt	gt
   b93aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b93ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b93b2:	bd70      	popgt	{r4, r5, r6, pc}
   b93b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b93b8:	f04f 0e00 	mov.w	lr, #0
   b93bc:	3c01      	subs	r4, #1
   b93be:	e690      	b.n	b90e2 <__aeabi_dmul+0xde>
   b93c0:	ea45 0e06 	orr.w	lr, r5, r6
   b93c4:	e68d      	b.n	b90e2 <__aeabi_dmul+0xde>
   b93c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b93ca:	ea94 0f0c 	teq	r4, ip
   b93ce:	bf08      	it	eq
   b93d0:	ea95 0f0c 	teqeq	r5, ip
   b93d4:	f43f af3b 	beq.w	b924e <__aeabi_dmul+0x24a>
   b93d8:	ea94 0f0c 	teq	r4, ip
   b93dc:	d10a      	bne.n	b93f4 <__aeabi_ddiv+0x19c>
   b93de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b93e2:	f47f af34 	bne.w	b924e <__aeabi_dmul+0x24a>
   b93e6:	ea95 0f0c 	teq	r5, ip
   b93ea:	f47f af25 	bne.w	b9238 <__aeabi_dmul+0x234>
   b93ee:	4610      	mov	r0, r2
   b93f0:	4619      	mov	r1, r3
   b93f2:	e72c      	b.n	b924e <__aeabi_dmul+0x24a>
   b93f4:	ea95 0f0c 	teq	r5, ip
   b93f8:	d106      	bne.n	b9408 <__aeabi_ddiv+0x1b0>
   b93fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b93fe:	f43f aefd 	beq.w	b91fc <__aeabi_dmul+0x1f8>
   b9402:	4610      	mov	r0, r2
   b9404:	4619      	mov	r1, r3
   b9406:	e722      	b.n	b924e <__aeabi_dmul+0x24a>
   b9408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b940c:	bf18      	it	ne
   b940e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9412:	f47f aec5 	bne.w	b91a0 <__aeabi_dmul+0x19c>
   b9416:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b941a:	f47f af0d 	bne.w	b9238 <__aeabi_dmul+0x234>
   b941e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b9422:	f47f aeeb 	bne.w	b91fc <__aeabi_dmul+0x1f8>
   b9426:	e712      	b.n	b924e <__aeabi_dmul+0x24a>

000b9428 <__gedf2>:
   b9428:	f04f 3cff 	mov.w	ip, #4294967295
   b942c:	e006      	b.n	b943c <__cmpdf2+0x4>
   b942e:	bf00      	nop

000b9430 <__ledf2>:
   b9430:	f04f 0c01 	mov.w	ip, #1
   b9434:	e002      	b.n	b943c <__cmpdf2+0x4>
   b9436:	bf00      	nop

000b9438 <__cmpdf2>:
   b9438:	f04f 0c01 	mov.w	ip, #1
   b943c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b944c:	bf18      	it	ne
   b944e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9452:	d01b      	beq.n	b948c <__cmpdf2+0x54>
   b9454:	b001      	add	sp, #4
   b9456:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b945a:	bf0c      	ite	eq
   b945c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9460:	ea91 0f03 	teqne	r1, r3
   b9464:	bf02      	ittt	eq
   b9466:	ea90 0f02 	teqeq	r0, r2
   b946a:	2000      	moveq	r0, #0
   b946c:	4770      	bxeq	lr
   b946e:	f110 0f00 	cmn.w	r0, #0
   b9472:	ea91 0f03 	teq	r1, r3
   b9476:	bf58      	it	pl
   b9478:	4299      	cmppl	r1, r3
   b947a:	bf08      	it	eq
   b947c:	4290      	cmpeq	r0, r2
   b947e:	bf2c      	ite	cs
   b9480:	17d8      	asrcs	r0, r3, #31
   b9482:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9486:	f040 0001 	orr.w	r0, r0, #1
   b948a:	4770      	bx	lr
   b948c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9494:	d102      	bne.n	b949c <__cmpdf2+0x64>
   b9496:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b949a:	d107      	bne.n	b94ac <__cmpdf2+0x74>
   b949c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b94a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b94a4:	d1d6      	bne.n	b9454 <__cmpdf2+0x1c>
   b94a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b94aa:	d0d3      	beq.n	b9454 <__cmpdf2+0x1c>
   b94ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   b94b0:	4770      	bx	lr
   b94b2:	bf00      	nop

000b94b4 <__aeabi_cdrcmple>:
   b94b4:	4684      	mov	ip, r0
   b94b6:	4610      	mov	r0, r2
   b94b8:	4662      	mov	r2, ip
   b94ba:	468c      	mov	ip, r1
   b94bc:	4619      	mov	r1, r3
   b94be:	4663      	mov	r3, ip
   b94c0:	e000      	b.n	b94c4 <__aeabi_cdcmpeq>
   b94c2:	bf00      	nop

000b94c4 <__aeabi_cdcmpeq>:
   b94c4:	b501      	push	{r0, lr}
   b94c6:	f7ff ffb7 	bl	b9438 <__cmpdf2>
   b94ca:	2800      	cmp	r0, #0
   b94cc:	bf48      	it	mi
   b94ce:	f110 0f00 	cmnmi.w	r0, #0
   b94d2:	bd01      	pop	{r0, pc}

000b94d4 <__aeabi_dcmpeq>:
   b94d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94d8:	f7ff fff4 	bl	b94c4 <__aeabi_cdcmpeq>
   b94dc:	bf0c      	ite	eq
   b94de:	2001      	moveq	r0, #1
   b94e0:	2000      	movne	r0, #0
   b94e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b94e6:	bf00      	nop

000b94e8 <__aeabi_dcmplt>:
   b94e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94ec:	f7ff ffea 	bl	b94c4 <__aeabi_cdcmpeq>
   b94f0:	bf34      	ite	cc
   b94f2:	2001      	movcc	r0, #1
   b94f4:	2000      	movcs	r0, #0
   b94f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b94fa:	bf00      	nop

000b94fc <__aeabi_dcmple>:
   b94fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9500:	f7ff ffe0 	bl	b94c4 <__aeabi_cdcmpeq>
   b9504:	bf94      	ite	ls
   b9506:	2001      	movls	r0, #1
   b9508:	2000      	movhi	r0, #0
   b950a:	f85d fb08 	ldr.w	pc, [sp], #8
   b950e:	bf00      	nop

000b9510 <__aeabi_dcmpge>:
   b9510:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9514:	f7ff ffce 	bl	b94b4 <__aeabi_cdrcmple>
   b9518:	bf94      	ite	ls
   b951a:	2001      	movls	r0, #1
   b951c:	2000      	movhi	r0, #0
   b951e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9522:	bf00      	nop

000b9524 <__aeabi_dcmpgt>:
   b9524:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9528:	f7ff ffc4 	bl	b94b4 <__aeabi_cdrcmple>
   b952c:	bf34      	ite	cc
   b952e:	2001      	movcc	r0, #1
   b9530:	2000      	movcs	r0, #0
   b9532:	f85d fb08 	ldr.w	pc, [sp], #8
   b9536:	bf00      	nop

000b9538 <__aeabi_d2uiz>:
   b9538:	004a      	lsls	r2, r1, #1
   b953a:	d211      	bcs.n	b9560 <__aeabi_d2uiz+0x28>
   b953c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9540:	d211      	bcs.n	b9566 <__aeabi_d2uiz+0x2e>
   b9542:	d50d      	bpl.n	b9560 <__aeabi_d2uiz+0x28>
   b9544:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9548:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b954c:	d40e      	bmi.n	b956c <__aeabi_d2uiz+0x34>
   b954e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9556:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b955a:	fa23 f002 	lsr.w	r0, r3, r2
   b955e:	4770      	bx	lr
   b9560:	f04f 0000 	mov.w	r0, #0
   b9564:	4770      	bx	lr
   b9566:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b956a:	d102      	bne.n	b9572 <__aeabi_d2uiz+0x3a>
   b956c:	f04f 30ff 	mov.w	r0, #4294967295
   b9570:	4770      	bx	lr
   b9572:	f04f 0000 	mov.w	r0, #0
   b9576:	4770      	bx	lr

000b9578 <__aeabi_d2f>:
   b9578:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b957c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9580:	bf24      	itt	cs
   b9582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b958a:	d90d      	bls.n	b95a8 <__aeabi_d2f+0x30>
   b958c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b959c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b95a0:	bf08      	it	eq
   b95a2:	f020 0001 	biceq.w	r0, r0, #1
   b95a6:	4770      	bx	lr
   b95a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b95ac:	d121      	bne.n	b95f2 <__aeabi_d2f+0x7a>
   b95ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b95b2:	bfbc      	itt	lt
   b95b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b95b8:	4770      	bxlt	lr
   b95ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b95be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b95c2:	f1c2 0218 	rsb	r2, r2, #24
   b95c6:	f1c2 0c20 	rsb	ip, r2, #32
   b95ca:	fa10 f30c 	lsls.w	r3, r0, ip
   b95ce:	fa20 f002 	lsr.w	r0, r0, r2
   b95d2:	bf18      	it	ne
   b95d4:	f040 0001 	orrne.w	r0, r0, #1
   b95d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b95dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b95e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b95e4:	ea40 000c 	orr.w	r0, r0, ip
   b95e8:	fa23 f302 	lsr.w	r3, r3, r2
   b95ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b95f0:	e7cc      	b.n	b958c <__aeabi_d2f+0x14>
   b95f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b95f6:	d107      	bne.n	b9608 <__aeabi_d2f+0x90>
   b95f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b95fc:	bf1e      	ittt	ne
   b95fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b9606:	4770      	bxne	lr
   b9608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b960c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9614:	4770      	bx	lr
   b9616:	bf00      	nop

000b9618 <atexit>:
   b9618:	2300      	movs	r3, #0
   b961a:	4601      	mov	r1, r0
   b961c:	461a      	mov	r2, r3
   b961e:	4618      	mov	r0, r3
   b9620:	f000 b8c8 	b.w	b97b4 <__register_exitproc>

000b9624 <calloc>:
   b9624:	4b02      	ldr	r3, [pc, #8]	; (b9630 <calloc+0xc>)
   b9626:	460a      	mov	r2, r1
   b9628:	4601      	mov	r1, r0
   b962a:	6818      	ldr	r0, [r3, #0]
   b962c:	f000 b818 	b.w	b9660 <_calloc_r>
   b9630:	2003df74 	.word	0x2003df74

000b9634 <memcpy>:
   b9634:	440a      	add	r2, r1
   b9636:	4291      	cmp	r1, r2
   b9638:	f100 33ff 	add.w	r3, r0, #4294967295
   b963c:	d100      	bne.n	b9640 <memcpy+0xc>
   b963e:	4770      	bx	lr
   b9640:	b510      	push	{r4, lr}
   b9642:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9646:	f803 4f01 	strb.w	r4, [r3, #1]!
   b964a:	4291      	cmp	r1, r2
   b964c:	d1f9      	bne.n	b9642 <memcpy+0xe>
   b964e:	bd10      	pop	{r4, pc}

000b9650 <memset>:
   b9650:	4402      	add	r2, r0
   b9652:	4603      	mov	r3, r0
   b9654:	4293      	cmp	r3, r2
   b9656:	d100      	bne.n	b965a <memset+0xa>
   b9658:	4770      	bx	lr
   b965a:	f803 1b01 	strb.w	r1, [r3], #1
   b965e:	e7f9      	b.n	b9654 <memset+0x4>

000b9660 <_calloc_r>:
   b9660:	b513      	push	{r0, r1, r4, lr}
   b9662:	434a      	muls	r2, r1
   b9664:	4611      	mov	r1, r2
   b9666:	9201      	str	r2, [sp, #4]
   b9668:	f7fe fbbc 	bl	b7de4 <_malloc_r>
   b966c:	4604      	mov	r4, r0
   b966e:	b118      	cbz	r0, b9678 <_calloc_r+0x18>
   b9670:	9a01      	ldr	r2, [sp, #4]
   b9672:	2100      	movs	r1, #0
   b9674:	f7ff ffec 	bl	b9650 <memset>
   b9678:	4620      	mov	r0, r4
   b967a:	b002      	add	sp, #8
   b967c:	bd10      	pop	{r4, pc}
	...

000b9680 <srand>:
   b9680:	b538      	push	{r3, r4, r5, lr}
   b9682:	4b10      	ldr	r3, [pc, #64]	; (b96c4 <srand+0x44>)
   b9684:	681d      	ldr	r5, [r3, #0]
   b9686:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9688:	4604      	mov	r4, r0
   b968a:	b9b3      	cbnz	r3, b96ba <srand+0x3a>
   b968c:	2018      	movs	r0, #24
   b968e:	f7fe fb81 	bl	b7d94 <malloc>
   b9692:	4602      	mov	r2, r0
   b9694:	63a8      	str	r0, [r5, #56]	; 0x38
   b9696:	b920      	cbnz	r0, b96a2 <srand+0x22>
   b9698:	4b0b      	ldr	r3, [pc, #44]	; (b96c8 <srand+0x48>)
   b969a:	480c      	ldr	r0, [pc, #48]	; (b96cc <srand+0x4c>)
   b969c:	2142      	movs	r1, #66	; 0x42
   b969e:	f7fe fba9 	bl	b7df4 <__assert_func>
   b96a2:	490b      	ldr	r1, [pc, #44]	; (b96d0 <srand+0x50>)
   b96a4:	4b0b      	ldr	r3, [pc, #44]	; (b96d4 <srand+0x54>)
   b96a6:	e9c0 1300 	strd	r1, r3, [r0]
   b96aa:	4b0b      	ldr	r3, [pc, #44]	; (b96d8 <srand+0x58>)
   b96ac:	6083      	str	r3, [r0, #8]
   b96ae:	230b      	movs	r3, #11
   b96b0:	8183      	strh	r3, [r0, #12]
   b96b2:	2100      	movs	r1, #0
   b96b4:	2001      	movs	r0, #1
   b96b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b96ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b96bc:	2200      	movs	r2, #0
   b96be:	611c      	str	r4, [r3, #16]
   b96c0:	615a      	str	r2, [r3, #20]
   b96c2:	bd38      	pop	{r3, r4, r5, pc}
   b96c4:	2003df74 	.word	0x2003df74
   b96c8:	000bad3d 	.word	0x000bad3d
   b96cc:	000bad54 	.word	0x000bad54
   b96d0:	abcd330e 	.word	0xabcd330e
   b96d4:	e66d1234 	.word	0xe66d1234
   b96d8:	0005deec 	.word	0x0005deec

000b96dc <strcpy>:
   b96dc:	4603      	mov	r3, r0
   b96de:	f811 2b01 	ldrb.w	r2, [r1], #1
   b96e2:	f803 2b01 	strb.w	r2, [r3], #1
   b96e6:	2a00      	cmp	r2, #0
   b96e8:	d1f9      	bne.n	b96de <strcpy+0x2>
   b96ea:	4770      	bx	lr

000b96ec <strlen>:
   b96ec:	4603      	mov	r3, r0
   b96ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   b96f2:	2a00      	cmp	r2, #0
   b96f4:	d1fb      	bne.n	b96ee <strlen+0x2>
   b96f6:	1a18      	subs	r0, r3, r0
   b96f8:	3801      	subs	r0, #1
   b96fa:	4770      	bx	lr

000b96fc <strtok>:
   b96fc:	4b16      	ldr	r3, [pc, #88]	; (b9758 <strtok+0x5c>)
   b96fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9700:	681e      	ldr	r6, [r3, #0]
   b9702:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9704:	4605      	mov	r5, r0
   b9706:	b9fc      	cbnz	r4, b9748 <strtok+0x4c>
   b9708:	2050      	movs	r0, #80	; 0x50
   b970a:	9101      	str	r1, [sp, #4]
   b970c:	f7fe fb42 	bl	b7d94 <malloc>
   b9710:	9901      	ldr	r1, [sp, #4]
   b9712:	65b0      	str	r0, [r6, #88]	; 0x58
   b9714:	4602      	mov	r2, r0
   b9716:	b920      	cbnz	r0, b9722 <strtok+0x26>
   b9718:	4b10      	ldr	r3, [pc, #64]	; (b975c <strtok+0x60>)
   b971a:	4811      	ldr	r0, [pc, #68]	; (b9760 <strtok+0x64>)
   b971c:	2157      	movs	r1, #87	; 0x57
   b971e:	f7fe fb69 	bl	b7df4 <__assert_func>
   b9722:	e9c0 4400 	strd	r4, r4, [r0]
   b9726:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b972a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b972e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b9732:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9736:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b973a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b973e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b9742:	6184      	str	r4, [r0, #24]
   b9744:	7704      	strb	r4, [r0, #28]
   b9746:	6244      	str	r4, [r0, #36]	; 0x24
   b9748:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b974a:	2301      	movs	r3, #1
   b974c:	4628      	mov	r0, r5
   b974e:	b002      	add	sp, #8
   b9750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9754:	f000 b806 	b.w	b9764 <__strtok_r>
   b9758:	2003df74 	.word	0x2003df74
   b975c:	000bad3d 	.word	0x000bad3d
   b9760:	000badd1 	.word	0x000badd1

000b9764 <__strtok_r>:
   b9764:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9766:	b908      	cbnz	r0, b976c <__strtok_r+0x8>
   b9768:	6810      	ldr	r0, [r2, #0]
   b976a:	b188      	cbz	r0, b9790 <__strtok_r+0x2c>
   b976c:	4604      	mov	r4, r0
   b976e:	4620      	mov	r0, r4
   b9770:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9774:	460f      	mov	r7, r1
   b9776:	f817 6b01 	ldrb.w	r6, [r7], #1
   b977a:	b91e      	cbnz	r6, b9784 <__strtok_r+0x20>
   b977c:	b965      	cbnz	r5, b9798 <__strtok_r+0x34>
   b977e:	6015      	str	r5, [r2, #0]
   b9780:	4628      	mov	r0, r5
   b9782:	e005      	b.n	b9790 <__strtok_r+0x2c>
   b9784:	42b5      	cmp	r5, r6
   b9786:	d1f6      	bne.n	b9776 <__strtok_r+0x12>
   b9788:	2b00      	cmp	r3, #0
   b978a:	d1f0      	bne.n	b976e <__strtok_r+0xa>
   b978c:	6014      	str	r4, [r2, #0]
   b978e:	7003      	strb	r3, [r0, #0]
   b9790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9792:	461c      	mov	r4, r3
   b9794:	e00c      	b.n	b97b0 <__strtok_r+0x4c>
   b9796:	b915      	cbnz	r5, b979e <__strtok_r+0x3a>
   b9798:	f814 3b01 	ldrb.w	r3, [r4], #1
   b979c:	460e      	mov	r6, r1
   b979e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b97a2:	42ab      	cmp	r3, r5
   b97a4:	d1f7      	bne.n	b9796 <__strtok_r+0x32>
   b97a6:	2b00      	cmp	r3, #0
   b97a8:	d0f3      	beq.n	b9792 <__strtok_r+0x2e>
   b97aa:	2300      	movs	r3, #0
   b97ac:	f804 3c01 	strb.w	r3, [r4, #-1]
   b97b0:	6014      	str	r4, [r2, #0]
   b97b2:	e7ed      	b.n	b9790 <__strtok_r+0x2c>

000b97b4 <__register_exitproc>:
   b97b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b97b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9874 <__register_exitproc+0xc0>
   b97bc:	4606      	mov	r6, r0
   b97be:	f8d8 0000 	ldr.w	r0, [r8]
   b97c2:	461f      	mov	r7, r3
   b97c4:	460d      	mov	r5, r1
   b97c6:	4691      	mov	r9, r2
   b97c8:	f000 f856 	bl	b9878 <__retarget_lock_acquire_recursive>
   b97cc:	4b25      	ldr	r3, [pc, #148]	; (b9864 <__register_exitproc+0xb0>)
   b97ce:	681c      	ldr	r4, [r3, #0]
   b97d0:	b934      	cbnz	r4, b97e0 <__register_exitproc+0x2c>
   b97d2:	4c25      	ldr	r4, [pc, #148]	; (b9868 <__register_exitproc+0xb4>)
   b97d4:	601c      	str	r4, [r3, #0]
   b97d6:	4b25      	ldr	r3, [pc, #148]	; (b986c <__register_exitproc+0xb8>)
   b97d8:	b113      	cbz	r3, b97e0 <__register_exitproc+0x2c>
   b97da:	681b      	ldr	r3, [r3, #0]
   b97dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b97e0:	6863      	ldr	r3, [r4, #4]
   b97e2:	2b1f      	cmp	r3, #31
   b97e4:	dd07      	ble.n	b97f6 <__register_exitproc+0x42>
   b97e6:	f8d8 0000 	ldr.w	r0, [r8]
   b97ea:	f000 f847 	bl	b987c <__retarget_lock_release_recursive>
   b97ee:	f04f 30ff 	mov.w	r0, #4294967295
   b97f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b97f6:	b34e      	cbz	r6, b984c <__register_exitproc+0x98>
   b97f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b97fc:	b988      	cbnz	r0, b9822 <__register_exitproc+0x6e>
   b97fe:	4b1c      	ldr	r3, [pc, #112]	; (b9870 <__register_exitproc+0xbc>)
   b9800:	b923      	cbnz	r3, b980c <__register_exitproc+0x58>
   b9802:	f8d8 0000 	ldr.w	r0, [r8]
   b9806:	f000 f838 	bl	b987a <__retarget_lock_release>
   b980a:	e7f0      	b.n	b97ee <__register_exitproc+0x3a>
   b980c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9810:	f7fe fac0 	bl	b7d94 <malloc>
   b9814:	2800      	cmp	r0, #0
   b9816:	d0f4      	beq.n	b9802 <__register_exitproc+0x4e>
   b9818:	2300      	movs	r3, #0
   b981a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b981e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9822:	6863      	ldr	r3, [r4, #4]
   b9824:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9828:	2201      	movs	r2, #1
   b982a:	409a      	lsls	r2, r3
   b982c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9830:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9834:	4313      	orrs	r3, r2
   b9836:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b983a:	2e02      	cmp	r6, #2
   b983c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9840:	bf02      	ittt	eq
   b9842:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9846:	4313      	orreq	r3, r2
   b9848:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b984c:	6863      	ldr	r3, [r4, #4]
   b984e:	f8d8 0000 	ldr.w	r0, [r8]
   b9852:	1c5a      	adds	r2, r3, #1
   b9854:	3302      	adds	r3, #2
   b9856:	6062      	str	r2, [r4, #4]
   b9858:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b985c:	f000 f80e 	bl	b987c <__retarget_lock_release_recursive>
   b9860:	2000      	movs	r0, #0
   b9862:	e7c6      	b.n	b97f2 <__register_exitproc+0x3e>
   b9864:	2003e7e8 	.word	0x2003e7e8
   b9868:	2003e75c 	.word	0x2003e75c
   b986c:	00000000 	.word	0x00000000
   b9870:	000b7d95 	.word	0x000b7d95
   b9874:	2003dfd8 	.word	0x2003dfd8

000b9878 <__retarget_lock_acquire_recursive>:
   b9878:	4770      	bx	lr

000b987a <__retarget_lock_release>:
   b987a:	4770      	bx	lr

000b987c <__retarget_lock_release_recursive>:
   b987c:	4770      	bx	lr

000b987e <link_code_end>:
	...

000b9880 <dynalib_user>:
   b9880:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9890:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b98a0:	7620 7269 7574 6c61 4e00 206f 7365 7620      virtual.No es v
   b98b0:	6c61 6469 006f 6554 706d 203a 6625 4900     alido.Temp: %f.I
   b98c0:	766e 6c61 6469 6553 736e 726f 7245 6f72     nvalidSensorErro
   b98d0:	0072 6341 7574 6461 726f 5220 4247 4100     r.Actuador RGB.A
   b98e0:	7463 6175 6f64 2072 755a 626d 6461 726f     ctuador Zumbador
   b98f0:	5300 6e65 6f73 2072 6564 4c20 7a75 5300     .Sensor de Luz.S
   b9900:	6e65 6f73 2072 6564 5220 6975 6f64 5300     ensor de Ruido.S
   b9910:	6e65 6f73 2072 6f42 6f74 006e 6553 736e     ensor Boton.Sens
   b9920:	726f 5220 746f 7461 7669 006f 4120 2000     or Rotativo. A. 
   b9930:	0044 6553 736e 726f 5020 636f 2061 6944     D.Sensor Poca Di
   b9940:	7473 6e61 6963 0061 6553 736e 726f 4d20     stancia.Sensor M
   b9950:	6375 6168 4420 7369 6174 636e 6169 4f00     ucha Distancia.O
   b9960:	454c 3a44 5320 6e65 6f73 2072 754c 207a     LED: Sensor Luz 
   b9970:	3e2d 2520 0064 6553 736e 726f 4e20 206f     -> %d.Sensor No 
   b9980:	754c 007a 6553 736e 726f 5320 2069 754c     Luz.Sensor Si Lu
   b9990:	007a 6553 736e 726f 4e20 206f 7552 6469     z.Sensor No Ruid
   b99a0:	006f 6553 736e 726f 5320 2069 7552 6469     o.Sensor Si Ruid
   b99b0:	006f 6553 736e 726f 4e20 206f 6f42 6f74     o.Sensor No Boto
   b99c0:	006e 6553 736e 726f 5320 2069 6f42 6f74     n.Sensor Si Boto
   b99d0:	006e 6553 736e 726f 4e20 206f 6f52 6174     n.Sensor No Rota
   b99e0:	6974 6f76 5300 6e65 6f73 2072 6953 5220     tivo.Sensor Si R
   b99f0:	746f 7461 7669 006f 6553 736e 726f 5420     otativo.Sensor T
   b9a00:	6d65 2e70 7246 6f69 5300 6e65 6f73 2072     emp.Frio.Sensor 
   b9a10:	6554 706d 542e 6d65 6c70 6461 006f 6553     Temp.Templado.Se
   b9a20:	736e 726f 5420 6d65 2e70 6143 6f6c 0072     nsor Temp.Calor.
   b9a30:	6553 736e 726f 4420 7369 6174 636e 6169     Sensor Distancia
   b9a40:	4320 7265 6163 5300 6e65 6f73 2072 6944      Cerca.Sensor Di
   b9a50:	7473 6e61 6963 2061 654c 6f6a 0073 6553     stancia Lejos.Se
   b9a60:	736e 726f 6f4e 6156 696c 6f64 7245 6f72     nsorNoValidoErro
   b9a70:	0072 4752 2042 6556 6472 0065 4752 2042     r.RGB Verde.RGB 
   b9a80:	6f52 6f6a 5200 4247 4120 616d 6972 6c6c     Rojo.RGB Amarill
   b9a90:	006f 4752 2042 6f4d 6172 6f64 5200 4247     o.RGB Morado.RGB
   b9aa0:	4120 757a 006c 4752 2042 614e 6172 6a6e      Azul.RGB Naranj
   b9ab0:	0061 4752 2042 6c42 6e69 006b 4752 2042     a.RGB Blink.RGB 
   b9ac0:	6152 6e69 6f62 0077 755a 626d 6461 726f     Rainbow.Zumbador
   b9ad0:	4f20 2d6e 664f 0066 755a 626d 6461 726f      On-Off.Zumbador
   b9ae0:	4220 696c 6b6e 4100 7463 6175 6f64 4e72      Blink.ActuadorN
   b9af0:	566f 6c61 6469 456f 7272 726f 4d00 4649     oValidoError.MIF
   b9b00:	5241 5f45 6552 6461 2928 6620 6961 656c     ARE_Read() faile
   b9b10:	3a64 0020 4350 5f44 7541 6874 6e65 6974     d: .PCD_Authenti
   b9b20:	6163 6574 2928 6620 6961 656c 3a64 0020     cate() failed: .
   b9b30:	6154 4967 666e 3a6f 2520 0073 7345 6120     TagInfo: %s.Es a
   b9b40:	616e 6f6c 6967 6f63 4300 6e6f 6365 6174     nalogico.Conecta
   b9b50:	2072 6c61 7020 6575 7472 206f 3041 000a     r al puerto A0..
   b9b60:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   b9b70:	6f74 4120 0a32 4300 6e6f 6365 6174 2072     to A2..Conectar 
   b9b80:	6c61 7020 6575 7472 206f 3441 000a 6f43     al puerto A4..Co
   b9b90:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
   b9ba0:	4420 0a32 4300 6e6f 6365 6174 2072 6c61      D2..Conectar al
   b9bb0:	7020 6575 7472 206f 3444 000a 6f43 656e      puerto D4..Cone
   b9bc0:	7463 7261 6120 206c 7570 7265 6f74 4420     ctar al puerto D
   b9bd0:	0a36 4500 7272 726f 203a 6f4e 6820 7961     6..Error: No hay
   b9be0:	6d20 7361 7020 6575 7472 736f 6420 7369      mas puertos dis
   b9bf0:	6f70 696e 6c62 7365 0a20 5600 6c61 726f     ponibles ..Valor
   b9c00:	6e20 206f 6176 696c 6f64 4c00 6465 7245      no valido.LedEr
   b9c10:	6f72 4f72 7470 6f69 006e 6e49 6176 696c     rorOption.Invali
   b9c20:	2064 6573 736e 726f 2021 3e2d 5320 6e65     d sensor! -> Sen
   b9c30:	6f73 2072 6572 6570 6974 6f64 6520 206e     sor repetido en 
   b9c40:	6c65 6220 6f6c 7571 0065 6154 2067 6544     el bloque.Tag De
   b9c50:	6574 7463 6461 2061 2d2d 203e 4d00 646f     tectada --> .Mod
   b9c60:	206f 494b 5344 6420 7465 6365 6174 6f64     o KIDS detectado
   b9c70:	4d00 646f 206f 5553 5243 2045 6564 6574     .Modo SUCRE dete
   b9c80:	7463 6461 006f 6a45 6365 7475 6e61 6f64     ctado.Ejecutando
   b9c90:	7420 6761 2d20 3e2d 0020 6553 736e 726f      tag --> .Sensor
   b9ca0:	6420 7465 6365 6174 6f64 4500 7272 726f      detectado.Error
   b9cb0:	5020 6575 7472 006f 6553 6520 7073 7265      Puerto.Se esper
   b9cc0:	6261 2061 4649 7420 6761 4400 7365 7570     aba IF tag.Despu
   b9cd0:	7365 6420 2065 6e75 7320 6e65 6f73 2072     es de un sensor 
   b9ce0:	6573 6520 7073 7265 2061 6e75 2061 6f63     se espera una co
   b9cf0:	636e 6f69 3a6e 4120 444e 7520 4f20 0052     ncion: AND u OR.
   b9d00:	6341 7574 6461 726f 6420 7465 6365 6174     Actuador detecta
   b9d10:	6f64 5300 2065 7365 6570 6172 6162 5420     do.Se esperaba T
   b9d20:	4548 204e 6174 0067 6e49 6176 696c 2064     HEN tag.Invalid 
   b9d30:	6341 7574 6461 726f 4900 2046 6564 6574     Actuador.IF dete
   b9d40:	7463 6461 006f 754e 656d 6f72 6420 2065     ctado.Numero de 
   b9d50:	6c62 716f 6575 2073 203e 2032 7c7c 5320     bloques > 2 || S
   b9d60:	2065 656e 6563 6973 6174 6120 206c 656d     e necesita al me
   b9d70:	6f6e 2073 6e75 6120 7463 6175 6f64 2072     nos un actuador 
   b9d80:	6170 6172 7420 7265 696d 616e 2072 6c65     para terminar el
   b9d90:	6220 6f6c 7571 0065 4e41 2f44 524f 6420      bloque.AND/OR d
   b9da0:	7465 6365 6174 6f64 5500 616e 6320 6e6f     etectado.Una con
   b9db0:	6963 6963 6e6f 7320 6c6f 206f 7570 6465     cicion solo pued
   b9dc0:	2065 7269 7320 6765 6975 6164 6420 2065     e ir seguida de 
   b9dd0:	6e75 7320 6e65 6f73 2e72 5400 4548 204e     un sensor..THEN 
   b9de0:	6564 6574 7463 6461 006f 754e 656d 6f72     detectado.Numero
   b9df0:	6420 2065 6573 736e 726f 7365 6920 666e      de sensores inf
   b9e00:	6375 6569 746e 7365 4500 534c 2045 6564     ucientes.ELSE de
   b9e10:	6574 7463 6461 006f 4449 5420 6761 6920     tectado.ID Tag i
   b9e20:	636e 726f 6572 7463 0061 6946 206e 6154     ncorrecta.Fin Ta
   b9e30:	0067 2023 6c42 716f 6575 7c20 2320 5320     g.# Bloque | # S
   b9e40:	6e65 6f73 6572 2073 207c 2023 6f43 646e     ensores | # Cond
   b9e50:	6369 6f69 656e 2073 207c 2023 6341 7574     iciones | # Actu
   b9e60:	6461 726f 7365 2000 2020 2520 2064 7c09     adores.    %d .|
   b9e70:	2009 6425 0920 097c 2520 2064 7c09 2009     . %d .|. %d .|. 
   b9e80:	6425 0920 097c 2520 0064 002d 6564 6166     %d .|. %d.-.defa
   b9e90:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   b9ea0:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   b9eb0:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   b9ec0:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000b9ed0 <_ZL4font>:
   b9ed0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9ee0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b9ef0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b9f00:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9f10:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9f20:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9f30:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9f40:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9f50:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9f60:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9f70:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b9f80:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b9f90:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b9fa0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b9fb0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b9fc0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b9fd0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9fe0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b9ff0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba000:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba010:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba020:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba030:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba040:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba050:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba060:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba070:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba080:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba090:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba0a0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba0b0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba0c0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba0d0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba0e0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba0f0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba100:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba110:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba120:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba130:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba140:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba150:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba160:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba170:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba180:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba190:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba1a0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba1b0:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba1c0:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba1d0:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba1e0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba1f0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba200:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba210:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba220:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba230:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba240:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba250:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba260:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba270:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba280:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba290:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba2a0:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba2b0:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba2c0:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba2d0:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba2e0:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba2f0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba300:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba310:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba320:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba330:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba340:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba350:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba360:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba370:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba380:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba390:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba3a0:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba3b0:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba3c0:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000ba3d0 <_ZTV12Adafruit_GFX>:
	...
   ba3e0:	608d 000b 826d 000b 40a1 000b 5a93 000b     .`..m....@...Z..
   ba3f0:	5a95 000b 5ac7 000b 5aa3 000b 5ab5 000b     .Z...Z...Z...Z..
   ba400:	59d5 000b 5a93 000b 5cbf 000b 5cbd 000b     .Y...Z...\...\..
   ba410:	5adf 000b 5b1d 000b 5b57 000b 5b9d 000b     .Z...[..W[...[..
   ba420:	5bb9 000b 5c3d 000b 6e55 6e6b 776f 206e     .[..=\..Unknown 
   ba430:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   ba440:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   ba450:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   ba460:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   ba470:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   ba480:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   ba490:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   ba4a0:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   ba4b0:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   ba4c0:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   ba4d0:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   ba4e0:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   ba4f0:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   ba500:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   ba510:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000ba520 <CSWTCH.84>:
   ba520:	a436 000b a43f 000b a457 000b a46c 000b     6...?...W...l...
   ba530:	a486 000b a4a2 000b a4d1 000b a4e3 000b     ................
   ba540:	a4fd 000b                                   ....

000ba544 <_ZTVN8particle11SPISettingsE>:
	...
   ba54c:	5981 000b 5971 000b 5973 000b               .Y..qY..sY..

000ba558 <_ZL12splash2_data>:
   ba558:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   ba568:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ba578:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ba594:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ba5a4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ba5b4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ba5c4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ba5d4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   ba5e4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   ba5f4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   ba604:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   ba614:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   ba624:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   ba634:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   ba644:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ba654:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ba664:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ba674:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ba684:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ba694:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ba6a4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ba6b4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ba6c4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ba6d4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ba6ec:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ba6fc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ba70c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ba71c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ba72c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ba738 <_ZL17sucreLogoNew_data>:
   ba738:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba758:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   ba768:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   ba778:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba788:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba798:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba7a8:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba7b8:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   ba7c8:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   ba7d8:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   ba7e8:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   ba7f8:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   ba808:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   ba818:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   ba828:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   ba838:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   ba848:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba858:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   ba868:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   ba878:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   ba888:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   ba898:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   ba8a8:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   ba8b8:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   ba8c8:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   ba8d8:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   ba8e8:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   ba8f8:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   ba908:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   ba918:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   ba928:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   ba938:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   ba948:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   ba958:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   ba968:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   ba978:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   ba988:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   ba998:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   ba9a8:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   ba9b8:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   ba9c8:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   ba9d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa38:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   baa48:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   baa58:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   baa68:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   baa78:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   baa88:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   baa98:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   baaa8:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   baab8:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   baac8:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   baad8:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   baae8:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   baaf8:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bab08:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bab18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bab38 <_ZTV16Adafruit_SSD1306>:
	...
   bab40:	6c41 000b 6c59 000b 608d 000b 826d 000b     Al..Yl...`..m...
   bab50:	6c6d 000b 5a93 000b 5a95 000b 5ac7 000b     ml...Z...Z...Z..
   bab60:	5aa3 000b 5ab5 000b 59d5 000b 5a93 000b     .Z...Z...Y...Z..
   bab70:	5cbf 000b 6dff 000b 739b 000b 734d 000b     .\...m...s..Ms..
   bab80:	5b57 000b 5b9d 000b 5bb9 000b 5c3d 000b     W[...[...[..=\..

000bab90 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bab90:	8000 e0c0 f8f0 fefc                         ........

000bab98 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bab98:	0100 0703 1f0f 7f3f                         ......?.

000baba0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baba0:	d5ae a880                                   ....

000baba4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baba4:	00d3 8d40                                   ..@.

000baba8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baba8:	0020 c8a1                                    ...

000babac <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   babac:	40db a6a4 af2e                              .@....

000babb2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   babb2:	02da 8f81                                   ....

000babb6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   babb6:	12da                                         ...

000babb9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   babb9:	02da                                         ...

000babbc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   babbc:	0022 21ff 0000 0000                         "..!....

000babc4 <_ZTVN5spark13EthernetClassE>:
	...
   babcc:	7e73 000b 7e69 000b 7e5f 000b 7e55 000b     s~..i~.._~..U~..
   babdc:	7e49 000b 7e3d 000b 8945 000b 894d 000b     I~..=~..E...M...
   babec:	7e31 000b 7e29 000b 7e1f 000b 7e15 000b     1~..)~...~...~..
   babfc:	897d 000b                                   }...

000bac00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bac00:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bac10:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bac20:	7361 7463 6d69 0065                         asctime.

000bac28 <_ZTV9IPAddress>:
	...
   bac30:	8549 000b 8539 000b 853b 000b               I...9...;...

000bac3c <_ZTV9USBSerial>:
	...
   bac44:	862f 000b 8697 000b 866d 000b 826d 000b     /.......m...m...
   bac54:	865f 000b 8631 000b 8641 000b 8691 000b     _...1...A.......
   bac64:	8651 000b 8629 000b                         Q...)...

000bac6c <_ZTV11USARTSerial>:
	...
   bac74:	8739 000b 87a5 000b 877d 000b 826d 000b     9.......}...m...
   bac84:	874d 000b 8769 000b 875b 000b 8777 000b     M...i...[...w...
   bac94:	873b 000b 873f 000b                         ;...?...

000bac9c <_ZTV7TwoWire>:
	...
   baca4:	87dd 000b 8827 000b 87ff 000b 87df 000b     ....'...........
   bacb4:	8807 000b 880f 000b 8817 000b 881f 000b     ................

000bacc4 <_ZTVN5spark9WiFiClassE>:
	...
   baccc:	88e7 000b 88dd 000b 88d3 000b 8889 000b     ................
   bacdc:	88c7 000b 88bb 000b 8945 000b 894d 000b     ........E...M...
   bacec:	88af 000b 88a7 000b 889d 000b 8893 000b     ................
   bacfc:	897d 000b                                   }...

000bad00 <_ZTVN5spark12NetworkClassE>:
	...
   bad08:	8905 000b 890f 000b 8919 000b 8923 000b     ............#...
   bad18:	892d 000b 8939 000b 8945 000b 894d 000b     -...9...E...M...
   bad28:	8955 000b 8961 000b 8969 000b 8973 000b     U...a...i...s...
   bad38:	897d 000b                                   }...

000bad3c <_ZSt7nothrow>:
   bad3c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bad4c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bad5c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bad6c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bad7c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bad8c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bad9c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   badac:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   badbc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   badcc:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   baddc:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   badec:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   badfc:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bae0c:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bae1c:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bae2c:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bae3c:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bae4c:	2e6b 0063                                   k.c.

000bae50 <link_const_variable_data_end>:
   bae50:	000b58e5 	.word	0x000b58e5
   bae54:	000b7e7d 	.word	0x000b7e7d
   bae58:	000b7ff5 	.word	0x000b7ff5
   bae5c:	000b825d 	.word	0x000b825d
   bae60:	000b8395 	.word	0x000b8395
   bae64:	000b83a5 	.word	0x000b83a5
   bae68:	000b83c1 	.word	0x000b83c1
   bae6c:	000b88f1 	.word	0x000b88f1
   bae70:	000b8a55 	.word	0x000b8a55

000bae74 <link_constructors_end>:
	...
