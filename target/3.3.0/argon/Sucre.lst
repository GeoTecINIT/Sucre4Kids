
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007e94  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbeb0  000bbeb0  0000beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bbed4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003ce7c  000bbed8  0001ce7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018bc  2003cf34  2003cf34  0002cf34  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bbf90  000bbf90  0002bf90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bbfb8  000bbfb8  0002bfb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00165f1f  00000000  00000000  0002bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019051  00000000  00000000  00191edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0005062e  00000000  00000000  001aaf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003730  00000000  00000000  001fb55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000be58  00000000  00000000  001fec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce0  00000000  00000000  0020aae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059a6b  00000000  00000000  0024f7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c3d3  00000000  00000000  002a922d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a618  00000000  00000000  003e5600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fed7 	bl	b9de0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fedf 	bl	b9dfc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003ce7c 	.word	0x2003ce7c
   b4048:	000bbed8 	.word	0x000bbed8
   b404c:	2003cf34 	.word	0x2003cf34
   b4050:	2003cf34 	.word	0x2003cf34
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 f8bf 	bl	b91e0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bbe84 	.word	0x000bbe84
   b407c:	000bbea8 	.word	0x000bbea8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f001 b9ca 	b.w	b5418 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f001 fa75 	bl	b5574 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 b85f 	b.w	b9150 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f004 bd1f 	b.w	b8ad4 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f004 bd25 	b.w	b8ae4 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f004 fc7a 	bl	b899c <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b86ed 	.word	0x000b86ed
   b40b0:	000ba040 	.word	0x000ba040

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b40c4:	4a08      	ldr	r2, [pc, #32]	; (b40e8 <_Z10borradoALLi.part.0+0x24>)
   b40c6:	2300      	movs	r3, #0
   b40c8:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b40ca:	4a08      	ldr	r2, [pc, #32]	; (b40ec <_Z10borradoALLi.part.0+0x28>)
   b40cc:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b40ce:	4a08      	ldr	r2, [pc, #32]	; (b40f0 <_Z10borradoALLi.part.0+0x2c>)
   b40d0:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b40d2:	4a08      	ldr	r2, [pc, #32]	; (b40f4 <_Z10borradoALLi.part.0+0x30>)
   b40d4:	f04f 31ff 	mov.w	r1, #4294967295
   b40d8:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b40da:	4a07      	ldr	r2, [pc, #28]	; (b40f8 <_Z10borradoALLi.part.0+0x34>)
   b40dc:	2103      	movs	r1, #3
   b40de:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b40e0:	4a06      	ldr	r2, [pc, #24]	; (b40fc <_Z10borradoALLi.part.0+0x38>)
   b40e2:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b40e4:	4770      	bx	lr
   b40e6:	bf00      	nop
   b40e8:	2003cf41 	.word	0x2003cf41
   b40ec:	2003cf50 	.word	0x2003cf50
   b40f0:	2003cf40 	.word	0x2003cf40
   b40f4:	2003cea4 	.word	0x2003cea4
   b40f8:	2003cea8 	.word	0x2003cea8
   b40fc:	2003dc68 	.word	0x2003dc68

000b4100 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4100:	b40e      	push	{r1, r2, r3}
   b4102:	b503      	push	{r0, r1, lr}
   b4104:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4106:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4108:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b410c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b410e:	f004 ffb0 	bl	b9072 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4112:	b002      	add	sp, #8
   b4114:	f85d eb04 	ldr.w	lr, [sp], #4
   b4118:	b003      	add	sp, #12
   b411a:	4770      	bx	lr

000b411c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b503      	push	{r0, r1, lr}
   b4120:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4122:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4124:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4128:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b412a:	f004 ffa2 	bl	b9072 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b412e:	b002      	add	sp, #8
   b4130:	f85d eb04 	ldr.w	lr, [sp], #4
   b4134:	b003      	add	sp, #12
   b4136:	4770      	bx	lr

000b4138 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4138:	b507      	push	{r0, r1, r2, lr}
   b413a:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b413c:	a801      	add	r0, sp, #4
   b413e:	f003 fc4f 	bl	b79e0 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4142:	a801      	add	r0, sp, #4
   b4144:	f003 fc4e 	bl	b79e4 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4148:	2809      	cmp	r0, #9
   b414a:	bf8c      	ite	hi
   b414c:	2000      	movhi	r0, #0
   b414e:	2001      	movls	r0, #1
   b4150:	b003      	add	sp, #12
   b4152:	f85d fb04 	ldr.w	pc, [sp], #4

000b4156 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4156:	b507      	push	{r0, r1, r2, lr}
   b4158:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b415a:	a801      	add	r0, sp, #4
   b415c:	f003 fc40 	bl	b79e0 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4160:	a801      	add	r0, sp, #4
   b4162:	f003 fc3f 	bl	b79e4 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4166:	280a      	cmp	r0, #10
   b4168:	bfd4      	ite	le
   b416a:	2000      	movle	r0, #0
   b416c:	2001      	movgt	r0, #1
   b416e:	b003      	add	sp, #12
   b4170:	f85d fb04 	ldr.w	pc, [sp], #4

000b4174 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4174:	2802      	cmp	r0, #2
{
   b4176:	b508      	push	{r3, lr}
    switch (puerto)
   b4178:	d00b      	beq.n	b4192 <_Z5siLuzi+0x1e>
   b417a:	2804      	cmp	r0, #4
   b417c:	d00b      	beq.n	b4196 <_Z5siLuzi+0x22>
   b417e:	b960      	cbnz	r0, b419a <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4180:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4182:	f005 fbb6 	bl	b98f2 <analogRead>
   b4186:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b418a:	bfb4      	ite	lt
   b418c:	2000      	movlt	r0, #0
   b418e:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4190:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4192:	2011      	movs	r0, #17
   b4194:	e7f5      	b.n	b4182 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4196:	200f      	movs	r0, #15
   b4198:	e7f3      	b.n	b4182 <_Z5siLuzi+0xe>
    switch (puerto)
   b419a:	2000      	movs	r0, #0
   b419c:	e7f8      	b.n	b4190 <_Z5siLuzi+0x1c>

000b419e <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b419e:	2802      	cmp	r0, #2
{
   b41a0:	b508      	push	{r3, lr}
    switch (puerto)
   b41a2:	d00b      	beq.n	b41bc <_Z5noLuzi+0x1e>
   b41a4:	2804      	cmp	r0, #4
   b41a6:	d00b      	beq.n	b41c0 <_Z5noLuzi+0x22>
   b41a8:	b960      	cbnz	r0, b41c4 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41aa:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41ac:	f005 fba1 	bl	b98f2 <analogRead>
   b41b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41b4:	bfcc      	ite	gt
   b41b6:	2000      	movgt	r0, #0
   b41b8:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41ba:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41bc:	2011      	movs	r0, #17
   b41be:	e7f5      	b.n	b41ac <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41c0:	200f      	movs	r0, #15
   b41c2:	e7f3      	b.n	b41ac <_Z5noLuzi+0xe>
    switch (puerto)
   b41c4:	2000      	movs	r0, #0
   b41c6:	e7f8      	b.n	b41ba <_Z5noLuzi+0x1c>

000b41c8 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b41c8:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b41ca:	b280      	uxth	r0, r0
   b41cc:	f005 fb91 	bl	b98f2 <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b41d0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41d4:	bfb4      	ite	lt
   b41d6:	2000      	movlt	r0, #0
   b41d8:	2001      	movge	r0, #1
   b41da:	bd08      	pop	{r3, pc}

000b41dc <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41dc:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41de:	b280      	uxth	r0, r0
   b41e0:	f005 fb87 	bl	b98f2 <analogRead>
        return true;
    return false;
}
   b41e4:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41e8:	bfcc      	ite	gt
   b41ea:	2000      	movgt	r0, #0
   b41ec:	2001      	movle	r0, #1
   b41ee:	bd08      	pop	{r3, pc}

000b41f0 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41f0:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41f2:	b280      	uxth	r0, r0
   b41f4:	2100      	movs	r1, #0
   b41f6:	9001      	str	r0, [sp, #4]
   b41f8:	f005 fb3e 	bl	b9878 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b41fc:	9801      	ldr	r0, [sp, #4]
   b41fe:	f005 fb65 	bl	b98cc <digitalRead>
        return true;
    return false;
}
   b4202:	1e43      	subs	r3, r0, #1
   b4204:	4258      	negs	r0, r3
   b4206:	4158      	adcs	r0, r3
   b4208:	b003      	add	sp, #12
   b420a:	f85d fb04 	ldr.w	pc, [sp], #4

000b420e <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b420e:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4210:	b280      	uxth	r0, r0
   b4212:	2100      	movs	r1, #0
   b4214:	9001      	str	r0, [sp, #4]
   b4216:	f005 fb2f 	bl	b9878 <pinMode>
    if (digitalRead(puerto) == LOW)
   b421a:	9801      	ldr	r0, [sp, #4]
   b421c:	f005 fb56 	bl	b98cc <digitalRead>
        return true;
    return false;
}
   b4220:	fab0 f080 	clz	r0, r0
   b4224:	0940      	lsrs	r0, r0, #5
   b4226:	b003      	add	sp, #12
   b4228:	f85d fb04 	ldr.w	pc, [sp], #4

000b422c <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b422c:	2802      	cmp	r0, #2
{
   b422e:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4230:	d024      	beq.n	b427c <_Z10siRotativoi+0x50>
   b4232:	2804      	cmp	r0, #4
   b4234:	d024      	beq.n	b4280 <_Z10siRotativoi+0x54>
   b4236:	b918      	cbnz	r0, b4240 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4238:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b423a:	f005 fb5a 	bl	b98f2 <analogRead>
   b423e:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b4240:	eddd 7a01 	vldr	s15, [sp, #4]
   b4244:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4284 <_Z10siRotativoi+0x58>
   b4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b424c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4250:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4254:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4258:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4288 <_Z10siRotativoi+0x5c>
   b425c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4264:	eddf 7a09 	vldr	s15, [pc, #36]	; b428c <_Z10siRotativoi+0x60>
   b4268:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4270:	bfac      	ite	ge
   b4272:	2001      	movge	r0, #1
   b4274:	2000      	movlt	r0, #0
   b4276:	b003      	add	sp, #12
   b4278:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b427c:	2011      	movs	r0, #17
   b427e:	e7dc      	b.n	b423a <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4280:	200f      	movs	r0, #15
   b4282:	e7da      	b.n	b423a <_Z10siRotativoi+0xe>
   b4284:	447fc000 	.word	0x447fc000
   b4288:	43960000 	.word	0x43960000
   b428c:	442a0000 	.word	0x442a0000

000b4290 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4290:	2802      	cmp	r0, #2
{
   b4292:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4294:	d024      	beq.n	b42e0 <_Z10noRotativoi+0x50>
   b4296:	2804      	cmp	r0, #4
   b4298:	d024      	beq.n	b42e4 <_Z10noRotativoi+0x54>
   b429a:	b918      	cbnz	r0, b42a4 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b429c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b429e:	f005 fb28 	bl	b98f2 <analogRead>
   b42a2:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b42a4:	eddd 7a01 	vldr	s15, [sp, #4]
   b42a8:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42e8 <_Z10noRotativoi+0x58>
   b42ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b42b8:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b42bc:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42ec <_Z10noRotativoi+0x5c>
   b42c0:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b42c8:	eddf 7a09 	vldr	s15, [pc, #36]	; b42f0 <_Z10noRotativoi+0x60>
   b42cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42d4:	bf94      	ite	ls
   b42d6:	2001      	movls	r0, #1
   b42d8:	2000      	movhi	r0, #0
   b42da:	b003      	add	sp, #12
   b42dc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42e0:	2011      	movs	r0, #17
   b42e2:	e7dc      	b.n	b429e <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42e4:	200f      	movs	r0, #15
   b42e6:	e7da      	b.n	b429e <_Z10noRotativoi+0xe>
   b42e8:	447fc000 	.word	0x447fc000
   b42ec:	43960000 	.word	0x43960000
   b42f0:	442a0000 	.word	0x442a0000

000b42f4 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b42f4:	b530      	push	{r4, r5, lr}
   b42f6:	ed2d 8b02 	vpush	{d8}
   b42fa:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b42fc:	b2c1      	uxtb	r1, r0
   b42fe:	2306      	movs	r3, #6
   b4300:	220b      	movs	r2, #11
   b4302:	a801      	add	r0, sp, #4
   b4304:	f003 fb92 	bl	b7a2c <_ZN3DHTC1Ehhh>
    dht.begin();
   b4308:	a801      	add	r0, sp, #4
   b430a:	f003 fb96 	bl	b7a3a <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b430e:	a801      	add	r0, sp, #4
   b4310:	f003 fc50 	bl	b7bb4 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4314:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b431c:	eeb4 0a40 	vcmp.f32	s0, s0
   b4320:	bf0c      	ite	eq
   b4322:	2401      	moveq	r4, #1
   b4324:	2400      	movne	r4, #0
   b4326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b432a:	bf68      	it	vs
   b432c:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4330:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4334:	2c00      	cmp	r4, #0
   b4336:	d1ea      	bne.n	b430e <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4338:	f005 f874 	bl	b9424 <_Z16_fetch_usbserialv>
   b433c:	4605      	mov	r5, r0
   b433e:	ee18 0a10 	vmov	r0, s16
   b4342:	f005 fce7 	bl	b9d14 <__aeabi_f2d>
   b4346:	4602      	mov	r2, r0
   b4348:	460b      	mov	r3, r1
   b434a:	4628      	mov	r0, r5
   b434c:	490a      	ldr	r1, [pc, #40]	; (b4378 <_Z8tempFrioi+0x84>)
   b434e:	f7ff fee5 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4352:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b435a:	dd08      	ble.n	b436e <_Z8tempFrioi+0x7a>
   b435c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4360:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4368:	bf4c      	ite	mi
   b436a:	2401      	movmi	r4, #1
   b436c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b436e:	4620      	mov	r0, r4
   b4370:	b007      	add	sp, #28
   b4372:	ecbd 8b02 	vpop	{d8}
   b4376:	bd30      	pop	{r4, r5, pc}
   b4378:	000ba055 	.word	0x000ba055

000b437c <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b437c:	b510      	push	{r4, lr}
   b437e:	ed2d 8b02 	vpush	{d8}
   b4382:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4384:	b2c1      	uxtb	r1, r0
   b4386:	2306      	movs	r3, #6
   b4388:	220b      	movs	r2, #11
   b438a:	a801      	add	r0, sp, #4
   b438c:	f003 fb4e 	bl	b7a2c <_ZN3DHTC1Ehhh>
    dht.begin();
   b4390:	a801      	add	r0, sp, #4
   b4392:	f003 fb52 	bl	b7a3a <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4396:	a801      	add	r0, sp, #4
   b4398:	f003 fc0c 	bl	b7bb4 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b439c:	eeb4 0a40 	vcmp.f32	s0, s0
   b43a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43a4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b43a8:	d6f5      	bvs.n	b4396 <_Z12tempTempladoi+0x1a>
   b43aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43b2:	d0f0      	beq.n	b4396 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b43b4:	f005 f836 	bl	b9424 <_Z16_fetch_usbserialv>
   b43b8:	4604      	mov	r4, r0
   b43ba:	ee18 0a10 	vmov	r0, s16
   b43be:	f005 fca9 	bl	b9d14 <__aeabi_f2d>
   b43c2:	4602      	mov	r2, r0
   b43c4:	460b      	mov	r3, r1
   b43c6:	4620      	mov	r0, r4
   b43c8:	490c      	ldr	r1, [pc, #48]	; (b43fc <_Z12tempTempladoi+0x80>)
   b43ca:	f7ff fea7 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b43ce:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b43d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43da:	dc04      	bgt.n	b43e6 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43dc:	2000      	movs	r0, #0
}
   b43de:	b006      	add	sp, #24
   b43e0:	ecbd 8b02 	vpop	{d8}
   b43e4:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43e6:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f2:	bf4c      	ite	mi
   b43f4:	2001      	movmi	r0, #1
   b43f6:	2000      	movpl	r0, #0
   b43f8:	e7f1      	b.n	b43de <_Z12tempTempladoi+0x62>
   b43fa:	bf00      	nop
   b43fc:	000ba055 	.word	0x000ba055

000b4400 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4400:	b530      	push	{r4, r5, lr}
   b4402:	ed2d 8b02 	vpush	{d8}
   b4406:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4408:	b2c1      	uxtb	r1, r0
   b440a:	2306      	movs	r3, #6
   b440c:	220b      	movs	r2, #11
   b440e:	a801      	add	r0, sp, #4
   b4410:	f003 fb0c 	bl	b7a2c <_ZN3DHTC1Ehhh>
    dht.begin();
   b4414:	a801      	add	r0, sp, #4
   b4416:	f003 fb10 	bl	b7a3a <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b441a:	a801      	add	r0, sp, #4
   b441c:	f003 fbca 	bl	b7bb4 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4420:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4428:	eeb4 0a40 	vcmp.f32	s0, s0
   b442c:	bf0c      	ite	eq
   b442e:	2401      	moveq	r4, #1
   b4430:	2400      	movne	r4, #0
   b4432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4436:	bf68      	it	vs
   b4438:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b443c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4440:	2c00      	cmp	r4, #0
   b4442:	d1ea      	bne.n	b441a <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4444:	f004 ffee 	bl	b9424 <_Z16_fetch_usbserialv>
   b4448:	4605      	mov	r5, r0
   b444a:	ee18 0a10 	vmov	r0, s16
   b444e:	f005 fc61 	bl	b9d14 <__aeabi_f2d>
   b4452:	4602      	mov	r2, r0
   b4454:	460b      	mov	r3, r1
   b4456:	4628      	mov	r0, r5
   b4458:	490b      	ldr	r1, [pc, #44]	; (b4488 <_Z9tempCalori+0x88>)
   b445a:	f7ff fe5f 	bl	b411c <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b445e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4462:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b446a:	dd08      	ble.n	b447e <_Z9tempCalori+0x7e>
   b446c:	eddf 7a07 	vldr	s15, [pc, #28]	; b448c <_Z9tempCalori+0x8c>
   b4470:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4478:	bf4c      	ite	mi
   b447a:	2401      	movmi	r4, #1
   b447c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b447e:	4620      	mov	r0, r4
   b4480:	b007      	add	sp, #28
   b4482:	ecbd 8b02 	vpop	{d8}
   b4486:	bd30      	pop	{r4, r5, pc}
   b4488:	000ba055 	.word	0x000ba055
   b448c:	42480000 	.word	0x42480000

000b4490 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4490:	b508      	push	{r3, lr}
   b4492:	4603      	mov	r3, r0
   b4494:	3b01      	subs	r3, #1
   b4496:	4610      	mov	r0, r2
   b4498:	2b06      	cmp	r3, #6
   b449a:	d843      	bhi.n	b4524 <_Z10leerSensoriii+0x94>
   b449c:	e8df f003 	tbb	[pc, r3]
   b44a0:	1b120904 	.word	0x1b120904
   b44a4:	2d24      	.short	0x2d24
   b44a6:	04          	.byte	0x04
   b44a7:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44a8:	bbc1      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b44aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44ae:	f7ff be43 	b.w	b4138 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b2:	b919      	cbnz	r1, b44bc <_Z10leerSensoriii+0x2c>
   b44b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44b8:	f7ff be71 	b.w	b419e <_Z5noLuzi>
   b44bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44c0:	f7ff be58 	b.w	b4174 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44c4:	b919      	cbnz	r1, b44ce <_Z10leerSensoriii+0x3e>
   b44c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44ca:	f7ff be87 	b.w	b41dc <_Z7noRuidoi>
   b44ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44d2:	f7ff be79 	b.w	b41c8 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44d6:	b919      	cbnz	r1, b44e0 <_Z10leerSensoriii+0x50>
   b44d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44dc:	f7ff be97 	b.w	b420e <_Z7noBotoni>
   b44e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44e4:	f7ff be84 	b.w	b41f0 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44e8:	b919      	cbnz	r1, b44f2 <_Z10leerSensoriii+0x62>
   b44ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44ee:	f7ff becf 	b.w	b4290 <_Z10noRotativoi>
   b44f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44f6:	f7ff be99 	b.w	b422c <_Z10siRotativoi>
        switch (condicion)
   b44fa:	2901      	cmp	r1, #1
   b44fc:	d006      	beq.n	b450c <_Z10leerSensoriii+0x7c>
   b44fe:	2902      	cmp	r1, #2
   b4500:	d008      	beq.n	b4514 <_Z10leerSensoriii+0x84>
   b4502:	b959      	cbnz	r1, b451c <_Z10leerSensoriii+0x8c>
   b4504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4508:	f7ff bef4 	b.w	b42f4 <_Z8tempFrioi>
   b450c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4510:	f7ff bf34 	b.w	b437c <_Z12tempTempladoi>
   b4514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4518:	f7ff bf72 	b.w	b4400 <_Z9tempCalori>
   b451c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4520:	f7ff be19 	b.w	b4156 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4524:	f004 ff7e 	bl	b9424 <_Z16_fetch_usbserialv>
   b4528:	4902      	ldr	r1, [pc, #8]	; (b4534 <_Z10leerSensoriii+0xa4>)
   b452a:	f004 fd7a 	bl	b9022 <_ZN5Print7printlnEPKc>
   b452e:	2000      	movs	r0, #0
   b4530:	bd08      	pop	{r3, pc}
   b4532:	bf00      	nop
   b4534:	000ba05e 	.word	0x000ba05e

000b4538 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b4538:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b453a:	2300      	movs	r3, #0
   b453c:	4804      	ldr	r0, [pc, #16]	; (b4550 <_Z9ledApagarv+0x18>)
   b453e:	9300      	str	r3, [sp, #0]
   b4540:	461a      	mov	r2, r3
   b4542:	4619      	mov	r1, r3
   b4544:	f004 f810 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4548:	b003      	add	sp, #12
   b454a:	f85d fb04 	ldr.w	pc, [sp], #4
   b454e:	bf00      	nop
   b4550:	2003d918 	.word	0x2003d918

000b4554 <_Z7ledRojov>:
void ledRojo()
{
   b4554:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4556:	2300      	movs	r3, #0
   b4558:	4804      	ldr	r0, [pc, #16]	; (b456c <_Z7ledRojov+0x18>)
   b455a:	9300      	str	r3, [sp, #0]
   b455c:	22ff      	movs	r2, #255	; 0xff
   b455e:	4619      	mov	r1, r3
   b4560:	f004 f802 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4564:	b003      	add	sp, #12
   b4566:	f85d fb04 	ldr.w	pc, [sp], #4
   b456a:	bf00      	nop
   b456c:	2003d918 	.word	0x2003d918

000b4570 <_Z8ledVerdev>:
void ledVerde()
{
   b4570:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4572:	230a      	movs	r3, #10
   b4574:	2200      	movs	r2, #0
   b4576:	9300      	str	r3, [sp, #0]
   b4578:	4803      	ldr	r0, [pc, #12]	; (b4588 <_Z8ledVerdev+0x18>)
   b457a:	23ff      	movs	r3, #255	; 0xff
   b457c:	4611      	mov	r1, r2
   b457e:	f003 fff3 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4582:	b003      	add	sp, #12
   b4584:	f85d fb04 	ldr.w	pc, [sp], #4
   b4588:	2003d918 	.word	0x2003d918

000b458c <_Z7ledAzulv>:
void ledAzul()
{
   b458c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b458e:	23ff      	movs	r3, #255	; 0xff
   b4590:	9300      	str	r3, [sp, #0]
   b4592:	2300      	movs	r3, #0
   b4594:	4803      	ldr	r0, [pc, #12]	; (b45a4 <_Z7ledAzulv+0x18>)
   b4596:	461a      	mov	r2, r3
   b4598:	4619      	mov	r1, r3
   b459a:	f003 ffe5 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b459e:	b003      	add	sp, #12
   b45a0:	f85d fb04 	ldr.w	pc, [sp], #4
   b45a4:	2003d918 	.word	0x2003d918

000b45a8 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b45a8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b45aa:	2100      	movs	r1, #0
   b45ac:	4804      	ldr	r0, [pc, #16]	; (b45c0 <_Z11ledAmarillov+0x18>)
   b45ae:	9100      	str	r1, [sp, #0]
   b45b0:	23e9      	movs	r3, #233	; 0xe9
   b45b2:	22ff      	movs	r2, #255	; 0xff
   b45b4:	f003 ffd8 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45b8:	b003      	add	sp, #12
   b45ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b45be:	bf00      	nop
   b45c0:	2003d918 	.word	0x2003d918

000b45c4 <_Z9ledMoradov>:
void ledMorado()
{
   b45c4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b45c6:	2375      	movs	r3, #117	; 0x75
   b45c8:	9300      	str	r3, [sp, #0]
   b45ca:	4804      	ldr	r0, [pc, #16]	; (b45dc <_Z9ledMoradov+0x18>)
   b45cc:	2346      	movs	r3, #70	; 0x46
   b45ce:	226c      	movs	r2, #108	; 0x6c
   b45d0:	2100      	movs	r1, #0
   b45d2:	f003 ffc9 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45d6:	b003      	add	sp, #12
   b45d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b45dc:	2003d918 	.word	0x2003d918

000b45e0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b45e0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b45e2:	2100      	movs	r1, #0
   b45e4:	4804      	ldr	r0, [pc, #16]	; (b45f8 <_Z10ledNaranjav+0x18>)
   b45e6:	9100      	str	r1, [sp, #0]
   b45e8:	2380      	movs	r3, #128	; 0x80
   b45ea:	22ff      	movs	r2, #255	; 0xff
   b45ec:	f003 ffbc 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45f0:	b003      	add	sp, #12
   b45f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b45f6:	bf00      	nop
   b45f8:	2003d918 	.word	0x2003d918

000b45fc <_Z9ledBlancov>:
void ledBlanco()
{
   b45fc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b45fe:	23ff      	movs	r3, #255	; 0xff
   b4600:	4804      	ldr	r0, [pc, #16]	; (b4614 <_Z9ledBlancov+0x18>)
   b4602:	9300      	str	r3, [sp, #0]
   b4604:	461a      	mov	r2, r3
   b4606:	2100      	movs	r1, #0
   b4608:	f003 ffae 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b460c:	b003      	add	sp, #12
   b460e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4612:	bf00      	nop
   b4614:	2003d918 	.word	0x2003d918

000b4618 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b4618:	b510      	push	{r4, lr}
   switch (counter)
   b461a:	4c11      	ldr	r4, [pc, #68]	; (b4660 <_Z11ledArcoirisv+0x48>)
   b461c:	6823      	ldr	r3, [r4, #0]
   b461e:	2b05      	cmp	r3, #5
   b4620:	d809      	bhi.n	b4636 <_Z11ledArcoirisv+0x1e>
   b4622:	e8df f003 	tbb	[pc, r3]
   b4626:	0d03      	.short	0x0d03
   b4628:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b462c:	f7ff ff92 	bl	b4554 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b4630:	6823      	ldr	r3, [r4, #0]
   b4632:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b4634:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b463a:	2096      	movs	r0, #150	; 0x96
   b463c:	f004 bd5c 	b.w	b90f8 <delay>
      ledNaranja();
   b4640:	f7ff ffce 	bl	b45e0 <_Z10ledNaranjav>
      counter++;
   b4644:	e7f4      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b4646:	f7ff ffaf 	bl	b45a8 <_Z11ledAmarillov>
      counter++;
   b464a:	e7f1      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b464c:	f7ff ff90 	bl	b4570 <_Z8ledVerdev>
      counter++;
   b4650:	e7ee      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b4652:	f7ff ffb7 	bl	b45c4 <_Z9ledMoradov>
   b4656:	e7eb      	b.n	b4630 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b4658:	f7ff ff98 	bl	b458c <_Z7ledAzulv>
      counter = 0;
   b465c:	2300      	movs	r3, #0
   b465e:	e7e9      	b.n	b4634 <_Z11ledArcoirisv+0x1c>
   b4660:	2003d570 	.word	0x2003d570

000b4664 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4664:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4666:	2101      	movs	r1, #1
   b4668:	2006      	movs	r0, #6
   b466a:	f005 f916 	bl	b989a <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b466e:	2101      	movs	r1, #1
   b4670:	2006      	movs	r0, #6
   b4672:	f005 f912 	bl	b989a <digitalWrite>
   digitalWrite(D7, HIGH);
   b4676:	2101      	movs	r1, #1
   b4678:	2007      	movs	r0, #7
   b467a:	f005 f90e 	bl	b989a <digitalWrite>
   digitalWrite(D7, 1);
}
   b467e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4682:	2101      	movs	r1, #1
   b4684:	2007      	movs	r0, #7
   b4686:	f005 b908 	b.w	b989a <digitalWrite>

000b468a <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b468a:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b468c:	2100      	movs	r1, #0
   b468e:	2006      	movs	r0, #6
   b4690:	f005 f903 	bl	b989a <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4694:	2100      	movs	r1, #0
   b4696:	2006      	movs	r0, #6
   b4698:	f005 f8ff 	bl	b989a <digitalWrite>
   digitalWrite(D7, LOW);
   b469c:	2100      	movs	r1, #0
   b469e:	2007      	movs	r0, #7
   b46a0:	f005 f8fb 	bl	b989a <digitalWrite>
   digitalWrite(D7, 0);
}
   b46a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b46a8:	2100      	movs	r1, #0
   b46aa:	2007      	movs	r0, #7
   b46ac:	f005 b8f5 	b.w	b989a <digitalWrite>

000b46b0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b46b0:	b508      	push	{r3, lr}
   pitidoON0();
   b46b2:	f7ff ffd7 	bl	b4664 <_Z9pitidoON0v>
   delay(100);
   b46b6:	2064      	movs	r0, #100	; 0x64
   b46b8:	f004 fd1e 	bl	b90f8 <delay>
   pitidoOFF0();
   b46bc:	f7ff ffe5 	bl	b468a <_Z10pitidoOFF0v>
   delay(100);
}
   b46c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b46c4:	2064      	movs	r0, #100	; 0x64
   b46c6:	f004 bd17 	b.w	b90f8 <delay>

000b46ca <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b46ca:	b108      	cbz	r0, b46d0 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b46cc:	f7ff bf5e 	b.w	b458c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b46d0:	f7ff bf86 	b.w	b45e0 <_Z10ledNaranjav>

000b46d4 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b46d4:	b108      	cbz	r0, b46da <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b46d6:	f7ff bf67 	b.w	b45a8 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b46da:	f7ff bf73 	b.w	b45c4 <_Z9ledMoradov>

000b46de <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b46de:	b108      	cbz	r0, b46e4 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b46e0:	f7ff bf46 	b.w	b4570 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b46e4:	f7ff bf36 	b.w	b4554 <_Z7ledRojov>

000b46e8 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b46e8:	b508      	push	{r3, lr}
   if (estado)
   b46ea:	b160      	cbz	r0, b4706 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b46ec:	f7ff ff86 	bl	b45fc <_Z9ledBlancov>
      delay(400);
   b46f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b46f4:	f004 fd00 	bl	b90f8 <delay>
      ledApagar();
   b46f8:	f7ff ff1e 	bl	b4538 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b46fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4700:	20c8      	movs	r0, #200	; 0xc8
   b4702:	f004 bcf9 	b.w	b90f8 <delay>
}
   b4706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b470a:	f7ff bf15 	b.w	b4538 <_Z9ledApagarv>

000b470e <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b470e:	b108      	cbz	r0, b4714 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b4710:	f7ff bf74 	b.w	b45fc <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b4714:	f7ff bf10 	b.w	b4538 <_Z9ledApagarv>

000b4718 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b4718:	b108      	cbz	r0, b471e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b471a:	f7ff bf7d 	b.w	b4618 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b471e:	f7ff bf0b 	b.w	b4538 <_Z9ledApagarv>

000b4722 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b4722:	b108      	cbz	r0, b4728 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4724:	f7ff bfc4 	b.w	b46b0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4728:	f7ff bfaf 	b.w	b468a <_Z10pitidoOFF0v>

000b472c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b472c:	b108      	cbz	r0, b4732 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b472e:	f7ff bf99 	b.w	b4664 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4732:	f7ff bfaa 	b.w	b468a <_Z10pitidoOFF0v>
	...

000b4738 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   b4738:	4603      	mov	r3, r0
   b473a:	b513      	push	{r0, r1, r4, lr}
   b473c:	460c      	mov	r4, r1
   b473e:	4610      	mov	r0, r2
   switch (id)
   b4740:	b14b      	cbz	r3, b4756 <_Z15activarActuadoriib+0x1e>
   b4742:	2b01      	cmp	r3, #1
   b4744:	d02c      	beq.n	b47a0 <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4746:	f004 fe6d 	bl	b9424 <_Z16_fetch_usbserialv>
   b474a:	491e      	ldr	r1, [pc, #120]	; (b47c4 <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b474c:	b002      	add	sp, #8
   b474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b4752:	f004 bc66 	b.w	b9022 <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4756:	2905      	cmp	r1, #5
   b4758:	d8f5      	bhi.n	b4746 <_Z15activarActuadoriib+0xe>
   b475a:	e8df f001 	tbb	[pc, r1]
   b475e:	0803      	.short	0x0803
   b4760:	1c17120d 	.word	0x1c17120d
}
   b4764:	b002      	add	sp, #8
   b4766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b476a:	f7ff bfb8 	b.w	b46de <_Z12ledVerdeRojob>
}
   b476e:	b002      	add	sp, #8
   b4770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4774:	f7ff bfae 	b.w	b46d4 <_Z17ledMoradoAmarillob>
}
   b4778:	b002      	add	sp, #8
   b477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b477e:	f7ff bfa4 	b.w	b46ca <_Z14ledAzulNaranjab>
}
   b4782:	b002      	add	sp, #8
   b4784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4788:	f7ff bfae 	b.w	b46e8 <_Z9ledBlink0b>
}
   b478c:	b002      	add	sp, #8
   b478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b4792:	f7ff bfc1 	b.w	b4718 <_Z12ledArcoiris0b>
}
   b4796:	b002      	add	sp, #8
   b4798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b479c:	f7ff bfb7 	b.w	b470e <_Z8ledOnOffb>
   b47a0:	9201      	str	r2, [sp, #4]
      ledApagar();
   b47a2:	f7ff fec9 	bl	b4538 <_Z9ledApagarv>
      switch (opcion) {
   b47a6:	9801      	ldr	r0, [sp, #4]
   b47a8:	b134      	cbz	r4, b47b8 <_Z15activarActuadoriib+0x80>
   b47aa:	2c01      	cmp	r4, #1
   b47ac:	d1cb      	bne.n	b4746 <_Z15activarActuadoriib+0xe>
}
   b47ae:	b002      	add	sp, #8
   b47b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b47b4:	f7ff bfb5 	b.w	b4722 <_Z13blinkAndSleepb>
}
   b47b8:	b002      	add	sp, #8
   b47ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b47be:	f7ff bfb5 	b.w	b472c <_Z8zumbadorb>
   b47c2:	bf00      	nop
   b47c4:	000ba071 	.word	0x000ba071

000b47c8 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b47c8:	b508      	push	{r3, lr}
    ledBlanco();
   b47ca:	f7ff ff17 	bl	b45fc <_Z9ledBlancov>
    delay(400);
   b47ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b47d2:	f004 fc91 	bl	b90f8 <delay>
    ledApagar();
   b47d6:	f7ff feaf 	bl	b4538 <_Z9ledApagarv>
    delay(200);
}
   b47da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b47de:	20c8      	movs	r0, #200	; 0xc8
   b47e0:	f004 bc8a 	b.w	b90f8 <delay>

000b47e4 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b47e4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b47e6:	b284      	uxth	r4, r0
   b47e8:	4620      	mov	r0, r4
   b47ea:	2101      	movs	r1, #1
   b47ec:	f005 f855 	bl	b989a <digitalWrite>
    digitalWrite(puerto, HIGH);
   b47f0:	4620      	mov	r0, r4
   b47f2:	2101      	movs	r1, #1
   b47f4:	f005 f851 	bl	b989a <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b47f8:	1c60      	adds	r0, r4, #1
   b47fa:	b280      	uxth	r0, r0
   b47fc:	2101      	movs	r1, #1
   b47fe:	9001      	str	r0, [sp, #4]
   b4800:	f005 f84b 	bl	b989a <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4804:	9801      	ldr	r0, [sp, #4]
   b4806:	2101      	movs	r1, #1
}
   b4808:	b002      	add	sp, #8
   b480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b480e:	f005 b844 	b.w	b989a <digitalWrite>

000b4812 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b4812:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4814:	b284      	uxth	r4, r0
   b4816:	4620      	mov	r0, r4
   b4818:	2100      	movs	r1, #0
   b481a:	f005 f83e 	bl	b989a <digitalWrite>
    digitalWrite(puerto, LOW);
   b481e:	4620      	mov	r0, r4
   b4820:	2100      	movs	r1, #0
   b4822:	f005 f83a 	bl	b989a <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4826:	1c60      	adds	r0, r4, #1
   b4828:	b280      	uxth	r0, r0
   b482a:	2100      	movs	r1, #0
   b482c:	9001      	str	r0, [sp, #4]
   b482e:	f005 f834 	bl	b989a <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4832:	9801      	ldr	r0, [sp, #4]
   b4834:	2100      	movs	r1, #0
}
   b4836:	b002      	add	sp, #8
   b4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b483c:	f005 b82d 	b.w	b989a <digitalWrite>

000b4840 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b4840:	b510      	push	{r4, lr}
   b4842:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b4844:	f7ff ffce 	bl	b47e4 <_Z9pitidoON1i>
    delay(100);
   b4848:	2064      	movs	r0, #100	; 0x64
   b484a:	f004 fc55 	bl	b90f8 <delay>
    pitidoOFF1(puerto);
   b484e:	4620      	mov	r0, r4
   b4850:	f7ff ffdf 	bl	b4812 <_Z10pitidoOFF1i>
    delay(100);
}
   b4854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4858:	2064      	movs	r0, #100	; 0x64
   b485a:	f004 bc4d 	b.w	b90f8 <delay>
	...

000b4860 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4860:	b508      	push	{r3, lr}
   b4862:	2807      	cmp	r0, #7
   b4864:	d825      	bhi.n	b48b2 <_Z10activarLEDii+0x52>
   b4866:	e8df f000 	tbb	[pc, r0]
   b486a:	0804      	.short	0x0804
   b486c:	1814100c 	.word	0x1814100c
   b4870:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b4876:	f7ff be7b 	b.w	b4570 <_Z8ledVerdev>
}
   b487a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b487e:	f7ff be69 	b.w	b4554 <_Z7ledRojov>
}
   b4882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b4886:	f7ff be8f 	b.w	b45a8 <_Z11ledAmarillov>
}
   b488a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b488e:	f7ff be99 	b.w	b45c4 <_Z9ledMoradov>
}
   b4892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b4896:	f7ff be79 	b.w	b458c <_Z7ledAzulv>
}
   b489a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b489e:	f7ff be9f 	b.w	b45e0 <_Z10ledNaranjav>
}
   b48a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b48a6:	f7ff bf8f 	b.w	b47c8 <_Z8ledBlinkv>
}
   b48aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b48ae:	f7ff beb3 	b.w	b4618 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b48b2:	f004 fdb7 	bl	b9424 <_Z16_fetch_usbserialv>
}
   b48b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b48ba:	4901      	ldr	r1, [pc, #4]	; (b48c0 <_Z10activarLEDii+0x60>)
   b48bc:	f004 bbb1 	b.w	b9022 <_ZN5Print7printlnEPKc>
   b48c0:	000ba081 	.word	0x000ba081

000b48c4 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b48c4:	b538      	push	{r3, r4, r5, lr}
   b48c6:	460c      	mov	r4, r1
   b48c8:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b48ca:	2101      	movs	r1, #1
   b48cc:	b2a0      	uxth	r0, r4
   b48ce:	f004 ffd3 	bl	b9878 <pinMode>

    switch (opcion)
   b48d2:	b145      	cbz	r5, b48e6 <_Z15activarZumbadorii+0x22>
   b48d4:	2d01      	cmp	r5, #1
   b48d6:	d00b      	beq.n	b48f0 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b48d8:	f004 fda4 	bl	b9424 <_Z16_fetch_usbserialv>
        break;
    }
}
   b48dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b48e0:	4906      	ldr	r1, [pc, #24]	; (b48fc <_Z15activarZumbadorii+0x38>)
   b48e2:	f004 bb9e 	b.w	b9022 <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b48e6:	4620      	mov	r0, r4
}
   b48e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b48ec:	f7ff bf7a 	b.w	b47e4 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b48f0:	4620      	mov	r0, r4
}
   b48f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b48f6:	f7ff bfa3 	b.w	b4840 <_Z12pitidoBlink1i>
   b48fa:	bf00      	nop
   b48fc:	000ba071 	.word	0x000ba071

000b4900 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4900:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4902:	b908      	cbnz	r0, b4908 <_Z14apagarActuadorii+0x8>
   b4904:	f7ff be18 	b.w	b4538 <_Z9ledApagarv>
   b4908:	2100      	movs	r1, #0
   b490a:	b298      	uxth	r0, r3
   b490c:	f004 bfc5 	b.w	b989a <digitalWrite>

000b4910 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4910:	4603      	mov	r3, r0
    if (id < 2)
   b4912:	2b01      	cmp	r3, #1
{
   b4914:	4608      	mov	r0, r1
   b4916:	4611      	mov	r1, r2
    if (id < 2)
   b4918:	dc04      	bgt.n	b4924 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b491a:	b90b      	cbnz	r3, b4920 <_Z15actuadorHandleriii+0x10>
   b491c:	f7ff bfa0 	b.w	b4860 <_Z10activarLEDii>
   b4920:	f7ff bfd0 	b.w	b48c4 <_Z15activarZumbadorii>
}
   b4924:	4770      	bx	lr
	...

000b4928 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b4928:	b5f0      	push	{r4, r5, r6, r7, lr}
   display.clearDisplay();
   b492a:	4f49      	ldr	r7, [pc, #292]	; (b4a50 <_Z10showBitmapii6String+0x128>)
void showBitmap(int id1, int id2, String msg) {
   b492c:	b085      	sub	sp, #20
   b492e:	4606      	mov	r6, r0
   display.clearDisplay();
   b4930:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b4932:	460c      	mov	r4, r1
   b4934:	4615      	mov	r5, r2
   display.clearDisplay();
   b4936:	f003 faab 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b493a:	2300      	movs	r3, #0
   b493c:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b493e:	4b45      	ldr	r3, [pc, #276]	; (b4a54 <_Z10showBitmapii6String+0x12c>)
   b4940:	2201      	movs	r2, #1
   b4942:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4944:	f003 feda 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b4948:	4b43      	ldr	r3, [pc, #268]	; (b4a58 <_Z10showBitmapii6String+0x130>)
   b494a:	6018      	str	r0, [r3, #0]
   switch (id1)
   b494c:	2e03      	cmp	r6, #3
   b494e:	d811      	bhi.n	b4974 <_Z10showBitmapii6String+0x4c>
   b4950:	e8df f006 	tbb	[pc, r6]
   b4954:	75582302 	.word	0x75582302
      switch (id2)
   b4958:	2c01      	cmp	r4, #1
   b495a:	d007      	beq.n	b496c <_Z10showBitmapii6String+0x44>
   b495c:	2c02      	cmp	r4, #2
   b495e:	d007      	beq.n	b4970 <_Z10showBitmapii6String+0x48>
   b4960:	b944      	cbnz	r4, b4974 <_Z10showBitmapii6String+0x4c>
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b4962:	493e      	ldr	r1, [pc, #248]	; (b4a5c <_Z10showBitmapii6String+0x134>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b4964:	483e      	ldr	r0, [pc, #248]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b4966:	f005 fa8f 	bl	b9e88 <strcpy>
         break;
   b496a:	e00c      	b.n	b4986 <_Z10showBitmapii6String+0x5e>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b496c:	493d      	ldr	r1, [pc, #244]	; (b4a64 <_Z10showBitmapii6String+0x13c>)
   b496e:	e7f9      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b4970:	493d      	ldr	r1, [pc, #244]	; (b4a68 <_Z10showBitmapii6String+0x140>)
   b4972:	e7f7      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b4974:	493d      	ldr	r1, [pc, #244]	; (b4a6c <_Z10showBitmapii6String+0x144>)
   b4976:	483a      	ldr	r0, [pc, #232]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b4978:	f005 fa86 	bl	b9e88 <strcpy>
         Serial.println("Bitmap not available.");
   b497c:	f004 fd52 	bl	b9424 <_Z16_fetch_usbserialv>
   b4980:	493a      	ldr	r1, [pc, #232]	; (b4a6c <_Z10showBitmapii6String+0x144>)
   b4982:	f004 fb4e 	bl	b9022 <_ZN5Print7printlnEPKc>
   display.print(buf);
   b4986:	4936      	ldr	r1, [pc, #216]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b4988:	4831      	ldr	r0, [pc, #196]	; (b4a50 <_Z10showBitmapii6String+0x128>)
   b498a:	f004 fb37 	bl	b8ffc <_ZN5Print5printEPKc>
   display.display();
   b498e:	4830      	ldr	r0, [pc, #192]	; (b4a50 <_Z10showBitmapii6String+0x128>)
}
   b4990:	b005      	add	sp, #20
   b4992:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   display.display();
   b4996:	f003 bce3 	b.w	b8360 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b499a:	2c06      	cmp	r4, #6
   b499c:	d8ea      	bhi.n	b4974 <_Z10showBitmapii6String+0x4c>
   b499e:	e8df f004 	tbb	[pc, r4]
   b49a2:	1504      	.short	0x1504
   b49a4:	2d27211b 	.word	0x2d27211b
   b49a8:	2f          	.byte	0x2f
   b49a9:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b49aa:	4629      	mov	r1, r5
   b49ac:	4668      	mov	r0, sp
   b49ae:	f004 fa8d 	bl	b8ecc <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A HEXAGONO");
   b49b2:	492f      	ldr	r1, [pc, #188]	; (b4a70 <_Z10showBitmapii6String+0x148>)
         snprintf(buf, sizeof(buf), msg+" CONECTAR A TRIANGULO");
   b49b4:	4668      	mov	r0, sp
   b49b6:	f004 fadc 	bl	b8f72 <_ZplRK15StringSumHelperPKc>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b49ba:	6802      	ldr	r2, [r0, #0]
   b49bc:	4828      	ldr	r0, [pc, #160]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b49be:	2140      	movs	r1, #64	; 0x40
   b49c0:	f004 f8a0 	bl	b8b04 <snprintf>
class StringSumHelper : public String
   b49c4:	4668      	mov	r0, sp
   b49c6:	f004 fa13 	bl	b8df0 <_ZN6StringD1Ev>
         break;
   b49ca:	e7dc      	b.n	b4986 <_Z10showBitmapii6String+0x5e>
	StringSumHelper(const String &s) : String(s) {}
   b49cc:	4629      	mov	r1, r5
   b49ce:	4668      	mov	r0, sp
   b49d0:	f004 fa7c 	bl	b8ecc <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A CUADRADO");
   b49d4:	4927      	ldr	r1, [pc, #156]	; (b4a74 <_Z10showBitmapii6String+0x14c>)
   b49d6:	e7ed      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49d8:	4629      	mov	r1, r5
   b49da:	4668      	mov	r0, sp
   b49dc:	f004 fa76 	bl	b8ecc <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A TRIANGULO");
   b49e0:	4925      	ldr	r1, [pc, #148]	; (b4a78 <_Z10showBitmapii6String+0x150>)
   b49e2:	e7e7      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49e4:	4629      	mov	r1, r5
   b49e6:	4668      	mov	r0, sp
   b49e8:	f004 fa70 	bl	b8ecc <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A ROMBO");
   b49ec:	4923      	ldr	r1, [pc, #140]	; (b4a7c <_Z10showBitmapii6String+0x154>)
   b49ee:	e7e1      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
   b49f0:	4629      	mov	r1, r5
   b49f2:	4668      	mov	r0, sp
   b49f4:	f004 fa6a 	bl	b8ecc <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A SEMICIRCULO");
   b49f8:	4921      	ldr	r1, [pc, #132]	; (b4a80 <_Z10showBitmapii6String+0x158>)
   b49fa:	e7db      	b.n	b49b4 <_Z10showBitmapii6String+0x8c>
         snprintf(buf, sizeof(buf), "CONECTAR A CIRCULO");
   b49fc:	4921      	ldr	r1, [pc, #132]	; (b4a84 <_Z10showBitmapii6String+0x15c>)
   b49fe:	e7b1      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b4a00:	4921      	ldr	r1, [pc, #132]	; (b4a88 <_Z10showBitmapii6String+0x160>)
   b4a02:	e7af      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
      switch (id2)
   b4a04:	2c06      	cmp	r4, #6
   b4a06:	d8b5      	bhi.n	b4974 <_Z10showBitmapii6String+0x4c>
   b4a08:	e8df f004 	tbb	[pc, r4]
   b4a0c:	0a080604 	.word	0x0a080604
   b4a10:	150c      	.short	0x150c
   b4a12:	17          	.byte	0x17
   b4a13:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b4a14:	491d      	ldr	r1, [pc, #116]	; (b4a8c <_Z10showBitmapii6String+0x164>)
   b4a16:	e7a5      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b4a18:	491d      	ldr	r1, [pc, #116]	; (b4a90 <_Z10showBitmapii6String+0x168>)
   b4a1a:	e7a3      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b4a1c:	491d      	ldr	r1, [pc, #116]	; (b4a94 <_Z10showBitmapii6String+0x16c>)
   b4a1e:	e7a1      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b4a20:	491d      	ldr	r1, [pc, #116]	; (b4a98 <_Z10showBitmapii6String+0x170>)
   b4a22:	e79f      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
	StringSumHelper(const char *p) : String(p) {}
   b4a24:	491d      	ldr	r1, [pc, #116]	; (b4a9c <_Z10showBitmapii6String+0x174>)
   b4a26:	4668      	mov	r0, sp
   b4a28:	f004 fa2d 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b4a2c:	4629      	mov	r1, r5
   b4a2e:	4668      	mov	r0, sp
   b4a30:	f004 fa93 	bl	b8f5a <_ZplRK15StringSumHelperRK6String>
   b4a34:	e7c1      	b.n	b49ba <_Z10showBitmapii6String+0x92>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b4a36:	491a      	ldr	r1, [pc, #104]	; (b4aa0 <_Z10showBitmapii6String+0x178>)
   b4a38:	e794      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b4a3a:	491a      	ldr	r1, [pc, #104]	; (b4aa4 <_Z10showBitmapii6String+0x17c>)
   b4a3c:	e792      	b.n	b4964 <_Z10showBitmapii6String+0x3c>
      switch (id2)
   b4a3e:	2c00      	cmp	r4, #0
   b4a40:	d198      	bne.n	b4974 <_Z10showBitmapii6String+0x4c>
         snprintf(buf, sizeof(buf), msg);
   b4a42:	682a      	ldr	r2, [r5, #0]
   b4a44:	4806      	ldr	r0, [pc, #24]	; (b4a60 <_Z10showBitmapii6String+0x138>)
   b4a46:	2140      	movs	r1, #64	; 0x40
   b4a48:	f004 f85c 	bl	b8b04 <snprintf>
         break;
   b4a4c:	e79b      	b.n	b4986 <_Z10showBitmapii6String+0x5e>
   b4a4e:	bf00      	nop
   b4a50:	2003d578 	.word	0x2003d578
   b4a54:	2003cf51 	.word	0x2003cf51
   b4a58:	2003dc78 	.word	0x2003dc78
   b4a5c:	000ba090 	.word	0x000ba090
   b4a60:	2003d52d 	.word	0x2003d52d
   b4a64:	000ba09c 	.word	0x000ba09c
   b4a68:	000ba0aa 	.word	0x000ba0aa
   b4a6c:	000ba0b6 	.word	0x000ba0b6
   b4a70:	000ba0cc 	.word	0x000ba0cc
   b4a74:	000ba0e1 	.word	0x000ba0e1
   b4a78:	000ba0f6 	.word	0x000ba0f6
   b4a7c:	000ba10c 	.word	0x000ba10c
   b4a80:	000ba11e 	.word	0x000ba11e
   b4a84:	000ba136 	.word	0x000ba136
   b4a88:	000ba149 	.word	0x000ba149
   b4a8c:	000ba156 	.word	0x000ba156
   b4a90:	000ba176 	.word	0x000ba176
   b4a94:	000ba196 	.word	0x000ba196
   b4a98:	000ba1b1 	.word	0x000ba1b1
   b4a9c:	000ba1c6 	.word	0x000ba1c6
   b4aa0:	000ba1d9 	.word	0x000ba1d9
   b4aa4:	000ba1f7 	.word	0x000ba1f7

000b4aa8 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b4aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b4aaa:	4b24      	ldr	r3, [pc, #144]	; (b4b3c <_Z8showPortii+0x94>)
   b4aac:	689b      	ldr	r3, [r3, #8]
   b4aae:	bb4b      	cbnz	r3, b4b04 <_Z8showPortii+0x5c>
      switch (puerto)
   b4ab0:	2902      	cmp	r1, #2
   b4ab2:	d011      	beq.n	b4ad8 <_Z8showPortii+0x30>
   b4ab4:	2904      	cmp	r1, #4
   b4ab6:	d016      	beq.n	b4ae6 <_Z8showPortii+0x3e>
   b4ab8:	b9e1      	cbnz	r1, b4af4 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b4aba:	4921      	ldr	r1, [pc, #132]	; (b4b40 <_Z8showPortii+0x98>)
   b4abc:	4668      	mov	r0, sp
   b4abe:	f004 f9e2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ac2:	466a      	mov	r2, sp
   b4ac4:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b4ac6:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4ac8:	f7ff ff2e 	bl	b4928 <_Z10showBitmapii6String>
   b4acc:	4668      	mov	r0, sp
   b4ace:	f004 f98f 	bl	b8df0 <_ZN6StringD1Ev>
}
   b4ad2:	b005      	add	sp, #20
   b4ad4:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b4ad8:	4919      	ldr	r1, [pc, #100]	; (b4b40 <_Z8showPortii+0x98>)
   b4ada:	4668      	mov	r0, sp
   b4adc:	f004 f9d3 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ae0:	466a      	mov	r2, sp
   b4ae2:	2104      	movs	r1, #4
   b4ae4:	e7ef      	b.n	b4ac6 <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b4ae6:	4916      	ldr	r1, [pc, #88]	; (b4b40 <_Z8showPortii+0x98>)
   b4ae8:	4668      	mov	r0, sp
   b4aea:	f004 f9cc 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4aee:	466a      	mov	r2, sp
   b4af0:	2105      	movs	r1, #5
   b4af2:	e7e8      	b.n	b4ac6 <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4af4:	4912      	ldr	r1, [pc, #72]	; (b4b40 <_Z8showPortii+0x98>)
   b4af6:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4af8:	f004 f9c5 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4afc:	466a      	mov	r2, sp
   b4afe:	2103      	movs	r1, #3
   b4b00:	2002      	movs	r0, #2
   b4b02:	e7e1      	b.n	b4ac8 <_Z8showPortii+0x20>
      switch (puerto)
   b4b04:	2904      	cmp	r1, #4
   b4b06:	d00a      	beq.n	b4b1e <_Z8showPortii+0x76>
   b4b08:	2906      	cmp	r1, #6
   b4b0a:	d00f      	beq.n	b4b2c <_Z8showPortii+0x84>
   b4b0c:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4b0e:	4668      	mov	r0, sp
   b4b10:	490b      	ldr	r1, [pc, #44]	; (b4b40 <_Z8showPortii+0x98>)
      switch (puerto)
   b4b12:	d1f1      	bne.n	b4af8 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b4b14:	f004 f9b7 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b18:	466a      	mov	r2, sp
   b4b1a:	2100      	movs	r1, #0
   b4b1c:	e7d3      	b.n	b4ac6 <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b4b1e:	4908      	ldr	r1, [pc, #32]	; (b4b40 <_Z8showPortii+0x98>)
   b4b20:	4668      	mov	r0, sp
   b4b22:	f004 f9b0 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b26:	466a      	mov	r2, sp
   b4b28:	2101      	movs	r1, #1
   b4b2a:	e7cc      	b.n	b4ac6 <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b4b2c:	4904      	ldr	r1, [pc, #16]	; (b4b40 <_Z8showPortii+0x98>)
   b4b2e:	4668      	mov	r0, sp
   b4b30:	f004 f9a9 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b34:	466a      	mov	r2, sp
   b4b36:	2102      	movs	r1, #2
   b4b38:	e7c5      	b.n	b4ac6 <_Z8showPortii+0x1e>
   b4b3a:	bf00      	nop
   b4b3c:	2003ceac 	.word	0x2003ceac
   b4b40:	000ba48b 	.word	0x000ba48b

000b4b44 <_Z10borradoALLi>:
   switch (modo)
   b4b44:	2801      	cmp	r0, #1
   b4b46:	d00b      	beq.n	b4b60 <_Z10borradoALLi+0x1c>
   b4b48:	2802      	cmp	r0, #2
   b4b4a:	d00b      	beq.n	b4b64 <_Z10borradoALLi+0x20>
   b4b4c:	b988      	cbnz	r0, b4b72 <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b4b4e:	4b09      	ldr	r3, [pc, #36]	; (b4b74 <_Z10borradoALLi+0x30>)
   b4b50:	6018      	str	r0, [r3, #0]
   b4b52:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b4b56:	4b08      	ldr	r3, [pc, #32]	; (b4b78 <_Z10borradoALLi+0x34>)
   b4b58:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b4b5a:	4b08      	ldr	r3, [pc, #32]	; (b4b7c <_Z10borradoALLi+0x38>)
   b4b5c:	6018      	str	r0, [r3, #0]
      break;
   b4b5e:	4770      	bx	lr
   b4b60:	f7ff bab0 	b.w	b40c4 <_Z10borradoALLi.part.0>
      posicion = 0;
   b4b64:	4a06      	ldr	r2, [pc, #24]	; (b4b80 <_Z10borradoALLi+0x3c>)
   b4b66:	2300      	movs	r3, #0
   b4b68:	6013      	str	r3, [r2, #0]
      bucle = false;
   b4b6a:	4a06      	ldr	r2, [pc, #24]	; (b4b84 <_Z10borradoALLi+0x40>)
   b4b6c:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b4b6e:	4a06      	ldr	r2, [pc, #24]	; (b4b88 <_Z10borradoALLi+0x44>)
   b4b70:	6013      	str	r3, [r2, #0]
}
   b4b72:	4770      	bx	lr
   b4b74:	2003cf54 	.word	0x2003cf54
   b4b78:	2003dc58 	.word	0x2003dc58
   b4b7c:	2003dc50 	.word	0x2003dc50
   b4b80:	2003dc60 	.word	0x2003dc60
   b4b84:	2003d52c 	.word	0x2003d52c
   b4b88:	2003dc80 	.word	0x2003dc80

000b4b8c <_Z13borradoBLOQUEi>:

// Borrado del bloque/loop actual
void borradoBLOQUE(int modo)
{
   switch (modo)
   b4b8c:	2801      	cmp	r0, #1
{
   b4b8e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b4b90:	d003      	beq.n	b4b9a <_Z13borradoBLOQUEi+0xe>
   b4b92:	2802      	cmp	r0, #2
   b4b94:	d03c      	beq.n	b4c10 <_Z13borradoBLOQUEi+0x84>
      break;

   default:
      break;
   }
}
   b4b96:	b004      	add	sp, #16
   b4b98:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b4b9a:	4b37      	ldr	r3, [pc, #220]	; (b4c78 <_Z13borradoBLOQUEi+0xec>)
   b4b9c:	681c      	ldr	r4, [r3, #0]
   b4b9e:	b974      	cbnz	r4, b4bbe <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b4ba0:	f7ff fa90 	bl	b40c4 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b4ba4:	4935      	ldr	r1, [pc, #212]	; (b4c7c <_Z13borradoBLOQUEi+0xf0>)
   b4ba6:	4668      	mov	r0, sp
   b4ba8:	f004 f96d 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4bac:	466a      	mov	r2, sp
   b4bae:	2100      	movs	r1, #0
   b4bb0:	2003      	movs	r0, #3
   b4bb2:	f7ff feb9 	bl	b4928 <_Z10showBitmapii6String>
   b4bb6:	4668      	mov	r0, sp
   b4bb8:	f004 f91a 	bl	b8df0 <_ZN6StringD1Ev>
   b4bbc:	e7eb      	b.n	b4b96 <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b4bbe:	2c01      	cmp	r4, #1
   b4bc0:	d11e      	bne.n	b4c00 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b4bc2:	2200      	movs	r2, #0
         numBloque = 0;
   b4bc4:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b4bc6:	492e      	ldr	r1, [pc, #184]	; (b4c80 <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4bc8:	4b2e      	ldr	r3, [pc, #184]	; (b4c84 <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b4bca:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4bcc:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4bce:	4a2e      	ldr	r2, [pc, #184]	; (b4c88 <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4bd0:	4b2e      	ldr	r3, [pc, #184]	; (b4c8c <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bd2:	482f      	ldr	r0, [pc, #188]	; (b4c90 <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4bd4:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4bd6:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bd8:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b4bda:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b4bdc:	bf04      	itt	eq
   b4bde:	2303      	moveq	r3, #3
   b4be0:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b4be2:	4b2c      	ldr	r3, [pc, #176]	; (b4c94 <_Z13borradoBLOQUEi+0x108>)
   b4be4:	6819      	ldr	r1, [r3, #0]
   b4be6:	3101      	adds	r1, #1
            puertoDigital=6;
   b4be8:	bf04      	itt	eq
   b4bea:	2106      	moveq	r1, #6
   b4bec:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4bee:	6811      	ldr	r1, [r2, #0]
   b4bf0:	1a09      	subs	r1, r1, r0
   b4bf2:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b4bf4:	4928      	ldr	r1, [pc, #160]	; (b4c98 <_Z13borradoBLOQUEi+0x10c>)
   b4bf6:	681a      	ldr	r2, [r3, #0]
   b4bf8:	6809      	ldr	r1, [r1, #0]
   b4bfa:	1a52      	subs	r2, r2, r1
   b4bfc:	601a      	str	r2, [r3, #0]
   b4bfe:	e7d1      	b.n	b4ba4 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b4c00:	f004 fc10 	bl	b9424 <_Z16_fetch_usbserialv>
   b4c04:	4925      	ldr	r1, [pc, #148]	; (b4c9c <_Z13borradoBLOQUEi+0x110>)
}
   b4c06:	b004      	add	sp, #16
   b4c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b4c0c:	f004 ba09 	b.w	b9022 <_ZN5Print7printlnEPKc>
      if (bucle) {
   b4c10:	4e23      	ldr	r6, [pc, #140]	; (b4ca0 <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b4c12:	4a24      	ldr	r2, [pc, #144]	; (b4ca4 <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b4c14:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b4c16:	6813      	ldr	r3, [r2, #0]
   b4c18:	4d23      	ldr	r5, [pc, #140]	; (b4ca8 <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b4c1a:	b19c      	cbz	r4, b4c44 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b4c1c:	6829      	ldr	r1, [r5, #0]
   b4c1e:	3101      	adds	r1, #1
   b4c20:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4c22:	4668      	mov	r0, sp
   b4c24:	4921      	ldr	r1, [pc, #132]	; (b4cac <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b4c26:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b4c28:	f004 f92d 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c2c:	466a      	mov	r2, sp
   b4c2e:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b4c30:	2003      	movs	r0, #3
   b4c32:	f7ff fe79 	bl	b4928 <_Z10showBitmapii6String>
   b4c36:	4668      	mov	r0, sp
   b4c38:	f004 f8da 	bl	b8df0 <_ZN6StringD1Ev>
      bucle = false;
   b4c3c:	2300      	movs	r3, #0
   b4c3e:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b4c40:	602b      	str	r3, [r5, #0]
}
   b4c42:	e7a8      	b.n	b4b96 <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b4c44:	481a      	ldr	r0, [pc, #104]	; (b4cb0 <_Z13borradoBLOQUEi+0x124>)
   b4c46:	1e59      	subs	r1, r3, #1
   b4c48:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b4c4c:	3002      	adds	r0, #2
   b4c4e:	d10c      	bne.n	b4c6a <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b4c50:	4818      	ldr	r0, [pc, #96]	; (b4cb4 <_Z13borradoBLOQUEi+0x128>)
   b4c52:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4c56:	3102      	adds	r1, #2
   b4c58:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4c5a:	4914      	ldr	r1, [pc, #80]	; (b4cac <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b4c5c:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b4c5e:	4668      	mov	r0, sp
   b4c60:	f004 f911 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c64:	466a      	mov	r2, sp
   b4c66:	4621      	mov	r1, r4
   b4c68:	e7e2      	b.n	b4c30 <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b4c6a:	f004 fbdb 	bl	b9424 <_Z16_fetch_usbserialv>
   b4c6e:	4912      	ldr	r1, [pc, #72]	; (b4cb8 <_Z13borradoBLOQUEi+0x12c>)
   b4c70:	f004 f9d7 	bl	b9022 <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b4c74:	4910      	ldr	r1, [pc, #64]	; (b4cb8 <_Z13borradoBLOQUEi+0x12c>)
   b4c76:	e7f2      	b.n	b4c5e <_Z13borradoBLOQUEi+0xd2>
   b4c78:	2003cea4 	.word	0x2003cea4
   b4c7c:	000ba217 	.word	0x000ba217
   b4c80:	2003cf41 	.word	0x2003cf41
   b4c84:	2003cf50 	.word	0x2003cf50
   b4c88:	2003dc68 	.word	0x2003dc68
   b4c8c:	2003dc50 	.word	0x2003dc50
   b4c90:	2003dc6c 	.word	0x2003dc6c
   b4c94:	2003cea8 	.word	0x2003cea8
   b4c98:	2003dc70 	.word	0x2003dc70
   b4c9c:	000ba233 	.word	0x000ba233
   b4ca0:	2003d52c 	.word	0x2003d52c
   b4ca4:	2003dc60 	.word	0x2003dc60
   b4ca8:	2003dc80 	.word	0x2003dc80
   b4cac:	000ba243 	.word	0x000ba243
   b4cb0:	2003d930 	.word	0x2003d930
   b4cb4:	2003d5e8 	.word	0x2003d5e8
   b4cb8:	000ba25d 	.word	0x000ba25d

000b4cbc <_Z10borradoPOPv>:

void borradoPOP(){
   posicion--;
   b4cbc:	4a0e      	ldr	r2, [pc, #56]	; (b4cf8 <_Z10borradoPOPv+0x3c>)
   b4cbe:	6813      	ldr	r3, [r2, #0]
   b4cc0:	3b01      	subs	r3, #1
   b4cc2:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b4cc4:	4a0d      	ldr	r2, [pc, #52]	; (b4cfc <_Z10borradoPOPv+0x40>)
   b4cc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4cca:	1c8a      	adds	r2, r1, #2
   b4ccc:	4a0c      	ldr	r2, [pc, #48]	; (b4d00 <_Z10borradoPOPv+0x44>)
   b4cce:	d107      	bne.n	b4ce0 <_Z10borradoPOPv+0x24>
      bucle = true;
   b4cd0:	2101      	movs	r1, #1
   b4cd2:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b4cd4:	4a0b      	ldr	r2, [pc, #44]	; (b4d04 <_Z10borradoPOPv+0x48>)
   b4cd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4cda:	4b0b      	ldr	r3, [pc, #44]	; (b4d08 <_Z10borradoPOPv+0x4c>)
   b4cdc:	601a      	str	r2, [r3, #0]
   b4cde:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b4ce0:	3101      	adds	r1, #1
   b4ce2:	d102      	bne.n	b4cea <_Z10borradoPOPv+0x2e>
      bucle = false;
   b4ce4:	2300      	movs	r3, #0
   b4ce6:	7013      	strb	r3, [r2, #0]
   b4ce8:	4770      	bx	lr

   } else {
      if (bucle) {
   b4cea:	7813      	ldrb	r3, [r2, #0]
   b4cec:	b11b      	cbz	r3, b4cf6 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b4cee:	4a06      	ldr	r2, [pc, #24]	; (b4d08 <_Z10borradoPOPv+0x4c>)
   b4cf0:	6813      	ldr	r3, [r2, #0]
   b4cf2:	3b01      	subs	r3, #1
   b4cf4:	6013      	str	r3, [r2, #0]
      }
   }
}
   b4cf6:	4770      	bx	lr
   b4cf8:	2003dc60 	.word	0x2003dc60
   b4cfc:	2003d930 	.word	0x2003d930
   b4d00:	2003d52c 	.word	0x2003d52c
   b4d04:	2003d5e8 	.word	0x2003d5e8
   b4d08:	2003dc80 	.word	0x2003dc80

000b4d0c <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	2807      	cmp	r0, #7
   b4d10:	d816      	bhi.n	b4d40 <_Z15decodificarNOTAi+0x34>
   b4d12:	e8df f000 	tbb	[pc, r0]
   b4d16:	0704      	.short	0x0704
   b4d18:	0f0d0b09 	.word	0x0f0d0b09
   b4d1c:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b4d1e:	4b0c      	ldr	r3, [pc, #48]	; (b4d50 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b4d20:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b4d22:	bd08      	pop	{r3, pc}
      return RE;
   b4d24:	4b0b      	ldr	r3, [pc, #44]	; (b4d54 <_Z15decodificarNOTAi+0x48>)
   b4d26:	e7fb      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return MI;
   b4d28:	4b0b      	ldr	r3, [pc, #44]	; (b4d58 <_Z15decodificarNOTAi+0x4c>)
   b4d2a:	e7f9      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return FA;
   b4d2c:	4b0b      	ldr	r3, [pc, #44]	; (b4d5c <_Z15decodificarNOTAi+0x50>)
   b4d2e:	e7f7      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b4d30:	4b0b      	ldr	r3, [pc, #44]	; (b4d60 <_Z15decodificarNOTAi+0x54>)
   b4d32:	e7f5      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return LA;
   b4d34:	4b0b      	ldr	r3, [pc, #44]	; (b4d64 <_Z15decodificarNOTAi+0x58>)
   b4d36:	e7f3      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return SI;
   b4d38:	4b0b      	ldr	r3, [pc, #44]	; (b4d68 <_Z15decodificarNOTAi+0x5c>)
   b4d3a:	e7f1      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b4d3c:	4b0b      	ldr	r3, [pc, #44]	; (b4d6c <_Z15decodificarNOTAi+0x60>)
   b4d3e:	e7ef      	b.n	b4d20 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b4d40:	f004 fb70 	bl	b9424 <_Z16_fetch_usbserialv>
   b4d44:	490a      	ldr	r1, [pc, #40]	; (b4d70 <_Z15decodificarNOTAi+0x64>)
   b4d46:	f004 f96c 	bl	b9022 <_ZN5Print7printlnEPKc>
      return -1;
   b4d4a:	f04f 30ff 	mov.w	r0, #4294967295
   b4d4e:	e7e8      	b.n	b4d22 <_Z15decodificarNOTAi+0x16>
   b4d50:	2003ce7c 	.word	0x2003ce7c
   b4d54:	2003ce90 	.word	0x2003ce90
   b4d58:	2003ce8c 	.word	0x2003ce8c
   b4d5c:	2003ce84 	.word	0x2003ce84
   b4d60:	2003ce98 	.word	0x2003ce98
   b4d64:	2003ce88 	.word	0x2003ce88
   b4d68:	2003ce94 	.word	0x2003ce94
   b4d6c:	2003ce80 	.word	0x2003ce80
   b4d70:	000ba26e 	.word	0x000ba26e

000b4d74 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b4d74:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b4d76:	b508      	push	{r3, lr}
   b4d78:	d803      	bhi.n	b4d82 <_Z15decodificarTIPOi+0xe>
   b4d7a:	4b06      	ldr	r3, [pc, #24]	; (b4d94 <_Z15decodificarTIPOi+0x20>)
   b4d7c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b4d80:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b4d82:	f004 fb4f 	bl	b9424 <_Z16_fetch_usbserialv>
   b4d86:	4904      	ldr	r1, [pc, #16]	; (b4d98 <_Z15decodificarTIPOi+0x24>)
   b4d88:	f004 f94b 	bl	b9022 <_ZN5Print7printlnEPKc>
   b4d8c:	f04f 30ff 	mov.w	r0, #4294967295
   b4d90:	e7f6      	b.n	b4d80 <_Z15decodificarTIPOi+0xc>
   b4d92:	bf00      	nop
   b4d94:	000baab8 	.word	0x000baab8
   b4d98:	000ba27d 	.word	0x000ba27d

000b4d9c <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b4d9c:	b510      	push	{r4, lr}
   b4d9e:	4604      	mov	r4, r0
   b4da0:	2907      	cmp	r1, #7
   b4da2:	d819      	bhi.n	b4dd8 <_Z19decodificarNOTA_msgi+0x3c>
   b4da4:	e8df f001 	tbb	[pc, r1]
   b4da8:	0e0c0a04 	.word	0x0e0c0a04
   b4dac:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b4db0:	490a      	ldr	r1, [pc, #40]	; (b4ddc <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "DO'";

   default:
      return "Nota inválida";
   b4db2:	4620      	mov	r0, r4
   b4db4:	f004 f867 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4db8:	4620      	mov	r0, r4
   b4dba:	bd10      	pop	{r4, pc}
      return "RE";
   b4dbc:	4908      	ldr	r1, [pc, #32]	; (b4de0 <_Z19decodificarNOTA_msgi+0x44>)
   b4dbe:	e7f8      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b4dc0:	4908      	ldr	r1, [pc, #32]	; (b4de4 <_Z19decodificarNOTA_msgi+0x48>)
   b4dc2:	e7f6      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b4dc4:	4908      	ldr	r1, [pc, #32]	; (b4de8 <_Z19decodificarNOTA_msgi+0x4c>)
   b4dc6:	e7f4      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b4dc8:	4908      	ldr	r1, [pc, #32]	; (b4dec <_Z19decodificarNOTA_msgi+0x50>)
   b4dca:	e7f2      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b4dcc:	4908      	ldr	r1, [pc, #32]	; (b4df0 <_Z19decodificarNOTA_msgi+0x54>)
   b4dce:	e7f0      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b4dd0:	4908      	ldr	r1, [pc, #32]	; (b4df4 <_Z19decodificarNOTA_msgi+0x58>)
   b4dd2:	e7ee      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "DO'";
   b4dd4:	4908      	ldr	r1, [pc, #32]	; (b4df8 <_Z19decodificarNOTA_msgi+0x5c>)
   b4dd6:	e7ec      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b4dd8:	4908      	ldr	r1, [pc, #32]	; (b4dfc <_Z19decodificarNOTA_msgi+0x60>)
   b4dda:	e7ea      	b.n	b4db2 <_Z19decodificarNOTA_msgi+0x16>
   b4ddc:	000ba0f3 	.word	0x000ba0f3
   b4de0:	000ba28c 	.word	0x000ba28c
   b4de4:	000ba28f 	.word	0x000ba28f
   b4de8:	000ba292 	.word	0x000ba292
   b4dec:	000ba295 	.word	0x000ba295
   b4df0:	000ba299 	.word	0x000ba299
   b4df4:	000ba29c 	.word	0x000ba29c
   b4df8:	000ba29f 	.word	0x000ba29f
   b4dfc:	000ba26e 	.word	0x000ba26e

000b4e00 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b4e00:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b4e02:	b510      	push	{r4, lr}
   b4e04:	4604      	mov	r4, r0
   switch (tipo)
   b4e06:	d007      	beq.n	b4e18 <_Z19decodificarTIPO_msgi+0x18>
   b4e08:	2902      	cmp	r1, #2
   b4e0a:	d007      	beq.n	b4e1c <_Z19decodificarTIPO_msgi+0x1c>
   b4e0c:	b941      	cbnz	r1, b4e20 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b4e0e:	4905      	ldr	r1, [pc, #20]	; (b4e24 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b4e10:	f004 f839 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4e14:	4620      	mov	r0, r4
   b4e16:	bd10      	pop	{r4, pc}
      return "_N";
   b4e18:	4903      	ldr	r1, [pc, #12]	; (b4e28 <_Z19decodificarTIPO_msgi+0x28>)
   b4e1a:	e7f9      	b.n	b4e10 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b4e1c:	4903      	ldr	r1, [pc, #12]	; (b4e2c <_Z19decodificarTIPO_msgi+0x2c>)
   b4e1e:	e7f7      	b.n	b4e10 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b4e20:	4903      	ldr	r1, [pc, #12]	; (b4e30 <_Z19decodificarTIPO_msgi+0x30>)
   b4e22:	e7f5      	b.n	b4e10 <_Z19decodificarTIPO_msgi+0x10>
   b4e24:	000ba2a3 	.word	0x000ba2a3
   b4e28:	000ba2a6 	.word	0x000ba2a6
   b4e2c:	000ba2a9 	.word	0x000ba2a9
   b4e30:	000ba27d 	.word	0x000ba27d

000b4e34 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b4e34:	b513      	push	{r0, r1, r4, lr}
   b4e36:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b4e38:	f7ff ff68 	bl	b4d0c <_Z15decodificarNOTAi>
   b4e3c:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4e3e:	4620      	mov	r0, r4
   b4e40:	f7ff ff98 	bl	b4d74 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b4e44:	9901      	ldr	r1, [sp, #4]
   b4e46:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b4e48:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b4e4a:	2006      	movs	r0, #6
   b4e4c:	f004 fb14 	bl	b9478 <tone>
   delay(duracion);
   b4e50:	4620      	mov	r0, r4
   b4e52:	f004 f951 	bl	b90f8 <delay>
   noTone(Zumbador_PIN);
   b4e56:	2006      	movs	r0, #6
   b4e58:	f004 fb25 	bl	b94a6 <noTone>
   delay(30);
   b4e5c:	201e      	movs	r0, #30
}
   b4e5e:	b002      	add	sp, #8
   b4e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b4e64:	f004 b948 	b.w	b90f8 <delay>

000b4e68 <_Z10reproducirv>:

void reproducir() {
   b4e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b4e6c:	4b1e      	ldr	r3, [pc, #120]	; (b4ee8 <_Z10reproducirv+0x80>)
   b4e6e:	781c      	ldrb	r4, [r3, #0]
   b4e70:	bb34      	cbnz	r4, b4ec0 <_Z10reproducirv+0x58>
      int n;
      int iteracion;
      int inicio;

      int i = 0;
      while ( i < posicion) {
   b4e72:	f8df a08c 	ldr.w	sl, [pc, #140]	; b4f00 <_Z10reproducirv+0x98>

         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e76:	4e1d      	ldr	r6, [pc, #116]	; (b4eec <_Z10reproducirv+0x84>)
   b4e78:	4f1d      	ldr	r7, [pc, #116]	; (b4ef0 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b4e7a:	f8da 3000 	ldr.w	r3, [sl]
   b4e7e:	42a3      	cmp	r3, r4
   b4e80:	dd2f      	ble.n	b4ee2 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e82:	f004 facf 	bl	b9424 <_Z16_fetch_usbserialv>
   b4e86:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b4e8a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b4e8e:	4919      	ldr	r1, [pc, #100]	; (b4ef4 <_Z10reproducirv+0x8c>)
   b4e90:	f7ff f944 	bl	b411c <_ZN5Print8printlnfEPKcz>

         if ( notas[i] == -1 ) {
   b4e94:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b4e98:	1c42      	adds	r2, r0, #1
   b4e9a:	d105      	bne.n	b4ea8 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b4e9c:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            iteracion = 0;            
            inicio=i;
   b4ea0:	46a1      	mov	r9, r4
            iteracion = 0;            
   b4ea2:	2500      	movs	r5, #0
            
         } else {
            reproducirNOTA(notas[i],duraciones[i]);
         }
         
         i++;
   b4ea4:	3401      	adds	r4, #1
      while ( i < posicion) {
   b4ea6:	e7e8      	b.n	b4e7a <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b4ea8:	1c83      	adds	r3, r0, #2
   b4eaa:	d104      	bne.n	b4eb6 <_Z10reproducirv+0x4e>
            iteracion++;
   b4eac:	3501      	adds	r5, #1
               i = inicio;
   b4eae:	45a8      	cmp	r8, r5
   b4eb0:	bfc8      	it	gt
   b4eb2:	464c      	movgt	r4, r9
   b4eb4:	e7f6      	b.n	b4ea4 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b4eb6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b4eba:	f7ff ffbb 	bl	b4e34 <_Z14reproducirNOTAii>
   b4ebe:	e7f1      	b.n	b4ea4 <_Z10reproducirv+0x3c>

      }

   } else {
      Serial.println("Finaliza el bucle antes de reproducir");
   b4ec0:	f004 fab0 	bl	b9424 <_Z16_fetch_usbserialv>
   b4ec4:	490c      	ldr	r1, [pc, #48]	; (b4ef8 <_Z10reproducirv+0x90>)
   b4ec6:	f004 f8ac 	bl	b9022 <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b4eca:	490c      	ldr	r1, [pc, #48]	; (b4efc <_Z10reproducirv+0x94>)
   b4ecc:	4668      	mov	r0, sp
   b4ece:	f003 ffda 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ed2:	2002      	movs	r0, #2
   b4ed4:	466a      	mov	r2, sp
   b4ed6:	2104      	movs	r1, #4
   b4ed8:	f7ff fd26 	bl	b4928 <_Z10showBitmapii6String>
   b4edc:	4668      	mov	r0, sp
   b4ede:	f003 ff87 	bl	b8df0 <_ZN6StringD1Ev>
   }
   
}
   b4ee2:	b004      	add	sp, #16
   b4ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4ee8:	2003d52c 	.word	0x2003d52c
   b4eec:	2003d5e8 	.word	0x2003d5e8
   b4ef0:	2003d930 	.word	0x2003d930
   b4ef4:	000ba2ac 	.word	0x000ba2ac
   b4ef8:	000ba2b4 	.word	0x000ba2b4
   b4efc:	000ba48b 	.word	0x000ba48b
   b4f00:	2003dc60 	.word	0x2003dc60

000b4f04 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4f04:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4f06:	4b0d      	ldr	r3, [pc, #52]	; (b4f3c <_Z13isValidSensori+0x38>)
   b4f08:	681a      	ldr	r2, [r3, #0]
   b4f0a:	4b0d      	ldr	r3, [pc, #52]	; (b4f40 <_Z13isValidSensori+0x3c>)
   b4f0c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4f10:	434a      	muls	r2, r1
   b4f12:	5899      	ldr	r1, [r3, r2]
   b4f14:	4413      	add	r3, r2
   b4f16:	2200      	movs	r2, #0
   b4f18:	4291      	cmp	r1, r2
   b4f1a:	dd0d      	ble.n	b4f38 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b4f1c:	685c      	ldr	r4, [r3, #4]
   b4f1e:	4284      	cmp	r4, r0
   b4f20:	f103 0310 	add.w	r3, r3, #16
   b4f24:	d106      	bne.n	b4f34 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4f26:	f004 fa7d 	bl	b9424 <_Z16_fetch_usbserialv>
   b4f2a:	4906      	ldr	r1, [pc, #24]	; (b4f44 <_Z13isValidSensori+0x40>)
   b4f2c:	f004 f879 	bl	b9022 <_ZN5Print7printlnEPKc>
   b4f30:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4f32:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4f34:	3201      	adds	r2, #1
   b4f36:	e7ef      	b.n	b4f18 <_Z13isValidSensori+0x14>
  return true;
   b4f38:	2001      	movs	r0, #1
   b4f3a:	e7fa      	b.n	b4f32 <_Z13isValidSensori+0x2e>
   b4f3c:	2003cea4 	.word	0x2003cea4
   b4f40:	2003cf54 	.word	0x2003cf54
   b4f44:	000ba2da 	.word	0x000ba2da

000b4f48 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4f4a:	4b11      	ldr	r3, [pc, #68]	; (b4f90 <_Z11isNewSensori+0x48>)
   b4f4c:	4a11      	ldr	r2, [pc, #68]	; (b4f94 <_Z11isNewSensori+0x4c>)
   b4f4e:	681e      	ldr	r6, [r3, #0]
   b4f50:	4694      	mov	ip, r2
   b4f52:	2300      	movs	r3, #0
   b4f54:	429e      	cmp	r6, r3
   b4f56:	db17      	blt.n	b4f88 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f58:	6817      	ldr	r7, [r2, #0]
   b4f5a:	4615      	mov	r5, r2
   b4f5c:	2100      	movs	r1, #0
   b4f5e:	428f      	cmp	r7, r1
   b4f60:	dd0e      	ble.n	b4f80 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4f62:	686c      	ldr	r4, [r5, #4]
   b4f64:	4284      	cmp	r4, r0
   b4f66:	f105 0510 	add.w	r5, r5, #16
   b4f6a:	d107      	bne.n	b4f7c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4f6c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f70:	4353      	muls	r3, r2
   b4f72:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4f76:	4463      	add	r3, ip
   b4f78:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f7c:	3101      	adds	r1, #1
   b4f7e:	e7ee      	b.n	b4f5e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4f80:	3301      	adds	r3, #1
   b4f82:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4f86:	e7e5      	b.n	b4f54 <_Z11isNewSensori+0xc>
  return -1;
   b4f88:	f04f 30ff 	mov.w	r0, #4294967295
   b4f8c:	e7f5      	b.n	b4f7a <_Z11isNewSensori+0x32>
   b4f8e:	bf00      	nop
   b4f90:	2003cea4 	.word	0x2003cea4
   b4f94:	2003cf54 	.word	0x2003cf54

000b4f98 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b4f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f9c:	4d19      	ldr	r5, [pc, #100]	; (b5004 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b4f9e:	4b1a      	ldr	r3, [pc, #104]	; (b5008 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fa0:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4fa4:	681f      	ldr	r7, [r3, #0]
{
   b4fa6:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fa8:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4faa:	2400      	movs	r4, #0
   b4fac:	42a7      	cmp	r7, r4
   b4fae:	db23      	blt.n	b4ff8 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b4fb0:	d110      	bne.n	b4fd4 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4fb2:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b4fb6:	461a      	mov	r2, r3
   b4fb8:	2600      	movs	r6, #0
   b4fba:	45b0      	cmp	r8, r6
   b4fbc:	dd0a      	ble.n	b4fd4 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b4fbe:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b4fc2:	4560      	cmp	r0, ip
   b4fc4:	d103      	bne.n	b4fce <_Z15isValidActuadorii+0x36>
   b4fc6:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b4fca:	4288      	cmp	r0, r1
   b4fcc:	d017      	beq.n	b4ffe <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4fce:	3601      	adds	r6, #1
   b4fd0:	3214      	adds	r2, #20
   b4fd2:	e7f2      	b.n	b4fba <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b4fd4:	2f01      	cmp	r7, #1
   b4fd6:	d10b      	bne.n	b4ff0 <_Z15isValidActuadorii+0x58>
   b4fd8:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fda:	2200      	movs	r2, #0
   b4fdc:	4596      	cmp	lr, r2
   b4fde:	dd07      	ble.n	b4ff0 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b4fe0:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b4fe4:	4288      	cmp	r0, r1
   b4fe6:	f106 0614 	add.w	r6, r6, #20
   b4fea:	d008      	beq.n	b4ffe <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fec:	3201      	adds	r2, #1
   b4fee:	e7f5      	b.n	b4fdc <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b4ff0:	3401      	adds	r4, #1
   b4ff2:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4ff6:	e7d9      	b.n	b4fac <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b4ff8:	2001      	movs	r0, #1
}
   b4ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b4ffe:	2000      	movs	r0, #0
   b5000:	e7fb      	b.n	b4ffa <_Z15isValidActuadorii+0x62>
   b5002:	bf00      	nop
   b5004:	2003cf54 	.word	0x2003cf54
   b5008:	2003cea4 	.word	0x2003cea4

000b500c <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b500c:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b500e:	4b13      	ldr	r3, [pc, #76]	; (b505c <_Z13isNewActuadori+0x50>)
   b5010:	4a13      	ldr	r2, [pc, #76]	; (b5060 <_Z13isNewActuadori+0x54>)
   b5012:	681e      	ldr	r6, [r3, #0]
   b5014:	4694      	mov	ip, r2
   b5016:	2300      	movs	r3, #0
   b5018:	429e      	cmp	r6, r3
   b501a:	db1b      	blt.n	b5054 <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b501c:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5020:	4615      	mov	r5, r2
   b5022:	2100      	movs	r1, #0
   b5024:	428f      	cmp	r7, r1
   b5026:	dd11      	ble.n	b504c <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5028:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b502c:	4284      	cmp	r4, r0
   b502e:	f105 0514 	add.w	r5, r5, #20
   b5032:	d109      	bne.n	b5048 <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b5034:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5038:	4353      	muls	r3, r2
   b503a:	2214      	movs	r2, #20
   b503c:	fb02 3301 	mla	r3, r2, r1, r3
   b5040:	4463      	add	r3, ip
   b5042:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b5046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5048:	3101      	adds	r1, #1
   b504a:	e7eb      	b.n	b5024 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b504c:	3301      	adds	r3, #1
   b504e:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5052:	e7e1      	b.n	b5018 <_Z13isNewActuadori+0xc>
  return -1;
   b5054:	f04f 30ff 	mov.w	r0, #4294967295
   b5058:	e7f5      	b.n	b5046 <_Z13isNewActuadori+0x3a>
   b505a:	bf00      	nop
   b505c:	2003cea4 	.word	0x2003cea4
   b5060:	2003cf54 	.word	0x2003cf54

000b5064 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5064:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5066:	4b0c      	ldr	r3, [pc, #48]	; (b5098 <_Z14isActuadorDualii+0x34>)
   b5068:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b506c:	fb02 3101 	mla	r1, r2, r1, r3
   b5070:	2200      	movs	r2, #0
   b5072:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5076:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5078:	4294      	cmp	r4, r2
   b507a:	dd08      	ble.n	b508e <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b507c:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5080:	4285      	cmp	r5, r0
   b5082:	d101      	bne.n	b5088 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5084:	b92b      	cbnz	r3, b5092 <_Z14isActuadorDualii+0x2e>
   b5086:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5088:	3201      	adds	r2, #1
   b508a:	3114      	adds	r1, #20
   b508c:	e7f4      	b.n	b5078 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b508e:	2000      	movs	r0, #0
}
   b5090:	bd30      	pop	{r4, r5, pc}
      return true;
   b5092:	4618      	mov	r0, r3
   b5094:	e7fc      	b.n	b5090 <_Z14isActuadorDualii+0x2c>
   b5096:	bf00      	nop
   b5098:	2003cf54 	.word	0x2003cf54

000b509c <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b509c:	b084      	sub	sp, #16
   b509e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50a0:	ac06      	add	r4, sp, #24
   b50a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b50a6:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b50aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b50ac:	f7ff f9f0 	bl	b4490 <_Z10leerSensoriii>
   b50b0:	ad06      	add	r5, sp, #24
   b50b2:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b50b4:	afbc      	add	r7, sp, #752	; 0x2f0
   b50b6:	2601      	movs	r6, #1
   b50b8:	9b06      	ldr	r3, [sp, #24]
   b50ba:	42b3      	cmp	r3, r6
   b50bc:	dd12      	ble.n	b50e4 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b50be:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b50c2:	6a2a      	ldr	r2, [r5, #32]
   b50c4:	f7ff f9e4 	bl	b4490 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b50c8:	f817 3b01 	ldrb.w	r3, [r7], #1
   b50cc:	b133      	cbz	r3, b50dc <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b50ce:	2c00      	cmp	r4, #0
   b50d0:	bf08      	it	eq
   b50d2:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b50d4:	3601      	adds	r6, #1
   b50d6:	3510      	adds	r5, #16
   b50d8:	4604      	mov	r4, r0
   b50da:	e7ed      	b.n	b50b8 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b50dc:	2c00      	cmp	r4, #0
   b50de:	bf18      	it	ne
   b50e0:	4620      	movne	r0, r4
   b50e2:	e7f7      	b.n	b50d4 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b50e4:	4620      	mov	r0, r4
   b50e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b50ea:	b004      	add	sp, #16
   b50ec:	4770      	bx	lr
	...

000b50f0 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b50f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b50f4:	4c16      	ldr	r4, [pc, #88]	; (b5150 <_Z18ejecutarEvaluacionbi+0x60>)
   b50f6:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b50fa:	fb03 4401 	mla	r4, r3, r1, r4
   b50fe:	4607      	mov	r7, r0
   b5100:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5102:	2600      	movs	r6, #0
   b5104:	46a1      	mov	r9, r4
   b5106:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b510a:	42b3      	cmp	r3, r6
   b510c:	dd1c      	ble.n	b5148 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b510e:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b5112:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b5116:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b511a:	42bb      	cmp	r3, r7
   b511c:	d107      	bne.n	b512e <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b511e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b5122:	4640      	mov	r0, r8
   b5124:	f7ff fbf4 	bl	b4910 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5128:	3601      	adds	r6, #1
   b512a:	3414      	adds	r4, #20
   b512c:	e7eb      	b.n	b5106 <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b512e:	4629      	mov	r1, r5
   b5130:	4640      	mov	r0, r8
   b5132:	9201      	str	r2, [sp, #4]
   b5134:	f7ff ff96 	bl	b5064 <_Z14isActuadorDualii>
   b5138:	9a01      	ldr	r2, [sp, #4]
   b513a:	2800      	cmp	r0, #0
   b513c:	d1f4      	bne.n	b5128 <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b513e:	4611      	mov	r1, r2
   b5140:	4640      	mov	r0, r8
   b5142:	f7ff fbdd 	bl	b4900 <_Z14apagarActuadorii>
   b5146:	e7ef      	b.n	b5128 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b5148:	b003      	add	sp, #12
   b514a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b514e:	bf00      	nop
   b5150:	2003cf54 	.word	0x2003cf54

000b5154 <_Z10cambioModoi>:


void cambioModo(int modo)
{
   b5154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b5156:	4604      	mov	r4, r0
   b5158:	b9e0      	cbnz	r0, b5194 <_Z10cambioModoi+0x40>

      Serial.println("Modo BASICO detectado");
   b515a:	f004 f963 	bl	b9424 <_Z16_fetch_usbserialv>
   b515e:	4918      	ldr	r1, [pc, #96]	; (b51c0 <_Z10cambioModoi+0x6c>)
   b5160:	f003 ff5f 	bl	b9022 <_ZN5Print7printlnEPKc>
      MODE = 0;
   b5164:	4b17      	ldr	r3, [pc, #92]	; (b51c4 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b5166:	4918      	ldr	r1, [pc, #96]	; (b51c8 <_Z10cambioModoi+0x74>)
      MODE = 0;
   b5168:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");

   } else if (modo == 2) {
      Serial.println("Modo MUSICA detectado");
      MODE = 2;
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b516a:	4668      	mov	r0, sp
   b516c:	f003 fe8b 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5170:	2003      	movs	r0, #3
   b5172:	466a      	mov	r2, sp
   b5174:	2100      	movs	r1, #0
   b5176:	f7ff fbd7 	bl	b4928 <_Z10showBitmapii6String>
   b517a:	4668      	mov	r0, sp
   b517c:	f003 fe38 	bl	b8df0 <_ZN6StringD1Ev>

   }
   EEPROM.put(0, MODE);
   b5180:	f004 fc10 	bl	b99a4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5184:	490f      	ldr	r1, [pc, #60]	; (b51c4 <_Z10cambioModoi+0x70>)
   b5186:	2201      	movs	r2, #1
   b5188:	2000      	movs	r0, #0
}
   b518a:	b004      	add	sp, #16
   b518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5190:	f003 bacc 	b.w	b872c <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b5194:	2801      	cmp	r0, #1
   b5196:	d108      	bne.n	b51aa <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b5198:	f004 f944 	bl	b9424 <_Z16_fetch_usbserialv>
   b519c:	490b      	ldr	r1, [pc, #44]	; (b51cc <_Z10cambioModoi+0x78>)
   b519e:	f003 ff40 	bl	b9022 <_ZN5Print7printlnEPKc>
      MODE = 1;
   b51a2:	4b08      	ldr	r3, [pc, #32]	; (b51c4 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b51a4:	490a      	ldr	r1, [pc, #40]	; (b51d0 <_Z10cambioModoi+0x7c>)
      MODE = 1;
   b51a6:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b51a8:	e7df      	b.n	b516a <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b51aa:	2802      	cmp	r0, #2
   b51ac:	d1e8      	bne.n	b5180 <_Z10cambioModoi+0x2c>
      Serial.println("Modo MUSICA detectado");
   b51ae:	f004 f939 	bl	b9424 <_Z16_fetch_usbserialv>
   b51b2:	4908      	ldr	r1, [pc, #32]	; (b51d4 <_Z10cambioModoi+0x80>)
   b51b4:	f003 ff35 	bl	b9022 <_ZN5Print7printlnEPKc>
      MODE = 2;
   b51b8:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b51ba:	4907      	ldr	r1, [pc, #28]	; (b51d8 <_Z10cambioModoi+0x84>)
      MODE = 2;
   b51bc:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b51be:	e7d4      	b.n	b516a <_Z10cambioModoi+0x16>
   b51c0:	000ba30a 	.word	0x000ba30a
   b51c4:	2003cf42 	.word	0x2003cf42
   b51c8:	000ba320 	.word	0x000ba320
   b51cc:	000ba339 	.word	0x000ba339
   b51d0:	000ba351 	.word	0x000ba351
   b51d4:	000ba36c 	.word	0x000ba36c
   b51d8:	000ba382 	.word	0x000ba382

000b51dc <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b51dc:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b51de:	7803      	ldrb	r3, [r0, #0]
   b51e0:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b51e2:	bf0c      	ite	eq
   b51e4:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b51e6:	2200      	movne	r2, #0
   int i = 0;
   b51e8:	4613      	mov	r3, r2
   b51ea:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b51ec:	240a      	movs	r4, #10
      i++;
   b51ee:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b51f0:	f813 1b01 	ldrb.w	r1, [r3], #1
   b51f4:	3930      	subs	r1, #48	; 0x30
   b51f6:	b2cd      	uxtb	r5, r1
   b51f8:	2d09      	cmp	r5, #9
   b51fa:	d802      	bhi.n	b5202 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b51fc:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5200:	e7f6      	b.n	b51f0 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5202:	b102      	cbz	r2, b5206 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5204:	4240      	negs	r0, r0
   return num;
}
   b5206:	bd30      	pop	{r4, r5, pc}

000b5208 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5208:	b538      	push	{r3, r4, r5, lr}
   b520a:	4614      	mov	r4, r2
   b520c:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b520e:	f004 fe4b 	bl	b9ea8 <strtok>
   int j = 0;
   b5212:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5214:	b140      	cbz	r0, b5228 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5216:	f7ff ffe1 	bl	b51dc <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b521a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b521c:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5220:	2000      	movs	r0, #0
   b5222:	f004 fe41 	bl	b9ea8 <strtok>
   while (ptr != NULL)
   b5226:	e7f5      	b.n	b5214 <_Z5splitPcS_Pi+0xc>
   }
}
   b5228:	bd38      	pop	{r3, r4, r5, pc}
	...

000b522c <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b522e:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5232:	f10d 0307 	add.w	r3, sp, #7
   b5236:	460a      	mov	r2, r1
   b5238:	4601      	mov	r1, r0
   b523a:	480d      	ldr	r0, [pc, #52]	; (b5270 <_Z17readDataFromBlockhPhh+0x44>)
   b523c:	4d0d      	ldr	r5, [pc, #52]	; (b5274 <_Z17readDataFromBlockhPhh+0x48>)
   b523e:	f002 fa2b 	bl	b7698 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5242:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5244:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b5246:	d010      	beq.n	b526a <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b5248:	f004 f8ec 	bl	b9424 <_Z16_fetch_usbserialv>
   b524c:	490a      	ldr	r1, [pc, #40]	; (b5278 <_Z17readDataFromBlockhPhh+0x4c>)
   b524e:	f003 fed5 	bl	b8ffc <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5252:	f004 f8e7 	bl	b9424 <_Z16_fetch_usbserialv>
   b5256:	7829      	ldrb	r1, [r5, #0]
   b5258:	4604      	mov	r4, r0
   b525a:	4805      	ldr	r0, [pc, #20]	; (b5270 <_Z17readDataFromBlockhPhh+0x44>)
   b525c:	f001 ff70 	bl	b7140 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5260:	4601      	mov	r1, r0
   b5262:	4620      	mov	r0, r4
   b5264:	f003 fedd 	bl	b9022 <_ZN5Print7printlnEPKc>
   b5268:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b526a:	b003      	add	sp, #12
   b526c:	bd30      	pop	{r4, r5, pc}
   b526e:	bf00      	nop
   b5270:	2003d920 	.word	0x2003d920
   b5274:	2003dc7c 	.word	0x2003dc7c
   b5278:	000ba39b 	.word	0x000ba39b

000b527c <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b527c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b527e:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5280:	4d1e      	ldr	r5, [pc, #120]	; (b52fc <_Z8getTagIDPi+0x80>)
   b5282:	4a1f      	ldr	r2, [pc, #124]	; (b5300 <_Z8getTagIDPi+0x84>)
   b5284:	9500      	str	r5, [sp, #0]
   b5286:	4b1f      	ldr	r3, [pc, #124]	; (b5304 <_Z8getTagIDPi+0x88>)
   b5288:	7812      	ldrb	r2, [r2, #0]
   b528a:	4f1f      	ldr	r7, [pc, #124]	; (b5308 <_Z8getTagIDPi+0x8c>)
{
   b528c:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b528e:	2160      	movs	r1, #96	; 0x60
   b5290:	4628      	mov	r0, r5
   b5292:	f002 fa22 	bl	b76da <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5296:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5298:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b529a:	d00f      	beq.n	b52bc <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b529c:	f004 f8c2 	bl	b9424 <_Z16_fetch_usbserialv>
   b52a0:	491a      	ldr	r1, [pc, #104]	; (b530c <_Z8getTagIDPi+0x90>)
   b52a2:	f003 feab 	bl	b8ffc <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b52a6:	f004 f8bd 	bl	b9424 <_Z16_fetch_usbserialv>
   b52aa:	7839      	ldrb	r1, [r7, #0]
   b52ac:	4604      	mov	r4, r0
   b52ae:	4628      	mov	r0, r5
   b52b0:	f001 ff46 	bl	b7140 <_ZN7MFRC52217GetStatusCodeNameEh>
   b52b4:	4601      	mov	r1, r0
   b52b6:	4620      	mov	r0, r4
   b52b8:	f003 feb3 	bl	b9022 <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b52bc:	4b14      	ldr	r3, [pc, #80]	; (b5310 <_Z8getTagIDPi+0x94>)
   b52be:	2212      	movs	r2, #18
   b52c0:	7818      	ldrb	r0, [r3, #0]
   b52c2:	a907      	add	r1, sp, #28
   b52c4:	f7ff ffb2 	bl	b522c <_Z17readDataFromBlockhPhh>
   b52c8:	b1b0      	cbz	r0, b52f8 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b52ca:	ac07      	add	r4, sp, #28
   b52cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b52ce:	ad03      	add	r5, sp, #12
   b52d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b52d2:	6823      	ldr	r3, [r4, #0]
   b52d4:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b52d6:	f004 f8a5 	bl	b9424 <_Z16_fetch_usbserialv>
   b52da:	490e      	ldr	r1, [pc, #56]	; (b5314 <_Z8getTagIDPi+0x98>)
   b52dc:	aa03      	add	r2, sp, #12
   b52de:	f7fe ff1d 	bl	b411c <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b52e2:	490d      	ldr	r1, [pc, #52]	; (b5318 <_Z8getTagIDPi+0x9c>)
   b52e4:	4632      	mov	r2, r6
   b52e6:	a803      	add	r0, sp, #12
   b52e8:	f7ff ff8e 	bl	b5208 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b52ec:	4803      	ldr	r0, [pc, #12]	; (b52fc <_Z8getTagIDPi+0x80>)
   b52ee:	f002 f9ae 	bl	b764e <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b52f2:	4802      	ldr	r0, [pc, #8]	; (b52fc <_Z8getTagIDPi+0x80>)
   b52f4:	f002 f80b 	bl	b730e <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b52f8:	b00d      	add	sp, #52	; 0x34
   b52fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b52fc:	2003d920 	.word	0x2003d920
   b5300:	2003cec4 	.word	0x2003cec4
   b5304:	2003d911 	.word	0x2003d911
   b5308:	2003dc7c 	.word	0x2003dc7c
   b530c:	000ba3b2 	.word	0x000ba3b2
   b5310:	2003ce9c 	.word	0x2003ce9c
   b5314:	000ba3ce 	.word	0x000ba3ce
   b5318:	2003ce9d 	.word	0x2003ce9d

000b531c <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b531c:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b531e:	b940      	cbnz	r0, b5332 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b5320:	4b32      	ldr	r3, [pc, #200]	; (b53ec <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b5322:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b5324:	2c05      	cmp	r4, #5
   b5326:	d858      	bhi.n	b53da <_Z13asignarPuertoi+0xbe>
   b5328:	e8df f004 	tbb	[pc, r4]
   b532c:	32221305 	.word	0x32221305
   b5330:	483d      	.short	0x483d
      option = puertoDigital;
   b5332:	4b2f      	ldr	r3, [pc, #188]	; (b53f0 <_Z13asignarPuertoi+0xd4>)
   b5334:	e7f5      	b.n	b5322 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b5336:	f004 f875 	bl	b9424 <_Z16_fetch_usbserialv>
   b533a:	492e      	ldr	r1, [pc, #184]	; (b53f4 <_Z13asignarPuertoi+0xd8>)
   b533c:	f003 fe5e 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5340:	4a2a      	ldr	r2, [pc, #168]	; (b53ec <_Z13asignarPuertoi+0xd0>)
   b5342:	6813      	ldr	r3, [r2, #0]
   b5344:	3301      	adds	r3, #1
   b5346:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5348:	4a2b      	ldr	r2, [pc, #172]	; (b53f8 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b534a:	6813      	ldr	r3, [r2, #0]
   b534c:	3301      	adds	r3, #1
   b534e:	6013      	str	r3, [r2, #0]
      return 4;
   b5350:	e01c      	b.n	b538c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5352:	f004 f867 	bl	b9424 <_Z16_fetch_usbserialv>
   b5356:	4929      	ldr	r1, [pc, #164]	; (b53fc <_Z13asignarPuertoi+0xe0>)
   b5358:	f003 fe50 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b535c:	4a23      	ldr	r2, [pc, #140]	; (b53ec <_Z13asignarPuertoi+0xd0>)
   b535e:	6813      	ldr	r3, [r2, #0]
   b5360:	3301      	adds	r3, #1
   b5362:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5364:	4a24      	ldr	r2, [pc, #144]	; (b53f8 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b5366:	6813      	ldr	r3, [r2, #0]
   b5368:	3301      	adds	r3, #1
   b536a:	6013      	str	r3, [r2, #0]
      return 2;
   b536c:	2402      	movs	r4, #2
   b536e:	e00d      	b.n	b538c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5370:	f004 f858 	bl	b9424 <_Z16_fetch_usbserialv>
   b5374:	4922      	ldr	r1, [pc, #136]	; (b5400 <_Z13asignarPuertoi+0xe4>)
   b5376:	f003 fe41 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b537a:	4b1c      	ldr	r3, [pc, #112]	; (b53ec <_Z13asignarPuertoi+0xd0>)
   b537c:	f04f 32ff 	mov.w	r2, #4294967295
   b5380:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5382:	4a1d      	ldr	r2, [pc, #116]	; (b53f8 <_Z13asignarPuertoi+0xdc>)
   b5384:	6813      	ldr	r3, [r2, #0]
   b5386:	3301      	adds	r3, #1
   b5388:	6013      	str	r3, [r2, #0]
      return 4;
   b538a:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
   b538c:	4620      	mov	r0, r4
   b538e:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5390:	f004 f848 	bl	b9424 <_Z16_fetch_usbserialv>
   b5394:	491b      	ldr	r1, [pc, #108]	; (b5404 <_Z13asignarPuertoi+0xe8>)
   b5396:	f003 fe31 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoDigital++;
   b539a:	4a15      	ldr	r2, [pc, #84]	; (b53f0 <_Z13asignarPuertoi+0xd4>)
   b539c:	6813      	ldr	r3, [r2, #0]
   b539e:	3301      	adds	r3, #1
   b53a0:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b53a2:	4a19      	ldr	r2, [pc, #100]	; (b5408 <_Z13asignarPuertoi+0xec>)
   b53a4:	e7df      	b.n	b5366 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b53a6:	f004 f83d 	bl	b9424 <_Z16_fetch_usbserialv>
   b53aa:	4918      	ldr	r1, [pc, #96]	; (b540c <_Z13asignarPuertoi+0xf0>)
   b53ac:	f003 fe26 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoDigital++;
   b53b0:	4a0f      	ldr	r2, [pc, #60]	; (b53f0 <_Z13asignarPuertoi+0xd4>)
   b53b2:	6813      	ldr	r3, [r2, #0]
   b53b4:	3301      	adds	r3, #1
   b53b6:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b53b8:	4a13      	ldr	r2, [pc, #76]	; (b5408 <_Z13asignarPuertoi+0xec>)
   b53ba:	e7c6      	b.n	b534a <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b53bc:	f004 f832 	bl	b9424 <_Z16_fetch_usbserialv>
   b53c0:	4913      	ldr	r1, [pc, #76]	; (b5410 <_Z13asignarPuertoi+0xf4>)
   b53c2:	f003 fe1b 	bl	b8ffc <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b53c6:	4b0a      	ldr	r3, [pc, #40]	; (b53f0 <_Z13asignarPuertoi+0xd4>)
   b53c8:	f04f 32ff 	mov.w	r2, #4294967295
   b53cc:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b53ce:	4a0e      	ldr	r2, [pc, #56]	; (b5408 <_Z13asignarPuertoi+0xec>)
   b53d0:	6813      	ldr	r3, [r2, #0]
   b53d2:	3301      	adds	r3, #1
   b53d4:	6013      	str	r3, [r2, #0]
      return 6;
   b53d6:	2406      	movs	r4, #6
   b53d8:	e7d8      	b.n	b538c <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b53da:	f004 f823 	bl	b9424 <_Z16_fetch_usbserialv>
   b53de:	490d      	ldr	r1, [pc, #52]	; (b5414 <_Z13asignarPuertoi+0xf8>)
   b53e0:	f003 fe0c 	bl	b8ffc <_ZN5Print5printEPKc>
      return -1;
   b53e4:	f04f 34ff 	mov.w	r4, #4294967295
   b53e8:	e7d0      	b.n	b538c <_Z13asignarPuertoi+0x70>
   b53ea:	bf00      	nop
   b53ec:	2003dc68 	.word	0x2003dc68
   b53f0:	2003cea8 	.word	0x2003cea8
   b53f4:	000ba3da 	.word	0x000ba3da
   b53f8:	2003dc6c 	.word	0x2003dc6c
   b53fc:	000ba3f1 	.word	0x000ba3f1
   b5400:	000ba408 	.word	0x000ba408
   b5404:	000ba41f 	.word	0x000ba41f
   b5408:	2003dc70 	.word	0x2003dc70
   b540c:	000ba436 	.word	0x000ba436
   b5410:	000ba44d 	.word	0x000ba44d
   b5414:	000ba464 	.word	0x000ba464

000b5418 <setup>:

// Unconnected mode ON, evita conexion wifi.
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b5418:	b570      	push	{r4, r5, r6, lr}
   b541a:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b541c:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b541e:	a807      	add	r0, sp, #28
   b5420:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b5424:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b5428:	f003 ff0c 	bl	b9244 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b542c:	4843      	ldr	r0, [pc, #268]	; (b553c <setup+0x124>)
   b542e:	4623      	mov	r3, r4
   b5430:	4622      	mov	r2, r4
   b5432:	4621      	mov	r1, r4
   b5434:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5436:	4c42      	ldr	r4, [pc, #264]	; (b5540 <setup+0x128>)
   b5438:	f003 fb04 	bl	b8a44 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b543c:	f003 fff2 	bl	b9424 <_Z16_fetch_usbserialv>
   b5440:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5444:	f003 ffe2 	bl	b940c <_ZN9USBSerial5beginEl>
   b5448:	7821      	ldrb	r1, [r4, #0]
   b544a:	f3bf 8f5b 	dmb	ish
   b544e:	f011 0101 	ands.w	r1, r1, #1
   b5452:	d10b      	bne.n	b546c <setup+0x54>
   b5454:	4620      	mov	r0, r4
   b5456:	9105      	str	r1, [sp, #20]
   b5458:	f7fe fe2c 	bl	b40b4 <__cxa_guard_acquire>
   b545c:	9905      	ldr	r1, [sp, #20]
   b545e:	b128      	cbz	r0, b546c <setup+0x54>
   b5460:	4838      	ldr	r0, [pc, #224]	; (b5544 <setup+0x12c>)
   b5462:	f003 fbbb 	bl	b8bdc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5466:	4620      	mov	r0, r4
   b5468:	f7fe fe29 	bl	b40be <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b546c:	4835      	ldr	r0, [pc, #212]	; (b5544 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b546e:	4c36      	ldr	r4, [pc, #216]	; (b5548 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5470:	2501      	movs	r5, #1
   b5472:	f003 fbbd 	bl	b8bf0 <_ZN8SPIClass5beginEv>
   b5476:	462b      	mov	r3, r5
   b5478:	223c      	movs	r2, #60	; 0x3c
   b547a:	2102      	movs	r1, #2
   b547c:	4833      	ldr	r0, [pc, #204]	; (b554c <setup+0x134>)
   b547e:	9500      	str	r5, [sp, #0]
   b5480:	f002 fd14 	bl	b7eac <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5484:	4831      	ldr	r0, [pc, #196]	; (b554c <setup+0x134>)
   b5486:	f002 fd03 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b548a:	4830      	ldr	r0, [pc, #192]	; (b554c <setup+0x134>)
   b548c:	f002 ff68 	bl	b8360 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5490:	482f      	ldr	r0, [pc, #188]	; (b5550 <setup+0x138>)
   b5492:	f001 ffa0 	bl	b73d6 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b5496:	4a2f      	ldr	r2, [pc, #188]	; (b5554 <setup+0x13c>)
   b5498:	21ff      	movs	r1, #255	; 0xff
   b549a:	7011      	strb	r1, [r2, #0]
   b549c:	7051      	strb	r1, [r2, #1]
   b549e:	7091      	strb	r1, [r2, #2]
   b54a0:	70d1      	strb	r1, [r2, #3]
   b54a2:	7111      	strb	r1, [r2, #4]
   b54a4:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b54a6:	f004 fa7d 	bl	b99a4 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b54aa:	2000      	movs	r0, #0
   b54ac:	f003 f936 	bl	b871c <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b54b0:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b54b2:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b54b4:	d10d      	bne.n	b54d2 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b54b6:	f003 ffb5 	bl	b9424 <_Z16_fetch_usbserialv>
    MODE = 0;
   b54ba:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b54bc:	4926      	ldr	r1, [pc, #152]	; (b5558 <setup+0x140>)
   b54be:	f003 fdb0 	bl	b9022 <_ZN5Print7printlnEPKc>
    MODE = 0;
   b54c2:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b54c4:	f004 fa6e 	bl	b99a4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b54c8:	462a      	mov	r2, r5
   b54ca:	4621      	mov	r1, r4
   b54cc:	4630      	mov	r0, r6
   b54ce:	f003 f92d 	bl	b872c <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b54d2:	7824      	ldrb	r4, [r4, #0]
   b54d4:	bb54      	cbnz	r4, b552c <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b54d6:	2101      	movs	r1, #1
   b54d8:	2006      	movs	r0, #6
   b54da:	f004 f9cd 	bl	b9878 <pinMode>
    ledObject.init();
   b54de:	481f      	ldr	r0, [pc, #124]	; (b555c <setup+0x144>)
   b54e0:	f003 f88a 	bl	b85f8 <_ZN12ChainableLED4initEv>
    init = true;
   b54e4:	4b1e      	ldr	r3, [pc, #120]	; (b5560 <setup+0x148>)
   b54e6:	2201      	movs	r2, #1
   b54e8:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b54ea:	4a1e      	ldr	r2, [pc, #120]	; (b5564 <setup+0x14c>)
   b54ec:	6813      	ldr	r3, [r2, #0]
   b54ee:	3301      	adds	r3, #1
   b54f0:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b54f2:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b54f6:	4a1c      	ldr	r2, [pc, #112]	; (b5568 <setup+0x150>)
   b54f8:	434b      	muls	r3, r1
   b54fa:	18d1      	adds	r1, r2, r3
   b54fc:	50d4      	str	r4, [r2, r3]
   b54fe:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b5502:	2340      	movs	r3, #64	; 0x40
   b5504:	2201      	movs	r2, #1
   b5506:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b550a:	2200      	movs	r2, #0
   b550c:	2380      	movs	r3, #128	; 0x80
   b550e:	4611      	mov	r1, r2
   b5510:	9300      	str	r3, [sp, #0]
   b5512:	480e      	ldr	r0, [pc, #56]	; (b554c <setup+0x134>)
   b5514:	4b15      	ldr	r3, [pc, #84]	; (b556c <setup+0x154>)
   b5516:	f001 fbb3 	bl	b6c80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b551a:	480c      	ldr	r0, [pc, #48]	; (b554c <setup+0x134>)
   b551c:	f002 ff20 	bl	b8360 <_ZN16Adafruit_SSD13067displayEv>
   b5520:	f003 f8ec 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b5524:	4b12      	ldr	r3, [pc, #72]	; (b5570 <setup+0x158>)
   b5526:	6018      	str	r0, [r3, #0]
  
}
   b5528:	b00a      	add	sp, #40	; 0x28
   b552a:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b552c:	2c01      	cmp	r4, #1
   b552e:	d0e8      	beq.n	b5502 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b5530:	2101      	movs	r1, #1
   b5532:	2006      	movs	r0, #6
   b5534:	f004 f9a0 	bl	b9878 <pinMode>
   b5538:	e7e3      	b.n	b5502 <setup+0xea>
   b553a:	bf00      	nop
   b553c:	2003e710 	.word	0x2003e710
   b5540:	2003cf34 	.word	0x2003cf34
   b5544:	2003cf38 	.word	0x2003cf38
   b5548:	2003cf42 	.word	0x2003cf42
   b554c:	2003d578 	.word	0x2003d578
   b5550:	2003d920 	.word	0x2003d920
   b5554:	2003d911 	.word	0x2003d911
   b5558:	000ba48c 	.word	0x000ba48c
   b555c:	2003d918 	.word	0x2003d918
   b5560:	2003d910 	.word	0x2003d910
   b5564:	2003cea4 	.word	0x2003cea4
   b5568:	2003cf54 	.word	0x2003cf54
   b556c:	000baabe 	.word	0x000baabe
   b5570:	2003dc78 	.word	0x2003dc78

000b5574 <loop>:
// Declaramos función reset en dirección 0.
void(* resetFunc) (void) = 0;


void loop()
{
   b5574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  if (iniciando) {
   b5578:	4f8d      	ldr	r7, [pc, #564]	; (b57b0 <loop+0x23c>)
   b557a:	783b      	ldrb	r3, [r7, #0]
{
   b557c:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
  if (iniciando) {
   b5580:	b39b      	cbz	r3, b55ea <loop+0x76>
   b5582:	f003 f8bb 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b5586:	4e8b      	ldr	r6, [pc, #556]	; (b57b4 <loop+0x240>)
    while(currentTime-startTime<limit){
   b5588:	f8df 8250 	ldr.w	r8, [pc, #592]	; b57dc <loop+0x268>
   b558c:	f8df 9250 	ldr.w	r9, [pc, #592]	; b57e0 <loop+0x26c>
    currentTime = millis();
   b5590:	6030      	str	r0, [r6, #0]
    while(currentTime-startTime<limit){
   b5592:	f8d8 2000 	ldr.w	r2, [r8]
   b5596:	6833      	ldr	r3, [r6, #0]
   b5598:	1a9b      	subs	r3, r3, r2
   b559a:	f8d9 2000 	ldr.w	r2, [r9]
   b559e:	4293      	cmp	r3, r2
   b55a0:	d203      	bcs.n	b55aa <loop+0x36>
   b55a2:	f003 f8ab 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b55a6:	6030      	str	r0, [r6, #0]
    while(currentTime-startTime<limit){
   b55a8:	e7f3      	b.n	b5592 <loop+0x1e>
    }

    display.clearDisplay();
   b55aa:	4d83      	ldr	r5, [pc, #524]	; (b57b8 <loop+0x244>)
   b55ac:	4628      	mov	r0, r5
   b55ae:	f002 fc6f 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b55b2:	4628      	mov	r0, r5
   b55b4:	2101      	movs	r1, #1
   b55b6:	f001 fda6 	bl	b7106 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b55ba:	2400      	movs	r4, #0
   b55bc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b55c0:	e9c5 4304 	strd	r4, r3, [r5, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    if( MODE == 0 )
   b55c4:	4b7d      	ldr	r3, [pc, #500]	; (b57bc <loop+0x248>)
    {
      showBitmap(0,0,"");
   b55c6:	497e      	ldr	r1, [pc, #504]	; (b57c0 <loop+0x24c>)
    if( MODE == 0 )
   b55c8:	781d      	ldrb	r5, [r3, #0]
      showBitmap(0,0,"");
   b55ca:	a8c6      	add	r0, sp, #792	; 0x318
    if( MODE == 0 )
   b55cc:	2d00      	cmp	r5, #0
   b55ce:	f040 8095 	bne.w	b56fc <loop+0x188>
      showBitmap(0,0,"");
   b55d2:	f003 fc58 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b55d6:	aac6      	add	r2, sp, #792	; 0x318
   b55d8:	4629      	mov	r1, r5
   b55da:	4628      	mov	r0, r5
      showBitmap(0,2,"");
      bitmap=false;
      while(currentTime-startTime<limit){
        currentTime = millis();
      }
      showBitmap(1,2,"Zumbador:");
   b55dc:	f7ff f9a4 	bl	b4928 <_Z10showBitmapii6String>
   b55e0:	a8c6      	add	r0, sp, #792	; 0x318
   b55e2:	f003 fc05 	bl	b8df0 <_ZN6StringD1Ev>
      
    }
    iniciando = false;
   b55e6:	2300      	movs	r3, #0
   b55e8:	703b      	strb	r3, [r7, #0]
  }
  
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b55ea:	4876      	ldr	r0, [pc, #472]	; (b57c4 <loop+0x250>)
   b55ec:	4c73      	ldr	r4, [pc, #460]	; (b57bc <loop+0x248>)
   b55ee:	4e76      	ldr	r6, [pc, #472]	; (b57c8 <loop+0x254>)
   b55f0:	f002 f81c 	bl	b762c <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b55f4:	b190      	cbz	r0, b561c <loop+0xa8>
  {
    Serial.print("Tag Detectada --> ");
   b55f6:	f003 ff15 	bl	b9424 <_Z16_fetch_usbserialv>
   b55fa:	4974      	ldr	r1, [pc, #464]	; (b57cc <loop+0x258>)
   b55fc:	f003 fcfe 	bl	b8ffc <_ZN5Print5printEPKc>
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b5600:	4870      	ldr	r0, [pc, #448]	; (b57c4 <loop+0x250>)
   b5602:	f002 f9e4 	bl	b79ce <_ZN7MFRC52219PICC_ReadCardSerialEv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b5606:	4872      	ldr	r0, [pc, #456]	; (b57d0 <loop+0x25c>)
   b5608:	f7ff fe38 	bl	b527c <_Z8getTagIDPi>

    play = false;
   b560c:	2300      	movs	r3, #0
   b560e:	7033      	strb	r3, [r6, #0]
    if ( MODE == 0 ) {
   b5610:	7823      	ldrb	r3, [r4, #0]
   b5612:	2b00      	cmp	r3, #0
   b5614:	f040 809a 	bne.w	b574c <loop+0x1d8>
      pitidoOFF0();
   b5618:	f7ff f837 	bl	b468a <_Z10pitidoOFF0v>
      pitidoOFF1(6);
    }
  
  }

  if (!play && init) {
   b561c:	7833      	ldrb	r3, [r6, #0]
   b561e:	b923      	cbnz	r3, b562a <loop+0xb6>
   b5620:	4b6c      	ldr	r3, [pc, #432]	; (b57d4 <loop+0x260>)
   b5622:	781b      	ldrb	r3, [r3, #0]
   b5624:	b10b      	cbz	r3, b562a <loop+0xb6>
    ledApagar();
   b5626:	f7fe ff87 	bl	b4538 <_Z9ledApagarv>
  }

  if (bitmap) {
   b562a:	4d6b      	ldr	r5, [pc, #428]	; (b57d8 <loop+0x264>)
   b562c:	782b      	ldrb	r3, [r5, #0]
   b562e:	b193      	cbz	r3, b5656 <loop+0xe2>
   b5630:	f003 f864 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b5634:	4b5f      	ldr	r3, [pc, #380]	; (b57b4 <loop+0x240>)
   b5636:	6018      	str	r0, [r3, #0]
    // Si han pasado 4 segundos quitamos el bitmap/mensaje
    if ( currentTime-startTime >= limit ) {
   b5638:	4b68      	ldr	r3, [pc, #416]	; (b57dc <loop+0x268>)
   b563a:	681b      	ldr	r3, [r3, #0]
   b563c:	1ac0      	subs	r0, r0, r3
   b563e:	4b68      	ldr	r3, [pc, #416]	; (b57e0 <loop+0x26c>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	4298      	cmp	r0, r3
   b5644:	d307      	bcc.n	b5656 <loop+0xe2>
      bitmap=false;
      display.clearDisplay();
   b5646:	485c      	ldr	r0, [pc, #368]	; (b57b8 <loop+0x244>)
      bitmap=false;
   b5648:	2300      	movs	r3, #0
   b564a:	702b      	strb	r3, [r5, #0]
      display.clearDisplay();
   b564c:	f002 fc20 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b5650:	4859      	ldr	r0, [pc, #356]	; (b57b8 <loop+0x244>)
   b5652:	f002 fe85 	bl	b8360 <_ZN16Adafruit_SSD13067displayEv>
    }
  }

  // ------------------------------ Modo BASICO --------------------------------------
  if ( MODE == 0 ) 
   b5656:	7827      	ldrb	r7, [r4, #0]
  {
    
    // Tipo de tarjeta
    switch (tagInfo[0])
   b5658:	4c5d      	ldr	r4, [pc, #372]	; (b57d0 <loop+0x25c>)
   b565a:	6825      	ldr	r5, [r4, #0]
  if ( MODE == 0 ) 
   b565c:	2f00      	cmp	r7, #0
   b565e:	f040 816d 	bne.w	b593c <loop+0x3c8>
    switch (tagInfo[0])
   b5662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; b5808 <loop+0x294>
   b5666:	2d00      	cmp	r5, #0
   b5668:	f000 80d0 	beq.w	b580c <loop+0x298>
   b566c:	2d06      	cmp	r5, #6
   b566e:	f040 813c 	bne.w	b58ea <loop+0x376>
      pitidoBlink0();
   b5672:	f7ff f81d 	bl	b46b0 <_Z12pitidoBlink0v>
    {

      // Tarjeta COMUN
      case 6:
        blinkAndSleep(true);
        switch (tagInfo[1])
   b5676:	6865      	ldr	r5, [r4, #4]
   b5678:	2d01      	cmp	r5, #1
   b567a:	d071      	beq.n	b5760 <loop+0x1ec>
   b567c:	2d02      	cmp	r5, #2
   b567e:	d071      	beq.n	b5764 <loop+0x1f0>
   b5680:	b92d      	cbnz	r5, b568e <loop+0x11a>
        {
          // Cambio de MODO
          case 0:
            
            cambioModo(tagInfo[2]);
   b5682:	68a0      	ldr	r0, [r4, #8]
   b5684:	f7ff fd66 	bl	b5154 <_Z10cambioModoi>
            resetFunc();
   b5688:	4b56      	ldr	r3, [pc, #344]	; (b57e4 <loop+0x270>)
   b568a:	681b      	ldr	r3, [r3, #0]
   b568c:	4798      	blx	r3
          Serial.println("Tarjeta inválida para este modo");
        }
        break;
    }

    if (tagInfo[0]!=-1) { 
   b568e:	6823      	ldr	r3, [r4, #0]
   b5690:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b5692:	bf1c      	itt	ne
   b5694:	f04f 33ff 	movne.w	r3, #4294967295
   b5698:	6023      	strne	r3, [r4, #0]
    }

    if (numActuadoresBloque > 0 && play == true)
   b569a:	f8d8 4000 	ldr.w	r4, [r8]
   b569e:	2c00      	cmp	r4, #0
   b56a0:	f340 8138 	ble.w	b5914 <loop+0x3a0>
   b56a4:	7833      	ldrb	r3, [r6, #0]
   b56a6:	2b00      	cmp	r3, #0
   b56a8:	f000 8144 	beq.w	b5934 <loop+0x3c0>
    {
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b56ac:	4c4e      	ldr	r4, [pc, #312]	; (b57e8 <loop+0x274>)
   b56ae:	4d4f      	ldr	r5, [pc, #316]	; (b57ec <loop+0x278>)
   b56b0:	6922      	ldr	r2, [r4, #16]
   b56b2:	6860      	ldr	r0, [r4, #4]
   b56b4:	2101      	movs	r1, #1
   b56b6:	f7fe feeb 	bl	b4490 <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b56ba:	4b4d      	ldr	r3, [pc, #308]	; (b57f0 <loop+0x27c>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b56bc:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b56be:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b56c0:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b56c2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b56c6:	f7ff f837 	bl	b4738 <_Z15activarActuadoriib>

      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b56ca:	782b      	ldrb	r3, [r5, #0]
   b56cc:	2b00      	cmp	r3, #0
   b56ce:	f000 811f 	beq.w	b5910 <loop+0x39c>
   b56d2:	4948      	ldr	r1, [pc, #288]	; (b57f4 <loop+0x280>)
      display.clearDisplay();
   b56d4:	4c38      	ldr	r4, [pc, #224]	; (b57b8 <loop+0x244>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b56d6:	4848      	ldr	r0, [pc, #288]	; (b57f8 <loop+0x284>)
   b56d8:	f004 fbd6 	bl	b9e88 <strcpy>
      display.clearDisplay();
   b56dc:	4620      	mov	r0, r4
   b56de:	f002 fbd7 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b56e2:	2300      	movs	r3, #0
      display.setCursor(0, 0);
      display.print(buf);
   b56e4:	4944      	ldr	r1, [pc, #272]	; (b57f8 <loop+0x284>)
   b56e6:	6123      	str	r3, [r4, #16]
   b56e8:	4620      	mov	r0, r4
   b56ea:	f003 fc87 	bl	b8ffc <_ZN5Print5printEPKc>
      display.display();
   b56ee:	4620      	mov	r0, r4
    if (play) {
      reproducir();
      play = false;
    }
  }
}
   b56f0:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   b56f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      display.display();
   b56f8:	f002 be32 	b.w	b8360 <_ZN16Adafruit_SSD13067displayEv>
    } else if (MODE == 1)
   b56fc:	2d01      	cmp	r5, #1
   b56fe:	d105      	bne.n	b570c <loop+0x198>
      showBitmap(0,1,"");
   b5700:	f003 fbc1 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5704:	aac6      	add	r2, sp, #792	; 0x318
   b5706:	4629      	mov	r1, r5
   b5708:	4620      	mov	r0, r4
   b570a:	e767      	b.n	b55dc <loop+0x68>
      showBitmap(0,2,"");
   b570c:	f003 fbbb 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5710:	aac6      	add	r2, sp, #792	; 0x318
   b5712:	2102      	movs	r1, #2
   b5714:	4620      	mov	r0, r4
   b5716:	f7ff f907 	bl	b4928 <_Z10showBitmapii6String>
   b571a:	a8c6      	add	r0, sp, #792	; 0x318
   b571c:	f003 fb68 	bl	b8df0 <_ZN6StringD1Ev>
      bitmap=false;
   b5720:	4b2d      	ldr	r3, [pc, #180]	; (b57d8 <loop+0x264>)
   b5722:	701c      	strb	r4, [r3, #0]
      while(currentTime-startTime<limit){
   b5724:	f8d8 2000 	ldr.w	r2, [r8]
   b5728:	6833      	ldr	r3, [r6, #0]
   b572a:	1a9b      	subs	r3, r3, r2
   b572c:	f8d9 2000 	ldr.w	r2, [r9]
   b5730:	4293      	cmp	r3, r2
   b5732:	d203      	bcs.n	b573c <loop+0x1c8>
   b5734:	f002 ffe2 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b5738:	6030      	str	r0, [r6, #0]
      while(currentTime-startTime<limit){
   b573a:	e7f3      	b.n	b5724 <loop+0x1b0>
      showBitmap(1,2,"Zumbador:");
   b573c:	492f      	ldr	r1, [pc, #188]	; (b57fc <loop+0x288>)
   b573e:	a8c6      	add	r0, sp, #792	; 0x318
   b5740:	f003 fba1 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5744:	aac6      	add	r2, sp, #792	; 0x318
   b5746:	2102      	movs	r1, #2
   b5748:	2001      	movs	r0, #1
   b574a:	e747      	b.n	b55dc <loop+0x68>
      pitidoOFF1(2);
   b574c:	2002      	movs	r0, #2
   b574e:	f7ff f860 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b5752:	2004      	movs	r0, #4
   b5754:	f7ff f85d 	bl	b4812 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b5758:	2006      	movs	r0, #6
   b575a:	f7ff f85a 	bl	b4812 <_Z10pitidoOFF1i>
   b575e:	e75d      	b.n	b561c <loop+0xa8>
            play = true;
   b5760:	7035      	strb	r5, [r6, #0]
            break;
   b5762:	e794      	b.n	b568e <loop+0x11a>
            if ( tagInfo[2] == 1 ) {
   b5764:	68a3      	ldr	r3, [r4, #8]
   b5766:	2b01      	cmp	r3, #1
   b5768:	d10f      	bne.n	b578a <loop+0x216>
              borradoALL(0);
   b576a:	4638      	mov	r0, r7
   b576c:	f7ff f9ea 	bl	b4b44 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b5770:	4923      	ldr	r1, [pc, #140]	; (b5800 <loop+0x28c>)
   b5772:	a8c6      	add	r0, sp, #792	; 0x318
   b5774:	f003 fb87 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5778:	aac6      	add	r2, sp, #792	; 0x318
   b577a:	4639      	mov	r1, r7
   b577c:	2003      	movs	r0, #3
              showBitmap(1,1,""); //D4
   b577e:	f7ff f8d3 	bl	b4928 <_Z10showBitmapii6String>
   b5782:	a8c6      	add	r0, sp, #792	; 0x318
   b5784:	f003 fb34 	bl	b8df0 <_ZN6StringD1Ev>
   b5788:	e781      	b.n	b568e <loop+0x11a>
              showBitmap(2,1,"");
   b578a:	490d      	ldr	r1, [pc, #52]	; (b57c0 <loop+0x24c>)
   b578c:	a8c6      	add	r0, sp, #792	; 0x318
   b578e:	f003 fb7a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5792:	2101      	movs	r1, #1
   b5794:	aac6      	add	r2, sp, #792	; 0x318
   b5796:	4628      	mov	r0, r5
   b5798:	f7ff f8c6 	bl	b4928 <_Z10showBitmapii6String>
   b579c:	a8c6      	add	r0, sp, #792	; 0x318
   b579e:	f003 fb27 	bl	b8df0 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b57a2:	f003 fe3f 	bl	b9424 <_Z16_fetch_usbserialv>
   b57a6:	4917      	ldr	r1, [pc, #92]	; (b5804 <loop+0x290>)
          Serial.println("Tarjeta inválida para este modo");
   b57a8:	f003 fc3b 	bl	b9022 <_ZN5Print7printlnEPKc>
   b57ac:	e76f      	b.n	b568e <loop+0x11a>
   b57ae:	bf00      	nop
   b57b0:	2003ce9f 	.word	0x2003ce9f
   b57b4:	2003d574 	.word	0x2003d574
   b57b8:	2003d578 	.word	0x2003d578
   b57bc:	2003cf42 	.word	0x2003cf42
   b57c0:	000ba48b 	.word	0x000ba48b
   b57c4:	2003d920 	.word	0x2003d920
   b57c8:	2003dc5c 	.word	0x2003dc5c
   b57cc:	000ba4a3 	.word	0x000ba4a3
   b57d0:	2003ceac 	.word	0x2003ceac
   b57d4:	2003d910 	.word	0x2003d910
   b57d8:	2003cf51 	.word	0x2003cf51
   b57dc:	2003dc78 	.word	0x2003dc78
   b57e0:	2003cea0 	.word	0x2003cea0
   b57e4:	2003dc74 	.word	0x2003dc74
   b57e8:	2003cf54 	.word	0x2003cf54
   b57ec:	2003e6b8 	.word	0x2003e6b8
   b57f0:	2003d908 	.word	0x2003d908
   b57f4:	000ba76c 	.word	0x000ba76c
   b57f8:	2003d52d 	.word	0x2003d52d
   b57fc:	000ba499 	.word	0x000ba499
   b5800:	000ba4b6 	.word	0x000ba4b6
   b5804:	000ba4d1 	.word	0x000ba4d1
   b5808:	2003dc50 	.word	0x2003dc50
        tipo = tagInfo[2];
   b580c:	4f86      	ldr	r7, [pc, #536]	; (b5a28 <loop+0x4b4>)
        id = tagInfo[1];
   b580e:	6863      	ldr	r3, [r4, #4]
        tipo = tagInfo[2];
   b5810:	68a2      	ldr	r2, [r4, #8]
        id = tagInfo[1];
   b5812:	f8df 9250 	ldr.w	r9, [pc, #592]	; b5a64 <loop+0x4f0>
        tipo = tagInfo[2];
   b5816:	603a      	str	r2, [r7, #0]
        estado = tagInfo[3];
   b5818:	4a84      	ldr	r2, [pc, #528]	; (b5a2c <loop+0x4b8>)
   b581a:	68e1      	ldr	r1, [r4, #12]
   b581c:	f8df a248 	ldr.w	sl, [pc, #584]	; b5a68 <loop+0x4f4>
        id = tagInfo[1];
   b5820:	f8c9 3000 	str.w	r3, [r9]
        if (id >= 2) {
   b5824:	2b01      	cmp	r3, #1
        estado = tagInfo[3];
   b5826:	6011      	str	r1, [r2, #0]
        if (id >= 2) {
   b5828:	dd2a      	ble.n	b5880 <loop+0x30c>
          Serial.println("Sensor detectado");
   b582a:	f003 fdfb 	bl	b9424 <_Z16_fetch_usbserialv>
   b582e:	4980      	ldr	r1, [pc, #512]	; (b5a30 <loop+0x4bc>)
   b5830:	f003 fbf7 	bl	b9022 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b5834:	4b7f      	ldr	r3, [pc, #508]	; (b5a34 <loop+0x4c0>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5836:	f8d7 b000 	ldr.w	fp, [r7]
          sensor.id = id;
   b583a:	f8d9 2000 	ldr.w	r2, [r9]
          bloques[0].sensores[0] = sensor;
   b583e:	605a      	str	r2, [r3, #4]
          bloques[0].numSensores++;
   b5840:	681a      	ldr	r2, [r3, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5842:	f1bb 0f00 	cmp.w	fp, #0
   b5846:	bf18      	it	ne
   b5848:	f04f 0b02 	movne.w	fp, #2
          bloques[0].numSensores++;
   b584c:	3201      	adds	r2, #1
          bloques[0].sensores[0] = sensor;
   b584e:	f8c3 b010 	str.w	fp, [r3, #16]
          bloques[0].numSensores++;
   b5852:	601a      	str	r2, [r3, #0]
          numSensoresBloque++;
   b5854:	f8da 3000 	ldr.w	r3, [sl]
   b5858:	3301      	adds	r3, #1
   b585a:	f8ca 3000 	str.w	r3, [sl]
   b585e:	f7fe ff27 	bl	b46b0 <_Z12pitidoBlink0v>
            showBitmap(1,3,""); //A0
   b5862:	4975      	ldr	r1, [pc, #468]	; (b5a38 <loop+0x4c4>)
   b5864:	a8c6      	add	r0, sp, #792	; 0x318
          if (sensor.puerto == 0) {
   b5866:	f1bb 0f00 	cmp.w	fp, #0
   b586a:	d136      	bne.n	b58da <loop+0x366>
            showBitmap(1,3,""); //A0
   b586c:	f003 fb0b 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5870:	aac6      	add	r2, sp, #792	; 0x318
   b5872:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b5874:	2001      	movs	r0, #1
   b5876:	f7ff f857 	bl	b4928 <_Z10showBitmapii6String>
   b587a:	a8c6      	add	r0, sp, #792	; 0x318
   b587c:	f003 fab8 	bl	b8df0 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b5880:	f8da 3000 	ldr.w	r3, [sl]
   b5884:	2b00      	cmp	r3, #0
   b5886:	dd2d      	ble.n	b58e4 <loop+0x370>
          if (tagInfo[1] == 0 || tagInfo[1] == 1) {
   b5888:	6863      	ldr	r3, [r4, #4]
   b588a:	2b01      	cmp	r3, #1
   b588c:	f63f aeff 	bhi.w	b568e <loop+0x11a>
            Serial.println("Actuador detectado");
   b5890:	f003 fdc8 	bl	b9424 <_Z16_fetch_usbserialv>
   b5894:	4969      	ldr	r1, [pc, #420]	; (b5a3c <loop+0x4c8>)
   b5896:	f003 fbc4 	bl	b9022 <_ZN5Print7printlnEPKc>
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b589a:	683b      	ldr	r3, [r7, #0]
            actuador.id = id;
   b589c:	f8d9 1000 	ldr.w	r1, [r9]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b58a0:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b58a2:	4b64      	ldr	r3, [pc, #400]	; (b5a34 <loop+0x4c0>)
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b58a4:	bf0c      	ite	eq
   b58a6:	2202      	moveq	r2, #2
   b58a8:	2204      	movne	r2, #4
            bloques[0].actuadores[0] = actuador;
   b58aa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b58ae:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            bloques[0].actuadores[0] = actuador;
   b58b2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b58b6:	3201      	adds	r2, #1
   b58b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b58bc:	f8d8 3000 	ldr.w	r3, [r8]
   b58c0:	3301      	adds	r3, #1
   b58c2:	f8c8 3000 	str.w	r3, [r8]
   b58c6:	f7fe fef3 	bl	b46b0 <_Z12pitidoBlink0v>
              showBitmap(1,1,""); //D4
   b58ca:	495b      	ldr	r1, [pc, #364]	; (b5a38 <loop+0x4c4>)
   b58cc:	a8c6      	add	r0, sp, #792	; 0x318
   b58ce:	f003 fada 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b58d2:	2101      	movs	r1, #1
   b58d4:	aac6      	add	r2, sp, #792	; 0x318
   b58d6:	4608      	mov	r0, r1
   b58d8:	e751      	b.n	b577e <loop+0x20a>
            showBitmap(1,0,""); //D2
   b58da:	f003 fad4 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b58de:	aac6      	add	r2, sp, #792	; 0x318
   b58e0:	4629      	mov	r1, r5
   b58e2:	e7c7      	b.n	b5874 <loop+0x300>
            ledApagar();
   b58e4:	f7fe fe28 	bl	b4538 <_Z9ledApagarv>
   b58e8:	e6d1      	b.n	b568e <loop+0x11a>
        if ( tagInfo[0] != -1 ) {
   b58ea:	3501      	adds	r5, #1
   b58ec:	f43f aecf 	beq.w	b568e <loop+0x11a>
          showBitmap(2,0,"");
   b58f0:	4951      	ldr	r1, [pc, #324]	; (b5a38 <loop+0x4c4>)
   b58f2:	a8c6      	add	r0, sp, #792	; 0x318
   b58f4:	f003 fac7 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b58f8:	4639      	mov	r1, r7
   b58fa:	aac6      	add	r2, sp, #792	; 0x318
   b58fc:	2002      	movs	r0, #2
   b58fe:	f7ff f813 	bl	b4928 <_Z10showBitmapii6String>
   b5902:	a8c6      	add	r0, sp, #792	; 0x318
   b5904:	f003 fa74 	bl	b8df0 <_ZN6StringD1Ev>
          Serial.println("Tarjeta inválida para este modo");
   b5908:	f003 fd8c 	bl	b9424 <_Z16_fetch_usbserialv>
   b590c:	494c      	ldr	r1, [pc, #304]	; (b5a40 <loop+0x4cc>)
   b590e:	e74b      	b.n	b57a8 <loop+0x234>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b5910:	494c      	ldr	r1, [pc, #304]	; (b5a44 <loop+0x4d0>)
   b5912:	e6df      	b.n	b56d4 <loop+0x160>
    } else if (numActuadoresBloque==0 && play == true) {
   b5914:	d10e      	bne.n	b5934 <loop+0x3c0>
   b5916:	7833      	ldrb	r3, [r6, #0]
   b5918:	b163      	cbz	r3, b5934 <loop+0x3c0>
      showBitmap(2,4,"");
   b591a:	4947      	ldr	r1, [pc, #284]	; (b5a38 <loop+0x4c4>)
   b591c:	a8c6      	add	r0, sp, #792	; 0x318
   b591e:	f003 fab2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5922:	aac6      	add	r2, sp, #792	; 0x318
   b5924:	2104      	movs	r1, #4
   b5926:	2002      	movs	r0, #2
   b5928:	f7fe fffe 	bl	b4928 <_Z10showBitmapii6String>
   b592c:	a8c6      	add	r0, sp, #792	; 0x318
   b592e:	f003 fa5f 	bl	b8df0 <_ZN6StringD1Ev>
      play=false;
   b5932:	7034      	strb	r4, [r6, #0]
}
   b5934:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   b5938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b593c:	2f01      	cmp	r7, #1
   b593e:	f040 835b 	bne.w	b5ff8 <loop+0xa84>
    switch (tagInfo[0])
   b5942:	2d01      	cmp	r5, #1
   b5944:	d055      	beq.n	b59f2 <loop+0x47e>
   b5946:	2d06      	cmp	r5, #6
   b5948:	f040 82f5 	bne.w	b5f36 <loop+0x9c2>
        switch (tagInfo[1])
   b594c:	6865      	ldr	r5, [r4, #4]
   b594e:	2d01      	cmp	r5, #1
   b5950:	d028      	beq.n	b59a4 <loop+0x430>
   b5952:	2d02      	cmp	r5, #2
   b5954:	d028      	beq.n	b59a8 <loop+0x434>
   b5956:	b92d      	cbnz	r5, b5964 <loop+0x3f0>
            cambioModo(tagInfo[2]);
   b5958:	68a0      	ldr	r0, [r4, #8]
   b595a:	f7ff fbfb 	bl	b5154 <_Z10cambioModoi>
            resetFunc();
   b595e:	4b3a      	ldr	r3, [pc, #232]	; (b5a48 <loop+0x4d4>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	4798      	blx	r3
    tagInfo[0] = -1;
   b5964:	f04f 33ff 	mov.w	r3, #4294967295
   b5968:	6023      	str	r3, [r4, #0]
    if (play) {
   b596a:	7833      	ldrb	r3, [r6, #0]
   b596c:	2b00      	cmp	r3, #0
   b596e:	d0e1      	beq.n	b5934 <loop+0x3c0>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b5970:	4d36      	ldr	r5, [pc, #216]	; (b5a4c <loop+0x4d8>)
   b5972:	682b      	ldr	r3, [r5, #0]
   b5974:	2b00      	cmp	r3, #0
   b5976:	f040 82ed 	bne.w	b5f54 <loop+0x9e0>
   b597a:	4b2e      	ldr	r3, [pc, #184]	; (b5a34 <loop+0x4c0>)
   b597c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b5980:	2b00      	cmp	r3, #0
   b5982:	f300 82ea 	bgt.w	b5f5a <loop+0x9e6>
        showBitmap(2,4,"  acaba bloque 1");
   b5986:	4932      	ldr	r1, [pc, #200]	; (b5a50 <loop+0x4dc>)
   b5988:	a8c6      	add	r0, sp, #792	; 0x318
   b598a:	f003 fa7c 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b598e:	aac6      	add	r2, sp, #792	; 0x318
   b5990:	2104      	movs	r1, #4
   b5992:	2002      	movs	r0, #2
   b5994:	f7fe ffc8 	bl	b4928 <_Z10showBitmapii6String>
   b5998:	a8c6      	add	r0, sp, #792	; 0x318
   b599a:	f003 fa29 	bl	b8df0 <_ZN6StringD1Ev>
        play = false;
   b599e:	2300      	movs	r3, #0
   b59a0:	7033      	strb	r3, [r6, #0]
   b59a2:	e2f6      	b.n	b5f92 <loop+0xa1e>
            play = true;
   b59a4:	7035      	strb	r5, [r6, #0]
            break;
   b59a6:	e7dd      	b.n	b5964 <loop+0x3f0>
            if ( tagInfo[2] == 1 ) {
   b59a8:	68a3      	ldr	r3, [r4, #8]
   b59aa:	2b01      	cmp	r3, #1
   b59ac:	d10e      	bne.n	b59cc <loop+0x458>
   switch (modo)
   b59ae:	f7fe fb89 	bl	b40c4 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b59b2:	a8c6      	add	r0, sp, #792	; 0x318
   b59b4:	4927      	ldr	r1, [pc, #156]	; (b5a54 <loop+0x4e0>)
   b59b6:	f003 fa66 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b59ba:	aac6      	add	r2, sp, #792	; 0x318
   b59bc:	2100      	movs	r1, #0
   b59be:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b59c0:	f7fe ffb2 	bl	b4928 <_Z10showBitmapii6String>
   b59c4:	a8c6      	add	r0, sp, #792	; 0x318
   b59c6:	f003 fa13 	bl	b8df0 <_ZN6StringD1Ev>
   b59ca:	e7cb      	b.n	b5964 <loop+0x3f0>
            } else if (tagInfo[2] == 2) {
   b59cc:	2b02      	cmp	r3, #2
   b59ce:	d103      	bne.n	b59d8 <loop+0x464>
              borradoBLOQUE(1);
   b59d0:	4638      	mov	r0, r7
   b59d2:	f7ff f8db 	bl	b4b8c <_Z13borradoBLOQUEi>
   b59d6:	e7c5      	b.n	b5964 <loop+0x3f0>
              Serial.println("Borrado no permitido para este modo");
   b59d8:	f003 fd24 	bl	b9424 <_Z16_fetch_usbserialv>
   b59dc:	491e      	ldr	r1, [pc, #120]	; (b5a58 <loop+0x4e4>)
   b59de:	f003 fb20 	bl	b9022 <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b59e2:	4915      	ldr	r1, [pc, #84]	; (b5a38 <loop+0x4c4>)
   b59e4:	a8c6      	add	r0, sp, #792	; 0x318
   b59e6:	f003 fa4e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b59ea:	aac6      	add	r2, sp, #792	; 0x318
   b59ec:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b59ee:	2002      	movs	r0, #2
   b59f0:	e7e6      	b.n	b59c0 <loop+0x44c>
        int deviceID = tagInfo[3];
   b59f2:	68e7      	ldr	r7, [r4, #12]
        Serial.print("Ejecutando tag --> ");
   b59f4:	4d0f      	ldr	r5, [pc, #60]	; (b5a34 <loop+0x4c0>)
   b59f6:	f8df 9070 	ldr.w	r9, [pc, #112]	; b5a68 <loop+0x4f4>
   b59fa:	f8df 8064 	ldr.w	r8, [pc, #100]	; b5a60 <loop+0x4ec>
   b59fe:	f8df b06c 	ldr.w	fp, [pc, #108]	; b5a6c <loop+0x4f8>
   b5a02:	f8df a048 	ldr.w	sl, [pc, #72]	; b5a4c <loop+0x4d8>
   b5a06:	f003 fd0d 	bl	b9424 <_Z16_fetch_usbserialv>
   b5a0a:	4914      	ldr	r1, [pc, #80]	; (b5a5c <loop+0x4e8>)
   b5a0c:	f003 faf6 	bl	b8ffc <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b5a10:	6863      	ldr	r3, [r4, #4]
   b5a12:	2b05      	cmp	r3, #5
   b5a14:	d86f      	bhi.n	b5af6 <loop+0x582>
   b5a16:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5a1a:	002b      	.short	0x002b
   b5a1c:	01f500cc 	.word	0x01f500cc
   b5a20:	025c022b 	.word	0x025c022b
   b5a24:	0277      	.short	0x0277
   b5a26:	bf00      	nop
   b5a28:	2003e6b4 	.word	0x2003e6b4
   b5a2c:	2003d908 	.word	0x2003d908
   b5a30:	000ba4f5 	.word	0x000ba4f5
   b5a34:	2003cf54 	.word	0x2003cf54
   b5a38:	000ba48b 	.word	0x000ba48b
   b5a3c:	000ba506 	.word	0x000ba506
   b5a40:	000ba519 	.word	0x000ba519
   b5a44:	000ba77b 	.word	0x000ba77b
   b5a48:	2003dc74 	.word	0x2003dc74
   b5a4c:	2003cea4 	.word	0x2003cea4
   b5a50:	000ba781 	.word	0x000ba781
   b5a54:	000ba4b6 	.word	0x000ba4b6
   b5a58:	000ba4d1 	.word	0x000ba4d1
   b5a5c:	000ba53a 	.word	0x000ba53a
   b5a60:	2003dc50 	.word	0x2003dc50
   b5a64:	2003d90c 	.word	0x2003d90c
   b5a68:	2003dc58 	.word	0x2003dc58
   b5a6c:	2003dc54 	.word	0x2003dc54
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b5a70:	f8df 8344 	ldr.w	r8, [pc, #836]	; b5db8 <loop+0x844>
            Serial.println("Sensor detectado");
   b5a74:	f003 fcd6 	bl	b9424 <_Z16_fetch_usbserialv>
   b5a78:	49c0      	ldr	r1, [pc, #768]	; (b5d7c <loop+0x808>)
   b5a7a:	f003 fad2 	bl	b9022 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b5a7e:	f898 3000 	ldrb.w	r3, [r8]
   b5a82:	2b00      	cmp	r3, #0
   b5a84:	d05f      	beq.n	b5b46 <loop+0x5d2>
   b5a86:	f8d9 2000 	ldr.w	r2, [r9]
   b5a8a:	f8db 3000 	ldr.w	r3, [fp]
   b5a8e:	429a      	cmp	r2, r3
   b5a90:	d170      	bne.n	b5b74 <loop+0x600>
   b5a92:	4638      	mov	r0, r7
   b5a94:	f7ff fa36 	bl	b4f04 <_Z13isValidSensori>
   b5a98:	2800      	cmp	r0, #0
   b5a9a:	d051      	beq.n	b5b40 <loop+0x5cc>
              puerto = isNewSensor(deviceID);
   b5a9c:	4638      	mov	r0, r7
   b5a9e:	f7ff fa53 	bl	b4f48 <_Z11isNewSensori>
   b5aa2:	f8df 830c 	ldr.w	r8, [pc, #780]	; b5db0 <loop+0x83c>
   b5aa6:	f8c8 0000 	str.w	r0, [r8]
              if (puerto == -1) {
   b5aaa:	3001      	adds	r0, #1
   b5aac:	d14f      	bne.n	b5b4e <loop+0x5da>
                puerto = asignarPuerto(tagInfo[2]);
   b5aae:	68a0      	ldr	r0, [r4, #8]
   b5ab0:	f7ff fc34 	bl	b531c <_Z13asignarPuertoi>
   b5ab4:	4601      	mov	r1, r0
   b5ab6:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b5aba:	68a0      	ldr	r0, [r4, #8]
   b5abc:	f7fe fff4 	bl	b4aa8 <_Z8showPortii>
              if (puerto != -1) {
   b5ac0:	f8d8 1000 	ldr.w	r1, [r8]
   b5ac4:	1c4a      	adds	r2, r1, #1
   b5ac6:	f000 817d 	beq.w	b5dc4 <loop+0x850>
                newSensor.bloque = numBloque;
   b5aca:	f8da e000 	ldr.w	lr, [sl]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5ace:	f8d9 0000 	ldr.w	r0, [r9]
   b5ad2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5ad6:	fb02 f20e 	mul.w	r2, r2, lr
   b5ada:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   b5ade:	442b      	add	r3, r5
                numSensoresBloque++;
   b5ae0:	3001      	adds	r0, #1
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5ae2:	605f      	str	r7, [r3, #4]
   b5ae4:	6927      	ldr	r7, [r4, #16]
   b5ae6:	6119      	str	r1, [r3, #16]
   b5ae8:	e9c3 7e02 	strd	r7, lr, [r3, #8]
                bloques[numBloque].numSensores++;
   b5aec:	58ab      	ldr	r3, [r5, r2]
                numSensoresBloque++;
   b5aee:	f8c9 0000 	str.w	r0, [r9]
                bloques[numBloque].numSensores++;
   b5af2:	3301      	adds	r3, #1
   b5af4:	50ab      	str	r3, [r5, r2]
        Serial.println("Fin Tag");
   b5af6:	f003 fc95 	bl	b9424 <_Z16_fetch_usbserialv>
   b5afa:	49a1      	ldr	r1, [pc, #644]	; (b5d80 <loop+0x80c>)
   b5afc:	f003 fa91 	bl	b9022 <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b5b00:	f003 fc90 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b04:	499f      	ldr	r1, [pc, #636]	; (b5d84 <loop+0x810>)
   b5b06:	f003 fa8c 	bl	b9022 <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b5b0a:	f003 fc8b 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b0e:	f8da 2000 	ldr.w	r2, [sl]
   b5b12:	499d      	ldr	r1, [pc, #628]	; (b5d88 <loop+0x814>)
   b5b14:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5b18:	fb03 5502 	mla	r5, r3, r2, r5
   b5b1c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b5b20:	9302      	str	r3, [sp, #8]
   b5b22:	4b9a      	ldr	r3, [pc, #616]	; (b5d8c <loop+0x818>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	9301      	str	r3, [sp, #4]
   b5b28:	4b99      	ldr	r3, [pc, #612]	; (b5d90 <loop+0x81c>)
   b5b2a:	681b      	ldr	r3, [r3, #0]
   b5b2c:	9300      	str	r3, [sp, #0]
   b5b2e:	f8d9 3000 	ldr.w	r3, [r9]
   b5b32:	f7fe faf3 	bl	b411c <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b5b36:	f003 fc75 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b3a:	f003 fa66 	bl	b900a <_ZN5Print7printlnEv>
        break;
   b5b3e:	e711      	b.n	b5964 <loop+0x3f0>
              if ((!IF_pasado)) {
   b5b40:	f898 3000 	ldrb.w	r3, [r8]
   b5b44:	b983      	cbnz	r3, b5b68 <loop+0x5f4>
                Serial.println("Se esperaba IF tag");
   b5b46:	f003 fc6d 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b4a:	4992      	ldr	r1, [pc, #584]	; (b5d94 <loop+0x820>)
   b5b4c:	e015      	b.n	b5b7a <loop+0x606>
                showBitmap(1,6,"");
   b5b4e:	4992      	ldr	r1, [pc, #584]	; (b5d98 <loop+0x824>)
   b5b50:	a8c6      	add	r0, sp, #792	; 0x318
   b5b52:	f003 f998 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b56:	aac6      	add	r2, sp, #792	; 0x318
   b5b58:	2106      	movs	r1, #6
   b5b5a:	2001      	movs	r0, #1
   b5b5c:	f7fe fee4 	bl	b4928 <_Z10showBitmapii6String>
   b5b60:	a8c6      	add	r0, sp, #792	; 0x318
   b5b62:	f003 f945 	bl	b8df0 <_ZN6StringD1Ev>
   b5b66:	e7ab      	b.n	b5ac0 <loop+0x54c>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b5b68:	f8d9 2000 	ldr.w	r2, [r9]
   b5b6c:	f8db 3000 	ldr.w	r3, [fp]
   b5b70:	429a      	cmp	r2, r3
   b5b72:	d00c      	beq.n	b5b8e <loop+0x61a>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b5b74:	f003 fc56 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b78:	4988      	ldr	r1, [pc, #544]	; (b5d9c <loop+0x828>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5b7a:	f003 fa52 	bl	b9022 <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b5b7e:	4986      	ldr	r1, [pc, #536]	; (b5d98 <loop+0x824>)
   b5b80:	a8c6      	add	r0, sp, #792	; 0x318
   b5b82:	f003 f980 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b86:	2102      	movs	r1, #2
   b5b88:	aac6      	add	r2, sp, #792	; 0x318
   b5b8a:	4608      	mov	r0, r1
   b5b8c:	e00b      	b.n	b5ba6 <loop+0x632>
                Serial.println("Sensor invalido");
   b5b8e:	f003 fc49 	bl	b9424 <_Z16_fetch_usbserialv>
   b5b92:	4983      	ldr	r1, [pc, #524]	; (b5da0 <loop+0x82c>)
   b5b94:	f003 fa45 	bl	b9022 <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b5b98:	497f      	ldr	r1, [pc, #508]	; (b5d98 <loop+0x824>)
   b5b9a:	a8c6      	add	r0, sp, #792	; 0x318
   b5b9c:	f003 f973 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ba0:	aac6      	add	r2, sp, #792	; 0x318
   b5ba2:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b5ba4:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b5ba6:	f7fe febf 	bl	b4928 <_Z10showBitmapii6String>
   b5baa:	a8c6      	add	r0, sp, #792	; 0x318
   b5bac:	f003 f920 	bl	b8df0 <_ZN6StringD1Ev>
   b5bb0:	e7a1      	b.n	b5af6 <loop+0x582>
            Serial.println("Actuador detectado");
   b5bb2:	f003 fc37 	bl	b9424 <_Z16_fetch_usbserialv>
   b5bb6:	497b      	ldr	r1, [pc, #492]	; (b5da4 <loop+0x830>)
   b5bb8:	f003 fa33 	bl	b9022 <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b5bbc:	4b7a      	ldr	r3, [pc, #488]	; (b5da8 <loop+0x834>)
            int deviceState = tagInfo[4];
   b5bbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) && numActuadoresBloque==0 ) {
   b5bc2:	781b      	ldrb	r3, [r3, #0]
   b5bc4:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b5bc6:	2b00      	cmp	r3, #0
   b5bc8:	d06b      	beq.n	b5ca2 <loop+0x72e>
   b5bca:	4b78      	ldr	r3, [pc, #480]	; (b5dac <loop+0x838>)
   b5bcc:	781b      	ldrb	r3, [r3, #0]
   b5bce:	4639      	mov	r1, r7
   b5bd0:	4658      	mov	r0, fp
   b5bd2:	2b00      	cmp	r3, #0
   b5bd4:	d162      	bne.n	b5c9c <loop+0x728>
   b5bd6:	f7ff f9df 	bl	b4f98 <_Z15isValidActuadorii>
   b5bda:	2800      	cmp	r0, #0
   b5bdc:	d061      	beq.n	b5ca2 <loop+0x72e>
   b5bde:	f8d8 3000 	ldr.w	r3, [r8]
   b5be2:	2b00      	cmp	r3, #0
   b5be4:	d15d      	bne.n	b5ca2 <loop+0x72e>
              puerto = isNewActuador(deviceID);
   b5be6:	4638      	mov	r0, r7
   b5be8:	f7ff fa10 	bl	b500c <_Z13isNewActuadori>
   b5bec:	4b70      	ldr	r3, [pc, #448]	; (b5db0 <loop+0x83c>)
   b5bee:	6018      	str	r0, [r3, #0]
              if (puerto == -1) {
   b5bf0:	3001      	adds	r0, #1
   b5bf2:	d146      	bne.n	b5c82 <loop+0x70e>
                puerto = asignarPuerto(tagInfo[2]);
   b5bf4:	68a0      	ldr	r0, [r4, #8]
   b5bf6:	f7ff fb91 	bl	b531c <_Z13asignarPuertoi>
   b5bfa:	4b6d      	ldr	r3, [pc, #436]	; (b5db0 <loop+0x83c>)
   b5bfc:	4601      	mov	r1, r0
   b5bfe:	6018      	str	r0, [r3, #0]
                showPort(tagInfo[2], puerto);
   b5c00:	68a0      	ldr	r0, [r4, #8]
   b5c02:	f7fe ff51 	bl	b4aa8 <_Z8showPortii>
              if (puerto != -1) {
   b5c06:	4b6a      	ldr	r3, [pc, #424]	; (b5db0 <loop+0x83c>)
   b5c08:	6819      	ldr	r1, [r3, #0]
   b5c0a:	1c4b      	adds	r3, r1, #1
   b5c0c:	f000 80da 	beq.w	b5dc4 <loop+0x850>
                newActuador.bloque = numBloque;
   b5c10:	f8da c000 	ldr.w	ip, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5c14:	f8d8 0000 	ldr.w	r0, [r8]
   b5c18:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5c1c:	fb02 f20c 	mul.w	r2, r2, ip
   b5c20:	2314      	movs	r3, #20
   b5c22:	fb03 2300 	mla	r3, r3, r0, r2
   b5c26:	442b      	add	r3, r5
   b5c28:	e9c3 7b52 	strd	r7, fp, [r3, #328]	; 0x148
                bloques[numBloque].numActuadores++;
   b5c2c:	442a      	add	r2, r5
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5c2e:	f04f 0b01 	mov.w	fp, #1
   b5c32:	f883 b158 	strb.w	fp, [r3, #344]	; 0x158
   b5c36:	e9c3 c154 	strd	ip, r1, [r3, #336]	; 0x150
                bloques[numBloque].numActuadores++;
   b5c3a:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
                numActuadoresBloque++;
   b5c3e:	4458      	add	r0, fp
                bloques[numBloque].numActuadores++;
   b5c40:	445b      	add	r3, fp
                numActuadoresBloque++;
   b5c42:	f8c8 0000 	str.w	r0, [r8]
                bloques[numBloque].numActuadores++;
   b5c46:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
                if (deviceID == 0)
   b5c4a:	2f00      	cmp	r7, #0
   b5c4c:	f47f af53 	bne.w	b5af6 <loop+0x582>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5c50:	b2c9      	uxtb	r1, r1
   b5c52:	eb01 020b 	add.w	r2, r1, fp
   b5c56:	afc6      	add	r7, sp, #792	; 0x318
   b5c58:	2305      	movs	r3, #5
   b5c5a:	b2d2      	uxtb	r2, r2
   b5c5c:	4638      	mov	r0, r7
   b5c5e:	f002 fc19 	bl	b8494 <_ZN12ChainableLEDC1Ehhh>
   b5c62:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5c66:	f8df 8158 	ldr.w	r8, [pc, #344]	; b5dc0 <loop+0x84c>
   b5c6a:	e888 0003 	stmia.w	r8, {r0, r1}
   b5c6e:	4638      	mov	r0, r7
   b5c70:	f002 fc1d 	bl	b84ae <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5c74:	4640      	mov	r0, r8
   b5c76:	f002 fcbf 	bl	b85f8 <_ZN12ChainableLED4initEv>
                  init = true;
   b5c7a:	4b4e      	ldr	r3, [pc, #312]	; (b5db4 <loop+0x840>)
   b5c7c:	f883 b000 	strb.w	fp, [r3]
   b5c80:	e739      	b.n	b5af6 <loop+0x582>
                showBitmap(1,6,"");
   b5c82:	4945      	ldr	r1, [pc, #276]	; (b5d98 <loop+0x824>)
   b5c84:	a8c6      	add	r0, sp, #792	; 0x318
   b5c86:	f003 f8fe 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5c8a:	aac6      	add	r2, sp, #792	; 0x318
   b5c8c:	2106      	movs	r1, #6
   b5c8e:	2001      	movs	r0, #1
   b5c90:	f7fe fe4a 	bl	b4928 <_Z10showBitmapii6String>
   b5c94:	a8c6      	add	r0, sp, #792	; 0x318
   b5c96:	f003 f8ab 	bl	b8df0 <_ZN6StringD1Ev>
   b5c9a:	e7b4      	b.n	b5c06 <loop+0x692>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5c9c:	f7ff f97c 	bl	b4f98 <_Z15isValidActuadorii>
   b5ca0:	b960      	cbnz	r0, b5cbc <loop+0x748>
              if (!IF_pasado) {
   b5ca2:	4b45      	ldr	r3, [pc, #276]	; (b5db8 <loop+0x844>)
   b5ca4:	781b      	ldrb	r3, [r3, #0]
   b5ca6:	2b00      	cmp	r3, #0
   b5ca8:	f43f af4d 	beq.w	b5b46 <loop+0x5d2>
              } else if (!THEN_pasado) {
   b5cac:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b5cae:	2b00      	cmp	r3, #0
   b5cb0:	f040 808e 	bne.w	b5dd0 <loop+0x85c>
                Serial.println("Se esperaba THEN tag");
   b5cb4:	f003 fbb6 	bl	b9424 <_Z16_fetch_usbserialv>
   b5cb8:	4940      	ldr	r1, [pc, #256]	; (b5dbc <loop+0x848>)
   b5cba:	e75e      	b.n	b5b7a <loop+0x606>
              puerto = isNewActuador(deviceID);
   b5cbc:	4638      	mov	r0, r7
   b5cbe:	f7ff f9a5 	bl	b500c <_Z13isNewActuadori>
   b5cc2:	f8df b0ec 	ldr.w	fp, [pc, #236]	; b5db0 <loop+0x83c>
   b5cc6:	f8cb 0000 	str.w	r0, [fp]
              if (puerto == -1) {
   b5cca:	3001      	adds	r0, #1
   b5ccc:	d149      	bne.n	b5d62 <loop+0x7ee>
                puerto = asignarPuerto(tagInfo[2]);
   b5cce:	68a0      	ldr	r0, [r4, #8]
   b5cd0:	f7ff fb24 	bl	b531c <_Z13asignarPuertoi>
   b5cd4:	4601      	mov	r1, r0
   b5cd6:	f8cb 0000 	str.w	r0, [fp]
                showPort(tagInfo[2], puerto);
   b5cda:	68a0      	ldr	r0, [r4, #8]
   b5cdc:	f7fe fee4 	bl	b4aa8 <_Z8showPortii>
              if (puerto != -1) {
   b5ce0:	f8db 1000 	ldr.w	r1, [fp]
   b5ce4:	1c48      	adds	r0, r1, #1
   b5ce6:	d06d      	beq.n	b5dc4 <loop+0x850>
                newActuador.bloque = numBloque;
   b5ce8:	f8da e000 	ldr.w	lr, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5cec:	f8d8 c000 	ldr.w	ip, [r8]
   b5cf0:	6920      	ldr	r0, [r4, #16]
   b5cf2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5cf6:	fb02 f20e 	mul.w	r2, r2, lr
   b5cfa:	2314      	movs	r3, #20
   b5cfc:	fb03 230c 	mla	r3, r3, ip, r2
   b5d00:	442b      	add	r3, r5
   b5d02:	f503 7ba4 	add.w	fp, r3, #328	; 0x148
   b5d06:	e9c3 0e53 	strd	r0, lr, [r3, #332]	; 0x14c
   b5d0a:	f8c3 7148 	str.w	r7, [r3, #328]	; 0x148
   b5d0e:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
                bloques[numBloque].numActuadores++;
   b5d12:	442a      	add	r2, r5
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5d14:	2300      	movs	r3, #0
   b5d16:	f88b 3010 	strb.w	r3, [fp, #16]
                bloques[numBloque].numActuadores++;
   b5d1a:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   b5d1e:	3301      	adds	r3, #1
   b5d20:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
                numActuadoresBloque++;
   b5d24:	f10c 0301 	add.w	r3, ip, #1
   b5d28:	f8c8 3000 	str.w	r3, [r8]
                if (deviceID == 0)
   b5d2c:	2f00      	cmp	r7, #0
   b5d2e:	f47f aee2 	bne.w	b5af6 <loop+0x582>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5d32:	b2c9      	uxtb	r1, r1
   b5d34:	1c4a      	adds	r2, r1, #1
   b5d36:	afc6      	add	r7, sp, #792	; 0x318
   b5d38:	2305      	movs	r3, #5
   b5d3a:	b2d2      	uxtb	r2, r2
   b5d3c:	4638      	mov	r0, r7
   b5d3e:	f002 fba9 	bl	b8494 <_ZN12ChainableLEDC1Ehhh>
   b5d42:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5d46:	f8df 8078 	ldr.w	r8, [pc, #120]	; b5dc0 <loop+0x84c>
   b5d4a:	e888 0003 	stmia.w	r8, {r0, r1}
   b5d4e:	4638      	mov	r0, r7
   b5d50:	f002 fbad 	bl	b84ae <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5d54:	4640      	mov	r0, r8
   b5d56:	f002 fc4f 	bl	b85f8 <_ZN12ChainableLED4initEv>
                  init = true;
   b5d5a:	4b16      	ldr	r3, [pc, #88]	; (b5db4 <loop+0x840>)
   b5d5c:	2201      	movs	r2, #1
   b5d5e:	701a      	strb	r2, [r3, #0]
   b5d60:	e6c9      	b.n	b5af6 <loop+0x582>
                showBitmap(1,6,"");
   b5d62:	490d      	ldr	r1, [pc, #52]	; (b5d98 <loop+0x824>)
   b5d64:	a8c6      	add	r0, sp, #792	; 0x318
   b5d66:	f003 f88e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5d6a:	aac6      	add	r2, sp, #792	; 0x318
   b5d6c:	2106      	movs	r1, #6
   b5d6e:	2001      	movs	r0, #1
   b5d70:	f7fe fdda 	bl	b4928 <_Z10showBitmapii6String>
   b5d74:	a8c6      	add	r0, sp, #792	; 0x318
   b5d76:	f003 f83b 	bl	b8df0 <_ZN6StringD1Ev>
   b5d7a:	e7b1      	b.n	b5ce0 <loop+0x76c>
   b5d7c:	000ba4f5 	.word	0x000ba4f5
   b5d80:	000ba702 	.word	0x000ba702
   b5d84:	000ba70a 	.word	0x000ba70a
   b5d88:	000ba73f 	.word	0x000ba73f
   b5d8c:	2003dc50 	.word	0x2003dc50
   b5d90:	2003dc54 	.word	0x2003dc54
   b5d94:	000ba54e 	.word	0x000ba54e
   b5d98:	000ba48b 	.word	0x000ba48b
   b5d9c:	000ba561 	.word	0x000ba561
   b5da0:	000ba596 	.word	0x000ba596
   b5da4:	000ba506 	.word	0x000ba506
   b5da8:	2003cf50 	.word	0x2003cf50
   b5dac:	2003cf40 	.word	0x2003cf40
   b5db0:	2003dc64 	.word	0x2003dc64
   b5db4:	2003d910 	.word	0x2003d910
   b5db8:	2003cf41 	.word	0x2003cf41
   b5dbc:	000ba5a6 	.word	0x000ba5a6
   b5dc0:	2003d918 	.word	0x2003d918
                Serial.println("Puerto no disponible");
   b5dc4:	f003 fb2e 	bl	b9424 <_Z16_fetch_usbserialv>
   b5dc8:	49a8      	ldr	r1, [pc, #672]	; (b606c <loop+0xaf8>)
   b5dca:	f003 f92a 	bl	b9022 <_ZN5Print7printlnEPKc>
   b5dce:	e692      	b.n	b5af6 <loop+0x582>
                if (!isValidActuador(deviceState, deviceID)) {
   b5dd0:	4639      	mov	r1, r7
   b5dd2:	4658      	mov	r0, fp
   b5dd4:	f7ff f8e0 	bl	b4f98 <_Z15isValidActuadorii>
   b5dd8:	b958      	cbnz	r0, b5df2 <loop+0x87e>
                  Serial.println("Invalid Actuador");
   b5dda:	f003 fb23 	bl	b9424 <_Z16_fetch_usbserialv>
   b5dde:	49a4      	ldr	r1, [pc, #656]	; (b6070 <loop+0xafc>)
   b5de0:	f003 f91f 	bl	b9022 <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b5de4:	49a3      	ldr	r1, [pc, #652]	; (b6074 <loop+0xb00>)
   b5de6:	a8c6      	add	r0, sp, #792	; 0x318
   b5de8:	f003 f84d 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5dec:	aac6      	add	r2, sp, #792	; 0x318
   b5dee:	2106      	movs	r1, #6
   b5df0:	e6d8      	b.n	b5ba4 <loop+0x630>
                } else if(!ELSE_pasado) {
   b5df2:	4ba1      	ldr	r3, [pc, #644]	; (b6078 <loop+0xb04>)
   b5df4:	781b      	ldrb	r3, [r3, #0]
   b5df6:	2b00      	cmp	r3, #0
   b5df8:	f47f ae7d 	bne.w	b5af6 <loop+0x582>
                  Serial.println("Se esperaba ELSE tag");
   b5dfc:	f003 fb12 	bl	b9424 <_Z16_fetch_usbserialv>
   b5e00:	499e      	ldr	r1, [pc, #632]	; (b607c <loop+0xb08>)
   b5e02:	e6ba      	b.n	b5b7a <loop+0x606>
            Serial.println("IF detectado");
   b5e04:	f003 fb0e 	bl	b9424 <_Z16_fetch_usbserialv>
   b5e08:	499d      	ldr	r1, [pc, #628]	; (b6080 <loop+0xb0c>)
   b5e0a:	f003 f90a 	bl	b9022 <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5e0e:	f8da 3000 	ldr.w	r3, [sl]
   b5e12:	1c5a      	adds	r2, r3, #1
   b5e14:	d004      	beq.n	b5e20 <loop+0x8ac>
   b5e16:	bb3b      	cbnz	r3, b5e68 <loop+0x8f4>
   b5e18:	f8d8 2000 	ldr.w	r2, [r8]
   b5e1c:	2a00      	cmp	r2, #0
   b5e1e:	dd23      	ble.n	b5e68 <loop+0x8f4>
              IF_pasado = true;
   b5e20:	4a98      	ldr	r2, [pc, #608]	; (b6084 <loop+0xb10>)
   b5e22:	2101      	movs	r1, #1
   b5e24:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b5e26:	4a98      	ldr	r2, [pc, #608]	; (b6088 <loop+0xb14>)
              showBitmap(3,0,"IF");
   b5e28:	4998      	ldr	r1, [pc, #608]	; (b608c <loop+0xb18>)
              THEN_pasado = false;
   b5e2a:	2700      	movs	r7, #0
   b5e2c:	7017      	strb	r7, [r2, #0]
              ELSE_pasado = false;
   b5e2e:	4a92      	ldr	r2, [pc, #584]	; (b6078 <loop+0xb04>)
              numCondicionalesBloque = 0;
   b5e30:	f8cb 7000 	str.w	r7, [fp]
              ELSE_pasado = false;
   b5e34:	7017      	strb	r7, [r2, #0]
              puertoAnalogico_bloque = 0;
   b5e36:	4a96      	ldr	r2, [pc, #600]	; (b6090 <loop+0xb1c>)
              numSensoresBloque = 0;
   b5e38:	f8c9 7000 	str.w	r7, [r9]
              puertoAnalogico_bloque = 0;
   b5e3c:	6017      	str	r7, [r2, #0]
              puertoDigital_bloque = 0;
   b5e3e:	4a95      	ldr	r2, [pc, #596]	; (b6094 <loop+0xb20>)
              numActuadoresBloque = 0;
   b5e40:	f8c8 7000 	str.w	r7, [r8]
              numBloque++;
   b5e44:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b5e46:	6017      	str	r7, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b5e48:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b5e4c:	f8ca 3000 	str.w	r3, [sl]
              bloques[numBloque] = nuevoBloque;
   b5e50:	4353      	muls	r3, r2
   b5e52:	18ea      	adds	r2, r5, r3
   b5e54:	50ef      	str	r7, [r5, r3]
   b5e56:	f8c2 7144 	str.w	r7, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b5e5a:	a8c6      	add	r0, sp, #792	; 0x318
   b5e5c:	f003 f813 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5e60:	aac6      	add	r2, sp, #792	; 0x318
   b5e62:	2100      	movs	r1, #0
   b5e64:	2003      	movs	r0, #3
   b5e66:	e69e      	b.n	b5ba6 <loop+0x632>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5e68:	f003 fadc 	bl	b9424 <_Z16_fetch_usbserialv>
   b5e6c:	498a      	ldr	r1, [pc, #552]	; (b6098 <loop+0xb24>)
   b5e6e:	e684      	b.n	b5b7a <loop+0x606>
            Serial.println("AND/OR detectado");
   b5e70:	f003 fad8 	bl	b9424 <_Z16_fetch_usbserialv>
   b5e74:	4989      	ldr	r1, [pc, #548]	; (b609c <loop+0xb28>)
   b5e76:	f003 f8d4 	bl	b9022 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b5e7a:	4b82      	ldr	r3, [pc, #520]	; (b6084 <loop+0xb10>)
   b5e7c:	781b      	ldrb	r3, [r3, #0]
   b5e7e:	2b00      	cmp	r3, #0
   b5e80:	f43f ae61 	beq.w	b5b46 <loop+0x5d2>
   b5e84:	f8db 3000 	ldr.w	r3, [fp]
   b5e88:	f8d9 2000 	ldr.w	r2, [r9]
   b5e8c:	4293      	cmp	r3, r2
   b5e8e:	da1a      	bge.n	b5ec6 <loop+0x952>
   b5e90:	f8d8 7000 	ldr.w	r7, [r8]
   b5e94:	b9cf      	cbnz	r7, b5eca <loop+0x956>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5e96:	f8da 2000 	ldr.w	r2, [sl]
   b5e9a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b5e9e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5ea2:	fb01 5202 	mla	r2, r1, r2, r5
   b5ea6:	f1b8 0f00 	cmp.w	r8, #0
   b5eaa:	441a      	add	r2, r3
   b5eac:	bf14      	ite	ne
   b5eae:	2101      	movne	r1, #1
   b5eb0:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b5eb2:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5eb6:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b5eba:	f8cb 3000 	str.w	r3, [fp]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b5ebe:	bf0c      	ite	eq
   b5ec0:	4977      	ldreq	r1, [pc, #476]	; (b60a0 <loop+0xb2c>)
   b5ec2:	4978      	ldrne	r1, [pc, #480]	; (b60a4 <loop+0xb30>)
   b5ec4:	e7c9      	b.n	b5e5a <loop+0x8e6>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b5ec6:	f73f ae16 	bgt.w	b5af6 <loop+0x582>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5eca:	f003 faab 	bl	b9424 <_Z16_fetch_usbserialv>
   b5ece:	4976      	ldr	r1, [pc, #472]	; (b60a8 <loop+0xb34>)
   b5ed0:	e653      	b.n	b5b7a <loop+0x606>
            Serial.println("THEN detectado");
   b5ed2:	f003 faa7 	bl	b9424 <_Z16_fetch_usbserialv>
   b5ed6:	4975      	ldr	r1, [pc, #468]	; (b60ac <loop+0xb38>)
   b5ed8:	f003 f8a3 	bl	b9022 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b5edc:	4b69      	ldr	r3, [pc, #420]	; (b6084 <loop+0xb10>)
   b5ede:	781b      	ldrb	r3, [r3, #0]
   b5ee0:	2b00      	cmp	r3, #0
   b5ee2:	f43f ae30 	beq.w	b5b46 <loop+0x5d2>
   b5ee6:	f8d9 3000 	ldr.w	r3, [r9]
   b5eea:	2b00      	cmp	r3, #0
   b5eec:	dd08      	ble.n	b5f00 <loop+0x98c>
   b5eee:	f8db 2000 	ldr.w	r2, [fp]
   b5ef2:	4293      	cmp	r3, r2
   b5ef4:	dd04      	ble.n	b5f00 <loop+0x98c>
              THEN_pasado = true;
   b5ef6:	4b64      	ldr	r3, [pc, #400]	; (b6088 <loop+0xb14>)
              showBitmap(3,0,"THEN");
   b5ef8:	496d      	ldr	r1, [pc, #436]	; (b60b0 <loop+0xb3c>)
              THEN_pasado = true;
   b5efa:	2201      	movs	r2, #1
   b5efc:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b5efe:	e7ac      	b.n	b5e5a <loop+0x8e6>
                Serial.println("Numero de sensores infucientes");
   b5f00:	f003 fa90 	bl	b9424 <_Z16_fetch_usbserialv>
   b5f04:	496b      	ldr	r1, [pc, #428]	; (b60b4 <loop+0xb40>)
   b5f06:	e638      	b.n	b5b7a <loop+0x606>
            Serial.println("ELSE detectado");
   b5f08:	f003 fa8c 	bl	b9424 <_Z16_fetch_usbserialv>
   b5f0c:	496a      	ldr	r1, [pc, #424]	; (b60b8 <loop+0xb44>)
   b5f0e:	f003 f888 	bl	b9022 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b5f12:	4b5c      	ldr	r3, [pc, #368]	; (b6084 <loop+0xb10>)
   b5f14:	781b      	ldrb	r3, [r3, #0]
   b5f16:	2b00      	cmp	r3, #0
   b5f18:	f43f ae15 	beq.w	b5b46 <loop+0x5d2>
   b5f1c:	f8d8 3000 	ldr.w	r3, [r8]
   b5f20:	2b00      	cmp	r3, #0
   b5f22:	dd04      	ble.n	b5f2e <loop+0x9ba>
              ELSE_pasado = true;
   b5f24:	4b54      	ldr	r3, [pc, #336]	; (b6078 <loop+0xb04>)
              showBitmap(3,0,"ELSE");
   b5f26:	4965      	ldr	r1, [pc, #404]	; (b60bc <loop+0xb48>)
              ELSE_pasado = true;
   b5f28:	2201      	movs	r2, #1
   b5f2a:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b5f2c:	e795      	b.n	b5e5a <loop+0x8e6>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5f2e:	f003 fa79 	bl	b9424 <_Z16_fetch_usbserialv>
   b5f32:	4963      	ldr	r1, [pc, #396]	; (b60c0 <loop+0xb4c>)
   b5f34:	e621      	b.n	b5b7a <loop+0x606>
        if ( tagInfo[0] != -1 ) {
   b5f36:	3501      	adds	r5, #1
   b5f38:	f43f ad14 	beq.w	b5964 <loop+0x3f0>
          Serial.println("Tarjeta inválida para este modo");
   b5f3c:	f003 fa72 	bl	b9424 <_Z16_fetch_usbserialv>
   b5f40:	4960      	ldr	r1, [pc, #384]	; (b60c4 <loop+0xb50>)
   b5f42:	f003 f86e 	bl	b9022 <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b5f46:	494b      	ldr	r1, [pc, #300]	; (b6074 <loop+0xb00>)
   b5f48:	a8c6      	add	r0, sp, #792	; 0x318
   b5f4a:	f002 ff9c 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b5f4e:	aac6      	add	r2, sp, #792	; 0x318
   b5f50:	2100      	movs	r1, #0
   b5f52:	e54c      	b.n	b59ee <loop+0x47a>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b5f54:	2b01      	cmp	r3, #1
   b5f56:	f47f ad16 	bne.w	b5986 <loop+0x412>
        valor = makeEvaluate(bloques[0]);
   b5f5a:	4c5b      	ldr	r4, [pc, #364]	; (b60c8 <loop+0xb54>)
   b5f5c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5f60:	f104 0110 	add.w	r1, r4, #16
   b5f64:	4668      	mov	r0, sp
   b5f66:	f003 ff3b 	bl	b9de0 <memcpy>
   b5f6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5f6e:	f7ff f895 	bl	b509c <_Z12makeEvaluate6BLOQUE>
   b5f72:	4c56      	ldr	r4, [pc, #344]	; (b60cc <loop+0xb58>)
        ejecutarEvaluacion(valor, 0);
   b5f74:	2100      	movs	r1, #0
        valor = makeEvaluate(bloques[0]);
   b5f76:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 0);
   b5f78:	f7ff f8ba 	bl	b50f0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b5f7c:	7823      	ldrb	r3, [r4, #0]
   b5f7e:	2b00      	cmp	r3, #0
   b5f80:	d034      	beq.n	b5fec <loop+0xa78>
   b5f82:	4953      	ldr	r1, [pc, #332]	; (b60d0 <loop+0xb5c>)
   b5f84:	4853      	ldr	r0, [pc, #332]	; (b60d4 <loop+0xb60>)
   b5f86:	f003 ff7f 	bl	b9e88 <strcpy>
        display.println(buf);
   b5f8a:	4952      	ldr	r1, [pc, #328]	; (b60d4 <loop+0xb60>)
   b5f8c:	4852      	ldr	r0, [pc, #328]	; (b60d8 <loop+0xb64>)
   b5f8e:	f003 f848 	bl	b9022 <_ZN5Print7printlnEPKc>
      if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b5f92:	682d      	ldr	r5, [r5, #0]
   b5f94:	2d01      	cmp	r5, #1
   b5f96:	d11f      	bne.n	b5fd8 <loop+0xa64>
   b5f98:	4c4b      	ldr	r4, [pc, #300]	; (b60c8 <loop+0xb54>)
   b5f9a:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b5f9e:	2b00      	cmp	r3, #0
   b5fa0:	dd28      	ble.n	b5ff4 <loop+0xa80>
        valor = makeEvaluate(bloques[1]);
   b5fa2:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b5fa6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5faa:	4668      	mov	r0, sp
   b5fac:	f003 ff18 	bl	b9de0 <memcpy>
   b5fb0:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b5fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5fb6:	f7ff f871 	bl	b509c <_Z12makeEvaluate6BLOQUE>
   b5fba:	4c44      	ldr	r4, [pc, #272]	; (b60cc <loop+0xb58>)
        ejecutarEvaluacion(valor, 1);
   b5fbc:	4629      	mov	r1, r5
        valor = makeEvaluate(bloques[1]);
   b5fbe:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 1);
   b5fc0:	f7ff f896 	bl	b50f0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b5fc4:	7823      	ldrb	r3, [r4, #0]
   b5fc6:	b19b      	cbz	r3, b5ff0 <loop+0xa7c>
   b5fc8:	4944      	ldr	r1, [pc, #272]	; (b60dc <loop+0xb68>)
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b5fca:	4842      	ldr	r0, [pc, #264]	; (b60d4 <loop+0xb60>)
   b5fcc:	f003 ff5c 	bl	b9e88 <strcpy>
        display.print(buf);
   b5fd0:	4940      	ldr	r1, [pc, #256]	; (b60d4 <loop+0xb60>)
   b5fd2:	4841      	ldr	r0, [pc, #260]	; (b60d8 <loop+0xb64>)
   b5fd4:	f003 f812 	bl	b8ffc <_ZN5Print5printEPKc>
      display.display();
   b5fd8:	4c3f      	ldr	r4, [pc, #252]	; (b60d8 <loop+0xb64>)
   b5fda:	4620      	mov	r0, r4
   b5fdc:	f002 f9c0 	bl	b8360 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	f001 ff55 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b5fe6:	2300      	movs	r3, #0
   b5fe8:	6123      	str	r3, [r4, #16]
   b5fea:	e4a3      	b.n	b5934 <loop+0x3c0>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b5fec:	493c      	ldr	r1, [pc, #240]	; (b60e0 <loop+0xb6c>)
   b5fee:	e7c9      	b.n	b5f84 <loop+0xa10>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b5ff0:	493c      	ldr	r1, [pc, #240]	; (b60e4 <loop+0xb70>)
   b5ff2:	e7ea      	b.n	b5fca <loop+0xa56>
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b5ff4:	493c      	ldr	r1, [pc, #240]	; (b60e8 <loop+0xb74>)
   b5ff6:	e7e8      	b.n	b5fca <loop+0xa56>
    switch (tagInfo[0])
   b5ff8:	2d02      	cmp	r5, #2
   b5ffa:	d07f      	beq.n	b60fc <loop+0xb88>
   b5ffc:	2d06      	cmp	r5, #6
   b5ffe:	f040 8161 	bne.w	b62c4 <loop+0xd50>
      switch (tagInfo[1])
   b6002:	6860      	ldr	r0, [r4, #4]
   b6004:	2801      	cmp	r0, #1
   b6006:	d014      	beq.n	b6032 <loop+0xabe>
   b6008:	2802      	cmp	r0, #2
   b600a:	d020      	beq.n	b604e <loop+0xada>
   b600c:	b928      	cbnz	r0, b601a <loop+0xaa6>
          cambioModo(tagInfo[2]);
   b600e:	68a0      	ldr	r0, [r4, #8]
   b6010:	f7ff f8a0 	bl	b5154 <_Z10cambioModoi>
          resetFunc();
   b6014:	4b35      	ldr	r3, [pc, #212]	; (b60ec <loop+0xb78>)
   b6016:	681b      	ldr	r3, [r3, #0]
   b6018:	4798      	blx	r3
    tagInfo[0] = -1;
   b601a:	f04f 33ff 	mov.w	r3, #4294967295
   b601e:	6023      	str	r3, [r4, #0]
    if (play) {
   b6020:	7833      	ldrb	r3, [r6, #0]
   b6022:	2b00      	cmp	r3, #0
   b6024:	f43f ac86 	beq.w	b5934 <loop+0x3c0>
      reproducir();
   b6028:	f7fe ff1e 	bl	b4e68 <_Z10reproducirv>
      play = false;
   b602c:	2300      	movs	r3, #0
   b602e:	7033      	strb	r3, [r6, #0]
}
   b6030:	e480      	b.n	b5934 <loop+0x3c0>
          showBitmap(3,0,"Ejecutando...");   
   b6032:	492f      	ldr	r1, [pc, #188]	; (b60f0 <loop+0xb7c>)
          play = true;
   b6034:	7030      	strb	r0, [r6, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b6036:	a8c6      	add	r0, sp, #792	; 0x318
   b6038:	f002 ff25 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b603c:	aac6      	add	r2, sp, #792	; 0x318
   b603e:	2100      	movs	r1, #0
   b6040:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b6042:	f7fe fc71 	bl	b4928 <_Z10showBitmapii6String>
   b6046:	a8c6      	add	r0, sp, #792	; 0x318
   b6048:	f002 fed2 	bl	b8df0 <_ZN6StringD1Ev>
   b604c:	e7e5      	b.n	b601a <loop+0xaa6>
          if ( tagInfo[2] == 0 ) {
   b604e:	68a5      	ldr	r5, [r4, #8]
   b6050:	b91d      	cbnz	r5, b605a <loop+0xae6>
            borradoPOP();
   b6052:	f7fe fe33 	bl	b4cbc <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b6056:	4927      	ldr	r1, [pc, #156]	; (b60f4 <loop+0xb80>)
   b6058:	e7ed      	b.n	b6036 <loop+0xac2>
          } else if ( tagInfo[2] == 1 ){
   b605a:	2d01      	cmp	r5, #1
   b605c:	d103      	bne.n	b6066 <loop+0xaf2>
            borradoALL(2);
   b605e:	f7fe fd71 	bl	b4b44 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b6062:	4925      	ldr	r1, [pc, #148]	; (b60f8 <loop+0xb84>)
   b6064:	e7e7      	b.n	b6036 <loop+0xac2>
            borradoBLOQUE(2);
   b6066:	f7fe fd91 	bl	b4b8c <_Z13borradoBLOQUEi>
   b606a:	e7d6      	b.n	b601a <loop+0xaa6>
   b606c:	000ba1b1 	.word	0x000ba1b1
   b6070:	000ba5bb 	.word	0x000ba5bb
   b6074:	000ba48b 	.word	0x000ba48b
   b6078:	2003cf40 	.word	0x2003cf40
   b607c:	000ba5cc 	.word	0x000ba5cc
   b6080:	000ba5e1 	.word	0x000ba5e1
   b6084:	2003cf41 	.word	0x2003cf41
   b6088:	2003cf50 	.word	0x2003cf50
   b608c:	000ba5ee 	.word	0x000ba5ee
   b6090:	2003dc6c 	.word	0x2003dc6c
   b6094:	2003dc70 	.word	0x2003dc70
   b6098:	000ba5f1 	.word	0x000ba5f1
   b609c:	000ba643 	.word	0x000ba643
   b60a0:	000ba593 	.word	0x000ba593
   b60a4:	000ba654 	.word	0x000ba654
   b60a8:	000ba658 	.word	0x000ba658
   b60ac:	000ba68a 	.word	0x000ba68a
   b60b0:	000ba699 	.word	0x000ba699
   b60b4:	000ba69e 	.word	0x000ba69e
   b60b8:	000ba6bd 	.word	0x000ba6bd
   b60bc:	000ba6cc 	.word	0x000ba6cc
   b60c0:	000ba6d1 	.word	0x000ba6d1
   b60c4:	000ba519 	.word	0x000ba519
   b60c8:	2003cf54 	.word	0x2003cf54
   b60cc:	2003e6b8 	.word	0x2003e6b8
   b60d0:	000ba762 	.word	0x000ba762
   b60d4:	2003d52d 	.word	0x2003d52d
   b60d8:	2003d578 	.word	0x2003d578
   b60dc:	000ba792 	.word	0x000ba792
   b60e0:	000ba771 	.word	0x000ba771
   b60e4:	000ba7a1 	.word	0x000ba7a1
   b60e8:	000ba7b1 	.word	0x000ba7b1
   b60ec:	2003dc74 	.word	0x2003dc74
   b60f0:	000ba7cb 	.word	0x000ba7cb
   b60f4:	000ba7d9 	.word	0x000ba7d9
   b60f8:	000ba4b6 	.word	0x000ba4b6
      switch (tagInfo[1])
   b60fc:	6867      	ldr	r7, [r4, #4]
   b60fe:	2f01      	cmp	r7, #1
   b6100:	d063      	beq.n	b61ca <loop+0xc56>
   b6102:	2f02      	cmp	r7, #2
   b6104:	f000 8095 	beq.w	b6232 <loop+0xcbe>
   b6108:	2f00      	cmp	r7, #0
   b610a:	d186      	bne.n	b601a <loop+0xaa6>
        showBitmap(3,0,decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b610c:	68a1      	ldr	r1, [r4, #8]
   b610e:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6110:	f7fe fe44 	bl	b4d9c <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6114:	a9ba      	add	r1, sp, #744	; 0x2e8
   b6116:	a8c2      	add	r0, sp, #776	; 0x308
   b6118:	f002 fed8 	bl	b8ecc <_ZN6StringC1ERKS_>
   b611c:	68e1      	ldr	r1, [r4, #12]
   b611e:	a8be      	add	r0, sp, #760	; 0x2f8
   b6120:	f7fe fe6e 	bl	b4e00 <_Z19decodificarTIPO_msgi>
   b6124:	a9be      	add	r1, sp, #760	; 0x2f8
   b6126:	a8c2      	add	r0, sp, #776	; 0x308
   b6128:	f002 ff17 	bl	b8f5a <_ZplRK15StringSumHelperRK6String>
   b612c:	4601      	mov	r1, r0
   b612e:	a8c6      	add	r0, sp, #792	; 0x318
   b6130:	f002 fecc 	bl	b8ecc <_ZN6StringC1ERKS_>
   b6134:	aac6      	add	r2, sp, #792	; 0x318
   b6136:	4639      	mov	r1, r7
   b6138:	2003      	movs	r0, #3
   b613a:	f7fe fbf5 	bl	b4928 <_Z10showBitmapii6String>
   b613e:	a8c6      	add	r0, sp, #792	; 0x318
   b6140:	f002 fe56 	bl	b8df0 <_ZN6StringD1Ev>
   b6144:	a8be      	add	r0, sp, #760	; 0x2f8
   b6146:	f002 fe53 	bl	b8df0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b614a:	a8c2      	add	r0, sp, #776	; 0x308
   b614c:	f002 fe50 	bl	b8df0 <_ZN6StringD1Ev>
   b6150:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6152:	f002 fe4d 	bl	b8df0 <_ZN6StringD1Ev>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b6156:	f003 f965 	bl	b9424 <_Z16_fetch_usbserialv>
   b615a:	68a1      	ldr	r1, [r4, #8]
   b615c:	4605      	mov	r5, r0
   b615e:	a8be      	add	r0, sp, #760	; 0x2f8
   b6160:	f7fe fe1c 	bl	b4d9c <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6164:	a9be      	add	r1, sp, #760	; 0x2f8
   b6166:	a8c6      	add	r0, sp, #792	; 0x318
   b6168:	f002 feb0 	bl	b8ecc <_ZN6StringC1ERKS_>
   b616c:	68e1      	ldr	r1, [r4, #12]
   b616e:	a8c2      	add	r0, sp, #776	; 0x308
   b6170:	f7fe fe46 	bl	b4e00 <_Z19decodificarTIPO_msgi>
   b6174:	a9c2      	add	r1, sp, #776	; 0x308
   b6176:	a8c6      	add	r0, sp, #792	; 0x318
   b6178:	f002 feef 	bl	b8f5a <_ZplRK15StringSumHelperRK6String>
   b617c:	6801      	ldr	r1, [r0, #0]
   b617e:	4628      	mov	r0, r5
   b6180:	f7fd ffcc 	bl	b411c <_ZN5Print8printlnfEPKcz>
   b6184:	a8c2      	add	r0, sp, #776	; 0x308
   b6186:	f002 fe33 	bl	b8df0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b618a:	a8c6      	add	r0, sp, #792	; 0x318
   b618c:	f002 fe30 	bl	b8df0 <_ZN6StringD1Ev>
   b6190:	a8be      	add	r0, sp, #760	; 0x2f8
   b6192:	f002 fe2d 	bl	b8df0 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b6196:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b619a:	f7fe fe4b 	bl	b4e34 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b619e:	4a51      	ldr	r2, [pc, #324]	; (b62e4 <loop+0xd70>)
   b61a0:	4951      	ldr	r1, [pc, #324]	; (b62e8 <loop+0xd74>)
   b61a2:	6813      	ldr	r3, [r2, #0]
   b61a4:	68a0      	ldr	r0, [r4, #8]
   b61a6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b61aa:	4950      	ldr	r1, [pc, #320]	; (b62ec <loop+0xd78>)
   b61ac:	68e0      	ldr	r0, [r4, #12]
   b61ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        posicion++;
   b61b2:	3301      	adds	r3, #1
   b61b4:	6013      	str	r3, [r2, #0]
        if (bucle) {
   b61b6:	4b4e      	ldr	r3, [pc, #312]	; (b62f0 <loop+0xd7c>)
   b61b8:	781b      	ldrb	r3, [r3, #0]
   b61ba:	2b00      	cmp	r3, #0
   b61bc:	f43f af2d 	beq.w	b601a <loop+0xaa6>
          tam_bucle++;
   b61c0:	4a4c      	ldr	r2, [pc, #304]	; (b62f4 <loop+0xd80>)
   b61c2:	6813      	ldr	r3, [r2, #0]
   b61c4:	3301      	adds	r3, #1
   b61c6:	6013      	str	r3, [r2, #0]
   b61c8:	e727      	b.n	b601a <loop+0xaa6>
        if (!bucle) {
   b61ca:	f8df 9124 	ldr.w	r9, [pc, #292]	; b62f0 <loop+0xd7c>
   b61ce:	f899 8000 	ldrb.w	r8, [r9]
   b61d2:	f1b8 0f00 	cmp.w	r8, #0
   b61d6:	d11f      	bne.n	b6218 <loop+0xca4>
          Serial.println("Loop");
   b61d8:	f003 f924 	bl	b9424 <_Z16_fetch_usbserialv>
   b61dc:	4946      	ldr	r1, [pc, #280]	; (b62f8 <loop+0xd84>)
   b61de:	f002 ff20 	bl	b9022 <_ZN5Print7printlnEPKc>
          showBitmap(3,0,"Loop");
   b61e2:	4945      	ldr	r1, [pc, #276]	; (b62f8 <loop+0xd84>)
   b61e4:	a8c6      	add	r0, sp, #792	; 0x318
   b61e6:	f002 fe4e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ea:	aac6      	add	r2, sp, #792	; 0x318
   b61ec:	4641      	mov	r1, r8
   b61ee:	2003      	movs	r0, #3
   b61f0:	f7fe fb9a 	bl	b4928 <_Z10showBitmapii6String>
   b61f4:	a8c6      	add	r0, sp, #792	; 0x318
   b61f6:	f002 fdfb 	bl	b8df0 <_ZN6StringD1Ev>
          notas[posicion] = -1;
   b61fa:	4a3a      	ldr	r2, [pc, #232]	; (b62e4 <loop+0xd70>)
   b61fc:	493a      	ldr	r1, [pc, #232]	; (b62e8 <loop+0xd74>)
   b61fe:	6813      	ldr	r3, [r2, #0]
          bucle = true;
   b6200:	f889 7000 	strb.w	r7, [r9]
          notas[posicion] = -1;
   b6204:	f04f 30ff 	mov.w	r0, #4294967295
   b6208:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
          duraciones[posicion] = 0;
   b620c:	4937      	ldr	r1, [pc, #220]	; (b62ec <loop+0xd78>)
   b620e:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
          posicion++;
   b6212:	3301      	adds	r3, #1
   b6214:	6013      	str	r3, [r2, #0]
          bucle = true;
   b6216:	e700      	b.n	b601a <loop+0xaa6>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b6218:	f003 f904 	bl	b9424 <_Z16_fetch_usbserialv>
   b621c:	4937      	ldr	r1, [pc, #220]	; (b62fc <loop+0xd88>)
          Serial.println("Loop sin comenzar o sin contenido");
   b621e:	f002 ff00 	bl	b9022 <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b6222:	4937      	ldr	r1, [pc, #220]	; (b6300 <loop+0xd8c>)
   b6224:	a8c6      	add	r0, sp, #792	; 0x318
   b6226:	f002 fe2e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b622a:	aac6      	add	r2, sp, #792	; 0x318
   b622c:	2102      	movs	r1, #2
        showBitmap(2,0,"");
   b622e:	2002      	movs	r0, #2
   b6230:	e707      	b.n	b6042 <loop+0xace>
        if (bucle && tam_bucle>0) {
   b6232:	4f2f      	ldr	r7, [pc, #188]	; (b62f0 <loop+0xd7c>)
   b6234:	783b      	ldrb	r3, [r7, #0]
   b6236:	2b00      	cmp	r3, #0
   b6238:	d040      	beq.n	b62bc <loop+0xd48>
   b623a:	4d2e      	ldr	r5, [pc, #184]	; (b62f4 <loop+0xd80>)
   b623c:	682b      	ldr	r3, [r5, #0]
   b623e:	2b00      	cmp	r3, #0
   b6240:	dd3c      	ble.n	b62bc <loop+0xd48>
          Serial.println("END Loop");
   b6242:	f003 f8ef 	bl	b9424 <_Z16_fetch_usbserialv>
   b6246:	492f      	ldr	r1, [pc, #188]	; (b6304 <loop+0xd90>)
   b6248:	f002 feeb 	bl	b9022 <_ZN5Print7printlnEPKc>
          showBitmap(3,0,String(tagInfo[2]+2)+" iteraciones");
   b624c:	68a1      	ldr	r1, [r4, #8]
   b624e:	220a      	movs	r2, #10
   b6250:	3102      	adds	r1, #2
   b6252:	a8be      	add	r0, sp, #760	; 0x2f8
   b6254:	f002 fe57 	bl	b8f06 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b6258:	a9be      	add	r1, sp, #760	; 0x2f8
   b625a:	a8c2      	add	r0, sp, #776	; 0x308
   b625c:	f002 fe36 	bl	b8ecc <_ZN6StringC1ERKS_>
   b6260:	4929      	ldr	r1, [pc, #164]	; (b6308 <loop+0xd94>)
   b6262:	a8c2      	add	r0, sp, #776	; 0x308
   b6264:	f002 fe85 	bl	b8f72 <_ZplRK15StringSumHelperPKc>
   b6268:	4601      	mov	r1, r0
   b626a:	a8c6      	add	r0, sp, #792	; 0x318
   b626c:	f002 fe2e 	bl	b8ecc <_ZN6StringC1ERKS_>
   b6270:	aac6      	add	r2, sp, #792	; 0x318
   b6272:	2100      	movs	r1, #0
   b6274:	2003      	movs	r0, #3
   b6276:	f7fe fb57 	bl	b4928 <_Z10showBitmapii6String>
   b627a:	a8c6      	add	r0, sp, #792	; 0x318
   b627c:	f002 fdb8 	bl	b8df0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6280:	a8c2      	add	r0, sp, #776	; 0x308
   b6282:	f002 fdb5 	bl	b8df0 <_ZN6StringD1Ev>
   b6286:	a8be      	add	r0, sp, #760	; 0x2f8
   b6288:	f002 fdb2 	bl	b8df0 <_ZN6StringD1Ev>
          notas[posicion] = -2;
   b628c:	4815      	ldr	r0, [pc, #84]	; (b62e4 <loop+0xd70>)
   b628e:	4a16      	ldr	r2, [pc, #88]	; (b62e8 <loop+0xd74>)
   b6290:	6803      	ldr	r3, [r0, #0]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b6292:	f8df c058 	ldr.w	ip, [pc, #88]	; b62ec <loop+0xd78>
          notas[posicion] = -2;
   b6296:	f06f 0101 	mvn.w	r1, #1
   b629a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b629e:	682a      	ldr	r2, [r5, #0]
   b62a0:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b62a4:	68a1      	ldr	r1, [r4, #8]
   b62a6:	3201      	adds	r2, #1
   b62a8:	1a9a      	subs	r2, r3, r2
          posicion++;
   b62aa:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b62ac:	3102      	adds	r1, #2
          posicion++;
   b62ae:	6003      	str	r3, [r0, #0]
          bucle = false;
   b62b0:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b62b2:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
          bucle = false;
   b62b6:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b62b8:	602b      	str	r3, [r5, #0]
   b62ba:	e6ae      	b.n	b601a <loop+0xaa6>
          Serial.println("Loop sin comenzar o sin contenido");
   b62bc:	f003 f8b2 	bl	b9424 <_Z16_fetch_usbserialv>
   b62c0:	4912      	ldr	r1, [pc, #72]	; (b630c <loop+0xd98>)
   b62c2:	e7ac      	b.n	b621e <loop+0xcaa>
      if ( tagInfo[0] != -1 ) {
   b62c4:	3501      	adds	r5, #1
   b62c6:	f43f aea8 	beq.w	b601a <loop+0xaa6>
        Serial.println("Tarjeta inválida para este modo");
   b62ca:	f003 f8ab 	bl	b9424 <_Z16_fetch_usbserialv>
   b62ce:	4910      	ldr	r1, [pc, #64]	; (b6310 <loop+0xd9c>)
   b62d0:	f002 fea7 	bl	b9022 <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b62d4:	490a      	ldr	r1, [pc, #40]	; (b6300 <loop+0xd8c>)
   b62d6:	a8c6      	add	r0, sp, #792	; 0x318
   b62d8:	f002 fdd5 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b62dc:	aac6      	add	r2, sp, #792	; 0x318
   b62de:	2100      	movs	r1, #0
   b62e0:	e7a5      	b.n	b622e <loop+0xcba>
   b62e2:	bf00      	nop
   b62e4:	2003dc60 	.word	0x2003dc60
   b62e8:	2003d930 	.word	0x2003d930
   b62ec:	2003d5e8 	.word	0x2003d5e8
   b62f0:	2003d52c 	.word	0x2003d52c
   b62f4:	2003dc80 	.word	0x2003dc80
   b62f8:	000ba829 	.word	0x000ba829
   b62fc:	000ba7f0 	.word	0x000ba7f0
   b6300:	000ba48b 	.word	0x000ba48b
   b6304:	000ba825 	.word	0x000ba825
   b6308:	000ba82e 	.word	0x000ba82e
   b630c:	000ba83b 	.word	0x000ba83b
   b6310:	000ba519 	.word	0x000ba519

000b6314 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b6314:	2305      	movs	r3, #5
}
   b6316:	b570      	push	{r4, r5, r6, lr}
   b6318:	461a      	mov	r2, r3
   b631a:	2104      	movs	r1, #4
   b631c:	48a9      	ldr	r0, [pc, #676]	; (b65c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
String tarjetas[80] = { "2#0#1#0"};
   b631e:	4daa      	ldr	r5, [pc, #680]	; (b65c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b6320:	4eaa      	ldr	r6, [pc, #680]	; (b65cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b6322:	f002 f8b7 	bl	b8494 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b6326:	4baa      	ldr	r3, [pc, #680]	; (b65d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
Adafruit_SSD1306 display(-1);
   b6328:	48aa      	ldr	r0, [pc, #680]	; (b65d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b632a:	2400      	movs	r4, #0
   b632c:	601c      	str	r4, [r3, #0]
   b632e:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b6332:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b6336:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b633a:	f04f 31ff 	mov.w	r1, #4294967295
   b633e:	f001 fcb3 	bl	b7ca8 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b6342:	49a5      	ldr	r1, [pc, #660]	; (b65d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b6344:	48a5      	ldr	r0, [pc, #660]	; (b65dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b6346:	f002 fd9e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b634a:	49a3      	ldr	r1, [pc, #652]	; (b65d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b634c:	48a4      	ldr	r0, [pc, #656]	; (b65e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b634e:	f002 fd9a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[12] = { "0#2#0","0#3#0","0#4#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5" };
   b6352:	49a4      	ldr	r1, [pc, #656]	; (b65e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b6354:	48a4      	ldr	r0, [pc, #656]	; (b65e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b6356:	f002 fd96 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b635a:	49a4      	ldr	r1, [pc, #656]	; (b65ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b635c:	48a4      	ldr	r0, [pc, #656]	; (b65f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b635e:	f002 fd92 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6362:	49a4      	ldr	r1, [pc, #656]	; (b65f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b6364:	48a4      	ldr	r0, [pc, #656]	; (b65f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b6366:	f002 fd8e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b636a:	49a4      	ldr	r1, [pc, #656]	; (b65fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b636c:	48a4      	ldr	r0, [pc, #656]	; (b6600 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b636e:	f002 fd8a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6372:	49a4      	ldr	r1, [pc, #656]	; (b6604 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b6374:	48a4      	ldr	r0, [pc, #656]	; (b6608 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b6376:	f002 fd86 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b637a:	49a4      	ldr	r1, [pc, #656]	; (b660c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b637c:	48a4      	ldr	r0, [pc, #656]	; (b6610 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b637e:	f002 fd82 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6382:	49a4      	ldr	r1, [pc, #656]	; (b6614 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b6384:	48a4      	ldr	r0, [pc, #656]	; (b6618 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b6386:	f002 fd7e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b638a:	49a4      	ldr	r1, [pc, #656]	; (b661c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b638c:	48a4      	ldr	r0, [pc, #656]	; (b6620 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b638e:	f002 fd7a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6392:	49a4      	ldr	r1, [pc, #656]	; (b6624 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b6394:	48a4      	ldr	r0, [pc, #656]	; (b6628 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b6396:	f002 fd76 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b639a:	49a4      	ldr	r1, [pc, #656]	; (b662c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b639c:	48a4      	ldr	r0, [pc, #656]	; (b6630 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b639e:	f002 fd72 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63a2:	49a4      	ldr	r1, [pc, #656]	; (b6634 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b63a4:	48a4      	ldr	r0, [pc, #656]	; (b6638 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b63a6:	f002 fd6e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63aa:	4988      	ldr	r1, [pc, #544]	; (b65cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b63ac:	48a3      	ldr	r0, [pc, #652]	; (b663c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b63ae:	f002 fd6a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b63b2:	49a3      	ldr	r1, [pc, #652]	; (b6640 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b63b4:	48a3      	ldr	r0, [pc, #652]	; (b6644 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b63b6:	f002 fd66 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63ba:	49a3      	ldr	r1, [pc, #652]	; (b6648 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b63bc:	48a3      	ldr	r0, [pc, #652]	; (b664c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b63be:	f002 fd62 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63c2:	49a3      	ldr	r1, [pc, #652]	; (b6650 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b63c4:	48a3      	ldr	r0, [pc, #652]	; (b6654 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b63c6:	f002 fd5e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63ca:	49a3      	ldr	r1, [pc, #652]	; (b6658 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b63cc:	48a3      	ldr	r0, [pc, #652]	; (b665c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b63ce:	f002 fd5a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63d2:	49a3      	ldr	r1, [pc, #652]	; (b6660 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b63d4:	48a3      	ldr	r0, [pc, #652]	; (b6664 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b63d6:	f002 fd56 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63da:	49a3      	ldr	r1, [pc, #652]	; (b6668 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b63dc:	48a3      	ldr	r0, [pc, #652]	; (b666c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b63de:	f002 fd52 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63e2:	49a3      	ldr	r1, [pc, #652]	; (b6670 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b63e4:	48a3      	ldr	r0, [pc, #652]	; (b6674 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b63e6:	f002 fd4e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63ea:	49a3      	ldr	r1, [pc, #652]	; (b6678 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b63ec:	48a3      	ldr	r0, [pc, #652]	; (b667c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b63ee:	f002 fd4a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63f2:	49a3      	ldr	r1, [pc, #652]	; (b6680 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b63f4:	48a3      	ldr	r0, [pc, #652]	; (b6684 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b63f6:	f002 fd46 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b63fa:	49a3      	ldr	r1, [pc, #652]	; (b6688 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b63fc:	48a3      	ldr	r0, [pc, #652]	; (b668c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b63fe:	f002 fd42 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6402:	49a3      	ldr	r1, [pc, #652]	; (b6690 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b6404:	48a3      	ldr	r0, [pc, #652]	; (b6694 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b6406:	f002 fd3e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b640a:	49a3      	ldr	r1, [pc, #652]	; (b6698 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b640c:	48a3      	ldr	r0, [pc, #652]	; (b669c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b640e:	f002 fd3a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6412:	49a3      	ldr	r1, [pc, #652]	; (b66a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b6414:	48a3      	ldr	r0, [pc, #652]	; (b66a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b6416:	f002 fd36 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b641a:	49a3      	ldr	r1, [pc, #652]	; (b66a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b641c:	48a3      	ldr	r0, [pc, #652]	; (b66ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b641e:	f002 fd32 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6422:	49a3      	ldr	r1, [pc, #652]	; (b66b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b6424:	48a3      	ldr	r0, [pc, #652]	; (b66b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b6426:	f002 fd2e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b642a:	49a3      	ldr	r1, [pc, #652]	; (b66b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b642c:	48a3      	ldr	r0, [pc, #652]	; (b66bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b642e:	f002 fd2a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6432:	49a3      	ldr	r1, [pc, #652]	; (b66c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b6434:	48a3      	ldr	r0, [pc, #652]	; (b66c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b6436:	f002 fd26 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b643a:	49a3      	ldr	r1, [pc, #652]	; (b66c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b643c:	48a3      	ldr	r0, [pc, #652]	; (b66cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b643e:	f002 fd22 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6442:	49a3      	ldr	r1, [pc, #652]	; (b66d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b6444:	48a3      	ldr	r0, [pc, #652]	; (b66d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b6446:	f002 fd1e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b644a:	49a3      	ldr	r1, [pc, #652]	; (b66d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b644c:	48a3      	ldr	r0, [pc, #652]	; (b66dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b644e:	f002 fd1a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6452:	49a3      	ldr	r1, [pc, #652]	; (b66e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b6454:	48a3      	ldr	r0, [pc, #652]	; (b66e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b6456:	f002 fd16 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b645a:	49a3      	ldr	r1, [pc, #652]	; (b66e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b645c:	48a3      	ldr	r0, [pc, #652]	; (b66ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b645e:	f002 fd12 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6462:	49a3      	ldr	r1, [pc, #652]	; (b66f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b6464:	48a3      	ldr	r0, [pc, #652]	; (b66f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b6466:	f002 fd0e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b646a:	49a3      	ldr	r1, [pc, #652]	; (b66f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b646c:	48a3      	ldr	r0, [pc, #652]	; (b66fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b646e:	f002 fd0a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6472:	49a3      	ldr	r1, [pc, #652]	; (b6700 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b6474:	48a3      	ldr	r0, [pc, #652]	; (b6704 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b6476:	f002 fd06 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b647a:	49a3      	ldr	r1, [pc, #652]	; (b6708 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b647c:	48a3      	ldr	r0, [pc, #652]	; (b670c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b647e:	f002 fd02 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6482:	49a3      	ldr	r1, [pc, #652]	; (b6710 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b6484:	48a3      	ldr	r0, [pc, #652]	; (b6714 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b6486:	f002 fcfe 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b648a:	49a3      	ldr	r1, [pc, #652]	; (b6718 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b648c:	48a3      	ldr	r0, [pc, #652]	; (b671c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b648e:	f002 fcfa 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b6492:	49a3      	ldr	r1, [pc, #652]	; (b6720 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b6494:	48a3      	ldr	r0, [pc, #652]	; (b6724 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b6496:	f002 fcf6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b649a:	49a3      	ldr	r1, [pc, #652]	; (b6728 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b649c:	48a3      	ldr	r0, [pc, #652]	; (b672c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b649e:	f002 fcf2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64a2:	49a3      	ldr	r1, [pc, #652]	; (b6730 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b64a4:	48a3      	ldr	r0, [pc, #652]	; (b6734 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b64a6:	f002 fcee 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64aa:	49a3      	ldr	r1, [pc, #652]	; (b6738 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b64ac:	48a3      	ldr	r0, [pc, #652]	; (b673c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b64ae:	f002 fcea 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64b2:	49a3      	ldr	r1, [pc, #652]	; (b6740 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b64b4:	48a3      	ldr	r0, [pc, #652]	; (b6744 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b64b6:	f002 fce6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64ba:	49a3      	ldr	r1, [pc, #652]	; (b6748 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b64bc:	48a3      	ldr	r0, [pc, #652]	; (b674c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b64be:	f002 fce2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64c2:	49a3      	ldr	r1, [pc, #652]	; (b6750 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b64c4:	48a3      	ldr	r0, [pc, #652]	; (b6754 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b64c6:	f002 fcde 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64ca:	49a3      	ldr	r1, [pc, #652]	; (b6758 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b64cc:	48a3      	ldr	r0, [pc, #652]	; (b675c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b64ce:	f002 fcda 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64d2:	49a3      	ldr	r1, [pc, #652]	; (b6760 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b64d4:	48a3      	ldr	r0, [pc, #652]	; (b6764 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b64d6:	f002 fcd6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64da:	49a3      	ldr	r1, [pc, #652]	; (b6768 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b64dc:	48a3      	ldr	r0, [pc, #652]	; (b676c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b64de:	f002 fcd2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64e2:	49a3      	ldr	r1, [pc, #652]	; (b6770 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b64e4:	48a3      	ldr	r0, [pc, #652]	; (b6774 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b64e6:	f002 fcce 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64ea:	49a3      	ldr	r1, [pc, #652]	; (b6778 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b64ec:	48a3      	ldr	r0, [pc, #652]	; (b677c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b64ee:	f002 fcca 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64f2:	49a3      	ldr	r1, [pc, #652]	; (b6780 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b64f4:	48a3      	ldr	r0, [pc, #652]	; (b6784 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b64f6:	f002 fcc6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b64fa:	49a3      	ldr	r1, [pc, #652]	; (b6788 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b64fc:	48a3      	ldr	r0, [pc, #652]	; (b678c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b64fe:	f002 fcc2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6502:	49a3      	ldr	r1, [pc, #652]	; (b6790 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b6504:	48a3      	ldr	r0, [pc, #652]	; (b6794 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b6506:	f002 fcbe 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b650a:	49a3      	ldr	r1, [pc, #652]	; (b6798 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b650c:	48a3      	ldr	r0, [pc, #652]	; (b679c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b650e:	f002 fcba 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6512:	49a3      	ldr	r1, [pc, #652]	; (b67a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b6514:	48a3      	ldr	r0, [pc, #652]	; (b67a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b6516:	f002 fcb6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b651a:	49a3      	ldr	r1, [pc, #652]	; (b67a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b651c:	48a3      	ldr	r0, [pc, #652]	; (b67ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b651e:	f002 fcb2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6522:	49a3      	ldr	r1, [pc, #652]	; (b67b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b6524:	48a3      	ldr	r0, [pc, #652]	; (b67b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b6526:	f002 fcae 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b652a:	49a3      	ldr	r1, [pc, #652]	; (b67b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b652c:	48a3      	ldr	r0, [pc, #652]	; (b67bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b652e:	f002 fcaa 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6532:	49a3      	ldr	r1, [pc, #652]	; (b67c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b6534:	48a3      	ldr	r0, [pc, #652]	; (b67c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b6536:	f002 fca6 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b653a:	49a3      	ldr	r1, [pc, #652]	; (b67c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b653c:	48a3      	ldr	r0, [pc, #652]	; (b67cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b653e:	f002 fca2 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6542:	49a3      	ldr	r1, [pc, #652]	; (b67d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b6544:	48a3      	ldr	r0, [pc, #652]	; (b67d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b6546:	f002 fc9e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b654a:	49a3      	ldr	r1, [pc, #652]	; (b67d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b654c:	48a3      	ldr	r0, [pc, #652]	; (b67dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c8>)
   b654e:	f002 fc9a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6552:	49a3      	ldr	r1, [pc, #652]	; (b67e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4cc>)
   b6554:	48a3      	ldr	r0, [pc, #652]	; (b67e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d0>)
   b6556:	f002 fc96 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b655a:	49a3      	ldr	r1, [pc, #652]	; (b67e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d4>)
   b655c:	48a3      	ldr	r0, [pc, #652]	; (b67ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d8>)
   b655e:	f002 fc92 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6562:	49a3      	ldr	r1, [pc, #652]	; (b67f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4dc>)
   b6564:	48a3      	ldr	r0, [pc, #652]	; (b67f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e0>)
   b6566:	f002 fc8e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b656a:	49a3      	ldr	r1, [pc, #652]	; (b67f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e4>)
   b656c:	48a3      	ldr	r0, [pc, #652]	; (b67fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e8>)
   b656e:	f002 fc8a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6572:	49a3      	ldr	r1, [pc, #652]	; (b6800 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ec>)
   b6574:	48a3      	ldr	r0, [pc, #652]	; (b6804 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f0>)
   b6576:	f002 fc86 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b657a:	49a3      	ldr	r1, [pc, #652]	; (b6808 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f4>)
   b657c:	48a3      	ldr	r0, [pc, #652]	; (b680c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f8>)
   b657e:	f002 fc82 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6582:	49a3      	ldr	r1, [pc, #652]	; (b6810 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4fc>)
   b6584:	48a3      	ldr	r0, [pc, #652]	; (b6814 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x500>)
   b6586:	f002 fc7e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b658a:	49a3      	ldr	r1, [pc, #652]	; (b6818 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x504>)
   b658c:	48a3      	ldr	r0, [pc, #652]	; (b681c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x508>)
   b658e:	f002 fc7a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6592:	49a3      	ldr	r1, [pc, #652]	; (b6820 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x50c>)
   b6594:	48a3      	ldr	r0, [pc, #652]	; (b6824 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x510>)
   b6596:	f002 fc76 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b659a:	49a3      	ldr	r1, [pc, #652]	; (b6828 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x514>)
   b659c:	48a3      	ldr	r0, [pc, #652]	; (b682c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x518>)
   b659e:	f002 fc72 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b65a2:	490a      	ldr	r1, [pc, #40]	; (b65cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b65a4:	48a2      	ldr	r0, [pc, #648]	; (b6830 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x51c>)
   b65a6:	f002 fc6e 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b65aa:	49a2      	ldr	r1, [pc, #648]	; (b6834 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x520>)
   b65ac:	48a2      	ldr	r0, [pc, #648]	; (b6838 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x524>)
   b65ae:	f002 fc6a 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b65b2:	49a2      	ldr	r1, [pc, #648]	; (b683c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x528>)
   b65b4:	48a2      	ldr	r0, [pc, #648]	; (b6840 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x52c>)
   b65b6:	f002 fc66 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b65ba:	49a2      	ldr	r1, [pc, #648]	; (b6844 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x530>)
   b65bc:	48a2      	ldr	r0, [pc, #648]	; (b6848 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x534>)
   b65be:	f002 fc62 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b65c2:	e143      	b.n	b684c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x538>
   b65c4:	2003d918 	.word	0x2003d918
   b65c8:	2003dc94 	.word	0x2003dc94
   b65cc:	000ba48b 	.word	0x000ba48b
   b65d0:	2003cf54 	.word	0x2003cf54
   b65d4:	2003d578 	.word	0x2003d578
   b65d8:	000ba85d 	.word	0x000ba85d
   b65dc:	2003d5c8 	.word	0x2003d5c8
   b65e0:	2003d5d8 	.word	0x2003d5d8
   b65e4:	000ba8b7 	.word	0x000ba8b7
   b65e8:	2003e3c4 	.word	0x2003e3c4
   b65ec:	000ba8cb 	.word	0x000ba8cb
   b65f0:	2003e3d4 	.word	0x2003e3d4
   b65f4:	000ba9fb 	.word	0x000ba9fb
   b65f8:	2003e3e4 	.word	0x2003e3e4
   b65fc:	000ba85f 	.word	0x000ba85f
   b6600:	2003e3f4 	.word	0x2003e3f4
   b6604:	000ba867 	.word	0x000ba867
   b6608:	2003e404 	.word	0x2003e404
   b660c:	000ba86f 	.word	0x000ba86f
   b6610:	2003e414 	.word	0x2003e414
   b6614:	000ba877 	.word	0x000ba877
   b6618:	2003e424 	.word	0x2003e424
   b661c:	000ba87f 	.word	0x000ba87f
   b6620:	2003e434 	.word	0x2003e434
   b6624:	000ba887 	.word	0x000ba887
   b6628:	2003e444 	.word	0x2003e444
   b662c:	000ba88f 	.word	0x000ba88f
   b6630:	2003e454 	.word	0x2003e454
   b6634:	000ba897 	.word	0x000ba897
   b6638:	2003e464 	.word	0x2003e464
   b663c:	2003e474 	.word	0x2003e474
   b6640:	000ba89f 	.word	0x000ba89f
   b6644:	2003e204 	.word	0x2003e204
   b6648:	000ba8a9 	.word	0x000ba8a9
   b664c:	2003e214 	.word	0x2003e214
   b6650:	000ba8b3 	.word	0x000ba8b3
   b6654:	2003e224 	.word	0x2003e224
   b6658:	000ba8bd 	.word	0x000ba8bd
   b665c:	2003e234 	.word	0x2003e234
   b6660:	000ba8c7 	.word	0x000ba8c7
   b6664:	2003e244 	.word	0x2003e244
   b6668:	000ba8d1 	.word	0x000ba8d1
   b666c:	2003e254 	.word	0x2003e254
   b6670:	000ba8db 	.word	0x000ba8db
   b6674:	2003e264 	.word	0x2003e264
   b6678:	000ba8e5 	.word	0x000ba8e5
   b667c:	2003e274 	.word	0x2003e274
   b6680:	000ba8ef 	.word	0x000ba8ef
   b6684:	2003e284 	.word	0x2003e284
   b6688:	000ba8f9 	.word	0x000ba8f9
   b668c:	2003e294 	.word	0x2003e294
   b6690:	000ba903 	.word	0x000ba903
   b6694:	2003e2a4 	.word	0x2003e2a4
   b6698:	000ba90d 	.word	0x000ba90d
   b669c:	2003e2b4 	.word	0x2003e2b4
   b66a0:	000ba917 	.word	0x000ba917
   b66a4:	2003e2c4 	.word	0x2003e2c4
   b66a8:	000ba921 	.word	0x000ba921
   b66ac:	2003e2d4 	.word	0x2003e2d4
   b66b0:	000ba92b 	.word	0x000ba92b
   b66b4:	2003e2e4 	.word	0x2003e2e4
   b66b8:	000ba935 	.word	0x000ba935
   b66bc:	2003e2f4 	.word	0x2003e2f4
   b66c0:	000ba93f 	.word	0x000ba93f
   b66c4:	2003e304 	.word	0x2003e304
   b66c8:	000ba949 	.word	0x000ba949
   b66cc:	2003e314 	.word	0x2003e314
   b66d0:	000ba953 	.word	0x000ba953
   b66d4:	2003e324 	.word	0x2003e324
   b66d8:	000ba95d 	.word	0x000ba95d
   b66dc:	2003e334 	.word	0x2003e334
   b66e0:	000ba967 	.word	0x000ba967
   b66e4:	2003e344 	.word	0x2003e344
   b66e8:	000ba971 	.word	0x000ba971
   b66ec:	2003e354 	.word	0x2003e354
   b66f0:	000ba97b 	.word	0x000ba97b
   b66f4:	2003e364 	.word	0x2003e364
   b66f8:	000ba883 	.word	0x000ba883
   b66fc:	2003e374 	.word	0x2003e374
   b6700:	000ba985 	.word	0x000ba985
   b6704:	2003e384 	.word	0x2003e384
   b6708:	000ba98b 	.word	0x000ba98b
   b670c:	2003e394 	.word	0x2003e394
   b6710:	000ba893 	.word	0x000ba893
   b6714:	2003e3a4 	.word	0x2003e3a4
   b6718:	000ba89b 	.word	0x000ba89b
   b671c:	2003e3b4 	.word	0x2003e3b4
   b6720:	000ba991 	.word	0x000ba991
   b6724:	2003e484 	.word	0x2003e484
   b6728:	000ba999 	.word	0x000ba999
   b672c:	2003e494 	.word	0x2003e494
   b6730:	000ba9a1 	.word	0x000ba9a1
   b6734:	2003e4a4 	.word	0x2003e4a4
   b6738:	000ba9a9 	.word	0x000ba9a9
   b673c:	2003e4b4 	.word	0x2003e4b4
   b6740:	000ba9b1 	.word	0x000ba9b1
   b6744:	2003e4c4 	.word	0x2003e4c4
   b6748:	000ba9b9 	.word	0x000ba9b9
   b674c:	2003e4d4 	.word	0x2003e4d4
   b6750:	000ba9c1 	.word	0x000ba9c1
   b6754:	2003e4e4 	.word	0x2003e4e4
   b6758:	000ba9c9 	.word	0x000ba9c9
   b675c:	2003e4f4 	.word	0x2003e4f4
   b6760:	000ba9d1 	.word	0x000ba9d1
   b6764:	2003e504 	.word	0x2003e504
   b6768:	000ba9d9 	.word	0x000ba9d9
   b676c:	2003e514 	.word	0x2003e514
   b6770:	000ba9e1 	.word	0x000ba9e1
   b6774:	2003e524 	.word	0x2003e524
   b6778:	000ba9e9 	.word	0x000ba9e9
   b677c:	2003e534 	.word	0x2003e534
   b6780:	000ba9f1 	.word	0x000ba9f1
   b6784:	2003e544 	.word	0x2003e544
   b6788:	000ba9f9 	.word	0x000ba9f9
   b678c:	2003e554 	.word	0x2003e554
   b6790:	000baa01 	.word	0x000baa01
   b6794:	2003e564 	.word	0x2003e564
   b6798:	000baa09 	.word	0x000baa09
   b679c:	2003e574 	.word	0x2003e574
   b67a0:	000baa11 	.word	0x000baa11
   b67a4:	2003e584 	.word	0x2003e584
   b67a8:	000baa19 	.word	0x000baa19
   b67ac:	2003e594 	.word	0x2003e594
   b67b0:	000baa21 	.word	0x000baa21
   b67b4:	2003e5a4 	.word	0x2003e5a4
   b67b8:	000baa29 	.word	0x000baa29
   b67bc:	2003e5b4 	.word	0x2003e5b4
   b67c0:	000baa31 	.word	0x000baa31
   b67c4:	2003e5c4 	.word	0x2003e5c4
   b67c8:	000baa39 	.word	0x000baa39
   b67cc:	2003e5d4 	.word	0x2003e5d4
   b67d0:	000baa41 	.word	0x000baa41
   b67d4:	2003e5e4 	.word	0x2003e5e4
   b67d8:	000baa49 	.word	0x000baa49
   b67dc:	2003e5f4 	.word	0x2003e5f4
   b67e0:	000baa51 	.word	0x000baa51
   b67e4:	2003e604 	.word	0x2003e604
   b67e8:	000baa57 	.word	0x000baa57
   b67ec:	2003e614 	.word	0x2003e614
   b67f0:	000baa5d 	.word	0x000baa5d
   b67f4:	2003e624 	.word	0x2003e624
   b67f8:	000baa63 	.word	0x000baa63
   b67fc:	2003e634 	.word	0x2003e634
   b6800:	000baa69 	.word	0x000baa69
   b6804:	2003e644 	.word	0x2003e644
   b6808:	000baa6f 	.word	0x000baa6f
   b680c:	2003e654 	.word	0x2003e654
   b6810:	000baa75 	.word	0x000baa75
   b6814:	2003e664 	.word	0x2003e664
   b6818:	000baa7b 	.word	0x000baa7b
   b681c:	2003e674 	.word	0x2003e674
   b6820:	000baa81 	.word	0x000baa81
   b6824:	2003e684 	.word	0x2003e684
   b6828:	000baa87 	.word	0x000baa87
   b682c:	2003e694 	.word	0x2003e694
   b6830:	2003e6a4 	.word	0x2003e6a4
   b6834:	000baa8d 	.word	0x000baa8d
   b6838:	2003e184 	.word	0x2003e184
   b683c:	000baa93 	.word	0x000baa93
   b6840:	2003e194 	.word	0x2003e194
   b6844:	000baa99 	.word	0x000baa99
   b6848:	2003e1a4 	.word	0x2003e1a4
   b684c:	4918      	ldr	r1, [pc, #96]	; (b68b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x59c>)
   b684e:	4819      	ldr	r0, [pc, #100]	; (b68b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5a0>)
   b6850:	f002 fb19 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6854:	4918      	ldr	r1, [pc, #96]	; (b68b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5a4>)
   b6856:	4819      	ldr	r0, [pc, #100]	; (b68bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5a8>)
   b6858:	f002 fb15 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b685c:	4918      	ldr	r1, [pc, #96]	; (b68c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5ac>)
   b685e:	4819      	ldr	r0, [pc, #100]	; (b68c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5b0>)
   b6860:	f002 fb11 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6864:	4918      	ldr	r1, [pc, #96]	; (b68c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5b4>)
   b6866:	4819      	ldr	r0, [pc, #100]	; (b68cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5b8>)
   b6868:	f002 fb0d 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b686c:	4918      	ldr	r1, [pc, #96]	; (b68d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5bc>)
   b686e:	4819      	ldr	r0, [pc, #100]	; (b68d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c0>)
   b6870:	f002 fb09 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = { "2#0#1#0"};
   b6874:	4918      	ldr	r1, [pc, #96]	; (b68d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c4>)
   b6876:	4819      	ldr	r0, [pc, #100]	; (b68dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c8>)
   b6878:	f002 fb05 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b687c:	1928      	adds	r0, r5, r4
   b687e:	4631      	mov	r1, r6
   b6880:	3410      	adds	r4, #16
   b6882:	f002 fb00 	bl	b8e86 <_ZN6StringC1EPK19__FlashStringHelper>
   b6886:	f5b4 6f9e 	cmp.w	r4, #1264	; 0x4f0
   b688a:	d1f7      	bne.n	b687c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x568>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b688c:	2208      	movs	r2, #8
   b688e:	4814      	ldr	r0, [pc, #80]	; (b68e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5cc>)
   b6890:	2110      	movs	r1, #16
   b6892:	f000 fc3e 	bl	b7112 <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6896:	4b13      	ldr	r3, [pc, #76]	; (b68e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5d0>)
   b6898:	2200      	movs	r2, #0
   b689a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b689e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b68a2:	609a      	str	r2, [r3, #8]
   b68a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b68a8:	2002      	movs	r0, #2
   b68aa:	f002 b87f 	b.w	b89ac <set_system_mode>
   b68ae:	bf00      	nop
   b68b0:	000baa9f 	.word	0x000baa9f
   b68b4:	2003e1b4 	.word	0x2003e1b4
   b68b8:	000baaa5 	.word	0x000baaa5
   b68bc:	2003e1c4 	.word	0x2003e1c4
   b68c0:	000baaab 	.word	0x000baaab
   b68c4:	2003e1d4 	.word	0x2003e1d4
   b68c8:	000baab1 	.word	0x000baab1
   b68cc:	2003e1e4 	.word	0x2003e1e4
   b68d0:	000ba48b 	.word	0x000ba48b
   b68d4:	2003e1f4 	.word	0x2003e1f4
   b68d8:	000ba9a9 	.word	0x000ba9a9
   b68dc:	2003dc84 	.word	0x2003dc84
   b68e0:	2003d920 	.word	0x2003d920
   b68e4:	2003cf44 	.word	0x2003cf44

000b68e8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b68e8:	4770      	bx	lr

000b68ea <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b68ea:	b510      	push	{r4, lr}
  }
   b68ec:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b68ee:	4604      	mov	r4, r0
  }
   b68f0:	f7fd fbd1 	bl	b4096 <_ZdlPvj>
   b68f4:	4620      	mov	r0, r4
   b68f6:	bd10      	pop	{r4, pc}

000b68f8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b68f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b68fa:	4604      	mov	r4, r0
   b68fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b68fe:	7922      	ldrb	r2, [r4, #4]
   b6900:	68a3      	ldr	r3, [r4, #8]
   b6902:	b132      	cbz	r2, b6912 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6904:	b9a3      	cbnz	r3, b6930 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6906:	490b      	ldr	r1, [pc, #44]	; (b6934 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6908:	b002      	add	sp, #8
   b690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b690e:	f002 bb75 	b.w	b8ffc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6912:	4a09      	ldr	r2, [pc, #36]	; (b6938 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6914:	7b26      	ldrb	r6, [r4, #12]
   b6916:	4d09      	ldr	r5, [pc, #36]	; (b693c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6918:	4909      	ldr	r1, [pc, #36]	; (b6940 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b691a:	7b64      	ldrb	r4, [r4, #13]
   b691c:	2e01      	cmp	r6, #1
   b691e:	bf18      	it	ne
   b6920:	4629      	movne	r1, r5
   b6922:	e9cd 1400 	strd	r1, r4, [sp]
   b6926:	4907      	ldr	r1, [pc, #28]	; (b6944 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6928:	f7fd fbea 	bl	b4100 <_ZN5Print6printfEPKcz>
  }
   b692c:	b002      	add	sp, #8
   b692e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6930:	4a05      	ldr	r2, [pc, #20]	; (b6948 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6932:	e7ef      	b.n	b6914 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6934:	000baecf 	.word	0x000baecf
   b6938:	000ba48b 	.word	0x000ba48b
   b693c:	000baecb 	.word	0x000baecb
   b6940:	000baec7 	.word	0x000baec7
   b6944:	000baee5 	.word	0x000baee5
   b6948:	000baebe 	.word	0x000baebe

000b694c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6950:	b085      	sub	sp, #20
   b6952:	461f      	mov	r7, r3
   b6954:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6958:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b695c:	eba8 0902 	sub.w	r9, r8, r2
   b6960:	eba7 0a01 	sub.w	sl, r7, r1
   b6964:	f1b9 0f00 	cmp.w	r9, #0
   b6968:	bfb8      	it	lt
   b696a:	f1c9 0900 	rsblt	r9, r9, #0
   b696e:	f1ba 0f00 	cmp.w	sl, #0
   b6972:	bfb8      	it	lt
   b6974:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b6978:	45d1      	cmp	r9, sl
        uint16_t color) {
   b697a:	4683      	mov	fp, r0
   b697c:	460c      	mov	r4, r1
   b697e:	4615      	mov	r5, r2
    if (steep) {
   b6980:	dd04      	ble.n	b698c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b6982:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b6984:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b6986:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b6988:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b698a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b698c:	42bc      	cmp	r4, r7
   b698e:	dd05      	ble.n	b699c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b6990:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b6992:	4645      	mov	r5, r8
   b6994:	4690      	mov	r8, r2
    if (x0 > x1) {
   b6996:	4622      	mov	r2, r4
   b6998:	463c      	mov	r4, r7
   b699a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b699c:	1b3e      	subs	r6, r7, r4
   b699e:	b2b2      	uxth	r2, r6
   b69a0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b69a2:	eba8 0205 	sub.w	r2, r8, r5
   b69a6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b69aa:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b69ae:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b69b2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b69b6:	4545      	cmp	r5, r8
   b69b8:	bfb4      	ite	lt
   b69ba:	2201      	movlt	r2, #1
   b69bc:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b69c0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b69c2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b69c4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b69c6:	42bc      	cmp	r4, r7
   b69c8:	dc1c      	bgt.n	b6a04 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b69ca:	f8db 2000 	ldr.w	r2, [fp]
   b69ce:	9303      	str	r3, [sp, #12]
        if (steep) {
   b69d0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b69d2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b69d6:	bfc7      	ittee	gt
   b69d8:	4629      	movgt	r1, r5
   b69da:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b69dc:	462a      	movle	r2, r5
   b69de:	4621      	movle	r1, r4
   b69e0:	4658      	mov	r0, fp
   b69e2:	47c0      	blx	r8
        }
        err -= dy;
   b69e4:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b69e6:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b69e8:	1ab6      	subs	r6, r6, r2
   b69ea:	b2b1      	uxth	r1, r6
   b69ec:	b236      	sxth	r6, r6
        if (err < 0) {
   b69ee:	2e00      	cmp	r6, #0
   b69f0:	da05      	bge.n	b69fe <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b69f2:	9a02      	ldr	r2, [sp, #8]
   b69f4:	4415      	add	r5, r2
            err += dx;
   b69f6:	9a00      	ldr	r2, [sp, #0]
   b69f8:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b69fa:	b22d      	sxth	r5, r5
            err += dx;
   b69fc:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b69fe:	3401      	adds	r4, #1
   b6a00:	b224      	sxth	r4, r4
   b6a02:	e7e0      	b.n	b69c6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b6a04:	b005      	add	sp, #20
   b6a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6a0a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b6a0a:	4770      	bx	lr

000b6a0c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b6a0c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b6a0e:	6804      	ldr	r4, [r0, #0]
   b6a10:	6924      	ldr	r4, [r4, #16]
   b6a12:	46a4      	mov	ip, r4
}
   b6a14:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b6a18:	4760      	bx	ip

000b6a1a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6a1a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b6a1c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b6a1e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b6a22:	9502      	str	r5, [sp, #8]
   b6a24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b6a26:	46a4      	mov	ip, r4
}
   b6a28:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b6a2a:	4760      	bx	ip

000b6a2c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6a2c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b6a2e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b6a30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b6a34:	9502      	str	r5, [sp, #8]
   b6a36:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b6a38:	46a4      	mov	ip, r4
}
   b6a3a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b6a3c:	4760      	bx	ip

000b6a3e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6a3e:	b470      	push	{r4, r5, r6}
   b6a40:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b6a44:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b6a48:	6804      	ldr	r4, [r0, #0]
   b6a4a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b6a4e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b6a50:	46a4      	mov	ip, r4
}
   b6a52:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b6a54:	4760      	bx	ip

000b6a56 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6a56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6a5a:	461c      	mov	r4, r3
    startWrite();
   b6a5c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b6a5e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6a62:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b6a64:	4605      	mov	r5, r0
   b6a66:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b6a68:	3c01      	subs	r4, #1
   b6a6a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b6a6c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b6a6e:	b224      	sxth	r4, r4
    startWrite();
   b6a70:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b6a72:	682b      	ldr	r3, [r5, #0]
   b6a74:	f8cd 8004 	str.w	r8, [sp, #4]
   b6a78:	9400      	str	r4, [sp, #0]
   b6a7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b6a7c:	4628      	mov	r0, r5
   b6a7e:	463b      	mov	r3, r7
   b6a80:	4632      	mov	r2, r6
   b6a82:	4639      	mov	r1, r7
   b6a84:	47a0      	blx	r4
    endWrite();
   b6a86:	682b      	ldr	r3, [r5, #0]
   b6a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a8a:	4628      	mov	r0, r5
}
   b6a8c:	b002      	add	sp, #8
   b6a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6a92:	4718      	bx	r3

000b6a94 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6a98:	461d      	mov	r5, r3
    startWrite();
   b6a9a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b6a9c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6aa0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b6aa2:	4604      	mov	r4, r0
   b6aa4:	4617      	mov	r7, r2
   b6aa6:	460e      	mov	r6, r1
    startWrite();
   b6aa8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b6aaa:	e9cd 7800 	strd	r7, r8, [sp]
   b6aae:	6822      	ldr	r2, [r4, #0]
   b6ab0:	1e6b      	subs	r3, r5, #1
   b6ab2:	4433      	add	r3, r6
   b6ab4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b6ab6:	4620      	mov	r0, r4
   b6ab8:	b21b      	sxth	r3, r3
   b6aba:	463a      	mov	r2, r7
   b6abc:	4631      	mov	r1, r6
   b6abe:	47a8      	blx	r5
    endWrite();
   b6ac0:	6823      	ldr	r3, [r4, #0]
   b6ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ac4:	4620      	mov	r0, r4
}
   b6ac6:	b002      	add	sp, #8
   b6ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6acc:	4718      	bx	r3

000b6ace <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6ace:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6ad2:	461e      	mov	r6, r3
    startWrite();
   b6ad4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6ad6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b6ada:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6adc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b6ae0:	460c      	mov	r4, r1
   b6ae2:	4605      	mov	r5, r0
   b6ae4:	4617      	mov	r7, r2
    startWrite();
   b6ae6:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b6ae8:	4426      	add	r6, r4
   b6aea:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b6aec:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b6aee:	da0b      	bge.n	b6b08 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b6af0:	f8cd 8000 	str.w	r8, [sp]
   b6af4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6af8:	4621      	mov	r1, r4
   b6afa:	464b      	mov	r3, r9
   b6afc:	463a      	mov	r2, r7
   b6afe:	4628      	mov	r0, r5
   b6b00:	3401      	adds	r4, #1
   b6b02:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b6b04:	b224      	sxth	r4, r4
   b6b06:	e7f0      	b.n	b6aea <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b6b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b0a:	4628      	mov	r0, r5
}
   b6b0c:	b002      	add	sp, #8
   b6b0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6b12:	4718      	bx	r3

000b6b14 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6b14:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6b16:	6802      	ldr	r2, [r0, #0]
   b6b18:	9101      	str	r1, [sp, #4]
   b6b1a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b6b1e:	9100      	str	r1, [sp, #0]
   b6b20:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b6b22:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6b26:	2200      	movs	r2, #0
   b6b28:	4611      	mov	r1, r2
   b6b2a:	47a0      	blx	r4
}
   b6b2c:	b002      	add	sp, #8
   b6b2e:	bd10      	pop	{r4, pc}

000b6b30 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b6b34:	4299      	cmp	r1, r3
        uint16_t color) {
   b6b36:	4616      	mov	r6, r2
   b6b38:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b6b3c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6b40:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b6b42:	4680      	mov	r8, r0
   b6b44:	460d      	mov	r5, r1
   b6b46:	461c      	mov	r4, r3
    if(x0 == x1){
   b6b48:	d113      	bne.n	b6b72 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6b4a:	42be      	cmp	r6, r7
   b6b4c:	bfc8      	it	gt
   b6b4e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6b50:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6b54:	bfc4      	itt	gt
   b6b56:	463e      	movgt	r6, r7
   b6b58:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6b5a:	1c7b      	adds	r3, r7, #1
   b6b5c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b6b5e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6b60:	b21b      	sxth	r3, r3
   b6b62:	4632      	mov	r2, r6
   b6b64:	4629      	mov	r1, r5
   b6b66:	4640      	mov	r0, r8
   b6b68:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b6b6a:	b003      	add	sp, #12
   b6b6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6b70:	4760      	bx	ip
    } else if(y0 == y1){
   b6b72:	42be      	cmp	r6, r7
   b6b74:	d10a      	bne.n	b6b8c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b6b76:	4299      	cmp	r1, r3
   b6b78:	bfc2      	ittt	gt
   b6b7a:	460b      	movgt	r3, r1
   b6b7c:	4625      	movgt	r5, r4
   b6b7e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6b80:	1c63      	adds	r3, r4, #1
   b6b82:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b6b86:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6b88:	1b5b      	subs	r3, r3, r5
   b6b8a:	e7e9      	b.n	b6b60 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b6b8c:	6953      	ldr	r3, [r2, #20]
   b6b8e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b6b90:	e9cd 7900 	strd	r7, r9, [sp]
   b6b94:	f8d8 3000 	ldr.w	r3, [r8]
   b6b98:	4640      	mov	r0, r8
   b6b9a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b6b9c:	4632      	mov	r2, r6
   b6b9e:	4623      	mov	r3, r4
   b6ba0:	4629      	mov	r1, r5
   b6ba2:	47b8      	blx	r7
        endWrite();
   b6ba4:	f8d8 3000 	ldr.w	r3, [r8]
   b6ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6baa:	4640      	mov	r0, r8
}
   b6bac:	b003      	add	sp, #12
   b6bae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b6bb2:	4718      	bx	r3

000b6bb4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6bb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6bb8:	461d      	mov	r5, r3
    startWrite();
   b6bba:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6bbc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b6bc0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6bc2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6bc6:	4604      	mov	r4, r0
   b6bc8:	460f      	mov	r7, r1
   b6bca:	4616      	mov	r6, r2
    startWrite();
   b6bcc:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b6bce:	6823      	ldr	r3, [r4, #0]
   b6bd0:	f8cd 8000 	str.w	r8, [sp]
   b6bd4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6bd8:	4632      	mov	r2, r6
   b6bda:	462b      	mov	r3, r5
   b6bdc:	4639      	mov	r1, r7
   b6bde:	4620      	mov	r0, r4
   b6be0:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b6be2:	6823      	ldr	r3, [r4, #0]
   b6be4:	f8cd 8000 	str.w	r8, [sp]
   b6be8:	f109 32ff 	add.w	r2, r9, #4294967295
   b6bec:	4432      	add	r2, r6
   b6bee:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6bf2:	4639      	mov	r1, r7
   b6bf4:	462b      	mov	r3, r5
   b6bf6:	4620      	mov	r0, r4
   b6bf8:	b212      	sxth	r2, r2
   b6bfa:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b6bfc:	6823      	ldr	r3, [r4, #0]
   b6bfe:	f8cd 8000 	str.w	r8, [sp]
   b6c02:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6c06:	4632      	mov	r2, r6
   b6c08:	464b      	mov	r3, r9
   b6c0a:	4639      	mov	r1, r7
   b6c0c:	4620      	mov	r0, r4
   b6c0e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b6c10:	1e6b      	subs	r3, r5, #1
   b6c12:	19d9      	adds	r1, r3, r7
   b6c14:	6823      	ldr	r3, [r4, #0]
   b6c16:	f8cd 8000 	str.w	r8, [sp]
   b6c1a:	6a1d      	ldr	r5, [r3, #32]
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	464b      	mov	r3, r9
   b6c20:	4632      	mov	r2, r6
   b6c22:	b209      	sxth	r1, r1
   b6c24:	47a8      	blx	r5
    endWrite();
   b6c26:	6823      	ldr	r3, [r4, #0]
   b6c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c2a:	4620      	mov	r0, r4
}
   b6c2c:	b002      	add	sp, #8
   b6c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6c32:	4718      	bx	r3

000b6c34 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b6c34:	4770      	bx	lr

000b6c36 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b6c36:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6c3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b6c3e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b6c40:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b6c42:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6c46:	bf59      	ittee	pl
   b6c48:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6c4a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6c4c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b6c4e:	81c3      	strhmi	r3, [r0, #14]
}
   b6c50:	4770      	bx	lr
	...

000b6c54 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6c54:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b6c56:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6c58:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6c5a:	4a07      	ldr	r2, [pc, #28]	; (b6c78 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6c5c:	4d07      	ldr	r5, [pc, #28]	; (b6c7c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b6c5e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b6c60:	2400      	movs	r4, #0
    _width    = WIDTH;
   b6c62:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b6c64:	f04f 31ff 	mov.w	r1, #4294967295
   b6c68:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b6c6c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b6c6e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b6c70:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b6c72:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b6c74:	6204      	str	r4, [r0, #32]
}
   b6c76:	bd30      	pop	{r4, r5, pc}
   b6c78:	01000101 	.word	0x01000101
   b6c7c:	000bb40c 	.word	0x000bb40c

000b6c80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c84:	b089      	sub	sp, #36	; 0x24
   b6c86:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6c8a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6c8c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b6c90:	9304      	str	r3, [sp, #16]
   b6c92:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b6c96:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6c98:	9305      	str	r3, [sp, #20]
   b6c9a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b6c9e:	4604      	mov	r4, r0
    startWrite();
   b6ca0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6ca2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b6ca6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6caa:	bf48      	it	mi
   b6cac:	f108 020e 	addmi.w	r2, r8, #14
   b6cb0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b6cb4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b6cb6:	4635      	mov	r5, r6
   b6cb8:	9b03      	ldr	r3, [sp, #12]
   b6cba:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b6cbc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b6cc0:	189a      	adds	r2, r3, r2
   b6cc2:	9b05      	ldr	r3, [sp, #20]
   b6cc4:	428b      	cmp	r3, r1
   b6cc6:	b212      	sxth	r2, r2
   b6cc8:	dd27      	ble.n	b6d1a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6cca:	9b04      	ldr	r3, [sp, #16]
   b6ccc:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b6cce:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6cd2:	9306      	str	r3, [sp, #24]
   b6cd4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b6cd8:	4580      	cmp	r8, r0
   b6cda:	fa1f f189 	uxth.w	r1, r9
   b6cde:	dd17      	ble.n	b6d10 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b6ce0:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6ce2:	bf05      	ittet	eq
   b6ce4:	9b06      	ldreq	r3, [sp, #24]
   b6ce6:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b6ce8:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6cea:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b6cec:	bf18      	it	ne
   b6cee:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b6cf0:	062b      	lsls	r3, r5, #24
   b6cf2:	d50a      	bpl.n	b6d0a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b6cf4:	9b02      	ldr	r3, [sp, #8]
   b6cf6:	6820      	ldr	r0, [r4, #0]
   b6cf8:	9207      	str	r2, [sp, #28]
   b6cfa:	4419      	add	r1, r3
   b6cfc:	6983      	ldr	r3, [r0, #24]
   b6cfe:	b209      	sxth	r1, r1
   b6d00:	461f      	mov	r7, r3
   b6d02:	4620      	mov	r0, r4
   b6d04:	4653      	mov	r3, sl
   b6d06:	47b8      	blx	r7
   b6d08:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6d0a:	f109 0901 	add.w	r9, r9, #1
   b6d0e:	e7e1      	b.n	b6cd4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b6d10:	9b01      	ldr	r3, [sp, #4]
   b6d12:	3301      	adds	r3, #1
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	445e      	add	r6, fp
   b6d18:	e7ce      	b.n	b6cb8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6d1a:	6823      	ldr	r3, [r4, #0]
   b6d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d1e:	4620      	mov	r0, r4
}
   b6d20:	b009      	add	sp, #36	; 0x24
   b6d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b6d26:	4718      	bx	r3

000b6d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d2c:	ed2d 8b02 	vpush	{d8}
   b6d30:	b091      	sub	sp, #68	; 0x44
   b6d32:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6d34:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6d36:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6d3a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6d3e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b6d42:	9103      	str	r1, [sp, #12]
   b6d44:	461f      	mov	r7, r3
   b6d46:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6d4a:	9304      	str	r3, [sp, #16]
   b6d4c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6d4e:	2a00      	cmp	r2, #0
   b6d50:	f040 80c5 	bne.w	b6ede <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6d54:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6d58:	428b      	cmp	r3, r1
   b6d5a:	f340 814c 	ble.w	b6ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6d5e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b6d62:	42b3      	cmp	r3, r6
   b6d64:	f340 8147 	ble.w	b6ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6d68:	2306      	movs	r3, #6
   b6d6a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6d6e:	2b00      	cmp	r3, #0
   b6d70:	f340 8141 	ble.w	b6ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b6d74:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6d78:	2b00      	cmp	r3, #0
   b6d7a:	f340 813c 	ble.w	b6ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6d7e:	7f03      	ldrb	r3, [r0, #28]
   b6d80:	b91b      	cbnz	r3, b6d8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b6d82:	2faf      	cmp	r7, #175	; 0xaf
   b6d84:	bf84      	itt	hi
   b6d86:	3701      	addhi	r7, #1
   b6d88:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6d8a:	f8db 3000 	ldr.w	r3, [fp]
   b6d8e:	4658      	mov	r0, fp
   b6d90:	695b      	ldr	r3, [r3, #20]
   b6d92:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6d94:	2205      	movs	r2, #5
   b6d96:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6d98:	2200      	movs	r2, #0
   b6d9a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6d9c:	4a98      	ldr	r2, [pc, #608]	; (b7000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6d9e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b6da2:	18d3      	adds	r3, r2, r3
   b6da4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b6da6:	b2b3      	uxth	r3, r6
   b6da8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6daa:	9a05      	ldr	r2, [sp, #20]
   b6dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6dae:	5c9b      	ldrb	r3, [r3, r2]
   b6db0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6db2:	b2ab      	uxth	r3, r5
   b6db4:	930b      	str	r3, [sp, #44]	; 0x2c
   b6db6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b6dba:	9308      	str	r3, [sp, #32]
   b6dbc:	9b03      	ldr	r3, [sp, #12]
   b6dbe:	fb02 f905 	mul.w	r9, r2, r5
   b6dc2:	fa19 f983 	uxtah	r9, r9, r3
   b6dc6:	fa0f f389 	sxth.w	r3, r9
   b6dca:	ee08 3a10 	vmov	s16, r3
   b6dce:	2308      	movs	r3, #8
   b6dd0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b6dd2:	9b03      	ldr	r3, [sp, #12]
   b6dd4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6dd8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b6ddc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b6de0:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b6de2:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b6de6:	07d2      	lsls	r2, r2, #31
   b6de8:	d552      	bpl.n	b6e90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b6dea:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6dec:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6df0:	d13e      	bne.n	b6e70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b6df2:	2c01      	cmp	r4, #1
   b6df4:	d13c      	bne.n	b6e70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b6df6:	699b      	ldr	r3, [r3, #24]
   b6df8:	9906      	ldr	r1, [sp, #24]
   b6dfa:	461f      	mov	r7, r3
   b6dfc:	9b04      	ldr	r3, [sp, #16]
   b6dfe:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b6e00:	b212      	sxth	r2, r2
   b6e02:	4651      	mov	r1, sl
   b6e04:	4658      	mov	r0, fp
   b6e06:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6e08:	f109 0301 	add.w	r3, r9, #1
   b6e0c:	fa4f f983 	sxtb.w	r9, r3
   b6e10:	9b07      	ldr	r3, [sp, #28]
   b6e12:	085b      	lsrs	r3, r3, #1
   b6e14:	9307      	str	r3, [sp, #28]
   b6e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6e18:	3b01      	subs	r3, #1
   b6e1a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6e1e:	930a      	str	r3, [sp, #40]	; 0x28
   b6e20:	d1de      	bne.n	b6de0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6e22:	9f05      	ldr	r7, [sp, #20]
   b6e24:	3701      	adds	r7, #1
   b6e26:	b27b      	sxtb	r3, r7
   b6e28:	9305      	str	r3, [sp, #20]
   b6e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6e2c:	3b01      	subs	r3, #1
   b6e2e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6e32:	9309      	str	r3, [sp, #36]	; 0x24
   b6e34:	d1b9      	bne.n	b6daa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b6e36:	9b04      	ldr	r3, [sp, #16]
   b6e38:	4543      	cmp	r3, r8
   b6e3a:	d00f      	beq.n	b6e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6e3c:	2d01      	cmp	r5, #1
   b6e3e:	f8db 3000 	ldr.w	r3, [fp]
   b6e42:	d13b      	bne.n	b6ebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6e44:	2c01      	cmp	r4, #1
   b6e46:	d139      	bne.n	b6ebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6e48:	9908      	ldr	r1, [sp, #32]
   b6e4a:	f8cd 8000 	str.w	r8, [sp]
   b6e4e:	3105      	adds	r1, #5
   b6e50:	6a1c      	ldr	r4, [r3, #32]
   b6e52:	4632      	mov	r2, r6
   b6e54:	2308      	movs	r3, #8
   b6e56:	b209      	sxth	r1, r1
   b6e58:	4658      	mov	r0, fp
   b6e5a:	47a0      	blx	r4
        endWrite();
   b6e5c:	f8db 3000 	ldr.w	r3, [fp]
   b6e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e62:	4658      	mov	r0, fp
}
   b6e64:	b011      	add	sp, #68	; 0x44
   b6e66:	ecbd 8b02 	vpop	{d8}
   b6e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6e6e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6e70:	9906      	ldr	r1, [sp, #24]
   b6e72:	fb14 f202 	smulbb	r2, r4, r2
   b6e76:	440a      	add	r2, r1
   b6e78:	9904      	ldr	r1, [sp, #16]
   b6e7a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6e7c:	9400      	str	r4, [sp, #0]
   b6e7e:	69db      	ldr	r3, [r3, #28]
   b6e80:	ee18 1a10 	vmov	r1, s16
   b6e84:	461f      	mov	r7, r3
   b6e86:	b212      	sxth	r2, r2
   b6e88:	462b      	mov	r3, r5
   b6e8a:	4658      	mov	r0, fp
   b6e8c:	47b8      	blx	r7
   b6e8e:	e7bb      	b.n	b6e08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6e90:	9a04      	ldr	r2, [sp, #16]
   b6e92:	4542      	cmp	r2, r8
   b6e94:	d0b8      	beq.n	b6e08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b6e96:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6e98:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6e9c:	d107      	bne.n	b6eae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6e9e:	2c01      	cmp	r4, #1
   b6ea0:	d105      	bne.n	b6eae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6ea2:	699b      	ldr	r3, [r3, #24]
   b6ea4:	9906      	ldr	r1, [sp, #24]
   b6ea6:	461f      	mov	r7, r3
   b6ea8:	440a      	add	r2, r1
   b6eaa:	4643      	mov	r3, r8
   b6eac:	e7a8      	b.n	b6e00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6eae:	9906      	ldr	r1, [sp, #24]
   b6eb0:	f8cd 8004 	str.w	r8, [sp, #4]
   b6eb4:	fb14 f202 	smulbb	r2, r4, r2
   b6eb8:	440a      	add	r2, r1
   b6eba:	e7df      	b.n	b6e7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6ebe:	f8cd 8004 	str.w	r8, [sp, #4]
   b6ec2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6ec6:	9a08      	ldr	r2, [sp, #32]
   b6ec8:	00e4      	lsls	r4, r4, #3
   b6eca:	440a      	add	r2, r1
   b6ecc:	4611      	mov	r1, r2
   b6ece:	9400      	str	r4, [sp, #0]
   b6ed0:	69dc      	ldr	r4, [r3, #28]
   b6ed2:	4632      	mov	r2, r6
   b6ed4:	462b      	mov	r3, r5
   b6ed6:	b209      	sxth	r1, r1
   b6ed8:	4658      	mov	r0, fp
   b6eda:	47a0      	blx	r4
        endWrite();
   b6edc:	e7be      	b.n	b6e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6ede:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6ee0:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6ee2:	6812      	ldr	r2, [r2, #0]
   b6ee4:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6ee6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6ee8:	b2ff      	uxtb	r7, r7
   b6eea:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b6eee:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6ef2:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6ef4:	789a      	ldrb	r2, [r3, #2]
   b6ef6:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6ef8:	78da      	ldrb	r2, [r3, #3]
   b6efa:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6efc:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6efe:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b6f02:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6f06:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6f08:	d801      	bhi.n	b6f0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6f0a:	2c01      	cmp	r4, #1
   b6f0c:	d957      	bls.n	b6fbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6f0e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b6f12:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6f14:	fa0f f38a 	sxth.w	r3, sl
   b6f18:	9307      	str	r3, [sp, #28]
        startWrite();
   b6f1a:	f8db 3000 	ldr.w	r3, [fp]
   b6f1e:	4658      	mov	r0, fp
   b6f20:	695b      	ldr	r3, [r3, #20]
   b6f22:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f24:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6f26:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f2a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f2c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6f30:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b6f32:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f34:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6f38:	429f      	cmp	r7, r3
   b6f3a:	d28f      	bcs.n	b6e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f3c:	9b07      	ldr	r3, [sp, #28]
   b6f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6f40:	443b      	add	r3, r7
   b6f42:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6f46:	2200      	movs	r2, #0
   b6f48:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f4c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f4e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f52:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f56:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6f5a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6f5e:	9905      	ldr	r1, [sp, #20]
   b6f60:	4291      	cmp	r1, r2
   b6f62:	d241      	bcs.n	b6fe8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6f64:	1c5a      	adds	r2, r3, #1
   b6f66:	b2d2      	uxtb	r2, r2
   b6f68:	075b      	lsls	r3, r3, #29
   b6f6a:	920d      	str	r2, [sp, #52]	; 0x34
   b6f6c:	d107      	bne.n	b6f7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6f6e:	9b06      	ldr	r3, [sp, #24]
   b6f70:	9906      	ldr	r1, [sp, #24]
   b6f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6f74:	3301      	adds	r3, #1
   b6f76:	b29b      	uxth	r3, r3
   b6f78:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6f7c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6f7e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b6f82:	d012      	beq.n	b6faa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6f84:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f86:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6f8a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6f8e:	d11a      	bne.n	b6fc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6f90:	2c01      	cmp	r4, #1
   b6f92:	d118      	bne.n	b6fc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6f96:	699b      	ldr	r3, [r3, #24]
   b6f98:	4411      	add	r1, r2
   b6f9a:	9a05      	ldr	r2, [sp, #20]
   b6f9c:	4411      	add	r1, r2
   b6f9e:	461e      	mov	r6, r3
   b6fa0:	4652      	mov	r2, sl
   b6fa2:	9b04      	ldr	r3, [sp, #16]
   b6fa4:	b209      	sxth	r1, r1
   b6fa6:	4658      	mov	r0, fp
   b6fa8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b6faa:	9e05      	ldr	r6, [sp, #20]
   b6fac:	3601      	adds	r6, #1
   b6fae:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6fb0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6fb4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b6fb6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b6fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6fbc:	e7ce      	b.n	b6f5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6fbe:	2300      	movs	r3, #0
   b6fc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6fc4:	e7a9      	b.n	b6f1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6fc6:	9805      	ldr	r0, [sp, #20]
   b6fc8:	9a08      	ldr	r2, [sp, #32]
   b6fca:	4402      	add	r2, r0
   b6fcc:	fb02 1105 	mla	r1, r2, r5, r1
   b6fd0:	9a04      	ldr	r2, [sp, #16]
   b6fd2:	e9cd 4200 	strd	r4, r2, [sp]
   b6fd6:	69db      	ldr	r3, [r3, #28]
   b6fd8:	ee18 2a10 	vmov	r2, s16
   b6fdc:	461e      	mov	r6, r3
   b6fde:	b209      	sxth	r1, r1
   b6fe0:	462b      	mov	r3, r5
   b6fe2:	4658      	mov	r0, fp
   b6fe4:	47b0      	blx	r6
   b6fe6:	e7e0      	b.n	b6faa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b6fea:	3701      	adds	r7, #1
   b6fec:	4498      	add	r8, r3
   b6fee:	fa5f f888 	uxtb.w	r8, r8
   b6ff2:	b2ff      	uxtb	r7, r7
   b6ff4:	e79f      	b.n	b6f36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b6ff6:	b011      	add	sp, #68	; 0x44
   b6ff8:	ecbd 8b02 	vpop	{d8}
   b6ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7000:	000baf02 	.word	0x000baf02

000b7004 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7004:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b7006:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b7008:	b085      	sub	sp, #20
   b700a:	4604      	mov	r4, r0
   b700c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b700e:	2a00      	cmp	r2, #0
   b7010:	d134      	bne.n	b707c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b7012:	290a      	cmp	r1, #10
   b7014:	d108      	bne.n	b7028 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b7016:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b7018:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b701a:	7e42      	ldrb	r2, [r0, #25]
   b701c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b7020:	8263      	strh	r3, [r4, #18]
}
   b7022:	2001      	movs	r0, #1
   b7024:	b005      	add	sp, #20
   b7026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b7028:	290d      	cmp	r1, #13
   b702a:	d0fa      	beq.n	b7022 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b702c:	7ee1      	ldrb	r1, [r4, #27]
   b702e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7030:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7032:	b171      	cbz	r1, b7052 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b7034:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b7038:	2106      	movs	r1, #6
   b703a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b703e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b7042:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b7044:	bfc1      	itttt	gt
   b7046:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b704a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b704c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7050:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b7052:	8ae2      	ldrh	r2, [r4, #22]
   b7054:	9201      	str	r2, [sp, #4]
   b7056:	8aa2      	ldrh	r2, [r4, #20]
   b7058:	9200      	str	r2, [sp, #0]
   b705a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b705e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b7062:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b7066:	4620      	mov	r0, r4
   b7068:	f7ff fe5e 	bl	b6d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b706c:	7e23      	ldrb	r3, [r4, #24]
   b706e:	8a22      	ldrh	r2, [r4, #16]
   b7070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7074:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7078:	8223      	strh	r3, [r4, #16]
   b707a:	e7d2      	b.n	b7022 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b707c:	290a      	cmp	r1, #10
   b707e:	d107      	bne.n	b7090 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b7080:	2300      	movs	r3, #0
   b7082:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b7084:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b7086:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b7088:	8a43      	ldrh	r3, [r0, #18]
   b708a:	fb01 3302 	mla	r3, r1, r2, r3
   b708e:	e7c7      	b.n	b7020 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b7090:	290d      	cmp	r1, #13
   b7092:	d0c6      	beq.n	b7022 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b7094:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b7096:	42a9      	cmp	r1, r5
   b7098:	d3c3      	bcc.n	b7022 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b709a:	7a51      	ldrb	r1, [r2, #9]
   b709c:	4299      	cmp	r1, r3
   b709e:	d3c0      	bcc.n	b7022 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b70a0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b70a2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b70a4:	b2ed      	uxtb	r5, r5
   b70a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b70aa:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b70ac:	b328      	cbz	r0, b70fa <_ZN12Adafruit_GFX5writeEh+0xf6>
   b70ae:	78e9      	ldrb	r1, [r5, #3]
   b70b0:	b319      	cbz	r1, b70fa <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b70b2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b70b4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b70b6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b70b8:	b191      	cbz	r1, b70e0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b70ba:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b70be:	4408      	add	r0, r1
   b70c0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b70c4:	fb06 1100 	mla	r1, r6, r0, r1
   b70c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b70cc:	4281      	cmp	r1, r0
   b70ce:	dd07      	ble.n	b70e0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b70d0:	2000      	movs	r0, #0
   b70d2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b70d4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b70d8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b70da:	fb02 1207 	mla	r2, r2, r7, r1
   b70de:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b70e0:	8ae2      	ldrh	r2, [r4, #22]
   b70e2:	9201      	str	r2, [sp, #4]
   b70e4:	8aa2      	ldrh	r2, [r4, #20]
   b70e6:	9200      	str	r2, [sp, #0]
   b70e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b70ec:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b70f0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff fe17 	bl	b6d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b70fa:	7929      	ldrb	r1, [r5, #4]
   b70fc:	7e22      	ldrb	r2, [r4, #24]
   b70fe:	8a23      	ldrh	r3, [r4, #16]
   b7100:	fb01 3302 	mla	r3, r1, r2, r3
   b7104:	e7b8      	b.n	b7078 <_ZN12Adafruit_GFX5writeEh+0x74>

000b7106 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b7106:	2901      	cmp	r1, #1
   b7108:	bf38      	it	cc
   b710a:	2101      	movcc	r1, #1
   b710c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b710e:	7641      	strb	r1, [r0, #25]
}
   b7110:	4770      	bx	lr

000b7112 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b7112:	b538      	push	{r3, r4, r5, lr}
   b7114:	4604      	mov	r4, r0
   b7116:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b7118:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b711a:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b711c:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b711e:	f002 fbab 	bl	b9878 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b7122:	7b20      	ldrb	r0, [r4, #12]
   b7124:	2101      	movs	r1, #1
   b7126:	f002 fbb8 	bl	b989a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b712a:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b712c:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b712e:	2101      	movs	r1, #1
   b7130:	f002 fba2 	bl	b9878 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b7134:	7b60      	ldrb	r0, [r4, #13]
   b7136:	2100      	movs	r1, #0
   b7138:	f002 fbaf 	bl	b989a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b713c:	4620      	mov	r0, r4
   b713e:	bd38      	pop	{r3, r4, r5, pc}

000b7140 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b7140:	3901      	subs	r1, #1
   b7142:	b2c9      	uxtb	r1, r1
   b7144:	2908      	cmp	r1, #8
   b7146:	bf9a      	itte	ls
   b7148:	4b02      	ldrls	r3, [pc, #8]	; (b7154 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b714a:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b714e:	4802      	ldrhi	r0, [pc, #8]	; (b7158 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b7150:	4770      	bx	lr
   b7152:	bf00      	nop
   b7154:	000bb554 	.word	0x000bb554
   b7158:	000bb45c 	.word	0x000bb45c

000b715c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b715c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b715e:	4c0b      	ldr	r4, [pc, #44]	; (b718c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7160:	7821      	ldrb	r1, [r4, #0]
   b7162:	f3bf 8f5b 	dmb	ish
   b7166:	f011 0101 	ands.w	r1, r1, #1
   b716a:	d10b      	bne.n	b7184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b716c:	4620      	mov	r0, r4
   b716e:	9101      	str	r1, [sp, #4]
   b7170:	f7fc ffa0 	bl	b40b4 <__cxa_guard_acquire>
   b7174:	9901      	ldr	r1, [sp, #4]
   b7176:	b128      	cbz	r0, b7184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7178:	4805      	ldr	r0, [pc, #20]	; (b7190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b717a:	f001 fd2f 	bl	b8bdc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b717e:	4620      	mov	r0, r4
   b7180:	f7fc ff9d 	bl	b40be <__cxa_guard_release>
    }
   b7184:	4802      	ldr	r0, [pc, #8]	; (b7190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7186:	b002      	add	sp, #8
   b7188:	bd10      	pop	{r4, pc}
   b718a:	bf00      	nop
   b718c:	2003cf34 	.word	0x2003cf34
   b7190:	2003cf38 	.word	0x2003cf38

000b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b7194:	b507      	push	{r0, r1, r2, lr}
   b7196:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b7198:	f7ff ffe0 	bl	b715c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b719c:	9901      	ldr	r1, [sp, #4]
    }
   b719e:	b003      	add	sp, #12
   b71a0:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b71a4:	f001 bdc0 	b.w	b8d28 <_ZN8SPIClass8transferEh>

000b71a8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b71a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71ac:	4607      	mov	r7, r0
   b71ae:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b71b2:	461e      	mov	r6, r3
	if (count == 0) {
   b71b4:	4615      	mov	r5, r2
   b71b6:	2a00      	cmp	r2, #0
   b71b8:	d042      	beq.n	b7240 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b71ba:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b71be:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b71c0:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b71c4:	2100      	movs	r1, #0
   b71c6:	f002 fb68 	bl	b989a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b71ca:	4648      	mov	r0, r9
   b71cc:	f7ff ffe2 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b71d0:	3d01      	subs	r5, #1
   b71d2:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b71d4:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b71d8:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b71dc:	fa5f f48b 	uxtb.w	r4, fp
   b71e0:	42a5      	cmp	r5, r4
   b71e2:	d922      	bls.n	b722a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b71e4:	b9dc      	cbnz	r4, b721e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b71e6:	f1b8 0f00 	cmp.w	r8, #0
   b71ea:	d018      	beq.n	b721e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b71ec:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b71ee:	b2d3      	uxtb	r3, r2
   b71f0:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b71f2:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b71f4:	d805      	bhi.n	b7202 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b71f6:	fa0a f402 	lsl.w	r4, sl, r2
   b71fa:	430c      	orrs	r4, r1
   b71fc:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b71fe:	3201      	adds	r2, #1
   b7200:	e7f5      	b.n	b71ee <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b7202:	4648      	mov	r0, r9
   b7204:	9101      	str	r1, [sp, #4]
   b7206:	f7ff ffc5 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b720a:	7833      	ldrb	r3, [r6, #0]
   b720c:	9901      	ldr	r1, [sp, #4]
   b720e:	4004      	ands	r4, r0
   b7210:	ea23 0301 	bic.w	r3, r3, r1
   b7214:	431c      	orrs	r4, r3
   b7216:	7034      	strb	r4, [r6, #0]
		index++;
   b7218:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b721c:	e7de      	b.n	b71dc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b721e:	4648      	mov	r0, r9
   b7220:	f7ff ffb8 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7224:	f806 000b 	strb.w	r0, [r6, fp]
   b7228:	e7f6      	b.n	b7218 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b722a:	2000      	movs	r0, #0
   b722c:	f7ff ffb2 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7230:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7232:	7b38      	ldrb	r0, [r7, #12]
   b7234:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b7236:	b003      	add	sp, #12
   b7238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b723c:	f002 bb2d 	b.w	b989a <digitalWrite>
} // End PCD_ReadRegister()
   b7240:	b003      	add	sp, #12
   b7242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b7246:	b538      	push	{r3, r4, r5, lr}
   b7248:	460c      	mov	r4, r1
   b724a:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b724c:	2100      	movs	r1, #0
   b724e:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7250:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7254:	f002 fb21 	bl	b989a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7258:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b725c:	f7ff ff9a 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7260:	2000      	movs	r0, #0
   b7262:	f7ff ff97 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7266:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7268:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b726a:	7b28      	ldrb	r0, [r5, #12]
   b726c:	f002 fb15 	bl	b989a <digitalWrite>
} // End PCD_ReadRegister()
   b7270:	4620      	mov	r0, r4
   b7272:	bd38      	pop	{r3, r4, r5, pc}

000b7274 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b7274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7276:	460f      	mov	r7, r1
   b7278:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b727a:	2100      	movs	r1, #0
   b727c:	7b00      	ldrb	r0, [r0, #12]
								) {
   b727e:	4615      	mov	r5, r2
   b7280:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7282:	f002 fb0a 	bl	b989a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b7286:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b728a:	f7ff ff83 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b728e:	4425      	add	r5, r4
   b7290:	42ac      	cmp	r4, r5
   b7292:	d004      	beq.n	b729e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b7294:	f814 0b01 	ldrb.w	r0, [r4], #1
   b7298:	f7ff ff7c 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b729c:	e7f8      	b.n	b7290 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b729e:	7b30      	ldrb	r0, [r6, #12]
   b72a0:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b72a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b72a6:	f002 baf8 	b.w	b989a <digitalWrite>

000b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b72aa:	b570      	push	{r4, r5, r6, lr}
   b72ac:	4604      	mov	r4, r0
   b72ae:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b72b0:	7b00      	ldrb	r0, [r0, #12]
   b72b2:	2100      	movs	r1, #0
								) {
   b72b4:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b72b6:	f002 faf0 	bl	b989a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b72ba:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b72be:	f7ff ff69 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b72c2:	4628      	mov	r0, r5
   b72c4:	f7ff ff66 	bl	b7194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b72c8:	7b20      	ldrb	r0, [r4, #12]
   b72ca:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b72cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b72d0:	f002 bae3 	b.w	b989a <digitalWrite>

000b72d4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b72d4:	b570      	push	{r4, r5, r6, lr}
   b72d6:	4616      	mov	r6, r2
   b72d8:	4604      	mov	r4, r0
   b72da:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b72dc:	f7ff ffb3 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b72e0:	4330      	orrs	r0, r6
   b72e2:	b2c2      	uxtb	r2, r0
   b72e4:	4629      	mov	r1, r5
   b72e6:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b72e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b72ec:	f7ff bfdd 	b.w	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b72f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b72f0:	b570      	push	{r4, r5, r6, lr}
   b72f2:	4616      	mov	r6, r2
   b72f4:	4604      	mov	r4, r0
   b72f6:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b72f8:	f7ff ffa5 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b72fc:	ea20 0006 	bic.w	r0, r0, r6
   b7300:	b2c2      	uxtb	r2, r0
   b7302:	4629      	mov	r1, r5
   b7304:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b7306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b730a:	f7ff bfce 	b.w	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b730e <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b730e:	2208      	movs	r2, #8
   b7310:	2110      	movs	r1, #16
   b7312:	f7ff bfed 	b.w	b72f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b7316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7318:	4604      	mov	r4, r0
   b731a:	4615      	mov	r5, r2
   b731c:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b731e:	2200      	movs	r2, #0
   b7320:	2102      	movs	r1, #2
					 ) {
   b7322:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7324:	f7ff ffc1 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b7328:	2204      	movs	r2, #4
   b732a:	210a      	movs	r1, #10
   b732c:	4620      	mov	r0, r4
   b732e:	f7ff ffbc 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b7332:	2280      	movs	r2, #128	; 0x80
   b7334:	2114      	movs	r1, #20
   b7336:	4620      	mov	r0, r4
   b7338:	f7ff ffcc 	bl	b72d4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b733c:	462a      	mov	r2, r5
   b733e:	463b      	mov	r3, r7
   b7340:	2112      	movs	r1, #18
   b7342:	4620      	mov	r0, r4
   b7344:	f7ff ff96 	bl	b7274 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b7348:	2203      	movs	r2, #3
   b734a:	2102      	movs	r1, #2
   b734c:	4620      	mov	r0, r4
   b734e:	f7ff ffac 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b7352:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b7356:	210a      	movs	r1, #10
   b7358:	4620      	mov	r0, r4
   b735a:	f7ff ff74 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b735e:	0743      	lsls	r3, r0, #29
   b7360:	d405      	bmi.n	b736e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b7362:	3d01      	subs	r5, #1
   b7364:	b2ad      	uxth	r5, r5
   b7366:	2d00      	cmp	r5, #0
   b7368:	d1f5      	bne.n	b7356 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b736a:	2004      	movs	r0, #4
   b736c:	e00f      	b.n	b738e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b736e:	2200      	movs	r2, #0
   b7370:	2102      	movs	r1, #2
   b7372:	4620      	mov	r0, r4
   b7374:	f7ff ff99 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b7378:	2144      	movs	r1, #68	; 0x44
   b737a:	4620      	mov	r0, r4
   b737c:	f7ff ff63 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7380:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b7382:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7384:	4620      	mov	r0, r4
   b7386:	f7ff ff5e 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b738a:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b738c:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7390 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b7390:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7392:	220f      	movs	r2, #15
   b7394:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b7396:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7398:	f7ff ff87 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b739c:	2032      	movs	r0, #50	; 0x32
   b739e:	f001 feab 	bl	b90f8 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b73a2:	2102      	movs	r1, #2
   b73a4:	4620      	mov	r0, r4
   b73a6:	f7ff ff4e 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b73aa:	06c3      	lsls	r3, r0, #27
   b73ac:	d4f9      	bmi.n	b73a2 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b73ae:	bd10      	pop	{r4, pc}

000b73b0 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b73b0:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b73b2:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b73b4:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b73b6:	f7ff ff46 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b73ba:	f000 0303 	and.w	r3, r0, #3
   b73be:	2b03      	cmp	r3, #3
   b73c0:	d008      	beq.n	b73d4 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b73c2:	f040 0203 	orr.w	r2, r0, #3
   b73c6:	b2d2      	uxtb	r2, r2
   b73c8:	4620      	mov	r0, r4
   b73ca:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b73cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b73d0:	f7ff bf6b 	b.w	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b73d4:	bd10      	pop	{r4, pc}

000b73d6 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b73d6:	b510      	push	{r4, lr}
   b73d8:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b73da:	7b40      	ldrb	r0, [r0, #13]
   b73dc:	f002 fa76 	bl	b98cc <digitalRead>
   b73e0:	bb48      	cbnz	r0, b7436 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b73e2:	7b60      	ldrb	r0, [r4, #13]
   b73e4:	2101      	movs	r1, #1
   b73e6:	f002 fa58 	bl	b989a <digitalWrite>
		delay(50);
   b73ea:	2032      	movs	r0, #50	; 0x32
   b73ec:	f001 fe84 	bl	b90f8 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b73f0:	4620      	mov	r0, r4
   b73f2:	2280      	movs	r2, #128	; 0x80
   b73f4:	2154      	movs	r1, #84	; 0x54
   b73f6:	f7ff ff58 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b73fa:	4620      	mov	r0, r4
   b73fc:	22a9      	movs	r2, #169	; 0xa9
   b73fe:	2156      	movs	r1, #86	; 0x56
   b7400:	f7ff ff53 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b7404:	4620      	mov	r0, r4
   b7406:	2203      	movs	r2, #3
   b7408:	2158      	movs	r1, #88	; 0x58
   b740a:	f7ff ff4e 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b740e:	4620      	mov	r0, r4
   b7410:	22e8      	movs	r2, #232	; 0xe8
   b7412:	215a      	movs	r1, #90	; 0x5a
   b7414:	f7ff ff49 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b7418:	4620      	mov	r0, r4
   b741a:	2240      	movs	r2, #64	; 0x40
   b741c:	212a      	movs	r1, #42	; 0x2a
   b741e:	f7ff ff44 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b7422:	4620      	mov	r0, r4
   b7424:	223d      	movs	r2, #61	; 0x3d
   b7426:	2122      	movs	r1, #34	; 0x22
   b7428:	f7ff ff3f 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b742c:	4620      	mov	r0, r4
} // End PCD_Init()
   b742e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7432:	f7ff bfbd 	b.w	b73b0 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b7436:	4620      	mov	r0, r4
   b7438:	f7ff ffaa 	bl	b7390 <_ZN7MFRC5229PCD_ResetEv>
   b743c:	e7d8      	b.n	b73f0 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b743e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b743e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7442:	b089      	sub	sp, #36	; 0x24
   b7444:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b7448:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b744c:	9203      	str	r2, [sp, #12]
   b744e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b7452:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b7456:	9204      	str	r2, [sp, #16]
   b7458:	4604      	mov	r4, r0
   b745a:	468a      	mov	sl, r1
   b745c:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b745e:	f1b9 0f00 	cmp.w	r9, #0
   b7462:	d03e      	beq.n	b74e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b7464:	f899 8000 	ldrb.w	r8, [r9]
   b7468:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b746a:	2200      	movs	r2, #0
   b746c:	2102      	movs	r1, #2
   b746e:	4620      	mov	r0, r4
   b7470:	f7ff ff1b 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b7474:	227f      	movs	r2, #127	; 0x7f
   b7476:	2108      	movs	r1, #8
   b7478:	4620      	mov	r0, r4
   b747a:	f7ff ff16 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b747e:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b7482:	2280      	movs	r2, #128	; 0x80
   b7484:	2114      	movs	r1, #20
   b7486:	4620      	mov	r0, r4
   b7488:	f7ff ff24 	bl	b72d4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b748c:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b7490:	9b05      	ldr	r3, [sp, #20]
   b7492:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b7496:	2112      	movs	r1, #18
   b7498:	4620      	mov	r0, r4
   b749a:	f7ff feeb 	bl	b7274 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b749e:	4642      	mov	r2, r8
   b74a0:	211a      	movs	r1, #26
   b74a2:	4620      	mov	r0, r4
   b74a4:	f7ff ff01 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b74a8:	4652      	mov	r2, sl
   b74aa:	2102      	movs	r1, #2
   b74ac:	4620      	mov	r0, r4
   b74ae:	f7ff fefc 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b74b2:	f1ba 0f0c 	cmp.w	sl, #12
   b74b6:	d104      	bne.n	b74c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b74b8:	2280      	movs	r2, #128	; 0x80
   b74ba:	211a      	movs	r1, #26
   b74bc:	4620      	mov	r0, r4
   b74be:	f7ff ff09 	bl	b72d4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b74c2:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b74c6:	2108      	movs	r1, #8
   b74c8:	4620      	mov	r0, r4
   b74ca:	f7ff febc 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b74ce:	9b03      	ldr	r3, [sp, #12]
   b74d0:	4218      	tst	r0, r3
   b74d2:	d108      	bne.n	b74e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b74d4:	07c3      	lsls	r3, r0, #31
   b74d6:	d402      	bmi.n	b74de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b74d8:	f1b8 0801 	subs.w	r8, r8, #1
   b74dc:	d1f3      	bne.n	b74c6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b74de:	2004      	movs	r0, #4
   b74e0:	e04d      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b74e2:	46c8      	mov	r8, r9
   b74e4:	e7c0      	b.n	b7468 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b74e6:	210c      	movs	r1, #12
   b74e8:	4620      	mov	r0, r4
   b74ea:	f7ff feac 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b74ee:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b74f2:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b74f4:	d146      	bne.n	b7584 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b74f6:	b1dd      	cbz	r5, b7530 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b74f8:	b1d6      	cbz	r6, b7530 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b74fa:	2114      	movs	r1, #20
   b74fc:	4620      	mov	r0, r4
   b74fe:	f7ff fea2 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b7502:	7833      	ldrb	r3, [r6, #0]
   b7504:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b7506:	4602      	mov	r2, r0
		if (n > *backLen) {
   b7508:	d33e      	bcc.n	b7588 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b750a:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b750c:	462b      	mov	r3, r5
   b750e:	2112      	movs	r1, #18
   b7510:	4620      	mov	r0, r4
   b7512:	f8cd b000 	str.w	fp, [sp]
   b7516:	f7ff fe47 	bl	b71a8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b751a:	2118      	movs	r1, #24
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff fe92 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7522:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b7526:	f1b9 0f00 	cmp.w	r9, #0
   b752a:	d001      	beq.n	b7530 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b752c:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b7530:	f018 0f08 	tst.w	r8, #8
   b7534:	d12a      	bne.n	b758c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b7536:	b35d      	cbz	r5, b7590 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b7538:	b356      	cbz	r6, b7590 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b753a:	9b04      	ldr	r3, [sp, #16]
   b753c:	b343      	cbz	r3, b7590 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b753e:	7832      	ldrb	r2, [r6, #0]
   b7540:	2a01      	cmp	r2, #1
   b7542:	d103      	bne.n	b754c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b7544:	2f04      	cmp	r7, #4
   b7546:	d125      	bne.n	b7594 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b7548:	2009      	movs	r0, #9
   b754a:	e018      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b754c:	d922      	bls.n	b7594 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b754e:	bb0f      	cbnz	r7, b7594 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b7550:	3a02      	subs	r2, #2
   b7552:	ab07      	add	r3, sp, #28
   b7554:	b2d2      	uxtb	r2, r2
   b7556:	4629      	mov	r1, r5
   b7558:	4620      	mov	r0, r4
   b755a:	f7ff fedc 	bl	b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b755e:	2801      	cmp	r0, #1
   b7560:	d10d      	bne.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b7562:	7833      	ldrb	r3, [r6, #0]
   b7564:	441d      	add	r5, r3
   b7566:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b756a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b756e:	429a      	cmp	r2, r3
   b7570:	d110      	bne.n	b7594 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b7572:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b7576:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b757a:	429a      	cmp	r2, r3
   b757c:	d10a      	bne.n	b7594 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b757e:	b009      	add	sp, #36	; 0x24
   b7580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b7584:	2002      	movs	r0, #2
   b7586:	e7fa      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b7588:	2005      	movs	r0, #5
   b758a:	e7f8      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b758c:	2003      	movs	r0, #3
   b758e:	e7f6      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b7590:	2001      	movs	r0, #1
   b7592:	e7f4      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b7594:	2008      	movs	r0, #8
   b7596:	e7f2      	b.n	b757e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b7598 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b7598:	b510      	push	{r4, lr}
   b759a:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b759c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b75a0:	9405      	str	r4, [sp, #20]
   b75a2:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b75a6:	9404      	str	r4, [sp, #16]
   b75a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b75aa:	9403      	str	r4, [sp, #12]
   b75ac:	9c08      	ldr	r4, [sp, #32]
   b75ae:	9200      	str	r2, [sp, #0]
   b75b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b75b4:	2230      	movs	r2, #48	; 0x30
   b75b6:	460b      	mov	r3, r1
   b75b8:	210c      	movs	r1, #12
   b75ba:	f7ff ff40 	bl	b743e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b75be:	b006      	add	sp, #24
   b75c0:	bd10      	pop	{r4, pc}

000b75c2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b75c2:	b570      	push	{r4, r5, r6, lr}
   b75c4:	b088      	sub	sp, #32
   b75c6:	4606      	mov	r6, r0
   b75c8:	461c      	mov	r4, r3
   b75ca:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b75ce:	4615      	mov	r5, r2
   b75d0:	b31a      	cbz	r2, b761a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b75d2:	781b      	ldrb	r3, [r3, #0]
   b75d4:	2b01      	cmp	r3, #1
   b75d6:	d920      	bls.n	b761a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b75d8:	2280      	movs	r2, #128	; 0x80
   b75da:	211c      	movs	r1, #28
   b75dc:	f7ff fe88 	bl	b72f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b75e0:	2307      	movs	r3, #7
   b75e2:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b75e6:	2300      	movs	r3, #0
   b75e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b75ec:	f10d 031f 	add.w	r3, sp, #31
   b75f0:	e9cd 4300 	strd	r4, r3, [sp]
   b75f4:	2201      	movs	r2, #1
   b75f6:	462b      	mov	r3, r5
   b75f8:	f10d 0117 	add.w	r1, sp, #23
   b75fc:	4630      	mov	r0, r6
   b75fe:	f7ff ffcb 	bl	b7598 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b7602:	2801      	cmp	r0, #1
   b7604:	d107      	bne.n	b7616 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b7606:	7823      	ldrb	r3, [r4, #0]
   b7608:	2b02      	cmp	r3, #2
   b760a:	d108      	bne.n	b761e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b760c:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b7610:	2b00      	cmp	r3, #0
   b7612:	bf18      	it	ne
   b7614:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b7616:	b008      	add	sp, #32
   b7618:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b761a:	2005      	movs	r0, #5
   b761c:	e7fb      	b.n	b7616 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b761e:	2002      	movs	r0, #2
   b7620:	e7f9      	b.n	b7616 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b7622 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b7622:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b7624:	460a      	mov	r2, r1
   b7626:	2126      	movs	r1, #38	; 0x26
   b7628:	f7ff bfcb 	b.w	b75c2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b762c <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b762c:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b762e:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b7630:	f10d 0203 	add.w	r2, sp, #3
   b7634:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b7636:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b763a:	f7ff fff2 	bl	b7622 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b763e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b7642:	1e43      	subs	r3, r0, #1
   b7644:	4258      	negs	r0, r3
   b7646:	4158      	adcs	r0, r3
   b7648:	b003      	add	sp, #12
   b764a:	f85d fb04 	ldr.w	pc, [sp], #4

000b764e <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b764e:	b570      	push	{r4, r5, r6, lr}
   b7650:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b7652:	2350      	movs	r3, #80	; 0x50
   b7654:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b7658:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b765a:	f10d 0316 	add.w	r3, sp, #22
   b765e:	2202      	movs	r2, #2
   b7660:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b7662:	4606      	mov	r6, r0
	buffer[1] = 0;
   b7664:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7668:	f7ff fe55 	bl	b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b766c:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b766e:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b7670:	d10f      	bne.n	b7692 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b7672:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b7676:	e9cd 4400 	strd	r4, r4, [sp]
   b767a:	4623      	mov	r3, r4
   b767c:	2204      	movs	r2, #4
   b767e:	a905      	add	r1, sp, #20
   b7680:	4630      	mov	r0, r6
   b7682:	f7ff ff89 	bl	b7598 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b7686:	2804      	cmp	r0, #4
   b7688:	d003      	beq.n	b7692 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b768a:	2801      	cmp	r0, #1
   b768c:	bf14      	ite	ne
   b768e:	4605      	movne	r5, r0
   b7690:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b7692:	4628      	mov	r0, r5
   b7694:	b006      	add	sp, #24
   b7696:	bd70      	pop	{r4, r5, r6, pc}

000b7698 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b7698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b769a:	4606      	mov	r6, r0
   b769c:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b769e:	4614      	mov	r4, r2
   b76a0:	b1ca      	cbz	r2, b76d6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b76a2:	781b      	ldrb	r3, [r3, #0]
   b76a4:	2b11      	cmp	r3, #17
   b76a6:	d916      	bls.n	b76d6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b76a8:	2330      	movs	r3, #48	; 0x30
   b76aa:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b76ac:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b76ae:	1c93      	adds	r3, r2, #2
   b76b0:	4621      	mov	r1, r4
   b76b2:	2202      	movs	r2, #2
   b76b4:	f7ff fe2f 	bl	b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b76b8:	2801      	cmp	r0, #1
   b76ba:	d10a      	bne.n	b76d2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b76bc:	2300      	movs	r3, #0
   b76be:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b76c2:	9003      	str	r0, [sp, #12]
   b76c4:	9500      	str	r5, [sp, #0]
   b76c6:	4623      	mov	r3, r4
   b76c8:	2204      	movs	r2, #4
   b76ca:	4621      	mov	r1, r4
   b76cc:	4630      	mov	r0, r6
   b76ce:	f7ff ff63 	bl	b7598 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b76d2:	b004      	add	sp, #16
   b76d4:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b76d6:	2005      	movs	r0, #5
   b76d8:	e7fb      	b.n	b76d2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b76da <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b76da:	b510      	push	{r4, lr}
   b76dc:	b08a      	sub	sp, #40	; 0x28
   b76de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b76e0:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b76e4:	681a      	ldr	r2, [r3, #0]
   b76e6:	889b      	ldrh	r3, [r3, #4]
   b76e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b76ec:	7863      	ldrb	r3, [r4, #1]
   b76ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b76f2:	78a3      	ldrb	r3, [r4, #2]
   b76f4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b76f8:	78e3      	ldrb	r3, [r4, #3]
   b76fa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b76fe:	7923      	ldrb	r3, [r4, #4]
   b7700:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b7704:	2300      	movs	r3, #0
   b7706:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b770a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b770e:	9301      	str	r3, [sp, #4]
   b7710:	230c      	movs	r3, #12
	sendData[0] = command;
   b7712:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b7716:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b771a:	9300      	str	r3, [sp, #0]
   b771c:	2210      	movs	r2, #16
   b771e:	ab07      	add	r3, sp, #28
   b7720:	210e      	movs	r1, #14
   b7722:	f7ff fe8c 	bl	b743e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b7726:	b00a      	add	sp, #40	; 0x28
   b7728:	bd10      	pop	{r4, pc}

000b772a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b772a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b772e:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b7730:	b08b      	sub	sp, #44	; 0x2c
   b7732:	4682      	mov	sl, r0
   b7734:	460f      	mov	r7, r1
   b7736:	4690      	mov	r8, r2
	if (validBits > 80) {
   b7738:	f200 8140 	bhi.w	b79bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b773c:	2280      	movs	r2, #128	; 0x80
   b773e:	211c      	movs	r1, #28
   b7740:	f7ff fdd6 	bl	b72f0 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b7744:	2393      	movs	r3, #147	; 0x93
   b7746:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b774a:	f1b8 0f00 	cmp.w	r8, #0
   b774e:	f000 80bc 	beq.w	b78ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b7752:	783c      	ldrb	r4, [r7, #0]
   b7754:	2c04      	cmp	r4, #4
   b7756:	bf94      	ite	ls
   b7758:	2300      	movls	r3, #0
   b775a:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b775c:	2501      	movs	r5, #1
   b775e:	2600      	movs	r6, #0
   b7760:	e00b      	b.n	b777a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b7762:	2395      	movs	r3, #149	; 0x95
   b7764:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b7768:	f1b8 0f00 	cmp.w	r8, #0
   b776c:	f000 80af 	beq.w	b78ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b7770:	783c      	ldrb	r4, [r7, #0]
   b7772:	2c07      	cmp	r4, #7
   b7774:	bf94      	ite	ls
   b7776:	2300      	movls	r3, #0
   b7778:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b777a:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b777e:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b7780:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b7784:	2b00      	cmp	r3, #0
   b7786:	f000 80a4 	beq.w	b78d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b778a:	2288      	movs	r2, #136	; 0x88
   b778c:	f88d 201e 	strb.w	r2, [sp, #30]
   b7790:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b7792:	f014 0207 	ands.w	r2, r4, #7
   b7796:	bf18      	it	ne
   b7798:	2201      	movne	r2, #1
   b779a:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b779e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b77a2:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b77a4:	d01d      	beq.n	b77e2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b77a6:	2b00      	cmp	r3, #0
   b77a8:	bf14      	ite	ne
   b77aa:	f04f 0903 	movne.w	r9, #3
   b77ae:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b77b2:	f106 0c01 	add.w	ip, r6, #1
   b77b6:	4591      	cmp	r9, r2
   b77b8:	bf94      	ite	ls
   b77ba:	eb01 0e09 	addls.w	lr, r1, r9
   b77be:	eb01 0e02 	addhi.w	lr, r1, r2
   b77c2:	fa57 fc8c 	uxtab	ip, r7, ip
   b77c6:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b77ca:	460a      	mov	r2, r1
   b77cc:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b77d0:	3101      	adds	r1, #1
   b77d2:	b2c9      	uxtb	r1, r1
   b77d4:	445a      	add	r2, fp
   b77d6:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b77da:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b77de:	4571      	cmp	r1, lr
   b77e0:	d1f3      	bne.n	b77ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b77e2:	b10b      	cbz	r3, b77e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b77e4:	3008      	adds	r0, #8
   b77e6:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b77e8:	2c1f      	cmp	r4, #31
   b77ea:	dd74      	ble.n	b78d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b77ec:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b77f0:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b77f4:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b77f8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b77fc:	4053      	eors	r3, r2
   b77fe:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b7802:	4053      	eors	r3, r2
   b7804:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b7808:	4053      	eors	r3, r2
   b780a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b780e:	2207      	movs	r2, #7
   b7810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b7814:	a907      	add	r1, sp, #28
   b7816:	4650      	mov	r0, sl
   b7818:	f7ff fd7d 	bl	b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b781c:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b781e:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b7820:	f040 80c8 	bne.w	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b7824:	2300      	movs	r3, #0
   b7826:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b782a:	2303      	movs	r3, #3
   b782c:	f88d 301b 	strb.w	r3, [sp, #27]
   b7830:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b7832:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b7836:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b783a:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b783e:	9305      	str	r3, [sp, #20]
   b7840:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b7844:	b2d2      	uxtb	r2, r2
   b7846:	211a      	movs	r1, #26
   b7848:	4650      	mov	r0, sl
   b784a:	f7ff fd2e 	bl	b72aa <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b784e:	9b05      	ldr	r3, [sp, #20]
   b7850:	9302      	str	r3, [sp, #8]
   b7852:	f10d 031a 	add.w	r3, sp, #26
   b7856:	2200      	movs	r2, #0
   b7858:	9301      	str	r3, [sp, #4]
   b785a:	f10d 031b 	add.w	r3, sp, #27
   b785e:	9203      	str	r2, [sp, #12]
   b7860:	9300      	str	r3, [sp, #0]
   b7862:	464a      	mov	r2, r9
   b7864:	465b      	mov	r3, fp
   b7866:	a907      	add	r1, sp, #28
   b7868:	4650      	mov	r0, sl
   b786a:	f7ff fe95 	bl	b7598 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b786e:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b7870:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b7872:	d14c      	bne.n	b790e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b7874:	211c      	movs	r1, #28
   b7876:	4650      	mov	r0, sl
   b7878:	f7ff fce5 	bl	b7246 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b787c:	0681      	lsls	r1, r0, #26
   b787e:	f100 8099 	bmi.w	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b7882:	f010 001f 	ands.w	r0, r0, #31
   b7886:	bf08      	it	eq
   b7888:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b788a:	42a0      	cmp	r0, r4
   b788c:	f340 8087 	ble.w	b799e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b7890:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7892:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b7896:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7898:	f013 0307 	ands.w	r3, r3, #7
   b789c:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b78a0:	bf18      	it	ne
   b78a2:	2301      	movne	r3, #1
   b78a4:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b78a6:	4418      	add	r0, r3
   b78a8:	ab0a      	add	r3, sp, #40	; 0x28
   b78aa:	4418      	add	r0, r3
   b78ac:	2301      	movs	r3, #1
   b78ae:	fa03 f202 	lsl.w	r2, r3, r2
   b78b2:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b78b6:	4313      	orrs	r3, r2
   b78b8:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b78bc:	e794      	b.n	b77e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b78be:	2397      	movs	r3, #151	; 0x97
   b78c0:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b78c4:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b78c6:	4623      	mov	r3, r4
				break;
   b78c8:	e757      	b.n	b777a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b78ca:	4643      	mov	r3, r8
   b78cc:	e746      	b.n	b775c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b78ce:	4643      	mov	r3, r8
   b78d0:	e753      	b.n	b777a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b78d2:	2102      	movs	r1, #2
   b78d4:	e75d      	b.n	b7792 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b78d6:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b78d8:	3302      	adds	r3, #2
   b78da:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b78dc:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b78e0:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b78e4:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b78e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b78ec:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b78f0:	bf18      	it	ne
   b78f2:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b78f6:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b78f8:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b78fa:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b78fe:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b7902:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b7906:	f88d 301b 	strb.w	r3, [sp, #27]
   b790a:	9404      	str	r4, [sp, #16]
   b790c:	e795      	b.n	b783a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b790e:	2801      	cmp	r0, #1
   b7910:	d150      	bne.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b7912:	9b04      	ldr	r3, [sp, #16]
   b7914:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b7916:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b791a:	f77f af67 	ble.w	b77ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b791e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7922:	2b88      	cmp	r3, #136	; 0x88
   b7924:	d13e      	bne.n	b79a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b7926:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7928:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b792a:	3601      	adds	r6, #1
   b792c:	441a      	add	r2, r3
   b792e:	fa57 f686 	uxtab	r6, r7, r6
   b7932:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b7934:	4619      	mov	r1, r3
   b7936:	a80a      	add	r0, sp, #40	; 0x28
   b7938:	3301      	adds	r3, #1
   b793a:	4401      	add	r1, r0
   b793c:	b2db      	uxtb	r3, r3
   b793e:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b7942:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b7946:	4293      	cmp	r3, r2
   b7948:	d1f4      	bne.n	b7934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b794a:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b794e:	2e03      	cmp	r6, #3
   b7950:	d137      	bne.n	b79c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b7952:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b7956:	bba4      	cbnz	r4, b79c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7958:	f10d 031e 	add.w	r3, sp, #30
   b795c:	2201      	movs	r2, #1
   b795e:	4659      	mov	r1, fp
   b7960:	4650      	mov	r0, sl
   b7962:	f7ff fcd8 	bl	b7316 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b7966:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7968:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b796a:	d123      	bne.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b796c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7970:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b7974:	429a      	cmp	r2, r3
   b7976:	d127      	bne.n	b79c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b7978:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b797c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b7980:	429a      	cmp	r2, r3
   b7982:	d121      	bne.n	b79c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b7984:	f89b 3000 	ldrb.w	r3, [fp]
   b7988:	075a      	lsls	r2, r3, #29
   b798a:	d50e      	bpl.n	b79aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b798c:	3501      	adds	r5, #1
   b798e:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b7990:	2d03      	cmp	r5, #3
   b7992:	d094      	beq.n	b78be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b7994:	2d04      	cmp	r5, #4
   b7996:	d002      	beq.n	b799e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b7998:	2d02      	cmp	r5, #2
   b799a:	f43f aee2 	beq.w	b7762 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b799e:	f04f 0906 	mov.w	r9, #6
   b79a2:	e007      	b.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b79a4:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b79a6:	2204      	movs	r2, #4
   b79a8:	e7bf      	b.n	b792a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b79aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b79ae:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b79b0:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b79b2:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b79b4:	4648      	mov	r0, r9
   b79b6:	b00b      	add	sp, #44	; 0x2c
   b79b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b79bc:	f04f 0907 	mov.w	r9, #7
   b79c0:	e7f8      	b.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b79c2:	f04f 0902 	mov.w	r9, #2
   b79c6:	e7f5      	b.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b79c8:	f04f 0908 	mov.w	r9, #8
   b79cc:	e7f2      	b.n	b79b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b79ce <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b79ce:	b508      	push	{r3, lr}
   b79d0:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b79d2:	2200      	movs	r2, #0
   b79d4:	f7ff fea9 	bl	b772a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b79d8:	1e43      	subs	r3, r0, #1
   b79da:	4258      	negs	r0, r3
   b79dc:	4158      	adcs	r0, r3
   b79de:	bd08      	pop	{r3, pc}

000b79e0 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b79e0:	6001      	str	r1, [r0, #0]
}
   b79e2:	4770      	bx	lr

000b79e4 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b79e4:	b510      	push	{r4, lr}
   b79e6:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b79e8:	2101      	movs	r1, #1
   b79ea:	8800      	ldrh	r0, [r0, #0]
   b79ec:	f001 ff44 	bl	b9878 <pinMode>
	digitalWrite(_pin, LOW);
   b79f0:	8820      	ldrh	r0, [r4, #0]
   b79f2:	2100      	movs	r1, #0
   b79f4:	f001 ff51 	bl	b989a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b79f8:	2002      	movs	r0, #2
   b79fa:	f000 fe77 	bl	b86ec <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b79fe:	8820      	ldrh	r0, [r4, #0]
   b7a00:	2101      	movs	r1, #1
   b7a02:	f001 ff4a 	bl	b989a <digitalWrite>
   b7a06:	2005      	movs	r0, #5
   b7a08:	f000 fe70 	bl	b86ec <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b7a0c:	8820      	ldrh	r0, [r4, #0]
   b7a0e:	2100      	movs	r1, #0
   b7a10:	f001 ff43 	bl	b989a <digitalWrite>
	pinMode(_pin,INPUT);
   b7a14:	8820      	ldrh	r0, [r4, #0]
   b7a16:	2100      	movs	r1, #0
   b7a18:	f001 ff2e 	bl	b9878 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b7a1c:	8820      	ldrh	r0, [r4, #0]
   b7a1e:	2101      	movs	r1, #1
   b7a20:	f001 ff7e 	bl	b9920 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b7a24:	233a      	movs	r3, #58	; 0x3a
   b7a26:	fb90 f0f3 	sdiv	r0, r0, r3
   b7a2a:	bd10      	pop	{r4, pc}

000b7a2c <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b7a2c:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b7a2e:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b7a30:	2301      	movs	r3, #1
	_pin = pin;
   b7a32:	7181      	strb	r1, [r0, #6]
	_type = type;
   b7a34:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b7a36:	7403      	strb	r3, [r0, #16]
}
   b7a38:	bd10      	pop	{r4, pc}

000b7a3a <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b7a3a:	b510      	push	{r4, lr}
   b7a3c:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b7a3e:	2100      	movs	r1, #0
   b7a40:	7980      	ldrb	r0, [r0, #6]
   b7a42:	f001 ff19 	bl	b9878 <pinMode>
	digitalWrite(_pin, HIGH);
   b7a46:	79a0      	ldrb	r0, [r4, #6]
   b7a48:	2101      	movs	r1, #1
   b7a4a:	f001 ff26 	bl	b989a <digitalWrite>
	_lastreadtime = 0;
   b7a4e:	2300      	movs	r3, #0
   b7a50:	60e3      	str	r3, [r4, #12]
}
   b7a52:	bd10      	pop	{r4, pc}

000b7a54 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b7a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7a58:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7a5a:	f000 fe4f 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b7a5e:	68e3      	ldr	r3, [r4, #12]
   b7a60:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b7a62:	bf84      	itt	hi
   b7a64:	2300      	movhi	r3, #0
   b7a66:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b7a68:	7c23      	ldrb	r3, [r4, #16]
   b7a6a:	b923      	cbnz	r3, b7a76 <_ZN3DHT4readEv+0x22>
   b7a6c:	68e3      	ldr	r3, [r4, #12]
   b7a6e:	1ac0      	subs	r0, r0, r3
   b7a70:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b7a74:	d367      	bcc.n	b7b46 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b7a76:	2500      	movs	r5, #0
   b7a78:	7425      	strb	r5, [r4, #16]
   b7a7a:	f000 fe3f 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b7a7e:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b7a80:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7a82:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b7a84:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7a86:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b7a88:	f001 ff07 	bl	b989a <digitalWrite>
	delay(250);
   b7a8c:	20fa      	movs	r0, #250	; 0xfa
   b7a8e:	f001 fb33 	bl	b90f8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b7a92:	79a0      	ldrb	r0, [r4, #6]
   b7a94:	2101      	movs	r1, #1
   b7a96:	f001 feef 	bl	b9878 <pinMode>
	digitalWrite(_pin, LOW);
   b7a9a:	4629      	mov	r1, r5
   b7a9c:	79a0      	ldrb	r0, [r4, #6]
   b7a9e:	f001 fefc 	bl	b989a <digitalWrite>
	delay(20);
   b7aa2:	2014      	movs	r0, #20
   b7aa4:	f001 fb28 	bl	b90f8 <delay>
	noInterrupts();
   b7aa8:	f001 fce2 	bl	b9470 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b7aac:	2101      	movs	r1, #1
   b7aae:	79a0      	ldrb	r0, [r4, #6]
   b7ab0:	f001 fef3 	bl	b989a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7ab4:	2028      	movs	r0, #40	; 0x28
   b7ab6:	f000 fe19 	bl	b86ec <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b7aba:	79a0      	ldrb	r0, [r4, #6]
   b7abc:	4629      	mov	r1, r5
   b7abe:	f001 fedb 	bl	b9878 <pinMode>
	uint8_t j = 0, i;
   b7ac2:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b7ac4:	2701      	movs	r7, #1
   b7ac6:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b7aca:	79a0      	ldrb	r0, [r4, #6]
   b7acc:	f001 fefe 	bl	b98cc <digitalRead>
   b7ad0:	42b8      	cmp	r0, r7
   b7ad2:	fa5f f988 	uxtb.w	r9, r8
   b7ad6:	d108      	bne.n	b7aea <_ZN3DHT4readEv+0x96>
   b7ad8:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b7ada:	f108 0801 	add.w	r8, r8, #1
   b7ade:	f000 fe05 	bl	b86ec <HAL_Delay_Microseconds>
   b7ae2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7ae6:	d1f0      	bne.n	b7aca <_ZN3DHT4readEv+0x76>
   b7ae8:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b7aea:	79a0      	ldrb	r0, [r4, #6]
   b7aec:	f001 feee 	bl	b98cc <digitalRead>

		if (counter == 255) break;
   b7af0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b7af4:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b7af6:	d014      	beq.n	b7b22 <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b7af8:	2d03      	cmp	r5, #3
   b7afa:	d90e      	bls.n	b7b1a <_ZN3DHT4readEv+0xc6>
   b7afc:	07ea      	lsls	r2, r5, #31
   b7afe:	d40c      	bmi.n	b7b1a <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b7b00:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b7b02:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b7b04:	5ca3      	ldrb	r3, [r4, r2]
   b7b06:	005b      	lsls	r3, r3, #1
   b7b08:	b2db      	uxtb	r3, r3
   b7b0a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b7b0c:	7a21      	ldrb	r1, [r4, #8]
   b7b0e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b7b10:	bf3c      	itt	cc
   b7b12:	f043 0301 	orrcc.w	r3, r3, #1
   b7b16:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b7b18:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b7b1a:	3501      	adds	r5, #1
   b7b1c:	b2ed      	uxtb	r5, r5
   b7b1e:	2d55      	cmp	r5, #85	; 0x55
   b7b20:	d1d1      	bne.n	b7ac6 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b7b22:	f001 fca7 	bl	b9474 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b7b26:	2e27      	cmp	r6, #39	; 0x27
   b7b28:	d90f      	bls.n	b7b4a <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b7b2a:	7863      	ldrb	r3, [r4, #1]
   b7b2c:	7820      	ldrb	r0, [r4, #0]
   b7b2e:	4418      	add	r0, r3
   b7b30:	78a3      	ldrb	r3, [r4, #2]
   b7b32:	4418      	add	r0, r3
   b7b34:	78e3      	ldrb	r3, [r4, #3]
   b7b36:	4418      	add	r0, r3
   b7b38:	7923      	ldrb	r3, [r4, #4]
   b7b3a:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b7b3c:	1ac3      	subs	r3, r0, r3
   b7b3e:	4258      	negs	r0, r3
   b7b40:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b7b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b7b46:	2001      	movs	r0, #1
   b7b48:	e7fb      	b.n	b7b42 <_ZN3DHT4readEv+0xee>
	return false;
   b7b4a:	2000      	movs	r0, #0
   b7b4c:	e7f9      	b.n	b7b42 <_ZN3DHT4readEv+0xee>
	...

000b7b50 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b7b50:	b510      	push	{r4, lr}
   b7b52:	4604      	mov	r4, r0
	if (read()) {
   b7b54:	f7ff ff7e 	bl	b7a54 <_ZN3DHT4readEv>
   b7b58:	b320      	cbz	r0, b7ba4 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b7b5a:	79e3      	ldrb	r3, [r4, #7]
   b7b5c:	2b0b      	cmp	r3, #11
   b7b5e:	d01b      	beq.n	b7b98 <_ZN3DHT15readTemperatureEv+0x48>
   b7b60:	3b15      	subs	r3, #21
   b7b62:	2b01      	cmp	r3, #1
   b7b64:	d81e      	bhi.n	b7ba4 <_ZN3DHT15readTemperatureEv+0x54>
   b7b66:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b7b68:	eddf 6a10 	vldr	s13, [pc, #64]	; b7bac <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b7b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b7b70:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b7b74:	78e2      	ldrb	r2, [r4, #3]
   b7b76:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b7b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b7b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b7b82:	061b      	lsls	r3, r3, #24
				f += data[3];
   b7b84:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b7b88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b7b8c:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b7b90:	d507      	bpl.n	b7ba2 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b7b92:	eeb1 0a40 	vneg.f32	s0, s0
   b7b96:	e004      	b.n	b7ba2 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b7b98:	78a3      	ldrb	r3, [r4, #2]
   b7b9a:	ee00 3a10 	vmov	s0, r3
   b7b9e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b7ba2:	bd10      	pop	{r4, pc}
		switch (_type) {
   b7ba4:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7bb0 <_ZN3DHT15readTemperatureEv+0x60>
   b7ba8:	e7fb      	b.n	b7ba2 <_ZN3DHT15readTemperatureEv+0x52>
   b7baa:	bf00      	nop
   b7bac:	43800000 	.word	0x43800000
   b7bb0:	7fc00000 	.word	0x7fc00000

000b7bb4 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b7bb4:	f7ff bfcc 	b.w	b7b50 <_ZN3DHT15readTemperatureEv>

000b7bb8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7bb8:	b510      	push	{r4, lr}
   b7bba:	4b04      	ldr	r3, [pc, #16]	; (b7bcc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7bbc:	6003      	str	r3, [r0, #0]
   b7bbe:	4604      	mov	r4, r0
  if(buffer) {
   b7bc0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7bc2:	b108      	cbz	r0, b7bc8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7bc4:	f000 ff8e 	bl	b8ae4 <free>
    buffer = NULL;
  }
}
   b7bc8:	4620      	mov	r0, r4
   b7bca:	bd10      	pop	{r4, pc}
   b7bcc:	000bbb74 	.word	0x000bbb74

000b7bd0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7bd0:	b510      	push	{r4, lr}
   b7bd2:	4604      	mov	r4, r0
}
   b7bd4:	f7ff fff0 	bl	b7bb8 <_ZN16Adafruit_SSD1306D1Ev>
   b7bd8:	4620      	mov	r0, r4
   b7bda:	2150      	movs	r1, #80	; 0x50
   b7bdc:	f7fc fa5b 	bl	b4096 <_ZdlPvj>
   b7be0:	4620      	mov	r0, r4
   b7be2:	bd10      	pop	{r4, pc}

000b7be4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7be4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7be6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7be8:	db4b      	blt.n	b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7bea:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b7bee:	428c      	cmp	r4, r1
   b7bf0:	dd47      	ble.n	b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7bf2:	2a00      	cmp	r2, #0
   b7bf4:	db45      	blt.n	b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7bf6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7bfa:	4294      	cmp	r4, r2
   b7bfc:	dd41      	ble.n	b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b7bfe:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b7c00:	2c02      	cmp	r4, #2
   b7c02:	d01f      	beq.n	b7c44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7c04:	2c03      	cmp	r4, #3
   b7c06:	d026      	beq.n	b7c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7c08:	2c01      	cmp	r4, #1
   b7c0a:	d104      	bne.n	b7c16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7c0c:	8904      	ldrh	r4, [r0, #8]
   b7c0e:	43d2      	mvns	r2, r2
   b7c10:	4414      	add	r4, r2
      break;
   b7c12:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7c14:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7c16:	2b01      	cmp	r3, #1
   b7c18:	d023      	beq.n	b7c62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7c1a:	2b02      	cmp	r3, #2
   b7c1c:	d032      	beq.n	b7c84 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b7c1e:	bb83      	cbnz	r3, b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b7c20:	2a00      	cmp	r2, #0
   b7c22:	4613      	mov	r3, r2
   b7c24:	8904      	ldrh	r4, [r0, #8]
   b7c26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7c28:	bfb8      	it	lt
   b7c2a:	1dd3      	addlt	r3, r2, #7
   b7c2c:	10db      	asrs	r3, r3, #3
   b7c2e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7c32:	f002 0207 	and.w	r2, r2, #7
   b7c36:	2301      	movs	r3, #1
   b7c38:	4093      	lsls	r3, r2
   b7c3a:	5c42      	ldrb	r2, [r0, r1]
   b7c3c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7c40:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b7c42:	e01e      	b.n	b7c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b7c44:	8904      	ldrh	r4, [r0, #8]
   b7c46:	3c01      	subs	r4, #1
   b7c48:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b7c4a:	8944      	ldrh	r4, [r0, #10]
   b7c4c:	43d2      	mvns	r2, r2
   b7c4e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b7c50:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b7c52:	b212      	sxth	r2, r2
      break;
   b7c54:	e7df      	b.n	b7c16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b7c56:	8944      	ldrh	r4, [r0, #10]
   b7c58:	3c01      	subs	r4, #1
   b7c5a:	1a64      	subs	r4, r4, r1
      break;
   b7c5c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b7c5e:	b222      	sxth	r2, r4
      break;
   b7c60:	e7d9      	b.n	b7c16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b7c62:	2a00      	cmp	r2, #0
   b7c64:	8904      	ldrh	r4, [r0, #8]
   b7c66:	4613      	mov	r3, r2
   b7c68:	bfb8      	it	lt
   b7c6a:	1dd3      	addlt	r3, r2, #7
   b7c6c:	10db      	asrs	r3, r3, #3
   b7c6e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7c72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7c74:	f002 0007 	and.w	r0, r2, #7
   b7c78:	2201      	movs	r2, #1
   b7c7a:	4082      	lsls	r2, r0
   b7c7c:	5c58      	ldrb	r0, [r3, r1]
   b7c7e:	4302      	orrs	r2, r0
   b7c80:	545a      	strb	r2, [r3, r1]
}
   b7c82:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7c84:	2a00      	cmp	r2, #0
   b7c86:	4613      	mov	r3, r2
   b7c88:	8904      	ldrh	r4, [r0, #8]
   b7c8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7c8c:	bfb8      	it	lt
   b7c8e:	1dd3      	addlt	r3, r2, #7
   b7c90:	10db      	asrs	r3, r3, #3
   b7c92:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7c96:	f002 0207 	and.w	r2, r2, #7
   b7c9a:	2301      	movs	r3, #1
   b7c9c:	fa03 f202 	lsl.w	r2, r3, r2
   b7ca0:	5c43      	ldrb	r3, [r0, r1]
   b7ca2:	405a      	eors	r2, r3
   b7ca4:	e7cc      	b.n	b7c40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7ca8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7ca8:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b7caa:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7cac:	4604      	mov	r4, r0
   b7cae:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b7cb0:	2180      	movs	r1, #128	; 0x80
   b7cb2:	f7fe ffcf 	bl	b6c54 <_ZN12Adafruit_GFXC1Ess>
   b7cb6:	2500      	movs	r5, #0
   b7cb8:	4b0d      	ldr	r3, [pc, #52]	; (b7cf0 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b7cba:	6023      	str	r3, [r4, #0]
   b7cbc:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b7cbe:	f001 fe9f 	bl	b9a00 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b7cc2:	23ff      	movs	r3, #255	; 0xff
   b7cc4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b7cc8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b7ccc:	4b09      	ldr	r3, [pc, #36]	; (b7cf4 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b7cce:	63a3      	str	r3, [r4, #56]	; 0x38
   b7cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7cd4:	2301      	movs	r3, #1
   b7cd6:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b7cda:	86a2      	strh	r2, [r4, #52]	; 0x34
   b7cdc:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b7ce0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b7ce4:	6425      	str	r5, [r4, #64]	; 0x40
   b7ce6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b7cea:	4620      	mov	r0, r4
   b7cec:	bd70      	pop	{r4, r5, r6, pc}
   b7cee:	bf00      	nop
   b7cf0:	000bbb74 	.word	0x000bbb74
   b7cf4:	000bb580 	.word	0x000bb580

000b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7cfa:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7cfc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7cfe:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7d00:	b190      	cbz	r0, b7d28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b7d02:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7d06:	f001 fc7f 	bl	b9608 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7d0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7d0c:	6803      	ldr	r3, [r0, #0]
   b7d0e:	2100      	movs	r1, #0
   b7d10:	689b      	ldr	r3, [r3, #8]
   b7d12:	4798      	blx	r3
    WIRE_WRITE(c);
   b7d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7d16:	6803      	ldr	r3, [r0, #0]
   b7d18:	4629      	mov	r1, r5
   b7d1a:	689b      	ldr	r3, [r3, #8]
   b7d1c:	4798      	blx	r3
    wire->endTransmission();
   b7d1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b7d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b7d24:	f001 bc77 	b.w	b9616 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7d28:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7d2c:	4601      	mov	r1, r0
   b7d2e:	b298      	uxth	r0, r3
   b7d30:	f001 fdb3 	bl	b989a <digitalWrite>
  if(spi) {
   b7d34:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7d36:	b120      	cbz	r0, b7d42 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b7d38:	4629      	mov	r1, r5
}
   b7d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b7d3e:	f000 bff3 	b.w	b8d28 <_ZN8SPIClass8transferEh>
   b7d42:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7d44:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7d46:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7d4a:	ea05 0107 	and.w	r1, r5, r7
   b7d4e:	b280      	uxth	r0, r0
   b7d50:	f001 fda3 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7d54:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7d58:	2101      	movs	r1, #1
   b7d5a:	b280      	uxth	r0, r0
   b7d5c:	f001 fd9d 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7d60:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7d64:	2100      	movs	r1, #0
   b7d66:	b280      	uxth	r0, r0
   b7d68:	f001 fd97 	bl	b989a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7d6c:	3e01      	subs	r6, #1
   b7d6e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b7d72:	d1e8      	bne.n	b7d46 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b7d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d76 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7d76:	b538      	push	{r3, r4, r5, lr}
   b7d78:	4604      	mov	r4, r0
  TRANSACTION_START
   b7d7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7d7c:	460d      	mov	r5, r1
  TRANSACTION_START
   b7d7e:	b180      	cbz	r0, b7da2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b7d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7d82:	f001 fc33 	bl	b95ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b7d86:	2d00      	cmp	r5, #0
   b7d88:	4620      	mov	r0, r4
   b7d8a:	bf14      	ite	ne
   b7d8c:	21a7      	movne	r1, #167	; 0xa7
   b7d8e:	21a6      	moveq	r1, #166	; 0xa6
   b7d90:	f7ff ffb2 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b7d94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7d96:	b188      	cbz	r0, b7dbc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b7d98:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7d9e:	f001 bc25 	b.w	b95ec <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b7da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7da4:	b118      	cbz	r0, b7dae <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b7da6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7daa:	f000 ff4f 	bl	b8c4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7dae:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7db2:	2100      	movs	r1, #0
   b7db4:	b280      	uxth	r0, r0
   b7db6:	f001 fd70 	bl	b989a <digitalWrite>
   b7dba:	e7e4      	b.n	b7d86 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b7dbc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7dc0:	2101      	movs	r1, #1
   b7dc2:	b280      	uxth	r0, r0
   b7dc4:	f001 fd69 	bl	b989a <digitalWrite>
   b7dc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7dca:	b118      	cbz	r0, b7dd4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b7dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b7dd0:	f000 bf22 	b.w	b8c18 <_ZN8SPIClass14endTransactionEv>
}
   b7dd4:	bd38      	pop	{r3, r4, r5, pc}

000b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7dd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7dda:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7ddc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7dde:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7de0:	188f      	adds	r7, r1, r2
   b7de2:	b340      	cbz	r0, b7e36 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b7de4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7de8:	f001 fc0e 	bl	b9608 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7dee:	6803      	ldr	r3, [r0, #0]
   b7df0:	2100      	movs	r1, #0
   b7df2:	689b      	ldr	r3, [r3, #8]
   b7df4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7df6:	2601      	movs	r6, #1
    while(n--) {
   b7df8:	42af      	cmp	r7, r5
        wire->endTransmission();
   b7dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b7dfc:	d017      	beq.n	b7e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b7dfe:	2e1f      	cmp	r6, #31
   b7e00:	d90c      	bls.n	b7e1c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b7e02:	f001 fc08 	bl	b9616 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7e06:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7e0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e0c:	f001 fbfc 	bl	b9608 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7e10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e12:	6803      	ldr	r3, [r0, #0]
   b7e14:	2100      	movs	r1, #0
   b7e16:	689b      	ldr	r3, [r3, #8]
   b7e18:	4798      	blx	r3
        bytesOut = 1;
   b7e1a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e1e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7e22:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7e24:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7e26:	689b      	ldr	r3, [r3, #8]
   b7e28:	4798      	blx	r3
      bytesOut++;
   b7e2a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b7e2c:	e7e4      	b.n	b7df8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b7e2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b7e32:	f001 bbf0 	b.w	b9616 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7e36:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7e3a:	4601      	mov	r1, r0
   b7e3c:	b298      	uxth	r0, r3
   b7e3e:	f001 fd2c 	bl	b989a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7e42:	42bd      	cmp	r5, r7
   b7e44:	d022      	beq.n	b7e8c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b7e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7e48:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b7e4c:	b118      	cbz	r0, b7e56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b7e4e:	4649      	mov	r1, r9
   b7e50:	f000 ff6a 	bl	b8d28 <_ZN8SPIClass8transferEh>
   b7e54:	e7f5      	b.n	b7e42 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b7e56:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7e58:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7e5c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7e60:	ea09 0108 	and.w	r1, r9, r8
   b7e64:	b280      	uxth	r0, r0
   b7e66:	f001 fd18 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7e6a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7e6e:	2101      	movs	r1, #1
   b7e70:	b280      	uxth	r0, r0
   b7e72:	f001 fd12 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7e76:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7e7a:	2100      	movs	r1, #0
   b7e7c:	b280      	uxth	r0, r0
   b7e7e:	f001 fd0c 	bl	b989a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7e82:	3e01      	subs	r6, #1
   b7e84:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7e88:	d1e8      	bne.n	b7e5c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7e8a:	e7da      	b.n	b7e42 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b7e90:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7e94:	1dda      	adds	r2, r3, #7
   b7e96:	bf48      	it	mi
   b7e98:	f103 020e 	addmi.w	r2, r3, #14
   b7e9c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7ea0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7ea2:	10d2      	asrs	r2, r2, #3
   b7ea4:	435a      	muls	r2, r3
   b7ea6:	2100      	movs	r1, #0
   b7ea8:	f001 bfa8 	b.w	b9dfc <memset>

000b7eac <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7eac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7eb0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7eb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7eb4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7eb8:	4604      	mov	r4, r0
   b7eba:	460f      	mov	r7, r1
   b7ebc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7ebe:	b1d3      	cbz	r3, b7ef6 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	f7ff ffe5 	bl	b7e90 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7ec6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b7eca:	2a20      	cmp	r2, #32
   b7ecc:	dc25      	bgt.n	b7f1a <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7ece:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b7ed2:	2320      	movs	r3, #32
   b7ed4:	3a20      	subs	r2, #32
   b7ed6:	3973      	subs	r1, #115	; 0x73
   b7ed8:	2001      	movs	r0, #1
   b7eda:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b7ede:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b7ee2:	2373      	movs	r3, #115	; 0x73
   b7ee4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7ee8:	9300      	str	r3, [sp, #0]
   b7eea:	f342 024f 	sbfx	r2, r2, #1, #16
   b7eee:	4b85      	ldr	r3, [pc, #532]	; (b8104 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b7ef0:	f341 014f 	sbfx	r1, r1, #1, #16
   b7ef4:	e01b      	b.n	b7f2e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7ef6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7efa:	1dd8      	adds	r0, r3, #7
   b7efc:	bf48      	it	mi
   b7efe:	f103 000e 	addmi.w	r0, r3, #14
   b7f02:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b7f06:	10c0      	asrs	r0, r0, #3
   b7f08:	4358      	muls	r0, r3
   b7f0a:	f000 fde3 	bl	b8ad4 <malloc>
   b7f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b7f10:	2800      	cmp	r0, #0
   b7f12:	d1d5      	bne.n	b7ec0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b7f14:	b004      	add	sp, #16
   b7f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b7f1a:	2340      	movs	r3, #64	; 0x40
   b7f1c:	f04f 0c01 	mov.w	ip, #1
   b7f20:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b7f24:	2380      	movs	r3, #128	; 0x80
   b7f26:	9300      	str	r3, [sp, #0]
   b7f28:	2200      	movs	r2, #0
   b7f2a:	4b77      	ldr	r3, [pc, #476]	; (b8108 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b7f2c:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7f2e:	4620      	mov	r0, r4
   b7f30:	f7fe fea6 	bl	b6c80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b7f34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b7f36:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b7f3a:	2800      	cmp	r0, #0
   b7f3c:	d078      	beq.n	b8030 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7f3e:	2d00      	cmp	r5, #0
   b7f40:	d174      	bne.n	b802c <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b7f42:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7f46:	2b20      	cmp	r3, #32
   b7f48:	bf0c      	ite	eq
   b7f4a:	253c      	moveq	r5, #60	; 0x3c
   b7f4c:	253d      	movne	r5, #61	; 0x3d
   b7f4e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b7f52:	f1b8 0f00 	cmp.w	r8, #0
   b7f56:	d001      	beq.n	b7f5c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b7f58:	f001 fb4c 	bl	b95f4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b7f5c:	b1fe      	cbz	r6, b7f9e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b7f5e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7f62:	2800      	cmp	r0, #0
   b7f64:	db1b      	blt.n	b7f9e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b7f66:	2101      	movs	r1, #1
   b7f68:	b280      	uxth	r0, r0
   b7f6a:	f001 fc85 	bl	b9878 <pinMode>
    digitalWrite(rstPin, HIGH);
   b7f6e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7f72:	2101      	movs	r1, #1
   b7f74:	b280      	uxth	r0, r0
   b7f76:	f001 fc90 	bl	b989a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7f7a:	2001      	movs	r0, #1
   b7f7c:	f001 f8bc 	bl	b90f8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7f80:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7f84:	2100      	movs	r1, #0
   b7f86:	b280      	uxth	r0, r0
   b7f88:	f001 fc87 	bl	b989a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7f8c:	200a      	movs	r0, #10
   b7f8e:	f001 f8b3 	bl	b90f8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b7f92:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b7f96:	2101      	movs	r1, #1
   b7f98:	b280      	uxth	r0, r0
   b7f9a:	f001 fc7e 	bl	b989a <digitalWrite>
  TRANSACTION_START
   b7f9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7fa0:	2800      	cmp	r0, #0
   b7fa2:	d074      	beq.n	b808e <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b7fa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7fa6:	f001 fb21 	bl	b95ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7faa:	2204      	movs	r2, #4
   b7fac:	4957      	ldr	r1, [pc, #348]	; (b810c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b7fae:	4620      	mov	r0, r4
   b7fb0:	f7ff ff11 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b7fb4:	8961      	ldrh	r1, [r4, #10]
   b7fb6:	3901      	subs	r1, #1
   b7fb8:	b2c9      	uxtb	r1, r1
   b7fba:	4620      	mov	r0, r4
   b7fbc:	f7ff fe9c 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b7fc0:	4953      	ldr	r1, [pc, #332]	; (b8110 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b7fc2:	2204      	movs	r2, #4
   b7fc4:	4620      	mov	r0, r4
   b7fc6:	f7ff ff06 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b7fca:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7fce:	2b01      	cmp	r3, #1
   b7fd0:	bf0c      	ite	eq
   b7fd2:	2110      	moveq	r1, #16
   b7fd4:	2114      	movne	r1, #20
   b7fd6:	4620      	mov	r0, r4
   b7fd8:	f7ff fe8e 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b7fdc:	2204      	movs	r2, #4
   b7fde:	494d      	ldr	r1, [pc, #308]	; (b8114 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	f7ff fef8 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b7fe6:	68a3      	ldr	r3, [r4, #8]
   b7fe8:	4a4b      	ldr	r2, [pc, #300]	; (b8118 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7fea:	4293      	cmp	r3, r2
   b7fec:	d15c      	bne.n	b80a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b7fee:	494b      	ldr	r1, [pc, #300]	; (b811c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b7ff0:	2204      	movs	r2, #4
   b7ff2:	4620      	mov	r0, r4
   b7ff4:	f7ff feef 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b7ff8:	21d9      	movs	r1, #217	; 0xd9
   b7ffa:	4620      	mov	r0, r4
   b7ffc:	f7ff fe7c 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8000:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8004:	2b01      	cmp	r3, #1
   b8006:	bf0c      	ite	eq
   b8008:	2122      	moveq	r1, #34	; 0x22
   b800a:	21f1      	movne	r1, #241	; 0xf1
   b800c:	4620      	mov	r0, r4
   b800e:	f7ff fe73 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8012:	4620      	mov	r0, r4
   b8014:	4942      	ldr	r1, [pc, #264]	; (b8120 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8016:	2206      	movs	r2, #6
   b8018:	f7ff fedd 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b801c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b801e:	2800      	cmp	r0, #0
   b8020:	d063      	beq.n	b80ea <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b8022:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8024:	f001 fae2 	bl	b95ec <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b8028:	2001      	movs	r0, #1
   b802a:	e773      	b.n	b7f14 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b802c:	b26d      	sxtb	r5, r5
   b802e:	e78e      	b.n	b7f4e <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8030:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8034:	2101      	movs	r1, #1
   b8036:	b280      	uxth	r0, r0
   b8038:	f001 fc1e 	bl	b9878 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b803c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8040:	2101      	movs	r1, #1
   b8042:	b280      	uxth	r0, r0
   b8044:	f001 fc18 	bl	b9878 <pinMode>
    SSD1306_DESELECT
   b8048:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b804c:	2101      	movs	r1, #1
   b804e:	b280      	uxth	r0, r0
   b8050:	f001 fc23 	bl	b989a <digitalWrite>
    if(spi) { // Hardware SPI
   b8054:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b8056:	b13d      	cbz	r5, b8068 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b8058:	f1b8 0f00 	cmp.w	r8, #0
   b805c:	f43f af7e 	beq.w	b7f5c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8060:	4628      	mov	r0, r5
   b8062:	f000 fdc5 	bl	b8bf0 <_ZN8SPIClass5beginEv>
   b8066:	e779      	b.n	b7f5c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b8068:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b806c:	2101      	movs	r1, #1
   b806e:	b280      	uxth	r0, r0
   b8070:	f001 fc02 	bl	b9878 <pinMode>
      pinMode(clkPin , OUTPUT);
   b8074:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8078:	2101      	movs	r1, #1
   b807a:	b280      	uxth	r0, r0
   b807c:	f001 fbfc 	bl	b9878 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8080:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8084:	4629      	mov	r1, r5
   b8086:	b280      	uxth	r0, r0
   b8088:	f001 fc07 	bl	b989a <digitalWrite>
   b808c:	e766      	b.n	b7f5c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b808e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8090:	b118      	cbz	r0, b809a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8092:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8096:	f000 fdd9 	bl	b8c4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b809a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b809e:	2100      	movs	r1, #0
   b80a0:	b280      	uxth	r0, r0
   b80a2:	f001 fbfa 	bl	b989a <digitalWrite>
   b80a6:	e780      	b.n	b7faa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b80a8:	4a1e      	ldr	r2, [pc, #120]	; (b8124 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b80aa:	4293      	cmp	r3, r2
   b80ac:	d10e      	bne.n	b80cc <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b80ae:	491e      	ldr	r1, [pc, #120]	; (b8128 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b80b0:	2203      	movs	r2, #3
   b80b2:	4620      	mov	r0, r4
   b80b4:	f7ff fe8f 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b80b8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b80bc:	2b01      	cmp	r3, #1
   b80be:	bf0c      	ite	eq
   b80c0:	219f      	moveq	r1, #159	; 0x9f
   b80c2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b80c4:	4620      	mov	r0, r4
   b80c6:	f7ff fe17 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b80ca:	e795      	b.n	b7ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b80cc:	4a17      	ldr	r2, [pc, #92]	; (b812c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b80ce:	4293      	cmp	r3, r2
   b80d0:	d192      	bne.n	b7ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b80d2:	4917      	ldr	r1, [pc, #92]	; (b8130 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b80d4:	2203      	movs	r2, #3
   b80d6:	4620      	mov	r0, r4
   b80d8:	f7ff fe7d 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b80dc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b80e0:	2b01      	cmp	r3, #1
   b80e2:	bf0c      	ite	eq
   b80e4:	2110      	moveq	r1, #16
   b80e6:	21af      	movne	r1, #175	; 0xaf
   b80e8:	e7ec      	b.n	b80c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b80ea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b80ee:	2101      	movs	r1, #1
   b80f0:	b280      	uxth	r0, r0
   b80f2:	f001 fbd2 	bl	b989a <digitalWrite>
   b80f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b80f8:	2800      	cmp	r0, #0
   b80fa:	d095      	beq.n	b8028 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b80fc:	f000 fd8c 	bl	b8c18 <_ZN8SPIClass14endTransactionEv>
   b8100:	e792      	b.n	b8028 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b8102:	bf00      	nop
   b8104:	000bb58c 	.word	0x000bb58c
   b8108:	000bb76c 	.word	0x000bb76c
   b810c:	000bbbd4 	.word	0x000bbbd4
   b8110:	000bbbd8 	.word	0x000bbbd8
   b8114:	000bbbdc 	.word	0x000bbbdc
   b8118:	00200080 	.word	0x00200080
   b811c:	000bbbe6 	.word	0x000bbbe6
   b8120:	000bbbe0 	.word	0x000bbbe0
   b8124:	00400080 	.word	0x00400080
   b8128:	000bbbea 	.word	0x000bbbea
   b812c:	00100060 	.word	0x00100060
   b8130:	000bbbed 	.word	0x000bbbed

000b8134 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8134:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8136:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8138:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b813c:	db3d      	blt.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b813e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8142:	4294      	cmp	r4, r2
   b8144:	dd39      	ble.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b8146:	2900      	cmp	r1, #0
      w += x;
   b8148:	bfbe      	ittt	lt
   b814a:	185b      	addlt	r3, r3, r1
   b814c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b814e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8150:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b8154:	18ce      	adds	r6, r1, r3
   b8156:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8158:	bfc4      	itt	gt
   b815a:	1a63      	subgt	r3, r4, r1
   b815c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b815e:	2b00      	cmp	r3, #0
   b8160:	dd2b      	ble.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b8162:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8164:	10d6      	asrs	r6, r2, #3
   b8166:	fb14 1106 	smlabb	r1, r4, r6, r1
   b816a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b816c:	f002 0007 	and.w	r0, r2, #7
   b8170:	2201      	movs	r2, #1
   b8172:	4082      	lsls	r2, r0
      switch(color) {
   b8174:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b8176:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8178:	d016      	beq.n	b81a8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b817a:	2d02      	cmp	r5, #2
   b817c:	d00b      	beq.n	b8196 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b817e:	b9e5      	cbnz	r5, b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8180:	43d2      	mvns	r2, r2
   b8182:	b2d2      	uxtb	r2, r2
   b8184:	440b      	add	r3, r1
   b8186:	4299      	cmp	r1, r3
   b8188:	d017      	beq.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b818a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b818e:	4010      	ands	r0, r2
   b8190:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8194:	e7f7      	b.n	b8186 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b8196:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8198:	4299      	cmp	r1, r3
   b819a:	d00e      	beq.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b819c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b81a0:	4050      	eors	r0, r2
   b81a2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b81a6:	e7f7      	b.n	b8198 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b81a8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b81aa:	4299      	cmp	r1, r3
   b81ac:	d005      	beq.n	b81ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b81ae:	f811 0b01 	ldrb.w	r0, [r1], #1
   b81b2:	4310      	orrs	r0, r2
   b81b4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b81b8:	e7f7      	b.n	b81aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b81ba:	bd70      	pop	{r4, r5, r6, pc}

000b81bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b81bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b81be:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b81c0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b81c4:	db76      	blt.n	b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b81c6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b81ca:	42b1      	cmp	r1, r6
   b81cc:	da72      	bge.n	b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b81ce:	2a00      	cmp	r2, #0
      __h += __y;
   b81d0:	bfbe      	ittt	lt
   b81d2:	189b      	addlt	r3, r3, r2
   b81d4:	b21b      	sxthlt	r3, r3
      __y = 0;
   b81d6:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b81d8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b81dc:	18d7      	adds	r7, r2, r3
   b81de:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b81e0:	bfc4      	itt	gt
   b81e2:	1aa3      	subgt	r3, r4, r2
   b81e4:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b81e6:	2b00      	cmp	r3, #0
   b81e8:	dd64      	ble.n	b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b81ea:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b81ee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b81f0:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b81f4:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b81f8:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b81fa:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b81fe:	d023      	beq.n	b8248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8200:	f1c2 0208 	rsb	r2, r2, #8
   b8204:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8206:	492d      	ldr	r1, [pc, #180]	; (b82bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8208:	4293      	cmp	r3, r2
   b820a:	bf3c      	itt	cc
   b820c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8210:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8214:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b8216:	bf3c      	itt	cc
   b8218:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b821c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8220:	2d01      	cmp	r5, #1
   b8222:	d007      	beq.n	b8234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8224:	2d02      	cmp	r5, #2
   b8226:	d02e      	beq.n	b8286 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8228:	b94d      	cbnz	r5, b823e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b822a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b822e:	ea2c 0101 	bic.w	r1, ip, r1
   b8232:	e003      	b.n	b823c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8234:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8238:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b823c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b823e:	4293      	cmp	r3, r2
   b8240:	d338      	bcc.n	b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b8242:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b8246:	440c      	add	r4, r1
        h -= mod;
   b8248:	1a9a      	subs	r2, r3, r2
   b824a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b824c:	2a07      	cmp	r2, #7
   b824e:	d90e      	bls.n	b826e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8250:	2d02      	cmp	r5, #2
   b8252:	d11d      	bne.n	b8290 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b8254:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b8256:	7821      	ldrb	r1, [r4, #0]
   b8258:	43c9      	mvns	r1, r1
   b825a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b825c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b825e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b8262:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b8264:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8266:	440c      	add	r4, r1
            } while(h >= 8);
   b8268:	d8f5      	bhi.n	b8256 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b826a:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b826e:	b30a      	cbz	r2, b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8270:	4b13      	ldr	r3, [pc, #76]	; (b82c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b8272:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8274:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b8276:	d01a      	beq.n	b82ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8278:	2d02      	cmp	r5, #2
   b827a:	d01c      	beq.n	b82b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b827c:	b9d5      	cbnz	r5, b82b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b827e:	7822      	ldrb	r2, [r4, #0]
   b8280:	ea22 0303 	bic.w	r3, r2, r3
   b8284:	e015      	b.n	b82b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b8286:	f817 c006 	ldrb.w	ip, [r7, r6]
   b828a:	ea81 010c 	eor.w	r1, r1, ip
   b828e:	e7d5      	b.n	b823c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8290:	1e29      	subs	r1, r5, #0
   b8292:	bf18      	it	ne
   b8294:	2101      	movne	r1, #1
   b8296:	4249      	negs	r1, r1
   b8298:	b2c9      	uxtb	r1, r1
   b829a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b829c:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b829e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b82a0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b82a4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b82a6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b82a8:	4434      	add	r4, r6
            } while(h >= 8);
   b82aa:	d8f7      	bhi.n	b829c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b82ac:	e7dd      	b.n	b826a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b82ae:	7822      	ldrb	r2, [r4, #0]
   b82b0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b82b2:	7023      	strb	r3, [r4, #0]
}
   b82b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b82b6:	7822      	ldrb	r2, [r4, #0]
   b82b8:	4053      	eors	r3, r2
   b82ba:	e7fa      	b.n	b82b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b82bc:	000bbbc4 	.word	0x000bbbc4
   b82c0:	000bbbcc 	.word	0x000bbbcc

000b82c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b82c4:	b470      	push	{r4, r5, r6}
   b82c6:	4614      	mov	r4, r2
  switch(rotation) {
   b82c8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b82ca:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b82ce:	2a02      	cmp	r2, #2
   b82d0:	d00d      	beq.n	b82ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b82d2:	2a03      	cmp	r2, #3
   b82d4:	d018      	beq.n	b8308 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b82d6:	2a01      	cmp	r2, #1
   b82d8:	d111      	bne.n	b82fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b82da:	8902      	ldrh	r2, [r0, #8]
   b82dc:	43e4      	mvns	r4, r4
   b82de:	4414      	add	r4, r2
   b82e0:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b82e2:	9603      	str	r6, [sp, #12]
   b82e4:	460a      	mov	r2, r1
   b82e6:	4621      	mov	r1, r4
}
   b82e8:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b82ea:	f7ff bf67 	b.w	b81bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b82ee:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b82f0:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b82f2:	43e4      	mvns	r4, r4
    x -= (w-1);
   b82f4:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b82f6:	4414      	add	r4, r2
    x -= (w-1);
   b82f8:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b82fa:	b224      	sxth	r4, r4
    x -= (w-1);
   b82fc:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b82fe:	9603      	str	r6, [sp, #12]
   b8300:	4622      	mov	r2, r4
}
   b8302:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8304:	f7ff bf16 	b.w	b8134 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b8308:	8945      	ldrh	r5, [r0, #10]
   b830a:	4419      	add	r1, r3
   b830c:	1a69      	subs	r1, r5, r1
   b830e:	b209      	sxth	r1, r1
    break;
   b8310:	e7e7      	b.n	b82e2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8312 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8312:	b430      	push	{r4, r5}
   b8314:	4614      	mov	r4, r2
  switch(rotation) {
   b8316:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8318:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b831c:	2a02      	cmp	r2, #2
   b831e:	d00d      	beq.n	b833c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8320:	2a03      	cmp	r2, #3
   b8322:	d018      	beq.n	b8356 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8324:	2a01      	cmp	r2, #1
   b8326:	d111      	bne.n	b834c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8328:	18e2      	adds	r2, r4, r3
   b832a:	8904      	ldrh	r4, [r0, #8]
   b832c:	1aa4      	subs	r4, r4, r2
   b832e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8330:	9502      	str	r5, [sp, #8]
   b8332:	460a      	mov	r2, r1
   b8334:	4621      	mov	r1, r4
}
   b8336:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8338:	f7ff befc 	b.w	b8134 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b833c:	8902      	ldrh	r2, [r0, #8]
   b833e:	43c9      	mvns	r1, r1
   b8340:	4411      	add	r1, r2
    y -= (h-1);
   b8342:	18e2      	adds	r2, r4, r3
   b8344:	8944      	ldrh	r4, [r0, #10]
   b8346:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8348:	b209      	sxth	r1, r1
    y -= (h-1);
   b834a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b834c:	9502      	str	r5, [sp, #8]
   b834e:	4622      	mov	r2, r4
}
   b8350:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b8352:	f7ff bf33 	b.w	b81bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b8356:	8942      	ldrh	r2, [r0, #10]
   b8358:	43c9      	mvns	r1, r1
   b835a:	4411      	add	r1, r2
   b835c:	b209      	sxth	r1, r1
    break;
   b835e:	e7e7      	b.n	b8330 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8360 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8364:	4604      	mov	r4, r0
  TRANSACTION_START
   b8366:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8368:	2800      	cmp	r0, #0
   b836a:	d042      	beq.n	b83f2 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b836c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b836e:	f001 f93d 	bl	b95ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b8372:	4947      	ldr	r1, [pc, #284]	; (b8490 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b8374:	2205      	movs	r2, #5
   b8376:	4620      	mov	r0, r4
   b8378:	f7ff fd2d 	bl	b7dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b837c:	8921      	ldrh	r1, [r4, #8]
   b837e:	3901      	subs	r1, #1
   b8380:	4620      	mov	r0, r4
   b8382:	b2c9      	uxtb	r1, r1
   b8384:	f7ff fcb8 	bl	b7cf8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8388:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b838c:	1dde      	adds	r6, r3, #7
   b838e:	bf48      	it	mi
   b8390:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b8394:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8398:	8923      	ldrh	r3, [r4, #8]
   b839a:	10f6      	asrs	r6, r6, #3
   b839c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b83a0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b83a4:	2800      	cmp	r0, #0
   b83a6:	d03a      	beq.n	b841e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b83a8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b83ac:	f001 f92c 	bl	b9608 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b83b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b83b2:	6803      	ldr	r3, [r0, #0]
   b83b4:	2140      	movs	r1, #64	; 0x40
   b83b6:	689b      	ldr	r3, [r3, #8]
   b83b8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b83ba:	2701      	movs	r7, #1
    while(count--) {
   b83bc:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b83be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b83c0:	d024      	beq.n	b840c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b83c2:	2f1f      	cmp	r7, #31
   b83c4:	d90c      	bls.n	b83e0 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b83c6:	f001 f926 	bl	b9616 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b83ca:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b83ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b83d0:	f001 f91a 	bl	b9608 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b83d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b83d6:	6803      	ldr	r3, [r0, #0]
   b83d8:	2140      	movs	r1, #64	; 0x40
   b83da:	689b      	ldr	r3, [r3, #8]
   b83dc:	4798      	blx	r3
        bytesOut = 1;
   b83de:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b83e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b83e2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b83e6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b83e8:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b83ea:	689b      	ldr	r3, [r3, #8]
   b83ec:	4798      	blx	r3
      bytesOut++;
   b83ee:	b2ff      	uxtb	r7, r7
    while(count--) {
   b83f0:	e7e4      	b.n	b83bc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b83f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b83f4:	b118      	cbz	r0, b83fe <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b83f6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b83fa:	f000 fc27 	bl	b8c4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b83fe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8402:	2100      	movs	r1, #0
   b8404:	b280      	uxth	r0, r0
   b8406:	f001 fa48 	bl	b989a <digitalWrite>
   b840a:	e7b2      	b.n	b8372 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b840c:	f001 f903 	bl	b9616 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8410:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8412:	b378      	cbz	r0, b8474 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8414:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b8416:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b841a:	f001 b8e7 	b.w	b95ec <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b841e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8422:	2101      	movs	r1, #1
   b8424:	b280      	uxth	r0, r0
   b8426:	f001 fa38 	bl	b989a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b842a:	42ae      	cmp	r6, r5
   b842c:	d0f0      	beq.n	b8410 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b842e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8430:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8434:	b118      	cbz	r0, b843e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b8436:	4649      	mov	r1, r9
   b8438:	f000 fc76 	bl	b8d28 <_ZN8SPIClass8transferEh>
   b843c:	e7f5      	b.n	b842a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b843e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8440:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b8444:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8448:	ea09 0108 	and.w	r1, r9, r8
   b844c:	b280      	uxth	r0, r0
   b844e:	f001 fa24 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b8452:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8456:	2101      	movs	r1, #1
   b8458:	b280      	uxth	r0, r0
   b845a:	f001 fa1e 	bl	b989a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b845e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8462:	2100      	movs	r1, #0
   b8464:	b280      	uxth	r0, r0
   b8466:	f001 fa18 	bl	b989a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b846a:	3f01      	subs	r7, #1
   b846c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8470:	d1e8      	bne.n	b8444 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b8472:	e7da      	b.n	b842a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b8474:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8478:	2101      	movs	r1, #1
   b847a:	b280      	uxth	r0, r0
   b847c:	f001 fa0d 	bl	b989a <digitalWrite>
   b8480:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8482:	b118      	cbz	r0, b848c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b8484:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8488:	f000 bbc6 	b.w	b8c18 <_ZN8SPIClass14endTransactionEv>
}
   b848c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8490:	000bbbf0 	.word	0x000bbbf0

000b8494 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b8494:	b510      	push	{r4, lr}
   b8496:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b8498:	7001      	strb	r1, [r0, #0]
   b849a:	7042      	strb	r2, [r0, #1]
   b849c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b849e:	2101      	movs	r1, #1
   b84a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b84a4:	f001 fc94 	bl	b9dd0 <calloc>
   b84a8:	6060      	str	r0, [r4, #4]
}
   b84aa:	4620      	mov	r0, r4
   b84ac:	bd10      	pop	{r4, pc}

000b84ae <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b84ae:	b510      	push	{r4, lr}
   b84b0:	4604      	mov	r4, r0
{
    free(_led_state);
   b84b2:	6840      	ldr	r0, [r0, #4]
   b84b4:	f000 fb16 	bl	b8ae4 <free>
}
   b84b8:	4620      	mov	r0, r4
   b84ba:	bd10      	pop	{r4, pc}

000b84bc <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b84bc:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b84be:	2100      	movs	r1, #0
{
   b84c0:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b84c2:	7800      	ldrb	r0, [r0, #0]
   b84c4:	f001 f9e9 	bl	b989a <digitalWrite>
   b84c8:	2014      	movs	r0, #20
   b84ca:	f000 f90f 	bl	b86ec <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b84ce:	7820      	ldrb	r0, [r4, #0]
   b84d0:	2101      	movs	r1, #1
   b84d2:	f001 f9e2 	bl	b989a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b84d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b84da:	2014      	movs	r0, #20
   b84dc:	f000 b906 	b.w	b86ec <HAL_Delay_Microseconds>

000b84e0 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b84e0:	b570      	push	{r4, r5, r6, lr}
   b84e2:	4606      	mov	r6, r0
   b84e4:	460c      	mov	r4, r1
   b84e6:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b84e8:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b84ea:	bf4c      	ite	mi
   b84ec:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b84ee:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b84f0:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b84f2:	f001 f9d2 	bl	b989a <digitalWrite>
    for (byte i=0; i<8; i++)
   b84f6:	3d01      	subs	r5, #1
        clk();
   b84f8:	4630      	mov	r0, r6
   b84fa:	f7ff ffdf 	bl	b84bc <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b84fe:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b8500:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b8504:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b8506:	d1ef      	bne.n	b84e8 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b8508:	bd70      	pop	{r4, r5, r6, pc}

000b850a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b850a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b850c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b8510:	461e      	mov	r6, r3
   b8512:	460c      	mov	r4, r1
   b8514:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b8516:	bf14      	ite	ne
   b8518:	21c0      	movne	r1, #192	; 0xc0
   b851a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b851c:	0673      	lsls	r3, r6, #25
   b851e:	bf58      	it	pl
   b8520:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b8524:	062a      	lsls	r2, r5, #24
   b8526:	bf58      	it	pl
   b8528:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b852c:	066b      	lsls	r3, r5, #25
   b852e:	bf58      	it	pl
   b8530:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b8534:	0622      	lsls	r2, r4, #24
   b8536:	bf58      	it	pl
   b8538:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b853c:	0663      	lsls	r3, r4, #25
   b853e:	bf58      	it	pl
   b8540:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b8544:	9001      	str	r0, [sp, #4]
   b8546:	f7ff ffcb 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b854a:	9801      	ldr	r0, [sp, #4]
   b854c:	4631      	mov	r1, r6
   b854e:	f7ff ffc7 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b8552:	9801      	ldr	r0, [sp, #4]
   b8554:	4629      	mov	r1, r5
   b8556:	f7ff ffc3 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b855a:	9801      	ldr	r0, [sp, #4]
   b855c:	4621      	mov	r1, r4
}
   b855e:	b002      	add	sp, #8
   b8560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b8564:	f7ff bfbc 	b.w	b84e0 <_ZN12ChainableLED8sendByteEh>

000b8568 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b8568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b856c:	4604      	mov	r4, r0
   b856e:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b8570:	2100      	movs	r1, #0
{
   b8572:	4690      	mov	r8, r2
   b8574:	4699      	mov	r9, r3
   b8576:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b857a:	f7ff ffb1 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b857e:	2100      	movs	r1, #0
   b8580:	4620      	mov	r0, r4
   b8582:	f7ff ffad 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8586:	2100      	movs	r1, #0
   b8588:	4620      	mov	r0, r4
   b858a:	f7ff ffa9 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b858e:	2100      	movs	r1, #0
   b8590:	4620      	mov	r0, r4
   b8592:	f7ff ffa5 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
   b8596:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b8598:	78a3      	ldrb	r3, [r4, #2]
   b859a:	b2f5      	uxtb	r5, r6
   b859c:	42ab      	cmp	r3, r5
   b859e:	d919      	bls.n	b85d4 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b85a0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b85a4:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b85a6:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b85aa:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b85ae:	d108      	bne.n	b85c2 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b85b0:	6861      	ldr	r1, [r4, #4]
   b85b2:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b85b6:	6861      	ldr	r1, [r4, #4]
   b85b8:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b85bc:	6861      	ldr	r1, [r4, #4]
   b85be:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b85c2:	6861      	ldr	r1, [r4, #4]
   b85c4:	5ccb      	ldrb	r3, [r1, r3]
   b85c6:	5c8a      	ldrb	r2, [r1, r2]
   b85c8:	5c09      	ldrb	r1, [r1, r0]
   b85ca:	4620      	mov	r0, r4
   b85cc:	f7ff ff9d 	bl	b850a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b85d0:	3601      	adds	r6, #1
   b85d2:	e7e1      	b.n	b8598 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b85d4:	4620      	mov	r0, r4
   b85d6:	2100      	movs	r1, #0
   b85d8:	f7ff ff82 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b85dc:	4620      	mov	r0, r4
   b85de:	2100      	movs	r1, #0
   b85e0:	f7ff ff7e 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b85e4:	4620      	mov	r0, r4
   b85e6:	2100      	movs	r1, #0
   b85e8:	f7ff ff7a 	bl	b84e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b85ec:	4620      	mov	r0, r4
   b85ee:	2100      	movs	r1, #0
}
   b85f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b85f4:	f7ff bf74 	b.w	b84e0 <_ZN12ChainableLED8sendByteEh>

000b85f8 <_ZN12ChainableLED4initEv>:
{
   b85f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85fa:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b85fc:	2101      	movs	r1, #1
   b85fe:	7800      	ldrb	r0, [r0, #0]
   b8600:	f001 f93a 	bl	b9878 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b8604:	7860      	ldrb	r0, [r4, #1]
   b8606:	2101      	movs	r1, #1
   b8608:	f001 f936 	bl	b9878 <pinMode>
   b860c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b860e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b8610:	78a3      	ldrb	r3, [r4, #2]
   b8612:	b2e9      	uxtb	r1, r5
   b8614:	428b      	cmp	r3, r1
   b8616:	d907      	bls.n	b8628 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b8618:	2300      	movs	r3, #0
   b861a:	9600      	str	r6, [sp, #0]
   b861c:	461a      	mov	r2, r3
   b861e:	4620      	mov	r0, r4
   b8620:	f7ff ffa2 	bl	b8568 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b8624:	3501      	adds	r5, #1
   b8626:	e7f3      	b.n	b8610 <_ZN12ChainableLED4initEv+0x18>
}
   b8628:	b002      	add	sp, #8
   b862a:	bd70      	pop	{r4, r5, r6, pc}

000b862c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b862c:	b508      	push	{r3, lr}
   b862e:	4b02      	ldr	r3, [pc, #8]	; (b8638 <netdb_freeaddrinfo+0xc>)
   b8630:	681b      	ldr	r3, [r3, #0]
   b8632:	689b      	ldr	r3, [r3, #8]
   b8634:	9301      	str	r3, [sp, #4]
   b8636:	bd08      	pop	{r3, pc}
   b8638:	00030268 	.word	0x00030268

000b863c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b863c:	b508      	push	{r3, lr}
   b863e:	4b02      	ldr	r3, [pc, #8]	; (b8648 <netdb_getaddrinfo+0xc>)
   b8640:	681b      	ldr	r3, [r3, #0]
   b8642:	68db      	ldr	r3, [r3, #12]
   b8644:	9301      	str	r3, [sp, #4]
   b8646:	bd08      	pop	{r3, pc}
   b8648:	00030268 	.word	0x00030268

000b864c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b864c:	b508      	push	{r3, lr}
   b864e:	4b02      	ldr	r3, [pc, #8]	; (b8658 <HAL_Validate_Pin_Function+0xc>)
   b8650:	681b      	ldr	r3, [r3, #0]
   b8652:	685b      	ldr	r3, [r3, #4]
   b8654:	9301      	str	r3, [sp, #4]
   b8656:	bd08      	pop	{r3, pc}
   b8658:	0003022c 	.word	0x0003022c

000b865c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b865c:	b508      	push	{r3, lr}
   b865e:	4b02      	ldr	r3, [pc, #8]	; (b8668 <HAL_Pin_Mode+0xc>)
   b8660:	681b      	ldr	r3, [r3, #0]
   b8662:	689b      	ldr	r3, [r3, #8]
   b8664:	9301      	str	r3, [sp, #4]
   b8666:	bd08      	pop	{r3, pc}
   b8668:	0003022c 	.word	0x0003022c

000b866c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b866c:	b508      	push	{r3, lr}
   b866e:	4b02      	ldr	r3, [pc, #8]	; (b8678 <HAL_Get_Pin_Mode+0xc>)
   b8670:	681b      	ldr	r3, [r3, #0]
   b8672:	68db      	ldr	r3, [r3, #12]
   b8674:	9301      	str	r3, [sp, #4]
   b8676:	bd08      	pop	{r3, pc}
   b8678:	0003022c 	.word	0x0003022c

000b867c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b867c:	b508      	push	{r3, lr}
   b867e:	4b02      	ldr	r3, [pc, #8]	; (b8688 <HAL_GPIO_Write+0xc>)
   b8680:	681b      	ldr	r3, [r3, #0]
   b8682:	691b      	ldr	r3, [r3, #16]
   b8684:	9301      	str	r3, [sp, #4]
   b8686:	bd08      	pop	{r3, pc}
   b8688:	0003022c 	.word	0x0003022c

000b868c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b868c:	b508      	push	{r3, lr}
   b868e:	4b02      	ldr	r3, [pc, #8]	; (b8698 <HAL_GPIO_Read+0xc>)
   b8690:	681b      	ldr	r3, [r3, #0]
   b8692:	695b      	ldr	r3, [r3, #20]
   b8694:	9301      	str	r3, [sp, #4]
   b8696:	bd08      	pop	{r3, pc}
   b8698:	0003022c 	.word	0x0003022c

000b869c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b869c:	b508      	push	{r3, lr}
   b869e:	4b02      	ldr	r3, [pc, #8]	; (b86a8 <HAL_Interrupts_Enable_All+0xc>)
   b86a0:	681b      	ldr	r3, [r3, #0]
   b86a2:	6a1b      	ldr	r3, [r3, #32]
   b86a4:	9301      	str	r3, [sp, #4]
   b86a6:	bd08      	pop	{r3, pc}
   b86a8:	0003022c 	.word	0x0003022c

000b86ac <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b86ac:	b508      	push	{r3, lr}
   b86ae:	4b02      	ldr	r3, [pc, #8]	; (b86b8 <HAL_Interrupts_Disable_All+0xc>)
   b86b0:	681b      	ldr	r3, [r3, #0]
   b86b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b86b4:	9301      	str	r3, [sp, #4]
   b86b6:	bd08      	pop	{r3, pc}
   b86b8:	0003022c 	.word	0x0003022c

000b86bc <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b86bc:	b508      	push	{r3, lr}
   b86be:	4b02      	ldr	r3, [pc, #8]	; (b86c8 <hal_adc_read+0xc>)
   b86c0:	681b      	ldr	r3, [r3, #0]
   b86c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b86c4:	9301      	str	r3, [sp, #4]
   b86c6:	bd08      	pop	{r3, pc}
   b86c8:	0003022c 	.word	0x0003022c

000b86cc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b86cc:	b508      	push	{r3, lr}
   b86ce:	4b02      	ldr	r3, [pc, #8]	; (b86d8 <HAL_Pulse_In+0xc>)
   b86d0:	681b      	ldr	r3, [r3, #0]
   b86d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b86d4:	9301      	str	r3, [sp, #4]
   b86d6:	bd08      	pop	{r3, pc}
   b86d8:	0003022c 	.word	0x0003022c

000b86dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b86dc:	b508      	push	{r3, lr}
   b86de:	4b02      	ldr	r3, [pc, #8]	; (b86e8 <HAL_RNG_GetRandomNumber+0xc>)
   b86e0:	681b      	ldr	r3, [r3, #0]
   b86e2:	685b      	ldr	r3, [r3, #4]
   b86e4:	9301      	str	r3, [sp, #4]
   b86e6:	bd08      	pop	{r3, pc}
   b86e8:	00030218 	.word	0x00030218

000b86ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b86ec:	b508      	push	{r3, lr}
   b86ee:	4b02      	ldr	r3, [pc, #8]	; (b86f8 <HAL_Delay_Microseconds+0xc>)
   b86f0:	681b      	ldr	r3, [r3, #0]
   b86f2:	68db      	ldr	r3, [r3, #12]
   b86f4:	9301      	str	r3, [sp, #4]
   b86f6:	bd08      	pop	{r3, pc}
   b86f8:	00030218 	.word	0x00030218

000b86fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b86fc:	b508      	push	{r3, lr}
   b86fe:	4b02      	ldr	r3, [pc, #8]	; (b8708 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8700:	681b      	ldr	r3, [r3, #0]
   b8702:	695b      	ldr	r3, [r3, #20]
   b8704:	9301      	str	r3, [sp, #4]
   b8706:	bd08      	pop	{r3, pc}
   b8708:	00030218 	.word	0x00030218

000b870c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b02      	ldr	r3, [pc, #8]	; (b8718 <HAL_EEPROM_Init+0xc>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8714:	9301      	str	r3, [sp, #4]
   b8716:	bd08      	pop	{r3, pc}
   b8718:	00030218 	.word	0x00030218

000b871c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b871c:	b508      	push	{r3, lr}
   b871e:	4b02      	ldr	r3, [pc, #8]	; (b8728 <HAL_EEPROM_Read+0xc>)
   b8720:	681b      	ldr	r3, [r3, #0]
   b8722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8724:	9301      	str	r3, [sp, #4]
   b8726:	bd08      	pop	{r3, pc}
   b8728:	00030218 	.word	0x00030218

000b872c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b872c:	b508      	push	{r3, lr}
   b872e:	4b02      	ldr	r3, [pc, #8]	; (b8738 <HAL_EEPROM_Put+0xc>)
   b8730:	681b      	ldr	r3, [r3, #0]
   b8732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8734:	9301      	str	r3, [sp, #4]
   b8736:	bd08      	pop	{r3, pc}
   b8738:	00030218 	.word	0x00030218

000b873c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b873c:	b508      	push	{r3, lr}
   b873e:	4b02      	ldr	r3, [pc, #8]	; (b8748 <os_mutex_recursive_create+0xc>)
   b8740:	681b      	ldr	r3, [r3, #0]
   b8742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8744:	9301      	str	r3, [sp, #4]
   b8746:	bd08      	pop	{r3, pc}
   b8748:	00030248 	.word	0x00030248

000b874c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b874c:	b508      	push	{r3, lr}
   b874e:	4b02      	ldr	r3, [pc, #8]	; (b8758 <inet_inet_ntop+0xc>)
   b8750:	681b      	ldr	r3, [r3, #0]
   b8752:	695b      	ldr	r3, [r3, #20]
   b8754:	9301      	str	r3, [sp, #4]
   b8756:	bd08      	pop	{r3, pc}
   b8758:	00030264 	.word	0x00030264

000b875c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b875c:	b508      	push	{r3, lr}
   b875e:	4b02      	ldr	r3, [pc, #8]	; (b8768 <hal_usart_write+0xc>)
   b8760:	681b      	ldr	r3, [r3, #0]
   b8762:	68db      	ldr	r3, [r3, #12]
   b8764:	9301      	str	r3, [sp, #4]
   b8766:	bd08      	pop	{r3, pc}
   b8768:	0003023c 	.word	0x0003023c

000b876c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b876c:	b508      	push	{r3, lr}
   b876e:	4b02      	ldr	r3, [pc, #8]	; (b8778 <hal_usart_available+0xc>)
   b8770:	681b      	ldr	r3, [r3, #0]
   b8772:	691b      	ldr	r3, [r3, #16]
   b8774:	9301      	str	r3, [sp, #4]
   b8776:	bd08      	pop	{r3, pc}
   b8778:	0003023c 	.word	0x0003023c

000b877c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b877c:	b508      	push	{r3, lr}
   b877e:	4b02      	ldr	r3, [pc, #8]	; (b8788 <hal_usart_read+0xc>)
   b8780:	681b      	ldr	r3, [r3, #0]
   b8782:	695b      	ldr	r3, [r3, #20]
   b8784:	9301      	str	r3, [sp, #4]
   b8786:	bd08      	pop	{r3, pc}
   b8788:	0003023c 	.word	0x0003023c

000b878c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b878c:	b508      	push	{r3, lr}
   b878e:	4b02      	ldr	r3, [pc, #8]	; (b8798 <hal_usart_peek+0xc>)
   b8790:	681b      	ldr	r3, [r3, #0]
   b8792:	699b      	ldr	r3, [r3, #24]
   b8794:	9301      	str	r3, [sp, #4]
   b8796:	bd08      	pop	{r3, pc}
   b8798:	0003023c 	.word	0x0003023c

000b879c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b879c:	b508      	push	{r3, lr}
   b879e:	4b02      	ldr	r3, [pc, #8]	; (b87a8 <hal_usart_flush+0xc>)
   b87a0:	681b      	ldr	r3, [r3, #0]
   b87a2:	69db      	ldr	r3, [r3, #28]
   b87a4:	9301      	str	r3, [sp, #4]
   b87a6:	bd08      	pop	{r3, pc}
   b87a8:	0003023c 	.word	0x0003023c

000b87ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b87ac:	b508      	push	{r3, lr}
   b87ae:	4b02      	ldr	r3, [pc, #8]	; (b87b8 <hal_usart_is_enabled+0xc>)
   b87b0:	681b      	ldr	r3, [r3, #0]
   b87b2:	6a1b      	ldr	r3, [r3, #32]
   b87b4:	9301      	str	r3, [sp, #4]
   b87b6:	bd08      	pop	{r3, pc}
   b87b8:	0003023c 	.word	0x0003023c

000b87bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b87bc:	b508      	push	{r3, lr}
   b87be:	4b02      	ldr	r3, [pc, #8]	; (b87c8 <hal_usart_available_data_for_write+0xc>)
   b87c0:	681b      	ldr	r3, [r3, #0]
   b87c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b87c4:	9301      	str	r3, [sp, #4]
   b87c6:	bd08      	pop	{r3, pc}
   b87c8:	0003023c 	.word	0x0003023c

000b87cc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b87cc:	b508      	push	{r3, lr}
   b87ce:	4b02      	ldr	r3, [pc, #8]	; (b87d8 <hal_usart_init_ex+0xc>)
   b87d0:	681b      	ldr	r3, [r3, #0]
   b87d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87d4:	9301      	str	r3, [sp, #4]
   b87d6:	bd08      	pop	{r3, pc}
   b87d8:	0003023c 	.word	0x0003023c

000b87dc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b87dc:	b508      	push	{r3, lr}
   b87de:	4b02      	ldr	r3, [pc, #8]	; (b87e8 <hal_i2c_set_speed+0xc>)
   b87e0:	681b      	ldr	r3, [r3, #0]
   b87e2:	681b      	ldr	r3, [r3, #0]
   b87e4:	9301      	str	r3, [sp, #4]
   b87e6:	bd08      	pop	{r3, pc}
   b87e8:	00030228 	.word	0x00030228

000b87ec <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b87ec:	b508      	push	{r3, lr}
   b87ee:	4b02      	ldr	r3, [pc, #8]	; (b87f8 <hal_i2c_begin+0xc>)
   b87f0:	681b      	ldr	r3, [r3, #0]
   b87f2:	68db      	ldr	r3, [r3, #12]
   b87f4:	9301      	str	r3, [sp, #4]
   b87f6:	bd08      	pop	{r3, pc}
   b87f8:	00030228 	.word	0x00030228

000b87fc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b87fc:	b508      	push	{r3, lr}
   b87fe:	4b02      	ldr	r3, [pc, #8]	; (b8808 <hal_i2c_begin_transmission+0xc>)
   b8800:	681b      	ldr	r3, [r3, #0]
   b8802:	699b      	ldr	r3, [r3, #24]
   b8804:	9301      	str	r3, [sp, #4]
   b8806:	bd08      	pop	{r3, pc}
   b8808:	00030228 	.word	0x00030228

000b880c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b880c:	b508      	push	{r3, lr}
   b880e:	4b02      	ldr	r3, [pc, #8]	; (b8818 <hal_i2c_end_transmission+0xc>)
   b8810:	681b      	ldr	r3, [r3, #0]
   b8812:	69db      	ldr	r3, [r3, #28]
   b8814:	9301      	str	r3, [sp, #4]
   b8816:	bd08      	pop	{r3, pc}
   b8818:	00030228 	.word	0x00030228

000b881c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b881c:	b508      	push	{r3, lr}
   b881e:	4b02      	ldr	r3, [pc, #8]	; (b8828 <hal_i2c_write+0xc>)
   b8820:	681b      	ldr	r3, [r3, #0]
   b8822:	6a1b      	ldr	r3, [r3, #32]
   b8824:	9301      	str	r3, [sp, #4]
   b8826:	bd08      	pop	{r3, pc}
   b8828:	00030228 	.word	0x00030228

000b882c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b882c:	b508      	push	{r3, lr}
   b882e:	4b02      	ldr	r3, [pc, #8]	; (b8838 <hal_i2c_available+0xc>)
   b8830:	681b      	ldr	r3, [r3, #0]
   b8832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8834:	9301      	str	r3, [sp, #4]
   b8836:	bd08      	pop	{r3, pc}
   b8838:	00030228 	.word	0x00030228

000b883c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b883c:	b508      	push	{r3, lr}
   b883e:	4b02      	ldr	r3, [pc, #8]	; (b8848 <hal_i2c_read+0xc>)
   b8840:	681b      	ldr	r3, [r3, #0]
   b8842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8844:	9301      	str	r3, [sp, #4]
   b8846:	bd08      	pop	{r3, pc}
   b8848:	00030228 	.word	0x00030228

000b884c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b884c:	b508      	push	{r3, lr}
   b884e:	4b02      	ldr	r3, [pc, #8]	; (b8858 <hal_i2c_peek+0xc>)
   b8850:	681b      	ldr	r3, [r3, #0]
   b8852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8854:	9301      	str	r3, [sp, #4]
   b8856:	bd08      	pop	{r3, pc}
   b8858:	00030228 	.word	0x00030228

000b885c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b885c:	b508      	push	{r3, lr}
   b885e:	4b02      	ldr	r3, [pc, #8]	; (b8868 <hal_i2c_flush+0xc>)
   b8860:	681b      	ldr	r3, [r3, #0]
   b8862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8864:	9301      	str	r3, [sp, #4]
   b8866:	bd08      	pop	{r3, pc}
   b8868:	00030228 	.word	0x00030228

000b886c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b886c:	b508      	push	{r3, lr}
   b886e:	4b02      	ldr	r3, [pc, #8]	; (b8878 <hal_i2c_is_enabled+0xc>)
   b8870:	681b      	ldr	r3, [r3, #0]
   b8872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8874:	9301      	str	r3, [sp, #4]
   b8876:	bd08      	pop	{r3, pc}
   b8878:	00030228 	.word	0x00030228

000b887c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b887c:	b508      	push	{r3, lr}
   b887e:	4b02      	ldr	r3, [pc, #8]	; (b8888 <hal_i2c_init+0xc>)
   b8880:	681b      	ldr	r3, [r3, #0]
   b8882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8884:	9301      	str	r3, [sp, #4]
   b8886:	bd08      	pop	{r3, pc}
   b8888:	00030228 	.word	0x00030228

000b888c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b888c:	b508      	push	{r3, lr}
   b888e:	4b02      	ldr	r3, [pc, #8]	; (b8898 <hal_spi_begin+0xc>)
   b8890:	681b      	ldr	r3, [r3, #0]
   b8892:	681b      	ldr	r3, [r3, #0]
   b8894:	9301      	str	r3, [sp, #4]
   b8896:	bd08      	pop	{r3, pc}
   b8898:	00030230 	.word	0x00030230

000b889c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b889c:	b508      	push	{r3, lr}
   b889e:	4b02      	ldr	r3, [pc, #8]	; (b88a8 <hal_spi_transfer+0xc>)
   b88a0:	681b      	ldr	r3, [r3, #0]
   b88a2:	695b      	ldr	r3, [r3, #20]
   b88a4:	9301      	str	r3, [sp, #4]
   b88a6:	bd08      	pop	{r3, pc}
   b88a8:	00030230 	.word	0x00030230

000b88ac <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b88ac:	b508      	push	{r3, lr}
   b88ae:	4b02      	ldr	r3, [pc, #8]	; (b88b8 <hal_spi_init+0xc>)
   b88b0:	681b      	ldr	r3, [r3, #0]
   b88b2:	69db      	ldr	r3, [r3, #28]
   b88b4:	9301      	str	r3, [sp, #4]
   b88b6:	bd08      	pop	{r3, pc}
   b88b8:	00030230 	.word	0x00030230

000b88bc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b88bc:	b508      	push	{r3, lr}
   b88be:	4b02      	ldr	r3, [pc, #8]	; (b88c8 <hal_spi_is_enabled+0xc>)
   b88c0:	681b      	ldr	r3, [r3, #0]
   b88c2:	6a1b      	ldr	r3, [r3, #32]
   b88c4:	9301      	str	r3, [sp, #4]
   b88c6:	bd08      	pop	{r3, pc}
   b88c8:	00030230 	.word	0x00030230

000b88cc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b88cc:	b508      	push	{r3, lr}
   b88ce:	4b02      	ldr	r3, [pc, #8]	; (b88d8 <hal_spi_info+0xc>)
   b88d0:	681b      	ldr	r3, [r3, #0]
   b88d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b88d4:	9301      	str	r3, [sp, #4]
   b88d6:	bd08      	pop	{r3, pc}
   b88d8:	00030230 	.word	0x00030230

000b88dc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b88dc:	b508      	push	{r3, lr}
   b88de:	4b02      	ldr	r3, [pc, #8]	; (b88e8 <hal_spi_set_settings+0xc>)
   b88e0:	681b      	ldr	r3, [r3, #0]
   b88e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88e4:	9301      	str	r3, [sp, #4]
   b88e6:	bd08      	pop	{r3, pc}
   b88e8:	00030230 	.word	0x00030230

000b88ec <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b88ec:	b508      	push	{r3, lr}
   b88ee:	4b02      	ldr	r3, [pc, #8]	; (b88f8 <hal_spi_acquire+0xc>)
   b88f0:	681b      	ldr	r3, [r3, #0]
   b88f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88f4:	9301      	str	r3, [sp, #4]
   b88f6:	bd08      	pop	{r3, pc}
   b88f8:	00030230 	.word	0x00030230

000b88fc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b88fc:	b508      	push	{r3, lr}
   b88fe:	4b02      	ldr	r3, [pc, #8]	; (b8908 <hal_spi_release+0xc>)
   b8900:	681b      	ldr	r3, [r3, #0]
   b8902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8904:	9301      	str	r3, [sp, #4]
   b8906:	bd08      	pop	{r3, pc}
   b8908:	00030230 	.word	0x00030230

000b890c <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b890c:	b508      	push	{r3, lr}
   b890e:	4b02      	ldr	r3, [pc, #8]	; (b8918 <HAL_Tone_Start+0xc>)
   b8910:	681b      	ldr	r3, [r3, #0]
   b8912:	681b      	ldr	r3, [r3, #0]
   b8914:	9301      	str	r3, [sp, #4]
   b8916:	bd08      	pop	{r3, pc}
   b8918:	00030224 	.word	0x00030224

000b891c <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b891c:	b508      	push	{r3, lr}
   b891e:	4b02      	ldr	r3, [pc, #8]	; (b8928 <HAL_Tone_Stop+0xc>)
   b8920:	681b      	ldr	r3, [r3, #0]
   b8922:	685b      	ldr	r3, [r3, #4]
   b8924:	9301      	str	r3, [sp, #4]
   b8926:	bd08      	pop	{r3, pc}
   b8928:	00030224 	.word	0x00030224

000b892c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b892c:	b508      	push	{r3, lr}
   b892e:	4b02      	ldr	r3, [pc, #8]	; (b8938 <HAL_USB_USART_Init+0xc>)
   b8930:	681b      	ldr	r3, [r3, #0]
   b8932:	681b      	ldr	r3, [r3, #0]
   b8934:	9301      	str	r3, [sp, #4]
   b8936:	bd08      	pop	{r3, pc}
   b8938:	0003024c 	.word	0x0003024c

000b893c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b893c:	b508      	push	{r3, lr}
   b893e:	4b02      	ldr	r3, [pc, #8]	; (b8948 <HAL_USB_USART_Begin+0xc>)
   b8940:	681b      	ldr	r3, [r3, #0]
   b8942:	685b      	ldr	r3, [r3, #4]
   b8944:	9301      	str	r3, [sp, #4]
   b8946:	bd08      	pop	{r3, pc}
   b8948:	0003024c 	.word	0x0003024c

000b894c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b894c:	b508      	push	{r3, lr}
   b894e:	4b02      	ldr	r3, [pc, #8]	; (b8958 <HAL_USB_USART_Available_Data+0xc>)
   b8950:	681b      	ldr	r3, [r3, #0]
   b8952:	691b      	ldr	r3, [r3, #16]
   b8954:	9301      	str	r3, [sp, #4]
   b8956:	bd08      	pop	{r3, pc}
   b8958:	0003024c 	.word	0x0003024c

000b895c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b895c:	b508      	push	{r3, lr}
   b895e:	4b02      	ldr	r3, [pc, #8]	; (b8968 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8960:	681b      	ldr	r3, [r3, #0]
   b8962:	695b      	ldr	r3, [r3, #20]
   b8964:	9301      	str	r3, [sp, #4]
   b8966:	bd08      	pop	{r3, pc}
   b8968:	0003024c 	.word	0x0003024c

000b896c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b896c:	b508      	push	{r3, lr}
   b896e:	4b02      	ldr	r3, [pc, #8]	; (b8978 <HAL_USB_USART_Receive_Data+0xc>)
   b8970:	681b      	ldr	r3, [r3, #0]
   b8972:	699b      	ldr	r3, [r3, #24]
   b8974:	9301      	str	r3, [sp, #4]
   b8976:	bd08      	pop	{r3, pc}
   b8978:	0003024c 	.word	0x0003024c

000b897c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b897c:	b508      	push	{r3, lr}
   b897e:	4b02      	ldr	r3, [pc, #8]	; (b8988 <HAL_USB_USART_Send_Data+0xc>)
   b8980:	681b      	ldr	r3, [r3, #0]
   b8982:	69db      	ldr	r3, [r3, #28]
   b8984:	9301      	str	r3, [sp, #4]
   b8986:	bd08      	pop	{r3, pc}
   b8988:	0003024c 	.word	0x0003024c

000b898c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b898c:	b508      	push	{r3, lr}
   b898e:	4b02      	ldr	r3, [pc, #8]	; (b8998 <HAL_USB_USART_Flush_Data+0xc>)
   b8990:	681b      	ldr	r3, [r3, #0]
   b8992:	6a1b      	ldr	r3, [r3, #32]
   b8994:	9301      	str	r3, [sp, #4]
   b8996:	bd08      	pop	{r3, pc}
   b8998:	0003024c 	.word	0x0003024c

000b899c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b899c:	b508      	push	{r3, lr}
   b899e:	4b02      	ldr	r3, [pc, #8]	; (b89a8 <panic_+0xc>)
   b89a0:	681b      	ldr	r3, [r3, #0]
   b89a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b89a4:	9301      	str	r3, [sp, #4]
   b89a6:	bd08      	pop	{r3, pc}
   b89a8:	00030260 	.word	0x00030260

000b89ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b89ac:	b508      	push	{r3, lr}
   b89ae:	4b02      	ldr	r3, [pc, #8]	; (b89b8 <set_system_mode+0xc>)
   b89b0:	681b      	ldr	r3, [r3, #0]
   b89b2:	685b      	ldr	r3, [r3, #4]
   b89b4:	9301      	str	r3, [sp, #4]
   b89b6:	bd08      	pop	{r3, pc}
   b89b8:	00030220 	.word	0x00030220

000b89bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b89bc:	b508      	push	{r3, lr}
   b89be:	4b02      	ldr	r3, [pc, #8]	; (b89c8 <system_delay_ms+0xc>)
   b89c0:	681b      	ldr	r3, [r3, #0]
   b89c2:	695b      	ldr	r3, [r3, #20]
   b89c4:	9301      	str	r3, [sp, #4]
   b89c6:	bd08      	pop	{r3, pc}
   b89c8:	00030220 	.word	0x00030220

000b89cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b89cc:	b508      	push	{r3, lr}
   b89ce:	4b03      	ldr	r3, [pc, #12]	; (b89dc <system_ctrl_set_app_request_handler+0x10>)
   b89d0:	681b      	ldr	r3, [r3, #0]
   b89d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b89d6:	9301      	str	r3, [sp, #4]
   b89d8:	bd08      	pop	{r3, pc}
   b89da:	0000      	.short	0x0000
   b89dc:	00030220 	.word	0x00030220

000b89e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b03      	ldr	r3, [pc, #12]	; (b89f0 <system_ctrl_set_result+0x10>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b89ea:	9301      	str	r3, [sp, #4]
   b89ec:	bd08      	pop	{r3, pc}
   b89ee:	0000      	.short	0x0000
   b89f0:	00030220 	.word	0x00030220

000b89f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b02      	ldr	r3, [pc, #8]	; (b8a00 <network_connect+0xc>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	685b      	ldr	r3, [r3, #4]
   b89fc:	9301      	str	r3, [sp, #4]
   b89fe:	bd08      	pop	{r3, pc}
   b8a00:	00030240 	.word	0x00030240

000b8a04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8a04:	b508      	push	{r3, lr}
   b8a06:	4b02      	ldr	r3, [pc, #8]	; (b8a10 <network_connecting+0xc>)
   b8a08:	681b      	ldr	r3, [r3, #0]
   b8a0a:	689b      	ldr	r3, [r3, #8]
   b8a0c:	9301      	str	r3, [sp, #4]
   b8a0e:	bd08      	pop	{r3, pc}
   b8a10:	00030240 	.word	0x00030240

000b8a14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <network_disconnect+0xc>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	68db      	ldr	r3, [r3, #12]
   b8a1c:	9301      	str	r3, [sp, #4]
   b8a1e:	bd08      	pop	{r3, pc}
   b8a20:	00030240 	.word	0x00030240

000b8a24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8a24:	b508      	push	{r3, lr}
   b8a26:	4b02      	ldr	r3, [pc, #8]	; (b8a30 <network_ready+0xc>)
   b8a28:	681b      	ldr	r3, [r3, #0]
   b8a2a:	691b      	ldr	r3, [r3, #16]
   b8a2c:	9301      	str	r3, [sp, #4]
   b8a2e:	bd08      	pop	{r3, pc}
   b8a30:	00030240 	.word	0x00030240

000b8a34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a34:	b508      	push	{r3, lr}
   b8a36:	4b02      	ldr	r3, [pc, #8]	; (b8a40 <network_on+0xc>)
   b8a38:	681b      	ldr	r3, [r3, #0]
   b8a3a:	695b      	ldr	r3, [r3, #20]
   b8a3c:	9301      	str	r3, [sp, #4]
   b8a3e:	bd08      	pop	{r3, pc}
   b8a40:	00030240 	.word	0x00030240

000b8a44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a44:	b508      	push	{r3, lr}
   b8a46:	4b02      	ldr	r3, [pc, #8]	; (b8a50 <network_off+0xc>)
   b8a48:	681b      	ldr	r3, [r3, #0]
   b8a4a:	699b      	ldr	r3, [r3, #24]
   b8a4c:	9301      	str	r3, [sp, #4]
   b8a4e:	bd08      	pop	{r3, pc}
   b8a50:	00030240 	.word	0x00030240

000b8a54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8a54:	b508      	push	{r3, lr}
   b8a56:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <network_listen+0xc>)
   b8a58:	681b      	ldr	r3, [r3, #0]
   b8a5a:	69db      	ldr	r3, [r3, #28]
   b8a5c:	9301      	str	r3, [sp, #4]
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	00030240 	.word	0x00030240

000b8a64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b02      	ldr	r3, [pc, #8]	; (b8a70 <network_listening+0xc>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	6a1b      	ldr	r3, [r3, #32]
   b8a6c:	9301      	str	r3, [sp, #4]
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	00030240 	.word	0x00030240

000b8a74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8a74:	b508      	push	{r3, lr}
   b8a76:	4b02      	ldr	r3, [pc, #8]	; (b8a80 <network_set_listen_timeout+0xc>)
   b8a78:	681b      	ldr	r3, [r3, #0]
   b8a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a7c:	9301      	str	r3, [sp, #4]
   b8a7e:	bd08      	pop	{r3, pc}
   b8a80:	00030240 	.word	0x00030240

000b8a84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8a84:	b508      	push	{r3, lr}
   b8a86:	4b02      	ldr	r3, [pc, #8]	; (b8a90 <network_get_listen_timeout+0xc>)
   b8a88:	681b      	ldr	r3, [r3, #0]
   b8a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a8c:	9301      	str	r3, [sp, #4]
   b8a8e:	bd08      	pop	{r3, pc}
   b8a90:	00030240 	.word	0x00030240

000b8a94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8a94:	b508      	push	{r3, lr}
   b8a96:	4b02      	ldr	r3, [pc, #8]	; (b8aa0 <network_is_on+0xc>)
   b8a98:	681b      	ldr	r3, [r3, #0]
   b8a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a9c:	9301      	str	r3, [sp, #4]
   b8a9e:	bd08      	pop	{r3, pc}
   b8aa0:	00030240 	.word	0x00030240

000b8aa4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4b02      	ldr	r3, [pc, #8]	; (b8ab0 <network_is_off+0xc>)
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8aac:	9301      	str	r3, [sp, #4]
   b8aae:	bd08      	pop	{r3, pc}
   b8ab0:	00030240 	.word	0x00030240

000b8ab4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8ab4:	b508      	push	{r3, lr}
   b8ab6:	4b02      	ldr	r3, [pc, #8]	; (b8ac0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8abc:	9301      	str	r3, [sp, #4]
   b8abe:	bd08      	pop	{r3, pc}
   b8ac0:	00030244 	.word	0x00030244

000b8ac4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b8ac4:	b508      	push	{r3, lr}
   b8ac6:	4b02      	ldr	r3, [pc, #8]	; (b8ad0 <spark_cloud_disconnect+0xc>)
   b8ac8:	681b      	ldr	r3, [r3, #0]
   b8aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8acc:	9301      	str	r3, [sp, #4]
   b8ace:	bd08      	pop	{r3, pc}
   b8ad0:	00030244 	.word	0x00030244

000b8ad4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8ad4:	b508      	push	{r3, lr}
   b8ad6:	4b02      	ldr	r3, [pc, #8]	; (b8ae0 <malloc+0xc>)
   b8ad8:	681b      	ldr	r3, [r3, #0]
   b8ada:	681b      	ldr	r3, [r3, #0]
   b8adc:	9301      	str	r3, [sp, #4]
   b8ade:	bd08      	pop	{r3, pc}
   b8ae0:	0003021c 	.word	0x0003021c

000b8ae4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8ae4:	b508      	push	{r3, lr}
   b8ae6:	4b02      	ldr	r3, [pc, #8]	; (b8af0 <free+0xc>)
   b8ae8:	681b      	ldr	r3, [r3, #0]
   b8aea:	685b      	ldr	r3, [r3, #4]
   b8aec:	9301      	str	r3, [sp, #4]
   b8aee:	bd08      	pop	{r3, pc}
   b8af0:	0003021c 	.word	0x0003021c

000b8af4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8af4:	b508      	push	{r3, lr}
   b8af6:	4b02      	ldr	r3, [pc, #8]	; (b8b00 <realloc+0xc>)
   b8af8:	681b      	ldr	r3, [r3, #0]
   b8afa:	689b      	ldr	r3, [r3, #8]
   b8afc:	9301      	str	r3, [sp, #4]
   b8afe:	bd08      	pop	{r3, pc}
   b8b00:	0003021c 	.word	0x0003021c

000b8b04 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8b04:	b508      	push	{r3, lr}
   b8b06:	4b02      	ldr	r3, [pc, #8]	; (b8b10 <snprintf+0xc>)
   b8b08:	681b      	ldr	r3, [r3, #0]
   b8b0a:	69db      	ldr	r3, [r3, #28]
   b8b0c:	9301      	str	r3, [sp, #4]
   b8b0e:	bd08      	pop	{r3, pc}
   b8b10:	0003021c 	.word	0x0003021c

000b8b14 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8b14:	b508      	push	{r3, lr}
   b8b16:	4b02      	ldr	r3, [pc, #8]	; (b8b20 <vsnprintf+0xc>)
   b8b18:	681b      	ldr	r3, [r3, #0]
   b8b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b1c:	9301      	str	r3, [sp, #4]
   b8b1e:	bd08      	pop	{r3, pc}
   b8b20:	0003021c 	.word	0x0003021c

000b8b24 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8b24:	b508      	push	{r3, lr}
   b8b26:	4b02      	ldr	r3, [pc, #8]	; (b8b30 <_malloc_r+0xc>)
   b8b28:	681b      	ldr	r3, [r3, #0]
   b8b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b2c:	9301      	str	r3, [sp, #4]
   b8b2e:	bd08      	pop	{r3, pc}
   b8b30:	0003021c 	.word	0x0003021c

000b8b34 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8b34:	b508      	push	{r3, lr}
   b8b36:	4b02      	ldr	r3, [pc, #8]	; (b8b40 <__assert_func+0xc>)
   b8b38:	681b      	ldr	r3, [r3, #0]
   b8b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b3c:	9301      	str	r3, [sp, #4]
   b8b3e:	bd08      	pop	{r3, pc}
   b8b40:	0003021c 	.word	0x0003021c

000b8b44 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8b44:	b508      	push	{r3, lr}
   b8b46:	4b02      	ldr	r3, [pc, #8]	; (b8b50 <newlib_impure_ptr_callback+0xc>)
   b8b48:	681b      	ldr	r3, [r3, #0]
   b8b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b4c:	9301      	str	r3, [sp, #4]
   b8b4e:	bd08      	pop	{r3, pc}
   b8b50:	0003021c 	.word	0x0003021c

000b8b54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8b54:	2200      	movs	r2, #0
   b8b56:	6840      	ldr	r0, [r0, #4]
   b8b58:	4611      	mov	r1, r2
   b8b5a:	f7ff bf83 	b.w	b8a64 <network_listening>

000b8b5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8b5e:	2200      	movs	r2, #0
   b8b60:	6840      	ldr	r0, [r0, #4]
   b8b62:	4611      	mov	r1, r2
   b8b64:	f7ff bf8e 	b.w	b8a84 <network_get_listen_timeout>

000b8b68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8b68:	6840      	ldr	r0, [r0, #4]
   b8b6a:	2200      	movs	r2, #0
   b8b6c:	f7ff bf82 	b.w	b8a74 <network_set_listen_timeout>

000b8b70 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8b70:	6840      	ldr	r0, [r0, #4]
   b8b72:	2200      	movs	r2, #0
   b8b74:	f081 0101 	eor.w	r1, r1, #1
   b8b78:	f7ff bf6c 	b.w	b8a54 <network_listen>

000b8b7c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8b7c:	2300      	movs	r3, #0
   b8b7e:	6840      	ldr	r0, [r0, #4]
   b8b80:	461a      	mov	r2, r3
   b8b82:	4619      	mov	r1, r3
   b8b84:	f7ff bf5e 	b.w	b8a44 <network_off>

000b8b88 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8b88:	2300      	movs	r3, #0
   b8b8a:	6840      	ldr	r0, [r0, #4]
   b8b8c:	461a      	mov	r2, r3
   b8b8e:	4619      	mov	r1, r3
   b8b90:	f7ff bf50 	b.w	b8a34 <network_on>

000b8b94 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8b94:	2200      	movs	r2, #0
   b8b96:	6840      	ldr	r0, [r0, #4]
   b8b98:	4611      	mov	r1, r2
   b8b9a:	f7ff bf43 	b.w	b8a24 <network_ready>

000b8b9e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8b9e:	2200      	movs	r2, #0
   b8ba0:	6840      	ldr	r0, [r0, #4]
   b8ba2:	4611      	mov	r1, r2
   b8ba4:	f7ff bf2e 	b.w	b8a04 <network_connecting>

000b8ba8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8ba8:	6840      	ldr	r0, [r0, #4]
   b8baa:	2200      	movs	r2, #0
   b8bac:	2102      	movs	r1, #2
   b8bae:	f7ff bf31 	b.w	b8a14 <network_disconnect>

000b8bb2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8bb2:	2300      	movs	r3, #0
   b8bb4:	6840      	ldr	r0, [r0, #4]
   b8bb6:	461a      	mov	r2, r3
   b8bb8:	f7ff bf1c 	b.w	b89f4 <network_connect>

000b8bbc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8bbc:	4b02      	ldr	r3, [pc, #8]	; (b8bc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8bbe:	2203      	movs	r2, #3
   b8bc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8bc2:	4a02      	ldr	r2, [pc, #8]	; (b8bcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8bc4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8bc6:	4770      	bx	lr
   b8bc8:	2003e6bc 	.word	0x2003e6bc
   b8bcc:	000bbc00 	.word	0x000bbc00

000b8bd0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8bd0:	2100      	movs	r1, #0
   b8bd2:	f7ff be93 	b.w	b88fc <hal_spi_release>

000b8bd6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8bd6:	2100      	movs	r1, #0
   b8bd8:	f7ff be88 	b.w	b88ec <hal_spi_acquire>

000b8bdc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8bdc:	b510      	push	{r4, lr}
   b8bde:	4604      	mov	r4, r0
   b8be0:	4608      	mov	r0, r1
{
    _spi = spi;
   b8be2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8be4:	f7ff fe62 	bl	b88ac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8be8:	2300      	movs	r3, #0
   b8bea:	6063      	str	r3, [r4, #4]
}
   b8bec:	4620      	mov	r0, r4
   b8bee:	bd10      	pop	{r4, pc}

000b8bf0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8bf0:	b513      	push	{r0, r1, r4, lr}
   b8bf2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8bf4:	7800      	ldrb	r0, [r0, #0]
   b8bf6:	f7ff ffee 	bl	b8bd6 <_ZN8SPIClass4lockEv.isra.0>
   b8bfa:	b958      	cbnz	r0, b8c14 <_ZN8SPIClass5beginEv+0x24>
   b8bfc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8bfe:	9001      	str	r0, [sp, #4]
   b8c00:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8c04:	f7ff fe42 	bl	b888c <hal_spi_begin>
        unlock();
   b8c08:	9801      	ldr	r0, [sp, #4]
    }
}
   b8c0a:	b002      	add	sp, #8
   b8c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8c10:	f7ff bfde 	b.w	b8bd0 <_ZN8SPIClass6unlockEv.isra.0>
   b8c14:	b002      	add	sp, #8
   b8c16:	bd10      	pop	{r4, pc}

000b8c18 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8c18:	7800      	ldrb	r0, [r0, #0]
   b8c1a:	f7ff bfd9 	b.w	b8bd0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8c20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8c20:	0840      	lsrs	r0, r0, #1
{
   b8c22:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8c24:	6018      	str	r0, [r3, #0]
   b8c26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8c28:	6818      	ldr	r0, [r3, #0]
   b8c2a:	4288      	cmp	r0, r1
   b8c2c:	b2e5      	uxtb	r5, r4
   b8c2e:	d906      	bls.n	b8c3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8c30:	3401      	adds	r4, #1
   b8c32:	2c08      	cmp	r4, #8
   b8c34:	d002      	beq.n	b8c3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8c36:	0840      	lsrs	r0, r0, #1
   b8c38:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8c3a:	e7f5      	b.n	b8c28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8c3c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8c3e:	4b02      	ldr	r3, [pc, #8]	; (b8c48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8c40:	5d5b      	ldrb	r3, [r3, r5]
   b8c42:	7013      	strb	r3, [r2, #0]
}
   b8c44:	bd30      	pop	{r4, r5, pc}
   b8c46:	bf00      	nop
   b8c48:	000bbc34 	.word	0x000bbc34

000b8c4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8c50:	4606      	mov	r6, r0
   b8c52:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8c54:	7800      	ldrb	r0, [r0, #0]
{
   b8c56:	460c      	mov	r4, r1
    CHECK(lock());
   b8c58:	f7ff ffbd 	bl	b8bd6 <_ZN8SPIClass4lockEv.isra.0>
   b8c5c:	2800      	cmp	r0, #0
   b8c5e:	db1b      	blt.n	b8c98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8c60:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8c62:	2214      	movs	r2, #20
   b8c64:	2100      	movs	r1, #0
   b8c66:	a809      	add	r0, sp, #36	; 0x24
   b8c68:	f001 f8c8 	bl	b9dfc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8c6c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8c6e:	2200      	movs	r2, #0
   b8c70:	a909      	add	r1, sp, #36	; 0x24
   b8c72:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8c74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8c78:	f7ff fe28 	bl	b88cc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8c7c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8c80:	b113      	cbz	r3, b8c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8c82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8c86:	b155      	cbz	r5, b8c9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8c88:	2700      	movs	r7, #0
   b8c8a:	46b9      	mov	r9, r7
   b8c8c:	46b8      	mov	r8, r7
   b8c8e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8c90:	7923      	ldrb	r3, [r4, #4]
   b8c92:	b15d      	cbz	r5, b8cac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8c94:	b1c3      	cbz	r3, b8cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8c96:	2000      	movs	r0, #0
}
   b8c98:	b00f      	add	sp, #60	; 0x3c
   b8c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8c9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8ca2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8ca6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8caa:	e7f1      	b.n	b8c90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8cac:	2b00      	cmp	r3, #0
   b8cae:	d135      	bne.n	b8d1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8cb0:	68a3      	ldr	r3, [r4, #8]
   b8cb2:	4543      	cmp	r3, r8
   b8cb4:	d108      	bne.n	b8cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8cb6:	f88d 9020 	strb.w	r9, [sp, #32]
   b8cba:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8cbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8cc2:	89a3      	ldrh	r3, [r4, #12]
   b8cc4:	429a      	cmp	r2, r3
   b8cc6:	d0e6      	beq.n	b8c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8cc8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8cca:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8ccc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8cd0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8cd2:	ab04      	add	r3, sp, #16
   b8cd4:	f10d 020f 	add.w	r2, sp, #15
   b8cd8:	f7ff ffa2 	bl	b8c20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8cdc:	7921      	ldrb	r1, [r4, #4]
   b8cde:	b985      	cbnz	r5, b8d02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8ce0:	b989      	cbnz	r1, b8d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8ce2:	68a3      	ldr	r3, [r4, #8]
   b8ce4:	4543      	cmp	r3, r8
   b8ce6:	d30e      	bcc.n	b8d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8ce8:	f88d 9020 	strb.w	r9, [sp, #32]
   b8cec:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8cf0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8cf4:	89a3      	ldrh	r3, [r4, #12]
   b8cf6:	429a      	cmp	r2, r3
   b8cf8:	d105      	bne.n	b8d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8cfa:	9b04      	ldr	r3, [sp, #16]
   b8cfc:	4543      	cmp	r3, r8
   b8cfe:	d102      	bne.n	b8d06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8d00:	e7c9      	b.n	b8c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8d02:	2900      	cmp	r1, #0
   b8d04:	d1f9      	bne.n	b8cfa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8d06:	2300      	movs	r3, #0
   b8d08:	9301      	str	r3, [sp, #4]
   b8d0a:	7b63      	ldrb	r3, [r4, #13]
   b8d0c:	9300      	str	r3, [sp, #0]
   b8d0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8d12:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8d14:	7830      	ldrb	r0, [r6, #0]
   b8d16:	f7ff fde1 	bl	b88dc <hal_spi_set_settings>
   b8d1a:	e7bc      	b.n	b8c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8d1c:	e9cd 5500 	strd	r5, r5, [sp]
   b8d20:	462b      	mov	r3, r5
   b8d22:	462a      	mov	r2, r5
   b8d24:	2101      	movs	r1, #1
   b8d26:	e7f5      	b.n	b8d14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8d28 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8d28:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8d2a:	7800      	ldrb	r0, [r0, #0]
   b8d2c:	f7ff fdb6 	bl	b889c <hal_spi_transfer>
}
   b8d30:	b2c0      	uxtb	r0, r0
   b8d32:	bd08      	pop	{r3, pc}

000b8d34 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8d34:	4b05      	ldr	r3, [pc, #20]	; (b8d4c <_GLOBAL__sub_I_System+0x18>)
   b8d36:	2202      	movs	r2, #2
   b8d38:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8d3a:	4b05      	ldr	r3, [pc, #20]	; (b8d50 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8d3c:	4a05      	ldr	r2, [pc, #20]	; (b8d54 <_GLOBAL__sub_I_System+0x20>)
   b8d3e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8d40:	2000      	movs	r0, #0
   b8d42:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8d46:	f7ff be31 	b.w	b89ac <set_system_mode>
   b8d4a:	bf00      	nop
   b8d4c:	2003e6d0 	.word	0x2003e6d0
   b8d50:	2003e6c4 	.word	0x2003e6c4
   b8d54:	ffff0000 	.word	0xffff0000

000b8d58 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8d58:	b510      	push	{r4, lr}
   b8d5a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8d5c:	f001 f89c 	bl	b9e98 <strlen>
   b8d60:	3801      	subs	r0, #1
   b8d62:	1823      	adds	r3, r4, r0
   b8d64:	4620      	mov	r0, r4
	while(i<j){
   b8d66:	4283      	cmp	r3, r0
   b8d68:	d906      	bls.n	b8d78 <_Z11str_reversePc+0x20>
		c = *i;
   b8d6a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8d6c:	7819      	ldrb	r1, [r3, #0]
   b8d6e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8d72:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8d76:	e7f6      	b.n	b8d66 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8d78:	bd10      	pop	{r4, pc}

000b8d7a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8d7a:	b570      	push	{r4, r5, r6, lr}
   b8d7c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8d7e:	1e91      	subs	r1, r2, #2
   b8d80:	2922      	cmp	r1, #34	; 0x22
   b8d82:	d81d      	bhi.n	b8dc0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8d84:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8d86:	b930      	cbnz	r0, b8d96 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8d88:	4423      	add	r3, r4
            *ptr++ = '0';
   b8d8a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8d8c:	429d      	cmp	r5, r3
   b8d8e:	d210      	bcs.n	b8db2 <ultoa+0x38>
            *ptr++ = '0';
   b8d90:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8d94:	e7fa      	b.n	b8d8c <ultoa+0x12>
            result.quot = a/radix;
   b8d96:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8d9a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8d9e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8da0:	2809      	cmp	r0, #9
                *ptr += '0';
   b8da2:	bf94      	ite	ls
   b8da4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8da6:	3157      	addhi	r1, #87	; 0x57
   b8da8:	b2c9      	uxtb	r1, r1
   b8daa:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8dae:	4630      	mov	r0, r6
	while(a){
   b8db0:	e7e9      	b.n	b8d86 <ultoa+0xc>

	*ptr = '\0';
   b8db2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8db4:	4620      	mov	r0, r4
	*ptr = '\0';
   b8db6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8db8:	f7ff ffce 	bl	b8d58 <_Z11str_reversePc>
	return buffer;
   b8dbc:	4620      	mov	r0, r4
}
   b8dbe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8dc0:	2000      	movs	r0, #0
   b8dc2:	e7fc      	b.n	b8dbe <ultoa+0x44>

000b8dc4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8dc4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8dc6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8dc8:	460c      	mov	r4, r1
   b8dca:	4615      	mov	r5, r2
	if(a<0){
   b8dcc:	da0e      	bge.n	b8dec <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8dd2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8dd6:	bf14      	ite	ne
   b8dd8:	4258      	negne	r0, r3
   b8dda:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8ddc:	2301      	movs	r3, #1
		*buffer = '-';
   b8dde:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8de0:	462a      	mov	r2, r5
   b8de2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8de4:	f7ff ffc9 	bl	b8d7a <ultoa>
	}
	return buffer;
}
   b8de8:	4620      	mov	r0, r4
   b8dea:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8dec:	2301      	movs	r3, #1
   b8dee:	e7f9      	b.n	b8de4 <itoa+0x20>

000b8df0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8df0:	b510      	push	{r4, lr}
   b8df2:	4604      	mov	r4, r0
{
	free(buffer);
   b8df4:	6800      	ldr	r0, [r0, #0]
   b8df6:	f7ff fe75 	bl	b8ae4 <free>
}
   b8dfa:	4620      	mov	r0, r4
   b8dfc:	bd10      	pop	{r4, pc}

000b8dfe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8dfe:	b510      	push	{r4, lr}
   b8e00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8e02:	6800      	ldr	r0, [r0, #0]
   b8e04:	b108      	cbz	r0, b8e0a <_ZN6String10invalidateEv+0xc>
   b8e06:	f7ff fe6d 	bl	b8ae4 <free>
	buffer = NULL;
   b8e0a:	2300      	movs	r3, #0
	capacity = len = 0;
   b8e0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8e10:	6023      	str	r3, [r4, #0]
}
   b8e12:	bd10      	pop	{r4, pc}

000b8e14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8e14:	b538      	push	{r3, r4, r5, lr}
   b8e16:	4604      	mov	r4, r0
   b8e18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8e1a:	6800      	ldr	r0, [r0, #0]
   b8e1c:	3101      	adds	r1, #1
   b8e1e:	f7ff fe69 	bl	b8af4 <realloc>
	if (newbuffer) {
   b8e22:	b110      	cbz	r0, b8e2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8e24:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8e28:	2001      	movs	r0, #1
	}
	return 0;
}
   b8e2a:	bd38      	pop	{r3, r4, r5, pc}

000b8e2c <_ZN6String7reserveEj>:
{
   b8e2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8e2e:	6803      	ldr	r3, [r0, #0]
{
   b8e30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8e32:	b123      	cbz	r3, b8e3e <_ZN6String7reserveEj+0x12>
   b8e34:	6843      	ldr	r3, [r0, #4]
   b8e36:	428b      	cmp	r3, r1
   b8e38:	d301      	bcc.n	b8e3e <_ZN6String7reserveEj+0x12>
   b8e3a:	2001      	movs	r0, #1
}
   b8e3c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8e3e:	4620      	mov	r0, r4
   b8e40:	f7ff ffe8 	bl	b8e14 <_ZN6String12changeBufferEj>
   b8e44:	2800      	cmp	r0, #0
   b8e46:	d0f9      	beq.n	b8e3c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8e48:	68a3      	ldr	r3, [r4, #8]
   b8e4a:	2b00      	cmp	r3, #0
   b8e4c:	d1f5      	bne.n	b8e3a <_ZN6String7reserveEj+0xe>
   b8e4e:	6822      	ldr	r2, [r4, #0]
   b8e50:	7013      	strb	r3, [r2, #0]
   b8e52:	e7f2      	b.n	b8e3a <_ZN6String7reserveEj+0xe>

000b8e54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8e56:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8e58:	4611      	mov	r1, r2
   b8e5a:	9201      	str	r2, [sp, #4]
{
   b8e5c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8e5e:	f7ff ffe5 	bl	b8e2c <_ZN6String7reserveEj>
   b8e62:	9a01      	ldr	r2, [sp, #4]
   b8e64:	b928      	cbnz	r0, b8e72 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8e66:	4620      	mov	r0, r4
   b8e68:	f7ff ffc9 	bl	b8dfe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8e6c:	4620      	mov	r0, r4
   b8e6e:	b003      	add	sp, #12
   b8e70:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8e72:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8e74:	4629      	mov	r1, r5
   b8e76:	6820      	ldr	r0, [r4, #0]
   b8e78:	f000 ffb2 	bl	b9de0 <memcpy>
	buffer[len] = 0;
   b8e7c:	6822      	ldr	r2, [r4, #0]
   b8e7e:	68a3      	ldr	r3, [r4, #8]
   b8e80:	2100      	movs	r1, #0
   b8e82:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8e84:	e7f2      	b.n	b8e6c <_ZN6String4copyEPKcj+0x18>

000b8e86 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8e86:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8e88:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8e8a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8e8e:	4604      	mov	r4, r0
	len = 0;
   b8e90:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8e92:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8e94:	b141      	cbz	r1, b8ea8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8e96:	4608      	mov	r0, r1
   b8e98:	9101      	str	r1, [sp, #4]
   b8e9a:	f000 fffd 	bl	b9e98 <strlen>
   b8e9e:	9901      	ldr	r1, [sp, #4]
   b8ea0:	4602      	mov	r2, r0
   b8ea2:	4620      	mov	r0, r4
   b8ea4:	f7ff ffd6 	bl	b8e54 <_ZN6String4copyEPKcj>
}
   b8ea8:	4620      	mov	r0, r4
   b8eaa:	b002      	add	sp, #8
   b8eac:	bd10      	pop	{r4, pc}

000b8eae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8eae:	4288      	cmp	r0, r1
{
   b8eb0:	b510      	push	{r4, lr}
   b8eb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8eb4:	d005      	beq.n	b8ec2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8eb6:	680b      	ldr	r3, [r1, #0]
   b8eb8:	b12b      	cbz	r3, b8ec6 <_ZN6StringaSERKS_+0x18>
   b8eba:	688a      	ldr	r2, [r1, #8]
   b8ebc:	4619      	mov	r1, r3
   b8ebe:	f7ff ffc9 	bl	b8e54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8ec2:	4620      	mov	r0, r4
   b8ec4:	bd10      	pop	{r4, pc}
	else invalidate();
   b8ec6:	f7ff ff9a 	bl	b8dfe <_ZN6String10invalidateEv>
   b8eca:	e7fa      	b.n	b8ec2 <_ZN6StringaSERKS_+0x14>

000b8ecc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8ecc:	b510      	push	{r4, lr}
	buffer = NULL;
   b8ece:	2300      	movs	r3, #0
String::String(const String &value)
   b8ed0:	4604      	mov	r4, r0
	capacity = 0;
   b8ed2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8ed6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8ed8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8eda:	f7ff ffe8 	bl	b8eae <_ZN6StringaSERKS_>
}
   b8ede:	4620      	mov	r0, r4
   b8ee0:	bd10      	pop	{r4, pc}

000b8ee2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8ee2:	b513      	push	{r0, r1, r4, lr}
   b8ee4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8ee6:	b159      	cbz	r1, b8f00 <_ZN6StringaSEPKc+0x1e>
   b8ee8:	4608      	mov	r0, r1
   b8eea:	9101      	str	r1, [sp, #4]
   b8eec:	f000 ffd4 	bl	b9e98 <strlen>
   b8ef0:	9901      	ldr	r1, [sp, #4]
   b8ef2:	4602      	mov	r2, r0
   b8ef4:	4620      	mov	r0, r4
   b8ef6:	f7ff ffad 	bl	b8e54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8efa:	4620      	mov	r0, r4
   b8efc:	b002      	add	sp, #8
   b8efe:	bd10      	pop	{r4, pc}
	else invalidate();
   b8f00:	f7ff ff7d 	bl	b8dfe <_ZN6String10invalidateEv>
   b8f04:	e7f9      	b.n	b8efa <_ZN6StringaSEPKc+0x18>

000b8f06 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8f06:	b510      	push	{r4, lr}
   b8f08:	4604      	mov	r4, r0
   b8f0a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8f0c:	2300      	movs	r3, #0
	capacity = 0;
   b8f0e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8f12:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8f14:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8f16:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8f18:	a901      	add	r1, sp, #4
   b8f1a:	f7ff ff53 	bl	b8dc4 <itoa>
	*this = buf;
   b8f1e:	a901      	add	r1, sp, #4
   b8f20:	4620      	mov	r0, r4
   b8f22:	f7ff ffde 	bl	b8ee2 <_ZN6StringaSEPKc>
}
   b8f26:	4620      	mov	r0, r4
   b8f28:	b00a      	add	sp, #40	; 0x28
   b8f2a:	bd10      	pop	{r4, pc}

000b8f2c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8f2c:	b570      	push	{r4, r5, r6, lr}
   b8f2e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8f30:	460e      	mov	r6, r1
   b8f32:	b909      	cbnz	r1, b8f38 <_ZN6String6concatEPKcj+0xc>
   b8f34:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8f36:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8f38:	b16a      	cbz	r2, b8f56 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8f3a:	6884      	ldr	r4, [r0, #8]
   b8f3c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8f3e:	4621      	mov	r1, r4
   b8f40:	f7ff ff74 	bl	b8e2c <_ZN6String7reserveEj>
   b8f44:	2800      	cmp	r0, #0
   b8f46:	d0f5      	beq.n	b8f34 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8f48:	6828      	ldr	r0, [r5, #0]
   b8f4a:	68ab      	ldr	r3, [r5, #8]
   b8f4c:	4631      	mov	r1, r6
   b8f4e:	4418      	add	r0, r3
   b8f50:	f000 ff9a 	bl	b9e88 <strcpy>
	len = newlen;
   b8f54:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8f56:	2001      	movs	r0, #1
   b8f58:	e7ed      	b.n	b8f36 <_ZN6String6concatEPKcj+0xa>

000b8f5a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8f5a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8f5c:	688a      	ldr	r2, [r1, #8]
   b8f5e:	6809      	ldr	r1, [r1, #0]
{
   b8f60:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8f62:	f7ff ffe3 	bl	b8f2c <_ZN6String6concatEPKcj>
   b8f66:	b910      	cbnz	r0, b8f6e <_ZplRK15StringSumHelperRK6String+0x14>
   b8f68:	4620      	mov	r0, r4
   b8f6a:	f7ff ff48 	bl	b8dfe <_ZN6String10invalidateEv>
	return a;
}
   b8f6e:	4620      	mov	r0, r4
   b8f70:	bd10      	pop	{r4, pc}

000b8f72 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8f72:	b513      	push	{r0, r1, r4, lr}
   b8f74:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8f76:	b929      	cbnz	r1, b8f84 <_ZplRK15StringSumHelperPKc+0x12>
   b8f78:	4620      	mov	r0, r4
   b8f7a:	f7ff ff40 	bl	b8dfe <_ZN6String10invalidateEv>
	return a;
}
   b8f7e:	4620      	mov	r0, r4
   b8f80:	b002      	add	sp, #8
   b8f82:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8f84:	4608      	mov	r0, r1
   b8f86:	9101      	str	r1, [sp, #4]
   b8f88:	f000 ff86 	bl	b9e98 <strlen>
   b8f8c:	9901      	ldr	r1, [sp, #4]
   b8f8e:	4602      	mov	r2, r0
   b8f90:	4620      	mov	r0, r4
   b8f92:	f7ff ffcb 	bl	b8f2c <_ZN6String6concatEPKcj>
   b8f96:	2800      	cmp	r0, #0
   b8f98:	d0ee      	beq.n	b8f78 <_ZplRK15StringSumHelperPKc+0x6>
   b8f9a:	e7f0      	b.n	b8f7e <_ZplRK15StringSumHelperPKc+0xc>

000b8f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8f9c:	4802      	ldr	r0, [pc, #8]	; (b8fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8f9e:	2300      	movs	r3, #0
   b8fa0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8fa2:	f7ff bbcb 	b.w	b873c <os_mutex_recursive_create>
   b8fa6:	bf00      	nop
   b8fa8:	2003e6d4 	.word	0x2003e6d4

000b8fac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fae:	4606      	mov	r6, r0
   b8fb0:	460d      	mov	r5, r1
  size_t n = 0;
   b8fb2:	188f      	adds	r7, r1, r2
   b8fb4:	2400      	movs	r4, #0
  while (size--) {
   b8fb6:	42bd      	cmp	r5, r7
   b8fb8:	d00c      	beq.n	b8fd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8fba:	6833      	ldr	r3, [r6, #0]
   b8fbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8fc0:	689b      	ldr	r3, [r3, #8]
   b8fc2:	4630      	mov	r0, r6
   b8fc4:	4798      	blx	r3
     if (chunk>=0)
   b8fc6:	1e03      	subs	r3, r0, #0
   b8fc8:	db01      	blt.n	b8fce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8fca:	441c      	add	r4, r3
  while (size--) {
   b8fcc:	e7f3      	b.n	b8fb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8fce:	2c00      	cmp	r4, #0
   b8fd0:	bf08      	it	eq
   b8fd2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8fd4:	4620      	mov	r0, r4
   b8fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8fd8:	b513      	push	{r0, r1, r4, lr}
   b8fda:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8fdc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8fde:	b159      	cbz	r1, b8ff8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8fe0:	9101      	str	r1, [sp, #4]
   b8fe2:	f000 ff59 	bl	b9e98 <strlen>
   b8fe6:	6823      	ldr	r3, [r4, #0]
   b8fe8:	9901      	ldr	r1, [sp, #4]
   b8fea:	68db      	ldr	r3, [r3, #12]
   b8fec:	4602      	mov	r2, r0
   b8fee:	4620      	mov	r0, r4
    }
   b8ff0:	b002      	add	sp, #8
   b8ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8ff6:	4718      	bx	r3
    }
   b8ff8:	b002      	add	sp, #8
   b8ffa:	bd10      	pop	{r4, pc}

000b8ffc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8ffc:	b508      	push	{r3, lr}
  return write(str);
   b8ffe:	f7ff ffeb 	bl	b8fd8 <_ZN5Print5writeEPKc>
}
   b9002:	bd08      	pop	{r3, pc}

000b9004 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9004:	6803      	ldr	r3, [r0, #0]
   b9006:	689b      	ldr	r3, [r3, #8]
   b9008:	4718      	bx	r3

000b900a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b900a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b900c:	210d      	movs	r1, #13
{
   b900e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9010:	f7ff fff8 	bl	b9004 <_ZN5Print5printEc>
  n += print('\n');
   b9014:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9016:	4604      	mov	r4, r0
  n += print('\n');
   b9018:	4628      	mov	r0, r5
   b901a:	f7ff fff3 	bl	b9004 <_ZN5Print5printEc>
  return n;
}
   b901e:	4420      	add	r0, r4
   b9020:	bd38      	pop	{r3, r4, r5, pc}

000b9022 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9022:	b538      	push	{r3, r4, r5, lr}
   b9024:	4605      	mov	r5, r0
  return write(str);
   b9026:	f7ff ffd7 	bl	b8fd8 <_ZN5Print5writeEPKc>
   b902a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b902c:	4628      	mov	r0, r5
   b902e:	f7ff ffec 	bl	b900a <_ZN5Print7printlnEv>
  return n;
}
   b9032:	4420      	add	r0, r4
   b9034:	bd38      	pop	{r3, r4, r5, pc}

000b9036 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9036:	b530      	push	{r4, r5, lr}
   b9038:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b903a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b903c:	2a01      	cmp	r2, #1
  *str = '\0';
   b903e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9042:	bf98      	it	ls
   b9044:	220a      	movls	r2, #10
   b9046:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9048:	460d      	mov	r5, r1
   b904a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b904e:	fb01 5312 	mls	r3, r1, r2, r5
   b9052:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9056:	2b09      	cmp	r3, #9
   b9058:	bf94      	ite	ls
   b905a:	3330      	addls	r3, #48	; 0x30
   b905c:	3337      	addhi	r3, #55	; 0x37
   b905e:	b2db      	uxtb	r3, r3
  } while(n);
   b9060:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9062:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9066:	d9ef      	bls.n	b9048 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9068:	4621      	mov	r1, r4
   b906a:	f7ff ffb5 	bl	b8fd8 <_ZN5Print5writeEPKc>
}
   b906e:	b00b      	add	sp, #44	; 0x2c
   b9070:	bd30      	pop	{r4, r5, pc}

000b9072 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9076:	b086      	sub	sp, #24
   b9078:	af00      	add	r7, sp, #0
   b907a:	4605      	mov	r5, r0
   b907c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b907e:	1d38      	adds	r0, r7, #4
   b9080:	2114      	movs	r1, #20
{
   b9082:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9084:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9086:	f7ff fd45 	bl	b8b14 <vsnprintf>

    if (n<bufsize)
   b908a:	2813      	cmp	r0, #19
   b908c:	d80e      	bhi.n	b90ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b908e:	1d39      	adds	r1, r7, #4
   b9090:	4628      	mov	r0, r5
   b9092:	f7ff ffa1 	bl	b8fd8 <_ZN5Print5writeEPKc>
   b9096:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9098:	b11e      	cbz	r6, b90a2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b909a:	4628      	mov	r0, r5
   b909c:	f7ff ffb5 	bl	b900a <_ZN5Print7printlnEv>
   b90a0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b90a2:	4620      	mov	r0, r4
   b90a4:	3718      	adds	r7, #24
   b90a6:	46bd      	mov	sp, r7
   b90a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b90ac:	f100 0308 	add.w	r3, r0, #8
   b90b0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b90b4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b90b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b90ba:	4622      	mov	r2, r4
   b90bc:	1c41      	adds	r1, r0, #1
   b90be:	683b      	ldr	r3, [r7, #0]
   b90c0:	4668      	mov	r0, sp
   b90c2:	f7ff fd27 	bl	b8b14 <vsnprintf>
  return write(str);
   b90c6:	4669      	mov	r1, sp
   b90c8:	4628      	mov	r0, r5
   b90ca:	f7ff ff85 	bl	b8fd8 <_ZN5Print5writeEPKc>
   b90ce:	4604      	mov	r4, r0
   b90d0:	46c5      	mov	sp, r8
   b90d2:	e7e1      	b.n	b9098 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b90d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b90d4:	4b01      	ldr	r3, [pc, #4]	; (b90dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b90d6:	4a02      	ldr	r2, [pc, #8]	; (b90e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b90d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b90da:	4770      	bx	lr
   b90dc:	2003e6d8 	.word	0x2003e6d8
   b90e0:	000bbc3c 	.word	0x000bbc3c

000b90e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b90e4:	4b02      	ldr	r3, [pc, #8]	; (b90f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b90e6:	681a      	ldr	r2, [r3, #0]
   b90e8:	4b02      	ldr	r3, [pc, #8]	; (b90f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b90ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b90ec:	4770      	bx	lr
   b90ee:	bf00      	nop
   b90f0:	2003cec8 	.word	0x2003cec8
   b90f4:	2003e6dc 	.word	0x2003e6dc

000b90f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b90f8:	2100      	movs	r1, #0
   b90fa:	f7ff bc5f 	b.w	b89bc <system_delay_ms>
	...

000b9100 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b9100:	4b01      	ldr	r3, [pc, #4]	; (b9108 <_GLOBAL__sub_I_RGB+0x8>)
   b9102:	2200      	movs	r2, #0
   b9104:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b9106:	4770      	bx	lr
   b9108:	2003e6e0 	.word	0x2003e6e0

000b910c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b910c:	4b01      	ldr	r3, [pc, #4]	; (b9114 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b910e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9110:	4770      	bx	lr
   b9112:	bf00      	nop
   b9114:	2003cecc 	.word	0x2003cecc

000b9118 <serialEventRun>:
{
   b9118:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b911a:	4b0b      	ldr	r3, [pc, #44]	; (b9148 <serialEventRun+0x30>)
   b911c:	b143      	cbz	r3, b9130 <serialEventRun+0x18>
   b911e:	f000 f981 	bl	b9424 <_Z16_fetch_usbserialv>
   b9122:	6803      	ldr	r3, [r0, #0]
   b9124:	691b      	ldr	r3, [r3, #16]
   b9126:	4798      	blx	r3
   b9128:	2800      	cmp	r0, #0
   b912a:	dd01      	ble.n	b9130 <serialEventRun+0x18>
        serialEvent();
   b912c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9130:	4b06      	ldr	r3, [pc, #24]	; (b914c <serialEventRun+0x34>)
   b9132:	b143      	cbz	r3, b9146 <serialEventRun+0x2e>
   b9134:	f000 fc12 	bl	b995c <_Z22__fetch_global_Serial1v>
   b9138:	6803      	ldr	r3, [r0, #0]
   b913a:	691b      	ldr	r3, [r3, #16]
   b913c:	4798      	blx	r3
   b913e:	2800      	cmp	r0, #0
   b9140:	dd01      	ble.n	b9146 <serialEventRun+0x2e>
        serialEvent1();
   b9142:	f3af 8000 	nop.w
}
   b9146:	bd08      	pop	{r3, pc}
	...

000b9150 <_post_loop>:
{
   b9150:	b508      	push	{r3, lr}
	serialEventRun();
   b9152:	f7ff ffe1 	bl	b9118 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9156:	f7ff fad1 	bl	b86fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b915a:	4b01      	ldr	r3, [pc, #4]	; (b9160 <_post_loop+0x10>)
   b915c:	6018      	str	r0, [r3, #0]
}
   b915e:	bd08      	pop	{r3, pc}
   b9160:	2003e738 	.word	0x2003e738

000b9164 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9164:	4805      	ldr	r0, [pc, #20]	; (b917c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9166:	4a06      	ldr	r2, [pc, #24]	; (b9180 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9168:	4906      	ldr	r1, [pc, #24]	; (b9184 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b916a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b916c:	1a12      	subs	r2, r2, r0
   b916e:	f000 fe37 	bl	b9de0 <memcpy>
    __backup_sram_signature = signature;
   b9172:	4b05      	ldr	r3, [pc, #20]	; (b9188 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9174:	4a05      	ldr	r2, [pc, #20]	; (b918c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9176:	601a      	str	r2, [r3, #0]
}
   b9178:	bd08      	pop	{r3, pc}
   b917a:	bf00      	nop
   b917c:	2003f400 	.word	0x2003f400
   b9180:	2003f404 	.word	0x2003f404
   b9184:	000bbed4 	.word	0x000bbed4
   b9188:	2003f400 	.word	0x2003f400
   b918c:	9a271c1e 	.word	0x9a271c1e

000b9190 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9190:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9192:	2300      	movs	r3, #0
   b9194:	9300      	str	r3, [sp, #0]
   b9196:	461a      	mov	r2, r3
   b9198:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b919c:	f7ff fc20 	bl	b89e0 <system_ctrl_set_result>
}
   b91a0:	b003      	add	sp, #12
   b91a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b91a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b91a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b91aa:	8843      	ldrh	r3, [r0, #2]
   b91ac:	2b0a      	cmp	r3, #10
   b91ae:	d008      	beq.n	b91c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b91b0:	2b50      	cmp	r3, #80	; 0x50
   b91b2:	d10b      	bne.n	b91cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b91b4:	4b09      	ldr	r3, [pc, #36]	; (b91dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b91b6:	681b      	ldr	r3, [r3, #0]
   b91b8:	b14b      	cbz	r3, b91ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b91ba:	b003      	add	sp, #12
   b91bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b91c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b91c2:	f7ff ffe5 	bl	b9190 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b91c6:	b003      	add	sp, #12
   b91c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b91cc:	2300      	movs	r3, #0
   b91ce:	9300      	str	r3, [sp, #0]
   b91d0:	461a      	mov	r2, r3
   b91d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b91d6:	f7ff fc03 	bl	b89e0 <system_ctrl_set_result>
}
   b91da:	e7f4      	b.n	b91c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b91dc:	2003e6f4 	.word	0x2003e6f4

000b91e0 <module_user_init_hook>:
{
   b91e0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b91e2:	4812      	ldr	r0, [pc, #72]	; (b922c <module_user_init_hook+0x4c>)
   b91e4:	2100      	movs	r1, #0
   b91e6:	f7ff fcad 	bl	b8b44 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b91ea:	4b11      	ldr	r3, [pc, #68]	; (b9230 <module_user_init_hook+0x50>)
   b91ec:	681a      	ldr	r2, [r3, #0]
   b91ee:	4b11      	ldr	r3, [pc, #68]	; (b9234 <module_user_init_hook+0x54>)
   b91f0:	429a      	cmp	r2, r3
   b91f2:	4b11      	ldr	r3, [pc, #68]	; (b9238 <module_user_init_hook+0x58>)
   b91f4:	bf0c      	ite	eq
   b91f6:	2201      	moveq	r2, #1
   b91f8:	2200      	movne	r2, #0
   b91fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b91fc:	d001      	beq.n	b9202 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b91fe:	f7ff ffb1 	bl	b9164 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9202:	f7ff fa6b 	bl	b86dc <HAL_RNG_GetRandomNumber>
   b9206:	4604      	mov	r4, r0
    srand(seed);
   b9208:	f000 fe10 	bl	b9e2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b920c:	4b0b      	ldr	r3, [pc, #44]	; (b923c <module_user_init_hook+0x5c>)
   b920e:	b113      	cbz	r3, b9216 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9210:	4620      	mov	r0, r4
   b9212:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9216:	2100      	movs	r1, #0
   b9218:	4808      	ldr	r0, [pc, #32]	; (b923c <module_user_init_hook+0x5c>)
   b921a:	f7ff fc4b 	bl	b8ab4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b921e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9222:	4807      	ldr	r0, [pc, #28]	; (b9240 <module_user_init_hook+0x60>)
   b9224:	2100      	movs	r1, #0
   b9226:	f7ff bbd1 	b.w	b89cc <system_ctrl_set_app_request_handler>
   b922a:	bf00      	nop
   b922c:	000b910d 	.word	0x000b910d
   b9230:	2003f400 	.word	0x2003f400
   b9234:	9a271c1e 	.word	0x9a271c1e
   b9238:	2003e6f0 	.word	0x2003e6f0
   b923c:	00000000 	.word	0x00000000
   b9240:	000b91a9 	.word	0x000b91a9

000b9244 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b9244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b9246:	230c      	movs	r3, #12
   b9248:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b924c:	6803      	ldr	r3, [r0, #0]
   b924e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b9252:	7a03      	ldrb	r3, [r0, #8]
   b9254:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b9258:	6843      	ldr	r3, [r0, #4]
   b925a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b925c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b925e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b9260:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9264:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b9266:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b926a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b926e:	f7ff fc29 	bl	b8ac4 <spark_cloud_disconnect>
}
   b9272:	b005      	add	sp, #20
   b9274:	f85d fb04 	ldr.w	pc, [sp], #4

000b9278 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9278:	4770      	bx	lr

000b927a <_ZN9IPAddressD0Ev>:
   b927a:	b510      	push	{r4, lr}
   b927c:	2118      	movs	r1, #24
   b927e:	4604      	mov	r4, r0
   b9280:	f7fa ff09 	bl	b4096 <_ZdlPvj>
   b9284:	4620      	mov	r0, r4
   b9286:	bd10      	pop	{r4, pc}

000b9288 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9288:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b928a:	7d03      	ldrb	r3, [r0, #20]
   b928c:	2b06      	cmp	r3, #6
{
   b928e:	b08d      	sub	sp, #52	; 0x34
   b9290:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9292:	f100 0704 	add.w	r7, r0, #4
   b9296:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b929a:	d012      	beq.n	b92c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b929c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b92a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b92a4:	220a      	movs	r2, #10
   b92a6:	4630      	mov	r0, r6
   b92a8:	f7ff fec5 	bl	b9036 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b92ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b92ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b92b0:	d019      	beq.n	b92e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b92b2:	2c00      	cmp	r4, #0
   b92b4:	d0f4      	beq.n	b92a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b92b6:	212e      	movs	r1, #46	; 0x2e
   b92b8:	4630      	mov	r0, r6
   b92ba:	f7ff fea3 	bl	b9004 <_ZN5Print5printEc>
   b92be:	4404      	add	r4, r0
   b92c0:	e7ee      	b.n	b92a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b92c2:	232f      	movs	r3, #47	; 0x2f
   b92c4:	466a      	mov	r2, sp
   b92c6:	4639      	mov	r1, r7
   b92c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b92ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b92ce:	f7ff fa3d 	bl	b874c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b92d2:	4668      	mov	r0, sp
   b92d4:	f000 fde0 	bl	b9e98 <strlen>
   b92d8:	6833      	ldr	r3, [r6, #0]
   b92da:	4602      	mov	r2, r0
   b92dc:	68db      	ldr	r3, [r3, #12]
   b92de:	4669      	mov	r1, sp
   b92e0:	4630      	mov	r0, r6
   b92e2:	4798      	blx	r3
   b92e4:	4604      	mov	r4, r0
    }
    return n;
}
   b92e6:	4620      	mov	r0, r4
   b92e8:	b00d      	add	sp, #52	; 0x34
   b92ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b92ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b92ec:	b510      	push	{r4, lr}
   b92ee:	4b05      	ldr	r3, [pc, #20]	; (b9304 <_ZN9IPAddressC1Ev+0x18>)
   b92f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b92f2:	2211      	movs	r2, #17
   b92f4:	f840 3b04 	str.w	r3, [r0], #4
   b92f8:	2100      	movs	r1, #0
   b92fa:	f000 fd7f 	bl	b9dfc <memset>
}
   b92fe:	4620      	mov	r0, r4
   b9300:	bd10      	pop	{r4, pc}
   b9302:	bf00      	nop
   b9304:	000bbc64 	.word	0x000bbc64

000b9308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9308:	4603      	mov	r3, r0
   b930a:	4a07      	ldr	r2, [pc, #28]	; (b9328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b930c:	b510      	push	{r4, lr}
   b930e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9312:	f101 0210 	add.w	r2, r1, #16
   b9316:	f851 4b04 	ldr.w	r4, [r1], #4
   b931a:	f843 4b04 	str.w	r4, [r3], #4
   b931e:	4291      	cmp	r1, r2
   b9320:	d1f9      	bne.n	b9316 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9322:	780a      	ldrb	r2, [r1, #0]
   b9324:	701a      	strb	r2, [r3, #0]
}
   b9326:	bd10      	pop	{r4, pc}
   b9328:	000bbc64 	.word	0x000bbc64

000b932c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b932c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b932e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9332:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9336:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b933a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b933e:	2304      	movs	r3, #4
   b9340:	6041      	str	r1, [r0, #4]
   b9342:	7503      	strb	r3, [r0, #20]
}
   b9344:	bd10      	pop	{r4, pc}
	...

000b9348 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9348:	b507      	push	{r0, r1, r2, lr}
   b934a:	4b06      	ldr	r3, [pc, #24]	; (b9364 <_ZN9IPAddressC1EPKh+0x1c>)
   b934c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b934e:	78cb      	ldrb	r3, [r1, #3]
   b9350:	9300      	str	r3, [sp, #0]
   b9352:	788b      	ldrb	r3, [r1, #2]
   b9354:	784a      	ldrb	r2, [r1, #1]
   b9356:	7809      	ldrb	r1, [r1, #0]
   b9358:	f7ff ffe8 	bl	b932c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b935c:	b003      	add	sp, #12
   b935e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9362:	bf00      	nop
   b9364:	000bbc64 	.word	0x000bbc64

000b9368 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9368:	7441      	strb	r1, [r0, #17]
}
   b936a:	4770      	bx	lr

000b936c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b936c:	4770      	bx	lr

000b936e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b936e:	4770      	bx	lr

000b9370 <_ZN9USBSerial4readEv>:
{
   b9370:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9372:	2100      	movs	r1, #0
   b9374:	7c00      	ldrb	r0, [r0, #16]
   b9376:	f7ff faf9 	bl	b896c <HAL_USB_USART_Receive_Data>
}
   b937a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b937e:	bd08      	pop	{r3, pc}

000b9380 <_ZN9USBSerial4peekEv>:
{
   b9380:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9382:	2101      	movs	r1, #1
   b9384:	7c00      	ldrb	r0, [r0, #16]
   b9386:	f7ff faf1 	bl	b896c <HAL_USB_USART_Receive_Data>
}
   b938a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b938e:	bd08      	pop	{r3, pc}

000b9390 <_ZN9USBSerial17availableForWriteEv>:
{
   b9390:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9392:	7c00      	ldrb	r0, [r0, #16]
   b9394:	f7ff fae2 	bl	b895c <HAL_USB_USART_Available_Data_For_Write>
}
   b9398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b939c:	bd08      	pop	{r3, pc}

000b939e <_ZN9USBSerial9availableEv>:
{
   b939e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b93a0:	7c00      	ldrb	r0, [r0, #16]
   b93a2:	f7ff fad3 	bl	b894c <HAL_USB_USART_Available_Data>
}
   b93a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93aa:	bd08      	pop	{r3, pc}

000b93ac <_ZN9USBSerial5writeEh>:
{
   b93ac:	b513      	push	{r0, r1, r4, lr}
   b93ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b93b0:	7c00      	ldrb	r0, [r0, #16]
{
   b93b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b93b4:	f7ff fad2 	bl	b895c <HAL_USB_USART_Available_Data_For_Write>
   b93b8:	2800      	cmp	r0, #0
   b93ba:	9901      	ldr	r1, [sp, #4]
   b93bc:	dc01      	bgt.n	b93c2 <_ZN9USBSerial5writeEh+0x16>
   b93be:	7c60      	ldrb	r0, [r4, #17]
   b93c0:	b120      	cbz	r0, b93cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b93c2:	7c20      	ldrb	r0, [r4, #16]
   b93c4:	f7ff fada 	bl	b897c <HAL_USB_USART_Send_Data>
   b93c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b93cc:	b002      	add	sp, #8
   b93ce:	bd10      	pop	{r4, pc}

000b93d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b93d0:	7c00      	ldrb	r0, [r0, #16]
   b93d2:	f7ff badb 	b.w	b898c <HAL_USB_USART_Flush_Data>

000b93d6 <_ZN9USBSerialD0Ev>:
   b93d6:	b510      	push	{r4, lr}
   b93d8:	2114      	movs	r1, #20
   b93da:	4604      	mov	r4, r0
   b93dc:	f7fa fe5b 	bl	b4096 <_ZdlPvj>
   b93e0:	4620      	mov	r0, r4
   b93e2:	bd10      	pop	{r4, pc}

000b93e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b93e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b93e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b93ea:	4604      	mov	r4, r0
   b93ec:	4608      	mov	r0, r1
   b93ee:	2100      	movs	r1, #0
   b93f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b93f4:	4b04      	ldr	r3, [pc, #16]	; (b9408 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b93f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b93f8:	2301      	movs	r3, #1
  _serial = serial;
   b93fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b93fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b93fe:	4611      	mov	r1, r2
   b9400:	f7ff fa94 	bl	b892c <HAL_USB_USART_Init>
}
   b9404:	4620      	mov	r0, r4
   b9406:	bd10      	pop	{r4, pc}
   b9408:	000bbc78 	.word	0x000bbc78

000b940c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b940c:	7c00      	ldrb	r0, [r0, #16]
   b940e:	2200      	movs	r2, #0
   b9410:	f7ff ba94 	b.w	b893c <HAL_USB_USART_Begin>

000b9414 <_Z19acquireSerialBufferv>:
{
   b9414:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9416:	2214      	movs	r2, #20
{
   b9418:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b941a:	2100      	movs	r1, #0
   b941c:	f000 fcee 	bl	b9dfc <memset>
}
   b9420:	4620      	mov	r0, r4
   b9422:	bd10      	pop	{r4, pc}

000b9424 <_Z16_fetch_usbserialv>:
{
   b9424:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9426:	4c0f      	ldr	r4, [pc, #60]	; (b9464 <_Z16_fetch_usbserialv+0x40>)
{
   b9428:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b942a:	a803      	add	r0, sp, #12
   b942c:	f7ff fff2 	bl	b9414 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9430:	7821      	ldrb	r1, [r4, #0]
   b9432:	f3bf 8f5b 	dmb	ish
   b9436:	f011 0101 	ands.w	r1, r1, #1
   b943a:	d10f      	bne.n	b945c <_Z16_fetch_usbserialv+0x38>
   b943c:	4620      	mov	r0, r4
   b943e:	9101      	str	r1, [sp, #4]
   b9440:	f7fa fe38 	bl	b40b4 <__cxa_guard_acquire>
   b9444:	9901      	ldr	r1, [sp, #4]
   b9446:	b148      	cbz	r0, b945c <_Z16_fetch_usbserialv+0x38>
   b9448:	aa03      	add	r2, sp, #12
   b944a:	4807      	ldr	r0, [pc, #28]	; (b9468 <_Z16_fetch_usbserialv+0x44>)
   b944c:	f7ff ffca 	bl	b93e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9450:	4620      	mov	r0, r4
   b9452:	f7fa fe34 	bl	b40be <__cxa_guard_release>
   b9456:	4805      	ldr	r0, [pc, #20]	; (b946c <_Z16_fetch_usbserialv+0x48>)
   b9458:	f000 fcb4 	bl	b9dc4 <atexit>
	return _usbserial;
}
   b945c:	4802      	ldr	r0, [pc, #8]	; (b9468 <_Z16_fetch_usbserialv+0x44>)
   b945e:	b008      	add	sp, #32
   b9460:	bd10      	pop	{r4, pc}
   b9462:	bf00      	nop
   b9464:	2003e6f8 	.word	0x2003e6f8
   b9468:	2003e6fc 	.word	0x2003e6fc
   b946c:	000b936d 	.word	0x000b936d

000b9470 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b9470:	f7ff b91c 	b.w	b86ac <HAL_Interrupts_Disable_All>

000b9474 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b9474:	f7ff b912 	b.w	b869c <HAL_Interrupts_Enable_All>

000b9478 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b9478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b947a:	b287      	uxth	r7, r0
{
   b947c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b947e:	4638      	mov	r0, r7
{
   b9480:	460d      	mov	r5, r1
   b9482:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9484:	f000 f9ba 	bl	b97fc <pinAvailable>
   b9488:	b160      	cbz	r0, b94a4 <tone+0x2c>
   b948a:	2102      	movs	r1, #2
   b948c:	4638      	mov	r0, r7
   b948e:	f7ff f8dd 	bl	b864c <HAL_Validate_Pin_Function>
   b9492:	2802      	cmp	r0, #2
   b9494:	d106      	bne.n	b94a4 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b9496:	4632      	mov	r2, r6
   b9498:	4629      	mov	r1, r5
   b949a:	4620      	mov	r0, r4
    }
}
   b949c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b94a0:	f7ff ba34 	b.w	b890c <HAL_Tone_Start>
}
   b94a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b94a6 <noTone>:

void noTone(uint8_t pin)
{
   b94a6:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b94a8:	b285      	uxth	r5, r0
{
   b94aa:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b94ac:	4628      	mov	r0, r5
   b94ae:	f000 f9a5 	bl	b97fc <pinAvailable>
   b94b2:	b150      	cbz	r0, b94ca <noTone+0x24>
   b94b4:	2102      	movs	r1, #2
   b94b6:	4628      	mov	r0, r5
   b94b8:	f7ff f8c8 	bl	b864c <HAL_Validate_Pin_Function>
   b94bc:	2802      	cmp	r0, #2
   b94be:	d104      	bne.n	b94ca <noTone+0x24>
        HAL_Tone_Stop(pin);
   b94c0:	4620      	mov	r0, r4
    }
}
   b94c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   b94c6:	f7ff ba29 	b.w	b891c <HAL_Tone_Stop>
}
   b94ca:	bd38      	pop	{r3, r4, r5, pc}

000b94cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b94cc:	4770      	bx	lr

000b94ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b94ce:	7441      	strb	r1, [r0, #17]
}
   b94d0:	4770      	bx	lr

000b94d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b94d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b94d4:	7c00      	ldrb	r0, [r0, #16]
   b94d6:	f7ff f971 	bl	b87bc <hal_usart_available_data_for_write>
}
   b94da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94de:	bd08      	pop	{r3, pc}

000b94e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b94e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b94e2:	7c00      	ldrb	r0, [r0, #16]
   b94e4:	f7ff f942 	bl	b876c <hal_usart_available>
}
   b94e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94ec:	bd08      	pop	{r3, pc}

000b94ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b94ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b94f0:	7c00      	ldrb	r0, [r0, #16]
   b94f2:	f7ff f94b 	bl	b878c <hal_usart_peek>
}
   b94f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94fa:	bd08      	pop	{r3, pc}

000b94fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b94fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b94fe:	7c00      	ldrb	r0, [r0, #16]
   b9500:	f7ff f93c 	bl	b877c <hal_usart_read>
}
   b9504:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9508:	bd08      	pop	{r3, pc}

000b950a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b950a:	7c00      	ldrb	r0, [r0, #16]
   b950c:	f7ff b946 	b.w	b879c <hal_usart_flush>

000b9510 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9510:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9512:	7c45      	ldrb	r5, [r0, #17]
{
   b9514:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9516:	b12d      	cbz	r5, b9524 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9518:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b951a:	b003      	add	sp, #12
   b951c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9520:	f7ff b91c 	b.w	b875c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9524:	7c00      	ldrb	r0, [r0, #16]
   b9526:	9101      	str	r1, [sp, #4]
   b9528:	f7ff f948 	bl	b87bc <hal_usart_available_data_for_write>
   b952c:	2800      	cmp	r0, #0
   b952e:	9901      	ldr	r1, [sp, #4]
   b9530:	dcf2      	bgt.n	b9518 <_ZN11USARTSerial5writeEh+0x8>
}
   b9532:	4628      	mov	r0, r5
   b9534:	b003      	add	sp, #12
   b9536:	bd30      	pop	{r4, r5, pc}

000b9538 <_ZN11USARTSerialD0Ev>:
   b9538:	b510      	push	{r4, lr}
   b953a:	2114      	movs	r1, #20
   b953c:	4604      	mov	r4, r0
   b953e:	f7fa fdaa 	bl	b4096 <_ZdlPvj>
   b9542:	4620      	mov	r0, r4
   b9544:	bd10      	pop	{r4, pc}
	...

000b9548 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9548:	b510      	push	{r4, lr}
   b954a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b954e:	4604      	mov	r4, r0
   b9550:	4608      	mov	r0, r1
   b9552:	4611      	mov	r1, r2
   b9554:	2200      	movs	r2, #0
   b9556:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b955a:	4b04      	ldr	r3, [pc, #16]	; (b956c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b955c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b955e:	2301      	movs	r3, #1
  _serial = serial;
   b9560:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9562:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9564:	f7ff f932 	bl	b87cc <hal_usart_init_ex>
}
   b9568:	4620      	mov	r0, r4
   b956a:	bd10      	pop	{r4, pc}
   b956c:	000bbca8 	.word	0x000bbca8

000b9570 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9570:	4770      	bx	lr

000b9572 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9574:	4606      	mov	r6, r0
   b9576:	4615      	mov	r5, r2
   b9578:	460c      	mov	r4, r1
   b957a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b957c:	42bc      	cmp	r4, r7
   b957e:	d006      	beq.n	b958e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9580:	6833      	ldr	r3, [r6, #0]
   b9582:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9586:	689b      	ldr	r3, [r3, #8]
   b9588:	4630      	mov	r0, r6
   b958a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b958c:	e7f6      	b.n	b957c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b958e:	4628      	mov	r0, r5
   b9590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9592 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9592:	7c00      	ldrb	r0, [r0, #16]
   b9594:	2200      	movs	r2, #0
   b9596:	f7ff b941 	b.w	b881c <hal_i2c_write>

000b959a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b959a:	7c00      	ldrb	r0, [r0, #16]
   b959c:	2100      	movs	r1, #0
   b959e:	f7ff b945 	b.w	b882c <hal_i2c_available>

000b95a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b95a2:	7c00      	ldrb	r0, [r0, #16]
   b95a4:	2100      	movs	r1, #0
   b95a6:	f7ff b949 	b.w	b883c <hal_i2c_read>

000b95aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b95aa:	7c00      	ldrb	r0, [r0, #16]
   b95ac:	2100      	movs	r1, #0
   b95ae:	f7ff b94d 	b.w	b884c <hal_i2c_peek>

000b95b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b95b2:	7c00      	ldrb	r0, [r0, #16]
   b95b4:	2100      	movs	r1, #0
   b95b6:	f7ff b951 	b.w	b885c <hal_i2c_flush>

000b95ba <_ZN7TwoWireD0Ev>:
   b95ba:	b510      	push	{r4, lr}
   b95bc:	2114      	movs	r1, #20
   b95be:	4604      	mov	r4, r0
   b95c0:	f7fa fd69 	bl	b4096 <_ZdlPvj>
   b95c4:	4620      	mov	r0, r4
   b95c6:	bd10      	pop	{r4, pc}

000b95c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b95c8:	b510      	push	{r4, lr}
   b95ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95ce:	4604      	mov	r4, r0
   b95d0:	4608      	mov	r0, r1
   b95d2:	2100      	movs	r1, #0
   b95d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b95d8:	4b03      	ldr	r3, [pc, #12]	; (b95e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b95da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b95dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b95de:	4611      	mov	r1, r2
   b95e0:	f7ff f94c 	bl	b887c <hal_i2c_init>
}
   b95e4:	4620      	mov	r0, r4
   b95e6:	bd10      	pop	{r4, pc}
   b95e8:	000bbcd8 	.word	0x000bbcd8

000b95ec <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b95ec:	7c00      	ldrb	r0, [r0, #16]
   b95ee:	2200      	movs	r2, #0
   b95f0:	f7ff b8f4 	b.w	b87dc <hal_i2c_set_speed>

000b95f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b95f4:	2300      	movs	r3, #0
   b95f6:	7c00      	ldrb	r0, [r0, #16]
   b95f8:	461a      	mov	r2, r3
   b95fa:	4619      	mov	r1, r3
   b95fc:	f7ff b8f6 	b.w	b87ec <hal_i2c_begin>

000b9600 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9600:	7c00      	ldrb	r0, [r0, #16]
   b9602:	2200      	movs	r2, #0
   b9604:	f7ff b8fa 	b.w	b87fc <hal_i2c_begin_transmission>

000b9608 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9608:	b2c9      	uxtb	r1, r1
   b960a:	f7ff bff9 	b.w	b9600 <_ZN7TwoWire17beginTransmissionEh>

000b960e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b960e:	7c00      	ldrb	r0, [r0, #16]
   b9610:	2200      	movs	r2, #0
   b9612:	f7ff b8fb 	b.w	b880c <hal_i2c_end_transmission>

000b9616 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9616:	2101      	movs	r1, #1
   b9618:	f7ff bff9 	b.w	b960e <_ZN7TwoWire15endTransmissionEh>

000b961c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b961c:	2200      	movs	r2, #0
   b961e:	6840      	ldr	r0, [r0, #4]
   b9620:	4611      	mov	r1, r2
   b9622:	f7ff b9ff 	b.w	b8a24 <network_ready>

000b9626 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9626:	2200      	movs	r2, #0
   b9628:	6840      	ldr	r0, [r0, #4]
   b962a:	4611      	mov	r1, r2
   b962c:	f7ff ba1a 	b.w	b8a64 <network_listening>

000b9630 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9630:	2200      	movs	r2, #0
   b9632:	6840      	ldr	r0, [r0, #4]
   b9634:	4611      	mov	r1, r2
   b9636:	f7ff ba25 	b.w	b8a84 <network_get_listen_timeout>

000b963a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b963a:	6840      	ldr	r0, [r0, #4]
   b963c:	2200      	movs	r2, #0
   b963e:	f7ff ba19 	b.w	b8a74 <network_set_listen_timeout>

000b9642 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9642:	6840      	ldr	r0, [r0, #4]
   b9644:	2200      	movs	r2, #0
   b9646:	f081 0101 	eor.w	r1, r1, #1
   b964a:	f7ff ba03 	b.w	b8a54 <network_listen>

000b964e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b964e:	2300      	movs	r3, #0
   b9650:	6840      	ldr	r0, [r0, #4]
   b9652:	461a      	mov	r2, r3
   b9654:	4619      	mov	r1, r3
   b9656:	f7ff b9f5 	b.w	b8a44 <network_off>

000b965a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b965a:	2300      	movs	r3, #0
   b965c:	6840      	ldr	r0, [r0, #4]
   b965e:	461a      	mov	r2, r3
   b9660:	4619      	mov	r1, r3
   b9662:	f7ff b9e7 	b.w	b8a34 <network_on>

000b9666 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9666:	2200      	movs	r2, #0
   b9668:	6840      	ldr	r0, [r0, #4]
   b966a:	4611      	mov	r1, r2
   b966c:	f7ff b9ca 	b.w	b8a04 <network_connecting>

000b9670 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9670:	6840      	ldr	r0, [r0, #4]
   b9672:	2200      	movs	r2, #0
   b9674:	2102      	movs	r1, #2
   b9676:	f7ff b9cd 	b.w	b8a14 <network_disconnect>

000b967a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b967a:	2300      	movs	r3, #0
   b967c:	6840      	ldr	r0, [r0, #4]
   b967e:	461a      	mov	r2, r3
   b9680:	f7ff b9b8 	b.w	b89f4 <network_connect>

000b9684 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9684:	4b02      	ldr	r3, [pc, #8]	; (b9690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9686:	2204      	movs	r2, #4
   b9688:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b968a:	4a02      	ldr	r2, [pc, #8]	; (b9694 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b968c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b968e:	4770      	bx	lr
   b9690:	2003e710 	.word	0x2003e710
   b9694:	000bbd00 	.word	0x000bbd00

000b9698 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9698:	2300      	movs	r3, #0
   b969a:	6840      	ldr	r0, [r0, #4]
   b969c:	461a      	mov	r2, r3
   b969e:	f7ff b9a9 	b.w	b89f4 <network_connect>

000b96a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b96a2:	6840      	ldr	r0, [r0, #4]
   b96a4:	2200      	movs	r2, #0
   b96a6:	2102      	movs	r1, #2
   b96a8:	f7ff b9b4 	b.w	b8a14 <network_disconnect>

000b96ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b96ac:	2200      	movs	r2, #0
   b96ae:	6840      	ldr	r0, [r0, #4]
   b96b0:	4611      	mov	r1, r2
   b96b2:	f7ff b9a7 	b.w	b8a04 <network_connecting>

000b96b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b96b6:	2200      	movs	r2, #0
   b96b8:	6840      	ldr	r0, [r0, #4]
   b96ba:	4611      	mov	r1, r2
   b96bc:	f7ff b9b2 	b.w	b8a24 <network_ready>

000b96c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b96c0:	2300      	movs	r3, #0
   b96c2:	6840      	ldr	r0, [r0, #4]
   b96c4:	461a      	mov	r2, r3
   b96c6:	4619      	mov	r1, r3
   b96c8:	f7ff b9b4 	b.w	b8a34 <network_on>

000b96cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b96cc:	2300      	movs	r3, #0
   b96ce:	6840      	ldr	r0, [r0, #4]
   b96d0:	461a      	mov	r2, r3
   b96d2:	4619      	mov	r1, r3
   b96d4:	f7ff b9b6 	b.w	b8a44 <network_off>

000b96d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b96d8:	6840      	ldr	r0, [r0, #4]
   b96da:	2100      	movs	r1, #0
   b96dc:	f7ff b9da 	b.w	b8a94 <network_is_on>

000b96e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b96e0:	6840      	ldr	r0, [r0, #4]
   b96e2:	2100      	movs	r1, #0
   b96e4:	f7ff b9de 	b.w	b8aa4 <network_is_off>

000b96e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b96e8:	6840      	ldr	r0, [r0, #4]
   b96ea:	2200      	movs	r2, #0
   b96ec:	f081 0101 	eor.w	r1, r1, #1
   b96f0:	f7ff b9b0 	b.w	b8a54 <network_listen>

000b96f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b96f4:	6840      	ldr	r0, [r0, #4]
   b96f6:	2200      	movs	r2, #0
   b96f8:	f7ff b9bc 	b.w	b8a74 <network_set_listen_timeout>

000b96fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b96fc:	2200      	movs	r2, #0
   b96fe:	6840      	ldr	r0, [r0, #4]
   b9700:	4611      	mov	r1, r2
   b9702:	f7ff b9bf 	b.w	b8a84 <network_get_listen_timeout>

000b9706 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9706:	2200      	movs	r2, #0
   b9708:	6840      	ldr	r0, [r0, #4]
   b970a:	4611      	mov	r1, r2
   b970c:	f7ff b9aa 	b.w	b8a64 <network_listening>

000b9710 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9714:	b095      	sub	sp, #84	; 0x54
   b9716:	4614      	mov	r4, r2
   b9718:	460d      	mov	r5, r1
   b971a:	4607      	mov	r7, r0
    IPAddress addr;
   b971c:	f7ff fde6 	bl	b92ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9720:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9722:	221c      	movs	r2, #28
   b9724:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9726:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9728:	f000 fb68 	bl	b9dfc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b972c:	2340      	movs	r3, #64	; 0x40
   b972e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9730:	4620      	mov	r0, r4
   b9732:	466b      	mov	r3, sp
   b9734:	aa0c      	add	r2, sp, #48	; 0x30
   b9736:	2100      	movs	r1, #0
   b9738:	f7fe ff80 	bl	b863c <netdb_getaddrinfo>
    if (!r) {
   b973c:	4604      	mov	r4, r0
   b973e:	2800      	cmp	r0, #0
   b9740:	d14b      	bne.n	b97da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9742:	4602      	mov	r2, r0
   b9744:	2101      	movs	r1, #1
   b9746:	6868      	ldr	r0, [r5, #4]
   b9748:	f7ff f96c 	bl	b8a24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b974c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b974e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9750:	4622      	mov	r2, r4
   b9752:	6868      	ldr	r0, [r5, #4]
   b9754:	f7ff f966 	bl	b8a24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9758:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b975a:	4681      	mov	r9, r0
        bool ok = false;
   b975c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b975e:	2e00      	cmp	r6, #0
   b9760:	d03b      	beq.n	b97da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9762:	2900      	cmp	r1, #0
   b9764:	d139      	bne.n	b97da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9766:	6873      	ldr	r3, [r6, #4]
   b9768:	2b02      	cmp	r3, #2
   b976a:	d003      	beq.n	b9774 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b976c:	2b0a      	cmp	r3, #10
   b976e:	d011      	beq.n	b9794 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9770:	69f6      	ldr	r6, [r6, #28]
   b9772:	e7f4      	b.n	b975e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9774:	f1b8 0f00 	cmp.w	r8, #0
   b9778:	d0fa      	beq.n	b9770 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b977a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b977c:	a806      	add	r0, sp, #24
   b977e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9780:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9782:	f7ff fde1 	bl	b9348 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9788:	1d3c      	adds	r4, r7, #4
   b978a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b978c:	682b      	ldr	r3, [r5, #0]
   b978e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9790:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9792:	e7ed      	b.n	b9770 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9794:	f1b9 0f00 	cmp.w	r9, #0
   b9798:	d0ea      	beq.n	b9770 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b979a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b979c:	2210      	movs	r2, #16
   b979e:	a801      	add	r0, sp, #4
   b97a0:	f000 fb2c 	bl	b9dfc <memset>
                    a.v = 6;
   b97a4:	2306      	movs	r3, #6
   b97a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b97aa:	ad01      	add	r5, sp, #4
   b97ac:	f104 0308 	add.w	r3, r4, #8
   b97b0:	3418      	adds	r4, #24
   b97b2:	6818      	ldr	r0, [r3, #0]
   b97b4:	6859      	ldr	r1, [r3, #4]
   b97b6:	462a      	mov	r2, r5
   b97b8:	c203      	stmia	r2!, {r0, r1}
   b97ba:	3308      	adds	r3, #8
   b97bc:	42a3      	cmp	r3, r4
   b97be:	4615      	mov	r5, r2
   b97c0:	d1f7      	bne.n	b97b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b97c2:	a901      	add	r1, sp, #4
   b97c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b97c6:	ad07      	add	r5, sp, #28
   b97c8:	f7ff fd9e 	bl	b9308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b97cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97ce:	1d3c      	adds	r4, r7, #4
   b97d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97d2:	682b      	ldr	r3, [r5, #0]
   b97d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b97d6:	4649      	mov	r1, r9
   b97d8:	e7ca      	b.n	b9770 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b97da:	9800      	ldr	r0, [sp, #0]
   b97dc:	f7fe ff26 	bl	b862c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b97e0:	4638      	mov	r0, r7
   b97e2:	b015      	add	sp, #84	; 0x54
   b97e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b97e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b97e8:	4b02      	ldr	r3, [pc, #8]	; (b97f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b97ea:	4a03      	ldr	r2, [pc, #12]	; (b97f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b97ec:	601a      	str	r2, [r3, #0]
   b97ee:	2200      	movs	r2, #0
   b97f0:	605a      	str	r2, [r3, #4]

} // spark
   b97f2:	4770      	bx	lr
   b97f4:	2003e718 	.word	0x2003e718
   b97f8:	000bbd3c 	.word	0x000bbd3c

000b97fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b97fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b97fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9800:	d902      	bls.n	b9808 <pinAvailable+0xc>
    return false;
   b9802:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9804:	b002      	add	sp, #8
   b9806:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9808:	f1a0 030b 	sub.w	r3, r0, #11
   b980c:	2b02      	cmp	r3, #2
   b980e:	d81a      	bhi.n	b9846 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9810:	4c17      	ldr	r4, [pc, #92]	; (b9870 <pinAvailable+0x74>)
   b9812:	7821      	ldrb	r1, [r4, #0]
   b9814:	f3bf 8f5b 	dmb	ish
   b9818:	f011 0101 	ands.w	r1, r1, #1
   b981c:	d10b      	bne.n	b9836 <pinAvailable+0x3a>
   b981e:	4620      	mov	r0, r4
   b9820:	9101      	str	r1, [sp, #4]
   b9822:	f7fa fc47 	bl	b40b4 <__cxa_guard_acquire>
   b9826:	9901      	ldr	r1, [sp, #4]
   b9828:	b128      	cbz	r0, b9836 <pinAvailable+0x3a>
   b982a:	4812      	ldr	r0, [pc, #72]	; (b9874 <pinAvailable+0x78>)
   b982c:	f7ff f9d6 	bl	b8bdc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9830:	4620      	mov	r0, r4
   b9832:	f7fa fc44 	bl	b40be <__cxa_guard_release>
   b9836:	4b0f      	ldr	r3, [pc, #60]	; (b9874 <pinAvailable+0x78>)
   b9838:	7818      	ldrb	r0, [r3, #0]
   b983a:	f7ff f83f 	bl	b88bc <hal_spi_is_enabled>
   b983e:	2800      	cmp	r0, #0
   b9840:	d1df      	bne.n	b9802 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9842:	2001      	movs	r0, #1
   b9844:	e7de      	b.n	b9804 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9846:	2801      	cmp	r0, #1
   b9848:	d809      	bhi.n	b985e <pinAvailable+0x62>
   b984a:	f000 f8d9 	bl	b9a00 <_Z19__fetch_global_Wirev>
   b984e:	2100      	movs	r1, #0
   b9850:	7c00      	ldrb	r0, [r0, #16]
   b9852:	f7ff f80b 	bl	b886c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9856:	f080 0001 	eor.w	r0, r0, #1
   b985a:	b2c0      	uxtb	r0, r0
   b985c:	e7d2      	b.n	b9804 <pinAvailable+0x8>
   b985e:	3809      	subs	r0, #9
   b9860:	2801      	cmp	r0, #1
   b9862:	d8ee      	bhi.n	b9842 <pinAvailable+0x46>
   b9864:	f000 f87a 	bl	b995c <_Z22__fetch_global_Serial1v>
   b9868:	7c00      	ldrb	r0, [r0, #16]
   b986a:	f7fe ff9f 	bl	b87ac <hal_usart_is_enabled>
   b986e:	e7f2      	b.n	b9856 <pinAvailable+0x5a>
   b9870:	2003cf34 	.word	0x2003cf34
   b9874:	2003cf38 	.word	0x2003cf38

000b9878 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9878:	2823      	cmp	r0, #35	; 0x23
{
   b987a:	b538      	push	{r3, r4, r5, lr}
   b987c:	4604      	mov	r4, r0
   b987e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9880:	d80a      	bhi.n	b9898 <pinMode+0x20>
   b9882:	29ff      	cmp	r1, #255	; 0xff
   b9884:	d008      	beq.n	b9898 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9886:	f7ff ffb9 	bl	b97fc <pinAvailable>
   b988a:	b128      	cbz	r0, b9898 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b988c:	4629      	mov	r1, r5
   b988e:	4620      	mov	r0, r4
}
   b9890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9894:	f7fe bee2 	b.w	b865c <HAL_Pin_Mode>
}
   b9898:	bd38      	pop	{r3, r4, r5, pc}

000b989a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b989a:	b538      	push	{r3, r4, r5, lr}
   b989c:	4604      	mov	r4, r0
   b989e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b98a0:	f7fe fee4 	bl	b866c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b98a4:	28ff      	cmp	r0, #255	; 0xff
   b98a6:	d010      	beq.n	b98ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b98a8:	2806      	cmp	r0, #6
   b98aa:	d804      	bhi.n	b98b6 <digitalWrite+0x1c>
   b98ac:	234d      	movs	r3, #77	; 0x4d
   b98ae:	fa23 f000 	lsr.w	r0, r3, r0
   b98b2:	07c3      	lsls	r3, r0, #31
   b98b4:	d409      	bmi.n	b98ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b98b6:	4620      	mov	r0, r4
   b98b8:	f7ff ffa0 	bl	b97fc <pinAvailable>
   b98bc:	b128      	cbz	r0, b98ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b98be:	4629      	mov	r1, r5
   b98c0:	4620      	mov	r0, r4
}
   b98c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b98c6:	f7fe bed9 	b.w	b867c <HAL_GPIO_Write>
}
   b98ca:	bd38      	pop	{r3, r4, r5, pc}

000b98cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b98cc:	b510      	push	{r4, lr}
   b98ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b98d0:	f7fe fecc 	bl	b866c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b98d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b98d6:	b2db      	uxtb	r3, r3
   b98d8:	2b01      	cmp	r3, #1
   b98da:	d908      	bls.n	b98ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b98dc:	4620      	mov	r0, r4
   b98de:	f7ff ff8d 	bl	b97fc <pinAvailable>
   b98e2:	b120      	cbz	r0, b98ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b98e4:	4620      	mov	r0, r4
}
   b98e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b98ea:	f7fe becf 	b.w	b868c <HAL_GPIO_Read>
}
   b98ee:	2000      	movs	r0, #0
   b98f0:	bd10      	pop	{r4, pc}

000b98f2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b98f2:	280d      	cmp	r0, #13
{
   b98f4:	b510      	push	{r4, lr}
   b98f6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b98f8:	bf9c      	itt	ls
   b98fa:	340e      	addls	r4, #14
   b98fc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b98fe:	4620      	mov	r0, r4
   b9900:	f7ff ff7c 	bl	b97fc <pinAvailable>
   b9904:	b150      	cbz	r0, b991c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b9906:	2103      	movs	r1, #3
   b9908:	4620      	mov	r0, r4
   b990a:	f7fe fe9f 	bl	b864c <HAL_Validate_Pin_Function>
   b990e:	2803      	cmp	r0, #3
   b9910:	d104      	bne.n	b991c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b9912:	4620      	mov	r0, r4
}
   b9914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9918:	f7fe bed0 	b.w	b86bc <hal_adc_read>
}
   b991c:	2000      	movs	r0, #0
   b991e:	bd10      	pop	{r4, pc}

000b9920 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b9920:	f7fe bed4 	b.w	b86cc <HAL_Pulse_In>

000b9924 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9924:	4770      	bx	lr
	...

000b9928 <_Z20acquireSerial1Bufferv>:
{
   b9928:	b538      	push	{r3, r4, r5, lr}
   b992a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b992c:	2514      	movs	r5, #20
   b992e:	462a      	mov	r2, r5
   b9930:	2100      	movs	r1, #0
   b9932:	f000 fa63 	bl	b9dfc <memset>
   b9936:	8025      	strh	r5, [r4, #0]
   b9938:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b993a:	4907      	ldr	r1, [pc, #28]	; (b9958 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b993c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b993e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9940:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9942:	f000 f881 	bl	b9a48 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9946:	4904      	ldr	r1, [pc, #16]	; (b9958 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9948:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b994a:	4628      	mov	r0, r5
   b994c:	f000 f87c 	bl	b9a48 <_ZnajRKSt9nothrow_t>
    };
   b9950:	60e0      	str	r0, [r4, #12]
}
   b9952:	4620      	mov	r0, r4
   b9954:	bd38      	pop	{r3, r4, r5, pc}
   b9956:	bf00      	nop
   b9958:	000bbd70 	.word	0x000bbd70

000b995c <_Z22__fetch_global_Serial1v>:
{
   b995c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b995e:	4d0e      	ldr	r5, [pc, #56]	; (b9998 <_Z22__fetch_global_Serial1v+0x3c>)
   b9960:	7829      	ldrb	r1, [r5, #0]
   b9962:	f3bf 8f5b 	dmb	ish
   b9966:	f011 0401 	ands.w	r4, r1, #1
{
   b996a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b996c:	d111      	bne.n	b9992 <_Z22__fetch_global_Serial1v+0x36>
   b996e:	4628      	mov	r0, r5
   b9970:	f7fa fba0 	bl	b40b4 <__cxa_guard_acquire>
   b9974:	b168      	cbz	r0, b9992 <_Z22__fetch_global_Serial1v+0x36>
   b9976:	a801      	add	r0, sp, #4
   b9978:	f7ff ffd6 	bl	b9928 <_Z20acquireSerial1Bufferv>
   b997c:	aa01      	add	r2, sp, #4
   b997e:	4621      	mov	r1, r4
   b9980:	4806      	ldr	r0, [pc, #24]	; (b999c <_Z22__fetch_global_Serial1v+0x40>)
   b9982:	f7ff fde1 	bl	b9548 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9986:	4628      	mov	r0, r5
   b9988:	f7fa fb99 	bl	b40be <__cxa_guard_release>
   b998c:	4804      	ldr	r0, [pc, #16]	; (b99a0 <_Z22__fetch_global_Serial1v+0x44>)
   b998e:	f000 fa19 	bl	b9dc4 <atexit>
    return serial1;
}
   b9992:	4802      	ldr	r0, [pc, #8]	; (b999c <_Z22__fetch_global_Serial1v+0x40>)
   b9994:	b007      	add	sp, #28
   b9996:	bd30      	pop	{r4, r5, pc}
   b9998:	2003e720 	.word	0x2003e720
   b999c:	2003e724 	.word	0x2003e724
   b99a0:	000b9925 	.word	0x000b9925

000b99a4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b99a4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b99a6:	4c08      	ldr	r4, [pc, #32]	; (b99c8 <_Z21__fetch_global_EEPROMv+0x24>)
   b99a8:	7823      	ldrb	r3, [r4, #0]
   b99aa:	f3bf 8f5b 	dmb	ish
   b99ae:	07db      	lsls	r3, r3, #31
   b99b0:	d408      	bmi.n	b99c4 <_Z21__fetch_global_EEPROMv+0x20>
   b99b2:	4620      	mov	r0, r4
   b99b4:	f7fa fb7e 	bl	b40b4 <__cxa_guard_acquire>
   b99b8:	b120      	cbz	r0, b99c4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b99ba:	f7fe fea7 	bl	b870c <HAL_EEPROM_Init>
   b99be:	4620      	mov	r0, r4
   b99c0:	f7fa fb7d 	bl	b40be <__cxa_guard_release>
	return eeprom;
}
   b99c4:	4801      	ldr	r0, [pc, #4]	; (b99cc <_Z21__fetch_global_EEPROMv+0x28>)
   b99c6:	bd10      	pop	{r4, pc}
   b99c8:	2003e73c 	.word	0x2003e73c
   b99cc:	2003e740 	.word	0x2003e740

000b99d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b99d0:	4770      	bx	lr
	...

000b99d4 <_Z17acquireWireBufferv>:
{
   b99d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b99d6:	2520      	movs	r5, #32
   b99d8:	2314      	movs	r3, #20
{
   b99da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b99dc:	6003      	str	r3, [r0, #0]
   b99de:	6085      	str	r5, [r0, #8]
   b99e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b99e2:	4906      	ldr	r1, [pc, #24]	; (b99fc <_Z17acquireWireBufferv+0x28>)
   b99e4:	4628      	mov	r0, r5
   b99e6:	f000 f82f 	bl	b9a48 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b99ea:	4904      	ldr	r1, [pc, #16]	; (b99fc <_Z17acquireWireBufferv+0x28>)
	};
   b99ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b99ee:	4628      	mov	r0, r5
   b99f0:	f000 f82a 	bl	b9a48 <_ZnajRKSt9nothrow_t>
	};
   b99f4:	60e0      	str	r0, [r4, #12]
}
   b99f6:	4620      	mov	r0, r4
   b99f8:	bd38      	pop	{r3, r4, r5, pc}
   b99fa:	bf00      	nop
   b99fc:	000bbd70 	.word	0x000bbd70

000b9a00 <_Z19__fetch_global_Wirev>:
{
   b9a00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a02:	4d0e      	ldr	r5, [pc, #56]	; (b9a3c <_Z19__fetch_global_Wirev+0x3c>)
   b9a04:	7829      	ldrb	r1, [r5, #0]
   b9a06:	f3bf 8f5b 	dmb	ish
   b9a0a:	f011 0401 	ands.w	r4, r1, #1
{
   b9a0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9a10:	d111      	bne.n	b9a36 <_Z19__fetch_global_Wirev+0x36>
   b9a12:	4628      	mov	r0, r5
   b9a14:	f7fa fb4e 	bl	b40b4 <__cxa_guard_acquire>
   b9a18:	b168      	cbz	r0, b9a36 <_Z19__fetch_global_Wirev+0x36>
   b9a1a:	a801      	add	r0, sp, #4
   b9a1c:	f7ff ffda 	bl	b99d4 <_Z17acquireWireBufferv>
   b9a20:	aa01      	add	r2, sp, #4
   b9a22:	4621      	mov	r1, r4
   b9a24:	4806      	ldr	r0, [pc, #24]	; (b9a40 <_Z19__fetch_global_Wirev+0x40>)
   b9a26:	f7ff fdcf 	bl	b95c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9a2a:	4628      	mov	r0, r5
   b9a2c:	f7fa fb47 	bl	b40be <__cxa_guard_release>
   b9a30:	4804      	ldr	r0, [pc, #16]	; (b9a44 <_Z19__fetch_global_Wirev+0x44>)
   b9a32:	f000 f9c7 	bl	b9dc4 <atexit>
	return wire;
}
   b9a36:	4802      	ldr	r0, [pc, #8]	; (b9a40 <_Z19__fetch_global_Wirev+0x40>)
   b9a38:	b007      	add	sp, #28
   b9a3a:	bd30      	pop	{r4, r5, pc}
   b9a3c:	2003e744 	.word	0x2003e744
   b9a40:	2003e748 	.word	0x2003e748
   b9a44:	000b99d1 	.word	0x000b99d1

000b9a48 <_ZnajRKSt9nothrow_t>:
   b9a48:	f7fa bb23 	b.w	b4092 <_Znaj>

000b9a4c <__aeabi_drsub>:
   b9a4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9a50:	e002      	b.n	b9a58 <__adddf3>
   b9a52:	bf00      	nop

000b9a54 <__aeabi_dsub>:
   b9a54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9a58 <__adddf3>:
   b9a58:	b530      	push	{r4, r5, lr}
   b9a5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9a5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9a62:	ea94 0f05 	teq	r4, r5
   b9a66:	bf08      	it	eq
   b9a68:	ea90 0f02 	teqeq	r0, r2
   b9a6c:	bf1f      	itttt	ne
   b9a6e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9a72:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9a76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9a7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9a7e:	f000 80e2 	beq.w	b9c46 <__adddf3+0x1ee>
   b9a82:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9a86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9a8a:	bfb8      	it	lt
   b9a8c:	426d      	neglt	r5, r5
   b9a8e:	dd0c      	ble.n	b9aaa <__adddf3+0x52>
   b9a90:	442c      	add	r4, r5
   b9a92:	ea80 0202 	eor.w	r2, r0, r2
   b9a96:	ea81 0303 	eor.w	r3, r1, r3
   b9a9a:	ea82 0000 	eor.w	r0, r2, r0
   b9a9e:	ea83 0101 	eor.w	r1, r3, r1
   b9aa2:	ea80 0202 	eor.w	r2, r0, r2
   b9aa6:	ea81 0303 	eor.w	r3, r1, r3
   b9aaa:	2d36      	cmp	r5, #54	; 0x36
   b9aac:	bf88      	it	hi
   b9aae:	bd30      	pophi	{r4, r5, pc}
   b9ab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9ab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9ab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9abc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9ac0:	d002      	beq.n	b9ac8 <__adddf3+0x70>
   b9ac2:	4240      	negs	r0, r0
   b9ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9ac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9ad0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9ad4:	d002      	beq.n	b9adc <__adddf3+0x84>
   b9ad6:	4252      	negs	r2, r2
   b9ad8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9adc:	ea94 0f05 	teq	r4, r5
   b9ae0:	f000 80a7 	beq.w	b9c32 <__adddf3+0x1da>
   b9ae4:	f1a4 0401 	sub.w	r4, r4, #1
   b9ae8:	f1d5 0e20 	rsbs	lr, r5, #32
   b9aec:	db0d      	blt.n	b9b0a <__adddf3+0xb2>
   b9aee:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9af2:	fa22 f205 	lsr.w	r2, r2, r5
   b9af6:	1880      	adds	r0, r0, r2
   b9af8:	f141 0100 	adc.w	r1, r1, #0
   b9afc:	fa03 f20e 	lsl.w	r2, r3, lr
   b9b00:	1880      	adds	r0, r0, r2
   b9b02:	fa43 f305 	asr.w	r3, r3, r5
   b9b06:	4159      	adcs	r1, r3
   b9b08:	e00e      	b.n	b9b28 <__adddf3+0xd0>
   b9b0a:	f1a5 0520 	sub.w	r5, r5, #32
   b9b0e:	f10e 0e20 	add.w	lr, lr, #32
   b9b12:	2a01      	cmp	r2, #1
   b9b14:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9b18:	bf28      	it	cs
   b9b1a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9b1e:	fa43 f305 	asr.w	r3, r3, r5
   b9b22:	18c0      	adds	r0, r0, r3
   b9b24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9b2c:	d507      	bpl.n	b9b3e <__adddf3+0xe6>
   b9b2e:	f04f 0e00 	mov.w	lr, #0
   b9b32:	f1dc 0c00 	rsbs	ip, ip, #0
   b9b36:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9b3a:	eb6e 0101 	sbc.w	r1, lr, r1
   b9b3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9b42:	d31b      	bcc.n	b9b7c <__adddf3+0x124>
   b9b44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9b48:	d30c      	bcc.n	b9b64 <__adddf3+0x10c>
   b9b4a:	0849      	lsrs	r1, r1, #1
   b9b4c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9b50:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9b54:	f104 0401 	add.w	r4, r4, #1
   b9b58:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9b5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9b60:	f080 809a 	bcs.w	b9c98 <__adddf3+0x240>
   b9b64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9b68:	bf08      	it	eq
   b9b6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9b6e:	f150 0000 	adcs.w	r0, r0, #0
   b9b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9b76:	ea41 0105 	orr.w	r1, r1, r5
   b9b7a:	bd30      	pop	{r4, r5, pc}
   b9b7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9b80:	4140      	adcs	r0, r0
   b9b82:	eb41 0101 	adc.w	r1, r1, r1
   b9b86:	3c01      	subs	r4, #1
   b9b88:	bf28      	it	cs
   b9b8a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9b8e:	d2e9      	bcs.n	b9b64 <__adddf3+0x10c>
   b9b90:	f091 0f00 	teq	r1, #0
   b9b94:	bf04      	itt	eq
   b9b96:	4601      	moveq	r1, r0
   b9b98:	2000      	moveq	r0, #0
   b9b9a:	fab1 f381 	clz	r3, r1
   b9b9e:	bf08      	it	eq
   b9ba0:	3320      	addeq	r3, #32
   b9ba2:	f1a3 030b 	sub.w	r3, r3, #11
   b9ba6:	f1b3 0220 	subs.w	r2, r3, #32
   b9baa:	da0c      	bge.n	b9bc6 <__adddf3+0x16e>
   b9bac:	320c      	adds	r2, #12
   b9bae:	dd08      	ble.n	b9bc2 <__adddf3+0x16a>
   b9bb0:	f102 0c14 	add.w	ip, r2, #20
   b9bb4:	f1c2 020c 	rsb	r2, r2, #12
   b9bb8:	fa01 f00c 	lsl.w	r0, r1, ip
   b9bbc:	fa21 f102 	lsr.w	r1, r1, r2
   b9bc0:	e00c      	b.n	b9bdc <__adddf3+0x184>
   b9bc2:	f102 0214 	add.w	r2, r2, #20
   b9bc6:	bfd8      	it	le
   b9bc8:	f1c2 0c20 	rsble	ip, r2, #32
   b9bcc:	fa01 f102 	lsl.w	r1, r1, r2
   b9bd0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9bd4:	bfdc      	itt	le
   b9bd6:	ea41 010c 	orrle.w	r1, r1, ip
   b9bda:	4090      	lslle	r0, r2
   b9bdc:	1ae4      	subs	r4, r4, r3
   b9bde:	bfa2      	ittt	ge
   b9be0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9be4:	4329      	orrge	r1, r5
   b9be6:	bd30      	popge	{r4, r5, pc}
   b9be8:	ea6f 0404 	mvn.w	r4, r4
   b9bec:	3c1f      	subs	r4, #31
   b9bee:	da1c      	bge.n	b9c2a <__adddf3+0x1d2>
   b9bf0:	340c      	adds	r4, #12
   b9bf2:	dc0e      	bgt.n	b9c12 <__adddf3+0x1ba>
   b9bf4:	f104 0414 	add.w	r4, r4, #20
   b9bf8:	f1c4 0220 	rsb	r2, r4, #32
   b9bfc:	fa20 f004 	lsr.w	r0, r0, r4
   b9c00:	fa01 f302 	lsl.w	r3, r1, r2
   b9c04:	ea40 0003 	orr.w	r0, r0, r3
   b9c08:	fa21 f304 	lsr.w	r3, r1, r4
   b9c0c:	ea45 0103 	orr.w	r1, r5, r3
   b9c10:	bd30      	pop	{r4, r5, pc}
   b9c12:	f1c4 040c 	rsb	r4, r4, #12
   b9c16:	f1c4 0220 	rsb	r2, r4, #32
   b9c1a:	fa20 f002 	lsr.w	r0, r0, r2
   b9c1e:	fa01 f304 	lsl.w	r3, r1, r4
   b9c22:	ea40 0003 	orr.w	r0, r0, r3
   b9c26:	4629      	mov	r1, r5
   b9c28:	bd30      	pop	{r4, r5, pc}
   b9c2a:	fa21 f004 	lsr.w	r0, r1, r4
   b9c2e:	4629      	mov	r1, r5
   b9c30:	bd30      	pop	{r4, r5, pc}
   b9c32:	f094 0f00 	teq	r4, #0
   b9c36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9c3a:	bf06      	itte	eq
   b9c3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9c40:	3401      	addeq	r4, #1
   b9c42:	3d01      	subne	r5, #1
   b9c44:	e74e      	b.n	b9ae4 <__adddf3+0x8c>
   b9c46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9c4a:	bf18      	it	ne
   b9c4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9c50:	d029      	beq.n	b9ca6 <__adddf3+0x24e>
   b9c52:	ea94 0f05 	teq	r4, r5
   b9c56:	bf08      	it	eq
   b9c58:	ea90 0f02 	teqeq	r0, r2
   b9c5c:	d005      	beq.n	b9c6a <__adddf3+0x212>
   b9c5e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9c62:	bf04      	itt	eq
   b9c64:	4619      	moveq	r1, r3
   b9c66:	4610      	moveq	r0, r2
   b9c68:	bd30      	pop	{r4, r5, pc}
   b9c6a:	ea91 0f03 	teq	r1, r3
   b9c6e:	bf1e      	ittt	ne
   b9c70:	2100      	movne	r1, #0
   b9c72:	2000      	movne	r0, #0
   b9c74:	bd30      	popne	{r4, r5, pc}
   b9c76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9c7a:	d105      	bne.n	b9c88 <__adddf3+0x230>
   b9c7c:	0040      	lsls	r0, r0, #1
   b9c7e:	4149      	adcs	r1, r1
   b9c80:	bf28      	it	cs
   b9c82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9c86:	bd30      	pop	{r4, r5, pc}
   b9c88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9c8c:	bf3c      	itt	cc
   b9c8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9c92:	bd30      	popcc	{r4, r5, pc}
   b9c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9c98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9ca0:	f04f 0000 	mov.w	r0, #0
   b9ca4:	bd30      	pop	{r4, r5, pc}
   b9ca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9caa:	bf1a      	itte	ne
   b9cac:	4619      	movne	r1, r3
   b9cae:	4610      	movne	r0, r2
   b9cb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9cb4:	bf1c      	itt	ne
   b9cb6:	460b      	movne	r3, r1
   b9cb8:	4602      	movne	r2, r0
   b9cba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9cbe:	bf06      	itte	eq
   b9cc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9cc4:	ea91 0f03 	teqeq	r1, r3
   b9cc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9ccc:	bd30      	pop	{r4, r5, pc}
   b9cce:	bf00      	nop

000b9cd0 <__aeabi_ui2d>:
   b9cd0:	f090 0f00 	teq	r0, #0
   b9cd4:	bf04      	itt	eq
   b9cd6:	2100      	moveq	r1, #0
   b9cd8:	4770      	bxeq	lr
   b9cda:	b530      	push	{r4, r5, lr}
   b9cdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9ce0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9ce4:	f04f 0500 	mov.w	r5, #0
   b9ce8:	f04f 0100 	mov.w	r1, #0
   b9cec:	e750      	b.n	b9b90 <__adddf3+0x138>
   b9cee:	bf00      	nop

000b9cf0 <__aeabi_i2d>:
   b9cf0:	f090 0f00 	teq	r0, #0
   b9cf4:	bf04      	itt	eq
   b9cf6:	2100      	moveq	r1, #0
   b9cf8:	4770      	bxeq	lr
   b9cfa:	b530      	push	{r4, r5, lr}
   b9cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9d00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9d04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9d08:	bf48      	it	mi
   b9d0a:	4240      	negmi	r0, r0
   b9d0c:	f04f 0100 	mov.w	r1, #0
   b9d10:	e73e      	b.n	b9b90 <__adddf3+0x138>
   b9d12:	bf00      	nop

000b9d14 <__aeabi_f2d>:
   b9d14:	0042      	lsls	r2, r0, #1
   b9d16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9d1a:	ea4f 0131 	mov.w	r1, r1, rrx
   b9d1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9d22:	bf1f      	itttt	ne
   b9d24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9d28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9d2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9d30:	4770      	bxne	lr
   b9d32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9d36:	bf08      	it	eq
   b9d38:	4770      	bxeq	lr
   b9d3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9d3e:	bf04      	itt	eq
   b9d40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9d44:	4770      	bxeq	lr
   b9d46:	b530      	push	{r4, r5, lr}
   b9d48:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d54:	e71c      	b.n	b9b90 <__adddf3+0x138>
   b9d56:	bf00      	nop

000b9d58 <__aeabi_ul2d>:
   b9d58:	ea50 0201 	orrs.w	r2, r0, r1
   b9d5c:	bf08      	it	eq
   b9d5e:	4770      	bxeq	lr
   b9d60:	b530      	push	{r4, r5, lr}
   b9d62:	f04f 0500 	mov.w	r5, #0
   b9d66:	e00a      	b.n	b9d7e <__aeabi_l2d+0x16>

000b9d68 <__aeabi_l2d>:
   b9d68:	ea50 0201 	orrs.w	r2, r0, r1
   b9d6c:	bf08      	it	eq
   b9d6e:	4770      	bxeq	lr
   b9d70:	b530      	push	{r4, r5, lr}
   b9d72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9d76:	d502      	bpl.n	b9d7e <__aeabi_l2d+0x16>
   b9d78:	4240      	negs	r0, r0
   b9d7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9d7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9d82:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9d86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9d8a:	f43f aed8 	beq.w	b9b3e <__adddf3+0xe6>
   b9d8e:	f04f 0203 	mov.w	r2, #3
   b9d92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9d96:	bf18      	it	ne
   b9d98:	3203      	addne	r2, #3
   b9d9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9d9e:	bf18      	it	ne
   b9da0:	3203      	addne	r2, #3
   b9da2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9da6:	f1c2 0320 	rsb	r3, r2, #32
   b9daa:	fa00 fc03 	lsl.w	ip, r0, r3
   b9dae:	fa20 f002 	lsr.w	r0, r0, r2
   b9db2:	fa01 fe03 	lsl.w	lr, r1, r3
   b9db6:	ea40 000e 	orr.w	r0, r0, lr
   b9dba:	fa21 f102 	lsr.w	r1, r1, r2
   b9dbe:	4414      	add	r4, r2
   b9dc0:	e6bd      	b.n	b9b3e <__adddf3+0xe6>
   b9dc2:	bf00      	nop

000b9dc4 <atexit>:
   b9dc4:	2300      	movs	r3, #0
   b9dc6:	4601      	mov	r1, r0
   b9dc8:	461a      	mov	r2, r3
   b9dca:	4618      	mov	r0, r3
   b9dcc:	f000 b8c8 	b.w	b9f60 <__register_exitproc>

000b9dd0 <calloc>:
   b9dd0:	4b02      	ldr	r3, [pc, #8]	; (b9ddc <calloc+0xc>)
   b9dd2:	460a      	mov	r2, r1
   b9dd4:	4601      	mov	r1, r0
   b9dd6:	6818      	ldr	r0, [r3, #0]
   b9dd8:	f000 b818 	b.w	b9e0c <_calloc_r>
   b9ddc:	2003cecc 	.word	0x2003cecc

000b9de0 <memcpy>:
   b9de0:	440a      	add	r2, r1
   b9de2:	4291      	cmp	r1, r2
   b9de4:	f100 33ff 	add.w	r3, r0, #4294967295
   b9de8:	d100      	bne.n	b9dec <memcpy+0xc>
   b9dea:	4770      	bx	lr
   b9dec:	b510      	push	{r4, lr}
   b9dee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9df2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9df6:	4291      	cmp	r1, r2
   b9df8:	d1f9      	bne.n	b9dee <memcpy+0xe>
   b9dfa:	bd10      	pop	{r4, pc}

000b9dfc <memset>:
   b9dfc:	4402      	add	r2, r0
   b9dfe:	4603      	mov	r3, r0
   b9e00:	4293      	cmp	r3, r2
   b9e02:	d100      	bne.n	b9e06 <memset+0xa>
   b9e04:	4770      	bx	lr
   b9e06:	f803 1b01 	strb.w	r1, [r3], #1
   b9e0a:	e7f9      	b.n	b9e00 <memset+0x4>

000b9e0c <_calloc_r>:
   b9e0c:	b513      	push	{r0, r1, r4, lr}
   b9e0e:	434a      	muls	r2, r1
   b9e10:	4611      	mov	r1, r2
   b9e12:	9201      	str	r2, [sp, #4]
   b9e14:	f7fe fe86 	bl	b8b24 <_malloc_r>
   b9e18:	4604      	mov	r4, r0
   b9e1a:	b118      	cbz	r0, b9e24 <_calloc_r+0x18>
   b9e1c:	9a01      	ldr	r2, [sp, #4]
   b9e1e:	2100      	movs	r1, #0
   b9e20:	f7ff ffec 	bl	b9dfc <memset>
   b9e24:	4620      	mov	r0, r4
   b9e26:	b002      	add	sp, #8
   b9e28:	bd10      	pop	{r4, pc}
	...

000b9e2c <srand>:
   b9e2c:	b538      	push	{r3, r4, r5, lr}
   b9e2e:	4b10      	ldr	r3, [pc, #64]	; (b9e70 <srand+0x44>)
   b9e30:	681d      	ldr	r5, [r3, #0]
   b9e32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9e34:	4604      	mov	r4, r0
   b9e36:	b9b3      	cbnz	r3, b9e66 <srand+0x3a>
   b9e38:	2018      	movs	r0, #24
   b9e3a:	f7fe fe4b 	bl	b8ad4 <malloc>
   b9e3e:	4602      	mov	r2, r0
   b9e40:	63a8      	str	r0, [r5, #56]	; 0x38
   b9e42:	b920      	cbnz	r0, b9e4e <srand+0x22>
   b9e44:	4b0b      	ldr	r3, [pc, #44]	; (b9e74 <srand+0x48>)
   b9e46:	480c      	ldr	r0, [pc, #48]	; (b9e78 <srand+0x4c>)
   b9e48:	2142      	movs	r1, #66	; 0x42
   b9e4a:	f7fe fe73 	bl	b8b34 <__assert_func>
   b9e4e:	490b      	ldr	r1, [pc, #44]	; (b9e7c <srand+0x50>)
   b9e50:	4b0b      	ldr	r3, [pc, #44]	; (b9e80 <srand+0x54>)
   b9e52:	e9c0 1300 	strd	r1, r3, [r0]
   b9e56:	4b0b      	ldr	r3, [pc, #44]	; (b9e84 <srand+0x58>)
   b9e58:	6083      	str	r3, [r0, #8]
   b9e5a:	230b      	movs	r3, #11
   b9e5c:	8183      	strh	r3, [r0, #12]
   b9e5e:	2100      	movs	r1, #0
   b9e60:	2001      	movs	r0, #1
   b9e62:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9e66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9e68:	2200      	movs	r2, #0
   b9e6a:	611c      	str	r4, [r3, #16]
   b9e6c:	615a      	str	r2, [r3, #20]
   b9e6e:	bd38      	pop	{r3, r4, r5, pc}
   b9e70:	2003cecc 	.word	0x2003cecc
   b9e74:	000bbd71 	.word	0x000bbd71
   b9e78:	000bbd88 	.word	0x000bbd88
   b9e7c:	abcd330e 	.word	0xabcd330e
   b9e80:	e66d1234 	.word	0xe66d1234
   b9e84:	0005deec 	.word	0x0005deec

000b9e88 <strcpy>:
   b9e88:	4603      	mov	r3, r0
   b9e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9e8e:	f803 2b01 	strb.w	r2, [r3], #1
   b9e92:	2a00      	cmp	r2, #0
   b9e94:	d1f9      	bne.n	b9e8a <strcpy+0x2>
   b9e96:	4770      	bx	lr

000b9e98 <strlen>:
   b9e98:	4603      	mov	r3, r0
   b9e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9e9e:	2a00      	cmp	r2, #0
   b9ea0:	d1fb      	bne.n	b9e9a <strlen+0x2>
   b9ea2:	1a18      	subs	r0, r3, r0
   b9ea4:	3801      	subs	r0, #1
   b9ea6:	4770      	bx	lr

000b9ea8 <strtok>:
   b9ea8:	4b16      	ldr	r3, [pc, #88]	; (b9f04 <strtok+0x5c>)
   b9eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9eac:	681e      	ldr	r6, [r3, #0]
   b9eae:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9eb0:	4605      	mov	r5, r0
   b9eb2:	b9fc      	cbnz	r4, b9ef4 <strtok+0x4c>
   b9eb4:	2050      	movs	r0, #80	; 0x50
   b9eb6:	9101      	str	r1, [sp, #4]
   b9eb8:	f7fe fe0c 	bl	b8ad4 <malloc>
   b9ebc:	9901      	ldr	r1, [sp, #4]
   b9ebe:	65b0      	str	r0, [r6, #88]	; 0x58
   b9ec0:	4602      	mov	r2, r0
   b9ec2:	b920      	cbnz	r0, b9ece <strtok+0x26>
   b9ec4:	4b10      	ldr	r3, [pc, #64]	; (b9f08 <strtok+0x60>)
   b9ec6:	4811      	ldr	r0, [pc, #68]	; (b9f0c <strtok+0x64>)
   b9ec8:	2157      	movs	r1, #87	; 0x57
   b9eca:	f7fe fe33 	bl	b8b34 <__assert_func>
   b9ece:	e9c0 4400 	strd	r4, r4, [r0]
   b9ed2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9ed6:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b9eda:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b9ede:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9ee2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9ee6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b9eea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b9eee:	6184      	str	r4, [r0, #24]
   b9ef0:	7704      	strb	r4, [r0, #28]
   b9ef2:	6244      	str	r4, [r0, #36]	; 0x24
   b9ef4:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9ef6:	2301      	movs	r3, #1
   b9ef8:	4628      	mov	r0, r5
   b9efa:	b002      	add	sp, #8
   b9efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9f00:	f000 b806 	b.w	b9f10 <__strtok_r>
   b9f04:	2003cecc 	.word	0x2003cecc
   b9f08:	000bbd71 	.word	0x000bbd71
   b9f0c:	000bbe05 	.word	0x000bbe05

000b9f10 <__strtok_r>:
   b9f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9f12:	b908      	cbnz	r0, b9f18 <__strtok_r+0x8>
   b9f14:	6810      	ldr	r0, [r2, #0]
   b9f16:	b188      	cbz	r0, b9f3c <__strtok_r+0x2c>
   b9f18:	4604      	mov	r4, r0
   b9f1a:	4620      	mov	r0, r4
   b9f1c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9f20:	460f      	mov	r7, r1
   b9f22:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9f26:	b91e      	cbnz	r6, b9f30 <__strtok_r+0x20>
   b9f28:	b965      	cbnz	r5, b9f44 <__strtok_r+0x34>
   b9f2a:	6015      	str	r5, [r2, #0]
   b9f2c:	4628      	mov	r0, r5
   b9f2e:	e005      	b.n	b9f3c <__strtok_r+0x2c>
   b9f30:	42b5      	cmp	r5, r6
   b9f32:	d1f6      	bne.n	b9f22 <__strtok_r+0x12>
   b9f34:	2b00      	cmp	r3, #0
   b9f36:	d1f0      	bne.n	b9f1a <__strtok_r+0xa>
   b9f38:	6014      	str	r4, [r2, #0]
   b9f3a:	7003      	strb	r3, [r0, #0]
   b9f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9f3e:	461c      	mov	r4, r3
   b9f40:	e00c      	b.n	b9f5c <__strtok_r+0x4c>
   b9f42:	b915      	cbnz	r5, b9f4a <__strtok_r+0x3a>
   b9f44:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9f48:	460e      	mov	r6, r1
   b9f4a:	f816 5b01 	ldrb.w	r5, [r6], #1
   b9f4e:	42ab      	cmp	r3, r5
   b9f50:	d1f7      	bne.n	b9f42 <__strtok_r+0x32>
   b9f52:	2b00      	cmp	r3, #0
   b9f54:	d0f3      	beq.n	b9f3e <__strtok_r+0x2e>
   b9f56:	2300      	movs	r3, #0
   b9f58:	f804 3c01 	strb.w	r3, [r4, #-1]
   b9f5c:	6014      	str	r4, [r2, #0]
   b9f5e:	e7ed      	b.n	b9f3c <__strtok_r+0x2c>

000b9f60 <__register_exitproc>:
   b9f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9f64:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba020 <__register_exitproc+0xc0>
   b9f68:	4606      	mov	r6, r0
   b9f6a:	f8d8 0000 	ldr.w	r0, [r8]
   b9f6e:	461f      	mov	r7, r3
   b9f70:	460d      	mov	r5, r1
   b9f72:	4691      	mov	r9, r2
   b9f74:	f000 f856 	bl	ba024 <__retarget_lock_acquire_recursive>
   b9f78:	4b25      	ldr	r3, [pc, #148]	; (ba010 <__register_exitproc+0xb0>)
   b9f7a:	681c      	ldr	r4, [r3, #0]
   b9f7c:	b934      	cbnz	r4, b9f8c <__register_exitproc+0x2c>
   b9f7e:	4c25      	ldr	r4, [pc, #148]	; (ba014 <__register_exitproc+0xb4>)
   b9f80:	601c      	str	r4, [r3, #0]
   b9f82:	4b25      	ldr	r3, [pc, #148]	; (ba018 <__register_exitproc+0xb8>)
   b9f84:	b113      	cbz	r3, b9f8c <__register_exitproc+0x2c>
   b9f86:	681b      	ldr	r3, [r3, #0]
   b9f88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9f8c:	6863      	ldr	r3, [r4, #4]
   b9f8e:	2b1f      	cmp	r3, #31
   b9f90:	dd07      	ble.n	b9fa2 <__register_exitproc+0x42>
   b9f92:	f8d8 0000 	ldr.w	r0, [r8]
   b9f96:	f000 f847 	bl	ba028 <__retarget_lock_release_recursive>
   b9f9a:	f04f 30ff 	mov.w	r0, #4294967295
   b9f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9fa2:	b34e      	cbz	r6, b9ff8 <__register_exitproc+0x98>
   b9fa4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9fa8:	b988      	cbnz	r0, b9fce <__register_exitproc+0x6e>
   b9faa:	4b1c      	ldr	r3, [pc, #112]	; (ba01c <__register_exitproc+0xbc>)
   b9fac:	b923      	cbnz	r3, b9fb8 <__register_exitproc+0x58>
   b9fae:	f8d8 0000 	ldr.w	r0, [r8]
   b9fb2:	f000 f838 	bl	ba026 <__retarget_lock_release>
   b9fb6:	e7f0      	b.n	b9f9a <__register_exitproc+0x3a>
   b9fb8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9fbc:	f7fe fd8a 	bl	b8ad4 <malloc>
   b9fc0:	2800      	cmp	r0, #0
   b9fc2:	d0f4      	beq.n	b9fae <__register_exitproc+0x4e>
   b9fc4:	2300      	movs	r3, #0
   b9fc6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9fca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9fce:	6863      	ldr	r3, [r4, #4]
   b9fd0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9fd4:	2201      	movs	r2, #1
   b9fd6:	409a      	lsls	r2, r3
   b9fd8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9fdc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9fe0:	4313      	orrs	r3, r2
   b9fe2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9fe6:	2e02      	cmp	r6, #2
   b9fe8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9fec:	bf02      	ittt	eq
   b9fee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9ff2:	4313      	orreq	r3, r2
   b9ff4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9ff8:	6863      	ldr	r3, [r4, #4]
   b9ffa:	f8d8 0000 	ldr.w	r0, [r8]
   b9ffe:	1c5a      	adds	r2, r3, #1
   ba000:	3302      	adds	r3, #2
   ba002:	6062      	str	r2, [r4, #4]
   ba004:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba008:	f000 f80e 	bl	ba028 <__retarget_lock_release_recursive>
   ba00c:	2000      	movs	r0, #0
   ba00e:	e7c6      	b.n	b9f9e <__register_exitproc+0x3e>
   ba010:	2003e7e8 	.word	0x2003e7e8
   ba014:	2003e75c 	.word	0x2003e75c
   ba018:	00000000 	.word	0x00000000
   ba01c:	000b8ad5 	.word	0x000b8ad5
   ba020:	2003cf30 	.word	0x2003cf30

000ba024 <__retarget_lock_acquire_recursive>:
   ba024:	4770      	bx	lr

000ba026 <__retarget_lock_release>:
   ba026:	4770      	bx	lr

000ba028 <__retarget_lock_release_recursive>:
   ba028:	4770      	bx	lr

000ba02a <link_code_end>:
	...

000ba02c <dynalib_user>:
   ba02c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   ba03c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba04c:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   ba05c:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   ba06c:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   ba07c:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   ba08c:	6f69 006e 4f4d 4f44 4220 5341 4349 004f     ion.MODO BASICO.
   ba09c:	4f4d 4f44 4120 4156 5a4e 4441 004f 4f4d     MODO AVANZADO.MO
   ba0ac:	4f44 4d20 5355 4349 0041 6942 6d74 7061     DO MUSICA.Bitmap
   ba0bc:	6e20 746f 6120 6176 6c69 6261 656c 002e      not available..
   ba0cc:	4320 4e4f 4345 4154 2052 2041 4548 4158      CONECTAR A HEXA
   ba0dc:	4f47 4f4e 2000 4f43 454e 5443 5241 4120     GONO. CONECTAR A
   ba0ec:	4320 4155 5244 4441 004f 4320 4e4f 4345      CUADRADO. CONEC
   ba0fc:	4154 2052 2041 5254 4149 474e 4c55 004f     TAR A TRIANGULO.
   ba10c:	4320 4e4f 4345 4154 2052 2041 4f52 424d      CONECTAR A ROMB
   ba11c:	004f 4320 4e4f 4345 4154 2052 2041 4553     O. CONECTAR A SE
   ba12c:	494d 4943 4352 4c55 004f 4f43 454e 5443     MICIRCULO.CONECT
   ba13c:	5241 4120 4320 5249 5543 4f4c 5900 2041     AR A CIRCULO.YA 
   ba14c:	4f43 454e 5443 4441 004f 6154 6a72 7465     CONECTADO.Tarjet
   ba15c:	2061 6e69 6176 696c 6164 7020 7261 2061     a invalida para 
   ba16c:	7365 6574 6d20 646f 006f 6f42 7272 6461     este modo.Borrad
   ba17c:	206f 6e69 6176 696c 6f64 7020 7261 2061     o invalido para 
   ba18c:	7365 6574 6d20 646f 006f 724f 6564 206e     este modo.Orden 
   ba19c:	6564 7420 7261 656a 6174 2073 6e69 6176     de tarjetas inva
   ba1ac:	696c 6f64 5000 6575 7472 206f 6f6e 6420     lido.Puerto no d
   ba1bc:	7369 6f70 696e 6c62 0065 6c50 7961 6e20     isponible.Play n
   ba1cc:	206f 6964 7073 6e6f 6269 656c 5300 6e65     o disponible.Sen
   ba1dc:	6f73 2072 6f6e 6420 7369 6f70 696e 6c62     sor no disponibl
   ba1ec:	2065 6528 206e 7375 296f 4100 7463 6175     e (en uso).Actua
   ba1fc:	6f64 2072 6f6e 6420 7369 6f70 696e 6c62     dor no disponibl
   ba20c:	2065 6528 206e 7375 296f 4200 726f 6172     e (en uso).Borra
   ba21c:	6f64 6420 2065 6c62 716f 6575 7220 6165     do de bloque rea
   ba22c:	696c 617a 6f64 4e00 6461 2061 7571 2065     lizado.Nada que 
   ba23c:	6f62 7272 7261 4200 726f 6172 6f64 6420     borrar.Borrado d
   ba24c:	2065 6f6c 706f 7220 6165 696c 617a 6f64     e loop realizado
   ba25c:	4e00 6461 2061 7571 2065 6f62 7272 7261     .Nada que borrar
   ba26c:	002e 6f4e 6174 6920 766e a1c3 696c 6164     ..Nota inv..lida
   ba27c:	5400 7069 206f 6e69 c376 6ca1 6469 006f     .Tipo inv..lido.
   ba28c:	4552 4d00 0049 4146 5300 4c4f 4c00 0041     RE.MI.FA.SOL.LA.
   ba29c:	4953 4400 274f 5f00 0043 4e5f 5f00 0042     SI.DO'._C._N._B.
   ba2ac:	6425 2d20 2520 0064 6946 616e 696c 617a     %d - %d.Finaliza
   ba2bc:	6520 206c 7562 6c63 2065 6e61 6574 2073      el bucle antes 
   ba2cc:	6564 7220 7065 6f72 7564 6963 0072 6e49     de reproducir.In
   ba2dc:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   ba2ec:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   ba2fc:	6520 206e 6c65 6220 6f6c 7571 0065 6f4d      en el bloque.Mo
   ba30c:	6f64 4220 5341 4349 204f 6564 6574 7463     do BASICO detect
   ba31c:	6461 006f 6e49 6369 6169 646e 206f 6f6d     ado.Iniciando mo
   ba32c:	6f64 4220 5341 4349 2e4f 2e2e 4d00 646f     do BASICO....Mod
   ba33c:	206f 5641 4e41 415a 4f44 6420 7465 6365     o AVANZADO detec
   ba34c:	6174 6f64 4900 696e 6963 6e61 6f64 6d20     tado.Iniciando m
   ba35c:	646f 206f 5641 4e41 415a 4f44 2e2e 002e     odo AVANZADO....
   ba36c:	6f4d 6f64 4d20 5355 4349 2041 6564 6574     Modo MUSICA dete
   ba37c:	7463 6461 006f 6e49 6369 6169 646e 206f     ctado.Iniciando 
   ba38c:	6f6d 6f64 4d20 5355 4349 2e41 2e2e 4d00     modo MUSICA....M
   ba39c:	4649 5241 5f45 6552 6461 2928 6620 6961     IFARE_Read() fai
   ba3ac:	656c 3a64 0020 4350 5f44 7541 6874 6e65     led: .PCD_Authen
   ba3bc:	6974 6163 6574 2928 6620 6961 656c 3a64     ticate() failed:
   ba3cc:	0020 6154 4967 666e 3a6f 2520 0073 6f43      .TagInfo: %s.Co
   ba3dc:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
   ba3ec:	4120 0a30 4300 6e6f 6365 6174 2072 6c61      A0..Conectar al
   ba3fc:	7020 6575 7472 206f 3241 000a 6f43 656e      puerto A2..Cone
   ba40c:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
   ba41c:	0a34 4300 6e6f 6365 6174 2072 6c61 7020     4..Conectar al p
   ba42c:	6575 7472 206f 3244 000a 6f43 656e 7463     uerto D2..Conect
   ba43c:	7261 6120 206c 7570 7265 6f74 4420 0a34     ar al puerto D4.
   ba44c:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   ba45c:	7472 206f 3644 000a 7245 6f72 3a72 4e20     rto D6..Error: N
   ba46c:	206f 6168 2079 616d 2073 7570 7265 6f74     o hay mas puerto
   ba47c:	2073 6964 7073 6e6f 6269 656c 2073 000a     s disponibles ..
   ba48c:	4545 5250 4d4f 6520 706d 7974 5a00 6d75     EEPROM empty.Zum
   ba49c:	6162 6f64 3a72 5400 6761 4420 7465 6365     bador:.Tag Detec
   ba4ac:	6174 6164 2d20 3e2d 0020 6f42 7272 6461     tada --> .Borrad
   ba4bc:	206f 6f63 706d 656c 6f74 7220 6165 696c     o completo reali
   ba4cc:	617a 6f64 4200 726f 6172 6f64 6e20 206f     zado.Borrado no 
   ba4dc:	6570 6d72 7469 6469 206f 6170 6172 6520     permitido para e
   ba4ec:	7473 2065 6f6d 6f64 5300 6e65 6f73 2072     ste modo.Sensor 
   ba4fc:	6564 6574 7463 6461 006f 6341 7574 6461     detectado.Actuad
   ba50c:	726f 6420 7465 6365 6174 6f64 5400 7261     or detectado.Tar
   ba51c:	656a 6174 6920 766e a1c3 696c 6164 7020     jeta inv..lida p
   ba52c:	7261 2061 7365 6574 6d20 646f 006f 6a45     ara este modo.Ej
   ba53c:	6365 7475 6e61 6f64 7420 6761 2d20 3e2d     ecutando tag -->
   ba54c:	0020 6553 6520 7073 7265 6261 2061 4649      .Se esperaba IF
   ba55c:	7420 6761 4400 7365 7570 7365 6420 2065      tag.Despues de 
   ba56c:	6e75 7320 6e65 6f73 2072 6573 6520 7073     un sensor se esp
   ba57c:	7265 2061 6e75 2061 6f63 636e 6f69 3a6e     era una concion:
   ba58c:	4120 444e 7520 4f20 0052 6553 736e 726f      AND u OR.Sensor
   ba59c:	6920 766e 6c61 6469 006f 6553 6520 7073      invalido.Se esp
   ba5ac:	7265 6261 2061 4854 4e45 7420 6761 4900     eraba THEN tag.I
   ba5bc:	766e 6c61 6469 4120 7463 6175 6f64 0072     nvalid Actuador.
   ba5cc:	6553 6520 7073 7265 6261 2061 4c45 4553     Se esperaba ELSE
   ba5dc:	7420 6761 4900 2046 6564 6574 7463 6461      tag.IF detectad
   ba5ec:	006f 4649 4e00 6d75 7265 206f 6564 6220     o.IF.Numero de b
   ba5fc:	6f6c 7571 7365 3e20 3220 7c20 207c 6553     loques > 2 || Se
   ba60c:	6e20 6365 7365 7469 2061 6c61 6d20 6e65      necesita al men
   ba61c:	736f 7520 206e 6361 7574 6461 726f 7020     os un actuador p
   ba62c:	7261 2061 6574 6d72 6e69 7261 6520 206c     ara terminar el 
   ba63c:	6c62 716f 6575 4100 444e 4f2f 2052 6564     bloque.AND/OR de
   ba64c:	6574 7463 6461 006f 4e41 0044 6e55 2061     tectado.AND.Una 
   ba65c:	6f63 636e 6369 6f69 206e 6f73 6f6c 7020     concicion solo p
   ba66c:	6575 6564 6920 2072 6573 7567 6469 2061     uede ir seguida 
   ba67c:	6564 7520 206e 6573 736e 726f 002e 4854     de un sensor..TH
   ba68c:	4e45 6420 7465 6365 6174 6f64 5400 4548     EN detectado.THE
   ba69c:	004e 754e 656d 6f72 6420 2065 6573 736e     N.Numero de sens
   ba6ac:	726f 7365 6920 666e 6375 6569 746e 7365     ores infucientes
   ba6bc:	4500 534c 2045 6564 6574 7463 6461 006f     .ELSE detectado.
   ba6cc:	4c45 4553 4900 746e 6f72 7564 6563 7520     ELSE.Introduce u
   ba6dc:	206e 6341 7574 6461 726f 7020 7261 2061     n Actuador para 
   ba6ec:	616c 6520 6176 756c 6361 c369 6eb3 6120     la evaluaci..n a
   ba6fc:	5420 5552 0045 6946 206e 6154 0067 2023      TRUE.Fin Tag.# 
   ba70c:	6c42 716f 6575 7c20 2320 5320 6e65 6f73     Bloque | # Senso
   ba71c:	6572 2073 207c 2023 6f43 646e 6369 6f69     res | # Condicio
   ba72c:	656e 2073 207c 2023 6341 7574 6461 726f     nes | # Actuador
   ba73c:	7365 2000 2020 2520 2064 7c09 2009 6425     es.    %d .|. %d
   ba74c:	0920 097c 2520 2064 7c09 2009 6425 0920      .|. %d .|. %d .
   ba75c:	097c 2520 0064 4c42 514f 4555 3120 203a     |. %d.BLOQUE 1: 
   ba76c:	5254 4555 4200 4f4c 5551 2045 3a31 4620     TRUE.BLOQUE 1: F
   ba77c:	4c41 4553 2000 6120 6163 6162 6220 6f6c     ALSE.  acaba blo
   ba78c:	7571 2065 0031 4c42 514f 4555 3220 203a     que 1.BLOQUE 2: 
   ba79c:	5254 4555 4200 4f4c 5551 2045 3a32 4620     TRUE.BLOQUE 2: F
   ba7ac:	4c41 4553 4200 4f4c 5551 2045 3a32 2020     ALSE.BLOQUE 2:  
   ba7bc:	6e20 206f 6966 616e 696c 617a 6f64 4500      no finalizado.E
   ba7cc:	656a 7563 6174 646e 2e6f 2e2e 4200 726f     jecutando....Bor
   ba7dc:	6172 6164 7520 746c 6d69 2061 656c 7463     rada ultima lect
   ba7ec:	7275 0061 6150 6172 6320 6d6f 6e65 617a     ura.Para comenza
   ba7fc:	2072 6e75 6c20 6f6f 2070 6168 2079 7571     r un loop hay qu
   ba80c:	2065 6966 616e 696c 617a 2072 6c65 6120     e finalizar el a
   ba81c:	746e 7265 6f69 2e72 4500 444e 4c20 6f6f     nterior..END Loo
   ba82c:	0070 6920 6574 6172 6963 6e6f 7365 4c00     p. iteraciones.L
   ba83c:	6f6f 2070 6973 206e 6f63 656d 7a6e 7261     oop sin comenzar
   ba84c:	6f20 7320 6e69 6320 6e6f 6574 696e 6f64      o sin contenido
   ba85c:	2d00 3000 3123 3123 3023 3000 3123 3123     .-.0#1#1#0.0#1#1
   ba86c:	3123 3000 3023 3123 3023 3000 3023 3123     #1.0#0#1#0.0#0#1
   ba87c:	3123 3000 3023 3123 3223 3000 3023 3123     #1.0#0#1#2.0#0#1
   ba88c:	3323 3000 3023 3123 3423 3000 3023 3123     #3.0#0#1#4.0#0#1
   ba89c:	3523 3100 3023 3123 3723 3023 3100 3023     #5.1#0#1#7#0.1#0
   ba8ac:	3123 3723 3123 3100 3023 3023 3223 3023     #1#7#1.1#0#0#2#0
   ba8bc:	3100 3023 3023 3223 3123 3100 3023 3023     .1#0#0#2#1.1#0#0
   ba8cc:	3323 3023 3100 3023 3023 3323 3123 3100     #3#0.1#0#0#3#1.1
   ba8dc:	3023 3123 3423 3023 3100 3023 3123 3423     #0#1#4#0.1#0#1#4
   ba8ec:	3123 3100 3023 3123 3523 3023 3100 3023     #1.1#0#1#5#0.1#0
   ba8fc:	3123 3523 3123 3100 3023 3123 3623 3023     #1#5#1.1#0#1#6#0
   ba90c:	3100 3023 3123 3623 3123 3100 3023 3123     .1#0#1#6#1.1#0#1
   ba91c:	3623 3223 3100 3123 3123 3123 3023 3100     #6#2.1#1#1#1#0.1
   ba92c:	3123 3123 3123 3123 3100 3123 3123 3023     #1#1#1#1.1#1#1#0
   ba93c:	3023 3100 3123 3123 3023 3123 3100 3123     #0.1#1#1#0#1.1#1
   ba94c:	3123 3023 3223 3100 3123 3123 3023 3323     #1#0#2.1#1#1#0#3
   ba95c:	3100 3123 3123 3023 3423 3100 3123 3123     .1#1#1#0#4.1#1#1
   ba96c:	3023 3523 3100 3123 3123 3023 3623 3100     #0#5.1#1#1#0#6.1
   ba97c:	3123 3123 3023 3723 3100 3323 3023 3100     #1#1#0#7.1#3#0.1
   ba98c:	3323 3123 3200 3023 3023 3023 3200 3023     #3#1.2#0#0#0.2#0
   ba99c:	3023 3123 3200 3023 3023 3223 3200 3023     #0#1.2#0#0#2.2#0
   ba9ac:	3123 3023 3200 3023 3123 3123 3200 3023     #1#0.2#0#1#1.2#0
   ba9bc:	3123 3223 3200 3023 3223 3023 3200 3023     #1#2.2#0#2#0.2#0
   ba9cc:	3223 3123 3200 3023 3223 3223 3200 3023     #2#1.2#0#2#2.2#0
   ba9dc:	3323 3023 3200 3023 3323 3123 3200 3023     #3#0.2#0#3#1.2#0
   ba9ec:	3323 3223 3200 3023 3423 3023 3200 3023     #3#2.2#0#4#0.2#0
   ba9fc:	3423 3123 3200 3023 3423 3223 3200 3023     #4#1.2#0#4#2.2#0
   baa0c:	3523 3023 3200 3023 3523 3123 3200 3023     #5#0.2#0#5#1.2#0
   baa1c:	3523 3223 3200 3023 3623 3023 3200 3023     #5#2.2#0#6#0.2#0
   baa2c:	3623 3123 3200 3023 3623 3223 3200 3023     #6#1.2#0#6#2.2#0
   baa3c:	3723 3023 3200 3023 3723 3123 3200 3023     #7#0.2#0#7#1.2#0
   baa4c:	3723 3223 3200 3123 3023 3200 3223 3023     #7#2.2#1#0.2#2#0
   baa5c:	3200 3223 3123 3200 3223 3223 3200 3223     .2#2#1.2#2#2.2#2
   baa6c:	3323 3200 3223 3423 3200 3223 3523 3200     #3.2#2#4.2#2#5.2
   baa7c:	3223 3623 3200 3223 3723 3200 3223 3823     #2#6.2#2#7.2#2#8
   baa8c:	3600 3023 3023 3600 3023 3123 3600 3023     .6#0#0.6#0#1.6#0
   baa9c:	3223 3600 3123 3023 3600 3223 3023 3600     #2.6#1#0.6#2#0.6
   baaac:	3223 3123 3600 3223 3223 0000               #2#1.6#2#2..

000baab8 <CSWTCH.344>:
   baab8:	00fa 01f4 03e8                              ......

000baabe <_ZL14sucreLogo_data>:
   baabe:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baace:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baade:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   baaee:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   baafe:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bab0e:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bab1e:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bab2e:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bab3e:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bab4e:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bab5e:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bab6e:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bab7e:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bab8e:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bab9e:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   babae:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   babbe:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   babce:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babde:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   babee:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   babfe:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bac0e:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bac1e:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bac2e:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bac3e:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bac4e:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bac5e:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bac6e:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bac7e:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bac8e:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bac9e:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bacae:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bacbe:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bacce:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bacde:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bacee:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bacfe:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bad0e:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bad1e:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bad2e:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bad3e:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bad4e:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bad5e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad6e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad7e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad8e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad9e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badae:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badbe:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   badce:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   badde:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   badee:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   badfe:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bae0e:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bae1e:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bae2e:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bae3e:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bae4e:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bae5e:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bae6e:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bae7e:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bae8e:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bae9e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baeae:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baebe:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   baece:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   baede:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   baeee:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   baefe:	7525 003e                                   %u>.

000baf02 <_ZL4font>:
   baf02:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   baf12:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   baf22:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   baf32:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   baf42:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   baf52:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   baf62:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   baf72:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   baf82:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   baf92:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bafa2:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bafb2:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bafc2:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bafd2:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bafe2:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   baff2:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bb002:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bb012:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bb022:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bb032:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bb042:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bb052:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bb062:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bb072:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bb082:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bb092:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bb0a2:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bb0b2:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bb0c2:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bb0d2:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bb0e2:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bb0f2:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bb102:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bb112:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bb122:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bb132:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bb142:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bb152:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bb162:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bb172:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bb182:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bb192:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bb1a2:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bb1b2:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bb1c2:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bb1d2:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bb1e2:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bb1f2:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bb202:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bb212:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bb222:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bb232:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bb242:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bb252:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bb262:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bb272:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bb282:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bb292:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bb2a2:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bb2b2:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bb2c2:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bb2d2:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bb2e2:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bb2f2:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bb302:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bb312:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bb322:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bb332:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bb342:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bb352:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bb362:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bb372:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bb382:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bb392:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bb3a2:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bb3b2:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bb3c2:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bb3d2:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bb3e2:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bb3f2:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bb404 <_ZTV12Adafruit_GFX>:
	...
   bb414:	7005 000b 8fad 000b 409d 000b 6a0b 000b     .p.......@...j..
   bb424:	6a0d 000b 6a3f 000b 6a1b 000b 6a2d 000b     .j..?j...j..-j..
   bb434:	694d 000b 6a0b 000b 6c37 000b 6c35 000b     Mi...j..7l..5l..
   bb444:	6a57 000b 6a95 000b 6acf 000b 6b15 000b     Wj...j...j...k..
   bb454:	6b31 000b 6bb5 000b 6e55 6e6b 776f 206e     1k...k..Unknown 
   bb464:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bb474:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bb484:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bb494:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bb4a4:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bb4b4:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bb4c4:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bb4d4:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bb4e4:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bb4f4:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bb504:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bb514:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bb524:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bb534:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bb544:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bb554 <CSWTCH.84>:
   bb554:	b46a 000b b473 000b b48b 000b b4a0 000b     j...s...........
   bb564:	b4ba 000b b4d6 000b b505 000b b517 000b     ................
   bb574:	b531 000b                                   1...

000bb578 <_ZTVN8particle11SPISettingsE>:
	...
   bb580:	68f9 000b 68e9 000b 68eb 000b               .h...h...h..

000bb58c <_ZL12splash2_data>:
   bb58c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bb59c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bb5ac:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bb5c8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bb5d8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bb5e8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bb5f8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bb608:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bb618:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bb628:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bb638:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bb648:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bb658:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bb668:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bb678:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bb688:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bb698:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bb6a8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bb6b8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bb6c8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bb6d8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bb6e8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bb6f8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bb708:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bb720:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bb730:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bb740:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bb750:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bb760:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bb76c <_ZL14sucreLogo_data>:
   bb76c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb77c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb78c:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bb79c:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bb7ac:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb7bc:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb7cc:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb7dc:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb7ec:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bb7fc:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bb80c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bb81c:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bb82c:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bb83c:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bb84c:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bb85c:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bb86c:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bb87c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb88c:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bb89c:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bb8ac:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bb8bc:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bb8cc:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bb8dc:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bb8ec:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bb8fc:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bb90c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bb91c:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bb92c:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bb93c:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bb94c:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bb95c:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bb96c:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bb97c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bb98c:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bb99c:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bb9ac:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bb9bc:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bb9cc:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bb9dc:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bb9ec:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bb9fc:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bba0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bba6c:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bba7c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bba8c:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bba9c:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bbaac:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bbabc:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bbacc:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bbadc:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bbaec:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bbafc:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bbb0c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bbb1c:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bbb2c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbb3c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbb4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbb5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bbb6c <_ZTV16Adafruit_SSD1306>:
	...
   bbb74:	7bb9 000b 7bd1 000b 7005 000b 8fad 000b     .{...{...p......
   bbb84:	7be5 000b 6a0b 000b 6a0d 000b 6a3f 000b     .{...j...j..?j..
   bbb94:	6a1b 000b 6a2d 000b 694d 000b 6a0b 000b     .j..-j..Mi...j..
   bbba4:	6c37 000b 7d77 000b 8313 000b 82c5 000b     7l..w}..........
   bbbb4:	6acf 000b 6b15 000b 6b31 000b 6bb5 000b     .j...k..1k...k..

000bbbc4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bbbc4:	8000 e0c0 f8f0 fefc                         ........

000bbbcc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bbbcc:	0100 0703 1f0f 7f3f                         ......?.

000bbbd4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bbbd4:	d5ae a880                                   ....

000bbbd8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bbbd8:	00d3 8d40                                   ..@.

000bbbdc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bbbdc:	0020 c8a1                                    ...

000bbbe0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bbbe0:	40db a6a4 af2e                              .@....

000bbbe6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bbbe6:	02da 8f81                                   ....

000bbbea <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bbbea:	12da                                         ...

000bbbed <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bbbed:	02da                                         ...

000bbbf0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bbbf0:	0022 21ff 0000 0000                         "..!....

000bbbf8 <_ZTVN5spark13EthernetClassE>:
	...
   bbc00:	8bb3 000b 8ba9 000b 8b9f 000b 8b95 000b     ................
   bbc10:	8b89 000b 8b7d 000b 96d9 000b 96e1 000b     ....}...........
   bbc20:	8b71 000b 8b69 000b 8b5f 000b 8b55 000b     q...i..._...U...
   bbc30:	9711 000b                                   ....

000bbc34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bbc34:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bbc44:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bbc54:	7361 7463 6d69 0065                         asctime.

000bbc5c <_ZTV9IPAddress>:
	...
   bbc64:	9289 000b 9279 000b 927b 000b               ....y...{...

000bbc70 <_ZTV9USBSerial>:
	...
   bbc78:	936f 000b 93d7 000b 93ad 000b 8fad 000b     o...............
   bbc88:	939f 000b 9371 000b 9381 000b 93d1 000b     ....q...........
   bbc98:	9391 000b 9369 000b                         ....i...

000bbca0 <_ZTV11USARTSerial>:
	...
   bbca8:	94cd 000b 9539 000b 9511 000b 8fad 000b     ....9...........
   bbcb8:	94e1 000b 94fd 000b 94ef 000b 950b 000b     ................
   bbcc8:	94cf 000b 94d3 000b                         ........

000bbcd0 <_ZTV7TwoWire>:
	...
   bbcd8:	9571 000b 95bb 000b 9593 000b 9573 000b     q...........s...
   bbce8:	959b 000b 95a3 000b 95ab 000b 95b3 000b     ................

000bbcf8 <_ZTVN5spark9WiFiClassE>:
	...
   bbd00:	967b 000b 9671 000b 9667 000b 961d 000b     {...q...g.......
   bbd10:	965b 000b 964f 000b 96d9 000b 96e1 000b     [...O...........
   bbd20:	9643 000b 963b 000b 9631 000b 9627 000b     C...;...1...'...
   bbd30:	9711 000b                                   ....

000bbd34 <_ZTVN5spark12NetworkClassE>:
	...
   bbd3c:	9699 000b 96a3 000b 96ad 000b 96b7 000b     ................
   bbd4c:	96c1 000b 96cd 000b 96d9 000b 96e1 000b     ................
   bbd5c:	96e9 000b 96f5 000b 96fd 000b 9707 000b     ................
   bbd6c:	9711 000b                                   ....

000bbd70 <_ZSt7nothrow>:
   bbd70:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bbd80:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bbd90:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bbda0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bbdb0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bbdc0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bbdd0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bbde0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bbdf0:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bbe00:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bbe10:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bbe20:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bbe30:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bbe40:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bbe50:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bbe60:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bbe70:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bbe80:	2e6b 0063                                   k.c.

000bbe84 <link_const_variable_data_end>:
   bbe84:	000b6315 	.word	0x000b6315
   bbe88:	000b8bbd 	.word	0x000b8bbd
   bbe8c:	000b8d35 	.word	0x000b8d35
   bbe90:	000b8f9d 	.word	0x000b8f9d
   bbe94:	000b90d5 	.word	0x000b90d5
   bbe98:	000b90e5 	.word	0x000b90e5
   bbe9c:	000b9101 	.word	0x000b9101
   bbea0:	000b9685 	.word	0x000b9685
   bbea4:	000b97e9 	.word	0x000b97e9

000bbea8 <link_constructors_end>:
	...
