
/Users/marcosgarciagarcia/Documents/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ba4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9bc0  000b9bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9be4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003df64  000b9be8  0001df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007f8  2003dff8  2003dff8  0002dff8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9c7c  000b9c7c  00029c7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9ca4  000b9ca4  00029ca4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015b6a2  00000000  00000000  00029ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000183c7  00000000  00000000  0018534a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004e6b8  00000000  00000000  0019d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003598  00000000  00000000  001ebdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bc30  00000000  00000000  001ef361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042963  00000000  00000000  001faf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057021  00000000  00000000  0023d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b7fc  00000000  00000000  00294915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a17c  00000000  00000000  003d0114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fa55 	bl	b84dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fa5d 	bl	b84f8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df64 	.word	0x2003df64
   b4048:	000b9be8 	.word	0x000b9be8
   b404c:	2003dff8 	.word	0x2003dff8
   b4050:	2003dff8 	.word	0x2003dff8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 ff2f 	bl	b7ec0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9b98 	.word	0x000b9b98
   b407c:	000b9bbc 	.word	0x000b9bbc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bd94 	b.w	b4bac <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fea5 	bl	b4dd4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 becf 	b.w	b7e30 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f003 b8dd 	b.w	b7250 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f003 b8e3 	b.w	b7260 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f003 f838 	bl	b7118 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6e19 	.word	0x000b6e19
   b40b0:	000b873c 	.word	0x000b873c

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c4:	b40e      	push	{r1, r2, r3}
   b40c6:	b503      	push	{r0, r1, lr}
   b40c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d2:	f003 fb50 	bl	b7776 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d6:	b002      	add	sp, #8
   b40d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40dc:	b003      	add	sp, #12
   b40de:	4770      	bx	lr

000b40e0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e0:	b40e      	push	{r1, r2, r3}
   b40e2:	b503      	push	{r0, r1, lr}
   b40e4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ec:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ee:	f003 fb42 	bl	b7776 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f2:	b002      	add	sp, #8
   b40f4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f8:	b003      	add	sp, #12
   b40fa:	4770      	bx	lr

000b40fc <_Z12displayPrintbbiii>:
{
   return type == 0;
}

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b40fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40fe:	4607      	mov	r7, r0
   b4100:	b089      	sub	sp, #36	; 0x24
   display.clearDisplay();
   b4102:	4853      	ldr	r0, [pc, #332]	; (b4250 <_Z12displayPrintbbiii+0x154>)
{
   b4104:	460e      	mov	r6, r1
   b4106:	4615      	mov	r5, r2
   b4108:	461c      	mov	r4, r3
   display.clearDisplay();
   b410a:	f001 feb3 	bl	b5e74 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b410e:	2f00      	cmp	r7, #0
   b4110:	d077      	beq.n	b4202 <_Z12displayPrintbbiii+0x106>
   {
      switch (id)
   b4112:	3d01      	subs	r5, #1
   b4114:	2d06      	cmp	r5, #6
   b4116:	d86c      	bhi.n	b41f2 <_Z12displayPrintbbiii+0xf6>
   b4118:	e8df f005 	tbb	[pc, r5]
   b411c:	504b4004 	.word	0x504b4004
   b4120:	5a55      	.short	0x5a55
   b4122:	66          	.byte	0x66
   b4123:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4124:	2c00      	cmp	r4, #0
   b4126:	d137      	bne.n	b4198 <_Z12displayPrintbbiii+0x9c>
   b4128:	494a      	ldr	r1, [pc, #296]	; (b4254 <_Z12displayPrintbbiii+0x158>)
         break;

      // Ruido
      case 3:
         // dispositivos[1] = "Sensor de Ruido";
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b412a:	484b      	ldr	r0, [pc, #300]	; (b4258 <_Z12displayPrintbbiii+0x15c>)
            dispositivos[0] = "RGB-On-Off";
            break;
         }

      case 1:
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b412c:	f003 fc85 	bl	b7a3a <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4130:	4949      	ldr	r1, [pc, #292]	; (b4258 <_Z12displayPrintbbiii+0x15c>)
   b4132:	4668      	mov	r0, sp
   b4134:	f003 fc76 	bl	b7a24 <_ZN6StringC1ERKS_>
         Serial.println("ActuadorNoValidoError");
         break;
      }
   }

   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4138:	4b48      	ldr	r3, [pc, #288]	; (b425c <_Z12displayPrintbbiii+0x160>)
   b413a:	4949      	ldr	r1, [pc, #292]	; (b4260 <_Z12displayPrintbbiii+0x164>)
   b413c:	4668      	mov	r0, sp
   b413e:	2e00      	cmp	r6, #0
   b4140:	bf08      	it	eq
   b4142:	4619      	moveq	r1, r3
   b4144:	f003 fcc1 	bl	b7aca <_ZplRK15StringSumHelperPKc>
   b4148:	990e      	ldr	r1, [sp, #56]	; 0x38
   b414a:	4604      	mov	r4, r0
   b414c:	220a      	movs	r2, #10
   b414e:	a804      	add	r0, sp, #16
   b4150:	f003 fc85 	bl	b7a5e <_ZN6StringC1Eih>
   b4154:	a904      	add	r1, sp, #16
   b4156:	4620      	mov	r0, r4
   b4158:	f003 fcab 	bl	b7ab2 <_ZplRK15StringSumHelperRK6String>
   b415c:	2140      	movs	r1, #64	; 0x40
   b415e:	6802      	ldr	r2, [r0, #0]
   b4160:	4840      	ldr	r0, [pc, #256]	; (b4264 <_Z12displayPrintbbiii+0x168>)
   display.println(buf);
   b4162:	4c3b      	ldr	r4, [pc, #236]	; (b4250 <_Z12displayPrintbbiii+0x154>)
   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4164:	f003 f88c 	bl	b7280 <snprintf>
   b4168:	a804      	add	r0, sp, #16
   b416a:	f003 fbed 	bl	b7948 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b416e:	4668      	mov	r0, sp
   b4170:	f003 fbea 	bl	b7948 <_ZN6StringD1Ev>
   display.println(buf);
   b4174:	493b      	ldr	r1, [pc, #236]	; (b4264 <_Z12displayPrintbbiii+0x168>)
   b4176:	4620      	mov	r0, r4
   b4178:	f003 fad5 	bl	b7726 <_ZN5Print7printlnEPKc>
	const char * c_str() const { return buffer; }
   b417c:	4b3a      	ldr	r3, [pc, #232]	; (b4268 <_Z12displayPrintbbiii+0x16c>)

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b417e:	4839      	ldr	r0, [pc, #228]	; (b4264 <_Z12displayPrintbbiii+0x168>)
   b4180:	681a      	ldr	r2, [r3, #0]
   b4182:	2140      	movs	r1, #64	; 0x40
   b4184:	f003 f87c 	bl	b7280 <snprintf>
   display.println(buf);
   b4188:	4936      	ldr	r1, [pc, #216]	; (b4264 <_Z12displayPrintbbiii+0x168>)
   b418a:	4620      	mov	r0, r4
   b418c:	f003 facb 	bl	b7726 <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4190:	2300      	movs	r3, #0
   b4192:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b4194:	b009      	add	sp, #36	; 0x24
   b4196:	bdf0      	pop	{r4, r5, r6, r7, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4198:	4934      	ldr	r1, [pc, #208]	; (b426c <_Z12displayPrintbbiii+0x170>)
   b419a:	e7c6      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b419c:	f003 fd76 	bl	b7c8c <_Z16_fetch_usbserialv>
   b41a0:	4933      	ldr	r1, [pc, #204]	; (b4270 <_Z12displayPrintbbiii+0x174>)
   b41a2:	4622      	mov	r2, r4
   b41a4:	f7ff ff9c 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b41a8:	b90c      	cbnz	r4, b41ae <_Z12displayPrintbbiii+0xb2>
   b41aa:	4932      	ldr	r1, [pc, #200]	; (b4274 <_Z12displayPrintbbiii+0x178>)
   b41ac:	e7bd      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
   b41ae:	4932      	ldr	r1, [pc, #200]	; (b4278 <_Z12displayPrintbbiii+0x17c>)
   b41b0:	e7bb      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b41b2:	b90c      	cbnz	r4, b41b8 <_Z12displayPrintbbiii+0xbc>
   b41b4:	4931      	ldr	r1, [pc, #196]	; (b427c <_Z12displayPrintbbiii+0x180>)
   b41b6:	e7b8      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
   b41b8:	4931      	ldr	r1, [pc, #196]	; (b4280 <_Z12displayPrintbbiii+0x184>)
   b41ba:	e7b6      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b41bc:	b90c      	cbnz	r4, b41c2 <_Z12displayPrintbbiii+0xc6>
   b41be:	4931      	ldr	r1, [pc, #196]	; (b4284 <_Z12displayPrintbbiii+0x188>)
   b41c0:	e7b3      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
   b41c2:	4931      	ldr	r1, [pc, #196]	; (b4288 <_Z12displayPrintbbiii+0x18c>)
   b41c4:	e7b1      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b41c6:	b90c      	cbnz	r4, b41cc <_Z12displayPrintbbiii+0xd0>
   b41c8:	4930      	ldr	r1, [pc, #192]	; (b428c <_Z12displayPrintbbiii+0x190>)
   b41ca:	e7ae      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
   b41cc:	4930      	ldr	r1, [pc, #192]	; (b4290 <_Z12displayPrintbbiii+0x194>)
   b41ce:	e7ac      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         switch (condicion)
   b41d0:	2c01      	cmp	r4, #1
   b41d2:	d005      	beq.n	b41e0 <_Z12displayPrintbbiii+0xe4>
   b41d4:	2c02      	cmp	r4, #2
   b41d6:	d005      	beq.n	b41e4 <_Z12displayPrintbbiii+0xe8>
   b41d8:	2c00      	cmp	r4, #0
   b41da:	d1a9      	bne.n	b4130 <_Z12displayPrintbbiii+0x34>
            dispositivos[1] = "Sensor Temp.Frio";
   b41dc:	492d      	ldr	r1, [pc, #180]	; (b4294 <_Z12displayPrintbbiii+0x198>)
   b41de:	e7a4      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Templado";
   b41e0:	492d      	ldr	r1, [pc, #180]	; (b4298 <_Z12displayPrintbbiii+0x19c>)
   b41e2:	e7a2      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Calor";
   b41e4:	492d      	ldr	r1, [pc, #180]	; (b429c <_Z12displayPrintbbiii+0x1a0>)
   b41e6:	e7a0      	b.n	b412a <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41e8:	b94c      	cbnz	r4, b41fe <_Z12displayPrintbbiii+0x102>
   b41ea:	492d      	ldr	r1, [pc, #180]	; (b42a0 <_Z12displayPrintbbiii+0x1a4>)
   b41ec:	481a      	ldr	r0, [pc, #104]	; (b4258 <_Z12displayPrintbbiii+0x15c>)
   b41ee:	f003 fc24 	bl	b7a3a <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b41f2:	f003 fd4b 	bl	b7c8c <_Z16_fetch_usbserialv>
   b41f6:	492b      	ldr	r1, [pc, #172]	; (b42a4 <_Z12displayPrintbbiii+0x1a8>)
         Serial.println("ActuadorNoValidoError");
   b41f8:	f003 fa95 	bl	b7726 <_ZN5Print7printlnEPKc>
         break;
   b41fc:	e798      	b.n	b4130 <_Z12displayPrintbbiii+0x34>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41fe:	492a      	ldr	r1, [pc, #168]	; (b42a8 <_Z12displayPrintbbiii+0x1ac>)
   b4200:	e7f4      	b.n	b41ec <_Z12displayPrintbbiii+0xf0>
      switch (id)
   b4202:	b12d      	cbz	r5, b4210 <_Z12displayPrintbbiii+0x114>
   b4204:	2d01      	cmp	r5, #1
   b4206:	d01f      	beq.n	b4248 <_Z12displayPrintbbiii+0x14c>
         Serial.println("ActuadorNoValidoError");
   b4208:	f003 fd40 	bl	b7c8c <_Z16_fetch_usbserialv>
   b420c:	4927      	ldr	r1, [pc, #156]	; (b42ac <_Z12displayPrintbbiii+0x1b0>)
   b420e:	e7f3      	b.n	b41f8 <_Z12displayPrintbbiii+0xfc>
         switch (condicion)
   b4210:	2c05      	cmp	r4, #5
   b4212:	d80f      	bhi.n	b4234 <_Z12displayPrintbbiii+0x138>
   b4214:	e8df f004 	tbb	[pc, r4]
   b4218:	12100a03 	.word	0x12100a03
   b421c:	1614      	.short	0x1614
            dispositivos[0] = "RGB-Verde-Rojo";
   b421e:	4924      	ldr	r1, [pc, #144]	; (b42b0 <_Z12displayPrintbbiii+0x1b4>)
   b4220:	4811      	ldr	r0, [pc, #68]	; (b4268 <_Z12displayPrintbbiii+0x16c>)
   b4222:	f003 fc0a 	bl	b7a3a <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4226:	4923      	ldr	r1, [pc, #140]	; (b42b4 <_Z12displayPrintbbiii+0x1b8>)
   b4228:	480f      	ldr	r0, [pc, #60]	; (b4268 <_Z12displayPrintbbiii+0x16c>)
   b422a:	e77f      	b.n	b412c <_Z12displayPrintbbiii+0x30>
            dispositivos[0] = "RGB-Amarillo-Morado";
   b422c:	4922      	ldr	r1, [pc, #136]	; (b42b8 <_Z12displayPrintbbiii+0x1bc>)
            dispositivos[0] = "RGB-Azul-Naranja";
   b422e:	480e      	ldr	r0, [pc, #56]	; (b4268 <_Z12displayPrintbbiii+0x16c>)
   b4230:	f003 fc03 	bl	b7a3a <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4234:	4921      	ldr	r1, [pc, #132]	; (b42bc <_Z12displayPrintbbiii+0x1c0>)
   b4236:	e7f7      	b.n	b4228 <_Z12displayPrintbbiii+0x12c>
            dispositivos[0] = "RGB-Azul-Naranja";
   b4238:	4921      	ldr	r1, [pc, #132]	; (b42c0 <_Z12displayPrintbbiii+0x1c4>)
   b423a:	e7f8      	b.n	b422e <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-Blink";
   b423c:	4921      	ldr	r1, [pc, #132]	; (b42c4 <_Z12displayPrintbbiii+0x1c8>)
   b423e:	e7f6      	b.n	b422e <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-RainBow";
   b4240:	4921      	ldr	r1, [pc, #132]	; (b42c8 <_Z12displayPrintbbiii+0x1cc>)
   b4242:	e7f4      	b.n	b422e <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-On-Off";
   b4244:	4921      	ldr	r1, [pc, #132]	; (b42cc <_Z12displayPrintbbiii+0x1d0>)
   b4246:	e7f2      	b.n	b422e <_Z12displayPrintbbiii+0x132>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4248:	2c00      	cmp	r4, #0
   b424a:	d0ec      	beq.n	b4226 <_Z12displayPrintbbiii+0x12a>
   b424c:	e7f2      	b.n	b4234 <_Z12displayPrintbbiii+0x138>
   b424e:	bf00      	nop
   b4250:	2003e620 	.word	0x2003e620
   b4254:	000b8757 	.word	0x000b8757
   b4258:	2003e680 	.word	0x2003e680
   b425c:	000b8754 	.word	0x000b8754
   b4260:	000b8751 	.word	0x000b8751
   b4264:	2003e5e0 	.word	0x2003e5e0
   b4268:	2003e670 	.word	0x2003e670
   b426c:	000b876d 	.word	0x000b876d
   b4270:	000b8784 	.word	0x000b8784
   b4274:	000b879b 	.word	0x000b879b
   b4278:	000b87a9 	.word	0x000b87a9
   b427c:	000b87b7 	.word	0x000b87b7
   b4280:	000b87c7 	.word	0x000b87c7
   b4284:	000b87d7 	.word	0x000b87d7
   b4288:	000b87e7 	.word	0x000b87e7
   b428c:	000b87f7 	.word	0x000b87f7
   b4290:	000b880a 	.word	0x000b880a
   b4294:	000b881d 	.word	0x000b881d
   b4298:	000b882e 	.word	0x000b882e
   b429c:	000b8843 	.word	0x000b8843
   b42a0:	000b8855 	.word	0x000b8855
   b42a4:	000b8883 	.word	0x000b8883
   b42a8:	000b886c 	.word	0x000b886c
   b42ac:	000b890b 	.word	0x000b890b
   b42b0:	000b8897 	.word	0x000b8897
   b42b4:	000b88ec 	.word	0x000b88ec
   b42b8:	000b88a6 	.word	0x000b88a6
   b42bc:	000b88fc 	.word	0x000b88fc
   b42c0:	000b88ba 	.word	0x000b88ba
   b42c4:	000b88cb 	.word	0x000b88cb
   b42c8:	000b88d5 	.word	0x000b88d5
   b42cc:	000b88e1 	.word	0x000b88e1

000b42d0 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b42d0:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b42d2:	7803      	ldrb	r3, [r0, #0]
   b42d4:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b42d6:	bf0c      	ite	eq
   b42d8:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b42da:	2200      	movne	r2, #0
   int i = 0;
   b42dc:	4613      	mov	r3, r2
   b42de:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b42e0:	240a      	movs	r4, #10
      i++;
   b42e2:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42e4:	f813 1b01 	ldrb.w	r1, [r3], #1
   b42e8:	3930      	subs	r1, #48	; 0x30
   b42ea:	b2cd      	uxtb	r5, r1
   b42ec:	2d09      	cmp	r5, #9
   b42ee:	d802      	bhi.n	b42f6 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b42f0:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42f4:	e7f6      	b.n	b42e4 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b42f6:	b102      	cbz	r2, b42fa <_Z4atoiPc+0x2a>
      num = -1 * num;
   b42f8:	4240      	negs	r0, r0
   return num;
}
   b42fa:	bd30      	pop	{r4, r5, pc}

000b42fc <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b42fc:	b570      	push	{r4, r5, r6, lr}
   b42fe:	4614      	mov	r4, r2
   b4300:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b4302:	f004 f94f 	bl	b85a4 <strtok>
   int j = 0;
   b4306:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4308:	b140      	cbz	r0, b431c <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b430a:	f7ff ffe1 	bl	b42d0 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b430e:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4310:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4314:	2000      	movs	r0, #0
   b4316:	f004 f945 	bl	b85a4 <strtok>
   while (ptr != NULL)
   b431a:	e7f5      	b.n	b4308 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b431c:	6823      	ldr	r3, [r4, #0]
   b431e:	b913      	cbnz	r3, b4326 <_Z5splitPcS_Pi+0x2a>
      haveSensor = true;
   b4320:	4b01      	ldr	r3, [pc, #4]	; (b4328 <_Z5splitPcS_Pi+0x2c>)
   b4322:	2201      	movs	r2, #1
   b4324:	701a      	strb	r2, [r3, #0]
}
   b4326:	bd70      	pop	{r4, r5, r6, pc}
   b4328:	2003e690 	.word	0x2003e690

000b432c <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b432c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b432e:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4332:	f10d 0307 	add.w	r3, sp, #7
   b4336:	460a      	mov	r2, r1
   b4338:	4601      	mov	r1, r0
   b433a:	480d      	ldr	r0, [pc, #52]	; (b4370 <_Z17readDataFromBlockhPhh+0x44>)
   b433c:	4d0d      	ldr	r5, [pc, #52]	; (b4374 <_Z17readDataFromBlockhPhh+0x48>)
   b433e:	f002 fbb7 	bl	b6ab0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b4342:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4344:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4346:	d010      	beq.n	b436a <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4348:	f003 fca0 	bl	b7c8c <_Z16_fetch_usbserialv>
   b434c:	490a      	ldr	r1, [pc, #40]	; (b4378 <_Z17readDataFromBlockhPhh+0x4c>)
   b434e:	f003 f9d7 	bl	b7700 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b4352:	f003 fc9b 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4356:	7829      	ldrb	r1, [r5, #0]
   b4358:	4604      	mov	r4, r0
   b435a:	4805      	ldr	r0, [pc, #20]	; (b4370 <_Z17readDataFromBlockhPhh+0x44>)
   b435c:	f002 f918 	bl	b6590 <_ZN7MFRC52217GetStatusCodeNameEh>
   b4360:	4601      	mov	r1, r0
   b4362:	4620      	mov	r0, r4
   b4364:	f003 f9df 	bl	b7726 <_ZN5Print7printlnEPKc>
   b4368:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b436a:	b003      	add	sp, #12
   b436c:	bd30      	pop	{r4, r5, pc}
   b436e:	bf00      	nop
   b4370:	2003e6a0 	.word	0x2003e6a0
   b4374:	2003e6c0 	.word	0x2003e6c0
   b4378:	000b8921 	.word	0x000b8921

000b437c <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b437c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b437e:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4380:	4d1e      	ldr	r5, [pc, #120]	; (b43fc <_Z8getTagIDPi+0x80>)
   b4382:	4a1f      	ldr	r2, [pc, #124]	; (b4400 <_Z8getTagIDPi+0x84>)
   b4384:	9500      	str	r5, [sp, #0]
   b4386:	4b1f      	ldr	r3, [pc, #124]	; (b4404 <_Z8getTagIDPi+0x88>)
   b4388:	7812      	ldrb	r2, [r2, #0]
   b438a:	4f1f      	ldr	r7, [pc, #124]	; (b4408 <_Z8getTagIDPi+0x8c>)
{
   b438c:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b438e:	2160      	movs	r1, #96	; 0x60
   b4390:	4628      	mov	r0, r5
   b4392:	f002 fbae 	bl	b6af2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b4396:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4398:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b439a:	d00f      	beq.n	b43bc <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b439c:	f003 fc76 	bl	b7c8c <_Z16_fetch_usbserialv>
   b43a0:	491a      	ldr	r1, [pc, #104]	; (b440c <_Z8getTagIDPi+0x90>)
   b43a2:	f003 f9ad 	bl	b7700 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b43a6:	f003 fc71 	bl	b7c8c <_Z16_fetch_usbserialv>
   b43aa:	7839      	ldrb	r1, [r7, #0]
   b43ac:	4604      	mov	r4, r0
   b43ae:	4628      	mov	r0, r5
   b43b0:	f002 f8ee 	bl	b6590 <_ZN7MFRC52217GetStatusCodeNameEh>
   b43b4:	4601      	mov	r1, r0
   b43b6:	4620      	mov	r0, r4
   b43b8:	f003 f9b5 	bl	b7726 <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b43bc:	4b14      	ldr	r3, [pc, #80]	; (b4410 <_Z8getTagIDPi+0x94>)
   b43be:	2212      	movs	r2, #18
   b43c0:	7818      	ldrb	r0, [r3, #0]
   b43c2:	a907      	add	r1, sp, #28
   b43c4:	f7ff ffb2 	bl	b432c <_Z17readDataFromBlockhPhh>
   b43c8:	b1b0      	cbz	r0, b43f8 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b43ca:	ac07      	add	r4, sp, #28
   b43cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b43ce:	ad03      	add	r5, sp, #12
   b43d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b43d2:	6823      	ldr	r3, [r4, #0]
   b43d4:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b43d6:	f003 fc59 	bl	b7c8c <_Z16_fetch_usbserialv>
   b43da:	490e      	ldr	r1, [pc, #56]	; (b4414 <_Z8getTagIDPi+0x98>)
   b43dc:	aa03      	add	r2, sp, #12
   b43de:	f7ff fe7f 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b43e2:	490d      	ldr	r1, [pc, #52]	; (b4418 <_Z8getTagIDPi+0x9c>)
   b43e4:	4632      	mov	r2, r6
   b43e6:	a803      	add	r0, sp, #12
   b43e8:	f7ff ff88 	bl	b42fc <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b43ec:	4803      	ldr	r0, [pc, #12]	; (b43fc <_Z8getTagIDPi+0x80>)
   b43ee:	f002 fb3a 	bl	b6a66 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b43f2:	4802      	ldr	r0, [pc, #8]	; (b43fc <_Z8getTagIDPi+0x80>)
   b43f4:	f002 f997 	bl	b6726 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b43f8:	b00d      	add	sp, #52	; 0x34
   b43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43fc:	2003e6a0 	.word	0x2003e6a0
   b4400:	2003df88 	.word	0x2003df88
   b4404:	2003e691 	.word	0x2003e691
   b4408:	2003e6c0 	.word	0x2003e6c0
   b440c:	000b8938 	.word	0x000b8938
   b4410:	2003df64 	.word	0x2003df64
   b4414:	000b8954 	.word	0x000b8954
   b4418:	2003df65 	.word	0x2003df65

000b441c <_Z13asignarPuertoi>:

int asignarPuerto(int id)
{
   b441c:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);
   if (esAnalogico(id))
   b441e:	b940      	cbnz	r0, b4432 <_Z13asignarPuertoi+0x16>
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b4420:	4b26      	ldr	r3, [pc, #152]	; (b44bc <_Z13asignarPuertoi+0xa0>)
   else
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b4422:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b4424:	2c05      	cmp	r4, #5
   b4426:	d840      	bhi.n	b44aa <_Z13asignarPuertoi+0x8e>
   b4428:	e8df f004 	tbb	[pc, r4]
   b442c:	261a0f05 	.word	0x261a0f05
   b4430:	342d      	.short	0x342d
      option = puertoDigital;
   b4432:	4b23      	ldr	r3, [pc, #140]	; (b44c0 <_Z13asignarPuertoi+0xa4>)
   b4434:	e7f5      	b.n	b4422 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4436:	f003 fc29 	bl	b7c8c <_Z16_fetch_usbserialv>
   b443a:	4922      	ldr	r1, [pc, #136]	; (b44c4 <_Z13asignarPuertoi+0xa8>)
   b443c:	f003 f960 	bl	b7700 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4440:	4a1e      	ldr	r2, [pc, #120]	; (b44bc <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
   b4442:	6813      	ldr	r3, [r2, #0]
   b4444:	3301      	adds	r3, #1
   b4446:	6013      	str	r3, [r2, #0]
      return 4;
   b4448:	e014      	b.n	b4474 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b444a:	f003 fc1f 	bl	b7c8c <_Z16_fetch_usbserialv>
   b444e:	491e      	ldr	r1, [pc, #120]	; (b44c8 <_Z13asignarPuertoi+0xac>)
   b4450:	f003 f956 	bl	b7700 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4454:	4a19      	ldr	r2, [pc, #100]	; (b44bc <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b4456:	6813      	ldr	r3, [r2, #0]
   b4458:	3301      	adds	r3, #1
   b445a:	6013      	str	r3, [r2, #0]
      return 2;
   b445c:	2402      	movs	r4, #2
   b445e:	e009      	b.n	b4474 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b4460:	f003 fc14 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4464:	4919      	ldr	r1, [pc, #100]	; (b44cc <_Z13asignarPuertoi+0xb0>)
   b4466:	f003 f94b 	bl	b7700 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b446a:	4b14      	ldr	r3, [pc, #80]	; (b44bc <_Z13asignarPuertoi+0xa0>)
   b446c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4470:	601a      	str	r2, [r3, #0]
      return 4;
   b4472:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b4474:	4620      	mov	r0, r4
   b4476:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4478:	f003 fc08 	bl	b7c8c <_Z16_fetch_usbserialv>
   b447c:	4914      	ldr	r1, [pc, #80]	; (b44d0 <_Z13asignarPuertoi+0xb4>)
   b447e:	f003 f93f 	bl	b7700 <_ZN5Print5printEPKc>
      puertoDigital++;
   b4482:	4a0f      	ldr	r2, [pc, #60]	; (b44c0 <_Z13asignarPuertoi+0xa4>)
   b4484:	e7e7      	b.n	b4456 <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b4486:	f003 fc01 	bl	b7c8c <_Z16_fetch_usbserialv>
   b448a:	4912      	ldr	r1, [pc, #72]	; (b44d4 <_Z13asignarPuertoi+0xb8>)
   b448c:	f003 f938 	bl	b7700 <_ZN5Print5printEPKc>
      puertoDigital++;
   b4490:	4a0b      	ldr	r2, [pc, #44]	; (b44c0 <_Z13asignarPuertoi+0xa4>)
   b4492:	e7d6      	b.n	b4442 <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b4494:	f003 fbfa 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4498:	490f      	ldr	r1, [pc, #60]	; (b44d8 <_Z13asignarPuertoi+0xbc>)
   b449a:	f003 f931 	bl	b7700 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b449e:	4b08      	ldr	r3, [pc, #32]	; (b44c0 <_Z13asignarPuertoi+0xa4>)
   b44a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b44a4:	601a      	str	r2, [r3, #0]
      return 6;
   b44a6:	2406      	movs	r4, #6
   b44a8:	e7e4      	b.n	b4474 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b44aa:	f003 fbef 	bl	b7c8c <_Z16_fetch_usbserialv>
   b44ae:	490b      	ldr	r1, [pc, #44]	; (b44dc <_Z13asignarPuertoi+0xc0>)
   b44b0:	f003 f926 	bl	b7700 <_ZN5Print5printEPKc>
      return -1;
   b44b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b44b8:	e7dc      	b.n	b4474 <_Z13asignarPuertoi+0x58>
   b44ba:	bf00      	nop
   b44bc:	2003e6bc 	.word	0x2003e6bc
   b44c0:	2003df6c 	.word	0x2003df6c
   b44c4:	000b8960 	.word	0x000b8960
   b44c8:	000b8977 	.word	0x000b8977
   b44cc:	000b898e 	.word	0x000b898e
   b44d0:	000b89a5 	.word	0x000b89a5
   b44d4:	000b89bc 	.word	0x000b89bc
   b44d8:	000b89d3 	.word	0x000b89d3
   b44dc:	000b89ea 	.word	0x000b89ea

000b44e0 <_Z9ledApagarv>:

bool init = true;
ChainableLED ledObject = ChainableLED(0, 0, 5);

void ledApagar()
{
   b44e0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b44e2:	2300      	movs	r3, #0
   b44e4:	4804      	ldr	r0, [pc, #16]	; (b44f8 <_Z9ledApagarv+0x18>)
   b44e6:	9300      	str	r3, [sp, #0]
   b44e8:	461a      	mov	r2, r3
   b44ea:	4619      	mov	r1, r3
   b44ec:	f001 ffd6 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44f0:	b003      	add	sp, #12
   b44f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b44f6:	bf00      	nop
   b44f8:	2003e698 	.word	0x2003e698

000b44fc <_Z7ledRojov>:
void ledRojo()
{
   b44fc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 0, 0);
   b44fe:	2300      	movs	r3, #0
   b4500:	4804      	ldr	r0, [pc, #16]	; (b4514 <_Z7ledRojov+0x18>)
   b4502:	9300      	str	r3, [sp, #0]
   b4504:	22ff      	movs	r2, #255	; 0xff
   b4506:	4619      	mov	r1, r3
   b4508:	f001 ffc8 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b450c:	b003      	add	sp, #12
   b450e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4512:	bf00      	nop
   b4514:	2003e698 	.word	0x2003e698

000b4518 <_Z8ledVerdev>:
void ledVerde()
{
   b4518:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b451a:	230a      	movs	r3, #10
   b451c:	2200      	movs	r2, #0
   b451e:	9300      	str	r3, [sp, #0]
   b4520:	4803      	ldr	r0, [pc, #12]	; (b4530 <_Z8ledVerdev+0x18>)
   b4522:	23ff      	movs	r3, #255	; 0xff
   b4524:	4611      	mov	r1, r2
   b4526:	f001 ffb9 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b452a:	b003      	add	sp, #12
   b452c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4530:	2003e698 	.word	0x2003e698

000b4534 <_Z7ledAzulv>:
void ledAzul()
{
   b4534:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b4536:	23ff      	movs	r3, #255	; 0xff
   b4538:	9300      	str	r3, [sp, #0]
   b453a:	2300      	movs	r3, #0
   b453c:	4803      	ldr	r0, [pc, #12]	; (b454c <_Z7ledAzulv+0x18>)
   b453e:	461a      	mov	r2, r3
   b4540:	4619      	mov	r1, r3
   b4542:	f001 ffab 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4546:	b003      	add	sp, #12
   b4548:	f85d fb04 	ldr.w	pc, [sp], #4
   b454c:	2003e698 	.word	0x2003e698

000b4550 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4550:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4552:	2100      	movs	r1, #0
   b4554:	4804      	ldr	r0, [pc, #16]	; (b4568 <_Z11ledAmarillov+0x18>)
   b4556:	9100      	str	r1, [sp, #0]
   b4558:	23e9      	movs	r3, #233	; 0xe9
   b455a:	22ff      	movs	r2, #255	; 0xff
   b455c:	f001 ff9e 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4560:	b003      	add	sp, #12
   b4562:	f85d fb04 	ldr.w	pc, [sp], #4
   b4566:	bf00      	nop
   b4568:	2003e698 	.word	0x2003e698

000b456c <_Z9ledMoradov>:
void ledMorado()
{
   b456c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b456e:	2375      	movs	r3, #117	; 0x75
   b4570:	9300      	str	r3, [sp, #0]
   b4572:	4804      	ldr	r0, [pc, #16]	; (b4584 <_Z9ledMoradov+0x18>)
   b4574:	2346      	movs	r3, #70	; 0x46
   b4576:	226c      	movs	r2, #108	; 0x6c
   b4578:	2100      	movs	r1, #0
   b457a:	f001 ff8f 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b457e:	b003      	add	sp, #12
   b4580:	f85d fb04 	ldr.w	pc, [sp], #4
   b4584:	2003e698 	.word	0x2003e698

000b4588 <_Z10ledNaranjav>:
void ledNaranja()
{
   b4588:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b458a:	2100      	movs	r1, #0
   b458c:	4804      	ldr	r0, [pc, #16]	; (b45a0 <_Z10ledNaranjav+0x18>)
   b458e:	9100      	str	r1, [sp, #0]
   b4590:	2380      	movs	r3, #128	; 0x80
   b4592:	22ff      	movs	r2, #255	; 0xff
   b4594:	f001 ff82 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4598:	b003      	add	sp, #12
   b459a:	f85d fb04 	ldr.w	pc, [sp], #4
   b459e:	bf00      	nop
   b45a0:	2003e698 	.word	0x2003e698

000b45a4 <_Z9ledBlancov>:
void ledBlanco()
{
   b45a4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b45a6:	23ff      	movs	r3, #255	; 0xff
   b45a8:	4804      	ldr	r0, [pc, #16]	; (b45bc <_Z9ledBlancov+0x18>)
   b45aa:	9300      	str	r3, [sp, #0]
   b45ac:	461a      	mov	r2, r3
   b45ae:	2100      	movs	r1, #0
   b45b0:	f001 ff74 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45b4:	b003      	add	sp, #12
   b45b6:	f85d fb04 	ldr.w	pc, [sp], #4
   b45ba:	bf00      	nop
   b45bc:	2003e698 	.word	0x2003e698

000b45c0 <_Z8ledBlinkv>:

void ledBlink()
{
   b45c0:	b508      	push	{r3, lr}
    ledBlanco();
   b45c2:	f7ff ffef 	bl	b45a4 <_Z9ledBlancov>
    delay(400);
   b45c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b45ca:	f002 fe81 	bl	b72d0 <delay>
    ledApagar();
   b45ce:	f7ff ff87 	bl	b44e0 <_Z9ledApagarv>
    delay(200);
}
   b45d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b45d6:	20c8      	movs	r0, #200	; 0xc8
   b45d8:	f002 be7a 	b.w	b72d0 <delay>

000b45dc <_Z11ledArcoirisv>:

void ledArcoiris()
{
   b45dc:	b508      	push	{r3, lr}

    ledRojo();
   b45de:	f7ff ff8d 	bl	b44fc <_Z7ledRojov>
    delay(200);
   b45e2:	20c8      	movs	r0, #200	; 0xc8
   b45e4:	f002 fe74 	bl	b72d0 <delay>
    ledNaranja();
   b45e8:	f7ff ffce 	bl	b4588 <_Z10ledNaranjav>
    delay(200);
   b45ec:	20c8      	movs	r0, #200	; 0xc8
   b45ee:	f002 fe6f 	bl	b72d0 <delay>
    ledAmarillo();
   b45f2:	f7ff ffad 	bl	b4550 <_Z11ledAmarillov>
    delay(200);
   b45f6:	20c8      	movs	r0, #200	; 0xc8
   b45f8:	f002 fe6a 	bl	b72d0 <delay>
    ledVerde();
   b45fc:	f7ff ff8c 	bl	b4518 <_Z8ledVerdev>
    delay(200);
   b4600:	20c8      	movs	r0, #200	; 0xc8
   b4602:	f002 fe65 	bl	b72d0 <delay>
    ledMorado();
   b4606:	f7ff ffb1 	bl	b456c <_Z9ledMoradov>
    delay(200);
   b460a:	20c8      	movs	r0, #200	; 0xc8
   b460c:	f002 fe60 	bl	b72d0 <delay>
    ledAzul();
   b4610:	f7ff ff90 	bl	b4534 <_Z7ledAzulv>
    delay(200);
}
   b4614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4618:	20c8      	movs	r0, #200	; 0xc8
   b461a:	f002 be59 	b.w	b72d0 <delay>

000b461e <_Z8pitidoONi>:

// Acciones del zumbador
void pitidoON(int puerto)
{
   b461e:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4620:	b284      	uxth	r4, r0
   b4622:	4620      	mov	r0, r4
   b4624:	2101      	movs	r1, #1
   b4626:	f003 fccc 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b462a:	4620      	mov	r0, r4
   b462c:	2101      	movs	r1, #1
   b462e:	f003 fcc8 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4632:	1c60      	adds	r0, r4, #1
   b4634:	b280      	uxth	r0, r0
   b4636:	2101      	movs	r1, #1
   b4638:	9001      	str	r0, [sp, #4]
   b463a:	f003 fcc2 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b463e:	9801      	ldr	r0, [sp, #4]
   b4640:	2101      	movs	r1, #1
}
   b4642:	b002      	add	sp, #8
   b4644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b4648:	f003 bcbb 	b.w	b7fc2 <digitalWrite>

000b464c <_Z9pitidoOFFi>:

void pitidoOFF(int puerto)
{
   b464c:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b464e:	b284      	uxth	r4, r0
   b4650:	4620      	mov	r0, r4
   b4652:	2100      	movs	r1, #0
   b4654:	f003 fcb5 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto, LOW);
   b4658:	4620      	mov	r0, r4
   b465a:	2100      	movs	r1, #0
   b465c:	f003 fcb1 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4660:	1c60      	adds	r0, r4, #1
   b4662:	b280      	uxth	r0, r0
   b4664:	2100      	movs	r1, #0
   b4666:	9001      	str	r0, [sp, #4]
   b4668:	f003 fcab 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b466c:	9801      	ldr	r0, [sp, #4]
   b466e:	2100      	movs	r1, #0
}
   b4670:	b002      	add	sp, #8
   b4672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4676:	f003 bca4 	b.w	b7fc2 <digitalWrite>

000b467a <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b467a:	b510      	push	{r4, lr}
   b467c:	4604      	mov	r4, r0
    pitidoON(puerto);
   b467e:	f7ff ffce 	bl	b461e <_Z8pitidoONi>
    delay(100);
   b4682:	2064      	movs	r0, #100	; 0x64
   b4684:	f002 fe24 	bl	b72d0 <delay>
    pitidoOFF(puerto);
   b4688:	4620      	mov	r0, r4
   b468a:	f7ff ffdf 	bl	b464c <_Z9pitidoOFFi>
    delay(100);
}
   b468e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4692:	2064      	movs	r0, #100	; 0x64
   b4694:	f002 be1c 	b.w	b72d0 <delay>

000b4698 <_Z10activarLEDii>:
        pitidoOFF(puerto);
}

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    if (init)
   b469a:	4f28      	ldr	r7, [pc, #160]	; (b473c <_Z10activarLEDii+0xa4>)
   b469c:	783b      	ldrb	r3, [r7, #0]
{
   b469e:	4604      	mov	r4, r0
    if (init)
   b46a0:	b1a3      	cbz	r3, b46cc <_Z10activarLEDii+0x34>
    {
        ledObject = ChainableLED(puerto, puerto + 1, 5);
   b46a2:	b2c9      	uxtb	r1, r1
   b46a4:	1c4a      	adds	r2, r1, #1
   b46a6:	466d      	mov	r5, sp
   b46a8:	2305      	movs	r3, #5
   b46aa:	b2d2      	uxtb	r2, r2
   b46ac:	4628      	mov	r0, r5
   b46ae:	f001 fe8b 	bl	b63c8 <_ZN12ChainableLEDC1Ehhh>
   b46b2:	e895 0003 	ldmia.w	r5, {r0, r1}
   b46b6:	4e22      	ldr	r6, [pc, #136]	; (b4740 <_Z10activarLEDii+0xa8>)
   b46b8:	e886 0003 	stmia.w	r6, {r0, r1}
   b46bc:	4628      	mov	r0, r5
   b46be:	f001 fe90 	bl	b63e2 <_ZN12ChainableLEDD1Ev>
        ledObject.init();
   b46c2:	4630      	mov	r0, r6
   b46c4:	f001 ff32 	bl	b652c <_ZN12ChainableLED4initEv>
        init = false;
   b46c8:	2300      	movs	r3, #0
   b46ca:	703b      	strb	r3, [r7, #0]
    }

    switch (opcion)
   b46cc:	2c07      	cmp	r4, #7
   b46ce:	d82d      	bhi.n	b472c <_Z10activarLEDii+0x94>
   b46d0:	e8df f004 	tbb	[pc, r4]
   b46d4:	130e0904 	.word	0x130e0904
   b46d8:	27221d18 	.word	0x27221d18

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b46dc:	b003      	add	sp, #12
   b46de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerde();
   b46e2:	f7ff bf19 	b.w	b4518 <_Z8ledVerdev>
}
   b46e6:	b003      	add	sp, #12
   b46e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledRojo();
   b46ec:	f7ff bf06 	b.w	b44fc <_Z7ledRojov>
}
   b46f0:	b003      	add	sp, #12
   b46f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAmarillo();
   b46f6:	f7ff bf2b 	b.w	b4550 <_Z11ledAmarillov>
}
   b46fa:	b003      	add	sp, #12
   b46fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMorado();
   b4700:	f7ff bf34 	b.w	b456c <_Z9ledMoradov>
}
   b4704:	b003      	add	sp, #12
   b4706:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzul();
   b470a:	f7ff bf13 	b.w	b4534 <_Z7ledAzulv>
}
   b470e:	b003      	add	sp, #12
   b4710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledNaranja();
   b4714:	f7ff bf38 	b.w	b4588 <_Z10ledNaranjav>
}
   b4718:	b003      	add	sp, #12
   b471a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink();
   b471e:	f7ff bf4f 	b.w	b45c0 <_Z8ledBlinkv>
}
   b4722:	b003      	add	sp, #12
   b4724:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris();
   b4728:	f7ff bf58 	b.w	b45dc <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b472c:	f003 faae 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4730:	4904      	ldr	r1, [pc, #16]	; (b4744 <_Z10activarLEDii+0xac>)
}
   b4732:	b003      	add	sp, #12
   b4734:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b4738:	f002 bff5 	b.w	b7726 <_ZN5Print7printlnEPKc>
   b473c:	2003df67 	.word	0x2003df67
   b4740:	2003e698 	.word	0x2003e698
   b4744:	000b8a12 	.word	0x000b8a12

000b4748 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b4748:	b538      	push	{r3, r4, r5, lr}
   b474a:	460c      	mov	r4, r1
   b474c:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b474e:	2101      	movs	r1, #1
   b4750:	b2a0      	uxth	r0, r4
   b4752:	f003 fc25 	bl	b7fa0 <pinMode>

    switch (opcion)
   b4756:	b145      	cbz	r5, b476a <_Z15activarZumbadorii+0x22>
   b4758:	2d01      	cmp	r5, #1
   b475a:	d00b      	beq.n	b4774 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b475c:	f003 fa96 	bl	b7c8c <_Z16_fetch_usbserialv>
        break;
    }
}
   b4760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4764:	4906      	ldr	r1, [pc, #24]	; (b4780 <_Z15activarZumbadorii+0x38>)
   b4766:	f002 bfde 	b.w	b7726 <_ZN5Print7printlnEPKc>
        pitidoON(puerto);
   b476a:	4620      	mov	r0, r4
}
   b476c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON(puerto);
   b4770:	f7ff bf55 	b.w	b461e <_Z8pitidoONi>
        pitidoBlink(puerto);
   b4774:	4620      	mov	r0, r4
}
   b4776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink(puerto);
   b477a:	f7ff bf7e 	b.w	b467a <_Z11pitidoBlinki>
   b477e:	bf00      	nop
   b4780:	000b8a21 	.word	0x000b8a21

000b4784 <_Z14apagarActuadori>:

void apagarActuador(int puerto)
{
   b4784:	b507      	push	{r0, r1, r2, lr}
    digitalWrite(puerto, 0);
   b4786:	b280      	uxth	r0, r0
   b4788:	2100      	movs	r1, #0
   b478a:	9001      	str	r0, [sp, #4]
   b478c:	f003 fc19 	bl	b7fc2 <digitalWrite>
    digitalWrite(puerto, LOW);
   b4790:	9801      	ldr	r0, [sp, #4]
   b4792:	2100      	movs	r1, #0
}
   b4794:	b003      	add	sp, #12
   b4796:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(puerto, LOW);
   b479a:	f003 bc12 	b.w	b7fc2 <digitalWrite>

000b479e <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b479e:	4603      	mov	r3, r0
    if (id < 2)
   b47a0:	2b01      	cmp	r3, #1
{
   b47a2:	4608      	mov	r0, r1
   b47a4:	4611      	mov	r1, r2
    if (id < 2)
   b47a6:	dc04      	bgt.n	b47b2 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b47a8:	b90b      	cbnz	r3, b47ae <_Z15actuadorHandleriii+0x10>
   b47aa:	f7ff bf75 	b.w	b4698 <_Z10activarLEDii>
   b47ae:	f7ff bfcb 	b.w	b4748 <_Z15activarZumbadorii>
    else
        apagarActuador(puerto);
   b47b2:	4610      	mov	r0, r2
   b47b4:	f7ff bfe6 	b.w	b4784 <_Z14apagarActuadori>

000b47b8 <_Z11noDistanciai>:

// Distance
#include "Grove-Ultrasonic-Ranger.h"

bool noDistancia(int puerto)
{
   b47b8:	b513      	push	{r0, r1, r4, lr}
   b47ba:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b47bc:	a801      	add	r0, sp, #4
   b47be:	f001 fddd 	bl	b637c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b47c2:	a801      	add	r0, sp, #4
   b47c4:	f001 fddc 	bl	b6380 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b47c8:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b47ca:	f003 fa5f 	bl	b7c8c <_Z16_fetch_usbserialv>
   b47ce:	4905      	ldr	r1, [pc, #20]	; (b47e4 <_Z11noDistanciai+0x2c>)
   b47d0:	4622      	mov	r2, r4
   b47d2:	f7ff fc85 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b47d6:	2c09      	cmp	r4, #9
   b47d8:	bf8c      	ite	hi
   b47da:	2000      	movhi	r0, #0
   b47dc:	2001      	movls	r0, #1
   b47de:	b002      	add	sp, #8
   b47e0:	bd10      	pop	{r4, pc}
   b47e2:	bf00      	nop
   b47e4:	000b8a31 	.word	0x000b8a31

000b47e8 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b47e8:	b513      	push	{r0, r1, r4, lr}
   b47ea:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b47ec:	a801      	add	r0, sp, #4
   b47ee:	f001 fdc5 	bl	b637c <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b47f2:	a801      	add	r0, sp, #4
   b47f4:	f001 fdc4 	bl	b6380 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b47f8:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b47fa:	f003 fa47 	bl	b7c8c <_Z16_fetch_usbserialv>
   b47fe:	4905      	ldr	r1, [pc, #20]	; (b4814 <_Z11siDistanciai+0x2c>)
   b4800:	4622      	mov	r2, r4
   b4802:	f7ff fc6d 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (range > 10)
        return true;
    else
        return false;
}
   b4806:	2c0a      	cmp	r4, #10
   b4808:	bfd4      	ite	le
   b480a:	2000      	movle	r0, #0
   b480c:	2001      	movgt	r0, #1
   b480e:	b002      	add	sp, #8
   b4810:	bd10      	pop	{r4, pc}
   b4812:	bf00      	nop
   b4814:	000b8a31 	.word	0x000b8a31

000b4818 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4818:	2802      	cmp	r0, #2
{
   b481a:	b508      	push	{r3, lr}
    switch (puerto)
   b481c:	d00b      	beq.n	b4836 <_Z5siLuzi+0x1e>
   b481e:	2804      	cmp	r0, #4
   b4820:	d00b      	beq.n	b483a <_Z5siLuzi+0x22>
   b4822:	b960      	cbnz	r0, b483e <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4824:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4826:	f003 fbf8 	bl	b801a <analogRead>
   b482a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b482e:	bfb4      	ite	lt
   b4830:	2000      	movlt	r0, #0
   b4832:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4834:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4836:	2011      	movs	r0, #17
   b4838:	e7f5      	b.n	b4826 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b483a:	200f      	movs	r0, #15
   b483c:	e7f3      	b.n	b4826 <_Z5siLuzi+0xe>
    switch (puerto)
   b483e:	2000      	movs	r0, #0
   b4840:	e7f8      	b.n	b4834 <_Z5siLuzi+0x1c>

000b4842 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4842:	2802      	cmp	r0, #2
{
   b4844:	b508      	push	{r3, lr}
    switch (puerto)
   b4846:	d00b      	beq.n	b4860 <_Z5noLuzi+0x1e>
   b4848:	2804      	cmp	r0, #4
   b484a:	d00b      	beq.n	b4864 <_Z5noLuzi+0x22>
   b484c:	b960      	cbnz	r0, b4868 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b484e:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4850:	f003 fbe3 	bl	b801a <analogRead>
   b4854:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4858:	bfcc      	ite	gt
   b485a:	2000      	movgt	r0, #0
   b485c:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b485e:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4860:	2011      	movs	r0, #17
   b4862:	e7f5      	b.n	b4850 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4864:	200f      	movs	r0, #15
   b4866:	e7f3      	b.n	b4850 <_Z5noLuzi+0xe>
    switch (puerto)
   b4868:	2000      	movs	r0, #0
   b486a:	e7f8      	b.n	b485e <_Z5noLuzi+0x1c>

000b486c <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b486c:	b508      	push	{r3, lr}
    if (analogRead(puerto) >= 700)
   b486e:	b280      	uxth	r0, r0
   b4870:	f003 fbd3 	bl	b801a <analogRead>
        return true;
    return false;
}
   b4874:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4878:	bfb4      	ite	lt
   b487a:	2000      	movlt	r0, #0
   b487c:	2001      	movge	r0, #1
   b487e:	bd08      	pop	{r3, pc}

000b4880 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4880:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4882:	b280      	uxth	r0, r0
   b4884:	f003 fbc9 	bl	b801a <analogRead>
        return true;
    return false;
}
   b4888:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b488c:	bfcc      	ite	gt
   b488e:	2000      	movgt	r0, #0
   b4890:	2001      	movle	r0, #1
   b4892:	bd08      	pop	{r3, pc}

000b4894 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4894:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4896:	b280      	uxth	r0, r0
   b4898:	2100      	movs	r1, #0
   b489a:	9001      	str	r0, [sp, #4]
   b489c:	f003 fb80 	bl	b7fa0 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b48a0:	9801      	ldr	r0, [sp, #4]
   b48a2:	f003 fba7 	bl	b7ff4 <digitalRead>
        return true;
    return false;
}
   b48a6:	1e43      	subs	r3, r0, #1
   b48a8:	4258      	negs	r0, r3
   b48aa:	4158      	adcs	r0, r3
   b48ac:	b003      	add	sp, #12
   b48ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b48b2 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b48b2:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b48b4:	b280      	uxth	r0, r0
   b48b6:	2100      	movs	r1, #0
   b48b8:	9001      	str	r0, [sp, #4]
   b48ba:	f003 fb71 	bl	b7fa0 <pinMode>
    if (digitalRead(puerto) == LOW)
   b48be:	9801      	ldr	r0, [sp, #4]
   b48c0:	f003 fb98 	bl	b7ff4 <digitalRead>
        return true;
    return false;
}
   b48c4:	fab0 f080 	clz	r0, r0
   b48c8:	0940      	lsrs	r0, r0, #5
   b48ca:	b003      	add	sp, #12
   b48cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b48d0 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
   b48d0:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b48d2:	b280      	uxth	r0, r0
   b48d4:	f003 fba1 	bl	b801a <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b48d8:	ee07 0a90 	vmov	s15, r0
   b48dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b48e0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b48e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b48e8:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4910 <_Z10siRotativoi+0x40>
   b48ec:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b48f0:	eddf 7a08 	vldr	s15, [pc, #32]	; b4914 <_Z10siRotativoi+0x44>
   b48f4:	ee67 7a27 	vmul.f32	s15, s14, s15
   b48f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 680)
   b48fc:	eddf 7a06 	vldr	s15, [pc, #24]	; b4918 <_Z10siRotativoi+0x48>
   b4900:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4908:	bfac      	ite	ge
   b490a:	2001      	movge	r0, #1
   b490c:	2000      	movlt	r0, #0
   b490e:	bd08      	pop	{r3, pc}
   b4910:	447fc000 	.word	0x447fc000
   b4914:	43960000 	.word	0x43960000
   b4918:	442a0000 	.word	0x442a0000

000b491c <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
   b491c:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b491e:	b280      	uxth	r0, r0
   b4920:	f003 fb7b 	bl	b801a <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b4924:	ee07 0a90 	vmov	s15, r0
   b4928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b492c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4930:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4934:	ed9f 6a09 	vldr	s12, [pc, #36]	; b495c <_Z10noRotativoi+0x40>
   b4938:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b493c:	eddf 7a08 	vldr	s15, [pc, #32]	; b4960 <_Z10noRotativoi+0x44>
   b4940:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4944:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b4948:	eddf 7a06 	vldr	s15, [pc, #24]	; b4964 <_Z10noRotativoi+0x48>
   b494c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4954:	bf94      	ite	ls
   b4956:	2001      	movls	r0, #1
   b4958:	2000      	movhi	r0, #0
   b495a:	bd08      	pop	{r3, pc}
   b495c:	447fc000 	.word	0x447fc000
   b4960:	43960000 	.word	0x43960000
   b4964:	442a0000 	.word	0x442a0000

000b4968 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4968:	b530      	push	{r4, r5, lr}
   b496a:	ed2d 8b02 	vpush	{d8}
   b496e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4970:	b2c1      	uxtb	r1, r0
   b4972:	2306      	movs	r3, #6
   b4974:	220b      	movs	r2, #11
   b4976:	a801      	add	r0, sp, #4
   b4978:	f000 fc34 	bl	b51e4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b497c:	a801      	add	r0, sp, #4
   b497e:	f000 fc38 	bl	b51f2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4982:	a801      	add	r0, sp, #4
   b4984:	f000 fcf2 	bl	b536c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4988:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4990:	eeb4 0a40 	vcmp.f32	s0, s0
   b4994:	bf0c      	ite	eq
   b4996:	2401      	moveq	r4, #1
   b4998:	2400      	movne	r4, #0
   b499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b499e:	bf68      	it	vs
   b49a0:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b49a4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b49a8:	2c00      	cmp	r4, #0
   b49aa:	d1ea      	bne.n	b4982 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b49ac:	f003 f96e 	bl	b7c8c <_Z16_fetch_usbserialv>
   b49b0:	4605      	mov	r5, r0
   b49b2:	ee18 0a10 	vmov	r0, s16
   b49b6:	f003 fd2b 	bl	b8410 <__aeabi_f2d>
   b49ba:	4602      	mov	r2, r0
   b49bc:	460b      	mov	r3, r1
   b49be:	4628      	mov	r0, r5
   b49c0:	490a      	ldr	r1, [pc, #40]	; (b49ec <_Z8tempFrioi+0x84>)
   b49c2:	f7ff fb8d 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b49c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b49ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b49ce:	dd08      	ble.n	b49e2 <_Z8tempFrioi+0x7a>
   b49d0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b49d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b49d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b49dc:	bf4c      	ite	mi
   b49de:	2401      	movmi	r4, #1
   b49e0:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b49e2:	4620      	mov	r0, r4
   b49e4:	b007      	add	sp, #28
   b49e6:	ecbd 8b02 	vpop	{d8}
   b49ea:	bd30      	pop	{r4, r5, pc}
   b49ec:	000b8a3f 	.word	0x000b8a3f

000b49f0 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b49f0:	b510      	push	{r4, lr}
   b49f2:	ed2d 8b02 	vpush	{d8}
   b49f6:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b49f8:	b2c1      	uxtb	r1, r0
   b49fa:	2306      	movs	r3, #6
   b49fc:	220b      	movs	r2, #11
   b49fe:	a801      	add	r0, sp, #4
   b4a00:	f000 fbf0 	bl	b51e4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4a04:	a801      	add	r0, sp, #4
   b4a06:	f000 fbf4 	bl	b51f2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4a0a:	a801      	add	r0, sp, #4
   b4a0c:	f000 fcae 	bl	b536c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4a10:	eeb4 0a40 	vcmp.f32	s0, s0
   b4a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4a18:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4a1c:	d6f5      	bvs.n	b4a0a <_Z12tempTempladoi+0x1a>
   b4a1e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a26:	d0f0      	beq.n	b4a0a <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4a28:	f003 f930 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4a2c:	4604      	mov	r4, r0
   b4a2e:	ee18 0a10 	vmov	r0, s16
   b4a32:	f003 fced 	bl	b8410 <__aeabi_f2d>
   b4a36:	4602      	mov	r2, r0
   b4a38:	460b      	mov	r3, r1
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	490c      	ldr	r1, [pc, #48]	; (b4a70 <_Z12tempTempladoi+0x80>)
   b4a3e:	f7ff fb4f 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4a42:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4a46:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a4e:	dc04      	bgt.n	b4a5a <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4a50:	2000      	movs	r0, #0
}
   b4a52:	b006      	add	sp, #24
   b4a54:	ecbd 8b02 	vpop	{d8}
   b4a58:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4a5a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4a5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a66:	bf4c      	ite	mi
   b4a68:	2001      	movmi	r0, #1
   b4a6a:	2000      	movpl	r0, #0
   b4a6c:	e7f1      	b.n	b4a52 <_Z12tempTempladoi+0x62>
   b4a6e:	bf00      	nop
   b4a70:	000b8a3f 	.word	0x000b8a3f

000b4a74 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4a74:	b530      	push	{r4, r5, lr}
   b4a76:	ed2d 8b02 	vpush	{d8}
   b4a7a:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4a7c:	b2c1      	uxtb	r1, r0
   b4a7e:	2306      	movs	r3, #6
   b4a80:	220b      	movs	r2, #11
   b4a82:	a801      	add	r0, sp, #4
   b4a84:	f000 fbae 	bl	b51e4 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4a88:	a801      	add	r0, sp, #4
   b4a8a:	f000 fbb2 	bl	b51f2 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4a8e:	a801      	add	r0, sp, #4
   b4a90:	f000 fc6c 	bl	b536c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4a94:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a9c:	eeb4 0a40 	vcmp.f32	s0, s0
   b4aa0:	bf0c      	ite	eq
   b4aa2:	2401      	moveq	r4, #1
   b4aa4:	2400      	movne	r4, #0
   b4aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4aaa:	bf68      	it	vs
   b4aac:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4ab0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4ab4:	2c00      	cmp	r4, #0
   b4ab6:	d1ea      	bne.n	b4a8e <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4ab8:	f003 f8e8 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4abc:	4605      	mov	r5, r0
   b4abe:	ee18 0a10 	vmov	r0, s16
   b4ac2:	f003 fca5 	bl	b8410 <__aeabi_f2d>
   b4ac6:	4602      	mov	r2, r0
   b4ac8:	460b      	mov	r3, r1
   b4aca:	4628      	mov	r0, r5
   b4acc:	490b      	ldr	r1, [pc, #44]	; (b4afc <_Z9tempCalori+0x88>)
   b4ace:	f7ff fb07 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4ad2:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4ad6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ade:	dd08      	ble.n	b4af2 <_Z9tempCalori+0x7e>
   b4ae0:	eddf 7a07 	vldr	s15, [pc, #28]	; b4b00 <_Z9tempCalori+0x8c>
   b4ae4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4aec:	bf4c      	ite	mi
   b4aee:	2401      	movmi	r4, #1
   b4af0:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4af2:	4620      	mov	r0, r4
   b4af4:	b007      	add	sp, #28
   b4af6:	ecbd 8b02 	vpop	{d8}
   b4afa:	bd30      	pop	{r4, r5, pc}
   b4afc:	000b8a3f 	.word	0x000b8a3f
   b4b00:	42480000 	.word	0x42480000

000b4b04 <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4603      	mov	r3, r0
   b4b08:	3b01      	subs	r3, #1
   b4b0a:	4610      	mov	r0, r2
   b4b0c:	2b06      	cmp	r3, #6
   b4b0e:	d843      	bhi.n	b4b98 <_Z10leerSensoriii+0x94>
   b4b10:	e8df f003 	tbb	[pc, r3]
   b4b14:	1b120904 	.word	0x1b120904
   b4b18:	2d24      	.short	0x2d24
   b4b1a:	04          	.byte	0x04
   b4b1b:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4b1c:	bbc1      	cbnz	r1, b4b90 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4b22:	f7ff be49 	b.w	b47b8 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b26:	b919      	cbnz	r1, b4b30 <_Z10leerSensoriii+0x2c>
   b4b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b2c:	f7ff be89 	b.w	b4842 <_Z5noLuzi>
   b4b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b34:	f7ff be70 	b.w	b4818 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b38:	b919      	cbnz	r1, b4b42 <_Z10leerSensoriii+0x3e>
   b4b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b3e:	f7ff be9f 	b.w	b4880 <_Z7noRuidoi>
   b4b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b46:	f7ff be91 	b.w	b486c <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4b4a:	b919      	cbnz	r1, b4b54 <_Z10leerSensoriii+0x50>
   b4b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4b50:	f7ff beaf 	b.w	b48b2 <_Z7noBotoni>
   b4b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4b58:	f7ff be9c 	b.w	b4894 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4b5c:	b919      	cbnz	r1, b4b66 <_Z10leerSensoriii+0x62>
   b4b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4b62:	f7ff bedb 	b.w	b491c <_Z10noRotativoi>
   b4b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4b6a:	f7ff beb1 	b.w	b48d0 <_Z10siRotativoi>
        switch (condicion)
   b4b6e:	2901      	cmp	r1, #1
   b4b70:	d006      	beq.n	b4b80 <_Z10leerSensoriii+0x7c>
   b4b72:	2902      	cmp	r1, #2
   b4b74:	d008      	beq.n	b4b88 <_Z10leerSensoriii+0x84>
   b4b76:	b959      	cbnz	r1, b4b90 <_Z10leerSensoriii+0x8c>
   b4b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4b7c:	f7ff bef4 	b.w	b4968 <_Z8tempFrioi>
   b4b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4b84:	f7ff bf34 	b.w	b49f0 <_Z12tempTempladoi>
   b4b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4b8c:	f7ff bf72 	b.w	b4a74 <_Z9tempCalori>
   b4b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4b94:	f7ff be28 	b.w	b47e8 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4b98:	f003 f878 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4b9c:	4902      	ldr	r1, [pc, #8]	; (b4ba8 <_Z10leerSensoriii+0xa4>)
   b4b9e:	f002 fdc2 	bl	b7726 <_ZN5Print7printlnEPKc>
   b4ba2:	2000      	movs	r0, #0
   b4ba4:	bd08      	pop	{r3, pc}
   b4ba6:	bf00      	nop
   b4ba8:	000b8a48 	.word	0x000b8a48

000b4bac <setup>:

// Informacion de la tarjeta leida.
int tagInfo[6] = {-1, -1, -1, -1, -1, -1};

void setup()
{
   b4bac:	b510      	push	{r4, lr}
   b4bae:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4bb0:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4bb2:	a805      	add	r0, sp, #20
   b4bb4:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4bb8:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4bbc:	f002 fb94 	bl	b72e8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4bc0:	481b      	ldr	r0, [pc, #108]	; (b4c30 <setup+0x84>)
   b4bc2:	4623      	mov	r3, r4
   b4bc4:	4622      	mov	r2, r4
   b4bc6:	4621      	mov	r1, r4
   b4bc8:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4bca:	4c1a      	ldr	r4, [pc, #104]	; (b4c34 <setup+0x88>)
   b4bcc:	f002 fb08 	bl	b71e0 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4bd0:	f003 f85c 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4bd4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bd8:	f003 f84c 	bl	b7c74 <_ZN9USBSerial5beginEl>
   b4bdc:	7821      	ldrb	r1, [r4, #0]
   b4bde:	f3bf 8f5b 	dmb	ish
   b4be2:	f011 0101 	ands.w	r1, r1, #1
   b4be6:	d10b      	bne.n	b4c00 <setup+0x54>
   b4be8:	4620      	mov	r0, r4
   b4bea:	9103      	str	r1, [sp, #12]
   b4bec:	f7ff fa62 	bl	b40b4 <__cxa_guard_acquire>
   b4bf0:	9903      	ldr	r1, [sp, #12]
   b4bf2:	b128      	cbz	r0, b4c00 <setup+0x54>
   b4bf4:	4810      	ldr	r0, [pc, #64]	; (b4c38 <setup+0x8c>)
   b4bf6:	f002 fdfb 	bl	b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	f7ff fa5f 	bl	b40be <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4c00:	480d      	ldr	r0, [pc, #52]	; (b4c38 <setup+0x8c>)
   b4c02:	f002 fdff 	bl	b7804 <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4c06:	2301      	movs	r3, #1
   b4c08:	9300      	str	r3, [sp, #0]
   b4c0a:	223c      	movs	r2, #60	; 0x3c
   b4c0c:	2102      	movs	r1, #2
   b4c0e:	480b      	ldr	r0, [pc, #44]	; (b4c3c <setup+0x90>)
   b4c10:	f001 f93e 	bl	b5e90 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4c14:	480a      	ldr	r0, [pc, #40]	; (b4c40 <setup+0x94>)
   b4c16:	f001 fdea 	bl	b67ee <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b4c1a:	4b0a      	ldr	r3, [pc, #40]	; (b4c44 <setup+0x98>)
   b4c1c:	22ff      	movs	r2, #255	; 0xff
   b4c1e:	701a      	strb	r2, [r3, #0]
   b4c20:	705a      	strb	r2, [r3, #1]
   b4c22:	709a      	strb	r2, [r3, #2]
   b4c24:	70da      	strb	r2, [r3, #3]
   b4c26:	711a      	strb	r2, [r3, #4]
   b4c28:	715a      	strb	r2, [r3, #5]
  }

  // initializeBLocks(bloques);
}
   b4c2a:	b008      	add	sp, #32
   b4c2c:	bd10      	pop	{r4, pc}
   b4c2e:	bf00      	nop
   b4c30:	2003e718 	.word	0x2003e718
   b4c34:	2003dff8 	.word	0x2003dff8
   b4c38:	2003dffc 	.word	0x2003dffc
   b4c3c:	2003e620 	.word	0x2003e620
   b4c40:	2003e6a0 	.word	0x2003e6a0
   b4c44:	2003e691 	.word	0x2003e691

000b4c48 <_Z8evaluateP6SENSORPb>:

bool evaluate(SENSOR sensor[], bool condicion[])
{
   b4c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (numSensoresBloque >= 2 && numCondicionalesBloque >= 1)
   b4c4c:	4b17      	ldr	r3, [pc, #92]	; (b4cac <_Z8evaluateP6SENSORPb+0x64>)
   b4c4e:	681a      	ldr	r2, [r3, #0]
   b4c50:	2a01      	cmp	r2, #1
{
   b4c52:	4605      	mov	r5, r0
   b4c54:	460f      	mov	r7, r1
  if (numSensoresBloque >= 2 && numCondicionalesBloque >= 1)
   b4c56:	dd24      	ble.n	b4ca2 <_Z8evaluateP6SENSORPb+0x5a>
   b4c58:	f8df 8054 	ldr.w	r8, [pc, #84]	; b4cb0 <_Z8evaluateP6SENSORPb+0x68>
   b4c5c:	f8d8 3000 	ldr.w	r3, [r8]
   b4c60:	2b00      	cmp	r3, #0
   b4c62:	dd1e      	ble.n	b4ca2 <_Z8evaluateP6SENSORPb+0x5a>
  {
    if (numCondicionalesBloque < numSensoresBloque)
   b4c64:	429a      	cmp	r2, r3
   b4c66:	dd1c      	ble.n	b4ca2 <_Z8evaluateP6SENSORPb+0x5a>
    {
      bool valorEvaluado = leerSensor(sensor[0].id, sensor[0].condicion, sensor[0].puerto);
   b4c68:	68c2      	ldr	r2, [r0, #12]
   b4c6a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4c6e:	f7ff ff49 	bl	b4b04 <_Z10leerSensoriii>
      for (int i = 0; i < numCondicionalesBloque - 1; i++)
   b4c72:	2600      	movs	r6, #0
      bool valorEvaluado = leerSensor(sensor[0].id, sensor[0].condicion, sensor[0].puerto);
   b4c74:	4604      	mov	r4, r0
      for (int i = 0; i < numCondicionalesBloque - 1; i++)
   b4c76:	f8d8 3000 	ldr.w	r3, [r8]
   b4c7a:	3b01      	subs	r3, #1
   b4c7c:	42b3      	cmp	r3, r6
   b4c7e:	dd11      	ble.n	b4ca4 <_Z8evaluateP6SENSORPb+0x5c>
      {
        struct SENSOR sigSensor = sensor[i];
        int nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4c80:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4c84:	68ea      	ldr	r2, [r5, #12]
   b4c86:	f7ff ff3d 	bl	b4b04 <_Z10leerSensoriii>

        if (condicion[i])
   b4c8a:	5dbb      	ldrb	r3, [r7, r6]
   b4c8c:	b12b      	cbz	r3, b4c9a <_Z8evaluateP6SENSORPb+0x52>
          valorEvaluado = valorEvaluado && nextValor;
   b4c8e:	2c00      	cmp	r4, #0
   b4c90:	bf18      	it	ne
   b4c92:	4604      	movne	r4, r0
      for (int i = 0; i < numCondicionalesBloque - 1; i++)
   b4c94:	3601      	adds	r6, #1
   b4c96:	3510      	adds	r5, #16
   b4c98:	e7ed      	b.n	b4c76 <_Z8evaluateP6SENSORPb+0x2e>
        int nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4c9a:	2c00      	cmp	r4, #0
   b4c9c:	bf08      	it	eq
   b4c9e:	4604      	moveq	r4, r0
   b4ca0:	e7f8      	b.n	b4c94 <_Z8evaluateP6SENSORPb+0x4c>
      // Serial.println("Evaluate: numCondicionalesBloque > numSensoresBloque");
    }
  }

  // Serial.println("Evaluate: inficientes sensores");
  return false;
   b4ca2:	2400      	movs	r4, #0
}
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4caa:	bf00      	nop
   b4cac:	2003e6b8 	.word	0x2003e6b8
   b4cb0:	2003e6b4 	.word	0x2003e6b4

000b4cb4 <_Z13isValidSensori>:

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4cb4:	b530      	push	{r4, r5, lr}
  // Serial.printlnf("deviceID:%d", deviceID);

  BLOQUE bloque = bloques[numBloque];
   b4cb6:	4b12      	ldr	r3, [pc, #72]	; (b4d00 <_Z13isValidSensori+0x4c>)
{
   b4cb8:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
  BLOQUE bloque = bloques[numBloque];
   b4cbc:	6819      	ldr	r1, [r3, #0]
   b4cbe:	4b11      	ldr	r3, [pc, #68]	; (b4d04 <_Z13isValidSensori+0x50>)
   b4cc0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   b4cc4:	ad01      	add	r5, sp, #4
   b4cc6:	fb02 3101 	mla	r1, r2, r1, r3
{
   b4cca:	4604      	mov	r4, r0
  BLOQUE bloque = bloques[numBloque];
   b4ccc:	4628      	mov	r0, r5
   b4cce:	f003 fc05 	bl	b84dc <memcpy>
  for (int i = 0; i < numSensoresBloque; i++)
   b4cd2:	4b0d      	ldr	r3, [pc, #52]	; (b4d08 <_Z13isValidSensori+0x54>)
   b4cd4:	681a      	ldr	r2, [r3, #0]
   b4cd6:	2300      	movs	r3, #0
   b4cd8:	429a      	cmp	r2, r3
   b4cda:	dd0e      	ble.n	b4cfa <_Z13isValidSensori+0x46>
  {
    // Serial.printlnf("SensorBloqueID:%d", bloque.sensores[i].id);
    if (bloque.sensores[i].id == deviceID)
   b4cdc:	0119      	lsls	r1, r3, #4
   b4cde:	5869      	ldr	r1, [r5, r1]
   b4ce0:	42a1      	cmp	r1, r4
   b4ce2:	d108      	bne.n	b4cf6 <_Z13isValidSensori+0x42>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4ce4:	f002 ffd2 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4ce8:	4908      	ldr	r1, [pc, #32]	; (b4d0c <_Z13isValidSensori+0x58>)
   b4cea:	f002 fd1c 	bl	b7726 <_ZN5Print7printlnEPKc>
   b4cee:	2000      	movs	r0, #0
    }
  };

  // Serial.println("Valid sensor!");
  return true;
}
   b4cf0:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
   b4cf4:	bd30      	pop	{r4, r5, pc}
  for (int i = 0; i < numSensoresBloque; i++)
   b4cf6:	3301      	adds	r3, #1
   b4cf8:	e7ee      	b.n	b4cd8 <_Z13isValidSensori+0x24>
  return true;
   b4cfa:	2001      	movs	r0, #1
   b4cfc:	e7f8      	b.n	b4cf0 <_Z13isValidSensori+0x3c>
   b4cfe:	bf00      	nop
   b4d00:	2003df68 	.word	0x2003df68
   b4d04:	2003e018 	.word	0x2003e018
   b4d08:	2003e6b8 	.word	0x2003e6b8
   b4d0c:	000b8a5b 	.word	0x000b8a5b

000b4d10 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4d12:	4b0d      	ldr	r3, [pc, #52]	; (b4d48 <_Z11isNewSensori+0x38>)
  {
    BLOQUE bloque = bloques[i];
   b4d14:	490d      	ldr	r1, [pc, #52]	; (b4d4c <_Z11isNewSensori+0x3c>)
  for (int i = 0; i <= numBloque; i++)
   b4d16:	681c      	ldr	r4, [r3, #0]
    BLOQUE bloque = bloques[i];
   b4d18:	f44f 7539 	mov.w	r5, #740	; 0x2e4
  for (int i = 0; i <= numBloque; i++)
   b4d1c:	2300      	movs	r3, #0
   b4d1e:	429c      	cmp	r4, r3
   b4d20:	db0d      	blt.n	b4d3e <_Z11isNewSensori+0x2e>
    BLOQUE bloque = bloques[i];
   b4d22:	fb05 f203 	mul.w	r2, r5, r3
   b4d26:	188f      	adds	r7, r1, r2
   b4d28:	588e      	ldr	r6, [r1, r2]
   b4d2a:	68fa      	ldr	r2, [r7, #12]
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d2c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4d30:	d203      	bcs.n	b4d3a <_Z11isNewSensori+0x2a>
    {
      if (bloque.sensores[j].id == deviceID)
   b4d32:	4286      	cmp	r6, r0
   b4d34:	d005      	beq.n	b4d42 <_Z11isNewSensori+0x32>
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d36:	3301      	adds	r3, #1
   b4d38:	e7f8      	b.n	b4d2c <_Z11isNewSensori+0x1c>
  for (int i = 0; i <= numBloque; i++)
   b4d3a:	3301      	adds	r3, #1
   b4d3c:	e7ef      	b.n	b4d1e <_Z11isNewSensori+0xe>
        return bloque.sensores[j].puerto;
    }
  }
  return -1;
   b4d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
   b4d42:	4610      	mov	r0, r2
   b4d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4d46:	bf00      	nop
   b4d48:	2003df68 	.word	0x2003df68
   b4d4c:	2003e018 	.word	0x2003e018

000b4d50 <_Z15isValidActuadorbi>:
// True cuando el actuador no se ha usado en ningun Then, evalState=T o, Else evalState=F de NINGUN bloque;
// Actuador valido tanto en el then como en el else, cuando no ha sido usado en ningun bloque para ese state.
// No puedo poner el led verde ON en then de bloque 1 a la vez que led rojo OFF en then de bloque 2.
// Si es posible poner led verde ON en then de bloque 1 y led rojo ON en else de bloque 2.
bool isValidActuador(bool evalState, int actuadorID)
{
   b4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4d52:	4b0e      	ldr	r3, [pc, #56]	; (b4d8c <_Z15isValidActuadorbi+0x3c>)
  {
    BLOQUE bloque = bloques[i];
   b4d54:	4d0e      	ldr	r5, [pc, #56]	; (b4d90 <_Z15isValidActuadorbi+0x40>)
  for (int i = 0; i <= numBloque; i++)
   b4d56:	681c      	ldr	r4, [r3, #0]
    BLOQUE bloque = bloques[i];
   b4d58:	f44f 7639 	mov.w	r6, #740	; 0x2e4
  for (int i = 0; i <= numBloque; i++)
   b4d5c:	2300      	movs	r3, #0
   b4d5e:	429c      	cmp	r4, r3
   b4d60:	db10      	blt.n	b4d84 <_Z15isValidActuadorbi+0x34>
    BLOQUE bloque = bloques[i];
   b4d62:	fb06 5203 	mla	r2, r6, r3, r5
   b4d66:	f8d2 7140 	ldr.w	r7, [r2, #320]	; 0x140
   b4d6a:	f892 2150 	ldrb.w	r2, [r2, #336]	; 0x150
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4d72:	d205      	bcs.n	b4d80 <_Z15isValidActuadorbi+0x30>
    {
      if (bloque.actuadores[j].evaluate == evalState && bloque.actuadores[j].id == actuadorID)
   b4d74:	4282      	cmp	r2, r0
   b4d76:	d101      	bne.n	b4d7c <_Z15isValidActuadorbi+0x2c>
   b4d78:	428f      	cmp	r7, r1
   b4d7a:	d005      	beq.n	b4d88 <_Z15isValidActuadorbi+0x38>
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4d7c:	3301      	adds	r3, #1
   b4d7e:	e7f6      	b.n	b4d6e <_Z15isValidActuadorbi+0x1e>
  for (int i = 0; i <= numBloque; i++)
   b4d80:	3301      	adds	r3, #1
   b4d82:	e7ec      	b.n	b4d5e <_Z15isValidActuadorbi+0xe>
        return false;
    }
  }
  return true;
   b4d84:	2001      	movs	r0, #1
}
   b4d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
   b4d88:	2000      	movs	r0, #0
   b4d8a:	e7fc      	b.n	b4d86 <_Z15isValidActuadorbi+0x36>
   b4d8c:	2003df68 	.word	0x2003df68
   b4d90:	2003e018 	.word	0x2003e018

000b4d94 <_Z13isNewActuadori>:

// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4d94:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i <= numBloque; i++)
   b4d96:	4b0d      	ldr	r3, [pc, #52]	; (b4dcc <_Z13isNewActuadori+0x38>)
  {
    BLOQUE bloque = bloques[i];
   b4d98:	4c0d      	ldr	r4, [pc, #52]	; (b4dd0 <_Z13isNewActuadori+0x3c>)
  for (int i = 0; i <= numBloque; i++)
   b4d9a:	6819      	ldr	r1, [r3, #0]
    BLOQUE bloque = bloques[i];
   b4d9c:	f44f 7539 	mov.w	r5, #740	; 0x2e4
  for (int i = 0; i <= numBloque; i++)
   b4da0:	2300      	movs	r3, #0
   b4da2:	4299      	cmp	r1, r3
   b4da4:	db0e      	blt.n	b4dc4 <_Z13isNewActuadori+0x30>
    BLOQUE bloque = bloques[i];
   b4da6:	fb05 4203 	mla	r2, r5, r3, r4
   b4daa:	f8d2 6140 	ldr.w	r6, [r2, #320]	; 0x140
   b4dae:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4db2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4db6:	d203      	bcs.n	b4dc0 <_Z13isNewActuadori+0x2c>
    {
      if (bloque.actuadores[j].id == deviceID)
   b4db8:	4286      	cmp	r6, r0
   b4dba:	d005      	beq.n	b4dc8 <_Z13isNewActuadori+0x34>
    for (int j = 0; i < sizeof(bloque.actuadores); i++)
   b4dbc:	3301      	adds	r3, #1
   b4dbe:	e7f8      	b.n	b4db2 <_Z13isNewActuadori+0x1e>
  for (int i = 0; i <= numBloque; i++)
   b4dc0:	3301      	adds	r3, #1
   b4dc2:	e7ee      	b.n	b4da2 <_Z13isNewActuadori+0xe>
        return bloque.actuadores[j].puerto;
    }
  }

  return -1;
   b4dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
   b4dc8:	4610      	mov	r0, r2
   b4dca:	bd70      	pop	{r4, r5, r6, pc}
   b4dcc:	2003df68 	.word	0x2003df68
   b4dd0:	2003e018 	.word	0x2003e018

000b4dd4 <loop>:

void loop()
{
   b4dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b4dd8:	48b9      	ldr	r0, [pc, #740]	; (b50c0 <loop+0x2ec>)
{
   b4dda:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
  if (mfrc522.PICC_IsNewCardPresent())
   b4dde:	f001 fe31 	bl	b6a44 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4de2:	b1d0      	cbz	r0, b4e1a <loop+0x46>
  {
    Serial.print("Tag Detectada --> ");
   b4de4:	f002 ff52 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4de8:	49b6      	ldr	r1, [pc, #728]	; (b50c4 <loop+0x2f0>)
   b4dea:	f002 fc89 	bl	b7700 <_ZN5Print5printEPKc>
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b4dee:	48b4      	ldr	r0, [pc, #720]	; (b50c0 <loop+0x2ec>)
   b4df0:	f001 fff9 	bl	b6de6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4df4:	2800      	cmp	r0, #0
   b4df6:	f000 81b3 	beq.w	b5160 <loop+0x38c>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
   b4dfa:	4cb3      	ldr	r4, [pc, #716]	; (b50c8 <loop+0x2f4>)
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	f001 f839 	bl	b5e74 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4e02:	4620      	mov	r0, r4
   b4e04:	2101      	movs	r1, #1
   b4e06:	f000 fe90 	bl	b5b2a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4e10:	e9c4 2304 	strd	r2, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b4e14:	48ad      	ldr	r0, [pc, #692]	; (b50cc <loop+0x2f8>)
   b4e16:	f7ff fab1 	bl	b437c <_Z8getTagIDPi>
  }

  // Si se ha pasado nueva tag; se limpia al finalizar su lectura.
  if (tagInfo[0] != -1)
   b4e1a:	4dac      	ldr	r5, [pc, #688]	; (b50cc <loop+0x2f8>)
   b4e1c:	4eac      	ldr	r6, [pc, #688]	; (b50d0 <loop+0x2fc>)
   b4e1e:	682b      	ldr	r3, [r5, #0]
   b4e20:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b50f8 <loop+0x324>
   b4e24:	3301      	adds	r3, #1
   b4e26:	d078      	beq.n	b4f1a <loop+0x146>
  {
    int deviceID = tagInfo[2];
   b4e28:	68ac      	ldr	r4, [r5, #8]
    Serial.print("Ejecutando tag --> ");
   b4e2a:	4faa      	ldr	r7, [pc, #680]	; (b50d4 <loop+0x300>)
   b4e2c:	f8df a2b8 	ldr.w	sl, [pc, #696]	; b50e8 <loop+0x314>
   b4e30:	f8df 92bc 	ldr.w	r9, [pc, #700]	; b50f0 <loop+0x31c>
   b4e34:	f002 ff2a 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4e38:	49a7      	ldr	r1, [pc, #668]	; (b50d8 <loop+0x304>)
   b4e3a:	f002 fc61 	bl	b7700 <_ZN5Print5printEPKc>

    switch (tagInfo[0])
   b4e3e:	682b      	ldr	r3, [r5, #0]
   b4e40:	2b05      	cmp	r3, #5
   b4e42:	f200 8185 	bhi.w	b5150 <loop+0x37c>
   b4e46:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4e4a:	0006      	.short	0x0006
   b4e4c:	00fe00a3 	.word	0x00fe00a3
   b4e50:	016d0121 	.word	0x016d0121
   b4e54:	017c      	.short	0x017c
    {
    // Sensor
    case 0:
      if (IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID))
   b4e56:	f8df 92bc 	ldr.w	r9, [pc, #700]	; b5114 <loop+0x340>
   b4e5a:	f899 3000 	ldrb.w	r3, [r9]
   b4e5e:	2b00      	cmp	r3, #0
   b4e60:	f000 8082 	beq.w	b4f68 <loop+0x194>
   b4e64:	683a      	ldr	r2, [r7, #0]
   b4e66:	f8da 3000 	ldr.w	r3, [sl]
   b4e6a:	429a      	cmp	r2, r3
   b4e6c:	f040 8086 	bne.w	b4f7c <loop+0x1a8>
   b4e70:	4620      	mov	r0, r4
   b4e72:	f7ff ff1f 	bl	b4cb4 <_Z13isValidSensori>
   b4e76:	2800      	cmp	r0, #0
   b4e78:	d073      	beq.n	b4f62 <loop+0x18e>
      {

        int puerto = isNewSensor(deviceID);
   b4e7a:	4620      	mov	r0, r4
   b4e7c:	f7ff ff48 	bl	b4d10 <_Z11isNewSensori>
        // Si el puerto es distinto de -1 el sensor ha sido usado previamente. Si es nuevo, obtenemos un puerto disponible.
        if (puerto == -1)
   b4e80:	1c43      	adds	r3, r0, #1
   b4e82:	d104      	bne.n	b4e8e <loop+0xba>
          puerto = asignarPuerto(deviceID);
   b4e84:	4620      	mov	r0, r4
   b4e86:	f7ff fac9 	bl	b441c <_Z13asignarPuertoi>

        if (puerto != -1)
   b4e8a:	1c41      	adds	r1, r0, #1
   b4e8c:	d07a      	beq.n	b4f84 <loop+0x1b0>
        {

          SENSOR newSensor;
          newSensor.id = deviceID;
          newSensor.condicion = tagInfo[3];
          newSensor.bloque = numBloque;
   b4e8e:	f8d6 e000 	ldr.w	lr, [r6]
          newSensor.puerto = puerto;

          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4e92:	6839      	ldr	r1, [r7, #0]
          newSensor.condicion = tagInfo[3];
   b4e94:	68eb      	ldr	r3, [r5, #12]
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4e96:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   b4e9a:	fb02 f20e 	mul.w	r2, r2, lr
   b4e9e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   b4ea2:	eb08 0c02 	add.w	ip, r8, r2
   b4ea6:	e9cc 3e01 	strd	r3, lr, [ip, #4]
          numSensoresBloque++;
   b4eaa:	3101      	adds	r1, #1
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4eac:	f848 4002 	str.w	r4, [r8, r2]
   b4eb0:	f8cc 000c 	str.w	r0, [ip, #12]
          numSensoresBloque++;
   b4eb4:	6039      	str	r1, [r7, #0]
   return type == 0;
   b4eb6:	6869      	ldr	r1, [r5, #4]
            newActuador.evaluate = false;

            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
            numActuadoresBloque++;

            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b4eb8:	9000      	str	r0, [sp, #0]
   b4eba:	6828      	ldr	r0, [r5, #0]
   b4ebc:	fab1 f181 	clz	r1, r1
   b4ec0:	fab0 f080 	clz	r0, r0
   b4ec4:	4622      	mov	r2, r4
   b4ec6:	0949      	lsrs	r1, r1, #5
   b4ec8:	0940      	lsrs	r0, r0, #5
   b4eca:	f7ff f917 	bl	b40fc <_Z12displayPrintbbiii>
    default:
      Serial.println("Error");
      break;
    }

    Serial.println("Fin Tag");
   b4ece:	f002 fedd 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4ed2:	4982      	ldr	r1, [pc, #520]	; (b50dc <loop+0x308>)
   b4ed4:	f002 fc27 	bl	b7726 <_ZN5Print7printlnEPKc>
    Serial.printlnf("Num bloques: %d", numBloque);
   b4ed8:	f002 fed8 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4edc:	6832      	ldr	r2, [r6, #0]
   b4ede:	4980      	ldr	r1, [pc, #512]	; (b50e0 <loop+0x30c>)
   b4ee0:	f7ff f8fe 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Num sensoresBLoque: %d", numSensoresBloque);
   b4ee4:	f002 fed2 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4ee8:	683a      	ldr	r2, [r7, #0]
   b4eea:	497e      	ldr	r1, [pc, #504]	; (b50e4 <loop+0x310>)
   b4eec:	f7ff f8f8 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Num condicionesBLoque: %d", numCondicionalesBloque);
   b4ef0:	f002 fecc 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4ef4:	4b7c      	ldr	r3, [pc, #496]	; (b50e8 <loop+0x314>)
   b4ef6:	497d      	ldr	r1, [pc, #500]	; (b50ec <loop+0x318>)
   b4ef8:	681a      	ldr	r2, [r3, #0]
   b4efa:	f7ff f8f1 	bl	b40e0 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Num CondicionalesBloque: %d", numActuadoresBloque);
   b4efe:	f002 fec5 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4f02:	4b7b      	ldr	r3, [pc, #492]	; (b50f0 <loop+0x31c>)
   b4f04:	497b      	ldr	r1, [pc, #492]	; (b50f4 <loop+0x320>)
   b4f06:	681a      	ldr	r2, [r3, #0]
   b4f08:	f7ff f8ea 	bl	b40e0 <_ZN5Print8printlnfEPKcz>

    tagInfo[0] = -1;
   b4f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f10:	602b      	str	r3, [r5, #0]
    Serial.println();
   b4f12:	f002 febb 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4f16:	f002 fbfa 	bl	b770e <_ZN5Print7printlnEv>
   b4f1a:	4d77      	ldr	r5, [pc, #476]	; (b50f8 <loop+0x324>)
  for (int i = 0; i <= numBloque; i++)
  {
    // Para cada iterazion del loop debemos evaluar los sensores de cada bloque y actuar en consecuencia.

    bool evaluacion = evaluate(bloques[i].sensores, bloques[i].condiciones.condicionesBloque);
    for (int j = 0; j < numActuadoresBloque; j++)
   b4f1c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; b50f0 <loop+0x31c>
{
   b4f20:	2700      	movs	r7, #0
  for (int i = 0; i <= numBloque; i++)
   b4f22:	6833      	ldr	r3, [r6, #0]
   b4f24:	42bb      	cmp	r3, r7
   b4f26:	f2c0 811b 	blt.w	b5160 <loop+0x38c>
    bool evaluacion = evaluate(bloques[i].sensores, bloques[i].condiciones.condicionesBloque);
   b4f2a:	f505 7134 	add.w	r1, r5, #720	; 0x2d0
   b4f2e:	4628      	mov	r0, r5
   b4f30:	f7ff fe8a 	bl	b4c48 <_Z8evaluateP6SENSORPb>
   b4f34:	462c      	mov	r4, r5
   b4f36:	4681      	mov	r9, r0
    for (int j = 0; j < numActuadoresBloque; j++)
   b4f38:	f04f 0800 	mov.w	r8, #0
   b4f3c:	f8da 3000 	ldr.w	r3, [sl]
   b4f40:	4543      	cmp	r3, r8
   b4f42:	f340 8109 	ble.w	b5158 <loop+0x384>
    {
      ACTUADOR actuador = bloques[i].actuadores[j];
      if (evaluacion == actuador.evaluate)
   b4f46:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   b4f4a:	454b      	cmp	r3, r9
   b4f4c:	d105      	bne.n	b4f5a <loop+0x186>
      {
        actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b4f4e:	e9d4 0150 	ldrd	r0, r1, [r4, #320]	; 0x140
   b4f52:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   b4f56:	f7ff fc22 	bl	b479e <_Z15actuadorHandleriii>
    for (int j = 0; j < numActuadoresBloque; j++)
   b4f5a:	f108 0801 	add.w	r8, r8, #1
   b4f5e:	3414      	adds	r4, #20
   b4f60:	e7ec      	b.n	b4f3c <loop+0x168>
        if (!IF_pasado)
   b4f62:	f899 3000 	ldrb.w	r3, [r9]
   b4f66:	b923      	cbnz	r3, b4f72 <loop+0x19e>
          Serial.println("Se esperaba IF tag");
   b4f68:	f002 fe90 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4f6c:	4963      	ldr	r1, [pc, #396]	; (b50fc <loop+0x328>)
   b4f6e:	f002 fbda 	bl	b7726 <_ZN5Print7printlnEPKc>
        if (numSensoresBloque != numCondicionalesBloque)
   b4f72:	683a      	ldr	r2, [r7, #0]
   b4f74:	f8da 3000 	ldr.w	r3, [sl]
   b4f78:	429a      	cmp	r2, r3
   b4f7a:	d0a8      	beq.n	b4ece <loop+0xfa>
          Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b4f7c:	f002 fe86 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4f80:	495f      	ldr	r1, [pc, #380]	; (b5100 <loop+0x32c>)
   b4f82:	e002      	b.n	b4f8a <loop+0x1b6>
          Serial.println("Error Puerto");
   b4f84:	f002 fe82 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4f88:	495e      	ldr	r1, [pc, #376]	; (b5104 <loop+0x330>)
      Serial.println("Error");
   b4f8a:	f002 fbcc 	bl	b7726 <_ZN5Print7printlnEPKc>
      break;
   b4f8e:	e79e      	b.n	b4ece <loop+0xfa>
      if (THEN_pasado && !ELSE_pasado && isValidActuador(true, deviceID))
   b4f90:	4b5d      	ldr	r3, [pc, #372]	; (b5108 <loop+0x334>)
   b4f92:	781b      	ldrb	r3, [r3, #0]
   b4f94:	b37b      	cbz	r3, b4ff6 <loop+0x222>
   b4f96:	4b5d      	ldr	r3, [pc, #372]	; (b510c <loop+0x338>)
   b4f98:	781b      	ldrb	r3, [r3, #0]
   b4f9a:	4621      	mov	r1, r4
   b4f9c:	bb3b      	cbnz	r3, b4fee <loop+0x21a>
   b4f9e:	2001      	movs	r0, #1
   b4fa0:	f7ff fed6 	bl	b4d50 <_Z15isValidActuadorbi>
   b4fa4:	b338      	cbz	r0, b4ff6 <loop+0x222>
        int puerto = isNewActuador(deviceID);
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	f7ff fef4 	bl	b4d94 <_Z13isNewActuadori>
        if (puerto == -1)
   b4fac:	1c42      	adds	r2, r0, #1
   b4fae:	d104      	bne.n	b4fba <loop+0x1e6>
          puerto = asignarPuerto(deviceID);
   b4fb0:	4620      	mov	r0, r4
   b4fb2:	f7ff fa33 	bl	b441c <_Z13asignarPuertoi>
        if (puerto != -1)
   b4fb6:	1c43      	adds	r3, r0, #1
   b4fb8:	d089      	beq.n	b4ece <loop+0xfa>
          newActuador.bloque = numBloque;
   b4fba:	f8d6 c000 	ldr.w	ip, [r6]
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b4fbe:	f8d9 1000 	ldr.w	r1, [r9]
          newActuador.condicion = tagInfo[3];
   b4fc2:	68eb      	ldr	r3, [r5, #12]
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b4fc4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   b4fc8:	fb02 f20c 	mul.w	r2, r2, ip
   b4fcc:	f04f 0e14 	mov.w	lr, #20
   b4fd0:	fb0e 2201 	mla	r2, lr, r1, r2
   b4fd4:	4442      	add	r2, r8
   b4fd6:	e9c2 4350 	strd	r4, r3, [r2, #320]	; 0x140
   b4fda:	e9c2 c052 	strd	ip, r0, [r2, #328]	; 0x148
   b4fde:	f04f 0c01 	mov.w	ip, #1
   b4fe2:	f882 c150 	strb.w	ip, [r2, #336]	; 0x150
          numActuadoresBloque++;
   b4fe6:	4461      	add	r1, ip
            numActuadoresBloque++;
   b4fe8:	f8c9 1000 	str.w	r1, [r9]
   b4fec:	e763      	b.n	b4eb6 <loop+0xe2>
        if (THEN_pasado && ELSE_pasado && isValidActuador(false, deviceID))
   b4fee:	2000      	movs	r0, #0
   b4ff0:	f7ff feae 	bl	b4d50 <_Z15isValidActuadorbi>
   b4ff4:	b918      	cbnz	r0, b4ffe <loop+0x22a>
          Serial.println("Invalid Actuador");
   b4ff6:	f002 fe49 	bl	b7c8c <_Z16_fetch_usbserialv>
   b4ffa:	4945      	ldr	r1, [pc, #276]	; (b5110 <loop+0x33c>)
   b4ffc:	e7c5      	b.n	b4f8a <loop+0x1b6>
          int puerto = isNewActuador(deviceID);
   b4ffe:	4620      	mov	r0, r4
   b5000:	f7ff fec8 	bl	b4d94 <_Z13isNewActuadori>
          if (puerto == -1)
   b5004:	1c41      	adds	r1, r0, #1
   b5006:	d105      	bne.n	b5014 <loop+0x240>
            puerto = asignarPuerto(deviceID);
   b5008:	4620      	mov	r0, r4
   b500a:	f7ff fa07 	bl	b441c <_Z13asignarPuertoi>
          if (puerto != -1)
   b500e:	1c42      	adds	r2, r0, #1
   b5010:	f43f af5d 	beq.w	b4ece <loop+0xfa>
            newActuador.bloque = numBloque;
   b5014:	f8d6 c000 	ldr.w	ip, [r6]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5018:	f8d9 1000 	ldr.w	r1, [r9]
            newActuador.condicion = tagInfo[3];
   b501c:	68eb      	ldr	r3, [r5, #12]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b501e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   b5022:	f04f 0e14 	mov.w	lr, #20
   b5026:	fb02 f20c 	mul.w	r2, r2, ip
   b502a:	fb0e 2201 	mla	r2, lr, r1, r2
   b502e:	4442      	add	r2, r8
   b5030:	f502 7ea0 	add.w	lr, r2, #320	; 0x140
   b5034:	e9c2 4350 	strd	r4, r3, [r2, #320]	; 0x140
   b5038:	e9c2 c052 	strd	ip, r0, [r2, #328]	; 0x148
   b503c:	2200      	movs	r2, #0
   b503e:	f88e 2010 	strb.w	r2, [lr, #16]
            numActuadoresBloque++;
   b5042:	3101      	adds	r1, #1
   b5044:	e7d0      	b.n	b4fe8 <loop+0x214>
      if (numBloque == -1 || numBloque == 0 && numActuadoresBloque > 0)
   b5046:	6830      	ldr	r0, [r6, #0]
   b5048:	1c43      	adds	r3, r0, #1
   b504a:	d004      	beq.n	b5056 <loop+0x282>
   b504c:	b9d0      	cbnz	r0, b5084 <loop+0x2b0>
   b504e:	f8d9 3000 	ldr.w	r3, [r9]
   b5052:	2b00      	cmp	r3, #0
   b5054:	dd16      	ble.n	b5084 <loop+0x2b0>
        IF_pasado = true;
   b5056:	4b2f      	ldr	r3, [pc, #188]	; (b5114 <loop+0x340>)
   b5058:	2201      	movs	r2, #1
   b505a:	701a      	strb	r2, [r3, #0]
        THEN_pasado = false;
   b505c:	4a2a      	ldr	r2, [pc, #168]	; (b5108 <loop+0x334>)
   b505e:	2300      	movs	r3, #0
   b5060:	7013      	strb	r3, [r2, #0]
        ELSE_pasado = false;
   b5062:	4a2a      	ldr	r2, [pc, #168]	; (b510c <loop+0x338>)
        numCondicionalesBloque = 0;
   b5064:	f8ca 3000 	str.w	r3, [sl]
        numBloque++;
   b5068:	3001      	adds	r0, #1
        ELSE_pasado = false;
   b506a:	7013      	strb	r3, [r2, #0]
        bloques[numBloque] = nuevoBloque;
   b506c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
        numBloque++;
   b5070:	6030      	str	r0, [r6, #0]
        bloques[numBloque] = nuevoBloque;
   b5072:	a903      	add	r1, sp, #12
   b5074:	fb02 8000 	mla	r0, r2, r0, r8
        numSensoresBloque = 0;
   b5078:	603b      	str	r3, [r7, #0]
        numActuadoresBloque = 0;
   b507a:	f8c9 3000 	str.w	r3, [r9]
        bloques[numBloque] = nuevoBloque;
   b507e:	f003 fa2d 	bl	b84dc <memcpy>
   b5082:	e724      	b.n	b4ece <loop+0xfa>
        Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5084:	f002 fe02 	bl	b7c8c <_Z16_fetch_usbserialv>
   b5088:	4923      	ldr	r1, [pc, #140]	; (b5118 <loop+0x344>)
   b508a:	e77e      	b.n	b4f8a <loop+0x1b6>
      if (numCondicionalesBloque < numSensoresBloque && numActuadoresBloque == 0)
   b508c:	f8da 3000 	ldr.w	r3, [sl]
   b5090:	683a      	ldr	r2, [r7, #0]
   b5092:	4293      	cmp	r3, r2
   b5094:	da42      	bge.n	b511c <loop+0x348>
   b5096:	f8d9 2000 	ldr.w	r2, [r9]
   b509a:	2a00      	cmp	r2, #0
   b509c:	d13e      	bne.n	b511c <loop+0x348>
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b509e:	6832      	ldr	r2, [r6, #0]
   b50a0:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   b50a4:	fb01 8202 	mla	r2, r1, r2, r8
   b50a8:	6869      	ldr	r1, [r5, #4]
   b50aa:	441a      	add	r2, r3
   b50ac:	3900      	subs	r1, #0
   b50ae:	bf18      	it	ne
   b50b0:	2101      	movne	r1, #1
        numCondicionalesBloque++;
   b50b2:	3301      	adds	r3, #1
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b50b4:	f882 12d0 	strb.w	r1, [r2, #720]	; 0x2d0
        numCondicionalesBloque++;
   b50b8:	f8ca 3000 	str.w	r3, [sl]
   b50bc:	e707      	b.n	b4ece <loop+0xfa>
   b50be:	bf00      	nop
   b50c0:	2003e6a0 	.word	0x2003e6a0
   b50c4:	000b8a8b 	.word	0x000b8a8b
   b50c8:	2003e620 	.word	0x2003e620
   b50cc:	2003df70 	.word	0x2003df70
   b50d0:	2003df68 	.word	0x2003df68
   b50d4:	2003e6b8 	.word	0x2003e6b8
   b50d8:	000b8a9e 	.word	0x000b8a9e
   b50dc:	000b8bbb 	.word	0x000b8bbb
   b50e0:	000b8bc3 	.word	0x000b8bc3
   b50e4:	000b8bd3 	.word	0x000b8bd3
   b50e8:	2003e6b4 	.word	0x2003e6b4
   b50ec:	000b8bea 	.word	0x000b8bea
   b50f0:	2003e6b0 	.word	0x2003e6b0
   b50f4:	000b8c04 	.word	0x000b8c04
   b50f8:	2003e018 	.word	0x2003e018
   b50fc:	000b8abf 	.word	0x000b8abf
   b5100:	000b8ad2 	.word	0x000b8ad2
   b5104:	000b8ab2 	.word	0x000b8ab2
   b5108:	2003e014 	.word	0x2003e014
   b510c:	2003e004 	.word	0x2003e004
   b5110:	000b8b07 	.word	0x000b8b07
   b5114:	2003e005 	.word	0x2003e005
   b5118:	000b8b18 	.word	0x000b8b18
        Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b511c:	f002 fdb6 	bl	b7c8c <_Z16_fetch_usbserialv>
   b5120:	4911      	ldr	r1, [pc, #68]	; (b5168 <loop+0x394>)
   b5122:	e732      	b.n	b4f8a <loop+0x1b6>
      if (numSensoresBloque > 0 && numSensoresBloque > numCondicionalesBloque)
   b5124:	683b      	ldr	r3, [r7, #0]
   b5126:	2b00      	cmp	r3, #0
   b5128:	dd07      	ble.n	b513a <loop+0x366>
   b512a:	f8da 2000 	ldr.w	r2, [sl]
   b512e:	4293      	cmp	r3, r2
   b5130:	dd03      	ble.n	b513a <loop+0x366>
        THEN_pasado = true;
   b5132:	4b0e      	ldr	r3, [pc, #56]	; (b516c <loop+0x398>)
        ELSE_pasado = true;
   b5134:	2201      	movs	r2, #1
   b5136:	701a      	strb	r2, [r3, #0]
   b5138:	e6c9      	b.n	b4ece <loop+0xfa>
        Serial.println("Numero de sensores infucientes");
   b513a:	f002 fda7 	bl	b7c8c <_Z16_fetch_usbserialv>
   b513e:	490c      	ldr	r1, [pc, #48]	; (b5170 <loop+0x39c>)
   b5140:	e723      	b.n	b4f8a <loop+0x1b6>
      if (numActuadoresBloque > 0)
   b5142:	f8d9 3000 	ldr.w	r3, [r9]
   b5146:	2b00      	cmp	r3, #0
   b5148:	f77f aec1 	ble.w	b4ece <loop+0xfa>
        ELSE_pasado = true;
   b514c:	4b09      	ldr	r3, [pc, #36]	; (b5174 <loop+0x3a0>)
   b514e:	e7f1      	b.n	b5134 <loop+0x360>
      Serial.println("Error");
   b5150:	f002 fd9c 	bl	b7c8c <_Z16_fetch_usbserialv>
   b5154:	4908      	ldr	r1, [pc, #32]	; (b5178 <loop+0x3a4>)
   b5156:	e718      	b.n	b4f8a <loop+0x1b6>
  for (int i = 0; i <= numBloque; i++)
   b5158:	3701      	adds	r7, #1
   b515a:	f505 7539 	add.w	r5, r5, #740	; 0x2e4
   b515e:	e6e0      	b.n	b4f22 <loop+0x14e>
      }
    }
  }
}
   b5160:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   b5164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5168:	000b8b6a 	.word	0x000b8b6a
   b516c:	2003e014 	.word	0x2003e014
   b5170:	000b8b9c 	.word	0x000b8b9c
   b5174:	2003e004 	.word	0x2003e004
   b5178:	000b891b 	.word	0x000b891b

000b517c <_GLOBAL__sub_I_trailerBlock>:
   b517c:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b517e:	4c13      	ldr	r4, [pc, #76]	; (b51cc <_GLOBAL__sub_I_trailerBlock+0x50>)
Adafruit_SSD1306 display(-1);
   b5180:	4813      	ldr	r0, [pc, #76]	; (b51d0 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b5182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5186:	f000 fd81 	bl	b5c8c <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b518a:	4912      	ldr	r1, [pc, #72]	; (b51d4 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b518c:	4620      	mov	r0, r4
   b518e:	f002 fc26 	bl	b79de <_ZN6StringC1EPK19__FlashStringHelper>
   b5192:	4910      	ldr	r1, [pc, #64]	; (b51d4 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b5194:	f104 0010 	add.w	r0, r4, #16
   b5198:	f002 fc21 	bl	b79de <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b519c:	2208      	movs	r2, #8
   b519e:	2110      	movs	r1, #16
   b51a0:	480d      	ldr	r0, [pc, #52]	; (b51d8 <_GLOBAL__sub_I_trailerBlock+0x5c>)
   b51a2:	f001 f9dd 	bl	b6560 <_ZN7MFRC522C1Ehh>
ChainableLED ledObject = ChainableLED(0, 0, 5);
   b51a6:	2200      	movs	r2, #0
   b51a8:	2305      	movs	r3, #5
   b51aa:	4611      	mov	r1, r2
   b51ac:	480b      	ldr	r0, [pc, #44]	; (b51dc <_GLOBAL__sub_I_trailerBlock+0x60>)
   b51ae:	f001 f90b 	bl	b63c8 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51b2:	4b0b      	ldr	r3, [pc, #44]	; (b51e0 <_GLOBAL__sub_I_trailerBlock+0x64>)
   b51b4:	2200      	movs	r2, #0
   b51b6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b51ba:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b51be:	609a      	str	r2, [r3, #8]
   b51c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51c4:	2002      	movs	r0, #2
   b51c6:	f001 bfaf 	b.w	b7128 <set_system_mode>
   b51ca:	bf00      	nop
   b51cc:	2003e670 	.word	0x2003e670
   b51d0:	2003e620 	.word	0x2003e620
   b51d4:	000b8c20 	.word	0x000b8c20
   b51d8:	2003e6a0 	.word	0x2003e6a0
   b51dc:	2003e698 	.word	0x2003e698
   b51e0:	2003e008 	.word	0x2003e008

000b51e4 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b51e4:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b51e6:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b51e8:	2301      	movs	r3, #1
	_pin = pin;
   b51ea:	7181      	strb	r1, [r0, #6]
	_type = type;
   b51ec:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b51ee:	7403      	strb	r3, [r0, #16]
}
   b51f0:	bd10      	pop	{r4, pc}

000b51f2 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b51f2:	b510      	push	{r4, lr}
   b51f4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b51f6:	2100      	movs	r1, #0
   b51f8:	7980      	ldrb	r0, [r0, #6]
   b51fa:	f002 fed1 	bl	b7fa0 <pinMode>
	digitalWrite(_pin, HIGH);
   b51fe:	79a0      	ldrb	r0, [r4, #6]
   b5200:	2101      	movs	r1, #1
   b5202:	f002 fede 	bl	b7fc2 <digitalWrite>
	_lastreadtime = 0;
   b5206:	2300      	movs	r3, #0
   b5208:	60e3      	str	r3, [r4, #12]
}
   b520a:	bd10      	pop	{r4, pc}

000b520c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5210:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5212:	f001 fe09 	bl	b6e28 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b5216:	68e3      	ldr	r3, [r4, #12]
   b5218:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b521a:	bf84      	itt	hi
   b521c:	2300      	movhi	r3, #0
   b521e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b5220:	7c23      	ldrb	r3, [r4, #16]
   b5222:	b923      	cbnz	r3, b522e <_ZN3DHT4readEv+0x22>
   b5224:	68e3      	ldr	r3, [r4, #12]
   b5226:	1ac0      	subs	r0, r0, r3
   b5228:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b522c:	d367      	bcc.n	b52fe <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b522e:	2500      	movs	r5, #0
   b5230:	7425      	strb	r5, [r4, #16]
   b5232:	f001 fdf9 	bl	b6e28 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b5236:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b5238:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b523a:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b523c:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b523e:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b5240:	f002 febf 	bl	b7fc2 <digitalWrite>
	delay(250);
   b5244:	20fa      	movs	r0, #250	; 0xfa
   b5246:	f002 f843 	bl	b72d0 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b524a:	79a0      	ldrb	r0, [r4, #6]
   b524c:	2101      	movs	r1, #1
   b524e:	f002 fea7 	bl	b7fa0 <pinMode>
	digitalWrite(_pin, LOW);
   b5252:	4629      	mov	r1, r5
   b5254:	79a0      	ldrb	r0, [r4, #6]
   b5256:	f002 feb4 	bl	b7fc2 <digitalWrite>
	delay(20);
   b525a:	2014      	movs	r0, #20
   b525c:	f002 f838 	bl	b72d0 <delay>
	noInterrupts();
   b5260:	f002 f8f0 	bl	b7444 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b5264:	2101      	movs	r1, #1
   b5266:	79a0      	ldrb	r0, [r4, #6]
   b5268:	f002 feab 	bl	b7fc2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b526c:	2028      	movs	r0, #40	; 0x28
   b526e:	f001 fdd3 	bl	b6e18 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b5272:	79a0      	ldrb	r0, [r4, #6]
   b5274:	4629      	mov	r1, r5
   b5276:	f002 fe93 	bl	b7fa0 <pinMode>
	uint8_t j = 0, i;
   b527a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b527c:	2701      	movs	r7, #1
   b527e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b5282:	79a0      	ldrb	r0, [r4, #6]
   b5284:	f002 feb6 	bl	b7ff4 <digitalRead>
   b5288:	42b8      	cmp	r0, r7
   b528a:	fa5f f988 	uxtb.w	r9, r8
   b528e:	d108      	bne.n	b52a2 <_ZN3DHT4readEv+0x96>
   b5290:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b5292:	f108 0801 	add.w	r8, r8, #1
   b5296:	f001 fdbf 	bl	b6e18 <HAL_Delay_Microseconds>
   b529a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b529e:	d1f0      	bne.n	b5282 <_ZN3DHT4readEv+0x76>
   b52a0:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b52a2:	79a0      	ldrb	r0, [r4, #6]
   b52a4:	f002 fea6 	bl	b7ff4 <digitalRead>

		if (counter == 255) break;
   b52a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b52ac:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b52ae:	d014      	beq.n	b52da <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b52b0:	2d03      	cmp	r5, #3
   b52b2:	d90e      	bls.n	b52d2 <_ZN3DHT4readEv+0xc6>
   b52b4:	07ea      	lsls	r2, r5, #31
   b52b6:	d40c      	bmi.n	b52d2 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b52b8:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b52ba:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b52bc:	5ca3      	ldrb	r3, [r4, r2]
   b52be:	005b      	lsls	r3, r3, #1
   b52c0:	b2db      	uxtb	r3, r3
   b52c2:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b52c4:	7a21      	ldrb	r1, [r4, #8]
   b52c6:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b52c8:	bf3c      	itt	cc
   b52ca:	f043 0301 	orrcc.w	r3, r3, #1
   b52ce:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b52d0:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b52d2:	3501      	adds	r5, #1
   b52d4:	b2ed      	uxtb	r5, r5
   b52d6:	2d55      	cmp	r5, #85	; 0x55
   b52d8:	d1d1      	bne.n	b527e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b52da:	f002 f8b5 	bl	b7448 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b52de:	2e27      	cmp	r6, #39	; 0x27
   b52e0:	d90f      	bls.n	b5302 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b52e2:	7863      	ldrb	r3, [r4, #1]
   b52e4:	7820      	ldrb	r0, [r4, #0]
   b52e6:	4418      	add	r0, r3
   b52e8:	78a3      	ldrb	r3, [r4, #2]
   b52ea:	4418      	add	r0, r3
   b52ec:	78e3      	ldrb	r3, [r4, #3]
   b52ee:	4418      	add	r0, r3
   b52f0:	7923      	ldrb	r3, [r4, #4]
   b52f2:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b52f4:	1ac3      	subs	r3, r0, r3
   b52f6:	4258      	negs	r0, r3
   b52f8:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b52fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b52fe:	2001      	movs	r0, #1
   b5300:	e7fb      	b.n	b52fa <_ZN3DHT4readEv+0xee>
	return false;
   b5302:	2000      	movs	r0, #0
   b5304:	e7f9      	b.n	b52fa <_ZN3DHT4readEv+0xee>
	...

000b5308 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b5308:	b510      	push	{r4, lr}
   b530a:	4604      	mov	r4, r0
	if (read()) {
   b530c:	f7ff ff7e 	bl	b520c <_ZN3DHT4readEv>
   b5310:	b320      	cbz	r0, b535c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b5312:	79e3      	ldrb	r3, [r4, #7]
   b5314:	2b0b      	cmp	r3, #11
   b5316:	d01b      	beq.n	b5350 <_ZN3DHT15readTemperatureEv+0x48>
   b5318:	3b15      	subs	r3, #21
   b531a:	2b01      	cmp	r3, #1
   b531c:	d81e      	bhi.n	b535c <_ZN3DHT15readTemperatureEv+0x54>
   b531e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b5320:	eddf 6a10 	vldr	s13, [pc, #64]	; b5364 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b5324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b5328:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b532c:	78e2      	ldrb	r2, [r4, #3]
   b532e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b5332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b5336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b533a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b533c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b5340:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b5344:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b5348:	d507      	bpl.n	b535a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b534a:	eeb1 0a40 	vneg.f32	s0, s0
   b534e:	e004      	b.n	b535a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b5350:	78a3      	ldrb	r3, [r4, #2]
   b5352:	ee00 3a10 	vmov	s0, r3
   b5356:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b535a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b535c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5368 <_ZN3DHT15readTemperatureEv+0x60>
   b5360:	e7fb      	b.n	b535a <_ZN3DHT15readTemperatureEv+0x52>
   b5362:	bf00      	nop
   b5364:	43800000 	.word	0x43800000
   b5368:	7fc00000 	.word	0x7fc00000

000b536c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b536c:	f7ff bfcc 	b.w	b5308 <_ZN3DHT15readTemperatureEv>

000b5370 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5374:	b085      	sub	sp, #20
   b5376:	461f      	mov	r7, r3
   b5378:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b537c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5380:	eba8 0902 	sub.w	r9, r8, r2
   b5384:	eba7 0a01 	sub.w	sl, r7, r1
   b5388:	f1b9 0f00 	cmp.w	r9, #0
   b538c:	bfb8      	it	lt
   b538e:	f1c9 0900 	rsblt	r9, r9, #0
   b5392:	f1ba 0f00 	cmp.w	sl, #0
   b5396:	bfb8      	it	lt
   b5398:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b539c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b539e:	4683      	mov	fp, r0
   b53a0:	460c      	mov	r4, r1
   b53a2:	4615      	mov	r5, r2
    if (steep) {
   b53a4:	dd04      	ble.n	b53b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b53a6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b53a8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b53aa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b53ac:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b53ae:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b53b0:	42bc      	cmp	r4, r7
   b53b2:	dd05      	ble.n	b53c0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b53b4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b53b6:	4645      	mov	r5, r8
   b53b8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b53ba:	4622      	mov	r2, r4
   b53bc:	463c      	mov	r4, r7
   b53be:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b53c0:	1b3e      	subs	r6, r7, r4
   b53c2:	b2b2      	uxth	r2, r6
   b53c4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b53c6:	eba8 0205 	sub.w	r2, r8, r5
   b53ca:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b53ce:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b53d2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b53d6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b53da:	4545      	cmp	r5, r8
   b53dc:	bfb4      	ite	lt
   b53de:	2201      	movlt	r2, #1
   b53e0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b53e4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b53e6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b53e8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b53ea:	42bc      	cmp	r4, r7
   b53ec:	dc1c      	bgt.n	b5428 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b53ee:	f8db 2000 	ldr.w	r2, [fp]
   b53f2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b53f4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b53f6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b53fa:	bfc7      	ittee	gt
   b53fc:	4629      	movgt	r1, r5
   b53fe:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5400:	462a      	movle	r2, r5
   b5402:	4621      	movle	r1, r4
   b5404:	4658      	mov	r0, fp
   b5406:	47c0      	blx	r8
        }
        err -= dy;
   b5408:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b540a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b540c:	1ab6      	subs	r6, r6, r2
   b540e:	b2b1      	uxth	r1, r6
   b5410:	b236      	sxth	r6, r6
        if (err < 0) {
   b5412:	2e00      	cmp	r6, #0
   b5414:	da05      	bge.n	b5422 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5416:	9a02      	ldr	r2, [sp, #8]
   b5418:	4415      	add	r5, r2
            err += dx;
   b541a:	9a00      	ldr	r2, [sp, #0]
   b541c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b541e:	b22d      	sxth	r5, r5
            err += dx;
   b5420:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5422:	3401      	adds	r4, #1
   b5424:	b224      	sxth	r4, r4
   b5426:	e7e0      	b.n	b53ea <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5428:	b005      	add	sp, #20
   b542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b542e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b542e:	4770      	bx	lr

000b5430 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5430:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5432:	6804      	ldr	r4, [r0, #0]
   b5434:	6924      	ldr	r4, [r4, #16]
   b5436:	46a4      	mov	ip, r4
}
   b5438:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b543c:	4760      	bx	ip

000b543e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b543e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5440:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5442:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5446:	9502      	str	r5, [sp, #8]
   b5448:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b544a:	46a4      	mov	ip, r4
}
   b544c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b544e:	4760      	bx	ip

000b5450 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5450:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5452:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5454:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5458:	9502      	str	r5, [sp, #8]
   b545a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b545c:	46a4      	mov	ip, r4
}
   b545e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5460:	4760      	bx	ip

000b5462 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5462:	b470      	push	{r4, r5, r6}
   b5464:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5468:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b546c:	6804      	ldr	r4, [r0, #0]
   b546e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5472:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5474:	46a4      	mov	ip, r4
}
   b5476:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5478:	4760      	bx	ip

000b547a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b547a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b547e:	461c      	mov	r4, r3
    startWrite();
   b5480:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5482:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5486:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5488:	4605      	mov	r5, r0
   b548a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b548c:	3c01      	subs	r4, #1
   b548e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5490:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5492:	b224      	sxth	r4, r4
    startWrite();
   b5494:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5496:	682b      	ldr	r3, [r5, #0]
   b5498:	f8cd 8004 	str.w	r8, [sp, #4]
   b549c:	9400      	str	r4, [sp, #0]
   b549e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b54a0:	4628      	mov	r0, r5
   b54a2:	463b      	mov	r3, r7
   b54a4:	4632      	mov	r2, r6
   b54a6:	4639      	mov	r1, r7
   b54a8:	47a0      	blx	r4
    endWrite();
   b54aa:	682b      	ldr	r3, [r5, #0]
   b54ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54ae:	4628      	mov	r0, r5
}
   b54b0:	b002      	add	sp, #8
   b54b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b54b6:	4718      	bx	r3

000b54b8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b54b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b54bc:	461d      	mov	r5, r3
    startWrite();
   b54be:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b54c0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b54c4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b54c6:	4604      	mov	r4, r0
   b54c8:	4617      	mov	r7, r2
   b54ca:	460e      	mov	r6, r1
    startWrite();
   b54cc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b54ce:	e9cd 7800 	strd	r7, r8, [sp]
   b54d2:	6822      	ldr	r2, [r4, #0]
   b54d4:	1e6b      	subs	r3, r5, #1
   b54d6:	4433      	add	r3, r6
   b54d8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b54da:	4620      	mov	r0, r4
   b54dc:	b21b      	sxth	r3, r3
   b54de:	463a      	mov	r2, r7
   b54e0:	4631      	mov	r1, r6
   b54e2:	47a8      	blx	r5
    endWrite();
   b54e4:	6823      	ldr	r3, [r4, #0]
   b54e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54e8:	4620      	mov	r0, r4
}
   b54ea:	b002      	add	sp, #8
   b54ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b54f0:	4718      	bx	r3

000b54f2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b54f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b54f6:	461e      	mov	r6, r3
    startWrite();
   b54f8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b54fa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b54fe:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5500:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5504:	460c      	mov	r4, r1
   b5506:	4605      	mov	r5, r0
   b5508:	4617      	mov	r7, r2
    startWrite();
   b550a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b550c:	4426      	add	r6, r4
   b550e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5510:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5512:	da0b      	bge.n	b552c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5514:	f8cd 8000 	str.w	r8, [sp]
   b5518:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b551c:	4621      	mov	r1, r4
   b551e:	464b      	mov	r3, r9
   b5520:	463a      	mov	r2, r7
   b5522:	4628      	mov	r0, r5
   b5524:	3401      	adds	r4, #1
   b5526:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5528:	b224      	sxth	r4, r4
   b552a:	e7f0      	b.n	b550e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b552e:	4628      	mov	r0, r5
}
   b5530:	b002      	add	sp, #8
   b5532:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5536:	4718      	bx	r3

000b5538 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5538:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b553a:	6802      	ldr	r2, [r0, #0]
   b553c:	9101      	str	r1, [sp, #4]
   b553e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5542:	9100      	str	r1, [sp, #0]
   b5544:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5546:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b554a:	2200      	movs	r2, #0
   b554c:	4611      	mov	r1, r2
   b554e:	47a0      	blx	r4
}
   b5550:	b002      	add	sp, #8
   b5552:	bd10      	pop	{r4, pc}

000b5554 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5558:	4299      	cmp	r1, r3
        uint16_t color) {
   b555a:	4616      	mov	r6, r2
   b555c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5560:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5564:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5566:	4680      	mov	r8, r0
   b5568:	460d      	mov	r5, r1
   b556a:	461c      	mov	r4, r3
    if(x0 == x1){
   b556c:	d113      	bne.n	b5596 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b556e:	42be      	cmp	r6, r7
   b5570:	bfc8      	it	gt
   b5572:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5574:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5578:	bfc4      	itt	gt
   b557a:	463e      	movgt	r6, r7
   b557c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b557e:	1c7b      	adds	r3, r7, #1
   b5580:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5582:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5584:	b21b      	sxth	r3, r3
   b5586:	4632      	mov	r2, r6
   b5588:	4629      	mov	r1, r5
   b558a:	4640      	mov	r0, r8
   b558c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b558e:	b003      	add	sp, #12
   b5590:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5594:	4760      	bx	ip
    } else if(y0 == y1){
   b5596:	42be      	cmp	r6, r7
   b5598:	d10a      	bne.n	b55b0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b559a:	4299      	cmp	r1, r3
   b559c:	bfc2      	ittt	gt
   b559e:	460b      	movgt	r3, r1
   b55a0:	4625      	movgt	r5, r4
   b55a2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b55a4:	1c63      	adds	r3, r4, #1
   b55a6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b55aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b55ac:	1b5b      	subs	r3, r3, r5
   b55ae:	e7e9      	b.n	b5584 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b55b0:	6953      	ldr	r3, [r2, #20]
   b55b2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b55b4:	e9cd 7900 	strd	r7, r9, [sp]
   b55b8:	f8d8 3000 	ldr.w	r3, [r8]
   b55bc:	4640      	mov	r0, r8
   b55be:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b55c0:	4632      	mov	r2, r6
   b55c2:	4623      	mov	r3, r4
   b55c4:	4629      	mov	r1, r5
   b55c6:	47b8      	blx	r7
        endWrite();
   b55c8:	f8d8 3000 	ldr.w	r3, [r8]
   b55cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55ce:	4640      	mov	r0, r8
}
   b55d0:	b003      	add	sp, #12
   b55d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b55d6:	4718      	bx	r3

000b55d8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b55d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b55dc:	461d      	mov	r5, r3
    startWrite();
   b55de:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b55e0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b55e4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b55e6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b55ea:	4604      	mov	r4, r0
   b55ec:	460f      	mov	r7, r1
   b55ee:	4616      	mov	r6, r2
    startWrite();
   b55f0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b55f2:	6823      	ldr	r3, [r4, #0]
   b55f4:	f8cd 8000 	str.w	r8, [sp]
   b55f8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b55fc:	4632      	mov	r2, r6
   b55fe:	462b      	mov	r3, r5
   b5600:	4639      	mov	r1, r7
   b5602:	4620      	mov	r0, r4
   b5604:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5606:	6823      	ldr	r3, [r4, #0]
   b5608:	f8cd 8000 	str.w	r8, [sp]
   b560c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5610:	4432      	add	r2, r6
   b5612:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5616:	4639      	mov	r1, r7
   b5618:	462b      	mov	r3, r5
   b561a:	4620      	mov	r0, r4
   b561c:	b212      	sxth	r2, r2
   b561e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5620:	6823      	ldr	r3, [r4, #0]
   b5622:	f8cd 8000 	str.w	r8, [sp]
   b5626:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b562a:	4632      	mov	r2, r6
   b562c:	464b      	mov	r3, r9
   b562e:	4639      	mov	r1, r7
   b5630:	4620      	mov	r0, r4
   b5632:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5634:	1e6b      	subs	r3, r5, #1
   b5636:	19d9      	adds	r1, r3, r7
   b5638:	6823      	ldr	r3, [r4, #0]
   b563a:	f8cd 8000 	str.w	r8, [sp]
   b563e:	6a1d      	ldr	r5, [r3, #32]
   b5640:	4620      	mov	r0, r4
   b5642:	464b      	mov	r3, r9
   b5644:	4632      	mov	r2, r6
   b5646:	b209      	sxth	r1, r1
   b5648:	47a8      	blx	r5
    endWrite();
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b564e:	4620      	mov	r0, r4
}
   b5650:	b002      	add	sp, #8
   b5652:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5656:	4718      	bx	r3

000b5658 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5658:	4770      	bx	lr

000b565a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b565a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b565e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5662:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5664:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5666:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b566a:	bf59      	ittee	pl
   b566c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b566e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5670:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5672:	81c3      	strhmi	r3, [r0, #14]
}
   b5674:	4770      	bx	lr
	...

000b5678 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5678:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b567a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b567c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b567e:	4a07      	ldr	r2, [pc, #28]	; (b569c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5680:	4d07      	ldr	r5, [pc, #28]	; (b56a0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5682:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5684:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5686:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b568c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5690:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5692:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5694:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5696:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5698:	6204      	str	r4, [r0, #32]
}
   b569a:	bd30      	pop	{r4, r5, pc}
   b569c:	01000101 	.word	0x01000101
   b56a0:	000b912c 	.word	0x000b912c

000b56a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b56a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56a8:	b089      	sub	sp, #36	; 0x24
   b56aa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b56ae:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b56b0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b56b4:	9304      	str	r3, [sp, #16]
   b56b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b56ba:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b56bc:	9305      	str	r3, [sp, #20]
   b56be:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b56c2:	4604      	mov	r4, r0
    startWrite();
   b56c4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b56c6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b56ca:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b56ce:	bf48      	it	mi
   b56d0:	f108 020e 	addmi.w	r2, r8, #14
   b56d4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b56d8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b56da:	4635      	mov	r5, r6
   b56dc:	9b03      	ldr	r3, [sp, #12]
   b56de:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b56e0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b56e4:	189a      	adds	r2, r3, r2
   b56e6:	9b05      	ldr	r3, [sp, #20]
   b56e8:	428b      	cmp	r3, r1
   b56ea:	b212      	sxth	r2, r2
   b56ec:	dd27      	ble.n	b573e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b56ee:	9b04      	ldr	r3, [sp, #16]
   b56f0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b56f2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b56f6:	9306      	str	r3, [sp, #24]
   b56f8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b56fc:	4580      	cmp	r8, r0
   b56fe:	fa1f f189 	uxth.w	r1, r9
   b5702:	dd17      	ble.n	b5734 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5704:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5706:	bf05      	ittet	eq
   b5708:	9b06      	ldreq	r3, [sp, #24]
   b570a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b570c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b570e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5710:	bf18      	it	ne
   b5712:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5714:	062b      	lsls	r3, r5, #24
   b5716:	d50a      	bpl.n	b572e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5718:	9b02      	ldr	r3, [sp, #8]
   b571a:	6820      	ldr	r0, [r4, #0]
   b571c:	9207      	str	r2, [sp, #28]
   b571e:	4419      	add	r1, r3
   b5720:	6983      	ldr	r3, [r0, #24]
   b5722:	b209      	sxth	r1, r1
   b5724:	461f      	mov	r7, r3
   b5726:	4620      	mov	r0, r4
   b5728:	4653      	mov	r3, sl
   b572a:	47b8      	blx	r7
   b572c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b572e:	f109 0901 	add.w	r9, r9, #1
   b5732:	e7e1      	b.n	b56f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5734:	9b01      	ldr	r3, [sp, #4]
   b5736:	3301      	adds	r3, #1
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	445e      	add	r6, fp
   b573c:	e7ce      	b.n	b56dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b573e:	6823      	ldr	r3, [r4, #0]
   b5740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5742:	4620      	mov	r0, r4
}
   b5744:	b009      	add	sp, #36	; 0x24
   b5746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b574a:	4718      	bx	r3

000b574c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5750:	ed2d 8b02 	vpush	{d8}
   b5754:	b091      	sub	sp, #68	; 0x44
   b5756:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5758:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b575a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b575e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5762:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5766:	9103      	str	r1, [sp, #12]
   b5768:	461f      	mov	r7, r3
   b576a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b576e:	9304      	str	r3, [sp, #16]
   b5770:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5772:	2a00      	cmp	r2, #0
   b5774:	f040 80c5 	bne.w	b5902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5778:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b577c:	428b      	cmp	r3, r1
   b577e:	f340 814c 	ble.w	b5a1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5782:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5786:	42b3      	cmp	r3, r6
   b5788:	f340 8147 	ble.w	b5a1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b578c:	2306      	movs	r3, #6
   b578e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5792:	2b00      	cmp	r3, #0
   b5794:	f340 8141 	ble.w	b5a1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5798:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b579c:	2b00      	cmp	r3, #0
   b579e:	f340 813c 	ble.w	b5a1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b57a2:	7f03      	ldrb	r3, [r0, #28]
   b57a4:	b91b      	cbnz	r3, b57ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b57a6:	2faf      	cmp	r7, #175	; 0xaf
   b57a8:	bf84      	itt	hi
   b57aa:	3701      	addhi	r7, #1
   b57ac:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b57ae:	f8db 3000 	ldr.w	r3, [fp]
   b57b2:	4658      	mov	r0, fp
   b57b4:	695b      	ldr	r3, [r3, #20]
   b57b6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b57b8:	2205      	movs	r2, #5
   b57ba:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b57bc:	2200      	movs	r2, #0
   b57be:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b57c0:	4a98      	ldr	r2, [pc, #608]	; (b5a24 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b57c2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b57c6:	18d3      	adds	r3, r2, r3
   b57c8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b57ca:	b2b3      	uxth	r3, r6
   b57cc:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b57ce:	9a05      	ldr	r2, [sp, #20]
   b57d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b57d2:	5c9b      	ldrb	r3, [r3, r2]
   b57d4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b57d6:	b2ab      	uxth	r3, r5
   b57d8:	930b      	str	r3, [sp, #44]	; 0x2c
   b57da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b57de:	9308      	str	r3, [sp, #32]
   b57e0:	9b03      	ldr	r3, [sp, #12]
   b57e2:	fb02 f905 	mul.w	r9, r2, r5
   b57e6:	fa19 f983 	uxtah	r9, r9, r3
   b57ea:	fa0f f389 	sxth.w	r3, r9
   b57ee:	ee08 3a10 	vmov	s16, r3
   b57f2:	2308      	movs	r3, #8
   b57f4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b57f6:	9b03      	ldr	r3, [sp, #12]
   b57f8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b57fc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5800:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5804:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5806:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b580a:	07d2      	lsls	r2, r2, #31
   b580c:	d552      	bpl.n	b58b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b580e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5810:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5814:	d13e      	bne.n	b5894 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5816:	2c01      	cmp	r4, #1
   b5818:	d13c      	bne.n	b5894 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b581a:	699b      	ldr	r3, [r3, #24]
   b581c:	9906      	ldr	r1, [sp, #24]
   b581e:	461f      	mov	r7, r3
   b5820:	9b04      	ldr	r3, [sp, #16]
   b5822:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5824:	b212      	sxth	r2, r2
   b5826:	4651      	mov	r1, sl
   b5828:	4658      	mov	r0, fp
   b582a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b582c:	f109 0301 	add.w	r3, r9, #1
   b5830:	fa4f f983 	sxtb.w	r9, r3
   b5834:	9b07      	ldr	r3, [sp, #28]
   b5836:	085b      	lsrs	r3, r3, #1
   b5838:	9307      	str	r3, [sp, #28]
   b583a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b583c:	3b01      	subs	r3, #1
   b583e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5842:	930a      	str	r3, [sp, #40]	; 0x28
   b5844:	d1de      	bne.n	b5804 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5846:	9f05      	ldr	r7, [sp, #20]
   b5848:	3701      	adds	r7, #1
   b584a:	b27b      	sxtb	r3, r7
   b584c:	9305      	str	r3, [sp, #20]
   b584e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5850:	3b01      	subs	r3, #1
   b5852:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5856:	9309      	str	r3, [sp, #36]	; 0x24
   b5858:	d1b9      	bne.n	b57ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b585a:	9b04      	ldr	r3, [sp, #16]
   b585c:	4543      	cmp	r3, r8
   b585e:	d00f      	beq.n	b5880 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5860:	2d01      	cmp	r5, #1
   b5862:	f8db 3000 	ldr.w	r3, [fp]
   b5866:	d13b      	bne.n	b58e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5868:	2c01      	cmp	r4, #1
   b586a:	d139      	bne.n	b58e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b586c:	9908      	ldr	r1, [sp, #32]
   b586e:	f8cd 8000 	str.w	r8, [sp]
   b5872:	3105      	adds	r1, #5
   b5874:	6a1c      	ldr	r4, [r3, #32]
   b5876:	4632      	mov	r2, r6
   b5878:	2308      	movs	r3, #8
   b587a:	b209      	sxth	r1, r1
   b587c:	4658      	mov	r0, fp
   b587e:	47a0      	blx	r4
        endWrite();
   b5880:	f8db 3000 	ldr.w	r3, [fp]
   b5884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5886:	4658      	mov	r0, fp
}
   b5888:	b011      	add	sp, #68	; 0x44
   b588a:	ecbd 8b02 	vpop	{d8}
   b588e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5892:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5894:	9906      	ldr	r1, [sp, #24]
   b5896:	fb14 f202 	smulbb	r2, r4, r2
   b589a:	440a      	add	r2, r1
   b589c:	9904      	ldr	r1, [sp, #16]
   b589e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b58a0:	9400      	str	r4, [sp, #0]
   b58a2:	69db      	ldr	r3, [r3, #28]
   b58a4:	ee18 1a10 	vmov	r1, s16
   b58a8:	461f      	mov	r7, r3
   b58aa:	b212      	sxth	r2, r2
   b58ac:	462b      	mov	r3, r5
   b58ae:	4658      	mov	r0, fp
   b58b0:	47b8      	blx	r7
   b58b2:	e7bb      	b.n	b582c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b58b4:	9a04      	ldr	r2, [sp, #16]
   b58b6:	4542      	cmp	r2, r8
   b58b8:	d0b8      	beq.n	b582c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b58ba:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b58bc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b58c0:	d107      	bne.n	b58d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b58c2:	2c01      	cmp	r4, #1
   b58c4:	d105      	bne.n	b58d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b58c6:	699b      	ldr	r3, [r3, #24]
   b58c8:	9906      	ldr	r1, [sp, #24]
   b58ca:	461f      	mov	r7, r3
   b58cc:	440a      	add	r2, r1
   b58ce:	4643      	mov	r3, r8
   b58d0:	e7a8      	b.n	b5824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b58d2:	9906      	ldr	r1, [sp, #24]
   b58d4:	f8cd 8004 	str.w	r8, [sp, #4]
   b58d8:	fb14 f202 	smulbb	r2, r4, r2
   b58dc:	440a      	add	r2, r1
   b58de:	e7df      	b.n	b58a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b58e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b58e2:	f8cd 8004 	str.w	r8, [sp, #4]
   b58e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b58ea:	9a08      	ldr	r2, [sp, #32]
   b58ec:	00e4      	lsls	r4, r4, #3
   b58ee:	440a      	add	r2, r1
   b58f0:	4611      	mov	r1, r2
   b58f2:	9400      	str	r4, [sp, #0]
   b58f4:	69dc      	ldr	r4, [r3, #28]
   b58f6:	4632      	mov	r2, r6
   b58f8:	462b      	mov	r3, r5
   b58fa:	b209      	sxth	r1, r1
   b58fc:	4658      	mov	r0, fp
   b58fe:	47a0      	blx	r4
        endWrite();
   b5900:	e7be      	b.n	b5880 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5902:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5904:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5906:	6812      	ldr	r2, [r2, #0]
   b5908:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b590a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b590c:	b2ff      	uxtb	r7, r7
   b590e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5912:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5916:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5918:	789a      	ldrb	r2, [r3, #2]
   b591a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b591c:	78da      	ldrb	r2, [r3, #3]
   b591e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5920:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5922:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5926:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b592a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b592c:	d801      	bhi.n	b5932 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b592e:	2c01      	cmp	r4, #1
   b5930:	d957      	bls.n	b59e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5932:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5936:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5938:	fa0f f38a 	sxth.w	r3, sl
   b593c:	9307      	str	r3, [sp, #28]
        startWrite();
   b593e:	f8db 3000 	ldr.w	r3, [fp]
   b5942:	4658      	mov	r0, fp
   b5944:	695b      	ldr	r3, [r3, #20]
   b5946:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5948:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b594a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b594e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5950:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5954:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5956:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5958:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b595a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b595c:	429f      	cmp	r7, r3
   b595e:	d28f      	bcs.n	b5880 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5960:	9b07      	ldr	r3, [sp, #28]
   b5962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5964:	443b      	add	r3, r7
   b5966:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b596a:	2200      	movs	r2, #0
   b596c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b596e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5970:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5972:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5976:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b597a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b597e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5980:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5982:	9905      	ldr	r1, [sp, #20]
   b5984:	4291      	cmp	r1, r2
   b5986:	d241      	bcs.n	b5a0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5988:	1c5a      	adds	r2, r3, #1
   b598a:	b2d2      	uxtb	r2, r2
   b598c:	075b      	lsls	r3, r3, #29
   b598e:	920d      	str	r2, [sp, #52]	; 0x34
   b5990:	d107      	bne.n	b59a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5992:	9b06      	ldr	r3, [sp, #24]
   b5994:	9906      	ldr	r1, [sp, #24]
   b5996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5998:	3301      	adds	r3, #1
   b599a:	b29b      	uxth	r3, r3
   b599c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b59a0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b59a2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b59a6:	d012      	beq.n	b59ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b59a8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59aa:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b59ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b59b2:	d11a      	bne.n	b59ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b59b4:	2c01      	cmp	r4, #1
   b59b6:	d118      	bne.n	b59ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b59b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b59ba:	699b      	ldr	r3, [r3, #24]
   b59bc:	4411      	add	r1, r2
   b59be:	9a05      	ldr	r2, [sp, #20]
   b59c0:	4411      	add	r1, r2
   b59c2:	461e      	mov	r6, r3
   b59c4:	4652      	mov	r2, sl
   b59c6:	9b04      	ldr	r3, [sp, #16]
   b59c8:	b209      	sxth	r1, r1
   b59ca:	4658      	mov	r0, fp
   b59cc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b59ce:	9e05      	ldr	r6, [sp, #20]
   b59d0:	3601      	adds	r6, #1
   b59d2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b59d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b59d8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b59da:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b59de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b59e0:	e7ce      	b.n	b5980 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b59e2:	2300      	movs	r3, #0
   b59e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b59e8:	e7a9      	b.n	b593e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b59ea:	9805      	ldr	r0, [sp, #20]
   b59ec:	9a08      	ldr	r2, [sp, #32]
   b59ee:	4402      	add	r2, r0
   b59f0:	fb02 1105 	mla	r1, r2, r5, r1
   b59f4:	9a04      	ldr	r2, [sp, #16]
   b59f6:	e9cd 4200 	strd	r4, r2, [sp]
   b59fa:	69db      	ldr	r3, [r3, #28]
   b59fc:	ee18 2a10 	vmov	r2, s16
   b5a00:	461e      	mov	r6, r3
   b5a02:	b209      	sxth	r1, r1
   b5a04:	462b      	mov	r3, r5
   b5a06:	4658      	mov	r0, fp
   b5a08:	47b0      	blx	r6
   b5a0a:	e7e0      	b.n	b59ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5a0e:	3701      	adds	r7, #1
   b5a10:	4498      	add	r8, r3
   b5a12:	fa5f f888 	uxtb.w	r8, r8
   b5a16:	b2ff      	uxtb	r7, r7
   b5a18:	e79f      	b.n	b595a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5a1a:	b011      	add	sp, #68	; 0x44
   b5a1c:	ecbd 8b02 	vpop	{d8}
   b5a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a24:	000b8c22 	.word	0x000b8c22

000b5a28 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5a2a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5a2c:	b085      	sub	sp, #20
   b5a2e:	4604      	mov	r4, r0
   b5a30:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5a32:	2a00      	cmp	r2, #0
   b5a34:	d134      	bne.n	b5aa0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5a36:	290a      	cmp	r1, #10
   b5a38:	d108      	bne.n	b5a4c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5a3a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5a3c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5a3e:	7e42      	ldrb	r2, [r0, #25]
   b5a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5a44:	8263      	strh	r3, [r4, #18]
}
   b5a46:	2001      	movs	r0, #1
   b5a48:	b005      	add	sp, #20
   b5a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5a4c:	290d      	cmp	r1, #13
   b5a4e:	d0fa      	beq.n	b5a46 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5a50:	7ee1      	ldrb	r1, [r4, #27]
   b5a52:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5a54:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5a56:	b171      	cbz	r1, b5a76 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5a58:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5a5c:	2106      	movs	r1, #6
   b5a5e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5a62:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5a66:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5a68:	bfc1      	itttt	gt
   b5a6a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5a6e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5a70:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5a74:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5a76:	8ae2      	ldrh	r2, [r4, #22]
   b5a78:	9201      	str	r2, [sp, #4]
   b5a7a:	8aa2      	ldrh	r2, [r4, #20]
   b5a7c:	9200      	str	r2, [sp, #0]
   b5a7e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5a82:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5a86:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	f7ff fe5e 	bl	b574c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5a90:	7e23      	ldrb	r3, [r4, #24]
   b5a92:	8a22      	ldrh	r2, [r4, #16]
   b5a94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5a98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5a9c:	8223      	strh	r3, [r4, #16]
   b5a9e:	e7d2      	b.n	b5a46 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5aa0:	290a      	cmp	r1, #10
   b5aa2:	d107      	bne.n	b5ab4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5aa4:	2300      	movs	r3, #0
   b5aa6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5aa8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5aaa:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5aac:	8a43      	ldrh	r3, [r0, #18]
   b5aae:	fb01 3302 	mla	r3, r1, r2, r3
   b5ab2:	e7c7      	b.n	b5a44 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5ab4:	290d      	cmp	r1, #13
   b5ab6:	d0c6      	beq.n	b5a46 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b5ab8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b5aba:	42a9      	cmp	r1, r5
   b5abc:	d3c3      	bcc.n	b5a46 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5abe:	7a51      	ldrb	r1, [r2, #9]
   b5ac0:	4299      	cmp	r1, r3
   b5ac2:	d3c0      	bcc.n	b5a46 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5ac4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b5ac6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b5ac8:	b2ed      	uxtb	r5, r5
   b5aca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5ace:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5ad0:	b328      	cbz	r0, b5b1e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5ad2:	78e9      	ldrb	r1, [r5, #3]
   b5ad4:	b319      	cbz	r1, b5b1e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5ad6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5ad8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5ada:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5adc:	b191      	cbz	r1, b5b04 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5ade:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5ae2:	4408      	add	r0, r1
   b5ae4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5ae8:	fb06 1100 	mla	r1, r6, r0, r1
   b5aec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5af0:	4281      	cmp	r1, r0
   b5af2:	dd07      	ble.n	b5b04 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5af4:	2000      	movs	r0, #0
   b5af6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5af8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5afc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5afe:	fb02 1207 	mla	r2, r2, r7, r1
   b5b02:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5b04:	8ae2      	ldrh	r2, [r4, #22]
   b5b06:	9201      	str	r2, [sp, #4]
   b5b08:	8aa2      	ldrh	r2, [r4, #20]
   b5b0a:	9200      	str	r2, [sp, #0]
   b5b0c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5b10:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5b14:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5b18:	4620      	mov	r0, r4
   b5b1a:	f7ff fe17 	bl	b574c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5b1e:	7929      	ldrb	r1, [r5, #4]
   b5b20:	7e22      	ldrb	r2, [r4, #24]
   b5b22:	8a23      	ldrh	r3, [r4, #16]
   b5b24:	fb01 3302 	mla	r3, r1, r2, r3
   b5b28:	e7b8      	b.n	b5a9c <_ZN12Adafruit_GFX5writeEh+0x74>

000b5b2a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5b2a:	2901      	cmp	r1, #1
   b5b2c:	bf38      	it	cc
   b5b2e:	2101      	movcc	r1, #1
   b5b30:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5b32:	7641      	strb	r1, [r0, #25]
}
   b5b34:	4770      	bx	lr

000b5b36 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5b36:	4770      	bx	lr

000b5b38 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5b38:	b510      	push	{r4, lr}
  }
   b5b3a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5b3c:	4604      	mov	r4, r0
  }
   b5b3e:	f7fe faaa 	bl	b4096 <_ZdlPvj>
   b5b42:	4620      	mov	r0, r4
   b5b44:	bd10      	pop	{r4, pc}
	...

000b5b48 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5b48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b4a:	4604      	mov	r4, r0
   b5b4c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5b4e:	7922      	ldrb	r2, [r4, #4]
   b5b50:	68a3      	ldr	r3, [r4, #8]
   b5b52:	b132      	cbz	r2, b5b62 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5b54:	b9a3      	cbnz	r3, b5b80 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5b56:	490b      	ldr	r1, [pc, #44]	; (b5b84 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5b58:	b002      	add	sp, #8
   b5b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5b5e:	f001 bdcf 	b.w	b7700 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5b62:	4a09      	ldr	r2, [pc, #36]	; (b5b88 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5b64:	7b26      	ldrb	r6, [r4, #12]
   b5b66:	4d09      	ldr	r5, [pc, #36]	; (b5b8c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5b68:	4909      	ldr	r1, [pc, #36]	; (b5b90 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5b6a:	7b64      	ldrb	r4, [r4, #13]
   b5b6c:	2e01      	cmp	r6, #1
   b5b6e:	bf18      	it	ne
   b5b70:	4629      	movne	r1, r5
   b5b72:	e9cd 1400 	strd	r1, r4, [sp]
   b5b76:	4907      	ldr	r1, [pc, #28]	; (b5b94 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5b78:	f7fe faa4 	bl	b40c4 <_ZN5Print6printfEPKcz>
  }
   b5b7c:	b002      	add	sp, #8
   b5b7e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5b80:	4a05      	ldr	r2, [pc, #20]	; (b5b98 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5b82:	e7ef      	b.n	b5b64 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5b84:	000b918d 	.word	0x000b918d
   b5b88:	000b8a11 	.word	0x000b8a11
   b5b8c:	000b9189 	.word	0x000b9189
   b5b90:	000b9185 	.word	0x000b9185
   b5b94:	000b91a3 	.word	0x000b91a3
   b5b98:	000b917c 	.word	0x000b917c

000b5b9c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b5b9c:	b510      	push	{r4, lr}
   b5b9e:	4b04      	ldr	r3, [pc, #16]	; (b5bb0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5ba0:	6003      	str	r3, [r0, #0]
   b5ba2:	4604      	mov	r4, r0
{
  if (buffer)
   b5ba4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5ba6:	b108      	cbz	r0, b5bac <_ZN16Adafruit_SSD1306D1Ev+0x10>
  {
    free(buffer);
   b5ba8:	f001 fb5a 	bl	b7260 <free>
    buffer = NULL;
  }
}
   b5bac:	4620      	mov	r0, r4
   b5bae:	bd10      	pop	{r4, pc}
   b5bb0:	000b97bc 	.word	0x000b97bc

000b5bb4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b5bb4:	b510      	push	{r4, lr}
   b5bb6:	4604      	mov	r4, r0
}
   b5bb8:	f7ff fff0 	bl	b5b9c <_ZN16Adafruit_SSD1306D1Ev>
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	2150      	movs	r1, #80	; 0x50
   b5bc0:	f7fe fa69 	bl	b4096 <_ZdlPvj>
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	bd10      	pop	{r4, pc}

000b5bc8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5bc8:	2900      	cmp	r1, #0
{
   b5bca:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5bcc:	db4b      	blt.n	b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5bce:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5bd2:	428c      	cmp	r4, r1
   b5bd4:	dd47      	ble.n	b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5bd6:	2a00      	cmp	r2, #0
   b5bd8:	db45      	blt.n	b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5bda:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5bde:	4294      	cmp	r4, r2
   b5be0:	dd41      	ble.n	b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5be2:	7e84      	ldrb	r4, [r0, #26]
  {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation())
   b5be4:	2c02      	cmp	r4, #2
   b5be6:	d01f      	beq.n	b5c28 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5be8:	2c03      	cmp	r4, #3
   b5bea:	d026      	beq.n	b5c3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5bec:	2c01      	cmp	r4, #1
   b5bee:	d104      	bne.n	b5bfa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    {
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5bf0:	8904      	ldrh	r4, [r0, #8]
   b5bf2:	43d2      	mvns	r2, r2
   b5bf4:	4414      	add	r4, r2
      break;
   b5bf6:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5bf8:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color)
   b5bfa:	2b01      	cmp	r3, #1
   b5bfc:	d023      	beq.n	b5c46 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5bfe:	2b02      	cmp	r3, #2
   b5c00:	d032      	beq.n	b5c68 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5c02:	bb83      	cbnz	r3, b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    {
    case WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b5c04:	2a00      	cmp	r2, #0
   b5c06:	4613      	mov	r3, r2
   b5c08:	8904      	ldrh	r4, [r0, #8]
   b5c0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c0c:	bfb8      	it	lt
   b5c0e:	1dd3      	addlt	r3, r2, #7
   b5c10:	10db      	asrs	r3, r3, #3
   b5c12:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5c16:	f002 0207 	and.w	r2, r2, #7
   b5c1a:	2301      	movs	r3, #1
   b5c1c:	4093      	lsls	r3, r2
   b5c1e:	5c42      	ldrb	r2, [r0, r1]
   b5c20:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b5c24:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   b5c26:	e01e      	b.n	b5c66 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   b5c28:	8904      	ldrh	r4, [r0, #8]
   b5c2a:	3c01      	subs	r4, #1
   b5c2c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5c2e:	8944      	ldrh	r4, [r0, #10]
   b5c30:	43d2      	mvns	r2, r2
   b5c32:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b5c34:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5c36:	b212      	sxth	r2, r2
      break;
   b5c38:	e7df      	b.n	b5bfa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5c3a:	8944      	ldrh	r4, [r0, #10]
   b5c3c:	3c01      	subs	r4, #1
   b5c3e:	1a64      	subs	r4, r4, r1
      break;
   b5c40:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5c42:	b222      	sxth	r2, r4
      break;
   b5c44:	e7d9      	b.n	b5bfa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b5c46:	2a00      	cmp	r2, #0
   b5c48:	8904      	ldrh	r4, [r0, #8]
   b5c4a:	4613      	mov	r3, r2
   b5c4c:	bfb8      	it	lt
   b5c4e:	1dd3      	addlt	r3, r2, #7
   b5c50:	10db      	asrs	r3, r3, #3
   b5c52:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5c56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5c58:	f002 0007 	and.w	r0, r2, #7
   b5c5c:	2201      	movs	r2, #1
   b5c5e:	4082      	lsls	r2, r0
   b5c60:	5c58      	ldrb	r0, [r3, r1]
   b5c62:	4302      	orrs	r2, r0
   b5c64:	545a      	strb	r2, [r3, r1]
}
   b5c66:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b5c68:	2a00      	cmp	r2, #0
   b5c6a:	4613      	mov	r3, r2
   b5c6c:	8904      	ldrh	r4, [r0, #8]
   b5c6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c70:	bfb8      	it	lt
   b5c72:	1dd3      	addlt	r3, r2, #7
   b5c74:	10db      	asrs	r3, r3, #3
   b5c76:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5c7a:	f002 0207 	and.w	r2, r2, #7
   b5c7e:	2301      	movs	r3, #1
   b5c80:	fa03 f202 	lsl.w	r2, r3, r2
   b5c84:	5c43      	ldrb	r3, [r0, r1]
   b5c86:	405a      	eors	r2, r3
   b5c88:	e7cc      	b.n	b5c24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5c8c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5c8c:	b570      	push	{r4, r5, r6, lr}
                                                     rstPin(rst_pin)
   b5c8e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5c90:	4604      	mov	r4, r0
   b5c92:	460e      	mov	r6, r1
                                                     rstPin(rst_pin)
   b5c94:	2180      	movs	r1, #128	; 0x80
   b5c96:	f7ff fcef 	bl	b5678 <_ZN12Adafruit_GFXC1Ess>
   b5c9a:	2500      	movs	r5, #0
   b5c9c:	4b0d      	ldr	r3, [pc, #52]	; (b5cd4 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b5c9e:	6023      	str	r3, [r4, #0]
   b5ca0:	6265      	str	r5, [r4, #36]	; 0x24
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5ca2:	f002 f9eb 	bl	b807c <_Z19__fetch_global_Wirev>
                                                     rstPin(rst_pin)
   b5ca6:	23ff      	movs	r3, #255	; 0xff
   b5ca8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5cac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b5cb0:	4b09      	ldr	r3, [pc, #36]	; (b5cd8 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b5cb2:	63a3      	str	r3, [r4, #56]	; 0x38
   b5cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5cb8:	2301      	movs	r3, #1
   b5cba:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b5cbe:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5cc0:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b5cc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5cc8:	6425      	str	r5, [r4, #64]	; 0x40
   b5cca:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b5cce:	4620      	mov	r0, r4
   b5cd0:	bd70      	pop	{r4, r5, r6, pc}
   b5cd2:	bf00      	nop
   b5cd4:	000b97bc 	.word	0x000b97bc
   b5cd8:	000b91c8 	.word	0x000b91c8

000b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
{
   b5cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cde:	4604      	mov	r4, r0
  if (wire)
   b5ce0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5ce2:	460d      	mov	r5, r1
  if (wire)
   b5ce4:	b190      	cbz	r0, b5d0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5ce6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5cea:	f001 fba1 	bl	b7430 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5cee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cf0:	6803      	ldr	r3, [r0, #0]
   b5cf2:	2100      	movs	r1, #0
   b5cf4:	689b      	ldr	r3, [r3, #8]
   b5cf6:	4798      	blx	r3
    WIRE_WRITE(c);
   b5cf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cfa:	6803      	ldr	r3, [r0, #0]
   b5cfc:	4629      	mov	r1, r5
   b5cfe:	689b      	ldr	r3, [r3, #8]
   b5d00:	4798      	blx	r3
    wire->endTransmission();
   b5d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5d08:	f001 bb99 	b.w	b743e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5d0c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5d10:	4601      	mov	r1, r0
   b5d12:	b298      	uxth	r0, r3
   b5d14:	f002 f955 	bl	b7fc2 <digitalWrite>
  if (spi)
   b5d18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d1a:	b120      	cbz	r0, b5d26 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5d1c:	4629      	mov	r1, r5
}
   b5d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5d22:	f001 be0b 	b.w	b793c <_ZN8SPIClass8transferEh>
   b5d26:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5d28:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5d2a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5d2e:	ea05 0107 	and.w	r1, r5, r7
   b5d32:	b280      	uxth	r0, r0
   b5d34:	f002 f945 	bl	b7fc2 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5d38:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d3c:	2101      	movs	r1, #1
   b5d3e:	b280      	uxth	r0, r0
   b5d40:	f002 f93f 	bl	b7fc2 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5d44:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d48:	2100      	movs	r1, #0
   b5d4a:	b280      	uxth	r0, r0
   b5d4c:	f002 f939 	bl	b7fc2 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5d50:	3e01      	subs	r6, #1
   b5d52:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5d56:	d1e8      	bne.n	b5d2a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d5a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i)
{
   b5d5a:	b538      	push	{r3, r4, r5, lr}
   b5d5c:	4604      	mov	r4, r0
  TRANSACTION_START
   b5d5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5d60:	460d      	mov	r5, r1
  TRANSACTION_START
   b5d62:	b180      	cbz	r0, b5d86 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5d64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5d66:	f001 fb55 	bl	b7414 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5d6a:	2d00      	cmp	r5, #0
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	bf14      	ite	ne
   b5d70:	21a7      	movne	r1, #167	; 0xa7
   b5d72:	21a6      	moveq	r1, #166	; 0xa6
   b5d74:	f7ff ffb2 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5d78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d7a:	b188      	cbz	r0, b5da0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5d7c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5d82:	f001 bb47 	b.w	b7414 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d88:	b118      	cbz	r0, b5d92 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5d8a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d8e:	f001 fd67 	bl	b7860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d92:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d96:	2100      	movs	r1, #0
   b5d98:	b280      	uxth	r0, r0
   b5d9a:	f002 f912 	bl	b7fc2 <digitalWrite>
   b5d9e:	e7e4      	b.n	b5d6a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5da0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5da4:	2101      	movs	r1, #1
   b5da6:	b280      	uxth	r0, r0
   b5da8:	f002 f90b 	bl	b7fc2 <digitalWrite>
   b5dac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5dae:	b118      	cbz	r0, b5db8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5db4:	f001 bd3a 	b.w	b782c <_ZN8SPIClass14endTransactionEv>
}
   b5db8:	bd38      	pop	{r3, r4, r5, pc}

000b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
{
   b5dba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5dbe:	4604      	mov	r4, r0
  if (wire)
   b5dc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5dc2:	460d      	mov	r5, r1
  if (wire)
   b5dc4:	188f      	adds	r7, r1, r2
   b5dc6:	b340      	cbz	r0, b5e1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5dc8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5dcc:	f001 fb30 	bl	b7430 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5dd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5dd2:	6803      	ldr	r3, [r0, #0]
   b5dd4:	2100      	movs	r1, #0
   b5dd6:	689b      	ldr	r3, [r3, #8]
   b5dd8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5dda:	2601      	movs	r6, #1
    while (n--)
   b5ddc:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5dde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--)
   b5de0:	d017      	beq.n	b5e12 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if (bytesOut >= WIRE_MAX)
   b5de2:	2e1f      	cmp	r6, #31
   b5de4:	d90c      	bls.n	b5e00 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5de6:	f001 fb2a 	bl	b743e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5dea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5dee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5df0:	f001 fb1e 	bl	b7430 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5df4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5df6:	6803      	ldr	r3, [r0, #0]
   b5df8:	2100      	movs	r1, #0
   b5dfa:	689b      	ldr	r3, [r3, #8]
   b5dfc:	4798      	blx	r3
        bytesOut = 1;
   b5dfe:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5e00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5e02:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5e06:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5e08:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5e0a:	689b      	ldr	r3, [r3, #8]
   b5e0c:	4798      	blx	r3
      bytesOut++;
   b5e0e:	b2f6      	uxtb	r6, r6
    while (n--)
   b5e10:	e7e4      	b.n	b5ddc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5e12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5e16:	f001 bb12 	b.w	b743e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5e1a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5e1e:	4601      	mov	r1, r0
   b5e20:	b298      	uxth	r0, r3
   b5e22:	f002 f8ce 	bl	b7fc2 <digitalWrite>
    while (n--)
   b5e26:	42bd      	cmp	r5, r7
   b5e28:	d022      	beq.n	b5e70 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if (spi)
   b5e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   b5e2c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5e30:	b118      	cbz	r0, b5e3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5e32:	4649      	mov	r1, r9
   b5e34:	f001 fd82 	bl	b793c <_ZN8SPIClass8transferEh>
   b5e38:	e7f5      	b.n	b5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5e3a:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5e3c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5e40:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5e44:	ea09 0108 	and.w	r1, r9, r8
   b5e48:	b280      	uxth	r0, r0
   b5e4a:	f002 f8ba 	bl	b7fc2 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5e4e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e52:	2101      	movs	r1, #1
   b5e54:	b280      	uxth	r0, r0
   b5e56:	f002 f8b4 	bl	b7fc2 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5e5a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e5e:	2100      	movs	r1, #0
   b5e60:	b280      	uxth	r0, r0
   b5e62:	f002 f8ae 	bl	b7fc2 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5e66:	3e01      	subs	r6, #1
   b5e68:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5e6c:	d1e8      	bne.n	b5e40 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5e6e:	e7da      	b.n	b5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5e74 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5e74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5e78:	1dda      	adds	r2, r3, #7
   b5e7a:	bf48      	it	mi
   b5e7c:	f103 020e 	addmi.w	r2, r3, #14
   b5e80:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5e84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5e86:	10d2      	asrs	r2, r2, #3
   b5e88:	435a      	muls	r2, r3
   b5e8a:	2100      	movs	r1, #0
   b5e8c:	f002 bb34 	b.w	b84f8 <memset>

000b5e90 <_ZN16Adafruit_SSD13065beginEhhbb>:
{
   b5e90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e94:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5e96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   b5e98:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5e9c:	4604      	mov	r4, r0
   b5e9e:	460f      	mov	r7, r1
   b5ea0:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5ea2:	b1d3      	cbz	r3, b5eda <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	f7ff ffe5 	bl	b5e74 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32)
   b5eaa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b5eae:	2a20      	cmp	r2, #32
   b5eb0:	dc25      	bgt.n	b5efe <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5eb2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5eb6:	2320      	movs	r3, #32
   b5eb8:	3a20      	subs	r2, #32
   b5eba:	3973      	subs	r1, #115	; 0x73
   b5ebc:	2001      	movs	r0, #1
   b5ebe:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5ec2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b5ec6:	2373      	movs	r3, #115	; 0x73
   b5ec8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5ecc:	9300      	str	r3, [sp, #0]
   b5ece:	f342 024f 	sbfx	r2, r2, #1, #16
   b5ed2:	4b85      	ldr	r3, [pc, #532]	; (b60e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b5ed4:	f341 014f 	sbfx	r1, r1, #1, #16
   b5ed8:	e01b      	b.n	b5f12 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5eda:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5ede:	1dd8      	adds	r0, r3, #7
   b5ee0:	bf48      	it	mi
   b5ee2:	f103 000e 	addmi.w	r0, r3, #14
   b5ee6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5eea:	10c0      	asrs	r0, r0, #3
   b5eec:	4358      	muls	r0, r3
   b5eee:	f001 f9af 	bl	b7250 <malloc>
   b5ef2:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5ef4:	2800      	cmp	r0, #0
   b5ef6:	d1d5      	bne.n	b5ea4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5ef8:	b004      	add	sp, #16
   b5efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0, 0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b5efe:	2340      	movs	r3, #64	; 0x40
   b5f00:	f04f 0c01 	mov.w	ip, #1
   b5f04:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b5f08:	2380      	movs	r3, #128	; 0x80
   b5f0a:	9300      	str	r3, [sp, #0]
   b5f0c:	2200      	movs	r2, #0
   b5f0e:	4b77      	ldr	r3, [pc, #476]	; (b60ec <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b5f10:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff fbc6 	bl	b56a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire)
   b5f18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5f1a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire)
   b5f1e:	2800      	cmp	r0, #0
   b5f20:	d078      	beq.n	b6014 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5f22:	2d00      	cmp	r5, #0
   b5f24:	d174      	bne.n	b6010 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b5f26:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5f2a:	2b20      	cmp	r3, #32
   b5f2c:	bf0c      	ite	eq
   b5f2e:	253c      	moveq	r5, #60	; 0x3c
   b5f30:	253d      	movne	r5, #61	; 0x3d
   b5f32:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   b5f36:	f1b8 0f00 	cmp.w	r8, #0
   b5f3a:	d001      	beq.n	b5f40 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      wire->begin();
   b5f3c:	f001 fa6e 	bl	b741c <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0))
   b5f40:	b1fe      	cbz	r6, b5f82 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b5f42:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5f46:	2800      	cmp	r0, #0
   b5f48:	db1b      	blt.n	b5f82 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(rstPin, OUTPUT);
   b5f4a:	2101      	movs	r1, #1
   b5f4c:	b280      	uxth	r0, r0
   b5f4e:	f002 f827 	bl	b7fa0 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5f52:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5f56:	2101      	movs	r1, #1
   b5f58:	b280      	uxth	r0, r0
   b5f5a:	f002 f832 	bl	b7fc2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5f5e:	2001      	movs	r0, #1
   b5f60:	f001 f9b6 	bl	b72d0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5f64:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5f68:	2100      	movs	r1, #0
   b5f6a:	b280      	uxth	r0, r0
   b5f6c:	f002 f829 	bl	b7fc2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5f70:	200a      	movs	r0, #10
   b5f72:	f001 f9ad 	bl	b72d0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5f76:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5f7a:	2101      	movs	r1, #1
   b5f7c:	b280      	uxth	r0, r0
   b5f7e:	f002 f820 	bl	b7fc2 <digitalWrite>
  TRANSACTION_START
   b5f82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f84:	2800      	cmp	r0, #0
   b5f86:	d074      	beq.n	b6072 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b5f88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5f8a:	f001 fa43 	bl	b7414 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5f8e:	2204      	movs	r2, #4
   b5f90:	4957      	ldr	r1, [pc, #348]	; (b60f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b5f92:	4620      	mov	r0, r4
   b5f94:	f7ff ff11 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5f98:	8961      	ldrh	r1, [r4, #10]
   b5f9a:	3901      	subs	r1, #1
   b5f9c:	b2c9      	uxtb	r1, r1
   b5f9e:	4620      	mov	r0, r4
   b5fa0:	f7ff fe9c 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5fa4:	4953      	ldr	r1, [pc, #332]	; (b60f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5fa6:	2204      	movs	r2, #4
   b5fa8:	4620      	mov	r0, r4
   b5faa:	f7ff ff06 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5fae:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5fb2:	2b01      	cmp	r3, #1
   b5fb4:	bf0c      	ite	eq
   b5fb6:	2110      	moveq	r1, #16
   b5fb8:	2114      	movne	r1, #20
   b5fba:	4620      	mov	r0, r4
   b5fbc:	f7ff fe8e 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5fc0:	2204      	movs	r2, #4
   b5fc2:	494d      	ldr	r1, [pc, #308]	; (b60f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f7ff fef8 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if ((WIDTH == 128) && (HEIGHT == 32))
   b5fca:	68a3      	ldr	r3, [r4, #8]
   b5fcc:	4a4b      	ldr	r2, [pc, #300]	; (b60fc <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5fce:	4293      	cmp	r3, r2
   b5fd0:	d15c      	bne.n	b608c <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5fd2:	494b      	ldr	r1, [pc, #300]	; (b6100 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5fd4:	2204      	movs	r2, #4
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	f7ff feef 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5fdc:	21d9      	movs	r1, #217	; 0xd9
   b5fde:	4620      	mov	r0, r4
   b5fe0:	f7ff fe7c 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5fe4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5fe8:	2b01      	cmp	r3, #1
   b5fea:	bf0c      	ite	eq
   b5fec:	2122      	moveq	r1, #34	; 0x22
   b5fee:	21f1      	movne	r1, #241	; 0xf1
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	f7ff fe73 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	4942      	ldr	r1, [pc, #264]	; (b6104 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5ffa:	2206      	movs	r2, #6
   b5ffc:	f7ff fedd 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6000:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6002:	2800      	cmp	r0, #0
   b6004:	d063      	beq.n	b60ce <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b6006:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6008:	f001 fa04 	bl	b7414 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b600c:	2001      	movs	r0, #1
   b600e:	e773      	b.n	b5ef8 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6010:	b26d      	sxtb	r5, r5
   b6012:	e78e      	b.n	b5f32 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6014:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6018:	2101      	movs	r1, #1
   b601a:	b280      	uxth	r0, r0
   b601c:	f001 ffc0 	bl	b7fa0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6020:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6024:	2101      	movs	r1, #1
   b6026:	b280      	uxth	r0, r0
   b6028:	f001 ffba 	bl	b7fa0 <pinMode>
    SSD1306_DESELECT
   b602c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6030:	2101      	movs	r1, #1
   b6032:	b280      	uxth	r0, r0
   b6034:	f001 ffc5 	bl	b7fc2 <digitalWrite>
    if (spi)
   b6038:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b603a:	b13d      	cbz	r5, b604c <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if (periphBegin)
   b603c:	f1b8 0f00 	cmp.w	r8, #0
   b6040:	f43f af7e 	beq.w	b5f40 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
        spi->begin();
   b6044:	4628      	mov	r0, r5
   b6046:	f001 fbdd 	bl	b7804 <_ZN8SPIClass5beginEv>
   b604a:	e779      	b.n	b5f40 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b604c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6050:	2101      	movs	r1, #1
   b6052:	b280      	uxth	r0, r0
   b6054:	f001 ffa4 	bl	b7fa0 <pinMode>
      pinMode(clkPin, OUTPUT);
   b6058:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b605c:	2101      	movs	r1, #1
   b605e:	b280      	uxth	r0, r0
   b6060:	f001 ff9e 	bl	b7fa0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6064:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6068:	4629      	mov	r1, r5
   b606a:	b280      	uxth	r0, r0
   b606c:	f001 ffa9 	bl	b7fc2 <digitalWrite>
   b6070:	e766      	b.n	b5f40 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b6072:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6074:	b118      	cbz	r0, b607e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6076:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b607a:	f001 fbf1 	bl	b7860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b607e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6082:	2100      	movs	r1, #0
   b6084:	b280      	uxth	r0, r0
   b6086:	f001 ff9c 	bl	b7fc2 <digitalWrite>
   b608a:	e780      	b.n	b5f8e <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  else if ((WIDTH == 128) && (HEIGHT == 64))
   b608c:	4a1e      	ldr	r2, [pc, #120]	; (b6108 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b608e:	4293      	cmp	r3, r2
   b6090:	d10e      	bne.n	b60b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6092:	491e      	ldr	r1, [pc, #120]	; (b610c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6094:	2203      	movs	r2, #3
   b6096:	4620      	mov	r0, r4
   b6098:	f7ff fe8f 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b609c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b60a0:	2b01      	cmp	r3, #1
   b60a2:	bf0c      	ite	eq
   b60a4:	219f      	moveq	r1, #159	; 0x9f
   b60a6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b60a8:	4620      	mov	r0, r4
   b60aa:	f7ff fe17 	bl	b5cdc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b60ae:	e795      	b.n	b5fdc <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  else if ((WIDTH == 96) && (HEIGHT == 16))
   b60b0:	4a17      	ldr	r2, [pc, #92]	; (b6110 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b60b2:	4293      	cmp	r3, r2
   b60b4:	d192      	bne.n	b5fdc <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b60b6:	4917      	ldr	r1, [pc, #92]	; (b6114 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b60b8:	2203      	movs	r2, #3
   b60ba:	4620      	mov	r0, r4
   b60bc:	f7ff fe7d 	bl	b5dba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b60c0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b60c4:	2b01      	cmp	r3, #1
   b60c6:	bf0c      	ite	eq
   b60c8:	2110      	moveq	r1, #16
   b60ca:	21af      	movne	r1, #175	; 0xaf
   b60cc:	e7ec      	b.n	b60a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b60ce:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60d2:	2101      	movs	r1, #1
   b60d4:	b280      	uxth	r0, r0
   b60d6:	f001 ff74 	bl	b7fc2 <digitalWrite>
   b60da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b60dc:	2800      	cmp	r0, #0
   b60de:	d095      	beq.n	b600c <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b60e0:	f001 fba4 	bl	b782c <_ZN8SPIClass14endTransactionEv>
   b60e4:	e792      	b.n	b600c <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b60e6:	bf00      	nop
   b60e8:	000b91d4 	.word	0x000b91d4
   b60ec:	000b93b4 	.word	0x000b93b4
   b60f0:	000b981c 	.word	0x000b981c
   b60f4:	000b9820 	.word	0x000b9820
   b60f8:	000b9824 	.word	0x000b9824
   b60fc:	00200080 	.word	0x00200080
   b6100:	000b982e 	.word	0x000b982e
   b6104:	000b9828 	.word	0x000b9828
   b6108:	00400080 	.word	0x00400080
   b610c:	000b9832 	.word	0x000b9832
   b6110:	00100060 	.word	0x00100060
   b6114:	000b9835 	.word	0x000b9835

000b6118 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
{
   b6118:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT))
   b611a:	2a00      	cmp	r2, #0
{
   b611c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT))
   b6120:	db3d      	blt.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6122:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6126:	4294      	cmp	r4, r2
   b6128:	dd39      	ble.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0)
   b612a:	2900      	cmp	r1, #0
      w += x;
   b612c:	bfbe      	ittt	lt
   b612e:	185b      	addlt	r3, r3, r1
   b6130:	b21b      	sxthlt	r3, r3
      x = 0;
   b6132:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH)
   b6134:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6138:	18ce      	adds	r6, r1, r3
   b613a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b613c:	bfc4      	itt	gt
   b613e:	1a63      	subgt	r3, r4, r1
   b6140:	b21b      	sxthgt	r3, r3
    if (w > 0)
   b6142:	2b00      	cmp	r3, #0
   b6144:	dd2b      	ble.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6146:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6148:	10d6      	asrs	r6, r2, #3
   b614a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b614e:	4401      	add	r1, r0
              mask = 1 << (y & 7);
   b6150:	f002 0007 	and.w	r0, r2, #7
   b6154:	2201      	movs	r2, #1
   b6156:	4082      	lsls	r2, r0
      switch (color)
   b6158:	2d01      	cmp	r5, #1
              mask = 1 << (y & 7);
   b615a:	b2d2      	uxtb	r2, r2
      switch (color)
   b615c:	d016      	beq.n	b618c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b615e:	2d02      	cmp	r5, #2
   b6160:	d00b      	beq.n	b617a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6162:	b9e5      	cbnz	r5, b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   b6164:	43d2      	mvns	r2, r2
   b6166:	b2d2      	uxtb	r2, r2
   b6168:	440b      	add	r3, r1
        while (w--)
   b616a:	4299      	cmp	r1, r3
   b616c:	d017      	beq.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   b616e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6172:	4010      	ands	r0, r2
   b6174:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b6178:	e7f7      	b.n	b616a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b617a:	440b      	add	r3, r1
        while (w--)
   b617c:	4299      	cmp	r1, r3
   b617e:	d00e      	beq.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   b6180:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6184:	4050      	eors	r0, r2
   b6186:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b618a:	e7f7      	b.n	b617c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b618c:	440b      	add	r3, r1
        while (w--)
   b618e:	4299      	cmp	r1, r3
   b6190:	d005      	beq.n	b619e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   b6192:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6196:	4310      	orrs	r0, r2
   b6198:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b619c:	e7f7      	b.n	b618e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b619e:	bd70      	pop	{r4, r5, r6, pc}

000b61a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
{
   b61a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH))
   b61a2:	2900      	cmp	r1, #0
{
   b61a4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH))
   b61a8:	db76      	blt.n	b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b61aa:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b61ae:	42b1      	cmp	r1, r6
   b61b0:	da72      	bge.n	b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0)
   b61b2:	2a00      	cmp	r2, #0
      __h += __y;
   b61b4:	bfbe      	ittt	lt
   b61b6:	189b      	addlt	r3, r3, r2
   b61b8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b61ba:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT)
   b61bc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b61c0:	18d7      	adds	r7, r2, r3
   b61c2:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b61c4:	bfc4      	itt	gt
   b61c6:	1aa3      	subgt	r3, r4, r2
   b61c8:	b21b      	sxthgt	r3, r3
    if (__h > 0)
   b61ca:	2b00      	cmp	r3, #0
   b61cc:	dd64      	ble.n	b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b61ce:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b61d2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b61d4:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod)
   b61d8:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   b61dc:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b61de:	eb07 0406 	add.w	r4, r7, r6
      if (mod)
   b61e2:	d023      	beq.n	b622c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b61e4:	f1c2 0208 	rsb	r2, r2, #8
   b61e8:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b61ea:	492d      	ldr	r1, [pc, #180]	; (b62a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   b61ec:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   b61ee:	bf3c      	itt	cc
   b61f0:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b61f4:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b61f8:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   b61fa:	bf3c      	itt	cc
   b61fc:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6200:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color)
   b6204:	2d01      	cmp	r5, #1
   b6206:	d007      	beq.n	b6218 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6208:	2d02      	cmp	r5, #2
   b620a:	d02e      	beq.n	b626a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b620c:	b94d      	cbnz	r5, b6222 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   b620e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6212:	ea2c 0101 	bic.w	r1, ip, r1
   b6216:	e003      	b.n	b6220 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   b6218:	f817 c006 	ldrb.w	ip, [r7, r6]
   b621c:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   b6220:	55b9      	strb	r1, [r7, r6]
      if (h >= mod)
   b6222:	4293      	cmp	r3, r2
   b6224:	d338      	bcc.n	b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6226:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b622a:	440c      	add	r4, r1
        h -= mod;
   b622c:	1a9a      	subs	r2, r3, r2
   b622e:	b2d2      	uxtb	r2, r2
        if (h >= 8)
   b6230:	2a07      	cmp	r2, #7
   b6232:	d90e      	bls.n	b6252 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == INVERSE)
   b6234:	2d02      	cmp	r5, #2
   b6236:	d11d      	bne.n	b6274 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6238:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   b623a:	7821      	ldrb	r1, [r4, #0]
   b623c:	43c9      	mvns	r1, r1
   b623e:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b6240:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b6242:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b6246:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b6248:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b624a:	440c      	add	r4, r1
            } while (h >= 8);
   b624c:	d8f5      	bhi.n	b623a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   b624e:	f002 0207 	and.w	r2, r2, #7
        if (h)
   b6252:	b30a      	cbz	r2, b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6254:	4b13      	ldr	r3, [pc, #76]	; (b62a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color)
   b6256:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6258:	5c9b      	ldrb	r3, [r3, r2]
          switch (color)
   b625a:	d01a      	beq.n	b6292 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b625c:	2d02      	cmp	r5, #2
   b625e:	d01c      	beq.n	b629a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6260:	b9d5      	cbnz	r5, b6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   b6262:	7822      	ldrb	r2, [r4, #0]
   b6264:	ea22 0303 	bic.w	r3, r2, r3
   b6268:	e015      	b.n	b6296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   b626a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b626e:	ea81 010c 	eor.w	r1, r1, ip
   b6272:	e7d5      	b.n	b6220 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6274:	1e29      	subs	r1, r5, #0
   b6276:	bf18      	it	ne
   b6278:	2101      	movne	r1, #1
   b627a:	4249      	negs	r1, r1
   b627c:	b2c9      	uxtb	r1, r1
   b627e:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   b6280:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b6282:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b6284:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b6288:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b628a:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b628c:	4434      	add	r4, r6
            } while (h >= 8);
   b628e:	d8f7      	bhi.n	b6280 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6290:	e7dd      	b.n	b624e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   b6292:	7822      	ldrb	r2, [r4, #0]
   b6294:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   b6296:	7023      	strb	r3, [r4, #0]
}
   b6298:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   b629a:	7822      	ldrb	r2, [r4, #0]
   b629c:	4053      	eors	r3, r2
   b629e:	e7fa      	b.n	b6296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b62a0:	000b980c 	.word	0x000b980c
   b62a4:	000b9814 	.word	0x000b9814

000b62a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
{
   b62a8:	b470      	push	{r4, r5, r6}
   b62aa:	4614      	mov	r4, r2
  switch (rotation)
   b62ac:	7e82      	ldrb	r2, [r0, #26]
{
   b62ae:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation)
   b62b2:	2a02      	cmp	r2, #2
   b62b4:	d00d      	beq.n	b62d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b62b6:	2a03      	cmp	r2, #3
   b62b8:	d018      	beq.n	b62ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b62ba:	2a01      	cmp	r2, #1
   b62bc:	d111      	bne.n	b62e2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b62be:	8902      	ldrh	r2, [r0, #8]
   b62c0:	43e4      	mvns	r4, r4
   b62c2:	4414      	add	r4, r2
   b62c4:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   b62c6:	9603      	str	r6, [sp, #12]
   b62c8:	460a      	mov	r2, r1
   b62ca:	4621      	mov	r1, r4
}
   b62cc:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   b62ce:	f7ff bf67 	b.w	b61a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b62d2:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   b62d4:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   b62d6:	43e4      	mvns	r4, r4
    x -= (w - 1);
   b62d8:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   b62da:	4414      	add	r4, r2
    x -= (w - 1);
   b62dc:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   b62de:	b224      	sxth	r4, r4
    x -= (w - 1);
   b62e0:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   b62e2:	9603      	str	r6, [sp, #12]
   b62e4:	4622      	mov	r2, r4
}
   b62e6:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   b62e8:	f7ff bf16 	b.w	b6118 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   b62ec:	8945      	ldrh	r5, [r0, #10]
   b62ee:	4419      	add	r1, r3
   b62f0:	1a69      	subs	r1, r5, r1
   b62f2:	b209      	sxth	r1, r1
    break;
   b62f4:	e7e7      	b.n	b62c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b62f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
   b62f6:	b430      	push	{r4, r5}
   b62f8:	4614      	mov	r4, r2
  switch (rotation)
   b62fa:	7e82      	ldrb	r2, [r0, #26]
{
   b62fc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation)
   b6300:	2a02      	cmp	r2, #2
   b6302:	d00d      	beq.n	b6320 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6304:	2a03      	cmp	r2, #3
   b6306:	d018      	beq.n	b633a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6308:	2a01      	cmp	r2, #1
   b630a:	d111      	bne.n	b6330 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   b630c:	18e2      	adds	r2, r4, r3
   b630e:	8904      	ldrh	r4, [r0, #8]
   b6310:	1aa4      	subs	r4, r4, r2
   b6312:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   b6314:	9502      	str	r5, [sp, #8]
   b6316:	460a      	mov	r2, r1
   b6318:	4621      	mov	r1, r4
}
   b631a:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   b631c:	f7ff befc 	b.w	b6118 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   b6320:	8902      	ldrh	r2, [r0, #8]
   b6322:	43c9      	mvns	r1, r1
   b6324:	4411      	add	r1, r2
    y -= (h - 1);
   b6326:	18e2      	adds	r2, r4, r3
   b6328:	8944      	ldrh	r4, [r0, #10]
   b632a:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   b632c:	b209      	sxth	r1, r1
    y -= (h - 1);
   b632e:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   b6330:	9502      	str	r5, [sp, #8]
   b6332:	4622      	mov	r2, r4
}
   b6334:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   b6336:	f7ff bf33 	b.w	b61a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b633a:	8942      	ldrh	r2, [r0, #10]
   b633c:	43c9      	mvns	r1, r1
   b633e:	4411      	add	r1, r2
   b6340:	b209      	sxth	r1, r1
    break;
   b6342:	e7e7      	b.n	b6314 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6344 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b6344:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6346:	4c0b      	ldr	r4, [pc, #44]	; (b6374 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6348:	7821      	ldrb	r1, [r4, #0]
   b634a:	f3bf 8f5b 	dmb	ish
   b634e:	f011 0101 	ands.w	r1, r1, #1
   b6352:	d10b      	bne.n	b636c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6354:	4620      	mov	r0, r4
   b6356:	9101      	str	r1, [sp, #4]
   b6358:	f7fd feac 	bl	b40b4 <__cxa_guard_acquire>
   b635c:	9901      	ldr	r1, [sp, #4]
   b635e:	b128      	cbz	r0, b636c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6360:	4805      	ldr	r0, [pc, #20]	; (b6378 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6362:	f001 fa45 	bl	b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6366:	4620      	mov	r0, r4
   b6368:	f7fd fea9 	bl	b40be <__cxa_guard_release>
    }
   b636c:	4802      	ldr	r0, [pc, #8]	; (b6378 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b636e:	b002      	add	sp, #8
   b6370:	bd10      	pop	{r4, pc}
   b6372:	bf00      	nop
   b6374:	2003dff8 	.word	0x2003dff8
   b6378:	2003dffc 	.word	0x2003dffc

000b637c <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b637c:	6001      	str	r1, [r0, #0]
}
   b637e:	4770      	bx	lr

000b6380 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6380:	b510      	push	{r4, lr}
   b6382:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6384:	2101      	movs	r1, #1
   b6386:	8800      	ldrh	r0, [r0, #0]
   b6388:	f001 fe0a 	bl	b7fa0 <pinMode>
	digitalWrite(_pin, LOW);
   b638c:	8820      	ldrh	r0, [r4, #0]
   b638e:	2100      	movs	r1, #0
   b6390:	f001 fe17 	bl	b7fc2 <digitalWrite>
   b6394:	2002      	movs	r0, #2
   b6396:	f000 fd3f 	bl	b6e18 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b639a:	8820      	ldrh	r0, [r4, #0]
   b639c:	2101      	movs	r1, #1
   b639e:	f001 fe10 	bl	b7fc2 <digitalWrite>
   b63a2:	2005      	movs	r0, #5
   b63a4:	f000 fd38 	bl	b6e18 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b63a8:	8820      	ldrh	r0, [r4, #0]
   b63aa:	2100      	movs	r1, #0
   b63ac:	f001 fe09 	bl	b7fc2 <digitalWrite>
	pinMode(_pin,INPUT);
   b63b0:	8820      	ldrh	r0, [r4, #0]
   b63b2:	2100      	movs	r1, #0
   b63b4:	f001 fdf4 	bl	b7fa0 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b63b8:	8820      	ldrh	r0, [r4, #0]
   b63ba:	2101      	movs	r1, #1
   b63bc:	f001 fe44 	bl	b8048 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b63c0:	233a      	movs	r3, #58	; 0x3a
   b63c2:	fb90 f0f3 	sdiv	r0, r0, r3
   b63c6:	bd10      	pop	{r4, pc}

000b63c8 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b63c8:	b510      	push	{r4, lr}
   b63ca:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b63cc:	7001      	strb	r1, [r0, #0]
   b63ce:	7042      	strb	r2, [r0, #1]
   b63d0:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b63d2:	2101      	movs	r1, #1
   b63d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b63d8:	f002 f878 	bl	b84cc <calloc>
   b63dc:	6060      	str	r0, [r4, #4]
}
   b63de:	4620      	mov	r0, r4
   b63e0:	bd10      	pop	{r4, pc}

000b63e2 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b63e2:	b510      	push	{r4, lr}
   b63e4:	4604      	mov	r4, r0
{
    free(_led_state);
   b63e6:	6840      	ldr	r0, [r0, #4]
   b63e8:	f000 ff3a 	bl	b7260 <free>
}
   b63ec:	4620      	mov	r0, r4
   b63ee:	bd10      	pop	{r4, pc}

000b63f0 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b63f0:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b63f2:	2100      	movs	r1, #0
{
   b63f4:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b63f6:	7800      	ldrb	r0, [r0, #0]
   b63f8:	f001 fde3 	bl	b7fc2 <digitalWrite>
   b63fc:	2014      	movs	r0, #20
   b63fe:	f000 fd0b 	bl	b6e18 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b6402:	7820      	ldrb	r0, [r4, #0]
   b6404:	2101      	movs	r1, #1
   b6406:	f001 fddc 	bl	b7fc2 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b640e:	2014      	movs	r0, #20
   b6410:	f000 bd02 	b.w	b6e18 <HAL_Delay_Microseconds>

000b6414 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b6414:	b570      	push	{r4, r5, r6, lr}
   b6416:	4606      	mov	r6, r0
   b6418:	460c      	mov	r4, r1
   b641a:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b641c:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b641e:	bf4c      	ite	mi
   b6420:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b6422:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b6424:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b6426:	f001 fdcc 	bl	b7fc2 <digitalWrite>
    for (byte i=0; i<8; i++)
   b642a:	3d01      	subs	r5, #1
        clk();
   b642c:	4630      	mov	r0, r6
   b642e:	f7ff ffdf 	bl	b63f0 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b6432:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b6434:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b6438:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b643a:	d1ef      	bne.n	b641c <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b643c:	bd70      	pop	{r4, r5, r6, pc}

000b643e <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b643e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b6440:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b6444:	461e      	mov	r6, r3
   b6446:	460c      	mov	r4, r1
   b6448:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b644a:	bf14      	ite	ne
   b644c:	21c0      	movne	r1, #192	; 0xc0
   b644e:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b6450:	0673      	lsls	r3, r6, #25
   b6452:	bf58      	it	pl
   b6454:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b6458:	062a      	lsls	r2, r5, #24
   b645a:	bf58      	it	pl
   b645c:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b6460:	066b      	lsls	r3, r5, #25
   b6462:	bf58      	it	pl
   b6464:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b6468:	0622      	lsls	r2, r4, #24
   b646a:	bf58      	it	pl
   b646c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b6470:	0663      	lsls	r3, r4, #25
   b6472:	bf58      	it	pl
   b6474:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b6478:	9001      	str	r0, [sp, #4]
   b647a:	f7ff ffcb 	bl	b6414 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b647e:	9801      	ldr	r0, [sp, #4]
   b6480:	4631      	mov	r1, r6
   b6482:	f7ff ffc7 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b6486:	9801      	ldr	r0, [sp, #4]
   b6488:	4629      	mov	r1, r5
   b648a:	f7ff ffc3 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b648e:	9801      	ldr	r0, [sp, #4]
   b6490:	4621      	mov	r1, r4
}
   b6492:	b002      	add	sp, #8
   b6494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b6498:	f7ff bfbc 	b.w	b6414 <_ZN12ChainableLED8sendByteEh>

000b649c <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b64a0:	4604      	mov	r4, r0
   b64a2:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b64a4:	2100      	movs	r1, #0
{
   b64a6:	4690      	mov	r8, r2
   b64a8:	4699      	mov	r9, r3
   b64aa:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b64ae:	f7ff ffb1 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b64b2:	2100      	movs	r1, #0
   b64b4:	4620      	mov	r0, r4
   b64b6:	f7ff ffad 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b64ba:	2100      	movs	r1, #0
   b64bc:	4620      	mov	r0, r4
   b64be:	f7ff ffa9 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b64c2:	2100      	movs	r1, #0
   b64c4:	4620      	mov	r0, r4
   b64c6:	f7ff ffa5 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
   b64ca:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b64cc:	78a3      	ldrb	r3, [r4, #2]
   b64ce:	b2f5      	uxtb	r5, r6
   b64d0:	42ab      	cmp	r3, r5
   b64d2:	d919      	bls.n	b6508 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b64d4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b64d8:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b64da:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b64de:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b64e2:	d108      	bne.n	b64f6 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b64e4:	6861      	ldr	r1, [r4, #4]
   b64e6:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b64ea:	6861      	ldr	r1, [r4, #4]
   b64ec:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b64f0:	6861      	ldr	r1, [r4, #4]
   b64f2:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b64f6:	6861      	ldr	r1, [r4, #4]
   b64f8:	5ccb      	ldrb	r3, [r1, r3]
   b64fa:	5c8a      	ldrb	r2, [r1, r2]
   b64fc:	5c09      	ldrb	r1, [r1, r0]
   b64fe:	4620      	mov	r0, r4
   b6500:	f7ff ff9d 	bl	b643e <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b6504:	3601      	adds	r6, #1
   b6506:	e7e1      	b.n	b64cc <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b6508:	4620      	mov	r0, r4
   b650a:	2100      	movs	r1, #0
   b650c:	f7ff ff82 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6510:	4620      	mov	r0, r4
   b6512:	2100      	movs	r1, #0
   b6514:	f7ff ff7e 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6518:	4620      	mov	r0, r4
   b651a:	2100      	movs	r1, #0
   b651c:	f7ff ff7a 	bl	b6414 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6520:	4620      	mov	r0, r4
   b6522:	2100      	movs	r1, #0
}
   b6524:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b6528:	f7ff bf74 	b.w	b6414 <_ZN12ChainableLED8sendByteEh>

000b652c <_ZN12ChainableLED4initEv>:
{
   b652c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b652e:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b6530:	2101      	movs	r1, #1
   b6532:	7800      	ldrb	r0, [r0, #0]
   b6534:	f001 fd34 	bl	b7fa0 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b6538:	7860      	ldrb	r0, [r4, #1]
   b653a:	2101      	movs	r1, #1
   b653c:	f001 fd30 	bl	b7fa0 <pinMode>
   b6540:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b6542:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b6544:	78a3      	ldrb	r3, [r4, #2]
   b6546:	b2e9      	uxtb	r1, r5
   b6548:	428b      	cmp	r3, r1
   b654a:	d907      	bls.n	b655c <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b654c:	2300      	movs	r3, #0
   b654e:	9600      	str	r6, [sp, #0]
   b6550:	461a      	mov	r2, r3
   b6552:	4620      	mov	r0, r4
   b6554:	f7ff ffa2 	bl	b649c <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b6558:	3501      	adds	r5, #1
   b655a:	e7f3      	b.n	b6544 <_ZN12ChainableLED4initEv+0x18>
}
   b655c:	b002      	add	sp, #8
   b655e:	bd70      	pop	{r4, r5, r6, pc}

000b6560 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6560:	b538      	push	{r3, r4, r5, lr}
   b6562:	4604      	mov	r4, r0
   b6564:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b6566:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b6568:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b656a:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b656c:	f001 fd18 	bl	b7fa0 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b6570:	7b20      	ldrb	r0, [r4, #12]
   b6572:	2101      	movs	r1, #1
   b6574:	f001 fd25 	bl	b7fc2 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b6578:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b657a:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b657c:	2101      	movs	r1, #1
   b657e:	f001 fd0f 	bl	b7fa0 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b6582:	7b60      	ldrb	r0, [r4, #13]
   b6584:	2100      	movs	r1, #0
   b6586:	f001 fd1c 	bl	b7fc2 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b658a:	4620      	mov	r0, r4
   b658c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6590 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b6590:	3901      	subs	r1, #1
   b6592:	b2c9      	uxtb	r1, r1
   b6594:	2908      	cmp	r1, #8
   b6596:	bf9a      	itte	ls
   b6598:	4b02      	ldrls	r3, [pc, #8]	; (b65a4 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b659a:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b659e:	4802      	ldrhi	r0, [pc, #8]	; (b65a8 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b65a0:	4770      	bx	lr
   b65a2:	bf00      	nop
   b65a4:	000b9930 	.word	0x000b9930
   b65a8:	000b9838 	.word	0x000b9838

000b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b65ac:	b507      	push	{r0, r1, r2, lr}
   b65ae:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b65b0:	f7ff fec8 	bl	b6344 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b65b4:	9901      	ldr	r1, [sp, #4]
    }
   b65b6:	b003      	add	sp, #12
   b65b8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b65bc:	f001 b9be 	b.w	b793c <_ZN8SPIClass8transferEh>

000b65c0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b65c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65c4:	4607      	mov	r7, r0
   b65c6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b65ca:	461e      	mov	r6, r3
	if (count == 0) {
   b65cc:	4615      	mov	r5, r2
   b65ce:	2a00      	cmp	r2, #0
   b65d0:	d042      	beq.n	b6658 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b65d2:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b65d6:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b65d8:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b65dc:	2100      	movs	r1, #0
   b65de:	f001 fcf0 	bl	b7fc2 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b65e2:	4648      	mov	r0, r9
   b65e4:	f7ff ffe2 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b65e8:	3d01      	subs	r5, #1
   b65ea:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b65ec:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b65f0:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b65f4:	fa5f f48b 	uxtb.w	r4, fp
   b65f8:	42a5      	cmp	r5, r4
   b65fa:	d922      	bls.n	b6642 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b65fc:	b9dc      	cbnz	r4, b6636 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b65fe:	f1b8 0f00 	cmp.w	r8, #0
   b6602:	d018      	beq.n	b6636 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6604:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6606:	b2d3      	uxtb	r3, r2
   b6608:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b660a:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b660c:	d805      	bhi.n	b661a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b660e:	fa0a f402 	lsl.w	r4, sl, r2
   b6612:	430c      	orrs	r4, r1
   b6614:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6616:	3201      	adds	r2, #1
   b6618:	e7f5      	b.n	b6606 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b661a:	4648      	mov	r0, r9
   b661c:	9101      	str	r1, [sp, #4]
   b661e:	f7ff ffc5 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b6622:	7833      	ldrb	r3, [r6, #0]
   b6624:	9901      	ldr	r1, [sp, #4]
   b6626:	4004      	ands	r4, r0
   b6628:	ea23 0301 	bic.w	r3, r3, r1
   b662c:	431c      	orrs	r4, r3
   b662e:	7034      	strb	r4, [r6, #0]
		index++;
   b6630:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b6634:	e7de      	b.n	b65f4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b6636:	4648      	mov	r0, r9
   b6638:	f7ff ffb8 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b663c:	f806 000b 	strb.w	r0, [r6, fp]
   b6640:	e7f6      	b.n	b6630 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b6642:	2000      	movs	r0, #0
   b6644:	f7ff ffb2 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6648:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b664a:	7b38      	ldrb	r0, [r7, #12]
   b664c:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b664e:	b003      	add	sp, #12
   b6650:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6654:	f001 bcb5 	b.w	b7fc2 <digitalWrite>
} // End PCD_ReadRegister()
   b6658:	b003      	add	sp, #12
   b665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b665e <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b665e:	b538      	push	{r3, r4, r5, lr}
   b6660:	460c      	mov	r4, r1
   b6662:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6664:	2100      	movs	r1, #0
   b6666:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6668:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b666c:	f001 fca9 	bl	b7fc2 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6670:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b6674:	f7ff ff9a 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6678:	2000      	movs	r0, #0
   b667a:	f7ff ff97 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b667e:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6680:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6682:	7b28      	ldrb	r0, [r5, #12]
   b6684:	f001 fc9d 	bl	b7fc2 <digitalWrite>
} // End PCD_ReadRegister()
   b6688:	4620      	mov	r0, r4
   b668a:	bd38      	pop	{r3, r4, r5, pc}

000b668c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b668e:	460f      	mov	r7, r1
   b6690:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6692:	2100      	movs	r1, #0
   b6694:	7b00      	ldrb	r0, [r0, #12]
								) {
   b6696:	4615      	mov	r5, r2
   b6698:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b669a:	f001 fc92 	bl	b7fc2 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b669e:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b66a2:	f7ff ff83 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b66a6:	4425      	add	r5, r4
   b66a8:	42ac      	cmp	r4, r5
   b66aa:	d004      	beq.n	b66b6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b66ac:	f814 0b01 	ldrb.w	r0, [r4], #1
   b66b0:	f7ff ff7c 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b66b4:	e7f8      	b.n	b66a8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b66b6:	7b30      	ldrb	r0, [r6, #12]
   b66b8:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b66ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b66be:	f001 bc80 	b.w	b7fc2 <digitalWrite>

000b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b66c2:	b570      	push	{r4, r5, r6, lr}
   b66c4:	4604      	mov	r4, r0
   b66c6:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b66c8:	7b00      	ldrb	r0, [r0, #12]
   b66ca:	2100      	movs	r1, #0
								) {
   b66cc:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b66ce:	f001 fc78 	bl	b7fc2 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b66d2:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b66d6:	f7ff ff69 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b66da:	4628      	mov	r0, r5
   b66dc:	f7ff ff66 	bl	b65ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b66e0:	7b20      	ldrb	r0, [r4, #12]
   b66e2:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b66e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b66e8:	f001 bc6b 	b.w	b7fc2 <digitalWrite>

000b66ec <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b66ec:	b570      	push	{r4, r5, r6, lr}
   b66ee:	4616      	mov	r6, r2
   b66f0:	4604      	mov	r4, r0
   b66f2:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b66f4:	f7ff ffb3 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b66f8:	4330      	orrs	r0, r6
   b66fa:	b2c2      	uxtb	r2, r0
   b66fc:	4629      	mov	r1, r5
   b66fe:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6704:	f7ff bfdd 	b.w	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6708 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6708:	b570      	push	{r4, r5, r6, lr}
   b670a:	4616      	mov	r6, r2
   b670c:	4604      	mov	r4, r0
   b670e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6710:	f7ff ffa5 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6714:	ea20 0006 	bic.w	r0, r0, r6
   b6718:	b2c2      	uxtb	r2, r0
   b671a:	4629      	mov	r1, r5
   b671c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b671e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6722:	f7ff bfce 	b.w	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6726 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b6726:	2208      	movs	r2, #8
   b6728:	2110      	movs	r1, #16
   b672a:	f7ff bfed 	b.w	b6708 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b672e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6730:	4604      	mov	r4, r0
   b6732:	4615      	mov	r5, r2
   b6734:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6736:	2200      	movs	r2, #0
   b6738:	2102      	movs	r1, #2
					 ) {
   b673a:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b673c:	f7ff ffc1 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b6740:	2204      	movs	r2, #4
   b6742:	210a      	movs	r1, #10
   b6744:	4620      	mov	r0, r4
   b6746:	f7ff ffbc 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b674a:	2280      	movs	r2, #128	; 0x80
   b674c:	2114      	movs	r1, #20
   b674e:	4620      	mov	r0, r4
   b6750:	f7ff ffcc 	bl	b66ec <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b6754:	462a      	mov	r2, r5
   b6756:	463b      	mov	r3, r7
   b6758:	2112      	movs	r1, #18
   b675a:	4620      	mov	r0, r4
   b675c:	f7ff ff96 	bl	b668c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b6760:	2203      	movs	r2, #3
   b6762:	2102      	movs	r1, #2
   b6764:	4620      	mov	r0, r4
   b6766:	f7ff ffac 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b676a:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b676e:	210a      	movs	r1, #10
   b6770:	4620      	mov	r0, r4
   b6772:	f7ff ff74 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b6776:	0743      	lsls	r3, r0, #29
   b6778:	d405      	bmi.n	b6786 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b677a:	3d01      	subs	r5, #1
   b677c:	b2ad      	uxth	r5, r5
   b677e:	2d00      	cmp	r5, #0
   b6780:	d1f5      	bne.n	b676e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b6782:	2004      	movs	r0, #4
   b6784:	e00f      	b.n	b67a6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b6786:	2200      	movs	r2, #0
   b6788:	2102      	movs	r1, #2
   b678a:	4620      	mov	r0, r4
   b678c:	f7ff ff99 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6790:	2144      	movs	r1, #68	; 0x44
   b6792:	4620      	mov	r0, r4
   b6794:	f7ff ff63 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6798:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b679a:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b679c:	4620      	mov	r0, r4
   b679e:	f7ff ff5e 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b67a2:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b67a4:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b67a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67a8 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b67a8:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b67aa:	220f      	movs	r2, #15
   b67ac:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b67ae:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b67b0:	f7ff ff87 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b67b4:	2032      	movs	r0, #50	; 0x32
   b67b6:	f000 fd8b 	bl	b72d0 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b67ba:	2102      	movs	r1, #2
   b67bc:	4620      	mov	r0, r4
   b67be:	f7ff ff4e 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b67c2:	06c3      	lsls	r3, r0, #27
   b67c4:	d4f9      	bmi.n	b67ba <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b67c6:	bd10      	pop	{r4, pc}

000b67c8 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b67c8:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b67ca:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b67cc:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b67ce:	f7ff ff46 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b67d2:	f000 0303 	and.w	r3, r0, #3
   b67d6:	2b03      	cmp	r3, #3
   b67d8:	d008      	beq.n	b67ec <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b67da:	f040 0203 	orr.w	r2, r0, #3
   b67de:	b2d2      	uxtb	r2, r2
   b67e0:	4620      	mov	r0, r4
   b67e2:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b67e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b67e8:	f7ff bf6b 	b.w	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b67ec:	bd10      	pop	{r4, pc}

000b67ee <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b67ee:	b510      	push	{r4, lr}
   b67f0:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b67f2:	7b40      	ldrb	r0, [r0, #13]
   b67f4:	f001 fbfe 	bl	b7ff4 <digitalRead>
   b67f8:	bb48      	cbnz	r0, b684e <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b67fa:	7b60      	ldrb	r0, [r4, #13]
   b67fc:	2101      	movs	r1, #1
   b67fe:	f001 fbe0 	bl	b7fc2 <digitalWrite>
		delay(50);
   b6802:	2032      	movs	r0, #50	; 0x32
   b6804:	f000 fd64 	bl	b72d0 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6808:	4620      	mov	r0, r4
   b680a:	2280      	movs	r2, #128	; 0x80
   b680c:	2154      	movs	r1, #84	; 0x54
   b680e:	f7ff ff58 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b6812:	4620      	mov	r0, r4
   b6814:	22a9      	movs	r2, #169	; 0xa9
   b6816:	2156      	movs	r1, #86	; 0x56
   b6818:	f7ff ff53 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b681c:	4620      	mov	r0, r4
   b681e:	2203      	movs	r2, #3
   b6820:	2158      	movs	r1, #88	; 0x58
   b6822:	f7ff ff4e 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b6826:	4620      	mov	r0, r4
   b6828:	22e8      	movs	r2, #232	; 0xe8
   b682a:	215a      	movs	r1, #90	; 0x5a
   b682c:	f7ff ff49 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b6830:	4620      	mov	r0, r4
   b6832:	2240      	movs	r2, #64	; 0x40
   b6834:	212a      	movs	r1, #42	; 0x2a
   b6836:	f7ff ff44 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b683a:	4620      	mov	r0, r4
   b683c:	223d      	movs	r2, #61	; 0x3d
   b683e:	2122      	movs	r1, #34	; 0x22
   b6840:	f7ff ff3f 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6844:	4620      	mov	r0, r4
} // End PCD_Init()
   b6846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b684a:	f7ff bfbd 	b.w	b67c8 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b684e:	4620      	mov	r0, r4
   b6850:	f7ff ffaa 	bl	b67a8 <_ZN7MFRC5229PCD_ResetEv>
   b6854:	e7d8      	b.n	b6808 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b6856 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b6856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b685a:	b089      	sub	sp, #36	; 0x24
   b685c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b6860:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b6864:	9203      	str	r2, [sp, #12]
   b6866:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b686a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b686e:	9204      	str	r2, [sp, #16]
   b6870:	4604      	mov	r4, r0
   b6872:	468a      	mov	sl, r1
   b6874:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b6876:	f1b9 0f00 	cmp.w	r9, #0
   b687a:	d03e      	beq.n	b68fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b687c:	f899 8000 	ldrb.w	r8, [r9]
   b6880:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6882:	2200      	movs	r2, #0
   b6884:	2102      	movs	r1, #2
   b6886:	4620      	mov	r0, r4
   b6888:	f7ff ff1b 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b688c:	227f      	movs	r2, #127	; 0x7f
   b688e:	2108      	movs	r1, #8
   b6890:	4620      	mov	r0, r4
   b6892:	f7ff ff16 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6896:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b689a:	2280      	movs	r2, #128	; 0x80
   b689c:	2114      	movs	r1, #20
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff ff24 	bl	b66ec <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b68a4:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b68a8:	9b05      	ldr	r3, [sp, #20]
   b68aa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b68ae:	2112      	movs	r1, #18
   b68b0:	4620      	mov	r0, r4
   b68b2:	f7ff feeb 	bl	b668c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b68b6:	4642      	mov	r2, r8
   b68b8:	211a      	movs	r1, #26
   b68ba:	4620      	mov	r0, r4
   b68bc:	f7ff ff01 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b68c0:	4652      	mov	r2, sl
   b68c2:	2102      	movs	r1, #2
   b68c4:	4620      	mov	r0, r4
   b68c6:	f7ff fefc 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b68ca:	f1ba 0f0c 	cmp.w	sl, #12
   b68ce:	d104      	bne.n	b68da <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b68d0:	2280      	movs	r2, #128	; 0x80
   b68d2:	211a      	movs	r1, #26
   b68d4:	4620      	mov	r0, r4
   b68d6:	f7ff ff09 	bl	b66ec <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b68da:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b68de:	2108      	movs	r1, #8
   b68e0:	4620      	mov	r0, r4
   b68e2:	f7ff febc 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b68e6:	9b03      	ldr	r3, [sp, #12]
   b68e8:	4218      	tst	r0, r3
   b68ea:	d108      	bne.n	b68fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b68ec:	07c3      	lsls	r3, r0, #31
   b68ee:	d402      	bmi.n	b68f6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b68f0:	f1b8 0801 	subs.w	r8, r8, #1
   b68f4:	d1f3      	bne.n	b68de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b68f6:	2004      	movs	r0, #4
   b68f8:	e04d      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b68fa:	46c8      	mov	r8, r9
   b68fc:	e7c0      	b.n	b6880 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b68fe:	210c      	movs	r1, #12
   b6900:	4620      	mov	r0, r4
   b6902:	f7ff feac 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6906:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b690a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b690c:	d146      	bne.n	b699c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b690e:	b1dd      	cbz	r5, b6948 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b6910:	b1d6      	cbz	r6, b6948 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6912:	2114      	movs	r1, #20
   b6914:	4620      	mov	r0, r4
   b6916:	f7ff fea2 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b691a:	7833      	ldrb	r3, [r6, #0]
   b691c:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b691e:	4602      	mov	r2, r0
		if (n > *backLen) {
   b6920:	d33e      	bcc.n	b69a0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b6922:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6924:	462b      	mov	r3, r5
   b6926:	2112      	movs	r1, #18
   b6928:	4620      	mov	r0, r4
   b692a:	f8cd b000 	str.w	fp, [sp]
   b692e:	f7ff fe47 	bl	b65c0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b6932:	2118      	movs	r1, #24
   b6934:	4620      	mov	r0, r4
   b6936:	f7ff fe92 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b693a:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b693e:	f1b9 0f00 	cmp.w	r9, #0
   b6942:	d001      	beq.n	b6948 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b6944:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b6948:	f018 0f08 	tst.w	r8, #8
   b694c:	d12a      	bne.n	b69a4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b694e:	b35d      	cbz	r5, b69a8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6950:	b356      	cbz	r6, b69a8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b6952:	9b04      	ldr	r3, [sp, #16]
   b6954:	b343      	cbz	r3, b69a8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b6956:	7832      	ldrb	r2, [r6, #0]
   b6958:	2a01      	cmp	r2, #1
   b695a:	d103      	bne.n	b6964 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b695c:	2f04      	cmp	r7, #4
   b695e:	d125      	bne.n	b69ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b6960:	2009      	movs	r0, #9
   b6962:	e018      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b6964:	d922      	bls.n	b69ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6966:	bb0f      	cbnz	r7, b69ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b6968:	3a02      	subs	r2, #2
   b696a:	ab07      	add	r3, sp, #28
   b696c:	b2d2      	uxtb	r2, r2
   b696e:	4629      	mov	r1, r5
   b6970:	4620      	mov	r0, r4
   b6972:	f7ff fedc 	bl	b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b6976:	2801      	cmp	r0, #1
   b6978:	d10d      	bne.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b697a:	7833      	ldrb	r3, [r6, #0]
   b697c:	441d      	add	r5, r3
   b697e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b6982:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b6986:	429a      	cmp	r2, r3
   b6988:	d110      	bne.n	b69ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b698a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b698e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b6992:	429a      	cmp	r2, r3
   b6994:	d10a      	bne.n	b69ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b6996:	b009      	add	sp, #36	; 0x24
   b6998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b699c:	2002      	movs	r0, #2
   b699e:	e7fa      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b69a0:	2005      	movs	r0, #5
   b69a2:	e7f8      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b69a4:	2003      	movs	r0, #3
   b69a6:	e7f6      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b69a8:	2001      	movs	r0, #1
   b69aa:	e7f4      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b69ac:	2008      	movs	r0, #8
   b69ae:	e7f2      	b.n	b6996 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b69b0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b69b0:	b510      	push	{r4, lr}
   b69b2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b69b4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b69b8:	9405      	str	r4, [sp, #20]
   b69ba:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b69be:	9404      	str	r4, [sp, #16]
   b69c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b69c2:	9403      	str	r4, [sp, #12]
   b69c4:	9c08      	ldr	r4, [sp, #32]
   b69c6:	9200      	str	r2, [sp, #0]
   b69c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b69cc:	2230      	movs	r2, #48	; 0x30
   b69ce:	460b      	mov	r3, r1
   b69d0:	210c      	movs	r1, #12
   b69d2:	f7ff ff40 	bl	b6856 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b69d6:	b006      	add	sp, #24
   b69d8:	bd10      	pop	{r4, pc}

000b69da <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b69da:	b570      	push	{r4, r5, r6, lr}
   b69dc:	b088      	sub	sp, #32
   b69de:	4606      	mov	r6, r0
   b69e0:	461c      	mov	r4, r3
   b69e2:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b69e6:	4615      	mov	r5, r2
   b69e8:	b31a      	cbz	r2, b6a32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b69ea:	781b      	ldrb	r3, [r3, #0]
   b69ec:	2b01      	cmp	r3, #1
   b69ee:	d920      	bls.n	b6a32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b69f0:	2280      	movs	r2, #128	; 0x80
   b69f2:	211c      	movs	r1, #28
   b69f4:	f7ff fe88 	bl	b6708 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b69f8:	2307      	movs	r3, #7
   b69fa:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b69fe:	2300      	movs	r3, #0
   b6a00:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6a04:	f10d 031f 	add.w	r3, sp, #31
   b6a08:	e9cd 4300 	strd	r4, r3, [sp]
   b6a0c:	2201      	movs	r2, #1
   b6a0e:	462b      	mov	r3, r5
   b6a10:	f10d 0117 	add.w	r1, sp, #23
   b6a14:	4630      	mov	r0, r6
   b6a16:	f7ff ffcb 	bl	b69b0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6a1a:	2801      	cmp	r0, #1
   b6a1c:	d107      	bne.n	b6a2e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b6a1e:	7823      	ldrb	r3, [r4, #0]
   b6a20:	2b02      	cmp	r3, #2
   b6a22:	d108      	bne.n	b6a36 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6a24:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6a28:	2b00      	cmp	r3, #0
   b6a2a:	bf18      	it	ne
   b6a2c:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b6a2e:	b008      	add	sp, #32
   b6a30:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6a32:	2005      	movs	r0, #5
   b6a34:	e7fb      	b.n	b6a2e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b6a36:	2002      	movs	r0, #2
   b6a38:	e7f9      	b.n	b6a2e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b6a3a <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b6a3a:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b6a3c:	460a      	mov	r2, r1
   b6a3e:	2126      	movs	r1, #38	; 0x26
   b6a40:	f7ff bfcb 	b.w	b69da <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b6a44 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b6a44:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b6a46:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6a48:	f10d 0203 	add.w	r2, sp, #3
   b6a4c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b6a4e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6a52:	f7ff fff2 	bl	b6a3a <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b6a56:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b6a5a:	1e43      	subs	r3, r0, #1
   b6a5c:	4258      	negs	r0, r3
   b6a5e:	4158      	adcs	r0, r3
   b6a60:	b003      	add	sp, #12
   b6a62:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a66 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b6a66:	b570      	push	{r4, r5, r6, lr}
   b6a68:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b6a6a:	2350      	movs	r3, #80	; 0x50
   b6a6c:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b6a70:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6a72:	f10d 0316 	add.w	r3, sp, #22
   b6a76:	2202      	movs	r2, #2
   b6a78:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b6a7a:	4606      	mov	r6, r0
	buffer[1] = 0;
   b6a7c:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6a80:	f7ff fe55 	bl	b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6a84:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6a86:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b6a88:	d10f      	bne.n	b6aaa <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b6a8a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b6a8e:	e9cd 4400 	strd	r4, r4, [sp]
   b6a92:	4623      	mov	r3, r4
   b6a94:	2204      	movs	r2, #4
   b6a96:	a905      	add	r1, sp, #20
   b6a98:	4630      	mov	r0, r6
   b6a9a:	f7ff ff89 	bl	b69b0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b6a9e:	2804      	cmp	r0, #4
   b6aa0:	d003      	beq.n	b6aaa <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b6aa2:	2801      	cmp	r0, #1
   b6aa4:	bf14      	ite	ne
   b6aa6:	4605      	movne	r5, r0
   b6aa8:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b6aaa:	4628      	mov	r0, r5
   b6aac:	b006      	add	sp, #24
   b6aae:	bd70      	pop	{r4, r5, r6, pc}

000b6ab0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b6ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6ab2:	4606      	mov	r6, r0
   b6ab4:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b6ab6:	4614      	mov	r4, r2
   b6ab8:	b1ca      	cbz	r2, b6aee <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b6aba:	781b      	ldrb	r3, [r3, #0]
   b6abc:	2b11      	cmp	r3, #17
   b6abe:	d916      	bls.n	b6aee <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b6ac0:	2330      	movs	r3, #48	; 0x30
   b6ac2:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b6ac4:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6ac6:	1c93      	adds	r3, r2, #2
   b6ac8:	4621      	mov	r1, r4
   b6aca:	2202      	movs	r2, #2
   b6acc:	f7ff fe2f 	bl	b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6ad0:	2801      	cmp	r0, #1
   b6ad2:	d10a      	bne.n	b6aea <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b6ad4:	2300      	movs	r3, #0
   b6ad6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6ada:	9003      	str	r0, [sp, #12]
   b6adc:	9500      	str	r5, [sp, #0]
   b6ade:	4623      	mov	r3, r4
   b6ae0:	2204      	movs	r2, #4
   b6ae2:	4621      	mov	r1, r4
   b6ae4:	4630      	mov	r0, r6
   b6ae6:	f7ff ff63 	bl	b69b0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b6aea:	b004      	add	sp, #16
   b6aec:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6aee:	2005      	movs	r0, #5
   b6af0:	e7fb      	b.n	b6aea <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b6af2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b6af2:	b510      	push	{r4, lr}
   b6af4:	b08a      	sub	sp, #40	; 0x28
   b6af6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6af8:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6afc:	681a      	ldr	r2, [r3, #0]
   b6afe:	889b      	ldrh	r3, [r3, #4]
   b6b00:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6b04:	7863      	ldrb	r3, [r4, #1]
   b6b06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6b0a:	78a3      	ldrb	r3, [r4, #2]
   b6b0c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b6b10:	78e3      	ldrb	r3, [r4, #3]
   b6b12:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6b16:	7923      	ldrb	r3, [r4, #4]
   b6b18:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6b1c:	2300      	movs	r3, #0
   b6b1e:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b6b22:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6b26:	9301      	str	r3, [sp, #4]
   b6b28:	230c      	movs	r3, #12
	sendData[0] = command;
   b6b2a:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b6b2e:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6b32:	9300      	str	r3, [sp, #0]
   b6b34:	2210      	movs	r2, #16
   b6b36:	ab07      	add	r3, sp, #28
   b6b38:	210e      	movs	r1, #14
   b6b3a:	f7ff fe8c 	bl	b6856 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b6b3e:	b00a      	add	sp, #40	; 0x28
   b6b40:	bd10      	pop	{r4, pc}

000b6b42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b6b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b6b46:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b6b48:	b08b      	sub	sp, #44	; 0x2c
   b6b4a:	4682      	mov	sl, r0
   b6b4c:	460f      	mov	r7, r1
   b6b4e:	4690      	mov	r8, r2
	if (validBits > 80) {
   b6b50:	f200 8140 	bhi.w	b6dd4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6b54:	2280      	movs	r2, #128	; 0x80
   b6b56:	211c      	movs	r1, #28
   b6b58:	f7ff fdd6 	bl	b6708 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6b5c:	2393      	movs	r3, #147	; 0x93
   b6b5e:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6b62:	f1b8 0f00 	cmp.w	r8, #0
   b6b66:	f000 80bc 	beq.w	b6ce2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b6b6a:	783c      	ldrb	r4, [r7, #0]
   b6b6c:	2c04      	cmp	r4, #4
   b6b6e:	bf94      	ite	ls
   b6b70:	2300      	movls	r3, #0
   b6b72:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6b74:	2501      	movs	r5, #1
   b6b76:	2600      	movs	r6, #0
   b6b78:	e00b      	b.n	b6b92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b6b7a:	2395      	movs	r3, #149	; 0x95
   b6b7c:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6b80:	f1b8 0f00 	cmp.w	r8, #0
   b6b84:	f000 80af 	beq.w	b6ce6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b6b88:	783c      	ldrb	r4, [r7, #0]
   b6b8a:	2c07      	cmp	r4, #7
   b6b8c:	bf94      	ite	ls
   b6b8e:	2300      	movls	r3, #0
   b6b90:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b6b92:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b6b96:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b6b98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b6b9c:	2b00      	cmp	r3, #0
   b6b9e:	f000 80a4 	beq.w	b6cea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b6ba2:	2288      	movs	r2, #136	; 0x88
   b6ba4:	f88d 201e 	strb.w	r2, [sp, #30]
   b6ba8:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6baa:	f014 0207 	ands.w	r2, r4, #7
   b6bae:	bf18      	it	ne
   b6bb0:	2201      	movne	r2, #1
   b6bb2:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b6bb6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6bba:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b6bbc:	d01d      	beq.n	b6bfa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b6bbe:	2b00      	cmp	r3, #0
   b6bc0:	bf14      	ite	ne
   b6bc2:	f04f 0903 	movne.w	r9, #3
   b6bc6:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b6bca:	f106 0c01 	add.w	ip, r6, #1
   b6bce:	4591      	cmp	r9, r2
   b6bd0:	bf94      	ite	ls
   b6bd2:	eb01 0e09 	addls.w	lr, r1, r9
   b6bd6:	eb01 0e02 	addhi.w	lr, r1, r2
   b6bda:	fa57 fc8c 	uxtab	ip, r7, ip
   b6bde:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b6be2:	460a      	mov	r2, r1
   b6be4:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6be8:	3101      	adds	r1, #1
   b6bea:	b2c9      	uxtb	r1, r1
   b6bec:	445a      	add	r2, fp
   b6bee:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b6bf2:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6bf6:	4571      	cmp	r1, lr
   b6bf8:	d1f3      	bne.n	b6be2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6bfa:	b10b      	cbz	r3, b6c00 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6bfc:	3008      	adds	r0, #8
   b6bfe:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b6c00:	2c1f      	cmp	r4, #31
   b6c02:	dd74      	ble.n	b6cee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6c04:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6c08:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6c0c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6c10:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6c14:	4053      	eors	r3, r2
   b6c16:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6c1a:	4053      	eors	r3, r2
   b6c1c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b6c20:	4053      	eors	r3, r2
   b6c22:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6c26:	2207      	movs	r2, #7
   b6c28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6c2c:	a907      	add	r1, sp, #28
   b6c2e:	4650      	mov	r0, sl
   b6c30:	f7ff fd7d 	bl	b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b6c34:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6c36:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b6c38:	f040 80c8 	bne.w	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6c3c:	2300      	movs	r3, #0
   b6c3e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b6c42:	2303      	movs	r3, #3
   b6c44:	f88d 301b 	strb.w	r3, [sp, #27]
   b6c48:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b6c4a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b6c4e:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b6c52:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6c56:	9305      	str	r3, [sp, #20]
   b6c58:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6c5c:	b2d2      	uxtb	r2, r2
   b6c5e:	211a      	movs	r1, #26
   b6c60:	4650      	mov	r0, sl
   b6c62:	f7ff fd2e 	bl	b66c2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6c66:	9b05      	ldr	r3, [sp, #20]
   b6c68:	9302      	str	r3, [sp, #8]
   b6c6a:	f10d 031a 	add.w	r3, sp, #26
   b6c6e:	2200      	movs	r2, #0
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	f10d 031b 	add.w	r3, sp, #27
   b6c76:	9203      	str	r2, [sp, #12]
   b6c78:	9300      	str	r3, [sp, #0]
   b6c7a:	464a      	mov	r2, r9
   b6c7c:	465b      	mov	r3, fp
   b6c7e:	a907      	add	r1, sp, #28
   b6c80:	4650      	mov	r0, sl
   b6c82:	f7ff fe95 	bl	b69b0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6c86:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6c88:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6c8a:	d14c      	bne.n	b6d26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b6c8c:	211c      	movs	r1, #28
   b6c8e:	4650      	mov	r0, sl
   b6c90:	f7ff fce5 	bl	b665e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b6c94:	0681      	lsls	r1, r0, #26
   b6c96:	f100 8099 	bmi.w	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b6c9a:	f010 001f 	ands.w	r0, r0, #31
   b6c9e:	bf08      	it	eq
   b6ca0:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b6ca2:	42a0      	cmp	r0, r4
   b6ca4:	f340 8087 	ble.w	b6db6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b6ca8:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6caa:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b6cae:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6cb0:	f013 0307 	ands.w	r3, r3, #7
   b6cb4:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b6cb8:	bf18      	it	ne
   b6cba:	2301      	movne	r3, #1
   b6cbc:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b6cbe:	4418      	add	r0, r3
   b6cc0:	ab0a      	add	r3, sp, #40	; 0x28
   b6cc2:	4418      	add	r0, r3
   b6cc4:	2301      	movs	r3, #1
   b6cc6:	fa03 f202 	lsl.w	r2, r3, r2
   b6cca:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b6cce:	4313      	orrs	r3, r2
   b6cd0:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b6cd4:	e794      	b.n	b6c00 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b6cd6:	2397      	movs	r3, #151	; 0x97
   b6cd8:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b6cdc:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b6cde:	4623      	mov	r3, r4
				break;
   b6ce0:	e757      	b.n	b6b92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6ce2:	4643      	mov	r3, r8
   b6ce4:	e746      	b.n	b6b74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6ce6:	4643      	mov	r3, r8
   b6ce8:	e753      	b.n	b6b92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b6cea:	2102      	movs	r1, #2
   b6cec:	e75d      	b.n	b6baa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b6cee:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6cf0:	3302      	adds	r3, #2
   b6cf2:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6cf4:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6cf8:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6cfc:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6d00:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6d04:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6d08:	bf18      	it	ne
   b6d0a:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b6d0e:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6d10:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b6d12:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6d16:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6d1a:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b6d1e:	f88d 301b 	strb.w	r3, [sp, #27]
   b6d22:	9404      	str	r4, [sp, #16]
   b6d24:	e795      	b.n	b6c52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6d26:	2801      	cmp	r0, #1
   b6d28:	d150      	bne.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6d2a:	9b04      	ldr	r3, [sp, #16]
   b6d2c:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b6d2e:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6d32:	f77f af67 	ble.w	b6c04 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6d36:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6d3a:	2b88      	cmp	r3, #136	; 0x88
   b6d3c:	d13e      	bne.n	b6dbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b6d3e:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6d40:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b6d42:	3601      	adds	r6, #1
   b6d44:	441a      	add	r2, r3
   b6d46:	fa57 f686 	uxtab	r6, r7, r6
   b6d4a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6d4c:	4619      	mov	r1, r3
   b6d4e:	a80a      	add	r0, sp, #40	; 0x28
   b6d50:	3301      	adds	r3, #1
   b6d52:	4401      	add	r1, r0
   b6d54:	b2db      	uxtb	r3, r3
   b6d56:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6d5a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b6d5e:	4293      	cmp	r3, r2
   b6d60:	d1f4      	bne.n	b6d4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b6d62:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6d66:	2e03      	cmp	r6, #3
   b6d68:	d137      	bne.n	b6dda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6d6a:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b6d6e:	bba4      	cbnz	r4, b6dda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6d70:	f10d 031e 	add.w	r3, sp, #30
   b6d74:	2201      	movs	r2, #1
   b6d76:	4659      	mov	r1, fp
   b6d78:	4650      	mov	r0, sl
   b6d7a:	f7ff fcd8 	bl	b672e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b6d7e:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6d80:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b6d82:	d123      	bne.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6d84:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6d88:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b6d8c:	429a      	cmp	r2, r3
   b6d8e:	d127      	bne.n	b6de0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b6d90:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6d94:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6d98:	429a      	cmp	r2, r3
   b6d9a:	d121      	bne.n	b6de0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6d9c:	f89b 3000 	ldrb.w	r3, [fp]
   b6da0:	075a      	lsls	r2, r3, #29
   b6da2:	d50e      	bpl.n	b6dc2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b6da4:	3501      	adds	r5, #1
   b6da6:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b6da8:	2d03      	cmp	r5, #3
   b6daa:	d094      	beq.n	b6cd6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b6dac:	2d04      	cmp	r5, #4
   b6dae:	d002      	beq.n	b6db6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b6db0:	2d02      	cmp	r5, #2
   b6db2:	f43f aee2 	beq.w	b6b7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b6db6:	f04f 0906 	mov.w	r9, #6
   b6dba:	e007      	b.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6dbc:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6dbe:	2204      	movs	r2, #4
   b6dc0:	e7bf      	b.n	b6d42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b6dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6dc6:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6dc8:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6dca:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6dcc:	4648      	mov	r0, r9
   b6dce:	b00b      	add	sp, #44	; 0x2c
   b6dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b6dd4:	f04f 0907 	mov.w	r9, #7
   b6dd8:	e7f8      	b.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6dda:	f04f 0902 	mov.w	r9, #2
   b6dde:	e7f5      	b.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b6de0:	f04f 0908 	mov.w	r9, #8
   b6de4:	e7f2      	b.n	b6dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b6de6 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b6de6:	b508      	push	{r3, lr}
   b6de8:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6dea:	2200      	movs	r2, #0
   b6dec:	f7ff fea9 	bl	b6b42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6df0:	1e43      	subs	r3, r0, #1
   b6df2:	4258      	negs	r0, r3
   b6df4:	4158      	adcs	r0, r3
   b6df6:	bd08      	pop	{r3, pc}

000b6df8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <os_mutex_recursive_create+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030248 	.word	0x00030248

000b6e08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <HAL_RNG_GetRandomNumber+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	685b      	ldr	r3, [r3, #4]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030218 	.word	0x00030218

000b6e18 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <HAL_Delay_Microseconds+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	68db      	ldr	r3, [r3, #12]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	00030218 	.word	0x00030218

000b6e28 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	695b      	ldr	r3, [r3, #20]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030218 	.word	0x00030218

000b6e38 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <HAL_Validate_Pin_Function+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	685b      	ldr	r3, [r3, #4]
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	0003022c 	.word	0x0003022c

000b6e48 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <HAL_Pin_Mode+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	689b      	ldr	r3, [r3, #8]
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	0003022c 	.word	0x0003022c

000b6e58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <HAL_Get_Pin_Mode+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	68db      	ldr	r3, [r3, #12]
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	0003022c 	.word	0x0003022c

000b6e68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <HAL_GPIO_Write+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	691b      	ldr	r3, [r3, #16]
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	0003022c 	.word	0x0003022c

000b6e78 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <HAL_GPIO_Read+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	695b      	ldr	r3, [r3, #20]
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	0003022c 	.word	0x0003022c

000b6e88 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <HAL_Interrupts_Enable_All+0xc>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	6a1b      	ldr	r3, [r3, #32]
   b6e90:	9301      	str	r3, [sp, #4]
   b6e92:	bd08      	pop	{r3, pc}
   b6e94:	0003022c 	.word	0x0003022c

000b6e98 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <HAL_Interrupts_Disable_All+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	0003022c 	.word	0x0003022c

000b6ea8 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <hal_adc_read+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	0003022c 	.word	0x0003022c

000b6eb8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <HAL_Pulse_In+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	0003022c 	.word	0x0003022c

000b6ec8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <hal_i2c_set_speed+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	681b      	ldr	r3, [r3, #0]
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	00030228 	.word	0x00030228

000b6ed8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <hal_i2c_begin+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	68db      	ldr	r3, [r3, #12]
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	00030228 	.word	0x00030228

000b6ee8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <hal_i2c_begin_transmission+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	699b      	ldr	r3, [r3, #24]
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	00030228 	.word	0x00030228

000b6ef8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <hal_i2c_end_transmission+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	69db      	ldr	r3, [r3, #28]
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	00030228 	.word	0x00030228

000b6f08 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <hal_i2c_write+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	6a1b      	ldr	r3, [r3, #32]
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	00030228 	.word	0x00030228

000b6f18 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <hal_i2c_available+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	00030228 	.word	0x00030228

000b6f28 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <hal_i2c_read+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	00030228 	.word	0x00030228

000b6f38 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <hal_i2c_peek+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	00030228 	.word	0x00030228

000b6f48 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <hal_i2c_flush+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	00030228 	.word	0x00030228

000b6f58 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <hal_i2c_is_enabled+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	00030228 	.word	0x00030228

000b6f68 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <hal_i2c_init+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	00030228 	.word	0x00030228

000b6f78 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <inet_inet_ntop+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	695b      	ldr	r3, [r3, #20]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	00030264 	.word	0x00030264

000b6f88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <netdb_freeaddrinfo+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	689b      	ldr	r3, [r3, #8]
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	00030268 	.word	0x00030268

000b6f98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <netdb_getaddrinfo+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	68db      	ldr	r3, [r3, #12]
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	00030268 	.word	0x00030268

000b6fa8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <hal_spi_begin+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	681b      	ldr	r3, [r3, #0]
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	00030230 	.word	0x00030230

000b6fb8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <hal_spi_transfer+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	695b      	ldr	r3, [r3, #20]
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	00030230 	.word	0x00030230

000b6fc8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <hal_spi_init+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	69db      	ldr	r3, [r3, #28]
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	00030230 	.word	0x00030230

000b6fd8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <hal_spi_is_enabled+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	6a1b      	ldr	r3, [r3, #32]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	00030230 	.word	0x00030230

000b6fe8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <hal_spi_info+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030230 	.word	0x00030230

000b6ff8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <hal_spi_set_settings+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030230 	.word	0x00030230

000b7008 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <hal_spi_acquire+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	00030230 	.word	0x00030230

000b7018 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <hal_spi_release+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	00030230 	.word	0x00030230

000b7028 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <hal_usart_write+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	68db      	ldr	r3, [r3, #12]
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	0003023c 	.word	0x0003023c

000b7038 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <hal_usart_available+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	691b      	ldr	r3, [r3, #16]
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	0003023c 	.word	0x0003023c

000b7048 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <hal_usart_read+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	695b      	ldr	r3, [r3, #20]
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	0003023c 	.word	0x0003023c

000b7058 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <hal_usart_peek+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	699b      	ldr	r3, [r3, #24]
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	0003023c 	.word	0x0003023c

000b7068 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <hal_usart_flush+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	69db      	ldr	r3, [r3, #28]
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	0003023c 	.word	0x0003023c

000b7078 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <hal_usart_is_enabled+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	6a1b      	ldr	r3, [r3, #32]
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	0003023c 	.word	0x0003023c

000b7088 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <hal_usart_available_data_for_write+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	0003023c 	.word	0x0003023c

000b7098 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <hal_usart_init_ex+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	0003023c 	.word	0x0003023c

000b70a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <HAL_USB_USART_Init+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	681b      	ldr	r3, [r3, #0]
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	0003024c 	.word	0x0003024c

000b70b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <HAL_USB_USART_Begin+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	685b      	ldr	r3, [r3, #4]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	0003024c 	.word	0x0003024c

000b70c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <HAL_USB_USART_Available_Data+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	691b      	ldr	r3, [r3, #16]
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	0003024c 	.word	0x0003024c

000b70d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	695b      	ldr	r3, [r3, #20]
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	0003024c 	.word	0x0003024c

000b70e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <HAL_USB_USART_Receive_Data+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	699b      	ldr	r3, [r3, #24]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	0003024c 	.word	0x0003024c

000b70f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <HAL_USB_USART_Send_Data+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	69db      	ldr	r3, [r3, #28]
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	0003024c 	.word	0x0003024c

000b7108 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <HAL_USB_USART_Flush_Data+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6a1b      	ldr	r3, [r3, #32]
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	0003024c 	.word	0x0003024c

000b7118 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <panic_+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030260 	.word	0x00030260

000b7128 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <set_system_mode+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	685b      	ldr	r3, [r3, #4]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	00030220 	.word	0x00030220

000b7138 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <system_delay_ms+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	695b      	ldr	r3, [r3, #20]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	00030220 	.word	0x00030220

000b7148 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b03      	ldr	r3, [pc, #12]	; (b7158 <system_ctrl_set_app_request_handler+0x10>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7152:	9301      	str	r3, [sp, #4]
   b7154:	bd08      	pop	{r3, pc}
   b7156:	0000      	.short	0x0000
   b7158:	00030220 	.word	0x00030220

000b715c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b03      	ldr	r3, [pc, #12]	; (b716c <system_ctrl_set_result+0x10>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7166:	9301      	str	r3, [sp, #4]
   b7168:	bd08      	pop	{r3, pc}
   b716a:	0000      	.short	0x0000
   b716c:	00030220 	.word	0x00030220

000b7170 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	00030244 	.word	0x00030244

000b7180 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <spark_cloud_disconnect+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	00030244 	.word	0x00030244

000b7190 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <network_connect+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	685b      	ldr	r3, [r3, #4]
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	00030240 	.word	0x00030240

000b71a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <network_connecting+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	689b      	ldr	r3, [r3, #8]
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	00030240 	.word	0x00030240

000b71b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <network_disconnect+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	68db      	ldr	r3, [r3, #12]
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030240 	.word	0x00030240

000b71c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <network_ready+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	691b      	ldr	r3, [r3, #16]
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030240 	.word	0x00030240

000b71d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <network_on+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	695b      	ldr	r3, [r3, #20]
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030240 	.word	0x00030240

000b71e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <network_off+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	699b      	ldr	r3, [r3, #24]
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030240 	.word	0x00030240

000b71f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <network_listen+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	69db      	ldr	r3, [r3, #28]
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030240 	.word	0x00030240

000b7200 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <network_listening+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	6a1b      	ldr	r3, [r3, #32]
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030240 	.word	0x00030240

000b7210 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <network_set_listen_timeout+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	00030240 	.word	0x00030240

000b7220 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <network_get_listen_timeout+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	00030240 	.word	0x00030240

000b7230 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <network_is_on+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	00030240 	.word	0x00030240

000b7240 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <network_is_off+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	00030240 	.word	0x00030240

000b7250 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <malloc+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	681b      	ldr	r3, [r3, #0]
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	0003021c 	.word	0x0003021c

000b7260 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <free+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	685b      	ldr	r3, [r3, #4]
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	0003021c 	.word	0x0003021c

000b7270 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <realloc+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	689b      	ldr	r3, [r3, #8]
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	0003021c 	.word	0x0003021c

000b7280 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <snprintf+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	69db      	ldr	r3, [r3, #28]
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	0003021c 	.word	0x0003021c

000b7290 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <vsnprintf+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	0003021c 	.word	0x0003021c

000b72a0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <_malloc_r+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	0003021c 	.word	0x0003021c

000b72b0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <__assert_func+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	0003021c 	.word	0x0003021c

000b72c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <newlib_impure_ptr_callback+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	0003021c 	.word	0x0003021c

000b72d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b72d0:	2100      	movs	r1, #0
   b72d2:	f7ff bf31 	b.w	b7138 <system_delay_ms>
	...

000b72d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b72d8:	4802      	ldr	r0, [pc, #8]	; (b72e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b72da:	2300      	movs	r3, #0
   b72dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b72de:	f7ff bd8b 	b.w	b6df8 <os_mutex_recursive_create>
   b72e2:	bf00      	nop
   b72e4:	2003e6c4 	.word	0x2003e6c4

000b72e8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b72e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b72ea:	230c      	movs	r3, #12
   b72ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b72f0:	6803      	ldr	r3, [r0, #0]
   b72f2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b72f6:	7a03      	ldrb	r3, [r0, #8]
   b72f8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b72fc:	6843      	ldr	r3, [r0, #4]
   b72fe:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b7300:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b7302:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b7304:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7308:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b730a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b730e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7312:	f7ff ff35 	bl	b7180 <spark_cloud_disconnect>
}
   b7316:	b005      	add	sp, #20
   b7318:	f85d fb04 	ldr.w	pc, [sp], #4

000b731c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b731c:	2200      	movs	r2, #0
   b731e:	6840      	ldr	r0, [r0, #4]
   b7320:	4611      	mov	r1, r2
   b7322:	f7ff bf6d 	b.w	b7200 <network_listening>

000b7326 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7326:	2200      	movs	r2, #0
   b7328:	6840      	ldr	r0, [r0, #4]
   b732a:	4611      	mov	r1, r2
   b732c:	f7ff bf78 	b.w	b7220 <network_get_listen_timeout>

000b7330 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7330:	6840      	ldr	r0, [r0, #4]
   b7332:	2200      	movs	r2, #0
   b7334:	f7ff bf6c 	b.w	b7210 <network_set_listen_timeout>

000b7338 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7338:	6840      	ldr	r0, [r0, #4]
   b733a:	2200      	movs	r2, #0
   b733c:	f081 0101 	eor.w	r1, r1, #1
   b7340:	f7ff bf56 	b.w	b71f0 <network_listen>

000b7344 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7344:	2300      	movs	r3, #0
   b7346:	6840      	ldr	r0, [r0, #4]
   b7348:	461a      	mov	r2, r3
   b734a:	4619      	mov	r1, r3
   b734c:	f7ff bf48 	b.w	b71e0 <network_off>

000b7350 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7350:	2300      	movs	r3, #0
   b7352:	6840      	ldr	r0, [r0, #4]
   b7354:	461a      	mov	r2, r3
   b7356:	4619      	mov	r1, r3
   b7358:	f7ff bf3a 	b.w	b71d0 <network_on>

000b735c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b735c:	2200      	movs	r2, #0
   b735e:	6840      	ldr	r0, [r0, #4]
   b7360:	4611      	mov	r1, r2
   b7362:	f7ff bf2d 	b.w	b71c0 <network_ready>

000b7366 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7366:	2200      	movs	r2, #0
   b7368:	6840      	ldr	r0, [r0, #4]
   b736a:	4611      	mov	r1, r2
   b736c:	f7ff bf18 	b.w	b71a0 <network_connecting>

000b7370 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7370:	6840      	ldr	r0, [r0, #4]
   b7372:	2200      	movs	r2, #0
   b7374:	2102      	movs	r1, #2
   b7376:	f7ff bf1b 	b.w	b71b0 <network_disconnect>

000b737a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b737a:	2300      	movs	r3, #0
   b737c:	6840      	ldr	r0, [r0, #4]
   b737e:	461a      	mov	r2, r3
   b7380:	f7ff bf06 	b.w	b7190 <network_connect>

000b7384 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7384:	4b02      	ldr	r3, [pc, #8]	; (b7390 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7386:	2203      	movs	r2, #3
   b7388:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b738a:	4a02      	ldr	r2, [pc, #8]	; (b7394 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b738c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b738e:	4770      	bx	lr
   b7390:	2003e6c8 	.word	0x2003e6c8
   b7394:	000b995c 	.word	0x000b995c

000b7398 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7398:	4770      	bx	lr

000b739a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b739c:	4606      	mov	r6, r0
   b739e:	4615      	mov	r5, r2
   b73a0:	460c      	mov	r4, r1
   b73a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b73a4:	42bc      	cmp	r4, r7
   b73a6:	d006      	beq.n	b73b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b73a8:	6833      	ldr	r3, [r6, #0]
   b73aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b73ae:	689b      	ldr	r3, [r3, #8]
   b73b0:	4630      	mov	r0, r6
   b73b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b73b4:	e7f6      	b.n	b73a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b73b6:	4628      	mov	r0, r5
   b73b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b73ba:	7c00      	ldrb	r0, [r0, #16]
   b73bc:	2200      	movs	r2, #0
   b73be:	f7ff bda3 	b.w	b6f08 <hal_i2c_write>

000b73c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b73c2:	7c00      	ldrb	r0, [r0, #16]
   b73c4:	2100      	movs	r1, #0
   b73c6:	f7ff bda7 	b.w	b6f18 <hal_i2c_available>

000b73ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b73ca:	7c00      	ldrb	r0, [r0, #16]
   b73cc:	2100      	movs	r1, #0
   b73ce:	f7ff bdab 	b.w	b6f28 <hal_i2c_read>

000b73d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b73d2:	7c00      	ldrb	r0, [r0, #16]
   b73d4:	2100      	movs	r1, #0
   b73d6:	f7ff bdaf 	b.w	b6f38 <hal_i2c_peek>

000b73da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b73da:	7c00      	ldrb	r0, [r0, #16]
   b73dc:	2100      	movs	r1, #0
   b73de:	f7ff bdb3 	b.w	b6f48 <hal_i2c_flush>

000b73e2 <_ZN7TwoWireD0Ev>:
   b73e2:	b510      	push	{r4, lr}
   b73e4:	2114      	movs	r1, #20
   b73e6:	4604      	mov	r4, r0
   b73e8:	f7fc fe55 	bl	b4096 <_ZdlPvj>
   b73ec:	4620      	mov	r0, r4
   b73ee:	bd10      	pop	{r4, pc}

000b73f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b73f0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b73f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73f6:	4604      	mov	r4, r0
   b73f8:	4608      	mov	r0, r1
   b73fa:	2100      	movs	r1, #0
   b73fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7400:	4b03      	ldr	r3, [pc, #12]	; (b7410 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7402:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7404:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7406:	4611      	mov	r1, r2
   b7408:	f7ff fdae 	bl	b6f68 <hal_i2c_init>
}
   b740c:	4620      	mov	r0, r4
   b740e:	bd10      	pop	{r4, pc}
   b7410:	000b9998 	.word	0x000b9998

000b7414 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7414:	7c00      	ldrb	r0, [r0, #16]
   b7416:	2200      	movs	r2, #0
   b7418:	f7ff bd56 	b.w	b6ec8 <hal_i2c_set_speed>

000b741c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b741c:	2300      	movs	r3, #0
   b741e:	7c00      	ldrb	r0, [r0, #16]
   b7420:	461a      	mov	r2, r3
   b7422:	4619      	mov	r1, r3
   b7424:	f7ff bd58 	b.w	b6ed8 <hal_i2c_begin>

000b7428 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7428:	7c00      	ldrb	r0, [r0, #16]
   b742a:	2200      	movs	r2, #0
   b742c:	f7ff bd5c 	b.w	b6ee8 <hal_i2c_begin_transmission>

000b7430 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7430:	b2c9      	uxtb	r1, r1
   b7432:	f7ff bff9 	b.w	b7428 <_ZN7TwoWire17beginTransmissionEh>

000b7436 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7436:	7c00      	ldrb	r0, [r0, #16]
   b7438:	2200      	movs	r2, #0
   b743a:	f7ff bd5d 	b.w	b6ef8 <hal_i2c_end_transmission>

000b743e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b743e:	2101      	movs	r1, #1
   b7440:	f7ff bff9 	b.w	b7436 <_ZN7TwoWire15endTransmissionEh>

000b7444 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b7444:	f7ff bd28 	b.w	b6e98 <HAL_Interrupts_Disable_All>

000b7448 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b7448:	f7ff bd1e 	b.w	b6e88 <HAL_Interrupts_Enable_All>

000b744c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b744c:	4770      	bx	lr

000b744e <_ZN9IPAddressD0Ev>:
   b744e:	b510      	push	{r4, lr}
   b7450:	2118      	movs	r1, #24
   b7452:	4604      	mov	r4, r0
   b7454:	f7fc fe1f 	bl	b4096 <_ZdlPvj>
   b7458:	4620      	mov	r0, r4
   b745a:	bd10      	pop	{r4, pc}

000b745c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b745c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b745e:	7d03      	ldrb	r3, [r0, #20]
   b7460:	2b06      	cmp	r3, #6
{
   b7462:	b08d      	sub	sp, #52	; 0x34
   b7464:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7466:	f100 0704 	add.w	r7, r0, #4
   b746a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b746e:	d012      	beq.n	b7496 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7470:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7478:	220a      	movs	r2, #10
   b747a:	4630      	mov	r0, r6
   b747c:	f000 f95d 	bl	b773a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7480:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7482:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7484:	d019      	beq.n	b74ba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7486:	2c00      	cmp	r4, #0
   b7488:	d0f4      	beq.n	b7474 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b748a:	212e      	movs	r1, #46	; 0x2e
   b748c:	4630      	mov	r0, r6
   b748e:	f000 f93b 	bl	b7708 <_ZN5Print5printEc>
   b7492:	4404      	add	r4, r0
   b7494:	e7ee      	b.n	b7474 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7496:	232f      	movs	r3, #47	; 0x2f
   b7498:	466a      	mov	r2, sp
   b749a:	4639      	mov	r1, r7
   b749c:	200a      	movs	r0, #10
		buf[0] = 0;
   b749e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b74a2:	f7ff fd69 	bl	b6f78 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b74a6:	4668      	mov	r0, sp
   b74a8:	f001 f874 	bl	b8594 <strlen>
   b74ac:	6833      	ldr	r3, [r6, #0]
   b74ae:	4602      	mov	r2, r0
   b74b0:	68db      	ldr	r3, [r3, #12]
   b74b2:	4669      	mov	r1, sp
   b74b4:	4630      	mov	r0, r6
   b74b6:	4798      	blx	r3
   b74b8:	4604      	mov	r4, r0
    }
    return n;
}
   b74ba:	4620      	mov	r0, r4
   b74bc:	b00d      	add	sp, #52	; 0x34
   b74be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74c0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b74c0:	b510      	push	{r4, lr}
   b74c2:	4b05      	ldr	r3, [pc, #20]	; (b74d8 <_ZN9IPAddressC1Ev+0x18>)
   b74c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b74c6:	2211      	movs	r2, #17
   b74c8:	f840 3b04 	str.w	r3, [r0], #4
   b74cc:	2100      	movs	r1, #0
   b74ce:	f001 f813 	bl	b84f8 <memset>
}
   b74d2:	4620      	mov	r0, r4
   b74d4:	bd10      	pop	{r4, pc}
   b74d6:	bf00      	nop
   b74d8:	000b99c0 	.word	0x000b99c0

000b74dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b74dc:	4603      	mov	r3, r0
   b74de:	4a07      	ldr	r2, [pc, #28]	; (b74fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b74e0:	b510      	push	{r4, lr}
   b74e2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b74e6:	f101 0210 	add.w	r2, r1, #16
   b74ea:	f851 4b04 	ldr.w	r4, [r1], #4
   b74ee:	f843 4b04 	str.w	r4, [r3], #4
   b74f2:	4291      	cmp	r1, r2
   b74f4:	d1f9      	bne.n	b74ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b74f6:	780a      	ldrb	r2, [r1, #0]
   b74f8:	701a      	strb	r2, [r3, #0]
}
   b74fa:	bd10      	pop	{r4, pc}
   b74fc:	000b99c0 	.word	0x000b99c0

000b7500 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7500:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7502:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7506:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b750a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b750e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7512:	2304      	movs	r3, #4
   b7514:	6041      	str	r1, [r0, #4]
   b7516:	7503      	strb	r3, [r0, #20]
}
   b7518:	bd10      	pop	{r4, pc}
	...

000b751c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b751c:	b507      	push	{r0, r1, r2, lr}
   b751e:	4b06      	ldr	r3, [pc, #24]	; (b7538 <_ZN9IPAddressC1EPKh+0x1c>)
   b7520:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7522:	78cb      	ldrb	r3, [r1, #3]
   b7524:	9300      	str	r3, [sp, #0]
   b7526:	788b      	ldrb	r3, [r1, #2]
   b7528:	784a      	ldrb	r2, [r1, #1]
   b752a:	7809      	ldrb	r1, [r1, #0]
   b752c:	f7ff ffe8 	bl	b7500 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7530:	b003      	add	sp, #12
   b7532:	f85d fb04 	ldr.w	pc, [sp], #4
   b7536:	bf00      	nop
   b7538:	000b99c0 	.word	0x000b99c0

000b753c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b753c:	4b01      	ldr	r3, [pc, #4]	; (b7544 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b753e:	4a02      	ldr	r2, [pc, #8]	; (b7548 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7540:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7542:	4770      	bx	lr
   b7544:	2003e6d0 	.word	0x2003e6d0
   b7548:	000b99cc 	.word	0x000b99cc

000b754c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b754c:	2300      	movs	r3, #0
   b754e:	6840      	ldr	r0, [r0, #4]
   b7550:	461a      	mov	r2, r3
   b7552:	f7ff be1d 	b.w	b7190 <network_connect>

000b7556 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7556:	6840      	ldr	r0, [r0, #4]
   b7558:	2200      	movs	r2, #0
   b755a:	2102      	movs	r1, #2
   b755c:	f7ff be28 	b.w	b71b0 <network_disconnect>

000b7560 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7560:	2200      	movs	r2, #0
   b7562:	6840      	ldr	r0, [r0, #4]
   b7564:	4611      	mov	r1, r2
   b7566:	f7ff be1b 	b.w	b71a0 <network_connecting>

000b756a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b756a:	2200      	movs	r2, #0
   b756c:	6840      	ldr	r0, [r0, #4]
   b756e:	4611      	mov	r1, r2
   b7570:	f7ff be26 	b.w	b71c0 <network_ready>

000b7574 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7574:	2300      	movs	r3, #0
   b7576:	6840      	ldr	r0, [r0, #4]
   b7578:	461a      	mov	r2, r3
   b757a:	4619      	mov	r1, r3
   b757c:	f7ff be28 	b.w	b71d0 <network_on>

000b7580 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7580:	2300      	movs	r3, #0
   b7582:	6840      	ldr	r0, [r0, #4]
   b7584:	461a      	mov	r2, r3
   b7586:	4619      	mov	r1, r3
   b7588:	f7ff be2a 	b.w	b71e0 <network_off>

000b758c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b758c:	6840      	ldr	r0, [r0, #4]
   b758e:	2100      	movs	r1, #0
   b7590:	f7ff be4e 	b.w	b7230 <network_is_on>

000b7594 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7594:	6840      	ldr	r0, [r0, #4]
   b7596:	2100      	movs	r1, #0
   b7598:	f7ff be52 	b.w	b7240 <network_is_off>

000b759c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b759c:	6840      	ldr	r0, [r0, #4]
   b759e:	2200      	movs	r2, #0
   b75a0:	f081 0101 	eor.w	r1, r1, #1
   b75a4:	f7ff be24 	b.w	b71f0 <network_listen>

000b75a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b75a8:	6840      	ldr	r0, [r0, #4]
   b75aa:	2200      	movs	r2, #0
   b75ac:	f7ff be30 	b.w	b7210 <network_set_listen_timeout>

000b75b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b75b0:	2200      	movs	r2, #0
   b75b2:	6840      	ldr	r0, [r0, #4]
   b75b4:	4611      	mov	r1, r2
   b75b6:	f7ff be33 	b.w	b7220 <network_get_listen_timeout>

000b75ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b75ba:	2200      	movs	r2, #0
   b75bc:	6840      	ldr	r0, [r0, #4]
   b75be:	4611      	mov	r1, r2
   b75c0:	f7ff be1e 	b.w	b7200 <network_listening>

000b75c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b75c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b75c8:	b095      	sub	sp, #84	; 0x54
   b75ca:	4614      	mov	r4, r2
   b75cc:	460d      	mov	r5, r1
   b75ce:	4607      	mov	r7, r0
    IPAddress addr;
   b75d0:	f7ff ff76 	bl	b74c0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b75d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b75d6:	221c      	movs	r2, #28
   b75d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b75da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b75dc:	f000 ff8c 	bl	b84f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b75e0:	2340      	movs	r3, #64	; 0x40
   b75e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b75e4:	4620      	mov	r0, r4
   b75e6:	466b      	mov	r3, sp
   b75e8:	aa0c      	add	r2, sp, #48	; 0x30
   b75ea:	2100      	movs	r1, #0
   b75ec:	f7ff fcd4 	bl	b6f98 <netdb_getaddrinfo>
    if (!r) {
   b75f0:	4604      	mov	r4, r0
   b75f2:	2800      	cmp	r0, #0
   b75f4:	d14b      	bne.n	b768e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b75f6:	4602      	mov	r2, r0
   b75f8:	2101      	movs	r1, #1
   b75fa:	6868      	ldr	r0, [r5, #4]
   b75fc:	f7ff fde0 	bl	b71c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7600:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7602:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7604:	4622      	mov	r2, r4
   b7606:	6868      	ldr	r0, [r5, #4]
   b7608:	f7ff fdda 	bl	b71c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b760c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b760e:	4681      	mov	r9, r0
        bool ok = false;
   b7610:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7612:	2e00      	cmp	r6, #0
   b7614:	d03b      	beq.n	b768e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7616:	2900      	cmp	r1, #0
   b7618:	d139      	bne.n	b768e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b761a:	6873      	ldr	r3, [r6, #4]
   b761c:	2b02      	cmp	r3, #2
   b761e:	d003      	beq.n	b7628 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7620:	2b0a      	cmp	r3, #10
   b7622:	d011      	beq.n	b7648 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7624:	69f6      	ldr	r6, [r6, #28]
   b7626:	e7f4      	b.n	b7612 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7628:	f1b8 0f00 	cmp.w	r8, #0
   b762c:	d0fa      	beq.n	b7624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b762e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7630:	a806      	add	r0, sp, #24
   b7632:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7634:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7636:	f7ff ff71 	bl	b751c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b763a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b763c:	1d3c      	adds	r4, r7, #4
   b763e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7640:	682b      	ldr	r3, [r5, #0]
   b7642:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7644:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7646:	e7ed      	b.n	b7624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7648:	f1b9 0f00 	cmp.w	r9, #0
   b764c:	d0ea      	beq.n	b7624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b764e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7650:	2210      	movs	r2, #16
   b7652:	a801      	add	r0, sp, #4
   b7654:	f000 ff50 	bl	b84f8 <memset>
                    a.v = 6;
   b7658:	2306      	movs	r3, #6
   b765a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b765e:	ad01      	add	r5, sp, #4
   b7660:	f104 0308 	add.w	r3, r4, #8
   b7664:	3418      	adds	r4, #24
   b7666:	6818      	ldr	r0, [r3, #0]
   b7668:	6859      	ldr	r1, [r3, #4]
   b766a:	462a      	mov	r2, r5
   b766c:	c203      	stmia	r2!, {r0, r1}
   b766e:	3308      	adds	r3, #8
   b7670:	42a3      	cmp	r3, r4
   b7672:	4615      	mov	r5, r2
   b7674:	d1f7      	bne.n	b7666 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7676:	a901      	add	r1, sp, #4
   b7678:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b767a:	ad07      	add	r5, sp, #28
   b767c:	f7ff ff2e 	bl	b74dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7682:	1d3c      	adds	r4, r7, #4
   b7684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7686:	682b      	ldr	r3, [r5, #0]
   b7688:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b768a:	4649      	mov	r1, r9
   b768c:	e7ca      	b.n	b7624 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b768e:	9800      	ldr	r0, [sp, #0]
   b7690:	f7ff fc7a 	bl	b6f88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7694:	4638      	mov	r0, r7
   b7696:	b015      	add	sp, #84	; 0x54
   b7698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b769c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b769c:	4b02      	ldr	r3, [pc, #8]	; (b76a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b769e:	4a03      	ldr	r2, [pc, #12]	; (b76ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b76a0:	601a      	str	r2, [r3, #0]
   b76a2:	2200      	movs	r2, #0
   b76a4:	605a      	str	r2, [r3, #4]

} // spark
   b76a6:	4770      	bx	lr
   b76a8:	2003e6d4 	.word	0x2003e6d4
   b76ac:	000b99d8 	.word	0x000b99d8

000b76b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b76b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b76b2:	4606      	mov	r6, r0
   b76b4:	460d      	mov	r5, r1
  size_t n = 0;
   b76b6:	188f      	adds	r7, r1, r2
   b76b8:	2400      	movs	r4, #0
  while (size--) {
   b76ba:	42bd      	cmp	r5, r7
   b76bc:	d00c      	beq.n	b76d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b76be:	6833      	ldr	r3, [r6, #0]
   b76c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b76c4:	689b      	ldr	r3, [r3, #8]
   b76c6:	4630      	mov	r0, r6
   b76c8:	4798      	blx	r3
     if (chunk>=0)
   b76ca:	1e03      	subs	r3, r0, #0
   b76cc:	db01      	blt.n	b76d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b76ce:	441c      	add	r4, r3
  while (size--) {
   b76d0:	e7f3      	b.n	b76ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b76d2:	2c00      	cmp	r4, #0
   b76d4:	bf08      	it	eq
   b76d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b76d8:	4620      	mov	r0, r4
   b76da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b76dc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b76dc:	b513      	push	{r0, r1, r4, lr}
   b76de:	4604      	mov	r4, r0
    }
   b76e0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b76e2:	b159      	cbz	r1, b76fc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b76e4:	9101      	str	r1, [sp, #4]
   b76e6:	f000 ff55 	bl	b8594 <strlen>
   b76ea:	6823      	ldr	r3, [r4, #0]
   b76ec:	9901      	ldr	r1, [sp, #4]
   b76ee:	68db      	ldr	r3, [r3, #12]
   b76f0:	4602      	mov	r2, r0
   b76f2:	4620      	mov	r0, r4
    }
   b76f4:	b002      	add	sp, #8
   b76f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b76fa:	4718      	bx	r3
    }
   b76fc:	b002      	add	sp, #8
   b76fe:	bd10      	pop	{r4, pc}

000b7700 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7700:	b508      	push	{r3, lr}
  return write(str);
   b7702:	f7ff ffeb 	bl	b76dc <_ZN5Print5writeEPKc>
}
   b7706:	bd08      	pop	{r3, pc}

000b7708 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7708:	6803      	ldr	r3, [r0, #0]
   b770a:	689b      	ldr	r3, [r3, #8]
   b770c:	4718      	bx	r3

000b770e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b770e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7710:	210d      	movs	r1, #13
{
   b7712:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7714:	f7ff fff8 	bl	b7708 <_ZN5Print5printEc>
  n += print('\n');
   b7718:	210a      	movs	r1, #10
  size_t n = print('\r');
   b771a:	4604      	mov	r4, r0
  n += print('\n');
   b771c:	4628      	mov	r0, r5
   b771e:	f7ff fff3 	bl	b7708 <_ZN5Print5printEc>
  return n;
}
   b7722:	4420      	add	r0, r4
   b7724:	bd38      	pop	{r3, r4, r5, pc}

000b7726 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7726:	b538      	push	{r3, r4, r5, lr}
   b7728:	4605      	mov	r5, r0
  return write(str);
   b772a:	f7ff ffd7 	bl	b76dc <_ZN5Print5writeEPKc>
   b772e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7730:	4628      	mov	r0, r5
   b7732:	f7ff ffec 	bl	b770e <_ZN5Print7printlnEv>
  return n;
}
   b7736:	4420      	add	r0, r4
   b7738:	bd38      	pop	{r3, r4, r5, pc}

000b773a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b773a:	b530      	push	{r4, r5, lr}
   b773c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b773e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7740:	2a01      	cmp	r2, #1
  *str = '\0';
   b7742:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7746:	bf98      	it	ls
   b7748:	220a      	movls	r2, #10
   b774a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b774c:	460d      	mov	r5, r1
   b774e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7752:	fb01 5312 	mls	r3, r1, r2, r5
   b7756:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b775a:	2b09      	cmp	r3, #9
   b775c:	bf94      	ite	ls
   b775e:	3330      	addls	r3, #48	; 0x30
   b7760:	3337      	addhi	r3, #55	; 0x37
   b7762:	b2db      	uxtb	r3, r3
  } while(n);
   b7764:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7766:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b776a:	d9ef      	bls.n	b774c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b776c:	4621      	mov	r1, r4
   b776e:	f7ff ffb5 	bl	b76dc <_ZN5Print5writeEPKc>
}
   b7772:	b00b      	add	sp, #44	; 0x2c
   b7774:	bd30      	pop	{r4, r5, pc}

000b7776 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b777a:	b086      	sub	sp, #24
   b777c:	af00      	add	r7, sp, #0
   b777e:	4605      	mov	r5, r0
   b7780:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7782:	1d38      	adds	r0, r7, #4
   b7784:	2114      	movs	r1, #20
{
   b7786:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7788:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b778a:	f7ff fd81 	bl	b7290 <vsnprintf>

    if (n<bufsize)
   b778e:	2813      	cmp	r0, #19
   b7790:	d80e      	bhi.n	b77b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7792:	1d39      	adds	r1, r7, #4
   b7794:	4628      	mov	r0, r5
   b7796:	f7ff ffa1 	bl	b76dc <_ZN5Print5writeEPKc>
   b779a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b779c:	b11e      	cbz	r6, b77a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b779e:	4628      	mov	r0, r5
   b77a0:	f7ff ffb5 	bl	b770e <_ZN5Print7printlnEv>
   b77a4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b77a6:	4620      	mov	r0, r4
   b77a8:	3718      	adds	r7, #24
   b77aa:	46bd      	mov	sp, r7
   b77ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b77b0:	f100 0308 	add.w	r3, r0, #8
   b77b4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b77b8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b77ba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b77be:	4622      	mov	r2, r4
   b77c0:	1c41      	adds	r1, r0, #1
   b77c2:	683b      	ldr	r3, [r7, #0]
   b77c4:	4668      	mov	r0, sp
   b77c6:	f7ff fd63 	bl	b7290 <vsnprintf>
  return write(str);
   b77ca:	4669      	mov	r1, sp
   b77cc:	4628      	mov	r0, r5
   b77ce:	f7ff ff85 	bl	b76dc <_ZN5Print5writeEPKc>
   b77d2:	4604      	mov	r4, r0
   b77d4:	46c5      	mov	sp, r8
   b77d6:	e7e1      	b.n	b779c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b77d8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b77d8:	4b01      	ldr	r3, [pc, #4]	; (b77e0 <_GLOBAL__sub_I_RGB+0x8>)
   b77da:	2200      	movs	r2, #0
   b77dc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b77de:	4770      	bx	lr
   b77e0:	2003e6dc 	.word	0x2003e6dc

000b77e4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b77e4:	2100      	movs	r1, #0
   b77e6:	f7ff bc17 	b.w	b7018 <hal_spi_release>

000b77ea <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b77ea:	2100      	movs	r1, #0
   b77ec:	f7ff bc0c 	b.w	b7008 <hal_spi_acquire>

000b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b77f0:	b510      	push	{r4, lr}
   b77f2:	4604      	mov	r4, r0
   b77f4:	4608      	mov	r0, r1
{
    _spi = spi;
   b77f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b77f8:	f7ff fbe6 	bl	b6fc8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b77fc:	2300      	movs	r3, #0
   b77fe:	6063      	str	r3, [r4, #4]
}
   b7800:	4620      	mov	r0, r4
   b7802:	bd10      	pop	{r4, pc}

000b7804 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7804:	b513      	push	{r0, r1, r4, lr}
   b7806:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7808:	7800      	ldrb	r0, [r0, #0]
   b780a:	f7ff ffee 	bl	b77ea <_ZN8SPIClass4lockEv.isra.0>
   b780e:	b958      	cbnz	r0, b7828 <_ZN8SPIClass5beginEv+0x24>
   b7810:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7812:	9001      	str	r0, [sp, #4]
   b7814:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7818:	f7ff fbc6 	bl	b6fa8 <hal_spi_begin>
        unlock();
   b781c:	9801      	ldr	r0, [sp, #4]
    }
}
   b781e:	b002      	add	sp, #8
   b7820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7824:	f7ff bfde 	b.w	b77e4 <_ZN8SPIClass6unlockEv.isra.0>
   b7828:	b002      	add	sp, #8
   b782a:	bd10      	pop	{r4, pc}

000b782c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b782c:	7800      	ldrb	r0, [r0, #0]
   b782e:	f7ff bfd9 	b.w	b77e4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7834 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7834:	0840      	lsrs	r0, r0, #1
{
   b7836:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7838:	6018      	str	r0, [r3, #0]
   b783a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b783c:	6818      	ldr	r0, [r3, #0]
   b783e:	4288      	cmp	r0, r1
   b7840:	b2e5      	uxtb	r5, r4
   b7842:	d906      	bls.n	b7852 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7844:	3401      	adds	r4, #1
   b7846:	2c08      	cmp	r4, #8
   b7848:	d002      	beq.n	b7850 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b784a:	0840      	lsrs	r0, r0, #1
   b784c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b784e:	e7f5      	b.n	b783c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7850:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7852:	4b02      	ldr	r3, [pc, #8]	; (b785c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7854:	5d5b      	ldrb	r3, [r3, r5]
   b7856:	7013      	strb	r3, [r2, #0]
}
   b7858:	bd30      	pop	{r4, r5, pc}
   b785a:	bf00      	nop
   b785c:	000b9a0c 	.word	0x000b9a0c

000b7860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7864:	4606      	mov	r6, r0
   b7866:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7868:	7800      	ldrb	r0, [r0, #0]
{
   b786a:	460c      	mov	r4, r1
    CHECK(lock());
   b786c:	f7ff ffbd 	bl	b77ea <_ZN8SPIClass4lockEv.isra.0>
   b7870:	2800      	cmp	r0, #0
   b7872:	db1b      	blt.n	b78ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7874:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7876:	2214      	movs	r2, #20
   b7878:	2100      	movs	r1, #0
   b787a:	a809      	add	r0, sp, #36	; 0x24
   b787c:	f000 fe3c 	bl	b84f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7880:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7882:	2200      	movs	r2, #0
   b7884:	a909      	add	r1, sp, #36	; 0x24
   b7886:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7888:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b788c:	f7ff fbac 	bl	b6fe8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7890:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7894:	b113      	cbz	r3, b789c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7896:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b789a:	b155      	cbz	r5, b78b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b789c:	2700      	movs	r7, #0
   b789e:	46b9      	mov	r9, r7
   b78a0:	46b8      	mov	r8, r7
   b78a2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b78a4:	7923      	ldrb	r3, [r4, #4]
   b78a6:	b15d      	cbz	r5, b78c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b78a8:	b1c3      	cbz	r3, b78dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b78aa:	2000      	movs	r0, #0
}
   b78ac:	b00f      	add	sp, #60	; 0x3c
   b78ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b78b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b78b6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b78ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b78be:	e7f1      	b.n	b78a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b78c0:	2b00      	cmp	r3, #0
   b78c2:	d135      	bne.n	b7930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b78c4:	68a3      	ldr	r3, [r4, #8]
   b78c6:	4543      	cmp	r3, r8
   b78c8:	d108      	bne.n	b78dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b78ca:	f88d 9020 	strb.w	r9, [sp, #32]
   b78ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b78d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b78d6:	89a3      	ldrh	r3, [r4, #12]
   b78d8:	429a      	cmp	r2, r3
   b78da:	d0e6      	beq.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b78dc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b78de:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b78e0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b78e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b78e6:	ab04      	add	r3, sp, #16
   b78e8:	f10d 020f 	add.w	r2, sp, #15
   b78ec:	f7ff ffa2 	bl	b7834 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b78f0:	7921      	ldrb	r1, [r4, #4]
   b78f2:	b985      	cbnz	r5, b7916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b78f4:	b989      	cbnz	r1, b791a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b78f6:	68a3      	ldr	r3, [r4, #8]
   b78f8:	4543      	cmp	r3, r8
   b78fa:	d30e      	bcc.n	b791a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b78fc:	f88d 9020 	strb.w	r9, [sp, #32]
   b7900:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7904:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7908:	89a3      	ldrh	r3, [r4, #12]
   b790a:	429a      	cmp	r2, r3
   b790c:	d105      	bne.n	b791a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b790e:	9b04      	ldr	r3, [sp, #16]
   b7910:	4543      	cmp	r3, r8
   b7912:	d102      	bne.n	b791a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7914:	e7c9      	b.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7916:	2900      	cmp	r1, #0
   b7918:	d1f9      	bne.n	b790e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b791a:	2300      	movs	r3, #0
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	7b63      	ldrb	r3, [r4, #13]
   b7920:	9300      	str	r3, [sp, #0]
   b7922:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7926:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7928:	7830      	ldrb	r0, [r6, #0]
   b792a:	f7ff fb65 	bl	b6ff8 <hal_spi_set_settings>
   b792e:	e7bc      	b.n	b78aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7930:	e9cd 5500 	strd	r5, r5, [sp]
   b7934:	462b      	mov	r3, r5
   b7936:	462a      	mov	r2, r5
   b7938:	2101      	movs	r1, #1
   b793a:	e7f5      	b.n	b7928 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b793c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b793c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b793e:	7800      	ldrb	r0, [r0, #0]
   b7940:	f7ff fb3a 	bl	b6fb8 <hal_spi_transfer>
}
   b7944:	b2c0      	uxtb	r0, r0
   b7946:	bd08      	pop	{r3, pc}

000b7948 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7948:	b510      	push	{r4, lr}
   b794a:	4604      	mov	r4, r0
{
	free(buffer);
   b794c:	6800      	ldr	r0, [r0, #0]
   b794e:	f7ff fc87 	bl	b7260 <free>
}
   b7952:	4620      	mov	r0, r4
   b7954:	bd10      	pop	{r4, pc}

000b7956 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7956:	b510      	push	{r4, lr}
   b7958:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b795a:	6800      	ldr	r0, [r0, #0]
   b795c:	b108      	cbz	r0, b7962 <_ZN6String10invalidateEv+0xc>
   b795e:	f7ff fc7f 	bl	b7260 <free>
	buffer = NULL;
   b7962:	2300      	movs	r3, #0
	capacity = len = 0;
   b7964:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7968:	6023      	str	r3, [r4, #0]
}
   b796a:	bd10      	pop	{r4, pc}

000b796c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b796c:	b538      	push	{r3, r4, r5, lr}
   b796e:	4604      	mov	r4, r0
   b7970:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7972:	6800      	ldr	r0, [r0, #0]
   b7974:	3101      	adds	r1, #1
   b7976:	f7ff fc7b 	bl	b7270 <realloc>
	if (newbuffer) {
   b797a:	b110      	cbz	r0, b7982 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b797c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7980:	2001      	movs	r0, #1
	}
	return 0;
}
   b7982:	bd38      	pop	{r3, r4, r5, pc}

000b7984 <_ZN6String7reserveEj>:
{
   b7984:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7986:	6803      	ldr	r3, [r0, #0]
{
   b7988:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b798a:	b123      	cbz	r3, b7996 <_ZN6String7reserveEj+0x12>
   b798c:	6843      	ldr	r3, [r0, #4]
   b798e:	428b      	cmp	r3, r1
   b7990:	d301      	bcc.n	b7996 <_ZN6String7reserveEj+0x12>
   b7992:	2001      	movs	r0, #1
}
   b7994:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7996:	4620      	mov	r0, r4
   b7998:	f7ff ffe8 	bl	b796c <_ZN6String12changeBufferEj>
   b799c:	2800      	cmp	r0, #0
   b799e:	d0f9      	beq.n	b7994 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b79a0:	68a3      	ldr	r3, [r4, #8]
   b79a2:	2b00      	cmp	r3, #0
   b79a4:	d1f5      	bne.n	b7992 <_ZN6String7reserveEj+0xe>
   b79a6:	6822      	ldr	r2, [r4, #0]
   b79a8:	7013      	strb	r3, [r2, #0]
   b79aa:	e7f2      	b.n	b7992 <_ZN6String7reserveEj+0xe>

000b79ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b79ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b79ae:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b79b0:	4611      	mov	r1, r2
   b79b2:	9201      	str	r2, [sp, #4]
{
   b79b4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b79b6:	f7ff ffe5 	bl	b7984 <_ZN6String7reserveEj>
   b79ba:	9a01      	ldr	r2, [sp, #4]
   b79bc:	b928      	cbnz	r0, b79ca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b79be:	4620      	mov	r0, r4
   b79c0:	f7ff ffc9 	bl	b7956 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b79c4:	4620      	mov	r0, r4
   b79c6:	b003      	add	sp, #12
   b79c8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b79ca:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b79cc:	4629      	mov	r1, r5
   b79ce:	6820      	ldr	r0, [r4, #0]
   b79d0:	f000 fd84 	bl	b84dc <memcpy>
	buffer[len] = 0;
   b79d4:	6822      	ldr	r2, [r4, #0]
   b79d6:	68a3      	ldr	r3, [r4, #8]
   b79d8:	2100      	movs	r1, #0
   b79da:	54d1      	strb	r1, [r2, r3]
	return *this;
   b79dc:	e7f2      	b.n	b79c4 <_ZN6String4copyEPKcj+0x18>

000b79de <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b79de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b79e0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b79e2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b79e6:	4604      	mov	r4, r0
	len = 0;
   b79e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b79ea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b79ec:	b141      	cbz	r1, b7a00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b79ee:	4608      	mov	r0, r1
   b79f0:	9101      	str	r1, [sp, #4]
   b79f2:	f000 fdcf 	bl	b8594 <strlen>
   b79f6:	9901      	ldr	r1, [sp, #4]
   b79f8:	4602      	mov	r2, r0
   b79fa:	4620      	mov	r0, r4
   b79fc:	f7ff ffd6 	bl	b79ac <_ZN6String4copyEPKcj>
}
   b7a00:	4620      	mov	r0, r4
   b7a02:	b002      	add	sp, #8
   b7a04:	bd10      	pop	{r4, pc}

000b7a06 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7a06:	4288      	cmp	r0, r1
{
   b7a08:	b510      	push	{r4, lr}
   b7a0a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7a0c:	d005      	beq.n	b7a1a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7a0e:	680b      	ldr	r3, [r1, #0]
   b7a10:	b12b      	cbz	r3, b7a1e <_ZN6StringaSERKS_+0x18>
   b7a12:	688a      	ldr	r2, [r1, #8]
   b7a14:	4619      	mov	r1, r3
   b7a16:	f7ff ffc9 	bl	b79ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	bd10      	pop	{r4, pc}
	else invalidate();
   b7a1e:	f7ff ff9a 	bl	b7956 <_ZN6String10invalidateEv>
   b7a22:	e7fa      	b.n	b7a1a <_ZN6StringaSERKS_+0x14>

000b7a24 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7a24:	b510      	push	{r4, lr}
	buffer = NULL;
   b7a26:	2300      	movs	r3, #0
String::String(const String &value)
   b7a28:	4604      	mov	r4, r0
	capacity = 0;
   b7a2a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7a2e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7a30:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7a32:	f7ff ffe8 	bl	b7a06 <_ZN6StringaSERKS_>
}
   b7a36:	4620      	mov	r0, r4
   b7a38:	bd10      	pop	{r4, pc}

000b7a3a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7a3a:	b513      	push	{r0, r1, r4, lr}
   b7a3c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7a3e:	b159      	cbz	r1, b7a58 <_ZN6StringaSEPKc+0x1e>
   b7a40:	4608      	mov	r0, r1
   b7a42:	9101      	str	r1, [sp, #4]
   b7a44:	f000 fda6 	bl	b8594 <strlen>
   b7a48:	9901      	ldr	r1, [sp, #4]
   b7a4a:	4602      	mov	r2, r0
   b7a4c:	4620      	mov	r0, r4
   b7a4e:	f7ff ffad 	bl	b79ac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7a52:	4620      	mov	r0, r4
   b7a54:	b002      	add	sp, #8
   b7a56:	bd10      	pop	{r4, pc}
	else invalidate();
   b7a58:	f7ff ff7d 	bl	b7956 <_ZN6String10invalidateEv>
   b7a5c:	e7f9      	b.n	b7a52 <_ZN6StringaSEPKc+0x18>

000b7a5e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7a5e:	b510      	push	{r4, lr}
   b7a60:	4604      	mov	r4, r0
   b7a62:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7a64:	2300      	movs	r3, #0
	capacity = 0;
   b7a66:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7a6a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7a6c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7a6e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7a70:	a901      	add	r1, sp, #4
   b7a72:	f000 f9a5 	bl	b7dc0 <itoa>
	*this = buf;
   b7a76:	a901      	add	r1, sp, #4
   b7a78:	4620      	mov	r0, r4
   b7a7a:	f7ff ffde 	bl	b7a3a <_ZN6StringaSEPKc>
}
   b7a7e:	4620      	mov	r0, r4
   b7a80:	b00a      	add	sp, #40	; 0x28
   b7a82:	bd10      	pop	{r4, pc}

000b7a84 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7a84:	b570      	push	{r4, r5, r6, lr}
   b7a86:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7a88:	460e      	mov	r6, r1
   b7a8a:	b909      	cbnz	r1, b7a90 <_ZN6String6concatEPKcj+0xc>
   b7a8c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7a8e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7a90:	b16a      	cbz	r2, b7aae <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7a92:	6884      	ldr	r4, [r0, #8]
   b7a94:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7a96:	4621      	mov	r1, r4
   b7a98:	f7ff ff74 	bl	b7984 <_ZN6String7reserveEj>
   b7a9c:	2800      	cmp	r0, #0
   b7a9e:	d0f5      	beq.n	b7a8c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7aa0:	6828      	ldr	r0, [r5, #0]
   b7aa2:	68ab      	ldr	r3, [r5, #8]
   b7aa4:	4631      	mov	r1, r6
   b7aa6:	4418      	add	r0, r3
   b7aa8:	f000 fd6c 	bl	b8584 <strcpy>
	len = newlen;
   b7aac:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7aae:	2001      	movs	r0, #1
   b7ab0:	e7ed      	b.n	b7a8e <_ZN6String6concatEPKcj+0xa>

000b7ab2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7ab2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7ab4:	688a      	ldr	r2, [r1, #8]
   b7ab6:	6809      	ldr	r1, [r1, #0]
{
   b7ab8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7aba:	f7ff ffe3 	bl	b7a84 <_ZN6String6concatEPKcj>
   b7abe:	b910      	cbnz	r0, b7ac6 <_ZplRK15StringSumHelperRK6String+0x14>
   b7ac0:	4620      	mov	r0, r4
   b7ac2:	f7ff ff48 	bl	b7956 <_ZN6String10invalidateEv>
	return a;
}
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	bd10      	pop	{r4, pc}

000b7aca <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7aca:	b513      	push	{r0, r1, r4, lr}
   b7acc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7ace:	b929      	cbnz	r1, b7adc <_ZplRK15StringSumHelperPKc+0x12>
   b7ad0:	4620      	mov	r0, r4
   b7ad2:	f7ff ff40 	bl	b7956 <_ZN6String10invalidateEv>
	return a;
}
   b7ad6:	4620      	mov	r0, r4
   b7ad8:	b002      	add	sp, #8
   b7ada:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7adc:	4608      	mov	r0, r1
   b7ade:	9101      	str	r1, [sp, #4]
   b7ae0:	f000 fd58 	bl	b8594 <strlen>
   b7ae4:	9901      	ldr	r1, [sp, #4]
   b7ae6:	4602      	mov	r2, r0
   b7ae8:	4620      	mov	r0, r4
   b7aea:	f7ff ffcb 	bl	b7a84 <_ZN6String6concatEPKcj>
   b7aee:	2800      	cmp	r0, #0
   b7af0:	d0ee      	beq.n	b7ad0 <_ZplRK15StringSumHelperPKc+0x6>
   b7af2:	e7f0      	b.n	b7ad6 <_ZplRK15StringSumHelperPKc+0xc>

000b7af4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7af4:	4b05      	ldr	r3, [pc, #20]	; (b7b0c <_GLOBAL__sub_I_System+0x18>)
   b7af6:	2202      	movs	r2, #2
   b7af8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7afa:	4b05      	ldr	r3, [pc, #20]	; (b7b10 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7afc:	4a05      	ldr	r2, [pc, #20]	; (b7b14 <_GLOBAL__sub_I_System+0x20>)
   b7afe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7b00:	2000      	movs	r0, #0
   b7b02:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7b06:	f7ff bb0f 	b.w	b7128 <set_system_mode>
   b7b0a:	bf00      	nop
   b7b0c:	2003e6f8 	.word	0x2003e6f8
   b7b10:	2003e6ec 	.word	0x2003e6ec
   b7b14:	ffff0000 	.word	0xffff0000

000b7b18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7b18:	4b02      	ldr	r3, [pc, #8]	; (b7b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7b1a:	681a      	ldr	r2, [r3, #0]
   b7b1c:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7b1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7b20:	4770      	bx	lr
   b7b22:	bf00      	nop
   b7b24:	2003df8c 	.word	0x2003df8c
   b7b28:	2003e6fc 	.word	0x2003e6fc

000b7b2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7b2c:	4770      	bx	lr

000b7b2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7b2e:	7441      	strb	r1, [r0, #17]
}
   b7b30:	4770      	bx	lr

000b7b32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7b32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7b34:	7c00      	ldrb	r0, [r0, #16]
   b7b36:	f7ff faa7 	bl	b7088 <hal_usart_available_data_for_write>
}
   b7b3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b3e:	bd08      	pop	{r3, pc}

000b7b40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7b40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7b42:	7c00      	ldrb	r0, [r0, #16]
   b7b44:	f7ff fa78 	bl	b7038 <hal_usart_available>
}
   b7b48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b4c:	bd08      	pop	{r3, pc}

000b7b4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7b4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7b50:	7c00      	ldrb	r0, [r0, #16]
   b7b52:	f7ff fa81 	bl	b7058 <hal_usart_peek>
}
   b7b56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b5a:	bd08      	pop	{r3, pc}

000b7b5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7b5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7b5e:	7c00      	ldrb	r0, [r0, #16]
   b7b60:	f7ff fa72 	bl	b7048 <hal_usart_read>
}
   b7b64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b68:	bd08      	pop	{r3, pc}

000b7b6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7b6a:	7c00      	ldrb	r0, [r0, #16]
   b7b6c:	f7ff ba7c 	b.w	b7068 <hal_usart_flush>

000b7b70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7b72:	7c45      	ldrb	r5, [r0, #17]
{
   b7b74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7b76:	b12d      	cbz	r5, b7b84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7b78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7b7a:	b003      	add	sp, #12
   b7b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7b80:	f7ff ba52 	b.w	b7028 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7b84:	7c00      	ldrb	r0, [r0, #16]
   b7b86:	9101      	str	r1, [sp, #4]
   b7b88:	f7ff fa7e 	bl	b7088 <hal_usart_available_data_for_write>
   b7b8c:	2800      	cmp	r0, #0
   b7b8e:	9901      	ldr	r1, [sp, #4]
   b7b90:	dcf2      	bgt.n	b7b78 <_ZN11USARTSerial5writeEh+0x8>
}
   b7b92:	4628      	mov	r0, r5
   b7b94:	b003      	add	sp, #12
   b7b96:	bd30      	pop	{r4, r5, pc}

000b7b98 <_ZN11USARTSerialD0Ev>:
   b7b98:	b510      	push	{r4, lr}
   b7b9a:	2114      	movs	r1, #20
   b7b9c:	4604      	mov	r4, r0
   b7b9e:	f7fc fa7a 	bl	b4096 <_ZdlPvj>
   b7ba2:	4620      	mov	r0, r4
   b7ba4:	bd10      	pop	{r4, pc}
	...

000b7ba8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ba8:	b510      	push	{r4, lr}
   b7baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7bae:	4604      	mov	r4, r0
   b7bb0:	4608      	mov	r0, r1
   b7bb2:	4611      	mov	r1, r2
   b7bb4:	2200      	movs	r2, #0
   b7bb6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7bba:	4b04      	ldr	r3, [pc, #16]	; (b7bcc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7bbc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7bbe:	2301      	movs	r3, #1
  _serial = serial;
   b7bc0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7bc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7bc4:	f7ff fa68 	bl	b7098 <hal_usart_init_ex>
}
   b7bc8:	4620      	mov	r0, r4
   b7bca:	bd10      	pop	{r4, pc}
   b7bcc:	000b9a38 	.word	0x000b9a38

000b7bd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7bd0:	7441      	strb	r1, [r0, #17]
}
   b7bd2:	4770      	bx	lr

000b7bd4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bd4:	4770      	bx	lr

000b7bd6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7bd6:	4770      	bx	lr

000b7bd8 <_ZN9USBSerial4readEv>:
{
   b7bd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7bda:	2100      	movs	r1, #0
   b7bdc:	7c00      	ldrb	r0, [r0, #16]
   b7bde:	f7ff fa83 	bl	b70e8 <HAL_USB_USART_Receive_Data>
}
   b7be2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7be6:	bd08      	pop	{r3, pc}

000b7be8 <_ZN9USBSerial4peekEv>:
{
   b7be8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7bea:	2101      	movs	r1, #1
   b7bec:	7c00      	ldrb	r0, [r0, #16]
   b7bee:	f7ff fa7b 	bl	b70e8 <HAL_USB_USART_Receive_Data>
}
   b7bf2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7bf6:	bd08      	pop	{r3, pc}

000b7bf8 <_ZN9USBSerial17availableForWriteEv>:
{
   b7bf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7bfa:	7c00      	ldrb	r0, [r0, #16]
   b7bfc:	f7ff fa6c 	bl	b70d8 <HAL_USB_USART_Available_Data_For_Write>
}
   b7c00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c04:	bd08      	pop	{r3, pc}

000b7c06 <_ZN9USBSerial9availableEv>:
{
   b7c06:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7c08:	7c00      	ldrb	r0, [r0, #16]
   b7c0a:	f7ff fa5d 	bl	b70c8 <HAL_USB_USART_Available_Data>
}
   b7c0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c12:	bd08      	pop	{r3, pc}

000b7c14 <_ZN9USBSerial5writeEh>:
{
   b7c14:	b513      	push	{r0, r1, r4, lr}
   b7c16:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7c18:	7c00      	ldrb	r0, [r0, #16]
{
   b7c1a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7c1c:	f7ff fa5c 	bl	b70d8 <HAL_USB_USART_Available_Data_For_Write>
   b7c20:	2800      	cmp	r0, #0
   b7c22:	9901      	ldr	r1, [sp, #4]
   b7c24:	dc01      	bgt.n	b7c2a <_ZN9USBSerial5writeEh+0x16>
   b7c26:	7c60      	ldrb	r0, [r4, #17]
   b7c28:	b120      	cbz	r0, b7c34 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7c2a:	7c20      	ldrb	r0, [r4, #16]
   b7c2c:	f7ff fa64 	bl	b70f8 <HAL_USB_USART_Send_Data>
   b7c30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7c34:	b002      	add	sp, #8
   b7c36:	bd10      	pop	{r4, pc}

000b7c38 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7c38:	7c00      	ldrb	r0, [r0, #16]
   b7c3a:	f7ff ba65 	b.w	b7108 <HAL_USB_USART_Flush_Data>

000b7c3e <_ZN9USBSerialD0Ev>:
   b7c3e:	b510      	push	{r4, lr}
   b7c40:	2114      	movs	r1, #20
   b7c42:	4604      	mov	r4, r0
   b7c44:	f7fc fa27 	bl	b4096 <_ZdlPvj>
   b7c48:	4620      	mov	r0, r4
   b7c4a:	bd10      	pop	{r4, pc}

000b7c4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7c4c:	b510      	push	{r4, lr}
   b7c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c52:	4604      	mov	r4, r0
   b7c54:	4608      	mov	r0, r1
   b7c56:	2100      	movs	r1, #0
   b7c58:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7c5c:	4b04      	ldr	r3, [pc, #16]	; (b7c70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7c5e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c60:	2301      	movs	r3, #1
  _serial = serial;
   b7c62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c64:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7c66:	4611      	mov	r1, r2
   b7c68:	f7ff fa1e 	bl	b70a8 <HAL_USB_USART_Init>
}
   b7c6c:	4620      	mov	r0, r4
   b7c6e:	bd10      	pop	{r4, pc}
   b7c70:	000b9a68 	.word	0x000b9a68

000b7c74 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7c74:	7c00      	ldrb	r0, [r0, #16]
   b7c76:	2200      	movs	r2, #0
   b7c78:	f7ff ba1e 	b.w	b70b8 <HAL_USB_USART_Begin>

000b7c7c <_Z19acquireSerialBufferv>:
{
   b7c7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7c7e:	2214      	movs	r2, #20
{
   b7c80:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7c82:	2100      	movs	r1, #0
   b7c84:	f000 fc38 	bl	b84f8 <memset>
}
   b7c88:	4620      	mov	r0, r4
   b7c8a:	bd10      	pop	{r4, pc}

000b7c8c <_Z16_fetch_usbserialv>:
{
   b7c8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7c8e:	4c0f      	ldr	r4, [pc, #60]	; (b7ccc <_Z16_fetch_usbserialv+0x40>)
{
   b7c90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7c92:	a803      	add	r0, sp, #12
   b7c94:	f7ff fff2 	bl	b7c7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7c98:	7821      	ldrb	r1, [r4, #0]
   b7c9a:	f3bf 8f5b 	dmb	ish
   b7c9e:	f011 0101 	ands.w	r1, r1, #1
   b7ca2:	d10f      	bne.n	b7cc4 <_Z16_fetch_usbserialv+0x38>
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	9101      	str	r1, [sp, #4]
   b7ca8:	f7fc fa04 	bl	b40b4 <__cxa_guard_acquire>
   b7cac:	9901      	ldr	r1, [sp, #4]
   b7cae:	b148      	cbz	r0, b7cc4 <_Z16_fetch_usbserialv+0x38>
   b7cb0:	aa03      	add	r2, sp, #12
   b7cb2:	4807      	ldr	r0, [pc, #28]	; (b7cd0 <_Z16_fetch_usbserialv+0x44>)
   b7cb4:	f7ff ffca 	bl	b7c4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7cb8:	4620      	mov	r0, r4
   b7cba:	f7fc fa00 	bl	b40be <__cxa_guard_release>
   b7cbe:	4805      	ldr	r0, [pc, #20]	; (b7cd4 <_Z16_fetch_usbserialv+0x48>)
   b7cc0:	f000 fbfe 	bl	b84c0 <atexit>
	return _usbserial;
}
   b7cc4:	4802      	ldr	r0, [pc, #8]	; (b7cd0 <_Z16_fetch_usbserialv+0x44>)
   b7cc6:	b008      	add	sp, #32
   b7cc8:	bd10      	pop	{r4, pc}
   b7cca:	bf00      	nop
   b7ccc:	2003e700 	.word	0x2003e700
   b7cd0:	2003e704 	.word	0x2003e704
   b7cd4:	000b7bd5 	.word	0x000b7bd5

000b7cd8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7cd8:	2200      	movs	r2, #0
   b7cda:	6840      	ldr	r0, [r0, #4]
   b7cdc:	4611      	mov	r1, r2
   b7cde:	f7ff ba6f 	b.w	b71c0 <network_ready>

000b7ce2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ce2:	2200      	movs	r2, #0
   b7ce4:	6840      	ldr	r0, [r0, #4]
   b7ce6:	4611      	mov	r1, r2
   b7ce8:	f7ff ba8a 	b.w	b7200 <network_listening>

000b7cec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7cec:	2200      	movs	r2, #0
   b7cee:	6840      	ldr	r0, [r0, #4]
   b7cf0:	4611      	mov	r1, r2
   b7cf2:	f7ff ba95 	b.w	b7220 <network_get_listen_timeout>

000b7cf6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7cf6:	6840      	ldr	r0, [r0, #4]
   b7cf8:	2200      	movs	r2, #0
   b7cfa:	f7ff ba89 	b.w	b7210 <network_set_listen_timeout>

000b7cfe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7cfe:	6840      	ldr	r0, [r0, #4]
   b7d00:	2200      	movs	r2, #0
   b7d02:	f081 0101 	eor.w	r1, r1, #1
   b7d06:	f7ff ba73 	b.w	b71f0 <network_listen>

000b7d0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d0a:	2300      	movs	r3, #0
   b7d0c:	6840      	ldr	r0, [r0, #4]
   b7d0e:	461a      	mov	r2, r3
   b7d10:	4619      	mov	r1, r3
   b7d12:	f7ff ba65 	b.w	b71e0 <network_off>

000b7d16 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d16:	2300      	movs	r3, #0
   b7d18:	6840      	ldr	r0, [r0, #4]
   b7d1a:	461a      	mov	r2, r3
   b7d1c:	4619      	mov	r1, r3
   b7d1e:	f7ff ba57 	b.w	b71d0 <network_on>

000b7d22 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d22:	2200      	movs	r2, #0
   b7d24:	6840      	ldr	r0, [r0, #4]
   b7d26:	4611      	mov	r1, r2
   b7d28:	f7ff ba3a 	b.w	b71a0 <network_connecting>

000b7d2c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d2c:	6840      	ldr	r0, [r0, #4]
   b7d2e:	2200      	movs	r2, #0
   b7d30:	2102      	movs	r1, #2
   b7d32:	f7ff ba3d 	b.w	b71b0 <network_disconnect>

000b7d36 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d36:	2300      	movs	r3, #0
   b7d38:	6840      	ldr	r0, [r0, #4]
   b7d3a:	461a      	mov	r2, r3
   b7d3c:	f7ff ba28 	b.w	b7190 <network_connect>

000b7d40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7d40:	4b02      	ldr	r3, [pc, #8]	; (b7d4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7d42:	2204      	movs	r2, #4
   b7d44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7d46:	4a02      	ldr	r2, [pc, #8]	; (b7d50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7d48:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7d4a:	4770      	bx	lr
   b7d4c:	2003e718 	.word	0x2003e718
   b7d50:	000b9a98 	.word	0x000b9a98

000b7d54 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7d54:	b510      	push	{r4, lr}
   b7d56:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7d58:	f000 fc1c 	bl	b8594 <strlen>
   b7d5c:	3801      	subs	r0, #1
   b7d5e:	1823      	adds	r3, r4, r0
   b7d60:	4620      	mov	r0, r4
	while(i<j){
   b7d62:	4283      	cmp	r3, r0
   b7d64:	d906      	bls.n	b7d74 <_Z11str_reversePc+0x20>
		c = *i;
   b7d66:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7d68:	7819      	ldrb	r1, [r3, #0]
   b7d6a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7d6e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7d72:	e7f6      	b.n	b7d62 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7d74:	bd10      	pop	{r4, pc}

000b7d76 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7d76:	b570      	push	{r4, r5, r6, lr}
   b7d78:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7d7a:	1e91      	subs	r1, r2, #2
   b7d7c:	2922      	cmp	r1, #34	; 0x22
   b7d7e:	d81d      	bhi.n	b7dbc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7d80:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7d82:	b930      	cbnz	r0, b7d92 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7d84:	4423      	add	r3, r4
            *ptr++ = '0';
   b7d86:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7d88:	429d      	cmp	r5, r3
   b7d8a:	d210      	bcs.n	b7dae <ultoa+0x38>
            *ptr++ = '0';
   b7d8c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7d90:	e7fa      	b.n	b7d88 <ultoa+0x12>
            result.quot = a/radix;
   b7d92:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7d96:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7d9a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7d9c:	2809      	cmp	r0, #9
                *ptr += '0';
   b7d9e:	bf94      	ite	ls
   b7da0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7da2:	3157      	addhi	r1, #87	; 0x57
   b7da4:	b2c9      	uxtb	r1, r1
   b7da6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7daa:	4630      	mov	r0, r6
	while(a){
   b7dac:	e7e9      	b.n	b7d82 <ultoa+0xc>

	*ptr = '\0';
   b7dae:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7db0:	4620      	mov	r0, r4
	*ptr = '\0';
   b7db2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7db4:	f7ff ffce 	bl	b7d54 <_Z11str_reversePc>
	return buffer;
   b7db8:	4620      	mov	r0, r4
}
   b7dba:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7dbc:	2000      	movs	r0, #0
   b7dbe:	e7fc      	b.n	b7dba <ultoa+0x44>

000b7dc0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7dc0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7dc2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7dc4:	460c      	mov	r4, r1
   b7dc6:	4615      	mov	r5, r2
	if(a<0){
   b7dc8:	da0e      	bge.n	b7de8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7dce:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7dd2:	bf14      	ite	ne
   b7dd4:	4258      	negne	r0, r3
   b7dd6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7dd8:	2301      	movs	r3, #1
		*buffer = '-';
   b7dda:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7ddc:	462a      	mov	r2, r5
   b7dde:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7de0:	f7ff ffc9 	bl	b7d76 <ultoa>
	}
	return buffer;
}
   b7de4:	4620      	mov	r0, r4
   b7de6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7de8:	2301      	movs	r3, #1
   b7dea:	e7f9      	b.n	b7de0 <itoa+0x20>

000b7dec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7dec:	4b01      	ldr	r3, [pc, #4]	; (b7df4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7dee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7df0:	4770      	bx	lr
   b7df2:	bf00      	nop
   b7df4:	2003df90 	.word	0x2003df90

000b7df8 <serialEventRun>:
{
   b7df8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7dfa:	4b0b      	ldr	r3, [pc, #44]	; (b7e28 <serialEventRun+0x30>)
   b7dfc:	b143      	cbz	r3, b7e10 <serialEventRun+0x18>
   b7dfe:	f7ff ff45 	bl	b7c8c <_Z16_fetch_usbserialv>
   b7e02:	6803      	ldr	r3, [r0, #0]
   b7e04:	691b      	ldr	r3, [r3, #16]
   b7e06:	4798      	blx	r3
   b7e08:	2800      	cmp	r0, #0
   b7e0a:	dd01      	ble.n	b7e10 <serialEventRun+0x18>
        serialEvent();
   b7e0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7e10:	4b06      	ldr	r3, [pc, #24]	; (b7e2c <serialEventRun+0x34>)
   b7e12:	b143      	cbz	r3, b7e26 <serialEventRun+0x2e>
   b7e14:	f000 f972 	bl	b80fc <_Z22__fetch_global_Serial1v>
   b7e18:	6803      	ldr	r3, [r0, #0]
   b7e1a:	691b      	ldr	r3, [r3, #16]
   b7e1c:	4798      	blx	r3
   b7e1e:	2800      	cmp	r0, #0
   b7e20:	dd01      	ble.n	b7e26 <serialEventRun+0x2e>
        serialEvent1();
   b7e22:	f3af 8000 	nop.w
}
   b7e26:	bd08      	pop	{r3, pc}
	...

000b7e30 <_post_loop>:
{
   b7e30:	b508      	push	{r3, lr}
	serialEventRun();
   b7e32:	f7ff ffe1 	bl	b7df8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7e36:	f7fe fff7 	bl	b6e28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7e3a:	4b01      	ldr	r3, [pc, #4]	; (b7e40 <_post_loop+0x10>)
   b7e3c:	6018      	str	r0, [r3, #0]
}
   b7e3e:	bd08      	pop	{r3, pc}
   b7e40:	2003e728 	.word	0x2003e728

000b7e44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e44:	4805      	ldr	r0, [pc, #20]	; (b7e5c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7e46:	4a06      	ldr	r2, [pc, #24]	; (b7e60 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7e48:	4906      	ldr	r1, [pc, #24]	; (b7e64 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7e4a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e4c:	1a12      	subs	r2, r2, r0
   b7e4e:	f000 fb45 	bl	b84dc <memcpy>
    __backup_sram_signature = signature;
   b7e52:	4b05      	ldr	r3, [pc, #20]	; (b7e68 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7e54:	4a05      	ldr	r2, [pc, #20]	; (b7e6c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7e56:	601a      	str	r2, [r3, #0]
}
   b7e58:	bd08      	pop	{r3, pc}
   b7e5a:	bf00      	nop
   b7e5c:	2003f400 	.word	0x2003f400
   b7e60:	2003f404 	.word	0x2003f404
   b7e64:	000b9be4 	.word	0x000b9be4
   b7e68:	2003f400 	.word	0x2003f400
   b7e6c:	9a271c1e 	.word	0x9a271c1e

000b7e70 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7e70:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e72:	2300      	movs	r3, #0
   b7e74:	9300      	str	r3, [sp, #0]
   b7e76:	461a      	mov	r2, r3
   b7e78:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e7c:	f7ff f96e 	bl	b715c <system_ctrl_set_result>
}
   b7e80:	b003      	add	sp, #12
   b7e82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7e88 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7e88:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7e8a:	8843      	ldrh	r3, [r0, #2]
   b7e8c:	2b0a      	cmp	r3, #10
   b7e8e:	d008      	beq.n	b7ea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7e90:	2b50      	cmp	r3, #80	; 0x50
   b7e92:	d10b      	bne.n	b7eac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7e94:	4b09      	ldr	r3, [pc, #36]	; (b7ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7e96:	681b      	ldr	r3, [r3, #0]
   b7e98:	b14b      	cbz	r3, b7eae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7e9a:	b003      	add	sp, #12
   b7e9c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7ea0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7ea2:	f7ff ffe5 	bl	b7e70 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7ea6:	b003      	add	sp, #12
   b7ea8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7eac:	2300      	movs	r3, #0
   b7eae:	9300      	str	r3, [sp, #0]
   b7eb0:	461a      	mov	r2, r3
   b7eb2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7eb6:	f7ff f951 	bl	b715c <system_ctrl_set_result>
}
   b7eba:	e7f4      	b.n	b7ea6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7ebc:	2003e724 	.word	0x2003e724

000b7ec0 <module_user_init_hook>:
{
   b7ec0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7ec2:	4812      	ldr	r0, [pc, #72]	; (b7f0c <module_user_init_hook+0x4c>)
   b7ec4:	2100      	movs	r1, #0
   b7ec6:	f7ff f9fb 	bl	b72c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7eca:	4b11      	ldr	r3, [pc, #68]	; (b7f10 <module_user_init_hook+0x50>)
   b7ecc:	681a      	ldr	r2, [r3, #0]
   b7ece:	4b11      	ldr	r3, [pc, #68]	; (b7f14 <module_user_init_hook+0x54>)
   b7ed0:	429a      	cmp	r2, r3
   b7ed2:	4b11      	ldr	r3, [pc, #68]	; (b7f18 <module_user_init_hook+0x58>)
   b7ed4:	bf0c      	ite	eq
   b7ed6:	2201      	moveq	r2, #1
   b7ed8:	2200      	movne	r2, #0
   b7eda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7edc:	d001      	beq.n	b7ee2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ede:	f7ff ffb1 	bl	b7e44 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7ee2:	f7fe ff91 	bl	b6e08 <HAL_RNG_GetRandomNumber>
   b7ee6:	4604      	mov	r4, r0
    srand(seed);
   b7ee8:	f000 fb1e 	bl	b8528 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7eec:	4b0b      	ldr	r3, [pc, #44]	; (b7f1c <module_user_init_hook+0x5c>)
   b7eee:	b113      	cbz	r3, b7ef6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7ef6:	2100      	movs	r1, #0
   b7ef8:	4808      	ldr	r0, [pc, #32]	; (b7f1c <module_user_init_hook+0x5c>)
   b7efa:	f7ff f939 	bl	b7170 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7f02:	4807      	ldr	r0, [pc, #28]	; (b7f20 <module_user_init_hook+0x60>)
   b7f04:	2100      	movs	r1, #0
   b7f06:	f7ff b91f 	b.w	b7148 <system_ctrl_set_app_request_handler>
   b7f0a:	bf00      	nop
   b7f0c:	000b7ded 	.word	0x000b7ded
   b7f10:	2003f400 	.word	0x2003f400
   b7f14:	9a271c1e 	.word	0x9a271c1e
   b7f18:	2003e720 	.word	0x2003e720
   b7f1c:	00000000 	.word	0x00000000
   b7f20:	000b7e89 	.word	0x000b7e89

000b7f24 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7f24:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7f26:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7f28:	d902      	bls.n	b7f30 <pinAvailable+0xc>
    return false;
   b7f2a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7f2c:	b002      	add	sp, #8
   b7f2e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7f30:	f1a0 030b 	sub.w	r3, r0, #11
   b7f34:	2b02      	cmp	r3, #2
   b7f36:	d81a      	bhi.n	b7f6e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7f38:	4c17      	ldr	r4, [pc, #92]	; (b7f98 <pinAvailable+0x74>)
   b7f3a:	7821      	ldrb	r1, [r4, #0]
   b7f3c:	f3bf 8f5b 	dmb	ish
   b7f40:	f011 0101 	ands.w	r1, r1, #1
   b7f44:	d10b      	bne.n	b7f5e <pinAvailable+0x3a>
   b7f46:	4620      	mov	r0, r4
   b7f48:	9101      	str	r1, [sp, #4]
   b7f4a:	f7fc f8b3 	bl	b40b4 <__cxa_guard_acquire>
   b7f4e:	9901      	ldr	r1, [sp, #4]
   b7f50:	b128      	cbz	r0, b7f5e <pinAvailable+0x3a>
   b7f52:	4812      	ldr	r0, [pc, #72]	; (b7f9c <pinAvailable+0x78>)
   b7f54:	f7ff fc4c 	bl	b77f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7f58:	4620      	mov	r0, r4
   b7f5a:	f7fc f8b0 	bl	b40be <__cxa_guard_release>
   b7f5e:	4b0f      	ldr	r3, [pc, #60]	; (b7f9c <pinAvailable+0x78>)
   b7f60:	7818      	ldrb	r0, [r3, #0]
   b7f62:	f7ff f839 	bl	b6fd8 <hal_spi_is_enabled>
   b7f66:	2800      	cmp	r0, #0
   b7f68:	d1df      	bne.n	b7f2a <pinAvailable+0x6>
  return true; // 'pin' is available
   b7f6a:	2001      	movs	r0, #1
   b7f6c:	e7de      	b.n	b7f2c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7f6e:	2801      	cmp	r0, #1
   b7f70:	d809      	bhi.n	b7f86 <pinAvailable+0x62>
   b7f72:	f000 f883 	bl	b807c <_Z19__fetch_global_Wirev>
   b7f76:	2100      	movs	r1, #0
   b7f78:	7c00      	ldrb	r0, [r0, #16]
   b7f7a:	f7fe ffed 	bl	b6f58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7f7e:	f080 0001 	eor.w	r0, r0, #1
   b7f82:	b2c0      	uxtb	r0, r0
   b7f84:	e7d2      	b.n	b7f2c <pinAvailable+0x8>
   b7f86:	3809      	subs	r0, #9
   b7f88:	2801      	cmp	r0, #1
   b7f8a:	d8ee      	bhi.n	b7f6a <pinAvailable+0x46>
   b7f8c:	f000 f8b6 	bl	b80fc <_Z22__fetch_global_Serial1v>
   b7f90:	7c00      	ldrb	r0, [r0, #16]
   b7f92:	f7ff f871 	bl	b7078 <hal_usart_is_enabled>
   b7f96:	e7f2      	b.n	b7f7e <pinAvailable+0x5a>
   b7f98:	2003dff8 	.word	0x2003dff8
   b7f9c:	2003dffc 	.word	0x2003dffc

000b7fa0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7fa0:	2823      	cmp	r0, #35	; 0x23
{
   b7fa2:	b538      	push	{r3, r4, r5, lr}
   b7fa4:	4604      	mov	r4, r0
   b7fa6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7fa8:	d80a      	bhi.n	b7fc0 <pinMode+0x20>
   b7faa:	29ff      	cmp	r1, #255	; 0xff
   b7fac:	d008      	beq.n	b7fc0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7fae:	f7ff ffb9 	bl	b7f24 <pinAvailable>
   b7fb2:	b128      	cbz	r0, b7fc0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7fb4:	4629      	mov	r1, r5
   b7fb6:	4620      	mov	r0, r4
}
   b7fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7fbc:	f7fe bf44 	b.w	b6e48 <HAL_Pin_Mode>
}
   b7fc0:	bd38      	pop	{r3, r4, r5, pc}

000b7fc2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7fc2:	b538      	push	{r3, r4, r5, lr}
   b7fc4:	4604      	mov	r4, r0
   b7fc6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7fc8:	f7fe ff46 	bl	b6e58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7fcc:	28ff      	cmp	r0, #255	; 0xff
   b7fce:	d010      	beq.n	b7ff2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7fd0:	2806      	cmp	r0, #6
   b7fd2:	d804      	bhi.n	b7fde <digitalWrite+0x1c>
   b7fd4:	234d      	movs	r3, #77	; 0x4d
   b7fd6:	fa23 f000 	lsr.w	r0, r3, r0
   b7fda:	07c3      	lsls	r3, r0, #31
   b7fdc:	d409      	bmi.n	b7ff2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7fde:	4620      	mov	r0, r4
   b7fe0:	f7ff ffa0 	bl	b7f24 <pinAvailable>
   b7fe4:	b128      	cbz	r0, b7ff2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7fe6:	4629      	mov	r1, r5
   b7fe8:	4620      	mov	r0, r4
}
   b7fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7fee:	f7fe bf3b 	b.w	b6e68 <HAL_GPIO_Write>
}
   b7ff2:	bd38      	pop	{r3, r4, r5, pc}

000b7ff4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7ff4:	b510      	push	{r4, lr}
   b7ff6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7ff8:	f7fe ff2e 	bl	b6e58 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7ffc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7ffe:	b2db      	uxtb	r3, r3
   b8000:	2b01      	cmp	r3, #1
   b8002:	d908      	bls.n	b8016 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8004:	4620      	mov	r0, r4
   b8006:	f7ff ff8d 	bl	b7f24 <pinAvailable>
   b800a:	b120      	cbz	r0, b8016 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b800c:	4620      	mov	r0, r4
}
   b800e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8012:	f7fe bf31 	b.w	b6e78 <HAL_GPIO_Read>
}
   b8016:	2000      	movs	r0, #0
   b8018:	bd10      	pop	{r4, pc}

000b801a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b801a:	280d      	cmp	r0, #13
{
   b801c:	b510      	push	{r4, lr}
   b801e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8020:	bf9c      	itt	ls
   b8022:	340e      	addls	r4, #14
   b8024:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8026:	4620      	mov	r0, r4
   b8028:	f7ff ff7c 	bl	b7f24 <pinAvailable>
   b802c:	b150      	cbz	r0, b8044 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b802e:	2103      	movs	r1, #3
   b8030:	4620      	mov	r0, r4
   b8032:	f7fe ff01 	bl	b6e38 <HAL_Validate_Pin_Function>
   b8036:	2803      	cmp	r0, #3
   b8038:	d104      	bne.n	b8044 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b803a:	4620      	mov	r0, r4
}
   b803c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8040:	f7fe bf32 	b.w	b6ea8 <hal_adc_read>
}
   b8044:	2000      	movs	r0, #0
   b8046:	bd10      	pop	{r4, pc}

000b8048 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b8048:	f7fe bf36 	b.w	b6eb8 <HAL_Pulse_In>

000b804c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b804c:	4770      	bx	lr
	...

000b8050 <_Z17acquireWireBufferv>:
{
   b8050:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8052:	2520      	movs	r5, #32
   b8054:	2314      	movs	r3, #20
{
   b8056:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8058:	6003      	str	r3, [r0, #0]
   b805a:	6085      	str	r5, [r0, #8]
   b805c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b805e:	4906      	ldr	r1, [pc, #24]	; (b8078 <_Z17acquireWireBufferv+0x28>)
   b8060:	4628      	mov	r0, r5
   b8062:	f000 f86f 	bl	b8144 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8066:	4904      	ldr	r1, [pc, #16]	; (b8078 <_Z17acquireWireBufferv+0x28>)
	};
   b8068:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b806a:	4628      	mov	r0, r5
   b806c:	f000 f86a 	bl	b8144 <_ZnajRKSt9nothrow_t>
	};
   b8070:	60e0      	str	r0, [r4, #12]
}
   b8072:	4620      	mov	r0, r4
   b8074:	bd38      	pop	{r3, r4, r5, pc}
   b8076:	bf00      	nop
   b8078:	000b9acc 	.word	0x000b9acc

000b807c <_Z19__fetch_global_Wirev>:
{
   b807c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b807e:	4d0e      	ldr	r5, [pc, #56]	; (b80b8 <_Z19__fetch_global_Wirev+0x3c>)
   b8080:	7829      	ldrb	r1, [r5, #0]
   b8082:	f3bf 8f5b 	dmb	ish
   b8086:	f011 0401 	ands.w	r4, r1, #1
{
   b808a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b808c:	d111      	bne.n	b80b2 <_Z19__fetch_global_Wirev+0x36>
   b808e:	4628      	mov	r0, r5
   b8090:	f7fc f810 	bl	b40b4 <__cxa_guard_acquire>
   b8094:	b168      	cbz	r0, b80b2 <_Z19__fetch_global_Wirev+0x36>
   b8096:	a801      	add	r0, sp, #4
   b8098:	f7ff ffda 	bl	b8050 <_Z17acquireWireBufferv>
   b809c:	aa01      	add	r2, sp, #4
   b809e:	4621      	mov	r1, r4
   b80a0:	4806      	ldr	r0, [pc, #24]	; (b80bc <_Z19__fetch_global_Wirev+0x40>)
   b80a2:	f7ff f9a5 	bl	b73f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b80a6:	4628      	mov	r0, r5
   b80a8:	f7fc f809 	bl	b40be <__cxa_guard_release>
   b80ac:	4804      	ldr	r0, [pc, #16]	; (b80c0 <_Z19__fetch_global_Wirev+0x44>)
   b80ae:	f000 fa07 	bl	b84c0 <atexit>
	return wire;
}
   b80b2:	4802      	ldr	r0, [pc, #8]	; (b80bc <_Z19__fetch_global_Wirev+0x40>)
   b80b4:	b007      	add	sp, #28
   b80b6:	bd30      	pop	{r4, r5, pc}
   b80b8:	2003e72c 	.word	0x2003e72c
   b80bc:	2003e730 	.word	0x2003e730
   b80c0:	000b804d 	.word	0x000b804d

000b80c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80c4:	4770      	bx	lr
	...

000b80c8 <_Z20acquireSerial1Bufferv>:
{
   b80c8:	b538      	push	{r3, r4, r5, lr}
   b80ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b80cc:	2514      	movs	r5, #20
   b80ce:	462a      	mov	r2, r5
   b80d0:	2100      	movs	r1, #0
   b80d2:	f000 fa11 	bl	b84f8 <memset>
   b80d6:	8025      	strh	r5, [r4, #0]
   b80d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80da:	4907      	ldr	r1, [pc, #28]	; (b80f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b80dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b80e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80e2:	f000 f82f 	bl	b8144 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80e6:	4904      	ldr	r1, [pc, #16]	; (b80f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b80e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80ea:	4628      	mov	r0, r5
   b80ec:	f000 f82a 	bl	b8144 <_ZnajRKSt9nothrow_t>
    };
   b80f0:	60e0      	str	r0, [r4, #12]
}
   b80f2:	4620      	mov	r0, r4
   b80f4:	bd38      	pop	{r3, r4, r5, pc}
   b80f6:	bf00      	nop
   b80f8:	000b9acc 	.word	0x000b9acc

000b80fc <_Z22__fetch_global_Serial1v>:
{
   b80fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80fe:	4d0e      	ldr	r5, [pc, #56]	; (b8138 <_Z22__fetch_global_Serial1v+0x3c>)
   b8100:	7829      	ldrb	r1, [r5, #0]
   b8102:	f3bf 8f5b 	dmb	ish
   b8106:	f011 0401 	ands.w	r4, r1, #1
{
   b810a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b810c:	d111      	bne.n	b8132 <_Z22__fetch_global_Serial1v+0x36>
   b810e:	4628      	mov	r0, r5
   b8110:	f7fb ffd0 	bl	b40b4 <__cxa_guard_acquire>
   b8114:	b168      	cbz	r0, b8132 <_Z22__fetch_global_Serial1v+0x36>
   b8116:	a801      	add	r0, sp, #4
   b8118:	f7ff ffd6 	bl	b80c8 <_Z20acquireSerial1Bufferv>
   b811c:	aa01      	add	r2, sp, #4
   b811e:	4621      	mov	r1, r4
   b8120:	4806      	ldr	r0, [pc, #24]	; (b813c <_Z22__fetch_global_Serial1v+0x40>)
   b8122:	f7ff fd41 	bl	b7ba8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8126:	4628      	mov	r0, r5
   b8128:	f7fb ffc9 	bl	b40be <__cxa_guard_release>
   b812c:	4804      	ldr	r0, [pc, #16]	; (b8140 <_Z22__fetch_global_Serial1v+0x44>)
   b812e:	f000 f9c7 	bl	b84c0 <atexit>
    return serial1;
}
   b8132:	4802      	ldr	r0, [pc, #8]	; (b813c <_Z22__fetch_global_Serial1v+0x40>)
   b8134:	b007      	add	sp, #28
   b8136:	bd30      	pop	{r4, r5, pc}
   b8138:	2003e744 	.word	0x2003e744
   b813c:	2003e748 	.word	0x2003e748
   b8140:	000b80c5 	.word	0x000b80c5

000b8144 <_ZnajRKSt9nothrow_t>:
   b8144:	f7fb bfa5 	b.w	b4092 <_Znaj>

000b8148 <__aeabi_drsub>:
   b8148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b814c:	e002      	b.n	b8154 <__adddf3>
   b814e:	bf00      	nop

000b8150 <__aeabi_dsub>:
   b8150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8154 <__adddf3>:
   b8154:	b530      	push	{r4, r5, lr}
   b8156:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b815a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b815e:	ea94 0f05 	teq	r4, r5
   b8162:	bf08      	it	eq
   b8164:	ea90 0f02 	teqeq	r0, r2
   b8168:	bf1f      	itttt	ne
   b816a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b816e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b817a:	f000 80e2 	beq.w	b8342 <__adddf3+0x1ee>
   b817e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8186:	bfb8      	it	lt
   b8188:	426d      	neglt	r5, r5
   b818a:	dd0c      	ble.n	b81a6 <__adddf3+0x52>
   b818c:	442c      	add	r4, r5
   b818e:	ea80 0202 	eor.w	r2, r0, r2
   b8192:	ea81 0303 	eor.w	r3, r1, r3
   b8196:	ea82 0000 	eor.w	r0, r2, r0
   b819a:	ea83 0101 	eor.w	r1, r3, r1
   b819e:	ea80 0202 	eor.w	r2, r0, r2
   b81a2:	ea81 0303 	eor.w	r3, r1, r3
   b81a6:	2d36      	cmp	r5, #54	; 0x36
   b81a8:	bf88      	it	hi
   b81aa:	bd30      	pophi	{r4, r5, pc}
   b81ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b81b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b81b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b81b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b81bc:	d002      	beq.n	b81c4 <__adddf3+0x70>
   b81be:	4240      	negs	r0, r0
   b81c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b81c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b81c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b81cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b81d0:	d002      	beq.n	b81d8 <__adddf3+0x84>
   b81d2:	4252      	negs	r2, r2
   b81d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b81d8:	ea94 0f05 	teq	r4, r5
   b81dc:	f000 80a7 	beq.w	b832e <__adddf3+0x1da>
   b81e0:	f1a4 0401 	sub.w	r4, r4, #1
   b81e4:	f1d5 0e20 	rsbs	lr, r5, #32
   b81e8:	db0d      	blt.n	b8206 <__adddf3+0xb2>
   b81ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   b81ee:	fa22 f205 	lsr.w	r2, r2, r5
   b81f2:	1880      	adds	r0, r0, r2
   b81f4:	f141 0100 	adc.w	r1, r1, #0
   b81f8:	fa03 f20e 	lsl.w	r2, r3, lr
   b81fc:	1880      	adds	r0, r0, r2
   b81fe:	fa43 f305 	asr.w	r3, r3, r5
   b8202:	4159      	adcs	r1, r3
   b8204:	e00e      	b.n	b8224 <__adddf3+0xd0>
   b8206:	f1a5 0520 	sub.w	r5, r5, #32
   b820a:	f10e 0e20 	add.w	lr, lr, #32
   b820e:	2a01      	cmp	r2, #1
   b8210:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8214:	bf28      	it	cs
   b8216:	f04c 0c02 	orrcs.w	ip, ip, #2
   b821a:	fa43 f305 	asr.w	r3, r3, r5
   b821e:	18c0      	adds	r0, r0, r3
   b8220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8228:	d507      	bpl.n	b823a <__adddf3+0xe6>
   b822a:	f04f 0e00 	mov.w	lr, #0
   b822e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8232:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8236:	eb6e 0101 	sbc.w	r1, lr, r1
   b823a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b823e:	d31b      	bcc.n	b8278 <__adddf3+0x124>
   b8240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8244:	d30c      	bcc.n	b8260 <__adddf3+0x10c>
   b8246:	0849      	lsrs	r1, r1, #1
   b8248:	ea5f 0030 	movs.w	r0, r0, rrx
   b824c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8250:	f104 0401 	add.w	r4, r4, #1
   b8254:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b825c:	f080 809a 	bcs.w	b8394 <__adddf3+0x240>
   b8260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8264:	bf08      	it	eq
   b8266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b826a:	f150 0000 	adcs.w	r0, r0, #0
   b826e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8272:	ea41 0105 	orr.w	r1, r1, r5
   b8276:	bd30      	pop	{r4, r5, pc}
   b8278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b827c:	4140      	adcs	r0, r0
   b827e:	eb41 0101 	adc.w	r1, r1, r1
   b8282:	3c01      	subs	r4, #1
   b8284:	bf28      	it	cs
   b8286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b828a:	d2e9      	bcs.n	b8260 <__adddf3+0x10c>
   b828c:	f091 0f00 	teq	r1, #0
   b8290:	bf04      	itt	eq
   b8292:	4601      	moveq	r1, r0
   b8294:	2000      	moveq	r0, #0
   b8296:	fab1 f381 	clz	r3, r1
   b829a:	bf08      	it	eq
   b829c:	3320      	addeq	r3, #32
   b829e:	f1a3 030b 	sub.w	r3, r3, #11
   b82a2:	f1b3 0220 	subs.w	r2, r3, #32
   b82a6:	da0c      	bge.n	b82c2 <__adddf3+0x16e>
   b82a8:	320c      	adds	r2, #12
   b82aa:	dd08      	ble.n	b82be <__adddf3+0x16a>
   b82ac:	f102 0c14 	add.w	ip, r2, #20
   b82b0:	f1c2 020c 	rsb	r2, r2, #12
   b82b4:	fa01 f00c 	lsl.w	r0, r1, ip
   b82b8:	fa21 f102 	lsr.w	r1, r1, r2
   b82bc:	e00c      	b.n	b82d8 <__adddf3+0x184>
   b82be:	f102 0214 	add.w	r2, r2, #20
   b82c2:	bfd8      	it	le
   b82c4:	f1c2 0c20 	rsble	ip, r2, #32
   b82c8:	fa01 f102 	lsl.w	r1, r1, r2
   b82cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   b82d0:	bfdc      	itt	le
   b82d2:	ea41 010c 	orrle.w	r1, r1, ip
   b82d6:	4090      	lslle	r0, r2
   b82d8:	1ae4      	subs	r4, r4, r3
   b82da:	bfa2      	ittt	ge
   b82dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b82e0:	4329      	orrge	r1, r5
   b82e2:	bd30      	popge	{r4, r5, pc}
   b82e4:	ea6f 0404 	mvn.w	r4, r4
   b82e8:	3c1f      	subs	r4, #31
   b82ea:	da1c      	bge.n	b8326 <__adddf3+0x1d2>
   b82ec:	340c      	adds	r4, #12
   b82ee:	dc0e      	bgt.n	b830e <__adddf3+0x1ba>
   b82f0:	f104 0414 	add.w	r4, r4, #20
   b82f4:	f1c4 0220 	rsb	r2, r4, #32
   b82f8:	fa20 f004 	lsr.w	r0, r0, r4
   b82fc:	fa01 f302 	lsl.w	r3, r1, r2
   b8300:	ea40 0003 	orr.w	r0, r0, r3
   b8304:	fa21 f304 	lsr.w	r3, r1, r4
   b8308:	ea45 0103 	orr.w	r1, r5, r3
   b830c:	bd30      	pop	{r4, r5, pc}
   b830e:	f1c4 040c 	rsb	r4, r4, #12
   b8312:	f1c4 0220 	rsb	r2, r4, #32
   b8316:	fa20 f002 	lsr.w	r0, r0, r2
   b831a:	fa01 f304 	lsl.w	r3, r1, r4
   b831e:	ea40 0003 	orr.w	r0, r0, r3
   b8322:	4629      	mov	r1, r5
   b8324:	bd30      	pop	{r4, r5, pc}
   b8326:	fa21 f004 	lsr.w	r0, r1, r4
   b832a:	4629      	mov	r1, r5
   b832c:	bd30      	pop	{r4, r5, pc}
   b832e:	f094 0f00 	teq	r4, #0
   b8332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8336:	bf06      	itte	eq
   b8338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b833c:	3401      	addeq	r4, #1
   b833e:	3d01      	subne	r5, #1
   b8340:	e74e      	b.n	b81e0 <__adddf3+0x8c>
   b8342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8346:	bf18      	it	ne
   b8348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b834c:	d029      	beq.n	b83a2 <__adddf3+0x24e>
   b834e:	ea94 0f05 	teq	r4, r5
   b8352:	bf08      	it	eq
   b8354:	ea90 0f02 	teqeq	r0, r2
   b8358:	d005      	beq.n	b8366 <__adddf3+0x212>
   b835a:	ea54 0c00 	orrs.w	ip, r4, r0
   b835e:	bf04      	itt	eq
   b8360:	4619      	moveq	r1, r3
   b8362:	4610      	moveq	r0, r2
   b8364:	bd30      	pop	{r4, r5, pc}
   b8366:	ea91 0f03 	teq	r1, r3
   b836a:	bf1e      	ittt	ne
   b836c:	2100      	movne	r1, #0
   b836e:	2000      	movne	r0, #0
   b8370:	bd30      	popne	{r4, r5, pc}
   b8372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8376:	d105      	bne.n	b8384 <__adddf3+0x230>
   b8378:	0040      	lsls	r0, r0, #1
   b837a:	4149      	adcs	r1, r1
   b837c:	bf28      	it	cs
   b837e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8382:	bd30      	pop	{r4, r5, pc}
   b8384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8388:	bf3c      	itt	cc
   b838a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b838e:	bd30      	popcc	{r4, r5, pc}
   b8390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b839c:	f04f 0000 	mov.w	r0, #0
   b83a0:	bd30      	pop	{r4, r5, pc}
   b83a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b83a6:	bf1a      	itte	ne
   b83a8:	4619      	movne	r1, r3
   b83aa:	4610      	movne	r0, r2
   b83ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b83b0:	bf1c      	itt	ne
   b83b2:	460b      	movne	r3, r1
   b83b4:	4602      	movne	r2, r0
   b83b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b83ba:	bf06      	itte	eq
   b83bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b83c0:	ea91 0f03 	teqeq	r1, r3
   b83c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b83c8:	bd30      	pop	{r4, r5, pc}
   b83ca:	bf00      	nop

000b83cc <__aeabi_ui2d>:
   b83cc:	f090 0f00 	teq	r0, #0
   b83d0:	bf04      	itt	eq
   b83d2:	2100      	moveq	r1, #0
   b83d4:	4770      	bxeq	lr
   b83d6:	b530      	push	{r4, r5, lr}
   b83d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b83dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b83e0:	f04f 0500 	mov.w	r5, #0
   b83e4:	f04f 0100 	mov.w	r1, #0
   b83e8:	e750      	b.n	b828c <__adddf3+0x138>
   b83ea:	bf00      	nop

000b83ec <__aeabi_i2d>:
   b83ec:	f090 0f00 	teq	r0, #0
   b83f0:	bf04      	itt	eq
   b83f2:	2100      	moveq	r1, #0
   b83f4:	4770      	bxeq	lr
   b83f6:	b530      	push	{r4, r5, lr}
   b83f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b83fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8404:	bf48      	it	mi
   b8406:	4240      	negmi	r0, r0
   b8408:	f04f 0100 	mov.w	r1, #0
   b840c:	e73e      	b.n	b828c <__adddf3+0x138>
   b840e:	bf00      	nop

000b8410 <__aeabi_f2d>:
   b8410:	0042      	lsls	r2, r0, #1
   b8412:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8416:	ea4f 0131 	mov.w	r1, r1, rrx
   b841a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b841e:	bf1f      	itttt	ne
   b8420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b842c:	4770      	bxne	lr
   b842e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8432:	bf08      	it	eq
   b8434:	4770      	bxeq	lr
   b8436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b843a:	bf04      	itt	eq
   b843c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8440:	4770      	bxeq	lr
   b8442:	b530      	push	{r4, r5, lr}
   b8444:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b844c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8450:	e71c      	b.n	b828c <__adddf3+0x138>
   b8452:	bf00      	nop

000b8454 <__aeabi_ul2d>:
   b8454:	ea50 0201 	orrs.w	r2, r0, r1
   b8458:	bf08      	it	eq
   b845a:	4770      	bxeq	lr
   b845c:	b530      	push	{r4, r5, lr}
   b845e:	f04f 0500 	mov.w	r5, #0
   b8462:	e00a      	b.n	b847a <__aeabi_l2d+0x16>

000b8464 <__aeabi_l2d>:
   b8464:	ea50 0201 	orrs.w	r2, r0, r1
   b8468:	bf08      	it	eq
   b846a:	4770      	bxeq	lr
   b846c:	b530      	push	{r4, r5, lr}
   b846e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8472:	d502      	bpl.n	b847a <__aeabi_l2d+0x16>
   b8474:	4240      	negs	r0, r0
   b8476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b847a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b847e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8486:	f43f aed8 	beq.w	b823a <__adddf3+0xe6>
   b848a:	f04f 0203 	mov.w	r2, #3
   b848e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8492:	bf18      	it	ne
   b8494:	3203      	addne	r2, #3
   b8496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b849a:	bf18      	it	ne
   b849c:	3203      	addne	r2, #3
   b849e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b84a2:	f1c2 0320 	rsb	r3, r2, #32
   b84a6:	fa00 fc03 	lsl.w	ip, r0, r3
   b84aa:	fa20 f002 	lsr.w	r0, r0, r2
   b84ae:	fa01 fe03 	lsl.w	lr, r1, r3
   b84b2:	ea40 000e 	orr.w	r0, r0, lr
   b84b6:	fa21 f102 	lsr.w	r1, r1, r2
   b84ba:	4414      	add	r4, r2
   b84bc:	e6bd      	b.n	b823a <__adddf3+0xe6>
   b84be:	bf00      	nop

000b84c0 <atexit>:
   b84c0:	2300      	movs	r3, #0
   b84c2:	4601      	mov	r1, r0
   b84c4:	461a      	mov	r2, r3
   b84c6:	4618      	mov	r0, r3
   b84c8:	f000 b8c8 	b.w	b865c <__register_exitproc>

000b84cc <calloc>:
   b84cc:	4b02      	ldr	r3, [pc, #8]	; (b84d8 <calloc+0xc>)
   b84ce:	460a      	mov	r2, r1
   b84d0:	4601      	mov	r1, r0
   b84d2:	6818      	ldr	r0, [r3, #0]
   b84d4:	f000 b818 	b.w	b8508 <_calloc_r>
   b84d8:	2003df90 	.word	0x2003df90

000b84dc <memcpy>:
   b84dc:	440a      	add	r2, r1
   b84de:	4291      	cmp	r1, r2
   b84e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b84e4:	d100      	bne.n	b84e8 <memcpy+0xc>
   b84e6:	4770      	bx	lr
   b84e8:	b510      	push	{r4, lr}
   b84ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   b84ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   b84f2:	4291      	cmp	r1, r2
   b84f4:	d1f9      	bne.n	b84ea <memcpy+0xe>
   b84f6:	bd10      	pop	{r4, pc}

000b84f8 <memset>:
   b84f8:	4402      	add	r2, r0
   b84fa:	4603      	mov	r3, r0
   b84fc:	4293      	cmp	r3, r2
   b84fe:	d100      	bne.n	b8502 <memset+0xa>
   b8500:	4770      	bx	lr
   b8502:	f803 1b01 	strb.w	r1, [r3], #1
   b8506:	e7f9      	b.n	b84fc <memset+0x4>

000b8508 <_calloc_r>:
   b8508:	b513      	push	{r0, r1, r4, lr}
   b850a:	434a      	muls	r2, r1
   b850c:	4611      	mov	r1, r2
   b850e:	9201      	str	r2, [sp, #4]
   b8510:	f7fe fec6 	bl	b72a0 <_malloc_r>
   b8514:	4604      	mov	r4, r0
   b8516:	b118      	cbz	r0, b8520 <_calloc_r+0x18>
   b8518:	9a01      	ldr	r2, [sp, #4]
   b851a:	2100      	movs	r1, #0
   b851c:	f7ff ffec 	bl	b84f8 <memset>
   b8520:	4620      	mov	r0, r4
   b8522:	b002      	add	sp, #8
   b8524:	bd10      	pop	{r4, pc}
	...

000b8528 <srand>:
   b8528:	b538      	push	{r3, r4, r5, lr}
   b852a:	4b10      	ldr	r3, [pc, #64]	; (b856c <srand+0x44>)
   b852c:	681d      	ldr	r5, [r3, #0]
   b852e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8530:	4604      	mov	r4, r0
   b8532:	b9b3      	cbnz	r3, b8562 <srand+0x3a>
   b8534:	2018      	movs	r0, #24
   b8536:	f7fe fe8b 	bl	b7250 <malloc>
   b853a:	4602      	mov	r2, r0
   b853c:	63a8      	str	r0, [r5, #56]	; 0x38
   b853e:	b920      	cbnz	r0, b854a <srand+0x22>
   b8540:	4b0b      	ldr	r3, [pc, #44]	; (b8570 <srand+0x48>)
   b8542:	480c      	ldr	r0, [pc, #48]	; (b8574 <srand+0x4c>)
   b8544:	2142      	movs	r1, #66	; 0x42
   b8546:	f7fe feb3 	bl	b72b0 <__assert_func>
   b854a:	490b      	ldr	r1, [pc, #44]	; (b8578 <srand+0x50>)
   b854c:	4b0b      	ldr	r3, [pc, #44]	; (b857c <srand+0x54>)
   b854e:	e9c0 1300 	strd	r1, r3, [r0]
   b8552:	4b0b      	ldr	r3, [pc, #44]	; (b8580 <srand+0x58>)
   b8554:	6083      	str	r3, [r0, #8]
   b8556:	230b      	movs	r3, #11
   b8558:	8183      	strh	r3, [r0, #12]
   b855a:	2100      	movs	r1, #0
   b855c:	2001      	movs	r0, #1
   b855e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8562:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8564:	2200      	movs	r2, #0
   b8566:	611c      	str	r4, [r3, #16]
   b8568:	615a      	str	r2, [r3, #20]
   b856a:	bd38      	pop	{r3, r4, r5, pc}
   b856c:	2003df90 	.word	0x2003df90
   b8570:	000b9acd 	.word	0x000b9acd
   b8574:	000b9ae4 	.word	0x000b9ae4
   b8578:	abcd330e 	.word	0xabcd330e
   b857c:	e66d1234 	.word	0xe66d1234
   b8580:	0005deec 	.word	0x0005deec

000b8584 <strcpy>:
   b8584:	4603      	mov	r3, r0
   b8586:	f811 2b01 	ldrb.w	r2, [r1], #1
   b858a:	f803 2b01 	strb.w	r2, [r3], #1
   b858e:	2a00      	cmp	r2, #0
   b8590:	d1f9      	bne.n	b8586 <strcpy+0x2>
   b8592:	4770      	bx	lr

000b8594 <strlen>:
   b8594:	4603      	mov	r3, r0
   b8596:	f813 2b01 	ldrb.w	r2, [r3], #1
   b859a:	2a00      	cmp	r2, #0
   b859c:	d1fb      	bne.n	b8596 <strlen+0x2>
   b859e:	1a18      	subs	r0, r3, r0
   b85a0:	3801      	subs	r0, #1
   b85a2:	4770      	bx	lr

000b85a4 <strtok>:
   b85a4:	4b16      	ldr	r3, [pc, #88]	; (b8600 <strtok+0x5c>)
   b85a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85a8:	681e      	ldr	r6, [r3, #0]
   b85aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b85ac:	4605      	mov	r5, r0
   b85ae:	b9fc      	cbnz	r4, b85f0 <strtok+0x4c>
   b85b0:	2050      	movs	r0, #80	; 0x50
   b85b2:	9101      	str	r1, [sp, #4]
   b85b4:	f7fe fe4c 	bl	b7250 <malloc>
   b85b8:	9901      	ldr	r1, [sp, #4]
   b85ba:	65b0      	str	r0, [r6, #88]	; 0x58
   b85bc:	4602      	mov	r2, r0
   b85be:	b920      	cbnz	r0, b85ca <strtok+0x26>
   b85c0:	4b10      	ldr	r3, [pc, #64]	; (b8604 <strtok+0x60>)
   b85c2:	4811      	ldr	r0, [pc, #68]	; (b8608 <strtok+0x64>)
   b85c4:	2157      	movs	r1, #87	; 0x57
   b85c6:	f7fe fe73 	bl	b72b0 <__assert_func>
   b85ca:	e9c0 4400 	strd	r4, r4, [r0]
   b85ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b85d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b85d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b85da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b85de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b85e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b85e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b85ea:	6184      	str	r4, [r0, #24]
   b85ec:	7704      	strb	r4, [r0, #28]
   b85ee:	6244      	str	r4, [r0, #36]	; 0x24
   b85f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b85f2:	2301      	movs	r3, #1
   b85f4:	4628      	mov	r0, r5
   b85f6:	b002      	add	sp, #8
   b85f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b85fc:	f000 b806 	b.w	b860c <__strtok_r>
   b8600:	2003df90 	.word	0x2003df90
   b8604:	000b9acd 	.word	0x000b9acd
   b8608:	000b9b3d 	.word	0x000b9b3d

000b860c <__strtok_r>:
   b860c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b860e:	b908      	cbnz	r0, b8614 <__strtok_r+0x8>
   b8610:	6810      	ldr	r0, [r2, #0]
   b8612:	b188      	cbz	r0, b8638 <__strtok_r+0x2c>
   b8614:	4604      	mov	r4, r0
   b8616:	4620      	mov	r0, r4
   b8618:	f814 5b01 	ldrb.w	r5, [r4], #1
   b861c:	460f      	mov	r7, r1
   b861e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8622:	b91e      	cbnz	r6, b862c <__strtok_r+0x20>
   b8624:	b965      	cbnz	r5, b8640 <__strtok_r+0x34>
   b8626:	6015      	str	r5, [r2, #0]
   b8628:	4628      	mov	r0, r5
   b862a:	e005      	b.n	b8638 <__strtok_r+0x2c>
   b862c:	42b5      	cmp	r5, r6
   b862e:	d1f6      	bne.n	b861e <__strtok_r+0x12>
   b8630:	2b00      	cmp	r3, #0
   b8632:	d1f0      	bne.n	b8616 <__strtok_r+0xa>
   b8634:	6014      	str	r4, [r2, #0]
   b8636:	7003      	strb	r3, [r0, #0]
   b8638:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b863a:	461c      	mov	r4, r3
   b863c:	e00c      	b.n	b8658 <__strtok_r+0x4c>
   b863e:	b915      	cbnz	r5, b8646 <__strtok_r+0x3a>
   b8640:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8644:	460e      	mov	r6, r1
   b8646:	f816 5b01 	ldrb.w	r5, [r6], #1
   b864a:	42ab      	cmp	r3, r5
   b864c:	d1f7      	bne.n	b863e <__strtok_r+0x32>
   b864e:	2b00      	cmp	r3, #0
   b8650:	d0f3      	beq.n	b863a <__strtok_r+0x2e>
   b8652:	2300      	movs	r3, #0
   b8654:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8658:	6014      	str	r4, [r2, #0]
   b865a:	e7ed      	b.n	b8638 <__strtok_r+0x2c>

000b865c <__register_exitproc>:
   b865c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8660:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b871c <__register_exitproc+0xc0>
   b8664:	4606      	mov	r6, r0
   b8666:	f8d8 0000 	ldr.w	r0, [r8]
   b866a:	461f      	mov	r7, r3
   b866c:	460d      	mov	r5, r1
   b866e:	4691      	mov	r9, r2
   b8670:	f000 f856 	bl	b8720 <__retarget_lock_acquire_recursive>
   b8674:	4b25      	ldr	r3, [pc, #148]	; (b870c <__register_exitproc+0xb0>)
   b8676:	681c      	ldr	r4, [r3, #0]
   b8678:	b934      	cbnz	r4, b8688 <__register_exitproc+0x2c>
   b867a:	4c25      	ldr	r4, [pc, #148]	; (b8710 <__register_exitproc+0xb4>)
   b867c:	601c      	str	r4, [r3, #0]
   b867e:	4b25      	ldr	r3, [pc, #148]	; (b8714 <__register_exitproc+0xb8>)
   b8680:	b113      	cbz	r3, b8688 <__register_exitproc+0x2c>
   b8682:	681b      	ldr	r3, [r3, #0]
   b8684:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8688:	6863      	ldr	r3, [r4, #4]
   b868a:	2b1f      	cmp	r3, #31
   b868c:	dd07      	ble.n	b869e <__register_exitproc+0x42>
   b868e:	f8d8 0000 	ldr.w	r0, [r8]
   b8692:	f000 f847 	bl	b8724 <__retarget_lock_release_recursive>
   b8696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b869a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b869e:	b34e      	cbz	r6, b86f4 <__register_exitproc+0x98>
   b86a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b86a4:	b988      	cbnz	r0, b86ca <__register_exitproc+0x6e>
   b86a6:	4b1c      	ldr	r3, [pc, #112]	; (b8718 <__register_exitproc+0xbc>)
   b86a8:	b923      	cbnz	r3, b86b4 <__register_exitproc+0x58>
   b86aa:	f8d8 0000 	ldr.w	r0, [r8]
   b86ae:	f000 f838 	bl	b8722 <__retarget_lock_release>
   b86b2:	e7f0      	b.n	b8696 <__register_exitproc+0x3a>
   b86b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b86b8:	f7fe fdca 	bl	b7250 <malloc>
   b86bc:	2800      	cmp	r0, #0
   b86be:	d0f4      	beq.n	b86aa <__register_exitproc+0x4e>
   b86c0:	2300      	movs	r3, #0
   b86c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b86c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b86ca:	6863      	ldr	r3, [r4, #4]
   b86cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b86d0:	2201      	movs	r2, #1
   b86d2:	409a      	lsls	r2, r3
   b86d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b86d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b86dc:	4313      	orrs	r3, r2
   b86de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b86e2:	2e02      	cmp	r6, #2
   b86e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b86e8:	bf02      	ittt	eq
   b86ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b86ee:	4313      	orreq	r3, r2
   b86f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b86f4:	6863      	ldr	r3, [r4, #4]
   b86f6:	f8d8 0000 	ldr.w	r0, [r8]
   b86fa:	1c5a      	adds	r2, r3, #1
   b86fc:	3302      	adds	r3, #2
   b86fe:	6062      	str	r2, [r4, #4]
   b8700:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8704:	f000 f80e 	bl	b8724 <__retarget_lock_release_recursive>
   b8708:	2000      	movs	r0, #0
   b870a:	e7c6      	b.n	b869a <__register_exitproc+0x3e>
   b870c:	2003e7e8 	.word	0x2003e7e8
   b8710:	2003e75c 	.word	0x2003e75c
   b8714:	00000000 	.word	0x00000000
   b8718:	000b7251 	.word	0x000b7251
   b871c:	2003dff4 	.word	0x2003dff4

000b8720 <__retarget_lock_acquire_recursive>:
   b8720:	4770      	bx	lr

000b8722 <__retarget_lock_release>:
   b8722:	4770      	bx	lr

000b8724 <__retarget_lock_release_recursive>:
   b8724:	4770      	bx	lr

000b8726 <link_code_end>:
	...

000b8728 <dynalib_user>:
   b8728:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8738:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8748:	7620 7269 7574 6c61 2000 0041 4420 5300      virtual. A. D.S
   b8758:	6e65 6f73 2072 6f50 6163 4420 7369 6174     ensor Poca Dista
   b8768:	636e 6169 5300 6e65 6f73 2072 754d 6863     ncia.Sensor Much
   b8778:	2061 6944 7473 6e61 6963 0061 4c4f 4445     a Distancia.OLED
   b8788:	203a 6553 736e 726f 4c20 7a75 2d20 203e     : Sensor Luz -> 
   b8798:	6425 5300 6e65 6f73 2072 6f4e 4c20 7a75     %d.Sensor No Luz
   b87a8:	5300 6e65 6f73 2072 6953 4c20 7a75 5300     .Sensor Si Luz.S
   b87b8:	6e65 6f73 2072 6f4e 5220 6975 6f64 5300     ensor No Ruido.S
   b87c8:	6e65 6f73 2072 6953 5220 6975 6f64 5300     ensor Si Ruido.S
   b87d8:	6e65 6f73 2072 6f4e 4220 746f 6e6f 5300     ensor No Boton.S
   b87e8:	6e65 6f73 2072 6953 4220 746f 6e6f 5300     ensor Si Boton.S
   b87f8:	6e65 6f73 2072 6f4e 5220 746f 7461 7669     ensor No Rotativ
   b8808:	006f 6553 736e 726f 5320 2069 6f52 6174     o.Sensor Si Rota
   b8818:	6974 6f76 5300 6e65 6f73 2072 6554 706d     tivo.Sensor Temp
   b8828:	462e 6972 006f 6553 736e 726f 5420 6d65     .Frio.Sensor Tem
   b8838:	2e70 6554 706d 616c 6f64 5300 6e65 6f73     p.Templado.Senso
   b8848:	2072 6554 706d 432e 6c61 726f 5300 6e65     r Temp.Calor.Sen
   b8858:	6f73 2072 6944 7473 6e61 6963 2061 6543     sor Distancia Ce
   b8868:	6372 0061 6553 736e 726f 4420 7369 6174     rca.Sensor Dista
   b8878:	636e 6169 4c20 6a65 736f 5300 6e65 6f73     ncia Lejos.Senso
   b8888:	4e72 566f 6c61 6469 456f 7272 726f 5200     rNoValidoError.R
   b8898:	4247 562d 7265 6564 522d 6a6f 006f 4752     GB-Verde-Rojo.RG
   b88a8:	2d42 6d41 7261 6c69 6f6c 4d2d 726f 6461     B-Amarillo-Morad
   b88b8:	006f 4752 2d42 7a41 6c75 4e2d 7261 6e61     o.RGB-Azul-Naran
   b88c8:	616a 5200 4247 422d 696c 6b6e 5200 4247     ja.RGB-Blink.RGB
   b88d8:	522d 6961 426e 776f 5200 4247 4f2d 2d6e     -RainBow.RGB-On-
   b88e8:	664f 0066 755a 626d 6461 726f 4f20 2d6e     Off.Zumbador On-
   b88f8:	664f 0066 755a 626d 6461 726f 4220 696c     Off.Zumbador Bli
   b8908:	6b6e 4100 7463 6175 6f64 4e72 566f 6c61     nk.ActuadorNoVal
   b8918:	6469 456f 7272 726f 4d00 4649 5241 5f45     idoError.MIFARE_
   b8928:	6552 6461 2928 6620 6961 656c 3a64 0020     Read() failed: .
   b8938:	4350 5f44 7541 6874 6e65 6974 6163 6574     PCD_Authenticate
   b8948:	2928 6620 6961 656c 3a64 0020 6154 4967     () failed: .TagI
   b8958:	666e 3a6f 2520 0073 6f43 656e 7463 7261     nfo: %s.Conectar
   b8968:	6120 206c 7570 7265 6f74 4120 0a30 4300      al puerto A0..C
   b8978:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b8988:	206f 3241 000a 6f43 656e 7463 7261 6120     o A2..Conectar a
   b8998:	206c 7570 7265 6f74 4120 0a34 4300 6e6f     l puerto A4..Con
   b89a8:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   b89b8:	3244 000a 6f43 656e 7463 7261 6120 206c     D2..Conectar al 
   b89c8:	7570 7265 6f74 4420 0a34 4300 6e6f 6365     puerto D4..Conec
   b89d8:	6174 2072 6c61 7020 6575 7472 206f 3644     tar al puerto D6
   b89e8:	000a 7245 6f72 3a72 4e20 206f 6168 2079     ..Error: No hay 
   b89f8:	616d 2073 7570 7265 6f74 2073 6964 7073     mas puertos disp
   b8a08:	6e6f 6269 656c 2073 000a 654c 4564 7272     onibles ..LedErr
   b8a18:	726f 704f 6974 6e6f 5600 6c61 726f 6e20     orOption.Valor n
   b8a28:	206f 6176 696c 6f64 4400 7369 6174 636e     o valido.Distanc
   b8a38:	6169 203a 6425 5400 6d65 3a70 2520 0066     ia: %d.Temp: %f.
   b8a48:	6e49 6176 696c 5364 6e65 6f73 4572 7272     InvalidSensorErr
   b8a58:	726f 4900 766e 6c61 6469 7320 6e65 6f73     or.Invalid senso
   b8a68:	2172 2d20 203e 6553 736e 726f 7220 7065     r! -> Sensor rep
   b8a78:	7465 6469 206f 6e65 6520 206c 6c62 716f     etido en el bloq
   b8a88:	6575 5400 6761 4420 7465 6365 6174 6164     ue.Tag Detectada
   b8a98:	2d20 3e2d 0020 6a45 6365 7475 6e61 6f64      --> .Ejecutando
   b8aa8:	7420 6761 2d20 3e2d 0020 7245 6f72 2072      tag --> .Error 
   b8ab8:	7550 7265 6f74 5300 2065 7365 6570 6172     Puerto.Se espera
   b8ac8:	6162 4920 2046 6174 0067 6544 7073 6575     ba IF tag.Despue
   b8ad8:	2073 6564 7520 206e 6573 736e 726f 7320     s de un sensor s
   b8ae8:	2065 7365 6570 6172 7520 616e 6320 6e6f     e espera una con
   b8af8:	6963 6e6f 203a 4e41 2044 2075 524f 4900     cion: AND u OR.I
   b8b08:	766e 6c61 6469 4120 7463 6175 6f64 0072     nvalid Actuador.
   b8b18:	754e 656d 6f72 6420 2065 6c62 716f 6575     Numero de bloque
   b8b28:	2073 203e 2032 7c7c 5320 2065 656e 6563     s > 2 || Se nece
   b8b38:	6973 6174 6120 206c 656d 6f6e 2073 6e75     sita al menos un
   b8b48:	6120 7463 6175 6f64 2072 6170 6172 7420      actuador para t
   b8b58:	7265 696d 616e 2072 6c65 6220 6f6c 7571     erminar el bloqu
   b8b68:	0065 6e55 2061 6f63 636e 6369 6f69 206e     e.Una concicion 
   b8b78:	6f73 6f6c 7020 6575 6564 6920 2072 6573     solo puede ir se
   b8b88:	7567 6469 2061 6564 7520 206e 6573 736e     guida de un sens
   b8b98:	726f 002e 754e 656d 6f72 6420 2065 6573     or..Numero de se
   b8ba8:	736e 726f 7365 6920 666e 6375 6569 746e     nsores infucient
   b8bb8:	7365 4600 6e69 5420 6761 4e00 6d75 6220     es.Fin Tag.Num b
   b8bc8:	6f6c 7571 7365 203a 6425 4e00 6d75 7320     loques: %d.Num s
   b8bd8:	6e65 6f73 6572 4273 6f4c 7571 3a65 2520     ensoresBLoque: %
   b8be8:	0064 754e 206d 6f63 646e 6369 6f69 656e     d.Num condicione
   b8bf8:	4273 6f4c 7571 3a65 2520 0064 754e 206d     sBLoque: %d.Num 
   b8c08:	6f43 646e 6369 6f69 616e 656c 4273 6f6c     CondicionalesBlo
   b8c18:	7571 3a65 2520 0064 002d                    que: %d.-.

000b8c22 <_ZL4font>:
   b8c22:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8c32:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8c42:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8c52:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8c62:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8c72:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8c82:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8c92:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8ca2:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8cb2:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8cc2:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8cd2:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8ce2:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8cf2:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8d02:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8d12:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8d22:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8d32:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8d42:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8d52:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8d62:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8d72:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8d82:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8d92:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8da2:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8db2:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8dc2:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8dd2:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8de2:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8df2:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8e02:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8e12:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8e22:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8e32:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8e42:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8e52:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8e62:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8e72:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8e82:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8e92:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8ea2:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8eb2:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8ec2:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8ed2:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8ee2:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8ef2:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8f02:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8f12:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8f22:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8f32:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8f42:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8f52:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8f62:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8f72:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8f82:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8f92:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8fa2:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8fb2:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8fc2:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8fd2:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8fe2:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8ff2:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b9002:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b9012:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b9022:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b9032:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b9042:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b9052:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b9062:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b9072:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b9082:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b9092:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b90a2:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b90b2:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b90c2:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b90d2:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b90e2:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b90f2:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b9102:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b9112:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b9124 <_ZTV12Adafruit_GFX>:
	...
   b9134:	5a29 000b 76b1 000b 409d 000b 542f 000b     )Z...v...@../T..
   b9144:	5431 000b 5463 000b 543f 000b 5451 000b     1T..cT..?T..QT..
   b9154:	5371 000b 542f 000b 565b 000b 5659 000b     qS../T..[V..YV..
   b9164:	547b 000b 54b9 000b 54f3 000b 5539 000b     {T...T...T..9U..
   b9174:	5555 000b 55d9 000b 6564 6166 6c75 2074     UU...U..default 
   b9184:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b9194:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b91a4:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b91b4:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b91c0 <_ZTVN8particle11SPISettingsE>:
	...
   b91c8:	5b49 000b 5b37 000b 5b39 000b               I[..7[..9[..

000b91d4 <_ZL12splash2_data>:
   b91d4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b91e4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b91f4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9210:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9220:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9230:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9240:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9250:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9260:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9270:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9280:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9290:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b92a0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b92b0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b92c0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b92d0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b92e0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b92f0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9300:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9310:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9320:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9330:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9340:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9350:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9368:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9378:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9388:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9398:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b93a8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b93b4 <_ZL17sucreLogoNew_data>:
   b93b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b93c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b93d4:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b93e4:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b93f4:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b9404:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b9414:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b9424:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b9434:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b9444:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b9454:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b9464:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b9474:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b9484:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b9494:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b94a4:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b94b4:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b94c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94d4:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b94e4:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b94f4:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b9504:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b9514:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b9524:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b9534:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b9544:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b9554:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b9564:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b9574:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b9584:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b9594:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b95a4:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b95b4:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b95c4:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b95d4:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b95e4:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b95f4:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b9604:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b9614:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b9624:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b9634:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b9644:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b9654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9664:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9674:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9684:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9694:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96b4:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b96c4:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b96d4:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b96e4:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b96f4:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b9704:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b9714:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b9724:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b9734:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b9744:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b9754:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b9764:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b9774:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b9784:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b9794:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b97a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b97b4 <_ZTV16Adafruit_SSD1306>:
	...
   b97bc:	5b9d 000b 5bb5 000b 5a29 000b 76b1 000b     .[...[..)Z...v..
   b97cc:	5bc9 000b 542f 000b 5431 000b 5463 000b     .[../T..1T..cT..
   b97dc:	543f 000b 5451 000b 5371 000b 542f 000b     ?T..QT..qS../T..
   b97ec:	565b 000b 5d5b 000b 62f7 000b 62a9 000b     [V..[]...b...b..
   b97fc:	54f3 000b 5539 000b 5555 000b 55d9 000b     .T..9U..UU...U..

000b980c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b980c:	8000 e0c0 f8f0 fefc                         ........

000b9814 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9814:	0100 0703 1f0f 7f3f                         ......?.

000b981c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b981c:	d5ae a880                                   ....

000b9820 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9820:	00d3 8d40                                   ..@.

000b9824 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9824:	0020 c8a1                                    ...

000b9828 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9828:	40db a6a4 af2e                              .@....

000b982e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b982e:	02da 8f81                                   ....

000b9832 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9832:	12da                                         ...

000b9835 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9835:	02da 5581 6b6e 6f6e 6e77 6520 7272 726f     ...Unknown error
   b9845:	5300 6375 6563 7373 002e 7245 6f72 2072     .Success..Error 
   b9855:	6e69 6320 6d6f 756d 696e 6163 6974 6e6f     in communication
   b9865:	002e 6f43 6c6c 7369 6973 6e6f 6420 7465     ..Collission det
   b9875:	6365 6574 2e64 5400 6d69 6f65 7475 6920     ected..Timeout i
   b9885:	206e 6f63 6d6d 6e75 6369 7461 6f69 2e6e     n communication.
   b9895:	4100 6220 6675 6566 2072 7369 6e20 746f     .A buffer is not
   b98a5:	6220 6769 6520 6f6e 6775 2e68 4900 746e      big enough..Int
   b98b5:	7265 616e 206c 7265 6f72 2072 6e69 7420     ernal error in t
   b98c5:	6568 6320 646f 2e65 5320 6f68 6c75 2064     he code. Should 
   b98d5:	6f6e 2074 6168 7070 6e65 002e 6e49 6176     not happen..Inva
   b98e5:	696c 2064 7261 7567 656d 746e 002e 6854     lid argument..Th
   b98f5:	2065 5243 5f43 2041 6f64 7365 6e20 746f     e CRC_A does not
   b9905:	6d20 7461 6863 002e 2041 494d 4146 4552      match..A MIFARE
   b9915:	5020 4349 2043 6572 7073 6e6f 6564 2064      PICC responded 
   b9925:	6977 6874 4e20 4b41 002e                     with NAK...

000b9930 <CSWTCH.84>:
   b9930:	9846 000b 984f 000b 9867 000b 987c 000b     F...O...g...|...
   b9940:	9896 000b 98b2 000b 98e1 000b 98f3 000b     ................
   b9950:	990d 000b                                   ....

000b9954 <_ZTVN5spark13EthernetClassE>:
	...
   b995c:	737b 000b 7371 000b 7367 000b 735d 000b     {s..qs..gs..]s..
   b996c:	7351 000b 7345 000b 758d 000b 7595 000b     Qs..Es...u...u..
   b997c:	7339 000b 7331 000b 7327 000b 731d 000b     9s..1s..'s...s..
   b998c:	75c5 000b                                   .u..

000b9990 <_ZTV7TwoWire>:
	...
   b9998:	7399 000b 73e3 000b 73bb 000b 739b 000b     .s...s...s...s..
   b99a8:	73c3 000b 73cb 000b 73d3 000b 73db 000b     .s...s...s...s..

000b99b8 <_ZTV9IPAddress>:
	...
   b99c0:	745d 000b 744d 000b 744f 000b 7061 0070     ]t..Mt..Ot..app.

000b99d0 <_ZTVN5spark12NetworkClassE>:
	...
   b99d8:	754d 000b 7557 000b 7561 000b 756b 000b     Mu..Wu..au..ku..
   b99e8:	7575 000b 7581 000b 758d 000b 7595 000b     uu...u...u...u..
   b99f8:	759d 000b 75a9 000b 75b1 000b 75bb 000b     .u...u...u...u..
   b9a08:	75c5 000b                                   .u..

000b9a0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9a0c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9a1c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9a2c:	6d69 0065                                   ime.

000b9a30 <_ZTV11USARTSerial>:
	...
   b9a38:	7b2d 000b 7b99 000b 7b71 000b 76b1 000b     -{...{..q{...v..
   b9a48:	7b41 000b 7b5d 000b 7b4f 000b 7b6b 000b     A{..]{..O{..k{..
   b9a58:	7b2f 000b 7b33 000b                         /{..3{..

000b9a60 <_ZTV9USBSerial>:
	...
   b9a68:	7bd7 000b 7c3f 000b 7c15 000b 76b1 000b     .{..?|...|...v..
   b9a78:	7c07 000b 7bd9 000b 7be9 000b 7c39 000b     .|...{...{..9|..
   b9a88:	7bf9 000b 7bd1 000b                         .{...{..

000b9a90 <_ZTVN5spark9WiFiClassE>:
	...
   b9a98:	7d37 000b 7d2d 000b 7d23 000b 7cd9 000b     7}..-}..#}...|..
   b9aa8:	7d17 000b 7d0b 000b 758d 000b 7595 000b     .}...}...u...u..
   b9ab8:	7cff 000b 7cf7 000b 7ced 000b 7ce3 000b     .|...|...|...|..
   b9ac8:	75c5 000b                                   .u..

000b9acc <_ZSt7nothrow>:
   b9acc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9adc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9aec:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9afc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9b0c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b9b1c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9b2c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b9b3c:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b9b4c:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b9b5c:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b9b6c:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b9b7c:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b9b8c:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b9b98 <link_const_variable_data_end>:
   b9b98:	000b517d 	.word	0x000b517d
   b9b9c:	000b72d9 	.word	0x000b72d9
   b9ba0:	000b7385 	.word	0x000b7385
   b9ba4:	000b753d 	.word	0x000b753d
   b9ba8:	000b769d 	.word	0x000b769d
   b9bac:	000b77d9 	.word	0x000b77d9
   b9bb0:	000b7af5 	.word	0x000b7af5
   b9bb4:	000b7b19 	.word	0x000b7b19
   b9bb8:	000b7d41 	.word	0x000b7d41

000b9bbc <link_constructors_end>:
   b9bbc:	00000000 	.word	0x00000000
