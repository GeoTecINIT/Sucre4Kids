
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d80  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bada0  000bada0  0000ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000badc4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003df3c  000badc8  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000820  2003dfd0  2003dfd0  0002dfd0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bae5c  000bae5c  0002ae5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bae84  000bae84  0002ae84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015ebbc  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001850b  00000000  00000000  00189a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004f35c  00000000  00000000  001a1f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003640  00000000  00000000  001f12ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bd90  00000000  00000000  001f48eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004388f  00000000  00000000  0020067b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000568d4  00000000  00000000  00243f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013bc2b  00000000  00000000  0029a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a5b0  00000000  00000000  003d640c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fa7b 	bl	b952c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fa83 	bl	b9548 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003df3c 	.word	0x2003df3c
   b404c:	000badc8 	.word	0x000badc8
   b4050:	2003dfd0 	.word	0x2003dfd0
   b4054:	2003dfd0 	.word	0x2003dfd0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f999 	bl	b8398 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bad70 	.word	0x000bad70
   b4080:	000bad94 	.word	0x000bad94

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bef4 	b.w	b4e70 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f897 	bl	b51bc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b939 	b.w	b8308 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f003 bdf9 	b.w	b7c8c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 bdff 	b.w	b7c9c <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f003 fd54 	bl	b7b54 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b78f5 	.word	0x000b78f5
   b40b4:	000b978c 	.word	0x000b978c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z9resetModev.part.0>:
  }

  return false;
}

void resetMode() 
   b40c8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    init = true;

  } else {

    ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b40ca:	2305      	movs	r3, #5
   b40cc:	466c      	mov	r4, sp
   b40ce:	461a      	mov	r2, r3
   b40d0:	2104      	movs	r1, #4
   b40d2:	4620      	mov	r0, r4
   b40d4:	f003 f99e 	bl	b7414 <_ZN12ChainableLEDC1Ehhh>
   b40d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b40dc:	4d09      	ldr	r5, [pc, #36]	; (b4104 <_Z9resetModev.part.0+0x3c>)
   b40de:	e885 0003 	stmia.w	r5, {r0, r1}
   b40e2:	4620      	mov	r0, r4
   b40e4:	f003 f9a3 	bl	b742e <_ZN12ChainableLEDD1Ev>
    ledObject.init();
   b40e8:	4628      	mov	r0, r5
   b40ea:	f003 fa45 	bl	b7578 <_ZN12ChainableLED4initEv>
    pinMode(Zumbador_PIN, OUTPUT);
   b40ee:	2101      	movs	r1, #1
   b40f0:	2006      	movs	r0, #6
   b40f2:	f004 fc73 	bl	b89dc <pinMode>

    numBloque++;
   b40f6:	4a04      	ldr	r2, [pc, #16]	; (b4108 <_Z9resetModev.part.0+0x40>)
   b40f8:	6813      	ldr	r3, [r2, #0]
   b40fa:	3301      	adds	r3, #1
   b40fc:	6013      	str	r3, [r2, #0]
  }

}
   b40fe:	b003      	add	sp, #12
   b4100:	bd30      	pop	{r4, r5, pc}
   b4102:	bf00      	nop
   b4104:	2003e690 	.word	0x2003e690
   b4108:	2003df40 	.word	0x2003df40

000b410c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410c:	b40e      	push	{r1, r2, r3}
   b410e:	b503      	push	{r0, r1, lr}
   b4110:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4112:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4114:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4118:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b411a:	f004 f886 	bl	b822a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b411e:	b002      	add	sp, #8
   b4120:	f85d eb04 	ldr.w	lr, [sp], #4
   b4124:	b003      	add	sp, #12
   b4126:	4770      	bx	lr

000b4128 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4128:	b40e      	push	{r1, r2, r3}
   b412a:	b503      	push	{r0, r1, lr}
   b412c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b412e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4130:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4134:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4136:	f004 f878 	bl	b822a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b413a:	b002      	add	sp, #8
   b413c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4140:	b003      	add	sp, #12
   b4142:	4770      	bx	lr

000b4144 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4144:	b507      	push	{r0, r1, r2, lr}
   b4146:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4148:	a801      	add	r0, sp, #4
   b414a:	f002 fc09 	bl	b6960 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b414e:	a801      	add	r0, sp, #4
   b4150:	f002 fc08 	bl	b6964 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4154:	2809      	cmp	r0, #9
   b4156:	bf8c      	ite	hi
   b4158:	2000      	movhi	r0, #0
   b415a:	2001      	movls	r0, #1
   b415c:	b003      	add	sp, #12
   b415e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4162 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4162:	b507      	push	{r0, r1, r2, lr}
   b4164:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4166:	a801      	add	r0, sp, #4
   b4168:	f002 fbfa 	bl	b6960 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b416c:	a801      	add	r0, sp, #4
   b416e:	f002 fbf9 	bl	b6964 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4172:	280a      	cmp	r0, #10
   b4174:	bfd4      	ite	le
   b4176:	2000      	movle	r0, #0
   b4178:	2001      	movgt	r0, #1
   b417a:	b003      	add	sp, #12
   b417c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4180 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4180:	2802      	cmp	r0, #2
{
   b4182:	b508      	push	{r3, lr}
    switch (puerto)
   b4184:	d00b      	beq.n	b419e <_Z5siLuzi+0x1e>
   b4186:	2804      	cmp	r0, #4
   b4188:	d00b      	beq.n	b41a2 <_Z5siLuzi+0x22>
   b418a:	b960      	cbnz	r0, b41a6 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b418c:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b418e:	f004 fc62 	bl	b8a56 <analogRead>
   b4192:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4196:	bfb4      	ite	lt
   b4198:	2000      	movlt	r0, #0
   b419a:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b419c:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b419e:	2011      	movs	r0, #17
   b41a0:	e7f5      	b.n	b418e <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b41a2:	200f      	movs	r0, #15
   b41a4:	e7f3      	b.n	b418e <_Z5siLuzi+0xe>
    switch (puerto)
   b41a6:	2000      	movs	r0, #0
   b41a8:	e7f8      	b.n	b419c <_Z5siLuzi+0x1c>

000b41aa <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b41aa:	2802      	cmp	r0, #2
{
   b41ac:	b508      	push	{r3, lr}
    switch (puerto)
   b41ae:	d00b      	beq.n	b41c8 <_Z5noLuzi+0x1e>
   b41b0:	2804      	cmp	r0, #4
   b41b2:	d00b      	beq.n	b41cc <_Z5noLuzi+0x22>
   b41b4:	b960      	cbnz	r0, b41d0 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41b6:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41b8:	f004 fc4d 	bl	b8a56 <analogRead>
   b41bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41c0:	bfcc      	ite	gt
   b41c2:	2000      	movgt	r0, #0
   b41c4:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41c6:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41c8:	2011      	movs	r0, #17
   b41ca:	e7f5      	b.n	b41b8 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41cc:	200f      	movs	r0, #15
   b41ce:	e7f3      	b.n	b41b8 <_Z5noLuzi+0xe>
    switch (puerto)
   b41d0:	2000      	movs	r0, #0
   b41d2:	e7f8      	b.n	b41c6 <_Z5noLuzi+0x1c>

000b41d4 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b41d4:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b41d6:	b280      	uxth	r0, r0
   b41d8:	f004 fc3d 	bl	b8a56 <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b41dc:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41e0:	bfb4      	ite	lt
   b41e2:	2000      	movlt	r0, #0
   b41e4:	2001      	movge	r0, #1
   b41e6:	bd08      	pop	{r3, pc}

000b41e8 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b41e8:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b41ea:	b280      	uxth	r0, r0
   b41ec:	f004 fc33 	bl	b8a56 <analogRead>
        return true;
    return false;
}
   b41f0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b41f4:	bfcc      	ite	gt
   b41f6:	2000      	movgt	r0, #0
   b41f8:	2001      	movle	r0, #1
   b41fa:	bd08      	pop	{r3, pc}

000b41fc <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b41fc:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b41fe:	b280      	uxth	r0, r0
   b4200:	2100      	movs	r1, #0
   b4202:	9001      	str	r0, [sp, #4]
   b4204:	f004 fbea 	bl	b89dc <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4208:	9801      	ldr	r0, [sp, #4]
   b420a:	f004 fc11 	bl	b8a30 <digitalRead>
        return true;
    return false;
}
   b420e:	1e43      	subs	r3, r0, #1
   b4210:	4258      	negs	r0, r3
   b4212:	4158      	adcs	r0, r3
   b4214:	b003      	add	sp, #12
   b4216:	f85d fb04 	ldr.w	pc, [sp], #4

000b421a <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b421a:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b421c:	b280      	uxth	r0, r0
   b421e:	2100      	movs	r1, #0
   b4220:	9001      	str	r0, [sp, #4]
   b4222:	f004 fbdb 	bl	b89dc <pinMode>
    if (digitalRead(puerto) == LOW)
   b4226:	9801      	ldr	r0, [sp, #4]
   b4228:	f004 fc02 	bl	b8a30 <digitalRead>
        return true;
    return false;
}
   b422c:	fab0 f080 	clz	r0, r0
   b4230:	0940      	lsrs	r0, r0, #5
   b4232:	b003      	add	sp, #12
   b4234:	f85d fb04 	ldr.w	pc, [sp], #4

000b4238 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4238:	2802      	cmp	r0, #2
{
   b423a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b423c:	d024      	beq.n	b4288 <_Z10siRotativoi+0x50>
   b423e:	2804      	cmp	r0, #4
   b4240:	d024      	beq.n	b428c <_Z10siRotativoi+0x54>
   b4242:	b918      	cbnz	r0, b424c <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4244:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4246:	f004 fc06 	bl	b8a56 <analogRead>
   b424a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b424c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4250:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b4290 <_Z10siRotativoi+0x58>
   b4254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4258:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b425c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4260:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4264:	eddf 7a0b 	vldr	s15, [pc, #44]	; b4294 <_Z10siRotativoi+0x5c>
   b4268:	ee67 7a27 	vmul.f32	s15, s14, s15
   b426c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees >= 680)
   b4270:	eddf 7a09 	vldr	s15, [pc, #36]	; b4298 <_Z10siRotativoi+0x60>
   b4274:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b427c:	bfac      	ite	ge
   b427e:	2001      	movge	r0, #1
   b4280:	2000      	movlt	r0, #0
   b4282:	b003      	add	sp, #12
   b4284:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4288:	2011      	movs	r0, #17
   b428a:	e7dc      	b.n	b4246 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b428c:	200f      	movs	r0, #15
   b428e:	e7da      	b.n	b4246 <_Z10siRotativoi+0xe>
   b4290:	447fc000 	.word	0x447fc000
   b4294:	43960000 	.word	0x43960000
   b4298:	442a0000 	.word	0x442a0000

000b429c <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b429c:	2802      	cmp	r0, #2
{
   b429e:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b42a0:	d024      	beq.n	b42ec <_Z10noRotativoi+0x50>
   b42a2:	2804      	cmp	r0, #4
   b42a4:	d024      	beq.n	b42f0 <_Z10noRotativoi+0x54>
   b42a6:	b918      	cbnz	r0, b42b0 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b42a8:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b42aa:	f004 fbd4 	bl	b8a56 <analogRead>
   b42ae:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 5 / 1023;
   b42b0:	eddd 7a01 	vldr	s15, [sp, #4]
   b42b4:	ed9f 6a0f 	vldr	s12, [pc, #60]	; b42f4 <_Z10noRotativoi+0x58>
   b42b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42bc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b42c4:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b42c8:	eddf 7a0b 	vldr	s15, [pc, #44]	; b42f8 <_Z10noRotativoi+0x5c>
   b42cc:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b42d4:	eddf 7a09 	vldr	s15, [pc, #36]	; b42fc <_Z10noRotativoi+0x60>
   b42d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42e0:	bf94      	ite	ls
   b42e2:	2001      	movls	r0, #1
   b42e4:	2000      	movhi	r0, #0
   b42e6:	b003      	add	sp, #12
   b42e8:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42ec:	2011      	movs	r0, #17
   b42ee:	e7dc      	b.n	b42aa <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42f0:	200f      	movs	r0, #15
   b42f2:	e7da      	b.n	b42aa <_Z10noRotativoi+0xe>
   b42f4:	447fc000 	.word	0x447fc000
   b42f8:	43960000 	.word	0x43960000
   b42fc:	442a0000 	.word	0x442a0000

000b4300 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4300:	b530      	push	{r4, r5, lr}
   b4302:	ed2d 8b02 	vpush	{d8}
   b4306:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4308:	b2c1      	uxtb	r1, r0
   b430a:	2306      	movs	r3, #6
   b430c:	220b      	movs	r2, #11
   b430e:	a801      	add	r0, sp, #4
   b4310:	f002 fb4c 	bl	b69ac <_ZN3DHTC1Ehhh>
    dht.begin();
   b4314:	a801      	add	r0, sp, #4
   b4316:	f002 fb50 	bl	b69ba <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b431a:	a801      	add	r0, sp, #4
   b431c:	f002 fc0a 	bl	b6b34 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4320:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4328:	eeb4 0a40 	vcmp.f32	s0, s0
   b432c:	bf0c      	ite	eq
   b432e:	2401      	moveq	r4, #1
   b4330:	2400      	movne	r4, #0
   b4332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4336:	bf68      	it	vs
   b4338:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b433c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4340:	2c00      	cmp	r4, #0
   b4342:	d1ea      	bne.n	b431a <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4344:	f004 f94a 	bl	b85dc <_Z16_fetch_usbserialv>
   b4348:	4605      	mov	r5, r0
   b434a:	ee18 0a10 	vmov	r0, s16
   b434e:	f004 fd7d 	bl	b8e4c <__aeabi_f2d>
   b4352:	4602      	mov	r2, r0
   b4354:	460b      	mov	r3, r1
   b4356:	4628      	mov	r0, r5
   b4358:	490a      	ldr	r1, [pc, #40]	; (b4384 <_Z8tempFrioi+0x84>)
   b435a:	f7ff fee5 	bl	b4128 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b435e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4366:	dd08      	ble.n	b437a <_Z8tempFrioi+0x7a>
   b4368:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b436c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4374:	bf4c      	ite	mi
   b4376:	2401      	movmi	r4, #1
   b4378:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b437a:	4620      	mov	r0, r4
   b437c:	b007      	add	sp, #28
   b437e:	ecbd 8b02 	vpop	{d8}
   b4382:	bd30      	pop	{r4, r5, pc}
   b4384:	000b97ae 	.word	0x000b97ae

000b4388 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4388:	b510      	push	{r4, lr}
   b438a:	ed2d 8b02 	vpush	{d8}
   b438e:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4390:	b2c1      	uxtb	r1, r0
   b4392:	2306      	movs	r3, #6
   b4394:	220b      	movs	r2, #11
   b4396:	a801      	add	r0, sp, #4
   b4398:	f002 fb08 	bl	b69ac <_ZN3DHTC1Ehhh>
    dht.begin();
   b439c:	a801      	add	r0, sp, #4
   b439e:	f002 fb0c 	bl	b69ba <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43a2:	a801      	add	r0, sp, #4
   b43a4:	f002 fbc6 	bl	b6b34 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b43a8:	eeb4 0a40 	vcmp.f32	s0, s0
   b43ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43b0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b43b4:	d6f5      	bvs.n	b43a2 <_Z12tempTempladoi+0x1a>
   b43b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43be:	d0f0      	beq.n	b43a2 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b43c0:	f004 f90c 	bl	b85dc <_Z16_fetch_usbserialv>
   b43c4:	4604      	mov	r4, r0
   b43c6:	ee18 0a10 	vmov	r0, s16
   b43ca:	f004 fd3f 	bl	b8e4c <__aeabi_f2d>
   b43ce:	4602      	mov	r2, r0
   b43d0:	460b      	mov	r3, r1
   b43d2:	4620      	mov	r0, r4
   b43d4:	490c      	ldr	r1, [pc, #48]	; (b4408 <_Z12tempTempladoi+0x80>)
   b43d6:	f7ff fea7 	bl	b4128 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b43da:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b43de:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43e6:	dc04      	bgt.n	b43f2 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b43e8:	2000      	movs	r0, #0
}
   b43ea:	b006      	add	sp, #24
   b43ec:	ecbd 8b02 	vpop	{d8}
   b43f0:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b43f2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b43f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43fe:	bf4c      	ite	mi
   b4400:	2001      	movmi	r0, #1
   b4402:	2000      	movpl	r0, #0
   b4404:	e7f1      	b.n	b43ea <_Z12tempTempladoi+0x62>
   b4406:	bf00      	nop
   b4408:	000b97ae 	.word	0x000b97ae

000b440c <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b440c:	b530      	push	{r4, r5, lr}
   b440e:	ed2d 8b02 	vpush	{d8}
   b4412:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4414:	b2c1      	uxtb	r1, r0
   b4416:	2306      	movs	r3, #6
   b4418:	220b      	movs	r2, #11
   b441a:	a801      	add	r0, sp, #4
   b441c:	f002 fac6 	bl	b69ac <_ZN3DHTC1Ehhh>
    dht.begin();
   b4420:	a801      	add	r0, sp, #4
   b4422:	f002 faca 	bl	b69ba <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4426:	a801      	add	r0, sp, #4
   b4428:	f002 fb84 	bl	b6b34 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b442c:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4434:	eeb4 0a40 	vcmp.f32	s0, s0
   b4438:	bf0c      	ite	eq
   b443a:	2401      	moveq	r4, #1
   b443c:	2400      	movne	r4, #0
   b443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4442:	bf68      	it	vs
   b4444:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4448:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b444c:	2c00      	cmp	r4, #0
   b444e:	d1ea      	bne.n	b4426 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4450:	f004 f8c4 	bl	b85dc <_Z16_fetch_usbserialv>
   b4454:	4605      	mov	r5, r0
   b4456:	ee18 0a10 	vmov	r0, s16
   b445a:	f004 fcf7 	bl	b8e4c <__aeabi_f2d>
   b445e:	4602      	mov	r2, r0
   b4460:	460b      	mov	r3, r1
   b4462:	4628      	mov	r0, r5
   b4464:	490b      	ldr	r1, [pc, #44]	; (b4494 <_Z9tempCalori+0x88>)
   b4466:	f7ff fe5f 	bl	b4128 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b446a:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b446e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4476:	dd08      	ble.n	b448a <_Z9tempCalori+0x7e>
   b4478:	eddf 7a07 	vldr	s15, [pc, #28]	; b4498 <_Z9tempCalori+0x8c>
   b447c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4484:	bf4c      	ite	mi
   b4486:	2401      	movmi	r4, #1
   b4488:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b448a:	4620      	mov	r0, r4
   b448c:	b007      	add	sp, #28
   b448e:	ecbd 8b02 	vpop	{d8}
   b4492:	bd30      	pop	{r4, r5, pc}
   b4494:	000b97ae 	.word	0x000b97ae
   b4498:	42480000 	.word	0x42480000

000b449c <_Z10leerSensoriii>:

bool leerSensor(int id, int condicion, int puerto)
{
   b449c:	b508      	push	{r3, lr}
   b449e:	4603      	mov	r3, r0
   b44a0:	3b01      	subs	r3, #1
   b44a2:	4610      	mov	r0, r2
   b44a4:	2b06      	cmp	r3, #6
   b44a6:	d843      	bhi.n	b4530 <_Z10leerSensoriii+0x94>
   b44a8:	e8df f003 	tbb	[pc, r3]
   b44ac:	1b120904 	.word	0x1b120904
   b44b0:	2d24      	.short	0x2d24
   b44b2:	04          	.byte	0x04
   b44b3:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44b4:	bbc1      	cbnz	r1, b4528 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b44b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b44ba:	f7ff be43 	b.w	b4144 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44be:	b919      	cbnz	r1, b44c8 <_Z10leerSensoriii+0x2c>
   b44c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44c4:	f7ff be71 	b.w	b41aa <_Z5noLuzi>
   b44c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b44cc:	f7ff be58 	b.w	b4180 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44d0:	b919      	cbnz	r1, b44da <_Z10leerSensoriii+0x3e>
   b44d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44d6:	f7ff be87 	b.w	b41e8 <_Z7noRuidoi>
   b44da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b44de:	f7ff be79 	b.w	b41d4 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44e2:	b919      	cbnz	r1, b44ec <_Z10leerSensoriii+0x50>
   b44e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44e8:	f7ff be97 	b.w	b421a <_Z7noBotoni>
   b44ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b44f0:	f7ff be84 	b.w	b41fc <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44f4:	b919      	cbnz	r1, b44fe <_Z10leerSensoriii+0x62>
   b44f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b44fa:	f7ff becf 	b.w	b429c <_Z10noRotativoi>
   b44fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4502:	f7ff be99 	b.w	b4238 <_Z10siRotativoi>
        switch (condicion)
   b4506:	2901      	cmp	r1, #1
   b4508:	d006      	beq.n	b4518 <_Z10leerSensoriii+0x7c>
   b450a:	2902      	cmp	r1, #2
   b450c:	d008      	beq.n	b4520 <_Z10leerSensoriii+0x84>
   b450e:	b959      	cbnz	r1, b4528 <_Z10leerSensoriii+0x8c>
   b4510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4514:	f7ff bef4 	b.w	b4300 <_Z8tempFrioi>
   b4518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b451c:	f7ff bf34 	b.w	b4388 <_Z12tempTempladoi>
   b4520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4524:	f7ff bf72 	b.w	b440c <_Z9tempCalori>
   b4528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b452c:	f7ff be19 	b.w	b4162 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4530:	f004 f854 	bl	b85dc <_Z16_fetch_usbserialv>
   b4534:	4902      	ldr	r1, [pc, #8]	; (b4540 <_Z10leerSensoriii+0xa4>)
   b4536:	f003 fe50 	bl	b81da <_ZN5Print7printlnEPKc>
   b453a:	2000      	movs	r0, #0
   b453c:	bd08      	pop	{r3, pc}
   b453e:	bf00      	nop
   b4540:	000b97b7 	.word	0x000b97b7

000b4544 <_Z12makeEvaluate6BLOQUE>:
}

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b4544:	b084      	sub	sp, #16
   b4546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4548:	ac06      	add	r4, sp, #24
   b454a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b454e:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b4552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4554:	f7ff ffa2 	bl	b449c <_Z10leerSensoriii>
   b4558:	ad06      	add	r5, sp, #24
   b455a:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b455c:	afbc      	add	r7, sp, #752	; 0x2f0
   b455e:	2601      	movs	r6, #1
   b4560:	9b06      	ldr	r3, [sp, #24]
   b4562:	42b3      	cmp	r3, r6
   b4564:	dd12      	ble.n	b458c <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b4566:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b456a:	6a2a      	ldr	r2, [r5, #32]
   b456c:	f7ff ff96 	bl	b449c <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b4570:	f817 3b01 	ldrb.w	r3, [r7], #1
   b4574:	b133      	cbz	r3, b4584 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b4576:	2c00      	cmp	r4, #0
   b4578:	bf08      	it	eq
   b457a:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b457c:	3601      	adds	r6, #1
   b457e:	3510      	adds	r5, #16
   b4580:	4604      	mov	r4, r0
   b4582:	e7ed      	b.n	b4560 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b4584:	2c00      	cmp	r4, #0
   b4586:	bf18      	it	ne
   b4588:	4620      	movne	r0, r4
   b458a:	e7f7      	b.n	b457c <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b458c:	4620      	mov	r0, r4
   b458e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b4592:	b004      	add	sp, #16
   b4594:	4770      	bx	lr
	...

000b4598 <_Z13displayPrint0i>:

void displayPrint0(int n)
{
   b4598:	b538      	push	{r3, r4, r5, lr}
   b459a:	4604      	mov	r4, r0
   display.clearDisplay();
   b459c:	481a      	ldr	r0, [pc, #104]	; (b4608 <_Z13displayPrint0i+0x70>)
   b459e:	f002 fc37 	bl	b6e10 <_ZN16Adafruit_SSD130612clearDisplayEv>

   switch (n)
   b45a2:	2c05      	cmp	r4, #5
   b45a4:	d82a      	bhi.n	b45fc <_Z13displayPrint0i+0x64>
   b45a6:	e8df f004 	tbb	[pc, r4]
   b45aa:	1e03      	.short	0x1e03
   b45ac:	27252320 	.word	0x27252320
   {
   case 0:
      dispositivos[0] = "Actuador RGB";
   b45b0:	4916      	ldr	r1, [pc, #88]	; (b460c <_Z13displayPrint0i+0x74>)
      break;

   case 1:
      dispositivos[0] = "Actuador Zumbador";
   b45b2:	4817      	ldr	r0, [pc, #92]	; (b4610 <_Z13displayPrint0i+0x78>)
   b45b4:	f003 fd71 	bl	b809a <_ZN6StringaSEPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b45b8:	4d15      	ldr	r5, [pc, #84]	; (b4610 <_Z13displayPrint0i+0x78>)
      Serial.println("No es valido");
      break;
   }

   snprintf(buf, sizeof(buf), dispositivos[1]);
   display.println(buf);
   b45ba:	4c13      	ldr	r4, [pc, #76]	; (b4608 <_Z13displayPrint0i+0x70>)
   snprintf(buf, sizeof(buf), dispositivos[1]);
   b45bc:	692a      	ldr	r2, [r5, #16]
   b45be:	4815      	ldr	r0, [pc, #84]	; (b4614 <_Z13displayPrint0i+0x7c>)
   b45c0:	2140      	movs	r1, #64	; 0x40
   b45c2:	f003 fb7b 	bl	b7cbc <snprintf>
   display.println(buf);
   b45c6:	4913      	ldr	r1, [pc, #76]	; (b4614 <_Z13displayPrint0i+0x7c>)
   b45c8:	4620      	mov	r0, r4
   b45ca:	f003 fe06 	bl	b81da <_ZN5Print7printlnEPKc>

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b45ce:	682a      	ldr	r2, [r5, #0]
   b45d0:	4810      	ldr	r0, [pc, #64]	; (b4614 <_Z13displayPrint0i+0x7c>)
   b45d2:	2140      	movs	r1, #64	; 0x40
   b45d4:	f003 fb72 	bl	b7cbc <snprintf>
   display.println(buf);
   b45d8:	490e      	ldr	r1, [pc, #56]	; (b4614 <_Z13displayPrint0i+0x7c>)
   b45da:	4620      	mov	r0, r4
   b45dc:	f003 fdfd 	bl	b81da <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b45e0:	2300      	movs	r3, #0
   b45e2:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b45e4:	bd38      	pop	{r3, r4, r5, pc}
      dispositivos[0] = "Actuador Zumbador";
   b45e6:	490c      	ldr	r1, [pc, #48]	; (b4618 <_Z13displayPrint0i+0x80>)
   b45e8:	e7e3      	b.n	b45b2 <_Z13displayPrint0i+0x1a>
      dispositivos[1] = "Sensor de Luz";
   b45ea:	490c      	ldr	r1, [pc, #48]	; (b461c <_Z13displayPrint0i+0x84>)
      dispositivos[1] = "Sensor Rotativo";
   b45ec:	480c      	ldr	r0, [pc, #48]	; (b4620 <_Z13displayPrint0i+0x88>)
   b45ee:	e7e1      	b.n	b45b4 <_Z13displayPrint0i+0x1c>
      dispositivos[1] = "Sensor de Ruido";
   b45f0:	490c      	ldr	r1, [pc, #48]	; (b4624 <_Z13displayPrint0i+0x8c>)
   b45f2:	e7fb      	b.n	b45ec <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Boton";
   b45f4:	490c      	ldr	r1, [pc, #48]	; (b4628 <_Z13displayPrint0i+0x90>)
   b45f6:	e7f9      	b.n	b45ec <_Z13displayPrint0i+0x54>
      dispositivos[1] = "Sensor Rotativo";
   b45f8:	490c      	ldr	r1, [pc, #48]	; (b462c <_Z13displayPrint0i+0x94>)
   b45fa:	e7f7      	b.n	b45ec <_Z13displayPrint0i+0x54>
      Serial.println("No es valido");
   b45fc:	f003 ffee 	bl	b85dc <_Z16_fetch_usbserialv>
   b4600:	490b      	ldr	r1, [pc, #44]	; (b4630 <_Z13displayPrint0i+0x98>)
   b4602:	f003 fdea 	bl	b81da <_ZN5Print7printlnEPKc>
      break;
   b4606:	e7d7      	b.n	b45b8 <_Z13displayPrint0i+0x20>
   b4608:	2003e60c 	.word	0x2003e60c
   b460c:	000b97ca 	.word	0x000b97ca
   b4610:	2003e65c 	.word	0x2003e65c
   b4614:	2003e5cc 	.word	0x2003e5cc
   b4618:	000b97d7 	.word	0x000b97d7
   b461c:	000b97e9 	.word	0x000b97e9
   b4620:	2003e66c 	.word	0x2003e66c
   b4624:	000b97f7 	.word	0x000b97f7
   b4628:	000b9807 	.word	0x000b9807
   b462c:	000b9814 	.word	0x000b9814
   b4630:	000b97a1 	.word	0x000b97a1

000b4634 <_Z12displayPrintbbiii>:

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b4634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4638:	b088      	sub	sp, #32
   b463a:	4680      	mov	r8, r0
   display.clearDisplay();
   b463c:	4850      	ldr	r0, [pc, #320]	; (b4780 <_Z12displayPrintbbiii+0x14c>)
{
   b463e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   b4640:	460e      	mov	r6, r1
   b4642:	4615      	mov	r5, r2
   b4644:	461c      	mov	r4, r3
   display.clearDisplay();
   b4646:	f002 fbe3 	bl	b6e10 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b464a:	f1b8 0f00 	cmp.w	r8, #0
   b464e:	d06d      	beq.n	b472c <_Z12displayPrintbbiii+0xf8>
   {
      switch (id)
   b4650:	3d01      	subs	r5, #1
   b4652:	2d06      	cmp	r5, #6
   b4654:	d862      	bhi.n	b471c <_Z12displayPrintbbiii+0xe8>
   b4656:	e8df f005 	tbb	[pc, r5]
   b465a:	3604      	.short	0x3604
   b465c:	504b4641 	.word	0x504b4641
   b4660:	5c          	.byte	0x5c
   b4661:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4662:	bb74      	cbnz	r4, b46c2 <_Z12displayPrintbbiii+0x8e>
   b4664:	4947      	ldr	r1, [pc, #284]	; (b4784 <_Z12displayPrintbbiii+0x150>)

      // Luz
      case 2:
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
         // dispositivos[1] = "Sensor de Luz";
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4666:	4848      	ldr	r0, [pc, #288]	; (b4788 <_Z12displayPrintbbiii+0x154>)
   b4668:	f003 fd17 	bl	b809a <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b466c:	4946      	ldr	r1, [pc, #280]	; (b4788 <_Z12displayPrintbbiii+0x154>)
   b466e:	4668      	mov	r0, sp
   b4670:	f003 fd08 	bl	b8084 <_ZN6StringC1ERKS_>
      default:
         Serial.println("ActuadorNoValidoError");
         break;
      }
      
      snprintf(buf, sizeof(buf), dispositivos[0] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4674:	4b45      	ldr	r3, [pc, #276]	; (b478c <_Z12displayPrintbbiii+0x158>)
   b4676:	4946      	ldr	r1, [pc, #280]	; (b4790 <_Z12displayPrintbbiii+0x15c>)
   b4678:	4668      	mov	r0, sp
   b467a:	2e00      	cmp	r6, #0
   b467c:	bf08      	it	eq
   b467e:	4619      	moveq	r1, r3
   b4680:	f003 fd53 	bl	b812a <_ZplRK15StringSumHelperPKc>
   b4684:	220a      	movs	r2, #10
   b4686:	4604      	mov	r4, r0
   b4688:	4639      	mov	r1, r7
   b468a:	a804      	add	r0, sp, #16
   b468c:	f003 fd17 	bl	b80be <_ZN6StringC1Eih>
   b4690:	a904      	add	r1, sp, #16
   b4692:	4620      	mov	r0, r4
   b4694:	f003 fd3d 	bl	b8112 <_ZplRK15StringSumHelperRK6String>
   b4698:	2140      	movs	r1, #64	; 0x40
   b469a:	6802      	ldr	r2, [r0, #0]
   b469c:	483d      	ldr	r0, [pc, #244]	; (b4794 <_Z12displayPrintbbiii+0x160>)
   b469e:	f003 fb0d 	bl	b7cbc <snprintf>
   b46a2:	a804      	add	r0, sp, #16
   b46a4:	f003 fc80 	bl	b7fa8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46a8:	4668      	mov	r0, sp
   b46aa:	f003 fc7d 	bl	b7fa8 <_ZN6StringD1Ev>
      display.println(buf);
   b46ae:	4939      	ldr	r1, [pc, #228]	; (b4794 <_Z12displayPrintbbiii+0x160>)
   b46b0:	4833      	ldr	r0, [pc, #204]	; (b4780 <_Z12displayPrintbbiii+0x14c>)
   b46b2:	f003 fd92 	bl	b81da <_ZN5Print7printlnEPKc>
   b46b6:	4b32      	ldr	r3, [pc, #200]	; (b4780 <_Z12displayPrintbbiii+0x14c>)
   b46b8:	2200      	movs	r2, #0
   b46ba:	611a      	str	r2, [r3, #16]

   }

   display.setCursor(0, 0);
}
   b46bc:	b008      	add	sp, #32
   b46be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b46c2:	4935      	ldr	r1, [pc, #212]	; (b4798 <_Z12displayPrintbbiii+0x164>)
   b46c4:	e7cf      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b46c6:	f003 ff89 	bl	b85dc <_Z16_fetch_usbserialv>
   b46ca:	4934      	ldr	r1, [pc, #208]	; (b479c <_Z12displayPrintbbiii+0x168>)
   b46cc:	4622      	mov	r2, r4
   b46ce:	f7ff fd2b 	bl	b4128 <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b46d2:	b90c      	cbnz	r4, b46d8 <_Z12displayPrintbbiii+0xa4>
   b46d4:	4932      	ldr	r1, [pc, #200]	; (b47a0 <_Z12displayPrintbbiii+0x16c>)
   b46d6:	e7c6      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
   b46d8:	4932      	ldr	r1, [pc, #200]	; (b47a4 <_Z12displayPrintbbiii+0x170>)
   b46da:	e7c4      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b46dc:	b90c      	cbnz	r4, b46e2 <_Z12displayPrintbbiii+0xae>
   b46de:	4932      	ldr	r1, [pc, #200]	; (b47a8 <_Z12displayPrintbbiii+0x174>)
   b46e0:	e7c1      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
   b46e2:	4932      	ldr	r1, [pc, #200]	; (b47ac <_Z12displayPrintbbiii+0x178>)
   b46e4:	e7bf      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b46e6:	b90c      	cbnz	r4, b46ec <_Z12displayPrintbbiii+0xb8>
   b46e8:	4931      	ldr	r1, [pc, #196]	; (b47b0 <_Z12displayPrintbbiii+0x17c>)
   b46ea:	e7bc      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
   b46ec:	4931      	ldr	r1, [pc, #196]	; (b47b4 <_Z12displayPrintbbiii+0x180>)
   b46ee:	e7ba      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b46f0:	b90c      	cbnz	r4, b46f6 <_Z12displayPrintbbiii+0xc2>
   b46f2:	4931      	ldr	r1, [pc, #196]	; (b47b8 <_Z12displayPrintbbiii+0x184>)
   b46f4:	e7b7      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
   b46f6:	4931      	ldr	r1, [pc, #196]	; (b47bc <_Z12displayPrintbbiii+0x188>)
   b46f8:	e7b5      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         switch (condicion)
   b46fa:	2c01      	cmp	r4, #1
   b46fc:	d005      	beq.n	b470a <_Z12displayPrintbbiii+0xd6>
   b46fe:	2c02      	cmp	r4, #2
   b4700:	d005      	beq.n	b470e <_Z12displayPrintbbiii+0xda>
   b4702:	2c00      	cmp	r4, #0
   b4704:	d1b2      	bne.n	b466c <_Z12displayPrintbbiii+0x38>
            dispositivos[1] = "Sensor Temp.Frio";
   b4706:	492e      	ldr	r1, [pc, #184]	; (b47c0 <_Z12displayPrintbbiii+0x18c>)
   b4708:	e7ad      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Templado";
   b470a:	492e      	ldr	r1, [pc, #184]	; (b47c4 <_Z12displayPrintbbiii+0x190>)
   b470c:	e7ab      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
            dispositivos[1] = "Sensor Temp.Calor";
   b470e:	492e      	ldr	r1, [pc, #184]	; (b47c8 <_Z12displayPrintbbiii+0x194>)
   b4710:	e7a9      	b.n	b4666 <_Z12displayPrintbbiii+0x32>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b4712:	b94c      	cbnz	r4, b4728 <_Z12displayPrintbbiii+0xf4>
   b4714:	492d      	ldr	r1, [pc, #180]	; (b47cc <_Z12displayPrintbbiii+0x198>)
   b4716:	481c      	ldr	r0, [pc, #112]	; (b4788 <_Z12displayPrintbbiii+0x154>)
   b4718:	f003 fcbf 	bl	b809a <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b471c:	f003 ff5e 	bl	b85dc <_Z16_fetch_usbserialv>
   b4720:	492b      	ldr	r1, [pc, #172]	; (b47d0 <_Z12displayPrintbbiii+0x19c>)
   b4722:	f003 fd5a 	bl	b81da <_ZN5Print7printlnEPKc>
         break;
   b4726:	e7a1      	b.n	b466c <_Z12displayPrintbbiii+0x38>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b4728:	492a      	ldr	r1, [pc, #168]	; (b47d4 <_Z12displayPrintbbiii+0x1a0>)
   b472a:	e7f4      	b.n	b4716 <_Z12displayPrintbbiii+0xe2>
      switch (id)
   b472c:	b13d      	cbz	r5, b473e <_Z12displayPrintbbiii+0x10a>
   b472e:	2d01      	cmp	r5, #1
   b4730:	d021      	beq.n	b4776 <_Z12displayPrintbbiii+0x142>
         Serial.println("ActuadorNoValidoError");
   b4732:	f003 ff53 	bl	b85dc <_Z16_fetch_usbserialv>
   b4736:	4928      	ldr	r1, [pc, #160]	; (b47d8 <_Z12displayPrintbbiii+0x1a4>)
   b4738:	f003 fd4f 	bl	b81da <_ZN5Print7printlnEPKc>
         break;
   b473c:	e00b      	b.n	b4756 <_Z12displayPrintbbiii+0x122>
         switch (condicion)
   b473e:	2c07      	cmp	r4, #7
   b4740:	d809      	bhi.n	b4756 <_Z12displayPrintbbiii+0x122>
   b4742:	e8df f004 	tbb	[pc, r4]
   b4746:	0a04      	.short	0x0a04
   b4748:	12100e0c 	.word	0x12100e0c
   b474c:	1614      	.short	0x1614
            dispositivos[0] = "RGB Verde";
   b474e:	4923      	ldr	r1, [pc, #140]	; (b47dc <_Z12displayPrintbbiii+0x1a8>)
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4750:	4823      	ldr	r0, [pc, #140]	; (b47e0 <_Z12displayPrintbbiii+0x1ac>)
   b4752:	f003 fca2 	bl	b809a <_ZN6StringaSEPKc>
	StringSumHelper(const String &s) : String(s) {}
   b4756:	4922      	ldr	r1, [pc, #136]	; (b47e0 <_Z12displayPrintbbiii+0x1ac>)
   b4758:	e789      	b.n	b466e <_Z12displayPrintbbiii+0x3a>
            dispositivos[0] = "RGB Rojo";
   b475a:	4922      	ldr	r1, [pc, #136]	; (b47e4 <_Z12displayPrintbbiii+0x1b0>)
   b475c:	e7f8      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Amarillo";
   b475e:	4922      	ldr	r1, [pc, #136]	; (b47e8 <_Z12displayPrintbbiii+0x1b4>)
   b4760:	e7f6      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Morado";
   b4762:	4922      	ldr	r1, [pc, #136]	; (b47ec <_Z12displayPrintbbiii+0x1b8>)
   b4764:	e7f4      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Azul";
   b4766:	4922      	ldr	r1, [pc, #136]	; (b47f0 <_Z12displayPrintbbiii+0x1bc>)
   b4768:	e7f2      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Naranja";
   b476a:	4922      	ldr	r1, [pc, #136]	; (b47f4 <_Z12displayPrintbbiii+0x1c0>)
   b476c:	e7f0      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Blink";
   b476e:	4922      	ldr	r1, [pc, #136]	; (b47f8 <_Z12displayPrintbbiii+0x1c4>)
   b4770:	e7ee      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
            dispositivos[0] = "RGB Rainbow";
   b4772:	4922      	ldr	r1, [pc, #136]	; (b47fc <_Z12displayPrintbbiii+0x1c8>)
   b4774:	e7ec      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4776:	b90c      	cbnz	r4, b477c <_Z12displayPrintbbiii+0x148>
   b4778:	4921      	ldr	r1, [pc, #132]	; (b4800 <_Z12displayPrintbbiii+0x1cc>)
   b477a:	e7e9      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
   b477c:	4921      	ldr	r1, [pc, #132]	; (b4804 <_Z12displayPrintbbiii+0x1d0>)
   b477e:	e7e7      	b.n	b4750 <_Z12displayPrintbbiii+0x11c>
   b4780:	2003e60c 	.word	0x2003e60c
   b4784:	000b982a 	.word	0x000b982a
   b4788:	2003e66c 	.word	0x2003e66c
   b478c:	000b9827 	.word	0x000b9827
   b4790:	000b9824 	.word	0x000b9824
   b4794:	2003e5cc 	.word	0x2003e5cc
   b4798:	000b9840 	.word	0x000b9840
   b479c:	000b9857 	.word	0x000b9857
   b47a0:	000b986e 	.word	0x000b986e
   b47a4:	000b987c 	.word	0x000b987c
   b47a8:	000b988a 	.word	0x000b988a
   b47ac:	000b989a 	.word	0x000b989a
   b47b0:	000b98aa 	.word	0x000b98aa
   b47b4:	000b98ba 	.word	0x000b98ba
   b47b8:	000b98ca 	.word	0x000b98ca
   b47bc:	000b98dd 	.word	0x000b98dd
   b47c0:	000b98f0 	.word	0x000b98f0
   b47c4:	000b9901 	.word	0x000b9901
   b47c8:	000b9916 	.word	0x000b9916
   b47cc:	000b9928 	.word	0x000b9928
   b47d0:	000b9956 	.word	0x000b9956
   b47d4:	000b993f 	.word	0x000b993f
   b47d8:	000b99df 	.word	0x000b99df
   b47dc:	000b996a 	.word	0x000b996a
   b47e0:	2003e65c 	.word	0x2003e65c
   b47e4:	000b9974 	.word	0x000b9974
   b47e8:	000b997d 	.word	0x000b997d
   b47ec:	000b998a 	.word	0x000b998a
   b47f0:	000b9995 	.word	0x000b9995
   b47f4:	000b999e 	.word	0x000b999e
   b47f8:	000b99aa 	.word	0x000b99aa
   b47fc:	000b99b4 	.word	0x000b99b4
   b4800:	000b99c0 	.word	0x000b99c0
   b4804:	000b99d0 	.word	0x000b99d0

000b4808 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b4808:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b480a:	7803      	ldrb	r3, [r0, #0]
   b480c:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b480e:	bf0c      	ite	eq
   b4810:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b4812:	2200      	movne	r2, #0
   int i = 0;
   b4814:	4613      	mov	r3, r2
   b4816:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b4818:	240a      	movs	r4, #10
      i++;
   b481a:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b481c:	f813 1b01 	ldrb.w	r1, [r3], #1
   b4820:	3930      	subs	r1, #48	; 0x30
   b4822:	b2cd      	uxtb	r5, r1
   b4824:	2d09      	cmp	r5, #9
   b4826:	d802      	bhi.n	b482e <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b4828:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b482c:	e7f6      	b.n	b481c <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b482e:	b102      	cbz	r2, b4832 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b4830:	4240      	negs	r0, r0
   return num;
}
   b4832:	bd30      	pop	{r4, r5, pc}

000b4834 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b4834:	b570      	push	{r4, r5, r6, lr}
   b4836:	4614      	mov	r4, r2
   b4838:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b483a:	f004 fedb 	bl	b95f4 <strtok>
   int j = 0;
   b483e:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4840:	b140      	cbz	r0, b4854 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4842:	f7ff ffe1 	bl	b4808 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4846:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4848:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b484c:	2000      	movs	r0, #0
   b484e:	f004 fed1 	bl	b95f4 <strtok>
   while (ptr != NULL)
   b4852:	e7f5      	b.n	b4840 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4854:	6823      	ldr	r3, [r4, #0]
   b4856:	b913      	cbnz	r3, b485e <_Z5splitPcS_Pi+0x2a>
      haveSensor = true;
   b4858:	4b01      	ldr	r3, [pc, #4]	; (b4860 <_Z5splitPcS_Pi+0x2c>)
   b485a:	2201      	movs	r2, #1
   b485c:	701a      	strb	r2, [r3, #0]
}
   b485e:	bd70      	pop	{r4, r5, r6, pc}
   b4860:	2003e680 	.word	0x2003e680

000b4864 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4864:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4866:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b486a:	f10d 0307 	add.w	r3, sp, #7
   b486e:	460a      	mov	r2, r1
   b4870:	4601      	mov	r1, r0
   b4872:	480d      	ldr	r0, [pc, #52]	; (b48a8 <_Z17readDataFromBlockhPhh+0x44>)
   b4874:	4d0d      	ldr	r5, [pc, #52]	; (b48ac <_Z17readDataFromBlockhPhh+0x48>)
   b4876:	f001 fecf 	bl	b6618 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b487a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b487c:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b487e:	d010      	beq.n	b48a2 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4880:	f003 feac 	bl	b85dc <_Z16_fetch_usbserialv>
   b4884:	490a      	ldr	r1, [pc, #40]	; (b48b0 <_Z17readDataFromBlockhPhh+0x4c>)
   b4886:	f003 fc95 	bl	b81b4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b488a:	f003 fea7 	bl	b85dc <_Z16_fetch_usbserialv>
   b488e:	7829      	ldrb	r1, [r5, #0]
   b4890:	4604      	mov	r4, r0
   b4892:	4805      	ldr	r0, [pc, #20]	; (b48a8 <_Z17readDataFromBlockhPhh+0x44>)
   b4894:	f001 fc14 	bl	b60c0 <_ZN7MFRC52217GetStatusCodeNameEh>
   b4898:	4601      	mov	r1, r0
   b489a:	4620      	mov	r0, r4
   b489c:	f003 fc9d 	bl	b81da <_ZN5Print7printlnEPKc>
   b48a0:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b48a2:	b003      	add	sp, #12
   b48a4:	bd30      	pop	{r4, r5, pc}
   b48a6:	bf00      	nop
   b48a8:	2003e698 	.word	0x2003e698
   b48ac:	2003e6b8 	.word	0x2003e6b8
   b48b0:	000b99f5 	.word	0x000b99f5

000b48b4 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b48b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b48b6:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b48b8:	4d1e      	ldr	r5, [pc, #120]	; (b4934 <_Z8getTagIDPi+0x80>)
   b48ba:	4a1f      	ldr	r2, [pc, #124]	; (b4938 <_Z8getTagIDPi+0x84>)
   b48bc:	9500      	str	r5, [sp, #0]
   b48be:	4b1f      	ldr	r3, [pc, #124]	; (b493c <_Z8getTagIDPi+0x88>)
   b48c0:	7812      	ldrb	r2, [r2, #0]
   b48c2:	4f1f      	ldr	r7, [pc, #124]	; (b4940 <_Z8getTagIDPi+0x8c>)
{
   b48c4:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b48c6:	2160      	movs	r1, #96	; 0x60
   b48c8:	4628      	mov	r0, r5
   b48ca:	f001 fec6 	bl	b665a <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b48ce:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b48d0:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b48d2:	d00f      	beq.n	b48f4 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b48d4:	f003 fe82 	bl	b85dc <_Z16_fetch_usbserialv>
   b48d8:	491a      	ldr	r1, [pc, #104]	; (b4944 <_Z8getTagIDPi+0x90>)
   b48da:	f003 fc6b 	bl	b81b4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b48de:	f003 fe7d 	bl	b85dc <_Z16_fetch_usbserialv>
   b48e2:	7839      	ldrb	r1, [r7, #0]
   b48e4:	4604      	mov	r4, r0
   b48e6:	4628      	mov	r0, r5
   b48e8:	f001 fbea 	bl	b60c0 <_ZN7MFRC52217GetStatusCodeNameEh>
   b48ec:	4601      	mov	r1, r0
   b48ee:	4620      	mov	r0, r4
   b48f0:	f003 fc73 	bl	b81da <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b48f4:	4b14      	ldr	r3, [pc, #80]	; (b4948 <_Z8getTagIDPi+0x94>)
   b48f6:	2212      	movs	r2, #18
   b48f8:	7818      	ldrb	r0, [r3, #0]
   b48fa:	a907      	add	r1, sp, #28
   b48fc:	f7ff ffb2 	bl	b4864 <_Z17readDataFromBlockhPhh>
   b4900:	b1b0      	cbz	r0, b4930 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b4902:	ac07      	add	r4, sp, #28
   b4904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4906:	ad03      	add	r5, sp, #12
   b4908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b490a:	6823      	ldr	r3, [r4, #0]
   b490c:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b490e:	f003 fe65 	bl	b85dc <_Z16_fetch_usbserialv>
   b4912:	490e      	ldr	r1, [pc, #56]	; (b494c <_Z8getTagIDPi+0x98>)
   b4914:	aa03      	add	r2, sp, #12
   b4916:	f7ff fc07 	bl	b4128 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b491a:	490d      	ldr	r1, [pc, #52]	; (b4950 <_Z8getTagIDPi+0x9c>)
   b491c:	4632      	mov	r2, r6
   b491e:	a803      	add	r0, sp, #12
   b4920:	f7ff ff88 	bl	b4834 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b4924:	4803      	ldr	r0, [pc, #12]	; (b4934 <_Z8getTagIDPi+0x80>)
   b4926:	f001 fe52 	bl	b65ce <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b492a:	4802      	ldr	r0, [pc, #8]	; (b4934 <_Z8getTagIDPi+0x80>)
   b492c:	f001 fcaf 	bl	b628e <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b4930:	b00d      	add	sp, #52	; 0x34
   b4932:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4934:	2003e698 	.word	0x2003e698
   b4938:	2003df60 	.word	0x2003df60
   b493c:	2003e688 	.word	0x2003e688
   b4940:	2003e6b8 	.word	0x2003e6b8
   b4944:	000b9a0c 	.word	0x000b9a0c
   b4948:	2003df3c 	.word	0x2003df3c
   b494c:	000b9a28 	.word	0x000b9a28
   b4950:	2003df3d 	.word	0x2003df3d

000b4954 <_Z13asignarPuertoi>:
   }
}*/


int asignarPuerto(int type)
{
   b4954:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b4956:	b940      	cbnz	r0, b496a <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b4958:	4b26      	ldr	r3, [pc, #152]	; (b49f4 <_Z13asignarPuertoi+0xa0>)
   }
   else
      option = puertoDigital;
   b495a:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b495c:	2c05      	cmp	r4, #5
   b495e:	d840      	bhi.n	b49e2 <_Z13asignarPuertoi+0x8e>
   b4960:	e8df f004 	tbb	[pc, r4]
   b4964:	261a0f05 	.word	0x261a0f05
   b4968:	342d      	.short	0x342d
      option = puertoDigital;
   b496a:	4b23      	ldr	r3, [pc, #140]	; (b49f8 <_Z13asignarPuertoi+0xa4>)
   b496c:	e7f5      	b.n	b495a <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b496e:	f003 fe35 	bl	b85dc <_Z16_fetch_usbserialv>
   b4972:	4922      	ldr	r1, [pc, #136]	; (b49fc <_Z13asignarPuertoi+0xa8>)
   b4974:	f003 fc1e 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4978:	4a1e      	ldr	r2, [pc, #120]	; (b49f4 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
   b497a:	6813      	ldr	r3, [r2, #0]
   b497c:	3301      	adds	r3, #1
   b497e:	6013      	str	r3, [r2, #0]
      return 4;
   b4980:	e014      	b.n	b49ac <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b4982:	f003 fe2b 	bl	b85dc <_Z16_fetch_usbserialv>
   b4986:	491e      	ldr	r1, [pc, #120]	; (b4a00 <_Z13asignarPuertoi+0xac>)
   b4988:	f003 fc14 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b498c:	4a19      	ldr	r2, [pc, #100]	; (b49f4 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b498e:	6813      	ldr	r3, [r2, #0]
   b4990:	3301      	adds	r3, #1
   b4992:	6013      	str	r3, [r2, #0]
      return 2;
   b4994:	2402      	movs	r4, #2
   b4996:	e009      	b.n	b49ac <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b4998:	f003 fe20 	bl	b85dc <_Z16_fetch_usbserialv>
   b499c:	4919      	ldr	r1, [pc, #100]	; (b4a04 <_Z13asignarPuertoi+0xb0>)
   b499e:	f003 fc09 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b49a2:	4b14      	ldr	r3, [pc, #80]	; (b49f4 <_Z13asignarPuertoi+0xa0>)
   b49a4:	f04f 32ff 	mov.w	r2, #4294967295
   b49a8:	601a      	str	r2, [r3, #0]
      return 4;
   b49aa:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b49ac:	4620      	mov	r0, r4
   b49ae:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b49b0:	f003 fe14 	bl	b85dc <_Z16_fetch_usbserialv>
   b49b4:	4914      	ldr	r1, [pc, #80]	; (b4a08 <_Z13asignarPuertoi+0xb4>)
   b49b6:	f003 fbfd 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b49ba:	4a0f      	ldr	r2, [pc, #60]	; (b49f8 <_Z13asignarPuertoi+0xa4>)
   b49bc:	e7e7      	b.n	b498e <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b49be:	f003 fe0d 	bl	b85dc <_Z16_fetch_usbserialv>
   b49c2:	4912      	ldr	r1, [pc, #72]	; (b4a0c <_Z13asignarPuertoi+0xb8>)
   b49c4:	f003 fbf6 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b49c8:	4a0b      	ldr	r2, [pc, #44]	; (b49f8 <_Z13asignarPuertoi+0xa4>)
   b49ca:	e7d6      	b.n	b497a <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b49cc:	f003 fe06 	bl	b85dc <_Z16_fetch_usbserialv>
   b49d0:	490f      	ldr	r1, [pc, #60]	; (b4a10 <_Z13asignarPuertoi+0xbc>)
   b49d2:	f003 fbef 	bl	b81b4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b49d6:	4b08      	ldr	r3, [pc, #32]	; (b49f8 <_Z13asignarPuertoi+0xa4>)
   b49d8:	f04f 32ff 	mov.w	r2, #4294967295
   b49dc:	601a      	str	r2, [r3, #0]
      return 6;
   b49de:	2406      	movs	r4, #6
   b49e0:	e7e4      	b.n	b49ac <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b49e2:	f003 fdfb 	bl	b85dc <_Z16_fetch_usbserialv>
   b49e6:	490b      	ldr	r1, [pc, #44]	; (b4a14 <_Z13asignarPuertoi+0xc0>)
   b49e8:	f003 fbe4 	bl	b81b4 <_ZN5Print5printEPKc>
      return -1;
   b49ec:	f04f 34ff 	mov.w	r4, #4294967295
   b49f0:	e7dc      	b.n	b49ac <_Z13asignarPuertoi+0x58>
   b49f2:	bf00      	nop
   b49f4:	2003e6b4 	.word	0x2003e6b4
   b49f8:	2003df44 	.word	0x2003df44
   b49fc:	000b9a34 	.word	0x000b9a34
   b4a00:	000b9a4b 	.word	0x000b9a4b
   b4a04:	000b9a62 	.word	0x000b9a62
   b4a08:	000b9a79 	.word	0x000b9a79
   b4a0c:	000b9a90 	.word	0x000b9a90
   b4a10:	000b9aa7 	.word	0x000b9aa7
   b4a14:	000b9abe 	.word	0x000b9abe

000b4a18 <_Z9ledApagarv>:

ChainableLED ledObject  = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
bool init = true;

void ledApagar()
{
   b4a18:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b4a1a:	2300      	movs	r3, #0
   b4a1c:	4804      	ldr	r0, [pc, #16]	; (b4a30 <_Z9ledApagarv+0x18>)
   b4a1e:	9300      	str	r3, [sp, #0]
   b4a20:	461a      	mov	r2, r3
   b4a22:	4619      	mov	r1, r3
   b4a24:	f002 fd60 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a28:	b003      	add	sp, #12
   b4a2a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a2e:	bf00      	nop
   b4a30:	2003e690 	.word	0x2003e690

000b4a34 <_Z7ledRojov>:
void ledRojo()
{
   b4a34:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b4a36:	2300      	movs	r3, #0
   b4a38:	4804      	ldr	r0, [pc, #16]	; (b4a4c <_Z7ledRojov+0x18>)
   b4a3a:	9300      	str	r3, [sp, #0]
   b4a3c:	22ff      	movs	r2, #255	; 0xff
   b4a3e:	4619      	mov	r1, r3
   b4a40:	f002 fd52 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a44:	b003      	add	sp, #12
   b4a46:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a4a:	bf00      	nop
   b4a4c:	2003e690 	.word	0x2003e690

000b4a50 <_Z8ledVerdev>:
void ledVerde()
{
   b4a50:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4a52:	230a      	movs	r3, #10
   b4a54:	2200      	movs	r2, #0
   b4a56:	9300      	str	r3, [sp, #0]
   b4a58:	4803      	ldr	r0, [pc, #12]	; (b4a68 <_Z8ledVerdev+0x18>)
   b4a5a:	23ff      	movs	r3, #255	; 0xff
   b4a5c:	4611      	mov	r1, r2
   b4a5e:	f002 fd43 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a62:	b003      	add	sp, #12
   b4a64:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a68:	2003e690 	.word	0x2003e690

000b4a6c <_Z7ledAzulv>:
void ledAzul()
{
   b4a6c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b4a6e:	23ff      	movs	r3, #255	; 0xff
   b4a70:	9300      	str	r3, [sp, #0]
   b4a72:	2300      	movs	r3, #0
   b4a74:	4803      	ldr	r0, [pc, #12]	; (b4a84 <_Z7ledAzulv+0x18>)
   b4a76:	461a      	mov	r2, r3
   b4a78:	4619      	mov	r1, r3
   b4a7a:	f002 fd35 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a7e:	b003      	add	sp, #12
   b4a80:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a84:	2003e690 	.word	0x2003e690

000b4a88 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4a88:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4a8a:	2100      	movs	r1, #0
   b4a8c:	4804      	ldr	r0, [pc, #16]	; (b4aa0 <_Z11ledAmarillov+0x18>)
   b4a8e:	9100      	str	r1, [sp, #0]
   b4a90:	23e9      	movs	r3, #233	; 0xe9
   b4a92:	22ff      	movs	r2, #255	; 0xff
   b4a94:	f002 fd28 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4a98:	b003      	add	sp, #12
   b4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a9e:	bf00      	nop
   b4aa0:	2003e690 	.word	0x2003e690

000b4aa4 <_Z9ledMoradov>:
void ledMorado()
{
   b4aa4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4aa6:	2375      	movs	r3, #117	; 0x75
   b4aa8:	9300      	str	r3, [sp, #0]
   b4aaa:	4804      	ldr	r0, [pc, #16]	; (b4abc <_Z9ledMoradov+0x18>)
   b4aac:	2346      	movs	r3, #70	; 0x46
   b4aae:	226c      	movs	r2, #108	; 0x6c
   b4ab0:	2100      	movs	r1, #0
   b4ab2:	f002 fd19 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4ab6:	b003      	add	sp, #12
   b4ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4abc:	2003e690 	.word	0x2003e690

000b4ac0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b4ac0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b4ac2:	2100      	movs	r1, #0
   b4ac4:	4804      	ldr	r0, [pc, #16]	; (b4ad8 <_Z10ledNaranjav+0x18>)
   b4ac6:	9100      	str	r1, [sp, #0]
   b4ac8:	2380      	movs	r3, #128	; 0x80
   b4aca:	22ff      	movs	r2, #255	; 0xff
   b4acc:	f002 fd0c 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4ad0:	b003      	add	sp, #12
   b4ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ad6:	bf00      	nop
   b4ad8:	2003e690 	.word	0x2003e690

000b4adc <_Z9ledBlancov>:
void ledBlanco()
{
   b4adc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b4ade:	23ff      	movs	r3, #255	; 0xff
   b4ae0:	4804      	ldr	r0, [pc, #16]	; (b4af4 <_Z9ledBlancov+0x18>)
   b4ae2:	9300      	str	r3, [sp, #0]
   b4ae4:	461a      	mov	r2, r3
   b4ae6:	2100      	movs	r1, #0
   b4ae8:	f002 fcfe 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4aec:	b003      	add	sp, #12
   b4aee:	f85d fb04 	ldr.w	pc, [sp], #4
   b4af2:	bf00      	nop
   b4af4:	2003e690 	.word	0x2003e690

000b4af8 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b4af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (double i = 0; i < 1; i += 0.01)
   b4afc:	f20f 0944 	addw	r9, pc, #68	; 0x44
   b4b00:	e9d9 8900 	ldrd	r8, r9, [r9]
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4b04:	4f0e      	ldr	r7, [pc, #56]	; (b4b40 <_Z11ledArcoirisv+0x48>)
{
   b4b06:	2664      	movs	r6, #100	; 0x64
    for (double i = 0; i < 1; i += 0.01)
   b4b08:	2400      	movs	r4, #0
   b4b0a:	2500      	movs	r5, #0
        ledObject.setColorHSB(0, i, 0.75, 0.75);
   b4b0c:	4629      	mov	r1, r5
   b4b0e:	4620      	mov	r0, r4
   b4b10:	f004 fcae 	bl	b9470 <__aeabi_d2f>
   b4b14:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
   b4b18:	ee00 0a10 	vmov	s0, r0
   b4b1c:	eef0 0a41 	vmov.f32	s1, s2
   b4b20:	2100      	movs	r1, #0
   b4b22:	4638      	mov	r0, r7
   b4b24:	f002 fdc4 	bl	b76b0 <_ZN12ChainableLED11setColorHSBEhfff>
    for (double i = 0; i < 1; i += 0.01)
   b4b28:	4620      	mov	r0, r4
   b4b2a:	4629      	mov	r1, r5
   b4b2c:	4642      	mov	r2, r8
   b4b2e:	464b      	mov	r3, r9
   b4b30:	f004 f82e 	bl	b8b90 <__adddf3>
   b4b34:	3e01      	subs	r6, #1
   b4b36:	4604      	mov	r4, r0
   b4b38:	460d      	mov	r5, r1
   b4b3a:	d1e7      	bne.n	b4b0c <_Z11ledArcoirisv+0x14>
    }

}
   b4b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4b40:	2003e690 	.word	0x2003e690
   b4b44:	47ae147b 	.word	0x47ae147b
   b4b48:	3f847ae1 	.word	0x3f847ae1

000b4b4c <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4b4c:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4b4e:	2101      	movs	r1, #1
   b4b50:	2006      	movs	r0, #6
   b4b52:	f003 ff54 	bl	b89fe <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b4b56:	2101      	movs	r1, #1
   b4b58:	2006      	movs	r0, #6
   b4b5a:	f003 ff50 	bl	b89fe <digitalWrite>
   digitalWrite(D7, HIGH);
   b4b5e:	2101      	movs	r1, #1
   b4b60:	2007      	movs	r0, #7
   b4b62:	f003 ff4c 	bl	b89fe <digitalWrite>
   digitalWrite(D7, 1);
}
   b4b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b4b6a:	2101      	movs	r1, #1
   b4b6c:	2007      	movs	r0, #7
   b4b6e:	f003 bf46 	b.w	b89fe <digitalWrite>

000b4b72 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b4b72:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b4b74:	2100      	movs	r1, #0
   b4b76:	2006      	movs	r0, #6
   b4b78:	f003 ff41 	bl	b89fe <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4b7c:	2100      	movs	r1, #0
   b4b7e:	2006      	movs	r0, #6
   b4b80:	f003 ff3d 	bl	b89fe <digitalWrite>
   digitalWrite(D7, LOW);
   b4b84:	2100      	movs	r1, #0
   b4b86:	2007      	movs	r0, #7
   b4b88:	f003 ff39 	bl	b89fe <digitalWrite>
   digitalWrite(D7, 0);
}
   b4b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b4b90:	2100      	movs	r1, #0
   b4b92:	2007      	movs	r0, #7
   b4b94:	f003 bf33 	b.w	b89fe <digitalWrite>

000b4b98 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b4b98:	b508      	push	{r3, lr}
   pitidoON0();
   b4b9a:	f7ff ffd7 	bl	b4b4c <_Z9pitidoON0v>
   delay(100);
   b4b9e:	2064      	movs	r0, #100	; 0x64
   b4ba0:	f003 fb86 	bl	b82b0 <delay>
   pitidoOFF0();
   b4ba4:	f7ff ffe5 	bl	b4b72 <_Z10pitidoOFF0v>
   delay(100);
}
   b4ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b4bac:	2064      	movs	r0, #100	; 0x64
   b4bae:	f003 bb7f 	b.w	b82b0 <delay>

000b4bb2 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b4bb2:	b108      	cbz	r0, b4bb8 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b4bb4:	f7ff bf5a 	b.w	b4a6c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b4bb8:	f7ff bf82 	b.w	b4ac0 <_Z10ledNaranjav>

000b4bbc <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b4bbc:	b108      	cbz	r0, b4bc2 <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b4bbe:	f7ff bf63 	b.w	b4a88 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b4bc2:	f7ff bf6f 	b.w	b4aa4 <_Z9ledMoradov>

000b4bc6 <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b4bc6:	b108      	cbz	r0, b4bcc <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b4bc8:	f7ff bf42 	b.w	b4a50 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b4bcc:	f7ff bf32 	b.w	b4a34 <_Z7ledRojov>

000b4bd0 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b4bd0:	b508      	push	{r3, lr}
   if (estado)
   b4bd2:	b160      	cbz	r0, b4bee <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b4bd4:	f7ff ff82 	bl	b4adc <_Z9ledBlancov>
      delay(400);
   b4bd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4bdc:	f003 fb68 	bl	b82b0 <delay>
      ledApagar();
   b4be0:	f7ff ff1a 	bl	b4a18 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b4be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b4be8:	20c8      	movs	r0, #200	; 0xc8
   b4bea:	f003 bb61 	b.w	b82b0 <delay>
}
   b4bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b4bf2:	f7ff bf11 	b.w	b4a18 <_Z9ledApagarv>

000b4bf6 <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b4bf6:	b108      	cbz	r0, b4bfc <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b4bf8:	f7ff bf70 	b.w	b4adc <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b4bfc:	f7ff bf0c 	b.w	b4a18 <_Z9ledApagarv>

000b4c00 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b4c00:	b108      	cbz	r0, b4c06 <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b4c02:	f7ff bf79 	b.w	b4af8 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b4c06:	f7ff bf07 	b.w	b4a18 <_Z9ledApagarv>

000b4c0a <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b4c0a:	b108      	cbz	r0, b4c10 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b4c0c:	f7ff bfc4 	b.w	b4b98 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b4c10:	f7ff bfaf 	b.w	b4b72 <_Z10pitidoOFF0v>

000b4c14 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b4c14:	b108      	cbz	r0, b4c1a <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b4c16:	f7ff bf99 	b.w	b4b4c <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b4c1a:	f7ff bfaa 	b.w	b4b72 <_Z10pitidoOFF0v>
	...

000b4c20 <_Z15activarActuador8ACTUADORib>:
   }
}

void activarActuador(Actuador actuador, int opcion, boolean valor)
{
   b4c20:	b084      	sub	sp, #16
   b4c22:	b538      	push	{r3, r4, r5, lr}
   b4c24:	ac04      	add	r4, sp, #16
   b4c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4c2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b4c2c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   switch (actuador.id)
   b4c30:	b148      	cbz	r0, b4c46 <_Z15activarActuador8ACTUADORib+0x26>
   b4c32:	2801      	cmp	r0, #1
   b4c34:	d032      	beq.n	b4c9c <_Z15activarActuador8ACTUADORib+0x7c>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b4c36:	f003 fcd1 	bl	b85dc <_Z16_fetch_usbserialv>
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b4c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b4c3e:	4920      	ldr	r1, [pc, #128]	; (b4cc0 <_Z15activarActuador8ACTUADORib+0xa0>)
}
   b4c40:	b004      	add	sp, #16
            Serial.println("Valor no valido");
   b4c42:	f003 baca 	b.w	b81da <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b4c46:	2d05      	cmp	r5, #5
   b4c48:	d8f5      	bhi.n	b4c36 <_Z15activarActuador8ACTUADORib+0x16>
   b4c4a:	e8df f005 	tbb	[pc, r5]
   b4c4e:	0903      	.short	0x0903
   b4c50:	211b150f 	.word	0x211b150f
            ledVerdeRojo(valor);
   b4c54:	4620      	mov	r0, r4
}
   b4c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c5a:	b004      	add	sp, #16
            ledVerdeRojo(valor);
   b4c5c:	f7ff bfb3 	b.w	b4bc6 <_Z12ledVerdeRojob>
            ledMoradoAmarillo(valor);
   b4c60:	4620      	mov	r0, r4
}
   b4c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c66:	b004      	add	sp, #16
            ledMoradoAmarillo(valor);
   b4c68:	f7ff bfa8 	b.w	b4bbc <_Z17ledMoradoAmarillob>
            ledAzulNaranja(valor);
   b4c6c:	4620      	mov	r0, r4
}
   b4c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c72:	b004      	add	sp, #16
            ledAzulNaranja(valor);
   b4c74:	f7ff bf9d 	b.w	b4bb2 <_Z14ledAzulNaranjab>
            ledBlink0(valor);
   b4c78:	4620      	mov	r0, r4
}
   b4c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c7e:	b004      	add	sp, #16
            ledBlink0(valor);
   b4c80:	f7ff bfa6 	b.w	b4bd0 <_Z9ledBlink0b>
            ledArcoiris0(valor);
   b4c84:	4620      	mov	r0, r4
}
   b4c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c8a:	b004      	add	sp, #16
            ledArcoiris0(valor);
   b4c8c:	f7ff bfb8 	b.w	b4c00 <_Z12ledArcoiris0b>
            ledOnOff(valor);
   b4c90:	4620      	mov	r0, r4
}
   b4c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c96:	b004      	add	sp, #16
            ledOnOff(valor);
   b4c98:	f7ff bfad 	b.w	b4bf6 <_Z8ledOnOffb>
      ledApagar();
   b4c9c:	f7ff febc 	bl	b4a18 <_Z9ledApagarv>
      switch (opcion) {
   b4ca0:	b13d      	cbz	r5, b4cb2 <_Z15activarActuador8ACTUADORib+0x92>
   b4ca2:	2d01      	cmp	r5, #1
   b4ca4:	d1c7      	bne.n	b4c36 <_Z15activarActuador8ACTUADORib+0x16>
            blinkAndSleep(valor);
   b4ca6:	4620      	mov	r0, r4
}
   b4ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4cac:	b004      	add	sp, #16
            blinkAndSleep(valor);
   b4cae:	f7ff bfac 	b.w	b4c0a <_Z13blinkAndSleepb>
            zumbador(valor);
   b4cb2:	4620      	mov	r0, r4
}
   b4cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4cb8:	b004      	add	sp, #16
            zumbador(valor);
   b4cba:	f7ff bfab 	b.w	b4c14 <_Z8zumbadorb>
   b4cbe:	bf00      	nop
   b4cc0:	000b9ae6 	.word	0x000b9ae6

000b4cc4 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b4cc4:	b508      	push	{r3, lr}
    ledBlanco();
   b4cc6:	f7ff ff09 	bl	b4adc <_Z9ledBlancov>
    delay(400);
   b4cca:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4cce:	f003 faef 	bl	b82b0 <delay>
    ledApagar();
   b4cd2:	f7ff fea1 	bl	b4a18 <_Z9ledApagarv>
    delay(200);
}
   b4cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b4cda:	20c8      	movs	r0, #200	; 0xc8
   b4cdc:	f003 bae8 	b.w	b82b0 <delay>

000b4ce0 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b4ce0:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4ce2:	b284      	uxth	r4, r0
   b4ce4:	4620      	mov	r0, r4
   b4ce6:	2101      	movs	r1, #1
   b4ce8:	f003 fe89 	bl	b89fe <digitalWrite>
    digitalWrite(puerto, HIGH);
   b4cec:	4620      	mov	r0, r4
   b4cee:	2101      	movs	r1, #1
   b4cf0:	f003 fe85 	bl	b89fe <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4cf4:	1c60      	adds	r0, r4, #1
   b4cf6:	b280      	uxth	r0, r0
   b4cf8:	2101      	movs	r1, #1
   b4cfa:	9001      	str	r0, [sp, #4]
   b4cfc:	f003 fe7f 	bl	b89fe <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4d00:	9801      	ldr	r0, [sp, #4]
   b4d02:	2101      	movs	r1, #1
}
   b4d04:	b002      	add	sp, #8
   b4d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b4d0a:	f003 be78 	b.w	b89fe <digitalWrite>

000b4d0e <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b4d0e:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b4d10:	b284      	uxth	r4, r0
   b4d12:	4620      	mov	r0, r4
   b4d14:	2100      	movs	r1, #0
   b4d16:	f003 fe72 	bl	b89fe <digitalWrite>
    digitalWrite(puerto, LOW);
   b4d1a:	4620      	mov	r0, r4
   b4d1c:	2100      	movs	r1, #0
   b4d1e:	f003 fe6e 	bl	b89fe <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4d22:	1c60      	adds	r0, r4, #1
   b4d24:	b280      	uxth	r0, r0
   b4d26:	2100      	movs	r1, #0
   b4d28:	9001      	str	r0, [sp, #4]
   b4d2a:	f003 fe68 	bl	b89fe <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4d2e:	9801      	ldr	r0, [sp, #4]
   b4d30:	2100      	movs	r1, #0
}
   b4d32:	b002      	add	sp, #8
   b4d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4d38:	f003 be61 	b.w	b89fe <digitalWrite>

000b4d3c <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b4d3c:	b510      	push	{r4, lr}
   b4d3e:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b4d40:	f7ff ffce 	bl	b4ce0 <_Z9pitidoON1i>
    delay(100);
   b4d44:	2064      	movs	r0, #100	; 0x64
   b4d46:	f003 fab3 	bl	b82b0 <delay>
    pitidoOFF1(puerto);
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f7ff ffdf 	bl	b4d0e <_Z10pitidoOFF1i>
    delay(100);
}
   b4d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4d54:	2064      	movs	r0, #100	; 0x64
   b4d56:	f003 baab 	b.w	b82b0 <delay>
	...

000b4d5c <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b4d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Serial.println("Actiaver LED");
    if (init)
   b4d5e:	4f28      	ldr	r7, [pc, #160]	; (b4e00 <_Z10activarLEDii+0xa4>)
   b4d60:	783b      	ldrb	r3, [r7, #0]
{
   b4d62:	4604      	mov	r4, r0
    if (init)
   b4d64:	b1a3      	cbz	r3, b4d90 <_Z10activarLEDii+0x34>
    {
        ledObject = ChainableLED(puerto, puerto + 1, 5);
   b4d66:	b2c9      	uxtb	r1, r1
   b4d68:	1c4a      	adds	r2, r1, #1
   b4d6a:	466d      	mov	r5, sp
   b4d6c:	2305      	movs	r3, #5
   b4d6e:	b2d2      	uxtb	r2, r2
   b4d70:	4628      	mov	r0, r5
   b4d72:	f002 fb4f 	bl	b7414 <_ZN12ChainableLEDC1Ehhh>
   b4d76:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4d7a:	4e22      	ldr	r6, [pc, #136]	; (b4e04 <_Z10activarLEDii+0xa8>)
   b4d7c:	e886 0003 	stmia.w	r6, {r0, r1}
   b4d80:	4628      	mov	r0, r5
   b4d82:	f002 fb54 	bl	b742e <_ZN12ChainableLEDD1Ev>
        ledObject.init();
   b4d86:	4630      	mov	r0, r6
   b4d88:	f002 fbf6 	bl	b7578 <_ZN12ChainableLED4initEv>
        init = false;
   b4d8c:	2300      	movs	r3, #0
   b4d8e:	703b      	strb	r3, [r7, #0]
    }

    switch (opcion)
   b4d90:	2c07      	cmp	r4, #7
   b4d92:	d82d      	bhi.n	b4df0 <_Z10activarLEDii+0x94>
   b4d94:	e8df f004 	tbb	[pc, r4]
   b4d98:	130e0904 	.word	0x130e0904
   b4d9c:	27221d18 	.word	0x27221d18

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4da0:	b003      	add	sp, #12
   b4da2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerde();
   b4da6:	f7ff be53 	b.w	b4a50 <_Z8ledVerdev>
}
   b4daa:	b003      	add	sp, #12
   b4dac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledRojo();
   b4db0:	f7ff be40 	b.w	b4a34 <_Z7ledRojov>
}
   b4db4:	b003      	add	sp, #12
   b4db6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAmarillo();
   b4dba:	f7ff be65 	b.w	b4a88 <_Z11ledAmarillov>
}
   b4dbe:	b003      	add	sp, #12
   b4dc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMorado();
   b4dc4:	f7ff be6e 	b.w	b4aa4 <_Z9ledMoradov>
}
   b4dc8:	b003      	add	sp, #12
   b4dca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzul();
   b4dce:	f7ff be4d 	b.w	b4a6c <_Z7ledAzulv>
}
   b4dd2:	b003      	add	sp, #12
   b4dd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledNaranja();
   b4dd8:	f7ff be72 	b.w	b4ac0 <_Z10ledNaranjav>
}
   b4ddc:	b003      	add	sp, #12
   b4dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink();
   b4de2:	f7ff bf6f 	b.w	b4cc4 <_Z8ledBlinkv>
}
   b4de6:	b003      	add	sp, #12
   b4de8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris();
   b4dec:	f7ff be84 	b.w	b4af8 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b4df0:	f003 fbf4 	bl	b85dc <_Z16_fetch_usbserialv>
   b4df4:	4904      	ldr	r1, [pc, #16]	; (b4e08 <_Z10activarLEDii+0xac>)
}
   b4df6:	b003      	add	sp, #12
   b4df8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b4dfc:	f003 b9ed 	b.w	b81da <_ZN5Print7printlnEPKc>
   b4e00:	2003df3f 	.word	0x2003df3f
   b4e04:	2003e690 	.word	0x2003e690
   b4e08:	000b9af6 	.word	0x000b9af6

000b4e0c <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b4e0c:	b538      	push	{r3, r4, r5, lr}
   b4e0e:	460c      	mov	r4, r1
   b4e10:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4e12:	2101      	movs	r1, #1
   b4e14:	b2a0      	uxth	r0, r4
   b4e16:	f003 fde1 	bl	b89dc <pinMode>

    switch (opcion)
   b4e1a:	b145      	cbz	r5, b4e2e <_Z15activarZumbadorii+0x22>
   b4e1c:	2d01      	cmp	r5, #1
   b4e1e:	d00b      	beq.n	b4e38 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4e20:	f003 fbdc 	bl	b85dc <_Z16_fetch_usbserialv>
        break;
    }
}
   b4e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4e28:	4906      	ldr	r1, [pc, #24]	; (b4e44 <_Z15activarZumbadorii+0x38>)
   b4e2a:	f003 b9d6 	b.w	b81da <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b4e2e:	4620      	mov	r0, r4
}
   b4e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b4e34:	f7ff bf54 	b.w	b4ce0 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b4e38:	4620      	mov	r0, r4
}
   b4e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b4e3e:	f7ff bf7d 	b.w	b4d3c <_Z12pitidoBlink1i>
   b4e42:	bf00      	nop
   b4e44:	000b9ae6 	.word	0x000b9ae6

000b4e48 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b4e48:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b4e4a:	b908      	cbnz	r0, b4e50 <_Z14apagarActuadorii+0x8>
   b4e4c:	f7ff bde4 	b.w	b4a18 <_Z9ledApagarv>
   b4e50:	2100      	movs	r1, #0
   b4e52:	b298      	uxth	r0, r3
   b4e54:	f003 bdd3 	b.w	b89fe <digitalWrite>

000b4e58 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b4e58:	4603      	mov	r3, r0
    if (id < 2)
   b4e5a:	2b01      	cmp	r3, #1
{
   b4e5c:	4608      	mov	r0, r1
   b4e5e:	4611      	mov	r1, r2
    if (id < 2)
   b4e60:	dc04      	bgt.n	b4e6c <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b4e62:	b90b      	cbnz	r3, b4e68 <_Z15actuadorHandleriii+0x10>
   b4e64:	f7ff bf7a 	b.w	b4d5c <_Z10activarLEDii>
   b4e68:	f7ff bfd0 	b.w	b4e0c <_Z15activarZumbadorii>
   b4e6c:	4770      	bx	lr
	...

000b4e70 <setup>:
{
   b4e70:	b510      	push	{r4, lr}
   b4e72:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4e74:	2400      	movs	r4, #0
  Particle.disconnect();
   b4e76:	a805      	add	r0, sp, #20
   b4e78:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4e7c:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4e80:	f003 fabc 	bl	b83fc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4e84:	4825      	ldr	r0, [pc, #148]	; (b4f1c <setup+0xac>)
   b4e86:	4623      	mov	r3, r4
   b4e88:	4622      	mov	r2, r4
   b4e8a:	4621      	mov	r1, r4
   b4e8c:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4e8e:	4c24      	ldr	r4, [pc, #144]	; (b4f20 <setup+0xb0>)
   b4e90:	f002 feb4 	bl	b7bfc <network_off>
  Serial.begin(9600);
   b4e94:	f003 fba2 	bl	b85dc <_Z16_fetch_usbserialv>
   b4e98:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e9c:	f003 fb92 	bl	b85c4 <_ZN9USBSerial5beginEl>
   b4ea0:	7821      	ldrb	r1, [r4, #0]
   b4ea2:	f3bf 8f5b 	dmb	ish
   b4ea6:	f011 0101 	ands.w	r1, r1, #1
   b4eaa:	d10b      	bne.n	b4ec4 <setup+0x54>
   b4eac:	4620      	mov	r0, r4
   b4eae:	9103      	str	r1, [sp, #12]
   b4eb0:	f7ff f902 	bl	b40b8 <__cxa_guard_acquire>
   b4eb4:	9903      	ldr	r1, [sp, #12]
   b4eb6:	b128      	cbz	r0, b4ec4 <setup+0x54>
   b4eb8:	481a      	ldr	r0, [pc, #104]	; (b4f24 <setup+0xb4>)
   b4eba:	f002 ff6b 	bl	b7d94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	f7ff f8ff 	bl	b40c2 <__cxa_guard_release>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4ec4:	2401      	movs	r4, #1

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4ec6:	4817      	ldr	r0, [pc, #92]	; (b4f24 <setup+0xb4>)
   b4ec8:	f002 ff6e 	bl	b7da8 <_ZN8SPIClass5beginEv>
   b4ecc:	4623      	mov	r3, r4
   b4ece:	223c      	movs	r2, #60	; 0x3c
   b4ed0:	2102      	movs	r1, #2
   b4ed2:	9400      	str	r4, [sp, #0]
   b4ed4:	4814      	ldr	r0, [pc, #80]	; (b4f28 <setup+0xb8>)
   b4ed6:	f001 ffa9 	bl	b6e2c <_ZN16Adafruit_SSD13065beginEhhbb>
  mfrc522.PCD_Init();
   b4eda:	4814      	ldr	r0, [pc, #80]	; (b4f2c <setup+0xbc>)
   b4edc:	f001 fa3b 	bl	b6356 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b4ee0:	4a13      	ldr	r2, [pc, #76]	; (b4f30 <setup+0xc0>)
  ledObject.init();
   b4ee2:	4814      	ldr	r0, [pc, #80]	; (b4f34 <setup+0xc4>)
    key.keyByte[i] = 0xFF;
   b4ee4:	21ff      	movs	r1, #255	; 0xff
   b4ee6:	7011      	strb	r1, [r2, #0]
   b4ee8:	7051      	strb	r1, [r2, #1]
   b4eea:	7091      	strb	r1, [r2, #2]
   b4eec:	70d1      	strb	r1, [r2, #3]
   b4eee:	7111      	strb	r1, [r2, #4]
   b4ef0:	7151      	strb	r1, [r2, #5]
  ledObject.init();
   b4ef2:	f002 fb41 	bl	b7578 <_ZN12ChainableLED4initEv>
  pinMode(Zumbador_PIN, OUTPUT);
   b4ef6:	4621      	mov	r1, r4
   b4ef8:	2006      	movs	r0, #6
   b4efa:	f003 fd6f 	bl	b89dc <pinMode>
  numBloque++;
   b4efe:	4a0e      	ldr	r2, [pc, #56]	; (b4f38 <setup+0xc8>)
  bloques[numBloque] = bloque;
   b4f00:	490e      	ldr	r1, [pc, #56]	; (b4f3c <setup+0xcc>)
  numBloque++;
   b4f02:	6813      	ldr	r3, [r2, #0]
   b4f04:	4423      	add	r3, r4
   b4f06:	6013      	str	r3, [r2, #0]
  bloques[numBloque] = bloque;
   b4f08:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f0c:	4353      	muls	r3, r2
   b4f0e:	18c8      	adds	r0, r1, r3
   b4f10:	2200      	movs	r2, #0
   b4f12:	50ca      	str	r2, [r1, r3]
   b4f14:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
}
   b4f18:	b008      	add	sp, #32
   b4f1a:	bd10      	pop	{r4, pc}
   b4f1c:	2003e718 	.word	0x2003e718
   b4f20:	2003dfd0 	.word	0x2003dfd0
   b4f24:	2003dfd4 	.word	0x2003dfd4
   b4f28:	2003e60c 	.word	0x2003e60c
   b4f2c:	2003e698 	.word	0x2003e698
   b4f30:	2003e688 	.word	0x2003e688
   b4f34:	2003e690 	.word	0x2003e690
   b4f38:	2003df40 	.word	0x2003df40
   b4f3c:	2003dff4 	.word	0x2003dff4

000b4f40 <_Z13isValidSensori>:
{
   b4f40:	b570      	push	{r4, r5, r6, lr}
  Bloque bloque = bloques[numBloque];
   b4f42:	4b12      	ldr	r3, [pc, #72]	; (b4f8c <_Z13isValidSensori+0x4c>)
   b4f44:	4e12      	ldr	r6, [pc, #72]	; (b4f90 <_Z13isValidSensori+0x50>)
   b4f46:	681c      	ldr	r4, [r3, #0]
   b4f48:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f4c:	4354      	muls	r4, r2
{
   b4f4e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
  Bloque bloque = bloques[numBloque];
   b4f52:	1931      	adds	r1, r6, r4
{
   b4f54:	4605      	mov	r5, r0
  Bloque bloque = bloques[numBloque];
   b4f56:	a801      	add	r0, sp, #4
   b4f58:	f004 fae8 	bl	b952c <memcpy>
   b4f5c:	5931      	ldr	r1, [r6, r4]
  for (int i = 0; i < bloque.numSensores; i++)
   b4f5e:	ab01      	add	r3, sp, #4
   b4f60:	2200      	movs	r2, #0
   b4f62:	428a      	cmp	r2, r1
   b4f64:	da0f      	bge.n	b4f86 <_Z13isValidSensori+0x46>
    if (bloque.sensores[i].id == deviceID)
   b4f66:	6858      	ldr	r0, [r3, #4]
   b4f68:	42a8      	cmp	r0, r5
   b4f6a:	f103 0310 	add.w	r3, r3, #16
   b4f6e:	d108      	bne.n	b4f82 <_Z13isValidSensori+0x42>
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4f70:	f003 fb34 	bl	b85dc <_Z16_fetch_usbserialv>
   b4f74:	4907      	ldr	r1, [pc, #28]	; (b4f94 <_Z13isValidSensori+0x54>)
   b4f76:	f003 f930 	bl	b81da <_ZN5Print7printlnEPKc>
   b4f7a:	2000      	movs	r0, #0
}
   b4f7c:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   b4f80:	bd70      	pop	{r4, r5, r6, pc}
  for (int i = 0; i < bloque.numSensores; i++)
   b4f82:	3201      	adds	r2, #1
   b4f84:	e7ed      	b.n	b4f62 <_Z13isValidSensori+0x22>
  return true;
   b4f86:	2001      	movs	r0, #1
   b4f88:	e7f8      	b.n	b4f7c <_Z13isValidSensori+0x3c>
   b4f8a:	bf00      	nop
   b4f8c:	2003df40 	.word	0x2003df40
   b4f90:	2003dff4 	.word	0x2003dff4
   b4f94:	000b9b05 	.word	0x000b9b05

000b4f98 <_Z11isNewSensori>:
{
   b4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4f9a:	4b11      	ldr	r3, [pc, #68]	; (b4fe0 <_Z11isNewSensori+0x48>)
   b4f9c:	4a11      	ldr	r2, [pc, #68]	; (b4fe4 <_Z11isNewSensori+0x4c>)
   b4f9e:	681e      	ldr	r6, [r3, #0]
   b4fa0:	4694      	mov	ip, r2
   b4fa2:	2300      	movs	r3, #0
   b4fa4:	429e      	cmp	r6, r3
   b4fa6:	db17      	blt.n	b4fd8 <_Z11isNewSensori+0x40>
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4fa8:	6817      	ldr	r7, [r2, #0]
   b4faa:	4615      	mov	r5, r2
   b4fac:	2100      	movs	r1, #0
   b4fae:	428f      	cmp	r7, r1
   b4fb0:	dd0e      	ble.n	b4fd0 <_Z11isNewSensori+0x38>
      if (bloques[i].sensores[j].id == deviceID)
   b4fb2:	686c      	ldr	r4, [r5, #4]
   b4fb4:	4284      	cmp	r4, r0
   b4fb6:	f105 0510 	add.w	r5, r5, #16
   b4fba:	d107      	bne.n	b4fcc <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4fbc:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4fc0:	4353      	muls	r3, r2
   b4fc2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4fc6:	4463      	add	r3, ip
   b4fc8:	6918      	ldr	r0, [r3, #16]
}
   b4fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4fcc:	3101      	adds	r1, #1
   b4fce:	e7ee      	b.n	b4fae <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4fd0:	3301      	adds	r3, #1
   b4fd2:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4fd6:	e7e5      	b.n	b4fa4 <_Z11isNewSensori+0xc>
  return -1;
   b4fd8:	f04f 30ff 	mov.w	r0, #4294967295
   b4fdc:	e7f5      	b.n	b4fca <_Z11isNewSensori+0x32>
   b4fde:	bf00      	nop
   b4fe0:	2003df40 	.word	0x2003df40
   b4fe4:	2003dff4 	.word	0x2003dff4

000b4fe8 <_Z15isValidActuadorii>:
{
   b4fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4fec:	4d18      	ldr	r5, [pc, #96]	; (b5050 <_Z15isValidActuadorii+0x68>)
  for (int i = 0; i <= numBloque; i++)
   b4fee:	4b19      	ldr	r3, [pc, #100]	; (b5054 <_Z15isValidActuadorii+0x6c>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4ff0:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4ff4:	681f      	ldr	r7, [r3, #0]
{
   b4ff6:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4ff8:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4ffa:	2400      	movs	r4, #0
   b4ffc:	42a7      	cmp	r7, r4
   b4ffe:	db21      	blt.n	b5044 <_Z15isValidActuadorii+0x5c>
    if ( i == numBloque ) 
   b5000:	d10e      	bne.n	b5020 <_Z15isValidActuadorii+0x38>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b5002:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b5006:	461a      	mov	r2, r3
   b5008:	2600      	movs	r6, #0
   b500a:	45b0      	cmp	r8, r6
   b500c:	dd08      	ble.n	b5020 <_Z15isValidActuadorii+0x38>
        if (actuador.condicion == deviceState && actuador.id == actuadorID)
   b500e:	e9d2 9052 	ldrd	r9, r0, [r2, #328]	; 0x148
   b5012:	4560      	cmp	r0, ip
   b5014:	d101      	bne.n	b501a <_Z15isValidActuadorii+0x32>
   b5016:	4589      	cmp	r9, r1
   b5018:	d017      	beq.n	b504a <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b501a:	3601      	adds	r6, #1
   b501c:	3214      	adds	r2, #20
   b501e:	e7f4      	b.n	b500a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b5020:	2f01      	cmp	r7, #1
   b5022:	d10b      	bne.n	b503c <_Z15isValidActuadorii+0x54>
   b5024:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5026:	2200      	movs	r2, #0
   b5028:	4596      	cmp	lr, r2
   b502a:	dd07      	ble.n	b503c <_Z15isValidActuadorii+0x54>
        if (actuador.id == actuadorID)
   b502c:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b5030:	4281      	cmp	r1, r0
   b5032:	f106 0614 	add.w	r6, r6, #20
   b5036:	d008      	beq.n	b504a <_Z15isValidActuadorii+0x62>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5038:	3201      	adds	r2, #1
   b503a:	e7f5      	b.n	b5028 <_Z15isValidActuadorii+0x40>
  for (int i = 0; i <= numBloque; i++)
   b503c:	3401      	adds	r4, #1
   b503e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b5042:	e7db      	b.n	b4ffc <_Z15isValidActuadorii+0x14>
  return true;
   b5044:	2001      	movs	r0, #1
}
   b5046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return false;
   b504a:	2000      	movs	r0, #0
   b504c:	e7fb      	b.n	b5046 <_Z15isValidActuadorii+0x5e>
   b504e:	bf00      	nop
   b5050:	2003dff4 	.word	0x2003dff4
   b5054:	2003df40 	.word	0x2003df40

000b5058 <_Z13isNewActuadori>:
{
   b5058:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b505a:	4b0f      	ldr	r3, [pc, #60]	; (b5098 <_Z13isNewActuadori+0x40>)
   b505c:	681e      	ldr	r6, [r3, #0]
   b505e:	4b0f      	ldr	r3, [pc, #60]	; (b509c <_Z13isNewActuadori+0x44>)
   b5060:	2100      	movs	r1, #0
   b5062:	428e      	cmp	r6, r1
   b5064:	db13      	blt.n	b508e <_Z13isNewActuadori+0x36>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5066:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
   b506a:	461a      	mov	r2, r3
   b506c:	2400      	movs	r4, #0
   b506e:	42a7      	cmp	r7, r4
   b5070:	dd09      	ble.n	b5086 <_Z13isNewActuadori+0x2e>
      Actuador actuador = bloques[j].actuadores[i];
   b5072:	f8d2 c148 	ldr.w	ip, [r2, #328]	; 0x148
      if (actuador.id == deviceID)
   b5076:	4584      	cmp	ip, r0
   b5078:	f102 0214 	add.w	r2, r2, #20
      Actuador actuador = bloques[j].actuadores[i];
   b507c:	f8d2 5140 	ldr.w	r5, [r2, #320]	; 0x140
      if (actuador.id == deviceID)
   b5080:	d007      	beq.n	b5092 <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5082:	3401      	adds	r4, #1
   b5084:	e7f3      	b.n	b506e <_Z13isNewActuadori+0x16>
  for (int j = 0; j <= numBloque; j++)
   b5086:	3101      	adds	r1, #1
   b5088:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b508c:	e7e9      	b.n	b5062 <_Z13isNewActuadori+0xa>
  return -1;
   b508e:	f04f 35ff 	mov.w	r5, #4294967295
}
   b5092:	4628      	mov	r0, r5
   b5094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5096:	bf00      	nop
   b5098:	2003df40 	.word	0x2003df40
   b509c:	2003dff4 	.word	0x2003dff4

000b50a0 <_Z14isActuadorDualii>:
{
   b50a0:	b530      	push	{r4, r5, lr}
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50a2:	4b0c      	ldr	r3, [pc, #48]	; (b50d4 <_Z14isActuadorDualii+0x34>)
   b50a4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b50a8:	fb02 3101 	mla	r1, r2, r1, r3
   b50ac:	2200      	movs	r2, #0
   b50ae:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b50b2:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50b4:	4294      	cmp	r4, r2
   b50b6:	dd08      	ble.n	b50ca <_Z14isActuadorDualii+0x2a>
    if (bloques[bloque].actuadores[i].id == deviceID)
   b50b8:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b50bc:	4285      	cmp	r5, r0
   b50be:	d101      	bne.n	b50c4 <_Z14isActuadorDualii+0x24>
    if (contador > 1)
   b50c0:	b92b      	cbnz	r3, b50ce <_Z14isActuadorDualii+0x2e>
   b50c2:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b50c4:	3201      	adds	r2, #1
   b50c6:	3114      	adds	r1, #20
   b50c8:	e7f4      	b.n	b50b4 <_Z14isActuadorDualii+0x14>
  return false;
   b50ca:	2000      	movs	r0, #0
}
   b50cc:	bd30      	pop	{r4, r5, pc}
      return true;
   b50ce:	4618      	mov	r0, r3
   b50d0:	e7fc      	b.n	b50cc <_Z14isActuadorDualii+0x2c>
   b50d2:	bf00      	nop
   b50d4:	2003dff4 	.word	0x2003dff4

000b50d8 <_Z9resetModev>:
  IF_pasado = false;
   b50d8:	4a12      	ldr	r2, [pc, #72]	; (b5124 <_Z9resetModev+0x4c>)
   b50da:	2300      	movs	r3, #0
   b50dc:	7013      	strb	r3, [r2, #0]
  THEN_pasado = false;
   b50de:	4a12      	ldr	r2, [pc, #72]	; (b5128 <_Z9resetModev+0x50>)
   b50e0:	7013      	strb	r3, [r2, #0]
  ELSE_pasado = false;
   b50e2:	4a12      	ldr	r2, [pc, #72]	; (b512c <_Z9resetModev+0x54>)
   b50e4:	7013      	strb	r3, [r2, #0]
  numBloque = -1;
   b50e6:	4a12      	ldr	r2, [pc, #72]	; (b5130 <_Z9resetModev+0x58>)
   b50e8:	f04f 31ff 	mov.w	r1, #4294967295
   b50ec:	6011      	str	r1, [r2, #0]
  numCondicionalesBloque = 0;
   b50ee:	4a11      	ldr	r2, [pc, #68]	; (b5134 <_Z9resetModev+0x5c>)
   b50f0:	6013      	str	r3, [r2, #0]
  numSensoresBloque = 0;
   b50f2:	4a11      	ldr	r2, [pc, #68]	; (b5138 <_Z9resetModev+0x60>)
   b50f4:	6013      	str	r3, [r2, #0]
  numActuadoresBloque = 0;
   b50f6:	4a11      	ldr	r2, [pc, #68]	; (b513c <_Z9resetModev+0x64>)
   b50f8:	6013      	str	r3, [r2, #0]
  bloques[0] = nuevoBloque;
   b50fa:	4a11      	ldr	r2, [pc, #68]	; (b5140 <_Z9resetModev+0x68>)
   b50fc:	6013      	str	r3, [r2, #0]
   b50fe:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
  haveSensor = false;
   b5102:	4a10      	ldr	r2, [pc, #64]	; (b5144 <_Z9resetModev+0x6c>)
   b5104:	7013      	strb	r3, [r2, #0]
  puertoDigital = 3;
   b5106:	4a10      	ldr	r2, [pc, #64]	; (b5148 <_Z9resetModev+0x70>)
   b5108:	2103      	movs	r1, #3
   b510a:	6011      	str	r1, [r2, #0]
  puertoAnalogico = 0;
   b510c:	4a0f      	ldr	r2, [pc, #60]	; (b514c <_Z9resetModev+0x74>)
   b510e:	6013      	str	r3, [r2, #0]
  if ( MODE == 1 ) {
   b5110:	4b0f      	ldr	r3, [pc, #60]	; (b5150 <_Z9resetModev+0x78>)
   b5112:	681b      	ldr	r3, [r3, #0]
   b5114:	2b01      	cmp	r3, #1
   b5116:	d102      	bne.n	b511e <_Z9resetModev+0x46>
    init = true;
   b5118:	4a0e      	ldr	r2, [pc, #56]	; (b5154 <_Z9resetModev+0x7c>)
   b511a:	7013      	strb	r3, [r2, #0]
}
   b511c:	4770      	bx	lr
   b511e:	f7fe bfd3 	b.w	b40c8 <_Z9resetModev.part.0>
   b5122:	bf00      	nop
   b5124:	2003dfdd 	.word	0x2003dfdd
   b5128:	2003dff0 	.word	0x2003dff0
   b512c:	2003dfdc 	.word	0x2003dfdc
   b5130:	2003df40 	.word	0x2003df40
   b5134:	2003e6ac 	.word	0x2003e6ac
   b5138:	2003e6b0 	.word	0x2003e6b0
   b513c:	2003e6a8 	.word	0x2003e6a8
   b5140:	2003dff4 	.word	0x2003dff4
   b5144:	2003e680 	.word	0x2003e680
   b5148:	2003df44 	.word	0x2003df44
   b514c:	2003e6b4 	.word	0x2003e6b4
   b5150:	2003dfe0 	.word	0x2003dfe0
   b5154:	2003df3f 	.word	0x2003df3f

000b5158 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b5158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b515c:	4c16      	ldr	r4, [pc, #88]	; (b51b8 <_Z18ejecutarEvaluacionbi+0x60>)
   b515e:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5162:	fb03 4401 	mla	r4, r3, r1, r4
   b5166:	4607      	mov	r7, r0
   b5168:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b516a:	2600      	movs	r6, #0
   b516c:	46a1      	mov	r9, r4
   b516e:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b5172:	42b3      	cmp	r3, r6
   b5174:	dd1c      	ble.n	b51b0 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    // Serial.printlnf("Actuandor: %d , %s", actuador.id, actuador.evaluate ? "True" : "False");
    if (evaluacion == actuador.evaluate)
   b5176:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b517a:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b517e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5182:	42bb      	cmp	r3, r7
   b5184:	d107      	bne.n	b5196 <_Z18ejecutarEvaluacionbi+0x3e>
    {
      // Serial.println("ActivarActuador");
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5186:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b518a:	4640      	mov	r0, r8
   b518c:	f7ff fe64 	bl	b4e58 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5190:	3601      	adds	r6, #1
   b5192:	3414      	adds	r4, #20
   b5194:	e7eb      	b.n	b516e <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b5196:	4629      	mov	r1, r5
   b5198:	4640      	mov	r0, r8
   b519a:	9201      	str	r2, [sp, #4]
   b519c:	f7ff ff80 	bl	b50a0 <_Z14isActuadorDualii>
   b51a0:	9a01      	ldr	r2, [sp, #4]
   b51a2:	2800      	cmp	r0, #0
   b51a4:	d1f4      	bne.n	b5190 <_Z18ejecutarEvaluacionbi+0x38>
      {
        // Serial.println("ApagarActuador");
        apagarActuador(actuador.id, actuador.puerto);
   b51a6:	4611      	mov	r1, r2
   b51a8:	4640      	mov	r0, r8
   b51aa:	f7ff fe4d 	bl	b4e48 <_Z14apagarActuadorii>
   b51ae:	e7ef      	b.n	b5190 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b51b0:	b003      	add	sp, #12
   b51b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b51b6:	bf00      	nop
   b51b8:	2003dff4 	.word	0x2003dff4

000b51bc <loop>:

void loop()
{
   b51bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b51c0:	4894      	ldr	r0, [pc, #592]	; (b5414 <loop+0x258>)
{
   b51c2:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
  if (mfrc522.PICC_IsNewCardPresent())
   b51c6:	f001 f9f1 	bl	b65ac <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b51ca:	b1b8      	cbz	r0, b51fc <loop+0x40>
  {
    Serial.print("Tag Detectada --> ");
   b51cc:	f003 fa06 	bl	b85dc <_Z16_fetch_usbserialv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }

    display.clearDisplay();
   b51d0:	4c91      	ldr	r4, [pc, #580]	; (b5418 <loop+0x25c>)
    Serial.print("Tag Detectada --> ");
   b51d2:	4992      	ldr	r1, [pc, #584]	; (b541c <loop+0x260>)
   b51d4:	f002 ffee 	bl	b81b4 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b51d8:	488e      	ldr	r0, [pc, #568]	; (b5414 <loop+0x258>)
   b51da:	f001 fbb8 	bl	b694e <_ZN7MFRC52219PICC_ReadCardSerialEv>
    display.clearDisplay();
   b51de:	4620      	mov	r0, r4
   b51e0:	f001 fe16 	bl	b6e10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b51e4:	2101      	movs	r1, #1
   b51e6:	4620      	mov	r0, r4
   b51e8:	f000 ff4d 	bl	b6086 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b51ec:	2100      	movs	r1, #0
   b51ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b51f2:	e9c4 1304 	strd	r1, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b51f6:	488a      	ldr	r0, [pc, #552]	; (b5420 <loop+0x264>)
   b51f8:	f7ff fb5c 	bl	b48b4 <_Z8getTagIDPi>
  }


  // Modo KIDS
  if ( MODE == 0 ) 
   b51fc:	f8df b268 	ldr.w	fp, [pc, #616]	; b5468 <loop+0x2ac>
  {
    
    // Cambio de modo
    if (tagInfo[0] == 6 ) {
   b5200:	4c87      	ldr	r4, [pc, #540]	; (b5420 <loop+0x264>)
  if ( MODE == 0 ) 
   b5202:	f8db 2000 	ldr.w	r2, [fp]
    if (tagInfo[0] == 6 ) {
   b5206:	6823      	ldr	r3, [r4, #0]
  if ( MODE == 0 ) 
   b5208:	2a00      	cmp	r2, #0
   b520a:	f040 8094 	bne.w	b5336 <loop+0x17a>
    if (tagInfo[0] == 6 ) {
   b520e:	2b06      	cmp	r3, #6

      if (tagInfo[1] == 0 ) {
   b5210:	6865      	ldr	r5, [r4, #4]
    if (tagInfo[0] == 6 ) {
   b5212:	d116      	bne.n	b5242 <loop+0x86>
      if (tagInfo[1] == 0 ) {
   b5214:	b97d      	cbnz	r5, b5236 <loop+0x7a>

        Serial.println("Modo KIDS detectado");
   b5216:	f003 f9e1 	bl	b85dc <_Z16_fetch_usbserialv>
   b521a:	4982      	ldr	r1, [pc, #520]	; (b5424 <loop+0x268>)
        MODE = 0;

      } else if (tagInfo[1] == 1) {

        Serial.println("Modo SUCRE detectado");
   b521c:	f002 ffdd 	bl	b81da <_ZN5Print7printlnEPKc>
        MODE = 1;
   b5220:	f8cb 5000 	str.w	r5, [fp]

      }

      resetMode();
   b5224:	f7ff ff58 	bl	b50d8 <_Z9resetModev>
      }

    }

    // Mostramos la información que hayamos actualizado de la pantalla.
    display.display();
   b5228:	487b      	ldr	r0, [pc, #492]	; (b5418 <loop+0x25c>)
            }
          }
        }
      } */
  }
}
   b522a:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b522e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    display.display();
   b5232:	f002 b855 	b.w	b72e0 <_ZN16Adafruit_SSD13067displayEv>
      } else if (tagInfo[1] == 1) {
   b5236:	2d01      	cmp	r5, #1
   b5238:	d1f4      	bne.n	b5224 <loop+0x68>
        Serial.println("Modo SUCRE detectado");
   b523a:	f003 f9cf 	bl	b85dc <_Z16_fetch_usbserialv>
   b523e:	497a      	ldr	r1, [pc, #488]	; (b5428 <loop+0x26c>)
   b5240:	e7ec      	b.n	b521c <loop+0x60>
      id = tagInfo[0];
   b5242:	4e7a      	ldr	r6, [pc, #488]	; (b542c <loop+0x270>)
      tipo = tagInfo[1];
   b5244:	4f7a      	ldr	r7, [pc, #488]	; (b5430 <loop+0x274>)
      estado = tagInfo[2];
   b5246:	f8df 8224 	ldr.w	r8, [pc, #548]	; b546c <loop+0x2b0>
   b524a:	68a2      	ldr	r2, [r4, #8]
      tipo = tagInfo[1];
   b524c:	603d      	str	r5, [r7, #0]
      if (id >= 2) {
   b524e:	2b01      	cmp	r3, #1
   b5250:	4d78      	ldr	r5, [pc, #480]	; (b5434 <loop+0x278>)
      id = tagInfo[0];
   b5252:	6033      	str	r3, [r6, #0]
      estado = tagInfo[2];
   b5254:	f8c8 2000 	str.w	r2, [r8]
      if (id >= 2) {
   b5258:	dd1a      	ble.n	b5290 <loop+0xd4>
        Serial.println("Sensor detectado: ");
   b525a:	f003 f9bf 	bl	b85dc <_Z16_fetch_usbserialv>
   b525e:	4976      	ldr	r1, [pc, #472]	; (b5438 <loop+0x27c>)
   b5260:	f002 ffbb 	bl	b81da <_ZN5Print7printlnEPKc>
        tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5264:	683a      	ldr	r2, [r7, #0]
        bloques[0].sensores[0] = sensor;
   b5266:	4b75      	ldr	r3, [pc, #468]	; (b543c <loop+0x280>)
        sensor.id = id;
   b5268:	6831      	ldr	r1, [r6, #0]
        bloques[0].sensores[0] = sensor;
   b526a:	6059      	str	r1, [r3, #4]
        tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b526c:	2a00      	cmp	r2, #0
   b526e:	bf18      	it	ne
   b5270:	2202      	movne	r2, #2
        bloques[0].sensores[0] = sensor;
   b5272:	611a      	str	r2, [r3, #16]
        bloques[0].numSensores++;
   b5274:	681a      	ldr	r2, [r3, #0]
   b5276:	3201      	adds	r2, #1
   b5278:	601a      	str	r2, [r3, #0]
        numSensoresBloque++;
   b527a:	682b      	ldr	r3, [r5, #0]
   b527c:	3301      	adds	r3, #1
   b527e:	602b      	str	r3, [r5, #0]
      pitidoBlink0();
   b5280:	f7ff fc8a 	bl	b4b98 <_Z12pitidoBlink0v>
        displayPrint0(id); // Actualizamos la información de la pantalla con el nuevo sensor.
   b5284:	6830      	ldr	r0, [r6, #0]
   b5286:	f7ff f987 	bl	b4598 <_Z13displayPrint0i>
        tagInfo[0] = -1;
   b528a:	f04f 33ff 	mov.w	r3, #4294967295
   b528e:	6023      	str	r3, [r4, #0]
      if ( numSensoresBloque > 0) {
   b5290:	682b      	ldr	r3, [r5, #0]
   b5292:	f8df 91dc 	ldr.w	r9, [pc, #476]	; b5470 <loop+0x2b4>
   b5296:	2b00      	cmp	r3, #0
   b5298:	dd4a      	ble.n	b5330 <loop+0x174>
        valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b529a:	4d68      	ldr	r5, [pc, #416]	; (b543c <loop+0x280>)
   b529c:	2101      	movs	r1, #1
   b529e:	692a      	ldr	r2, [r5, #16]
   b52a0:	6868      	ldr	r0, [r5, #4]
   b52a2:	f7ff f8fb 	bl	b449c <_Z10leerSensoriii>
   b52a6:	4b66      	ldr	r3, [pc, #408]	; (b5440 <loop+0x284>)
   b52a8:	7018      	strb	r0, [r3, #0]
        valor ? Serial.println("TRUE") : Serial.println("FALSE");
   b52aa:	2800      	cmp	r0, #0
   b52ac:	d03c      	beq.n	b5328 <loop+0x16c>
   b52ae:	f003 f995 	bl	b85dc <_Z16_fetch_usbserialv>
   b52b2:	4964      	ldr	r1, [pc, #400]	; (b5444 <loop+0x288>)
   b52b4:	f002 ff91 	bl	b81da <_ZN5Print7printlnEPKc>
        if (tagInfo[0] == 0 || tagInfo[0] == 1) {
   b52b8:	6823      	ldr	r3, [r4, #0]
   b52ba:	2b01      	cmp	r3, #1
   b52bc:	d820      	bhi.n	b5300 <loop+0x144>
          Serial.println("Actuador detectado: ");
   b52be:	f003 f98d 	bl	b85dc <_Z16_fetch_usbserialv>
   b52c2:	4961      	ldr	r1, [pc, #388]	; (b5448 <loop+0x28c>)
   b52c4:	f002 ff89 	bl	b81da <_ZN5Print7printlnEPKc>
          tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b52c8:	683b      	ldr	r3, [r7, #0]
          actuador.id = id;
   b52ca:	6832      	ldr	r2, [r6, #0]
          bloques[0].actuadores[0] = actuador;
   b52cc:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
          tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b52d0:	2b00      	cmp	r3, #0
   b52d2:	bf0c      	ite	eq
   b52d4:	2302      	moveq	r3, #2
   b52d6:	2304      	movne	r3, #4
          bloques[0].actuadores[0] = actuador;
   b52d8:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
          bloques[0].numActuadores++;
   b52dc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b52e0:	3301      	adds	r3, #1
   b52e2:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
          numActuadoresBloque++;
   b52e6:	f8d9 3000 	ldr.w	r3, [r9]
   b52ea:	3301      	adds	r3, #1
   b52ec:	f8c9 3000 	str.w	r3, [r9]
   b52f0:	f7ff fc52 	bl	b4b98 <_Z12pitidoBlink0v>
          displayPrint0(id); // Actualizamos la información de la pantalla con el nuevo sensor.
   b52f4:	6830      	ldr	r0, [r6, #0]
   b52f6:	f7ff f94f 	bl	b4598 <_Z13displayPrint0i>
          tagInfo[0] = -1;
   b52fa:	f04f 33ff 	mov.w	r3, #4294967295
   b52fe:	6023      	str	r3, [r4, #0]
      if (numActuadoresBloque > 0)
   b5300:	f8d9 3000 	ldr.w	r3, [r9]
   b5304:	2b00      	cmp	r3, #0
   b5306:	dd8f      	ble.n	b5228 <loop+0x6c>
          activarActuador(bloques[0].actuadores[0], estado, valor);
   b5308:	4a4d      	ldr	r2, [pc, #308]	; (b5440 <loop+0x284>)
   b530a:	4b4c      	ldr	r3, [pc, #304]	; (b543c <loop+0x280>)
   b530c:	7812      	ldrb	r2, [r2, #0]
   b530e:	9202      	str	r2, [sp, #8]
   b5310:	f8d8 2000 	ldr.w	r2, [r8]
   b5314:	9201      	str	r2, [sp, #4]
   b5316:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
   b531a:	9200      	str	r2, [sp, #0]
   b531c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
   b5320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5322:	f7ff fc7d 	bl	b4c20 <_Z15activarActuador8ACTUADORib>
   b5326:	e77f      	b.n	b5228 <loop+0x6c>
        valor ? Serial.println("TRUE") : Serial.println("FALSE");
   b5328:	f003 f958 	bl	b85dc <_Z16_fetch_usbserialv>
   b532c:	4947      	ldr	r1, [pc, #284]	; (b544c <loop+0x290>)
   b532e:	e7c1      	b.n	b52b4 <loop+0xf8>
          ledApagar();
   b5330:	f7ff fb72 	bl	b4a18 <_Z9ledApagarv>
   b5334:	e7e4      	b.n	b5300 <loop+0x144>
    if (tagInfo[0] != -1)
   b5336:	3301      	adds	r3, #1
   b5338:	4f45      	ldr	r7, [pc, #276]	; (b5450 <loop+0x294>)
   b533a:	f000 8110 	beq.w	b555e <loop+0x3a2>
      int deviceID = tagInfo[2];
   b533e:	68a6      	ldr	r6, [r4, #8]
      Serial.print("Ejecutando tag --> ");
   b5340:	4d3e      	ldr	r5, [pc, #248]	; (b543c <loop+0x280>)
   b5342:	f8df 90f0 	ldr.w	r9, [pc, #240]	; b5434 <loop+0x278>
   b5346:	f8df 8128 	ldr.w	r8, [pc, #296]	; b5470 <loop+0x2b4>
   b534a:	f8df a128 	ldr.w	sl, [pc, #296]	; b5474 <loop+0x2b8>
   b534e:	f003 f945 	bl	b85dc <_Z16_fetch_usbserialv>
   b5352:	4940      	ldr	r1, [pc, #256]	; (b5454 <loop+0x298>)
   b5354:	f002 ff2e 	bl	b81b4 <_ZN5Print5printEPKc>
      switch (tagInfo[0]) {
   b5358:	6823      	ldr	r3, [r4, #0]
   b535a:	2b06      	cmp	r3, #6
   b535c:	f200 81da 	bhi.w	b5714 <loop+0x558>
   b5360:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5364:	008c0007 	.word	0x008c0007
   b5368:	0174014b 	.word	0x0174014b
   b536c:	01b5019b 	.word	0x01b5019b
   b5370:	01c6      	.short	0x01c6
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b5372:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5478 <loop+0x2bc>
        Serial.println("Sensor detectado");
   b5376:	f003 f931 	bl	b85dc <_Z16_fetch_usbserialv>
   b537a:	4937      	ldr	r1, [pc, #220]	; (b5458 <loop+0x29c>)
   b537c:	f002 ff2d 	bl	b81da <_ZN5Print7printlnEPKc>
        if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(deviceID) ) {
   b5380:	f898 3000 	ldrb.w	r3, [r8]
   b5384:	b383      	cbz	r3, b53e8 <loop+0x22c>
   b5386:	f8d9 2000 	ldr.w	r2, [r9]
   b538a:	f8da 3000 	ldr.w	r3, [sl]
   b538e:	429a      	cmp	r2, r3
   b5390:	d13b      	bne.n	b540a <loop+0x24e>
   b5392:	4630      	mov	r0, r6
   b5394:	f7ff fdd4 	bl	b4f40 <_Z13isValidSensori>
   b5398:	b318      	cbz	r0, b53e2 <loop+0x226>
          int puerto = isNewSensor(deviceID);
   b539a:	4630      	mov	r0, r6
   b539c:	f7ff fdfc 	bl	b4f98 <_Z11isNewSensori>
          if (puerto == -1)
   b53a0:	1c42      	adds	r2, r0, #1
   b53a2:	d104      	bne.n	b53ae <loop+0x1f2>
            puerto = asignarPuerto(tagInfo[1]);
   b53a4:	6860      	ldr	r0, [r4, #4]
   b53a6:	f7ff fad5 	bl	b4954 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b53aa:	1c43      	adds	r3, r0, #1
   b53ac:	d020      	beq.n	b53f0 <loop+0x234>
            newSensor.bloque = numBloque;
   b53ae:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b53b2:	f8d9 c000 	ldr.w	ip, [r9]
            newSensor.condicion = tagInfo[3];
   b53b6:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b53b8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b53bc:	fb01 f10e 	mul.w	r1, r1, lr
   b53c0:	eb01 120c 	add.w	r2, r1, ip, lsl #4
   b53c4:	442a      	add	r2, r5
   b53c6:	e9c2 6301 	strd	r6, r3, [r2, #4]
   b53ca:	e9c2 e003 	strd	lr, r0, [r2, #12]
            bloques[numBloque].numSensores++;
   b53ce:	586a      	ldr	r2, [r5, r1]
   b53d0:	3201      	adds	r2, #1
   b53d2:	506a      	str	r2, [r5, r1]
            numSensoresBloque++;
   b53d4:	f10c 0201 	add.w	r2, ip, #1
   b53d8:	f8c9 2000 	str.w	r2, [r9]
   return type == 0;
   b53dc:	6861      	ldr	r1, [r4, #4]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b53de:	9000      	str	r0, [sp, #0]
   b53e0:	e08d      	b.n	b54fe <loop+0x342>
          if ((!IF_pasado)) {
   b53e2:	f898 3000 	ldrb.w	r3, [r8]
   b53e6:	b94b      	cbnz	r3, b53fc <loop+0x240>
            Serial.println("Se esperaba IF tag");
   b53e8:	f003 f8f8 	bl	b85dc <_Z16_fetch_usbserialv>
   b53ec:	491b      	ldr	r1, [pc, #108]	; (b545c <loop+0x2a0>)
   b53ee:	e002      	b.n	b53f6 <loop+0x23a>
            Serial.println("Error Puerto");
   b53f0:	f003 f8f4 	bl	b85dc <_Z16_fetch_usbserialv>
   b53f4:	491a      	ldr	r1, [pc, #104]	; (b5460 <loop+0x2a4>)
        Serial.println("ID Tag incorrecta");
   b53f6:	f002 fef0 	bl	b81da <_ZN5Print7printlnEPKc>
        break;
   b53fa:	e08a      	b.n	b5512 <loop+0x356>
          if (numSensoresBloque != numCondicionalesBloque) {
   b53fc:	f8d9 2000 	ldr.w	r2, [r9]
   b5400:	f8da 3000 	ldr.w	r3, [sl]
   b5404:	429a      	cmp	r2, r3
   b5406:	f000 8084 	beq.w	b5512 <loop+0x356>
              Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b540a:	f003 f8e7 	bl	b85dc <_Z16_fetch_usbserialv>
   b540e:	4915      	ldr	r1, [pc, #84]	; (b5464 <loop+0x2a8>)
   b5410:	e7f1      	b.n	b53f6 <loop+0x23a>
   b5412:	bf00      	nop
   b5414:	2003e698 	.word	0x2003e698
   b5418:	2003e60c 	.word	0x2003e60c
   b541c:	000b9b35 	.word	0x000b9b35
   b5420:	2003df48 	.word	0x2003df48
   b5424:	000b9b48 	.word	0x000b9b48
   b5428:	000b9b5c 	.word	0x000b9b5c
   b542c:	2003e684 	.word	0x2003e684
   b5430:	2003e6bc 	.word	0x2003e6bc
   b5434:	2003e6b0 	.word	0x2003e6b0
   b5438:	000b9b71 	.word	0x000b9b71
   b543c:	2003dff4 	.word	0x2003dff4
   b5440:	2003e6c0 	.word	0x2003e6c0
   b5444:	000b9b84 	.word	0x000b9b84
   b5448:	000b9b8f 	.word	0x000b9b8f
   b544c:	000b9b89 	.word	0x000b9b89
   b5450:	2003df40 	.word	0x2003df40
   b5454:	000b9ba4 	.word	0x000b9ba4
   b5458:	000b9bb8 	.word	0x000b9bb8
   b545c:	000b9bd6 	.word	0x000b9bd6
   b5460:	000b9bc9 	.word	0x000b9bc9
   b5464:	000b9be9 	.word	0x000b9be9
   b5468:	2003dfe0 	.word	0x2003dfe0
   b546c:	2003e67c 	.word	0x2003e67c
   b5470:	2003e6a8 	.word	0x2003e6a8
   b5474:	2003e6ac 	.word	0x2003e6ac
   b5478:	2003dfdd 	.word	0x2003dfdd
        Serial.println("Actuador detectado");
   b547c:	f003 f8ae 	bl	b85dc <_Z16_fetch_usbserialv>
   b5480:	49a6      	ldr	r1, [pc, #664]	; (b571c <loop+0x560>)
   b5482:	f002 feaa 	bl	b81da <_ZN5Print7printlnEPKc>
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5486:	4ba6      	ldr	r3, [pc, #664]	; (b5720 <loop+0x564>)
   b5488:	f893 a000 	ldrb.w	sl, [r3]
   b548c:	f1ba 0f00 	cmp.w	sl, #0
   b5490:	d078      	beq.n	b5584 <loop+0x3c8>
   b5492:	4ba4      	ldr	r3, [pc, #656]	; (b5724 <loop+0x568>)
        int deviceState = tagInfo[3];
   b5494:	f8d4 900c 	ldr.w	r9, [r4, #12]
        if ( THEN_pasado && !ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b5498:	781b      	ldrb	r3, [r3, #0]
   b549a:	4631      	mov	r1, r6
   b549c:	4648      	mov	r0, r9
   b549e:	2b00      	cmp	r3, #0
   b54a0:	d16d      	bne.n	b557e <loop+0x3c2>
   b54a2:	f7ff fda1 	bl	b4fe8 <_Z15isValidActuadorii>
   b54a6:	2800      	cmp	r0, #0
   b54a8:	d06c      	beq.n	b5584 <loop+0x3c8>
          int puerto = isNewActuador(deviceID);
   b54aa:	4630      	mov	r0, r6
   b54ac:	f7ff fdd4 	bl	b5058 <_Z13isNewActuadori>
          if (puerto == -1)
   b54b0:	1c41      	adds	r1, r0, #1
   b54b2:	d104      	bne.n	b54be <loop+0x302>
            puerto = asignarPuerto(tagInfo[1]);
   b54b4:	6860      	ldr	r0, [r4, #4]
   b54b6:	f7ff fa4d 	bl	b4954 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b54ba:	1c42      	adds	r2, r0, #1
   b54bc:	d029      	beq.n	b5512 <loop+0x356>
            newActuador.bloque = numBloque;
   b54be:	f8d7 c000 	ldr.w	ip, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b54c2:	f8d8 1000 	ldr.w	r1, [r8]
   b54c6:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b54ca:	fb03 f30c 	mul.w	r3, r3, ip
   b54ce:	2214      	movs	r2, #20
   b54d0:	fb02 3201 	mla	r2, r2, r1, r3
   b54d4:	442a      	add	r2, r5
   b54d6:	e9c2 c054 	strd	ip, r0, [r2, #336]	; 0x150
            bloques[numBloque].numActuadores++;
   b54da:	442b      	add	r3, r5
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b54dc:	f04f 0c01 	mov.w	ip, #1
   b54e0:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
   b54e4:	e9c2 6952 	strd	r6, r9, [r2, #328]	; 0x148
            bloques[numBloque].numActuadores++;
   b54e8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b54ec:	4461      	add	r1, ip
            bloques[numBloque].numActuadores++;
   b54ee:	4462      	add	r2, ip
            numActuadoresBloque++;
   b54f0:	f8c8 1000 	str.w	r1, [r8]
            bloques[numBloque].numActuadores++;
   b54f4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   b54f8:	6861      	ldr	r1, [r4, #4]
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b54fa:	9000      	str	r0, [sp, #0]
   b54fc:	464b      	mov	r3, r9
            displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b54fe:	6820      	ldr	r0, [r4, #0]
   b5500:	fab1 f181 	clz	r1, r1
   b5504:	fab0 f080 	clz	r0, r0
   b5508:	4632      	mov	r2, r6
   b550a:	0949      	lsrs	r1, r1, #5
   b550c:	0940      	lsrs	r0, r0, #5
   b550e:	f7ff f891 	bl	b4634 <_Z12displayPrintbbiii>
      Serial.println("Fin Tag");
   b5512:	f003 f863 	bl	b85dc <_Z16_fetch_usbserialv>
   b5516:	4984      	ldr	r1, [pc, #528]	; (b5728 <loop+0x56c>)
   b5518:	f002 fe5f 	bl	b81da <_ZN5Print7printlnEPKc>
      Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b551c:	f003 f85e 	bl	b85dc <_Z16_fetch_usbserialv>
   b5520:	4982      	ldr	r1, [pc, #520]	; (b572c <loop+0x570>)
   b5522:	f002 fe5a 	bl	b81da <_ZN5Print7printlnEPKc>
      Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b5526:	f003 f859 	bl	b85dc <_Z16_fetch_usbserialv>
   b552a:	683a      	ldr	r2, [r7, #0]
   b552c:	4980      	ldr	r1, [pc, #512]	; (b5730 <loop+0x574>)
   b552e:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5532:	fb03 5502 	mla	r5, r3, r2, r5
   b5536:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b553a:	9302      	str	r3, [sp, #8]
   b553c:	4b7d      	ldr	r3, [pc, #500]	; (b5734 <loop+0x578>)
   b553e:	681b      	ldr	r3, [r3, #0]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	4b7d      	ldr	r3, [pc, #500]	; (b5738 <loop+0x57c>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	9300      	str	r3, [sp, #0]
   b5548:	4b7c      	ldr	r3, [pc, #496]	; (b573c <loop+0x580>)
   b554a:	681b      	ldr	r3, [r3, #0]
   b554c:	f7fe fdec 	bl	b4128 <_ZN5Print8printlnfEPKcz>
      tagInfo[0] = -1;
   b5550:	f04f 33ff 	mov.w	r3, #4294967295
   b5554:	6023      	str	r3, [r4, #0]
      Serial.println();
   b5556:	f003 f841 	bl	b85dc <_Z16_fetch_usbserialv>
   b555a:	f002 fe32 	bl	b81c2 <_ZN5Print7printlnEv>
    display.display();
   b555e:	4878      	ldr	r0, [pc, #480]	; (b5740 <loop+0x584>)
   b5560:	f001 febe 	bl	b72e0 <_ZN16Adafruit_SSD13067displayEv>
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5564:	683b      	ldr	r3, [r7, #0]
   b5566:	2b00      	cmp	r3, #0
   b5568:	f040 8106 	bne.w	b5778 <loop+0x5bc>
   b556c:	4b6c      	ldr	r3, [pc, #432]	; (b5720 <loop+0x564>)
   b556e:	781b      	ldrb	r3, [r3, #0]
   b5570:	2b00      	cmp	r3, #0
   b5572:	f040 8104 	bne.w	b577e <loop+0x5c2>
}
   b5576:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if ( THEN_pasado && ELSE_pasado && isValidActuador(deviceState, deviceID) ) {
   b557e:	f7ff fd33 	bl	b4fe8 <_Z15isValidActuadorii>
   b5582:	b958      	cbnz	r0, b559c <loop+0x3e0>
          if (!IF_pasado) {
   b5584:	4b6f      	ldr	r3, [pc, #444]	; (b5744 <loop+0x588>)
   b5586:	781b      	ldrb	r3, [r3, #0]
   b5588:	2b00      	cmp	r3, #0
   b558a:	f43f af2d 	beq.w	b53e8 <loop+0x22c>
          } else if (!THEN_pasado) {
   b558e:	f1ba 0f00 	cmp.w	sl, #0
   b5592:	d12e      	bne.n	b55f2 <loop+0x436>
            Serial.println("Se esperaba THEN tag");
   b5594:	f003 f822 	bl	b85dc <_Z16_fetch_usbserialv>
   b5598:	496b      	ldr	r1, [pc, #428]	; (b5748 <loop+0x58c>)
   b559a:	e72c      	b.n	b53f6 <loop+0x23a>
          int puerto = isNewActuador(deviceID);
   b559c:	4630      	mov	r0, r6
   b559e:	f7ff fd5b 	bl	b5058 <_Z13isNewActuadori>
          if (puerto == -1)
   b55a2:	1c43      	adds	r3, r0, #1
   b55a4:	d104      	bne.n	b55b0 <loop+0x3f4>
            puerto = asignarPuerto(tagInfo[1]);
   b55a6:	6860      	ldr	r0, [r4, #4]
   b55a8:	f7ff f9d4 	bl	b4954 <_Z13asignarPuertoi>
          if (puerto != -1) {
   b55ac:	1c41      	adds	r1, r0, #1
   b55ae:	d0b0      	beq.n	b5512 <loop+0x356>
            newActuador.bloque = numBloque;
   b55b0:	f8d7 e000 	ldr.w	lr, [r7]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b55b4:	f8d8 c000 	ldr.w	ip, [r8]
            newActuador.condicion = tagInfo[3];
   b55b8:	68e3      	ldr	r3, [r4, #12]
            bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b55ba:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b55be:	fb02 f10e 	mul.w	r1, r2, lr
   b55c2:	2214      	movs	r2, #20
   b55c4:	fb02 120c 	mla	r2, r2, ip, r1
   b55c8:	442a      	add	r2, r5
   b55ca:	f502 79a4 	add.w	r9, r2, #328	; 0x148
   b55ce:	e9c2 6352 	strd	r6, r3, [r2, #328]	; 0x148
   b55d2:	e9c2 e054 	strd	lr, r0, [r2, #336]	; 0x150
   b55d6:	2200      	movs	r2, #0
   b55d8:	f889 2010 	strb.w	r2, [r9, #16]
            bloques[numBloque].numActuadores++;
   b55dc:	186a      	adds	r2, r5, r1
   b55de:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
   b55e2:	3101      	adds	r1, #1
   b55e4:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
            numActuadoresBloque++;
   b55e8:	f10c 0201 	add.w	r2, ip, #1
   b55ec:	f8c8 2000 	str.w	r2, [r8]
   b55f0:	e6f4      	b.n	b53dc <loop+0x220>
            Serial.println("Invalid Actuador");
   b55f2:	f002 fff3 	bl	b85dc <_Z16_fetch_usbserialv>
   b55f6:	4955      	ldr	r1, [pc, #340]	; (b574c <loop+0x590>)
   b55f8:	e6fd      	b.n	b53f6 <loop+0x23a>
        Serial.println("IF detectado");
   b55fa:	f002 ffef 	bl	b85dc <_Z16_fetch_usbserialv>
   b55fe:	4954      	ldr	r1, [pc, #336]	; (b5750 <loop+0x594>)
   b5600:	f002 fdeb 	bl	b81da <_ZN5Print7printlnEPKc>
        if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5604:	683b      	ldr	r3, [r7, #0]
   b5606:	1c5a      	adds	r2, r3, #1
   b5608:	d004      	beq.n	b5614 <loop+0x458>
   b560a:	b9db      	cbnz	r3, b5644 <loop+0x488>
   b560c:	f8d8 2000 	ldr.w	r2, [r8]
   b5610:	2a00      	cmp	r2, #0
   b5612:	dd17      	ble.n	b5644 <loop+0x488>
          IF_pasado = true;
   b5614:	4a4b      	ldr	r2, [pc, #300]	; (b5744 <loop+0x588>)
   b5616:	2101      	movs	r1, #1
   b5618:	7011      	strb	r1, [r2, #0]
          THEN_pasado = false;
   b561a:	4941      	ldr	r1, [pc, #260]	; (b5720 <loop+0x564>)
   b561c:	2200      	movs	r2, #0
   b561e:	700a      	strb	r2, [r1, #0]
          ELSE_pasado = false;
   b5620:	4940      	ldr	r1, [pc, #256]	; (b5724 <loop+0x568>)
          numCondicionalesBloque = 0;
   b5622:	f8ca 2000 	str.w	r2, [sl]
          numBloque++;
   b5626:	3301      	adds	r3, #1
          ELSE_pasado = false;
   b5628:	700a      	strb	r2, [r1, #0]
          bloques[numBloque] = nuevoBloque;
   b562a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
          numBloque++;
   b562e:	603b      	str	r3, [r7, #0]
          bloques[numBloque] = nuevoBloque;
   b5630:	434b      	muls	r3, r1
   b5632:	18e9      	adds	r1, r5, r3
   b5634:	50ea      	str	r2, [r5, r3]
          numSensoresBloque = 0;
   b5636:	f8c9 2000 	str.w	r2, [r9]
          numActuadoresBloque = 0;
   b563a:	f8c8 2000 	str.w	r2, [r8]
          bloques[numBloque] = nuevoBloque;
   b563e:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
   b5642:	e766      	b.n	b5512 <loop+0x356>
          Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5644:	f002 ffca 	bl	b85dc <_Z16_fetch_usbserialv>
   b5648:	4942      	ldr	r1, [pc, #264]	; (b5754 <loop+0x598>)
   b564a:	e6d4      	b.n	b53f6 <loop+0x23a>
        Serial.println("AND/OR detectado");
   b564c:	f002 ffc6 	bl	b85dc <_Z16_fetch_usbserialv>
   b5650:	4941      	ldr	r1, [pc, #260]	; (b5758 <loop+0x59c>)
   b5652:	f002 fdc2 	bl	b81da <_ZN5Print7printlnEPKc>
        if ( (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b5656:	f8da 3000 	ldr.w	r3, [sl]
   b565a:	f8d9 2000 	ldr.w	r2, [r9]
   b565e:	4293      	cmp	r3, r2
   b5660:	da12      	bge.n	b5688 <loop+0x4cc>
   b5662:	f8d8 2000 	ldr.w	r2, [r8]
   b5666:	b97a      	cbnz	r2, b5688 <loop+0x4cc>
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b5668:	683a      	ldr	r2, [r7, #0]
   b566a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b566e:	fb01 5202 	mla	r2, r1, r2, r5
   b5672:	6861      	ldr	r1, [r4, #4]
   b5674:	441a      	add	r2, r3
   b5676:	3900      	subs	r1, #0
   b5678:	bf18      	it	ne
   b567a:	2101      	movne	r1, #1
          numCondicionalesBloque++;
   b567c:	3301      	adds	r3, #1
          bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b567e:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
          numCondicionalesBloque++;
   b5682:	f8ca 3000 	str.w	r3, [sl]
   b5686:	e744      	b.n	b5512 <loop+0x356>
          if (!IF_pasado) {
   b5688:	4b2e      	ldr	r3, [pc, #184]	; (b5744 <loop+0x588>)
   b568a:	781b      	ldrb	r3, [r3, #0]
   b568c:	2b00      	cmp	r3, #0
   b568e:	f43f aeab 	beq.w	b53e8 <loop+0x22c>
          Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5692:	f002 ffa3 	bl	b85dc <_Z16_fetch_usbserialv>
   b5696:	4931      	ldr	r1, [pc, #196]	; (b575c <loop+0x5a0>)
   b5698:	e6ad      	b.n	b53f6 <loop+0x23a>
        Serial.println("THEN detectado");
   b569a:	f002 ff9f 	bl	b85dc <_Z16_fetch_usbserialv>
   b569e:	4930      	ldr	r1, [pc, #192]	; (b5760 <loop+0x5a4>)
   b56a0:	f002 fd9b 	bl	b81da <_ZN5Print7printlnEPKc>
        if ((numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b56a4:	f8d9 3000 	ldr.w	r3, [r9]
   b56a8:	2b00      	cmp	r3, #0
   b56aa:	dd07      	ble.n	b56bc <loop+0x500>
   b56ac:	f8da 2000 	ldr.w	r2, [sl]
   b56b0:	4293      	cmp	r3, r2
   b56b2:	dd03      	ble.n	b56bc <loop+0x500>
          THEN_pasado = true;
   b56b4:	4b1a      	ldr	r3, [pc, #104]	; (b5720 <loop+0x564>)
          ELSE_pasado = true;
   b56b6:	2201      	movs	r2, #1
   b56b8:	701a      	strb	r2, [r3, #0]
   b56ba:	e72a      	b.n	b5512 <loop+0x356>
          if (!IF_pasado) {
   b56bc:	4b21      	ldr	r3, [pc, #132]	; (b5744 <loop+0x588>)
   b56be:	781b      	ldrb	r3, [r3, #0]
   b56c0:	2b00      	cmp	r3, #0
   b56c2:	f43f ae91 	beq.w	b53e8 <loop+0x22c>
          Serial.println("Numero de sensores infucientes");
   b56c6:	f002 ff89 	bl	b85dc <_Z16_fetch_usbserialv>
   b56ca:	4926      	ldr	r1, [pc, #152]	; (b5764 <loop+0x5a8>)
   b56cc:	e693      	b.n	b53f6 <loop+0x23a>
        Serial.println("ELSE detectado");
   b56ce:	f002 ff85 	bl	b85dc <_Z16_fetch_usbserialv>
   b56d2:	4925      	ldr	r1, [pc, #148]	; (b5768 <loop+0x5ac>)
   b56d4:	f002 fd81 	bl	b81da <_ZN5Print7printlnEPKc>
        if (numActuadoresBloque > 0) {
   b56d8:	f8d8 3000 	ldr.w	r3, [r8]
   b56dc:	2b00      	cmp	r3, #0
   b56de:	dd01      	ble.n	b56e4 <loop+0x528>
          ELSE_pasado = true;
   b56e0:	4b10      	ldr	r3, [pc, #64]	; (b5724 <loop+0x568>)
   b56e2:	e7e8      	b.n	b56b6 <loop+0x4fa>
          if (!IF_pasado) {
   b56e4:	4b17      	ldr	r3, [pc, #92]	; (b5744 <loop+0x588>)
   b56e6:	781b      	ldrb	r3, [r3, #0]
   b56e8:	2b00      	cmp	r3, #0
   b56ea:	f47f af12 	bne.w	b5512 <loop+0x356>
   b56ee:	e67b      	b.n	b53e8 <loop+0x22c>
        if (tagInfo[1] == 0 ) {
   b56f0:	6866      	ldr	r6, [r4, #4]
   b56f2:	b94e      	cbnz	r6, b5708 <loop+0x54c>
          Serial.println("Modo KIDS detectado");
   b56f4:	f002 ff72 	bl	b85dc <_Z16_fetch_usbserialv>
   b56f8:	491c      	ldr	r1, [pc, #112]	; (b576c <loop+0x5b0>)
          Serial.println("Modo SUCRE detectado");
   b56fa:	f002 fd6e 	bl	b81da <_ZN5Print7printlnEPKc>
          MODE = 1;
   b56fe:	f8cb 6000 	str.w	r6, [fp]
        resetMode();
   b5702:	f7ff fce9 	bl	b50d8 <_Z9resetModev>
        break;
   b5706:	e704      	b.n	b5512 <loop+0x356>
        } else if (tagInfo[1] == 1) {
   b5708:	2e01      	cmp	r6, #1
   b570a:	d1fa      	bne.n	b5702 <loop+0x546>
          Serial.println("Modo SUCRE detectado");
   b570c:	f002 ff66 	bl	b85dc <_Z16_fetch_usbserialv>
   b5710:	4917      	ldr	r1, [pc, #92]	; (b5770 <loop+0x5b4>)
   b5712:	e7f2      	b.n	b56fa <loop+0x53e>
        Serial.println("ID Tag incorrecta");
   b5714:	f002 ff62 	bl	b85dc <_Z16_fetch_usbserialv>
   b5718:	4916      	ldr	r1, [pc, #88]	; (b5774 <loop+0x5b8>)
   b571a:	e66c      	b.n	b53f6 <loop+0x23a>
   b571c:	000b9c1e 	.word	0x000b9c1e
   b5720:	2003dff0 	.word	0x2003dff0
   b5724:	2003dfdc 	.word	0x2003dfdc
   b5728:	000b9d48 	.word	0x000b9d48
   b572c:	000b9d50 	.word	0x000b9d50
   b5730:	000b9d85 	.word	0x000b9d85
   b5734:	2003e6a8 	.word	0x2003e6a8
   b5738:	2003e6ac 	.word	0x2003e6ac
   b573c:	2003e6b0 	.word	0x2003e6b0
   b5740:	2003e60c 	.word	0x2003e60c
   b5744:	2003dfdd 	.word	0x2003dfdd
   b5748:	000b9c31 	.word	0x000b9c31
   b574c:	000b9c46 	.word	0x000b9c46
   b5750:	000b9c57 	.word	0x000b9c57
   b5754:	000b9c64 	.word	0x000b9c64
   b5758:	000b9cb6 	.word	0x000b9cb6
   b575c:	000b9cc7 	.word	0x000b9cc7
   b5760:	000b9cf9 	.word	0x000b9cf9
   b5764:	000b9d08 	.word	0x000b9d08
   b5768:	000b9d27 	.word	0x000b9d27
   b576c:	000b9b48 	.word	0x000b9b48
   b5770:	000b9b5c 	.word	0x000b9b5c
   b5774:	000b9d36 	.word	0x000b9d36
    if ( (numBloque==0 && THEN_pasado) || numBloque==1 ) {
   b5778:	2b01      	cmp	r3, #1
   b577a:	f47f aefc 	bne.w	b5576 <loop+0x3ba>
      Bloque bloque = bloques[0];
   b577e:	acb9      	add	r4, sp, #740	; 0x2e4
   b5780:	4916      	ldr	r1, [pc, #88]	; (b57dc <loop+0x620>)
   b5782:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5786:	4620      	mov	r0, r4
   b5788:	f003 fed0 	bl	b952c <memcpy>
      bool evaluacion = makeEvaluate(bloque);
   b578c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5790:	a9bd      	add	r1, sp, #756	; 0x2f4
   b5792:	4668      	mov	r0, sp
   b5794:	f003 feca 	bl	b952c <memcpy>
   b5798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b579c:	f7fe fed2 	bl	b4544 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 0);
   b57a0:	2100      	movs	r1, #0
   b57a2:	f7ff fcd9 	bl	b5158 <_Z18ejecutarEvaluacionbi>
    if ( numBloque==1 && THEN_pasado ) {
   b57a6:	683c      	ldr	r4, [r7, #0]
   b57a8:	2c01      	cmp	r4, #1
   b57aa:	f47f aee4 	bne.w	b5576 <loop+0x3ba>
   b57ae:	4b0c      	ldr	r3, [pc, #48]	; (b57e0 <loop+0x624>)
   b57b0:	781b      	ldrb	r3, [r3, #0]
   b57b2:	2b00      	cmp	r3, #0
   b57b4:	f43f aedf 	beq.w	b5576 <loop+0x3ba>
      bool evaluacion = makeEvaluate(bloques[1]);
   b57b8:	490a      	ldr	r1, [pc, #40]	; (b57e4 <loop+0x628>)
   b57ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b57be:	4668      	mov	r0, sp
   b57c0:	f003 feb4 	bl	b952c <memcpy>
   b57c4:	4b08      	ldr	r3, [pc, #32]	; (b57e8 <loop+0x62c>)
   b57c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57c8:	f7fe febc 	bl	b4544 <_Z12makeEvaluate6BLOQUE>
      ejecutarEvaluacion(evaluacion, 1);
   b57cc:	4621      	mov	r1, r4
}
   b57ce:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
   b57d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ejecutarEvaluacion(evaluacion, 1);
   b57d6:	f7ff bcbf 	b.w	b5158 <_Z18ejecutarEvaluacionbi>
   b57da:	bf00      	nop
   b57dc:	2003dff4 	.word	0x2003dff4
   b57e0:	2003dff0 	.word	0x2003dff0
   b57e4:	2003e2f0 	.word	0x2003e2f0
   b57e8:	2003e2e0 	.word	0x2003e2e0

000b57ec <_GLOBAL__sub_I__Z13leerSensorLuzv>:
}
   b57ec:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b57ee:	4c16      	ldr	r4, [pc, #88]	; (b5848 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c>)
Adafruit_SSD1306 display(-1);
   b57f0:	4816      	ldr	r0, [pc, #88]	; (b584c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x60>)
   b57f2:	f04f 31ff 	mov.w	r1, #4294967295
   b57f6:	f001 fa17 	bl	b6c28 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b57fa:	4915      	ldr	r1, [pc, #84]	; (b5850 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x64>)
   b57fc:	4620      	mov	r0, r4
   b57fe:	f002 fc1e 	bl	b803e <_ZN6StringC1EPK19__FlashStringHelper>
   b5802:	4913      	ldr	r1, [pc, #76]	; (b5850 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x64>)
   b5804:	f104 0010 	add.w	r0, r4, #16
   b5808:	f002 fc19 	bl	b803e <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b580c:	2208      	movs	r2, #8
   b580e:	2110      	movs	r1, #16
   b5810:	4810      	ldr	r0, [pc, #64]	; (b5854 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x68>)
   b5812:	f000 fc3e 	bl	b6092 <_ZN7MFRC522C1Ehh>
ChainableLED ledObject  = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b5816:	2305      	movs	r3, #5
   b5818:	461a      	mov	r2, r3
   b581a:	2104      	movs	r1, #4
   b581c:	480e      	ldr	r0, [pc, #56]	; (b5858 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x6c>)
   b581e:	f001 fdf9 	bl	b7414 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5822:	4b0e      	ldr	r3, [pc, #56]	; (b585c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x70>)
    SleepResult() {}
   b5824:	4a0e      	ldr	r2, [pc, #56]	; (b5860 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x74>)
   b5826:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5828:	2400      	movs	r4, #0
   b582a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b582e:	2002      	movs	r0, #2
   b5830:	f002 f998 	bl	b7b64 <set_system_mode>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b5834:	4b0b      	ldr	r3, [pc, #44]	; (b5864 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x78>)
   b5836:	601c      	str	r4, [r3, #0]
   b5838:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b583c:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b5840:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b5844:	bd10      	pop	{r4, pc}
   b5846:	bf00      	nop
   b5848:	2003e65c 	.word	0x2003e65c
   b584c:	2003e60c 	.word	0x2003e60c
   b5850:	000b9da8 	.word	0x000b9da8
   b5854:	2003e698 	.word	0x2003e698
   b5858:	2003e690 	.word	0x2003e690
   b585c:	2003dfe4 	.word	0x2003dfe4
   b5860:	ffff0000 	.word	0xffff0000
   b5864:	2003dff4 	.word	0x2003dff4

000b5868 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5868:	4770      	bx	lr

000b586a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b586a:	b510      	push	{r4, lr}
  }
   b586c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b586e:	4604      	mov	r4, r0
  }
   b5870:	f7fe fc13 	bl	b409a <_ZdlPvj>
   b5874:	4620      	mov	r0, r4
   b5876:	bd10      	pop	{r4, pc}

000b5878 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b587a:	4604      	mov	r4, r0
   b587c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b587e:	7922      	ldrb	r2, [r4, #4]
   b5880:	68a3      	ldr	r3, [r4, #8]
   b5882:	b132      	cbz	r2, b5892 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5884:	b9a3      	cbnz	r3, b58b0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5886:	490b      	ldr	r1, [pc, #44]	; (b58b4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5888:	b002      	add	sp, #8
   b588a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b588e:	f002 bc91 	b.w	b81b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5892:	4a09      	ldr	r2, [pc, #36]	; (b58b8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5894:	7b26      	ldrb	r6, [r4, #12]
   b5896:	4d09      	ldr	r5, [pc, #36]	; (b58bc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5898:	4909      	ldr	r1, [pc, #36]	; (b58c0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b589a:	7b64      	ldrb	r4, [r4, #13]
   b589c:	2e01      	cmp	r6, #1
   b589e:	bf18      	it	ne
   b58a0:	4629      	movne	r1, r5
   b58a2:	e9cd 1400 	strd	r1, r4, [sp]
   b58a6:	4907      	ldr	r1, [pc, #28]	; (b58c4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b58a8:	f7fe fc30 	bl	b410c <_ZN5Print6printfEPKcz>
  }
   b58ac:	b002      	add	sp, #8
   b58ae:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58b0:	4a05      	ldr	r2, [pc, #20]	; (b58c8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b58b2:	e7ef      	b.n	b5894 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b58b4:	000b9dbb 	.word	0x000b9dbb
   b58b8:	000b9ae5 	.word	0x000b9ae5
   b58bc:	000b9db7 	.word	0x000b9db7
   b58c0:	000b9db3 	.word	0x000b9db3
   b58c4:	000b9dd1 	.word	0x000b9dd1
   b58c8:	000b9daa 	.word	0x000b9daa

000b58cc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b58cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58d0:	b085      	sub	sp, #20
   b58d2:	461f      	mov	r7, r3
   b58d4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b58d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b58dc:	eba8 0902 	sub.w	r9, r8, r2
   b58e0:	eba7 0a01 	sub.w	sl, r7, r1
   b58e4:	f1b9 0f00 	cmp.w	r9, #0
   b58e8:	bfb8      	it	lt
   b58ea:	f1c9 0900 	rsblt	r9, r9, #0
   b58ee:	f1ba 0f00 	cmp.w	sl, #0
   b58f2:	bfb8      	it	lt
   b58f4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b58f8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b58fa:	4683      	mov	fp, r0
   b58fc:	460c      	mov	r4, r1
   b58fe:	4615      	mov	r5, r2
    if (steep) {
   b5900:	dd04      	ble.n	b590c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5902:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5904:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5906:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5908:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b590a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b590c:	42bc      	cmp	r4, r7
   b590e:	dd05      	ble.n	b591c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5910:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5912:	4645      	mov	r5, r8
   b5914:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5916:	4622      	mov	r2, r4
   b5918:	463c      	mov	r4, r7
   b591a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b591c:	1b3e      	subs	r6, r7, r4
   b591e:	b2b2      	uxth	r2, r6
   b5920:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5922:	eba8 0205 	sub.w	r2, r8, r5
   b5926:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b592a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b592e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5932:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5936:	4545      	cmp	r5, r8
   b5938:	bfb4      	ite	lt
   b593a:	2201      	movlt	r2, #1
   b593c:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5940:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5942:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5944:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5946:	42bc      	cmp	r4, r7
   b5948:	dc1c      	bgt.n	b5984 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b594a:	f8db 2000 	ldr.w	r2, [fp]
   b594e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5950:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5952:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5956:	bfc7      	ittee	gt
   b5958:	4629      	movgt	r1, r5
   b595a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b595c:	462a      	movle	r2, r5
   b595e:	4621      	movle	r1, r4
   b5960:	4658      	mov	r0, fp
   b5962:	47c0      	blx	r8
        }
        err -= dy;
   b5964:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5966:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5968:	1ab6      	subs	r6, r6, r2
   b596a:	b2b1      	uxth	r1, r6
   b596c:	b236      	sxth	r6, r6
        if (err < 0) {
   b596e:	2e00      	cmp	r6, #0
   b5970:	da05      	bge.n	b597e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5972:	9a02      	ldr	r2, [sp, #8]
   b5974:	4415      	add	r5, r2
            err += dx;
   b5976:	9a00      	ldr	r2, [sp, #0]
   b5978:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b597a:	b22d      	sxth	r5, r5
            err += dx;
   b597c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b597e:	3401      	adds	r4, #1
   b5980:	b224      	sxth	r4, r4
   b5982:	e7e0      	b.n	b5946 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5984:	b005      	add	sp, #20
   b5986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b598a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b598a:	4770      	bx	lr

000b598c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b598c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b598e:	6804      	ldr	r4, [r0, #0]
   b5990:	6924      	ldr	r4, [r4, #16]
   b5992:	46a4      	mov	ip, r4
}
   b5994:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5998:	4760      	bx	ip

000b599a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b599a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b599c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b599e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b59a2:	9502      	str	r5, [sp, #8]
   b59a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b59a6:	46a4      	mov	ip, r4
}
   b59a8:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b59aa:	4760      	bx	ip

000b59ac <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b59ac:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b59ae:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b59b0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b59b4:	9502      	str	r5, [sp, #8]
   b59b6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b59b8:	46a4      	mov	ip, r4
}
   b59ba:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b59bc:	4760      	bx	ip

000b59be <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b59be:	b470      	push	{r4, r5, r6}
   b59c0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b59c4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b59c8:	6804      	ldr	r4, [r0, #0]
   b59ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b59ce:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b59d0:	46a4      	mov	ip, r4
}
   b59d2:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b59d4:	4760      	bx	ip

000b59d6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b59d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b59da:	461c      	mov	r4, r3
    startWrite();
   b59dc:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b59de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b59e2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b59e4:	4605      	mov	r5, r0
   b59e6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b59e8:	3c01      	subs	r4, #1
   b59ea:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b59ec:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b59ee:	b224      	sxth	r4, r4
    startWrite();
   b59f0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b59f2:	682b      	ldr	r3, [r5, #0]
   b59f4:	f8cd 8004 	str.w	r8, [sp, #4]
   b59f8:	9400      	str	r4, [sp, #0]
   b59fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b59fc:	4628      	mov	r0, r5
   b59fe:	463b      	mov	r3, r7
   b5a00:	4632      	mov	r2, r6
   b5a02:	4639      	mov	r1, r7
   b5a04:	47a0      	blx	r4
    endWrite();
   b5a06:	682b      	ldr	r3, [r5, #0]
   b5a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a0a:	4628      	mov	r0, r5
}
   b5a0c:	b002      	add	sp, #8
   b5a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a12:	4718      	bx	r3

000b5a14 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a18:	461d      	mov	r5, r3
    startWrite();
   b5a1a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5a1c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a20:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5a22:	4604      	mov	r4, r0
   b5a24:	4617      	mov	r7, r2
   b5a26:	460e      	mov	r6, r1
    startWrite();
   b5a28:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5a2a:	e9cd 7800 	strd	r7, r8, [sp]
   b5a2e:	6822      	ldr	r2, [r4, #0]
   b5a30:	1e6b      	subs	r3, r5, #1
   b5a32:	4433      	add	r3, r6
   b5a34:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5a36:	4620      	mov	r0, r4
   b5a38:	b21b      	sxth	r3, r3
   b5a3a:	463a      	mov	r2, r7
   b5a3c:	4631      	mov	r1, r6
   b5a3e:	47a8      	blx	r5
    endWrite();
   b5a40:	6823      	ldr	r3, [r4, #0]
   b5a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a44:	4620      	mov	r0, r4
}
   b5a46:	b002      	add	sp, #8
   b5a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a4c:	4718      	bx	r3

000b5a4e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5a4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5a52:	461e      	mov	r6, r3
    startWrite();
   b5a54:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5a56:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5a5a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5a5c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5a60:	460c      	mov	r4, r1
   b5a62:	4605      	mov	r5, r0
   b5a64:	4617      	mov	r7, r2
    startWrite();
   b5a66:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5a68:	4426      	add	r6, r4
   b5a6a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5a6c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5a6e:	da0b      	bge.n	b5a88 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5a70:	f8cd 8000 	str.w	r8, [sp]
   b5a74:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5a78:	4621      	mov	r1, r4
   b5a7a:	464b      	mov	r3, r9
   b5a7c:	463a      	mov	r2, r7
   b5a7e:	4628      	mov	r0, r5
   b5a80:	3401      	adds	r4, #1
   b5a82:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5a84:	b224      	sxth	r4, r4
   b5a86:	e7f0      	b.n	b5a6a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a8a:	4628      	mov	r0, r5
}
   b5a8c:	b002      	add	sp, #8
   b5a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5a92:	4718      	bx	r3

000b5a94 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5a94:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5a96:	6802      	ldr	r2, [r0, #0]
   b5a98:	9101      	str	r1, [sp, #4]
   b5a9a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5a9e:	9100      	str	r1, [sp, #0]
   b5aa0:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5aa2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5aa6:	2200      	movs	r2, #0
   b5aa8:	4611      	mov	r1, r2
   b5aaa:	47a0      	blx	r4
}
   b5aac:	b002      	add	sp, #8
   b5aae:	bd10      	pop	{r4, pc}

000b5ab0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5ab4:	4299      	cmp	r1, r3
        uint16_t color) {
   b5ab6:	4616      	mov	r6, r2
   b5ab8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5abc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5ac0:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5ac2:	4680      	mov	r8, r0
   b5ac4:	460d      	mov	r5, r1
   b5ac6:	461c      	mov	r4, r3
    if(x0 == x1){
   b5ac8:	d113      	bne.n	b5af2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5aca:	42be      	cmp	r6, r7
   b5acc:	bfc8      	it	gt
   b5ace:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5ad0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5ad4:	bfc4      	itt	gt
   b5ad6:	463e      	movgt	r6, r7
   b5ad8:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5ada:	1c7b      	adds	r3, r7, #1
   b5adc:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5ade:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5ae0:	b21b      	sxth	r3, r3
   b5ae2:	4632      	mov	r2, r6
   b5ae4:	4629      	mov	r1, r5
   b5ae6:	4640      	mov	r0, r8
   b5ae8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5aea:	b003      	add	sp, #12
   b5aec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5af0:	4760      	bx	ip
    } else if(y0 == y1){
   b5af2:	42be      	cmp	r6, r7
   b5af4:	d10a      	bne.n	b5b0c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5af6:	4299      	cmp	r1, r3
   b5af8:	bfc2      	ittt	gt
   b5afa:	460b      	movgt	r3, r1
   b5afc:	4625      	movgt	r5, r4
   b5afe:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b00:	1c63      	adds	r3, r4, #1
   b5b02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5b06:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5b08:	1b5b      	subs	r3, r3, r5
   b5b0a:	e7e9      	b.n	b5ae0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5b0c:	6953      	ldr	r3, [r2, #20]
   b5b0e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5b10:	e9cd 7900 	strd	r7, r9, [sp]
   b5b14:	f8d8 3000 	ldr.w	r3, [r8]
   b5b18:	4640      	mov	r0, r8
   b5b1a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5b1c:	4632      	mov	r2, r6
   b5b1e:	4623      	mov	r3, r4
   b5b20:	4629      	mov	r1, r5
   b5b22:	47b8      	blx	r7
        endWrite();
   b5b24:	f8d8 3000 	ldr.w	r3, [r8]
   b5b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b2a:	4640      	mov	r0, r8
}
   b5b2c:	b003      	add	sp, #12
   b5b2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5b32:	4718      	bx	r3

000b5b34 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5b38:	461d      	mov	r5, r3
    startWrite();
   b5b3a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5b3c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5b40:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5b42:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5b46:	4604      	mov	r4, r0
   b5b48:	460f      	mov	r7, r1
   b5b4a:	4616      	mov	r6, r2
    startWrite();
   b5b4c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5b4e:	6823      	ldr	r3, [r4, #0]
   b5b50:	f8cd 8000 	str.w	r8, [sp]
   b5b54:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5b58:	4632      	mov	r2, r6
   b5b5a:	462b      	mov	r3, r5
   b5b5c:	4639      	mov	r1, r7
   b5b5e:	4620      	mov	r0, r4
   b5b60:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5b62:	6823      	ldr	r3, [r4, #0]
   b5b64:	f8cd 8000 	str.w	r8, [sp]
   b5b68:	f109 32ff 	add.w	r2, r9, #4294967295
   b5b6c:	4432      	add	r2, r6
   b5b6e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5b72:	4639      	mov	r1, r7
   b5b74:	462b      	mov	r3, r5
   b5b76:	4620      	mov	r0, r4
   b5b78:	b212      	sxth	r2, r2
   b5b7a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5b7c:	6823      	ldr	r3, [r4, #0]
   b5b7e:	f8cd 8000 	str.w	r8, [sp]
   b5b82:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5b86:	4632      	mov	r2, r6
   b5b88:	464b      	mov	r3, r9
   b5b8a:	4639      	mov	r1, r7
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5b90:	1e6b      	subs	r3, r5, #1
   b5b92:	19d9      	adds	r1, r3, r7
   b5b94:	6823      	ldr	r3, [r4, #0]
   b5b96:	f8cd 8000 	str.w	r8, [sp]
   b5b9a:	6a1d      	ldr	r5, [r3, #32]
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	464b      	mov	r3, r9
   b5ba0:	4632      	mov	r2, r6
   b5ba2:	b209      	sxth	r1, r1
   b5ba4:	47a8      	blx	r5
    endWrite();
   b5ba6:	6823      	ldr	r3, [r4, #0]
   b5ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5baa:	4620      	mov	r0, r4
}
   b5bac:	b002      	add	sp, #8
   b5bae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5bb2:	4718      	bx	r3

000b5bb4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5bb4:	4770      	bx	lr

000b5bb6 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5bb6:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5bba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5bbe:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5bc0:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5bc2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5bc6:	bf59      	ittee	pl
   b5bc8:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5bca:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5bcc:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5bce:	81c3      	strhmi	r3, [r0, #14]
}
   b5bd0:	4770      	bx	lr
	...

000b5bd4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5bd4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5bd6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5bd8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5bda:	4a07      	ldr	r2, [pc, #28]	; (b5bf8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5bdc:	4d07      	ldr	r5, [pc, #28]	; (b5bfc <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5bde:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5be0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5be2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5be4:	f04f 31ff 	mov.w	r1, #4294967295
   b5be8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5bec:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5bee:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5bf0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5bf2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5bf4:	6204      	str	r4, [r0, #32]
}
   b5bf6:	bd30      	pop	{r4, r5, pc}
   b5bf8:	01000101 	.word	0x01000101
   b5bfc:	000ba2f8 	.word	0x000ba2f8

000b5c00 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c04:	b089      	sub	sp, #36	; 0x24
   b5c06:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5c0a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c0c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5c10:	9304      	str	r3, [sp, #16]
   b5c12:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5c16:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c18:	9305      	str	r3, [sp, #20]
   b5c1a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5c1e:	4604      	mov	r4, r0
    startWrite();
   b5c20:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5c22:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5c26:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5c2a:	bf48      	it	mi
   b5c2c:	f108 020e 	addmi.w	r2, r8, #14
   b5c30:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5c34:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5c36:	4635      	mov	r5, r6
   b5c38:	9b03      	ldr	r3, [sp, #12]
   b5c3a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5c3c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5c40:	189a      	adds	r2, r3, r2
   b5c42:	9b05      	ldr	r3, [sp, #20]
   b5c44:	428b      	cmp	r3, r1
   b5c46:	b212      	sxth	r2, r2
   b5c48:	dd27      	ble.n	b5c9a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c4a:	9b04      	ldr	r3, [sp, #16]
   b5c4c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5c4e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c52:	9306      	str	r3, [sp, #24]
   b5c54:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5c58:	4580      	cmp	r8, r0
   b5c5a:	fa1f f189 	uxth.w	r1, r9
   b5c5e:	dd17      	ble.n	b5c90 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5c60:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c62:	bf05      	ittet	eq
   b5c64:	9b06      	ldreq	r3, [sp, #24]
   b5c66:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5c68:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c6a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5c6c:	bf18      	it	ne
   b5c6e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5c70:	062b      	lsls	r3, r5, #24
   b5c72:	d50a      	bpl.n	b5c8a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5c74:	9b02      	ldr	r3, [sp, #8]
   b5c76:	6820      	ldr	r0, [r4, #0]
   b5c78:	9207      	str	r2, [sp, #28]
   b5c7a:	4419      	add	r1, r3
   b5c7c:	6983      	ldr	r3, [r0, #24]
   b5c7e:	b209      	sxth	r1, r1
   b5c80:	461f      	mov	r7, r3
   b5c82:	4620      	mov	r0, r4
   b5c84:	4653      	mov	r3, sl
   b5c86:	47b8      	blx	r7
   b5c88:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5c8a:	f109 0901 	add.w	r9, r9, #1
   b5c8e:	e7e1      	b.n	b5c54 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5c90:	9b01      	ldr	r3, [sp, #4]
   b5c92:	3301      	adds	r3, #1
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	445e      	add	r6, fp
   b5c98:	e7ce      	b.n	b5c38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5c9a:	6823      	ldr	r3, [r4, #0]
   b5c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c9e:	4620      	mov	r0, r4
}
   b5ca0:	b009      	add	sp, #36	; 0x24
   b5ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5ca6:	4718      	bx	r3

000b5ca8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cac:	ed2d 8b02 	vpush	{d8}
   b5cb0:	b091      	sub	sp, #68	; 0x44
   b5cb2:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5cb4:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5cb6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5cba:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5cbe:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5cc2:	9103      	str	r1, [sp, #12]
   b5cc4:	461f      	mov	r7, r3
   b5cc6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5cca:	9304      	str	r3, [sp, #16]
   b5ccc:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5cce:	2a00      	cmp	r2, #0
   b5cd0:	f040 80c5 	bne.w	b5e5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5cd4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5cd8:	428b      	cmp	r3, r1
   b5cda:	f340 814c 	ble.w	b5f76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5cde:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5ce2:	42b3      	cmp	r3, r6
   b5ce4:	f340 8147 	ble.w	b5f76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5ce8:	2306      	movs	r3, #6
   b5cea:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5cee:	2b00      	cmp	r3, #0
   b5cf0:	f340 8141 	ble.w	b5f76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5cf4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5cf8:	2b00      	cmp	r3, #0
   b5cfa:	f340 813c 	ble.w	b5f76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5cfe:	7f03      	ldrb	r3, [r0, #28]
   b5d00:	b91b      	cbnz	r3, b5d0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5d02:	2faf      	cmp	r7, #175	; 0xaf
   b5d04:	bf84      	itt	hi
   b5d06:	3701      	addhi	r7, #1
   b5d08:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5d0a:	f8db 3000 	ldr.w	r3, [fp]
   b5d0e:	4658      	mov	r0, fp
   b5d10:	695b      	ldr	r3, [r3, #20]
   b5d12:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d14:	2205      	movs	r2, #5
   b5d16:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5d18:	2200      	movs	r2, #0
   b5d1a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d1c:	4a98      	ldr	r2, [pc, #608]	; (b5f80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5d1e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5d22:	18d3      	adds	r3, r2, r3
   b5d24:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5d26:	b2b3      	uxth	r3, r6
   b5d28:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d2a:	9a05      	ldr	r2, [sp, #20]
   b5d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5d2e:	5c9b      	ldrb	r3, [r3, r2]
   b5d30:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5d32:	b2ab      	uxth	r3, r5
   b5d34:	930b      	str	r3, [sp, #44]	; 0x2c
   b5d36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5d3a:	9308      	str	r3, [sp, #32]
   b5d3c:	9b03      	ldr	r3, [sp, #12]
   b5d3e:	fb02 f905 	mul.w	r9, r2, r5
   b5d42:	fa19 f983 	uxtah	r9, r9, r3
   b5d46:	fa0f f389 	sxth.w	r3, r9
   b5d4a:	ee08 3a10 	vmov	s16, r3
   b5d4e:	2308      	movs	r3, #8
   b5d50:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5d52:	9b03      	ldr	r3, [sp, #12]
   b5d54:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5d58:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5d5c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5d60:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5d62:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5d66:	07d2      	lsls	r2, r2, #31
   b5d68:	d552      	bpl.n	b5e10 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5d6a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5d6c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5d70:	d13e      	bne.n	b5df0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5d72:	2c01      	cmp	r4, #1
   b5d74:	d13c      	bne.n	b5df0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5d76:	699b      	ldr	r3, [r3, #24]
   b5d78:	9906      	ldr	r1, [sp, #24]
   b5d7a:	461f      	mov	r7, r3
   b5d7c:	9b04      	ldr	r3, [sp, #16]
   b5d7e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5d80:	b212      	sxth	r2, r2
   b5d82:	4651      	mov	r1, sl
   b5d84:	4658      	mov	r0, fp
   b5d86:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5d88:	f109 0301 	add.w	r3, r9, #1
   b5d8c:	fa4f f983 	sxtb.w	r9, r3
   b5d90:	9b07      	ldr	r3, [sp, #28]
   b5d92:	085b      	lsrs	r3, r3, #1
   b5d94:	9307      	str	r3, [sp, #28]
   b5d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5d98:	3b01      	subs	r3, #1
   b5d9a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5d9e:	930a      	str	r3, [sp, #40]	; 0x28
   b5da0:	d1de      	bne.n	b5d60 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5da2:	9f05      	ldr	r7, [sp, #20]
   b5da4:	3701      	adds	r7, #1
   b5da6:	b27b      	sxtb	r3, r7
   b5da8:	9305      	str	r3, [sp, #20]
   b5daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5dac:	3b01      	subs	r3, #1
   b5dae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5db2:	9309      	str	r3, [sp, #36]	; 0x24
   b5db4:	d1b9      	bne.n	b5d2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5db6:	9b04      	ldr	r3, [sp, #16]
   b5db8:	4543      	cmp	r3, r8
   b5dba:	d00f      	beq.n	b5ddc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5dbc:	2d01      	cmp	r5, #1
   b5dbe:	f8db 3000 	ldr.w	r3, [fp]
   b5dc2:	d13b      	bne.n	b5e3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5dc4:	2c01      	cmp	r4, #1
   b5dc6:	d139      	bne.n	b5e3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5dc8:	9908      	ldr	r1, [sp, #32]
   b5dca:	f8cd 8000 	str.w	r8, [sp]
   b5dce:	3105      	adds	r1, #5
   b5dd0:	6a1c      	ldr	r4, [r3, #32]
   b5dd2:	4632      	mov	r2, r6
   b5dd4:	2308      	movs	r3, #8
   b5dd6:	b209      	sxth	r1, r1
   b5dd8:	4658      	mov	r0, fp
   b5dda:	47a0      	blx	r4
        endWrite();
   b5ddc:	f8db 3000 	ldr.w	r3, [fp]
   b5de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5de2:	4658      	mov	r0, fp
}
   b5de4:	b011      	add	sp, #68	; 0x44
   b5de6:	ecbd 8b02 	vpop	{d8}
   b5dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5dee:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5df0:	9906      	ldr	r1, [sp, #24]
   b5df2:	fb14 f202 	smulbb	r2, r4, r2
   b5df6:	440a      	add	r2, r1
   b5df8:	9904      	ldr	r1, [sp, #16]
   b5dfa:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5dfc:	9400      	str	r4, [sp, #0]
   b5dfe:	69db      	ldr	r3, [r3, #28]
   b5e00:	ee18 1a10 	vmov	r1, s16
   b5e04:	461f      	mov	r7, r3
   b5e06:	b212      	sxth	r2, r2
   b5e08:	462b      	mov	r3, r5
   b5e0a:	4658      	mov	r0, fp
   b5e0c:	47b8      	blx	r7
   b5e0e:	e7bb      	b.n	b5d88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5e10:	9a04      	ldr	r2, [sp, #16]
   b5e12:	4542      	cmp	r2, r8
   b5e14:	d0b8      	beq.n	b5d88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5e16:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5e18:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5e1c:	d107      	bne.n	b5e2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5e1e:	2c01      	cmp	r4, #1
   b5e20:	d105      	bne.n	b5e2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5e22:	699b      	ldr	r3, [r3, #24]
   b5e24:	9906      	ldr	r1, [sp, #24]
   b5e26:	461f      	mov	r7, r3
   b5e28:	440a      	add	r2, r1
   b5e2a:	4643      	mov	r3, r8
   b5e2c:	e7a8      	b.n	b5d80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e2e:	9906      	ldr	r1, [sp, #24]
   b5e30:	f8cd 8004 	str.w	r8, [sp, #4]
   b5e34:	fb14 f202 	smulbb	r2, r4, r2
   b5e38:	440a      	add	r2, r1
   b5e3a:	e7df      	b.n	b5dfc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5e3e:	f8cd 8004 	str.w	r8, [sp, #4]
   b5e42:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5e46:	9a08      	ldr	r2, [sp, #32]
   b5e48:	00e4      	lsls	r4, r4, #3
   b5e4a:	440a      	add	r2, r1
   b5e4c:	4611      	mov	r1, r2
   b5e4e:	9400      	str	r4, [sp, #0]
   b5e50:	69dc      	ldr	r4, [r3, #28]
   b5e52:	4632      	mov	r2, r6
   b5e54:	462b      	mov	r3, r5
   b5e56:	b209      	sxth	r1, r1
   b5e58:	4658      	mov	r0, fp
   b5e5a:	47a0      	blx	r4
        endWrite();
   b5e5c:	e7be      	b.n	b5ddc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e5e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5e60:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5e62:	6812      	ldr	r2, [r2, #0]
   b5e64:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e66:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5e68:	b2ff      	uxtb	r7, r7
   b5e6a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5e6e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5e72:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5e74:	789a      	ldrb	r2, [r3, #2]
   b5e76:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5e78:	78da      	ldrb	r2, [r3, #3]
   b5e7a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5e7c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5e7e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5e82:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5e86:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5e88:	d801      	bhi.n	b5e8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5e8a:	2c01      	cmp	r4, #1
   b5e8c:	d957      	bls.n	b5f3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5e8e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5e92:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5e94:	fa0f f38a 	sxth.w	r3, sl
   b5e98:	9307      	str	r3, [sp, #28]
        startWrite();
   b5e9a:	f8db 3000 	ldr.w	r3, [fp]
   b5e9e:	4658      	mov	r0, fp
   b5ea0:	695b      	ldr	r3, [r3, #20]
   b5ea2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ea4:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5ea6:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5eaa:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5eac:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5eb0:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5eb2:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5eb4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5eb8:	429f      	cmp	r7, r3
   b5eba:	d28f      	bcs.n	b5ddc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ebc:	9b07      	ldr	r3, [sp, #28]
   b5ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5ec0:	443b      	add	r3, r7
   b5ec2:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5ec6:	2200      	movs	r2, #0
   b5ec8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5eca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ecc:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5ece:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ed2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5ed6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5eda:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5ede:	9905      	ldr	r1, [sp, #20]
   b5ee0:	4291      	cmp	r1, r2
   b5ee2:	d241      	bcs.n	b5f68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5ee4:	1c5a      	adds	r2, r3, #1
   b5ee6:	b2d2      	uxtb	r2, r2
   b5ee8:	075b      	lsls	r3, r3, #29
   b5eea:	920d      	str	r2, [sp, #52]	; 0x34
   b5eec:	d107      	bne.n	b5efe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5eee:	9b06      	ldr	r3, [sp, #24]
   b5ef0:	9906      	ldr	r1, [sp, #24]
   b5ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5ef4:	3301      	adds	r3, #1
   b5ef6:	b29b      	uxth	r3, r3
   b5ef8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5efc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5efe:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5f02:	d012      	beq.n	b5f2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5f04:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f06:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5f0e:	d11a      	bne.n	b5f46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5f10:	2c01      	cmp	r4, #1
   b5f12:	d118      	bne.n	b5f46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5f16:	699b      	ldr	r3, [r3, #24]
   b5f18:	4411      	add	r1, r2
   b5f1a:	9a05      	ldr	r2, [sp, #20]
   b5f1c:	4411      	add	r1, r2
   b5f1e:	461e      	mov	r6, r3
   b5f20:	4652      	mov	r2, sl
   b5f22:	9b04      	ldr	r3, [sp, #16]
   b5f24:	b209      	sxth	r1, r1
   b5f26:	4658      	mov	r0, fp
   b5f28:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5f2a:	9e05      	ldr	r6, [sp, #20]
   b5f2c:	3601      	adds	r6, #1
   b5f2e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5f30:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5f34:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5f36:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5f3c:	e7ce      	b.n	b5edc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5f3e:	2300      	movs	r3, #0
   b5f40:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5f44:	e7a9      	b.n	b5e9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f46:	9805      	ldr	r0, [sp, #20]
   b5f48:	9a08      	ldr	r2, [sp, #32]
   b5f4a:	4402      	add	r2, r0
   b5f4c:	fb02 1105 	mla	r1, r2, r5, r1
   b5f50:	9a04      	ldr	r2, [sp, #16]
   b5f52:	e9cd 4200 	strd	r4, r2, [sp]
   b5f56:	69db      	ldr	r3, [r3, #28]
   b5f58:	ee18 2a10 	vmov	r2, s16
   b5f5c:	461e      	mov	r6, r3
   b5f5e:	b209      	sxth	r1, r1
   b5f60:	462b      	mov	r3, r5
   b5f62:	4658      	mov	r0, fp
   b5f64:	47b0      	blx	r6
   b5f66:	e7e0      	b.n	b5f2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5f6a:	3701      	adds	r7, #1
   b5f6c:	4498      	add	r8, r3
   b5f6e:	fa5f f888 	uxtb.w	r8, r8
   b5f72:	b2ff      	uxtb	r7, r7
   b5f74:	e79f      	b.n	b5eb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5f76:	b011      	add	sp, #68	; 0x44
   b5f78:	ecbd 8b02 	vpop	{d8}
   b5f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f80:	000b9dee 	.word	0x000b9dee

000b5f84 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5f86:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5f88:	b085      	sub	sp, #20
   b5f8a:	4604      	mov	r4, r0
   b5f8c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5f8e:	2a00      	cmp	r2, #0
   b5f90:	d134      	bne.n	b5ffc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5f92:	290a      	cmp	r1, #10
   b5f94:	d108      	bne.n	b5fa8 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5f96:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5f98:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5f9a:	7e42      	ldrb	r2, [r0, #25]
   b5f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5fa0:	8263      	strh	r3, [r4, #18]
}
   b5fa2:	2001      	movs	r0, #1
   b5fa4:	b005      	add	sp, #20
   b5fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5fa8:	290d      	cmp	r1, #13
   b5faa:	d0fa      	beq.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5fac:	7ee1      	ldrb	r1, [r4, #27]
   b5fae:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5fb0:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5fb2:	b171      	cbz	r1, b5fd2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5fb4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5fb8:	2106      	movs	r1, #6
   b5fba:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5fbe:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5fc2:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5fc4:	bfc1      	itttt	gt
   b5fc6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5fca:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5fcc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5fd0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5fd2:	8ae2      	ldrh	r2, [r4, #22]
   b5fd4:	9201      	str	r2, [sp, #4]
   b5fd6:	8aa2      	ldrh	r2, [r4, #20]
   b5fd8:	9200      	str	r2, [sp, #0]
   b5fda:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5fde:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5fe2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f7ff fe5e 	bl	b5ca8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5fec:	7e23      	ldrb	r3, [r4, #24]
   b5fee:	8a22      	ldrh	r2, [r4, #16]
   b5ff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5ff4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5ff8:	8223      	strh	r3, [r4, #16]
   b5ffa:	e7d2      	b.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5ffc:	290a      	cmp	r1, #10
   b5ffe:	d107      	bne.n	b6010 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6000:	2300      	movs	r3, #0
   b6002:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6004:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6006:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6008:	8a43      	ldrh	r3, [r0, #18]
   b600a:	fb01 3302 	mla	r3, r1, r2, r3
   b600e:	e7c7      	b.n	b5fa0 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6010:	290d      	cmp	r1, #13
   b6012:	d0c6      	beq.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6014:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b6016:	42a9      	cmp	r1, r5
   b6018:	d3c3      	bcc.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b601a:	7a51      	ldrb	r1, [r2, #9]
   b601c:	4299      	cmp	r1, r3
   b601e:	d3c0      	bcc.n	b5fa2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6020:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b6022:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6024:	b2ed      	uxtb	r5, r5
   b6026:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b602a:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b602c:	b328      	cbz	r0, b607a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b602e:	78e9      	ldrb	r1, [r5, #3]
   b6030:	b319      	cbz	r1, b607a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6032:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6034:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6036:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6038:	b191      	cbz	r1, b6060 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b603a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b603e:	4408      	add	r0, r1
   b6040:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6044:	fb06 1100 	mla	r1, r6, r0, r1
   b6048:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b604c:	4281      	cmp	r1, r0
   b604e:	dd07      	ble.n	b6060 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6050:	2000      	movs	r0, #0
   b6052:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6054:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6058:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b605a:	fb02 1207 	mla	r2, r2, r7, r1
   b605e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6060:	8ae2      	ldrh	r2, [r4, #22]
   b6062:	9201      	str	r2, [sp, #4]
   b6064:	8aa2      	ldrh	r2, [r4, #20]
   b6066:	9200      	str	r2, [sp, #0]
   b6068:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b606c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6070:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6074:	4620      	mov	r0, r4
   b6076:	f7ff fe17 	bl	b5ca8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b607a:	7929      	ldrb	r1, [r5, #4]
   b607c:	7e22      	ldrb	r2, [r4, #24]
   b607e:	8a23      	ldrh	r3, [r4, #16]
   b6080:	fb01 3302 	mla	r3, r1, r2, r3
   b6084:	e7b8      	b.n	b5ff8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6086 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6086:	2901      	cmp	r1, #1
   b6088:	bf38      	it	cc
   b608a:	2101      	movcc	r1, #1
   b608c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b608e:	7641      	strb	r1, [r0, #25]
}
   b6090:	4770      	bx	lr

000b6092 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6092:	b538      	push	{r3, r4, r5, lr}
   b6094:	4604      	mov	r4, r0
   b6096:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b6098:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b609a:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b609c:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b609e:	f002 fc9d 	bl	b89dc <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b60a2:	7b20      	ldrb	r0, [r4, #12]
   b60a4:	2101      	movs	r1, #1
   b60a6:	f002 fcaa 	bl	b89fe <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b60aa:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b60ac:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b60ae:	2101      	movs	r1, #1
   b60b0:	f002 fc94 	bl	b89dc <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b60b4:	7b60      	ldrb	r0, [r4, #13]
   b60b6:	2100      	movs	r1, #0
   b60b8:	f002 fca1 	bl	b89fe <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b60bc:	4620      	mov	r0, r4
   b60be:	bd38      	pop	{r3, r4, r5, pc}

000b60c0 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b60c0:	3901      	subs	r1, #1
   b60c2:	b2c9      	uxtb	r1, r1
   b60c4:	2908      	cmp	r1, #8
   b60c6:	bf9a      	itte	ls
   b60c8:	4b02      	ldrls	r3, [pc, #8]	; (b60d4 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b60ca:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b60ce:	4802      	ldrhi	r0, [pc, #8]	; (b60d8 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b60d0:	4770      	bx	lr
   b60d2:	bf00      	nop
   b60d4:	000ba440 	.word	0x000ba440
   b60d8:	000ba348 	.word	0x000ba348

000b60dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b60dc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b60de:	4c0b      	ldr	r4, [pc, #44]	; (b610c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b60e0:	7821      	ldrb	r1, [r4, #0]
   b60e2:	f3bf 8f5b 	dmb	ish
   b60e6:	f011 0101 	ands.w	r1, r1, #1
   b60ea:	d10b      	bne.n	b6104 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b60ec:	4620      	mov	r0, r4
   b60ee:	9101      	str	r1, [sp, #4]
   b60f0:	f7fd ffe2 	bl	b40b8 <__cxa_guard_acquire>
   b60f4:	9901      	ldr	r1, [sp, #4]
   b60f6:	b128      	cbz	r0, b6104 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b60f8:	4805      	ldr	r0, [pc, #20]	; (b6110 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b60fa:	f001 fe4b 	bl	b7d94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b60fe:	4620      	mov	r0, r4
   b6100:	f7fd ffdf 	bl	b40c2 <__cxa_guard_release>
    }
   b6104:	4802      	ldr	r0, [pc, #8]	; (b6110 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6106:	b002      	add	sp, #8
   b6108:	bd10      	pop	{r4, pc}
   b610a:	bf00      	nop
   b610c:	2003dfd0 	.word	0x2003dfd0
   b6110:	2003dfd4 	.word	0x2003dfd4

000b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b6114:	b507      	push	{r0, r1, r2, lr}
   b6116:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b6118:	f7ff ffe0 	bl	b60dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b611c:	9901      	ldr	r1, [sp, #4]
    }
   b611e:	b003      	add	sp, #12
   b6120:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b6124:	f001 bedc 	b.w	b7ee0 <_ZN8SPIClass8transferEh>

000b6128 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b6128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b612c:	4607      	mov	r7, r0
   b612e:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b6132:	461e      	mov	r6, r3
	if (count == 0) {
   b6134:	4615      	mov	r5, r2
   b6136:	2a00      	cmp	r2, #0
   b6138:	d042      	beq.n	b61c0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b613a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b613e:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6140:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6144:	2100      	movs	r1, #0
   b6146:	f002 fc5a 	bl	b89fe <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b614a:	4648      	mov	r0, r9
   b614c:	f7ff ffe2 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6150:	3d01      	subs	r5, #1
   b6152:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6154:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b6158:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b615c:	fa5f f48b 	uxtb.w	r4, fp
   b6160:	42a5      	cmp	r5, r4
   b6162:	d922      	bls.n	b61aa <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6164:	b9dc      	cbnz	r4, b619e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6166:	f1b8 0f00 	cmp.w	r8, #0
   b616a:	d018      	beq.n	b619e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b616c:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b616e:	b2d3      	uxtb	r3, r2
   b6170:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6172:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6174:	d805      	bhi.n	b6182 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b6176:	fa0a f402 	lsl.w	r4, sl, r2
   b617a:	430c      	orrs	r4, r1
   b617c:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b617e:	3201      	adds	r2, #1
   b6180:	e7f5      	b.n	b616e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6182:	4648      	mov	r0, r9
   b6184:	9101      	str	r1, [sp, #4]
   b6186:	f7ff ffc5 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b618a:	7833      	ldrb	r3, [r6, #0]
   b618c:	9901      	ldr	r1, [sp, #4]
   b618e:	4004      	ands	r4, r0
   b6190:	ea23 0301 	bic.w	r3, r3, r1
   b6194:	431c      	orrs	r4, r3
   b6196:	7034      	strb	r4, [r6, #0]
		index++;
   b6198:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b619c:	e7de      	b.n	b615c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b619e:	4648      	mov	r0, r9
   b61a0:	f7ff ffb8 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b61a4:	f806 000b 	strb.w	r0, [r6, fp]
   b61a8:	e7f6      	b.n	b6198 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b61aa:	2000      	movs	r0, #0
   b61ac:	f7ff ffb2 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b61b0:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b61b2:	7b38      	ldrb	r0, [r7, #12]
   b61b4:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b61b6:	b003      	add	sp, #12
   b61b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b61bc:	f002 bc1f 	b.w	b89fe <digitalWrite>
} // End PCD_ReadRegister()
   b61c0:	b003      	add	sp, #12
   b61c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b61c6:	b538      	push	{r3, r4, r5, lr}
   b61c8:	460c      	mov	r4, r1
   b61ca:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b61cc:	2100      	movs	r1, #0
   b61ce:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b61d0:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b61d4:	f002 fc13 	bl	b89fe <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b61d8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b61dc:	f7ff ff9a 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b61e0:	2000      	movs	r0, #0
   b61e2:	f7ff ff97 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b61e6:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b61e8:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b61ea:	7b28      	ldrb	r0, [r5, #12]
   b61ec:	f002 fc07 	bl	b89fe <digitalWrite>
} // End PCD_ReadRegister()
   b61f0:	4620      	mov	r0, r4
   b61f2:	bd38      	pop	{r3, r4, r5, pc}

000b61f4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b61f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61f6:	460f      	mov	r7, r1
   b61f8:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61fa:	2100      	movs	r1, #0
   b61fc:	7b00      	ldrb	r0, [r0, #12]
								) {
   b61fe:	4615      	mov	r5, r2
   b6200:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6202:	f002 fbfc 	bl	b89fe <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b6206:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b620a:	f7ff ff83 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b620e:	4425      	add	r5, r4
   b6210:	42ac      	cmp	r4, r5
   b6212:	d004      	beq.n	b621e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b6214:	f814 0b01 	ldrb.w	r0, [r4], #1
   b6218:	f7ff ff7c 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b621c:	e7f8      	b.n	b6210 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b621e:	7b30      	ldrb	r0, [r6, #12]
   b6220:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6226:	f002 bbea 	b.w	b89fe <digitalWrite>

000b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b622a:	b570      	push	{r4, r5, r6, lr}
   b622c:	4604      	mov	r4, r0
   b622e:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6230:	7b00      	ldrb	r0, [r0, #12]
   b6232:	2100      	movs	r1, #0
								) {
   b6234:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6236:	f002 fbe2 	bl	b89fe <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b623a:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b623e:	f7ff ff69 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b6242:	4628      	mov	r0, r5
   b6244:	f7ff ff66 	bl	b6114 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6248:	7b20      	ldrb	r0, [r4, #12]
   b624a:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b624c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6250:	f002 bbd5 	b.w	b89fe <digitalWrite>

000b6254 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6254:	b570      	push	{r4, r5, r6, lr}
   b6256:	4616      	mov	r6, r2
   b6258:	4604      	mov	r4, r0
   b625a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b625c:	f7ff ffb3 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6260:	4330      	orrs	r0, r6
   b6262:	b2c2      	uxtb	r2, r0
   b6264:	4629      	mov	r1, r5
   b6266:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b6268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b626c:	f7ff bfdd 	b.w	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6270 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6270:	b570      	push	{r4, r5, r6, lr}
   b6272:	4616      	mov	r6, r2
   b6274:	4604      	mov	r4, r0
   b6276:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6278:	f7ff ffa5 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b627c:	ea20 0006 	bic.w	r0, r0, r6
   b6280:	b2c2      	uxtb	r2, r0
   b6282:	4629      	mov	r1, r5
   b6284:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b6286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b628a:	f7ff bfce 	b.w	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b628e <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b628e:	2208      	movs	r2, #8
   b6290:	2110      	movs	r1, #16
   b6292:	f7ff bfed 	b.w	b6270 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b6296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6298:	4604      	mov	r4, r0
   b629a:	4615      	mov	r5, r2
   b629c:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b629e:	2200      	movs	r2, #0
   b62a0:	2102      	movs	r1, #2
					 ) {
   b62a2:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b62a4:	f7ff ffc1 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b62a8:	2204      	movs	r2, #4
   b62aa:	210a      	movs	r1, #10
   b62ac:	4620      	mov	r0, r4
   b62ae:	f7ff ffbc 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b62b2:	2280      	movs	r2, #128	; 0x80
   b62b4:	2114      	movs	r1, #20
   b62b6:	4620      	mov	r0, r4
   b62b8:	f7ff ffcc 	bl	b6254 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b62bc:	462a      	mov	r2, r5
   b62be:	463b      	mov	r3, r7
   b62c0:	2112      	movs	r1, #18
   b62c2:	4620      	mov	r0, r4
   b62c4:	f7ff ff96 	bl	b61f4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b62c8:	2203      	movs	r2, #3
   b62ca:	2102      	movs	r1, #2
   b62cc:	4620      	mov	r0, r4
   b62ce:	f7ff ffac 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b62d2:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b62d6:	210a      	movs	r1, #10
   b62d8:	4620      	mov	r0, r4
   b62da:	f7ff ff74 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b62de:	0743      	lsls	r3, r0, #29
   b62e0:	d405      	bmi.n	b62ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b62e2:	3d01      	subs	r5, #1
   b62e4:	b2ad      	uxth	r5, r5
   b62e6:	2d00      	cmp	r5, #0
   b62e8:	d1f5      	bne.n	b62d6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b62ea:	2004      	movs	r0, #4
   b62ec:	e00f      	b.n	b630e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b62ee:	2200      	movs	r2, #0
   b62f0:	2102      	movs	r1, #2
   b62f2:	4620      	mov	r0, r4
   b62f4:	f7ff ff99 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b62f8:	2144      	movs	r1, #68	; 0x44
   b62fa:	4620      	mov	r0, r4
   b62fc:	f7ff ff63 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6300:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6302:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6304:	4620      	mov	r0, r4
   b6306:	f7ff ff5e 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b630a:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b630c:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6310 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b6310:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6312:	220f      	movs	r2, #15
   b6314:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b6316:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6318:	f7ff ff87 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b631c:	2032      	movs	r0, #50	; 0x32
   b631e:	f001 ffc7 	bl	b82b0 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b6322:	2102      	movs	r1, #2
   b6324:	4620      	mov	r0, r4
   b6326:	f7ff ff4e 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b632a:	06c3      	lsls	r3, r0, #27
   b632c:	d4f9      	bmi.n	b6322 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b632e:	bd10      	pop	{r4, pc}

000b6330 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b6330:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b6332:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b6334:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b6336:	f7ff ff46 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b633a:	f000 0303 	and.w	r3, r0, #3
   b633e:	2b03      	cmp	r3, #3
   b6340:	d008      	beq.n	b6354 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6342:	f040 0203 	orr.w	r2, r0, #3
   b6346:	b2d2      	uxtb	r2, r2
   b6348:	4620      	mov	r0, r4
   b634a:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b634c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6350:	f7ff bf6b 	b.w	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b6354:	bd10      	pop	{r4, pc}

000b6356 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b6356:	b510      	push	{r4, lr}
   b6358:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b635a:	7b40      	ldrb	r0, [r0, #13]
   b635c:	f002 fb68 	bl	b8a30 <digitalRead>
   b6360:	bb48      	cbnz	r0, b63b6 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b6362:	7b60      	ldrb	r0, [r4, #13]
   b6364:	2101      	movs	r1, #1
   b6366:	f002 fb4a 	bl	b89fe <digitalWrite>
		delay(50);
   b636a:	2032      	movs	r0, #50	; 0x32
   b636c:	f001 ffa0 	bl	b82b0 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6370:	4620      	mov	r0, r4
   b6372:	2280      	movs	r2, #128	; 0x80
   b6374:	2154      	movs	r1, #84	; 0x54
   b6376:	f7ff ff58 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b637a:	4620      	mov	r0, r4
   b637c:	22a9      	movs	r2, #169	; 0xa9
   b637e:	2156      	movs	r1, #86	; 0x56
   b6380:	f7ff ff53 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6384:	4620      	mov	r0, r4
   b6386:	2203      	movs	r2, #3
   b6388:	2158      	movs	r1, #88	; 0x58
   b638a:	f7ff ff4e 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b638e:	4620      	mov	r0, r4
   b6390:	22e8      	movs	r2, #232	; 0xe8
   b6392:	215a      	movs	r1, #90	; 0x5a
   b6394:	f7ff ff49 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b6398:	4620      	mov	r0, r4
   b639a:	2240      	movs	r2, #64	; 0x40
   b639c:	212a      	movs	r1, #42	; 0x2a
   b639e:	f7ff ff44 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b63a2:	4620      	mov	r0, r4
   b63a4:	223d      	movs	r2, #61	; 0x3d
   b63a6:	2122      	movs	r1, #34	; 0x22
   b63a8:	f7ff ff3f 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b63ac:	4620      	mov	r0, r4
} // End PCD_Init()
   b63ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b63b2:	f7ff bfbd 	b.w	b6330 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b63b6:	4620      	mov	r0, r4
   b63b8:	f7ff ffaa 	bl	b6310 <_ZN7MFRC5229PCD_ResetEv>
   b63bc:	e7d8      	b.n	b6370 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b63be <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b63be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63c2:	b089      	sub	sp, #36	; 0x24
   b63c4:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b63c8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b63cc:	9203      	str	r2, [sp, #12]
   b63ce:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b63d2:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b63d6:	9204      	str	r2, [sp, #16]
   b63d8:	4604      	mov	r4, r0
   b63da:	468a      	mov	sl, r1
   b63dc:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b63de:	f1b9 0f00 	cmp.w	r9, #0
   b63e2:	d03e      	beq.n	b6462 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b63e4:	f899 8000 	ldrb.w	r8, [r9]
   b63e8:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b63ea:	2200      	movs	r2, #0
   b63ec:	2102      	movs	r1, #2
   b63ee:	4620      	mov	r0, r4
   b63f0:	f7ff ff1b 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b63f4:	227f      	movs	r2, #127	; 0x7f
   b63f6:	2108      	movs	r1, #8
   b63f8:	4620      	mov	r0, r4
   b63fa:	f7ff ff16 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b63fe:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6402:	2280      	movs	r2, #128	; 0x80
   b6404:	2114      	movs	r1, #20
   b6406:	4620      	mov	r0, r4
   b6408:	f7ff ff24 	bl	b6254 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b640c:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b6410:	9b05      	ldr	r3, [sp, #20]
   b6412:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b6416:	2112      	movs	r1, #18
   b6418:	4620      	mov	r0, r4
   b641a:	f7ff feeb 	bl	b61f4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b641e:	4642      	mov	r2, r8
   b6420:	211a      	movs	r1, #26
   b6422:	4620      	mov	r0, r4
   b6424:	f7ff ff01 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b6428:	4652      	mov	r2, sl
   b642a:	2102      	movs	r1, #2
   b642c:	4620      	mov	r0, r4
   b642e:	f7ff fefc 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b6432:	f1ba 0f0c 	cmp.w	sl, #12
   b6436:	d104      	bne.n	b6442 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b6438:	2280      	movs	r2, #128	; 0x80
   b643a:	211a      	movs	r1, #26
   b643c:	4620      	mov	r0, r4
   b643e:	f7ff ff09 	bl	b6254 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b6442:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b6446:	2108      	movs	r1, #8
   b6448:	4620      	mov	r0, r4
   b644a:	f7ff febc 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b644e:	9b03      	ldr	r3, [sp, #12]
   b6450:	4218      	tst	r0, r3
   b6452:	d108      	bne.n	b6466 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b6454:	07c3      	lsls	r3, r0, #31
   b6456:	d402      	bmi.n	b645e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b6458:	f1b8 0801 	subs.w	r8, r8, #1
   b645c:	d1f3      	bne.n	b6446 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b645e:	2004      	movs	r0, #4
   b6460:	e04d      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b6462:	46c8      	mov	r8, r9
   b6464:	e7c0      	b.n	b63e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6466:	210c      	movs	r1, #12
   b6468:	4620      	mov	r0, r4
   b646a:	f7ff feac 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b646e:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6472:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6474:	d146      	bne.n	b6504 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b6476:	b1dd      	cbz	r5, b64b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b6478:	b1d6      	cbz	r6, b64b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b647a:	2114      	movs	r1, #20
   b647c:	4620      	mov	r0, r4
   b647e:	f7ff fea2 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b6482:	7833      	ldrb	r3, [r6, #0]
   b6484:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b6486:	4602      	mov	r2, r0
		if (n > *backLen) {
   b6488:	d33e      	bcc.n	b6508 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b648a:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b648c:	462b      	mov	r3, r5
   b648e:	2112      	movs	r1, #18
   b6490:	4620      	mov	r0, r4
   b6492:	f8cd b000 	str.w	fp, [sp]
   b6496:	f7ff fe47 	bl	b6128 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b649a:	2118      	movs	r1, #24
   b649c:	4620      	mov	r0, r4
   b649e:	f7ff fe92 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b64a2:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b64a6:	f1b9 0f00 	cmp.w	r9, #0
   b64aa:	d001      	beq.n	b64b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b64ac:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b64b0:	f018 0f08 	tst.w	r8, #8
   b64b4:	d12a      	bne.n	b650c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b64b6:	b35d      	cbz	r5, b6510 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b64b8:	b356      	cbz	r6, b6510 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b64ba:	9b04      	ldr	r3, [sp, #16]
   b64bc:	b343      	cbz	r3, b6510 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b64be:	7832      	ldrb	r2, [r6, #0]
   b64c0:	2a01      	cmp	r2, #1
   b64c2:	d103      	bne.n	b64cc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b64c4:	2f04      	cmp	r7, #4
   b64c6:	d125      	bne.n	b6514 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b64c8:	2009      	movs	r0, #9
   b64ca:	e018      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b64cc:	d922      	bls.n	b6514 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b64ce:	bb0f      	cbnz	r7, b6514 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b64d0:	3a02      	subs	r2, #2
   b64d2:	ab07      	add	r3, sp, #28
   b64d4:	b2d2      	uxtb	r2, r2
   b64d6:	4629      	mov	r1, r5
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff fedc 	bl	b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b64de:	2801      	cmp	r0, #1
   b64e0:	d10d      	bne.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b64e2:	7833      	ldrb	r3, [r6, #0]
   b64e4:	441d      	add	r5, r3
   b64e6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b64ea:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b64ee:	429a      	cmp	r2, r3
   b64f0:	d110      	bne.n	b6514 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b64f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b64f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b64fa:	429a      	cmp	r2, r3
   b64fc:	d10a      	bne.n	b6514 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b64fe:	b009      	add	sp, #36	; 0x24
   b6500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b6504:	2002      	movs	r0, #2
   b6506:	e7fa      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b6508:	2005      	movs	r0, #5
   b650a:	e7f8      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b650c:	2003      	movs	r0, #3
   b650e:	e7f6      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b6510:	2001      	movs	r0, #1
   b6512:	e7f4      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b6514:	2008      	movs	r0, #8
   b6516:	e7f2      	b.n	b64fe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b6518 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b6518:	b510      	push	{r4, lr}
   b651a:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b651c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b6520:	9405      	str	r4, [sp, #20]
   b6522:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b6526:	9404      	str	r4, [sp, #16]
   b6528:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b652a:	9403      	str	r4, [sp, #12]
   b652c:	9c08      	ldr	r4, [sp, #32]
   b652e:	9200      	str	r2, [sp, #0]
   b6530:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b6534:	2230      	movs	r2, #48	; 0x30
   b6536:	460b      	mov	r3, r1
   b6538:	210c      	movs	r1, #12
   b653a:	f7ff ff40 	bl	b63be <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b653e:	b006      	add	sp, #24
   b6540:	bd10      	pop	{r4, pc}

000b6542 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b6542:	b570      	push	{r4, r5, r6, lr}
   b6544:	b088      	sub	sp, #32
   b6546:	4606      	mov	r6, r0
   b6548:	461c      	mov	r4, r3
   b654a:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b654e:	4615      	mov	r5, r2
   b6550:	b31a      	cbz	r2, b659a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b6552:	781b      	ldrb	r3, [r3, #0]
   b6554:	2b01      	cmp	r3, #1
   b6556:	d920      	bls.n	b659a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6558:	2280      	movs	r2, #128	; 0x80
   b655a:	211c      	movs	r1, #28
   b655c:	f7ff fe88 	bl	b6270 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6560:	2307      	movs	r3, #7
   b6562:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b6566:	2300      	movs	r3, #0
   b6568:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b656c:	f10d 031f 	add.w	r3, sp, #31
   b6570:	e9cd 4300 	strd	r4, r3, [sp]
   b6574:	2201      	movs	r2, #1
   b6576:	462b      	mov	r3, r5
   b6578:	f10d 0117 	add.w	r1, sp, #23
   b657c:	4630      	mov	r0, r6
   b657e:	f7ff ffcb 	bl	b6518 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6582:	2801      	cmp	r0, #1
   b6584:	d107      	bne.n	b6596 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b6586:	7823      	ldrb	r3, [r4, #0]
   b6588:	2b02      	cmp	r3, #2
   b658a:	d108      	bne.n	b659e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b658c:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6590:	2b00      	cmp	r3, #0
   b6592:	bf18      	it	ne
   b6594:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b6596:	b008      	add	sp, #32
   b6598:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b659a:	2005      	movs	r0, #5
   b659c:	e7fb      	b.n	b6596 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b659e:	2002      	movs	r0, #2
   b65a0:	e7f9      	b.n	b6596 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b65a2 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b65a2:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b65a4:	460a      	mov	r2, r1
   b65a6:	2126      	movs	r1, #38	; 0x26
   b65a8:	f7ff bfcb 	b.w	b6542 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b65ac <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b65ac:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b65ae:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b65b0:	f10d 0203 	add.w	r2, sp, #3
   b65b4:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b65b6:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b65ba:	f7ff fff2 	bl	b65a2 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b65be:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b65c2:	1e43      	subs	r3, r0, #1
   b65c4:	4258      	negs	r0, r3
   b65c6:	4158      	adcs	r0, r3
   b65c8:	b003      	add	sp, #12
   b65ca:	f85d fb04 	ldr.w	pc, [sp], #4

000b65ce <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b65ce:	b570      	push	{r4, r5, r6, lr}
   b65d0:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b65d2:	2350      	movs	r3, #80	; 0x50
   b65d4:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b65d8:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b65da:	f10d 0316 	add.w	r3, sp, #22
   b65de:	2202      	movs	r2, #2
   b65e0:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b65e2:	4606      	mov	r6, r0
	buffer[1] = 0;
   b65e4:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b65e8:	f7ff fe55 	bl	b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b65ec:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b65ee:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b65f0:	d10f      	bne.n	b6612 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b65f2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b65f6:	e9cd 4400 	strd	r4, r4, [sp]
   b65fa:	4623      	mov	r3, r4
   b65fc:	2204      	movs	r2, #4
   b65fe:	a905      	add	r1, sp, #20
   b6600:	4630      	mov	r0, r6
   b6602:	f7ff ff89 	bl	b6518 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b6606:	2804      	cmp	r0, #4
   b6608:	d003      	beq.n	b6612 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b660a:	2801      	cmp	r0, #1
   b660c:	bf14      	ite	ne
   b660e:	4605      	movne	r5, r0
   b6610:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b6612:	4628      	mov	r0, r5
   b6614:	b006      	add	sp, #24
   b6616:	bd70      	pop	{r4, r5, r6, pc}

000b6618 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b6618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b661a:	4606      	mov	r6, r0
   b661c:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b661e:	4614      	mov	r4, r2
   b6620:	b1ca      	cbz	r2, b6656 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b6622:	781b      	ldrb	r3, [r3, #0]
   b6624:	2b11      	cmp	r3, #17
   b6626:	d916      	bls.n	b6656 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b6628:	2330      	movs	r3, #48	; 0x30
   b662a:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b662c:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b662e:	1c93      	adds	r3, r2, #2
   b6630:	4621      	mov	r1, r4
   b6632:	2202      	movs	r2, #2
   b6634:	f7ff fe2f 	bl	b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6638:	2801      	cmp	r0, #1
   b663a:	d10a      	bne.n	b6652 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b663c:	2300      	movs	r3, #0
   b663e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6642:	9003      	str	r0, [sp, #12]
   b6644:	9500      	str	r5, [sp, #0]
   b6646:	4623      	mov	r3, r4
   b6648:	2204      	movs	r2, #4
   b664a:	4621      	mov	r1, r4
   b664c:	4630      	mov	r0, r6
   b664e:	f7ff ff63 	bl	b6518 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b6652:	b004      	add	sp, #16
   b6654:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b6656:	2005      	movs	r0, #5
   b6658:	e7fb      	b.n	b6652 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b665a <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b665a:	b510      	push	{r4, lr}
   b665c:	b08a      	sub	sp, #40	; 0x28
   b665e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6660:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6664:	681a      	ldr	r2, [r3, #0]
   b6666:	889b      	ldrh	r3, [r3, #4]
   b6668:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b666c:	7863      	ldrb	r3, [r4, #1]
   b666e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6672:	78a3      	ldrb	r3, [r4, #2]
   b6674:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b6678:	78e3      	ldrb	r3, [r4, #3]
   b667a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b667e:	7923      	ldrb	r3, [r4, #4]
   b6680:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6684:	2300      	movs	r3, #0
   b6686:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b668a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b668e:	9301      	str	r3, [sp, #4]
   b6690:	230c      	movs	r3, #12
	sendData[0] = command;
   b6692:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b6696:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b669a:	9300      	str	r3, [sp, #0]
   b669c:	2210      	movs	r2, #16
   b669e:	ab07      	add	r3, sp, #28
   b66a0:	210e      	movs	r1, #14
   b66a2:	f7ff fe8c 	bl	b63be <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b66a6:	b00a      	add	sp, #40	; 0x28
   b66a8:	bd10      	pop	{r4, pc}

000b66aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b66aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b66ae:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b66b0:	b08b      	sub	sp, #44	; 0x2c
   b66b2:	4682      	mov	sl, r0
   b66b4:	460f      	mov	r7, r1
   b66b6:	4690      	mov	r8, r2
	if (validBits > 80) {
   b66b8:	f200 8140 	bhi.w	b693c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b66bc:	2280      	movs	r2, #128	; 0x80
   b66be:	211c      	movs	r1, #28
   b66c0:	f7ff fdd6 	bl	b6270 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b66c4:	2393      	movs	r3, #147	; 0x93
   b66c6:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b66ca:	f1b8 0f00 	cmp.w	r8, #0
   b66ce:	f000 80bc 	beq.w	b684a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b66d2:	783c      	ldrb	r4, [r7, #0]
   b66d4:	2c04      	cmp	r4, #4
   b66d6:	bf94      	ite	ls
   b66d8:	2300      	movls	r3, #0
   b66da:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b66dc:	2501      	movs	r5, #1
   b66de:	2600      	movs	r6, #0
   b66e0:	e00b      	b.n	b66fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b66e2:	2395      	movs	r3, #149	; 0x95
   b66e4:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b66e8:	f1b8 0f00 	cmp.w	r8, #0
   b66ec:	f000 80af 	beq.w	b684e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b66f0:	783c      	ldrb	r4, [r7, #0]
   b66f2:	2c07      	cmp	r4, #7
   b66f4:	bf94      	ite	ls
   b66f6:	2300      	movls	r3, #0
   b66f8:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b66fa:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b66fe:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b6700:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b6704:	2b00      	cmp	r3, #0
   b6706:	f000 80a4 	beq.w	b6852 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b670a:	2288      	movs	r2, #136	; 0x88
   b670c:	f88d 201e 	strb.w	r2, [sp, #30]
   b6710:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6712:	f014 0207 	ands.w	r2, r4, #7
   b6716:	bf18      	it	ne
   b6718:	2201      	movne	r2, #1
   b671a:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b671e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6722:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b6724:	d01d      	beq.n	b6762 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b6726:	2b00      	cmp	r3, #0
   b6728:	bf14      	ite	ne
   b672a:	f04f 0903 	movne.w	r9, #3
   b672e:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b6732:	f106 0c01 	add.w	ip, r6, #1
   b6736:	4591      	cmp	r9, r2
   b6738:	bf94      	ite	ls
   b673a:	eb01 0e09 	addls.w	lr, r1, r9
   b673e:	eb01 0e02 	addhi.w	lr, r1, r2
   b6742:	fa57 fc8c 	uxtab	ip, r7, ip
   b6746:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b674a:	460a      	mov	r2, r1
   b674c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6750:	3101      	adds	r1, #1
   b6752:	b2c9      	uxtb	r1, r1
   b6754:	445a      	add	r2, fp
   b6756:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b675a:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b675e:	4571      	cmp	r1, lr
   b6760:	d1f3      	bne.n	b674a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6762:	b10b      	cbz	r3, b6768 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6764:	3008      	adds	r0, #8
   b6766:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b6768:	2c1f      	cmp	r4, #31
   b676a:	dd74      	ble.n	b6856 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b676c:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6770:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6774:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6778:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b677c:	4053      	eors	r3, r2
   b677e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6782:	4053      	eors	r3, r2
   b6784:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b6788:	4053      	eors	r3, r2
   b678a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b678e:	2207      	movs	r2, #7
   b6790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6794:	a907      	add	r1, sp, #28
   b6796:	4650      	mov	r0, sl
   b6798:	f7ff fd7d 	bl	b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b679c:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b679e:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b67a0:	f040 80c8 	bne.w	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b67a4:	2300      	movs	r3, #0
   b67a6:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b67aa:	2303      	movs	r3, #3
   b67ac:	f88d 301b 	strb.w	r3, [sp, #27]
   b67b0:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b67b2:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b67b6:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b67ba:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b67be:	9305      	str	r3, [sp, #20]
   b67c0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b67c4:	b2d2      	uxtb	r2, r2
   b67c6:	211a      	movs	r1, #26
   b67c8:	4650      	mov	r0, sl
   b67ca:	f7ff fd2e 	bl	b622a <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b67ce:	9b05      	ldr	r3, [sp, #20]
   b67d0:	9302      	str	r3, [sp, #8]
   b67d2:	f10d 031a 	add.w	r3, sp, #26
   b67d6:	2200      	movs	r2, #0
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	f10d 031b 	add.w	r3, sp, #27
   b67de:	9203      	str	r2, [sp, #12]
   b67e0:	9300      	str	r3, [sp, #0]
   b67e2:	464a      	mov	r2, r9
   b67e4:	465b      	mov	r3, fp
   b67e6:	a907      	add	r1, sp, #28
   b67e8:	4650      	mov	r0, sl
   b67ea:	f7ff fe95 	bl	b6518 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b67ee:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b67f0:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b67f2:	d14c      	bne.n	b688e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b67f4:	211c      	movs	r1, #28
   b67f6:	4650      	mov	r0, sl
   b67f8:	f7ff fce5 	bl	b61c6 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b67fc:	0681      	lsls	r1, r0, #26
   b67fe:	f100 8099 	bmi.w	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b6802:	f010 001f 	ands.w	r0, r0, #31
   b6806:	bf08      	it	eq
   b6808:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b680a:	42a0      	cmp	r0, r4
   b680c:	f340 8087 	ble.w	b691e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b6810:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6812:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b6816:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6818:	f013 0307 	ands.w	r3, r3, #7
   b681c:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b6820:	bf18      	it	ne
   b6822:	2301      	movne	r3, #1
   b6824:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b6826:	4418      	add	r0, r3
   b6828:	ab0a      	add	r3, sp, #40	; 0x28
   b682a:	4418      	add	r0, r3
   b682c:	2301      	movs	r3, #1
   b682e:	fa03 f202 	lsl.w	r2, r3, r2
   b6832:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b6836:	4313      	orrs	r3, r2
   b6838:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b683c:	e794      	b.n	b6768 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b683e:	2397      	movs	r3, #151	; 0x97
   b6840:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b6844:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b6846:	4623      	mov	r3, r4
				break;
   b6848:	e757      	b.n	b66fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b684a:	4643      	mov	r3, r8
   b684c:	e746      	b.n	b66dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b684e:	4643      	mov	r3, r8
   b6850:	e753      	b.n	b66fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b6852:	2102      	movs	r1, #2
   b6854:	e75d      	b.n	b6712 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b6856:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6858:	3302      	adds	r3, #2
   b685a:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b685c:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6860:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6864:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6868:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b686c:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6870:	bf18      	it	ne
   b6872:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b6876:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6878:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b687a:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b687e:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6882:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b6886:	f88d 301b 	strb.w	r3, [sp, #27]
   b688a:	9404      	str	r4, [sp, #16]
   b688c:	e795      	b.n	b67ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b688e:	2801      	cmp	r0, #1
   b6890:	d150      	bne.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6892:	9b04      	ldr	r3, [sp, #16]
   b6894:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b6896:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b689a:	f77f af67 	ble.w	b676c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b689e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b68a2:	2b88      	cmp	r3, #136	; 0x88
   b68a4:	d13e      	bne.n	b6924 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b68a6:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b68a8:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b68aa:	3601      	adds	r6, #1
   b68ac:	441a      	add	r2, r3
   b68ae:	fa57 f686 	uxtab	r6, r7, r6
   b68b2:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b68b4:	4619      	mov	r1, r3
   b68b6:	a80a      	add	r0, sp, #40	; 0x28
   b68b8:	3301      	adds	r3, #1
   b68ba:	4401      	add	r1, r0
   b68bc:	b2db      	uxtb	r3, r3
   b68be:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b68c2:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b68c6:	4293      	cmp	r3, r2
   b68c8:	d1f4      	bne.n	b68b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b68ca:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b68ce:	2e03      	cmp	r6, #3
   b68d0:	d137      	bne.n	b6942 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b68d2:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b68d6:	bba4      	cbnz	r4, b6942 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b68d8:	f10d 031e 	add.w	r3, sp, #30
   b68dc:	2201      	movs	r2, #1
   b68de:	4659      	mov	r1, fp
   b68e0:	4650      	mov	r0, sl
   b68e2:	f7ff fcd8 	bl	b6296 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b68e6:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b68e8:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b68ea:	d123      	bne.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b68ec:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b68f0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b68f4:	429a      	cmp	r2, r3
   b68f6:	d127      	bne.n	b6948 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b68f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b68fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6900:	429a      	cmp	r2, r3
   b6902:	d121      	bne.n	b6948 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6904:	f89b 3000 	ldrb.w	r3, [fp]
   b6908:	075a      	lsls	r2, r3, #29
   b690a:	d50e      	bpl.n	b692a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b690c:	3501      	adds	r5, #1
   b690e:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b6910:	2d03      	cmp	r5, #3
   b6912:	d094      	beq.n	b683e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b6914:	2d04      	cmp	r5, #4
   b6916:	d002      	beq.n	b691e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b6918:	2d02      	cmp	r5, #2
   b691a:	f43f aee2 	beq.w	b66e2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b691e:	f04f 0906 	mov.w	r9, #6
   b6922:	e007      	b.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6924:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6926:	2204      	movs	r2, #4
   b6928:	e7bf      	b.n	b68aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b692a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b692e:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6930:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6932:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6934:	4648      	mov	r0, r9
   b6936:	b00b      	add	sp, #44	; 0x2c
   b6938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b693c:	f04f 0907 	mov.w	r9, #7
   b6940:	e7f8      	b.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6942:	f04f 0902 	mov.w	r9, #2
   b6946:	e7f5      	b.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b6948:	f04f 0908 	mov.w	r9, #8
   b694c:	e7f2      	b.n	b6934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b694e <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b694e:	b508      	push	{r3, lr}
   b6950:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6952:	2200      	movs	r2, #0
   b6954:	f7ff fea9 	bl	b66aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6958:	1e43      	subs	r3, r0, #1
   b695a:	4258      	negs	r0, r3
   b695c:	4158      	adcs	r0, r3
   b695e:	bd08      	pop	{r3, pc}

000b6960 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b6960:	6001      	str	r1, [r0, #0]
}
   b6962:	4770      	bx	lr

000b6964 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6964:	b510      	push	{r4, lr}
   b6966:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6968:	2101      	movs	r1, #1
   b696a:	8800      	ldrh	r0, [r0, #0]
   b696c:	f002 f836 	bl	b89dc <pinMode>
	digitalWrite(_pin, LOW);
   b6970:	8820      	ldrh	r0, [r4, #0]
   b6972:	2100      	movs	r1, #0
   b6974:	f002 f843 	bl	b89fe <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6978:	2002      	movs	r0, #2
   b697a:	f000 ffbb 	bl	b78f4 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b697e:	8820      	ldrh	r0, [r4, #0]
   b6980:	2101      	movs	r1, #1
   b6982:	f002 f83c 	bl	b89fe <digitalWrite>
   b6986:	2005      	movs	r0, #5
   b6988:	f000 ffb4 	bl	b78f4 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b698c:	8820      	ldrh	r0, [r4, #0]
   b698e:	2100      	movs	r1, #0
   b6990:	f002 f835 	bl	b89fe <digitalWrite>
	pinMode(_pin,INPUT);
   b6994:	8820      	ldrh	r0, [r4, #0]
   b6996:	2100      	movs	r1, #0
   b6998:	f002 f820 	bl	b89dc <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b699c:	8820      	ldrh	r0, [r4, #0]
   b699e:	2101      	movs	r1, #1
   b69a0:	f002 f870 	bl	b8a84 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b69a4:	233a      	movs	r3, #58	; 0x3a
   b69a6:	fb90 f0f3 	sdiv	r0, r0, r3
   b69aa:	bd10      	pop	{r4, pc}

000b69ac <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b69ac:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b69ae:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b69b0:	2301      	movs	r3, #1
	_pin = pin;
   b69b2:	7181      	strb	r1, [r0, #6]
	_type = type;
   b69b4:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b69b6:	7403      	strb	r3, [r0, #16]
}
   b69b8:	bd10      	pop	{r4, pc}

000b69ba <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b69ba:	b510      	push	{r4, lr}
   b69bc:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b69be:	2100      	movs	r1, #0
   b69c0:	7980      	ldrb	r0, [r0, #6]
   b69c2:	f002 f80b 	bl	b89dc <pinMode>
	digitalWrite(_pin, HIGH);
   b69c6:	79a0      	ldrb	r0, [r4, #6]
   b69c8:	2101      	movs	r1, #1
   b69ca:	f002 f818 	bl	b89fe <digitalWrite>
	_lastreadtime = 0;
   b69ce:	2300      	movs	r3, #0
   b69d0:	60e3      	str	r3, [r4, #12]
}
   b69d2:	bd10      	pop	{r4, pc}

000b69d4 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b69d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b69d8:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b69da:	f000 ff93 	bl	b7904 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b69de:	68e3      	ldr	r3, [r4, #12]
   b69e0:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b69e2:	bf84      	itt	hi
   b69e4:	2300      	movhi	r3, #0
   b69e6:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b69e8:	7c23      	ldrb	r3, [r4, #16]
   b69ea:	b923      	cbnz	r3, b69f6 <_ZN3DHT4readEv+0x22>
   b69ec:	68e3      	ldr	r3, [r4, #12]
   b69ee:	1ac0      	subs	r0, r0, r3
   b69f0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b69f4:	d367      	bcc.n	b6ac6 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b69f6:	2500      	movs	r5, #0
   b69f8:	7425      	strb	r5, [r4, #16]
   b69fa:	f000 ff83 	bl	b7904 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b69fe:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b6a00:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6a02:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b6a04:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6a06:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b6a08:	f001 fff9 	bl	b89fe <digitalWrite>
	delay(250);
   b6a0c:	20fa      	movs	r0, #250	; 0xfa
   b6a0e:	f001 fc4f 	bl	b82b0 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b6a12:	79a0      	ldrb	r0, [r4, #6]
   b6a14:	2101      	movs	r1, #1
   b6a16:	f001 ffe1 	bl	b89dc <pinMode>
	digitalWrite(_pin, LOW);
   b6a1a:	4629      	mov	r1, r5
   b6a1c:	79a0      	ldrb	r0, [r4, #6]
   b6a1e:	f001 ffee 	bl	b89fe <digitalWrite>
	delay(20);
   b6a22:	2014      	movs	r0, #20
   b6a24:	f001 fc44 	bl	b82b0 <delay>
	noInterrupts();
   b6a28:	f001 fdfe 	bl	b8628 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b6a2c:	2101      	movs	r1, #1
   b6a2e:	79a0      	ldrb	r0, [r4, #6]
   b6a30:	f001 ffe5 	bl	b89fe <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6a34:	2028      	movs	r0, #40	; 0x28
   b6a36:	f000 ff5d 	bl	b78f4 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b6a3a:	79a0      	ldrb	r0, [r4, #6]
   b6a3c:	4629      	mov	r1, r5
   b6a3e:	f001 ffcd 	bl	b89dc <pinMode>
	uint8_t j = 0, i;
   b6a42:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b6a44:	2701      	movs	r7, #1
   b6a46:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b6a4a:	79a0      	ldrb	r0, [r4, #6]
   b6a4c:	f001 fff0 	bl	b8a30 <digitalRead>
   b6a50:	42b8      	cmp	r0, r7
   b6a52:	fa5f f988 	uxtb.w	r9, r8
   b6a56:	d108      	bne.n	b6a6a <_ZN3DHT4readEv+0x96>
   b6a58:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b6a5a:	f108 0801 	add.w	r8, r8, #1
   b6a5e:	f000 ff49 	bl	b78f4 <HAL_Delay_Microseconds>
   b6a62:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6a66:	d1f0      	bne.n	b6a4a <_ZN3DHT4readEv+0x76>
   b6a68:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b6a6a:	79a0      	ldrb	r0, [r4, #6]
   b6a6c:	f001 ffe0 	bl	b8a30 <digitalRead>

		if (counter == 255) break;
   b6a70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b6a74:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b6a76:	d014      	beq.n	b6aa2 <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b6a78:	2d03      	cmp	r5, #3
   b6a7a:	d90e      	bls.n	b6a9a <_ZN3DHT4readEv+0xc6>
   b6a7c:	07ea      	lsls	r2, r5, #31
   b6a7e:	d40c      	bmi.n	b6a9a <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b6a80:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b6a82:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b6a84:	5ca3      	ldrb	r3, [r4, r2]
   b6a86:	005b      	lsls	r3, r3, #1
   b6a88:	b2db      	uxtb	r3, r3
   b6a8a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b6a8c:	7a21      	ldrb	r1, [r4, #8]
   b6a8e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b6a90:	bf3c      	itt	cc
   b6a92:	f043 0301 	orrcc.w	r3, r3, #1
   b6a96:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b6a98:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b6a9a:	3501      	adds	r5, #1
   b6a9c:	b2ed      	uxtb	r5, r5
   b6a9e:	2d55      	cmp	r5, #85	; 0x55
   b6aa0:	d1d1      	bne.n	b6a46 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b6aa2:	f001 fdc3 	bl	b862c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b6aa6:	2e27      	cmp	r6, #39	; 0x27
   b6aa8:	d90f      	bls.n	b6aca <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b6aaa:	7863      	ldrb	r3, [r4, #1]
   b6aac:	7820      	ldrb	r0, [r4, #0]
   b6aae:	4418      	add	r0, r3
   b6ab0:	78a3      	ldrb	r3, [r4, #2]
   b6ab2:	4418      	add	r0, r3
   b6ab4:	78e3      	ldrb	r3, [r4, #3]
   b6ab6:	4418      	add	r0, r3
   b6ab8:	7923      	ldrb	r3, [r4, #4]
   b6aba:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b6abc:	1ac3      	subs	r3, r0, r3
   b6abe:	4258      	negs	r0, r3
   b6ac0:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b6ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b6ac6:	2001      	movs	r0, #1
   b6ac8:	e7fb      	b.n	b6ac2 <_ZN3DHT4readEv+0xee>
	return false;
   b6aca:	2000      	movs	r0, #0
   b6acc:	e7f9      	b.n	b6ac2 <_ZN3DHT4readEv+0xee>
	...

000b6ad0 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b6ad0:	b510      	push	{r4, lr}
   b6ad2:	4604      	mov	r4, r0
	if (read()) {
   b6ad4:	f7ff ff7e 	bl	b69d4 <_ZN3DHT4readEv>
   b6ad8:	b320      	cbz	r0, b6b24 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b6ada:	79e3      	ldrb	r3, [r4, #7]
   b6adc:	2b0b      	cmp	r3, #11
   b6ade:	d01b      	beq.n	b6b18 <_ZN3DHT15readTemperatureEv+0x48>
   b6ae0:	3b15      	subs	r3, #21
   b6ae2:	2b01      	cmp	r3, #1
   b6ae4:	d81e      	bhi.n	b6b24 <_ZN3DHT15readTemperatureEv+0x54>
   b6ae6:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b6ae8:	eddf 6a10 	vldr	s13, [pc, #64]	; b6b2c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b6aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b6af0:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b6af4:	78e2      	ldrb	r2, [r4, #3]
   b6af6:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b6afa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b6afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b6b02:	061b      	lsls	r3, r3, #24
				f += data[3];
   b6b04:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b6b08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b6b0c:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b6b10:	d507      	bpl.n	b6b22 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b6b12:	eeb1 0a40 	vneg.f32	s0, s0
   b6b16:	e004      	b.n	b6b22 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b6b18:	78a3      	ldrb	r3, [r4, #2]
   b6b1a:	ee00 3a10 	vmov	s0, r3
   b6b1e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b6b22:	bd10      	pop	{r4, pc}
		switch (_type) {
   b6b24:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6b30 <_ZN3DHT15readTemperatureEv+0x60>
   b6b28:	e7fb      	b.n	b6b22 <_ZN3DHT15readTemperatureEv+0x52>
   b6b2a:	bf00      	nop
   b6b2c:	43800000 	.word	0x43800000
   b6b30:	7fc00000 	.word	0x7fc00000

000b6b34 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b6b34:	f7ff bfcc 	b.w	b6ad0 <_ZN3DHT15readTemperatureEv>

000b6b38 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6b38:	b510      	push	{r4, lr}
   b6b3a:	4b04      	ldr	r3, [pc, #16]	; (b6b4c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6b3c:	6003      	str	r3, [r0, #0]
   b6b3e:	4604      	mov	r4, r0
  if(buffer) {
   b6b40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6b42:	b108      	cbz	r0, b6b48 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6b44:	f001 f8aa 	bl	b7c9c <free>
    buffer = NULL;
  }
}
   b6b48:	4620      	mov	r0, r4
   b6b4a:	bd10      	pop	{r4, pc}
   b6b4c:	000baa60 	.word	0x000baa60

000b6b50 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6b50:	b510      	push	{r4, lr}
   b6b52:	4604      	mov	r4, r0
}
   b6b54:	f7ff fff0 	bl	b6b38 <_ZN16Adafruit_SSD1306D1Ev>
   b6b58:	4620      	mov	r0, r4
   b6b5a:	2150      	movs	r1, #80	; 0x50
   b6b5c:	f7fd fa9d 	bl	b409a <_ZdlPvj>
   b6b60:	4620      	mov	r0, r4
   b6b62:	bd10      	pop	{r4, pc}

000b6b64 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6b64:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6b66:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6b68:	db4b      	blt.n	b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b6a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6b6e:	428c      	cmp	r4, r1
   b6b70:	dd47      	ble.n	b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b72:	2a00      	cmp	r2, #0
   b6b74:	db45      	blt.n	b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6b76:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6b7a:	4294      	cmp	r4, r2
   b6b7c:	dd41      	ble.n	b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6b7e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6b80:	2c02      	cmp	r4, #2
   b6b82:	d01f      	beq.n	b6bc4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6b84:	2c03      	cmp	r4, #3
   b6b86:	d026      	beq.n	b6bd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6b88:	2c01      	cmp	r4, #1
   b6b8a:	d104      	bne.n	b6b96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6b8c:	8904      	ldrh	r4, [r0, #8]
   b6b8e:	43d2      	mvns	r2, r2
   b6b90:	4414      	add	r4, r2
      break;
   b6b92:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6b94:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6b96:	2b01      	cmp	r3, #1
   b6b98:	d023      	beq.n	b6be2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6b9a:	2b02      	cmp	r3, #2
   b6b9c:	d032      	beq.n	b6c04 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6b9e:	bb83      	cbnz	r3, b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6ba0:	2a00      	cmp	r2, #0
   b6ba2:	4613      	mov	r3, r2
   b6ba4:	8904      	ldrh	r4, [r0, #8]
   b6ba6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6ba8:	bfb8      	it	lt
   b6baa:	1dd3      	addlt	r3, r2, #7
   b6bac:	10db      	asrs	r3, r3, #3
   b6bae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6bb2:	f002 0207 	and.w	r2, r2, #7
   b6bb6:	2301      	movs	r3, #1
   b6bb8:	4093      	lsls	r3, r2
   b6bba:	5c42      	ldrb	r2, [r0, r1]
   b6bbc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6bc0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6bc2:	e01e      	b.n	b6c02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6bc4:	8904      	ldrh	r4, [r0, #8]
   b6bc6:	3c01      	subs	r4, #1
   b6bc8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6bca:	8944      	ldrh	r4, [r0, #10]
   b6bcc:	43d2      	mvns	r2, r2
   b6bce:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6bd0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6bd2:	b212      	sxth	r2, r2
      break;
   b6bd4:	e7df      	b.n	b6b96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6bd6:	8944      	ldrh	r4, [r0, #10]
   b6bd8:	3c01      	subs	r4, #1
   b6bda:	1a64      	subs	r4, r4, r1
      break;
   b6bdc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6bde:	b222      	sxth	r2, r4
      break;
   b6be0:	e7d9      	b.n	b6b96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6be2:	2a00      	cmp	r2, #0
   b6be4:	8904      	ldrh	r4, [r0, #8]
   b6be6:	4613      	mov	r3, r2
   b6be8:	bfb8      	it	lt
   b6bea:	1dd3      	addlt	r3, r2, #7
   b6bec:	10db      	asrs	r3, r3, #3
   b6bee:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6bf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6bf4:	f002 0007 	and.w	r0, r2, #7
   b6bf8:	2201      	movs	r2, #1
   b6bfa:	4082      	lsls	r2, r0
   b6bfc:	5c58      	ldrb	r0, [r3, r1]
   b6bfe:	4302      	orrs	r2, r0
   b6c00:	545a      	strb	r2, [r3, r1]
}
   b6c02:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6c04:	2a00      	cmp	r2, #0
   b6c06:	4613      	mov	r3, r2
   b6c08:	8904      	ldrh	r4, [r0, #8]
   b6c0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6c0c:	bfb8      	it	lt
   b6c0e:	1dd3      	addlt	r3, r2, #7
   b6c10:	10db      	asrs	r3, r3, #3
   b6c12:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6c16:	f002 0207 	and.w	r2, r2, #7
   b6c1a:	2301      	movs	r3, #1
   b6c1c:	fa03 f202 	lsl.w	r2, r3, r2
   b6c20:	5c43      	ldrb	r3, [r0, r1]
   b6c22:	405a      	eors	r2, r3
   b6c24:	e7cc      	b.n	b6bc0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6c28 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6c28:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b6c2a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b6c2c:	4604      	mov	r4, r0
   b6c2e:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b6c30:	2180      	movs	r1, #128	; 0x80
   b6c32:	f7fe ffcf 	bl	b5bd4 <_ZN12Adafruit_GFXC1Ess>
   b6c36:	2500      	movs	r5, #0
   b6c38:	4b0d      	ldr	r3, [pc, #52]	; (b6c70 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b6c3a:	6023      	str	r3, [r4, #0]
   b6c3c:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b6c3e:	f001 ff7b 	bl	b8b38 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b6c42:	23ff      	movs	r3, #255	; 0xff
   b6c44:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6c48:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b6c4c:	4b09      	ldr	r3, [pc, #36]	; (b6c74 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b6c4e:	63a3      	str	r3, [r4, #56]	; 0x38
   b6c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6c54:	2301      	movs	r3, #1
   b6c56:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b6c5a:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6c5c:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b6c60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6c64:	6425      	str	r5, [r4, #64]	; 0x40
   b6c66:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	bd70      	pop	{r4, r5, r6, pc}
   b6c6e:	bf00      	nop
   b6c70:	000baa60 	.word	0x000baa60
   b6c74:	000ba46c 	.word	0x000ba46c

000b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c7a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6c7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6c7e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6c80:	b190      	cbz	r0, b6ca8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6c82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6c86:	f001 fd71 	bl	b876c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6c8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6c8c:	6803      	ldr	r3, [r0, #0]
   b6c8e:	2100      	movs	r1, #0
   b6c90:	689b      	ldr	r3, [r3, #8]
   b6c92:	4798      	blx	r3
    WIRE_WRITE(c);
   b6c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6c96:	6803      	ldr	r3, [r0, #0]
   b6c98:	4629      	mov	r1, r5
   b6c9a:	689b      	ldr	r3, [r3, #8]
   b6c9c:	4798      	blx	r3
    wire->endTransmission();
   b6c9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6ca0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6ca4:	f001 bd69 	b.w	b877a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6ca8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6cac:	4601      	mov	r1, r0
   b6cae:	b298      	uxth	r0, r3
   b6cb0:	f001 fea5 	bl	b89fe <digitalWrite>
  if(spi) {
   b6cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6cb6:	b120      	cbz	r0, b6cc2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6cb8:	4629      	mov	r1, r5
}
   b6cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6cbe:	f001 b90f 	b.w	b7ee0 <_ZN8SPIClass8transferEh>
   b6cc2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6cc4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6cc6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6cca:	ea05 0107 	and.w	r1, r5, r7
   b6cce:	b280      	uxth	r0, r0
   b6cd0:	f001 fe95 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6cd4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6cd8:	2101      	movs	r1, #1
   b6cda:	b280      	uxth	r0, r0
   b6cdc:	f001 fe8f 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6ce0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ce4:	2100      	movs	r1, #0
   b6ce6:	b280      	uxth	r0, r0
   b6ce8:	f001 fe89 	bl	b89fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6cec:	3e01      	subs	r6, #1
   b6cee:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6cf2:	d1e8      	bne.n	b6cc6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cf6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6cf6:	b538      	push	{r3, r4, r5, lr}
   b6cf8:	4604      	mov	r4, r0
  TRANSACTION_START
   b6cfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6cfc:	460d      	mov	r5, r1
  TRANSACTION_START
   b6cfe:	b180      	cbz	r0, b6d22 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6d00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6d02:	f001 fd25 	bl	b8750 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6d06:	2d00      	cmp	r5, #0
   b6d08:	4620      	mov	r0, r4
   b6d0a:	bf14      	ite	ne
   b6d0c:	21a7      	movne	r1, #167	; 0xa7
   b6d0e:	21a6      	moveq	r1, #166	; 0xa6
   b6d10:	f7ff ffb2 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d16:	b188      	cbz	r0, b6d3c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6d18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6d1e:	f001 bd17 	b.w	b8750 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6d22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6d24:	b118      	cbz	r0, b6d2e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6d26:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6d2a:	f001 f86b 	bl	b7e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6d2e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6d32:	2100      	movs	r1, #0
   b6d34:	b280      	uxth	r0, r0
   b6d36:	f001 fe62 	bl	b89fe <digitalWrite>
   b6d3a:	e7e4      	b.n	b6d06 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6d3c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6d40:	2101      	movs	r1, #1
   b6d42:	b280      	uxth	r0, r0
   b6d44:	f001 fe5b 	bl	b89fe <digitalWrite>
   b6d48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6d4a:	b118      	cbz	r0, b6d54 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6d50:	f001 b83e 	b.w	b7dd0 <_ZN8SPIClass14endTransactionEv>
}
   b6d54:	bd38      	pop	{r3, r4, r5, pc}

000b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d5a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6d5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6d5e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6d60:	188f      	adds	r7, r1, r2
   b6d62:	b340      	cbz	r0, b6db6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6d64:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6d68:	f001 fd00 	bl	b876c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d6e:	6803      	ldr	r3, [r0, #0]
   b6d70:	2100      	movs	r1, #0
   b6d72:	689b      	ldr	r3, [r3, #8]
   b6d74:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6d76:	2601      	movs	r6, #1
    while(n--) {
   b6d78:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6d7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6d7c:	d017      	beq.n	b6dae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6d7e:	2e1f      	cmp	r6, #31
   b6d80:	d90c      	bls.n	b6d9c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6d82:	f001 fcfa 	bl	b877a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6d86:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6d8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d8c:	f001 fcee 	bl	b876c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d92:	6803      	ldr	r3, [r0, #0]
   b6d94:	2100      	movs	r1, #0
   b6d96:	689b      	ldr	r3, [r3, #8]
   b6d98:	4798      	blx	r3
        bytesOut = 1;
   b6d9a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6d9e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6da2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6da4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6da6:	689b      	ldr	r3, [r3, #8]
   b6da8:	4798      	blx	r3
      bytesOut++;
   b6daa:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6dac:	e7e4      	b.n	b6d78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6db2:	f001 bce2 	b.w	b877a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6db6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6dba:	4601      	mov	r1, r0
   b6dbc:	b298      	uxth	r0, r3
   b6dbe:	f001 fe1e 	bl	b89fe <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6dc2:	42bd      	cmp	r5, r7
   b6dc4:	d022      	beq.n	b6e0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6dc8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6dcc:	b118      	cbz	r0, b6dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6dce:	4649      	mov	r1, r9
   b6dd0:	f001 f886 	bl	b7ee0 <_ZN8SPIClass8transferEh>
   b6dd4:	e7f5      	b.n	b6dc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6dd6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6dd8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6ddc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6de0:	ea09 0108 	and.w	r1, r9, r8
   b6de4:	b280      	uxth	r0, r0
   b6de6:	f001 fe0a 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6dea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6dee:	2101      	movs	r1, #1
   b6df0:	b280      	uxth	r0, r0
   b6df2:	f001 fe04 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6df6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6dfa:	2100      	movs	r1, #0
   b6dfc:	b280      	uxth	r0, r0
   b6dfe:	f001 fdfe 	bl	b89fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6e02:	3e01      	subs	r6, #1
   b6e04:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6e08:	d1e8      	bne.n	b6ddc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6e0a:	e7da      	b.n	b6dc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6e10 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6e10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6e14:	1dda      	adds	r2, r3, #7
   b6e16:	bf48      	it	mi
   b6e18:	f103 020e 	addmi.w	r2, r3, #14
   b6e1c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6e20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6e22:	10d2      	asrs	r2, r2, #3
   b6e24:	435a      	muls	r2, r3
   b6e26:	2100      	movs	r1, #0
   b6e28:	f002 bb8e 	b.w	b9548 <memset>

000b6e2c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6e2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6e30:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6e32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6e34:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6e38:	4604      	mov	r4, r0
   b6e3a:	460f      	mov	r7, r1
   b6e3c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6e3e:	b1d3      	cbz	r3, b6e76 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b6e40:	4620      	mov	r0, r4
   b6e42:	f7ff ffe5 	bl	b6e10 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6e46:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b6e4a:	2a20      	cmp	r2, #32
   b6e4c:	dc25      	bgt.n	b6e9a <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6e4e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b6e52:	2320      	movs	r3, #32
   b6e54:	3a20      	subs	r2, #32
   b6e56:	3973      	subs	r1, #115	; 0x73
   b6e58:	2001      	movs	r0, #1
   b6e5a:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6e5e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b6e62:	2373      	movs	r3, #115	; 0x73
   b6e64:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6e68:	9300      	str	r3, [sp, #0]
   b6e6a:	f342 024f 	sbfx	r2, r2, #1, #16
   b6e6e:	4b85      	ldr	r3, [pc, #532]	; (b7084 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b6e70:	f341 014f 	sbfx	r1, r1, #1, #16
   b6e74:	e01b      	b.n	b6eae <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6e76:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6e7a:	1dd8      	adds	r0, r3, #7
   b6e7c:	bf48      	it	mi
   b6e7e:	f103 000e 	addmi.w	r0, r3, #14
   b6e82:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6e86:	10c0      	asrs	r0, r0, #3
   b6e88:	4358      	muls	r0, r3
   b6e8a:	f000 feff 	bl	b7c8c <malloc>
   b6e8e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6e90:	2800      	cmp	r0, #0
   b6e92:	d1d5      	bne.n	b6e40 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6e94:	b004      	add	sp, #16
   b6e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b6e9a:	2340      	movs	r3, #64	; 0x40
   b6e9c:	f04f 0c01 	mov.w	ip, #1
   b6ea0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b6ea4:	2380      	movs	r3, #128	; 0x80
   b6ea6:	9300      	str	r3, [sp, #0]
   b6ea8:	2200      	movs	r2, #0
   b6eaa:	4b77      	ldr	r3, [pc, #476]	; (b7088 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b6eac:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6eae:	4620      	mov	r0, r4
   b6eb0:	f7fe fea6 	bl	b5c00 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6eb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b6eb6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6eba:	2800      	cmp	r0, #0
   b6ebc:	d078      	beq.n	b6fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6ebe:	2d00      	cmp	r5, #0
   b6ec0:	d174      	bne.n	b6fac <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b6ec2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6ec6:	2b20      	cmp	r3, #32
   b6ec8:	bf0c      	ite	eq
   b6eca:	253c      	moveq	r5, #60	; 0x3c
   b6ecc:	253d      	movne	r5, #61	; 0x3d
   b6ece:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6ed2:	f1b8 0f00 	cmp.w	r8, #0
   b6ed6:	d001      	beq.n	b6edc <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6ed8:	f001 fc3e 	bl	b8758 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6edc:	b1fe      	cbz	r6, b6f1e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b6ede:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ee2:	2800      	cmp	r0, #0
   b6ee4:	db1b      	blt.n	b6f1e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b6ee6:	2101      	movs	r1, #1
   b6ee8:	b280      	uxth	r0, r0
   b6eea:	f001 fd77 	bl	b89dc <pinMode>
    digitalWrite(rstPin, HIGH);
   b6eee:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6ef2:	2101      	movs	r1, #1
   b6ef4:	b280      	uxth	r0, r0
   b6ef6:	f001 fd82 	bl	b89fe <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6efa:	2001      	movs	r0, #1
   b6efc:	f001 f9d8 	bl	b82b0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6f00:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6f04:	2100      	movs	r1, #0
   b6f06:	b280      	uxth	r0, r0
   b6f08:	f001 fd79 	bl	b89fe <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6f0c:	200a      	movs	r0, #10
   b6f0e:	f001 f9cf 	bl	b82b0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b6f12:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6f16:	2101      	movs	r1, #1
   b6f18:	b280      	uxth	r0, r0
   b6f1a:	f001 fd70 	bl	b89fe <digitalWrite>
  TRANSACTION_START
   b6f1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f20:	2800      	cmp	r0, #0
   b6f22:	d074      	beq.n	b700e <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b6f24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6f26:	f001 fc13 	bl	b8750 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6f2a:	2204      	movs	r2, #4
   b6f2c:	4957      	ldr	r1, [pc, #348]	; (b708c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b6f2e:	4620      	mov	r0, r4
   b6f30:	f7ff ff11 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6f34:	8961      	ldrh	r1, [r4, #10]
   b6f36:	3901      	subs	r1, #1
   b6f38:	b2c9      	uxtb	r1, r1
   b6f3a:	4620      	mov	r0, r4
   b6f3c:	f7ff fe9c 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6f40:	4953      	ldr	r1, [pc, #332]	; (b7090 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6f42:	2204      	movs	r2, #4
   b6f44:	4620      	mov	r0, r4
   b6f46:	f7ff ff06 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6f4a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6f4e:	2b01      	cmp	r3, #1
   b6f50:	bf0c      	ite	eq
   b6f52:	2110      	moveq	r1, #16
   b6f54:	2114      	movne	r1, #20
   b6f56:	4620      	mov	r0, r4
   b6f58:	f7ff fe8e 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6f5c:	2204      	movs	r2, #4
   b6f5e:	494d      	ldr	r1, [pc, #308]	; (b7094 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6f60:	4620      	mov	r0, r4
   b6f62:	f7ff fef8 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6f66:	68a3      	ldr	r3, [r4, #8]
   b6f68:	4a4b      	ldr	r2, [pc, #300]	; (b7098 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b6f6a:	4293      	cmp	r3, r2
   b6f6c:	d15c      	bne.n	b7028 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6f6e:	494b      	ldr	r1, [pc, #300]	; (b709c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b6f70:	2204      	movs	r2, #4
   b6f72:	4620      	mov	r0, r4
   b6f74:	f7ff feef 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6f78:	21d9      	movs	r1, #217	; 0xd9
   b6f7a:	4620      	mov	r0, r4
   b6f7c:	f7ff fe7c 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6f80:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6f84:	2b01      	cmp	r3, #1
   b6f86:	bf0c      	ite	eq
   b6f88:	2122      	moveq	r1, #34	; 0x22
   b6f8a:	21f1      	movne	r1, #241	; 0xf1
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f7ff fe73 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6f92:	4620      	mov	r0, r4
   b6f94:	4942      	ldr	r1, [pc, #264]	; (b70a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6f96:	2206      	movs	r2, #6
   b6f98:	f7ff fedd 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6f9e:	2800      	cmp	r0, #0
   b6fa0:	d063      	beq.n	b706a <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b6fa2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6fa4:	f001 fbd4 	bl	b8750 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6fa8:	2001      	movs	r0, #1
   b6faa:	e773      	b.n	b6e94 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6fac:	b26d      	sxtb	r5, r5
   b6fae:	e78e      	b.n	b6ece <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6fb0:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6fb4:	2101      	movs	r1, #1
   b6fb6:	b280      	uxth	r0, r0
   b6fb8:	f001 fd10 	bl	b89dc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6fbc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6fc0:	2101      	movs	r1, #1
   b6fc2:	b280      	uxth	r0, r0
   b6fc4:	f001 fd0a 	bl	b89dc <pinMode>
    SSD1306_DESELECT
   b6fc8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6fcc:	2101      	movs	r1, #1
   b6fce:	b280      	uxth	r0, r0
   b6fd0:	f001 fd15 	bl	b89fe <digitalWrite>
    if(spi) { // Hardware SPI
   b6fd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6fd6:	b13d      	cbz	r5, b6fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b6fd8:	f1b8 0f00 	cmp.w	r8, #0
   b6fdc:	f43f af7e 	beq.w	b6edc <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b6fe0:	4628      	mov	r0, r5
   b6fe2:	f000 fee1 	bl	b7da8 <_ZN8SPIClass5beginEv>
   b6fe6:	e779      	b.n	b6edc <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6fe8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6fec:	2101      	movs	r1, #1
   b6fee:	b280      	uxth	r0, r0
   b6ff0:	f001 fcf4 	bl	b89dc <pinMode>
      pinMode(clkPin , OUTPUT);
   b6ff4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6ff8:	2101      	movs	r1, #1
   b6ffa:	b280      	uxth	r0, r0
   b6ffc:	f001 fcee 	bl	b89dc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7000:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7004:	4629      	mov	r1, r5
   b7006:	b280      	uxth	r0, r0
   b7008:	f001 fcf9 	bl	b89fe <digitalWrite>
   b700c:	e766      	b.n	b6edc <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b700e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7010:	b118      	cbz	r0, b701a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b7012:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7016:	f000 fef5 	bl	b7e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b701a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b701e:	2100      	movs	r1, #0
   b7020:	b280      	uxth	r0, r0
   b7022:	f001 fcec 	bl	b89fe <digitalWrite>
   b7026:	e780      	b.n	b6f2a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7028:	4a1e      	ldr	r2, [pc, #120]	; (b70a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b702a:	4293      	cmp	r3, r2
   b702c:	d10e      	bne.n	b704c <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b702e:	491e      	ldr	r1, [pc, #120]	; (b70a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b7030:	2203      	movs	r2, #3
   b7032:	4620      	mov	r0, r4
   b7034:	f7ff fe8f 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b7038:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b703c:	2b01      	cmp	r3, #1
   b703e:	bf0c      	ite	eq
   b7040:	219f      	moveq	r1, #159	; 0x9f
   b7042:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b7044:	4620      	mov	r0, r4
   b7046:	f7ff fe17 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b704a:	e795      	b.n	b6f78 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b704c:	4a17      	ldr	r2, [pc, #92]	; (b70ac <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b704e:	4293      	cmp	r3, r2
   b7050:	d192      	bne.n	b6f78 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b7052:	4917      	ldr	r1, [pc, #92]	; (b70b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7054:	2203      	movs	r2, #3
   b7056:	4620      	mov	r0, r4
   b7058:	f7ff fe7d 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b705c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b7060:	2b01      	cmp	r3, #1
   b7062:	bf0c      	ite	eq
   b7064:	2110      	moveq	r1, #16
   b7066:	21af      	movne	r1, #175	; 0xaf
   b7068:	e7ec      	b.n	b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b706a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b706e:	2101      	movs	r1, #1
   b7070:	b280      	uxth	r0, r0
   b7072:	f001 fcc4 	bl	b89fe <digitalWrite>
   b7076:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7078:	2800      	cmp	r0, #0
   b707a:	d095      	beq.n	b6fa8 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b707c:	f000 fea8 	bl	b7dd0 <_ZN8SPIClass14endTransactionEv>
   b7080:	e792      	b.n	b6fa8 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b7082:	bf00      	nop
   b7084:	000ba478 	.word	0x000ba478
   b7088:	000ba658 	.word	0x000ba658
   b708c:	000baac0 	.word	0x000baac0
   b7090:	000baac4 	.word	0x000baac4
   b7094:	000baac8 	.word	0x000baac8
   b7098:	00200080 	.word	0x00200080
   b709c:	000baad2 	.word	0x000baad2
   b70a0:	000baacc 	.word	0x000baacc
   b70a4:	00400080 	.word	0x00400080
   b70a8:	000baad6 	.word	0x000baad6
   b70ac:	00100060 	.word	0x00100060
   b70b0:	000baad9 	.word	0x000baad9

000b70b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b70b4:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b70b6:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b70b8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b70bc:	db3d      	blt.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b70be:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b70c2:	4294      	cmp	r4, r2
   b70c4:	dd39      	ble.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b70c6:	2900      	cmp	r1, #0
      w += x;
   b70c8:	bfbe      	ittt	lt
   b70ca:	185b      	addlt	r3, r3, r1
   b70cc:	b21b      	sxthlt	r3, r3
      x  = 0;
   b70ce:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b70d0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b70d4:	18ce      	adds	r6, r1, r3
   b70d6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b70d8:	bfc4      	itt	gt
   b70da:	1a63      	subgt	r3, r4, r1
   b70dc:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b70de:	2b00      	cmp	r3, #0
   b70e0:	dd2b      	ble.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b70e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b70e4:	10d6      	asrs	r6, r2, #3
   b70e6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b70ea:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b70ec:	f002 0007 	and.w	r0, r2, #7
   b70f0:	2201      	movs	r2, #1
   b70f2:	4082      	lsls	r2, r0
      switch(color) {
   b70f4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b70f6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b70f8:	d016      	beq.n	b7128 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b70fa:	2d02      	cmp	r5, #2
   b70fc:	d00b      	beq.n	b7116 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b70fe:	b9e5      	cbnz	r5, b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7100:	43d2      	mvns	r2, r2
   b7102:	b2d2      	uxtb	r2, r2
   b7104:	440b      	add	r3, r1
   b7106:	4299      	cmp	r1, r3
   b7108:	d017      	beq.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b710a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b710e:	4010      	ands	r0, r2
   b7110:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7114:	e7f7      	b.n	b7106 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b7116:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7118:	4299      	cmp	r1, r3
   b711a:	d00e      	beq.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b711c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7120:	4050      	eors	r0, r2
   b7122:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7126:	e7f7      	b.n	b7118 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7128:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b712a:	4299      	cmp	r1, r3
   b712c:	d005      	beq.n	b713a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b712e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7132:	4310      	orrs	r0, r2
   b7134:	f801 0c01 	strb.w	r0, [r1, #-1]
   b7138:	e7f7      	b.n	b712a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b713a:	bd70      	pop	{r4, r5, r6, pc}

000b713c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b713c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b713e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b7140:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b7144:	db76      	blt.n	b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b7146:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b714a:	42b1      	cmp	r1, r6
   b714c:	da72      	bge.n	b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b714e:	2a00      	cmp	r2, #0
      __h += __y;
   b7150:	bfbe      	ittt	lt
   b7152:	189b      	addlt	r3, r3, r2
   b7154:	b21b      	sxthlt	r3, r3
      __y = 0;
   b7156:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b7158:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b715c:	18d7      	adds	r7, r2, r3
   b715e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b7160:	bfc4      	itt	gt
   b7162:	1aa3      	subgt	r3, r4, r2
   b7164:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b7166:	2b00      	cmp	r3, #0
   b7168:	dd64      	ble.n	b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b716a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b716e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b7170:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b7174:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b7178:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b717a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b717e:	d023      	beq.n	b71c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b7180:	f1c2 0208 	rsb	r2, r2, #8
   b7184:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7186:	492d      	ldr	r1, [pc, #180]	; (b723c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7188:	4293      	cmp	r3, r2
   b718a:	bf3c      	itt	cc
   b718c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b7190:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b7194:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b7196:	bf3c      	itt	cc
   b7198:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b719c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b71a0:	2d01      	cmp	r5, #1
   b71a2:	d007      	beq.n	b71b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b71a4:	2d02      	cmp	r5, #2
   b71a6:	d02e      	beq.n	b7206 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b71a8:	b94d      	cbnz	r5, b71be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b71aa:	f817 c006 	ldrb.w	ip, [r7, r6]
   b71ae:	ea2c 0101 	bic.w	r1, ip, r1
   b71b2:	e003      	b.n	b71bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b71b4:	f817 c006 	ldrb.w	ip, [r7, r6]
   b71b8:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b71bc:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b71be:	4293      	cmp	r3, r2
   b71c0:	d338      	bcc.n	b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b71c2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b71c6:	440c      	add	r4, r1
        h -= mod;
   b71c8:	1a9a      	subs	r2, r3, r2
   b71ca:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b71cc:	2a07      	cmp	r2, #7
   b71ce:	d90e      	bls.n	b71ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b71d0:	2d02      	cmp	r5, #2
   b71d2:	d11d      	bne.n	b7210 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b71d4:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b71d6:	7821      	ldrb	r1, [r4, #0]
   b71d8:	43c9      	mvns	r1, r1
   b71da:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b71dc:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b71de:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b71e2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b71e4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b71e6:	440c      	add	r4, r1
            } while(h >= 8);
   b71e8:	d8f5      	bhi.n	b71d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b71ea:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b71ee:	b30a      	cbz	r2, b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b71f0:	4b13      	ldr	r3, [pc, #76]	; (b7240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b71f2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b71f4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b71f6:	d01a      	beq.n	b722e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b71f8:	2d02      	cmp	r5, #2
   b71fa:	d01c      	beq.n	b7236 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b71fc:	b9d5      	cbnz	r5, b7234 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b71fe:	7822      	ldrb	r2, [r4, #0]
   b7200:	ea22 0303 	bic.w	r3, r2, r3
   b7204:	e015      	b.n	b7232 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b7206:	f817 c006 	ldrb.w	ip, [r7, r6]
   b720a:	ea81 010c 	eor.w	r1, r1, ip
   b720e:	e7d5      	b.n	b71bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7210:	1e29      	subs	r1, r5, #0
   b7212:	bf18      	it	ne
   b7214:	2101      	movne	r1, #1
   b7216:	4249      	negs	r1, r1
   b7218:	b2c9      	uxtb	r1, r1
   b721a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b721c:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b721e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7220:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b7224:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b7226:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7228:	4434      	add	r4, r6
            } while(h >= 8);
   b722a:	d8f7      	bhi.n	b721c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b722c:	e7dd      	b.n	b71ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b722e:	7822      	ldrb	r2, [r4, #0]
   b7230:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b7232:	7023      	strb	r3, [r4, #0]
}
   b7234:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b7236:	7822      	ldrb	r2, [r4, #0]
   b7238:	4053      	eors	r3, r2
   b723a:	e7fa      	b.n	b7232 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b723c:	000baab0 	.word	0x000baab0
   b7240:	000baab8 	.word	0x000baab8

000b7244 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7244:	b470      	push	{r4, r5, r6}
   b7246:	4614      	mov	r4, r2
  switch(rotation) {
   b7248:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b724a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b724e:	2a02      	cmp	r2, #2
   b7250:	d00d      	beq.n	b726e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b7252:	2a03      	cmp	r2, #3
   b7254:	d018      	beq.n	b7288 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b7256:	2a01      	cmp	r2, #1
   b7258:	d111      	bne.n	b727e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b725a:	8902      	ldrh	r2, [r0, #8]
   b725c:	43e4      	mvns	r4, r4
   b725e:	4414      	add	r4, r2
   b7260:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b7262:	9603      	str	r6, [sp, #12]
   b7264:	460a      	mov	r2, r1
   b7266:	4621      	mov	r1, r4
}
   b7268:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b726a:	f7ff bf67 	b.w	b713c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b726e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b7270:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b7272:	43e4      	mvns	r4, r4
    x -= (w-1);
   b7274:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b7276:	4414      	add	r4, r2
    x -= (w-1);
   b7278:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b727a:	b224      	sxth	r4, r4
    x -= (w-1);
   b727c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b727e:	9603      	str	r6, [sp, #12]
   b7280:	4622      	mov	r2, r4
}
   b7282:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b7284:	f7ff bf16 	b.w	b70b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b7288:	8945      	ldrh	r5, [r0, #10]
   b728a:	4419      	add	r1, r3
   b728c:	1a69      	subs	r1, r5, r1
   b728e:	b209      	sxth	r1, r1
    break;
   b7290:	e7e7      	b.n	b7262 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b7292 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7292:	b430      	push	{r4, r5}
   b7294:	4614      	mov	r4, r2
  switch(rotation) {
   b7296:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7298:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b729c:	2a02      	cmp	r2, #2
   b729e:	d00d      	beq.n	b72bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b72a0:	2a03      	cmp	r2, #3
   b72a2:	d018      	beq.n	b72d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b72a4:	2a01      	cmp	r2, #1
   b72a6:	d111      	bne.n	b72cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b72a8:	18e2      	adds	r2, r4, r3
   b72aa:	8904      	ldrh	r4, [r0, #8]
   b72ac:	1aa4      	subs	r4, r4, r2
   b72ae:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b72b0:	9502      	str	r5, [sp, #8]
   b72b2:	460a      	mov	r2, r1
   b72b4:	4621      	mov	r1, r4
}
   b72b6:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b72b8:	f7ff befc 	b.w	b70b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b72bc:	8902      	ldrh	r2, [r0, #8]
   b72be:	43c9      	mvns	r1, r1
   b72c0:	4411      	add	r1, r2
    y -= (h-1);
   b72c2:	18e2      	adds	r2, r4, r3
   b72c4:	8944      	ldrh	r4, [r0, #10]
   b72c6:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b72c8:	b209      	sxth	r1, r1
    y -= (h-1);
   b72ca:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b72cc:	9502      	str	r5, [sp, #8]
   b72ce:	4622      	mov	r2, r4
}
   b72d0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b72d2:	f7ff bf33 	b.w	b713c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b72d6:	8942      	ldrh	r2, [r0, #10]
   b72d8:	43c9      	mvns	r1, r1
   b72da:	4411      	add	r1, r2
   b72dc:	b209      	sxth	r1, r1
    break;
   b72de:	e7e7      	b.n	b72b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b72e0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b72e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b72e4:	4604      	mov	r4, r0
  TRANSACTION_START
   b72e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b72e8:	2800      	cmp	r0, #0
   b72ea:	d042      	beq.n	b7372 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b72ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b72ee:	f001 fa2f 	bl	b8750 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b72f2:	4947      	ldr	r1, [pc, #284]	; (b7410 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b72f4:	2205      	movs	r2, #5
   b72f6:	4620      	mov	r0, r4
   b72f8:	f7ff fd2d 	bl	b6d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b72fc:	8921      	ldrh	r1, [r4, #8]
   b72fe:	3901      	subs	r1, #1
   b7300:	4620      	mov	r0, r4
   b7302:	b2c9      	uxtb	r1, r1
   b7304:	f7ff fcb8 	bl	b6c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7308:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b730c:	1dde      	adds	r6, r3, #7
   b730e:	bf48      	it	mi
   b7310:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b7314:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7318:	8923      	ldrh	r3, [r4, #8]
   b731a:	10f6      	asrs	r6, r6, #3
   b731c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b7320:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b7324:	2800      	cmp	r0, #0
   b7326:	d03a      	beq.n	b739e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b7328:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b732c:	f001 fa1e 	bl	b876c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b7330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7332:	6803      	ldr	r3, [r0, #0]
   b7334:	2140      	movs	r1, #64	; 0x40
   b7336:	689b      	ldr	r3, [r3, #8]
   b7338:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b733a:	2701      	movs	r7, #1
    while(count--) {
   b733c:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b733e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b7340:	d024      	beq.n	b738c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b7342:	2f1f      	cmp	r7, #31
   b7344:	d90c      	bls.n	b7360 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b7346:	f001 fa18 	bl	b877a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b734a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b734e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7350:	f001 fa0c 	bl	b876c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b7354:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7356:	6803      	ldr	r3, [r0, #0]
   b7358:	2140      	movs	r1, #64	; 0x40
   b735a:	689b      	ldr	r3, [r3, #8]
   b735c:	4798      	blx	r3
        bytesOut = 1;
   b735e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b7360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7362:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7366:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7368:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b736a:	689b      	ldr	r3, [r3, #8]
   b736c:	4798      	blx	r3
      bytesOut++;
   b736e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b7370:	e7e4      	b.n	b733c <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b7372:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7374:	b118      	cbz	r0, b737e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b7376:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b737a:	f000 fd43 	bl	b7e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b737e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7382:	2100      	movs	r1, #0
   b7384:	b280      	uxth	r0, r0
   b7386:	f001 fb3a 	bl	b89fe <digitalWrite>
   b738a:	e7b2      	b.n	b72f2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b738c:	f001 f9f5 	bl	b877a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b7390:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7392:	b378      	cbz	r0, b73f4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b7394:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7396:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b739a:	f001 b9d9 	b.w	b8750 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b739e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b73a2:	2101      	movs	r1, #1
   b73a4:	b280      	uxth	r0, r0
   b73a6:	f001 fb2a 	bl	b89fe <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b73aa:	42ae      	cmp	r6, r5
   b73ac:	d0f0      	beq.n	b7390 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b73ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b73b0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b73b4:	b118      	cbz	r0, b73be <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b73b6:	4649      	mov	r1, r9
   b73b8:	f000 fd92 	bl	b7ee0 <_ZN8SPIClass8transferEh>
   b73bc:	e7f5      	b.n	b73aa <_ZN16Adafruit_SSD13067displayEv+0xca>
   b73be:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b73c0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b73c4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b73c8:	ea09 0108 	and.w	r1, r9, r8
   b73cc:	b280      	uxth	r0, r0
   b73ce:	f001 fb16 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b73d2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b73d6:	2101      	movs	r1, #1
   b73d8:	b280      	uxth	r0, r0
   b73da:	f001 fb10 	bl	b89fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b73de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b73e2:	2100      	movs	r1, #0
   b73e4:	b280      	uxth	r0, r0
   b73e6:	f001 fb0a 	bl	b89fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b73ea:	3f01      	subs	r7, #1
   b73ec:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b73f0:	d1e8      	bne.n	b73c4 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b73f2:	e7da      	b.n	b73aa <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b73f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b73f8:	2101      	movs	r1, #1
   b73fa:	b280      	uxth	r0, r0
   b73fc:	f001 faff 	bl	b89fe <digitalWrite>
   b7400:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7402:	b118      	cbz	r0, b740c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b7404:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b7408:	f000 bce2 	b.w	b7dd0 <_ZN8SPIClass14endTransactionEv>
}
   b740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7410:	000baadc 	.word	0x000baadc

000b7414 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b7414:	b510      	push	{r4, lr}
   b7416:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b7418:	7001      	strb	r1, [r0, #0]
   b741a:	7042      	strb	r2, [r0, #1]
   b741c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b741e:	2101      	movs	r1, #1
   b7420:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7424:	f002 f87a 	bl	b951c <calloc>
   b7428:	6060      	str	r0, [r4, #4]
}
   b742a:	4620      	mov	r0, r4
   b742c:	bd10      	pop	{r4, pc}

000b742e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b742e:	b510      	push	{r4, lr}
   b7430:	4604      	mov	r4, r0
{
    free(_led_state);
   b7432:	6840      	ldr	r0, [r0, #4]
   b7434:	f000 fc32 	bl	b7c9c <free>
}
   b7438:	4620      	mov	r0, r4
   b743a:	bd10      	pop	{r4, pc}

000b743c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b743c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b743e:	2100      	movs	r1, #0
{
   b7440:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b7442:	7800      	ldrb	r0, [r0, #0]
   b7444:	f001 fadb 	bl	b89fe <digitalWrite>
   b7448:	2014      	movs	r0, #20
   b744a:	f000 fa53 	bl	b78f4 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b744e:	7820      	ldrb	r0, [r4, #0]
   b7450:	2101      	movs	r1, #1
   b7452:	f001 fad4 	bl	b89fe <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b7456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b745a:	2014      	movs	r0, #20
   b745c:	f000 ba4a 	b.w	b78f4 <HAL_Delay_Microseconds>

000b7460 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b7460:	b570      	push	{r4, r5, r6, lr}
   b7462:	4606      	mov	r6, r0
   b7464:	460c      	mov	r4, r1
   b7466:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b7468:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b746a:	bf4c      	ite	mi
   b746c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b746e:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b7470:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b7472:	f001 fac4 	bl	b89fe <digitalWrite>
    for (byte i=0; i<8; i++)
   b7476:	3d01      	subs	r5, #1
        clk();
   b7478:	4630      	mov	r0, r6
   b747a:	f7ff ffdf 	bl	b743c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b747e:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b7480:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b7484:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b7486:	d1ef      	bne.n	b7468 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b7488:	bd70      	pop	{r4, r5, r6, pc}

000b748a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b748a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b748c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b7490:	461e      	mov	r6, r3
   b7492:	460c      	mov	r4, r1
   b7494:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b7496:	bf14      	ite	ne
   b7498:	21c0      	movne	r1, #192	; 0xc0
   b749a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b749c:	0673      	lsls	r3, r6, #25
   b749e:	bf58      	it	pl
   b74a0:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b74a4:	062a      	lsls	r2, r5, #24
   b74a6:	bf58      	it	pl
   b74a8:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b74ac:	066b      	lsls	r3, r5, #25
   b74ae:	bf58      	it	pl
   b74b0:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b74b4:	0622      	lsls	r2, r4, #24
   b74b6:	bf58      	it	pl
   b74b8:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b74bc:	0663      	lsls	r3, r4, #25
   b74be:	bf58      	it	pl
   b74c0:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b74c4:	9001      	str	r0, [sp, #4]
   b74c6:	f7ff ffcb 	bl	b7460 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b74ca:	9801      	ldr	r0, [sp, #4]
   b74cc:	4631      	mov	r1, r6
   b74ce:	f7ff ffc7 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b74d2:	9801      	ldr	r0, [sp, #4]
   b74d4:	4629      	mov	r1, r5
   b74d6:	f7ff ffc3 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b74da:	9801      	ldr	r0, [sp, #4]
   b74dc:	4621      	mov	r1, r4
}
   b74de:	b002      	add	sp, #8
   b74e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b74e4:	f7ff bfbc 	b.w	b7460 <_ZN12ChainableLED8sendByteEh>

000b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b74e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74ec:	4604      	mov	r4, r0
   b74ee:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b74f0:	2100      	movs	r1, #0
{
   b74f2:	4690      	mov	r8, r2
   b74f4:	4699      	mov	r9, r3
   b74f6:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b74fa:	f7ff ffb1 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b74fe:	2100      	movs	r1, #0
   b7500:	4620      	mov	r0, r4
   b7502:	f7ff ffad 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7506:	2100      	movs	r1, #0
   b7508:	4620      	mov	r0, r4
   b750a:	f7ff ffa9 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b750e:	2100      	movs	r1, #0
   b7510:	4620      	mov	r0, r4
   b7512:	f7ff ffa5 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
   b7516:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b7518:	78a3      	ldrb	r3, [r4, #2]
   b751a:	b2f5      	uxtb	r5, r6
   b751c:	42ab      	cmp	r3, r5
   b751e:	d919      	bls.n	b7554 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b7520:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b7524:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b7526:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b752a:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b752e:	d108      	bne.n	b7542 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b7530:	6861      	ldr	r1, [r4, #4]
   b7532:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b7536:	6861      	ldr	r1, [r4, #4]
   b7538:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b753c:	6861      	ldr	r1, [r4, #4]
   b753e:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b7542:	6861      	ldr	r1, [r4, #4]
   b7544:	5ccb      	ldrb	r3, [r1, r3]
   b7546:	5c8a      	ldrb	r2, [r1, r2]
   b7548:	5c09      	ldrb	r1, [r1, r0]
   b754a:	4620      	mov	r0, r4
   b754c:	f7ff ff9d 	bl	b748a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b7550:	3601      	adds	r6, #1
   b7552:	e7e1      	b.n	b7518 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b7554:	4620      	mov	r0, r4
   b7556:	2100      	movs	r1, #0
   b7558:	f7ff ff82 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b755c:	4620      	mov	r0, r4
   b755e:	2100      	movs	r1, #0
   b7560:	f7ff ff7e 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b7564:	4620      	mov	r0, r4
   b7566:	2100      	movs	r1, #0
   b7568:	f7ff ff7a 	bl	b7460 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b756c:	4620      	mov	r0, r4
   b756e:	2100      	movs	r1, #0
}
   b7570:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b7574:	f7ff bf74 	b.w	b7460 <_ZN12ChainableLED8sendByteEh>

000b7578 <_ZN12ChainableLED4initEv>:
{
   b7578:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b757a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b757c:	2101      	movs	r1, #1
   b757e:	7800      	ldrb	r0, [r0, #0]
   b7580:	f001 fa2c 	bl	b89dc <pinMode>
    pinMode(_data_pin, OUTPUT);
   b7584:	7860      	ldrb	r0, [r4, #1]
   b7586:	2101      	movs	r1, #1
   b7588:	f001 fa28 	bl	b89dc <pinMode>
   b758c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b758e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b7590:	78a3      	ldrb	r3, [r4, #2]
   b7592:	b2e9      	uxtb	r1, r5
   b7594:	428b      	cmp	r3, r1
   b7596:	d907      	bls.n	b75a8 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b7598:	2300      	movs	r3, #0
   b759a:	9600      	str	r6, [sp, #0]
   b759c:	461a      	mov	r2, r3
   b759e:	4620      	mov	r0, r4
   b75a0:	f7ff ffa2 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b75a4:	3501      	adds	r5, #1
   b75a6:	e7f3      	b.n	b7590 <_ZN12ChainableLED4initEv+0x18>
}
   b75a8:	b002      	add	sp, #8
   b75aa:	bd70      	pop	{r4, r5, r6, pc}
   b75ac:	0000      	movs	r0, r0
	...

000b75b0 <_Z7hue2rgbfff>:
}

// --------------------------------------------------------------------------------------

float hue2rgb(float p, float q, float t)
{
   b75b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (t < 0.0)
   b75b2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   b75b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b75ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b75be:	ed2d 8b04 	vpush	{d8-d9}
   b75c2:	eef0 8a41 	vmov.f32	s17, s2
        t += 1.0;
   b75c6:	bf48      	it	mi
   b75c8:	ee71 8a27 	vaddmi.f32	s17, s2, s15
{
   b75cc:	eeb0 9a40 	vmov.f32	s18, s0
    if(t > 1.0)
   b75d0:	eef4 8ae7 	vcmpe.f32	s17, s15
   b75d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t -= 1.0;
   b75d8:	bfc8      	it	gt
   b75da:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
{
   b75de:	eeb0 8a60 	vmov.f32	s16, s1
    if(t < 1.0/6.0)
   b75e2:	ee18 0a90 	vmov	r0, s17
   b75e6:	f001 fc31 	bl	b8e4c <__aeabi_f2d>
   b75ea:	a32e      	add	r3, pc, #184	; (adr r3, b76a4 <_Z7hue2rgbfff+0xf4>)
   b75ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75f0:	4604      	mov	r4, r0
   b75f2:	460d      	mov	r5, r1
   b75f4:	f001 fef4 	bl	b93e0 <__aeabi_dcmplt>
   b75f8:	b310      	cbz	r0, b7640 <_Z7hue2rgbfff+0x90>
        return p + (q - p) * 6.0 * t;
   b75fa:	ee78 7a49 	vsub.f32	s15, s16, s18
   b75fe:	ee17 0a90 	vmov	r0, s15
   b7602:	f001 fc23 	bl	b8e4c <__aeabi_f2d>
   b7606:	4b26      	ldr	r3, [pc, #152]	; (b76a0 <_Z7hue2rgbfff+0xf0>)
   b7608:	2200      	movs	r2, #0
   b760a:	f001 fc77 	bl	b8efc <__aeabi_dmul>
   b760e:	4622      	mov	r2, r4
   b7610:	462b      	mov	r3, r5
    if(t < 1.0/2.0)
        return q;
    if(t < 2.0/3.0)
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b7612:	f001 fc73 	bl	b8efc <__aeabi_dmul>
   b7616:	4604      	mov	r4, r0
   b7618:	ee19 0a10 	vmov	r0, s18
   b761c:	460d      	mov	r5, r1
   b761e:	f001 fc15 	bl	b8e4c <__aeabi_f2d>
   b7622:	4602      	mov	r2, r0
   b7624:	460b      	mov	r3, r1
   b7626:	4620      	mov	r0, r4
   b7628:	4629      	mov	r1, r5
   b762a:	f001 fab1 	bl	b8b90 <__adddf3>
   b762e:	f001 ff1f 	bl	b9470 <__aeabi_d2f>
   b7632:	ee08 0a10 	vmov	s16, r0

    return p;
}
   b7636:	eeb0 0a48 	vmov.f32	s0, s16
   b763a:	ecbd 8b04 	vpop	{d8-d9}
   b763e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(t < 1.0/2.0)
   b7640:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b7644:	eef4 8ae7 	vcmpe.f32	s17, s15
   b7648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b764c:	d4f3      	bmi.n	b7636 <_Z7hue2rgbfff+0x86>
    if(t < 2.0/3.0)
   b764e:	a312      	add	r3, pc, #72	; (adr r3, b7698 <_Z7hue2rgbfff+0xe8>)
   b7650:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7654:	4620      	mov	r0, r4
   b7656:	4629      	mov	r1, r5
   b7658:	f001 fec2 	bl	b93e0 <__aeabi_dcmplt>
   b765c:	b1b8      	cbz	r0, b768e <_Z7hue2rgbfff+0xde>
        return p + (q - p) * (2.0/3.0 - t) * 6.0;
   b765e:	ee78 7a49 	vsub.f32	s15, s16, s18
   b7662:	ee17 0a90 	vmov	r0, s15
   b7666:	f001 fbf1 	bl	b8e4c <__aeabi_f2d>
   b766a:	4622      	mov	r2, r4
   b766c:	4606      	mov	r6, r0
   b766e:	460f      	mov	r7, r1
   b7670:	462b      	mov	r3, r5
   b7672:	a109      	add	r1, pc, #36	; (adr r1, b7698 <_Z7hue2rgbfff+0xe8>)
   b7674:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7678:	f001 fa88 	bl	b8b8c <__aeabi_dsub>
   b767c:	4602      	mov	r2, r0
   b767e:	460b      	mov	r3, r1
   b7680:	4630      	mov	r0, r6
   b7682:	4639      	mov	r1, r7
   b7684:	f001 fc3a 	bl	b8efc <__aeabi_dmul>
   b7688:	4b05      	ldr	r3, [pc, #20]	; (b76a0 <_Z7hue2rgbfff+0xf0>)
   b768a:	2200      	movs	r2, #0
   b768c:	e7c1      	b.n	b7612 <_Z7hue2rgbfff+0x62>
    return p;
   b768e:	eeb0 8a49 	vmov.f32	s16, s18
   b7692:	e7d0      	b.n	b7636 <_Z7hue2rgbfff+0x86>
   b7694:	f3af 8000 	nop.w
   b7698:	55555555 	.word	0x55555555
   b769c:	3fe55555 	.word	0x3fe55555
   b76a0:	40180000 	.word	0x40180000
   b76a4:	55555555 	.word	0x55555555
   b76a8:	3fc55555 	.word	0x3fc55555
   b76ac:	00000000 	.word	0x00000000

000b76b0 <_ZN12ChainableLED11setColorHSBEhfff>:
{
   b76b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76b4:	ed2d 8b04 	vpush	{d8-d9}
    if(saturation == 0.0)
   b76b8:	eef5 0a40 	vcmp.f32	s1, #0.0
   b76bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b76c0:	b083      	sub	sp, #12
   b76c2:	4680      	mov	r8, r0
   b76c4:	4689      	mov	r9, r1
   b76c6:	eef0 9a40 	vmov.f32	s19, s0
   b76ca:	eeb0 9a60 	vmov.f32	s18, s1
   b76ce:	eeb0 8a41 	vmov.f32	s16, s2
    if(saturation == 0.0)
   b76d2:	f000 809d 	beq.w	b7810 <_ZN12ChainableLED11setColorHSBEhfff+0x160>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b76d6:	ee11 0a10 	vmov	r0, s2
   b76da:	f001 fbb7 	bl	b8e4c <__aeabi_f2d>
        float q = brightness < 0.5 ?
   b76de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b76e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b76e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b76ea:	4606      	mov	r6, r0
   b76ec:	460f      	mov	r7, r1
   b76ee:	f140 808a 	bpl.w	b7806 <_ZN12ChainableLED11setColorHSBEhfff+0x156>
   b76f2:	ee19 0a10 	vmov	r0, s18
   b76f6:	f001 fba9 	bl	b8e4c <__aeabi_f2d>
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b76fa:	4b4d      	ldr	r3, [pc, #308]	; (b7830 <_ZN12ChainableLED11setColorHSBEhfff+0x180>)
   b76fc:	2200      	movs	r2, #0
   b76fe:	f001 fa47 	bl	b8b90 <__adddf3>
   b7702:	4632      	mov	r2, r6
   b7704:	463b      	mov	r3, r7
   b7706:	f001 fbf9 	bl	b8efc <__aeabi_dmul>
        float q = brightness < 0.5 ?
   b770a:	f001 feb1 	bl	b9470 <__aeabi_d2f>
   b770e:	ee08 0a90 	vmov	s17, r0
   b7712:	ee19 0a90 	vmov	r0, s19
   b7716:	f001 fb99 	bl	b8e4c <__aeabi_f2d>
        float p = 2.0 * brightness - q;
   b771a:	4632      	mov	r2, r6
   b771c:	4604      	mov	r4, r0
   b771e:	463b      	mov	r3, r7
   b7720:	460d      	mov	r5, r1
   b7722:	4630      	mov	r0, r6
   b7724:	4639      	mov	r1, r7
   b7726:	f001 fa33 	bl	b8b90 <__adddf3>
   b772a:	4606      	mov	r6, r0
   b772c:	ee18 0a90 	vmov	r0, s17
   b7730:	460f      	mov	r7, r1
   b7732:	f001 fb8b 	bl	b8e4c <__aeabi_f2d>
   b7736:	4602      	mov	r2, r0
   b7738:	460b      	mov	r3, r1
   b773a:	4630      	mov	r0, r6
   b773c:	4639      	mov	r1, r7
   b773e:	f001 fa25 	bl	b8b8c <__aeabi_dsub>
   b7742:	f001 fe95 	bl	b9470 <__aeabi_d2f>
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b7746:	a336      	add	r3, pc, #216	; (adr r3, b7820 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b7748:	e9d3 2300 	ldrd	r2, r3, [r3]
        float p = 2.0 * brightness - q;
   b774c:	ee09 0a10 	vmov	s18, r0
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b7750:	4629      	mov	r1, r5
   b7752:	4620      	mov	r0, r4
   b7754:	f001 fa1c 	bl	b8b90 <__adddf3>
   b7758:	f001 fe8a 	bl	b9470 <__aeabi_d2f>
   b775c:	eef0 0a68 	vmov.f32	s1, s17
   b7760:	ee01 0a10 	vmov	s2, r0
   b7764:	eeb0 0a49 	vmov.f32	s0, s18
   b7768:	f7ff ff22 	bl	b75b0 <_Z7hue2rgbfff>
        g = hue2rgb(p, q, hue);
   b776c:	eeb0 1a69 	vmov.f32	s2, s19
   b7770:	eef0 0a68 	vmov.f32	s1, s17
        r = hue2rgb(p, q, hue + 1.0/3.0);
   b7774:	eeb0 8a40 	vmov.f32	s16, s0
        g = hue2rgb(p, q, hue);
   b7778:	eeb0 0a49 	vmov.f32	s0, s18
   b777c:	f7ff ff18 	bl	b75b0 <_Z7hue2rgbfff>
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b7780:	a327      	add	r3, pc, #156	; (adr r3, b7820 <_ZN12ChainableLED11setColorHSBEhfff+0x170>)
   b7782:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7786:	4620      	mov	r0, r4
   b7788:	4629      	mov	r1, r5
        g = hue2rgb(p, q, hue);
   b778a:	ee10 6a10 	vmov	r6, s0
        b = hue2rgb(p, q, hue - 1.0/3.0);
   b778e:	f001 f9fd 	bl	b8b8c <__aeabi_dsub>
   b7792:	f001 fe6d 	bl	b9470 <__aeabi_d2f>
   b7796:	eef0 0a68 	vmov.f32	s1, s17
   b779a:	ee01 0a10 	vmov	s2, r0
   b779e:	eeb0 0a49 	vmov.f32	s0, s18
   b77a2:	f7ff ff05 	bl	b75b0 <_Z7hue2rgbfff>
   b77a6:	ee10 4a10 	vmov	r4, s0
    setColorRGB(led, (byte)(255.0*r), (byte)(255.0*g), (byte)(255.0*b));
   b77aa:	4630      	mov	r0, r6
   b77ac:	f001 fb4e 	bl	b8e4c <__aeabi_f2d>
   b77b0:	a31d      	add	r3, pc, #116	; (adr r3, b7828 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b77b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b77b6:	f001 fba1 	bl	b8efc <__aeabi_dmul>
   b77ba:	f001 fe39 	bl	b9430 <__aeabi_d2uiz>
   b77be:	b2c6      	uxtb	r6, r0
   b77c0:	ee18 0a10 	vmov	r0, s16
   b77c4:	f001 fb42 	bl	b8e4c <__aeabi_f2d>
   b77c8:	a317      	add	r3, pc, #92	; (adr r3, b7828 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b77ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b77ce:	f001 fb95 	bl	b8efc <__aeabi_dmul>
   b77d2:	f001 fe2d 	bl	b9430 <__aeabi_d2uiz>
   b77d6:	b2c5      	uxtb	r5, r0
   b77d8:	4620      	mov	r0, r4
   b77da:	f001 fb37 	bl	b8e4c <__aeabi_f2d>
   b77de:	a312      	add	r3, pc, #72	; (adr r3, b7828 <_ZN12ChainableLED11setColorHSBEhfff+0x178>)
   b77e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b77e4:	f001 fb8a 	bl	b8efc <__aeabi_dmul>
   b77e8:	f001 fe22 	bl	b9430 <__aeabi_d2uiz>
   b77ec:	b2c0      	uxtb	r0, r0
   b77ee:	9000      	str	r0, [sp, #0]
   b77f0:	4633      	mov	r3, r6
   b77f2:	462a      	mov	r2, r5
   b77f4:	4649      	mov	r1, r9
   b77f6:	4640      	mov	r0, r8
   b77f8:	f7ff fe76 	bl	b74e8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b77fc:	b003      	add	sp, #12
   b77fe:	ecbd 8b04 	vpop	{d8-d9}
   b7802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            brightness * (1.0 + saturation) : brightness + saturation - brightness * saturation;
   b7806:	ee79 8a08 	vadd.f32	s17, s18, s16
        float q = brightness < 0.5 ?
   b780a:	eee9 8a48 	vfms.f32	s17, s18, s16
   b780e:	e780      	b.n	b7712 <_ZN12ChainableLED11setColorHSBEhfff+0x62>
        r = g = b = brightness;
   b7810:	ee11 4a10 	vmov	r4, s2
   b7814:	ee11 6a10 	vmov	r6, s2
   b7818:	e7c7      	b.n	b77aa <_ZN12ChainableLED11setColorHSBEhfff+0xfa>
   b781a:	bf00      	nop
   b781c:	f3af 8000 	nop.w
   b7820:	55555555 	.word	0x55555555
   b7824:	3fd55555 	.word	0x3fd55555
   b7828:	00000000 	.word	0x00000000
   b782c:	406fe000 	.word	0x406fe000
   b7830:	3ff00000 	.word	0x3ff00000

000b7834 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <netdb_freeaddrinfo+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	689b      	ldr	r3, [r3, #8]
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030268 	.word	0x00030268

000b7844 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <netdb_getaddrinfo+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	68db      	ldr	r3, [r3, #12]
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	00030268 	.word	0x00030268

000b7854 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <HAL_Validate_Pin_Function+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	685b      	ldr	r3, [r3, #4]
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	0003022c 	.word	0x0003022c

000b7864 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <HAL_Pin_Mode+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	689b      	ldr	r3, [r3, #8]
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	0003022c 	.word	0x0003022c

000b7874 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <HAL_Get_Pin_Mode+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	68db      	ldr	r3, [r3, #12]
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	0003022c 	.word	0x0003022c

000b7884 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <HAL_GPIO_Write+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	691b      	ldr	r3, [r3, #16]
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	0003022c 	.word	0x0003022c

000b7894 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <HAL_GPIO_Read+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	695b      	ldr	r3, [r3, #20]
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	0003022c 	.word	0x0003022c

000b78a4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <HAL_Interrupts_Enable_All+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	6a1b      	ldr	r3, [r3, #32]
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	0003022c 	.word	0x0003022c

000b78b4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <HAL_Interrupts_Disable_All+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	0003022c 	.word	0x0003022c

000b78c4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <hal_adc_read+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	0003022c 	.word	0x0003022c

000b78d4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <HAL_Pulse_In+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	0003022c 	.word	0x0003022c

000b78e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <HAL_RNG_GetRandomNumber+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	685b      	ldr	r3, [r3, #4]
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	00030218 	.word	0x00030218

000b78f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <HAL_Delay_Microseconds+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	68db      	ldr	r3, [r3, #12]
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	00030218 	.word	0x00030218

000b7904 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	695b      	ldr	r3, [r3, #20]
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	00030218 	.word	0x00030218

000b7914 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <os_mutex_recursive_create+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	00030248 	.word	0x00030248

000b7924 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <inet_inet_ntop+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	695b      	ldr	r3, [r3, #20]
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030264 	.word	0x00030264

000b7934 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <hal_usart_write+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	68db      	ldr	r3, [r3, #12]
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	0003023c 	.word	0x0003023c

000b7944 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <hal_usart_available+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	691b      	ldr	r3, [r3, #16]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	0003023c 	.word	0x0003023c

000b7954 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <hal_usart_read+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	695b      	ldr	r3, [r3, #20]
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	0003023c 	.word	0x0003023c

000b7964 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <hal_usart_peek+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	699b      	ldr	r3, [r3, #24]
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	0003023c 	.word	0x0003023c

000b7974 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b02      	ldr	r3, [pc, #8]	; (b7980 <hal_usart_flush+0xc>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	69db      	ldr	r3, [r3, #28]
   b797c:	9301      	str	r3, [sp, #4]
   b797e:	bd08      	pop	{r3, pc}
   b7980:	0003023c 	.word	0x0003023c

000b7984 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7984:	b508      	push	{r3, lr}
   b7986:	4b02      	ldr	r3, [pc, #8]	; (b7990 <hal_usart_is_enabled+0xc>)
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	6a1b      	ldr	r3, [r3, #32]
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	bd08      	pop	{r3, pc}
   b7990:	0003023c 	.word	0x0003023c

000b7994 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7994:	b508      	push	{r3, lr}
   b7996:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <hal_usart_available_data_for_write+0xc>)
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b799c:	9301      	str	r3, [sp, #4]
   b799e:	bd08      	pop	{r3, pc}
   b79a0:	0003023c 	.word	0x0003023c

000b79a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b79a4:	b508      	push	{r3, lr}
   b79a6:	4b02      	ldr	r3, [pc, #8]	; (b79b0 <hal_usart_init_ex+0xc>)
   b79a8:	681b      	ldr	r3, [r3, #0]
   b79aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b79ac:	9301      	str	r3, [sp, #4]
   b79ae:	bd08      	pop	{r3, pc}
   b79b0:	0003023c 	.word	0x0003023c

000b79b4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <hal_i2c_set_speed+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	681b      	ldr	r3, [r3, #0]
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	00030228 	.word	0x00030228

000b79c4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <hal_i2c_begin+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	68db      	ldr	r3, [r3, #12]
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	00030228 	.word	0x00030228

000b79d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <hal_i2c_begin_transmission+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	699b      	ldr	r3, [r3, #24]
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	00030228 	.word	0x00030228

000b79e4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <hal_i2c_end_transmission+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	69db      	ldr	r3, [r3, #28]
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	00030228 	.word	0x00030228

000b79f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b02      	ldr	r3, [pc, #8]	; (b7a00 <hal_i2c_write+0xc>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	6a1b      	ldr	r3, [r3, #32]
   b79fc:	9301      	str	r3, [sp, #4]
   b79fe:	bd08      	pop	{r3, pc}
   b7a00:	00030228 	.word	0x00030228

000b7a04 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7a04:	b508      	push	{r3, lr}
   b7a06:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <hal_i2c_available+0xc>)
   b7a08:	681b      	ldr	r3, [r3, #0]
   b7a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	bd08      	pop	{r3, pc}
   b7a10:	00030228 	.word	0x00030228

000b7a14 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7a14:	b508      	push	{r3, lr}
   b7a16:	4b02      	ldr	r3, [pc, #8]	; (b7a20 <hal_i2c_read+0xc>)
   b7a18:	681b      	ldr	r3, [r3, #0]
   b7a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a1c:	9301      	str	r3, [sp, #4]
   b7a1e:	bd08      	pop	{r3, pc}
   b7a20:	00030228 	.word	0x00030228

000b7a24 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7a24:	b508      	push	{r3, lr}
   b7a26:	4b02      	ldr	r3, [pc, #8]	; (b7a30 <hal_i2c_peek+0xc>)
   b7a28:	681b      	ldr	r3, [r3, #0]
   b7a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a2c:	9301      	str	r3, [sp, #4]
   b7a2e:	bd08      	pop	{r3, pc}
   b7a30:	00030228 	.word	0x00030228

000b7a34 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7a34:	b508      	push	{r3, lr}
   b7a36:	4b02      	ldr	r3, [pc, #8]	; (b7a40 <hal_i2c_flush+0xc>)
   b7a38:	681b      	ldr	r3, [r3, #0]
   b7a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a3c:	9301      	str	r3, [sp, #4]
   b7a3e:	bd08      	pop	{r3, pc}
   b7a40:	00030228 	.word	0x00030228

000b7a44 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7a44:	b508      	push	{r3, lr}
   b7a46:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <hal_i2c_is_enabled+0xc>)
   b7a48:	681b      	ldr	r3, [r3, #0]
   b7a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a4c:	9301      	str	r3, [sp, #4]
   b7a4e:	bd08      	pop	{r3, pc}
   b7a50:	00030228 	.word	0x00030228

000b7a54 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7a54:	b508      	push	{r3, lr}
   b7a56:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <hal_i2c_init+0xc>)
   b7a58:	681b      	ldr	r3, [r3, #0]
   b7a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a5c:	9301      	str	r3, [sp, #4]
   b7a5e:	bd08      	pop	{r3, pc}
   b7a60:	00030228 	.word	0x00030228

000b7a64 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7a64:	b508      	push	{r3, lr}
   b7a66:	4b02      	ldr	r3, [pc, #8]	; (b7a70 <hal_spi_begin+0xc>)
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	681b      	ldr	r3, [r3, #0]
   b7a6c:	9301      	str	r3, [sp, #4]
   b7a6e:	bd08      	pop	{r3, pc}
   b7a70:	00030230 	.word	0x00030230

000b7a74 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7a74:	b508      	push	{r3, lr}
   b7a76:	4b02      	ldr	r3, [pc, #8]	; (b7a80 <hal_spi_transfer+0xc>)
   b7a78:	681b      	ldr	r3, [r3, #0]
   b7a7a:	695b      	ldr	r3, [r3, #20]
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	bd08      	pop	{r3, pc}
   b7a80:	00030230 	.word	0x00030230

000b7a84 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <hal_spi_init+0xc>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	69db      	ldr	r3, [r3, #28]
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	bd08      	pop	{r3, pc}
   b7a90:	00030230 	.word	0x00030230

000b7a94 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7a94:	b508      	push	{r3, lr}
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <hal_spi_is_enabled+0xc>)
   b7a98:	681b      	ldr	r3, [r3, #0]
   b7a9a:	6a1b      	ldr	r3, [r3, #32]
   b7a9c:	9301      	str	r3, [sp, #4]
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	00030230 	.word	0x00030230

000b7aa4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7aa4:	b508      	push	{r3, lr}
   b7aa6:	4b02      	ldr	r3, [pc, #8]	; (b7ab0 <hal_spi_info+0xc>)
   b7aa8:	681b      	ldr	r3, [r3, #0]
   b7aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7aac:	9301      	str	r3, [sp, #4]
   b7aae:	bd08      	pop	{r3, pc}
   b7ab0:	00030230 	.word	0x00030230

000b7ab4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7ab4:	b508      	push	{r3, lr}
   b7ab6:	4b02      	ldr	r3, [pc, #8]	; (b7ac0 <hal_spi_set_settings+0xc>)
   b7ab8:	681b      	ldr	r3, [r3, #0]
   b7aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	bd08      	pop	{r3, pc}
   b7ac0:	00030230 	.word	0x00030230

000b7ac4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7ac4:	b508      	push	{r3, lr}
   b7ac6:	4b02      	ldr	r3, [pc, #8]	; (b7ad0 <hal_spi_acquire+0xc>)
   b7ac8:	681b      	ldr	r3, [r3, #0]
   b7aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7acc:	9301      	str	r3, [sp, #4]
   b7ace:	bd08      	pop	{r3, pc}
   b7ad0:	00030230 	.word	0x00030230

000b7ad4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7ad4:	b508      	push	{r3, lr}
   b7ad6:	4b02      	ldr	r3, [pc, #8]	; (b7ae0 <hal_spi_release+0xc>)
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7adc:	9301      	str	r3, [sp, #4]
   b7ade:	bd08      	pop	{r3, pc}
   b7ae0:	00030230 	.word	0x00030230

000b7ae4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7ae4:	b508      	push	{r3, lr}
   b7ae6:	4b02      	ldr	r3, [pc, #8]	; (b7af0 <HAL_USB_USART_Init+0xc>)
   b7ae8:	681b      	ldr	r3, [r3, #0]
   b7aea:	681b      	ldr	r3, [r3, #0]
   b7aec:	9301      	str	r3, [sp, #4]
   b7aee:	bd08      	pop	{r3, pc}
   b7af0:	0003024c 	.word	0x0003024c

000b7af4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7af4:	b508      	push	{r3, lr}
   b7af6:	4b02      	ldr	r3, [pc, #8]	; (b7b00 <HAL_USB_USART_Begin+0xc>)
   b7af8:	681b      	ldr	r3, [r3, #0]
   b7afa:	685b      	ldr	r3, [r3, #4]
   b7afc:	9301      	str	r3, [sp, #4]
   b7afe:	bd08      	pop	{r3, pc}
   b7b00:	0003024c 	.word	0x0003024c

000b7b04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7b04:	b508      	push	{r3, lr}
   b7b06:	4b02      	ldr	r3, [pc, #8]	; (b7b10 <HAL_USB_USART_Available_Data+0xc>)
   b7b08:	681b      	ldr	r3, [r3, #0]
   b7b0a:	691b      	ldr	r3, [r3, #16]
   b7b0c:	9301      	str	r3, [sp, #4]
   b7b0e:	bd08      	pop	{r3, pc}
   b7b10:	0003024c 	.word	0x0003024c

000b7b14 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7b14:	b508      	push	{r3, lr}
   b7b16:	4b02      	ldr	r3, [pc, #8]	; (b7b20 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7b18:	681b      	ldr	r3, [r3, #0]
   b7b1a:	695b      	ldr	r3, [r3, #20]
   b7b1c:	9301      	str	r3, [sp, #4]
   b7b1e:	bd08      	pop	{r3, pc}
   b7b20:	0003024c 	.word	0x0003024c

000b7b24 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b24:	b508      	push	{r3, lr}
   b7b26:	4b02      	ldr	r3, [pc, #8]	; (b7b30 <HAL_USB_USART_Receive_Data+0xc>)
   b7b28:	681b      	ldr	r3, [r3, #0]
   b7b2a:	699b      	ldr	r3, [r3, #24]
   b7b2c:	9301      	str	r3, [sp, #4]
   b7b2e:	bd08      	pop	{r3, pc}
   b7b30:	0003024c 	.word	0x0003024c

000b7b34 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b34:	b508      	push	{r3, lr}
   b7b36:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <HAL_USB_USART_Send_Data+0xc>)
   b7b38:	681b      	ldr	r3, [r3, #0]
   b7b3a:	69db      	ldr	r3, [r3, #28]
   b7b3c:	9301      	str	r3, [sp, #4]
   b7b3e:	bd08      	pop	{r3, pc}
   b7b40:	0003024c 	.word	0x0003024c

000b7b44 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7b44:	b508      	push	{r3, lr}
   b7b46:	4b02      	ldr	r3, [pc, #8]	; (b7b50 <HAL_USB_USART_Flush_Data+0xc>)
   b7b48:	681b      	ldr	r3, [r3, #0]
   b7b4a:	6a1b      	ldr	r3, [r3, #32]
   b7b4c:	9301      	str	r3, [sp, #4]
   b7b4e:	bd08      	pop	{r3, pc}
   b7b50:	0003024c 	.word	0x0003024c

000b7b54 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b54:	b508      	push	{r3, lr}
   b7b56:	4b02      	ldr	r3, [pc, #8]	; (b7b60 <panic_+0xc>)
   b7b58:	681b      	ldr	r3, [r3, #0]
   b7b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b5c:	9301      	str	r3, [sp, #4]
   b7b5e:	bd08      	pop	{r3, pc}
   b7b60:	00030260 	.word	0x00030260

000b7b64 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7b64:	b508      	push	{r3, lr}
   b7b66:	4b02      	ldr	r3, [pc, #8]	; (b7b70 <set_system_mode+0xc>)
   b7b68:	681b      	ldr	r3, [r3, #0]
   b7b6a:	685b      	ldr	r3, [r3, #4]
   b7b6c:	9301      	str	r3, [sp, #4]
   b7b6e:	bd08      	pop	{r3, pc}
   b7b70:	00030220 	.word	0x00030220

000b7b74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7b74:	b508      	push	{r3, lr}
   b7b76:	4b02      	ldr	r3, [pc, #8]	; (b7b80 <system_delay_ms+0xc>)
   b7b78:	681b      	ldr	r3, [r3, #0]
   b7b7a:	695b      	ldr	r3, [r3, #20]
   b7b7c:	9301      	str	r3, [sp, #4]
   b7b7e:	bd08      	pop	{r3, pc}
   b7b80:	00030220 	.word	0x00030220

000b7b84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7b84:	b508      	push	{r3, lr}
   b7b86:	4b03      	ldr	r3, [pc, #12]	; (b7b94 <system_ctrl_set_app_request_handler+0x10>)
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7b8e:	9301      	str	r3, [sp, #4]
   b7b90:	bd08      	pop	{r3, pc}
   b7b92:	0000      	.short	0x0000
   b7b94:	00030220 	.word	0x00030220

000b7b98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b03      	ldr	r3, [pc, #12]	; (b7ba8 <system_ctrl_set_result+0x10>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7ba2:	9301      	str	r3, [sp, #4]
   b7ba4:	bd08      	pop	{r3, pc}
   b7ba6:	0000      	.short	0x0000
   b7ba8:	00030220 	.word	0x00030220

000b7bac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <network_connect+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	685b      	ldr	r3, [r3, #4]
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030240 	.word	0x00030240

000b7bbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <network_connecting+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	689b      	ldr	r3, [r3, #8]
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030240 	.word	0x00030240

000b7bcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <network_disconnect+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	68db      	ldr	r3, [r3, #12]
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030240 	.word	0x00030240

000b7bdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <network_ready+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	691b      	ldr	r3, [r3, #16]
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030240 	.word	0x00030240

000b7bec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <network_on+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	695b      	ldr	r3, [r3, #20]
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	00030240 	.word	0x00030240

000b7bfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <network_off+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	699b      	ldr	r3, [r3, #24]
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	00030240 	.word	0x00030240

000b7c0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <network_listen+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	69db      	ldr	r3, [r3, #28]
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	00030240 	.word	0x00030240

000b7c1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <network_listening+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	6a1b      	ldr	r3, [r3, #32]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	00030240 	.word	0x00030240

000b7c2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <network_set_listen_timeout+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	00030240 	.word	0x00030240

000b7c3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <network_get_listen_timeout+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	00030240 	.word	0x00030240

000b7c4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <network_is_on+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	00030240 	.word	0x00030240

000b7c5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <network_is_off+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	00030240 	.word	0x00030240

000b7c6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	00030244 	.word	0x00030244

000b7c7c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <spark_cloud_disconnect+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	00030244 	.word	0x00030244

000b7c8c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b02      	ldr	r3, [pc, #8]	; (b7c98 <malloc+0xc>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	681b      	ldr	r3, [r3, #0]
   b7c94:	9301      	str	r3, [sp, #4]
   b7c96:	bd08      	pop	{r3, pc}
   b7c98:	0003021c 	.word	0x0003021c

000b7c9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7c9c:	b508      	push	{r3, lr}
   b7c9e:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <free+0xc>)
   b7ca0:	681b      	ldr	r3, [r3, #0]
   b7ca2:	685b      	ldr	r3, [r3, #4]
   b7ca4:	9301      	str	r3, [sp, #4]
   b7ca6:	bd08      	pop	{r3, pc}
   b7ca8:	0003021c 	.word	0x0003021c

000b7cac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7cac:	b508      	push	{r3, lr}
   b7cae:	4b02      	ldr	r3, [pc, #8]	; (b7cb8 <realloc+0xc>)
   b7cb0:	681b      	ldr	r3, [r3, #0]
   b7cb2:	689b      	ldr	r3, [r3, #8]
   b7cb4:	9301      	str	r3, [sp, #4]
   b7cb6:	bd08      	pop	{r3, pc}
   b7cb8:	0003021c 	.word	0x0003021c

000b7cbc <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7cbc:	b508      	push	{r3, lr}
   b7cbe:	4b02      	ldr	r3, [pc, #8]	; (b7cc8 <snprintf+0xc>)
   b7cc0:	681b      	ldr	r3, [r3, #0]
   b7cc2:	69db      	ldr	r3, [r3, #28]
   b7cc4:	9301      	str	r3, [sp, #4]
   b7cc6:	bd08      	pop	{r3, pc}
   b7cc8:	0003021c 	.word	0x0003021c

000b7ccc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7ccc:	b508      	push	{r3, lr}
   b7cce:	4b02      	ldr	r3, [pc, #8]	; (b7cd8 <vsnprintf+0xc>)
   b7cd0:	681b      	ldr	r3, [r3, #0]
   b7cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7cd4:	9301      	str	r3, [sp, #4]
   b7cd6:	bd08      	pop	{r3, pc}
   b7cd8:	0003021c 	.word	0x0003021c

000b7cdc <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7cdc:	b508      	push	{r3, lr}
   b7cde:	4b02      	ldr	r3, [pc, #8]	; (b7ce8 <_malloc_r+0xc>)
   b7ce0:	681b      	ldr	r3, [r3, #0]
   b7ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7ce4:	9301      	str	r3, [sp, #4]
   b7ce6:	bd08      	pop	{r3, pc}
   b7ce8:	0003021c 	.word	0x0003021c

000b7cec <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7cec:	b508      	push	{r3, lr}
   b7cee:	4b02      	ldr	r3, [pc, #8]	; (b7cf8 <__assert_func+0xc>)
   b7cf0:	681b      	ldr	r3, [r3, #0]
   b7cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7cf4:	9301      	str	r3, [sp, #4]
   b7cf6:	bd08      	pop	{r3, pc}
   b7cf8:	0003021c 	.word	0x0003021c

000b7cfc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7cfc:	b508      	push	{r3, lr}
   b7cfe:	4b02      	ldr	r3, [pc, #8]	; (b7d08 <newlib_impure_ptr_callback+0xc>)
   b7d00:	681b      	ldr	r3, [r3, #0]
   b7d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d04:	9301      	str	r3, [sp, #4]
   b7d06:	bd08      	pop	{r3, pc}
   b7d08:	0003021c 	.word	0x0003021c

000b7d0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d0c:	2200      	movs	r2, #0
   b7d0e:	6840      	ldr	r0, [r0, #4]
   b7d10:	4611      	mov	r1, r2
   b7d12:	f7ff bf83 	b.w	b7c1c <network_listening>

000b7d16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7d16:	2200      	movs	r2, #0
   b7d18:	6840      	ldr	r0, [r0, #4]
   b7d1a:	4611      	mov	r1, r2
   b7d1c:	f7ff bf8e 	b.w	b7c3c <network_get_listen_timeout>

000b7d20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7d20:	6840      	ldr	r0, [r0, #4]
   b7d22:	2200      	movs	r2, #0
   b7d24:	f7ff bf82 	b.w	b7c2c <network_set_listen_timeout>

000b7d28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7d28:	6840      	ldr	r0, [r0, #4]
   b7d2a:	2200      	movs	r2, #0
   b7d2c:	f081 0101 	eor.w	r1, r1, #1
   b7d30:	f7ff bf6c 	b.w	b7c0c <network_listen>

000b7d34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d34:	2300      	movs	r3, #0
   b7d36:	6840      	ldr	r0, [r0, #4]
   b7d38:	461a      	mov	r2, r3
   b7d3a:	4619      	mov	r1, r3
   b7d3c:	f7ff bf5e 	b.w	b7bfc <network_off>

000b7d40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d40:	2300      	movs	r3, #0
   b7d42:	6840      	ldr	r0, [r0, #4]
   b7d44:	461a      	mov	r2, r3
   b7d46:	4619      	mov	r1, r3
   b7d48:	f7ff bf50 	b.w	b7bec <network_on>

000b7d4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7d4c:	2200      	movs	r2, #0
   b7d4e:	6840      	ldr	r0, [r0, #4]
   b7d50:	4611      	mov	r1, r2
   b7d52:	f7ff bf43 	b.w	b7bdc <network_ready>

000b7d56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d56:	2200      	movs	r2, #0
   b7d58:	6840      	ldr	r0, [r0, #4]
   b7d5a:	4611      	mov	r1, r2
   b7d5c:	f7ff bf2e 	b.w	b7bbc <network_connecting>

000b7d60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d60:	6840      	ldr	r0, [r0, #4]
   b7d62:	2200      	movs	r2, #0
   b7d64:	2102      	movs	r1, #2
   b7d66:	f7ff bf31 	b.w	b7bcc <network_disconnect>

000b7d6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d6a:	2300      	movs	r3, #0
   b7d6c:	6840      	ldr	r0, [r0, #4]
   b7d6e:	461a      	mov	r2, r3
   b7d70:	f7ff bf1c 	b.w	b7bac <network_connect>

000b7d74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7d74:	4b02      	ldr	r3, [pc, #8]	; (b7d80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7d76:	2203      	movs	r2, #3
   b7d78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7d7a:	4a02      	ldr	r2, [pc, #8]	; (b7d84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7d7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7d7e:	4770      	bx	lr
   b7d80:	2003e6c4 	.word	0x2003e6c4
   b7d84:	000baaec 	.word	0x000baaec

000b7d88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7d88:	2100      	movs	r1, #0
   b7d8a:	f7ff bea3 	b.w	b7ad4 <hal_spi_release>

000b7d8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7d8e:	2100      	movs	r1, #0
   b7d90:	f7ff be98 	b.w	b7ac4 <hal_spi_acquire>

000b7d94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d94:	b510      	push	{r4, lr}
   b7d96:	4604      	mov	r4, r0
   b7d98:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d9c:	f7ff fe72 	bl	b7a84 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7da0:	2300      	movs	r3, #0
   b7da2:	6063      	str	r3, [r4, #4]
}
   b7da4:	4620      	mov	r0, r4
   b7da6:	bd10      	pop	{r4, pc}

000b7da8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7da8:	b513      	push	{r0, r1, r4, lr}
   b7daa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7dac:	7800      	ldrb	r0, [r0, #0]
   b7dae:	f7ff ffee 	bl	b7d8e <_ZN8SPIClass4lockEv.isra.0>
   b7db2:	b958      	cbnz	r0, b7dcc <_ZN8SPIClass5beginEv+0x24>
   b7db4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7db6:	9001      	str	r0, [sp, #4]
   b7db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7dbc:	f7ff fe52 	bl	b7a64 <hal_spi_begin>
        unlock();
   b7dc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b7dc2:	b002      	add	sp, #8
   b7dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7dc8:	f7ff bfde 	b.w	b7d88 <_ZN8SPIClass6unlockEv.isra.0>
   b7dcc:	b002      	add	sp, #8
   b7dce:	bd10      	pop	{r4, pc}

000b7dd0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7dd0:	7800      	ldrb	r0, [r0, #0]
   b7dd2:	f7ff bfd9 	b.w	b7d88 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7dd8:	0840      	lsrs	r0, r0, #1
{
   b7dda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7ddc:	6018      	str	r0, [r3, #0]
   b7dde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7de0:	6818      	ldr	r0, [r3, #0]
   b7de2:	4288      	cmp	r0, r1
   b7de4:	b2e5      	uxtb	r5, r4
   b7de6:	d906      	bls.n	b7df6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7de8:	3401      	adds	r4, #1
   b7dea:	2c08      	cmp	r4, #8
   b7dec:	d002      	beq.n	b7df4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7dee:	0840      	lsrs	r0, r0, #1
   b7df0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7df2:	e7f5      	b.n	b7de0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7df4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7df6:	4b02      	ldr	r3, [pc, #8]	; (b7e00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7df8:	5d5b      	ldrb	r3, [r3, r5]
   b7dfa:	7013      	strb	r3, [r2, #0]
}
   b7dfc:	bd30      	pop	{r4, r5, pc}
   b7dfe:	bf00      	nop
   b7e00:	000bab20 	.word	0x000bab20

000b7e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e08:	4606      	mov	r6, r0
   b7e0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7e0c:	7800      	ldrb	r0, [r0, #0]
{
   b7e0e:	460c      	mov	r4, r1
    CHECK(lock());
   b7e10:	f7ff ffbd 	bl	b7d8e <_ZN8SPIClass4lockEv.isra.0>
   b7e14:	2800      	cmp	r0, #0
   b7e16:	db1b      	blt.n	b7e50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7e18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7e1a:	2214      	movs	r2, #20
   b7e1c:	2100      	movs	r1, #0
   b7e1e:	a809      	add	r0, sp, #36	; 0x24
   b7e20:	f001 fb92 	bl	b9548 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7e26:	2200      	movs	r2, #0
   b7e28:	a909      	add	r1, sp, #36	; 0x24
   b7e2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7e2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7e30:	f7ff fe38 	bl	b7aa4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7e34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7e38:	b113      	cbz	r3, b7e40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7e3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7e3e:	b155      	cbz	r5, b7e56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7e40:	2700      	movs	r7, #0
   b7e42:	46b9      	mov	r9, r7
   b7e44:	46b8      	mov	r8, r7
   b7e46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7e48:	7923      	ldrb	r3, [r4, #4]
   b7e4a:	b15d      	cbz	r5, b7e64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7e4c:	b1c3      	cbz	r3, b7e80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7e4e:	2000      	movs	r0, #0
}
   b7e50:	b00f      	add	sp, #60	; 0x3c
   b7e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7e56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7e5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7e5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7e62:	e7f1      	b.n	b7e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7e64:	2b00      	cmp	r3, #0
   b7e66:	d135      	bne.n	b7ed4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7e68:	68a3      	ldr	r3, [r4, #8]
   b7e6a:	4543      	cmp	r3, r8
   b7e6c:	d108      	bne.n	b7e80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7e6e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e7a:	89a3      	ldrh	r3, [r4, #12]
   b7e7c:	429a      	cmp	r2, r3
   b7e7e:	d0e6      	beq.n	b7e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7e80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7e84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e88:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7e8a:	ab04      	add	r3, sp, #16
   b7e8c:	f10d 020f 	add.w	r2, sp, #15
   b7e90:	f7ff ffa2 	bl	b7dd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7e94:	7921      	ldrb	r1, [r4, #4]
   b7e96:	b985      	cbnz	r5, b7eba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7e98:	b989      	cbnz	r1, b7ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e9a:	68a3      	ldr	r3, [r4, #8]
   b7e9c:	4543      	cmp	r3, r8
   b7e9e:	d30e      	bcc.n	b7ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7ea0:	f88d 9020 	strb.w	r9, [sp, #32]
   b7ea4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7ea8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7eac:	89a3      	ldrh	r3, [r4, #12]
   b7eae:	429a      	cmp	r2, r3
   b7eb0:	d105      	bne.n	b7ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7eb2:	9b04      	ldr	r3, [sp, #16]
   b7eb4:	4543      	cmp	r3, r8
   b7eb6:	d102      	bne.n	b7ebe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7eb8:	e7c9      	b.n	b7e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7eba:	2900      	cmp	r1, #0
   b7ebc:	d1f9      	bne.n	b7eb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7ebe:	2300      	movs	r3, #0
   b7ec0:	9301      	str	r3, [sp, #4]
   b7ec2:	7b63      	ldrb	r3, [r4, #13]
   b7ec4:	9300      	str	r3, [sp, #0]
   b7ec6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7eca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7ecc:	7830      	ldrb	r0, [r6, #0]
   b7ece:	f7ff fdf1 	bl	b7ab4 <hal_spi_set_settings>
   b7ed2:	e7bc      	b.n	b7e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7ed4:	e9cd 5500 	strd	r5, r5, [sp]
   b7ed8:	462b      	mov	r3, r5
   b7eda:	462a      	mov	r2, r5
   b7edc:	2101      	movs	r1, #1
   b7ede:	e7f5      	b.n	b7ecc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7ee0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7ee0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7ee2:	7800      	ldrb	r0, [r0, #0]
   b7ee4:	f7ff fdc6 	bl	b7a74 <hal_spi_transfer>
}
   b7ee8:	b2c0      	uxtb	r0, r0
   b7eea:	bd08      	pop	{r3, pc}

000b7eec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7eec:	4b05      	ldr	r3, [pc, #20]	; (b7f04 <_GLOBAL__sub_I_System+0x18>)
   b7eee:	2202      	movs	r2, #2
   b7ef0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7ef2:	4b05      	ldr	r3, [pc, #20]	; (b7f08 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7ef4:	4a05      	ldr	r2, [pc, #20]	; (b7f0c <_GLOBAL__sub_I_System+0x20>)
   b7ef6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7ef8:	2000      	movs	r0, #0
   b7efa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7efe:	f7ff be31 	b.w	b7b64 <set_system_mode>
   b7f02:	bf00      	nop
   b7f04:	2003e6d8 	.word	0x2003e6d8
   b7f08:	2003e6cc 	.word	0x2003e6cc
   b7f0c:	ffff0000 	.word	0xffff0000

000b7f10 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7f10:	b510      	push	{r4, lr}
   b7f12:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7f14:	f001 fb66 	bl	b95e4 <strlen>
   b7f18:	3801      	subs	r0, #1
   b7f1a:	1823      	adds	r3, r4, r0
   b7f1c:	4620      	mov	r0, r4
	while(i<j){
   b7f1e:	4283      	cmp	r3, r0
   b7f20:	d906      	bls.n	b7f30 <_Z11str_reversePc+0x20>
		c = *i;
   b7f22:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7f24:	7819      	ldrb	r1, [r3, #0]
   b7f26:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7f2a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7f2e:	e7f6      	b.n	b7f1e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7f30:	bd10      	pop	{r4, pc}

000b7f32 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7f32:	b570      	push	{r4, r5, r6, lr}
   b7f34:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7f36:	1e91      	subs	r1, r2, #2
   b7f38:	2922      	cmp	r1, #34	; 0x22
   b7f3a:	d81d      	bhi.n	b7f78 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7f3c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7f3e:	b930      	cbnz	r0, b7f4e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7f40:	4423      	add	r3, r4
            *ptr++ = '0';
   b7f42:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7f44:	429d      	cmp	r5, r3
   b7f46:	d210      	bcs.n	b7f6a <ultoa+0x38>
            *ptr++ = '0';
   b7f48:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7f4c:	e7fa      	b.n	b7f44 <ultoa+0x12>
            result.quot = a/radix;
   b7f4e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7f52:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7f56:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7f58:	2809      	cmp	r0, #9
                *ptr += '0';
   b7f5a:	bf94      	ite	ls
   b7f5c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7f5e:	3157      	addhi	r1, #87	; 0x57
   b7f60:	b2c9      	uxtb	r1, r1
   b7f62:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7f66:	4630      	mov	r0, r6
	while(a){
   b7f68:	e7e9      	b.n	b7f3e <ultoa+0xc>

	*ptr = '\0';
   b7f6a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7f6c:	4620      	mov	r0, r4
	*ptr = '\0';
   b7f6e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7f70:	f7ff ffce 	bl	b7f10 <_Z11str_reversePc>
	return buffer;
   b7f74:	4620      	mov	r0, r4
}
   b7f76:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7f78:	2000      	movs	r0, #0
   b7f7a:	e7fc      	b.n	b7f76 <ultoa+0x44>

000b7f7c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f7c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7f7e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f80:	460c      	mov	r4, r1
   b7f82:	4615      	mov	r5, r2
	if(a<0){
   b7f84:	da0e      	bge.n	b7fa4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7f8a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f8e:	bf14      	ite	ne
   b7f90:	4258      	negne	r0, r3
   b7f92:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7f94:	2301      	movs	r3, #1
		*buffer = '-';
   b7f96:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7f98:	462a      	mov	r2, r5
   b7f9a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7f9c:	f7ff ffc9 	bl	b7f32 <ultoa>
	}
	return buffer;
}
   b7fa0:	4620      	mov	r0, r4
   b7fa2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7fa4:	2301      	movs	r3, #1
   b7fa6:	e7f9      	b.n	b7f9c <itoa+0x20>

000b7fa8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7fa8:	b510      	push	{r4, lr}
   b7faa:	4604      	mov	r4, r0
{
	free(buffer);
   b7fac:	6800      	ldr	r0, [r0, #0]
   b7fae:	f7ff fe75 	bl	b7c9c <free>
}
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	bd10      	pop	{r4, pc}

000b7fb6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7fb6:	b510      	push	{r4, lr}
   b7fb8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7fba:	6800      	ldr	r0, [r0, #0]
   b7fbc:	b108      	cbz	r0, b7fc2 <_ZN6String10invalidateEv+0xc>
   b7fbe:	f7ff fe6d 	bl	b7c9c <free>
	buffer = NULL;
   b7fc2:	2300      	movs	r3, #0
	capacity = len = 0;
   b7fc4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7fc8:	6023      	str	r3, [r4, #0]
}
   b7fca:	bd10      	pop	{r4, pc}

000b7fcc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7fcc:	b538      	push	{r3, r4, r5, lr}
   b7fce:	4604      	mov	r4, r0
   b7fd0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7fd2:	6800      	ldr	r0, [r0, #0]
   b7fd4:	3101      	adds	r1, #1
   b7fd6:	f7ff fe69 	bl	b7cac <realloc>
	if (newbuffer) {
   b7fda:	b110      	cbz	r0, b7fe2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7fdc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7fe0:	2001      	movs	r0, #1
	}
	return 0;
}
   b7fe2:	bd38      	pop	{r3, r4, r5, pc}

000b7fe4 <_ZN6String7reserveEj>:
{
   b7fe4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7fe6:	6803      	ldr	r3, [r0, #0]
{
   b7fe8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7fea:	b123      	cbz	r3, b7ff6 <_ZN6String7reserveEj+0x12>
   b7fec:	6843      	ldr	r3, [r0, #4]
   b7fee:	428b      	cmp	r3, r1
   b7ff0:	d301      	bcc.n	b7ff6 <_ZN6String7reserveEj+0x12>
   b7ff2:	2001      	movs	r0, #1
}
   b7ff4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff ffe8 	bl	b7fcc <_ZN6String12changeBufferEj>
   b7ffc:	2800      	cmp	r0, #0
   b7ffe:	d0f9      	beq.n	b7ff4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8000:	68a3      	ldr	r3, [r4, #8]
   b8002:	2b00      	cmp	r3, #0
   b8004:	d1f5      	bne.n	b7ff2 <_ZN6String7reserveEj+0xe>
   b8006:	6822      	ldr	r2, [r4, #0]
   b8008:	7013      	strb	r3, [r2, #0]
   b800a:	e7f2      	b.n	b7ff2 <_ZN6String7reserveEj+0xe>

000b800c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b800c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b800e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8010:	4611      	mov	r1, r2
   b8012:	9201      	str	r2, [sp, #4]
{
   b8014:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8016:	f7ff ffe5 	bl	b7fe4 <_ZN6String7reserveEj>
   b801a:	9a01      	ldr	r2, [sp, #4]
   b801c:	b928      	cbnz	r0, b802a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff ffc9 	bl	b7fb6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8024:	4620      	mov	r0, r4
   b8026:	b003      	add	sp, #12
   b8028:	bd30      	pop	{r4, r5, pc}
	len = length;
   b802a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b802c:	4629      	mov	r1, r5
   b802e:	6820      	ldr	r0, [r4, #0]
   b8030:	f001 fa7c 	bl	b952c <memcpy>
	buffer[len] = 0;
   b8034:	6822      	ldr	r2, [r4, #0]
   b8036:	68a3      	ldr	r3, [r4, #8]
   b8038:	2100      	movs	r1, #0
   b803a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b803c:	e7f2      	b.n	b8024 <_ZN6String4copyEPKcj+0x18>

000b803e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b803e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8040:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8042:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8046:	4604      	mov	r4, r0
	len = 0;
   b8048:	6083      	str	r3, [r0, #8]
	flags = 0;
   b804a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b804c:	b141      	cbz	r1, b8060 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b804e:	4608      	mov	r0, r1
   b8050:	9101      	str	r1, [sp, #4]
   b8052:	f001 fac7 	bl	b95e4 <strlen>
   b8056:	9901      	ldr	r1, [sp, #4]
   b8058:	4602      	mov	r2, r0
   b805a:	4620      	mov	r0, r4
   b805c:	f7ff ffd6 	bl	b800c <_ZN6String4copyEPKcj>
}
   b8060:	4620      	mov	r0, r4
   b8062:	b002      	add	sp, #8
   b8064:	bd10      	pop	{r4, pc}

000b8066 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8066:	4288      	cmp	r0, r1
{
   b8068:	b510      	push	{r4, lr}
   b806a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b806c:	d005      	beq.n	b807a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b806e:	680b      	ldr	r3, [r1, #0]
   b8070:	b12b      	cbz	r3, b807e <_ZN6StringaSERKS_+0x18>
   b8072:	688a      	ldr	r2, [r1, #8]
   b8074:	4619      	mov	r1, r3
   b8076:	f7ff ffc9 	bl	b800c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b807a:	4620      	mov	r0, r4
   b807c:	bd10      	pop	{r4, pc}
	else invalidate();
   b807e:	f7ff ff9a 	bl	b7fb6 <_ZN6String10invalidateEv>
   b8082:	e7fa      	b.n	b807a <_ZN6StringaSERKS_+0x14>

000b8084 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8084:	b510      	push	{r4, lr}
	buffer = NULL;
   b8086:	2300      	movs	r3, #0
String::String(const String &value)
   b8088:	4604      	mov	r4, r0
	capacity = 0;
   b808a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b808e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8090:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8092:	f7ff ffe8 	bl	b8066 <_ZN6StringaSERKS_>
}
   b8096:	4620      	mov	r0, r4
   b8098:	bd10      	pop	{r4, pc}

000b809a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b809a:	b513      	push	{r0, r1, r4, lr}
   b809c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b809e:	b159      	cbz	r1, b80b8 <_ZN6StringaSEPKc+0x1e>
   b80a0:	4608      	mov	r0, r1
   b80a2:	9101      	str	r1, [sp, #4]
   b80a4:	f001 fa9e 	bl	b95e4 <strlen>
   b80a8:	9901      	ldr	r1, [sp, #4]
   b80aa:	4602      	mov	r2, r0
   b80ac:	4620      	mov	r0, r4
   b80ae:	f7ff ffad 	bl	b800c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b80b2:	4620      	mov	r0, r4
   b80b4:	b002      	add	sp, #8
   b80b6:	bd10      	pop	{r4, pc}
	else invalidate();
   b80b8:	f7ff ff7d 	bl	b7fb6 <_ZN6String10invalidateEv>
   b80bc:	e7f9      	b.n	b80b2 <_ZN6StringaSEPKc+0x18>

000b80be <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b80be:	b510      	push	{r4, lr}
   b80c0:	4604      	mov	r4, r0
   b80c2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b80c4:	2300      	movs	r3, #0
	capacity = 0;
   b80c6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b80ca:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b80cc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b80ce:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b80d0:	a901      	add	r1, sp, #4
   b80d2:	f7ff ff53 	bl	b7f7c <itoa>
	*this = buf;
   b80d6:	a901      	add	r1, sp, #4
   b80d8:	4620      	mov	r0, r4
   b80da:	f7ff ffde 	bl	b809a <_ZN6StringaSEPKc>
}
   b80de:	4620      	mov	r0, r4
   b80e0:	b00a      	add	sp, #40	; 0x28
   b80e2:	bd10      	pop	{r4, pc}

000b80e4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b80e4:	b570      	push	{r4, r5, r6, lr}
   b80e6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b80e8:	460e      	mov	r6, r1
   b80ea:	b909      	cbnz	r1, b80f0 <_ZN6String6concatEPKcj+0xc>
   b80ec:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b80ee:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b80f0:	b16a      	cbz	r2, b810e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b80f2:	6884      	ldr	r4, [r0, #8]
   b80f4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b80f6:	4621      	mov	r1, r4
   b80f8:	f7ff ff74 	bl	b7fe4 <_ZN6String7reserveEj>
   b80fc:	2800      	cmp	r0, #0
   b80fe:	d0f5      	beq.n	b80ec <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8100:	6828      	ldr	r0, [r5, #0]
   b8102:	68ab      	ldr	r3, [r5, #8]
   b8104:	4631      	mov	r1, r6
   b8106:	4418      	add	r0, r3
   b8108:	f001 fa64 	bl	b95d4 <strcpy>
	len = newlen;
   b810c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b810e:	2001      	movs	r0, #1
   b8110:	e7ed      	b.n	b80ee <_ZN6String6concatEPKcj+0xa>

000b8112 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8112:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8114:	688a      	ldr	r2, [r1, #8]
   b8116:	6809      	ldr	r1, [r1, #0]
{
   b8118:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b811a:	f7ff ffe3 	bl	b80e4 <_ZN6String6concatEPKcj>
   b811e:	b910      	cbnz	r0, b8126 <_ZplRK15StringSumHelperRK6String+0x14>
   b8120:	4620      	mov	r0, r4
   b8122:	f7ff ff48 	bl	b7fb6 <_ZN6String10invalidateEv>
	return a;
}
   b8126:	4620      	mov	r0, r4
   b8128:	bd10      	pop	{r4, pc}

000b812a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b812a:	b513      	push	{r0, r1, r4, lr}
   b812c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b812e:	b929      	cbnz	r1, b813c <_ZplRK15StringSumHelperPKc+0x12>
   b8130:	4620      	mov	r0, r4
   b8132:	f7ff ff40 	bl	b7fb6 <_ZN6String10invalidateEv>
	return a;
}
   b8136:	4620      	mov	r0, r4
   b8138:	b002      	add	sp, #8
   b813a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b813c:	4608      	mov	r0, r1
   b813e:	9101      	str	r1, [sp, #4]
   b8140:	f001 fa50 	bl	b95e4 <strlen>
   b8144:	9901      	ldr	r1, [sp, #4]
   b8146:	4602      	mov	r2, r0
   b8148:	4620      	mov	r0, r4
   b814a:	f7ff ffcb 	bl	b80e4 <_ZN6String6concatEPKcj>
   b814e:	2800      	cmp	r0, #0
   b8150:	d0ee      	beq.n	b8130 <_ZplRK15StringSumHelperPKc+0x6>
   b8152:	e7f0      	b.n	b8136 <_ZplRK15StringSumHelperPKc+0xc>

000b8154 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8154:	4802      	ldr	r0, [pc, #8]	; (b8160 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8156:	2300      	movs	r3, #0
   b8158:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b815a:	f7ff bbdb 	b.w	b7914 <os_mutex_recursive_create>
   b815e:	bf00      	nop
   b8160:	2003e6dc 	.word	0x2003e6dc

000b8164 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8166:	4606      	mov	r6, r0
   b8168:	460d      	mov	r5, r1
  size_t n = 0;
   b816a:	188f      	adds	r7, r1, r2
   b816c:	2400      	movs	r4, #0
  while (size--) {
   b816e:	42bd      	cmp	r5, r7
   b8170:	d00c      	beq.n	b818c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8172:	6833      	ldr	r3, [r6, #0]
   b8174:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8178:	689b      	ldr	r3, [r3, #8]
   b817a:	4630      	mov	r0, r6
   b817c:	4798      	blx	r3
     if (chunk>=0)
   b817e:	1e03      	subs	r3, r0, #0
   b8180:	db01      	blt.n	b8186 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8182:	441c      	add	r4, r3
  while (size--) {
   b8184:	e7f3      	b.n	b816e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8186:	2c00      	cmp	r4, #0
   b8188:	bf08      	it	eq
   b818a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b818c:	4620      	mov	r0, r4
   b818e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8190 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8190:	b513      	push	{r0, r1, r4, lr}
   b8192:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8194:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8196:	b159      	cbz	r1, b81b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8198:	9101      	str	r1, [sp, #4]
   b819a:	f001 fa23 	bl	b95e4 <strlen>
   b819e:	6823      	ldr	r3, [r4, #0]
   b81a0:	9901      	ldr	r1, [sp, #4]
   b81a2:	68db      	ldr	r3, [r3, #12]
   b81a4:	4602      	mov	r2, r0
   b81a6:	4620      	mov	r0, r4
    }
   b81a8:	b002      	add	sp, #8
   b81aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b81ae:	4718      	bx	r3
    }
   b81b0:	b002      	add	sp, #8
   b81b2:	bd10      	pop	{r4, pc}

000b81b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b81b4:	b508      	push	{r3, lr}
  return write(str);
   b81b6:	f7ff ffeb 	bl	b8190 <_ZN5Print5writeEPKc>
}
   b81ba:	bd08      	pop	{r3, pc}

000b81bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b81bc:	6803      	ldr	r3, [r0, #0]
   b81be:	689b      	ldr	r3, [r3, #8]
   b81c0:	4718      	bx	r3

000b81c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b81c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b81c4:	210d      	movs	r1, #13
{
   b81c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b81c8:	f7ff fff8 	bl	b81bc <_ZN5Print5printEc>
  n += print('\n');
   b81cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b81ce:	4604      	mov	r4, r0
  n += print('\n');
   b81d0:	4628      	mov	r0, r5
   b81d2:	f7ff fff3 	bl	b81bc <_ZN5Print5printEc>
  return n;
}
   b81d6:	4420      	add	r0, r4
   b81d8:	bd38      	pop	{r3, r4, r5, pc}

000b81da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b81da:	b538      	push	{r3, r4, r5, lr}
   b81dc:	4605      	mov	r5, r0
  return write(str);
   b81de:	f7ff ffd7 	bl	b8190 <_ZN5Print5writeEPKc>
   b81e2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b81e4:	4628      	mov	r0, r5
   b81e6:	f7ff ffec 	bl	b81c2 <_ZN5Print7printlnEv>
  return n;
}
   b81ea:	4420      	add	r0, r4
   b81ec:	bd38      	pop	{r3, r4, r5, pc}

000b81ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b81ee:	b530      	push	{r4, r5, lr}
   b81f0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b81f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b81f4:	2a01      	cmp	r2, #1
  *str = '\0';
   b81f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b81fa:	bf98      	it	ls
   b81fc:	220a      	movls	r2, #10
   b81fe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8200:	460d      	mov	r5, r1
   b8202:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8206:	fb01 5312 	mls	r3, r1, r2, r5
   b820a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b820e:	2b09      	cmp	r3, #9
   b8210:	bf94      	ite	ls
   b8212:	3330      	addls	r3, #48	; 0x30
   b8214:	3337      	addhi	r3, #55	; 0x37
   b8216:	b2db      	uxtb	r3, r3
  } while(n);
   b8218:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b821a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b821e:	d9ef      	bls.n	b8200 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8220:	4621      	mov	r1, r4
   b8222:	f7ff ffb5 	bl	b8190 <_ZN5Print5writeEPKc>
}
   b8226:	b00b      	add	sp, #44	; 0x2c
   b8228:	bd30      	pop	{r4, r5, pc}

000b822a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b822e:	b086      	sub	sp, #24
   b8230:	af00      	add	r7, sp, #0
   b8232:	4605      	mov	r5, r0
   b8234:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8236:	1d38      	adds	r0, r7, #4
   b8238:	2114      	movs	r1, #20
{
   b823a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b823c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b823e:	f7ff fd45 	bl	b7ccc <vsnprintf>

    if (n<bufsize)
   b8242:	2813      	cmp	r0, #19
   b8244:	d80e      	bhi.n	b8264 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8246:	1d39      	adds	r1, r7, #4
   b8248:	4628      	mov	r0, r5
   b824a:	f7ff ffa1 	bl	b8190 <_ZN5Print5writeEPKc>
   b824e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8250:	b11e      	cbz	r6, b825a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8252:	4628      	mov	r0, r5
   b8254:	f7ff ffb5 	bl	b81c2 <_ZN5Print7printlnEv>
   b8258:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b825a:	4620      	mov	r0, r4
   b825c:	3718      	adds	r7, #24
   b825e:	46bd      	mov	sp, r7
   b8260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8264:	f100 0308 	add.w	r3, r0, #8
   b8268:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b826c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b826e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8272:	4622      	mov	r2, r4
   b8274:	1c41      	adds	r1, r0, #1
   b8276:	683b      	ldr	r3, [r7, #0]
   b8278:	4668      	mov	r0, sp
   b827a:	f7ff fd27 	bl	b7ccc <vsnprintf>
  return write(str);
   b827e:	4669      	mov	r1, sp
   b8280:	4628      	mov	r0, r5
   b8282:	f7ff ff85 	bl	b8190 <_ZN5Print5writeEPKc>
   b8286:	4604      	mov	r4, r0
   b8288:	46c5      	mov	sp, r8
   b828a:	e7e1      	b.n	b8250 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b828c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b828c:	4b01      	ldr	r3, [pc, #4]	; (b8294 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b828e:	4a02      	ldr	r2, [pc, #8]	; (b8298 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8290:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8292:	4770      	bx	lr
   b8294:	2003e6e0 	.word	0x2003e6e0
   b8298:	000bab28 	.word	0x000bab28

000b829c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b829c:	4b02      	ldr	r3, [pc, #8]	; (b82a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b829e:	681a      	ldr	r2, [r3, #0]
   b82a0:	4b02      	ldr	r3, [pc, #8]	; (b82ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b82a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b82a4:	4770      	bx	lr
   b82a6:	bf00      	nop
   b82a8:	2003df64 	.word	0x2003df64
   b82ac:	2003e6e4 	.word	0x2003e6e4

000b82b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b82b0:	2100      	movs	r1, #0
   b82b2:	f7ff bc5f 	b.w	b7b74 <system_delay_ms>
	...

000b82b8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b82b8:	4b01      	ldr	r3, [pc, #4]	; (b82c0 <_GLOBAL__sub_I_RGB+0x8>)
   b82ba:	2200      	movs	r2, #0
   b82bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b82be:	4770      	bx	lr
   b82c0:	2003e6e8 	.word	0x2003e6e8

000b82c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b82c4:	4b01      	ldr	r3, [pc, #4]	; (b82cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b82c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b82c8:	4770      	bx	lr
   b82ca:	bf00      	nop
   b82cc:	2003df68 	.word	0x2003df68

000b82d0 <serialEventRun>:
{
   b82d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b82d2:	4b0b      	ldr	r3, [pc, #44]	; (b8300 <serialEventRun+0x30>)
   b82d4:	b143      	cbz	r3, b82e8 <serialEventRun+0x18>
   b82d6:	f000 f981 	bl	b85dc <_Z16_fetch_usbserialv>
   b82da:	6803      	ldr	r3, [r0, #0]
   b82dc:	691b      	ldr	r3, [r3, #16]
   b82de:	4798      	blx	r3
   b82e0:	2800      	cmp	r0, #0
   b82e2:	dd01      	ble.n	b82e8 <serialEventRun+0x18>
        serialEvent();
   b82e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b82e8:	4b06      	ldr	r3, [pc, #24]	; (b8304 <serialEventRun+0x34>)
   b82ea:	b143      	cbz	r3, b82fe <serialEventRun+0x2e>
   b82ec:	f000 fbe8 	bl	b8ac0 <_Z22__fetch_global_Serial1v>
   b82f0:	6803      	ldr	r3, [r0, #0]
   b82f2:	691b      	ldr	r3, [r3, #16]
   b82f4:	4798      	blx	r3
   b82f6:	2800      	cmp	r0, #0
   b82f8:	dd01      	ble.n	b82fe <serialEventRun+0x2e>
        serialEvent1();
   b82fa:	f3af 8000 	nop.w
}
   b82fe:	bd08      	pop	{r3, pc}
	...

000b8308 <_post_loop>:
{
   b8308:	b508      	push	{r3, lr}
	serialEventRun();
   b830a:	f7ff ffe1 	bl	b82d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b830e:	f7ff faf9 	bl	b7904 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8312:	4b01      	ldr	r3, [pc, #4]	; (b8318 <_post_loop+0x10>)
   b8314:	6018      	str	r0, [r3, #0]
}
   b8316:	bd08      	pop	{r3, pc}
   b8318:	2003e740 	.word	0x2003e740

000b831c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b831c:	4805      	ldr	r0, [pc, #20]	; (b8334 <_Z33system_initialize_user_backup_ramv+0x18>)
   b831e:	4a06      	ldr	r2, [pc, #24]	; (b8338 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8320:	4906      	ldr	r1, [pc, #24]	; (b833c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8322:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8324:	1a12      	subs	r2, r2, r0
   b8326:	f001 f901 	bl	b952c <memcpy>
    __backup_sram_signature = signature;
   b832a:	4b05      	ldr	r3, [pc, #20]	; (b8340 <_Z33system_initialize_user_backup_ramv+0x24>)
   b832c:	4a05      	ldr	r2, [pc, #20]	; (b8344 <_Z33system_initialize_user_backup_ramv+0x28>)
   b832e:	601a      	str	r2, [r3, #0]
}
   b8330:	bd08      	pop	{r3, pc}
   b8332:	bf00      	nop
   b8334:	2003f400 	.word	0x2003f400
   b8338:	2003f404 	.word	0x2003f404
   b833c:	000badc4 	.word	0x000badc4
   b8340:	2003f400 	.word	0x2003f400
   b8344:	9a271c1e 	.word	0x9a271c1e

000b8348 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8348:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b834a:	2300      	movs	r3, #0
   b834c:	9300      	str	r3, [sp, #0]
   b834e:	461a      	mov	r2, r3
   b8350:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8354:	f7ff fc20 	bl	b7b98 <system_ctrl_set_result>
}
   b8358:	b003      	add	sp, #12
   b835a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8360 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8360:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8362:	8843      	ldrh	r3, [r0, #2]
   b8364:	2b0a      	cmp	r3, #10
   b8366:	d008      	beq.n	b837a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8368:	2b50      	cmp	r3, #80	; 0x50
   b836a:	d10b      	bne.n	b8384 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b836c:	4b09      	ldr	r3, [pc, #36]	; (b8394 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b836e:	681b      	ldr	r3, [r3, #0]
   b8370:	b14b      	cbz	r3, b8386 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8372:	b003      	add	sp, #12
   b8374:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8378:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b837a:	f7ff ffe5 	bl	b8348 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b837e:	b003      	add	sp, #12
   b8380:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8384:	2300      	movs	r3, #0
   b8386:	9300      	str	r3, [sp, #0]
   b8388:	461a      	mov	r2, r3
   b838a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b838e:	f7ff fc03 	bl	b7b98 <system_ctrl_set_result>
}
   b8392:	e7f4      	b.n	b837e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8394:	2003e6fc 	.word	0x2003e6fc

000b8398 <module_user_init_hook>:
{
   b8398:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b839a:	4812      	ldr	r0, [pc, #72]	; (b83e4 <module_user_init_hook+0x4c>)
   b839c:	2100      	movs	r1, #0
   b839e:	f7ff fcad 	bl	b7cfc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b83a2:	4b11      	ldr	r3, [pc, #68]	; (b83e8 <module_user_init_hook+0x50>)
   b83a4:	681a      	ldr	r2, [r3, #0]
   b83a6:	4b11      	ldr	r3, [pc, #68]	; (b83ec <module_user_init_hook+0x54>)
   b83a8:	429a      	cmp	r2, r3
   b83aa:	4b11      	ldr	r3, [pc, #68]	; (b83f0 <module_user_init_hook+0x58>)
   b83ac:	bf0c      	ite	eq
   b83ae:	2201      	moveq	r2, #1
   b83b0:	2200      	movne	r2, #0
   b83b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b83b4:	d001      	beq.n	b83ba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b83b6:	f7ff ffb1 	bl	b831c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b83ba:	f7ff fa93 	bl	b78e4 <HAL_RNG_GetRandomNumber>
   b83be:	4604      	mov	r4, r0
    srand(seed);
   b83c0:	f001 f8da 	bl	b9578 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b83c4:	4b0b      	ldr	r3, [pc, #44]	; (b83f4 <module_user_init_hook+0x5c>)
   b83c6:	b113      	cbz	r3, b83ce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b83c8:	4620      	mov	r0, r4
   b83ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b83ce:	2100      	movs	r1, #0
   b83d0:	4808      	ldr	r0, [pc, #32]	; (b83f4 <module_user_init_hook+0x5c>)
   b83d2:	f7ff fc4b 	bl	b7c6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b83d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b83da:	4807      	ldr	r0, [pc, #28]	; (b83f8 <module_user_init_hook+0x60>)
   b83dc:	2100      	movs	r1, #0
   b83de:	f7ff bbd1 	b.w	b7b84 <system_ctrl_set_app_request_handler>
   b83e2:	bf00      	nop
   b83e4:	000b82c5 	.word	0x000b82c5
   b83e8:	2003f400 	.word	0x2003f400
   b83ec:	9a271c1e 	.word	0x9a271c1e
   b83f0:	2003e6f8 	.word	0x2003e6f8
   b83f4:	00000000 	.word	0x00000000
   b83f8:	000b8361 	.word	0x000b8361

000b83fc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b83fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b83fe:	230c      	movs	r3, #12
   b8400:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b8404:	6803      	ldr	r3, [r0, #0]
   b8406:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b840a:	7a03      	ldrb	r3, [r0, #8]
   b840c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b8410:	6843      	ldr	r3, [r0, #4]
   b8412:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b8414:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b8416:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b8418:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b841c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b841e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b8422:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b8426:	f7ff fc29 	bl	b7c7c <spark_cloud_disconnect>
}
   b842a:	b005      	add	sp, #20
   b842c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8430 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8430:	4770      	bx	lr

000b8432 <_ZN9IPAddressD0Ev>:
   b8432:	b510      	push	{r4, lr}
   b8434:	2118      	movs	r1, #24
   b8436:	4604      	mov	r4, r0
   b8438:	f7fb fe2f 	bl	b409a <_ZdlPvj>
   b843c:	4620      	mov	r0, r4
   b843e:	bd10      	pop	{r4, pc}

000b8440 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8440:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8442:	7d03      	ldrb	r3, [r0, #20]
   b8444:	2b06      	cmp	r3, #6
{
   b8446:	b08d      	sub	sp, #52	; 0x34
   b8448:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b844a:	f100 0704 	add.w	r7, r0, #4
   b844e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8452:	d012      	beq.n	b847a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8454:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8458:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b845c:	220a      	movs	r2, #10
   b845e:	4630      	mov	r0, r6
   b8460:	f7ff fec5 	bl	b81ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8464:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8466:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8468:	d019      	beq.n	b849e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b846a:	2c00      	cmp	r4, #0
   b846c:	d0f4      	beq.n	b8458 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b846e:	212e      	movs	r1, #46	; 0x2e
   b8470:	4630      	mov	r0, r6
   b8472:	f7ff fea3 	bl	b81bc <_ZN5Print5printEc>
   b8476:	4404      	add	r4, r0
   b8478:	e7ee      	b.n	b8458 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b847a:	232f      	movs	r3, #47	; 0x2f
   b847c:	466a      	mov	r2, sp
   b847e:	4639      	mov	r1, r7
   b8480:	200a      	movs	r0, #10
		buf[0] = 0;
   b8482:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8486:	f7ff fa4d 	bl	b7924 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b848a:	4668      	mov	r0, sp
   b848c:	f001 f8aa 	bl	b95e4 <strlen>
   b8490:	6833      	ldr	r3, [r6, #0]
   b8492:	4602      	mov	r2, r0
   b8494:	68db      	ldr	r3, [r3, #12]
   b8496:	4669      	mov	r1, sp
   b8498:	4630      	mov	r0, r6
   b849a:	4798      	blx	r3
   b849c:	4604      	mov	r4, r0
    }
    return n;
}
   b849e:	4620      	mov	r0, r4
   b84a0:	b00d      	add	sp, #52	; 0x34
   b84a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b84a4:	b510      	push	{r4, lr}
   b84a6:	4b05      	ldr	r3, [pc, #20]	; (b84bc <_ZN9IPAddressC1Ev+0x18>)
   b84a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b84aa:	2211      	movs	r2, #17
   b84ac:	f840 3b04 	str.w	r3, [r0], #4
   b84b0:	2100      	movs	r1, #0
   b84b2:	f001 f849 	bl	b9548 <memset>
}
   b84b6:	4620      	mov	r0, r4
   b84b8:	bd10      	pop	{r4, pc}
   b84ba:	bf00      	nop
   b84bc:	000bab50 	.word	0x000bab50

000b84c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b84c0:	4603      	mov	r3, r0
   b84c2:	4a07      	ldr	r2, [pc, #28]	; (b84e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b84c4:	b510      	push	{r4, lr}
   b84c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b84ca:	f101 0210 	add.w	r2, r1, #16
   b84ce:	f851 4b04 	ldr.w	r4, [r1], #4
   b84d2:	f843 4b04 	str.w	r4, [r3], #4
   b84d6:	4291      	cmp	r1, r2
   b84d8:	d1f9      	bne.n	b84ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b84da:	780a      	ldrb	r2, [r1, #0]
   b84dc:	701a      	strb	r2, [r3, #0]
}
   b84de:	bd10      	pop	{r4, pc}
   b84e0:	000bab50 	.word	0x000bab50

000b84e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b84e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b84e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b84ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b84ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b84f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b84f6:	2304      	movs	r3, #4
   b84f8:	6041      	str	r1, [r0, #4]
   b84fa:	7503      	strb	r3, [r0, #20]
}
   b84fc:	bd10      	pop	{r4, pc}
	...

000b8500 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8500:	b507      	push	{r0, r1, r2, lr}
   b8502:	4b06      	ldr	r3, [pc, #24]	; (b851c <_ZN9IPAddressC1EPKh+0x1c>)
   b8504:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8506:	78cb      	ldrb	r3, [r1, #3]
   b8508:	9300      	str	r3, [sp, #0]
   b850a:	788b      	ldrb	r3, [r1, #2]
   b850c:	784a      	ldrb	r2, [r1, #1]
   b850e:	7809      	ldrb	r1, [r1, #0]
   b8510:	f7ff ffe8 	bl	b84e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8514:	b003      	add	sp, #12
   b8516:	f85d fb04 	ldr.w	pc, [sp], #4
   b851a:	bf00      	nop
   b851c:	000bab50 	.word	0x000bab50

000b8520 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8520:	7441      	strb	r1, [r0, #17]
}
   b8522:	4770      	bx	lr

000b8524 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8524:	4770      	bx	lr

000b8526 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8526:	4770      	bx	lr

000b8528 <_ZN9USBSerial4readEv>:
{
   b8528:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b852a:	2100      	movs	r1, #0
   b852c:	7c00      	ldrb	r0, [r0, #16]
   b852e:	f7ff faf9 	bl	b7b24 <HAL_USB_USART_Receive_Data>
}
   b8532:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8536:	bd08      	pop	{r3, pc}

000b8538 <_ZN9USBSerial4peekEv>:
{
   b8538:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b853a:	2101      	movs	r1, #1
   b853c:	7c00      	ldrb	r0, [r0, #16]
   b853e:	f7ff faf1 	bl	b7b24 <HAL_USB_USART_Receive_Data>
}
   b8542:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8546:	bd08      	pop	{r3, pc}

000b8548 <_ZN9USBSerial17availableForWriteEv>:
{
   b8548:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b854a:	7c00      	ldrb	r0, [r0, #16]
   b854c:	f7ff fae2 	bl	b7b14 <HAL_USB_USART_Available_Data_For_Write>
}
   b8550:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8554:	bd08      	pop	{r3, pc}

000b8556 <_ZN9USBSerial9availableEv>:
{
   b8556:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8558:	7c00      	ldrb	r0, [r0, #16]
   b855a:	f7ff fad3 	bl	b7b04 <HAL_USB_USART_Available_Data>
}
   b855e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8562:	bd08      	pop	{r3, pc}

000b8564 <_ZN9USBSerial5writeEh>:
{
   b8564:	b513      	push	{r0, r1, r4, lr}
   b8566:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8568:	7c00      	ldrb	r0, [r0, #16]
{
   b856a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b856c:	f7ff fad2 	bl	b7b14 <HAL_USB_USART_Available_Data_For_Write>
   b8570:	2800      	cmp	r0, #0
   b8572:	9901      	ldr	r1, [sp, #4]
   b8574:	dc01      	bgt.n	b857a <_ZN9USBSerial5writeEh+0x16>
   b8576:	7c60      	ldrb	r0, [r4, #17]
   b8578:	b120      	cbz	r0, b8584 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b857a:	7c20      	ldrb	r0, [r4, #16]
   b857c:	f7ff fada 	bl	b7b34 <HAL_USB_USART_Send_Data>
   b8580:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8584:	b002      	add	sp, #8
   b8586:	bd10      	pop	{r4, pc}

000b8588 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8588:	7c00      	ldrb	r0, [r0, #16]
   b858a:	f7ff badb 	b.w	b7b44 <HAL_USB_USART_Flush_Data>

000b858e <_ZN9USBSerialD0Ev>:
   b858e:	b510      	push	{r4, lr}
   b8590:	2114      	movs	r1, #20
   b8592:	4604      	mov	r4, r0
   b8594:	f7fb fd81 	bl	b409a <_ZdlPvj>
   b8598:	4620      	mov	r0, r4
   b859a:	bd10      	pop	{r4, pc}

000b859c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b859c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b859e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85a2:	4604      	mov	r4, r0
   b85a4:	4608      	mov	r0, r1
   b85a6:	2100      	movs	r1, #0
   b85a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b85ac:	4b04      	ldr	r3, [pc, #16]	; (b85c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b85ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b85b0:	2301      	movs	r3, #1
  _serial = serial;
   b85b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b85b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b85b6:	4611      	mov	r1, r2
   b85b8:	f7ff fa94 	bl	b7ae4 <HAL_USB_USART_Init>
}
   b85bc:	4620      	mov	r0, r4
   b85be:	bd10      	pop	{r4, pc}
   b85c0:	000bab64 	.word	0x000bab64

000b85c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b85c4:	7c00      	ldrb	r0, [r0, #16]
   b85c6:	2200      	movs	r2, #0
   b85c8:	f7ff ba94 	b.w	b7af4 <HAL_USB_USART_Begin>

000b85cc <_Z19acquireSerialBufferv>:
{
   b85cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b85ce:	2214      	movs	r2, #20
{
   b85d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b85d2:	2100      	movs	r1, #0
   b85d4:	f000 ffb8 	bl	b9548 <memset>
}
   b85d8:	4620      	mov	r0, r4
   b85da:	bd10      	pop	{r4, pc}

000b85dc <_Z16_fetch_usbserialv>:
{
   b85dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85de:	4c0f      	ldr	r4, [pc, #60]	; (b861c <_Z16_fetch_usbserialv+0x40>)
{
   b85e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b85e2:	a803      	add	r0, sp, #12
   b85e4:	f7ff fff2 	bl	b85cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b85e8:	7821      	ldrb	r1, [r4, #0]
   b85ea:	f3bf 8f5b 	dmb	ish
   b85ee:	f011 0101 	ands.w	r1, r1, #1
   b85f2:	d10f      	bne.n	b8614 <_Z16_fetch_usbserialv+0x38>
   b85f4:	4620      	mov	r0, r4
   b85f6:	9101      	str	r1, [sp, #4]
   b85f8:	f7fb fd5e 	bl	b40b8 <__cxa_guard_acquire>
   b85fc:	9901      	ldr	r1, [sp, #4]
   b85fe:	b148      	cbz	r0, b8614 <_Z16_fetch_usbserialv+0x38>
   b8600:	aa03      	add	r2, sp, #12
   b8602:	4807      	ldr	r0, [pc, #28]	; (b8620 <_Z16_fetch_usbserialv+0x44>)
   b8604:	f7ff ffca 	bl	b859c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8608:	4620      	mov	r0, r4
   b860a:	f7fb fd5a 	bl	b40c2 <__cxa_guard_release>
   b860e:	4805      	ldr	r0, [pc, #20]	; (b8624 <_Z16_fetch_usbserialv+0x48>)
   b8610:	f000 ff7e 	bl	b9510 <atexit>
	return _usbserial;
}
   b8614:	4802      	ldr	r0, [pc, #8]	; (b8620 <_Z16_fetch_usbserialv+0x44>)
   b8616:	b008      	add	sp, #32
   b8618:	bd10      	pop	{r4, pc}
   b861a:	bf00      	nop
   b861c:	2003e700 	.word	0x2003e700
   b8620:	2003e704 	.word	0x2003e704
   b8624:	000b8525 	.word	0x000b8525

000b8628 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b8628:	f7ff b944 	b.w	b78b4 <HAL_Interrupts_Disable_All>

000b862c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b862c:	f7ff b93a 	b.w	b78a4 <HAL_Interrupts_Enable_All>

000b8630 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8630:	4770      	bx	lr

000b8632 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8632:	7441      	strb	r1, [r0, #17]
}
   b8634:	4770      	bx	lr

000b8636 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8636:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8638:	7c00      	ldrb	r0, [r0, #16]
   b863a:	f7ff f9ab 	bl	b7994 <hal_usart_available_data_for_write>
}
   b863e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8642:	bd08      	pop	{r3, pc}

000b8644 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8644:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8646:	7c00      	ldrb	r0, [r0, #16]
   b8648:	f7ff f97c 	bl	b7944 <hal_usart_available>
}
   b864c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8650:	bd08      	pop	{r3, pc}

000b8652 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8652:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8654:	7c00      	ldrb	r0, [r0, #16]
   b8656:	f7ff f985 	bl	b7964 <hal_usart_peek>
}
   b865a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b865e:	bd08      	pop	{r3, pc}

000b8660 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8660:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8662:	7c00      	ldrb	r0, [r0, #16]
   b8664:	f7ff f976 	bl	b7954 <hal_usart_read>
}
   b8668:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b866c:	bd08      	pop	{r3, pc}

000b866e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b866e:	7c00      	ldrb	r0, [r0, #16]
   b8670:	f7ff b980 	b.w	b7974 <hal_usart_flush>

000b8674 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8674:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8676:	7c45      	ldrb	r5, [r0, #17]
{
   b8678:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b867a:	b12d      	cbz	r5, b8688 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b867c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b867e:	b003      	add	sp, #12
   b8680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8684:	f7ff b956 	b.w	b7934 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8688:	7c00      	ldrb	r0, [r0, #16]
   b868a:	9101      	str	r1, [sp, #4]
   b868c:	f7ff f982 	bl	b7994 <hal_usart_available_data_for_write>
   b8690:	2800      	cmp	r0, #0
   b8692:	9901      	ldr	r1, [sp, #4]
   b8694:	dcf2      	bgt.n	b867c <_ZN11USARTSerial5writeEh+0x8>
}
   b8696:	4628      	mov	r0, r5
   b8698:	b003      	add	sp, #12
   b869a:	bd30      	pop	{r4, r5, pc}

000b869c <_ZN11USARTSerialD0Ev>:
   b869c:	b510      	push	{r4, lr}
   b869e:	2114      	movs	r1, #20
   b86a0:	4604      	mov	r4, r0
   b86a2:	f7fb fcfa 	bl	b409a <_ZdlPvj>
   b86a6:	4620      	mov	r0, r4
   b86a8:	bd10      	pop	{r4, pc}
	...

000b86ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b86ac:	b510      	push	{r4, lr}
   b86ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b86b2:	4604      	mov	r4, r0
   b86b4:	4608      	mov	r0, r1
   b86b6:	4611      	mov	r1, r2
   b86b8:	2200      	movs	r2, #0
   b86ba:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b86be:	4b04      	ldr	r3, [pc, #16]	; (b86d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b86c0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b86c2:	2301      	movs	r3, #1
  _serial = serial;
   b86c4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b86c6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b86c8:	f7ff f96c 	bl	b79a4 <hal_usart_init_ex>
}
   b86cc:	4620      	mov	r0, r4
   b86ce:	bd10      	pop	{r4, pc}
   b86d0:	000bab94 	.word	0x000bab94

000b86d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b86d4:	4770      	bx	lr

000b86d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b86d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86d8:	4606      	mov	r6, r0
   b86da:	4615      	mov	r5, r2
   b86dc:	460c      	mov	r4, r1
   b86de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b86e0:	42bc      	cmp	r4, r7
   b86e2:	d006      	beq.n	b86f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b86e4:	6833      	ldr	r3, [r6, #0]
   b86e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b86ea:	689b      	ldr	r3, [r3, #8]
   b86ec:	4630      	mov	r0, r6
   b86ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b86f0:	e7f6      	b.n	b86e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b86f2:	4628      	mov	r0, r5
   b86f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b86f6:	7c00      	ldrb	r0, [r0, #16]
   b86f8:	2200      	movs	r2, #0
   b86fa:	f7ff b97b 	b.w	b79f4 <hal_i2c_write>

000b86fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b86fe:	7c00      	ldrb	r0, [r0, #16]
   b8700:	2100      	movs	r1, #0
   b8702:	f7ff b97f 	b.w	b7a04 <hal_i2c_available>

000b8706 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8706:	7c00      	ldrb	r0, [r0, #16]
   b8708:	2100      	movs	r1, #0
   b870a:	f7ff b983 	b.w	b7a14 <hal_i2c_read>

000b870e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b870e:	7c00      	ldrb	r0, [r0, #16]
   b8710:	2100      	movs	r1, #0
   b8712:	f7ff b987 	b.w	b7a24 <hal_i2c_peek>

000b8716 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8716:	7c00      	ldrb	r0, [r0, #16]
   b8718:	2100      	movs	r1, #0
   b871a:	f7ff b98b 	b.w	b7a34 <hal_i2c_flush>

000b871e <_ZN7TwoWireD0Ev>:
   b871e:	b510      	push	{r4, lr}
   b8720:	2114      	movs	r1, #20
   b8722:	4604      	mov	r4, r0
   b8724:	f7fb fcb9 	bl	b409a <_ZdlPvj>
   b8728:	4620      	mov	r0, r4
   b872a:	bd10      	pop	{r4, pc}

000b872c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b872c:	b510      	push	{r4, lr}
   b872e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8732:	4604      	mov	r4, r0
   b8734:	4608      	mov	r0, r1
   b8736:	2100      	movs	r1, #0
   b8738:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b873c:	4b03      	ldr	r3, [pc, #12]	; (b874c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b873e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8740:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8742:	4611      	mov	r1, r2
   b8744:	f7ff f986 	bl	b7a54 <hal_i2c_init>
}
   b8748:	4620      	mov	r0, r4
   b874a:	bd10      	pop	{r4, pc}
   b874c:	000babc4 	.word	0x000babc4

000b8750 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b8750:	7c00      	ldrb	r0, [r0, #16]
   b8752:	2200      	movs	r2, #0
   b8754:	f7ff b92e 	b.w	b79b4 <hal_i2c_set_speed>

000b8758 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8758:	2300      	movs	r3, #0
   b875a:	7c00      	ldrb	r0, [r0, #16]
   b875c:	461a      	mov	r2, r3
   b875e:	4619      	mov	r1, r3
   b8760:	f7ff b930 	b.w	b79c4 <hal_i2c_begin>

000b8764 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8764:	7c00      	ldrb	r0, [r0, #16]
   b8766:	2200      	movs	r2, #0
   b8768:	f7ff b934 	b.w	b79d4 <hal_i2c_begin_transmission>

000b876c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b876c:	b2c9      	uxtb	r1, r1
   b876e:	f7ff bff9 	b.w	b8764 <_ZN7TwoWire17beginTransmissionEh>

000b8772 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8772:	7c00      	ldrb	r0, [r0, #16]
   b8774:	2200      	movs	r2, #0
   b8776:	f7ff b935 	b.w	b79e4 <hal_i2c_end_transmission>

000b877a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b877a:	2101      	movs	r1, #1
   b877c:	f7ff bff9 	b.w	b8772 <_ZN7TwoWire15endTransmissionEh>

000b8780 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8780:	2200      	movs	r2, #0
   b8782:	6840      	ldr	r0, [r0, #4]
   b8784:	4611      	mov	r1, r2
   b8786:	f7ff ba29 	b.w	b7bdc <network_ready>

000b878a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b878a:	2200      	movs	r2, #0
   b878c:	6840      	ldr	r0, [r0, #4]
   b878e:	4611      	mov	r1, r2
   b8790:	f7ff ba44 	b.w	b7c1c <network_listening>

000b8794 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8794:	2200      	movs	r2, #0
   b8796:	6840      	ldr	r0, [r0, #4]
   b8798:	4611      	mov	r1, r2
   b879a:	f7ff ba4f 	b.w	b7c3c <network_get_listen_timeout>

000b879e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b879e:	6840      	ldr	r0, [r0, #4]
   b87a0:	2200      	movs	r2, #0
   b87a2:	f7ff ba43 	b.w	b7c2c <network_set_listen_timeout>

000b87a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b87a6:	6840      	ldr	r0, [r0, #4]
   b87a8:	2200      	movs	r2, #0
   b87aa:	f081 0101 	eor.w	r1, r1, #1
   b87ae:	f7ff ba2d 	b.w	b7c0c <network_listen>

000b87b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b87b2:	2300      	movs	r3, #0
   b87b4:	6840      	ldr	r0, [r0, #4]
   b87b6:	461a      	mov	r2, r3
   b87b8:	4619      	mov	r1, r3
   b87ba:	f7ff ba1f 	b.w	b7bfc <network_off>

000b87be <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b87be:	2300      	movs	r3, #0
   b87c0:	6840      	ldr	r0, [r0, #4]
   b87c2:	461a      	mov	r2, r3
   b87c4:	4619      	mov	r1, r3
   b87c6:	f7ff ba11 	b.w	b7bec <network_on>

000b87ca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b87ca:	2200      	movs	r2, #0
   b87cc:	6840      	ldr	r0, [r0, #4]
   b87ce:	4611      	mov	r1, r2
   b87d0:	f7ff b9f4 	b.w	b7bbc <network_connecting>

000b87d4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b87d4:	6840      	ldr	r0, [r0, #4]
   b87d6:	2200      	movs	r2, #0
   b87d8:	2102      	movs	r1, #2
   b87da:	f7ff b9f7 	b.w	b7bcc <network_disconnect>

000b87de <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b87de:	2300      	movs	r3, #0
   b87e0:	6840      	ldr	r0, [r0, #4]
   b87e2:	461a      	mov	r2, r3
   b87e4:	f7ff b9e2 	b.w	b7bac <network_connect>

000b87e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b87e8:	4b02      	ldr	r3, [pc, #8]	; (b87f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b87ea:	2204      	movs	r2, #4
   b87ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b87ee:	4a02      	ldr	r2, [pc, #8]	; (b87f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b87f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b87f2:	4770      	bx	lr
   b87f4:	2003e718 	.word	0x2003e718
   b87f8:	000babec 	.word	0x000babec

000b87fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b87fc:	2300      	movs	r3, #0
   b87fe:	6840      	ldr	r0, [r0, #4]
   b8800:	461a      	mov	r2, r3
   b8802:	f7ff b9d3 	b.w	b7bac <network_connect>

000b8806 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8806:	6840      	ldr	r0, [r0, #4]
   b8808:	2200      	movs	r2, #0
   b880a:	2102      	movs	r1, #2
   b880c:	f7ff b9de 	b.w	b7bcc <network_disconnect>

000b8810 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8810:	2200      	movs	r2, #0
   b8812:	6840      	ldr	r0, [r0, #4]
   b8814:	4611      	mov	r1, r2
   b8816:	f7ff b9d1 	b.w	b7bbc <network_connecting>

000b881a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b881a:	2200      	movs	r2, #0
   b881c:	6840      	ldr	r0, [r0, #4]
   b881e:	4611      	mov	r1, r2
   b8820:	f7ff b9dc 	b.w	b7bdc <network_ready>

000b8824 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8824:	2300      	movs	r3, #0
   b8826:	6840      	ldr	r0, [r0, #4]
   b8828:	461a      	mov	r2, r3
   b882a:	4619      	mov	r1, r3
   b882c:	f7ff b9de 	b.w	b7bec <network_on>

000b8830 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8830:	2300      	movs	r3, #0
   b8832:	6840      	ldr	r0, [r0, #4]
   b8834:	461a      	mov	r2, r3
   b8836:	4619      	mov	r1, r3
   b8838:	f7ff b9e0 	b.w	b7bfc <network_off>

000b883c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b883c:	6840      	ldr	r0, [r0, #4]
   b883e:	2100      	movs	r1, #0
   b8840:	f7ff ba04 	b.w	b7c4c <network_is_on>

000b8844 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8844:	6840      	ldr	r0, [r0, #4]
   b8846:	2100      	movs	r1, #0
   b8848:	f7ff ba08 	b.w	b7c5c <network_is_off>

000b884c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b884c:	6840      	ldr	r0, [r0, #4]
   b884e:	2200      	movs	r2, #0
   b8850:	f081 0101 	eor.w	r1, r1, #1
   b8854:	f7ff b9da 	b.w	b7c0c <network_listen>

000b8858 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8858:	6840      	ldr	r0, [r0, #4]
   b885a:	2200      	movs	r2, #0
   b885c:	f7ff b9e6 	b.w	b7c2c <network_set_listen_timeout>

000b8860 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8860:	2200      	movs	r2, #0
   b8862:	6840      	ldr	r0, [r0, #4]
   b8864:	4611      	mov	r1, r2
   b8866:	f7ff b9e9 	b.w	b7c3c <network_get_listen_timeout>

000b886a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b886a:	2200      	movs	r2, #0
   b886c:	6840      	ldr	r0, [r0, #4]
   b886e:	4611      	mov	r1, r2
   b8870:	f7ff b9d4 	b.w	b7c1c <network_listening>

000b8874 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8878:	b095      	sub	sp, #84	; 0x54
   b887a:	4614      	mov	r4, r2
   b887c:	460d      	mov	r5, r1
   b887e:	4607      	mov	r7, r0
    IPAddress addr;
   b8880:	f7ff fe10 	bl	b84a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8884:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8886:	221c      	movs	r2, #28
   b8888:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b888a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b888c:	f000 fe5c 	bl	b9548 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8890:	2340      	movs	r3, #64	; 0x40
   b8892:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8894:	4620      	mov	r0, r4
   b8896:	466b      	mov	r3, sp
   b8898:	aa0c      	add	r2, sp, #48	; 0x30
   b889a:	2100      	movs	r1, #0
   b889c:	f7fe ffd2 	bl	b7844 <netdb_getaddrinfo>
    if (!r) {
   b88a0:	4604      	mov	r4, r0
   b88a2:	2800      	cmp	r0, #0
   b88a4:	d14b      	bne.n	b893e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b88a6:	4602      	mov	r2, r0
   b88a8:	2101      	movs	r1, #1
   b88aa:	6868      	ldr	r0, [r5, #4]
   b88ac:	f7ff f996 	bl	b7bdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b88b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88b4:	4622      	mov	r2, r4
   b88b6:	6868      	ldr	r0, [r5, #4]
   b88b8:	f7ff f990 	bl	b7bdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88be:	4681      	mov	r9, r0
        bool ok = false;
   b88c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88c2:	2e00      	cmp	r6, #0
   b88c4:	d03b      	beq.n	b893e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b88c6:	2900      	cmp	r1, #0
   b88c8:	d139      	bne.n	b893e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b88ca:	6873      	ldr	r3, [r6, #4]
   b88cc:	2b02      	cmp	r3, #2
   b88ce:	d003      	beq.n	b88d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b88d0:	2b0a      	cmp	r3, #10
   b88d2:	d011      	beq.n	b88f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88d4:	69f6      	ldr	r6, [r6, #28]
   b88d6:	e7f4      	b.n	b88c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b88d8:	f1b8 0f00 	cmp.w	r8, #0
   b88dc:	d0fa      	beq.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b88de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b88e0:	a806      	add	r0, sp, #24
   b88e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b88e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b88e6:	f7ff fe0b 	bl	b8500 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b88ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88ec:	1d3c      	adds	r4, r7, #4
   b88ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88f0:	682b      	ldr	r3, [r5, #0]
   b88f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b88f6:	e7ed      	b.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b88f8:	f1b9 0f00 	cmp.w	r9, #0
   b88fc:	d0ea      	beq.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b88fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8900:	2210      	movs	r2, #16
   b8902:	a801      	add	r0, sp, #4
   b8904:	f000 fe20 	bl	b9548 <memset>
                    a.v = 6;
   b8908:	2306      	movs	r3, #6
   b890a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b890e:	ad01      	add	r5, sp, #4
   b8910:	f104 0308 	add.w	r3, r4, #8
   b8914:	3418      	adds	r4, #24
   b8916:	6818      	ldr	r0, [r3, #0]
   b8918:	6859      	ldr	r1, [r3, #4]
   b891a:	462a      	mov	r2, r5
   b891c:	c203      	stmia	r2!, {r0, r1}
   b891e:	3308      	adds	r3, #8
   b8920:	42a3      	cmp	r3, r4
   b8922:	4615      	mov	r5, r2
   b8924:	d1f7      	bne.n	b8916 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8926:	a901      	add	r1, sp, #4
   b8928:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b892a:	ad07      	add	r5, sp, #28
   b892c:	f7ff fdc8 	bl	b84c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8932:	1d3c      	adds	r4, r7, #4
   b8934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8936:	682b      	ldr	r3, [r5, #0]
   b8938:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b893a:	4649      	mov	r1, r9
   b893c:	e7ca      	b.n	b88d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b893e:	9800      	ldr	r0, [sp, #0]
   b8940:	f7fe ff78 	bl	b7834 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8944:	4638      	mov	r0, r7
   b8946:	b015      	add	sp, #84	; 0x54
   b8948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b894c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b894c:	4b02      	ldr	r3, [pc, #8]	; (b8958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b894e:	4a03      	ldr	r2, [pc, #12]	; (b895c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8950:	601a      	str	r2, [r3, #0]
   b8952:	2200      	movs	r2, #0
   b8954:	605a      	str	r2, [r3, #4]

} // spark
   b8956:	4770      	bx	lr
   b8958:	2003e720 	.word	0x2003e720
   b895c:	000bac28 	.word	0x000bac28

000b8960 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8960:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8962:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8964:	d902      	bls.n	b896c <pinAvailable+0xc>
    return false;
   b8966:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8968:	b002      	add	sp, #8
   b896a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b896c:	f1a0 030b 	sub.w	r3, r0, #11
   b8970:	2b02      	cmp	r3, #2
   b8972:	d81a      	bhi.n	b89aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8974:	4c17      	ldr	r4, [pc, #92]	; (b89d4 <pinAvailable+0x74>)
   b8976:	7821      	ldrb	r1, [r4, #0]
   b8978:	f3bf 8f5b 	dmb	ish
   b897c:	f011 0101 	ands.w	r1, r1, #1
   b8980:	d10b      	bne.n	b899a <pinAvailable+0x3a>
   b8982:	4620      	mov	r0, r4
   b8984:	9101      	str	r1, [sp, #4]
   b8986:	f7fb fb97 	bl	b40b8 <__cxa_guard_acquire>
   b898a:	9901      	ldr	r1, [sp, #4]
   b898c:	b128      	cbz	r0, b899a <pinAvailable+0x3a>
   b898e:	4812      	ldr	r0, [pc, #72]	; (b89d8 <pinAvailable+0x78>)
   b8990:	f7ff fa00 	bl	b7d94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8994:	4620      	mov	r0, r4
   b8996:	f7fb fb94 	bl	b40c2 <__cxa_guard_release>
   b899a:	4b0f      	ldr	r3, [pc, #60]	; (b89d8 <pinAvailable+0x78>)
   b899c:	7818      	ldrb	r0, [r3, #0]
   b899e:	f7ff f879 	bl	b7a94 <hal_spi_is_enabled>
   b89a2:	2800      	cmp	r0, #0
   b89a4:	d1df      	bne.n	b8966 <pinAvailable+0x6>
  return true; // 'pin' is available
   b89a6:	2001      	movs	r0, #1
   b89a8:	e7de      	b.n	b8968 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b89aa:	2801      	cmp	r0, #1
   b89ac:	d809      	bhi.n	b89c2 <pinAvailable+0x62>
   b89ae:	f000 f8c3 	bl	b8b38 <_Z19__fetch_global_Wirev>
   b89b2:	2100      	movs	r1, #0
   b89b4:	7c00      	ldrb	r0, [r0, #16]
   b89b6:	f7ff f845 	bl	b7a44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b89ba:	f080 0001 	eor.w	r0, r0, #1
   b89be:	b2c0      	uxtb	r0, r0
   b89c0:	e7d2      	b.n	b8968 <pinAvailable+0x8>
   b89c2:	3809      	subs	r0, #9
   b89c4:	2801      	cmp	r0, #1
   b89c6:	d8ee      	bhi.n	b89a6 <pinAvailable+0x46>
   b89c8:	f000 f87a 	bl	b8ac0 <_Z22__fetch_global_Serial1v>
   b89cc:	7c00      	ldrb	r0, [r0, #16]
   b89ce:	f7fe ffd9 	bl	b7984 <hal_usart_is_enabled>
   b89d2:	e7f2      	b.n	b89ba <pinAvailable+0x5a>
   b89d4:	2003dfd0 	.word	0x2003dfd0
   b89d8:	2003dfd4 	.word	0x2003dfd4

000b89dc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b89dc:	2823      	cmp	r0, #35	; 0x23
{
   b89de:	b538      	push	{r3, r4, r5, lr}
   b89e0:	4604      	mov	r4, r0
   b89e2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b89e4:	d80a      	bhi.n	b89fc <pinMode+0x20>
   b89e6:	29ff      	cmp	r1, #255	; 0xff
   b89e8:	d008      	beq.n	b89fc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b89ea:	f7ff ffb9 	bl	b8960 <pinAvailable>
   b89ee:	b128      	cbz	r0, b89fc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b89f0:	4629      	mov	r1, r5
   b89f2:	4620      	mov	r0, r4
}
   b89f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b89f8:	f7fe bf34 	b.w	b7864 <HAL_Pin_Mode>
}
   b89fc:	bd38      	pop	{r3, r4, r5, pc}

000b89fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b89fe:	b538      	push	{r3, r4, r5, lr}
   b8a00:	4604      	mov	r4, r0
   b8a02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8a04:	f7fe ff36 	bl	b7874 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8a08:	28ff      	cmp	r0, #255	; 0xff
   b8a0a:	d010      	beq.n	b8a2e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8a0c:	2806      	cmp	r0, #6
   b8a0e:	d804      	bhi.n	b8a1a <digitalWrite+0x1c>
   b8a10:	234d      	movs	r3, #77	; 0x4d
   b8a12:	fa23 f000 	lsr.w	r0, r3, r0
   b8a16:	07c3      	lsls	r3, r0, #31
   b8a18:	d409      	bmi.n	b8a2e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8a1a:	4620      	mov	r0, r4
   b8a1c:	f7ff ffa0 	bl	b8960 <pinAvailable>
   b8a20:	b128      	cbz	r0, b8a2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8a22:	4629      	mov	r1, r5
   b8a24:	4620      	mov	r0, r4
}
   b8a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8a2a:	f7fe bf2b 	b.w	b7884 <HAL_GPIO_Write>
}
   b8a2e:	bd38      	pop	{r3, r4, r5, pc}

000b8a30 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b8a30:	b510      	push	{r4, lr}
   b8a32:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8a34:	f7fe ff1e 	bl	b7874 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8a38:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8a3a:	b2db      	uxtb	r3, r3
   b8a3c:	2b01      	cmp	r3, #1
   b8a3e:	d908      	bls.n	b8a52 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8a40:	4620      	mov	r0, r4
   b8a42:	f7ff ff8d 	bl	b8960 <pinAvailable>
   b8a46:	b120      	cbz	r0, b8a52 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8a48:	4620      	mov	r0, r4
}
   b8a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b8a4e:	f7fe bf21 	b.w	b7894 <HAL_GPIO_Read>
}
   b8a52:	2000      	movs	r0, #0
   b8a54:	bd10      	pop	{r4, pc}

000b8a56 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8a56:	280d      	cmp	r0, #13
{
   b8a58:	b510      	push	{r4, lr}
   b8a5a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8a5c:	bf9c      	itt	ls
   b8a5e:	340e      	addls	r4, #14
   b8a60:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8a62:	4620      	mov	r0, r4
   b8a64:	f7ff ff7c 	bl	b8960 <pinAvailable>
   b8a68:	b150      	cbz	r0, b8a80 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8a6a:	2103      	movs	r1, #3
   b8a6c:	4620      	mov	r0, r4
   b8a6e:	f7fe fef1 	bl	b7854 <HAL_Validate_Pin_Function>
   b8a72:	2803      	cmp	r0, #3
   b8a74:	d104      	bne.n	b8a80 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8a76:	4620      	mov	r0, r4
}
   b8a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8a7c:	f7fe bf22 	b.w	b78c4 <hal_adc_read>
}
   b8a80:	2000      	movs	r0, #0
   b8a82:	bd10      	pop	{r4, pc}

000b8a84 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b8a84:	f7fe bf26 	b.w	b78d4 <HAL_Pulse_In>

000b8a88 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a88:	4770      	bx	lr
	...

000b8a8c <_Z20acquireSerial1Bufferv>:
{
   b8a8c:	b538      	push	{r3, r4, r5, lr}
   b8a8e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8a90:	2514      	movs	r5, #20
   b8a92:	462a      	mov	r2, r5
   b8a94:	2100      	movs	r1, #0
   b8a96:	f000 fd57 	bl	b9548 <memset>
   b8a9a:	8025      	strh	r5, [r4, #0]
   b8a9c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a9e:	4907      	ldr	r1, [pc, #28]	; (b8abc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8aa0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8aa2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8aa4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8aa6:	f000 f86b 	bl	b8b80 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8aaa:	4904      	ldr	r1, [pc, #16]	; (b8abc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8aac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8aae:	4628      	mov	r0, r5
   b8ab0:	f000 f866 	bl	b8b80 <_ZnajRKSt9nothrow_t>
    };
   b8ab4:	60e0      	str	r0, [r4, #12]
}
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	bd38      	pop	{r3, r4, r5, pc}
   b8aba:	bf00      	nop
   b8abc:	000bac5c 	.word	0x000bac5c

000b8ac0 <_Z22__fetch_global_Serial1v>:
{
   b8ac0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8ac2:	4d0e      	ldr	r5, [pc, #56]	; (b8afc <_Z22__fetch_global_Serial1v+0x3c>)
   b8ac4:	7829      	ldrb	r1, [r5, #0]
   b8ac6:	f3bf 8f5b 	dmb	ish
   b8aca:	f011 0401 	ands.w	r4, r1, #1
{
   b8ace:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8ad0:	d111      	bne.n	b8af6 <_Z22__fetch_global_Serial1v+0x36>
   b8ad2:	4628      	mov	r0, r5
   b8ad4:	f7fb faf0 	bl	b40b8 <__cxa_guard_acquire>
   b8ad8:	b168      	cbz	r0, b8af6 <_Z22__fetch_global_Serial1v+0x36>
   b8ada:	a801      	add	r0, sp, #4
   b8adc:	f7ff ffd6 	bl	b8a8c <_Z20acquireSerial1Bufferv>
   b8ae0:	aa01      	add	r2, sp, #4
   b8ae2:	4621      	mov	r1, r4
   b8ae4:	4806      	ldr	r0, [pc, #24]	; (b8b00 <_Z22__fetch_global_Serial1v+0x40>)
   b8ae6:	f7ff fde1 	bl	b86ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8aea:	4628      	mov	r0, r5
   b8aec:	f7fb fae9 	bl	b40c2 <__cxa_guard_release>
   b8af0:	4804      	ldr	r0, [pc, #16]	; (b8b04 <_Z22__fetch_global_Serial1v+0x44>)
   b8af2:	f000 fd0d 	bl	b9510 <atexit>
    return serial1;
}
   b8af6:	4802      	ldr	r0, [pc, #8]	; (b8b00 <_Z22__fetch_global_Serial1v+0x40>)
   b8af8:	b007      	add	sp, #28
   b8afa:	bd30      	pop	{r4, r5, pc}
   b8afc:	2003e728 	.word	0x2003e728
   b8b00:	2003e72c 	.word	0x2003e72c
   b8b04:	000b8a89 	.word	0x000b8a89

000b8b08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b08:	4770      	bx	lr
	...

000b8b0c <_Z17acquireWireBufferv>:
{
   b8b0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8b0e:	2520      	movs	r5, #32
   b8b10:	2314      	movs	r3, #20
{
   b8b12:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8b14:	6003      	str	r3, [r0, #0]
   b8b16:	6085      	str	r5, [r0, #8]
   b8b18:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b1a:	4906      	ldr	r1, [pc, #24]	; (b8b34 <_Z17acquireWireBufferv+0x28>)
   b8b1c:	4628      	mov	r0, r5
   b8b1e:	f000 f82f 	bl	b8b80 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b22:	4904      	ldr	r1, [pc, #16]	; (b8b34 <_Z17acquireWireBufferv+0x28>)
	};
   b8b24:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8b26:	4628      	mov	r0, r5
   b8b28:	f000 f82a 	bl	b8b80 <_ZnajRKSt9nothrow_t>
	};
   b8b2c:	60e0      	str	r0, [r4, #12]
}
   b8b2e:	4620      	mov	r0, r4
   b8b30:	bd38      	pop	{r3, r4, r5, pc}
   b8b32:	bf00      	nop
   b8b34:	000bac5c 	.word	0x000bac5c

000b8b38 <_Z19__fetch_global_Wirev>:
{
   b8b38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b3a:	4d0e      	ldr	r5, [pc, #56]	; (b8b74 <_Z19__fetch_global_Wirev+0x3c>)
   b8b3c:	7829      	ldrb	r1, [r5, #0]
   b8b3e:	f3bf 8f5b 	dmb	ish
   b8b42:	f011 0401 	ands.w	r4, r1, #1
{
   b8b46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b48:	d111      	bne.n	b8b6e <_Z19__fetch_global_Wirev+0x36>
   b8b4a:	4628      	mov	r0, r5
   b8b4c:	f7fb fab4 	bl	b40b8 <__cxa_guard_acquire>
   b8b50:	b168      	cbz	r0, b8b6e <_Z19__fetch_global_Wirev+0x36>
   b8b52:	a801      	add	r0, sp, #4
   b8b54:	f7ff ffda 	bl	b8b0c <_Z17acquireWireBufferv>
   b8b58:	aa01      	add	r2, sp, #4
   b8b5a:	4621      	mov	r1, r4
   b8b5c:	4806      	ldr	r0, [pc, #24]	; (b8b78 <_Z19__fetch_global_Wirev+0x40>)
   b8b5e:	f7ff fde5 	bl	b872c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8b62:	4628      	mov	r0, r5
   b8b64:	f7fb faad 	bl	b40c2 <__cxa_guard_release>
   b8b68:	4804      	ldr	r0, [pc, #16]	; (b8b7c <_Z19__fetch_global_Wirev+0x44>)
   b8b6a:	f000 fcd1 	bl	b9510 <atexit>
	return wire;
}
   b8b6e:	4802      	ldr	r0, [pc, #8]	; (b8b78 <_Z19__fetch_global_Wirev+0x40>)
   b8b70:	b007      	add	sp, #28
   b8b72:	bd30      	pop	{r4, r5, pc}
   b8b74:	2003e744 	.word	0x2003e744
   b8b78:	2003e748 	.word	0x2003e748
   b8b7c:	000b8b09 	.word	0x000b8b09

000b8b80 <_ZnajRKSt9nothrow_t>:
   b8b80:	f7fb ba89 	b.w	b4096 <_Znaj>

000b8b84 <__aeabi_drsub>:
   b8b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8b88:	e002      	b.n	b8b90 <__adddf3>
   b8b8a:	bf00      	nop

000b8b8c <__aeabi_dsub>:
   b8b8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8b90 <__adddf3>:
   b8b90:	b530      	push	{r4, r5, lr}
   b8b92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8b96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8b9a:	ea94 0f05 	teq	r4, r5
   b8b9e:	bf08      	it	eq
   b8ba0:	ea90 0f02 	teqeq	r0, r2
   b8ba4:	bf1f      	itttt	ne
   b8ba6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8baa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8bae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8bb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8bb6:	f000 80e2 	beq.w	b8d7e <__adddf3+0x1ee>
   b8bba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8bbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8bc2:	bfb8      	it	lt
   b8bc4:	426d      	neglt	r5, r5
   b8bc6:	dd0c      	ble.n	b8be2 <__adddf3+0x52>
   b8bc8:	442c      	add	r4, r5
   b8bca:	ea80 0202 	eor.w	r2, r0, r2
   b8bce:	ea81 0303 	eor.w	r3, r1, r3
   b8bd2:	ea82 0000 	eor.w	r0, r2, r0
   b8bd6:	ea83 0101 	eor.w	r1, r3, r1
   b8bda:	ea80 0202 	eor.w	r2, r0, r2
   b8bde:	ea81 0303 	eor.w	r3, r1, r3
   b8be2:	2d36      	cmp	r5, #54	; 0x36
   b8be4:	bf88      	it	hi
   b8be6:	bd30      	pophi	{r4, r5, pc}
   b8be8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8bec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8bf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8bf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8bf8:	d002      	beq.n	b8c00 <__adddf3+0x70>
   b8bfa:	4240      	negs	r0, r0
   b8bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8c00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8c04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8c08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8c0c:	d002      	beq.n	b8c14 <__adddf3+0x84>
   b8c0e:	4252      	negs	r2, r2
   b8c10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8c14:	ea94 0f05 	teq	r4, r5
   b8c18:	f000 80a7 	beq.w	b8d6a <__adddf3+0x1da>
   b8c1c:	f1a4 0401 	sub.w	r4, r4, #1
   b8c20:	f1d5 0e20 	rsbs	lr, r5, #32
   b8c24:	db0d      	blt.n	b8c42 <__adddf3+0xb2>
   b8c26:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8c2a:	fa22 f205 	lsr.w	r2, r2, r5
   b8c2e:	1880      	adds	r0, r0, r2
   b8c30:	f141 0100 	adc.w	r1, r1, #0
   b8c34:	fa03 f20e 	lsl.w	r2, r3, lr
   b8c38:	1880      	adds	r0, r0, r2
   b8c3a:	fa43 f305 	asr.w	r3, r3, r5
   b8c3e:	4159      	adcs	r1, r3
   b8c40:	e00e      	b.n	b8c60 <__adddf3+0xd0>
   b8c42:	f1a5 0520 	sub.w	r5, r5, #32
   b8c46:	f10e 0e20 	add.w	lr, lr, #32
   b8c4a:	2a01      	cmp	r2, #1
   b8c4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8c50:	bf28      	it	cs
   b8c52:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8c56:	fa43 f305 	asr.w	r3, r3, r5
   b8c5a:	18c0      	adds	r0, r0, r3
   b8c5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8c64:	d507      	bpl.n	b8c76 <__adddf3+0xe6>
   b8c66:	f04f 0e00 	mov.w	lr, #0
   b8c6a:	f1dc 0c00 	rsbs	ip, ip, #0
   b8c6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8c72:	eb6e 0101 	sbc.w	r1, lr, r1
   b8c76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8c7a:	d31b      	bcc.n	b8cb4 <__adddf3+0x124>
   b8c7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8c80:	d30c      	bcc.n	b8c9c <__adddf3+0x10c>
   b8c82:	0849      	lsrs	r1, r1, #1
   b8c84:	ea5f 0030 	movs.w	r0, r0, rrx
   b8c88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8c8c:	f104 0401 	add.w	r4, r4, #1
   b8c90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8c94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8c98:	f080 809a 	bcs.w	b8dd0 <__adddf3+0x240>
   b8c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8ca0:	bf08      	it	eq
   b8ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8ca6:	f150 0000 	adcs.w	r0, r0, #0
   b8caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8cae:	ea41 0105 	orr.w	r1, r1, r5
   b8cb2:	bd30      	pop	{r4, r5, pc}
   b8cb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8cb8:	4140      	adcs	r0, r0
   b8cba:	eb41 0101 	adc.w	r1, r1, r1
   b8cbe:	3c01      	subs	r4, #1
   b8cc0:	bf28      	it	cs
   b8cc2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8cc6:	d2e9      	bcs.n	b8c9c <__adddf3+0x10c>
   b8cc8:	f091 0f00 	teq	r1, #0
   b8ccc:	bf04      	itt	eq
   b8cce:	4601      	moveq	r1, r0
   b8cd0:	2000      	moveq	r0, #0
   b8cd2:	fab1 f381 	clz	r3, r1
   b8cd6:	bf08      	it	eq
   b8cd8:	3320      	addeq	r3, #32
   b8cda:	f1a3 030b 	sub.w	r3, r3, #11
   b8cde:	f1b3 0220 	subs.w	r2, r3, #32
   b8ce2:	da0c      	bge.n	b8cfe <__adddf3+0x16e>
   b8ce4:	320c      	adds	r2, #12
   b8ce6:	dd08      	ble.n	b8cfa <__adddf3+0x16a>
   b8ce8:	f102 0c14 	add.w	ip, r2, #20
   b8cec:	f1c2 020c 	rsb	r2, r2, #12
   b8cf0:	fa01 f00c 	lsl.w	r0, r1, ip
   b8cf4:	fa21 f102 	lsr.w	r1, r1, r2
   b8cf8:	e00c      	b.n	b8d14 <__adddf3+0x184>
   b8cfa:	f102 0214 	add.w	r2, r2, #20
   b8cfe:	bfd8      	it	le
   b8d00:	f1c2 0c20 	rsble	ip, r2, #32
   b8d04:	fa01 f102 	lsl.w	r1, r1, r2
   b8d08:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8d0c:	bfdc      	itt	le
   b8d0e:	ea41 010c 	orrle.w	r1, r1, ip
   b8d12:	4090      	lslle	r0, r2
   b8d14:	1ae4      	subs	r4, r4, r3
   b8d16:	bfa2      	ittt	ge
   b8d18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8d1c:	4329      	orrge	r1, r5
   b8d1e:	bd30      	popge	{r4, r5, pc}
   b8d20:	ea6f 0404 	mvn.w	r4, r4
   b8d24:	3c1f      	subs	r4, #31
   b8d26:	da1c      	bge.n	b8d62 <__adddf3+0x1d2>
   b8d28:	340c      	adds	r4, #12
   b8d2a:	dc0e      	bgt.n	b8d4a <__adddf3+0x1ba>
   b8d2c:	f104 0414 	add.w	r4, r4, #20
   b8d30:	f1c4 0220 	rsb	r2, r4, #32
   b8d34:	fa20 f004 	lsr.w	r0, r0, r4
   b8d38:	fa01 f302 	lsl.w	r3, r1, r2
   b8d3c:	ea40 0003 	orr.w	r0, r0, r3
   b8d40:	fa21 f304 	lsr.w	r3, r1, r4
   b8d44:	ea45 0103 	orr.w	r1, r5, r3
   b8d48:	bd30      	pop	{r4, r5, pc}
   b8d4a:	f1c4 040c 	rsb	r4, r4, #12
   b8d4e:	f1c4 0220 	rsb	r2, r4, #32
   b8d52:	fa20 f002 	lsr.w	r0, r0, r2
   b8d56:	fa01 f304 	lsl.w	r3, r1, r4
   b8d5a:	ea40 0003 	orr.w	r0, r0, r3
   b8d5e:	4629      	mov	r1, r5
   b8d60:	bd30      	pop	{r4, r5, pc}
   b8d62:	fa21 f004 	lsr.w	r0, r1, r4
   b8d66:	4629      	mov	r1, r5
   b8d68:	bd30      	pop	{r4, r5, pc}
   b8d6a:	f094 0f00 	teq	r4, #0
   b8d6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8d72:	bf06      	itte	eq
   b8d74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8d78:	3401      	addeq	r4, #1
   b8d7a:	3d01      	subne	r5, #1
   b8d7c:	e74e      	b.n	b8c1c <__adddf3+0x8c>
   b8d7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8d82:	bf18      	it	ne
   b8d84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8d88:	d029      	beq.n	b8dde <__adddf3+0x24e>
   b8d8a:	ea94 0f05 	teq	r4, r5
   b8d8e:	bf08      	it	eq
   b8d90:	ea90 0f02 	teqeq	r0, r2
   b8d94:	d005      	beq.n	b8da2 <__adddf3+0x212>
   b8d96:	ea54 0c00 	orrs.w	ip, r4, r0
   b8d9a:	bf04      	itt	eq
   b8d9c:	4619      	moveq	r1, r3
   b8d9e:	4610      	moveq	r0, r2
   b8da0:	bd30      	pop	{r4, r5, pc}
   b8da2:	ea91 0f03 	teq	r1, r3
   b8da6:	bf1e      	ittt	ne
   b8da8:	2100      	movne	r1, #0
   b8daa:	2000      	movne	r0, #0
   b8dac:	bd30      	popne	{r4, r5, pc}
   b8dae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8db2:	d105      	bne.n	b8dc0 <__adddf3+0x230>
   b8db4:	0040      	lsls	r0, r0, #1
   b8db6:	4149      	adcs	r1, r1
   b8db8:	bf28      	it	cs
   b8dba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8dbe:	bd30      	pop	{r4, r5, pc}
   b8dc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8dc4:	bf3c      	itt	cc
   b8dc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8dca:	bd30      	popcc	{r4, r5, pc}
   b8dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8dd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8dd8:	f04f 0000 	mov.w	r0, #0
   b8ddc:	bd30      	pop	{r4, r5, pc}
   b8dde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8de2:	bf1a      	itte	ne
   b8de4:	4619      	movne	r1, r3
   b8de6:	4610      	movne	r0, r2
   b8de8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8dec:	bf1c      	itt	ne
   b8dee:	460b      	movne	r3, r1
   b8df0:	4602      	movne	r2, r0
   b8df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8df6:	bf06      	itte	eq
   b8df8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8dfc:	ea91 0f03 	teqeq	r1, r3
   b8e00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8e04:	bd30      	pop	{r4, r5, pc}
   b8e06:	bf00      	nop

000b8e08 <__aeabi_ui2d>:
   b8e08:	f090 0f00 	teq	r0, #0
   b8e0c:	bf04      	itt	eq
   b8e0e:	2100      	moveq	r1, #0
   b8e10:	4770      	bxeq	lr
   b8e12:	b530      	push	{r4, r5, lr}
   b8e14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8e18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8e1c:	f04f 0500 	mov.w	r5, #0
   b8e20:	f04f 0100 	mov.w	r1, #0
   b8e24:	e750      	b.n	b8cc8 <__adddf3+0x138>
   b8e26:	bf00      	nop

000b8e28 <__aeabi_i2d>:
   b8e28:	f090 0f00 	teq	r0, #0
   b8e2c:	bf04      	itt	eq
   b8e2e:	2100      	moveq	r1, #0
   b8e30:	4770      	bxeq	lr
   b8e32:	b530      	push	{r4, r5, lr}
   b8e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8e3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8e40:	bf48      	it	mi
   b8e42:	4240      	negmi	r0, r0
   b8e44:	f04f 0100 	mov.w	r1, #0
   b8e48:	e73e      	b.n	b8cc8 <__adddf3+0x138>
   b8e4a:	bf00      	nop

000b8e4c <__aeabi_f2d>:
   b8e4c:	0042      	lsls	r2, r0, #1
   b8e4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8e52:	ea4f 0131 	mov.w	r1, r1, rrx
   b8e56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8e5a:	bf1f      	itttt	ne
   b8e5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8e64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8e68:	4770      	bxne	lr
   b8e6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8e6e:	bf08      	it	eq
   b8e70:	4770      	bxeq	lr
   b8e72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8e76:	bf04      	itt	eq
   b8e78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8e7c:	4770      	bxeq	lr
   b8e7e:	b530      	push	{r4, r5, lr}
   b8e80:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8e88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8e8c:	e71c      	b.n	b8cc8 <__adddf3+0x138>
   b8e8e:	bf00      	nop

000b8e90 <__aeabi_ul2d>:
   b8e90:	ea50 0201 	orrs.w	r2, r0, r1
   b8e94:	bf08      	it	eq
   b8e96:	4770      	bxeq	lr
   b8e98:	b530      	push	{r4, r5, lr}
   b8e9a:	f04f 0500 	mov.w	r5, #0
   b8e9e:	e00a      	b.n	b8eb6 <__aeabi_l2d+0x16>

000b8ea0 <__aeabi_l2d>:
   b8ea0:	ea50 0201 	orrs.w	r2, r0, r1
   b8ea4:	bf08      	it	eq
   b8ea6:	4770      	bxeq	lr
   b8ea8:	b530      	push	{r4, r5, lr}
   b8eaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8eae:	d502      	bpl.n	b8eb6 <__aeabi_l2d+0x16>
   b8eb0:	4240      	negs	r0, r0
   b8eb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8eb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8eba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8ebe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8ec2:	f43f aed8 	beq.w	b8c76 <__adddf3+0xe6>
   b8ec6:	f04f 0203 	mov.w	r2, #3
   b8eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8ece:	bf18      	it	ne
   b8ed0:	3203      	addne	r2, #3
   b8ed2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8ed6:	bf18      	it	ne
   b8ed8:	3203      	addne	r2, #3
   b8eda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8ede:	f1c2 0320 	rsb	r3, r2, #32
   b8ee2:	fa00 fc03 	lsl.w	ip, r0, r3
   b8ee6:	fa20 f002 	lsr.w	r0, r0, r2
   b8eea:	fa01 fe03 	lsl.w	lr, r1, r3
   b8eee:	ea40 000e 	orr.w	r0, r0, lr
   b8ef2:	fa21 f102 	lsr.w	r1, r1, r2
   b8ef6:	4414      	add	r4, r2
   b8ef8:	e6bd      	b.n	b8c76 <__adddf3+0xe6>
   b8efa:	bf00      	nop

000b8efc <__aeabi_dmul>:
   b8efc:	b570      	push	{r4, r5, r6, lr}
   b8efe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8f02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8f06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8f0a:	bf1d      	ittte	ne
   b8f0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8f10:	ea94 0f0c 	teqne	r4, ip
   b8f14:	ea95 0f0c 	teqne	r5, ip
   b8f18:	f000 f8de 	bleq	b90d8 <__aeabi_dmul+0x1dc>
   b8f1c:	442c      	add	r4, r5
   b8f1e:	ea81 0603 	eor.w	r6, r1, r3
   b8f22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8f26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8f2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8f2e:	bf18      	it	ne
   b8f30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8f3c:	d038      	beq.n	b8fb0 <__aeabi_dmul+0xb4>
   b8f3e:	fba0 ce02 	umull	ip, lr, r0, r2
   b8f42:	f04f 0500 	mov.w	r5, #0
   b8f46:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8f4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8f4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8f52:	f04f 0600 	mov.w	r6, #0
   b8f56:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8f5a:	f09c 0f00 	teq	ip, #0
   b8f5e:	bf18      	it	ne
   b8f60:	f04e 0e01 	orrne.w	lr, lr, #1
   b8f64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8f68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8f6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8f70:	d204      	bcs.n	b8f7c <__aeabi_dmul+0x80>
   b8f72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8f76:	416d      	adcs	r5, r5
   b8f78:	eb46 0606 	adc.w	r6, r6, r6
   b8f7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8f80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8f84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8f88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8f8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8f90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8f94:	bf88      	it	hi
   b8f96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8f9a:	d81e      	bhi.n	b8fda <__aeabi_dmul+0xde>
   b8f9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8fa0:	bf08      	it	eq
   b8fa2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8fa6:	f150 0000 	adcs.w	r0, r0, #0
   b8faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8fae:	bd70      	pop	{r4, r5, r6, pc}
   b8fb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8fb4:	ea46 0101 	orr.w	r1, r6, r1
   b8fb8:	ea40 0002 	orr.w	r0, r0, r2
   b8fbc:	ea81 0103 	eor.w	r1, r1, r3
   b8fc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8fc4:	bfc2      	ittt	gt
   b8fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8fce:	bd70      	popgt	{r4, r5, r6, pc}
   b8fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8fd4:	f04f 0e00 	mov.w	lr, #0
   b8fd8:	3c01      	subs	r4, #1
   b8fda:	f300 80ab 	bgt.w	b9134 <__aeabi_dmul+0x238>
   b8fde:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8fe2:	bfde      	ittt	le
   b8fe4:	2000      	movle	r0, #0
   b8fe6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8fea:	bd70      	pople	{r4, r5, r6, pc}
   b8fec:	f1c4 0400 	rsb	r4, r4, #0
   b8ff0:	3c20      	subs	r4, #32
   b8ff2:	da35      	bge.n	b9060 <__aeabi_dmul+0x164>
   b8ff4:	340c      	adds	r4, #12
   b8ff6:	dc1b      	bgt.n	b9030 <__aeabi_dmul+0x134>
   b8ff8:	f104 0414 	add.w	r4, r4, #20
   b8ffc:	f1c4 0520 	rsb	r5, r4, #32
   b9000:	fa00 f305 	lsl.w	r3, r0, r5
   b9004:	fa20 f004 	lsr.w	r0, r0, r4
   b9008:	fa01 f205 	lsl.w	r2, r1, r5
   b900c:	ea40 0002 	orr.w	r0, r0, r2
   b9010:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b901c:	fa21 f604 	lsr.w	r6, r1, r4
   b9020:	eb42 0106 	adc.w	r1, r2, r6
   b9024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9028:	bf08      	it	eq
   b902a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b902e:	bd70      	pop	{r4, r5, r6, pc}
   b9030:	f1c4 040c 	rsb	r4, r4, #12
   b9034:	f1c4 0520 	rsb	r5, r4, #32
   b9038:	fa00 f304 	lsl.w	r3, r0, r4
   b903c:	fa20 f005 	lsr.w	r0, r0, r5
   b9040:	fa01 f204 	lsl.w	r2, r1, r4
   b9044:	ea40 0002 	orr.w	r0, r0, r2
   b9048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b904c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9050:	f141 0100 	adc.w	r1, r1, #0
   b9054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9058:	bf08      	it	eq
   b905a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b905e:	bd70      	pop	{r4, r5, r6, pc}
   b9060:	f1c4 0520 	rsb	r5, r4, #32
   b9064:	fa00 f205 	lsl.w	r2, r0, r5
   b9068:	ea4e 0e02 	orr.w	lr, lr, r2
   b906c:	fa20 f304 	lsr.w	r3, r0, r4
   b9070:	fa01 f205 	lsl.w	r2, r1, r5
   b9074:	ea43 0302 	orr.w	r3, r3, r2
   b9078:	fa21 f004 	lsr.w	r0, r1, r4
   b907c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9080:	fa21 f204 	lsr.w	r2, r1, r4
   b9084:	ea20 0002 	bic.w	r0, r0, r2
   b9088:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b908c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9090:	bf08      	it	eq
   b9092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9096:	bd70      	pop	{r4, r5, r6, pc}
   b9098:	f094 0f00 	teq	r4, #0
   b909c:	d10f      	bne.n	b90be <__aeabi_dmul+0x1c2>
   b909e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b90a2:	0040      	lsls	r0, r0, #1
   b90a4:	eb41 0101 	adc.w	r1, r1, r1
   b90a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b90ac:	bf08      	it	eq
   b90ae:	3c01      	subeq	r4, #1
   b90b0:	d0f7      	beq.n	b90a2 <__aeabi_dmul+0x1a6>
   b90b2:	ea41 0106 	orr.w	r1, r1, r6
   b90b6:	f095 0f00 	teq	r5, #0
   b90ba:	bf18      	it	ne
   b90bc:	4770      	bxne	lr
   b90be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b90c2:	0052      	lsls	r2, r2, #1
   b90c4:	eb43 0303 	adc.w	r3, r3, r3
   b90c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b90cc:	bf08      	it	eq
   b90ce:	3d01      	subeq	r5, #1
   b90d0:	d0f7      	beq.n	b90c2 <__aeabi_dmul+0x1c6>
   b90d2:	ea43 0306 	orr.w	r3, r3, r6
   b90d6:	4770      	bx	lr
   b90d8:	ea94 0f0c 	teq	r4, ip
   b90dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b90e0:	bf18      	it	ne
   b90e2:	ea95 0f0c 	teqne	r5, ip
   b90e6:	d00c      	beq.n	b9102 <__aeabi_dmul+0x206>
   b90e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b90ec:	bf18      	it	ne
   b90ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b90f2:	d1d1      	bne.n	b9098 <__aeabi_dmul+0x19c>
   b90f4:	ea81 0103 	eor.w	r1, r1, r3
   b90f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b90fc:	f04f 0000 	mov.w	r0, #0
   b9100:	bd70      	pop	{r4, r5, r6, pc}
   b9102:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9106:	bf06      	itte	eq
   b9108:	4610      	moveq	r0, r2
   b910a:	4619      	moveq	r1, r3
   b910c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9110:	d019      	beq.n	b9146 <__aeabi_dmul+0x24a>
   b9112:	ea94 0f0c 	teq	r4, ip
   b9116:	d102      	bne.n	b911e <__aeabi_dmul+0x222>
   b9118:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b911c:	d113      	bne.n	b9146 <__aeabi_dmul+0x24a>
   b911e:	ea95 0f0c 	teq	r5, ip
   b9122:	d105      	bne.n	b9130 <__aeabi_dmul+0x234>
   b9124:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9128:	bf1c      	itt	ne
   b912a:	4610      	movne	r0, r2
   b912c:	4619      	movne	r1, r3
   b912e:	d10a      	bne.n	b9146 <__aeabi_dmul+0x24a>
   b9130:	ea81 0103 	eor.w	r1, r1, r3
   b9134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9138:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b913c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9140:	f04f 0000 	mov.w	r0, #0
   b9144:	bd70      	pop	{r4, r5, r6, pc}
   b9146:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b914a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b914e:	bd70      	pop	{r4, r5, r6, pc}

000b9150 <__aeabi_ddiv>:
   b9150:	b570      	push	{r4, r5, r6, lr}
   b9152:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b915a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b915e:	bf1d      	ittte	ne
   b9160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9164:	ea94 0f0c 	teqne	r4, ip
   b9168:	ea95 0f0c 	teqne	r5, ip
   b916c:	f000 f8a7 	bleq	b92be <__aeabi_ddiv+0x16e>
   b9170:	eba4 0405 	sub.w	r4, r4, r5
   b9174:	ea81 0e03 	eor.w	lr, r1, r3
   b9178:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b917c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9180:	f000 8088 	beq.w	b9294 <__aeabi_ddiv+0x144>
   b9184:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9188:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b918c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9190:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9194:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9198:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b919c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b91a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b91a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b91a8:	429d      	cmp	r5, r3
   b91aa:	bf08      	it	eq
   b91ac:	4296      	cmpeq	r6, r2
   b91ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b91b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b91b6:	d202      	bcs.n	b91be <__aeabi_ddiv+0x6e>
   b91b8:	085b      	lsrs	r3, r3, #1
   b91ba:	ea4f 0232 	mov.w	r2, r2, rrx
   b91be:	1ab6      	subs	r6, r6, r2
   b91c0:	eb65 0503 	sbc.w	r5, r5, r3
   b91c4:	085b      	lsrs	r3, r3, #1
   b91c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b91ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b91ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b91d2:	ebb6 0e02 	subs.w	lr, r6, r2
   b91d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b91da:	bf22      	ittt	cs
   b91dc:	1ab6      	subcs	r6, r6, r2
   b91de:	4675      	movcs	r5, lr
   b91e0:	ea40 000c 	orrcs.w	r0, r0, ip
   b91e4:	085b      	lsrs	r3, r3, #1
   b91e6:	ea4f 0232 	mov.w	r2, r2, rrx
   b91ea:	ebb6 0e02 	subs.w	lr, r6, r2
   b91ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b91f2:	bf22      	ittt	cs
   b91f4:	1ab6      	subcs	r6, r6, r2
   b91f6:	4675      	movcs	r5, lr
   b91f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b91fc:	085b      	lsrs	r3, r3, #1
   b91fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b9202:	ebb6 0e02 	subs.w	lr, r6, r2
   b9206:	eb75 0e03 	sbcs.w	lr, r5, r3
   b920a:	bf22      	ittt	cs
   b920c:	1ab6      	subcs	r6, r6, r2
   b920e:	4675      	movcs	r5, lr
   b9210:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9214:	085b      	lsrs	r3, r3, #1
   b9216:	ea4f 0232 	mov.w	r2, r2, rrx
   b921a:	ebb6 0e02 	subs.w	lr, r6, r2
   b921e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9222:	bf22      	ittt	cs
   b9224:	1ab6      	subcs	r6, r6, r2
   b9226:	4675      	movcs	r5, lr
   b9228:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b922c:	ea55 0e06 	orrs.w	lr, r5, r6
   b9230:	d018      	beq.n	b9264 <__aeabi_ddiv+0x114>
   b9232:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9236:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b923a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b923e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9242:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9246:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b924a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b924e:	d1c0      	bne.n	b91d2 <__aeabi_ddiv+0x82>
   b9250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9254:	d10b      	bne.n	b926e <__aeabi_ddiv+0x11e>
   b9256:	ea41 0100 	orr.w	r1, r1, r0
   b925a:	f04f 0000 	mov.w	r0, #0
   b925e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9262:	e7b6      	b.n	b91d2 <__aeabi_ddiv+0x82>
   b9264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9268:	bf04      	itt	eq
   b926a:	4301      	orreq	r1, r0
   b926c:	2000      	moveq	r0, #0
   b926e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9272:	bf88      	it	hi
   b9274:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9278:	f63f aeaf 	bhi.w	b8fda <__aeabi_dmul+0xde>
   b927c:	ebb5 0c03 	subs.w	ip, r5, r3
   b9280:	bf04      	itt	eq
   b9282:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b928a:	f150 0000 	adcs.w	r0, r0, #0
   b928e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9292:	bd70      	pop	{r4, r5, r6, pc}
   b9294:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9298:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b929c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b92a0:	bfc2      	ittt	gt
   b92a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b92a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b92aa:	bd70      	popgt	{r4, r5, r6, pc}
   b92ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b92b0:	f04f 0e00 	mov.w	lr, #0
   b92b4:	3c01      	subs	r4, #1
   b92b6:	e690      	b.n	b8fda <__aeabi_dmul+0xde>
   b92b8:	ea45 0e06 	orr.w	lr, r5, r6
   b92bc:	e68d      	b.n	b8fda <__aeabi_dmul+0xde>
   b92be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b92c2:	ea94 0f0c 	teq	r4, ip
   b92c6:	bf08      	it	eq
   b92c8:	ea95 0f0c 	teqeq	r5, ip
   b92cc:	f43f af3b 	beq.w	b9146 <__aeabi_dmul+0x24a>
   b92d0:	ea94 0f0c 	teq	r4, ip
   b92d4:	d10a      	bne.n	b92ec <__aeabi_ddiv+0x19c>
   b92d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b92da:	f47f af34 	bne.w	b9146 <__aeabi_dmul+0x24a>
   b92de:	ea95 0f0c 	teq	r5, ip
   b92e2:	f47f af25 	bne.w	b9130 <__aeabi_dmul+0x234>
   b92e6:	4610      	mov	r0, r2
   b92e8:	4619      	mov	r1, r3
   b92ea:	e72c      	b.n	b9146 <__aeabi_dmul+0x24a>
   b92ec:	ea95 0f0c 	teq	r5, ip
   b92f0:	d106      	bne.n	b9300 <__aeabi_ddiv+0x1b0>
   b92f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b92f6:	f43f aefd 	beq.w	b90f4 <__aeabi_dmul+0x1f8>
   b92fa:	4610      	mov	r0, r2
   b92fc:	4619      	mov	r1, r3
   b92fe:	e722      	b.n	b9146 <__aeabi_dmul+0x24a>
   b9300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9304:	bf18      	it	ne
   b9306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b930a:	f47f aec5 	bne.w	b9098 <__aeabi_dmul+0x19c>
   b930e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9312:	f47f af0d 	bne.w	b9130 <__aeabi_dmul+0x234>
   b9316:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b931a:	f47f aeeb 	bne.w	b90f4 <__aeabi_dmul+0x1f8>
   b931e:	e712      	b.n	b9146 <__aeabi_dmul+0x24a>

000b9320 <__gedf2>:
   b9320:	f04f 3cff 	mov.w	ip, #4294967295
   b9324:	e006      	b.n	b9334 <__cmpdf2+0x4>
   b9326:	bf00      	nop

000b9328 <__ledf2>:
   b9328:	f04f 0c01 	mov.w	ip, #1
   b932c:	e002      	b.n	b9334 <__cmpdf2+0x4>
   b932e:	bf00      	nop

000b9330 <__cmpdf2>:
   b9330:	f04f 0c01 	mov.w	ip, #1
   b9334:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b933c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9340:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9344:	bf18      	it	ne
   b9346:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b934a:	d01b      	beq.n	b9384 <__cmpdf2+0x54>
   b934c:	b001      	add	sp, #4
   b934e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9352:	bf0c      	ite	eq
   b9354:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9358:	ea91 0f03 	teqne	r1, r3
   b935c:	bf02      	ittt	eq
   b935e:	ea90 0f02 	teqeq	r0, r2
   b9362:	2000      	moveq	r0, #0
   b9364:	4770      	bxeq	lr
   b9366:	f110 0f00 	cmn.w	r0, #0
   b936a:	ea91 0f03 	teq	r1, r3
   b936e:	bf58      	it	pl
   b9370:	4299      	cmppl	r1, r3
   b9372:	bf08      	it	eq
   b9374:	4290      	cmpeq	r0, r2
   b9376:	bf2c      	ite	cs
   b9378:	17d8      	asrcs	r0, r3, #31
   b937a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b937e:	f040 0001 	orr.w	r0, r0, #1
   b9382:	4770      	bx	lr
   b9384:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b938c:	d102      	bne.n	b9394 <__cmpdf2+0x64>
   b938e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9392:	d107      	bne.n	b93a4 <__cmpdf2+0x74>
   b9394:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b939c:	d1d6      	bne.n	b934c <__cmpdf2+0x1c>
   b939e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b93a2:	d0d3      	beq.n	b934c <__cmpdf2+0x1c>
   b93a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b93a8:	4770      	bx	lr
   b93aa:	bf00      	nop

000b93ac <__aeabi_cdrcmple>:
   b93ac:	4684      	mov	ip, r0
   b93ae:	4610      	mov	r0, r2
   b93b0:	4662      	mov	r2, ip
   b93b2:	468c      	mov	ip, r1
   b93b4:	4619      	mov	r1, r3
   b93b6:	4663      	mov	r3, ip
   b93b8:	e000      	b.n	b93bc <__aeabi_cdcmpeq>
   b93ba:	bf00      	nop

000b93bc <__aeabi_cdcmpeq>:
   b93bc:	b501      	push	{r0, lr}
   b93be:	f7ff ffb7 	bl	b9330 <__cmpdf2>
   b93c2:	2800      	cmp	r0, #0
   b93c4:	bf48      	it	mi
   b93c6:	f110 0f00 	cmnmi.w	r0, #0
   b93ca:	bd01      	pop	{r0, pc}

000b93cc <__aeabi_dcmpeq>:
   b93cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93d0:	f7ff fff4 	bl	b93bc <__aeabi_cdcmpeq>
   b93d4:	bf0c      	ite	eq
   b93d6:	2001      	moveq	r0, #1
   b93d8:	2000      	movne	r0, #0
   b93da:	f85d fb08 	ldr.w	pc, [sp], #8
   b93de:	bf00      	nop

000b93e0 <__aeabi_dcmplt>:
   b93e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93e4:	f7ff ffea 	bl	b93bc <__aeabi_cdcmpeq>
   b93e8:	bf34      	ite	cc
   b93ea:	2001      	movcc	r0, #1
   b93ec:	2000      	movcs	r0, #0
   b93ee:	f85d fb08 	ldr.w	pc, [sp], #8
   b93f2:	bf00      	nop

000b93f4 <__aeabi_dcmple>:
   b93f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b93f8:	f7ff ffe0 	bl	b93bc <__aeabi_cdcmpeq>
   b93fc:	bf94      	ite	ls
   b93fe:	2001      	movls	r0, #1
   b9400:	2000      	movhi	r0, #0
   b9402:	f85d fb08 	ldr.w	pc, [sp], #8
   b9406:	bf00      	nop

000b9408 <__aeabi_dcmpge>:
   b9408:	f84d ed08 	str.w	lr, [sp, #-8]!
   b940c:	f7ff ffce 	bl	b93ac <__aeabi_cdrcmple>
   b9410:	bf94      	ite	ls
   b9412:	2001      	movls	r0, #1
   b9414:	2000      	movhi	r0, #0
   b9416:	f85d fb08 	ldr.w	pc, [sp], #8
   b941a:	bf00      	nop

000b941c <__aeabi_dcmpgt>:
   b941c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9420:	f7ff ffc4 	bl	b93ac <__aeabi_cdrcmple>
   b9424:	bf34      	ite	cc
   b9426:	2001      	movcc	r0, #1
   b9428:	2000      	movcs	r0, #0
   b942a:	f85d fb08 	ldr.w	pc, [sp], #8
   b942e:	bf00      	nop

000b9430 <__aeabi_d2uiz>:
   b9430:	004a      	lsls	r2, r1, #1
   b9432:	d211      	bcs.n	b9458 <__aeabi_d2uiz+0x28>
   b9434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9438:	d211      	bcs.n	b945e <__aeabi_d2uiz+0x2e>
   b943a:	d50d      	bpl.n	b9458 <__aeabi_d2uiz+0x28>
   b943c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9444:	d40e      	bmi.n	b9464 <__aeabi_d2uiz+0x34>
   b9446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b944a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b944e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9452:	fa23 f002 	lsr.w	r0, r3, r2
   b9456:	4770      	bx	lr
   b9458:	f04f 0000 	mov.w	r0, #0
   b945c:	4770      	bx	lr
   b945e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9462:	d102      	bne.n	b946a <__aeabi_d2uiz+0x3a>
   b9464:	f04f 30ff 	mov.w	r0, #4294967295
   b9468:	4770      	bx	lr
   b946a:	f04f 0000 	mov.w	r0, #0
   b946e:	4770      	bx	lr

000b9470 <__aeabi_d2f>:
   b9470:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b9478:	bf24      	itt	cs
   b947a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b947e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9482:	d90d      	bls.n	b94a0 <__aeabi_d2f+0x30>
   b9484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b9488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b948c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9498:	bf08      	it	eq
   b949a:	f020 0001 	biceq.w	r0, r0, #1
   b949e:	4770      	bx	lr
   b94a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b94a4:	d121      	bne.n	b94ea <__aeabi_d2f+0x7a>
   b94a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b94aa:	bfbc      	itt	lt
   b94ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b94b0:	4770      	bxlt	lr
   b94b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b94b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b94ba:	f1c2 0218 	rsb	r2, r2, #24
   b94be:	f1c2 0c20 	rsb	ip, r2, #32
   b94c2:	fa10 f30c 	lsls.w	r3, r0, ip
   b94c6:	fa20 f002 	lsr.w	r0, r0, r2
   b94ca:	bf18      	it	ne
   b94cc:	f040 0001 	orrne.w	r0, r0, #1
   b94d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b94d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b94d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   b94dc:	ea40 000c 	orr.w	r0, r0, ip
   b94e0:	fa23 f302 	lsr.w	r3, r3, r2
   b94e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b94e8:	e7cc      	b.n	b9484 <__aeabi_d2f+0x14>
   b94ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b94ee:	d107      	bne.n	b9500 <__aeabi_d2f+0x90>
   b94f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b94f4:	bf1e      	ittt	ne
   b94f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b94fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b94fe:	4770      	bxne	lr
   b9500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b950c:	4770      	bx	lr
   b950e:	bf00      	nop

000b9510 <atexit>:
   b9510:	2300      	movs	r3, #0
   b9512:	4601      	mov	r1, r0
   b9514:	461a      	mov	r2, r3
   b9516:	4618      	mov	r0, r3
   b9518:	f000 b8c8 	b.w	b96ac <__register_exitproc>

000b951c <calloc>:
   b951c:	4b02      	ldr	r3, [pc, #8]	; (b9528 <calloc+0xc>)
   b951e:	460a      	mov	r2, r1
   b9520:	4601      	mov	r1, r0
   b9522:	6818      	ldr	r0, [r3, #0]
   b9524:	f000 b818 	b.w	b9558 <_calloc_r>
   b9528:	2003df68 	.word	0x2003df68

000b952c <memcpy>:
   b952c:	440a      	add	r2, r1
   b952e:	4291      	cmp	r1, r2
   b9530:	f100 33ff 	add.w	r3, r0, #4294967295
   b9534:	d100      	bne.n	b9538 <memcpy+0xc>
   b9536:	4770      	bx	lr
   b9538:	b510      	push	{r4, lr}
   b953a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b953e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9542:	4291      	cmp	r1, r2
   b9544:	d1f9      	bne.n	b953a <memcpy+0xe>
   b9546:	bd10      	pop	{r4, pc}

000b9548 <memset>:
   b9548:	4402      	add	r2, r0
   b954a:	4603      	mov	r3, r0
   b954c:	4293      	cmp	r3, r2
   b954e:	d100      	bne.n	b9552 <memset+0xa>
   b9550:	4770      	bx	lr
   b9552:	f803 1b01 	strb.w	r1, [r3], #1
   b9556:	e7f9      	b.n	b954c <memset+0x4>

000b9558 <_calloc_r>:
   b9558:	b513      	push	{r0, r1, r4, lr}
   b955a:	434a      	muls	r2, r1
   b955c:	4611      	mov	r1, r2
   b955e:	9201      	str	r2, [sp, #4]
   b9560:	f7fe fbbc 	bl	b7cdc <_malloc_r>
   b9564:	4604      	mov	r4, r0
   b9566:	b118      	cbz	r0, b9570 <_calloc_r+0x18>
   b9568:	9a01      	ldr	r2, [sp, #4]
   b956a:	2100      	movs	r1, #0
   b956c:	f7ff ffec 	bl	b9548 <memset>
   b9570:	4620      	mov	r0, r4
   b9572:	b002      	add	sp, #8
   b9574:	bd10      	pop	{r4, pc}
	...

000b9578 <srand>:
   b9578:	b538      	push	{r3, r4, r5, lr}
   b957a:	4b10      	ldr	r3, [pc, #64]	; (b95bc <srand+0x44>)
   b957c:	681d      	ldr	r5, [r3, #0]
   b957e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9580:	4604      	mov	r4, r0
   b9582:	b9b3      	cbnz	r3, b95b2 <srand+0x3a>
   b9584:	2018      	movs	r0, #24
   b9586:	f7fe fb81 	bl	b7c8c <malloc>
   b958a:	4602      	mov	r2, r0
   b958c:	63a8      	str	r0, [r5, #56]	; 0x38
   b958e:	b920      	cbnz	r0, b959a <srand+0x22>
   b9590:	4b0b      	ldr	r3, [pc, #44]	; (b95c0 <srand+0x48>)
   b9592:	480c      	ldr	r0, [pc, #48]	; (b95c4 <srand+0x4c>)
   b9594:	2142      	movs	r1, #66	; 0x42
   b9596:	f7fe fba9 	bl	b7cec <__assert_func>
   b959a:	490b      	ldr	r1, [pc, #44]	; (b95c8 <srand+0x50>)
   b959c:	4b0b      	ldr	r3, [pc, #44]	; (b95cc <srand+0x54>)
   b959e:	e9c0 1300 	strd	r1, r3, [r0]
   b95a2:	4b0b      	ldr	r3, [pc, #44]	; (b95d0 <srand+0x58>)
   b95a4:	6083      	str	r3, [r0, #8]
   b95a6:	230b      	movs	r3, #11
   b95a8:	8183      	strh	r3, [r0, #12]
   b95aa:	2100      	movs	r1, #0
   b95ac:	2001      	movs	r0, #1
   b95ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b95b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b95b4:	2200      	movs	r2, #0
   b95b6:	611c      	str	r4, [r3, #16]
   b95b8:	615a      	str	r2, [r3, #20]
   b95ba:	bd38      	pop	{r3, r4, r5, pc}
   b95bc:	2003df68 	.word	0x2003df68
   b95c0:	000bac5d 	.word	0x000bac5d
   b95c4:	000bac74 	.word	0x000bac74
   b95c8:	abcd330e 	.word	0xabcd330e
   b95cc:	e66d1234 	.word	0xe66d1234
   b95d0:	0005deec 	.word	0x0005deec

000b95d4 <strcpy>:
   b95d4:	4603      	mov	r3, r0
   b95d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b95da:	f803 2b01 	strb.w	r2, [r3], #1
   b95de:	2a00      	cmp	r2, #0
   b95e0:	d1f9      	bne.n	b95d6 <strcpy+0x2>
   b95e2:	4770      	bx	lr

000b95e4 <strlen>:
   b95e4:	4603      	mov	r3, r0
   b95e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b95ea:	2a00      	cmp	r2, #0
   b95ec:	d1fb      	bne.n	b95e6 <strlen+0x2>
   b95ee:	1a18      	subs	r0, r3, r0
   b95f0:	3801      	subs	r0, #1
   b95f2:	4770      	bx	lr

000b95f4 <strtok>:
   b95f4:	4b16      	ldr	r3, [pc, #88]	; (b9650 <strtok+0x5c>)
   b95f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b95f8:	681e      	ldr	r6, [r3, #0]
   b95fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b95fc:	4605      	mov	r5, r0
   b95fe:	b9fc      	cbnz	r4, b9640 <strtok+0x4c>
   b9600:	2050      	movs	r0, #80	; 0x50
   b9602:	9101      	str	r1, [sp, #4]
   b9604:	f7fe fb42 	bl	b7c8c <malloc>
   b9608:	9901      	ldr	r1, [sp, #4]
   b960a:	65b0      	str	r0, [r6, #88]	; 0x58
   b960c:	4602      	mov	r2, r0
   b960e:	b920      	cbnz	r0, b961a <strtok+0x26>
   b9610:	4b10      	ldr	r3, [pc, #64]	; (b9654 <strtok+0x60>)
   b9612:	4811      	ldr	r0, [pc, #68]	; (b9658 <strtok+0x64>)
   b9614:	2157      	movs	r1, #87	; 0x57
   b9616:	f7fe fb69 	bl	b7cec <__assert_func>
   b961a:	e9c0 4400 	strd	r4, r4, [r0]
   b961e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9622:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b9626:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b962a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b962e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9632:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b9636:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b963a:	6184      	str	r4, [r0, #24]
   b963c:	7704      	strb	r4, [r0, #28]
   b963e:	6244      	str	r4, [r0, #36]	; 0x24
   b9640:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9642:	2301      	movs	r3, #1
   b9644:	4628      	mov	r0, r5
   b9646:	b002      	add	sp, #8
   b9648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b964c:	f000 b806 	b.w	b965c <__strtok_r>
   b9650:	2003df68 	.word	0x2003df68
   b9654:	000bac5d 	.word	0x000bac5d
   b9658:	000bacf1 	.word	0x000bacf1

000b965c <__strtok_r>:
   b965c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b965e:	b908      	cbnz	r0, b9664 <__strtok_r+0x8>
   b9660:	6810      	ldr	r0, [r2, #0]
   b9662:	b188      	cbz	r0, b9688 <__strtok_r+0x2c>
   b9664:	4604      	mov	r4, r0
   b9666:	4620      	mov	r0, r4
   b9668:	f814 5b01 	ldrb.w	r5, [r4], #1
   b966c:	460f      	mov	r7, r1
   b966e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9672:	b91e      	cbnz	r6, b967c <__strtok_r+0x20>
   b9674:	b965      	cbnz	r5, b9690 <__strtok_r+0x34>
   b9676:	6015      	str	r5, [r2, #0]
   b9678:	4628      	mov	r0, r5
   b967a:	e005      	b.n	b9688 <__strtok_r+0x2c>
   b967c:	42b5      	cmp	r5, r6
   b967e:	d1f6      	bne.n	b966e <__strtok_r+0x12>
   b9680:	2b00      	cmp	r3, #0
   b9682:	d1f0      	bne.n	b9666 <__strtok_r+0xa>
   b9684:	6014      	str	r4, [r2, #0]
   b9686:	7003      	strb	r3, [r0, #0]
   b9688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b968a:	461c      	mov	r4, r3
   b968c:	e00c      	b.n	b96a8 <__strtok_r+0x4c>
   b968e:	b915      	cbnz	r5, b9696 <__strtok_r+0x3a>
   b9690:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9694:	460e      	mov	r6, r1
   b9696:	f816 5b01 	ldrb.w	r5, [r6], #1
   b969a:	42ab      	cmp	r3, r5
   b969c:	d1f7      	bne.n	b968e <__strtok_r+0x32>
   b969e:	2b00      	cmp	r3, #0
   b96a0:	d0f3      	beq.n	b968a <__strtok_r+0x2e>
   b96a2:	2300      	movs	r3, #0
   b96a4:	f804 3c01 	strb.w	r3, [r4, #-1]
   b96a8:	6014      	str	r4, [r2, #0]
   b96aa:	e7ed      	b.n	b9688 <__strtok_r+0x2c>

000b96ac <__register_exitproc>:
   b96ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b96b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b976c <__register_exitproc+0xc0>
   b96b4:	4606      	mov	r6, r0
   b96b6:	f8d8 0000 	ldr.w	r0, [r8]
   b96ba:	461f      	mov	r7, r3
   b96bc:	460d      	mov	r5, r1
   b96be:	4691      	mov	r9, r2
   b96c0:	f000 f856 	bl	b9770 <__retarget_lock_acquire_recursive>
   b96c4:	4b25      	ldr	r3, [pc, #148]	; (b975c <__register_exitproc+0xb0>)
   b96c6:	681c      	ldr	r4, [r3, #0]
   b96c8:	b934      	cbnz	r4, b96d8 <__register_exitproc+0x2c>
   b96ca:	4c25      	ldr	r4, [pc, #148]	; (b9760 <__register_exitproc+0xb4>)
   b96cc:	601c      	str	r4, [r3, #0]
   b96ce:	4b25      	ldr	r3, [pc, #148]	; (b9764 <__register_exitproc+0xb8>)
   b96d0:	b113      	cbz	r3, b96d8 <__register_exitproc+0x2c>
   b96d2:	681b      	ldr	r3, [r3, #0]
   b96d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b96d8:	6863      	ldr	r3, [r4, #4]
   b96da:	2b1f      	cmp	r3, #31
   b96dc:	dd07      	ble.n	b96ee <__register_exitproc+0x42>
   b96de:	f8d8 0000 	ldr.w	r0, [r8]
   b96e2:	f000 f847 	bl	b9774 <__retarget_lock_release_recursive>
   b96e6:	f04f 30ff 	mov.w	r0, #4294967295
   b96ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b96ee:	b34e      	cbz	r6, b9744 <__register_exitproc+0x98>
   b96f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b96f4:	b988      	cbnz	r0, b971a <__register_exitproc+0x6e>
   b96f6:	4b1c      	ldr	r3, [pc, #112]	; (b9768 <__register_exitproc+0xbc>)
   b96f8:	b923      	cbnz	r3, b9704 <__register_exitproc+0x58>
   b96fa:	f8d8 0000 	ldr.w	r0, [r8]
   b96fe:	f000 f838 	bl	b9772 <__retarget_lock_release>
   b9702:	e7f0      	b.n	b96e6 <__register_exitproc+0x3a>
   b9704:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9708:	f7fe fac0 	bl	b7c8c <malloc>
   b970c:	2800      	cmp	r0, #0
   b970e:	d0f4      	beq.n	b96fa <__register_exitproc+0x4e>
   b9710:	2300      	movs	r3, #0
   b9712:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9716:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b971a:	6863      	ldr	r3, [r4, #4]
   b971c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9720:	2201      	movs	r2, #1
   b9722:	409a      	lsls	r2, r3
   b9724:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9728:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b972c:	4313      	orrs	r3, r2
   b972e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9732:	2e02      	cmp	r6, #2
   b9734:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9738:	bf02      	ittt	eq
   b973a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b973e:	4313      	orreq	r3, r2
   b9740:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9744:	6863      	ldr	r3, [r4, #4]
   b9746:	f8d8 0000 	ldr.w	r0, [r8]
   b974a:	1c5a      	adds	r2, r3, #1
   b974c:	3302      	adds	r3, #2
   b974e:	6062      	str	r2, [r4, #4]
   b9750:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9754:	f000 f80e 	bl	b9774 <__retarget_lock_release_recursive>
   b9758:	2000      	movs	r0, #0
   b975a:	e7c6      	b.n	b96ea <__register_exitproc+0x3e>
   b975c:	2003e7e8 	.word	0x2003e7e8
   b9760:	2003e75c 	.word	0x2003e75c
   b9764:	00000000 	.word	0x00000000
   b9768:	000b7c8d 	.word	0x000b7c8d
   b976c:	2003dfcc 	.word	0x2003dfcc

000b9770 <__retarget_lock_acquire_recursive>:
   b9770:	4770      	bx	lr

000b9772 <__retarget_lock_release>:
   b9772:	4770      	bx	lr

000b9774 <__retarget_lock_release_recursive>:
   b9774:	4770      	bx	lr

000b9776 <link_code_end>:
	...

000b9778 <dynalib_user>:
   b9778:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9788:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9798:	7620 7269 7574 6c61 4e00 206f 7365 7620      virtual.No es v
   b97a8:	6c61 6469 006f 6554 706d 203a 6625 4900     alido.Temp: %f.I
   b97b8:	766e 6c61 6469 6553 736e 726f 7245 6f72     nvalidSensorErro
   b97c8:	0072 6341 7574 6461 726f 5220 4247 4100     r.Actuador RGB.A
   b97d8:	7463 6175 6f64 2072 755a 626d 6461 726f     ctuador Zumbador
   b97e8:	5300 6e65 6f73 2072 6564 4c20 7a75 5300     .Sensor de Luz.S
   b97f8:	6e65 6f73 2072 6564 5220 6975 6f64 5300     ensor de Ruido.S
   b9808:	6e65 6f73 2072 6f42 6f74 006e 6553 736e     ensor Boton.Sens
   b9818:	726f 5220 746f 7461 7669 006f 4120 2000     or Rotativo. A. 
   b9828:	0044 6553 736e 726f 5020 636f 2061 6944     D.Sensor Poca Di
   b9838:	7473 6e61 6963 0061 6553 736e 726f 4d20     stancia.Sensor M
   b9848:	6375 6168 4420 7369 6174 636e 6169 4f00     ucha Distancia.O
   b9858:	454c 3a44 5320 6e65 6f73 2072 754c 207a     LED: Sensor Luz 
   b9868:	3e2d 2520 0064 6553 736e 726f 4e20 206f     -> %d.Sensor No 
   b9878:	754c 007a 6553 736e 726f 5320 2069 754c     Luz.Sensor Si Lu
   b9888:	007a 6553 736e 726f 4e20 206f 7552 6469     z.Sensor No Ruid
   b9898:	006f 6553 736e 726f 5320 2069 7552 6469     o.Sensor Si Ruid
   b98a8:	006f 6553 736e 726f 4e20 206f 6f42 6f74     o.Sensor No Boto
   b98b8:	006e 6553 736e 726f 5320 2069 6f42 6f74     n.Sensor Si Boto
   b98c8:	006e 6553 736e 726f 4e20 206f 6f52 6174     n.Sensor No Rota
   b98d8:	6974 6f76 5300 6e65 6f73 2072 6953 5220     tivo.Sensor Si R
   b98e8:	746f 7461 7669 006f 6553 736e 726f 5420     otativo.Sensor T
   b98f8:	6d65 2e70 7246 6f69 5300 6e65 6f73 2072     emp.Frio.Sensor 
   b9908:	6554 706d 542e 6d65 6c70 6461 006f 6553     Temp.Templado.Se
   b9918:	736e 726f 5420 6d65 2e70 6143 6f6c 0072     nsor Temp.Calor.
   b9928:	6553 736e 726f 4420 7369 6174 636e 6169     Sensor Distancia
   b9938:	4320 7265 6163 5300 6e65 6f73 2072 6944      Cerca.Sensor Di
   b9948:	7473 6e61 6963 2061 654c 6f6a 0073 6553     stancia Lejos.Se
   b9958:	736e 726f 6f4e 6156 696c 6f64 7245 6f72     nsorNoValidoErro
   b9968:	0072 4752 2042 6556 6472 0065 4752 2042     r.RGB Verde.RGB 
   b9978:	6f52 6f6a 5200 4247 4120 616d 6972 6c6c     Rojo.RGB Amarill
   b9988:	006f 4752 2042 6f4d 6172 6f64 5200 4247     o.RGB Morado.RGB
   b9998:	4120 757a 006c 4752 2042 614e 6172 6a6e      Azul.RGB Naranj
   b99a8:	0061 4752 2042 6c42 6e69 006b 4752 2042     a.RGB Blink.RGB 
   b99b8:	6152 6e69 6f62 0077 755a 626d 6461 726f     Rainbow.Zumbador
   b99c8:	4f20 2d6e 664f 0066 755a 626d 6461 726f      On-Off.Zumbador
   b99d8:	4220 696c 6b6e 4100 7463 6175 6f64 4e72      Blink.ActuadorN
   b99e8:	566f 6c61 6469 456f 7272 726f 4d00 4649     oValidoError.MIF
   b99f8:	5241 5f45 6552 6461 2928 6620 6961 656c     ARE_Read() faile
   b9a08:	3a64 0020 4350 5f44 7541 6874 6e65 6974     d: .PCD_Authenti
   b9a18:	6163 6574 2928 6620 6961 656c 3a64 0020     cate() failed: .
   b9a28:	6154 4967 666e 3a6f 2520 0073 6f43 656e     TagInfo: %s.Cone
   b9a38:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
   b9a48:	0a30 4300 6e6f 6365 6174 2072 6c61 7020     0..Conectar al p
   b9a58:	6575 7472 206f 3241 000a 6f43 656e 7463     uerto A2..Conect
   b9a68:	7261 6120 206c 7570 7265 6f74 4120 0a34     ar al puerto A4.
   b9a78:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b9a88:	7472 206f 3244 000a 6f43 656e 7463 7261     rto D2..Conectar
   b9a98:	6120 206c 7570 7265 6f74 4420 0a34 4300      al puerto D4..C
   b9aa8:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b9ab8:	206f 3644 000a 7245 6f72 3a72 4e20 206f     o D6..Error: No 
   b9ac8:	6168 2079 616d 2073 7570 7265 6f74 2073     hay mas puertos 
   b9ad8:	6964 7073 6e6f 6269 656c 2073 000a 6156     disponibles ..Va
   b9ae8:	6f6c 2072 6f6e 7620 6c61 6469 006f 654c     lor no valido.Le
   b9af8:	4564 7272 726f 704f 6974 6e6f 4900 766e     dErrorOption.Inv
   b9b08:	6c61 6469 7320 6e65 6f73 2172 2d20 203e     alid sensor! -> 
   b9b18:	6553 736e 726f 7220 7065 7465 6469 206f     Sensor repetido 
   b9b28:	6e65 6520 206c 6c62 716f 6575 5400 6761     en el bloque.Tag
   b9b38:	4420 7465 6365 6174 6164 2d20 3e2d 0020      Detectada --> .
   b9b48:	6f4d 6f64 4b20 4449 2053 6564 6574 7463     Modo KIDS detect
   b9b58:	6461 006f 6f4d 6f64 5320 4355 4552 6420     ado.Modo SUCRE d
   b9b68:	7465 6365 6174 6f64 5300 6e65 6f73 2072     etectado.Sensor 
   b9b78:	6564 6574 7463 6461 3a6f 0020 5254 4555     detectado: .TRUE
   b9b88:	4600 4c41 4553 4100 7463 6175 6f64 2072     .FALSE.Actuador 
   b9b98:	6564 6574 7463 6461 3a6f 0020 6a45 6365     detectado: .Ejec
   b9ba8:	7475 6e61 6f64 7420 6761 2d20 3e2d 0020     utando tag --> .
   b9bb8:	6553 736e 726f 6420 7465 6365 6174 6f64     Sensor detectado
   b9bc8:	4500 7272 726f 5020 6575 7472 006f 6553     .Error Puerto.Se
   b9bd8:	6520 7073 7265 6261 2061 4649 7420 6761      esperaba IF tag
   b9be8:	4400 7365 7570 7365 6420 2065 6e75 7320     .Despues de un s
   b9bf8:	6e65 6f73 2072 6573 6520 7073 7265 2061     ensor se espera 
   b9c08:	6e75 2061 6f63 636e 6f69 3a6e 4120 444e     una concion: AND
   b9c18:	7520 4f20 0052 6341 7574 6461 726f 6420      u OR.Actuador d
   b9c28:	7465 6365 6174 6f64 5300 2065 7365 6570     etectado.Se espe
   b9c38:	6172 6162 5420 4548 204e 6174 0067 6e49     raba THEN tag.In
   b9c48:	6176 696c 2064 6341 7574 6461 726f 4900     valid Actuador.I
   b9c58:	2046 6564 6574 7463 6461 006f 754e 656d     F detectado.Nume
   b9c68:	6f72 6420 2065 6c62 716f 6575 2073 203e     ro de bloques > 
   b9c78:	2032 7c7c 5320 2065 656e 6563 6973 6174     2 || Se necesita
   b9c88:	6120 206c 656d 6f6e 2073 6e75 6120 7463      al menos un act
   b9c98:	6175 6f64 2072 6170 6172 7420 7265 696d     uador para termi
   b9ca8:	616e 2072 6c65 6220 6f6c 7571 0065 4e41     nar el bloque.AN
   b9cb8:	2f44 524f 6420 7465 6365 6174 6f64 5500     D/OR detectado.U
   b9cc8:	616e 6320 6e6f 6963 6963 6e6f 7320 6c6f     na concicion sol
   b9cd8:	206f 7570 6465 2065 7269 7320 6765 6975     o puede ir segui
   b9ce8:	6164 6420 2065 6e75 7320 6e65 6f73 2e72     da de un sensor.
   b9cf8:	5400 4548 204e 6564 6574 7463 6461 006f     .THEN detectado.
   b9d08:	754e 656d 6f72 6420 2065 6573 736e 726f     Numero de sensor
   b9d18:	7365 6920 666e 6375 6569 746e 7365 4500     es infucientes.E
   b9d28:	534c 2045 6564 6574 7463 6461 006f 4449     LSE detectado.ID
   b9d38:	5420 6761 6920 636e 726f 6572 7463 0061      Tag incorrecta.
   b9d48:	6946 206e 6154 0067 2023 6c42 716f 6575     Fin Tag.# Bloque
   b9d58:	7c20 2320 5320 6e65 6f73 6572 2073 207c      | # Sensores | 
   b9d68:	2023 6f43 646e 6369 6f69 656e 2073 207c     # Condiciones | 
   b9d78:	2023 6341 7574 6461 726f 7365 2000 2020     # Actuadores.   
   b9d88:	2520 2064 7c09 2009 6425 0920 097c 2520      %d .|. %d .|. %
   b9d98:	2064 7c09 2009 6425 0920 097c 2520 0064     d .|. %d .|. %d.
   b9da8:	002d 6564 6166 6c75 2074 4d00 4253 4c00     -.default .MSB.L
   b9db8:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   b9dc8:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   b9dd8:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   b9de8:	4544 7525 003e                              DE%u>.

000b9dee <_ZL4font>:
   b9dee:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b9dfe:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b9e0e:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b9e1e:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b9e2e:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b9e3e:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b9e4e:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b9e5e:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b9e6e:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b9e7e:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b9e8e:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b9e9e:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b9eae:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b9ebe:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b9ece:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b9ede:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b9eee:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b9efe:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b9f0e:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b9f1e:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b9f2e:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b9f3e:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b9f4e:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9f5e:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9f6e:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9f7e:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9f8e:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9f9e:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9fae:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9fbe:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b9fce:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b9fde:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b9fee:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b9ffe:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba00e:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba01e:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba02e:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba03e:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba04e:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba05e:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba06e:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba07e:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba08e:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba09e:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba0ae:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba0be:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba0ce:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba0de:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba0ee:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba0fe:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba10e:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba11e:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba12e:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba13e:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba14e:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba15e:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba16e:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba17e:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba18e:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba19e:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba1ae:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba1be:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba1ce:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba1de:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba1ee:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba1fe:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba20e:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba21e:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba22e:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba23e:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba24e:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba25e:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba26e:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba27e:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba28e:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba29e:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba2ae:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba2be:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba2ce:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba2de:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000ba2f0 <_ZTV12Adafruit_GFX>:
	...
   ba300:	5f85 000b 8165 000b 40a1 000b 598b 000b     ._..e....@...Y..
   ba310:	598d 000b 59bf 000b 599b 000b 59ad 000b     .Y...Y...Y...Y..
   ba320:	58cd 000b 598b 000b 5bb7 000b 5bb5 000b     .X...Y...[...[..
   ba330:	59d7 000b 5a15 000b 5a4f 000b 5a95 000b     .Y...Z..OZ...Z..
   ba340:	5ab1 000b 5b35 000b 6e55 6e6b 776f 206e     .Z..5[..Unknown 
   ba350:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   ba360:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   ba370:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   ba380:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   ba390:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   ba3a0:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   ba3b0:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   ba3c0:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   ba3d0:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   ba3e0:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   ba3f0:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   ba400:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   ba410:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   ba420:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   ba430:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000ba440 <CSWTCH.84>:
   ba440:	a356 000b a35f 000b a377 000b a38c 000b     V..._...w.......
   ba450:	a3a6 000b a3c2 000b a3f1 000b a403 000b     ................
   ba460:	a41d 000b                                   ....

000ba464 <_ZTVN8particle11SPISettingsE>:
	...
   ba46c:	5879 000b 5869 000b 586b 000b               yX..iX..kX..

000ba478 <_ZL12splash2_data>:
   ba478:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   ba488:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ba498:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ba4b4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ba4c4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ba4d4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ba4e4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ba4f4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   ba504:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   ba514:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   ba524:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   ba534:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   ba544:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   ba554:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   ba564:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ba574:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ba584:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ba594:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ba5a4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ba5b4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ba5c4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ba5d4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ba5e4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ba5f4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ba60c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ba61c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ba62c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ba63c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ba64c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ba658 <_ZL17sucreLogoNew_data>:
   ba658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba678:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   ba688:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   ba698:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba6a8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   ba6b8:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba6c8:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   ba6d8:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   ba6e8:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   ba6f8:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   ba708:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   ba718:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   ba728:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   ba738:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   ba748:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   ba758:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   ba768:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba778:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   ba788:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   ba798:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   ba7a8:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   ba7b8:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   ba7c8:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   ba7d8:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   ba7e8:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   ba7f8:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   ba808:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   ba818:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   ba828:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   ba838:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   ba848:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   ba858:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   ba868:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   ba878:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   ba888:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   ba898:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   ba8a8:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   ba8b8:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   ba8c8:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   ba8d8:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   ba8e8:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   ba8f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba908:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba918:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba928:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba938:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba948:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba958:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   ba968:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   ba978:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   ba988:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   ba998:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   ba9a8:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   ba9b8:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   ba9c8:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   ba9d8:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   ba9e8:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   ba9f8:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   baa08:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   baa18:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   baa28:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   baa38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000baa58 <_ZTV16Adafruit_SSD1306>:
	...
   baa60:	6b39 000b 6b51 000b 5f85 000b 8165 000b     9k..Qk..._..e...
   baa70:	6b65 000b 598b 000b 598d 000b 59bf 000b     ek...Y...Y...Y..
   baa80:	599b 000b 59ad 000b 58cd 000b 598b 000b     .Y...Y...X...Y..
   baa90:	5bb7 000b 6cf7 000b 7293 000b 7245 000b     .[...l...r..Er..
   baaa0:	5a4f 000b 5a95 000b 5ab1 000b 5b35 000b     OZ...Z...Z..5[..

000baab0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   baab0:	8000 e0c0 f8f0 fefc                         ........

000baab8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   baab8:	0100 0703 1f0f 7f3f                         ......?.

000baac0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baac0:	d5ae a880                                   ....

000baac4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baac4:	00d3 8d40                                   ..@.

000baac8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baac8:	0020 c8a1                                    ...

000baacc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   baacc:	40db a6a4 af2e                              .@....

000baad2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   baad2:	02da 8f81                                   ....

000baad6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   baad6:	12da                                         ...

000baad9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   baad9:	02da                                         ...

000baadc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   baadc:	0022 21ff 0000 0000                         "..!....

000baae4 <_ZTVN5spark13EthernetClassE>:
	...
   baaec:	7d6b 000b 7d61 000b 7d57 000b 7d4d 000b     k}..a}..W}..M}..
   baafc:	7d41 000b 7d35 000b 883d 000b 8845 000b     A}..5}..=...E...
   bab0c:	7d29 000b 7d21 000b 7d17 000b 7d0d 000b     )}..!}...}...}..
   bab1c:	8875 000b                                   u...

000bab20 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bab20:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bab30:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bab40:	7361 7463 6d69 0065                         asctime.

000bab48 <_ZTV9IPAddress>:
	...
   bab50:	8441 000b 8431 000b 8433 000b               A...1...3...

000bab5c <_ZTV9USBSerial>:
	...
   bab64:	8527 000b 858f 000b 8565 000b 8165 000b     '.......e...e...
   bab74:	8557 000b 8529 000b 8539 000b 8589 000b     W...)...9.......
   bab84:	8549 000b 8521 000b                         I...!...

000bab8c <_ZTV11USARTSerial>:
	...
   bab94:	8631 000b 869d 000b 8675 000b 8165 000b     1.......u...e...
   baba4:	8645 000b 8661 000b 8653 000b 866f 000b     E...a...S...o...
   babb4:	8633 000b 8637 000b                         3...7...

000babbc <_ZTV7TwoWire>:
	...
   babc4:	86d5 000b 871f 000b 86f7 000b 86d7 000b     ................
   babd4:	86ff 000b 8707 000b 870f 000b 8717 000b     ................

000babe4 <_ZTVN5spark9WiFiClassE>:
	...
   babec:	87df 000b 87d5 000b 87cb 000b 8781 000b     ................
   babfc:	87bf 000b 87b3 000b 883d 000b 8845 000b     ........=...E...
   bac0c:	87a7 000b 879f 000b 8795 000b 878b 000b     ................
   bac1c:	8875 000b                                   u...

000bac20 <_ZTVN5spark12NetworkClassE>:
	...
   bac28:	87fd 000b 8807 000b 8811 000b 881b 000b     ................
   bac38:	8825 000b 8831 000b 883d 000b 8845 000b     %...1...=...E...
   bac48:	884d 000b 8859 000b 8861 000b 886b 000b     M...Y...a...k...
   bac58:	8875 000b                                   u...

000bac5c <_ZSt7nothrow>:
   bac5c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bac6c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bac7c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bac8c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bac9c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bacac:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bacbc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   baccc:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bacdc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bacec:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bacfc:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bad0c:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bad1c:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bad2c:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bad3c:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bad4c:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bad5c:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bad6c:	2e6b 0063                                   k.c.

000bad70 <link_const_variable_data_end>:
   bad70:	000b57ed 	.word	0x000b57ed
   bad74:	000b7d75 	.word	0x000b7d75
   bad78:	000b7eed 	.word	0x000b7eed
   bad7c:	000b8155 	.word	0x000b8155
   bad80:	000b828d 	.word	0x000b828d
   bad84:	000b829d 	.word	0x000b829d
   bad88:	000b82b9 	.word	0x000b82b9
   bad8c:	000b87e9 	.word	0x000b87e9
   bad90:	000b894d 	.word	0x000b894d

000bad94 <link_constructors_end>:
	...
