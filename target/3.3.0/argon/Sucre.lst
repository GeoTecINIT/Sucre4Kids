
c:/Users/diego/Documents/VisualStudio/Sucre/target/3.3.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000087c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc7e0  000bc7e0  0000c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc804  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b8  2003cc7c  000bc808  0001cc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001abc  2003cd34  2003cd34  0002cd34  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bc8c0  000bc8c0  0002c8c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bc8e8  000bc8e8  0002c8e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016641b  00000000  00000000  0002c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001903d  00000000  00000000  00192d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000504e5  00000000  00000000  001abd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003728  00000000  00000000  001fc229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bed0  00000000  00000000  001ff951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce0  00000000  00000000  0020b821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059be1  00000000  00000000  00250501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c3fd  00000000  00000000  002aa0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a784  00000000  00000000  003e64e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fb6d 	bl	ba710 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fb75 	bl	ba72c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003cc7c 	.word	0x2003cc7c
   b404c:	000bc808 	.word	0x000bc808
   b4050:	2003cd34 	.word	0x2003cd34
   b4054:	2003cd34 	.word	0x2003cd34
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fa0d 	bl	b9480 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bc7b4 	.word	0x000bc7b4
   b4080:	000bc7d8 	.word	0x000bc7d8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b9a0 	b.w	b53c8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fa4b 	bl	b5524 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 b9ad 	b.w	b93f0 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f004 bd89 	b.w	b8bac <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f004 bd8f 	b.w	b8bbc <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f004 fce4 	bl	b8a74 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b87c5 	.word	0x000b87c5
   b40b4:	000ba970 	.word	0x000ba970

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b40c8:	4a08      	ldr	r2, [pc, #32]	; (b40ec <_Z10borradoALLi.part.0+0x24>)
   b40ca:	2300      	movs	r3, #0
   b40cc:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b40ce:	4a08      	ldr	r2, [pc, #32]	; (b40f0 <_Z10borradoALLi.part.0+0x28>)
   b40d0:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b40d2:	4a08      	ldr	r2, [pc, #32]	; (b40f4 <_Z10borradoALLi.part.0+0x2c>)
   b40d4:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b40d6:	4a08      	ldr	r2, [pc, #32]	; (b40f8 <_Z10borradoALLi.part.0+0x30>)
   b40d8:	f04f 31ff 	mov.w	r1, #4294967295
   b40dc:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b40de:	4a07      	ldr	r2, [pc, #28]	; (b40fc <_Z10borradoALLi.part.0+0x34>)
   b40e0:	2103      	movs	r1, #3
   b40e2:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b40e4:	4a06      	ldr	r2, [pc, #24]	; (b4100 <_Z10borradoALLi.part.0+0x38>)
   b40e6:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b40e8:	4770      	bx	lr
   b40ea:	bf00      	nop
   b40ec:	2003cd41 	.word	0x2003cd41
   b40f0:	2003cd50 	.word	0x2003cd50
   b40f4:	2003cd40 	.word	0x2003cd40
   b40f8:	2003cca4 	.word	0x2003cca4
   b40fc:	2003cca8 	.word	0x2003cca8
   b4100:	2003da68 	.word	0x2003da68

000b4104 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4104:	b40e      	push	{r1, r2, r3}
   b4106:	b503      	push	{r0, r1, lr}
   b4108:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b410a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4110:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4112:	f005 f8fd 	bl	b9310 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4116:	b002      	add	sp, #8
   b4118:	f85d eb04 	ldr.w	lr, [sp], #4
   b411c:	b003      	add	sp, #12
   b411e:	4770      	bx	lr

000b4120 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4120:	b40e      	push	{r1, r2, r3}
   b4122:	b503      	push	{r0, r1, lr}
   b4124:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4126:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4128:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b412c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b412e:	f005 f8ef 	bl	b9310 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4132:	b002      	add	sp, #8
   b4134:	f85d eb04 	ldr.w	lr, [sp], #4
   b4138:	b003      	add	sp, #12
   b413a:	4770      	bx	lr

000b413c <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b413c:	b507      	push	{r0, r1, r2, lr}
   b413e:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4140:	a801      	add	r0, sp, #4
   b4142:	f003 fcb9 	bl	b7ab8 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4146:	a801      	add	r0, sp, #4
   b4148:	f003 fcb8 	bl	b7abc <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b414c:	2809      	cmp	r0, #9
   b414e:	bf8c      	ite	hi
   b4150:	2000      	movhi	r0, #0
   b4152:	2001      	movls	r0, #1
   b4154:	b003      	add	sp, #12
   b4156:	f85d fb04 	ldr.w	pc, [sp], #4

000b415a <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b415a:	b507      	push	{r0, r1, r2, lr}
   b415c:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b415e:	a801      	add	r0, sp, #4
   b4160:	f003 fcaa 	bl	b7ab8 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4164:	a801      	add	r0, sp, #4
   b4166:	f003 fca9 	bl	b7abc <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b416a:	280a      	cmp	r0, #10
   b416c:	bfd4      	ite	le
   b416e:	2000      	movle	r0, #0
   b4170:	2001      	movgt	r0, #1
   b4172:	b003      	add	sp, #12
   b4174:	f85d fb04 	ldr.w	pc, [sp], #4

000b4178 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4178:	2802      	cmp	r0, #2
{
   b417a:	b508      	push	{r3, lr}
    switch (puerto)
   b417c:	d00b      	beq.n	b4196 <_Z5siLuzi+0x1e>
   b417e:	2804      	cmp	r0, #4
   b4180:	d00b      	beq.n	b419a <_Z5siLuzi+0x22>
   b4182:	b960      	cbnz	r0, b419e <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4184:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4186:	f005 fd04 	bl	b9b92 <analogRead>
   b418a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b418e:	bfb4      	ite	lt
   b4190:	2000      	movlt	r0, #0
   b4192:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4194:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4196:	2011      	movs	r0, #17
   b4198:	e7f5      	b.n	b4186 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b419a:	200f      	movs	r0, #15
   b419c:	e7f3      	b.n	b4186 <_Z5siLuzi+0xe>
    switch (puerto)
   b419e:	2000      	movs	r0, #0
   b41a0:	e7f8      	b.n	b4194 <_Z5siLuzi+0x1c>

000b41a2 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b41a2:	2802      	cmp	r0, #2
{
   b41a4:	b508      	push	{r3, lr}
    switch (puerto)
   b41a6:	d00b      	beq.n	b41c0 <_Z5noLuzi+0x1e>
   b41a8:	2804      	cmp	r0, #4
   b41aa:	d00b      	beq.n	b41c4 <_Z5noLuzi+0x22>
   b41ac:	b960      	cbnz	r0, b41c8 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b41ae:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b41b0:	f005 fcef 	bl	b9b92 <analogRead>
   b41b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b41b8:	bfcc      	ite	gt
   b41ba:	2000      	movgt	r0, #0
   b41bc:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b41be:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b41c0:	2011      	movs	r0, #17
   b41c2:	e7f5      	b.n	b41b0 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b41c4:	200f      	movs	r0, #15
   b41c6:	e7f3      	b.n	b41b0 <_Z5noLuzi+0xe>
    switch (puerto)
   b41c8:	2000      	movs	r0, #0
   b41ca:	e7f8      	b.n	b41be <_Z5noLuzi+0x1c>

000b41cc <_Z7siRuidoi>:
    return false;
}*/


bool siRuido(int puerto)
{
   b41cc:	b570      	push	{r4, r5, r6, lr}
   b41ce:	2520      	movs	r5, #32
    int soundValue = 0; //create variable to store many different readings
   b41d0:	2400      	movs	r4, #0
    for (int i = 0; i < 32; i++) //create a for loop to read 
    { soundValue += analogRead(puerto);  } //read the sound sensor
   b41d2:	b286      	uxth	r6, r0
   b41d4:	4630      	mov	r0, r6
   b41d6:	f005 fcdc 	bl	b9b92 <analogRead>
    for (int i = 0; i < 32; i++) //create a for loop to read 
   b41da:	3d01      	subs	r5, #1
    { soundValue += analogRead(puerto);  } //read the sound sensor
   b41dc:	4404      	add	r4, r0
    for (int i = 0; i < 32; i++) //create a for loop to read 
   b41de:	d1f9      	bne.n	b41d4 <_Z7siRuidoi+0x8>
 
    soundValue >>= 5; //bitshift operation 
    Serial.println(soundValue);
   b41e0:	f005 fa70 	bl	b96c4 <_Z16_fetch_usbserialv>
    soundValue >>= 5; //bitshift operation 
   b41e4:	1164      	asrs	r4, r4, #5
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41e6:	2c00      	cmp	r4, #0
    Serial.println(soundValue);
   b41e8:	4605      	mov	r5, r0
   b41ea:	da10      	bge.n	b420e <_Z7siRuidoi+0x42>
            t = print('-');
   b41ec:	212d      	movs	r1, #45	; 0x2d
   b41ee:	f004 ff75 	bl	b90dc <_ZN5Print5printEc>
            val = -n;
   b41f2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41f4:	220a      	movs	r2, #10
   b41f6:	4628      	mov	r0, r5
   b41f8:	f004 ff89 	bl	b910e <_ZN5Print11printNumberEmh>
        n += println();
   b41fc:	4628      	mov	r0, r5
   b41fe:	f004 ff70 	bl	b90e2 <_ZN5Print7printlnEv>
    
    if (soundValue > 500)
        return true;
    return false;
}
   b4202:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   b4206:	bfd4      	ite	le
   b4208:	2000      	movle	r0, #0
   b420a:	2001      	movgt	r0, #1
   b420c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   b420e:	4621      	mov	r1, r4
   b4210:	e7f0      	b.n	b41f4 <_Z7siRuidoi+0x28>

000b4212 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4212:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4214:	b280      	uxth	r0, r0
   b4216:	f005 fcbc 	bl	b9b92 <analogRead>
        return true;
    return false;
}
   b421a:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b421e:	bfcc      	ite	gt
   b4220:	2000      	movgt	r0, #0
   b4222:	2001      	movle	r0, #1
   b4224:	bd08      	pop	{r3, pc}

000b4226 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4226:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4228:	b280      	uxth	r0, r0
   b422a:	2100      	movs	r1, #0
   b422c:	9001      	str	r0, [sp, #4]
   b422e:	f005 fc73 	bl	b9b18 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4232:	9801      	ldr	r0, [sp, #4]
   b4234:	f005 fc9a 	bl	b9b6c <digitalRead>
        return true;
    return false;
}
   b4238:	1e43      	subs	r3, r0, #1
   b423a:	4258      	negs	r0, r3
   b423c:	4158      	adcs	r0, r3
   b423e:	b003      	add	sp, #12
   b4240:	f85d fb04 	ldr.w	pc, [sp], #4

000b4244 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4244:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4246:	b280      	uxth	r0, r0
   b4248:	2100      	movs	r1, #0
   b424a:	9001      	str	r0, [sp, #4]
   b424c:	f005 fc64 	bl	b9b18 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4250:	9801      	ldr	r0, [sp, #4]
   b4252:	f005 fc8b 	bl	b9b6c <digitalRead>
        return true;
    return false;
}
   b4256:	fab0 f080 	clz	r0, r0
   b425a:	0940      	lsrs	r0, r0, #5
   b425c:	b003      	add	sp, #12
   b425e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4262:	0000      	movs	r0, r0
   b4264:	0000      	movs	r0, r0
	...

000b4268 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4268:	2802      	cmp	r0, #2
{
   b426a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b426c:	d030      	beq.n	b42d0 <_Z10siRotativoi+0x68>
   b426e:	2804      	cmp	r0, #4
   b4270:	d030      	beq.n	b42d4 <_Z10siRotativoi+0x6c>
   b4272:	b918      	cbnz	r0, b427c <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4274:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4276:	f005 fc8c 	bl	b9b92 <analogRead>
   b427a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b427c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4284:	ee17 0a90 	vmov	r0, s15
   b4288:	f005 fe94 	bl	b9fb4 <__aeabi_f2d>
   b428c:	a314      	add	r3, pc, #80	; (adr r3, b42e0 <_Z10siRotativoi+0x78>)
   b428e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4292:	f005 fee7 	bl	ba064 <__aeabi_dmul>
   b4296:	a314      	add	r3, pc, #80	; (adr r3, b42e8 <_Z10siRotativoi+0x80>)
   b4298:	e9d3 2300 	ldrd	r2, r3, [r3]
   b429c:	f006 f80c 	bl	ba2b8 <__aeabi_ddiv>
   b42a0:	f006 f9d8 	bl	ba654 <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b42a4:	eddf 7a0c 	vldr	s15, [pc, #48]	; b42d8 <_Z10siRotativoi+0x70>
   b42a8:	ee07 0a10 	vmov	s14, r0
   b42ac:	ee67 7a27 	vmul.f32	s15, s14, s15
   b42b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b42b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b42b8:	eddf 7a08 	vldr	s15, [pc, #32]	; b42dc <_Z10siRotativoi+0x74>
   b42bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b42c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b42c4:	bf94      	ite	ls
   b42c6:	2001      	movls	r0, #1
   b42c8:	2000      	movhi	r0, #0
   b42ca:	b003      	add	sp, #12
   b42cc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b42d0:	2011      	movs	r0, #17
   b42d2:	e7d0      	b.n	b4276 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b42d4:	200f      	movs	r0, #15
   b42d6:	e7ce      	b.n	b4276 <_Z10siRotativoi+0xe>
   b42d8:	43960000 	.word	0x43960000
   b42dc:	43b40000 	.word	0x43b40000
   b42e0:	66666666 	.word	0x66666666
   b42e4:	400a6666 	.word	0x400a6666
   b42e8:	00000000 	.word	0x00000000
   b42ec:	408ff800 	.word	0x408ff800

000b42f0 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b42f0:	2802      	cmp	r0, #2
{
   b42f2:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b42f4:	d030      	beq.n	b4358 <_Z10noRotativoi+0x68>
   b42f6:	2804      	cmp	r0, #4
   b42f8:	d030      	beq.n	b435c <_Z10noRotativoi+0x6c>
   b42fa:	b918      	cbnz	r0, b4304 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b42fc:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b42fe:	f005 fc48 	bl	b9b92 <analogRead>
   b4302:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4304:	eddd 7a01 	vldr	s15, [sp, #4]
   b4308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b430c:	ee17 0a90 	vmov	r0, s15
   b4310:	f005 fe50 	bl	b9fb4 <__aeabi_f2d>
   b4314:	a314      	add	r3, pc, #80	; (adr r3, b4368 <_Z10noRotativoi+0x78>)
   b4316:	e9d3 2300 	ldrd	r2, r3, [r3]
   b431a:	f005 fea3 	bl	ba064 <__aeabi_dmul>
   b431e:	a314      	add	r3, pc, #80	; (adr r3, b4370 <_Z10noRotativoi+0x80>)
   b4320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4324:	f005 ffc8 	bl	ba2b8 <__aeabi_ddiv>
   b4328:	f006 f994 	bl	ba654 <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b432c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4360 <_Z10noRotativoi+0x70>
   b4330:	ee07 0a10 	vmov	s14, r0
   b4334:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4338:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b433c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4340:	eddf 7a08 	vldr	s15, [pc, #32]	; b4364 <_Z10noRotativoi+0x74>
   b4344:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b434c:	bfac      	ite	ge
   b434e:	2001      	movge	r0, #1
   b4350:	2000      	movlt	r0, #0
   b4352:	b003      	add	sp, #12
   b4354:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4358:	2011      	movs	r0, #17
   b435a:	e7d0      	b.n	b42fe <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b435c:	200f      	movs	r0, #15
   b435e:	e7ce      	b.n	b42fe <_Z10noRotativoi+0xe>
   b4360:	43960000 	.word	0x43960000
   b4364:	43b40000 	.word	0x43b40000
   b4368:	66666666 	.word	0x66666666
   b436c:	400a6666 	.word	0x400a6666
   b4370:	00000000 	.word	0x00000000
   b4374:	408ff800 	.word	0x408ff800

000b4378 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4378:	b500      	push	{lr}
   b437a:	ed2d 8b02 	vpush	{d8}
   b437e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4380:	b2c1      	uxtb	r1, r0
   b4382:	2306      	movs	r3, #6
   b4384:	220b      	movs	r2, #11
   b4386:	a801      	add	r0, sp, #4
   b4388:	f003 fbbc 	bl	b7b04 <_ZN3DHTC1Ehhh>
    dht.begin();
   b438c:	a801      	add	r0, sp, #4
   b438e:	f003 fbc0 	bl	b7b12 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4392:	a801      	add	r0, sp, #4
   b4394:	f003 fc7a 	bl	b7c8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4398:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b43a0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b43a4:	d0f5      	beq.n	b4392 <_Z8tempFrioi+0x1a>
   b43a6:	eeb4 0a40 	vcmp.f32	s0, s0
   b43aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43ae:	d6f0      	bvs.n	b4392 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.println(t, 1);
   b43b0:	f005 f988 	bl	b96c4 <_Z16_fetch_usbserialv>
   b43b4:	2101      	movs	r1, #1
   b43b6:	eeb0 0a48 	vmov.f32	s0, s16
   b43ba:	f004 ff9a 	bl	b92f2 <_ZN5Print7printlnEfi>
    if (t <= 16)
   b43be:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   b43c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b43c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    else
        return false;
}
   b43ca:	bf94      	ite	ls
   b43cc:	2001      	movls	r0, #1
   b43ce:	2000      	movhi	r0, #0
   b43d0:	b007      	add	sp, #28
   b43d2:	ecbd 8b02 	vpop	{d8}
   b43d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b43da <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b43da:	b500      	push	{lr}
   b43dc:	ed2d 8b02 	vpush	{d8}
   b43e0:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b43e2:	b2c1      	uxtb	r1, r0
   b43e4:	2306      	movs	r3, #6
   b43e6:	220b      	movs	r2, #11
   b43e8:	a801      	add	r0, sp, #4
   b43ea:	f003 fb8b 	bl	b7b04 <_ZN3DHTC1Ehhh>
    dht.begin();
   b43ee:	a801      	add	r0, sp, #4
   b43f0:	f003 fb8f 	bl	b7b12 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b43f4:	a801      	add	r0, sp, #4
   b43f6:	f003 fc49 	bl	b7c8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b43fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b43fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4402:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4406:	d0f5      	beq.n	b43f4 <_Z9tempCalori+0x1a>
   b4408:	eeb4 0a40 	vcmp.f32	s0, s0
   b440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4410:	d6f0      	bvs.n	b43f4 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.println(t, 1);
   b4412:	f005 f957 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4416:	2101      	movs	r1, #1
   b4418:	eeb0 0a48 	vmov.f32	s0, s16
   b441c:	f004 ff69 	bl	b92f2 <_ZN5Print7printlnEfi>
    if (t > 16)
   b4420:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   b4424:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    else
        return false;
}
   b442c:	bfcc      	ite	gt
   b442e:	2001      	movgt	r0, #1
   b4430:	2000      	movle	r0, #0
   b4432:	b007      	add	sp, #28
   b4434:	ecbd 8b02 	vpop	{d8}
   b4438:	f85d fb04 	ldr.w	pc, [sp], #4

000b443c <_Z10leerSensoriii>:
        return false;
}
*/

bool leerSensor(int id, int condicion, int puerto)
{
   b443c:	b508      	push	{r3, lr}
   b443e:	4603      	mov	r3, r0
   b4440:	3b01      	subs	r3, #1
   b4442:	4610      	mov	r0, r2
   b4444:	2b06      	cmp	r3, #6
   b4446:	d83b      	bhi.n	b44c0 <_Z10leerSensoriii+0x84>
   b4448:	e8df f003 	tbb	[pc, r3]
   b444c:	1f160d04 	.word	0x1f160d04
   b4450:	3128      	.short	0x3128
   b4452:	04          	.byte	0x04
   b4453:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4454:	b919      	cbnz	r1, b445e <_Z10leerSensoriii+0x22>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b445a:	f7ff be6f 	b.w	b413c <_Z11noDistanciai>
   b445e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4462:	f7ff be7a 	b.w	b415a <_Z11siDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4466:	b919      	cbnz	r1, b4470 <_Z10leerSensoriii+0x34>
   b4468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b446c:	f7ff be99 	b.w	b41a2 <_Z5noLuzi>
   b4470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4474:	f7ff be80 	b.w	b4178 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4478:	b919      	cbnz	r1, b4482 <_Z10leerSensoriii+0x46>
   b447a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b447e:	f7ff bec8 	b.w	b4212 <_Z7noRuidoi>
   b4482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4486:	f7ff bea1 	b.w	b41cc <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b448a:	b919      	cbnz	r1, b4494 <_Z10leerSensoriii+0x58>
   b448c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4490:	f7ff bed8 	b.w	b4244 <_Z7noBotoni>
   b4494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4498:	f7ff bec5 	b.w	b4226 <_Z7siBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b449c:	b919      	cbnz	r1, b44a6 <_Z10leerSensoriii+0x6a>
   b449e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b44a2:	f7ff bf25 	b.w	b42f0 <_Z10noRotativoi>
   b44a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b44aa:	f7ff bedd 	b.w	b4268 <_Z10siRotativoi>
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44ae:	b919      	cbnz	r1, b44b8 <_Z10leerSensoriii+0x7c>
   b44b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44b4:	f7ff bf60 	b.w	b4378 <_Z8tempFrioi>
   b44b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? tempFrio(puerto) : tempCalor(puerto));
   b44bc:	f7ff bf8d 	b.w	b43da <_Z9tempCalori>
        Serial.println("InvalidSensorError");
   b44c0:	f005 f900 	bl	b96c4 <_Z16_fetch_usbserialv>
   b44c4:	4902      	ldr	r1, [pc, #8]	; (b44d0 <_Z10leerSensoriii+0x94>)
   b44c6:	f004 fe18 	bl	b90fa <_ZN5Print7printlnEPKc>
   b44ca:	2000      	movs	r0, #0
   b44cc:	bd08      	pop	{r3, pc}
   b44ce:	bf00      	nop
   b44d0:	000ba985 	.word	0x000ba985

000b44d4 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b44d4:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b44d6:	2300      	movs	r3, #0
   b44d8:	4804      	ldr	r0, [pc, #16]	; (b44ec <_Z9ledApagarv+0x18>)
   b44da:	9300      	str	r3, [sp, #0]
   b44dc:	461a      	mov	r2, r3
   b44de:	4619      	mov	r1, r3
   b44e0:	f004 f8ae 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44e4:	b003      	add	sp, #12
   b44e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b44ea:	bf00      	nop
   b44ec:	2003d718 	.word	0x2003d718

000b44f0 <_Z7ledRojov>:
void ledRojo()
{
   b44f0:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b44f2:	2300      	movs	r3, #0
   b44f4:	4804      	ldr	r0, [pc, #16]	; (b4508 <_Z7ledRojov+0x18>)
   b44f6:	9300      	str	r3, [sp, #0]
   b44f8:	22ff      	movs	r2, #255	; 0xff
   b44fa:	4619      	mov	r1, r3
   b44fc:	f004 f8a0 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4500:	b003      	add	sp, #12
   b4502:	f85d fb04 	ldr.w	pc, [sp], #4
   b4506:	bf00      	nop
   b4508:	2003d718 	.word	0x2003d718

000b450c <_Z8ledVerdev>:
void ledVerde()
{
   b450c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b450e:	230a      	movs	r3, #10
   b4510:	2200      	movs	r2, #0
   b4512:	9300      	str	r3, [sp, #0]
   b4514:	4803      	ldr	r0, [pc, #12]	; (b4524 <_Z8ledVerdev+0x18>)
   b4516:	23ff      	movs	r3, #255	; 0xff
   b4518:	4611      	mov	r1, r2
   b451a:	f004 f891 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b451e:	b003      	add	sp, #12
   b4520:	f85d fb04 	ldr.w	pc, [sp], #4
   b4524:	2003d718 	.word	0x2003d718

000b4528 <_Z7ledAzulv>:
void ledAzul()
{
   b4528:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b452a:	23ff      	movs	r3, #255	; 0xff
   b452c:	9300      	str	r3, [sp, #0]
   b452e:	2300      	movs	r3, #0
   b4530:	4803      	ldr	r0, [pc, #12]	; (b4540 <_Z7ledAzulv+0x18>)
   b4532:	461a      	mov	r2, r3
   b4534:	4619      	mov	r1, r3
   b4536:	f004 f883 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b453a:	b003      	add	sp, #12
   b453c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4540:	2003d718 	.word	0x2003d718

000b4544 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4544:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b4546:	2100      	movs	r1, #0
   b4548:	4804      	ldr	r0, [pc, #16]	; (b455c <_Z11ledAmarillov+0x18>)
   b454a:	9100      	str	r1, [sp, #0]
   b454c:	23e9      	movs	r3, #233	; 0xe9
   b454e:	22ff      	movs	r2, #255	; 0xff
   b4550:	f004 f876 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4554:	b003      	add	sp, #12
   b4556:	f85d fb04 	ldr.w	pc, [sp], #4
   b455a:	bf00      	nop
   b455c:	2003d718 	.word	0x2003d718

000b4560 <_Z9ledMoradov>:
void ledMorado()
{
   b4560:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4562:	2375      	movs	r3, #117	; 0x75
   b4564:	9300      	str	r3, [sp, #0]
   b4566:	4804      	ldr	r0, [pc, #16]	; (b4578 <_Z9ledMoradov+0x18>)
   b4568:	2346      	movs	r3, #70	; 0x46
   b456a:	226c      	movs	r2, #108	; 0x6c
   b456c:	2100      	movs	r1, #0
   b456e:	f004 f867 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4572:	b003      	add	sp, #12
   b4574:	f85d fb04 	ldr.w	pc, [sp], #4
   b4578:	2003d718 	.word	0x2003d718

000b457c <_Z10ledNaranjav>:
void ledNaranja()
{
   b457c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b457e:	2100      	movs	r1, #0
   b4580:	4804      	ldr	r0, [pc, #16]	; (b4594 <_Z10ledNaranjav+0x18>)
   b4582:	9100      	str	r1, [sp, #0]
   b4584:	2380      	movs	r3, #128	; 0x80
   b4586:	22ff      	movs	r2, #255	; 0xff
   b4588:	f004 f85a 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b458c:	b003      	add	sp, #12
   b458e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4592:	bf00      	nop
   b4594:	2003d718 	.word	0x2003d718

000b4598 <_Z9ledBlancov>:
void ledBlanco()
{
   b4598:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b459a:	23ff      	movs	r3, #255	; 0xff
   b459c:	4804      	ldr	r0, [pc, #16]	; (b45b0 <_Z9ledBlancov+0x18>)
   b459e:	9300      	str	r3, [sp, #0]
   b45a0:	461a      	mov	r2, r3
   b45a2:	2100      	movs	r1, #0
   b45a4:	f004 f84c 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45a8:	b003      	add	sp, #12
   b45aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b45ae:	bf00      	nop
   b45b0:	2003d718 	.word	0x2003d718

000b45b4 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b45b4:	b510      	push	{r4, lr}
   switch (counter)
   b45b6:	4c11      	ldr	r4, [pc, #68]	; (b45fc <_Z11ledArcoirisv+0x48>)
   b45b8:	6823      	ldr	r3, [r4, #0]
   b45ba:	2b05      	cmp	r3, #5
   b45bc:	d809      	bhi.n	b45d2 <_Z11ledArcoirisv+0x1e>
   b45be:	e8df f003 	tbb	[pc, r3]
   b45c2:	0d03      	.short	0x0d03
   b45c4:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b45c8:	f7ff ff92 	bl	b44f0 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b45cc:	6823      	ldr	r3, [r4, #0]
   b45ce:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b45d0:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b45d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b45d6:	2096      	movs	r0, #150	; 0x96
   b45d8:	f004 bede 	b.w	b9398 <delay>
      ledNaranja();
   b45dc:	f7ff ffce 	bl	b457c <_Z10ledNaranjav>
      counter++;
   b45e0:	e7f4      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b45e2:	f7ff ffaf 	bl	b4544 <_Z11ledAmarillov>
      counter++;
   b45e6:	e7f1      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledVerde();
   b45e8:	f7ff ff90 	bl	b450c <_Z8ledVerdev>
      counter++;
   b45ec:	e7ee      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledMorado();
   b45ee:	f7ff ffb7 	bl	b4560 <_Z9ledMoradov>
   b45f2:	e7eb      	b.n	b45cc <_Z11ledArcoirisv+0x18>
      ledAzul();
   b45f4:	f7ff ff98 	bl	b4528 <_Z7ledAzulv>
      counter = 0;
   b45f8:	2300      	movs	r3, #0
   b45fa:	e7e9      	b.n	b45d0 <_Z11ledArcoirisv+0x1c>
   b45fc:	2003d370 	.word	0x2003d370

000b4600 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b4600:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b4602:	2101      	movs	r1, #1
   b4604:	2006      	movs	r0, #6
   b4606:	f005 fa98 	bl	b9b3a <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b460a:	2101      	movs	r1, #1
   b460c:	2006      	movs	r0, #6
   b460e:	f005 fa94 	bl	b9b3a <digitalWrite>
   digitalWrite(D7, HIGH);
   b4612:	2101      	movs	r1, #1
   b4614:	2007      	movs	r0, #7
   b4616:	f005 fa90 	bl	b9b3a <digitalWrite>
   digitalWrite(D7, 1);
}
   b461a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b461e:	2101      	movs	r1, #1
   b4620:	2007      	movs	r0, #7
   b4622:	f005 ba8a 	b.w	b9b3a <digitalWrite>

000b4626 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b4626:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b4628:	2100      	movs	r1, #0
   b462a:	2006      	movs	r0, #6
   b462c:	f005 fa85 	bl	b9b3a <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b4630:	2100      	movs	r1, #0
   b4632:	2006      	movs	r0, #6
   b4634:	f005 fa81 	bl	b9b3a <digitalWrite>
   digitalWrite(D7, LOW);
   b4638:	2100      	movs	r1, #0
   b463a:	2007      	movs	r0, #7
   b463c:	f005 fa7d 	bl	b9b3a <digitalWrite>
   digitalWrite(D7, 0);
}
   b4640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b4644:	2100      	movs	r1, #0
   b4646:	2007      	movs	r0, #7
   b4648:	f005 ba77 	b.w	b9b3a <digitalWrite>

000b464c <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b464c:	b508      	push	{r3, lr}
   pitidoON0();
   b464e:	f7ff ffd7 	bl	b4600 <_Z9pitidoON0v>
   delay(100);
   b4652:	2064      	movs	r0, #100	; 0x64
   b4654:	f004 fea0 	bl	b9398 <delay>
   pitidoOFF0();
   b4658:	f7ff ffe5 	bl	b4626 <_Z10pitidoOFF0v>
   delay(100);
}
   b465c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b4660:	2064      	movs	r0, #100	; 0x64
   b4662:	f004 be99 	b.w	b9398 <delay>

000b4666 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b4666:	b108      	cbz	r0, b466c <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b4668:	f7ff bf5e 	b.w	b4528 <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b466c:	f7ff bf86 	b.w	b457c <_Z10ledNaranjav>

000b4670 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b4670:	b108      	cbz	r0, b4676 <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b4672:	f7ff bf67 	b.w	b4544 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b4676:	f7ff bf73 	b.w	b4560 <_Z9ledMoradov>

000b467a <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b467a:	b108      	cbz	r0, b4680 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b467c:	f7ff bf46 	b.w	b450c <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b4680:	f7ff bf36 	b.w	b44f0 <_Z7ledRojov>

000b4684 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b4684:	b508      	push	{r3, lr}
   if (estado)
   b4686:	b160      	cbz	r0, b46a2 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b4688:	f7ff ff86 	bl	b4598 <_Z9ledBlancov>
      delay(400);
   b468c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4690:	f004 fe82 	bl	b9398 <delay>
      ledApagar();
   b4694:	f7ff ff1e 	bl	b44d4 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b4698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b469c:	20c8      	movs	r0, #200	; 0xc8
   b469e:	f004 be7b 	b.w	b9398 <delay>
}
   b46a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b46a6:	f7ff bf15 	b.w	b44d4 <_Z9ledApagarv>

000b46aa <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b46aa:	b108      	cbz	r0, b46b0 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b46ac:	f7ff bf74 	b.w	b4598 <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b46b0:	f7ff bf10 	b.w	b44d4 <_Z9ledApagarv>

000b46b4 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b46b4:	b108      	cbz	r0, b46ba <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b46b6:	f7ff bf7d 	b.w	b45b4 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b46ba:	f7ff bf0b 	b.w	b44d4 <_Z9ledApagarv>

000b46be <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b46be:	b108      	cbz	r0, b46c4 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b46c0:	f7ff bfc4 	b.w	b464c <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b46c4:	f7ff bfaf 	b.w	b4626 <_Z10pitidoOFF0v>

000b46c8 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b46c8:	b108      	cbz	r0, b46ce <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b46ca:	f7ff bf99 	b.w	b4600 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b46ce:	f7ff bfaa 	b.w	b4626 <_Z10pitidoOFF0v>
	...

000b46d4 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   b46d4:	4603      	mov	r3, r0
   b46d6:	b513      	push	{r0, r1, r4, lr}
   b46d8:	460c      	mov	r4, r1
   b46da:	4610      	mov	r0, r2
   switch (id)
   b46dc:	b14b      	cbz	r3, b46f2 <_Z15activarActuadoriib+0x1e>
   b46de:	2b01      	cmp	r3, #1
   b46e0:	d02c      	beq.n	b473c <_Z15activarActuadoriib+0x68>
            break;
         case 1:
            blinkAndSleep(valor);
            break;
         default:
            Serial.println("Valor no valido");
   b46e2:	f004 ffef 	bl	b96c4 <_Z16_fetch_usbserialv>
   b46e6:	491e      	ldr	r1, [pc, #120]	; (b4760 <_Z15activarActuadoriib+0x8c>)
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b46e8:	b002      	add	sp, #8
   b46ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Serial.println("Valor no valido");
   b46ee:	f004 bd04 	b.w	b90fa <_ZN5Print7printlnEPKc>
      switch (opcion) {
   b46f2:	2905      	cmp	r1, #5
   b46f4:	d8f5      	bhi.n	b46e2 <_Z15activarActuadoriib+0xe>
   b46f6:	e8df f001 	tbb	[pc, r1]
   b46fa:	0803      	.short	0x0803
   b46fc:	1c17120d 	.word	0x1c17120d
}
   b4700:	b002      	add	sp, #8
   b4702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledVerdeRojo(valor);
   b4706:	f7ff bfb8 	b.w	b467a <_Z12ledVerdeRojob>
}
   b470a:	b002      	add	sp, #8
   b470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledMoradoAmarillo(valor);
   b4710:	f7ff bfae 	b.w	b4670 <_Z17ledMoradoAmarillob>
}
   b4714:	b002      	add	sp, #8
   b4716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledAzulNaranja(valor);
   b471a:	f7ff bfa4 	b.w	b4666 <_Z14ledAzulNaranjab>
}
   b471e:	b002      	add	sp, #8
   b4720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledBlink0(valor);
   b4724:	f7ff bfae 	b.w	b4684 <_Z9ledBlink0b>
}
   b4728:	b002      	add	sp, #8
   b472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledArcoiris0(valor);
   b472e:	f7ff bfc1 	b.w	b46b4 <_Z12ledArcoiris0b>
}
   b4732:	b002      	add	sp, #8
   b4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ledOnOff(valor);
   b4738:	f7ff bfb7 	b.w	b46aa <_Z8ledOnOffb>
   b473c:	9201      	str	r2, [sp, #4]
      ledApagar();
   b473e:	f7ff fec9 	bl	b44d4 <_Z9ledApagarv>
      switch (opcion) {
   b4742:	9801      	ldr	r0, [sp, #4]
   b4744:	b134      	cbz	r4, b4754 <_Z15activarActuadoriib+0x80>
   b4746:	2c01      	cmp	r4, #1
   b4748:	d1cb      	bne.n	b46e2 <_Z15activarActuadoriib+0xe>
}
   b474a:	b002      	add	sp, #8
   b474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            blinkAndSleep(valor);
   b4750:	f7ff bfb5 	b.w	b46be <_Z13blinkAndSleepb>
}
   b4754:	b002      	add	sp, #8
   b4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            zumbador(valor);
   b475a:	f7ff bfb5 	b.w	b46c8 <_Z8zumbadorb>
   b475e:	bf00      	nop
   b4760:	000ba998 	.word	0x000ba998

000b4764 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b4764:	b508      	push	{r3, lr}
    ledBlanco();
   b4766:	f7ff ff17 	bl	b4598 <_Z9ledBlancov>
    delay(400);
   b476a:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b476e:	f004 fe13 	bl	b9398 <delay>
    ledApagar();
   b4772:	f7ff feaf 	bl	b44d4 <_Z9ledApagarv>
    delay(200);
}
   b4776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b477a:	20c8      	movs	r0, #200	; 0xc8
   b477c:	f004 be0c 	b.w	b9398 <delay>

000b4780 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b4780:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4782:	b284      	uxth	r4, r0
   b4784:	4620      	mov	r0, r4
   b4786:	2101      	movs	r1, #1
   b4788:	f005 f9d7 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto, HIGH);
   b478c:	4620      	mov	r0, r4
   b478e:	2101      	movs	r1, #1
   b4790:	f005 f9d3 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4794:	1c60      	adds	r0, r4, #1
   b4796:	b280      	uxth	r0, r0
   b4798:	2101      	movs	r1, #1
   b479a:	9001      	str	r0, [sp, #4]
   b479c:	f005 f9cd 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b47a0:	9801      	ldr	r0, [sp, #4]
   b47a2:	2101      	movs	r1, #1
}
   b47a4:	b002      	add	sp, #8
   b47a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b47aa:	f005 b9c6 	b.w	b9b3a <digitalWrite>

000b47ae <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b47ae:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b47b0:	b284      	uxth	r4, r0
   b47b2:	4620      	mov	r0, r4
   b47b4:	2100      	movs	r1, #0
   b47b6:	f005 f9c0 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto, LOW);
   b47ba:	4620      	mov	r0, r4
   b47bc:	2100      	movs	r1, #0
   b47be:	f005 f9bc 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b47c2:	1c60      	adds	r0, r4, #1
   b47c4:	b280      	uxth	r0, r0
   b47c6:	2100      	movs	r1, #0
   b47c8:	9001      	str	r0, [sp, #4]
   b47ca:	f005 f9b6 	bl	b9b3a <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b47ce:	9801      	ldr	r0, [sp, #4]
   b47d0:	2100      	movs	r1, #0
}
   b47d2:	b002      	add	sp, #8
   b47d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b47d8:	f005 b9af 	b.w	b9b3a <digitalWrite>

000b47dc <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b47dc:	b510      	push	{r4, lr}
   b47de:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b47e0:	f7ff ffce 	bl	b4780 <_Z9pitidoON1i>
    delay(100);
   b47e4:	2064      	movs	r0, #100	; 0x64
   b47e6:	f004 fdd7 	bl	b9398 <delay>
    pitidoOFF1(puerto);
   b47ea:	4620      	mov	r0, r4
   b47ec:	f7ff ffdf 	bl	b47ae <_Z10pitidoOFF1i>
    delay(100);
}
   b47f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b47f4:	2064      	movs	r0, #100	; 0x64
   b47f6:	f004 bdcf 	b.w	b9398 <delay>
	...

000b47fc <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b47fc:	b508      	push	{r3, lr}
   b47fe:	2808      	cmp	r0, #8
   b4800:	d82a      	bhi.n	b4858 <_Z10activarLEDii+0x5c>
   b4802:	e8df f000 	tbb	[pc, r0]
   b4806:	0905      	.short	0x0905
   b4808:	1915110d 	.word	0x1915110d
   b480c:	211d      	.short	0x211d
   b480e:	25          	.byte	0x25
   b480f:	00          	.byte	0x00

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b4810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledVerde();
   b4814:	f7ff be7a 	b.w	b450c <_Z8ledVerdev>
}
   b4818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledRojo();
   b481c:	f7ff be68 	b.w	b44f0 <_Z7ledRojov>
}
   b4820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledAmarillo();
   b4824:	f7ff be8e 	b.w	b4544 <_Z11ledAmarillov>
}
   b4828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledMorado();
   b482c:	f7ff be98 	b.w	b4560 <_Z9ledMoradov>
}
   b4830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledAzul();
   b4834:	f7ff be78 	b.w	b4528 <_Z7ledAzulv>
}
   b4838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledNaranja();
   b483c:	f7ff be9e 	b.w	b457c <_Z10ledNaranjav>
}
   b4840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledBlink();
   b4844:	f7ff bf8e 	b.w	b4764 <_Z8ledBlinkv>
}
   b4848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledArcoiris();
   b484c:	f7ff beb2 	b.w	b45b4 <_Z11ledArcoirisv>
}
   b4850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b4854:	f7ff be3e 	b.w	b44d4 <_Z9ledApagarv>
        Serial.println("LedErrorOption");
   b4858:	f004 ff34 	bl	b96c4 <_Z16_fetch_usbserialv>
}
   b485c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b4860:	4901      	ldr	r1, [pc, #4]	; (b4868 <_Z10activarLEDii+0x6c>)
   b4862:	f004 bc4a 	b.w	b90fa <_ZN5Print7printlnEPKc>
   b4866:	bf00      	nop
   b4868:	000ba9a8 	.word	0x000ba9a8

000b486c <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b486c:	b538      	push	{r3, r4, r5, lr}
   b486e:	460c      	mov	r4, r1
   b4870:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b4872:	2101      	movs	r1, #1
   b4874:	b2a0      	uxth	r0, r4
   b4876:	f005 f94f 	bl	b9b18 <pinMode>

    switch (opcion)
   b487a:	b145      	cbz	r5, b488e <_Z15activarZumbadorii+0x22>
   b487c:	2d01      	cmp	r5, #1
   b487e:	d00b      	beq.n	b4898 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4880:	f004 ff20 	bl	b96c4 <_Z16_fetch_usbserialv>
        break;
    }
}
   b4884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b4888:	4906      	ldr	r1, [pc, #24]	; (b48a4 <_Z15activarZumbadorii+0x38>)
   b488a:	f004 bc36 	b.w	b90fa <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b488e:	4620      	mov	r0, r4
}
   b4890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b4894:	f7ff bf74 	b.w	b4780 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b4898:	4620      	mov	r0, r4
}
   b489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b489e:	f7ff bf9d 	b.w	b47dc <_Z12pitidoBlink1i>
   b48a2:	bf00      	nop
   b48a4:	000ba998 	.word	0x000ba998

000b48a8 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b48a8:	460b      	mov	r3, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b48aa:	b908      	cbnz	r0, b48b0 <_Z14apagarActuadorii+0x8>
   b48ac:	f7ff be12 	b.w	b44d4 <_Z9ledApagarv>
   b48b0:	2100      	movs	r1, #0
   b48b2:	b298      	uxth	r0, r3
   b48b4:	f005 b941 	b.w	b9b3a <digitalWrite>

000b48b8 <_Z15actuadorHandleriii>:
}

void actuadorHandler(int id, int opcion, int puerto)
{
   b48b8:	4603      	mov	r3, r0
    if (id < 2)
   b48ba:	2b01      	cmp	r3, #1
{
   b48bc:	4608      	mov	r0, r1
   b48be:	4611      	mov	r1, r2
    if (id < 2)
   b48c0:	dc04      	bgt.n	b48cc <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b48c2:	b90b      	cbnz	r3, b48c8 <_Z15actuadorHandleriii+0x10>
   b48c4:	f7ff bf9a 	b.w	b47fc <_Z10activarLEDii>
   b48c8:	f7ff bfd0 	b.w	b486c <_Z15activarZumbadorii>
}
   b48cc:	4770      	bx	lr
	...

000b48d0 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b48d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   display.clearDisplay();
   b48d2:	4f4b      	ldr	r7, [pc, #300]	; (b4a00 <_Z10showBitmapii6String+0x130>)
void showBitmap(int id1, int id2, String msg) {
   b48d4:	b085      	sub	sp, #20
   b48d6:	4606      	mov	r6, r0
   display.clearDisplay();
   b48d8:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b48da:	460c      	mov	r4, r1
   b48dc:	4615      	mov	r5, r2
   display.clearDisplay();
   b48de:	f003 fb43 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b48e2:	2300      	movs	r3, #0
   b48e4:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b48e6:	4b47      	ldr	r3, [pc, #284]	; (b4a04 <_Z10showBitmapii6String+0x134>)
   b48e8:	2201      	movs	r2, #1
   b48ea:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b48ec:	f003 ff72 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b48f0:	4b45      	ldr	r3, [pc, #276]	; (b4a08 <_Z10showBitmapii6String+0x138>)
   b48f2:	6018      	str	r0, [r3, #0]
   switch (id1)
   b48f4:	2e03      	cmp	r6, #3
   b48f6:	d811      	bhi.n	b491c <_Z10showBitmapii6String+0x4c>
   b48f8:	e8df f006 	tbb	[pc, r6]
   b48fc:	7a5d2802 	.word	0x7a5d2802
      switch (id2)
   b4900:	2c01      	cmp	r4, #1
   b4902:	d007      	beq.n	b4914 <_Z10showBitmapii6String+0x44>
   b4904:	2c02      	cmp	r4, #2
   b4906:	d007      	beq.n	b4918 <_Z10showBitmapii6String+0x48>
   b4908:	b944      	cbnz	r4, b491c <_Z10showBitmapii6String+0x4c>
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b490a:	4940      	ldr	r1, [pc, #256]	; (b4a0c <_Z10showBitmapii6String+0x13c>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b490c:	4840      	ldr	r0, [pc, #256]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b490e:	f005 ff53 	bl	ba7b8 <strcpy>
         break;
   b4912:	e00c      	b.n	b492e <_Z10showBitmapii6String+0x5e>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b4914:	493f      	ldr	r1, [pc, #252]	; (b4a14 <_Z10showBitmapii6String+0x144>)
   b4916:	e7f9      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b4918:	493f      	ldr	r1, [pc, #252]	; (b4a18 <_Z10showBitmapii6String+0x148>)
   b491a:	e7f7      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b491c:	493f      	ldr	r1, [pc, #252]	; (b4a1c <_Z10showBitmapii6String+0x14c>)
   b491e:	483c      	ldr	r0, [pc, #240]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b4920:	f005 ff4a 	bl	ba7b8 <strcpy>
         Serial.println("Bitmap not available.");
   b4924:	f004 fece 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4928:	493c      	ldr	r1, [pc, #240]	; (b4a1c <_Z10showBitmapii6String+0x14c>)
   b492a:	f004 fbe6 	bl	b90fa <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b492e:	f004 fec9 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4932:	4937      	ldr	r1, [pc, #220]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b4934:	f004 fbe1 	bl	b90fa <_ZN5Print7printlnEPKc>
   display.print(buf);
   b4938:	4935      	ldr	r1, [pc, #212]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b493a:	4831      	ldr	r0, [pc, #196]	; (b4a00 <_Z10showBitmapii6String+0x130>)
   b493c:	f004 fbca 	bl	b90d4 <_ZN5Print5printEPKc>
   display.display();
   b4940:	482f      	ldr	r0, [pc, #188]	; (b4a00 <_Z10showBitmapii6String+0x130>)
}
   b4942:	b005      	add	sp, #20
   b4944:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   display.display();
   b4948:	f003 bd76 	b.w	b8438 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b494c:	2c06      	cmp	r4, #6
   b494e:	d8e5      	bhi.n	b491c <_Z10showBitmapii6String+0x4c>
   b4950:	e8df f004 	tbb	[pc, r4]
   b4954:	211b1504 	.word	0x211b1504
   b4958:	2d27      	.short	0x2d27
   b495a:	2f          	.byte	0x2f
   b495b:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b495c:	4629      	mov	r1, r5
   b495e:	4668      	mov	r0, sp
   b4960:	f004 fb20 	bl	b8fa4 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A HEXAGONO");
   b4964:	492e      	ldr	r1, [pc, #184]	; (b4a20 <_Z10showBitmapii6String+0x150>)
         snprintf(buf, sizeof(buf), msg+" CONECTAR A TRIANGULO");
   b4966:	4668      	mov	r0, sp
   b4968:	f004 fb6f 	bl	b904a <_ZplRK15StringSumHelperPKc>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b496c:	6802      	ldr	r2, [r0, #0]
   b496e:	4828      	ldr	r0, [pc, #160]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b4970:	2140      	movs	r1, #64	; 0x40
   b4972:	f004 f933 	bl	b8bdc <snprintf>
class StringSumHelper : public String
   b4976:	4668      	mov	r0, sp
   b4978:	f004 faa6 	bl	b8ec8 <_ZN6StringD1Ev>
         break;
   b497c:	e7d7      	b.n	b492e <_Z10showBitmapii6String+0x5e>
	StringSumHelper(const String &s) : String(s) {}
   b497e:	4629      	mov	r1, r5
   b4980:	4668      	mov	r0, sp
   b4982:	f004 fb0f 	bl	b8fa4 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A CUADRADO");
   b4986:	4927      	ldr	r1, [pc, #156]	; (b4a24 <_Z10showBitmapii6String+0x154>)
   b4988:	e7ed      	b.n	b4966 <_Z10showBitmapii6String+0x96>
   b498a:	4629      	mov	r1, r5
   b498c:	4668      	mov	r0, sp
   b498e:	f004 fb09 	bl	b8fa4 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A TRIANGULO");
   b4992:	4925      	ldr	r1, [pc, #148]	; (b4a28 <_Z10showBitmapii6String+0x158>)
   b4994:	e7e7      	b.n	b4966 <_Z10showBitmapii6String+0x96>
   b4996:	4629      	mov	r1, r5
   b4998:	4668      	mov	r0, sp
   b499a:	f004 fb03 	bl	b8fa4 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A ROMBO");
   b499e:	4923      	ldr	r1, [pc, #140]	; (b4a2c <_Z10showBitmapii6String+0x15c>)
   b49a0:	e7e1      	b.n	b4966 <_Z10showBitmapii6String+0x96>
   b49a2:	4629      	mov	r1, r5
   b49a4:	4668      	mov	r0, sp
   b49a6:	f004 fafd 	bl	b8fa4 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+" CONECTAR A SEMICIRCULO");
   b49aa:	4921      	ldr	r1, [pc, #132]	; (b4a30 <_Z10showBitmapii6String+0x160>)
   b49ac:	e7db      	b.n	b4966 <_Z10showBitmapii6String+0x96>
         snprintf(buf, sizeof(buf), "CONECTAR A CIRCULO");
   b49ae:	4921      	ldr	r1, [pc, #132]	; (b4a34 <_Z10showBitmapii6String+0x164>)
   b49b0:	e7ac      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b49b2:	4921      	ldr	r1, [pc, #132]	; (b4a38 <_Z10showBitmapii6String+0x168>)
   b49b4:	e7aa      	b.n	b490c <_Z10showBitmapii6String+0x3c>
      switch (id2)
   b49b6:	2c06      	cmp	r4, #6
   b49b8:	d8b0      	bhi.n	b491c <_Z10showBitmapii6String+0x4c>
   b49ba:	e8df f004 	tbb	[pc, r4]
   b49be:	0604      	.short	0x0604
   b49c0:	150c0a08 	.word	0x150c0a08
   b49c4:	17          	.byte	0x17
   b49c5:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b49c6:	491d      	ldr	r1, [pc, #116]	; (b4a3c <_Z10showBitmapii6String+0x16c>)
   b49c8:	e7a0      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b49ca:	491d      	ldr	r1, [pc, #116]	; (b4a40 <_Z10showBitmapii6String+0x170>)
   b49cc:	e79e      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b49ce:	491d      	ldr	r1, [pc, #116]	; (b4a44 <_Z10showBitmapii6String+0x174>)
   b49d0:	e79c      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b49d2:	491d      	ldr	r1, [pc, #116]	; (b4a48 <_Z10showBitmapii6String+0x178>)
   b49d4:	e79a      	b.n	b490c <_Z10showBitmapii6String+0x3c>
	StringSumHelper(const char *p) : String(p) {}
   b49d6:	491d      	ldr	r1, [pc, #116]	; (b4a4c <_Z10showBitmapii6String+0x17c>)
   b49d8:	4668      	mov	r0, sp
   b49da:	f004 fac0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b49de:	4629      	mov	r1, r5
   b49e0:	4668      	mov	r0, sp
   b49e2:	f004 fb26 	bl	b9032 <_ZplRK15StringSumHelperRK6String>
   b49e6:	e7c1      	b.n	b496c <_Z10showBitmapii6String+0x9c>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b49e8:	4919      	ldr	r1, [pc, #100]	; (b4a50 <_Z10showBitmapii6String+0x180>)
   b49ea:	e78f      	b.n	b490c <_Z10showBitmapii6String+0x3c>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b49ec:	4919      	ldr	r1, [pc, #100]	; (b4a54 <_Z10showBitmapii6String+0x184>)
   b49ee:	e78d      	b.n	b490c <_Z10showBitmapii6String+0x3c>
      switch (id2)
   b49f0:	2c00      	cmp	r4, #0
   b49f2:	d193      	bne.n	b491c <_Z10showBitmapii6String+0x4c>
         snprintf(buf, sizeof(buf), msg);
   b49f4:	682a      	ldr	r2, [r5, #0]
   b49f6:	4806      	ldr	r0, [pc, #24]	; (b4a10 <_Z10showBitmapii6String+0x140>)
   b49f8:	2140      	movs	r1, #64	; 0x40
   b49fa:	f004 f8ef 	bl	b8bdc <snprintf>
         break;
   b49fe:	e796      	b.n	b492e <_Z10showBitmapii6String+0x5e>
   b4a00:	2003d378 	.word	0x2003d378
   b4a04:	2003cd51 	.word	0x2003cd51
   b4a08:	2003dc58 	.word	0x2003dc58
   b4a0c:	000ba9b7 	.word	0x000ba9b7
   b4a10:	2003d32d 	.word	0x2003d32d
   b4a14:	000ba9c3 	.word	0x000ba9c3
   b4a18:	000ba9d1 	.word	0x000ba9d1
   b4a1c:	000ba9dd 	.word	0x000ba9dd
   b4a20:	000ba9f3 	.word	0x000ba9f3
   b4a24:	000baa08 	.word	0x000baa08
   b4a28:	000baa1d 	.word	0x000baa1d
   b4a2c:	000baa33 	.word	0x000baa33
   b4a30:	000baa45 	.word	0x000baa45
   b4a34:	000baa5d 	.word	0x000baa5d
   b4a38:	000baa70 	.word	0x000baa70
   b4a3c:	000baa7d 	.word	0x000baa7d
   b4a40:	000baa9d 	.word	0x000baa9d
   b4a44:	000baabd 	.word	0x000baabd
   b4a48:	000baad8 	.word	0x000baad8
   b4a4c:	000baaed 	.word	0x000baaed
   b4a50:	000bab00 	.word	0x000bab00
   b4a54:	000bab1e 	.word	0x000bab1e

000b4a58 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b4a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b4a5a:	4b24      	ldr	r3, [pc, #144]	; (b4aec <_Z8showPortii+0x94>)
   b4a5c:	689b      	ldr	r3, [r3, #8]
   b4a5e:	bb4b      	cbnz	r3, b4ab4 <_Z8showPortii+0x5c>
      switch (puerto)
   b4a60:	2902      	cmp	r1, #2
   b4a62:	d011      	beq.n	b4a88 <_Z8showPortii+0x30>
   b4a64:	2904      	cmp	r1, #4
   b4a66:	d016      	beq.n	b4a96 <_Z8showPortii+0x3e>
   b4a68:	b9e1      	cbnz	r1, b4aa4 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b4a6a:	4921      	ldr	r1, [pc, #132]	; (b4af0 <_Z8showPortii+0x98>)
   b4a6c:	4668      	mov	r0, sp
   b4a6e:	f004 fa76 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4a72:	466a      	mov	r2, sp
   b4a74:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b4a76:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4a78:	f7ff ff2a 	bl	b48d0 <_Z10showBitmapii6String>
   b4a7c:	4668      	mov	r0, sp
   b4a7e:	f004 fa23 	bl	b8ec8 <_ZN6StringD1Ev>
}
   b4a82:	b005      	add	sp, #20
   b4a84:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b4a88:	4919      	ldr	r1, [pc, #100]	; (b4af0 <_Z8showPortii+0x98>)
   b4a8a:	4668      	mov	r0, sp
   b4a8c:	f004 fa67 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4a90:	466a      	mov	r2, sp
   b4a92:	2104      	movs	r1, #4
   b4a94:	e7ef      	b.n	b4a76 <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b4a96:	4916      	ldr	r1, [pc, #88]	; (b4af0 <_Z8showPortii+0x98>)
   b4a98:	4668      	mov	r0, sp
   b4a9a:	f004 fa60 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4a9e:	466a      	mov	r2, sp
   b4aa0:	2105      	movs	r1, #5
   b4aa2:	e7e8      	b.n	b4a76 <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4aa4:	4912      	ldr	r1, [pc, #72]	; (b4af0 <_Z8showPortii+0x98>)
   b4aa6:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4aa8:	f004 fa59 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4aac:	466a      	mov	r2, sp
   b4aae:	2103      	movs	r1, #3
   b4ab0:	2002      	movs	r0, #2
   b4ab2:	e7e1      	b.n	b4a78 <_Z8showPortii+0x20>
      switch (puerto)
   b4ab4:	2904      	cmp	r1, #4
   b4ab6:	d00a      	beq.n	b4ace <_Z8showPortii+0x76>
   b4ab8:	2906      	cmp	r1, #6
   b4aba:	d00f      	beq.n	b4adc <_Z8showPortii+0x84>
   b4abc:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b4abe:	4668      	mov	r0, sp
   b4ac0:	490b      	ldr	r1, [pc, #44]	; (b4af0 <_Z8showPortii+0x98>)
      switch (puerto)
   b4ac2:	d1f1      	bne.n	b4aa8 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b4ac4:	f004 fa4b 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4ac8:	466a      	mov	r2, sp
   b4aca:	2100      	movs	r1, #0
   b4acc:	e7d3      	b.n	b4a76 <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b4ace:	4908      	ldr	r1, [pc, #32]	; (b4af0 <_Z8showPortii+0x98>)
   b4ad0:	4668      	mov	r0, sp
   b4ad2:	f004 fa44 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4ad6:	466a      	mov	r2, sp
   b4ad8:	2101      	movs	r1, #1
   b4ada:	e7cc      	b.n	b4a76 <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b4adc:	4904      	ldr	r1, [pc, #16]	; (b4af0 <_Z8showPortii+0x98>)
   b4ade:	4668      	mov	r0, sp
   b4ae0:	f004 fa3d 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4ae4:	466a      	mov	r2, sp
   b4ae6:	2102      	movs	r1, #2
   b4ae8:	e7c5      	b.n	b4a76 <_Z8showPortii+0x1e>
   b4aea:	bf00      	nop
   b4aec:	2003ccac 	.word	0x2003ccac
   b4af0:	000badae 	.word	0x000badae

000b4af4 <_Z10borradoALLi>:
   switch (modo)
   b4af4:	2801      	cmp	r0, #1
   b4af6:	d00b      	beq.n	b4b10 <_Z10borradoALLi+0x1c>
   b4af8:	2802      	cmp	r0, #2
   b4afa:	d00b      	beq.n	b4b14 <_Z10borradoALLi+0x20>
   b4afc:	b988      	cbnz	r0, b4b22 <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b4afe:	4b09      	ldr	r3, [pc, #36]	; (b4b24 <_Z10borradoALLi+0x30>)
   b4b00:	6018      	str	r0, [r3, #0]
   b4b02:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b4b06:	4b08      	ldr	r3, [pc, #32]	; (b4b28 <_Z10borradoALLi+0x34>)
   b4b08:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b4b0a:	4b08      	ldr	r3, [pc, #32]	; (b4b2c <_Z10borradoALLi+0x38>)
   b4b0c:	6018      	str	r0, [r3, #0]
      break;
   b4b0e:	4770      	bx	lr
   b4b10:	f7ff bada 	b.w	b40c8 <_Z10borradoALLi.part.0>
      posicion = 0;
   b4b14:	4a06      	ldr	r2, [pc, #24]	; (b4b30 <_Z10borradoALLi+0x3c>)
   b4b16:	2300      	movs	r3, #0
   b4b18:	6013      	str	r3, [r2, #0]
      bucle = false;
   b4b1a:	4a06      	ldr	r2, [pc, #24]	; (b4b34 <_Z10borradoALLi+0x40>)
   b4b1c:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b4b1e:	4a06      	ldr	r2, [pc, #24]	; (b4b38 <_Z10borradoALLi+0x44>)
   b4b20:	6013      	str	r3, [r2, #0]
}
   b4b22:	4770      	bx	lr
   b4b24:	2003cd54 	.word	0x2003cd54
   b4b28:	2003da58 	.word	0x2003da58
   b4b2c:	2003da50 	.word	0x2003da50
   b4b30:	2003da60 	.word	0x2003da60
   b4b34:	2003d32c 	.word	0x2003d32c
   b4b38:	2003dc60 	.word	0x2003dc60

000b4b3c <_Z13borradoBLOQUEi>:

// Borrado del bloque/loop actual
void borradoBLOQUE(int modo)
{
   switch (modo)
   b4b3c:	2801      	cmp	r0, #1
{
   b4b3e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b4b40:	d003      	beq.n	b4b4a <_Z13borradoBLOQUEi+0xe>
   b4b42:	2802      	cmp	r0, #2
   b4b44:	d03c      	beq.n	b4bc0 <_Z13borradoBLOQUEi+0x84>
      break;

   default:
      break;
   }
}
   b4b46:	b004      	add	sp, #16
   b4b48:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b4b4a:	4b37      	ldr	r3, [pc, #220]	; (b4c28 <_Z13borradoBLOQUEi+0xec>)
   b4b4c:	681c      	ldr	r4, [r3, #0]
   b4b4e:	b974      	cbnz	r4, b4b6e <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b4b50:	f7ff faba 	bl	b40c8 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b4b54:	4935      	ldr	r1, [pc, #212]	; (b4c2c <_Z13borradoBLOQUEi+0xf0>)
   b4b56:	4668      	mov	r0, sp
   b4b58:	f004 fa01 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4b5c:	466a      	mov	r2, sp
   b4b5e:	2100      	movs	r1, #0
   b4b60:	2003      	movs	r0, #3
   b4b62:	f7ff feb5 	bl	b48d0 <_Z10showBitmapii6String>
   b4b66:	4668      	mov	r0, sp
   b4b68:	f004 f9ae 	bl	b8ec8 <_ZN6StringD1Ev>
   b4b6c:	e7eb      	b.n	b4b46 <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b4b6e:	2c01      	cmp	r4, #1
   b4b70:	d11e      	bne.n	b4bb0 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b4b72:	2200      	movs	r2, #0
         numBloque = 0;
   b4b74:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b4b76:	492e      	ldr	r1, [pc, #184]	; (b4c30 <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4b78:	4b2e      	ldr	r3, [pc, #184]	; (b4c34 <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b4b7a:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b4b7c:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4b7e:	4a2e      	ldr	r2, [pc, #184]	; (b4c38 <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4b80:	4b2e      	ldr	r3, [pc, #184]	; (b4c3c <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b82:	482f      	ldr	r0, [pc, #188]	; (b4c40 <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b4b84:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b4b86:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b88:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b4b8a:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b4b8c:	bf04      	itt	eq
   b4b8e:	2303      	moveq	r3, #3
   b4b90:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b4b92:	4b2c      	ldr	r3, [pc, #176]	; (b4c44 <_Z13borradoBLOQUEi+0x108>)
   b4b94:	6819      	ldr	r1, [r3, #0]
   b4b96:	3101      	adds	r1, #1
            puertoDigital=6;
   b4b98:	bf04      	itt	eq
   b4b9a:	2106      	moveq	r1, #6
   b4b9c:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b4b9e:	6811      	ldr	r1, [r2, #0]
   b4ba0:	1a09      	subs	r1, r1, r0
   b4ba2:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b4ba4:	4928      	ldr	r1, [pc, #160]	; (b4c48 <_Z13borradoBLOQUEi+0x10c>)
   b4ba6:	681a      	ldr	r2, [r3, #0]
   b4ba8:	6809      	ldr	r1, [r1, #0]
   b4baa:	1a52      	subs	r2, r2, r1
   b4bac:	601a      	str	r2, [r3, #0]
   b4bae:	e7d1      	b.n	b4b54 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b4bb0:	f004 fd88 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4bb4:	4925      	ldr	r1, [pc, #148]	; (b4c4c <_Z13borradoBLOQUEi+0x110>)
}
   b4bb6:	b004      	add	sp, #16
   b4bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b4bbc:	f004 ba9d 	b.w	b90fa <_ZN5Print7printlnEPKc>
      if (bucle) {
   b4bc0:	4e23      	ldr	r6, [pc, #140]	; (b4c50 <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b4bc2:	4a24      	ldr	r2, [pc, #144]	; (b4c54 <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b4bc4:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b4bc6:	6813      	ldr	r3, [r2, #0]
   b4bc8:	4d23      	ldr	r5, [pc, #140]	; (b4c58 <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b4bca:	b19c      	cbz	r4, b4bf4 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b4bcc:	6829      	ldr	r1, [r5, #0]
   b4bce:	3101      	adds	r1, #1
   b4bd0:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4bd2:	4668      	mov	r0, sp
   b4bd4:	4921      	ldr	r1, [pc, #132]	; (b4c5c <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b4bd6:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b4bd8:	f004 f9c1 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4bdc:	466a      	mov	r2, sp
   b4bde:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b4be0:	2003      	movs	r0, #3
   b4be2:	f7ff fe75 	bl	b48d0 <_Z10showBitmapii6String>
   b4be6:	4668      	mov	r0, sp
   b4be8:	f004 f96e 	bl	b8ec8 <_ZN6StringD1Ev>
      bucle = false;
   b4bec:	2300      	movs	r3, #0
   b4bee:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b4bf0:	602b      	str	r3, [r5, #0]
}
   b4bf2:	e7a8      	b.n	b4b46 <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b4bf4:	481a      	ldr	r0, [pc, #104]	; (b4c60 <_Z13borradoBLOQUEi+0x124>)
   b4bf6:	1e59      	subs	r1, r3, #1
   b4bf8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b4bfc:	3002      	adds	r0, #2
   b4bfe:	d10c      	bne.n	b4c1a <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b4c00:	4818      	ldr	r0, [pc, #96]	; (b4c64 <_Z13borradoBLOQUEi+0x128>)
   b4c02:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4c06:	3102      	adds	r1, #2
   b4c08:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b4c0a:	4914      	ldr	r1, [pc, #80]	; (b4c5c <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b4c0c:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b4c0e:	4668      	mov	r0, sp
   b4c10:	f004 f9a5 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4c14:	466a      	mov	r2, sp
   b4c16:	4621      	mov	r1, r4
   b4c18:	e7e2      	b.n	b4be0 <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b4c1a:	f004 fd53 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4c1e:	4912      	ldr	r1, [pc, #72]	; (b4c68 <_Z13borradoBLOQUEi+0x12c>)
   b4c20:	f004 fa6b 	bl	b90fa <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b4c24:	4910      	ldr	r1, [pc, #64]	; (b4c68 <_Z13borradoBLOQUEi+0x12c>)
   b4c26:	e7f2      	b.n	b4c0e <_Z13borradoBLOQUEi+0xd2>
   b4c28:	2003cca4 	.word	0x2003cca4
   b4c2c:	000bab3e 	.word	0x000bab3e
   b4c30:	2003cd41 	.word	0x2003cd41
   b4c34:	2003cd50 	.word	0x2003cd50
   b4c38:	2003da68 	.word	0x2003da68
   b4c3c:	2003da50 	.word	0x2003da50
   b4c40:	2003da6c 	.word	0x2003da6c
   b4c44:	2003cca8 	.word	0x2003cca8
   b4c48:	2003da70 	.word	0x2003da70
   b4c4c:	000bab5a 	.word	0x000bab5a
   b4c50:	2003d32c 	.word	0x2003d32c
   b4c54:	2003da60 	.word	0x2003da60
   b4c58:	2003dc60 	.word	0x2003dc60
   b4c5c:	000bab6a 	.word	0x000bab6a
   b4c60:	2003d730 	.word	0x2003d730
   b4c64:	2003d3e8 	.word	0x2003d3e8
   b4c68:	000bab84 	.word	0x000bab84

000b4c6c <_Z10borradoPOPv>:

void borradoPOP(){
   posicion--;
   b4c6c:	4a0e      	ldr	r2, [pc, #56]	; (b4ca8 <_Z10borradoPOPv+0x3c>)
   b4c6e:	6813      	ldr	r3, [r2, #0]
   b4c70:	3b01      	subs	r3, #1
   b4c72:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b4c74:	4a0d      	ldr	r2, [pc, #52]	; (b4cac <_Z10borradoPOPv+0x40>)
   b4c76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4c7a:	1c8a      	adds	r2, r1, #2
   b4c7c:	4a0c      	ldr	r2, [pc, #48]	; (b4cb0 <_Z10borradoPOPv+0x44>)
   b4c7e:	d107      	bne.n	b4c90 <_Z10borradoPOPv+0x24>
      bucle = true;
   b4c80:	2101      	movs	r1, #1
   b4c82:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b4c84:	4a0b      	ldr	r2, [pc, #44]	; (b4cb4 <_Z10borradoPOPv+0x48>)
   b4c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4c8a:	4b0b      	ldr	r3, [pc, #44]	; (b4cb8 <_Z10borradoPOPv+0x4c>)
   b4c8c:	601a      	str	r2, [r3, #0]
   b4c8e:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b4c90:	3101      	adds	r1, #1
   b4c92:	d102      	bne.n	b4c9a <_Z10borradoPOPv+0x2e>
      bucle = false;
   b4c94:	2300      	movs	r3, #0
   b4c96:	7013      	strb	r3, [r2, #0]
   b4c98:	4770      	bx	lr

   } else {
      if (bucle) {
   b4c9a:	7813      	ldrb	r3, [r2, #0]
   b4c9c:	b11b      	cbz	r3, b4ca6 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b4c9e:	4a06      	ldr	r2, [pc, #24]	; (b4cb8 <_Z10borradoPOPv+0x4c>)
   b4ca0:	6813      	ldr	r3, [r2, #0]
   b4ca2:	3b01      	subs	r3, #1
   b4ca4:	6013      	str	r3, [r2, #0]
      }
   }
}
   b4ca6:	4770      	bx	lr
   b4ca8:	2003da60 	.word	0x2003da60
   b4cac:	2003d730 	.word	0x2003d730
   b4cb0:	2003d32c 	.word	0x2003d32c
   b4cb4:	2003d3e8 	.word	0x2003d3e8
   b4cb8:	2003dc60 	.word	0x2003dc60

000b4cbc <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	2807      	cmp	r0, #7
   b4cc0:	d816      	bhi.n	b4cf0 <_Z15decodificarNOTAi+0x34>
   b4cc2:	e8df f000 	tbb	[pc, r0]
   b4cc6:	0704      	.short	0x0704
   b4cc8:	0f0d0b09 	.word	0x0f0d0b09
   b4ccc:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b4cce:	4b0c      	ldr	r3, [pc, #48]	; (b4d00 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b4cd0:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b4cd2:	bd08      	pop	{r3, pc}
      return RE;
   b4cd4:	4b0b      	ldr	r3, [pc, #44]	; (b4d04 <_Z15decodificarNOTAi+0x48>)
   b4cd6:	e7fb      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return MI;
   b4cd8:	4b0b      	ldr	r3, [pc, #44]	; (b4d08 <_Z15decodificarNOTAi+0x4c>)
   b4cda:	e7f9      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return FA;
   b4cdc:	4b0b      	ldr	r3, [pc, #44]	; (b4d0c <_Z15decodificarNOTAi+0x50>)
   b4cde:	e7f7      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b4ce0:	4b0b      	ldr	r3, [pc, #44]	; (b4d10 <_Z15decodificarNOTAi+0x54>)
   b4ce2:	e7f5      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return LA;
   b4ce4:	4b0b      	ldr	r3, [pc, #44]	; (b4d14 <_Z15decodificarNOTAi+0x58>)
   b4ce6:	e7f3      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return SI;
   b4ce8:	4b0b      	ldr	r3, [pc, #44]	; (b4d18 <_Z15decodificarNOTAi+0x5c>)
   b4cea:	e7f1      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b4cec:	4b0b      	ldr	r3, [pc, #44]	; (b4d1c <_Z15decodificarNOTAi+0x60>)
   b4cee:	e7ef      	b.n	b4cd0 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b4cf0:	f004 fce8 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4cf4:	490a      	ldr	r1, [pc, #40]	; (b4d20 <_Z15decodificarNOTAi+0x64>)
   b4cf6:	f004 fa00 	bl	b90fa <_ZN5Print7printlnEPKc>
      return -1;
   b4cfa:	f04f 30ff 	mov.w	r0, #4294967295
   b4cfe:	e7e8      	b.n	b4cd2 <_Z15decodificarNOTAi+0x16>
   b4d00:	2003cc7c 	.word	0x2003cc7c
   b4d04:	2003cc90 	.word	0x2003cc90
   b4d08:	2003cc8c 	.word	0x2003cc8c
   b4d0c:	2003cc84 	.word	0x2003cc84
   b4d10:	2003cc98 	.word	0x2003cc98
   b4d14:	2003cc88 	.word	0x2003cc88
   b4d18:	2003cc94 	.word	0x2003cc94
   b4d1c:	2003cc80 	.word	0x2003cc80
   b4d20:	000bab95 	.word	0x000bab95

000b4d24 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b4d24:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b4d26:	b508      	push	{r3, lr}
   b4d28:	d803      	bhi.n	b4d32 <_Z15decodificarTIPOi+0xe>
   b4d2a:	4b06      	ldr	r3, [pc, #24]	; (b4d44 <_Z15decodificarTIPOi+0x20>)
   b4d2c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b4d30:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b4d32:	f004 fcc7 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4d36:	4904      	ldr	r1, [pc, #16]	; (b4d48 <_Z15decodificarTIPOi+0x24>)
   b4d38:	f004 f9df 	bl	b90fa <_ZN5Print7printlnEPKc>
   b4d3c:	f04f 30ff 	mov.w	r0, #4294967295
   b4d40:	e7f6      	b.n	b4d30 <_Z15decodificarTIPOi+0xc>
   b4d42:	bf00      	nop
   b4d44:	000bb3dc 	.word	0x000bb3dc
   b4d48:	000baba4 	.word	0x000baba4

000b4d4c <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b4d4c:	b510      	push	{r4, lr}
   b4d4e:	4604      	mov	r4, r0
   b4d50:	2907      	cmp	r1, #7
   b4d52:	d819      	bhi.n	b4d88 <_Z19decodificarNOTA_msgi+0x3c>
   b4d54:	e8df f001 	tbb	[pc, r1]
   b4d58:	0e0c0a04 	.word	0x0e0c0a04
   b4d5c:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b4d60:	490a      	ldr	r1, [pc, #40]	; (b4d8c <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b4d62:	4620      	mov	r0, r4
   b4d64:	f004 f8fb 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4d68:	4620      	mov	r0, r4
   b4d6a:	bd10      	pop	{r4, pc}
      return "RE";
   b4d6c:	4908      	ldr	r1, [pc, #32]	; (b4d90 <_Z19decodificarNOTA_msgi+0x44>)
   b4d6e:	e7f8      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b4d70:	4908      	ldr	r1, [pc, #32]	; (b4d94 <_Z19decodificarNOTA_msgi+0x48>)
   b4d72:	e7f6      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b4d74:	4908      	ldr	r1, [pc, #32]	; (b4d98 <_Z19decodificarNOTA_msgi+0x4c>)
   b4d76:	e7f4      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b4d78:	4908      	ldr	r1, [pc, #32]	; (b4d9c <_Z19decodificarNOTA_msgi+0x50>)
   b4d7a:	e7f2      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b4d7c:	4908      	ldr	r1, [pc, #32]	; (b4da0 <_Z19decodificarNOTA_msgi+0x54>)
   b4d7e:	e7f0      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b4d80:	4908      	ldr	r1, [pc, #32]	; (b4da4 <_Z19decodificarNOTA_msgi+0x58>)
   b4d82:	e7ee      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b4d84:	4908      	ldr	r1, [pc, #32]	; (b4da8 <_Z19decodificarNOTA_msgi+0x5c>)
   b4d86:	e7ec      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b4d88:	4908      	ldr	r1, [pc, #32]	; (b4dac <_Z19decodificarNOTA_msgi+0x60>)
   b4d8a:	e7ea      	b.n	b4d62 <_Z19decodificarNOTA_msgi+0x16>
   b4d8c:	000baa1a 	.word	0x000baa1a
   b4d90:	000babb3 	.word	0x000babb3
   b4d94:	000babb6 	.word	0x000babb6
   b4d98:	000babb9 	.word	0x000babb9
   b4d9c:	000babbc 	.word	0x000babbc
   b4da0:	000babc0 	.word	0x000babc0
   b4da4:	000babc3 	.word	0x000babc3
   b4da8:	000baca2 	.word	0x000baca2
   b4dac:	000bab95 	.word	0x000bab95

000b4db0 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b4db0:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b4db2:	b510      	push	{r4, lr}
   b4db4:	4604      	mov	r4, r0
   switch (tipo)
   b4db6:	d007      	beq.n	b4dc8 <_Z19decodificarTIPO_msgi+0x18>
   b4db8:	2902      	cmp	r1, #2
   b4dba:	d007      	beq.n	b4dcc <_Z19decodificarTIPO_msgi+0x1c>
   b4dbc:	b941      	cbnz	r1, b4dd0 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b4dbe:	4905      	ldr	r1, [pc, #20]	; (b4dd4 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b4dc0:	f004 f8cd 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	bd10      	pop	{r4, pc}
      return "_N";
   b4dc8:	4903      	ldr	r1, [pc, #12]	; (b4dd8 <_Z19decodificarTIPO_msgi+0x28>)
   b4dca:	e7f9      	b.n	b4dc0 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b4dcc:	4903      	ldr	r1, [pc, #12]	; (b4ddc <_Z19decodificarTIPO_msgi+0x2c>)
   b4dce:	e7f7      	b.n	b4dc0 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b4dd0:	4903      	ldr	r1, [pc, #12]	; (b4de0 <_Z19decodificarTIPO_msgi+0x30>)
   b4dd2:	e7f5      	b.n	b4dc0 <_Z19decodificarTIPO_msgi+0x10>
   b4dd4:	000babc6 	.word	0x000babc6
   b4dd8:	000babc9 	.word	0x000babc9
   b4ddc:	000babcc 	.word	0x000babcc
   b4de0:	000baba4 	.word	0x000baba4

000b4de4 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b4de4:	b513      	push	{r0, r1, r4, lr}
   b4de6:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b4de8:	f7ff ff68 	bl	b4cbc <_Z15decodificarNOTAi>
   b4dec:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b4dee:	4620      	mov	r0, r4
   b4df0:	f7ff ff98 	bl	b4d24 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b4df4:	9901      	ldr	r1, [sp, #4]
   b4df6:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b4df8:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b4dfa:	2006      	movs	r0, #6
   b4dfc:	f004 fc8c 	bl	b9718 <tone>
   delay(duracion);
   b4e00:	4620      	mov	r0, r4
   b4e02:	f004 fac9 	bl	b9398 <delay>
   noTone(Zumbador_PIN);
   b4e06:	2006      	movs	r0, #6
   b4e08:	f004 fc9d 	bl	b9746 <noTone>
   delay(30);
   b4e0c:	201e      	movs	r0, #30
}
   b4e0e:	b002      	add	sp, #8
   b4e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b4e14:	f004 bac0 	b.w	b9398 <delay>

000b4e18 <_Z10reproducirv>:

void reproducir() {
   b4e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b4e1c:	4b1e      	ldr	r3, [pc, #120]	; (b4e98 <_Z10reproducirv+0x80>)
   b4e1e:	781c      	ldrb	r4, [r3, #0]
   b4e20:	bb34      	cbnz	r4, b4e70 <_Z10reproducirv+0x58>
      int n;
      int iteracion;
      int inicio;

      int i = 0;
      while ( i < posicion) {
   b4e22:	f8df a08c 	ldr.w	sl, [pc, #140]	; b4eb0 <_Z10reproducirv+0x98>

         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e26:	4e1d      	ldr	r6, [pc, #116]	; (b4e9c <_Z10reproducirv+0x84>)
   b4e28:	4f1d      	ldr	r7, [pc, #116]	; (b4ea0 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b4e2a:	f8da 3000 	ldr.w	r3, [sl]
   b4e2e:	42a3      	cmp	r3, r4
   b4e30:	dd2f      	ble.n	b4e92 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b4e32:	f004 fc47 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4e36:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b4e3a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b4e3e:	4919      	ldr	r1, [pc, #100]	; (b4ea4 <_Z10reproducirv+0x8c>)
   b4e40:	f7ff f96e 	bl	b4120 <_ZN5Print8printlnfEPKcz>

         if ( notas[i] == -1 ) {
   b4e44:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b4e48:	1c42      	adds	r2, r0, #1
   b4e4a:	d105      	bne.n	b4e58 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b4e4c:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            iteracion = 0;            
            inicio=i;
   b4e50:	46a1      	mov	r9, r4
            iteracion = 0;            
   b4e52:	2500      	movs	r5, #0
            
         } else {
            reproducirNOTA(notas[i],duraciones[i]);
         }
         
         i++;
   b4e54:	3401      	adds	r4, #1
      while ( i < posicion) {
   b4e56:	e7e8      	b.n	b4e2a <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b4e58:	1c83      	adds	r3, r0, #2
   b4e5a:	d104      	bne.n	b4e66 <_Z10reproducirv+0x4e>
            iteracion++;
   b4e5c:	3501      	adds	r5, #1
               i = inicio;
   b4e5e:	45a8      	cmp	r8, r5
   b4e60:	bfc8      	it	gt
   b4e62:	464c      	movgt	r4, r9
   b4e64:	e7f6      	b.n	b4e54 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b4e66:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b4e6a:	f7ff ffbb 	bl	b4de4 <_Z14reproducirNOTAii>
   b4e6e:	e7f1      	b.n	b4e54 <_Z10reproducirv+0x3c>

      }

   } else {
      Serial.println("Finaliza el bucle antes de reproducir");
   b4e70:	f004 fc28 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4e74:	490c      	ldr	r1, [pc, #48]	; (b4ea8 <_Z10reproducirv+0x90>)
   b4e76:	f004 f940 	bl	b90fa <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b4e7a:	490c      	ldr	r1, [pc, #48]	; (b4eac <_Z10reproducirv+0x94>)
   b4e7c:	4668      	mov	r0, sp
   b4e7e:	f004 f86e 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4e82:	2002      	movs	r0, #2
   b4e84:	466a      	mov	r2, sp
   b4e86:	2104      	movs	r1, #4
   b4e88:	f7ff fd22 	bl	b48d0 <_Z10showBitmapii6String>
   b4e8c:	4668      	mov	r0, sp
   b4e8e:	f004 f81b 	bl	b8ec8 <_ZN6StringD1Ev>
   }
   
}
   b4e92:	b004      	add	sp, #16
   b4e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e98:	2003d32c 	.word	0x2003d32c
   b4e9c:	2003d3e8 	.word	0x2003d3e8
   b4ea0:	2003d730 	.word	0x2003d730
   b4ea4:	000babcf 	.word	0x000babcf
   b4ea8:	000babd7 	.word	0x000babd7
   b4eac:	000badae 	.word	0x000badae
   b4eb0:	2003da60 	.word	0x2003da60

000b4eb4 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b4eb4:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4eb6:	4b0d      	ldr	r3, [pc, #52]	; (b4eec <_Z13isValidSensori+0x38>)
   b4eb8:	681a      	ldr	r2, [r3, #0]
   b4eba:	4b0d      	ldr	r3, [pc, #52]	; (b4ef0 <_Z13isValidSensori+0x3c>)
   b4ebc:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b4ec0:	434a      	muls	r2, r1
   b4ec2:	5899      	ldr	r1, [r3, r2]
   b4ec4:	4413      	add	r3, r2
   b4ec6:	2200      	movs	r2, #0
   b4ec8:	4291      	cmp	r1, r2
   b4eca:	dd0d      	ble.n	b4ee8 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b4ecc:	685c      	ldr	r4, [r3, #4]
   b4ece:	4284      	cmp	r4, r0
   b4ed0:	f103 0310 	add.w	r3, r3, #16
   b4ed4:	d106      	bne.n	b4ee4 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b4ed6:	f004 fbf5 	bl	b96c4 <_Z16_fetch_usbserialv>
   b4eda:	4906      	ldr	r1, [pc, #24]	; (b4ef4 <_Z13isValidSensori+0x40>)
   b4edc:	f004 f90d 	bl	b90fa <_ZN5Print7printlnEPKc>
   b4ee0:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b4ee2:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b4ee4:	3201      	adds	r2, #1
   b4ee6:	e7ef      	b.n	b4ec8 <_Z13isValidSensori+0x14>
  return true;
   b4ee8:	2001      	movs	r0, #1
   b4eea:	e7fa      	b.n	b4ee2 <_Z13isValidSensori+0x2e>
   b4eec:	2003cca4 	.word	0x2003cca4
   b4ef0:	2003cd54 	.word	0x2003cd54
   b4ef4:	000babfd 	.word	0x000babfd

000b4ef8 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b4efa:	4b11      	ldr	r3, [pc, #68]	; (b4f40 <_Z11isNewSensori+0x48>)
   b4efc:	4a11      	ldr	r2, [pc, #68]	; (b4f44 <_Z11isNewSensori+0x4c>)
   b4efe:	681e      	ldr	r6, [r3, #0]
   b4f00:	4694      	mov	ip, r2
   b4f02:	2300      	movs	r3, #0
   b4f04:	429e      	cmp	r6, r3
   b4f06:	db17      	blt.n	b4f38 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f08:	6817      	ldr	r7, [r2, #0]
   b4f0a:	4615      	mov	r5, r2
   b4f0c:	2100      	movs	r1, #0
   b4f0e:	428f      	cmp	r7, r1
   b4f10:	dd0e      	ble.n	b4f30 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b4f12:	686c      	ldr	r4, [r5, #4]
   b4f14:	4284      	cmp	r4, r0
   b4f16:	f105 0510 	add.w	r5, r5, #16
   b4f1a:	d107      	bne.n	b4f2c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b4f1c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4f20:	4353      	muls	r3, r2
   b4f22:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b4f26:	4463      	add	r3, ip
   b4f28:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b4f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b4f2c:	3101      	adds	r1, #1
   b4f2e:	e7ee      	b.n	b4f0e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b4f30:	3301      	adds	r3, #1
   b4f32:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b4f36:	e7e5      	b.n	b4f04 <_Z11isNewSensori+0xc>
  return -1;
   b4f38:	f04f 30ff 	mov.w	r0, #4294967295
   b4f3c:	e7f5      	b.n	b4f2a <_Z11isNewSensori+0x32>
   b4f3e:	bf00      	nop
   b4f40:	2003cca4 	.word	0x2003cca4
   b4f44:	2003cd54 	.word	0x2003cd54

000b4f48 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b4f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f4c:	4d19      	ldr	r5, [pc, #100]	; (b4fb4 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b4f4e:	4b1a      	ldr	r3, [pc, #104]	; (b4fb8 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f50:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b4f54:	681f      	ldr	r7, [r3, #0]
{
   b4f56:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f58:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b4f5a:	2400      	movs	r4, #0
   b4f5c:	42a7      	cmp	r7, r4
   b4f5e:	db23      	blt.n	b4fa8 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b4f60:	d110      	bne.n	b4f84 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4f62:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b4f66:	461a      	mov	r2, r3
   b4f68:	2600      	movs	r6, #0
   b4f6a:	45b0      	cmp	r8, r6
   b4f6c:	dd0a      	ble.n	b4f84 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b4f6e:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b4f72:	4560      	cmp	r0, ip
   b4f74:	d103      	bne.n	b4f7e <_Z15isValidActuadorii+0x36>
   b4f76:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b4f7a:	4288      	cmp	r0, r1
   b4f7c:	d017      	beq.n	b4fae <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b4f7e:	3601      	adds	r6, #1
   b4f80:	3214      	adds	r2, #20
   b4f82:	e7f2      	b.n	b4f6a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b4f84:	2f01      	cmp	r7, #1
   b4f86:	d10b      	bne.n	b4fa0 <_Z15isValidActuadorii+0x58>
   b4f88:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f8a:	2200      	movs	r2, #0
   b4f8c:	4596      	cmp	lr, r2
   b4f8e:	dd07      	ble.n	b4fa0 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b4f90:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b4f94:	4288      	cmp	r0, r1
   b4f96:	f106 0614 	add.w	r6, r6, #20
   b4f9a:	d008      	beq.n	b4fae <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b4f9c:	3201      	adds	r2, #1
   b4f9e:	e7f5      	b.n	b4f8c <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b4fa0:	3401      	adds	r4, #1
   b4fa2:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b4fa6:	e7d9      	b.n	b4f5c <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b4fa8:	2001      	movs	r0, #1
}
   b4faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b4fae:	2000      	movs	r0, #0
   b4fb0:	e7fb      	b.n	b4faa <_Z15isValidActuadorii+0x62>
   b4fb2:	bf00      	nop
   b4fb4:	2003cd54 	.word	0x2003cd54
   b4fb8:	2003cca4 	.word	0x2003cca4

000b4fbc <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b4fbe:	4b13      	ldr	r3, [pc, #76]	; (b500c <_Z13isNewActuadori+0x50>)
   b4fc0:	4a13      	ldr	r2, [pc, #76]	; (b5010 <_Z13isNewActuadori+0x54>)
   b4fc2:	681e      	ldr	r6, [r3, #0]
   b4fc4:	4694      	mov	ip, r2
   b4fc6:	2300      	movs	r3, #0
   b4fc8:	429e      	cmp	r6, r3
   b4fca:	db1b      	blt.n	b5004 <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4fcc:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b4fd0:	4615      	mov	r5, r2
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	428f      	cmp	r7, r1
   b4fd6:	dd11      	ble.n	b4ffc <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b4fd8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b4fdc:	4284      	cmp	r4, r0
   b4fde:	f105 0514 	add.w	r5, r5, #20
   b4fe2:	d109      	bne.n	b4ff8 <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b4fe4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b4fe8:	4353      	muls	r3, r2
   b4fea:	2214      	movs	r2, #20
   b4fec:	fb02 3301 	mla	r3, r2, r1, r3
   b4ff0:	4463      	add	r3, ip
   b4ff2:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b4ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b4ff8:	3101      	adds	r1, #1
   b4ffa:	e7eb      	b.n	b4fd4 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b4ffc:	3301      	adds	r3, #1
   b4ffe:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5002:	e7e1      	b.n	b4fc8 <_Z13isNewActuadori+0xc>
  return -1;
   b5004:	f04f 30ff 	mov.w	r0, #4294967295
   b5008:	e7f5      	b.n	b4ff6 <_Z13isNewActuadori+0x3a>
   b500a:	bf00      	nop
   b500c:	2003cca4 	.word	0x2003cca4
   b5010:	2003cd54 	.word	0x2003cd54

000b5014 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5014:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5016:	4b0c      	ldr	r3, [pc, #48]	; (b5048 <_Z14isActuadorDualii+0x34>)
   b5018:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b501c:	fb02 3101 	mla	r1, r2, r1, r3
   b5020:	2200      	movs	r2, #0
   b5022:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5026:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5028:	4294      	cmp	r4, r2
   b502a:	dd08      	ble.n	b503e <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b502c:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5030:	4285      	cmp	r5, r0
   b5032:	d101      	bne.n	b5038 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5034:	b92b      	cbnz	r3, b5042 <_Z14isActuadorDualii+0x2e>
   b5036:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5038:	3201      	adds	r2, #1
   b503a:	3114      	adds	r1, #20
   b503c:	e7f4      	b.n	b5028 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b503e:	2000      	movs	r0, #0
}
   b5040:	bd30      	pop	{r4, r5, pc}
      return true;
   b5042:	4618      	mov	r0, r3
   b5044:	e7fc      	b.n	b5040 <_Z14isActuadorDualii+0x2c>
   b5046:	bf00      	nop
   b5048:	2003cd54 	.word	0x2003cd54

000b504c <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b504c:	b084      	sub	sp, #16
   b504e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5050:	ac06      	add	r4, sp, #24
   b5052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5056:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b505a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b505c:	f7ff f9ee 	bl	b443c <_Z10leerSensoriii>
   b5060:	ad06      	add	r5, sp, #24
   b5062:	4604      	mov	r4, r0
   
   for (int i = 1; i < bloque.numSensores; i++)
   b5064:	afbc      	add	r7, sp, #752	; 0x2f0
   b5066:	2601      	movs	r6, #1
   b5068:	9b06      	ldr	r3, [sp, #24]
   b506a:	42b3      	cmp	r3, r6
   b506c:	dd12      	ble.n	b5094 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b506e:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5072:	6a2a      	ldr	r2, [r5, #32]
   b5074:	f7ff f9e2 	bl	b443c <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5078:	f817 3b01 	ldrb.w	r3, [r7], #1
   b507c:	b133      	cbz	r3, b508c <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b507e:	2c00      	cmp	r4, #0
   b5080:	bf08      	it	eq
   b5082:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5084:	3601      	adds	r6, #1
   b5086:	3510      	adds	r5, #16
   b5088:	4604      	mov	r4, r0
   b508a:	e7ed      	b.n	b5068 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b508c:	2c00      	cmp	r4, #0
   b508e:	bf18      	it	ne
   b5090:	4620      	movne	r0, r4
   b5092:	e7f7      	b.n	b5084 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5094:	4620      	mov	r0, r4
   b5096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b509a:	b004      	add	sp, #16
   b509c:	4770      	bx	lr
	...

000b50a0 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b50a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b50a4:	4c16      	ldr	r4, [pc, #88]	; (b5100 <_Z18ejecutarEvaluacionbi+0x60>)
   b50a6:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b50aa:	fb03 4401 	mla	r4, r3, r1, r4
   b50ae:	4607      	mov	r7, r0
   b50b0:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b50b2:	2600      	movs	r6, #0
   b50b4:	46a1      	mov	r9, r4
   b50b6:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b50ba:	42b3      	cmp	r3, r6
   b50bc:	dd1c      	ble.n	b50f8 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b50be:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b50c2:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b50c6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b50ca:	42bb      	cmp	r3, r7
   b50cc:	d107      	bne.n	b50de <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b50ce:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b50d2:	4640      	mov	r0, r8
   b50d4:	f7ff fbf0 	bl	b48b8 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b50d8:	3601      	adds	r6, #1
   b50da:	3414      	adds	r4, #20
   b50dc:	e7eb      	b.n	b50b6 <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b50de:	4629      	mov	r1, r5
   b50e0:	4640      	mov	r0, r8
   b50e2:	9201      	str	r2, [sp, #4]
   b50e4:	f7ff ff96 	bl	b5014 <_Z14isActuadorDualii>
   b50e8:	9a01      	ldr	r2, [sp, #4]
   b50ea:	2800      	cmp	r0, #0
   b50ec:	d1f4      	bne.n	b50d8 <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b50ee:	4611      	mov	r1, r2
   b50f0:	4640      	mov	r0, r8
   b50f2:	f7ff fbd9 	bl	b48a8 <_Z14apagarActuadorii>
   b50f6:	e7ef      	b.n	b50d8 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b50f8:	b003      	add	sp, #12
   b50fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b50fe:	bf00      	nop
   b5100:	2003cd54 	.word	0x2003cd54

000b5104 <_Z10cambioModoi>:


void cambioModo(int modo)
{
   b5104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b5106:	4604      	mov	r4, r0
   b5108:	b9e0      	cbnz	r0, b5144 <_Z10cambioModoi+0x40>

      Serial.println("Modo BASICO detectado");
   b510a:	f004 fadb 	bl	b96c4 <_Z16_fetch_usbserialv>
   b510e:	4918      	ldr	r1, [pc, #96]	; (b5170 <_Z10cambioModoi+0x6c>)
   b5110:	f003 fff3 	bl	b90fa <_ZN5Print7printlnEPKc>
      MODE = 0;
   b5114:	4b17      	ldr	r3, [pc, #92]	; (b5174 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b5116:	4918      	ldr	r1, [pc, #96]	; (b5178 <_Z10cambioModoi+0x74>)
      MODE = 0;
   b5118:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");

   } else if (modo == 2) {
      Serial.println("Modo MUSICA detectado");
      MODE = 2;
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b511a:	4668      	mov	r0, sp
   b511c:	f003 ff1f 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5120:	2003      	movs	r0, #3
   b5122:	466a      	mov	r2, sp
   b5124:	2100      	movs	r1, #0
   b5126:	f7ff fbd3 	bl	b48d0 <_Z10showBitmapii6String>
   b512a:	4668      	mov	r0, sp
   b512c:	f003 fecc 	bl	b8ec8 <_ZN6StringD1Ev>

   }
   EEPROM.put(0, MODE);
   b5130:	f004 fd88 	bl	b9c44 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5134:	490f      	ldr	r1, [pc, #60]	; (b5174 <_Z10cambioModoi+0x70>)
   b5136:	2201      	movs	r2, #1
   b5138:	2000      	movs	r0, #0
}
   b513a:	b004      	add	sp, #16
   b513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5140:	f003 bb60 	b.w	b8804 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b5144:	2801      	cmp	r0, #1
   b5146:	d108      	bne.n	b515a <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b5148:	f004 fabc 	bl	b96c4 <_Z16_fetch_usbserialv>
   b514c:	490b      	ldr	r1, [pc, #44]	; (b517c <_Z10cambioModoi+0x78>)
   b514e:	f003 ffd4 	bl	b90fa <_ZN5Print7printlnEPKc>
      MODE = 1;
   b5152:	4b08      	ldr	r3, [pc, #32]	; (b5174 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b5154:	490a      	ldr	r1, [pc, #40]	; (b5180 <_Z10cambioModoi+0x7c>)
      MODE = 1;
   b5156:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b5158:	e7df      	b.n	b511a <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b515a:	2802      	cmp	r0, #2
   b515c:	d1e8      	bne.n	b5130 <_Z10cambioModoi+0x2c>
      Serial.println("Modo MUSICA detectado");
   b515e:	f004 fab1 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5162:	4908      	ldr	r1, [pc, #32]	; (b5184 <_Z10cambioModoi+0x80>)
   b5164:	f003 ffc9 	bl	b90fa <_ZN5Print7printlnEPKc>
      MODE = 2;
   b5168:	4b02      	ldr	r3, [pc, #8]	; (b5174 <_Z10cambioModoi+0x70>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b516a:	4907      	ldr	r1, [pc, #28]	; (b5188 <_Z10cambioModoi+0x84>)
      MODE = 2;
   b516c:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b516e:	e7d4      	b.n	b511a <_Z10cambioModoi+0x16>
   b5170:	000bac2d 	.word	0x000bac2d
   b5174:	2003cd42 	.word	0x2003cd42
   b5178:	000bac43 	.word	0x000bac43
   b517c:	000bac5c 	.word	0x000bac5c
   b5180:	000bac74 	.word	0x000bac74
   b5184:	000bac8f 	.word	0x000bac8f
   b5188:	000baca5 	.word	0x000baca5

000b518c <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b518c:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b518e:	7803      	ldrb	r3, [r0, #0]
   b5190:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5192:	bf0c      	ite	eq
   b5194:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5196:	2200      	movne	r2, #0
   int i = 0;
   b5198:	4613      	mov	r3, r2
   b519a:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b519c:	240a      	movs	r4, #10
      i++;
   b519e:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b51a0:	f813 1b01 	ldrb.w	r1, [r3], #1
   b51a4:	3930      	subs	r1, #48	; 0x30
   b51a6:	b2cd      	uxtb	r5, r1
   b51a8:	2d09      	cmp	r5, #9
   b51aa:	d802      	bhi.n	b51b2 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b51ac:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b51b0:	e7f6      	b.n	b51a0 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b51b2:	b102      	cbz	r2, b51b6 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b51b4:	4240      	negs	r0, r0
   return num;
}
   b51b6:	bd30      	pop	{r4, r5, pc}

000b51b8 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b51b8:	b538      	push	{r3, r4, r5, lr}
   b51ba:	4614      	mov	r4, r2
   b51bc:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b51be:	f005 fb0b 	bl	ba7d8 <strtok>
   int j = 0;
   b51c2:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b51c4:	b140      	cbz	r0, b51d8 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b51c6:	f7ff ffe1 	bl	b518c <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b51ca:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b51cc:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b51d0:	2000      	movs	r0, #0
   b51d2:	f005 fb01 	bl	ba7d8 <strtok>
   while (ptr != NULL)
   b51d6:	e7f5      	b.n	b51c4 <_Z5splitPcS_Pi+0xc>
   }
}
   b51d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b51dc <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b51dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51de:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b51e2:	f10d 0307 	add.w	r3, sp, #7
   b51e6:	460a      	mov	r2, r1
   b51e8:	4601      	mov	r1, r0
   b51ea:	480d      	ldr	r0, [pc, #52]	; (b5220 <_Z17readDataFromBlockhPhh+0x44>)
   b51ec:	4d0d      	ldr	r5, [pc, #52]	; (b5224 <_Z17readDataFromBlockhPhh+0x48>)
   b51ee:	f002 fabf 	bl	b7770 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b51f2:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b51f4:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b51f6:	d010      	beq.n	b521a <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b51f8:	f004 fa64 	bl	b96c4 <_Z16_fetch_usbserialv>
   b51fc:	490a      	ldr	r1, [pc, #40]	; (b5228 <_Z17readDataFromBlockhPhh+0x4c>)
   b51fe:	f003 ff69 	bl	b90d4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5202:	f004 fa5f 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5206:	7829      	ldrb	r1, [r5, #0]
   b5208:	4604      	mov	r4, r0
   b520a:	4805      	ldr	r0, [pc, #20]	; (b5220 <_Z17readDataFromBlockhPhh+0x44>)
   b520c:	f002 f804 	bl	b7218 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5210:	4601      	mov	r1, r0
   b5212:	4620      	mov	r0, r4
   b5214:	f003 ff71 	bl	b90fa <_ZN5Print7printlnEPKc>
   b5218:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b521a:	b003      	add	sp, #12
   b521c:	bd30      	pop	{r4, r5, pc}
   b521e:	bf00      	nop
   b5220:	2003d720 	.word	0x2003d720
   b5224:	2003dc5c 	.word	0x2003dc5c
   b5228:	000bacbe 	.word	0x000bacbe

000b522c <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b522c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b522e:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5230:	4d1e      	ldr	r5, [pc, #120]	; (b52ac <_Z8getTagIDPi+0x80>)
   b5232:	4a1f      	ldr	r2, [pc, #124]	; (b52b0 <_Z8getTagIDPi+0x84>)
   b5234:	9500      	str	r5, [sp, #0]
   b5236:	4b1f      	ldr	r3, [pc, #124]	; (b52b4 <_Z8getTagIDPi+0x88>)
   b5238:	7812      	ldrb	r2, [r2, #0]
   b523a:	4f1f      	ldr	r7, [pc, #124]	; (b52b8 <_Z8getTagIDPi+0x8c>)
{
   b523c:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b523e:	2160      	movs	r1, #96	; 0x60
   b5240:	4628      	mov	r0, r5
   b5242:	f002 fab6 	bl	b77b2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5246:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5248:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b524a:	d00f      	beq.n	b526c <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b524c:	f004 fa3a 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5250:	491a      	ldr	r1, [pc, #104]	; (b52bc <_Z8getTagIDPi+0x90>)
   b5252:	f003 ff3f 	bl	b90d4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5256:	f004 fa35 	bl	b96c4 <_Z16_fetch_usbserialv>
   b525a:	7839      	ldrb	r1, [r7, #0]
   b525c:	4604      	mov	r4, r0
   b525e:	4628      	mov	r0, r5
   b5260:	f001 ffda 	bl	b7218 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5264:	4601      	mov	r1, r0
   b5266:	4620      	mov	r0, r4
   b5268:	f003 ff47 	bl	b90fa <_ZN5Print7printlnEPKc>
   //writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b526c:	4b14      	ldr	r3, [pc, #80]	; (b52c0 <_Z8getTagIDPi+0x94>)
   b526e:	2212      	movs	r2, #18
   b5270:	7818      	ldrb	r0, [r3, #0]
   b5272:	a907      	add	r1, sp, #28
   b5274:	f7ff ffb2 	bl	b51dc <_Z17readDataFromBlockhPhh>
   b5278:	b1b0      	cbz	r0, b52a8 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b527a:	ac07      	add	r4, sp, #28
   b527c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b527e:	ad03      	add	r5, sp, #12
   b5280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5282:	6823      	ldr	r3, [r4, #0]
   b5284:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b5286:	f004 fa1d 	bl	b96c4 <_Z16_fetch_usbserialv>
   b528a:	490e      	ldr	r1, [pc, #56]	; (b52c4 <_Z8getTagIDPi+0x98>)
   b528c:	aa03      	add	r2, sp, #12
   b528e:	f7fe ff47 	bl	b4120 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5292:	490d      	ldr	r1, [pc, #52]	; (b52c8 <_Z8getTagIDPi+0x9c>)
   b5294:	4632      	mov	r2, r6
   b5296:	a803      	add	r0, sp, #12
   b5298:	f7ff ff8e 	bl	b51b8 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b529c:	4803      	ldr	r0, [pc, #12]	; (b52ac <_Z8getTagIDPi+0x80>)
   b529e:	f002 fa42 	bl	b7726 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b52a2:	4802      	ldr	r0, [pc, #8]	; (b52ac <_Z8getTagIDPi+0x80>)
   b52a4:	f002 f89f 	bl	b73e6 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b52a8:	b00d      	add	sp, #52	; 0x34
   b52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b52ac:	2003d720 	.word	0x2003d720
   b52b0:	2003ccc4 	.word	0x2003ccc4
   b52b4:	2003d711 	.word	0x2003d711
   b52b8:	2003dc5c 	.word	0x2003dc5c
   b52bc:	000bacd5 	.word	0x000bacd5
   b52c0:	2003cc9c 	.word	0x2003cc9c
   b52c4:	000bacf1 	.word	0x000bacf1
   b52c8:	2003cc9d 	.word	0x2003cc9d

000b52cc <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b52cc:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b52ce:	b940      	cbnz	r0, b52e2 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b52d0:	4b32      	ldr	r3, [pc, #200]	; (b539c <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b52d2:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b52d4:	2c05      	cmp	r4, #5
   b52d6:	d858      	bhi.n	b538a <_Z13asignarPuertoi+0xbe>
   b52d8:	e8df f004 	tbb	[pc, r4]
   b52dc:	32221305 	.word	0x32221305
   b52e0:	483d      	.short	0x483d
      option = puertoDigital;
   b52e2:	4b2f      	ldr	r3, [pc, #188]	; (b53a0 <_Z13asignarPuertoi+0xd4>)
   b52e4:	e7f5      	b.n	b52d2 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b52e6:	f004 f9ed 	bl	b96c4 <_Z16_fetch_usbserialv>
   b52ea:	492e      	ldr	r1, [pc, #184]	; (b53a4 <_Z13asignarPuertoi+0xd8>)
   b52ec:	f003 fef2 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b52f0:	4a2a      	ldr	r2, [pc, #168]	; (b539c <_Z13asignarPuertoi+0xd0>)
   b52f2:	6813      	ldr	r3, [r2, #0]
   b52f4:	3301      	adds	r3, #1
   b52f6:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b52f8:	4a2b      	ldr	r2, [pc, #172]	; (b53a8 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b52fa:	6813      	ldr	r3, [r2, #0]
   b52fc:	3301      	adds	r3, #1
   b52fe:	6013      	str	r3, [r2, #0]
      return 4;
   b5300:	e01c      	b.n	b533c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5302:	f004 f9df 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5306:	4929      	ldr	r1, [pc, #164]	; (b53ac <_Z13asignarPuertoi+0xe0>)
   b5308:	f003 fee4 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b530c:	4a23      	ldr	r2, [pc, #140]	; (b539c <_Z13asignarPuertoi+0xd0>)
   b530e:	6813      	ldr	r3, [r2, #0]
   b5310:	3301      	adds	r3, #1
   b5312:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5314:	4a24      	ldr	r2, [pc, #144]	; (b53a8 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b5316:	6813      	ldr	r3, [r2, #0]
   b5318:	3301      	adds	r3, #1
   b531a:	6013      	str	r3, [r2, #0]
      return 2;
   b531c:	2402      	movs	r4, #2
   b531e:	e00d      	b.n	b533c <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5320:	f004 f9d0 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5324:	4922      	ldr	r1, [pc, #136]	; (b53b0 <_Z13asignarPuertoi+0xe4>)
   b5326:	f003 fed5 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b532a:	4b1c      	ldr	r3, [pc, #112]	; (b539c <_Z13asignarPuertoi+0xd0>)
   b532c:	f04f 32ff 	mov.w	r2, #4294967295
   b5330:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5332:	4a1d      	ldr	r2, [pc, #116]	; (b53a8 <_Z13asignarPuertoi+0xdc>)
   b5334:	6813      	ldr	r3, [r2, #0]
   b5336:	3301      	adds	r3, #1
   b5338:	6013      	str	r3, [r2, #0]
      return 4;
   b533a:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
   b533c:	4620      	mov	r0, r4
   b533e:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5340:	f004 f9c0 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5344:	491b      	ldr	r1, [pc, #108]	; (b53b4 <_Z13asignarPuertoi+0xe8>)
   b5346:	f003 fec5 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b534a:	4a15      	ldr	r2, [pc, #84]	; (b53a0 <_Z13asignarPuertoi+0xd4>)
   b534c:	6813      	ldr	r3, [r2, #0]
   b534e:	3301      	adds	r3, #1
   b5350:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5352:	4a19      	ldr	r2, [pc, #100]	; (b53b8 <_Z13asignarPuertoi+0xec>)
   b5354:	e7df      	b.n	b5316 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b5356:	f004 f9b5 	bl	b96c4 <_Z16_fetch_usbserialv>
   b535a:	4918      	ldr	r1, [pc, #96]	; (b53bc <_Z13asignarPuertoi+0xf0>)
   b535c:	f003 feba 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5360:	4a0f      	ldr	r2, [pc, #60]	; (b53a0 <_Z13asignarPuertoi+0xd4>)
   b5362:	6813      	ldr	r3, [r2, #0]
   b5364:	3301      	adds	r3, #1
   b5366:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5368:	4a13      	ldr	r2, [pc, #76]	; (b53b8 <_Z13asignarPuertoi+0xec>)
   b536a:	e7c6      	b.n	b52fa <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b536c:	f004 f9aa 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5370:	4913      	ldr	r1, [pc, #76]	; (b53c0 <_Z13asignarPuertoi+0xf4>)
   b5372:	f003 feaf 	bl	b90d4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b5376:	4b0a      	ldr	r3, [pc, #40]	; (b53a0 <_Z13asignarPuertoi+0xd4>)
   b5378:	f04f 32ff 	mov.w	r2, #4294967295
   b537c:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b537e:	4a0e      	ldr	r2, [pc, #56]	; (b53b8 <_Z13asignarPuertoi+0xec>)
   b5380:	6813      	ldr	r3, [r2, #0]
   b5382:	3301      	adds	r3, #1
   b5384:	6013      	str	r3, [r2, #0]
      return 6;
   b5386:	2406      	movs	r4, #6
   b5388:	e7d8      	b.n	b533c <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b538a:	f004 f99b 	bl	b96c4 <_Z16_fetch_usbserialv>
   b538e:	490d      	ldr	r1, [pc, #52]	; (b53c4 <_Z13asignarPuertoi+0xf8>)
   b5390:	f003 fea0 	bl	b90d4 <_ZN5Print5printEPKc>
      return -1;
   b5394:	f04f 34ff 	mov.w	r4, #4294967295
   b5398:	e7d0      	b.n	b533c <_Z13asignarPuertoi+0x70>
   b539a:	bf00      	nop
   b539c:	2003da68 	.word	0x2003da68
   b53a0:	2003cca8 	.word	0x2003cca8
   b53a4:	000bacfd 	.word	0x000bacfd
   b53a8:	2003da6c 	.word	0x2003da6c
   b53ac:	000bad14 	.word	0x000bad14
   b53b0:	000bad2b 	.word	0x000bad2b
   b53b4:	000bad42 	.word	0x000bad42
   b53b8:	2003da70 	.word	0x2003da70
   b53bc:	000bad59 	.word	0x000bad59
   b53c0:	000bad70 	.word	0x000bad70
   b53c4:	000bad87 	.word	0x000bad87

000b53c8 <setup>:

// Unconnected mode ON, evita conexion wifi.
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b53c8:	b570      	push	{r4, r5, r6, lr}
   b53ca:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b53cc:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b53ce:	a807      	add	r0, sp, #28
   b53d0:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b53d4:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b53d8:	f004 f884 	bl	b94e4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b53dc:	4843      	ldr	r0, [pc, #268]	; (b54ec <setup+0x124>)
   b53de:	4623      	mov	r3, r4
   b53e0:	4622      	mov	r2, r4
   b53e2:	4621      	mov	r1, r4
   b53e4:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b53e6:	4c42      	ldr	r4, [pc, #264]	; (b54f0 <setup+0x128>)
   b53e8:	f003 fb98 	bl	b8b1c <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b53ec:	f004 f96a 	bl	b96c4 <_Z16_fetch_usbserialv>
   b53f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b53f4:	f004 f95a 	bl	b96ac <_ZN9USBSerial5beginEl>
   b53f8:	7821      	ldrb	r1, [r4, #0]
   b53fa:	f3bf 8f5b 	dmb	ish
   b53fe:	f011 0101 	ands.w	r1, r1, #1
   b5402:	d10b      	bne.n	b541c <setup+0x54>
   b5404:	4620      	mov	r0, r4
   b5406:	9105      	str	r1, [sp, #20]
   b5408:	f7fe fe56 	bl	b40b8 <__cxa_guard_acquire>
   b540c:	9905      	ldr	r1, [sp, #20]
   b540e:	b128      	cbz	r0, b541c <setup+0x54>
   b5410:	4838      	ldr	r0, [pc, #224]	; (b54f4 <setup+0x12c>)
   b5412:	f003 fc4f 	bl	b8cb4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5416:	4620      	mov	r0, r4
   b5418:	f7fe fe53 	bl	b40c2 <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b541c:	4835      	ldr	r0, [pc, #212]	; (b54f4 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b541e:	4c36      	ldr	r4, [pc, #216]	; (b54f8 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5420:	2501      	movs	r5, #1
   b5422:	f003 fc51 	bl	b8cc8 <_ZN8SPIClass5beginEv>
   b5426:	462b      	mov	r3, r5
   b5428:	223c      	movs	r2, #60	; 0x3c
   b542a:	2102      	movs	r1, #2
   b542c:	4833      	ldr	r0, [pc, #204]	; (b54fc <setup+0x134>)
   b542e:	9500      	str	r5, [sp, #0]
   b5430:	f002 fda8 	bl	b7f84 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5434:	4831      	ldr	r0, [pc, #196]	; (b54fc <setup+0x134>)
   b5436:	f002 fd97 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b543a:	4830      	ldr	r0, [pc, #192]	; (b54fc <setup+0x134>)
   b543c:	f002 fffc 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5440:	482f      	ldr	r0, [pc, #188]	; (b5500 <setup+0x138>)
   b5442:	f002 f834 	bl	b74ae <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b5446:	4a2f      	ldr	r2, [pc, #188]	; (b5504 <setup+0x13c>)
   b5448:	21ff      	movs	r1, #255	; 0xff
   b544a:	7011      	strb	r1, [r2, #0]
   b544c:	7051      	strb	r1, [r2, #1]
   b544e:	7091      	strb	r1, [r2, #2]
   b5450:	70d1      	strb	r1, [r2, #3]
   b5452:	7111      	strb	r1, [r2, #4]
   b5454:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b5456:	f004 fbf5 	bl	b9c44 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b545a:	2000      	movs	r0, #0
   b545c:	f003 f9ca 	bl	b87f4 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5460:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5462:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5464:	d10d      	bne.n	b5482 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b5466:	f004 f92d 	bl	b96c4 <_Z16_fetch_usbserialv>
    MODE = 0;
   b546a:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b546c:	4926      	ldr	r1, [pc, #152]	; (b5508 <setup+0x140>)
   b546e:	f003 fe44 	bl	b90fa <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5472:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5474:	f004 fbe6 	bl	b9c44 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5478:	462a      	mov	r2, r5
   b547a:	4621      	mov	r1, r4
   b547c:	4630      	mov	r0, r6
   b547e:	f003 f9c1 	bl	b8804 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b5482:	7824      	ldrb	r4, [r4, #0]
   b5484:	bb54      	cbnz	r4, b54dc <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b5486:	2101      	movs	r1, #1
   b5488:	2006      	movs	r0, #6
   b548a:	f004 fb45 	bl	b9b18 <pinMode>
    ledObject.init();
   b548e:	481f      	ldr	r0, [pc, #124]	; (b550c <setup+0x144>)
   b5490:	f003 f91e 	bl	b86d0 <_ZN12ChainableLED4initEv>
    init = true;
   b5494:	4b1e      	ldr	r3, [pc, #120]	; (b5510 <setup+0x148>)
   b5496:	2201      	movs	r2, #1
   b5498:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b549a:	4a1e      	ldr	r2, [pc, #120]	; (b5514 <setup+0x14c>)
   b549c:	6813      	ldr	r3, [r2, #0]
   b549e:	3301      	adds	r3, #1
   b54a0:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b54a2:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b54a6:	4a1c      	ldr	r2, [pc, #112]	; (b5518 <setup+0x150>)
   b54a8:	434b      	muls	r3, r1
   b54aa:	18d1      	adds	r1, r2, r3
   b54ac:	50d4      	str	r4, [r2, r3]
   b54ae:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b54b2:	2340      	movs	r3, #64	; 0x40
   b54b4:	2201      	movs	r2, #1
   b54b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b54ba:	2200      	movs	r2, #0
   b54bc:	2380      	movs	r3, #128	; 0x80
   b54be:	4611      	mov	r1, r2
   b54c0:	9300      	str	r3, [sp, #0]
   b54c2:	480e      	ldr	r0, [pc, #56]	; (b54fc <setup+0x134>)
   b54c4:	4b15      	ldr	r3, [pc, #84]	; (b551c <setup+0x154>)
   b54c6:	f001 fc47 	bl	b6d58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b54ca:	480c      	ldr	r0, [pc, #48]	; (b54fc <setup+0x134>)
   b54cc:	f002 ffb4 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
   b54d0:	f003 f980 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b54d4:	4b12      	ldr	r3, [pc, #72]	; (b5520 <setup+0x158>)
   b54d6:	6018      	str	r0, [r3, #0]
  
}
   b54d8:	b00a      	add	sp, #40	; 0x28
   b54da:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b54dc:	2c01      	cmp	r4, #1
   b54de:	d0e8      	beq.n	b54b2 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b54e0:	2101      	movs	r1, #1
   b54e2:	2006      	movs	r0, #6
   b54e4:	f004 fb18 	bl	b9b18 <pinMode>
   b54e8:	e7e3      	b.n	b54b2 <setup+0xea>
   b54ea:	bf00      	nop
   b54ec:	2003e710 	.word	0x2003e710
   b54f0:	2003cd34 	.word	0x2003cd34
   b54f4:	2003cd38 	.word	0x2003cd38
   b54f8:	2003cd42 	.word	0x2003cd42
   b54fc:	2003d378 	.word	0x2003d378
   b5500:	2003d720 	.word	0x2003d720
   b5504:	2003d711 	.word	0x2003d711
   b5508:	000badaf 	.word	0x000badaf
   b550c:	2003d718 	.word	0x2003d718
   b5510:	2003d710 	.word	0x2003d710
   b5514:	2003cca4 	.word	0x2003cca4
   b5518:	2003cd54 	.word	0x2003cd54
   b551c:	000bb3e2 	.word	0x000bb3e2
   b5520:	2003dc58 	.word	0x2003dc58

000b5524 <loop>:
// Declaramos función reset en dirección 0.
void(* resetFunc) (void) = 0;


void loop()
{
   b5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  if (iniciando) {
   b5528:	f8df 82dc 	ldr.w	r8, [pc, #732]	; b5808 <loop+0x2e4>
   b552c:	f898 3000 	ldrb.w	r3, [r8]
{
   b5530:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
  if (iniciando) {
   b5534:	2b00      	cmp	r3, #0
   b5536:	d034      	beq.n	b55a2 <loop+0x7e>
   b5538:	f003 f94c 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b553c:	4f9b      	ldr	r7, [pc, #620]	; (b57ac <loop+0x288>)
    while(currentTime-startTime<limit){
   b553e:	f8df 9294 	ldr.w	r9, [pc, #660]	; b57d4 <loop+0x2b0>
   b5542:	f8df a294 	ldr.w	sl, [pc, #660]	; b57d8 <loop+0x2b4>
    currentTime = millis();
   b5546:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b5548:	f8d9 2000 	ldr.w	r2, [r9]
   b554c:	683b      	ldr	r3, [r7, #0]
   b554e:	1a9b      	subs	r3, r3, r2
   b5550:	f8da 2000 	ldr.w	r2, [sl]
   b5554:	4293      	cmp	r3, r2
   b5556:	d203      	bcs.n	b5560 <loop+0x3c>
   b5558:	f003 f93c 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b555c:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b555e:	e7f3      	b.n	b5548 <loop+0x24>
    }

    display.clearDisplay();
   b5560:	4e93      	ldr	r6, [pc, #588]	; (b57b0 <loop+0x28c>)
   b5562:	4630      	mov	r0, r6
   b5564:	f002 fd00 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b5568:	2101      	movs	r1, #1
   b556a:	4630      	mov	r0, r6
   b556c:	f001 fe37 	bl	b71de <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5570:	2400      	movs	r4, #0
   b5572:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5576:	e9c6 4304 	strd	r4, r3, [r6, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    if( MODE == 0 )
   b557a:	4b8e      	ldr	r3, [pc, #568]	; (b57b4 <loop+0x290>)
    {
      showBitmap(0,0,"");
   b557c:	498e      	ldr	r1, [pc, #568]	; (b57b8 <loop+0x294>)
    if( MODE == 0 )
   b557e:	781d      	ldrb	r5, [r3, #0]
      showBitmap(0,0,"");
   b5580:	a8c2      	add	r0, sp, #776	; 0x308
    if( MODE == 0 )
   b5582:	2d00      	cmp	r5, #0
   b5584:	d15d      	bne.n	b5642 <loop+0x11e>
      showBitmap(0,0,"");
   b5586:	f003 fcea 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b558a:	aac2      	add	r2, sp, #776	; 0x308
   b558c:	4629      	mov	r1, r5
   b558e:	4628      	mov	r0, r5
      showBitmap(0,2,"");
      bitmap=false;
      while(currentTime-startTime<limit){
        currentTime = millis();
      }
      showBitmap(1,2,"Zumbador:");
   b5590:	f7ff f99e 	bl	b48d0 <_Z10showBitmapii6String>
   b5594:	a8c2      	add	r0, sp, #776	; 0x308
   b5596:	f003 fc97 	bl	b8ec8 <_ZN6StringD1Ev>
      
    }
    iniciando = false;
   b559a:	2300      	movs	r3, #0
   b559c:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b55a0:	6133      	str	r3, [r6, #16]
    display.setCursor(0, 0);
  }
  
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b55a2:	4886      	ldr	r0, [pc, #536]	; (b57bc <loop+0x298>)
   b55a4:	4e86      	ldr	r6, [pc, #536]	; (b57c0 <loop+0x29c>)
   b55a6:	f002 f8ad 	bl	b7704 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b55aa:	b190      	cbz	r0, b55d2 <loop+0xae>
  {
    Serial.print("Tag Detectada --> ");
   b55ac:	f004 f88a 	bl	b96c4 <_Z16_fetch_usbserialv>
   b55b0:	4984      	ldr	r1, [pc, #528]	; (b57c4 <loop+0x2a0>)
   b55b2:	f003 fd8f 	bl	b90d4 <_ZN5Print5printEPKc>
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b55b6:	4881      	ldr	r0, [pc, #516]	; (b57bc <loop+0x298>)
   b55b8:	f002 fa75 	bl	b7aa6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    {
      // Not sure if restart loop or finish program.
      // return;
    }
    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b55bc:	4882      	ldr	r0, [pc, #520]	; (b57c8 <loop+0x2a4>)
   b55be:	f7ff fe35 	bl	b522c <_Z8getTagIDPi>

    play = false;
   b55c2:	2300      	movs	r3, #0
   b55c4:	7033      	strb	r3, [r6, #0]
    if ( MODE == 0 ) {
   b55c6:	4b7b      	ldr	r3, [pc, #492]	; (b57b4 <loop+0x290>)
   b55c8:	781b      	ldrb	r3, [r3, #0]
   b55ca:	2b00      	cmp	r3, #0
   b55cc:	d161      	bne.n	b5692 <loop+0x16e>
      pitidoOFF0();
   b55ce:	f7ff f82a 	bl	b4626 <_Z10pitidoOFF0v>
      pitidoOFF1(6);
    }
  
  }

  if (!play && init) {
   b55d2:	7833      	ldrb	r3, [r6, #0]
   b55d4:	b923      	cbnz	r3, b55e0 <loop+0xbc>
   b55d6:	4b7d      	ldr	r3, [pc, #500]	; (b57cc <loop+0x2a8>)
   b55d8:	781b      	ldrb	r3, [r3, #0]
   b55da:	b10b      	cbz	r3, b55e0 <loop+0xbc>
    ledApagar();
   b55dc:	f7fe ff7a 	bl	b44d4 <_Z9ledApagarv>
  }

  if (bitmap) {
   b55e0:	4d7b      	ldr	r5, [pc, #492]	; (b57d0 <loop+0x2ac>)
   b55e2:	782b      	ldrb	r3, [r5, #0]
   b55e4:	2b00      	cmp	r3, #0
   b55e6:	d065      	beq.n	b56b4 <loop+0x190>
   b55e8:	f003 f8f4 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b55ec:	4b6f      	ldr	r3, [pc, #444]	; (b57ac <loop+0x288>)
   b55ee:	6018      	str	r0, [r3, #0]
    // Si han pasado 4 segundos quitamos el bitmap/mensaje
    if ( currentTime-startTime >= limit ) {
   b55f0:	4b78      	ldr	r3, [pc, #480]	; (b57d4 <loop+0x2b0>)
   b55f2:	681b      	ldr	r3, [r3, #0]
   b55f4:	1ac0      	subs	r0, r0, r3
   b55f6:	4b78      	ldr	r3, [pc, #480]	; (b57d8 <loop+0x2b4>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	4298      	cmp	r0, r3
   b55fc:	d35a      	bcc.n	b56b4 <loop+0x190>
   b55fe:	486c      	ldr	r0, [pc, #432]	; (b57b0 <loop+0x28c>)
      bitmap=false;
      display.setCursor(0, 0);
      display.clearDisplay();
      display.display();

      for (int i = 0; i < posicion; i++)
   b5600:	4f76      	ldr	r7, [pc, #472]	; (b57dc <loop+0x2b8>)
      {
        if (i<23) {
          snprintf(buf, sizeof(buf), secuencia[i]);
        } else if (i==23){
          snprintf(buf, sizeof(buf), "...");
   b5602:	f8df 8208 	ldr.w	r8, [pc, #520]	; b580c <loop+0x2e8>
      bitmap=false;
   b5606:	2400      	movs	r4, #0
   b5608:	6104      	str	r4, [r0, #16]
   b560a:	702c      	strb	r4, [r5, #0]
      display.clearDisplay();
   b560c:	f002 fcac 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b5610:	4867      	ldr	r0, [pc, #412]	; (b57b0 <loop+0x28c>)
          snprintf(buf, sizeof(buf), "...");
   b5612:	4d73      	ldr	r5, [pc, #460]	; (b57e0 <loop+0x2bc>)
      display.display();
   b5614:	f002 ff10 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b5618:	683b      	ldr	r3, [r7, #0]
   b561a:	42a3      	cmp	r3, r4
   b561c:	dd4a      	ble.n	b56b4 <loop+0x190>
        if (i<23) {
   b561e:	2c16      	cmp	r4, #22
   b5620:	dc41      	bgt.n	b56a6 <loop+0x182>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b5622:	4b70      	ldr	r3, [pc, #448]	; (b57e4 <loop+0x2c0>)
	const char * c_str() const { return buffer; }
   b5624:	0122      	lsls	r2, r4, #4
   b5626:	2140      	movs	r1, #64	; 0x40
   b5628:	58d2      	ldr	r2, [r2, r3]
   b562a:	4628      	mov	r0, r5
   b562c:	f003 fad6 	bl	b8bdc <snprintf>
        }
        display.print(buf);
   b5630:	4629      	mov	r1, r5
   b5632:	485f      	ldr	r0, [pc, #380]	; (b57b0 <loop+0x28c>)
   b5634:	f003 fd4e 	bl	b90d4 <_ZN5Print5printEPKc>
        display.display();
   b5638:	485d      	ldr	r0, [pc, #372]	; (b57b0 <loop+0x28c>)
   b563a:	f002 fefd 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b563e:	3401      	adds	r4, #1
   b5640:	e7ea      	b.n	b5618 <loop+0xf4>
    } else if (MODE == 1)
   b5642:	2d01      	cmp	r5, #1
   b5644:	d105      	bne.n	b5652 <loop+0x12e>
      showBitmap(0,1,"");
   b5646:	f003 fc8a 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b564a:	aac2      	add	r2, sp, #776	; 0x308
   b564c:	4629      	mov	r1, r5
   b564e:	4620      	mov	r0, r4
   b5650:	e79e      	b.n	b5590 <loop+0x6c>
      showBitmap(0,2,"");
   b5652:	f003 fc84 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5656:	aac2      	add	r2, sp, #776	; 0x308
   b5658:	2102      	movs	r1, #2
   b565a:	4620      	mov	r0, r4
   b565c:	f7ff f938 	bl	b48d0 <_Z10showBitmapii6String>
   b5660:	a8c2      	add	r0, sp, #776	; 0x308
   b5662:	f003 fc31 	bl	b8ec8 <_ZN6StringD1Ev>
      bitmap=false;
   b5666:	4b5a      	ldr	r3, [pc, #360]	; (b57d0 <loop+0x2ac>)
   b5668:	701c      	strb	r4, [r3, #0]
      while(currentTime-startTime<limit){
   b566a:	f8d9 2000 	ldr.w	r2, [r9]
   b566e:	683b      	ldr	r3, [r7, #0]
   b5670:	1a9b      	subs	r3, r3, r2
   b5672:	f8da 2000 	ldr.w	r2, [sl]
   b5676:	4293      	cmp	r3, r2
   b5678:	d203      	bcs.n	b5682 <loop+0x15e>
   b567a:	f003 f8ab 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b567e:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b5680:	e7f3      	b.n	b566a <loop+0x146>
      showBitmap(1,2,"Zumbador:");
   b5682:	4959      	ldr	r1, [pc, #356]	; (b57e8 <loop+0x2c4>)
   b5684:	a8c2      	add	r0, sp, #776	; 0x308
   b5686:	f003 fc6a 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b568a:	aac2      	add	r2, sp, #776	; 0x308
   b568c:	2102      	movs	r1, #2
   b568e:	2001      	movs	r0, #1
   b5690:	e77e      	b.n	b5590 <loop+0x6c>
      pitidoOFF1(2);
   b5692:	2002      	movs	r0, #2
   b5694:	f7ff f88b 	bl	b47ae <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b5698:	2004      	movs	r0, #4
   b569a:	f7ff f888 	bl	b47ae <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b569e:	2006      	movs	r0, #6
   b56a0:	f7ff f885 	bl	b47ae <_Z10pitidoOFF1i>
   b56a4:	e795      	b.n	b55d2 <loop+0xae>
        } else if (i==23){
   b56a6:	2c17      	cmp	r4, #23
   b56a8:	d1c2      	bne.n	b5630 <loop+0x10c>
          snprintf(buf, sizeof(buf), "...");
   b56aa:	4641      	mov	r1, r8
   b56ac:	4628      	mov	r0, r5
   b56ae:	f005 f883 	bl	ba7b8 <strcpy>
   b56b2:	e7bd      	b.n	b5630 <loop+0x10c>
      }
    }
  }

  // ------------------------------ Modo BASICO --------------------------------------
  if ( MODE == 0 ) 
   b56b4:	4b3f      	ldr	r3, [pc, #252]	; (b57b4 <loop+0x290>)
  {
    
    // Tipo de tarjeta
    switch (tagInfo[0])
   b56b6:	4c44      	ldr	r4, [pc, #272]	; (b57c8 <loop+0x2a4>)
  if ( MODE == 0 ) 
   b56b8:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b56ba:	6825      	ldr	r5, [r4, #0]
  if ( MODE == 0 ) 
   b56bc:	2f00      	cmp	r7, #0
   b56be:	f040 8131 	bne.w	b5924 <loop+0x400>
    switch (tagInfo[0])
   b56c2:	f8df 814c 	ldr.w	r8, [pc, #332]	; b5810 <loop+0x2ec>
   b56c6:	2d00      	cmp	r5, #0
   b56c8:	f000 80a4 	beq.w	b5814 <loop+0x2f0>
   b56cc:	2d06      	cmp	r5, #6
   b56ce:	f040 8108 	bne.w	b58e2 <loop+0x3be>
      pitidoBlink0();
   b56d2:	f7fe ffbb 	bl	b464c <_Z12pitidoBlink0v>
    {

      // Tarjeta COMUN
      case 6:
        blinkAndSleep(true);
        switch (tagInfo[1])
   b56d6:	6865      	ldr	r5, [r4, #4]
   b56d8:	2d01      	cmp	r5, #1
   b56da:	d03f      	beq.n	b575c <loop+0x238>
   b56dc:	2d02      	cmp	r5, #2
   b56de:	d03f      	beq.n	b5760 <loop+0x23c>
   b56e0:	b92d      	cbnz	r5, b56ee <loop+0x1ca>
        {
          // Cambio de MODO
          case 0:
            
            cambioModo(tagInfo[2]);
   b56e2:	68a0      	ldr	r0, [r4, #8]
   b56e4:	f7ff fd0e 	bl	b5104 <_Z10cambioModoi>
            resetFunc();
   b56e8:	4b40      	ldr	r3, [pc, #256]	; (b57ec <loop+0x2c8>)
   b56ea:	681b      	ldr	r3, [r3, #0]
   b56ec:	4798      	blx	r3
          showBitmap(2,0,"");
        }
        break;
    }

    if (tagInfo[0]!=-1) { 
   b56ee:	6823      	ldr	r3, [r4, #0]
   b56f0:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b56f2:	bf1c      	itt	ne
   b56f4:	f04f 33ff 	movne.w	r3, #4294967295
   b56f8:	6023      	strne	r3, [r4, #0]
    }

    if (numActuadoresBloque > 0 && play == true)
   b56fa:	f8d8 4000 	ldr.w	r4, [r8]
   b56fe:	2c00      	cmp	r4, #0
   b5700:	f340 80fc 	ble.w	b58fc <loop+0x3d8>
   b5704:	7833      	ldrb	r3, [r6, #0]
   b5706:	2b00      	cmp	r3, #0
   b5708:	f000 8108 	beq.w	b591c <loop+0x3f8>
    {
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b570c:	4c38      	ldr	r4, [pc, #224]	; (b57f0 <loop+0x2cc>)
   b570e:	4d39      	ldr	r5, [pc, #228]	; (b57f4 <loop+0x2d0>)
   b5710:	6922      	ldr	r2, [r4, #16]
   b5712:	6860      	ldr	r0, [r4, #4]
   b5714:	2101      	movs	r1, #1
   b5716:	f7fe fe91 	bl	b443c <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b571a:	4b37      	ldr	r3, [pc, #220]	; (b57f8 <loop+0x2d4>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b571c:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b571e:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b5720:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b5722:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b5726:	f7fe ffd5 	bl	b46d4 <_Z15activarActuadoriib>

      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b572a:	782b      	ldrb	r3, [r5, #0]
   b572c:	2b00      	cmp	r3, #0
   b572e:	f000 80e3 	beq.w	b58f8 <loop+0x3d4>
   b5732:	4932      	ldr	r1, [pc, #200]	; (b57fc <loop+0x2d8>)
      display.clearDisplay();
   b5734:	4c1e      	ldr	r4, [pc, #120]	; (b57b0 <loop+0x28c>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b5736:	482a      	ldr	r0, [pc, #168]	; (b57e0 <loop+0x2bc>)
   b5738:	f005 f83e 	bl	ba7b8 <strcpy>
      display.clearDisplay();
   b573c:	4620      	mov	r0, r4
   b573e:	f002 fc13 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b5742:	2300      	movs	r3, #0
      display.setCursor(0, 0);
      display.print(buf);
   b5744:	4926      	ldr	r1, [pc, #152]	; (b57e0 <loop+0x2bc>)
   b5746:	6123      	str	r3, [r4, #16]
   b5748:	4620      	mov	r0, r4
   b574a:	f003 fcc3 	bl	b90d4 <_ZN5Print5printEPKc>
      display.display();
   b574e:	4620      	mov	r0, r4
    if (play) {
      reproducir();
      play = false;
    }
  }
}
   b5750:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b5754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      display.display();
   b5758:	f002 be6e 	b.w	b8438 <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b575c:	7035      	strb	r5, [r6, #0]
            break;
   b575e:	e7c6      	b.n	b56ee <loop+0x1ca>
            if ( tagInfo[2] == 1 ) {
   b5760:	68a3      	ldr	r3, [r4, #8]
   b5762:	2b01      	cmp	r3, #1
   b5764:	d10f      	bne.n	b5786 <loop+0x262>
              borradoALL(0);
   b5766:	4638      	mov	r0, r7
   b5768:	f7ff f9c4 	bl	b4af4 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b576c:	4924      	ldr	r1, [pc, #144]	; (b5800 <loop+0x2dc>)
   b576e:	a8c2      	add	r0, sp, #776	; 0x308
   b5770:	f003 fbf5 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5774:	aac2      	add	r2, sp, #776	; 0x308
   b5776:	4639      	mov	r1, r7
   b5778:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b577a:	f7ff f8a9 	bl	b48d0 <_Z10showBitmapii6String>
   b577e:	a8c2      	add	r0, sp, #776	; 0x308
   b5780:	f003 fba2 	bl	b8ec8 <_ZN6StringD1Ev>
   b5784:	e7b3      	b.n	b56ee <loop+0x1ca>
              showBitmap(2,1,"");
   b5786:	490c      	ldr	r1, [pc, #48]	; (b57b8 <loop+0x294>)
   b5788:	a8c2      	add	r0, sp, #776	; 0x308
   b578a:	f003 fbe8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b578e:	aac2      	add	r2, sp, #776	; 0x308
   b5790:	2101      	movs	r1, #1
   b5792:	4628      	mov	r0, r5
   b5794:	f7ff f89c 	bl	b48d0 <_Z10showBitmapii6String>
   b5798:	a8c2      	add	r0, sp, #776	; 0x308
   b579a:	f003 fb95 	bl	b8ec8 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b579e:	f003 ff91 	bl	b96c4 <_Z16_fetch_usbserialv>
   b57a2:	4918      	ldr	r1, [pc, #96]	; (b5804 <loop+0x2e0>)
   b57a4:	f003 fca9 	bl	b90fa <_ZN5Print7printlnEPKc>
   b57a8:	e7a1      	b.n	b56ee <loop+0x1ca>
   b57aa:	bf00      	nop
   b57ac:	2003d374 	.word	0x2003d374
   b57b0:	2003d378 	.word	0x2003d378
   b57b4:	2003cd42 	.word	0x2003cd42
   b57b8:	000badae 	.word	0x000badae
   b57bc:	2003d720 	.word	0x2003d720
   b57c0:	2003da5c 	.word	0x2003da5c
   b57c4:	000badc6 	.word	0x000badc6
   b57c8:	2003ccac 	.word	0x2003ccac
   b57cc:	2003d710 	.word	0x2003d710
   b57d0:	2003cd51 	.word	0x2003cd51
   b57d4:	2003dc58 	.word	0x2003dc58
   b57d8:	2003cca0 	.word	0x2003cca0
   b57dc:	2003da60 	.word	0x2003da60
   b57e0:	2003d32d 	.word	0x2003d32d
   b57e4:	2003da78 	.word	0x2003da78
   b57e8:	000badbc 	.word	0x000badbc
   b57ec:	2003da74 	.word	0x2003da74
   b57f0:	2003cd54 	.word	0x2003cd54
   b57f4:	2003e6b8 	.word	0x2003e6b8
   b57f8:	2003d708 	.word	0x2003d708
   b57fc:	000bb08f 	.word	0x000bb08f
   b5800:	000badd9 	.word	0x000badd9
   b5804:	000badf4 	.word	0x000badf4
   b5808:	2003cc9f 	.word	0x2003cc9f
   b580c:	000bacba 	.word	0x000bacba
   b5810:	2003da50 	.word	0x2003da50
        id = tagInfo[1];
   b5814:	6863      	ldr	r3, [r4, #4]
   b5816:	f8df 922c 	ldr.w	r9, [pc, #556]	; b5a44 <loop+0x520>
        tipo = tagInfo[2];
   b581a:	4f7e      	ldr	r7, [pc, #504]	; (b5a14 <loop+0x4f0>)
   b581c:	68a2      	ldr	r2, [r4, #8]
   b581e:	f8df a234 	ldr.w	sl, [pc, #564]	; b5a54 <loop+0x530>
        id = tagInfo[1];
   b5822:	f8c9 3000 	str.w	r3, [r9]
        if (id >= 2) {
   b5826:	2b01      	cmp	r3, #1
        tipo = tagInfo[2];
   b5828:	603a      	str	r2, [r7, #0]
        if (id >= 2) {
   b582a:	dd24      	ble.n	b5876 <loop+0x352>
          Serial.println("Sensor detectado");
   b582c:	f003 ff4a 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5830:	4979      	ldr	r1, [pc, #484]	; (b5a18 <loop+0x4f4>)
   b5832:	f003 fc62 	bl	b90fa <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b5836:	4a79      	ldr	r2, [pc, #484]	; (b5a1c <loop+0x4f8>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5838:	683b      	ldr	r3, [r7, #0]
          sensor.id = id;
   b583a:	f8d9 1000 	ldr.w	r1, [r9]
          bloques[0].sensores[0] = sensor;
   b583e:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b5840:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5842:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b5844:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b5848:	bf18      	it	ne
   b584a:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b584c:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b584e:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b5850:	f8da 2000 	ldr.w	r2, [sl]
            showBitmap(1,3,""); //A0
   b5854:	4972      	ldr	r1, [pc, #456]	; (b5a20 <loop+0x4fc>)
          numSensoresBloque++;
   b5856:	3201      	adds	r2, #1
   b5858:	f8ca 2000 	str.w	r2, [sl]
            showBitmap(1,3,""); //A0
   b585c:	a8c2      	add	r0, sp, #776	; 0x308
          if (sensor.puerto == 0) {
   b585e:	2b00      	cmp	r3, #0
   b5860:	d137      	bne.n	b58d2 <loop+0x3ae>
            showBitmap(1,3,""); //A0
   b5862:	f003 fb7c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5866:	aac2      	add	r2, sp, #776	; 0x308
   b5868:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b586a:	2001      	movs	r0, #1
   b586c:	f7ff f830 	bl	b48d0 <_Z10showBitmapii6String>
   b5870:	a8c2      	add	r0, sp, #776	; 0x308
   b5872:	f003 fb29 	bl	b8ec8 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b5876:	f8da 3000 	ldr.w	r3, [sl]
   b587a:	2b00      	cmp	r3, #0
   b587c:	dd2e      	ble.n	b58dc <loop+0x3b8>
          if (tagInfo[1] == 0 || tagInfo[1] == 1) {
   b587e:	6863      	ldr	r3, [r4, #4]
   b5880:	2b01      	cmp	r3, #1
   b5882:	f63f af34 	bhi.w	b56ee <loop+0x1ca>
            Serial.println("Actuador detectado");
   b5886:	f003 ff1d 	bl	b96c4 <_Z16_fetch_usbserialv>
   b588a:	4966      	ldr	r1, [pc, #408]	; (b5a24 <loop+0x500>)
   b588c:	f003 fc35 	bl	b90fa <_ZN5Print7printlnEPKc>
            estado = tagInfo[3];
   b5890:	4b65      	ldr	r3, [pc, #404]	; (b5a28 <loop+0x504>)
   b5892:	68e2      	ldr	r2, [r4, #12]
   b5894:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b5896:	683b      	ldr	r3, [r7, #0]
            actuador.id = id;
   b5898:	f8d9 1000 	ldr.w	r1, [r9]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b589c:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b589e:	4b5f      	ldr	r3, [pc, #380]	; (b5a1c <loop+0x4f8>)
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b58a0:	bf0c      	ite	eq
   b58a2:	2202      	moveq	r2, #2
   b58a4:	2204      	movne	r2, #4
            bloques[0].actuadores[0] = actuador;
   b58a6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b58aa:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            bloques[0].actuadores[0] = actuador;
   b58ae:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b58b2:	3201      	adds	r2, #1
   b58b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b58b8:	f8d8 3000 	ldr.w	r3, [r8]
              showBitmap(1,1,""); //D4
   b58bc:	4958      	ldr	r1, [pc, #352]	; (b5a20 <loop+0x4fc>)
            numActuadoresBloque++;
   b58be:	3301      	adds	r3, #1
              showBitmap(1,1,""); //D4
   b58c0:	a8c2      	add	r0, sp, #776	; 0x308
            numActuadoresBloque++;
   b58c2:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,1,""); //D4
   b58c6:	f003 fb4a 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b58ca:	2101      	movs	r1, #1
   b58cc:	aac2      	add	r2, sp, #776	; 0x308
   b58ce:	4608      	mov	r0, r1
   b58d0:	e753      	b.n	b577a <loop+0x256>
            showBitmap(1,0,""); //D2
   b58d2:	f003 fb44 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b58d6:	aac2      	add	r2, sp, #776	; 0x308
   b58d8:	4629      	mov	r1, r5
   b58da:	e7c6      	b.n	b586a <loop+0x346>
            ledApagar();
   b58dc:	f7fe fdfa 	bl	b44d4 <_Z9ledApagarv>
   b58e0:	e705      	b.n	b56ee <loop+0x1ca>
        if ( tagInfo[0] != -1 ) {
   b58e2:	3501      	adds	r5, #1
   b58e4:	f43f af03 	beq.w	b56ee <loop+0x1ca>
          showBitmap(2,0,"");
   b58e8:	494d      	ldr	r1, [pc, #308]	; (b5a20 <loop+0x4fc>)
   b58ea:	a8c2      	add	r0, sp, #776	; 0x308
   b58ec:	f003 fb37 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b58f0:	aac2      	add	r2, sp, #776	; 0x308
   b58f2:	4639      	mov	r1, r7
   b58f4:	2002      	movs	r0, #2
   b58f6:	e740      	b.n	b577a <loop+0x256>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b58f8:	494c      	ldr	r1, [pc, #304]	; (b5a2c <loop+0x508>)
   b58fa:	e71b      	b.n	b5734 <loop+0x210>
    } else if (numActuadoresBloque==0 && play == true) {
   b58fc:	d10e      	bne.n	b591c <loop+0x3f8>
   b58fe:	7833      	ldrb	r3, [r6, #0]
   b5900:	b163      	cbz	r3, b591c <loop+0x3f8>
      showBitmap(2,4,"");
   b5902:	4947      	ldr	r1, [pc, #284]	; (b5a20 <loop+0x4fc>)
   b5904:	a8c2      	add	r0, sp, #776	; 0x308
   b5906:	f003 fb2a 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b590a:	aac2      	add	r2, sp, #776	; 0x308
   b590c:	2104      	movs	r1, #4
   b590e:	2002      	movs	r0, #2
   b5910:	f7fe ffde 	bl	b48d0 <_Z10showBitmapii6String>
   b5914:	a8c2      	add	r0, sp, #776	; 0x308
   b5916:	f003 fad7 	bl	b8ec8 <_ZN6StringD1Ev>
      play=false;
   b591a:	7034      	strb	r4, [r6, #0]
}
   b591c:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b5920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b5924:	2f01      	cmp	r7, #1
   b5926:	f040 836a 	bne.w	b5ffe <loop+0xada>
    switch (tagInfo[0])
   b592a:	2d01      	cmp	r5, #1
   b592c:	d055      	beq.n	b59da <loop+0x4b6>
   b592e:	2d06      	cmp	r5, #6
   b5930:	f040 8304 	bne.w	b5f3c <loop+0xa18>
        switch (tagInfo[1])
   b5934:	6865      	ldr	r5, [r4, #4]
   b5936:	2d01      	cmp	r5, #1
   b5938:	d028      	beq.n	b598c <loop+0x468>
   b593a:	2d02      	cmp	r5, #2
   b593c:	d028      	beq.n	b5990 <loop+0x46c>
   b593e:	b92d      	cbnz	r5, b594c <loop+0x428>
            cambioModo(tagInfo[2]);
   b5940:	68a0      	ldr	r0, [r4, #8]
   b5942:	f7ff fbdf 	bl	b5104 <_Z10cambioModoi>
            resetFunc();
   b5946:	4b3a      	ldr	r3, [pc, #232]	; (b5a30 <loop+0x50c>)
   b5948:	681b      	ldr	r3, [r3, #0]
   b594a:	4798      	blx	r3
    tagInfo[0] = -1;
   b594c:	f04f 33ff 	mov.w	r3, #4294967295
   b5950:	6023      	str	r3, [r4, #0]
    if (play) {
   b5952:	7833      	ldrb	r3, [r6, #0]
   b5954:	2b00      	cmp	r3, #0
   b5956:	d0e1      	beq.n	b591c <loop+0x3f8>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b5958:	4d36      	ldr	r5, [pc, #216]	; (b5a34 <loop+0x510>)
   b595a:	682b      	ldr	r3, [r5, #0]
   b595c:	2b00      	cmp	r3, #0
   b595e:	f040 82fc 	bne.w	b5f5a <loop+0xa36>
   b5962:	4b2e      	ldr	r3, [pc, #184]	; (b5a1c <loop+0x4f8>)
   b5964:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b5968:	2b00      	cmp	r3, #0
   b596a:	f300 82f9 	bgt.w	b5f60 <loop+0xa3c>
        showBitmap(2,4,"  acaba bloque 1");
   b596e:	4932      	ldr	r1, [pc, #200]	; (b5a38 <loop+0x514>)
   b5970:	a8c2      	add	r0, sp, #776	; 0x308
   b5972:	f003 faf4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5976:	aac2      	add	r2, sp, #776	; 0x308
   b5978:	2104      	movs	r1, #4
   b597a:	2002      	movs	r0, #2
   b597c:	f7fe ffa8 	bl	b48d0 <_Z10showBitmapii6String>
   b5980:	a8c2      	add	r0, sp, #776	; 0x308
   b5982:	f003 faa1 	bl	b8ec8 <_ZN6StringD1Ev>
        play = false;
   b5986:	2300      	movs	r3, #0
   b5988:	7033      	strb	r3, [r6, #0]
   b598a:	e305      	b.n	b5f98 <loop+0xa74>
            play = true;
   b598c:	7035      	strb	r5, [r6, #0]
            break;
   b598e:	e7dd      	b.n	b594c <loop+0x428>
            if ( tagInfo[2] == 1 ) {
   b5990:	68a3      	ldr	r3, [r4, #8]
   b5992:	2b01      	cmp	r3, #1
   b5994:	d10e      	bne.n	b59b4 <loop+0x490>
   switch (modo)
   b5996:	f7fe fb97 	bl	b40c8 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b599a:	a8c2      	add	r0, sp, #776	; 0x308
   b599c:	4927      	ldr	r1, [pc, #156]	; (b5a3c <loop+0x518>)
   b599e:	f003 fade 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b59a2:	aac2      	add	r2, sp, #776	; 0x308
   b59a4:	2100      	movs	r1, #0
   b59a6:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b59a8:	f7fe ff92 	bl	b48d0 <_Z10showBitmapii6String>
   b59ac:	a8c2      	add	r0, sp, #776	; 0x308
   b59ae:	f003 fa8b 	bl	b8ec8 <_ZN6StringD1Ev>
   b59b2:	e7cb      	b.n	b594c <loop+0x428>
            } else if (tagInfo[2] == 2) {
   b59b4:	2b02      	cmp	r3, #2
   b59b6:	d103      	bne.n	b59c0 <loop+0x49c>
              borradoBLOQUE(1);
   b59b8:	4638      	mov	r0, r7
   b59ba:	f7ff f8bf 	bl	b4b3c <_Z13borradoBLOQUEi>
   b59be:	e7c5      	b.n	b594c <loop+0x428>
              Serial.println("Borrado no permitido para este modo");
   b59c0:	f003 fe80 	bl	b96c4 <_Z16_fetch_usbserialv>
   b59c4:	491e      	ldr	r1, [pc, #120]	; (b5a40 <loop+0x51c>)
   b59c6:	f003 fb98 	bl	b90fa <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b59ca:	4915      	ldr	r1, [pc, #84]	; (b5a20 <loop+0x4fc>)
   b59cc:	a8c2      	add	r0, sp, #776	; 0x308
   b59ce:	f003 fac6 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b59d2:	aac2      	add	r2, sp, #776	; 0x308
   b59d4:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b59d6:	2002      	movs	r0, #2
   b59d8:	e7e6      	b.n	b59a8 <loop+0x484>
        id = tagInfo[3];
   b59da:	4f1a      	ldr	r7, [pc, #104]	; (b5a44 <loop+0x520>)
   b59dc:	68e3      	ldr	r3, [r4, #12]
   b59de:	603b      	str	r3, [r7, #0]
        Serial.print("Ejecutando tag --> ");
   b59e0:	f003 fe70 	bl	b96c4 <_Z16_fetch_usbserialv>
   b59e4:	4918      	ldr	r1, [pc, #96]	; (b5a48 <loop+0x524>)
   b59e6:	4d0d      	ldr	r5, [pc, #52]	; (b5a1c <loop+0x4f8>)
   b59e8:	f8df 9068 	ldr.w	r9, [pc, #104]	; b5a54 <loop+0x530>
   b59ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; b5a4c <loop+0x528>
   b59f0:	f8df a05c 	ldr.w	sl, [pc, #92]	; b5a50 <loop+0x52c>
   b59f4:	f8df b03c 	ldr.w	fp, [pc, #60]	; b5a34 <loop+0x510>
   b59f8:	f003 fb6c 	bl	b90d4 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b59fc:	6863      	ldr	r3, [r4, #4]
   b59fe:	2b05      	cmp	r3, #5
   b5a00:	d86e      	bhi.n	b5ae0 <loop+0x5bc>
   b5a02:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5a06:	0029      	.short	0x0029
   b5a08:	020200cb 	.word	0x020200cb
   b5a0c:	02690238 	.word	0x02690238
   b5a10:	0284      	.short	0x0284
   b5a12:	bf00      	nop
   b5a14:	2003e6b4 	.word	0x2003e6b4
   b5a18:	000bae18 	.word	0x000bae18
   b5a1c:	2003cd54 	.word	0x2003cd54
   b5a20:	000badae 	.word	0x000badae
   b5a24:	000bae29 	.word	0x000bae29
   b5a28:	2003d708 	.word	0x2003d708
   b5a2c:	000bb09e 	.word	0x000bb09e
   b5a30:	2003da74 	.word	0x2003da74
   b5a34:	2003cca4 	.word	0x2003cca4
   b5a38:	000bb0a4 	.word	0x000bb0a4
   b5a3c:	000badd9 	.word	0x000badd9
   b5a40:	000badf4 	.word	0x000badf4
   b5a44:	2003d70c 	.word	0x2003d70c
   b5a48:	000bae3c 	.word	0x000bae3c
   b5a4c:	2003da50 	.word	0x2003da50
   b5a50:	2003da54 	.word	0x2003da54
   b5a54:	2003da58 	.word	0x2003da58
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b5a58:	f8df 8340 	ldr.w	r8, [pc, #832]	; b5d9c <loop+0x878>
            Serial.println("Sensor detectado");
   b5a5c:	f003 fe32 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5a60:	49be      	ldr	r1, [pc, #760]	; (b5d5c <loop+0x838>)
   b5a62:	f003 fb4a 	bl	b90fa <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b5a66:	f898 3000 	ldrb.w	r3, [r8]
   b5a6a:	2b00      	cmp	r3, #0
   b5a6c:	d060      	beq.n	b5b30 <loop+0x60c>
   b5a6e:	f8d9 2000 	ldr.w	r2, [r9]
   b5a72:	f8da 3000 	ldr.w	r3, [sl]
   b5a76:	429a      	cmp	r2, r3
   b5a78:	d171      	bne.n	b5b5e <loop+0x63a>
   b5a7a:	6838      	ldr	r0, [r7, #0]
   b5a7c:	f7ff fa1a 	bl	b4eb4 <_Z13isValidSensori>
   b5a80:	2800      	cmp	r0, #0
   b5a82:	d052      	beq.n	b5b2a <loop+0x606>
              puerto = isNewSensor(id);
   b5a84:	6838      	ldr	r0, [r7, #0]
   b5a86:	f8df 831c 	ldr.w	r8, [pc, #796]	; b5da4 <loop+0x880>
   b5a8a:	f7ff fa35 	bl	b4ef8 <_Z11isNewSensori>
   b5a8e:	f8c8 0000 	str.w	r0, [r8]
              if (puerto == -1) {
   b5a92:	3001      	adds	r0, #1
   b5a94:	d150      	bne.n	b5b38 <loop+0x614>
                puerto = asignarPuerto(tagInfo[2]);
   b5a96:	68a0      	ldr	r0, [r4, #8]
   b5a98:	f7ff fc18 	bl	b52cc <_Z13asignarPuertoi>
   b5a9c:	4601      	mov	r1, r0
   b5a9e:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b5aa2:	68a0      	ldr	r0, [r4, #8]
   b5aa4:	f7fe ffd8 	bl	b4a58 <_Z8showPortii>
              if (puerto != -1) {
   b5aa8:	f8d8 0000 	ldr.w	r0, [r8]
   b5aac:	1c42      	adds	r2, r0, #1
   b5aae:	f000 818c 	beq.w	b5dca <loop+0x8a6>
                newSensor.bloque = numBloque;
   b5ab2:	f8db 8000 	ldr.w	r8, [fp]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b5ab6:	f8d9 1000 	ldr.w	r1, [r9]
   b5aba:	683f      	ldr	r7, [r7, #0]
   b5abc:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5ac0:	fb02 f208 	mul.w	r2, r2, r8
   b5ac4:	eb02 1301 	add.w	r3, r2, r1, lsl #4
   b5ac8:	442b      	add	r3, r5
   b5aca:	605f      	str	r7, [r3, #4]
   b5acc:	6927      	ldr	r7, [r4, #16]
   b5ace:	6118      	str	r0, [r3, #16]
   b5ad0:	e9c3 7802 	strd	r7, r8, [r3, #8]
                bloques[numBloque].numSensores++;
   b5ad4:	58ab      	ldr	r3, [r5, r2]
   b5ad6:	3301      	adds	r3, #1
   b5ad8:	50ab      	str	r3, [r5, r2]
                numSensoresBloque++;
   b5ada:	1c4b      	adds	r3, r1, #1
   b5adc:	f8c9 3000 	str.w	r3, [r9]
        Serial.println("Fin Tag");
   b5ae0:	f003 fdf0 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5ae4:	499e      	ldr	r1, [pc, #632]	; (b5d60 <loop+0x83c>)
   b5ae6:	f003 fb08 	bl	b90fa <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b5aea:	f003 fdeb 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5aee:	499d      	ldr	r1, [pc, #628]	; (b5d64 <loop+0x840>)
   b5af0:	f003 fb03 	bl	b90fa <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b5af4:	f003 fde6 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5af8:	4b9b      	ldr	r3, [pc, #620]	; (b5d68 <loop+0x844>)
   b5afa:	499c      	ldr	r1, [pc, #624]	; (b5d6c <loop+0x848>)
   b5afc:	681a      	ldr	r2, [r3, #0]
   b5afe:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5b02:	fb03 5502 	mla	r5, r3, r2, r5
   b5b06:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   b5b0a:	9302      	str	r3, [sp, #8]
   b5b0c:	4b98      	ldr	r3, [pc, #608]	; (b5d70 <loop+0x84c>)
   b5b0e:	681b      	ldr	r3, [r3, #0]
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	4b98      	ldr	r3, [pc, #608]	; (b5d74 <loop+0x850>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	9300      	str	r3, [sp, #0]
   b5b18:	4b97      	ldr	r3, [pc, #604]	; (b5d78 <loop+0x854>)
   b5b1a:	681b      	ldr	r3, [r3, #0]
   b5b1c:	f7fe fb00 	bl	b4120 <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b5b20:	f003 fdd0 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5b24:	f003 fadd 	bl	b90e2 <_ZN5Print7printlnEv>
        break;
   b5b28:	e710      	b.n	b594c <loop+0x428>
              if ((!IF_pasado)) {
   b5b2a:	f898 3000 	ldrb.w	r3, [r8]
   b5b2e:	b983      	cbnz	r3, b5b52 <loop+0x62e>
                Serial.println("Se esperaba IF tag");
   b5b30:	f003 fdc8 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5b34:	4991      	ldr	r1, [pc, #580]	; (b5d7c <loop+0x858>)
   b5b36:	e015      	b.n	b5b64 <loop+0x640>
                showBitmap(1,6,"");
   b5b38:	4991      	ldr	r1, [pc, #580]	; (b5d80 <loop+0x85c>)
   b5b3a:	a8c2      	add	r0, sp, #776	; 0x308
   b5b3c:	f003 fa0f 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5b40:	aac2      	add	r2, sp, #776	; 0x308
   b5b42:	2106      	movs	r1, #6
   b5b44:	2001      	movs	r0, #1
   b5b46:	f7fe fec3 	bl	b48d0 <_Z10showBitmapii6String>
   b5b4a:	a8c2      	add	r0, sp, #776	; 0x308
   b5b4c:	f003 f9bc 	bl	b8ec8 <_ZN6StringD1Ev>
   b5b50:	e7aa      	b.n	b5aa8 <loop+0x584>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b5b52:	f8d9 2000 	ldr.w	r2, [r9]
   b5b56:	f8da 3000 	ldr.w	r3, [sl]
   b5b5a:	429a      	cmp	r2, r3
   b5b5c:	d00c      	beq.n	b5b78 <loop+0x654>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b5b5e:	f003 fdb1 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5b62:	4988      	ldr	r1, [pc, #544]	; (b5d84 <loop+0x860>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5b64:	f003 fac9 	bl	b90fa <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b5b68:	4985      	ldr	r1, [pc, #532]	; (b5d80 <loop+0x85c>)
   b5b6a:	a8c2      	add	r0, sp, #776	; 0x308
   b5b6c:	f003 f9f7 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5b70:	2102      	movs	r1, #2
   b5b72:	aac2      	add	r2, sp, #776	; 0x308
   b5b74:	4608      	mov	r0, r1
   b5b76:	e00b      	b.n	b5b90 <loop+0x66c>
                Serial.println("Sensor invalido");
   b5b78:	f003 fda4 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5b7c:	4982      	ldr	r1, [pc, #520]	; (b5d88 <loop+0x864>)
   b5b7e:	f003 fabc 	bl	b90fa <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b5b82:	497f      	ldr	r1, [pc, #508]	; (b5d80 <loop+0x85c>)
   b5b84:	a8c2      	add	r0, sp, #776	; 0x308
   b5b86:	f003 f9ea 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5b8a:	aac2      	add	r2, sp, #776	; 0x308
   b5b8c:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b5b8e:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b5b90:	f7fe fe9e 	bl	b48d0 <_Z10showBitmapii6String>
   b5b94:	a8c2      	add	r0, sp, #776	; 0x308
   b5b96:	f003 f997 	bl	b8ec8 <_ZN6StringD1Ev>
   b5b9a:	e7a1      	b.n	b5ae0 <loop+0x5bc>
            Serial.println("Actuador detectado");
   b5b9c:	f003 fd92 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5ba0:	497a      	ldr	r1, [pc, #488]	; (b5d8c <loop+0x868>)
            estado = tagInfo[4];
   b5ba2:	f8df 9204 	ldr.w	r9, [pc, #516]	; b5da8 <loop+0x884>
            Serial.println("Actuador detectado");
   b5ba6:	f003 faa8 	bl	b90fa <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b5baa:	4a79      	ldr	r2, [pc, #484]	; (b5d90 <loop+0x86c>)
            estado = tagInfo[4];
   b5bac:	f8d4 a010 	ldr.w	sl, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b5bb0:	7813      	ldrb	r3, [r2, #0]
            estado = tagInfo[4];
   b5bb2:	f8c9 a000 	str.w	sl, [r9]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b5bb6:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b5bb8:	2b00      	cmp	r3, #0
   b5bba:	d06f      	beq.n	b5c9c <loop+0x778>
   b5bbc:	4a75      	ldr	r2, [pc, #468]	; (b5d94 <loop+0x870>)
   b5bbe:	6839      	ldr	r1, [r7, #0]
   b5bc0:	7812      	ldrb	r2, [r2, #0]
   b5bc2:	4650      	mov	r0, sl
   b5bc4:	2a00      	cmp	r2, #0
   b5bc6:	d166      	bne.n	b5c96 <loop+0x772>
   b5bc8:	f7ff f9be 	bl	b4f48 <_Z15isValidActuadorii>
   b5bcc:	2800      	cmp	r0, #0
   b5bce:	d065      	beq.n	b5c9c <loop+0x778>
   b5bd0:	f8d8 2000 	ldr.w	r2, [r8]
   b5bd4:	2a00      	cmp	r2, #0
   b5bd6:	d161      	bne.n	b5c9c <loop+0x778>
              puerto = isNewActuador(id);
   b5bd8:	4608      	mov	r0, r1
   b5bda:	f7ff f9ef 	bl	b4fbc <_Z13isNewActuadori>
   b5bde:	f8df a1c4 	ldr.w	sl, [pc, #452]	; b5da4 <loop+0x880>
   b5be2:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b5be6:	3001      	adds	r0, #1
   b5be8:	d148      	bne.n	b5c7c <loop+0x758>
                puerto = asignarPuerto(tagInfo[2]);
   b5bea:	68a0      	ldr	r0, [r4, #8]
   b5bec:	f7ff fb6e 	bl	b52cc <_Z13asignarPuertoi>
   b5bf0:	4601      	mov	r1, r0
   b5bf2:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b5bf6:	68a0      	ldr	r0, [r4, #8]
   b5bf8:	f7fe ff2e 	bl	b4a58 <_Z8showPortii>
              if (puerto != -1) {
   b5bfc:	f8da 1000 	ldr.w	r1, [sl]
   b5c00:	1c4b      	adds	r3, r1, #1
   b5c02:	f000 80e2 	beq.w	b5dca <loop+0x8a6>
                newActuador.id = id;
   b5c06:	6838      	ldr	r0, [r7, #0]
                newActuador.bloque = numBloque;
   b5c08:	f8db 7000 	ldr.w	r7, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5c0c:	f8d8 c000 	ldr.w	ip, [r8]
                newActuador.condicion = estado;
   b5c10:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5c14:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5c18:	fb03 f207 	mul.w	r2, r3, r7
   b5c1c:	2314      	movs	r3, #20
   b5c1e:	fb03 230c 	mla	r3, r3, ip, r2
   b5c22:	442b      	add	r3, r5
   b5c24:	e9c3 7154 	strd	r7, r1, [r3, #336]	; 0x150
   b5c28:	2701      	movs	r7, #1
   b5c2a:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b5c2e:	f883 7158 	strb.w	r7, [r3, #344]	; 0x158
                numActuadoresBloque++;
   b5c32:	eb0c 0307 	add.w	r3, ip, r7
   b5c36:	f8c8 3000 	str.w	r3, [r8]
                bloques[numBloque].numActuadores++;
   b5c3a:	18ab      	adds	r3, r5, r2
   b5c3c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b5c40:	443a      	add	r2, r7
   b5c42:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b5c46:	2800      	cmp	r0, #0
   b5c48:	f47f af4a 	bne.w	b5ae0 <loop+0x5bc>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5c4c:	b2c9      	uxtb	r1, r1
   b5c4e:	19ca      	adds	r2, r1, r7
   b5c50:	f50d 7842 	add.w	r8, sp, #776	; 0x308
   b5c54:	2305      	movs	r3, #5
   b5c56:	b2d2      	uxtb	r2, r2
   b5c58:	4640      	mov	r0, r8
   b5c5a:	f002 fc87 	bl	b856c <_ZN12ChainableLEDC1Ehhh>
   b5c5e:	e898 0003 	ldmia.w	r8, {r0, r1}
   b5c62:	f8df 9148 	ldr.w	r9, [pc, #328]	; b5dac <loop+0x888>
   b5c66:	e889 0003 	stmia.w	r9, {r0, r1}
   b5c6a:	4640      	mov	r0, r8
   b5c6c:	f002 fc8b 	bl	b8586 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5c70:	4648      	mov	r0, r9
   b5c72:	f002 fd2d 	bl	b86d0 <_ZN12ChainableLED4initEv>
                  init = true;
   b5c76:	4b48      	ldr	r3, [pc, #288]	; (b5d98 <loop+0x874>)
   b5c78:	701f      	strb	r7, [r3, #0]
   b5c7a:	e731      	b.n	b5ae0 <loop+0x5bc>
                showBitmap(1,6,"");
   b5c7c:	4940      	ldr	r1, [pc, #256]	; (b5d80 <loop+0x85c>)
   b5c7e:	a8c2      	add	r0, sp, #776	; 0x308
   b5c80:	f003 f96d 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5c84:	aac2      	add	r2, sp, #776	; 0x308
   b5c86:	2106      	movs	r1, #6
   b5c88:	2001      	movs	r0, #1
   b5c8a:	f7fe fe21 	bl	b48d0 <_Z10showBitmapii6String>
   b5c8e:	a8c2      	add	r0, sp, #776	; 0x308
   b5c90:	f003 f91a 	bl	b8ec8 <_ZN6StringD1Ev>
   b5c94:	e7b2      	b.n	b5bfc <loop+0x6d8>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(estado, id) ) {
   b5c96:	f7ff f957 	bl	b4f48 <_Z15isValidActuadorii>
   b5c9a:	b960      	cbnz	r0, b5cb6 <loop+0x792>
              if (!IF_pasado) {
   b5c9c:	4a3f      	ldr	r2, [pc, #252]	; (b5d9c <loop+0x878>)
   b5c9e:	7812      	ldrb	r2, [r2, #0]
   b5ca0:	2a00      	cmp	r2, #0
   b5ca2:	f43f af45 	beq.w	b5b30 <loop+0x60c>
              } else if (!THEN_pasado) {
   b5ca6:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b5ca8:	2b00      	cmp	r3, #0
   b5caa:	f040 8094 	bne.w	b5dd6 <loop+0x8b2>
                Serial.println("Se esperaba THEN tag");
   b5cae:	f003 fd09 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5cb2:	493b      	ldr	r1, [pc, #236]	; (b5da0 <loop+0x87c>)
   b5cb4:	e756      	b.n	b5b64 <loop+0x640>
              puerto = isNewActuador(id);
   b5cb6:	4608      	mov	r0, r1
   b5cb8:	f7ff f980 	bl	b4fbc <_Z13isNewActuadori>
   b5cbc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; b5da4 <loop+0x880>
   b5cc0:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b5cc4:	3001      	adds	r0, #1
   b5cc6:	d173      	bne.n	b5db0 <loop+0x88c>
                puerto = asignarPuerto(tagInfo[2]);
   b5cc8:	68a0      	ldr	r0, [r4, #8]
   b5cca:	f7ff faff 	bl	b52cc <_Z13asignarPuertoi>
   b5cce:	4601      	mov	r1, r0
   b5cd0:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b5cd4:	68a0      	ldr	r0, [r4, #8]
   b5cd6:	f7fe febf 	bl	b4a58 <_Z8showPortii>
              if (puerto != -1) {
   b5cda:	f8da 1000 	ldr.w	r1, [sl]
   b5cde:	1c48      	adds	r0, r1, #1
   b5ce0:	d073      	beq.n	b5dca <loop+0x8a6>
                newActuador.bloque = numBloque;
   b5ce2:	f8db c000 	ldr.w	ip, [fp]
                newActuador.id = id;
   b5ce6:	6838      	ldr	r0, [r7, #0]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5ce8:	f8d8 7000 	ldr.w	r7, [r8]
                newActuador.condicion = estado;
   b5cec:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b5cf0:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5cf4:	fb03 f20c 	mul.w	r2, r3, ip
   b5cf8:	2314      	movs	r3, #20
   b5cfa:	fb03 2307 	mla	r3, r3, r7, r2
   b5cfe:	442b      	add	r3, r5
   b5d00:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b5d04:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b5d08:	e9c3 c154 	strd	ip, r1, [r3, #336]	; 0x150
   b5d0c:	2300      	movs	r3, #0
   b5d0e:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b5d12:	18ab      	adds	r3, r5, r2
                numActuadoresBloque++;
   b5d14:	3701      	adds	r7, #1
                bloques[numBloque].numActuadores++;
   b5d16:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b5d1a:	f8c8 7000 	str.w	r7, [r8]
                bloques[numBloque].numActuadores++;
   b5d1e:	3201      	adds	r2, #1
   b5d20:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b5d24:	2800      	cmp	r0, #0
   b5d26:	f47f aedb 	bne.w	b5ae0 <loop+0x5bc>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b5d2a:	b2c9      	uxtb	r1, r1
   b5d2c:	1c4a      	adds	r2, r1, #1
   b5d2e:	afc2      	add	r7, sp, #776	; 0x308
   b5d30:	2305      	movs	r3, #5
   b5d32:	b2d2      	uxtb	r2, r2
   b5d34:	4638      	mov	r0, r7
   b5d36:	f002 fc19 	bl	b856c <_ZN12ChainableLEDC1Ehhh>
   b5d3a:	e897 0003 	ldmia.w	r7, {r0, r1}
   b5d3e:	f8df 806c 	ldr.w	r8, [pc, #108]	; b5dac <loop+0x888>
   b5d42:	e888 0003 	stmia.w	r8, {r0, r1}
   b5d46:	4638      	mov	r0, r7
   b5d48:	f002 fc1d 	bl	b8586 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b5d4c:	4640      	mov	r0, r8
   b5d4e:	f002 fcbf 	bl	b86d0 <_ZN12ChainableLED4initEv>
                  init = true;
   b5d52:	4b11      	ldr	r3, [pc, #68]	; (b5d98 <loop+0x874>)
   b5d54:	2201      	movs	r2, #1
   b5d56:	701a      	strb	r2, [r3, #0]
   b5d58:	e6c2      	b.n	b5ae0 <loop+0x5bc>
   b5d5a:	bf00      	nop
   b5d5c:	000bae18 	.word	0x000bae18
   b5d60:	000bb004 	.word	0x000bb004
   b5d64:	000bb00c 	.word	0x000bb00c
   b5d68:	2003cca4 	.word	0x2003cca4
   b5d6c:	000bb041 	.word	0x000bb041
   b5d70:	2003da50 	.word	0x2003da50
   b5d74:	2003da54 	.word	0x2003da54
   b5d78:	2003da58 	.word	0x2003da58
   b5d7c:	000bae50 	.word	0x000bae50
   b5d80:	000badae 	.word	0x000badae
   b5d84:	000bae63 	.word	0x000bae63
   b5d88:	000bae98 	.word	0x000bae98
   b5d8c:	000bae29 	.word	0x000bae29
   b5d90:	2003cd50 	.word	0x2003cd50
   b5d94:	2003cd40 	.word	0x2003cd40
   b5d98:	2003d710 	.word	0x2003d710
   b5d9c:	2003cd41 	.word	0x2003cd41
   b5da0:	000baea8 	.word	0x000baea8
   b5da4:	2003da64 	.word	0x2003da64
   b5da8:	2003d708 	.word	0x2003d708
   b5dac:	2003d718 	.word	0x2003d718
                showBitmap(1,6,"");
   b5db0:	49ac      	ldr	r1, [pc, #688]	; (b6064 <loop+0xb40>)
   b5db2:	a8c2      	add	r0, sp, #776	; 0x308
   b5db4:	f003 f8d3 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5db8:	aac2      	add	r2, sp, #776	; 0x308
   b5dba:	2106      	movs	r1, #6
   b5dbc:	2001      	movs	r0, #1
   b5dbe:	f7fe fd87 	bl	b48d0 <_Z10showBitmapii6String>
   b5dc2:	a8c2      	add	r0, sp, #776	; 0x308
   b5dc4:	f003 f880 	bl	b8ec8 <_ZN6StringD1Ev>
   b5dc8:	e787      	b.n	b5cda <loop+0x7b6>
                Serial.println("Puerto no disponible");
   b5dca:	f003 fc7b 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5dce:	49a6      	ldr	r1, [pc, #664]	; (b6068 <loop+0xb44>)
   b5dd0:	f003 f993 	bl	b90fa <_ZN5Print7printlnEPKc>
   b5dd4:	e684      	b.n	b5ae0 <loop+0x5bc>
                if (!isValidActuador(estado, id)) {
   b5dd6:	6839      	ldr	r1, [r7, #0]
   b5dd8:	4650      	mov	r0, sl
   b5dda:	f7ff f8b5 	bl	b4f48 <_Z15isValidActuadorii>
   b5dde:	b958      	cbnz	r0, b5df8 <loop+0x8d4>
                  Serial.println("Invalid Actuador");
   b5de0:	f003 fc70 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5de4:	49a1      	ldr	r1, [pc, #644]	; (b606c <loop+0xb48>)
   b5de6:	f003 f988 	bl	b90fa <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b5dea:	499e      	ldr	r1, [pc, #632]	; (b6064 <loop+0xb40>)
   b5dec:	a8c2      	add	r0, sp, #776	; 0x308
   b5dee:	f003 f8b6 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5df2:	aac2      	add	r2, sp, #776	; 0x308
   b5df4:	2106      	movs	r1, #6
   b5df6:	e6ca      	b.n	b5b8e <loop+0x66a>
                } else if(!ELSE_pasado) {
   b5df8:	4b9d      	ldr	r3, [pc, #628]	; (b6070 <loop+0xb4c>)
   b5dfa:	781b      	ldrb	r3, [r3, #0]
   b5dfc:	2b00      	cmp	r3, #0
   b5dfe:	f47f ae6f 	bne.w	b5ae0 <loop+0x5bc>
                  Serial.println("Se esperaba ELSE tag");
   b5e02:	f003 fc5f 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5e06:	499b      	ldr	r1, [pc, #620]	; (b6074 <loop+0xb50>)
   b5e08:	e6ac      	b.n	b5b64 <loop+0x640>
            Serial.println("IF detectado");
   b5e0a:	f003 fc5b 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5e0e:	499a      	ldr	r1, [pc, #616]	; (b6078 <loop+0xb54>)
   b5e10:	f003 f973 	bl	b90fa <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b5e14:	f8db 3000 	ldr.w	r3, [fp]
   b5e18:	1c5a      	adds	r2, r3, #1
   b5e1a:	d004      	beq.n	b5e26 <loop+0x902>
   b5e1c:	bb3b      	cbnz	r3, b5e6e <loop+0x94a>
   b5e1e:	f8d8 2000 	ldr.w	r2, [r8]
   b5e22:	2a00      	cmp	r2, #0
   b5e24:	dd23      	ble.n	b5e6e <loop+0x94a>
              IF_pasado = true;
   b5e26:	4a95      	ldr	r2, [pc, #596]	; (b607c <loop+0xb58>)
   b5e28:	2101      	movs	r1, #1
   b5e2a:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b5e2c:	4a94      	ldr	r2, [pc, #592]	; (b6080 <loop+0xb5c>)
              showBitmap(3,0,"IF");
   b5e2e:	4995      	ldr	r1, [pc, #596]	; (b6084 <loop+0xb60>)
              THEN_pasado = false;
   b5e30:	2700      	movs	r7, #0
   b5e32:	7017      	strb	r7, [r2, #0]
              ELSE_pasado = false;
   b5e34:	4a8e      	ldr	r2, [pc, #568]	; (b6070 <loop+0xb4c>)
              numCondicionalesBloque = 0;
   b5e36:	f8ca 7000 	str.w	r7, [sl]
              ELSE_pasado = false;
   b5e3a:	7017      	strb	r7, [r2, #0]
              puertoAnalogico_bloque = 0;
   b5e3c:	4a92      	ldr	r2, [pc, #584]	; (b6088 <loop+0xb64>)
              numSensoresBloque = 0;
   b5e3e:	f8c9 7000 	str.w	r7, [r9]
              puertoAnalogico_bloque = 0;
   b5e42:	6017      	str	r7, [r2, #0]
              puertoDigital_bloque = 0;
   b5e44:	4a91      	ldr	r2, [pc, #580]	; (b608c <loop+0xb68>)
              numActuadoresBloque = 0;
   b5e46:	f8c8 7000 	str.w	r7, [r8]
              numBloque++;
   b5e4a:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b5e4c:	6017      	str	r7, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b5e4e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b5e52:	f8cb 3000 	str.w	r3, [fp]
              bloques[numBloque] = nuevoBloque;
   b5e56:	4353      	muls	r3, r2
   b5e58:	18ea      	adds	r2, r5, r3
   b5e5a:	50ef      	str	r7, [r5, r3]
   b5e5c:	f8c2 7144 	str.w	r7, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b5e60:	a8c2      	add	r0, sp, #776	; 0x308
   b5e62:	f003 f87c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5e66:	aac2      	add	r2, sp, #776	; 0x308
   b5e68:	2100      	movs	r1, #0
   b5e6a:	2003      	movs	r0, #3
   b5e6c:	e690      	b.n	b5b90 <loop+0x66c>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b5e6e:	f003 fc29 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5e72:	4987      	ldr	r1, [pc, #540]	; (b6090 <loop+0xb6c>)
   b5e74:	e676      	b.n	b5b64 <loop+0x640>
            Serial.println("AND/OR detectado");
   b5e76:	f003 fc25 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5e7a:	4986      	ldr	r1, [pc, #536]	; (b6094 <loop+0xb70>)
   b5e7c:	f003 f93d 	bl	b90fa <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b5e80:	4b7e      	ldr	r3, [pc, #504]	; (b607c <loop+0xb58>)
   b5e82:	781b      	ldrb	r3, [r3, #0]
   b5e84:	2b00      	cmp	r3, #0
   b5e86:	f43f ae53 	beq.w	b5b30 <loop+0x60c>
   b5e8a:	f8da 3000 	ldr.w	r3, [sl]
   b5e8e:	f8d9 2000 	ldr.w	r2, [r9]
   b5e92:	4293      	cmp	r3, r2
   b5e94:	da1a      	bge.n	b5ecc <loop+0x9a8>
   b5e96:	f8d8 7000 	ldr.w	r7, [r8]
   b5e9a:	b9cf      	cbnz	r7, b5ed0 <loop+0x9ac>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5e9c:	f8db 2000 	ldr.w	r2, [fp]
   b5ea0:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b5ea4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5ea8:	fb01 5202 	mla	r2, r1, r2, r5
   b5eac:	f1b8 0f00 	cmp.w	r8, #0
   b5eb0:	441a      	add	r2, r3
   b5eb2:	bf14      	ite	ne
   b5eb4:	2101      	movne	r1, #1
   b5eb6:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b5eb8:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b5ebc:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b5ec0:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b5ec4:	bf0c      	ite	eq
   b5ec6:	4974      	ldreq	r1, [pc, #464]	; (b6098 <loop+0xb74>)
   b5ec8:	4974      	ldrne	r1, [pc, #464]	; (b609c <loop+0xb78>)
   b5eca:	e7c9      	b.n	b5e60 <loop+0x93c>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b5ecc:	f73f ae08 	bgt.w	b5ae0 <loop+0x5bc>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b5ed0:	f003 fbf8 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5ed4:	4972      	ldr	r1, [pc, #456]	; (b60a0 <loop+0xb7c>)
   b5ed6:	e645      	b.n	b5b64 <loop+0x640>
            Serial.println("THEN detectado");
   b5ed8:	f003 fbf4 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5edc:	4971      	ldr	r1, [pc, #452]	; (b60a4 <loop+0xb80>)
   b5ede:	f003 f90c 	bl	b90fa <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b5ee2:	4b66      	ldr	r3, [pc, #408]	; (b607c <loop+0xb58>)
   b5ee4:	781b      	ldrb	r3, [r3, #0]
   b5ee6:	2b00      	cmp	r3, #0
   b5ee8:	f43f ae22 	beq.w	b5b30 <loop+0x60c>
   b5eec:	f8d9 3000 	ldr.w	r3, [r9]
   b5ef0:	2b00      	cmp	r3, #0
   b5ef2:	dd08      	ble.n	b5f06 <loop+0x9e2>
   b5ef4:	f8da 2000 	ldr.w	r2, [sl]
   b5ef8:	4293      	cmp	r3, r2
   b5efa:	dd04      	ble.n	b5f06 <loop+0x9e2>
              THEN_pasado = true;
   b5efc:	4b60      	ldr	r3, [pc, #384]	; (b6080 <loop+0xb5c>)
              showBitmap(3,0,"THEN");
   b5efe:	496a      	ldr	r1, [pc, #424]	; (b60a8 <loop+0xb84>)
              THEN_pasado = true;
   b5f00:	2201      	movs	r2, #1
   b5f02:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b5f04:	e7ac      	b.n	b5e60 <loop+0x93c>
                Serial.println("Numero de sensores infucientes");
   b5f06:	f003 fbdd 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5f0a:	4968      	ldr	r1, [pc, #416]	; (b60ac <loop+0xb88>)
   b5f0c:	e62a      	b.n	b5b64 <loop+0x640>
            Serial.println("ELSE detectado");
   b5f0e:	f003 fbd9 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5f12:	4967      	ldr	r1, [pc, #412]	; (b60b0 <loop+0xb8c>)
   b5f14:	f003 f8f1 	bl	b90fa <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b5f18:	4b58      	ldr	r3, [pc, #352]	; (b607c <loop+0xb58>)
   b5f1a:	781b      	ldrb	r3, [r3, #0]
   b5f1c:	2b00      	cmp	r3, #0
   b5f1e:	f43f ae07 	beq.w	b5b30 <loop+0x60c>
   b5f22:	f8d8 3000 	ldr.w	r3, [r8]
   b5f26:	2b00      	cmp	r3, #0
   b5f28:	dd04      	ble.n	b5f34 <loop+0xa10>
              ELSE_pasado = true;
   b5f2a:	4b51      	ldr	r3, [pc, #324]	; (b6070 <loop+0xb4c>)
              showBitmap(3,0,"ELSE");
   b5f2c:	4961      	ldr	r1, [pc, #388]	; (b60b4 <loop+0xb90>)
              ELSE_pasado = true;
   b5f2e:	2201      	movs	r2, #1
   b5f30:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b5f32:	e795      	b.n	b5e60 <loop+0x93c>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b5f34:	f003 fbc6 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5f38:	495f      	ldr	r1, [pc, #380]	; (b60b8 <loop+0xb94>)
   b5f3a:	e613      	b.n	b5b64 <loop+0x640>
        if ( tagInfo[0] != -1 ) {
   b5f3c:	3501      	adds	r5, #1
   b5f3e:	f43f ad05 	beq.w	b594c <loop+0x428>
          Serial.println("Tarjeta inválida para este modo");
   b5f42:	f003 fbbf 	bl	b96c4 <_Z16_fetch_usbserialv>
   b5f46:	495d      	ldr	r1, [pc, #372]	; (b60bc <loop+0xb98>)
   b5f48:	f003 f8d7 	bl	b90fa <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b5f4c:	4945      	ldr	r1, [pc, #276]	; (b6064 <loop+0xb40>)
   b5f4e:	a8c2      	add	r0, sp, #776	; 0x308
   b5f50:	f003 f805 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b5f54:	aac2      	add	r2, sp, #776	; 0x308
   b5f56:	2100      	movs	r1, #0
   b5f58:	e53d      	b.n	b59d6 <loop+0x4b2>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b5f5a:	2b01      	cmp	r3, #1
   b5f5c:	f47f ad07 	bne.w	b596e <loop+0x44a>
        valor = makeEvaluate(bloques[0]);
   b5f60:	4c57      	ldr	r4, [pc, #348]	; (b60c0 <loop+0xb9c>)
   b5f62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5f66:	f104 0110 	add.w	r1, r4, #16
   b5f6a:	4668      	mov	r0, sp
   b5f6c:	f004 fbd0 	bl	ba710 <memcpy>
   b5f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b5f74:	f7ff f86a 	bl	b504c <_Z12makeEvaluate6BLOQUE>
   b5f78:	4c52      	ldr	r4, [pc, #328]	; (b60c4 <loop+0xba0>)
        ejecutarEvaluacion(valor, 0);
   b5f7a:	2100      	movs	r1, #0
        valor = makeEvaluate(bloques[0]);
   b5f7c:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 0);
   b5f7e:	f7ff f88f 	bl	b50a0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b5f82:	7823      	ldrb	r3, [r4, #0]
   b5f84:	2b00      	cmp	r3, #0
   b5f86:	d034      	beq.n	b5ff2 <loop+0xace>
   b5f88:	494f      	ldr	r1, [pc, #316]	; (b60c8 <loop+0xba4>)
   b5f8a:	4850      	ldr	r0, [pc, #320]	; (b60cc <loop+0xba8>)
   b5f8c:	f004 fc14 	bl	ba7b8 <strcpy>
        display.println(buf);
   b5f90:	494e      	ldr	r1, [pc, #312]	; (b60cc <loop+0xba8>)
   b5f92:	484f      	ldr	r0, [pc, #316]	; (b60d0 <loop+0xbac>)
   b5f94:	f003 f8b1 	bl	b90fa <_ZN5Print7printlnEPKc>
      if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b5f98:	682d      	ldr	r5, [r5, #0]
   b5f9a:	2d01      	cmp	r5, #1
   b5f9c:	d11f      	bne.n	b5fde <loop+0xaba>
   b5f9e:	4c48      	ldr	r4, [pc, #288]	; (b60c0 <loop+0xb9c>)
   b5fa0:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b5fa4:	2b00      	cmp	r3, #0
   b5fa6:	dd28      	ble.n	b5ffa <loop+0xad6>
        valor = makeEvaluate(bloques[1]);
   b5fa8:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b5fac:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b5fb0:	4668      	mov	r0, sp
   b5fb2:	f004 fbad 	bl	ba710 <memcpy>
   b5fb6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b5fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5fbc:	f7ff f846 	bl	b504c <_Z12makeEvaluate6BLOQUE>
   b5fc0:	4c40      	ldr	r4, [pc, #256]	; (b60c4 <loop+0xba0>)
        ejecutarEvaluacion(valor, 1);
   b5fc2:	4629      	mov	r1, r5
        valor = makeEvaluate(bloques[1]);
   b5fc4:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 1);
   b5fc6:	f7ff f86b 	bl	b50a0 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b5fca:	7823      	ldrb	r3, [r4, #0]
   b5fcc:	b19b      	cbz	r3, b5ff6 <loop+0xad2>
   b5fce:	4941      	ldr	r1, [pc, #260]	; (b60d4 <loop+0xbb0>)
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b5fd0:	483e      	ldr	r0, [pc, #248]	; (b60cc <loop+0xba8>)
   b5fd2:	f004 fbf1 	bl	ba7b8 <strcpy>
        display.print(buf);
   b5fd6:	493d      	ldr	r1, [pc, #244]	; (b60cc <loop+0xba8>)
   b5fd8:	483d      	ldr	r0, [pc, #244]	; (b60d0 <loop+0xbac>)
   b5fda:	f003 f87b 	bl	b90d4 <_ZN5Print5printEPKc>
      display.display();
   b5fde:	4c3c      	ldr	r4, [pc, #240]	; (b60d0 <loop+0xbac>)
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	f002 fa29 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f001 ffbe 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b5fec:	2300      	movs	r3, #0
   b5fee:	6123      	str	r3, [r4, #16]
   b5ff0:	e494      	b.n	b591c <loop+0x3f8>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b5ff2:	4939      	ldr	r1, [pc, #228]	; (b60d8 <loop+0xbb4>)
   b5ff4:	e7c9      	b.n	b5f8a <loop+0xa66>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b5ff6:	4939      	ldr	r1, [pc, #228]	; (b60dc <loop+0xbb8>)
   b5ff8:	e7ea      	b.n	b5fd0 <loop+0xaac>
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b5ffa:	4939      	ldr	r1, [pc, #228]	; (b60e0 <loop+0xbbc>)
   b5ffc:	e7e8      	b.n	b5fd0 <loop+0xaac>
    switch (tagInfo[0])
   b5ffe:	2d02      	cmp	r5, #2
   b6000:	d07f      	beq.n	b6102 <loop+0xbde>
   b6002:	2d06      	cmp	r5, #6
   b6004:	f040 819f 	bne.w	b6346 <loop+0xe22>
      switch (tagInfo[1])
   b6008:	6860      	ldr	r0, [r4, #4]
   b600a:	2801      	cmp	r0, #1
   b600c:	d014      	beq.n	b6038 <loop+0xb14>
   b600e:	2802      	cmp	r0, #2
   b6010:	d020      	beq.n	b6054 <loop+0xb30>
   b6012:	b928      	cbnz	r0, b6020 <loop+0xafc>
          cambioModo(tagInfo[2]);
   b6014:	68a0      	ldr	r0, [r4, #8]
   b6016:	f7ff f875 	bl	b5104 <_Z10cambioModoi>
          resetFunc();
   b601a:	4b32      	ldr	r3, [pc, #200]	; (b60e4 <loop+0xbc0>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	4798      	blx	r3
    tagInfo[0] = -1;
   b6020:	f04f 33ff 	mov.w	r3, #4294967295
   b6024:	6023      	str	r3, [r4, #0]
    if (play) {
   b6026:	7833      	ldrb	r3, [r6, #0]
   b6028:	2b00      	cmp	r3, #0
   b602a:	f43f ac77 	beq.w	b591c <loop+0x3f8>
      reproducir();
   b602e:	f7fe fef3 	bl	b4e18 <_Z10reproducirv>
      play = false;
   b6032:	2300      	movs	r3, #0
   b6034:	7033      	strb	r3, [r6, #0]
}
   b6036:	e471      	b.n	b591c <loop+0x3f8>
          showBitmap(3,0,"Ejecutando...");   
   b6038:	492b      	ldr	r1, [pc, #172]	; (b60e8 <loop+0xbc4>)
          play = true;
   b603a:	7030      	strb	r0, [r6, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b603c:	a8c2      	add	r0, sp, #776	; 0x308
   b603e:	f002 ff8e 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6042:	aac2      	add	r2, sp, #776	; 0x308
   b6044:	2100      	movs	r1, #0
   b6046:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b6048:	f7fe fc42 	bl	b48d0 <_Z10showBitmapii6String>
   b604c:	a8c2      	add	r0, sp, #776	; 0x308
   b604e:	f002 ff3b 	bl	b8ec8 <_ZN6StringD1Ev>
   b6052:	e7e5      	b.n	b6020 <loop+0xafc>
          if ( tagInfo[2] == 0 ) {
   b6054:	68a5      	ldr	r5, [r4, #8]
   b6056:	2d00      	cmp	r5, #0
   b6058:	d14a      	bne.n	b60f0 <loop+0xbcc>
            borradoPOP();
   b605a:	f7fe fe07 	bl	b4c6c <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b605e:	4923      	ldr	r1, [pc, #140]	; (b60ec <loop+0xbc8>)
   b6060:	e7ec      	b.n	b603c <loop+0xb18>
   b6062:	bf00      	nop
   b6064:	000badae 	.word	0x000badae
   b6068:	000baad8 	.word	0x000baad8
   b606c:	000baebd 	.word	0x000baebd
   b6070:	2003cd40 	.word	0x2003cd40
   b6074:	000baece 	.word	0x000baece
   b6078:	000baee3 	.word	0x000baee3
   b607c:	2003cd41 	.word	0x2003cd41
   b6080:	2003cd50 	.word	0x2003cd50
   b6084:	000baef0 	.word	0x000baef0
   b6088:	2003da6c 	.word	0x2003da6c
   b608c:	2003da70 	.word	0x2003da70
   b6090:	000baef3 	.word	0x000baef3
   b6094:	000baf45 	.word	0x000baf45
   b6098:	000bae95 	.word	0x000bae95
   b609c:	000baf56 	.word	0x000baf56
   b60a0:	000baf5a 	.word	0x000baf5a
   b60a4:	000baf8c 	.word	0x000baf8c
   b60a8:	000baf9b 	.word	0x000baf9b
   b60ac:	000bafa0 	.word	0x000bafa0
   b60b0:	000bafbf 	.word	0x000bafbf
   b60b4:	000bafce 	.word	0x000bafce
   b60b8:	000bafd3 	.word	0x000bafd3
   b60bc:	000bb064 	.word	0x000bb064
   b60c0:	2003cd54 	.word	0x2003cd54
   b60c4:	2003e6b8 	.word	0x2003e6b8
   b60c8:	000bb085 	.word	0x000bb085
   b60cc:	2003d32d 	.word	0x2003d32d
   b60d0:	2003d378 	.word	0x2003d378
   b60d4:	000bb0b5 	.word	0x000bb0b5
   b60d8:	000bb094 	.word	0x000bb094
   b60dc:	000bb0c4 	.word	0x000bb0c4
   b60e0:	000bb0d4 	.word	0x000bb0d4
   b60e4:	2003da74 	.word	0x2003da74
   b60e8:	000bb0ee 	.word	0x000bb0ee
   b60ec:	000bb0fc 	.word	0x000bb0fc
          } else if ( tagInfo[2] == 1 ){
   b60f0:	2d01      	cmp	r5, #1
   b60f2:	d103      	bne.n	b60fc <loop+0xbd8>
            borradoALL(2);
   b60f4:	f7fe fcfe 	bl	b4af4 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b60f8:	499a      	ldr	r1, [pc, #616]	; (b6364 <loop+0xe40>)
   b60fa:	e79f      	b.n	b603c <loop+0xb18>
            borradoBLOQUE(2);
   b60fc:	f7fe fd1e 	bl	b4b3c <_Z13borradoBLOQUEi>
   b6100:	e78e      	b.n	b6020 <loop+0xafc>
      switch (tagInfo[1])
   b6102:	6863      	ldr	r3, [r4, #4]
   b6104:	2b01      	cmp	r3, #1
   b6106:	d078      	beq.n	b61fa <loop+0xcd6>
   b6108:	2b02      	cmp	r3, #2
   b610a:	f000 80bc 	beq.w	b6286 <loop+0xd62>
   b610e:	2b00      	cmp	r3, #0
   b6110:	d186      	bne.n	b6020 <loop+0xafc>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b6112:	68a1      	ldr	r1, [r4, #8]
   b6114:	4d94      	ldr	r5, [pc, #592]	; (b6368 <loop+0xe44>)
   b6116:	4f95      	ldr	r7, [pc, #596]	; (b636c <loop+0xe48>)
   b6118:	a8ba      	add	r0, sp, #744	; 0x2e8
   b611a:	f7fe fe17 	bl	b4d4c <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b611e:	a9ba      	add	r1, sp, #744	; 0x2e8
   b6120:	a8c2      	add	r0, sp, #776	; 0x308
   b6122:	f002 ff3f 	bl	b8fa4 <_ZN6StringC1ERKS_>
   b6126:	68e1      	ldr	r1, [r4, #12]
   b6128:	a8be      	add	r0, sp, #760	; 0x2f8
   b612a:	f7fe fe41 	bl	b4db0 <_Z19decodificarTIPO_msgi>
   b612e:	a9be      	add	r1, sp, #760	; 0x2f8
   b6130:	a8c2      	add	r0, sp, #776	; 0x308
   b6132:	f002 ff7e 	bl	b9032 <_ZplRK15StringSumHelperRK6String>
   b6136:	498e      	ldr	r1, [pc, #568]	; (b6370 <loop+0xe4c>)
   b6138:	f002 ff87 	bl	b904a <_ZplRK15StringSumHelperPKc>
   b613c:	4601      	mov	r1, r0
   b613e:	6828      	ldr	r0, [r5, #0]
   b6140:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b6144:	f002 ff1f 	bl	b8f86 <_ZN6StringaSERKS_>
   b6148:	a8be      	add	r0, sp, #760	; 0x2f8
   b614a:	f002 febd 	bl	b8ec8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b614e:	a8c2      	add	r0, sp, #776	; 0x308
   b6150:	f002 feba 	bl	b8ec8 <_ZN6StringD1Ev>
   b6154:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6156:	f002 feb7 	bl	b8ec8 <_ZN6StringD1Ev>
        if (posicion<23) {
   b615a:	682b      	ldr	r3, [r5, #0]
   b615c:	2b16      	cmp	r3, #22
   b615e:	dc45      	bgt.n	b61ec <loop+0xcc8>
	const char * c_str() const { return buffer; }
   b6160:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b6162:	4884      	ldr	r0, [pc, #528]	; (b6374 <loop+0xe50>)
   b6164:	58fa      	ldr	r2, [r7, r3]
   b6166:	2140      	movs	r1, #64	; 0x40
   b6168:	f002 fd38 	bl	b8bdc <snprintf>
          display.print(buf);
   b616c:	4981      	ldr	r1, [pc, #516]	; (b6374 <loop+0xe50>)
   b616e:	4882      	ldr	r0, [pc, #520]	; (b6378 <loop+0xe54>)
   b6170:	f002 ffb0 	bl	b90d4 <_ZN5Print5printEPKc>
          display.display();
   b6174:	4880      	ldr	r0, [pc, #512]	; (b6378 <loop+0xe54>)
   b6176:	f002 f95f 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b617a:	f003 faa3 	bl	b96c4 <_Z16_fetch_usbserialv>
   b617e:	68a1      	ldr	r1, [r4, #8]
   b6180:	4607      	mov	r7, r0
   b6182:	a8ba      	add	r0, sp, #744	; 0x2e8
   b6184:	f7fe fde2 	bl	b4d4c <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b6188:	a9ba      	add	r1, sp, #744	; 0x2e8
   b618a:	a8c2      	add	r0, sp, #776	; 0x308
   b618c:	f002 ff0a 	bl	b8fa4 <_ZN6StringC1ERKS_>
   b6190:	68e1      	ldr	r1, [r4, #12]
   b6192:	a8be      	add	r0, sp, #760	; 0x2f8
   b6194:	f7fe fe0c 	bl	b4db0 <_Z19decodificarTIPO_msgi>
   b6198:	a9be      	add	r1, sp, #760	; 0x2f8
   b619a:	a8c2      	add	r0, sp, #776	; 0x308
   b619c:	f002 ff49 	bl	b9032 <_ZplRK15StringSumHelperRK6String>
   b61a0:	6801      	ldr	r1, [r0, #0]
   b61a2:	4638      	mov	r0, r7
   b61a4:	f7fd ffbc 	bl	b4120 <_ZN5Print8printlnfEPKcz>
   b61a8:	a8be      	add	r0, sp, #760	; 0x2f8
   b61aa:	f002 fe8d 	bl	b8ec8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b61ae:	a8c2      	add	r0, sp, #776	; 0x308
   b61b0:	f002 fe8a 	bl	b8ec8 <_ZN6StringD1Ev>
   b61b4:	a8ba      	add	r0, sp, #744	; 0x2e8
   b61b6:	f002 fe87 	bl	b8ec8 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b61ba:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b61be:	f7fe fe11 	bl	b4de4 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b61c2:	682b      	ldr	r3, [r5, #0]
   b61c4:	4a6d      	ldr	r2, [pc, #436]	; (b637c <loop+0xe58>)
   b61c6:	68a1      	ldr	r1, [r4, #8]
   b61c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b61cc:	4a6c      	ldr	r2, [pc, #432]	; (b6380 <loop+0xe5c>)
   b61ce:	68e1      	ldr	r1, [r4, #12]
   b61d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b61d4:	3301      	adds	r3, #1
   b61d6:	602b      	str	r3, [r5, #0]
        if (bucle) {
   b61d8:	4b6a      	ldr	r3, [pc, #424]	; (b6384 <loop+0xe60>)
   b61da:	781b      	ldrb	r3, [r3, #0]
   b61dc:	2b00      	cmp	r3, #0
   b61de:	f43f af1f 	beq.w	b6020 <loop+0xafc>
          tam_bucle++;
   b61e2:	4a69      	ldr	r2, [pc, #420]	; (b6388 <loop+0xe64>)
   b61e4:	6813      	ldr	r3, [r2, #0]
   b61e6:	3301      	adds	r3, #1
   b61e8:	6013      	str	r3, [r2, #0]
   b61ea:	e719      	b.n	b6020 <loop+0xafc>
        } else if (posicion==23){
   b61ec:	2b17      	cmp	r3, #23
   b61ee:	d1c4      	bne.n	b617a <loop+0xc56>
          snprintf(buf, sizeof(buf), "...");
   b61f0:	4966      	ldr	r1, [pc, #408]	; (b638c <loop+0xe68>)
   b61f2:	4860      	ldr	r0, [pc, #384]	; (b6374 <loop+0xe50>)
   b61f4:	f004 fae0 	bl	ba7b8 <strcpy>
   b61f8:	e7b8      	b.n	b616c <loop+0xc48>
        if (!bucle) {
   b61fa:	4f62      	ldr	r7, [pc, #392]	; (b6384 <loop+0xe60>)
   b61fc:	783b      	ldrb	r3, [r7, #0]
   b61fe:	2b00      	cmp	r3, #0
   b6200:	d134      	bne.n	b626c <loop+0xd48>
          secuencia[posicion] = "Loop - ";
   b6202:	4d59      	ldr	r5, [pc, #356]	; (b6368 <loop+0xe44>)
   b6204:	f8df 8164 	ldr.w	r8, [pc, #356]	; b636c <loop+0xe48>
          Serial.println("Loop");
   b6208:	f003 fa5c 	bl	b96c4 <_Z16_fetch_usbserialv>
   b620c:	4960      	ldr	r1, [pc, #384]	; (b6390 <loop+0xe6c>)
   b620e:	f002 ff74 	bl	b90fa <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b6212:	6828      	ldr	r0, [r5, #0]
   b6214:	495f      	ldr	r1, [pc, #380]	; (b6394 <loop+0xe70>)
   b6216:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b621a:	f002 fece 	bl	b8fba <_ZN6StringaSEPKc>
          if (posicion<23) {
   b621e:	682b      	ldr	r3, [r5, #0]
   b6220:	2b16      	cmp	r3, #22
   b6222:	dc1c      	bgt.n	b625e <loop+0xd3a>
	const char * c_str() const { return buffer; }
   b6224:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b6226:	4853      	ldr	r0, [pc, #332]	; (b6374 <loop+0xe50>)
   b6228:	f858 2003 	ldr.w	r2, [r8, r3]
   b622c:	2140      	movs	r1, #64	; 0x40
   b622e:	f002 fcd5 	bl	b8bdc <snprintf>
            display.print(buf);
   b6232:	4950      	ldr	r1, [pc, #320]	; (b6374 <loop+0xe50>)
   b6234:	4850      	ldr	r0, [pc, #320]	; (b6378 <loop+0xe54>)
   b6236:	f002 ff4d 	bl	b90d4 <_ZN5Print5printEPKc>
            display.display();
   b623a:	484f      	ldr	r0, [pc, #316]	; (b6378 <loop+0xe54>)
   b623c:	f002 f8fc 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b6240:	682b      	ldr	r3, [r5, #0]
   b6242:	4a4e      	ldr	r2, [pc, #312]	; (b637c <loop+0xe58>)
   b6244:	f04f 31ff 	mov.w	r1, #4294967295
   b6248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b624c:	4a4c      	ldr	r2, [pc, #304]	; (b6380 <loop+0xe5c>)
   b624e:	2100      	movs	r1, #0
   b6250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b6254:	3301      	adds	r3, #1
   b6256:	602b      	str	r3, [r5, #0]
          bucle = true;
   b6258:	2301      	movs	r3, #1
   b625a:	703b      	strb	r3, [r7, #0]
   b625c:	e6e0      	b.n	b6020 <loop+0xafc>
          } else if (posicion==23){
   b625e:	2b17      	cmp	r3, #23
   b6260:	d1ee      	bne.n	b6240 <loop+0xd1c>
            snprintf(buf, sizeof(buf), "...");
   b6262:	494a      	ldr	r1, [pc, #296]	; (b638c <loop+0xe68>)
   b6264:	4843      	ldr	r0, [pc, #268]	; (b6374 <loop+0xe50>)
   b6266:	f004 faa7 	bl	ba7b8 <strcpy>
   b626a:	e7e2      	b.n	b6232 <loop+0xd0e>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b626c:	f003 fa2a 	bl	b96c4 <_Z16_fetch_usbserialv>
   b6270:	4949      	ldr	r1, [pc, #292]	; (b6398 <loop+0xe74>)
          Serial.println("Loop sin comenzar o sin contenido");
   b6272:	f002 ff42 	bl	b90fa <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b6276:	4949      	ldr	r1, [pc, #292]	; (b639c <loop+0xe78>)
   b6278:	a8c2      	add	r0, sp, #776	; 0x308
   b627a:	f002 fe70 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b627e:	aac2      	add	r2, sp, #776	; 0x308
   b6280:	2102      	movs	r1, #2
        showBitmap(2,0,"");
   b6282:	2002      	movs	r0, #2
   b6284:	e6e0      	b.n	b6048 <loop+0xb24>
        if (bucle && tam_bucle>0) {
   b6286:	4f3f      	ldr	r7, [pc, #252]	; (b6384 <loop+0xe60>)
   b6288:	783b      	ldrb	r3, [r7, #0]
   b628a:	2b00      	cmp	r3, #0
   b628c:	d057      	beq.n	b633e <loop+0xe1a>
   b628e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b6388 <loop+0xe64>
   b6292:	f8d8 3000 	ldr.w	r3, [r8]
   b6296:	2b00      	cmp	r3, #0
   b6298:	dd51      	ble.n	b633e <loop+0xe1a>
          Serial.println("END Loop");
   b629a:	f003 fa13 	bl	b96c4 <_Z16_fetch_usbserialv>
   b629e:	4940      	ldr	r1, [pc, #256]	; (b63a0 <loop+0xe7c>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b62a0:	4d31      	ldr	r5, [pc, #196]	; (b6368 <loop+0xe44>)
   b62a2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b636c <loop+0xe48>
          Serial.println("END Loop");
   b62a6:	f002 ff28 	bl	b90fa <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b62aa:	68a1      	ldr	r1, [r4, #8]
   b62ac:	220a      	movs	r2, #10
   b62ae:	3102      	adds	r1, #2
   b62b0:	a8be      	add	r0, sp, #760	; 0x2f8
   b62b2:	f002 fe94 	bl	b8fde <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b62b6:	a9be      	add	r1, sp, #760	; 0x2f8
   b62b8:	a8c2      	add	r0, sp, #776	; 0x308
   b62ba:	f002 fe73 	bl	b8fa4 <_ZN6StringC1ERKS_>
   b62be:	4939      	ldr	r1, [pc, #228]	; (b63a4 <loop+0xe80>)
   b62c0:	a8c2      	add	r0, sp, #776	; 0x308
   b62c2:	f002 fec2 	bl	b904a <_ZplRK15StringSumHelperPKc>
   b62c6:	4601      	mov	r1, r0
   b62c8:	6828      	ldr	r0, [r5, #0]
   b62ca:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b62ce:	f002 fe5a 	bl	b8f86 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b62d2:	a8c2      	add	r0, sp, #776	; 0x308
   b62d4:	f002 fdf8 	bl	b8ec8 <_ZN6StringD1Ev>
   b62d8:	a8be      	add	r0, sp, #760	; 0x2f8
   b62da:	f002 fdf5 	bl	b8ec8 <_ZN6StringD1Ev>
          if (posicion<23) {
   b62de:	682b      	ldr	r3, [r5, #0]
   b62e0:	2b16      	cmp	r3, #22
   b62e2:	dc25      	bgt.n	b6330 <loop+0xe0c>
	const char * c_str() const { return buffer; }
   b62e4:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b62e6:	4823      	ldr	r0, [pc, #140]	; (b6374 <loop+0xe50>)
   b62e8:	f859 2003 	ldr.w	r2, [r9, r3]
   b62ec:	2140      	movs	r1, #64	; 0x40
   b62ee:	f002 fc75 	bl	b8bdc <snprintf>
            display.print(buf);
   b62f2:	4920      	ldr	r1, [pc, #128]	; (b6374 <loop+0xe50>)
   b62f4:	4820      	ldr	r0, [pc, #128]	; (b6378 <loop+0xe54>)
   b62f6:	f002 feed 	bl	b90d4 <_ZN5Print5printEPKc>
            display.display();
   b62fa:	481f      	ldr	r0, [pc, #124]	; (b6378 <loop+0xe54>)
   b62fc:	f002 f89c 	bl	b8438 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b6300:	682b      	ldr	r3, [r5, #0]
   b6302:	4a1e      	ldr	r2, [pc, #120]	; (b637c <loop+0xe58>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b6304:	481e      	ldr	r0, [pc, #120]	; (b6380 <loop+0xe5c>)
          notas[posicion] = -2;
   b6306:	f06f 0101 	mvn.w	r1, #1
   b630a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b630e:	f8d8 2000 	ldr.w	r2, [r8]
   b6312:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b6316:	68a1      	ldr	r1, [r4, #8]
   b6318:	3201      	adds	r2, #1
   b631a:	1a9a      	subs	r2, r3, r2
          posicion++;
   b631c:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b631e:	3102      	adds	r1, #2
          posicion++;
   b6320:	602b      	str	r3, [r5, #0]
          bucle = false;
   b6322:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b6324:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b6328:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b632a:	f8c8 3000 	str.w	r3, [r8]
   b632e:	e677      	b.n	b6020 <loop+0xafc>
          } else if (posicion==23){
   b6330:	2b17      	cmp	r3, #23
   b6332:	d1e5      	bne.n	b6300 <loop+0xddc>
            snprintf(buf, sizeof(buf), "...");
   b6334:	4915      	ldr	r1, [pc, #84]	; (b638c <loop+0xe68>)
   b6336:	480f      	ldr	r0, [pc, #60]	; (b6374 <loop+0xe50>)
   b6338:	f004 fa3e 	bl	ba7b8 <strcpy>
   b633c:	e7d9      	b.n	b62f2 <loop+0xdce>
          Serial.println("Loop sin comenzar o sin contenido");
   b633e:	f003 f9c1 	bl	b96c4 <_Z16_fetch_usbserialv>
   b6342:	4919      	ldr	r1, [pc, #100]	; (b63a8 <loop+0xe84>)
   b6344:	e795      	b.n	b6272 <loop+0xd4e>
      if ( tagInfo[0] != -1 ) {
   b6346:	3501      	adds	r5, #1
   b6348:	f43f ae6a 	beq.w	b6020 <loop+0xafc>
        Serial.println("Tarjeta inválida para este modo");
   b634c:	f003 f9ba 	bl	b96c4 <_Z16_fetch_usbserialv>
   b6350:	4916      	ldr	r1, [pc, #88]	; (b63ac <loop+0xe88>)
   b6352:	f002 fed2 	bl	b90fa <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b6356:	4911      	ldr	r1, [pc, #68]	; (b639c <loop+0xe78>)
   b6358:	a8c2      	add	r0, sp, #776	; 0x308
   b635a:	f002 fe00 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b635e:	aac2      	add	r2, sp, #776	; 0x308
   b6360:	2100      	movs	r1, #0
   b6362:	e78e      	b.n	b6282 <loop+0xd5e>
   b6364:	000badd9 	.word	0x000badd9
   b6368:	2003da60 	.word	0x2003da60
   b636c:	2003da78 	.word	0x2003da78
   b6370:	000bb15c 	.word	0x000bb15c
   b6374:	2003d32d 	.word	0x2003d32d
   b6378:	2003d378 	.word	0x2003d378
   b637c:	2003d730 	.word	0x2003d730
   b6380:	2003d3e8 	.word	0x2003d3e8
   b6384:	2003d32c 	.word	0x2003d32c
   b6388:	2003dc60 	.word	0x2003dc60
   b638c:	000bacba 	.word	0x000bacba
   b6390:	000bb154 	.word	0x000bb154
   b6394:	000bb113 	.word	0x000bb113
   b6398:	000bb11b 	.word	0x000bb11b
   b639c:	000badae 	.word	0x000badae
   b63a0:	000bb150 	.word	0x000bb150
   b63a4:	000bb159 	.word	0x000bb159
   b63a8:	000bb160 	.word	0x000bb160
   b63ac:	000bb064 	.word	0x000bb064

000b63b0 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b63b0:	2305      	movs	r3, #5
}
   b63b2:	b570      	push	{r4, r5, r6, lr}
   b63b4:	461a      	mov	r2, r3
   b63b6:	2104      	movs	r1, #4
   b63b8:	48a9      	ldr	r0, [pc, #676]	; (b6660 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
String tarjetas[80] = {"0#3#0"};
   b63ba:	4daa      	ldr	r5, [pc, #680]	; (b6664 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b63bc:	4eaa      	ldr	r6, [pc, #680]	; (b6668 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b63be:	f002 f8d5 	bl	b856c <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b63c2:	4baa      	ldr	r3, [pc, #680]	; (b666c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
Adafruit_SSD1306 display(-1);
   b63c4:	48aa      	ldr	r0, [pc, #680]	; (b6670 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b63c6:	2400      	movs	r4, #0
   b63c8:	601c      	str	r4, [r3, #0]
   b63ca:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b63ce:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b63d2:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b63d6:	f04f 31ff 	mov.w	r1, #4294967295
   b63da:	f001 fcd1 	bl	b7d80 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b63de:	49a5      	ldr	r1, [pc, #660]	; (b6674 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b63e0:	48a5      	ldr	r0, [pc, #660]	; (b6678 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b63e2:	f002 fdbc 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b63e6:	49a3      	ldr	r1, [pc, #652]	; (b6674 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b63e8:	48a4      	ldr	r0, [pc, #656]	; (b667c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b63ea:	f002 fdb8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
                        "0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5" };
   b63ee:	49a4      	ldr	r1, [pc, #656]	; (b6680 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b63f0:	48a4      	ldr	r0, [pc, #656]	; (b6684 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b63f2:	f002 fdb4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b63f6:	49a4      	ldr	r1, [pc, #656]	; (b6688 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b63f8:	48a4      	ldr	r0, [pc, #656]	; (b668c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b63fa:	f002 fdb0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b63fe:	49a4      	ldr	r1, [pc, #656]	; (b6690 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b6400:	48a4      	ldr	r0, [pc, #656]	; (b6694 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b6402:	f002 fdac 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6406:	49a4      	ldr	r1, [pc, #656]	; (b6698 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b6408:	48a4      	ldr	r0, [pc, #656]	; (b669c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b640a:	f002 fda8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b640e:	49a4      	ldr	r1, [pc, #656]	; (b66a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b6410:	48a4      	ldr	r0, [pc, #656]	; (b66a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b6412:	f002 fda4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6416:	49a4      	ldr	r1, [pc, #656]	; (b66a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b6418:	48a4      	ldr	r0, [pc, #656]	; (b66ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b641a:	f002 fda0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b641e:	49a4      	ldr	r1, [pc, #656]	; (b66b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b6420:	48a4      	ldr	r0, [pc, #656]	; (b66b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b6422:	f002 fd9c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6426:	49a4      	ldr	r1, [pc, #656]	; (b66b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b6428:	48a4      	ldr	r0, [pc, #656]	; (b66bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b642a:	f002 fd98 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b642e:	49a4      	ldr	r1, [pc, #656]	; (b66c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b6430:	48a4      	ldr	r0, [pc, #656]	; (b66c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b6432:	f002 fd94 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6436:	49a4      	ldr	r1, [pc, #656]	; (b66c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b6438:	48a4      	ldr	r0, [pc, #656]	; (b66cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b643a:	f002 fd90 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b643e:	49a4      	ldr	r1, [pc, #656]	; (b66d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b6440:	48a4      	ldr	r0, [pc, #656]	; (b66d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b6442:	f002 fd8c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6446:	49a4      	ldr	r1, [pc, #656]	; (b66d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b6448:	48a4      	ldr	r0, [pc, #656]	; (b66dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b644a:	f002 fd88 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b644e:	49a4      	ldr	r1, [pc, #656]	; (b66e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b6450:	48a4      	ldr	r0, [pc, #656]	; (b66e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b6452:	f002 fd84 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6456:	49a4      	ldr	r1, [pc, #656]	; (b66e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b6458:	48a4      	ldr	r0, [pc, #656]	; (b66ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b645a:	f002 fd80 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b645e:	49a4      	ldr	r1, [pc, #656]	; (b66f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b6460:	48a4      	ldr	r0, [pc, #656]	; (b66f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b6462:	f002 fd7c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6466:	49a4      	ldr	r1, [pc, #656]	; (b66f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b6468:	48a4      	ldr	r0, [pc, #656]	; (b66fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b646a:	f002 fd78 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b646e:	49a4      	ldr	r1, [pc, #656]	; (b6700 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b6470:	48a4      	ldr	r0, [pc, #656]	; (b6704 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b6472:	f002 fd74 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6476:	49a4      	ldr	r1, [pc, #656]	; (b6708 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b6478:	48a4      	ldr	r0, [pc, #656]	; (b670c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b647a:	f002 fd70 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b647e:	49a4      	ldr	r1, [pc, #656]	; (b6710 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b6480:	48a4      	ldr	r0, [pc, #656]	; (b6714 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b6482:	f002 fd6c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6486:	49a4      	ldr	r1, [pc, #656]	; (b6718 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b6488:	48a4      	ldr	r0, [pc, #656]	; (b671c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b648a:	f002 fd68 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b648e:	49a4      	ldr	r1, [pc, #656]	; (b6720 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b6490:	48a4      	ldr	r0, [pc, #656]	; (b6724 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b6492:	f002 fd64 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6496:	49a4      	ldr	r1, [pc, #656]	; (b6728 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b6498:	48a4      	ldr	r0, [pc, #656]	; (b672c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b649a:	f002 fd60 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b649e:	49a4      	ldr	r1, [pc, #656]	; (b6730 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b64a0:	48a4      	ldr	r0, [pc, #656]	; (b6734 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b64a2:	f002 fd5c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64a6:	49a4      	ldr	r1, [pc, #656]	; (b6738 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b64a8:	48a4      	ldr	r0, [pc, #656]	; (b673c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b64aa:	f002 fd58 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64ae:	49a4      	ldr	r1, [pc, #656]	; (b6740 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b64b0:	48a4      	ldr	r0, [pc, #656]	; (b6744 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b64b2:	f002 fd54 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64b6:	49a4      	ldr	r1, [pc, #656]	; (b6748 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b64b8:	48a4      	ldr	r0, [pc, #656]	; (b674c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b64ba:	f002 fd50 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64be:	49a4      	ldr	r1, [pc, #656]	; (b6750 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b64c0:	48a4      	ldr	r0, [pc, #656]	; (b6754 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b64c2:	f002 fd4c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64c6:	49a4      	ldr	r1, [pc, #656]	; (b6758 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b64c8:	48a4      	ldr	r0, [pc, #656]	; (b675c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b64ca:	f002 fd48 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64ce:	49a4      	ldr	r1, [pc, #656]	; (b6760 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b64d0:	48a4      	ldr	r0, [pc, #656]	; (b6764 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b64d2:	f002 fd44 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64d6:	49a4      	ldr	r1, [pc, #656]	; (b6768 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b64d8:	48a4      	ldr	r0, [pc, #656]	; (b676c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b64da:	f002 fd40 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64de:	49a4      	ldr	r1, [pc, #656]	; (b6770 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b64e0:	48a4      	ldr	r0, [pc, #656]	; (b6774 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b64e2:	f002 fd3c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64e6:	49a4      	ldr	r1, [pc, #656]	; (b6778 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b64e8:	48a4      	ldr	r0, [pc, #656]	; (b677c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b64ea:	f002 fd38 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64ee:	49a4      	ldr	r1, [pc, #656]	; (b6780 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b64f0:	48a4      	ldr	r0, [pc, #656]	; (b6784 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b64f2:	f002 fd34 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64f6:	49a4      	ldr	r1, [pc, #656]	; (b6788 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b64f8:	48a4      	ldr	r0, [pc, #656]	; (b678c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b64fa:	f002 fd30 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b64fe:	49a4      	ldr	r1, [pc, #656]	; (b6790 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b6500:	48a4      	ldr	r0, [pc, #656]	; (b6794 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b6502:	f002 fd2c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6506:	49a4      	ldr	r1, [pc, #656]	; (b6798 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b6508:	48a4      	ldr	r0, [pc, #656]	; (b679c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b650a:	f002 fd28 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b650e:	49a4      	ldr	r1, [pc, #656]	; (b67a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b6510:	48a4      	ldr	r0, [pc, #656]	; (b67a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b6512:	f002 fd24 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6516:	49a4      	ldr	r1, [pc, #656]	; (b67a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b6518:	48a4      	ldr	r0, [pc, #656]	; (b67ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b651a:	f002 fd20 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b651e:	49a4      	ldr	r1, [pc, #656]	; (b67b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b6520:	48a4      	ldr	r0, [pc, #656]	; (b67b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b6522:	f002 fd1c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6526:	49a4      	ldr	r1, [pc, #656]	; (b67b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b6528:	48a4      	ldr	r0, [pc, #656]	; (b67bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b652a:	f002 fd18 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b652e:	49a4      	ldr	r1, [pc, #656]	; (b67c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b6530:	48a4      	ldr	r0, [pc, #656]	; (b67c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b6532:	f002 fd14 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6536:	49a4      	ldr	r1, [pc, #656]	; (b67c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b6538:	48a4      	ldr	r0, [pc, #656]	; (b67cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b653a:	f002 fd10 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b653e:	49a4      	ldr	r1, [pc, #656]	; (b67d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b6540:	48a4      	ldr	r0, [pc, #656]	; (b67d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b6542:	f002 fd0c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6546:	49a4      	ldr	r1, [pc, #656]	; (b67d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b6548:	48a4      	ldr	r0, [pc, #656]	; (b67dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b654a:	f002 fd08 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b654e:	49a4      	ldr	r1, [pc, #656]	; (b67e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b6550:	48a4      	ldr	r0, [pc, #656]	; (b67e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b6552:	f002 fd04 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6556:	49a4      	ldr	r1, [pc, #656]	; (b67e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b6558:	48a4      	ldr	r0, [pc, #656]	; (b67ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b655a:	f002 fd00 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b655e:	49a4      	ldr	r1, [pc, #656]	; (b67f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b6560:	48a4      	ldr	r0, [pc, #656]	; (b67f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b6562:	f002 fcfc 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6566:	49a4      	ldr	r1, [pc, #656]	; (b67f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b6568:	48a4      	ldr	r0, [pc, #656]	; (b67fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b656a:	f002 fcf8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b656e:	49a4      	ldr	r1, [pc, #656]	; (b6800 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b6570:	48a4      	ldr	r0, [pc, #656]	; (b6804 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b6572:	f002 fcf4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6576:	49a4      	ldr	r1, [pc, #656]	; (b6808 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b6578:	48a4      	ldr	r0, [pc, #656]	; (b680c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b657a:	f002 fcf0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b657e:	49a4      	ldr	r1, [pc, #656]	; (b6810 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b6580:	48a4      	ldr	r0, [pc, #656]	; (b6814 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b6582:	f002 fcec 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6586:	49a4      	ldr	r1, [pc, #656]	; (b6818 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b6588:	48a4      	ldr	r0, [pc, #656]	; (b681c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b658a:	f002 fce8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b658e:	49a4      	ldr	r1, [pc, #656]	; (b6820 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b6590:	48a4      	ldr	r0, [pc, #656]	; (b6824 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b6592:	f002 fce4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6596:	49a4      	ldr	r1, [pc, #656]	; (b6828 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b6598:	48a4      	ldr	r0, [pc, #656]	; (b682c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b659a:	f002 fce0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b659e:	49a4      	ldr	r1, [pc, #656]	; (b6830 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b65a0:	48a4      	ldr	r0, [pc, #656]	; (b6834 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b65a2:	f002 fcdc 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65a6:	49a4      	ldr	r1, [pc, #656]	; (b6838 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b65a8:	48a4      	ldr	r0, [pc, #656]	; (b683c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b65aa:	f002 fcd8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ae:	49a4      	ldr	r1, [pc, #656]	; (b6840 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b65b0:	48a4      	ldr	r0, [pc, #656]	; (b6844 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b65b2:	f002 fcd4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65b6:	49a4      	ldr	r1, [pc, #656]	; (b6848 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b65b8:	48a4      	ldr	r0, [pc, #656]	; (b684c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b65ba:	f002 fcd0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65be:	49a4      	ldr	r1, [pc, #656]	; (b6850 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b65c0:	48a4      	ldr	r0, [pc, #656]	; (b6854 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b65c2:	f002 fccc 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65c6:	49a4      	ldr	r1, [pc, #656]	; (b6858 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b65c8:	48a4      	ldr	r0, [pc, #656]	; (b685c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b65ca:	f002 fcc8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ce:	49a4      	ldr	r1, [pc, #656]	; (b6860 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b65d0:	48a4      	ldr	r0, [pc, #656]	; (b6864 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b65d2:	f002 fcc4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65d6:	49a4      	ldr	r1, [pc, #656]	; (b6868 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b65d8:	48a4      	ldr	r0, [pc, #656]	; (b686c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b65da:	f002 fcc0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65de:	49a4      	ldr	r1, [pc, #656]	; (b6870 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b65e0:	48a4      	ldr	r0, [pc, #656]	; (b6874 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b65e2:	f002 fcbc 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65e6:	49a4      	ldr	r1, [pc, #656]	; (b6878 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c8>)
   b65e8:	48a4      	ldr	r0, [pc, #656]	; (b687c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4cc>)
   b65ea:	f002 fcb8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ee:	49a4      	ldr	r1, [pc, #656]	; (b6880 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d0>)
   b65f0:	48a4      	ldr	r0, [pc, #656]	; (b6884 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d4>)
   b65f2:	f002 fcb4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65f6:	49a4      	ldr	r1, [pc, #656]	; (b6888 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d8>)
   b65f8:	48a4      	ldr	r0, [pc, #656]	; (b688c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4dc>)
   b65fa:	f002 fcb0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	49a4      	ldr	r1, [pc, #656]	; (b6890 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e0>)
   b6600:	48a4      	ldr	r0, [pc, #656]	; (b6894 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e4>)
   b6602:	f002 fcac 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6606:	49a4      	ldr	r1, [pc, #656]	; (b6898 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e8>)
   b6608:	48a4      	ldr	r0, [pc, #656]	; (b689c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ec>)
   b660a:	f002 fca8 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b660e:	49a4      	ldr	r1, [pc, #656]	; (b68a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f0>)
   b6610:	48a4      	ldr	r0, [pc, #656]	; (b68a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f4>)
   b6612:	f002 fca4 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6616:	49a4      	ldr	r1, [pc, #656]	; (b68a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f8>)
   b6618:	48a4      	ldr	r0, [pc, #656]	; (b68ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4fc>)
   b661a:	f002 fca0 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b661e:	49a4      	ldr	r1, [pc, #656]	; (b68b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x500>)
   b6620:	48a4      	ldr	r0, [pc, #656]	; (b68b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x504>)
   b6622:	f002 fc9c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6626:	49a4      	ldr	r1, [pc, #656]	; (b68b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x508>)
   b6628:	48a4      	ldr	r0, [pc, #656]	; (b68bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x50c>)
   b662a:	f002 fc98 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b662e:	49a4      	ldr	r1, [pc, #656]	; (b68c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x510>)
   b6630:	48a4      	ldr	r0, [pc, #656]	; (b68c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x514>)
   b6632:	f002 fc94 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6636:	49a4      	ldr	r1, [pc, #656]	; (b68c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x518>)
   b6638:	48a4      	ldr	r0, [pc, #656]	; (b68cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x51c>)
   b663a:	f002 fc90 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b663e:	49a4      	ldr	r1, [pc, #656]	; (b68d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x520>)
   b6640:	48a4      	ldr	r0, [pc, #656]	; (b68d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x524>)
   b6642:	f002 fc8c 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6646:	49a4      	ldr	r1, [pc, #656]	; (b68d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x528>)
   b6648:	48a4      	ldr	r0, [pc, #656]	; (b68dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x52c>)
   b664a:	f002 fc88 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b664e:	4906      	ldr	r1, [pc, #24]	; (b6668 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b6650:	48a3      	ldr	r0, [pc, #652]	; (b68e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x530>)
   b6652:	f002 fc84 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b6656:	49a3      	ldr	r1, [pc, #652]	; (b68e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x534>)
   b6658:	48a3      	ldr	r0, [pc, #652]	; (b68e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x538>)
   b665a:	f002 fc80 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b665e:	e145      	b.n	b68ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x53c>
   b6660:	2003d718 	.word	0x2003d718
   b6664:	2003dc74 	.word	0x2003dc74
   b6668:	000badae 	.word	0x000badae
   b666c:	2003cd54 	.word	0x2003cd54
   b6670:	2003d378 	.word	0x2003d378
   b6674:	000bb182 	.word	0x000bb182
   b6678:	2003d3c8 	.word	0x2003d3c8
   b667c:	2003d3d8 	.word	0x2003d3d8
   b6680:	000bb1dc 	.word	0x000bb1dc
   b6684:	2003e3a4 	.word	0x2003e3a4
   b6688:	000bb1f0 	.word	0x000bb1f0
   b668c:	2003e3b4 	.word	0x2003e3b4
   b6690:	000bb320 	.word	0x000bb320
   b6694:	2003e3c4 	.word	0x2003e3c4
   b6698:	000bb330 	.word	0x000bb330
   b669c:	2003e3d4 	.word	0x2003e3d4
   b66a0:	000bb350 	.word	0x000bb350
   b66a4:	2003e3e4 	.word	0x2003e3e4
   b66a8:	000bb368 	.word	0x000bb368
   b66ac:	2003e3f4 	.word	0x2003e3f4
   b66b0:	000bb184 	.word	0x000bb184
   b66b4:	2003e404 	.word	0x2003e404
   b66b8:	000bb18c 	.word	0x000bb18c
   b66bc:	2003e414 	.word	0x2003e414
   b66c0:	000bb194 	.word	0x000bb194
   b66c4:	2003e424 	.word	0x2003e424
   b66c8:	000bb19c 	.word	0x000bb19c
   b66cc:	2003e434 	.word	0x2003e434
   b66d0:	000bb1a4 	.word	0x000bb1a4
   b66d4:	2003e444 	.word	0x2003e444
   b66d8:	000bb1ac 	.word	0x000bb1ac
   b66dc:	2003e454 	.word	0x2003e454
   b66e0:	000bb1b4 	.word	0x000bb1b4
   b66e4:	2003e464 	.word	0x2003e464
   b66e8:	000bb1bc 	.word	0x000bb1bc
   b66ec:	2003e474 	.word	0x2003e474
   b66f0:	000bb1c4 	.word	0x000bb1c4
   b66f4:	2003e1e4 	.word	0x2003e1e4
   b66f8:	000bb1ce 	.word	0x000bb1ce
   b66fc:	2003e1f4 	.word	0x2003e1f4
   b6700:	000bb1d8 	.word	0x000bb1d8
   b6704:	2003e204 	.word	0x2003e204
   b6708:	000bb1e2 	.word	0x000bb1e2
   b670c:	2003e214 	.word	0x2003e214
   b6710:	000bb1ec 	.word	0x000bb1ec
   b6714:	2003e224 	.word	0x2003e224
   b6718:	000bb1f6 	.word	0x000bb1f6
   b671c:	2003e234 	.word	0x2003e234
   b6720:	000bb200 	.word	0x000bb200
   b6724:	2003e244 	.word	0x2003e244
   b6728:	000bb20a 	.word	0x000bb20a
   b672c:	2003e254 	.word	0x2003e254
   b6730:	000bb214 	.word	0x000bb214
   b6734:	2003e264 	.word	0x2003e264
   b6738:	000bb21e 	.word	0x000bb21e
   b673c:	2003e274 	.word	0x2003e274
   b6740:	000bb228 	.word	0x000bb228
   b6744:	2003e284 	.word	0x2003e284
   b6748:	000bb232 	.word	0x000bb232
   b674c:	2003e294 	.word	0x2003e294
   b6750:	000bb23c 	.word	0x000bb23c
   b6754:	2003e2a4 	.word	0x2003e2a4
   b6758:	000bb246 	.word	0x000bb246
   b675c:	2003e2b4 	.word	0x2003e2b4
   b6760:	000bb250 	.word	0x000bb250
   b6764:	2003e2c4 	.word	0x2003e2c4
   b6768:	000bb25a 	.word	0x000bb25a
   b676c:	2003e2d4 	.word	0x2003e2d4
   b6770:	000bb264 	.word	0x000bb264
   b6774:	2003e2e4 	.word	0x2003e2e4
   b6778:	000bb26e 	.word	0x000bb26e
   b677c:	2003e2f4 	.word	0x2003e2f4
   b6780:	000bb278 	.word	0x000bb278
   b6784:	2003e304 	.word	0x2003e304
   b6788:	000bb282 	.word	0x000bb282
   b678c:	2003e314 	.word	0x2003e314
   b6790:	000bb28c 	.word	0x000bb28c
   b6794:	2003e324 	.word	0x2003e324
   b6798:	000bb296 	.word	0x000bb296
   b679c:	2003e334 	.word	0x2003e334
   b67a0:	000bb2a0 	.word	0x000bb2a0
   b67a4:	2003e344 	.word	0x2003e344
   b67a8:	000bb1a8 	.word	0x000bb1a8
   b67ac:	2003e354 	.word	0x2003e354
   b67b0:	000bb2aa 	.word	0x000bb2aa
   b67b4:	2003e364 	.word	0x2003e364
   b67b8:	000bb2b0 	.word	0x000bb2b0
   b67bc:	2003e374 	.word	0x2003e374
   b67c0:	000bb1b8 	.word	0x000bb1b8
   b67c4:	2003e384 	.word	0x2003e384
   b67c8:	000bb1c0 	.word	0x000bb1c0
   b67cc:	2003e394 	.word	0x2003e394
   b67d0:	000bb2b6 	.word	0x000bb2b6
   b67d4:	2003e484 	.word	0x2003e484
   b67d8:	000bb2be 	.word	0x000bb2be
   b67dc:	2003e494 	.word	0x2003e494
   b67e0:	000bb2c6 	.word	0x000bb2c6
   b67e4:	2003e4a4 	.word	0x2003e4a4
   b67e8:	000bb2ce 	.word	0x000bb2ce
   b67ec:	2003e4b4 	.word	0x2003e4b4
   b67f0:	000bb2d6 	.word	0x000bb2d6
   b67f4:	2003e4c4 	.word	0x2003e4c4
   b67f8:	000bb2de 	.word	0x000bb2de
   b67fc:	2003e4d4 	.word	0x2003e4d4
   b6800:	000bb2e6 	.word	0x000bb2e6
   b6804:	2003e4e4 	.word	0x2003e4e4
   b6808:	000bb2ee 	.word	0x000bb2ee
   b680c:	2003e4f4 	.word	0x2003e4f4
   b6810:	000bb2f6 	.word	0x000bb2f6
   b6814:	2003e504 	.word	0x2003e504
   b6818:	000bb2fe 	.word	0x000bb2fe
   b681c:	2003e514 	.word	0x2003e514
   b6820:	000bb306 	.word	0x000bb306
   b6824:	2003e524 	.word	0x2003e524
   b6828:	000bb30e 	.word	0x000bb30e
   b682c:	2003e534 	.word	0x2003e534
   b6830:	000bb316 	.word	0x000bb316
   b6834:	2003e544 	.word	0x2003e544
   b6838:	000bb31e 	.word	0x000bb31e
   b683c:	2003e554 	.word	0x2003e554
   b6840:	000bb326 	.word	0x000bb326
   b6844:	2003e564 	.word	0x2003e564
   b6848:	000bb32e 	.word	0x000bb32e
   b684c:	2003e574 	.word	0x2003e574
   b6850:	000bb336 	.word	0x000bb336
   b6854:	2003e584 	.word	0x2003e584
   b6858:	000bb33e 	.word	0x000bb33e
   b685c:	2003e594 	.word	0x2003e594
   b6860:	000bb346 	.word	0x000bb346
   b6864:	2003e5a4 	.word	0x2003e5a4
   b6868:	000bb34e 	.word	0x000bb34e
   b686c:	2003e5b4 	.word	0x2003e5b4
   b6870:	000bb356 	.word	0x000bb356
   b6874:	2003e5c4 	.word	0x2003e5c4
   b6878:	000bb35e 	.word	0x000bb35e
   b687c:	2003e5d4 	.word	0x2003e5d4
   b6880:	000bb366 	.word	0x000bb366
   b6884:	2003e5e4 	.word	0x2003e5e4
   b6888:	000bb36e 	.word	0x000bb36e
   b688c:	2003e5f4 	.word	0x2003e5f4
   b6890:	000bb376 	.word	0x000bb376
   b6894:	2003e604 	.word	0x2003e604
   b6898:	000bb37c 	.word	0x000bb37c
   b689c:	2003e614 	.word	0x2003e614
   b68a0:	000bb382 	.word	0x000bb382
   b68a4:	2003e624 	.word	0x2003e624
   b68a8:	000bb388 	.word	0x000bb388
   b68ac:	2003e634 	.word	0x2003e634
   b68b0:	000bb38e 	.word	0x000bb38e
   b68b4:	2003e644 	.word	0x2003e644
   b68b8:	000bb394 	.word	0x000bb394
   b68bc:	2003e654 	.word	0x2003e654
   b68c0:	000bb39a 	.word	0x000bb39a
   b68c4:	2003e664 	.word	0x2003e664
   b68c8:	000bb3a0 	.word	0x000bb3a0
   b68cc:	2003e674 	.word	0x2003e674
   b68d0:	000bb3a6 	.word	0x000bb3a6
   b68d4:	2003e684 	.word	0x2003e684
   b68d8:	000bb3ac 	.word	0x000bb3ac
   b68dc:	2003e694 	.word	0x2003e694
   b68e0:	2003e6a4 	.word	0x2003e6a4
   b68e4:	000bb3b2 	.word	0x000bb3b2
   b68e8:	2003e164 	.word	0x2003e164
   b68ec:	4921      	ldr	r1, [pc, #132]	; (b6974 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c4>)
   b68ee:	4822      	ldr	r0, [pc, #136]	; (b6978 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c8>)
   b68f0:	f002 fb35 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b68f4:	4921      	ldr	r1, [pc, #132]	; (b697c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5cc>)
   b68f6:	4822      	ldr	r0, [pc, #136]	; (b6980 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5d0>)
   b68f8:	f002 fb31 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b68fc:	4921      	ldr	r1, [pc, #132]	; (b6984 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5d4>)
   b68fe:	4822      	ldr	r0, [pc, #136]	; (b6988 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5d8>)
   b6900:	f002 fb2d 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6904:	4921      	ldr	r1, [pc, #132]	; (b698c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5dc>)
   b6906:	4822      	ldr	r0, [pc, #136]	; (b6990 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5e0>)
   b6908:	f002 fb29 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b690c:	4921      	ldr	r1, [pc, #132]	; (b6994 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5e4>)
   b690e:	4822      	ldr	r0, [pc, #136]	; (b6998 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5e8>)
   b6910:	f002 fb25 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6914:	4921      	ldr	r1, [pc, #132]	; (b699c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5ec>)
   b6916:	4822      	ldr	r0, [pc, #136]	; (b69a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f0>)
   b6918:	f002 fb21 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b691c:	4921      	ldr	r1, [pc, #132]	; (b69a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f4>)
   b691e:	4822      	ldr	r0, [pc, #136]	; (b69a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f8>)
   b6920:	f002 fb1d 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"0#3#0"};
   b6924:	4921      	ldr	r1, [pc, #132]	; (b69ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5fc>)
   b6926:	4822      	ldr	r0, [pc, #136]	; (b69b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x600>)
   b6928:	f002 fb19 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b692c:	1928      	adds	r0, r5, r4
   b692e:	4631      	mov	r1, r6
   b6930:	3410      	adds	r4, #16
   b6932:	f002 fb14 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6936:	f5b4 6f9e 	cmp.w	r4, #1264	; 0x4f0
   b693a:	d1f7      	bne.n	b692c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x57c>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b693c:	481d      	ldr	r0, [pc, #116]	; (b69b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x604>)
String secuencia[30];
   b693e:	4d1e      	ldr	r5, [pc, #120]	; (b69b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x608>)
   b6940:	4e18      	ldr	r6, [pc, #96]	; (b69a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f4>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6942:	2208      	movs	r2, #8
   b6944:	2110      	movs	r1, #16
   b6946:	f000 fc50 	bl	b71ea <_ZN7MFRC522C1Ehh>
   b694a:	2400      	movs	r4, #0
String secuencia[30];
   b694c:	1928      	adds	r0, r5, r4
   b694e:	4631      	mov	r1, r6
   b6950:	3410      	adds	r4, #16
   b6952:	f002 fb04 	bl	b8f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6956:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b695a:	d1f7      	bne.n	b694c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x59c>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b695c:	4b17      	ldr	r3, [pc, #92]	; (b69bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x60c>)
   b695e:	2200      	movs	r2, #0
   b6960:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6964:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6968:	609a      	str	r2, [r3, #8]
   b696a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b696e:	2002      	movs	r0, #2
   b6970:	f002 b888 	b.w	b8a84 <set_system_mode>
   b6974:	000bb3b8 	.word	0x000bb3b8
   b6978:	2003e174 	.word	0x2003e174
   b697c:	000bb3be 	.word	0x000bb3be
   b6980:	2003e184 	.word	0x2003e184
   b6984:	000bb3c4 	.word	0x000bb3c4
   b6988:	2003e194 	.word	0x2003e194
   b698c:	000bb3ca 	.word	0x000bb3ca
   b6990:	2003e1a4 	.word	0x2003e1a4
   b6994:	000bb3d0 	.word	0x000bb3d0
   b6998:	2003e1b4 	.word	0x2003e1b4
   b699c:	000bb3d6 	.word	0x000bb3d6
   b69a0:	2003e1c4 	.word	0x2003e1c4
   b69a4:	000badae 	.word	0x000badae
   b69a8:	2003e1d4 	.word	0x2003e1d4
   b69ac:	000bb1f0 	.word	0x000bb1f0
   b69b0:	2003dc64 	.word	0x2003dc64
   b69b4:	2003d720 	.word	0x2003d720
   b69b8:	2003da78 	.word	0x2003da78
   b69bc:	2003cd44 	.word	0x2003cd44

000b69c0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b69c0:	4770      	bx	lr

000b69c2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b69c2:	b510      	push	{r4, lr}
  }
   b69c4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b69c6:	4604      	mov	r4, r0
  }
   b69c8:	f7fd fb67 	bl	b409a <_ZdlPvj>
   b69cc:	4620      	mov	r0, r4
   b69ce:	bd10      	pop	{r4, pc}

000b69d0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b69d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b69d2:	4604      	mov	r4, r0
   b69d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b69d6:	7922      	ldrb	r2, [r4, #4]
   b69d8:	68a3      	ldr	r3, [r4, #8]
   b69da:	b132      	cbz	r2, b69ea <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b69dc:	b9a3      	cbnz	r3, b6a08 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b69de:	490b      	ldr	r1, [pc, #44]	; (b6a0c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b69e0:	b002      	add	sp, #8
   b69e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b69e6:	f002 bb75 	b.w	b90d4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b69ea:	4a09      	ldr	r2, [pc, #36]	; (b6a10 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b69ec:	7b26      	ldrb	r6, [r4, #12]
   b69ee:	4d09      	ldr	r5, [pc, #36]	; (b6a14 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b69f0:	4909      	ldr	r1, [pc, #36]	; (b6a18 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b69f2:	7b64      	ldrb	r4, [r4, #13]
   b69f4:	2e01      	cmp	r6, #1
   b69f6:	bf18      	it	ne
   b69f8:	4629      	movne	r1, r5
   b69fa:	e9cd 1400 	strd	r1, r4, [sp]
   b69fe:	4907      	ldr	r1, [pc, #28]	; (b6a1c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6a00:	f7fd fb80 	bl	b4104 <_ZN5Print6printfEPKcz>
  }
   b6a04:	b002      	add	sp, #8
   b6a06:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6a08:	4a05      	ldr	r2, [pc, #20]	; (b6a20 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6a0a:	e7ef      	b.n	b69ec <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6a0c:	000bb7f3 	.word	0x000bb7f3
   b6a10:	000badae 	.word	0x000badae
   b6a14:	000bb7ef 	.word	0x000bb7ef
   b6a18:	000bb7eb 	.word	0x000bb7eb
   b6a1c:	000bb809 	.word	0x000bb809
   b6a20:	000bb7e2 	.word	0x000bb7e2

000b6a24 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a28:	b085      	sub	sp, #20
   b6a2a:	461f      	mov	r7, r3
   b6a2c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6a30:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b6a34:	eba8 0902 	sub.w	r9, r8, r2
   b6a38:	eba7 0a01 	sub.w	sl, r7, r1
   b6a3c:	f1b9 0f00 	cmp.w	r9, #0
   b6a40:	bfb8      	it	lt
   b6a42:	f1c9 0900 	rsblt	r9, r9, #0
   b6a46:	f1ba 0f00 	cmp.w	sl, #0
   b6a4a:	bfb8      	it	lt
   b6a4c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b6a50:	45d1      	cmp	r9, sl
        uint16_t color) {
   b6a52:	4683      	mov	fp, r0
   b6a54:	460c      	mov	r4, r1
   b6a56:	4615      	mov	r5, r2
    if (steep) {
   b6a58:	dd04      	ble.n	b6a64 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b6a5a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b6a5c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b6a5e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b6a60:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b6a62:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b6a64:	42bc      	cmp	r4, r7
   b6a66:	dd05      	ble.n	b6a74 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b6a68:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b6a6a:	4645      	mov	r5, r8
   b6a6c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b6a6e:	4622      	mov	r2, r4
   b6a70:	463c      	mov	r4, r7
   b6a72:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b6a74:	1b3e      	subs	r6, r7, r4
   b6a76:	b2b2      	uxth	r2, r6
   b6a78:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b6a7a:	eba8 0205 	sub.w	r2, r8, r5
   b6a7e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6a82:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b6a86:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b6a8a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b6a8e:	4545      	cmp	r5, r8
   b6a90:	bfb4      	ite	lt
   b6a92:	2201      	movlt	r2, #1
   b6a94:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b6a98:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b6a9a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b6a9c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b6a9e:	42bc      	cmp	r4, r7
   b6aa0:	dc1c      	bgt.n	b6adc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b6aa2:	f8db 2000 	ldr.w	r2, [fp]
   b6aa6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b6aa8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b6aaa:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b6aae:	bfc7      	ittee	gt
   b6ab0:	4629      	movgt	r1, r5
   b6ab2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b6ab4:	462a      	movle	r2, r5
   b6ab6:	4621      	movle	r1, r4
   b6ab8:	4658      	mov	r0, fp
   b6aba:	47c0      	blx	r8
        }
        err -= dy;
   b6abc:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b6abe:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b6ac0:	1ab6      	subs	r6, r6, r2
   b6ac2:	b2b1      	uxth	r1, r6
   b6ac4:	b236      	sxth	r6, r6
        if (err < 0) {
   b6ac6:	2e00      	cmp	r6, #0
   b6ac8:	da05      	bge.n	b6ad6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b6aca:	9a02      	ldr	r2, [sp, #8]
   b6acc:	4415      	add	r5, r2
            err += dx;
   b6ace:	9a00      	ldr	r2, [sp, #0]
   b6ad0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b6ad2:	b22d      	sxth	r5, r5
            err += dx;
   b6ad4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b6ad6:	3401      	adds	r4, #1
   b6ad8:	b224      	sxth	r4, r4
   b6ada:	e7e0      	b.n	b6a9e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b6adc:	b005      	add	sp, #20
   b6ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6ae2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b6ae2:	4770      	bx	lr

000b6ae4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b6ae4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b6ae6:	6804      	ldr	r4, [r0, #0]
   b6ae8:	6924      	ldr	r4, [r4, #16]
   b6aea:	46a4      	mov	ip, r4
}
   b6aec:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b6af0:	4760      	bx	ip

000b6af2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6af2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b6af4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b6af6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b6afa:	9502      	str	r5, [sp, #8]
   b6afc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b6afe:	46a4      	mov	ip, r4
}
   b6b00:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b6b02:	4760      	bx	ip

000b6b04 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6b04:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b6b06:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b6b08:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b6b0c:	9502      	str	r5, [sp, #8]
   b6b0e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b6b10:	46a4      	mov	ip, r4
}
   b6b12:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b6b14:	4760      	bx	ip

000b6b16 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6b16:	b470      	push	{r4, r5, r6}
   b6b18:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b6b1c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b6b20:	6804      	ldr	r4, [r0, #0]
   b6b22:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b6b26:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b6b28:	46a4      	mov	ip, r4
}
   b6b2a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b6b2c:	4760      	bx	ip

000b6b2e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b6b2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6b32:	461c      	mov	r4, r3
    startWrite();
   b6b34:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b6b36:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6b3a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b6b3c:	4605      	mov	r5, r0
   b6b3e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b6b40:	3c01      	subs	r4, #1
   b6b42:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b6b44:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b6b46:	b224      	sxth	r4, r4
    startWrite();
   b6b48:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b6b4a:	682b      	ldr	r3, [r5, #0]
   b6b4c:	f8cd 8004 	str.w	r8, [sp, #4]
   b6b50:	9400      	str	r4, [sp, #0]
   b6b52:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b6b54:	4628      	mov	r0, r5
   b6b56:	463b      	mov	r3, r7
   b6b58:	4632      	mov	r2, r6
   b6b5a:	4639      	mov	r1, r7
   b6b5c:	47a0      	blx	r4
    endWrite();
   b6b5e:	682b      	ldr	r3, [r5, #0]
   b6b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b62:	4628      	mov	r0, r5
}
   b6b64:	b002      	add	sp, #8
   b6b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6b6a:	4718      	bx	r3

000b6b6c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b6b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6b70:	461d      	mov	r5, r3
    startWrite();
   b6b72:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b6b74:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b6b78:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	4617      	mov	r7, r2
   b6b7e:	460e      	mov	r6, r1
    startWrite();
   b6b80:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b6b82:	e9cd 7800 	strd	r7, r8, [sp]
   b6b86:	6822      	ldr	r2, [r4, #0]
   b6b88:	1e6b      	subs	r3, r5, #1
   b6b8a:	4433      	add	r3, r6
   b6b8c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b6b8e:	4620      	mov	r0, r4
   b6b90:	b21b      	sxth	r3, r3
   b6b92:	463a      	mov	r2, r7
   b6b94:	4631      	mov	r1, r6
   b6b96:	47a8      	blx	r5
    endWrite();
   b6b98:	6823      	ldr	r3, [r4, #0]
   b6b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b9c:	4620      	mov	r0, r4
}
   b6b9e:	b002      	add	sp, #8
   b6ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6ba4:	4718      	bx	r3

000b6ba6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6ba6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6baa:	461e      	mov	r6, r3
    startWrite();
   b6bac:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6bae:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b6bb2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6bb4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b6bb8:	460c      	mov	r4, r1
   b6bba:	4605      	mov	r5, r0
   b6bbc:	4617      	mov	r7, r2
    startWrite();
   b6bbe:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b6bc0:	4426      	add	r6, r4
   b6bc2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b6bc4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b6bc6:	da0b      	bge.n	b6be0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b6bc8:	f8cd 8000 	str.w	r8, [sp]
   b6bcc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6bd0:	4621      	mov	r1, r4
   b6bd2:	464b      	mov	r3, r9
   b6bd4:	463a      	mov	r2, r7
   b6bd6:	4628      	mov	r0, r5
   b6bd8:	3401      	adds	r4, #1
   b6bda:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b6bdc:	b224      	sxth	r4, r4
   b6bde:	e7f0      	b.n	b6bc2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b6be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6be2:	4628      	mov	r0, r5
}
   b6be4:	b002      	add	sp, #8
   b6be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6bea:	4718      	bx	r3

000b6bec <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b6bec:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b6bee:	6802      	ldr	r2, [r0, #0]
   b6bf0:	9101      	str	r1, [sp, #4]
   b6bf2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b6bf6:	9100      	str	r1, [sp, #0]
   b6bf8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b6bfa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6bfe:	2200      	movs	r2, #0
   b6c00:	4611      	mov	r1, r2
   b6c02:	47a0      	blx	r4
}
   b6c04:	b002      	add	sp, #8
   b6c06:	bd10      	pop	{r4, pc}

000b6c08 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b6c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b6c0c:	4299      	cmp	r1, r3
        uint16_t color) {
   b6c0e:	4616      	mov	r6, r2
   b6c10:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b6c14:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6c18:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b6c1a:	4680      	mov	r8, r0
   b6c1c:	460d      	mov	r5, r1
   b6c1e:	461c      	mov	r4, r3
    if(x0 == x1){
   b6c20:	d113      	bne.n	b6c4a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6c22:	42be      	cmp	r6, r7
   b6c24:	bfc8      	it	gt
   b6c26:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6c28:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b6c2c:	bfc4      	itt	gt
   b6c2e:	463e      	movgt	r6, r7
   b6c30:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b6c32:	1c7b      	adds	r3, r7, #1
   b6c34:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b6c36:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6c38:	b21b      	sxth	r3, r3
   b6c3a:	4632      	mov	r2, r6
   b6c3c:	4629      	mov	r1, r5
   b6c3e:	4640      	mov	r0, r8
   b6c40:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b6c42:	b003      	add	sp, #12
   b6c44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6c48:	4760      	bx	ip
    } else if(y0 == y1){
   b6c4a:	42be      	cmp	r6, r7
   b6c4c:	d10a      	bne.n	b6c64 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b6c4e:	4299      	cmp	r1, r3
   b6c50:	bfc2      	ittt	gt
   b6c52:	460b      	movgt	r3, r1
   b6c54:	4625      	movgt	r5, r4
   b6c56:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b6c58:	1c63      	adds	r3, r4, #1
   b6c5a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b6c5e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6c60:	1b5b      	subs	r3, r3, r5
   b6c62:	e7e9      	b.n	b6c38 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b6c64:	6953      	ldr	r3, [r2, #20]
   b6c66:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b6c68:	e9cd 7900 	strd	r7, r9, [sp]
   b6c6c:	f8d8 3000 	ldr.w	r3, [r8]
   b6c70:	4640      	mov	r0, r8
   b6c72:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b6c74:	4632      	mov	r2, r6
   b6c76:	4623      	mov	r3, r4
   b6c78:	4629      	mov	r1, r5
   b6c7a:	47b8      	blx	r7
        endWrite();
   b6c7c:	f8d8 3000 	ldr.w	r3, [r8]
   b6c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c82:	4640      	mov	r0, r8
}
   b6c84:	b003      	add	sp, #12
   b6c86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b6c8a:	4718      	bx	r3

000b6c8c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b6c8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6c90:	461d      	mov	r5, r3
    startWrite();
   b6c92:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6c94:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b6c98:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b6c9a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6c9e:	4604      	mov	r4, r0
   b6ca0:	460f      	mov	r7, r1
   b6ca2:	4616      	mov	r6, r2
    startWrite();
   b6ca4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b6ca6:	6823      	ldr	r3, [r4, #0]
   b6ca8:	f8cd 8000 	str.w	r8, [sp]
   b6cac:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6cb0:	4632      	mov	r2, r6
   b6cb2:	462b      	mov	r3, r5
   b6cb4:	4639      	mov	r1, r7
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b6cba:	6823      	ldr	r3, [r4, #0]
   b6cbc:	f8cd 8000 	str.w	r8, [sp]
   b6cc0:	f109 32ff 	add.w	r2, r9, #4294967295
   b6cc4:	4432      	add	r2, r6
   b6cc6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b6cca:	4639      	mov	r1, r7
   b6ccc:	462b      	mov	r3, r5
   b6cce:	4620      	mov	r0, r4
   b6cd0:	b212      	sxth	r2, r2
   b6cd2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b6cd4:	6823      	ldr	r3, [r4, #0]
   b6cd6:	f8cd 8000 	str.w	r8, [sp]
   b6cda:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b6cde:	4632      	mov	r2, r6
   b6ce0:	464b      	mov	r3, r9
   b6ce2:	4639      	mov	r1, r7
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b6ce8:	1e6b      	subs	r3, r5, #1
   b6cea:	19d9      	adds	r1, r3, r7
   b6cec:	6823      	ldr	r3, [r4, #0]
   b6cee:	f8cd 8000 	str.w	r8, [sp]
   b6cf2:	6a1d      	ldr	r5, [r3, #32]
   b6cf4:	4620      	mov	r0, r4
   b6cf6:	464b      	mov	r3, r9
   b6cf8:	4632      	mov	r2, r6
   b6cfa:	b209      	sxth	r1, r1
   b6cfc:	47a8      	blx	r5
    endWrite();
   b6cfe:	6823      	ldr	r3, [r4, #0]
   b6d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d02:	4620      	mov	r0, r4
}
   b6d04:	b002      	add	sp, #8
   b6d06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b6d0a:	4718      	bx	r3

000b6d0c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b6d0c:	4770      	bx	lr

000b6d0e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b6d0e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6d12:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b6d16:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b6d18:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b6d1a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6d1e:	bf59      	ittee	pl
   b6d20:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6d22:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6d24:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b6d26:	81c3      	strhmi	r3, [r0, #14]
}
   b6d28:	4770      	bx	lr
	...

000b6d2c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b6d2c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b6d2e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6d30:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6d32:	4a07      	ldr	r2, [pc, #28]	; (b6d50 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6d34:	4d07      	ldr	r5, [pc, #28]	; (b6d54 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b6d36:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b6d38:	2400      	movs	r4, #0
    _width    = WIDTH;
   b6d3a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b6d3c:	f04f 31ff 	mov.w	r1, #4294967295
   b6d40:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b6d44:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b6d46:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b6d48:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b6d4a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b6d4c:	6204      	str	r4, [r0, #32]
}
   b6d4e:	bd30      	pop	{r4, r5, pc}
   b6d50:	01000101 	.word	0x01000101
   b6d54:	000bbd30 	.word	0x000bbd30

000b6d58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d5c:	b089      	sub	sp, #36	; 0x24
   b6d5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6d62:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6d64:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b6d68:	9304      	str	r3, [sp, #16]
   b6d6a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b6d6e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6d70:	9305      	str	r3, [sp, #20]
   b6d72:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b6d76:	4604      	mov	r4, r0
    startWrite();
   b6d78:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6d7a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b6d7e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6d82:	bf48      	it	mi
   b6d84:	f108 020e 	addmi.w	r2, r8, #14
   b6d88:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b6d8c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b6d8e:	4635      	mov	r5, r6
   b6d90:	9b03      	ldr	r3, [sp, #12]
   b6d92:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b6d94:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b6d98:	189a      	adds	r2, r3, r2
   b6d9a:	9b05      	ldr	r3, [sp, #20]
   b6d9c:	428b      	cmp	r3, r1
   b6d9e:	b212      	sxth	r2, r2
   b6da0:	dd27      	ble.n	b6df2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6da2:	9b04      	ldr	r3, [sp, #16]
   b6da4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b6da6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6daa:	9306      	str	r3, [sp, #24]
   b6dac:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b6db0:	4580      	cmp	r8, r0
   b6db2:	fa1f f189 	uxth.w	r1, r9
   b6db6:	dd17      	ble.n	b6de8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b6db8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6dba:	bf05      	ittet	eq
   b6dbc:	9b06      	ldreq	r3, [sp, #24]
   b6dbe:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b6dc0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b6dc2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b6dc4:	bf18      	it	ne
   b6dc6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b6dc8:	062b      	lsls	r3, r5, #24
   b6dca:	d50a      	bpl.n	b6de2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b6dcc:	9b02      	ldr	r3, [sp, #8]
   b6dce:	6820      	ldr	r0, [r4, #0]
   b6dd0:	9207      	str	r2, [sp, #28]
   b6dd2:	4419      	add	r1, r3
   b6dd4:	6983      	ldr	r3, [r0, #24]
   b6dd6:	b209      	sxth	r1, r1
   b6dd8:	461f      	mov	r7, r3
   b6dda:	4620      	mov	r0, r4
   b6ddc:	4653      	mov	r3, sl
   b6dde:	47b8      	blx	r7
   b6de0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6de2:	f109 0901 	add.w	r9, r9, #1
   b6de6:	e7e1      	b.n	b6dac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b6de8:	9b01      	ldr	r3, [sp, #4]
   b6dea:	3301      	adds	r3, #1
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	445e      	add	r6, fp
   b6df0:	e7ce      	b.n	b6d90 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6df2:	6823      	ldr	r3, [r4, #0]
   b6df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6df6:	4620      	mov	r0, r4
}
   b6df8:	b009      	add	sp, #36	; 0x24
   b6dfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b6dfe:	4718      	bx	r3

000b6e00 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e04:	ed2d 8b02 	vpush	{d8}
   b6e08:	b091      	sub	sp, #68	; 0x44
   b6e0a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6e0c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6e0e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6e12:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6e16:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b6e1a:	9103      	str	r1, [sp, #12]
   b6e1c:	461f      	mov	r7, r3
   b6e1e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6e22:	9304      	str	r3, [sp, #16]
   b6e24:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6e26:	2a00      	cmp	r2, #0
   b6e28:	f040 80c5 	bne.w	b6fb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6e2c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6e30:	428b      	cmp	r3, r1
   b6e32:	f340 814c 	ble.w	b70ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6e36:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b6e3a:	42b3      	cmp	r3, r6
   b6e3c:	f340 8147 	ble.w	b70ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6e40:	2306      	movs	r3, #6
   b6e42:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6e46:	2b00      	cmp	r3, #0
   b6e48:	f340 8141 	ble.w	b70ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b6e4c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6e50:	2b00      	cmp	r3, #0
   b6e52:	f340 813c 	ble.w	b70ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6e56:	7f03      	ldrb	r3, [r0, #28]
   b6e58:	b91b      	cbnz	r3, b6e62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b6e5a:	2faf      	cmp	r7, #175	; 0xaf
   b6e5c:	bf84      	itt	hi
   b6e5e:	3701      	addhi	r7, #1
   b6e60:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6e62:	f8db 3000 	ldr.w	r3, [fp]
   b6e66:	4658      	mov	r0, fp
   b6e68:	695b      	ldr	r3, [r3, #20]
   b6e6a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6e6c:	2205      	movs	r2, #5
   b6e6e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6e70:	2200      	movs	r2, #0
   b6e72:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6e74:	4a98      	ldr	r2, [pc, #608]	; (b70d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6e76:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b6e7a:	18d3      	adds	r3, r2, r3
   b6e7c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b6e7e:	b2b3      	uxth	r3, r6
   b6e80:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6e82:	9a05      	ldr	r2, [sp, #20]
   b6e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6e86:	5c9b      	ldrb	r3, [r3, r2]
   b6e88:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6e8a:	b2ab      	uxth	r3, r5
   b6e8c:	930b      	str	r3, [sp, #44]	; 0x2c
   b6e8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b6e92:	9308      	str	r3, [sp, #32]
   b6e94:	9b03      	ldr	r3, [sp, #12]
   b6e96:	fb02 f905 	mul.w	r9, r2, r5
   b6e9a:	fa19 f983 	uxtah	r9, r9, r3
   b6e9e:	fa0f f389 	sxth.w	r3, r9
   b6ea2:	ee08 3a10 	vmov	s16, r3
   b6ea6:	2308      	movs	r3, #8
   b6ea8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b6eaa:	9b03      	ldr	r3, [sp, #12]
   b6eac:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6eb0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b6eb4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b6eb8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b6eba:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b6ebe:	07d2      	lsls	r2, r2, #31
   b6ec0:	d552      	bpl.n	b6f68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b6ec2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6ec4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6ec8:	d13e      	bne.n	b6f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b6eca:	2c01      	cmp	r4, #1
   b6ecc:	d13c      	bne.n	b6f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b6ece:	699b      	ldr	r3, [r3, #24]
   b6ed0:	9906      	ldr	r1, [sp, #24]
   b6ed2:	461f      	mov	r7, r3
   b6ed4:	9b04      	ldr	r3, [sp, #16]
   b6ed6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b6ed8:	b212      	sxth	r2, r2
   b6eda:	4651      	mov	r1, sl
   b6edc:	4658      	mov	r0, fp
   b6ede:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6ee0:	f109 0301 	add.w	r3, r9, #1
   b6ee4:	fa4f f983 	sxtb.w	r9, r3
   b6ee8:	9b07      	ldr	r3, [sp, #28]
   b6eea:	085b      	lsrs	r3, r3, #1
   b6eec:	9307      	str	r3, [sp, #28]
   b6eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6ef0:	3b01      	subs	r3, #1
   b6ef2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6ef6:	930a      	str	r3, [sp, #40]	; 0x28
   b6ef8:	d1de      	bne.n	b6eb8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6efa:	9f05      	ldr	r7, [sp, #20]
   b6efc:	3701      	adds	r7, #1
   b6efe:	b27b      	sxtb	r3, r7
   b6f00:	9305      	str	r3, [sp, #20]
   b6f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6f04:	3b01      	subs	r3, #1
   b6f06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6f0a:	9309      	str	r3, [sp, #36]	; 0x24
   b6f0c:	d1b9      	bne.n	b6e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b6f0e:	9b04      	ldr	r3, [sp, #16]
   b6f10:	4543      	cmp	r3, r8
   b6f12:	d00f      	beq.n	b6f34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6f14:	2d01      	cmp	r5, #1
   b6f16:	f8db 3000 	ldr.w	r3, [fp]
   b6f1a:	d13b      	bne.n	b6f94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6f1c:	2c01      	cmp	r4, #1
   b6f1e:	d139      	bne.n	b6f94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6f20:	9908      	ldr	r1, [sp, #32]
   b6f22:	f8cd 8000 	str.w	r8, [sp]
   b6f26:	3105      	adds	r1, #5
   b6f28:	6a1c      	ldr	r4, [r3, #32]
   b6f2a:	4632      	mov	r2, r6
   b6f2c:	2308      	movs	r3, #8
   b6f2e:	b209      	sxth	r1, r1
   b6f30:	4658      	mov	r0, fp
   b6f32:	47a0      	blx	r4
        endWrite();
   b6f34:	f8db 3000 	ldr.w	r3, [fp]
   b6f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f3a:	4658      	mov	r0, fp
}
   b6f3c:	b011      	add	sp, #68	; 0x44
   b6f3e:	ecbd 8b02 	vpop	{d8}
   b6f42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6f46:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6f48:	9906      	ldr	r1, [sp, #24]
   b6f4a:	fb14 f202 	smulbb	r2, r4, r2
   b6f4e:	440a      	add	r2, r1
   b6f50:	9904      	ldr	r1, [sp, #16]
   b6f52:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6f54:	9400      	str	r4, [sp, #0]
   b6f56:	69db      	ldr	r3, [r3, #28]
   b6f58:	ee18 1a10 	vmov	r1, s16
   b6f5c:	461f      	mov	r7, r3
   b6f5e:	b212      	sxth	r2, r2
   b6f60:	462b      	mov	r3, r5
   b6f62:	4658      	mov	r0, fp
   b6f64:	47b8      	blx	r7
   b6f66:	e7bb      	b.n	b6ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6f68:	9a04      	ldr	r2, [sp, #16]
   b6f6a:	4542      	cmp	r2, r8
   b6f6c:	d0b8      	beq.n	b6ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b6f6e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6f70:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6f74:	d107      	bne.n	b6f86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6f76:	2c01      	cmp	r4, #1
   b6f78:	d105      	bne.n	b6f86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6f7a:	699b      	ldr	r3, [r3, #24]
   b6f7c:	9906      	ldr	r1, [sp, #24]
   b6f7e:	461f      	mov	r7, r3
   b6f80:	440a      	add	r2, r1
   b6f82:	4643      	mov	r3, r8
   b6f84:	e7a8      	b.n	b6ed8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6f86:	9906      	ldr	r1, [sp, #24]
   b6f88:	f8cd 8004 	str.w	r8, [sp, #4]
   b6f8c:	fb14 f202 	smulbb	r2, r4, r2
   b6f90:	440a      	add	r2, r1
   b6f92:	e7df      	b.n	b6f54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6f96:	f8cd 8004 	str.w	r8, [sp, #4]
   b6f9a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6f9e:	9a08      	ldr	r2, [sp, #32]
   b6fa0:	00e4      	lsls	r4, r4, #3
   b6fa2:	440a      	add	r2, r1
   b6fa4:	4611      	mov	r1, r2
   b6fa6:	9400      	str	r4, [sp, #0]
   b6fa8:	69dc      	ldr	r4, [r3, #28]
   b6faa:	4632      	mov	r2, r6
   b6fac:	462b      	mov	r3, r5
   b6fae:	b209      	sxth	r1, r1
   b6fb0:	4658      	mov	r0, fp
   b6fb2:	47a0      	blx	r4
        endWrite();
   b6fb4:	e7be      	b.n	b6f34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6fb6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6fb8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6fba:	6812      	ldr	r2, [r2, #0]
   b6fbc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6fbe:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6fc0:	b2ff      	uxtb	r7, r7
   b6fc2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b6fc6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6fca:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6fcc:	789a      	ldrb	r2, [r3, #2]
   b6fce:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6fd0:	78da      	ldrb	r2, [r3, #3]
   b6fd2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b6fd4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6fd6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b6fda:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6fde:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6fe0:	d801      	bhi.n	b6fe6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6fe2:	2c01      	cmp	r4, #1
   b6fe4:	d957      	bls.n	b7096 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6fe6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b6fea:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6fec:	fa0f f38a 	sxth.w	r3, sl
   b6ff0:	9307      	str	r3, [sp, #28]
        startWrite();
   b6ff2:	f8db 3000 	ldr.w	r3, [fp]
   b6ff6:	4658      	mov	r0, fp
   b6ff8:	695b      	ldr	r3, [r3, #20]
   b6ffa:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6ffc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6ffe:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7002:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7004:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b7008:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b700a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b700c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b700e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7010:	429f      	cmp	r7, r3
   b7012:	d28f      	bcs.n	b6f34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7014:	9b07      	ldr	r3, [sp, #28]
   b7016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b7018:	443b      	add	r3, r7
   b701a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b701e:	2200      	movs	r2, #0
   b7020:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7024:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b7026:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b702a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b702e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b7032:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b7034:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b7036:	9905      	ldr	r1, [sp, #20]
   b7038:	4291      	cmp	r1, r2
   b703a:	d241      	bcs.n	b70c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b703c:	1c5a      	adds	r2, r3, #1
   b703e:	b2d2      	uxtb	r2, r2
   b7040:	075b      	lsls	r3, r3, #29
   b7042:	920d      	str	r2, [sp, #52]	; 0x34
   b7044:	d107      	bne.n	b7056 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b7046:	9b06      	ldr	r3, [sp, #24]
   b7048:	9906      	ldr	r1, [sp, #24]
   b704a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b704c:	3301      	adds	r3, #1
   b704e:	b29b      	uxth	r3, r3
   b7050:	f812 9001 	ldrb.w	r9, [r2, r1]
   b7054:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b7056:	f019 0f80 	tst.w	r9, #128	; 0x80
   b705a:	d012      	beq.n	b7082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b705c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b705e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b7062:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b7066:	d11a      	bne.n	b709e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b7068:	2c01      	cmp	r4, #1
   b706a:	d118      	bne.n	b709e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b706c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b706e:	699b      	ldr	r3, [r3, #24]
   b7070:	4411      	add	r1, r2
   b7072:	9a05      	ldr	r2, [sp, #20]
   b7074:	4411      	add	r1, r2
   b7076:	461e      	mov	r6, r3
   b7078:	4652      	mov	r2, sl
   b707a:	9b04      	ldr	r3, [sp, #16]
   b707c:	b209      	sxth	r1, r1
   b707e:	4658      	mov	r0, fp
   b7080:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b7082:	9e05      	ldr	r6, [sp, #20]
   b7084:	3601      	adds	r6, #1
   b7086:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b7088:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b708c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b708e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b7092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b7094:	e7ce      	b.n	b7034 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b7096:	2300      	movs	r3, #0
   b7098:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b709c:	e7a9      	b.n	b6ff2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b709e:	9805      	ldr	r0, [sp, #20]
   b70a0:	9a08      	ldr	r2, [sp, #32]
   b70a2:	4402      	add	r2, r0
   b70a4:	fb02 1105 	mla	r1, r2, r5, r1
   b70a8:	9a04      	ldr	r2, [sp, #16]
   b70aa:	e9cd 4200 	strd	r4, r2, [sp]
   b70ae:	69db      	ldr	r3, [r3, #28]
   b70b0:	ee18 2a10 	vmov	r2, s16
   b70b4:	461e      	mov	r6, r3
   b70b6:	b209      	sxth	r1, r1
   b70b8:	462b      	mov	r3, r5
   b70ba:	4658      	mov	r0, fp
   b70bc:	47b0      	blx	r6
   b70be:	e7e0      	b.n	b7082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b70c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b70c2:	3701      	adds	r7, #1
   b70c4:	4498      	add	r8, r3
   b70c6:	fa5f f888 	uxtb.w	r8, r8
   b70ca:	b2ff      	uxtb	r7, r7
   b70cc:	e79f      	b.n	b700e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b70ce:	b011      	add	sp, #68	; 0x44
   b70d0:	ecbd 8b02 	vpop	{d8}
   b70d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b70d8:	000bb826 	.word	0x000bb826

000b70dc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b70dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b70de:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b70e0:	b085      	sub	sp, #20
   b70e2:	4604      	mov	r4, r0
   b70e4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b70e6:	2a00      	cmp	r2, #0
   b70e8:	d134      	bne.n	b7154 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b70ea:	290a      	cmp	r1, #10
   b70ec:	d108      	bne.n	b7100 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b70ee:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b70f0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b70f2:	7e42      	ldrb	r2, [r0, #25]
   b70f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b70f8:	8263      	strh	r3, [r4, #18]
}
   b70fa:	2001      	movs	r0, #1
   b70fc:	b005      	add	sp, #20
   b70fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b7100:	290d      	cmp	r1, #13
   b7102:	d0fa      	beq.n	b70fa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b7104:	7ee1      	ldrb	r1, [r4, #27]
   b7106:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b7108:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b710a:	b171      	cbz	r1, b712a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b710c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b7110:	2106      	movs	r1, #6
   b7112:	fb11 6100 	smlabb	r1, r1, r0, r6
   b7116:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b711a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b711c:	bfc1      	itttt	gt
   b711e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b7122:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b7124:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b7128:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b712a:	8ae2      	ldrh	r2, [r4, #22]
   b712c:	9201      	str	r2, [sp, #4]
   b712e:	8aa2      	ldrh	r2, [r4, #20]
   b7130:	9200      	str	r2, [sp, #0]
   b7132:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b7136:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b713a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b713e:	4620      	mov	r0, r4
   b7140:	f7ff fe5e 	bl	b6e00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b7144:	7e23      	ldrb	r3, [r4, #24]
   b7146:	8a22      	ldrh	r2, [r4, #16]
   b7148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b714c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b7150:	8223      	strh	r3, [r4, #16]
   b7152:	e7d2      	b.n	b70fa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b7154:	290a      	cmp	r1, #10
   b7156:	d107      	bne.n	b7168 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b7158:	2300      	movs	r3, #0
   b715a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b715c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b715e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b7160:	8a43      	ldrh	r3, [r0, #18]
   b7162:	fb01 3302 	mla	r3, r1, r2, r3
   b7166:	e7c7      	b.n	b70f8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b7168:	290d      	cmp	r1, #13
   b716a:	d0c6      	beq.n	b70fa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b716c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b716e:	42a9      	cmp	r1, r5
   b7170:	d3c3      	bcc.n	b70fa <_ZN12Adafruit_GFX5writeEh+0x1e>
   b7172:	7a51      	ldrb	r1, [r2, #9]
   b7174:	4299      	cmp	r1, r3
   b7176:	d3c0      	bcc.n	b70fa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b7178:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b717a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b717c:	b2ed      	uxtb	r5, r5
   b717e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b7182:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b7184:	b328      	cbz	r0, b71d2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b7186:	78e9      	ldrb	r1, [r5, #3]
   b7188:	b319      	cbz	r1, b71d2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b718a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b718c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b718e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b7190:	b191      	cbz	r1, b71b8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b7192:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b7196:	4408      	add	r0, r1
   b7198:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b719c:	fb06 1100 	mla	r1, r6, r0, r1
   b71a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b71a4:	4281      	cmp	r1, r0
   b71a6:	dd07      	ble.n	b71b8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b71a8:	2000      	movs	r0, #0
   b71aa:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b71ac:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b71b0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b71b2:	fb02 1207 	mla	r2, r2, r7, r1
   b71b6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b71b8:	8ae2      	ldrh	r2, [r4, #22]
   b71ba:	9201      	str	r2, [sp, #4]
   b71bc:	8aa2      	ldrh	r2, [r4, #20]
   b71be:	9200      	str	r2, [sp, #0]
   b71c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b71c4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b71c8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b71cc:	4620      	mov	r0, r4
   b71ce:	f7ff fe17 	bl	b6e00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b71d2:	7929      	ldrb	r1, [r5, #4]
   b71d4:	7e22      	ldrb	r2, [r4, #24]
   b71d6:	8a23      	ldrh	r3, [r4, #16]
   b71d8:	fb01 3302 	mla	r3, r1, r2, r3
   b71dc:	e7b8      	b.n	b7150 <_ZN12Adafruit_GFX5writeEh+0x74>

000b71de <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b71de:	2901      	cmp	r1, #1
   b71e0:	bf38      	it	cc
   b71e2:	2101      	movcc	r1, #1
   b71e4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b71e6:	7641      	strb	r1, [r0, #25]
}
   b71e8:	4770      	bx	lr

000b71ea <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b71ea:	b538      	push	{r3, r4, r5, lr}
   b71ec:	4604      	mov	r4, r0
   b71ee:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b71f0:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b71f2:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b71f4:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b71f6:	f002 fc8f 	bl	b9b18 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b71fa:	7b20      	ldrb	r0, [r4, #12]
   b71fc:	2101      	movs	r1, #1
   b71fe:	f002 fc9c 	bl	b9b3a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b7202:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b7204:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b7206:	2101      	movs	r1, #1
   b7208:	f002 fc86 	bl	b9b18 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b720c:	7b60      	ldrb	r0, [r4, #13]
   b720e:	2100      	movs	r1, #0
   b7210:	f002 fc93 	bl	b9b3a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b7214:	4620      	mov	r0, r4
   b7216:	bd38      	pop	{r3, r4, r5, pc}

000b7218 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b7218:	3901      	subs	r1, #1
   b721a:	b2c9      	uxtb	r1, r1
   b721c:	2908      	cmp	r1, #8
   b721e:	bf9a      	itte	ls
   b7220:	4b02      	ldrls	r3, [pc, #8]	; (b722c <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b7222:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b7226:	4802      	ldrhi	r0, [pc, #8]	; (b7230 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b7228:	4770      	bx	lr
   b722a:	bf00      	nop
   b722c:	000bbe78 	.word	0x000bbe78
   b7230:	000bbd80 	.word	0x000bbd80

000b7234 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b7234:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b7236:	4c0b      	ldr	r4, [pc, #44]	; (b7264 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7238:	7821      	ldrb	r1, [r4, #0]
   b723a:	f3bf 8f5b 	dmb	ish
   b723e:	f011 0101 	ands.w	r1, r1, #1
   b7242:	d10b      	bne.n	b725c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7244:	4620      	mov	r0, r4
   b7246:	9101      	str	r1, [sp, #4]
   b7248:	f7fc ff36 	bl	b40b8 <__cxa_guard_acquire>
   b724c:	9901      	ldr	r1, [sp, #4]
   b724e:	b128      	cbz	r0, b725c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7250:	4805      	ldr	r0, [pc, #20]	; (b7268 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7252:	f001 fd2f 	bl	b8cb4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7256:	4620      	mov	r0, r4
   b7258:	f7fc ff33 	bl	b40c2 <__cxa_guard_release>
    }
   b725c:	4802      	ldr	r0, [pc, #8]	; (b7268 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b725e:	b002      	add	sp, #8
   b7260:	bd10      	pop	{r4, pc}
   b7262:	bf00      	nop
   b7264:	2003cd34 	.word	0x2003cd34
   b7268:	2003cd38 	.word	0x2003cd38

000b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b726c:	b507      	push	{r0, r1, r2, lr}
   b726e:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b7270:	f7ff ffe0 	bl	b7234 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7274:	9901      	ldr	r1, [sp, #4]
    }
   b7276:	b003      	add	sp, #12
   b7278:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b727c:	f001 bdc0 	b.w	b8e00 <_ZN8SPIClass8transferEh>

000b7280 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b7280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7284:	4607      	mov	r7, r0
   b7286:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b728a:	461e      	mov	r6, r3
	if (count == 0) {
   b728c:	4615      	mov	r5, r2
   b728e:	2a00      	cmp	r2, #0
   b7290:	d042      	beq.n	b7318 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7292:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7296:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7298:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b729c:	2100      	movs	r1, #0
   b729e:	f002 fc4c 	bl	b9b3a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b72a2:	4648      	mov	r0, r9
   b72a4:	f7ff ffe2 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b72a8:	3d01      	subs	r5, #1
   b72aa:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b72ac:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b72b0:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b72b4:	fa5f f48b 	uxtb.w	r4, fp
   b72b8:	42a5      	cmp	r5, r4
   b72ba:	d922      	bls.n	b7302 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b72bc:	b9dc      	cbnz	r4, b72f6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b72be:	f1b8 0f00 	cmp.w	r8, #0
   b72c2:	d018      	beq.n	b72f6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b72c4:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b72c6:	b2d3      	uxtb	r3, r2
   b72c8:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b72ca:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b72cc:	d805      	bhi.n	b72da <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b72ce:	fa0a f402 	lsl.w	r4, sl, r2
   b72d2:	430c      	orrs	r4, r1
   b72d4:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b72d6:	3201      	adds	r2, #1
   b72d8:	e7f5      	b.n	b72c6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b72da:	4648      	mov	r0, r9
   b72dc:	9101      	str	r1, [sp, #4]
   b72de:	f7ff ffc5 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b72e2:	7833      	ldrb	r3, [r6, #0]
   b72e4:	9901      	ldr	r1, [sp, #4]
   b72e6:	4004      	ands	r4, r0
   b72e8:	ea23 0301 	bic.w	r3, r3, r1
   b72ec:	431c      	orrs	r4, r3
   b72ee:	7034      	strb	r4, [r6, #0]
		index++;
   b72f0:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b72f4:	e7de      	b.n	b72b4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b72f6:	4648      	mov	r0, r9
   b72f8:	f7ff ffb8 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b72fc:	f806 000b 	strb.w	r0, [r6, fp]
   b7300:	e7f6      	b.n	b72f0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b7302:	2000      	movs	r0, #0
   b7304:	f7ff ffb2 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b7308:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b730a:	7b38      	ldrb	r0, [r7, #12]
   b730c:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b730e:	b003      	add	sp, #12
   b7310:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7314:	f002 bc11 	b.w	b9b3a <digitalWrite>
} // End PCD_ReadRegister()
   b7318:	b003      	add	sp, #12
   b731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b731e <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b731e:	b538      	push	{r3, r4, r5, lr}
   b7320:	460c      	mov	r4, r1
   b7322:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b7324:	2100      	movs	r1, #0
   b7326:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7328:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b732c:	f002 fc05 	bl	b9b3a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b7330:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b7334:	f7ff ff9a 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7338:	2000      	movs	r0, #0
   b733a:	f7ff ff97 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b733e:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b7340:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b7342:	7b28      	ldrb	r0, [r5, #12]
   b7344:	f002 fbf9 	bl	b9b3a <digitalWrite>
} // End PCD_ReadRegister()
   b7348:	4620      	mov	r0, r4
   b734a:	bd38      	pop	{r3, r4, r5, pc}

000b734c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b734e:	460f      	mov	r7, r1
   b7350:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7352:	2100      	movs	r1, #0
   b7354:	7b00      	ldrb	r0, [r0, #12]
								) {
   b7356:	4615      	mov	r5, r2
   b7358:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b735a:	f002 fbee 	bl	b9b3a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b735e:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b7362:	f7ff ff83 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b7366:	4425      	add	r5, r4
   b7368:	42ac      	cmp	r4, r5
   b736a:	d004      	beq.n	b7376 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b736c:	f814 0b01 	ldrb.w	r0, [r4], #1
   b7370:	f7ff ff7c 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b7374:	e7f8      	b.n	b7368 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b7376:	7b30      	ldrb	r0, [r6, #12]
   b7378:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b737a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b737e:	f002 bbdc 	b.w	b9b3a <digitalWrite>

000b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b7382:	b570      	push	{r4, r5, r6, lr}
   b7384:	4604      	mov	r4, r0
   b7386:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b7388:	7b00      	ldrb	r0, [r0, #12]
   b738a:	2100      	movs	r1, #0
								) {
   b738c:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b738e:	f002 fbd4 	bl	b9b3a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b7392:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b7396:	f7ff ff69 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b739a:	4628      	mov	r0, r5
   b739c:	f7ff ff66 	bl	b726c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b73a0:	7b20      	ldrb	r0, [r4, #12]
   b73a2:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b73a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b73a8:	f002 bbc7 	b.w	b9b3a <digitalWrite>

000b73ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b73ac:	b570      	push	{r4, r5, r6, lr}
   b73ae:	4616      	mov	r6, r2
   b73b0:	4604      	mov	r4, r0
   b73b2:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b73b4:	f7ff ffb3 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b73b8:	4330      	orrs	r0, r6
   b73ba:	b2c2      	uxtb	r2, r0
   b73bc:	4629      	mov	r1, r5
   b73be:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b73c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b73c4:	f7ff bfdd 	b.w	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b73c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b73c8:	b570      	push	{r4, r5, r6, lr}
   b73ca:	4616      	mov	r6, r2
   b73cc:	4604      	mov	r4, r0
   b73ce:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b73d0:	f7ff ffa5 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b73d4:	ea20 0006 	bic.w	r0, r0, r6
   b73d8:	b2c2      	uxtb	r2, r0
   b73da:	4629      	mov	r1, r5
   b73dc:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b73de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b73e2:	f7ff bfce 	b.w	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b73e6 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b73e6:	2208      	movs	r2, #8
   b73e8:	2110      	movs	r1, #16
   b73ea:	f7ff bfed 	b.w	b73c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b73ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73f0:	4604      	mov	r4, r0
   b73f2:	4615      	mov	r5, r2
   b73f4:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b73f6:	2200      	movs	r2, #0
   b73f8:	2102      	movs	r1, #2
					 ) {
   b73fa:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b73fc:	f7ff ffc1 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b7400:	2204      	movs	r2, #4
   b7402:	210a      	movs	r1, #10
   b7404:	4620      	mov	r0, r4
   b7406:	f7ff ffbc 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b740a:	2280      	movs	r2, #128	; 0x80
   b740c:	2114      	movs	r1, #20
   b740e:	4620      	mov	r0, r4
   b7410:	f7ff ffcc 	bl	b73ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b7414:	462a      	mov	r2, r5
   b7416:	463b      	mov	r3, r7
   b7418:	2112      	movs	r1, #18
   b741a:	4620      	mov	r0, r4
   b741c:	f7ff ff96 	bl	b734c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b7420:	2203      	movs	r2, #3
   b7422:	2102      	movs	r1, #2
   b7424:	4620      	mov	r0, r4
   b7426:	f7ff ffac 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b742a:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b742e:	210a      	movs	r1, #10
   b7430:	4620      	mov	r0, r4
   b7432:	f7ff ff74 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b7436:	0743      	lsls	r3, r0, #29
   b7438:	d405      	bmi.n	b7446 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b743a:	3d01      	subs	r5, #1
   b743c:	b2ad      	uxth	r5, r5
   b743e:	2d00      	cmp	r5, #0
   b7440:	d1f5      	bne.n	b742e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b7442:	2004      	movs	r0, #4
   b7444:	e00f      	b.n	b7466 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b7446:	2200      	movs	r2, #0
   b7448:	2102      	movs	r1, #2
   b744a:	4620      	mov	r0, r4
   b744c:	f7ff ff99 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b7450:	2144      	movs	r1, #68	; 0x44
   b7452:	4620      	mov	r0, r4
   b7454:	f7ff ff63 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b7458:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b745a:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b745c:	4620      	mov	r0, r4
   b745e:	f7ff ff5e 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7462:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b7464:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b7466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7468 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b7468:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b746a:	220f      	movs	r2, #15
   b746c:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b746e:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b7470:	f7ff ff87 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b7474:	2032      	movs	r0, #50	; 0x32
   b7476:	f001 ff8f 	bl	b9398 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b747a:	2102      	movs	r1, #2
   b747c:	4620      	mov	r0, r4
   b747e:	f7ff ff4e 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b7482:	06c3      	lsls	r3, r0, #27
   b7484:	d4f9      	bmi.n	b747a <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b7486:	bd10      	pop	{r4, pc}

000b7488 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b7488:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b748a:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b748c:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b748e:	f7ff ff46 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b7492:	f000 0303 	and.w	r3, r0, #3
   b7496:	2b03      	cmp	r3, #3
   b7498:	d008      	beq.n	b74ac <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b749a:	f040 0203 	orr.w	r2, r0, #3
   b749e:	b2d2      	uxtb	r2, r2
   b74a0:	4620      	mov	r0, r4
   b74a2:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b74a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b74a8:	f7ff bf6b 	b.w	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b74ac:	bd10      	pop	{r4, pc}

000b74ae <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b74ae:	b510      	push	{r4, lr}
   b74b0:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b74b2:	7b40      	ldrb	r0, [r0, #13]
   b74b4:	f002 fb5a 	bl	b9b6c <digitalRead>
   b74b8:	bb48      	cbnz	r0, b750e <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b74ba:	7b60      	ldrb	r0, [r4, #13]
   b74bc:	2101      	movs	r1, #1
   b74be:	f002 fb3c 	bl	b9b3a <digitalWrite>
		delay(50);
   b74c2:	2032      	movs	r0, #50	; 0x32
   b74c4:	f001 ff68 	bl	b9398 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b74c8:	4620      	mov	r0, r4
   b74ca:	2280      	movs	r2, #128	; 0x80
   b74cc:	2154      	movs	r1, #84	; 0x54
   b74ce:	f7ff ff58 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b74d2:	4620      	mov	r0, r4
   b74d4:	22a9      	movs	r2, #169	; 0xa9
   b74d6:	2156      	movs	r1, #86	; 0x56
   b74d8:	f7ff ff53 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b74dc:	4620      	mov	r0, r4
   b74de:	2203      	movs	r2, #3
   b74e0:	2158      	movs	r1, #88	; 0x58
   b74e2:	f7ff ff4e 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b74e6:	4620      	mov	r0, r4
   b74e8:	22e8      	movs	r2, #232	; 0xe8
   b74ea:	215a      	movs	r1, #90	; 0x5a
   b74ec:	f7ff ff49 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b74f0:	4620      	mov	r0, r4
   b74f2:	2240      	movs	r2, #64	; 0x40
   b74f4:	212a      	movs	r1, #42	; 0x2a
   b74f6:	f7ff ff44 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b74fa:	4620      	mov	r0, r4
   b74fc:	223d      	movs	r2, #61	; 0x3d
   b74fe:	2122      	movs	r1, #34	; 0x22
   b7500:	f7ff ff3f 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b7504:	4620      	mov	r0, r4
} // End PCD_Init()
   b7506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b750a:	f7ff bfbd 	b.w	b7488 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b750e:	4620      	mov	r0, r4
   b7510:	f7ff ffaa 	bl	b7468 <_ZN7MFRC5229PCD_ResetEv>
   b7514:	e7d8      	b.n	b74c8 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b7516 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b7516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b751a:	b089      	sub	sp, #36	; 0x24
   b751c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b7520:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b7524:	9203      	str	r2, [sp, #12]
   b7526:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b752a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b752e:	9204      	str	r2, [sp, #16]
   b7530:	4604      	mov	r4, r0
   b7532:	468a      	mov	sl, r1
   b7534:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b7536:	f1b9 0f00 	cmp.w	r9, #0
   b753a:	d03e      	beq.n	b75ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b753c:	f899 8000 	ldrb.w	r8, [r9]
   b7540:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b7542:	2200      	movs	r2, #0
   b7544:	2102      	movs	r1, #2
   b7546:	4620      	mov	r0, r4
   b7548:	f7ff ff1b 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b754c:	227f      	movs	r2, #127	; 0x7f
   b754e:	2108      	movs	r1, #8
   b7550:	4620      	mov	r0, r4
   b7552:	f7ff ff16 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7556:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b755a:	2280      	movs	r2, #128	; 0x80
   b755c:	2114      	movs	r1, #20
   b755e:	4620      	mov	r0, r4
   b7560:	f7ff ff24 	bl	b73ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7564:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b7568:	9b05      	ldr	r3, [sp, #20]
   b756a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b756e:	2112      	movs	r1, #18
   b7570:	4620      	mov	r0, r4
   b7572:	f7ff feeb 	bl	b734c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b7576:	4642      	mov	r2, r8
   b7578:	211a      	movs	r1, #26
   b757a:	4620      	mov	r0, r4
   b757c:	f7ff ff01 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b7580:	4652      	mov	r2, sl
   b7582:	2102      	movs	r1, #2
   b7584:	4620      	mov	r0, r4
   b7586:	f7ff fefc 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b758a:	f1ba 0f0c 	cmp.w	sl, #12
   b758e:	d104      	bne.n	b759a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b7590:	2280      	movs	r2, #128	; 0x80
   b7592:	211a      	movs	r1, #26
   b7594:	4620      	mov	r0, r4
   b7596:	f7ff ff09 	bl	b73ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b759a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b759e:	2108      	movs	r1, #8
   b75a0:	4620      	mov	r0, r4
   b75a2:	f7ff febc 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b75a6:	9b03      	ldr	r3, [sp, #12]
   b75a8:	4218      	tst	r0, r3
   b75aa:	d108      	bne.n	b75be <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b75ac:	07c3      	lsls	r3, r0, #31
   b75ae:	d402      	bmi.n	b75b6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b75b0:	f1b8 0801 	subs.w	r8, r8, #1
   b75b4:	d1f3      	bne.n	b759e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b75b6:	2004      	movs	r0, #4
   b75b8:	e04d      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b75ba:	46c8      	mov	r8, r9
   b75bc:	e7c0      	b.n	b7540 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b75be:	210c      	movs	r1, #12
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7ff feac 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b75c6:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b75ca:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b75cc:	d146      	bne.n	b765c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b75ce:	b1dd      	cbz	r5, b7608 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b75d0:	b1d6      	cbz	r6, b7608 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b75d2:	2114      	movs	r1, #20
   b75d4:	4620      	mov	r0, r4
   b75d6:	f7ff fea2 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b75da:	7833      	ldrb	r3, [r6, #0]
   b75dc:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b75de:	4602      	mov	r2, r0
		if (n > *backLen) {
   b75e0:	d33e      	bcc.n	b7660 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b75e2:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b75e4:	462b      	mov	r3, r5
   b75e6:	2112      	movs	r1, #18
   b75e8:	4620      	mov	r0, r4
   b75ea:	f8cd b000 	str.w	fp, [sp]
   b75ee:	f7ff fe47 	bl	b7280 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b75f2:	2118      	movs	r1, #24
   b75f4:	4620      	mov	r0, r4
   b75f6:	f7ff fe92 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b75fa:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b75fe:	f1b9 0f00 	cmp.w	r9, #0
   b7602:	d001      	beq.n	b7608 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b7604:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b7608:	f018 0f08 	tst.w	r8, #8
   b760c:	d12a      	bne.n	b7664 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b760e:	b35d      	cbz	r5, b7668 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b7610:	b356      	cbz	r6, b7668 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b7612:	9b04      	ldr	r3, [sp, #16]
   b7614:	b343      	cbz	r3, b7668 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b7616:	7832      	ldrb	r2, [r6, #0]
   b7618:	2a01      	cmp	r2, #1
   b761a:	d103      	bne.n	b7624 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b761c:	2f04      	cmp	r7, #4
   b761e:	d125      	bne.n	b766c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b7620:	2009      	movs	r0, #9
   b7622:	e018      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b7624:	d922      	bls.n	b766c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b7626:	bb0f      	cbnz	r7, b766c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b7628:	3a02      	subs	r2, #2
   b762a:	ab07      	add	r3, sp, #28
   b762c:	b2d2      	uxtb	r2, r2
   b762e:	4629      	mov	r1, r5
   b7630:	4620      	mov	r0, r4
   b7632:	f7ff fedc 	bl	b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b7636:	2801      	cmp	r0, #1
   b7638:	d10d      	bne.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b763a:	7833      	ldrb	r3, [r6, #0]
   b763c:	441d      	add	r5, r3
   b763e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b7642:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b7646:	429a      	cmp	r2, r3
   b7648:	d110      	bne.n	b766c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b764a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b764e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7652:	429a      	cmp	r2, r3
   b7654:	d10a      	bne.n	b766c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b7656:	b009      	add	sp, #36	; 0x24
   b7658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b765c:	2002      	movs	r0, #2
   b765e:	e7fa      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b7660:	2005      	movs	r0, #5
   b7662:	e7f8      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b7664:	2003      	movs	r0, #3
   b7666:	e7f6      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b7668:	2001      	movs	r0, #1
   b766a:	e7f4      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b766c:	2008      	movs	r0, #8
   b766e:	e7f2      	b.n	b7656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b7670 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b7670:	b510      	push	{r4, lr}
   b7672:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b7674:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b7678:	9405      	str	r4, [sp, #20]
   b767a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b767e:	9404      	str	r4, [sp, #16]
   b7680:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b7682:	9403      	str	r4, [sp, #12]
   b7684:	9c08      	ldr	r4, [sp, #32]
   b7686:	9200      	str	r2, [sp, #0]
   b7688:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b768c:	2230      	movs	r2, #48	; 0x30
   b768e:	460b      	mov	r3, r1
   b7690:	210c      	movs	r1, #12
   b7692:	f7ff ff40 	bl	b7516 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b7696:	b006      	add	sp, #24
   b7698:	bd10      	pop	{r4, pc}

000b769a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b769a:	b570      	push	{r4, r5, r6, lr}
   b769c:	b088      	sub	sp, #32
   b769e:	4606      	mov	r6, r0
   b76a0:	461c      	mov	r4, r3
   b76a2:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b76a6:	4615      	mov	r5, r2
   b76a8:	b31a      	cbz	r2, b76f2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b76aa:	781b      	ldrb	r3, [r3, #0]
   b76ac:	2b01      	cmp	r3, #1
   b76ae:	d920      	bls.n	b76f2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b76b0:	2280      	movs	r2, #128	; 0x80
   b76b2:	211c      	movs	r1, #28
   b76b4:	f7ff fe88 	bl	b73c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b76b8:	2307      	movs	r3, #7
   b76ba:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b76be:	2300      	movs	r3, #0
   b76c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b76c4:	f10d 031f 	add.w	r3, sp, #31
   b76c8:	e9cd 4300 	strd	r4, r3, [sp]
   b76cc:	2201      	movs	r2, #1
   b76ce:	462b      	mov	r3, r5
   b76d0:	f10d 0117 	add.w	r1, sp, #23
   b76d4:	4630      	mov	r0, r6
   b76d6:	f7ff ffcb 	bl	b7670 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b76da:	2801      	cmp	r0, #1
   b76dc:	d107      	bne.n	b76ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b76de:	7823      	ldrb	r3, [r4, #0]
   b76e0:	2b02      	cmp	r3, #2
   b76e2:	d108      	bne.n	b76f6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b76e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b76e8:	2b00      	cmp	r3, #0
   b76ea:	bf18      	it	ne
   b76ec:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b76ee:	b008      	add	sp, #32
   b76f0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b76f2:	2005      	movs	r0, #5
   b76f4:	e7fb      	b.n	b76ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b76f6:	2002      	movs	r0, #2
   b76f8:	e7f9      	b.n	b76ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b76fa <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b76fa:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b76fc:	460a      	mov	r2, r1
   b76fe:	2126      	movs	r1, #38	; 0x26
   b7700:	f7ff bfcb 	b.w	b769a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b7704 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b7704:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b7706:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b7708:	f10d 0203 	add.w	r2, sp, #3
   b770c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b770e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b7712:	f7ff fff2 	bl	b76fa <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b7716:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b771a:	1e43      	subs	r3, r0, #1
   b771c:	4258      	negs	r0, r3
   b771e:	4158      	adcs	r0, r3
   b7720:	b003      	add	sp, #12
   b7722:	f85d fb04 	ldr.w	pc, [sp], #4

000b7726 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b7726:	b570      	push	{r4, r5, r6, lr}
   b7728:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b772a:	2350      	movs	r3, #80	; 0x50
   b772c:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b7730:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7732:	f10d 0316 	add.w	r3, sp, #22
   b7736:	2202      	movs	r2, #2
   b7738:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b773a:	4606      	mov	r6, r0
	buffer[1] = 0;
   b773c:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7740:	f7ff fe55 	bl	b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b7744:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7746:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b7748:	d10f      	bne.n	b776a <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b774a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b774e:	e9cd 4400 	strd	r4, r4, [sp]
   b7752:	4623      	mov	r3, r4
   b7754:	2204      	movs	r2, #4
   b7756:	a905      	add	r1, sp, #20
   b7758:	4630      	mov	r0, r6
   b775a:	f7ff ff89 	bl	b7670 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b775e:	2804      	cmp	r0, #4
   b7760:	d003      	beq.n	b776a <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b7762:	2801      	cmp	r0, #1
   b7764:	bf14      	ite	ne
   b7766:	4605      	movne	r5, r0
   b7768:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b776a:	4628      	mov	r0, r5
   b776c:	b006      	add	sp, #24
   b776e:	bd70      	pop	{r4, r5, r6, pc}

000b7770 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b7770:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7772:	4606      	mov	r6, r0
   b7774:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b7776:	4614      	mov	r4, r2
   b7778:	b1ca      	cbz	r2, b77ae <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b777a:	781b      	ldrb	r3, [r3, #0]
   b777c:	2b11      	cmp	r3, #17
   b777e:	d916      	bls.n	b77ae <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b7780:	2330      	movs	r3, #48	; 0x30
   b7782:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b7784:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b7786:	1c93      	adds	r3, r2, #2
   b7788:	4621      	mov	r1, r4
   b778a:	2202      	movs	r2, #2
   b778c:	f7ff fe2f 	bl	b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b7790:	2801      	cmp	r0, #1
   b7792:	d10a      	bne.n	b77aa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b7794:	2300      	movs	r3, #0
   b7796:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b779a:	9003      	str	r0, [sp, #12]
   b779c:	9500      	str	r5, [sp, #0]
   b779e:	4623      	mov	r3, r4
   b77a0:	2204      	movs	r2, #4
   b77a2:	4621      	mov	r1, r4
   b77a4:	4630      	mov	r0, r6
   b77a6:	f7ff ff63 	bl	b7670 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b77aa:	b004      	add	sp, #16
   b77ac:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b77ae:	2005      	movs	r0, #5
   b77b0:	e7fb      	b.n	b77aa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b77b2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b77b2:	b510      	push	{r4, lr}
   b77b4:	b08a      	sub	sp, #40	; 0x28
   b77b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b77b8:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b77bc:	681a      	ldr	r2, [r3, #0]
   b77be:	889b      	ldrh	r3, [r3, #4]
   b77c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b77c4:	7863      	ldrb	r3, [r4, #1]
   b77c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b77ca:	78a3      	ldrb	r3, [r4, #2]
   b77cc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b77d0:	78e3      	ldrb	r3, [r4, #3]
   b77d2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b77d6:	7923      	ldrb	r3, [r4, #4]
   b77d8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b77dc:	2300      	movs	r3, #0
   b77de:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b77e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b77e6:	9301      	str	r3, [sp, #4]
   b77e8:	230c      	movs	r3, #12
	sendData[0] = command;
   b77ea:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b77ee:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b77f2:	9300      	str	r3, [sp, #0]
   b77f4:	2210      	movs	r2, #16
   b77f6:	ab07      	add	r3, sp, #28
   b77f8:	210e      	movs	r1, #14
   b77fa:	f7ff fe8c 	bl	b7516 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b77fe:	b00a      	add	sp, #40	; 0x28
   b7800:	bd10      	pop	{r4, pc}

000b7802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b7802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b7806:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b7808:	b08b      	sub	sp, #44	; 0x2c
   b780a:	4682      	mov	sl, r0
   b780c:	460f      	mov	r7, r1
   b780e:	4690      	mov	r8, r2
	if (validBits > 80) {
   b7810:	f200 8140 	bhi.w	b7a94 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b7814:	2280      	movs	r2, #128	; 0x80
   b7816:	211c      	movs	r1, #28
   b7818:	f7ff fdd6 	bl	b73c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b781c:	2393      	movs	r3, #147	; 0x93
   b781e:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b7822:	f1b8 0f00 	cmp.w	r8, #0
   b7826:	f000 80bc 	beq.w	b79a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b782a:	783c      	ldrb	r4, [r7, #0]
   b782c:	2c04      	cmp	r4, #4
   b782e:	bf94      	ite	ls
   b7830:	2300      	movls	r3, #0
   b7832:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b7834:	2501      	movs	r5, #1
   b7836:	2600      	movs	r6, #0
   b7838:	e00b      	b.n	b7852 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b783a:	2395      	movs	r3, #149	; 0x95
   b783c:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b7840:	f1b8 0f00 	cmp.w	r8, #0
   b7844:	f000 80af 	beq.w	b79a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b7848:	783c      	ldrb	r4, [r7, #0]
   b784a:	2c07      	cmp	r4, #7
   b784c:	bf94      	ite	ls
   b784e:	2300      	movls	r3, #0
   b7850:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b7852:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b7856:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b7858:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b785c:	2b00      	cmp	r3, #0
   b785e:	f000 80a4 	beq.w	b79aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b7862:	2288      	movs	r2, #136	; 0x88
   b7864:	f88d 201e 	strb.w	r2, [sp, #30]
   b7868:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b786a:	f014 0207 	ands.w	r2, r4, #7
   b786e:	bf18      	it	ne
   b7870:	2201      	movne	r2, #1
   b7872:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b7876:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b787a:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b787c:	d01d      	beq.n	b78ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b787e:	2b00      	cmp	r3, #0
   b7880:	bf14      	ite	ne
   b7882:	f04f 0903 	movne.w	r9, #3
   b7886:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b788a:	f106 0c01 	add.w	ip, r6, #1
   b788e:	4591      	cmp	r9, r2
   b7890:	bf94      	ite	ls
   b7892:	eb01 0e09 	addls.w	lr, r1, r9
   b7896:	eb01 0e02 	addhi.w	lr, r1, r2
   b789a:	fa57 fc8c 	uxtab	ip, r7, ip
   b789e:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b78a2:	460a      	mov	r2, r1
   b78a4:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b78a8:	3101      	adds	r1, #1
   b78aa:	b2c9      	uxtb	r1, r1
   b78ac:	445a      	add	r2, fp
   b78ae:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b78b2:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b78b6:	4571      	cmp	r1, lr
   b78b8:	d1f3      	bne.n	b78a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b78ba:	b10b      	cbz	r3, b78c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b78bc:	3008      	adds	r0, #8
   b78be:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b78c0:	2c1f      	cmp	r4, #31
   b78c2:	dd74      	ble.n	b79ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b78c4:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b78c8:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b78cc:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b78d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b78d4:	4053      	eors	r3, r2
   b78d6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b78da:	4053      	eors	r3, r2
   b78dc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b78e0:	4053      	eors	r3, r2
   b78e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b78e6:	2207      	movs	r2, #7
   b78e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b78ec:	a907      	add	r1, sp, #28
   b78ee:	4650      	mov	r0, sl
   b78f0:	f7ff fd7d 	bl	b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b78f4:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b78f6:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b78f8:	f040 80c8 	bne.w	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b78fc:	2300      	movs	r3, #0
   b78fe:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b7902:	2303      	movs	r3, #3
   b7904:	f88d 301b 	strb.w	r3, [sp, #27]
   b7908:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b790a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b790e:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b7912:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b7916:	9305      	str	r3, [sp, #20]
   b7918:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b791c:	b2d2      	uxtb	r2, r2
   b791e:	211a      	movs	r1, #26
   b7920:	4650      	mov	r0, sl
   b7922:	f7ff fd2e 	bl	b7382 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b7926:	9b05      	ldr	r3, [sp, #20]
   b7928:	9302      	str	r3, [sp, #8]
   b792a:	f10d 031a 	add.w	r3, sp, #26
   b792e:	2200      	movs	r2, #0
   b7930:	9301      	str	r3, [sp, #4]
   b7932:	f10d 031b 	add.w	r3, sp, #27
   b7936:	9203      	str	r2, [sp, #12]
   b7938:	9300      	str	r3, [sp, #0]
   b793a:	464a      	mov	r2, r9
   b793c:	465b      	mov	r3, fp
   b793e:	a907      	add	r1, sp, #28
   b7940:	4650      	mov	r0, sl
   b7942:	f7ff fe95 	bl	b7670 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b7946:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b7948:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b794a:	d14c      	bne.n	b79e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b794c:	211c      	movs	r1, #28
   b794e:	4650      	mov	r0, sl
   b7950:	f7ff fce5 	bl	b731e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b7954:	0681      	lsls	r1, r0, #26
   b7956:	f100 8099 	bmi.w	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b795a:	f010 001f 	ands.w	r0, r0, #31
   b795e:	bf08      	it	eq
   b7960:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b7962:	42a0      	cmp	r0, r4
   b7964:	f340 8087 	ble.w	b7a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b7968:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b796a:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b796e:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b7970:	f013 0307 	ands.w	r3, r3, #7
   b7974:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b7978:	bf18      	it	ne
   b797a:	2301      	movne	r3, #1
   b797c:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b797e:	4418      	add	r0, r3
   b7980:	ab0a      	add	r3, sp, #40	; 0x28
   b7982:	4418      	add	r0, r3
   b7984:	2301      	movs	r3, #1
   b7986:	fa03 f202 	lsl.w	r2, r3, r2
   b798a:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b798e:	4313      	orrs	r3, r2
   b7990:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b7994:	e794      	b.n	b78c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b7996:	2397      	movs	r3, #151	; 0x97
   b7998:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b799c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b799e:	4623      	mov	r3, r4
				break;
   b79a0:	e757      	b.n	b7852 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b79a2:	4643      	mov	r3, r8
   b79a4:	e746      	b.n	b7834 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b79a6:	4643      	mov	r3, r8
   b79a8:	e753      	b.n	b7852 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b79aa:	2102      	movs	r1, #2
   b79ac:	e75d      	b.n	b786a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b79ae:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b79b0:	3302      	adds	r3, #2
   b79b2:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b79b4:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b79b8:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b79bc:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b79c0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b79c4:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b79c8:	bf18      	it	ne
   b79ca:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b79ce:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b79d0:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b79d2:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b79d6:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b79da:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b79de:	f88d 301b 	strb.w	r3, [sp, #27]
   b79e2:	9404      	str	r4, [sp, #16]
   b79e4:	e795      	b.n	b7912 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b79e6:	2801      	cmp	r0, #1
   b79e8:	d150      	bne.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b79ea:	9b04      	ldr	r3, [sp, #16]
   b79ec:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b79ee:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b79f2:	f77f af67 	ble.w	b78c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b79f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b79fa:	2b88      	cmp	r3, #136	; 0x88
   b79fc:	d13e      	bne.n	b7a7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b79fe:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7a00:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b7a02:	3601      	adds	r6, #1
   b7a04:	441a      	add	r2, r3
   b7a06:	fa57 f686 	uxtab	r6, r7, r6
   b7a0a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b7a0c:	4619      	mov	r1, r3
   b7a0e:	a80a      	add	r0, sp, #40	; 0x28
   b7a10:	3301      	adds	r3, #1
   b7a12:	4401      	add	r1, r0
   b7a14:	b2db      	uxtb	r3, r3
   b7a16:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b7a1a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b7a1e:	4293      	cmp	r3, r2
   b7a20:	d1f4      	bne.n	b7a0c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b7a22:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b7a26:	2e03      	cmp	r6, #3
   b7a28:	d137      	bne.n	b7a9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b7a2a:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b7a2e:	bba4      	cbnz	r4, b7a9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7a30:	f10d 031e 	add.w	r3, sp, #30
   b7a34:	2201      	movs	r2, #1
   b7a36:	4659      	mov	r1, fp
   b7a38:	4650      	mov	r0, sl
   b7a3a:	f7ff fcd8 	bl	b73ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b7a3e:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b7a40:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b7a42:	d123      	bne.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b7a44:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7a48:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b7a4c:	429a      	cmp	r2, r3
   b7a4e:	d127      	bne.n	b7aa0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b7a50:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7a54:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b7a58:	429a      	cmp	r2, r3
   b7a5a:	d121      	bne.n	b7aa0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b7a5c:	f89b 3000 	ldrb.w	r3, [fp]
   b7a60:	075a      	lsls	r2, r3, #29
   b7a62:	d50e      	bpl.n	b7a82 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b7a64:	3501      	adds	r5, #1
   b7a66:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b7a68:	2d03      	cmp	r5, #3
   b7a6a:	d094      	beq.n	b7996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b7a6c:	2d04      	cmp	r5, #4
   b7a6e:	d002      	beq.n	b7a76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b7a70:	2d02      	cmp	r5, #2
   b7a72:	f43f aee2 	beq.w	b783a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b7a76:	f04f 0906 	mov.w	r9, #6
   b7a7a:	e007      	b.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b7a7c:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b7a7e:	2204      	movs	r2, #4
   b7a80:	e7bf      	b.n	b7a02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b7a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b7a86:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b7a88:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b7a8a:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b7a8c:	4648      	mov	r0, r9
   b7a8e:	b00b      	add	sp, #44	; 0x2c
   b7a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b7a94:	f04f 0907 	mov.w	r9, #7
   b7a98:	e7f8      	b.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b7a9a:	f04f 0902 	mov.w	r9, #2
   b7a9e:	e7f5      	b.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b7aa0:	f04f 0908 	mov.w	r9, #8
   b7aa4:	e7f2      	b.n	b7a8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b7aa6 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b7aa6:	b508      	push	{r3, lr}
   b7aa8:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b7aaa:	2200      	movs	r2, #0
   b7aac:	f7ff fea9 	bl	b7802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b7ab0:	1e43      	subs	r3, r0, #1
   b7ab2:	4258      	negs	r0, r3
   b7ab4:	4158      	adcs	r0, r3
   b7ab6:	bd08      	pop	{r3, pc}

000b7ab8 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b7ab8:	6001      	str	r1, [r0, #0]
}
   b7aba:	4770      	bx	lr

000b7abc <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b7abc:	b510      	push	{r4, lr}
   b7abe:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b7ac0:	2101      	movs	r1, #1
   b7ac2:	8800      	ldrh	r0, [r0, #0]
   b7ac4:	f002 f828 	bl	b9b18 <pinMode>
	digitalWrite(_pin, LOW);
   b7ac8:	8820      	ldrh	r0, [r4, #0]
   b7aca:	2100      	movs	r1, #0
   b7acc:	f002 f835 	bl	b9b3a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7ad0:	2002      	movs	r0, #2
   b7ad2:	f000 fe77 	bl	b87c4 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b7ad6:	8820      	ldrh	r0, [r4, #0]
   b7ad8:	2101      	movs	r1, #1
   b7ada:	f002 f82e 	bl	b9b3a <digitalWrite>
   b7ade:	2005      	movs	r0, #5
   b7ae0:	f000 fe70 	bl	b87c4 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b7ae4:	8820      	ldrh	r0, [r4, #0]
   b7ae6:	2100      	movs	r1, #0
   b7ae8:	f002 f827 	bl	b9b3a <digitalWrite>
	pinMode(_pin,INPUT);
   b7aec:	8820      	ldrh	r0, [r4, #0]
   b7aee:	2100      	movs	r1, #0
   b7af0:	f002 f812 	bl	b9b18 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b7af4:	8820      	ldrh	r0, [r4, #0]
   b7af6:	2101      	movs	r1, #1
   b7af8:	f002 f862 	bl	b9bc0 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b7afc:	233a      	movs	r3, #58	; 0x3a
   b7afe:	fb90 f0f3 	sdiv	r0, r0, r3
   b7b02:	bd10      	pop	{r4, pc}

000b7b04 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b7b04:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b7b06:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b7b08:	2301      	movs	r3, #1
	_pin = pin;
   b7b0a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b7b0c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b7b0e:	7403      	strb	r3, [r0, #16]
}
   b7b10:	bd10      	pop	{r4, pc}

000b7b12 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b7b12:	b510      	push	{r4, lr}
   b7b14:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b7b16:	2100      	movs	r1, #0
   b7b18:	7980      	ldrb	r0, [r0, #6]
   b7b1a:	f001 fffd 	bl	b9b18 <pinMode>
	digitalWrite(_pin, HIGH);
   b7b1e:	79a0      	ldrb	r0, [r4, #6]
   b7b20:	2101      	movs	r1, #1
   b7b22:	f002 f80a 	bl	b9b3a <digitalWrite>
	_lastreadtime = 0;
   b7b26:	2300      	movs	r3, #0
   b7b28:	60e3      	str	r3, [r4, #12]
}
   b7b2a:	bd10      	pop	{r4, pc}

000b7b2c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b7b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b30:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7b32:	f000 fe4f 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b7b36:	68e3      	ldr	r3, [r4, #12]
   b7b38:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b7b3a:	bf84      	itt	hi
   b7b3c:	2300      	movhi	r3, #0
   b7b3e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b7b40:	7c23      	ldrb	r3, [r4, #16]
   b7b42:	b923      	cbnz	r3, b7b4e <_ZN3DHT4readEv+0x22>
   b7b44:	68e3      	ldr	r3, [r4, #12]
   b7b46:	1ac0      	subs	r0, r0, r3
   b7b48:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b7b4c:	d367      	bcc.n	b7c1e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b7b4e:	2500      	movs	r5, #0
   b7b50:	7425      	strb	r5, [r4, #16]
   b7b52:	f000 fe3f 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b7b56:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b7b58:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7b5a:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b7b5c:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b7b5e:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b7b60:	f001 ffeb 	bl	b9b3a <digitalWrite>
	delay(250);
   b7b64:	20fa      	movs	r0, #250	; 0xfa
   b7b66:	f001 fc17 	bl	b9398 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b7b6a:	79a0      	ldrb	r0, [r4, #6]
   b7b6c:	2101      	movs	r1, #1
   b7b6e:	f001 ffd3 	bl	b9b18 <pinMode>
	digitalWrite(_pin, LOW);
   b7b72:	4629      	mov	r1, r5
   b7b74:	79a0      	ldrb	r0, [r4, #6]
   b7b76:	f001 ffe0 	bl	b9b3a <digitalWrite>
	delay(20);
   b7b7a:	2014      	movs	r0, #20
   b7b7c:	f001 fc0c 	bl	b9398 <delay>
	noInterrupts();
   b7b80:	f001 fdc6 	bl	b9710 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b7b84:	2101      	movs	r1, #1
   b7b86:	79a0      	ldrb	r0, [r4, #6]
   b7b88:	f001 ffd7 	bl	b9b3a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7b8c:	2028      	movs	r0, #40	; 0x28
   b7b8e:	f000 fe19 	bl	b87c4 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b7b92:	79a0      	ldrb	r0, [r4, #6]
   b7b94:	4629      	mov	r1, r5
   b7b96:	f001 ffbf 	bl	b9b18 <pinMode>
	uint8_t j = 0, i;
   b7b9a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b7b9c:	2701      	movs	r7, #1
   b7b9e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b7ba2:	79a0      	ldrb	r0, [r4, #6]
   b7ba4:	f001 ffe2 	bl	b9b6c <digitalRead>
   b7ba8:	42b8      	cmp	r0, r7
   b7baa:	fa5f f988 	uxtb.w	r9, r8
   b7bae:	d108      	bne.n	b7bc2 <_ZN3DHT4readEv+0x96>
   b7bb0:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b7bb2:	f108 0801 	add.w	r8, r8, #1
   b7bb6:	f000 fe05 	bl	b87c4 <HAL_Delay_Microseconds>
   b7bba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7bbe:	d1f0      	bne.n	b7ba2 <_ZN3DHT4readEv+0x76>
   b7bc0:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b7bc2:	79a0      	ldrb	r0, [r4, #6]
   b7bc4:	f001 ffd2 	bl	b9b6c <digitalRead>

		if (counter == 255) break;
   b7bc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b7bcc:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b7bce:	d014      	beq.n	b7bfa <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b7bd0:	2d03      	cmp	r5, #3
   b7bd2:	d90e      	bls.n	b7bf2 <_ZN3DHT4readEv+0xc6>
   b7bd4:	07ea      	lsls	r2, r5, #31
   b7bd6:	d40c      	bmi.n	b7bf2 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b7bd8:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b7bda:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b7bdc:	5ca3      	ldrb	r3, [r4, r2]
   b7bde:	005b      	lsls	r3, r3, #1
   b7be0:	b2db      	uxtb	r3, r3
   b7be2:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b7be4:	7a21      	ldrb	r1, [r4, #8]
   b7be6:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b7be8:	bf3c      	itt	cc
   b7bea:	f043 0301 	orrcc.w	r3, r3, #1
   b7bee:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b7bf0:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b7bf2:	3501      	adds	r5, #1
   b7bf4:	b2ed      	uxtb	r5, r5
   b7bf6:	2d55      	cmp	r5, #85	; 0x55
   b7bf8:	d1d1      	bne.n	b7b9e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b7bfa:	f001 fd8b 	bl	b9714 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b7bfe:	2e27      	cmp	r6, #39	; 0x27
   b7c00:	d90f      	bls.n	b7c22 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b7c02:	7863      	ldrb	r3, [r4, #1]
   b7c04:	7820      	ldrb	r0, [r4, #0]
   b7c06:	4418      	add	r0, r3
   b7c08:	78a3      	ldrb	r3, [r4, #2]
   b7c0a:	4418      	add	r0, r3
   b7c0c:	78e3      	ldrb	r3, [r4, #3]
   b7c0e:	4418      	add	r0, r3
   b7c10:	7923      	ldrb	r3, [r4, #4]
   b7c12:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b7c14:	1ac3      	subs	r3, r0, r3
   b7c16:	4258      	negs	r0, r3
   b7c18:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b7c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b7c1e:	2001      	movs	r0, #1
   b7c20:	e7fb      	b.n	b7c1a <_ZN3DHT4readEv+0xee>
	return false;
   b7c22:	2000      	movs	r0, #0
   b7c24:	e7f9      	b.n	b7c1a <_ZN3DHT4readEv+0xee>
	...

000b7c28 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b7c28:	b510      	push	{r4, lr}
   b7c2a:	4604      	mov	r4, r0
	if (read()) {
   b7c2c:	f7ff ff7e 	bl	b7b2c <_ZN3DHT4readEv>
   b7c30:	b320      	cbz	r0, b7c7c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b7c32:	79e3      	ldrb	r3, [r4, #7]
   b7c34:	2b0b      	cmp	r3, #11
   b7c36:	d01b      	beq.n	b7c70 <_ZN3DHT15readTemperatureEv+0x48>
   b7c38:	3b15      	subs	r3, #21
   b7c3a:	2b01      	cmp	r3, #1
   b7c3c:	d81e      	bhi.n	b7c7c <_ZN3DHT15readTemperatureEv+0x54>
   b7c3e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b7c40:	eddf 6a10 	vldr	s13, [pc, #64]	; b7c84 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b7c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b7c48:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b7c4c:	78e2      	ldrb	r2, [r4, #3]
   b7c4e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b7c52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b7c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b7c5a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b7c5c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b7c60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b7c64:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b7c68:	d507      	bpl.n	b7c7a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b7c6a:	eeb1 0a40 	vneg.f32	s0, s0
   b7c6e:	e004      	b.n	b7c7a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b7c70:	78a3      	ldrb	r3, [r4, #2]
   b7c72:	ee00 3a10 	vmov	s0, r3
   b7c76:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b7c7a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b7c7c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b7c88 <_ZN3DHT15readTemperatureEv+0x60>
   b7c80:	e7fb      	b.n	b7c7a <_ZN3DHT15readTemperatureEv+0x52>
   b7c82:	bf00      	nop
   b7c84:	43800000 	.word	0x43800000
   b7c88:	7fc00000 	.word	0x7fc00000

000b7c8c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b7c8c:	f7ff bfcc 	b.w	b7c28 <_ZN3DHT15readTemperatureEv>

000b7c90 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7c90:	b510      	push	{r4, lr}
   b7c92:	4b04      	ldr	r3, [pc, #16]	; (b7ca4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7c94:	6003      	str	r3, [r0, #0]
   b7c96:	4604      	mov	r4, r0
  if(buffer) {
   b7c98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7c9a:	b108      	cbz	r0, b7ca0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7c9c:	f000 ff8e 	bl	b8bbc <free>
    buffer = NULL;
  }
}
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	bd10      	pop	{r4, pc}
   b7ca4:	000bc498 	.word	0x000bc498

000b7ca8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7ca8:	b510      	push	{r4, lr}
   b7caa:	4604      	mov	r4, r0
}
   b7cac:	f7ff fff0 	bl	b7c90 <_ZN16Adafruit_SSD1306D1Ev>
   b7cb0:	4620      	mov	r0, r4
   b7cb2:	2150      	movs	r1, #80	; 0x50
   b7cb4:	f7fc f9f1 	bl	b409a <_ZdlPvj>
   b7cb8:	4620      	mov	r0, r4
   b7cba:	bd10      	pop	{r4, pc}

000b7cbc <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7cbc:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7cbe:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7cc0:	db4b      	blt.n	b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7cc2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b7cc6:	428c      	cmp	r4, r1
   b7cc8:	dd47      	ble.n	b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7cca:	2a00      	cmp	r2, #0
   b7ccc:	db45      	blt.n	b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7cce:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7cd2:	4294      	cmp	r4, r2
   b7cd4:	dd41      	ble.n	b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b7cd6:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b7cd8:	2c02      	cmp	r4, #2
   b7cda:	d01f      	beq.n	b7d1c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7cdc:	2c03      	cmp	r4, #3
   b7cde:	d026      	beq.n	b7d2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7ce0:	2c01      	cmp	r4, #1
   b7ce2:	d104      	bne.n	b7cee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7ce4:	8904      	ldrh	r4, [r0, #8]
   b7ce6:	43d2      	mvns	r2, r2
   b7ce8:	4414      	add	r4, r2
      break;
   b7cea:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7cec:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7cee:	2b01      	cmp	r3, #1
   b7cf0:	d023      	beq.n	b7d3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7cf2:	2b02      	cmp	r3, #2
   b7cf4:	d032      	beq.n	b7d5c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b7cf6:	bb83      	cbnz	r3, b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b7cf8:	2a00      	cmp	r2, #0
   b7cfa:	4613      	mov	r3, r2
   b7cfc:	8904      	ldrh	r4, [r0, #8]
   b7cfe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7d00:	bfb8      	it	lt
   b7d02:	1dd3      	addlt	r3, r2, #7
   b7d04:	10db      	asrs	r3, r3, #3
   b7d06:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7d0a:	f002 0207 	and.w	r2, r2, #7
   b7d0e:	2301      	movs	r3, #1
   b7d10:	4093      	lsls	r3, r2
   b7d12:	5c42      	ldrb	r2, [r0, r1]
   b7d14:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7d18:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b7d1a:	e01e      	b.n	b7d5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b7d1c:	8904      	ldrh	r4, [r0, #8]
   b7d1e:	3c01      	subs	r4, #1
   b7d20:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b7d22:	8944      	ldrh	r4, [r0, #10]
   b7d24:	43d2      	mvns	r2, r2
   b7d26:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b7d28:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b7d2a:	b212      	sxth	r2, r2
      break;
   b7d2c:	e7df      	b.n	b7cee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b7d2e:	8944      	ldrh	r4, [r0, #10]
   b7d30:	3c01      	subs	r4, #1
   b7d32:	1a64      	subs	r4, r4, r1
      break;
   b7d34:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b7d36:	b222      	sxth	r2, r4
      break;
   b7d38:	e7d9      	b.n	b7cee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b7d3a:	2a00      	cmp	r2, #0
   b7d3c:	8904      	ldrh	r4, [r0, #8]
   b7d3e:	4613      	mov	r3, r2
   b7d40:	bfb8      	it	lt
   b7d42:	1dd3      	addlt	r3, r2, #7
   b7d44:	10db      	asrs	r3, r3, #3
   b7d46:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7d4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7d4c:	f002 0007 	and.w	r0, r2, #7
   b7d50:	2201      	movs	r2, #1
   b7d52:	4082      	lsls	r2, r0
   b7d54:	5c58      	ldrb	r0, [r3, r1]
   b7d56:	4302      	orrs	r2, r0
   b7d58:	545a      	strb	r2, [r3, r1]
}
   b7d5a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7d5c:	2a00      	cmp	r2, #0
   b7d5e:	4613      	mov	r3, r2
   b7d60:	8904      	ldrh	r4, [r0, #8]
   b7d62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7d64:	bfb8      	it	lt
   b7d66:	1dd3      	addlt	r3, r2, #7
   b7d68:	10db      	asrs	r3, r3, #3
   b7d6a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7d6e:	f002 0207 	and.w	r2, r2, #7
   b7d72:	2301      	movs	r3, #1
   b7d74:	fa03 f202 	lsl.w	r2, r3, r2
   b7d78:	5c43      	ldrb	r3, [r0, r1]
   b7d7a:	405a      	eors	r2, r3
   b7d7c:	e7cc      	b.n	b7d18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7d80 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7d80:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b7d82:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b7d84:	4604      	mov	r4, r0
   b7d86:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b7d88:	2180      	movs	r1, #128	; 0x80
   b7d8a:	f7fe ffcf 	bl	b6d2c <_ZN12Adafruit_GFXC1Ess>
   b7d8e:	2500      	movs	r5, #0
   b7d90:	4b0d      	ldr	r3, [pc, #52]	; (b7dc8 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b7d92:	6023      	str	r3, [r4, #0]
   b7d94:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b7d96:	f001 ff83 	bl	b9ca0 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b7d9a:	23ff      	movs	r3, #255	; 0xff
   b7d9c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b7da0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b7da4:	4b09      	ldr	r3, [pc, #36]	; (b7dcc <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b7da6:	63a3      	str	r3, [r4, #56]	; 0x38
   b7da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7dac:	2301      	movs	r3, #1
   b7dae:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b7db2:	86a2      	strh	r2, [r4, #52]	; 0x34
   b7db4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b7db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b7dbc:	6425      	str	r5, [r4, #64]	; 0x40
   b7dbe:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b7dc2:	4620      	mov	r0, r4
   b7dc4:	bd70      	pop	{r4, r5, r6, pc}
   b7dc6:	bf00      	nop
   b7dc8:	000bc498 	.word	0x000bc498
   b7dcc:	000bbea4 	.word	0x000bbea4

000b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dd2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7dd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b7dd6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7dd8:	b190      	cbz	r0, b7e00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b7dda:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7dde:	f001 fd63 	bl	b98a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7de2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7de4:	6803      	ldr	r3, [r0, #0]
   b7de6:	2100      	movs	r1, #0
   b7de8:	689b      	ldr	r3, [r3, #8]
   b7dea:	4798      	blx	r3
    WIRE_WRITE(c);
   b7dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7dee:	6803      	ldr	r3, [r0, #0]
   b7df0:	4629      	mov	r1, r5
   b7df2:	689b      	ldr	r3, [r3, #8]
   b7df4:	4798      	blx	r3
    wire->endTransmission();
   b7df6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b7df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b7dfc:	f001 bd5b 	b.w	b98b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7e00:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7e04:	4601      	mov	r1, r0
   b7e06:	b298      	uxth	r0, r3
   b7e08:	f001 fe97 	bl	b9b3a <digitalWrite>
  if(spi) {
   b7e0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e0e:	b120      	cbz	r0, b7e1a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b7e10:	4629      	mov	r1, r5
}
   b7e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b7e16:	f000 bff3 	b.w	b8e00 <_ZN8SPIClass8transferEh>
   b7e1a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7e1c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7e1e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7e22:	ea05 0107 	and.w	r1, r5, r7
   b7e26:	b280      	uxth	r0, r0
   b7e28:	f001 fe87 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7e2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7e30:	2101      	movs	r1, #1
   b7e32:	b280      	uxth	r0, r0
   b7e34:	f001 fe81 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7e38:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7e3c:	2100      	movs	r1, #0
   b7e3e:	b280      	uxth	r0, r0
   b7e40:	f001 fe7b 	bl	b9b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7e44:	3e01      	subs	r6, #1
   b7e46:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b7e4a:	d1e8      	bne.n	b7e1e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b7e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e4e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7e4e:	b538      	push	{r3, r4, r5, lr}
   b7e50:	4604      	mov	r4, r0
  TRANSACTION_START
   b7e52:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b7e54:	460d      	mov	r5, r1
  TRANSACTION_START
   b7e56:	b180      	cbz	r0, b7e7a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b7e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7e5a:	f001 fd17 	bl	b988c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b7e5e:	2d00      	cmp	r5, #0
   b7e60:	4620      	mov	r0, r4
   b7e62:	bf14      	ite	ne
   b7e64:	21a7      	movne	r1, #167	; 0xa7
   b7e66:	21a6      	moveq	r1, #166	; 0xa6
   b7e68:	f7ff ffb2 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b7e6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7e6e:	b188      	cbz	r0, b7e94 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b7e70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b7e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7e76:	f001 bd09 	b.w	b988c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b7e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e7c:	b118      	cbz	r0, b7e86 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b7e7e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b7e82:	f000 ff4f 	bl	b8d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7e86:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7e8a:	2100      	movs	r1, #0
   b7e8c:	b280      	uxth	r0, r0
   b7e8e:	f001 fe54 	bl	b9b3a <digitalWrite>
   b7e92:	e7e4      	b.n	b7e5e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b7e94:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7e98:	2101      	movs	r1, #1
   b7e9a:	b280      	uxth	r0, r0
   b7e9c:	f001 fe4d 	bl	b9b3a <digitalWrite>
   b7ea0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7ea2:	b118      	cbz	r0, b7eac <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b7ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b7ea8:	f000 bf22 	b.w	b8cf0 <_ZN8SPIClass14endTransactionEv>
}
   b7eac:	bd38      	pop	{r3, r4, r5, pc}

000b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7eae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7eb2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b7eb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b7eb6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b7eb8:	188f      	adds	r7, r1, r2
   b7eba:	b340      	cbz	r0, b7f0e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b7ebc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7ec0:	f001 fcf2 	bl	b98a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7ec4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7ec6:	6803      	ldr	r3, [r0, #0]
   b7ec8:	2100      	movs	r1, #0
   b7eca:	689b      	ldr	r3, [r3, #8]
   b7ecc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b7ece:	2601      	movs	r6, #1
    while(n--) {
   b7ed0:	42af      	cmp	r7, r5
        wire->endTransmission();
   b7ed2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b7ed4:	d017      	beq.n	b7f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b7ed6:	2e1f      	cmp	r6, #31
   b7ed8:	d90c      	bls.n	b7ef4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b7eda:	f001 fcec 	bl	b98b6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b7ede:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7ee4:	f001 fce0 	bl	b98a8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b7ee8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7eea:	6803      	ldr	r3, [r0, #0]
   b7eec:	2100      	movs	r1, #0
   b7eee:	689b      	ldr	r3, [r3, #8]
   b7ef0:	4798      	blx	r3
        bytesOut = 1;
   b7ef2:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7ef6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7efa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b7efc:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b7efe:	689b      	ldr	r3, [r3, #8]
   b7f00:	4798      	blx	r3
      bytesOut++;
   b7f02:	b2f6      	uxtb	r6, r6
    while(n--) {
   b7f04:	e7e4      	b.n	b7ed0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b7f06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b7f0a:	f001 bcd4 	b.w	b98b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b7f0e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b7f12:	4601      	mov	r1, r0
   b7f14:	b298      	uxth	r0, r3
   b7f16:	f001 fe10 	bl	b9b3a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7f1a:	42bd      	cmp	r5, r7
   b7f1c:	d022      	beq.n	b7f64 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b7f1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b7f20:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b7f24:	b118      	cbz	r0, b7f2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b7f26:	4649      	mov	r1, r9
   b7f28:	f000 ff6a 	bl	b8e00 <_ZN8SPIClass8transferEh>
   b7f2c:	e7f5      	b.n	b7f1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b7f2e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7f30:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b7f34:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7f38:	ea09 0108 	and.w	r1, r9, r8
   b7f3c:	b280      	uxth	r0, r0
   b7f3e:	f001 fdfc 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b7f42:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7f46:	2101      	movs	r1, #1
   b7f48:	b280      	uxth	r0, r0
   b7f4a:	f001 fdf6 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7f4e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7f52:	2100      	movs	r1, #0
   b7f54:	b280      	uxth	r0, r0
   b7f56:	f001 fdf0 	bl	b9b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7f5a:	3e01      	subs	r6, #1
   b7f5c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7f60:	d1e8      	bne.n	b7f34 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b7f62:	e7da      	b.n	b7f1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b7f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b7f68:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7f6c:	1dda      	adds	r2, r3, #7
   b7f6e:	bf48      	it	mi
   b7f70:	f103 020e 	addmi.w	r2, r3, #14
   b7f74:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7f78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7f7a:	10d2      	asrs	r2, r2, #3
   b7f7c:	435a      	muls	r2, r3
   b7f7e:	2100      	movs	r1, #0
   b7f80:	f002 bbd4 	b.w	ba72c <memset>

000b7f84 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b7f84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7f88:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7f8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b7f8c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7f90:	4604      	mov	r4, r0
   b7f92:	460f      	mov	r7, r1
   b7f94:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7f96:	b1d3      	cbz	r3, b7fce <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b7f98:	4620      	mov	r0, r4
   b7f9a:	f7ff ffe5 	bl	b7f68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b7f9e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b7fa2:	2a20      	cmp	r2, #32
   b7fa4:	dc25      	bgt.n	b7ff2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7fa6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b7faa:	2320      	movs	r3, #32
   b7fac:	3a20      	subs	r2, #32
   b7fae:	3973      	subs	r1, #115	; 0x73
   b7fb0:	2001      	movs	r0, #1
   b7fb2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b7fb6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b7fba:	2373      	movs	r3, #115	; 0x73
   b7fbc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7fc0:	9300      	str	r3, [sp, #0]
   b7fc2:	f342 024f 	sbfx	r2, r2, #1, #16
   b7fc6:	4b85      	ldr	r3, [pc, #532]	; (b81dc <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b7fc8:	f341 014f 	sbfx	r1, r1, #1, #16
   b7fcc:	e01b      	b.n	b8006 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b7fce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b7fd2:	1dd8      	adds	r0, r3, #7
   b7fd4:	bf48      	it	mi
   b7fd6:	f103 000e 	addmi.w	r0, r3, #14
   b7fda:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b7fde:	10c0      	asrs	r0, r0, #3
   b7fe0:	4358      	muls	r0, r3
   b7fe2:	f000 fde3 	bl	b8bac <malloc>
   b7fe6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b7fe8:	2800      	cmp	r0, #0
   b7fea:	d1d5      	bne.n	b7f98 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b7fec:	b004      	add	sp, #16
   b7fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b7ff2:	2340      	movs	r3, #64	; 0x40
   b7ff4:	f04f 0c01 	mov.w	ip, #1
   b7ff8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b7ffc:	2380      	movs	r3, #128	; 0x80
   b7ffe:	9300      	str	r3, [sp, #0]
   b8000:	2200      	movs	r2, #0
   b8002:	4b77      	ldr	r3, [pc, #476]	; (b81e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b8004:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b8006:	4620      	mov	r0, r4
   b8008:	f7fe fea6 	bl	b6d58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b800c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b800e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b8012:	2800      	cmp	r0, #0
   b8014:	d078      	beq.n	b8108 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8016:	2d00      	cmp	r5, #0
   b8018:	d174      	bne.n	b8104 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b801a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b801e:	2b20      	cmp	r3, #32
   b8020:	bf0c      	ite	eq
   b8022:	253c      	moveq	r5, #60	; 0x3c
   b8024:	253d      	movne	r5, #61	; 0x3d
   b8026:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b802a:	f1b8 0f00 	cmp.w	r8, #0
   b802e:	d001      	beq.n	b8034 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8030:	f001 fc30 	bl	b9894 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b8034:	b1fe      	cbz	r6, b8076 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b8036:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b803a:	2800      	cmp	r0, #0
   b803c:	db1b      	blt.n	b8076 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b803e:	2101      	movs	r1, #1
   b8040:	b280      	uxth	r0, r0
   b8042:	f001 fd69 	bl	b9b18 <pinMode>
    digitalWrite(rstPin, HIGH);
   b8046:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b804a:	2101      	movs	r1, #1
   b804c:	b280      	uxth	r0, r0
   b804e:	f001 fd74 	bl	b9b3a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b8052:	2001      	movs	r0, #1
   b8054:	f001 f9a0 	bl	b9398 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b8058:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b805c:	2100      	movs	r1, #0
   b805e:	b280      	uxth	r0, r0
   b8060:	f001 fd6b 	bl	b9b3a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b8064:	200a      	movs	r0, #10
   b8066:	f001 f997 	bl	b9398 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b806a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b806e:	2101      	movs	r1, #1
   b8070:	b280      	uxth	r0, r0
   b8072:	f001 fd62 	bl	b9b3a <digitalWrite>
  TRANSACTION_START
   b8076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8078:	2800      	cmp	r0, #0
   b807a:	d074      	beq.n	b8166 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b807c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b807e:	f001 fc05 	bl	b988c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b8082:	2204      	movs	r2, #4
   b8084:	4957      	ldr	r1, [pc, #348]	; (b81e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b8086:	4620      	mov	r0, r4
   b8088:	f7ff ff11 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b808c:	8961      	ldrh	r1, [r4, #10]
   b808e:	3901      	subs	r1, #1
   b8090:	b2c9      	uxtb	r1, r1
   b8092:	4620      	mov	r0, r4
   b8094:	f7ff fe9c 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8098:	4953      	ldr	r1, [pc, #332]	; (b81e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b809a:	2204      	movs	r2, #4
   b809c:	4620      	mov	r0, r4
   b809e:	f7ff ff06 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b80a2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b80a6:	2b01      	cmp	r3, #1
   b80a8:	bf0c      	ite	eq
   b80aa:	2110      	moveq	r1, #16
   b80ac:	2114      	movne	r1, #20
   b80ae:	4620      	mov	r0, r4
   b80b0:	f7ff fe8e 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b80b4:	2204      	movs	r2, #4
   b80b6:	494d      	ldr	r1, [pc, #308]	; (b81ec <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b80b8:	4620      	mov	r0, r4
   b80ba:	f7ff fef8 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b80be:	68a3      	ldr	r3, [r4, #8]
   b80c0:	4a4b      	ldr	r2, [pc, #300]	; (b81f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b80c2:	4293      	cmp	r3, r2
   b80c4:	d15c      	bne.n	b8180 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b80c6:	494b      	ldr	r1, [pc, #300]	; (b81f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b80c8:	2204      	movs	r2, #4
   b80ca:	4620      	mov	r0, r4
   b80cc:	f7ff feef 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b80d0:	21d9      	movs	r1, #217	; 0xd9
   b80d2:	4620      	mov	r0, r4
   b80d4:	f7ff fe7c 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b80d8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b80dc:	2b01      	cmp	r3, #1
   b80de:	bf0c      	ite	eq
   b80e0:	2122      	moveq	r1, #34	; 0x22
   b80e2:	21f1      	movne	r1, #241	; 0xf1
   b80e4:	4620      	mov	r0, r4
   b80e6:	f7ff fe73 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b80ea:	4620      	mov	r0, r4
   b80ec:	4942      	ldr	r1, [pc, #264]	; (b81f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b80ee:	2206      	movs	r2, #6
   b80f0:	f7ff fedd 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b80f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b80f6:	2800      	cmp	r0, #0
   b80f8:	d063      	beq.n	b81c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b80fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b80fc:	f001 fbc6 	bl	b988c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b8100:	2001      	movs	r0, #1
   b8102:	e773      	b.n	b7fec <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8104:	b26d      	sxtb	r5, r5
   b8106:	e78e      	b.n	b8026 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8108:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b810c:	2101      	movs	r1, #1
   b810e:	b280      	uxth	r0, r0
   b8110:	f001 fd02 	bl	b9b18 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b8114:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8118:	2101      	movs	r1, #1
   b811a:	b280      	uxth	r0, r0
   b811c:	f001 fcfc 	bl	b9b18 <pinMode>
    SSD1306_DESELECT
   b8120:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8124:	2101      	movs	r1, #1
   b8126:	b280      	uxth	r0, r0
   b8128:	f001 fd07 	bl	b9b3a <digitalWrite>
    if(spi) { // Hardware SPI
   b812c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b812e:	b13d      	cbz	r5, b8140 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b8130:	f1b8 0f00 	cmp.w	r8, #0
   b8134:	f43f af7e 	beq.w	b8034 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b8138:	4628      	mov	r0, r5
   b813a:	f000 fdc5 	bl	b8cc8 <_ZN8SPIClass5beginEv>
   b813e:	e779      	b.n	b8034 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b8140:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8144:	2101      	movs	r1, #1
   b8146:	b280      	uxth	r0, r0
   b8148:	f001 fce6 	bl	b9b18 <pinMode>
      pinMode(clkPin , OUTPUT);
   b814c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b8150:	2101      	movs	r1, #1
   b8152:	b280      	uxth	r0, r0
   b8154:	f001 fce0 	bl	b9b18 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b8158:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b815c:	4629      	mov	r1, r5
   b815e:	b280      	uxth	r0, r0
   b8160:	f001 fceb 	bl	b9b3a <digitalWrite>
   b8164:	e766      	b.n	b8034 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b8166:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8168:	b118      	cbz	r0, b8172 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b816a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b816e:	f000 fdd9 	bl	b8d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8172:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8176:	2100      	movs	r1, #0
   b8178:	b280      	uxth	r0, r0
   b817a:	f001 fcde 	bl	b9b3a <digitalWrite>
   b817e:	e780      	b.n	b8082 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b8180:	4a1e      	ldr	r2, [pc, #120]	; (b81fc <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b8182:	4293      	cmp	r3, r2
   b8184:	d10e      	bne.n	b81a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8186:	491e      	ldr	r1, [pc, #120]	; (b8200 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8188:	2203      	movs	r2, #3
   b818a:	4620      	mov	r0, r4
   b818c:	f7ff fe8f 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b8190:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8194:	2b01      	cmp	r3, #1
   b8196:	bf0c      	ite	eq
   b8198:	219f      	moveq	r1, #159	; 0x9f
   b819a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b819c:	4620      	mov	r0, r4
   b819e:	f7ff fe17 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b81a2:	e795      	b.n	b80d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b81a4:	4a17      	ldr	r2, [pc, #92]	; (b8204 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b81a6:	4293      	cmp	r3, r2
   b81a8:	d192      	bne.n	b80d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b81aa:	4917      	ldr	r1, [pc, #92]	; (b8208 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b81ac:	2203      	movs	r2, #3
   b81ae:	4620      	mov	r0, r4
   b81b0:	f7ff fe7d 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b81b4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b81b8:	2b01      	cmp	r3, #1
   b81ba:	bf0c      	ite	eq
   b81bc:	2110      	moveq	r1, #16
   b81be:	21af      	movne	r1, #175	; 0xaf
   b81c0:	e7ec      	b.n	b819c <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b81c2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b81c6:	2101      	movs	r1, #1
   b81c8:	b280      	uxth	r0, r0
   b81ca:	f001 fcb6 	bl	b9b3a <digitalWrite>
   b81ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b81d0:	2800      	cmp	r0, #0
   b81d2:	d095      	beq.n	b8100 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b81d4:	f000 fd8c 	bl	b8cf0 <_ZN8SPIClass14endTransactionEv>
   b81d8:	e792      	b.n	b8100 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b81da:	bf00      	nop
   b81dc:	000bbeb0 	.word	0x000bbeb0
   b81e0:	000bc090 	.word	0x000bc090
   b81e4:	000bc4f8 	.word	0x000bc4f8
   b81e8:	000bc4fc 	.word	0x000bc4fc
   b81ec:	000bc500 	.word	0x000bc500
   b81f0:	00200080 	.word	0x00200080
   b81f4:	000bc50a 	.word	0x000bc50a
   b81f8:	000bc504 	.word	0x000bc504
   b81fc:	00400080 	.word	0x00400080
   b8200:	000bc50e 	.word	0x000bc50e
   b8204:	00100060 	.word	0x00100060
   b8208:	000bc511 	.word	0x000bc511

000b820c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b820c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b820e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8210:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b8214:	db3d      	blt.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8216:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b821a:	4294      	cmp	r4, r2
   b821c:	dd39      	ble.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b821e:	2900      	cmp	r1, #0
      w += x;
   b8220:	bfbe      	ittt	lt
   b8222:	185b      	addlt	r3, r3, r1
   b8224:	b21b      	sxthlt	r3, r3
      x  = 0;
   b8226:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b8228:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b822c:	18ce      	adds	r6, r1, r3
   b822e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b8230:	bfc4      	itt	gt
   b8232:	1a63      	subgt	r3, r4, r1
   b8234:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b8236:	2b00      	cmp	r3, #0
   b8238:	dd2b      	ble.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b823a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b823c:	10d6      	asrs	r6, r2, #3
   b823e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b8242:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b8244:	f002 0007 	and.w	r0, r2, #7
   b8248:	2201      	movs	r2, #1
   b824a:	4082      	lsls	r2, r0
      switch(color) {
   b824c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b824e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b8250:	d016      	beq.n	b8280 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b8252:	2d02      	cmp	r5, #2
   b8254:	d00b      	beq.n	b826e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b8256:	b9e5      	cbnz	r5, b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b8258:	43d2      	mvns	r2, r2
   b825a:	b2d2      	uxtb	r2, r2
   b825c:	440b      	add	r3, r1
   b825e:	4299      	cmp	r1, r3
   b8260:	d017      	beq.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8262:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8266:	4010      	ands	r0, r2
   b8268:	f801 0c01 	strb.w	r0, [r1, #-1]
   b826c:	e7f7      	b.n	b825e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b826e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b8270:	4299      	cmp	r1, r3
   b8272:	d00e      	beq.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8274:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8278:	4050      	eors	r0, r2
   b827a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b827e:	e7f7      	b.n	b8270 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b8280:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b8282:	4299      	cmp	r1, r3
   b8284:	d005      	beq.n	b8292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8286:	f811 0b01 	ldrb.w	r0, [r1], #1
   b828a:	4310      	orrs	r0, r2
   b828c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b8290:	e7f7      	b.n	b8282 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b8292:	bd70      	pop	{r4, r5, r6, pc}

000b8294 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8294:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8296:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8298:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b829c:	db76      	blt.n	b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b829e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b82a2:	42b1      	cmp	r1, r6
   b82a4:	da72      	bge.n	b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b82a6:	2a00      	cmp	r2, #0
      __h += __y;
   b82a8:	bfbe      	ittt	lt
   b82aa:	189b      	addlt	r3, r3, r2
   b82ac:	b21b      	sxthlt	r3, r3
      __y = 0;
   b82ae:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b82b0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b82b4:	18d7      	adds	r7, r2, r3
   b82b6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b82b8:	bfc4      	itt	gt
   b82ba:	1aa3      	subgt	r3, r4, r2
   b82bc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b82be:	2b00      	cmp	r3, #0
   b82c0:	dd64      	ble.n	b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b82c2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b82c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b82c8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b82cc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b82d0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b82d2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b82d6:	d023      	beq.n	b8320 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b82d8:	f1c2 0208 	rsb	r2, r2, #8
   b82dc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b82de:	492d      	ldr	r1, [pc, #180]	; (b8394 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b82e0:	4293      	cmp	r3, r2
   b82e2:	bf3c      	itt	cc
   b82e4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b82e8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b82ec:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b82ee:	bf3c      	itt	cc
   b82f0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b82f4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b82f8:	2d01      	cmp	r5, #1
   b82fa:	d007      	beq.n	b830c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b82fc:	2d02      	cmp	r5, #2
   b82fe:	d02e      	beq.n	b835e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b8300:	b94d      	cbnz	r5, b8316 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b8302:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8306:	ea2c 0101 	bic.w	r1, ip, r1
   b830a:	e003      	b.n	b8314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b830c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8310:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b8314:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b8316:	4293      	cmp	r3, r2
   b8318:	d338      	bcc.n	b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b831a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b831e:	440c      	add	r4, r1
        h -= mod;
   b8320:	1a9a      	subs	r2, r3, r2
   b8322:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b8324:	2a07      	cmp	r2, #7
   b8326:	d90e      	bls.n	b8346 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b8328:	2d02      	cmp	r5, #2
   b832a:	d11d      	bne.n	b8368 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b832c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b832e:	7821      	ldrb	r1, [r4, #0]
   b8330:	43c9      	mvns	r1, r1
   b8332:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b8334:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b8336:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b833a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b833c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b833e:	440c      	add	r4, r1
            } while(h >= 8);
   b8340:	d8f5      	bhi.n	b832e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b8342:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b8346:	b30a      	cbz	r2, b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b8348:	4b13      	ldr	r3, [pc, #76]	; (b8398 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b834a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b834c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b834e:	d01a      	beq.n	b8386 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b8350:	2d02      	cmp	r5, #2
   b8352:	d01c      	beq.n	b838e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b8354:	b9d5      	cbnz	r5, b838c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b8356:	7822      	ldrb	r2, [r4, #0]
   b8358:	ea22 0303 	bic.w	r3, r2, r3
   b835c:	e015      	b.n	b838a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b835e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8362:	ea81 010c 	eor.w	r1, r1, ip
   b8366:	e7d5      	b.n	b8314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b8368:	1e29      	subs	r1, r5, #0
   b836a:	bf18      	it	ne
   b836c:	2101      	movne	r1, #1
   b836e:	4249      	negs	r1, r1
   b8370:	b2c9      	uxtb	r1, r1
   b8372:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8374:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8376:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8378:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b837c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b837e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8380:	4434      	add	r4, r6
            } while(h >= 8);
   b8382:	d8f7      	bhi.n	b8374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8384:	e7dd      	b.n	b8342 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8386:	7822      	ldrb	r2, [r4, #0]
   b8388:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b838a:	7023      	strb	r3, [r4, #0]
}
   b838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b838e:	7822      	ldrb	r2, [r4, #0]
   b8390:	4053      	eors	r3, r2
   b8392:	e7fa      	b.n	b838a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8394:	000bc4e8 	.word	0x000bc4e8
   b8398:	000bc4f0 	.word	0x000bc4f0

000b839c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b839c:	b470      	push	{r4, r5, r6}
   b839e:	4614      	mov	r4, r2
  switch(rotation) {
   b83a0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b83a2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b83a6:	2a02      	cmp	r2, #2
   b83a8:	d00d      	beq.n	b83c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b83aa:	2a03      	cmp	r2, #3
   b83ac:	d018      	beq.n	b83e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b83ae:	2a01      	cmp	r2, #1
   b83b0:	d111      	bne.n	b83d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b83b2:	8902      	ldrh	r2, [r0, #8]
   b83b4:	43e4      	mvns	r4, r4
   b83b6:	4414      	add	r4, r2
   b83b8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b83ba:	9603      	str	r6, [sp, #12]
   b83bc:	460a      	mov	r2, r1
   b83be:	4621      	mov	r1, r4
}
   b83c0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b83c2:	f7ff bf67 	b.w	b8294 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b83c6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b83c8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b83ca:	43e4      	mvns	r4, r4
    x -= (w-1);
   b83cc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b83ce:	4414      	add	r4, r2
    x -= (w-1);
   b83d0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b83d2:	b224      	sxth	r4, r4
    x -= (w-1);
   b83d4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b83d6:	9603      	str	r6, [sp, #12]
   b83d8:	4622      	mov	r2, r4
}
   b83da:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b83dc:	f7ff bf16 	b.w	b820c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b83e0:	8945      	ldrh	r5, [r0, #10]
   b83e2:	4419      	add	r1, r3
   b83e4:	1a69      	subs	r1, r5, r1
   b83e6:	b209      	sxth	r1, r1
    break;
   b83e8:	e7e7      	b.n	b83ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b83ea <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b83ea:	b430      	push	{r4, r5}
   b83ec:	4614      	mov	r4, r2
  switch(rotation) {
   b83ee:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b83f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b83f4:	2a02      	cmp	r2, #2
   b83f6:	d00d      	beq.n	b8414 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b83f8:	2a03      	cmp	r2, #3
   b83fa:	d018      	beq.n	b842e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b83fc:	2a01      	cmp	r2, #1
   b83fe:	d111      	bne.n	b8424 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b8400:	18e2      	adds	r2, r4, r3
   b8402:	8904      	ldrh	r4, [r0, #8]
   b8404:	1aa4      	subs	r4, r4, r2
   b8406:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8408:	9502      	str	r5, [sp, #8]
   b840a:	460a      	mov	r2, r1
   b840c:	4621      	mov	r1, r4
}
   b840e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8410:	f7ff befc 	b.w	b820c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b8414:	8902      	ldrh	r2, [r0, #8]
   b8416:	43c9      	mvns	r1, r1
   b8418:	4411      	add	r1, r2
    y -= (h-1);
   b841a:	18e2      	adds	r2, r4, r3
   b841c:	8944      	ldrh	r4, [r0, #10]
   b841e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b8420:	b209      	sxth	r1, r1
    y -= (h-1);
   b8422:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b8424:	9502      	str	r5, [sp, #8]
   b8426:	4622      	mov	r2, r4
}
   b8428:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b842a:	f7ff bf33 	b.w	b8294 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b842e:	8942      	ldrh	r2, [r0, #10]
   b8430:	43c9      	mvns	r1, r1
   b8432:	4411      	add	r1, r2
   b8434:	b209      	sxth	r1, r1
    break;
   b8436:	e7e7      	b.n	b8408 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b8438 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b8438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b843c:	4604      	mov	r4, r0
  TRANSACTION_START
   b843e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8440:	2800      	cmp	r0, #0
   b8442:	d042      	beq.n	b84ca <_ZN16Adafruit_SSD13067displayEv+0x92>
   b8444:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b8446:	f001 fa21 	bl	b988c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b844a:	4947      	ldr	r1, [pc, #284]	; (b8568 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b844c:	2205      	movs	r2, #5
   b844e:	4620      	mov	r0, r4
   b8450:	f7ff fd2d 	bl	b7eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b8454:	8921      	ldrh	r1, [r4, #8]
   b8456:	3901      	subs	r1, #1
   b8458:	4620      	mov	r0, r4
   b845a:	b2c9      	uxtb	r1, r1
   b845c:	f7ff fcb8 	bl	b7dd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8460:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b8464:	1dde      	adds	r6, r3, #7
   b8466:	bf48      	it	mi
   b8468:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b846c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b8470:	8923      	ldrh	r3, [r4, #8]
   b8472:	10f6      	asrs	r6, r6, #3
   b8474:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8478:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b847c:	2800      	cmp	r0, #0
   b847e:	d03a      	beq.n	b84f6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b8480:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8484:	f001 fa10 	bl	b98a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b848a:	6803      	ldr	r3, [r0, #0]
   b848c:	2140      	movs	r1, #64	; 0x40
   b848e:	689b      	ldr	r3, [r3, #8]
   b8490:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b8492:	2701      	movs	r7, #1
    while(count--) {
   b8494:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8496:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8498:	d024      	beq.n	b84e4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b849a:	2f1f      	cmp	r7, #31
   b849c:	d90c      	bls.n	b84b8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b849e:	f001 fa0a 	bl	b98b6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b84a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b84a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b84a8:	f001 f9fe 	bl	b98a8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b84ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b84ae:	6803      	ldr	r3, [r0, #0]
   b84b0:	2140      	movs	r1, #64	; 0x40
   b84b2:	689b      	ldr	r3, [r3, #8]
   b84b4:	4798      	blx	r3
        bytesOut = 1;
   b84b6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b84b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b84ba:	f815 1b01 	ldrb.w	r1, [r5], #1
   b84be:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b84c0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b84c2:	689b      	ldr	r3, [r3, #8]
   b84c4:	4798      	blx	r3
      bytesOut++;
   b84c6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b84c8:	e7e4      	b.n	b8494 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b84ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b84cc:	b118      	cbz	r0, b84d6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b84ce:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b84d2:	f000 fc27 	bl	b8d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b84d6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b84da:	2100      	movs	r1, #0
   b84dc:	b280      	uxth	r0, r0
   b84de:	f001 fb2c 	bl	b9b3a <digitalWrite>
   b84e2:	e7b2      	b.n	b844a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b84e4:	f001 f9e7 	bl	b98b6 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b84e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b84ea:	b378      	cbz	r0, b854c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b84ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b84ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b84f2:	f001 b9cb 	b.w	b988c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b84f6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b84fa:	2101      	movs	r1, #1
   b84fc:	b280      	uxth	r0, r0
   b84fe:	f001 fb1c 	bl	b9b3a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b8502:	42ae      	cmp	r6, r5
   b8504:	d0f0      	beq.n	b84e8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8506:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8508:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b850c:	b118      	cbz	r0, b8516 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b850e:	4649      	mov	r1, r9
   b8510:	f000 fc76 	bl	b8e00 <_ZN8SPIClass8transferEh>
   b8514:	e7f5      	b.n	b8502 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b8516:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8518:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b851c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b8520:	ea09 0108 	and.w	r1, r9, r8
   b8524:	b280      	uxth	r0, r0
   b8526:	f001 fb08 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b852a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b852e:	2101      	movs	r1, #1
   b8530:	b280      	uxth	r0, r0
   b8532:	f001 fb02 	bl	b9b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b8536:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b853a:	2100      	movs	r1, #0
   b853c:	b280      	uxth	r0, r0
   b853e:	f001 fafc 	bl	b9b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b8542:	3f01      	subs	r7, #1
   b8544:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b8548:	d1e8      	bne.n	b851c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b854a:	e7da      	b.n	b8502 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b854c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8550:	2101      	movs	r1, #1
   b8552:	b280      	uxth	r0, r0
   b8554:	f001 faf1 	bl	b9b3a <digitalWrite>
   b8558:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b855a:	b118      	cbz	r0, b8564 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b855c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b8560:	f000 bbc6 	b.w	b8cf0 <_ZN8SPIClass14endTransactionEv>
}
   b8564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8568:	000bc514 	.word	0x000bc514

000b856c <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b856c:	b510      	push	{r4, lr}
   b856e:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b8570:	7001      	strb	r1, [r0, #0]
   b8572:	7042      	strb	r2, [r0, #1]
   b8574:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b8576:	2101      	movs	r1, #1
   b8578:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b857c:	f002 f8c0 	bl	ba700 <calloc>
   b8580:	6060      	str	r0, [r4, #4]
}
   b8582:	4620      	mov	r0, r4
   b8584:	bd10      	pop	{r4, pc}

000b8586 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b8586:	b510      	push	{r4, lr}
   b8588:	4604      	mov	r4, r0
{
    free(_led_state);
   b858a:	6840      	ldr	r0, [r0, #4]
   b858c:	f000 fb16 	bl	b8bbc <free>
}
   b8590:	4620      	mov	r0, r4
   b8592:	bd10      	pop	{r4, pc}

000b8594 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b8594:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b8596:	2100      	movs	r1, #0
{
   b8598:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b859a:	7800      	ldrb	r0, [r0, #0]
   b859c:	f001 facd 	bl	b9b3a <digitalWrite>
   b85a0:	2014      	movs	r0, #20
   b85a2:	f000 f90f 	bl	b87c4 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b85a6:	7820      	ldrb	r0, [r4, #0]
   b85a8:	2101      	movs	r1, #1
   b85aa:	f001 fac6 	bl	b9b3a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b85ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b85b2:	2014      	movs	r0, #20
   b85b4:	f000 b906 	b.w	b87c4 <HAL_Delay_Microseconds>

000b85b8 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b85b8:	b570      	push	{r4, r5, r6, lr}
   b85ba:	4606      	mov	r6, r0
   b85bc:	460c      	mov	r4, r1
   b85be:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b85c0:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b85c2:	bf4c      	ite	mi
   b85c4:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b85c6:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b85c8:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b85ca:	f001 fab6 	bl	b9b3a <digitalWrite>
    for (byte i=0; i<8; i++)
   b85ce:	3d01      	subs	r5, #1
        clk();
   b85d0:	4630      	mov	r0, r6
   b85d2:	f7ff ffdf 	bl	b8594 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b85d6:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b85d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b85dc:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b85de:	d1ef      	bne.n	b85c0 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b85e0:	bd70      	pop	{r4, r5, r6, pc}

000b85e2 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b85e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b85e4:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b85e8:	461e      	mov	r6, r3
   b85ea:	460c      	mov	r4, r1
   b85ec:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b85ee:	bf14      	ite	ne
   b85f0:	21c0      	movne	r1, #192	; 0xc0
   b85f2:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b85f4:	0673      	lsls	r3, r6, #25
   b85f6:	bf58      	it	pl
   b85f8:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b85fc:	062a      	lsls	r2, r5, #24
   b85fe:	bf58      	it	pl
   b8600:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b8604:	066b      	lsls	r3, r5, #25
   b8606:	bf58      	it	pl
   b8608:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b860c:	0622      	lsls	r2, r4, #24
   b860e:	bf58      	it	pl
   b8610:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b8614:	0663      	lsls	r3, r4, #25
   b8616:	bf58      	it	pl
   b8618:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b861c:	9001      	str	r0, [sp, #4]
   b861e:	f7ff ffcb 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b8622:	9801      	ldr	r0, [sp, #4]
   b8624:	4631      	mov	r1, r6
   b8626:	f7ff ffc7 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b862a:	9801      	ldr	r0, [sp, #4]
   b862c:	4629      	mov	r1, r5
   b862e:	f7ff ffc3 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b8632:	9801      	ldr	r0, [sp, #4]
   b8634:	4621      	mov	r1, r4
}
   b8636:	b002      	add	sp, #8
   b8638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b863c:	f7ff bfbc 	b.w	b85b8 <_ZN12ChainableLED8sendByteEh>

000b8640 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b8640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8644:	4604      	mov	r4, r0
   b8646:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b8648:	2100      	movs	r1, #0
{
   b864a:	4690      	mov	r8, r2
   b864c:	4699      	mov	r9, r3
   b864e:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b8652:	f7ff ffb1 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8656:	2100      	movs	r1, #0
   b8658:	4620      	mov	r0, r4
   b865a:	f7ff ffad 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b865e:	2100      	movs	r1, #0
   b8660:	4620      	mov	r0, r4
   b8662:	f7ff ffa9 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b8666:	2100      	movs	r1, #0
   b8668:	4620      	mov	r0, r4
   b866a:	f7ff ffa5 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
   b866e:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b8670:	78a3      	ldrb	r3, [r4, #2]
   b8672:	b2f5      	uxtb	r5, r6
   b8674:	42ab      	cmp	r3, r5
   b8676:	d919      	bls.n	b86ac <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b8678:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b867c:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b867e:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b8682:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b8686:	d108      	bne.n	b869a <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b8688:	6861      	ldr	r1, [r4, #4]
   b868a:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b868e:	6861      	ldr	r1, [r4, #4]
   b8690:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b8694:	6861      	ldr	r1, [r4, #4]
   b8696:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b869a:	6861      	ldr	r1, [r4, #4]
   b869c:	5ccb      	ldrb	r3, [r1, r3]
   b869e:	5c8a      	ldrb	r2, [r1, r2]
   b86a0:	5c09      	ldrb	r1, [r1, r0]
   b86a2:	4620      	mov	r0, r4
   b86a4:	f7ff ff9d 	bl	b85e2 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b86a8:	3601      	adds	r6, #1
   b86aa:	e7e1      	b.n	b8670 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b86ac:	4620      	mov	r0, r4
   b86ae:	2100      	movs	r1, #0
   b86b0:	f7ff ff82 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b86b4:	4620      	mov	r0, r4
   b86b6:	2100      	movs	r1, #0
   b86b8:	f7ff ff7e 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b86bc:	4620      	mov	r0, r4
   b86be:	2100      	movs	r1, #0
   b86c0:	f7ff ff7a 	bl	b85b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b86c4:	4620      	mov	r0, r4
   b86c6:	2100      	movs	r1, #0
}
   b86c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b86cc:	f7ff bf74 	b.w	b85b8 <_ZN12ChainableLED8sendByteEh>

000b86d0 <_ZN12ChainableLED4initEv>:
{
   b86d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86d2:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b86d4:	2101      	movs	r1, #1
   b86d6:	7800      	ldrb	r0, [r0, #0]
   b86d8:	f001 fa1e 	bl	b9b18 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b86dc:	7860      	ldrb	r0, [r4, #1]
   b86de:	2101      	movs	r1, #1
   b86e0:	f001 fa1a 	bl	b9b18 <pinMode>
   b86e4:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b86e6:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b86e8:	78a3      	ldrb	r3, [r4, #2]
   b86ea:	b2e9      	uxtb	r1, r5
   b86ec:	428b      	cmp	r3, r1
   b86ee:	d907      	bls.n	b8700 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b86f0:	2300      	movs	r3, #0
   b86f2:	9600      	str	r6, [sp, #0]
   b86f4:	461a      	mov	r2, r3
   b86f6:	4620      	mov	r0, r4
   b86f8:	f7ff ffa2 	bl	b8640 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b86fc:	3501      	adds	r5, #1
   b86fe:	e7f3      	b.n	b86e8 <_ZN12ChainableLED4initEv+0x18>
}
   b8700:	b002      	add	sp, #8
   b8702:	bd70      	pop	{r4, r5, r6, pc}

000b8704 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8704:	b508      	push	{r3, lr}
   b8706:	4b02      	ldr	r3, [pc, #8]	; (b8710 <netdb_freeaddrinfo+0xc>)
   b8708:	681b      	ldr	r3, [r3, #0]
   b870a:	689b      	ldr	r3, [r3, #8]
   b870c:	9301      	str	r3, [sp, #4]
   b870e:	bd08      	pop	{r3, pc}
   b8710:	00030268 	.word	0x00030268

000b8714 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8714:	b508      	push	{r3, lr}
   b8716:	4b02      	ldr	r3, [pc, #8]	; (b8720 <netdb_getaddrinfo+0xc>)
   b8718:	681b      	ldr	r3, [r3, #0]
   b871a:	68db      	ldr	r3, [r3, #12]
   b871c:	9301      	str	r3, [sp, #4]
   b871e:	bd08      	pop	{r3, pc}
   b8720:	00030268 	.word	0x00030268

000b8724 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8724:	b508      	push	{r3, lr}
   b8726:	4b02      	ldr	r3, [pc, #8]	; (b8730 <HAL_Validate_Pin_Function+0xc>)
   b8728:	681b      	ldr	r3, [r3, #0]
   b872a:	685b      	ldr	r3, [r3, #4]
   b872c:	9301      	str	r3, [sp, #4]
   b872e:	bd08      	pop	{r3, pc}
   b8730:	0003022c 	.word	0x0003022c

000b8734 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8734:	b508      	push	{r3, lr}
   b8736:	4b02      	ldr	r3, [pc, #8]	; (b8740 <HAL_Pin_Mode+0xc>)
   b8738:	681b      	ldr	r3, [r3, #0]
   b873a:	689b      	ldr	r3, [r3, #8]
   b873c:	9301      	str	r3, [sp, #4]
   b873e:	bd08      	pop	{r3, pc}
   b8740:	0003022c 	.word	0x0003022c

000b8744 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8744:	b508      	push	{r3, lr}
   b8746:	4b02      	ldr	r3, [pc, #8]	; (b8750 <HAL_Get_Pin_Mode+0xc>)
   b8748:	681b      	ldr	r3, [r3, #0]
   b874a:	68db      	ldr	r3, [r3, #12]
   b874c:	9301      	str	r3, [sp, #4]
   b874e:	bd08      	pop	{r3, pc}
   b8750:	0003022c 	.word	0x0003022c

000b8754 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8754:	b508      	push	{r3, lr}
   b8756:	4b02      	ldr	r3, [pc, #8]	; (b8760 <HAL_GPIO_Write+0xc>)
   b8758:	681b      	ldr	r3, [r3, #0]
   b875a:	691b      	ldr	r3, [r3, #16]
   b875c:	9301      	str	r3, [sp, #4]
   b875e:	bd08      	pop	{r3, pc}
   b8760:	0003022c 	.word	0x0003022c

000b8764 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8764:	b508      	push	{r3, lr}
   b8766:	4b02      	ldr	r3, [pc, #8]	; (b8770 <HAL_GPIO_Read+0xc>)
   b8768:	681b      	ldr	r3, [r3, #0]
   b876a:	695b      	ldr	r3, [r3, #20]
   b876c:	9301      	str	r3, [sp, #4]
   b876e:	bd08      	pop	{r3, pc}
   b8770:	0003022c 	.word	0x0003022c

000b8774 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b8774:	b508      	push	{r3, lr}
   b8776:	4b02      	ldr	r3, [pc, #8]	; (b8780 <HAL_Interrupts_Enable_All+0xc>)
   b8778:	681b      	ldr	r3, [r3, #0]
   b877a:	6a1b      	ldr	r3, [r3, #32]
   b877c:	9301      	str	r3, [sp, #4]
   b877e:	bd08      	pop	{r3, pc}
   b8780:	0003022c 	.word	0x0003022c

000b8784 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b8784:	b508      	push	{r3, lr}
   b8786:	4b02      	ldr	r3, [pc, #8]	; (b8790 <HAL_Interrupts_Disable_All+0xc>)
   b8788:	681b      	ldr	r3, [r3, #0]
   b878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b878c:	9301      	str	r3, [sp, #4]
   b878e:	bd08      	pop	{r3, pc}
   b8790:	0003022c 	.word	0x0003022c

000b8794 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8794:	b508      	push	{r3, lr}
   b8796:	4b02      	ldr	r3, [pc, #8]	; (b87a0 <hal_adc_read+0xc>)
   b8798:	681b      	ldr	r3, [r3, #0]
   b879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b879c:	9301      	str	r3, [sp, #4]
   b879e:	bd08      	pop	{r3, pc}
   b87a0:	0003022c 	.word	0x0003022c

000b87a4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b87a4:	b508      	push	{r3, lr}
   b87a6:	4b02      	ldr	r3, [pc, #8]	; (b87b0 <HAL_Pulse_In+0xc>)
   b87a8:	681b      	ldr	r3, [r3, #0]
   b87aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b87ac:	9301      	str	r3, [sp, #4]
   b87ae:	bd08      	pop	{r3, pc}
   b87b0:	0003022c 	.word	0x0003022c

000b87b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b87b4:	b508      	push	{r3, lr}
   b87b6:	4b02      	ldr	r3, [pc, #8]	; (b87c0 <HAL_RNG_GetRandomNumber+0xc>)
   b87b8:	681b      	ldr	r3, [r3, #0]
   b87ba:	685b      	ldr	r3, [r3, #4]
   b87bc:	9301      	str	r3, [sp, #4]
   b87be:	bd08      	pop	{r3, pc}
   b87c0:	00030218 	.word	0x00030218

000b87c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b87c4:	b508      	push	{r3, lr}
   b87c6:	4b02      	ldr	r3, [pc, #8]	; (b87d0 <HAL_Delay_Microseconds+0xc>)
   b87c8:	681b      	ldr	r3, [r3, #0]
   b87ca:	68db      	ldr	r3, [r3, #12]
   b87cc:	9301      	str	r3, [sp, #4]
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	00030218 	.word	0x00030218

000b87d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b87d4:	b508      	push	{r3, lr}
   b87d6:	4b02      	ldr	r3, [pc, #8]	; (b87e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b87d8:	681b      	ldr	r3, [r3, #0]
   b87da:	695b      	ldr	r3, [r3, #20]
   b87dc:	9301      	str	r3, [sp, #4]
   b87de:	bd08      	pop	{r3, pc}
   b87e0:	00030218 	.word	0x00030218

000b87e4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b87e4:	b508      	push	{r3, lr}
   b87e6:	4b02      	ldr	r3, [pc, #8]	; (b87f0 <HAL_EEPROM_Init+0xc>)
   b87e8:	681b      	ldr	r3, [r3, #0]
   b87ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b87ec:	9301      	str	r3, [sp, #4]
   b87ee:	bd08      	pop	{r3, pc}
   b87f0:	00030218 	.word	0x00030218

000b87f4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b87f4:	b508      	push	{r3, lr}
   b87f6:	4b02      	ldr	r3, [pc, #8]	; (b8800 <HAL_EEPROM_Read+0xc>)
   b87f8:	681b      	ldr	r3, [r3, #0]
   b87fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87fc:	9301      	str	r3, [sp, #4]
   b87fe:	bd08      	pop	{r3, pc}
   b8800:	00030218 	.word	0x00030218

000b8804 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b8804:	b508      	push	{r3, lr}
   b8806:	4b02      	ldr	r3, [pc, #8]	; (b8810 <HAL_EEPROM_Put+0xc>)
   b8808:	681b      	ldr	r3, [r3, #0]
   b880a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b880c:	9301      	str	r3, [sp, #4]
   b880e:	bd08      	pop	{r3, pc}
   b8810:	00030218 	.word	0x00030218

000b8814 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8814:	b508      	push	{r3, lr}
   b8816:	4b02      	ldr	r3, [pc, #8]	; (b8820 <os_mutex_recursive_create+0xc>)
   b8818:	681b      	ldr	r3, [r3, #0]
   b881a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b881c:	9301      	str	r3, [sp, #4]
   b881e:	bd08      	pop	{r3, pc}
   b8820:	00030248 	.word	0x00030248

000b8824 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8824:	b508      	push	{r3, lr}
   b8826:	4b02      	ldr	r3, [pc, #8]	; (b8830 <inet_inet_ntop+0xc>)
   b8828:	681b      	ldr	r3, [r3, #0]
   b882a:	695b      	ldr	r3, [r3, #20]
   b882c:	9301      	str	r3, [sp, #4]
   b882e:	bd08      	pop	{r3, pc}
   b8830:	00030264 	.word	0x00030264

000b8834 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8834:	b508      	push	{r3, lr}
   b8836:	4b02      	ldr	r3, [pc, #8]	; (b8840 <hal_usart_write+0xc>)
   b8838:	681b      	ldr	r3, [r3, #0]
   b883a:	68db      	ldr	r3, [r3, #12]
   b883c:	9301      	str	r3, [sp, #4]
   b883e:	bd08      	pop	{r3, pc}
   b8840:	0003023c 	.word	0x0003023c

000b8844 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8844:	b508      	push	{r3, lr}
   b8846:	4b02      	ldr	r3, [pc, #8]	; (b8850 <hal_usart_available+0xc>)
   b8848:	681b      	ldr	r3, [r3, #0]
   b884a:	691b      	ldr	r3, [r3, #16]
   b884c:	9301      	str	r3, [sp, #4]
   b884e:	bd08      	pop	{r3, pc}
   b8850:	0003023c 	.word	0x0003023c

000b8854 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8854:	b508      	push	{r3, lr}
   b8856:	4b02      	ldr	r3, [pc, #8]	; (b8860 <hal_usart_read+0xc>)
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	695b      	ldr	r3, [r3, #20]
   b885c:	9301      	str	r3, [sp, #4]
   b885e:	bd08      	pop	{r3, pc}
   b8860:	0003023c 	.word	0x0003023c

000b8864 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8864:	b508      	push	{r3, lr}
   b8866:	4b02      	ldr	r3, [pc, #8]	; (b8870 <hal_usart_peek+0xc>)
   b8868:	681b      	ldr	r3, [r3, #0]
   b886a:	699b      	ldr	r3, [r3, #24]
   b886c:	9301      	str	r3, [sp, #4]
   b886e:	bd08      	pop	{r3, pc}
   b8870:	0003023c 	.word	0x0003023c

000b8874 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8874:	b508      	push	{r3, lr}
   b8876:	4b02      	ldr	r3, [pc, #8]	; (b8880 <hal_usart_flush+0xc>)
   b8878:	681b      	ldr	r3, [r3, #0]
   b887a:	69db      	ldr	r3, [r3, #28]
   b887c:	9301      	str	r3, [sp, #4]
   b887e:	bd08      	pop	{r3, pc}
   b8880:	0003023c 	.word	0x0003023c

000b8884 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8884:	b508      	push	{r3, lr}
   b8886:	4b02      	ldr	r3, [pc, #8]	; (b8890 <hal_usart_is_enabled+0xc>)
   b8888:	681b      	ldr	r3, [r3, #0]
   b888a:	6a1b      	ldr	r3, [r3, #32]
   b888c:	9301      	str	r3, [sp, #4]
   b888e:	bd08      	pop	{r3, pc}
   b8890:	0003023c 	.word	0x0003023c

000b8894 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8894:	b508      	push	{r3, lr}
   b8896:	4b02      	ldr	r3, [pc, #8]	; (b88a0 <hal_usart_available_data_for_write+0xc>)
   b8898:	681b      	ldr	r3, [r3, #0]
   b889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b889c:	9301      	str	r3, [sp, #4]
   b889e:	bd08      	pop	{r3, pc}
   b88a0:	0003023c 	.word	0x0003023c

000b88a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b88a4:	b508      	push	{r3, lr}
   b88a6:	4b02      	ldr	r3, [pc, #8]	; (b88b0 <hal_usart_init_ex+0xc>)
   b88a8:	681b      	ldr	r3, [r3, #0]
   b88aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88ac:	9301      	str	r3, [sp, #4]
   b88ae:	bd08      	pop	{r3, pc}
   b88b0:	0003023c 	.word	0x0003023c

000b88b4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b88b4:	b508      	push	{r3, lr}
   b88b6:	4b02      	ldr	r3, [pc, #8]	; (b88c0 <hal_i2c_set_speed+0xc>)
   b88b8:	681b      	ldr	r3, [r3, #0]
   b88ba:	681b      	ldr	r3, [r3, #0]
   b88bc:	9301      	str	r3, [sp, #4]
   b88be:	bd08      	pop	{r3, pc}
   b88c0:	00030228 	.word	0x00030228

000b88c4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b88c4:	b508      	push	{r3, lr}
   b88c6:	4b02      	ldr	r3, [pc, #8]	; (b88d0 <hal_i2c_begin+0xc>)
   b88c8:	681b      	ldr	r3, [r3, #0]
   b88ca:	68db      	ldr	r3, [r3, #12]
   b88cc:	9301      	str	r3, [sp, #4]
   b88ce:	bd08      	pop	{r3, pc}
   b88d0:	00030228 	.word	0x00030228

000b88d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b88d4:	b508      	push	{r3, lr}
   b88d6:	4b02      	ldr	r3, [pc, #8]	; (b88e0 <hal_i2c_begin_transmission+0xc>)
   b88d8:	681b      	ldr	r3, [r3, #0]
   b88da:	699b      	ldr	r3, [r3, #24]
   b88dc:	9301      	str	r3, [sp, #4]
   b88de:	bd08      	pop	{r3, pc}
   b88e0:	00030228 	.word	0x00030228

000b88e4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b88e4:	b508      	push	{r3, lr}
   b88e6:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <hal_i2c_end_transmission+0xc>)
   b88e8:	681b      	ldr	r3, [r3, #0]
   b88ea:	69db      	ldr	r3, [r3, #28]
   b88ec:	9301      	str	r3, [sp, #4]
   b88ee:	bd08      	pop	{r3, pc}
   b88f0:	00030228 	.word	0x00030228

000b88f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b88f4:	b508      	push	{r3, lr}
   b88f6:	4b02      	ldr	r3, [pc, #8]	; (b8900 <hal_i2c_write+0xc>)
   b88f8:	681b      	ldr	r3, [r3, #0]
   b88fa:	6a1b      	ldr	r3, [r3, #32]
   b88fc:	9301      	str	r3, [sp, #4]
   b88fe:	bd08      	pop	{r3, pc}
   b8900:	00030228 	.word	0x00030228

000b8904 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8904:	b508      	push	{r3, lr}
   b8906:	4b02      	ldr	r3, [pc, #8]	; (b8910 <hal_i2c_available+0xc>)
   b8908:	681b      	ldr	r3, [r3, #0]
   b890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b890c:	9301      	str	r3, [sp, #4]
   b890e:	bd08      	pop	{r3, pc}
   b8910:	00030228 	.word	0x00030228

000b8914 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8914:	b508      	push	{r3, lr}
   b8916:	4b02      	ldr	r3, [pc, #8]	; (b8920 <hal_i2c_read+0xc>)
   b8918:	681b      	ldr	r3, [r3, #0]
   b891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b891c:	9301      	str	r3, [sp, #4]
   b891e:	bd08      	pop	{r3, pc}
   b8920:	00030228 	.word	0x00030228

000b8924 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8924:	b508      	push	{r3, lr}
   b8926:	4b02      	ldr	r3, [pc, #8]	; (b8930 <hal_i2c_peek+0xc>)
   b8928:	681b      	ldr	r3, [r3, #0]
   b892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b892c:	9301      	str	r3, [sp, #4]
   b892e:	bd08      	pop	{r3, pc}
   b8930:	00030228 	.word	0x00030228

000b8934 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8934:	b508      	push	{r3, lr}
   b8936:	4b02      	ldr	r3, [pc, #8]	; (b8940 <hal_i2c_flush+0xc>)
   b8938:	681b      	ldr	r3, [r3, #0]
   b893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b893c:	9301      	str	r3, [sp, #4]
   b893e:	bd08      	pop	{r3, pc}
   b8940:	00030228 	.word	0x00030228

000b8944 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8944:	b508      	push	{r3, lr}
   b8946:	4b02      	ldr	r3, [pc, #8]	; (b8950 <hal_i2c_is_enabled+0xc>)
   b8948:	681b      	ldr	r3, [r3, #0]
   b894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b894c:	9301      	str	r3, [sp, #4]
   b894e:	bd08      	pop	{r3, pc}
   b8950:	00030228 	.word	0x00030228

000b8954 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8954:	b508      	push	{r3, lr}
   b8956:	4b02      	ldr	r3, [pc, #8]	; (b8960 <hal_i2c_init+0xc>)
   b8958:	681b      	ldr	r3, [r3, #0]
   b895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b895c:	9301      	str	r3, [sp, #4]
   b895e:	bd08      	pop	{r3, pc}
   b8960:	00030228 	.word	0x00030228

000b8964 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8964:	b508      	push	{r3, lr}
   b8966:	4b02      	ldr	r3, [pc, #8]	; (b8970 <hal_spi_begin+0xc>)
   b8968:	681b      	ldr	r3, [r3, #0]
   b896a:	681b      	ldr	r3, [r3, #0]
   b896c:	9301      	str	r3, [sp, #4]
   b896e:	bd08      	pop	{r3, pc}
   b8970:	00030230 	.word	0x00030230

000b8974 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8974:	b508      	push	{r3, lr}
   b8976:	4b02      	ldr	r3, [pc, #8]	; (b8980 <hal_spi_transfer+0xc>)
   b8978:	681b      	ldr	r3, [r3, #0]
   b897a:	695b      	ldr	r3, [r3, #20]
   b897c:	9301      	str	r3, [sp, #4]
   b897e:	bd08      	pop	{r3, pc}
   b8980:	00030230 	.word	0x00030230

000b8984 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8984:	b508      	push	{r3, lr}
   b8986:	4b02      	ldr	r3, [pc, #8]	; (b8990 <hal_spi_init+0xc>)
   b8988:	681b      	ldr	r3, [r3, #0]
   b898a:	69db      	ldr	r3, [r3, #28]
   b898c:	9301      	str	r3, [sp, #4]
   b898e:	bd08      	pop	{r3, pc}
   b8990:	00030230 	.word	0x00030230

000b8994 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8994:	b508      	push	{r3, lr}
   b8996:	4b02      	ldr	r3, [pc, #8]	; (b89a0 <hal_spi_is_enabled+0xc>)
   b8998:	681b      	ldr	r3, [r3, #0]
   b899a:	6a1b      	ldr	r3, [r3, #32]
   b899c:	9301      	str	r3, [sp, #4]
   b899e:	bd08      	pop	{r3, pc}
   b89a0:	00030230 	.word	0x00030230

000b89a4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b89a4:	b508      	push	{r3, lr}
   b89a6:	4b02      	ldr	r3, [pc, #8]	; (b89b0 <hal_spi_info+0xc>)
   b89a8:	681b      	ldr	r3, [r3, #0]
   b89aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b89ac:	9301      	str	r3, [sp, #4]
   b89ae:	bd08      	pop	{r3, pc}
   b89b0:	00030230 	.word	0x00030230

000b89b4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b89b4:	b508      	push	{r3, lr}
   b89b6:	4b02      	ldr	r3, [pc, #8]	; (b89c0 <hal_spi_set_settings+0xc>)
   b89b8:	681b      	ldr	r3, [r3, #0]
   b89ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b89bc:	9301      	str	r3, [sp, #4]
   b89be:	bd08      	pop	{r3, pc}
   b89c0:	00030230 	.word	0x00030230

000b89c4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b89c4:	b508      	push	{r3, lr}
   b89c6:	4b02      	ldr	r3, [pc, #8]	; (b89d0 <hal_spi_acquire+0xc>)
   b89c8:	681b      	ldr	r3, [r3, #0]
   b89ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b89cc:	9301      	str	r3, [sp, #4]
   b89ce:	bd08      	pop	{r3, pc}
   b89d0:	00030230 	.word	0x00030230

000b89d4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b89d4:	b508      	push	{r3, lr}
   b89d6:	4b02      	ldr	r3, [pc, #8]	; (b89e0 <hal_spi_release+0xc>)
   b89d8:	681b      	ldr	r3, [r3, #0]
   b89da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b89dc:	9301      	str	r3, [sp, #4]
   b89de:	bd08      	pop	{r3, pc}
   b89e0:	00030230 	.word	0x00030230

000b89e4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b89e4:	b508      	push	{r3, lr}
   b89e6:	4b02      	ldr	r3, [pc, #8]	; (b89f0 <HAL_Tone_Start+0xc>)
   b89e8:	681b      	ldr	r3, [r3, #0]
   b89ea:	681b      	ldr	r3, [r3, #0]
   b89ec:	9301      	str	r3, [sp, #4]
   b89ee:	bd08      	pop	{r3, pc}
   b89f0:	00030224 	.word	0x00030224

000b89f4 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b02      	ldr	r3, [pc, #8]	; (b8a00 <HAL_Tone_Stop+0xc>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	685b      	ldr	r3, [r3, #4]
   b89fc:	9301      	str	r3, [sp, #4]
   b89fe:	bd08      	pop	{r3, pc}
   b8a00:	00030224 	.word	0x00030224

000b8a04 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8a04:	b508      	push	{r3, lr}
   b8a06:	4b02      	ldr	r3, [pc, #8]	; (b8a10 <HAL_USB_USART_Init+0xc>)
   b8a08:	681b      	ldr	r3, [r3, #0]
   b8a0a:	681b      	ldr	r3, [r3, #0]
   b8a0c:	9301      	str	r3, [sp, #4]
   b8a0e:	bd08      	pop	{r3, pc}
   b8a10:	0003024c 	.word	0x0003024c

000b8a14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <HAL_USB_USART_Begin+0xc>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	685b      	ldr	r3, [r3, #4]
   b8a1c:	9301      	str	r3, [sp, #4]
   b8a1e:	bd08      	pop	{r3, pc}
   b8a20:	0003024c 	.word	0x0003024c

000b8a24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8a24:	b508      	push	{r3, lr}
   b8a26:	4b02      	ldr	r3, [pc, #8]	; (b8a30 <HAL_USB_USART_Available_Data+0xc>)
   b8a28:	681b      	ldr	r3, [r3, #0]
   b8a2a:	691b      	ldr	r3, [r3, #16]
   b8a2c:	9301      	str	r3, [sp, #4]
   b8a2e:	bd08      	pop	{r3, pc}
   b8a30:	0003024c 	.word	0x0003024c

000b8a34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8a34:	b508      	push	{r3, lr}
   b8a36:	4b02      	ldr	r3, [pc, #8]	; (b8a40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8a38:	681b      	ldr	r3, [r3, #0]
   b8a3a:	695b      	ldr	r3, [r3, #20]
   b8a3c:	9301      	str	r3, [sp, #4]
   b8a3e:	bd08      	pop	{r3, pc}
   b8a40:	0003024c 	.word	0x0003024c

000b8a44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8a44:	b508      	push	{r3, lr}
   b8a46:	4b02      	ldr	r3, [pc, #8]	; (b8a50 <HAL_USB_USART_Receive_Data+0xc>)
   b8a48:	681b      	ldr	r3, [r3, #0]
   b8a4a:	699b      	ldr	r3, [r3, #24]
   b8a4c:	9301      	str	r3, [sp, #4]
   b8a4e:	bd08      	pop	{r3, pc}
   b8a50:	0003024c 	.word	0x0003024c

000b8a54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8a54:	b508      	push	{r3, lr}
   b8a56:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <HAL_USB_USART_Send_Data+0xc>)
   b8a58:	681b      	ldr	r3, [r3, #0]
   b8a5a:	69db      	ldr	r3, [r3, #28]
   b8a5c:	9301      	str	r3, [sp, #4]
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	0003024c 	.word	0x0003024c

000b8a64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b02      	ldr	r3, [pc, #8]	; (b8a70 <HAL_USB_USART_Flush_Data+0xc>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	6a1b      	ldr	r3, [r3, #32]
   b8a6c:	9301      	str	r3, [sp, #4]
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	0003024c 	.word	0x0003024c

000b8a74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8a74:	b508      	push	{r3, lr}
   b8a76:	4b02      	ldr	r3, [pc, #8]	; (b8a80 <panic_+0xc>)
   b8a78:	681b      	ldr	r3, [r3, #0]
   b8a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a7c:	9301      	str	r3, [sp, #4]
   b8a7e:	bd08      	pop	{r3, pc}
   b8a80:	00030260 	.word	0x00030260

000b8a84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8a84:	b508      	push	{r3, lr}
   b8a86:	4b02      	ldr	r3, [pc, #8]	; (b8a90 <set_system_mode+0xc>)
   b8a88:	681b      	ldr	r3, [r3, #0]
   b8a8a:	685b      	ldr	r3, [r3, #4]
   b8a8c:	9301      	str	r3, [sp, #4]
   b8a8e:	bd08      	pop	{r3, pc}
   b8a90:	00030220 	.word	0x00030220

000b8a94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8a94:	b508      	push	{r3, lr}
   b8a96:	4b02      	ldr	r3, [pc, #8]	; (b8aa0 <system_delay_ms+0xc>)
   b8a98:	681b      	ldr	r3, [r3, #0]
   b8a9a:	695b      	ldr	r3, [r3, #20]
   b8a9c:	9301      	str	r3, [sp, #4]
   b8a9e:	bd08      	pop	{r3, pc}
   b8aa0:	00030220 	.word	0x00030220

000b8aa4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4b03      	ldr	r3, [pc, #12]	; (b8ab4 <system_ctrl_set_app_request_handler+0x10>)
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8aae:	9301      	str	r3, [sp, #4]
   b8ab0:	bd08      	pop	{r3, pc}
   b8ab2:	0000      	.short	0x0000
   b8ab4:	00030220 	.word	0x00030220

000b8ab8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8ab8:	b508      	push	{r3, lr}
   b8aba:	4b03      	ldr	r3, [pc, #12]	; (b8ac8 <system_ctrl_set_result+0x10>)
   b8abc:	681b      	ldr	r3, [r3, #0]
   b8abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8ac2:	9301      	str	r3, [sp, #4]
   b8ac4:	bd08      	pop	{r3, pc}
   b8ac6:	0000      	.short	0x0000
   b8ac8:	00030220 	.word	0x00030220

000b8acc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8acc:	b508      	push	{r3, lr}
   b8ace:	4b02      	ldr	r3, [pc, #8]	; (b8ad8 <network_connect+0xc>)
   b8ad0:	681b      	ldr	r3, [r3, #0]
   b8ad2:	685b      	ldr	r3, [r3, #4]
   b8ad4:	9301      	str	r3, [sp, #4]
   b8ad6:	bd08      	pop	{r3, pc}
   b8ad8:	00030240 	.word	0x00030240

000b8adc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8adc:	b508      	push	{r3, lr}
   b8ade:	4b02      	ldr	r3, [pc, #8]	; (b8ae8 <network_connecting+0xc>)
   b8ae0:	681b      	ldr	r3, [r3, #0]
   b8ae2:	689b      	ldr	r3, [r3, #8]
   b8ae4:	9301      	str	r3, [sp, #4]
   b8ae6:	bd08      	pop	{r3, pc}
   b8ae8:	00030240 	.word	0x00030240

000b8aec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8aec:	b508      	push	{r3, lr}
   b8aee:	4b02      	ldr	r3, [pc, #8]	; (b8af8 <network_disconnect+0xc>)
   b8af0:	681b      	ldr	r3, [r3, #0]
   b8af2:	68db      	ldr	r3, [r3, #12]
   b8af4:	9301      	str	r3, [sp, #4]
   b8af6:	bd08      	pop	{r3, pc}
   b8af8:	00030240 	.word	0x00030240

000b8afc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8afc:	b508      	push	{r3, lr}
   b8afe:	4b02      	ldr	r3, [pc, #8]	; (b8b08 <network_ready+0xc>)
   b8b00:	681b      	ldr	r3, [r3, #0]
   b8b02:	691b      	ldr	r3, [r3, #16]
   b8b04:	9301      	str	r3, [sp, #4]
   b8b06:	bd08      	pop	{r3, pc}
   b8b08:	00030240 	.word	0x00030240

000b8b0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8b0c:	b508      	push	{r3, lr}
   b8b0e:	4b02      	ldr	r3, [pc, #8]	; (b8b18 <network_on+0xc>)
   b8b10:	681b      	ldr	r3, [r3, #0]
   b8b12:	695b      	ldr	r3, [r3, #20]
   b8b14:	9301      	str	r3, [sp, #4]
   b8b16:	bd08      	pop	{r3, pc}
   b8b18:	00030240 	.word	0x00030240

000b8b1c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8b1c:	b508      	push	{r3, lr}
   b8b1e:	4b02      	ldr	r3, [pc, #8]	; (b8b28 <network_off+0xc>)
   b8b20:	681b      	ldr	r3, [r3, #0]
   b8b22:	699b      	ldr	r3, [r3, #24]
   b8b24:	9301      	str	r3, [sp, #4]
   b8b26:	bd08      	pop	{r3, pc}
   b8b28:	00030240 	.word	0x00030240

000b8b2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8b2c:	b508      	push	{r3, lr}
   b8b2e:	4b02      	ldr	r3, [pc, #8]	; (b8b38 <network_listen+0xc>)
   b8b30:	681b      	ldr	r3, [r3, #0]
   b8b32:	69db      	ldr	r3, [r3, #28]
   b8b34:	9301      	str	r3, [sp, #4]
   b8b36:	bd08      	pop	{r3, pc}
   b8b38:	00030240 	.word	0x00030240

000b8b3c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8b3c:	b508      	push	{r3, lr}
   b8b3e:	4b02      	ldr	r3, [pc, #8]	; (b8b48 <network_listening+0xc>)
   b8b40:	681b      	ldr	r3, [r3, #0]
   b8b42:	6a1b      	ldr	r3, [r3, #32]
   b8b44:	9301      	str	r3, [sp, #4]
   b8b46:	bd08      	pop	{r3, pc}
   b8b48:	00030240 	.word	0x00030240

000b8b4c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8b4c:	b508      	push	{r3, lr}
   b8b4e:	4b02      	ldr	r3, [pc, #8]	; (b8b58 <network_set_listen_timeout+0xc>)
   b8b50:	681b      	ldr	r3, [r3, #0]
   b8b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b54:	9301      	str	r3, [sp, #4]
   b8b56:	bd08      	pop	{r3, pc}
   b8b58:	00030240 	.word	0x00030240

000b8b5c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8b5c:	b508      	push	{r3, lr}
   b8b5e:	4b02      	ldr	r3, [pc, #8]	; (b8b68 <network_get_listen_timeout+0xc>)
   b8b60:	681b      	ldr	r3, [r3, #0]
   b8b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8b64:	9301      	str	r3, [sp, #4]
   b8b66:	bd08      	pop	{r3, pc}
   b8b68:	00030240 	.word	0x00030240

000b8b6c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8b6c:	b508      	push	{r3, lr}
   b8b6e:	4b02      	ldr	r3, [pc, #8]	; (b8b78 <network_is_on+0xc>)
   b8b70:	681b      	ldr	r3, [r3, #0]
   b8b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b74:	9301      	str	r3, [sp, #4]
   b8b76:	bd08      	pop	{r3, pc}
   b8b78:	00030240 	.word	0x00030240

000b8b7c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8b7c:	b508      	push	{r3, lr}
   b8b7e:	4b02      	ldr	r3, [pc, #8]	; (b8b88 <network_is_off+0xc>)
   b8b80:	681b      	ldr	r3, [r3, #0]
   b8b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b84:	9301      	str	r3, [sp, #4]
   b8b86:	bd08      	pop	{r3, pc}
   b8b88:	00030240 	.word	0x00030240

000b8b8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8b8c:	b508      	push	{r3, lr}
   b8b8e:	4b02      	ldr	r3, [pc, #8]	; (b8b98 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8b90:	681b      	ldr	r3, [r3, #0]
   b8b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8b94:	9301      	str	r3, [sp, #4]
   b8b96:	bd08      	pop	{r3, pc}
   b8b98:	00030244 	.word	0x00030244

000b8b9c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b8b9c:	b508      	push	{r3, lr}
   b8b9e:	4b02      	ldr	r3, [pc, #8]	; (b8ba8 <spark_cloud_disconnect+0xc>)
   b8ba0:	681b      	ldr	r3, [r3, #0]
   b8ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ba4:	9301      	str	r3, [sp, #4]
   b8ba6:	bd08      	pop	{r3, pc}
   b8ba8:	00030244 	.word	0x00030244

000b8bac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8bac:	b508      	push	{r3, lr}
   b8bae:	4b02      	ldr	r3, [pc, #8]	; (b8bb8 <malloc+0xc>)
   b8bb0:	681b      	ldr	r3, [r3, #0]
   b8bb2:	681b      	ldr	r3, [r3, #0]
   b8bb4:	9301      	str	r3, [sp, #4]
   b8bb6:	bd08      	pop	{r3, pc}
   b8bb8:	0003021c 	.word	0x0003021c

000b8bbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8bbc:	b508      	push	{r3, lr}
   b8bbe:	4b02      	ldr	r3, [pc, #8]	; (b8bc8 <free+0xc>)
   b8bc0:	681b      	ldr	r3, [r3, #0]
   b8bc2:	685b      	ldr	r3, [r3, #4]
   b8bc4:	9301      	str	r3, [sp, #4]
   b8bc6:	bd08      	pop	{r3, pc}
   b8bc8:	0003021c 	.word	0x0003021c

000b8bcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8bcc:	b508      	push	{r3, lr}
   b8bce:	4b02      	ldr	r3, [pc, #8]	; (b8bd8 <realloc+0xc>)
   b8bd0:	681b      	ldr	r3, [r3, #0]
   b8bd2:	689b      	ldr	r3, [r3, #8]
   b8bd4:	9301      	str	r3, [sp, #4]
   b8bd6:	bd08      	pop	{r3, pc}
   b8bd8:	0003021c 	.word	0x0003021c

000b8bdc <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8bdc:	b508      	push	{r3, lr}
   b8bde:	4b02      	ldr	r3, [pc, #8]	; (b8be8 <snprintf+0xc>)
   b8be0:	681b      	ldr	r3, [r3, #0]
   b8be2:	69db      	ldr	r3, [r3, #28]
   b8be4:	9301      	str	r3, [sp, #4]
   b8be6:	bd08      	pop	{r3, pc}
   b8be8:	0003021c 	.word	0x0003021c

000b8bec <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8bec:	b508      	push	{r3, lr}
   b8bee:	4b02      	ldr	r3, [pc, #8]	; (b8bf8 <vsnprintf+0xc>)
   b8bf0:	681b      	ldr	r3, [r3, #0]
   b8bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8bf4:	9301      	str	r3, [sp, #4]
   b8bf6:	bd08      	pop	{r3, pc}
   b8bf8:	0003021c 	.word	0x0003021c

000b8bfc <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8bfc:	b508      	push	{r3, lr}
   b8bfe:	4b02      	ldr	r3, [pc, #8]	; (b8c08 <_malloc_r+0xc>)
   b8c00:	681b      	ldr	r3, [r3, #0]
   b8c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8c04:	9301      	str	r3, [sp, #4]
   b8c06:	bd08      	pop	{r3, pc}
   b8c08:	0003021c 	.word	0x0003021c

000b8c0c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8c0c:	b508      	push	{r3, lr}
   b8c0e:	4b02      	ldr	r3, [pc, #8]	; (b8c18 <__assert_func+0xc>)
   b8c10:	681b      	ldr	r3, [r3, #0]
   b8c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8c14:	9301      	str	r3, [sp, #4]
   b8c16:	bd08      	pop	{r3, pc}
   b8c18:	0003021c 	.word	0x0003021c

000b8c1c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8c1c:	b508      	push	{r3, lr}
   b8c1e:	4b02      	ldr	r3, [pc, #8]	; (b8c28 <newlib_impure_ptr_callback+0xc>)
   b8c20:	681b      	ldr	r3, [r3, #0]
   b8c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8c24:	9301      	str	r3, [sp, #4]
   b8c26:	bd08      	pop	{r3, pc}
   b8c28:	0003021c 	.word	0x0003021c

000b8c2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8c2c:	2200      	movs	r2, #0
   b8c2e:	6840      	ldr	r0, [r0, #4]
   b8c30:	4611      	mov	r1, r2
   b8c32:	f7ff bf83 	b.w	b8b3c <network_listening>

000b8c36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8c36:	2200      	movs	r2, #0
   b8c38:	6840      	ldr	r0, [r0, #4]
   b8c3a:	4611      	mov	r1, r2
   b8c3c:	f7ff bf8e 	b.w	b8b5c <network_get_listen_timeout>

000b8c40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8c40:	6840      	ldr	r0, [r0, #4]
   b8c42:	2200      	movs	r2, #0
   b8c44:	f7ff bf82 	b.w	b8b4c <network_set_listen_timeout>

000b8c48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8c48:	6840      	ldr	r0, [r0, #4]
   b8c4a:	2200      	movs	r2, #0
   b8c4c:	f081 0101 	eor.w	r1, r1, #1
   b8c50:	f7ff bf6c 	b.w	b8b2c <network_listen>

000b8c54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8c54:	2300      	movs	r3, #0
   b8c56:	6840      	ldr	r0, [r0, #4]
   b8c58:	461a      	mov	r2, r3
   b8c5a:	4619      	mov	r1, r3
   b8c5c:	f7ff bf5e 	b.w	b8b1c <network_off>

000b8c60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8c60:	2300      	movs	r3, #0
   b8c62:	6840      	ldr	r0, [r0, #4]
   b8c64:	461a      	mov	r2, r3
   b8c66:	4619      	mov	r1, r3
   b8c68:	f7ff bf50 	b.w	b8b0c <network_on>

000b8c6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8c6c:	2200      	movs	r2, #0
   b8c6e:	6840      	ldr	r0, [r0, #4]
   b8c70:	4611      	mov	r1, r2
   b8c72:	f7ff bf43 	b.w	b8afc <network_ready>

000b8c76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8c76:	2200      	movs	r2, #0
   b8c78:	6840      	ldr	r0, [r0, #4]
   b8c7a:	4611      	mov	r1, r2
   b8c7c:	f7ff bf2e 	b.w	b8adc <network_connecting>

000b8c80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c80:	6840      	ldr	r0, [r0, #4]
   b8c82:	2200      	movs	r2, #0
   b8c84:	2102      	movs	r1, #2
   b8c86:	f7ff bf31 	b.w	b8aec <network_disconnect>

000b8c8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c8a:	2300      	movs	r3, #0
   b8c8c:	6840      	ldr	r0, [r0, #4]
   b8c8e:	461a      	mov	r2, r3
   b8c90:	f7ff bf1c 	b.w	b8acc <network_connect>

000b8c94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8c94:	4b02      	ldr	r3, [pc, #8]	; (b8ca0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8c96:	2203      	movs	r2, #3
   b8c98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8c9a:	4a02      	ldr	r2, [pc, #8]	; (b8ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8c9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8c9e:	4770      	bx	lr
   b8ca0:	2003e6bc 	.word	0x2003e6bc
   b8ca4:	000bc524 	.word	0x000bc524

000b8ca8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8ca8:	2100      	movs	r1, #0
   b8caa:	f7ff be93 	b.w	b89d4 <hal_spi_release>

000b8cae <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8cae:	2100      	movs	r1, #0
   b8cb0:	f7ff be88 	b.w	b89c4 <hal_spi_acquire>

000b8cb4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8cb4:	b510      	push	{r4, lr}
   b8cb6:	4604      	mov	r4, r0
   b8cb8:	4608      	mov	r0, r1
{
    _spi = spi;
   b8cba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8cbc:	f7ff fe62 	bl	b8984 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8cc0:	2300      	movs	r3, #0
   b8cc2:	6063      	str	r3, [r4, #4]
}
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	bd10      	pop	{r4, pc}

000b8cc8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8cc8:	b513      	push	{r0, r1, r4, lr}
   b8cca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8ccc:	7800      	ldrb	r0, [r0, #0]
   b8cce:	f7ff ffee 	bl	b8cae <_ZN8SPIClass4lockEv.isra.0>
   b8cd2:	b958      	cbnz	r0, b8cec <_ZN8SPIClass5beginEv+0x24>
   b8cd4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8cd6:	9001      	str	r0, [sp, #4]
   b8cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8cdc:	f7ff fe42 	bl	b8964 <hal_spi_begin>
        unlock();
   b8ce0:	9801      	ldr	r0, [sp, #4]
    }
}
   b8ce2:	b002      	add	sp, #8
   b8ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8ce8:	f7ff bfde 	b.w	b8ca8 <_ZN8SPIClass6unlockEv.isra.0>
   b8cec:	b002      	add	sp, #8
   b8cee:	bd10      	pop	{r4, pc}

000b8cf0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8cf0:	7800      	ldrb	r0, [r0, #0]
   b8cf2:	f7ff bfd9 	b.w	b8ca8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8cf8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8cf8:	0840      	lsrs	r0, r0, #1
{
   b8cfa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8cfc:	6018      	str	r0, [r3, #0]
   b8cfe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8d00:	6818      	ldr	r0, [r3, #0]
   b8d02:	4288      	cmp	r0, r1
   b8d04:	b2e5      	uxtb	r5, r4
   b8d06:	d906      	bls.n	b8d16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8d08:	3401      	adds	r4, #1
   b8d0a:	2c08      	cmp	r4, #8
   b8d0c:	d002      	beq.n	b8d14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8d0e:	0840      	lsrs	r0, r0, #1
   b8d10:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8d12:	e7f5      	b.n	b8d00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8d14:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8d16:	4b02      	ldr	r3, [pc, #8]	; (b8d20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8d18:	5d5b      	ldrb	r3, [r3, r5]
   b8d1a:	7013      	strb	r3, [r2, #0]
}
   b8d1c:	bd30      	pop	{r4, r5, pc}
   b8d1e:	bf00      	nop
   b8d20:	000bc558 	.word	0x000bc558

000b8d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d28:	4606      	mov	r6, r0
   b8d2a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8d2c:	7800      	ldrb	r0, [r0, #0]
{
   b8d2e:	460c      	mov	r4, r1
    CHECK(lock());
   b8d30:	f7ff ffbd 	bl	b8cae <_ZN8SPIClass4lockEv.isra.0>
   b8d34:	2800      	cmp	r0, #0
   b8d36:	db1b      	blt.n	b8d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8d38:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8d3a:	2214      	movs	r2, #20
   b8d3c:	2100      	movs	r1, #0
   b8d3e:	a809      	add	r0, sp, #36	; 0x24
   b8d40:	f001 fcf4 	bl	ba72c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8d44:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8d46:	2200      	movs	r2, #0
   b8d48:	a909      	add	r1, sp, #36	; 0x24
   b8d4a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8d4c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8d50:	f7ff fe28 	bl	b89a4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8d54:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8d58:	b113      	cbz	r3, b8d60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8d5a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8d5e:	b155      	cbz	r5, b8d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8d60:	2700      	movs	r7, #0
   b8d62:	46b9      	mov	r9, r7
   b8d64:	46b8      	mov	r8, r7
   b8d66:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8d68:	7923      	ldrb	r3, [r4, #4]
   b8d6a:	b15d      	cbz	r5, b8d84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8d6c:	b1c3      	cbz	r3, b8da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8d6e:	2000      	movs	r0, #0
}
   b8d70:	b00f      	add	sp, #60	; 0x3c
   b8d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8d76:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8d7a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8d7e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8d82:	e7f1      	b.n	b8d68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8d84:	2b00      	cmp	r3, #0
   b8d86:	d135      	bne.n	b8df4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8d88:	68a3      	ldr	r3, [r4, #8]
   b8d8a:	4543      	cmp	r3, r8
   b8d8c:	d108      	bne.n	b8da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8d8e:	f88d 9020 	strb.w	r9, [sp, #32]
   b8d92:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8d96:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8d9a:	89a3      	ldrh	r3, [r4, #12]
   b8d9c:	429a      	cmp	r2, r3
   b8d9e:	d0e6      	beq.n	b8d6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8da0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8da2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8da4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8da8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8daa:	ab04      	add	r3, sp, #16
   b8dac:	f10d 020f 	add.w	r2, sp, #15
   b8db0:	f7ff ffa2 	bl	b8cf8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8db4:	7921      	ldrb	r1, [r4, #4]
   b8db6:	b985      	cbnz	r5, b8dda <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8db8:	b989      	cbnz	r1, b8dde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8dba:	68a3      	ldr	r3, [r4, #8]
   b8dbc:	4543      	cmp	r3, r8
   b8dbe:	d30e      	bcc.n	b8dde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8dc0:	f88d 9020 	strb.w	r9, [sp, #32]
   b8dc4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8dc8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8dcc:	89a3      	ldrh	r3, [r4, #12]
   b8dce:	429a      	cmp	r2, r3
   b8dd0:	d105      	bne.n	b8dde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8dd2:	9b04      	ldr	r3, [sp, #16]
   b8dd4:	4543      	cmp	r3, r8
   b8dd6:	d102      	bne.n	b8dde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8dd8:	e7c9      	b.n	b8d6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8dda:	2900      	cmp	r1, #0
   b8ddc:	d1f9      	bne.n	b8dd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8dde:	2300      	movs	r3, #0
   b8de0:	9301      	str	r3, [sp, #4]
   b8de2:	7b63      	ldrb	r3, [r4, #13]
   b8de4:	9300      	str	r3, [sp, #0]
   b8de6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8dea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8dec:	7830      	ldrb	r0, [r6, #0]
   b8dee:	f7ff fde1 	bl	b89b4 <hal_spi_set_settings>
   b8df2:	e7bc      	b.n	b8d6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8df4:	e9cd 5500 	strd	r5, r5, [sp]
   b8df8:	462b      	mov	r3, r5
   b8dfa:	462a      	mov	r2, r5
   b8dfc:	2101      	movs	r1, #1
   b8dfe:	e7f5      	b.n	b8dec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8e00 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8e00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8e02:	7800      	ldrb	r0, [r0, #0]
   b8e04:	f7ff fdb6 	bl	b8974 <hal_spi_transfer>
}
   b8e08:	b2c0      	uxtb	r0, r0
   b8e0a:	bd08      	pop	{r3, pc}

000b8e0c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8e0c:	4b05      	ldr	r3, [pc, #20]	; (b8e24 <_GLOBAL__sub_I_System+0x18>)
   b8e0e:	2202      	movs	r2, #2
   b8e10:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8e12:	4b05      	ldr	r3, [pc, #20]	; (b8e28 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8e14:	4a05      	ldr	r2, [pc, #20]	; (b8e2c <_GLOBAL__sub_I_System+0x20>)
   b8e16:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8e18:	2000      	movs	r0, #0
   b8e1a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8e1e:	f7ff be31 	b.w	b8a84 <set_system_mode>
   b8e22:	bf00      	nop
   b8e24:	2003e6d0 	.word	0x2003e6d0
   b8e28:	2003e6c4 	.word	0x2003e6c4
   b8e2c:	ffff0000 	.word	0xffff0000

000b8e30 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8e30:	b510      	push	{r4, lr}
   b8e32:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8e34:	f001 fcc8 	bl	ba7c8 <strlen>
   b8e38:	3801      	subs	r0, #1
   b8e3a:	1823      	adds	r3, r4, r0
   b8e3c:	4620      	mov	r0, r4
	while(i<j){
   b8e3e:	4283      	cmp	r3, r0
   b8e40:	d906      	bls.n	b8e50 <_Z11str_reversePc+0x20>
		c = *i;
   b8e42:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8e44:	7819      	ldrb	r1, [r3, #0]
   b8e46:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8e4a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8e4e:	e7f6      	b.n	b8e3e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8e50:	bd10      	pop	{r4, pc}

000b8e52 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8e52:	b570      	push	{r4, r5, r6, lr}
   b8e54:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8e56:	1e91      	subs	r1, r2, #2
   b8e58:	2922      	cmp	r1, #34	; 0x22
   b8e5a:	d81d      	bhi.n	b8e98 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8e5c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8e5e:	b930      	cbnz	r0, b8e6e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8e60:	4423      	add	r3, r4
            *ptr++ = '0';
   b8e62:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8e64:	429d      	cmp	r5, r3
   b8e66:	d210      	bcs.n	b8e8a <ultoa+0x38>
            *ptr++ = '0';
   b8e68:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8e6c:	e7fa      	b.n	b8e64 <ultoa+0x12>
            result.quot = a/radix;
   b8e6e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8e72:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8e76:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8e78:	2809      	cmp	r0, #9
                *ptr += '0';
   b8e7a:	bf94      	ite	ls
   b8e7c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8e7e:	3157      	addhi	r1, #87	; 0x57
   b8e80:	b2c9      	uxtb	r1, r1
   b8e82:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8e86:	4630      	mov	r0, r6
	while(a){
   b8e88:	e7e9      	b.n	b8e5e <ultoa+0xc>

	*ptr = '\0';
   b8e8a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8e8c:	4620      	mov	r0, r4
	*ptr = '\0';
   b8e8e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8e90:	f7ff ffce 	bl	b8e30 <_Z11str_reversePc>
	return buffer;
   b8e94:	4620      	mov	r0, r4
}
   b8e96:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8e98:	2000      	movs	r0, #0
   b8e9a:	e7fc      	b.n	b8e96 <ultoa+0x44>

000b8e9c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8e9c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8e9e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8ea0:	460c      	mov	r4, r1
   b8ea2:	4615      	mov	r5, r2
	if(a<0){
   b8ea4:	da0e      	bge.n	b8ec4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8eaa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8eae:	bf14      	ite	ne
   b8eb0:	4258      	negne	r0, r3
   b8eb2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8eb4:	2301      	movs	r3, #1
		*buffer = '-';
   b8eb6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8eb8:	462a      	mov	r2, r5
   b8eba:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8ebc:	f7ff ffc9 	bl	b8e52 <ultoa>
	}
	return buffer;
}
   b8ec0:	4620      	mov	r0, r4
   b8ec2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8ec4:	2301      	movs	r3, #1
   b8ec6:	e7f9      	b.n	b8ebc <itoa+0x20>

000b8ec8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8ec8:	b510      	push	{r4, lr}
   b8eca:	4604      	mov	r4, r0
{
	free(buffer);
   b8ecc:	6800      	ldr	r0, [r0, #0]
   b8ece:	f7ff fe75 	bl	b8bbc <free>
}
   b8ed2:	4620      	mov	r0, r4
   b8ed4:	bd10      	pop	{r4, pc}

000b8ed6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8ed6:	b510      	push	{r4, lr}
   b8ed8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8eda:	6800      	ldr	r0, [r0, #0]
   b8edc:	b108      	cbz	r0, b8ee2 <_ZN6String10invalidateEv+0xc>
   b8ede:	f7ff fe6d 	bl	b8bbc <free>
	buffer = NULL;
   b8ee2:	2300      	movs	r3, #0
	capacity = len = 0;
   b8ee4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8ee8:	6023      	str	r3, [r4, #0]
}
   b8eea:	bd10      	pop	{r4, pc}

000b8eec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8eec:	b538      	push	{r3, r4, r5, lr}
   b8eee:	4604      	mov	r4, r0
   b8ef0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8ef2:	6800      	ldr	r0, [r0, #0]
   b8ef4:	3101      	adds	r1, #1
   b8ef6:	f7ff fe69 	bl	b8bcc <realloc>
	if (newbuffer) {
   b8efa:	b110      	cbz	r0, b8f02 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8efc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8f00:	2001      	movs	r0, #1
	}
	return 0;
}
   b8f02:	bd38      	pop	{r3, r4, r5, pc}

000b8f04 <_ZN6String7reserveEj>:
{
   b8f04:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8f06:	6803      	ldr	r3, [r0, #0]
{
   b8f08:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8f0a:	b123      	cbz	r3, b8f16 <_ZN6String7reserveEj+0x12>
   b8f0c:	6843      	ldr	r3, [r0, #4]
   b8f0e:	428b      	cmp	r3, r1
   b8f10:	d301      	bcc.n	b8f16 <_ZN6String7reserveEj+0x12>
   b8f12:	2001      	movs	r0, #1
}
   b8f14:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8f16:	4620      	mov	r0, r4
   b8f18:	f7ff ffe8 	bl	b8eec <_ZN6String12changeBufferEj>
   b8f1c:	2800      	cmp	r0, #0
   b8f1e:	d0f9      	beq.n	b8f14 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8f20:	68a3      	ldr	r3, [r4, #8]
   b8f22:	2b00      	cmp	r3, #0
   b8f24:	d1f5      	bne.n	b8f12 <_ZN6String7reserveEj+0xe>
   b8f26:	6822      	ldr	r2, [r4, #0]
   b8f28:	7013      	strb	r3, [r2, #0]
   b8f2a:	e7f2      	b.n	b8f12 <_ZN6String7reserveEj+0xe>

000b8f2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f2e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8f30:	4611      	mov	r1, r2
   b8f32:	9201      	str	r2, [sp, #4]
{
   b8f34:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8f36:	f7ff ffe5 	bl	b8f04 <_ZN6String7reserveEj>
   b8f3a:	9a01      	ldr	r2, [sp, #4]
   b8f3c:	b928      	cbnz	r0, b8f4a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8f3e:	4620      	mov	r0, r4
   b8f40:	f7ff ffc9 	bl	b8ed6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8f44:	4620      	mov	r0, r4
   b8f46:	b003      	add	sp, #12
   b8f48:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8f4a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8f4c:	4629      	mov	r1, r5
   b8f4e:	6820      	ldr	r0, [r4, #0]
   b8f50:	f001 fbde 	bl	ba710 <memcpy>
	buffer[len] = 0;
   b8f54:	6822      	ldr	r2, [r4, #0]
   b8f56:	68a3      	ldr	r3, [r4, #8]
   b8f58:	2100      	movs	r1, #0
   b8f5a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8f5c:	e7f2      	b.n	b8f44 <_ZN6String4copyEPKcj+0x18>

000b8f5e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8f5e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8f60:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8f62:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8f66:	4604      	mov	r4, r0
	len = 0;
   b8f68:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8f6a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8f6c:	b141      	cbz	r1, b8f80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8f6e:	4608      	mov	r0, r1
   b8f70:	9101      	str	r1, [sp, #4]
   b8f72:	f001 fc29 	bl	ba7c8 <strlen>
   b8f76:	9901      	ldr	r1, [sp, #4]
   b8f78:	4602      	mov	r2, r0
   b8f7a:	4620      	mov	r0, r4
   b8f7c:	f7ff ffd6 	bl	b8f2c <_ZN6String4copyEPKcj>
}
   b8f80:	4620      	mov	r0, r4
   b8f82:	b002      	add	sp, #8
   b8f84:	bd10      	pop	{r4, pc}

000b8f86 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8f86:	4288      	cmp	r0, r1
{
   b8f88:	b510      	push	{r4, lr}
   b8f8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8f8c:	d005      	beq.n	b8f9a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8f8e:	680b      	ldr	r3, [r1, #0]
   b8f90:	b12b      	cbz	r3, b8f9e <_ZN6StringaSERKS_+0x18>
   b8f92:	688a      	ldr	r2, [r1, #8]
   b8f94:	4619      	mov	r1, r3
   b8f96:	f7ff ffc9 	bl	b8f2c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8f9a:	4620      	mov	r0, r4
   b8f9c:	bd10      	pop	{r4, pc}
	else invalidate();
   b8f9e:	f7ff ff9a 	bl	b8ed6 <_ZN6String10invalidateEv>
   b8fa2:	e7fa      	b.n	b8f9a <_ZN6StringaSERKS_+0x14>

000b8fa4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8fa4:	b510      	push	{r4, lr}
	buffer = NULL;
   b8fa6:	2300      	movs	r3, #0
String::String(const String &value)
   b8fa8:	4604      	mov	r4, r0
	capacity = 0;
   b8faa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8fae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8fb0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8fb2:	f7ff ffe8 	bl	b8f86 <_ZN6StringaSERKS_>
}
   b8fb6:	4620      	mov	r0, r4
   b8fb8:	bd10      	pop	{r4, pc}

000b8fba <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8fba:	b513      	push	{r0, r1, r4, lr}
   b8fbc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8fbe:	b159      	cbz	r1, b8fd8 <_ZN6StringaSEPKc+0x1e>
   b8fc0:	4608      	mov	r0, r1
   b8fc2:	9101      	str	r1, [sp, #4]
   b8fc4:	f001 fc00 	bl	ba7c8 <strlen>
   b8fc8:	9901      	ldr	r1, [sp, #4]
   b8fca:	4602      	mov	r2, r0
   b8fcc:	4620      	mov	r0, r4
   b8fce:	f7ff ffad 	bl	b8f2c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8fd2:	4620      	mov	r0, r4
   b8fd4:	b002      	add	sp, #8
   b8fd6:	bd10      	pop	{r4, pc}
	else invalidate();
   b8fd8:	f7ff ff7d 	bl	b8ed6 <_ZN6String10invalidateEv>
   b8fdc:	e7f9      	b.n	b8fd2 <_ZN6StringaSEPKc+0x18>

000b8fde <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8fde:	b510      	push	{r4, lr}
   b8fe0:	4604      	mov	r4, r0
   b8fe2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8fe4:	2300      	movs	r3, #0
	capacity = 0;
   b8fe6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8fea:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8fec:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8fee:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8ff0:	a901      	add	r1, sp, #4
   b8ff2:	f7ff ff53 	bl	b8e9c <itoa>
	*this = buf;
   b8ff6:	a901      	add	r1, sp, #4
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	f7ff ffde 	bl	b8fba <_ZN6StringaSEPKc>
}
   b8ffe:	4620      	mov	r0, r4
   b9000:	b00a      	add	sp, #40	; 0x28
   b9002:	bd10      	pop	{r4, pc}

000b9004 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9004:	b570      	push	{r4, r5, r6, lr}
   b9006:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9008:	460e      	mov	r6, r1
   b900a:	b909      	cbnz	r1, b9010 <_ZN6String6concatEPKcj+0xc>
   b900c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b900e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9010:	b16a      	cbz	r2, b902e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9012:	6884      	ldr	r4, [r0, #8]
   b9014:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9016:	4621      	mov	r1, r4
   b9018:	f7ff ff74 	bl	b8f04 <_ZN6String7reserveEj>
   b901c:	2800      	cmp	r0, #0
   b901e:	d0f5      	beq.n	b900c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9020:	6828      	ldr	r0, [r5, #0]
   b9022:	68ab      	ldr	r3, [r5, #8]
   b9024:	4631      	mov	r1, r6
   b9026:	4418      	add	r0, r3
   b9028:	f001 fbc6 	bl	ba7b8 <strcpy>
	len = newlen;
   b902c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b902e:	2001      	movs	r0, #1
   b9030:	e7ed      	b.n	b900e <_ZN6String6concatEPKcj+0xa>

000b9032 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9032:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9034:	688a      	ldr	r2, [r1, #8]
   b9036:	6809      	ldr	r1, [r1, #0]
{
   b9038:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b903a:	f7ff ffe3 	bl	b9004 <_ZN6String6concatEPKcj>
   b903e:	b910      	cbnz	r0, b9046 <_ZplRK15StringSumHelperRK6String+0x14>
   b9040:	4620      	mov	r0, r4
   b9042:	f7ff ff48 	bl	b8ed6 <_ZN6String10invalidateEv>
	return a;
}
   b9046:	4620      	mov	r0, r4
   b9048:	bd10      	pop	{r4, pc}

000b904a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b904a:	b513      	push	{r0, r1, r4, lr}
   b904c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b904e:	b929      	cbnz	r1, b905c <_ZplRK15StringSumHelperPKc+0x12>
   b9050:	4620      	mov	r0, r4
   b9052:	f7ff ff40 	bl	b8ed6 <_ZN6String10invalidateEv>
	return a;
}
   b9056:	4620      	mov	r0, r4
   b9058:	b002      	add	sp, #8
   b905a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b905c:	4608      	mov	r0, r1
   b905e:	9101      	str	r1, [sp, #4]
   b9060:	f001 fbb2 	bl	ba7c8 <strlen>
   b9064:	9901      	ldr	r1, [sp, #4]
   b9066:	4602      	mov	r2, r0
   b9068:	4620      	mov	r0, r4
   b906a:	f7ff ffcb 	bl	b9004 <_ZN6String6concatEPKcj>
   b906e:	2800      	cmp	r0, #0
   b9070:	d0ee      	beq.n	b9050 <_ZplRK15StringSumHelperPKc+0x6>
   b9072:	e7f0      	b.n	b9056 <_ZplRK15StringSumHelperPKc+0xc>

000b9074 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b9074:	4802      	ldr	r0, [pc, #8]	; (b9080 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9076:	2300      	movs	r3, #0
   b9078:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b907a:	f7ff bbcb 	b.w	b8814 <os_mutex_recursive_create>
   b907e:	bf00      	nop
   b9080:	2003e6d4 	.word	0x2003e6d4

000b9084 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9086:	4606      	mov	r6, r0
   b9088:	460d      	mov	r5, r1
  size_t n = 0;
   b908a:	188f      	adds	r7, r1, r2
   b908c:	2400      	movs	r4, #0
  while (size--) {
   b908e:	42bd      	cmp	r5, r7
   b9090:	d00c      	beq.n	b90ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9092:	6833      	ldr	r3, [r6, #0]
   b9094:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9098:	689b      	ldr	r3, [r3, #8]
   b909a:	4630      	mov	r0, r6
   b909c:	4798      	blx	r3
     if (chunk>=0)
   b909e:	1e03      	subs	r3, r0, #0
   b90a0:	db01      	blt.n	b90a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b90a2:	441c      	add	r4, r3
  while (size--) {
   b90a4:	e7f3      	b.n	b908e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b90a6:	2c00      	cmp	r4, #0
   b90a8:	bf08      	it	eq
   b90aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b90ac:	4620      	mov	r0, r4
   b90ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b90b0:	b513      	push	{r0, r1, r4, lr}
   b90b2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b90b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b90b6:	b159      	cbz	r1, b90d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b90b8:	9101      	str	r1, [sp, #4]
   b90ba:	f001 fb85 	bl	ba7c8 <strlen>
   b90be:	6823      	ldr	r3, [r4, #0]
   b90c0:	9901      	ldr	r1, [sp, #4]
   b90c2:	68db      	ldr	r3, [r3, #12]
   b90c4:	4602      	mov	r2, r0
   b90c6:	4620      	mov	r0, r4
    }
   b90c8:	b002      	add	sp, #8
   b90ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b90ce:	4718      	bx	r3
    }
   b90d0:	b002      	add	sp, #8
   b90d2:	bd10      	pop	{r4, pc}

000b90d4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b90d4:	b508      	push	{r3, lr}
  return write(str);
   b90d6:	f7ff ffeb 	bl	b90b0 <_ZN5Print5writeEPKc>
}
   b90da:	bd08      	pop	{r3, pc}

000b90dc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b90dc:	6803      	ldr	r3, [r0, #0]
   b90de:	689b      	ldr	r3, [r3, #8]
   b90e0:	4718      	bx	r3

000b90e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b90e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b90e4:	210d      	movs	r1, #13
{
   b90e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b90e8:	f7ff fff8 	bl	b90dc <_ZN5Print5printEc>
  n += print('\n');
   b90ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b90ee:	4604      	mov	r4, r0
  n += print('\n');
   b90f0:	4628      	mov	r0, r5
   b90f2:	f7ff fff3 	bl	b90dc <_ZN5Print5printEc>
  return n;
}
   b90f6:	4420      	add	r0, r4
   b90f8:	bd38      	pop	{r3, r4, r5, pc}

000b90fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b90fa:	b538      	push	{r3, r4, r5, lr}
   b90fc:	4605      	mov	r5, r0
  return write(str);
   b90fe:	f7ff ffd7 	bl	b90b0 <_ZN5Print5writeEPKc>
   b9102:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9104:	4628      	mov	r0, r5
   b9106:	f7ff ffec 	bl	b90e2 <_ZN5Print7printlnEv>
  return n;
}
   b910a:	4420      	add	r0, r4
   b910c:	bd38      	pop	{r3, r4, r5, pc}

000b910e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b910e:	b530      	push	{r4, r5, lr}
   b9110:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9112:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9114:	2a01      	cmp	r2, #1
  *str = '\0';
   b9116:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b911a:	bf98      	it	ls
   b911c:	220a      	movls	r2, #10
   b911e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9120:	460d      	mov	r5, r1
   b9122:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9126:	fb01 5312 	mls	r3, r1, r2, r5
   b912a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b912e:	2b09      	cmp	r3, #9
   b9130:	bf94      	ite	ls
   b9132:	3330      	addls	r3, #48	; 0x30
   b9134:	3337      	addhi	r3, #55	; 0x37
   b9136:	b2db      	uxtb	r3, r3
  } while(n);
   b9138:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b913a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b913e:	d9ef      	bls.n	b9120 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9140:	4621      	mov	r1, r4
   b9142:	f7ff ffb5 	bl	b90b0 <_ZN5Print5writeEPKc>
}
   b9146:	b00b      	add	sp, #44	; 0x2c
   b9148:	bd30      	pop	{r4, r5, pc}
	...

000b914c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b914c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9150:	ec55 4b10 	vmov	r4, r5, d0
   b9154:	4606      	mov	r6, r0
   b9156:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b9158:	ee10 2a10 	vmov	r2, s0
   b915c:	ee10 0a10 	vmov	r0, s0
   b9160:	462b      	mov	r3, r5
   b9162:	4629      	mov	r1, r5
   b9164:	f001 fa18 	bl	ba598 <__aeabi_dcmpun>
   b9168:	b140      	cbz	r0, b917c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b916a:	4953      	ldr	r1, [pc, #332]	; (b92b8 <_ZN5Print10printFloatEdh+0x16c>)
   b916c:	4630      	mov	r0, r6
   b916e:	f7ff ff9f 	bl	b90b0 <_ZN5Print5writeEPKc>
   b9172:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b9174:	4650      	mov	r0, sl
   b9176:	b003      	add	sp, #12
   b9178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b917c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b9180:	4b4e      	ldr	r3, [pc, #312]	; (b92bc <_ZN5Print10printFloatEdh+0x170>)
   b9182:	f04f 32ff 	mov.w	r2, #4294967295
   b9186:	4620      	mov	r0, r4
   b9188:	4649      	mov	r1, r9
   b918a:	f001 fa05 	bl	ba598 <__aeabi_dcmpun>
   b918e:	b948      	cbnz	r0, b91a4 <_ZN5Print10printFloatEdh+0x58>
   b9190:	4b4a      	ldr	r3, [pc, #296]	; (b92bc <_ZN5Print10printFloatEdh+0x170>)
   b9192:	f04f 32ff 	mov.w	r2, #4294967295
   b9196:	4620      	mov	r0, r4
   b9198:	4649      	mov	r1, r9
   b919a:	f001 f9df 	bl	ba55c <__aeabi_dcmple>
   b919e:	b908      	cbnz	r0, b91a4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b91a0:	4947      	ldr	r1, [pc, #284]	; (b92c0 <_ZN5Print10printFloatEdh+0x174>)
   b91a2:	e7e3      	b.n	b916c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b91a4:	4b47      	ldr	r3, [pc, #284]	; (b92c4 <_ZN5Print10printFloatEdh+0x178>)
   b91a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b91aa:	4620      	mov	r0, r4
   b91ac:	4629      	mov	r1, r5
   b91ae:	f001 f9e9 	bl	ba584 <__aeabi_dcmpgt>
   b91b2:	b108      	cbz	r0, b91b8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b91b4:	4944      	ldr	r1, [pc, #272]	; (b92c8 <_ZN5Print10printFloatEdh+0x17c>)
   b91b6:	e7d9      	b.n	b916c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b91b8:	4b44      	ldr	r3, [pc, #272]	; (b92cc <_ZN5Print10printFloatEdh+0x180>)
   b91ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b91be:	4620      	mov	r0, r4
   b91c0:	4629      	mov	r1, r5
   b91c2:	f001 f9c1 	bl	ba548 <__aeabi_dcmplt>
   b91c6:	2800      	cmp	r0, #0
   b91c8:	d1f4      	bne.n	b91b4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b91ca:	2200      	movs	r2, #0
   b91cc:	2300      	movs	r3, #0
   b91ce:	4620      	mov	r0, r4
   b91d0:	4629      	mov	r1, r5
   b91d2:	f001 f9b9 	bl	ba548 <__aeabi_dcmplt>
   b91d6:	b1d0      	cbz	r0, b920e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b91d8:	212d      	movs	r1, #45	; 0x2d
   b91da:	4630      	mov	r0, r6
   b91dc:	f7ff ff7e 	bl	b90dc <_ZN5Print5printEc>
     number = -number;
   b91e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b91e4:	4682      	mov	sl, r0
     number = -number;
   b91e6:	461d      	mov	r5, r3
  double rounding = 0.5;
   b91e8:	4939      	ldr	r1, [pc, #228]	; (b92d0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b91ea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b92d8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b91ee:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b91f2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b91f4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b91f8:	fa5f f38b 	uxtb.w	r3, fp
   b91fc:	429f      	cmp	r7, r3
   b91fe:	d908      	bls.n	b9212 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b9200:	4642      	mov	r2, r8
   b9202:	464b      	mov	r3, r9
   b9204:	f001 f858 	bl	ba2b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b9208:	f10b 0b01 	add.w	fp, fp, #1
   b920c:	e7f4      	b.n	b91f8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b920e:	4682      	mov	sl, r0
   b9210:	e7ea      	b.n	b91e8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b9212:	4622      	mov	r2, r4
   b9214:	462b      	mov	r3, r5
   b9216:	f000 fd6f 	bl	b9cf8 <__adddf3>
   b921a:	460d      	mov	r5, r1
   b921c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b921e:	f001 f9f9 	bl	ba614 <__aeabi_d2uiz>
   b9222:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b9224:	f000 fea4 	bl	b9f70 <__aeabi_ui2d>
   b9228:	4602      	mov	r2, r0
   b922a:	460b      	mov	r3, r1
   b922c:	4620      	mov	r0, r4
   b922e:	4629      	mov	r1, r5
   b9230:	f000 fd60 	bl	b9cf4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9234:	220a      	movs	r2, #10
   b9236:	4604      	mov	r4, r0
   b9238:	460d      	mov	r5, r1
   b923a:	4630      	mov	r0, r6
   b923c:	4641      	mov	r1, r8
   b923e:	f7ff ff66 	bl	b910e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b9242:	4482      	add	sl, r0
  if (digits > 0) {
   b9244:	2f00      	cmp	r7, #0
   b9246:	d095      	beq.n	b9174 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b9248:	4922      	ldr	r1, [pc, #136]	; (b92d4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b924a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b92d8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b924e:	4630      	mov	r0, r6
   b9250:	f7ff ff2e 	bl	b90b0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b9254:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b9258:	4482      	add	sl, r0
  while (digits-- > 0)
   b925a:	2f00      	cmp	r7, #0
   b925c:	d08a      	beq.n	b9174 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b925e:	4642      	mov	r2, r8
   b9260:	464b      	mov	r3, r9
   b9262:	4620      	mov	r0, r4
   b9264:	4629      	mov	r1, r5
   b9266:	f000 fefd 	bl	ba064 <__aeabi_dmul>
   b926a:	4604      	mov	r4, r0
   b926c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b926e:	f001 f9a9 	bl	ba5c4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b9272:	f1b0 0b00 	subs.w	fp, r0, #0
   b9276:	da1c      	bge.n	b92b2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b9278:	212d      	movs	r1, #45	; 0x2d
   b927a:	4630      	mov	r0, r6
   b927c:	f7ff ff2e 	bl	b90dc <_ZN5Print5printEc>
            val = -n;
   b9280:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b9284:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b9286:	220a      	movs	r2, #10
   b9288:	4630      	mov	r0, r6
   b928a:	9301      	str	r3, [sp, #4]
   b928c:	f7ff ff3f 	bl	b910e <_ZN5Print11printNumberEmh>
   b9290:	9b01      	ldr	r3, [sp, #4]
   b9292:	4418      	add	r0, r3
    n += print(toPrint);
   b9294:	4482      	add	sl, r0
    remainder -= toPrint;
   b9296:	4658      	mov	r0, fp
   b9298:	f000 fe7a 	bl	b9f90 <__aeabi_i2d>
   b929c:	4602      	mov	r2, r0
   b929e:	460b      	mov	r3, r1
   b92a0:	4620      	mov	r0, r4
   b92a2:	4629      	mov	r1, r5
   b92a4:	f000 fd26 	bl	b9cf4 <__aeabi_dsub>
   b92a8:	3f01      	subs	r7, #1
   b92aa:	4604      	mov	r4, r0
   b92ac:	460d      	mov	r5, r1
   b92ae:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b92b0:	e7d3      	b.n	b925a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b92b2:	4659      	mov	r1, fp
        size_t t = 0;
   b92b4:	2300      	movs	r3, #0
   b92b6:	e7e6      	b.n	b9286 <_ZN5Print10printFloatEdh+0x13a>
   b92b8:	000bc560 	.word	0x000bc560
   b92bc:	7fefffff 	.word	0x7fefffff
   b92c0:	000bc564 	.word	0x000bc564
   b92c4:	41efffff 	.word	0x41efffff
   b92c8:	000bc568 	.word	0x000bc568
   b92cc:	c1efffff 	.word	0xc1efffff
   b92d0:	3fe00000 	.word	0x3fe00000
   b92d4:	000bacbc 	.word	0x000bacbc
   b92d8:	40240000 	.word	0x40240000

000b92dc <_ZN5Print7printlnEdi>:
{
   b92dc:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b92de:	b2c9      	uxtb	r1, r1
{
   b92e0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b92e2:	f7ff ff33 	bl	b914c <_ZN5Print10printFloatEdh>
   b92e6:	4604      	mov	r4, r0
  n += println();
   b92e8:	4628      	mov	r0, r5
   b92ea:	f7ff fefa 	bl	b90e2 <_ZN5Print7printlnEv>
}
   b92ee:	4420      	add	r0, r4
   b92f0:	bd38      	pop	{r3, r4, r5, pc}

000b92f2 <_ZN5Print7printlnEfi>:
{
   b92f2:	b538      	push	{r3, r4, r5, lr}
   b92f4:	4604      	mov	r4, r0
   b92f6:	ee10 0a10 	vmov	r0, s0
   b92fa:	460d      	mov	r5, r1
    return println((double)num, digits);
   b92fc:	f000 fe5a 	bl	b9fb4 <__aeabi_f2d>
   b9300:	ec41 0b10 	vmov	d0, r0, r1
   b9304:	4629      	mov	r1, r5
   b9306:	4620      	mov	r0, r4
}
   b9308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b930c:	f7ff bfe6 	b.w	b92dc <_ZN5Print7printlnEdi>

000b9310 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9314:	b086      	sub	sp, #24
   b9316:	af00      	add	r7, sp, #0
   b9318:	4605      	mov	r5, r0
   b931a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b931c:	1d38      	adds	r0, r7, #4
   b931e:	2114      	movs	r1, #20
{
   b9320:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9322:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9324:	f7ff fc62 	bl	b8bec <vsnprintf>

    if (n<bufsize)
   b9328:	2813      	cmp	r0, #19
   b932a:	d80e      	bhi.n	b934a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b932c:	1d39      	adds	r1, r7, #4
   b932e:	4628      	mov	r0, r5
   b9330:	f7ff febe 	bl	b90b0 <_ZN5Print5writeEPKc>
   b9334:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9336:	b11e      	cbz	r6, b9340 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9338:	4628      	mov	r0, r5
   b933a:	f7ff fed2 	bl	b90e2 <_ZN5Print7printlnEv>
   b933e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9340:	4620      	mov	r0, r4
   b9342:	3718      	adds	r7, #24
   b9344:	46bd      	mov	sp, r7
   b9346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b934a:	f100 0308 	add.w	r3, r0, #8
   b934e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9352:	46e8      	mov	r8, sp
        char bigger[n+1];
   b9354:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9358:	4622      	mov	r2, r4
   b935a:	1c41      	adds	r1, r0, #1
   b935c:	683b      	ldr	r3, [r7, #0]
   b935e:	4668      	mov	r0, sp
   b9360:	f7ff fc44 	bl	b8bec <vsnprintf>
  return write(str);
   b9364:	4669      	mov	r1, sp
   b9366:	4628      	mov	r0, r5
   b9368:	f7ff fea2 	bl	b90b0 <_ZN5Print5writeEPKc>
   b936c:	4604      	mov	r4, r0
   b936e:	46c5      	mov	sp, r8
   b9370:	e7e1      	b.n	b9336 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b9374 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9374:	4b01      	ldr	r3, [pc, #4]	; (b937c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9376:	4a02      	ldr	r2, [pc, #8]	; (b9380 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9378:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b937a:	4770      	bx	lr
   b937c:	2003e6d8 	.word	0x2003e6d8
   b9380:	000bc56c 	.word	0x000bc56c

000b9384 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9384:	4b02      	ldr	r3, [pc, #8]	; (b9390 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9386:	681a      	ldr	r2, [r3, #0]
   b9388:	4b02      	ldr	r3, [pc, #8]	; (b9394 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b938a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b938c:	4770      	bx	lr
   b938e:	bf00      	nop
   b9390:	2003ccc8 	.word	0x2003ccc8
   b9394:	2003e6dc 	.word	0x2003e6dc

000b9398 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b9398:	2100      	movs	r1, #0
   b939a:	f7ff bb7b 	b.w	b8a94 <system_delay_ms>
	...

000b93a0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b93a0:	4b01      	ldr	r3, [pc, #4]	; (b93a8 <_GLOBAL__sub_I_RGB+0x8>)
   b93a2:	2200      	movs	r2, #0
   b93a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b93a6:	4770      	bx	lr
   b93a8:	2003e6e0 	.word	0x2003e6e0

000b93ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b93ac:	4b01      	ldr	r3, [pc, #4]	; (b93b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b93ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b93b0:	4770      	bx	lr
   b93b2:	bf00      	nop
   b93b4:	2003cccc 	.word	0x2003cccc

000b93b8 <serialEventRun>:
{
   b93b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b93ba:	4b0b      	ldr	r3, [pc, #44]	; (b93e8 <serialEventRun+0x30>)
   b93bc:	b143      	cbz	r3, b93d0 <serialEventRun+0x18>
   b93be:	f000 f981 	bl	b96c4 <_Z16_fetch_usbserialv>
   b93c2:	6803      	ldr	r3, [r0, #0]
   b93c4:	691b      	ldr	r3, [r3, #16]
   b93c6:	4798      	blx	r3
   b93c8:	2800      	cmp	r0, #0
   b93ca:	dd01      	ble.n	b93d0 <serialEventRun+0x18>
        serialEvent();
   b93cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b93d0:	4b06      	ldr	r3, [pc, #24]	; (b93ec <serialEventRun+0x34>)
   b93d2:	b143      	cbz	r3, b93e6 <serialEventRun+0x2e>
   b93d4:	f000 fc12 	bl	b9bfc <_Z22__fetch_global_Serial1v>
   b93d8:	6803      	ldr	r3, [r0, #0]
   b93da:	691b      	ldr	r3, [r3, #16]
   b93dc:	4798      	blx	r3
   b93de:	2800      	cmp	r0, #0
   b93e0:	dd01      	ble.n	b93e6 <serialEventRun+0x2e>
        serialEvent1();
   b93e2:	f3af 8000 	nop.w
}
   b93e6:	bd08      	pop	{r3, pc}
	...

000b93f0 <_post_loop>:
{
   b93f0:	b508      	push	{r3, lr}
	serialEventRun();
   b93f2:	f7ff ffe1 	bl	b93b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b93f6:	f7ff f9ed 	bl	b87d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b93fa:	4b01      	ldr	r3, [pc, #4]	; (b9400 <_post_loop+0x10>)
   b93fc:	6018      	str	r0, [r3, #0]
}
   b93fe:	bd08      	pop	{r3, pc}
   b9400:	2003e738 	.word	0x2003e738

000b9404 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9404:	4805      	ldr	r0, [pc, #20]	; (b941c <_Z33system_initialize_user_backup_ramv+0x18>)
   b9406:	4a06      	ldr	r2, [pc, #24]	; (b9420 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9408:	4906      	ldr	r1, [pc, #24]	; (b9424 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b940a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b940c:	1a12      	subs	r2, r2, r0
   b940e:	f001 f97f 	bl	ba710 <memcpy>
    __backup_sram_signature = signature;
   b9412:	4b05      	ldr	r3, [pc, #20]	; (b9428 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9414:	4a05      	ldr	r2, [pc, #20]	; (b942c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9416:	601a      	str	r2, [r3, #0]
}
   b9418:	bd08      	pop	{r3, pc}
   b941a:	bf00      	nop
   b941c:	2003f400 	.word	0x2003f400
   b9420:	2003f404 	.word	0x2003f404
   b9424:	000bc804 	.word	0x000bc804
   b9428:	2003f400 	.word	0x2003f400
   b942c:	9a271c1e 	.word	0x9a271c1e

000b9430 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9430:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9432:	2300      	movs	r3, #0
   b9434:	9300      	str	r3, [sp, #0]
   b9436:	461a      	mov	r2, r3
   b9438:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b943c:	f7ff fb3c 	bl	b8ab8 <system_ctrl_set_result>
}
   b9440:	b003      	add	sp, #12
   b9442:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9448 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9448:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b944a:	8843      	ldrh	r3, [r0, #2]
   b944c:	2b0a      	cmp	r3, #10
   b944e:	d008      	beq.n	b9462 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9450:	2b50      	cmp	r3, #80	; 0x50
   b9452:	d10b      	bne.n	b946c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9454:	4b09      	ldr	r3, [pc, #36]	; (b947c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9456:	681b      	ldr	r3, [r3, #0]
   b9458:	b14b      	cbz	r3, b946e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b945a:	b003      	add	sp, #12
   b945c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9460:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9462:	f7ff ffe5 	bl	b9430 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9466:	b003      	add	sp, #12
   b9468:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b946c:	2300      	movs	r3, #0
   b946e:	9300      	str	r3, [sp, #0]
   b9470:	461a      	mov	r2, r3
   b9472:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9476:	f7ff fb1f 	bl	b8ab8 <system_ctrl_set_result>
}
   b947a:	e7f4      	b.n	b9466 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b947c:	2003e6f4 	.word	0x2003e6f4

000b9480 <module_user_init_hook>:
{
   b9480:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9482:	4812      	ldr	r0, [pc, #72]	; (b94cc <module_user_init_hook+0x4c>)
   b9484:	2100      	movs	r1, #0
   b9486:	f7ff fbc9 	bl	b8c1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b948a:	4b11      	ldr	r3, [pc, #68]	; (b94d0 <module_user_init_hook+0x50>)
   b948c:	681a      	ldr	r2, [r3, #0]
   b948e:	4b11      	ldr	r3, [pc, #68]	; (b94d4 <module_user_init_hook+0x54>)
   b9490:	429a      	cmp	r2, r3
   b9492:	4b11      	ldr	r3, [pc, #68]	; (b94d8 <module_user_init_hook+0x58>)
   b9494:	bf0c      	ite	eq
   b9496:	2201      	moveq	r2, #1
   b9498:	2200      	movne	r2, #0
   b949a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b949c:	d001      	beq.n	b94a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b949e:	f7ff ffb1 	bl	b9404 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b94a2:	f7ff f987 	bl	b87b4 <HAL_RNG_GetRandomNumber>
   b94a6:	4604      	mov	r4, r0
    srand(seed);
   b94a8:	f001 f958 	bl	ba75c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b94ac:	4b0b      	ldr	r3, [pc, #44]	; (b94dc <module_user_init_hook+0x5c>)
   b94ae:	b113      	cbz	r3, b94b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b94b0:	4620      	mov	r0, r4
   b94b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b94b6:	2100      	movs	r1, #0
   b94b8:	4808      	ldr	r0, [pc, #32]	; (b94dc <module_user_init_hook+0x5c>)
   b94ba:	f7ff fb67 	bl	b8b8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b94be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b94c2:	4807      	ldr	r0, [pc, #28]	; (b94e0 <module_user_init_hook+0x60>)
   b94c4:	2100      	movs	r1, #0
   b94c6:	f7ff baed 	b.w	b8aa4 <system_ctrl_set_app_request_handler>
   b94ca:	bf00      	nop
   b94cc:	000b93ad 	.word	0x000b93ad
   b94d0:	2003f400 	.word	0x2003f400
   b94d4:	9a271c1e 	.word	0x9a271c1e
   b94d8:	2003e6f0 	.word	0x2003e6f0
   b94dc:	00000000 	.word	0x00000000
   b94e0:	000b9449 	.word	0x000b9449

000b94e4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b94e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b94e6:	230c      	movs	r3, #12
   b94e8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b94ec:	6803      	ldr	r3, [r0, #0]
   b94ee:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b94f2:	7a03      	ldrb	r3, [r0, #8]
   b94f4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b94f8:	6843      	ldr	r3, [r0, #4]
   b94fa:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b94fc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b94fe:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b9500:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b9504:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b9506:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b950a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b950e:	f7ff fb45 	bl	b8b9c <spark_cloud_disconnect>
}
   b9512:	b005      	add	sp, #20
   b9514:	f85d fb04 	ldr.w	pc, [sp], #4

000b9518 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9518:	4770      	bx	lr

000b951a <_ZN9IPAddressD0Ev>:
   b951a:	b510      	push	{r4, lr}
   b951c:	2118      	movs	r1, #24
   b951e:	4604      	mov	r4, r0
   b9520:	f7fa fdbb 	bl	b409a <_ZdlPvj>
   b9524:	4620      	mov	r0, r4
   b9526:	bd10      	pop	{r4, pc}

000b9528 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9528:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b952a:	7d03      	ldrb	r3, [r0, #20]
   b952c:	2b06      	cmp	r3, #6
{
   b952e:	b08d      	sub	sp, #52	; 0x34
   b9530:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9532:	f100 0704 	add.w	r7, r0, #4
   b9536:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b953a:	d012      	beq.n	b9562 <_ZNK9IPAddress7printToER5Print+0x3a>
   b953c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b9540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9544:	220a      	movs	r2, #10
   b9546:	4630      	mov	r0, r6
   b9548:	f7ff fde1 	bl	b910e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b954c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b954e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9550:	d019      	beq.n	b9586 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9552:	2c00      	cmp	r4, #0
   b9554:	d0f4      	beq.n	b9540 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9556:	212e      	movs	r1, #46	; 0x2e
   b9558:	4630      	mov	r0, r6
   b955a:	f7ff fdbf 	bl	b90dc <_ZN5Print5printEc>
   b955e:	4404      	add	r4, r0
   b9560:	e7ee      	b.n	b9540 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9562:	232f      	movs	r3, #47	; 0x2f
   b9564:	466a      	mov	r2, sp
   b9566:	4639      	mov	r1, r7
   b9568:	200a      	movs	r0, #10
		buf[0] = 0;
   b956a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b956e:	f7ff f959 	bl	b8824 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9572:	4668      	mov	r0, sp
   b9574:	f001 f928 	bl	ba7c8 <strlen>
   b9578:	6833      	ldr	r3, [r6, #0]
   b957a:	4602      	mov	r2, r0
   b957c:	68db      	ldr	r3, [r3, #12]
   b957e:	4669      	mov	r1, sp
   b9580:	4630      	mov	r0, r6
   b9582:	4798      	blx	r3
   b9584:	4604      	mov	r4, r0
    }
    return n;
}
   b9586:	4620      	mov	r0, r4
   b9588:	b00d      	add	sp, #52	; 0x34
   b958a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b958c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b958c:	b510      	push	{r4, lr}
   b958e:	4b05      	ldr	r3, [pc, #20]	; (b95a4 <_ZN9IPAddressC1Ev+0x18>)
   b9590:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9592:	2211      	movs	r2, #17
   b9594:	f840 3b04 	str.w	r3, [r0], #4
   b9598:	2100      	movs	r1, #0
   b959a:	f001 f8c7 	bl	ba72c <memset>
}
   b959e:	4620      	mov	r0, r4
   b95a0:	bd10      	pop	{r4, pc}
   b95a2:	bf00      	nop
   b95a4:	000bc594 	.word	0x000bc594

000b95a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b95a8:	4603      	mov	r3, r0
   b95aa:	4a07      	ldr	r2, [pc, #28]	; (b95c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b95ac:	b510      	push	{r4, lr}
   b95ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b95b2:	f101 0210 	add.w	r2, r1, #16
   b95b6:	f851 4b04 	ldr.w	r4, [r1], #4
   b95ba:	f843 4b04 	str.w	r4, [r3], #4
   b95be:	4291      	cmp	r1, r2
   b95c0:	d1f9      	bne.n	b95b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b95c2:	780a      	ldrb	r2, [r1, #0]
   b95c4:	701a      	strb	r2, [r3, #0]
}
   b95c6:	bd10      	pop	{r4, pc}
   b95c8:	000bc594 	.word	0x000bc594

000b95cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b95cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b95ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b95d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b95d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b95da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b95de:	2304      	movs	r3, #4
   b95e0:	6041      	str	r1, [r0, #4]
   b95e2:	7503      	strb	r3, [r0, #20]
}
   b95e4:	bd10      	pop	{r4, pc}
	...

000b95e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b95e8:	b507      	push	{r0, r1, r2, lr}
   b95ea:	4b06      	ldr	r3, [pc, #24]	; (b9604 <_ZN9IPAddressC1EPKh+0x1c>)
   b95ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b95ee:	78cb      	ldrb	r3, [r1, #3]
   b95f0:	9300      	str	r3, [sp, #0]
   b95f2:	788b      	ldrb	r3, [r1, #2]
   b95f4:	784a      	ldrb	r2, [r1, #1]
   b95f6:	7809      	ldrb	r1, [r1, #0]
   b95f8:	f7ff ffe8 	bl	b95cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b95fc:	b003      	add	sp, #12
   b95fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b9602:	bf00      	nop
   b9604:	000bc594 	.word	0x000bc594

000b9608 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9608:	7441      	strb	r1, [r0, #17]
}
   b960a:	4770      	bx	lr

000b960c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b960c:	4770      	bx	lr

000b960e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b960e:	4770      	bx	lr

000b9610 <_ZN9USBSerial4readEv>:
{
   b9610:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9612:	2100      	movs	r1, #0
   b9614:	7c00      	ldrb	r0, [r0, #16]
   b9616:	f7ff fa15 	bl	b8a44 <HAL_USB_USART_Receive_Data>
}
   b961a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b961e:	bd08      	pop	{r3, pc}

000b9620 <_ZN9USBSerial4peekEv>:
{
   b9620:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9622:	2101      	movs	r1, #1
   b9624:	7c00      	ldrb	r0, [r0, #16]
   b9626:	f7ff fa0d 	bl	b8a44 <HAL_USB_USART_Receive_Data>
}
   b962a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b962e:	bd08      	pop	{r3, pc}

000b9630 <_ZN9USBSerial17availableForWriteEv>:
{
   b9630:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9632:	7c00      	ldrb	r0, [r0, #16]
   b9634:	f7ff f9fe 	bl	b8a34 <HAL_USB_USART_Available_Data_For_Write>
}
   b9638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b963c:	bd08      	pop	{r3, pc}

000b963e <_ZN9USBSerial9availableEv>:
{
   b963e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9640:	7c00      	ldrb	r0, [r0, #16]
   b9642:	f7ff f9ef 	bl	b8a24 <HAL_USB_USART_Available_Data>
}
   b9646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b964a:	bd08      	pop	{r3, pc}

000b964c <_ZN9USBSerial5writeEh>:
{
   b964c:	b513      	push	{r0, r1, r4, lr}
   b964e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9650:	7c00      	ldrb	r0, [r0, #16]
{
   b9652:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9654:	f7ff f9ee 	bl	b8a34 <HAL_USB_USART_Available_Data_For_Write>
   b9658:	2800      	cmp	r0, #0
   b965a:	9901      	ldr	r1, [sp, #4]
   b965c:	dc01      	bgt.n	b9662 <_ZN9USBSerial5writeEh+0x16>
   b965e:	7c60      	ldrb	r0, [r4, #17]
   b9660:	b120      	cbz	r0, b966c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9662:	7c20      	ldrb	r0, [r4, #16]
   b9664:	f7ff f9f6 	bl	b8a54 <HAL_USB_USART_Send_Data>
   b9668:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b966c:	b002      	add	sp, #8
   b966e:	bd10      	pop	{r4, pc}

000b9670 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9670:	7c00      	ldrb	r0, [r0, #16]
   b9672:	f7ff b9f7 	b.w	b8a64 <HAL_USB_USART_Flush_Data>

000b9676 <_ZN9USBSerialD0Ev>:
   b9676:	b510      	push	{r4, lr}
   b9678:	2114      	movs	r1, #20
   b967a:	4604      	mov	r4, r0
   b967c:	f7fa fd0d 	bl	b409a <_ZdlPvj>
   b9680:	4620      	mov	r0, r4
   b9682:	bd10      	pop	{r4, pc}

000b9684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9684:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b968a:	4604      	mov	r4, r0
   b968c:	4608      	mov	r0, r1
   b968e:	2100      	movs	r1, #0
   b9690:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9694:	4b04      	ldr	r3, [pc, #16]	; (b96a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9696:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9698:	2301      	movs	r3, #1
  _serial = serial;
   b969a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b969c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b969e:	4611      	mov	r1, r2
   b96a0:	f7ff f9b0 	bl	b8a04 <HAL_USB_USART_Init>
}
   b96a4:	4620      	mov	r0, r4
   b96a6:	bd10      	pop	{r4, pc}
   b96a8:	000bc5a8 	.word	0x000bc5a8

000b96ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b96ac:	7c00      	ldrb	r0, [r0, #16]
   b96ae:	2200      	movs	r2, #0
   b96b0:	f7ff b9b0 	b.w	b8a14 <HAL_USB_USART_Begin>

000b96b4 <_Z19acquireSerialBufferv>:
{
   b96b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b96b6:	2214      	movs	r2, #20
{
   b96b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b96ba:	2100      	movs	r1, #0
   b96bc:	f001 f836 	bl	ba72c <memset>
}
   b96c0:	4620      	mov	r0, r4
   b96c2:	bd10      	pop	{r4, pc}

000b96c4 <_Z16_fetch_usbserialv>:
{
   b96c4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b96c6:	4c0f      	ldr	r4, [pc, #60]	; (b9704 <_Z16_fetch_usbserialv+0x40>)
{
   b96c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b96ca:	a803      	add	r0, sp, #12
   b96cc:	f7ff fff2 	bl	b96b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b96d0:	7821      	ldrb	r1, [r4, #0]
   b96d2:	f3bf 8f5b 	dmb	ish
   b96d6:	f011 0101 	ands.w	r1, r1, #1
   b96da:	d10f      	bne.n	b96fc <_Z16_fetch_usbserialv+0x38>
   b96dc:	4620      	mov	r0, r4
   b96de:	9101      	str	r1, [sp, #4]
   b96e0:	f7fa fcea 	bl	b40b8 <__cxa_guard_acquire>
   b96e4:	9901      	ldr	r1, [sp, #4]
   b96e6:	b148      	cbz	r0, b96fc <_Z16_fetch_usbserialv+0x38>
   b96e8:	aa03      	add	r2, sp, #12
   b96ea:	4807      	ldr	r0, [pc, #28]	; (b9708 <_Z16_fetch_usbserialv+0x44>)
   b96ec:	f7ff ffca 	bl	b9684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b96f0:	4620      	mov	r0, r4
   b96f2:	f7fa fce6 	bl	b40c2 <__cxa_guard_release>
   b96f6:	4805      	ldr	r0, [pc, #20]	; (b970c <_Z16_fetch_usbserialv+0x48>)
   b96f8:	f000 fffc 	bl	ba6f4 <atexit>
	return _usbserial;
}
   b96fc:	4802      	ldr	r0, [pc, #8]	; (b9708 <_Z16_fetch_usbserialv+0x44>)
   b96fe:	b008      	add	sp, #32
   b9700:	bd10      	pop	{r4, pc}
   b9702:	bf00      	nop
   b9704:	2003e6f8 	.word	0x2003e6f8
   b9708:	2003e6fc 	.word	0x2003e6fc
   b970c:	000b960d 	.word	0x000b960d

000b9710 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b9710:	f7ff b838 	b.w	b8784 <HAL_Interrupts_Disable_All>

000b9714 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b9714:	f7ff b82e 	b.w	b8774 <HAL_Interrupts_Enable_All>

000b9718 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b9718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b971a:	b287      	uxth	r7, r0
{
   b971c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b971e:	4638      	mov	r0, r7
{
   b9720:	460d      	mov	r5, r1
   b9722:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9724:	f000 f9ba 	bl	b9a9c <pinAvailable>
   b9728:	b160      	cbz	r0, b9744 <tone+0x2c>
   b972a:	2102      	movs	r1, #2
   b972c:	4638      	mov	r0, r7
   b972e:	f7fe fff9 	bl	b8724 <HAL_Validate_Pin_Function>
   b9732:	2802      	cmp	r0, #2
   b9734:	d106      	bne.n	b9744 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b9736:	4632      	mov	r2, r6
   b9738:	4629      	mov	r1, r5
   b973a:	4620      	mov	r0, r4
    }
}
   b973c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b9740:	f7ff b950 	b.w	b89e4 <HAL_Tone_Start>
}
   b9744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9746 <noTone>:

void noTone(uint8_t pin)
{
   b9746:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b9748:	b285      	uxth	r5, r0
{
   b974a:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b974c:	4628      	mov	r0, r5
   b974e:	f000 f9a5 	bl	b9a9c <pinAvailable>
   b9752:	b150      	cbz	r0, b976a <noTone+0x24>
   b9754:	2102      	movs	r1, #2
   b9756:	4628      	mov	r0, r5
   b9758:	f7fe ffe4 	bl	b8724 <HAL_Validate_Pin_Function>
   b975c:	2802      	cmp	r0, #2
   b975e:	d104      	bne.n	b976a <noTone+0x24>
        HAL_Tone_Stop(pin);
   b9760:	4620      	mov	r0, r4
    }
}
   b9762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   b9766:	f7ff b945 	b.w	b89f4 <HAL_Tone_Stop>
}
   b976a:	bd38      	pop	{r3, r4, r5, pc}

000b976c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b976c:	4770      	bx	lr

000b976e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b976e:	7441      	strb	r1, [r0, #17]
}
   b9770:	4770      	bx	lr

000b9772 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9772:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9774:	7c00      	ldrb	r0, [r0, #16]
   b9776:	f7ff f88d 	bl	b8894 <hal_usart_available_data_for_write>
}
   b977a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b977e:	bd08      	pop	{r3, pc}

000b9780 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9780:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9782:	7c00      	ldrb	r0, [r0, #16]
   b9784:	f7ff f85e 	bl	b8844 <hal_usart_available>
}
   b9788:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b978c:	bd08      	pop	{r3, pc}

000b978e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b978e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9790:	7c00      	ldrb	r0, [r0, #16]
   b9792:	f7ff f867 	bl	b8864 <hal_usart_peek>
}
   b9796:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b979a:	bd08      	pop	{r3, pc}

000b979c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b979c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b979e:	7c00      	ldrb	r0, [r0, #16]
   b97a0:	f7ff f858 	bl	b8854 <hal_usart_read>
}
   b97a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b97a8:	bd08      	pop	{r3, pc}

000b97aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b97aa:	7c00      	ldrb	r0, [r0, #16]
   b97ac:	f7ff b862 	b.w	b8874 <hal_usart_flush>

000b97b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b97b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b97b2:	7c45      	ldrb	r5, [r0, #17]
{
   b97b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b97b6:	b12d      	cbz	r5, b97c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b97b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b97ba:	b003      	add	sp, #12
   b97bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b97c0:	f7ff b838 	b.w	b8834 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b97c4:	7c00      	ldrb	r0, [r0, #16]
   b97c6:	9101      	str	r1, [sp, #4]
   b97c8:	f7ff f864 	bl	b8894 <hal_usart_available_data_for_write>
   b97cc:	2800      	cmp	r0, #0
   b97ce:	9901      	ldr	r1, [sp, #4]
   b97d0:	dcf2      	bgt.n	b97b8 <_ZN11USARTSerial5writeEh+0x8>
}
   b97d2:	4628      	mov	r0, r5
   b97d4:	b003      	add	sp, #12
   b97d6:	bd30      	pop	{r4, r5, pc}

000b97d8 <_ZN11USARTSerialD0Ev>:
   b97d8:	b510      	push	{r4, lr}
   b97da:	2114      	movs	r1, #20
   b97dc:	4604      	mov	r4, r0
   b97de:	f7fa fc5c 	bl	b409a <_ZdlPvj>
   b97e2:	4620      	mov	r0, r4
   b97e4:	bd10      	pop	{r4, pc}
	...

000b97e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b97e8:	b510      	push	{r4, lr}
   b97ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b97ee:	4604      	mov	r4, r0
   b97f0:	4608      	mov	r0, r1
   b97f2:	4611      	mov	r1, r2
   b97f4:	2200      	movs	r2, #0
   b97f6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b97fa:	4b04      	ldr	r3, [pc, #16]	; (b980c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b97fc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b97fe:	2301      	movs	r3, #1
  _serial = serial;
   b9800:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9802:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9804:	f7ff f84e 	bl	b88a4 <hal_usart_init_ex>
}
   b9808:	4620      	mov	r0, r4
   b980a:	bd10      	pop	{r4, pc}
   b980c:	000bc5d8 	.word	0x000bc5d8

000b9810 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9810:	4770      	bx	lr

000b9812 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9814:	4606      	mov	r6, r0
   b9816:	4615      	mov	r5, r2
   b9818:	460c      	mov	r4, r1
   b981a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b981c:	42bc      	cmp	r4, r7
   b981e:	d006      	beq.n	b982e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9820:	6833      	ldr	r3, [r6, #0]
   b9822:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9826:	689b      	ldr	r3, [r3, #8]
   b9828:	4630      	mov	r0, r6
   b982a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b982c:	e7f6      	b.n	b981c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b982e:	4628      	mov	r0, r5
   b9830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9832 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9832:	7c00      	ldrb	r0, [r0, #16]
   b9834:	2200      	movs	r2, #0
   b9836:	f7ff b85d 	b.w	b88f4 <hal_i2c_write>

000b983a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b983a:	7c00      	ldrb	r0, [r0, #16]
   b983c:	2100      	movs	r1, #0
   b983e:	f7ff b861 	b.w	b8904 <hal_i2c_available>

000b9842 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9842:	7c00      	ldrb	r0, [r0, #16]
   b9844:	2100      	movs	r1, #0
   b9846:	f7ff b865 	b.w	b8914 <hal_i2c_read>

000b984a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b984a:	7c00      	ldrb	r0, [r0, #16]
   b984c:	2100      	movs	r1, #0
   b984e:	f7ff b869 	b.w	b8924 <hal_i2c_peek>

000b9852 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9852:	7c00      	ldrb	r0, [r0, #16]
   b9854:	2100      	movs	r1, #0
   b9856:	f7ff b86d 	b.w	b8934 <hal_i2c_flush>

000b985a <_ZN7TwoWireD0Ev>:
   b985a:	b510      	push	{r4, lr}
   b985c:	2114      	movs	r1, #20
   b985e:	4604      	mov	r4, r0
   b9860:	f7fa fc1b 	bl	b409a <_ZdlPvj>
   b9864:	4620      	mov	r0, r4
   b9866:	bd10      	pop	{r4, pc}

000b9868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9868:	b510      	push	{r4, lr}
   b986a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b986e:	4604      	mov	r4, r0
   b9870:	4608      	mov	r0, r1
   b9872:	2100      	movs	r1, #0
   b9874:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9878:	4b03      	ldr	r3, [pc, #12]	; (b9888 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b987a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b987c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b987e:	4611      	mov	r1, r2
   b9880:	f7ff f868 	bl	b8954 <hal_i2c_init>
}
   b9884:	4620      	mov	r0, r4
   b9886:	bd10      	pop	{r4, pc}
   b9888:	000bc608 	.word	0x000bc608

000b988c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b988c:	7c00      	ldrb	r0, [r0, #16]
   b988e:	2200      	movs	r2, #0
   b9890:	f7ff b810 	b.w	b88b4 <hal_i2c_set_speed>

000b9894 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9894:	2300      	movs	r3, #0
   b9896:	7c00      	ldrb	r0, [r0, #16]
   b9898:	461a      	mov	r2, r3
   b989a:	4619      	mov	r1, r3
   b989c:	f7ff b812 	b.w	b88c4 <hal_i2c_begin>

000b98a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b98a0:	7c00      	ldrb	r0, [r0, #16]
   b98a2:	2200      	movs	r2, #0
   b98a4:	f7ff b816 	b.w	b88d4 <hal_i2c_begin_transmission>

000b98a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b98a8:	b2c9      	uxtb	r1, r1
   b98aa:	f7ff bff9 	b.w	b98a0 <_ZN7TwoWire17beginTransmissionEh>

000b98ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b98ae:	7c00      	ldrb	r0, [r0, #16]
   b98b0:	2200      	movs	r2, #0
   b98b2:	f7ff b817 	b.w	b88e4 <hal_i2c_end_transmission>

000b98b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b98b6:	2101      	movs	r1, #1
   b98b8:	f7ff bff9 	b.w	b98ae <_ZN7TwoWire15endTransmissionEh>

000b98bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b98bc:	2200      	movs	r2, #0
   b98be:	6840      	ldr	r0, [r0, #4]
   b98c0:	4611      	mov	r1, r2
   b98c2:	f7ff b91b 	b.w	b8afc <network_ready>

000b98c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b98c6:	2200      	movs	r2, #0
   b98c8:	6840      	ldr	r0, [r0, #4]
   b98ca:	4611      	mov	r1, r2
   b98cc:	f7ff b936 	b.w	b8b3c <network_listening>

000b98d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b98d0:	2200      	movs	r2, #0
   b98d2:	6840      	ldr	r0, [r0, #4]
   b98d4:	4611      	mov	r1, r2
   b98d6:	f7ff b941 	b.w	b8b5c <network_get_listen_timeout>

000b98da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b98da:	6840      	ldr	r0, [r0, #4]
   b98dc:	2200      	movs	r2, #0
   b98de:	f7ff b935 	b.w	b8b4c <network_set_listen_timeout>

000b98e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b98e2:	6840      	ldr	r0, [r0, #4]
   b98e4:	2200      	movs	r2, #0
   b98e6:	f081 0101 	eor.w	r1, r1, #1
   b98ea:	f7ff b91f 	b.w	b8b2c <network_listen>

000b98ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b98ee:	2300      	movs	r3, #0
   b98f0:	6840      	ldr	r0, [r0, #4]
   b98f2:	461a      	mov	r2, r3
   b98f4:	4619      	mov	r1, r3
   b98f6:	f7ff b911 	b.w	b8b1c <network_off>

000b98fa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b98fa:	2300      	movs	r3, #0
   b98fc:	6840      	ldr	r0, [r0, #4]
   b98fe:	461a      	mov	r2, r3
   b9900:	4619      	mov	r1, r3
   b9902:	f7ff b903 	b.w	b8b0c <network_on>

000b9906 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9906:	2200      	movs	r2, #0
   b9908:	6840      	ldr	r0, [r0, #4]
   b990a:	4611      	mov	r1, r2
   b990c:	f7ff b8e6 	b.w	b8adc <network_connecting>

000b9910 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9910:	6840      	ldr	r0, [r0, #4]
   b9912:	2200      	movs	r2, #0
   b9914:	2102      	movs	r1, #2
   b9916:	f7ff b8e9 	b.w	b8aec <network_disconnect>

000b991a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b991a:	2300      	movs	r3, #0
   b991c:	6840      	ldr	r0, [r0, #4]
   b991e:	461a      	mov	r2, r3
   b9920:	f7ff b8d4 	b.w	b8acc <network_connect>

000b9924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9924:	4b02      	ldr	r3, [pc, #8]	; (b9930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9926:	2204      	movs	r2, #4
   b9928:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b992a:	4a02      	ldr	r2, [pc, #8]	; (b9934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b992c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b992e:	4770      	bx	lr
   b9930:	2003e710 	.word	0x2003e710
   b9934:	000bc630 	.word	0x000bc630

000b9938 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9938:	2300      	movs	r3, #0
   b993a:	6840      	ldr	r0, [r0, #4]
   b993c:	461a      	mov	r2, r3
   b993e:	f7ff b8c5 	b.w	b8acc <network_connect>

000b9942 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9942:	6840      	ldr	r0, [r0, #4]
   b9944:	2200      	movs	r2, #0
   b9946:	2102      	movs	r1, #2
   b9948:	f7ff b8d0 	b.w	b8aec <network_disconnect>

000b994c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b994c:	2200      	movs	r2, #0
   b994e:	6840      	ldr	r0, [r0, #4]
   b9950:	4611      	mov	r1, r2
   b9952:	f7ff b8c3 	b.w	b8adc <network_connecting>

000b9956 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9956:	2200      	movs	r2, #0
   b9958:	6840      	ldr	r0, [r0, #4]
   b995a:	4611      	mov	r1, r2
   b995c:	f7ff b8ce 	b.w	b8afc <network_ready>

000b9960 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9960:	2300      	movs	r3, #0
   b9962:	6840      	ldr	r0, [r0, #4]
   b9964:	461a      	mov	r2, r3
   b9966:	4619      	mov	r1, r3
   b9968:	f7ff b8d0 	b.w	b8b0c <network_on>

000b996c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b996c:	2300      	movs	r3, #0
   b996e:	6840      	ldr	r0, [r0, #4]
   b9970:	461a      	mov	r2, r3
   b9972:	4619      	mov	r1, r3
   b9974:	f7ff b8d2 	b.w	b8b1c <network_off>

000b9978 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9978:	6840      	ldr	r0, [r0, #4]
   b997a:	2100      	movs	r1, #0
   b997c:	f7ff b8f6 	b.w	b8b6c <network_is_on>

000b9980 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9980:	6840      	ldr	r0, [r0, #4]
   b9982:	2100      	movs	r1, #0
   b9984:	f7ff b8fa 	b.w	b8b7c <network_is_off>

000b9988 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9988:	6840      	ldr	r0, [r0, #4]
   b998a:	2200      	movs	r2, #0
   b998c:	f081 0101 	eor.w	r1, r1, #1
   b9990:	f7ff b8cc 	b.w	b8b2c <network_listen>

000b9994 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9994:	6840      	ldr	r0, [r0, #4]
   b9996:	2200      	movs	r2, #0
   b9998:	f7ff b8d8 	b.w	b8b4c <network_set_listen_timeout>

000b999c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b999c:	2200      	movs	r2, #0
   b999e:	6840      	ldr	r0, [r0, #4]
   b99a0:	4611      	mov	r1, r2
   b99a2:	f7ff b8db 	b.w	b8b5c <network_get_listen_timeout>

000b99a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b99a6:	2200      	movs	r2, #0
   b99a8:	6840      	ldr	r0, [r0, #4]
   b99aa:	4611      	mov	r1, r2
   b99ac:	f7ff b8c6 	b.w	b8b3c <network_listening>

000b99b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b99b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b99b4:	b095      	sub	sp, #84	; 0x54
   b99b6:	4614      	mov	r4, r2
   b99b8:	460d      	mov	r5, r1
   b99ba:	4607      	mov	r7, r0
    IPAddress addr;
   b99bc:	f7ff fde6 	bl	b958c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b99c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b99c2:	221c      	movs	r2, #28
   b99c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b99c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b99c8:	f000 feb0 	bl	ba72c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b99cc:	2340      	movs	r3, #64	; 0x40
   b99ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b99d0:	4620      	mov	r0, r4
   b99d2:	466b      	mov	r3, sp
   b99d4:	aa0c      	add	r2, sp, #48	; 0x30
   b99d6:	2100      	movs	r1, #0
   b99d8:	f7fe fe9c 	bl	b8714 <netdb_getaddrinfo>
    if (!r) {
   b99dc:	4604      	mov	r4, r0
   b99de:	2800      	cmp	r0, #0
   b99e0:	d14b      	bne.n	b9a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b99e2:	4602      	mov	r2, r0
   b99e4:	2101      	movs	r1, #1
   b99e6:	6868      	ldr	r0, [r5, #4]
   b99e8:	f7ff f888 	bl	b8afc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b99ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b99ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b99f0:	4622      	mov	r2, r4
   b99f2:	6868      	ldr	r0, [r5, #4]
   b99f4:	f7ff f882 	bl	b8afc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b99f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b99fa:	4681      	mov	r9, r0
        bool ok = false;
   b99fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b99fe:	2e00      	cmp	r6, #0
   b9a00:	d03b      	beq.n	b9a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9a02:	2900      	cmp	r1, #0
   b9a04:	d139      	bne.n	b9a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9a06:	6873      	ldr	r3, [r6, #4]
   b9a08:	2b02      	cmp	r3, #2
   b9a0a:	d003      	beq.n	b9a14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9a0c:	2b0a      	cmp	r3, #10
   b9a0e:	d011      	beq.n	b9a34 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9a10:	69f6      	ldr	r6, [r6, #28]
   b9a12:	e7f4      	b.n	b99fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9a14:	f1b8 0f00 	cmp.w	r8, #0
   b9a18:	d0fa      	beq.n	b9a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9a1a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9a1c:	a806      	add	r0, sp, #24
   b9a1e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9a20:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9a22:	f7ff fde1 	bl	b95e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a28:	1d3c      	adds	r4, r7, #4
   b9a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a2c:	682b      	ldr	r3, [r5, #0]
   b9a2e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9a30:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9a32:	e7ed      	b.n	b9a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9a34:	f1b9 0f00 	cmp.w	r9, #0
   b9a38:	d0ea      	beq.n	b9a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9a3a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9a3c:	2210      	movs	r2, #16
   b9a3e:	a801      	add	r0, sp, #4
   b9a40:	f000 fe74 	bl	ba72c <memset>
                    a.v = 6;
   b9a44:	2306      	movs	r3, #6
   b9a46:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9a4a:	ad01      	add	r5, sp, #4
   b9a4c:	f104 0308 	add.w	r3, r4, #8
   b9a50:	3418      	adds	r4, #24
   b9a52:	6818      	ldr	r0, [r3, #0]
   b9a54:	6859      	ldr	r1, [r3, #4]
   b9a56:	462a      	mov	r2, r5
   b9a58:	c203      	stmia	r2!, {r0, r1}
   b9a5a:	3308      	adds	r3, #8
   b9a5c:	42a3      	cmp	r3, r4
   b9a5e:	4615      	mov	r5, r2
   b9a60:	d1f7      	bne.n	b9a52 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9a62:	a901      	add	r1, sp, #4
   b9a64:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9a66:	ad07      	add	r5, sp, #28
   b9a68:	f7ff fd9e 	bl	b95a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a6e:	1d3c      	adds	r4, r7, #4
   b9a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a72:	682b      	ldr	r3, [r5, #0]
   b9a74:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9a76:	4649      	mov	r1, r9
   b9a78:	e7ca      	b.n	b9a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9a7a:	9800      	ldr	r0, [sp, #0]
   b9a7c:	f7fe fe42 	bl	b8704 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9a80:	4638      	mov	r0, r7
   b9a82:	b015      	add	sp, #84	; 0x54
   b9a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9a88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9a88:	4b02      	ldr	r3, [pc, #8]	; (b9a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9a8a:	4a03      	ldr	r2, [pc, #12]	; (b9a98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9a8c:	601a      	str	r2, [r3, #0]
   b9a8e:	2200      	movs	r2, #0
   b9a90:	605a      	str	r2, [r3, #4]

} // spark
   b9a92:	4770      	bx	lr
   b9a94:	2003e718 	.word	0x2003e718
   b9a98:	000bc66c 	.word	0x000bc66c

000b9a9c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9a9c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9a9e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9aa0:	d902      	bls.n	b9aa8 <pinAvailable+0xc>
    return false;
   b9aa2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9aa4:	b002      	add	sp, #8
   b9aa6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9aa8:	f1a0 030b 	sub.w	r3, r0, #11
   b9aac:	2b02      	cmp	r3, #2
   b9aae:	d81a      	bhi.n	b9ae6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9ab0:	4c17      	ldr	r4, [pc, #92]	; (b9b10 <pinAvailable+0x74>)
   b9ab2:	7821      	ldrb	r1, [r4, #0]
   b9ab4:	f3bf 8f5b 	dmb	ish
   b9ab8:	f011 0101 	ands.w	r1, r1, #1
   b9abc:	d10b      	bne.n	b9ad6 <pinAvailable+0x3a>
   b9abe:	4620      	mov	r0, r4
   b9ac0:	9101      	str	r1, [sp, #4]
   b9ac2:	f7fa faf9 	bl	b40b8 <__cxa_guard_acquire>
   b9ac6:	9901      	ldr	r1, [sp, #4]
   b9ac8:	b128      	cbz	r0, b9ad6 <pinAvailable+0x3a>
   b9aca:	4812      	ldr	r0, [pc, #72]	; (b9b14 <pinAvailable+0x78>)
   b9acc:	f7ff f8f2 	bl	b8cb4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9ad0:	4620      	mov	r0, r4
   b9ad2:	f7fa faf6 	bl	b40c2 <__cxa_guard_release>
   b9ad6:	4b0f      	ldr	r3, [pc, #60]	; (b9b14 <pinAvailable+0x78>)
   b9ad8:	7818      	ldrb	r0, [r3, #0]
   b9ada:	f7fe ff5b 	bl	b8994 <hal_spi_is_enabled>
   b9ade:	2800      	cmp	r0, #0
   b9ae0:	d1df      	bne.n	b9aa2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9ae2:	2001      	movs	r0, #1
   b9ae4:	e7de      	b.n	b9aa4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9ae6:	2801      	cmp	r0, #1
   b9ae8:	d809      	bhi.n	b9afe <pinAvailable+0x62>
   b9aea:	f000 f8d9 	bl	b9ca0 <_Z19__fetch_global_Wirev>
   b9aee:	2100      	movs	r1, #0
   b9af0:	7c00      	ldrb	r0, [r0, #16]
   b9af2:	f7fe ff27 	bl	b8944 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9af6:	f080 0001 	eor.w	r0, r0, #1
   b9afa:	b2c0      	uxtb	r0, r0
   b9afc:	e7d2      	b.n	b9aa4 <pinAvailable+0x8>
   b9afe:	3809      	subs	r0, #9
   b9b00:	2801      	cmp	r0, #1
   b9b02:	d8ee      	bhi.n	b9ae2 <pinAvailable+0x46>
   b9b04:	f000 f87a 	bl	b9bfc <_Z22__fetch_global_Serial1v>
   b9b08:	7c00      	ldrb	r0, [r0, #16]
   b9b0a:	f7fe febb 	bl	b8884 <hal_usart_is_enabled>
   b9b0e:	e7f2      	b.n	b9af6 <pinAvailable+0x5a>
   b9b10:	2003cd34 	.word	0x2003cd34
   b9b14:	2003cd38 	.word	0x2003cd38

000b9b18 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9b18:	2823      	cmp	r0, #35	; 0x23
{
   b9b1a:	b538      	push	{r3, r4, r5, lr}
   b9b1c:	4604      	mov	r4, r0
   b9b1e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9b20:	d80a      	bhi.n	b9b38 <pinMode+0x20>
   b9b22:	29ff      	cmp	r1, #255	; 0xff
   b9b24:	d008      	beq.n	b9b38 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9b26:	f7ff ffb9 	bl	b9a9c <pinAvailable>
   b9b2a:	b128      	cbz	r0, b9b38 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9b2c:	4629      	mov	r1, r5
   b9b2e:	4620      	mov	r0, r4
}
   b9b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9b34:	f7fe bdfe 	b.w	b8734 <HAL_Pin_Mode>
}
   b9b38:	bd38      	pop	{r3, r4, r5, pc}

000b9b3a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b9b3a:	b538      	push	{r3, r4, r5, lr}
   b9b3c:	4604      	mov	r4, r0
   b9b3e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9b40:	f7fe fe00 	bl	b8744 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9b44:	28ff      	cmp	r0, #255	; 0xff
   b9b46:	d010      	beq.n	b9b6a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9b48:	2806      	cmp	r0, #6
   b9b4a:	d804      	bhi.n	b9b56 <digitalWrite+0x1c>
   b9b4c:	234d      	movs	r3, #77	; 0x4d
   b9b4e:	fa23 f000 	lsr.w	r0, r3, r0
   b9b52:	07c3      	lsls	r3, r0, #31
   b9b54:	d409      	bmi.n	b9b6a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9b56:	4620      	mov	r0, r4
   b9b58:	f7ff ffa0 	bl	b9a9c <pinAvailable>
   b9b5c:	b128      	cbz	r0, b9b6a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9b5e:	4629      	mov	r1, r5
   b9b60:	4620      	mov	r0, r4
}
   b9b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9b66:	f7fe bdf5 	b.w	b8754 <HAL_GPIO_Write>
}
   b9b6a:	bd38      	pop	{r3, r4, r5, pc}

000b9b6c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9b6c:	b510      	push	{r4, lr}
   b9b6e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9b70:	f7fe fde8 	bl	b8744 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9b74:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9b76:	b2db      	uxtb	r3, r3
   b9b78:	2b01      	cmp	r3, #1
   b9b7a:	d908      	bls.n	b9b8e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9b7c:	4620      	mov	r0, r4
   b9b7e:	f7ff ff8d 	bl	b9a9c <pinAvailable>
   b9b82:	b120      	cbz	r0, b9b8e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9b84:	4620      	mov	r0, r4
}
   b9b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b9b8a:	f7fe bdeb 	b.w	b8764 <HAL_GPIO_Read>
}
   b9b8e:	2000      	movs	r0, #0
   b9b90:	bd10      	pop	{r4, pc}

000b9b92 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9b92:	280d      	cmp	r0, #13
{
   b9b94:	b510      	push	{r4, lr}
   b9b96:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9b98:	bf9c      	itt	ls
   b9b9a:	340e      	addls	r4, #14
   b9b9c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b9b9e:	4620      	mov	r0, r4
   b9ba0:	f7ff ff7c 	bl	b9a9c <pinAvailable>
   b9ba4:	b150      	cbz	r0, b9bbc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b9ba6:	2103      	movs	r1, #3
   b9ba8:	4620      	mov	r0, r4
   b9baa:	f7fe fdbb 	bl	b8724 <HAL_Validate_Pin_Function>
   b9bae:	2803      	cmp	r0, #3
   b9bb0:	d104      	bne.n	b9bbc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b9bb2:	4620      	mov	r0, r4
}
   b9bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9bb8:	f7fe bdec 	b.w	b8794 <hal_adc_read>
}
   b9bbc:	2000      	movs	r0, #0
   b9bbe:	bd10      	pop	{r4, pc}

000b9bc0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b9bc0:	f7fe bdf0 	b.w	b87a4 <HAL_Pulse_In>

000b9bc4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9bc4:	4770      	bx	lr
	...

000b9bc8 <_Z20acquireSerial1Bufferv>:
{
   b9bc8:	b538      	push	{r3, r4, r5, lr}
   b9bca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9bcc:	2514      	movs	r5, #20
   b9bce:	462a      	mov	r2, r5
   b9bd0:	2100      	movs	r1, #0
   b9bd2:	f000 fdab 	bl	ba72c <memset>
   b9bd6:	8025      	strh	r5, [r4, #0]
   b9bd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bda:	4907      	ldr	r1, [pc, #28]	; (b9bf8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9bdc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9be0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9be2:	f000 f881 	bl	b9ce8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9be6:	4904      	ldr	r1, [pc, #16]	; (b9bf8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9be8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9bea:	4628      	mov	r0, r5
   b9bec:	f000 f87c 	bl	b9ce8 <_ZnajRKSt9nothrow_t>
    };
   b9bf0:	60e0      	str	r0, [r4, #12]
}
   b9bf2:	4620      	mov	r0, r4
   b9bf4:	bd38      	pop	{r3, r4, r5, pc}
   b9bf6:	bf00      	nop
   b9bf8:	000bc6a0 	.word	0x000bc6a0

000b9bfc <_Z22__fetch_global_Serial1v>:
{
   b9bfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9bfe:	4d0e      	ldr	r5, [pc, #56]	; (b9c38 <_Z22__fetch_global_Serial1v+0x3c>)
   b9c00:	7829      	ldrb	r1, [r5, #0]
   b9c02:	f3bf 8f5b 	dmb	ish
   b9c06:	f011 0401 	ands.w	r4, r1, #1
{
   b9c0a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9c0c:	d111      	bne.n	b9c32 <_Z22__fetch_global_Serial1v+0x36>
   b9c0e:	4628      	mov	r0, r5
   b9c10:	f7fa fa52 	bl	b40b8 <__cxa_guard_acquire>
   b9c14:	b168      	cbz	r0, b9c32 <_Z22__fetch_global_Serial1v+0x36>
   b9c16:	a801      	add	r0, sp, #4
   b9c18:	f7ff ffd6 	bl	b9bc8 <_Z20acquireSerial1Bufferv>
   b9c1c:	aa01      	add	r2, sp, #4
   b9c1e:	4621      	mov	r1, r4
   b9c20:	4806      	ldr	r0, [pc, #24]	; (b9c3c <_Z22__fetch_global_Serial1v+0x40>)
   b9c22:	f7ff fde1 	bl	b97e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9c26:	4628      	mov	r0, r5
   b9c28:	f7fa fa4b 	bl	b40c2 <__cxa_guard_release>
   b9c2c:	4804      	ldr	r0, [pc, #16]	; (b9c40 <_Z22__fetch_global_Serial1v+0x44>)
   b9c2e:	f000 fd61 	bl	ba6f4 <atexit>
    return serial1;
}
   b9c32:	4802      	ldr	r0, [pc, #8]	; (b9c3c <_Z22__fetch_global_Serial1v+0x40>)
   b9c34:	b007      	add	sp, #28
   b9c36:	bd30      	pop	{r4, r5, pc}
   b9c38:	2003e720 	.word	0x2003e720
   b9c3c:	2003e724 	.word	0x2003e724
   b9c40:	000b9bc5 	.word	0x000b9bc5

000b9c44 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b9c44:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b9c46:	4c08      	ldr	r4, [pc, #32]	; (b9c68 <_Z21__fetch_global_EEPROMv+0x24>)
   b9c48:	7823      	ldrb	r3, [r4, #0]
   b9c4a:	f3bf 8f5b 	dmb	ish
   b9c4e:	07db      	lsls	r3, r3, #31
   b9c50:	d408      	bmi.n	b9c64 <_Z21__fetch_global_EEPROMv+0x20>
   b9c52:	4620      	mov	r0, r4
   b9c54:	f7fa fa30 	bl	b40b8 <__cxa_guard_acquire>
   b9c58:	b120      	cbz	r0, b9c64 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b9c5a:	f7fe fdc3 	bl	b87e4 <HAL_EEPROM_Init>
   b9c5e:	4620      	mov	r0, r4
   b9c60:	f7fa fa2f 	bl	b40c2 <__cxa_guard_release>
	return eeprom;
}
   b9c64:	4801      	ldr	r0, [pc, #4]	; (b9c6c <_Z21__fetch_global_EEPROMv+0x28>)
   b9c66:	bd10      	pop	{r4, pc}
   b9c68:	2003e73c 	.word	0x2003e73c
   b9c6c:	2003e740 	.word	0x2003e740

000b9c70 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9c70:	4770      	bx	lr
	...

000b9c74 <_Z17acquireWireBufferv>:
{
   b9c74:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9c76:	2520      	movs	r5, #32
   b9c78:	2314      	movs	r3, #20
{
   b9c7a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9c7c:	6003      	str	r3, [r0, #0]
   b9c7e:	6085      	str	r5, [r0, #8]
   b9c80:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c82:	4906      	ldr	r1, [pc, #24]	; (b9c9c <_Z17acquireWireBufferv+0x28>)
   b9c84:	4628      	mov	r0, r5
   b9c86:	f000 f82f 	bl	b9ce8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c8a:	4904      	ldr	r1, [pc, #16]	; (b9c9c <_Z17acquireWireBufferv+0x28>)
	};
   b9c8c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9c8e:	4628      	mov	r0, r5
   b9c90:	f000 f82a 	bl	b9ce8 <_ZnajRKSt9nothrow_t>
	};
   b9c94:	60e0      	str	r0, [r4, #12]
}
   b9c96:	4620      	mov	r0, r4
   b9c98:	bd38      	pop	{r3, r4, r5, pc}
   b9c9a:	bf00      	nop
   b9c9c:	000bc6a0 	.word	0x000bc6a0

000b9ca0 <_Z19__fetch_global_Wirev>:
{
   b9ca0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9ca2:	4d0e      	ldr	r5, [pc, #56]	; (b9cdc <_Z19__fetch_global_Wirev+0x3c>)
   b9ca4:	7829      	ldrb	r1, [r5, #0]
   b9ca6:	f3bf 8f5b 	dmb	ish
   b9caa:	f011 0401 	ands.w	r4, r1, #1
{
   b9cae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9cb0:	d111      	bne.n	b9cd6 <_Z19__fetch_global_Wirev+0x36>
   b9cb2:	4628      	mov	r0, r5
   b9cb4:	f7fa fa00 	bl	b40b8 <__cxa_guard_acquire>
   b9cb8:	b168      	cbz	r0, b9cd6 <_Z19__fetch_global_Wirev+0x36>
   b9cba:	a801      	add	r0, sp, #4
   b9cbc:	f7ff ffda 	bl	b9c74 <_Z17acquireWireBufferv>
   b9cc0:	aa01      	add	r2, sp, #4
   b9cc2:	4621      	mov	r1, r4
   b9cc4:	4806      	ldr	r0, [pc, #24]	; (b9ce0 <_Z19__fetch_global_Wirev+0x40>)
   b9cc6:	f7ff fdcf 	bl	b9868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9cca:	4628      	mov	r0, r5
   b9ccc:	f7fa f9f9 	bl	b40c2 <__cxa_guard_release>
   b9cd0:	4804      	ldr	r0, [pc, #16]	; (b9ce4 <_Z19__fetch_global_Wirev+0x44>)
   b9cd2:	f000 fd0f 	bl	ba6f4 <atexit>
	return wire;
}
   b9cd6:	4802      	ldr	r0, [pc, #8]	; (b9ce0 <_Z19__fetch_global_Wirev+0x40>)
   b9cd8:	b007      	add	sp, #28
   b9cda:	bd30      	pop	{r4, r5, pc}
   b9cdc:	2003e744 	.word	0x2003e744
   b9ce0:	2003e748 	.word	0x2003e748
   b9ce4:	000b9c71 	.word	0x000b9c71

000b9ce8 <_ZnajRKSt9nothrow_t>:
   b9ce8:	f7fa b9d5 	b.w	b4096 <_Znaj>

000b9cec <__aeabi_drsub>:
   b9cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9cf0:	e002      	b.n	b9cf8 <__adddf3>
   b9cf2:	bf00      	nop

000b9cf4 <__aeabi_dsub>:
   b9cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9cf8 <__adddf3>:
   b9cf8:	b530      	push	{r4, r5, lr}
   b9cfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9cfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9d02:	ea94 0f05 	teq	r4, r5
   b9d06:	bf08      	it	eq
   b9d08:	ea90 0f02 	teqeq	r0, r2
   b9d0c:	bf1f      	itttt	ne
   b9d0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9d12:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9d16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9d1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9d1e:	f000 80e2 	beq.w	b9ee6 <__adddf3+0x1ee>
   b9d22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9d26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9d2a:	bfb8      	it	lt
   b9d2c:	426d      	neglt	r5, r5
   b9d2e:	dd0c      	ble.n	b9d4a <__adddf3+0x52>
   b9d30:	442c      	add	r4, r5
   b9d32:	ea80 0202 	eor.w	r2, r0, r2
   b9d36:	ea81 0303 	eor.w	r3, r1, r3
   b9d3a:	ea82 0000 	eor.w	r0, r2, r0
   b9d3e:	ea83 0101 	eor.w	r1, r3, r1
   b9d42:	ea80 0202 	eor.w	r2, r0, r2
   b9d46:	ea81 0303 	eor.w	r3, r1, r3
   b9d4a:	2d36      	cmp	r5, #54	; 0x36
   b9d4c:	bf88      	it	hi
   b9d4e:	bd30      	pophi	{r4, r5, pc}
   b9d50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9d54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9d58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9d5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9d60:	d002      	beq.n	b9d68 <__adddf3+0x70>
   b9d62:	4240      	negs	r0, r0
   b9d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9d68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9d6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9d70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9d74:	d002      	beq.n	b9d7c <__adddf3+0x84>
   b9d76:	4252      	negs	r2, r2
   b9d78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9d7c:	ea94 0f05 	teq	r4, r5
   b9d80:	f000 80a7 	beq.w	b9ed2 <__adddf3+0x1da>
   b9d84:	f1a4 0401 	sub.w	r4, r4, #1
   b9d88:	f1d5 0e20 	rsbs	lr, r5, #32
   b9d8c:	db0d      	blt.n	b9daa <__adddf3+0xb2>
   b9d8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9d92:	fa22 f205 	lsr.w	r2, r2, r5
   b9d96:	1880      	adds	r0, r0, r2
   b9d98:	f141 0100 	adc.w	r1, r1, #0
   b9d9c:	fa03 f20e 	lsl.w	r2, r3, lr
   b9da0:	1880      	adds	r0, r0, r2
   b9da2:	fa43 f305 	asr.w	r3, r3, r5
   b9da6:	4159      	adcs	r1, r3
   b9da8:	e00e      	b.n	b9dc8 <__adddf3+0xd0>
   b9daa:	f1a5 0520 	sub.w	r5, r5, #32
   b9dae:	f10e 0e20 	add.w	lr, lr, #32
   b9db2:	2a01      	cmp	r2, #1
   b9db4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9db8:	bf28      	it	cs
   b9dba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9dbe:	fa43 f305 	asr.w	r3, r3, r5
   b9dc2:	18c0      	adds	r0, r0, r3
   b9dc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9dcc:	d507      	bpl.n	b9dde <__adddf3+0xe6>
   b9dce:	f04f 0e00 	mov.w	lr, #0
   b9dd2:	f1dc 0c00 	rsbs	ip, ip, #0
   b9dd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9dda:	eb6e 0101 	sbc.w	r1, lr, r1
   b9dde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9de2:	d31b      	bcc.n	b9e1c <__adddf3+0x124>
   b9de4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9de8:	d30c      	bcc.n	b9e04 <__adddf3+0x10c>
   b9dea:	0849      	lsrs	r1, r1, #1
   b9dec:	ea5f 0030 	movs.w	r0, r0, rrx
   b9df0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9df4:	f104 0401 	add.w	r4, r4, #1
   b9df8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9dfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9e00:	f080 809a 	bcs.w	b9f38 <__adddf3+0x240>
   b9e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9e08:	bf08      	it	eq
   b9e0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9e0e:	f150 0000 	adcs.w	r0, r0, #0
   b9e12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9e16:	ea41 0105 	orr.w	r1, r1, r5
   b9e1a:	bd30      	pop	{r4, r5, pc}
   b9e1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9e20:	4140      	adcs	r0, r0
   b9e22:	eb41 0101 	adc.w	r1, r1, r1
   b9e26:	3c01      	subs	r4, #1
   b9e28:	bf28      	it	cs
   b9e2a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9e2e:	d2e9      	bcs.n	b9e04 <__adddf3+0x10c>
   b9e30:	f091 0f00 	teq	r1, #0
   b9e34:	bf04      	itt	eq
   b9e36:	4601      	moveq	r1, r0
   b9e38:	2000      	moveq	r0, #0
   b9e3a:	fab1 f381 	clz	r3, r1
   b9e3e:	bf08      	it	eq
   b9e40:	3320      	addeq	r3, #32
   b9e42:	f1a3 030b 	sub.w	r3, r3, #11
   b9e46:	f1b3 0220 	subs.w	r2, r3, #32
   b9e4a:	da0c      	bge.n	b9e66 <__adddf3+0x16e>
   b9e4c:	320c      	adds	r2, #12
   b9e4e:	dd08      	ble.n	b9e62 <__adddf3+0x16a>
   b9e50:	f102 0c14 	add.w	ip, r2, #20
   b9e54:	f1c2 020c 	rsb	r2, r2, #12
   b9e58:	fa01 f00c 	lsl.w	r0, r1, ip
   b9e5c:	fa21 f102 	lsr.w	r1, r1, r2
   b9e60:	e00c      	b.n	b9e7c <__adddf3+0x184>
   b9e62:	f102 0214 	add.w	r2, r2, #20
   b9e66:	bfd8      	it	le
   b9e68:	f1c2 0c20 	rsble	ip, r2, #32
   b9e6c:	fa01 f102 	lsl.w	r1, r1, r2
   b9e70:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9e74:	bfdc      	itt	le
   b9e76:	ea41 010c 	orrle.w	r1, r1, ip
   b9e7a:	4090      	lslle	r0, r2
   b9e7c:	1ae4      	subs	r4, r4, r3
   b9e7e:	bfa2      	ittt	ge
   b9e80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9e84:	4329      	orrge	r1, r5
   b9e86:	bd30      	popge	{r4, r5, pc}
   b9e88:	ea6f 0404 	mvn.w	r4, r4
   b9e8c:	3c1f      	subs	r4, #31
   b9e8e:	da1c      	bge.n	b9eca <__adddf3+0x1d2>
   b9e90:	340c      	adds	r4, #12
   b9e92:	dc0e      	bgt.n	b9eb2 <__adddf3+0x1ba>
   b9e94:	f104 0414 	add.w	r4, r4, #20
   b9e98:	f1c4 0220 	rsb	r2, r4, #32
   b9e9c:	fa20 f004 	lsr.w	r0, r0, r4
   b9ea0:	fa01 f302 	lsl.w	r3, r1, r2
   b9ea4:	ea40 0003 	orr.w	r0, r0, r3
   b9ea8:	fa21 f304 	lsr.w	r3, r1, r4
   b9eac:	ea45 0103 	orr.w	r1, r5, r3
   b9eb0:	bd30      	pop	{r4, r5, pc}
   b9eb2:	f1c4 040c 	rsb	r4, r4, #12
   b9eb6:	f1c4 0220 	rsb	r2, r4, #32
   b9eba:	fa20 f002 	lsr.w	r0, r0, r2
   b9ebe:	fa01 f304 	lsl.w	r3, r1, r4
   b9ec2:	ea40 0003 	orr.w	r0, r0, r3
   b9ec6:	4629      	mov	r1, r5
   b9ec8:	bd30      	pop	{r4, r5, pc}
   b9eca:	fa21 f004 	lsr.w	r0, r1, r4
   b9ece:	4629      	mov	r1, r5
   b9ed0:	bd30      	pop	{r4, r5, pc}
   b9ed2:	f094 0f00 	teq	r4, #0
   b9ed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9eda:	bf06      	itte	eq
   b9edc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9ee0:	3401      	addeq	r4, #1
   b9ee2:	3d01      	subne	r5, #1
   b9ee4:	e74e      	b.n	b9d84 <__adddf3+0x8c>
   b9ee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9eea:	bf18      	it	ne
   b9eec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9ef0:	d029      	beq.n	b9f46 <__adddf3+0x24e>
   b9ef2:	ea94 0f05 	teq	r4, r5
   b9ef6:	bf08      	it	eq
   b9ef8:	ea90 0f02 	teqeq	r0, r2
   b9efc:	d005      	beq.n	b9f0a <__adddf3+0x212>
   b9efe:	ea54 0c00 	orrs.w	ip, r4, r0
   b9f02:	bf04      	itt	eq
   b9f04:	4619      	moveq	r1, r3
   b9f06:	4610      	moveq	r0, r2
   b9f08:	bd30      	pop	{r4, r5, pc}
   b9f0a:	ea91 0f03 	teq	r1, r3
   b9f0e:	bf1e      	ittt	ne
   b9f10:	2100      	movne	r1, #0
   b9f12:	2000      	movne	r0, #0
   b9f14:	bd30      	popne	{r4, r5, pc}
   b9f16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9f1a:	d105      	bne.n	b9f28 <__adddf3+0x230>
   b9f1c:	0040      	lsls	r0, r0, #1
   b9f1e:	4149      	adcs	r1, r1
   b9f20:	bf28      	it	cs
   b9f22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9f26:	bd30      	pop	{r4, r5, pc}
   b9f28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9f2c:	bf3c      	itt	cc
   b9f2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9f32:	bd30      	popcc	{r4, r5, pc}
   b9f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9f38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9f40:	f04f 0000 	mov.w	r0, #0
   b9f44:	bd30      	pop	{r4, r5, pc}
   b9f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9f4a:	bf1a      	itte	ne
   b9f4c:	4619      	movne	r1, r3
   b9f4e:	4610      	movne	r0, r2
   b9f50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9f54:	bf1c      	itt	ne
   b9f56:	460b      	movne	r3, r1
   b9f58:	4602      	movne	r2, r0
   b9f5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9f5e:	bf06      	itte	eq
   b9f60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9f64:	ea91 0f03 	teqeq	r1, r3
   b9f68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9f6c:	bd30      	pop	{r4, r5, pc}
   b9f6e:	bf00      	nop

000b9f70 <__aeabi_ui2d>:
   b9f70:	f090 0f00 	teq	r0, #0
   b9f74:	bf04      	itt	eq
   b9f76:	2100      	moveq	r1, #0
   b9f78:	4770      	bxeq	lr
   b9f7a:	b530      	push	{r4, r5, lr}
   b9f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9f84:	f04f 0500 	mov.w	r5, #0
   b9f88:	f04f 0100 	mov.w	r1, #0
   b9f8c:	e750      	b.n	b9e30 <__adddf3+0x138>
   b9f8e:	bf00      	nop

000b9f90 <__aeabi_i2d>:
   b9f90:	f090 0f00 	teq	r0, #0
   b9f94:	bf04      	itt	eq
   b9f96:	2100      	moveq	r1, #0
   b9f98:	4770      	bxeq	lr
   b9f9a:	b530      	push	{r4, r5, lr}
   b9f9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9fa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9fa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9fa8:	bf48      	it	mi
   b9faa:	4240      	negmi	r0, r0
   b9fac:	f04f 0100 	mov.w	r1, #0
   b9fb0:	e73e      	b.n	b9e30 <__adddf3+0x138>
   b9fb2:	bf00      	nop

000b9fb4 <__aeabi_f2d>:
   b9fb4:	0042      	lsls	r2, r0, #1
   b9fb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9fba:	ea4f 0131 	mov.w	r1, r1, rrx
   b9fbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9fc2:	bf1f      	itttt	ne
   b9fc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9fc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9fcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9fd0:	4770      	bxne	lr
   b9fd2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9fd6:	bf08      	it	eq
   b9fd8:	4770      	bxeq	lr
   b9fda:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9fde:	bf04      	itt	eq
   b9fe0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9fe4:	4770      	bxeq	lr
   b9fe6:	b530      	push	{r4, r5, lr}
   b9fe8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9fec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9ff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9ff4:	e71c      	b.n	b9e30 <__adddf3+0x138>
   b9ff6:	bf00      	nop

000b9ff8 <__aeabi_ul2d>:
   b9ff8:	ea50 0201 	orrs.w	r2, r0, r1
   b9ffc:	bf08      	it	eq
   b9ffe:	4770      	bxeq	lr
   ba000:	b530      	push	{r4, r5, lr}
   ba002:	f04f 0500 	mov.w	r5, #0
   ba006:	e00a      	b.n	ba01e <__aeabi_l2d+0x16>

000ba008 <__aeabi_l2d>:
   ba008:	ea50 0201 	orrs.w	r2, r0, r1
   ba00c:	bf08      	it	eq
   ba00e:	4770      	bxeq	lr
   ba010:	b530      	push	{r4, r5, lr}
   ba012:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba016:	d502      	bpl.n	ba01e <__aeabi_l2d+0x16>
   ba018:	4240      	negs	r0, r0
   ba01a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba01e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba022:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba026:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba02a:	f43f aed8 	beq.w	b9dde <__adddf3+0xe6>
   ba02e:	f04f 0203 	mov.w	r2, #3
   ba032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba036:	bf18      	it	ne
   ba038:	3203      	addne	r2, #3
   ba03a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba03e:	bf18      	it	ne
   ba040:	3203      	addne	r2, #3
   ba042:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba046:	f1c2 0320 	rsb	r3, r2, #32
   ba04a:	fa00 fc03 	lsl.w	ip, r0, r3
   ba04e:	fa20 f002 	lsr.w	r0, r0, r2
   ba052:	fa01 fe03 	lsl.w	lr, r1, r3
   ba056:	ea40 000e 	orr.w	r0, r0, lr
   ba05a:	fa21 f102 	lsr.w	r1, r1, r2
   ba05e:	4414      	add	r4, r2
   ba060:	e6bd      	b.n	b9dde <__adddf3+0xe6>
   ba062:	bf00      	nop

000ba064 <__aeabi_dmul>:
   ba064:	b570      	push	{r4, r5, r6, lr}
   ba066:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba06a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba06e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba072:	bf1d      	ittte	ne
   ba074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba078:	ea94 0f0c 	teqne	r4, ip
   ba07c:	ea95 0f0c 	teqne	r5, ip
   ba080:	f000 f8de 	bleq	ba240 <__aeabi_dmul+0x1dc>
   ba084:	442c      	add	r4, r5
   ba086:	ea81 0603 	eor.w	r6, r1, r3
   ba08a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba08e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba092:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba096:	bf18      	it	ne
   ba098:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba09c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba0a4:	d038      	beq.n	ba118 <__aeabi_dmul+0xb4>
   ba0a6:	fba0 ce02 	umull	ip, lr, r0, r2
   ba0aa:	f04f 0500 	mov.w	r5, #0
   ba0ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba0b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba0b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba0ba:	f04f 0600 	mov.w	r6, #0
   ba0be:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba0c2:	f09c 0f00 	teq	ip, #0
   ba0c6:	bf18      	it	ne
   ba0c8:	f04e 0e01 	orrne.w	lr, lr, #1
   ba0cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba0d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba0d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba0d8:	d204      	bcs.n	ba0e4 <__aeabi_dmul+0x80>
   ba0da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba0de:	416d      	adcs	r5, r5
   ba0e0:	eb46 0606 	adc.w	r6, r6, r6
   ba0e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba0e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba0ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba0f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba0f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba0f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba0fc:	bf88      	it	hi
   ba0fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba102:	d81e      	bhi.n	ba142 <__aeabi_dmul+0xde>
   ba104:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba108:	bf08      	it	eq
   ba10a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba10e:	f150 0000 	adcs.w	r0, r0, #0
   ba112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba116:	bd70      	pop	{r4, r5, r6, pc}
   ba118:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba11c:	ea46 0101 	orr.w	r1, r6, r1
   ba120:	ea40 0002 	orr.w	r0, r0, r2
   ba124:	ea81 0103 	eor.w	r1, r1, r3
   ba128:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba12c:	bfc2      	ittt	gt
   ba12e:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba136:	bd70      	popgt	{r4, r5, r6, pc}
   ba138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba13c:	f04f 0e00 	mov.w	lr, #0
   ba140:	3c01      	subs	r4, #1
   ba142:	f300 80ab 	bgt.w	ba29c <__aeabi_dmul+0x238>
   ba146:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba14a:	bfde      	ittt	le
   ba14c:	2000      	movle	r0, #0
   ba14e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba152:	bd70      	pople	{r4, r5, r6, pc}
   ba154:	f1c4 0400 	rsb	r4, r4, #0
   ba158:	3c20      	subs	r4, #32
   ba15a:	da35      	bge.n	ba1c8 <__aeabi_dmul+0x164>
   ba15c:	340c      	adds	r4, #12
   ba15e:	dc1b      	bgt.n	ba198 <__aeabi_dmul+0x134>
   ba160:	f104 0414 	add.w	r4, r4, #20
   ba164:	f1c4 0520 	rsb	r5, r4, #32
   ba168:	fa00 f305 	lsl.w	r3, r0, r5
   ba16c:	fa20 f004 	lsr.w	r0, r0, r4
   ba170:	fa01 f205 	lsl.w	r2, r1, r5
   ba174:	ea40 0002 	orr.w	r0, r0, r2
   ba178:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba17c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba184:	fa21 f604 	lsr.w	r6, r1, r4
   ba188:	eb42 0106 	adc.w	r1, r2, r6
   ba18c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba190:	bf08      	it	eq
   ba192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba196:	bd70      	pop	{r4, r5, r6, pc}
   ba198:	f1c4 040c 	rsb	r4, r4, #12
   ba19c:	f1c4 0520 	rsb	r5, r4, #32
   ba1a0:	fa00 f304 	lsl.w	r3, r0, r4
   ba1a4:	fa20 f005 	lsr.w	r0, r0, r5
   ba1a8:	fa01 f204 	lsl.w	r2, r1, r4
   ba1ac:	ea40 0002 	orr.w	r0, r0, r2
   ba1b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba1b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba1b8:	f141 0100 	adc.w	r1, r1, #0
   ba1bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba1c0:	bf08      	it	eq
   ba1c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba1c6:	bd70      	pop	{r4, r5, r6, pc}
   ba1c8:	f1c4 0520 	rsb	r5, r4, #32
   ba1cc:	fa00 f205 	lsl.w	r2, r0, r5
   ba1d0:	ea4e 0e02 	orr.w	lr, lr, r2
   ba1d4:	fa20 f304 	lsr.w	r3, r0, r4
   ba1d8:	fa01 f205 	lsl.w	r2, r1, r5
   ba1dc:	ea43 0302 	orr.w	r3, r3, r2
   ba1e0:	fa21 f004 	lsr.w	r0, r1, r4
   ba1e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba1e8:	fa21 f204 	lsr.w	r2, r1, r4
   ba1ec:	ea20 0002 	bic.w	r0, r0, r2
   ba1f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba1f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba1f8:	bf08      	it	eq
   ba1fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba1fe:	bd70      	pop	{r4, r5, r6, pc}
   ba200:	f094 0f00 	teq	r4, #0
   ba204:	d10f      	bne.n	ba226 <__aeabi_dmul+0x1c2>
   ba206:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba20a:	0040      	lsls	r0, r0, #1
   ba20c:	eb41 0101 	adc.w	r1, r1, r1
   ba210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba214:	bf08      	it	eq
   ba216:	3c01      	subeq	r4, #1
   ba218:	d0f7      	beq.n	ba20a <__aeabi_dmul+0x1a6>
   ba21a:	ea41 0106 	orr.w	r1, r1, r6
   ba21e:	f095 0f00 	teq	r5, #0
   ba222:	bf18      	it	ne
   ba224:	4770      	bxne	lr
   ba226:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba22a:	0052      	lsls	r2, r2, #1
   ba22c:	eb43 0303 	adc.w	r3, r3, r3
   ba230:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba234:	bf08      	it	eq
   ba236:	3d01      	subeq	r5, #1
   ba238:	d0f7      	beq.n	ba22a <__aeabi_dmul+0x1c6>
   ba23a:	ea43 0306 	orr.w	r3, r3, r6
   ba23e:	4770      	bx	lr
   ba240:	ea94 0f0c 	teq	r4, ip
   ba244:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba248:	bf18      	it	ne
   ba24a:	ea95 0f0c 	teqne	r5, ip
   ba24e:	d00c      	beq.n	ba26a <__aeabi_dmul+0x206>
   ba250:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba254:	bf18      	it	ne
   ba256:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba25a:	d1d1      	bne.n	ba200 <__aeabi_dmul+0x19c>
   ba25c:	ea81 0103 	eor.w	r1, r1, r3
   ba260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba264:	f04f 0000 	mov.w	r0, #0
   ba268:	bd70      	pop	{r4, r5, r6, pc}
   ba26a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba26e:	bf06      	itte	eq
   ba270:	4610      	moveq	r0, r2
   ba272:	4619      	moveq	r1, r3
   ba274:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba278:	d019      	beq.n	ba2ae <__aeabi_dmul+0x24a>
   ba27a:	ea94 0f0c 	teq	r4, ip
   ba27e:	d102      	bne.n	ba286 <__aeabi_dmul+0x222>
   ba280:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba284:	d113      	bne.n	ba2ae <__aeabi_dmul+0x24a>
   ba286:	ea95 0f0c 	teq	r5, ip
   ba28a:	d105      	bne.n	ba298 <__aeabi_dmul+0x234>
   ba28c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba290:	bf1c      	itt	ne
   ba292:	4610      	movne	r0, r2
   ba294:	4619      	movne	r1, r3
   ba296:	d10a      	bne.n	ba2ae <__aeabi_dmul+0x24a>
   ba298:	ea81 0103 	eor.w	r1, r1, r3
   ba29c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba2a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba2a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba2a8:	f04f 0000 	mov.w	r0, #0
   ba2ac:	bd70      	pop	{r4, r5, r6, pc}
   ba2ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba2b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba2b6:	bd70      	pop	{r4, r5, r6, pc}

000ba2b8 <__aeabi_ddiv>:
   ba2b8:	b570      	push	{r4, r5, r6, lr}
   ba2ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba2be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba2c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba2c6:	bf1d      	ittte	ne
   ba2c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba2cc:	ea94 0f0c 	teqne	r4, ip
   ba2d0:	ea95 0f0c 	teqne	r5, ip
   ba2d4:	f000 f8a7 	bleq	ba426 <__aeabi_ddiv+0x16e>
   ba2d8:	eba4 0405 	sub.w	r4, r4, r5
   ba2dc:	ea81 0e03 	eor.w	lr, r1, r3
   ba2e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba2e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba2e8:	f000 8088 	beq.w	ba3fc <__aeabi_ddiv+0x144>
   ba2ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba2f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba2f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba2f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba2fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba300:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba304:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba308:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba30c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba310:	429d      	cmp	r5, r3
   ba312:	bf08      	it	eq
   ba314:	4296      	cmpeq	r6, r2
   ba316:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba31a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba31e:	d202      	bcs.n	ba326 <__aeabi_ddiv+0x6e>
   ba320:	085b      	lsrs	r3, r3, #1
   ba322:	ea4f 0232 	mov.w	r2, r2, rrx
   ba326:	1ab6      	subs	r6, r6, r2
   ba328:	eb65 0503 	sbc.w	r5, r5, r3
   ba32c:	085b      	lsrs	r3, r3, #1
   ba32e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba332:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba336:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba33a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba33e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba342:	bf22      	ittt	cs
   ba344:	1ab6      	subcs	r6, r6, r2
   ba346:	4675      	movcs	r5, lr
   ba348:	ea40 000c 	orrcs.w	r0, r0, ip
   ba34c:	085b      	lsrs	r3, r3, #1
   ba34e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba352:	ebb6 0e02 	subs.w	lr, r6, r2
   ba356:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba35a:	bf22      	ittt	cs
   ba35c:	1ab6      	subcs	r6, r6, r2
   ba35e:	4675      	movcs	r5, lr
   ba360:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba364:	085b      	lsrs	r3, r3, #1
   ba366:	ea4f 0232 	mov.w	r2, r2, rrx
   ba36a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba36e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba372:	bf22      	ittt	cs
   ba374:	1ab6      	subcs	r6, r6, r2
   ba376:	4675      	movcs	r5, lr
   ba378:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba37c:	085b      	lsrs	r3, r3, #1
   ba37e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba382:	ebb6 0e02 	subs.w	lr, r6, r2
   ba386:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba38a:	bf22      	ittt	cs
   ba38c:	1ab6      	subcs	r6, r6, r2
   ba38e:	4675      	movcs	r5, lr
   ba390:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba394:	ea55 0e06 	orrs.w	lr, r5, r6
   ba398:	d018      	beq.n	ba3cc <__aeabi_ddiv+0x114>
   ba39a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba39e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba3a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba3a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba3aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba3ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba3b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba3b6:	d1c0      	bne.n	ba33a <__aeabi_ddiv+0x82>
   ba3b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba3bc:	d10b      	bne.n	ba3d6 <__aeabi_ddiv+0x11e>
   ba3be:	ea41 0100 	orr.w	r1, r1, r0
   ba3c2:	f04f 0000 	mov.w	r0, #0
   ba3c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba3ca:	e7b6      	b.n	ba33a <__aeabi_ddiv+0x82>
   ba3cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba3d0:	bf04      	itt	eq
   ba3d2:	4301      	orreq	r1, r0
   ba3d4:	2000      	moveq	r0, #0
   ba3d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba3da:	bf88      	it	hi
   ba3dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba3e0:	f63f aeaf 	bhi.w	ba142 <__aeabi_dmul+0xde>
   ba3e4:	ebb5 0c03 	subs.w	ip, r5, r3
   ba3e8:	bf04      	itt	eq
   ba3ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba3ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba3f2:	f150 0000 	adcs.w	r0, r0, #0
   ba3f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba3fa:	bd70      	pop	{r4, r5, r6, pc}
   ba3fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba400:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba404:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba408:	bfc2      	ittt	gt
   ba40a:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba40e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba412:	bd70      	popgt	{r4, r5, r6, pc}
   ba414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba418:	f04f 0e00 	mov.w	lr, #0
   ba41c:	3c01      	subs	r4, #1
   ba41e:	e690      	b.n	ba142 <__aeabi_dmul+0xde>
   ba420:	ea45 0e06 	orr.w	lr, r5, r6
   ba424:	e68d      	b.n	ba142 <__aeabi_dmul+0xde>
   ba426:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba42a:	ea94 0f0c 	teq	r4, ip
   ba42e:	bf08      	it	eq
   ba430:	ea95 0f0c 	teqeq	r5, ip
   ba434:	f43f af3b 	beq.w	ba2ae <__aeabi_dmul+0x24a>
   ba438:	ea94 0f0c 	teq	r4, ip
   ba43c:	d10a      	bne.n	ba454 <__aeabi_ddiv+0x19c>
   ba43e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba442:	f47f af34 	bne.w	ba2ae <__aeabi_dmul+0x24a>
   ba446:	ea95 0f0c 	teq	r5, ip
   ba44a:	f47f af25 	bne.w	ba298 <__aeabi_dmul+0x234>
   ba44e:	4610      	mov	r0, r2
   ba450:	4619      	mov	r1, r3
   ba452:	e72c      	b.n	ba2ae <__aeabi_dmul+0x24a>
   ba454:	ea95 0f0c 	teq	r5, ip
   ba458:	d106      	bne.n	ba468 <__aeabi_ddiv+0x1b0>
   ba45a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba45e:	f43f aefd 	beq.w	ba25c <__aeabi_dmul+0x1f8>
   ba462:	4610      	mov	r0, r2
   ba464:	4619      	mov	r1, r3
   ba466:	e722      	b.n	ba2ae <__aeabi_dmul+0x24a>
   ba468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba46c:	bf18      	it	ne
   ba46e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba472:	f47f aec5 	bne.w	ba200 <__aeabi_dmul+0x19c>
   ba476:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba47a:	f47f af0d 	bne.w	ba298 <__aeabi_dmul+0x234>
   ba47e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba482:	f47f aeeb 	bne.w	ba25c <__aeabi_dmul+0x1f8>
   ba486:	e712      	b.n	ba2ae <__aeabi_dmul+0x24a>

000ba488 <__gedf2>:
   ba488:	f04f 3cff 	mov.w	ip, #4294967295
   ba48c:	e006      	b.n	ba49c <__cmpdf2+0x4>
   ba48e:	bf00      	nop

000ba490 <__ledf2>:
   ba490:	f04f 0c01 	mov.w	ip, #1
   ba494:	e002      	b.n	ba49c <__cmpdf2+0x4>
   ba496:	bf00      	nop

000ba498 <__cmpdf2>:
   ba498:	f04f 0c01 	mov.w	ip, #1
   ba49c:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba4a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba4a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba4a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba4ac:	bf18      	it	ne
   ba4ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba4b2:	d01b      	beq.n	ba4ec <__cmpdf2+0x54>
   ba4b4:	b001      	add	sp, #4
   ba4b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba4ba:	bf0c      	ite	eq
   ba4bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba4c0:	ea91 0f03 	teqne	r1, r3
   ba4c4:	bf02      	ittt	eq
   ba4c6:	ea90 0f02 	teqeq	r0, r2
   ba4ca:	2000      	moveq	r0, #0
   ba4cc:	4770      	bxeq	lr
   ba4ce:	f110 0f00 	cmn.w	r0, #0
   ba4d2:	ea91 0f03 	teq	r1, r3
   ba4d6:	bf58      	it	pl
   ba4d8:	4299      	cmppl	r1, r3
   ba4da:	bf08      	it	eq
   ba4dc:	4290      	cmpeq	r0, r2
   ba4de:	bf2c      	ite	cs
   ba4e0:	17d8      	asrcs	r0, r3, #31
   ba4e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba4e6:	f040 0001 	orr.w	r0, r0, #1
   ba4ea:	4770      	bx	lr
   ba4ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba4f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba4f4:	d102      	bne.n	ba4fc <__cmpdf2+0x64>
   ba4f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba4fa:	d107      	bne.n	ba50c <__cmpdf2+0x74>
   ba4fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba504:	d1d6      	bne.n	ba4b4 <__cmpdf2+0x1c>
   ba506:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba50a:	d0d3      	beq.n	ba4b4 <__cmpdf2+0x1c>
   ba50c:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba510:	4770      	bx	lr
   ba512:	bf00      	nop

000ba514 <__aeabi_cdrcmple>:
   ba514:	4684      	mov	ip, r0
   ba516:	4610      	mov	r0, r2
   ba518:	4662      	mov	r2, ip
   ba51a:	468c      	mov	ip, r1
   ba51c:	4619      	mov	r1, r3
   ba51e:	4663      	mov	r3, ip
   ba520:	e000      	b.n	ba524 <__aeabi_cdcmpeq>
   ba522:	bf00      	nop

000ba524 <__aeabi_cdcmpeq>:
   ba524:	b501      	push	{r0, lr}
   ba526:	f7ff ffb7 	bl	ba498 <__cmpdf2>
   ba52a:	2800      	cmp	r0, #0
   ba52c:	bf48      	it	mi
   ba52e:	f110 0f00 	cmnmi.w	r0, #0
   ba532:	bd01      	pop	{r0, pc}

000ba534 <__aeabi_dcmpeq>:
   ba534:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba538:	f7ff fff4 	bl	ba524 <__aeabi_cdcmpeq>
   ba53c:	bf0c      	ite	eq
   ba53e:	2001      	moveq	r0, #1
   ba540:	2000      	movne	r0, #0
   ba542:	f85d fb08 	ldr.w	pc, [sp], #8
   ba546:	bf00      	nop

000ba548 <__aeabi_dcmplt>:
   ba548:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba54c:	f7ff ffea 	bl	ba524 <__aeabi_cdcmpeq>
   ba550:	bf34      	ite	cc
   ba552:	2001      	movcc	r0, #1
   ba554:	2000      	movcs	r0, #0
   ba556:	f85d fb08 	ldr.w	pc, [sp], #8
   ba55a:	bf00      	nop

000ba55c <__aeabi_dcmple>:
   ba55c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba560:	f7ff ffe0 	bl	ba524 <__aeabi_cdcmpeq>
   ba564:	bf94      	ite	ls
   ba566:	2001      	movls	r0, #1
   ba568:	2000      	movhi	r0, #0
   ba56a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba56e:	bf00      	nop

000ba570 <__aeabi_dcmpge>:
   ba570:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba574:	f7ff ffce 	bl	ba514 <__aeabi_cdrcmple>
   ba578:	bf94      	ite	ls
   ba57a:	2001      	movls	r0, #1
   ba57c:	2000      	movhi	r0, #0
   ba57e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba582:	bf00      	nop

000ba584 <__aeabi_dcmpgt>:
   ba584:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba588:	f7ff ffc4 	bl	ba514 <__aeabi_cdrcmple>
   ba58c:	bf34      	ite	cc
   ba58e:	2001      	movcc	r0, #1
   ba590:	2000      	movcs	r0, #0
   ba592:	f85d fb08 	ldr.w	pc, [sp], #8
   ba596:	bf00      	nop

000ba598 <__aeabi_dcmpun>:
   ba598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba59c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba5a0:	d102      	bne.n	ba5a8 <__aeabi_dcmpun+0x10>
   ba5a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba5a6:	d10a      	bne.n	ba5be <__aeabi_dcmpun+0x26>
   ba5a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba5ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba5b0:	d102      	bne.n	ba5b8 <__aeabi_dcmpun+0x20>
   ba5b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba5b6:	d102      	bne.n	ba5be <__aeabi_dcmpun+0x26>
   ba5b8:	f04f 0000 	mov.w	r0, #0
   ba5bc:	4770      	bx	lr
   ba5be:	f04f 0001 	mov.w	r0, #1
   ba5c2:	4770      	bx	lr

000ba5c4 <__aeabi_d2iz>:
   ba5c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba5c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba5cc:	d215      	bcs.n	ba5fa <__aeabi_d2iz+0x36>
   ba5ce:	d511      	bpl.n	ba5f4 <__aeabi_d2iz+0x30>
   ba5d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba5d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba5d8:	d912      	bls.n	ba600 <__aeabi_d2iz+0x3c>
   ba5da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba5de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba5e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba5e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba5ea:	fa23 f002 	lsr.w	r0, r3, r2
   ba5ee:	bf18      	it	ne
   ba5f0:	4240      	negne	r0, r0
   ba5f2:	4770      	bx	lr
   ba5f4:	f04f 0000 	mov.w	r0, #0
   ba5f8:	4770      	bx	lr
   ba5fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba5fe:	d105      	bne.n	ba60c <__aeabi_d2iz+0x48>
   ba600:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   ba604:	bf08      	it	eq
   ba606:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   ba60a:	4770      	bx	lr
   ba60c:	f04f 0000 	mov.w	r0, #0
   ba610:	4770      	bx	lr
   ba612:	bf00      	nop

000ba614 <__aeabi_d2uiz>:
   ba614:	004a      	lsls	r2, r1, #1
   ba616:	d211      	bcs.n	ba63c <__aeabi_d2uiz+0x28>
   ba618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba61c:	d211      	bcs.n	ba642 <__aeabi_d2uiz+0x2e>
   ba61e:	d50d      	bpl.n	ba63c <__aeabi_d2uiz+0x28>
   ba620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba628:	d40e      	bmi.n	ba648 <__aeabi_d2uiz+0x34>
   ba62a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba62e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba636:	fa23 f002 	lsr.w	r0, r3, r2
   ba63a:	4770      	bx	lr
   ba63c:	f04f 0000 	mov.w	r0, #0
   ba640:	4770      	bx	lr
   ba642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba646:	d102      	bne.n	ba64e <__aeabi_d2uiz+0x3a>
   ba648:	f04f 30ff 	mov.w	r0, #4294967295
   ba64c:	4770      	bx	lr
   ba64e:	f04f 0000 	mov.w	r0, #0
   ba652:	4770      	bx	lr

000ba654 <__aeabi_d2f>:
   ba654:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba658:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba65c:	bf24      	itt	cs
   ba65e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba662:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba666:	d90d      	bls.n	ba684 <__aeabi_d2f+0x30>
   ba668:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba66c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba670:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba674:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba678:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba67c:	bf08      	it	eq
   ba67e:	f020 0001 	biceq.w	r0, r0, #1
   ba682:	4770      	bx	lr
   ba684:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba688:	d121      	bne.n	ba6ce <__aeabi_d2f+0x7a>
   ba68a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba68e:	bfbc      	itt	lt
   ba690:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba694:	4770      	bxlt	lr
   ba696:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba69a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba69e:	f1c2 0218 	rsb	r2, r2, #24
   ba6a2:	f1c2 0c20 	rsb	ip, r2, #32
   ba6a6:	fa10 f30c 	lsls.w	r3, r0, ip
   ba6aa:	fa20 f002 	lsr.w	r0, r0, r2
   ba6ae:	bf18      	it	ne
   ba6b0:	f040 0001 	orrne.w	r0, r0, #1
   ba6b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba6b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba6bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba6c0:	ea40 000c 	orr.w	r0, r0, ip
   ba6c4:	fa23 f302 	lsr.w	r3, r3, r2
   ba6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba6cc:	e7cc      	b.n	ba668 <__aeabi_d2f+0x14>
   ba6ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba6d2:	d107      	bne.n	ba6e4 <__aeabi_d2f+0x90>
   ba6d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba6d8:	bf1e      	ittt	ne
   ba6da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba6de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba6e2:	4770      	bxne	lr
   ba6e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba6e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba6ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba6f0:	4770      	bx	lr
   ba6f2:	bf00      	nop

000ba6f4 <atexit>:
   ba6f4:	2300      	movs	r3, #0
   ba6f6:	4601      	mov	r1, r0
   ba6f8:	461a      	mov	r2, r3
   ba6fa:	4618      	mov	r0, r3
   ba6fc:	f000 b8c8 	b.w	ba890 <__register_exitproc>

000ba700 <calloc>:
   ba700:	4b02      	ldr	r3, [pc, #8]	; (ba70c <calloc+0xc>)
   ba702:	460a      	mov	r2, r1
   ba704:	4601      	mov	r1, r0
   ba706:	6818      	ldr	r0, [r3, #0]
   ba708:	f000 b818 	b.w	ba73c <_calloc_r>
   ba70c:	2003cccc 	.word	0x2003cccc

000ba710 <memcpy>:
   ba710:	440a      	add	r2, r1
   ba712:	4291      	cmp	r1, r2
   ba714:	f100 33ff 	add.w	r3, r0, #4294967295
   ba718:	d100      	bne.n	ba71c <memcpy+0xc>
   ba71a:	4770      	bx	lr
   ba71c:	b510      	push	{r4, lr}
   ba71e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba722:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba726:	4291      	cmp	r1, r2
   ba728:	d1f9      	bne.n	ba71e <memcpy+0xe>
   ba72a:	bd10      	pop	{r4, pc}

000ba72c <memset>:
   ba72c:	4402      	add	r2, r0
   ba72e:	4603      	mov	r3, r0
   ba730:	4293      	cmp	r3, r2
   ba732:	d100      	bne.n	ba736 <memset+0xa>
   ba734:	4770      	bx	lr
   ba736:	f803 1b01 	strb.w	r1, [r3], #1
   ba73a:	e7f9      	b.n	ba730 <memset+0x4>

000ba73c <_calloc_r>:
   ba73c:	b513      	push	{r0, r1, r4, lr}
   ba73e:	434a      	muls	r2, r1
   ba740:	4611      	mov	r1, r2
   ba742:	9201      	str	r2, [sp, #4]
   ba744:	f7fe fa5a 	bl	b8bfc <_malloc_r>
   ba748:	4604      	mov	r4, r0
   ba74a:	b118      	cbz	r0, ba754 <_calloc_r+0x18>
   ba74c:	9a01      	ldr	r2, [sp, #4]
   ba74e:	2100      	movs	r1, #0
   ba750:	f7ff ffec 	bl	ba72c <memset>
   ba754:	4620      	mov	r0, r4
   ba756:	b002      	add	sp, #8
   ba758:	bd10      	pop	{r4, pc}
	...

000ba75c <srand>:
   ba75c:	b538      	push	{r3, r4, r5, lr}
   ba75e:	4b10      	ldr	r3, [pc, #64]	; (ba7a0 <srand+0x44>)
   ba760:	681d      	ldr	r5, [r3, #0]
   ba762:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba764:	4604      	mov	r4, r0
   ba766:	b9b3      	cbnz	r3, ba796 <srand+0x3a>
   ba768:	2018      	movs	r0, #24
   ba76a:	f7fe fa1f 	bl	b8bac <malloc>
   ba76e:	4602      	mov	r2, r0
   ba770:	63a8      	str	r0, [r5, #56]	; 0x38
   ba772:	b920      	cbnz	r0, ba77e <srand+0x22>
   ba774:	4b0b      	ldr	r3, [pc, #44]	; (ba7a4 <srand+0x48>)
   ba776:	480c      	ldr	r0, [pc, #48]	; (ba7a8 <srand+0x4c>)
   ba778:	2142      	movs	r1, #66	; 0x42
   ba77a:	f7fe fa47 	bl	b8c0c <__assert_func>
   ba77e:	490b      	ldr	r1, [pc, #44]	; (ba7ac <srand+0x50>)
   ba780:	4b0b      	ldr	r3, [pc, #44]	; (ba7b0 <srand+0x54>)
   ba782:	e9c0 1300 	strd	r1, r3, [r0]
   ba786:	4b0b      	ldr	r3, [pc, #44]	; (ba7b4 <srand+0x58>)
   ba788:	6083      	str	r3, [r0, #8]
   ba78a:	230b      	movs	r3, #11
   ba78c:	8183      	strh	r3, [r0, #12]
   ba78e:	2100      	movs	r1, #0
   ba790:	2001      	movs	r0, #1
   ba792:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba796:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba798:	2200      	movs	r2, #0
   ba79a:	611c      	str	r4, [r3, #16]
   ba79c:	615a      	str	r2, [r3, #20]
   ba79e:	bd38      	pop	{r3, r4, r5, pc}
   ba7a0:	2003cccc 	.word	0x2003cccc
   ba7a4:	000bc6a1 	.word	0x000bc6a1
   ba7a8:	000bc6b8 	.word	0x000bc6b8
   ba7ac:	abcd330e 	.word	0xabcd330e
   ba7b0:	e66d1234 	.word	0xe66d1234
   ba7b4:	0005deec 	.word	0x0005deec

000ba7b8 <strcpy>:
   ba7b8:	4603      	mov	r3, r0
   ba7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba7be:	f803 2b01 	strb.w	r2, [r3], #1
   ba7c2:	2a00      	cmp	r2, #0
   ba7c4:	d1f9      	bne.n	ba7ba <strcpy+0x2>
   ba7c6:	4770      	bx	lr

000ba7c8 <strlen>:
   ba7c8:	4603      	mov	r3, r0
   ba7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba7ce:	2a00      	cmp	r2, #0
   ba7d0:	d1fb      	bne.n	ba7ca <strlen+0x2>
   ba7d2:	1a18      	subs	r0, r3, r0
   ba7d4:	3801      	subs	r0, #1
   ba7d6:	4770      	bx	lr

000ba7d8 <strtok>:
   ba7d8:	4b16      	ldr	r3, [pc, #88]	; (ba834 <strtok+0x5c>)
   ba7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba7dc:	681e      	ldr	r6, [r3, #0]
   ba7de:	6db4      	ldr	r4, [r6, #88]	; 0x58
   ba7e0:	4605      	mov	r5, r0
   ba7e2:	b9fc      	cbnz	r4, ba824 <strtok+0x4c>
   ba7e4:	2050      	movs	r0, #80	; 0x50
   ba7e6:	9101      	str	r1, [sp, #4]
   ba7e8:	f7fe f9e0 	bl	b8bac <malloc>
   ba7ec:	9901      	ldr	r1, [sp, #4]
   ba7ee:	65b0      	str	r0, [r6, #88]	; 0x58
   ba7f0:	4602      	mov	r2, r0
   ba7f2:	b920      	cbnz	r0, ba7fe <strtok+0x26>
   ba7f4:	4b10      	ldr	r3, [pc, #64]	; (ba838 <strtok+0x60>)
   ba7f6:	4811      	ldr	r0, [pc, #68]	; (ba83c <strtok+0x64>)
   ba7f8:	2157      	movs	r1, #87	; 0x57
   ba7fa:	f7fe fa07 	bl	b8c0c <__assert_func>
   ba7fe:	e9c0 4400 	strd	r4, r4, [r0]
   ba802:	e9c0 4402 	strd	r4, r4, [r0, #8]
   ba806:	e9c0 4404 	strd	r4, r4, [r0, #16]
   ba80a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   ba80e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   ba812:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   ba816:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   ba81a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   ba81e:	6184      	str	r4, [r0, #24]
   ba820:	7704      	strb	r4, [r0, #28]
   ba822:	6244      	str	r4, [r0, #36]	; 0x24
   ba824:	6db2      	ldr	r2, [r6, #88]	; 0x58
   ba826:	2301      	movs	r3, #1
   ba828:	4628      	mov	r0, r5
   ba82a:	b002      	add	sp, #8
   ba82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba830:	f000 b806 	b.w	ba840 <__strtok_r>
   ba834:	2003cccc 	.word	0x2003cccc
   ba838:	000bc6a1 	.word	0x000bc6a1
   ba83c:	000bc735 	.word	0x000bc735

000ba840 <__strtok_r>:
   ba840:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba842:	b908      	cbnz	r0, ba848 <__strtok_r+0x8>
   ba844:	6810      	ldr	r0, [r2, #0]
   ba846:	b188      	cbz	r0, ba86c <__strtok_r+0x2c>
   ba848:	4604      	mov	r4, r0
   ba84a:	4620      	mov	r0, r4
   ba84c:	f814 5b01 	ldrb.w	r5, [r4], #1
   ba850:	460f      	mov	r7, r1
   ba852:	f817 6b01 	ldrb.w	r6, [r7], #1
   ba856:	b91e      	cbnz	r6, ba860 <__strtok_r+0x20>
   ba858:	b965      	cbnz	r5, ba874 <__strtok_r+0x34>
   ba85a:	6015      	str	r5, [r2, #0]
   ba85c:	4628      	mov	r0, r5
   ba85e:	e005      	b.n	ba86c <__strtok_r+0x2c>
   ba860:	42b5      	cmp	r5, r6
   ba862:	d1f6      	bne.n	ba852 <__strtok_r+0x12>
   ba864:	2b00      	cmp	r3, #0
   ba866:	d1f0      	bne.n	ba84a <__strtok_r+0xa>
   ba868:	6014      	str	r4, [r2, #0]
   ba86a:	7003      	strb	r3, [r0, #0]
   ba86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba86e:	461c      	mov	r4, r3
   ba870:	e00c      	b.n	ba88c <__strtok_r+0x4c>
   ba872:	b915      	cbnz	r5, ba87a <__strtok_r+0x3a>
   ba874:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba878:	460e      	mov	r6, r1
   ba87a:	f816 5b01 	ldrb.w	r5, [r6], #1
   ba87e:	42ab      	cmp	r3, r5
   ba880:	d1f7      	bne.n	ba872 <__strtok_r+0x32>
   ba882:	2b00      	cmp	r3, #0
   ba884:	d0f3      	beq.n	ba86e <__strtok_r+0x2e>
   ba886:	2300      	movs	r3, #0
   ba888:	f804 3c01 	strb.w	r3, [r4, #-1]
   ba88c:	6014      	str	r4, [r2, #0]
   ba88e:	e7ed      	b.n	ba86c <__strtok_r+0x2c>

000ba890 <__register_exitproc>:
   ba890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba894:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba950 <__register_exitproc+0xc0>
   ba898:	4606      	mov	r6, r0
   ba89a:	f8d8 0000 	ldr.w	r0, [r8]
   ba89e:	461f      	mov	r7, r3
   ba8a0:	460d      	mov	r5, r1
   ba8a2:	4691      	mov	r9, r2
   ba8a4:	f000 f856 	bl	ba954 <__retarget_lock_acquire_recursive>
   ba8a8:	4b25      	ldr	r3, [pc, #148]	; (ba940 <__register_exitproc+0xb0>)
   ba8aa:	681c      	ldr	r4, [r3, #0]
   ba8ac:	b934      	cbnz	r4, ba8bc <__register_exitproc+0x2c>
   ba8ae:	4c25      	ldr	r4, [pc, #148]	; (ba944 <__register_exitproc+0xb4>)
   ba8b0:	601c      	str	r4, [r3, #0]
   ba8b2:	4b25      	ldr	r3, [pc, #148]	; (ba948 <__register_exitproc+0xb8>)
   ba8b4:	b113      	cbz	r3, ba8bc <__register_exitproc+0x2c>
   ba8b6:	681b      	ldr	r3, [r3, #0]
   ba8b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba8bc:	6863      	ldr	r3, [r4, #4]
   ba8be:	2b1f      	cmp	r3, #31
   ba8c0:	dd07      	ble.n	ba8d2 <__register_exitproc+0x42>
   ba8c2:	f8d8 0000 	ldr.w	r0, [r8]
   ba8c6:	f000 f847 	bl	ba958 <__retarget_lock_release_recursive>
   ba8ca:	f04f 30ff 	mov.w	r0, #4294967295
   ba8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba8d2:	b34e      	cbz	r6, ba928 <__register_exitproc+0x98>
   ba8d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba8d8:	b988      	cbnz	r0, ba8fe <__register_exitproc+0x6e>
   ba8da:	4b1c      	ldr	r3, [pc, #112]	; (ba94c <__register_exitproc+0xbc>)
   ba8dc:	b923      	cbnz	r3, ba8e8 <__register_exitproc+0x58>
   ba8de:	f8d8 0000 	ldr.w	r0, [r8]
   ba8e2:	f000 f838 	bl	ba956 <__retarget_lock_release>
   ba8e6:	e7f0      	b.n	ba8ca <__register_exitproc+0x3a>
   ba8e8:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba8ec:	f7fe f95e 	bl	b8bac <malloc>
   ba8f0:	2800      	cmp	r0, #0
   ba8f2:	d0f4      	beq.n	ba8de <__register_exitproc+0x4e>
   ba8f4:	2300      	movs	r3, #0
   ba8f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba8fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba8fe:	6863      	ldr	r3, [r4, #4]
   ba900:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba904:	2201      	movs	r2, #1
   ba906:	409a      	lsls	r2, r3
   ba908:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba90c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba910:	4313      	orrs	r3, r2
   ba912:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba916:	2e02      	cmp	r6, #2
   ba918:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba91c:	bf02      	ittt	eq
   ba91e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba922:	4313      	orreq	r3, r2
   ba924:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba928:	6863      	ldr	r3, [r4, #4]
   ba92a:	f8d8 0000 	ldr.w	r0, [r8]
   ba92e:	1c5a      	adds	r2, r3, #1
   ba930:	3302      	adds	r3, #2
   ba932:	6062      	str	r2, [r4, #4]
   ba934:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba938:	f000 f80e 	bl	ba958 <__retarget_lock_release_recursive>
   ba93c:	2000      	movs	r0, #0
   ba93e:	e7c6      	b.n	ba8ce <__register_exitproc+0x3e>
   ba940:	2003e7e8 	.word	0x2003e7e8
   ba944:	2003e75c 	.word	0x2003e75c
   ba948:	00000000 	.word	0x00000000
   ba94c:	000b8bad 	.word	0x000b8bad
   ba950:	2003cd30 	.word	0x2003cd30

000ba954 <__retarget_lock_acquire_recursive>:
   ba954:	4770      	bx	lr

000ba956 <__retarget_lock_release>:
   ba956:	4770      	bx	lr

000ba958 <__retarget_lock_release_recursive>:
   ba958:	4770      	bx	lr

000ba95a <link_code_end>:
	...

000ba95c <dynalib_user>:
   ba95c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba96c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba97c:	7620 7269 7574 6c61 4900 766e 6c61 6469      virtual.Invalid
   ba98c:	6553 736e 726f 7245 6f72 0072 6156 6f6c     SensorError.Valo
   ba99c:	2072 6f6e 7620 6c61 6469 006f 654c 4564     r no valido.LedE
   ba9ac:	7272 726f 704f 6974 6e6f 4d00 444f 204f     rrorOption.MODO 
   ba9bc:	4142 4953 4f43 4d00 444f 204f 5641 4e41     BASICO.MODO AVAN
   ba9cc:	415a 4f44 4d00 444f 204f 554d 4953 4143     ZADO.MODO MUSICA
   ba9dc:	4200 7469 616d 2070 6f6e 2074 7661 6961     .Bitmap not avai
   ba9ec:	616c 6c62 2e65 2000 4f43 454e 5443 5241     lable.. CONECTAR
   ba9fc:	4120 4820 5845 4741 4e4f 004f 4320 4e4f      A HEXAGONO. CON
   baa0c:	4345 4154 2052 2041 5543 4441 4152 4f44     ECTAR A CUADRADO
   baa1c:	2000 4f43 454e 5443 5241 4120 5420 4952     . CONECTAR A TRI
   baa2c:	4e41 5547 4f4c 2000 4f43 454e 5443 5241     ANGULO. CONECTAR
   baa3c:	4120 5220 4d4f 4f42 2000 4f43 454e 5443      A ROMBO. CONECT
   baa4c:	5241 4120 5320 4d45 4349 5249 5543 4f4c     AR A SEMICIRCULO
   baa5c:	4300 4e4f 4345 4154 2052 2041 4943 4352     .CONECTAR A CIRC
   baa6c:	4c55 004f 4159 4320 4e4f 4345 4154 4f44     ULO.YA CONECTADO
   baa7c:	5400 7261 656a 6174 6920 766e 6c61 6469     .Tarjeta invalid
   baa8c:	2061 6170 6172 6520 7473 2065 6f6d 6f64     a para este modo
   baa9c:	4200 726f 6172 6f64 6920 766e 6c61 6469     .Borrado invalid
   baaac:	206f 6170 6172 6520 7473 2065 6f6d 6f64     o para este modo
   baabc:	4f00 6472 6e65 6420 2065 6174 6a72 7465     .Orden de tarjet
   baacc:	7361 6920 766e 6c61 6469 006f 7550 7265     as invalido.Puer
   baadc:	6f74 6e20 206f 6964 7073 6e6f 6269 656c     to no disponible
   baaec:	5000 616c 2079 6f6e 6420 7369 6f70 696e     .Play no disponi
   baafc:	6c62 0065 6553 736e 726f 6e20 206f 6964     ble.Sensor no di
   bab0c:	7073 6e6f 6269 656c 2820 6e65 7520 6f73     sponible (en uso
   bab1c:	0029 6341 7574 6461 726f 6e20 206f 6964     ).Actuador no di
   bab2c:	7073 6e6f 6269 656c 2820 6e65 7520 6f73     sponible (en uso
   bab3c:	0029 6f42 7272 6461 206f 6564 6220 6f6c     ).Borrado de blo
   bab4c:	7571 2065 6572 6c61 7a69 6461 006f 614e     que realizado.Na
   bab5c:	6164 7120 6575 6220 726f 6172 0072 6f42     da que borrar.Bo
   bab6c:	7272 6461 206f 6564 6c20 6f6f 2070 6572     rrado de loop re
   bab7c:	6c61 7a69 6461 006f 614e 6164 7120 6575     alizado.Nada que
   bab8c:	6220 726f 6172 2e72 4e00 746f 2061 6e69      borrar..Nota in
   bab9c:	c376 6ca1 6469 0061 6954 6f70 6920 766e     v..lida.Tipo inv
   babac:	a1c3 696c 6f64 5200 0045 494d 4600 0041     ..lido.RE.MI.FA.
   babbc:	4f53 004c 414c 5300 0049 435f 5f00 004e     SOL.LA.SI._C._N.
   babcc:	425f 2500 2064 202d 6425 4600 6e69 6c61     _B.%d - %d.Final
   babdc:	7a69 2061 6c65 6220 6375 656c 6120 746e     iza el bucle ant
   babec:	7365 6420 2065 6572 7270 646f 6375 7269     es de reproducir
   babfc:	4900 766e 6c61 6469 7320 6e65 6f73 2172     .Invalid sensor!
   bac0c:	2d20 203e 6553 736e 726f 7220 7065 7465      -> Sensor repet
   bac1c:	6469 206f 6e65 6520 206c 6c62 716f 6575     ido en el bloque
   bac2c:	4d00 646f 206f 4142 4953 4f43 6420 7465     .Modo BASICO det
   bac3c:	6365 6174 6f64 4900 696e 6963 6e61 6f64     ectado.Iniciando
   bac4c:	6d20 646f 206f 4142 4953 4f43 2e2e 002e      modo BASICO....
   bac5c:	6f4d 6f64 4120 4156 5a4e 4441 204f 6564     Modo AVANZADO de
   bac6c:	6574 7463 6461 006f 6e49 6369 6169 646e     tectado.Iniciand
   bac7c:	206f 6f6d 6f64 4120 4156 5a4e 4441 2e4f     o modo AVANZADO.
   bac8c:	2e2e 4d00 646f 206f 554d 4953 4143 6420     ...Modo MUSICA d
   bac9c:	7465 6365 6174 6f64 4900 696e 6963 6e61     etectado.Inician
   bacac:	6f64 6d20 646f 206f 554d 4953 4143 2e2e     do modo MUSICA..
   bacbc:	002e 494d 4146 4552 525f 6165 2864 2029     ..MIFARE_Read() 
   baccc:	6166 6c69 6465 203a 5000 4443 415f 7475     failed: .PCD_Aut
   bacdc:	6568 746e 6369 7461 2865 2029 6166 6c69     henticate() fail
   bacec:	6465 203a 5400 6761 6e49 6f66 203a 7325     ed: .TagInfo: %s
   bacfc:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   bad0c:	7472 206f 3041 000a 6f43 656e 7463 7261     rto A0..Conectar
   bad1c:	6120 206c 7570 7265 6f74 4120 0a32 4300      al puerto A2..C
   bad2c:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   bad3c:	206f 3441 000a 6f43 656e 7463 7261 6120     o A4..Conectar a
   bad4c:	206c 7570 7265 6f74 4420 0a32 4300 6e6f     l puerto D2..Con
   bad5c:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   bad6c:	3444 000a 6f43 656e 7463 7261 6120 206c     D4..Conectar al 
   bad7c:	7570 7265 6f74 4420 0a36 4500 7272 726f     puerto D6..Error
   bad8c:	203a 6f4e 6820 7961 6d20 7361 7020 6575     : No hay mas pue
   bad9c:	7472 736f 6420 7369 6f70 696e 6c62 7365     rtos disponibles
   badac:	0a20 4500 5045 4f52 204d 6d65 7470 0079      ..EEPROM empty.
   badbc:	755a 626d 6461 726f 003a 6154 2067 6544     Zumbador:.Tag De
   badcc:	6574 7463 6461 2061 2d2d 203e 4200 726f     tectada --> .Bor
   baddc:	6172 6f64 6320 6d6f 6c70 7465 206f 6572     rado completo re
   badec:	6c61 7a69 6461 006f 6f42 7272 6461 206f     alizado.Borrado 
   badfc:	6f6e 7020 7265 696d 6974 6f64 7020 7261     no permitido par
   bae0c:	2061 7365 6574 6d20 646f 006f 6553 736e     a este modo.Sens
   bae1c:	726f 6420 7465 6365 6174 6f64 4100 7463     or detectado.Act
   bae2c:	6175 6f64 2072 6564 6574 7463 6461 006f     uador detectado.
   bae3c:	6a45 6365 7475 6e61 6f64 7420 6761 2d20     Ejecutando tag -
   bae4c:	3e2d 0020 6553 6520 7073 7265 6261 2061     -> .Se esperaba 
   bae5c:	4649 7420 6761 4400 7365 7570 7365 6420     IF tag.Despues d
   bae6c:	2065 6e75 7320 6e65 6f73 2072 6573 6520     e un sensor se e
   bae7c:	7073 7265 2061 6e75 2061 6f63 636e 6f69     spera una concio
   bae8c:	3a6e 4120 444e 7520 4f20 0052 6553 736e     n: AND u OR.Sens
   bae9c:	726f 6920 766e 6c61 6469 006f 6553 6520     or invalido.Se e
   baeac:	7073 7265 6261 2061 4854 4e45 7420 6761     speraba THEN tag
   baebc:	4900 766e 6c61 6469 4120 7463 6175 6f64     .Invalid Actuado
   baecc:	0072 6553 6520 7073 7265 6261 2061 4c45     r.Se esperaba EL
   baedc:	4553 7420 6761 4900 2046 6564 6574 7463     SE tag.IF detect
   baeec:	6461 006f 4649 4e00 6d75 7265 206f 6564     ado.IF.Numero de
   baefc:	6220 6f6c 7571 7365 3e20 3220 7c20 207c      bloques > 2 || 
   baf0c:	6553 6e20 6365 7365 7469 2061 6c61 6d20     Se necesita al m
   baf1c:	6e65 736f 7520 206e 6361 7574 6461 726f     enos un actuador
   baf2c:	7020 7261 2061 6574 6d72 6e69 7261 6520      para terminar e
   baf3c:	206c 6c62 716f 6575 4100 444e 4f2f 2052     l bloque.AND/OR 
   baf4c:	6564 6574 7463 6461 006f 4e41 0044 6e55     detectado.AND.Un
   baf5c:	2061 6f63 636e 6369 6f69 206e 6f73 6f6c     a concicion solo
   baf6c:	7020 6575 6564 6920 2072 6573 7567 6469      puede ir seguid
   baf7c:	2061 6564 7520 206e 6573 736e 726f 002e     a de un sensor..
   baf8c:	4854 4e45 6420 7465 6365 6174 6f64 5400     THEN detectado.T
   baf9c:	4548 004e 754e 656d 6f72 6420 2065 6573     HEN.Numero de se
   bafac:	736e 726f 7365 6920 666e 6375 6569 746e     nsores infucient
   bafbc:	7365 4500 534c 2045 6564 6574 7463 6461     es.ELSE detectad
   bafcc:	006f 4c45 4553 4900 746e 6f72 7564 6563     o.ELSE.Introduce
   bafdc:	7520 206e 6341 7574 6461 726f 7020 7261      un Actuador par
   bafec:	2061 616c 6520 6176 756c 6361 c369 6eb3     a la evaluaci..n
   baffc:	6120 5420 5552 0045 6946 206e 6154 0067      a TRUE.Fin Tag.
   bb00c:	2023 6c42 716f 6575 7c20 2320 5320 6e65     # Bloque | # Sen
   bb01c:	6f73 6572 2073 207c 2023 6f43 646e 6369     sores | # Condic
   bb02c:	6f69 656e 2073 207c 2023 6341 7574 6461     iones | # Actuad
   bb03c:	726f 7365 2000 2020 2520 2064 7c09 2009     ores.    %d .|. 
   bb04c:	6425 0920 097c 2520 2064 7c09 2009 6425     %d .|. %d .|. %d
   bb05c:	0920 097c 2520 0064 6154 6a72 7465 2061      .|. %d.Tarjeta 
   bb06c:	6e69 c376 6ca1 6469 2061 6170 6172 6520     inv..lida para e
   bb07c:	7473 2065 6f6d 6f64 4200 4f4c 5551 2045     ste modo.BLOQUE 
   bb08c:	3a31 5420 5552 0045 4c42 514f 4555 3120     1: TRUE.BLOQUE 1
   bb09c:	203a 4146 534c 0045 2020 6361 6261 2061     : FALSE.  acaba 
   bb0ac:	6c62 716f 6575 3120 4200 4f4c 5551 2045     bloque 1.BLOQUE 
   bb0bc:	3a32 5420 5552 0045 4c42 514f 4555 3220     2: TRUE.BLOQUE 2
   bb0cc:	203a 4146 534c 0045 4c42 514f 4555 3220     : FALSE.BLOQUE 2
   bb0dc:	203a 2020 6f6e 6620 6e69 6c61 7a69 6461     :   no finalizad
   bb0ec:	006f 6a45 6365 7475 6e61 6f64 2e2e 002e     o.Ejecutando....
   bb0fc:	6f42 7272 6461 2061 6c75 6974 616d 6c20     Borrada ultima l
   bb10c:	6365 7574 6172 4c00 6f6f 2070 202d 5000     ectura.Loop - .P
   bb11c:	7261 2061 6f63 656d 7a6e 7261 7520 206e     ara comenzar un 
   bb12c:	6f6c 706f 6820 7961 7120 6575 6620 6e69     loop hay que fin
   bb13c:	6c61 7a69 7261 6520 206c 6e61 6574 6972     alizar el anteri
   bb14c:	726f 002e 4e45 2044 6f4c 706f 7200 7065     or..END Loop.rep
   bb15c:	2d20 0020 6f4c 706f 7320 6e69 6320 6d6f      - .Loop sin com
   bb16c:	6e65 617a 2072 206f 6973 206e 6f63 746e     enzar o sin cont
   bb17c:	6e65 6469 006f 002d 2330 2331 2331 0030     enido.-.0#1#1#0.
   bb18c:	2330 2331 2331 0031 2330 2330 2331 0030     0#1#1#1.0#0#1#0.
   bb19c:	2330 2330 2331 0031 2330 2330 2331 0032     0#0#1#1.0#0#1#2.
   bb1ac:	2330 2330 2331 0033 2330 2330 2331 0034     0#0#1#3.0#0#1#4.
   bb1bc:	2330 2330 2331 0035 2331 2330 2331 2337     0#0#1#5.1#0#1#7#
   bb1cc:	0030 2331 2330 2331 2337 0031 2331 2330     0.1#0#1#7#1.1#0#
   bb1dc:	2330 2332 0030 2331 2330 2330 2332 0031     0#2#0.1#0#0#2#1.
   bb1ec:	2331 2330 2330 2333 0030 2331 2330 2330     1#0#0#3#0.1#0#0#
   bb1fc:	2333 0031 2331 2330 2331 2334 0030 2331     3#1.1#0#1#4#0.1#
   bb20c:	2330 2331 2334 0031 2331 2330 2331 2335     0#1#4#1.1#0#1#5#
   bb21c:	0030 2331 2330 2331 2335 0031 2331 2330     0.1#0#1#5#1.1#0#
   bb22c:	2331 2336 0030 2331 2330 2331 2336 0032     1#6#0.1#0#1#6#2.
   bb23c:	2331 2331 2331 2331 0030 2331 2331 2331     1#1#1#1#0.1#1#1#
   bb24c:	2331 0031 2331 2331 2331 2330 0030 2331     1#1.1#1#1#0#0.1#
   bb25c:	2331 2331 2330 0031 2331 2331 2331 2330     1#1#0#1.1#1#1#0#
   bb26c:	0032 2331 2331 2331 2330 0033 2331 2331     2.1#1#1#0#3.1#1#
   bb27c:	2331 2330 0034 2331 2331 2331 2330 0035     1#0#4.1#1#1#0#5.
   bb28c:	2331 2331 2331 2330 0036 2331 2331 2331     1#1#1#0#6.1#1#1#
   bb29c:	2330 0037 2331 2331 2331 2330 0038 2331     0#7.1#1#1#0#8.1#
   bb2ac:	2333 0030 2331 2333 0031 2332 2330 2330     3#0.1#3#1.2#0#0#
   bb2bc:	0030 2332 2330 2330 0031 2332 2330 2330     0.2#0#0#1.2#0#0#
   bb2cc:	0032 2332 2330 2331 0030 2332 2330 2331     2.2#0#1#0.2#0#1#
   bb2dc:	0031 2332 2330 2331 0032 2332 2330 2332     1.2#0#1#2.2#0#2#
   bb2ec:	0030 2332 2330 2332 0031 2332 2330 2332     0.2#0#2#1.2#0#2#
   bb2fc:	0032 2332 2330 2333 0030 2332 2330 2333     2.2#0#3#0.2#0#3#
   bb30c:	0031 2332 2330 2333 0032 2332 2330 2334     1.2#0#3#2.2#0#4#
   bb31c:	0030 2332 2330 2334 0031 2332 2330 2334     0.2#0#4#1.2#0#4#
   bb32c:	0032 2332 2330 2335 0030 2332 2330 2335     2.2#0#5#0.2#0#5#
   bb33c:	0031 2332 2330 2335 0032 2332 2330 2336     1.2#0#5#2.2#0#6#
   bb34c:	0030 2332 2330 2336 0031 2332 2330 2336     0.2#0#6#1.2#0#6#
   bb35c:	0032 2332 2330 2337 0030 2332 2330 2337     2.2#0#7#0.2#0#7#
   bb36c:	0031 2332 2330 2337 0032 2332 2331 0030     1.2#0#7#2.2#1#0.
   bb37c:	2332 2332 0030 2332 2332 0031 2332 2332     2#2#0.2#2#1.2#2#
   bb38c:	0032 2332 2332 0033 2332 2332 0034 2332     2.2#2#3.2#2#4.2#
   bb39c:	2332 0035 2332 2332 0036 2332 2332 0037     2#5.2#2#6.2#2#7.
   bb3ac:	2332 2332 0038 2336 2330 0030 2336 2330     2#2#8.6#0#0.6#0#
   bb3bc:	0031 2336 2330 0032 2336 2331 0030 2336     1.6#0#2.6#1#0.6#
   bb3cc:	2332 0030 2336 2332 0031 2336 2332 0032     2#0.6#2#1.6#2#2.

000bb3dc <CSWTCH.371>:
   bb3dc:	00fa 01f4 03e8                              ......

000bb3e2 <_ZL14sucreLogo_data>:
   bb3e2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3f2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb402:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bb412:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bb422:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb432:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bb442:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb452:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bb462:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bb472:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bb482:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bb492:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bb4a2:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bb4b2:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bb4c2:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bb4d2:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bb4e2:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bb4f2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb502:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bb512:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bb522:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bb532:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bb542:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bb552:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bb562:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bb572:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bb582:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bb592:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bb5a2:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bb5b2:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bb5c2:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bb5d2:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bb5e2:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bb5f2:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bb602:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bb612:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bb622:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bb632:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bb642:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bb652:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bb662:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bb672:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bb682:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb692:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb6a2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb6b2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb6c2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb6d2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb6e2:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bb6f2:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bb702:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bb712:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bb722:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bb732:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bb742:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bb752:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bb762:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bb772:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bb782:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bb792:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bb7a2:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb7b2:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bb7c2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb7d2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb7e2:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bb7f2:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bb802:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bb812:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bb822:	7525 003e                                   %u>.

000bb826 <_ZL4font>:
   bb826:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bb836:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bb846:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bb856:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bb866:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bb876:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bb886:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bb896:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bb8a6:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bb8b6:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bb8c6:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bb8d6:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bb8e6:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bb8f6:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bb906:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bb916:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bb926:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bb936:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bb946:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bb956:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bb966:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bb976:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bb986:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bb996:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bb9a6:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bb9b6:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bb9c6:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bb9d6:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bb9e6:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bb9f6:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bba06:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bba16:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bba26:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bba36:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bba46:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bba56:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bba66:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bba76:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bba86:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bba96:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bbaa6:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bbab6:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bbac6:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bbad6:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bbae6:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bbaf6:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bbb06:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bbb16:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bbb26:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bbb36:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bbb46:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bbb56:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bbb66:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bbb76:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bbb86:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bbb96:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bbba6:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bbbb6:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bbbc6:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bbbd6:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bbbe6:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bbbf6:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bbc06:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bbc16:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bbc26:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bbc36:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bbc46:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bbc56:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bbc66:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bbc76:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bbc86:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bbc96:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bbca6:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bbcb6:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bbcc6:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bbcd6:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bbce6:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bbcf6:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bbd06:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bbd16:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bbd28 <_ZTV12Adafruit_GFX>:
	...
   bbd38:	70dd 000b 9085 000b 40a1 000b 6ae3 000b     .p.......@...j..
   bbd48:	6ae5 000b 6b17 000b 6af3 000b 6b05 000b     .j...k...j...k..
   bbd58:	6a25 000b 6ae3 000b 6d0f 000b 6d0d 000b     %j...j...m...m..
   bbd68:	6b2f 000b 6b6d 000b 6ba7 000b 6bed 000b     /k..mk...k...k..
   bbd78:	6c09 000b 6c8d 000b 6e55 6e6b 776f 206e     .l...l..Unknown 
   bbd88:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bbd98:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bbda8:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bbdb8:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bbdc8:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bbdd8:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bbde8:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bbdf8:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bbe08:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bbe18:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bbe28:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bbe38:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bbe48:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bbe58:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bbe68:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bbe78 <CSWTCH.84>:
   bbe78:	bd8e 000b bd97 000b bdaf 000b bdc4 000b     ................
   bbe88:	bdde 000b bdfa 000b be29 000b be3b 000b     ........)...;...
   bbe98:	be55 000b                                   U...

000bbe9c <_ZTVN8particle11SPISettingsE>:
	...
   bbea4:	69d1 000b 69c1 000b 69c3 000b               .i...i...i..

000bbeb0 <_ZL12splash2_data>:
   bbeb0:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bbec0:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bbed0:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bbeec:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bbefc:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bbf0c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bbf1c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bbf2c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bbf3c:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bbf4c:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bbf5c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bbf6c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bbf7c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bbf8c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bbf9c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bbfac:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bbfbc:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bbfcc:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bbfdc:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bbfec:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bbffc:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bc00c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bc01c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bc02c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bc044:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bc054:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bc064:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bc074:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bc084:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bc090 <_ZL14sucreLogo_data>:
   bc090:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc0a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc0b0:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bc0c0:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bc0d0:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc0e0:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc0f0:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc100:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc110:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bc120:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bc130:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bc140:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bc150:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bc160:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bc170:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bc180:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bc190:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bc1a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc1b0:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bc1c0:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bc1d0:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bc1e0:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bc1f0:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bc200:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bc210:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bc220:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bc230:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bc240:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bc250:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bc260:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bc270:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bc280:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bc290:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bc2a0:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bc2b0:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bc2c0:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bc2d0:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bc2e0:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bc2f0:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bc300:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bc310:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bc320:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bc330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc360:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc370:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc380:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc390:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bc3a0:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bc3b0:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bc3c0:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bc3d0:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bc3e0:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bc3f0:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bc400:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bc410:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bc420:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bc430:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bc440:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bc450:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc460:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc470:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc480:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bc490 <_ZTV16Adafruit_SSD1306>:
	...
   bc498:	7c91 000b 7ca9 000b 70dd 000b 9085 000b     .|...|...p......
   bc4a8:	7cbd 000b 6ae3 000b 6ae5 000b 6b17 000b     .|...j...j...k..
   bc4b8:	6af3 000b 6b05 000b 6a25 000b 6ae3 000b     .j...k..%j...j..
   bc4c8:	6d0f 000b 7e4f 000b 83eb 000b 839d 000b     .m..O~..........
   bc4d8:	6ba7 000b 6bed 000b 6c09 000b 6c8d 000b     .k...k...l...l..

000bc4e8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bc4e8:	8000 e0c0 f8f0 fefc                         ........

000bc4f0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bc4f0:	0100 0703 1f0f 7f3f                         ......?.

000bc4f8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bc4f8:	d5ae a880                                   ....

000bc4fc <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bc4fc:	00d3 8d40                                   ..@.

000bc500 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bc500:	0020 c8a1                                    ...

000bc504 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bc504:	40db a6a4 af2e                              .@....

000bc50a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bc50a:	02da 8f81                                   ....

000bc50e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bc50e:	12da                                         ...

000bc511 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bc511:	02da                                         ...

000bc514 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bc514:	0022 21ff 0000 0000                         "..!....

000bc51c <_ZTVN5spark13EthernetClassE>:
	...
   bc524:	8c8b 000b 8c81 000b 8c77 000b 8c6d 000b     ........w...m...
   bc534:	8c61 000b 8c55 000b 9979 000b 9981 000b     a...U...y.......
   bc544:	8c49 000b 8c41 000b 8c37 000b 8c2d 000b     I...A...7...-...
   bc554:	99b1 000b                                   ....

000bc558 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc558:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   bc568:	766f 0066 7061 0070 5925 252d 2d6d 6425     ovf.app.%Y-%m-%d
   bc578:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bc588:	6d69 0065                                   ime.

000bc58c <_ZTV9IPAddress>:
	...
   bc594:	9529 000b 9519 000b 951b 000b               )...........

000bc5a0 <_ZTV9USBSerial>:
	...
   bc5a8:	960f 000b 9677 000b 964d 000b 9085 000b     ....w...M.......
   bc5b8:	963f 000b 9611 000b 9621 000b 9671 000b     ?.......!...q...
   bc5c8:	9631 000b 9609 000b                         1.......

000bc5d0 <_ZTV11USARTSerial>:
	...
   bc5d8:	976d 000b 97d9 000b 97b1 000b 9085 000b     m...............
   bc5e8:	9781 000b 979d 000b 978f 000b 97ab 000b     ................
   bc5f8:	976f 000b 9773 000b                         o...s...

000bc600 <_ZTV7TwoWire>:
	...
   bc608:	9811 000b 985b 000b 9833 000b 9813 000b     ....[...3.......
   bc618:	983b 000b 9843 000b 984b 000b 9853 000b     ;...C...K...S...

000bc628 <_ZTVN5spark9WiFiClassE>:
	...
   bc630:	991b 000b 9911 000b 9907 000b 98bd 000b     ................
   bc640:	98fb 000b 98ef 000b 9979 000b 9981 000b     ........y.......
   bc650:	98e3 000b 98db 000b 98d1 000b 98c7 000b     ................
   bc660:	99b1 000b                                   ....

000bc664 <_ZTVN5spark12NetworkClassE>:
	...
   bc66c:	9939 000b 9943 000b 994d 000b 9957 000b     9...C...M...W...
   bc67c:	9961 000b 996d 000b 9979 000b 9981 000b     a...m...y.......
   bc68c:	9989 000b 9995 000b 999d 000b 99a7 000b     ................
   bc69c:	99b1 000b                                   ....

000bc6a0 <_ZSt7nothrow>:
   bc6a0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bc6b0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bc6c0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bc6d0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bc6e0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bc6f0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bc700:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bc710:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bc720:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bc730:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bc740:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bc750:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bc760:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bc770:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bc780:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bc790:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bc7a0:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bc7b0:	2e6b 0063                                   k.c.

000bc7b4 <link_const_variable_data_end>:
   bc7b4:	000b63b1 	.word	0x000b63b1
   bc7b8:	000b8c95 	.word	0x000b8c95
   bc7bc:	000b8e0d 	.word	0x000b8e0d
   bc7c0:	000b9075 	.word	0x000b9075
   bc7c4:	000b9375 	.word	0x000b9375
   bc7c8:	000b9385 	.word	0x000b9385
   bc7cc:	000b93a1 	.word	0x000b93a1
   bc7d0:	000b9925 	.word	0x000b9925
   bc7d4:	000b9a89 	.word	0x000b9a89

000bc7d8 <link_constructors_end>:
	...
