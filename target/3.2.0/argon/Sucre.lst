
/Users/marcosgarciagarcia/Documents/Sucre/target/3.2.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004e84  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b8ea0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b0  2003e52c  000b8ea4  0001e52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000214  2003e5dc  2003e5dc  0002e5dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b8f54  000b8f54  00028f54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b8f7c  000b8f7c  00028f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00140b47  00000000  00000000  00028f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00015ea7  00000000  00000000  00169ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004aec3  00000000  00000000  0017f96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003300  00000000  00000000  001ca831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b4f0  00000000  00000000  001cdb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003dac5  00000000  00000000  001d9021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0004d2cc  00000000  00000000  00216ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00132d43  00000000  00000000  00263db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00009898  00000000  00000000  00396af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fcc9 	bl	b79c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fcd1 	bl	b79e0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e52c 	.word	0x2003e52c
   b4048:	000b8ea4 	.word	0x000b8ea4
   b404c:	2003e5dc 	.word	0x2003e5dc
   b4050:	2003e5dc 	.word	0x2003e5dc
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fb61 	bl	b7724 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8e74 	.word	0x000b8e74
   b407c:	000b8e98 	.word	0x000b8e98

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bca2 	b.w	b49c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fced 	bl	b4a64 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bb01 	b.w	b7694 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f002 bdcb 	b.w	b6c2c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f002 bdd1 	b.w	b6c3c <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f002 fd26 	bl	b6af4 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6825 	.word	0x000b6825

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c0:	b40e      	push	{r1, r2, r3}
   b40c2:	b503      	push	{r0, r1, lr}
   b40c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40ce:	f003 f83c 	bl	b714a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d8:	b003      	add	sp, #12
   b40da:	4770      	bx	lr

000b40dc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b503      	push	{r0, r1, lr}
   b40e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ea:	f003 f82e 	bl	b714a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40ee:	b002      	add	sp, #8
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_Z12displayPrintbii>:
char buf[64];

String dispositivos[2] = {"-", "-"};

void displayPrint(bool esSensor, int id, int condicion)
{
   b40f8:	b570      	push	{r4, r5, r6, lr}
   b40fa:	4606      	mov	r6, r0
   display.clearDisplay();
   b40fc:	4839      	ldr	r0, [pc, #228]	; (b41e4 <_Z12displayPrintbii+0xec>)
{
   b40fe:	460c      	mov	r4, r1
   b4100:	4615      	mov	r5, r2
   display.clearDisplay();
   b4102:	f001 fb49 	bl	b5798 <_ZN16Adafruit_SSD130612clearDisplayEv>
   if (esSensor)
   b4106:	2e00      	cmp	r6, #0
   b4108:	d03f      	beq.n	b418a <_Z12displayPrintbii+0x92>
   {
      switch (id)
   b410a:	1e63      	subs	r3, r4, #1
   b410c:	2b06      	cmp	r3, #6
   b410e:	d837      	bhi.n	b4180 <_Z12displayPrintbii+0x88>
   b4110:	e8df f003 	tbb	[pc, r3]
   b4114:	20170d04 	.word	0x20170d04
   b4118:	2c26      	.short	0x2c26
   b411a:	2c          	.byte	0x2c
   b411b:	00          	.byte	0x00
      {
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b411c:	b92d      	cbnz	r5, b412a <_Z12displayPrintbii+0x32>
   b411e:	4932      	ldr	r1, [pc, #200]	; (b41e8 <_Z12displayPrintbii+0xf0>)
   b4120:	4832      	ldr	r0, [pc, #200]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4122:	f003 f953 	bl	b73cc <_ZN6StringaSEPKc>
   case 0:
      dispositivos[0] = "Actuador RGB";
      break;

   case 1:
      dispositivos[0] = "Actuado Zumbador";
   b4126:	4932      	ldr	r1, [pc, #200]	; (b41f0 <_Z12displayPrintbii+0xf8>)
   b4128:	e041      	b.n	b41ae <_Z12displayPrintbii+0xb6>
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b412a:	4932      	ldr	r1, [pc, #200]	; (b41f4 <_Z12displayPrintbii+0xfc>)
   b412c:	e7f8      	b.n	b4120 <_Z12displayPrintbii+0x28>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b412e:	b935      	cbnz	r5, b413e <_Z12displayPrintbii+0x46>
   b4130:	4931      	ldr	r1, [pc, #196]	; (b41f8 <_Z12displayPrintbii+0x100>)
   b4132:	482e      	ldr	r0, [pc, #184]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4134:	f003 f94a 	bl	b73cc <_ZN6StringaSEPKc>
      break;

   case 2:
      dispositivos[1] = "Sensor de Luz";
   b4138:	4930      	ldr	r1, [pc, #192]	; (b41fc <_Z12displayPrintbii+0x104>)
   case 4:
      dispositivos[1] = "Sensor Boton";
      break;

   case 5:
      dispositivos[1] = "Sensor Rotativo";
   b413a:	482c      	ldr	r0, [pc, #176]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b413c:	e038      	b.n	b41b0 <_Z12displayPrintbii+0xb8>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b413e:	4930      	ldr	r1, [pc, #192]	; (b4200 <_Z12displayPrintbii+0x108>)
   b4140:	e7f7      	b.n	b4132 <_Z12displayPrintbii+0x3a>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4142:	b92d      	cbnz	r5, b4150 <_Z12displayPrintbii+0x58>
   b4144:	492c      	ldr	r1, [pc, #176]	; (b41f8 <_Z12displayPrintbii+0x100>)
   b4146:	4829      	ldr	r0, [pc, #164]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4148:	f003 f940 	bl	b73cc <_ZN6StringaSEPKc>
      dispositivos[1] = "Sensor de Ruido";
   b414c:	492d      	ldr	r1, [pc, #180]	; (b4204 <_Z12displayPrintbii+0x10c>)
   b414e:	e7f4      	b.n	b413a <_Z12displayPrintbii+0x42>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b4150:	492b      	ldr	r1, [pc, #172]	; (b4200 <_Z12displayPrintbii+0x108>)
   b4152:	e7f8      	b.n	b4146 <_Z12displayPrintbii+0x4e>
         dispositivos[1] = "Sensor Boton";
   b4154:	492c      	ldr	r1, [pc, #176]	; (b4208 <_Z12displayPrintbii+0x110>)
   b4156:	4825      	ldr	r0, [pc, #148]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4158:	f003 f938 	bl	b73cc <_ZN6StringaSEPKc>
      dispositivos[1] = "Sensor Boton";
   b415c:	492a      	ldr	r1, [pc, #168]	; (b4208 <_Z12displayPrintbii+0x110>)
   b415e:	e7ec      	b.n	b413a <_Z12displayPrintbii+0x42>
         dispositivos[1] = "Sensor Rotativo";
   b4160:	492a      	ldr	r1, [pc, #168]	; (b420c <_Z12displayPrintbii+0x114>)
   b4162:	4822      	ldr	r0, [pc, #136]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4164:	f003 f932 	bl	b73cc <_ZN6StringaSEPKc>
      dispositivos[1] = "Sensor Rotativo";
   b4168:	4928      	ldr	r1, [pc, #160]	; (b420c <_Z12displayPrintbii+0x114>)
   b416a:	e7e6      	b.n	b413a <_Z12displayPrintbii+0x42>
         dispositivos[1] = "Sensor Rotativo";
   b416c:	4927      	ldr	r1, [pc, #156]	; (b420c <_Z12displayPrintbii+0x114>)
   b416e:	481f      	ldr	r0, [pc, #124]	; (b41ec <_Z12displayPrintbii+0xf4>)
   b4170:	f003 f92c 	bl	b73cc <_ZN6StringaSEPKc>
      break;

   default:
      Serial.println("No es valido");
   b4174:	f003 fa08 	bl	b7588 <_Z16_fetch_usbserialv>
   b4178:	4925      	ldr	r1, [pc, #148]	; (b4210 <_Z12displayPrintbii+0x118>)
   b417a:	f002 ffbe 	bl	b70fa <_ZN5Print7printlnEPKc>
      break;
   b417e:	e019      	b.n	b41b4 <_Z12displayPrintbii+0xbc>
         Serial.println("SensorNoValidoError");
   b4180:	f003 fa02 	bl	b7588 <_Z16_fetch_usbserialv>
   b4184:	4923      	ldr	r1, [pc, #140]	; (b4214 <_Z12displayPrintbii+0x11c>)
   b4186:	f002 ffb8 	bl	b70fa <_ZN5Print7printlnEPKc>
   switch (id)
   b418a:	2c05      	cmp	r4, #5
   b418c:	d8f2      	bhi.n	b4174 <_Z12displayPrintbii+0x7c>
   b418e:	a301      	add	r3, pc, #4	; (adr r3, b4194 <_Z12displayPrintbii+0x9c>)
   b4190:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   b4194:	000b41ad 	.word	0x000b41ad
   b4198:	000b4127 	.word	0x000b4127
   b419c:	000b4139 	.word	0x000b4139
   b41a0:	000b414d 	.word	0x000b414d
   b41a4:	000b415d 	.word	0x000b415d
   b41a8:	000b4169 	.word	0x000b4169
      dispositivos[0] = "Actuador RGB";
   b41ac:	491a      	ldr	r1, [pc, #104]	; (b4218 <_Z12displayPrintbii+0x120>)
      dispositivos[0] = "Actuado Zumbador";
   b41ae:	481b      	ldr	r0, [pc, #108]	; (b421c <_Z12displayPrintbii+0x124>)
   b41b0:	f003 f90c 	bl	b73cc <_ZN6StringaSEPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b41b4:	4d19      	ldr	r5, [pc, #100]	; (b421c <_Z12displayPrintbii+0x124>)
   }

   snprintf(buf, sizeof(buf), dispositivos[1]);
   display.println(buf);
   b41b6:	4c0b      	ldr	r4, [pc, #44]	; (b41e4 <_Z12displayPrintbii+0xec>)
   snprintf(buf, sizeof(buf), dispositivos[1]);
   b41b8:	692a      	ldr	r2, [r5, #16]
   b41ba:	4819      	ldr	r0, [pc, #100]	; (b4220 <_Z12displayPrintbii+0x128>)
   b41bc:	2140      	movs	r1, #64	; 0x40
   b41be:	f002 fd4d 	bl	b6c5c <snprintf>
   display.println(buf);
   b41c2:	4917      	ldr	r1, [pc, #92]	; (b4220 <_Z12displayPrintbii+0x128>)
   b41c4:	4620      	mov	r0, r4
   b41c6:	f002 ff98 	bl	b70fa <_ZN5Print7printlnEPKc>

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b41ca:	682a      	ldr	r2, [r5, #0]
   b41cc:	4814      	ldr	r0, [pc, #80]	; (b4220 <_Z12displayPrintbii+0x128>)
   b41ce:	2140      	movs	r1, #64	; 0x40
   b41d0:	f002 fd44 	bl	b6c5c <snprintf>
   display.println(buf);
   b41d4:	4912      	ldr	r1, [pc, #72]	; (b4220 <_Z12displayPrintbii+0x128>)
   b41d6:	4620      	mov	r0, r4
   b41d8:	f002 ff8f 	bl	b70fa <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b41dc:	2300      	movs	r3, #0
   b41de:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b41e0:	bd70      	pop	{r4, r5, r6, pc}
   b41e2:	bf00      	nop
   b41e4:	2003e634 	.word	0x2003e634
   b41e8:	000b7c14 	.word	0x000b7c14
   b41ec:	2003e694 	.word	0x2003e694
   b41f0:	000b7c9b 	.word	0x000b7c9b
   b41f4:	000b7c2a 	.word	0x000b7c2a
   b41f8:	000b7c41 	.word	0x000b7c41
   b41fc:	000b7cac 	.word	0x000b7cac
   b4200:	000b7c4f 	.word	0x000b7c4f
   b4204:	000b7cba 	.word	0x000b7cba
   b4208:	000b7c5d 	.word	0x000b7c5d
   b420c:	000b7c6a 	.word	0x000b7c6a
   b4210:	000b7cca 	.word	0x000b7cca
   b4214:	000b7c7a 	.word	0x000b7c7a
   b4218:	000b7c8e 	.word	0x000b7c8e
   b421c:	2003e684 	.word	0x2003e684
   b4220:	2003e5f4 	.word	0x2003e5f4

000b4224 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b4224:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b4226:	7803      	ldrb	r3, [r0, #0]
   b4228:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b422a:	bf0c      	ite	eq
   b422c:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b422e:	2200      	movne	r2, #0
   int i = 0;
   b4230:	4613      	mov	r3, r2
   b4232:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b4234:	240a      	movs	r4, #10
      i++;
   b4236:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b4238:	f813 1b01 	ldrb.w	r1, [r3], #1
   b423c:	3930      	subs	r1, #48	; 0x30
   b423e:	b2cd      	uxtb	r5, r1
   b4240:	2d09      	cmp	r5, #9
   b4242:	d802      	bhi.n	b424a <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b4244:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b4248:	e7f6      	b.n	b4238 <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
   b424a:	b102      	cbz	r2, b424e <_Z4atoiPc+0x2a>
      num = -1 * num;
   b424c:	4240      	negs	r0, r0
   return num;
}
   b424e:	bd30      	pop	{r4, r5, pc}

000b4250 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b4250:	b570      	push	{r4, r5, r6, lr}
   b4252:	4614      	mov	r4, r2
   b4254:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b4256:	f003 fc11 	bl	b7a7c <strtok>
   int j = 0;
   b425a:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b425c:	b140      	cbz	r0, b4270 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b425e:	f7ff ffe1 	bl	b4224 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4262:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4264:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4268:	2000      	movs	r0, #0
   b426a:	f003 fc07 	bl	b7a7c <strtok>
   while (ptr != NULL)
   b426e:	e7f5      	b.n	b425c <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4270:	6823      	ldr	r3, [r4, #0]
   b4272:	b913      	cbnz	r3, b427a <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
   b4274:	4b01      	ldr	r3, [pc, #4]	; (b427c <_Z5splitPcS_Pi+0x2c>)
   b4276:	2201      	movs	r2, #1
   b4278:	701a      	strb	r2, [r3, #0]
   }
}
   b427a:	bd70      	pop	{r4, r5, r6, pc}
   b427c:	2003e6a4 	.word	0x2003e6a4

000b4280 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4282:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4286:	f10d 0307 	add.w	r3, sp, #7
   b428a:	460a      	mov	r2, r1
   b428c:	4601      	mov	r1, r0
   b428e:	480d      	ldr	r0, [pc, #52]	; (b42c4 <_Z17readDataFromBlockhPhh+0x44>)
   b4290:	4d0d      	ldr	r5, [pc, #52]	; (b42c8 <_Z17readDataFromBlockhPhh+0x48>)
   b4292:	f002 f913 	bl	b64bc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b4296:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4298:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b429a:	d010      	beq.n	b42be <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b429c:	f003 f974 	bl	b7588 <_Z16_fetch_usbserialv>
   b42a0:	490a      	ldr	r1, [pc, #40]	; (b42cc <_Z17readDataFromBlockhPhh+0x4c>)
   b42a2:	f002 ff17 	bl	b70d4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b42a6:	f003 f96f 	bl	b7588 <_Z16_fetch_usbserialv>
   b42aa:	7829      	ldrb	r1, [r5, #0]
   b42ac:	4604      	mov	r4, r0
   b42ae:	4805      	ldr	r0, [pc, #20]	; (b42c4 <_Z17readDataFromBlockhPhh+0x44>)
   b42b0:	f001 fe74 	bl	b5f9c <_ZN7MFRC52217GetStatusCodeNameEh>
   b42b4:	4601      	mov	r1, r0
   b42b6:	4620      	mov	r0, r4
   b42b8:	f002 ff1f 	bl	b70fa <_ZN5Print7printlnEPKc>
   b42bc:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b42be:	b003      	add	sp, #12
   b42c0:	bd30      	pop	{r4, r5, pc}
   b42c2:	bf00      	nop
   b42c4:	2003e6ab 	.word	0x2003e6ab
   b42c8:	2003e6c3 	.word	0x2003e6c3
   b42cc:	000b7cd7 	.word	0x000b7cd7

000b42d0 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b42d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42d2:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b42d4:	4d1e      	ldr	r5, [pc, #120]	; (b4350 <_Z8getTagIDPi+0x80>)
   b42d6:	4a1f      	ldr	r2, [pc, #124]	; (b4354 <_Z8getTagIDPi+0x84>)
   b42d8:	9500      	str	r5, [sp, #0]
   b42da:	4b1f      	ldr	r3, [pc, #124]	; (b4358 <_Z8getTagIDPi+0x88>)
   b42dc:	7812      	ldrb	r2, [r2, #0]
   b42de:	4f1f      	ldr	r7, [pc, #124]	; (b435c <_Z8getTagIDPi+0x8c>)
{
   b42e0:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b42e2:	2160      	movs	r1, #96	; 0x60
   b42e4:	4628      	mov	r0, r5
   b42e6:	f002 f90a 	bl	b64fe <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b42ea:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b42ec:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b42ee:	d00f      	beq.n	b4310 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b42f0:	f003 f94a 	bl	b7588 <_Z16_fetch_usbserialv>
   b42f4:	491a      	ldr	r1, [pc, #104]	; (b4360 <_Z8getTagIDPi+0x90>)
   b42f6:	f002 feed 	bl	b70d4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b42fa:	f003 f945 	bl	b7588 <_Z16_fetch_usbserialv>
   b42fe:	7839      	ldrb	r1, [r7, #0]
   b4300:	4604      	mov	r4, r0
   b4302:	4628      	mov	r0, r5
   b4304:	f001 fe4a 	bl	b5f9c <_ZN7MFRC52217GetStatusCodeNameEh>
   b4308:	4601      	mov	r1, r0
   b430a:	4620      	mov	r0, r4
   b430c:	f002 fef5 	bl	b70fa <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b4310:	4b14      	ldr	r3, [pc, #80]	; (b4364 <_Z8getTagIDPi+0x94>)
   b4312:	2212      	movs	r2, #18
   b4314:	7818      	ldrb	r0, [r3, #0]
   b4316:	a907      	add	r1, sp, #28
   b4318:	f7ff ffb2 	bl	b4280 <_Z17readDataFromBlockhPhh>
   b431c:	b1b0      	cbz	r0, b434c <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b431e:	ac07      	add	r4, sp, #28
   b4320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4322:	ad03      	add	r5, sp, #12
   b4324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4326:	6823      	ldr	r3, [r4, #0]
   b4328:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b432a:	f003 f92d 	bl	b7588 <_Z16_fetch_usbserialv>
   b432e:	490e      	ldr	r1, [pc, #56]	; (b4368 <_Z8getTagIDPi+0x98>)
   b4330:	aa03      	add	r2, sp, #12
   b4332:	f7ff fed3 	bl	b40dc <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b4336:	490d      	ldr	r1, [pc, #52]	; (b436c <_Z8getTagIDPi+0x9c>)
   b4338:	4632      	mov	r2, r6
   b433a:	a803      	add	r0, sp, #12
   b433c:	f7ff ff88 	bl	b4250 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b4340:	4803      	ldr	r0, [pc, #12]	; (b4350 <_Z8getTagIDPi+0x80>)
   b4342:	f002 f896 	bl	b6472 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b4346:	4802      	ldr	r0, [pc, #8]	; (b4350 <_Z8getTagIDPi+0x80>)
   b4348:	f001 fef3 	bl	b6132 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b434c:	b00d      	add	sp, #52	; 0x34
   b434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4350:	2003e6ab 	.word	0x2003e6ab
   b4354:	2003e56c 	.word	0x2003e56c
   b4358:	2003e6a5 	.word	0x2003e6a5
   b435c:	2003e6c3 	.word	0x2003e6c3
   b4360:	000b7cee 	.word	0x000b7cee
   b4364:	2003e52c 	.word	0x2003e52c
   b4368:	000b7d0a 	.word	0x000b7d0a
   b436c:	2003e538 	.word	0x2003e538

000b4370 <_Z13asignarPuertoi>:
{
   return id == 0;
}

int asignarPuerto(int id)
{
   b4370:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
   b4372:	b940      	cbnz	r0, b4386 <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b4374:	4b26      	ldr	r3, [pc, #152]	; (b4410 <_Z13asignarPuertoi+0xa0>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b4376:	681c      	ldr	r4, [r3, #0]
   }

   switch (option)
   b4378:	2c05      	cmp	r4, #5
   b437a:	d840      	bhi.n	b43fe <_Z13asignarPuertoi+0x8e>
   b437c:	e8df f004 	tbb	[pc, r4]
   b4380:	261a0f05 	.word	0x261a0f05
   b4384:	342d      	.short	0x342d
      option = puertoDigital;
   b4386:	4b23      	ldr	r3, [pc, #140]	; (b4414 <_Z13asignarPuertoi+0xa4>)
   b4388:	e7f5      	b.n	b4376 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b438a:	f003 f8fd 	bl	b7588 <_Z16_fetch_usbserialv>
   b438e:	4922      	ldr	r1, [pc, #136]	; (b4418 <_Z13asignarPuertoi+0xa8>)
   b4390:	f002 fea0 	bl	b70d4 <_ZN5Print5printEPKc>

      puertoAnalogico++;
   b4394:	4a1e      	ldr	r2, [pc, #120]	; (b4410 <_Z13asignarPuertoi+0xa0>)
      break;

   case 4:
      Serial.print("Conectar al puerto D4\n");

      puertoDigital++;
   b4396:	6813      	ldr	r3, [r2, #0]
   b4398:	3301      	adds	r3, #1
   b439a:	6013      	str	r3, [r2, #0]
      // Disp[0].pin = D4;
      // Disp[0].pin2 = D5;
      // statements executed if the expression equals the p_D4
      // value of this constant_expression               p_D5
      return 4;
   b439c:	e014      	b.n	b43c8 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b439e:	f003 f8f3 	bl	b7588 <_Z16_fetch_usbserialv>
   b43a2:	491e      	ldr	r1, [pc, #120]	; (b441c <_Z13asignarPuertoi+0xac>)
   b43a4:	f002 fe96 	bl	b70d4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b43a8:	4a19      	ldr	r2, [pc, #100]	; (b4410 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b43aa:	6813      	ldr	r3, [r2, #0]
   b43ac:	3301      	adds	r3, #1
   b43ae:	6013      	str	r3, [r2, #0]
      return 2;
   b43b0:	2402      	movs	r4, #2
   b43b2:	e009      	b.n	b43c8 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b43b4:	f003 f8e8 	bl	b7588 <_Z16_fetch_usbserialv>
   b43b8:	4919      	ldr	r1, [pc, #100]	; (b4420 <_Z13asignarPuertoi+0xb0>)
   b43ba:	f002 fe8b 	bl	b70d4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b43be:	4b14      	ldr	r3, [pc, #80]	; (b4410 <_Z13asignarPuertoi+0xa0>)
   b43c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b43c4:	601a      	str	r2, [r3, #0]
      return 4;
   b43c6:	2404      	movs	r4, #4
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
   b43c8:	4620      	mov	r0, r4
   b43ca:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b43cc:	f003 f8dc 	bl	b7588 <_Z16_fetch_usbserialv>
   b43d0:	4914      	ldr	r1, [pc, #80]	; (b4424 <_Z13asignarPuertoi+0xb4>)
   b43d2:	f002 fe7f 	bl	b70d4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b43d6:	4a0f      	ldr	r2, [pc, #60]	; (b4414 <_Z13asignarPuertoi+0xa4>)
   b43d8:	e7e7      	b.n	b43aa <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b43da:	f003 f8d5 	bl	b7588 <_Z16_fetch_usbserialv>
   b43de:	4912      	ldr	r1, [pc, #72]	; (b4428 <_Z13asignarPuertoi+0xb8>)
   b43e0:	f002 fe78 	bl	b70d4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b43e4:	4a0b      	ldr	r2, [pc, #44]	; (b4414 <_Z13asignarPuertoi+0xa4>)
   b43e6:	e7d6      	b.n	b4396 <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b43e8:	f003 f8ce 	bl	b7588 <_Z16_fetch_usbserialv>
   b43ec:	490f      	ldr	r1, [pc, #60]	; (b442c <_Z13asignarPuertoi+0xbc>)
   b43ee:	f002 fe71 	bl	b70d4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b43f2:	4b08      	ldr	r3, [pc, #32]	; (b4414 <_Z13asignarPuertoi+0xa4>)
   b43f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b43f8:	601a      	str	r2, [r3, #0]
      return 6;
   b43fa:	2406      	movs	r4, #6
   b43fc:	e7e4      	b.n	b43c8 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b43fe:	f003 f8c3 	bl	b7588 <_Z16_fetch_usbserialv>
   b4402:	490b      	ldr	r1, [pc, #44]	; (b4430 <_Z13asignarPuertoi+0xc0>)
   b4404:	f002 fe66 	bl	b70d4 <_ZN5Print5printEPKc>
      return -1;
   b4408:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b440c:	e7dc      	b.n	b43c8 <_Z13asignarPuertoi+0x58>
   b440e:	bf00      	nop
   b4410:	2003e6bc 	.word	0x2003e6bc
   b4414:	2003e548 	.word	0x2003e548
   b4418:	000b7d16 	.word	0x000b7d16
   b441c:	000b7d2d 	.word	0x000b7d2d
   b4420:	000b7d44 	.word	0x000b7d44
   b4424:	000b7d5b 	.word	0x000b7d5b
   b4428:	000b7d72 	.word	0x000b7d72
   b442c:	000b7d89 	.word	0x000b7d89
   b4430:	000b7da0 	.word	0x000b7da0

000b4434 <_Z11numSensoresPb>:
   int contador = 0;
   int j = 0;

   for (j; j < 2; j++)
   {
      if (array[j])
   b4434:	7842      	ldrb	r2, [r0, #1]
   int contador = 0;
   b4436:	7803      	ldrb	r3, [r0, #0]
      if (array[j])
   b4438:	b102      	cbz	r2, b443c <_Z11numSensoresPb+0x8>
         contador++;
   b443a:	3301      	adds	r3, #1
   }

   return contador;
}
   b443c:	4618      	mov	r0, r3
   b443e:	4770      	bx	lr

000b4440 <_Z17incrementarSensorPb>:
// El numero de sensores representar la cantidad de elementos a true del vector.
// Al tratarse de un vector booleano, incrementar la cantidad supone poner a true el siguiente false.
void incrementarSensor(bool array[])
{
   int i = 0;
   while (array[i])
   b4440:	4603      	mov	r3, r0
   b4442:	3001      	adds	r0, #1
   b4444:	781a      	ldrb	r2, [r3, #0]
   b4446:	2a00      	cmp	r2, #0
   b4448:	d1fa      	bne.n	b4440 <_Z17incrementarSensorPb>
      i++;

   array[i] = true;
   b444a:	2201      	movs	r2, #1
   b444c:	701a      	strb	r2, [r3, #0]
}
   b444e:	4770      	bx	lr

000b4450 <_Z9ledApagar12ChainableLED>:

// This #include statement was automatically added by the Particle IDE.
#include <Grove_ChainableLED.h>

void ledApagar(ChainableLED leds)
{
   b4450:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 0, 0);
   b4452:	2300      	movs	r3, #0
   b4454:	9300      	str	r3, [sp, #0]
   b4456:	461a      	mov	r2, r3
   b4458:	4619      	mov	r1, r3
   b445a:	f001 fd25 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b445e:	b003      	add	sp, #12
   b4460:	f85d fb04 	ldr.w	pc, [sp], #4

000b4464 <_Z7ledRojo12ChainableLED>:
void ledRojo(ChainableLED leds)
{
   b4464:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 0, 0);
   b4466:	2300      	movs	r3, #0
   b4468:	9300      	str	r3, [sp, #0]
   b446a:	22ff      	movs	r2, #255	; 0xff
   b446c:	4619      	mov	r1, r3
   b446e:	f001 fd1b 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4472:	b003      	add	sp, #12
   b4474:	f85d fb04 	ldr.w	pc, [sp], #4

000b4478 <_Z8ledVerde12ChainableLED>:
void ledVerde(ChainableLED leds)
{
   b4478:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 255, 10);
   b447a:	230a      	movs	r3, #10
   b447c:	2200      	movs	r2, #0
   b447e:	9300      	str	r3, [sp, #0]
   b4480:	4611      	mov	r1, r2
   b4482:	23ff      	movs	r3, #255	; 0xff
   b4484:	f001 fd10 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4488:	b003      	add	sp, #12
   b448a:	f85d fb04 	ldr.w	pc, [sp], #4

000b448e <_Z7ledAzul12ChainableLED>:
void ledAzul(ChainableLED leds)
{
   b448e:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 0, 255);
   b4490:	23ff      	movs	r3, #255	; 0xff
   b4492:	9300      	str	r3, [sp, #0]
   b4494:	2300      	movs	r3, #0
   b4496:	461a      	mov	r2, r3
   b4498:	4619      	mov	r1, r3
   b449a:	f001 fd05 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b449e:	b003      	add	sp, #12
   b44a0:	f85d fb04 	ldr.w	pc, [sp], #4

000b44a4 <_Z11ledAmarillo12ChainableLED>:
void ledAmarillo(ChainableLED leds)
{
   b44a4:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 233, 0);
   b44a6:	2100      	movs	r1, #0
   b44a8:	9100      	str	r1, [sp, #0]
   b44aa:	23e9      	movs	r3, #233	; 0xe9
   b44ac:	22ff      	movs	r2, #255	; 0xff
   b44ae:	f001 fcfb 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44b2:	b003      	add	sp, #12
   b44b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b44b8 <_Z9ledMorado12ChainableLED>:
void ledMorado(ChainableLED leds)
{
   b44b8:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 108, 70, 117);
   b44ba:	2375      	movs	r3, #117	; 0x75
   b44bc:	9300      	str	r3, [sp, #0]
   b44be:	226c      	movs	r2, #108	; 0x6c
   b44c0:	2346      	movs	r3, #70	; 0x46
   b44c2:	2100      	movs	r1, #0
   b44c4:	f001 fcf0 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44c8:	b003      	add	sp, #12
   b44ca:	f85d fb04 	ldr.w	pc, [sp], #4

000b44ce <_Z10ledNaranja12ChainableLED>:
void ledNaranja(ChainableLED leds)
{
   b44ce:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 128, 0);
   b44d0:	2100      	movs	r1, #0
   b44d2:	9100      	str	r1, [sp, #0]
   b44d4:	2380      	movs	r3, #128	; 0x80
   b44d6:	22ff      	movs	r2, #255	; 0xff
   b44d8:	f001 fce6 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b44dc:	b003      	add	sp, #12
   b44de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b44e4 <_Z9ledBlanco12ChainableLED>:
void ledBlanco(ChainableLED leds)
{
   b44e4:	b513      	push	{r0, r1, r4, lr}
   b44e6:	4604      	mov	r4, r0
    Serial.println("Entra ledBlanco");
   b44e8:	f003 f84e 	bl	b7588 <_Z16_fetch_usbserialv>
   b44ec:	4908      	ldr	r1, [pc, #32]	; (b4510 <_Z9ledBlanco12ChainableLED+0x2c>)
   b44ee:	f002 fe04 	bl	b70fa <_ZN5Print7printlnEPKc>
    leds.setColorRGB(0, 255, 255, 255);
   b44f2:	23ff      	movs	r3, #255	; 0xff
   b44f4:	9300      	str	r3, [sp, #0]
   b44f6:	461a      	mov	r2, r3
   b44f8:	2100      	movs	r1, #0
   b44fa:	4620      	mov	r0, r4
   b44fc:	f001 fcd4 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
    Serial.println("Termina ledBlanco");
   b4500:	f003 f842 	bl	b7588 <_Z16_fetch_usbserialv>
   b4504:	4903      	ldr	r1, [pc, #12]	; (b4514 <_Z9ledBlanco12ChainableLED+0x30>)
}
   b4506:	b002      	add	sp, #8
   b4508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Termina ledBlanco");
   b450c:	f002 bdf5 	b.w	b70fa <_ZN5Print7printlnEPKc>
   b4510:	000b7dc8 	.word	0x000b7dc8
   b4514:	000b7dd8 	.word	0x000b7dd8

000b4518 <_Z14ledAzulNaranjab12ChainableLED>:

void ledAzulNaranja(boolean estado, ChainableLED leds)
{
   b4518:	b513      	push	{r0, r1, r4, lr}
   b451a:	466c      	mov	r4, sp
    if (estado)
   b451c:	b150      	cbz	r0, b4534 <_Z14ledAzulNaranjab12ChainableLED+0x1c>
    {
        ledAzul(leds);
   b451e:	c903      	ldmia	r1, {r0, r1}
   b4520:	e884 0003 	stmia.w	r4, {r0, r1}
   b4524:	4620      	mov	r0, r4
   b4526:	f7ff ffb2 	bl	b448e <_Z7ledAzul12ChainableLED>
    }
    else
    {
        ledNaranja(leds);
   b452a:	4620      	mov	r0, r4
   b452c:	f001 fc5f 	bl	b5dee <_ZN12ChainableLEDD1Ev>
    }
}
   b4530:	b002      	add	sp, #8
   b4532:	bd10      	pop	{r4, pc}
        ledNaranja(leds);
   b4534:	c903      	ldmia	r1, {r0, r1}
   b4536:	e884 0003 	stmia.w	r4, {r0, r1}
   b453a:	4620      	mov	r0, r4
   b453c:	f7ff ffc7 	bl	b44ce <_Z10ledNaranja12ChainableLED>
   b4540:	e7f3      	b.n	b452a <_Z14ledAzulNaranjab12ChainableLED+0x12>

000b4542 <_Z17ledMoradoAmarillob12ChainableLED>:

void ledMoradoAmarillo(boolean estado, ChainableLED leds)
{
   b4542:	b513      	push	{r0, r1, r4, lr}
   b4544:	466c      	mov	r4, sp
    if (estado)
   b4546:	b150      	cbz	r0, b455e <_Z17ledMoradoAmarillob12ChainableLED+0x1c>
    {
        ledMorado(leds);
   b4548:	c903      	ldmia	r1, {r0, r1}
   b454a:	e884 0003 	stmia.w	r4, {r0, r1}
   b454e:	4620      	mov	r0, r4
   b4550:	f7ff ffb2 	bl	b44b8 <_Z9ledMorado12ChainableLED>
    }
    else
    {
        ledAmarillo(leds);
   b4554:	4620      	mov	r0, r4
   b4556:	f001 fc4a 	bl	b5dee <_ZN12ChainableLEDD1Ev>
    }
}
   b455a:	b002      	add	sp, #8
   b455c:	bd10      	pop	{r4, pc}
        ledAmarillo(leds);
   b455e:	c903      	ldmia	r1, {r0, r1}
   b4560:	e884 0003 	stmia.w	r4, {r0, r1}
   b4564:	4620      	mov	r0, r4
   b4566:	f7ff ff9d 	bl	b44a4 <_Z11ledAmarillo12ChainableLED>
   b456a:	e7f3      	b.n	b4554 <_Z17ledMoradoAmarillob12ChainableLED+0x12>

000b456c <_Z12ledVerdeRojob12ChainableLED>:

void ledVerdeRojo(boolean estado, ChainableLED leds)
{
   b456c:	b513      	push	{r0, r1, r4, lr}
   b456e:	466c      	mov	r4, sp
    if (estado)
   b4570:	b150      	cbz	r0, b4588 <_Z12ledVerdeRojob12ChainableLED+0x1c>
    {
        ledRojo(leds);
   b4572:	c903      	ldmia	r1, {r0, r1}
   b4574:	e884 0003 	stmia.w	r4, {r0, r1}
   b4578:	4620      	mov	r0, r4
   b457a:	f7ff ff73 	bl	b4464 <_Z7ledRojo12ChainableLED>
    }
    else
    {
        ledVerde(leds);
   b457e:	4620      	mov	r0, r4
   b4580:	f001 fc35 	bl	b5dee <_ZN12ChainableLEDD1Ev>
    }
}
   b4584:	b002      	add	sp, #8
   b4586:	bd10      	pop	{r4, pc}
        ledVerde(leds);
   b4588:	c903      	ldmia	r1, {r0, r1}
   b458a:	e884 0003 	stmia.w	r4, {r0, r1}
   b458e:	4620      	mov	r0, r4
   b4590:	f7ff ff72 	bl	b4478 <_Z8ledVerde12ChainableLED>
   b4594:	e7f3      	b.n	b457e <_Z12ledVerdeRojob12ChainableLED+0x12>

000b4596 <_Z8ledBlinkb12ChainableLED>:

void ledBlink(boolean estado, ChainableLED leds)
{
   b4596:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4598:	460d      	mov	r5, r1
   b459a:	466c      	mov	r4, sp
    if (estado)
   b459c:	b1e8      	cbz	r0, b45da <_Z8ledBlinkb12ChainableLED+0x44>
    {
        ledBlanco(leds);
   b459e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b45a2:	e884 0003 	stmia.w	r4, {r0, r1}
   b45a6:	4620      	mov	r0, r4
   b45a8:	f7ff ff9c 	bl	b44e4 <_Z9ledBlanco12ChainableLED>
   b45ac:	4620      	mov	r0, r4
   b45ae:	f001 fc1e 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(400);
   b45b2:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b45b6:	f002 fb79 	bl	b6cac <delay>
        ledApagar(leds);
   b45ba:	e895 0003 	ldmia.w	r5, {r0, r1}
   b45be:	e884 0003 	stmia.w	r4, {r0, r1}
   b45c2:	4620      	mov	r0, r4
   b45c4:	f7ff ff44 	bl	b4450 <_Z9ledApagar12ChainableLED>
   b45c8:	4620      	mov	r0, r4
   b45ca:	f001 fc10 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b45ce:	20c8      	movs	r0, #200	; 0xc8
    }
    else
    {
        ledApagar(leds);
    }
}
   b45d0:	b003      	add	sp, #12
   b45d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        delay(200);
   b45d6:	f002 bb69 	b.w	b6cac <delay>
        ledApagar(leds);
   b45da:	e9d1 0100 	ldrd	r0, r1, [r1]
   b45de:	e884 0003 	stmia.w	r4, {r0, r1}
   b45e2:	4620      	mov	r0, r4
   b45e4:	f7ff ff34 	bl	b4450 <_Z9ledApagar12ChainableLED>
   b45e8:	4620      	mov	r0, r4
   b45ea:	f001 fc00 	bl	b5dee <_ZN12ChainableLEDD1Ev>
}
   b45ee:	b003      	add	sp, #12
   b45f0:	bd30      	pop	{r4, r5, pc}

000b45f2 <_Z8ledOnOffb12ChainableLED>:

void ledOnOff(boolean estado, ChainableLED leds)
{
   b45f2:	b513      	push	{r0, r1, r4, lr}
   b45f4:	466c      	mov	r4, sp
    if (estado)
   b45f6:	b150      	cbz	r0, b460e <_Z8ledOnOffb12ChainableLED+0x1c>
    {
        ledBlanco(leds);
   b45f8:	c903      	ldmia	r1, {r0, r1}
   b45fa:	e884 0003 	stmia.w	r4, {r0, r1}
   b45fe:	4620      	mov	r0, r4
   b4600:	f7ff ff70 	bl	b44e4 <_Z9ledBlanco12ChainableLED>
    }
    else
    {
        ledApagar(leds);
   b4604:	4620      	mov	r0, r4
   b4606:	f001 fbf2 	bl	b5dee <_ZN12ChainableLEDD1Ev>
    }
}
   b460a:	b002      	add	sp, #8
   b460c:	bd10      	pop	{r4, pc}
        ledApagar(leds);
   b460e:	c903      	ldmia	r1, {r0, r1}
   b4610:	e884 0003 	stmia.w	r4, {r0, r1}
   b4614:	4620      	mov	r0, r4
   b4616:	f7ff ff1b 	bl	b4450 <_Z9ledApagar12ChainableLED>
   b461a:	e7f3      	b.n	b4604 <_Z8ledOnOffb12ChainableLED+0x12>

000b461c <_Z11ledArcoirisb12ChainableLED>:

void ledArcoiris(boolean estado, ChainableLED leds)
{
   b461c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b461e:	460d      	mov	r5, r1
   b4620:	466c      	mov	r4, sp
    if (estado)
   b4622:	2800      	cmp	r0, #0
   b4624:	d050      	beq.n	b46c8 <_Z11ledArcoirisb12ChainableLED+0xac>
    {
        ledRojo(leds);
   b4626:	e9d1 0100 	ldrd	r0, r1, [r1]
   b462a:	e884 0003 	stmia.w	r4, {r0, r1}
   b462e:	4620      	mov	r0, r4
   b4630:	f7ff ff18 	bl	b4464 <_Z7ledRojo12ChainableLED>
   b4634:	4620      	mov	r0, r4
   b4636:	f001 fbda 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b463a:	20c8      	movs	r0, #200	; 0xc8
   b463c:	f002 fb36 	bl	b6cac <delay>
        ledNaranja(leds);
   b4640:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4644:	e884 0003 	stmia.w	r4, {r0, r1}
   b4648:	4620      	mov	r0, r4
   b464a:	f7ff ff40 	bl	b44ce <_Z10ledNaranja12ChainableLED>
   b464e:	4620      	mov	r0, r4
   b4650:	f001 fbcd 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b4654:	20c8      	movs	r0, #200	; 0xc8
   b4656:	f002 fb29 	bl	b6cac <delay>
        ledAmarillo(leds);
   b465a:	e895 0003 	ldmia.w	r5, {r0, r1}
   b465e:	e884 0003 	stmia.w	r4, {r0, r1}
   b4662:	4620      	mov	r0, r4
   b4664:	f7ff ff1e 	bl	b44a4 <_Z11ledAmarillo12ChainableLED>
   b4668:	4620      	mov	r0, r4
   b466a:	f001 fbc0 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b466e:	20c8      	movs	r0, #200	; 0xc8
   b4670:	f002 fb1c 	bl	b6cac <delay>
        ledVerde(leds);
   b4674:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4678:	e884 0003 	stmia.w	r4, {r0, r1}
   b467c:	4620      	mov	r0, r4
   b467e:	f7ff fefb 	bl	b4478 <_Z8ledVerde12ChainableLED>
   b4682:	4620      	mov	r0, r4
   b4684:	f001 fbb3 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b4688:	20c8      	movs	r0, #200	; 0xc8
   b468a:	f002 fb0f 	bl	b6cac <delay>
        ledMorado(leds);
   b468e:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4692:	e884 0003 	stmia.w	r4, {r0, r1}
   b4696:	4620      	mov	r0, r4
   b4698:	f7ff ff0e 	bl	b44b8 <_Z9ledMorado12ChainableLED>
   b469c:	4620      	mov	r0, r4
   b469e:	f001 fba6 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b46a2:	20c8      	movs	r0, #200	; 0xc8
   b46a4:	f002 fb02 	bl	b6cac <delay>
        ledAzul(leds);
   b46a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b46ac:	e884 0003 	stmia.w	r4, {r0, r1}
   b46b0:	4620      	mov	r0, r4
   b46b2:	f7ff feec 	bl	b448e <_Z7ledAzul12ChainableLED>
   b46b6:	4620      	mov	r0, r4
   b46b8:	f001 fb99 	bl	b5dee <_ZN12ChainableLEDD1Ev>
        delay(200);
   b46bc:	20c8      	movs	r0, #200	; 0xc8
    }
    else
    {
        ledApagar(leds);
    }
}
   b46be:	b003      	add	sp, #12
   b46c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        delay(200);
   b46c4:	f002 baf2 	b.w	b6cac <delay>
        ledApagar(leds);
   b46c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b46cc:	e884 0003 	stmia.w	r4, {r0, r1}
   b46d0:	4620      	mov	r0, r4
   b46d2:	f7ff febd 	bl	b4450 <_Z9ledApagar12ChainableLED>
   b46d6:	4620      	mov	r0, r4
   b46d8:	f001 fb89 	bl	b5dee <_ZN12ChainableLEDD1Ev>
}
   b46dc:	b003      	add	sp, #12
   b46de:	bd30      	pop	{r4, r5, pc}

000b46e0 <_Z8pitidoONi>:

// Acciones del zumbador
void pitidoON(int puerto)
{
   b46e0:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b46e2:	b284      	uxth	r4, r0
   b46e4:	4620      	mov	r0, r4
   b46e6:	2101      	movs	r1, #1
   b46e8:	f003 f89d 	bl	b7826 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b46ec:	4620      	mov	r0, r4
   b46ee:	2101      	movs	r1, #1
   b46f0:	f003 f899 	bl	b7826 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b46f4:	1c60      	adds	r0, r4, #1
   b46f6:	b280      	uxth	r0, r0
   b46f8:	2101      	movs	r1, #1
   b46fa:	9001      	str	r0, [sp, #4]
   b46fc:	f003 f893 	bl	b7826 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4700:	9801      	ldr	r0, [sp, #4]
   b4702:	2101      	movs	r1, #1
}
   b4704:	b002      	add	sp, #8
   b4706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b470a:	f003 b88c 	b.w	b7826 <digitalWrite>

000b470e <_Z9pitidoOFFi>:
void pitidoOFF(int puerto)
{
   b470e:	b513      	push	{r0, r1, r4, lr}
    // Serial.println("Zumbador OFF");
    digitalWrite(puerto, 0);
   b4710:	b284      	uxth	r4, r0
   b4712:	4620      	mov	r0, r4
   b4714:	2100      	movs	r1, #0
   b4716:	f003 f886 	bl	b7826 <digitalWrite>
    digitalWrite(puerto, LOW);
   b471a:	4620      	mov	r0, r4
   b471c:	2100      	movs	r1, #0
   b471e:	f003 f882 	bl	b7826 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4722:	1c60      	adds	r0, r4, #1
   b4724:	b280      	uxth	r0, r0
   b4726:	2100      	movs	r1, #0
   b4728:	9001      	str	r0, [sp, #4]
   b472a:	f003 f87c 	bl	b7826 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b472e:	9801      	ldr	r0, [sp, #4]
   b4730:	2100      	movs	r1, #0
}
   b4732:	b002      	add	sp, #8
   b4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b4738:	f003 b875 	b.w	b7826 <digitalWrite>

000b473c <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b473c:	b510      	push	{r4, lr}
   b473e:	4604      	mov	r4, r0
    pitidoON(puerto);
   b4740:	f7ff ffce 	bl	b46e0 <_Z8pitidoONi>
    delay(100);
   b4744:	2064      	movs	r0, #100	; 0x64
   b4746:	f002 fab1 	bl	b6cac <delay>
    pitidoOFF(puerto);
   b474a:	4620      	mov	r0, r4
   b474c:	f7ff ffdf 	bl	b470e <_Z9pitidoOFFi>
    delay(100);
}
   b4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4754:	2064      	movs	r0, #100	; 0x64
   b4756:	f002 baa9 	b.w	b6cac <delay>

000b475a <_Z13blinkAndSleepbi>:

void blinkAndSleep(boolean estado, int puerto)
{
   b475a:	4603      	mov	r3, r0
   b475c:	4608      	mov	r0, r1
    if (estado)
   b475e:	b10b      	cbz	r3, b4764 <_Z13blinkAndSleepbi+0xa>
    {
        pitidoBlink(puerto);
   b4760:	f7ff bfec 	b.w	b473c <_Z11pitidoBlinki>
    }
    else
    {
        pitidoOFF(puerto);
   b4764:	f7ff bfd3 	b.w	b470e <_Z9pitidoOFFi>

000b4768 <_Z8zumbadorbi>:
    }
}

void zumbador(boolean estado, int puerto)
{
   b4768:	4603      	mov	r3, r0
   b476a:	4608      	mov	r0, r1
    if (estado)
   b476c:	b10b      	cbz	r3, b4772 <_Z8zumbadorbi+0xa>
    {
        pitidoON(puerto);
   b476e:	f7ff bfb7 	b.w	b46e0 <_Z8pitidoONi>
    }
    else
    {
        pitidoOFF(puerto);
   b4772:	f7ff bfcc 	b.w	b470e <_Z9pitidoOFFi>
	...

000b4778 <_Z10activarLEDiib>:
    }
}

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto, bool valor)
{
   b4778:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b477c:	f101 0801 	add.w	r8, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4780:	466c      	mov	r4, sp
   b4782:	2305      	movs	r3, #5
{
   b4784:	460e      	mov	r6, r1
   b4786:	4607      	mov	r7, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4788:	b2c9      	uxtb	r1, r1
{
   b478a:	4615      	mov	r5, r2
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b478c:	4620      	mov	r0, r4
   b478e:	fa5f f288 	uxtb.w	r2, r8
   b4792:	f001 fb1f 	bl	b5dd4 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b4796:	4620      	mov	r0, r4
   b4798:	f001 fbce 	bl	b5f38 <_ZN12ChainableLED4initEv>
    Serial.printlnf("Activar RGB en puerto: %d & %d", puerto, puerto + 1);
   b479c:	f002 fef4 	bl	b7588 <_Z16_fetch_usbserialv>
   b47a0:	492f      	ldr	r1, [pc, #188]	; (b4860 <_Z10activarLEDiib+0xe8>)
   b47a2:	4643      	mov	r3, r8
   b47a4:	4632      	mov	r2, r6
   b47a6:	f7ff fc99 	bl	b40dc <_ZN5Print8printlnfEPKcz>

    switch (opcion)
   b47aa:	2f05      	cmp	r7, #5
   b47ac:	d852      	bhi.n	b4854 <_Z10activarLEDiib+0xdc>
   b47ae:	e8df f007 	tbb	[pc, r7]
   b47b2:	1a03      	.short	0x1a03
   b47b4:	42382e24 	.word	0x42382e24
    {
    case 0:
        ledVerdeRojo(valor, leds);
   b47b8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b47bc:	ae02      	add	r6, sp, #8
   b47be:	e886 0003 	stmia.w	r6, {r0, r1}
   b47c2:	4631      	mov	r1, r6
   b47c4:	4628      	mov	r0, r5
   b47c6:	f7ff fed1 	bl	b456c <_Z12ledVerdeRojob12ChainableLED>
        break;

    case 1:
        ledMoradoAmarillo(valor, leds);
   b47ca:	4630      	mov	r0, r6
   b47cc:	f001 fb0f 	bl	b5dee <_ZN12ChainableLEDD1Ev>
    default:
        Serial.println("Valor no valido");
        break;
    }

    Serial.println("Sale swith");
   b47d0:	f002 feda 	bl	b7588 <_Z16_fetch_usbserialv>
   b47d4:	4923      	ldr	r1, [pc, #140]	; (b4864 <_Z10activarLEDiib+0xec>)
   b47d6:	f002 fc90 	bl	b70fa <_ZN5Print7printlnEPKc>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b47da:	4620      	mov	r0, r4
   b47dc:	f001 fb07 	bl	b5dee <_ZN12ChainableLEDD1Ev>
}
   b47e0:	b004      	add	sp, #16
   b47e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ledMoradoAmarillo(valor, leds);
   b47e6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b47ea:	ae02      	add	r6, sp, #8
   b47ec:	e886 0003 	stmia.w	r6, {r0, r1}
   b47f0:	4631      	mov	r1, r6
   b47f2:	4628      	mov	r0, r5
   b47f4:	f7ff fea5 	bl	b4542 <_Z17ledMoradoAmarillob12ChainableLED>
   b47f8:	e7e7      	b.n	b47ca <_Z10activarLEDiib+0x52>
        ledAzulNaranja(valor, leds);
   b47fa:	e894 0003 	ldmia.w	r4, {r0, r1}
   b47fe:	ae02      	add	r6, sp, #8
   b4800:	e886 0003 	stmia.w	r6, {r0, r1}
   b4804:	4631      	mov	r1, r6
   b4806:	4628      	mov	r0, r5
   b4808:	f7ff fe86 	bl	b4518 <_Z14ledAzulNaranjab12ChainableLED>
   b480c:	e7dd      	b.n	b47ca <_Z10activarLEDiib+0x52>
        ledBlink(valor, leds);
   b480e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4812:	ae02      	add	r6, sp, #8
   b4814:	e886 0003 	stmia.w	r6, {r0, r1}
   b4818:	4631      	mov	r1, r6
   b481a:	4628      	mov	r0, r5
   b481c:	f7ff febb 	bl	b4596 <_Z8ledBlinkb12ChainableLED>
   b4820:	e7d3      	b.n	b47ca <_Z10activarLEDiib+0x52>
        ledArcoiris(valor, leds);
   b4822:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4826:	ae02      	add	r6, sp, #8
   b4828:	e886 0003 	stmia.w	r6, {r0, r1}
   b482c:	4631      	mov	r1, r6
   b482e:	4628      	mov	r0, r5
   b4830:	f7ff fef4 	bl	b461c <_Z11ledArcoirisb12ChainableLED>
   b4834:	e7c9      	b.n	b47ca <_Z10activarLEDiib+0x52>
        Serial.printlnf("Entra LED ONOF");
   b4836:	f002 fea7 	bl	b7588 <_Z16_fetch_usbserialv>
   b483a:	490b      	ldr	r1, [pc, #44]	; (b4868 <_Z10activarLEDiib+0xf0>)
   b483c:	f7ff fc4e 	bl	b40dc <_ZN5Print8printlnfEPKcz>
        ledOnOff(valor, leds);
   b4840:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4844:	ae02      	add	r6, sp, #8
   b4846:	e886 0003 	stmia.w	r6, {r0, r1}
   b484a:	4631      	mov	r1, r6
   b484c:	4628      	mov	r0, r5
   b484e:	f7ff fed0 	bl	b45f2 <_Z8ledOnOffb12ChainableLED>
   b4852:	e7ba      	b.n	b47ca <_Z10activarLEDiib+0x52>
        Serial.println("Valor no valido");
   b4854:	f002 fe98 	bl	b7588 <_Z16_fetch_usbserialv>
   b4858:	4904      	ldr	r1, [pc, #16]	; (b486c <_Z10activarLEDiib+0xf4>)
   b485a:	f002 fc4e 	bl	b70fa <_ZN5Print7printlnEPKc>
        break;
   b485e:	e7b7      	b.n	b47d0 <_Z10activarLEDiib+0x58>
   b4860:	000b7dea 	.word	0x000b7dea
   b4864:	000b7e28 	.word	0x000b7e28
   b4868:	000b7e09 	.word	0x000b7e09
   b486c:	000b7e18 	.word	0x000b7e18

000b4870 <_Z15activarZumbadoriib>:

void activarZumbador(int opcion, int puerto, bool valor)
{
   b4870:	b570      	push	{r4, r5, r6, lr}
   b4872:	460c      	mov	r4, r1
   b4874:	4606      	mov	r6, r0
    

    pinMode(puerto, OUTPUT);
   b4876:	2101      	movs	r1, #1
   b4878:	b2a0      	uxth	r0, r4
{
   b487a:	4615      	mov	r5, r2
    pinMode(puerto, OUTPUT);
   b487c:	f002 ffc2 	bl	b7804 <pinMode>

    switch (opcion)
   b4880:	b146      	cbz	r6, b4894 <_Z15activarZumbadoriib+0x24>
   b4882:	2e01      	cmp	r6, #1
   b4884:	d00c      	beq.n	b48a0 <_Z15activarZumbadoriib+0x30>
        break;
    case 1:
        blinkAndSleep(valor, puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b4886:	f002 fe7f 	bl	b7588 <_Z16_fetch_usbserialv>
        break;
    }
   b488a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.println("Valor no valido");
   b488e:	4907      	ldr	r1, [pc, #28]	; (b48ac <_Z15activarZumbadoriib+0x3c>)
   b4890:	f002 bc33 	b.w	b70fa <_ZN5Print7printlnEPKc>
        zumbador(valor, puerto);
   b4894:	4621      	mov	r1, r4
   b4896:	4628      	mov	r0, r5
   b4898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        zumbador(valor, puerto);
   b489c:	f7ff bf64 	b.w	b4768 <_Z8zumbadorbi>
        blinkAndSleep(valor, puerto);
   b48a0:	4621      	mov	r1, r4
   b48a2:	4628      	mov	r0, r5
   b48a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        blinkAndSleep(valor, puerto);
   b48a8:	f7ff bf57 	b.w	b475a <_Z13blinkAndSleepbi>
   b48ac:	000b7e18 	.word	0x000b7e18

000b48b0 <_Z13leerSensorLuzi>:

boolean leerSensorLuz(int puerto)
{
   b48b0:	b510      	push	{r4, lr}
   b48b2:	4604      	mov	r4, r0
    Serial.printlnf("Leer Luz");
   b48b4:	f002 fe68 	bl	b7588 <_Z16_fetch_usbserialv>
   b48b8:	490b      	ldr	r1, [pc, #44]	; (b48e8 <_Z13leerSensorLuzi+0x38>)
   b48ba:	f7ff fc0f 	bl	b40dc <_ZN5Print8printlnfEPKcz>

    int threshold = 2500;
    switch (puerto)
   b48be:	2c02      	cmp	r4, #2
   b48c0:	d00c      	beq.n	b48dc <_Z13leerSensorLuzi+0x2c>
   b48c2:	2c04      	cmp	r4, #4
   b48c4:	d00c      	beq.n	b48e0 <_Z13leerSensorLuzi+0x30>
   b48c6:	b96c      	cbnz	r4, b48e4 <_Z13leerSensorLuzi+0x34>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b48c8:	2013      	movs	r0, #19
            return true;
        return false;

    case 2:
        if (analogRead(A2) >= threshold)
   b48ca:	f002 ffd8 	bl	b787e <analogRead>
   b48ce:	f640 13c3 	movw	r3, #2499	; 0x9c3
   b48d2:	4298      	cmp	r0, r3
   b48d4:	bfd4      	ite	le
   b48d6:	2000      	movle	r0, #0
   b48d8:	2001      	movgt	r0, #1
        return false;

    default:
        return false;
    }
}
   b48da:	bd10      	pop	{r4, pc}
        if (analogRead(A2) >= threshold)
   b48dc:	2011      	movs	r0, #17
   b48de:	e7f4      	b.n	b48ca <_Z13leerSensorLuzi+0x1a>
        if (analogRead(A4) >= threshold)
   b48e0:	200f      	movs	r0, #15
   b48e2:	e7f2      	b.n	b48ca <_Z13leerSensorLuzi+0x1a>
    switch (puerto)
   b48e4:	2000      	movs	r0, #0
   b48e6:	e7f8      	b.n	b48da <_Z13leerSensorLuzi+0x2a>
   b48e8:	000b7e33 	.word	0x000b7e33

000b48ec <_Z9leerBotoni>:

boolean leerBoton(int puerto)
{
   b48ec:	b510      	push	{r4, lr}
    pinMode(puerto, INPUT);
   b48ee:	b284      	uxth	r4, r0
   b48f0:	2100      	movs	r1, #0
   b48f2:	4620      	mov	r0, r4
   b48f4:	f002 ff86 	bl	b7804 <pinMode>
    Serial.println("Leer boton");
   b48f8:	f002 fe46 	bl	b7588 <_Z16_fetch_usbserialv>
   b48fc:	4904      	ldr	r1, [pc, #16]	; (b4910 <_Z9leerBotoni+0x24>)
   b48fe:	f002 fbfc 	bl	b70fa <_ZN5Print7printlnEPKc>
    if (digitalRead(puerto) == HIGH)
   b4902:	4620      	mov	r0, r4
   b4904:	f002 ffa8 	bl	b7858 <digitalRead>
        return true;
    return false;
}
   b4908:	1e43      	subs	r3, r0, #1
   b490a:	4258      	negs	r0, r3
   b490c:	4158      	adcs	r0, r3
   b490e:	bd10      	pop	{r4, pc}
   b4910:	000b7e3c 	.word	0x000b7e3c

000b4914 <_Z10leerAnguloi>:

boolean leerAngulo(int puerto)
{
   b4914:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b4916:	b280      	uxth	r0, r0
   b4918:	f002 ffb1 	bl	b787e <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b491c:	ee07 0a90 	vmov	s15, r0
   b4920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4924:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4928:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b492c:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4954 <_Z10leerAnguloi+0x40>
   b4930:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4934:	eddf 7a08 	vldr	s15, [pc, #32]	; b4958 <_Z10leerAnguloi+0x44>
   b4938:	ee67 7a27 	vmul.f32	s15, s14, s15
   b493c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 680)
   b4940:	eddf 7a06 	vldr	s15, [pc, #24]	; b495c <_Z10leerAnguloi+0x48>
   b4944:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        // Serial.println(degrees);
        return true;
    }

    return false;
}
   b494c:	bfac      	ite	ge
   b494e:	2001      	movge	r0, #1
   b4950:	2000      	movlt	r0, #0
   b4952:	bd08      	pop	{r3, pc}
   b4954:	447fc000 	.word	0x447fc000
   b4958:	43960000 	.word	0x43960000
   b495c:	442a0000 	.word	0x442a0000

000b4960 <_Z16leerSensorSonidoi>:

boolean leerSensorSonido(int puerto)
{
   b4960:	b508      	push	{r3, lr}
    // Serial.printlnf("analogico: %d", analogRead(A4));
    if (analogRead(puerto) >= 700)
   b4962:	b280      	uxth	r0, r0
   b4964:	f002 ff8b 	bl	b787e <analogRead>
        return true;
    return false;
}
   b4968:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b496c:	bfb4      	ite	lt
   b496e:	2000      	movlt	r0, #0
   b4970:	2001      	movge	r0, #1
   b4972:	bd08      	pop	{r3, pc}

000b4974 <_Z10leerSensoriii>:

boolean leerSensor(int id, int condicion, int puerto)
{
    switch (id)
   b4974:	3802      	subs	r0, #2
{
   b4976:	b510      	push	{r4, lr}
   b4978:	4614      	mov	r4, r2
   b497a:	2803      	cmp	r0, #3
   b497c:	d81b      	bhi.n	b49b6 <_Z10leerSensoriii+0x42>
   b497e:	e8df f000 	tbb	[pc, r0]
   b4982:	0702      	.short	0x0702
   b4984:	150c      	.short	0x150c
        // TODO No entra en el lector MIRAR IMPORTANTE
        Serial.println("InvalidSensorError");
        return false;
        break;
    }
   b4986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return leerSensorLuz(puerto);
   b498a:	4610      	mov	r0, r2
   b498c:	f7ff bf90 	b.w	b48b0 <_Z13leerSensorLuzi>
   b4990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return leerSensorSonido(puerto);
   b4994:	4610      	mov	r0, r2
   b4996:	f7ff bfe3 	b.w	b4960 <_Z16leerSensorSonidoi>
        pinMode(puerto, INPUT);
   b499a:	b290      	uxth	r0, r2
   b499c:	2100      	movs	r1, #0
   b499e:	f002 ff31 	bl	b7804 <pinMode>
        return leerBoton(puerto);
   b49a2:	4620      	mov	r0, r4
   b49a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return leerBoton(puerto);
   b49a8:	f7ff bfa0 	b.w	b48ec <_Z9leerBotoni>
   b49ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return leerAngulo(puerto);
   b49b0:	4610      	mov	r0, r2
   b49b2:	f7ff bfaf 	b.w	b4914 <_Z10leerAnguloi>
        Serial.println("InvalidSensorError");
   b49b6:	f002 fde7 	bl	b7588 <_Z16_fetch_usbserialv>
   b49ba:	4902      	ldr	r1, [pc, #8]	; (b49c4 <_Z10leerSensoriii+0x50>)
   b49bc:	f002 fb9d 	bl	b70fa <_ZN5Print7printlnEPKc>
   b49c0:	2000      	movs	r0, #0
   b49c2:	bd10      	pop	{r4, pc}
   b49c4:	000b7e47 	.word	0x000b7e47

000b49c8 <setup>:
// Puerto asignado al sensor.
int puertosSensores[2] = {-1, -1};

int puertoActuador = -1;

int tagInfo[6] = {-1, -1, -1, -1, -1, -1};
   b49c8:	b510      	push	{r4, lr}
   b49ca:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b49cc:	2400      	movs	r4, #0

void setup()
   b49ce:	a805      	add	r0, sp, #20
   b49d0:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b49d4:	f8ad 401c 	strh.w	r4, [sp, #28]
   b49d8:	f002 f974 	bl	b6cc4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b49dc:	481b      	ldr	r0, [pc, #108]	; (b4a4c <setup+0x84>)
   b49de:	4623      	mov	r3, r4
   b49e0:	4622      	mov	r2, r4
   b49e2:	4621      	mov	r1, r4
   b49e4:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b49e6:	4c1a      	ldr	r4, [pc, #104]	; (b4a50 <setup+0x88>)
   b49e8:	f002 f8e8 	bl	b6bbc <network_off>
{
  // Unconnected mode ON
  Particle.disconnect();
  WiFi.off();
   b49ec:	f002 fdcc 	bl	b7588 <_Z16_fetch_usbserialv>
   b49f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b49f4:	f002 fdbc 	bl	b7570 <_ZN9USBSerial5beginEl>
   b49f8:	7821      	ldrb	r1, [r4, #0]
   b49fa:	f3bf 8f5b 	dmb	ish
   b49fe:	f011 0101 	ands.w	r1, r1, #1
   b4a02:	d10b      	bne.n	b4a1c <setup+0x54>
   b4a04:	4620      	mov	r0, r4
   b4a06:	9103      	str	r1, [sp, #12]
   b4a08:	f7ff fb52 	bl	b40b0 <__cxa_guard_acquire>
   b4a0c:	9903      	ldr	r1, [sp, #12]
   b4a0e:	b128      	cbz	r0, b4a1c <setup+0x54>
   b4a10:	4810      	ldr	r0, [pc, #64]	; (b4a54 <setup+0x8c>)
   b4a12:	f002 fbd7 	bl	b71c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4a16:	4620      	mov	r0, r4
   b4a18:	f7ff fb4f 	bl	b40ba <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4a1c:	480d      	ldr	r0, [pc, #52]	; (b4a54 <setup+0x8c>)
   b4a1e:	f002 fbdb 	bl	b71d8 <_ZN8SPIClass5beginEv>

  // Particle setup
  Serial.begin(9600);
  SPI.begin();
   b4a22:	2301      	movs	r3, #1
   b4a24:	9300      	str	r3, [sp, #0]
   b4a26:	223c      	movs	r2, #60	; 0x3c
   b4a28:	2102      	movs	r1, #2
   b4a2a:	480b      	ldr	r0, [pc, #44]	; (b4a58 <setup+0x90>)
   b4a2c:	f000 fec2 	bl	b57b4 <_ZN16Adafruit_SSD13065beginEhhbb>

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4a30:	480a      	ldr	r0, [pc, #40]	; (b4a5c <setup+0x94>)
   b4a32:	f001 fbe2 	bl	b61fa <_ZN7MFRC5228PCD_InitEv>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4a36:	4b0a      	ldr	r3, [pc, #40]	; (b4a60 <setup+0x98>)
   b4a38:	22ff      	movs	r2, #255	; 0xff
   b4a3a:	701a      	strb	r2, [r3, #0]
   b4a3c:	705a      	strb	r2, [r3, #1]
   b4a3e:	709a      	strb	r2, [r3, #2]
   b4a40:	70da      	strb	r2, [r3, #3]
   b4a42:	711a      	strb	r2, [r3, #4]
   b4a44:	715a      	strb	r2, [r3, #5]
  for (byte i = 0; i < 6; i++)
  {
   b4a46:	b008      	add	sp, #32
   b4a48:	bd10      	pop	{r4, pc}
   b4a4a:	bf00      	nop
   b4a4c:	2003e718 	.word	0x2003e718
   b4a50:	2003e5dc 	.word	0x2003e5dc
   b4a54:	2003e5e0 	.word	0x2003e5e0
   b4a58:	2003e634 	.word	0x2003e634
   b4a5c:	2003e6ab 	.word	0x2003e6ab
   b4a60:	2003e6a5 	.word	0x2003e6a5

000b4a64 <loop>:
    key.keyByte[i] = 0xFF;
  }
}
   b4a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void loop()
   b4a68:	4862      	ldr	r0, [pc, #392]	; (b4bf4 <loop+0x190>)
   b4a6a:	f001 fcf1 	bl	b6450 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4a6e:	b1a8      	cbz	r0, b4a9c <loop+0x38>
{
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b4a70:	4860      	ldr	r0, [pc, #384]	; (b4bf4 <loop+0x190>)
   b4a72:	f001 febe 	bl	b67f2 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4a76:	2800      	cmp	r0, #0
   b4a78:	f000 80b9 	beq.w	b4bee <loop+0x18a>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
    {
      // Not sure if restart loop or finish program.
      return;
   b4a7c:	4c5e      	ldr	r4, [pc, #376]	; (b4bf8 <loop+0x194>)
   b4a7e:	4620      	mov	r0, r4
   b4a80:	f000 fe8a 	bl	b5798 <_ZN16Adafruit_SSD130612clearDisplayEv>
    }
   b4a84:	4620      	mov	r0, r4
   b4a86:	2101      	movs	r1, #1
   b4a88:	f000 fce1 	bl	b544e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4a8c:	2000      	movs	r0, #0
   b4a8e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4a92:	e9c4 0304 	strd	r0, r3, [r4, #16]

    display.clearDisplay();
    display.setTextSize(1.5);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
   b4a96:	4859      	ldr	r0, [pc, #356]	; (b4bfc <loop+0x198>)
   b4a98:	f7ff fc1a 	bl	b42d0 <_Z8getTagIDPi>

    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
  }
   b4a9c:	4c57      	ldr	r4, [pc, #348]	; (b4bfc <loop+0x198>)
   b4a9e:	6823      	ldr	r3, [r4, #0]
   b4aa0:	3301      	adds	r3, #1
   b4aa2:	d061      	beq.n	b4b68 <loop+0x104>

  // Si se ha pasado nueva tag:
  if (tagInfo[0] != -1)
   b4aa4:	f002 fd70 	bl	b7588 <_Z16_fetch_usbserialv>
   b4aa8:	4a55      	ldr	r2, [pc, #340]	; (b4c00 <loop+0x19c>)
   b4aaa:	4b56      	ldr	r3, [pc, #344]	; (b4c04 <loop+0x1a0>)
   b4aac:	6821      	ldr	r1, [r4, #0]
   b4aae:	2900      	cmp	r1, #0
   b4ab0:	bf0c      	ite	eq
   b4ab2:	4611      	moveq	r1, r2
   b4ab4:	4619      	movne	r1, r3
   b4ab6:	f002 fb20 	bl	b70fa <_ZN5Print7printlnEPKc>
  {
   b4aba:	f002 fd65 	bl	b7588 <_Z16_fetch_usbserialv>
   b4abe:	4b52      	ldr	r3, [pc, #328]	; (b4c08 <loop+0x1a4>)
   b4ac0:	6861      	ldr	r1, [r4, #4]
   b4ac2:	4a52      	ldr	r2, [pc, #328]	; (b4c0c <loop+0x1a8>)
   b4ac4:	2900      	cmp	r1, #0
   b4ac6:	bf0c      	ite	eq
   b4ac8:	4611      	moveq	r1, r2
   b4aca:	4619      	movne	r1, r3
   b4acc:	f002 fb15 	bl	b70fa <_ZN5Print7printlnEPKc>
    // Ejemplo de informacion codificada.
    Serial.println(esSensor(tagInfo[0]) ? "Es Sensor" : "Es Actuador");
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4ad0:	6823      	ldr	r3, [r4, #0]

    // Si la tag es Sensor:
    if (esSensor(tagInfo[0]))
   b4ad2:	484f      	ldr	r0, [pc, #316]	; (b4c10 <loop+0x1ac>)
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4ad4:	2b00      	cmp	r3, #0
   b4ad6:	d177      	bne.n	b4bc8 <loop+0x164>
    if (esSensor(tagInfo[0]))
   b4ad8:	f7ff fcac 	bl	b4434 <_Z11numSensoresPb>
   b4adc:	2801      	cmp	r0, #1
   b4ade:	dc6d      	bgt.n	b4bbc <loop+0x158>
    {
      //  Si no tenemos 2 sensores.
      if (numSensores(sensoresArray) < 2)
   b4ae0:	6860      	ldr	r0, [r4, #4]
   b4ae2:	f7ff fc45 	bl	b4370 <_Z13asignarPuertoi>
      {
        // Añadimos el sensor a un puerto disponible.
        int puerto = asignarPuerto(tagInfo[1]);
   b4ae6:	1c41      	adds	r1, r0, #1
      if (numSensores(sensoresArray) < 2)
   b4ae8:	4606      	mov	r6, r0
        int puerto = asignarPuerto(tagInfo[1]);
   b4aea:	d03a      	beq.n	b4b62 <loop+0xfe>

        // Si el puerto es distinto de -1 el sensor ha sido asignado correctamente.
        if (puerto != -1)
        {
   b4aec:	4848      	ldr	r0, [pc, #288]	; (b4c10 <loop+0x1ac>)
          //  Actualizamos la cantidad de sensores en el sistema
          incrementarSensor(sensoresArray);
          Serial.printlnf("\nSensores conectados: %d", numSensores(sensoresArray));

          // Indice del sensor.
          int indice = numSensores(sensoresArray) - 1;
   b4aee:	4f49      	ldr	r7, [pc, #292]	; (b4c14 <loop+0x1b0>)

          // Guardamos el ID
          idSensor[indice] = tagInfo[2];
          Serial.printf("ID: %d ", idSensor[indice]);
   b4af0:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4c28 <loop+0x1c4>

          // Guardamos la condicion
          condicionSensor[indice] = tagInfo[3];
          Serial.printf("Condicion: %d ", condicionSensor[indice]);
   b4af4:	f8df 9140 	ldr.w	r9, [pc, #320]	; b4c38 <loop+0x1d4>
        {
   b4af8:	f7ff fca2 	bl	b4440 <_Z17incrementarSensorPb>
          // Serial.println("2");
   b4afc:	f002 fd44 	bl	b7588 <_Z16_fetch_usbserialv>
   b4b00:	4605      	mov	r5, r0
   b4b02:	4843      	ldr	r0, [pc, #268]	; (b4c10 <loop+0x1ac>)
   b4b04:	4944      	ldr	r1, [pc, #272]	; (b4c18 <loop+0x1b4>)
   b4b06:	f7ff fc95 	bl	b4434 <_Z11numSensoresPb>
   b4b0a:	4602      	mov	r2, r0
   b4b0c:	4628      	mov	r0, r5
   b4b0e:	f7ff fae5 	bl	b40dc <_ZN5Print8printlnfEPKcz>
          Serial.printlnf("\nSensores conectados: %d", numSensores(sensoresArray));
   b4b12:	483f      	ldr	r0, [pc, #252]	; (b4c10 <loop+0x1ac>)
   b4b14:	f7ff fc8e 	bl	b4434 <_Z11numSensoresPb>
   b4b18:	1e45      	subs	r5, r0, #1
          int indice = numSensores(sensoresArray) - 1;
   b4b1a:	68a3      	ldr	r3, [r4, #8]
   b4b1c:	f847 3025 	str.w	r3, [r7, r5, lsl #2]

   b4b20:	f002 fd32 	bl	b7588 <_Z16_fetch_usbserialv>
   b4b24:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4b28:	493c      	ldr	r1, [pc, #240]	; (b4c1c <loop+0x1b8>)
   b4b2a:	f7ff fac9 	bl	b40c0 <_ZN5Print6printfEPKcz>
          Serial.printf("ID: %d ", idSensor[indice]);
   b4b2e:	68e3      	ldr	r3, [r4, #12]
   b4b30:	f848 3025 	str.w	r3, [r8, r5, lsl #2]

   b4b34:	f002 fd28 	bl	b7588 <_Z16_fetch_usbserialv>
   b4b38:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
   b4b3c:	4938      	ldr	r1, [pc, #224]	; (b4c20 <loop+0x1bc>)
   b4b3e:	f7ff fabf 	bl	b40c0 <_ZN5Print6printfEPKcz>
          Serial.printf("Condicion: %d ", condicionSensor[indice]);
   b4b42:	f849 6025 	str.w	r6, [r9, r5, lsl #2]

   b4b46:	f002 fd1f 	bl	b7588 <_Z16_fetch_usbserialv>
   b4b4a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   b4b4e:	4935      	ldr	r1, [pc, #212]	; (b4c24 <loop+0x1c0>)
   b4b50:	f7ff fac4 	bl	b40dc <_ZN5Print8printlnfEPKcz>
          // Guardamos el puerto asignado del sensor.
          puertosSensores[indice] = puerto;
          Serial.printlnf("Puerto: %d", puertosSensores[indice]);
   b4b54:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
   b4b58:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   b4b5c:	2001      	movs	r0, #1
   b4b5e:	f7ff facb 	bl	b40f8 <_Z12displayPrintbii>
          puertoActuador = puerto;
        }
      }
      else
      {
        Serial.println("Error: necesario al menos un sensor");
   b4b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4b66:	6023      	str	r3, [r4, #0]
      }
    }
    tagInfo[0] = -1;
   b4b68:	4829      	ldr	r0, [pc, #164]	; (b4c10 <loop+0x1ac>)
   b4b6a:	f7ff fc63 	bl	b4434 <_Z11numSensoresPb>
  }
   b4b6e:	1e05      	subs	r5, r0, #0
   b4b70:	dd1f      	ble.n	b4bb2 <loop+0x14e>

  int num = numSensores(sensoresArray);
  if (num > 0)
  {
    // Serial.printlnf("Sensores : %d", num);
   b4b72:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b4c38 <loop+0x1d4>
   b4b76:	4f2c      	ldr	r7, [pc, #176]	; (b4c28 <loop+0x1c4>)
   b4b78:	4e26      	ldr	r6, [pc, #152]	; (b4c14 <loop+0x1b0>)
   b4b7a:	f8d8 2000 	ldr.w	r2, [r8]
   b4b7e:	6839      	ldr	r1, [r7, #0]
   b4b80:	6830      	ldr	r0, [r6, #0]
   b4b82:	f7ff fef7 	bl	b4974 <_Z10leerSensoriii>

    //  Leemos el valor del sensor 1;
    bool valueSensor1 = leerSensor(idSensor[0], condicionSensor[0], puertosSensores[0]);
    // Serial.printlnf("Sensor 1: %s", valueSensor1 ? "True" : "False");
    int operacion = valueSensor1;
   b4b86:	2d02      	cmp	r5, #2
    // Serial.printlnf("Sensores : %d", num);
   b4b88:	4602      	mov	r2, r0
    int operacion = valueSensor1;
   b4b8a:	d107      	bne.n	b4b9c <loop+0x138>
   b4b8c:	b130      	cbz	r0, b4b9c <loop+0x138>

    // Si hay 2 sensores, leemos el valor del sensor 2;
   b4b8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b4b92:	6879      	ldr	r1, [r7, #4]
   b4b94:	6870      	ldr	r0, [r6, #4]
   b4b96:	f7ff feed 	bl	b4974 <_Z10leerSensoriii>
   b4b9a:	4602      	mov	r2, r0
      bool valueSensor2 = leerSensor(idSensor[1], condicionSensor[1], puertosSensores[1]);
      // Serial.printlnf("Sensor 2: %s", valueSensor2 ? "True" : "False");

      valueSensor2 ? operacion = true : operacion = false;
    }

   b4b9c:	4b23      	ldr	r3, [pc, #140]	; (b4c2c <loop+0x1c8>)
   b4b9e:	6819      	ldr	r1, [r3, #0]
   b4ba0:	1c4b      	adds	r3, r1, #1
   b4ba2:	d006      	beq.n	b4bb2 <loop+0x14e>
    // Serial.printlnf("Operacion: %s", operacion ? "True" : "False");

    if (puertoActuador != -1)
   b4ba4:	68a3      	ldr	r3, [r4, #8]
   b4ba6:	68e0      	ldr	r0, [r4, #12]
   b4ba8:	f002 0201 	and.w	r2, r2, #1
   b4bac:	b9e3      	cbnz	r3, b4be8 <loop+0x184>
   b4bae:	f7ff fde3 	bl	b4778 <_Z10activarLEDiib>
      tagInfo[2] == 0 ? activarLED(tagInfo[3], puertoActuador, operacion) : activarZumbador(tagInfo[3], puertoActuador, operacion);
    }
    // Serial.println();
  }

  display.display();
   b4bb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // Serial.println();
   b4bb6:	4810      	ldr	r0, [pc, #64]	; (b4bf8 <loop+0x194>)
   b4bb8:	f001 b856 	b.w	b5c68 <_ZN16Adafruit_SSD13067displayEv>
      else
   b4bbc:	f002 fce4 	bl	b7588 <_Z16_fetch_usbserialv>
   b4bc0:	491b      	ldr	r1, [pc, #108]	; (b4c30 <loop+0x1cc>)
      }
   b4bc2:	f002 fa9a 	bl	b70fa <_ZN5Print7printlnEPKc>
   b4bc6:	e7cc      	b.n	b4b62 <loop+0xfe>
    else
   b4bc8:	f7ff fc34 	bl	b4434 <_Z11numSensoresPb>
    {
   b4bcc:	2800      	cmp	r0, #0
   b4bce:	dd07      	ble.n	b4be0 <loop+0x17c>
      if (num >= 1)
   b4bd0:	6860      	ldr	r0, [r4, #4]
   b4bd2:	f7ff fbcd 	bl	b4370 <_Z13asignarPuertoi>
        // Asignamos un puerto al actuador
   b4bd6:	1c42      	adds	r2, r0, #1
   b4bd8:	d0c3      	beq.n	b4b62 <loop+0xfe>
        // Si el puerto es distinto de -1 el actuador ha sido asignado correctamente.
   b4bda:	4b14      	ldr	r3, [pc, #80]	; (b4c2c <loop+0x1c8>)
   b4bdc:	6018      	str	r0, [r3, #0]
   b4bde:	e7c0      	b.n	b4b62 <loop+0xfe>
      }
   b4be0:	f002 fcd2 	bl	b7588 <_Z16_fetch_usbserialv>
   b4be4:	4913      	ldr	r1, [pc, #76]	; (b4c34 <loop+0x1d0>)
   b4be6:	e7ec      	b.n	b4bc2 <loop+0x15e>
    if (puertoActuador != -1)
   b4be8:	f7ff fe42 	bl	b4870 <_Z15activarZumbadoriib>
   b4bec:	e7e1      	b.n	b4bb2 <loop+0x14e>
  display.display();
   b4bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4bf2:	bf00      	nop
   b4bf4:	2003e6ab 	.word	0x2003e6ab
   b4bf8:	2003e634 	.word	0x2003e634
   b4bfc:	2003e554 	.word	0x2003e554
   b4c00:	000b7e5a 	.word	0x000b7e5a
   b4c04:	000b7e64 	.word	0x000b7e64
   b4c08:	000b7e7d 	.word	0x000b7e7d
   b4c0c:	000b7e70 	.word	0x000b7e70
   b4c10:	2003e6c0 	.word	0x2003e6c0
   b4c14:	2003e53c 	.word	0x2003e53c
   b4c18:	000b7e88 	.word	0x000b7e88
   b4c1c:	000b7ea1 	.word	0x000b7ea1
   b4c20:	000b7ea9 	.word	0x000b7ea9
   b4c24:	000b7eb8 	.word	0x000b7eb8
   b4c28:	2003e530 	.word	0x2003e530
   b4c2c:	2003e544 	.word	0x2003e544
   b4c30:	000b7ec3 	.word	0x000b7ec3
   b4c34:	000b7ed6 	.word	0x000b7ed6
   b4c38:	2003e54c 	.word	0x2003e54c

000b4c3c <_GLOBAL__sub_I_trailerBlock>:
   b4c3c:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b4c3e:	4c10      	ldr	r4, [pc, #64]	; (b4c80 <_GLOBAL__sub_I_trailerBlock+0x44>)
Adafruit_SSD1306 display(-1);
   b4c40:	4810      	ldr	r0, [pc, #64]	; (b4c84 <_GLOBAL__sub_I_trailerBlock+0x48>)
   b4c42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4c46:	f000 fcb3 	bl	b55b0 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b4c4a:	490f      	ldr	r1, [pc, #60]	; (b4c88 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	f002 fba9 	bl	b73a4 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c52:	490d      	ldr	r1, [pc, #52]	; (b4c88 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b4c54:	f104 0010 	add.w	r0, r4, #16
   b4c58:	f002 fba4 	bl	b73a4 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b4c5c:	2208      	movs	r2, #8
   b4c5e:	480b      	ldr	r0, [pc, #44]	; (b4c8c <_GLOBAL__sub_I_trailerBlock+0x50>)
   b4c60:	2110      	movs	r1, #16
   b4c62:	f001 f983 	bl	b5f6c <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4c66:	4b0a      	ldr	r3, [pc, #40]	; (b4c90 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b4c68:	2200      	movs	r2, #0
   b4c6a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4c6e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4c72:	609a      	str	r2, [r3, #8]
   b4c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4c78:	2002      	movs	r0, #2
   b4c7a:	f001 bf43 	b.w	b6b04 <set_system_mode>
   b4c7e:	bf00      	nop
   b4c80:	2003e684 	.word	0x2003e684
   b4c84:	2003e634 	.word	0x2003e634
   b4c88:	000b7efa 	.word	0x000b7efa
   b4c8c:	2003e6ab 	.word	0x2003e6ab
   b4c90:	2003e5e8 	.word	0x2003e5e8

000b4c94 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c98:	b085      	sub	sp, #20
   b4c9a:	461f      	mov	r7, r3
   b4c9c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4ca0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4ca4:	eba8 0902 	sub.w	r9, r8, r2
   b4ca8:	eba7 0a01 	sub.w	sl, r7, r1
   b4cac:	f1b9 0f00 	cmp.w	r9, #0
   b4cb0:	bfb8      	it	lt
   b4cb2:	f1c9 0900 	rsblt	r9, r9, #0
   b4cb6:	f1ba 0f00 	cmp.w	sl, #0
   b4cba:	bfb8      	it	lt
   b4cbc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4cc0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4cc2:	4683      	mov	fp, r0
   b4cc4:	460c      	mov	r4, r1
   b4cc6:	4615      	mov	r5, r2
    if (steep) {
   b4cc8:	dd04      	ble.n	b4cd4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4cca:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4ccc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4cce:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4cd0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4cd2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4cd4:	42bc      	cmp	r4, r7
   b4cd6:	dd05      	ble.n	b4ce4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4cd8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4cda:	4645      	mov	r5, r8
   b4cdc:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4cde:	4622      	mov	r2, r4
   b4ce0:	463c      	mov	r4, r7
   b4ce2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4ce4:	1b3e      	subs	r6, r7, r4
   b4ce6:	b2b2      	uxth	r2, r6
   b4ce8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4cea:	eba8 0205 	sub.w	r2, r8, r5
   b4cee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4cf2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4cf6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4cfa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4cfe:	4545      	cmp	r5, r8
   b4d00:	bfb4      	ite	lt
   b4d02:	2201      	movlt	r2, #1
   b4d04:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4d08:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4d0a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4d0c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4d0e:	42bc      	cmp	r4, r7
   b4d10:	dc1c      	bgt.n	b4d4c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4d12:	f8db 2000 	ldr.w	r2, [fp]
   b4d16:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4d18:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4d1a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4d1e:	bfc7      	ittee	gt
   b4d20:	4629      	movgt	r1, r5
   b4d22:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4d24:	462a      	movle	r2, r5
   b4d26:	4621      	movle	r1, r4
   b4d28:	4658      	mov	r0, fp
   b4d2a:	47c0      	blx	r8
        }
        err -= dy;
   b4d2c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4d2e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4d30:	1ab6      	subs	r6, r6, r2
   b4d32:	b2b1      	uxth	r1, r6
   b4d34:	b236      	sxth	r6, r6
        if (err < 0) {
   b4d36:	2e00      	cmp	r6, #0
   b4d38:	da05      	bge.n	b4d46 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4d3a:	9a02      	ldr	r2, [sp, #8]
   b4d3c:	4415      	add	r5, r2
            err += dx;
   b4d3e:	9a00      	ldr	r2, [sp, #0]
   b4d40:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4d42:	b22d      	sxth	r5, r5
            err += dx;
   b4d44:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4d46:	3401      	adds	r4, #1
   b4d48:	b224      	sxth	r4, r4
   b4d4a:	e7e0      	b.n	b4d0e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4d4c:	b005      	add	sp, #20
   b4d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4d52 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4d52:	4770      	bx	lr

000b4d54 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4d54:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4d56:	6804      	ldr	r4, [r0, #0]
   b4d58:	6924      	ldr	r4, [r4, #16]
   b4d5a:	46a4      	mov	ip, r4
}
   b4d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4d60:	4760      	bx	ip

000b4d62 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4d62:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4d64:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4d66:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4d6a:	9502      	str	r5, [sp, #8]
   b4d6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4d6e:	46a4      	mov	ip, r4
}
   b4d70:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4d72:	4760      	bx	ip

000b4d74 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4d74:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4d76:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4d78:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4d7c:	9502      	str	r5, [sp, #8]
   b4d7e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4d80:	46a4      	mov	ip, r4
}
   b4d82:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4d84:	4760      	bx	ip

000b4d86 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4d86:	b470      	push	{r4, r5, r6}
   b4d88:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4d8c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4d90:	6804      	ldr	r4, [r0, #0]
   b4d92:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4d96:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4d98:	46a4      	mov	ip, r4
}
   b4d9a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4d9c:	4760      	bx	ip

000b4d9e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4d9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4da2:	461c      	mov	r4, r3
    startWrite();
   b4da4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4da6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4daa:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4dac:	4605      	mov	r5, r0
   b4dae:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4db0:	3c01      	subs	r4, #1
   b4db2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4db4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4db6:	b224      	sxth	r4, r4
    startWrite();
   b4db8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4dba:	682b      	ldr	r3, [r5, #0]
   b4dbc:	f8cd 8004 	str.w	r8, [sp, #4]
   b4dc0:	9400      	str	r4, [sp, #0]
   b4dc2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	463b      	mov	r3, r7
   b4dc8:	4632      	mov	r2, r6
   b4dca:	4639      	mov	r1, r7
   b4dcc:	47a0      	blx	r4
    endWrite();
   b4dce:	682b      	ldr	r3, [r5, #0]
   b4dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4dd2:	4628      	mov	r0, r5
}
   b4dd4:	b002      	add	sp, #8
   b4dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4dda:	4718      	bx	r3

000b4ddc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4ddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4de0:	461d      	mov	r5, r3
    startWrite();
   b4de2:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4de4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4de8:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4dea:	4604      	mov	r4, r0
   b4dec:	4617      	mov	r7, r2
   b4dee:	460e      	mov	r6, r1
    startWrite();
   b4df0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4df2:	e9cd 7800 	strd	r7, r8, [sp]
   b4df6:	6822      	ldr	r2, [r4, #0]
   b4df8:	1e6b      	subs	r3, r5, #1
   b4dfa:	4433      	add	r3, r6
   b4dfc:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4dfe:	4620      	mov	r0, r4
   b4e00:	b21b      	sxth	r3, r3
   b4e02:	463a      	mov	r2, r7
   b4e04:	4631      	mov	r1, r6
   b4e06:	47a8      	blx	r5
    endWrite();
   b4e08:	6823      	ldr	r3, [r4, #0]
   b4e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e0c:	4620      	mov	r0, r4
}
   b4e0e:	b002      	add	sp, #8
   b4e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4e14:	4718      	bx	r3

000b4e16 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4e16:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e1a:	461e      	mov	r6, r3
    startWrite();
   b4e1c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4e1e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4e22:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4e24:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4e28:	460c      	mov	r4, r1
   b4e2a:	4605      	mov	r5, r0
   b4e2c:	4617      	mov	r7, r2
    startWrite();
   b4e2e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4e30:	4426      	add	r6, r4
   b4e32:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4e34:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4e36:	da0b      	bge.n	b4e50 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4e38:	f8cd 8000 	str.w	r8, [sp]
   b4e3c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4e40:	4621      	mov	r1, r4
   b4e42:	464b      	mov	r3, r9
   b4e44:	463a      	mov	r2, r7
   b4e46:	4628      	mov	r0, r5
   b4e48:	3401      	adds	r4, #1
   b4e4a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4e4c:	b224      	sxth	r4, r4
   b4e4e:	e7f0      	b.n	b4e32 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e52:	4628      	mov	r0, r5
}
   b4e54:	b002      	add	sp, #8
   b4e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4e5a:	4718      	bx	r3

000b4e5c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4e5c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4e5e:	6802      	ldr	r2, [r0, #0]
   b4e60:	9101      	str	r1, [sp, #4]
   b4e62:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4e66:	9100      	str	r1, [sp, #0]
   b4e68:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4e6a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4e6e:	2200      	movs	r2, #0
   b4e70:	4611      	mov	r1, r2
   b4e72:	47a0      	blx	r4
}
   b4e74:	b002      	add	sp, #8
   b4e76:	bd10      	pop	{r4, pc}

000b4e78 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4e7c:	4299      	cmp	r1, r3
        uint16_t color) {
   b4e7e:	4616      	mov	r6, r2
   b4e80:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4e84:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4e88:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4e8a:	4680      	mov	r8, r0
   b4e8c:	460d      	mov	r5, r1
   b4e8e:	461c      	mov	r4, r3
    if(x0 == x1){
   b4e90:	d113      	bne.n	b4eba <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4e92:	42be      	cmp	r6, r7
   b4e94:	bfc8      	it	gt
   b4e96:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4e98:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4e9c:	bfc4      	itt	gt
   b4e9e:	463e      	movgt	r6, r7
   b4ea0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4ea2:	1c7b      	adds	r3, r7, #1
   b4ea4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4ea6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ea8:	b21b      	sxth	r3, r3
   b4eaa:	4632      	mov	r2, r6
   b4eac:	4629      	mov	r1, r5
   b4eae:	4640      	mov	r0, r8
   b4eb0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4eb2:	b003      	add	sp, #12
   b4eb4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4eb8:	4760      	bx	ip
    } else if(y0 == y1){
   b4eba:	42be      	cmp	r6, r7
   b4ebc:	d10a      	bne.n	b4ed4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4ebe:	4299      	cmp	r1, r3
   b4ec0:	bfc2      	ittt	gt
   b4ec2:	460b      	movgt	r3, r1
   b4ec4:	4625      	movgt	r5, r4
   b4ec6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ec8:	1c63      	adds	r3, r4, #1
   b4eca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4ece:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4ed0:	1b5b      	subs	r3, r3, r5
   b4ed2:	e7e9      	b.n	b4ea8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4ed4:	6953      	ldr	r3, [r2, #20]
   b4ed6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4ed8:	e9cd 7900 	strd	r7, r9, [sp]
   b4edc:	f8d8 3000 	ldr.w	r3, [r8]
   b4ee0:	4640      	mov	r0, r8
   b4ee2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4ee4:	4632      	mov	r2, r6
   b4ee6:	4623      	mov	r3, r4
   b4ee8:	4629      	mov	r1, r5
   b4eea:	47b8      	blx	r7
        endWrite();
   b4eec:	f8d8 3000 	ldr.w	r3, [r8]
   b4ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ef2:	4640      	mov	r0, r8
}
   b4ef4:	b003      	add	sp, #12
   b4ef6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4efa:	4718      	bx	r3

000b4efc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4efc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f00:	461d      	mov	r5, r3
    startWrite();
   b4f02:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4f04:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4f08:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f0a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4f0e:	4604      	mov	r4, r0
   b4f10:	460f      	mov	r7, r1
   b4f12:	4616      	mov	r6, r2
    startWrite();
   b4f14:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4f16:	6823      	ldr	r3, [r4, #0]
   b4f18:	f8cd 8000 	str.w	r8, [sp]
   b4f1c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f20:	4632      	mov	r2, r6
   b4f22:	462b      	mov	r3, r5
   b4f24:	4639      	mov	r1, r7
   b4f26:	4620      	mov	r0, r4
   b4f28:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4f2a:	6823      	ldr	r3, [r4, #0]
   b4f2c:	f8cd 8000 	str.w	r8, [sp]
   b4f30:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f34:	4432      	add	r2, r6
   b4f36:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f3a:	4639      	mov	r1, r7
   b4f3c:	462b      	mov	r3, r5
   b4f3e:	4620      	mov	r0, r4
   b4f40:	b212      	sxth	r2, r2
   b4f42:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4f44:	6823      	ldr	r3, [r4, #0]
   b4f46:	f8cd 8000 	str.w	r8, [sp]
   b4f4a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f4e:	4632      	mov	r2, r6
   b4f50:	464b      	mov	r3, r9
   b4f52:	4639      	mov	r1, r7
   b4f54:	4620      	mov	r0, r4
   b4f56:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4f58:	1e6b      	subs	r3, r5, #1
   b4f5a:	19d9      	adds	r1, r3, r7
   b4f5c:	6823      	ldr	r3, [r4, #0]
   b4f5e:	f8cd 8000 	str.w	r8, [sp]
   b4f62:	6a1d      	ldr	r5, [r3, #32]
   b4f64:	4620      	mov	r0, r4
   b4f66:	464b      	mov	r3, r9
   b4f68:	4632      	mov	r2, r6
   b4f6a:	b209      	sxth	r1, r1
   b4f6c:	47a8      	blx	r5
    endWrite();
   b4f6e:	6823      	ldr	r3, [r4, #0]
   b4f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f72:	4620      	mov	r0, r4
}
   b4f74:	b002      	add	sp, #8
   b4f76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4f7a:	4718      	bx	r3

000b4f7c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4f7c:	4770      	bx	lr

000b4f7e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4f7e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4f82:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4f86:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4f88:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4f8a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4f8e:	bf59      	ittee	pl
   b4f90:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4f92:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4f94:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4f96:	81c3      	strhmi	r3, [r0, #14]
}
   b4f98:	4770      	bx	lr
	...

000b4f9c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4f9c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4f9e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4fa0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4fa2:	4a07      	ldr	r2, [pc, #28]	; (b4fc0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4fa4:	4d07      	ldr	r5, [pc, #28]	; (b4fc4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4fa6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4fa8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4faa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4fb0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4fb4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4fb6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4fb8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4fba:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4fbc:	6204      	str	r4, [r0, #32]
}
   b4fbe:	bd30      	pop	{r4, r5, pc}
   b4fc0:	01000101 	.word	0x01000101
   b4fc4:	000b8404 	.word	0x000b8404

000b4fc8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fcc:	b089      	sub	sp, #36	; 0x24
   b4fce:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4fd2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fd4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4fd8:	9304      	str	r3, [sp, #16]
   b4fda:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b4fde:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fe0:	9305      	str	r3, [sp, #20]
   b4fe2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4fe6:	4604      	mov	r4, r0
    startWrite();
   b4fe8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4fea:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b4fee:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4ff2:	bf48      	it	mi
   b4ff4:	f108 020e 	addmi.w	r2, r8, #14
   b4ff8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4ffc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b4ffe:	4635      	mov	r5, r6
   b5000:	9b03      	ldr	r3, [sp, #12]
   b5002:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5004:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5008:	189a      	adds	r2, r3, r2
   b500a:	9b05      	ldr	r3, [sp, #20]
   b500c:	428b      	cmp	r3, r1
   b500e:	b212      	sxth	r2, r2
   b5010:	dd27      	ble.n	b5062 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5012:	9b04      	ldr	r3, [sp, #16]
   b5014:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5016:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b501a:	9306      	str	r3, [sp, #24]
   b501c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5020:	4580      	cmp	r8, r0
   b5022:	fa1f f189 	uxth.w	r1, r9
   b5026:	dd17      	ble.n	b5058 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5028:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b502a:	bf05      	ittet	eq
   b502c:	9b06      	ldreq	r3, [sp, #24]
   b502e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5030:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5032:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5034:	bf18      	it	ne
   b5036:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5038:	062b      	lsls	r3, r5, #24
   b503a:	d50a      	bpl.n	b5052 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b503c:	9b02      	ldr	r3, [sp, #8]
   b503e:	6820      	ldr	r0, [r4, #0]
   b5040:	9207      	str	r2, [sp, #28]
   b5042:	4419      	add	r1, r3
   b5044:	6983      	ldr	r3, [r0, #24]
   b5046:	b209      	sxth	r1, r1
   b5048:	461f      	mov	r7, r3
   b504a:	4620      	mov	r0, r4
   b504c:	4653      	mov	r3, sl
   b504e:	47b8      	blx	r7
   b5050:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5052:	f109 0901 	add.w	r9, r9, #1
   b5056:	e7e1      	b.n	b501c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5058:	9b01      	ldr	r3, [sp, #4]
   b505a:	3301      	adds	r3, #1
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	445e      	add	r6, fp
   b5060:	e7ce      	b.n	b5000 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5062:	6823      	ldr	r3, [r4, #0]
   b5064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5066:	4620      	mov	r0, r4
}
   b5068:	b009      	add	sp, #36	; 0x24
   b506a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b506e:	4718      	bx	r3

000b5070 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5074:	ed2d 8b02 	vpush	{d8}
   b5078:	b091      	sub	sp, #68	; 0x44
   b507a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b507c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b507e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5082:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5086:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b508a:	9103      	str	r1, [sp, #12]
   b508c:	461f      	mov	r7, r3
   b508e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5092:	9304      	str	r3, [sp, #16]
   b5094:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5096:	2a00      	cmp	r2, #0
   b5098:	f040 80c5 	bne.w	b5226 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b509c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b50a0:	428b      	cmp	r3, r1
   b50a2:	f340 814c 	ble.w	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b50a6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b50aa:	42b3      	cmp	r3, r6
   b50ac:	f340 8147 	ble.w	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b50b0:	2306      	movs	r3, #6
   b50b2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b50b6:	2b00      	cmp	r3, #0
   b50b8:	f340 8141 	ble.w	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b50bc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b50c0:	2b00      	cmp	r3, #0
   b50c2:	f340 813c 	ble.w	b533e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b50c6:	7f03      	ldrb	r3, [r0, #28]
   b50c8:	b91b      	cbnz	r3, b50d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b50ca:	2faf      	cmp	r7, #175	; 0xaf
   b50cc:	bf84      	itt	hi
   b50ce:	3701      	addhi	r7, #1
   b50d0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b50d2:	f8db 3000 	ldr.w	r3, [fp]
   b50d6:	4658      	mov	r0, fp
   b50d8:	695b      	ldr	r3, [r3, #20]
   b50da:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50dc:	2205      	movs	r2, #5
   b50de:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b50e0:	2200      	movs	r2, #0
   b50e2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50e4:	4a98      	ldr	r2, [pc, #608]	; (b5348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b50e6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b50ea:	18d3      	adds	r3, r2, r3
   b50ec:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b50ee:	b2b3      	uxth	r3, r6
   b50f0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50f2:	9a05      	ldr	r2, [sp, #20]
   b50f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b50f6:	5c9b      	ldrb	r3, [r3, r2]
   b50f8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b50fa:	b2ab      	uxth	r3, r5
   b50fc:	930b      	str	r3, [sp, #44]	; 0x2c
   b50fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5102:	9308      	str	r3, [sp, #32]
   b5104:	9b03      	ldr	r3, [sp, #12]
   b5106:	fb02 f905 	mul.w	r9, r2, r5
   b510a:	fa19 f983 	uxtah	r9, r9, r3
   b510e:	fa0f f389 	sxth.w	r3, r9
   b5112:	ee08 3a10 	vmov	s16, r3
   b5116:	2308      	movs	r3, #8
   b5118:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b511a:	9b03      	ldr	r3, [sp, #12]
   b511c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5120:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5124:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5128:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b512a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b512e:	07d2      	lsls	r2, r2, #31
   b5130:	d552      	bpl.n	b51d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5132:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5134:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5138:	d13e      	bne.n	b51b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b513a:	2c01      	cmp	r4, #1
   b513c:	d13c      	bne.n	b51b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b513e:	699b      	ldr	r3, [r3, #24]
   b5140:	9906      	ldr	r1, [sp, #24]
   b5142:	461f      	mov	r7, r3
   b5144:	9b04      	ldr	r3, [sp, #16]
   b5146:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5148:	b212      	sxth	r2, r2
   b514a:	4651      	mov	r1, sl
   b514c:	4658      	mov	r0, fp
   b514e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5150:	f109 0301 	add.w	r3, r9, #1
   b5154:	fa4f f983 	sxtb.w	r9, r3
   b5158:	9b07      	ldr	r3, [sp, #28]
   b515a:	085b      	lsrs	r3, r3, #1
   b515c:	9307      	str	r3, [sp, #28]
   b515e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5160:	3b01      	subs	r3, #1
   b5162:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5166:	930a      	str	r3, [sp, #40]	; 0x28
   b5168:	d1de      	bne.n	b5128 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b516a:	9f05      	ldr	r7, [sp, #20]
   b516c:	3701      	adds	r7, #1
   b516e:	b27b      	sxtb	r3, r7
   b5170:	9305      	str	r3, [sp, #20]
   b5172:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5174:	3b01      	subs	r3, #1
   b5176:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b517a:	9309      	str	r3, [sp, #36]	; 0x24
   b517c:	d1b9      	bne.n	b50f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b517e:	9b04      	ldr	r3, [sp, #16]
   b5180:	4543      	cmp	r3, r8
   b5182:	d00f      	beq.n	b51a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5184:	2d01      	cmp	r5, #1
   b5186:	f8db 3000 	ldr.w	r3, [fp]
   b518a:	d13b      	bne.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b518c:	2c01      	cmp	r4, #1
   b518e:	d139      	bne.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5190:	9908      	ldr	r1, [sp, #32]
   b5192:	f8cd 8000 	str.w	r8, [sp]
   b5196:	3105      	adds	r1, #5
   b5198:	6a1c      	ldr	r4, [r3, #32]
   b519a:	4632      	mov	r2, r6
   b519c:	2308      	movs	r3, #8
   b519e:	b209      	sxth	r1, r1
   b51a0:	4658      	mov	r0, fp
   b51a2:	47a0      	blx	r4
        endWrite();
   b51a4:	f8db 3000 	ldr.w	r3, [fp]
   b51a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51aa:	4658      	mov	r0, fp
}
   b51ac:	b011      	add	sp, #68	; 0x44
   b51ae:	ecbd 8b02 	vpop	{d8}
   b51b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b51b6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b51b8:	9906      	ldr	r1, [sp, #24]
   b51ba:	fb14 f202 	smulbb	r2, r4, r2
   b51be:	440a      	add	r2, r1
   b51c0:	9904      	ldr	r1, [sp, #16]
   b51c2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51c4:	9400      	str	r4, [sp, #0]
   b51c6:	69db      	ldr	r3, [r3, #28]
   b51c8:	ee18 1a10 	vmov	r1, s16
   b51cc:	461f      	mov	r7, r3
   b51ce:	b212      	sxth	r2, r2
   b51d0:	462b      	mov	r3, r5
   b51d2:	4658      	mov	r0, fp
   b51d4:	47b8      	blx	r7
   b51d6:	e7bb      	b.n	b5150 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b51d8:	9a04      	ldr	r2, [sp, #16]
   b51da:	4542      	cmp	r2, r8
   b51dc:	d0b8      	beq.n	b5150 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b51de:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b51e0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b51e4:	d107      	bne.n	b51f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b51e6:	2c01      	cmp	r4, #1
   b51e8:	d105      	bne.n	b51f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b51ea:	699b      	ldr	r3, [r3, #24]
   b51ec:	9906      	ldr	r1, [sp, #24]
   b51ee:	461f      	mov	r7, r3
   b51f0:	440a      	add	r2, r1
   b51f2:	4643      	mov	r3, r8
   b51f4:	e7a8      	b.n	b5148 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51f6:	9906      	ldr	r1, [sp, #24]
   b51f8:	f8cd 8004 	str.w	r8, [sp, #4]
   b51fc:	fb14 f202 	smulbb	r2, r4, r2
   b5200:	440a      	add	r2, r1
   b5202:	e7df      	b.n	b51c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5206:	f8cd 8004 	str.w	r8, [sp, #4]
   b520a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b520e:	9a08      	ldr	r2, [sp, #32]
   b5210:	00e4      	lsls	r4, r4, #3
   b5212:	440a      	add	r2, r1
   b5214:	4611      	mov	r1, r2
   b5216:	9400      	str	r4, [sp, #0]
   b5218:	69dc      	ldr	r4, [r3, #28]
   b521a:	4632      	mov	r2, r6
   b521c:	462b      	mov	r3, r5
   b521e:	b209      	sxth	r1, r1
   b5220:	4658      	mov	r0, fp
   b5222:	47a0      	blx	r4
        endWrite();
   b5224:	e7be      	b.n	b51a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5226:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5228:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b522a:	6812      	ldr	r2, [r2, #0]
   b522c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b522e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5230:	b2ff      	uxtb	r7, r7
   b5232:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5236:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b523a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b523c:	789a      	ldrb	r2, [r3, #2]
   b523e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5240:	78da      	ldrb	r2, [r3, #3]
   b5242:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5244:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5246:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b524a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b524e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5250:	d801      	bhi.n	b5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5252:	2c01      	cmp	r4, #1
   b5254:	d957      	bls.n	b5306 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5256:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b525a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b525c:	fa0f f38a 	sxth.w	r3, sl
   b5260:	9307      	str	r3, [sp, #28]
        startWrite();
   b5262:	f8db 3000 	ldr.w	r3, [fp]
   b5266:	4658      	mov	r0, fp
   b5268:	695b      	ldr	r3, [r3, #20]
   b526a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b526c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b526e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5272:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5274:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5278:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b527a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b527c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b527e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5280:	429f      	cmp	r7, r3
   b5282:	d28f      	bcs.n	b51a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5284:	9b07      	ldr	r3, [sp, #28]
   b5286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5288:	443b      	add	r3, r7
   b528a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b528e:	2200      	movs	r2, #0
   b5290:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5294:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5296:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b529a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b529e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52a2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b52a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b52a6:	9905      	ldr	r1, [sp, #20]
   b52a8:	4291      	cmp	r1, r2
   b52aa:	d241      	bcs.n	b5330 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b52ac:	1c5a      	adds	r2, r3, #1
   b52ae:	b2d2      	uxtb	r2, r2
   b52b0:	075b      	lsls	r3, r3, #29
   b52b2:	920d      	str	r2, [sp, #52]	; 0x34
   b52b4:	d107      	bne.n	b52c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b52b6:	9b06      	ldr	r3, [sp, #24]
   b52b8:	9906      	ldr	r1, [sp, #24]
   b52ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b52bc:	3301      	adds	r3, #1
   b52be:	b29b      	uxth	r3, r3
   b52c0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b52c4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b52c6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b52ca:	d012      	beq.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b52cc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52ce:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b52d6:	d11a      	bne.n	b530e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b52d8:	2c01      	cmp	r4, #1
   b52da:	d118      	bne.n	b530e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b52de:	699b      	ldr	r3, [r3, #24]
   b52e0:	4411      	add	r1, r2
   b52e2:	9a05      	ldr	r2, [sp, #20]
   b52e4:	4411      	add	r1, r2
   b52e6:	461e      	mov	r6, r3
   b52e8:	4652      	mov	r2, sl
   b52ea:	9b04      	ldr	r3, [sp, #16]
   b52ec:	b209      	sxth	r1, r1
   b52ee:	4658      	mov	r0, fp
   b52f0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b52f2:	9e05      	ldr	r6, [sp, #20]
   b52f4:	3601      	adds	r6, #1
   b52f6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b52f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b52fc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b52fe:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5304:	e7ce      	b.n	b52a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5306:	2300      	movs	r3, #0
   b5308:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b530c:	e7a9      	b.n	b5262 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b530e:	9805      	ldr	r0, [sp, #20]
   b5310:	9a08      	ldr	r2, [sp, #32]
   b5312:	4402      	add	r2, r0
   b5314:	fb02 1105 	mla	r1, r2, r5, r1
   b5318:	9a04      	ldr	r2, [sp, #16]
   b531a:	e9cd 4200 	strd	r4, r2, [sp]
   b531e:	69db      	ldr	r3, [r3, #28]
   b5320:	ee18 2a10 	vmov	r2, s16
   b5324:	461e      	mov	r6, r3
   b5326:	b209      	sxth	r1, r1
   b5328:	462b      	mov	r3, r5
   b532a:	4658      	mov	r0, fp
   b532c:	47b0      	blx	r6
   b532e:	e7e0      	b.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5330:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5332:	3701      	adds	r7, #1
   b5334:	4498      	add	r8, r3
   b5336:	fa5f f888 	uxtb.w	r8, r8
   b533a:	b2ff      	uxtb	r7, r7
   b533c:	e79f      	b.n	b527e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b533e:	b011      	add	sp, #68	; 0x44
   b5340:	ecbd 8b02 	vpop	{d8}
   b5344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5348:	000b7efc 	.word	0x000b7efc

000b534c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b534c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b534e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5350:	b085      	sub	sp, #20
   b5352:	4604      	mov	r4, r0
   b5354:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5356:	2a00      	cmp	r2, #0
   b5358:	d134      	bne.n	b53c4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b535a:	290a      	cmp	r1, #10
   b535c:	d108      	bne.n	b5370 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b535e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5360:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5362:	7e42      	ldrb	r2, [r0, #25]
   b5364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5368:	8263      	strh	r3, [r4, #18]
}
   b536a:	2001      	movs	r0, #1
   b536c:	b005      	add	sp, #20
   b536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5370:	290d      	cmp	r1, #13
   b5372:	d0fa      	beq.n	b536a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5374:	7ee1      	ldrb	r1, [r4, #27]
   b5376:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5378:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b537a:	b171      	cbz	r1, b539a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b537c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5380:	2106      	movs	r1, #6
   b5382:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5386:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b538a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b538c:	bfc1      	itttt	gt
   b538e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5392:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5394:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5398:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b539a:	8ae2      	ldrh	r2, [r4, #22]
   b539c:	9201      	str	r2, [sp, #4]
   b539e:	8aa2      	ldrh	r2, [r4, #20]
   b53a0:	9200      	str	r2, [sp, #0]
   b53a2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b53a6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b53aa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b53ae:	4620      	mov	r0, r4
   b53b0:	f7ff fe5e 	bl	b5070 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b53b4:	7e23      	ldrb	r3, [r4, #24]
   b53b6:	8a22      	ldrh	r2, [r4, #16]
   b53b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b53bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b53c0:	8223      	strh	r3, [r4, #16]
   b53c2:	e7d2      	b.n	b536a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b53c4:	290a      	cmp	r1, #10
   b53c6:	d107      	bne.n	b53d8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b53c8:	2300      	movs	r3, #0
   b53ca:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b53cc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b53ce:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b53d0:	8a43      	ldrh	r3, [r0, #18]
   b53d2:	fb01 3302 	mla	r3, r1, r2, r3
   b53d6:	e7c7      	b.n	b5368 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b53d8:	290d      	cmp	r1, #13
   b53da:	d0c6      	beq.n	b536a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b53dc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b53de:	42a9      	cmp	r1, r5
   b53e0:	d3c3      	bcc.n	b536a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b53e2:	7a51      	ldrb	r1, [r2, #9]
   b53e4:	4299      	cmp	r1, r3
   b53e6:	d3c0      	bcc.n	b536a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b53e8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b53ea:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b53ec:	b2ed      	uxtb	r5, r5
   b53ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b53f2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b53f4:	b328      	cbz	r0, b5442 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b53f6:	78e9      	ldrb	r1, [r5, #3]
   b53f8:	b319      	cbz	r1, b5442 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b53fa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b53fc:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b53fe:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5400:	b191      	cbz	r1, b5428 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5402:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5406:	4408      	add	r0, r1
   b5408:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b540c:	fb06 1100 	mla	r1, r6, r0, r1
   b5410:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5414:	4281      	cmp	r1, r0
   b5416:	dd07      	ble.n	b5428 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5418:	2000      	movs	r0, #0
   b541a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b541c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5420:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5422:	fb02 1207 	mla	r2, r2, r7, r1
   b5426:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5428:	8ae2      	ldrh	r2, [r4, #22]
   b542a:	9201      	str	r2, [sp, #4]
   b542c:	8aa2      	ldrh	r2, [r4, #20]
   b542e:	9200      	str	r2, [sp, #0]
   b5430:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5434:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5438:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b543c:	4620      	mov	r0, r4
   b543e:	f7ff fe17 	bl	b5070 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5442:	7929      	ldrb	r1, [r5, #4]
   b5444:	7e22      	ldrb	r2, [r4, #24]
   b5446:	8a23      	ldrh	r3, [r4, #16]
   b5448:	fb01 3302 	mla	r3, r1, r2, r3
   b544c:	e7b8      	b.n	b53c0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b544e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b544e:	2901      	cmp	r1, #1
   b5450:	bf38      	it	cc
   b5452:	2101      	movcc	r1, #1
   b5454:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5456:	7641      	strb	r1, [r0, #25]
}
   b5458:	4770      	bx	lr

000b545a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b545a:	4770      	bx	lr

000b545c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b545c:	b510      	push	{r4, lr}
  }
   b545e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5460:	4604      	mov	r4, r0
  }
   b5462:	f7fe fe18 	bl	b4096 <_ZdlPvj>
   b5466:	4620      	mov	r0, r4
   b5468:	bd10      	pop	{r4, pc}
	...

000b546c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b546c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b546e:	4604      	mov	r4, r0
   b5470:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5472:	7922      	ldrb	r2, [r4, #4]
   b5474:	68a3      	ldr	r3, [r4, #8]
   b5476:	b132      	cbz	r2, b5486 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5478:	b9a3      	cbnz	r3, b54a4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b547a:	490b      	ldr	r1, [pc, #44]	; (b54a8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b547c:	b002      	add	sp, #8
   b547e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5482:	f001 be27 	b.w	b70d4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5486:	4a09      	ldr	r2, [pc, #36]	; (b54ac <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5488:	7b26      	ldrb	r6, [r4, #12]
   b548a:	4d09      	ldr	r5, [pc, #36]	; (b54b0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b548c:	4909      	ldr	r1, [pc, #36]	; (b54b4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b548e:	7b64      	ldrb	r4, [r4, #13]
   b5490:	2e01      	cmp	r6, #1
   b5492:	bf18      	it	ne
   b5494:	4629      	movne	r1, r5
   b5496:	e9cd 1400 	strd	r1, r4, [sp]
   b549a:	4907      	ldr	r1, [pc, #28]	; (b54b8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b549c:	f7fe fe10 	bl	b40c0 <_ZN5Print6printfEPKcz>
  }
   b54a0:	b002      	add	sp, #8
   b54a2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b54a4:	4a05      	ldr	r2, [pc, #20]	; (b54bc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b54a6:	e7ef      	b.n	b5488 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b54a8:	000b8465 	.word	0x000b8465
   b54ac:	000b7dc7 	.word	0x000b7dc7
   b54b0:	000b8461 	.word	0x000b8461
   b54b4:	000b845d 	.word	0x000b845d
   b54b8:	000b847b 	.word	0x000b847b
   b54bc:	000b8454 	.word	0x000b8454

000b54c0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b54c0:	b510      	push	{r4, lr}
   b54c2:	4b04      	ldr	r3, [pc, #16]	; (b54d4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b54c4:	6003      	str	r3, [r0, #0]
   b54c6:	4604      	mov	r4, r0
{
  if (buffer)
   b54c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b54ca:	b108      	cbz	r0, b54d0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
  {
    free(buffer);
   b54cc:	f001 fbb6 	bl	b6c3c <free>
    buffer = NULL;
  }
}
   b54d0:	4620      	mov	r0, r4
   b54d2:	bd10      	pop	{r4, pc}
   b54d4:	000b8a94 	.word	0x000b8a94

000b54d8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b54d8:	b510      	push	{r4, lr}
   b54da:	4604      	mov	r4, r0
}
   b54dc:	f7ff fff0 	bl	b54c0 <_ZN16Adafruit_SSD1306D1Ev>
   b54e0:	4620      	mov	r0, r4
   b54e2:	2150      	movs	r1, #80	; 0x50
   b54e4:	f7fe fdd7 	bl	b4096 <_ZdlPvj>
   b54e8:	4620      	mov	r0, r4
   b54ea:	bd10      	pop	{r4, pc}

000b54ec <_ZN16Adafruit_SSD13069drawPixelEsst>:
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b54ec:	2900      	cmp	r1, #0
{
   b54ee:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b54f0:	db4b      	blt.n	b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54f2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b54f6:	428c      	cmp	r4, r1
   b54f8:	dd47      	ble.n	b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54fa:	2a00      	cmp	r2, #0
   b54fc:	db45      	blt.n	b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b54fe:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5502:	4294      	cmp	r4, r2
   b5504:	dd41      	ble.n	b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5506:	7e84      	ldrb	r4, [r0, #26]
  {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation())
   b5508:	2c02      	cmp	r4, #2
   b550a:	d01f      	beq.n	b554c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b550c:	2c03      	cmp	r4, #3
   b550e:	d026      	beq.n	b555e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5510:	2c01      	cmp	r4, #1
   b5512:	d104      	bne.n	b551e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    {
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5514:	8904      	ldrh	r4, [r0, #8]
   b5516:	43d2      	mvns	r2, r2
   b5518:	4414      	add	r4, r2
      break;
   b551a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b551c:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color)
   b551e:	2b01      	cmp	r3, #1
   b5520:	d023      	beq.n	b556a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5522:	2b02      	cmp	r3, #2
   b5524:	d032      	beq.n	b558c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5526:	bb83      	cbnz	r3, b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    {
    case WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b5528:	2a00      	cmp	r2, #0
   b552a:	4613      	mov	r3, r2
   b552c:	8904      	ldrh	r4, [r0, #8]
   b552e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5530:	bfb8      	it	lt
   b5532:	1dd3      	addlt	r3, r2, #7
   b5534:	10db      	asrs	r3, r3, #3
   b5536:	fb13 1104 	smlabb	r1, r3, r4, r1
   b553a:	f002 0207 	and.w	r2, r2, #7
   b553e:	2301      	movs	r3, #1
   b5540:	4093      	lsls	r3, r2
   b5542:	5c42      	ldrb	r2, [r0, r1]
   b5544:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b5548:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   b554a:	e01e      	b.n	b558a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   b554c:	8904      	ldrh	r4, [r0, #8]
   b554e:	3c01      	subs	r4, #1
   b5550:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5552:	8944      	ldrh	r4, [r0, #10]
   b5554:	43d2      	mvns	r2, r2
   b5556:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b5558:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b555a:	b212      	sxth	r2, r2
      break;
   b555c:	e7df      	b.n	b551e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b555e:	8944      	ldrh	r4, [r0, #10]
   b5560:	3c01      	subs	r4, #1
   b5562:	1a64      	subs	r4, r4, r1
      break;
   b5564:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5566:	b222      	sxth	r2, r4
      break;
   b5568:	e7d9      	b.n	b551e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b556a:	2a00      	cmp	r2, #0
   b556c:	8904      	ldrh	r4, [r0, #8]
   b556e:	4613      	mov	r3, r2
   b5570:	bfb8      	it	lt
   b5572:	1dd3      	addlt	r3, r2, #7
   b5574:	10db      	asrs	r3, r3, #3
   b5576:	fb13 1104 	smlabb	r1, r3, r4, r1
   b557a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b557c:	f002 0007 	and.w	r0, r2, #7
   b5580:	2201      	movs	r2, #1
   b5582:	4082      	lsls	r2, r0
   b5584:	5c58      	ldrb	r0, [r3, r1]
   b5586:	4302      	orrs	r2, r0
   b5588:	545a      	strb	r2, [r3, r1]
}
   b558a:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b558c:	2a00      	cmp	r2, #0
   b558e:	4613      	mov	r3, r2
   b5590:	8904      	ldrh	r4, [r0, #8]
   b5592:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5594:	bfb8      	it	lt
   b5596:	1dd3      	addlt	r3, r2, #7
   b5598:	10db      	asrs	r3, r3, #3
   b559a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b559e:	f002 0207 	and.w	r2, r2, #7
   b55a2:	2301      	movs	r3, #1
   b55a4:	fa03 f202 	lsl.w	r2, r3, r2
   b55a8:	5c43      	ldrb	r3, [r0, r1]
   b55aa:	405a      	eors	r2, r3
   b55ac:	e7cc      	b.n	b5548 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b55b0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b55b0:	b570      	push	{r4, r5, r6, lr}
                                                     rstPin(rst_pin)
   b55b2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b55b4:	4604      	mov	r4, r0
   b55b6:	460e      	mov	r6, r1
                                                     rstPin(rst_pin)
   b55b8:	2180      	movs	r1, #128	; 0x80
   b55ba:	f7ff fcef 	bl	b4f9c <_ZN12Adafruit_GFXC1Ess>
   b55be:	2500      	movs	r5, #0
   b55c0:	4b0d      	ldr	r3, [pc, #52]	; (b55f8 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b55c2:	6023      	str	r3, [r4, #0]
   b55c4:	6265      	str	r5, [r4, #36]	; 0x24
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b55c6:	f002 f989 	bl	b78dc <_Z19__fetch_global_Wirev>
                                                     rstPin(rst_pin)
   b55ca:	23ff      	movs	r3, #255	; 0xff
   b55cc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b55d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b55d4:	4b09      	ldr	r3, [pc, #36]	; (b55fc <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b55d6:	63a3      	str	r3, [r4, #56]	; 0x38
   b55d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b55dc:	2301      	movs	r3, #1
   b55de:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b55e2:	86a2      	strh	r2, [r4, #52]	; 0x34
   b55e4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b55e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b55ec:	6425      	str	r5, [r4, #64]	; 0x40
   b55ee:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b55f2:	4620      	mov	r0, r4
   b55f4:	bd70      	pop	{r4, r5, r6, pc}
   b55f6:	bf00      	nop
   b55f8:	000b8a94 	.word	0x000b8a94
   b55fc:	000b84a0 	.word	0x000b84a0

000b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
{
   b5600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5602:	4604      	mov	r4, r0
  if (wire)
   b5604:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5606:	460d      	mov	r5, r1
  if (wire)
   b5608:	b190      	cbz	r0, b5630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b560a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b560e:	f001 fbfd 	bl	b6e0c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5612:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5614:	6803      	ldr	r3, [r0, #0]
   b5616:	2100      	movs	r1, #0
   b5618:	689b      	ldr	r3, [r3, #8]
   b561a:	4798      	blx	r3
    WIRE_WRITE(c);
   b561c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b561e:	6803      	ldr	r3, [r0, #0]
   b5620:	4629      	mov	r1, r5
   b5622:	689b      	ldr	r3, [r3, #8]
   b5624:	4798      	blx	r3
    wire->endTransmission();
   b5626:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b562c:	f001 bbf5 	b.w	b6e1a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5630:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5634:	4601      	mov	r1, r0
   b5636:	b298      	uxth	r0, r3
   b5638:	f002 f8f5 	bl	b7826 <digitalWrite>
  if (spi)
   b563c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b563e:	b120      	cbz	r0, b564a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5640:	4629      	mov	r1, r5
}
   b5642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5646:	f001 be63 	b.w	b7310 <_ZN8SPIClass8transferEh>
   b564a:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b564c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b564e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5652:	ea05 0107 	and.w	r1, r5, r7
   b5656:	b280      	uxth	r0, r0
   b5658:	f002 f8e5 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b565c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5660:	2101      	movs	r1, #1
   b5662:	b280      	uxth	r0, r0
   b5664:	f002 f8df 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5668:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b566c:	2100      	movs	r1, #0
   b566e:	b280      	uxth	r0, r0
   b5670:	f002 f8d9 	bl	b7826 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5674:	3e01      	subs	r6, #1
   b5676:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b567a:	d1e8      	bne.n	b564e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b567e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i)
{
   b567e:	b538      	push	{r3, r4, r5, lr}
   b5680:	4604      	mov	r4, r0
  TRANSACTION_START
   b5682:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5684:	460d      	mov	r5, r1
  TRANSACTION_START
   b5686:	b180      	cbz	r0, b56aa <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b568a:	f001 fbb1 	bl	b6df0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b568e:	2d00      	cmp	r5, #0
   b5690:	4620      	mov	r0, r4
   b5692:	bf14      	ite	ne
   b5694:	21a7      	movne	r1, #167	; 0xa7
   b5696:	21a6      	moveq	r1, #166	; 0xa6
   b5698:	f7ff ffb2 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b569c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b569e:	b188      	cbz	r0, b56c4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b56a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b56a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b56a6:	f001 bba3 	b.w	b6df0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b56aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56ac:	b118      	cbz	r0, b56b6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b56ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b56b2:	f001 fdbf 	bl	b7234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b56b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b56ba:	2100      	movs	r1, #0
   b56bc:	b280      	uxth	r0, r0
   b56be:	f002 f8b2 	bl	b7826 <digitalWrite>
   b56c2:	e7e4      	b.n	b568e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b56c4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b56c8:	2101      	movs	r1, #1
   b56ca:	b280      	uxth	r0, r0
   b56cc:	f002 f8ab 	bl	b7826 <digitalWrite>
   b56d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56d2:	b118      	cbz	r0, b56dc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b56d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b56d8:	f001 bd92 	b.w	b7200 <_ZN8SPIClass14endTransactionEv>
}
   b56dc:	bd38      	pop	{r3, r4, r5, pc}

000b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
{
   b56de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b56e2:	4604      	mov	r4, r0
  if (wire)
   b56e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b56e6:	460d      	mov	r5, r1
  if (wire)
   b56e8:	188f      	adds	r7, r1, r2
   b56ea:	b340      	cbz	r0, b573e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b56ec:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b56f0:	f001 fb8c 	bl	b6e0c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b56f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b56f6:	6803      	ldr	r3, [r0, #0]
   b56f8:	2100      	movs	r1, #0
   b56fa:	689b      	ldr	r3, [r3, #8]
   b56fc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b56fe:	2601      	movs	r6, #1
    while (n--)
   b5700:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5702:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--)
   b5704:	d017      	beq.n	b5736 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if (bytesOut >= WIRE_MAX)
   b5706:	2e1f      	cmp	r6, #31
   b5708:	d90c      	bls.n	b5724 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b570a:	f001 fb86 	bl	b6e1a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b570e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5714:	f001 fb7a 	bl	b6e0c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5718:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b571a:	6803      	ldr	r3, [r0, #0]
   b571c:	2100      	movs	r1, #0
   b571e:	689b      	ldr	r3, [r3, #8]
   b5720:	4798      	blx	r3
        bytesOut = 1;
   b5722:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5724:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5726:	f815 1b01 	ldrb.w	r1, [r5], #1
   b572a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b572c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b572e:	689b      	ldr	r3, [r3, #8]
   b5730:	4798      	blx	r3
      bytesOut++;
   b5732:	b2f6      	uxtb	r6, r6
    while (n--)
   b5734:	e7e4      	b.n	b5700 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5736:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b573a:	f001 bb6e 	b.w	b6e1a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b573e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5742:	4601      	mov	r1, r0
   b5744:	b298      	uxth	r0, r3
   b5746:	f002 f86e 	bl	b7826 <digitalWrite>
    while (n--)
   b574a:	42bd      	cmp	r5, r7
   b574c:	d022      	beq.n	b5794 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if (spi)
   b574e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   b5750:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5754:	b118      	cbz	r0, b575e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5756:	4649      	mov	r1, r9
   b5758:	f001 fdda 	bl	b7310 <_ZN8SPIClass8transferEh>
   b575c:	e7f5      	b.n	b574a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b575e:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5760:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5764:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5768:	ea09 0108 	and.w	r1, r9, r8
   b576c:	b280      	uxth	r0, r0
   b576e:	f002 f85a 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5772:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5776:	2101      	movs	r1, #1
   b5778:	b280      	uxth	r0, r0
   b577a:	f002 f854 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b577e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5782:	2100      	movs	r1, #0
   b5784:	b280      	uxth	r0, r0
   b5786:	f002 f84e 	bl	b7826 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b578a:	3e01      	subs	r6, #1
   b578c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5790:	d1e8      	bne.n	b5764 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5792:	e7da      	b.n	b574a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5798 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5798:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b579c:	1dda      	adds	r2, r3, #7
   b579e:	bf48      	it	mi
   b57a0:	f103 020e 	addmi.w	r2, r3, #14
   b57a4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b57a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b57aa:	10d2      	asrs	r2, r2, #3
   b57ac:	435a      	muls	r2, r3
   b57ae:	2100      	movs	r1, #0
   b57b0:	f002 b916 	b.w	b79e0 <memset>

000b57b4 <_ZN16Adafruit_SSD13065beginEhhbb>:
{
   b57b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b57b8:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   b57bc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b57c0:	4604      	mov	r4, r0
   b57c2:	460f      	mov	r7, r1
   b57c4:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57c6:	b1d3      	cbz	r3, b57fe <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b57c8:	4620      	mov	r0, r4
   b57ca:	f7ff ffe5 	bl	b5798 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32)
   b57ce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b57d2:	2a20      	cmp	r2, #32
   b57d4:	dc25      	bgt.n	b5822 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b57d6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b57da:	2320      	movs	r3, #32
   b57dc:	3a20      	subs	r2, #32
   b57de:	3973      	subs	r1, #115	; 0x73
   b57e0:	2001      	movs	r0, #1
   b57e2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b57e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b57ea:	2373      	movs	r3, #115	; 0x73
   b57ec:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b57f0:	9300      	str	r3, [sp, #0]
   b57f2:	f342 024f 	sbfx	r2, r2, #1, #16
   b57f6:	4b85      	ldr	r3, [pc, #532]	; (b5a0c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b57f8:	f341 014f 	sbfx	r1, r1, #1, #16
   b57fc:	e01b      	b.n	b5836 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b57fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5802:	1dd8      	adds	r0, r3, #7
   b5804:	bf48      	it	mi
   b5806:	f103 000e 	addmi.w	r0, r3, #14
   b580a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b580e:	10c0      	asrs	r0, r0, #3
   b5810:	4358      	muls	r0, r3
   b5812:	f001 fa0b 	bl	b6c2c <malloc>
   b5816:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5818:	2800      	cmp	r0, #0
   b581a:	d1d5      	bne.n	b57c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b581c:	b004      	add	sp, #16
   b581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0, 0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b5822:	2340      	movs	r3, #64	; 0x40
   b5824:	f04f 0c01 	mov.w	ip, #1
   b5828:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b582c:	2380      	movs	r3, #128	; 0x80
   b582e:	9300      	str	r3, [sp, #0]
   b5830:	2200      	movs	r2, #0
   b5832:	4b77      	ldr	r3, [pc, #476]	; (b5a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b5834:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5836:	4620      	mov	r0, r4
   b5838:	f7ff fbc6 	bl	b4fc8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire)
   b583c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b583e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire)
   b5842:	2800      	cmp	r0, #0
   b5844:	d078      	beq.n	b5938 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5846:	2d00      	cmp	r5, #0
   b5848:	d174      	bne.n	b5934 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b584a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b584e:	2b20      	cmp	r3, #32
   b5850:	bf0c      	ite	eq
   b5852:	253c      	moveq	r5, #60	; 0x3c
   b5854:	253d      	movne	r5, #61	; 0x3d
   b5856:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   b585a:	f1b8 0f00 	cmp.w	r8, #0
   b585e:	d001      	beq.n	b5864 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      wire->begin();
   b5860:	f001 faca 	bl	b6df8 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0))
   b5864:	b1fe      	cbz	r6, b58a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b5866:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b586a:	2800      	cmp	r0, #0
   b586c:	db1b      	blt.n	b58a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(rstPin, OUTPUT);
   b586e:	2101      	movs	r1, #1
   b5870:	b280      	uxth	r0, r0
   b5872:	f001 ffc7 	bl	b7804 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5876:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b587a:	2101      	movs	r1, #1
   b587c:	b280      	uxth	r0, r0
   b587e:	f001 ffd2 	bl	b7826 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5882:	2001      	movs	r0, #1
   b5884:	f001 fa12 	bl	b6cac <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5888:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b588c:	2100      	movs	r1, #0
   b588e:	b280      	uxth	r0, r0
   b5890:	f001 ffc9 	bl	b7826 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5894:	200a      	movs	r0, #10
   b5896:	f001 fa09 	bl	b6cac <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b589a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b589e:	2101      	movs	r1, #1
   b58a0:	b280      	uxth	r0, r0
   b58a2:	f001 ffc0 	bl	b7826 <digitalWrite>
  TRANSACTION_START
   b58a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b58a8:	2800      	cmp	r0, #0
   b58aa:	d074      	beq.n	b5996 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b58ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b58ae:	f001 fa9f 	bl	b6df0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b58b2:	2204      	movs	r2, #4
   b58b4:	4957      	ldr	r1, [pc, #348]	; (b5a14 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b58b6:	4620      	mov	r0, r4
   b58b8:	f7ff ff11 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b58bc:	8961      	ldrh	r1, [r4, #10]
   b58be:	3901      	subs	r1, #1
   b58c0:	b2c9      	uxtb	r1, r1
   b58c2:	4620      	mov	r0, r4
   b58c4:	f7ff fe9c 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b58c8:	4953      	ldr	r1, [pc, #332]	; (b5a18 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b58ca:	2204      	movs	r2, #4
   b58cc:	4620      	mov	r0, r4
   b58ce:	f7ff ff06 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b58d2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b58d6:	2b01      	cmp	r3, #1
   b58d8:	bf0c      	ite	eq
   b58da:	2110      	moveq	r1, #16
   b58dc:	2114      	movne	r1, #20
   b58de:	4620      	mov	r0, r4
   b58e0:	f7ff fe8e 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b58e4:	2204      	movs	r2, #4
   b58e6:	494d      	ldr	r1, [pc, #308]	; (b5a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b58e8:	4620      	mov	r0, r4
   b58ea:	f7ff fef8 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if ((WIDTH == 128) && (HEIGHT == 32))
   b58ee:	68a3      	ldr	r3, [r4, #8]
   b58f0:	4a4b      	ldr	r2, [pc, #300]	; (b5a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b58f2:	4293      	cmp	r3, r2
   b58f4:	d15c      	bne.n	b59b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b58f6:	494b      	ldr	r1, [pc, #300]	; (b5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b58f8:	2204      	movs	r2, #4
   b58fa:	4620      	mov	r0, r4
   b58fc:	f7ff feef 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5900:	21d9      	movs	r1, #217	; 0xd9
   b5902:	4620      	mov	r0, r4
   b5904:	f7ff fe7c 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5908:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b590c:	2b01      	cmp	r3, #1
   b590e:	bf0c      	ite	eq
   b5910:	2122      	moveq	r1, #34	; 0x22
   b5912:	21f1      	movne	r1, #241	; 0xf1
   b5914:	4620      	mov	r0, r4
   b5916:	f7ff fe73 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b591a:	4620      	mov	r0, r4
   b591c:	4942      	ldr	r1, [pc, #264]	; (b5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b591e:	2206      	movs	r2, #6
   b5920:	f7ff fedd 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5924:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5926:	2800      	cmp	r0, #0
   b5928:	d063      	beq.n	b59f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b592a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b592c:	f001 fa60 	bl	b6df0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5930:	2001      	movs	r0, #1
   b5932:	e773      	b.n	b581c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5934:	b26d      	sxtb	r5, r5
   b5936:	e78e      	b.n	b5856 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5938:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b593c:	2101      	movs	r1, #1
   b593e:	b280      	uxth	r0, r0
   b5940:	f001 ff60 	bl	b7804 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5944:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5948:	2101      	movs	r1, #1
   b594a:	b280      	uxth	r0, r0
   b594c:	f001 ff5a 	bl	b7804 <pinMode>
    SSD1306_DESELECT
   b5950:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5954:	2101      	movs	r1, #1
   b5956:	b280      	uxth	r0, r0
   b5958:	f001 ff65 	bl	b7826 <digitalWrite>
    if (spi)
   b595c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b595e:	b13d      	cbz	r5, b5970 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if (periphBegin)
   b5960:	f1b8 0f00 	cmp.w	r8, #0
   b5964:	f43f af7e 	beq.w	b5864 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
        spi->begin();
   b5968:	4628      	mov	r0, r5
   b596a:	f001 fc35 	bl	b71d8 <_ZN8SPIClass5beginEv>
   b596e:	e779      	b.n	b5864 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5970:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5974:	2101      	movs	r1, #1
   b5976:	b280      	uxth	r0, r0
   b5978:	f001 ff44 	bl	b7804 <pinMode>
      pinMode(clkPin, OUTPUT);
   b597c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5980:	2101      	movs	r1, #1
   b5982:	b280      	uxth	r0, r0
   b5984:	f001 ff3e 	bl	b7804 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5988:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b598c:	4629      	mov	r1, r5
   b598e:	b280      	uxth	r0, r0
   b5990:	f001 ff49 	bl	b7826 <digitalWrite>
   b5994:	e766      	b.n	b5864 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b5996:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5998:	b118      	cbz	r0, b59a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b599a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b599e:	f001 fc49 	bl	b7234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b59a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59a6:	2100      	movs	r1, #0
   b59a8:	b280      	uxth	r0, r0
   b59aa:	f001 ff3c 	bl	b7826 <digitalWrite>
   b59ae:	e780      	b.n	b58b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  else if ((WIDTH == 128) && (HEIGHT == 64))
   b59b0:	4a1e      	ldr	r2, [pc, #120]	; (b5a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b59b2:	4293      	cmp	r3, r2
   b59b4:	d10e      	bne.n	b59d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b59b6:	491e      	ldr	r1, [pc, #120]	; (b5a30 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b59b8:	2203      	movs	r2, #3
   b59ba:	4620      	mov	r0, r4
   b59bc:	f7ff fe8f 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b59c0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b59c4:	2b01      	cmp	r3, #1
   b59c6:	bf0c      	ite	eq
   b59c8:	219f      	moveq	r1, #159	; 0x9f
   b59ca:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7ff fe17 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b59d2:	e795      	b.n	b5900 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  else if ((WIDTH == 96) && (HEIGHT == 16))
   b59d4:	4a17      	ldr	r2, [pc, #92]	; (b5a34 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b59d6:	4293      	cmp	r3, r2
   b59d8:	d192      	bne.n	b5900 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b59da:	4917      	ldr	r1, [pc, #92]	; (b5a38 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b59dc:	2203      	movs	r2, #3
   b59de:	4620      	mov	r0, r4
   b59e0:	f7ff fe7d 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b59e4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b59e8:	2b01      	cmp	r3, #1
   b59ea:	bf0c      	ite	eq
   b59ec:	2110      	moveq	r1, #16
   b59ee:	21af      	movne	r1, #175	; 0xaf
   b59f0:	e7ec      	b.n	b59cc <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b59f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59f6:	2101      	movs	r1, #1
   b59f8:	b280      	uxth	r0, r0
   b59fa:	f001 ff14 	bl	b7826 <digitalWrite>
   b59fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a00:	2800      	cmp	r0, #0
   b5a02:	d095      	beq.n	b5930 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5a04:	f001 fbfc 	bl	b7200 <_ZN8SPIClass14endTransactionEv>
   b5a08:	e792      	b.n	b5930 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5a0a:	bf00      	nop
   b5a0c:	000b84ac 	.word	0x000b84ac
   b5a10:	000b868c 	.word	0x000b868c
   b5a14:	000b8af4 	.word	0x000b8af4
   b5a18:	000b8af8 	.word	0x000b8af8
   b5a1c:	000b8afc 	.word	0x000b8afc
   b5a20:	00200080 	.word	0x00200080
   b5a24:	000b8b06 	.word	0x000b8b06
   b5a28:	000b8b00 	.word	0x000b8b00
   b5a2c:	00400080 	.word	0x00400080
   b5a30:	000b8b0a 	.word	0x000b8b0a
   b5a34:	00100060 	.word	0x00100060
   b5a38:	000b8b0d 	.word	0x000b8b0d

000b5a3c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
{
   b5a3c:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT))
   b5a3e:	2a00      	cmp	r2, #0
{
   b5a40:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT))
   b5a44:	db3d      	blt.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5a46:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5a4a:	4294      	cmp	r4, r2
   b5a4c:	dd39      	ble.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0)
   b5a4e:	2900      	cmp	r1, #0
      w += x;
   b5a50:	bfbe      	ittt	lt
   b5a52:	185b      	addlt	r3, r3, r1
   b5a54:	b21b      	sxthlt	r3, r3
      x = 0;
   b5a56:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH)
   b5a58:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5a5c:	18ce      	adds	r6, r1, r3
   b5a5e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5a60:	bfc4      	itt	gt
   b5a62:	1a63      	subgt	r3, r4, r1
   b5a64:	b21b      	sxthgt	r3, r3
    if (w > 0)
   b5a66:	2b00      	cmp	r3, #0
   b5a68:	dd2b      	ble.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5a6a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5a6c:	10d6      	asrs	r6, r2, #3
   b5a6e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5a72:	4401      	add	r1, r0
              mask = 1 << (y & 7);
   b5a74:	f002 0007 	and.w	r0, r2, #7
   b5a78:	2201      	movs	r2, #1
   b5a7a:	4082      	lsls	r2, r0
      switch (color)
   b5a7c:	2d01      	cmp	r5, #1
              mask = 1 << (y & 7);
   b5a7e:	b2d2      	uxtb	r2, r2
      switch (color)
   b5a80:	d016      	beq.n	b5ab0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5a82:	2d02      	cmp	r5, #2
   b5a84:	d00b      	beq.n	b5a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5a86:	b9e5      	cbnz	r5, b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   b5a88:	43d2      	mvns	r2, r2
   b5a8a:	b2d2      	uxtb	r2, r2
   b5a8c:	440b      	add	r3, r1
        while (w--)
   b5a8e:	4299      	cmp	r1, r3
   b5a90:	d017      	beq.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   b5a92:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a96:	4010      	ands	r0, r2
   b5a98:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5a9c:	e7f7      	b.n	b5a8e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5a9e:	440b      	add	r3, r1
        while (w--)
   b5aa0:	4299      	cmp	r1, r3
   b5aa2:	d00e      	beq.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   b5aa4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5aa8:	4050      	eors	r0, r2
   b5aaa:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5aae:	e7f7      	b.n	b5aa0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5ab0:	440b      	add	r3, r1
        while (w--)
   b5ab2:	4299      	cmp	r1, r3
   b5ab4:	d005      	beq.n	b5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   b5ab6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5aba:	4310      	orrs	r0, r2
   b5abc:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5ac0:	e7f7      	b.n	b5ab2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5ac2:	bd70      	pop	{r4, r5, r6, pc}

000b5ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
{
   b5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH))
   b5ac6:	2900      	cmp	r1, #0
{
   b5ac8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH))
   b5acc:	db76      	blt.n	b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5ace:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5ad2:	42b1      	cmp	r1, r6
   b5ad4:	da72      	bge.n	b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0)
   b5ad6:	2a00      	cmp	r2, #0
      __h += __y;
   b5ad8:	bfbe      	ittt	lt
   b5ada:	189b      	addlt	r3, r3, r2
   b5adc:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5ade:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT)
   b5ae0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5ae4:	18d7      	adds	r7, r2, r3
   b5ae6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5ae8:	bfc4      	itt	gt
   b5aea:	1aa3      	subgt	r3, r4, r2
   b5aec:	b21b      	sxthgt	r3, r3
    if (__h > 0)
   b5aee:	2b00      	cmp	r3, #0
   b5af0:	dd64      	ble.n	b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5af2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5af6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5af8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod)
   b5afc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   b5b00:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b02:	eb07 0406 	add.w	r4, r7, r6
      if (mod)
   b5b06:	d023      	beq.n	b5b50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5b08:	f1c2 0208 	rsb	r2, r2, #8
   b5b0c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b0e:	492d      	ldr	r1, [pc, #180]	; (b5bc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   b5b10:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   b5b12:	bf3c      	itt	cc
   b5b14:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5b18:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b1c:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   b5b1e:	bf3c      	itt	cc
   b5b20:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5b24:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color)
   b5b28:	2d01      	cmp	r5, #1
   b5b2a:	d007      	beq.n	b5b3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5b2c:	2d02      	cmp	r5, #2
   b5b2e:	d02e      	beq.n	b5b8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5b30:	b94d      	cbnz	r5, b5b46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   b5b32:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b36:	ea2c 0101 	bic.w	r1, ip, r1
   b5b3a:	e003      	b.n	b5b44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   b5b3c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b40:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   b5b44:	55b9      	strb	r1, [r7, r6]
      if (h >= mod)
   b5b46:	4293      	cmp	r3, r2
   b5b48:	d338      	bcc.n	b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5b4a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5b4e:	440c      	add	r4, r1
        h -= mod;
   b5b50:	1a9a      	subs	r2, r3, r2
   b5b52:	b2d2      	uxtb	r2, r2
        if (h >= 8)
   b5b54:	2a07      	cmp	r2, #7
   b5b56:	d90e      	bls.n	b5b76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == INVERSE)
   b5b58:	2d02      	cmp	r5, #2
   b5b5a:	d11d      	bne.n	b5b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5b5c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   b5b5e:	7821      	ldrb	r1, [r4, #0]
   b5b60:	43c9      	mvns	r1, r1
   b5b62:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5b64:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5b66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5b6a:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5b6c:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5b6e:	440c      	add	r4, r1
            } while (h >= 8);
   b5b70:	d8f5      	bhi.n	b5b5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   b5b72:	f002 0207 	and.w	r2, r2, #7
        if (h)
   b5b76:	b30a      	cbz	r2, b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5b78:	4b13      	ldr	r3, [pc, #76]	; (b5bc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color)
   b5b7a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5b7c:	5c9b      	ldrb	r3, [r3, r2]
          switch (color)
   b5b7e:	d01a      	beq.n	b5bb6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5b80:	2d02      	cmp	r5, #2
   b5b82:	d01c      	beq.n	b5bbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5b84:	b9d5      	cbnz	r5, b5bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   b5b86:	7822      	ldrb	r2, [r4, #0]
   b5b88:	ea22 0303 	bic.w	r3, r2, r3
   b5b8c:	e015      	b.n	b5bba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   b5b8e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b92:	ea81 010c 	eor.w	r1, r1, ip
   b5b96:	e7d5      	b.n	b5b44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5b98:	1e29      	subs	r1, r5, #0
   b5b9a:	bf18      	it	ne
   b5b9c:	2101      	movne	r1, #1
   b5b9e:	4249      	negs	r1, r1
   b5ba0:	b2c9      	uxtb	r1, r1
   b5ba2:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   b5ba4:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5ba6:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5ba8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5bac:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5bae:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5bb0:	4434      	add	r4, r6
            } while (h >= 8);
   b5bb2:	d8f7      	bhi.n	b5ba4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5bb4:	e7dd      	b.n	b5b72 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   b5bb6:	7822      	ldrb	r2, [r4, #0]
   b5bb8:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   b5bba:	7023      	strb	r3, [r4, #0]
}
   b5bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   b5bbe:	7822      	ldrb	r2, [r4, #0]
   b5bc0:	4053      	eors	r3, r2
   b5bc2:	e7fa      	b.n	b5bba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5bc4:	000b8ae4 	.word	0x000b8ae4
   b5bc8:	000b8aec 	.word	0x000b8aec

000b5bcc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
{
   b5bcc:	b470      	push	{r4, r5, r6}
   b5bce:	4614      	mov	r4, r2
  switch (rotation)
   b5bd0:	7e82      	ldrb	r2, [r0, #26]
{
   b5bd2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation)
   b5bd6:	2a02      	cmp	r2, #2
   b5bd8:	d00d      	beq.n	b5bf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5bda:	2a03      	cmp	r2, #3
   b5bdc:	d018      	beq.n	b5c10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5bde:	2a01      	cmp	r2, #1
   b5be0:	d111      	bne.n	b5c06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5be2:	8902      	ldrh	r2, [r0, #8]
   b5be4:	43e4      	mvns	r4, r4
   b5be6:	4414      	add	r4, r2
   b5be8:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   b5bea:	9603      	str	r6, [sp, #12]
   b5bec:	460a      	mov	r2, r1
   b5bee:	4621      	mov	r1, r4
}
   b5bf0:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   b5bf2:	f7ff bf67 	b.w	b5ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5bf6:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   b5bf8:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   b5bfa:	43e4      	mvns	r4, r4
    x -= (w - 1);
   b5bfc:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   b5bfe:	4414      	add	r4, r2
    x -= (w - 1);
   b5c00:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   b5c02:	b224      	sxth	r4, r4
    x -= (w - 1);
   b5c04:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   b5c06:	9603      	str	r6, [sp, #12]
   b5c08:	4622      	mov	r2, r4
}
   b5c0a:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   b5c0c:	f7ff bf16 	b.w	b5a3c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   b5c10:	8945      	ldrh	r5, [r0, #10]
   b5c12:	4419      	add	r1, r3
   b5c14:	1a69      	subs	r1, r5, r1
   b5c16:	b209      	sxth	r1, r1
    break;
   b5c18:	e7e7      	b.n	b5bea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5c1a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
   b5c1a:	b430      	push	{r4, r5}
   b5c1c:	4614      	mov	r4, r2
  switch (rotation)
   b5c1e:	7e82      	ldrb	r2, [r0, #26]
{
   b5c20:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation)
   b5c24:	2a02      	cmp	r2, #2
   b5c26:	d00d      	beq.n	b5c44 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5c28:	2a03      	cmp	r2, #3
   b5c2a:	d018      	beq.n	b5c5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5c2c:	2a01      	cmp	r2, #1
   b5c2e:	d111      	bne.n	b5c54 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   b5c30:	18e2      	adds	r2, r4, r3
   b5c32:	8904      	ldrh	r4, [r0, #8]
   b5c34:	1aa4      	subs	r4, r4, r2
   b5c36:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   b5c38:	9502      	str	r5, [sp, #8]
   b5c3a:	460a      	mov	r2, r1
   b5c3c:	4621      	mov	r1, r4
}
   b5c3e:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   b5c40:	f7ff befc 	b.w	b5a3c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   b5c44:	8902      	ldrh	r2, [r0, #8]
   b5c46:	43c9      	mvns	r1, r1
   b5c48:	4411      	add	r1, r2
    y -= (h - 1);
   b5c4a:	18e2      	adds	r2, r4, r3
   b5c4c:	8944      	ldrh	r4, [r0, #10]
   b5c4e:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   b5c50:	b209      	sxth	r1, r1
    y -= (h - 1);
   b5c52:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   b5c54:	9502      	str	r5, [sp, #8]
   b5c56:	4622      	mov	r2, r4
}
   b5c58:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   b5c5a:	f7ff bf33 	b.w	b5ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5c5e:	8942      	ldrh	r2, [r0, #10]
   b5c60:	43c9      	mvns	r1, r1
   b5c62:	4411      	add	r1, r2
   b5c64:	b209      	sxth	r1, r1
    break;
   b5c66:	e7e7      	b.n	b5c38 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5c68 <_ZN16Adafruit_SSD13067displayEv>:
{
   b5c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5c6c:	4604      	mov	r4, r0
  TRANSACTION_START
   b5c6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5c70:	2800      	cmp	r0, #0
   b5c72:	d042      	beq.n	b5cfa <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5c74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5c76:	f001 f8bb 	bl	b6df0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5c7a:	4947      	ldr	r1, [pc, #284]	; (b5d98 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5c7c:	2205      	movs	r2, #5
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f7ff fd2d 	bl	b56de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5c84:	8921      	ldrh	r1, [r4, #8]
   b5c86:	3901      	subs	r1, #1
   b5c88:	4620      	mov	r0, r4
   b5c8a:	b2c9      	uxtb	r1, r1
   b5c8c:	f7ff fcb8 	bl	b5600 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5c90:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5c94:	1dde      	adds	r6, r3, #7
   b5c96:	bf48      	it	mi
   b5c98:	f103 060e 	addmi.w	r6, r3, #14
  if (wire)
   b5c9c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5ca0:	8923      	ldrh	r3, [r4, #8]
   b5ca2:	10f6      	asrs	r6, r6, #3
   b5ca4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
   b5ca8:	fa15 f686 	uxtah	r6, r5, r6
  if (wire)
   b5cac:	2800      	cmp	r0, #0
   b5cae:	d03a      	beq.n	b5d26 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5cb0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5cb4:	f001 f8aa 	bl	b6e0c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5cb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cba:	6803      	ldr	r3, [r0, #0]
   b5cbc:	2140      	movs	r1, #64	; 0x40
   b5cbe:	689b      	ldr	r3, [r3, #8]
   b5cc0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5cc2:	2701      	movs	r7, #1
    while (count--)
   b5cc4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5cc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--)
   b5cc8:	d024      	beq.n	b5d14 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if (bytesOut >= WIRE_MAX)
   b5cca:	2f1f      	cmp	r7, #31
   b5ccc:	d90c      	bls.n	b5ce8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5cce:	f001 f8a4 	bl	b6e1a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5cd2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cd8:	f001 f898 	bl	b6e0c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5cdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cde:	6803      	ldr	r3, [r0, #0]
   b5ce0:	2140      	movs	r1, #64	; 0x40
   b5ce2:	689b      	ldr	r3, [r3, #8]
   b5ce4:	4798      	blx	r3
        bytesOut = 1;
   b5ce6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5ce8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5cea:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5cee:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5cf0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5cf2:	689b      	ldr	r3, [r3, #8]
   b5cf4:	4798      	blx	r3
      bytesOut++;
   b5cf6:	b2ff      	uxtb	r7, r7
    while (count--)
   b5cf8:	e7e4      	b.n	b5cc4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5cfc:	b118      	cbz	r0, b5d06 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5cfe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d02:	f001 fa97 	bl	b7234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d06:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d0a:	2100      	movs	r1, #0
   b5d0c:	b280      	uxth	r0, r0
   b5d0e:	f001 fd8a 	bl	b7826 <digitalWrite>
   b5d12:	e7b2      	b.n	b5c7a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5d14:	f001 f881 	bl	b6e1a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5d18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d1a:	b378      	cbz	r0, b5d7c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5d1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5d1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d22:	f001 b865 	b.w	b6df0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5d26:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5d2a:	2101      	movs	r1, #1
   b5d2c:	b280      	uxth	r0, r0
   b5d2e:	f001 fd7a 	bl	b7826 <digitalWrite>
    while (count--)
   b5d32:	42ae      	cmp	r6, r5
   b5d34:	d0f0      	beq.n	b5d18 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if (spi)
   b5d36:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
   b5d38:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5d3c:	b118      	cbz	r0, b5d46 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5d3e:	4649      	mov	r1, r9
   b5d40:	f001 fae6 	bl	b7310 <_ZN8SPIClass8transferEh>
   b5d44:	e7f5      	b.n	b5d32 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5d46:	2708      	movs	r7, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5d48:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5d4c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5d50:	ea09 0108 	and.w	r1, r9, r8
   b5d54:	b280      	uxth	r0, r0
   b5d56:	f001 fd66 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5d5a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d5e:	2101      	movs	r1, #1
   b5d60:	b280      	uxth	r0, r0
   b5d62:	f001 fd60 	bl	b7826 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5d66:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	b280      	uxth	r0, r0
   b5d6e:	f001 fd5a 	bl	b7826 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5d72:	3f01      	subs	r7, #1
   b5d74:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5d78:	d1e8      	bne.n	b5d4c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5d7a:	e7da      	b.n	b5d32 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5d7c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d80:	2101      	movs	r1, #1
   b5d82:	b280      	uxth	r0, r0
   b5d84:	f001 fd4f 	bl	b7826 <digitalWrite>
   b5d88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d8a:	b118      	cbz	r0, b5d94 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5d8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5d90:	f001 ba36 	b.w	b7200 <_ZN8SPIClass14endTransactionEv>
}
   b5d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5d98:	000b8b10 	.word	0x000b8b10

000b5d9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b5d9c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5d9e:	4c0b      	ldr	r4, [pc, #44]	; (b5dcc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5da0:	7821      	ldrb	r1, [r4, #0]
   b5da2:	f3bf 8f5b 	dmb	ish
   b5da6:	f011 0101 	ands.w	r1, r1, #1
   b5daa:	d10b      	bne.n	b5dc4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5dac:	4620      	mov	r0, r4
   b5dae:	9101      	str	r1, [sp, #4]
   b5db0:	f7fe f97e 	bl	b40b0 <__cxa_guard_acquire>
   b5db4:	9901      	ldr	r1, [sp, #4]
   b5db6:	b128      	cbz	r0, b5dc4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5db8:	4805      	ldr	r0, [pc, #20]	; (b5dd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5dba:	f001 fa03 	bl	b71c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f7fe f97b 	bl	b40ba <__cxa_guard_release>
    }
   b5dc4:	4802      	ldr	r0, [pc, #8]	; (b5dd0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5dc6:	b002      	add	sp, #8
   b5dc8:	bd10      	pop	{r4, pc}
   b5dca:	bf00      	nop
   b5dcc:	2003e5dc 	.word	0x2003e5dc
   b5dd0:	2003e5e0 	.word	0x2003e5e0

000b5dd4 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b5dd4:	b510      	push	{r4, lr}
   b5dd6:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b5dd8:	7001      	strb	r1, [r0, #0]
   b5dda:	7042      	strb	r2, [r0, #1]
   b5ddc:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b5dde:	2101      	movs	r1, #1
   b5de0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b5de4:	f001 fde6 	bl	b79b4 <calloc>
   b5de8:	6060      	str	r0, [r4, #4]
}
   b5dea:	4620      	mov	r0, r4
   b5dec:	bd10      	pop	{r4, pc}

000b5dee <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b5dee:	b510      	push	{r4, lr}
   b5df0:	4604      	mov	r4, r0
{
    free(_led_state);
   b5df2:	6840      	ldr	r0, [r0, #4]
   b5df4:	f000 ff22 	bl	b6c3c <free>
}
   b5df8:	4620      	mov	r0, r4
   b5dfa:	bd10      	pop	{r4, pc}

000b5dfc <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b5dfc:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b5dfe:	2100      	movs	r1, #0
{
   b5e00:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b5e02:	7800      	ldrb	r0, [r0, #0]
   b5e04:	f001 fd0f 	bl	b7826 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5e08:	2014      	movs	r0, #20
   b5e0a:	f000 fd0b 	bl	b6824 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b5e0e:	7820      	ldrb	r0, [r4, #0]
   b5e10:	2101      	movs	r1, #1
   b5e12:	f001 fd08 	bl	b7826 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b5e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5e1a:	2014      	movs	r0, #20
   b5e1c:	f000 bd02 	b.w	b6824 <HAL_Delay_Microseconds>

000b5e20 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b5e20:	b570      	push	{r4, r5, r6, lr}
   b5e22:	4606      	mov	r6, r0
   b5e24:	460c      	mov	r4, r1
   b5e26:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b5e28:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b5e2a:	bf4c      	ite	mi
   b5e2c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b5e2e:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b5e30:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b5e32:	f001 fcf8 	bl	b7826 <digitalWrite>
    for (byte i=0; i<8; i++)
   b5e36:	3d01      	subs	r5, #1
        clk();
   b5e38:	4630      	mov	r0, r6
   b5e3a:	f7ff ffdf 	bl	b5dfc <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b5e3e:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b5e40:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b5e44:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b5e46:	d1ef      	bne.n	b5e28 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b5e48:	bd70      	pop	{r4, r5, r6, pc}

000b5e4a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b5e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b5e4c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b5e50:	461e      	mov	r6, r3
   b5e52:	460c      	mov	r4, r1
   b5e54:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b5e56:	bf14      	ite	ne
   b5e58:	21c0      	movne	r1, #192	; 0xc0
   b5e5a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b5e5c:	0673      	lsls	r3, r6, #25
   b5e5e:	bf58      	it	pl
   b5e60:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b5e64:	062a      	lsls	r2, r5, #24
   b5e66:	bf58      	it	pl
   b5e68:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b5e6c:	066b      	lsls	r3, r5, #25
   b5e6e:	bf58      	it	pl
   b5e70:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b5e74:	0622      	lsls	r2, r4, #24
   b5e76:	bf58      	it	pl
   b5e78:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b5e7c:	0663      	lsls	r3, r4, #25
   b5e7e:	bf58      	it	pl
   b5e80:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b5e84:	9001      	str	r0, [sp, #4]
   b5e86:	f7ff ffcb 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b5e8a:	9801      	ldr	r0, [sp, #4]
   b5e8c:	4631      	mov	r1, r6
   b5e8e:	f7ff ffc7 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b5e92:	9801      	ldr	r0, [sp, #4]
   b5e94:	4629      	mov	r1, r5
   b5e96:	f7ff ffc3 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b5e9a:	9801      	ldr	r0, [sp, #4]
   b5e9c:	4621      	mov	r1, r4
}
   b5e9e:	b002      	add	sp, #8
   b5ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b5ea4:	f7ff bfbc 	b.w	b5e20 <_ZN12ChainableLED8sendByteEh>

000b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b5ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5eac:	4604      	mov	r4, r0
   b5eae:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b5eb0:	2100      	movs	r1, #0
{
   b5eb2:	4690      	mov	r8, r2
   b5eb4:	4699      	mov	r9, r3
   b5eb6:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b5eba:	f7ff ffb1 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5ebe:	2100      	movs	r1, #0
   b5ec0:	4620      	mov	r0, r4
   b5ec2:	f7ff ffad 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5ec6:	2100      	movs	r1, #0
   b5ec8:	4620      	mov	r0, r4
   b5eca:	f7ff ffa9 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5ece:	2100      	movs	r1, #0
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	f7ff ffa5 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
   b5ed6:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b5ed8:	78a3      	ldrb	r3, [r4, #2]
   b5eda:	b2f5      	uxtb	r5, r6
   b5edc:	42ab      	cmp	r3, r5
   b5ede:	d919      	bls.n	b5f14 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b5ee0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b5ee4:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b5ee6:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b5eea:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b5eee:	d108      	bne.n	b5f02 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b5ef0:	6861      	ldr	r1, [r4, #4]
   b5ef2:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b5ef6:	6861      	ldr	r1, [r4, #4]
   b5ef8:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b5efc:	6861      	ldr	r1, [r4, #4]
   b5efe:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b5f02:	6861      	ldr	r1, [r4, #4]
   b5f04:	5ccb      	ldrb	r3, [r1, r3]
   b5f06:	5c8a      	ldrb	r2, [r1, r2]
   b5f08:	5c09      	ldrb	r1, [r1, r0]
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	f7ff ff9d 	bl	b5e4a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b5f10:	3601      	adds	r6, #1
   b5f12:	e7e1      	b.n	b5ed8 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b5f14:	4620      	mov	r0, r4
   b5f16:	2100      	movs	r1, #0
   b5f18:	f7ff ff82 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	2100      	movs	r1, #0
   b5f20:	f7ff ff7e 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5f24:	4620      	mov	r0, r4
   b5f26:	2100      	movs	r1, #0
   b5f28:	f7ff ff7a 	bl	b5e20 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	2100      	movs	r1, #0
}
   b5f30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b5f34:	f7ff bf74 	b.w	b5e20 <_ZN12ChainableLED8sendByteEh>

000b5f38 <_ZN12ChainableLED4initEv>:
{
   b5f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f3a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b5f3c:	2101      	movs	r1, #1
   b5f3e:	7800      	ldrb	r0, [r0, #0]
   b5f40:	f001 fc60 	bl	b7804 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b5f44:	7860      	ldrb	r0, [r4, #1]
   b5f46:	2101      	movs	r1, #1
   b5f48:	f001 fc5c 	bl	b7804 <pinMode>
   b5f4c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b5f4e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b5f50:	78a3      	ldrb	r3, [r4, #2]
   b5f52:	b2e9      	uxtb	r1, r5
   b5f54:	428b      	cmp	r3, r1
   b5f56:	d907      	bls.n	b5f68 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b5f58:	2300      	movs	r3, #0
   b5f5a:	9600      	str	r6, [sp, #0]
   b5f5c:	461a      	mov	r2, r3
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f7ff ffa2 	bl	b5ea8 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b5f64:	3501      	adds	r5, #1
   b5f66:	e7f3      	b.n	b5f50 <_ZN12ChainableLED4initEv+0x18>
}
   b5f68:	b002      	add	sp, #8
   b5f6a:	bd70      	pop	{r4, r5, r6, pc}

000b5f6c <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b5f6c:	b538      	push	{r3, r4, r5, lr}
   b5f6e:	4604      	mov	r4, r0
   b5f70:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b5f72:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b5f74:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b5f76:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b5f78:	f001 fc44 	bl	b7804 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b5f7c:	7b20      	ldrb	r0, [r4, #12]
   b5f7e:	2101      	movs	r1, #1
   b5f80:	f001 fc51 	bl	b7826 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b5f84:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b5f86:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b5f88:	2101      	movs	r1, #1
   b5f8a:	f001 fc3b 	bl	b7804 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b5f8e:	7b60      	ldrb	r0, [r4, #13]
   b5f90:	2100      	movs	r1, #0
   b5f92:	f001 fc48 	bl	b7826 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b5f96:	4620      	mov	r0, r4
   b5f98:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5f9c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b5f9c:	3901      	subs	r1, #1
   b5f9e:	b2c9      	uxtb	r1, r1
   b5fa0:	2908      	cmp	r1, #8
   b5fa2:	bf9a      	itte	ls
   b5fa4:	4b02      	ldrls	r3, [pc, #8]	; (b5fb0 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b5fa6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b5faa:	4802      	ldrhi	r0, [pc, #8]	; (b5fb4 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b5fac:	4770      	bx	lr
   b5fae:	bf00      	nop
   b5fb0:	000b8c0c 	.word	0x000b8c0c
   b5fb4:	000b8b15 	.word	0x000b8b15

000b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b5fb8:	b507      	push	{r0, r1, r2, lr}
   b5fba:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b5fbc:	f7ff feee 	bl	b5d9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5fc0:	9901      	ldr	r1, [sp, #4]
    }
   b5fc2:	b003      	add	sp, #12
   b5fc4:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b5fc8:	f001 b9a2 	b.w	b7310 <_ZN8SPIClass8transferEh>

000b5fcc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b5fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fd0:	4607      	mov	r7, r0
   b5fd2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b5fd6:	461e      	mov	r6, r3
	if (count == 0) {
   b5fd8:	4615      	mov	r5, r2
   b5fda:	2a00      	cmp	r2, #0
   b5fdc:	d042      	beq.n	b6064 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5fde:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5fe2:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5fe4:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5fe8:	2100      	movs	r1, #0
   b5fea:	f001 fc1c 	bl	b7826 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b5fee:	4648      	mov	r0, r9
   b5ff0:	f7ff ffe2 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b5ff4:	3d01      	subs	r5, #1
   b5ff6:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b5ff8:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b5ffc:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6000:	fa5f f48b 	uxtb.w	r4, fp
   b6004:	42a5      	cmp	r5, r4
   b6006:	d922      	bls.n	b604e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6008:	b9dc      	cbnz	r4, b6042 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b600a:	f1b8 0f00 	cmp.w	r8, #0
   b600e:	d018      	beq.n	b6042 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6010:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6012:	b2d3      	uxtb	r3, r2
   b6014:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6016:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6018:	d805      	bhi.n	b6026 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b601a:	fa0a f402 	lsl.w	r4, sl, r2
   b601e:	430c      	orrs	r4, r1
   b6020:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6022:	3201      	adds	r2, #1
   b6024:	e7f5      	b.n	b6012 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6026:	4648      	mov	r0, r9
   b6028:	9101      	str	r1, [sp, #4]
   b602a:	f7ff ffc5 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b602e:	7833      	ldrb	r3, [r6, #0]
   b6030:	9901      	ldr	r1, [sp, #4]
   b6032:	4004      	ands	r4, r0
   b6034:	ea23 0301 	bic.w	r3, r3, r1
   b6038:	431c      	orrs	r4, r3
   b603a:	7034      	strb	r4, [r6, #0]
		index++;
   b603c:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b6040:	e7de      	b.n	b6000 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b6042:	4648      	mov	r0, r9
   b6044:	f7ff ffb8 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6048:	f806 000b 	strb.w	r0, [r6, fp]
   b604c:	e7f6      	b.n	b603c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b604e:	2000      	movs	r0, #0
   b6050:	f7ff ffb2 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6054:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6056:	7b38      	ldrb	r0, [r7, #12]
   b6058:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b605a:	b003      	add	sp, #12
   b605c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6060:	f001 bbe1 	b.w	b7826 <digitalWrite>
} // End PCD_ReadRegister()
   b6064:	b003      	add	sp, #12
   b6066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b606a <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b606a:	b538      	push	{r3, r4, r5, lr}
   b606c:	460c      	mov	r4, r1
   b606e:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6070:	2100      	movs	r1, #0
   b6072:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6074:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6078:	f001 fbd5 	bl	b7826 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b607c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b6080:	f7ff ff9a 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6084:	2000      	movs	r0, #0
   b6086:	f7ff ff97 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b608a:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b608c:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b608e:	7b28      	ldrb	r0, [r5, #12]
   b6090:	f001 fbc9 	bl	b7826 <digitalWrite>
} // End PCD_ReadRegister()
   b6094:	4620      	mov	r0, r4
   b6096:	bd38      	pop	{r3, r4, r5, pc}

000b6098 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b6098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b609a:	460f      	mov	r7, r1
   b609c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b609e:	2100      	movs	r1, #0
   b60a0:	7b00      	ldrb	r0, [r0, #12]
								) {
   b60a2:	4615      	mov	r5, r2
   b60a4:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b60a6:	f001 fbbe 	bl	b7826 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b60aa:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b60ae:	f7ff ff83 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b60b2:	4425      	add	r5, r4
   b60b4:	42ac      	cmp	r4, r5
   b60b6:	d004      	beq.n	b60c2 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b60b8:	f814 0b01 	ldrb.w	r0, [r4], #1
   b60bc:	f7ff ff7c 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b60c0:	e7f8      	b.n	b60b4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b60c2:	7b30      	ldrb	r0, [r6, #12]
   b60c4:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b60c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b60ca:	f001 bbac 	b.w	b7826 <digitalWrite>

000b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b60ce:	b570      	push	{r4, r5, r6, lr}
   b60d0:	4604      	mov	r4, r0
   b60d2:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b60d4:	7b00      	ldrb	r0, [r0, #12]
   b60d6:	2100      	movs	r1, #0
								) {
   b60d8:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b60da:	f001 fba4 	bl	b7826 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b60de:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b60e2:	f7ff ff69 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b60e6:	4628      	mov	r0, r5
   b60e8:	f7ff ff66 	bl	b5fb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b60ec:	7b20      	ldrb	r0, [r4, #12]
   b60ee:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b60f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b60f4:	f001 bb97 	b.w	b7826 <digitalWrite>

000b60f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b60f8:	b570      	push	{r4, r5, r6, lr}
   b60fa:	4616      	mov	r6, r2
   b60fc:	4604      	mov	r4, r0
   b60fe:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6100:	f7ff ffb3 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6104:	4330      	orrs	r0, r6
   b6106:	b2c2      	uxtb	r2, r0
   b6108:	4629      	mov	r1, r5
   b610a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b610c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6110:	f7ff bfdd 	b.w	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6114 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6114:	b570      	push	{r4, r5, r6, lr}
   b6116:	4616      	mov	r6, r2
   b6118:	4604      	mov	r4, r0
   b611a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b611c:	f7ff ffa5 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6120:	ea20 0006 	bic.w	r0, r0, r6
   b6124:	b2c2      	uxtb	r2, r0
   b6126:	4629      	mov	r1, r5
   b6128:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b612e:	f7ff bfce 	b.w	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6132 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b6132:	2208      	movs	r2, #8
   b6134:	2110      	movs	r1, #16
   b6136:	f7ff bfed 	b.w	b6114 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b613c:	4604      	mov	r4, r0
   b613e:	4615      	mov	r5, r2
   b6140:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6142:	2200      	movs	r2, #0
   b6144:	2102      	movs	r1, #2
					 ) {
   b6146:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6148:	f7ff ffc1 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b614c:	2204      	movs	r2, #4
   b614e:	210a      	movs	r1, #10
   b6150:	4620      	mov	r0, r4
   b6152:	f7ff ffbc 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6156:	2280      	movs	r2, #128	; 0x80
   b6158:	2114      	movs	r1, #20
   b615a:	4620      	mov	r0, r4
   b615c:	f7ff ffcc 	bl	b60f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b6160:	462a      	mov	r2, r5
   b6162:	463b      	mov	r3, r7
   b6164:	2112      	movs	r1, #18
   b6166:	4620      	mov	r0, r4
   b6168:	f7ff ff96 	bl	b6098 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b616c:	2203      	movs	r2, #3
   b616e:	2102      	movs	r1, #2
   b6170:	4620      	mov	r0, r4
   b6172:	f7ff ffac 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b6176:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b617a:	210a      	movs	r1, #10
   b617c:	4620      	mov	r0, r4
   b617e:	f7ff ff74 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b6182:	0743      	lsls	r3, r0, #29
   b6184:	d405      	bmi.n	b6192 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b6186:	3d01      	subs	r5, #1
   b6188:	b2ad      	uxth	r5, r5
   b618a:	2d00      	cmp	r5, #0
   b618c:	d1f5      	bne.n	b617a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b618e:	2004      	movs	r0, #4
   b6190:	e00f      	b.n	b61b2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b6192:	2200      	movs	r2, #0
   b6194:	2102      	movs	r1, #2
   b6196:	4620      	mov	r0, r4
   b6198:	f7ff ff99 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b619c:	2144      	movs	r1, #68	; 0x44
   b619e:	4620      	mov	r0, r4
   b61a0:	f7ff ff63 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b61a4:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b61a6:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b61a8:	4620      	mov	r0, r4
   b61aa:	f7ff ff5e 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b61ae:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b61b0:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b61b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61b4 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b61b4:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b61b6:	220f      	movs	r2, #15
   b61b8:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b61ba:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b61bc:	f7ff ff87 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b61c0:	2032      	movs	r0, #50	; 0x32
   b61c2:	f000 fd73 	bl	b6cac <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b61c6:	2102      	movs	r1, #2
   b61c8:	4620      	mov	r0, r4
   b61ca:	f7ff ff4e 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b61ce:	06c3      	lsls	r3, r0, #27
   b61d0:	d4f9      	bmi.n	b61c6 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b61d2:	bd10      	pop	{r4, pc}

000b61d4 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b61d4:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b61d6:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b61d8:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b61da:	f7ff ff46 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b61de:	f000 0303 	and.w	r3, r0, #3
   b61e2:	2b03      	cmp	r3, #3
   b61e4:	d008      	beq.n	b61f8 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b61e6:	f040 0203 	orr.w	r2, r0, #3
   b61ea:	b2d2      	uxtb	r2, r2
   b61ec:	4620      	mov	r0, r4
   b61ee:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b61f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b61f4:	f7ff bf6b 	b.w	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b61f8:	bd10      	pop	{r4, pc}

000b61fa <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b61fa:	b510      	push	{r4, lr}
   b61fc:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b61fe:	7b40      	ldrb	r0, [r0, #13]
   b6200:	f001 fb2a 	bl	b7858 <digitalRead>
   b6204:	bb48      	cbnz	r0, b625a <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b6206:	7b60      	ldrb	r0, [r4, #13]
   b6208:	2101      	movs	r1, #1
   b620a:	f001 fb0c 	bl	b7826 <digitalWrite>
		delay(50);
   b620e:	2032      	movs	r0, #50	; 0x32
   b6210:	f000 fd4c 	bl	b6cac <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6214:	4620      	mov	r0, r4
   b6216:	2280      	movs	r2, #128	; 0x80
   b6218:	2154      	movs	r1, #84	; 0x54
   b621a:	f7ff ff58 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b621e:	4620      	mov	r0, r4
   b6220:	22a9      	movs	r2, #169	; 0xa9
   b6222:	2156      	movs	r1, #86	; 0x56
   b6224:	f7ff ff53 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6228:	4620      	mov	r0, r4
   b622a:	2203      	movs	r2, #3
   b622c:	2158      	movs	r1, #88	; 0x58
   b622e:	f7ff ff4e 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b6232:	4620      	mov	r0, r4
   b6234:	22e8      	movs	r2, #232	; 0xe8
   b6236:	215a      	movs	r1, #90	; 0x5a
   b6238:	f7ff ff49 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b623c:	4620      	mov	r0, r4
   b623e:	2240      	movs	r2, #64	; 0x40
   b6240:	212a      	movs	r1, #42	; 0x2a
   b6242:	f7ff ff44 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b6246:	4620      	mov	r0, r4
   b6248:	223d      	movs	r2, #61	; 0x3d
   b624a:	2122      	movs	r1, #34	; 0x22
   b624c:	f7ff ff3f 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6250:	4620      	mov	r0, r4
} // End PCD_Init()
   b6252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6256:	f7ff bfbd 	b.w	b61d4 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b625a:	4620      	mov	r0, r4
   b625c:	f7ff ffaa 	bl	b61b4 <_ZN7MFRC5229PCD_ResetEv>
   b6260:	e7d8      	b.n	b6214 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b6262 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b6262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6266:	b089      	sub	sp, #36	; 0x24
   b6268:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b626c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b6270:	9203      	str	r2, [sp, #12]
   b6272:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b6276:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b627a:	9204      	str	r2, [sp, #16]
   b627c:	4604      	mov	r4, r0
   b627e:	468a      	mov	sl, r1
   b6280:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b6282:	f1b9 0f00 	cmp.w	r9, #0
   b6286:	d03e      	beq.n	b6306 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b6288:	f899 8000 	ldrb.w	r8, [r9]
   b628c:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b628e:	2200      	movs	r2, #0
   b6290:	2102      	movs	r1, #2
   b6292:	4620      	mov	r0, r4
   b6294:	f7ff ff1b 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b6298:	227f      	movs	r2, #127	; 0x7f
   b629a:	2108      	movs	r1, #8
   b629c:	4620      	mov	r0, r4
   b629e:	f7ff ff16 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b62a2:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b62a6:	2280      	movs	r2, #128	; 0x80
   b62a8:	2114      	movs	r1, #20
   b62aa:	4620      	mov	r0, r4
   b62ac:	f7ff ff24 	bl	b60f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b62b0:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b62b4:	9b05      	ldr	r3, [sp, #20]
   b62b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b62ba:	2112      	movs	r1, #18
   b62bc:	4620      	mov	r0, r4
   b62be:	f7ff feeb 	bl	b6098 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b62c2:	4642      	mov	r2, r8
   b62c4:	211a      	movs	r1, #26
   b62c6:	4620      	mov	r0, r4
   b62c8:	f7ff ff01 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b62cc:	4652      	mov	r2, sl
   b62ce:	2102      	movs	r1, #2
   b62d0:	4620      	mov	r0, r4
   b62d2:	f7ff fefc 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b62d6:	f1ba 0f0c 	cmp.w	sl, #12
   b62da:	d104      	bne.n	b62e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b62dc:	2280      	movs	r2, #128	; 0x80
   b62de:	211a      	movs	r1, #26
   b62e0:	4620      	mov	r0, r4
   b62e2:	f7ff ff09 	bl	b60f8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b62e6:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b62ea:	2108      	movs	r1, #8
   b62ec:	4620      	mov	r0, r4
   b62ee:	f7ff febc 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b62f2:	9b03      	ldr	r3, [sp, #12]
   b62f4:	4218      	tst	r0, r3
   b62f6:	d108      	bne.n	b630a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b62f8:	07c3      	lsls	r3, r0, #31
   b62fa:	d402      	bmi.n	b6302 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b62fc:	f1b8 0801 	subs.w	r8, r8, #1
   b6300:	d1f3      	bne.n	b62ea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b6302:	2004      	movs	r0, #4
   b6304:	e04d      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b6306:	46c8      	mov	r8, r9
   b6308:	e7c0      	b.n	b628c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b630a:	210c      	movs	r1, #12
   b630c:	4620      	mov	r0, r4
   b630e:	f7ff feac 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6312:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6316:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6318:	d146      	bne.n	b63a8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b631a:	b1dd      	cbz	r5, b6354 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b631c:	b1d6      	cbz	r6, b6354 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b631e:	2114      	movs	r1, #20
   b6320:	4620      	mov	r0, r4
   b6322:	f7ff fea2 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b6326:	7833      	ldrb	r3, [r6, #0]
   b6328:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b632a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b632c:	d33e      	bcc.n	b63ac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b632e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6330:	462b      	mov	r3, r5
   b6332:	2112      	movs	r1, #18
   b6334:	4620      	mov	r0, r4
   b6336:	f8cd b000 	str.w	fp, [sp]
   b633a:	f7ff fe47 	bl	b5fcc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b633e:	2118      	movs	r1, #24
   b6340:	4620      	mov	r0, r4
   b6342:	f7ff fe92 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6346:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b634a:	f1b9 0f00 	cmp.w	r9, #0
   b634e:	d001      	beq.n	b6354 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b6350:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b6354:	f018 0f08 	tst.w	r8, #8
   b6358:	d12a      	bne.n	b63b0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b635a:	b35d      	cbz	r5, b63b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b635c:	b356      	cbz	r6, b63b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b635e:	9b04      	ldr	r3, [sp, #16]
   b6360:	b343      	cbz	r3, b63b4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b6362:	7832      	ldrb	r2, [r6, #0]
   b6364:	2a01      	cmp	r2, #1
   b6366:	d103      	bne.n	b6370 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b6368:	2f04      	cmp	r7, #4
   b636a:	d125      	bne.n	b63b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b636c:	2009      	movs	r0, #9
   b636e:	e018      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b6370:	d922      	bls.n	b63b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6372:	bb0f      	cbnz	r7, b63b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b6374:	3a02      	subs	r2, #2
   b6376:	ab07      	add	r3, sp, #28
   b6378:	b2d2      	uxtb	r2, r2
   b637a:	4629      	mov	r1, r5
   b637c:	4620      	mov	r0, r4
   b637e:	f7ff fedc 	bl	b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b6382:	2801      	cmp	r0, #1
   b6384:	d10d      	bne.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b6386:	7833      	ldrb	r3, [r6, #0]
   b6388:	441d      	add	r5, r3
   b638a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b638e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b6392:	429a      	cmp	r2, r3
   b6394:	d110      	bne.n	b63b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6396:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b639a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b639e:	429a      	cmp	r2, r3
   b63a0:	d10a      	bne.n	b63b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b63a2:	b009      	add	sp, #36	; 0x24
   b63a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b63a8:	2002      	movs	r0, #2
   b63aa:	e7fa      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b63ac:	2005      	movs	r0, #5
   b63ae:	e7f8      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b63b0:	2003      	movs	r0, #3
   b63b2:	e7f6      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b63b4:	2001      	movs	r0, #1
   b63b6:	e7f4      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b63b8:	2008      	movs	r0, #8
   b63ba:	e7f2      	b.n	b63a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b63bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b63bc:	b510      	push	{r4, lr}
   b63be:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b63c0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b63c4:	9405      	str	r4, [sp, #20]
   b63c6:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b63ca:	9404      	str	r4, [sp, #16]
   b63cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b63ce:	9403      	str	r4, [sp, #12]
   b63d0:	9c08      	ldr	r4, [sp, #32]
   b63d2:	9200      	str	r2, [sp, #0]
   b63d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b63d8:	2230      	movs	r2, #48	; 0x30
   b63da:	460b      	mov	r3, r1
   b63dc:	210c      	movs	r1, #12
   b63de:	f7ff ff40 	bl	b6262 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b63e2:	b006      	add	sp, #24
   b63e4:	bd10      	pop	{r4, pc}

000b63e6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b63e6:	b570      	push	{r4, r5, r6, lr}
   b63e8:	b088      	sub	sp, #32
   b63ea:	4606      	mov	r6, r0
   b63ec:	461c      	mov	r4, r3
   b63ee:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b63f2:	4615      	mov	r5, r2
   b63f4:	b31a      	cbz	r2, b643e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b63f6:	781b      	ldrb	r3, [r3, #0]
   b63f8:	2b01      	cmp	r3, #1
   b63fa:	d920      	bls.n	b643e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b63fc:	2280      	movs	r2, #128	; 0x80
   b63fe:	211c      	movs	r1, #28
   b6400:	f7ff fe88 	bl	b6114 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6404:	2307      	movs	r3, #7
   b6406:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b640a:	2300      	movs	r3, #0
   b640c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6410:	f10d 031f 	add.w	r3, sp, #31
   b6414:	e9cd 4300 	strd	r4, r3, [sp]
   b6418:	2201      	movs	r2, #1
   b641a:	462b      	mov	r3, r5
   b641c:	f10d 0117 	add.w	r1, sp, #23
   b6420:	4630      	mov	r0, r6
   b6422:	f7ff ffcb 	bl	b63bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6426:	2801      	cmp	r0, #1
   b6428:	d107      	bne.n	b643a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b642a:	7823      	ldrb	r3, [r4, #0]
   b642c:	2b02      	cmp	r3, #2
   b642e:	d108      	bne.n	b6442 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6430:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6434:	2b00      	cmp	r3, #0
   b6436:	bf18      	it	ne
   b6438:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b643a:	b008      	add	sp, #32
   b643c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b643e:	2005      	movs	r0, #5
   b6440:	e7fb      	b.n	b643a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b6442:	2002      	movs	r0, #2
   b6444:	e7f9      	b.n	b643a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b6446 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b6446:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b6448:	460a      	mov	r2, r1
   b644a:	2126      	movs	r1, #38	; 0x26
   b644c:	f7ff bfcb 	b.w	b63e6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b6450 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b6450:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b6452:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6454:	f10d 0203 	add.w	r2, sp, #3
   b6458:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b645a:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b645e:	f7ff fff2 	bl	b6446 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b6462:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b6466:	1e43      	subs	r3, r0, #1
   b6468:	4258      	negs	r0, r3
   b646a:	4158      	adcs	r0, r3
   b646c:	b003      	add	sp, #12
   b646e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6472 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b6472:	b570      	push	{r4, r5, r6, lr}
   b6474:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b6476:	2350      	movs	r3, #80	; 0x50
   b6478:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b647c:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b647e:	f10d 0316 	add.w	r3, sp, #22
   b6482:	2202      	movs	r2, #2
   b6484:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b6486:	4606      	mov	r6, r0
	buffer[1] = 0;
   b6488:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b648c:	f7ff fe55 	bl	b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6490:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6492:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b6494:	d10f      	bne.n	b64b6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b6496:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b649a:	e9cd 4400 	strd	r4, r4, [sp]
   b649e:	4623      	mov	r3, r4
   b64a0:	2204      	movs	r2, #4
   b64a2:	a905      	add	r1, sp, #20
   b64a4:	4630      	mov	r0, r6
   b64a6:	f7ff ff89 	bl	b63bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b64aa:	2804      	cmp	r0, #4
   b64ac:	d003      	beq.n	b64b6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b64ae:	2801      	cmp	r0, #1
   b64b0:	bf14      	ite	ne
   b64b2:	4605      	movne	r5, r0
   b64b4:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b64b6:	4628      	mov	r0, r5
   b64b8:	b006      	add	sp, #24
   b64ba:	bd70      	pop	{r4, r5, r6, pc}

000b64bc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b64bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b64be:	4606      	mov	r6, r0
   b64c0:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b64c2:	4614      	mov	r4, r2
   b64c4:	b1ca      	cbz	r2, b64fa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b64c6:	781b      	ldrb	r3, [r3, #0]
   b64c8:	2b11      	cmp	r3, #17
   b64ca:	d916      	bls.n	b64fa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b64cc:	2330      	movs	r3, #48	; 0x30
   b64ce:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b64d0:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b64d2:	1c93      	adds	r3, r2, #2
   b64d4:	4621      	mov	r1, r4
   b64d6:	2202      	movs	r2, #2
   b64d8:	f7ff fe2f 	bl	b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b64dc:	2801      	cmp	r0, #1
   b64de:	d10a      	bne.n	b64f6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b64e0:	2300      	movs	r3, #0
   b64e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b64e6:	9003      	str	r0, [sp, #12]
   b64e8:	9500      	str	r5, [sp, #0]
   b64ea:	4623      	mov	r3, r4
   b64ec:	2204      	movs	r2, #4
   b64ee:	4621      	mov	r1, r4
   b64f0:	4630      	mov	r0, r6
   b64f2:	f7ff ff63 	bl	b63bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b64f6:	b004      	add	sp, #16
   b64f8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b64fa:	2005      	movs	r0, #5
   b64fc:	e7fb      	b.n	b64f6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b64fe <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b64fe:	b510      	push	{r4, lr}
   b6500:	b08a      	sub	sp, #40	; 0x28
   b6502:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6504:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6508:	681a      	ldr	r2, [r3, #0]
   b650a:	889b      	ldrh	r3, [r3, #4]
   b650c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6510:	7863      	ldrb	r3, [r4, #1]
   b6512:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6516:	78a3      	ldrb	r3, [r4, #2]
   b6518:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b651c:	78e3      	ldrb	r3, [r4, #3]
   b651e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6522:	7923      	ldrb	r3, [r4, #4]
   b6524:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6528:	2300      	movs	r3, #0
   b652a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b652e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6532:	9301      	str	r3, [sp, #4]
   b6534:	230c      	movs	r3, #12
	sendData[0] = command;
   b6536:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b653a:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b653e:	9300      	str	r3, [sp, #0]
   b6540:	2210      	movs	r2, #16
   b6542:	ab07      	add	r3, sp, #28
   b6544:	210e      	movs	r1, #14
   b6546:	f7ff fe8c 	bl	b6262 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b654a:	b00a      	add	sp, #40	; 0x28
   b654c:	bd10      	pop	{r4, pc}

000b654e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b654e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b6552:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b6554:	b08b      	sub	sp, #44	; 0x2c
   b6556:	4682      	mov	sl, r0
   b6558:	460f      	mov	r7, r1
   b655a:	4690      	mov	r8, r2
	if (validBits > 80) {
   b655c:	f200 8140 	bhi.w	b67e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6560:	2280      	movs	r2, #128	; 0x80
   b6562:	211c      	movs	r1, #28
   b6564:	f7ff fdd6 	bl	b6114 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6568:	2393      	movs	r3, #147	; 0x93
   b656a:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b656e:	f1b8 0f00 	cmp.w	r8, #0
   b6572:	f000 80bc 	beq.w	b66ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b6576:	783c      	ldrb	r4, [r7, #0]
   b6578:	2c04      	cmp	r4, #4
   b657a:	bf94      	ite	ls
   b657c:	2300      	movls	r3, #0
   b657e:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6580:	2501      	movs	r5, #1
   b6582:	2600      	movs	r6, #0
   b6584:	e00b      	b.n	b659e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b6586:	2395      	movs	r3, #149	; 0x95
   b6588:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b658c:	f1b8 0f00 	cmp.w	r8, #0
   b6590:	f000 80af 	beq.w	b66f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b6594:	783c      	ldrb	r4, [r7, #0]
   b6596:	2c07      	cmp	r4, #7
   b6598:	bf94      	ite	ls
   b659a:	2300      	movls	r3, #0
   b659c:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b659e:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b65a2:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b65a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b65a8:	2b00      	cmp	r3, #0
   b65aa:	f000 80a4 	beq.w	b66f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b65ae:	2288      	movs	r2, #136	; 0x88
   b65b0:	f88d 201e 	strb.w	r2, [sp, #30]
   b65b4:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b65b6:	f014 0207 	ands.w	r2, r4, #7
   b65ba:	bf18      	it	ne
   b65bc:	2201      	movne	r2, #1
   b65be:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b65c2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b65c6:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b65c8:	d01d      	beq.n	b6606 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b65ca:	2b00      	cmp	r3, #0
   b65cc:	bf14      	ite	ne
   b65ce:	f04f 0903 	movne.w	r9, #3
   b65d2:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b65d6:	f106 0c01 	add.w	ip, r6, #1
   b65da:	4591      	cmp	r9, r2
   b65dc:	bf94      	ite	ls
   b65de:	eb01 0e09 	addls.w	lr, r1, r9
   b65e2:	eb01 0e02 	addhi.w	lr, r1, r2
   b65e6:	fa57 fc8c 	uxtab	ip, r7, ip
   b65ea:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b65ee:	460a      	mov	r2, r1
   b65f0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b65f4:	3101      	adds	r1, #1
   b65f6:	b2c9      	uxtb	r1, r1
   b65f8:	445a      	add	r2, fp
   b65fa:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b65fe:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6602:	4571      	cmp	r1, lr
   b6604:	d1f3      	bne.n	b65ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6606:	b10b      	cbz	r3, b660c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6608:	3008      	adds	r0, #8
   b660a:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b660c:	2c1f      	cmp	r4, #31
   b660e:	dd74      	ble.n	b66fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6610:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6614:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6618:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b661c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6620:	4053      	eors	r3, r2
   b6622:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6626:	4053      	eors	r3, r2
   b6628:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b662c:	4053      	eors	r3, r2
   b662e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6632:	2207      	movs	r2, #7
   b6634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6638:	a907      	add	r1, sp, #28
   b663a:	4650      	mov	r0, sl
   b663c:	f7ff fd7d 	bl	b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b6640:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6642:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b6644:	f040 80c8 	bne.w	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6648:	2300      	movs	r3, #0
   b664a:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b664e:	2303      	movs	r3, #3
   b6650:	f88d 301b 	strb.w	r3, [sp, #27]
   b6654:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b6656:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b665a:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b665e:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6662:	9305      	str	r3, [sp, #20]
   b6664:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6668:	b2d2      	uxtb	r2, r2
   b666a:	211a      	movs	r1, #26
   b666c:	4650      	mov	r0, sl
   b666e:	f7ff fd2e 	bl	b60ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6672:	9b05      	ldr	r3, [sp, #20]
   b6674:	9302      	str	r3, [sp, #8]
   b6676:	f10d 031a 	add.w	r3, sp, #26
   b667a:	2200      	movs	r2, #0
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	f10d 031b 	add.w	r3, sp, #27
   b6682:	9203      	str	r2, [sp, #12]
   b6684:	9300      	str	r3, [sp, #0]
   b6686:	464a      	mov	r2, r9
   b6688:	465b      	mov	r3, fp
   b668a:	a907      	add	r1, sp, #28
   b668c:	4650      	mov	r0, sl
   b668e:	f7ff fe95 	bl	b63bc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6692:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6694:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6696:	d14c      	bne.n	b6732 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b6698:	211c      	movs	r1, #28
   b669a:	4650      	mov	r0, sl
   b669c:	f7ff fce5 	bl	b606a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b66a0:	0681      	lsls	r1, r0, #26
   b66a2:	f100 8099 	bmi.w	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b66a6:	f010 001f 	ands.w	r0, r0, #31
   b66aa:	bf08      	it	eq
   b66ac:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b66ae:	42a0      	cmp	r0, r4
   b66b0:	f340 8087 	ble.w	b67c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b66b4:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b66b6:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b66ba:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b66bc:	f013 0307 	ands.w	r3, r3, #7
   b66c0:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b66c4:	bf18      	it	ne
   b66c6:	2301      	movne	r3, #1
   b66c8:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b66ca:	4418      	add	r0, r3
   b66cc:	ab0a      	add	r3, sp, #40	; 0x28
   b66ce:	4418      	add	r0, r3
   b66d0:	2301      	movs	r3, #1
   b66d2:	fa03 f202 	lsl.w	r2, r3, r2
   b66d6:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b66da:	4313      	orrs	r3, r2
   b66dc:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b66e0:	e794      	b.n	b660c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b66e2:	2397      	movs	r3, #151	; 0x97
   b66e4:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b66e8:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b66ea:	4623      	mov	r3, r4
				break;
   b66ec:	e757      	b.n	b659e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b66ee:	4643      	mov	r3, r8
   b66f0:	e746      	b.n	b6580 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b66f2:	4643      	mov	r3, r8
   b66f4:	e753      	b.n	b659e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b66f6:	2102      	movs	r1, #2
   b66f8:	e75d      	b.n	b65b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b66fa:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b66fc:	3302      	adds	r3, #2
   b66fe:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6700:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6704:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6708:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b670c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6710:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6714:	bf18      	it	ne
   b6716:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b671a:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b671c:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b671e:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6722:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6726:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b672a:	f88d 301b 	strb.w	r3, [sp, #27]
   b672e:	9404      	str	r4, [sp, #16]
   b6730:	e795      	b.n	b665e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6732:	2801      	cmp	r0, #1
   b6734:	d150      	bne.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6736:	9b04      	ldr	r3, [sp, #16]
   b6738:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b673a:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b673e:	f77f af67 	ble.w	b6610 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6742:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6746:	2b88      	cmp	r3, #136	; 0x88
   b6748:	d13e      	bne.n	b67c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b674a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b674c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b674e:	3601      	adds	r6, #1
   b6750:	441a      	add	r2, r3
   b6752:	fa57 f686 	uxtab	r6, r7, r6
   b6756:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6758:	4619      	mov	r1, r3
   b675a:	a80a      	add	r0, sp, #40	; 0x28
   b675c:	3301      	adds	r3, #1
   b675e:	4401      	add	r1, r0
   b6760:	b2db      	uxtb	r3, r3
   b6762:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6766:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b676a:	4293      	cmp	r3, r2
   b676c:	d1f4      	bne.n	b6758 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b676e:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6772:	2e03      	cmp	r6, #3
   b6774:	d137      	bne.n	b67e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6776:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b677a:	bba4      	cbnz	r4, b67e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b677c:	f10d 031e 	add.w	r3, sp, #30
   b6780:	2201      	movs	r2, #1
   b6782:	4659      	mov	r1, fp
   b6784:	4650      	mov	r0, sl
   b6786:	f7ff fcd8 	bl	b613a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b678a:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b678c:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b678e:	d123      	bne.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6790:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6794:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b6798:	429a      	cmp	r2, r3
   b679a:	d127      	bne.n	b67ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b679c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b67a0:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b67a4:	429a      	cmp	r2, r3
   b67a6:	d121      	bne.n	b67ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b67a8:	f89b 3000 	ldrb.w	r3, [fp]
   b67ac:	075a      	lsls	r2, r3, #29
   b67ae:	d50e      	bpl.n	b67ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b67b0:	3501      	adds	r5, #1
   b67b2:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b67b4:	2d03      	cmp	r5, #3
   b67b6:	d094      	beq.n	b66e2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b67b8:	2d04      	cmp	r5, #4
   b67ba:	d002      	beq.n	b67c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b67bc:	2d02      	cmp	r5, #2
   b67be:	f43f aee2 	beq.w	b6586 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b67c2:	f04f 0906 	mov.w	r9, #6
   b67c6:	e007      	b.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b67c8:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b67ca:	2204      	movs	r2, #4
   b67cc:	e7bf      	b.n	b674e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b67ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b67d2:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b67d4:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b67d6:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b67d8:	4648      	mov	r0, r9
   b67da:	b00b      	add	sp, #44	; 0x2c
   b67dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b67e0:	f04f 0907 	mov.w	r9, #7
   b67e4:	e7f8      	b.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b67e6:	f04f 0902 	mov.w	r9, #2
   b67ea:	e7f5      	b.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b67ec:	f04f 0908 	mov.w	r9, #8
   b67f0:	e7f2      	b.n	b67d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b67f2 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b67f2:	b508      	push	{r3, lr}
   b67f4:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b67f6:	2200      	movs	r2, #0
   b67f8:	f7ff fea9 	bl	b654e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b67fc:	1e43      	subs	r3, r0, #1
   b67fe:	4258      	negs	r0, r3
   b6800:	4158      	adcs	r0, r3
   b6802:	bd08      	pop	{r3, pc}

000b6804 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6804:	b508      	push	{r3, lr}
   b6806:	4b02      	ldr	r3, [pc, #8]	; (b6810 <os_mutex_recursive_create+0xc>)
   b6808:	681b      	ldr	r3, [r3, #0]
   b680a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b680c:	9301      	str	r3, [sp, #4]
   b680e:	bd08      	pop	{r3, pc}
   b6810:	00030248 	.word	0x00030248

000b6814 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6814:	b508      	push	{r3, lr}
   b6816:	4b02      	ldr	r3, [pc, #8]	; (b6820 <HAL_RNG_GetRandomNumber+0xc>)
   b6818:	681b      	ldr	r3, [r3, #0]
   b681a:	685b      	ldr	r3, [r3, #4]
   b681c:	9301      	str	r3, [sp, #4]
   b681e:	bd08      	pop	{r3, pc}
   b6820:	00030218 	.word	0x00030218

000b6824 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6824:	b508      	push	{r3, lr}
   b6826:	4b02      	ldr	r3, [pc, #8]	; (b6830 <HAL_Delay_Microseconds+0xc>)
   b6828:	681b      	ldr	r3, [r3, #0]
   b682a:	68db      	ldr	r3, [r3, #12]
   b682c:	9301      	str	r3, [sp, #4]
   b682e:	bd08      	pop	{r3, pc}
   b6830:	00030218 	.word	0x00030218

000b6834 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6834:	b508      	push	{r3, lr}
   b6836:	4b02      	ldr	r3, [pc, #8]	; (b6840 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6838:	681b      	ldr	r3, [r3, #0]
   b683a:	695b      	ldr	r3, [r3, #20]
   b683c:	9301      	str	r3, [sp, #4]
   b683e:	bd08      	pop	{r3, pc}
   b6840:	00030218 	.word	0x00030218

000b6844 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6844:	b508      	push	{r3, lr}
   b6846:	4b02      	ldr	r3, [pc, #8]	; (b6850 <HAL_Validate_Pin_Function+0xc>)
   b6848:	681b      	ldr	r3, [r3, #0]
   b684a:	685b      	ldr	r3, [r3, #4]
   b684c:	9301      	str	r3, [sp, #4]
   b684e:	bd08      	pop	{r3, pc}
   b6850:	0003022c 	.word	0x0003022c

000b6854 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6854:	b508      	push	{r3, lr}
   b6856:	4b02      	ldr	r3, [pc, #8]	; (b6860 <HAL_Pin_Mode+0xc>)
   b6858:	681b      	ldr	r3, [r3, #0]
   b685a:	689b      	ldr	r3, [r3, #8]
   b685c:	9301      	str	r3, [sp, #4]
   b685e:	bd08      	pop	{r3, pc}
   b6860:	0003022c 	.word	0x0003022c

000b6864 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6864:	b508      	push	{r3, lr}
   b6866:	4b02      	ldr	r3, [pc, #8]	; (b6870 <HAL_Get_Pin_Mode+0xc>)
   b6868:	681b      	ldr	r3, [r3, #0]
   b686a:	68db      	ldr	r3, [r3, #12]
   b686c:	9301      	str	r3, [sp, #4]
   b686e:	bd08      	pop	{r3, pc}
   b6870:	0003022c 	.word	0x0003022c

000b6874 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6874:	b508      	push	{r3, lr}
   b6876:	4b02      	ldr	r3, [pc, #8]	; (b6880 <HAL_GPIO_Write+0xc>)
   b6878:	681b      	ldr	r3, [r3, #0]
   b687a:	691b      	ldr	r3, [r3, #16]
   b687c:	9301      	str	r3, [sp, #4]
   b687e:	bd08      	pop	{r3, pc}
   b6880:	0003022c 	.word	0x0003022c

000b6884 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6884:	b508      	push	{r3, lr}
   b6886:	4b02      	ldr	r3, [pc, #8]	; (b6890 <HAL_GPIO_Read+0xc>)
   b6888:	681b      	ldr	r3, [r3, #0]
   b688a:	695b      	ldr	r3, [r3, #20]
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	bd08      	pop	{r3, pc}
   b6890:	0003022c 	.word	0x0003022c

000b6894 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6894:	b508      	push	{r3, lr}
   b6896:	4b02      	ldr	r3, [pc, #8]	; (b68a0 <hal_adc_read+0xc>)
   b6898:	681b      	ldr	r3, [r3, #0]
   b689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b689c:	9301      	str	r3, [sp, #4]
   b689e:	bd08      	pop	{r3, pc}
   b68a0:	0003022c 	.word	0x0003022c

000b68a4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b68a4:	b508      	push	{r3, lr}
   b68a6:	4b02      	ldr	r3, [pc, #8]	; (b68b0 <hal_i2c_set_speed+0xc>)
   b68a8:	681b      	ldr	r3, [r3, #0]
   b68aa:	681b      	ldr	r3, [r3, #0]
   b68ac:	9301      	str	r3, [sp, #4]
   b68ae:	bd08      	pop	{r3, pc}
   b68b0:	00030228 	.word	0x00030228

000b68b4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <hal_i2c_begin+0xc>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	68db      	ldr	r3, [r3, #12]
   b68bc:	9301      	str	r3, [sp, #4]
   b68be:	bd08      	pop	{r3, pc}
   b68c0:	00030228 	.word	0x00030228

000b68c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b68c4:	b508      	push	{r3, lr}
   b68c6:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <hal_i2c_begin_transmission+0xc>)
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	699b      	ldr	r3, [r3, #24]
   b68cc:	9301      	str	r3, [sp, #4]
   b68ce:	bd08      	pop	{r3, pc}
   b68d0:	00030228 	.word	0x00030228

000b68d4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b68d4:	b508      	push	{r3, lr}
   b68d6:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <hal_i2c_end_transmission+0xc>)
   b68d8:	681b      	ldr	r3, [r3, #0]
   b68da:	69db      	ldr	r3, [r3, #28]
   b68dc:	9301      	str	r3, [sp, #4]
   b68de:	bd08      	pop	{r3, pc}
   b68e0:	00030228 	.word	0x00030228

000b68e4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <hal_i2c_write+0xc>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	6a1b      	ldr	r3, [r3, #32]
   b68ec:	9301      	str	r3, [sp, #4]
   b68ee:	bd08      	pop	{r3, pc}
   b68f0:	00030228 	.word	0x00030228

000b68f4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b02      	ldr	r3, [pc, #8]	; (b6900 <hal_i2c_available+0xc>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	bd08      	pop	{r3, pc}
   b6900:	00030228 	.word	0x00030228

000b6904 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6904:	b508      	push	{r3, lr}
   b6906:	4b02      	ldr	r3, [pc, #8]	; (b6910 <hal_i2c_read+0xc>)
   b6908:	681b      	ldr	r3, [r3, #0]
   b690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b690c:	9301      	str	r3, [sp, #4]
   b690e:	bd08      	pop	{r3, pc}
   b6910:	00030228 	.word	0x00030228

000b6914 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b02      	ldr	r3, [pc, #8]	; (b6920 <hal_i2c_peek+0xc>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	bd08      	pop	{r3, pc}
   b6920:	00030228 	.word	0x00030228

000b6924 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6924:	b508      	push	{r3, lr}
   b6926:	4b02      	ldr	r3, [pc, #8]	; (b6930 <hal_i2c_flush+0xc>)
   b6928:	681b      	ldr	r3, [r3, #0]
   b692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b692c:	9301      	str	r3, [sp, #4]
   b692e:	bd08      	pop	{r3, pc}
   b6930:	00030228 	.word	0x00030228

000b6934 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <hal_i2c_is_enabled+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	00030228 	.word	0x00030228

000b6944 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <hal_i2c_init+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	00030228 	.word	0x00030228

000b6954 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <inet_inet_ntop+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	695b      	ldr	r3, [r3, #20]
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	00030264 	.word	0x00030264

000b6964 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <netdb_freeaddrinfo+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	689b      	ldr	r3, [r3, #8]
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	00030268 	.word	0x00030268

000b6974 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <netdb_getaddrinfo+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	68db      	ldr	r3, [r3, #12]
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	00030268 	.word	0x00030268

000b6984 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <hal_spi_begin+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	681b      	ldr	r3, [r3, #0]
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	00030230 	.word	0x00030230

000b6994 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6994:	b508      	push	{r3, lr}
   b6996:	4b02      	ldr	r3, [pc, #8]	; (b69a0 <hal_spi_transfer+0xc>)
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	695b      	ldr	r3, [r3, #20]
   b699c:	9301      	str	r3, [sp, #4]
   b699e:	bd08      	pop	{r3, pc}
   b69a0:	00030230 	.word	0x00030230

000b69a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b69a4:	b508      	push	{r3, lr}
   b69a6:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <hal_spi_init+0xc>)
   b69a8:	681b      	ldr	r3, [r3, #0]
   b69aa:	69db      	ldr	r3, [r3, #28]
   b69ac:	9301      	str	r3, [sp, #4]
   b69ae:	bd08      	pop	{r3, pc}
   b69b0:	00030230 	.word	0x00030230

000b69b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b69b4:	b508      	push	{r3, lr}
   b69b6:	4b02      	ldr	r3, [pc, #8]	; (b69c0 <hal_spi_is_enabled+0xc>)
   b69b8:	681b      	ldr	r3, [r3, #0]
   b69ba:	6a1b      	ldr	r3, [r3, #32]
   b69bc:	9301      	str	r3, [sp, #4]
   b69be:	bd08      	pop	{r3, pc}
   b69c0:	00030230 	.word	0x00030230

000b69c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b69c4:	b508      	push	{r3, lr}
   b69c6:	4b02      	ldr	r3, [pc, #8]	; (b69d0 <hal_spi_info+0xc>)
   b69c8:	681b      	ldr	r3, [r3, #0]
   b69ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69cc:	9301      	str	r3, [sp, #4]
   b69ce:	bd08      	pop	{r3, pc}
   b69d0:	00030230 	.word	0x00030230

000b69d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b69d4:	b508      	push	{r3, lr}
   b69d6:	4b02      	ldr	r3, [pc, #8]	; (b69e0 <hal_spi_set_settings+0xc>)
   b69d8:	681b      	ldr	r3, [r3, #0]
   b69da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69dc:	9301      	str	r3, [sp, #4]
   b69de:	bd08      	pop	{r3, pc}
   b69e0:	00030230 	.word	0x00030230

000b69e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b69e4:	b508      	push	{r3, lr}
   b69e6:	4b02      	ldr	r3, [pc, #8]	; (b69f0 <hal_spi_acquire+0xc>)
   b69e8:	681b      	ldr	r3, [r3, #0]
   b69ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	bd08      	pop	{r3, pc}
   b69f0:	00030230 	.word	0x00030230

000b69f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b69f4:	b508      	push	{r3, lr}
   b69f6:	4b02      	ldr	r3, [pc, #8]	; (b6a00 <hal_spi_release+0xc>)
   b69f8:	681b      	ldr	r3, [r3, #0]
   b69fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69fc:	9301      	str	r3, [sp, #4]
   b69fe:	bd08      	pop	{r3, pc}
   b6a00:	00030230 	.word	0x00030230

000b6a04 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6a04:	b508      	push	{r3, lr}
   b6a06:	4b02      	ldr	r3, [pc, #8]	; (b6a10 <hal_usart_write+0xc>)
   b6a08:	681b      	ldr	r3, [r3, #0]
   b6a0a:	68db      	ldr	r3, [r3, #12]
   b6a0c:	9301      	str	r3, [sp, #4]
   b6a0e:	bd08      	pop	{r3, pc}
   b6a10:	0003023c 	.word	0x0003023c

000b6a14 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6a14:	b508      	push	{r3, lr}
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <hal_usart_available+0xc>)
   b6a18:	681b      	ldr	r3, [r3, #0]
   b6a1a:	691b      	ldr	r3, [r3, #16]
   b6a1c:	9301      	str	r3, [sp, #4]
   b6a1e:	bd08      	pop	{r3, pc}
   b6a20:	0003023c 	.word	0x0003023c

000b6a24 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6a24:	b508      	push	{r3, lr}
   b6a26:	4b02      	ldr	r3, [pc, #8]	; (b6a30 <hal_usart_read+0xc>)
   b6a28:	681b      	ldr	r3, [r3, #0]
   b6a2a:	695b      	ldr	r3, [r3, #20]
   b6a2c:	9301      	str	r3, [sp, #4]
   b6a2e:	bd08      	pop	{r3, pc}
   b6a30:	0003023c 	.word	0x0003023c

000b6a34 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6a34:	b508      	push	{r3, lr}
   b6a36:	4b02      	ldr	r3, [pc, #8]	; (b6a40 <hal_usart_peek+0xc>)
   b6a38:	681b      	ldr	r3, [r3, #0]
   b6a3a:	699b      	ldr	r3, [r3, #24]
   b6a3c:	9301      	str	r3, [sp, #4]
   b6a3e:	bd08      	pop	{r3, pc}
   b6a40:	0003023c 	.word	0x0003023c

000b6a44 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6a44:	b508      	push	{r3, lr}
   b6a46:	4b02      	ldr	r3, [pc, #8]	; (b6a50 <hal_usart_flush+0xc>)
   b6a48:	681b      	ldr	r3, [r3, #0]
   b6a4a:	69db      	ldr	r3, [r3, #28]
   b6a4c:	9301      	str	r3, [sp, #4]
   b6a4e:	bd08      	pop	{r3, pc}
   b6a50:	0003023c 	.word	0x0003023c

000b6a54 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6a54:	b508      	push	{r3, lr}
   b6a56:	4b02      	ldr	r3, [pc, #8]	; (b6a60 <hal_usart_is_enabled+0xc>)
   b6a58:	681b      	ldr	r3, [r3, #0]
   b6a5a:	6a1b      	ldr	r3, [r3, #32]
   b6a5c:	9301      	str	r3, [sp, #4]
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	0003023c 	.word	0x0003023c

000b6a64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6a64:	b508      	push	{r3, lr}
   b6a66:	4b02      	ldr	r3, [pc, #8]	; (b6a70 <hal_usart_available_data_for_write+0xc>)
   b6a68:	681b      	ldr	r3, [r3, #0]
   b6a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a6c:	9301      	str	r3, [sp, #4]
   b6a6e:	bd08      	pop	{r3, pc}
   b6a70:	0003023c 	.word	0x0003023c

000b6a74 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6a74:	b508      	push	{r3, lr}
   b6a76:	4b02      	ldr	r3, [pc, #8]	; (b6a80 <hal_usart_init_ex+0xc>)
   b6a78:	681b      	ldr	r3, [r3, #0]
   b6a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a7c:	9301      	str	r3, [sp, #4]
   b6a7e:	bd08      	pop	{r3, pc}
   b6a80:	0003023c 	.word	0x0003023c

000b6a84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6a84:	b508      	push	{r3, lr}
   b6a86:	4b02      	ldr	r3, [pc, #8]	; (b6a90 <HAL_USB_USART_Init+0xc>)
   b6a88:	681b      	ldr	r3, [r3, #0]
   b6a8a:	681b      	ldr	r3, [r3, #0]
   b6a8c:	9301      	str	r3, [sp, #4]
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	0003024c 	.word	0x0003024c

000b6a94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6a94:	b508      	push	{r3, lr}
   b6a96:	4b02      	ldr	r3, [pc, #8]	; (b6aa0 <HAL_USB_USART_Begin+0xc>)
   b6a98:	681b      	ldr	r3, [r3, #0]
   b6a9a:	685b      	ldr	r3, [r3, #4]
   b6a9c:	9301      	str	r3, [sp, #4]
   b6a9e:	bd08      	pop	{r3, pc}
   b6aa0:	0003024c 	.word	0x0003024c

000b6aa4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6aa4:	b508      	push	{r3, lr}
   b6aa6:	4b02      	ldr	r3, [pc, #8]	; (b6ab0 <HAL_USB_USART_Available_Data+0xc>)
   b6aa8:	681b      	ldr	r3, [r3, #0]
   b6aaa:	691b      	ldr	r3, [r3, #16]
   b6aac:	9301      	str	r3, [sp, #4]
   b6aae:	bd08      	pop	{r3, pc}
   b6ab0:	0003024c 	.word	0x0003024c

000b6ab4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ab8:	681b      	ldr	r3, [r3, #0]
   b6aba:	695b      	ldr	r3, [r3, #20]
   b6abc:	9301      	str	r3, [sp, #4]
   b6abe:	bd08      	pop	{r3, pc}
   b6ac0:	0003024c 	.word	0x0003024c

000b6ac4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ac4:	b508      	push	{r3, lr}
   b6ac6:	4b02      	ldr	r3, [pc, #8]	; (b6ad0 <HAL_USB_USART_Receive_Data+0xc>)
   b6ac8:	681b      	ldr	r3, [r3, #0]
   b6aca:	699b      	ldr	r3, [r3, #24]
   b6acc:	9301      	str	r3, [sp, #4]
   b6ace:	bd08      	pop	{r3, pc}
   b6ad0:	0003024c 	.word	0x0003024c

000b6ad4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ad4:	b508      	push	{r3, lr}
   b6ad6:	4b02      	ldr	r3, [pc, #8]	; (b6ae0 <HAL_USB_USART_Send_Data+0xc>)
   b6ad8:	681b      	ldr	r3, [r3, #0]
   b6ada:	69db      	ldr	r3, [r3, #28]
   b6adc:	9301      	str	r3, [sp, #4]
   b6ade:	bd08      	pop	{r3, pc}
   b6ae0:	0003024c 	.word	0x0003024c

000b6ae4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	4b02      	ldr	r3, [pc, #8]	; (b6af0 <HAL_USB_USART_Flush_Data+0xc>)
   b6ae8:	681b      	ldr	r3, [r3, #0]
   b6aea:	6a1b      	ldr	r3, [r3, #32]
   b6aec:	9301      	str	r3, [sp, #4]
   b6aee:	bd08      	pop	{r3, pc}
   b6af0:	0003024c 	.word	0x0003024c

000b6af4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6af4:	b508      	push	{r3, lr}
   b6af6:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <panic_+0xc>)
   b6af8:	681b      	ldr	r3, [r3, #0]
   b6afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6afc:	9301      	str	r3, [sp, #4]
   b6afe:	bd08      	pop	{r3, pc}
   b6b00:	00030260 	.word	0x00030260

000b6b04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <set_system_mode+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	685b      	ldr	r3, [r3, #4]
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	00030220 	.word	0x00030220

000b6b14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <system_delay_ms+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	695b      	ldr	r3, [r3, #20]
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030220 	.word	0x00030220

000b6b24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b03      	ldr	r3, [pc, #12]	; (b6b34 <system_ctrl_set_app_request_handler+0x10>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6b2e:	9301      	str	r3, [sp, #4]
   b6b30:	bd08      	pop	{r3, pc}
   b6b32:	0000      	.short	0x0000
   b6b34:	00030220 	.word	0x00030220

000b6b38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6b38:	b508      	push	{r3, lr}
   b6b3a:	4b03      	ldr	r3, [pc, #12]	; (b6b48 <system_ctrl_set_result+0x10>)
   b6b3c:	681b      	ldr	r3, [r3, #0]
   b6b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6b42:	9301      	str	r3, [sp, #4]
   b6b44:	bd08      	pop	{r3, pc}
   b6b46:	0000      	.short	0x0000
   b6b48:	00030220 	.word	0x00030220

000b6b4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	00030244 	.word	0x00030244

000b6b5c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <spark_cloud_disconnect+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	00030244 	.word	0x00030244

000b6b6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <network_connect+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	685b      	ldr	r3, [r3, #4]
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	00030240 	.word	0x00030240

000b6b7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <network_connecting+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	689b      	ldr	r3, [r3, #8]
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030240 	.word	0x00030240

000b6b8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <network_disconnect+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	68db      	ldr	r3, [r3, #12]
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030240 	.word	0x00030240

000b6b9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <network_ready+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	691b      	ldr	r3, [r3, #16]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030240 	.word	0x00030240

000b6bac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <network_on+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	695b      	ldr	r3, [r3, #20]
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030240 	.word	0x00030240

000b6bbc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <network_off+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	699b      	ldr	r3, [r3, #24]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	00030240 	.word	0x00030240

000b6bcc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <network_listen+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	69db      	ldr	r3, [r3, #28]
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	00030240 	.word	0x00030240

000b6bdc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <network_listening+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	6a1b      	ldr	r3, [r3, #32]
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	00030240 	.word	0x00030240

000b6bec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <network_set_listen_timeout+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030240 	.word	0x00030240

000b6bfc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <network_get_listen_timeout+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030240 	.word	0x00030240

000b6c0c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <network_is_on+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030240 	.word	0x00030240

000b6c1c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <network_is_off+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030240 	.word	0x00030240

000b6c2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <malloc+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	681b      	ldr	r3, [r3, #0]
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	0003021c 	.word	0x0003021c

000b6c3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <free+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	685b      	ldr	r3, [r3, #4]
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	0003021c 	.word	0x0003021c

000b6c4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <realloc+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	689b      	ldr	r3, [r3, #8]
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	0003021c 	.word	0x0003021c

000b6c5c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <snprintf+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	69db      	ldr	r3, [r3, #28]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	0003021c 	.word	0x0003021c

000b6c6c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <vsnprintf+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	0003021c 	.word	0x0003021c

000b6c7c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <_malloc_r+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	0003021c 	.word	0x0003021c

000b6c8c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <__assert_func+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	0003021c 	.word	0x0003021c

000b6c9c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <newlib_impure_ptr_callback+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	0003021c 	.word	0x0003021c

000b6cac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6cac:	2100      	movs	r1, #0
   b6cae:	f7ff bf31 	b.w	b6b14 <system_delay_ms>
	...

000b6cb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6cb4:	4802      	ldr	r0, [pc, #8]	; (b6cc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6cb6:	2300      	movs	r3, #0
   b6cb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6cba:	f7ff bda3 	b.w	b6804 <os_mutex_recursive_create>
   b6cbe:	bf00      	nop
   b6cc0:	2003e6c4 	.word	0x2003e6c4

000b6cc4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b6cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6cc6:	230c      	movs	r3, #12
   b6cc8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b6ccc:	6803      	ldr	r3, [r0, #0]
   b6cce:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6cd2:	7a03      	ldrb	r3, [r0, #8]
   b6cd4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b6cd8:	6843      	ldr	r3, [r0, #4]
   b6cda:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b6cdc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b6cde:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b6ce0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b6ce4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b6ce6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b6cea:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b6cee:	f7ff ff35 	bl	b6b5c <spark_cloud_disconnect>
}
   b6cf2:	b005      	add	sp, #20
   b6cf4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cf8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cf8:	2200      	movs	r2, #0
   b6cfa:	6840      	ldr	r0, [r0, #4]
   b6cfc:	4611      	mov	r1, r2
   b6cfe:	f7ff bf6d 	b.w	b6bdc <network_listening>

000b6d02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d02:	2200      	movs	r2, #0
   b6d04:	6840      	ldr	r0, [r0, #4]
   b6d06:	4611      	mov	r1, r2
   b6d08:	f7ff bf78 	b.w	b6bfc <network_get_listen_timeout>

000b6d0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d0c:	6840      	ldr	r0, [r0, #4]
   b6d0e:	2200      	movs	r2, #0
   b6d10:	f7ff bf6c 	b.w	b6bec <network_set_listen_timeout>

000b6d14 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d14:	6840      	ldr	r0, [r0, #4]
   b6d16:	2200      	movs	r2, #0
   b6d18:	f081 0101 	eor.w	r1, r1, #1
   b6d1c:	f7ff bf56 	b.w	b6bcc <network_listen>

000b6d20 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d20:	2300      	movs	r3, #0
   b6d22:	6840      	ldr	r0, [r0, #4]
   b6d24:	461a      	mov	r2, r3
   b6d26:	4619      	mov	r1, r3
   b6d28:	f7ff bf48 	b.w	b6bbc <network_off>

000b6d2c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d2c:	2300      	movs	r3, #0
   b6d2e:	6840      	ldr	r0, [r0, #4]
   b6d30:	461a      	mov	r2, r3
   b6d32:	4619      	mov	r1, r3
   b6d34:	f7ff bf3a 	b.w	b6bac <network_on>

000b6d38 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6d38:	2200      	movs	r2, #0
   b6d3a:	6840      	ldr	r0, [r0, #4]
   b6d3c:	4611      	mov	r1, r2
   b6d3e:	f7ff bf2d 	b.w	b6b9c <network_ready>

000b6d42 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d42:	2200      	movs	r2, #0
   b6d44:	6840      	ldr	r0, [r0, #4]
   b6d46:	4611      	mov	r1, r2
   b6d48:	f7ff bf18 	b.w	b6b7c <network_connecting>

000b6d4c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d4c:	6840      	ldr	r0, [r0, #4]
   b6d4e:	2200      	movs	r2, #0
   b6d50:	2102      	movs	r1, #2
   b6d52:	f7ff bf1b 	b.w	b6b8c <network_disconnect>

000b6d56 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d56:	2300      	movs	r3, #0
   b6d58:	6840      	ldr	r0, [r0, #4]
   b6d5a:	461a      	mov	r2, r3
   b6d5c:	f7ff bf06 	b.w	b6b6c <network_connect>

000b6d60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6d60:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6d62:	2203      	movs	r2, #3
   b6d64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6d66:	4a02      	ldr	r2, [pc, #8]	; (b6d70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6d68:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6d6a:	4770      	bx	lr
   b6d6c:	2003e6c8 	.word	0x2003e6c8
   b6d70:	000b8c38 	.word	0x000b8c38

000b6d74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6d74:	4770      	bx	lr

000b6d76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d78:	4606      	mov	r6, r0
   b6d7a:	4615      	mov	r5, r2
   b6d7c:	460c      	mov	r4, r1
   b6d7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6d80:	42bc      	cmp	r4, r7
   b6d82:	d006      	beq.n	b6d92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6d84:	6833      	ldr	r3, [r6, #0]
   b6d86:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6d8a:	689b      	ldr	r3, [r3, #8]
   b6d8c:	4630      	mov	r0, r6
   b6d8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6d90:	e7f6      	b.n	b6d80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6d92:	4628      	mov	r0, r5
   b6d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6d96:	7c00      	ldrb	r0, [r0, #16]
   b6d98:	2200      	movs	r2, #0
   b6d9a:	f7ff bda3 	b.w	b68e4 <hal_i2c_write>

000b6d9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6d9e:	7c00      	ldrb	r0, [r0, #16]
   b6da0:	2100      	movs	r1, #0
   b6da2:	f7ff bda7 	b.w	b68f4 <hal_i2c_available>

000b6da6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6da6:	7c00      	ldrb	r0, [r0, #16]
   b6da8:	2100      	movs	r1, #0
   b6daa:	f7ff bdab 	b.w	b6904 <hal_i2c_read>

000b6dae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6dae:	7c00      	ldrb	r0, [r0, #16]
   b6db0:	2100      	movs	r1, #0
   b6db2:	f7ff bdaf 	b.w	b6914 <hal_i2c_peek>

000b6db6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6db6:	7c00      	ldrb	r0, [r0, #16]
   b6db8:	2100      	movs	r1, #0
   b6dba:	f7ff bdb3 	b.w	b6924 <hal_i2c_flush>

000b6dbe <_ZN7TwoWireD0Ev>:
   b6dbe:	b510      	push	{r4, lr}
   b6dc0:	2114      	movs	r1, #20
   b6dc2:	4604      	mov	r4, r0
   b6dc4:	f7fd f967 	bl	b4096 <_ZdlPvj>
   b6dc8:	4620      	mov	r0, r4
   b6dca:	bd10      	pop	{r4, pc}

000b6dcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6dcc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6dd2:	4604      	mov	r4, r0
   b6dd4:	4608      	mov	r0, r1
   b6dd6:	2100      	movs	r1, #0
   b6dd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6ddc:	4b03      	ldr	r3, [pc, #12]	; (b6dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6dde:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6de0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6de2:	4611      	mov	r1, r2
   b6de4:	f7ff fdae 	bl	b6944 <hal_i2c_init>
}
   b6de8:	4620      	mov	r0, r4
   b6dea:	bd10      	pop	{r4, pc}
   b6dec:	000b8c74 	.word	0x000b8c74

000b6df0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6df0:	7c00      	ldrb	r0, [r0, #16]
   b6df2:	2200      	movs	r2, #0
   b6df4:	f7ff bd56 	b.w	b68a4 <hal_i2c_set_speed>

000b6df8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6df8:	2300      	movs	r3, #0
   b6dfa:	7c00      	ldrb	r0, [r0, #16]
   b6dfc:	461a      	mov	r2, r3
   b6dfe:	4619      	mov	r1, r3
   b6e00:	f7ff bd58 	b.w	b68b4 <hal_i2c_begin>

000b6e04 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6e04:	7c00      	ldrb	r0, [r0, #16]
   b6e06:	2200      	movs	r2, #0
   b6e08:	f7ff bd5c 	b.w	b68c4 <hal_i2c_begin_transmission>

000b6e0c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6e0c:	b2c9      	uxtb	r1, r1
   b6e0e:	f7ff bff9 	b.w	b6e04 <_ZN7TwoWire17beginTransmissionEh>

000b6e12 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6e12:	7c00      	ldrb	r0, [r0, #16]
   b6e14:	2200      	movs	r2, #0
   b6e16:	f7ff bd5d 	b.w	b68d4 <hal_i2c_end_transmission>

000b6e1a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6e1a:	2101      	movs	r1, #1
   b6e1c:	f7ff bff9 	b.w	b6e12 <_ZN7TwoWire15endTransmissionEh>

000b6e20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6e20:	4770      	bx	lr

000b6e22 <_ZN9IPAddressD0Ev>:
   b6e22:	b510      	push	{r4, lr}
   b6e24:	2118      	movs	r1, #24
   b6e26:	4604      	mov	r4, r0
   b6e28:	f7fd f935 	bl	b4096 <_ZdlPvj>
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	bd10      	pop	{r4, pc}

000b6e30 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6e30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6e32:	7d03      	ldrb	r3, [r0, #20]
   b6e34:	2b06      	cmp	r3, #6
{
   b6e36:	b08d      	sub	sp, #52	; 0x34
   b6e38:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e3a:	f100 0704 	add.w	r7, r0, #4
   b6e3e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6e42:	d012      	beq.n	b6e6a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6e44:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6e48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6e4c:	220a      	movs	r2, #10
   b6e4e:	4630      	mov	r0, r6
   b6e50:	f000 f95d 	bl	b710e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6e54:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6e56:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6e58:	d019      	beq.n	b6e8e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6e5a:	2c00      	cmp	r4, #0
   b6e5c:	d0f4      	beq.n	b6e48 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6e5e:	212e      	movs	r1, #46	; 0x2e
   b6e60:	4630      	mov	r0, r6
   b6e62:	f000 f93b 	bl	b70dc <_ZN5Print5printEc>
   b6e66:	4404      	add	r4, r0
   b6e68:	e7ee      	b.n	b6e48 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e6a:	232f      	movs	r3, #47	; 0x2f
   b6e6c:	466a      	mov	r2, sp
   b6e6e:	4639      	mov	r1, r7
   b6e70:	200a      	movs	r0, #10
		buf[0] = 0;
   b6e72:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6e76:	f7ff fd6d 	bl	b6954 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6e7a:	4668      	mov	r0, sp
   b6e7c:	f000 fdf6 	bl	b7a6c <strlen>
   b6e80:	6833      	ldr	r3, [r6, #0]
   b6e82:	4602      	mov	r2, r0
   b6e84:	68db      	ldr	r3, [r3, #12]
   b6e86:	4669      	mov	r1, sp
   b6e88:	4630      	mov	r0, r6
   b6e8a:	4798      	blx	r3
   b6e8c:	4604      	mov	r4, r0
    }
    return n;
}
   b6e8e:	4620      	mov	r0, r4
   b6e90:	b00d      	add	sp, #52	; 0x34
   b6e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e94 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6e94:	b510      	push	{r4, lr}
   b6e96:	4b05      	ldr	r3, [pc, #20]	; (b6eac <_ZN9IPAddressC1Ev+0x18>)
   b6e98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6e9a:	2211      	movs	r2, #17
   b6e9c:	f840 3b04 	str.w	r3, [r0], #4
   b6ea0:	2100      	movs	r1, #0
   b6ea2:	f000 fd9d 	bl	b79e0 <memset>
}
   b6ea6:	4620      	mov	r0, r4
   b6ea8:	bd10      	pop	{r4, pc}
   b6eaa:	bf00      	nop
   b6eac:	000b8c9c 	.word	0x000b8c9c

000b6eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6eb0:	4603      	mov	r3, r0
   b6eb2:	4a07      	ldr	r2, [pc, #28]	; (b6ed0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6eb4:	b510      	push	{r4, lr}
   b6eb6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6eba:	f101 0210 	add.w	r2, r1, #16
   b6ebe:	f851 4b04 	ldr.w	r4, [r1], #4
   b6ec2:	f843 4b04 	str.w	r4, [r3], #4
   b6ec6:	4291      	cmp	r1, r2
   b6ec8:	d1f9      	bne.n	b6ebe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6eca:	780a      	ldrb	r2, [r1, #0]
   b6ecc:	701a      	strb	r2, [r3, #0]
}
   b6ece:	bd10      	pop	{r4, pc}
   b6ed0:	000b8c9c 	.word	0x000b8c9c

000b6ed4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6ed4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6ed6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6eda:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6ede:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6ee2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6ee6:	2304      	movs	r3, #4
   b6ee8:	6041      	str	r1, [r0, #4]
   b6eea:	7503      	strb	r3, [r0, #20]
}
   b6eec:	bd10      	pop	{r4, pc}
	...

000b6ef0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6ef0:	b507      	push	{r0, r1, r2, lr}
   b6ef2:	4b06      	ldr	r3, [pc, #24]	; (b6f0c <_ZN9IPAddressC1EPKh+0x1c>)
   b6ef4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6ef6:	78cb      	ldrb	r3, [r1, #3]
   b6ef8:	9300      	str	r3, [sp, #0]
   b6efa:	788b      	ldrb	r3, [r1, #2]
   b6efc:	784a      	ldrb	r2, [r1, #1]
   b6efe:	7809      	ldrb	r1, [r1, #0]
   b6f00:	f7ff ffe8 	bl	b6ed4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6f04:	b003      	add	sp, #12
   b6f06:	f85d fb04 	ldr.w	pc, [sp], #4
   b6f0a:	bf00      	nop
   b6f0c:	000b8c9c 	.word	0x000b8c9c

000b6f10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6f10:	4b01      	ldr	r3, [pc, #4]	; (b6f18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6f12:	4a02      	ldr	r2, [pc, #8]	; (b6f1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6f14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6f16:	4770      	bx	lr
   b6f18:	2003e6d0 	.word	0x2003e6d0
   b6f1c:	000b8ca8 	.word	0x000b8ca8

000b6f20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6f20:	2300      	movs	r3, #0
   b6f22:	6840      	ldr	r0, [r0, #4]
   b6f24:	461a      	mov	r2, r3
   b6f26:	f7ff be21 	b.w	b6b6c <network_connect>

000b6f2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6f2a:	6840      	ldr	r0, [r0, #4]
   b6f2c:	2200      	movs	r2, #0
   b6f2e:	2102      	movs	r1, #2
   b6f30:	f7ff be2c 	b.w	b6b8c <network_disconnect>

000b6f34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6f34:	2200      	movs	r2, #0
   b6f36:	6840      	ldr	r0, [r0, #4]
   b6f38:	4611      	mov	r1, r2
   b6f3a:	f7ff be1f 	b.w	b6b7c <network_connecting>

000b6f3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6f3e:	2200      	movs	r2, #0
   b6f40:	6840      	ldr	r0, [r0, #4]
   b6f42:	4611      	mov	r1, r2
   b6f44:	f7ff be2a 	b.w	b6b9c <network_ready>

000b6f48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6f48:	2300      	movs	r3, #0
   b6f4a:	6840      	ldr	r0, [r0, #4]
   b6f4c:	461a      	mov	r2, r3
   b6f4e:	4619      	mov	r1, r3
   b6f50:	f7ff be2c 	b.w	b6bac <network_on>

000b6f54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6f54:	2300      	movs	r3, #0
   b6f56:	6840      	ldr	r0, [r0, #4]
   b6f58:	461a      	mov	r2, r3
   b6f5a:	4619      	mov	r1, r3
   b6f5c:	f7ff be2e 	b.w	b6bbc <network_off>

000b6f60 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6f60:	6840      	ldr	r0, [r0, #4]
   b6f62:	2100      	movs	r1, #0
   b6f64:	f7ff be52 	b.w	b6c0c <network_is_on>

000b6f68 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6f68:	6840      	ldr	r0, [r0, #4]
   b6f6a:	2100      	movs	r1, #0
   b6f6c:	f7ff be56 	b.w	b6c1c <network_is_off>

000b6f70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6f70:	6840      	ldr	r0, [r0, #4]
   b6f72:	2200      	movs	r2, #0
   b6f74:	f081 0101 	eor.w	r1, r1, #1
   b6f78:	f7ff be28 	b.w	b6bcc <network_listen>

000b6f7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6f7c:	6840      	ldr	r0, [r0, #4]
   b6f7e:	2200      	movs	r2, #0
   b6f80:	f7ff be34 	b.w	b6bec <network_set_listen_timeout>

000b6f84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6f84:	2200      	movs	r2, #0
   b6f86:	6840      	ldr	r0, [r0, #4]
   b6f88:	4611      	mov	r1, r2
   b6f8a:	f7ff be37 	b.w	b6bfc <network_get_listen_timeout>

000b6f8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6f8e:	2200      	movs	r2, #0
   b6f90:	6840      	ldr	r0, [r0, #4]
   b6f92:	4611      	mov	r1, r2
   b6f94:	f7ff be22 	b.w	b6bdc <network_listening>

000b6f98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f9c:	b095      	sub	sp, #84	; 0x54
   b6f9e:	4614      	mov	r4, r2
   b6fa0:	460d      	mov	r5, r1
   b6fa2:	4607      	mov	r7, r0
    IPAddress addr;
   b6fa4:	f7ff ff76 	bl	b6e94 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6fa8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6faa:	221c      	movs	r2, #28
   b6fac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6fae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6fb0:	f000 fd16 	bl	b79e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6fb4:	2340      	movs	r3, #64	; 0x40
   b6fb6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6fb8:	4620      	mov	r0, r4
   b6fba:	466b      	mov	r3, sp
   b6fbc:	aa0c      	add	r2, sp, #48	; 0x30
   b6fbe:	2100      	movs	r1, #0
   b6fc0:	f7ff fcd8 	bl	b6974 <netdb_getaddrinfo>
    if (!r) {
   b6fc4:	4604      	mov	r4, r0
   b6fc6:	2800      	cmp	r0, #0
   b6fc8:	d14b      	bne.n	b7062 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6fca:	4602      	mov	r2, r0
   b6fcc:	2101      	movs	r1, #1
   b6fce:	6868      	ldr	r0, [r5, #4]
   b6fd0:	f7ff fde4 	bl	b6b9c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6fd4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6fd6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6fd8:	4622      	mov	r2, r4
   b6fda:	6868      	ldr	r0, [r5, #4]
   b6fdc:	f7ff fdde 	bl	b6b9c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6fe0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6fe2:	4681      	mov	r9, r0
        bool ok = false;
   b6fe4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6fe6:	2e00      	cmp	r6, #0
   b6fe8:	d03b      	beq.n	b7062 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6fea:	2900      	cmp	r1, #0
   b6fec:	d139      	bne.n	b7062 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6fee:	6873      	ldr	r3, [r6, #4]
   b6ff0:	2b02      	cmp	r3, #2
   b6ff2:	d003      	beq.n	b6ffc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ff4:	2b0a      	cmp	r3, #10
   b6ff6:	d011      	beq.n	b701c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ff8:	69f6      	ldr	r6, [r6, #28]
   b6ffa:	e7f4      	b.n	b6fe6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ffc:	f1b8 0f00 	cmp.w	r8, #0
   b7000:	d0fa      	beq.n	b6ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7002:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7004:	a806      	add	r0, sp, #24
   b7006:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7008:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b700a:	f7ff ff71 	bl	b6ef0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b700e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7010:	1d3c      	adds	r4, r7, #4
   b7012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7014:	682b      	ldr	r3, [r5, #0]
   b7016:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7018:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b701a:	e7ed      	b.n	b6ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b701c:	f1b9 0f00 	cmp.w	r9, #0
   b7020:	d0ea      	beq.n	b6ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7022:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7024:	2210      	movs	r2, #16
   b7026:	a801      	add	r0, sp, #4
   b7028:	f000 fcda 	bl	b79e0 <memset>
                    a.v = 6;
   b702c:	2306      	movs	r3, #6
   b702e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7032:	ad01      	add	r5, sp, #4
   b7034:	f104 0308 	add.w	r3, r4, #8
   b7038:	3418      	adds	r4, #24
   b703a:	6818      	ldr	r0, [r3, #0]
   b703c:	6859      	ldr	r1, [r3, #4]
   b703e:	462a      	mov	r2, r5
   b7040:	c203      	stmia	r2!, {r0, r1}
   b7042:	3308      	adds	r3, #8
   b7044:	42a3      	cmp	r3, r4
   b7046:	4615      	mov	r5, r2
   b7048:	d1f7      	bne.n	b703a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b704a:	a901      	add	r1, sp, #4
   b704c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b704e:	ad07      	add	r5, sp, #28
   b7050:	f7ff ff2e 	bl	b6eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7056:	1d3c      	adds	r4, r7, #4
   b7058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b705a:	682b      	ldr	r3, [r5, #0]
   b705c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b705e:	4649      	mov	r1, r9
   b7060:	e7ca      	b.n	b6ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7062:	9800      	ldr	r0, [sp, #0]
   b7064:	f7ff fc7e 	bl	b6964 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7068:	4638      	mov	r0, r7
   b706a:	b015      	add	sp, #84	; 0x54
   b706c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7070:	4b02      	ldr	r3, [pc, #8]	; (b707c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7072:	4a03      	ldr	r2, [pc, #12]	; (b7080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7074:	601a      	str	r2, [r3, #0]
   b7076:	2200      	movs	r2, #0
   b7078:	605a      	str	r2, [r3, #4]

} // spark
   b707a:	4770      	bx	lr
   b707c:	2003e6d4 	.word	0x2003e6d4
   b7080:	000b8cb4 	.word	0x000b8cb4

000b7084 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7086:	4606      	mov	r6, r0
   b7088:	460d      	mov	r5, r1
  size_t n = 0;
   b708a:	188f      	adds	r7, r1, r2
   b708c:	2400      	movs	r4, #0
  while (size--) {
   b708e:	42bd      	cmp	r5, r7
   b7090:	d00c      	beq.n	b70ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7092:	6833      	ldr	r3, [r6, #0]
   b7094:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7098:	689b      	ldr	r3, [r3, #8]
   b709a:	4630      	mov	r0, r6
   b709c:	4798      	blx	r3
     if (chunk>=0)
   b709e:	1e03      	subs	r3, r0, #0
   b70a0:	db01      	blt.n	b70a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b70a2:	441c      	add	r4, r3
  while (size--) {
   b70a4:	e7f3      	b.n	b708e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b70a6:	2c00      	cmp	r4, #0
   b70a8:	bf08      	it	eq
   b70aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b70ac:	4620      	mov	r0, r4
   b70ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70b0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b70b0:	b513      	push	{r0, r1, r4, lr}
   b70b2:	4604      	mov	r4, r0
    }
   b70b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b70b6:	b159      	cbz	r1, b70d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b70b8:	9101      	str	r1, [sp, #4]
   b70ba:	f000 fcd7 	bl	b7a6c <strlen>
   b70be:	6823      	ldr	r3, [r4, #0]
   b70c0:	9901      	ldr	r1, [sp, #4]
   b70c2:	68db      	ldr	r3, [r3, #12]
   b70c4:	4602      	mov	r2, r0
   b70c6:	4620      	mov	r0, r4
    }
   b70c8:	b002      	add	sp, #8
   b70ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b70ce:	4718      	bx	r3
    }
   b70d0:	b002      	add	sp, #8
   b70d2:	bd10      	pop	{r4, pc}

000b70d4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b70d4:	b508      	push	{r3, lr}
  return write(str);
   b70d6:	f7ff ffeb 	bl	b70b0 <_ZN5Print5writeEPKc>
}
   b70da:	bd08      	pop	{r3, pc}

000b70dc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b70dc:	6803      	ldr	r3, [r0, #0]
   b70de:	689b      	ldr	r3, [r3, #8]
   b70e0:	4718      	bx	r3

000b70e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b70e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b70e4:	210d      	movs	r1, #13
{
   b70e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b70e8:	f7ff fff8 	bl	b70dc <_ZN5Print5printEc>
  n += print('\n');
   b70ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b70ee:	4604      	mov	r4, r0
  n += print('\n');
   b70f0:	4628      	mov	r0, r5
   b70f2:	f7ff fff3 	bl	b70dc <_ZN5Print5printEc>
  return n;
}
   b70f6:	4420      	add	r0, r4
   b70f8:	bd38      	pop	{r3, r4, r5, pc}

000b70fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b70fa:	b538      	push	{r3, r4, r5, lr}
   b70fc:	4605      	mov	r5, r0
  return write(str);
   b70fe:	f7ff ffd7 	bl	b70b0 <_ZN5Print5writeEPKc>
   b7102:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7104:	4628      	mov	r0, r5
   b7106:	f7ff ffec 	bl	b70e2 <_ZN5Print7printlnEv>
  return n;
}
   b710a:	4420      	add	r0, r4
   b710c:	bd38      	pop	{r3, r4, r5, pc}

000b710e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b710e:	b530      	push	{r4, r5, lr}
   b7110:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7112:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7114:	2a01      	cmp	r2, #1
  *str = '\0';
   b7116:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b711a:	bf98      	it	ls
   b711c:	220a      	movls	r2, #10
   b711e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7120:	460d      	mov	r5, r1
   b7122:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7126:	fb01 5312 	mls	r3, r1, r2, r5
   b712a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b712e:	2b09      	cmp	r3, #9
   b7130:	bf94      	ite	ls
   b7132:	3330      	addls	r3, #48	; 0x30
   b7134:	3337      	addhi	r3, #55	; 0x37
   b7136:	b2db      	uxtb	r3, r3
  } while(n);
   b7138:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b713a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b713e:	d9ef      	bls.n	b7120 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7140:	4621      	mov	r1, r4
   b7142:	f7ff ffb5 	bl	b70b0 <_ZN5Print5writeEPKc>
}
   b7146:	b00b      	add	sp, #44	; 0x2c
   b7148:	bd30      	pop	{r4, r5, pc}

000b714a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b714e:	b086      	sub	sp, #24
   b7150:	af00      	add	r7, sp, #0
   b7152:	4605      	mov	r5, r0
   b7154:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7156:	1d38      	adds	r0, r7, #4
   b7158:	2114      	movs	r1, #20
{
   b715a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b715c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b715e:	f7ff fd85 	bl	b6c6c <vsnprintf>

    if (n<bufsize)
   b7162:	2813      	cmp	r0, #19
   b7164:	d80e      	bhi.n	b7184 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7166:	1d39      	adds	r1, r7, #4
   b7168:	4628      	mov	r0, r5
   b716a:	f7ff ffa1 	bl	b70b0 <_ZN5Print5writeEPKc>
   b716e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7170:	b11e      	cbz	r6, b717a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7172:	4628      	mov	r0, r5
   b7174:	f7ff ffb5 	bl	b70e2 <_ZN5Print7printlnEv>
   b7178:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b717a:	4620      	mov	r0, r4
   b717c:	3718      	adds	r7, #24
   b717e:	46bd      	mov	sp, r7
   b7180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7184:	f100 0308 	add.w	r3, r0, #8
   b7188:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b718c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b718e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7192:	4622      	mov	r2, r4
   b7194:	1c41      	adds	r1, r0, #1
   b7196:	683b      	ldr	r3, [r7, #0]
   b7198:	4668      	mov	r0, sp
   b719a:	f7ff fd67 	bl	b6c6c <vsnprintf>
  return write(str);
   b719e:	4669      	mov	r1, sp
   b71a0:	4628      	mov	r0, r5
   b71a2:	f7ff ff85 	bl	b70b0 <_ZN5Print5writeEPKc>
   b71a6:	4604      	mov	r4, r0
   b71a8:	46c5      	mov	sp, r8
   b71aa:	e7e1      	b.n	b7170 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b71ac <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b71ac:	4b01      	ldr	r3, [pc, #4]	; (b71b4 <_GLOBAL__sub_I_RGB+0x8>)
   b71ae:	2200      	movs	r2, #0
   b71b0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b71b2:	4770      	bx	lr
   b71b4:	2003e6dc 	.word	0x2003e6dc

000b71b8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b71b8:	2100      	movs	r1, #0
   b71ba:	f7ff bc1b 	b.w	b69f4 <hal_spi_release>

000b71be <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b71be:	2100      	movs	r1, #0
   b71c0:	f7ff bc10 	b.w	b69e4 <hal_spi_acquire>

000b71c4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b71c4:	b510      	push	{r4, lr}
   b71c6:	4604      	mov	r4, r0
   b71c8:	4608      	mov	r0, r1
{
    _spi = spi;
   b71ca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b71cc:	f7ff fbea 	bl	b69a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b71d0:	2300      	movs	r3, #0
   b71d2:	6063      	str	r3, [r4, #4]
}
   b71d4:	4620      	mov	r0, r4
   b71d6:	bd10      	pop	{r4, pc}

000b71d8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b71d8:	b513      	push	{r0, r1, r4, lr}
   b71da:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b71dc:	7800      	ldrb	r0, [r0, #0]
   b71de:	f7ff ffee 	bl	b71be <_ZN8SPIClass4lockEv.isra.0>
   b71e2:	b958      	cbnz	r0, b71fc <_ZN8SPIClass5beginEv+0x24>
   b71e4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b71e6:	9001      	str	r0, [sp, #4]
   b71e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b71ec:	f7ff fbca 	bl	b6984 <hal_spi_begin>
        unlock();
   b71f0:	9801      	ldr	r0, [sp, #4]
    }
}
   b71f2:	b002      	add	sp, #8
   b71f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b71f8:	f7ff bfde 	b.w	b71b8 <_ZN8SPIClass6unlockEv.isra.0>
   b71fc:	b002      	add	sp, #8
   b71fe:	bd10      	pop	{r4, pc}

000b7200 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7200:	7800      	ldrb	r0, [r0, #0]
   b7202:	f7ff bfd9 	b.w	b71b8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7208 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7208:	0840      	lsrs	r0, r0, #1
{
   b720a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b720c:	6018      	str	r0, [r3, #0]
   b720e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7210:	6818      	ldr	r0, [r3, #0]
   b7212:	4288      	cmp	r0, r1
   b7214:	b2e5      	uxtb	r5, r4
   b7216:	d906      	bls.n	b7226 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7218:	3401      	adds	r4, #1
   b721a:	2c08      	cmp	r4, #8
   b721c:	d002      	beq.n	b7224 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b721e:	0840      	lsrs	r0, r0, #1
   b7220:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7222:	e7f5      	b.n	b7210 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7224:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7228:	5d5b      	ldrb	r3, [r3, r5]
   b722a:	7013      	strb	r3, [r2, #0]
}
   b722c:	bd30      	pop	{r4, r5, pc}
   b722e:	bf00      	nop
   b7230:	000b8ce8 	.word	0x000b8ce8

000b7234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7238:	4606      	mov	r6, r0
   b723a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b723c:	7800      	ldrb	r0, [r0, #0]
{
   b723e:	460c      	mov	r4, r1
    CHECK(lock());
   b7240:	f7ff ffbd 	bl	b71be <_ZN8SPIClass4lockEv.isra.0>
   b7244:	2800      	cmp	r0, #0
   b7246:	db1b      	blt.n	b7280 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7248:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b724a:	2214      	movs	r2, #20
   b724c:	2100      	movs	r1, #0
   b724e:	a809      	add	r0, sp, #36	; 0x24
   b7250:	f000 fbc6 	bl	b79e0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7254:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7256:	2200      	movs	r2, #0
   b7258:	a909      	add	r1, sp, #36	; 0x24
   b725a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b725c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7260:	f7ff fbb0 	bl	b69c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7264:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7268:	b113      	cbz	r3, b7270 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b726a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b726e:	b155      	cbz	r5, b7286 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7270:	2700      	movs	r7, #0
   b7272:	46b9      	mov	r9, r7
   b7274:	46b8      	mov	r8, r7
   b7276:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7278:	7923      	ldrb	r3, [r4, #4]
   b727a:	b15d      	cbz	r5, b7294 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b727c:	b1c3      	cbz	r3, b72b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b727e:	2000      	movs	r0, #0
}
   b7280:	b00f      	add	sp, #60	; 0x3c
   b7282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7286:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b728a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b728e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7292:	e7f1      	b.n	b7278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7294:	2b00      	cmp	r3, #0
   b7296:	d135      	bne.n	b7304 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7298:	68a3      	ldr	r3, [r4, #8]
   b729a:	4543      	cmp	r3, r8
   b729c:	d108      	bne.n	b72b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b729e:	f88d 9020 	strb.w	r9, [sp, #32]
   b72a2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b72a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b72aa:	89a3      	ldrh	r3, [r4, #12]
   b72ac:	429a      	cmp	r2, r3
   b72ae:	d0e6      	beq.n	b727e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b72b0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b72b2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b72b4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b72b8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b72ba:	ab04      	add	r3, sp, #16
   b72bc:	f10d 020f 	add.w	r2, sp, #15
   b72c0:	f7ff ffa2 	bl	b7208 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b72c4:	7921      	ldrb	r1, [r4, #4]
   b72c6:	b985      	cbnz	r5, b72ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b72c8:	b989      	cbnz	r1, b72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b72ca:	68a3      	ldr	r3, [r4, #8]
   b72cc:	4543      	cmp	r3, r8
   b72ce:	d30e      	bcc.n	b72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b72d0:	f88d 9020 	strb.w	r9, [sp, #32]
   b72d4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b72d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b72dc:	89a3      	ldrh	r3, [r4, #12]
   b72de:	429a      	cmp	r2, r3
   b72e0:	d105      	bne.n	b72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b72e2:	9b04      	ldr	r3, [sp, #16]
   b72e4:	4543      	cmp	r3, r8
   b72e6:	d102      	bne.n	b72ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b72e8:	e7c9      	b.n	b727e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b72ea:	2900      	cmp	r1, #0
   b72ec:	d1f9      	bne.n	b72e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b72ee:	2300      	movs	r3, #0
   b72f0:	9301      	str	r3, [sp, #4]
   b72f2:	7b63      	ldrb	r3, [r4, #13]
   b72f4:	9300      	str	r3, [sp, #0]
   b72f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b72fa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b72fc:	7830      	ldrb	r0, [r6, #0]
   b72fe:	f7ff fb69 	bl	b69d4 <hal_spi_set_settings>
   b7302:	e7bc      	b.n	b727e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7304:	e9cd 5500 	strd	r5, r5, [sp]
   b7308:	462b      	mov	r3, r5
   b730a:	462a      	mov	r2, r5
   b730c:	2101      	movs	r1, #1
   b730e:	e7f5      	b.n	b72fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7310 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7310:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7312:	7800      	ldrb	r0, [r0, #0]
   b7314:	f7ff fb3e 	bl	b6994 <hal_spi_transfer>
}
   b7318:	b2c0      	uxtb	r0, r0
   b731a:	bd08      	pop	{r3, pc}

000b731c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b731c:	b510      	push	{r4, lr}
   b731e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7320:	6800      	ldr	r0, [r0, #0]
   b7322:	b108      	cbz	r0, b7328 <_ZN6String10invalidateEv+0xc>
   b7324:	f7ff fc8a 	bl	b6c3c <free>
	buffer = NULL;
   b7328:	2300      	movs	r3, #0
	capacity = len = 0;
   b732a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b732e:	6023      	str	r3, [r4, #0]
}
   b7330:	bd10      	pop	{r4, pc}

000b7332 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7332:	b538      	push	{r3, r4, r5, lr}
   b7334:	4604      	mov	r4, r0
   b7336:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7338:	6800      	ldr	r0, [r0, #0]
   b733a:	3101      	adds	r1, #1
   b733c:	f7ff fc86 	bl	b6c4c <realloc>
	if (newbuffer) {
   b7340:	b110      	cbz	r0, b7348 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7342:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7346:	2001      	movs	r0, #1
	}
	return 0;
}
   b7348:	bd38      	pop	{r3, r4, r5, pc}

000b734a <_ZN6String7reserveEj>:
{
   b734a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b734c:	6803      	ldr	r3, [r0, #0]
{
   b734e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7350:	b123      	cbz	r3, b735c <_ZN6String7reserveEj+0x12>
   b7352:	6843      	ldr	r3, [r0, #4]
   b7354:	428b      	cmp	r3, r1
   b7356:	d301      	bcc.n	b735c <_ZN6String7reserveEj+0x12>
   b7358:	2001      	movs	r0, #1
}
   b735a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff ffe8 	bl	b7332 <_ZN6String12changeBufferEj>
   b7362:	2800      	cmp	r0, #0
   b7364:	d0f9      	beq.n	b735a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7366:	68a3      	ldr	r3, [r4, #8]
   b7368:	2b00      	cmp	r3, #0
   b736a:	d1f5      	bne.n	b7358 <_ZN6String7reserveEj+0xe>
   b736c:	6822      	ldr	r2, [r4, #0]
   b736e:	7013      	strb	r3, [r2, #0]
   b7370:	e7f2      	b.n	b7358 <_ZN6String7reserveEj+0xe>

000b7372 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7372:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7374:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7376:	4611      	mov	r1, r2
   b7378:	9201      	str	r2, [sp, #4]
{
   b737a:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b737c:	f7ff ffe5 	bl	b734a <_ZN6String7reserveEj>
   b7380:	9a01      	ldr	r2, [sp, #4]
   b7382:	b928      	cbnz	r0, b7390 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7384:	4620      	mov	r0, r4
   b7386:	f7ff ffc9 	bl	b731c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b738a:	4620      	mov	r0, r4
   b738c:	b003      	add	sp, #12
   b738e:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7390:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7392:	4629      	mov	r1, r5
   b7394:	6820      	ldr	r0, [r4, #0]
   b7396:	f000 fb15 	bl	b79c4 <memcpy>
	buffer[len] = 0;
   b739a:	6822      	ldr	r2, [r4, #0]
   b739c:	68a3      	ldr	r3, [r4, #8]
   b739e:	2100      	movs	r1, #0
   b73a0:	54d1      	strb	r1, [r2, r3]
	return *this;
   b73a2:	e7f2      	b.n	b738a <_ZN6String4copyEPKcj+0x18>

000b73a4 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b73a4:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b73a6:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b73a8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b73ac:	4604      	mov	r4, r0
	len = 0;
   b73ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b73b0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b73b2:	b141      	cbz	r1, b73c6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b73b4:	4608      	mov	r0, r1
   b73b6:	9101      	str	r1, [sp, #4]
   b73b8:	f000 fb58 	bl	b7a6c <strlen>
   b73bc:	9901      	ldr	r1, [sp, #4]
   b73be:	4602      	mov	r2, r0
   b73c0:	4620      	mov	r0, r4
   b73c2:	f7ff ffd6 	bl	b7372 <_ZN6String4copyEPKcj>
}
   b73c6:	4620      	mov	r0, r4
   b73c8:	b002      	add	sp, #8
   b73ca:	bd10      	pop	{r4, pc}

000b73cc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b73cc:	b513      	push	{r0, r1, r4, lr}
   b73ce:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b73d0:	b159      	cbz	r1, b73ea <_ZN6StringaSEPKc+0x1e>
   b73d2:	4608      	mov	r0, r1
   b73d4:	9101      	str	r1, [sp, #4]
   b73d6:	f000 fb49 	bl	b7a6c <strlen>
   b73da:	9901      	ldr	r1, [sp, #4]
   b73dc:	4602      	mov	r2, r0
   b73de:	4620      	mov	r0, r4
   b73e0:	f7ff ffc7 	bl	b7372 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73e4:	4620      	mov	r0, r4
   b73e6:	b002      	add	sp, #8
   b73e8:	bd10      	pop	{r4, pc}
	else invalidate();
   b73ea:	f7ff ff97 	bl	b731c <_ZN6String10invalidateEv>
   b73ee:	e7f9      	b.n	b73e4 <_ZN6StringaSEPKc+0x18>

000b73f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b73f0:	4b05      	ldr	r3, [pc, #20]	; (b7408 <_GLOBAL__sub_I_System+0x18>)
   b73f2:	2202      	movs	r2, #2
   b73f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b73f6:	4b05      	ldr	r3, [pc, #20]	; (b740c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b73f8:	4a05      	ldr	r2, [pc, #20]	; (b7410 <_GLOBAL__sub_I_System+0x20>)
   b73fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b73fc:	2000      	movs	r0, #0
   b73fe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7402:	f7ff bb7f 	b.w	b6b04 <set_system_mode>
   b7406:	bf00      	nop
   b7408:	2003e6f8 	.word	0x2003e6f8
   b740c:	2003e6ec 	.word	0x2003e6ec
   b7410:	ffff0000 	.word	0xffff0000

000b7414 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7414:	4b02      	ldr	r3, [pc, #8]	; (b7420 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7416:	681a      	ldr	r2, [r3, #0]
   b7418:	4b02      	ldr	r3, [pc, #8]	; (b7424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b741a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b741c:	4770      	bx	lr
   b741e:	bf00      	nop
   b7420:	2003e570 	.word	0x2003e570
   b7424:	2003e6fc 	.word	0x2003e6fc

000b7428 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7428:	4770      	bx	lr

000b742a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b742a:	7441      	strb	r1, [r0, #17]
}
   b742c:	4770      	bx	lr

000b742e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b742e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7430:	7c00      	ldrb	r0, [r0, #16]
   b7432:	f7ff fb17 	bl	b6a64 <hal_usart_available_data_for_write>
}
   b7436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b743a:	bd08      	pop	{r3, pc}

000b743c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b743c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b743e:	7c00      	ldrb	r0, [r0, #16]
   b7440:	f7ff fae8 	bl	b6a14 <hal_usart_available>
}
   b7444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7448:	bd08      	pop	{r3, pc}

000b744a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b744a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b744c:	7c00      	ldrb	r0, [r0, #16]
   b744e:	f7ff faf1 	bl	b6a34 <hal_usart_peek>
}
   b7452:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7456:	bd08      	pop	{r3, pc}

000b7458 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7458:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b745a:	7c00      	ldrb	r0, [r0, #16]
   b745c:	f7ff fae2 	bl	b6a24 <hal_usart_read>
}
   b7460:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7464:	bd08      	pop	{r3, pc}

000b7466 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7466:	7c00      	ldrb	r0, [r0, #16]
   b7468:	f7ff baec 	b.w	b6a44 <hal_usart_flush>

000b746c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b746c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b746e:	7c45      	ldrb	r5, [r0, #17]
{
   b7470:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7472:	b12d      	cbz	r5, b7480 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7474:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7476:	b003      	add	sp, #12
   b7478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b747c:	f7ff bac2 	b.w	b6a04 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7480:	7c00      	ldrb	r0, [r0, #16]
   b7482:	9101      	str	r1, [sp, #4]
   b7484:	f7ff faee 	bl	b6a64 <hal_usart_available_data_for_write>
   b7488:	2800      	cmp	r0, #0
   b748a:	9901      	ldr	r1, [sp, #4]
   b748c:	dcf2      	bgt.n	b7474 <_ZN11USARTSerial5writeEh+0x8>
}
   b748e:	4628      	mov	r0, r5
   b7490:	b003      	add	sp, #12
   b7492:	bd30      	pop	{r4, r5, pc}

000b7494 <_ZN11USARTSerialD0Ev>:
   b7494:	b510      	push	{r4, lr}
   b7496:	2114      	movs	r1, #20
   b7498:	4604      	mov	r4, r0
   b749a:	f7fc fdfc 	bl	b4096 <_ZdlPvj>
   b749e:	4620      	mov	r0, r4
   b74a0:	bd10      	pop	{r4, pc}
	...

000b74a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b74a4:	b510      	push	{r4, lr}
   b74a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74aa:	4604      	mov	r4, r0
   b74ac:	4608      	mov	r0, r1
   b74ae:	4611      	mov	r1, r2
   b74b0:	2200      	movs	r2, #0
   b74b2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b74b6:	4b04      	ldr	r3, [pc, #16]	; (b74c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b74b8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b74ba:	2301      	movs	r3, #1
  _serial = serial;
   b74bc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b74be:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b74c0:	f7ff fad8 	bl	b6a74 <hal_usart_init_ex>
}
   b74c4:	4620      	mov	r0, r4
   b74c6:	bd10      	pop	{r4, pc}
   b74c8:	000b8d14 	.word	0x000b8d14

000b74cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b74cc:	7441      	strb	r1, [r0, #17]
}
   b74ce:	4770      	bx	lr

000b74d0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74d0:	4770      	bx	lr

000b74d2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b74d2:	4770      	bx	lr

000b74d4 <_ZN9USBSerial4readEv>:
{
   b74d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b74d6:	2100      	movs	r1, #0
   b74d8:	7c00      	ldrb	r0, [r0, #16]
   b74da:	f7ff faf3 	bl	b6ac4 <HAL_USB_USART_Receive_Data>
}
   b74de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b74e2:	bd08      	pop	{r3, pc}

000b74e4 <_ZN9USBSerial4peekEv>:
{
   b74e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b74e6:	2101      	movs	r1, #1
   b74e8:	7c00      	ldrb	r0, [r0, #16]
   b74ea:	f7ff faeb 	bl	b6ac4 <HAL_USB_USART_Receive_Data>
}
   b74ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b74f2:	bd08      	pop	{r3, pc}

000b74f4 <_ZN9USBSerial17availableForWriteEv>:
{
   b74f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b74f6:	7c00      	ldrb	r0, [r0, #16]
   b74f8:	f7ff fadc 	bl	b6ab4 <HAL_USB_USART_Available_Data_For_Write>
}
   b74fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7500:	bd08      	pop	{r3, pc}

000b7502 <_ZN9USBSerial9availableEv>:
{
   b7502:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7504:	7c00      	ldrb	r0, [r0, #16]
   b7506:	f7ff facd 	bl	b6aa4 <HAL_USB_USART_Available_Data>
}
   b750a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b750e:	bd08      	pop	{r3, pc}

000b7510 <_ZN9USBSerial5writeEh>:
{
   b7510:	b513      	push	{r0, r1, r4, lr}
   b7512:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7514:	7c00      	ldrb	r0, [r0, #16]
{
   b7516:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7518:	f7ff facc 	bl	b6ab4 <HAL_USB_USART_Available_Data_For_Write>
   b751c:	2800      	cmp	r0, #0
   b751e:	9901      	ldr	r1, [sp, #4]
   b7520:	dc01      	bgt.n	b7526 <_ZN9USBSerial5writeEh+0x16>
   b7522:	7c60      	ldrb	r0, [r4, #17]
   b7524:	b120      	cbz	r0, b7530 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7526:	7c20      	ldrb	r0, [r4, #16]
   b7528:	f7ff fad4 	bl	b6ad4 <HAL_USB_USART_Send_Data>
   b752c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7530:	b002      	add	sp, #8
   b7532:	bd10      	pop	{r4, pc}

000b7534 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7534:	7c00      	ldrb	r0, [r0, #16]
   b7536:	f7ff bad5 	b.w	b6ae4 <HAL_USB_USART_Flush_Data>

000b753a <_ZN9USBSerialD0Ev>:
   b753a:	b510      	push	{r4, lr}
   b753c:	2114      	movs	r1, #20
   b753e:	4604      	mov	r4, r0
   b7540:	f7fc fda9 	bl	b4096 <_ZdlPvj>
   b7544:	4620      	mov	r0, r4
   b7546:	bd10      	pop	{r4, pc}

000b7548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7548:	b510      	push	{r4, lr}
   b754a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b754e:	4604      	mov	r4, r0
   b7550:	4608      	mov	r0, r1
   b7552:	2100      	movs	r1, #0
   b7554:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7558:	4b04      	ldr	r3, [pc, #16]	; (b756c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b755a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b755c:	2301      	movs	r3, #1
  _serial = serial;
   b755e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7560:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7562:	4611      	mov	r1, r2
   b7564:	f7ff fa8e 	bl	b6a84 <HAL_USB_USART_Init>
}
   b7568:	4620      	mov	r0, r4
   b756a:	bd10      	pop	{r4, pc}
   b756c:	000b8d44 	.word	0x000b8d44

000b7570 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7570:	7c00      	ldrb	r0, [r0, #16]
   b7572:	2200      	movs	r2, #0
   b7574:	f7ff ba8e 	b.w	b6a94 <HAL_USB_USART_Begin>

000b7578 <_Z19acquireSerialBufferv>:
{
   b7578:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b757a:	2214      	movs	r2, #20
{
   b757c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b757e:	2100      	movs	r1, #0
   b7580:	f000 fa2e 	bl	b79e0 <memset>
}
   b7584:	4620      	mov	r0, r4
   b7586:	bd10      	pop	{r4, pc}

000b7588 <_Z16_fetch_usbserialv>:
{
   b7588:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b758a:	4c0f      	ldr	r4, [pc, #60]	; (b75c8 <_Z16_fetch_usbserialv+0x40>)
{
   b758c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b758e:	a803      	add	r0, sp, #12
   b7590:	f7ff fff2 	bl	b7578 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7594:	7821      	ldrb	r1, [r4, #0]
   b7596:	f3bf 8f5b 	dmb	ish
   b759a:	f011 0101 	ands.w	r1, r1, #1
   b759e:	d10f      	bne.n	b75c0 <_Z16_fetch_usbserialv+0x38>
   b75a0:	4620      	mov	r0, r4
   b75a2:	9101      	str	r1, [sp, #4]
   b75a4:	f7fc fd84 	bl	b40b0 <__cxa_guard_acquire>
   b75a8:	9901      	ldr	r1, [sp, #4]
   b75aa:	b148      	cbz	r0, b75c0 <_Z16_fetch_usbserialv+0x38>
   b75ac:	aa03      	add	r2, sp, #12
   b75ae:	4807      	ldr	r0, [pc, #28]	; (b75cc <_Z16_fetch_usbserialv+0x44>)
   b75b0:	f7ff ffca 	bl	b7548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b75b4:	4620      	mov	r0, r4
   b75b6:	f7fc fd80 	bl	b40ba <__cxa_guard_release>
   b75ba:	4805      	ldr	r0, [pc, #20]	; (b75d0 <_Z16_fetch_usbserialv+0x48>)
   b75bc:	f000 f9f4 	bl	b79a8 <atexit>
	return _usbserial;
}
   b75c0:	4802      	ldr	r0, [pc, #8]	; (b75cc <_Z16_fetch_usbserialv+0x44>)
   b75c2:	b008      	add	sp, #32
   b75c4:	bd10      	pop	{r4, pc}
   b75c6:	bf00      	nop
   b75c8:	2003e700 	.word	0x2003e700
   b75cc:	2003e704 	.word	0x2003e704
   b75d0:	000b74d1 	.word	0x000b74d1

000b75d4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b75d4:	2200      	movs	r2, #0
   b75d6:	6840      	ldr	r0, [r0, #4]
   b75d8:	4611      	mov	r1, r2
   b75da:	f7ff badf 	b.w	b6b9c <network_ready>

000b75de <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b75de:	2200      	movs	r2, #0
   b75e0:	6840      	ldr	r0, [r0, #4]
   b75e2:	4611      	mov	r1, r2
   b75e4:	f7ff bafa 	b.w	b6bdc <network_listening>

000b75e8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b75e8:	2200      	movs	r2, #0
   b75ea:	6840      	ldr	r0, [r0, #4]
   b75ec:	4611      	mov	r1, r2
   b75ee:	f7ff bb05 	b.w	b6bfc <network_get_listen_timeout>

000b75f2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b75f2:	6840      	ldr	r0, [r0, #4]
   b75f4:	2200      	movs	r2, #0
   b75f6:	f7ff baf9 	b.w	b6bec <network_set_listen_timeout>

000b75fa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b75fa:	6840      	ldr	r0, [r0, #4]
   b75fc:	2200      	movs	r2, #0
   b75fe:	f081 0101 	eor.w	r1, r1, #1
   b7602:	f7ff bae3 	b.w	b6bcc <network_listen>

000b7606 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7606:	2300      	movs	r3, #0
   b7608:	6840      	ldr	r0, [r0, #4]
   b760a:	461a      	mov	r2, r3
   b760c:	4619      	mov	r1, r3
   b760e:	f7ff bad5 	b.w	b6bbc <network_off>

000b7612 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7612:	2300      	movs	r3, #0
   b7614:	6840      	ldr	r0, [r0, #4]
   b7616:	461a      	mov	r2, r3
   b7618:	4619      	mov	r1, r3
   b761a:	f7ff bac7 	b.w	b6bac <network_on>

000b761e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b761e:	2200      	movs	r2, #0
   b7620:	6840      	ldr	r0, [r0, #4]
   b7622:	4611      	mov	r1, r2
   b7624:	f7ff baaa 	b.w	b6b7c <network_connecting>

000b7628 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7628:	6840      	ldr	r0, [r0, #4]
   b762a:	2200      	movs	r2, #0
   b762c:	2102      	movs	r1, #2
   b762e:	f7ff baad 	b.w	b6b8c <network_disconnect>

000b7632 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7632:	2300      	movs	r3, #0
   b7634:	6840      	ldr	r0, [r0, #4]
   b7636:	461a      	mov	r2, r3
   b7638:	f7ff ba98 	b.w	b6b6c <network_connect>

000b763c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b763c:	4b02      	ldr	r3, [pc, #8]	; (b7648 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b763e:	2204      	movs	r2, #4
   b7640:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7642:	4a02      	ldr	r2, [pc, #8]	; (b764c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7644:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7646:	4770      	bx	lr
   b7648:	2003e718 	.word	0x2003e718
   b764c:	000b8d74 	.word	0x000b8d74

000b7650 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7650:	4b01      	ldr	r3, [pc, #4]	; (b7658 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7652:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7654:	4770      	bx	lr
   b7656:	bf00      	nop
   b7658:	2003e574 	.word	0x2003e574

000b765c <serialEventRun>:
{
   b765c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b765e:	4b0b      	ldr	r3, [pc, #44]	; (b768c <serialEventRun+0x30>)
   b7660:	b143      	cbz	r3, b7674 <serialEventRun+0x18>
   b7662:	f7ff ff91 	bl	b7588 <_Z16_fetch_usbserialv>
   b7666:	6803      	ldr	r3, [r0, #0]
   b7668:	691b      	ldr	r3, [r3, #16]
   b766a:	4798      	blx	r3
   b766c:	2800      	cmp	r0, #0
   b766e:	dd01      	ble.n	b7674 <serialEventRun+0x18>
        serialEvent();
   b7670:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7674:	4b06      	ldr	r3, [pc, #24]	; (b7690 <serialEventRun+0x34>)
   b7676:	b143      	cbz	r3, b768a <serialEventRun+0x2e>
   b7678:	f000 f970 	bl	b795c <_Z22__fetch_global_Serial1v>
   b767c:	6803      	ldr	r3, [r0, #0]
   b767e:	691b      	ldr	r3, [r3, #16]
   b7680:	4798      	blx	r3
   b7682:	2800      	cmp	r0, #0
   b7684:	dd01      	ble.n	b768a <serialEventRun+0x2e>
        serialEvent1();
   b7686:	f3af 8000 	nop.w
}
   b768a:	bd08      	pop	{r3, pc}
	...

000b7694 <_post_loop>:
{
   b7694:	b508      	push	{r3, lr}
	serialEventRun();
   b7696:	f7ff ffe1 	bl	b765c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b769a:	f7ff f8cb 	bl	b6834 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b769e:	4b01      	ldr	r3, [pc, #4]	; (b76a4 <_post_loop+0x10>)
   b76a0:	6018      	str	r0, [r3, #0]
}
   b76a2:	bd08      	pop	{r3, pc}
   b76a4:	2003e728 	.word	0x2003e728

000b76a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b76a8:	4805      	ldr	r0, [pc, #20]	; (b76c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b76aa:	4a06      	ldr	r2, [pc, #24]	; (b76c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b76ac:	4906      	ldr	r1, [pc, #24]	; (b76c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b76ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b76b0:	1a12      	subs	r2, r2, r0
   b76b2:	f000 f987 	bl	b79c4 <memcpy>
    __backup_sram_signature = signature;
   b76b6:	4b05      	ldr	r3, [pc, #20]	; (b76cc <_Z33system_initialize_user_backup_ramv+0x24>)
   b76b8:	4a05      	ldr	r2, [pc, #20]	; (b76d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b76ba:	601a      	str	r2, [r3, #0]
}
   b76bc:	bd08      	pop	{r3, pc}
   b76be:	bf00      	nop
   b76c0:	2003f400 	.word	0x2003f400
   b76c4:	2003f404 	.word	0x2003f404
   b76c8:	000b8ea0 	.word	0x000b8ea0
   b76cc:	2003f400 	.word	0x2003f400
   b76d0:	9a271c1e 	.word	0x9a271c1e

000b76d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b76d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b76d6:	2300      	movs	r3, #0
   b76d8:	9300      	str	r3, [sp, #0]
   b76da:	461a      	mov	r2, r3
   b76dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b76e0:	f7ff fa2a 	bl	b6b38 <system_ctrl_set_result>
}
   b76e4:	b003      	add	sp, #12
   b76e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b76ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b76ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b76ee:	8843      	ldrh	r3, [r0, #2]
   b76f0:	2b0a      	cmp	r3, #10
   b76f2:	d008      	beq.n	b7706 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b76f4:	2b50      	cmp	r3, #80	; 0x50
   b76f6:	d10b      	bne.n	b7710 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b76f8:	4b09      	ldr	r3, [pc, #36]	; (b7720 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b76fa:	681b      	ldr	r3, [r3, #0]
   b76fc:	b14b      	cbz	r3, b7712 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b76fe:	b003      	add	sp, #12
   b7700:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7704:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7706:	f7ff ffe5 	bl	b76d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b770a:	b003      	add	sp, #12
   b770c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7710:	2300      	movs	r3, #0
   b7712:	9300      	str	r3, [sp, #0]
   b7714:	461a      	mov	r2, r3
   b7716:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b771a:	f7ff fa0d 	bl	b6b38 <system_ctrl_set_result>
}
   b771e:	e7f4      	b.n	b770a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7720:	2003e724 	.word	0x2003e724

000b7724 <module_user_init_hook>:
{
   b7724:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7726:	4812      	ldr	r0, [pc, #72]	; (b7770 <module_user_init_hook+0x4c>)
   b7728:	2100      	movs	r1, #0
   b772a:	f7ff fab7 	bl	b6c9c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b772e:	4b11      	ldr	r3, [pc, #68]	; (b7774 <module_user_init_hook+0x50>)
   b7730:	681a      	ldr	r2, [r3, #0]
   b7732:	4b11      	ldr	r3, [pc, #68]	; (b7778 <module_user_init_hook+0x54>)
   b7734:	429a      	cmp	r2, r3
   b7736:	4b11      	ldr	r3, [pc, #68]	; (b777c <module_user_init_hook+0x58>)
   b7738:	bf0c      	ite	eq
   b773a:	2201      	moveq	r2, #1
   b773c:	2200      	movne	r2, #0
   b773e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7740:	d001      	beq.n	b7746 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7742:	f7ff ffb1 	bl	b76a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7746:	f7ff f865 	bl	b6814 <HAL_RNG_GetRandomNumber>
   b774a:	4604      	mov	r4, r0
    srand(seed);
   b774c:	f000 f960 	bl	b7a10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7750:	4b0b      	ldr	r3, [pc, #44]	; (b7780 <module_user_init_hook+0x5c>)
   b7752:	b113      	cbz	r3, b775a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7754:	4620      	mov	r0, r4
   b7756:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b775a:	2100      	movs	r1, #0
   b775c:	4808      	ldr	r0, [pc, #32]	; (b7780 <module_user_init_hook+0x5c>)
   b775e:	f7ff f9f5 	bl	b6b4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7766:	4807      	ldr	r0, [pc, #28]	; (b7784 <module_user_init_hook+0x60>)
   b7768:	2100      	movs	r1, #0
   b776a:	f7ff b9db 	b.w	b6b24 <system_ctrl_set_app_request_handler>
   b776e:	bf00      	nop
   b7770:	000b7651 	.word	0x000b7651
   b7774:	2003f400 	.word	0x2003f400
   b7778:	9a271c1e 	.word	0x9a271c1e
   b777c:	2003e720 	.word	0x2003e720
   b7780:	00000000 	.word	0x00000000
   b7784:	000b76ed 	.word	0x000b76ed

000b7788 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7788:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b778a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b778c:	d902      	bls.n	b7794 <pinAvailable+0xc>
    return false;
   b778e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7790:	b002      	add	sp, #8
   b7792:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7794:	f1a0 030b 	sub.w	r3, r0, #11
   b7798:	2b02      	cmp	r3, #2
   b779a:	d81a      	bhi.n	b77d2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b779c:	4c17      	ldr	r4, [pc, #92]	; (b77fc <pinAvailable+0x74>)
   b779e:	7821      	ldrb	r1, [r4, #0]
   b77a0:	f3bf 8f5b 	dmb	ish
   b77a4:	f011 0101 	ands.w	r1, r1, #1
   b77a8:	d10b      	bne.n	b77c2 <pinAvailable+0x3a>
   b77aa:	4620      	mov	r0, r4
   b77ac:	9101      	str	r1, [sp, #4]
   b77ae:	f7fc fc7f 	bl	b40b0 <__cxa_guard_acquire>
   b77b2:	9901      	ldr	r1, [sp, #4]
   b77b4:	b128      	cbz	r0, b77c2 <pinAvailable+0x3a>
   b77b6:	4812      	ldr	r0, [pc, #72]	; (b7800 <pinAvailable+0x78>)
   b77b8:	f7ff fd04 	bl	b71c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b77bc:	4620      	mov	r0, r4
   b77be:	f7fc fc7c 	bl	b40ba <__cxa_guard_release>
   b77c2:	4b0f      	ldr	r3, [pc, #60]	; (b7800 <pinAvailable+0x78>)
   b77c4:	7818      	ldrb	r0, [r3, #0]
   b77c6:	f7ff f8f5 	bl	b69b4 <hal_spi_is_enabled>
   b77ca:	2800      	cmp	r0, #0
   b77cc:	d1df      	bne.n	b778e <pinAvailable+0x6>
  return true; // 'pin' is available
   b77ce:	2001      	movs	r0, #1
   b77d0:	e7de      	b.n	b7790 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b77d2:	2801      	cmp	r0, #1
   b77d4:	d809      	bhi.n	b77ea <pinAvailable+0x62>
   b77d6:	f000 f881 	bl	b78dc <_Z19__fetch_global_Wirev>
   b77da:	2100      	movs	r1, #0
   b77dc:	7c00      	ldrb	r0, [r0, #16]
   b77de:	f7ff f8a9 	bl	b6934 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b77e2:	f080 0001 	eor.w	r0, r0, #1
   b77e6:	b2c0      	uxtb	r0, r0
   b77e8:	e7d2      	b.n	b7790 <pinAvailable+0x8>
   b77ea:	3809      	subs	r0, #9
   b77ec:	2801      	cmp	r0, #1
   b77ee:	d8ee      	bhi.n	b77ce <pinAvailable+0x46>
   b77f0:	f000 f8b4 	bl	b795c <_Z22__fetch_global_Serial1v>
   b77f4:	7c00      	ldrb	r0, [r0, #16]
   b77f6:	f7ff f92d 	bl	b6a54 <hal_usart_is_enabled>
   b77fa:	e7f2      	b.n	b77e2 <pinAvailable+0x5a>
   b77fc:	2003e5dc 	.word	0x2003e5dc
   b7800:	2003e5e0 	.word	0x2003e5e0

000b7804 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7804:	2823      	cmp	r0, #35	; 0x23
{
   b7806:	b538      	push	{r3, r4, r5, lr}
   b7808:	4604      	mov	r4, r0
   b780a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b780c:	d80a      	bhi.n	b7824 <pinMode+0x20>
   b780e:	29ff      	cmp	r1, #255	; 0xff
   b7810:	d008      	beq.n	b7824 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7812:	f7ff ffb9 	bl	b7788 <pinAvailable>
   b7816:	b128      	cbz	r0, b7824 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7818:	4629      	mov	r1, r5
   b781a:	4620      	mov	r0, r4
}
   b781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7820:	f7ff b818 	b.w	b6854 <HAL_Pin_Mode>
}
   b7824:	bd38      	pop	{r3, r4, r5, pc}

000b7826 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7826:	b538      	push	{r3, r4, r5, lr}
   b7828:	4604      	mov	r4, r0
   b782a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b782c:	f7ff f81a 	bl	b6864 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7830:	28ff      	cmp	r0, #255	; 0xff
   b7832:	d010      	beq.n	b7856 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7834:	2806      	cmp	r0, #6
   b7836:	d804      	bhi.n	b7842 <digitalWrite+0x1c>
   b7838:	234d      	movs	r3, #77	; 0x4d
   b783a:	fa23 f000 	lsr.w	r0, r3, r0
   b783e:	07c3      	lsls	r3, r0, #31
   b7840:	d409      	bmi.n	b7856 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7842:	4620      	mov	r0, r4
   b7844:	f7ff ffa0 	bl	b7788 <pinAvailable>
   b7848:	b128      	cbz	r0, b7856 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b784a:	4629      	mov	r1, r5
   b784c:	4620      	mov	r0, r4
}
   b784e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7852:	f7ff b80f 	b.w	b6874 <HAL_GPIO_Write>
}
   b7856:	bd38      	pop	{r3, r4, r5, pc}

000b7858 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7858:	b510      	push	{r4, lr}
   b785a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b785c:	f7ff f802 	bl	b6864 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7860:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7862:	b2db      	uxtb	r3, r3
   b7864:	2b01      	cmp	r3, #1
   b7866:	d908      	bls.n	b787a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7868:	4620      	mov	r0, r4
   b786a:	f7ff ff8d 	bl	b7788 <pinAvailable>
   b786e:	b120      	cbz	r0, b787a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7870:	4620      	mov	r0, r4
}
   b7872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7876:	f7ff b805 	b.w	b6884 <HAL_GPIO_Read>
}
   b787a:	2000      	movs	r0, #0
   b787c:	bd10      	pop	{r4, pc}

000b787e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b787e:	280d      	cmp	r0, #13
{
   b7880:	b510      	push	{r4, lr}
   b7882:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7884:	bf9c      	itt	ls
   b7886:	340e      	addls	r4, #14
   b7888:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b788a:	4620      	mov	r0, r4
   b788c:	f7ff ff7c 	bl	b7788 <pinAvailable>
   b7890:	b150      	cbz	r0, b78a8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7892:	2103      	movs	r1, #3
   b7894:	4620      	mov	r0, r4
   b7896:	f7fe ffd5 	bl	b6844 <HAL_Validate_Pin_Function>
   b789a:	2803      	cmp	r0, #3
   b789c:	d104      	bne.n	b78a8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b789e:	4620      	mov	r0, r4
}
   b78a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b78a4:	f7fe bff6 	b.w	b6894 <hal_adc_read>
}
   b78a8:	2000      	movs	r0, #0
   b78aa:	bd10      	pop	{r4, pc}

000b78ac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b78ac:	4770      	bx	lr
	...

000b78b0 <_Z17acquireWireBufferv>:
{
   b78b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b78b2:	2520      	movs	r5, #32
   b78b4:	2314      	movs	r3, #20
{
   b78b6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b78b8:	6003      	str	r3, [r0, #0]
   b78ba:	6085      	str	r5, [r0, #8]
   b78bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b78be:	4906      	ldr	r1, [pc, #24]	; (b78d8 <_Z17acquireWireBufferv+0x28>)
   b78c0:	4628      	mov	r0, r5
   b78c2:	f000 f86f 	bl	b79a4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b78c6:	4904      	ldr	r1, [pc, #16]	; (b78d8 <_Z17acquireWireBufferv+0x28>)
	};
   b78c8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b78ca:	4628      	mov	r0, r5
   b78cc:	f000 f86a 	bl	b79a4 <_ZnajRKSt9nothrow_t>
	};
   b78d0:	60e0      	str	r0, [r4, #12]
}
   b78d2:	4620      	mov	r0, r4
   b78d4:	bd38      	pop	{r3, r4, r5, pc}
   b78d6:	bf00      	nop
   b78d8:	000b8da8 	.word	0x000b8da8

000b78dc <_Z19__fetch_global_Wirev>:
{
   b78dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b78de:	4d0e      	ldr	r5, [pc, #56]	; (b7918 <_Z19__fetch_global_Wirev+0x3c>)
   b78e0:	7829      	ldrb	r1, [r5, #0]
   b78e2:	f3bf 8f5b 	dmb	ish
   b78e6:	f011 0401 	ands.w	r4, r1, #1
{
   b78ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b78ec:	d111      	bne.n	b7912 <_Z19__fetch_global_Wirev+0x36>
   b78ee:	4628      	mov	r0, r5
   b78f0:	f7fc fbde 	bl	b40b0 <__cxa_guard_acquire>
   b78f4:	b168      	cbz	r0, b7912 <_Z19__fetch_global_Wirev+0x36>
   b78f6:	a801      	add	r0, sp, #4
   b78f8:	f7ff ffda 	bl	b78b0 <_Z17acquireWireBufferv>
   b78fc:	aa01      	add	r2, sp, #4
   b78fe:	4621      	mov	r1, r4
   b7900:	4806      	ldr	r0, [pc, #24]	; (b791c <_Z19__fetch_global_Wirev+0x40>)
   b7902:	f7ff fa63 	bl	b6dcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7906:	4628      	mov	r0, r5
   b7908:	f7fc fbd7 	bl	b40ba <__cxa_guard_release>
   b790c:	4804      	ldr	r0, [pc, #16]	; (b7920 <_Z19__fetch_global_Wirev+0x44>)
   b790e:	f000 f84b 	bl	b79a8 <atexit>
	return wire;
}
   b7912:	4802      	ldr	r0, [pc, #8]	; (b791c <_Z19__fetch_global_Wirev+0x40>)
   b7914:	b007      	add	sp, #28
   b7916:	bd30      	pop	{r4, r5, pc}
   b7918:	2003e72c 	.word	0x2003e72c
   b791c:	2003e730 	.word	0x2003e730
   b7920:	000b78ad 	.word	0x000b78ad

000b7924 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7924:	4770      	bx	lr
	...

000b7928 <_Z20acquireSerial1Bufferv>:
{
   b7928:	b538      	push	{r3, r4, r5, lr}
   b792a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b792c:	2514      	movs	r5, #20
   b792e:	462a      	mov	r2, r5
   b7930:	2100      	movs	r1, #0
   b7932:	f000 f855 	bl	b79e0 <memset>
   b7936:	8025      	strh	r5, [r4, #0]
   b7938:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b793a:	4907      	ldr	r1, [pc, #28]	; (b7958 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b793c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b793e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7940:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7942:	f000 f82f 	bl	b79a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7946:	4904      	ldr	r1, [pc, #16]	; (b7958 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7948:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b794a:	4628      	mov	r0, r5
   b794c:	f000 f82a 	bl	b79a4 <_ZnajRKSt9nothrow_t>
    };
   b7950:	60e0      	str	r0, [r4, #12]
}
   b7952:	4620      	mov	r0, r4
   b7954:	bd38      	pop	{r3, r4, r5, pc}
   b7956:	bf00      	nop
   b7958:	000b8da8 	.word	0x000b8da8

000b795c <_Z22__fetch_global_Serial1v>:
{
   b795c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b795e:	4d0e      	ldr	r5, [pc, #56]	; (b7998 <_Z22__fetch_global_Serial1v+0x3c>)
   b7960:	7829      	ldrb	r1, [r5, #0]
   b7962:	f3bf 8f5b 	dmb	ish
   b7966:	f011 0401 	ands.w	r4, r1, #1
{
   b796a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b796c:	d111      	bne.n	b7992 <_Z22__fetch_global_Serial1v+0x36>
   b796e:	4628      	mov	r0, r5
   b7970:	f7fc fb9e 	bl	b40b0 <__cxa_guard_acquire>
   b7974:	b168      	cbz	r0, b7992 <_Z22__fetch_global_Serial1v+0x36>
   b7976:	a801      	add	r0, sp, #4
   b7978:	f7ff ffd6 	bl	b7928 <_Z20acquireSerial1Bufferv>
   b797c:	aa01      	add	r2, sp, #4
   b797e:	4621      	mov	r1, r4
   b7980:	4806      	ldr	r0, [pc, #24]	; (b799c <_Z22__fetch_global_Serial1v+0x40>)
   b7982:	f7ff fd8f 	bl	b74a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7986:	4628      	mov	r0, r5
   b7988:	f7fc fb97 	bl	b40ba <__cxa_guard_release>
   b798c:	4804      	ldr	r0, [pc, #16]	; (b79a0 <_Z22__fetch_global_Serial1v+0x44>)
   b798e:	f000 f80b 	bl	b79a8 <atexit>
    return serial1;
}
   b7992:	4802      	ldr	r0, [pc, #8]	; (b799c <_Z22__fetch_global_Serial1v+0x40>)
   b7994:	b007      	add	sp, #28
   b7996:	bd30      	pop	{r4, r5, pc}
   b7998:	2003e744 	.word	0x2003e744
   b799c:	2003e748 	.word	0x2003e748
   b79a0:	000b7925 	.word	0x000b7925

000b79a4 <_ZnajRKSt9nothrow_t>:
   b79a4:	f7fc bb75 	b.w	b4092 <_Znaj>

000b79a8 <atexit>:
   b79a8:	2300      	movs	r3, #0
   b79aa:	4601      	mov	r1, r0
   b79ac:	461a      	mov	r2, r3
   b79ae:	4618      	mov	r0, r3
   b79b0:	f000 b8c0 	b.w	b7b34 <__register_exitproc>

000b79b4 <calloc>:
   b79b4:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <calloc+0xc>)
   b79b6:	460a      	mov	r2, r1
   b79b8:	4601      	mov	r1, r0
   b79ba:	6818      	ldr	r0, [r3, #0]
   b79bc:	f000 b818 	b.w	b79f0 <_calloc_r>
   b79c0:	2003e574 	.word	0x2003e574

000b79c4 <memcpy>:
   b79c4:	440a      	add	r2, r1
   b79c6:	4291      	cmp	r1, r2
   b79c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b79cc:	d100      	bne.n	b79d0 <memcpy+0xc>
   b79ce:	4770      	bx	lr
   b79d0:	b510      	push	{r4, lr}
   b79d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b79d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b79da:	4291      	cmp	r1, r2
   b79dc:	d1f9      	bne.n	b79d2 <memcpy+0xe>
   b79de:	bd10      	pop	{r4, pc}

000b79e0 <memset>:
   b79e0:	4402      	add	r2, r0
   b79e2:	4603      	mov	r3, r0
   b79e4:	4293      	cmp	r3, r2
   b79e6:	d100      	bne.n	b79ea <memset+0xa>
   b79e8:	4770      	bx	lr
   b79ea:	f803 1b01 	strb.w	r1, [r3], #1
   b79ee:	e7f9      	b.n	b79e4 <memset+0x4>

000b79f0 <_calloc_r>:
   b79f0:	b513      	push	{r0, r1, r4, lr}
   b79f2:	434a      	muls	r2, r1
   b79f4:	4611      	mov	r1, r2
   b79f6:	9201      	str	r2, [sp, #4]
   b79f8:	f7ff f940 	bl	b6c7c <_malloc_r>
   b79fc:	4604      	mov	r4, r0
   b79fe:	b118      	cbz	r0, b7a08 <_calloc_r+0x18>
   b7a00:	9a01      	ldr	r2, [sp, #4]
   b7a02:	2100      	movs	r1, #0
   b7a04:	f7ff ffec 	bl	b79e0 <memset>
   b7a08:	4620      	mov	r0, r4
   b7a0a:	b002      	add	sp, #8
   b7a0c:	bd10      	pop	{r4, pc}
	...

000b7a10 <srand>:
   b7a10:	b538      	push	{r3, r4, r5, lr}
   b7a12:	4b10      	ldr	r3, [pc, #64]	; (b7a54 <srand+0x44>)
   b7a14:	681d      	ldr	r5, [r3, #0]
   b7a16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a18:	4604      	mov	r4, r0
   b7a1a:	b9b3      	cbnz	r3, b7a4a <srand+0x3a>
   b7a1c:	2018      	movs	r0, #24
   b7a1e:	f7ff f905 	bl	b6c2c <malloc>
   b7a22:	4602      	mov	r2, r0
   b7a24:	63a8      	str	r0, [r5, #56]	; 0x38
   b7a26:	b920      	cbnz	r0, b7a32 <srand+0x22>
   b7a28:	4b0b      	ldr	r3, [pc, #44]	; (b7a58 <srand+0x48>)
   b7a2a:	480c      	ldr	r0, [pc, #48]	; (b7a5c <srand+0x4c>)
   b7a2c:	2142      	movs	r1, #66	; 0x42
   b7a2e:	f7ff f92d 	bl	b6c8c <__assert_func>
   b7a32:	490b      	ldr	r1, [pc, #44]	; (b7a60 <srand+0x50>)
   b7a34:	4b0b      	ldr	r3, [pc, #44]	; (b7a64 <srand+0x54>)
   b7a36:	e9c0 1300 	strd	r1, r3, [r0]
   b7a3a:	4b0b      	ldr	r3, [pc, #44]	; (b7a68 <srand+0x58>)
   b7a3c:	6083      	str	r3, [r0, #8]
   b7a3e:	230b      	movs	r3, #11
   b7a40:	8183      	strh	r3, [r0, #12]
   b7a42:	2100      	movs	r1, #0
   b7a44:	2001      	movs	r0, #1
   b7a46:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7a4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a4c:	2200      	movs	r2, #0
   b7a4e:	611c      	str	r4, [r3, #16]
   b7a50:	615a      	str	r2, [r3, #20]
   b7a52:	bd38      	pop	{r3, r4, r5, pc}
   b7a54:	2003e574 	.word	0x2003e574
   b7a58:	000b8da9 	.word	0x000b8da9
   b7a5c:	000b8dc0 	.word	0x000b8dc0
   b7a60:	abcd330e 	.word	0xabcd330e
   b7a64:	e66d1234 	.word	0xe66d1234
   b7a68:	0005deec 	.word	0x0005deec

000b7a6c <strlen>:
   b7a6c:	4603      	mov	r3, r0
   b7a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7a72:	2a00      	cmp	r2, #0
   b7a74:	d1fb      	bne.n	b7a6e <strlen+0x2>
   b7a76:	1a18      	subs	r0, r3, r0
   b7a78:	3801      	subs	r0, #1
   b7a7a:	4770      	bx	lr

000b7a7c <strtok>:
   b7a7c:	4b16      	ldr	r3, [pc, #88]	; (b7ad8 <strtok+0x5c>)
   b7a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a80:	681e      	ldr	r6, [r3, #0]
   b7a82:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b7a84:	4605      	mov	r5, r0
   b7a86:	b9fc      	cbnz	r4, b7ac8 <strtok+0x4c>
   b7a88:	2050      	movs	r0, #80	; 0x50
   b7a8a:	9101      	str	r1, [sp, #4]
   b7a8c:	f7ff f8ce 	bl	b6c2c <malloc>
   b7a90:	9901      	ldr	r1, [sp, #4]
   b7a92:	65b0      	str	r0, [r6, #88]	; 0x58
   b7a94:	4602      	mov	r2, r0
   b7a96:	b920      	cbnz	r0, b7aa2 <strtok+0x26>
   b7a98:	4b10      	ldr	r3, [pc, #64]	; (b7adc <strtok+0x60>)
   b7a9a:	4811      	ldr	r0, [pc, #68]	; (b7ae0 <strtok+0x64>)
   b7a9c:	2157      	movs	r1, #87	; 0x57
   b7a9e:	f7ff f8f5 	bl	b6c8c <__assert_func>
   b7aa2:	e9c0 4400 	strd	r4, r4, [r0]
   b7aa6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b7aaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b7aae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b7ab2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b7ab6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b7aba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b7abe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b7ac2:	6184      	str	r4, [r0, #24]
   b7ac4:	7704      	strb	r4, [r0, #28]
   b7ac6:	6244      	str	r4, [r0, #36]	; 0x24
   b7ac8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b7aca:	2301      	movs	r3, #1
   b7acc:	4628      	mov	r0, r5
   b7ace:	b002      	add	sp, #8
   b7ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7ad4:	f000 b806 	b.w	b7ae4 <__strtok_r>
   b7ad8:	2003e574 	.word	0x2003e574
   b7adc:	000b8da9 	.word	0x000b8da9
   b7ae0:	000b8e19 	.word	0x000b8e19

000b7ae4 <__strtok_r>:
   b7ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ae6:	b908      	cbnz	r0, b7aec <__strtok_r+0x8>
   b7ae8:	6810      	ldr	r0, [r2, #0]
   b7aea:	b188      	cbz	r0, b7b10 <__strtok_r+0x2c>
   b7aec:	4604      	mov	r4, r0
   b7aee:	4620      	mov	r0, r4
   b7af0:	f814 5b01 	ldrb.w	r5, [r4], #1
   b7af4:	460f      	mov	r7, r1
   b7af6:	f817 6b01 	ldrb.w	r6, [r7], #1
   b7afa:	b91e      	cbnz	r6, b7b04 <__strtok_r+0x20>
   b7afc:	b965      	cbnz	r5, b7b18 <__strtok_r+0x34>
   b7afe:	6015      	str	r5, [r2, #0]
   b7b00:	4628      	mov	r0, r5
   b7b02:	e005      	b.n	b7b10 <__strtok_r+0x2c>
   b7b04:	42b5      	cmp	r5, r6
   b7b06:	d1f6      	bne.n	b7af6 <__strtok_r+0x12>
   b7b08:	2b00      	cmp	r3, #0
   b7b0a:	d1f0      	bne.n	b7aee <__strtok_r+0xa>
   b7b0c:	6014      	str	r4, [r2, #0]
   b7b0e:	7003      	strb	r3, [r0, #0]
   b7b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7b12:	461c      	mov	r4, r3
   b7b14:	e00c      	b.n	b7b30 <__strtok_r+0x4c>
   b7b16:	b915      	cbnz	r5, b7b1e <__strtok_r+0x3a>
   b7b18:	f814 3b01 	ldrb.w	r3, [r4], #1
   b7b1c:	460e      	mov	r6, r1
   b7b1e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b7b22:	42ab      	cmp	r3, r5
   b7b24:	d1f7      	bne.n	b7b16 <__strtok_r+0x32>
   b7b26:	2b00      	cmp	r3, #0
   b7b28:	d0f3      	beq.n	b7b12 <__strtok_r+0x2e>
   b7b2a:	2300      	movs	r3, #0
   b7b2c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b7b30:	6014      	str	r4, [r2, #0]
   b7b32:	e7ed      	b.n	b7b10 <__strtok_r+0x2c>

000b7b34 <__register_exitproc>:
   b7b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7bf4 <__register_exitproc+0xc0>
   b7b3c:	4606      	mov	r6, r0
   b7b3e:	f8d8 0000 	ldr.w	r0, [r8]
   b7b42:	461f      	mov	r7, r3
   b7b44:	460d      	mov	r5, r1
   b7b46:	4691      	mov	r9, r2
   b7b48:	f000 f856 	bl	b7bf8 <__retarget_lock_acquire_recursive>
   b7b4c:	4b25      	ldr	r3, [pc, #148]	; (b7be4 <__register_exitproc+0xb0>)
   b7b4e:	681c      	ldr	r4, [r3, #0]
   b7b50:	b934      	cbnz	r4, b7b60 <__register_exitproc+0x2c>
   b7b52:	4c25      	ldr	r4, [pc, #148]	; (b7be8 <__register_exitproc+0xb4>)
   b7b54:	601c      	str	r4, [r3, #0]
   b7b56:	4b25      	ldr	r3, [pc, #148]	; (b7bec <__register_exitproc+0xb8>)
   b7b58:	b113      	cbz	r3, b7b60 <__register_exitproc+0x2c>
   b7b5a:	681b      	ldr	r3, [r3, #0]
   b7b5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b60:	6863      	ldr	r3, [r4, #4]
   b7b62:	2b1f      	cmp	r3, #31
   b7b64:	dd07      	ble.n	b7b76 <__register_exitproc+0x42>
   b7b66:	f8d8 0000 	ldr.w	r0, [r8]
   b7b6a:	f000 f847 	bl	b7bfc <__retarget_lock_release_recursive>
   b7b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7b76:	b34e      	cbz	r6, b7bcc <__register_exitproc+0x98>
   b7b78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7b7c:	b988      	cbnz	r0, b7ba2 <__register_exitproc+0x6e>
   b7b7e:	4b1c      	ldr	r3, [pc, #112]	; (b7bf0 <__register_exitproc+0xbc>)
   b7b80:	b923      	cbnz	r3, b7b8c <__register_exitproc+0x58>
   b7b82:	f8d8 0000 	ldr.w	r0, [r8]
   b7b86:	f000 f838 	bl	b7bfa <__retarget_lock_release>
   b7b8a:	e7f0      	b.n	b7b6e <__register_exitproc+0x3a>
   b7b8c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7b90:	f7ff f84c 	bl	b6c2c <malloc>
   b7b94:	2800      	cmp	r0, #0
   b7b96:	d0f4      	beq.n	b7b82 <__register_exitproc+0x4e>
   b7b98:	2300      	movs	r3, #0
   b7b9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7b9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7ba2:	6863      	ldr	r3, [r4, #4]
   b7ba4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7ba8:	2201      	movs	r2, #1
   b7baa:	409a      	lsls	r2, r3
   b7bac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7bb0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7bb4:	4313      	orrs	r3, r2
   b7bb6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7bba:	2e02      	cmp	r6, #2
   b7bbc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7bc0:	bf02      	ittt	eq
   b7bc2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7bc6:	4313      	orreq	r3, r2
   b7bc8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7bcc:	6863      	ldr	r3, [r4, #4]
   b7bce:	f8d8 0000 	ldr.w	r0, [r8]
   b7bd2:	1c5a      	adds	r2, r3, #1
   b7bd4:	3302      	adds	r3, #2
   b7bd6:	6062      	str	r2, [r4, #4]
   b7bd8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7bdc:	f000 f80e 	bl	b7bfc <__retarget_lock_release_recursive>
   b7be0:	2000      	movs	r0, #0
   b7be2:	e7c6      	b.n	b7b72 <__register_exitproc+0x3e>
   b7be4:	2003e7e8 	.word	0x2003e7e8
   b7be8:	2003e75c 	.word	0x2003e75c
   b7bec:	00000000 	.word	0x00000000
   b7bf0:	000b6c2d 	.word	0x000b6c2d
   b7bf4:	2003e5d8 	.word	0x2003e5d8

000b7bf8 <__retarget_lock_acquire_recursive>:
   b7bf8:	4770      	bx	lr

000b7bfa <__retarget_lock_release>:
   b7bfa:	4770      	bx	lr

000b7bfc <__retarget_lock_release_recursive>:
   b7bfc:	4770      	bx	lr

000b7bfe <link_code_end>:
	...

000b7c00 <dynalib_user>:
   b7c00:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7c10:	0000 0000 6553 736e 726f 5020 636f 2061     ....Sensor Poca 
   b7c20:	6944 7473 6e61 6963 0061 6553 736e 726f     Distancia.Sensor
   b7c30:	4d20 6375 6168 4420 7369 6174 636e 6169      Mucha Distancia
   b7c40:	5300 6e65 6f73 2072 6f4e 4c20 7a75 5300     .Sensor No Luz.S
   b7c50:	6e65 6f73 2072 6953 4c20 7a75 5300 6e65     ensor Si Luz.Sen
   b7c60:	6f73 2072 6f42 6f74 006e 6553 736e 726f     sor Boton.Sensor
   b7c70:	5220 746f 7461 7669 006f 6553 736e 726f      Rotativo.Sensor
   b7c80:	6f4e 6156 696c 6f64 7245 6f72 0072 6341     NoValidoError.Ac
   b7c90:	7574 6461 726f 5220 4247 4100 7463 6175     tuador RGB.Actua
   b7ca0:	6f64 5a20 6d75 6162 6f64 0072 6553 736e     do Zumbador.Sens
   b7cb0:	726f 6420 2065 754c 007a 6553 736e 726f     or de Luz.Sensor
   b7cc0:	6420 2065 7552 6469 006f 6f4e 6520 2073      de Ruido.No es 
   b7cd0:	6176 696c 6f64 4d00 4649 5241 5f45 6552     valido.MIFARE_Re
   b7ce0:	6461 2928 6620 6961 656c 3a64 0020 4350     ad() failed: .PC
   b7cf0:	5f44 7541 6874 6e65 6974 6163 6574 2928     D_Authenticate()
   b7d00:	6620 6961 656c 3a64 0020 6154 4967 666e      failed: .TagInf
   b7d10:	3a6f 2520 0073 6f43 656e 7463 7261 6120     o: %s.Conectar a
   b7d20:	206c 7570 7265 6f74 4120 0a30 4300 6e6f     l puerto A0..Con
   b7d30:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   b7d40:	3241 000a 6f43 656e 7463 7261 6120 206c     A2..Conectar al 
   b7d50:	7570 7265 6f74 4120 0a34 4300 6e6f 6365     puerto A4..Conec
   b7d60:	6174 2072 6c61 7020 6575 7472 206f 3244     tar al puerto D2
   b7d70:	000a 6f43 656e 7463 7261 6120 206c 7570     ..Conectar al pu
   b7d80:	7265 6f74 4420 0a34 4300 6e6f 6365 6174     erto D4..Conecta
   b7d90:	2072 6c61 7020 6575 7472 206f 3644 000a     r al puerto D6..
   b7da0:	7245 6f72 3a72 4e20 206f 6168 2079 616d     Error: No hay ma
   b7db0:	2073 7570 7265 6f74 2073 6964 7073 6e6f     s puertos dispon
   b7dc0:	6269 656c 2073 000a 6e45 7274 2061 656c     ibles ..Entra le
   b7dd0:	4264 616c 636e 006f 6554 6d72 6e69 2061     dBlanco.Termina 
   b7de0:	656c 4264 616c 636e 006f 6341 6974 6176     ledBlanco.Activa
   b7df0:	2072 4752 2042 6e65 7020 6575 7472 3a6f     r RGB en puerto:
   b7e00:	2520 2064 2026 6425 4500 746e 6172 4c20      %d & %d.Entra L
   b7e10:	4445 4f20 4f4e 0046 6156 6f6c 2072 6f6e     ED ONOF.Valor no
   b7e20:	7620 6c61 6469 006f 6153 656c 7320 6977      valido.Sale swi
   b7e30:	6874 4c00 6565 2072 754c 007a 654c 7265     th.Leer Luz.Leer
   b7e40:	6220 746f 6e6f 4900 766e 6c61 6469 6553      boton.InvalidSe
   b7e50:	736e 726f 7245 6f72 0072 7345 5320 6e65     nsorError.Es Sen
   b7e60:	6f73 0072 7345 4120 7463 6175 6f64 0072     sor.Es Actuador.
   b7e70:	7345 4120 616e 6f6c 6967 6f63 4500 2073     Es Analogico.Es 
   b7e80:	6944 6967 6174 006c 530a 6e65 6f73 6572     Digital..Sensore
   b7e90:	2073 6f63 656e 7463 6461 736f 203a 6425     s conectados: %d
   b7ea0:	4900 3a44 2520 2064 4300 6e6f 6964 6963     .ID: %d .Condici
   b7eb0:	6e6f 203a 6425 0020 7550 7265 6f74 203a     on: %d .Puerto: 
   b7ec0:	6425 5300 2065 7365 6570 6172 6120 7463     %d.Se espera act
   b7ed0:	6175 6f64 0072 7245 6f72 3a72 6e20 6365     uador.Error: nec
   b7ee0:	7365 7261 6f69 6120 206c 656d 6f6e 2073     esario al menos 
   b7ef0:	6e75 7320 6e65 6f73 0072 002d               un sensor.-.

000b7efc <_ZL4font>:
   b7efc:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7f0c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7f1c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7f2c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7f3c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7f4c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7f5c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7f6c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7f7c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7f8c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7f9c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7fac:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7fbc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7fcc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7fdc:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7fec:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7ffc:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b800c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b801c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b802c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b803c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b804c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b805c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b806c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b807c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b808c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b809c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b80ac:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b80bc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b80cc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b80dc:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b80ec:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b80fc:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b810c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b811c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b812c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b813c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b814c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b815c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b816c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b817c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b818c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b819c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b81ac:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b81bc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b81cc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b81dc:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b81ec:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b81fc:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b820c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b821c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b822c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b823c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b824c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b825c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b826c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b827c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b828c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b829c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b82ac:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b82bc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b82cc:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b82dc:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b82ec:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b82fc:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b830c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b831c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b832c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b833c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b834c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b835c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b836c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b837c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b838c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b839c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b83ac:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b83bc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b83cc:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b83dc:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b83ec:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b83fc <_ZTV12Adafruit_GFX>:
	...
   b840c:	534d 000b 7085 000b 409d 000b 4d53 000b     MS...p...@..SM..
   b841c:	4d55 000b 4d87 000b 4d63 000b 4d75 000b     UM...M..cM..uM..
   b842c:	4c95 000b 4d53 000b 4f7f 000b 4f7d 000b     .L..SM...O..}O..
   b843c:	4d9f 000b 4ddd 000b 4e17 000b 4e5d 000b     .M...M...N..]N..
   b844c:	4e79 000b 4efd 000b 6564 6166 6c75 2074     yN...N..default 
   b845c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b846c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b847c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b848c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8498 <_ZTVN8particle11SPISettingsE>:
	...
   b84a0:	546d 000b 545b 000b 545d 000b               mT..[T..]T..

000b84ac <_ZL12splash2_data>:
   b84ac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b84bc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b84cc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b84e8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b84f8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8508:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8518:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8528:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8538:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8548:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8558:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8568:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8578:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8588:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8598:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b85a8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b85b8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b85c8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b85d8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b85e8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b85f8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8608:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8618:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8628:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b8640:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b8650:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b8660:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b8670:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b8680:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b868c <_ZL17sucreLogoNew_data>:
   b868c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b869c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b86ac:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b86bc:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b86cc:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b86dc:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b86ec:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b86fc:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b870c:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b871c:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b872c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b873c:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b874c:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b875c:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b876c:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b877c:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b878c:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b879c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b87ac:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b87bc:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b87cc:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b87dc:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b87ec:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b87fc:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b880c:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b881c:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b882c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b883c:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b884c:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b885c:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b886c:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b887c:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b888c:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b889c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b88ac:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b88bc:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b88cc:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b88dc:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b88ec:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b88fc:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b890c:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b891c:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b892c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b893c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b894c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b895c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b896c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b897c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b898c:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b899c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b89ac:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b89bc:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b89cc:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b89dc:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b89ec:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b89fc:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b8a0c:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b8a1c:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b8a2c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b8a3c:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b8a4c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8a5c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8a6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8a7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b8a8c <_ZTV16Adafruit_SSD1306>:
	...
   b8a94:	54c1 000b 54d9 000b 534d 000b 7085 000b     .T...T..MS...p..
   b8aa4:	54ed 000b 4d53 000b 4d55 000b 4d87 000b     .T..SM..UM...M..
   b8ab4:	4d63 000b 4d75 000b 4c95 000b 4d53 000b     cM..uM...L..SM..
   b8ac4:	4f7f 000b 567f 000b 5c1b 000b 5bcd 000b     .O...V...\...[..
   b8ad4:	4e17 000b 4e5d 000b 4e79 000b 4efd 000b     .N..]N..yN...N..

000b8ae4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8ae4:	8000 e0c0 f8f0 fefc                         ........

000b8aec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b8aec:	0100 0703 1f0f 7f3f                         ......?.

000b8af4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8af4:	d5ae a880                                   ....

000b8af8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8af8:	00d3 8d40                                   ..@.

000b8afc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b8afc:	0020 c8a1                                    ...

000b8b00 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b8b00:	40db a6a4 af2e                              .@....

000b8b06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8b06:	02da 8f81                                   ....

000b8b0a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b8b0a:	12da                                         ...

000b8b0d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b8b0d:	02da                                         ...

000b8b10 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b8b10:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
   b8b20:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
   b8b30:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
   b8b40:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
   b8b50:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
   b8b60:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
   b8b70:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
   b8b80:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
   b8b90:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
   b8ba0:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
   b8bb0:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
   b8bc0:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
   b8bd0:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
   b8be0:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
   b8bf0:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
   b8c00:	2064 6977 6874 4e20 4b41 002e               d with NAK..

000b8c0c <CSWTCH.84>:
   b8c0c:	8b23 000b 8b2c 000b 8b44 000b 8b59 000b     #...,...D...Y...
   b8c1c:	8b73 000b 8b8f 000b 8bbe 000b 8bd0 000b     s...............
   b8c2c:	8bea 000b                                   ....

000b8c30 <_ZTVN5spark13EthernetClassE>:
	...
   b8c38:	6d57 000b 6d4d 000b 6d43 000b 6d39 000b     Wm..Mm..Cm..9m..
   b8c48:	6d2d 000b 6d21 000b 6f61 000b 6f69 000b     -m..!m..ao..io..
   b8c58:	6d15 000b 6d0d 000b 6d03 000b 6cf9 000b     .m...m...m...l..
   b8c68:	6f99 000b                                   .o..

000b8c6c <_ZTV7TwoWire>:
	...
   b8c74:	6d75 000b 6dbf 000b 6d97 000b 6d77 000b     um...m...m..wm..
   b8c84:	6d9f 000b 6da7 000b 6daf 000b 6db7 000b     .m...m...m...m..

000b8c94 <_ZTV9IPAddress>:
	...
   b8c9c:	6e31 000b 6e21 000b 6e23 000b 7061 0070     1n..!n..#n..app.

000b8cac <_ZTVN5spark12NetworkClassE>:
	...
   b8cb4:	6f21 000b 6f2b 000b 6f35 000b 6f3f 000b     !o..+o..5o..?o..
   b8cc4:	6f49 000b 6f55 000b 6f61 000b 6f69 000b     Io..Uo..ao..io..
   b8cd4:	6f71 000b 6f7d 000b 6f85 000b 6f8f 000b     qo..}o...o...o..
   b8ce4:	6f99 000b                                   .o..

000b8ce8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8ce8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8cf8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8d08:	6d69 0065                                   ime.

000b8d0c <_ZTV11USARTSerial>:
	...
   b8d14:	7429 000b 7495 000b 746d 000b 7085 000b     )t...t..mt...p..
   b8d24:	743d 000b 7459 000b 744b 000b 7467 000b     =t..Yt..Kt..gt..
   b8d34:	742b 000b 742f 000b                         +t../t..

000b8d3c <_ZTV9USBSerial>:
	...
   b8d44:	74d3 000b 753b 000b 7511 000b 7085 000b     .t..;u...u...p..
   b8d54:	7503 000b 74d5 000b 74e5 000b 7535 000b     .u...t...t..5u..
   b8d64:	74f5 000b 74cd 000b                         .t...t..

000b8d6c <_ZTVN5spark9WiFiClassE>:
	...
   b8d74:	7633 000b 7629 000b 761f 000b 75d5 000b     3v..)v...v...u..
   b8d84:	7613 000b 7607 000b 6f61 000b 6f69 000b     .v...v..ao..io..
   b8d94:	75fb 000b 75f3 000b 75e9 000b 75df 000b     .u...u...u...u..
   b8da4:	6f99 000b                                   .o..

000b8da8 <_ZSt7nothrow>:
   b8da8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8db8:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8dc8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8dd8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8de8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8df8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8e08:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b8e18:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b8e28:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b8e38:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b8e48:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b8e58:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b8e68:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b8e74 <link_const_variable_data_end>:
   b8e74:	000b4c3d 	.word	0x000b4c3d
   b8e78:	000b6cb5 	.word	0x000b6cb5
   b8e7c:	000b6d61 	.word	0x000b6d61
   b8e80:	000b6f11 	.word	0x000b6f11
   b8e84:	000b7071 	.word	0x000b7071
   b8e88:	000b71ad 	.word	0x000b71ad
   b8e8c:	000b73f1 	.word	0x000b73f1
   b8e90:	000b7415 	.word	0x000b7415
   b8e94:	000b763d 	.word	0x000b763d

000b8e98 <link_constructors_end>:
	...
