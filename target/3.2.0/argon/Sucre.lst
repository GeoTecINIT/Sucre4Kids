
/Users/marcosgarciagarcia/Documents/Sucre/target/3.2.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005844  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b9860  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b0  2003e524  000b9864  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000021c  2003e5d4  2003e5d4  0002e5d4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b9914  000b9914  00029914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b993c  000b993c  0002993c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00155770  00000000  00000000  00029940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000181c5  00000000  00000000  0017f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004d022  00000000  00000000  00197275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000034f8  00000000  00000000  001e4297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b868  00000000  00000000  001e778f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000416fa  00000000  00000000  001f2ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0005499b  00000000  00000000  002346f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00133a69  00000000  00000000  0028908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00009f98  00000000  00000000  003bcaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f94f 	bl	b82d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 f957 	bl	b82ec <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e524 	.word	0x2003e524
   b4048:	000b9864 	.word	0x000b9864
   b404c:	2003e5d4 	.word	0x2003e5d4
   b4050:	2003e5d4 	.word	0x2003e5d4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fe29 	bl	b7cb4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9834 	.word	0x000b9834
   b407c:	000b9858 	.word	0x000b9858

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdbc 	b.w	b4bfc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fe0b 	bl	b4ca0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bdc9 	b.w	b7c24 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f002 bfd7 	b.w	b7044 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f002 bfdd 	b.w	b7054 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f002 ff32 	bl	b6f0c <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6c0d 	.word	0x000b6c0d

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c0:	b40e      	push	{r1, r2, r3}
   b40c2:	b503      	push	{r0, r1, lr}
   b40c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40ce:	f003 fa4c 	bl	b756a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d8:	b003      	add	sp, #12
   b40da:	4770      	bx	lr

000b40dc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b503      	push	{r0, r1, lr}
   b40e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ea:	f003 fa3e 	bl	b756a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40ee:	b002      	add	sp, #8
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_Z12displayPrintbbiii>:
{
   return id == 0;
}

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40fa:	4607      	mov	r7, r0
   b40fc:	b089      	sub	sp, #36	; 0x24
   display.clearDisplay();
   b40fe:	4853      	ldr	r0, [pc, #332]	; (b424c <_Z12displayPrintbbiii+0x154>)
{
   b4100:	460e      	mov	r6, r1
   b4102:	4615      	mov	r5, r2
   b4104:	461c      	mov	r4, r3
   display.clearDisplay();
   b4106:	f001 fc4f 	bl	b59a8 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b410a:	2f00      	cmp	r7, #0
   b410c:	d077      	beq.n	b41fe <_Z12displayPrintbbiii+0x106>
   {
      switch (id)
   b410e:	3d01      	subs	r5, #1
   b4110:	2d06      	cmp	r5, #6
   b4112:	d86c      	bhi.n	b41ee <_Z12displayPrintbbiii+0xf6>
   b4114:	e8df f005 	tbb	[pc, r5]
   b4118:	504b4004 	.word	0x504b4004
   b411c:	5a55      	.short	0x5a55
   b411e:	66          	.byte	0x66
   b411f:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4120:	2c00      	cmp	r4, #0
   b4122:	d137      	bne.n	b4194 <_Z12displayPrintbbiii+0x9c>
   b4124:	494a      	ldr	r1, [pc, #296]	; (b4250 <_Z12displayPrintbbiii+0x158>)
         break;

      // Ruido
      case 3:
         // dispositivos[1] = "Sensor de Ruido";
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b4126:	484b      	ldr	r0, [pc, #300]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
            dispositivos[0] = "RGB-On-Off";
            break;
         }

      case 1:
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4128:	f003 fb81 	bl	b782e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b412c:	4949      	ldr	r1, [pc, #292]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b412e:	4668      	mov	r0, sp
   b4130:	f003 fb72 	bl	b7818 <_ZN6StringC1ERKS_>
         Serial.println("ActuadorNoValidoError");
         break;
      }
   }

   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4134:	4b48      	ldr	r3, [pc, #288]	; (b4258 <_Z12displayPrintbbiii+0x160>)
   b4136:	4949      	ldr	r1, [pc, #292]	; (b425c <_Z12displayPrintbbiii+0x164>)
   b4138:	4668      	mov	r0, sp
   b413a:	2e00      	cmp	r6, #0
   b413c:	bf08      	it	eq
   b413e:	4619      	moveq	r1, r3
   b4140:	f003 fbbd 	bl	b78be <_ZplRK15StringSumHelperPKc>
   b4144:	990e      	ldr	r1, [sp, #56]	; 0x38
   b4146:	4604      	mov	r4, r0
   b4148:	220a      	movs	r2, #10
   b414a:	a804      	add	r0, sp, #16
   b414c:	f003 fb81 	bl	b7852 <_ZN6StringC1Eih>
   b4150:	a904      	add	r1, sp, #16
   b4152:	4620      	mov	r0, r4
   b4154:	f003 fba7 	bl	b78a6 <_ZplRK15StringSumHelperRK6String>
   b4158:	2140      	movs	r1, #64	; 0x40
   b415a:	6802      	ldr	r2, [r0, #0]
   b415c:	4840      	ldr	r0, [pc, #256]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   display.println(buf);
   b415e:	4c3b      	ldr	r4, [pc, #236]	; (b424c <_Z12displayPrintbbiii+0x154>)
   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4160:	f002 ff88 	bl	b7074 <snprintf>
   b4164:	a804      	add	r0, sp, #16
   b4166:	f003 fae9 	bl	b773c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b416a:	4668      	mov	r0, sp
   b416c:	f003 fae6 	bl	b773c <_ZN6StringD1Ev>
   display.println(buf);
   b4170:	493b      	ldr	r1, [pc, #236]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4172:	4620      	mov	r0, r4
   b4174:	f003 f9d1 	bl	b751a <_ZN5Print7printlnEPKc>
	const char * c_str() const { return buffer; }
   b4178:	4b3a      	ldr	r3, [pc, #232]	; (b4264 <_Z12displayPrintbbiii+0x16c>)

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b417a:	4839      	ldr	r0, [pc, #228]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b417c:	681a      	ldr	r2, [r3, #0]
   b417e:	2140      	movs	r1, #64	; 0x40
   b4180:	f002 ff78 	bl	b7074 <snprintf>
   display.println(buf);
   b4184:	4936      	ldr	r1, [pc, #216]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4186:	4620      	mov	r0, r4
   b4188:	f003 f9c7 	bl	b751a <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b418c:	2300      	movs	r3, #0
   b418e:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b4190:	b009      	add	sp, #36	; 0x24
   b4192:	bdf0      	pop	{r4, r5, r6, r7, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4194:	4934      	ldr	r1, [pc, #208]	; (b4268 <_Z12displayPrintbbiii+0x170>)
   b4196:	e7c6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b4198:	f003 fc72 	bl	b7a80 <_Z16_fetch_usbserialv>
   b419c:	4933      	ldr	r1, [pc, #204]	; (b426c <_Z12displayPrintbbiii+0x174>)
   b419e:	4622      	mov	r2, r4
   b41a0:	f7ff ff9c 	bl	b40dc <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b41a4:	b90c      	cbnz	r4, b41aa <_Z12displayPrintbbiii+0xb2>
   b41a6:	4932      	ldr	r1, [pc, #200]	; (b4270 <_Z12displayPrintbbiii+0x178>)
   b41a8:	e7bd      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41aa:	4932      	ldr	r1, [pc, #200]	; (b4274 <_Z12displayPrintbbiii+0x17c>)
   b41ac:	e7bb      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b41ae:	b90c      	cbnz	r4, b41b4 <_Z12displayPrintbbiii+0xbc>
   b41b0:	4931      	ldr	r1, [pc, #196]	; (b4278 <_Z12displayPrintbbiii+0x180>)
   b41b2:	e7b8      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41b4:	4931      	ldr	r1, [pc, #196]	; (b427c <_Z12displayPrintbbiii+0x184>)
   b41b6:	e7b6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b41b8:	b90c      	cbnz	r4, b41be <_Z12displayPrintbbiii+0xc6>
   b41ba:	4931      	ldr	r1, [pc, #196]	; (b4280 <_Z12displayPrintbbiii+0x188>)
   b41bc:	e7b3      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41be:	4931      	ldr	r1, [pc, #196]	; (b4284 <_Z12displayPrintbbiii+0x18c>)
   b41c0:	e7b1      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b41c2:	b90c      	cbnz	r4, b41c8 <_Z12displayPrintbbiii+0xd0>
   b41c4:	4930      	ldr	r1, [pc, #192]	; (b4288 <_Z12displayPrintbbiii+0x190>)
   b41c6:	e7ae      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41c8:	4930      	ldr	r1, [pc, #192]	; (b428c <_Z12displayPrintbbiii+0x194>)
   b41ca:	e7ac      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         switch (condicion)
   b41cc:	2c01      	cmp	r4, #1
   b41ce:	d005      	beq.n	b41dc <_Z12displayPrintbbiii+0xe4>
   b41d0:	2c02      	cmp	r4, #2
   b41d2:	d005      	beq.n	b41e0 <_Z12displayPrintbbiii+0xe8>
   b41d4:	2c00      	cmp	r4, #0
   b41d6:	d1a9      	bne.n	b412c <_Z12displayPrintbbiii+0x34>
            dispositivos[1] = "Sensor Temp.Frio";
   b41d8:	492d      	ldr	r1, [pc, #180]	; (b4290 <_Z12displayPrintbbiii+0x198>)
   b41da:	e7a4      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Templado";
   b41dc:	492d      	ldr	r1, [pc, #180]	; (b4294 <_Z12displayPrintbbiii+0x19c>)
   b41de:	e7a2      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Calor";
   b41e0:	492d      	ldr	r1, [pc, #180]	; (b4298 <_Z12displayPrintbbiii+0x1a0>)
   b41e2:	e7a0      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41e4:	b94c      	cbnz	r4, b41fa <_Z12displayPrintbbiii+0x102>
   b41e6:	492d      	ldr	r1, [pc, #180]	; (b429c <_Z12displayPrintbbiii+0x1a4>)
   b41e8:	481a      	ldr	r0, [pc, #104]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b41ea:	f003 fb20 	bl	b782e <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b41ee:	f003 fc47 	bl	b7a80 <_Z16_fetch_usbserialv>
   b41f2:	492b      	ldr	r1, [pc, #172]	; (b42a0 <_Z12displayPrintbbiii+0x1a8>)
         Serial.println("ActuadorNoValidoError");
   b41f4:	f003 f991 	bl	b751a <_ZN5Print7printlnEPKc>
         break;
   b41f8:	e798      	b.n	b412c <_Z12displayPrintbbiii+0x34>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41fa:	492a      	ldr	r1, [pc, #168]	; (b42a4 <_Z12displayPrintbbiii+0x1ac>)
   b41fc:	e7f4      	b.n	b41e8 <_Z12displayPrintbbiii+0xf0>
      switch (id)
   b41fe:	b12d      	cbz	r5, b420c <_Z12displayPrintbbiii+0x114>
   b4200:	2d01      	cmp	r5, #1
   b4202:	d01f      	beq.n	b4244 <_Z12displayPrintbbiii+0x14c>
         Serial.println("ActuadorNoValidoError");
   b4204:	f003 fc3c 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4208:	4927      	ldr	r1, [pc, #156]	; (b42a8 <_Z12displayPrintbbiii+0x1b0>)
   b420a:	e7f3      	b.n	b41f4 <_Z12displayPrintbbiii+0xfc>
         switch (condicion)
   b420c:	2c05      	cmp	r4, #5
   b420e:	d80f      	bhi.n	b4230 <_Z12displayPrintbbiii+0x138>
   b4210:	e8df f004 	tbb	[pc, r4]
   b4214:	12100a03 	.word	0x12100a03
   b4218:	1614      	.short	0x1614
            dispositivos[0] = "RGB-Verde-Rojo";
   b421a:	4924      	ldr	r1, [pc, #144]	; (b42ac <_Z12displayPrintbbiii+0x1b4>)
   b421c:	4811      	ldr	r0, [pc, #68]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b421e:	f003 fb06 	bl	b782e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4222:	4923      	ldr	r1, [pc, #140]	; (b42b0 <_Z12displayPrintbbiii+0x1b8>)
   b4224:	480f      	ldr	r0, [pc, #60]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b4226:	e77f      	b.n	b4128 <_Z12displayPrintbbiii+0x30>
            dispositivos[0] = "RGB-Amarillo-Morado";
   b4228:	4922      	ldr	r1, [pc, #136]	; (b42b4 <_Z12displayPrintbbiii+0x1bc>)
            dispositivos[0] = "RGB-Azul-Naranja";
   b422a:	480e      	ldr	r0, [pc, #56]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b422c:	f003 faff 	bl	b782e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4230:	4921      	ldr	r1, [pc, #132]	; (b42b8 <_Z12displayPrintbbiii+0x1c0>)
   b4232:	e7f7      	b.n	b4224 <_Z12displayPrintbbiii+0x12c>
            dispositivos[0] = "RGB-Azul-Naranja";
   b4234:	4921      	ldr	r1, [pc, #132]	; (b42bc <_Z12displayPrintbbiii+0x1c4>)
   b4236:	e7f8      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-Blink";
   b4238:	4921      	ldr	r1, [pc, #132]	; (b42c0 <_Z12displayPrintbbiii+0x1c8>)
   b423a:	e7f6      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-RainBow";
   b423c:	4921      	ldr	r1, [pc, #132]	; (b42c4 <_Z12displayPrintbbiii+0x1cc>)
   b423e:	e7f4      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-On-Off";
   b4240:	4921      	ldr	r1, [pc, #132]	; (b42c8 <_Z12displayPrintbbiii+0x1d0>)
   b4242:	e7f2      	b.n	b422a <_Z12displayPrintbbiii+0x132>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4244:	2c00      	cmp	r4, #0
   b4246:	d0ec      	beq.n	b4222 <_Z12displayPrintbbiii+0x12a>
   b4248:	e7f2      	b.n	b4230 <_Z12displayPrintbbiii+0x138>
   b424a:	bf00      	nop
   b424c:	2003e62c 	.word	0x2003e62c
   b4250:	000b8536 	.word	0x000b8536
   b4254:	2003e68c 	.word	0x2003e68c
   b4258:	000b8533 	.word	0x000b8533
   b425c:	000b8530 	.word	0x000b8530
   b4260:	2003e5ec 	.word	0x2003e5ec
   b4264:	2003e67c 	.word	0x2003e67c
   b4268:	000b854c 	.word	0x000b854c
   b426c:	000b8563 	.word	0x000b8563
   b4270:	000b857a 	.word	0x000b857a
   b4274:	000b8588 	.word	0x000b8588
   b4278:	000b8596 	.word	0x000b8596
   b427c:	000b85a6 	.word	0x000b85a6
   b4280:	000b85b6 	.word	0x000b85b6
   b4284:	000b85c6 	.word	0x000b85c6
   b4288:	000b85d6 	.word	0x000b85d6
   b428c:	000b85e9 	.word	0x000b85e9
   b4290:	000b85fc 	.word	0x000b85fc
   b4294:	000b860d 	.word	0x000b860d
   b4298:	000b8622 	.word	0x000b8622
   b429c:	000b8634 	.word	0x000b8634
   b42a0:	000b8662 	.word	0x000b8662
   b42a4:	000b864b 	.word	0x000b864b
   b42a8:	000b86ea 	.word	0x000b86ea
   b42ac:	000b8676 	.word	0x000b8676
   b42b0:	000b86cb 	.word	0x000b86cb
   b42b4:	000b8685 	.word	0x000b8685
   b42b8:	000b86db 	.word	0x000b86db
   b42bc:	000b8699 	.word	0x000b8699
   b42c0:	000b86aa 	.word	0x000b86aa
   b42c4:	000b86b4 	.word	0x000b86b4
   b42c8:	000b86c0 	.word	0x000b86c0

000b42cc <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b42cc:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b42ce:	7803      	ldrb	r3, [r0, #0]
   b42d0:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b42d2:	bf0c      	ite	eq
   b42d4:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b42d6:	2200      	movne	r2, #0
   int i = 0;
   b42d8:	4613      	mov	r3, r2
   b42da:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b42dc:	240a      	movs	r4, #10
      i++;
   b42de:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42e0:	f813 1b01 	ldrb.w	r1, [r3], #1
   b42e4:	3930      	subs	r1, #48	; 0x30
   b42e6:	b2cd      	uxtb	r5, r1
   b42e8:	2d09      	cmp	r5, #9
   b42ea:	d802      	bhi.n	b42f2 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b42ec:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42f0:	e7f6      	b.n	b42e0 <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
   b42f2:	b102      	cbz	r2, b42f6 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b42f4:	4240      	negs	r0, r0
   return num;
}
   b42f6:	bd30      	pop	{r4, r5, pc}

000b42f8 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b42f8:	b570      	push	{r4, r5, r6, lr}
   b42fa:	4614      	mov	r4, r2
   b42fc:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b42fe:	f004 f84b 	bl	b8398 <strtok>
   int j = 0;
   b4302:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4304:	b140      	cbz	r0, b4318 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4306:	f7ff ffe1 	bl	b42cc <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b430a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b430c:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4310:	2000      	movs	r0, #0
   b4312:	f004 f841 	bl	b8398 <strtok>
   while (ptr != NULL)
   b4316:	e7f5      	b.n	b4304 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	b913      	cbnz	r3, b4322 <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
   b431c:	4b01      	ldr	r3, [pc, #4]	; (b4324 <_Z5splitPcS_Pi+0x2c>)
   b431e:	2201      	movs	r2, #1
   b4320:	701a      	strb	r2, [r3, #0]
   }
}
   b4322:	bd70      	pop	{r4, r5, r6, pc}
   b4324:	2003e69c 	.word	0x2003e69c

000b4328 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b432a:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b432e:	f10d 0307 	add.w	r3, sp, #7
   b4332:	460a      	mov	r2, r1
   b4334:	4601      	mov	r1, r0
   b4336:	480d      	ldr	r0, [pc, #52]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4338:	4d0d      	ldr	r5, [pc, #52]	; (b4370 <_Z17readDataFromBlockhPhh+0x48>)
   b433a:	f002 f9c7 	bl	b66cc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b433e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4340:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4342:	d010      	beq.n	b4366 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4344:	f003 fb9c 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4348:	490a      	ldr	r1, [pc, #40]	; (b4374 <_Z17readDataFromBlockhPhh+0x4c>)
   b434a:	f003 f8d3 	bl	b74f4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b434e:	f003 fb97 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4352:	7829      	ldrb	r1, [r5, #0]
   b4354:	4604      	mov	r4, r0
   b4356:	4805      	ldr	r0, [pc, #20]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4358:	f001 ff28 	bl	b61ac <_ZN7MFRC52217GetStatusCodeNameEh>
   b435c:	4601      	mov	r1, r0
   b435e:	4620      	mov	r0, r4
   b4360:	f003 f8db 	bl	b751a <_ZN5Print7printlnEPKc>
   b4364:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b4366:	b003      	add	sp, #12
   b4368:	bd30      	pop	{r4, r5, pc}
   b436a:	bf00      	nop
   b436c:	2003e6ac 	.word	0x2003e6ac
   b4370:	2003e6c3 	.word	0x2003e6c3
   b4374:	000b8700 	.word	0x000b8700

000b4378 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4378:	b5f0      	push	{r4, r5, r6, r7, lr}
   b437a:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b437c:	4d1e      	ldr	r5, [pc, #120]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b437e:	4a1f      	ldr	r2, [pc, #124]	; (b43fc <_Z8getTagIDPi+0x84>)
   b4380:	9500      	str	r5, [sp, #0]
   b4382:	4b1f      	ldr	r3, [pc, #124]	; (b4400 <_Z8getTagIDPi+0x88>)
   b4384:	7812      	ldrb	r2, [r2, #0]
   b4386:	4f1f      	ldr	r7, [pc, #124]	; (b4404 <_Z8getTagIDPi+0x8c>)
{
   b4388:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b438a:	2160      	movs	r1, #96	; 0x60
   b438c:	4628      	mov	r0, r5
   b438e:	f002 f9be 	bl	b670e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b4392:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4394:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b4396:	d00f      	beq.n	b43b8 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4398:	f003 fb72 	bl	b7a80 <_Z16_fetch_usbserialv>
   b439c:	491a      	ldr	r1, [pc, #104]	; (b4408 <_Z8getTagIDPi+0x90>)
   b439e:	f003 f8a9 	bl	b74f4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b43a2:	f003 fb6d 	bl	b7a80 <_Z16_fetch_usbserialv>
   b43a6:	7839      	ldrb	r1, [r7, #0]
   b43a8:	4604      	mov	r4, r0
   b43aa:	4628      	mov	r0, r5
   b43ac:	f001 fefe 	bl	b61ac <_ZN7MFRC52217GetStatusCodeNameEh>
   b43b0:	4601      	mov	r1, r0
   b43b2:	4620      	mov	r0, r4
   b43b4:	f003 f8b1 	bl	b751a <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b43b8:	4b14      	ldr	r3, [pc, #80]	; (b440c <_Z8getTagIDPi+0x94>)
   b43ba:	2212      	movs	r2, #18
   b43bc:	7818      	ldrb	r0, [r3, #0]
   b43be:	a907      	add	r1, sp, #28
   b43c0:	f7ff ffb2 	bl	b4328 <_Z17readDataFromBlockhPhh>
   b43c4:	b1b0      	cbz	r0, b43f4 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b43c6:	ac07      	add	r4, sp, #28
   b43c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b43ca:	ad03      	add	r5, sp, #12
   b43cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b43d2:	f003 fb55 	bl	b7a80 <_Z16_fetch_usbserialv>
   b43d6:	490e      	ldr	r1, [pc, #56]	; (b4410 <_Z8getTagIDPi+0x98>)
   b43d8:	aa03      	add	r2, sp, #12
   b43da:	f7ff fe7f 	bl	b40dc <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b43de:	490d      	ldr	r1, [pc, #52]	; (b4414 <_Z8getTagIDPi+0x9c>)
   b43e0:	4632      	mov	r2, r6
   b43e2:	a803      	add	r0, sp, #12
   b43e4:	f7ff ff88 	bl	b42f8 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b43e8:	4803      	ldr	r0, [pc, #12]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43ea:	f002 f94a 	bl	b6682 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b43ee:	4802      	ldr	r0, [pc, #8]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43f0:	f001 ffa7 	bl	b6342 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b43f4:	b00d      	add	sp, #52	; 0x34
   b43f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43f8:	2003e6ac 	.word	0x2003e6ac
   b43fc:	2003e564 	.word	0x2003e564
   b4400:	2003e69d 	.word	0x2003e69d
   b4404:	2003e6c3 	.word	0x2003e6c3
   b4408:	000b8717 	.word	0x000b8717
   b440c:	2003e524 	.word	0x2003e524
   b4410:	000b8733 	.word	0x000b8733
   b4414:	2003e530 	.word	0x2003e530

000b4418 <_Z13asignarPuertoi>:

int asignarPuerto(int id)
{
   b4418:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
   b441a:	b940      	cbnz	r0, b442e <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b441c:	4b26      	ldr	r3, [pc, #152]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b441e:	681c      	ldr	r4, [r3, #0]
   }

   switch (option)
   b4420:	2c05      	cmp	r4, #5
   b4422:	d840      	bhi.n	b44a6 <_Z13asignarPuertoi+0x8e>
   b4424:	e8df f004 	tbb	[pc, r4]
   b4428:	261a0f05 	.word	0x261a0f05
   b442c:	342d      	.short	0x342d
      option = puertoDigital;
   b442e:	4b23      	ldr	r3, [pc, #140]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4430:	e7f5      	b.n	b441e <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4432:	f003 fb25 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4436:	4922      	ldr	r1, [pc, #136]	; (b44c0 <_Z13asignarPuertoi+0xa8>)
   b4438:	f003 f85c 	bl	b74f4 <_ZN5Print5printEPKc>

      puertoAnalogico++;
   b443c:	4a1e      	ldr	r2, [pc, #120]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      break;

   case 4:
      Serial.print("Conectar al puerto D4\n");

      puertoDigital++;
   b443e:	6813      	ldr	r3, [r2, #0]
   b4440:	3301      	adds	r3, #1
   b4442:	6013      	str	r3, [r2, #0]
      // Disp[0].pin = D4;
      // Disp[0].pin2 = D5;
      // statements executed if the expression equals the p_D4
      // value of this constant_expression               p_D5
      return 4;
   b4444:	e014      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b4446:	f003 fb1b 	bl	b7a80 <_Z16_fetch_usbserialv>
   b444a:	491e      	ldr	r1, [pc, #120]	; (b44c4 <_Z13asignarPuertoi+0xac>)
   b444c:	f003 f852 	bl	b74f4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4450:	4a19      	ldr	r2, [pc, #100]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b4452:	6813      	ldr	r3, [r2, #0]
   b4454:	3301      	adds	r3, #1
   b4456:	6013      	str	r3, [r2, #0]
      return 2;
   b4458:	2402      	movs	r4, #2
   b445a:	e009      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b445c:	f003 fb10 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4460:	4919      	ldr	r1, [pc, #100]	; (b44c8 <_Z13asignarPuertoi+0xb0>)
   b4462:	f003 f847 	bl	b74f4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b4466:	4b14      	ldr	r3, [pc, #80]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   b4468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b446c:	601a      	str	r2, [r3, #0]
      return 4;
   b446e:	2404      	movs	r4, #4
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
   b4470:	4620      	mov	r0, r4
   b4472:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4474:	f003 fb04 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4478:	4914      	ldr	r1, [pc, #80]	; (b44cc <_Z13asignarPuertoi+0xb4>)
   b447a:	f003 f83b 	bl	b74f4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b447e:	4a0f      	ldr	r2, [pc, #60]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4480:	e7e7      	b.n	b4452 <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b4482:	f003 fafd 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4486:	4912      	ldr	r1, [pc, #72]	; (b44d0 <_Z13asignarPuertoi+0xb8>)
   b4488:	f003 f834 	bl	b74f4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b448c:	4a0b      	ldr	r2, [pc, #44]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b448e:	e7d6      	b.n	b443e <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b4490:	f003 faf6 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4494:	490f      	ldr	r1, [pc, #60]	; (b44d4 <_Z13asignarPuertoi+0xbc>)
   b4496:	f003 f82d 	bl	b74f4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b449a:	4b08      	ldr	r3, [pc, #32]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b449c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b44a0:	601a      	str	r2, [r3, #0]
      return 6;
   b44a2:	2406      	movs	r4, #6
   b44a4:	e7e4      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b44a6:	f003 faeb 	bl	b7a80 <_Z16_fetch_usbserialv>
   b44aa:	490b      	ldr	r1, [pc, #44]	; (b44d8 <_Z13asignarPuertoi+0xc0>)
   b44ac:	f003 f822 	bl	b74f4 <_ZN5Print5printEPKc>
      return -1;
   b44b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b44b4:	e7dc      	b.n	b4470 <_Z13asignarPuertoi+0x58>
   b44b6:	bf00      	nop
   b44b8:	2003e6bc 	.word	0x2003e6bc
   b44bc:	2003e540 	.word	0x2003e540
   b44c0:	000b873f 	.word	0x000b873f
   b44c4:	000b8756 	.word	0x000b8756
   b44c8:	000b876d 	.word	0x000b876d
   b44cc:	000b8784 	.word	0x000b8784
   b44d0:	000b879b 	.word	0x000b879b
   b44d4:	000b87b2 	.word	0x000b87b2
   b44d8:	000b87c9 	.word	0x000b87c9

000b44dc <_Z11numSensoresPb>:
   int contador = 0;
   int j = 0;

   for (j; j < 2; j++)
   {
      if (array[j])
   b44dc:	7842      	ldrb	r2, [r0, #1]
   int contador = 0;
   b44de:	7803      	ldrb	r3, [r0, #0]
      if (array[j])
   b44e0:	b102      	cbz	r2, b44e4 <_Z11numSensoresPb+0x8>
         contador++;
   b44e2:	3301      	adds	r3, #1
   }

   return contador;
}
   b44e4:	4618      	mov	r0, r3
   b44e6:	4770      	bx	lr

000b44e8 <_Z17incrementarSensorPb>:

// Al tratarse de un vector booleano, incrementar la cantidad supone poner a true el siguiente false.
void incrementarSensor(bool array[])
{
   int i = 0;
   while (array[i])
   b44e8:	4603      	mov	r3, r0
   b44ea:	3001      	adds	r0, #1
   b44ec:	781a      	ldrb	r2, [r3, #0]
   b44ee:	2a00      	cmp	r2, #0
   b44f0:	d1fa      	bne.n	b44e8 <_Z17incrementarSensorPb>
      i++;

   array[i] = true;
   b44f2:	2201      	movs	r2, #1
   b44f4:	701a      	strb	r2, [r3, #0]
}
   b44f6:	4770      	bx	lr

000b44f8 <_Z9ledApagarv>:
// This #include statement was automatically added by the Particle IDE.
#include <Grove_ChainableLED.h>
ChainableLED ledObject = ChainableLED(0, 0, 5);

void ledApagar()
{
   b44f8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 0);
   b44fa:	2300      	movs	r3, #0
   b44fc:	4804      	ldr	r0, [pc, #16]	; (b4510 <_Z9ledApagarv+0x18>)
   b44fe:	9300      	str	r3, [sp, #0]
   b4500:	461a      	mov	r2, r3
   b4502:	4619      	mov	r1, r3
   b4504:	f001 fdd8 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4508:	b003      	add	sp, #12
   b450a:	f85d fb04 	ldr.w	pc, [sp], #4
   b450e:	bf00      	nop
   b4510:	2003e6a4 	.word	0x2003e6a4

000b4514 <_Z7ledRojov>:
void ledRojo()
{
   b4514:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 0, 0);
   b4516:	2300      	movs	r3, #0
   b4518:	4804      	ldr	r0, [pc, #16]	; (b452c <_Z7ledRojov+0x18>)
   b451a:	9300      	str	r3, [sp, #0]
   b451c:	22ff      	movs	r2, #255	; 0xff
   b451e:	4619      	mov	r1, r3
   b4520:	f001 fdca 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4524:	b003      	add	sp, #12
   b4526:	f85d fb04 	ldr.w	pc, [sp], #4
   b452a:	bf00      	nop
   b452c:	2003e6a4 	.word	0x2003e6a4

000b4530 <_Z8ledVerdev>:
void ledVerde()
{
   b4530:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b4532:	230a      	movs	r3, #10
   b4534:	2200      	movs	r2, #0
   b4536:	9300      	str	r3, [sp, #0]
   b4538:	4803      	ldr	r0, [pc, #12]	; (b4548 <_Z8ledVerdev+0x18>)
   b453a:	23ff      	movs	r3, #255	; 0xff
   b453c:	4611      	mov	r1, r2
   b453e:	f001 fdbb 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4542:	b003      	add	sp, #12
   b4544:	f85d fb04 	ldr.w	pc, [sp], #4
   b4548:	2003e6a4 	.word	0x2003e6a4

000b454c <_Z7ledAzulv>:
void ledAzul()
{
   b454c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b454e:	23ff      	movs	r3, #255	; 0xff
   b4550:	9300      	str	r3, [sp, #0]
   b4552:	2300      	movs	r3, #0
   b4554:	4803      	ldr	r0, [pc, #12]	; (b4564 <_Z7ledAzulv+0x18>)
   b4556:	461a      	mov	r2, r3
   b4558:	4619      	mov	r1, r3
   b455a:	f001 fdad 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b455e:	b003      	add	sp, #12
   b4560:	f85d fb04 	ldr.w	pc, [sp], #4
   b4564:	2003e6a4 	.word	0x2003e6a4

000b4568 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b4568:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b456a:	2100      	movs	r1, #0
   b456c:	4804      	ldr	r0, [pc, #16]	; (b4580 <_Z11ledAmarillov+0x18>)
   b456e:	9100      	str	r1, [sp, #0]
   b4570:	23e9      	movs	r3, #233	; 0xe9
   b4572:	22ff      	movs	r2, #255	; 0xff
   b4574:	f001 fda0 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4578:	b003      	add	sp, #12
   b457a:	f85d fb04 	ldr.w	pc, [sp], #4
   b457e:	bf00      	nop
   b4580:	2003e6a4 	.word	0x2003e6a4

000b4584 <_Z9ledMoradov>:
void ledMorado()
{
   b4584:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b4586:	2375      	movs	r3, #117	; 0x75
   b4588:	9300      	str	r3, [sp, #0]
   b458a:	4804      	ldr	r0, [pc, #16]	; (b459c <_Z9ledMoradov+0x18>)
   b458c:	2346      	movs	r3, #70	; 0x46
   b458e:	226c      	movs	r2, #108	; 0x6c
   b4590:	2100      	movs	r1, #0
   b4592:	f001 fd91 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4596:	b003      	add	sp, #12
   b4598:	f85d fb04 	ldr.w	pc, [sp], #4
   b459c:	2003e6a4 	.word	0x2003e6a4

000b45a0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b45a0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b45a2:	2100      	movs	r1, #0
   b45a4:	4804      	ldr	r0, [pc, #16]	; (b45b8 <_Z10ledNaranjav+0x18>)
   b45a6:	9100      	str	r1, [sp, #0]
   b45a8:	2380      	movs	r3, #128	; 0x80
   b45aa:	22ff      	movs	r2, #255	; 0xff
   b45ac:	f001 fd84 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45b0:	b003      	add	sp, #12
   b45b2:	f85d fb04 	ldr.w	pc, [sp], #4
   b45b6:	bf00      	nop
   b45b8:	2003e6a4 	.word	0x2003e6a4

000b45bc <_Z9ledBlancov>:
void ledBlanco()
{
   b45bc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b45be:	23ff      	movs	r3, #255	; 0xff
   b45c0:	4804      	ldr	r0, [pc, #16]	; (b45d4 <_Z9ledBlancov+0x18>)
   b45c2:	9300      	str	r3, [sp, #0]
   b45c4:	461a      	mov	r2, r3
   b45c6:	2100      	movs	r1, #0
   b45c8:	f001 fd76 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b45cc:	b003      	add	sp, #12
   b45ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b45d2:	bf00      	nop
   b45d4:	2003e6a4 	.word	0x2003e6a4

000b45d8 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
    if (estado)
   b45d8:	b108      	cbz	r0, b45de <_Z14ledAzulNaranjab+0x6>
        ledAzul();
   b45da:	f7ff bfb7 	b.w	b454c <_Z7ledAzulv>
    else
        ledNaranja();
   b45de:	f7ff bfdf 	b.w	b45a0 <_Z10ledNaranjav>

000b45e2 <_Z17ledMoradoAmarillob>:
}

void ledMoradoAmarillo(boolean estado)
{

    if (estado)
   b45e2:	b108      	cbz	r0, b45e8 <_Z17ledMoradoAmarillob+0x6>
        ledMorado();
   b45e4:	f7ff bfce 	b.w	b4584 <_Z9ledMoradov>
    else
        ledAmarillo();
   b45e8:	f7ff bfbe 	b.w	b4568 <_Z11ledAmarillov>

000b45ec <_Z12ledVerdeRojob>:
}

void ledVerdeRojo(boolean estado)
{
    if (estado)
   b45ec:	b108      	cbz	r0, b45f2 <_Z12ledVerdeRojob+0x6>
        ledRojo();
   b45ee:	f7ff bf91 	b.w	b4514 <_Z7ledRojov>
    else
        ledVerde();
   b45f2:	f7ff bf9d 	b.w	b4530 <_Z8ledVerdev>

000b45f6 <_Z8ledBlinkb>:
}

void ledBlink(boolean estado)
{
   b45f6:	b508      	push	{r3, lr}
    if (estado)
   b45f8:	b160      	cbz	r0, b4614 <_Z8ledBlinkb+0x1e>
    {
        ledBlanco();
   b45fa:	f7ff ffdf 	bl	b45bc <_Z9ledBlancov>
        delay(400);
   b45fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4602:	f002 fd5f 	bl	b70c4 <delay>
        ledApagar();
   b4606:	f7ff ff77 	bl	b44f8 <_Z9ledApagarv>
        delay(200);
    }
    else
        ledApagar();
}
   b460a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        delay(200);
   b460e:	20c8      	movs	r0, #200	; 0xc8
   b4610:	f002 bd58 	b.w	b70c4 <delay>
}
   b4614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledApagar();
   b4618:	f7ff bf6e 	b.w	b44f8 <_Z9ledApagarv>

000b461c <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
    if (estado)
   b461c:	b108      	cbz	r0, b4622 <_Z8ledOnOffb+0x6>
        ledBlanco();
   b461e:	f7ff bfcd 	b.w	b45bc <_Z9ledBlancov>
    else
        ledApagar();
   b4622:	f7ff bf69 	b.w	b44f8 <_Z9ledApagarv>

000b4626 <_Z11ledArcoirisb>:
}

void ledArcoiris(boolean estado)
{
   b4626:	b508      	push	{r3, lr}

    if (estado)
   b4628:	b1f8      	cbz	r0, b466a <_Z11ledArcoirisb+0x44>
    {
        ledRojo();
   b462a:	f7ff ff73 	bl	b4514 <_Z7ledRojov>
        delay(200);
   b462e:	20c8      	movs	r0, #200	; 0xc8
   b4630:	f002 fd48 	bl	b70c4 <delay>
        ledNaranja();
   b4634:	f7ff ffb4 	bl	b45a0 <_Z10ledNaranjav>
        delay(200);
   b4638:	20c8      	movs	r0, #200	; 0xc8
   b463a:	f002 fd43 	bl	b70c4 <delay>
        ledAmarillo();
   b463e:	f7ff ff93 	bl	b4568 <_Z11ledAmarillov>
        delay(200);
   b4642:	20c8      	movs	r0, #200	; 0xc8
   b4644:	f002 fd3e 	bl	b70c4 <delay>
        ledVerde();
   b4648:	f7ff ff72 	bl	b4530 <_Z8ledVerdev>
        delay(200);
   b464c:	20c8      	movs	r0, #200	; 0xc8
   b464e:	f002 fd39 	bl	b70c4 <delay>
        ledMorado();
   b4652:	f7ff ff97 	bl	b4584 <_Z9ledMoradov>
        delay(200);
   b4656:	20c8      	movs	r0, #200	; 0xc8
   b4658:	f002 fd34 	bl	b70c4 <delay>
        ledAzul();
   b465c:	f7ff ff76 	bl	b454c <_Z7ledAzulv>
        delay(200);
    }
    else
        ledApagar();
}
   b4660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        delay(200);
   b4664:	20c8      	movs	r0, #200	; 0xc8
   b4666:	f002 bd2d 	b.w	b70c4 <delay>
}
   b466a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledApagar();
   b466e:	f7ff bf43 	b.w	b44f8 <_Z9ledApagarv>

000b4672 <_Z8pitidoONi>:

// Acciones del zumbador
void pitidoON(int puerto)
{
   b4672:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4674:	b284      	uxth	r4, r0
   b4676:	4620      	mov	r0, r4
   b4678:	2101      	movs	r1, #1
   b467a:	f003 fb9c 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b467e:	4620      	mov	r0, r4
   b4680:	2101      	movs	r1, #1
   b4682:	f003 fb98 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4686:	1c60      	adds	r0, r4, #1
   b4688:	b280      	uxth	r0, r0
   b468a:	2101      	movs	r1, #1
   b468c:	9001      	str	r0, [sp, #4]
   b468e:	f003 fb92 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4692:	9801      	ldr	r0, [sp, #4]
   b4694:	2101      	movs	r1, #1
}
   b4696:	b002      	add	sp, #8
   b4698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b469c:	f003 bb8b 	b.w	b7db6 <digitalWrite>

000b46a0 <_Z9pitidoOFFi>:

void pitidoOFF(int puerto)
{
   b46a0:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b46a2:	b284      	uxth	r4, r0
   b46a4:	4620      	mov	r0, r4
   b46a6:	2100      	movs	r1, #0
   b46a8:	f003 fb85 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto, LOW);
   b46ac:	4620      	mov	r0, r4
   b46ae:	2100      	movs	r1, #0
   b46b0:	f003 fb81 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b46b4:	1c60      	adds	r0, r4, #1
   b46b6:	b280      	uxth	r0, r0
   b46b8:	2100      	movs	r1, #0
   b46ba:	9001      	str	r0, [sp, #4]
   b46bc:	f003 fb7b 	bl	b7db6 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b46c0:	9801      	ldr	r0, [sp, #4]
   b46c2:	2100      	movs	r1, #0
}
   b46c4:	b002      	add	sp, #8
   b46c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b46ca:	f003 bb74 	b.w	b7db6 <digitalWrite>

000b46ce <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b46ce:	b510      	push	{r4, lr}
   b46d0:	4604      	mov	r4, r0
    pitidoON(puerto);
   b46d2:	f7ff ffce 	bl	b4672 <_Z8pitidoONi>
    delay(100);
   b46d6:	2064      	movs	r0, #100	; 0x64
   b46d8:	f002 fcf4 	bl	b70c4 <delay>
    pitidoOFF(puerto);
   b46dc:	4620      	mov	r0, r4
   b46de:	f7ff ffdf 	bl	b46a0 <_Z9pitidoOFFi>
    delay(100);
}
   b46e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b46e6:	2064      	movs	r0, #100	; 0x64
   b46e8:	f002 bcec 	b.w	b70c4 <delay>

000b46ec <_Z13blinkAndSleepbi>:

void blinkAndSleep(boolean estado, int puerto)
{
   b46ec:	4603      	mov	r3, r0
   b46ee:	4608      	mov	r0, r1
    if (estado)
   b46f0:	b10b      	cbz	r3, b46f6 <_Z13blinkAndSleepbi+0xa>
        pitidoBlink(puerto);
   b46f2:	f7ff bfec 	b.w	b46ce <_Z11pitidoBlinki>
    else
        pitidoOFF(puerto);
   b46f6:	f7ff bfd3 	b.w	b46a0 <_Z9pitidoOFFi>

000b46fa <_Z8zumbadorbi>:
}

void zumbador(boolean estado, int puerto)
{
   b46fa:	4603      	mov	r3, r0
   b46fc:	4608      	mov	r0, r1
    if (estado)
   b46fe:	b10b      	cbz	r3, b4704 <_Z8zumbadorbi+0xa>
        pitidoON(puerto);
   b4700:	f7ff bfb7 	b.w	b4672 <_Z8pitidoONi>
    else
        pitidoOFF(puerto);
   b4704:	f7ff bfcc 	b.w	b46a0 <_Z9pitidoOFFi>

000b4708 <_Z10activarLEDiib>:
}

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto, bool valor)
{
   b4708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b470a:	460d      	mov	r5, r1
   b470c:	4614      	mov	r4, r2
   b470e:	4606      	mov	r6, r0
    Serial.println("ACTIVAR LED");
   b4710:	f003 f9b6 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4714:	4926      	ldr	r1, [pc, #152]	; (b47b0 <_Z10activarLEDiib+0xa8>)
    ledObject = ChainableLED(puerto, puerto + 1, 5);
   b4716:	4f27      	ldr	r7, [pc, #156]	; (b47b4 <_Z10activarLEDiib+0xac>)
    Serial.println("ACTIVAR LED");
   b4718:	f002 feff 	bl	b751a <_ZN5Print7printlnEPKc>
    ledObject = ChainableLED(puerto, puerto + 1, 5);
   b471c:	b2e9      	uxtb	r1, r5
   b471e:	1c4a      	adds	r2, r1, #1
   b4720:	466d      	mov	r5, sp
   b4722:	2305      	movs	r3, #5
   b4724:	b2d2      	uxtb	r2, r2
   b4726:	4628      	mov	r0, r5
   b4728:	f001 fc5c 	bl	b5fe4 <_ZN12ChainableLEDC1Ehhh>
   b472c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4730:	e887 0003 	stmia.w	r7, {r0, r1}
   b4734:	4628      	mov	r0, r5
   b4736:	f001 fc62 	bl	b5ffe <_ZN12ChainableLEDD1Ev>
    ledObject.init();
   b473a:	4638      	mov	r0, r7
   b473c:	f001 fd04 	bl	b6148 <_ZN12ChainableLED4initEv>
    // ChainableLED ledObject(puerto, puerto + 1, 5);

    switch (opcion)
   b4740:	2e05      	cmp	r6, #5
   b4742:	d82d      	bhi.n	b47a0 <_Z10activarLEDiib+0x98>
   b4744:	e8df f006 	tbb	[pc, r6]
   b4748:	1a140e03 	.word	0x1a140e03
   b474c:	2620      	.short	0x2620
    {
    case 0:
        Serial.println("LED: CASE 0");
   b474e:	f003 f997 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4752:	4919      	ldr	r1, [pc, #100]	; (b47b8 <_Z10activarLEDiib+0xb0>)
   b4754:	f002 fee1 	bl	b751a <_ZN5Print7printlnEPKc>

        ledVerdeRojo(valor);
   b4758:	4620      	mov	r0, r4

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b475a:	b003      	add	sp, #12
   b475c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledVerdeRojo(valor);
   b4760:	f7ff bf44 	b.w	b45ec <_Z12ledVerdeRojob>
        ledMoradoAmarillo(valor);
   b4764:	4620      	mov	r0, r4
}
   b4766:	b003      	add	sp, #12
   b4768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledMoradoAmarillo(valor);
   b476c:	f7ff bf39 	b.w	b45e2 <_Z17ledMoradoAmarillob>
        ledAzulNaranja(valor);
   b4770:	4620      	mov	r0, r4
}
   b4772:	b003      	add	sp, #12
   b4774:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledAzulNaranja(valor);
   b4778:	f7ff bf2e 	b.w	b45d8 <_Z14ledAzulNaranjab>
        ledBlink(valor);
   b477c:	4620      	mov	r0, r4
}
   b477e:	b003      	add	sp, #12
   b4780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledBlink(valor);
   b4784:	f7ff bf37 	b.w	b45f6 <_Z8ledBlinkb>
        ledArcoiris(valor);
   b4788:	4620      	mov	r0, r4
}
   b478a:	b003      	add	sp, #12
   b478c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledArcoiris(valor);
   b4790:	f7ff bf49 	b.w	b4626 <_Z11ledArcoirisb>
        ledOnOff(valor);
   b4794:	4620      	mov	r0, r4
}
   b4796:	b003      	add	sp, #12
   b4798:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ledOnOff(valor);
   b479c:	f7ff bf3e 	b.w	b461c <_Z8ledOnOffb>
        Serial.println("LedErrorOption");
   b47a0:	f003 f96e 	bl	b7a80 <_Z16_fetch_usbserialv>
   b47a4:	4905      	ldr	r1, [pc, #20]	; (b47bc <_Z10activarLEDiib+0xb4>)
}
   b47a6:	b003      	add	sp, #12
   b47a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("LedErrorOption");
   b47ac:	f002 beb5 	b.w	b751a <_ZN5Print7printlnEPKc>
   b47b0:	000b87f1 	.word	0x000b87f1
   b47b4:	2003e6a4 	.word	0x2003e6a4
   b47b8:	000b87fd 	.word	0x000b87fd
   b47bc:	000b8809 	.word	0x000b8809

000b47c0 <_Z15activarZumbadoriib>:

void activarZumbador(int opcion, int puerto, bool valor)
{
   b47c0:	b570      	push	{r4, r5, r6, lr}
   b47c2:	460c      	mov	r4, r1
   b47c4:	4606      	mov	r6, r0
    pinMode(puerto, OUTPUT);
   b47c6:	2101      	movs	r1, #1
   b47c8:	b2a0      	uxth	r0, r4
{
   b47ca:	4615      	mov	r5, r2
    pinMode(puerto, OUTPUT);
   b47cc:	f003 fae2 	bl	b7d94 <pinMode>

    switch (opcion)
   b47d0:	b146      	cbz	r6, b47e4 <_Z15activarZumbadoriib+0x24>
   b47d2:	2e01      	cmp	r6, #1
   b47d4:	d00c      	beq.n	b47f0 <_Z15activarZumbadoriib+0x30>
        break;
    case 1:
        blinkAndSleep(valor, puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b47d6:	f003 f953 	bl	b7a80 <_Z16_fetch_usbserialv>
        break;
    }
   b47da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.println("Valor no valido");
   b47de:	4907      	ldr	r1, [pc, #28]	; (b47fc <_Z15activarZumbadoriib+0x3c>)
   b47e0:	f002 be9b 	b.w	b751a <_ZN5Print7printlnEPKc>
        zumbador(valor, puerto);
   b47e4:	4621      	mov	r1, r4
   b47e6:	4628      	mov	r0, r5
   b47e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        zumbador(valor, puerto);
   b47ec:	f7ff bf85 	b.w	b46fa <_Z8zumbadorbi>
        blinkAndSleep(valor, puerto);
   b47f0:	4621      	mov	r1, r4
   b47f2:	4628      	mov	r0, r5
   b47f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        blinkAndSleep(valor, puerto);
   b47f8:	f7ff bf78 	b.w	b46ec <_Z13blinkAndSleepbi>
   b47fc:	000b8818 	.word	0x000b8818

000b4800 <_Z11noDistanciai>:

// Distance
#include "Grove-Ultrasonic-Ranger.h"

boolean noDistancia(int puerto)
{
   b4800:	b513      	push	{r0, r1, r4, lr}
   b4802:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4804:	a801      	add	r0, sp, #4
   b4806:	f002 f9cb 	bl	b6ba0 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b480a:	a801      	add	r0, sp, #4
   b480c:	f002 f9ca 	bl	b6ba4 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b4810:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b4812:	f003 f935 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4816:	4905      	ldr	r1, [pc, #20]	; (b482c <_Z11noDistanciai+0x2c>)
   b4818:	4622      	mov	r2, r4
   b481a:	f7ff fc5f 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b481e:	2c09      	cmp	r4, #9
   b4820:	bf8c      	ite	hi
   b4822:	2000      	movhi	r0, #0
   b4824:	2001      	movls	r0, #1
   b4826:	b002      	add	sp, #8
   b4828:	bd10      	pop	{r4, pc}
   b482a:	bf00      	nop
   b482c:	000b8828 	.word	0x000b8828

000b4830 <_Z11siDistanciai>:
boolean siDistancia(int puerto)
{
   b4830:	b513      	push	{r0, r1, r4, lr}
   b4832:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4834:	a801      	add	r0, sp, #4
   b4836:	f002 f9b3 	bl	b6ba0 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b483a:	a801      	add	r0, sp, #4
   b483c:	f002 f9b2 	bl	b6ba4 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b4840:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b4842:	f003 f91d 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4846:	4905      	ldr	r1, [pc, #20]	; (b485c <_Z11siDistanciai+0x2c>)
   b4848:	4622      	mov	r2, r4
   b484a:	f7ff fc47 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (range > 10)
        return true;
    else
        return false;
}
   b484e:	2c0a      	cmp	r4, #10
   b4850:	bfd4      	ite	le
   b4852:	2000      	movle	r0, #0
   b4854:	2001      	movgt	r0, #1
   b4856:	b002      	add	sp, #8
   b4858:	bd10      	pop	{r4, pc}
   b485a:	bf00      	nop
   b485c:	000b8828 	.word	0x000b8828

000b4860 <_Z5siLuzi>:

boolean siLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4860:	2802      	cmp	r0, #2
{
   b4862:	b508      	push	{r3, lr}
    switch (puerto)
   b4864:	d00b      	beq.n	b487e <_Z5siLuzi+0x1e>
   b4866:	2804      	cmp	r0, #4
   b4868:	d00b      	beq.n	b4882 <_Z5siLuzi+0x22>
   b486a:	b960      	cbnz	r0, b4886 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b486c:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b486e:	f003 face 	bl	b7e0e <analogRead>
   b4872:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4876:	bfb4      	ite	lt
   b4878:	2000      	movlt	r0, #0
   b487a:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b487c:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b487e:	2011      	movs	r0, #17
   b4880:	e7f5      	b.n	b486e <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4882:	200f      	movs	r0, #15
   b4884:	e7f3      	b.n	b486e <_Z5siLuzi+0xe>
    switch (puerto)
   b4886:	2000      	movs	r0, #0
   b4888:	e7f8      	b.n	b487c <_Z5siLuzi+0x1c>

000b488a <_Z5noLuzi>:

boolean noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b488a:	2802      	cmp	r0, #2
{
   b488c:	b508      	push	{r3, lr}
    switch (puerto)
   b488e:	d00b      	beq.n	b48a8 <_Z5noLuzi+0x1e>
   b4890:	2804      	cmp	r0, #4
   b4892:	d00b      	beq.n	b48ac <_Z5noLuzi+0x22>
   b4894:	b960      	cbnz	r0, b48b0 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4896:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4898:	f003 fab9 	bl	b7e0e <analogRead>
   b489c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b48a0:	bfcc      	ite	gt
   b48a2:	2000      	movgt	r0, #0
   b48a4:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b48a6:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b48a8:	2011      	movs	r0, #17
   b48aa:	e7f5      	b.n	b4898 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b48ac:	200f      	movs	r0, #15
   b48ae:	e7f3      	b.n	b4898 <_Z5noLuzi+0xe>
    switch (puerto)
   b48b0:	2000      	movs	r0, #0
   b48b2:	e7f8      	b.n	b48a6 <_Z5noLuzi+0x1c>

000b48b4 <_Z7siRuidoi>:
//         return true;
//     return false;
// }

boolean siRuido(int puerto)
{
   b48b4:	b508      	push	{r3, lr}
    if (analogRead(puerto) >= 700)
   b48b6:	b280      	uxth	r0, r0
   b48b8:	f003 faa9 	bl	b7e0e <analogRead>
        return true;
    return false;
}
   b48bc:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b48c0:	bfb4      	ite	lt
   b48c2:	2000      	movlt	r0, #0
   b48c4:	2001      	movge	r0, #1
   b48c6:	bd08      	pop	{r3, pc}

000b48c8 <_Z7noRuidoi>:

boolean noRuido(int puerto)
{
   b48c8:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b48ca:	b280      	uxth	r0, r0
   b48cc:	f003 fa9f 	bl	b7e0e <analogRead>
        return true;
    return false;
}
   b48d0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b48d4:	bfcc      	ite	gt
   b48d6:	2000      	movgt	r0, #0
   b48d8:	2001      	movle	r0, #1
   b48da:	bd08      	pop	{r3, pc}

000b48dc <_Z7siBotoni>:

boolean siBoton(int puerto)
{
   b48dc:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b48de:	b280      	uxth	r0, r0
   b48e0:	2100      	movs	r1, #0
   b48e2:	9001      	str	r0, [sp, #4]
   b48e4:	f003 fa56 	bl	b7d94 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b48e8:	9801      	ldr	r0, [sp, #4]
   b48ea:	f003 fa7d 	bl	b7de8 <digitalRead>
        return true;
    return false;
}
   b48ee:	1e43      	subs	r3, r0, #1
   b48f0:	4258      	negs	r0, r3
   b48f2:	4158      	adcs	r0, r3
   b48f4:	b003      	add	sp, #12
   b48f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b48fa <_Z7noBotoni>:

boolean noBoton(int puerto)
{
   b48fa:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b48fc:	b280      	uxth	r0, r0
   b48fe:	2100      	movs	r1, #0
   b4900:	9001      	str	r0, [sp, #4]
   b4902:	f003 fa47 	bl	b7d94 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4906:	9801      	ldr	r0, [sp, #4]
   b4908:	f003 fa6e 	bl	b7de8 <digitalRead>
        return true;
    return false;
}
   b490c:	fab0 f080 	clz	r0, r0
   b4910:	0940      	lsrs	r0, r0, #5
   b4912:	b003      	add	sp, #12
   b4914:	f85d fb04 	ldr.w	pc, [sp], #4

000b4918 <_Z10siRotativoi>:

boolean siRotativo(int puerto)
{
   b4918:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b491a:	b280      	uxth	r0, r0
   b491c:	f003 fa77 	bl	b7e0e <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b4920:	ee07 0a90 	vmov	s15, r0
   b4924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4928:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b492c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4930:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4958 <_Z10siRotativoi+0x40>
   b4934:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4938:	eddf 7a08 	vldr	s15, [pc, #32]	; b495c <_Z10siRotativoi+0x44>
   b493c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4940:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 680)
   b4944:	eddf 7a06 	vldr	s15, [pc, #24]	; b4960 <_Z10siRotativoi+0x48>
   b4948:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4950:	bfac      	ite	ge
   b4952:	2001      	movge	r0, #1
   b4954:	2000      	movlt	r0, #0
   b4956:	bd08      	pop	{r3, pc}
   b4958:	447fc000 	.word	0x447fc000
   b495c:	43960000 	.word	0x43960000
   b4960:	442a0000 	.word	0x442a0000

000b4964 <_Z10noRotativoi>:

boolean noRotativo(int puerto)
{
   b4964:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b4966:	b280      	uxth	r0, r0
   b4968:	f003 fa51 	bl	b7e0e <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b496c:	ee07 0a90 	vmov	s15, r0
   b4970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4974:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4978:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b497c:	ed9f 6a09 	vldr	s12, [pc, #36]	; b49a4 <_Z10noRotativoi+0x40>
   b4980:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4984:	eddf 7a08 	vldr	s15, [pc, #32]	; b49a8 <_Z10noRotativoi+0x44>
   b4988:	ee67 7a27 	vmul.f32	s15, s14, s15
   b498c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b4990:	eddf 7a06 	vldr	s15, [pc, #24]	; b49ac <_Z10noRotativoi+0x48>
   b4994:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b499c:	bf94      	ite	ls
   b499e:	2001      	movls	r0, #1
   b49a0:	2000      	movhi	r0, #0
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	447fc000 	.word	0x447fc000
   b49a8:	43960000 	.word	0x43960000
   b49ac:	442a0000 	.word	0x442a0000

000b49b0 <_Z8tempFrioi>:

boolean tempFrio(int puerto)
{
   b49b0:	b530      	push	{r4, r5, lr}
   b49b2:	ed2d 8b02 	vpush	{d8}
   b49b6:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b49b8:	b2c1      	uxtb	r1, r0
   b49ba:	2306      	movs	r3, #6
   b49bc:	220b      	movs	r2, #11
   b49be:	a801      	add	r0, sp, #4
   b49c0:	f002 f828 	bl	b6a14 <_ZN3DHTC1Ehhh>
    dht.begin();
   b49c4:	a801      	add	r0, sp, #4
   b49c6:	f002 f82c 	bl	b6a22 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b49ca:	a801      	add	r0, sp, #4
   b49cc:	f002 f8e6 	bl	b6b9c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b49d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b49d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b49d8:	eeb4 0a40 	vcmp.f32	s0, s0
   b49dc:	bf0c      	ite	eq
   b49de:	2401      	moveq	r4, #1
   b49e0:	2400      	movne	r4, #0
   b49e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b49e6:	bf68      	it	vs
   b49e8:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b49ec:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b49f0:	2c00      	cmp	r4, #0
   b49f2:	d1ea      	bne.n	b49ca <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b49f4:	f003 f844 	bl	b7a80 <_Z16_fetch_usbserialv>
   b49f8:	4605      	mov	r5, r0
   b49fa:	ee18 0a10 	vmov	r0, s16
   b49fe:	f003 fc01 	bl	b8204 <__aeabi_f2d>
   b4a02:	4602      	mov	r2, r0
   b4a04:	460b      	mov	r3, r1
   b4a06:	4628      	mov	r0, r5
   b4a08:	490a      	ldr	r1, [pc, #40]	; (b4a34 <_Z8tempFrioi+0x84>)
   b4a0a:	f7ff fb67 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4a0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a16:	dd08      	ble.n	b4a2a <_Z8tempFrioi+0x7a>
   b4a18:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4a1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a24:	bf4c      	ite	mi
   b4a26:	2401      	movmi	r4, #1
   b4a28:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4a2a:	4620      	mov	r0, r4
   b4a2c:	b007      	add	sp, #28
   b4a2e:	ecbd 8b02 	vpop	{d8}
   b4a32:	bd30      	pop	{r4, r5, pc}
   b4a34:	000b8836 	.word	0x000b8836

000b4a38 <_Z12tempTempladoi>:
boolean tempTemplado(int puerto)
{
   b4a38:	b530      	push	{r4, r5, lr}
   b4a3a:	ed2d 8b02 	vpush	{d8}
   b4a3e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4a40:	b2c1      	uxtb	r1, r0
   b4a42:	2306      	movs	r3, #6
   b4a44:	220b      	movs	r2, #11
   b4a46:	a801      	add	r0, sp, #4
   b4a48:	f001 ffe4 	bl	b6a14 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4a4c:	a801      	add	r0, sp, #4
   b4a4e:	f001 ffe8 	bl	b6a22 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4a52:	a801      	add	r0, sp, #4
   b4a54:	f002 f8a2 	bl	b6b9c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4a58:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a60:	eeb4 0a40 	vcmp.f32	s0, s0
   b4a64:	bf0c      	ite	eq
   b4a66:	2401      	moveq	r4, #1
   b4a68:	2400      	movne	r4, #0
   b4a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a6e:	bf68      	it	vs
   b4a70:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4a74:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4a78:	2c00      	cmp	r4, #0
   b4a7a:	d1ea      	bne.n	b4a52 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4a7c:	f003 f800 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4a80:	4605      	mov	r5, r0
   b4a82:	ee18 0a10 	vmov	r0, s16
   b4a86:	f003 fbbd 	bl	b8204 <__aeabi_f2d>
   b4a8a:	4602      	mov	r2, r0
   b4a8c:	460b      	mov	r3, r1
   b4a8e:	4628      	mov	r0, r5
   b4a90:	490b      	ldr	r1, [pc, #44]	; (b4ac0 <_Z12tempTempladoi+0x88>)
   b4a92:	f7ff fb23 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4a96:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4a9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4aa2:	dd08      	ble.n	b4ab6 <_Z12tempTempladoi+0x7e>
   b4aa4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4aa8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ab0:	bf4c      	ite	mi
   b4ab2:	2401      	movmi	r4, #1
   b4ab4:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4ab6:	4620      	mov	r0, r4
   b4ab8:	b007      	add	sp, #28
   b4aba:	ecbd 8b02 	vpop	{d8}
   b4abe:	bd30      	pop	{r4, r5, pc}
   b4ac0:	000b8836 	.word	0x000b8836

000b4ac4 <_Z9tempCalori>:
boolean tempCalor(int puerto)
{
   b4ac4:	b530      	push	{r4, r5, lr}
   b4ac6:	ed2d 8b02 	vpush	{d8}
   b4aca:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4acc:	b2c1      	uxtb	r1, r0
   b4ace:	2306      	movs	r3, #6
   b4ad0:	220b      	movs	r2, #11
   b4ad2:	a801      	add	r0, sp, #4
   b4ad4:	f001 ff9e 	bl	b6a14 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4ad8:	a801      	add	r0, sp, #4
   b4ada:	f001 ffa2 	bl	b6a22 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4ade:	a801      	add	r0, sp, #4
   b4ae0:	f002 f85c 	bl	b6b9c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4ae4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4aec:	eeb4 0a40 	vcmp.f32	s0, s0
   b4af0:	bf0c      	ite	eq
   b4af2:	2401      	moveq	r4, #1
   b4af4:	2400      	movne	r4, #0
   b4af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4afa:	bf68      	it	vs
   b4afc:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4b00:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4b04:	2c00      	cmp	r4, #0
   b4b06:	d1ea      	bne.n	b4ade <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4b08:	f002 ffba 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4b0c:	4605      	mov	r5, r0
   b4b0e:	ee18 0a10 	vmov	r0, s16
   b4b12:	f003 fb77 	bl	b8204 <__aeabi_f2d>
   b4b16:	4602      	mov	r2, r0
   b4b18:	460b      	mov	r3, r1
   b4b1a:	4628      	mov	r0, r5
   b4b1c:	490b      	ldr	r1, [pc, #44]	; (b4b4c <_Z9tempCalori+0x88>)
   b4b1e:	f7ff fadd 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4b22:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4b26:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b2e:	dd08      	ble.n	b4b42 <_Z9tempCalori+0x7e>
   b4b30:	eddf 7a07 	vldr	s15, [pc, #28]	; b4b50 <_Z9tempCalori+0x8c>
   b4b34:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b3c:	bf4c      	ite	mi
   b4b3e:	2401      	movmi	r4, #1
   b4b40:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4b42:	4620      	mov	r0, r4
   b4b44:	b007      	add	sp, #28
   b4b46:	ecbd 8b02 	vpop	{d8}
   b4b4a:	bd30      	pop	{r4, r5, pc}
   b4b4c:	000b8836 	.word	0x000b8836
   b4b50:	42480000 	.word	0x42480000

000b4b54 <_Z10leerSensoriii>:

boolean leerSensor(int id, int condicion, int puerto)
{
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4603      	mov	r3, r0
   b4b58:	3b01      	subs	r3, #1
   b4b5a:	4610      	mov	r0, r2
   b4b5c:	2b06      	cmp	r3, #6
   b4b5e:	d843      	bhi.n	b4be8 <_Z10leerSensoriii+0x94>
   b4b60:	e8df f003 	tbb	[pc, r3]
   b4b64:	1b120904 	.word	0x1b120904
   b4b68:	2d24      	.short	0x2d24
   b4b6a:	04          	.byte	0x04
   b4b6b:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4b6c:	bbc1      	cbnz	r1, b4be0 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4b72:	f7ff be45 	b.w	b4800 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b76:	b919      	cbnz	r1, b4b80 <_Z10leerSensoriii+0x2c>
   b4b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b7c:	f7ff be85 	b.w	b488a <_Z5noLuzi>
   b4b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4b84:	f7ff be6c 	b.w	b4860 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b88:	b919      	cbnz	r1, b4b92 <_Z10leerSensoriii+0x3e>
   b4b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b8e:	f7ff be9b 	b.w	b48c8 <_Z7noRuidoi>
   b4b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4b96:	f7ff be8d 	b.w	b48b4 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4b9a:	b919      	cbnz	r1, b4ba4 <_Z10leerSensoriii+0x50>
   b4b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4ba0:	f7ff beab 	b.w	b48fa <_Z7noBotoni>
   b4ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4ba8:	f7ff be98 	b.w	b48dc <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4bac:	b919      	cbnz	r1, b4bb6 <_Z10leerSensoriii+0x62>
   b4bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4bb2:	f7ff bed7 	b.w	b4964 <_Z10noRotativoi>
   b4bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4bba:	f7ff bead 	b.w	b4918 <_Z10siRotativoi>
        switch (condicion)
   b4bbe:	2901      	cmp	r1, #1
   b4bc0:	d006      	beq.n	b4bd0 <_Z10leerSensoriii+0x7c>
   b4bc2:	2902      	cmp	r1, #2
   b4bc4:	d008      	beq.n	b4bd8 <_Z10leerSensoriii+0x84>
   b4bc6:	b959      	cbnz	r1, b4be0 <_Z10leerSensoriii+0x8c>
   b4bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4bcc:	f7ff bef0 	b.w	b49b0 <_Z8tempFrioi>
   b4bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4bd4:	f7ff bf30 	b.w	b4a38 <_Z12tempTempladoi>
   b4bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4bdc:	f7ff bf72 	b.w	b4ac4 <_Z9tempCalori>
   b4be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4be4:	f7ff be24 	b.w	b4830 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4be8:	f002 ff4a 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4bec:	4902      	ldr	r1, [pc, #8]	; (b4bf8 <_Z10leerSensoriii+0xa4>)
   b4bee:	f002 fc94 	bl	b751a <_ZN5Print7printlnEPKc>
   b4bf2:	2000      	movs	r0, #0
   b4bf4:	bd08      	pop	{r3, pc}
   b4bf6:	bf00      	nop
   b4bf8:	000b883f 	.word	0x000b883f

000b4bfc <setup>:

// Informacion de la tarjeta leida.
int tagInfo[6] = {-1, -1, -1, -1, -1, -1};

void setup()
{
   b4bfc:	b510      	push	{r4, lr}

  ledObject.init();
   b4bfe:	4821      	ldr	r0, [pc, #132]	; (b4c84 <setup+0x88>)
{
   b4c00:	b088      	sub	sp, #32
  ledObject.init();
   b4c02:	f001 faa1 	bl	b6148 <_ZN12ChainableLED4initEv>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4c06:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4c08:	a805      	add	r0, sp, #20
   b4c0a:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4c0e:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4c12:	f002 fa63 	bl	b70dc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4c16:	481c      	ldr	r0, [pc, #112]	; (b4c88 <setup+0x8c>)
   b4c18:	4623      	mov	r3, r4
   b4c1a:	4622      	mov	r2, r4
   b4c1c:	4621      	mov	r1, r4
   b4c1e:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4c20:	4c1a      	ldr	r4, [pc, #104]	; (b4c8c <setup+0x90>)
   b4c22:	f002 f9d7 	bl	b6fd4 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4c26:	f002 ff2b 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4c2a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c2e:	f002 ff1b 	bl	b7a68 <_ZN9USBSerial5beginEl>
   b4c32:	7821      	ldrb	r1, [r4, #0]
   b4c34:	f3bf 8f5b 	dmb	ish
   b4c38:	f011 0101 	ands.w	r1, r1, #1
   b4c3c:	d10b      	bne.n	b4c56 <setup+0x5a>
   b4c3e:	4620      	mov	r0, r4
   b4c40:	9103      	str	r1, [sp, #12]
   b4c42:	f7ff fa35 	bl	b40b0 <__cxa_guard_acquire>
   b4c46:	9903      	ldr	r1, [sp, #12]
   b4c48:	b128      	cbz	r0, b4c56 <setup+0x5a>
   b4c4a:	4811      	ldr	r0, [pc, #68]	; (b4c90 <setup+0x94>)
   b4c4c:	f002 fcca 	bl	b75e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4c50:	4620      	mov	r0, r4
   b4c52:	f7ff fa32 	bl	b40ba <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4c56:	480e      	ldr	r0, [pc, #56]	; (b4c90 <setup+0x94>)
   b4c58:	f002 fcce 	bl	b75f8 <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4c5c:	2301      	movs	r3, #1
   b4c5e:	9300      	str	r3, [sp, #0]
   b4c60:	223c      	movs	r2, #60	; 0x3c
   b4c62:	2102      	movs	r1, #2
   b4c64:	480b      	ldr	r0, [pc, #44]	; (b4c94 <setup+0x98>)
   b4c66:	f000 fead 	bl	b59c4 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4c6a:	480b      	ldr	r0, [pc, #44]	; (b4c98 <setup+0x9c>)
   b4c6c:	f001 fbcd 	bl	b640a <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b4c70:	4b0a      	ldr	r3, [pc, #40]	; (b4c9c <setup+0xa0>)
   b4c72:	22ff      	movs	r2, #255	; 0xff
   b4c74:	701a      	strb	r2, [r3, #0]
   b4c76:	705a      	strb	r2, [r3, #1]
   b4c78:	709a      	strb	r2, [r3, #2]
   b4c7a:	70da      	strb	r2, [r3, #3]
   b4c7c:	711a      	strb	r2, [r3, #4]
   b4c7e:	715a      	strb	r2, [r3, #5]
  }
}
   b4c80:	b008      	add	sp, #32
   b4c82:	bd10      	pop	{r4, pc}
   b4c84:	2003e6a4 	.word	0x2003e6a4
   b4c88:	2003e718 	.word	0x2003e718
   b4c8c:	2003e5d4 	.word	0x2003e5d4
   b4c90:	2003e5d8 	.word	0x2003e5d8
   b4c94:	2003e62c 	.word	0x2003e62c
   b4c98:	2003e6ac 	.word	0x2003e6ac
   b4c9c:	2003e69d 	.word	0x2003e69d

000b4ca0 <loop>:

void loop()
{
   b4ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b4ca4:	4857      	ldr	r0, [pc, #348]	; (b4e04 <loop+0x164>)
   b4ca6:	f001 fcdb 	bl	b6660 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4caa:	b1a8      	cbz	r0, b4cd8 <loop+0x38>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b4cac:	4855      	ldr	r0, [pc, #340]	; (b4e04 <loop+0x164>)
   b4cae:	f001 fea8 	bl	b6a02 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4cb2:	2800      	cmp	r0, #0
   b4cb4:	f000 80a2 	beq.w	b4dfc <loop+0x15c>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
   b4cb8:	4c53      	ldr	r4, [pc, #332]	; (b4e08 <loop+0x168>)
   b4cba:	4620      	mov	r0, r4
   b4cbc:	f000 fe74 	bl	b59a8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4cc0:	4620      	mov	r0, r4
   b4cc2:	2101      	movs	r1, #1
   b4cc4:	f000 fccb 	bl	b565e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4cc8:	2000      	movs	r0, #0
   b4cca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4cce:	e9c4 0304 	strd	r0, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b4cd2:	484e      	ldr	r0, [pc, #312]	; (b4e0c <loop+0x16c>)
   b4cd4:	f7ff fb50 	bl	b4378 <_Z8getTagIDPi>
  }

  // Si se ha pasado nueva tag:
  if (tagInfo[0] != -1)
   b4cd8:	4c4c      	ldr	r4, [pc, #304]	; (b4e0c <loop+0x16c>)
   b4cda:	6823      	ldr	r3, [r4, #0]
   b4cdc:	3301      	adds	r3, #1
   b4cde:	d043      	beq.n	b4d68 <loop+0xc8>
  {
    // Ejemplo lectura de informacion codificada en tarjeta.
    Serial.println(esSensor(tagInfo[0]) ? "Es Sensor" : "Es Actuador");
   b4ce0:	f002 fece 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4ce4:	4a4a      	ldr	r2, [pc, #296]	; (b4e10 <loop+0x170>)
   b4ce6:	4b4b      	ldr	r3, [pc, #300]	; (b4e14 <loop+0x174>)
   b4ce8:	6821      	ldr	r1, [r4, #0]
   b4cea:	2900      	cmp	r1, #0
   b4cec:	bf0c      	ite	eq
   b4cee:	4611      	moveq	r1, r2
   b4cf0:	4619      	movne	r1, r3
   b4cf2:	f002 fc12 	bl	b751a <_ZN5Print7printlnEPKc>
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4cf6:	f002 fec3 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4cfa:	4b47      	ldr	r3, [pc, #284]	; (b4e18 <loop+0x178>)
   b4cfc:	6861      	ldr	r1, [r4, #4]
   b4cfe:	4a47      	ldr	r2, [pc, #284]	; (b4e1c <loop+0x17c>)
   b4d00:	2900      	cmp	r1, #0
   b4d02:	bf0c      	ite	eq
   b4d04:	4611      	moveq	r1, r2
   b4d06:	4619      	movne	r1, r3
   b4d08:	f002 fc07 	bl	b751a <_ZN5Print7printlnEPKc>

    // Si la tag es Sensor:
    if (esSensor(tagInfo[0]))
   b4d0c:	6823      	ldr	r3, [r4, #0]
    {
      //  Si no tenemos 2 sensores.
      if (numSensores(sensoresArray) < 2)
   b4d0e:	4844      	ldr	r0, [pc, #272]	; (b4e20 <loop+0x180>)
    if (esSensor(tagInfo[0]))
   b4d10:	2b00      	cmp	r3, #0
   b4d12:	d15a      	bne.n	b4dca <loop+0x12a>
      if (numSensores(sensoresArray) < 2)
   b4d14:	f7ff fbe2 	bl	b44dc <_Z11numSensoresPb>
   b4d18:	2801      	cmp	r0, #1
   b4d1a:	dc50      	bgt.n	b4dbe <loop+0x11e>
      {
        // Añadimos el sensor a un puerto disponible.
        int puerto = asignarPuerto(tagInfo[1]);
   b4d1c:	6860      	ldr	r0, [r4, #4]
   b4d1e:	f7ff fb7b 	bl	b4418 <_Z13asignarPuertoi>

        // Si el puerto es distinto de -1 el sensor ha sido asignado correctamente.
        if (puerto != -1)
   b4d22:	1c41      	adds	r1, r0, #1
        int puerto = asignarPuerto(tagInfo[1]);
   b4d24:	4605      	mov	r5, r0
        if (puerto != -1)
   b4d26:	d01c      	beq.n	b4d62 <loop+0xc2>
        {
          // Actualizamos la cantidad de sensores en el sistema
          incrementarSensor(sensoresArray);
   b4d28:	483d      	ldr	r0, [pc, #244]	; (b4e20 <loop+0x180>)
          // Guardamos el ID
          idSensor[indice] = tagInfo[2];
          // Serial.printf("ID: %d ", idSensor[indice]);

          // Guardamos la condicion
          condicionSensor[indice] = tagInfo[3];
   b4d2a:	493e      	ldr	r1, [pc, #248]	; (b4e24 <loop+0x184>)
          incrementarSensor(sensoresArray);
   b4d2c:	f7ff fbdc 	bl	b44e8 <_Z17incrementarSensorPb>
          int indice = numSensores(sensoresArray) - 1;
   b4d30:	483b      	ldr	r0, [pc, #236]	; (b4e20 <loop+0x180>)
   b4d32:	f7ff fbd3 	bl	b44dc <_Z11numSensoresPb>
          idSensor[indice] = tagInfo[2];
   b4d36:	4b3c      	ldr	r3, [pc, #240]	; (b4e28 <loop+0x188>)
   b4d38:	68a2      	ldr	r2, [r4, #8]
          int indice = numSensores(sensoresArray) - 1;
   b4d3a:	3801      	subs	r0, #1
          idSensor[indice] = tagInfo[2];
   b4d3c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          condicionSensor[indice] = tagInfo[3];
   b4d40:	68e3      	ldr	r3, [r4, #12]
   b4d42:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
          // Serial.printf("Condicion: %d ", condicionSensor[indice]);

          // Guardamos el puerto asignado del sensor.
          puertosSensores[indice] = puerto;
   b4d46:	4939      	ldr	r1, [pc, #228]	; (b4e2c <loop+0x18c>)
   b4d48:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
   return id == 0;
   b4d4c:	e9d4 0100 	ldrd	r0, r1, [r4]
          // Serial.printlnf("Puerto: %d", puertosSensores[indice]);

          // Mostramos Sensor en pantalla:
          displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), idSensor[indice], condicionSensor[indice], puerto);
   b4d50:	9500      	str	r5, [sp, #0]
        {
          puertoActuador = puerto;
        }

        // Mostramos Actuador en pantalla:
        displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), tagInfo[2], tagInfo[3], puertoActuador);
   b4d52:	fab1 f181 	clz	r1, r1
   b4d56:	fab0 f080 	clz	r0, r0
   b4d5a:	0949      	lsrs	r1, r1, #5
   b4d5c:	0940      	lsrs	r0, r0, #5
   b4d5e:	f7ff f9cb 	bl	b40f8 <_Z12displayPrintbbiii>
      else
      {
        Serial.println("Error: necesario al menos un sensor");
      }
    }
    tagInfo[0] = -1;
   b4d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d66:	6023      	str	r3, [r4, #0]
  }

  // Para iteacion del loop tenemos que leer los sensores y ejecutar actuadores, en caso de ser posible.
  int num = numSensores(sensoresArray);
   b4d68:	482d      	ldr	r0, [pc, #180]	; (b4e20 <loop+0x180>)
   b4d6a:	f7ff fbb7 	bl	b44dc <_Z11numSensoresPb>

  if (num > 0)
   b4d6e:	1e05      	subs	r5, r0, #0
   b4d70:	dd1f      	ble.n	b4db2 <loop+0x112>
  {
    //  Leemos el valor del sensor 1;
    bool valueSensor1 = leerSensor(idSensor[0], condicionSensor[0], puertosSensores[0]);
   b4d72:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4e2c <loop+0x18c>
   b4d76:	4f2b      	ldr	r7, [pc, #172]	; (b4e24 <loop+0x184>)
   b4d78:	4e2b      	ldr	r6, [pc, #172]	; (b4e28 <loop+0x188>)
   b4d7a:	f8d8 2000 	ldr.w	r2, [r8]
   b4d7e:	6839      	ldr	r1, [r7, #0]
   b4d80:	6830      	ldr	r0, [r6, #0]
   b4d82:	f7ff fee7 	bl	b4b54 <_Z10leerSensoriii>
    // Operacion nos permite juntar el output de dos sensores ya sea con AND u OR.
    int operacion = valueSensor1;

    // Por defecto operacion tipo AND a falta de tarjeta.
    // Por lo que solo si sensor1 TRUE y hay dos sensores, leemos el valor del sensor 2;
    if (num == 2 && valueSensor1)
   b4d86:	2d02      	cmp	r5, #2
    bool valueSensor1 = leerSensor(idSensor[0], condicionSensor[0], puertosSensores[0]);
   b4d88:	4602      	mov	r2, r0
    if (num == 2 && valueSensor1)
   b4d8a:	d107      	bne.n	b4d9c <loop+0xfc>
   b4d8c:	b130      	cbz	r0, b4d9c <loop+0xfc>
    {
      bool valueSensor2 = leerSensor(idSensor[1], condicionSensor[1], puertosSensores[1]);
   b4d8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   b4d92:	6879      	ldr	r1, [r7, #4]
   b4d94:	6870      	ldr	r0, [r6, #4]
   b4d96:	f7ff fedd 	bl	b4b54 <_Z10leerSensoriii>
   b4d9a:	4602      	mov	r2, r0
      // La asignacion de operacion podra verse modificada con una carta condicional (AND / OR)
      valueSensor2 ? operacion = true : operacion = false;
    }

    // Si tenemos un actuador.
    if (puertoActuador != -1)
   b4d9c:	4b24      	ldr	r3, [pc, #144]	; (b4e30 <loop+0x190>)
   b4d9e:	6819      	ldr	r1, [r3, #0]
   b4da0:	1c4b      	adds	r3, r1, #1
   b4da2:	d006      	beq.n	b4db2 <loop+0x112>
    {
      // Ejecutamos el actuador (LED o Zumbador) con toda la informacion necesaria;
      tagInfo[2] == 0 ? activarLED(tagInfo[3], puertoActuador, operacion) : activarZumbador(tagInfo[3], puertoActuador, operacion);
   b4da4:	68a3      	ldr	r3, [r4, #8]
   b4da6:	68e0      	ldr	r0, [r4, #12]
   b4da8:	f002 0201 	and.w	r2, r2, #1
   b4dac:	bb1b      	cbnz	r3, b4df6 <loop+0x156>
   b4dae:	f7ff fcab 	bl	b4708 <_Z10activarLEDiib>
    }
  }

  display.display();
   b4db2:	4815      	ldr	r0, [pc, #84]	; (b4e08 <loop+0x168>)
}
   b4db4:	b002      	add	sp, #8
   b4db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  display.display();
   b4dba:	f001 b85d 	b.w	b5e78 <_ZN16Adafruit_SSD13067displayEv>
        Serial.println("Se espera actuador");
   b4dbe:	f002 fe5f 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4dc2:	491c      	ldr	r1, [pc, #112]	; (b4e34 <loop+0x194>)
        Serial.println("Error: necesario al menos un sensor");
   b4dc4:	f002 fba9 	bl	b751a <_ZN5Print7printlnEPKc>
   b4dc8:	e7cb      	b.n	b4d62 <loop+0xc2>
      int num = numSensores(sensoresArray);
   b4dca:	f7ff fb87 	bl	b44dc <_Z11numSensoresPb>
      if (num >= 1)
   b4dce:	2800      	cmp	r0, #0
   b4dd0:	dd0d      	ble.n	b4dee <loop+0x14e>
        int puerto = asignarPuerto(tagInfo[1]);
   b4dd2:	6860      	ldr	r0, [r4, #4]
   b4dd4:	f7ff fb20 	bl	b4418 <_Z13asignarPuertoi>
        if (puerto != -1)
   b4dd8:	4b15      	ldr	r3, [pc, #84]	; (b4e30 <loop+0x190>)
   b4dda:	1c42      	adds	r2, r0, #1
          puertoActuador = puerto;
   b4ddc:	bf18      	it	ne
   b4dde:	6018      	strne	r0, [r3, #0]
        displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), tagInfo[2], tagInfo[3], puertoActuador);
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4de6:	9300      	str	r3, [sp, #0]
   b4de8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4dec:	e7b1      	b.n	b4d52 <loop+0xb2>
        Serial.println("Error: necesario al menos un sensor");
   b4dee:	f002 fe47 	bl	b7a80 <_Z16_fetch_usbserialv>
   b4df2:	4911      	ldr	r1, [pc, #68]	; (b4e38 <loop+0x198>)
   b4df4:	e7e6      	b.n	b4dc4 <loop+0x124>
      tagInfo[2] == 0 ? activarLED(tagInfo[3], puertoActuador, operacion) : activarZumbador(tagInfo[3], puertoActuador, operacion);
   b4df6:	f7ff fce3 	bl	b47c0 <_Z15activarZumbadoriib>
   b4dfa:	e7da      	b.n	b4db2 <loop+0x112>
}
   b4dfc:	b002      	add	sp, #8
   b4dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4e02:	bf00      	nop
   b4e04:	2003e6ac 	.word	0x2003e6ac
   b4e08:	2003e62c 	.word	0x2003e62c
   b4e0c:	2003e54c 	.word	0x2003e54c
   b4e10:	000b8852 	.word	0x000b8852
   b4e14:	000b885c 	.word	0x000b885c
   b4e18:	000b8875 	.word	0x000b8875
   b4e1c:	000b8868 	.word	0x000b8868
   b4e20:	2003e6c0 	.word	0x2003e6c0
   b4e24:	2003e528 	.word	0x2003e528
   b4e28:	2003e534 	.word	0x2003e534
   b4e2c:	2003e544 	.word	0x2003e544
   b4e30:	2003e53c 	.word	0x2003e53c
   b4e34:	000b8880 	.word	0x000b8880
   b4e38:	000b8893 	.word	0x000b8893

000b4e3c <_GLOBAL__sub_I_trailerBlock>:
   b4e3c:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b4e3e:	4c13      	ldr	r4, [pc, #76]	; (b4e8c <_GLOBAL__sub_I_trailerBlock+0x50>)
Adafruit_SSD1306 display(-1);
   b4e40:	4813      	ldr	r0, [pc, #76]	; (b4e90 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b4e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4e46:	f000 fcbb 	bl	b57c0 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b4e4a:	4912      	ldr	r1, [pc, #72]	; (b4e94 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	f002 fcc0 	bl	b77d2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e52:	4910      	ldr	r1, [pc, #64]	; (b4e94 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b4e54:	f104 0010 	add.w	r0, r4, #16
   b4e58:	f002 fcbb 	bl	b77d2 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b4e5c:	2208      	movs	r2, #8
   b4e5e:	2110      	movs	r1, #16
   b4e60:	480d      	ldr	r0, [pc, #52]	; (b4e98 <_GLOBAL__sub_I_trailerBlock+0x5c>)
   b4e62:	f001 f98b 	bl	b617c <_ZN7MFRC522C1Ehh>
ChainableLED ledObject = ChainableLED(0, 0, 5);
   b4e66:	2200      	movs	r2, #0
   b4e68:	2305      	movs	r3, #5
   b4e6a:	4611      	mov	r1, r2
   b4e6c:	480b      	ldr	r0, [pc, #44]	; (b4e9c <_GLOBAL__sub_I_trailerBlock+0x60>)
   b4e6e:	f001 f8b9 	bl	b5fe4 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e72:	4b0b      	ldr	r3, [pc, #44]	; (b4ea0 <_GLOBAL__sub_I_trailerBlock+0x64>)
   b4e74:	2200      	movs	r2, #0
   b4e76:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4e7a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4e7e:	609a      	str	r2, [r3, #8]
   b4e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e84:	2002      	movs	r0, #2
   b4e86:	f002 b849 	b.w	b6f1c <set_system_mode>
   b4e8a:	bf00      	nop
   b4e8c:	2003e67c 	.word	0x2003e67c
   b4e90:	2003e62c 	.word	0x2003e62c
   b4e94:	000b88b7 	.word	0x000b88b7
   b4e98:	2003e6ac 	.word	0x2003e6ac
   b4e9c:	2003e6a4 	.word	0x2003e6a4
   b4ea0:	2003e5e0 	.word	0x2003e5e0

000b4ea4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ea8:	b085      	sub	sp, #20
   b4eaa:	461f      	mov	r7, r3
   b4eac:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4eb0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4eb4:	eba8 0902 	sub.w	r9, r8, r2
   b4eb8:	eba7 0a01 	sub.w	sl, r7, r1
   b4ebc:	f1b9 0f00 	cmp.w	r9, #0
   b4ec0:	bfb8      	it	lt
   b4ec2:	f1c9 0900 	rsblt	r9, r9, #0
   b4ec6:	f1ba 0f00 	cmp.w	sl, #0
   b4eca:	bfb8      	it	lt
   b4ecc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4ed0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4ed2:	4683      	mov	fp, r0
   b4ed4:	460c      	mov	r4, r1
   b4ed6:	4615      	mov	r5, r2
    if (steep) {
   b4ed8:	dd04      	ble.n	b4ee4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4eda:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4edc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4ede:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4ee0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4ee2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4ee4:	42bc      	cmp	r4, r7
   b4ee6:	dd05      	ble.n	b4ef4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4ee8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4eea:	4645      	mov	r5, r8
   b4eec:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4eee:	4622      	mov	r2, r4
   b4ef0:	463c      	mov	r4, r7
   b4ef2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4ef4:	1b3e      	subs	r6, r7, r4
   b4ef6:	b2b2      	uxth	r2, r6
   b4ef8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4efa:	eba8 0205 	sub.w	r2, r8, r5
   b4efe:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4f02:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4f06:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4f0a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4f0e:	4545      	cmp	r5, r8
   b4f10:	bfb4      	ite	lt
   b4f12:	2201      	movlt	r2, #1
   b4f14:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4f18:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4f1a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4f1c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4f1e:	42bc      	cmp	r4, r7
   b4f20:	dc1c      	bgt.n	b4f5c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4f22:	f8db 2000 	ldr.w	r2, [fp]
   b4f26:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4f28:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4f2a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4f2e:	bfc7      	ittee	gt
   b4f30:	4629      	movgt	r1, r5
   b4f32:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4f34:	462a      	movle	r2, r5
   b4f36:	4621      	movle	r1, r4
   b4f38:	4658      	mov	r0, fp
   b4f3a:	47c0      	blx	r8
        }
        err -= dy;
   b4f3c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4f3e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4f40:	1ab6      	subs	r6, r6, r2
   b4f42:	b2b1      	uxth	r1, r6
   b4f44:	b236      	sxth	r6, r6
        if (err < 0) {
   b4f46:	2e00      	cmp	r6, #0
   b4f48:	da05      	bge.n	b4f56 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4f4a:	9a02      	ldr	r2, [sp, #8]
   b4f4c:	4415      	add	r5, r2
            err += dx;
   b4f4e:	9a00      	ldr	r2, [sp, #0]
   b4f50:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4f52:	b22d      	sxth	r5, r5
            err += dx;
   b4f54:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4f56:	3401      	adds	r4, #1
   b4f58:	b224      	sxth	r4, r4
   b4f5a:	e7e0      	b.n	b4f1e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4f5c:	b005      	add	sp, #20
   b4f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f62 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4f62:	4770      	bx	lr

000b4f64 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4f64:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4f66:	6804      	ldr	r4, [r0, #0]
   b4f68:	6924      	ldr	r4, [r4, #16]
   b4f6a:	46a4      	mov	ip, r4
}
   b4f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4f70:	4760      	bx	ip

000b4f72 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4f72:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4f74:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4f76:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4f7a:	9502      	str	r5, [sp, #8]
   b4f7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4f7e:	46a4      	mov	ip, r4
}
   b4f80:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4f82:	4760      	bx	ip

000b4f84 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4f84:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4f86:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4f88:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4f8c:	9502      	str	r5, [sp, #8]
   b4f8e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4f90:	46a4      	mov	ip, r4
}
   b4f92:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4f94:	4760      	bx	ip

000b4f96 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f96:	b470      	push	{r4, r5, r6}
   b4f98:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4f9c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4fa0:	6804      	ldr	r4, [r0, #0]
   b4fa2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4fa6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4fa8:	46a4      	mov	ip, r4
}
   b4faa:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4fac:	4760      	bx	ip

000b4fae <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4fae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4fb2:	461c      	mov	r4, r3
    startWrite();
   b4fb4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4fb6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4fba:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4fbc:	4605      	mov	r5, r0
   b4fbe:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4fc0:	3c01      	subs	r4, #1
   b4fc2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4fc4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4fc6:	b224      	sxth	r4, r4
    startWrite();
   b4fc8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4fca:	682b      	ldr	r3, [r5, #0]
   b4fcc:	f8cd 8004 	str.w	r8, [sp, #4]
   b4fd0:	9400      	str	r4, [sp, #0]
   b4fd2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4fd4:	4628      	mov	r0, r5
   b4fd6:	463b      	mov	r3, r7
   b4fd8:	4632      	mov	r2, r6
   b4fda:	4639      	mov	r1, r7
   b4fdc:	47a0      	blx	r4
    endWrite();
   b4fde:	682b      	ldr	r3, [r5, #0]
   b4fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fe2:	4628      	mov	r0, r5
}
   b4fe4:	b002      	add	sp, #8
   b4fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4fea:	4718      	bx	r3

000b4fec <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4ff0:	461d      	mov	r5, r3
    startWrite();
   b4ff2:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4ff4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4ff8:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4ffa:	4604      	mov	r4, r0
   b4ffc:	4617      	mov	r7, r2
   b4ffe:	460e      	mov	r6, r1
    startWrite();
   b5000:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5002:	e9cd 7800 	strd	r7, r8, [sp]
   b5006:	6822      	ldr	r2, [r4, #0]
   b5008:	1e6b      	subs	r3, r5, #1
   b500a:	4433      	add	r3, r6
   b500c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b500e:	4620      	mov	r0, r4
   b5010:	b21b      	sxth	r3, r3
   b5012:	463a      	mov	r2, r7
   b5014:	4631      	mov	r1, r6
   b5016:	47a8      	blx	r5
    endWrite();
   b5018:	6823      	ldr	r3, [r4, #0]
   b501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b501c:	4620      	mov	r0, r4
}
   b501e:	b002      	add	sp, #8
   b5020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5024:	4718      	bx	r3

000b5026 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5026:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b502a:	461e      	mov	r6, r3
    startWrite();
   b502c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b502e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5032:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5034:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5038:	460c      	mov	r4, r1
   b503a:	4605      	mov	r5, r0
   b503c:	4617      	mov	r7, r2
    startWrite();
   b503e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5040:	4426      	add	r6, r4
   b5042:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5044:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5046:	da0b      	bge.n	b5060 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5048:	f8cd 8000 	str.w	r8, [sp]
   b504c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5050:	4621      	mov	r1, r4
   b5052:	464b      	mov	r3, r9
   b5054:	463a      	mov	r2, r7
   b5056:	4628      	mov	r0, r5
   b5058:	3401      	adds	r4, #1
   b505a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b505c:	b224      	sxth	r4, r4
   b505e:	e7f0      	b.n	b5042 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5062:	4628      	mov	r0, r5
}
   b5064:	b002      	add	sp, #8
   b5066:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b506a:	4718      	bx	r3

000b506c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b506c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b506e:	6802      	ldr	r2, [r0, #0]
   b5070:	9101      	str	r1, [sp, #4]
   b5072:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5076:	9100      	str	r1, [sp, #0]
   b5078:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b507a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b507e:	2200      	movs	r2, #0
   b5080:	4611      	mov	r1, r2
   b5082:	47a0      	blx	r4
}
   b5084:	b002      	add	sp, #8
   b5086:	bd10      	pop	{r4, pc}

000b5088 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b508c:	4299      	cmp	r1, r3
        uint16_t color) {
   b508e:	4616      	mov	r6, r2
   b5090:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5094:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5098:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b509a:	4680      	mov	r8, r0
   b509c:	460d      	mov	r5, r1
   b509e:	461c      	mov	r4, r3
    if(x0 == x1){
   b50a0:	d113      	bne.n	b50ca <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b50a2:	42be      	cmp	r6, r7
   b50a4:	bfc8      	it	gt
   b50a6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b50a8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b50ac:	bfc4      	itt	gt
   b50ae:	463e      	movgt	r6, r7
   b50b0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b50b2:	1c7b      	adds	r3, r7, #1
   b50b4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b50b6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b50b8:	b21b      	sxth	r3, r3
   b50ba:	4632      	mov	r2, r6
   b50bc:	4629      	mov	r1, r5
   b50be:	4640      	mov	r0, r8
   b50c0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b50c2:	b003      	add	sp, #12
   b50c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b50c8:	4760      	bx	ip
    } else if(y0 == y1){
   b50ca:	42be      	cmp	r6, r7
   b50cc:	d10a      	bne.n	b50e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b50ce:	4299      	cmp	r1, r3
   b50d0:	bfc2      	ittt	gt
   b50d2:	460b      	movgt	r3, r1
   b50d4:	4625      	movgt	r5, r4
   b50d6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b50d8:	1c63      	adds	r3, r4, #1
   b50da:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b50de:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b50e0:	1b5b      	subs	r3, r3, r5
   b50e2:	e7e9      	b.n	b50b8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b50e4:	6953      	ldr	r3, [r2, #20]
   b50e6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b50e8:	e9cd 7900 	strd	r7, r9, [sp]
   b50ec:	f8d8 3000 	ldr.w	r3, [r8]
   b50f0:	4640      	mov	r0, r8
   b50f2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b50f4:	4632      	mov	r2, r6
   b50f6:	4623      	mov	r3, r4
   b50f8:	4629      	mov	r1, r5
   b50fa:	47b8      	blx	r7
        endWrite();
   b50fc:	f8d8 3000 	ldr.w	r3, [r8]
   b5100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5102:	4640      	mov	r0, r8
}
   b5104:	b003      	add	sp, #12
   b5106:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b510a:	4718      	bx	r3

000b510c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b510c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5110:	461d      	mov	r5, r3
    startWrite();
   b5112:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5114:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5118:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b511a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b511e:	4604      	mov	r4, r0
   b5120:	460f      	mov	r7, r1
   b5122:	4616      	mov	r6, r2
    startWrite();
   b5124:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5126:	6823      	ldr	r3, [r4, #0]
   b5128:	f8cd 8000 	str.w	r8, [sp]
   b512c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5130:	4632      	mov	r2, r6
   b5132:	462b      	mov	r3, r5
   b5134:	4639      	mov	r1, r7
   b5136:	4620      	mov	r0, r4
   b5138:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b513a:	6823      	ldr	r3, [r4, #0]
   b513c:	f8cd 8000 	str.w	r8, [sp]
   b5140:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5144:	4432      	add	r2, r6
   b5146:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b514a:	4639      	mov	r1, r7
   b514c:	462b      	mov	r3, r5
   b514e:	4620      	mov	r0, r4
   b5150:	b212      	sxth	r2, r2
   b5152:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5154:	6823      	ldr	r3, [r4, #0]
   b5156:	f8cd 8000 	str.w	r8, [sp]
   b515a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b515e:	4632      	mov	r2, r6
   b5160:	464b      	mov	r3, r9
   b5162:	4639      	mov	r1, r7
   b5164:	4620      	mov	r0, r4
   b5166:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5168:	1e6b      	subs	r3, r5, #1
   b516a:	19d9      	adds	r1, r3, r7
   b516c:	6823      	ldr	r3, [r4, #0]
   b516e:	f8cd 8000 	str.w	r8, [sp]
   b5172:	6a1d      	ldr	r5, [r3, #32]
   b5174:	4620      	mov	r0, r4
   b5176:	464b      	mov	r3, r9
   b5178:	4632      	mov	r2, r6
   b517a:	b209      	sxth	r1, r1
   b517c:	47a8      	blx	r5
    endWrite();
   b517e:	6823      	ldr	r3, [r4, #0]
   b5180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5182:	4620      	mov	r0, r4
}
   b5184:	b002      	add	sp, #8
   b5186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b518a:	4718      	bx	r3

000b518c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b518c:	4770      	bx	lr

000b518e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b518e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5192:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5196:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5198:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b519a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b519e:	bf59      	ittee	pl
   b51a0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b51a2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b51a4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b51a6:	81c3      	strhmi	r3, [r0, #14]
}
   b51a8:	4770      	bx	lr
	...

000b51ac <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b51ac:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b51ae:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b51b0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b51b2:	4a07      	ldr	r2, [pc, #28]	; (b51d0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b51b4:	4d07      	ldr	r5, [pc, #28]	; (b51d4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b51b6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b51b8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b51ba:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b51bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b51c0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b51c4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b51c6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b51c8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b51ca:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b51cc:	6204      	str	r4, [r0, #32]
}
   b51ce:	bd30      	pop	{r4, r5, pc}
   b51d0:	01000101 	.word	0x01000101
   b51d4:	000b8dc4 	.word	0x000b8dc4

000b51d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51dc:	b089      	sub	sp, #36	; 0x24
   b51de:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b51e2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51e4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b51e8:	9304      	str	r3, [sp, #16]
   b51ea:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b51ee:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51f0:	9305      	str	r3, [sp, #20]
   b51f2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b51f6:	4604      	mov	r4, r0
    startWrite();
   b51f8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b51fa:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b51fe:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5202:	bf48      	it	mi
   b5204:	f108 020e 	addmi.w	r2, r8, #14
   b5208:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b520c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b520e:	4635      	mov	r5, r6
   b5210:	9b03      	ldr	r3, [sp, #12]
   b5212:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5214:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5218:	189a      	adds	r2, r3, r2
   b521a:	9b05      	ldr	r3, [sp, #20]
   b521c:	428b      	cmp	r3, r1
   b521e:	b212      	sxth	r2, r2
   b5220:	dd27      	ble.n	b5272 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5222:	9b04      	ldr	r3, [sp, #16]
   b5224:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5226:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b522a:	9306      	str	r3, [sp, #24]
   b522c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5230:	4580      	cmp	r8, r0
   b5232:	fa1f f189 	uxth.w	r1, r9
   b5236:	dd17      	ble.n	b5268 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5238:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b523a:	bf05      	ittet	eq
   b523c:	9b06      	ldreq	r3, [sp, #24]
   b523e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5240:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5242:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5244:	bf18      	it	ne
   b5246:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5248:	062b      	lsls	r3, r5, #24
   b524a:	d50a      	bpl.n	b5262 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b524c:	9b02      	ldr	r3, [sp, #8]
   b524e:	6820      	ldr	r0, [r4, #0]
   b5250:	9207      	str	r2, [sp, #28]
   b5252:	4419      	add	r1, r3
   b5254:	6983      	ldr	r3, [r0, #24]
   b5256:	b209      	sxth	r1, r1
   b5258:	461f      	mov	r7, r3
   b525a:	4620      	mov	r0, r4
   b525c:	4653      	mov	r3, sl
   b525e:	47b8      	blx	r7
   b5260:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5262:	f109 0901 	add.w	r9, r9, #1
   b5266:	e7e1      	b.n	b522c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5268:	9b01      	ldr	r3, [sp, #4]
   b526a:	3301      	adds	r3, #1
   b526c:	9301      	str	r3, [sp, #4]
   b526e:	445e      	add	r6, fp
   b5270:	e7ce      	b.n	b5210 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5272:	6823      	ldr	r3, [r4, #0]
   b5274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5276:	4620      	mov	r0, r4
}
   b5278:	b009      	add	sp, #36	; 0x24
   b527a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b527e:	4718      	bx	r3

000b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5284:	ed2d 8b02 	vpush	{d8}
   b5288:	b091      	sub	sp, #68	; 0x44
   b528a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b528c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b528e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5292:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5296:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b529a:	9103      	str	r1, [sp, #12]
   b529c:	461f      	mov	r7, r3
   b529e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b52a2:	9304      	str	r3, [sp, #16]
   b52a4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b52a6:	2a00      	cmp	r2, #0
   b52a8:	f040 80c5 	bne.w	b5436 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b52ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b52b0:	428b      	cmp	r3, r1
   b52b2:	f340 814c 	ble.w	b554e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b52b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b52ba:	42b3      	cmp	r3, r6
   b52bc:	f340 8147 	ble.w	b554e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b52c0:	2306      	movs	r3, #6
   b52c2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b52c6:	2b00      	cmp	r3, #0
   b52c8:	f340 8141 	ble.w	b554e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b52cc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b52d0:	2b00      	cmp	r3, #0
   b52d2:	f340 813c 	ble.w	b554e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b52d6:	7f03      	ldrb	r3, [r0, #28]
   b52d8:	b91b      	cbnz	r3, b52e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b52da:	2faf      	cmp	r7, #175	; 0xaf
   b52dc:	bf84      	itt	hi
   b52de:	3701      	addhi	r7, #1
   b52e0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b52e2:	f8db 3000 	ldr.w	r3, [fp]
   b52e6:	4658      	mov	r0, fp
   b52e8:	695b      	ldr	r3, [r3, #20]
   b52ea:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b52ec:	2205      	movs	r2, #5
   b52ee:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b52f0:	2200      	movs	r2, #0
   b52f2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b52f4:	4a98      	ldr	r2, [pc, #608]	; (b5558 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b52f6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b52fa:	18d3      	adds	r3, r2, r3
   b52fc:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b52fe:	b2b3      	uxth	r3, r6
   b5300:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5302:	9a05      	ldr	r2, [sp, #20]
   b5304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5306:	5c9b      	ldrb	r3, [r3, r2]
   b5308:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b530a:	b2ab      	uxth	r3, r5
   b530c:	930b      	str	r3, [sp, #44]	; 0x2c
   b530e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5312:	9308      	str	r3, [sp, #32]
   b5314:	9b03      	ldr	r3, [sp, #12]
   b5316:	fb02 f905 	mul.w	r9, r2, r5
   b531a:	fa19 f983 	uxtah	r9, r9, r3
   b531e:	fa0f f389 	sxth.w	r3, r9
   b5322:	ee08 3a10 	vmov	s16, r3
   b5326:	2308      	movs	r3, #8
   b5328:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b532a:	9b03      	ldr	r3, [sp, #12]
   b532c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5330:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5334:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5338:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b533a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b533e:	07d2      	lsls	r2, r2, #31
   b5340:	d552      	bpl.n	b53e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5342:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5344:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5348:	d13e      	bne.n	b53c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b534a:	2c01      	cmp	r4, #1
   b534c:	d13c      	bne.n	b53c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b534e:	699b      	ldr	r3, [r3, #24]
   b5350:	9906      	ldr	r1, [sp, #24]
   b5352:	461f      	mov	r7, r3
   b5354:	9b04      	ldr	r3, [sp, #16]
   b5356:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5358:	b212      	sxth	r2, r2
   b535a:	4651      	mov	r1, sl
   b535c:	4658      	mov	r0, fp
   b535e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5360:	f109 0301 	add.w	r3, r9, #1
   b5364:	fa4f f983 	sxtb.w	r9, r3
   b5368:	9b07      	ldr	r3, [sp, #28]
   b536a:	085b      	lsrs	r3, r3, #1
   b536c:	9307      	str	r3, [sp, #28]
   b536e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5370:	3b01      	subs	r3, #1
   b5372:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5376:	930a      	str	r3, [sp, #40]	; 0x28
   b5378:	d1de      	bne.n	b5338 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b537a:	9f05      	ldr	r7, [sp, #20]
   b537c:	3701      	adds	r7, #1
   b537e:	b27b      	sxtb	r3, r7
   b5380:	9305      	str	r3, [sp, #20]
   b5382:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5384:	3b01      	subs	r3, #1
   b5386:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b538a:	9309      	str	r3, [sp, #36]	; 0x24
   b538c:	d1b9      	bne.n	b5302 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b538e:	9b04      	ldr	r3, [sp, #16]
   b5390:	4543      	cmp	r3, r8
   b5392:	d00f      	beq.n	b53b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5394:	2d01      	cmp	r5, #1
   b5396:	f8db 3000 	ldr.w	r3, [fp]
   b539a:	d13b      	bne.n	b5414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b539c:	2c01      	cmp	r4, #1
   b539e:	d139      	bne.n	b5414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b53a0:	9908      	ldr	r1, [sp, #32]
   b53a2:	f8cd 8000 	str.w	r8, [sp]
   b53a6:	3105      	adds	r1, #5
   b53a8:	6a1c      	ldr	r4, [r3, #32]
   b53aa:	4632      	mov	r2, r6
   b53ac:	2308      	movs	r3, #8
   b53ae:	b209      	sxth	r1, r1
   b53b0:	4658      	mov	r0, fp
   b53b2:	47a0      	blx	r4
        endWrite();
   b53b4:	f8db 3000 	ldr.w	r3, [fp]
   b53b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53ba:	4658      	mov	r0, fp
}
   b53bc:	b011      	add	sp, #68	; 0x44
   b53be:	ecbd 8b02 	vpop	{d8}
   b53c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b53c6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b53c8:	9906      	ldr	r1, [sp, #24]
   b53ca:	fb14 f202 	smulbb	r2, r4, r2
   b53ce:	440a      	add	r2, r1
   b53d0:	9904      	ldr	r1, [sp, #16]
   b53d2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b53d4:	9400      	str	r4, [sp, #0]
   b53d6:	69db      	ldr	r3, [r3, #28]
   b53d8:	ee18 1a10 	vmov	r1, s16
   b53dc:	461f      	mov	r7, r3
   b53de:	b212      	sxth	r2, r2
   b53e0:	462b      	mov	r3, r5
   b53e2:	4658      	mov	r0, fp
   b53e4:	47b8      	blx	r7
   b53e6:	e7bb      	b.n	b5360 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b53e8:	9a04      	ldr	r2, [sp, #16]
   b53ea:	4542      	cmp	r2, r8
   b53ec:	d0b8      	beq.n	b5360 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b53ee:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b53f0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b53f4:	d107      	bne.n	b5406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b53f6:	2c01      	cmp	r4, #1
   b53f8:	d105      	bne.n	b5406 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b53fa:	699b      	ldr	r3, [r3, #24]
   b53fc:	9906      	ldr	r1, [sp, #24]
   b53fe:	461f      	mov	r7, r3
   b5400:	440a      	add	r2, r1
   b5402:	4643      	mov	r3, r8
   b5404:	e7a8      	b.n	b5358 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5406:	9906      	ldr	r1, [sp, #24]
   b5408:	f8cd 8004 	str.w	r8, [sp, #4]
   b540c:	fb14 f202 	smulbb	r2, r4, r2
   b5410:	440a      	add	r2, r1
   b5412:	e7df      	b.n	b53d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5416:	f8cd 8004 	str.w	r8, [sp, #4]
   b541a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b541e:	9a08      	ldr	r2, [sp, #32]
   b5420:	00e4      	lsls	r4, r4, #3
   b5422:	440a      	add	r2, r1
   b5424:	4611      	mov	r1, r2
   b5426:	9400      	str	r4, [sp, #0]
   b5428:	69dc      	ldr	r4, [r3, #28]
   b542a:	4632      	mov	r2, r6
   b542c:	462b      	mov	r3, r5
   b542e:	b209      	sxth	r1, r1
   b5430:	4658      	mov	r0, fp
   b5432:	47a0      	blx	r4
        endWrite();
   b5434:	e7be      	b.n	b53b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5436:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5438:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b543a:	6812      	ldr	r2, [r2, #0]
   b543c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b543e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5440:	b2ff      	uxtb	r7, r7
   b5442:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5446:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b544a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b544c:	789a      	ldrb	r2, [r3, #2]
   b544e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5450:	78da      	ldrb	r2, [r3, #3]
   b5452:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5454:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5456:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b545a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b545e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5460:	d801      	bhi.n	b5466 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5462:	2c01      	cmp	r4, #1
   b5464:	d957      	bls.n	b5516 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5466:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b546a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b546c:	fa0f f38a 	sxth.w	r3, sl
   b5470:	9307      	str	r3, [sp, #28]
        startWrite();
   b5472:	f8db 3000 	ldr.w	r3, [fp]
   b5476:	4658      	mov	r0, fp
   b5478:	695b      	ldr	r3, [r3, #20]
   b547a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b547c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b547e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5482:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5484:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5488:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b548a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b548c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b548e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5490:	429f      	cmp	r7, r3
   b5492:	d28f      	bcs.n	b53b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5494:	9b07      	ldr	r3, [sp, #28]
   b5496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5498:	443b      	add	r3, r7
   b549a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b549e:	2200      	movs	r2, #0
   b54a0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b54a4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54a6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b54aa:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54ae:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b54b2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b54b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b54b6:	9905      	ldr	r1, [sp, #20]
   b54b8:	4291      	cmp	r1, r2
   b54ba:	d241      	bcs.n	b5540 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b54bc:	1c5a      	adds	r2, r3, #1
   b54be:	b2d2      	uxtb	r2, r2
   b54c0:	075b      	lsls	r3, r3, #29
   b54c2:	920d      	str	r2, [sp, #52]	; 0x34
   b54c4:	d107      	bne.n	b54d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b54c6:	9b06      	ldr	r3, [sp, #24]
   b54c8:	9906      	ldr	r1, [sp, #24]
   b54ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b54cc:	3301      	adds	r3, #1
   b54ce:	b29b      	uxth	r3, r3
   b54d0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b54d4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b54d6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b54da:	d012      	beq.n	b5502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b54dc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54de:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b54e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b54e6:	d11a      	bne.n	b551e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b54e8:	2c01      	cmp	r4, #1
   b54ea:	d118      	bne.n	b551e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b54ee:	699b      	ldr	r3, [r3, #24]
   b54f0:	4411      	add	r1, r2
   b54f2:	9a05      	ldr	r2, [sp, #20]
   b54f4:	4411      	add	r1, r2
   b54f6:	461e      	mov	r6, r3
   b54f8:	4652      	mov	r2, sl
   b54fa:	9b04      	ldr	r3, [sp, #16]
   b54fc:	b209      	sxth	r1, r1
   b54fe:	4658      	mov	r0, fp
   b5500:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5502:	9e05      	ldr	r6, [sp, #20]
   b5504:	3601      	adds	r6, #1
   b5506:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5508:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b550c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b550e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5514:	e7ce      	b.n	b54b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5516:	2300      	movs	r3, #0
   b5518:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b551c:	e7a9      	b.n	b5472 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b551e:	9805      	ldr	r0, [sp, #20]
   b5520:	9a08      	ldr	r2, [sp, #32]
   b5522:	4402      	add	r2, r0
   b5524:	fb02 1105 	mla	r1, r2, r5, r1
   b5528:	9a04      	ldr	r2, [sp, #16]
   b552a:	e9cd 4200 	strd	r4, r2, [sp]
   b552e:	69db      	ldr	r3, [r3, #28]
   b5530:	ee18 2a10 	vmov	r2, s16
   b5534:	461e      	mov	r6, r3
   b5536:	b209      	sxth	r1, r1
   b5538:	462b      	mov	r3, r5
   b553a:	4658      	mov	r0, fp
   b553c:	47b0      	blx	r6
   b553e:	e7e0      	b.n	b5502 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5540:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5542:	3701      	adds	r7, #1
   b5544:	4498      	add	r8, r3
   b5546:	fa5f f888 	uxtb.w	r8, r8
   b554a:	b2ff      	uxtb	r7, r7
   b554c:	e79f      	b.n	b548e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b554e:	b011      	add	sp, #68	; 0x44
   b5550:	ecbd 8b02 	vpop	{d8}
   b5554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5558:	000b88b9 	.word	0x000b88b9

000b555c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b555c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b555e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5560:	b085      	sub	sp, #20
   b5562:	4604      	mov	r4, r0
   b5564:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5566:	2a00      	cmp	r2, #0
   b5568:	d134      	bne.n	b55d4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b556a:	290a      	cmp	r1, #10
   b556c:	d108      	bne.n	b5580 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b556e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5570:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5572:	7e42      	ldrb	r2, [r0, #25]
   b5574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5578:	8263      	strh	r3, [r4, #18]
}
   b557a:	2001      	movs	r0, #1
   b557c:	b005      	add	sp, #20
   b557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5580:	290d      	cmp	r1, #13
   b5582:	d0fa      	beq.n	b557a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5584:	7ee1      	ldrb	r1, [r4, #27]
   b5586:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5588:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b558a:	b171      	cbz	r1, b55aa <_ZN12Adafruit_GFX5writeEh+0x4e>
   b558c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5590:	2106      	movs	r1, #6
   b5592:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5596:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b559a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b559c:	bfc1      	itttt	gt
   b559e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b55a2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b55a4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b55a8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b55aa:	8ae2      	ldrh	r2, [r4, #22]
   b55ac:	9201      	str	r2, [sp, #4]
   b55ae:	8aa2      	ldrh	r2, [r4, #20]
   b55b0:	9200      	str	r2, [sp, #0]
   b55b2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b55b6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b55ba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b55be:	4620      	mov	r0, r4
   b55c0:	f7ff fe5e 	bl	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b55c4:	7e23      	ldrb	r3, [r4, #24]
   b55c6:	8a22      	ldrh	r2, [r4, #16]
   b55c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b55cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b55d0:	8223      	strh	r3, [r4, #16]
   b55d2:	e7d2      	b.n	b557a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b55d4:	290a      	cmp	r1, #10
   b55d6:	d107      	bne.n	b55e8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b55d8:	2300      	movs	r3, #0
   b55da:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b55dc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b55de:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b55e0:	8a43      	ldrh	r3, [r0, #18]
   b55e2:	fb01 3302 	mla	r3, r1, r2, r3
   b55e6:	e7c7      	b.n	b5578 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b55e8:	290d      	cmp	r1, #13
   b55ea:	d0c6      	beq.n	b557a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b55ec:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b55ee:	42a9      	cmp	r1, r5
   b55f0:	d3c3      	bcc.n	b557a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b55f2:	7a51      	ldrb	r1, [r2, #9]
   b55f4:	4299      	cmp	r1, r3
   b55f6:	d3c0      	bcc.n	b557a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b55f8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b55fa:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b55fc:	b2ed      	uxtb	r5, r5
   b55fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5602:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5604:	b328      	cbz	r0, b5652 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5606:	78e9      	ldrb	r1, [r5, #3]
   b5608:	b319      	cbz	r1, b5652 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b560a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b560c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b560e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5610:	b191      	cbz	r1, b5638 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5612:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5616:	4408      	add	r0, r1
   b5618:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b561c:	fb06 1100 	mla	r1, r6, r0, r1
   b5620:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5624:	4281      	cmp	r1, r0
   b5626:	dd07      	ble.n	b5638 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5628:	2000      	movs	r0, #0
   b562a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b562c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5630:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5632:	fb02 1207 	mla	r2, r2, r7, r1
   b5636:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5638:	8ae2      	ldrh	r2, [r4, #22]
   b563a:	9201      	str	r2, [sp, #4]
   b563c:	8aa2      	ldrh	r2, [r4, #20]
   b563e:	9200      	str	r2, [sp, #0]
   b5640:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5644:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5648:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b564c:	4620      	mov	r0, r4
   b564e:	f7ff fe17 	bl	b5280 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5652:	7929      	ldrb	r1, [r5, #4]
   b5654:	7e22      	ldrb	r2, [r4, #24]
   b5656:	8a23      	ldrh	r3, [r4, #16]
   b5658:	fb01 3302 	mla	r3, r1, r2, r3
   b565c:	e7b8      	b.n	b55d0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b565e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b565e:	2901      	cmp	r1, #1
   b5660:	bf38      	it	cc
   b5662:	2101      	movcc	r1, #1
   b5664:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5666:	7641      	strb	r1, [r0, #25]
}
   b5668:	4770      	bx	lr

000b566a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b566a:	4770      	bx	lr

000b566c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b566c:	b510      	push	{r4, lr}
  }
   b566e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5670:	4604      	mov	r4, r0
  }
   b5672:	f7fe fd10 	bl	b4096 <_ZdlPvj>
   b5676:	4620      	mov	r0, r4
   b5678:	bd10      	pop	{r4, pc}
	...

000b567c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b567c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b567e:	4604      	mov	r4, r0
   b5680:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5682:	7922      	ldrb	r2, [r4, #4]
   b5684:	68a3      	ldr	r3, [r4, #8]
   b5686:	b132      	cbz	r2, b5696 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5688:	b9a3      	cbnz	r3, b56b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b568a:	490b      	ldr	r1, [pc, #44]	; (b56b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b568c:	b002      	add	sp, #8
   b568e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5692:	f001 bf2f 	b.w	b74f4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5696:	4a09      	ldr	r2, [pc, #36]	; (b56bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5698:	7b26      	ldrb	r6, [r4, #12]
   b569a:	4d09      	ldr	r5, [pc, #36]	; (b56c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b569c:	4909      	ldr	r1, [pc, #36]	; (b56c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b569e:	7b64      	ldrb	r4, [r4, #13]
   b56a0:	2e01      	cmp	r6, #1
   b56a2:	bf18      	it	ne
   b56a4:	4629      	movne	r1, r5
   b56a6:	e9cd 1400 	strd	r1, r4, [sp]
   b56aa:	4907      	ldr	r1, [pc, #28]	; (b56c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b56ac:	f7fe fd08 	bl	b40c0 <_ZN5Print6printfEPKcz>
  }
   b56b0:	b002      	add	sp, #8
   b56b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b56b4:	4a05      	ldr	r2, [pc, #20]	; (b56cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b56b6:	e7ef      	b.n	b5698 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b56b8:	000b8e25 	.word	0x000b8e25
   b56bc:	000b87f0 	.word	0x000b87f0
   b56c0:	000b8e21 	.word	0x000b8e21
   b56c4:	000b8e1d 	.word	0x000b8e1d
   b56c8:	000b8e3b 	.word	0x000b8e3b
   b56cc:	000b8e14 	.word	0x000b8e14

000b56d0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b56d0:	b510      	push	{r4, lr}
   b56d2:	4b04      	ldr	r3, [pc, #16]	; (b56e4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b56d4:	6003      	str	r3, [r0, #0]
   b56d6:	4604      	mov	r4, r0
{
  if (buffer)
   b56d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56da:	b108      	cbz	r0, b56e0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
  {
    free(buffer);
   b56dc:	f001 fcba 	bl	b7054 <free>
    buffer = NULL;
  }
}
   b56e0:	4620      	mov	r0, r4
   b56e2:	bd10      	pop	{r4, pc}
   b56e4:	000b9454 	.word	0x000b9454

000b56e8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b56e8:	b510      	push	{r4, lr}
   b56ea:	4604      	mov	r4, r0
}
   b56ec:	f7ff fff0 	bl	b56d0 <_ZN16Adafruit_SSD1306D1Ev>
   b56f0:	4620      	mov	r0, r4
   b56f2:	2150      	movs	r1, #80	; 0x50
   b56f4:	f7fe fccf 	bl	b4096 <_ZdlPvj>
   b56f8:	4620      	mov	r0, r4
   b56fa:	bd10      	pop	{r4, pc}

000b56fc <_ZN16Adafruit_SSD13069drawPixelEsst>:
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b56fc:	2900      	cmp	r1, #0
{
   b56fe:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5700:	db4b      	blt.n	b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5702:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5706:	428c      	cmp	r4, r1
   b5708:	dd47      	ble.n	b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b570a:	2a00      	cmp	r2, #0
   b570c:	db45      	blt.n	b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b570e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5712:	4294      	cmp	r4, r2
   b5714:	dd41      	ble.n	b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5716:	7e84      	ldrb	r4, [r0, #26]
  {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation())
   b5718:	2c02      	cmp	r4, #2
   b571a:	d01f      	beq.n	b575c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b571c:	2c03      	cmp	r4, #3
   b571e:	d026      	beq.n	b576e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5720:	2c01      	cmp	r4, #1
   b5722:	d104      	bne.n	b572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    {
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5724:	8904      	ldrh	r4, [r0, #8]
   b5726:	43d2      	mvns	r2, r2
   b5728:	4414      	add	r4, r2
      break;
   b572a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b572c:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color)
   b572e:	2b01      	cmp	r3, #1
   b5730:	d023      	beq.n	b577a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5732:	2b02      	cmp	r3, #2
   b5734:	d032      	beq.n	b579c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5736:	bb83      	cbnz	r3, b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    {
    case WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b5738:	2a00      	cmp	r2, #0
   b573a:	4613      	mov	r3, r2
   b573c:	8904      	ldrh	r4, [r0, #8]
   b573e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5740:	bfb8      	it	lt
   b5742:	1dd3      	addlt	r3, r2, #7
   b5744:	10db      	asrs	r3, r3, #3
   b5746:	fb13 1104 	smlabb	r1, r3, r4, r1
   b574a:	f002 0207 	and.w	r2, r2, #7
   b574e:	2301      	movs	r3, #1
   b5750:	4093      	lsls	r3, r2
   b5752:	5c42      	ldrb	r2, [r0, r1]
   b5754:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b5758:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   b575a:	e01e      	b.n	b579a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   b575c:	8904      	ldrh	r4, [r0, #8]
   b575e:	3c01      	subs	r4, #1
   b5760:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5762:	8944      	ldrh	r4, [r0, #10]
   b5764:	43d2      	mvns	r2, r2
   b5766:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b5768:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b576a:	b212      	sxth	r2, r2
      break;
   b576c:	e7df      	b.n	b572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b576e:	8944      	ldrh	r4, [r0, #10]
   b5770:	3c01      	subs	r4, #1
   b5772:	1a64      	subs	r4, r4, r1
      break;
   b5774:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5776:	b222      	sxth	r2, r4
      break;
   b5778:	e7d9      	b.n	b572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b577a:	2a00      	cmp	r2, #0
   b577c:	8904      	ldrh	r4, [r0, #8]
   b577e:	4613      	mov	r3, r2
   b5780:	bfb8      	it	lt
   b5782:	1dd3      	addlt	r3, r2, #7
   b5784:	10db      	asrs	r3, r3, #3
   b5786:	fb13 1104 	smlabb	r1, r3, r4, r1
   b578a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b578c:	f002 0007 	and.w	r0, r2, #7
   b5790:	2201      	movs	r2, #1
   b5792:	4082      	lsls	r2, r0
   b5794:	5c58      	ldrb	r0, [r3, r1]
   b5796:	4302      	orrs	r2, r0
   b5798:	545a      	strb	r2, [r3, r1]
}
   b579a:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b579c:	2a00      	cmp	r2, #0
   b579e:	4613      	mov	r3, r2
   b57a0:	8904      	ldrh	r4, [r0, #8]
   b57a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b57a4:	bfb8      	it	lt
   b57a6:	1dd3      	addlt	r3, r2, #7
   b57a8:	10db      	asrs	r3, r3, #3
   b57aa:	fb13 1104 	smlabb	r1, r3, r4, r1
   b57ae:	f002 0207 	and.w	r2, r2, #7
   b57b2:	2301      	movs	r3, #1
   b57b4:	fa03 f202 	lsl.w	r2, r3, r2
   b57b8:	5c43      	ldrb	r3, [r0, r1]
   b57ba:	405a      	eors	r2, r3
   b57bc:	e7cc      	b.n	b5758 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b57c0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b57c0:	b570      	push	{r4, r5, r6, lr}
                                                     rstPin(rst_pin)
   b57c2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b57c4:	4604      	mov	r4, r0
   b57c6:	460e      	mov	r6, r1
                                                     rstPin(rst_pin)
   b57c8:	2180      	movs	r1, #128	; 0x80
   b57ca:	f7ff fcef 	bl	b51ac <_ZN12Adafruit_GFXC1Ess>
   b57ce:	2500      	movs	r5, #0
   b57d0:	4b0d      	ldr	r3, [pc, #52]	; (b5808 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b57d2:	6023      	str	r3, [r4, #0]
   b57d4:	6265      	str	r5, [r4, #36]	; 0x24
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b57d6:	f002 fb4b 	bl	b7e70 <_Z19__fetch_global_Wirev>
                                                     rstPin(rst_pin)
   b57da:	23ff      	movs	r3, #255	; 0xff
   b57dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b57e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b57e4:	4b09      	ldr	r3, [pc, #36]	; (b580c <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b57e6:	63a3      	str	r3, [r4, #56]	; 0x38
   b57e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b57ec:	2301      	movs	r3, #1
   b57ee:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b57f2:	86a2      	strh	r2, [r4, #52]	; 0x34
   b57f4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b57f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b57fc:	6425      	str	r5, [r4, #64]	; 0x40
   b57fe:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b5802:	4620      	mov	r0, r4
   b5804:	bd70      	pop	{r4, r5, r6, pc}
   b5806:	bf00      	nop
   b5808:	000b9454 	.word	0x000b9454
   b580c:	000b8e60 	.word	0x000b8e60

000b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
{
   b5810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5812:	4604      	mov	r4, r0
  if (wire)
   b5814:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5816:	460d      	mov	r5, r1
  if (wire)
   b5818:	b190      	cbz	r0, b5840 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b581a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b581e:	f001 fd01 	bl	b7224 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5822:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5824:	6803      	ldr	r3, [r0, #0]
   b5826:	2100      	movs	r1, #0
   b5828:	689b      	ldr	r3, [r3, #8]
   b582a:	4798      	blx	r3
    WIRE_WRITE(c);
   b582c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b582e:	6803      	ldr	r3, [r0, #0]
   b5830:	4629      	mov	r1, r5
   b5832:	689b      	ldr	r3, [r3, #8]
   b5834:	4798      	blx	r3
    wire->endTransmission();
   b5836:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b583c:	f001 bcf9 	b.w	b7232 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5840:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5844:	4601      	mov	r1, r0
   b5846:	b298      	uxth	r0, r3
   b5848:	f002 fab5 	bl	b7db6 <digitalWrite>
  if (spi)
   b584c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b584e:	b120      	cbz	r0, b585a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5850:	4629      	mov	r1, r5
}
   b5852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5856:	f001 bf6b 	b.w	b7730 <_ZN8SPIClass8transferEh>
   b585a:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b585c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b585e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5862:	ea05 0107 	and.w	r1, r5, r7
   b5866:	b280      	uxth	r0, r0
   b5868:	f002 faa5 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b586c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5870:	2101      	movs	r1, #1
   b5872:	b280      	uxth	r0, r0
   b5874:	f002 fa9f 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5878:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b587c:	2100      	movs	r1, #0
   b587e:	b280      	uxth	r0, r0
   b5880:	f002 fa99 	bl	b7db6 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5884:	3e01      	subs	r6, #1
   b5886:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b588a:	d1e8      	bne.n	b585e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b588e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i)
{
   b588e:	b538      	push	{r3, r4, r5, lr}
   b5890:	4604      	mov	r4, r0
  TRANSACTION_START
   b5892:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5894:	460d      	mov	r5, r1
  TRANSACTION_START
   b5896:	b180      	cbz	r0, b58ba <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5898:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b589a:	f001 fcb5 	bl	b7208 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b589e:	2d00      	cmp	r5, #0
   b58a0:	4620      	mov	r0, r4
   b58a2:	bf14      	ite	ne
   b58a4:	21a7      	movne	r1, #167	; 0xa7
   b58a6:	21a6      	moveq	r1, #166	; 0xa6
   b58a8:	f7ff ffb2 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b58ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b58ae:	b188      	cbz	r0, b58d4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b58b0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b58b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b58b6:	f001 bca7 	b.w	b7208 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b58ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58bc:	b118      	cbz	r0, b58c6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b58be:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b58c2:	f001 fec7 	bl	b7654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b58c6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b58ca:	2100      	movs	r1, #0
   b58cc:	b280      	uxth	r0, r0
   b58ce:	f002 fa72 	bl	b7db6 <digitalWrite>
   b58d2:	e7e4      	b.n	b589e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b58d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b58d8:	2101      	movs	r1, #1
   b58da:	b280      	uxth	r0, r0
   b58dc:	f002 fa6b 	bl	b7db6 <digitalWrite>
   b58e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58e2:	b118      	cbz	r0, b58ec <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b58e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b58e8:	f001 be9a 	b.w	b7620 <_ZN8SPIClass14endTransactionEv>
}
   b58ec:	bd38      	pop	{r3, r4, r5, pc}

000b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
{
   b58ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b58f2:	4604      	mov	r4, r0
  if (wire)
   b58f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b58f6:	460d      	mov	r5, r1
  if (wire)
   b58f8:	188f      	adds	r7, r1, r2
   b58fa:	b340      	cbz	r0, b594e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b58fc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5900:	f001 fc90 	bl	b7224 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5904:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5906:	6803      	ldr	r3, [r0, #0]
   b5908:	2100      	movs	r1, #0
   b590a:	689b      	ldr	r3, [r3, #8]
   b590c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b590e:	2601      	movs	r6, #1
    while (n--)
   b5910:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--)
   b5914:	d017      	beq.n	b5946 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if (bytesOut >= WIRE_MAX)
   b5916:	2e1f      	cmp	r6, #31
   b5918:	d90c      	bls.n	b5934 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b591a:	f001 fc8a 	bl	b7232 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b591e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5922:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5924:	f001 fc7e 	bl	b7224 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5928:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b592a:	6803      	ldr	r3, [r0, #0]
   b592c:	2100      	movs	r1, #0
   b592e:	689b      	ldr	r3, [r3, #8]
   b5930:	4798      	blx	r3
        bytesOut = 1;
   b5932:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5934:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5936:	f815 1b01 	ldrb.w	r1, [r5], #1
   b593a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b593c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b593e:	689b      	ldr	r3, [r3, #8]
   b5940:	4798      	blx	r3
      bytesOut++;
   b5942:	b2f6      	uxtb	r6, r6
    while (n--)
   b5944:	e7e4      	b.n	b5910 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5946:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b594a:	f001 bc72 	b.w	b7232 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b594e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5952:	4601      	mov	r1, r0
   b5954:	b298      	uxth	r0, r3
   b5956:	f002 fa2e 	bl	b7db6 <digitalWrite>
    while (n--)
   b595a:	42bd      	cmp	r5, r7
   b595c:	d022      	beq.n	b59a4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if (spi)
   b595e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   b5960:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5964:	b118      	cbz	r0, b596e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5966:	4649      	mov	r1, r9
   b5968:	f001 fee2 	bl	b7730 <_ZN8SPIClass8transferEh>
   b596c:	e7f5      	b.n	b595a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b596e:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5970:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5974:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5978:	ea09 0108 	and.w	r1, r9, r8
   b597c:	b280      	uxth	r0, r0
   b597e:	f002 fa1a 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5982:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5986:	2101      	movs	r1, #1
   b5988:	b280      	uxth	r0, r0
   b598a:	f002 fa14 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b598e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5992:	2100      	movs	r1, #0
   b5994:	b280      	uxth	r0, r0
   b5996:	f002 fa0e 	bl	b7db6 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b599a:	3e01      	subs	r6, #1
   b599c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b59a0:	d1e8      	bne.n	b5974 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b59a2:	e7da      	b.n	b595a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b59a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b59a8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b59a8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b59ac:	1dda      	adds	r2, r3, #7
   b59ae:	bf48      	it	mi
   b59b0:	f103 020e 	addmi.w	r2, r3, #14
   b59b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b59b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59ba:	10d2      	asrs	r2, r2, #3
   b59bc:	435a      	muls	r2, r3
   b59be:	2100      	movs	r1, #0
   b59c0:	f002 bc94 	b.w	b82ec <memset>

000b59c4 <_ZN16Adafruit_SSD13065beginEhhbb>:
{
   b59c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b59c8:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b59ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   b59cc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b59d0:	4604      	mov	r4, r0
   b59d2:	460f      	mov	r7, r1
   b59d4:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b59d6:	b1d3      	cbz	r3, b5a0e <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b59d8:	4620      	mov	r0, r4
   b59da:	f7ff ffe5 	bl	b59a8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32)
   b59de:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b59e2:	2a20      	cmp	r2, #32
   b59e4:	dc25      	bgt.n	b5a32 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b59e6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b59ea:	2320      	movs	r3, #32
   b59ec:	3a20      	subs	r2, #32
   b59ee:	3973      	subs	r1, #115	; 0x73
   b59f0:	2001      	movs	r0, #1
   b59f2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b59f6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b59fa:	2373      	movs	r3, #115	; 0x73
   b59fc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5a00:	9300      	str	r3, [sp, #0]
   b5a02:	f342 024f 	sbfx	r2, r2, #1, #16
   b5a06:	4b85      	ldr	r3, [pc, #532]	; (b5c1c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b5a08:	f341 014f 	sbfx	r1, r1, #1, #16
   b5a0c:	e01b      	b.n	b5a46 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5a0e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5a12:	1dd8      	adds	r0, r3, #7
   b5a14:	bf48      	it	mi
   b5a16:	f103 000e 	addmi.w	r0, r3, #14
   b5a1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5a1e:	10c0      	asrs	r0, r0, #3
   b5a20:	4358      	muls	r0, r3
   b5a22:	f001 fb0f 	bl	b7044 <malloc>
   b5a26:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5a28:	2800      	cmp	r0, #0
   b5a2a:	d1d5      	bne.n	b59d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5a2c:	b004      	add	sp, #16
   b5a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0, 0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b5a32:	2340      	movs	r3, #64	; 0x40
   b5a34:	f04f 0c01 	mov.w	ip, #1
   b5a38:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b5a3c:	2380      	movs	r3, #128	; 0x80
   b5a3e:	9300      	str	r3, [sp, #0]
   b5a40:	2200      	movs	r2, #0
   b5a42:	4b77      	ldr	r3, [pc, #476]	; (b5c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b5a44:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5a46:	4620      	mov	r0, r4
   b5a48:	f7ff fbc6 	bl	b51d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire)
   b5a4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5a4e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire)
   b5a52:	2800      	cmp	r0, #0
   b5a54:	d078      	beq.n	b5b48 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5a56:	2d00      	cmp	r5, #0
   b5a58:	d174      	bne.n	b5b44 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b5a5a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5a5e:	2b20      	cmp	r3, #32
   b5a60:	bf0c      	ite	eq
   b5a62:	253c      	moveq	r5, #60	; 0x3c
   b5a64:	253d      	movne	r5, #61	; 0x3d
   b5a66:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   b5a6a:	f1b8 0f00 	cmp.w	r8, #0
   b5a6e:	d001      	beq.n	b5a74 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      wire->begin();
   b5a70:	f001 fbce 	bl	b7210 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0))
   b5a74:	b1fe      	cbz	r6, b5ab6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b5a76:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a7a:	2800      	cmp	r0, #0
   b5a7c:	db1b      	blt.n	b5ab6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(rstPin, OUTPUT);
   b5a7e:	2101      	movs	r1, #1
   b5a80:	b280      	uxth	r0, r0
   b5a82:	f002 f987 	bl	b7d94 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5a86:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a8a:	2101      	movs	r1, #1
   b5a8c:	b280      	uxth	r0, r0
   b5a8e:	f002 f992 	bl	b7db6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5a92:	2001      	movs	r0, #1
   b5a94:	f001 fb16 	bl	b70c4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5a98:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a9c:	2100      	movs	r1, #0
   b5a9e:	b280      	uxth	r0, r0
   b5aa0:	f002 f989 	bl	b7db6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5aa4:	200a      	movs	r0, #10
   b5aa6:	f001 fb0d 	bl	b70c4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5aaa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5aae:	2101      	movs	r1, #1
   b5ab0:	b280      	uxth	r0, r0
   b5ab2:	f002 f980 	bl	b7db6 <digitalWrite>
  TRANSACTION_START
   b5ab6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ab8:	2800      	cmp	r0, #0
   b5aba:	d074      	beq.n	b5ba6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b5abc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5abe:	f001 fba3 	bl	b7208 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5ac2:	2204      	movs	r2, #4
   b5ac4:	4957      	ldr	r1, [pc, #348]	; (b5c24 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7ff ff11 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5acc:	8961      	ldrh	r1, [r4, #10]
   b5ace:	3901      	subs	r1, #1
   b5ad0:	b2c9      	uxtb	r1, r1
   b5ad2:	4620      	mov	r0, r4
   b5ad4:	f7ff fe9c 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5ad8:	4953      	ldr	r1, [pc, #332]	; (b5c28 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5ada:	2204      	movs	r2, #4
   b5adc:	4620      	mov	r0, r4
   b5ade:	f7ff ff06 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5ae2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5ae6:	2b01      	cmp	r3, #1
   b5ae8:	bf0c      	ite	eq
   b5aea:	2110      	moveq	r1, #16
   b5aec:	2114      	movne	r1, #20
   b5aee:	4620      	mov	r0, r4
   b5af0:	f7ff fe8e 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5af4:	2204      	movs	r2, #4
   b5af6:	494d      	ldr	r1, [pc, #308]	; (b5c2c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5af8:	4620      	mov	r0, r4
   b5afa:	f7ff fef8 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if ((WIDTH == 128) && (HEIGHT == 32))
   b5afe:	68a3      	ldr	r3, [r4, #8]
   b5b00:	4a4b      	ldr	r2, [pc, #300]	; (b5c30 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5b02:	4293      	cmp	r3, r2
   b5b04:	d15c      	bne.n	b5bc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5b06:	494b      	ldr	r1, [pc, #300]	; (b5c34 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5b08:	2204      	movs	r2, #4
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff feef 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5b10:	21d9      	movs	r1, #217	; 0xd9
   b5b12:	4620      	mov	r0, r4
   b5b14:	f7ff fe7c 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5b18:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5b1c:	2b01      	cmp	r3, #1
   b5b1e:	bf0c      	ite	eq
   b5b20:	2122      	moveq	r1, #34	; 0x22
   b5b22:	21f1      	movne	r1, #241	; 0xf1
   b5b24:	4620      	mov	r0, r4
   b5b26:	f7ff fe73 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	4942      	ldr	r1, [pc, #264]	; (b5c38 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5b2e:	2206      	movs	r2, #6
   b5b30:	f7ff fedd 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5b34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b36:	2800      	cmp	r0, #0
   b5b38:	d063      	beq.n	b5c02 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b5b3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5b3c:	f001 fb64 	bl	b7208 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5b40:	2001      	movs	r0, #1
   b5b42:	e773      	b.n	b5a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5b44:	b26d      	sxtb	r5, r5
   b5b46:	e78e      	b.n	b5a66 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5b48:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5b4c:	2101      	movs	r1, #1
   b5b4e:	b280      	uxth	r0, r0
   b5b50:	f002 f920 	bl	b7d94 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5b54:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b58:	2101      	movs	r1, #1
   b5b5a:	b280      	uxth	r0, r0
   b5b5c:	f002 f91a 	bl	b7d94 <pinMode>
    SSD1306_DESELECT
   b5b60:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b64:	2101      	movs	r1, #1
   b5b66:	b280      	uxth	r0, r0
   b5b68:	f002 f925 	bl	b7db6 <digitalWrite>
    if (spi)
   b5b6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5b6e:	b13d      	cbz	r5, b5b80 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if (periphBegin)
   b5b70:	f1b8 0f00 	cmp.w	r8, #0
   b5b74:	f43f af7e 	beq.w	b5a74 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
        spi->begin();
   b5b78:	4628      	mov	r0, r5
   b5b7a:	f001 fd3d 	bl	b75f8 <_ZN8SPIClass5beginEv>
   b5b7e:	e779      	b.n	b5a74 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5b80:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5b84:	2101      	movs	r1, #1
   b5b86:	b280      	uxth	r0, r0
   b5b88:	f002 f904 	bl	b7d94 <pinMode>
      pinMode(clkPin, OUTPUT);
   b5b8c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b90:	2101      	movs	r1, #1
   b5b92:	b280      	uxth	r0, r0
   b5b94:	f002 f8fe 	bl	b7d94 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5b98:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b9c:	4629      	mov	r1, r5
   b5b9e:	b280      	uxth	r0, r0
   b5ba0:	f002 f909 	bl	b7db6 <digitalWrite>
   b5ba4:	e766      	b.n	b5a74 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b5ba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ba8:	b118      	cbz	r0, b5bb2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5baa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5bae:	f001 fd51 	bl	b7654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5bb2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5bb6:	2100      	movs	r1, #0
   b5bb8:	b280      	uxth	r0, r0
   b5bba:	f002 f8fc 	bl	b7db6 <digitalWrite>
   b5bbe:	e780      	b.n	b5ac2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  else if ((WIDTH == 128) && (HEIGHT == 64))
   b5bc0:	4a1e      	ldr	r2, [pc, #120]	; (b5c3c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5bc2:	4293      	cmp	r3, r2
   b5bc4:	d10e      	bne.n	b5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5bc6:	491e      	ldr	r1, [pc, #120]	; (b5c40 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5bc8:	2203      	movs	r2, #3
   b5bca:	4620      	mov	r0, r4
   b5bcc:	f7ff fe8f 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5bd0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5bd4:	2b01      	cmp	r3, #1
   b5bd6:	bf0c      	ite	eq
   b5bd8:	219f      	moveq	r1, #159	; 0x9f
   b5bda:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5bdc:	4620      	mov	r0, r4
   b5bde:	f7ff fe17 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5be2:	e795      	b.n	b5b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  else if ((WIDTH == 96) && (HEIGHT == 16))
   b5be4:	4a17      	ldr	r2, [pc, #92]	; (b5c44 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5be6:	4293      	cmp	r3, r2
   b5be8:	d192      	bne.n	b5b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5bea:	4917      	ldr	r1, [pc, #92]	; (b5c48 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5bec:	2203      	movs	r2, #3
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7ff fe7d 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5bf4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5bf8:	2b01      	cmp	r3, #1
   b5bfa:	bf0c      	ite	eq
   b5bfc:	2110      	moveq	r1, #16
   b5bfe:	21af      	movne	r1, #175	; 0xaf
   b5c00:	e7ec      	b.n	b5bdc <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b5c02:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5c06:	2101      	movs	r1, #1
   b5c08:	b280      	uxth	r0, r0
   b5c0a:	f002 f8d4 	bl	b7db6 <digitalWrite>
   b5c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c10:	2800      	cmp	r0, #0
   b5c12:	d095      	beq.n	b5b40 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5c14:	f001 fd04 	bl	b7620 <_ZN8SPIClass14endTransactionEv>
   b5c18:	e792      	b.n	b5b40 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5c1a:	bf00      	nop
   b5c1c:	000b8e6c 	.word	0x000b8e6c
   b5c20:	000b904c 	.word	0x000b904c
   b5c24:	000b94b4 	.word	0x000b94b4
   b5c28:	000b94b8 	.word	0x000b94b8
   b5c2c:	000b94bc 	.word	0x000b94bc
   b5c30:	00200080 	.word	0x00200080
   b5c34:	000b94c6 	.word	0x000b94c6
   b5c38:	000b94c0 	.word	0x000b94c0
   b5c3c:	00400080 	.word	0x00400080
   b5c40:	000b94ca 	.word	0x000b94ca
   b5c44:	00100060 	.word	0x00100060
   b5c48:	000b94cd 	.word	0x000b94cd

000b5c4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
{
   b5c4c:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT))
   b5c4e:	2a00      	cmp	r2, #0
{
   b5c50:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT))
   b5c54:	db3d      	blt.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5c56:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5c5a:	4294      	cmp	r4, r2
   b5c5c:	dd39      	ble.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0)
   b5c5e:	2900      	cmp	r1, #0
      w += x;
   b5c60:	bfbe      	ittt	lt
   b5c62:	185b      	addlt	r3, r3, r1
   b5c64:	b21b      	sxthlt	r3, r3
      x = 0;
   b5c66:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH)
   b5c68:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5c6c:	18ce      	adds	r6, r1, r3
   b5c6e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5c70:	bfc4      	itt	gt
   b5c72:	1a63      	subgt	r3, r4, r1
   b5c74:	b21b      	sxthgt	r3, r3
    if (w > 0)
   b5c76:	2b00      	cmp	r3, #0
   b5c78:	dd2b      	ble.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5c7a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c7c:	10d6      	asrs	r6, r2, #3
   b5c7e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5c82:	4401      	add	r1, r0
              mask = 1 << (y & 7);
   b5c84:	f002 0007 	and.w	r0, r2, #7
   b5c88:	2201      	movs	r2, #1
   b5c8a:	4082      	lsls	r2, r0
      switch (color)
   b5c8c:	2d01      	cmp	r5, #1
              mask = 1 << (y & 7);
   b5c8e:	b2d2      	uxtb	r2, r2
      switch (color)
   b5c90:	d016      	beq.n	b5cc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5c92:	2d02      	cmp	r5, #2
   b5c94:	d00b      	beq.n	b5cae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5c96:	b9e5      	cbnz	r5, b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   b5c98:	43d2      	mvns	r2, r2
   b5c9a:	b2d2      	uxtb	r2, r2
   b5c9c:	440b      	add	r3, r1
        while (w--)
   b5c9e:	4299      	cmp	r1, r3
   b5ca0:	d017      	beq.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   b5ca2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5ca6:	4010      	ands	r0, r2
   b5ca8:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5cac:	e7f7      	b.n	b5c9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5cae:	440b      	add	r3, r1
        while (w--)
   b5cb0:	4299      	cmp	r1, r3
   b5cb2:	d00e      	beq.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   b5cb4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5cb8:	4050      	eors	r0, r2
   b5cba:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5cbe:	e7f7      	b.n	b5cb0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5cc0:	440b      	add	r3, r1
        while (w--)
   b5cc2:	4299      	cmp	r1, r3
   b5cc4:	d005      	beq.n	b5cd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   b5cc6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5cca:	4310      	orrs	r0, r2
   b5ccc:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5cd0:	e7f7      	b.n	b5cc2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5cd2:	bd70      	pop	{r4, r5, r6, pc}

000b5cd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
{
   b5cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH))
   b5cd6:	2900      	cmp	r1, #0
{
   b5cd8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH))
   b5cdc:	db76      	blt.n	b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5cde:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5ce2:	42b1      	cmp	r1, r6
   b5ce4:	da72      	bge.n	b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0)
   b5ce6:	2a00      	cmp	r2, #0
      __h += __y;
   b5ce8:	bfbe      	ittt	lt
   b5cea:	189b      	addlt	r3, r3, r2
   b5cec:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5cee:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT)
   b5cf0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5cf4:	18d7      	adds	r7, r2, r3
   b5cf6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5cf8:	bfc4      	itt	gt
   b5cfa:	1aa3      	subgt	r3, r4, r2
   b5cfc:	b21b      	sxthgt	r3, r3
    if (__h > 0)
   b5cfe:	2b00      	cmp	r3, #0
   b5d00:	dd64      	ble.n	b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5d02:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5d06:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5d08:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod)
   b5d0c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   b5d10:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5d12:	eb07 0406 	add.w	r4, r7, r6
      if (mod)
   b5d16:	d023      	beq.n	b5d60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5d18:	f1c2 0208 	rsb	r2, r2, #8
   b5d1c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5d1e:	492d      	ldr	r1, [pc, #180]	; (b5dd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   b5d20:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   b5d22:	bf3c      	itt	cc
   b5d24:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5d28:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5d2c:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   b5d2e:	bf3c      	itt	cc
   b5d30:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5d34:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color)
   b5d38:	2d01      	cmp	r5, #1
   b5d3a:	d007      	beq.n	b5d4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5d3c:	2d02      	cmp	r5, #2
   b5d3e:	d02e      	beq.n	b5d9e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5d40:	b94d      	cbnz	r5, b5d56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   b5d42:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5d46:	ea2c 0101 	bic.w	r1, ip, r1
   b5d4a:	e003      	b.n	b5d54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   b5d4c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5d50:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   b5d54:	55b9      	strb	r1, [r7, r6]
      if (h >= mod)
   b5d56:	4293      	cmp	r3, r2
   b5d58:	d338      	bcc.n	b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5d5a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5d5e:	440c      	add	r4, r1
        h -= mod;
   b5d60:	1a9a      	subs	r2, r3, r2
   b5d62:	b2d2      	uxtb	r2, r2
        if (h >= 8)
   b5d64:	2a07      	cmp	r2, #7
   b5d66:	d90e      	bls.n	b5d86 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == INVERSE)
   b5d68:	2d02      	cmp	r5, #2
   b5d6a:	d11d      	bne.n	b5da8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5d6c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   b5d6e:	7821      	ldrb	r1, [r4, #0]
   b5d70:	43c9      	mvns	r1, r1
   b5d72:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5d74:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5d76:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5d7a:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5d7c:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5d7e:	440c      	add	r4, r1
            } while (h >= 8);
   b5d80:	d8f5      	bhi.n	b5d6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   b5d82:	f002 0207 	and.w	r2, r2, #7
        if (h)
   b5d86:	b30a      	cbz	r2, b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5d88:	4b13      	ldr	r3, [pc, #76]	; (b5dd8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color)
   b5d8a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5d8c:	5c9b      	ldrb	r3, [r3, r2]
          switch (color)
   b5d8e:	d01a      	beq.n	b5dc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5d90:	2d02      	cmp	r5, #2
   b5d92:	d01c      	beq.n	b5dce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5d94:	b9d5      	cbnz	r5, b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   b5d96:	7822      	ldrb	r2, [r4, #0]
   b5d98:	ea22 0303 	bic.w	r3, r2, r3
   b5d9c:	e015      	b.n	b5dca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   b5d9e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5da2:	ea81 010c 	eor.w	r1, r1, ip
   b5da6:	e7d5      	b.n	b5d54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5da8:	1e29      	subs	r1, r5, #0
   b5daa:	bf18      	it	ne
   b5dac:	2101      	movne	r1, #1
   b5dae:	4249      	negs	r1, r1
   b5db0:	b2c9      	uxtb	r1, r1
   b5db2:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   b5db4:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5db6:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5db8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5dbc:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5dbe:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5dc0:	4434      	add	r4, r6
            } while (h >= 8);
   b5dc2:	d8f7      	bhi.n	b5db4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5dc4:	e7dd      	b.n	b5d82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   b5dc6:	7822      	ldrb	r2, [r4, #0]
   b5dc8:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   b5dca:	7023      	strb	r3, [r4, #0]
}
   b5dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   b5dce:	7822      	ldrb	r2, [r4, #0]
   b5dd0:	4053      	eors	r3, r2
   b5dd2:	e7fa      	b.n	b5dca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5dd4:	000b94a4 	.word	0x000b94a4
   b5dd8:	000b94ac 	.word	0x000b94ac

000b5ddc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
{
   b5ddc:	b470      	push	{r4, r5, r6}
   b5dde:	4614      	mov	r4, r2
  switch (rotation)
   b5de0:	7e82      	ldrb	r2, [r0, #26]
{
   b5de2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation)
   b5de6:	2a02      	cmp	r2, #2
   b5de8:	d00d      	beq.n	b5e06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5dea:	2a03      	cmp	r2, #3
   b5dec:	d018      	beq.n	b5e20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5dee:	2a01      	cmp	r2, #1
   b5df0:	d111      	bne.n	b5e16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5df2:	8902      	ldrh	r2, [r0, #8]
   b5df4:	43e4      	mvns	r4, r4
   b5df6:	4414      	add	r4, r2
   b5df8:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   b5dfa:	9603      	str	r6, [sp, #12]
   b5dfc:	460a      	mov	r2, r1
   b5dfe:	4621      	mov	r1, r4
}
   b5e00:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   b5e02:	f7ff bf67 	b.w	b5cd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5e06:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   b5e08:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   b5e0a:	43e4      	mvns	r4, r4
    x -= (w - 1);
   b5e0c:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   b5e0e:	4414      	add	r4, r2
    x -= (w - 1);
   b5e10:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   b5e12:	b224      	sxth	r4, r4
    x -= (w - 1);
   b5e14:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   b5e16:	9603      	str	r6, [sp, #12]
   b5e18:	4622      	mov	r2, r4
}
   b5e1a:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   b5e1c:	f7ff bf16 	b.w	b5c4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   b5e20:	8945      	ldrh	r5, [r0, #10]
   b5e22:	4419      	add	r1, r3
   b5e24:	1a69      	subs	r1, r5, r1
   b5e26:	b209      	sxth	r1, r1
    break;
   b5e28:	e7e7      	b.n	b5dfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5e2a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
   b5e2a:	b430      	push	{r4, r5}
   b5e2c:	4614      	mov	r4, r2
  switch (rotation)
   b5e2e:	7e82      	ldrb	r2, [r0, #26]
{
   b5e30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation)
   b5e34:	2a02      	cmp	r2, #2
   b5e36:	d00d      	beq.n	b5e54 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5e38:	2a03      	cmp	r2, #3
   b5e3a:	d018      	beq.n	b5e6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5e3c:	2a01      	cmp	r2, #1
   b5e3e:	d111      	bne.n	b5e64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   b5e40:	18e2      	adds	r2, r4, r3
   b5e42:	8904      	ldrh	r4, [r0, #8]
   b5e44:	1aa4      	subs	r4, r4, r2
   b5e46:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   b5e48:	9502      	str	r5, [sp, #8]
   b5e4a:	460a      	mov	r2, r1
   b5e4c:	4621      	mov	r1, r4
}
   b5e4e:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   b5e50:	f7ff befc 	b.w	b5c4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   b5e54:	8902      	ldrh	r2, [r0, #8]
   b5e56:	43c9      	mvns	r1, r1
   b5e58:	4411      	add	r1, r2
    y -= (h - 1);
   b5e5a:	18e2      	adds	r2, r4, r3
   b5e5c:	8944      	ldrh	r4, [r0, #10]
   b5e5e:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   b5e60:	b209      	sxth	r1, r1
    y -= (h - 1);
   b5e62:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   b5e64:	9502      	str	r5, [sp, #8]
   b5e66:	4622      	mov	r2, r4
}
   b5e68:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   b5e6a:	f7ff bf33 	b.w	b5cd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5e6e:	8942      	ldrh	r2, [r0, #10]
   b5e70:	43c9      	mvns	r1, r1
   b5e72:	4411      	add	r1, r2
   b5e74:	b209      	sxth	r1, r1
    break;
   b5e76:	e7e7      	b.n	b5e48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5e78 <_ZN16Adafruit_SSD13067displayEv>:
{
   b5e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e7c:	4604      	mov	r4, r0
  TRANSACTION_START
   b5e7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5e80:	2800      	cmp	r0, #0
   b5e82:	d042      	beq.n	b5f0a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5e84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5e86:	f001 f9bf 	bl	b7208 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5e8a:	4947      	ldr	r1, [pc, #284]	; (b5fa8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5e8c:	2205      	movs	r2, #5
   b5e8e:	4620      	mov	r0, r4
   b5e90:	f7ff fd2d 	bl	b58ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5e94:	8921      	ldrh	r1, [r4, #8]
   b5e96:	3901      	subs	r1, #1
   b5e98:	4620      	mov	r0, r4
   b5e9a:	b2c9      	uxtb	r1, r1
   b5e9c:	f7ff fcb8 	bl	b5810 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5ea0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5ea4:	1dde      	adds	r6, r3, #7
   b5ea6:	bf48      	it	mi
   b5ea8:	f103 060e 	addmi.w	r6, r3, #14
  if (wire)
   b5eac:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5eb0:	8923      	ldrh	r3, [r4, #8]
   b5eb2:	10f6      	asrs	r6, r6, #3
   b5eb4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
   b5eb8:	fa15 f686 	uxtah	r6, r5, r6
  if (wire)
   b5ebc:	2800      	cmp	r0, #0
   b5ebe:	d03a      	beq.n	b5f36 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5ec0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5ec4:	f001 f9ae 	bl	b7224 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5ec8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5eca:	6803      	ldr	r3, [r0, #0]
   b5ecc:	2140      	movs	r1, #64	; 0x40
   b5ece:	689b      	ldr	r3, [r3, #8]
   b5ed0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5ed2:	2701      	movs	r7, #1
    while (count--)
   b5ed4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--)
   b5ed8:	d024      	beq.n	b5f24 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if (bytesOut >= WIRE_MAX)
   b5eda:	2f1f      	cmp	r7, #31
   b5edc:	d90c      	bls.n	b5ef8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5ede:	f001 f9a8 	bl	b7232 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5ee2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ee8:	f001 f99c 	bl	b7224 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5eec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5eee:	6803      	ldr	r3, [r0, #0]
   b5ef0:	2140      	movs	r1, #64	; 0x40
   b5ef2:	689b      	ldr	r3, [r3, #8]
   b5ef4:	4798      	blx	r3
        bytesOut = 1;
   b5ef6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5ef8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5efa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5efe:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5f00:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5f02:	689b      	ldr	r3, [r3, #8]
   b5f04:	4798      	blx	r3
      bytesOut++;
   b5f06:	b2ff      	uxtb	r7, r7
    while (count--)
   b5f08:	e7e4      	b.n	b5ed4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f0c:	b118      	cbz	r0, b5f16 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5f0e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5f12:	f001 fb9f 	bl	b7654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5f16:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5f1a:	2100      	movs	r1, #0
   b5f1c:	b280      	uxth	r0, r0
   b5f1e:	f001 ff4a 	bl	b7db6 <digitalWrite>
   b5f22:	e7b2      	b.n	b5e8a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5f24:	f001 f985 	bl	b7232 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5f28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f2a:	b378      	cbz	r0, b5f8c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5f2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5f2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f32:	f001 b969 	b.w	b7208 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5f36:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5f3a:	2101      	movs	r1, #1
   b5f3c:	b280      	uxth	r0, r0
   b5f3e:	f001 ff3a 	bl	b7db6 <digitalWrite>
    while (count--)
   b5f42:	42ae      	cmp	r6, r5
   b5f44:	d0f0      	beq.n	b5f28 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if (spi)
   b5f46:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
   b5f48:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5f4c:	b118      	cbz	r0, b5f56 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5f4e:	4649      	mov	r1, r9
   b5f50:	f001 fbee 	bl	b7730 <_ZN8SPIClass8transferEh>
   b5f54:	e7f5      	b.n	b5f42 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5f56:	2708      	movs	r7, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5f58:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5f5c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5f60:	ea09 0108 	and.w	r1, r9, r8
   b5f64:	b280      	uxth	r0, r0
   b5f66:	f001 ff26 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5f6a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f6e:	2101      	movs	r1, #1
   b5f70:	b280      	uxth	r0, r0
   b5f72:	f001 ff20 	bl	b7db6 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5f76:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f7a:	2100      	movs	r1, #0
   b5f7c:	b280      	uxth	r0, r0
   b5f7e:	f001 ff1a 	bl	b7db6 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5f82:	3f01      	subs	r7, #1
   b5f84:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5f88:	d1e8      	bne.n	b5f5c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5f8a:	e7da      	b.n	b5f42 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5f8c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5f90:	2101      	movs	r1, #1
   b5f92:	b280      	uxth	r0, r0
   b5f94:	f001 ff0f 	bl	b7db6 <digitalWrite>
   b5f98:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f9a:	b118      	cbz	r0, b5fa4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5f9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5fa0:	f001 bb3e 	b.w	b7620 <_ZN8SPIClass14endTransactionEv>
}
   b5fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5fa8:	000b94d0 	.word	0x000b94d0

000b5fac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b5fac:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5fae:	4c0b      	ldr	r4, [pc, #44]	; (b5fdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5fb0:	7821      	ldrb	r1, [r4, #0]
   b5fb2:	f3bf 8f5b 	dmb	ish
   b5fb6:	f011 0101 	ands.w	r1, r1, #1
   b5fba:	d10b      	bne.n	b5fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	9101      	str	r1, [sp, #4]
   b5fc0:	f7fe f876 	bl	b40b0 <__cxa_guard_acquire>
   b5fc4:	9901      	ldr	r1, [sp, #4]
   b5fc6:	b128      	cbz	r0, b5fd4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5fc8:	4805      	ldr	r0, [pc, #20]	; (b5fe0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5fca:	f001 fb0b 	bl	b75e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5fce:	4620      	mov	r0, r4
   b5fd0:	f7fe f873 	bl	b40ba <__cxa_guard_release>
    }
   b5fd4:	4802      	ldr	r0, [pc, #8]	; (b5fe0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5fd6:	b002      	add	sp, #8
   b5fd8:	bd10      	pop	{r4, pc}
   b5fda:	bf00      	nop
   b5fdc:	2003e5d4 	.word	0x2003e5d4
   b5fe0:	2003e5d8 	.word	0x2003e5d8

000b5fe4 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b5fe4:	b510      	push	{r4, lr}
   b5fe6:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b5fe8:	7001      	strb	r1, [r0, #0]
   b5fea:	7042      	strb	r2, [r0, #1]
   b5fec:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b5fee:	2101      	movs	r1, #1
   b5ff0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b5ff4:	f002 f964 	bl	b82c0 <calloc>
   b5ff8:	6060      	str	r0, [r4, #4]
}
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	bd10      	pop	{r4, pc}

000b5ffe <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b5ffe:	b510      	push	{r4, lr}
   b6000:	4604      	mov	r4, r0
{
    free(_led_state);
   b6002:	6840      	ldr	r0, [r0, #4]
   b6004:	f001 f826 	bl	b7054 <free>
}
   b6008:	4620      	mov	r0, r4
   b600a:	bd10      	pop	{r4, pc}

000b600c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b600c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b600e:	2100      	movs	r1, #0
{
   b6010:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b6012:	7800      	ldrb	r0, [r0, #0]
   b6014:	f001 fecf 	bl	b7db6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6018:	2014      	movs	r0, #20
   b601a:	f000 fdf7 	bl	b6c0c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b601e:	7820      	ldrb	r0, [r4, #0]
   b6020:	2101      	movs	r1, #1
   b6022:	f001 fec8 	bl	b7db6 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b6026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b602a:	2014      	movs	r0, #20
   b602c:	f000 bdee 	b.w	b6c0c <HAL_Delay_Microseconds>

000b6030 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b6030:	b570      	push	{r4, r5, r6, lr}
   b6032:	4606      	mov	r6, r0
   b6034:	460c      	mov	r4, r1
   b6036:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b6038:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b603a:	bf4c      	ite	mi
   b603c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b603e:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b6040:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b6042:	f001 feb8 	bl	b7db6 <digitalWrite>
    for (byte i=0; i<8; i++)
   b6046:	3d01      	subs	r5, #1
        clk();
   b6048:	4630      	mov	r0, r6
   b604a:	f7ff ffdf 	bl	b600c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b604e:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b6050:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b6054:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b6056:	d1ef      	bne.n	b6038 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b6058:	bd70      	pop	{r4, r5, r6, pc}

000b605a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b605a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b605c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b6060:	461e      	mov	r6, r3
   b6062:	460c      	mov	r4, r1
   b6064:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b6066:	bf14      	ite	ne
   b6068:	21c0      	movne	r1, #192	; 0xc0
   b606a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b606c:	0673      	lsls	r3, r6, #25
   b606e:	bf58      	it	pl
   b6070:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b6074:	062a      	lsls	r2, r5, #24
   b6076:	bf58      	it	pl
   b6078:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b607c:	066b      	lsls	r3, r5, #25
   b607e:	bf58      	it	pl
   b6080:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b6084:	0622      	lsls	r2, r4, #24
   b6086:	bf58      	it	pl
   b6088:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b608c:	0663      	lsls	r3, r4, #25
   b608e:	bf58      	it	pl
   b6090:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b6094:	9001      	str	r0, [sp, #4]
   b6096:	f7ff ffcb 	bl	b6030 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b609a:	9801      	ldr	r0, [sp, #4]
   b609c:	4631      	mov	r1, r6
   b609e:	f7ff ffc7 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b60a2:	9801      	ldr	r0, [sp, #4]
   b60a4:	4629      	mov	r1, r5
   b60a6:	f7ff ffc3 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b60aa:	9801      	ldr	r0, [sp, #4]
   b60ac:	4621      	mov	r1, r4
}
   b60ae:	b002      	add	sp, #8
   b60b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b60b4:	f7ff bfbc 	b.w	b6030 <_ZN12ChainableLED8sendByteEh>

000b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b60b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b60bc:	4604      	mov	r4, r0
   b60be:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b60c0:	2100      	movs	r1, #0
{
   b60c2:	4690      	mov	r8, r2
   b60c4:	4699      	mov	r9, r3
   b60c6:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b60ca:	f7ff ffb1 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b60ce:	2100      	movs	r1, #0
   b60d0:	4620      	mov	r0, r4
   b60d2:	f7ff ffad 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b60d6:	2100      	movs	r1, #0
   b60d8:	4620      	mov	r0, r4
   b60da:	f7ff ffa9 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b60de:	2100      	movs	r1, #0
   b60e0:	4620      	mov	r0, r4
   b60e2:	f7ff ffa5 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
   b60e6:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b60e8:	78a3      	ldrb	r3, [r4, #2]
   b60ea:	b2f5      	uxtb	r5, r6
   b60ec:	42ab      	cmp	r3, r5
   b60ee:	d919      	bls.n	b6124 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b60f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b60f4:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b60f6:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b60fa:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b60fe:	d108      	bne.n	b6112 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b6100:	6861      	ldr	r1, [r4, #4]
   b6102:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b6106:	6861      	ldr	r1, [r4, #4]
   b6108:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b610c:	6861      	ldr	r1, [r4, #4]
   b610e:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b6112:	6861      	ldr	r1, [r4, #4]
   b6114:	5ccb      	ldrb	r3, [r1, r3]
   b6116:	5c8a      	ldrb	r2, [r1, r2]
   b6118:	5c09      	ldrb	r1, [r1, r0]
   b611a:	4620      	mov	r0, r4
   b611c:	f7ff ff9d 	bl	b605a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b6120:	3601      	adds	r6, #1
   b6122:	e7e1      	b.n	b60e8 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b6124:	4620      	mov	r0, r4
   b6126:	2100      	movs	r1, #0
   b6128:	f7ff ff82 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b612c:	4620      	mov	r0, r4
   b612e:	2100      	movs	r1, #0
   b6130:	f7ff ff7e 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6134:	4620      	mov	r0, r4
   b6136:	2100      	movs	r1, #0
   b6138:	f7ff ff7a 	bl	b6030 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b613c:	4620      	mov	r0, r4
   b613e:	2100      	movs	r1, #0
}
   b6140:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b6144:	f7ff bf74 	b.w	b6030 <_ZN12ChainableLED8sendByteEh>

000b6148 <_ZN12ChainableLED4initEv>:
{
   b6148:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b614a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b614c:	2101      	movs	r1, #1
   b614e:	7800      	ldrb	r0, [r0, #0]
   b6150:	f001 fe20 	bl	b7d94 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b6154:	7860      	ldrb	r0, [r4, #1]
   b6156:	2101      	movs	r1, #1
   b6158:	f001 fe1c 	bl	b7d94 <pinMode>
   b615c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b615e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b6160:	78a3      	ldrb	r3, [r4, #2]
   b6162:	b2e9      	uxtb	r1, r5
   b6164:	428b      	cmp	r3, r1
   b6166:	d907      	bls.n	b6178 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b6168:	2300      	movs	r3, #0
   b616a:	9600      	str	r6, [sp, #0]
   b616c:	461a      	mov	r2, r3
   b616e:	4620      	mov	r0, r4
   b6170:	f7ff ffa2 	bl	b60b8 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b6174:	3501      	adds	r5, #1
   b6176:	e7f3      	b.n	b6160 <_ZN12ChainableLED4initEv+0x18>
}
   b6178:	b002      	add	sp, #8
   b617a:	bd70      	pop	{r4, r5, r6, pc}

000b617c <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b617c:	b538      	push	{r3, r4, r5, lr}
   b617e:	4604      	mov	r4, r0
   b6180:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b6182:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b6184:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b6186:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b6188:	f001 fe04 	bl	b7d94 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b618c:	7b20      	ldrb	r0, [r4, #12]
   b618e:	2101      	movs	r1, #1
   b6190:	f001 fe11 	bl	b7db6 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b6194:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b6196:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b6198:	2101      	movs	r1, #1
   b619a:	f001 fdfb 	bl	b7d94 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b619e:	7b60      	ldrb	r0, [r4, #13]
   b61a0:	2100      	movs	r1, #0
   b61a2:	f001 fe08 	bl	b7db6 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b61a6:	4620      	mov	r0, r4
   b61a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b61ac <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b61ac:	3901      	subs	r1, #1
   b61ae:	b2c9      	uxtb	r1, r1
   b61b0:	2908      	cmp	r1, #8
   b61b2:	bf9a      	itte	ls
   b61b4:	4b02      	ldrls	r3, [pc, #8]	; (b61c0 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b61b6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b61ba:	4802      	ldrhi	r0, [pc, #8]	; (b61c4 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b61bc:	4770      	bx	lr
   b61be:	bf00      	nop
   b61c0:	000b95cc 	.word	0x000b95cc
   b61c4:	000b94d5 	.word	0x000b94d5

000b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b61c8:	b507      	push	{r0, r1, r2, lr}
   b61ca:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b61cc:	f7ff feee 	bl	b5fac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b61d0:	9901      	ldr	r1, [sp, #4]
    }
   b61d2:	b003      	add	sp, #12
   b61d4:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b61d8:	f001 baaa 	b.w	b7730 <_ZN8SPIClass8transferEh>

000b61dc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b61dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61e0:	4607      	mov	r7, r0
   b61e2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b61e6:	461e      	mov	r6, r3
	if (count == 0) {
   b61e8:	4615      	mov	r5, r2
   b61ea:	2a00      	cmp	r2, #0
   b61ec:	d042      	beq.n	b6274 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b61ee:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61f2:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b61f4:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b61f8:	2100      	movs	r1, #0
   b61fa:	f001 fddc 	bl	b7db6 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b61fe:	4648      	mov	r0, r9
   b6200:	f7ff ffe2 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6204:	3d01      	subs	r5, #1
   b6206:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6208:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b620c:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6210:	fa5f f48b 	uxtb.w	r4, fp
   b6214:	42a5      	cmp	r5, r4
   b6216:	d922      	bls.n	b625e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6218:	b9dc      	cbnz	r4, b6252 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b621a:	f1b8 0f00 	cmp.w	r8, #0
   b621e:	d018      	beq.n	b6252 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6220:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6222:	b2d3      	uxtb	r3, r2
   b6224:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6226:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6228:	d805      	bhi.n	b6236 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b622a:	fa0a f402 	lsl.w	r4, sl, r2
   b622e:	430c      	orrs	r4, r1
   b6230:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6232:	3201      	adds	r2, #1
   b6234:	e7f5      	b.n	b6222 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6236:	4648      	mov	r0, r9
   b6238:	9101      	str	r1, [sp, #4]
   b623a:	f7ff ffc5 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b623e:	7833      	ldrb	r3, [r6, #0]
   b6240:	9901      	ldr	r1, [sp, #4]
   b6242:	4004      	ands	r4, r0
   b6244:	ea23 0301 	bic.w	r3, r3, r1
   b6248:	431c      	orrs	r4, r3
   b624a:	7034      	strb	r4, [r6, #0]
		index++;
   b624c:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b6250:	e7de      	b.n	b6210 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b6252:	4648      	mov	r0, r9
   b6254:	f7ff ffb8 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6258:	f806 000b 	strb.w	r0, [r6, fp]
   b625c:	e7f6      	b.n	b624c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b625e:	2000      	movs	r0, #0
   b6260:	f7ff ffb2 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b6264:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6266:	7b38      	ldrb	r0, [r7, #12]
   b6268:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b626a:	b003      	add	sp, #12
   b626c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b6270:	f001 bda1 	b.w	b7db6 <digitalWrite>
} // End PCD_ReadRegister()
   b6274:	b003      	add	sp, #12
   b6276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b627a <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b627a:	b538      	push	{r3, r4, r5, lr}
   b627c:	460c      	mov	r4, r1
   b627e:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6280:	2100      	movs	r1, #0
   b6282:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6284:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b6288:	f001 fd95 	bl	b7db6 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b628c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b6290:	f7ff ff9a 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b6294:	2000      	movs	r0, #0
   b6296:	f7ff ff97 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b629a:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b629c:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b629e:	7b28      	ldrb	r0, [r5, #12]
   b62a0:	f001 fd89 	bl	b7db6 <digitalWrite>
} // End PCD_ReadRegister()
   b62a4:	4620      	mov	r0, r4
   b62a6:	bd38      	pop	{r3, r4, r5, pc}

000b62a8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62aa:	460f      	mov	r7, r1
   b62ac:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b62ae:	2100      	movs	r1, #0
   b62b0:	7b00      	ldrb	r0, [r0, #12]
								) {
   b62b2:	4615      	mov	r5, r2
   b62b4:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b62b6:	f001 fd7e 	bl	b7db6 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b62ba:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b62be:	f7ff ff83 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b62c2:	4425      	add	r5, r4
   b62c4:	42ac      	cmp	r4, r5
   b62c6:	d004      	beq.n	b62d2 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b62c8:	f814 0b01 	ldrb.w	r0, [r4], #1
   b62cc:	f7ff ff7c 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b62d0:	e7f8      	b.n	b62c4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b62d2:	7b30      	ldrb	r0, [r6, #12]
   b62d4:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b62d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b62da:	f001 bd6c 	b.w	b7db6 <digitalWrite>

000b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b62de:	b570      	push	{r4, r5, r6, lr}
   b62e0:	4604      	mov	r4, r0
   b62e2:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b62e4:	7b00      	ldrb	r0, [r0, #12]
   b62e6:	2100      	movs	r1, #0
								) {
   b62e8:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b62ea:	f001 fd64 	bl	b7db6 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b62ee:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b62f2:	f7ff ff69 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b62f6:	4628      	mov	r0, r5
   b62f8:	f7ff ff66 	bl	b61c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b62fc:	7b20      	ldrb	r0, [r4, #12]
   b62fe:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6304:	f001 bd57 	b.w	b7db6 <digitalWrite>

000b6308 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6308:	b570      	push	{r4, r5, r6, lr}
   b630a:	4616      	mov	r6, r2
   b630c:	4604      	mov	r4, r0
   b630e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6310:	f7ff ffb3 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6314:	4330      	orrs	r0, r6
   b6316:	b2c2      	uxtb	r2, r0
   b6318:	4629      	mov	r1, r5
   b631a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b631c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6320:	f7ff bfdd 	b.w	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6324 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6324:	b570      	push	{r4, r5, r6, lr}
   b6326:	4616      	mov	r6, r2
   b6328:	4604      	mov	r4, r0
   b632a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b632c:	f7ff ffa5 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6330:	ea20 0006 	bic.w	r0, r0, r6
   b6334:	b2c2      	uxtb	r2, r0
   b6336:	4629      	mov	r1, r5
   b6338:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b633a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b633e:	f7ff bfce 	b.w	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6342 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b6342:	2208      	movs	r2, #8
   b6344:	2110      	movs	r1, #16
   b6346:	f7ff bfed 	b.w	b6324 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b634c:	4604      	mov	r4, r0
   b634e:	4615      	mov	r5, r2
   b6350:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6352:	2200      	movs	r2, #0
   b6354:	2102      	movs	r1, #2
					 ) {
   b6356:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b6358:	f7ff ffc1 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b635c:	2204      	movs	r2, #4
   b635e:	210a      	movs	r1, #10
   b6360:	4620      	mov	r0, r4
   b6362:	f7ff ffbc 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6366:	2280      	movs	r2, #128	; 0x80
   b6368:	2114      	movs	r1, #20
   b636a:	4620      	mov	r0, r4
   b636c:	f7ff ffcc 	bl	b6308 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b6370:	462a      	mov	r2, r5
   b6372:	463b      	mov	r3, r7
   b6374:	2112      	movs	r1, #18
   b6376:	4620      	mov	r0, r4
   b6378:	f7ff ff96 	bl	b62a8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b637c:	2203      	movs	r2, #3
   b637e:	2102      	movs	r1, #2
   b6380:	4620      	mov	r0, r4
   b6382:	f7ff ffac 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b6386:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b638a:	210a      	movs	r1, #10
   b638c:	4620      	mov	r0, r4
   b638e:	f7ff ff74 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b6392:	0743      	lsls	r3, r0, #29
   b6394:	d405      	bmi.n	b63a2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b6396:	3d01      	subs	r5, #1
   b6398:	b2ad      	uxth	r5, r5
   b639a:	2d00      	cmp	r5, #0
   b639c:	d1f5      	bne.n	b638a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b639e:	2004      	movs	r0, #4
   b63a0:	e00f      	b.n	b63c2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b63a2:	2200      	movs	r2, #0
   b63a4:	2102      	movs	r1, #2
   b63a6:	4620      	mov	r0, r4
   b63a8:	f7ff ff99 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b63ac:	2144      	movs	r1, #68	; 0x44
   b63ae:	4620      	mov	r0, r4
   b63b0:	f7ff ff63 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b63b4:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b63b6:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b63b8:	4620      	mov	r0, r4
   b63ba:	f7ff ff5e 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b63be:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b63c0:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b63c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63c4 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b63c4:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b63c6:	220f      	movs	r2, #15
   b63c8:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b63ca:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b63cc:	f7ff ff87 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b63d0:	2032      	movs	r0, #50	; 0x32
   b63d2:	f000 fe77 	bl	b70c4 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b63d6:	2102      	movs	r1, #2
   b63d8:	4620      	mov	r0, r4
   b63da:	f7ff ff4e 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b63de:	06c3      	lsls	r3, r0, #27
   b63e0:	d4f9      	bmi.n	b63d6 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b63e2:	bd10      	pop	{r4, pc}

000b63e4 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b63e4:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b63e6:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b63e8:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b63ea:	f7ff ff46 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b63ee:	f000 0303 	and.w	r3, r0, #3
   b63f2:	2b03      	cmp	r3, #3
   b63f4:	d008      	beq.n	b6408 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b63f6:	f040 0203 	orr.w	r2, r0, #3
   b63fa:	b2d2      	uxtb	r2, r2
   b63fc:	4620      	mov	r0, r4
   b63fe:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b6400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6404:	f7ff bf6b 	b.w	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b6408:	bd10      	pop	{r4, pc}

000b640a <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b640a:	b510      	push	{r4, lr}
   b640c:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b640e:	7b40      	ldrb	r0, [r0, #13]
   b6410:	f001 fcea 	bl	b7de8 <digitalRead>
   b6414:	bb48      	cbnz	r0, b646a <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b6416:	7b60      	ldrb	r0, [r4, #13]
   b6418:	2101      	movs	r1, #1
   b641a:	f001 fccc 	bl	b7db6 <digitalWrite>
		delay(50);
   b641e:	2032      	movs	r0, #50	; 0x32
   b6420:	f000 fe50 	bl	b70c4 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6424:	4620      	mov	r0, r4
   b6426:	2280      	movs	r2, #128	; 0x80
   b6428:	2154      	movs	r1, #84	; 0x54
   b642a:	f7ff ff58 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b642e:	4620      	mov	r0, r4
   b6430:	22a9      	movs	r2, #169	; 0xa9
   b6432:	2156      	movs	r1, #86	; 0x56
   b6434:	f7ff ff53 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6438:	4620      	mov	r0, r4
   b643a:	2203      	movs	r2, #3
   b643c:	2158      	movs	r1, #88	; 0x58
   b643e:	f7ff ff4e 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b6442:	4620      	mov	r0, r4
   b6444:	22e8      	movs	r2, #232	; 0xe8
   b6446:	215a      	movs	r1, #90	; 0x5a
   b6448:	f7ff ff49 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b644c:	4620      	mov	r0, r4
   b644e:	2240      	movs	r2, #64	; 0x40
   b6450:	212a      	movs	r1, #42	; 0x2a
   b6452:	f7ff ff44 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b6456:	4620      	mov	r0, r4
   b6458:	223d      	movs	r2, #61	; 0x3d
   b645a:	2122      	movs	r1, #34	; 0x22
   b645c:	f7ff ff3f 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6460:	4620      	mov	r0, r4
} // End PCD_Init()
   b6462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b6466:	f7ff bfbd 	b.w	b63e4 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b646a:	4620      	mov	r0, r4
   b646c:	f7ff ffaa 	bl	b63c4 <_ZN7MFRC5229PCD_ResetEv>
   b6470:	e7d8      	b.n	b6424 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b6472 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b6472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6476:	b089      	sub	sp, #36	; 0x24
   b6478:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b647c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b6480:	9203      	str	r2, [sp, #12]
   b6482:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b6486:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b648a:	9204      	str	r2, [sp, #16]
   b648c:	4604      	mov	r4, r0
   b648e:	468a      	mov	sl, r1
   b6490:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b6492:	f1b9 0f00 	cmp.w	r9, #0
   b6496:	d03e      	beq.n	b6516 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b6498:	f899 8000 	ldrb.w	r8, [r9]
   b649c:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b649e:	2200      	movs	r2, #0
   b64a0:	2102      	movs	r1, #2
   b64a2:	4620      	mov	r0, r4
   b64a4:	f7ff ff1b 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b64a8:	227f      	movs	r2, #127	; 0x7f
   b64aa:	2108      	movs	r1, #8
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff ff16 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b64b2:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b64b6:	2280      	movs	r2, #128	; 0x80
   b64b8:	2114      	movs	r1, #20
   b64ba:	4620      	mov	r0, r4
   b64bc:	f7ff ff24 	bl	b6308 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b64c0:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b64c4:	9b05      	ldr	r3, [sp, #20]
   b64c6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b64ca:	2112      	movs	r1, #18
   b64cc:	4620      	mov	r0, r4
   b64ce:	f7ff feeb 	bl	b62a8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b64d2:	4642      	mov	r2, r8
   b64d4:	211a      	movs	r1, #26
   b64d6:	4620      	mov	r0, r4
   b64d8:	f7ff ff01 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b64dc:	4652      	mov	r2, sl
   b64de:	2102      	movs	r1, #2
   b64e0:	4620      	mov	r0, r4
   b64e2:	f7ff fefc 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b64e6:	f1ba 0f0c 	cmp.w	sl, #12
   b64ea:	d104      	bne.n	b64f6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b64ec:	2280      	movs	r2, #128	; 0x80
   b64ee:	211a      	movs	r1, #26
   b64f0:	4620      	mov	r0, r4
   b64f2:	f7ff ff09 	bl	b6308 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b64f6:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b64fa:	2108      	movs	r1, #8
   b64fc:	4620      	mov	r0, r4
   b64fe:	f7ff febc 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b6502:	9b03      	ldr	r3, [sp, #12]
   b6504:	4218      	tst	r0, r3
   b6506:	d108      	bne.n	b651a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b6508:	07c3      	lsls	r3, r0, #31
   b650a:	d402      	bmi.n	b6512 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b650c:	f1b8 0801 	subs.w	r8, r8, #1
   b6510:	d1f3      	bne.n	b64fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b6512:	2004      	movs	r0, #4
   b6514:	e04d      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b6516:	46c8      	mov	r8, r9
   b6518:	e7c0      	b.n	b649c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b651a:	210c      	movs	r1, #12
   b651c:	4620      	mov	r0, r4
   b651e:	f7ff feac 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6522:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6526:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6528:	d146      	bne.n	b65b8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b652a:	b1dd      	cbz	r5, b6564 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b652c:	b1d6      	cbz	r6, b6564 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b652e:	2114      	movs	r1, #20
   b6530:	4620      	mov	r0, r4
   b6532:	f7ff fea2 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b6536:	7833      	ldrb	r3, [r6, #0]
   b6538:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b653a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b653c:	d33e      	bcc.n	b65bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b653e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b6540:	462b      	mov	r3, r5
   b6542:	2112      	movs	r1, #18
   b6544:	4620      	mov	r0, r4
   b6546:	f8cd b000 	str.w	fp, [sp]
   b654a:	f7ff fe47 	bl	b61dc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b654e:	2118      	movs	r1, #24
   b6550:	4620      	mov	r0, r4
   b6552:	f7ff fe92 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b6556:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b655a:	f1b9 0f00 	cmp.w	r9, #0
   b655e:	d001      	beq.n	b6564 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b6560:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b6564:	f018 0f08 	tst.w	r8, #8
   b6568:	d12a      	bne.n	b65c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b656a:	b35d      	cbz	r5, b65c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b656c:	b356      	cbz	r6, b65c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b656e:	9b04      	ldr	r3, [sp, #16]
   b6570:	b343      	cbz	r3, b65c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b6572:	7832      	ldrb	r2, [r6, #0]
   b6574:	2a01      	cmp	r2, #1
   b6576:	d103      	bne.n	b6580 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b6578:	2f04      	cmp	r7, #4
   b657a:	d125      	bne.n	b65c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b657c:	2009      	movs	r0, #9
   b657e:	e018      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b6580:	d922      	bls.n	b65c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6582:	bb0f      	cbnz	r7, b65c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b6584:	3a02      	subs	r2, #2
   b6586:	ab07      	add	r3, sp, #28
   b6588:	b2d2      	uxtb	r2, r2
   b658a:	4629      	mov	r1, r5
   b658c:	4620      	mov	r0, r4
   b658e:	f7ff fedc 	bl	b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b6592:	2801      	cmp	r0, #1
   b6594:	d10d      	bne.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b6596:	7833      	ldrb	r3, [r6, #0]
   b6598:	441d      	add	r5, r3
   b659a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b659e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b65a2:	429a      	cmp	r2, r3
   b65a4:	d110      	bne.n	b65c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b65a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b65aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b65ae:	429a      	cmp	r2, r3
   b65b0:	d10a      	bne.n	b65c8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b65b2:	b009      	add	sp, #36	; 0x24
   b65b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b65b8:	2002      	movs	r0, #2
   b65ba:	e7fa      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b65bc:	2005      	movs	r0, #5
   b65be:	e7f8      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b65c0:	2003      	movs	r0, #3
   b65c2:	e7f6      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b65c4:	2001      	movs	r0, #1
   b65c6:	e7f4      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b65c8:	2008      	movs	r0, #8
   b65ca:	e7f2      	b.n	b65b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b65cc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b65cc:	b510      	push	{r4, lr}
   b65ce:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b65d0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b65d4:	9405      	str	r4, [sp, #20]
   b65d6:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b65da:	9404      	str	r4, [sp, #16]
   b65dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b65de:	9403      	str	r4, [sp, #12]
   b65e0:	9c08      	ldr	r4, [sp, #32]
   b65e2:	9200      	str	r2, [sp, #0]
   b65e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b65e8:	2230      	movs	r2, #48	; 0x30
   b65ea:	460b      	mov	r3, r1
   b65ec:	210c      	movs	r1, #12
   b65ee:	f7ff ff40 	bl	b6472 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b65f2:	b006      	add	sp, #24
   b65f4:	bd10      	pop	{r4, pc}

000b65f6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b65f6:	b570      	push	{r4, r5, r6, lr}
   b65f8:	b088      	sub	sp, #32
   b65fa:	4606      	mov	r6, r0
   b65fc:	461c      	mov	r4, r3
   b65fe:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b6602:	4615      	mov	r5, r2
   b6604:	b31a      	cbz	r2, b664e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b6606:	781b      	ldrb	r3, [r3, #0]
   b6608:	2b01      	cmp	r3, #1
   b660a:	d920      	bls.n	b664e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b660c:	2280      	movs	r2, #128	; 0x80
   b660e:	211c      	movs	r1, #28
   b6610:	f7ff fe88 	bl	b6324 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6614:	2307      	movs	r3, #7
   b6616:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b661a:	2300      	movs	r3, #0
   b661c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6620:	f10d 031f 	add.w	r3, sp, #31
   b6624:	e9cd 4300 	strd	r4, r3, [sp]
   b6628:	2201      	movs	r2, #1
   b662a:	462b      	mov	r3, r5
   b662c:	f10d 0117 	add.w	r1, sp, #23
   b6630:	4630      	mov	r0, r6
   b6632:	f7ff ffcb 	bl	b65cc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6636:	2801      	cmp	r0, #1
   b6638:	d107      	bne.n	b664a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b663a:	7823      	ldrb	r3, [r4, #0]
   b663c:	2b02      	cmp	r3, #2
   b663e:	d108      	bne.n	b6652 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b6640:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b6644:	2b00      	cmp	r3, #0
   b6646:	bf18      	it	ne
   b6648:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b664a:	b008      	add	sp, #32
   b664c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b664e:	2005      	movs	r0, #5
   b6650:	e7fb      	b.n	b664a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b6652:	2002      	movs	r0, #2
   b6654:	e7f9      	b.n	b664a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b6656 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b6656:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b6658:	460a      	mov	r2, r1
   b665a:	2126      	movs	r1, #38	; 0x26
   b665c:	f7ff bfcb 	b.w	b65f6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b6660 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b6660:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b6662:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b6664:	f10d 0203 	add.w	r2, sp, #3
   b6668:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b666a:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b666e:	f7ff fff2 	bl	b6656 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b6672:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b6676:	1e43      	subs	r3, r0, #1
   b6678:	4258      	negs	r0, r3
   b667a:	4158      	adcs	r0, r3
   b667c:	b003      	add	sp, #12
   b667e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6682 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b6682:	b570      	push	{r4, r5, r6, lr}
   b6684:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b6686:	2350      	movs	r3, #80	; 0x50
   b6688:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b668c:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b668e:	f10d 0316 	add.w	r3, sp, #22
   b6692:	2202      	movs	r2, #2
   b6694:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b6696:	4606      	mov	r6, r0
	buffer[1] = 0;
   b6698:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b669c:	f7ff fe55 	bl	b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b66a0:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b66a2:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b66a4:	d10f      	bne.n	b66c6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b66a6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b66aa:	e9cd 4400 	strd	r4, r4, [sp]
   b66ae:	4623      	mov	r3, r4
   b66b0:	2204      	movs	r2, #4
   b66b2:	a905      	add	r1, sp, #20
   b66b4:	4630      	mov	r0, r6
   b66b6:	f7ff ff89 	bl	b65cc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b66ba:	2804      	cmp	r0, #4
   b66bc:	d003      	beq.n	b66c6 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b66be:	2801      	cmp	r0, #1
   b66c0:	bf14      	ite	ne
   b66c2:	4605      	movne	r5, r0
   b66c4:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b66c6:	4628      	mov	r0, r5
   b66c8:	b006      	add	sp, #24
   b66ca:	bd70      	pop	{r4, r5, r6, pc}

000b66cc <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b66cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b66ce:	4606      	mov	r6, r0
   b66d0:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b66d2:	4614      	mov	r4, r2
   b66d4:	b1ca      	cbz	r2, b670a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b66d6:	781b      	ldrb	r3, [r3, #0]
   b66d8:	2b11      	cmp	r3, #17
   b66da:	d916      	bls.n	b670a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b66dc:	2330      	movs	r3, #48	; 0x30
   b66de:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b66e0:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b66e2:	1c93      	adds	r3, r2, #2
   b66e4:	4621      	mov	r1, r4
   b66e6:	2202      	movs	r2, #2
   b66e8:	f7ff fe2f 	bl	b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b66ec:	2801      	cmp	r0, #1
   b66ee:	d10a      	bne.n	b6706 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b66f0:	2300      	movs	r3, #0
   b66f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b66f6:	9003      	str	r0, [sp, #12]
   b66f8:	9500      	str	r5, [sp, #0]
   b66fa:	4623      	mov	r3, r4
   b66fc:	2204      	movs	r2, #4
   b66fe:	4621      	mov	r1, r4
   b6700:	4630      	mov	r0, r6
   b6702:	f7ff ff63 	bl	b65cc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b6706:	b004      	add	sp, #16
   b6708:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b670a:	2005      	movs	r0, #5
   b670c:	e7fb      	b.n	b6706 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b670e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b670e:	b510      	push	{r4, lr}
   b6710:	b08a      	sub	sp, #40	; 0x28
   b6712:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6714:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6718:	681a      	ldr	r2, [r3, #0]
   b671a:	889b      	ldrh	r3, [r3, #4]
   b671c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6720:	7863      	ldrb	r3, [r4, #1]
   b6722:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6726:	78a3      	ldrb	r3, [r4, #2]
   b6728:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b672c:	78e3      	ldrb	r3, [r4, #3]
   b672e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6732:	7923      	ldrb	r3, [r4, #4]
   b6734:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6738:	2300      	movs	r3, #0
   b673a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b673e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6742:	9301      	str	r3, [sp, #4]
   b6744:	230c      	movs	r3, #12
	sendData[0] = command;
   b6746:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b674a:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b674e:	9300      	str	r3, [sp, #0]
   b6750:	2210      	movs	r2, #16
   b6752:	ab07      	add	r3, sp, #28
   b6754:	210e      	movs	r1, #14
   b6756:	f7ff fe8c 	bl	b6472 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b675a:	b00a      	add	sp, #40	; 0x28
   b675c:	bd10      	pop	{r4, pc}

000b675e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b675e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b6762:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b6764:	b08b      	sub	sp, #44	; 0x2c
   b6766:	4682      	mov	sl, r0
   b6768:	460f      	mov	r7, r1
   b676a:	4690      	mov	r8, r2
	if (validBits > 80) {
   b676c:	f200 8140 	bhi.w	b69f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6770:	2280      	movs	r2, #128	; 0x80
   b6772:	211c      	movs	r1, #28
   b6774:	f7ff fdd6 	bl	b6324 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6778:	2393      	movs	r3, #147	; 0x93
   b677a:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b677e:	f1b8 0f00 	cmp.w	r8, #0
   b6782:	f000 80bc 	beq.w	b68fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b6786:	783c      	ldrb	r4, [r7, #0]
   b6788:	2c04      	cmp	r4, #4
   b678a:	bf94      	ite	ls
   b678c:	2300      	movls	r3, #0
   b678e:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6790:	2501      	movs	r5, #1
   b6792:	2600      	movs	r6, #0
   b6794:	e00b      	b.n	b67ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b6796:	2395      	movs	r3, #149	; 0x95
   b6798:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b679c:	f1b8 0f00 	cmp.w	r8, #0
   b67a0:	f000 80af 	beq.w	b6902 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b67a4:	783c      	ldrb	r4, [r7, #0]
   b67a6:	2c07      	cmp	r4, #7
   b67a8:	bf94      	ite	ls
   b67aa:	2300      	movls	r3, #0
   b67ac:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b67ae:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b67b2:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b67b4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b67b8:	2b00      	cmp	r3, #0
   b67ba:	f000 80a4 	beq.w	b6906 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b67be:	2288      	movs	r2, #136	; 0x88
   b67c0:	f88d 201e 	strb.w	r2, [sp, #30]
   b67c4:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b67c6:	f014 0207 	ands.w	r2, r4, #7
   b67ca:	bf18      	it	ne
   b67cc:	2201      	movne	r2, #1
   b67ce:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b67d2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b67d6:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b67d8:	d01d      	beq.n	b6816 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b67da:	2b00      	cmp	r3, #0
   b67dc:	bf14      	ite	ne
   b67de:	f04f 0903 	movne.w	r9, #3
   b67e2:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b67e6:	f106 0c01 	add.w	ip, r6, #1
   b67ea:	4591      	cmp	r9, r2
   b67ec:	bf94      	ite	ls
   b67ee:	eb01 0e09 	addls.w	lr, r1, r9
   b67f2:	eb01 0e02 	addhi.w	lr, r1, r2
   b67f6:	fa57 fc8c 	uxtab	ip, r7, ip
   b67fa:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b67fe:	460a      	mov	r2, r1
   b6800:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6804:	3101      	adds	r1, #1
   b6806:	b2c9      	uxtb	r1, r1
   b6808:	445a      	add	r2, fp
   b680a:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b680e:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6812:	4571      	cmp	r1, lr
   b6814:	d1f3      	bne.n	b67fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6816:	b10b      	cbz	r3, b681c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6818:	3008      	adds	r0, #8
   b681a:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b681c:	2c1f      	cmp	r4, #31
   b681e:	dd74      	ble.n	b690a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6820:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6824:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6828:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b682c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6830:	4053      	eors	r3, r2
   b6832:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6836:	4053      	eors	r3, r2
   b6838:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b683c:	4053      	eors	r3, r2
   b683e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6842:	2207      	movs	r2, #7
   b6844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b6848:	a907      	add	r1, sp, #28
   b684a:	4650      	mov	r0, sl
   b684c:	f7ff fd7d 	bl	b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b6850:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b6852:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b6854:	f040 80c8 	bne.w	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6858:	2300      	movs	r3, #0
   b685a:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b685e:	2303      	movs	r3, #3
   b6860:	f88d 301b 	strb.w	r3, [sp, #27]
   b6864:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b6866:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b686a:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b686e:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6872:	9305      	str	r3, [sp, #20]
   b6874:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6878:	b2d2      	uxtb	r2, r2
   b687a:	211a      	movs	r1, #26
   b687c:	4650      	mov	r0, sl
   b687e:	f7ff fd2e 	bl	b62de <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6882:	9b05      	ldr	r3, [sp, #20]
   b6884:	9302      	str	r3, [sp, #8]
   b6886:	f10d 031a 	add.w	r3, sp, #26
   b688a:	2200      	movs	r2, #0
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	f10d 031b 	add.w	r3, sp, #27
   b6892:	9203      	str	r2, [sp, #12]
   b6894:	9300      	str	r3, [sp, #0]
   b6896:	464a      	mov	r2, r9
   b6898:	465b      	mov	r3, fp
   b689a:	a907      	add	r1, sp, #28
   b689c:	4650      	mov	r0, sl
   b689e:	f7ff fe95 	bl	b65cc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b68a2:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b68a4:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b68a6:	d14c      	bne.n	b6942 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b68a8:	211c      	movs	r1, #28
   b68aa:	4650      	mov	r0, sl
   b68ac:	f7ff fce5 	bl	b627a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b68b0:	0681      	lsls	r1, r0, #26
   b68b2:	f100 8099 	bmi.w	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b68b6:	f010 001f 	ands.w	r0, r0, #31
   b68ba:	bf08      	it	eq
   b68bc:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b68be:	42a0      	cmp	r0, r4
   b68c0:	f340 8087 	ble.w	b69d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b68c4:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b68c6:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b68ca:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b68cc:	f013 0307 	ands.w	r3, r3, #7
   b68d0:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b68d4:	bf18      	it	ne
   b68d6:	2301      	movne	r3, #1
   b68d8:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b68da:	4418      	add	r0, r3
   b68dc:	ab0a      	add	r3, sp, #40	; 0x28
   b68de:	4418      	add	r0, r3
   b68e0:	2301      	movs	r3, #1
   b68e2:	fa03 f202 	lsl.w	r2, r3, r2
   b68e6:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b68ea:	4313      	orrs	r3, r2
   b68ec:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b68f0:	e794      	b.n	b681c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b68f2:	2397      	movs	r3, #151	; 0x97
   b68f4:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b68f8:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b68fa:	4623      	mov	r3, r4
				break;
   b68fc:	e757      	b.n	b67ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b68fe:	4643      	mov	r3, r8
   b6900:	e746      	b.n	b6790 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6902:	4643      	mov	r3, r8
   b6904:	e753      	b.n	b67ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b6906:	2102      	movs	r1, #2
   b6908:	e75d      	b.n	b67c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b690a:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b690c:	3302      	adds	r3, #2
   b690e:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6910:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6914:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6918:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b691c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6920:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6924:	bf18      	it	ne
   b6926:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b692a:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b692c:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b692e:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6932:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6936:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b693a:	f88d 301b 	strb.w	r3, [sp, #27]
   b693e:	9404      	str	r4, [sp, #16]
   b6940:	e795      	b.n	b686e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6942:	2801      	cmp	r0, #1
   b6944:	d150      	bne.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6946:	9b04      	ldr	r3, [sp, #16]
   b6948:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b694a:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b694e:	f77f af67 	ble.w	b6820 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6952:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6956:	2b88      	cmp	r3, #136	; 0x88
   b6958:	d13e      	bne.n	b69d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b695a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b695c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b695e:	3601      	adds	r6, #1
   b6960:	441a      	add	r2, r3
   b6962:	fa57 f686 	uxtab	r6, r7, r6
   b6966:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6968:	4619      	mov	r1, r3
   b696a:	a80a      	add	r0, sp, #40	; 0x28
   b696c:	3301      	adds	r3, #1
   b696e:	4401      	add	r1, r0
   b6970:	b2db      	uxtb	r3, r3
   b6972:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6976:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b697a:	4293      	cmp	r3, r2
   b697c:	d1f4      	bne.n	b6968 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b697e:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6982:	2e03      	cmp	r6, #3
   b6984:	d137      	bne.n	b69f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6986:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b698a:	bba4      	cbnz	r4, b69f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b698c:	f10d 031e 	add.w	r3, sp, #30
   b6990:	2201      	movs	r2, #1
   b6992:	4659      	mov	r1, fp
   b6994:	4650      	mov	r0, sl
   b6996:	f7ff fcd8 	bl	b634a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b699a:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b699c:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b699e:	d123      	bne.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b69a0:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b69a4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b69a8:	429a      	cmp	r2, r3
   b69aa:	d127      	bne.n	b69fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b69ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b69b0:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b69b4:	429a      	cmp	r2, r3
   b69b6:	d121      	bne.n	b69fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b69b8:	f89b 3000 	ldrb.w	r3, [fp]
   b69bc:	075a      	lsls	r2, r3, #29
   b69be:	d50e      	bpl.n	b69de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b69c0:	3501      	adds	r5, #1
   b69c2:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b69c4:	2d03      	cmp	r5, #3
   b69c6:	d094      	beq.n	b68f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b69c8:	2d04      	cmp	r5, #4
   b69ca:	d002      	beq.n	b69d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b69cc:	2d02      	cmp	r5, #2
   b69ce:	f43f aee2 	beq.w	b6796 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b69d2:	f04f 0906 	mov.w	r9, #6
   b69d6:	e007      	b.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b69d8:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b69da:	2204      	movs	r2, #4
   b69dc:	e7bf      	b.n	b695e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b69de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b69e2:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b69e4:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b69e6:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b69e8:	4648      	mov	r0, r9
   b69ea:	b00b      	add	sp, #44	; 0x2c
   b69ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b69f0:	f04f 0907 	mov.w	r9, #7
   b69f4:	e7f8      	b.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b69f6:	f04f 0902 	mov.w	r9, #2
   b69fa:	e7f5      	b.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b69fc:	f04f 0908 	mov.w	r9, #8
   b6a00:	e7f2      	b.n	b69e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b6a02 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b6a02:	b508      	push	{r3, lr}
   b6a04:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6a06:	2200      	movs	r2, #0
   b6a08:	f7ff fea9 	bl	b675e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6a0c:	1e43      	subs	r3, r0, #1
   b6a0e:	4258      	negs	r0, r3
   b6a10:	4158      	adcs	r0, r3
   b6a12:	bd08      	pop	{r3, pc}

000b6a14 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b6a14:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b6a16:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b6a18:	2301      	movs	r3, #1
	_pin = pin;
   b6a1a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b6a1c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b6a1e:	7403      	strb	r3, [r0, #16]
}
   b6a20:	bd10      	pop	{r4, pc}

000b6a22 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b6a22:	b510      	push	{r4, lr}
   b6a24:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b6a26:	2100      	movs	r1, #0
   b6a28:	7980      	ldrb	r0, [r0, #6]
   b6a2a:	f001 f9b3 	bl	b7d94 <pinMode>
	digitalWrite(_pin, HIGH);
   b6a2e:	79a0      	ldrb	r0, [r4, #6]
   b6a30:	2101      	movs	r1, #1
   b6a32:	f001 f9c0 	bl	b7db6 <digitalWrite>
	_lastreadtime = 0;
   b6a36:	2300      	movs	r3, #0
   b6a38:	60e3      	str	r3, [r4, #12]
}
   b6a3a:	bd10      	pop	{r4, pc}

000b6a3c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b6a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6a40:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6a42:	f000 f8eb 	bl	b6c1c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b6a46:	68e3      	ldr	r3, [r4, #12]
   b6a48:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b6a4a:	bf84      	itt	hi
   b6a4c:	2300      	movhi	r3, #0
   b6a4e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b6a50:	7c23      	ldrb	r3, [r4, #16]
   b6a52:	b923      	cbnz	r3, b6a5e <_ZN3DHT4readEv+0x22>
   b6a54:	68e3      	ldr	r3, [r4, #12]
   b6a56:	1ac0      	subs	r0, r0, r3
   b6a58:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6a5c:	d367      	bcc.n	b6b2e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b6a5e:	2500      	movs	r5, #0
   b6a60:	7425      	strb	r5, [r4, #16]
   b6a62:	f000 f8db 	bl	b6c1c <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b6a66:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b6a68:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6a6a:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b6a6c:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6a6e:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b6a70:	f001 f9a1 	bl	b7db6 <digitalWrite>
	delay(250);
   b6a74:	20fa      	movs	r0, #250	; 0xfa
   b6a76:	f000 fb25 	bl	b70c4 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b6a7a:	79a0      	ldrb	r0, [r4, #6]
   b6a7c:	2101      	movs	r1, #1
   b6a7e:	f001 f989 	bl	b7d94 <pinMode>
	digitalWrite(_pin, LOW);
   b6a82:	4629      	mov	r1, r5
   b6a84:	79a0      	ldrb	r0, [r4, #6]
   b6a86:	f001 f996 	bl	b7db6 <digitalWrite>
	delay(20);
   b6a8a:	2014      	movs	r0, #20
   b6a8c:	f000 fb1a 	bl	b70c4 <delay>
	noInterrupts();
   b6a90:	f000 fbd2 	bl	b7238 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b6a94:	2101      	movs	r1, #1
   b6a96:	79a0      	ldrb	r0, [r4, #6]
   b6a98:	f001 f98d 	bl	b7db6 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6a9c:	2028      	movs	r0, #40	; 0x28
   b6a9e:	f000 f8b5 	bl	b6c0c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b6aa2:	79a0      	ldrb	r0, [r4, #6]
   b6aa4:	4629      	mov	r1, r5
   b6aa6:	f001 f975 	bl	b7d94 <pinMode>
	uint8_t j = 0, i;
   b6aaa:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b6aac:	2701      	movs	r7, #1
   b6aae:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b6ab2:	79a0      	ldrb	r0, [r4, #6]
   b6ab4:	f001 f998 	bl	b7de8 <digitalRead>
   b6ab8:	42b8      	cmp	r0, r7
   b6aba:	fa5f f988 	uxtb.w	r9, r8
   b6abe:	d108      	bne.n	b6ad2 <_ZN3DHT4readEv+0x96>
   b6ac0:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b6ac2:	f108 0801 	add.w	r8, r8, #1
   b6ac6:	f000 f8a1 	bl	b6c0c <HAL_Delay_Microseconds>
   b6aca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6ace:	d1f0      	bne.n	b6ab2 <_ZN3DHT4readEv+0x76>
   b6ad0:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b6ad2:	79a0      	ldrb	r0, [r4, #6]
   b6ad4:	f001 f988 	bl	b7de8 <digitalRead>

		if (counter == 255) break;
   b6ad8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b6adc:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b6ade:	d014      	beq.n	b6b0a <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b6ae0:	2d03      	cmp	r5, #3
   b6ae2:	d90e      	bls.n	b6b02 <_ZN3DHT4readEv+0xc6>
   b6ae4:	07ea      	lsls	r2, r5, #31
   b6ae6:	d40c      	bmi.n	b6b02 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b6ae8:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b6aea:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b6aec:	5ca3      	ldrb	r3, [r4, r2]
   b6aee:	005b      	lsls	r3, r3, #1
   b6af0:	b2db      	uxtb	r3, r3
   b6af2:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b6af4:	7a21      	ldrb	r1, [r4, #8]
   b6af6:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b6af8:	bf3c      	itt	cc
   b6afa:	f043 0301 	orrcc.w	r3, r3, #1
   b6afe:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b6b00:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b6b02:	3501      	adds	r5, #1
   b6b04:	b2ed      	uxtb	r5, r5
   b6b06:	2d55      	cmp	r5, #85	; 0x55
   b6b08:	d1d1      	bne.n	b6aae <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b6b0a:	f000 fb97 	bl	b723c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b6b0e:	2e27      	cmp	r6, #39	; 0x27
   b6b10:	d90f      	bls.n	b6b32 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b6b12:	7863      	ldrb	r3, [r4, #1]
   b6b14:	7820      	ldrb	r0, [r4, #0]
   b6b16:	4418      	add	r0, r3
   b6b18:	78a3      	ldrb	r3, [r4, #2]
   b6b1a:	4418      	add	r0, r3
   b6b1c:	78e3      	ldrb	r3, [r4, #3]
   b6b1e:	4418      	add	r0, r3
   b6b20:	7923      	ldrb	r3, [r4, #4]
   b6b22:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b6b24:	1ac3      	subs	r3, r0, r3
   b6b26:	4258      	negs	r0, r3
   b6b28:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b6b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b6b2e:	2001      	movs	r0, #1
   b6b30:	e7fb      	b.n	b6b2a <_ZN3DHT4readEv+0xee>
	return false;
   b6b32:	2000      	movs	r0, #0
   b6b34:	e7f9      	b.n	b6b2a <_ZN3DHT4readEv+0xee>
	...

000b6b38 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b6b38:	b510      	push	{r4, lr}
   b6b3a:	4604      	mov	r4, r0
	if (read()) {
   b6b3c:	f7ff ff7e 	bl	b6a3c <_ZN3DHT4readEv>
   b6b40:	b320      	cbz	r0, b6b8c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b6b42:	79e3      	ldrb	r3, [r4, #7]
   b6b44:	2b0b      	cmp	r3, #11
   b6b46:	d01b      	beq.n	b6b80 <_ZN3DHT15readTemperatureEv+0x48>
   b6b48:	3b15      	subs	r3, #21
   b6b4a:	2b01      	cmp	r3, #1
   b6b4c:	d81e      	bhi.n	b6b8c <_ZN3DHT15readTemperatureEv+0x54>
   b6b4e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b6b50:	eddf 6a10 	vldr	s13, [pc, #64]	; b6b94 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b6b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b6b58:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b6b5c:	78e2      	ldrb	r2, [r4, #3]
   b6b5e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b6b62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b6b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b6b6a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b6b6c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b6b70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b6b74:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b6b78:	d507      	bpl.n	b6b8a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b6b7a:	eeb1 0a40 	vneg.f32	s0, s0
   b6b7e:	e004      	b.n	b6b8a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b6b80:	78a3      	ldrb	r3, [r4, #2]
   b6b82:	ee00 3a10 	vmov	s0, r3
   b6b86:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b6b8a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b6b8c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6b98 <_ZN3DHT15readTemperatureEv+0x60>
   b6b90:	e7fb      	b.n	b6b8a <_ZN3DHT15readTemperatureEv+0x52>
   b6b92:	bf00      	nop
   b6b94:	43800000 	.word	0x43800000
   b6b98:	7fc00000 	.word	0x7fc00000

000b6b9c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b6b9c:	f7ff bfcc 	b.w	b6b38 <_ZN3DHT15readTemperatureEv>

000b6ba0 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b6ba0:	6001      	str	r1, [r0, #0]
}
   b6ba2:	4770      	bx	lr

000b6ba4 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6ba4:	b510      	push	{r4, lr}
   b6ba6:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6ba8:	2101      	movs	r1, #1
   b6baa:	8800      	ldrh	r0, [r0, #0]
   b6bac:	f001 f8f2 	bl	b7d94 <pinMode>
	digitalWrite(_pin, LOW);
   b6bb0:	8820      	ldrh	r0, [r4, #0]
   b6bb2:	2100      	movs	r1, #0
   b6bb4:	f001 f8ff 	bl	b7db6 <digitalWrite>
   b6bb8:	2002      	movs	r0, #2
   b6bba:	f000 f827 	bl	b6c0c <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b6bbe:	8820      	ldrh	r0, [r4, #0]
   b6bc0:	2101      	movs	r1, #1
   b6bc2:	f001 f8f8 	bl	b7db6 <digitalWrite>
   b6bc6:	2005      	movs	r0, #5
   b6bc8:	f000 f820 	bl	b6c0c <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b6bcc:	8820      	ldrh	r0, [r4, #0]
   b6bce:	2100      	movs	r1, #0
   b6bd0:	f001 f8f1 	bl	b7db6 <digitalWrite>
	pinMode(_pin,INPUT);
   b6bd4:	8820      	ldrh	r0, [r4, #0]
   b6bd6:	2100      	movs	r1, #0
   b6bd8:	f001 f8dc 	bl	b7d94 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b6bdc:	8820      	ldrh	r0, [r4, #0]
   b6bde:	2101      	movs	r1, #1
   b6be0:	f001 f92c 	bl	b7e3c <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b6be4:	233a      	movs	r3, #58	; 0x3a
   b6be6:	fb90 f0f3 	sdiv	r0, r0, r3
   b6bea:	bd10      	pop	{r4, pc}

000b6bec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <os_mutex_recursive_create+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030248 	.word	0x00030248

000b6bfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <HAL_RNG_GetRandomNumber+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	685b      	ldr	r3, [r3, #4]
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030218 	.word	0x00030218

000b6c0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <HAL_Delay_Microseconds+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	68db      	ldr	r3, [r3, #12]
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030218 	.word	0x00030218

000b6c1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	695b      	ldr	r3, [r3, #20]
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030218 	.word	0x00030218

000b6c2c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <HAL_Validate_Pin_Function+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	685b      	ldr	r3, [r3, #4]
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	0003022c 	.word	0x0003022c

000b6c3c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <HAL_Pin_Mode+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	689b      	ldr	r3, [r3, #8]
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	0003022c 	.word	0x0003022c

000b6c4c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <HAL_Get_Pin_Mode+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	68db      	ldr	r3, [r3, #12]
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	0003022c 	.word	0x0003022c

000b6c5c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <HAL_GPIO_Write+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	691b      	ldr	r3, [r3, #16]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	0003022c 	.word	0x0003022c

000b6c6c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <HAL_GPIO_Read+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	695b      	ldr	r3, [r3, #20]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	0003022c 	.word	0x0003022c

000b6c7c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <HAL_Interrupts_Enable_All+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	6a1b      	ldr	r3, [r3, #32]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	0003022c 	.word	0x0003022c

000b6c8c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <HAL_Interrupts_Disable_All+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	0003022c 	.word	0x0003022c

000b6c9c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <hal_adc_read+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	0003022c 	.word	0x0003022c

000b6cac <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <HAL_Pulse_In+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	0003022c 	.word	0x0003022c

000b6cbc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <hal_i2c_set_speed+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	681b      	ldr	r3, [r3, #0]
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030228 	.word	0x00030228

000b6ccc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <hal_i2c_begin+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	68db      	ldr	r3, [r3, #12]
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030228 	.word	0x00030228

000b6cdc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <hal_i2c_begin_transmission+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	699b      	ldr	r3, [r3, #24]
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030228 	.word	0x00030228

000b6cec <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <hal_i2c_end_transmission+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	69db      	ldr	r3, [r3, #28]
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030228 	.word	0x00030228

000b6cfc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <hal_i2c_write+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	6a1b      	ldr	r3, [r3, #32]
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030228 	.word	0x00030228

000b6d0c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <hal_i2c_available+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	00030228 	.word	0x00030228

000b6d1c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <hal_i2c_read+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	00030228 	.word	0x00030228

000b6d2c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <hal_i2c_peek+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030228 	.word	0x00030228

000b6d3c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <hal_i2c_flush+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	00030228 	.word	0x00030228

000b6d4c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <hal_i2c_is_enabled+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030228 	.word	0x00030228

000b6d5c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <hal_i2c_init+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030228 	.word	0x00030228

000b6d6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <inet_inet_ntop+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	695b      	ldr	r3, [r3, #20]
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	00030264 	.word	0x00030264

000b6d7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <netdb_freeaddrinfo+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	689b      	ldr	r3, [r3, #8]
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	00030268 	.word	0x00030268

000b6d8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <netdb_getaddrinfo+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	68db      	ldr	r3, [r3, #12]
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	00030268 	.word	0x00030268

000b6d9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <hal_spi_begin+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	681b      	ldr	r3, [r3, #0]
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	00030230 	.word	0x00030230

000b6dac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <hal_spi_transfer+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	695b      	ldr	r3, [r3, #20]
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	00030230 	.word	0x00030230

000b6dbc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <hal_spi_init+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	69db      	ldr	r3, [r3, #28]
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	00030230 	.word	0x00030230

000b6dcc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <hal_spi_is_enabled+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	6a1b      	ldr	r3, [r3, #32]
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	00030230 	.word	0x00030230

000b6ddc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <hal_spi_info+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	00030230 	.word	0x00030230

000b6dec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <hal_spi_set_settings+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	00030230 	.word	0x00030230

000b6dfc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <hal_spi_acquire+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	00030230 	.word	0x00030230

000b6e0c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <hal_spi_release+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	00030230 	.word	0x00030230

000b6e1c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <hal_usart_write+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	68db      	ldr	r3, [r3, #12]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	0003023c 	.word	0x0003023c

000b6e2c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <hal_usart_available+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	691b      	ldr	r3, [r3, #16]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	0003023c 	.word	0x0003023c

000b6e3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <hal_usart_read+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	695b      	ldr	r3, [r3, #20]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003023c 	.word	0x0003023c

000b6e4c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <hal_usart_peek+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	699b      	ldr	r3, [r3, #24]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	0003023c 	.word	0x0003023c

000b6e5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <hal_usart_flush+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	69db      	ldr	r3, [r3, #28]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	0003023c 	.word	0x0003023c

000b6e6c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <hal_usart_is_enabled+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6a1b      	ldr	r3, [r3, #32]
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	0003023c 	.word	0x0003023c

000b6e7c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <hal_usart_available_data_for_write+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	0003023c 	.word	0x0003023c

000b6e8c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <hal_usart_init_ex+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	0003023c 	.word	0x0003023c

000b6e9c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <HAL_USB_USART_Init+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	681b      	ldr	r3, [r3, #0]
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003024c 	.word	0x0003024c

000b6eac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <HAL_USB_USART_Begin+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	685b      	ldr	r3, [r3, #4]
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003024c 	.word	0x0003024c

000b6ebc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <HAL_USB_USART_Available_Data+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	691b      	ldr	r3, [r3, #16]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	0003024c 	.word	0x0003024c

000b6ecc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	695b      	ldr	r3, [r3, #20]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	0003024c 	.word	0x0003024c

000b6edc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <HAL_USB_USART_Receive_Data+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	699b      	ldr	r3, [r3, #24]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	0003024c 	.word	0x0003024c

000b6eec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <HAL_USB_USART_Send_Data+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	69db      	ldr	r3, [r3, #28]
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	0003024c 	.word	0x0003024c

000b6efc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <HAL_USB_USART_Flush_Data+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	6a1b      	ldr	r3, [r3, #32]
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	0003024c 	.word	0x0003024c

000b6f0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <panic_+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030260 	.word	0x00030260

000b6f1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <set_system_mode+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	685b      	ldr	r3, [r3, #4]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030220 	.word	0x00030220

000b6f2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <system_delay_ms+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	695b      	ldr	r3, [r3, #20]
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030220 	.word	0x00030220

000b6f3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b03      	ldr	r3, [pc, #12]	; (b6f4c <system_ctrl_set_app_request_handler+0x10>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6f46:	9301      	str	r3, [sp, #4]
   b6f48:	bd08      	pop	{r3, pc}
   b6f4a:	0000      	.short	0x0000
   b6f4c:	00030220 	.word	0x00030220

000b6f50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b03      	ldr	r3, [pc, #12]	; (b6f60 <system_ctrl_set_result+0x10>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6f5a:	9301      	str	r3, [sp, #4]
   b6f5c:	bd08      	pop	{r3, pc}
   b6f5e:	0000      	.short	0x0000
   b6f60:	00030220 	.word	0x00030220

000b6f64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	00030244 	.word	0x00030244

000b6f74 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <spark_cloud_disconnect+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	00030244 	.word	0x00030244

000b6f84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <network_connect+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	685b      	ldr	r3, [r3, #4]
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	00030240 	.word	0x00030240

000b6f94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <network_connecting+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	689b      	ldr	r3, [r3, #8]
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	00030240 	.word	0x00030240

000b6fa4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <network_disconnect+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	68db      	ldr	r3, [r3, #12]
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	00030240 	.word	0x00030240

000b6fb4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <network_ready+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	691b      	ldr	r3, [r3, #16]
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	00030240 	.word	0x00030240

000b6fc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fc4:	b508      	push	{r3, lr}
   b6fc6:	4b02      	ldr	r3, [pc, #8]	; (b6fd0 <network_on+0xc>)
   b6fc8:	681b      	ldr	r3, [r3, #0]
   b6fca:	695b      	ldr	r3, [r3, #20]
   b6fcc:	9301      	str	r3, [sp, #4]
   b6fce:	bd08      	pop	{r3, pc}
   b6fd0:	00030240 	.word	0x00030240

000b6fd4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fd4:	b508      	push	{r3, lr}
   b6fd6:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <network_off+0xc>)
   b6fd8:	681b      	ldr	r3, [r3, #0]
   b6fda:	699b      	ldr	r3, [r3, #24]
   b6fdc:	9301      	str	r3, [sp, #4]
   b6fde:	bd08      	pop	{r3, pc}
   b6fe0:	00030240 	.word	0x00030240

000b6fe4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	4b02      	ldr	r3, [pc, #8]	; (b6ff0 <network_listen+0xc>)
   b6fe8:	681b      	ldr	r3, [r3, #0]
   b6fea:	69db      	ldr	r3, [r3, #28]
   b6fec:	9301      	str	r3, [sp, #4]
   b6fee:	bd08      	pop	{r3, pc}
   b6ff0:	00030240 	.word	0x00030240

000b6ff4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ff4:	b508      	push	{r3, lr}
   b6ff6:	4b02      	ldr	r3, [pc, #8]	; (b7000 <network_listening+0xc>)
   b6ff8:	681b      	ldr	r3, [r3, #0]
   b6ffa:	6a1b      	ldr	r3, [r3, #32]
   b6ffc:	9301      	str	r3, [sp, #4]
   b6ffe:	bd08      	pop	{r3, pc}
   b7000:	00030240 	.word	0x00030240

000b7004 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7004:	b508      	push	{r3, lr}
   b7006:	4b02      	ldr	r3, [pc, #8]	; (b7010 <network_set_listen_timeout+0xc>)
   b7008:	681b      	ldr	r3, [r3, #0]
   b700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b700c:	9301      	str	r3, [sp, #4]
   b700e:	bd08      	pop	{r3, pc}
   b7010:	00030240 	.word	0x00030240

000b7014 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7014:	b508      	push	{r3, lr}
   b7016:	4b02      	ldr	r3, [pc, #8]	; (b7020 <network_get_listen_timeout+0xc>)
   b7018:	681b      	ldr	r3, [r3, #0]
   b701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b701c:	9301      	str	r3, [sp, #4]
   b701e:	bd08      	pop	{r3, pc}
   b7020:	00030240 	.word	0x00030240

000b7024 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7024:	b508      	push	{r3, lr}
   b7026:	4b02      	ldr	r3, [pc, #8]	; (b7030 <network_is_on+0xc>)
   b7028:	681b      	ldr	r3, [r3, #0]
   b702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b702c:	9301      	str	r3, [sp, #4]
   b702e:	bd08      	pop	{r3, pc}
   b7030:	00030240 	.word	0x00030240

000b7034 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7034:	b508      	push	{r3, lr}
   b7036:	4b02      	ldr	r3, [pc, #8]	; (b7040 <network_is_off+0xc>)
   b7038:	681b      	ldr	r3, [r3, #0]
   b703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b703c:	9301      	str	r3, [sp, #4]
   b703e:	bd08      	pop	{r3, pc}
   b7040:	00030240 	.word	0x00030240

000b7044 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7044:	b508      	push	{r3, lr}
   b7046:	4b02      	ldr	r3, [pc, #8]	; (b7050 <malloc+0xc>)
   b7048:	681b      	ldr	r3, [r3, #0]
   b704a:	681b      	ldr	r3, [r3, #0]
   b704c:	9301      	str	r3, [sp, #4]
   b704e:	bd08      	pop	{r3, pc}
   b7050:	0003021c 	.word	0x0003021c

000b7054 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7054:	b508      	push	{r3, lr}
   b7056:	4b02      	ldr	r3, [pc, #8]	; (b7060 <free+0xc>)
   b7058:	681b      	ldr	r3, [r3, #0]
   b705a:	685b      	ldr	r3, [r3, #4]
   b705c:	9301      	str	r3, [sp, #4]
   b705e:	bd08      	pop	{r3, pc}
   b7060:	0003021c 	.word	0x0003021c

000b7064 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7064:	b508      	push	{r3, lr}
   b7066:	4b02      	ldr	r3, [pc, #8]	; (b7070 <realloc+0xc>)
   b7068:	681b      	ldr	r3, [r3, #0]
   b706a:	689b      	ldr	r3, [r3, #8]
   b706c:	9301      	str	r3, [sp, #4]
   b706e:	bd08      	pop	{r3, pc}
   b7070:	0003021c 	.word	0x0003021c

000b7074 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7074:	b508      	push	{r3, lr}
   b7076:	4b02      	ldr	r3, [pc, #8]	; (b7080 <snprintf+0xc>)
   b7078:	681b      	ldr	r3, [r3, #0]
   b707a:	69db      	ldr	r3, [r3, #28]
   b707c:	9301      	str	r3, [sp, #4]
   b707e:	bd08      	pop	{r3, pc}
   b7080:	0003021c 	.word	0x0003021c

000b7084 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7084:	b508      	push	{r3, lr}
   b7086:	4b02      	ldr	r3, [pc, #8]	; (b7090 <vsnprintf+0xc>)
   b7088:	681b      	ldr	r3, [r3, #0]
   b708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b708c:	9301      	str	r3, [sp, #4]
   b708e:	bd08      	pop	{r3, pc}
   b7090:	0003021c 	.word	0x0003021c

000b7094 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7094:	b508      	push	{r3, lr}
   b7096:	4b02      	ldr	r3, [pc, #8]	; (b70a0 <_malloc_r+0xc>)
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b709c:	9301      	str	r3, [sp, #4]
   b709e:	bd08      	pop	{r3, pc}
   b70a0:	0003021c 	.word	0x0003021c

000b70a4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b70a4:	b508      	push	{r3, lr}
   b70a6:	4b02      	ldr	r3, [pc, #8]	; (b70b0 <__assert_func+0xc>)
   b70a8:	681b      	ldr	r3, [r3, #0]
   b70aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70ac:	9301      	str	r3, [sp, #4]
   b70ae:	bd08      	pop	{r3, pc}
   b70b0:	0003021c 	.word	0x0003021c

000b70b4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b70b4:	b508      	push	{r3, lr}
   b70b6:	4b02      	ldr	r3, [pc, #8]	; (b70c0 <newlib_impure_ptr_callback+0xc>)
   b70b8:	681b      	ldr	r3, [r3, #0]
   b70ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b70bc:	9301      	str	r3, [sp, #4]
   b70be:	bd08      	pop	{r3, pc}
   b70c0:	0003021c 	.word	0x0003021c

000b70c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b70c4:	2100      	movs	r1, #0
   b70c6:	f7ff bf31 	b.w	b6f2c <system_delay_ms>
	...

000b70cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b70cc:	4802      	ldr	r0, [pc, #8]	; (b70d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b70ce:	2300      	movs	r3, #0
   b70d0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b70d2:	f7ff bd8b 	b.w	b6bec <os_mutex_recursive_create>
   b70d6:	bf00      	nop
   b70d8:	2003e6c4 	.word	0x2003e6c4

000b70dc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b70dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b70de:	230c      	movs	r3, #12
   b70e0:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b70e4:	6803      	ldr	r3, [r0, #0]
   b70e6:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b70ea:	7a03      	ldrb	r3, [r0, #8]
   b70ec:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b70f0:	6843      	ldr	r3, [r0, #4]
   b70f2:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b70f4:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b70f6:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b70f8:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b70fc:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b70fe:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b7102:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7106:	f7ff ff35 	bl	b6f74 <spark_cloud_disconnect>
}
   b710a:	b005      	add	sp, #20
   b710c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7110 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7110:	2200      	movs	r2, #0
   b7112:	6840      	ldr	r0, [r0, #4]
   b7114:	4611      	mov	r1, r2
   b7116:	f7ff bf6d 	b.w	b6ff4 <network_listening>

000b711a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b711a:	2200      	movs	r2, #0
   b711c:	6840      	ldr	r0, [r0, #4]
   b711e:	4611      	mov	r1, r2
   b7120:	f7ff bf78 	b.w	b7014 <network_get_listen_timeout>

000b7124 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7124:	6840      	ldr	r0, [r0, #4]
   b7126:	2200      	movs	r2, #0
   b7128:	f7ff bf6c 	b.w	b7004 <network_set_listen_timeout>

000b712c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b712c:	6840      	ldr	r0, [r0, #4]
   b712e:	2200      	movs	r2, #0
   b7130:	f081 0101 	eor.w	r1, r1, #1
   b7134:	f7ff bf56 	b.w	b6fe4 <network_listen>

000b7138 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7138:	2300      	movs	r3, #0
   b713a:	6840      	ldr	r0, [r0, #4]
   b713c:	461a      	mov	r2, r3
   b713e:	4619      	mov	r1, r3
   b7140:	f7ff bf48 	b.w	b6fd4 <network_off>

000b7144 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7144:	2300      	movs	r3, #0
   b7146:	6840      	ldr	r0, [r0, #4]
   b7148:	461a      	mov	r2, r3
   b714a:	4619      	mov	r1, r3
   b714c:	f7ff bf3a 	b.w	b6fc4 <network_on>

000b7150 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7150:	2200      	movs	r2, #0
   b7152:	6840      	ldr	r0, [r0, #4]
   b7154:	4611      	mov	r1, r2
   b7156:	f7ff bf2d 	b.w	b6fb4 <network_ready>

000b715a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b715a:	2200      	movs	r2, #0
   b715c:	6840      	ldr	r0, [r0, #4]
   b715e:	4611      	mov	r1, r2
   b7160:	f7ff bf18 	b.w	b6f94 <network_connecting>

000b7164 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7164:	6840      	ldr	r0, [r0, #4]
   b7166:	2200      	movs	r2, #0
   b7168:	2102      	movs	r1, #2
   b716a:	f7ff bf1b 	b.w	b6fa4 <network_disconnect>

000b716e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b716e:	2300      	movs	r3, #0
   b7170:	6840      	ldr	r0, [r0, #4]
   b7172:	461a      	mov	r2, r3
   b7174:	f7ff bf06 	b.w	b6f84 <network_connect>

000b7178 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7178:	4b02      	ldr	r3, [pc, #8]	; (b7184 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b717a:	2203      	movs	r2, #3
   b717c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b717e:	4a02      	ldr	r2, [pc, #8]	; (b7188 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7180:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7182:	4770      	bx	lr
   b7184:	2003e6c8 	.word	0x2003e6c8
   b7188:	000b95f8 	.word	0x000b95f8

000b718c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b718c:	4770      	bx	lr

000b718e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7190:	4606      	mov	r6, r0
   b7192:	4615      	mov	r5, r2
   b7194:	460c      	mov	r4, r1
   b7196:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7198:	42bc      	cmp	r4, r7
   b719a:	d006      	beq.n	b71aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b719c:	6833      	ldr	r3, [r6, #0]
   b719e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b71a2:	689b      	ldr	r3, [r3, #8]
   b71a4:	4630      	mov	r0, r6
   b71a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b71a8:	e7f6      	b.n	b7198 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b71aa:	4628      	mov	r0, r5
   b71ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b71ae:	7c00      	ldrb	r0, [r0, #16]
   b71b0:	2200      	movs	r2, #0
   b71b2:	f7ff bda3 	b.w	b6cfc <hal_i2c_write>

000b71b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b71b6:	7c00      	ldrb	r0, [r0, #16]
   b71b8:	2100      	movs	r1, #0
   b71ba:	f7ff bda7 	b.w	b6d0c <hal_i2c_available>

000b71be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b71be:	7c00      	ldrb	r0, [r0, #16]
   b71c0:	2100      	movs	r1, #0
   b71c2:	f7ff bdab 	b.w	b6d1c <hal_i2c_read>

000b71c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b71c6:	7c00      	ldrb	r0, [r0, #16]
   b71c8:	2100      	movs	r1, #0
   b71ca:	f7ff bdaf 	b.w	b6d2c <hal_i2c_peek>

000b71ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b71ce:	7c00      	ldrb	r0, [r0, #16]
   b71d0:	2100      	movs	r1, #0
   b71d2:	f7ff bdb3 	b.w	b6d3c <hal_i2c_flush>

000b71d6 <_ZN7TwoWireD0Ev>:
   b71d6:	b510      	push	{r4, lr}
   b71d8:	2114      	movs	r1, #20
   b71da:	4604      	mov	r4, r0
   b71dc:	f7fc ff5b 	bl	b4096 <_ZdlPvj>
   b71e0:	4620      	mov	r0, r4
   b71e2:	bd10      	pop	{r4, pc}

000b71e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b71e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b71e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b71ea:	4604      	mov	r4, r0
   b71ec:	4608      	mov	r0, r1
   b71ee:	2100      	movs	r1, #0
   b71f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b71f4:	4b03      	ldr	r3, [pc, #12]	; (b7204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b71f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b71f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b71fa:	4611      	mov	r1, r2
   b71fc:	f7ff fdae 	bl	b6d5c <hal_i2c_init>
}
   b7200:	4620      	mov	r0, r4
   b7202:	bd10      	pop	{r4, pc}
   b7204:	000b9634 	.word	0x000b9634

000b7208 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7208:	7c00      	ldrb	r0, [r0, #16]
   b720a:	2200      	movs	r2, #0
   b720c:	f7ff bd56 	b.w	b6cbc <hal_i2c_set_speed>

000b7210 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7210:	2300      	movs	r3, #0
   b7212:	7c00      	ldrb	r0, [r0, #16]
   b7214:	461a      	mov	r2, r3
   b7216:	4619      	mov	r1, r3
   b7218:	f7ff bd58 	b.w	b6ccc <hal_i2c_begin>

000b721c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b721c:	7c00      	ldrb	r0, [r0, #16]
   b721e:	2200      	movs	r2, #0
   b7220:	f7ff bd5c 	b.w	b6cdc <hal_i2c_begin_transmission>

000b7224 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7224:	b2c9      	uxtb	r1, r1
   b7226:	f7ff bff9 	b.w	b721c <_ZN7TwoWire17beginTransmissionEh>

000b722a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b722a:	7c00      	ldrb	r0, [r0, #16]
   b722c:	2200      	movs	r2, #0
   b722e:	f7ff bd5d 	b.w	b6cec <hal_i2c_end_transmission>

000b7232 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7232:	2101      	movs	r1, #1
   b7234:	f7ff bff9 	b.w	b722a <_ZN7TwoWire15endTransmissionEh>

000b7238 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b7238:	f7ff bd28 	b.w	b6c8c <HAL_Interrupts_Disable_All>

000b723c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b723c:	f7ff bd1e 	b.w	b6c7c <HAL_Interrupts_Enable_All>

000b7240 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7240:	4770      	bx	lr

000b7242 <_ZN9IPAddressD0Ev>:
   b7242:	b510      	push	{r4, lr}
   b7244:	2118      	movs	r1, #24
   b7246:	4604      	mov	r4, r0
   b7248:	f7fc ff25 	bl	b4096 <_ZdlPvj>
   b724c:	4620      	mov	r0, r4
   b724e:	bd10      	pop	{r4, pc}

000b7250 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7250:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7252:	7d03      	ldrb	r3, [r0, #20]
   b7254:	2b06      	cmp	r3, #6
{
   b7256:	b08d      	sub	sp, #52	; 0x34
   b7258:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b725a:	f100 0704 	add.w	r7, r0, #4
   b725e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7262:	d012      	beq.n	b728a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7264:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7268:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b726c:	220a      	movs	r2, #10
   b726e:	4630      	mov	r0, r6
   b7270:	f000 f95d 	bl	b752e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7274:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7276:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7278:	d019      	beq.n	b72ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b727a:	2c00      	cmp	r4, #0
   b727c:	d0f4      	beq.n	b7268 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b727e:	212e      	movs	r1, #46	; 0x2e
   b7280:	4630      	mov	r0, r6
   b7282:	f000 f93b 	bl	b74fc <_ZN5Print5printEc>
   b7286:	4404      	add	r4, r0
   b7288:	e7ee      	b.n	b7268 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b728a:	232f      	movs	r3, #47	; 0x2f
   b728c:	466a      	mov	r2, sp
   b728e:	4639      	mov	r1, r7
   b7290:	200a      	movs	r0, #10
		buf[0] = 0;
   b7292:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7296:	f7ff fd69 	bl	b6d6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b729a:	4668      	mov	r0, sp
   b729c:	f001 f874 	bl	b8388 <strlen>
   b72a0:	6833      	ldr	r3, [r6, #0]
   b72a2:	4602      	mov	r2, r0
   b72a4:	68db      	ldr	r3, [r3, #12]
   b72a6:	4669      	mov	r1, sp
   b72a8:	4630      	mov	r0, r6
   b72aa:	4798      	blx	r3
   b72ac:	4604      	mov	r4, r0
    }
    return n;
}
   b72ae:	4620      	mov	r0, r4
   b72b0:	b00d      	add	sp, #52	; 0x34
   b72b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b72b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b72b4:	b510      	push	{r4, lr}
   b72b6:	4b05      	ldr	r3, [pc, #20]	; (b72cc <_ZN9IPAddressC1Ev+0x18>)
   b72b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b72ba:	2211      	movs	r2, #17
   b72bc:	f840 3b04 	str.w	r3, [r0], #4
   b72c0:	2100      	movs	r1, #0
   b72c2:	f001 f813 	bl	b82ec <memset>
}
   b72c6:	4620      	mov	r0, r4
   b72c8:	bd10      	pop	{r4, pc}
   b72ca:	bf00      	nop
   b72cc:	000b965c 	.word	0x000b965c

000b72d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b72d0:	4603      	mov	r3, r0
   b72d2:	4a07      	ldr	r2, [pc, #28]	; (b72f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b72d4:	b510      	push	{r4, lr}
   b72d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b72da:	f101 0210 	add.w	r2, r1, #16
   b72de:	f851 4b04 	ldr.w	r4, [r1], #4
   b72e2:	f843 4b04 	str.w	r4, [r3], #4
   b72e6:	4291      	cmp	r1, r2
   b72e8:	d1f9      	bne.n	b72de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b72ea:	780a      	ldrb	r2, [r1, #0]
   b72ec:	701a      	strb	r2, [r3, #0]
}
   b72ee:	bd10      	pop	{r4, pc}
   b72f0:	000b965c 	.word	0x000b965c

000b72f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b72f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b72f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b72fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b72fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7302:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7306:	2304      	movs	r3, #4
   b7308:	6041      	str	r1, [r0, #4]
   b730a:	7503      	strb	r3, [r0, #20]
}
   b730c:	bd10      	pop	{r4, pc}
	...

000b7310 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7310:	b507      	push	{r0, r1, r2, lr}
   b7312:	4b06      	ldr	r3, [pc, #24]	; (b732c <_ZN9IPAddressC1EPKh+0x1c>)
   b7314:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7316:	78cb      	ldrb	r3, [r1, #3]
   b7318:	9300      	str	r3, [sp, #0]
   b731a:	788b      	ldrb	r3, [r1, #2]
   b731c:	784a      	ldrb	r2, [r1, #1]
   b731e:	7809      	ldrb	r1, [r1, #0]
   b7320:	f7ff ffe8 	bl	b72f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7324:	b003      	add	sp, #12
   b7326:	f85d fb04 	ldr.w	pc, [sp], #4
   b732a:	bf00      	nop
   b732c:	000b965c 	.word	0x000b965c

000b7330 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7330:	4b01      	ldr	r3, [pc, #4]	; (b7338 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7332:	4a02      	ldr	r2, [pc, #8]	; (b733c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7334:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7336:	4770      	bx	lr
   b7338:	2003e6d0 	.word	0x2003e6d0
   b733c:	000b9668 	.word	0x000b9668

000b7340 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7340:	2300      	movs	r3, #0
   b7342:	6840      	ldr	r0, [r0, #4]
   b7344:	461a      	mov	r2, r3
   b7346:	f7ff be1d 	b.w	b6f84 <network_connect>

000b734a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b734a:	6840      	ldr	r0, [r0, #4]
   b734c:	2200      	movs	r2, #0
   b734e:	2102      	movs	r1, #2
   b7350:	f7ff be28 	b.w	b6fa4 <network_disconnect>

000b7354 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7354:	2200      	movs	r2, #0
   b7356:	6840      	ldr	r0, [r0, #4]
   b7358:	4611      	mov	r1, r2
   b735a:	f7ff be1b 	b.w	b6f94 <network_connecting>

000b735e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b735e:	2200      	movs	r2, #0
   b7360:	6840      	ldr	r0, [r0, #4]
   b7362:	4611      	mov	r1, r2
   b7364:	f7ff be26 	b.w	b6fb4 <network_ready>

000b7368 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7368:	2300      	movs	r3, #0
   b736a:	6840      	ldr	r0, [r0, #4]
   b736c:	461a      	mov	r2, r3
   b736e:	4619      	mov	r1, r3
   b7370:	f7ff be28 	b.w	b6fc4 <network_on>

000b7374 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7374:	2300      	movs	r3, #0
   b7376:	6840      	ldr	r0, [r0, #4]
   b7378:	461a      	mov	r2, r3
   b737a:	4619      	mov	r1, r3
   b737c:	f7ff be2a 	b.w	b6fd4 <network_off>

000b7380 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7380:	6840      	ldr	r0, [r0, #4]
   b7382:	2100      	movs	r1, #0
   b7384:	f7ff be4e 	b.w	b7024 <network_is_on>

000b7388 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7388:	6840      	ldr	r0, [r0, #4]
   b738a:	2100      	movs	r1, #0
   b738c:	f7ff be52 	b.w	b7034 <network_is_off>

000b7390 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7390:	6840      	ldr	r0, [r0, #4]
   b7392:	2200      	movs	r2, #0
   b7394:	f081 0101 	eor.w	r1, r1, #1
   b7398:	f7ff be24 	b.w	b6fe4 <network_listen>

000b739c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b739c:	6840      	ldr	r0, [r0, #4]
   b739e:	2200      	movs	r2, #0
   b73a0:	f7ff be30 	b.w	b7004 <network_set_listen_timeout>

000b73a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b73a4:	2200      	movs	r2, #0
   b73a6:	6840      	ldr	r0, [r0, #4]
   b73a8:	4611      	mov	r1, r2
   b73aa:	f7ff be33 	b.w	b7014 <network_get_listen_timeout>

000b73ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b73ae:	2200      	movs	r2, #0
   b73b0:	6840      	ldr	r0, [r0, #4]
   b73b2:	4611      	mov	r1, r2
   b73b4:	f7ff be1e 	b.w	b6ff4 <network_listening>

000b73b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b73b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b73bc:	b095      	sub	sp, #84	; 0x54
   b73be:	4614      	mov	r4, r2
   b73c0:	460d      	mov	r5, r1
   b73c2:	4607      	mov	r7, r0
    IPAddress addr;
   b73c4:	f7ff ff76 	bl	b72b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b73c8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b73ca:	221c      	movs	r2, #28
   b73cc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b73ce:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b73d0:	f000 ff8c 	bl	b82ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b73d4:	2340      	movs	r3, #64	; 0x40
   b73d6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b73d8:	4620      	mov	r0, r4
   b73da:	466b      	mov	r3, sp
   b73dc:	aa0c      	add	r2, sp, #48	; 0x30
   b73de:	2100      	movs	r1, #0
   b73e0:	f7ff fcd4 	bl	b6d8c <netdb_getaddrinfo>
    if (!r) {
   b73e4:	4604      	mov	r4, r0
   b73e6:	2800      	cmp	r0, #0
   b73e8:	d14b      	bne.n	b7482 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b73ea:	4602      	mov	r2, r0
   b73ec:	2101      	movs	r1, #1
   b73ee:	6868      	ldr	r0, [r5, #4]
   b73f0:	f7ff fde0 	bl	b6fb4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b73f4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b73f6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b73f8:	4622      	mov	r2, r4
   b73fa:	6868      	ldr	r0, [r5, #4]
   b73fc:	f7ff fdda 	bl	b6fb4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7400:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7402:	4681      	mov	r9, r0
        bool ok = false;
   b7404:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7406:	2e00      	cmp	r6, #0
   b7408:	d03b      	beq.n	b7482 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b740a:	2900      	cmp	r1, #0
   b740c:	d139      	bne.n	b7482 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b740e:	6873      	ldr	r3, [r6, #4]
   b7410:	2b02      	cmp	r3, #2
   b7412:	d003      	beq.n	b741c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7414:	2b0a      	cmp	r3, #10
   b7416:	d011      	beq.n	b743c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7418:	69f6      	ldr	r6, [r6, #28]
   b741a:	e7f4      	b.n	b7406 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b741c:	f1b8 0f00 	cmp.w	r8, #0
   b7420:	d0fa      	beq.n	b7418 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7422:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7424:	a806      	add	r0, sp, #24
   b7426:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7428:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b742a:	f7ff ff71 	bl	b7310 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b742e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7430:	1d3c      	adds	r4, r7, #4
   b7432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7434:	682b      	ldr	r3, [r5, #0]
   b7436:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7438:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b743a:	e7ed      	b.n	b7418 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b743c:	f1b9 0f00 	cmp.w	r9, #0
   b7440:	d0ea      	beq.n	b7418 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7442:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7444:	2210      	movs	r2, #16
   b7446:	a801      	add	r0, sp, #4
   b7448:	f000 ff50 	bl	b82ec <memset>
                    a.v = 6;
   b744c:	2306      	movs	r3, #6
   b744e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7452:	ad01      	add	r5, sp, #4
   b7454:	f104 0308 	add.w	r3, r4, #8
   b7458:	3418      	adds	r4, #24
   b745a:	6818      	ldr	r0, [r3, #0]
   b745c:	6859      	ldr	r1, [r3, #4]
   b745e:	462a      	mov	r2, r5
   b7460:	c203      	stmia	r2!, {r0, r1}
   b7462:	3308      	adds	r3, #8
   b7464:	42a3      	cmp	r3, r4
   b7466:	4615      	mov	r5, r2
   b7468:	d1f7      	bne.n	b745a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b746a:	a901      	add	r1, sp, #4
   b746c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b746e:	ad07      	add	r5, sp, #28
   b7470:	f7ff ff2e 	bl	b72d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7476:	1d3c      	adds	r4, r7, #4
   b7478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b747a:	682b      	ldr	r3, [r5, #0]
   b747c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b747e:	4649      	mov	r1, r9
   b7480:	e7ca      	b.n	b7418 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7482:	9800      	ldr	r0, [sp, #0]
   b7484:	f7ff fc7a 	bl	b6d7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7488:	4638      	mov	r0, r7
   b748a:	b015      	add	sp, #84	; 0x54
   b748c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7490 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7490:	4b02      	ldr	r3, [pc, #8]	; (b749c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7492:	4a03      	ldr	r2, [pc, #12]	; (b74a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7494:	601a      	str	r2, [r3, #0]
   b7496:	2200      	movs	r2, #0
   b7498:	605a      	str	r2, [r3, #4]

} // spark
   b749a:	4770      	bx	lr
   b749c:	2003e6d4 	.word	0x2003e6d4
   b74a0:	000b9674 	.word	0x000b9674

000b74a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b74a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74a6:	4606      	mov	r6, r0
   b74a8:	460d      	mov	r5, r1
  size_t n = 0;
   b74aa:	188f      	adds	r7, r1, r2
   b74ac:	2400      	movs	r4, #0
  while (size--) {
   b74ae:	42bd      	cmp	r5, r7
   b74b0:	d00c      	beq.n	b74cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b74b2:	6833      	ldr	r3, [r6, #0]
   b74b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b74b8:	689b      	ldr	r3, [r3, #8]
   b74ba:	4630      	mov	r0, r6
   b74bc:	4798      	blx	r3
     if (chunk>=0)
   b74be:	1e03      	subs	r3, r0, #0
   b74c0:	db01      	blt.n	b74c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b74c2:	441c      	add	r4, r3
  while (size--) {
   b74c4:	e7f3      	b.n	b74ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b74c6:	2c00      	cmp	r4, #0
   b74c8:	bf08      	it	eq
   b74ca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b74cc:	4620      	mov	r0, r4
   b74ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b74d0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b74d0:	b513      	push	{r0, r1, r4, lr}
   b74d2:	4604      	mov	r4, r0
    }
   b74d4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b74d6:	b159      	cbz	r1, b74f0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b74d8:	9101      	str	r1, [sp, #4]
   b74da:	f000 ff55 	bl	b8388 <strlen>
   b74de:	6823      	ldr	r3, [r4, #0]
   b74e0:	9901      	ldr	r1, [sp, #4]
   b74e2:	68db      	ldr	r3, [r3, #12]
   b74e4:	4602      	mov	r2, r0
   b74e6:	4620      	mov	r0, r4
    }
   b74e8:	b002      	add	sp, #8
   b74ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b74ee:	4718      	bx	r3
    }
   b74f0:	b002      	add	sp, #8
   b74f2:	bd10      	pop	{r4, pc}

000b74f4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b74f4:	b508      	push	{r3, lr}
  return write(str);
   b74f6:	f7ff ffeb 	bl	b74d0 <_ZN5Print5writeEPKc>
}
   b74fa:	bd08      	pop	{r3, pc}

000b74fc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b74fc:	6803      	ldr	r3, [r0, #0]
   b74fe:	689b      	ldr	r3, [r3, #8]
   b7500:	4718      	bx	r3

000b7502 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7502:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7504:	210d      	movs	r1, #13
{
   b7506:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7508:	f7ff fff8 	bl	b74fc <_ZN5Print5printEc>
  n += print('\n');
   b750c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b750e:	4604      	mov	r4, r0
  n += print('\n');
   b7510:	4628      	mov	r0, r5
   b7512:	f7ff fff3 	bl	b74fc <_ZN5Print5printEc>
  return n;
}
   b7516:	4420      	add	r0, r4
   b7518:	bd38      	pop	{r3, r4, r5, pc}

000b751a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b751a:	b538      	push	{r3, r4, r5, lr}
   b751c:	4605      	mov	r5, r0
  return write(str);
   b751e:	f7ff ffd7 	bl	b74d0 <_ZN5Print5writeEPKc>
   b7522:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7524:	4628      	mov	r0, r5
   b7526:	f7ff ffec 	bl	b7502 <_ZN5Print7printlnEv>
  return n;
}
   b752a:	4420      	add	r0, r4
   b752c:	bd38      	pop	{r3, r4, r5, pc}

000b752e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b752e:	b530      	push	{r4, r5, lr}
   b7530:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7532:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7534:	2a01      	cmp	r2, #1
  *str = '\0';
   b7536:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b753a:	bf98      	it	ls
   b753c:	220a      	movls	r2, #10
   b753e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7540:	460d      	mov	r5, r1
   b7542:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7546:	fb01 5312 	mls	r3, r1, r2, r5
   b754a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b754e:	2b09      	cmp	r3, #9
   b7550:	bf94      	ite	ls
   b7552:	3330      	addls	r3, #48	; 0x30
   b7554:	3337      	addhi	r3, #55	; 0x37
   b7556:	b2db      	uxtb	r3, r3
  } while(n);
   b7558:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b755a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b755e:	d9ef      	bls.n	b7540 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7560:	4621      	mov	r1, r4
   b7562:	f7ff ffb5 	bl	b74d0 <_ZN5Print5writeEPKc>
}
   b7566:	b00b      	add	sp, #44	; 0x2c
   b7568:	bd30      	pop	{r4, r5, pc}

000b756a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b756a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b756e:	b086      	sub	sp, #24
   b7570:	af00      	add	r7, sp, #0
   b7572:	4605      	mov	r5, r0
   b7574:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7576:	1d38      	adds	r0, r7, #4
   b7578:	2114      	movs	r1, #20
{
   b757a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b757c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b757e:	f7ff fd81 	bl	b7084 <vsnprintf>

    if (n<bufsize)
   b7582:	2813      	cmp	r0, #19
   b7584:	d80e      	bhi.n	b75a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7586:	1d39      	adds	r1, r7, #4
   b7588:	4628      	mov	r0, r5
   b758a:	f7ff ffa1 	bl	b74d0 <_ZN5Print5writeEPKc>
   b758e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7590:	b11e      	cbz	r6, b759a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7592:	4628      	mov	r0, r5
   b7594:	f7ff ffb5 	bl	b7502 <_ZN5Print7printlnEv>
   b7598:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b759a:	4620      	mov	r0, r4
   b759c:	3718      	adds	r7, #24
   b759e:	46bd      	mov	sp, r7
   b75a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b75a4:	f100 0308 	add.w	r3, r0, #8
   b75a8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b75ac:	46e8      	mov	r8, sp
        char bigger[n+1];
   b75ae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b75b2:	4622      	mov	r2, r4
   b75b4:	1c41      	adds	r1, r0, #1
   b75b6:	683b      	ldr	r3, [r7, #0]
   b75b8:	4668      	mov	r0, sp
   b75ba:	f7ff fd63 	bl	b7084 <vsnprintf>
  return write(str);
   b75be:	4669      	mov	r1, sp
   b75c0:	4628      	mov	r0, r5
   b75c2:	f7ff ff85 	bl	b74d0 <_ZN5Print5writeEPKc>
   b75c6:	4604      	mov	r4, r0
   b75c8:	46c5      	mov	sp, r8
   b75ca:	e7e1      	b.n	b7590 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b75cc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b75cc:	4b01      	ldr	r3, [pc, #4]	; (b75d4 <_GLOBAL__sub_I_RGB+0x8>)
   b75ce:	2200      	movs	r2, #0
   b75d0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b75d2:	4770      	bx	lr
   b75d4:	2003e6dc 	.word	0x2003e6dc

000b75d8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b75d8:	2100      	movs	r1, #0
   b75da:	f7ff bc17 	b.w	b6e0c <hal_spi_release>

000b75de <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b75de:	2100      	movs	r1, #0
   b75e0:	f7ff bc0c 	b.w	b6dfc <hal_spi_acquire>

000b75e4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b75e4:	b510      	push	{r4, lr}
   b75e6:	4604      	mov	r4, r0
   b75e8:	4608      	mov	r0, r1
{
    _spi = spi;
   b75ea:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b75ec:	f7ff fbe6 	bl	b6dbc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b75f0:	2300      	movs	r3, #0
   b75f2:	6063      	str	r3, [r4, #4]
}
   b75f4:	4620      	mov	r0, r4
   b75f6:	bd10      	pop	{r4, pc}

000b75f8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b75f8:	b513      	push	{r0, r1, r4, lr}
   b75fa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b75fc:	7800      	ldrb	r0, [r0, #0]
   b75fe:	f7ff ffee 	bl	b75de <_ZN8SPIClass4lockEv.isra.0>
   b7602:	b958      	cbnz	r0, b761c <_ZN8SPIClass5beginEv+0x24>
   b7604:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7606:	9001      	str	r0, [sp, #4]
   b7608:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b760c:	f7ff fbc6 	bl	b6d9c <hal_spi_begin>
        unlock();
   b7610:	9801      	ldr	r0, [sp, #4]
    }
}
   b7612:	b002      	add	sp, #8
   b7614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7618:	f7ff bfde 	b.w	b75d8 <_ZN8SPIClass6unlockEv.isra.0>
   b761c:	b002      	add	sp, #8
   b761e:	bd10      	pop	{r4, pc}

000b7620 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7620:	7800      	ldrb	r0, [r0, #0]
   b7622:	f7ff bfd9 	b.w	b75d8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7628 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7628:	0840      	lsrs	r0, r0, #1
{
   b762a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b762c:	6018      	str	r0, [r3, #0]
   b762e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7630:	6818      	ldr	r0, [r3, #0]
   b7632:	4288      	cmp	r0, r1
   b7634:	b2e5      	uxtb	r5, r4
   b7636:	d906      	bls.n	b7646 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7638:	3401      	adds	r4, #1
   b763a:	2c08      	cmp	r4, #8
   b763c:	d002      	beq.n	b7644 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b763e:	0840      	lsrs	r0, r0, #1
   b7640:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7642:	e7f5      	b.n	b7630 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7644:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7646:	4b02      	ldr	r3, [pc, #8]	; (b7650 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7648:	5d5b      	ldrb	r3, [r3, r5]
   b764a:	7013      	strb	r3, [r2, #0]
}
   b764c:	bd30      	pop	{r4, r5, pc}
   b764e:	bf00      	nop
   b7650:	000b96a8 	.word	0x000b96a8

000b7654 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7658:	4606      	mov	r6, r0
   b765a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b765c:	7800      	ldrb	r0, [r0, #0]
{
   b765e:	460c      	mov	r4, r1
    CHECK(lock());
   b7660:	f7ff ffbd 	bl	b75de <_ZN8SPIClass4lockEv.isra.0>
   b7664:	2800      	cmp	r0, #0
   b7666:	db1b      	blt.n	b76a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7668:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b766a:	2214      	movs	r2, #20
   b766c:	2100      	movs	r1, #0
   b766e:	a809      	add	r0, sp, #36	; 0x24
   b7670:	f000 fe3c 	bl	b82ec <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7674:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7676:	2200      	movs	r2, #0
   b7678:	a909      	add	r1, sp, #36	; 0x24
   b767a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b767c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7680:	f7ff fbac 	bl	b6ddc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7684:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7688:	b113      	cbz	r3, b7690 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b768a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b768e:	b155      	cbz	r5, b76a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7690:	2700      	movs	r7, #0
   b7692:	46b9      	mov	r9, r7
   b7694:	46b8      	mov	r8, r7
   b7696:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7698:	7923      	ldrb	r3, [r4, #4]
   b769a:	b15d      	cbz	r5, b76b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b769c:	b1c3      	cbz	r3, b76d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b769e:	2000      	movs	r0, #0
}
   b76a0:	b00f      	add	sp, #60	; 0x3c
   b76a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b76a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b76aa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b76ae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b76b2:	e7f1      	b.n	b7698 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b76b4:	2b00      	cmp	r3, #0
   b76b6:	d135      	bne.n	b7724 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b76b8:	68a3      	ldr	r3, [r4, #8]
   b76ba:	4543      	cmp	r3, r8
   b76bc:	d108      	bne.n	b76d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b76be:	f88d 9020 	strb.w	r9, [sp, #32]
   b76c2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b76c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b76ca:	89a3      	ldrh	r3, [r4, #12]
   b76cc:	429a      	cmp	r2, r3
   b76ce:	d0e6      	beq.n	b769e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b76d0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b76d2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b76d4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b76d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b76da:	ab04      	add	r3, sp, #16
   b76dc:	f10d 020f 	add.w	r2, sp, #15
   b76e0:	f7ff ffa2 	bl	b7628 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b76e4:	7921      	ldrb	r1, [r4, #4]
   b76e6:	b985      	cbnz	r5, b770a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b76e8:	b989      	cbnz	r1, b770e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b76ea:	68a3      	ldr	r3, [r4, #8]
   b76ec:	4543      	cmp	r3, r8
   b76ee:	d30e      	bcc.n	b770e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b76f0:	f88d 9020 	strb.w	r9, [sp, #32]
   b76f4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b76f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b76fc:	89a3      	ldrh	r3, [r4, #12]
   b76fe:	429a      	cmp	r2, r3
   b7700:	d105      	bne.n	b770e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7702:	9b04      	ldr	r3, [sp, #16]
   b7704:	4543      	cmp	r3, r8
   b7706:	d102      	bne.n	b770e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7708:	e7c9      	b.n	b769e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b770a:	2900      	cmp	r1, #0
   b770c:	d1f9      	bne.n	b7702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b770e:	2300      	movs	r3, #0
   b7710:	9301      	str	r3, [sp, #4]
   b7712:	7b63      	ldrb	r3, [r4, #13]
   b7714:	9300      	str	r3, [sp, #0]
   b7716:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b771a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b771c:	7830      	ldrb	r0, [r6, #0]
   b771e:	f7ff fb65 	bl	b6dec <hal_spi_set_settings>
   b7722:	e7bc      	b.n	b769e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7724:	e9cd 5500 	strd	r5, r5, [sp]
   b7728:	462b      	mov	r3, r5
   b772a:	462a      	mov	r2, r5
   b772c:	2101      	movs	r1, #1
   b772e:	e7f5      	b.n	b771c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7730 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7730:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7732:	7800      	ldrb	r0, [r0, #0]
   b7734:	f7ff fb3a 	bl	b6dac <hal_spi_transfer>
}
   b7738:	b2c0      	uxtb	r0, r0
   b773a:	bd08      	pop	{r3, pc}

000b773c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b773c:	b510      	push	{r4, lr}
   b773e:	4604      	mov	r4, r0
{
	free(buffer);
   b7740:	6800      	ldr	r0, [r0, #0]
   b7742:	f7ff fc87 	bl	b7054 <free>
}
   b7746:	4620      	mov	r0, r4
   b7748:	bd10      	pop	{r4, pc}

000b774a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b774a:	b510      	push	{r4, lr}
   b774c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b774e:	6800      	ldr	r0, [r0, #0]
   b7750:	b108      	cbz	r0, b7756 <_ZN6String10invalidateEv+0xc>
   b7752:	f7ff fc7f 	bl	b7054 <free>
	buffer = NULL;
   b7756:	2300      	movs	r3, #0
	capacity = len = 0;
   b7758:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b775c:	6023      	str	r3, [r4, #0]
}
   b775e:	bd10      	pop	{r4, pc}

000b7760 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7760:	b538      	push	{r3, r4, r5, lr}
   b7762:	4604      	mov	r4, r0
   b7764:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7766:	6800      	ldr	r0, [r0, #0]
   b7768:	3101      	adds	r1, #1
   b776a:	f7ff fc7b 	bl	b7064 <realloc>
	if (newbuffer) {
   b776e:	b110      	cbz	r0, b7776 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7770:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7774:	2001      	movs	r0, #1
	}
	return 0;
}
   b7776:	bd38      	pop	{r3, r4, r5, pc}

000b7778 <_ZN6String7reserveEj>:
{
   b7778:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b777a:	6803      	ldr	r3, [r0, #0]
{
   b777c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b777e:	b123      	cbz	r3, b778a <_ZN6String7reserveEj+0x12>
   b7780:	6843      	ldr	r3, [r0, #4]
   b7782:	428b      	cmp	r3, r1
   b7784:	d301      	bcc.n	b778a <_ZN6String7reserveEj+0x12>
   b7786:	2001      	movs	r0, #1
}
   b7788:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b778a:	4620      	mov	r0, r4
   b778c:	f7ff ffe8 	bl	b7760 <_ZN6String12changeBufferEj>
   b7790:	2800      	cmp	r0, #0
   b7792:	d0f9      	beq.n	b7788 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7794:	68a3      	ldr	r3, [r4, #8]
   b7796:	2b00      	cmp	r3, #0
   b7798:	d1f5      	bne.n	b7786 <_ZN6String7reserveEj+0xe>
   b779a:	6822      	ldr	r2, [r4, #0]
   b779c:	7013      	strb	r3, [r2, #0]
   b779e:	e7f2      	b.n	b7786 <_ZN6String7reserveEj+0xe>

000b77a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b77a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b77a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b77a4:	4611      	mov	r1, r2
   b77a6:	9201      	str	r2, [sp, #4]
{
   b77a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b77aa:	f7ff ffe5 	bl	b7778 <_ZN6String7reserveEj>
   b77ae:	9a01      	ldr	r2, [sp, #4]
   b77b0:	b928      	cbnz	r0, b77be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b77b2:	4620      	mov	r0, r4
   b77b4:	f7ff ffc9 	bl	b774a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b77b8:	4620      	mov	r0, r4
   b77ba:	b003      	add	sp, #12
   b77bc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b77be:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b77c0:	4629      	mov	r1, r5
   b77c2:	6820      	ldr	r0, [r4, #0]
   b77c4:	f000 fd84 	bl	b82d0 <memcpy>
	buffer[len] = 0;
   b77c8:	6822      	ldr	r2, [r4, #0]
   b77ca:	68a3      	ldr	r3, [r4, #8]
   b77cc:	2100      	movs	r1, #0
   b77ce:	54d1      	strb	r1, [r2, r3]
	return *this;
   b77d0:	e7f2      	b.n	b77b8 <_ZN6String4copyEPKcj+0x18>

000b77d2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b77d2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b77d4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b77d6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b77da:	4604      	mov	r4, r0
	len = 0;
   b77dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b77de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b77e0:	b141      	cbz	r1, b77f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b77e2:	4608      	mov	r0, r1
   b77e4:	9101      	str	r1, [sp, #4]
   b77e6:	f000 fdcf 	bl	b8388 <strlen>
   b77ea:	9901      	ldr	r1, [sp, #4]
   b77ec:	4602      	mov	r2, r0
   b77ee:	4620      	mov	r0, r4
   b77f0:	f7ff ffd6 	bl	b77a0 <_ZN6String4copyEPKcj>
}
   b77f4:	4620      	mov	r0, r4
   b77f6:	b002      	add	sp, #8
   b77f8:	bd10      	pop	{r4, pc}

000b77fa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b77fa:	4288      	cmp	r0, r1
{
   b77fc:	b510      	push	{r4, lr}
   b77fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7800:	d005      	beq.n	b780e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7802:	680b      	ldr	r3, [r1, #0]
   b7804:	b12b      	cbz	r3, b7812 <_ZN6StringaSERKS_+0x18>
   b7806:	688a      	ldr	r2, [r1, #8]
   b7808:	4619      	mov	r1, r3
   b780a:	f7ff ffc9 	bl	b77a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b780e:	4620      	mov	r0, r4
   b7810:	bd10      	pop	{r4, pc}
	else invalidate();
   b7812:	f7ff ff9a 	bl	b774a <_ZN6String10invalidateEv>
   b7816:	e7fa      	b.n	b780e <_ZN6StringaSERKS_+0x14>

000b7818 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7818:	b510      	push	{r4, lr}
	buffer = NULL;
   b781a:	2300      	movs	r3, #0
String::String(const String &value)
   b781c:	4604      	mov	r4, r0
	capacity = 0;
   b781e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7822:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7824:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7826:	f7ff ffe8 	bl	b77fa <_ZN6StringaSERKS_>
}
   b782a:	4620      	mov	r0, r4
   b782c:	bd10      	pop	{r4, pc}

000b782e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b782e:	b513      	push	{r0, r1, r4, lr}
   b7830:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7832:	b159      	cbz	r1, b784c <_ZN6StringaSEPKc+0x1e>
   b7834:	4608      	mov	r0, r1
   b7836:	9101      	str	r1, [sp, #4]
   b7838:	f000 fda6 	bl	b8388 <strlen>
   b783c:	9901      	ldr	r1, [sp, #4]
   b783e:	4602      	mov	r2, r0
   b7840:	4620      	mov	r0, r4
   b7842:	f7ff ffad 	bl	b77a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7846:	4620      	mov	r0, r4
   b7848:	b002      	add	sp, #8
   b784a:	bd10      	pop	{r4, pc}
	else invalidate();
   b784c:	f7ff ff7d 	bl	b774a <_ZN6String10invalidateEv>
   b7850:	e7f9      	b.n	b7846 <_ZN6StringaSEPKc+0x18>

000b7852 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7852:	b510      	push	{r4, lr}
   b7854:	4604      	mov	r4, r0
   b7856:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7858:	2300      	movs	r3, #0
	capacity = 0;
   b785a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b785e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7860:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7862:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7864:	a901      	add	r1, sp, #4
   b7866:	f000 f9a5 	bl	b7bb4 <itoa>
	*this = buf;
   b786a:	a901      	add	r1, sp, #4
   b786c:	4620      	mov	r0, r4
   b786e:	f7ff ffde 	bl	b782e <_ZN6StringaSEPKc>
}
   b7872:	4620      	mov	r0, r4
   b7874:	b00a      	add	sp, #40	; 0x28
   b7876:	bd10      	pop	{r4, pc}

000b7878 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7878:	b570      	push	{r4, r5, r6, lr}
   b787a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b787c:	460e      	mov	r6, r1
   b787e:	b909      	cbnz	r1, b7884 <_ZN6String6concatEPKcj+0xc>
   b7880:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7882:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7884:	b16a      	cbz	r2, b78a2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7886:	6884      	ldr	r4, [r0, #8]
   b7888:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b788a:	4621      	mov	r1, r4
   b788c:	f7ff ff74 	bl	b7778 <_ZN6String7reserveEj>
   b7890:	2800      	cmp	r0, #0
   b7892:	d0f5      	beq.n	b7880 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7894:	6828      	ldr	r0, [r5, #0]
   b7896:	68ab      	ldr	r3, [r5, #8]
   b7898:	4631      	mov	r1, r6
   b789a:	4418      	add	r0, r3
   b789c:	f000 fd6c 	bl	b8378 <strcpy>
	len = newlen;
   b78a0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b78a2:	2001      	movs	r0, #1
   b78a4:	e7ed      	b.n	b7882 <_ZN6String6concatEPKcj+0xa>

000b78a6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b78a6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b78a8:	688a      	ldr	r2, [r1, #8]
   b78aa:	6809      	ldr	r1, [r1, #0]
{
   b78ac:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b78ae:	f7ff ffe3 	bl	b7878 <_ZN6String6concatEPKcj>
   b78b2:	b910      	cbnz	r0, b78ba <_ZplRK15StringSumHelperRK6String+0x14>
   b78b4:	4620      	mov	r0, r4
   b78b6:	f7ff ff48 	bl	b774a <_ZN6String10invalidateEv>
	return a;
}
   b78ba:	4620      	mov	r0, r4
   b78bc:	bd10      	pop	{r4, pc}

000b78be <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b78be:	b513      	push	{r0, r1, r4, lr}
   b78c0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b78c2:	b929      	cbnz	r1, b78d0 <_ZplRK15StringSumHelperPKc+0x12>
   b78c4:	4620      	mov	r0, r4
   b78c6:	f7ff ff40 	bl	b774a <_ZN6String10invalidateEv>
	return a;
}
   b78ca:	4620      	mov	r0, r4
   b78cc:	b002      	add	sp, #8
   b78ce:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b78d0:	4608      	mov	r0, r1
   b78d2:	9101      	str	r1, [sp, #4]
   b78d4:	f000 fd58 	bl	b8388 <strlen>
   b78d8:	9901      	ldr	r1, [sp, #4]
   b78da:	4602      	mov	r2, r0
   b78dc:	4620      	mov	r0, r4
   b78de:	f7ff ffcb 	bl	b7878 <_ZN6String6concatEPKcj>
   b78e2:	2800      	cmp	r0, #0
   b78e4:	d0ee      	beq.n	b78c4 <_ZplRK15StringSumHelperPKc+0x6>
   b78e6:	e7f0      	b.n	b78ca <_ZplRK15StringSumHelperPKc+0xc>

000b78e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b78e8:	4b05      	ldr	r3, [pc, #20]	; (b7900 <_GLOBAL__sub_I_System+0x18>)
   b78ea:	2202      	movs	r2, #2
   b78ec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b78ee:	4b05      	ldr	r3, [pc, #20]	; (b7904 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b78f0:	4a05      	ldr	r2, [pc, #20]	; (b7908 <_GLOBAL__sub_I_System+0x20>)
   b78f2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b78f4:	2000      	movs	r0, #0
   b78f6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b78fa:	f7ff bb0f 	b.w	b6f1c <set_system_mode>
   b78fe:	bf00      	nop
   b7900:	2003e6f8 	.word	0x2003e6f8
   b7904:	2003e6ec 	.word	0x2003e6ec
   b7908:	ffff0000 	.word	0xffff0000

000b790c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b790c:	4b02      	ldr	r3, [pc, #8]	; (b7918 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b790e:	681a      	ldr	r2, [r3, #0]
   b7910:	4b02      	ldr	r3, [pc, #8]	; (b791c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7912:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7914:	4770      	bx	lr
   b7916:	bf00      	nop
   b7918:	2003e568 	.word	0x2003e568
   b791c:	2003e6fc 	.word	0x2003e6fc

000b7920 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7920:	4770      	bx	lr

000b7922 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7922:	7441      	strb	r1, [r0, #17]
}
   b7924:	4770      	bx	lr

000b7926 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7926:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7928:	7c00      	ldrb	r0, [r0, #16]
   b792a:	f7ff faa7 	bl	b6e7c <hal_usart_available_data_for_write>
}
   b792e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7932:	bd08      	pop	{r3, pc}

000b7934 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7934:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7936:	7c00      	ldrb	r0, [r0, #16]
   b7938:	f7ff fa78 	bl	b6e2c <hal_usart_available>
}
   b793c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7940:	bd08      	pop	{r3, pc}

000b7942 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7942:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7944:	7c00      	ldrb	r0, [r0, #16]
   b7946:	f7ff fa81 	bl	b6e4c <hal_usart_peek>
}
   b794a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b794e:	bd08      	pop	{r3, pc}

000b7950 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7950:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7952:	7c00      	ldrb	r0, [r0, #16]
   b7954:	f7ff fa72 	bl	b6e3c <hal_usart_read>
}
   b7958:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b795c:	bd08      	pop	{r3, pc}

000b795e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b795e:	7c00      	ldrb	r0, [r0, #16]
   b7960:	f7ff ba7c 	b.w	b6e5c <hal_usart_flush>

000b7964 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7964:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7966:	7c45      	ldrb	r5, [r0, #17]
{
   b7968:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b796a:	b12d      	cbz	r5, b7978 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b796c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b796e:	b003      	add	sp, #12
   b7970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7974:	f7ff ba52 	b.w	b6e1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7978:	7c00      	ldrb	r0, [r0, #16]
   b797a:	9101      	str	r1, [sp, #4]
   b797c:	f7ff fa7e 	bl	b6e7c <hal_usart_available_data_for_write>
   b7980:	2800      	cmp	r0, #0
   b7982:	9901      	ldr	r1, [sp, #4]
   b7984:	dcf2      	bgt.n	b796c <_ZN11USARTSerial5writeEh+0x8>
}
   b7986:	4628      	mov	r0, r5
   b7988:	b003      	add	sp, #12
   b798a:	bd30      	pop	{r4, r5, pc}

000b798c <_ZN11USARTSerialD0Ev>:
   b798c:	b510      	push	{r4, lr}
   b798e:	2114      	movs	r1, #20
   b7990:	4604      	mov	r4, r0
   b7992:	f7fc fb80 	bl	b4096 <_ZdlPvj>
   b7996:	4620      	mov	r0, r4
   b7998:	bd10      	pop	{r4, pc}
	...

000b799c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b799c:	b510      	push	{r4, lr}
   b799e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79a2:	4604      	mov	r4, r0
   b79a4:	4608      	mov	r0, r1
   b79a6:	4611      	mov	r1, r2
   b79a8:	2200      	movs	r2, #0
   b79aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b79ae:	4b04      	ldr	r3, [pc, #16]	; (b79c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b79b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b79b2:	2301      	movs	r3, #1
  _serial = serial;
   b79b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b79b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b79b8:	f7ff fa68 	bl	b6e8c <hal_usart_init_ex>
}
   b79bc:	4620      	mov	r0, r4
   b79be:	bd10      	pop	{r4, pc}
   b79c0:	000b96d4 	.word	0x000b96d4

000b79c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b79c4:	7441      	strb	r1, [r0, #17]
}
   b79c6:	4770      	bx	lr

000b79c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b79c8:	4770      	bx	lr

000b79ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b79ca:	4770      	bx	lr

000b79cc <_ZN9USBSerial4readEv>:
{
   b79cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b79ce:	2100      	movs	r1, #0
   b79d0:	7c00      	ldrb	r0, [r0, #16]
   b79d2:	f7ff fa83 	bl	b6edc <HAL_USB_USART_Receive_Data>
}
   b79d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b79da:	bd08      	pop	{r3, pc}

000b79dc <_ZN9USBSerial4peekEv>:
{
   b79dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b79de:	2101      	movs	r1, #1
   b79e0:	7c00      	ldrb	r0, [r0, #16]
   b79e2:	f7ff fa7b 	bl	b6edc <HAL_USB_USART_Receive_Data>
}
   b79e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b79ea:	bd08      	pop	{r3, pc}

000b79ec <_ZN9USBSerial17availableForWriteEv>:
{
   b79ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b79ee:	7c00      	ldrb	r0, [r0, #16]
   b79f0:	f7ff fa6c 	bl	b6ecc <HAL_USB_USART_Available_Data_For_Write>
}
   b79f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b79f8:	bd08      	pop	{r3, pc}

000b79fa <_ZN9USBSerial9availableEv>:
{
   b79fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b79fc:	7c00      	ldrb	r0, [r0, #16]
   b79fe:	f7ff fa5d 	bl	b6ebc <HAL_USB_USART_Available_Data>
}
   b7a02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a06:	bd08      	pop	{r3, pc}

000b7a08 <_ZN9USBSerial5writeEh>:
{
   b7a08:	b513      	push	{r0, r1, r4, lr}
   b7a0a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7a0c:	7c00      	ldrb	r0, [r0, #16]
{
   b7a0e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7a10:	f7ff fa5c 	bl	b6ecc <HAL_USB_USART_Available_Data_For_Write>
   b7a14:	2800      	cmp	r0, #0
   b7a16:	9901      	ldr	r1, [sp, #4]
   b7a18:	dc01      	bgt.n	b7a1e <_ZN9USBSerial5writeEh+0x16>
   b7a1a:	7c60      	ldrb	r0, [r4, #17]
   b7a1c:	b120      	cbz	r0, b7a28 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7a1e:	7c20      	ldrb	r0, [r4, #16]
   b7a20:	f7ff fa64 	bl	b6eec <HAL_USB_USART_Send_Data>
   b7a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7a28:	b002      	add	sp, #8
   b7a2a:	bd10      	pop	{r4, pc}

000b7a2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7a2c:	7c00      	ldrb	r0, [r0, #16]
   b7a2e:	f7ff ba65 	b.w	b6efc <HAL_USB_USART_Flush_Data>

000b7a32 <_ZN9USBSerialD0Ev>:
   b7a32:	b510      	push	{r4, lr}
   b7a34:	2114      	movs	r1, #20
   b7a36:	4604      	mov	r4, r0
   b7a38:	f7fc fb2d 	bl	b4096 <_ZdlPvj>
   b7a3c:	4620      	mov	r0, r4
   b7a3e:	bd10      	pop	{r4, pc}

000b7a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7a40:	b510      	push	{r4, lr}
   b7a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a46:	4604      	mov	r4, r0
   b7a48:	4608      	mov	r0, r1
   b7a4a:	2100      	movs	r1, #0
   b7a4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7a50:	4b04      	ldr	r3, [pc, #16]	; (b7a64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7a52:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7a54:	2301      	movs	r3, #1
  _serial = serial;
   b7a56:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7a58:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7a5a:	4611      	mov	r1, r2
   b7a5c:	f7ff fa1e 	bl	b6e9c <HAL_USB_USART_Init>
}
   b7a60:	4620      	mov	r0, r4
   b7a62:	bd10      	pop	{r4, pc}
   b7a64:	000b9704 	.word	0x000b9704

000b7a68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7a68:	7c00      	ldrb	r0, [r0, #16]
   b7a6a:	2200      	movs	r2, #0
   b7a6c:	f7ff ba1e 	b.w	b6eac <HAL_USB_USART_Begin>

000b7a70 <_Z19acquireSerialBufferv>:
{
   b7a70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7a72:	2214      	movs	r2, #20
{
   b7a74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7a76:	2100      	movs	r1, #0
   b7a78:	f000 fc38 	bl	b82ec <memset>
}
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	bd10      	pop	{r4, pc}

000b7a80 <_Z16_fetch_usbserialv>:
{
   b7a80:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7a82:	4c0f      	ldr	r4, [pc, #60]	; (b7ac0 <_Z16_fetch_usbserialv+0x40>)
{
   b7a84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7a86:	a803      	add	r0, sp, #12
   b7a88:	f7ff fff2 	bl	b7a70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7a8c:	7821      	ldrb	r1, [r4, #0]
   b7a8e:	f3bf 8f5b 	dmb	ish
   b7a92:	f011 0101 	ands.w	r1, r1, #1
   b7a96:	d10f      	bne.n	b7ab8 <_Z16_fetch_usbserialv+0x38>
   b7a98:	4620      	mov	r0, r4
   b7a9a:	9101      	str	r1, [sp, #4]
   b7a9c:	f7fc fb08 	bl	b40b0 <__cxa_guard_acquire>
   b7aa0:	9901      	ldr	r1, [sp, #4]
   b7aa2:	b148      	cbz	r0, b7ab8 <_Z16_fetch_usbserialv+0x38>
   b7aa4:	aa03      	add	r2, sp, #12
   b7aa6:	4807      	ldr	r0, [pc, #28]	; (b7ac4 <_Z16_fetch_usbserialv+0x44>)
   b7aa8:	f7ff ffca 	bl	b7a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7aac:	4620      	mov	r0, r4
   b7aae:	f7fc fb04 	bl	b40ba <__cxa_guard_release>
   b7ab2:	4805      	ldr	r0, [pc, #20]	; (b7ac8 <_Z16_fetch_usbserialv+0x48>)
   b7ab4:	f000 fbfe 	bl	b82b4 <atexit>
	return _usbserial;
}
   b7ab8:	4802      	ldr	r0, [pc, #8]	; (b7ac4 <_Z16_fetch_usbserialv+0x44>)
   b7aba:	b008      	add	sp, #32
   b7abc:	bd10      	pop	{r4, pc}
   b7abe:	bf00      	nop
   b7ac0:	2003e700 	.word	0x2003e700
   b7ac4:	2003e704 	.word	0x2003e704
   b7ac8:	000b79c9 	.word	0x000b79c9

000b7acc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7acc:	2200      	movs	r2, #0
   b7ace:	6840      	ldr	r0, [r0, #4]
   b7ad0:	4611      	mov	r1, r2
   b7ad2:	f7ff ba6f 	b.w	b6fb4 <network_ready>

000b7ad6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ad6:	2200      	movs	r2, #0
   b7ad8:	6840      	ldr	r0, [r0, #4]
   b7ada:	4611      	mov	r1, r2
   b7adc:	f7ff ba8a 	b.w	b6ff4 <network_listening>

000b7ae0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ae0:	2200      	movs	r2, #0
   b7ae2:	6840      	ldr	r0, [r0, #4]
   b7ae4:	4611      	mov	r1, r2
   b7ae6:	f7ff ba95 	b.w	b7014 <network_get_listen_timeout>

000b7aea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7aea:	6840      	ldr	r0, [r0, #4]
   b7aec:	2200      	movs	r2, #0
   b7aee:	f7ff ba89 	b.w	b7004 <network_set_listen_timeout>

000b7af2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7af2:	6840      	ldr	r0, [r0, #4]
   b7af4:	2200      	movs	r2, #0
   b7af6:	f081 0101 	eor.w	r1, r1, #1
   b7afa:	f7ff ba73 	b.w	b6fe4 <network_listen>

000b7afe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7afe:	2300      	movs	r3, #0
   b7b00:	6840      	ldr	r0, [r0, #4]
   b7b02:	461a      	mov	r2, r3
   b7b04:	4619      	mov	r1, r3
   b7b06:	f7ff ba65 	b.w	b6fd4 <network_off>

000b7b0a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7b0a:	2300      	movs	r3, #0
   b7b0c:	6840      	ldr	r0, [r0, #4]
   b7b0e:	461a      	mov	r2, r3
   b7b10:	4619      	mov	r1, r3
   b7b12:	f7ff ba57 	b.w	b6fc4 <network_on>

000b7b16 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7b16:	2200      	movs	r2, #0
   b7b18:	6840      	ldr	r0, [r0, #4]
   b7b1a:	4611      	mov	r1, r2
   b7b1c:	f7ff ba3a 	b.w	b6f94 <network_connecting>

000b7b20 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7b20:	6840      	ldr	r0, [r0, #4]
   b7b22:	2200      	movs	r2, #0
   b7b24:	2102      	movs	r1, #2
   b7b26:	f7ff ba3d 	b.w	b6fa4 <network_disconnect>

000b7b2a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7b2a:	2300      	movs	r3, #0
   b7b2c:	6840      	ldr	r0, [r0, #4]
   b7b2e:	461a      	mov	r2, r3
   b7b30:	f7ff ba28 	b.w	b6f84 <network_connect>

000b7b34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7b34:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7b36:	2204      	movs	r2, #4
   b7b38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7b3a:	4a02      	ldr	r2, [pc, #8]	; (b7b44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7b3c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7b3e:	4770      	bx	lr
   b7b40:	2003e718 	.word	0x2003e718
   b7b44:	000b9734 	.word	0x000b9734

000b7b48 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7b48:	b510      	push	{r4, lr}
   b7b4a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7b4c:	f000 fc1c 	bl	b8388 <strlen>
   b7b50:	3801      	subs	r0, #1
   b7b52:	1823      	adds	r3, r4, r0
   b7b54:	4620      	mov	r0, r4
	while(i<j){
   b7b56:	4283      	cmp	r3, r0
   b7b58:	d906      	bls.n	b7b68 <_Z11str_reversePc+0x20>
		c = *i;
   b7b5a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7b5c:	7819      	ldrb	r1, [r3, #0]
   b7b5e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7b62:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7b66:	e7f6      	b.n	b7b56 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7b68:	bd10      	pop	{r4, pc}

000b7b6a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7b6a:	b570      	push	{r4, r5, r6, lr}
   b7b6c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7b6e:	1e91      	subs	r1, r2, #2
   b7b70:	2922      	cmp	r1, #34	; 0x22
   b7b72:	d81d      	bhi.n	b7bb0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7b74:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7b76:	b930      	cbnz	r0, b7b86 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7b78:	4423      	add	r3, r4
            *ptr++ = '0';
   b7b7a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7b7c:	429d      	cmp	r5, r3
   b7b7e:	d210      	bcs.n	b7ba2 <ultoa+0x38>
            *ptr++ = '0';
   b7b80:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7b84:	e7fa      	b.n	b7b7c <ultoa+0x12>
            result.quot = a/radix;
   b7b86:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7b8a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7b8e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7b90:	2809      	cmp	r0, #9
                *ptr += '0';
   b7b92:	bf94      	ite	ls
   b7b94:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7b96:	3157      	addhi	r1, #87	; 0x57
   b7b98:	b2c9      	uxtb	r1, r1
   b7b9a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7b9e:	4630      	mov	r0, r6
	while(a){
   b7ba0:	e7e9      	b.n	b7b76 <ultoa+0xc>

	*ptr = '\0';
   b7ba2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7ba4:	4620      	mov	r0, r4
	*ptr = '\0';
   b7ba6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7ba8:	f7ff ffce 	bl	b7b48 <_Z11str_reversePc>
	return buffer;
   b7bac:	4620      	mov	r0, r4
}
   b7bae:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7bb0:	2000      	movs	r0, #0
   b7bb2:	e7fc      	b.n	b7bae <ultoa+0x44>

000b7bb4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7bb4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7bb6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7bb8:	460c      	mov	r4, r1
   b7bba:	4615      	mov	r5, r2
	if(a<0){
   b7bbc:	da0e      	bge.n	b7bdc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7bc2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7bc6:	bf14      	ite	ne
   b7bc8:	4258      	negne	r0, r3
   b7bca:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7bcc:	2301      	movs	r3, #1
		*buffer = '-';
   b7bce:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7bd0:	462a      	mov	r2, r5
   b7bd2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7bd4:	f7ff ffc9 	bl	b7b6a <ultoa>
	}
	return buffer;
}
   b7bd8:	4620      	mov	r0, r4
   b7bda:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7bdc:	2301      	movs	r3, #1
   b7bde:	e7f9      	b.n	b7bd4 <itoa+0x20>

000b7be0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7be0:	4b01      	ldr	r3, [pc, #4]	; (b7be8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7be2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7be4:	4770      	bx	lr
   b7be6:	bf00      	nop
   b7be8:	2003e56c 	.word	0x2003e56c

000b7bec <serialEventRun>:
{
   b7bec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7bee:	4b0b      	ldr	r3, [pc, #44]	; (b7c1c <serialEventRun+0x30>)
   b7bf0:	b143      	cbz	r3, b7c04 <serialEventRun+0x18>
   b7bf2:	f7ff ff45 	bl	b7a80 <_Z16_fetch_usbserialv>
   b7bf6:	6803      	ldr	r3, [r0, #0]
   b7bf8:	691b      	ldr	r3, [r3, #16]
   b7bfa:	4798      	blx	r3
   b7bfc:	2800      	cmp	r0, #0
   b7bfe:	dd01      	ble.n	b7c04 <serialEventRun+0x18>
        serialEvent();
   b7c00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c04:	4b06      	ldr	r3, [pc, #24]	; (b7c20 <serialEventRun+0x34>)
   b7c06:	b143      	cbz	r3, b7c1a <serialEventRun+0x2e>
   b7c08:	f000 f972 	bl	b7ef0 <_Z22__fetch_global_Serial1v>
   b7c0c:	6803      	ldr	r3, [r0, #0]
   b7c0e:	691b      	ldr	r3, [r3, #16]
   b7c10:	4798      	blx	r3
   b7c12:	2800      	cmp	r0, #0
   b7c14:	dd01      	ble.n	b7c1a <serialEventRun+0x2e>
        serialEvent1();
   b7c16:	f3af 8000 	nop.w
}
   b7c1a:	bd08      	pop	{r3, pc}
	...

000b7c24 <_post_loop>:
{
   b7c24:	b508      	push	{r3, lr}
	serialEventRun();
   b7c26:	f7ff ffe1 	bl	b7bec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7c2a:	f7fe fff7 	bl	b6c1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7c2e:	4b01      	ldr	r3, [pc, #4]	; (b7c34 <_post_loop+0x10>)
   b7c30:	6018      	str	r0, [r3, #0]
}
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	2003e728 	.word	0x2003e728

000b7c38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c38:	4805      	ldr	r0, [pc, #20]	; (b7c50 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7c3a:	4a06      	ldr	r2, [pc, #24]	; (b7c54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7c3c:	4906      	ldr	r1, [pc, #24]	; (b7c58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7c3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c40:	1a12      	subs	r2, r2, r0
   b7c42:	f000 fb45 	bl	b82d0 <memcpy>
    __backup_sram_signature = signature;
   b7c46:	4b05      	ldr	r3, [pc, #20]	; (b7c5c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7c48:	4a05      	ldr	r2, [pc, #20]	; (b7c60 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7c4a:	601a      	str	r2, [r3, #0]
}
   b7c4c:	bd08      	pop	{r3, pc}
   b7c4e:	bf00      	nop
   b7c50:	2003f400 	.word	0x2003f400
   b7c54:	2003f404 	.word	0x2003f404
   b7c58:	000b9860 	.word	0x000b9860
   b7c5c:	2003f400 	.word	0x2003f400
   b7c60:	9a271c1e 	.word	0x9a271c1e

000b7c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c66:	2300      	movs	r3, #0
   b7c68:	9300      	str	r3, [sp, #0]
   b7c6a:	461a      	mov	r2, r3
   b7c6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7c70:	f7ff f96e 	bl	b6f50 <system_ctrl_set_result>
}
   b7c74:	b003      	add	sp, #12
   b7c76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7c7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7c7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7c7e:	8843      	ldrh	r3, [r0, #2]
   b7c80:	2b0a      	cmp	r3, #10
   b7c82:	d008      	beq.n	b7c96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7c84:	2b50      	cmp	r3, #80	; 0x50
   b7c86:	d10b      	bne.n	b7ca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7c88:	4b09      	ldr	r3, [pc, #36]	; (b7cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7c8a:	681b      	ldr	r3, [r3, #0]
   b7c8c:	b14b      	cbz	r3, b7ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7c8e:	b003      	add	sp, #12
   b7c90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7c94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7c96:	f7ff ffe5 	bl	b7c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7c9a:	b003      	add	sp, #12
   b7c9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ca0:	2300      	movs	r3, #0
   b7ca2:	9300      	str	r3, [sp, #0]
   b7ca4:	461a      	mov	r2, r3
   b7ca6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7caa:	f7ff f951 	bl	b6f50 <system_ctrl_set_result>
}
   b7cae:	e7f4      	b.n	b7c9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7cb0:	2003e724 	.word	0x2003e724

000b7cb4 <module_user_init_hook>:
{
   b7cb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7cb6:	4812      	ldr	r0, [pc, #72]	; (b7d00 <module_user_init_hook+0x4c>)
   b7cb8:	2100      	movs	r1, #0
   b7cba:	f7ff f9fb 	bl	b70b4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7cbe:	4b11      	ldr	r3, [pc, #68]	; (b7d04 <module_user_init_hook+0x50>)
   b7cc0:	681a      	ldr	r2, [r3, #0]
   b7cc2:	4b11      	ldr	r3, [pc, #68]	; (b7d08 <module_user_init_hook+0x54>)
   b7cc4:	429a      	cmp	r2, r3
   b7cc6:	4b11      	ldr	r3, [pc, #68]	; (b7d0c <module_user_init_hook+0x58>)
   b7cc8:	bf0c      	ite	eq
   b7cca:	2201      	moveq	r2, #1
   b7ccc:	2200      	movne	r2, #0
   b7cce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7cd0:	d001      	beq.n	b7cd6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7cd2:	f7ff ffb1 	bl	b7c38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7cd6:	f7fe ff91 	bl	b6bfc <HAL_RNG_GetRandomNumber>
   b7cda:	4604      	mov	r4, r0
    srand(seed);
   b7cdc:	f000 fb1e 	bl	b831c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7ce0:	4b0b      	ldr	r3, [pc, #44]	; (b7d10 <module_user_init_hook+0x5c>)
   b7ce2:	b113      	cbz	r3, b7cea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7cea:	2100      	movs	r1, #0
   b7cec:	4808      	ldr	r0, [pc, #32]	; (b7d10 <module_user_init_hook+0x5c>)
   b7cee:	f7ff f939 	bl	b6f64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7cf6:	4807      	ldr	r0, [pc, #28]	; (b7d14 <module_user_init_hook+0x60>)
   b7cf8:	2100      	movs	r1, #0
   b7cfa:	f7ff b91f 	b.w	b6f3c <system_ctrl_set_app_request_handler>
   b7cfe:	bf00      	nop
   b7d00:	000b7be1 	.word	0x000b7be1
   b7d04:	2003f400 	.word	0x2003f400
   b7d08:	9a271c1e 	.word	0x9a271c1e
   b7d0c:	2003e720 	.word	0x2003e720
   b7d10:	00000000 	.word	0x00000000
   b7d14:	000b7c7d 	.word	0x000b7c7d

000b7d18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7d18:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7d1a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7d1c:	d902      	bls.n	b7d24 <pinAvailable+0xc>
    return false;
   b7d1e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7d20:	b002      	add	sp, #8
   b7d22:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7d24:	f1a0 030b 	sub.w	r3, r0, #11
   b7d28:	2b02      	cmp	r3, #2
   b7d2a:	d81a      	bhi.n	b7d62 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7d2c:	4c17      	ldr	r4, [pc, #92]	; (b7d8c <pinAvailable+0x74>)
   b7d2e:	7821      	ldrb	r1, [r4, #0]
   b7d30:	f3bf 8f5b 	dmb	ish
   b7d34:	f011 0101 	ands.w	r1, r1, #1
   b7d38:	d10b      	bne.n	b7d52 <pinAvailable+0x3a>
   b7d3a:	4620      	mov	r0, r4
   b7d3c:	9101      	str	r1, [sp, #4]
   b7d3e:	f7fc f9b7 	bl	b40b0 <__cxa_guard_acquire>
   b7d42:	9901      	ldr	r1, [sp, #4]
   b7d44:	b128      	cbz	r0, b7d52 <pinAvailable+0x3a>
   b7d46:	4812      	ldr	r0, [pc, #72]	; (b7d90 <pinAvailable+0x78>)
   b7d48:	f7ff fc4c 	bl	b75e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7fc f9b4 	bl	b40ba <__cxa_guard_release>
   b7d52:	4b0f      	ldr	r3, [pc, #60]	; (b7d90 <pinAvailable+0x78>)
   b7d54:	7818      	ldrb	r0, [r3, #0]
   b7d56:	f7ff f839 	bl	b6dcc <hal_spi_is_enabled>
   b7d5a:	2800      	cmp	r0, #0
   b7d5c:	d1df      	bne.n	b7d1e <pinAvailable+0x6>
  return true; // 'pin' is available
   b7d5e:	2001      	movs	r0, #1
   b7d60:	e7de      	b.n	b7d20 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7d62:	2801      	cmp	r0, #1
   b7d64:	d809      	bhi.n	b7d7a <pinAvailable+0x62>
   b7d66:	f000 f883 	bl	b7e70 <_Z19__fetch_global_Wirev>
   b7d6a:	2100      	movs	r1, #0
   b7d6c:	7c00      	ldrb	r0, [r0, #16]
   b7d6e:	f7fe ffed 	bl	b6d4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7d72:	f080 0001 	eor.w	r0, r0, #1
   b7d76:	b2c0      	uxtb	r0, r0
   b7d78:	e7d2      	b.n	b7d20 <pinAvailable+0x8>
   b7d7a:	3809      	subs	r0, #9
   b7d7c:	2801      	cmp	r0, #1
   b7d7e:	d8ee      	bhi.n	b7d5e <pinAvailable+0x46>
   b7d80:	f000 f8b6 	bl	b7ef0 <_Z22__fetch_global_Serial1v>
   b7d84:	7c00      	ldrb	r0, [r0, #16]
   b7d86:	f7ff f871 	bl	b6e6c <hal_usart_is_enabled>
   b7d8a:	e7f2      	b.n	b7d72 <pinAvailable+0x5a>
   b7d8c:	2003e5d4 	.word	0x2003e5d4
   b7d90:	2003e5d8 	.word	0x2003e5d8

000b7d94 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7d94:	2823      	cmp	r0, #35	; 0x23
{
   b7d96:	b538      	push	{r3, r4, r5, lr}
   b7d98:	4604      	mov	r4, r0
   b7d9a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7d9c:	d80a      	bhi.n	b7db4 <pinMode+0x20>
   b7d9e:	29ff      	cmp	r1, #255	; 0xff
   b7da0:	d008      	beq.n	b7db4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7da2:	f7ff ffb9 	bl	b7d18 <pinAvailable>
   b7da6:	b128      	cbz	r0, b7db4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7da8:	4629      	mov	r1, r5
   b7daa:	4620      	mov	r0, r4
}
   b7dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7db0:	f7fe bf44 	b.w	b6c3c <HAL_Pin_Mode>
}
   b7db4:	bd38      	pop	{r3, r4, r5, pc}

000b7db6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7db6:	b538      	push	{r3, r4, r5, lr}
   b7db8:	4604      	mov	r4, r0
   b7dba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7dbc:	f7fe ff46 	bl	b6c4c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7dc0:	28ff      	cmp	r0, #255	; 0xff
   b7dc2:	d010      	beq.n	b7de6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7dc4:	2806      	cmp	r0, #6
   b7dc6:	d804      	bhi.n	b7dd2 <digitalWrite+0x1c>
   b7dc8:	234d      	movs	r3, #77	; 0x4d
   b7dca:	fa23 f000 	lsr.w	r0, r3, r0
   b7dce:	07c3      	lsls	r3, r0, #31
   b7dd0:	d409      	bmi.n	b7de6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7dd2:	4620      	mov	r0, r4
   b7dd4:	f7ff ffa0 	bl	b7d18 <pinAvailable>
   b7dd8:	b128      	cbz	r0, b7de6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7dda:	4629      	mov	r1, r5
   b7ddc:	4620      	mov	r0, r4
}
   b7dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7de2:	f7fe bf3b 	b.w	b6c5c <HAL_GPIO_Write>
}
   b7de6:	bd38      	pop	{r3, r4, r5, pc}

000b7de8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7de8:	b510      	push	{r4, lr}
   b7dea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7dec:	f7fe ff2e 	bl	b6c4c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7df0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7df2:	b2db      	uxtb	r3, r3
   b7df4:	2b01      	cmp	r3, #1
   b7df6:	d908      	bls.n	b7e0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7df8:	4620      	mov	r0, r4
   b7dfa:	f7ff ff8d 	bl	b7d18 <pinAvailable>
   b7dfe:	b120      	cbz	r0, b7e0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7e00:	4620      	mov	r0, r4
}
   b7e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7e06:	f7fe bf31 	b.w	b6c6c <HAL_GPIO_Read>
}
   b7e0a:	2000      	movs	r0, #0
   b7e0c:	bd10      	pop	{r4, pc}

000b7e0e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7e0e:	280d      	cmp	r0, #13
{
   b7e10:	b510      	push	{r4, lr}
   b7e12:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7e14:	bf9c      	itt	ls
   b7e16:	340e      	addls	r4, #14
   b7e18:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7e1a:	4620      	mov	r0, r4
   b7e1c:	f7ff ff7c 	bl	b7d18 <pinAvailable>
   b7e20:	b150      	cbz	r0, b7e38 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7e22:	2103      	movs	r1, #3
   b7e24:	4620      	mov	r0, r4
   b7e26:	f7fe ff01 	bl	b6c2c <HAL_Validate_Pin_Function>
   b7e2a:	2803      	cmp	r0, #3
   b7e2c:	d104      	bne.n	b7e38 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7e2e:	4620      	mov	r0, r4
}
   b7e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7e34:	f7fe bf32 	b.w	b6c9c <hal_adc_read>
}
   b7e38:	2000      	movs	r0, #0
   b7e3a:	bd10      	pop	{r4, pc}

000b7e3c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b7e3c:	f7fe bf36 	b.w	b6cac <HAL_Pulse_In>

000b7e40 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e40:	4770      	bx	lr
	...

000b7e44 <_Z17acquireWireBufferv>:
{
   b7e44:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7e46:	2520      	movs	r5, #32
   b7e48:	2314      	movs	r3, #20
{
   b7e4a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7e4c:	6003      	str	r3, [r0, #0]
   b7e4e:	6085      	str	r5, [r0, #8]
   b7e50:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7e52:	4906      	ldr	r1, [pc, #24]	; (b7e6c <_Z17acquireWireBufferv+0x28>)
   b7e54:	4628      	mov	r0, r5
   b7e56:	f000 f86f 	bl	b7f38 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7e5a:	4904      	ldr	r1, [pc, #16]	; (b7e6c <_Z17acquireWireBufferv+0x28>)
	};
   b7e5c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7e5e:	4628      	mov	r0, r5
   b7e60:	f000 f86a 	bl	b7f38 <_ZnajRKSt9nothrow_t>
	};
   b7e64:	60e0      	str	r0, [r4, #12]
}
   b7e66:	4620      	mov	r0, r4
   b7e68:	bd38      	pop	{r3, r4, r5, pc}
   b7e6a:	bf00      	nop
   b7e6c:	000b9768 	.word	0x000b9768

000b7e70 <_Z19__fetch_global_Wirev>:
{
   b7e70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e72:	4d0e      	ldr	r5, [pc, #56]	; (b7eac <_Z19__fetch_global_Wirev+0x3c>)
   b7e74:	7829      	ldrb	r1, [r5, #0]
   b7e76:	f3bf 8f5b 	dmb	ish
   b7e7a:	f011 0401 	ands.w	r4, r1, #1
{
   b7e7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e80:	d111      	bne.n	b7ea6 <_Z19__fetch_global_Wirev+0x36>
   b7e82:	4628      	mov	r0, r5
   b7e84:	f7fc f914 	bl	b40b0 <__cxa_guard_acquire>
   b7e88:	b168      	cbz	r0, b7ea6 <_Z19__fetch_global_Wirev+0x36>
   b7e8a:	a801      	add	r0, sp, #4
   b7e8c:	f7ff ffda 	bl	b7e44 <_Z17acquireWireBufferv>
   b7e90:	aa01      	add	r2, sp, #4
   b7e92:	4621      	mov	r1, r4
   b7e94:	4806      	ldr	r0, [pc, #24]	; (b7eb0 <_Z19__fetch_global_Wirev+0x40>)
   b7e96:	f7ff f9a5 	bl	b71e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7e9a:	4628      	mov	r0, r5
   b7e9c:	f7fc f90d 	bl	b40ba <__cxa_guard_release>
   b7ea0:	4804      	ldr	r0, [pc, #16]	; (b7eb4 <_Z19__fetch_global_Wirev+0x44>)
   b7ea2:	f000 fa07 	bl	b82b4 <atexit>
	return wire;
}
   b7ea6:	4802      	ldr	r0, [pc, #8]	; (b7eb0 <_Z19__fetch_global_Wirev+0x40>)
   b7ea8:	b007      	add	sp, #28
   b7eaa:	bd30      	pop	{r4, r5, pc}
   b7eac:	2003e72c 	.word	0x2003e72c
   b7eb0:	2003e730 	.word	0x2003e730
   b7eb4:	000b7e41 	.word	0x000b7e41

000b7eb8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7eb8:	4770      	bx	lr
	...

000b7ebc <_Z20acquireSerial1Bufferv>:
{
   b7ebc:	b538      	push	{r3, r4, r5, lr}
   b7ebe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7ec0:	2514      	movs	r5, #20
   b7ec2:	462a      	mov	r2, r5
   b7ec4:	2100      	movs	r1, #0
   b7ec6:	f000 fa11 	bl	b82ec <memset>
   b7eca:	8025      	strh	r5, [r4, #0]
   b7ecc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ece:	4907      	ldr	r1, [pc, #28]	; (b7eec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7ed0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ed2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7ed4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ed6:	f000 f82f 	bl	b7f38 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7eda:	4904      	ldr	r1, [pc, #16]	; (b7eec <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7edc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7ede:	4628      	mov	r0, r5
   b7ee0:	f000 f82a 	bl	b7f38 <_ZnajRKSt9nothrow_t>
    };
   b7ee4:	60e0      	str	r0, [r4, #12]
}
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	bd38      	pop	{r3, r4, r5, pc}
   b7eea:	bf00      	nop
   b7eec:	000b9768 	.word	0x000b9768

000b7ef0 <_Z22__fetch_global_Serial1v>:
{
   b7ef0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7ef2:	4d0e      	ldr	r5, [pc, #56]	; (b7f2c <_Z22__fetch_global_Serial1v+0x3c>)
   b7ef4:	7829      	ldrb	r1, [r5, #0]
   b7ef6:	f3bf 8f5b 	dmb	ish
   b7efa:	f011 0401 	ands.w	r4, r1, #1
{
   b7efe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f00:	d111      	bne.n	b7f26 <_Z22__fetch_global_Serial1v+0x36>
   b7f02:	4628      	mov	r0, r5
   b7f04:	f7fc f8d4 	bl	b40b0 <__cxa_guard_acquire>
   b7f08:	b168      	cbz	r0, b7f26 <_Z22__fetch_global_Serial1v+0x36>
   b7f0a:	a801      	add	r0, sp, #4
   b7f0c:	f7ff ffd6 	bl	b7ebc <_Z20acquireSerial1Bufferv>
   b7f10:	aa01      	add	r2, sp, #4
   b7f12:	4621      	mov	r1, r4
   b7f14:	4806      	ldr	r0, [pc, #24]	; (b7f30 <_Z22__fetch_global_Serial1v+0x40>)
   b7f16:	f7ff fd41 	bl	b799c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f1a:	4628      	mov	r0, r5
   b7f1c:	f7fc f8cd 	bl	b40ba <__cxa_guard_release>
   b7f20:	4804      	ldr	r0, [pc, #16]	; (b7f34 <_Z22__fetch_global_Serial1v+0x44>)
   b7f22:	f000 f9c7 	bl	b82b4 <atexit>
    return serial1;
}
   b7f26:	4802      	ldr	r0, [pc, #8]	; (b7f30 <_Z22__fetch_global_Serial1v+0x40>)
   b7f28:	b007      	add	sp, #28
   b7f2a:	bd30      	pop	{r4, r5, pc}
   b7f2c:	2003e744 	.word	0x2003e744
   b7f30:	2003e748 	.word	0x2003e748
   b7f34:	000b7eb9 	.word	0x000b7eb9

000b7f38 <_ZnajRKSt9nothrow_t>:
   b7f38:	f7fc b8ab 	b.w	b4092 <_Znaj>

000b7f3c <__aeabi_drsub>:
   b7f3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7f40:	e002      	b.n	b7f48 <__adddf3>
   b7f42:	bf00      	nop

000b7f44 <__aeabi_dsub>:
   b7f44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7f48 <__adddf3>:
   b7f48:	b530      	push	{r4, r5, lr}
   b7f4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7f4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7f52:	ea94 0f05 	teq	r4, r5
   b7f56:	bf08      	it	eq
   b7f58:	ea90 0f02 	teqeq	r0, r2
   b7f5c:	bf1f      	itttt	ne
   b7f5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7f62:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7f66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7f6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7f6e:	f000 80e2 	beq.w	b8136 <__adddf3+0x1ee>
   b7f72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7f76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7f7a:	bfb8      	it	lt
   b7f7c:	426d      	neglt	r5, r5
   b7f7e:	dd0c      	ble.n	b7f9a <__adddf3+0x52>
   b7f80:	442c      	add	r4, r5
   b7f82:	ea80 0202 	eor.w	r2, r0, r2
   b7f86:	ea81 0303 	eor.w	r3, r1, r3
   b7f8a:	ea82 0000 	eor.w	r0, r2, r0
   b7f8e:	ea83 0101 	eor.w	r1, r3, r1
   b7f92:	ea80 0202 	eor.w	r2, r0, r2
   b7f96:	ea81 0303 	eor.w	r3, r1, r3
   b7f9a:	2d36      	cmp	r5, #54	; 0x36
   b7f9c:	bf88      	it	hi
   b7f9e:	bd30      	pophi	{r4, r5, pc}
   b7fa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7fa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7fa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7fac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7fb0:	d002      	beq.n	b7fb8 <__adddf3+0x70>
   b7fb2:	4240      	negs	r0, r0
   b7fb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7fb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7fc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7fc4:	d002      	beq.n	b7fcc <__adddf3+0x84>
   b7fc6:	4252      	negs	r2, r2
   b7fc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7fcc:	ea94 0f05 	teq	r4, r5
   b7fd0:	f000 80a7 	beq.w	b8122 <__adddf3+0x1da>
   b7fd4:	f1a4 0401 	sub.w	r4, r4, #1
   b7fd8:	f1d5 0e20 	rsbs	lr, r5, #32
   b7fdc:	db0d      	blt.n	b7ffa <__adddf3+0xb2>
   b7fde:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7fe2:	fa22 f205 	lsr.w	r2, r2, r5
   b7fe6:	1880      	adds	r0, r0, r2
   b7fe8:	f141 0100 	adc.w	r1, r1, #0
   b7fec:	fa03 f20e 	lsl.w	r2, r3, lr
   b7ff0:	1880      	adds	r0, r0, r2
   b7ff2:	fa43 f305 	asr.w	r3, r3, r5
   b7ff6:	4159      	adcs	r1, r3
   b7ff8:	e00e      	b.n	b8018 <__adddf3+0xd0>
   b7ffa:	f1a5 0520 	sub.w	r5, r5, #32
   b7ffe:	f10e 0e20 	add.w	lr, lr, #32
   b8002:	2a01      	cmp	r2, #1
   b8004:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8008:	bf28      	it	cs
   b800a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b800e:	fa43 f305 	asr.w	r3, r3, r5
   b8012:	18c0      	adds	r0, r0, r3
   b8014:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8018:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b801c:	d507      	bpl.n	b802e <__adddf3+0xe6>
   b801e:	f04f 0e00 	mov.w	lr, #0
   b8022:	f1dc 0c00 	rsbs	ip, ip, #0
   b8026:	eb7e 0000 	sbcs.w	r0, lr, r0
   b802a:	eb6e 0101 	sbc.w	r1, lr, r1
   b802e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8032:	d31b      	bcc.n	b806c <__adddf3+0x124>
   b8034:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8038:	d30c      	bcc.n	b8054 <__adddf3+0x10c>
   b803a:	0849      	lsrs	r1, r1, #1
   b803c:	ea5f 0030 	movs.w	r0, r0, rrx
   b8040:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8044:	f104 0401 	add.w	r4, r4, #1
   b8048:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b804c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8050:	f080 809a 	bcs.w	b8188 <__adddf3+0x240>
   b8054:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8058:	bf08      	it	eq
   b805a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b805e:	f150 0000 	adcs.w	r0, r0, #0
   b8062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8066:	ea41 0105 	orr.w	r1, r1, r5
   b806a:	bd30      	pop	{r4, r5, pc}
   b806c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8070:	4140      	adcs	r0, r0
   b8072:	eb41 0101 	adc.w	r1, r1, r1
   b8076:	3c01      	subs	r4, #1
   b8078:	bf28      	it	cs
   b807a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b807e:	d2e9      	bcs.n	b8054 <__adddf3+0x10c>
   b8080:	f091 0f00 	teq	r1, #0
   b8084:	bf04      	itt	eq
   b8086:	4601      	moveq	r1, r0
   b8088:	2000      	moveq	r0, #0
   b808a:	fab1 f381 	clz	r3, r1
   b808e:	bf08      	it	eq
   b8090:	3320      	addeq	r3, #32
   b8092:	f1a3 030b 	sub.w	r3, r3, #11
   b8096:	f1b3 0220 	subs.w	r2, r3, #32
   b809a:	da0c      	bge.n	b80b6 <__adddf3+0x16e>
   b809c:	320c      	adds	r2, #12
   b809e:	dd08      	ble.n	b80b2 <__adddf3+0x16a>
   b80a0:	f102 0c14 	add.w	ip, r2, #20
   b80a4:	f1c2 020c 	rsb	r2, r2, #12
   b80a8:	fa01 f00c 	lsl.w	r0, r1, ip
   b80ac:	fa21 f102 	lsr.w	r1, r1, r2
   b80b0:	e00c      	b.n	b80cc <__adddf3+0x184>
   b80b2:	f102 0214 	add.w	r2, r2, #20
   b80b6:	bfd8      	it	le
   b80b8:	f1c2 0c20 	rsble	ip, r2, #32
   b80bc:	fa01 f102 	lsl.w	r1, r1, r2
   b80c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b80c4:	bfdc      	itt	le
   b80c6:	ea41 010c 	orrle.w	r1, r1, ip
   b80ca:	4090      	lslle	r0, r2
   b80cc:	1ae4      	subs	r4, r4, r3
   b80ce:	bfa2      	ittt	ge
   b80d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b80d4:	4329      	orrge	r1, r5
   b80d6:	bd30      	popge	{r4, r5, pc}
   b80d8:	ea6f 0404 	mvn.w	r4, r4
   b80dc:	3c1f      	subs	r4, #31
   b80de:	da1c      	bge.n	b811a <__adddf3+0x1d2>
   b80e0:	340c      	adds	r4, #12
   b80e2:	dc0e      	bgt.n	b8102 <__adddf3+0x1ba>
   b80e4:	f104 0414 	add.w	r4, r4, #20
   b80e8:	f1c4 0220 	rsb	r2, r4, #32
   b80ec:	fa20 f004 	lsr.w	r0, r0, r4
   b80f0:	fa01 f302 	lsl.w	r3, r1, r2
   b80f4:	ea40 0003 	orr.w	r0, r0, r3
   b80f8:	fa21 f304 	lsr.w	r3, r1, r4
   b80fc:	ea45 0103 	orr.w	r1, r5, r3
   b8100:	bd30      	pop	{r4, r5, pc}
   b8102:	f1c4 040c 	rsb	r4, r4, #12
   b8106:	f1c4 0220 	rsb	r2, r4, #32
   b810a:	fa20 f002 	lsr.w	r0, r0, r2
   b810e:	fa01 f304 	lsl.w	r3, r1, r4
   b8112:	ea40 0003 	orr.w	r0, r0, r3
   b8116:	4629      	mov	r1, r5
   b8118:	bd30      	pop	{r4, r5, pc}
   b811a:	fa21 f004 	lsr.w	r0, r1, r4
   b811e:	4629      	mov	r1, r5
   b8120:	bd30      	pop	{r4, r5, pc}
   b8122:	f094 0f00 	teq	r4, #0
   b8126:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b812a:	bf06      	itte	eq
   b812c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8130:	3401      	addeq	r4, #1
   b8132:	3d01      	subne	r5, #1
   b8134:	e74e      	b.n	b7fd4 <__adddf3+0x8c>
   b8136:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b813a:	bf18      	it	ne
   b813c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8140:	d029      	beq.n	b8196 <__adddf3+0x24e>
   b8142:	ea94 0f05 	teq	r4, r5
   b8146:	bf08      	it	eq
   b8148:	ea90 0f02 	teqeq	r0, r2
   b814c:	d005      	beq.n	b815a <__adddf3+0x212>
   b814e:	ea54 0c00 	orrs.w	ip, r4, r0
   b8152:	bf04      	itt	eq
   b8154:	4619      	moveq	r1, r3
   b8156:	4610      	moveq	r0, r2
   b8158:	bd30      	pop	{r4, r5, pc}
   b815a:	ea91 0f03 	teq	r1, r3
   b815e:	bf1e      	ittt	ne
   b8160:	2100      	movne	r1, #0
   b8162:	2000      	movne	r0, #0
   b8164:	bd30      	popne	{r4, r5, pc}
   b8166:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b816a:	d105      	bne.n	b8178 <__adddf3+0x230>
   b816c:	0040      	lsls	r0, r0, #1
   b816e:	4149      	adcs	r1, r1
   b8170:	bf28      	it	cs
   b8172:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8176:	bd30      	pop	{r4, r5, pc}
   b8178:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b817c:	bf3c      	itt	cc
   b817e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8182:	bd30      	popcc	{r4, r5, pc}
   b8184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8188:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b818c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8190:	f04f 0000 	mov.w	r0, #0
   b8194:	bd30      	pop	{r4, r5, pc}
   b8196:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b819a:	bf1a      	itte	ne
   b819c:	4619      	movne	r1, r3
   b819e:	4610      	movne	r0, r2
   b81a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b81a4:	bf1c      	itt	ne
   b81a6:	460b      	movne	r3, r1
   b81a8:	4602      	movne	r2, r0
   b81aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b81ae:	bf06      	itte	eq
   b81b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b81b4:	ea91 0f03 	teqeq	r1, r3
   b81b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b81bc:	bd30      	pop	{r4, r5, pc}
   b81be:	bf00      	nop

000b81c0 <__aeabi_ui2d>:
   b81c0:	f090 0f00 	teq	r0, #0
   b81c4:	bf04      	itt	eq
   b81c6:	2100      	moveq	r1, #0
   b81c8:	4770      	bxeq	lr
   b81ca:	b530      	push	{r4, r5, lr}
   b81cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b81d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b81d4:	f04f 0500 	mov.w	r5, #0
   b81d8:	f04f 0100 	mov.w	r1, #0
   b81dc:	e750      	b.n	b8080 <__adddf3+0x138>
   b81de:	bf00      	nop

000b81e0 <__aeabi_i2d>:
   b81e0:	f090 0f00 	teq	r0, #0
   b81e4:	bf04      	itt	eq
   b81e6:	2100      	moveq	r1, #0
   b81e8:	4770      	bxeq	lr
   b81ea:	b530      	push	{r4, r5, lr}
   b81ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b81f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b81f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b81f8:	bf48      	it	mi
   b81fa:	4240      	negmi	r0, r0
   b81fc:	f04f 0100 	mov.w	r1, #0
   b8200:	e73e      	b.n	b8080 <__adddf3+0x138>
   b8202:	bf00      	nop

000b8204 <__aeabi_f2d>:
   b8204:	0042      	lsls	r2, r0, #1
   b8206:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b820a:	ea4f 0131 	mov.w	r1, r1, rrx
   b820e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8212:	bf1f      	itttt	ne
   b8214:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b821c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8220:	4770      	bxne	lr
   b8222:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8226:	bf08      	it	eq
   b8228:	4770      	bxeq	lr
   b822a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b822e:	bf04      	itt	eq
   b8230:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8234:	4770      	bxeq	lr
   b8236:	b530      	push	{r4, r5, lr}
   b8238:	f44f 7460 	mov.w	r4, #896	; 0x380
   b823c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8240:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8244:	e71c      	b.n	b8080 <__adddf3+0x138>
   b8246:	bf00      	nop

000b8248 <__aeabi_ul2d>:
   b8248:	ea50 0201 	orrs.w	r2, r0, r1
   b824c:	bf08      	it	eq
   b824e:	4770      	bxeq	lr
   b8250:	b530      	push	{r4, r5, lr}
   b8252:	f04f 0500 	mov.w	r5, #0
   b8256:	e00a      	b.n	b826e <__aeabi_l2d+0x16>

000b8258 <__aeabi_l2d>:
   b8258:	ea50 0201 	orrs.w	r2, r0, r1
   b825c:	bf08      	it	eq
   b825e:	4770      	bxeq	lr
   b8260:	b530      	push	{r4, r5, lr}
   b8262:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8266:	d502      	bpl.n	b826e <__aeabi_l2d+0x16>
   b8268:	4240      	negs	r0, r0
   b826a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b826e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8272:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8276:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b827a:	f43f aed8 	beq.w	b802e <__adddf3+0xe6>
   b827e:	f04f 0203 	mov.w	r2, #3
   b8282:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8286:	bf18      	it	ne
   b8288:	3203      	addne	r2, #3
   b828a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b828e:	bf18      	it	ne
   b8290:	3203      	addne	r2, #3
   b8292:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8296:	f1c2 0320 	rsb	r3, r2, #32
   b829a:	fa00 fc03 	lsl.w	ip, r0, r3
   b829e:	fa20 f002 	lsr.w	r0, r0, r2
   b82a2:	fa01 fe03 	lsl.w	lr, r1, r3
   b82a6:	ea40 000e 	orr.w	r0, r0, lr
   b82aa:	fa21 f102 	lsr.w	r1, r1, r2
   b82ae:	4414      	add	r4, r2
   b82b0:	e6bd      	b.n	b802e <__adddf3+0xe6>
   b82b2:	bf00      	nop

000b82b4 <atexit>:
   b82b4:	2300      	movs	r3, #0
   b82b6:	4601      	mov	r1, r0
   b82b8:	461a      	mov	r2, r3
   b82ba:	4618      	mov	r0, r3
   b82bc:	f000 b8c8 	b.w	b8450 <__register_exitproc>

000b82c0 <calloc>:
   b82c0:	4b02      	ldr	r3, [pc, #8]	; (b82cc <calloc+0xc>)
   b82c2:	460a      	mov	r2, r1
   b82c4:	4601      	mov	r1, r0
   b82c6:	6818      	ldr	r0, [r3, #0]
   b82c8:	f000 b818 	b.w	b82fc <_calloc_r>
   b82cc:	2003e56c 	.word	0x2003e56c

000b82d0 <memcpy>:
   b82d0:	440a      	add	r2, r1
   b82d2:	4291      	cmp	r1, r2
   b82d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b82d8:	d100      	bne.n	b82dc <memcpy+0xc>
   b82da:	4770      	bx	lr
   b82dc:	b510      	push	{r4, lr}
   b82de:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82e6:	4291      	cmp	r1, r2
   b82e8:	d1f9      	bne.n	b82de <memcpy+0xe>
   b82ea:	bd10      	pop	{r4, pc}

000b82ec <memset>:
   b82ec:	4402      	add	r2, r0
   b82ee:	4603      	mov	r3, r0
   b82f0:	4293      	cmp	r3, r2
   b82f2:	d100      	bne.n	b82f6 <memset+0xa>
   b82f4:	4770      	bx	lr
   b82f6:	f803 1b01 	strb.w	r1, [r3], #1
   b82fa:	e7f9      	b.n	b82f0 <memset+0x4>

000b82fc <_calloc_r>:
   b82fc:	b513      	push	{r0, r1, r4, lr}
   b82fe:	434a      	muls	r2, r1
   b8300:	4611      	mov	r1, r2
   b8302:	9201      	str	r2, [sp, #4]
   b8304:	f7fe fec6 	bl	b7094 <_malloc_r>
   b8308:	4604      	mov	r4, r0
   b830a:	b118      	cbz	r0, b8314 <_calloc_r+0x18>
   b830c:	9a01      	ldr	r2, [sp, #4]
   b830e:	2100      	movs	r1, #0
   b8310:	f7ff ffec 	bl	b82ec <memset>
   b8314:	4620      	mov	r0, r4
   b8316:	b002      	add	sp, #8
   b8318:	bd10      	pop	{r4, pc}
	...

000b831c <srand>:
   b831c:	b538      	push	{r3, r4, r5, lr}
   b831e:	4b10      	ldr	r3, [pc, #64]	; (b8360 <srand+0x44>)
   b8320:	681d      	ldr	r5, [r3, #0]
   b8322:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8324:	4604      	mov	r4, r0
   b8326:	b9b3      	cbnz	r3, b8356 <srand+0x3a>
   b8328:	2018      	movs	r0, #24
   b832a:	f7fe fe8b 	bl	b7044 <malloc>
   b832e:	4602      	mov	r2, r0
   b8330:	63a8      	str	r0, [r5, #56]	; 0x38
   b8332:	b920      	cbnz	r0, b833e <srand+0x22>
   b8334:	4b0b      	ldr	r3, [pc, #44]	; (b8364 <srand+0x48>)
   b8336:	480c      	ldr	r0, [pc, #48]	; (b8368 <srand+0x4c>)
   b8338:	2142      	movs	r1, #66	; 0x42
   b833a:	f7fe feb3 	bl	b70a4 <__assert_func>
   b833e:	490b      	ldr	r1, [pc, #44]	; (b836c <srand+0x50>)
   b8340:	4b0b      	ldr	r3, [pc, #44]	; (b8370 <srand+0x54>)
   b8342:	e9c0 1300 	strd	r1, r3, [r0]
   b8346:	4b0b      	ldr	r3, [pc, #44]	; (b8374 <srand+0x58>)
   b8348:	6083      	str	r3, [r0, #8]
   b834a:	230b      	movs	r3, #11
   b834c:	8183      	strh	r3, [r0, #12]
   b834e:	2100      	movs	r1, #0
   b8350:	2001      	movs	r0, #1
   b8352:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8356:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8358:	2200      	movs	r2, #0
   b835a:	611c      	str	r4, [r3, #16]
   b835c:	615a      	str	r2, [r3, #20]
   b835e:	bd38      	pop	{r3, r4, r5, pc}
   b8360:	2003e56c 	.word	0x2003e56c
   b8364:	000b9769 	.word	0x000b9769
   b8368:	000b9780 	.word	0x000b9780
   b836c:	abcd330e 	.word	0xabcd330e
   b8370:	e66d1234 	.word	0xe66d1234
   b8374:	0005deec 	.word	0x0005deec

000b8378 <strcpy>:
   b8378:	4603      	mov	r3, r0
   b837a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b837e:	f803 2b01 	strb.w	r2, [r3], #1
   b8382:	2a00      	cmp	r2, #0
   b8384:	d1f9      	bne.n	b837a <strcpy+0x2>
   b8386:	4770      	bx	lr

000b8388 <strlen>:
   b8388:	4603      	mov	r3, r0
   b838a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b838e:	2a00      	cmp	r2, #0
   b8390:	d1fb      	bne.n	b838a <strlen+0x2>
   b8392:	1a18      	subs	r0, r3, r0
   b8394:	3801      	subs	r0, #1
   b8396:	4770      	bx	lr

000b8398 <strtok>:
   b8398:	4b16      	ldr	r3, [pc, #88]	; (b83f4 <strtok+0x5c>)
   b839a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b839c:	681e      	ldr	r6, [r3, #0]
   b839e:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b83a0:	4605      	mov	r5, r0
   b83a2:	b9fc      	cbnz	r4, b83e4 <strtok+0x4c>
   b83a4:	2050      	movs	r0, #80	; 0x50
   b83a6:	9101      	str	r1, [sp, #4]
   b83a8:	f7fe fe4c 	bl	b7044 <malloc>
   b83ac:	9901      	ldr	r1, [sp, #4]
   b83ae:	65b0      	str	r0, [r6, #88]	; 0x58
   b83b0:	4602      	mov	r2, r0
   b83b2:	b920      	cbnz	r0, b83be <strtok+0x26>
   b83b4:	4b10      	ldr	r3, [pc, #64]	; (b83f8 <strtok+0x60>)
   b83b6:	4811      	ldr	r0, [pc, #68]	; (b83fc <strtok+0x64>)
   b83b8:	2157      	movs	r1, #87	; 0x57
   b83ba:	f7fe fe73 	bl	b70a4 <__assert_func>
   b83be:	e9c0 4400 	strd	r4, r4, [r0]
   b83c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b83c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b83ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b83ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b83d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b83d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b83da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b83de:	6184      	str	r4, [r0, #24]
   b83e0:	7704      	strb	r4, [r0, #28]
   b83e2:	6244      	str	r4, [r0, #36]	; 0x24
   b83e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b83e6:	2301      	movs	r3, #1
   b83e8:	4628      	mov	r0, r5
   b83ea:	b002      	add	sp, #8
   b83ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b83f0:	f000 b806 	b.w	b8400 <__strtok_r>
   b83f4:	2003e56c 	.word	0x2003e56c
   b83f8:	000b9769 	.word	0x000b9769
   b83fc:	000b97d9 	.word	0x000b97d9

000b8400 <__strtok_r>:
   b8400:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8402:	b908      	cbnz	r0, b8408 <__strtok_r+0x8>
   b8404:	6810      	ldr	r0, [r2, #0]
   b8406:	b188      	cbz	r0, b842c <__strtok_r+0x2c>
   b8408:	4604      	mov	r4, r0
   b840a:	4620      	mov	r0, r4
   b840c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8410:	460f      	mov	r7, r1
   b8412:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8416:	b91e      	cbnz	r6, b8420 <__strtok_r+0x20>
   b8418:	b965      	cbnz	r5, b8434 <__strtok_r+0x34>
   b841a:	6015      	str	r5, [r2, #0]
   b841c:	4628      	mov	r0, r5
   b841e:	e005      	b.n	b842c <__strtok_r+0x2c>
   b8420:	42b5      	cmp	r5, r6
   b8422:	d1f6      	bne.n	b8412 <__strtok_r+0x12>
   b8424:	2b00      	cmp	r3, #0
   b8426:	d1f0      	bne.n	b840a <__strtok_r+0xa>
   b8428:	6014      	str	r4, [r2, #0]
   b842a:	7003      	strb	r3, [r0, #0]
   b842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b842e:	461c      	mov	r4, r3
   b8430:	e00c      	b.n	b844c <__strtok_r+0x4c>
   b8432:	b915      	cbnz	r5, b843a <__strtok_r+0x3a>
   b8434:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8438:	460e      	mov	r6, r1
   b843a:	f816 5b01 	ldrb.w	r5, [r6], #1
   b843e:	42ab      	cmp	r3, r5
   b8440:	d1f7      	bne.n	b8432 <__strtok_r+0x32>
   b8442:	2b00      	cmp	r3, #0
   b8444:	d0f3      	beq.n	b842e <__strtok_r+0x2e>
   b8446:	2300      	movs	r3, #0
   b8448:	f804 3c01 	strb.w	r3, [r4, #-1]
   b844c:	6014      	str	r4, [r2, #0]
   b844e:	e7ed      	b.n	b842c <__strtok_r+0x2c>

000b8450 <__register_exitproc>:
   b8450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8454:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8510 <__register_exitproc+0xc0>
   b8458:	4606      	mov	r6, r0
   b845a:	f8d8 0000 	ldr.w	r0, [r8]
   b845e:	461f      	mov	r7, r3
   b8460:	460d      	mov	r5, r1
   b8462:	4691      	mov	r9, r2
   b8464:	f000 f856 	bl	b8514 <__retarget_lock_acquire_recursive>
   b8468:	4b25      	ldr	r3, [pc, #148]	; (b8500 <__register_exitproc+0xb0>)
   b846a:	681c      	ldr	r4, [r3, #0]
   b846c:	b934      	cbnz	r4, b847c <__register_exitproc+0x2c>
   b846e:	4c25      	ldr	r4, [pc, #148]	; (b8504 <__register_exitproc+0xb4>)
   b8470:	601c      	str	r4, [r3, #0]
   b8472:	4b25      	ldr	r3, [pc, #148]	; (b8508 <__register_exitproc+0xb8>)
   b8474:	b113      	cbz	r3, b847c <__register_exitproc+0x2c>
   b8476:	681b      	ldr	r3, [r3, #0]
   b8478:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b847c:	6863      	ldr	r3, [r4, #4]
   b847e:	2b1f      	cmp	r3, #31
   b8480:	dd07      	ble.n	b8492 <__register_exitproc+0x42>
   b8482:	f8d8 0000 	ldr.w	r0, [r8]
   b8486:	f000 f847 	bl	b8518 <__retarget_lock_release_recursive>
   b848a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8492:	b34e      	cbz	r6, b84e8 <__register_exitproc+0x98>
   b8494:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8498:	b988      	cbnz	r0, b84be <__register_exitproc+0x6e>
   b849a:	4b1c      	ldr	r3, [pc, #112]	; (b850c <__register_exitproc+0xbc>)
   b849c:	b923      	cbnz	r3, b84a8 <__register_exitproc+0x58>
   b849e:	f8d8 0000 	ldr.w	r0, [r8]
   b84a2:	f000 f838 	bl	b8516 <__retarget_lock_release>
   b84a6:	e7f0      	b.n	b848a <__register_exitproc+0x3a>
   b84a8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b84ac:	f7fe fdca 	bl	b7044 <malloc>
   b84b0:	2800      	cmp	r0, #0
   b84b2:	d0f4      	beq.n	b849e <__register_exitproc+0x4e>
   b84b4:	2300      	movs	r3, #0
   b84b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b84ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b84be:	6863      	ldr	r3, [r4, #4]
   b84c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b84c4:	2201      	movs	r2, #1
   b84c6:	409a      	lsls	r2, r3
   b84c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b84cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b84d0:	4313      	orrs	r3, r2
   b84d2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b84d6:	2e02      	cmp	r6, #2
   b84d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b84dc:	bf02      	ittt	eq
   b84de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b84e2:	4313      	orreq	r3, r2
   b84e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b84e8:	6863      	ldr	r3, [r4, #4]
   b84ea:	f8d8 0000 	ldr.w	r0, [r8]
   b84ee:	1c5a      	adds	r2, r3, #1
   b84f0:	3302      	adds	r3, #2
   b84f2:	6062      	str	r2, [r4, #4]
   b84f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b84f8:	f000 f80e 	bl	b8518 <__retarget_lock_release_recursive>
   b84fc:	2000      	movs	r0, #0
   b84fe:	e7c6      	b.n	b848e <__register_exitproc+0x3e>
   b8500:	2003e7e8 	.word	0x2003e7e8
   b8504:	2003e75c 	.word	0x2003e75c
   b8508:	00000000 	.word	0x00000000
   b850c:	000b7045 	.word	0x000b7045
   b8510:	2003e5d0 	.word	0x2003e5d0

000b8514 <__retarget_lock_acquire_recursive>:
   b8514:	4770      	bx	lr

000b8516 <__retarget_lock_release>:
   b8516:	4770      	bx	lr

000b8518 <__retarget_lock_release_recursive>:
   b8518:	4770      	bx	lr

000b851a <link_code_end>:
	...

000b851c <dynalib_user>:
   b851c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b852c:	0000 0000 4120 2000 0044 6553 736e 726f     .... A. D.Sensor
   b853c:	5020 636f 2061 6944 7473 6e61 6963 0061      Poca Distancia.
   b854c:	6553 736e 726f 4d20 6375 6168 4420 7369     Sensor Mucha Dis
   b855c:	6174 636e 6169 4f00 454c 3a44 5320 6e65     tancia.OLED: Sen
   b856c:	6f73 2072 754c 207a 3e2d 2520 0064 6553     sor Luz -> %d.Se
   b857c:	736e 726f 4e20 206f 754c 007a 6553 736e     nsor No Luz.Sens
   b858c:	726f 5320 2069 754c 007a 6553 736e 726f     or Si Luz.Sensor
   b859c:	4e20 206f 7552 6469 006f 6553 736e 726f      No Ruido.Sensor
   b85ac:	5320 2069 7552 6469 006f 6553 736e 726f      Si Ruido.Sensor
   b85bc:	4e20 206f 6f42 6f74 006e 6553 736e 726f      No Boton.Sensor
   b85cc:	5320 2069 6f42 6f74 006e 6553 736e 726f      Si Boton.Sensor
   b85dc:	4e20 206f 6f52 6174 6974 6f76 5300 6e65      No Rotativo.Sen
   b85ec:	6f73 2072 6953 5220 746f 7461 7669 006f     sor Si Rotativo.
   b85fc:	6553 736e 726f 5420 6d65 2e70 7246 6f69     Sensor Temp.Frio
   b860c:	5300 6e65 6f73 2072 6554 706d 542e 6d65     .Sensor Temp.Tem
   b861c:	6c70 6461 006f 6553 736e 726f 5420 6d65     plado.Sensor Tem
   b862c:	2e70 6143 6f6c 0072 6553 736e 726f 4420     p.Calor.Sensor D
   b863c:	7369 6174 636e 6169 4320 7265 6163 5300     istancia Cerca.S
   b864c:	6e65 6f73 2072 6944 7473 6e61 6963 2061     ensor Distancia 
   b865c:	654c 6f6a 0073 6553 736e 726f 6f4e 6156     Lejos.SensorNoVa
   b866c:	696c 6f64 7245 6f72 0072 4752 2d42 6556     lidoError.RGB-Ve
   b867c:	6472 2d65 6f52 6f6a 5200 4247 412d 616d     rde-Rojo.RGB-Ama
   b868c:	6972 6c6c 2d6f 6f4d 6172 6f64 5200 4247     rillo-Morado.RGB
   b869c:	412d 757a 2d6c 614e 6172 6a6e 0061 4752     -Azul-Naranja.RG
   b86ac:	2d42 6c42 6e69 006b 4752 2d42 6152 6e69     B-Blink.RGB-Rain
   b86bc:	6f42 0077 4752 2d42 6e4f 4f2d 6666 5a00     Bow.RGB-On-Off.Z
   b86cc:	6d75 6162 6f64 2072 6e4f 4f2d 6666 5a00     umbador On-Off.Z
   b86dc:	6d75 6162 6f64 2072 6c42 6e69 006b 6341     umbador Blink.Ac
   b86ec:	7574 6461 726f 6f4e 6156 696c 6f64 7245     tuadorNoValidoEr
   b86fc:	6f72 0072 494d 4146 4552 525f 6165 2864     ror.MIFARE_Read(
   b870c:	2029 6166 6c69 6465 203a 5000 4443 415f     ) failed: .PCD_A
   b871c:	7475 6568 746e 6369 7461 2865 2029 6166     uthenticate() fa
   b872c:	6c69 6465 203a 5400 6761 6e49 6f66 203a     iled: .TagInfo: 
   b873c:	7325 4300 6e6f 6365 6174 2072 6c61 7020     %s.Conectar al p
   b874c:	6575 7472 206f 3041 000a 6f43 656e 7463     uerto A0..Conect
   b875c:	7261 6120 206c 7570 7265 6f74 4120 0a32     ar al puerto A2.
   b876c:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b877c:	7472 206f 3441 000a 6f43 656e 7463 7261     rto A4..Conectar
   b878c:	6120 206c 7570 7265 6f74 4420 0a32 4300      al puerto D2..C
   b879c:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b87ac:	206f 3444 000a 6f43 656e 7463 7261 6120     o D4..Conectar a
   b87bc:	206c 7570 7265 6f74 4420 0a36 4500 7272     l puerto D6..Err
   b87cc:	726f 203a 6f4e 6820 7961 6d20 7361 7020     or: No hay mas p
   b87dc:	6575 7472 736f 6420 7369 6f70 696e 6c62     uertos disponibl
   b87ec:	7365 0a20 4100 5443 5649 5241 4c20 4445     es ..ACTIVAR LED
   b87fc:	4c00 4445 203a 4143 4553 3020 4c00 6465     .LED: CASE 0.Led
   b880c:	7245 6f72 4f72 7470 6f69 006e 6156 6f6c     ErrorOption.Valo
   b881c:	2072 6f6e 7620 6c61 6469 006f 6944 7473     r no valido.Dist
   b882c:	6e61 6963 3a61 2520 0064 6554 706d 203a     ancia: %d.Temp: 
   b883c:	6625 4900 766e 6c61 6469 6553 736e 726f     %f.InvalidSensor
   b884c:	7245 6f72 0072 7345 5320 6e65 6f73 0072     Error.Es Sensor.
   b885c:	7345 4120 7463 6175 6f64 0072 7345 4120     Es Actuador.Es A
   b886c:	616e 6f6c 6967 6f63 4500 2073 6944 6967     nalogico.Es Digi
   b887c:	6174 006c 6553 6520 7073 7265 2061 6361     tal.Se espera ac
   b888c:	7574 6461 726f 4500 7272 726f 203a 656e     tuador.Error: ne
   b889c:	6563 6173 6972 206f 6c61 6d20 6e65 736f     cesario al menos
   b88ac:	7520 206e 6573 736e 726f 2d00                 un sensor.-.

000b88b9 <_ZL4font>:
   b88b9:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b88c9:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b88d9:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b88e9:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b88f9:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8909:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8919:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8929:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8939:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8949:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8959:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8969:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8979:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8989:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8999:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b89a9:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b89b9:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b89c9:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b89d9:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b89e9:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b89f9:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8a09:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8a19:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8a29:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8a39:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8a49:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8a59:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8a69:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8a79:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8a89:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8a99:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8aa9:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8ab9:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8ac9:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8ad9:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8ae9:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8af9:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8b09:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8b19:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8b29:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8b39:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8b49:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8b59:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8b69:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8b79:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8b89:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8b99:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8ba9:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8bb9:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8bc9:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8bd9:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8be9:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8bf9:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8c09:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8c19:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8c29:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8c39:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8c49:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8c59:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8c69:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8c79:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8c89:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8c99:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8ca9:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8cb9:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8cc9:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8cd9:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8ce9:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8cf9:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8d09:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8d19:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8d29:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8d39:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8d49:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8d59:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8d69:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8d79:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8d89:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8d99:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8da9:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b8db9:	0000                                         ...

000b8dbc <_ZTV12Adafruit_GFX>:
	...
   b8dcc:	555d 000b 74a5 000b 409d 000b 4f63 000b     ]U...t...@..cO..
   b8ddc:	4f65 000b 4f97 000b 4f73 000b 4f85 000b     eO...O..sO...O..
   b8dec:	4ea5 000b 4f63 000b 518f 000b 518d 000b     .N..cO...Q...Q..
   b8dfc:	4faf 000b 4fed 000b 5027 000b 506d 000b     .O...O..'P..mP..
   b8e0c:	5089 000b 510d 000b 6564 6166 6c75 2074     .P...Q..default 
   b8e1c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b8e2c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b8e3c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b8e4c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8e58 <_ZTVN8particle11SPISettingsE>:
	...
   b8e60:	567d 000b 566b 000b 566d 000b               }V..kV..mV..

000b8e6c <_ZL12splash2_data>:
   b8e6c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b8e7c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b8e8c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b8ea8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b8eb8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8ec8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8ed8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8ee8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8ef8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8f08:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8f18:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8f28:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8f38:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8f48:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8f58:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8f68:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8f78:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8f88:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b8f98:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8fa8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b8fb8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8fc8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8fd8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8fe8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9000:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9010:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9020:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9030:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9040:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b904c <_ZL17sucreLogoNew_data>:
   b904c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b905c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b906c:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b907c:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b908c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b909c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b90ac:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b90bc:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b90cc:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b90dc:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b90ec:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b90fc:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b910c:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b911c:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b912c:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b913c:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b914c:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b915c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b916c:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b917c:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b918c:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b919c:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b91ac:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b91bc:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b91cc:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b91dc:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b91ec:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b91fc:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b920c:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b921c:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b922c:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b923c:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b924c:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b925c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b926c:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b927c:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b928c:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b929c:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b92ac:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b92bc:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b92cc:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b92dc:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b92ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b92fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b930c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b931c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b932c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b933c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b934c:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b935c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b936c:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b937c:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b938c:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b939c:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b93ac:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b93bc:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b93cc:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b93dc:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b93ec:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b93fc:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b940c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b941c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b942c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b943c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b944c <_ZTV16Adafruit_SSD1306>:
	...
   b9454:	56d1 000b 56e9 000b 555d 000b 74a5 000b     .V...V..]U...t..
   b9464:	56fd 000b 4f63 000b 4f65 000b 4f97 000b     .V..cO..eO...O..
   b9474:	4f73 000b 4f85 000b 4ea5 000b 4f63 000b     sO...O...N..cO..
   b9484:	518f 000b 588f 000b 5e2b 000b 5ddd 000b     .Q...X..+^...]..
   b9494:	5027 000b 506d 000b 5089 000b 510d 000b     'P..mP...P...Q..

000b94a4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b94a4:	8000 e0c0 f8f0 fefc                         ........

000b94ac <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b94ac:	0100 0703 1f0f 7f3f                         ......?.

000b94b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b94b4:	d5ae a880                                   ....

000b94b8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b94b8:	00d3 8d40                                   ..@.

000b94bc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b94bc:	0020 c8a1                                    ...

000b94c0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b94c0:	40db a6a4 af2e                              .@....

000b94c6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b94c6:	02da 8f81                                   ....

000b94ca <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b94ca:	12da                                         ...

000b94cd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b94cd:	02da                                         ...

000b94d0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b94d0:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
   b94e0:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
   b94f0:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
   b9500:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
   b9510:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
   b9520:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
   b9530:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
   b9540:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
   b9550:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
   b9560:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
   b9570:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
   b9580:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
   b9590:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
   b95a0:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
   b95b0:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
   b95c0:	2064 6977 6874 4e20 4b41 002e               d with NAK..

000b95cc <CSWTCH.84>:
   b95cc:	94e3 000b 94ec 000b 9504 000b 9519 000b     ................
   b95dc:	9533 000b 954f 000b 957e 000b 9590 000b     3...O...~.......
   b95ec:	95aa 000b                                   ....

000b95f0 <_ZTVN5spark13EthernetClassE>:
	...
   b95f8:	716f 000b 7165 000b 715b 000b 7151 000b     oq..eq..[q..Qq..
   b9608:	7145 000b 7139 000b 7381 000b 7389 000b     Eq..9q...s...s..
   b9618:	712d 000b 7125 000b 711b 000b 7111 000b     -q..%q...q...q..
   b9628:	73b9 000b                                   .s..

000b962c <_ZTV7TwoWire>:
	...
   b9634:	718d 000b 71d7 000b 71af 000b 718f 000b     .q...q...q...q..
   b9644:	71b7 000b 71bf 000b 71c7 000b 71cf 000b     .q...q...q...q..

000b9654 <_ZTV9IPAddress>:
	...
   b965c:	7251 000b 7241 000b 7243 000b 7061 0070     Qr..Ar..Cr..app.

000b966c <_ZTVN5spark12NetworkClassE>:
	...
   b9674:	7341 000b 734b 000b 7355 000b 735f 000b     As..Ks..Us.._s..
   b9684:	7369 000b 7375 000b 7381 000b 7389 000b     is..us...s...s..
   b9694:	7391 000b 739d 000b 73a5 000b 73af 000b     .s...s...s...s..
   b96a4:	73b9 000b                                   .s..

000b96a8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b96a8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b96b8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b96c8:	6d69 0065                                   ime.

000b96cc <_ZTV11USARTSerial>:
	...
   b96d4:	7921 000b 798d 000b 7965 000b 74a5 000b     !y...y..ey...t..
   b96e4:	7935 000b 7951 000b 7943 000b 795f 000b     5y..Qy..Cy.._y..
   b96f4:	7923 000b 7927 000b                         #y..'y..

000b96fc <_ZTV9USBSerial>:
	...
   b9704:	79cb 000b 7a33 000b 7a09 000b 74a5 000b     .y..3z...z...t..
   b9714:	79fb 000b 79cd 000b 79dd 000b 7a2d 000b     .y...y...y..-z..
   b9724:	79ed 000b 79c5 000b                         .y...y..

000b972c <_ZTVN5spark9WiFiClassE>:
	...
   b9734:	7b2b 000b 7b21 000b 7b17 000b 7acd 000b     +{..!{...{...z..
   b9744:	7b0b 000b 7aff 000b 7381 000b 7389 000b     .{...z...s...s..
   b9754:	7af3 000b 7aeb 000b 7ae1 000b 7ad7 000b     .z...z...z...z..
   b9764:	73b9 000b                                   .s..

000b9768 <_ZSt7nothrow>:
   b9768:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9778:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9788:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9798:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b97a8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b97b8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b97c8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b97d8:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b97e8:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b97f8:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b9808:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b9818:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b9828:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b9834 <link_const_variable_data_end>:
   b9834:	000b4e3d 	.word	0x000b4e3d
   b9838:	000b70cd 	.word	0x000b70cd
   b983c:	000b7179 	.word	0x000b7179
   b9840:	000b7331 	.word	0x000b7331
   b9844:	000b7491 	.word	0x000b7491
   b9848:	000b75cd 	.word	0x000b75cd
   b984c:	000b78e9 	.word	0x000b78e9
   b9850:	000b790d 	.word	0x000b790d
   b9854:	000b7b35 	.word	0x000b7b35

000b9858 <link_constructors_end>:
	...
