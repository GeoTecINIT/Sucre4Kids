
/Users/marcosgarciagarcia/Documents/Sucre/target/3.2.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004924  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b8940  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  2003df64  000b8944  0001df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007f8  2003dff8  2003dff8  0002dff8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b89d8  000b89d8  000289d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b8a00  000b8a00  00028a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014358e  00000000  00000000  00028a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00016276  00000000  00000000  0016bf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004bab9  00000000  00000000  00182208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003390  00000000  00000000  001cdcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b618  00000000  00000000  001d1051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003dcae  00000000  00000000  001dc669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0004e018  00000000  00000000  0021a317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00133237  00000000  00000000  0026832f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00009ae0  00000000  00000000  0039b568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f9b1 	bl	b7394 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f9b9 	bl	b73b0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df64 	.word	0x2003df64
   b4048:	000b8944 	.word	0x000b8944
   b404c:	2003dff8 	.word	0x2003dff8
   b4050:	2003dff8 	.word	0x2003dff8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f861 	bl	b7124 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8918 	.word	0x000b8918
   b407c:	000b893c 	.word	0x000b893c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba2c 	b.w	b44dc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa77 	bl	b4578 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b801 	b.w	b7094 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f002 ba13 	b.w	b64bc <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f002 ba19 	b.w	b64cc <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f002 f96e 	bl	b6384 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b60d5 	.word	0x000b60d5

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c0:	b40e      	push	{r1, r2, r3}
   b40c2:	b503      	push	{r0, r1, lr}
   b40c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40ce:	f002 fc84 	bl	b69da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d8:	b003      	add	sp, #12
   b40da:	4770      	bx	lr

000b40dc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b503      	push	{r0, r1, lr}
   b40e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ea:	f002 fc76 	bl	b69da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40ee:	b002      	add	sp, #8
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_Z12displayPrintbbiii>:
{
   return type == 0;
}

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40fa:	4607      	mov	r7, r0
   b40fc:	b089      	sub	sp, #36	; 0x24
   display.clearDisplay();
   b40fe:	4853      	ldr	r0, [pc, #332]	; (b424c <_Z12displayPrintbbiii+0x154>)
{
   b4100:	460e      	mov	r6, r1
   b4102:	4615      	mov	r5, r2
   b4104:	461c      	mov	r4, r3
   display.clearDisplay();
   b4106:	f001 f8f9 	bl	b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b410a:	2f00      	cmp	r7, #0
   b410c:	d077      	beq.n	b41fe <_Z12displayPrintbbiii+0x106>
   {
      switch (id)
   b410e:	3d01      	subs	r5, #1
   b4110:	2d06      	cmp	r5, #6
   b4112:	d86c      	bhi.n	b41ee <_Z12displayPrintbbiii+0xf6>
   b4114:	e8df f005 	tbb	[pc, r5]
   b4118:	504b4004 	.word	0x504b4004
   b411c:	5a55      	.short	0x5a55
   b411e:	66          	.byte	0x66
   b411f:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4120:	2c00      	cmp	r4, #0
   b4122:	d137      	bne.n	b4194 <_Z12displayPrintbbiii+0x9c>
   b4124:	494a      	ldr	r1, [pc, #296]	; (b4250 <_Z12displayPrintbbiii+0x158>)
         break;

      // Ruido
      case 3:
         // dispositivos[1] = "Sensor de Ruido";
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b4126:	484b      	ldr	r0, [pc, #300]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
            dispositivos[0] = "RGB-On-Off";
            break;
         }

      case 1:
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4128:	f002 fdb9 	bl	b6c9e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b412c:	4949      	ldr	r1, [pc, #292]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b412e:	4668      	mov	r0, sp
   b4130:	f002 fdaa 	bl	b6c88 <_ZN6StringC1ERKS_>
         Serial.println("ActuadorNoValidoError");
         break;
      }
   }

   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4134:	4b48      	ldr	r3, [pc, #288]	; (b4258 <_Z12displayPrintbbiii+0x160>)
   b4136:	4949      	ldr	r1, [pc, #292]	; (b425c <_Z12displayPrintbbiii+0x164>)
   b4138:	4668      	mov	r0, sp
   b413a:	2e00      	cmp	r6, #0
   b413c:	bf08      	it	eq
   b413e:	4619      	moveq	r1, r3
   b4140:	f002 fdf5 	bl	b6d2e <_ZplRK15StringSumHelperPKc>
   b4144:	990e      	ldr	r1, [sp, #56]	; 0x38
   b4146:	4604      	mov	r4, r0
   b4148:	220a      	movs	r2, #10
   b414a:	a804      	add	r0, sp, #16
   b414c:	f002 fdb9 	bl	b6cc2 <_ZN6StringC1Eih>
   b4150:	a904      	add	r1, sp, #16
   b4152:	4620      	mov	r0, r4
   b4154:	f002 fddf 	bl	b6d16 <_ZplRK15StringSumHelperRK6String>
   b4158:	2140      	movs	r1, #64	; 0x40
   b415a:	6802      	ldr	r2, [r0, #0]
   b415c:	4840      	ldr	r0, [pc, #256]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   display.println(buf);
   b415e:	4c3b      	ldr	r4, [pc, #236]	; (b424c <_Z12displayPrintbbiii+0x154>)
   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4160:	f002 f9c4 	bl	b64ec <snprintf>
   b4164:	a804      	add	r0, sp, #16
   b4166:	f002 fd21 	bl	b6bac <_ZN6StringD1Ev>
class StringSumHelper : public String
   b416a:	4668      	mov	r0, sp
   b416c:	f002 fd1e 	bl	b6bac <_ZN6StringD1Ev>
   display.println(buf);
   b4170:	493b      	ldr	r1, [pc, #236]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4172:	4620      	mov	r0, r4
   b4174:	f002 fc09 	bl	b698a <_ZN5Print7printlnEPKc>
	const char * c_str() const { return buffer; }
   b4178:	4b3a      	ldr	r3, [pc, #232]	; (b4264 <_Z12displayPrintbbiii+0x16c>)

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b417a:	4839      	ldr	r0, [pc, #228]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b417c:	681a      	ldr	r2, [r3, #0]
   b417e:	2140      	movs	r1, #64	; 0x40
   b4180:	f002 f9b4 	bl	b64ec <snprintf>
   display.println(buf);
   b4184:	4936      	ldr	r1, [pc, #216]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4186:	4620      	mov	r0, r4
   b4188:	f002 fbff 	bl	b698a <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b418c:	2300      	movs	r3, #0
   b418e:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b4190:	b009      	add	sp, #36	; 0x24
   b4192:	bdf0      	pop	{r4, r5, r6, r7, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4194:	4934      	ldr	r1, [pc, #208]	; (b4268 <_Z12displayPrintbbiii+0x170>)
   b4196:	e7c6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b4198:	f002 feaa 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b419c:	4933      	ldr	r1, [pc, #204]	; (b426c <_Z12displayPrintbbiii+0x174>)
   b419e:	4622      	mov	r2, r4
   b41a0:	f7ff ff9c 	bl	b40dc <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b41a4:	b90c      	cbnz	r4, b41aa <_Z12displayPrintbbiii+0xb2>
   b41a6:	4932      	ldr	r1, [pc, #200]	; (b4270 <_Z12displayPrintbbiii+0x178>)
   b41a8:	e7bd      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41aa:	4932      	ldr	r1, [pc, #200]	; (b4274 <_Z12displayPrintbbiii+0x17c>)
   b41ac:	e7bb      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b41ae:	b90c      	cbnz	r4, b41b4 <_Z12displayPrintbbiii+0xbc>
   b41b0:	4931      	ldr	r1, [pc, #196]	; (b4278 <_Z12displayPrintbbiii+0x180>)
   b41b2:	e7b8      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41b4:	4931      	ldr	r1, [pc, #196]	; (b427c <_Z12displayPrintbbiii+0x184>)
   b41b6:	e7b6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b41b8:	b90c      	cbnz	r4, b41be <_Z12displayPrintbbiii+0xc6>
   b41ba:	4931      	ldr	r1, [pc, #196]	; (b4280 <_Z12displayPrintbbiii+0x188>)
   b41bc:	e7b3      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41be:	4931      	ldr	r1, [pc, #196]	; (b4284 <_Z12displayPrintbbiii+0x18c>)
   b41c0:	e7b1      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b41c2:	b90c      	cbnz	r4, b41c8 <_Z12displayPrintbbiii+0xd0>
   b41c4:	4930      	ldr	r1, [pc, #192]	; (b4288 <_Z12displayPrintbbiii+0x190>)
   b41c6:	e7ae      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41c8:	4930      	ldr	r1, [pc, #192]	; (b428c <_Z12displayPrintbbiii+0x194>)
   b41ca:	e7ac      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         switch (condicion)
   b41cc:	2c01      	cmp	r4, #1
   b41ce:	d005      	beq.n	b41dc <_Z12displayPrintbbiii+0xe4>
   b41d0:	2c02      	cmp	r4, #2
   b41d2:	d005      	beq.n	b41e0 <_Z12displayPrintbbiii+0xe8>
   b41d4:	2c00      	cmp	r4, #0
   b41d6:	d1a9      	bne.n	b412c <_Z12displayPrintbbiii+0x34>
            dispositivos[1] = "Sensor Temp.Frio";
   b41d8:	492d      	ldr	r1, [pc, #180]	; (b4290 <_Z12displayPrintbbiii+0x198>)
   b41da:	e7a4      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Templado";
   b41dc:	492d      	ldr	r1, [pc, #180]	; (b4294 <_Z12displayPrintbbiii+0x19c>)
   b41de:	e7a2      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Calor";
   b41e0:	492d      	ldr	r1, [pc, #180]	; (b4298 <_Z12displayPrintbbiii+0x1a0>)
   b41e2:	e7a0      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41e4:	b94c      	cbnz	r4, b41fa <_Z12displayPrintbbiii+0x102>
   b41e6:	492d      	ldr	r1, [pc, #180]	; (b429c <_Z12displayPrintbbiii+0x1a4>)
   b41e8:	481a      	ldr	r0, [pc, #104]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b41ea:	f002 fd58 	bl	b6c9e <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b41ee:	f002 fe7f 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b41f2:	492b      	ldr	r1, [pc, #172]	; (b42a0 <_Z12displayPrintbbiii+0x1a8>)
         Serial.println("ActuadorNoValidoError");
   b41f4:	f002 fbc9 	bl	b698a <_ZN5Print7printlnEPKc>
         break;
   b41f8:	e798      	b.n	b412c <_Z12displayPrintbbiii+0x34>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41fa:	492a      	ldr	r1, [pc, #168]	; (b42a4 <_Z12displayPrintbbiii+0x1ac>)
   b41fc:	e7f4      	b.n	b41e8 <_Z12displayPrintbbiii+0xf0>
      switch (id)
   b41fe:	b12d      	cbz	r5, b420c <_Z12displayPrintbbiii+0x114>
   b4200:	2d01      	cmp	r5, #1
   b4202:	d01f      	beq.n	b4244 <_Z12displayPrintbbiii+0x14c>
         Serial.println("ActuadorNoValidoError");
   b4204:	f002 fe74 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4208:	4927      	ldr	r1, [pc, #156]	; (b42a8 <_Z12displayPrintbbiii+0x1b0>)
   b420a:	e7f3      	b.n	b41f4 <_Z12displayPrintbbiii+0xfc>
         switch (condicion)
   b420c:	2c05      	cmp	r4, #5
   b420e:	d80f      	bhi.n	b4230 <_Z12displayPrintbbiii+0x138>
   b4210:	e8df f004 	tbb	[pc, r4]
   b4214:	12100a03 	.word	0x12100a03
   b4218:	1614      	.short	0x1614
            dispositivos[0] = "RGB-Verde-Rojo";
   b421a:	4924      	ldr	r1, [pc, #144]	; (b42ac <_Z12displayPrintbbiii+0x1b4>)
   b421c:	4811      	ldr	r0, [pc, #68]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b421e:	f002 fd3e 	bl	b6c9e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4222:	4923      	ldr	r1, [pc, #140]	; (b42b0 <_Z12displayPrintbbiii+0x1b8>)
   b4224:	480f      	ldr	r0, [pc, #60]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b4226:	e77f      	b.n	b4128 <_Z12displayPrintbbiii+0x30>
            dispositivos[0] = "RGB-Amarillo-Morado";
   b4228:	4922      	ldr	r1, [pc, #136]	; (b42b4 <_Z12displayPrintbbiii+0x1bc>)
            dispositivos[0] = "RGB-Azul-Naranja";
   b422a:	480e      	ldr	r0, [pc, #56]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b422c:	f002 fd37 	bl	b6c9e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4230:	4921      	ldr	r1, [pc, #132]	; (b42b8 <_Z12displayPrintbbiii+0x1c0>)
   b4232:	e7f7      	b.n	b4224 <_Z12displayPrintbbiii+0x12c>
            dispositivos[0] = "RGB-Azul-Naranja";
   b4234:	4921      	ldr	r1, [pc, #132]	; (b42bc <_Z12displayPrintbbiii+0x1c4>)
   b4236:	e7f8      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-Blink";
   b4238:	4921      	ldr	r1, [pc, #132]	; (b42c0 <_Z12displayPrintbbiii+0x1c8>)
   b423a:	e7f6      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-RainBow";
   b423c:	4921      	ldr	r1, [pc, #132]	; (b42c4 <_Z12displayPrintbbiii+0x1cc>)
   b423e:	e7f4      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-On-Off";
   b4240:	4921      	ldr	r1, [pc, #132]	; (b42c8 <_Z12displayPrintbbiii+0x1d0>)
   b4242:	e7f2      	b.n	b422a <_Z12displayPrintbbiii+0x132>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4244:	2c00      	cmp	r4, #0
   b4246:	d0ec      	beq.n	b4222 <_Z12displayPrintbbiii+0x12a>
   b4248:	e7f2      	b.n	b4230 <_Z12displayPrintbbiii+0x138>
   b424a:	bf00      	nop
   b424c:	2003e620 	.word	0x2003e620
   b4250:	000b75fa 	.word	0x000b75fa
   b4254:	2003e680 	.word	0x2003e680
   b4258:	000b75f7 	.word	0x000b75f7
   b425c:	000b75f4 	.word	0x000b75f4
   b4260:	2003e5e0 	.word	0x2003e5e0
   b4264:	2003e670 	.word	0x2003e670
   b4268:	000b7610 	.word	0x000b7610
   b426c:	000b7627 	.word	0x000b7627
   b4270:	000b763e 	.word	0x000b763e
   b4274:	000b764c 	.word	0x000b764c
   b4278:	000b765a 	.word	0x000b765a
   b427c:	000b766a 	.word	0x000b766a
   b4280:	000b767a 	.word	0x000b767a
   b4284:	000b768a 	.word	0x000b768a
   b4288:	000b769a 	.word	0x000b769a
   b428c:	000b76ad 	.word	0x000b76ad
   b4290:	000b76c0 	.word	0x000b76c0
   b4294:	000b76d1 	.word	0x000b76d1
   b4298:	000b76e6 	.word	0x000b76e6
   b429c:	000b76f8 	.word	0x000b76f8
   b42a0:	000b7726 	.word	0x000b7726
   b42a4:	000b770f 	.word	0x000b770f
   b42a8:	000b77ae 	.word	0x000b77ae
   b42ac:	000b773a 	.word	0x000b773a
   b42b0:	000b778f 	.word	0x000b778f
   b42b4:	000b7749 	.word	0x000b7749
   b42b8:	000b779f 	.word	0x000b779f
   b42bc:	000b775d 	.word	0x000b775d
   b42c0:	000b776e 	.word	0x000b776e
   b42c4:	000b7778 	.word	0x000b7778
   b42c8:	000b7784 	.word	0x000b7784

000b42cc <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b42cc:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b42ce:	7803      	ldrb	r3, [r0, #0]
   b42d0:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b42d2:	bf0c      	ite	eq
   b42d4:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b42d6:	2200      	movne	r2, #0
   int i = 0;
   b42d8:	4613      	mov	r3, r2
   b42da:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b42dc:	240a      	movs	r4, #10
      i++;
   b42de:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42e0:	f813 1b01 	ldrb.w	r1, [r3], #1
   b42e4:	3930      	subs	r1, #48	; 0x30
   b42e6:	b2cd      	uxtb	r5, r1
   b42e8:	2d09      	cmp	r5, #9
   b42ea:	d802      	bhi.n	b42f2 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b42ec:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42f0:	e7f6      	b.n	b42e0 <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
   b42f2:	b102      	cbz	r2, b42f6 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b42f4:	4240      	negs	r0, r0
   return num;
}
   b42f6:	bd30      	pop	{r4, r5, pc}

000b42f8 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b42f8:	b570      	push	{r4, r5, r6, lr}
   b42fa:	4614      	mov	r4, r2
   b42fc:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b42fe:	f003 f8ad 	bl	b745c <strtok>
   int j = 0;
   b4302:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4304:	b140      	cbz	r0, b4318 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4306:	f7ff ffe1 	bl	b42cc <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b430a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b430c:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4310:	2000      	movs	r0, #0
   b4312:	f003 f8a3 	bl	b745c <strtok>
   while (ptr != NULL)
   b4316:	e7f5      	b.n	b4304 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	b913      	cbnz	r3, b4322 <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
   b431c:	4b01      	ldr	r3, [pc, #4]	; (b4324 <_Z5splitPcS_Pi+0x2c>)
   b431e:	2201      	movs	r2, #1
   b4320:	701a      	strb	r2, [r3, #0]
   }
}
   b4322:	bd70      	pop	{r4, r5, r6, pc}
   b4324:	2003e690 	.word	0x2003e690

000b4328 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b432a:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b432e:	f10d 0307 	add.w	r3, sp, #7
   b4332:	460a      	mov	r2, r1
   b4334:	4601      	mov	r1, r0
   b4336:	480d      	ldr	r0, [pc, #52]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4338:	4d0d      	ldr	r5, [pc, #52]	; (b4370 <_Z17readDataFromBlockhPhh+0x48>)
   b433a:	f001 fd17 	bl	b5d6c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b433e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4340:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4342:	d010      	beq.n	b4366 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4344:	f002 fdd4 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4348:	490a      	ldr	r1, [pc, #40]	; (b4374 <_Z17readDataFromBlockhPhh+0x4c>)
   b434a:	f002 fb0b 	bl	b6964 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b434e:	f002 fdcf 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4352:	7829      	ldrb	r1, [r5, #0]
   b4354:	4604      	mov	r4, r0
   b4356:	4805      	ldr	r0, [pc, #20]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4358:	f001 fa78 	bl	b584c <_ZN7MFRC52217GetStatusCodeNameEh>
   b435c:	4601      	mov	r1, r0
   b435e:	4620      	mov	r0, r4
   b4360:	f002 fb13 	bl	b698a <_ZN5Print7printlnEPKc>
   b4364:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b4366:	b003      	add	sp, #12
   b4368:	bd30      	pop	{r4, r5, pc}
   b436a:	bf00      	nop
   b436c:	2003e6a0 	.word	0x2003e6a0
   b4370:	2003e6c0 	.word	0x2003e6c0
   b4374:	000b77c4 	.word	0x000b77c4

000b4378 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4378:	b5f0      	push	{r4, r5, r6, r7, lr}
   b437a:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b437c:	4d1e      	ldr	r5, [pc, #120]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b437e:	4a1f      	ldr	r2, [pc, #124]	; (b43fc <_Z8getTagIDPi+0x84>)
   b4380:	9500      	str	r5, [sp, #0]
   b4382:	4b1f      	ldr	r3, [pc, #124]	; (b4400 <_Z8getTagIDPi+0x88>)
   b4384:	7812      	ldrb	r2, [r2, #0]
   b4386:	4f1f      	ldr	r7, [pc, #124]	; (b4404 <_Z8getTagIDPi+0x8c>)
{
   b4388:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b438a:	2160      	movs	r1, #96	; 0x60
   b438c:	4628      	mov	r0, r5
   b438e:	f001 fd0e 	bl	b5dae <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b4392:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4394:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b4396:	d00f      	beq.n	b43b8 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4398:	f002 fdaa 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b439c:	491a      	ldr	r1, [pc, #104]	; (b4408 <_Z8getTagIDPi+0x90>)
   b439e:	f002 fae1 	bl	b6964 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b43a2:	f002 fda5 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b43a6:	7839      	ldrb	r1, [r7, #0]
   b43a8:	4604      	mov	r4, r0
   b43aa:	4628      	mov	r0, r5
   b43ac:	f001 fa4e 	bl	b584c <_ZN7MFRC52217GetStatusCodeNameEh>
   b43b0:	4601      	mov	r1, r0
   b43b2:	4620      	mov	r0, r4
   b43b4:	f002 fae9 	bl	b698a <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b43b8:	4b14      	ldr	r3, [pc, #80]	; (b440c <_Z8getTagIDPi+0x94>)
   b43ba:	2212      	movs	r2, #18
   b43bc:	7818      	ldrb	r0, [r3, #0]
   b43be:	a907      	add	r1, sp, #28
   b43c0:	f7ff ffb2 	bl	b4328 <_Z17readDataFromBlockhPhh>
   b43c4:	b1b0      	cbz	r0, b43f4 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b43c6:	ac07      	add	r4, sp, #28
   b43c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b43ca:	ad03      	add	r5, sp, #12
   b43cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b43d2:	f002 fd8d 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b43d6:	490e      	ldr	r1, [pc, #56]	; (b4410 <_Z8getTagIDPi+0x98>)
   b43d8:	aa03      	add	r2, sp, #12
   b43da:	f7ff fe7f 	bl	b40dc <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b43de:	490d      	ldr	r1, [pc, #52]	; (b4414 <_Z8getTagIDPi+0x9c>)
   b43e0:	4632      	mov	r2, r6
   b43e2:	a803      	add	r0, sp, #12
   b43e4:	f7ff ff88 	bl	b42f8 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b43e8:	4803      	ldr	r0, [pc, #12]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43ea:	f001 fc9a 	bl	b5d22 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b43ee:	4802      	ldr	r0, [pc, #8]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43f0:	f001 faf7 	bl	b59e2 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b43f4:	b00d      	add	sp, #52	; 0x34
   b43f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43f8:	2003e6a0 	.word	0x2003e6a0
   b43fc:	2003df88 	.word	0x2003df88
   b4400:	2003e691 	.word	0x2003e691
   b4404:	2003e6c0 	.word	0x2003e6c0
   b4408:	000b77db 	.word	0x000b77db
   b440c:	2003df64 	.word	0x2003df64
   b4410:	000b77f7 	.word	0x000b77f7
   b4414:	2003df65 	.word	0x2003df65

000b4418 <_Z13asignarPuertoi>:

int asignarPuerto(int id)
{
   b4418:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
   b441a:	b940      	cbnz	r0, b442e <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b441c:	4b26      	ldr	r3, [pc, #152]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b441e:	681c      	ldr	r4, [r3, #0]
   }

   switch (option)
   b4420:	2c05      	cmp	r4, #5
   b4422:	d840      	bhi.n	b44a6 <_Z13asignarPuertoi+0x8e>
   b4424:	e8df f004 	tbb	[pc, r4]
   b4428:	261a0f05 	.word	0x261a0f05
   b442c:	342d      	.short	0x342d
      option = puertoDigital;
   b442e:	4b23      	ldr	r3, [pc, #140]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4430:	e7f5      	b.n	b441e <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4432:	f002 fd5d 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4436:	4922      	ldr	r1, [pc, #136]	; (b44c0 <_Z13asignarPuertoi+0xa8>)
   b4438:	f002 fa94 	bl	b6964 <_ZN5Print5printEPKc>

      puertoAnalogico++;
   b443c:	4a1e      	ldr	r2, [pc, #120]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      break;

   case 4:
      Serial.print("Conectar al puerto D4\n");

      puertoDigital++;
   b443e:	6813      	ldr	r3, [r2, #0]
   b4440:	3301      	adds	r3, #1
   b4442:	6013      	str	r3, [r2, #0]
      // Disp[0].pin = D4;
      // Disp[0].pin2 = D5;
      // statements executed if the expression equals the p_D4
      // value of this constant_expression               p_D5
      return 4;
   b4444:	e014      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b4446:	f002 fd53 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b444a:	491e      	ldr	r1, [pc, #120]	; (b44c4 <_Z13asignarPuertoi+0xac>)
   b444c:	f002 fa8a 	bl	b6964 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4450:	4a19      	ldr	r2, [pc, #100]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b4452:	6813      	ldr	r3, [r2, #0]
   b4454:	3301      	adds	r3, #1
   b4456:	6013      	str	r3, [r2, #0]
      return 2;
   b4458:	2402      	movs	r4, #2
   b445a:	e009      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b445c:	f002 fd48 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4460:	4919      	ldr	r1, [pc, #100]	; (b44c8 <_Z13asignarPuertoi+0xb0>)
   b4462:	f002 fa7f 	bl	b6964 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b4466:	4b14      	ldr	r3, [pc, #80]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   b4468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b446c:	601a      	str	r2, [r3, #0]
      return 4;
   b446e:	2404      	movs	r4, #4
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
   b4470:	4620      	mov	r0, r4
   b4472:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4474:	f002 fd3c 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4478:	4914      	ldr	r1, [pc, #80]	; (b44cc <_Z13asignarPuertoi+0xb4>)
   b447a:	f002 fa73 	bl	b6964 <_ZN5Print5printEPKc>
      puertoDigital++;
   b447e:	4a0f      	ldr	r2, [pc, #60]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4480:	e7e7      	b.n	b4452 <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b4482:	f002 fd35 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4486:	4912      	ldr	r1, [pc, #72]	; (b44d0 <_Z13asignarPuertoi+0xb8>)
   b4488:	f002 fa6c 	bl	b6964 <_ZN5Print5printEPKc>
      puertoDigital++;
   b448c:	4a0b      	ldr	r2, [pc, #44]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b448e:	e7d6      	b.n	b443e <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b4490:	f002 fd2e 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4494:	490f      	ldr	r1, [pc, #60]	; (b44d4 <_Z13asignarPuertoi+0xbc>)
   b4496:	f002 fa65 	bl	b6964 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b449a:	4b08      	ldr	r3, [pc, #32]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b449c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b44a0:	601a      	str	r2, [r3, #0]
      return 6;
   b44a2:	2406      	movs	r4, #6
   b44a4:	e7e4      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b44a6:	f002 fd23 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b44aa:	490b      	ldr	r1, [pc, #44]	; (b44d8 <_Z13asignarPuertoi+0xc0>)
   b44ac:	f002 fa5a 	bl	b6964 <_ZN5Print5printEPKc>
      return -1;
   b44b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b44b4:	e7dc      	b.n	b4470 <_Z13asignarPuertoi+0x58>
   b44b6:	bf00      	nop
   b44b8:	2003e6bc 	.word	0x2003e6bc
   b44bc:	2003df6c 	.word	0x2003df6c
   b44c0:	000b7803 	.word	0x000b7803
   b44c4:	000b781a 	.word	0x000b781a
   b44c8:	000b7831 	.word	0x000b7831
   b44cc:	000b7848 	.word	0x000b7848
   b44d0:	000b785f 	.word	0x000b785f
   b44d4:	000b7876 	.word	0x000b7876
   b44d8:	000b788d 	.word	0x000b788d

000b44dc <setup>:

// Informacion de la tarjeta leida.
int tagInfo[6] = {-1, -1, -1, -1, -1, -1};

void setup()
{
   b44dc:	b510      	push	{r4, lr}
   b44de:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b44e0:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b44e2:	a805      	add	r0, sp, #20
   b44e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b44e8:	f8ad 401c 	strh.w	r4, [sp, #28]
   b44ec:	f002 f832 	bl	b6554 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b44f0:	481b      	ldr	r0, [pc, #108]	; (b4560 <setup+0x84>)
   b44f2:	4623      	mov	r3, r4
   b44f4:	4622      	mov	r2, r4
   b44f6:	4621      	mov	r1, r4
   b44f8:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b44fa:	4c1a      	ldr	r4, [pc, #104]	; (b4564 <setup+0x88>)
   b44fc:	f001 ffa6 	bl	b644c <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4500:	f002 fcf6 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4504:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4508:	f002 fce6 	bl	b6ed8 <_ZN9USBSerial5beginEl>
   b450c:	7821      	ldrb	r1, [r4, #0]
   b450e:	f3bf 8f5b 	dmb	ish
   b4512:	f011 0101 	ands.w	r1, r1, #1
   b4516:	d10b      	bne.n	b4530 <setup+0x54>
   b4518:	4620      	mov	r0, r4
   b451a:	9103      	str	r1, [sp, #12]
   b451c:	f7ff fdc8 	bl	b40b0 <__cxa_guard_acquire>
   b4520:	9903      	ldr	r1, [sp, #12]
   b4522:	b128      	cbz	r0, b4530 <setup+0x54>
   b4524:	4810      	ldr	r0, [pc, #64]	; (b4568 <setup+0x8c>)
   b4526:	f002 fa95 	bl	b6a54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b452a:	4620      	mov	r0, r4
   b452c:	f7ff fdc5 	bl	b40ba <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4530:	480d      	ldr	r0, [pc, #52]	; (b4568 <setup+0x8c>)
   b4532:	f002 fa99 	bl	b6a68 <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4536:	2301      	movs	r3, #1
   b4538:	9300      	str	r3, [sp, #0]
   b453a:	223c      	movs	r2, #60	; 0x3c
   b453c:	2102      	movs	r1, #2
   b453e:	480b      	ldr	r0, [pc, #44]	; (b456c <setup+0x90>)
   b4540:	f000 feea 	bl	b5318 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4544:	480a      	ldr	r0, [pc, #40]	; (b4570 <setup+0x94>)
   b4546:	f001 fab0 	bl	b5aaa <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b454a:	4b0a      	ldr	r3, [pc, #40]	; (b4574 <setup+0x98>)
   b454c:	22ff      	movs	r2, #255	; 0xff
   b454e:	701a      	strb	r2, [r3, #0]
   b4550:	705a      	strb	r2, [r3, #1]
   b4552:	709a      	strb	r2, [r3, #2]
   b4554:	70da      	strb	r2, [r3, #3]
   b4556:	711a      	strb	r2, [r3, #4]
   b4558:	715a      	strb	r2, [r3, #5]
  }
}
   b455a:	b008      	add	sp, #32
   b455c:	bd10      	pop	{r4, pc}
   b455e:	bf00      	nop
   b4560:	2003e718 	.word	0x2003e718
   b4564:	2003dff8 	.word	0x2003dff8
   b4568:	2003dffc 	.word	0x2003dffc
   b456c:	2003e620 	.word	0x2003e620
   b4570:	2003e6a0 	.word	0x2003e6a0
   b4574:	2003e691 	.word	0x2003e691

000b4578 <loop>:

void loop()
{
   b4578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b457a:	4874      	ldr	r0, [pc, #464]	; (b474c <loop+0x1d4>)
   b457c:	f001 fbc0 	bl	b5d00 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4580:	b1a0      	cbz	r0, b45ac <loop+0x34>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b4582:	4872      	ldr	r0, [pc, #456]	; (b474c <loop+0x1d4>)
   b4584:	f001 fd8d 	bl	b60a2 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4588:	2800      	cmp	r0, #0
   b458a:	d05e      	beq.n	b464a <loop+0xd2>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
   b458c:	4c70      	ldr	r4, [pc, #448]	; (b4750 <loop+0x1d8>)
   b458e:	4620      	mov	r0, r4
   b4590:	f000 feb4 	bl	b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4594:	4620      	mov	r0, r4
   b4596:	2101      	movs	r1, #1
   b4598:	f000 fd0b 	bl	b4fb2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b459c:	2000      	movs	r0, #0
   b459e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b45a2:	e9c4 0304 	strd	r0, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b45a6:	486b      	ldr	r0, [pc, #428]	; (b4754 <loop+0x1dc>)
   b45a8:	f7ff fee6 	bl	b4378 <_Z8getTagIDPi>
  }

  // Si se ha pasado nueva tag:
  if (tagInfo[0] != -1)
   b45ac:	4c69      	ldr	r4, [pc, #420]	; (b4754 <loop+0x1dc>)
   b45ae:	6823      	ldr	r3, [r4, #0]
   b45b0:	1c59      	adds	r1, r3, #1
   b45b2:	d04a      	beq.n	b464a <loop+0xd2>
  {
    switch (tagInfo[0])
   b45b4:	2b05      	cmp	r3, #5
   b45b6:	f200 80c5 	bhi.w	b4744 <loop+0x1cc>
   b45ba:	e8df f003 	tbb	[pc, r3]
   b45be:	4803      	.short	0x4803
   b45c0:	bdad8f71 	.word	0xbdad8f71
    {
    // Sensor
    case 0:
      if (IF_pasado && (numSensoresBloque == numCondicionalesBloque))
   b45c4:	4b64      	ldr	r3, [pc, #400]	; (b4758 <loop+0x1e0>)
   b45c6:	4d65      	ldr	r5, [pc, #404]	; (b475c <loop+0x1e4>)
   b45c8:	781b      	ldrb	r3, [r3, #0]
   b45ca:	4e65      	ldr	r6, [pc, #404]	; (b4760 <loop+0x1e8>)
   b45cc:	b38b      	cbz	r3, b4632 <loop+0xba>
   b45ce:	682a      	ldr	r2, [r5, #0]
   b45d0:	6833      	ldr	r3, [r6, #0]
   b45d2:	429a      	cmp	r2, r3
   b45d4:	d005      	beq.n	b45e2 <loop+0x6a>
      {
        if (!IF_pasado)
          Serial.println("Se esperaba IF tag");

        if (numSensoresBloque != numCondicionalesBloque)
          Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b45d6:	f002 fc8b 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b45da:	4962      	ldr	r1, [pc, #392]	; (b4764 <loop+0x1ec>)
      {
      }
      break;

    default:
      Serial.println("Error");
   b45dc:	f002 f9d5 	bl	b698a <_ZN5Print7printlnEPKc>
      break;
   b45e0:	e030      	b.n	b4644 <loop+0xcc>
        int puerto = asignarPuerto(tagInfo[1]);
   b45e2:	6860      	ldr	r0, [r4, #4]
   b45e4:	f7ff ff18 	bl	b4418 <_Z13asignarPuertoi>
        if (puerto != -1)
   b45e8:	1c42      	adds	r2, r0, #1
   b45ea:	d02b      	beq.n	b4644 <loop+0xcc>
          newSensor.bloque = numBloque;
   b45ec:	495e      	ldr	r1, [pc, #376]	; (b4768 <loop+0x1f0>)
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b45ee:	682e      	ldr	r6, [r5, #0]
          newSensor.bloque = numBloque;
   b45f0:	f8d1 c000 	ldr.w	ip, [r1]
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b45f4:	f8df e180 	ldr.w	lr, [pc, #384]	; b4778 <loop+0x200>
   b45f8:	f44f 7139 	mov.w	r1, #740	; 0x2e4
          newSensor.condicion = tagInfo[3];
   b45fc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4600:	fb01 f10c 	mul.w	r1, r1, ip
   b4604:	eb01 1106 	add.w	r1, r1, r6, lsl #4
   b4608:	eb0e 0701 	add.w	r7, lr, r1
   b460c:	e9c7 3c01 	strd	r3, ip, [r7, #4]
          numSensoresBloque++;
   b4610:	3601      	adds	r6, #1
          bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b4612:	f84e 2001 	str.w	r2, [lr, r1]
   b4616:	60f8      	str	r0, [r7, #12]
          numSensoresBloque++;
   b4618:	602e      	str	r6, [r5, #0]
   return id == 0;
   b461a:	e9d4 5100 	ldrd	r5, r1, [r4]
          displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), newActuador.id, newActuador.condicion, newActuador.puerto);
   b461e:	9000      	str	r0, [sp, #0]
   b4620:	fab1 f181 	clz	r1, r1
   b4624:	fab5 f085 	clz	r0, r5
   b4628:	0949      	lsrs	r1, r1, #5
   b462a:	0940      	lsrs	r0, r0, #5
   b462c:	f7ff fd64 	bl	b40f8 <_Z12displayPrintbbiii>
   b4630:	e008      	b.n	b4644 <loop+0xcc>
          Serial.println("Se esperaba IF tag");
   b4632:	f002 fc5d 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4636:	494d      	ldr	r1, [pc, #308]	; (b476c <loop+0x1f4>)
   b4638:	f002 f9a7 	bl	b698a <_ZN5Print7printlnEPKc>
        if (numSensoresBloque != numCondicionalesBloque)
   b463c:	682a      	ldr	r2, [r5, #0]
   b463e:	6833      	ldr	r3, [r6, #0]
   b4640:	429a      	cmp	r2, r3
   b4642:	d1c8      	bne.n	b45d6 <loop+0x5e>
    }

    tagInfo[0] = -1;
   b4644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4648:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < numBloque; i++)
  {

    // bool evaluacion = evaluate(sensoresPorBloque[i].sensoresBloque, condicionesPorBloque[i].condicionesBloque);
  }
}
   b464a:	b003      	add	sp, #12
   b464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (THEN_pasado)
   b464e:	4b48      	ldr	r3, [pc, #288]	; (b4770 <loop+0x1f8>)
   b4650:	781b      	ldrb	r3, [r3, #0]
   b4652:	2b00      	cmp	r3, #0
   b4654:	d0f6      	beq.n	b4644 <loop+0xcc>
        int puerto = asignarPuerto(tagInfo[1]);
   b4656:	6860      	ldr	r0, [r4, #4]
   b4658:	f7ff fede 	bl	b4418 <_Z13asignarPuertoi>
        if (puerto != -1)
   b465c:	1c43      	adds	r3, r0, #1
   b465e:	d0f1      	beq.n	b4644 <loop+0xcc>
          newActuador.bloque = numBloque;
   b4660:	4941      	ldr	r1, [pc, #260]	; (b4768 <loop+0x1f0>)
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b4662:	f8df c118 	ldr.w	ip, [pc, #280]	; b477c <loop+0x204>
          newActuador.bloque = numBloque;
   b4666:	f8d1 e000 	ldr.w	lr, [r1]
          if (!ELSE_pasado)
   b466a:	4942      	ldr	r1, [pc, #264]	; (b4774 <loop+0x1fc>)
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b466c:	f8dc 6000 	ldr.w	r6, [ip]
          if (!ELSE_pasado)
   b4670:	780f      	ldrb	r7, [r1, #0]
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b4672:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   b4676:	fb01 f10e 	mul.w	r1, r1, lr
   b467a:	2514      	movs	r5, #20
   b467c:	fb05 1506 	mla	r5, r5, r6, r1
   b4680:	493d      	ldr	r1, [pc, #244]	; (b4778 <loop+0x200>)
          newActuador.condicion = tagInfo[3];
   b4682:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b4686:	4429      	add	r1, r5
            newActuador.actuadorTrue = true;
   b4688:	f087 0701 	eor.w	r7, r7, #1
          numActuadoresBloque++;
   b468c:	3601      	adds	r6, #1
          bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b468e:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
   b4692:	e9c1 e052 	strd	lr, r0, [r1, #328]	; 0x148
   b4696:	f881 7150 	strb.w	r7, [r1, #336]	; 0x150
          numActuadoresBloque++;
   b469a:	f8cc 6000 	str.w	r6, [ip]
   b469e:	e7bc      	b.n	b461a <loop+0xa2>
      if (numBloque == 0 || numBloque == 1 && numActuadoresBloque > 0)
   b46a0:	4a31      	ldr	r2, [pc, #196]	; (b4768 <loop+0x1f0>)
   b46a2:	6813      	ldr	r3, [r2, #0]
   b46a4:	b12b      	cbz	r3, b46b2 <loop+0x13a>
   b46a6:	2b01      	cmp	r3, #1
   b46a8:	d114      	bne.n	b46d4 <loop+0x15c>
   b46aa:	4934      	ldr	r1, [pc, #208]	; (b477c <loop+0x204>)
   b46ac:	6809      	ldr	r1, [r1, #0]
   b46ae:	2900      	cmp	r1, #0
   b46b0:	dd10      	ble.n	b46d4 <loop+0x15c>
        numBloque++;
   b46b2:	3301      	adds	r3, #1
   b46b4:	6013      	str	r3, [r2, #0]
        IF_pasado = true;
   b46b6:	4b28      	ldr	r3, [pc, #160]	; (b4758 <loop+0x1e0>)
   b46b8:	2201      	movs	r2, #1
   b46ba:	701a      	strb	r2, [r3, #0]
        THEN_pasado = false;
   b46bc:	4a2c      	ldr	r2, [pc, #176]	; (b4770 <loop+0x1f8>)
   b46be:	2300      	movs	r3, #0
   b46c0:	7013      	strb	r3, [r2, #0]
        ELSE_pasado = false;
   b46c2:	4a2c      	ldr	r2, [pc, #176]	; (b4774 <loop+0x1fc>)
   b46c4:	7013      	strb	r3, [r2, #0]
        numCondicionalesBloque = 0;
   b46c6:	4a26      	ldr	r2, [pc, #152]	; (b4760 <loop+0x1e8>)
   b46c8:	6013      	str	r3, [r2, #0]
        numSensoresBloque = 0;
   b46ca:	4a24      	ldr	r2, [pc, #144]	; (b475c <loop+0x1e4>)
   b46cc:	6013      	str	r3, [r2, #0]
        numActuadoresBloque = 0;
   b46ce:	4a2b      	ldr	r2, [pc, #172]	; (b477c <loop+0x204>)
   b46d0:	6013      	str	r3, [r2, #0]
   b46d2:	e7b7      	b.n	b4644 <loop+0xcc>
        Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b46d4:	f002 fc0c 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b46d8:	4929      	ldr	r1, [pc, #164]	; (b4780 <loop+0x208>)
   b46da:	e77f      	b.n	b45dc <loop+0x64>
      if (numCondicionalesBloque < numSensoresBloque && numActuadoresBloque == 0)
   b46dc:	4820      	ldr	r0, [pc, #128]	; (b4760 <loop+0x1e8>)
   b46de:	4a1f      	ldr	r2, [pc, #124]	; (b475c <loop+0x1e4>)
   b46e0:	6803      	ldr	r3, [r0, #0]
   b46e2:	6812      	ldr	r2, [r2, #0]
   b46e4:	4293      	cmp	r3, r2
   b46e6:	da13      	bge.n	b4710 <loop+0x198>
   b46e8:	4a24      	ldr	r2, [pc, #144]	; (b477c <loop+0x204>)
   b46ea:	6812      	ldr	r2, [r2, #0]
   b46ec:	b982      	cbnz	r2, b4710 <loop+0x198>
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b46ee:	4a1e      	ldr	r2, [pc, #120]	; (b4768 <loop+0x1f0>)
   b46f0:	6811      	ldr	r1, [r2, #0]
   b46f2:	4a21      	ldr	r2, [pc, #132]	; (b4778 <loop+0x200>)
   b46f4:	f44f 7539 	mov.w	r5, #740	; 0x2e4
   b46f8:	fb05 2201 	mla	r2, r5, r1, r2
   b46fc:	6861      	ldr	r1, [r4, #4]
   b46fe:	441a      	add	r2, r3
   b4700:	3900      	subs	r1, #0
   b4702:	bf18      	it	ne
   b4704:	2101      	movne	r1, #1
        numCondicionalesBloque++;
   b4706:	3301      	adds	r3, #1
        bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[1];
   b4708:	f882 12d0 	strb.w	r1, [r2, #720]	; 0x2d0
        numCondicionalesBloque++;
   b470c:	6003      	str	r3, [r0, #0]
   b470e:	e799      	b.n	b4644 <loop+0xcc>
        Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b4710:	f002 fbee 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4714:	491b      	ldr	r1, [pc, #108]	; (b4784 <loop+0x20c>)
   b4716:	e761      	b.n	b45dc <loop+0x64>
      if (numSensoresBloque > 0 && numSensoresBloque > numCondicionalesBloque)
   b4718:	4b10      	ldr	r3, [pc, #64]	; (b475c <loop+0x1e4>)
   b471a:	681b      	ldr	r3, [r3, #0]
   b471c:	2b00      	cmp	r3, #0
   b471e:	dd07      	ble.n	b4730 <loop+0x1b8>
   b4720:	4a0f      	ldr	r2, [pc, #60]	; (b4760 <loop+0x1e8>)
   b4722:	6812      	ldr	r2, [r2, #0]
   b4724:	4293      	cmp	r3, r2
   b4726:	dd03      	ble.n	b4730 <loop+0x1b8>
        THEN_pasado = true;
   b4728:	4b11      	ldr	r3, [pc, #68]	; (b4770 <loop+0x1f8>)
        ELSE_pasado = true;
   b472a:	2201      	movs	r2, #1
   b472c:	701a      	strb	r2, [r3, #0]
   b472e:	e789      	b.n	b4644 <loop+0xcc>
        Serial.println("Numero de sensores infucientes");
   b4730:	f002 fbde 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4734:	4914      	ldr	r1, [pc, #80]	; (b4788 <loop+0x210>)
   b4736:	e751      	b.n	b45dc <loop+0x64>
      if (numActuadoresBloque > 0)
   b4738:	4b10      	ldr	r3, [pc, #64]	; (b477c <loop+0x204>)
   b473a:	681b      	ldr	r3, [r3, #0]
   b473c:	2b00      	cmp	r3, #0
   b473e:	dd81      	ble.n	b4644 <loop+0xcc>
        ELSE_pasado = true;
   b4740:	4b0c      	ldr	r3, [pc, #48]	; (b4774 <loop+0x1fc>)
   b4742:	e7f2      	b.n	b472a <loop+0x1b2>
      Serial.println("Error");
   b4744:	f002 fbd4 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b4748:	4910      	ldr	r1, [pc, #64]	; (b478c <loop+0x214>)
   b474a:	e747      	b.n	b45dc <loop+0x64>
   b474c:	2003e6a0 	.word	0x2003e6a0
   b4750:	2003e620 	.word	0x2003e620
   b4754:	2003df70 	.word	0x2003df70
   b4758:	2003e005 	.word	0x2003e005
   b475c:	2003e6b8 	.word	0x2003e6b8
   b4760:	2003e6b4 	.word	0x2003e6b4
   b4764:	000b78b5 	.word	0x000b78b5
   b4768:	2003df68 	.word	0x2003df68
   b476c:	000b78ea 	.word	0x000b78ea
   b4770:	2003e014 	.word	0x2003e014
   b4774:	2003e004 	.word	0x2003e004
   b4778:	2003e018 	.word	0x2003e018
   b477c:	2003e6b0 	.word	0x2003e6b0
   b4780:	000b78fd 	.word	0x000b78fd
   b4784:	000b794f 	.word	0x000b794f
   b4788:	000b7981 	.word	0x000b7981
   b478c:	000b77be 	.word	0x000b77be

000b4790 <_GLOBAL__sub_I_trailerBlock>:

  //       valor = valor || nextValor;
  //    }
  // }
  return true;
}
   b4790:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b4792:	4c13      	ldr	r4, [pc, #76]	; (b47e0 <_GLOBAL__sub_I_trailerBlock+0x50>)
Adafruit_SSD1306 display(-1);
   b4794:	4813      	ldr	r0, [pc, #76]	; (b47e4 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b4796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b479a:	f000 fcbb 	bl	b5114 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b479e:	4912      	ldr	r1, [pc, #72]	; (b47e8 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b47a0:	4620      	mov	r0, r4
   b47a2:	f002 fa4e 	bl	b6c42 <_ZN6StringC1EPK19__FlashStringHelper>
   b47a6:	4910      	ldr	r1, [pc, #64]	; (b47e8 <_GLOBAL__sub_I_trailerBlock+0x58>)
   b47a8:	f104 0010 	add.w	r0, r4, #16
   b47ac:	f002 fa49 	bl	b6c42 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b47b0:	2208      	movs	r2, #8
   b47b2:	2110      	movs	r1, #16
   b47b4:	480d      	ldr	r0, [pc, #52]	; (b47ec <_GLOBAL__sub_I_trailerBlock+0x5c>)
   b47b6:	f001 f832 	bl	b581e <_ZN7MFRC522C1Ehh>
// This #include statement was automatically added by the Particle IDE.
#include <Grove_ChainableLED.h>

bool init = true;

ChainableLED ledObject = ChainableLED(0, 0, 5);
   b47ba:	2200      	movs	r2, #0
   b47bc:	2305      	movs	r3, #5
   b47be:	4611      	mov	r1, r2
   b47c0:	480b      	ldr	r0, [pc, #44]	; (b47f0 <_GLOBAL__sub_I_trailerBlock+0x60>)
   b47c2:	f001 f81f 	bl	b5804 <_ZN12ChainableLEDC1Ehhh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47c6:	4b0b      	ldr	r3, [pc, #44]	; (b47f4 <_GLOBAL__sub_I_trailerBlock+0x64>)
   b47c8:	2200      	movs	r2, #0
   b47ca:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b47ce:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b47d2:	609a      	str	r2, [r3, #8]
   b47d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47d8:	2002      	movs	r0, #2
   b47da:	f001 bddb 	b.w	b6394 <set_system_mode>
   b47de:	bf00      	nop
   b47e0:	2003e670 	.word	0x2003e670
   b47e4:	2003e620 	.word	0x2003e620
   b47e8:	000b79a0 	.word	0x000b79a0
   b47ec:	2003e6a0 	.word	0x2003e6a0
   b47f0:	2003e698 	.word	0x2003e698
   b47f4:	2003e008 	.word	0x2003e008

000b47f8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b47f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47fc:	b085      	sub	sp, #20
   b47fe:	461f      	mov	r7, r3
   b4800:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4804:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4808:	eba8 0902 	sub.w	r9, r8, r2
   b480c:	eba7 0a01 	sub.w	sl, r7, r1
   b4810:	f1b9 0f00 	cmp.w	r9, #0
   b4814:	bfb8      	it	lt
   b4816:	f1c9 0900 	rsblt	r9, r9, #0
   b481a:	f1ba 0f00 	cmp.w	sl, #0
   b481e:	bfb8      	it	lt
   b4820:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4824:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4826:	4683      	mov	fp, r0
   b4828:	460c      	mov	r4, r1
   b482a:	4615      	mov	r5, r2
    if (steep) {
   b482c:	dd04      	ble.n	b4838 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b482e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4830:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4832:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4834:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4836:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4838:	42bc      	cmp	r4, r7
   b483a:	dd05      	ble.n	b4848 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b483c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b483e:	4645      	mov	r5, r8
   b4840:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4842:	4622      	mov	r2, r4
   b4844:	463c      	mov	r4, r7
   b4846:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4848:	1b3e      	subs	r6, r7, r4
   b484a:	b2b2      	uxth	r2, r6
   b484c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b484e:	eba8 0205 	sub.w	r2, r8, r5
   b4852:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4856:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b485a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b485e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4862:	4545      	cmp	r5, r8
   b4864:	bfb4      	ite	lt
   b4866:	2201      	movlt	r2, #1
   b4868:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b486c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b486e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4870:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4872:	42bc      	cmp	r4, r7
   b4874:	dc1c      	bgt.n	b48b0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4876:	f8db 2000 	ldr.w	r2, [fp]
   b487a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b487c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b487e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4882:	bfc7      	ittee	gt
   b4884:	4629      	movgt	r1, r5
   b4886:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4888:	462a      	movle	r2, r5
   b488a:	4621      	movle	r1, r4
   b488c:	4658      	mov	r0, fp
   b488e:	47c0      	blx	r8
        }
        err -= dy;
   b4890:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4892:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4894:	1ab6      	subs	r6, r6, r2
   b4896:	b2b1      	uxth	r1, r6
   b4898:	b236      	sxth	r6, r6
        if (err < 0) {
   b489a:	2e00      	cmp	r6, #0
   b489c:	da05      	bge.n	b48aa <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b489e:	9a02      	ldr	r2, [sp, #8]
   b48a0:	4415      	add	r5, r2
            err += dx;
   b48a2:	9a00      	ldr	r2, [sp, #0]
   b48a4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b48a6:	b22d      	sxth	r5, r5
            err += dx;
   b48a8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b48aa:	3401      	adds	r4, #1
   b48ac:	b224      	sxth	r4, r4
   b48ae:	e7e0      	b.n	b4872 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b48b0:	b005      	add	sp, #20
   b48b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b48b6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b48b6:	4770      	bx	lr

000b48b8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b48b8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b48ba:	6804      	ldr	r4, [r0, #0]
   b48bc:	6924      	ldr	r4, [r4, #16]
   b48be:	46a4      	mov	ip, r4
}
   b48c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b48c4:	4760      	bx	ip

000b48c6 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b48c6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b48c8:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b48ca:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b48ce:	9502      	str	r5, [sp, #8]
   b48d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b48d2:	46a4      	mov	ip, r4
}
   b48d4:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b48d6:	4760      	bx	ip

000b48d8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b48d8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b48da:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b48dc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b48e0:	9502      	str	r5, [sp, #8]
   b48e2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b48e4:	46a4      	mov	ip, r4
}
   b48e6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b48e8:	4760      	bx	ip

000b48ea <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b48ea:	b470      	push	{r4, r5, r6}
   b48ec:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b48f0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b48f4:	6804      	ldr	r4, [r0, #0]
   b48f6:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b48fa:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b48fc:	46a4      	mov	ip, r4
}
   b48fe:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4900:	4760      	bx	ip

000b4902 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4902:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4906:	461c      	mov	r4, r3
    startWrite();
   b4908:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b490a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b490e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4910:	4605      	mov	r5, r0
   b4912:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4914:	3c01      	subs	r4, #1
   b4916:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4918:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b491a:	b224      	sxth	r4, r4
    startWrite();
   b491c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b491e:	682b      	ldr	r3, [r5, #0]
   b4920:	f8cd 8004 	str.w	r8, [sp, #4]
   b4924:	9400      	str	r4, [sp, #0]
   b4926:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4928:	4628      	mov	r0, r5
   b492a:	463b      	mov	r3, r7
   b492c:	4632      	mov	r2, r6
   b492e:	4639      	mov	r1, r7
   b4930:	47a0      	blx	r4
    endWrite();
   b4932:	682b      	ldr	r3, [r5, #0]
   b4934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4936:	4628      	mov	r0, r5
}
   b4938:	b002      	add	sp, #8
   b493a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b493e:	4718      	bx	r3

000b4940 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4944:	461d      	mov	r5, r3
    startWrite();
   b4946:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4948:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b494c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b494e:	4604      	mov	r4, r0
   b4950:	4617      	mov	r7, r2
   b4952:	460e      	mov	r6, r1
    startWrite();
   b4954:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4956:	e9cd 7800 	strd	r7, r8, [sp]
   b495a:	6822      	ldr	r2, [r4, #0]
   b495c:	1e6b      	subs	r3, r5, #1
   b495e:	4433      	add	r3, r6
   b4960:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4962:	4620      	mov	r0, r4
   b4964:	b21b      	sxth	r3, r3
   b4966:	463a      	mov	r2, r7
   b4968:	4631      	mov	r1, r6
   b496a:	47a8      	blx	r5
    endWrite();
   b496c:	6823      	ldr	r3, [r4, #0]
   b496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4970:	4620      	mov	r0, r4
}
   b4972:	b002      	add	sp, #8
   b4974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4978:	4718      	bx	r3

000b497a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b497a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b497e:	461e      	mov	r6, r3
    startWrite();
   b4980:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4982:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4986:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4988:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b498c:	460c      	mov	r4, r1
   b498e:	4605      	mov	r5, r0
   b4990:	4617      	mov	r7, r2
    startWrite();
   b4992:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4994:	4426      	add	r6, r4
   b4996:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4998:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b499a:	da0b      	bge.n	b49b4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b499c:	f8cd 8000 	str.w	r8, [sp]
   b49a0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b49a4:	4621      	mov	r1, r4
   b49a6:	464b      	mov	r3, r9
   b49a8:	463a      	mov	r2, r7
   b49aa:	4628      	mov	r0, r5
   b49ac:	3401      	adds	r4, #1
   b49ae:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b49b0:	b224      	sxth	r4, r4
   b49b2:	e7f0      	b.n	b4996 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b49b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49b6:	4628      	mov	r0, r5
}
   b49b8:	b002      	add	sp, #8
   b49ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b49be:	4718      	bx	r3

000b49c0 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b49c0:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b49c2:	6802      	ldr	r2, [r0, #0]
   b49c4:	9101      	str	r1, [sp, #4]
   b49c6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b49ca:	9100      	str	r1, [sp, #0]
   b49cc:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b49ce:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b49d2:	2200      	movs	r2, #0
   b49d4:	4611      	mov	r1, r2
   b49d6:	47a0      	blx	r4
}
   b49d8:	b002      	add	sp, #8
   b49da:	bd10      	pop	{r4, pc}

000b49dc <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b49dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b49e0:	4299      	cmp	r1, r3
        uint16_t color) {
   b49e2:	4616      	mov	r6, r2
   b49e4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b49e8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b49ec:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b49ee:	4680      	mov	r8, r0
   b49f0:	460d      	mov	r5, r1
   b49f2:	461c      	mov	r4, r3
    if(x0 == x1){
   b49f4:	d113      	bne.n	b4a1e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b49f6:	42be      	cmp	r6, r7
   b49f8:	bfc8      	it	gt
   b49fa:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b49fc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4a00:	bfc4      	itt	gt
   b4a02:	463e      	movgt	r6, r7
   b4a04:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4a06:	1c7b      	adds	r3, r7, #1
   b4a08:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4a0a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4a0c:	b21b      	sxth	r3, r3
   b4a0e:	4632      	mov	r2, r6
   b4a10:	4629      	mov	r1, r5
   b4a12:	4640      	mov	r0, r8
   b4a14:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4a16:	b003      	add	sp, #12
   b4a18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4a1c:	4760      	bx	ip
    } else if(y0 == y1){
   b4a1e:	42be      	cmp	r6, r7
   b4a20:	d10a      	bne.n	b4a38 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4a22:	4299      	cmp	r1, r3
   b4a24:	bfc2      	ittt	gt
   b4a26:	460b      	movgt	r3, r1
   b4a28:	4625      	movgt	r5, r4
   b4a2a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4a2c:	1c63      	adds	r3, r4, #1
   b4a2e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4a32:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4a34:	1b5b      	subs	r3, r3, r5
   b4a36:	e7e9      	b.n	b4a0c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4a38:	6953      	ldr	r3, [r2, #20]
   b4a3a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4a3c:	e9cd 7900 	strd	r7, r9, [sp]
   b4a40:	f8d8 3000 	ldr.w	r3, [r8]
   b4a44:	4640      	mov	r0, r8
   b4a46:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4a48:	4632      	mov	r2, r6
   b4a4a:	4623      	mov	r3, r4
   b4a4c:	4629      	mov	r1, r5
   b4a4e:	47b8      	blx	r7
        endWrite();
   b4a50:	f8d8 3000 	ldr.w	r3, [r8]
   b4a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a56:	4640      	mov	r0, r8
}
   b4a58:	b003      	add	sp, #12
   b4a5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4a5e:	4718      	bx	r3

000b4a60 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4a60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a64:	461d      	mov	r5, r3
    startWrite();
   b4a66:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4a68:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4a6c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4a6e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4a72:	4604      	mov	r4, r0
   b4a74:	460f      	mov	r7, r1
   b4a76:	4616      	mov	r6, r2
    startWrite();
   b4a78:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4a7a:	6823      	ldr	r3, [r4, #0]
   b4a7c:	f8cd 8000 	str.w	r8, [sp]
   b4a80:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4a84:	4632      	mov	r2, r6
   b4a86:	462b      	mov	r3, r5
   b4a88:	4639      	mov	r1, r7
   b4a8a:	4620      	mov	r0, r4
   b4a8c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4a8e:	6823      	ldr	r3, [r4, #0]
   b4a90:	f8cd 8000 	str.w	r8, [sp]
   b4a94:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4a98:	4432      	add	r2, r6
   b4a9a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4a9e:	4639      	mov	r1, r7
   b4aa0:	462b      	mov	r3, r5
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	b212      	sxth	r2, r2
   b4aa6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4aa8:	6823      	ldr	r3, [r4, #0]
   b4aaa:	f8cd 8000 	str.w	r8, [sp]
   b4aae:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4ab2:	4632      	mov	r2, r6
   b4ab4:	464b      	mov	r3, r9
   b4ab6:	4639      	mov	r1, r7
   b4ab8:	4620      	mov	r0, r4
   b4aba:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4abc:	1e6b      	subs	r3, r5, #1
   b4abe:	19d9      	adds	r1, r3, r7
   b4ac0:	6823      	ldr	r3, [r4, #0]
   b4ac2:	f8cd 8000 	str.w	r8, [sp]
   b4ac6:	6a1d      	ldr	r5, [r3, #32]
   b4ac8:	4620      	mov	r0, r4
   b4aca:	464b      	mov	r3, r9
   b4acc:	4632      	mov	r2, r6
   b4ace:	b209      	sxth	r1, r1
   b4ad0:	47a8      	blx	r5
    endWrite();
   b4ad2:	6823      	ldr	r3, [r4, #0]
   b4ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ad6:	4620      	mov	r0, r4
}
   b4ad8:	b002      	add	sp, #8
   b4ada:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4ade:	4718      	bx	r3

000b4ae0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4ae0:	4770      	bx	lr

000b4ae2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4ae2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4ae6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4aea:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4aec:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4aee:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4af2:	bf59      	ittee	pl
   b4af4:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4af6:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4af8:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4afa:	81c3      	strhmi	r3, [r0, #14]
}
   b4afc:	4770      	bx	lr
	...

000b4b00 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4b00:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4b02:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4b04:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4b06:	4a07      	ldr	r2, [pc, #28]	; (b4b24 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4b08:	4d07      	ldr	r5, [pc, #28]	; (b4b28 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4b0a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4b0c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4b0e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4b14:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4b18:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4b1a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4b1c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4b1e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4b20:	6204      	str	r4, [r0, #32]
}
   b4b22:	bd30      	pop	{r4, r5, pc}
   b4b24:	01000101 	.word	0x01000101
   b4b28:	000b7eac 	.word	0x000b7eac

000b4b2c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b30:	b089      	sub	sp, #36	; 0x24
   b4b32:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4b36:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4b38:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4b3c:	9304      	str	r3, [sp, #16]
   b4b3e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b4b42:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4b44:	9305      	str	r3, [sp, #20]
   b4b46:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4b4a:	4604      	mov	r4, r0
    startWrite();
   b4b4c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4b4e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b4b52:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4b56:	bf48      	it	mi
   b4b58:	f108 020e 	addmi.w	r2, r8, #14
   b4b5c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4b60:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b4b62:	4635      	mov	r5, r6
   b4b64:	9b03      	ldr	r3, [sp, #12]
   b4b66:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4b68:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4b6c:	189a      	adds	r2, r3, r2
   b4b6e:	9b05      	ldr	r3, [sp, #20]
   b4b70:	428b      	cmp	r3, r1
   b4b72:	b212      	sxth	r2, r2
   b4b74:	dd27      	ble.n	b4bc6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4b76:	9b04      	ldr	r3, [sp, #16]
   b4b78:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4b7a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4b7e:	9306      	str	r3, [sp, #24]
   b4b80:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4b84:	4580      	cmp	r8, r0
   b4b86:	fa1f f189 	uxth.w	r1, r9
   b4b8a:	dd17      	ble.n	b4bbc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4b8c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4b8e:	bf05      	ittet	eq
   b4b90:	9b06      	ldreq	r3, [sp, #24]
   b4b92:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4b94:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4b96:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4b98:	bf18      	it	ne
   b4b9a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4b9c:	062b      	lsls	r3, r5, #24
   b4b9e:	d50a      	bpl.n	b4bb6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4ba0:	9b02      	ldr	r3, [sp, #8]
   b4ba2:	6820      	ldr	r0, [r4, #0]
   b4ba4:	9207      	str	r2, [sp, #28]
   b4ba6:	4419      	add	r1, r3
   b4ba8:	6983      	ldr	r3, [r0, #24]
   b4baa:	b209      	sxth	r1, r1
   b4bac:	461f      	mov	r7, r3
   b4bae:	4620      	mov	r0, r4
   b4bb0:	4653      	mov	r3, sl
   b4bb2:	47b8      	blx	r7
   b4bb4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b4bb6:	f109 0901 	add.w	r9, r9, #1
   b4bba:	e7e1      	b.n	b4b80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4bbc:	9b01      	ldr	r3, [sp, #4]
   b4bbe:	3301      	adds	r3, #1
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	445e      	add	r6, fp
   b4bc4:	e7ce      	b.n	b4b64 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b4bc6:	6823      	ldr	r3, [r4, #0]
   b4bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bca:	4620      	mov	r0, r4
}
   b4bcc:	b009      	add	sp, #36	; 0x24
   b4bce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4bd2:	4718      	bx	r3

000b4bd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bd8:	ed2d 8b02 	vpush	{d8}
   b4bdc:	b091      	sub	sp, #68	; 0x44
   b4bde:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4be0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4be2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4be6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4bea:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4bee:	9103      	str	r1, [sp, #12]
   b4bf0:	461f      	mov	r7, r3
   b4bf2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4bf6:	9304      	str	r3, [sp, #16]
   b4bf8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4bfa:	2a00      	cmp	r2, #0
   b4bfc:	f040 80c5 	bne.w	b4d8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4c00:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4c04:	428b      	cmp	r3, r1
   b4c06:	f340 814c 	ble.w	b4ea2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4c0a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4c0e:	42b3      	cmp	r3, r6
   b4c10:	f340 8147 	ble.w	b4ea2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4c14:	2306      	movs	r3, #6
   b4c16:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4c1a:	2b00      	cmp	r3, #0
   b4c1c:	f340 8141 	ble.w	b4ea2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4c20:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4c24:	2b00      	cmp	r3, #0
   b4c26:	f340 813c 	ble.w	b4ea2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4c2a:	7f03      	ldrb	r3, [r0, #28]
   b4c2c:	b91b      	cbnz	r3, b4c36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4c2e:	2faf      	cmp	r7, #175	; 0xaf
   b4c30:	bf84      	itt	hi
   b4c32:	3701      	addhi	r7, #1
   b4c34:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4c36:	f8db 3000 	ldr.w	r3, [fp]
   b4c3a:	4658      	mov	r0, fp
   b4c3c:	695b      	ldr	r3, [r3, #20]
   b4c3e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c40:	2205      	movs	r2, #5
   b4c42:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4c44:	2200      	movs	r2, #0
   b4c46:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c48:	4a98      	ldr	r2, [pc, #608]	; (b4eac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4c4a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4c4e:	18d3      	adds	r3, r2, r3
   b4c50:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b4c52:	b2b3      	uxth	r3, r6
   b4c54:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4c56:	9a05      	ldr	r2, [sp, #20]
   b4c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c5a:	5c9b      	ldrb	r3, [r3, r2]
   b4c5c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4c5e:	b2ab      	uxth	r3, r5
   b4c60:	930b      	str	r3, [sp, #44]	; 0x2c
   b4c62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4c66:	9308      	str	r3, [sp, #32]
   b4c68:	9b03      	ldr	r3, [sp, #12]
   b4c6a:	fb02 f905 	mul.w	r9, r2, r5
   b4c6e:	fa19 f983 	uxtah	r9, r9, r3
   b4c72:	fa0f f389 	sxth.w	r3, r9
   b4c76:	ee08 3a10 	vmov	s16, r3
   b4c7a:	2308      	movs	r3, #8
   b4c7c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4c7e:	9b03      	ldr	r3, [sp, #12]
   b4c80:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4c84:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4c88:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4c8c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4c8e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4c92:	07d2      	lsls	r2, r2, #31
   b4c94:	d552      	bpl.n	b4d3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4c96:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4c98:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4c9c:	d13e      	bne.n	b4d1c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4c9e:	2c01      	cmp	r4, #1
   b4ca0:	d13c      	bne.n	b4d1c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4ca2:	699b      	ldr	r3, [r3, #24]
   b4ca4:	9906      	ldr	r1, [sp, #24]
   b4ca6:	461f      	mov	r7, r3
   b4ca8:	9b04      	ldr	r3, [sp, #16]
   b4caa:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4cac:	b212      	sxth	r2, r2
   b4cae:	4651      	mov	r1, sl
   b4cb0:	4658      	mov	r0, fp
   b4cb2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4cb4:	f109 0301 	add.w	r3, r9, #1
   b4cb8:	fa4f f983 	sxtb.w	r9, r3
   b4cbc:	9b07      	ldr	r3, [sp, #28]
   b4cbe:	085b      	lsrs	r3, r3, #1
   b4cc0:	9307      	str	r3, [sp, #28]
   b4cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4cc4:	3b01      	subs	r3, #1
   b4cc6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4cca:	930a      	str	r3, [sp, #40]	; 0x28
   b4ccc:	d1de      	bne.n	b4c8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4cce:	9f05      	ldr	r7, [sp, #20]
   b4cd0:	3701      	adds	r7, #1
   b4cd2:	b27b      	sxtb	r3, r7
   b4cd4:	9305      	str	r3, [sp, #20]
   b4cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4cd8:	3b01      	subs	r3, #1
   b4cda:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4cde:	9309      	str	r3, [sp, #36]	; 0x24
   b4ce0:	d1b9      	bne.n	b4c56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4ce2:	9b04      	ldr	r3, [sp, #16]
   b4ce4:	4543      	cmp	r3, r8
   b4ce6:	d00f      	beq.n	b4d08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4ce8:	2d01      	cmp	r5, #1
   b4cea:	f8db 3000 	ldr.w	r3, [fp]
   b4cee:	d13b      	bne.n	b4d68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4cf0:	2c01      	cmp	r4, #1
   b4cf2:	d139      	bne.n	b4d68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4cf4:	9908      	ldr	r1, [sp, #32]
   b4cf6:	f8cd 8000 	str.w	r8, [sp]
   b4cfa:	3105      	adds	r1, #5
   b4cfc:	6a1c      	ldr	r4, [r3, #32]
   b4cfe:	4632      	mov	r2, r6
   b4d00:	2308      	movs	r3, #8
   b4d02:	b209      	sxth	r1, r1
   b4d04:	4658      	mov	r0, fp
   b4d06:	47a0      	blx	r4
        endWrite();
   b4d08:	f8db 3000 	ldr.w	r3, [fp]
   b4d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d0e:	4658      	mov	r0, fp
}
   b4d10:	b011      	add	sp, #68	; 0x44
   b4d12:	ecbd 8b02 	vpop	{d8}
   b4d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4d1a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4d1c:	9906      	ldr	r1, [sp, #24]
   b4d1e:	fb14 f202 	smulbb	r2, r4, r2
   b4d22:	440a      	add	r2, r1
   b4d24:	9904      	ldr	r1, [sp, #16]
   b4d26:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4d28:	9400      	str	r4, [sp, #0]
   b4d2a:	69db      	ldr	r3, [r3, #28]
   b4d2c:	ee18 1a10 	vmov	r1, s16
   b4d30:	461f      	mov	r7, r3
   b4d32:	b212      	sxth	r2, r2
   b4d34:	462b      	mov	r3, r5
   b4d36:	4658      	mov	r0, fp
   b4d38:	47b8      	blx	r7
   b4d3a:	e7bb      	b.n	b4cb4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4d3c:	9a04      	ldr	r2, [sp, #16]
   b4d3e:	4542      	cmp	r2, r8
   b4d40:	d0b8      	beq.n	b4cb4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4d42:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4d44:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4d48:	d107      	bne.n	b4d5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4d4a:	2c01      	cmp	r4, #1
   b4d4c:	d105      	bne.n	b4d5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4d4e:	699b      	ldr	r3, [r3, #24]
   b4d50:	9906      	ldr	r1, [sp, #24]
   b4d52:	461f      	mov	r7, r3
   b4d54:	440a      	add	r2, r1
   b4d56:	4643      	mov	r3, r8
   b4d58:	e7a8      	b.n	b4cac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4d5a:	9906      	ldr	r1, [sp, #24]
   b4d5c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4d60:	fb14 f202 	smulbb	r2, r4, r2
   b4d64:	440a      	add	r2, r1
   b4d66:	e7df      	b.n	b4d28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4d6a:	f8cd 8004 	str.w	r8, [sp, #4]
   b4d6e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4d72:	9a08      	ldr	r2, [sp, #32]
   b4d74:	00e4      	lsls	r4, r4, #3
   b4d76:	440a      	add	r2, r1
   b4d78:	4611      	mov	r1, r2
   b4d7a:	9400      	str	r4, [sp, #0]
   b4d7c:	69dc      	ldr	r4, [r3, #28]
   b4d7e:	4632      	mov	r2, r6
   b4d80:	462b      	mov	r3, r5
   b4d82:	b209      	sxth	r1, r1
   b4d84:	4658      	mov	r0, fp
   b4d86:	47a0      	blx	r4
        endWrite();
   b4d88:	e7be      	b.n	b4d08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4d8a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4d8c:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4d8e:	6812      	ldr	r2, [r2, #0]
   b4d90:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4d92:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4d94:	b2ff      	uxtb	r7, r7
   b4d96:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4d9a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4d9e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4da0:	789a      	ldrb	r2, [r3, #2]
   b4da2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4da4:	78da      	ldrb	r2, [r3, #3]
   b4da6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4da8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4daa:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4dae:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4db2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4db4:	d801      	bhi.n	b4dba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4db6:	2c01      	cmp	r4, #1
   b4db8:	d957      	bls.n	b4e6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4dba:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4dbe:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4dc0:	fa0f f38a 	sxth.w	r3, sl
   b4dc4:	9307      	str	r3, [sp, #28]
        startWrite();
   b4dc6:	f8db 3000 	ldr.w	r3, [fp]
   b4dca:	4658      	mov	r0, fp
   b4dcc:	695b      	ldr	r3, [r3, #20]
   b4dce:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dd0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4dd2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dd6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4dd8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4ddc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4dde:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4de0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4de4:	429f      	cmp	r7, r3
   b4de6:	d28f      	bcs.n	b4d08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4de8:	9b07      	ldr	r3, [sp, #28]
   b4dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4dec:	443b      	add	r3, r7
   b4dee:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4df2:	2200      	movs	r2, #0
   b4df4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4df8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4dfa:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4dfe:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e02:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e06:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4e0a:	9905      	ldr	r1, [sp, #20]
   b4e0c:	4291      	cmp	r1, r2
   b4e0e:	d241      	bcs.n	b4e94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4e10:	1c5a      	adds	r2, r3, #1
   b4e12:	b2d2      	uxtb	r2, r2
   b4e14:	075b      	lsls	r3, r3, #29
   b4e16:	920d      	str	r2, [sp, #52]	; 0x34
   b4e18:	d107      	bne.n	b4e2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4e1a:	9b06      	ldr	r3, [sp, #24]
   b4e1c:	9906      	ldr	r1, [sp, #24]
   b4e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4e20:	3301      	adds	r3, #1
   b4e22:	b29b      	uxth	r3, r3
   b4e24:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4e28:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4e2a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4e2e:	d012      	beq.n	b4e56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4e30:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e32:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4e36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4e3a:	d11a      	bne.n	b4e72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4e3c:	2c01      	cmp	r4, #1
   b4e3e:	d118      	bne.n	b4e72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4e42:	699b      	ldr	r3, [r3, #24]
   b4e44:	4411      	add	r1, r2
   b4e46:	9a05      	ldr	r2, [sp, #20]
   b4e48:	4411      	add	r1, r2
   b4e4a:	461e      	mov	r6, r3
   b4e4c:	4652      	mov	r2, sl
   b4e4e:	9b04      	ldr	r3, [sp, #16]
   b4e50:	b209      	sxth	r1, r1
   b4e52:	4658      	mov	r0, fp
   b4e54:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4e56:	9e05      	ldr	r6, [sp, #20]
   b4e58:	3601      	adds	r6, #1
   b4e5a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4e5c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4e60:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4e62:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4e68:	e7ce      	b.n	b4e08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4e6a:	2300      	movs	r3, #0
   b4e6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4e70:	e7a9      	b.n	b4dc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4e72:	9805      	ldr	r0, [sp, #20]
   b4e74:	9a08      	ldr	r2, [sp, #32]
   b4e76:	4402      	add	r2, r0
   b4e78:	fb02 1105 	mla	r1, r2, r5, r1
   b4e7c:	9a04      	ldr	r2, [sp, #16]
   b4e7e:	e9cd 4200 	strd	r4, r2, [sp]
   b4e82:	69db      	ldr	r3, [r3, #28]
   b4e84:	ee18 2a10 	vmov	r2, s16
   b4e88:	461e      	mov	r6, r3
   b4e8a:	b209      	sxth	r1, r1
   b4e8c:	462b      	mov	r3, r5
   b4e8e:	4658      	mov	r0, fp
   b4e90:	47b0      	blx	r6
   b4e92:	e7e0      	b.n	b4e56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4e96:	3701      	adds	r7, #1
   b4e98:	4498      	add	r8, r3
   b4e9a:	fa5f f888 	uxtb.w	r8, r8
   b4e9e:	b2ff      	uxtb	r7, r7
   b4ea0:	e79f      	b.n	b4de2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4ea2:	b011      	add	sp, #68	; 0x44
   b4ea4:	ecbd 8b02 	vpop	{d8}
   b4ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4eac:	000b79a2 	.word	0x000b79a2

000b4eb0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4eb2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4eb4:	b085      	sub	sp, #20
   b4eb6:	4604      	mov	r4, r0
   b4eb8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4eba:	2a00      	cmp	r2, #0
   b4ebc:	d134      	bne.n	b4f28 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4ebe:	290a      	cmp	r1, #10
   b4ec0:	d108      	bne.n	b4ed4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4ec2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4ec4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4ec6:	7e42      	ldrb	r2, [r0, #25]
   b4ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4ecc:	8263      	strh	r3, [r4, #18]
}
   b4ece:	2001      	movs	r0, #1
   b4ed0:	b005      	add	sp, #20
   b4ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4ed4:	290d      	cmp	r1, #13
   b4ed6:	d0fa      	beq.n	b4ece <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4ed8:	7ee1      	ldrb	r1, [r4, #27]
   b4eda:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4edc:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4ede:	b171      	cbz	r1, b4efe <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4ee0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4ee4:	2106      	movs	r1, #6
   b4ee6:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4eea:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4eee:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4ef0:	bfc1      	itttt	gt
   b4ef2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4ef6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4ef8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4efc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4efe:	8ae2      	ldrh	r2, [r4, #22]
   b4f00:	9201      	str	r2, [sp, #4]
   b4f02:	8aa2      	ldrh	r2, [r4, #20]
   b4f04:	9200      	str	r2, [sp, #0]
   b4f06:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4f0a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4f0e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4f12:	4620      	mov	r0, r4
   b4f14:	f7ff fe5e 	bl	b4bd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4f18:	7e23      	ldrb	r3, [r4, #24]
   b4f1a:	8a22      	ldrh	r2, [r4, #16]
   b4f1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4f20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4f24:	8223      	strh	r3, [r4, #16]
   b4f26:	e7d2      	b.n	b4ece <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4f28:	290a      	cmp	r1, #10
   b4f2a:	d107      	bne.n	b4f3c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4f2c:	2300      	movs	r3, #0
   b4f2e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4f30:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4f32:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4f34:	8a43      	ldrh	r3, [r0, #18]
   b4f36:	fb01 3302 	mla	r3, r1, r2, r3
   b4f3a:	e7c7      	b.n	b4ecc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4f3c:	290d      	cmp	r1, #13
   b4f3e:	d0c6      	beq.n	b4ece <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4f40:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4f42:	42a9      	cmp	r1, r5
   b4f44:	d3c3      	bcc.n	b4ece <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4f46:	7a51      	ldrb	r1, [r2, #9]
   b4f48:	4299      	cmp	r1, r3
   b4f4a:	d3c0      	bcc.n	b4ece <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4f4c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4f4e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4f50:	b2ed      	uxtb	r5, r5
   b4f52:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4f56:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4f58:	b328      	cbz	r0, b4fa6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4f5a:	78e9      	ldrb	r1, [r5, #3]
   b4f5c:	b319      	cbz	r1, b4fa6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4f5e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4f60:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f62:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4f64:	b191      	cbz	r1, b4f8c <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4f66:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4f6a:	4408      	add	r0, r1
   b4f6c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4f70:	fb06 1100 	mla	r1, r6, r0, r1
   b4f74:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4f78:	4281      	cmp	r1, r0
   b4f7a:	dd07      	ble.n	b4f8c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4f7c:	2000      	movs	r0, #0
   b4f7e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4f80:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4f84:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4f86:	fb02 1207 	mla	r2, r2, r7, r1
   b4f8a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4f8c:	8ae2      	ldrh	r2, [r4, #22]
   b4f8e:	9201      	str	r2, [sp, #4]
   b4f90:	8aa2      	ldrh	r2, [r4, #20]
   b4f92:	9200      	str	r2, [sp, #0]
   b4f94:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4f98:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4f9c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	f7ff fe17 	bl	b4bd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4fa6:	7929      	ldrb	r1, [r5, #4]
   b4fa8:	7e22      	ldrb	r2, [r4, #24]
   b4faa:	8a23      	ldrh	r3, [r4, #16]
   b4fac:	fb01 3302 	mla	r3, r1, r2, r3
   b4fb0:	e7b8      	b.n	b4f24 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4fb2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4fb2:	2901      	cmp	r1, #1
   b4fb4:	bf38      	it	cc
   b4fb6:	2101      	movcc	r1, #1
   b4fb8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4fba:	7641      	strb	r1, [r0, #25]
}
   b4fbc:	4770      	bx	lr

000b4fbe <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4fbe:	4770      	bx	lr

000b4fc0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4fc0:	b510      	push	{r4, lr}
  }
   b4fc2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4fc4:	4604      	mov	r4, r0
  }
   b4fc6:	f7ff f866 	bl	b4096 <_ZdlPvj>
   b4fca:	4620      	mov	r0, r4
   b4fcc:	bd10      	pop	{r4, pc}
	...

000b4fd0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4fd2:	4604      	mov	r4, r0
   b4fd4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4fd6:	7922      	ldrb	r2, [r4, #4]
   b4fd8:	68a3      	ldr	r3, [r4, #8]
   b4fda:	b132      	cbz	r2, b4fea <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4fdc:	b9a3      	cbnz	r3, b5008 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4fde:	490b      	ldr	r1, [pc, #44]	; (b500c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4fe0:	b002      	add	sp, #8
   b4fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4fe6:	f001 bcbd 	b.w	b6964 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4fea:	4a09      	ldr	r2, [pc, #36]	; (b5010 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4fec:	7b26      	ldrb	r6, [r4, #12]
   b4fee:	4d09      	ldr	r5, [pc, #36]	; (b5014 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4ff0:	4909      	ldr	r1, [pc, #36]	; (b5018 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4ff2:	7b64      	ldrb	r4, [r4, #13]
   b4ff4:	2e01      	cmp	r6, #1
   b4ff6:	bf18      	it	ne
   b4ff8:	4629      	movne	r1, r5
   b4ffa:	e9cd 1400 	strd	r1, r4, [sp]
   b4ffe:	4907      	ldr	r1, [pc, #28]	; (b501c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5000:	f7ff f85e 	bl	b40c0 <_ZN5Print6printfEPKcz>
  }
   b5004:	b002      	add	sp, #8
   b5006:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5008:	4a05      	ldr	r2, [pc, #20]	; (b5020 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b500a:	e7ef      	b.n	b4fec <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b500c:	000b7f0d 	.word	0x000b7f0d
   b5010:	000b78b4 	.word	0x000b78b4
   b5014:	000b7f09 	.word	0x000b7f09
   b5018:	000b7f05 	.word	0x000b7f05
   b501c:	000b7f23 	.word	0x000b7f23
   b5020:	000b7efc 	.word	0x000b7efc

000b5024 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b5024:	b510      	push	{r4, lr}
   b5026:	4b04      	ldr	r3, [pc, #16]	; (b5038 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5028:	6003      	str	r3, [r0, #0]
   b502a:	4604      	mov	r4, r0
{
  if (buffer)
   b502c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b502e:	b108      	cbz	r0, b5034 <_ZN16Adafruit_SSD1306D1Ev+0x10>
  {
    free(buffer);
   b5030:	f001 fa4c 	bl	b64cc <free>
    buffer = NULL;
  }
}
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}
   b5038:	000b853c 	.word	0x000b853c

000b503c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b503c:	b510      	push	{r4, lr}
   b503e:	4604      	mov	r4, r0
}
   b5040:	f7ff fff0 	bl	b5024 <_ZN16Adafruit_SSD1306D1Ev>
   b5044:	4620      	mov	r0, r4
   b5046:	2150      	movs	r1, #80	; 0x50
   b5048:	f7ff f825 	bl	b4096 <_ZdlPvj>
   b504c:	4620      	mov	r0, r4
   b504e:	bd10      	pop	{r4, pc}

000b5050 <_ZN16Adafruit_SSD13069drawPixelEsst>:
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5050:	2900      	cmp	r1, #0
{
   b5052:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5054:	db4b      	blt.n	b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5056:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b505a:	428c      	cmp	r4, r1
   b505c:	dd47      	ble.n	b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b505e:	2a00      	cmp	r2, #0
   b5060:	db45      	blt.n	b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5062:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5066:	4294      	cmp	r4, r2
   b5068:	dd41      	ble.n	b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b506a:	7e84      	ldrb	r4, [r0, #26]
  {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation())
   b506c:	2c02      	cmp	r4, #2
   b506e:	d01f      	beq.n	b50b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5070:	2c03      	cmp	r4, #3
   b5072:	d026      	beq.n	b50c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5074:	2c01      	cmp	r4, #1
   b5076:	d104      	bne.n	b5082 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    {
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5078:	8904      	ldrh	r4, [r0, #8]
   b507a:	43d2      	mvns	r2, r2
   b507c:	4414      	add	r4, r2
      break;
   b507e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5080:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color)
   b5082:	2b01      	cmp	r3, #1
   b5084:	d023      	beq.n	b50ce <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5086:	2b02      	cmp	r3, #2
   b5088:	d032      	beq.n	b50f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b508a:	bb83      	cbnz	r3, b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    {
    case WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b508c:	2a00      	cmp	r2, #0
   b508e:	4613      	mov	r3, r2
   b5090:	8904      	ldrh	r4, [r0, #8]
   b5092:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5094:	bfb8      	it	lt
   b5096:	1dd3      	addlt	r3, r2, #7
   b5098:	10db      	asrs	r3, r3, #3
   b509a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b509e:	f002 0207 	and.w	r2, r2, #7
   b50a2:	2301      	movs	r3, #1
   b50a4:	4093      	lsls	r3, r2
   b50a6:	5c42      	ldrb	r2, [r0, r1]
   b50a8:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b50ac:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   b50ae:	e01e      	b.n	b50ee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   b50b0:	8904      	ldrh	r4, [r0, #8]
   b50b2:	3c01      	subs	r4, #1
   b50b4:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b50b6:	8944      	ldrh	r4, [r0, #10]
   b50b8:	43d2      	mvns	r2, r2
   b50ba:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b50bc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b50be:	b212      	sxth	r2, r2
      break;
   b50c0:	e7df      	b.n	b5082 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b50c2:	8944      	ldrh	r4, [r0, #10]
   b50c4:	3c01      	subs	r4, #1
   b50c6:	1a64      	subs	r4, r4, r1
      break;
   b50c8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b50ca:	b222      	sxth	r2, r4
      break;
   b50cc:	e7d9      	b.n	b5082 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b50ce:	2a00      	cmp	r2, #0
   b50d0:	8904      	ldrh	r4, [r0, #8]
   b50d2:	4613      	mov	r3, r2
   b50d4:	bfb8      	it	lt
   b50d6:	1dd3      	addlt	r3, r2, #7
   b50d8:	10db      	asrs	r3, r3, #3
   b50da:	fb13 1104 	smlabb	r1, r3, r4, r1
   b50de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b50e0:	f002 0007 	and.w	r0, r2, #7
   b50e4:	2201      	movs	r2, #1
   b50e6:	4082      	lsls	r2, r0
   b50e8:	5c58      	ldrb	r0, [r3, r1]
   b50ea:	4302      	orrs	r2, r0
   b50ec:	545a      	strb	r2, [r3, r1]
}
   b50ee:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b50f0:	2a00      	cmp	r2, #0
   b50f2:	4613      	mov	r3, r2
   b50f4:	8904      	ldrh	r4, [r0, #8]
   b50f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b50f8:	bfb8      	it	lt
   b50fa:	1dd3      	addlt	r3, r2, #7
   b50fc:	10db      	asrs	r3, r3, #3
   b50fe:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5102:	f002 0207 	and.w	r2, r2, #7
   b5106:	2301      	movs	r3, #1
   b5108:	fa03 f202 	lsl.w	r2, r3, r2
   b510c:	5c43      	ldrb	r3, [r0, r1]
   b510e:	405a      	eors	r2, r3
   b5110:	e7cc      	b.n	b50ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5114 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5114:	b570      	push	{r4, r5, r6, lr}
                                                     rstPin(rst_pin)
   b5116:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5118:	4604      	mov	r4, r0
   b511a:	460e      	mov	r6, r1
                                                     rstPin(rst_pin)
   b511c:	2180      	movs	r1, #128	; 0x80
   b511e:	f7ff fcef 	bl	b4b00 <_ZN12Adafruit_GFXC1Ess>
   b5122:	2500      	movs	r5, #0
   b5124:	4b0d      	ldr	r3, [pc, #52]	; (b515c <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b5126:	6023      	str	r3, [r4, #0]
   b5128:	6265      	str	r5, [r4, #36]	; 0x24
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b512a:	f002 f8bf 	bl	b72ac <_Z19__fetch_global_Wirev>
                                                     rstPin(rst_pin)
   b512e:	23ff      	movs	r3, #255	; 0xff
   b5130:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5134:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b5138:	4b09      	ldr	r3, [pc, #36]	; (b5160 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b513a:	63a3      	str	r3, [r4, #56]	; 0x38
   b513c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5140:	2301      	movs	r3, #1
   b5142:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b5146:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5148:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b514c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5150:	6425      	str	r5, [r4, #64]	; 0x40
   b5152:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b5156:	4620      	mov	r0, r4
   b5158:	bd70      	pop	{r4, r5, r6, pc}
   b515a:	bf00      	nop
   b515c:	000b853c 	.word	0x000b853c
   b5160:	000b7f48 	.word	0x000b7f48

000b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
{
   b5164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5166:	4604      	mov	r4, r0
  if (wire)
   b5168:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b516a:	460d      	mov	r5, r1
  if (wire)
   b516c:	b190      	cbz	r0, b5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b516e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5172:	f001 fa93 	bl	b669c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5176:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5178:	6803      	ldr	r3, [r0, #0]
   b517a:	2100      	movs	r1, #0
   b517c:	689b      	ldr	r3, [r3, #8]
   b517e:	4798      	blx	r3
    WIRE_WRITE(c);
   b5180:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5182:	6803      	ldr	r3, [r0, #0]
   b5184:	4629      	mov	r1, r5
   b5186:	689b      	ldr	r3, [r3, #8]
   b5188:	4798      	blx	r3
    wire->endTransmission();
   b518a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b518c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5190:	f001 ba8b 	b.w	b66aa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5194:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5198:	4601      	mov	r1, r0
   b519a:	b298      	uxth	r0, r3
   b519c:	f002 f843 	bl	b7226 <digitalWrite>
  if (spi)
   b51a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b51a2:	b120      	cbz	r0, b51ae <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b51a4:	4629      	mov	r1, r5
}
   b51a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b51aa:	f001 bcf9 	b.w	b6ba0 <_ZN8SPIClass8transferEh>
   b51ae:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b51b0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b51b2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b51b6:	ea05 0107 	and.w	r1, r5, r7
   b51ba:	b280      	uxth	r0, r0
   b51bc:	f002 f833 	bl	b7226 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b51c0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51c4:	2101      	movs	r1, #1
   b51c6:	b280      	uxth	r0, r0
   b51c8:	f002 f82d 	bl	b7226 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b51cc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51d0:	2100      	movs	r1, #0
   b51d2:	b280      	uxth	r0, r0
   b51d4:	f002 f827 	bl	b7226 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b51d8:	3e01      	subs	r6, #1
   b51da:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b51de:	d1e8      	bne.n	b51b2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b51e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51e2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i)
{
   b51e2:	b538      	push	{r3, r4, r5, lr}
   b51e4:	4604      	mov	r4, r0
  TRANSACTION_START
   b51e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b51e8:	460d      	mov	r5, r1
  TRANSACTION_START
   b51ea:	b180      	cbz	r0, b520e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b51ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b51ee:	f001 fa47 	bl	b6680 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b51f2:	2d00      	cmp	r5, #0
   b51f4:	4620      	mov	r0, r4
   b51f6:	bf14      	ite	ne
   b51f8:	21a7      	movne	r1, #167	; 0xa7
   b51fa:	21a6      	moveq	r1, #166	; 0xa6
   b51fc:	f7ff ffb2 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5202:	b188      	cbz	r0, b5228 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5204:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b520a:	f001 ba39 	b.w	b6680 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b520e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5210:	b118      	cbz	r0, b521a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5212:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5216:	f001 fc55 	bl	b6ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b521a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b521e:	2100      	movs	r1, #0
   b5220:	b280      	uxth	r0, r0
   b5222:	f002 f800 	bl	b7226 <digitalWrite>
   b5226:	e7e4      	b.n	b51f2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5228:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b522c:	2101      	movs	r1, #1
   b522e:	b280      	uxth	r0, r0
   b5230:	f001 fff9 	bl	b7226 <digitalWrite>
   b5234:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5236:	b118      	cbz	r0, b5240 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b523c:	f001 bc28 	b.w	b6a90 <_ZN8SPIClass14endTransactionEv>
}
   b5240:	bd38      	pop	{r3, r4, r5, pc}

000b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
{
   b5242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5246:	4604      	mov	r4, r0
  if (wire)
   b5248:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b524a:	460d      	mov	r5, r1
  if (wire)
   b524c:	188f      	adds	r7, r1, r2
   b524e:	b340      	cbz	r0, b52a2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5250:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5254:	f001 fa22 	bl	b669c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5258:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b525a:	6803      	ldr	r3, [r0, #0]
   b525c:	2100      	movs	r1, #0
   b525e:	689b      	ldr	r3, [r3, #8]
   b5260:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5262:	2601      	movs	r6, #1
    while (n--)
   b5264:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5266:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--)
   b5268:	d017      	beq.n	b529a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if (bytesOut >= WIRE_MAX)
   b526a:	2e1f      	cmp	r6, #31
   b526c:	d90c      	bls.n	b5288 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b526e:	f001 fa1c 	bl	b66aa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5272:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5278:	f001 fa10 	bl	b669c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b527c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b527e:	6803      	ldr	r3, [r0, #0]
   b5280:	2100      	movs	r1, #0
   b5282:	689b      	ldr	r3, [r3, #8]
   b5284:	4798      	blx	r3
        bytesOut = 1;
   b5286:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5288:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b528a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b528e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5290:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4798      	blx	r3
      bytesOut++;
   b5296:	b2f6      	uxtb	r6, r6
    while (n--)
   b5298:	e7e4      	b.n	b5264 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b529a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b529e:	f001 ba04 	b.w	b66aa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b52a2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b52a6:	4601      	mov	r1, r0
   b52a8:	b298      	uxth	r0, r3
   b52aa:	f001 ffbc 	bl	b7226 <digitalWrite>
    while (n--)
   b52ae:	42bd      	cmp	r5, r7
   b52b0:	d022      	beq.n	b52f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if (spi)
   b52b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   b52b4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b52b8:	b118      	cbz	r0, b52c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b52ba:	4649      	mov	r1, r9
   b52bc:	f001 fc70 	bl	b6ba0 <_ZN8SPIClass8transferEh>
   b52c0:	e7f5      	b.n	b52ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b52c2:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b52c4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b52c8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b52cc:	ea09 0108 	and.w	r1, r9, r8
   b52d0:	b280      	uxth	r0, r0
   b52d2:	f001 ffa8 	bl	b7226 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b52d6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b52da:	2101      	movs	r1, #1
   b52dc:	b280      	uxth	r0, r0
   b52de:	f001 ffa2 	bl	b7226 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b52e2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b52e6:	2100      	movs	r1, #0
   b52e8:	b280      	uxth	r0, r0
   b52ea:	f001 ff9c 	bl	b7226 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b52ee:	3e01      	subs	r6, #1
   b52f0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b52f4:	d1e8      	bne.n	b52c8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b52f6:	e7da      	b.n	b52ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b52f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b52fc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5300:	1dda      	adds	r2, r3, #7
   b5302:	bf48      	it	mi
   b5304:	f103 020e 	addmi.w	r2, r3, #14
   b5308:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b530c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b530e:	10d2      	asrs	r2, r2, #3
   b5310:	435a      	muls	r2, r3
   b5312:	2100      	movs	r1, #0
   b5314:	f002 b84c 	b.w	b73b0 <memset>

000b5318 <_ZN16Adafruit_SSD13065beginEhhbb>:
{
   b5318:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b531c:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b531e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   b5320:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5324:	4604      	mov	r4, r0
   b5326:	460f      	mov	r7, r1
   b5328:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b532a:	b1d3      	cbz	r3, b5362 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b532c:	4620      	mov	r0, r4
   b532e:	f7ff ffe5 	bl	b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32)
   b5332:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b5336:	2a20      	cmp	r2, #32
   b5338:	dc25      	bgt.n	b5386 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b533a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b533e:	2320      	movs	r3, #32
   b5340:	3a20      	subs	r2, #32
   b5342:	3973      	subs	r1, #115	; 0x73
   b5344:	2001      	movs	r0, #1
   b5346:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b534a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b534e:	2373      	movs	r3, #115	; 0x73
   b5350:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5354:	9300      	str	r3, [sp, #0]
   b5356:	f342 024f 	sbfx	r2, r2, #1, #16
   b535a:	4b85      	ldr	r3, [pc, #532]	; (b5570 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b535c:	f341 014f 	sbfx	r1, r1, #1, #16
   b5360:	e01b      	b.n	b539a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5362:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5366:	1dd8      	adds	r0, r3, #7
   b5368:	bf48      	it	mi
   b536a:	f103 000e 	addmi.w	r0, r3, #14
   b536e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5372:	10c0      	asrs	r0, r0, #3
   b5374:	4358      	muls	r0, r3
   b5376:	f001 f8a1 	bl	b64bc <malloc>
   b537a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b537c:	2800      	cmp	r0, #0
   b537e:	d1d5      	bne.n	b532c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5380:	b004      	add	sp, #16
   b5382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0, 0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b5386:	2340      	movs	r3, #64	; 0x40
   b5388:	f04f 0c01 	mov.w	ip, #1
   b538c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b5390:	2380      	movs	r3, #128	; 0x80
   b5392:	9300      	str	r3, [sp, #0]
   b5394:	2200      	movs	r2, #0
   b5396:	4b77      	ldr	r3, [pc, #476]	; (b5574 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b5398:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b539a:	4620      	mov	r0, r4
   b539c:	f7ff fbc6 	bl	b4b2c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire)
   b53a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b53a2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire)
   b53a6:	2800      	cmp	r0, #0
   b53a8:	d078      	beq.n	b549c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b53aa:	2d00      	cmp	r5, #0
   b53ac:	d174      	bne.n	b5498 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b53ae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b53b2:	2b20      	cmp	r3, #32
   b53b4:	bf0c      	ite	eq
   b53b6:	253c      	moveq	r5, #60	; 0x3c
   b53b8:	253d      	movne	r5, #61	; 0x3d
   b53ba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   b53be:	f1b8 0f00 	cmp.w	r8, #0
   b53c2:	d001      	beq.n	b53c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      wire->begin();
   b53c4:	f001 f960 	bl	b6688 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0))
   b53c8:	b1fe      	cbz	r6, b540a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b53ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b53ce:	2800      	cmp	r0, #0
   b53d0:	db1b      	blt.n	b540a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(rstPin, OUTPUT);
   b53d2:	2101      	movs	r1, #1
   b53d4:	b280      	uxth	r0, r0
   b53d6:	f001 ff15 	bl	b7204 <pinMode>
    digitalWrite(rstPin, HIGH);
   b53da:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b53de:	2101      	movs	r1, #1
   b53e0:	b280      	uxth	r0, r0
   b53e2:	f001 ff20 	bl	b7226 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b53e6:	2001      	movs	r0, #1
   b53e8:	f001 f8a8 	bl	b653c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b53ec:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b53f0:	2100      	movs	r1, #0
   b53f2:	b280      	uxth	r0, r0
   b53f4:	f001 ff17 	bl	b7226 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b53f8:	200a      	movs	r0, #10
   b53fa:	f001 f89f 	bl	b653c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b53fe:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5402:	2101      	movs	r1, #1
   b5404:	b280      	uxth	r0, r0
   b5406:	f001 ff0e 	bl	b7226 <digitalWrite>
  TRANSACTION_START
   b540a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b540c:	2800      	cmp	r0, #0
   b540e:	d074      	beq.n	b54fa <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b5410:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5412:	f001 f935 	bl	b6680 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5416:	2204      	movs	r2, #4
   b5418:	4957      	ldr	r1, [pc, #348]	; (b5578 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b541a:	4620      	mov	r0, r4
   b541c:	f7ff ff11 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5420:	8961      	ldrh	r1, [r4, #10]
   b5422:	3901      	subs	r1, #1
   b5424:	b2c9      	uxtb	r1, r1
   b5426:	4620      	mov	r0, r4
   b5428:	f7ff fe9c 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b542c:	4953      	ldr	r1, [pc, #332]	; (b557c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b542e:	2204      	movs	r2, #4
   b5430:	4620      	mov	r0, r4
   b5432:	f7ff ff06 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5436:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b543a:	2b01      	cmp	r3, #1
   b543c:	bf0c      	ite	eq
   b543e:	2110      	moveq	r1, #16
   b5440:	2114      	movne	r1, #20
   b5442:	4620      	mov	r0, r4
   b5444:	f7ff fe8e 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5448:	2204      	movs	r2, #4
   b544a:	494d      	ldr	r1, [pc, #308]	; (b5580 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b544c:	4620      	mov	r0, r4
   b544e:	f7ff fef8 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if ((WIDTH == 128) && (HEIGHT == 32))
   b5452:	68a3      	ldr	r3, [r4, #8]
   b5454:	4a4b      	ldr	r2, [pc, #300]	; (b5584 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5456:	4293      	cmp	r3, r2
   b5458:	d15c      	bne.n	b5514 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b545a:	494b      	ldr	r1, [pc, #300]	; (b5588 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b545c:	2204      	movs	r2, #4
   b545e:	4620      	mov	r0, r4
   b5460:	f7ff feef 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5464:	21d9      	movs	r1, #217	; 0xd9
   b5466:	4620      	mov	r0, r4
   b5468:	f7ff fe7c 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b546c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5470:	2b01      	cmp	r3, #1
   b5472:	bf0c      	ite	eq
   b5474:	2122      	moveq	r1, #34	; 0x22
   b5476:	21f1      	movne	r1, #241	; 0xf1
   b5478:	4620      	mov	r0, r4
   b547a:	f7ff fe73 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b547e:	4620      	mov	r0, r4
   b5480:	4942      	ldr	r1, [pc, #264]	; (b558c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5482:	2206      	movs	r2, #6
   b5484:	f7ff fedd 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b548a:	2800      	cmp	r0, #0
   b548c:	d063      	beq.n	b5556 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b548e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5490:	f001 f8f6 	bl	b6680 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5494:	2001      	movs	r0, #1
   b5496:	e773      	b.n	b5380 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5498:	b26d      	sxtb	r5, r5
   b549a:	e78e      	b.n	b53ba <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b549c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b54a0:	2101      	movs	r1, #1
   b54a2:	b280      	uxth	r0, r0
   b54a4:	f001 feae 	bl	b7204 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b54a8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b54ac:	2101      	movs	r1, #1
   b54ae:	b280      	uxth	r0, r0
   b54b0:	f001 fea8 	bl	b7204 <pinMode>
    SSD1306_DESELECT
   b54b4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b54b8:	2101      	movs	r1, #1
   b54ba:	b280      	uxth	r0, r0
   b54bc:	f001 feb3 	bl	b7226 <digitalWrite>
    if (spi)
   b54c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b54c2:	b13d      	cbz	r5, b54d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if (periphBegin)
   b54c4:	f1b8 0f00 	cmp.w	r8, #0
   b54c8:	f43f af7e 	beq.w	b53c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
        spi->begin();
   b54cc:	4628      	mov	r0, r5
   b54ce:	f001 facb 	bl	b6a68 <_ZN8SPIClass5beginEv>
   b54d2:	e779      	b.n	b53c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b54d4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b54d8:	2101      	movs	r1, #1
   b54da:	b280      	uxth	r0, r0
   b54dc:	f001 fe92 	bl	b7204 <pinMode>
      pinMode(clkPin, OUTPUT);
   b54e0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b54e4:	2101      	movs	r1, #1
   b54e6:	b280      	uxth	r0, r0
   b54e8:	f001 fe8c 	bl	b7204 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b54ec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b54f0:	4629      	mov	r1, r5
   b54f2:	b280      	uxth	r0, r0
   b54f4:	f001 fe97 	bl	b7226 <digitalWrite>
   b54f8:	e766      	b.n	b53c8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b54fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b54fc:	b118      	cbz	r0, b5506 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b54fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5502:	f001 fadf 	bl	b6ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5506:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b550a:	2100      	movs	r1, #0
   b550c:	b280      	uxth	r0, r0
   b550e:	f001 fe8a 	bl	b7226 <digitalWrite>
   b5512:	e780      	b.n	b5416 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  else if ((WIDTH == 128) && (HEIGHT == 64))
   b5514:	4a1e      	ldr	r2, [pc, #120]	; (b5590 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5516:	4293      	cmp	r3, r2
   b5518:	d10e      	bne.n	b5538 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b551a:	491e      	ldr	r1, [pc, #120]	; (b5594 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b551c:	2203      	movs	r2, #3
   b551e:	4620      	mov	r0, r4
   b5520:	f7ff fe8f 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5524:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5528:	2b01      	cmp	r3, #1
   b552a:	bf0c      	ite	eq
   b552c:	219f      	moveq	r1, #159	; 0x9f
   b552e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5530:	4620      	mov	r0, r4
   b5532:	f7ff fe17 	bl	b5164 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5536:	e795      	b.n	b5464 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  else if ((WIDTH == 96) && (HEIGHT == 16))
   b5538:	4a17      	ldr	r2, [pc, #92]	; (b5598 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b553a:	4293      	cmp	r3, r2
   b553c:	d192      	bne.n	b5464 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b553e:	4917      	ldr	r1, [pc, #92]	; (b559c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5540:	2203      	movs	r2, #3
   b5542:	4620      	mov	r0, r4
   b5544:	f7ff fe7d 	bl	b5242 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5548:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b554c:	2b01      	cmp	r3, #1
   b554e:	bf0c      	ite	eq
   b5550:	2110      	moveq	r1, #16
   b5552:	21af      	movne	r1, #175	; 0xaf
   b5554:	e7ec      	b.n	b5530 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b5556:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b555a:	2101      	movs	r1, #1
   b555c:	b280      	uxth	r0, r0
   b555e:	f001 fe62 	bl	b7226 <digitalWrite>
   b5562:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5564:	2800      	cmp	r0, #0
   b5566:	d095      	beq.n	b5494 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5568:	f001 fa92 	bl	b6a90 <_ZN8SPIClass14endTransactionEv>
   b556c:	e792      	b.n	b5494 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b556e:	bf00      	nop
   b5570:	000b7f54 	.word	0x000b7f54
   b5574:	000b8134 	.word	0x000b8134
   b5578:	000b859c 	.word	0x000b859c
   b557c:	000b85a0 	.word	0x000b85a0
   b5580:	000b85a4 	.word	0x000b85a4
   b5584:	00200080 	.word	0x00200080
   b5588:	000b85ae 	.word	0x000b85ae
   b558c:	000b85a8 	.word	0x000b85a8
   b5590:	00400080 	.word	0x00400080
   b5594:	000b85b2 	.word	0x000b85b2
   b5598:	00100060 	.word	0x00100060
   b559c:	000b85b5 	.word	0x000b85b5

000b55a0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
{
   b55a0:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT))
   b55a2:	2a00      	cmp	r2, #0
{
   b55a4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT))
   b55a8:	db3d      	blt.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b55aa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b55ae:	4294      	cmp	r4, r2
   b55b0:	dd39      	ble.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0)
   b55b2:	2900      	cmp	r1, #0
      w += x;
   b55b4:	bfbe      	ittt	lt
   b55b6:	185b      	addlt	r3, r3, r1
   b55b8:	b21b      	sxthlt	r3, r3
      x = 0;
   b55ba:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH)
   b55bc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b55c0:	18ce      	adds	r6, r1, r3
   b55c2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b55c4:	bfc4      	itt	gt
   b55c6:	1a63      	subgt	r3, r4, r1
   b55c8:	b21b      	sxthgt	r3, r3
    if (w > 0)
   b55ca:	2b00      	cmp	r3, #0
   b55cc:	dd2b      	ble.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b55ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b55d0:	10d6      	asrs	r6, r2, #3
   b55d2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b55d6:	4401      	add	r1, r0
              mask = 1 << (y & 7);
   b55d8:	f002 0007 	and.w	r0, r2, #7
   b55dc:	2201      	movs	r2, #1
   b55de:	4082      	lsls	r2, r0
      switch (color)
   b55e0:	2d01      	cmp	r5, #1
              mask = 1 << (y & 7);
   b55e2:	b2d2      	uxtb	r2, r2
      switch (color)
   b55e4:	d016      	beq.n	b5614 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b55e6:	2d02      	cmp	r5, #2
   b55e8:	d00b      	beq.n	b5602 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b55ea:	b9e5      	cbnz	r5, b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   b55ec:	43d2      	mvns	r2, r2
   b55ee:	b2d2      	uxtb	r2, r2
   b55f0:	440b      	add	r3, r1
        while (w--)
   b55f2:	4299      	cmp	r1, r3
   b55f4:	d017      	beq.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   b55f6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b55fa:	4010      	ands	r0, r2
   b55fc:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5600:	e7f7      	b.n	b55f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5602:	440b      	add	r3, r1
        while (w--)
   b5604:	4299      	cmp	r1, r3
   b5606:	d00e      	beq.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   b5608:	f811 0b01 	ldrb.w	r0, [r1], #1
   b560c:	4050      	eors	r0, r2
   b560e:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5612:	e7f7      	b.n	b5604 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5614:	440b      	add	r3, r1
        while (w--)
   b5616:	4299      	cmp	r1, r3
   b5618:	d005      	beq.n	b5626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   b561a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b561e:	4310      	orrs	r0, r2
   b5620:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5624:	e7f7      	b.n	b5616 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5626:	bd70      	pop	{r4, r5, r6, pc}

000b5628 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
{
   b5628:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH))
   b562a:	2900      	cmp	r1, #0
{
   b562c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH))
   b5630:	db76      	blt.n	b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5632:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5636:	42b1      	cmp	r1, r6
   b5638:	da72      	bge.n	b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0)
   b563a:	2a00      	cmp	r2, #0
      __h += __y;
   b563c:	bfbe      	ittt	lt
   b563e:	189b      	addlt	r3, r3, r2
   b5640:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5642:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT)
   b5644:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5648:	18d7      	adds	r7, r2, r3
   b564a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b564c:	bfc4      	itt	gt
   b564e:	1aa3      	subgt	r3, r4, r2
   b5650:	b21b      	sxthgt	r3, r3
    if (__h > 0)
   b5652:	2b00      	cmp	r3, #0
   b5654:	dd64      	ble.n	b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5656:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b565a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b565c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod)
   b5660:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   b5664:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5666:	eb07 0406 	add.w	r4, r7, r6
      if (mod)
   b566a:	d023      	beq.n	b56b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b566c:	f1c2 0208 	rsb	r2, r2, #8
   b5670:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5672:	492d      	ldr	r1, [pc, #180]	; (b5728 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   b5674:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   b5676:	bf3c      	itt	cc
   b5678:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b567c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5680:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   b5682:	bf3c      	itt	cc
   b5684:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5688:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color)
   b568c:	2d01      	cmp	r5, #1
   b568e:	d007      	beq.n	b56a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5690:	2d02      	cmp	r5, #2
   b5692:	d02e      	beq.n	b56f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5694:	b94d      	cbnz	r5, b56aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   b5696:	f817 c006 	ldrb.w	ip, [r7, r6]
   b569a:	ea2c 0101 	bic.w	r1, ip, r1
   b569e:	e003      	b.n	b56a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   b56a0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b56a4:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   b56a8:	55b9      	strb	r1, [r7, r6]
      if (h >= mod)
   b56aa:	4293      	cmp	r3, r2
   b56ac:	d338      	bcc.n	b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b56ae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b56b2:	440c      	add	r4, r1
        h -= mod;
   b56b4:	1a9a      	subs	r2, r3, r2
   b56b6:	b2d2      	uxtb	r2, r2
        if (h >= 8)
   b56b8:	2a07      	cmp	r2, #7
   b56ba:	d90e      	bls.n	b56da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == INVERSE)
   b56bc:	2d02      	cmp	r5, #2
   b56be:	d11d      	bne.n	b56fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b56c0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   b56c2:	7821      	ldrb	r1, [r4, #0]
   b56c4:	43c9      	mvns	r1, r1
   b56c6:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b56c8:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b56ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b56ce:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b56d0:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b56d2:	440c      	add	r4, r1
            } while (h >= 8);
   b56d4:	d8f5      	bhi.n	b56c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   b56d6:	f002 0207 	and.w	r2, r2, #7
        if (h)
   b56da:	b30a      	cbz	r2, b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b56dc:	4b13      	ldr	r3, [pc, #76]	; (b572c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color)
   b56de:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b56e0:	5c9b      	ldrb	r3, [r3, r2]
          switch (color)
   b56e2:	d01a      	beq.n	b571a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b56e4:	2d02      	cmp	r5, #2
   b56e6:	d01c      	beq.n	b5722 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b56e8:	b9d5      	cbnz	r5, b5720 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   b56ea:	7822      	ldrb	r2, [r4, #0]
   b56ec:	ea22 0303 	bic.w	r3, r2, r3
   b56f0:	e015      	b.n	b571e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   b56f2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b56f6:	ea81 010c 	eor.w	r1, r1, ip
   b56fa:	e7d5      	b.n	b56a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b56fc:	1e29      	subs	r1, r5, #0
   b56fe:	bf18      	it	ne
   b5700:	2101      	movne	r1, #1
   b5702:	4249      	negs	r1, r1
   b5704:	b2c9      	uxtb	r1, r1
   b5706:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   b5708:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b570a:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b570c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5710:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5712:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5714:	4434      	add	r4, r6
            } while (h >= 8);
   b5716:	d8f7      	bhi.n	b5708 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5718:	e7dd      	b.n	b56d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   b571a:	7822      	ldrb	r2, [r4, #0]
   b571c:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   b571e:	7023      	strb	r3, [r4, #0]
}
   b5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   b5722:	7822      	ldrb	r2, [r4, #0]
   b5724:	4053      	eors	r3, r2
   b5726:	e7fa      	b.n	b571e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5728:	000b858c 	.word	0x000b858c
   b572c:	000b8594 	.word	0x000b8594

000b5730 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
{
   b5730:	b470      	push	{r4, r5, r6}
   b5732:	4614      	mov	r4, r2
  switch (rotation)
   b5734:	7e82      	ldrb	r2, [r0, #26]
{
   b5736:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation)
   b573a:	2a02      	cmp	r2, #2
   b573c:	d00d      	beq.n	b575a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b573e:	2a03      	cmp	r2, #3
   b5740:	d018      	beq.n	b5774 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5742:	2a01      	cmp	r2, #1
   b5744:	d111      	bne.n	b576a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5746:	8902      	ldrh	r2, [r0, #8]
   b5748:	43e4      	mvns	r4, r4
   b574a:	4414      	add	r4, r2
   b574c:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   b574e:	9603      	str	r6, [sp, #12]
   b5750:	460a      	mov	r2, r1
   b5752:	4621      	mov	r1, r4
}
   b5754:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   b5756:	f7ff bf67 	b.w	b5628 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b575a:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   b575c:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   b575e:	43e4      	mvns	r4, r4
    x -= (w - 1);
   b5760:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   b5762:	4414      	add	r4, r2
    x -= (w - 1);
   b5764:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   b5766:	b224      	sxth	r4, r4
    x -= (w - 1);
   b5768:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   b576a:	9603      	str	r6, [sp, #12]
   b576c:	4622      	mov	r2, r4
}
   b576e:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   b5770:	f7ff bf16 	b.w	b55a0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   b5774:	8945      	ldrh	r5, [r0, #10]
   b5776:	4419      	add	r1, r3
   b5778:	1a69      	subs	r1, r5, r1
   b577a:	b209      	sxth	r1, r1
    break;
   b577c:	e7e7      	b.n	b574e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b577e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
   b577e:	b430      	push	{r4, r5}
   b5780:	4614      	mov	r4, r2
  switch (rotation)
   b5782:	7e82      	ldrb	r2, [r0, #26]
{
   b5784:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation)
   b5788:	2a02      	cmp	r2, #2
   b578a:	d00d      	beq.n	b57a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b578c:	2a03      	cmp	r2, #3
   b578e:	d018      	beq.n	b57c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5790:	2a01      	cmp	r2, #1
   b5792:	d111      	bne.n	b57b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   b5794:	18e2      	adds	r2, r4, r3
   b5796:	8904      	ldrh	r4, [r0, #8]
   b5798:	1aa4      	subs	r4, r4, r2
   b579a:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   b579c:	9502      	str	r5, [sp, #8]
   b579e:	460a      	mov	r2, r1
   b57a0:	4621      	mov	r1, r4
}
   b57a2:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   b57a4:	f7ff befc 	b.w	b55a0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   b57a8:	8902      	ldrh	r2, [r0, #8]
   b57aa:	43c9      	mvns	r1, r1
   b57ac:	4411      	add	r1, r2
    y -= (h - 1);
   b57ae:	18e2      	adds	r2, r4, r3
   b57b0:	8944      	ldrh	r4, [r0, #10]
   b57b2:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   b57b4:	b209      	sxth	r1, r1
    y -= (h - 1);
   b57b6:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   b57b8:	9502      	str	r5, [sp, #8]
   b57ba:	4622      	mov	r2, r4
}
   b57bc:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   b57be:	f7ff bf33 	b.w	b5628 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b57c2:	8942      	ldrh	r2, [r0, #10]
   b57c4:	43c9      	mvns	r1, r1
   b57c6:	4411      	add	r1, r2
   b57c8:	b209      	sxth	r1, r1
    break;
   b57ca:	e7e7      	b.n	b579c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b57cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b57cc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b57ce:	4c0b      	ldr	r4, [pc, #44]	; (b57fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b57d0:	7821      	ldrb	r1, [r4, #0]
   b57d2:	f3bf 8f5b 	dmb	ish
   b57d6:	f011 0101 	ands.w	r1, r1, #1
   b57da:	d10b      	bne.n	b57f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b57dc:	4620      	mov	r0, r4
   b57de:	9101      	str	r1, [sp, #4]
   b57e0:	f7fe fc66 	bl	b40b0 <__cxa_guard_acquire>
   b57e4:	9901      	ldr	r1, [sp, #4]
   b57e6:	b128      	cbz	r0, b57f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b57e8:	4805      	ldr	r0, [pc, #20]	; (b5800 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b57ea:	f001 f933 	bl	b6a54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b57ee:	4620      	mov	r0, r4
   b57f0:	f7fe fc63 	bl	b40ba <__cxa_guard_release>
    }
   b57f4:	4802      	ldr	r0, [pc, #8]	; (b5800 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b57f6:	b002      	add	sp, #8
   b57f8:	bd10      	pop	{r4, pc}
   b57fa:	bf00      	nop
   b57fc:	2003dff8 	.word	0x2003dff8
   b5800:	2003dffc 	.word	0x2003dffc

000b5804 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b5804:	b510      	push	{r4, lr}
   b5806:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b5808:	7001      	strb	r1, [r0, #0]
   b580a:	7042      	strb	r2, [r0, #1]
   b580c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b580e:	2101      	movs	r1, #1
   b5810:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b5814:	f001 fdb6 	bl	b7384 <calloc>
   b5818:	6060      	str	r0, [r4, #4]
}
   b581a:	4620      	mov	r0, r4
   b581c:	bd10      	pop	{r4, pc}

000b581e <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b581e:	b538      	push	{r3, r4, r5, lr}
   b5820:	4604      	mov	r4, r0
   b5822:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b5824:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b5826:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b5828:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b582a:	f001 fceb 	bl	b7204 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b582e:	7b20      	ldrb	r0, [r4, #12]
   b5830:	2101      	movs	r1, #1
   b5832:	f001 fcf8 	bl	b7226 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b5836:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b5838:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b583a:	2101      	movs	r1, #1
   b583c:	f001 fce2 	bl	b7204 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b5840:	7b60      	ldrb	r0, [r4, #13]
   b5842:	2100      	movs	r1, #0
   b5844:	f001 fcef 	bl	b7226 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b5848:	4620      	mov	r0, r4
   b584a:	bd38      	pop	{r3, r4, r5, pc}

000b584c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b584c:	3901      	subs	r1, #1
   b584e:	b2c9      	uxtb	r1, r1
   b5850:	2908      	cmp	r1, #8
   b5852:	bf9a      	itte	ls
   b5854:	4b02      	ldrls	r3, [pc, #8]	; (b5860 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b5856:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b585a:	4802      	ldrhi	r0, [pc, #8]	; (b5864 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b585c:	4770      	bx	lr
   b585e:	bf00      	nop
   b5860:	000b86b0 	.word	0x000b86b0
   b5864:	000b85b8 	.word	0x000b85b8

000b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b5868:	b507      	push	{r0, r1, r2, lr}
   b586a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b586c:	f7ff ffae 	bl	b57cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5870:	9901      	ldr	r1, [sp, #4]
    }
   b5872:	b003      	add	sp, #12
   b5874:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b5878:	f001 b992 	b.w	b6ba0 <_ZN8SPIClass8transferEh>

000b587c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b587c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5880:	4607      	mov	r7, r0
   b5882:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b5886:	461e      	mov	r6, r3
	if (count == 0) {
   b5888:	4615      	mov	r5, r2
   b588a:	2a00      	cmp	r2, #0
   b588c:	d042      	beq.n	b5914 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b588e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5892:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5894:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5898:	2100      	movs	r1, #0
   b589a:	f001 fcc4 	bl	b7226 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b589e:	4648      	mov	r0, r9
   b58a0:	f7ff ffe2 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b58a4:	3d01      	subs	r5, #1
   b58a6:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b58a8:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b58ac:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b58b0:	fa5f f48b 	uxtb.w	r4, fp
   b58b4:	42a5      	cmp	r5, r4
   b58b6:	d922      	bls.n	b58fe <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b58b8:	b9dc      	cbnz	r4, b58f2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b58ba:	f1b8 0f00 	cmp.w	r8, #0
   b58be:	d018      	beq.n	b58f2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b58c0:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b58c2:	b2d3      	uxtb	r3, r2
   b58c4:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b58c6:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b58c8:	d805      	bhi.n	b58d6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b58ca:	fa0a f402 	lsl.w	r4, sl, r2
   b58ce:	430c      	orrs	r4, r1
   b58d0:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b58d2:	3201      	adds	r2, #1
   b58d4:	e7f5      	b.n	b58c2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b58d6:	4648      	mov	r0, r9
   b58d8:	9101      	str	r1, [sp, #4]
   b58da:	f7ff ffc5 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b58de:	7833      	ldrb	r3, [r6, #0]
   b58e0:	9901      	ldr	r1, [sp, #4]
   b58e2:	4004      	ands	r4, r0
   b58e4:	ea23 0301 	bic.w	r3, r3, r1
   b58e8:	431c      	orrs	r4, r3
   b58ea:	7034      	strb	r4, [r6, #0]
		index++;
   b58ec:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b58f0:	e7de      	b.n	b58b0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b58f2:	4648      	mov	r0, r9
   b58f4:	f7ff ffb8 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b58f8:	f806 000b 	strb.w	r0, [r6, fp]
   b58fc:	e7f6      	b.n	b58ec <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b58fe:	2000      	movs	r0, #0
   b5900:	f7ff ffb2 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b5904:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b5906:	7b38      	ldrb	r0, [r7, #12]
   b5908:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b590a:	b003      	add	sp, #12
   b590c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b5910:	f001 bc89 	b.w	b7226 <digitalWrite>
} // End PCD_ReadRegister()
   b5914:	b003      	add	sp, #12
   b5916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b591a <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b591a:	b538      	push	{r3, r4, r5, lr}
   b591c:	460c      	mov	r4, r1
   b591e:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b5920:	2100      	movs	r1, #0
   b5922:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5924:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b5928:	f001 fc7d 	bl	b7226 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b592c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b5930:	f7ff ff9a 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b5934:	2000      	movs	r0, #0
   b5936:	f7ff ff97 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b593a:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b593c:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b593e:	7b28      	ldrb	r0, [r5, #12]
   b5940:	f001 fc71 	bl	b7226 <digitalWrite>
} // End PCD_ReadRegister()
   b5944:	4620      	mov	r0, r4
   b5946:	bd38      	pop	{r3, r4, r5, pc}

000b5948 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b5948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b594a:	460f      	mov	r7, r1
   b594c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b594e:	2100      	movs	r1, #0
   b5950:	7b00      	ldrb	r0, [r0, #12]
								) {
   b5952:	4615      	mov	r5, r2
   b5954:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5956:	f001 fc66 	bl	b7226 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b595a:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b595e:	f7ff ff83 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5962:	4425      	add	r5, r4
   b5964:	42ac      	cmp	r4, r5
   b5966:	d004      	beq.n	b5972 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b5968:	f814 0b01 	ldrb.w	r0, [r4], #1
   b596c:	f7ff ff7c 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5970:	e7f8      	b.n	b5964 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b5972:	7b30      	ldrb	r0, [r6, #12]
   b5974:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b5976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b597a:	f001 bc54 	b.w	b7226 <digitalWrite>

000b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b597e:	b570      	push	{r4, r5, r6, lr}
   b5980:	4604      	mov	r4, r0
   b5982:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5984:	7b00      	ldrb	r0, [r0, #12]
   b5986:	2100      	movs	r1, #0
								) {
   b5988:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b598a:	f001 fc4c 	bl	b7226 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b598e:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b5992:	f7ff ff69 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b5996:	4628      	mov	r0, r5
   b5998:	f7ff ff66 	bl	b5868 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b599c:	7b20      	ldrb	r0, [r4, #12]
   b599e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b59a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b59a4:	f001 bc3f 	b.w	b7226 <digitalWrite>

000b59a8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b59a8:	b570      	push	{r4, r5, r6, lr}
   b59aa:	4616      	mov	r6, r2
   b59ac:	4604      	mov	r4, r0
   b59ae:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b59b0:	f7ff ffb3 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b59b4:	4330      	orrs	r0, r6
   b59b6:	b2c2      	uxtb	r2, r0
   b59b8:	4629      	mov	r1, r5
   b59ba:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b59bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b59c0:	f7ff bfdd 	b.w	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b59c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b59c4:	b570      	push	{r4, r5, r6, lr}
   b59c6:	4616      	mov	r6, r2
   b59c8:	4604      	mov	r4, r0
   b59ca:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b59cc:	f7ff ffa5 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b59d0:	ea20 0006 	bic.w	r0, r0, r6
   b59d4:	b2c2      	uxtb	r2, r0
   b59d6:	4629      	mov	r1, r5
   b59d8:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b59da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b59de:	f7ff bfce 	b.w	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b59e2 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b59e2:	2208      	movs	r2, #8
   b59e4:	2110      	movs	r1, #16
   b59e6:	f7ff bfed 	b.w	b59c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b59ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59ec:	4604      	mov	r4, r0
   b59ee:	4615      	mov	r5, r2
   b59f0:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b59f2:	2200      	movs	r2, #0
   b59f4:	2102      	movs	r1, #2
					 ) {
   b59f6:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b59f8:	f7ff ffc1 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b59fc:	2204      	movs	r2, #4
   b59fe:	210a      	movs	r1, #10
   b5a00:	4620      	mov	r0, r4
   b5a02:	f7ff ffbc 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b5a06:	2280      	movs	r2, #128	; 0x80
   b5a08:	2114      	movs	r1, #20
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	f7ff ffcc 	bl	b59a8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b5a10:	462a      	mov	r2, r5
   b5a12:	463b      	mov	r3, r7
   b5a14:	2112      	movs	r1, #18
   b5a16:	4620      	mov	r0, r4
   b5a18:	f7ff ff96 	bl	b5948 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b5a1c:	2203      	movs	r2, #3
   b5a1e:	2102      	movs	r1, #2
   b5a20:	4620      	mov	r0, r4
   b5a22:	f7ff ffac 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b5a26:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b5a2a:	210a      	movs	r1, #10
   b5a2c:	4620      	mov	r0, r4
   b5a2e:	f7ff ff74 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b5a32:	0743      	lsls	r3, r0, #29
   b5a34:	d405      	bmi.n	b5a42 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b5a36:	3d01      	subs	r5, #1
   b5a38:	b2ad      	uxth	r5, r5
   b5a3a:	2d00      	cmp	r5, #0
   b5a3c:	d1f5      	bne.n	b5a2a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b5a3e:	2004      	movs	r0, #4
   b5a40:	e00f      	b.n	b5a62 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b5a42:	2200      	movs	r2, #0
   b5a44:	2102      	movs	r1, #2
   b5a46:	4620      	mov	r0, r4
   b5a48:	f7ff ff99 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b5a4c:	2144      	movs	r1, #68	; 0x44
   b5a4e:	4620      	mov	r0, r4
   b5a50:	f7ff ff63 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b5a54:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b5a56:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f7ff ff5e 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b5a5e:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b5a60:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b5a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a64 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b5a64:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b5a66:	220f      	movs	r2, #15
   b5a68:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b5a6a:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b5a6c:	f7ff ff87 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b5a70:	2032      	movs	r0, #50	; 0x32
   b5a72:	f000 fd63 	bl	b653c <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b5a76:	2102      	movs	r1, #2
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ff4e 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b5a7e:	06c3      	lsls	r3, r0, #27
   b5a80:	d4f9      	bmi.n	b5a76 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b5a82:	bd10      	pop	{r4, pc}

000b5a84 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b5a84:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b5a86:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b5a88:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b5a8a:	f7ff ff46 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b5a8e:	f000 0303 	and.w	r3, r0, #3
   b5a92:	2b03      	cmp	r3, #3
   b5a94:	d008      	beq.n	b5aa8 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5a96:	f040 0203 	orr.w	r2, r0, #3
   b5a9a:	b2d2      	uxtb	r2, r2
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b5aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5aa4:	f7ff bf6b 	b.w	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b5aa8:	bd10      	pop	{r4, pc}

000b5aaa <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b5aaa:	b510      	push	{r4, lr}
   b5aac:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b5aae:	7b40      	ldrb	r0, [r0, #13]
   b5ab0:	f001 fbd2 	bl	b7258 <digitalRead>
   b5ab4:	bb48      	cbnz	r0, b5b0a <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b5ab6:	7b60      	ldrb	r0, [r4, #13]
   b5ab8:	2101      	movs	r1, #1
   b5aba:	f001 fbb4 	bl	b7226 <digitalWrite>
		delay(50);
   b5abe:	2032      	movs	r0, #50	; 0x32
   b5ac0:	f000 fd3c 	bl	b653c <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b5ac4:	4620      	mov	r0, r4
   b5ac6:	2280      	movs	r2, #128	; 0x80
   b5ac8:	2154      	movs	r1, #84	; 0x54
   b5aca:	f7ff ff58 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b5ace:	4620      	mov	r0, r4
   b5ad0:	22a9      	movs	r2, #169	; 0xa9
   b5ad2:	2156      	movs	r1, #86	; 0x56
   b5ad4:	f7ff ff53 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b5ad8:	4620      	mov	r0, r4
   b5ada:	2203      	movs	r2, #3
   b5adc:	2158      	movs	r1, #88	; 0x58
   b5ade:	f7ff ff4e 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	22e8      	movs	r2, #232	; 0xe8
   b5ae6:	215a      	movs	r1, #90	; 0x5a
   b5ae8:	f7ff ff49 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b5aec:	4620      	mov	r0, r4
   b5aee:	2240      	movs	r2, #64	; 0x40
   b5af0:	212a      	movs	r1, #42	; 0x2a
   b5af2:	f7ff ff44 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b5af6:	4620      	mov	r0, r4
   b5af8:	223d      	movs	r2, #61	; 0x3d
   b5afa:	2122      	movs	r1, #34	; 0x22
   b5afc:	f7ff ff3f 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b5b00:	4620      	mov	r0, r4
} // End PCD_Init()
   b5b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b5b06:	f7ff bfbd 	b.w	b5a84 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff ffaa 	bl	b5a64 <_ZN7MFRC5229PCD_ResetEv>
   b5b10:	e7d8      	b.n	b5ac4 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b5b12 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b5b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b16:	b089      	sub	sp, #36	; 0x24
   b5b18:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b5b1c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b5b20:	9203      	str	r2, [sp, #12]
   b5b22:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b5b26:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b5b2a:	9204      	str	r2, [sp, #16]
   b5b2c:	4604      	mov	r4, r0
   b5b2e:	468a      	mov	sl, r1
   b5b30:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b5b32:	f1b9 0f00 	cmp.w	r9, #0
   b5b36:	d03e      	beq.n	b5bb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b5b38:	f899 8000 	ldrb.w	r8, [r9]
   b5b3c:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b5b3e:	2200      	movs	r2, #0
   b5b40:	2102      	movs	r1, #2
   b5b42:	4620      	mov	r0, r4
   b5b44:	f7ff ff1b 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b5b48:	227f      	movs	r2, #127	; 0x7f
   b5b4a:	2108      	movs	r1, #8
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	f7ff ff16 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b5b52:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b5b56:	2280      	movs	r2, #128	; 0x80
   b5b58:	2114      	movs	r1, #20
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	f7ff ff24 	bl	b59a8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b5b60:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b5b64:	9b05      	ldr	r3, [sp, #20]
   b5b66:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b5b6a:	2112      	movs	r1, #18
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f7ff feeb 	bl	b5948 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b5b72:	4642      	mov	r2, r8
   b5b74:	211a      	movs	r1, #26
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7ff ff01 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b5b7c:	4652      	mov	r2, sl
   b5b7e:	2102      	movs	r1, #2
   b5b80:	4620      	mov	r0, r4
   b5b82:	f7ff fefc 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b5b86:	f1ba 0f0c 	cmp.w	sl, #12
   b5b8a:	d104      	bne.n	b5b96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b5b8c:	2280      	movs	r2, #128	; 0x80
   b5b8e:	211a      	movs	r1, #26
   b5b90:	4620      	mov	r0, r4
   b5b92:	f7ff ff09 	bl	b59a8 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b5b96:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b5b9a:	2108      	movs	r1, #8
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	f7ff febc 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b5ba2:	9b03      	ldr	r3, [sp, #12]
   b5ba4:	4218      	tst	r0, r3
   b5ba6:	d108      	bne.n	b5bba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b5ba8:	07c3      	lsls	r3, r0, #31
   b5baa:	d402      	bmi.n	b5bb2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b5bac:	f1b8 0801 	subs.w	r8, r8, #1
   b5bb0:	d1f3      	bne.n	b5b9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b5bb2:	2004      	movs	r0, #4
   b5bb4:	e04d      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b5bb6:	46c8      	mov	r8, r9
   b5bb8:	e7c0      	b.n	b5b3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b5bba:	210c      	movs	r1, #12
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	f7ff feac 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b5bc2:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b5bc6:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b5bc8:	d146      	bne.n	b5c58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b5bca:	b1dd      	cbz	r5, b5c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b5bcc:	b1d6      	cbz	r6, b5c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b5bce:	2114      	movs	r1, #20
   b5bd0:	4620      	mov	r0, r4
   b5bd2:	f7ff fea2 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b5bd6:	7833      	ldrb	r3, [r6, #0]
   b5bd8:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b5bda:	4602      	mov	r2, r0
		if (n > *backLen) {
   b5bdc:	d33e      	bcc.n	b5c5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b5bde:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b5be0:	462b      	mov	r3, r5
   b5be2:	2112      	movs	r1, #18
   b5be4:	4620      	mov	r0, r4
   b5be6:	f8cd b000 	str.w	fp, [sp]
   b5bea:	f7ff fe47 	bl	b587c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b5bee:	2118      	movs	r1, #24
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	f7ff fe92 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
   b5bf6:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b5bfa:	f1b9 0f00 	cmp.w	r9, #0
   b5bfe:	d001      	beq.n	b5c04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b5c00:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b5c04:	f018 0f08 	tst.w	r8, #8
   b5c08:	d12a      	bne.n	b5c60 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b5c0a:	b35d      	cbz	r5, b5c64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b5c0c:	b356      	cbz	r6, b5c64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b5c0e:	9b04      	ldr	r3, [sp, #16]
   b5c10:	b343      	cbz	r3, b5c64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b5c12:	7832      	ldrb	r2, [r6, #0]
   b5c14:	2a01      	cmp	r2, #1
   b5c16:	d103      	bne.n	b5c20 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b5c18:	2f04      	cmp	r7, #4
   b5c1a:	d125      	bne.n	b5c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b5c1c:	2009      	movs	r0, #9
   b5c1e:	e018      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b5c20:	d922      	bls.n	b5c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b5c22:	bb0f      	cbnz	r7, b5c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b5c24:	3a02      	subs	r2, #2
   b5c26:	ab07      	add	r3, sp, #28
   b5c28:	b2d2      	uxtb	r2, r2
   b5c2a:	4629      	mov	r1, r5
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	f7ff fedc 	bl	b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b5c32:	2801      	cmp	r0, #1
   b5c34:	d10d      	bne.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b5c36:	7833      	ldrb	r3, [r6, #0]
   b5c38:	441d      	add	r5, r3
   b5c3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b5c3e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b5c42:	429a      	cmp	r2, r3
   b5c44:	d110      	bne.n	b5c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b5c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b5c4a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b5c4e:	429a      	cmp	r2, r3
   b5c50:	d10a      	bne.n	b5c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b5c52:	b009      	add	sp, #36	; 0x24
   b5c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b5c58:	2002      	movs	r0, #2
   b5c5a:	e7fa      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b5c5c:	2005      	movs	r0, #5
   b5c5e:	e7f8      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b5c60:	2003      	movs	r0, #3
   b5c62:	e7f6      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b5c64:	2001      	movs	r0, #1
   b5c66:	e7f4      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b5c68:	2008      	movs	r0, #8
   b5c6a:	e7f2      	b.n	b5c52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b5c6c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b5c6c:	b510      	push	{r4, lr}
   b5c6e:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b5c70:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b5c74:	9405      	str	r4, [sp, #20]
   b5c76:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b5c7a:	9404      	str	r4, [sp, #16]
   b5c7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b5c7e:	9403      	str	r4, [sp, #12]
   b5c80:	9c08      	ldr	r4, [sp, #32]
   b5c82:	9200      	str	r2, [sp, #0]
   b5c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b5c88:	2230      	movs	r2, #48	; 0x30
   b5c8a:	460b      	mov	r3, r1
   b5c8c:	210c      	movs	r1, #12
   b5c8e:	f7ff ff40 	bl	b5b12 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b5c92:	b006      	add	sp, #24
   b5c94:	bd10      	pop	{r4, pc}

000b5c96 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b5c96:	b570      	push	{r4, r5, r6, lr}
   b5c98:	b088      	sub	sp, #32
   b5c9a:	4606      	mov	r6, r0
   b5c9c:	461c      	mov	r4, r3
   b5c9e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b5ca2:	4615      	mov	r5, r2
   b5ca4:	b31a      	cbz	r2, b5cee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b5ca6:	781b      	ldrb	r3, [r3, #0]
   b5ca8:	2b01      	cmp	r3, #1
   b5caa:	d920      	bls.n	b5cee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b5cac:	2280      	movs	r2, #128	; 0x80
   b5cae:	211c      	movs	r1, #28
   b5cb0:	f7ff fe88 	bl	b59c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b5cb4:	2307      	movs	r3, #7
   b5cb6:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b5cba:	2300      	movs	r3, #0
   b5cbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5cc0:	f10d 031f 	add.w	r3, sp, #31
   b5cc4:	e9cd 4300 	strd	r4, r3, [sp]
   b5cc8:	2201      	movs	r2, #1
   b5cca:	462b      	mov	r3, r5
   b5ccc:	f10d 0117 	add.w	r1, sp, #23
   b5cd0:	4630      	mov	r0, r6
   b5cd2:	f7ff ffcb 	bl	b5c6c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b5cd6:	2801      	cmp	r0, #1
   b5cd8:	d107      	bne.n	b5cea <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b5cda:	7823      	ldrb	r3, [r4, #0]
   b5cdc:	2b02      	cmp	r3, #2
   b5cde:	d108      	bne.n	b5cf2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b5ce0:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b5ce4:	2b00      	cmp	r3, #0
   b5ce6:	bf18      	it	ne
   b5ce8:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b5cea:	b008      	add	sp, #32
   b5cec:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b5cee:	2005      	movs	r0, #5
   b5cf0:	e7fb      	b.n	b5cea <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b5cf2:	2002      	movs	r0, #2
   b5cf4:	e7f9      	b.n	b5cea <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b5cf6 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b5cf6:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b5cf8:	460a      	mov	r2, r1
   b5cfa:	2126      	movs	r1, #38	; 0x26
   b5cfc:	f7ff bfcb 	b.w	b5c96 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b5d00 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b5d00:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b5d02:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b5d04:	f10d 0203 	add.w	r2, sp, #3
   b5d08:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b5d0a:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b5d0e:	f7ff fff2 	bl	b5cf6 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b5d12:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b5d16:	1e43      	subs	r3, r0, #1
   b5d18:	4258      	negs	r0, r3
   b5d1a:	4158      	adcs	r0, r3
   b5d1c:	b003      	add	sp, #12
   b5d1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d22 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b5d22:	b570      	push	{r4, r5, r6, lr}
   b5d24:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b5d26:	2350      	movs	r3, #80	; 0x50
   b5d28:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b5d2c:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5d2e:	f10d 0316 	add.w	r3, sp, #22
   b5d32:	2202      	movs	r2, #2
   b5d34:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b5d36:	4606      	mov	r6, r0
	buffer[1] = 0;
   b5d38:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5d3c:	f7ff fe55 	bl	b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b5d40:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5d42:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b5d44:	d10f      	bne.n	b5d66 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b5d46:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5d4a:	e9cd 4400 	strd	r4, r4, [sp]
   b5d4e:	4623      	mov	r3, r4
   b5d50:	2204      	movs	r2, #4
   b5d52:	a905      	add	r1, sp, #20
   b5d54:	4630      	mov	r0, r6
   b5d56:	f7ff ff89 	bl	b5c6c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b5d5a:	2804      	cmp	r0, #4
   b5d5c:	d003      	beq.n	b5d66 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b5d5e:	2801      	cmp	r0, #1
   b5d60:	bf14      	ite	ne
   b5d62:	4605      	movne	r5, r0
   b5d64:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b5d66:	4628      	mov	r0, r5
   b5d68:	b006      	add	sp, #24
   b5d6a:	bd70      	pop	{r4, r5, r6, pc}

000b5d6c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b5d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5d6e:	4606      	mov	r6, r0
   b5d70:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b5d72:	4614      	mov	r4, r2
   b5d74:	b1ca      	cbz	r2, b5daa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b5d76:	781b      	ldrb	r3, [r3, #0]
   b5d78:	2b11      	cmp	r3, #17
   b5d7a:	d916      	bls.n	b5daa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b5d7c:	2330      	movs	r3, #48	; 0x30
   b5d7e:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b5d80:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5d82:	1c93      	adds	r3, r2, #2
   b5d84:	4621      	mov	r1, r4
   b5d86:	2202      	movs	r2, #2
   b5d88:	f7ff fe2f 	bl	b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b5d8c:	2801      	cmp	r0, #1
   b5d8e:	d10a      	bne.n	b5da6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b5d90:	2300      	movs	r3, #0
   b5d92:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5d96:	9003      	str	r0, [sp, #12]
   b5d98:	9500      	str	r5, [sp, #0]
   b5d9a:	4623      	mov	r3, r4
   b5d9c:	2204      	movs	r2, #4
   b5d9e:	4621      	mov	r1, r4
   b5da0:	4630      	mov	r0, r6
   b5da2:	f7ff ff63 	bl	b5c6c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b5da6:	b004      	add	sp, #16
   b5da8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b5daa:	2005      	movs	r0, #5
   b5dac:	e7fb      	b.n	b5da6 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b5dae <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b5dae:	b510      	push	{r4, lr}
   b5db0:	b08a      	sub	sp, #40	; 0x28
   b5db2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b5db4:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b5db8:	681a      	ldr	r2, [r3, #0]
   b5dba:	889b      	ldrh	r3, [r3, #4]
   b5dbc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b5dc0:	7863      	ldrb	r3, [r4, #1]
   b5dc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b5dc6:	78a3      	ldrb	r3, [r4, #2]
   b5dc8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b5dcc:	78e3      	ldrb	r3, [r4, #3]
   b5dce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b5dd2:	7923      	ldrb	r3, [r4, #4]
   b5dd4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b5dd8:	2300      	movs	r3, #0
   b5dda:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b5dde:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5de2:	9301      	str	r3, [sp, #4]
   b5de4:	230c      	movs	r3, #12
	sendData[0] = command;
   b5de6:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b5dea:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b5dee:	9300      	str	r3, [sp, #0]
   b5df0:	2210      	movs	r2, #16
   b5df2:	ab07      	add	r3, sp, #28
   b5df4:	210e      	movs	r1, #14
   b5df6:	f7ff fe8c 	bl	b5b12 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b5dfa:	b00a      	add	sp, #40	; 0x28
   b5dfc:	bd10      	pop	{r4, pc}

000b5dfe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b5dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b5e02:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b5e04:	b08b      	sub	sp, #44	; 0x2c
   b5e06:	4682      	mov	sl, r0
   b5e08:	460f      	mov	r7, r1
   b5e0a:	4690      	mov	r8, r2
	if (validBits > 80) {
   b5e0c:	f200 8140 	bhi.w	b6090 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b5e10:	2280      	movs	r2, #128	; 0x80
   b5e12:	211c      	movs	r1, #28
   b5e14:	f7ff fdd6 	bl	b59c4 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b5e18:	2393      	movs	r3, #147	; 0x93
   b5e1a:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b5e1e:	f1b8 0f00 	cmp.w	r8, #0
   b5e22:	f000 80bc 	beq.w	b5f9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b5e26:	783c      	ldrb	r4, [r7, #0]
   b5e28:	2c04      	cmp	r4, #4
   b5e2a:	bf94      	ite	ls
   b5e2c:	2300      	movls	r3, #0
   b5e2e:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5e30:	2501      	movs	r5, #1
   b5e32:	2600      	movs	r6, #0
   b5e34:	e00b      	b.n	b5e4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b5e36:	2395      	movs	r3, #149	; 0x95
   b5e38:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5e3c:	f1b8 0f00 	cmp.w	r8, #0
   b5e40:	f000 80af 	beq.w	b5fa2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b5e44:	783c      	ldrb	r4, [r7, #0]
   b5e46:	2c07      	cmp	r4, #7
   b5e48:	bf94      	ite	ls
   b5e4a:	2300      	movls	r3, #0
   b5e4c:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b5e4e:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b5e52:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b5e54:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b5e58:	2b00      	cmp	r3, #0
   b5e5a:	f000 80a4 	beq.w	b5fa6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b5e5e:	2288      	movs	r2, #136	; 0x88
   b5e60:	f88d 201e 	strb.w	r2, [sp, #30]
   b5e64:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b5e66:	f014 0207 	ands.w	r2, r4, #7
   b5e6a:	bf18      	it	ne
   b5e6c:	2201      	movne	r2, #1
   b5e6e:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b5e72:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b5e76:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b5e78:	d01d      	beq.n	b5eb6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b5e7a:	2b00      	cmp	r3, #0
   b5e7c:	bf14      	ite	ne
   b5e7e:	f04f 0903 	movne.w	r9, #3
   b5e82:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b5e86:	f106 0c01 	add.w	ip, r6, #1
   b5e8a:	4591      	cmp	r9, r2
   b5e8c:	bf94      	ite	ls
   b5e8e:	eb01 0e09 	addls.w	lr, r1, r9
   b5e92:	eb01 0e02 	addhi.w	lr, r1, r2
   b5e96:	fa57 fc8c 	uxtab	ip, r7, ip
   b5e9a:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b5e9e:	460a      	mov	r2, r1
   b5ea0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b5ea4:	3101      	adds	r1, #1
   b5ea6:	b2c9      	uxtb	r1, r1
   b5ea8:	445a      	add	r2, fp
   b5eaa:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b5eae:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b5eb2:	4571      	cmp	r1, lr
   b5eb4:	d1f3      	bne.n	b5e9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b5eb6:	b10b      	cbz	r3, b5ebc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b5eb8:	3008      	adds	r0, #8
   b5eba:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b5ebc:	2c1f      	cmp	r4, #31
   b5ebe:	dd74      	ble.n	b5faa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b5ec0:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b5ec4:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b5ec8:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b5ecc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5ed0:	4053      	eors	r3, r2
   b5ed2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5ed6:	4053      	eors	r3, r2
   b5ed8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b5edc:	4053      	eors	r3, r2
   b5ede:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b5ee2:	2207      	movs	r2, #7
   b5ee4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b5ee8:	a907      	add	r1, sp, #28
   b5eea:	4650      	mov	r0, sl
   b5eec:	f7ff fd7d 	bl	b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b5ef0:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b5ef2:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b5ef4:	f040 80c8 	bne.w	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b5ef8:	2300      	movs	r3, #0
   b5efa:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b5efe:	2303      	movs	r3, #3
   b5f00:	f88d 301b 	strb.w	r3, [sp, #27]
   b5f04:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b5f06:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b5f0a:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b5f0e:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b5f12:	9305      	str	r3, [sp, #20]
   b5f14:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b5f18:	b2d2      	uxtb	r2, r2
   b5f1a:	211a      	movs	r1, #26
   b5f1c:	4650      	mov	r0, sl
   b5f1e:	f7ff fd2e 	bl	b597e <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b5f22:	9b05      	ldr	r3, [sp, #20]
   b5f24:	9302      	str	r3, [sp, #8]
   b5f26:	f10d 031a 	add.w	r3, sp, #26
   b5f2a:	2200      	movs	r2, #0
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	f10d 031b 	add.w	r3, sp, #27
   b5f32:	9203      	str	r2, [sp, #12]
   b5f34:	9300      	str	r3, [sp, #0]
   b5f36:	464a      	mov	r2, r9
   b5f38:	465b      	mov	r3, fp
   b5f3a:	a907      	add	r1, sp, #28
   b5f3c:	4650      	mov	r0, sl
   b5f3e:	f7ff fe95 	bl	b5c6c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b5f42:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b5f44:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b5f46:	d14c      	bne.n	b5fe2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b5f48:	211c      	movs	r1, #28
   b5f4a:	4650      	mov	r0, sl
   b5f4c:	f7ff fce5 	bl	b591a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b5f50:	0681      	lsls	r1, r0, #26
   b5f52:	f100 8099 	bmi.w	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b5f56:	f010 001f 	ands.w	r0, r0, #31
   b5f5a:	bf08      	it	eq
   b5f5c:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b5f5e:	42a0      	cmp	r0, r4
   b5f60:	f340 8087 	ble.w	b6072 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b5f64:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b5f66:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b5f6a:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b5f6c:	f013 0307 	ands.w	r3, r3, #7
   b5f70:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b5f74:	bf18      	it	ne
   b5f76:	2301      	movne	r3, #1
   b5f78:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b5f7a:	4418      	add	r0, r3
   b5f7c:	ab0a      	add	r3, sp, #40	; 0x28
   b5f7e:	4418      	add	r0, r3
   b5f80:	2301      	movs	r3, #1
   b5f82:	fa03 f202 	lsl.w	r2, r3, r2
   b5f86:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b5f8a:	4313      	orrs	r3, r2
   b5f8c:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b5f90:	e794      	b.n	b5ebc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b5f92:	2397      	movs	r3, #151	; 0x97
   b5f94:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b5f98:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b5f9a:	4623      	mov	r3, r4
				break;
   b5f9c:	e757      	b.n	b5e4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b5f9e:	4643      	mov	r3, r8
   b5fa0:	e746      	b.n	b5e30 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5fa2:	4643      	mov	r3, r8
   b5fa4:	e753      	b.n	b5e4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b5fa6:	2102      	movs	r1, #2
   b5fa8:	e75d      	b.n	b5e66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b5faa:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b5fac:	3302      	adds	r3, #2
   b5fae:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b5fb0:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5fb4:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b5fb8:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b5fbc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b5fc0:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5fc4:	bf18      	it	ne
   b5fc6:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b5fca:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5fcc:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b5fce:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b5fd2:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5fd6:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b5fda:	f88d 301b 	strb.w	r3, [sp, #27]
   b5fde:	9404      	str	r4, [sp, #16]
   b5fe0:	e795      	b.n	b5f0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b5fe2:	2801      	cmp	r0, #1
   b5fe4:	d150      	bne.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b5fe6:	9b04      	ldr	r3, [sp, #16]
   b5fe8:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b5fea:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b5fee:	f77f af67 	ble.w	b5ec0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b5ff2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5ff6:	2b88      	cmp	r3, #136	; 0x88
   b5ff8:	d13e      	bne.n	b6078 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b5ffa:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b5ffc:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b5ffe:	3601      	adds	r6, #1
   b6000:	441a      	add	r2, r3
   b6002:	fa57 f686 	uxtab	r6, r7, r6
   b6006:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6008:	4619      	mov	r1, r3
   b600a:	a80a      	add	r0, sp, #40	; 0x28
   b600c:	3301      	adds	r3, #1
   b600e:	4401      	add	r1, r0
   b6010:	b2db      	uxtb	r3, r3
   b6012:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6016:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b601a:	4293      	cmp	r3, r2
   b601c:	d1f4      	bne.n	b6008 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b601e:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6022:	2e03      	cmp	r6, #3
   b6024:	d137      	bne.n	b6096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6026:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b602a:	bba4      	cbnz	r4, b6096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b602c:	f10d 031e 	add.w	r3, sp, #30
   b6030:	2201      	movs	r2, #1
   b6032:	4659      	mov	r1, fp
   b6034:	4650      	mov	r0, sl
   b6036:	f7ff fcd8 	bl	b59ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b603a:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b603c:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b603e:	d123      	bne.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6040:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6044:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b6048:	429a      	cmp	r2, r3
   b604a:	d127      	bne.n	b609c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b604c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6050:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6054:	429a      	cmp	r2, r3
   b6056:	d121      	bne.n	b609c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6058:	f89b 3000 	ldrb.w	r3, [fp]
   b605c:	075a      	lsls	r2, r3, #29
   b605e:	d50e      	bpl.n	b607e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b6060:	3501      	adds	r5, #1
   b6062:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b6064:	2d03      	cmp	r5, #3
   b6066:	d094      	beq.n	b5f92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b6068:	2d04      	cmp	r5, #4
   b606a:	d002      	beq.n	b6072 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b606c:	2d02      	cmp	r5, #2
   b606e:	f43f aee2 	beq.w	b5e36 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b6072:	f04f 0906 	mov.w	r9, #6
   b6076:	e007      	b.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6078:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b607a:	2204      	movs	r2, #4
   b607c:	e7bf      	b.n	b5ffe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b607e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6082:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6084:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6086:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6088:	4648      	mov	r0, r9
   b608a:	b00b      	add	sp, #44	; 0x2c
   b608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b6090:	f04f 0907 	mov.w	r9, #7
   b6094:	e7f8      	b.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6096:	f04f 0902 	mov.w	r9, #2
   b609a:	e7f5      	b.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b609c:	f04f 0908 	mov.w	r9, #8
   b60a0:	e7f2      	b.n	b6088 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b60a2 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b60a2:	b508      	push	{r3, lr}
   b60a4:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b60a6:	2200      	movs	r2, #0
   b60a8:	f7ff fea9 	bl	b5dfe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b60ac:	1e43      	subs	r3, r0, #1
   b60ae:	4258      	negs	r0, r3
   b60b0:	4158      	adcs	r0, r3
   b60b2:	bd08      	pop	{r3, pc}

000b60b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <os_mutex_recursive_create+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030248 	.word	0x00030248

000b60c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <HAL_RNG_GetRandomNumber+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	685b      	ldr	r3, [r3, #4]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030218 	.word	0x00030218

000b60d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <HAL_Delay_Microseconds+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	68db      	ldr	r3, [r3, #12]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030218 	.word	0x00030218

000b60e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	695b      	ldr	r3, [r3, #20]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030218 	.word	0x00030218

000b60f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <HAL_Pin_Mode+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	689b      	ldr	r3, [r3, #8]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	0003022c 	.word	0x0003022c

000b6104 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <HAL_Get_Pin_Mode+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	68db      	ldr	r3, [r3, #12]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	0003022c 	.word	0x0003022c

000b6114 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <HAL_GPIO_Write+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	691b      	ldr	r3, [r3, #16]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	0003022c 	.word	0x0003022c

000b6124 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <HAL_GPIO_Read+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	695b      	ldr	r3, [r3, #20]
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	0003022c 	.word	0x0003022c

000b6134 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <hal_i2c_set_speed+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	681b      	ldr	r3, [r3, #0]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030228 	.word	0x00030228

000b6144 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <hal_i2c_begin+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	68db      	ldr	r3, [r3, #12]
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030228 	.word	0x00030228

000b6154 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <hal_i2c_begin_transmission+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	699b      	ldr	r3, [r3, #24]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030228 	.word	0x00030228

000b6164 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <hal_i2c_end_transmission+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	69db      	ldr	r3, [r3, #28]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030228 	.word	0x00030228

000b6174 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <hal_i2c_write+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	6a1b      	ldr	r3, [r3, #32]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030228 	.word	0x00030228

000b6184 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <hal_i2c_available+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030228 	.word	0x00030228

000b6194 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <hal_i2c_read+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030228 	.word	0x00030228

000b61a4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <hal_i2c_peek+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030228 	.word	0x00030228

000b61b4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <hal_i2c_flush+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030228 	.word	0x00030228

000b61c4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <hal_i2c_is_enabled+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030228 	.word	0x00030228

000b61d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <hal_i2c_init+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030228 	.word	0x00030228

000b61e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <inet_inet_ntop+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	695b      	ldr	r3, [r3, #20]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030264 	.word	0x00030264

000b61f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <netdb_freeaddrinfo+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	689b      	ldr	r3, [r3, #8]
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030268 	.word	0x00030268

000b6204 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <netdb_getaddrinfo+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	68db      	ldr	r3, [r3, #12]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030268 	.word	0x00030268

000b6214 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <hal_spi_begin+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	681b      	ldr	r3, [r3, #0]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030230 	.word	0x00030230

000b6224 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <hal_spi_transfer+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	695b      	ldr	r3, [r3, #20]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030230 	.word	0x00030230

000b6234 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <hal_spi_init+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	69db      	ldr	r3, [r3, #28]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030230 	.word	0x00030230

000b6244 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_spi_is_enabled+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6a1b      	ldr	r3, [r3, #32]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030230 	.word	0x00030230

000b6254 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_spi_info+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030230 	.word	0x00030230

000b6264 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <hal_spi_set_settings+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030230 	.word	0x00030230

000b6274 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_spi_acquire+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030230 	.word	0x00030230

000b6284 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_spi_release+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030230 	.word	0x00030230

000b6294 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <hal_usart_write+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	68db      	ldr	r3, [r3, #12]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	0003023c 	.word	0x0003023c

000b62a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <hal_usart_available+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	691b      	ldr	r3, [r3, #16]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	0003023c 	.word	0x0003023c

000b62b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <hal_usart_read+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	695b      	ldr	r3, [r3, #20]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	0003023c 	.word	0x0003023c

000b62c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_usart_peek+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	699b      	ldr	r3, [r3, #24]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	0003023c 	.word	0x0003023c

000b62d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <hal_usart_flush+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	69db      	ldr	r3, [r3, #28]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003023c 	.word	0x0003023c

000b62e4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <hal_usart_is_enabled+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6a1b      	ldr	r3, [r3, #32]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003023c 	.word	0x0003023c

000b62f4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <hal_usart_available_data_for_write+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003023c 	.word	0x0003023c

000b6304 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <hal_usart_init_ex+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003023c 	.word	0x0003023c

000b6314 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <HAL_USB_USART_Init+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	681b      	ldr	r3, [r3, #0]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003024c 	.word	0x0003024c

000b6324 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <HAL_USB_USART_Begin+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	685b      	ldr	r3, [r3, #4]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003024c 	.word	0x0003024c

000b6334 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <HAL_USB_USART_Available_Data+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	691b      	ldr	r3, [r3, #16]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003024c 	.word	0x0003024c

000b6344 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	695b      	ldr	r3, [r3, #20]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003024c 	.word	0x0003024c

000b6354 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <HAL_USB_USART_Receive_Data+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	699b      	ldr	r3, [r3, #24]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	0003024c 	.word	0x0003024c

000b6364 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <HAL_USB_USART_Send_Data+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	69db      	ldr	r3, [r3, #28]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	0003024c 	.word	0x0003024c

000b6374 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <HAL_USB_USART_Flush_Data+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	6a1b      	ldr	r3, [r3, #32]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	0003024c 	.word	0x0003024c

000b6384 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <panic_+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	00030260 	.word	0x00030260

000b6394 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <set_system_mode+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	685b      	ldr	r3, [r3, #4]
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030220 	.word	0x00030220

000b63a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <system_delay_ms+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	695b      	ldr	r3, [r3, #20]
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030220 	.word	0x00030220

000b63b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b03      	ldr	r3, [pc, #12]	; (b63c4 <system_ctrl_set_app_request_handler+0x10>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b63be:	9301      	str	r3, [sp, #4]
   b63c0:	bd08      	pop	{r3, pc}
   b63c2:	0000      	.short	0x0000
   b63c4:	00030220 	.word	0x00030220

000b63c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b03      	ldr	r3, [pc, #12]	; (b63d8 <system_ctrl_set_result+0x10>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b63d2:	9301      	str	r3, [sp, #4]
   b63d4:	bd08      	pop	{r3, pc}
   b63d6:	0000      	.short	0x0000
   b63d8:	00030220 	.word	0x00030220

000b63dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b02      	ldr	r3, [pc, #8]	; (b63e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b63e4:	9301      	str	r3, [sp, #4]
   b63e6:	bd08      	pop	{r3, pc}
   b63e8:	00030244 	.word	0x00030244

000b63ec <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <spark_cloud_disconnect+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	00030244 	.word	0x00030244

000b63fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b02      	ldr	r3, [pc, #8]	; (b6408 <network_connect+0xc>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	685b      	ldr	r3, [r3, #4]
   b6404:	9301      	str	r3, [sp, #4]
   b6406:	bd08      	pop	{r3, pc}
   b6408:	00030240 	.word	0x00030240

000b640c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b02      	ldr	r3, [pc, #8]	; (b6418 <network_connecting+0xc>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	689b      	ldr	r3, [r3, #8]
   b6414:	9301      	str	r3, [sp, #4]
   b6416:	bd08      	pop	{r3, pc}
   b6418:	00030240 	.word	0x00030240

000b641c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b641c:	b508      	push	{r3, lr}
   b641e:	4b02      	ldr	r3, [pc, #8]	; (b6428 <network_disconnect+0xc>)
   b6420:	681b      	ldr	r3, [r3, #0]
   b6422:	68db      	ldr	r3, [r3, #12]
   b6424:	9301      	str	r3, [sp, #4]
   b6426:	bd08      	pop	{r3, pc}
   b6428:	00030240 	.word	0x00030240

000b642c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b02      	ldr	r3, [pc, #8]	; (b6438 <network_ready+0xc>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	691b      	ldr	r3, [r3, #16]
   b6434:	9301      	str	r3, [sp, #4]
   b6436:	bd08      	pop	{r3, pc}
   b6438:	00030240 	.word	0x00030240

000b643c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b643c:	b508      	push	{r3, lr}
   b643e:	4b02      	ldr	r3, [pc, #8]	; (b6448 <network_on+0xc>)
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	695b      	ldr	r3, [r3, #20]
   b6444:	9301      	str	r3, [sp, #4]
   b6446:	bd08      	pop	{r3, pc}
   b6448:	00030240 	.word	0x00030240

000b644c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b644c:	b508      	push	{r3, lr}
   b644e:	4b02      	ldr	r3, [pc, #8]	; (b6458 <network_off+0xc>)
   b6450:	681b      	ldr	r3, [r3, #0]
   b6452:	699b      	ldr	r3, [r3, #24]
   b6454:	9301      	str	r3, [sp, #4]
   b6456:	bd08      	pop	{r3, pc}
   b6458:	00030240 	.word	0x00030240

000b645c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b645c:	b508      	push	{r3, lr}
   b645e:	4b02      	ldr	r3, [pc, #8]	; (b6468 <network_listen+0xc>)
   b6460:	681b      	ldr	r3, [r3, #0]
   b6462:	69db      	ldr	r3, [r3, #28]
   b6464:	9301      	str	r3, [sp, #4]
   b6466:	bd08      	pop	{r3, pc}
   b6468:	00030240 	.word	0x00030240

000b646c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b646c:	b508      	push	{r3, lr}
   b646e:	4b02      	ldr	r3, [pc, #8]	; (b6478 <network_listening+0xc>)
   b6470:	681b      	ldr	r3, [r3, #0]
   b6472:	6a1b      	ldr	r3, [r3, #32]
   b6474:	9301      	str	r3, [sp, #4]
   b6476:	bd08      	pop	{r3, pc}
   b6478:	00030240 	.word	0x00030240

000b647c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b647c:	b508      	push	{r3, lr}
   b647e:	4b02      	ldr	r3, [pc, #8]	; (b6488 <network_set_listen_timeout+0xc>)
   b6480:	681b      	ldr	r3, [r3, #0]
   b6482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6484:	9301      	str	r3, [sp, #4]
   b6486:	bd08      	pop	{r3, pc}
   b6488:	00030240 	.word	0x00030240

000b648c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b648c:	b508      	push	{r3, lr}
   b648e:	4b02      	ldr	r3, [pc, #8]	; (b6498 <network_get_listen_timeout+0xc>)
   b6490:	681b      	ldr	r3, [r3, #0]
   b6492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6494:	9301      	str	r3, [sp, #4]
   b6496:	bd08      	pop	{r3, pc}
   b6498:	00030240 	.word	0x00030240

000b649c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b649c:	b508      	push	{r3, lr}
   b649e:	4b02      	ldr	r3, [pc, #8]	; (b64a8 <network_is_on+0xc>)
   b64a0:	681b      	ldr	r3, [r3, #0]
   b64a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64a4:	9301      	str	r3, [sp, #4]
   b64a6:	bd08      	pop	{r3, pc}
   b64a8:	00030240 	.word	0x00030240

000b64ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64ac:	b508      	push	{r3, lr}
   b64ae:	4b02      	ldr	r3, [pc, #8]	; (b64b8 <network_is_off+0xc>)
   b64b0:	681b      	ldr	r3, [r3, #0]
   b64b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64b4:	9301      	str	r3, [sp, #4]
   b64b6:	bd08      	pop	{r3, pc}
   b64b8:	00030240 	.word	0x00030240

000b64bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b64bc:	b508      	push	{r3, lr}
   b64be:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <malloc+0xc>)
   b64c0:	681b      	ldr	r3, [r3, #0]
   b64c2:	681b      	ldr	r3, [r3, #0]
   b64c4:	9301      	str	r3, [sp, #4]
   b64c6:	bd08      	pop	{r3, pc}
   b64c8:	0003021c 	.word	0x0003021c

000b64cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b64cc:	b508      	push	{r3, lr}
   b64ce:	4b02      	ldr	r3, [pc, #8]	; (b64d8 <free+0xc>)
   b64d0:	681b      	ldr	r3, [r3, #0]
   b64d2:	685b      	ldr	r3, [r3, #4]
   b64d4:	9301      	str	r3, [sp, #4]
   b64d6:	bd08      	pop	{r3, pc}
   b64d8:	0003021c 	.word	0x0003021c

000b64dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b64dc:	b508      	push	{r3, lr}
   b64de:	4b02      	ldr	r3, [pc, #8]	; (b64e8 <realloc+0xc>)
   b64e0:	681b      	ldr	r3, [r3, #0]
   b64e2:	689b      	ldr	r3, [r3, #8]
   b64e4:	9301      	str	r3, [sp, #4]
   b64e6:	bd08      	pop	{r3, pc}
   b64e8:	0003021c 	.word	0x0003021c

000b64ec <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b64ec:	b508      	push	{r3, lr}
   b64ee:	4b02      	ldr	r3, [pc, #8]	; (b64f8 <snprintf+0xc>)
   b64f0:	681b      	ldr	r3, [r3, #0]
   b64f2:	69db      	ldr	r3, [r3, #28]
   b64f4:	9301      	str	r3, [sp, #4]
   b64f6:	bd08      	pop	{r3, pc}
   b64f8:	0003021c 	.word	0x0003021c

000b64fc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b64fc:	b508      	push	{r3, lr}
   b64fe:	4b02      	ldr	r3, [pc, #8]	; (b6508 <vsnprintf+0xc>)
   b6500:	681b      	ldr	r3, [r3, #0]
   b6502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6504:	9301      	str	r3, [sp, #4]
   b6506:	bd08      	pop	{r3, pc}
   b6508:	0003021c 	.word	0x0003021c

000b650c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b650c:	b508      	push	{r3, lr}
   b650e:	4b02      	ldr	r3, [pc, #8]	; (b6518 <_malloc_r+0xc>)
   b6510:	681b      	ldr	r3, [r3, #0]
   b6512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6514:	9301      	str	r3, [sp, #4]
   b6516:	bd08      	pop	{r3, pc}
   b6518:	0003021c 	.word	0x0003021c

000b651c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <__assert_func+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	0003021c 	.word	0x0003021c

000b652c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <newlib_impure_ptr_callback+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	0003021c 	.word	0x0003021c

000b653c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b653c:	2100      	movs	r1, #0
   b653e:	f7ff bf31 	b.w	b63a4 <system_delay_ms>
	...

000b6544 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6544:	4802      	ldr	r0, [pc, #8]	; (b6550 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6546:	2300      	movs	r3, #0
   b6548:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b654a:	f7ff bdb3 	b.w	b60b4 <os_mutex_recursive_create>
   b654e:	bf00      	nop
   b6550:	2003e6c4 	.word	0x2003e6c4

000b6554 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b6554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6556:	230c      	movs	r3, #12
   b6558:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b655c:	6803      	ldr	r3, [r0, #0]
   b655e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6562:	7a03      	ldrb	r3, [r0, #8]
   b6564:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b6568:	6843      	ldr	r3, [r0, #4]
   b656a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b656c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b656e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b6570:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b6574:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b6576:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b657a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b657e:	f7ff ff35 	bl	b63ec <spark_cloud_disconnect>
}
   b6582:	b005      	add	sp, #20
   b6584:	f85d fb04 	ldr.w	pc, [sp], #4

000b6588 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6588:	2200      	movs	r2, #0
   b658a:	6840      	ldr	r0, [r0, #4]
   b658c:	4611      	mov	r1, r2
   b658e:	f7ff bf6d 	b.w	b646c <network_listening>

000b6592 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6592:	2200      	movs	r2, #0
   b6594:	6840      	ldr	r0, [r0, #4]
   b6596:	4611      	mov	r1, r2
   b6598:	f7ff bf78 	b.w	b648c <network_get_listen_timeout>

000b659c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b659c:	6840      	ldr	r0, [r0, #4]
   b659e:	2200      	movs	r2, #0
   b65a0:	f7ff bf6c 	b.w	b647c <network_set_listen_timeout>

000b65a4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b65a4:	6840      	ldr	r0, [r0, #4]
   b65a6:	2200      	movs	r2, #0
   b65a8:	f081 0101 	eor.w	r1, r1, #1
   b65ac:	f7ff bf56 	b.w	b645c <network_listen>

000b65b0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b65b0:	2300      	movs	r3, #0
   b65b2:	6840      	ldr	r0, [r0, #4]
   b65b4:	461a      	mov	r2, r3
   b65b6:	4619      	mov	r1, r3
   b65b8:	f7ff bf48 	b.w	b644c <network_off>

000b65bc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b65bc:	2300      	movs	r3, #0
   b65be:	6840      	ldr	r0, [r0, #4]
   b65c0:	461a      	mov	r2, r3
   b65c2:	4619      	mov	r1, r3
   b65c4:	f7ff bf3a 	b.w	b643c <network_on>

000b65c8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b65c8:	2200      	movs	r2, #0
   b65ca:	6840      	ldr	r0, [r0, #4]
   b65cc:	4611      	mov	r1, r2
   b65ce:	f7ff bf2d 	b.w	b642c <network_ready>

000b65d2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65d2:	2200      	movs	r2, #0
   b65d4:	6840      	ldr	r0, [r0, #4]
   b65d6:	4611      	mov	r1, r2
   b65d8:	f7ff bf18 	b.w	b640c <network_connecting>

000b65dc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65dc:	6840      	ldr	r0, [r0, #4]
   b65de:	2200      	movs	r2, #0
   b65e0:	2102      	movs	r1, #2
   b65e2:	f7ff bf1b 	b.w	b641c <network_disconnect>

000b65e6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65e6:	2300      	movs	r3, #0
   b65e8:	6840      	ldr	r0, [r0, #4]
   b65ea:	461a      	mov	r2, r3
   b65ec:	f7ff bf06 	b.w	b63fc <network_connect>

000b65f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b65f0:	4b02      	ldr	r3, [pc, #8]	; (b65fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b65f2:	2203      	movs	r2, #3
   b65f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b65f6:	4a02      	ldr	r2, [pc, #8]	; (b6600 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b65f8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b65fa:	4770      	bx	lr
   b65fc:	2003e6c8 	.word	0x2003e6c8
   b6600:	000b86dc 	.word	0x000b86dc

000b6604 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6604:	4770      	bx	lr

000b6606 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6608:	4606      	mov	r6, r0
   b660a:	4615      	mov	r5, r2
   b660c:	460c      	mov	r4, r1
   b660e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6610:	42bc      	cmp	r4, r7
   b6612:	d006      	beq.n	b6622 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6614:	6833      	ldr	r3, [r6, #0]
   b6616:	f814 1b01 	ldrb.w	r1, [r4], #1
   b661a:	689b      	ldr	r3, [r3, #8]
   b661c:	4630      	mov	r0, r6
   b661e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6620:	e7f6      	b.n	b6610 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6622:	4628      	mov	r0, r5
   b6624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6626 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6626:	7c00      	ldrb	r0, [r0, #16]
   b6628:	2200      	movs	r2, #0
   b662a:	f7ff bda3 	b.w	b6174 <hal_i2c_write>

000b662e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b662e:	7c00      	ldrb	r0, [r0, #16]
   b6630:	2100      	movs	r1, #0
   b6632:	f7ff bda7 	b.w	b6184 <hal_i2c_available>

000b6636 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6636:	7c00      	ldrb	r0, [r0, #16]
   b6638:	2100      	movs	r1, #0
   b663a:	f7ff bdab 	b.w	b6194 <hal_i2c_read>

000b663e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b663e:	7c00      	ldrb	r0, [r0, #16]
   b6640:	2100      	movs	r1, #0
   b6642:	f7ff bdaf 	b.w	b61a4 <hal_i2c_peek>

000b6646 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6646:	7c00      	ldrb	r0, [r0, #16]
   b6648:	2100      	movs	r1, #0
   b664a:	f7ff bdb3 	b.w	b61b4 <hal_i2c_flush>

000b664e <_ZN7TwoWireD0Ev>:
   b664e:	b510      	push	{r4, lr}
   b6650:	2114      	movs	r1, #20
   b6652:	4604      	mov	r4, r0
   b6654:	f7fd fd1f 	bl	b4096 <_ZdlPvj>
   b6658:	4620      	mov	r0, r4
   b665a:	bd10      	pop	{r4, pc}

000b665c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b665c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b665e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6662:	4604      	mov	r4, r0
   b6664:	4608      	mov	r0, r1
   b6666:	2100      	movs	r1, #0
   b6668:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b666c:	4b03      	ldr	r3, [pc, #12]	; (b667c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b666e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6670:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6672:	4611      	mov	r1, r2
   b6674:	f7ff fdae 	bl	b61d4 <hal_i2c_init>
}
   b6678:	4620      	mov	r0, r4
   b667a:	bd10      	pop	{r4, pc}
   b667c:	000b8718 	.word	0x000b8718

000b6680 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6680:	7c00      	ldrb	r0, [r0, #16]
   b6682:	2200      	movs	r2, #0
   b6684:	f7ff bd56 	b.w	b6134 <hal_i2c_set_speed>

000b6688 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6688:	2300      	movs	r3, #0
   b668a:	7c00      	ldrb	r0, [r0, #16]
   b668c:	461a      	mov	r2, r3
   b668e:	4619      	mov	r1, r3
   b6690:	f7ff bd58 	b.w	b6144 <hal_i2c_begin>

000b6694 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6694:	7c00      	ldrb	r0, [r0, #16]
   b6696:	2200      	movs	r2, #0
   b6698:	f7ff bd5c 	b.w	b6154 <hal_i2c_begin_transmission>

000b669c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b669c:	b2c9      	uxtb	r1, r1
   b669e:	f7ff bff9 	b.w	b6694 <_ZN7TwoWire17beginTransmissionEh>

000b66a2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b66a2:	7c00      	ldrb	r0, [r0, #16]
   b66a4:	2200      	movs	r2, #0
   b66a6:	f7ff bd5d 	b.w	b6164 <hal_i2c_end_transmission>

000b66aa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b66aa:	2101      	movs	r1, #1
   b66ac:	f7ff bff9 	b.w	b66a2 <_ZN7TwoWire15endTransmissionEh>

000b66b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b66b0:	4770      	bx	lr

000b66b2 <_ZN9IPAddressD0Ev>:
   b66b2:	b510      	push	{r4, lr}
   b66b4:	2118      	movs	r1, #24
   b66b6:	4604      	mov	r4, r0
   b66b8:	f7fd fced 	bl	b4096 <_ZdlPvj>
   b66bc:	4620      	mov	r0, r4
   b66be:	bd10      	pop	{r4, pc}

000b66c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66c2:	7d03      	ldrb	r3, [r0, #20]
   b66c4:	2b06      	cmp	r3, #6
{
   b66c6:	b08d      	sub	sp, #52	; 0x34
   b66c8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66ca:	f100 0704 	add.w	r7, r0, #4
   b66ce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66d2:	d012      	beq.n	b66fa <_ZNK9IPAddress7printToER5Print+0x3a>
   b66d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66dc:	220a      	movs	r2, #10
   b66de:	4630      	mov	r0, r6
   b66e0:	f000 f95d 	bl	b699e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66e8:	d019      	beq.n	b671e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66ea:	2c00      	cmp	r4, #0
   b66ec:	d0f4      	beq.n	b66d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66ee:	212e      	movs	r1, #46	; 0x2e
   b66f0:	4630      	mov	r0, r6
   b66f2:	f000 f93b 	bl	b696c <_ZN5Print5printEc>
   b66f6:	4404      	add	r4, r0
   b66f8:	e7ee      	b.n	b66d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66fa:	232f      	movs	r3, #47	; 0x2f
   b66fc:	466a      	mov	r2, sp
   b66fe:	4639      	mov	r1, r7
   b6700:	200a      	movs	r0, #10
		buf[0] = 0;
   b6702:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6706:	f7ff fd6d 	bl	b61e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b670a:	4668      	mov	r0, sp
   b670c:	f000 fe9e 	bl	b744c <strlen>
   b6710:	6833      	ldr	r3, [r6, #0]
   b6712:	4602      	mov	r2, r0
   b6714:	68db      	ldr	r3, [r3, #12]
   b6716:	4669      	mov	r1, sp
   b6718:	4630      	mov	r0, r6
   b671a:	4798      	blx	r3
   b671c:	4604      	mov	r4, r0
    }
    return n;
}
   b671e:	4620      	mov	r0, r4
   b6720:	b00d      	add	sp, #52	; 0x34
   b6722:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6724 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6724:	b510      	push	{r4, lr}
   b6726:	4b05      	ldr	r3, [pc, #20]	; (b673c <_ZN9IPAddressC1Ev+0x18>)
   b6728:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b672a:	2211      	movs	r2, #17
   b672c:	f840 3b04 	str.w	r3, [r0], #4
   b6730:	2100      	movs	r1, #0
   b6732:	f000 fe3d 	bl	b73b0 <memset>
}
   b6736:	4620      	mov	r0, r4
   b6738:	bd10      	pop	{r4, pc}
   b673a:	bf00      	nop
   b673c:	000b8740 	.word	0x000b8740

000b6740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6740:	4603      	mov	r3, r0
   b6742:	4a07      	ldr	r2, [pc, #28]	; (b6760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6744:	b510      	push	{r4, lr}
   b6746:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b674a:	f101 0210 	add.w	r2, r1, #16
   b674e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6752:	f843 4b04 	str.w	r4, [r3], #4
   b6756:	4291      	cmp	r1, r2
   b6758:	d1f9      	bne.n	b674e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b675a:	780a      	ldrb	r2, [r1, #0]
   b675c:	701a      	strb	r2, [r3, #0]
}
   b675e:	bd10      	pop	{r4, pc}
   b6760:	000b8740 	.word	0x000b8740

000b6764 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6764:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6766:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b676a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b676e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6772:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6776:	2304      	movs	r3, #4
   b6778:	6041      	str	r1, [r0, #4]
   b677a:	7503      	strb	r3, [r0, #20]
}
   b677c:	bd10      	pop	{r4, pc}
	...

000b6780 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6780:	b507      	push	{r0, r1, r2, lr}
   b6782:	4b06      	ldr	r3, [pc, #24]	; (b679c <_ZN9IPAddressC1EPKh+0x1c>)
   b6784:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6786:	78cb      	ldrb	r3, [r1, #3]
   b6788:	9300      	str	r3, [sp, #0]
   b678a:	788b      	ldrb	r3, [r1, #2]
   b678c:	784a      	ldrb	r2, [r1, #1]
   b678e:	7809      	ldrb	r1, [r1, #0]
   b6790:	f7ff ffe8 	bl	b6764 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6794:	b003      	add	sp, #12
   b6796:	f85d fb04 	ldr.w	pc, [sp], #4
   b679a:	bf00      	nop
   b679c:	000b8740 	.word	0x000b8740

000b67a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b67a0:	4b01      	ldr	r3, [pc, #4]	; (b67a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b67a2:	4a02      	ldr	r2, [pc, #8]	; (b67ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b67a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b67a6:	4770      	bx	lr
   b67a8:	2003e6d0 	.word	0x2003e6d0
   b67ac:	000b874c 	.word	0x000b874c

000b67b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b67b0:	2300      	movs	r3, #0
   b67b2:	6840      	ldr	r0, [r0, #4]
   b67b4:	461a      	mov	r2, r3
   b67b6:	f7ff be21 	b.w	b63fc <network_connect>

000b67ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b67ba:	6840      	ldr	r0, [r0, #4]
   b67bc:	2200      	movs	r2, #0
   b67be:	2102      	movs	r1, #2
   b67c0:	f7ff be2c 	b.w	b641c <network_disconnect>

000b67c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b67c4:	2200      	movs	r2, #0
   b67c6:	6840      	ldr	r0, [r0, #4]
   b67c8:	4611      	mov	r1, r2
   b67ca:	f7ff be1f 	b.w	b640c <network_connecting>

000b67ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67ce:	2200      	movs	r2, #0
   b67d0:	6840      	ldr	r0, [r0, #4]
   b67d2:	4611      	mov	r1, r2
   b67d4:	f7ff be2a 	b.w	b642c <network_ready>

000b67d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67d8:	2300      	movs	r3, #0
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	461a      	mov	r2, r3
   b67de:	4619      	mov	r1, r3
   b67e0:	f7ff be2c 	b.w	b643c <network_on>

000b67e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67e4:	2300      	movs	r3, #0
   b67e6:	6840      	ldr	r0, [r0, #4]
   b67e8:	461a      	mov	r2, r3
   b67ea:	4619      	mov	r1, r3
   b67ec:	f7ff be2e 	b.w	b644c <network_off>

000b67f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67f0:	6840      	ldr	r0, [r0, #4]
   b67f2:	2100      	movs	r1, #0
   b67f4:	f7ff be52 	b.w	b649c <network_is_on>

000b67f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67f8:	6840      	ldr	r0, [r0, #4]
   b67fa:	2100      	movs	r1, #0
   b67fc:	f7ff be56 	b.w	b64ac <network_is_off>

000b6800 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6800:	6840      	ldr	r0, [r0, #4]
   b6802:	2200      	movs	r2, #0
   b6804:	f081 0101 	eor.w	r1, r1, #1
   b6808:	f7ff be28 	b.w	b645c <network_listen>

000b680c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b680c:	6840      	ldr	r0, [r0, #4]
   b680e:	2200      	movs	r2, #0
   b6810:	f7ff be34 	b.w	b647c <network_set_listen_timeout>

000b6814 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6814:	2200      	movs	r2, #0
   b6816:	6840      	ldr	r0, [r0, #4]
   b6818:	4611      	mov	r1, r2
   b681a:	f7ff be37 	b.w	b648c <network_get_listen_timeout>

000b681e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b681e:	2200      	movs	r2, #0
   b6820:	6840      	ldr	r0, [r0, #4]
   b6822:	4611      	mov	r1, r2
   b6824:	f7ff be22 	b.w	b646c <network_listening>

000b6828 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b682c:	b095      	sub	sp, #84	; 0x54
   b682e:	4614      	mov	r4, r2
   b6830:	460d      	mov	r5, r1
   b6832:	4607      	mov	r7, r0
    IPAddress addr;
   b6834:	f7ff ff76 	bl	b6724 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6838:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b683a:	221c      	movs	r2, #28
   b683c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b683e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6840:	f000 fdb6 	bl	b73b0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6844:	2340      	movs	r3, #64	; 0x40
   b6846:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6848:	4620      	mov	r0, r4
   b684a:	466b      	mov	r3, sp
   b684c:	aa0c      	add	r2, sp, #48	; 0x30
   b684e:	2100      	movs	r1, #0
   b6850:	f7ff fcd8 	bl	b6204 <netdb_getaddrinfo>
    if (!r) {
   b6854:	4604      	mov	r4, r0
   b6856:	2800      	cmp	r0, #0
   b6858:	d14b      	bne.n	b68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b685a:	4602      	mov	r2, r0
   b685c:	2101      	movs	r1, #1
   b685e:	6868      	ldr	r0, [r5, #4]
   b6860:	f7ff fde4 	bl	b642c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6864:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6866:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6868:	4622      	mov	r2, r4
   b686a:	6868      	ldr	r0, [r5, #4]
   b686c:	f7ff fdde 	bl	b642c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6870:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6872:	4681      	mov	r9, r0
        bool ok = false;
   b6874:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6876:	2e00      	cmp	r6, #0
   b6878:	d03b      	beq.n	b68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b687a:	2900      	cmp	r1, #0
   b687c:	d139      	bne.n	b68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b687e:	6873      	ldr	r3, [r6, #4]
   b6880:	2b02      	cmp	r3, #2
   b6882:	d003      	beq.n	b688c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6884:	2b0a      	cmp	r3, #10
   b6886:	d011      	beq.n	b68ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6888:	69f6      	ldr	r6, [r6, #28]
   b688a:	e7f4      	b.n	b6876 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b688c:	f1b8 0f00 	cmp.w	r8, #0
   b6890:	d0fa      	beq.n	b6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6892:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6894:	a806      	add	r0, sp, #24
   b6896:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6898:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b689a:	f7ff ff71 	bl	b6780 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b689e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68a0:	1d3c      	adds	r4, r7, #4
   b68a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68a4:	682b      	ldr	r3, [r5, #0]
   b68a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b68aa:	e7ed      	b.n	b6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b68ac:	f1b9 0f00 	cmp.w	r9, #0
   b68b0:	d0ea      	beq.n	b6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b68b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b68b4:	2210      	movs	r2, #16
   b68b6:	a801      	add	r0, sp, #4
   b68b8:	f000 fd7a 	bl	b73b0 <memset>
                    a.v = 6;
   b68bc:	2306      	movs	r3, #6
   b68be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68c2:	ad01      	add	r5, sp, #4
   b68c4:	f104 0308 	add.w	r3, r4, #8
   b68c8:	3418      	adds	r4, #24
   b68ca:	6818      	ldr	r0, [r3, #0]
   b68cc:	6859      	ldr	r1, [r3, #4]
   b68ce:	462a      	mov	r2, r5
   b68d0:	c203      	stmia	r2!, {r0, r1}
   b68d2:	3308      	adds	r3, #8
   b68d4:	42a3      	cmp	r3, r4
   b68d6:	4615      	mov	r5, r2
   b68d8:	d1f7      	bne.n	b68ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68da:	a901      	add	r1, sp, #4
   b68dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68de:	ad07      	add	r5, sp, #28
   b68e0:	f7ff ff2e 	bl	b6740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68e6:	1d3c      	adds	r4, r7, #4
   b68e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68ea:	682b      	ldr	r3, [r5, #0]
   b68ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68ee:	4649      	mov	r1, r9
   b68f0:	e7ca      	b.n	b6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68f2:	9800      	ldr	r0, [sp, #0]
   b68f4:	f7ff fc7e 	bl	b61f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68f8:	4638      	mov	r0, r7
   b68fa:	b015      	add	sp, #84	; 0x54
   b68fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6900 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6900:	4b02      	ldr	r3, [pc, #8]	; (b690c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6902:	4a03      	ldr	r2, [pc, #12]	; (b6910 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6904:	601a      	str	r2, [r3, #0]
   b6906:	2200      	movs	r2, #0
   b6908:	605a      	str	r2, [r3, #4]

} // spark
   b690a:	4770      	bx	lr
   b690c:	2003e6d4 	.word	0x2003e6d4
   b6910:	000b8758 	.word	0x000b8758

000b6914 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6916:	4606      	mov	r6, r0
   b6918:	460d      	mov	r5, r1
  size_t n = 0;
   b691a:	188f      	adds	r7, r1, r2
   b691c:	2400      	movs	r4, #0
  while (size--) {
   b691e:	42bd      	cmp	r5, r7
   b6920:	d00c      	beq.n	b693c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6922:	6833      	ldr	r3, [r6, #0]
   b6924:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6928:	689b      	ldr	r3, [r3, #8]
   b692a:	4630      	mov	r0, r6
   b692c:	4798      	blx	r3
     if (chunk>=0)
   b692e:	1e03      	subs	r3, r0, #0
   b6930:	db01      	blt.n	b6936 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6932:	441c      	add	r4, r3
  while (size--) {
   b6934:	e7f3      	b.n	b691e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6936:	2c00      	cmp	r4, #0
   b6938:	bf08      	it	eq
   b693a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b693c:	4620      	mov	r0, r4
   b693e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6940 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6940:	b513      	push	{r0, r1, r4, lr}
   b6942:	4604      	mov	r4, r0
    }
   b6944:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6946:	b159      	cbz	r1, b6960 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6948:	9101      	str	r1, [sp, #4]
   b694a:	f000 fd7f 	bl	b744c <strlen>
   b694e:	6823      	ldr	r3, [r4, #0]
   b6950:	9901      	ldr	r1, [sp, #4]
   b6952:	68db      	ldr	r3, [r3, #12]
   b6954:	4602      	mov	r2, r0
   b6956:	4620      	mov	r0, r4
    }
   b6958:	b002      	add	sp, #8
   b695a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b695e:	4718      	bx	r3
    }
   b6960:	b002      	add	sp, #8
   b6962:	bd10      	pop	{r4, pc}

000b6964 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6964:	b508      	push	{r3, lr}
  return write(str);
   b6966:	f7ff ffeb 	bl	b6940 <_ZN5Print5writeEPKc>
}
   b696a:	bd08      	pop	{r3, pc}

000b696c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b696c:	6803      	ldr	r3, [r0, #0]
   b696e:	689b      	ldr	r3, [r3, #8]
   b6970:	4718      	bx	r3

000b6972 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6972:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6974:	210d      	movs	r1, #13
{
   b6976:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6978:	f7ff fff8 	bl	b696c <_ZN5Print5printEc>
  n += print('\n');
   b697c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b697e:	4604      	mov	r4, r0
  n += print('\n');
   b6980:	4628      	mov	r0, r5
   b6982:	f7ff fff3 	bl	b696c <_ZN5Print5printEc>
  return n;
}
   b6986:	4420      	add	r0, r4
   b6988:	bd38      	pop	{r3, r4, r5, pc}

000b698a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b698a:	b538      	push	{r3, r4, r5, lr}
   b698c:	4605      	mov	r5, r0
  return write(str);
   b698e:	f7ff ffd7 	bl	b6940 <_ZN5Print5writeEPKc>
   b6992:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6994:	4628      	mov	r0, r5
   b6996:	f7ff ffec 	bl	b6972 <_ZN5Print7printlnEv>
  return n;
}
   b699a:	4420      	add	r0, r4
   b699c:	bd38      	pop	{r3, r4, r5, pc}

000b699e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b699e:	b530      	push	{r4, r5, lr}
   b69a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b69a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b69a4:	2a01      	cmp	r2, #1
  *str = '\0';
   b69a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b69aa:	bf98      	it	ls
   b69ac:	220a      	movls	r2, #10
   b69ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b69b0:	460d      	mov	r5, r1
   b69b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b69b6:	fb01 5312 	mls	r3, r1, r2, r5
   b69ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69be:	2b09      	cmp	r3, #9
   b69c0:	bf94      	ite	ls
   b69c2:	3330      	addls	r3, #48	; 0x30
   b69c4:	3337      	addhi	r3, #55	; 0x37
   b69c6:	b2db      	uxtb	r3, r3
  } while(n);
   b69c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b69ce:	d9ef      	bls.n	b69b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b69d0:	4621      	mov	r1, r4
   b69d2:	f7ff ffb5 	bl	b6940 <_ZN5Print5writeEPKc>
}
   b69d6:	b00b      	add	sp, #44	; 0x2c
   b69d8:	bd30      	pop	{r4, r5, pc}

000b69da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b69da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69de:	b086      	sub	sp, #24
   b69e0:	af00      	add	r7, sp, #0
   b69e2:	4605      	mov	r5, r0
   b69e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69e6:	1d38      	adds	r0, r7, #4
   b69e8:	2114      	movs	r1, #20
{
   b69ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69ee:	f7ff fd85 	bl	b64fc <vsnprintf>

    if (n<bufsize)
   b69f2:	2813      	cmp	r0, #19
   b69f4:	d80e      	bhi.n	b6a14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b69f6:	1d39      	adds	r1, r7, #4
   b69f8:	4628      	mov	r0, r5
   b69fa:	f7ff ffa1 	bl	b6940 <_ZN5Print5writeEPKc>
   b69fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6a00:	b11e      	cbz	r6, b6a0a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6a02:	4628      	mov	r0, r5
   b6a04:	f7ff ffb5 	bl	b6972 <_ZN5Print7printlnEv>
   b6a08:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	3718      	adds	r7, #24
   b6a0e:	46bd      	mov	sp, r7
   b6a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6a14:	f100 0308 	add.w	r3, r0, #8
   b6a18:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6a1c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6a1e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6a22:	4622      	mov	r2, r4
   b6a24:	1c41      	adds	r1, r0, #1
   b6a26:	683b      	ldr	r3, [r7, #0]
   b6a28:	4668      	mov	r0, sp
   b6a2a:	f7ff fd67 	bl	b64fc <vsnprintf>
  return write(str);
   b6a2e:	4669      	mov	r1, sp
   b6a30:	4628      	mov	r0, r5
   b6a32:	f7ff ff85 	bl	b6940 <_ZN5Print5writeEPKc>
   b6a36:	4604      	mov	r4, r0
   b6a38:	46c5      	mov	sp, r8
   b6a3a:	e7e1      	b.n	b6a00 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a3c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6a3c:	4b01      	ldr	r3, [pc, #4]	; (b6a44 <_GLOBAL__sub_I_RGB+0x8>)
   b6a3e:	2200      	movs	r2, #0
   b6a40:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a42:	4770      	bx	lr
   b6a44:	2003e6dc 	.word	0x2003e6dc

000b6a48 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6a48:	2100      	movs	r1, #0
   b6a4a:	f7ff bc1b 	b.w	b6284 <hal_spi_release>

000b6a4e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6a4e:	2100      	movs	r1, #0
   b6a50:	f7ff bc10 	b.w	b6274 <hal_spi_acquire>

000b6a54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a54:	b510      	push	{r4, lr}
   b6a56:	4604      	mov	r4, r0
   b6a58:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a5c:	f7ff fbea 	bl	b6234 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a60:	2300      	movs	r3, #0
   b6a62:	6063      	str	r3, [r4, #4]
}
   b6a64:	4620      	mov	r0, r4
   b6a66:	bd10      	pop	{r4, pc}

000b6a68 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6a68:	b513      	push	{r0, r1, r4, lr}
   b6a6a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6a6c:	7800      	ldrb	r0, [r0, #0]
   b6a6e:	f7ff ffee 	bl	b6a4e <_ZN8SPIClass4lockEv.isra.0>
   b6a72:	b958      	cbnz	r0, b6a8c <_ZN8SPIClass5beginEv+0x24>
   b6a74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6a76:	9001      	str	r0, [sp, #4]
   b6a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a7c:	f7ff fbca 	bl	b6214 <hal_spi_begin>
        unlock();
   b6a80:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a82:	b002      	add	sp, #8
   b6a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a88:	f7ff bfde 	b.w	b6a48 <_ZN8SPIClass6unlockEv.isra.0>
   b6a8c:	b002      	add	sp, #8
   b6a8e:	bd10      	pop	{r4, pc}

000b6a90 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6a90:	7800      	ldrb	r0, [r0, #0]
   b6a92:	f7ff bfd9 	b.w	b6a48 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6a98 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6a98:	0840      	lsrs	r0, r0, #1
{
   b6a9a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a9c:	6018      	str	r0, [r3, #0]
   b6a9e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6aa0:	6818      	ldr	r0, [r3, #0]
   b6aa2:	4288      	cmp	r0, r1
   b6aa4:	b2e5      	uxtb	r5, r4
   b6aa6:	d906      	bls.n	b6ab6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6aa8:	3401      	adds	r4, #1
   b6aaa:	2c08      	cmp	r4, #8
   b6aac:	d002      	beq.n	b6ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6aae:	0840      	lsrs	r0, r0, #1
   b6ab0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6ab2:	e7f5      	b.n	b6aa0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6ab4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6ab6:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6ab8:	5d5b      	ldrb	r3, [r3, r5]
   b6aba:	7013      	strb	r3, [r2, #0]
}
   b6abc:	bd30      	pop	{r4, r5, pc}
   b6abe:	bf00      	nop
   b6ac0:	000b878c 	.word	0x000b878c

000b6ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ac8:	4606      	mov	r6, r0
   b6aca:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6acc:	7800      	ldrb	r0, [r0, #0]
{
   b6ace:	460c      	mov	r4, r1
    CHECK(lock());
   b6ad0:	f7ff ffbd 	bl	b6a4e <_ZN8SPIClass4lockEv.isra.0>
   b6ad4:	2800      	cmp	r0, #0
   b6ad6:	db1b      	blt.n	b6b10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6ad8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6ada:	2214      	movs	r2, #20
   b6adc:	2100      	movs	r1, #0
   b6ade:	a809      	add	r0, sp, #36	; 0x24
   b6ae0:	f000 fc66 	bl	b73b0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ae4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6ae6:	2200      	movs	r2, #0
   b6ae8:	a909      	add	r1, sp, #36	; 0x24
   b6aea:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6aec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6af0:	f7ff fbb0 	bl	b6254 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6af4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6af8:	b113      	cbz	r3, b6b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6afa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6afe:	b155      	cbz	r5, b6b16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6b00:	2700      	movs	r7, #0
   b6b02:	46b9      	mov	r9, r7
   b6b04:	46b8      	mov	r8, r7
   b6b06:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6b08:	7923      	ldrb	r3, [r4, #4]
   b6b0a:	b15d      	cbz	r5, b6b24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6b0c:	b1c3      	cbz	r3, b6b40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6b0e:	2000      	movs	r0, #0
}
   b6b10:	b00f      	add	sp, #60	; 0x3c
   b6b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6b16:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6b1a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6b1e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6b22:	e7f1      	b.n	b6b08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6b24:	2b00      	cmp	r3, #0
   b6b26:	d135      	bne.n	b6b94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6b28:	68a3      	ldr	r3, [r4, #8]
   b6b2a:	4543      	cmp	r3, r8
   b6b2c:	d108      	bne.n	b6b40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6b2e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b32:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b3a:	89a3      	ldrh	r3, [r4, #12]
   b6b3c:	429a      	cmp	r2, r3
   b6b3e:	d0e6      	beq.n	b6b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6b40:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b42:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6b44:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b48:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6b4a:	ab04      	add	r3, sp, #16
   b6b4c:	f10d 020f 	add.w	r2, sp, #15
   b6b50:	f7ff ffa2 	bl	b6a98 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6b54:	7921      	ldrb	r1, [r4, #4]
   b6b56:	b985      	cbnz	r5, b6b7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6b58:	b989      	cbnz	r1, b6b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b5a:	68a3      	ldr	r3, [r4, #8]
   b6b5c:	4543      	cmp	r3, r8
   b6b5e:	d30e      	bcc.n	b6b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6b60:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b64:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b6c:	89a3      	ldrh	r3, [r4, #12]
   b6b6e:	429a      	cmp	r2, r3
   b6b70:	d105      	bne.n	b6b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6b72:	9b04      	ldr	r3, [sp, #16]
   b6b74:	4543      	cmp	r3, r8
   b6b76:	d102      	bne.n	b6b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b78:	e7c9      	b.n	b6b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6b7a:	2900      	cmp	r1, #0
   b6b7c:	d1f9      	bne.n	b6b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6b7e:	2300      	movs	r3, #0
   b6b80:	9301      	str	r3, [sp, #4]
   b6b82:	7b63      	ldrb	r3, [r4, #13]
   b6b84:	9300      	str	r3, [sp, #0]
   b6b86:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6b8a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6b8c:	7830      	ldrb	r0, [r6, #0]
   b6b8e:	f7ff fb69 	bl	b6264 <hal_spi_set_settings>
   b6b92:	e7bc      	b.n	b6b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6b94:	e9cd 5500 	strd	r5, r5, [sp]
   b6b98:	462b      	mov	r3, r5
   b6b9a:	462a      	mov	r2, r5
   b6b9c:	2101      	movs	r1, #1
   b6b9e:	e7f5      	b.n	b6b8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6ba0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6ba0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ba2:	7800      	ldrb	r0, [r0, #0]
   b6ba4:	f7ff fb3e 	bl	b6224 <hal_spi_transfer>
}
   b6ba8:	b2c0      	uxtb	r0, r0
   b6baa:	bd08      	pop	{r3, pc}

000b6bac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6bac:	b510      	push	{r4, lr}
   b6bae:	4604      	mov	r4, r0
{
	free(buffer);
   b6bb0:	6800      	ldr	r0, [r0, #0]
   b6bb2:	f7ff fc8b 	bl	b64cc <free>
}
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	bd10      	pop	{r4, pc}

000b6bba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6bba:	b510      	push	{r4, lr}
   b6bbc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6bbe:	6800      	ldr	r0, [r0, #0]
   b6bc0:	b108      	cbz	r0, b6bc6 <_ZN6String10invalidateEv+0xc>
   b6bc2:	f7ff fc83 	bl	b64cc <free>
	buffer = NULL;
   b6bc6:	2300      	movs	r3, #0
	capacity = len = 0;
   b6bc8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6bcc:	6023      	str	r3, [r4, #0]
}
   b6bce:	bd10      	pop	{r4, pc}

000b6bd0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6bd0:	b538      	push	{r3, r4, r5, lr}
   b6bd2:	4604      	mov	r4, r0
   b6bd4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6bd6:	6800      	ldr	r0, [r0, #0]
   b6bd8:	3101      	adds	r1, #1
   b6bda:	f7ff fc7f 	bl	b64dc <realloc>
	if (newbuffer) {
   b6bde:	b110      	cbz	r0, b6be6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6be0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6be4:	2001      	movs	r0, #1
	}
	return 0;
}
   b6be6:	bd38      	pop	{r3, r4, r5, pc}

000b6be8 <_ZN6String7reserveEj>:
{
   b6be8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6bea:	6803      	ldr	r3, [r0, #0]
{
   b6bec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6bee:	b123      	cbz	r3, b6bfa <_ZN6String7reserveEj+0x12>
   b6bf0:	6843      	ldr	r3, [r0, #4]
   b6bf2:	428b      	cmp	r3, r1
   b6bf4:	d301      	bcc.n	b6bfa <_ZN6String7reserveEj+0x12>
   b6bf6:	2001      	movs	r0, #1
}
   b6bf8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	f7ff ffe8 	bl	b6bd0 <_ZN6String12changeBufferEj>
   b6c00:	2800      	cmp	r0, #0
   b6c02:	d0f9      	beq.n	b6bf8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6c04:	68a3      	ldr	r3, [r4, #8]
   b6c06:	2b00      	cmp	r3, #0
   b6c08:	d1f5      	bne.n	b6bf6 <_ZN6String7reserveEj+0xe>
   b6c0a:	6822      	ldr	r2, [r4, #0]
   b6c0c:	7013      	strb	r3, [r2, #0]
   b6c0e:	e7f2      	b.n	b6bf6 <_ZN6String7reserveEj+0xe>

000b6c10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c12:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6c14:	4611      	mov	r1, r2
   b6c16:	9201      	str	r2, [sp, #4]
{
   b6c18:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6c1a:	f7ff ffe5 	bl	b6be8 <_ZN6String7reserveEj>
   b6c1e:	9a01      	ldr	r2, [sp, #4]
   b6c20:	b928      	cbnz	r0, b6c2e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6c22:	4620      	mov	r0, r4
   b6c24:	f7ff ffc9 	bl	b6bba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6c28:	4620      	mov	r0, r4
   b6c2a:	b003      	add	sp, #12
   b6c2c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6c2e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c30:	4629      	mov	r1, r5
   b6c32:	6820      	ldr	r0, [r4, #0]
   b6c34:	f000 fbae 	bl	b7394 <memcpy>
	buffer[len] = 0;
   b6c38:	6822      	ldr	r2, [r4, #0]
   b6c3a:	68a3      	ldr	r3, [r4, #8]
   b6c3c:	2100      	movs	r1, #0
   b6c3e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c40:	e7f2      	b.n	b6c28 <_ZN6String4copyEPKcj+0x18>

000b6c42 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6c42:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6c44:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6c46:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6c4a:	4604      	mov	r4, r0
	len = 0;
   b6c4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c4e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6c50:	b141      	cbz	r1, b6c64 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6c52:	4608      	mov	r0, r1
   b6c54:	9101      	str	r1, [sp, #4]
   b6c56:	f000 fbf9 	bl	b744c <strlen>
   b6c5a:	9901      	ldr	r1, [sp, #4]
   b6c5c:	4602      	mov	r2, r0
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff ffd6 	bl	b6c10 <_ZN6String4copyEPKcj>
}
   b6c64:	4620      	mov	r0, r4
   b6c66:	b002      	add	sp, #8
   b6c68:	bd10      	pop	{r4, pc}

000b6c6a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6c6a:	4288      	cmp	r0, r1
{
   b6c6c:	b510      	push	{r4, lr}
   b6c6e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6c70:	d005      	beq.n	b6c7e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6c72:	680b      	ldr	r3, [r1, #0]
   b6c74:	b12b      	cbz	r3, b6c82 <_ZN6StringaSERKS_+0x18>
   b6c76:	688a      	ldr	r2, [r1, #8]
   b6c78:	4619      	mov	r1, r3
   b6c7a:	f7ff ffc9 	bl	b6c10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6c7e:	4620      	mov	r0, r4
   b6c80:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c82:	f7ff ff9a 	bl	b6bba <_ZN6String10invalidateEv>
   b6c86:	e7fa      	b.n	b6c7e <_ZN6StringaSERKS_+0x14>

000b6c88 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6c88:	b510      	push	{r4, lr}
	buffer = NULL;
   b6c8a:	2300      	movs	r3, #0
String::String(const String &value)
   b6c8c:	4604      	mov	r4, r0
	capacity = 0;
   b6c8e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6c92:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c94:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6c96:	f7ff ffe8 	bl	b6c6a <_ZN6StringaSERKS_>
}
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	bd10      	pop	{r4, pc}

000b6c9e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6c9e:	b513      	push	{r0, r1, r4, lr}
   b6ca0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6ca2:	b159      	cbz	r1, b6cbc <_ZN6StringaSEPKc+0x1e>
   b6ca4:	4608      	mov	r0, r1
   b6ca6:	9101      	str	r1, [sp, #4]
   b6ca8:	f000 fbd0 	bl	b744c <strlen>
   b6cac:	9901      	ldr	r1, [sp, #4]
   b6cae:	4602      	mov	r2, r0
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	f7ff ffad 	bl	b6c10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	b002      	add	sp, #8
   b6cba:	bd10      	pop	{r4, pc}
	else invalidate();
   b6cbc:	f7ff ff7d 	bl	b6bba <_ZN6String10invalidateEv>
   b6cc0:	e7f9      	b.n	b6cb6 <_ZN6StringaSEPKc+0x18>

000b6cc2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6cc2:	b510      	push	{r4, lr}
   b6cc4:	4604      	mov	r4, r0
   b6cc6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6cc8:	2300      	movs	r3, #0
	capacity = 0;
   b6cca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6cce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6cd0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6cd2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6cd4:	a901      	add	r1, sp, #4
   b6cd6:	f000 f9a5 	bl	b7024 <itoa>
	*this = buf;
   b6cda:	a901      	add	r1, sp, #4
   b6cdc:	4620      	mov	r0, r4
   b6cde:	f7ff ffde 	bl	b6c9e <_ZN6StringaSEPKc>
}
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	b00a      	add	sp, #40	; 0x28
   b6ce6:	bd10      	pop	{r4, pc}

000b6ce8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6ce8:	b570      	push	{r4, r5, r6, lr}
   b6cea:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6cec:	460e      	mov	r6, r1
   b6cee:	b909      	cbnz	r1, b6cf4 <_ZN6String6concatEPKcj+0xc>
   b6cf0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6cf2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6cf4:	b16a      	cbz	r2, b6d12 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6cf6:	6884      	ldr	r4, [r0, #8]
   b6cf8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6cfa:	4621      	mov	r1, r4
   b6cfc:	f7ff ff74 	bl	b6be8 <_ZN6String7reserveEj>
   b6d00:	2800      	cmp	r0, #0
   b6d02:	d0f5      	beq.n	b6cf0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6d04:	6828      	ldr	r0, [r5, #0]
   b6d06:	68ab      	ldr	r3, [r5, #8]
   b6d08:	4631      	mov	r1, r6
   b6d0a:	4418      	add	r0, r3
   b6d0c:	f000 fb96 	bl	b743c <strcpy>
	len = newlen;
   b6d10:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6d12:	2001      	movs	r0, #1
   b6d14:	e7ed      	b.n	b6cf2 <_ZN6String6concatEPKcj+0xa>

000b6d16 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6d16:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6d18:	688a      	ldr	r2, [r1, #8]
   b6d1a:	6809      	ldr	r1, [r1, #0]
{
   b6d1c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6d1e:	f7ff ffe3 	bl	b6ce8 <_ZN6String6concatEPKcj>
   b6d22:	b910      	cbnz	r0, b6d2a <_ZplRK15StringSumHelperRK6String+0x14>
   b6d24:	4620      	mov	r0, r4
   b6d26:	f7ff ff48 	bl	b6bba <_ZN6String10invalidateEv>
	return a;
}
   b6d2a:	4620      	mov	r0, r4
   b6d2c:	bd10      	pop	{r4, pc}

000b6d2e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6d2e:	b513      	push	{r0, r1, r4, lr}
   b6d30:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6d32:	b929      	cbnz	r1, b6d40 <_ZplRK15StringSumHelperPKc+0x12>
   b6d34:	4620      	mov	r0, r4
   b6d36:	f7ff ff40 	bl	b6bba <_ZN6String10invalidateEv>
	return a;
}
   b6d3a:	4620      	mov	r0, r4
   b6d3c:	b002      	add	sp, #8
   b6d3e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6d40:	4608      	mov	r0, r1
   b6d42:	9101      	str	r1, [sp, #4]
   b6d44:	f000 fb82 	bl	b744c <strlen>
   b6d48:	9901      	ldr	r1, [sp, #4]
   b6d4a:	4602      	mov	r2, r0
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	f7ff ffcb 	bl	b6ce8 <_ZN6String6concatEPKcj>
   b6d52:	2800      	cmp	r0, #0
   b6d54:	d0ee      	beq.n	b6d34 <_ZplRK15StringSumHelperPKc+0x6>
   b6d56:	e7f0      	b.n	b6d3a <_ZplRK15StringSumHelperPKc+0xc>

000b6d58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6d58:	4b05      	ldr	r3, [pc, #20]	; (b6d70 <_GLOBAL__sub_I_System+0x18>)
   b6d5a:	2202      	movs	r2, #2
   b6d5c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6d5e:	4b05      	ldr	r3, [pc, #20]	; (b6d74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6d60:	4a05      	ldr	r2, [pc, #20]	; (b6d78 <_GLOBAL__sub_I_System+0x20>)
   b6d62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6d64:	2000      	movs	r0, #0
   b6d66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6d6a:	f7ff bb13 	b.w	b6394 <set_system_mode>
   b6d6e:	bf00      	nop
   b6d70:	2003e6f8 	.word	0x2003e6f8
   b6d74:	2003e6ec 	.word	0x2003e6ec
   b6d78:	ffff0000 	.word	0xffff0000

000b6d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6d7c:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6d7e:	681a      	ldr	r2, [r3, #0]
   b6d80:	4b02      	ldr	r3, [pc, #8]	; (b6d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6d82:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6d84:	4770      	bx	lr
   b6d86:	bf00      	nop
   b6d88:	2003df8c 	.word	0x2003df8c
   b6d8c:	2003e6fc 	.word	0x2003e6fc

000b6d90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d90:	4770      	bx	lr

000b6d92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d92:	7441      	strb	r1, [r0, #17]
}
   b6d94:	4770      	bx	lr

000b6d96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d98:	7c00      	ldrb	r0, [r0, #16]
   b6d9a:	f7ff faab 	bl	b62f4 <hal_usart_available_data_for_write>
}
   b6d9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6da2:	bd08      	pop	{r3, pc}

000b6da4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6da4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6da6:	7c00      	ldrb	r0, [r0, #16]
   b6da8:	f7ff fa7c 	bl	b62a4 <hal_usart_available>
}
   b6dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6db0:	bd08      	pop	{r3, pc}

000b6db2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6db2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6db4:	7c00      	ldrb	r0, [r0, #16]
   b6db6:	f7ff fa85 	bl	b62c4 <hal_usart_peek>
}
   b6dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dbe:	bd08      	pop	{r3, pc}

000b6dc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6dc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6dc2:	7c00      	ldrb	r0, [r0, #16]
   b6dc4:	f7ff fa76 	bl	b62b4 <hal_usart_read>
}
   b6dc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dcc:	bd08      	pop	{r3, pc}

000b6dce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6dce:	7c00      	ldrb	r0, [r0, #16]
   b6dd0:	f7ff ba80 	b.w	b62d4 <hal_usart_flush>

000b6dd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dd6:	7c45      	ldrb	r5, [r0, #17]
{
   b6dd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dda:	b12d      	cbz	r5, b6de8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6ddc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6dde:	b003      	add	sp, #12
   b6de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6de4:	f7ff ba56 	b.w	b6294 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6de8:	7c00      	ldrb	r0, [r0, #16]
   b6dea:	9101      	str	r1, [sp, #4]
   b6dec:	f7ff fa82 	bl	b62f4 <hal_usart_available_data_for_write>
   b6df0:	2800      	cmp	r0, #0
   b6df2:	9901      	ldr	r1, [sp, #4]
   b6df4:	dcf2      	bgt.n	b6ddc <_ZN11USARTSerial5writeEh+0x8>
}
   b6df6:	4628      	mov	r0, r5
   b6df8:	b003      	add	sp, #12
   b6dfa:	bd30      	pop	{r4, r5, pc}

000b6dfc <_ZN11USARTSerialD0Ev>:
   b6dfc:	b510      	push	{r4, lr}
   b6dfe:	2114      	movs	r1, #20
   b6e00:	4604      	mov	r4, r0
   b6e02:	f7fd f948 	bl	b4096 <_ZdlPvj>
   b6e06:	4620      	mov	r0, r4
   b6e08:	bd10      	pop	{r4, pc}
	...

000b6e0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6e0c:	b510      	push	{r4, lr}
   b6e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e12:	4604      	mov	r4, r0
   b6e14:	4608      	mov	r0, r1
   b6e16:	4611      	mov	r1, r2
   b6e18:	2200      	movs	r2, #0
   b6e1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e1e:	4b04      	ldr	r3, [pc, #16]	; (b6e30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6e20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e22:	2301      	movs	r3, #1
  _serial = serial;
   b6e24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6e28:	f7ff fa6c 	bl	b6304 <hal_usart_init_ex>
}
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	bd10      	pop	{r4, pc}
   b6e30:	000b87b8 	.word	0x000b87b8

000b6e34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6e34:	7441      	strb	r1, [r0, #17]
}
   b6e36:	4770      	bx	lr

000b6e38 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e38:	4770      	bx	lr

000b6e3a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6e3a:	4770      	bx	lr

000b6e3c <_ZN9USBSerial4readEv>:
{
   b6e3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6e3e:	2100      	movs	r1, #0
   b6e40:	7c00      	ldrb	r0, [r0, #16]
   b6e42:	f7ff fa87 	bl	b6354 <HAL_USB_USART_Receive_Data>
}
   b6e46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e4a:	bd08      	pop	{r3, pc}

000b6e4c <_ZN9USBSerial4peekEv>:
{
   b6e4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6e4e:	2101      	movs	r1, #1
   b6e50:	7c00      	ldrb	r0, [r0, #16]
   b6e52:	f7ff fa7f 	bl	b6354 <HAL_USB_USART_Receive_Data>
}
   b6e56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e5a:	bd08      	pop	{r3, pc}

000b6e5c <_ZN9USBSerial17availableForWriteEv>:
{
   b6e5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6e5e:	7c00      	ldrb	r0, [r0, #16]
   b6e60:	f7ff fa70 	bl	b6344 <HAL_USB_USART_Available_Data_For_Write>
}
   b6e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e68:	bd08      	pop	{r3, pc}

000b6e6a <_ZN9USBSerial9availableEv>:
{
   b6e6a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6e6c:	7c00      	ldrb	r0, [r0, #16]
   b6e6e:	f7ff fa61 	bl	b6334 <HAL_USB_USART_Available_Data>
}
   b6e72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e76:	bd08      	pop	{r3, pc}

000b6e78 <_ZN9USBSerial5writeEh>:
{
   b6e78:	b513      	push	{r0, r1, r4, lr}
   b6e7a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e7c:	7c00      	ldrb	r0, [r0, #16]
{
   b6e7e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e80:	f7ff fa60 	bl	b6344 <HAL_USB_USART_Available_Data_For_Write>
   b6e84:	2800      	cmp	r0, #0
   b6e86:	9901      	ldr	r1, [sp, #4]
   b6e88:	dc01      	bgt.n	b6e8e <_ZN9USBSerial5writeEh+0x16>
   b6e8a:	7c60      	ldrb	r0, [r4, #17]
   b6e8c:	b120      	cbz	r0, b6e98 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e8e:	7c20      	ldrb	r0, [r4, #16]
   b6e90:	f7ff fa68 	bl	b6364 <HAL_USB_USART_Send_Data>
   b6e94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e98:	b002      	add	sp, #8
   b6e9a:	bd10      	pop	{r4, pc}

000b6e9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e9c:	7c00      	ldrb	r0, [r0, #16]
   b6e9e:	f7ff ba69 	b.w	b6374 <HAL_USB_USART_Flush_Data>

000b6ea2 <_ZN9USBSerialD0Ev>:
   b6ea2:	b510      	push	{r4, lr}
   b6ea4:	2114      	movs	r1, #20
   b6ea6:	4604      	mov	r4, r0
   b6ea8:	f7fd f8f5 	bl	b4096 <_ZdlPvj>
   b6eac:	4620      	mov	r0, r4
   b6eae:	bd10      	pop	{r4, pc}

000b6eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6eb0:	b510      	push	{r4, lr}
   b6eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6eb6:	4604      	mov	r4, r0
   b6eb8:	4608      	mov	r0, r1
   b6eba:	2100      	movs	r1, #0
   b6ebc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6ec0:	4b04      	ldr	r3, [pc, #16]	; (b6ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6ec2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6ec4:	2301      	movs	r3, #1
  _serial = serial;
   b6ec6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6ec8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6eca:	4611      	mov	r1, r2
   b6ecc:	f7ff fa22 	bl	b6314 <HAL_USB_USART_Init>
}
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	bd10      	pop	{r4, pc}
   b6ed4:	000b87e8 	.word	0x000b87e8

000b6ed8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6ed8:	7c00      	ldrb	r0, [r0, #16]
   b6eda:	2200      	movs	r2, #0
   b6edc:	f7ff ba22 	b.w	b6324 <HAL_USB_USART_Begin>

000b6ee0 <_Z19acquireSerialBufferv>:
{
   b6ee0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6ee2:	2214      	movs	r2, #20
{
   b6ee4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6ee6:	2100      	movs	r1, #0
   b6ee8:	f000 fa62 	bl	b73b0 <memset>
}
   b6eec:	4620      	mov	r0, r4
   b6eee:	bd10      	pop	{r4, pc}

000b6ef0 <_Z16_fetch_usbserialv>:
{
   b6ef0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ef2:	4c0f      	ldr	r4, [pc, #60]	; (b6f30 <_Z16_fetch_usbserialv+0x40>)
{
   b6ef4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6ef6:	a803      	add	r0, sp, #12
   b6ef8:	f7ff fff2 	bl	b6ee0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6efc:	7821      	ldrb	r1, [r4, #0]
   b6efe:	f3bf 8f5b 	dmb	ish
   b6f02:	f011 0101 	ands.w	r1, r1, #1
   b6f06:	d10f      	bne.n	b6f28 <_Z16_fetch_usbserialv+0x38>
   b6f08:	4620      	mov	r0, r4
   b6f0a:	9101      	str	r1, [sp, #4]
   b6f0c:	f7fd f8d0 	bl	b40b0 <__cxa_guard_acquire>
   b6f10:	9901      	ldr	r1, [sp, #4]
   b6f12:	b148      	cbz	r0, b6f28 <_Z16_fetch_usbserialv+0x38>
   b6f14:	aa03      	add	r2, sp, #12
   b6f16:	4807      	ldr	r0, [pc, #28]	; (b6f34 <_Z16_fetch_usbserialv+0x44>)
   b6f18:	f7ff ffca 	bl	b6eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6f1c:	4620      	mov	r0, r4
   b6f1e:	f7fd f8cc 	bl	b40ba <__cxa_guard_release>
   b6f22:	4805      	ldr	r0, [pc, #20]	; (b6f38 <_Z16_fetch_usbserialv+0x48>)
   b6f24:	f000 fa28 	bl	b7378 <atexit>
	return _usbserial;
}
   b6f28:	4802      	ldr	r0, [pc, #8]	; (b6f34 <_Z16_fetch_usbserialv+0x44>)
   b6f2a:	b008      	add	sp, #32
   b6f2c:	bd10      	pop	{r4, pc}
   b6f2e:	bf00      	nop
   b6f30:	2003e700 	.word	0x2003e700
   b6f34:	2003e704 	.word	0x2003e704
   b6f38:	000b6e39 	.word	0x000b6e39

000b6f3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6f3c:	2200      	movs	r2, #0
   b6f3e:	6840      	ldr	r0, [r0, #4]
   b6f40:	4611      	mov	r1, r2
   b6f42:	f7ff ba73 	b.w	b642c <network_ready>

000b6f46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f46:	2200      	movs	r2, #0
   b6f48:	6840      	ldr	r0, [r0, #4]
   b6f4a:	4611      	mov	r1, r2
   b6f4c:	f7ff ba8e 	b.w	b646c <network_listening>

000b6f50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f50:	2200      	movs	r2, #0
   b6f52:	6840      	ldr	r0, [r0, #4]
   b6f54:	4611      	mov	r1, r2
   b6f56:	f7ff ba99 	b.w	b648c <network_get_listen_timeout>

000b6f5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f5a:	6840      	ldr	r0, [r0, #4]
   b6f5c:	2200      	movs	r2, #0
   b6f5e:	f7ff ba8d 	b.w	b647c <network_set_listen_timeout>

000b6f62 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f62:	6840      	ldr	r0, [r0, #4]
   b6f64:	2200      	movs	r2, #0
   b6f66:	f081 0101 	eor.w	r1, r1, #1
   b6f6a:	f7ff ba77 	b.w	b645c <network_listen>

000b6f6e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f6e:	2300      	movs	r3, #0
   b6f70:	6840      	ldr	r0, [r0, #4]
   b6f72:	461a      	mov	r2, r3
   b6f74:	4619      	mov	r1, r3
   b6f76:	f7ff ba69 	b.w	b644c <network_off>

000b6f7a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f7a:	2300      	movs	r3, #0
   b6f7c:	6840      	ldr	r0, [r0, #4]
   b6f7e:	461a      	mov	r2, r3
   b6f80:	4619      	mov	r1, r3
   b6f82:	f7ff ba5b 	b.w	b643c <network_on>

000b6f86 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f86:	2200      	movs	r2, #0
   b6f88:	6840      	ldr	r0, [r0, #4]
   b6f8a:	4611      	mov	r1, r2
   b6f8c:	f7ff ba3e 	b.w	b640c <network_connecting>

000b6f90 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f90:	6840      	ldr	r0, [r0, #4]
   b6f92:	2200      	movs	r2, #0
   b6f94:	2102      	movs	r1, #2
   b6f96:	f7ff ba41 	b.w	b641c <network_disconnect>

000b6f9a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f9a:	2300      	movs	r3, #0
   b6f9c:	6840      	ldr	r0, [r0, #4]
   b6f9e:	461a      	mov	r2, r3
   b6fa0:	f7ff ba2c 	b.w	b63fc <network_connect>

000b6fa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6fa4:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6fa6:	2204      	movs	r2, #4
   b6fa8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6faa:	4a02      	ldr	r2, [pc, #8]	; (b6fb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6fac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6fae:	4770      	bx	lr
   b6fb0:	2003e718 	.word	0x2003e718
   b6fb4:	000b8818 	.word	0x000b8818

000b6fb8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6fb8:	b510      	push	{r4, lr}
   b6fba:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6fbc:	f000 fa46 	bl	b744c <strlen>
   b6fc0:	3801      	subs	r0, #1
   b6fc2:	1823      	adds	r3, r4, r0
   b6fc4:	4620      	mov	r0, r4
	while(i<j){
   b6fc6:	4283      	cmp	r3, r0
   b6fc8:	d906      	bls.n	b6fd8 <_Z11str_reversePc+0x20>
		c = *i;
   b6fca:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6fcc:	7819      	ldrb	r1, [r3, #0]
   b6fce:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6fd2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6fd6:	e7f6      	b.n	b6fc6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6fd8:	bd10      	pop	{r4, pc}

000b6fda <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6fda:	b570      	push	{r4, r5, r6, lr}
   b6fdc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6fde:	1e91      	subs	r1, r2, #2
   b6fe0:	2922      	cmp	r1, #34	; 0x22
   b6fe2:	d81d      	bhi.n	b7020 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6fe4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6fe6:	b930      	cbnz	r0, b6ff6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6fe8:	4423      	add	r3, r4
            *ptr++ = '0';
   b6fea:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6fec:	429d      	cmp	r5, r3
   b6fee:	d210      	bcs.n	b7012 <ultoa+0x38>
            *ptr++ = '0';
   b6ff0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6ff4:	e7fa      	b.n	b6fec <ultoa+0x12>
            result.quot = a/radix;
   b6ff6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6ffa:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6ffe:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7000:	2809      	cmp	r0, #9
                *ptr += '0';
   b7002:	bf94      	ite	ls
   b7004:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7006:	3157      	addhi	r1, #87	; 0x57
   b7008:	b2c9      	uxtb	r1, r1
   b700a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b700e:	4630      	mov	r0, r6
	while(a){
   b7010:	e7e9      	b.n	b6fe6 <ultoa+0xc>

	*ptr = '\0';
   b7012:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7014:	4620      	mov	r0, r4
	*ptr = '\0';
   b7016:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7018:	f7ff ffce 	bl	b6fb8 <_Z11str_reversePc>
	return buffer;
   b701c:	4620      	mov	r0, r4
}
   b701e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7020:	2000      	movs	r0, #0
   b7022:	e7fc      	b.n	b701e <ultoa+0x44>

000b7024 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7024:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7026:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7028:	460c      	mov	r4, r1
   b702a:	4615      	mov	r5, r2
	if(a<0){
   b702c:	da0e      	bge.n	b704c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b702e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7032:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7036:	bf14      	ite	ne
   b7038:	4258      	negne	r0, r3
   b703a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b703c:	2301      	movs	r3, #1
		*buffer = '-';
   b703e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7040:	462a      	mov	r2, r5
   b7042:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7044:	f7ff ffc9 	bl	b6fda <ultoa>
	}
	return buffer;
}
   b7048:	4620      	mov	r0, r4
   b704a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b704c:	2301      	movs	r3, #1
   b704e:	e7f9      	b.n	b7044 <itoa+0x20>

000b7050 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7050:	4b01      	ldr	r3, [pc, #4]	; (b7058 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7052:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7054:	4770      	bx	lr
   b7056:	bf00      	nop
   b7058:	2003df90 	.word	0x2003df90

000b705c <serialEventRun>:
{
   b705c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b705e:	4b0b      	ldr	r3, [pc, #44]	; (b708c <serialEventRun+0x30>)
   b7060:	b143      	cbz	r3, b7074 <serialEventRun+0x18>
   b7062:	f7ff ff45 	bl	b6ef0 <_Z16_fetch_usbserialv>
   b7066:	6803      	ldr	r3, [r0, #0]
   b7068:	691b      	ldr	r3, [r3, #16]
   b706a:	4798      	blx	r3
   b706c:	2800      	cmp	r0, #0
   b706e:	dd01      	ble.n	b7074 <serialEventRun+0x18>
        serialEvent();
   b7070:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7074:	4b06      	ldr	r3, [pc, #24]	; (b7090 <serialEventRun+0x34>)
   b7076:	b143      	cbz	r3, b708a <serialEventRun+0x2e>
   b7078:	f000 f958 	bl	b732c <_Z22__fetch_global_Serial1v>
   b707c:	6803      	ldr	r3, [r0, #0]
   b707e:	691b      	ldr	r3, [r3, #16]
   b7080:	4798      	blx	r3
   b7082:	2800      	cmp	r0, #0
   b7084:	dd01      	ble.n	b708a <serialEventRun+0x2e>
        serialEvent1();
   b7086:	f3af 8000 	nop.w
}
   b708a:	bd08      	pop	{r3, pc}
	...

000b7094 <_post_loop>:
{
   b7094:	b508      	push	{r3, lr}
	serialEventRun();
   b7096:	f7ff ffe1 	bl	b705c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b709a:	f7ff f823 	bl	b60e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b709e:	4b01      	ldr	r3, [pc, #4]	; (b70a4 <_post_loop+0x10>)
   b70a0:	6018      	str	r0, [r3, #0]
}
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	2003e728 	.word	0x2003e728

000b70a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70a8:	4805      	ldr	r0, [pc, #20]	; (b70c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b70aa:	4a06      	ldr	r2, [pc, #24]	; (b70c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b70ac:	4906      	ldr	r1, [pc, #24]	; (b70c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b70ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b70b0:	1a12      	subs	r2, r2, r0
   b70b2:	f000 f96f 	bl	b7394 <memcpy>
    __backup_sram_signature = signature;
   b70b6:	4b05      	ldr	r3, [pc, #20]	; (b70cc <_Z33system_initialize_user_backup_ramv+0x24>)
   b70b8:	4a05      	ldr	r2, [pc, #20]	; (b70d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b70ba:	601a      	str	r2, [r3, #0]
}
   b70bc:	bd08      	pop	{r3, pc}
   b70be:	bf00      	nop
   b70c0:	2003f400 	.word	0x2003f400
   b70c4:	2003f404 	.word	0x2003f404
   b70c8:	000b8940 	.word	0x000b8940
   b70cc:	2003f400 	.word	0x2003f400
   b70d0:	9a271c1e 	.word	0x9a271c1e

000b70d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b70d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b70d6:	2300      	movs	r3, #0
   b70d8:	9300      	str	r3, [sp, #0]
   b70da:	461a      	mov	r2, r3
   b70dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b70e0:	f7ff f972 	bl	b63c8 <system_ctrl_set_result>
}
   b70e4:	b003      	add	sp, #12
   b70e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b70ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b70ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b70ee:	8843      	ldrh	r3, [r0, #2]
   b70f0:	2b0a      	cmp	r3, #10
   b70f2:	d008      	beq.n	b7106 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b70f4:	2b50      	cmp	r3, #80	; 0x50
   b70f6:	d10b      	bne.n	b7110 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b70f8:	4b09      	ldr	r3, [pc, #36]	; (b7120 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b70fa:	681b      	ldr	r3, [r3, #0]
   b70fc:	b14b      	cbz	r3, b7112 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b70fe:	b003      	add	sp, #12
   b7100:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7104:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7106:	f7ff ffe5 	bl	b70d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b710a:	b003      	add	sp, #12
   b710c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7110:	2300      	movs	r3, #0
   b7112:	9300      	str	r3, [sp, #0]
   b7114:	461a      	mov	r2, r3
   b7116:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b711a:	f7ff f955 	bl	b63c8 <system_ctrl_set_result>
}
   b711e:	e7f4      	b.n	b710a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7120:	2003e724 	.word	0x2003e724

000b7124 <module_user_init_hook>:
{
   b7124:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7126:	4812      	ldr	r0, [pc, #72]	; (b7170 <module_user_init_hook+0x4c>)
   b7128:	2100      	movs	r1, #0
   b712a:	f7ff f9ff 	bl	b652c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b712e:	4b11      	ldr	r3, [pc, #68]	; (b7174 <module_user_init_hook+0x50>)
   b7130:	681a      	ldr	r2, [r3, #0]
   b7132:	4b11      	ldr	r3, [pc, #68]	; (b7178 <module_user_init_hook+0x54>)
   b7134:	429a      	cmp	r2, r3
   b7136:	4b11      	ldr	r3, [pc, #68]	; (b717c <module_user_init_hook+0x58>)
   b7138:	bf0c      	ite	eq
   b713a:	2201      	moveq	r2, #1
   b713c:	2200      	movne	r2, #0
   b713e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7140:	d001      	beq.n	b7146 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7142:	f7ff ffb1 	bl	b70a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7146:	f7fe ffbd 	bl	b60c4 <HAL_RNG_GetRandomNumber>
   b714a:	4604      	mov	r4, r0
    srand(seed);
   b714c:	f000 f948 	bl	b73e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7150:	4b0b      	ldr	r3, [pc, #44]	; (b7180 <module_user_init_hook+0x5c>)
   b7152:	b113      	cbz	r3, b715a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7154:	4620      	mov	r0, r4
   b7156:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b715a:	2100      	movs	r1, #0
   b715c:	4808      	ldr	r0, [pc, #32]	; (b7180 <module_user_init_hook+0x5c>)
   b715e:	f7ff f93d 	bl	b63dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7166:	4807      	ldr	r0, [pc, #28]	; (b7184 <module_user_init_hook+0x60>)
   b7168:	2100      	movs	r1, #0
   b716a:	f7ff b923 	b.w	b63b4 <system_ctrl_set_app_request_handler>
   b716e:	bf00      	nop
   b7170:	000b7051 	.word	0x000b7051
   b7174:	2003f400 	.word	0x2003f400
   b7178:	9a271c1e 	.word	0x9a271c1e
   b717c:	2003e720 	.word	0x2003e720
   b7180:	00000000 	.word	0x00000000
   b7184:	000b70ed 	.word	0x000b70ed

000b7188 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7188:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b718a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b718c:	d902      	bls.n	b7194 <pinAvailable+0xc>
    return false;
   b718e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7190:	b002      	add	sp, #8
   b7192:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7194:	f1a0 030b 	sub.w	r3, r0, #11
   b7198:	2b02      	cmp	r3, #2
   b719a:	d81a      	bhi.n	b71d2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b719c:	4c17      	ldr	r4, [pc, #92]	; (b71fc <pinAvailable+0x74>)
   b719e:	7821      	ldrb	r1, [r4, #0]
   b71a0:	f3bf 8f5b 	dmb	ish
   b71a4:	f011 0101 	ands.w	r1, r1, #1
   b71a8:	d10b      	bne.n	b71c2 <pinAvailable+0x3a>
   b71aa:	4620      	mov	r0, r4
   b71ac:	9101      	str	r1, [sp, #4]
   b71ae:	f7fc ff7f 	bl	b40b0 <__cxa_guard_acquire>
   b71b2:	9901      	ldr	r1, [sp, #4]
   b71b4:	b128      	cbz	r0, b71c2 <pinAvailable+0x3a>
   b71b6:	4812      	ldr	r0, [pc, #72]	; (b7200 <pinAvailable+0x78>)
   b71b8:	f7ff fc4c 	bl	b6a54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b71bc:	4620      	mov	r0, r4
   b71be:	f7fc ff7c 	bl	b40ba <__cxa_guard_release>
   b71c2:	4b0f      	ldr	r3, [pc, #60]	; (b7200 <pinAvailable+0x78>)
   b71c4:	7818      	ldrb	r0, [r3, #0]
   b71c6:	f7ff f83d 	bl	b6244 <hal_spi_is_enabled>
   b71ca:	2800      	cmp	r0, #0
   b71cc:	d1df      	bne.n	b718e <pinAvailable+0x6>
  return true; // 'pin' is available
   b71ce:	2001      	movs	r0, #1
   b71d0:	e7de      	b.n	b7190 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b71d2:	2801      	cmp	r0, #1
   b71d4:	d809      	bhi.n	b71ea <pinAvailable+0x62>
   b71d6:	f000 f869 	bl	b72ac <_Z19__fetch_global_Wirev>
   b71da:	2100      	movs	r1, #0
   b71dc:	7c00      	ldrb	r0, [r0, #16]
   b71de:	f7fe fff1 	bl	b61c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b71e2:	f080 0001 	eor.w	r0, r0, #1
   b71e6:	b2c0      	uxtb	r0, r0
   b71e8:	e7d2      	b.n	b7190 <pinAvailable+0x8>
   b71ea:	3809      	subs	r0, #9
   b71ec:	2801      	cmp	r0, #1
   b71ee:	d8ee      	bhi.n	b71ce <pinAvailable+0x46>
   b71f0:	f000 f89c 	bl	b732c <_Z22__fetch_global_Serial1v>
   b71f4:	7c00      	ldrb	r0, [r0, #16]
   b71f6:	f7ff f875 	bl	b62e4 <hal_usart_is_enabled>
   b71fa:	e7f2      	b.n	b71e2 <pinAvailable+0x5a>
   b71fc:	2003dff8 	.word	0x2003dff8
   b7200:	2003dffc 	.word	0x2003dffc

000b7204 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7204:	2823      	cmp	r0, #35	; 0x23
{
   b7206:	b538      	push	{r3, r4, r5, lr}
   b7208:	4604      	mov	r4, r0
   b720a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b720c:	d80a      	bhi.n	b7224 <pinMode+0x20>
   b720e:	29ff      	cmp	r1, #255	; 0xff
   b7210:	d008      	beq.n	b7224 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7212:	f7ff ffb9 	bl	b7188 <pinAvailable>
   b7216:	b128      	cbz	r0, b7224 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7218:	4629      	mov	r1, r5
   b721a:	4620      	mov	r0, r4
}
   b721c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7220:	f7fe bf68 	b.w	b60f4 <HAL_Pin_Mode>
}
   b7224:	bd38      	pop	{r3, r4, r5, pc}

000b7226 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7226:	b538      	push	{r3, r4, r5, lr}
   b7228:	4604      	mov	r4, r0
   b722a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b722c:	f7fe ff6a 	bl	b6104 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7230:	28ff      	cmp	r0, #255	; 0xff
   b7232:	d010      	beq.n	b7256 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7234:	2806      	cmp	r0, #6
   b7236:	d804      	bhi.n	b7242 <digitalWrite+0x1c>
   b7238:	234d      	movs	r3, #77	; 0x4d
   b723a:	fa23 f000 	lsr.w	r0, r3, r0
   b723e:	07c3      	lsls	r3, r0, #31
   b7240:	d409      	bmi.n	b7256 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7242:	4620      	mov	r0, r4
   b7244:	f7ff ffa0 	bl	b7188 <pinAvailable>
   b7248:	b128      	cbz	r0, b7256 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b724a:	4629      	mov	r1, r5
   b724c:	4620      	mov	r0, r4
}
   b724e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7252:	f7fe bf5f 	b.w	b6114 <HAL_GPIO_Write>
}
   b7256:	bd38      	pop	{r3, r4, r5, pc}

000b7258 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7258:	b510      	push	{r4, lr}
   b725a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b725c:	f7fe ff52 	bl	b6104 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7260:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7262:	b2db      	uxtb	r3, r3
   b7264:	2b01      	cmp	r3, #1
   b7266:	d908      	bls.n	b727a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7268:	4620      	mov	r0, r4
   b726a:	f7ff ff8d 	bl	b7188 <pinAvailable>
   b726e:	b120      	cbz	r0, b727a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7270:	4620      	mov	r0, r4
}
   b7272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7276:	f7fe bf55 	b.w	b6124 <HAL_GPIO_Read>
}
   b727a:	2000      	movs	r0, #0
   b727c:	bd10      	pop	{r4, pc}

000b727e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b727e:	4770      	bx	lr

000b7280 <_Z17acquireWireBufferv>:
{
   b7280:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7282:	2520      	movs	r5, #32
   b7284:	2314      	movs	r3, #20
{
   b7286:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7288:	6003      	str	r3, [r0, #0]
   b728a:	6085      	str	r5, [r0, #8]
   b728c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b728e:	4906      	ldr	r1, [pc, #24]	; (b72a8 <_Z17acquireWireBufferv+0x28>)
   b7290:	4628      	mov	r0, r5
   b7292:	f000 f86f 	bl	b7374 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7296:	4904      	ldr	r1, [pc, #16]	; (b72a8 <_Z17acquireWireBufferv+0x28>)
	};
   b7298:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b729a:	4628      	mov	r0, r5
   b729c:	f000 f86a 	bl	b7374 <_ZnajRKSt9nothrow_t>
	};
   b72a0:	60e0      	str	r0, [r4, #12]
}
   b72a2:	4620      	mov	r0, r4
   b72a4:	bd38      	pop	{r3, r4, r5, pc}
   b72a6:	bf00      	nop
   b72a8:	000b884c 	.word	0x000b884c

000b72ac <_Z19__fetch_global_Wirev>:
{
   b72ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72ae:	4d0e      	ldr	r5, [pc, #56]	; (b72e8 <_Z19__fetch_global_Wirev+0x3c>)
   b72b0:	7829      	ldrb	r1, [r5, #0]
   b72b2:	f3bf 8f5b 	dmb	ish
   b72b6:	f011 0401 	ands.w	r4, r1, #1
{
   b72ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72bc:	d111      	bne.n	b72e2 <_Z19__fetch_global_Wirev+0x36>
   b72be:	4628      	mov	r0, r5
   b72c0:	f7fc fef6 	bl	b40b0 <__cxa_guard_acquire>
   b72c4:	b168      	cbz	r0, b72e2 <_Z19__fetch_global_Wirev+0x36>
   b72c6:	a801      	add	r0, sp, #4
   b72c8:	f7ff ffda 	bl	b7280 <_Z17acquireWireBufferv>
   b72cc:	aa01      	add	r2, sp, #4
   b72ce:	4621      	mov	r1, r4
   b72d0:	4806      	ldr	r0, [pc, #24]	; (b72ec <_Z19__fetch_global_Wirev+0x40>)
   b72d2:	f7ff f9c3 	bl	b665c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b72d6:	4628      	mov	r0, r5
   b72d8:	f7fc feef 	bl	b40ba <__cxa_guard_release>
   b72dc:	4804      	ldr	r0, [pc, #16]	; (b72f0 <_Z19__fetch_global_Wirev+0x44>)
   b72de:	f000 f84b 	bl	b7378 <atexit>
	return wire;
}
   b72e2:	4802      	ldr	r0, [pc, #8]	; (b72ec <_Z19__fetch_global_Wirev+0x40>)
   b72e4:	b007      	add	sp, #28
   b72e6:	bd30      	pop	{r4, r5, pc}
   b72e8:	2003e72c 	.word	0x2003e72c
   b72ec:	2003e730 	.word	0x2003e730
   b72f0:	000b727f 	.word	0x000b727f

000b72f4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72f4:	4770      	bx	lr
	...

000b72f8 <_Z20acquireSerial1Bufferv>:
{
   b72f8:	b538      	push	{r3, r4, r5, lr}
   b72fa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b72fc:	2514      	movs	r5, #20
   b72fe:	462a      	mov	r2, r5
   b7300:	2100      	movs	r1, #0
   b7302:	f000 f855 	bl	b73b0 <memset>
   b7306:	8025      	strh	r5, [r4, #0]
   b7308:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b730a:	4907      	ldr	r1, [pc, #28]	; (b7328 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b730c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b730e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7310:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7312:	f000 f82f 	bl	b7374 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7316:	4904      	ldr	r1, [pc, #16]	; (b7328 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7318:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b731a:	4628      	mov	r0, r5
   b731c:	f000 f82a 	bl	b7374 <_ZnajRKSt9nothrow_t>
    };
   b7320:	60e0      	str	r0, [r4, #12]
}
   b7322:	4620      	mov	r0, r4
   b7324:	bd38      	pop	{r3, r4, r5, pc}
   b7326:	bf00      	nop
   b7328:	000b884c 	.word	0x000b884c

000b732c <_Z22__fetch_global_Serial1v>:
{
   b732c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b732e:	4d0e      	ldr	r5, [pc, #56]	; (b7368 <_Z22__fetch_global_Serial1v+0x3c>)
   b7330:	7829      	ldrb	r1, [r5, #0]
   b7332:	f3bf 8f5b 	dmb	ish
   b7336:	f011 0401 	ands.w	r4, r1, #1
{
   b733a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b733c:	d111      	bne.n	b7362 <_Z22__fetch_global_Serial1v+0x36>
   b733e:	4628      	mov	r0, r5
   b7340:	f7fc feb6 	bl	b40b0 <__cxa_guard_acquire>
   b7344:	b168      	cbz	r0, b7362 <_Z22__fetch_global_Serial1v+0x36>
   b7346:	a801      	add	r0, sp, #4
   b7348:	f7ff ffd6 	bl	b72f8 <_Z20acquireSerial1Bufferv>
   b734c:	aa01      	add	r2, sp, #4
   b734e:	4621      	mov	r1, r4
   b7350:	4806      	ldr	r0, [pc, #24]	; (b736c <_Z22__fetch_global_Serial1v+0x40>)
   b7352:	f7ff fd5b 	bl	b6e0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7356:	4628      	mov	r0, r5
   b7358:	f7fc feaf 	bl	b40ba <__cxa_guard_release>
   b735c:	4804      	ldr	r0, [pc, #16]	; (b7370 <_Z22__fetch_global_Serial1v+0x44>)
   b735e:	f000 f80b 	bl	b7378 <atexit>
    return serial1;
}
   b7362:	4802      	ldr	r0, [pc, #8]	; (b736c <_Z22__fetch_global_Serial1v+0x40>)
   b7364:	b007      	add	sp, #28
   b7366:	bd30      	pop	{r4, r5, pc}
   b7368:	2003e744 	.word	0x2003e744
   b736c:	2003e748 	.word	0x2003e748
   b7370:	000b72f5 	.word	0x000b72f5

000b7374 <_ZnajRKSt9nothrow_t>:
   b7374:	f7fc be8d 	b.w	b4092 <_Znaj>

000b7378 <atexit>:
   b7378:	2300      	movs	r3, #0
   b737a:	4601      	mov	r1, r0
   b737c:	461a      	mov	r2, r3
   b737e:	4618      	mov	r0, r3
   b7380:	f000 b8c8 	b.w	b7514 <__register_exitproc>

000b7384 <calloc>:
   b7384:	4b02      	ldr	r3, [pc, #8]	; (b7390 <calloc+0xc>)
   b7386:	460a      	mov	r2, r1
   b7388:	4601      	mov	r1, r0
   b738a:	6818      	ldr	r0, [r3, #0]
   b738c:	f000 b818 	b.w	b73c0 <_calloc_r>
   b7390:	2003df90 	.word	0x2003df90

000b7394 <memcpy>:
   b7394:	440a      	add	r2, r1
   b7396:	4291      	cmp	r1, r2
   b7398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b739c:	d100      	bne.n	b73a0 <memcpy+0xc>
   b739e:	4770      	bx	lr
   b73a0:	b510      	push	{r4, lr}
   b73a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b73a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b73aa:	4291      	cmp	r1, r2
   b73ac:	d1f9      	bne.n	b73a2 <memcpy+0xe>
   b73ae:	bd10      	pop	{r4, pc}

000b73b0 <memset>:
   b73b0:	4402      	add	r2, r0
   b73b2:	4603      	mov	r3, r0
   b73b4:	4293      	cmp	r3, r2
   b73b6:	d100      	bne.n	b73ba <memset+0xa>
   b73b8:	4770      	bx	lr
   b73ba:	f803 1b01 	strb.w	r1, [r3], #1
   b73be:	e7f9      	b.n	b73b4 <memset+0x4>

000b73c0 <_calloc_r>:
   b73c0:	b513      	push	{r0, r1, r4, lr}
   b73c2:	434a      	muls	r2, r1
   b73c4:	4611      	mov	r1, r2
   b73c6:	9201      	str	r2, [sp, #4]
   b73c8:	f7ff f8a0 	bl	b650c <_malloc_r>
   b73cc:	4604      	mov	r4, r0
   b73ce:	b118      	cbz	r0, b73d8 <_calloc_r+0x18>
   b73d0:	9a01      	ldr	r2, [sp, #4]
   b73d2:	2100      	movs	r1, #0
   b73d4:	f7ff ffec 	bl	b73b0 <memset>
   b73d8:	4620      	mov	r0, r4
   b73da:	b002      	add	sp, #8
   b73dc:	bd10      	pop	{r4, pc}
	...

000b73e0 <srand>:
   b73e0:	b538      	push	{r3, r4, r5, lr}
   b73e2:	4b10      	ldr	r3, [pc, #64]	; (b7424 <srand+0x44>)
   b73e4:	681d      	ldr	r5, [r3, #0]
   b73e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b73e8:	4604      	mov	r4, r0
   b73ea:	b9b3      	cbnz	r3, b741a <srand+0x3a>
   b73ec:	2018      	movs	r0, #24
   b73ee:	f7ff f865 	bl	b64bc <malloc>
   b73f2:	4602      	mov	r2, r0
   b73f4:	63a8      	str	r0, [r5, #56]	; 0x38
   b73f6:	b920      	cbnz	r0, b7402 <srand+0x22>
   b73f8:	4b0b      	ldr	r3, [pc, #44]	; (b7428 <srand+0x48>)
   b73fa:	480c      	ldr	r0, [pc, #48]	; (b742c <srand+0x4c>)
   b73fc:	2142      	movs	r1, #66	; 0x42
   b73fe:	f7ff f88d 	bl	b651c <__assert_func>
   b7402:	490b      	ldr	r1, [pc, #44]	; (b7430 <srand+0x50>)
   b7404:	4b0b      	ldr	r3, [pc, #44]	; (b7434 <srand+0x54>)
   b7406:	e9c0 1300 	strd	r1, r3, [r0]
   b740a:	4b0b      	ldr	r3, [pc, #44]	; (b7438 <srand+0x58>)
   b740c:	6083      	str	r3, [r0, #8]
   b740e:	230b      	movs	r3, #11
   b7410:	8183      	strh	r3, [r0, #12]
   b7412:	2100      	movs	r1, #0
   b7414:	2001      	movs	r0, #1
   b7416:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b741a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b741c:	2200      	movs	r2, #0
   b741e:	611c      	str	r4, [r3, #16]
   b7420:	615a      	str	r2, [r3, #20]
   b7422:	bd38      	pop	{r3, r4, r5, pc}
   b7424:	2003df90 	.word	0x2003df90
   b7428:	000b884d 	.word	0x000b884d
   b742c:	000b8864 	.word	0x000b8864
   b7430:	abcd330e 	.word	0xabcd330e
   b7434:	e66d1234 	.word	0xe66d1234
   b7438:	0005deec 	.word	0x0005deec

000b743c <strcpy>:
   b743c:	4603      	mov	r3, r0
   b743e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7442:	f803 2b01 	strb.w	r2, [r3], #1
   b7446:	2a00      	cmp	r2, #0
   b7448:	d1f9      	bne.n	b743e <strcpy+0x2>
   b744a:	4770      	bx	lr

000b744c <strlen>:
   b744c:	4603      	mov	r3, r0
   b744e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7452:	2a00      	cmp	r2, #0
   b7454:	d1fb      	bne.n	b744e <strlen+0x2>
   b7456:	1a18      	subs	r0, r3, r0
   b7458:	3801      	subs	r0, #1
   b745a:	4770      	bx	lr

000b745c <strtok>:
   b745c:	4b16      	ldr	r3, [pc, #88]	; (b74b8 <strtok+0x5c>)
   b745e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7460:	681e      	ldr	r6, [r3, #0]
   b7462:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b7464:	4605      	mov	r5, r0
   b7466:	b9fc      	cbnz	r4, b74a8 <strtok+0x4c>
   b7468:	2050      	movs	r0, #80	; 0x50
   b746a:	9101      	str	r1, [sp, #4]
   b746c:	f7ff f826 	bl	b64bc <malloc>
   b7470:	9901      	ldr	r1, [sp, #4]
   b7472:	65b0      	str	r0, [r6, #88]	; 0x58
   b7474:	4602      	mov	r2, r0
   b7476:	b920      	cbnz	r0, b7482 <strtok+0x26>
   b7478:	4b10      	ldr	r3, [pc, #64]	; (b74bc <strtok+0x60>)
   b747a:	4811      	ldr	r0, [pc, #68]	; (b74c0 <strtok+0x64>)
   b747c:	2157      	movs	r1, #87	; 0x57
   b747e:	f7ff f84d 	bl	b651c <__assert_func>
   b7482:	e9c0 4400 	strd	r4, r4, [r0]
   b7486:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b748a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b748e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b7492:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b7496:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b749a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b749e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b74a2:	6184      	str	r4, [r0, #24]
   b74a4:	7704      	strb	r4, [r0, #28]
   b74a6:	6244      	str	r4, [r0, #36]	; 0x24
   b74a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b74aa:	2301      	movs	r3, #1
   b74ac:	4628      	mov	r0, r5
   b74ae:	b002      	add	sp, #8
   b74b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b74b4:	f000 b806 	b.w	b74c4 <__strtok_r>
   b74b8:	2003df90 	.word	0x2003df90
   b74bc:	000b884d 	.word	0x000b884d
   b74c0:	000b88bd 	.word	0x000b88bd

000b74c4 <__strtok_r>:
   b74c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74c6:	b908      	cbnz	r0, b74cc <__strtok_r+0x8>
   b74c8:	6810      	ldr	r0, [r2, #0]
   b74ca:	b188      	cbz	r0, b74f0 <__strtok_r+0x2c>
   b74cc:	4604      	mov	r4, r0
   b74ce:	4620      	mov	r0, r4
   b74d0:	f814 5b01 	ldrb.w	r5, [r4], #1
   b74d4:	460f      	mov	r7, r1
   b74d6:	f817 6b01 	ldrb.w	r6, [r7], #1
   b74da:	b91e      	cbnz	r6, b74e4 <__strtok_r+0x20>
   b74dc:	b965      	cbnz	r5, b74f8 <__strtok_r+0x34>
   b74de:	6015      	str	r5, [r2, #0]
   b74e0:	4628      	mov	r0, r5
   b74e2:	e005      	b.n	b74f0 <__strtok_r+0x2c>
   b74e4:	42b5      	cmp	r5, r6
   b74e6:	d1f6      	bne.n	b74d6 <__strtok_r+0x12>
   b74e8:	2b00      	cmp	r3, #0
   b74ea:	d1f0      	bne.n	b74ce <__strtok_r+0xa>
   b74ec:	6014      	str	r4, [r2, #0]
   b74ee:	7003      	strb	r3, [r0, #0]
   b74f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b74f2:	461c      	mov	r4, r3
   b74f4:	e00c      	b.n	b7510 <__strtok_r+0x4c>
   b74f6:	b915      	cbnz	r5, b74fe <__strtok_r+0x3a>
   b74f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   b74fc:	460e      	mov	r6, r1
   b74fe:	f816 5b01 	ldrb.w	r5, [r6], #1
   b7502:	42ab      	cmp	r3, r5
   b7504:	d1f7      	bne.n	b74f6 <__strtok_r+0x32>
   b7506:	2b00      	cmp	r3, #0
   b7508:	d0f3      	beq.n	b74f2 <__strtok_r+0x2e>
   b750a:	2300      	movs	r3, #0
   b750c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b7510:	6014      	str	r4, [r2, #0]
   b7512:	e7ed      	b.n	b74f0 <__strtok_r+0x2c>

000b7514 <__register_exitproc>:
   b7514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7518:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75d4 <__register_exitproc+0xc0>
   b751c:	4606      	mov	r6, r0
   b751e:	f8d8 0000 	ldr.w	r0, [r8]
   b7522:	461f      	mov	r7, r3
   b7524:	460d      	mov	r5, r1
   b7526:	4691      	mov	r9, r2
   b7528:	f000 f856 	bl	b75d8 <__retarget_lock_acquire_recursive>
   b752c:	4b25      	ldr	r3, [pc, #148]	; (b75c4 <__register_exitproc+0xb0>)
   b752e:	681c      	ldr	r4, [r3, #0]
   b7530:	b934      	cbnz	r4, b7540 <__register_exitproc+0x2c>
   b7532:	4c25      	ldr	r4, [pc, #148]	; (b75c8 <__register_exitproc+0xb4>)
   b7534:	601c      	str	r4, [r3, #0]
   b7536:	4b25      	ldr	r3, [pc, #148]	; (b75cc <__register_exitproc+0xb8>)
   b7538:	b113      	cbz	r3, b7540 <__register_exitproc+0x2c>
   b753a:	681b      	ldr	r3, [r3, #0]
   b753c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7540:	6863      	ldr	r3, [r4, #4]
   b7542:	2b1f      	cmp	r3, #31
   b7544:	dd07      	ble.n	b7556 <__register_exitproc+0x42>
   b7546:	f8d8 0000 	ldr.w	r0, [r8]
   b754a:	f000 f847 	bl	b75dc <__retarget_lock_release_recursive>
   b754e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7556:	b34e      	cbz	r6, b75ac <__register_exitproc+0x98>
   b7558:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b755c:	b988      	cbnz	r0, b7582 <__register_exitproc+0x6e>
   b755e:	4b1c      	ldr	r3, [pc, #112]	; (b75d0 <__register_exitproc+0xbc>)
   b7560:	b923      	cbnz	r3, b756c <__register_exitproc+0x58>
   b7562:	f8d8 0000 	ldr.w	r0, [r8]
   b7566:	f000 f838 	bl	b75da <__retarget_lock_release>
   b756a:	e7f0      	b.n	b754e <__register_exitproc+0x3a>
   b756c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7570:	f7fe ffa4 	bl	b64bc <malloc>
   b7574:	2800      	cmp	r0, #0
   b7576:	d0f4      	beq.n	b7562 <__register_exitproc+0x4e>
   b7578:	2300      	movs	r3, #0
   b757a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b757e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7582:	6863      	ldr	r3, [r4, #4]
   b7584:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7588:	2201      	movs	r2, #1
   b758a:	409a      	lsls	r2, r3
   b758c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7590:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7594:	4313      	orrs	r3, r2
   b7596:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b759a:	2e02      	cmp	r6, #2
   b759c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b75a0:	bf02      	ittt	eq
   b75a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b75a6:	4313      	orreq	r3, r2
   b75a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b75ac:	6863      	ldr	r3, [r4, #4]
   b75ae:	f8d8 0000 	ldr.w	r0, [r8]
   b75b2:	1c5a      	adds	r2, r3, #1
   b75b4:	3302      	adds	r3, #2
   b75b6:	6062      	str	r2, [r4, #4]
   b75b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b75bc:	f000 f80e 	bl	b75dc <__retarget_lock_release_recursive>
   b75c0:	2000      	movs	r0, #0
   b75c2:	e7c6      	b.n	b7552 <__register_exitproc+0x3e>
   b75c4:	2003e7e8 	.word	0x2003e7e8
   b75c8:	2003e75c 	.word	0x2003e75c
   b75cc:	00000000 	.word	0x00000000
   b75d0:	000b64bd 	.word	0x000b64bd
   b75d4:	2003dff4 	.word	0x2003dff4

000b75d8 <__retarget_lock_acquire_recursive>:
   b75d8:	4770      	bx	lr

000b75da <__retarget_lock_release>:
   b75da:	4770      	bx	lr

000b75dc <__retarget_lock_release_recursive>:
   b75dc:	4770      	bx	lr

000b75de <link_code_end>:
	...

000b75e0 <dynalib_user>:
   b75e0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b75f0:	0000 0000 4120 2000 0044 6553 736e 726f     .... A. D.Sensor
   b7600:	5020 636f 2061 6944 7473 6e61 6963 0061      Poca Distancia.
   b7610:	6553 736e 726f 4d20 6375 6168 4420 7369     Sensor Mucha Dis
   b7620:	6174 636e 6169 4f00 454c 3a44 5320 6e65     tancia.OLED: Sen
   b7630:	6f73 2072 754c 207a 3e2d 2520 0064 6553     sor Luz -> %d.Se
   b7640:	736e 726f 4e20 206f 754c 007a 6553 736e     nsor No Luz.Sens
   b7650:	726f 5320 2069 754c 007a 6553 736e 726f     or Si Luz.Sensor
   b7660:	4e20 206f 7552 6469 006f 6553 736e 726f      No Ruido.Sensor
   b7670:	5320 2069 7552 6469 006f 6553 736e 726f      Si Ruido.Sensor
   b7680:	4e20 206f 6f42 6f74 006e 6553 736e 726f      No Boton.Sensor
   b7690:	5320 2069 6f42 6f74 006e 6553 736e 726f      Si Boton.Sensor
   b76a0:	4e20 206f 6f52 6174 6974 6f76 5300 6e65      No Rotativo.Sen
   b76b0:	6f73 2072 6953 5220 746f 7461 7669 006f     sor Si Rotativo.
   b76c0:	6553 736e 726f 5420 6d65 2e70 7246 6f69     Sensor Temp.Frio
   b76d0:	5300 6e65 6f73 2072 6554 706d 542e 6d65     .Sensor Temp.Tem
   b76e0:	6c70 6461 006f 6553 736e 726f 5420 6d65     plado.Sensor Tem
   b76f0:	2e70 6143 6f6c 0072 6553 736e 726f 4420     p.Calor.Sensor D
   b7700:	7369 6174 636e 6169 4320 7265 6163 5300     istancia Cerca.S
   b7710:	6e65 6f73 2072 6944 7473 6e61 6963 2061     ensor Distancia 
   b7720:	654c 6f6a 0073 6553 736e 726f 6f4e 6156     Lejos.SensorNoVa
   b7730:	696c 6f64 7245 6f72 0072 4752 2d42 6556     lidoError.RGB-Ve
   b7740:	6472 2d65 6f52 6f6a 5200 4247 412d 616d     rde-Rojo.RGB-Ama
   b7750:	6972 6c6c 2d6f 6f4d 6172 6f64 5200 4247     rillo-Morado.RGB
   b7760:	412d 757a 2d6c 614e 6172 6a6e 0061 4752     -Azul-Naranja.RG
   b7770:	2d42 6c42 6e69 006b 4752 2d42 6152 6e69     B-Blink.RGB-Rain
   b7780:	6f42 0077 4752 2d42 6e4f 4f2d 6666 5a00     Bow.RGB-On-Off.Z
   b7790:	6d75 6162 6f64 2072 6e4f 4f2d 6666 5a00     umbador On-Off.Z
   b77a0:	6d75 6162 6f64 2072 6c42 6e69 006b 6341     umbador Blink.Ac
   b77b0:	7574 6461 726f 6f4e 6156 696c 6f64 7245     tuadorNoValidoEr
   b77c0:	6f72 0072 494d 4146 4552 525f 6165 2864     ror.MIFARE_Read(
   b77d0:	2029 6166 6c69 6465 203a 5000 4443 415f     ) failed: .PCD_A
   b77e0:	7475 6568 746e 6369 7461 2865 2029 6166     uthenticate() fa
   b77f0:	6c69 6465 203a 5400 6761 6e49 6f66 203a     iled: .TagInfo: 
   b7800:	7325 4300 6e6f 6365 6174 2072 6c61 7020     %s.Conectar al p
   b7810:	6575 7472 206f 3041 000a 6f43 656e 7463     uerto A0..Conect
   b7820:	7261 6120 206c 7570 7265 6f74 4120 0a32     ar al puerto A2.
   b7830:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b7840:	7472 206f 3441 000a 6f43 656e 7463 7261     rto A4..Conectar
   b7850:	6120 206c 7570 7265 6f74 4420 0a32 4300      al puerto D2..C
   b7860:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b7870:	206f 3444 000a 6f43 656e 7463 7261 6120     o D4..Conectar a
   b7880:	206c 7570 7265 6f74 4420 0a36 4500 7272     l puerto D6..Err
   b7890:	726f 203a 6f4e 6820 7961 6d20 7361 7020     or: No hay mas p
   b78a0:	6575 7472 736f 6420 7369 6f70 696e 6c62     uertos disponibl
   b78b0:	7365 0a20 4400 7365 7570 7365 6420 2065     es ..Despues de 
   b78c0:	6e75 7320 6e65 6f73 2072 6573 6520 7073     un sensor se esp
   b78d0:	7265 2061 6e75 2061 6f63 636e 6f69 3a6e     era una concion:
   b78e0:	4120 444e 7520 4f20 0052 6553 6520 7073      AND u OR.Se esp
   b78f0:	7265 6261 2061 4649 7420 6761 4e00 6d75     eraba IF tag.Num
   b7900:	7265 206f 6564 6220 6f6c 7571 7365 3e20     ero de bloques >
   b7910:	3220 7c20 207c 6553 6e20 6365 7365 7469      2 || Se necesit
   b7920:	2061 6c61 6d20 6e65 736f 7520 206e 6361     a al menos un ac
   b7930:	7574 6461 726f 7020 7261 2061 6574 6d72     tuador para term
   b7940:	6e69 7261 6520 206c 6c62 716f 6575 5500     inar el bloque.U
   b7950:	616e 6320 6e6f 6963 6963 6e6f 7320 6c6f     na concicion sol
   b7960:	206f 7570 6465 2065 7269 7320 6765 6975     o puede ir segui
   b7970:	6164 6420 2065 6e75 7320 6e65 6f73 2e72     da de un sensor.
   b7980:	4e00 6d75 7265 206f 6564 7320 6e65 6f73     .Numero de senso
   b7990:	6572 2073 6e69 7566 6963 6e65 6574 0073     res infucientes.
   b79a0:	002d                                        -.

000b79a2 <_ZL4font>:
   b79a2:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b79b2:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b79c2:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b79d2:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b79e2:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b79f2:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7a02:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7a12:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7a22:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7a32:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7a42:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7a52:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7a62:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7a72:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7a82:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7a92:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7aa2:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7ab2:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7ac2:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7ad2:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7ae2:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7af2:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7b02:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7b12:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7b22:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7b32:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7b42:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7b52:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7b62:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7b72:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7b82:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7b92:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7ba2:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7bb2:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7bc2:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7bd2:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7be2:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7bf2:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7c02:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7c12:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7c22:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7c32:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b7c42:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7c52:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7c62:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b7c72:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7c82:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7c92:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7ca2:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7cb2:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7cc2:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7cd2:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7ce2:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7cf2:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7d02:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7d12:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b7d22:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b7d32:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b7d42:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b7d52:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b7d62:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b7d72:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b7d82:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7d92:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7da2:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7db2:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7dc2:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b7dd2:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b7de2:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b7df2:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b7e02:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b7e12:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b7e22:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b7e32:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b7e42:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b7e52:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b7e62:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b7e72:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b7e82:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7e92:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b7ea4 <_ZTV12Adafruit_GFX>:
	...
   b7eb4:	4eb1 000b 6915 000b 409d 000b 48b7 000b     .N...i...@...H..
   b7ec4:	48b9 000b 48eb 000b 48c7 000b 48d9 000b     .H...H...H...H..
   b7ed4:	47f9 000b 48b7 000b 4ae3 000b 4ae1 000b     .G...H...J...J..
   b7ee4:	4903 000b 4941 000b 497b 000b 49c1 000b     .I..AI..{I...I..
   b7ef4:	49dd 000b 4a61 000b 6564 6166 6c75 2074     .I..aJ..default 
   b7f04:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b7f14:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b7f24:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b7f34:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b7f40 <_ZTVN8particle11SPISettingsE>:
	...
   b7f48:	4fd1 000b 4fbf 000b 4fc1 000b               .O...O...O..

000b7f54 <_ZL12splash2_data>:
   b7f54:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b7f64:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b7f74:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7f90:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7fa0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7fb0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7fc0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7fd0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7fe0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7ff0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8000:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8010:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8020:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8030:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8040:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8050:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8060:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8070:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b8080:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8090:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b80a0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b80b0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b80c0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b80d0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b80e8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b80f8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b8108:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b8118:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b8128:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b8134 <_ZL17sucreLogoNew_data>:
   b8134:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8144:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8154:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b8164:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b8174:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b8184:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b8194:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b81a4:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b81b4:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b81c4:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b81d4:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b81e4:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b81f4:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b8204:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b8214:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b8224:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b8234:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b8244:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8254:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b8264:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b8274:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b8284:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b8294:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b82a4:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b82b4:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b82c4:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b82d4:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b82e4:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b82f4:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b8304:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b8314:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b8324:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b8334:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b8344:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b8354:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b8364:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b8374:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b8384:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b8394:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b83a4:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b83b4:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b83c4:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b83d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b83e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b83f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8404:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8414:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8424:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8434:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b8444:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b8454:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b8464:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b8474:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b8484:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b8494:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b84a4:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b84b4:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b84c4:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b84d4:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b84e4:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b84f4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8504:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8514:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8524:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b8534 <_ZTV16Adafruit_SSD1306>:
	...
   b853c:	5025 000b 503d 000b 4eb1 000b 6915 000b     %P..=P...N...i..
   b854c:	5051 000b 48b7 000b 48b9 000b 48eb 000b     QP...H...H...H..
   b855c:	48c7 000b 48d9 000b 47f9 000b 48b7 000b     .H...H...G...H..
   b856c:	4ae3 000b 51e3 000b 577f 000b 5731 000b     .J...Q...W..1W..
   b857c:	497b 000b 49c1 000b 49dd 000b 4a61 000b     {I...I...I..aJ..

000b858c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b858c:	8000 e0c0 f8f0 fefc                         ........

000b8594 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b8594:	0100 0703 1f0f 7f3f                         ......?.

000b859c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b859c:	d5ae a880                                   ....

000b85a0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b85a0:	00d3 8d40                                   ..@.

000b85a4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b85a4:	0020 c8a1                                    ...

000b85a8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b85a8:	40db a6a4 af2e                              .@....

000b85ae <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b85ae:	02da 8f81                                   ....

000b85b2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b85b2:	12da                                         ...

000b85b5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b85b5:	02da 5581 6b6e 6f6e 6e77 6520 7272 726f     ...Unknown error
   b85c5:	5300 6375 6563 7373 002e 7245 6f72 2072     .Success..Error 
   b85d5:	6e69 6320 6d6f 756d 696e 6163 6974 6e6f     in communication
   b85e5:	002e 6f43 6c6c 7369 6973 6e6f 6420 7465     ..Collission det
   b85f5:	6365 6574 2e64 5400 6d69 6f65 7475 6920     ected..Timeout i
   b8605:	206e 6f63 6d6d 6e75 6369 7461 6f69 2e6e     n communication.
   b8615:	4100 6220 6675 6566 2072 7369 6e20 746f     .A buffer is not
   b8625:	6220 6769 6520 6f6e 6775 2e68 4900 746e      big enough..Int
   b8635:	7265 616e 206c 7265 6f72 2072 6e69 7420     ernal error in t
   b8645:	6568 6320 646f 2e65 5320 6f68 6c75 2064     he code. Should 
   b8655:	6f6e 2074 6168 7070 6e65 002e 6e49 6176     not happen..Inva
   b8665:	696c 2064 7261 7567 656d 746e 002e 6854     lid argument..Th
   b8675:	2065 5243 5f43 2041 6f64 7365 6e20 746f     e CRC_A does not
   b8685:	6d20 7461 6863 002e 2041 494d 4146 4552      match..A MIFARE
   b8695:	5020 4349 2043 6572 7073 6e6f 6564 2064      PICC responded 
   b86a5:	6977 6874 4e20 4b41 002e                     with NAK...

000b86b0 <CSWTCH.84>:
   b86b0:	85c6 000b 85cf 000b 85e7 000b 85fc 000b     ................
   b86c0:	8616 000b 8632 000b 8661 000b 8673 000b     ....2...a...s...
   b86d0:	868d 000b                                   ....

000b86d4 <_ZTVN5spark13EthernetClassE>:
	...
   b86dc:	65e7 000b 65dd 000b 65d3 000b 65c9 000b     .e...e...e...e..
   b86ec:	65bd 000b 65b1 000b 67f1 000b 67f9 000b     .e...e...g...g..
   b86fc:	65a5 000b 659d 000b 6593 000b 6589 000b     .e...e...e...e..
   b870c:	6829 000b                                   )h..

000b8710 <_ZTV7TwoWire>:
	...
   b8718:	6605 000b 664f 000b 6627 000b 6607 000b     .f..Of..'f...f..
   b8728:	662f 000b 6637 000b 663f 000b 6647 000b     /f..7f..?f..Gf..

000b8738 <_ZTV9IPAddress>:
	...
   b8740:	66c1 000b 66b1 000b 66b3 000b 7061 0070     .f...f...f..app.

000b8750 <_ZTVN5spark12NetworkClassE>:
	...
   b8758:	67b1 000b 67bb 000b 67c5 000b 67cf 000b     .g...g...g...g..
   b8768:	67d9 000b 67e5 000b 67f1 000b 67f9 000b     .g...g...g...g..
   b8778:	6801 000b 680d 000b 6815 000b 681f 000b     .h...h...h...h..
   b8788:	6829 000b                                   )h..

000b878c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b878c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b879c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b87ac:	6d69 0065                                   ime.

000b87b0 <_ZTV11USARTSerial>:
	...
   b87b8:	6d91 000b 6dfd 000b 6dd5 000b 6915 000b     .m...m...m...i..
   b87c8:	6da5 000b 6dc1 000b 6db3 000b 6dcf 000b     .m...m...m...m..
   b87d8:	6d93 000b 6d97 000b                         .m...m..

000b87e0 <_ZTV9USBSerial>:
	...
   b87e8:	6e3b 000b 6ea3 000b 6e79 000b 6915 000b     ;n...n..yn...i..
   b87f8:	6e6b 000b 6e3d 000b 6e4d 000b 6e9d 000b     kn..=n..Mn...n..
   b8808:	6e5d 000b 6e35 000b                         ]n..5n..

000b8810 <_ZTVN5spark9WiFiClassE>:
	...
   b8818:	6f9b 000b 6f91 000b 6f87 000b 6f3d 000b     .o...o...o..=o..
   b8828:	6f7b 000b 6f6f 000b 67f1 000b 67f9 000b     {o..oo...g...g..
   b8838:	6f63 000b 6f5b 000b 6f51 000b 6f47 000b     co..[o..Qo..Go..
   b8848:	6829 000b                                   )h..

000b884c <_ZSt7nothrow>:
   b884c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b885c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b886c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b887c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b888c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b889c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b88ac:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b88bc:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b88cc:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b88dc:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b88ec:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b88fc:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b890c:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b8918 <link_const_variable_data_end>:
   b8918:	000b4791 	.word	0x000b4791
   b891c:	000b6545 	.word	0x000b6545
   b8920:	000b65f1 	.word	0x000b65f1
   b8924:	000b67a1 	.word	0x000b67a1
   b8928:	000b6901 	.word	0x000b6901
   b892c:	000b6a3d 	.word	0x000b6a3d
   b8930:	000b6d59 	.word	0x000b6d59
   b8934:	000b6d7d 	.word	0x000b6d7d
   b8938:	000b6fa5 	.word	0x000b6fa5

000b893c <link_constructors_end>:
   b893c:	00000000 	.word	0x00000000
