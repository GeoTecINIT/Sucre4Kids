
/Users/marcosgarciagarcia/Documents/Sucre/target/3.2.0/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b99f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b0  2003e52c  000b99f4  0001e52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000214  2003e5dc  2003e5dc  0002e5dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b9aa4  000b9aa4  00029aa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b9acc  000b9acc  00029acc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00155d23  00000000  00000000  00029ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000181c5  00000000  00000000  0017f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004d4f1  00000000  00000000  001979b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000034f8  00000000  00000000  001e4ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b838  00000000  00000000  001e83a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00041700  00000000  00000000  001f3bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00054a74  00000000  00000000  002352d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00133aea  00000000  00000000  00289d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00009f9c  00000000  00000000  003bd838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f9ff 	bl	b8430 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fa07 	bl	b844c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e52c 	.word	0x2003e52c
   b4048:	000b99f4 	.word	0x000b99f4
   b404c:	2003e5dc 	.word	0x2003e5dc
   b4050:	2003e5dc 	.word	0x2003e5dc
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fed9 	bl	b7e14 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b99cc 	.word	0x000b99cc
   b407c:	000b99f0 	.word	0x000b99f0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 be56 	b.w	b4d30 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fea1 	bl	b4dcc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 be79 	b.w	b7d84 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f003 b887 	b.w	b71a4 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f003 b88d 	b.w	b71b4 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f002 ffe2 	bl	b706c <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6d6d 	.word	0x000b6d6d

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c0:	b40e      	push	{r1, r2, r3}
   b40c2:	b503      	push	{r0, r1, lr}
   b40c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40ce:	f003 fafc 	bl	b76ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d8:	b003      	add	sp, #12
   b40da:	4770      	bx	lr

000b40dc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b503      	push	{r0, r1, lr}
   b40e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ea:	f003 faee 	bl	b76ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40ee:	b002      	add	sp, #8
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_Z12displayPrintbbiii>:
{
   return id == 0;
}

void displayPrint(bool isSensor, bool isAnalogico, int id, int condicion, int puerto)
{
   b40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40fa:	4607      	mov	r7, r0
   b40fc:	b089      	sub	sp, #36	; 0x24
   display.clearDisplay();
   b40fe:	4853      	ldr	r0, [pc, #332]	; (b424c <_Z12displayPrintbbiii+0x154>)
{
   b4100:	460e      	mov	r6, r1
   b4102:	4615      	mov	r5, r2
   b4104:	461c      	mov	r4, r3
   display.clearDisplay();
   b4106:	f001 fcff 	bl	b5b08 <_ZN16Adafruit_SSD130612clearDisplayEv>

   if (isSensor)
   b410a:	2f00      	cmp	r7, #0
   b410c:	d077      	beq.n	b41fe <_Z12displayPrintbbiii+0x106>
   {
      switch (id)
   b410e:	3d01      	subs	r5, #1
   b4110:	2d06      	cmp	r5, #6
   b4112:	d86c      	bhi.n	b41ee <_Z12displayPrintbbiii+0xf6>
   b4114:	e8df f005 	tbb	[pc, r5]
   b4118:	504b4004 	.word	0x504b4004
   b411c:	5a55      	.short	0x5a55
   b411e:	66          	.byte	0x66
   b411f:	00          	.byte	0x00
      {
      // Distancia
      case 1:
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4120:	2c00      	cmp	r4, #0
   b4122:	d137      	bne.n	b4194 <_Z12displayPrintbbiii+0x9c>
   b4124:	494a      	ldr	r1, [pc, #296]	; (b4250 <_Z12displayPrintbbiii+0x158>)
         break;

      // Ruido
      case 3:
         // dispositivos[1] = "Sensor de Ruido";
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b4126:	484b      	ldr	r0, [pc, #300]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
            dispositivos[0] = "RGB-On-Off";
            break;
         }

      case 1:
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4128:	f003 fc31 	bl	b798e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b412c:	4949      	ldr	r1, [pc, #292]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b412e:	4668      	mov	r0, sp
   b4130:	f003 fc22 	bl	b7978 <_ZN6StringC1ERKS_>
         Serial.println("ActuadorNoValidoError");
         break;
      }
   }

   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4134:	4b48      	ldr	r3, [pc, #288]	; (b4258 <_Z12displayPrintbbiii+0x160>)
   b4136:	4949      	ldr	r1, [pc, #292]	; (b425c <_Z12displayPrintbbiii+0x164>)
   b4138:	4668      	mov	r0, sp
   b413a:	2e00      	cmp	r6, #0
   b413c:	bf08      	it	eq
   b413e:	4619      	moveq	r1, r3
   b4140:	f003 fc6d 	bl	b7a1e <_ZplRK15StringSumHelperPKc>
   b4144:	990e      	ldr	r1, [sp, #56]	; 0x38
   b4146:	4604      	mov	r4, r0
   b4148:	220a      	movs	r2, #10
   b414a:	a804      	add	r0, sp, #16
   b414c:	f003 fc31 	bl	b79b2 <_ZN6StringC1Eih>
   b4150:	a904      	add	r1, sp, #16
   b4152:	4620      	mov	r0, r4
   b4154:	f003 fc57 	bl	b7a06 <_ZplRK15StringSumHelperRK6String>
   b4158:	2140      	movs	r1, #64	; 0x40
   b415a:	6802      	ldr	r2, [r0, #0]
   b415c:	4840      	ldr	r0, [pc, #256]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   display.println(buf);
   b415e:	4c3b      	ldr	r4, [pc, #236]	; (b424c <_Z12displayPrintbbiii+0x154>)
   snprintf(buf, sizeof(buf), dispositivos[1] + (isAnalogico ? " A" : " D") + (String)puerto);
   b4160:	f003 f838 	bl	b71d4 <snprintf>
   b4164:	a804      	add	r0, sp, #16
   b4166:	f003 fb99 	bl	b789c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b416a:	4668      	mov	r0, sp
   b416c:	f003 fb96 	bl	b789c <_ZN6StringD1Ev>
   display.println(buf);
   b4170:	493b      	ldr	r1, [pc, #236]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4172:	4620      	mov	r0, r4
   b4174:	f003 fa81 	bl	b767a <_ZN5Print7printlnEPKc>
	const char * c_str() const { return buffer; }
   b4178:	4b3a      	ldr	r3, [pc, #232]	; (b4264 <_Z12displayPrintbbiii+0x16c>)

   snprintf(buf, sizeof(buf), dispositivos[0]);
   b417a:	4839      	ldr	r0, [pc, #228]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b417c:	681a      	ldr	r2, [r3, #0]
   b417e:	2140      	movs	r1, #64	; 0x40
   b4180:	f003 f828 	bl	b71d4 <snprintf>
   display.println(buf);
   b4184:	4936      	ldr	r1, [pc, #216]	; (b4260 <_Z12displayPrintbbiii+0x168>)
   b4186:	4620      	mov	r0, r4
   b4188:	f003 fa77 	bl	b767a <_ZN5Print7printlnEPKc>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b418c:	2300      	movs	r3, #0
   b418e:	6123      	str	r3, [r4, #16]

   display.setCursor(0, 0);
}
   b4190:	b009      	add	sp, #36	; 0x24
   b4192:	bdf0      	pop	{r4, r5, r6, r7, pc}
         condicion == 0 ? dispositivos[1] = "Sensor Poca Distancia" : dispositivos[1] = "Sensor Mucha Distancia";
   b4194:	4934      	ldr	r1, [pc, #208]	; (b4268 <_Z12displayPrintbbiii+0x170>)
   b4196:	e7c6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         Serial.printlnf("OLED: Sensor Luz -> %d", condicion);
   b4198:	f003 fd22 	bl	b7be0 <_Z16_fetch_usbserialv>
   b419c:	4933      	ldr	r1, [pc, #204]	; (b426c <_Z12displayPrintbbiii+0x174>)
   b419e:	4622      	mov	r2, r4
   b41a0:	f7ff ff9c 	bl	b40dc <_ZN5Print8printlnfEPKcz>
         condicion == 0 ? dispositivos[1] = "Sensor No Luz" : dispositivos[1] = "Sensor Si Luz";
   b41a4:	b90c      	cbnz	r4, b41aa <_Z12displayPrintbbiii+0xb2>
   b41a6:	4932      	ldr	r1, [pc, #200]	; (b4270 <_Z12displayPrintbbiii+0x178>)
   b41a8:	e7bd      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41aa:	4932      	ldr	r1, [pc, #200]	; (b4274 <_Z12displayPrintbbiii+0x17c>)
   b41ac:	e7bb      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Ruido" : dispositivos[1] = "Sensor Si Ruido";
   b41ae:	b90c      	cbnz	r4, b41b4 <_Z12displayPrintbbiii+0xbc>
   b41b0:	4931      	ldr	r1, [pc, #196]	; (b4278 <_Z12displayPrintbbiii+0x180>)
   b41b2:	e7b8      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41b4:	4931      	ldr	r1, [pc, #196]	; (b427c <_Z12displayPrintbbiii+0x184>)
   b41b6:	e7b6      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Boton" : dispositivos[1] = "Sensor Si Boton";
   b41b8:	b90c      	cbnz	r4, b41be <_Z12displayPrintbbiii+0xc6>
   b41ba:	4931      	ldr	r1, [pc, #196]	; (b4280 <_Z12displayPrintbbiii+0x188>)
   b41bc:	e7b3      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41be:	4931      	ldr	r1, [pc, #196]	; (b4284 <_Z12displayPrintbbiii+0x18c>)
   b41c0:	e7b1      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor No Rotativo" : dispositivos[1] = "Sensor Si Rotativo";
   b41c2:	b90c      	cbnz	r4, b41c8 <_Z12displayPrintbbiii+0xd0>
   b41c4:	4930      	ldr	r1, [pc, #192]	; (b4288 <_Z12displayPrintbbiii+0x190>)
   b41c6:	e7ae      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
   b41c8:	4930      	ldr	r1, [pc, #192]	; (b428c <_Z12displayPrintbbiii+0x194>)
   b41ca:	e7ac      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         switch (condicion)
   b41cc:	2c01      	cmp	r4, #1
   b41ce:	d005      	beq.n	b41dc <_Z12displayPrintbbiii+0xe4>
   b41d0:	2c02      	cmp	r4, #2
   b41d2:	d005      	beq.n	b41e0 <_Z12displayPrintbbiii+0xe8>
   b41d4:	2c00      	cmp	r4, #0
   b41d6:	d1a9      	bne.n	b412c <_Z12displayPrintbbiii+0x34>
            dispositivos[1] = "Sensor Temp.Frio";
   b41d8:	492d      	ldr	r1, [pc, #180]	; (b4290 <_Z12displayPrintbbiii+0x198>)
   b41da:	e7a4      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Templado";
   b41dc:	492d      	ldr	r1, [pc, #180]	; (b4294 <_Z12displayPrintbbiii+0x19c>)
   b41de:	e7a2      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
            dispositivos[1] = "Sensor Temp.Calor";
   b41e0:	492d      	ldr	r1, [pc, #180]	; (b4298 <_Z12displayPrintbbiii+0x1a0>)
   b41e2:	e7a0      	b.n	b4126 <_Z12displayPrintbbiii+0x2e>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41e4:	b94c      	cbnz	r4, b41fa <_Z12displayPrintbbiii+0x102>
   b41e6:	492d      	ldr	r1, [pc, #180]	; (b429c <_Z12displayPrintbbiii+0x1a4>)
   b41e8:	481a      	ldr	r0, [pc, #104]	; (b4254 <_Z12displayPrintbbiii+0x15c>)
   b41ea:	f003 fbd0 	bl	b798e <_ZN6StringaSEPKc>
         Serial.println("SensorNoValidoError");
   b41ee:	f003 fcf7 	bl	b7be0 <_Z16_fetch_usbserialv>
   b41f2:	492b      	ldr	r1, [pc, #172]	; (b42a0 <_Z12displayPrintbbiii+0x1a8>)
         Serial.println("ActuadorNoValidoError");
   b41f4:	f003 fa41 	bl	b767a <_ZN5Print7printlnEPKc>
         break;
   b41f8:	e798      	b.n	b412c <_Z12displayPrintbbiii+0x34>
         condicion == 0 ? dispositivos[1] = "Sensor Distancia Cerca" : dispositivos[1] = "Sensor Distancia Lejos";
   b41fa:	492a      	ldr	r1, [pc, #168]	; (b42a4 <_Z12displayPrintbbiii+0x1ac>)
   b41fc:	e7f4      	b.n	b41e8 <_Z12displayPrintbbiii+0xf0>
      switch (id)
   b41fe:	b12d      	cbz	r5, b420c <_Z12displayPrintbbiii+0x114>
   b4200:	2d01      	cmp	r5, #1
   b4202:	d01f      	beq.n	b4244 <_Z12displayPrintbbiii+0x14c>
         Serial.println("ActuadorNoValidoError");
   b4204:	f003 fcec 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4208:	4927      	ldr	r1, [pc, #156]	; (b42a8 <_Z12displayPrintbbiii+0x1b0>)
   b420a:	e7f3      	b.n	b41f4 <_Z12displayPrintbbiii+0xfc>
         switch (condicion)
   b420c:	2c05      	cmp	r4, #5
   b420e:	d80f      	bhi.n	b4230 <_Z12displayPrintbbiii+0x138>
   b4210:	e8df f004 	tbb	[pc, r4]
   b4214:	12100a03 	.word	0x12100a03
   b4218:	1614      	.short	0x1614
            dispositivos[0] = "RGB-Verde-Rojo";
   b421a:	4924      	ldr	r1, [pc, #144]	; (b42ac <_Z12displayPrintbbiii+0x1b4>)
   b421c:	4811      	ldr	r0, [pc, #68]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b421e:	f003 fbb6 	bl	b798e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4222:	4923      	ldr	r1, [pc, #140]	; (b42b0 <_Z12displayPrintbbiii+0x1b8>)
   b4224:	480f      	ldr	r0, [pc, #60]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b4226:	e77f      	b.n	b4128 <_Z12displayPrintbbiii+0x30>
            dispositivos[0] = "RGB-Amarillo-Morado";
   b4228:	4922      	ldr	r1, [pc, #136]	; (b42b4 <_Z12displayPrintbbiii+0x1bc>)
            dispositivos[0] = "RGB-Azul-Naranja";
   b422a:	480e      	ldr	r0, [pc, #56]	; (b4264 <_Z12displayPrintbbiii+0x16c>)
   b422c:	f003 fbaf 	bl	b798e <_ZN6StringaSEPKc>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4230:	4921      	ldr	r1, [pc, #132]	; (b42b8 <_Z12displayPrintbbiii+0x1c0>)
   b4232:	e7f7      	b.n	b4224 <_Z12displayPrintbbiii+0x12c>
            dispositivos[0] = "RGB-Azul-Naranja";
   b4234:	4921      	ldr	r1, [pc, #132]	; (b42bc <_Z12displayPrintbbiii+0x1c4>)
   b4236:	e7f8      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-Blink";
   b4238:	4921      	ldr	r1, [pc, #132]	; (b42c0 <_Z12displayPrintbbiii+0x1c8>)
   b423a:	e7f6      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-RainBow";
   b423c:	4921      	ldr	r1, [pc, #132]	; (b42c4 <_Z12displayPrintbbiii+0x1cc>)
   b423e:	e7f4      	b.n	b422a <_Z12displayPrintbbiii+0x132>
            dispositivos[0] = "RGB-On-Off";
   b4240:	4921      	ldr	r1, [pc, #132]	; (b42c8 <_Z12displayPrintbbiii+0x1d0>)
   b4242:	e7f2      	b.n	b422a <_Z12displayPrintbbiii+0x132>
         condicion == 0 ? dispositivos[0] = "Zumbador On-Off" : dispositivos[0] = "Zumbador Blink";
   b4244:	2c00      	cmp	r4, #0
   b4246:	d0ec      	beq.n	b4222 <_Z12displayPrintbbiii+0x12a>
   b4248:	e7f2      	b.n	b4230 <_Z12displayPrintbbiii+0x138>
   b424a:	bf00      	nop
   b424c:	2003e634 	.word	0x2003e634
   b4250:	000b8696 	.word	0x000b8696
   b4254:	2003e694 	.word	0x2003e694
   b4258:	000b8693 	.word	0x000b8693
   b425c:	000b8690 	.word	0x000b8690
   b4260:	2003e5f4 	.word	0x2003e5f4
   b4264:	2003e684 	.word	0x2003e684
   b4268:	000b86ac 	.word	0x000b86ac
   b426c:	000b86c3 	.word	0x000b86c3
   b4270:	000b86da 	.word	0x000b86da
   b4274:	000b86e8 	.word	0x000b86e8
   b4278:	000b86f6 	.word	0x000b86f6
   b427c:	000b8706 	.word	0x000b8706
   b4280:	000b8716 	.word	0x000b8716
   b4284:	000b8726 	.word	0x000b8726
   b4288:	000b8736 	.word	0x000b8736
   b428c:	000b8749 	.word	0x000b8749
   b4290:	000b875c 	.word	0x000b875c
   b4294:	000b876d 	.word	0x000b876d
   b4298:	000b8782 	.word	0x000b8782
   b429c:	000b8794 	.word	0x000b8794
   b42a0:	000b87c2 	.word	0x000b87c2
   b42a4:	000b87ab 	.word	0x000b87ab
   b42a8:	000b884a 	.word	0x000b884a
   b42ac:	000b87d6 	.word	0x000b87d6
   b42b0:	000b882b 	.word	0x000b882b
   b42b4:	000b87e5 	.word	0x000b87e5
   b42b8:	000b883b 	.word	0x000b883b
   b42bc:	000b87f9 	.word	0x000b87f9
   b42c0:	000b880a 	.word	0x000b880a
   b42c4:	000b8814 	.word	0x000b8814
   b42c8:	000b8820 	.word	0x000b8820

000b42cc <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b42cc:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b42ce:	7803      	ldrb	r3, [r0, #0]
   b42d0:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b42d2:	bf0c      	ite	eq
   b42d4:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b42d6:	2200      	movne	r2, #0
   int i = 0;
   b42d8:	4613      	mov	r3, r2
   b42da:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b42dc:	240a      	movs	r4, #10
      i++;
   b42de:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42e0:	f813 1b01 	ldrb.w	r1, [r3], #1
   b42e4:	3930      	subs	r1, #48	; 0x30
   b42e6:	b2cd      	uxtb	r5, r1
   b42e8:	2d09      	cmp	r5, #9
   b42ea:	d802      	bhi.n	b42f2 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b42ec:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b42f0:	e7f6      	b.n	b42e0 <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
   b42f2:	b102      	cbz	r2, b42f6 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b42f4:	4240      	negs	r0, r0
   return num;
}
   b42f6:	bd30      	pop	{r4, r5, pc}

000b42f8 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b42f8:	b570      	push	{r4, r5, r6, lr}
   b42fa:	4614      	mov	r4, r2
   b42fc:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b42fe:	f004 f8fb 	bl	b84f8 <strtok>
   int j = 0;
   b4302:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4304:	b140      	cbz	r0, b4318 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4306:	f7ff ffe1 	bl	b42cc <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b430a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b430c:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b4310:	2000      	movs	r0, #0
   b4312:	f004 f8f1 	bl	b84f8 <strtok>
   while (ptr != NULL)
   b4316:	e7f5      	b.n	b4304 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	b913      	cbnz	r3, b4322 <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
   b431c:	4b01      	ldr	r3, [pc, #4]	; (b4324 <_Z5splitPcS_Pi+0x2c>)
   b431e:	2201      	movs	r2, #1
   b4320:	701a      	strb	r2, [r3, #0]
   }
}
   b4322:	bd70      	pop	{r4, r5, r6, pc}
   b4324:	2003e6a4 	.word	0x2003e6a4

000b4328 <_Z17readDataFromBlockhPhh>:
      Serial.println(mfrc522.GetStatusCodeName(status));
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b4328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b432a:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b432e:	f10d 0307 	add.w	r3, sp, #7
   b4332:	460a      	mov	r2, r1
   b4334:	4601      	mov	r1, r0
   b4336:	480d      	ldr	r0, [pc, #52]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4338:	4d0d      	ldr	r5, [pc, #52]	; (b4370 <_Z17readDataFromBlockhPhh+0x48>)
   b433a:	f002 fa77 	bl	b682c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b433e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b4340:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4342:	d010      	beq.n	b4366 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b4344:	f003 fc4c 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4348:	490a      	ldr	r1, [pc, #40]	; (b4374 <_Z17readDataFromBlockhPhh+0x4c>)
   b434a:	f003 f983 	bl	b7654 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b434e:	f003 fc47 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4352:	7829      	ldrb	r1, [r5, #0]
   b4354:	4604      	mov	r4, r0
   b4356:	4805      	ldr	r0, [pc, #20]	; (b436c <_Z17readDataFromBlockhPhh+0x44>)
   b4358:	f001 ffd8 	bl	b630c <_ZN7MFRC52217GetStatusCodeNameEh>
   b435c:	4601      	mov	r1, r0
   b435e:	4620      	mov	r0, r4
   b4360:	f003 f98b 	bl	b767a <_ZN5Print7printlnEPKc>
   b4364:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b4366:	b003      	add	sp, #12
   b4368:	bd30      	pop	{r4, r5, pc}
   b436a:	bf00      	nop
   b436c:	2003e6ab 	.word	0x2003e6ab
   b4370:	2003e6c3 	.word	0x2003e6c3
   b4374:	000b8860 	.word	0x000b8860

000b4378 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b4378:	b5f0      	push	{r4, r5, r6, r7, lr}
   b437a:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b437c:	4d1e      	ldr	r5, [pc, #120]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b437e:	4a1f      	ldr	r2, [pc, #124]	; (b43fc <_Z8getTagIDPi+0x84>)
   b4380:	9500      	str	r5, [sp, #0]
   b4382:	4b1f      	ldr	r3, [pc, #124]	; (b4400 <_Z8getTagIDPi+0x88>)
   b4384:	7812      	ldrb	r2, [r2, #0]
   b4386:	4f1f      	ldr	r7, [pc, #124]	; (b4404 <_Z8getTagIDPi+0x8c>)
{
   b4388:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b438a:	2160      	movs	r1, #96	; 0x60
   b438c:	4628      	mov	r0, r5
   b438e:	f002 fa6e 	bl	b686e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b4392:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4394:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b4396:	d00f      	beq.n	b43b8 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4398:	f003 fc22 	bl	b7be0 <_Z16_fetch_usbserialv>
   b439c:	491a      	ldr	r1, [pc, #104]	; (b4408 <_Z8getTagIDPi+0x90>)
   b439e:	f003 f959 	bl	b7654 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b43a2:	f003 fc1d 	bl	b7be0 <_Z16_fetch_usbserialv>
   b43a6:	7839      	ldrb	r1, [r7, #0]
   b43a8:	4604      	mov	r4, r0
   b43aa:	4628      	mov	r0, r5
   b43ac:	f001 ffae 	bl	b630c <_ZN7MFRC52217GetStatusCodeNameEh>
   b43b0:	4601      	mov	r1, r0
   b43b2:	4620      	mov	r0, r4
   b43b4:	f003 f961 	bl	b767a <_ZN5Print7printlnEPKc>
   // writeDataToBLock(blockAddr);

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b43b8:	4b14      	ldr	r3, [pc, #80]	; (b440c <_Z8getTagIDPi+0x94>)
   b43ba:	2212      	movs	r2, #18
   b43bc:	7818      	ldrb	r0, [r3, #0]
   b43be:	a907      	add	r1, sp, #28
   b43c0:	f7ff ffb2 	bl	b4328 <_Z17readDataFromBlockhPhh>
   b43c4:	b1b0      	cbz	r0, b43f4 <_Z8getTagIDPi+0x7c>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b43c6:	ac07      	add	r4, sp, #28
   b43c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b43ca:	ad03      	add	r5, sp, #12
   b43cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b43ce:	6823      	ldr	r3, [r4, #0]
   b43d0:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b43d2:	f003 fc05 	bl	b7be0 <_Z16_fetch_usbserialv>
   b43d6:	490e      	ldr	r1, [pc, #56]	; (b4410 <_Z8getTagIDPi+0x98>)
   b43d8:	aa03      	add	r2, sp, #12
   b43da:	f7ff fe7f 	bl	b40dc <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b43de:	490d      	ldr	r1, [pc, #52]	; (b4414 <_Z8getTagIDPi+0x9c>)
   b43e0:	4632      	mov	r2, r6
   b43e2:	a803      	add	r0, sp, #12
   b43e4:	f7ff ff88 	bl	b42f8 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b43e8:	4803      	ldr	r0, [pc, #12]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43ea:	f002 f9fa 	bl	b67e2 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b43ee:	4802      	ldr	r0, [pc, #8]	; (b43f8 <_Z8getTagIDPi+0x80>)
   b43f0:	f002 f857 	bl	b64a2 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b43f4:	b00d      	add	sp, #52	; 0x34
   b43f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43f8:	2003e6ab 	.word	0x2003e6ab
   b43fc:	2003e56c 	.word	0x2003e56c
   b4400:	2003e6a5 	.word	0x2003e6a5
   b4404:	2003e6c3 	.word	0x2003e6c3
   b4408:	000b8877 	.word	0x000b8877
   b440c:	2003e52c 	.word	0x2003e52c
   b4410:	000b8893 	.word	0x000b8893
   b4414:	2003e538 	.word	0x2003e538

000b4418 <_Z13asignarPuertoi>:

int asignarPuerto(int id)
{
   b4418:	b510      	push	{r4, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
   b441a:	b940      	cbnz	r0, b442e <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b441c:	4b26      	ldr	r3, [pc, #152]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b441e:	681c      	ldr	r4, [r3, #0]
   }

   switch (option)
   b4420:	2c05      	cmp	r4, #5
   b4422:	d840      	bhi.n	b44a6 <_Z13asignarPuertoi+0x8e>
   b4424:	e8df f004 	tbb	[pc, r4]
   b4428:	261a0f05 	.word	0x261a0f05
   b442c:	342d      	.short	0x342d
      option = puertoDigital;
   b442e:	4b23      	ldr	r3, [pc, #140]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4430:	e7f5      	b.n	b441e <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b4432:	f003 fbd5 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4436:	4922      	ldr	r1, [pc, #136]	; (b44c0 <_Z13asignarPuertoi+0xa8>)
   b4438:	f003 f90c 	bl	b7654 <_ZN5Print5printEPKc>

      puertoAnalogico++;
   b443c:	4a1e      	ldr	r2, [pc, #120]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      break;

   case 4:
      Serial.print("Conectar al puerto D4\n");

      puertoDigital++;
   b443e:	6813      	ldr	r3, [r2, #0]
   b4440:	3301      	adds	r3, #1
   b4442:	6013      	str	r3, [r2, #0]
      // Disp[0].pin = D4;
      // Disp[0].pin2 = D5;
      // statements executed if the expression equals the p_D4
      // value of this constant_expression               p_D5
      return 4;
   b4444:	e014      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A2\n");
   b4446:	f003 fbcb 	bl	b7be0 <_Z16_fetch_usbserialv>
   b444a:	491e      	ldr	r1, [pc, #120]	; (b44c4 <_Z13asignarPuertoi+0xac>)
   b444c:	f003 f902 	bl	b7654 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b4450:	4a19      	ldr	r2, [pc, #100]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
      puertoDigital++;
   b4452:	6813      	ldr	r3, [r2, #0]
   b4454:	3301      	adds	r3, #1
   b4456:	6013      	str	r3, [r2, #0]
      return 2;
   b4458:	2402      	movs	r4, #2
   b445a:	e009      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Conectar al puerto A4\n");
   b445c:	f003 fbc0 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4460:	4919      	ldr	r1, [pc, #100]	; (b44c8 <_Z13asignarPuertoi+0xb0>)
   b4462:	f003 f8f7 	bl	b7654 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b4466:	4b14      	ldr	r3, [pc, #80]	; (b44b8 <_Z13asignarPuertoi+0xa0>)
   b4468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b446c:	601a      	str	r2, [r3, #0]
      return 4;
   b446e:	2404      	movs	r4, #4
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
   b4470:	4620      	mov	r0, r4
   b4472:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b4474:	f003 fbb4 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4478:	4914      	ldr	r1, [pc, #80]	; (b44cc <_Z13asignarPuertoi+0xb4>)
   b447a:	f003 f8eb 	bl	b7654 <_ZN5Print5printEPKc>
      puertoDigital++;
   b447e:	4a0f      	ldr	r2, [pc, #60]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b4480:	e7e7      	b.n	b4452 <_Z13asignarPuertoi+0x3a>
      Serial.print("Conectar al puerto D4\n");
   b4482:	f003 fbad 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4486:	4912      	ldr	r1, [pc, #72]	; (b44d0 <_Z13asignarPuertoi+0xb8>)
   b4488:	f003 f8e4 	bl	b7654 <_ZN5Print5printEPKc>
      puertoDigital++;
   b448c:	4a0b      	ldr	r2, [pc, #44]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b448e:	e7d6      	b.n	b443e <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D6\n");
   b4490:	f003 fba6 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4494:	490f      	ldr	r1, [pc, #60]	; (b44d4 <_Z13asignarPuertoi+0xbc>)
   b4496:	f003 f8dd 	bl	b7654 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b449a:	4b08      	ldr	r3, [pc, #32]	; (b44bc <_Z13asignarPuertoi+0xa4>)
   b449c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b44a0:	601a      	str	r2, [r3, #0]
      return 6;
   b44a2:	2406      	movs	r4, #6
   b44a4:	e7e4      	b.n	b4470 <_Z13asignarPuertoi+0x58>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b44a6:	f003 fb9b 	bl	b7be0 <_Z16_fetch_usbserialv>
   b44aa:	490b      	ldr	r1, [pc, #44]	; (b44d8 <_Z13asignarPuertoi+0xc0>)
   b44ac:	f003 f8d2 	bl	b7654 <_ZN5Print5printEPKc>
      return -1;
   b44b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b44b4:	e7dc      	b.n	b4470 <_Z13asignarPuertoi+0x58>
   b44b6:	bf00      	nop
   b44b8:	2003e6bc 	.word	0x2003e6bc
   b44bc:	2003e548 	.word	0x2003e548
   b44c0:	000b889f 	.word	0x000b889f
   b44c4:	000b88b6 	.word	0x000b88b6
   b44c8:	000b88cd 	.word	0x000b88cd
   b44cc:	000b88e4 	.word	0x000b88e4
   b44d0:	000b88fb 	.word	0x000b88fb
   b44d4:	000b8912 	.word	0x000b8912
   b44d8:	000b8929 	.word	0x000b8929

000b44dc <_Z11numSensoresPb>:
   int contador = 0;
   int j = 0;

   for (j; j < 2; j++)
   {
      if (array[j])
   b44dc:	7842      	ldrb	r2, [r0, #1]
   int contador = 0;
   b44de:	7803      	ldrb	r3, [r0, #0]
      if (array[j])
   b44e0:	b102      	cbz	r2, b44e4 <_Z11numSensoresPb+0x8>
         contador++;
   b44e2:	3301      	adds	r3, #1
   }

   return contador;
}
   b44e4:	4618      	mov	r0, r3
   b44e6:	4770      	bx	lr

000b44e8 <_Z17incrementarSensorPb>:

// Al tratarse de un vector booleano, incrementar la cantidad supone poner a true el siguiente false.
void incrementarSensor(bool array[])
{
   int i = 0;
   while (array[i])
   b44e8:	4603      	mov	r3, r0
   b44ea:	3001      	adds	r0, #1
   b44ec:	781a      	ldrb	r2, [r3, #0]
   b44ee:	2a00      	cmp	r2, #0
   b44f0:	d1fa      	bne.n	b44e8 <_Z17incrementarSensorPb>
      i++;

   array[i] = true;
   b44f2:	2201      	movs	r2, #1
   b44f4:	701a      	strb	r2, [r3, #0]
}
   b44f6:	4770      	bx	lr

000b44f8 <_Z9ledApagar12ChainableLED>:


void ledApagar(ChainableLED leds)
{
   b44f8:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 0, 0);
   b44fa:	2300      	movs	r3, #0
   b44fc:	9300      	str	r3, [sp, #0]
   b44fe:	461a      	mov	r2, r3
   b4500:	4619      	mov	r1, r3
   b4502:	f001 fe89 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4506:	b003      	add	sp, #12
   b4508:	f85d fb04 	ldr.w	pc, [sp], #4

000b450c <_Z7ledRojo12ChainableLED>:
void ledRojo(ChainableLED leds)
{
   b450c:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 0, 0);
   b450e:	2300      	movs	r3, #0
   b4510:	9300      	str	r3, [sp, #0]
   b4512:	22ff      	movs	r2, #255	; 0xff
   b4514:	4619      	mov	r1, r3
   b4516:	f001 fe7f 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b451a:	b003      	add	sp, #12
   b451c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4520 <_Z8ledVerde12ChainableLED>:
void ledVerde(ChainableLED leds)
{
   b4520:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 255, 10);
   b4522:	230a      	movs	r3, #10
   b4524:	2200      	movs	r2, #0
   b4526:	9300      	str	r3, [sp, #0]
   b4528:	4611      	mov	r1, r2
   b452a:	23ff      	movs	r3, #255	; 0xff
   b452c:	f001 fe74 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4530:	b003      	add	sp, #12
   b4532:	f85d fb04 	ldr.w	pc, [sp], #4

000b4536 <_Z7ledAzul12ChainableLED>:
void ledAzul(ChainableLED leds)
{
   b4536:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 0, 0, 255);
   b4538:	23ff      	movs	r3, #255	; 0xff
   b453a:	9300      	str	r3, [sp, #0]
   b453c:	2300      	movs	r3, #0
   b453e:	461a      	mov	r2, r3
   b4540:	4619      	mov	r1, r3
   b4542:	f001 fe69 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4546:	b003      	add	sp, #12
   b4548:	f85d fb04 	ldr.w	pc, [sp], #4

000b454c <_Z11ledAmarillo12ChainableLED>:
void ledAmarillo(ChainableLED leds)
{
   b454c:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 233, 0);
   b454e:	2100      	movs	r1, #0
   b4550:	9100      	str	r1, [sp, #0]
   b4552:	23e9      	movs	r3, #233	; 0xe9
   b4554:	22ff      	movs	r2, #255	; 0xff
   b4556:	f001 fe5f 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b455a:	b003      	add	sp, #12
   b455c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4560 <_Z9ledMorado12ChainableLED>:
void ledMorado(ChainableLED leds)
{
   b4560:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 108, 70, 117);
   b4562:	2375      	movs	r3, #117	; 0x75
   b4564:	9300      	str	r3, [sp, #0]
   b4566:	226c      	movs	r2, #108	; 0x6c
   b4568:	2346      	movs	r3, #70	; 0x46
   b456a:	2100      	movs	r1, #0
   b456c:	f001 fe54 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4570:	b003      	add	sp, #12
   b4572:	f85d fb04 	ldr.w	pc, [sp], #4

000b4576 <_Z10ledNaranja12ChainableLED>:
void ledNaranja(ChainableLED leds)
{
   b4576:	b507      	push	{r0, r1, r2, lr}
    leds.setColorRGB(0, 255, 128, 0);
   b4578:	2100      	movs	r1, #0
   b457a:	9100      	str	r1, [sp, #0]
   b457c:	2380      	movs	r3, #128	; 0x80
   b457e:	22ff      	movs	r2, #255	; 0xff
   b4580:	f001 fe4a 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b4584:	b003      	add	sp, #12
   b4586:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b458c <_Z9ledBlanco12ChainableLED>:
void ledBlanco(ChainableLED leds)
{
   b458c:	b513      	push	{r0, r1, r4, lr}
   b458e:	4604      	mov	r4, r0
    Serial.println("Entra ledBlanco");
   b4590:	f003 fb26 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4594:	4908      	ldr	r1, [pc, #32]	; (b45b8 <_Z9ledBlanco12ChainableLED+0x2c>)
   b4596:	f003 f870 	bl	b767a <_ZN5Print7printlnEPKc>
    leds.setColorRGB(0, 255, 255, 255);
   b459a:	23ff      	movs	r3, #255	; 0xff
   b459c:	9300      	str	r3, [sp, #0]
   b459e:	461a      	mov	r2, r3
   b45a0:	2100      	movs	r1, #0
   b45a2:	4620      	mov	r0, r4
   b45a4:	f001 fe38 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
    Serial.println("Termina ledBlanco");
   b45a8:	f003 fb1a 	bl	b7be0 <_Z16_fetch_usbserialv>
   b45ac:	4903      	ldr	r1, [pc, #12]	; (b45bc <_Z9ledBlanco12ChainableLED+0x30>)
}
   b45ae:	b002      	add	sp, #8
   b45b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Termina ledBlanco");
   b45b4:	f003 b861 	b.w	b767a <_ZN5Print7printlnEPKc>
   b45b8:	000b8951 	.word	0x000b8951
   b45bc:	000b8961 	.word	0x000b8961

000b45c0 <_Z14ledAzulNaranjabi>:

void ledAzulNaranja(boolean estado, int puerto)
{
   b45c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b45c2:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b45c4:	466d      	mov	r5, sp
   b45c6:	b2c9      	uxtb	r1, r1
   b45c8:	2305      	movs	r3, #5
   b45ca:	b2d2      	uxtb	r2, r2
{
   b45cc:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b45ce:	4628      	mov	r0, r5
   b45d0:	f001 fdb8 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b45d4:	4628      	mov	r0, r5
   b45d6:	f001 fe67 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledAzul(leds);
   b45da:	e895 0003 	ldmia.w	r5, {r0, r1}
   b45de:	ac02      	add	r4, sp, #8
   b45e0:	e884 0003 	stmia.w	r4, {r0, r1}
   b45e4:	4620      	mov	r0, r4
    if (estado)
   b45e6:	b14e      	cbz	r6, b45fc <_Z14ledAzulNaranjabi+0x3c>
        ledAzul(leds);
   b45e8:	f7ff ffa5 	bl	b4536 <_Z7ledAzul12ChainableLED>
    }
    else
    {
        ledNaranja(leds);
   b45ec:	4620      	mov	r0, r4
   b45ee:	f001 fdb6 	bl	b615e <_ZN12ChainableLEDD1Ev>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b45f2:	4628      	mov	r0, r5
   b45f4:	f001 fdb3 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
}
   b45f8:	b004      	add	sp, #16
   b45fa:	bd70      	pop	{r4, r5, r6, pc}
        ledNaranja(leds);
   b45fc:	f7ff ffbb 	bl	b4576 <_Z10ledNaranja12ChainableLED>
   b4600:	e7f4      	b.n	b45ec <_Z14ledAzulNaranjabi+0x2c>

000b4602 <_Z17ledMoradoAmarillobi>:

void ledMoradoAmarillo(boolean estado, int puerto)
{
   b4602:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b4604:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4606:	466d      	mov	r5, sp
   b4608:	b2c9      	uxtb	r1, r1
   b460a:	2305      	movs	r3, #5
   b460c:	b2d2      	uxtb	r2, r2
{
   b460e:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4610:	4628      	mov	r0, r5
   b4612:	f001 fd97 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b4616:	4628      	mov	r0, r5
   b4618:	f001 fe46 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledMorado(leds);
   b461c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4620:	ac02      	add	r4, sp, #8
   b4622:	e884 0003 	stmia.w	r4, {r0, r1}
   b4626:	4620      	mov	r0, r4
    if (estado)
   b4628:	b14e      	cbz	r6, b463e <_Z17ledMoradoAmarillobi+0x3c>
        ledMorado(leds);
   b462a:	f7ff ff99 	bl	b4560 <_Z9ledMorado12ChainableLED>
    }
    else
    {
        ledAmarillo(leds);
   b462e:	4620      	mov	r0, r4
   b4630:	f001 fd95 	bl	b615e <_ZN12ChainableLEDD1Ev>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4634:	4628      	mov	r0, r5
   b4636:	f001 fd92 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
}
   b463a:	b004      	add	sp, #16
   b463c:	bd70      	pop	{r4, r5, r6, pc}
        ledAmarillo(leds);
   b463e:	f7ff ff85 	bl	b454c <_Z11ledAmarillo12ChainableLED>
   b4642:	e7f4      	b.n	b462e <_Z17ledMoradoAmarillobi+0x2c>

000b4644 <_Z12ledVerdeRojobi>:

void ledVerdeRojo(boolean estado, int puerto)
{
   b4644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b4646:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4648:	466d      	mov	r5, sp
   b464a:	b2c9      	uxtb	r1, r1
   b464c:	2305      	movs	r3, #5
   b464e:	b2d2      	uxtb	r2, r2
{
   b4650:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4652:	4628      	mov	r0, r5
   b4654:	f001 fd76 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b4658:	4628      	mov	r0, r5
   b465a:	f001 fe25 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledRojo(leds);
   b465e:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4662:	ac02      	add	r4, sp, #8
   b4664:	e884 0003 	stmia.w	r4, {r0, r1}
   b4668:	4620      	mov	r0, r4
    if (estado)
   b466a:	b14e      	cbz	r6, b4680 <_Z12ledVerdeRojobi+0x3c>
        ledRojo(leds);
   b466c:	f7ff ff4e 	bl	b450c <_Z7ledRojo12ChainableLED>
    }
    else
    {
        ledVerde(leds);
   b4670:	4620      	mov	r0, r4
   b4672:	f001 fd74 	bl	b615e <_ZN12ChainableLEDD1Ev>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4676:	4628      	mov	r0, r5
   b4678:	f001 fd71 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
}
   b467c:	b004      	add	sp, #16
   b467e:	bd70      	pop	{r4, r5, r6, pc}
        ledVerde(leds);
   b4680:	f7ff ff4e 	bl	b4520 <_Z8ledVerde12ChainableLED>
   b4684:	e7f4      	b.n	b4670 <_Z12ledVerdeRojobi+0x2c>

000b4686 <_Z8ledBlinkbi>:

void ledBlink(boolean estado, int puerto)
{
   b4686:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b4688:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b468a:	466d      	mov	r5, sp
   b468c:	b2c9      	uxtb	r1, r1
   b468e:	2305      	movs	r3, #5
   b4690:	b2d2      	uxtb	r2, r2
{
   b4692:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4694:	4628      	mov	r0, r5
   b4696:	f001 fd55 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b469a:	4628      	mov	r0, r5
   b469c:	f001 fe04 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledBlanco(leds);
   b46a0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b46a4:	ac02      	add	r4, sp, #8
   b46a6:	e884 0003 	stmia.w	r4, {r0, r1}
   b46aa:	4620      	mov	r0, r4
    if (estado)
   b46ac:	b1d6      	cbz	r6, b46e4 <_Z8ledBlinkbi+0x5e>
        ledBlanco(leds);
   b46ae:	f7ff ff6d 	bl	b458c <_Z9ledBlanco12ChainableLED>
   b46b2:	4620      	mov	r0, r4
   b46b4:	f001 fd53 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(400);
   b46b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b46bc:	f002 fdb2 	bl	b7224 <delay>
        ledApagar(leds);
   b46c0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b46c4:	e884 0003 	stmia.w	r4, {r0, r1}
   b46c8:	4620      	mov	r0, r4
   b46ca:	f7ff ff15 	bl	b44f8 <_Z9ledApagar12ChainableLED>
   b46ce:	4620      	mov	r0, r4
   b46d0:	f001 fd45 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b46d4:	20c8      	movs	r0, #200	; 0xc8
   b46d6:	f002 fda5 	bl	b7224 <delay>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b46da:	4628      	mov	r0, r5
   b46dc:	f001 fd3f 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
    else
    {
        ledApagar(leds);
    }
}
   b46e0:	b004      	add	sp, #16
   b46e2:	bd70      	pop	{r4, r5, r6, pc}
        ledApagar(leds);
   b46e4:	f7ff ff08 	bl	b44f8 <_Z9ledApagar12ChainableLED>
   b46e8:	4620      	mov	r0, r4
   b46ea:	f001 fd38 	bl	b615e <_ZN12ChainableLEDD1Ev>
   b46ee:	e7f4      	b.n	b46da <_Z8ledBlinkbi+0x54>

000b46f0 <_Z8ledOnOffbi>:

void ledOnOff(boolean estado, int puerto)
{
   b46f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b46f2:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b46f4:	466d      	mov	r5, sp
   b46f6:	b2c9      	uxtb	r1, r1
   b46f8:	2305      	movs	r3, #5
   b46fa:	b2d2      	uxtb	r2, r2
{
   b46fc:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b46fe:	4628      	mov	r0, r5
   b4700:	f001 fd20 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b4704:	4628      	mov	r0, r5
   b4706:	f001 fdcf 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledBlanco(leds);
   b470a:	e895 0003 	ldmia.w	r5, {r0, r1}
   b470e:	ac02      	add	r4, sp, #8
   b4710:	e884 0003 	stmia.w	r4, {r0, r1}
   b4714:	4620      	mov	r0, r4
    if (estado)
   b4716:	b14e      	cbz	r6, b472c <_Z8ledOnOffbi+0x3c>
        ledBlanco(leds);
   b4718:	f7ff ff38 	bl	b458c <_Z9ledBlanco12ChainableLED>
    }
    else
    {
        ledApagar(leds);
   b471c:	4620      	mov	r0, r4
   b471e:	f001 fd1e 	bl	b615e <_ZN12ChainableLEDD1Ev>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4722:	4628      	mov	r0, r5
   b4724:	f001 fd1b 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
}
   b4728:	b004      	add	sp, #16
   b472a:	bd70      	pop	{r4, r5, r6, pc}
        ledApagar(leds);
   b472c:	f7ff fee4 	bl	b44f8 <_Z9ledApagar12ChainableLED>
   b4730:	e7f4      	b.n	b471c <_Z8ledOnOffbi+0x2c>

000b4732 <_Z11ledArcoirisbi>:

void ledArcoiris(boolean estado, int puerto)
{
   b4732:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int led_PIN1 = puerto;
    int led_PIN2 = puerto + 1;
   b4734:	1c4a      	adds	r2, r1, #1
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4736:	466d      	mov	r5, sp
   b4738:	b2c9      	uxtb	r1, r1
   b473a:	2305      	movs	r3, #5
   b473c:	b2d2      	uxtb	r2, r2
{
   b473e:	4606      	mov	r6, r0
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b4740:	4628      	mov	r0, r5
   b4742:	f001 fcff 	bl	b6144 <_ZN12ChainableLEDC1Ehhh>
    leds.init();
   b4746:	4628      	mov	r0, r5
   b4748:	f001 fdae 	bl	b62a8 <_ZN12ChainableLED4initEv>

    if (estado)
    {
        ledRojo(leds);
   b474c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4750:	ac02      	add	r4, sp, #8
   b4752:	e884 0003 	stmia.w	r4, {r0, r1}
   b4756:	4620      	mov	r0, r4
    if (estado)
   b4758:	2e00      	cmp	r6, #0
   b475a:	d04d      	beq.n	b47f8 <_Z11ledArcoirisbi+0xc6>
        ledRojo(leds);
   b475c:	f7ff fed6 	bl	b450c <_Z7ledRojo12ChainableLED>
   b4760:	4620      	mov	r0, r4
   b4762:	f001 fcfc 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b4766:	20c8      	movs	r0, #200	; 0xc8
   b4768:	f002 fd5c 	bl	b7224 <delay>
        ledNaranja(leds);
   b476c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4770:	e884 0003 	stmia.w	r4, {r0, r1}
   b4774:	4620      	mov	r0, r4
   b4776:	f7ff fefe 	bl	b4576 <_Z10ledNaranja12ChainableLED>
   b477a:	4620      	mov	r0, r4
   b477c:	f001 fcef 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b4780:	20c8      	movs	r0, #200	; 0xc8
   b4782:	f002 fd4f 	bl	b7224 <delay>
        ledAmarillo(leds);
   b4786:	e895 0003 	ldmia.w	r5, {r0, r1}
   b478a:	e884 0003 	stmia.w	r4, {r0, r1}
   b478e:	4620      	mov	r0, r4
   b4790:	f7ff fedc 	bl	b454c <_Z11ledAmarillo12ChainableLED>
   b4794:	4620      	mov	r0, r4
   b4796:	f001 fce2 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b479a:	20c8      	movs	r0, #200	; 0xc8
   b479c:	f002 fd42 	bl	b7224 <delay>
        ledVerde(leds);
   b47a0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b47a4:	e884 0003 	stmia.w	r4, {r0, r1}
   b47a8:	4620      	mov	r0, r4
   b47aa:	f7ff feb9 	bl	b4520 <_Z8ledVerde12ChainableLED>
   b47ae:	4620      	mov	r0, r4
   b47b0:	f001 fcd5 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b47b4:	20c8      	movs	r0, #200	; 0xc8
   b47b6:	f002 fd35 	bl	b7224 <delay>
        ledMorado(leds);
   b47ba:	e895 0003 	ldmia.w	r5, {r0, r1}
   b47be:	e884 0003 	stmia.w	r4, {r0, r1}
   b47c2:	4620      	mov	r0, r4
   b47c4:	f7ff fecc 	bl	b4560 <_Z9ledMorado12ChainableLED>
   b47c8:	4620      	mov	r0, r4
   b47ca:	f001 fcc8 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b47ce:	20c8      	movs	r0, #200	; 0xc8
   b47d0:	f002 fd28 	bl	b7224 <delay>
        ledAzul(leds);
   b47d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b47d8:	e884 0003 	stmia.w	r4, {r0, r1}
   b47dc:	4620      	mov	r0, r4
   b47de:	f7ff feaa 	bl	b4536 <_Z7ledAzul12ChainableLED>
   b47e2:	4620      	mov	r0, r4
   b47e4:	f001 fcbb 	bl	b615e <_ZN12ChainableLEDD1Ev>
        delay(200);
   b47e8:	20c8      	movs	r0, #200	; 0xc8
   b47ea:	f002 fd1b 	bl	b7224 <delay>
    ChainableLED leds(led_PIN1, led_PIN2, 5);
   b47ee:	4628      	mov	r0, r5
   b47f0:	f001 fcb5 	bl	b615e <_ZN12ChainableLEDD1Ev>
    }
    else
    {
        ledApagar(leds);
    }
}
   b47f4:	b004      	add	sp, #16
   b47f6:	bd70      	pop	{r4, r5, r6, pc}
        ledApagar(leds);
   b47f8:	f7ff fe7e 	bl	b44f8 <_Z9ledApagar12ChainableLED>
   b47fc:	4620      	mov	r0, r4
   b47fe:	f001 fcae 	bl	b615e <_ZN12ChainableLEDD1Ev>
   b4802:	e7f4      	b.n	b47ee <_Z11ledArcoirisbi+0xbc>

000b4804 <_Z8pitidoONi>:

// Acciones del zumbador
void pitidoON(int puerto)
{
   b4804:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b4806:	b284      	uxth	r4, r0
   b4808:	4620      	mov	r0, r4
   b480a:	2101      	movs	r1, #1
   b480c:	f003 fb83 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b4810:	4620      	mov	r0, r4
   b4812:	2101      	movs	r1, #1
   b4814:	f003 fb7f 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b4818:	1c60      	adds	r0, r4, #1
   b481a:	b280      	uxth	r0, r0
   b481c:	2101      	movs	r1, #1
   b481e:	9001      	str	r0, [sp, #4]
   b4820:	f003 fb79 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b4824:	9801      	ldr	r0, [sp, #4]
   b4826:	2101      	movs	r1, #1
}
   b4828:	b002      	add	sp, #8
   b482a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b482e:	f003 bb72 	b.w	b7f16 <digitalWrite>

000b4832 <_Z9pitidoOFFi>:
void pitidoOFF(int puerto)
{
   b4832:	b513      	push	{r0, r1, r4, lr}
    // Serial.println("Zumbador OFF");
    digitalWrite(puerto, 0);
   b4834:	b284      	uxth	r4, r0
   b4836:	4620      	mov	r0, r4
   b4838:	2100      	movs	r1, #0
   b483a:	f003 fb6c 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto, LOW);
   b483e:	4620      	mov	r0, r4
   b4840:	2100      	movs	r1, #0
   b4842:	f003 fb68 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b4846:	1c60      	adds	r0, r4, #1
   b4848:	b280      	uxth	r0, r0
   b484a:	2100      	movs	r1, #0
   b484c:	9001      	str	r0, [sp, #4]
   b484e:	f003 fb62 	bl	b7f16 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b4852:	9801      	ldr	r0, [sp, #4]
   b4854:	2100      	movs	r1, #0
}
   b4856:	b002      	add	sp, #8
   b4858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b485c:	f003 bb5b 	b.w	b7f16 <digitalWrite>

000b4860 <_Z11pitidoBlinki>:

void pitidoBlink(int puerto)
{
   b4860:	b510      	push	{r4, lr}
   b4862:	4604      	mov	r4, r0
    pitidoON(puerto);
   b4864:	f7ff ffce 	bl	b4804 <_Z8pitidoONi>
    delay(100);
   b4868:	2064      	movs	r0, #100	; 0x64
   b486a:	f002 fcdb 	bl	b7224 <delay>
    pitidoOFF(puerto);
   b486e:	4620      	mov	r0, r4
   b4870:	f7ff ffdf 	bl	b4832 <_Z9pitidoOFFi>
    delay(100);
}
   b4874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b4878:	2064      	movs	r0, #100	; 0x64
   b487a:	f002 bcd3 	b.w	b7224 <delay>

000b487e <_Z13blinkAndSleepbi>:

void blinkAndSleep(boolean estado, int puerto)
{
   b487e:	4603      	mov	r3, r0
   b4880:	4608      	mov	r0, r1
    if (estado)
   b4882:	b10b      	cbz	r3, b4888 <_Z13blinkAndSleepbi+0xa>
    {
        pitidoBlink(puerto);
   b4884:	f7ff bfec 	b.w	b4860 <_Z11pitidoBlinki>
    }
    else
    {
        pitidoOFF(puerto);
   b4888:	f7ff bfd3 	b.w	b4832 <_Z9pitidoOFFi>

000b488c <_Z8zumbadorbi>:
    }
}

void zumbador(boolean estado, int puerto)
{
   b488c:	4603      	mov	r3, r0
   b488e:	4608      	mov	r0, r1
    if (estado)
   b4890:	b10b      	cbz	r3, b4896 <_Z8zumbadorbi+0xa>
    {
        pitidoON(puerto);
   b4892:	f7ff bfb7 	b.w	b4804 <_Z8pitidoONi>
    }
    else
    {
        pitidoOFF(puerto);
   b4896:	f7ff bfcc 	b.w	b4832 <_Z9pitidoOFFi>
	...

000b489c <_Z10activarLEDiib>:
    }
}

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto, bool valor)
{
   b489c:	b508      	push	{r3, lr}
   b489e:	4603      	mov	r3, r0
   b48a0:	4610      	mov	r0, r2
   b48a2:	2b05      	cmp	r3, #5
   b48a4:	d81c      	bhi.n	b48e0 <_Z10activarLEDiib+0x44>
   b48a6:	e8df f003 	tbb	[pc, r3]
   b48aa:	0c03      	.short	0x0c03
   b48ac:	1815120f 	.word	0x1815120f
    switch (opcion)
    {
    case 0:
        ledVerdeRojo(valor, puerto);
   b48b0:	f7ff fec8 	bl	b4644 <_Z12ledVerdeRojobi>
    default:
        Serial.println("LedErrorOption");
        break;
    }

    Serial.println("Sale swith");
   b48b4:	f003 f994 	bl	b7be0 <_Z16_fetch_usbserialv>
}
   b48b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sale swith");
   b48bc:	490b      	ldr	r1, [pc, #44]	; (b48ec <_Z10activarLEDiib+0x50>)
   b48be:	f002 bedc 	b.w	b767a <_ZN5Print7printlnEPKc>
        ledMoradoAmarillo(valor, puerto);
   b48c2:	f7ff fe9e 	bl	b4602 <_Z17ledMoradoAmarillobi>
        break;
   b48c6:	e7f5      	b.n	b48b4 <_Z10activarLEDiib+0x18>
        ledAzulNaranja(valor, puerto);
   b48c8:	f7ff fe7a 	bl	b45c0 <_Z14ledAzulNaranjabi>
        break;
   b48cc:	e7f2      	b.n	b48b4 <_Z10activarLEDiib+0x18>
        ledBlink(valor, puerto);
   b48ce:	f7ff feda 	bl	b4686 <_Z8ledBlinkbi>
        break;
   b48d2:	e7ef      	b.n	b48b4 <_Z10activarLEDiib+0x18>
        ledArcoiris(valor, puerto);
   b48d4:	f7ff ff2d 	bl	b4732 <_Z11ledArcoirisbi>
        break;
   b48d8:	e7ec      	b.n	b48b4 <_Z10activarLEDiib+0x18>
        ledOnOff(valor, puerto);
   b48da:	f7ff ff09 	bl	b46f0 <_Z8ledOnOffbi>
        break;
   b48de:	e7e9      	b.n	b48b4 <_Z10activarLEDiib+0x18>
        Serial.println("LedErrorOption");
   b48e0:	f003 f97e 	bl	b7be0 <_Z16_fetch_usbserialv>
   b48e4:	4902      	ldr	r1, [pc, #8]	; (b48f0 <_Z10activarLEDiib+0x54>)
   b48e6:	f002 fec8 	bl	b767a <_ZN5Print7printlnEPKc>
        break;
   b48ea:	e7e3      	b.n	b48b4 <_Z10activarLEDiib+0x18>
   b48ec:	000b8982 	.word	0x000b8982
   b48f0:	000b8973 	.word	0x000b8973

000b48f4 <_Z15activarZumbadoriib>:

void activarZumbador(int opcion, int puerto, bool valor)
{
   b48f4:	b570      	push	{r4, r5, r6, lr}
   b48f6:	460c      	mov	r4, r1
   b48f8:	4606      	mov	r6, r0
    pinMode(puerto, OUTPUT);
   b48fa:	2101      	movs	r1, #1
   b48fc:	b2a0      	uxth	r0, r4
{
   b48fe:	4615      	mov	r5, r2
    pinMode(puerto, OUTPUT);
   b4900:	f003 faf8 	bl	b7ef4 <pinMode>

    switch (opcion)
   b4904:	b146      	cbz	r6, b4918 <_Z15activarZumbadoriib+0x24>
   b4906:	2e01      	cmp	r6, #1
   b4908:	d00c      	beq.n	b4924 <_Z15activarZumbadoriib+0x30>
        break;
    case 1:
        blinkAndSleep(valor, puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b490a:	f003 f969 	bl	b7be0 <_Z16_fetch_usbserialv>
        break;
    }
   b490e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Serial.println("Valor no valido");
   b4912:	4907      	ldr	r1, [pc, #28]	; (b4930 <_Z15activarZumbadoriib+0x3c>)
   b4914:	f002 beb1 	b.w	b767a <_ZN5Print7printlnEPKc>
        zumbador(valor, puerto);
   b4918:	4621      	mov	r1, r4
   b491a:	4628      	mov	r0, r5
   b491c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        zumbador(valor, puerto);
   b4920:	f7ff bfb4 	b.w	b488c <_Z8zumbadorbi>
        blinkAndSleep(valor, puerto);
   b4924:	4621      	mov	r1, r4
   b4926:	4628      	mov	r0, r5
   b4928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        blinkAndSleep(valor, puerto);
   b492c:	f7ff bfa7 	b.w	b487e <_Z13blinkAndSleepbi>
   b4930:	000b898d 	.word	0x000b898d

000b4934 <_Z11noDistanciai>:

// Distance
#include "Grove-Ultrasonic-Ranger.h"

boolean noDistancia(int puerto)
{
   b4934:	b513      	push	{r0, r1, r4, lr}
   b4936:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4938:	a801      	add	r0, sp, #4
   b493a:	f002 f9e1 	bl	b6d00 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b493e:	a801      	add	r0, sp, #4
   b4940:	f002 f9e0 	bl	b6d04 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b4944:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b4946:	f003 f94b 	bl	b7be0 <_Z16_fetch_usbserialv>
   b494a:	4905      	ldr	r1, [pc, #20]	; (b4960 <_Z11noDistanciai+0x2c>)
   b494c:	4622      	mov	r2, r4
   b494e:	f7ff fbc5 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4952:	2c09      	cmp	r4, #9
   b4954:	bf8c      	ite	hi
   b4956:	2000      	movhi	r0, #0
   b4958:	2001      	movls	r0, #1
   b495a:	b002      	add	sp, #8
   b495c:	bd10      	pop	{r4, pc}
   b495e:	bf00      	nop
   b4960:	000b899d 	.word	0x000b899d

000b4964 <_Z11siDistanciai>:
boolean siDistancia(int puerto)
{
   b4964:	b513      	push	{r0, r1, r4, lr}
   b4966:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4968:	a801      	add	r0, sp, #4
   b496a:	f002 f9c9 	bl	b6d00 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b496e:	a801      	add	r0, sp, #4
   b4970:	f002 f9c8 	bl	b6d04 <_ZN10Ultrasonic20MeasureInCentimetersEv>
   b4974:	4604      	mov	r4, r0
    Serial.printlnf("Distancia: %d", range);
   b4976:	f003 f933 	bl	b7be0 <_Z16_fetch_usbserialv>
   b497a:	4905      	ldr	r1, [pc, #20]	; (b4990 <_Z11siDistanciai+0x2c>)
   b497c:	4622      	mov	r2, r4
   b497e:	f7ff fbad 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (range > 10)
        return true;
    else
        return false;
}
   b4982:	2c0a      	cmp	r4, #10
   b4984:	bfd4      	ite	le
   b4986:	2000      	movle	r0, #0
   b4988:	2001      	movgt	r0, #1
   b498a:	b002      	add	sp, #8
   b498c:	bd10      	pop	{r4, pc}
   b498e:	bf00      	nop
   b4990:	000b899d 	.word	0x000b899d

000b4994 <_Z5siLuzi>:

boolean siLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4994:	2802      	cmp	r0, #2
{
   b4996:	b508      	push	{r3, lr}
    switch (puerto)
   b4998:	d00b      	beq.n	b49b2 <_Z5siLuzi+0x1e>
   b499a:	2804      	cmp	r0, #4
   b499c:	d00b      	beq.n	b49b6 <_Z5siLuzi+0x22>
   b499e:	b960      	cbnz	r0, b49ba <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b49a0:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b49a2:	f003 fae4 	bl	b7f6e <analogRead>
   b49a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b49aa:	bfb4      	ite	lt
   b49ac:	2000      	movlt	r0, #0
   b49ae:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b49b0:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b49b2:	2011      	movs	r0, #17
   b49b4:	e7f5      	b.n	b49a2 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b49b6:	200f      	movs	r0, #15
   b49b8:	e7f3      	b.n	b49a2 <_Z5siLuzi+0xe>
    switch (puerto)
   b49ba:	2000      	movs	r0, #0
   b49bc:	e7f8      	b.n	b49b0 <_Z5siLuzi+0x1c>

000b49be <_Z5noLuzi>:

boolean noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b49be:	2802      	cmp	r0, #2
{
   b49c0:	b508      	push	{r3, lr}
    switch (puerto)
   b49c2:	d00b      	beq.n	b49dc <_Z5noLuzi+0x1e>
   b49c4:	2804      	cmp	r0, #4
   b49c6:	d00b      	beq.n	b49e0 <_Z5noLuzi+0x22>
   b49c8:	b960      	cbnz	r0, b49e4 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b49ca:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b49cc:	f003 facf 	bl	b7f6e <analogRead>
   b49d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b49d4:	bfcc      	ite	gt
   b49d6:	2000      	movgt	r0, #0
   b49d8:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b49da:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b49dc:	2011      	movs	r0, #17
   b49de:	e7f5      	b.n	b49cc <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b49e0:	200f      	movs	r0, #15
   b49e2:	e7f3      	b.n	b49cc <_Z5noLuzi+0xe>
    switch (puerto)
   b49e4:	2000      	movs	r0, #0
   b49e6:	e7f8      	b.n	b49da <_Z5noLuzi+0x1c>

000b49e8 <_Z7siRuidoi>:
//         return true;
//     return false;
// }

boolean siRuido(int puerto)
{
   b49e8:	b508      	push	{r3, lr}
    if (analogRead(puerto) >= 700)
   b49ea:	b280      	uxth	r0, r0
   b49ec:	f003 fabf 	bl	b7f6e <analogRead>
        return true;
    return false;
}
   b49f0:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b49f4:	bfb4      	ite	lt
   b49f6:	2000      	movlt	r0, #0
   b49f8:	2001      	movge	r0, #1
   b49fa:	bd08      	pop	{r3, pc}

000b49fc <_Z7noRuidoi>:

boolean noRuido(int puerto)
{
   b49fc:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b49fe:	b280      	uxth	r0, r0
   b4a00:	f003 fab5 	bl	b7f6e <analogRead>
        return true;
    return false;
}
   b4a04:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4a08:	bfcc      	ite	gt
   b4a0a:	2000      	movgt	r0, #0
   b4a0c:	2001      	movle	r0, #1
   b4a0e:	bd08      	pop	{r3, pc}

000b4a10 <_Z7siBotoni>:

boolean siBoton(int puerto)
{
   b4a10:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4a12:	b280      	uxth	r0, r0
   b4a14:	2100      	movs	r1, #0
   b4a16:	9001      	str	r0, [sp, #4]
   b4a18:	f003 fa6c 	bl	b7ef4 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4a1c:	9801      	ldr	r0, [sp, #4]
   b4a1e:	f003 fa93 	bl	b7f48 <digitalRead>
        return true;
    return false;
}
   b4a22:	1e43      	subs	r3, r0, #1
   b4a24:	4258      	negs	r0, r3
   b4a26:	4158      	adcs	r0, r3
   b4a28:	b003      	add	sp, #12
   b4a2a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4a2e <_Z7noBotoni>:

boolean noBoton(int puerto)
{
   b4a2e:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4a30:	b280      	uxth	r0, r0
   b4a32:	2100      	movs	r1, #0
   b4a34:	9001      	str	r0, [sp, #4]
   b4a36:	f003 fa5d 	bl	b7ef4 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4a3a:	9801      	ldr	r0, [sp, #4]
   b4a3c:	f003 fa84 	bl	b7f48 <digitalRead>
        return true;
    return false;
}
   b4a40:	fab0 f080 	clz	r0, r0
   b4a44:	0940      	lsrs	r0, r0, #5
   b4a46:	b003      	add	sp, #12
   b4a48:	f85d fb04 	ldr.w	pc, [sp], #4

000b4a4c <_Z10siRotativoi>:

boolean siRotativo(int puerto)
{
   b4a4c:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b4a4e:	b280      	uxth	r0, r0
   b4a50:	f003 fa8d 	bl	b7f6e <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b4a54:	ee07 0a90 	vmov	s15, r0
   b4a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4a5c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4a64:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4a8c <_Z10siRotativoi+0x40>
   b4a68:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4a6c:	eddf 7a08 	vldr	s15, [pc, #32]	; b4a90 <_Z10siRotativoi+0x44>
   b4a70:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4a74:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 680)
   b4a78:	eddf 7a06 	vldr	s15, [pc, #24]	; b4a94 <_Z10siRotativoi+0x48>
   b4a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4a84:	bfac      	ite	ge
   b4a86:	2001      	movge	r0, #1
   b4a88:	2000      	movlt	r0, #0
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	447fc000 	.word	0x447fc000
   b4a90:	43960000 	.word	0x43960000
   b4a94:	442a0000 	.word	0x442a0000

000b4a98 <_Z10noRotativoi>:

boolean noRotativo(int puerto)
{
   b4a98:	b508      	push	{r3, lr}
    float voltage;
    int sensor_value = analogRead(puerto);
   b4a9a:	b280      	uxth	r0, r0
   b4a9c:	f003 fa67 	bl	b7f6e <analogRead>
    voltage = (float)sensor_value * 5 / 1023;
   b4aa0:	ee07 0a90 	vmov	s15, r0
   b4aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4aa8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4ab0:	ed9f 6a09 	vldr	s12, [pc, #36]	; b4ad8 <_Z10noRotativoi+0x40>
   b4ab4:	ee87 7a86 	vdiv.f32	s14, s15, s12
    float degrees = (voltage * 300) / 5;
   b4ab8:	eddf 7a08 	vldr	s15, [pc, #32]	; b4adc <_Z10noRotativoi+0x44>
   b4abc:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4ac0:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees <= 680)
   b4ac4:	eddf 7a06 	vldr	s15, [pc, #24]	; b4ae0 <_Z10noRotativoi+0x48>
   b4ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4ad0:	bf94      	ite	ls
   b4ad2:	2001      	movls	r0, #1
   b4ad4:	2000      	movhi	r0, #0
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	447fc000 	.word	0x447fc000
   b4adc:	43960000 	.word	0x43960000
   b4ae0:	442a0000 	.word	0x442a0000

000b4ae4 <_Z8tempFrioi>:

boolean tempFrio(int puerto)
{
   b4ae4:	b530      	push	{r4, r5, lr}
   b4ae6:	ed2d 8b02 	vpush	{d8}
   b4aea:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4aec:	b2c1      	uxtb	r1, r0
   b4aee:	2306      	movs	r3, #6
   b4af0:	220b      	movs	r2, #11
   b4af2:	a801      	add	r0, sp, #4
   b4af4:	f002 f83e 	bl	b6b74 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4af8:	a801      	add	r0, sp, #4
   b4afa:	f002 f842 	bl	b6b82 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4afe:	a801      	add	r0, sp, #4
   b4b00:	f002 f8fc 	bl	b6cfc <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4b04:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4b0c:	eeb4 0a40 	vcmp.f32	s0, s0
   b4b10:	bf0c      	ite	eq
   b4b12:	2401      	moveq	r4, #1
   b4b14:	2400      	movne	r4, #0
   b4b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b1a:	bf68      	it	vs
   b4b1c:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4b20:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4b24:	2c00      	cmp	r4, #0
   b4b26:	d1ea      	bne.n	b4afe <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4b28:	f003 f85a 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4b2c:	4605      	mov	r5, r0
   b4b2e:	ee18 0a10 	vmov	r0, s16
   b4b32:	f003 fc17 	bl	b8364 <__aeabi_f2d>
   b4b36:	4602      	mov	r2, r0
   b4b38:	460b      	mov	r3, r1
   b4b3a:	4628      	mov	r0, r5
   b4b3c:	490a      	ldr	r1, [pc, #40]	; (b4b68 <_Z8tempFrioi+0x84>)
   b4b3e:	f7ff facd 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4b42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b4a:	dd08      	ble.n	b4b5e <_Z8tempFrioi+0x7a>
   b4b4c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4b50:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b58:	bf4c      	ite	mi
   b4b5a:	2401      	movmi	r4, #1
   b4b5c:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4b5e:	4620      	mov	r0, r4
   b4b60:	b007      	add	sp, #28
   b4b62:	ecbd 8b02 	vpop	{d8}
   b4b66:	bd30      	pop	{r4, r5, pc}
   b4b68:	000b89ab 	.word	0x000b89ab

000b4b6c <_Z12tempTempladoi>:
boolean tempTemplado(int puerto)
{
   b4b6c:	b530      	push	{r4, r5, lr}
   b4b6e:	ed2d 8b02 	vpush	{d8}
   b4b72:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4b74:	b2c1      	uxtb	r1, r0
   b4b76:	2306      	movs	r3, #6
   b4b78:	220b      	movs	r2, #11
   b4b7a:	a801      	add	r0, sp, #4
   b4b7c:	f001 fffa 	bl	b6b74 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4b80:	a801      	add	r0, sp, #4
   b4b82:	f001 fffe 	bl	b6b82 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4b86:	a801      	add	r0, sp, #4
   b4b88:	f002 f8b8 	bl	b6cfc <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4b8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b94:	eeb4 0a40 	vcmp.f32	s0, s0
   b4b98:	bf0c      	ite	eq
   b4b9a:	2401      	moveq	r4, #1
   b4b9c:	2400      	movne	r4, #0
   b4b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ba2:	bf68      	it	vs
   b4ba4:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4ba8:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4bac:	2c00      	cmp	r4, #0
   b4bae:	d1ea      	bne.n	b4b86 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4bb0:	f003 f816 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4bb4:	4605      	mov	r5, r0
   b4bb6:	ee18 0a10 	vmov	r0, s16
   b4bba:	f003 fbd3 	bl	b8364 <__aeabi_f2d>
   b4bbe:	4602      	mov	r2, r0
   b4bc0:	460b      	mov	r3, r1
   b4bc2:	4628      	mov	r0, r5
   b4bc4:	490b      	ldr	r1, [pc, #44]	; (b4bf4 <_Z12tempTempladoi+0x88>)
   b4bc6:	f7ff fa89 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4bca:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4bce:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bd6:	dd08      	ble.n	b4bea <_Z12tempTempladoi+0x7e>
   b4bd8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4bdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4be4:	bf4c      	ite	mi
   b4be6:	2401      	movmi	r4, #1
   b4be8:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4bea:	4620      	mov	r0, r4
   b4bec:	b007      	add	sp, #28
   b4bee:	ecbd 8b02 	vpop	{d8}
   b4bf2:	bd30      	pop	{r4, r5, pc}
   b4bf4:	000b89ab 	.word	0x000b89ab

000b4bf8 <_Z9tempCalori>:
boolean tempCalor(int puerto)
{
   b4bf8:	b530      	push	{r4, r5, lr}
   b4bfa:	ed2d 8b02 	vpush	{d8}
   b4bfe:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4c00:	b2c1      	uxtb	r1, r0
   b4c02:	2306      	movs	r3, #6
   b4c04:	220b      	movs	r2, #11
   b4c06:	a801      	add	r0, sp, #4
   b4c08:	f001 ffb4 	bl	b6b74 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4c0c:	a801      	add	r0, sp, #4
   b4c0e:	f001 ffb8 	bl	b6b82 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4c12:	a801      	add	r0, sp, #4
   b4c14:	f002 f872 	bl	b6cfc <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4c18:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c20:	eeb4 0a40 	vcmp.f32	s0, s0
   b4c24:	bf0c      	ite	eq
   b4c26:	2401      	moveq	r4, #1
   b4c28:	2400      	movne	r4, #0
   b4c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c2e:	bf68      	it	vs
   b4c30:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4c34:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4c38:	2c00      	cmp	r4, #0
   b4c3a:	d1ea      	bne.n	b4c12 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4c3c:	f002 ffd0 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4c40:	4605      	mov	r5, r0
   b4c42:	ee18 0a10 	vmov	r0, s16
   b4c46:	f003 fb8d 	bl	b8364 <__aeabi_f2d>
   b4c4a:	4602      	mov	r2, r0
   b4c4c:	460b      	mov	r3, r1
   b4c4e:	4628      	mov	r0, r5
   b4c50:	490b      	ldr	r1, [pc, #44]	; (b4c80 <_Z9tempCalori+0x88>)
   b4c52:	f7ff fa43 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4c56:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4c5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c62:	dd08      	ble.n	b4c76 <_Z9tempCalori+0x7e>
   b4c64:	eddf 7a07 	vldr	s15, [pc, #28]	; b4c84 <_Z9tempCalori+0x8c>
   b4c68:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c70:	bf4c      	ite	mi
   b4c72:	2401      	movmi	r4, #1
   b4c74:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4c76:	4620      	mov	r0, r4
   b4c78:	b007      	add	sp, #28
   b4c7a:	ecbd 8b02 	vpop	{d8}
   b4c7e:	bd30      	pop	{r4, r5, pc}
   b4c80:	000b89ab 	.word	0x000b89ab
   b4c84:	42480000 	.word	0x42480000

000b4c88 <_Z10leerSensoriii>:

boolean leerSensor(int id, int condicion, int puerto)
{
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4603      	mov	r3, r0
   b4c8c:	3b01      	subs	r3, #1
   b4c8e:	4610      	mov	r0, r2
   b4c90:	2b06      	cmp	r3, #6
   b4c92:	d843      	bhi.n	b4d1c <_Z10leerSensoriii+0x94>
   b4c94:	e8df f003 	tbb	[pc, r3]
   b4c98:	1b120904 	.word	0x1b120904
   b4c9c:	2d24      	.short	0x2d24
   b4c9e:	04          	.byte	0x04
   b4c9f:	00          	.byte	0x00
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4ca0:	bbc1      	cbnz	r1, b4d14 <_Z10leerSensoriii+0x8c>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
   b4ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4ca6:	f7ff be45 	b.w	b4934 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4caa:	b919      	cbnz	r1, b4cb4 <_Z10leerSensoriii+0x2c>
   b4cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4cb0:	f7ff be85 	b.w	b49be <_Z5noLuzi>
   b4cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4cb8:	f7ff be6c 	b.w	b4994 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4cbc:	b919      	cbnz	r1, b4cc6 <_Z10leerSensoriii+0x3e>
   b4cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4cc2:	f7ff be9b 	b.w	b49fc <_Z7noRuidoi>
   b4cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4cca:	f7ff be8d 	b.w	b49e8 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4cce:	b919      	cbnz	r1, b4cd8 <_Z10leerSensoriii+0x50>
   b4cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4cd4:	f7ff beab 	b.w	b4a2e <_Z7noBotoni>
   b4cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4cdc:	f7ff be98 	b.w	b4a10 <_Z7siBotoni>
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4ce0:	b919      	cbnz	r1, b4cea <_Z10leerSensoriii+0x62>
   b4ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4ce6:	f7ff bed7 	b.w	b4a98 <_Z10noRotativoi>
   b4cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noRotativo(puerto) : siRotativo(puerto);
   b4cee:	f7ff bead 	b.w	b4a4c <_Z10siRotativoi>
        switch (condicion)
   b4cf2:	2901      	cmp	r1, #1
   b4cf4:	d006      	beq.n	b4d04 <_Z10leerSensoriii+0x7c>
   b4cf6:	2902      	cmp	r1, #2
   b4cf8:	d008      	beq.n	b4d0c <_Z10leerSensoriii+0x84>
   b4cfa:	b959      	cbnz	r1, b4d14 <_Z10leerSensoriii+0x8c>
   b4cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4d00:	f7ff bef0 	b.w	b4ae4 <_Z8tempFrioi>
   b4d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4d08:	f7ff bf30 	b.w	b4b6c <_Z12tempTempladoi>
   b4d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4d10:	f7ff bf72 	b.w	b4bf8 <_Z9tempCalori>
   b4d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0) ? noDistancia(puerto) : siDistancia(puerto);
   b4d18:	f7ff be24 	b.w	b4964 <_Z11siDistanciai>
        Serial.println("InvalidSensorError");
   b4d1c:	f002 ff60 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4d20:	4902      	ldr	r1, [pc, #8]	; (b4d2c <_Z10leerSensoriii+0xa4>)
   b4d22:	f002 fcaa 	bl	b767a <_ZN5Print7printlnEPKc>
   b4d26:	2000      	movs	r0, #0
   b4d28:	bd08      	pop	{r3, pc}
   b4d2a:	bf00      	nop
   b4d2c:	000b89b4 	.word	0x000b89b4

000b4d30 <setup>:

// Informacion de la tarjeta leida.
int tagInfo[6] = {-1, -1, -1, -1, -1, -1};

void setup()
{
   b4d30:	b510      	push	{r4, lr}
   b4d32:	b088      	sub	sp, #32
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b4d34:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b4d36:	a805      	add	r0, sp, #20
   b4d38:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b4d3c:	f8ad 401c 	strh.w	r4, [sp, #28]
   b4d40:	f002 fa7c 	bl	b723c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b4d44:	481b      	ldr	r0, [pc, #108]	; (b4db4 <setup+0x84>)
   b4d46:	4623      	mov	r3, r4
   b4d48:	4622      	mov	r2, r4
   b4d4a:	4621      	mov	r1, r4
   b4d4c:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4d4e:	4c1a      	ldr	r4, [pc, #104]	; (b4db8 <setup+0x88>)
   b4d50:	f002 f9f0 	bl	b7134 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b4d54:	f002 ff44 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4d58:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4d5c:	f002 ff34 	bl	b7bc8 <_ZN9USBSerial5beginEl>
   b4d60:	7821      	ldrb	r1, [r4, #0]
   b4d62:	f3bf 8f5b 	dmb	ish
   b4d66:	f011 0101 	ands.w	r1, r1, #1
   b4d6a:	d10b      	bne.n	b4d84 <setup+0x54>
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	9103      	str	r1, [sp, #12]
   b4d70:	f7ff f99e 	bl	b40b0 <__cxa_guard_acquire>
   b4d74:	9903      	ldr	r1, [sp, #12]
   b4d76:	b128      	cbz	r0, b4d84 <setup+0x54>
   b4d78:	4810      	ldr	r0, [pc, #64]	; (b4dbc <setup+0x8c>)
   b4d7a:	f002 fce3 	bl	b7744 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4d7e:	4620      	mov	r0, r4
   b4d80:	f7ff f99b 	bl	b40ba <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4d84:	480d      	ldr	r0, [pc, #52]	; (b4dbc <setup+0x8c>)
   b4d86:	f002 fce7 	bl	b7758 <_ZN8SPIClass5beginEv>
  SPI.begin();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4d8a:	2301      	movs	r3, #1
   b4d8c:	9300      	str	r3, [sp, #0]
   b4d8e:	223c      	movs	r2, #60	; 0x3c
   b4d90:	2102      	movs	r1, #2
   b4d92:	480b      	ldr	r0, [pc, #44]	; (b4dc0 <setup+0x90>)
   b4d94:	f000 fec6 	bl	b5b24 <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b4d98:	480a      	ldr	r0, [pc, #40]	; (b4dc4 <setup+0x94>)
   b4d9a:	f001 fbe6 	bl	b656a <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b4d9e:	4b0a      	ldr	r3, [pc, #40]	; (b4dc8 <setup+0x98>)
   b4da0:	22ff      	movs	r2, #255	; 0xff
   b4da2:	701a      	strb	r2, [r3, #0]
   b4da4:	705a      	strb	r2, [r3, #1]
   b4da6:	709a      	strb	r2, [r3, #2]
   b4da8:	70da      	strb	r2, [r3, #3]
   b4daa:	711a      	strb	r2, [r3, #4]
   b4dac:	715a      	strb	r2, [r3, #5]
  }
}
   b4dae:	b008      	add	sp, #32
   b4db0:	bd10      	pop	{r4, pc}
   b4db2:	bf00      	nop
   b4db4:	2003e718 	.word	0x2003e718
   b4db8:	2003e5dc 	.word	0x2003e5dc
   b4dbc:	2003e5e0 	.word	0x2003e5e0
   b4dc0:	2003e634 	.word	0x2003e634
   b4dc4:	2003e6ab 	.word	0x2003e6ab
   b4dc8:	2003e6a5 	.word	0x2003e6a5

000b4dcc <loop>:

void loop()
{
   b4dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b4dd0:	4864      	ldr	r0, [pc, #400]	; (b4f64 <loop+0x198>)
   b4dd2:	f001 fcf5 	bl	b67c0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4dd6:	b1a8      	cbz	r0, b4e04 <loop+0x38>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b4dd8:	4862      	ldr	r0, [pc, #392]	; (b4f64 <loop+0x198>)
   b4dda:	f001 fec2 	bl	b6b62 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4dde:	2800      	cmp	r0, #0
   b4de0:	f000 80bd 	beq.w	b4f5e <loop+0x192>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
   b4de4:	4c60      	ldr	r4, [pc, #384]	; (b4f68 <loop+0x19c>)
   b4de6:	4620      	mov	r0, r4
   b4de8:	f000 fe8e 	bl	b5b08 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4dec:	4620      	mov	r0, r4
   b4dee:	2101      	movs	r1, #1
   b4df0:	f000 fce5 	bl	b57be <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4df4:	2000      	movs	r0, #0
   b4df6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4dfa:	e9c4 0304 	strd	r0, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    // Leemos la tag y guardamos la informacion codificada en tagInfo.
    getTagID(tagInfo);
   b4dfe:	485b      	ldr	r0, [pc, #364]	; (b4f6c <loop+0x1a0>)
   b4e00:	f7ff faba 	bl	b4378 <_Z8getTagIDPi>
  }

  // Si se ha pasado nueva tag:
  if (tagInfo[0] != -1)
   b4e04:	4d59      	ldr	r5, [pc, #356]	; (b4f6c <loop+0x1a0>)
   b4e06:	682b      	ldr	r3, [r5, #0]
   b4e08:	3301      	adds	r3, #1
   b4e0a:	d043      	beq.n	b4e94 <loop+0xc8>
  {
    // Ejemplo lectura de informacion codificada en tarjeta.
    Serial.println(esSensor(tagInfo[0]) ? "Es Sensor" : "Es Actuador");
   b4e0c:	f002 fee8 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4e10:	4a57      	ldr	r2, [pc, #348]	; (b4f70 <loop+0x1a4>)
   b4e12:	4b58      	ldr	r3, [pc, #352]	; (b4f74 <loop+0x1a8>)
   b4e14:	6829      	ldr	r1, [r5, #0]
   b4e16:	2900      	cmp	r1, #0
   b4e18:	bf0c      	ite	eq
   b4e1a:	4611      	moveq	r1, r2
   b4e1c:	4619      	movne	r1, r3
   b4e1e:	f002 fc2c 	bl	b767a <_ZN5Print7printlnEPKc>
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4e22:	f002 fedd 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4e26:	4b54      	ldr	r3, [pc, #336]	; (b4f78 <loop+0x1ac>)
   b4e28:	6869      	ldr	r1, [r5, #4]
   b4e2a:	4a54      	ldr	r2, [pc, #336]	; (b4f7c <loop+0x1b0>)
   b4e2c:	2900      	cmp	r1, #0
   b4e2e:	bf0c      	ite	eq
   b4e30:	4611      	moveq	r1, r2
   b4e32:	4619      	movne	r1, r3
   b4e34:	f002 fc21 	bl	b767a <_ZN5Print7printlnEPKc>

    // Si la tag es Sensor:
    if (esSensor(tagInfo[0]))
   b4e38:	682b      	ldr	r3, [r5, #0]
    {
      //  Si no tenemos 2 sensores.
      if (numSensores(sensoresArray) < 2)
   b4e3a:	4851      	ldr	r0, [pc, #324]	; (b4f80 <loop+0x1b4>)
    if (esSensor(tagInfo[0]))
   b4e3c:	2b00      	cmp	r3, #0
   b4e3e:	d175      	bne.n	b4f2c <loop+0x160>
      if (numSensores(sensoresArray) < 2)
   b4e40:	f7ff fb4c 	bl	b44dc <_Z11numSensoresPb>
   b4e44:	2801      	cmp	r0, #1
   b4e46:	dc6b      	bgt.n	b4f20 <loop+0x154>
      {
        // Añadimos el sensor a un puerto disponible.
        int puerto = asignarPuerto(tagInfo[1]);
   b4e48:	6868      	ldr	r0, [r5, #4]
   b4e4a:	f7ff fae5 	bl	b4418 <_Z13asignarPuertoi>

        // Si el puerto es distinto de -1 el sensor ha sido asignado correctamente.
        if (puerto != -1)
   b4e4e:	1c41      	adds	r1, r0, #1
        int puerto = asignarPuerto(tagInfo[1]);
   b4e50:	4604      	mov	r4, r0
        if (puerto != -1)
   b4e52:	d01c      	beq.n	b4e8e <loop+0xc2>
        {
          // Actualizamos la cantidad de sensores en el sistema
          incrementarSensor(sensoresArray);
   b4e54:	484a      	ldr	r0, [pc, #296]	; (b4f80 <loop+0x1b4>)
          // Guardamos el ID
          idSensor[indice] = tagInfo[2];
          // Serial.printf("ID: %d ", idSensor[indice]);

          // Guardamos la condicion
          condicionSensor[indice] = tagInfo[3];
   b4e56:	494b      	ldr	r1, [pc, #300]	; (b4f84 <loop+0x1b8>)
          incrementarSensor(sensoresArray);
   b4e58:	f7ff fb46 	bl	b44e8 <_Z17incrementarSensorPb>
          int indice = numSensores(sensoresArray) - 1;
   b4e5c:	4848      	ldr	r0, [pc, #288]	; (b4f80 <loop+0x1b4>)
   b4e5e:	f7ff fb3d 	bl	b44dc <_Z11numSensoresPb>
          idSensor[indice] = tagInfo[2];
   b4e62:	4b49      	ldr	r3, [pc, #292]	; (b4f88 <loop+0x1bc>)
   b4e64:	68aa      	ldr	r2, [r5, #8]
          int indice = numSensores(sensoresArray) - 1;
   b4e66:	3801      	subs	r0, #1
          idSensor[indice] = tagInfo[2];
   b4e68:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          condicionSensor[indice] = tagInfo[3];
   b4e6c:	68eb      	ldr	r3, [r5, #12]
   b4e6e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
          // Serial.printf("Condicion: %d ", condicionSensor[indice]);

          // Guardamos el puerto asignado del sensor.
          puertosSensores[indice] = puerto;
   b4e72:	4946      	ldr	r1, [pc, #280]	; (b4f8c <loop+0x1c0>)
   b4e74:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
   return id == 0;
   b4e78:	e9d5 0100 	ldrd	r0, r1, [r5]
          // Serial.printlnf("Puerto: %d", puertosSensores[indice]);

          // Mostramos Sensor en pantalla:
          displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), idSensor[indice], condicionSensor[indice], puerto);
   b4e7c:	9400      	str	r4, [sp, #0]
        {
          puertoActuador = puerto;
        }

        // Mostramos Actuador en pantalla:
        displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), tagInfo[2], tagInfo[3], puertoActuador);
   b4e7e:	fab1 f181 	clz	r1, r1
   b4e82:	fab0 f080 	clz	r0, r0
   b4e86:	0949      	lsrs	r1, r1, #5
   b4e88:	0940      	lsrs	r0, r0, #5
   b4e8a:	f7ff f935 	bl	b40f8 <_Z12displayPrintbbiii>
      else
      {
        Serial.println("Error: necesario al menos un sensor");
      }
    }
    tagInfo[0] = -1;
   b4e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4e92:	602b      	str	r3, [r5, #0]
  }

  // Para iteacion del loop tenemos que leer los sensores y ejecutar actuadores, en caso de ser posible.
  int num = numSensores(sensoresArray);
   b4e94:	483a      	ldr	r0, [pc, #232]	; (b4f80 <loop+0x1b4>)
   b4e96:	f7ff fb21 	bl	b44dc <_Z11numSensoresPb>

  if (num > 0)
   b4e9a:	1e06      	subs	r6, r0, #0
   b4e9c:	dd3a      	ble.n	b4f14 <loop+0x148>
  {
    //  Leemos el valor del sensor 1;
    bool valueSensor1 = leerSensor(idSensor[0], condicionSensor[0], puertosSensores[0]);
   b4e9e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; b4f8c <loop+0x1c0>
   b4ea2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; b4f84 <loop+0x1b8>
   b4ea6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b4f88 <loop+0x1bc>
   b4eaa:	f8db 2000 	ldr.w	r2, [fp]
   b4eae:	f8da 1000 	ldr.w	r1, [sl]
   b4eb2:	f8d9 0000 	ldr.w	r0, [r9]
    Serial.printlnf("Sensor 1: %s", valueSensor1 ? "True" : "False");
   b4eb6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b4fa8 <loop+0x1dc>
   b4eba:	4f35      	ldr	r7, [pc, #212]	; (b4f90 <loop+0x1c4>)
    bool valueSensor1 = leerSensor(idSensor[0], condicionSensor[0], puertosSensores[0]);
   b4ebc:	f7ff fee4 	bl	b4c88 <_Z10leerSensoriii>
   b4ec0:	4604      	mov	r4, r0
    Serial.printlnf("Sensor 1: %s", valueSensor1 ? "True" : "False");
   b4ec2:	f002 fe8d 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4ec6:	2c00      	cmp	r4, #0
   b4ec8:	bf14      	ite	ne
   b4eca:	4642      	movne	r2, r8
   b4ecc:	463a      	moveq	r2, r7
   b4ece:	4931      	ldr	r1, [pc, #196]	; (b4f94 <loop+0x1c8>)
   b4ed0:	f7ff f904 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    // Operacion nos permite juntar el output de dos sensores ya sea con AND u OR.
    int operacion = valueSensor1;

    // Por defecto operacion tipo AND a falta de tarjeta.
    // Por lo que solo si sensor1 TRUE y hay dos sensores, leemos el valor del sensor 2;
    if (num == 2 && valueSensor1)
   b4ed4:	2e02      	cmp	r6, #2
   b4ed6:	d112      	bne.n	b4efe <loop+0x132>
   b4ed8:	b18c      	cbz	r4, b4efe <loop+0x132>
    {
      bool valueSensor2 = leerSensor(idSensor[1], condicionSensor[1], puertosSensores[1]);
   b4eda:	f8db 2004 	ldr.w	r2, [fp, #4]
   b4ede:	f8da 1004 	ldr.w	r1, [sl, #4]
   b4ee2:	f8d9 0004 	ldr.w	r0, [r9, #4]
   b4ee6:	f7ff fecf 	bl	b4c88 <_Z10leerSensoriii>
   b4eea:	4604      	mov	r4, r0
      Serial.printlnf("Sensor 2: %s", valueSensor2 ? "True" : "False");
   b4eec:	f002 fe78 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4ef0:	4929      	ldr	r1, [pc, #164]	; (b4f98 <loop+0x1cc>)
   b4ef2:	2c00      	cmp	r4, #0
   b4ef4:	bf14      	ite	ne
   b4ef6:	4642      	movne	r2, r8
   b4ef8:	463a      	moveq	r2, r7
   b4efa:	f7ff f8ef 	bl	b40dc <_ZN5Print8printlnfEPKcz>
      // La asignacion de operacion podra verse modificada con una carta condicional (AND / OR)
      valueSensor2 ? operacion = true : operacion = false;
    }

    // Si tenemos un actuador.
    if (puertoActuador != -1)
   b4efe:	4b27      	ldr	r3, [pc, #156]	; (b4f9c <loop+0x1d0>)
   b4f00:	6819      	ldr	r1, [r3, #0]
   b4f02:	1c4b      	adds	r3, r1, #1
   b4f04:	d006      	beq.n	b4f14 <loop+0x148>
    {
      // Ejecutamos el actuador (LED o Zumbador) con toda la informacion necesaria;
      tagInfo[2] == 0 ? activarLED(tagInfo[3], puertoActuador, operacion) : activarZumbador(tagInfo[3], puertoActuador, operacion);
   b4f06:	68ab      	ldr	r3, [r5, #8]
   b4f08:	68e8      	ldr	r0, [r5, #12]
   b4f0a:	f004 0201 	and.w	r2, r4, #1
   b4f0e:	bb1b      	cbnz	r3, b4f58 <loop+0x18c>
   b4f10:	f7ff fcc4 	bl	b489c <_Z10activarLEDiib>
    }
  }

  display.display();
   b4f14:	4814      	ldr	r0, [pc, #80]	; (b4f68 <loop+0x19c>)
}
   b4f16:	b003      	add	sp, #12
   b4f18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  display.display();
   b4f1c:	f001 b85c 	b.w	b5fd8 <_ZN16Adafruit_SSD13067displayEv>
        Serial.println("Se espera actuador");
   b4f20:	f002 fe5e 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4f24:	491e      	ldr	r1, [pc, #120]	; (b4fa0 <loop+0x1d4>)
        Serial.println("Error: necesario al menos un sensor");
   b4f26:	f002 fba8 	bl	b767a <_ZN5Print7printlnEPKc>
   b4f2a:	e7b0      	b.n	b4e8e <loop+0xc2>
      int num = numSensores(sensoresArray);
   b4f2c:	f7ff fad6 	bl	b44dc <_Z11numSensoresPb>
      if (num >= 1)
   b4f30:	2800      	cmp	r0, #0
   b4f32:	dd0d      	ble.n	b4f50 <loop+0x184>
        int puerto = asignarPuerto(tagInfo[1]);
   b4f34:	6868      	ldr	r0, [r5, #4]
   b4f36:	f7ff fa6f 	bl	b4418 <_Z13asignarPuertoi>
        if (puerto != -1)
   b4f3a:	4b18      	ldr	r3, [pc, #96]	; (b4f9c <loop+0x1d0>)
   b4f3c:	1c42      	adds	r2, r0, #1
          puertoActuador = puerto;
   b4f3e:	bf18      	it	ne
   b4f40:	6018      	strne	r0, [r3, #0]
        displayPrint(esSensor(tagInfo[0]), esAnalogico(tagInfo[1]), tagInfo[2], tagInfo[3], puertoActuador);
   b4f42:	681b      	ldr	r3, [r3, #0]
   b4f44:	9300      	str	r3, [sp, #0]
   b4f46:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4f4a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   b4f4e:	e796      	b.n	b4e7e <loop+0xb2>
        Serial.println("Error: necesario al menos un sensor");
   b4f50:	f002 fe46 	bl	b7be0 <_Z16_fetch_usbserialv>
   b4f54:	4913      	ldr	r1, [pc, #76]	; (b4fa4 <loop+0x1d8>)
   b4f56:	e7e6      	b.n	b4f26 <loop+0x15a>
      tagInfo[2] == 0 ? activarLED(tagInfo[3], puertoActuador, operacion) : activarZumbador(tagInfo[3], puertoActuador, operacion);
   b4f58:	f7ff fccc 	bl	b48f4 <_Z15activarZumbadoriib>
   b4f5c:	e7da      	b.n	b4f14 <loop+0x148>
}
   b4f5e:	b003      	add	sp, #12
   b4f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f64:	2003e6ab 	.word	0x2003e6ab
   b4f68:	2003e634 	.word	0x2003e634
   b4f6c:	2003e554 	.word	0x2003e554
   b4f70:	000b89c7 	.word	0x000b89c7
   b4f74:	000b89d1 	.word	0x000b89d1
   b4f78:	000b89ea 	.word	0x000b89ea
   b4f7c:	000b89dd 	.word	0x000b89dd
   b4f80:	2003e6c0 	.word	0x2003e6c0
   b4f84:	2003e530 	.word	0x2003e530
   b4f88:	2003e53c 	.word	0x2003e53c
   b4f8c:	2003e54c 	.word	0x2003e54c
   b4f90:	000b89fa 	.word	0x000b89fa
   b4f94:	000b8a37 	.word	0x000b8a37
   b4f98:	000b8a44 	.word	0x000b8a44
   b4f9c:	2003e544 	.word	0x2003e544
   b4fa0:	000b8a00 	.word	0x000b8a00
   b4fa4:	000b8a13 	.word	0x000b8a13
   b4fa8:	000b89f5 	.word	0x000b89f5

000b4fac <_GLOBAL__sub_I_trailerBlock>:
   b4fac:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b4fae:	4c10      	ldr	r4, [pc, #64]	; (b4ff0 <_GLOBAL__sub_I_trailerBlock+0x44>)
Adafruit_SSD1306 display(-1);
   b4fb0:	4810      	ldr	r0, [pc, #64]	; (b4ff4 <_GLOBAL__sub_I_trailerBlock+0x48>)
   b4fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4fb6:	f000 fcb3 	bl	b5920 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b4fba:	490f      	ldr	r1, [pc, #60]	; (b4ff8 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	f002 fcb8 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fc2:	490d      	ldr	r1, [pc, #52]	; (b4ff8 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b4fc4:	f104 0010 	add.w	r0, r4, #16
   b4fc8:	f002 fcb3 	bl	b7932 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b4fcc:	2208      	movs	r2, #8
   b4fce:	480b      	ldr	r0, [pc, #44]	; (b4ffc <_GLOBAL__sub_I_trailerBlock+0x50>)
   b4fd0:	2110      	movs	r1, #16
   b4fd2:	f001 f983 	bl	b62dc <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4fd6:	4b0a      	ldr	r3, [pc, #40]	; (b5000 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b4fd8:	2200      	movs	r2, #0
   b4fda:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4fde:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4fe2:	609a      	str	r2, [r3, #8]
   b4fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4fe8:	2002      	movs	r0, #2
   b4fea:	f002 b847 	b.w	b707c <set_system_mode>
   b4fee:	bf00      	nop
   b4ff0:	2003e684 	.word	0x2003e684
   b4ff4:	2003e634 	.word	0x2003e634
   b4ff8:	000b8a51 	.word	0x000b8a51
   b4ffc:	2003e6ab 	.word	0x2003e6ab
   b5000:	2003e5e8 	.word	0x2003e5e8

000b5004 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5008:	b085      	sub	sp, #20
   b500a:	461f      	mov	r7, r3
   b500c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5010:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5014:	eba8 0902 	sub.w	r9, r8, r2
   b5018:	eba7 0a01 	sub.w	sl, r7, r1
   b501c:	f1b9 0f00 	cmp.w	r9, #0
   b5020:	bfb8      	it	lt
   b5022:	f1c9 0900 	rsblt	r9, r9, #0
   b5026:	f1ba 0f00 	cmp.w	sl, #0
   b502a:	bfb8      	it	lt
   b502c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5030:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5032:	4683      	mov	fp, r0
   b5034:	460c      	mov	r4, r1
   b5036:	4615      	mov	r5, r2
    if (steep) {
   b5038:	dd04      	ble.n	b5044 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b503a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b503c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b503e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5040:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5042:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5044:	42bc      	cmp	r4, r7
   b5046:	dd05      	ble.n	b5054 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5048:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b504a:	4645      	mov	r5, r8
   b504c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b504e:	4622      	mov	r2, r4
   b5050:	463c      	mov	r4, r7
   b5052:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5054:	1b3e      	subs	r6, r7, r4
   b5056:	b2b2      	uxth	r2, r6
   b5058:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b505a:	eba8 0205 	sub.w	r2, r8, r5
   b505e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5062:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5066:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b506a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b506e:	4545      	cmp	r5, r8
   b5070:	bfb4      	ite	lt
   b5072:	2201      	movlt	r2, #1
   b5074:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5078:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b507a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b507c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b507e:	42bc      	cmp	r4, r7
   b5080:	dc1c      	bgt.n	b50bc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5082:	f8db 2000 	ldr.w	r2, [fp]
   b5086:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5088:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b508a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b508e:	bfc7      	ittee	gt
   b5090:	4629      	movgt	r1, r5
   b5092:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5094:	462a      	movle	r2, r5
   b5096:	4621      	movle	r1, r4
   b5098:	4658      	mov	r0, fp
   b509a:	47c0      	blx	r8
        }
        err -= dy;
   b509c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b509e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b50a0:	1ab6      	subs	r6, r6, r2
   b50a2:	b2b1      	uxth	r1, r6
   b50a4:	b236      	sxth	r6, r6
        if (err < 0) {
   b50a6:	2e00      	cmp	r6, #0
   b50a8:	da05      	bge.n	b50b6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b50aa:	9a02      	ldr	r2, [sp, #8]
   b50ac:	4415      	add	r5, r2
            err += dx;
   b50ae:	9a00      	ldr	r2, [sp, #0]
   b50b0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b50b2:	b22d      	sxth	r5, r5
            err += dx;
   b50b4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b50b6:	3401      	adds	r4, #1
   b50b8:	b224      	sxth	r4, r4
   b50ba:	e7e0      	b.n	b507e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b50bc:	b005      	add	sp, #20
   b50be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b50c2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b50c2:	4770      	bx	lr

000b50c4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b50c4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b50c6:	6804      	ldr	r4, [r0, #0]
   b50c8:	6924      	ldr	r4, [r4, #16]
   b50ca:	46a4      	mov	ip, r4
}
   b50cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b50d0:	4760      	bx	ip

000b50d2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b50d2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b50d4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b50d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b50da:	9502      	str	r5, [sp, #8]
   b50dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b50de:	46a4      	mov	ip, r4
}
   b50e0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b50e2:	4760      	bx	ip

000b50e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b50e4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b50e6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b50e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b50ec:	9502      	str	r5, [sp, #8]
   b50ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b50f0:	46a4      	mov	ip, r4
}
   b50f2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b50f4:	4760      	bx	ip

000b50f6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b50f6:	b470      	push	{r4, r5, r6}
   b50f8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b50fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5100:	6804      	ldr	r4, [r0, #0]
   b5102:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5106:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5108:	46a4      	mov	ip, r4
}
   b510a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b510c:	4760      	bx	ip

000b510e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b510e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5112:	461c      	mov	r4, r3
    startWrite();
   b5114:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5116:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b511a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b511c:	4605      	mov	r5, r0
   b511e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5120:	3c01      	subs	r4, #1
   b5122:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5124:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5126:	b224      	sxth	r4, r4
    startWrite();
   b5128:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b512a:	682b      	ldr	r3, [r5, #0]
   b512c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5130:	9400      	str	r4, [sp, #0]
   b5132:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5134:	4628      	mov	r0, r5
   b5136:	463b      	mov	r3, r7
   b5138:	4632      	mov	r2, r6
   b513a:	4639      	mov	r1, r7
   b513c:	47a0      	blx	r4
    endWrite();
   b513e:	682b      	ldr	r3, [r5, #0]
   b5140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5142:	4628      	mov	r0, r5
}
   b5144:	b002      	add	sp, #8
   b5146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b514a:	4718      	bx	r3

000b514c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b514c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5150:	461d      	mov	r5, r3
    startWrite();
   b5152:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5154:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5158:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b515a:	4604      	mov	r4, r0
   b515c:	4617      	mov	r7, r2
   b515e:	460e      	mov	r6, r1
    startWrite();
   b5160:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5162:	e9cd 7800 	strd	r7, r8, [sp]
   b5166:	6822      	ldr	r2, [r4, #0]
   b5168:	1e6b      	subs	r3, r5, #1
   b516a:	4433      	add	r3, r6
   b516c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b516e:	4620      	mov	r0, r4
   b5170:	b21b      	sxth	r3, r3
   b5172:	463a      	mov	r2, r7
   b5174:	4631      	mov	r1, r6
   b5176:	47a8      	blx	r5
    endWrite();
   b5178:	6823      	ldr	r3, [r4, #0]
   b517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b517c:	4620      	mov	r0, r4
}
   b517e:	b002      	add	sp, #8
   b5180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5184:	4718      	bx	r3

000b5186 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5186:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b518a:	461e      	mov	r6, r3
    startWrite();
   b518c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b518e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5192:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5194:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5198:	460c      	mov	r4, r1
   b519a:	4605      	mov	r5, r0
   b519c:	4617      	mov	r7, r2
    startWrite();
   b519e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b51a0:	4426      	add	r6, r4
   b51a2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b51a4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b51a6:	da0b      	bge.n	b51c0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b51a8:	f8cd 8000 	str.w	r8, [sp]
   b51ac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b51b0:	4621      	mov	r1, r4
   b51b2:	464b      	mov	r3, r9
   b51b4:	463a      	mov	r2, r7
   b51b6:	4628      	mov	r0, r5
   b51b8:	3401      	adds	r4, #1
   b51ba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b51bc:	b224      	sxth	r4, r4
   b51be:	e7f0      	b.n	b51a2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b51c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51c2:	4628      	mov	r0, r5
}
   b51c4:	b002      	add	sp, #8
   b51c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b51ca:	4718      	bx	r3

000b51cc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b51cc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b51ce:	6802      	ldr	r2, [r0, #0]
   b51d0:	9101      	str	r1, [sp, #4]
   b51d2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b51d6:	9100      	str	r1, [sp, #0]
   b51d8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b51da:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51de:	2200      	movs	r2, #0
   b51e0:	4611      	mov	r1, r2
   b51e2:	47a0      	blx	r4
}
   b51e4:	b002      	add	sp, #8
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b51e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b51ec:	4299      	cmp	r1, r3
        uint16_t color) {
   b51ee:	4616      	mov	r6, r2
   b51f0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b51f4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b51f8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b51fa:	4680      	mov	r8, r0
   b51fc:	460d      	mov	r5, r1
   b51fe:	461c      	mov	r4, r3
    if(x0 == x1){
   b5200:	d113      	bne.n	b522a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5202:	42be      	cmp	r6, r7
   b5204:	bfc8      	it	gt
   b5206:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5208:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b520c:	bfc4      	itt	gt
   b520e:	463e      	movgt	r6, r7
   b5210:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5212:	1c7b      	adds	r3, r7, #1
   b5214:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5216:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5218:	b21b      	sxth	r3, r3
   b521a:	4632      	mov	r2, r6
   b521c:	4629      	mov	r1, r5
   b521e:	4640      	mov	r0, r8
   b5220:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5222:	b003      	add	sp, #12
   b5224:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5228:	4760      	bx	ip
    } else if(y0 == y1){
   b522a:	42be      	cmp	r6, r7
   b522c:	d10a      	bne.n	b5244 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b522e:	4299      	cmp	r1, r3
   b5230:	bfc2      	ittt	gt
   b5232:	460b      	movgt	r3, r1
   b5234:	4625      	movgt	r5, r4
   b5236:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5238:	1c63      	adds	r3, r4, #1
   b523a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b523e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5240:	1b5b      	subs	r3, r3, r5
   b5242:	e7e9      	b.n	b5218 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5244:	6953      	ldr	r3, [r2, #20]
   b5246:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5248:	e9cd 7900 	strd	r7, r9, [sp]
   b524c:	f8d8 3000 	ldr.w	r3, [r8]
   b5250:	4640      	mov	r0, r8
   b5252:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5254:	4632      	mov	r2, r6
   b5256:	4623      	mov	r3, r4
   b5258:	4629      	mov	r1, r5
   b525a:	47b8      	blx	r7
        endWrite();
   b525c:	f8d8 3000 	ldr.w	r3, [r8]
   b5260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5262:	4640      	mov	r0, r8
}
   b5264:	b003      	add	sp, #12
   b5266:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b526a:	4718      	bx	r3

000b526c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b526c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5270:	461d      	mov	r5, r3
    startWrite();
   b5272:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5274:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5278:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b527a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b527e:	4604      	mov	r4, r0
   b5280:	460f      	mov	r7, r1
   b5282:	4616      	mov	r6, r2
    startWrite();
   b5284:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5286:	6823      	ldr	r3, [r4, #0]
   b5288:	f8cd 8000 	str.w	r8, [sp]
   b528c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5290:	4632      	mov	r2, r6
   b5292:	462b      	mov	r3, r5
   b5294:	4639      	mov	r1, r7
   b5296:	4620      	mov	r0, r4
   b5298:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b529a:	6823      	ldr	r3, [r4, #0]
   b529c:	f8cd 8000 	str.w	r8, [sp]
   b52a0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b52a4:	4432      	add	r2, r6
   b52a6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b52aa:	4639      	mov	r1, r7
   b52ac:	462b      	mov	r3, r5
   b52ae:	4620      	mov	r0, r4
   b52b0:	b212      	sxth	r2, r2
   b52b2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b52b4:	6823      	ldr	r3, [r4, #0]
   b52b6:	f8cd 8000 	str.w	r8, [sp]
   b52ba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b52be:	4632      	mov	r2, r6
   b52c0:	464b      	mov	r3, r9
   b52c2:	4639      	mov	r1, r7
   b52c4:	4620      	mov	r0, r4
   b52c6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b52c8:	1e6b      	subs	r3, r5, #1
   b52ca:	19d9      	adds	r1, r3, r7
   b52cc:	6823      	ldr	r3, [r4, #0]
   b52ce:	f8cd 8000 	str.w	r8, [sp]
   b52d2:	6a1d      	ldr	r5, [r3, #32]
   b52d4:	4620      	mov	r0, r4
   b52d6:	464b      	mov	r3, r9
   b52d8:	4632      	mov	r2, r6
   b52da:	b209      	sxth	r1, r1
   b52dc:	47a8      	blx	r5
    endWrite();
   b52de:	6823      	ldr	r3, [r4, #0]
   b52e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52e2:	4620      	mov	r0, r4
}
   b52e4:	b002      	add	sp, #8
   b52e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b52ea:	4718      	bx	r3

000b52ec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b52ec:	4770      	bx	lr

000b52ee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b52ee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b52f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b52f6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b52f8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b52fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b52fe:	bf59      	ittee	pl
   b5300:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5302:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5304:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5306:	81c3      	strhmi	r3, [r0, #14]
}
   b5308:	4770      	bx	lr
	...

000b530c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b530c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b530e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5310:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5312:	4a07      	ldr	r2, [pc, #28]	; (b5330 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5314:	4d07      	ldr	r5, [pc, #28]	; (b5334 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5316:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5318:	2400      	movs	r4, #0
    _width    = WIDTH;
   b531a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b531c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5320:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5324:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5326:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5328:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b532a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b532c:	6204      	str	r4, [r0, #32]
}
   b532e:	bd30      	pop	{r4, r5, pc}
   b5330:	01000101 	.word	0x01000101
   b5334:	000b8f5c 	.word	0x000b8f5c

000b5338 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b533c:	b089      	sub	sp, #36	; 0x24
   b533e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5342:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5344:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5348:	9304      	str	r3, [sp, #16]
   b534a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b534e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5350:	9305      	str	r3, [sp, #20]
   b5352:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5356:	4604      	mov	r4, r0
    startWrite();
   b5358:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b535a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b535e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5362:	bf48      	it	mi
   b5364:	f108 020e 	addmi.w	r2, r8, #14
   b5368:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b536c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b536e:	4635      	mov	r5, r6
   b5370:	9b03      	ldr	r3, [sp, #12]
   b5372:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5374:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5378:	189a      	adds	r2, r3, r2
   b537a:	9b05      	ldr	r3, [sp, #20]
   b537c:	428b      	cmp	r3, r1
   b537e:	b212      	sxth	r2, r2
   b5380:	dd27      	ble.n	b53d2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5382:	9b04      	ldr	r3, [sp, #16]
   b5384:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5386:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b538a:	9306      	str	r3, [sp, #24]
   b538c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5390:	4580      	cmp	r8, r0
   b5392:	fa1f f189 	uxth.w	r1, r9
   b5396:	dd17      	ble.n	b53c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5398:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b539a:	bf05      	ittet	eq
   b539c:	9b06      	ldreq	r3, [sp, #24]
   b539e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b53a0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53a2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b53a4:	bf18      	it	ne
   b53a6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b53a8:	062b      	lsls	r3, r5, #24
   b53aa:	d50a      	bpl.n	b53c2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b53ac:	9b02      	ldr	r3, [sp, #8]
   b53ae:	6820      	ldr	r0, [r4, #0]
   b53b0:	9207      	str	r2, [sp, #28]
   b53b2:	4419      	add	r1, r3
   b53b4:	6983      	ldr	r3, [r0, #24]
   b53b6:	b209      	sxth	r1, r1
   b53b8:	461f      	mov	r7, r3
   b53ba:	4620      	mov	r0, r4
   b53bc:	4653      	mov	r3, sl
   b53be:	47b8      	blx	r7
   b53c0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b53c2:	f109 0901 	add.w	r9, r9, #1
   b53c6:	e7e1      	b.n	b538c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b53c8:	9b01      	ldr	r3, [sp, #4]
   b53ca:	3301      	adds	r3, #1
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	445e      	add	r6, fp
   b53d0:	e7ce      	b.n	b5370 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b53d2:	6823      	ldr	r3, [r4, #0]
   b53d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53d6:	4620      	mov	r0, r4
}
   b53d8:	b009      	add	sp, #36	; 0x24
   b53da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b53de:	4718      	bx	r3

000b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e4:	ed2d 8b02 	vpush	{d8}
   b53e8:	b091      	sub	sp, #68	; 0x44
   b53ea:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b53ec:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b53ee:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b53f2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b53f6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b53fa:	9103      	str	r1, [sp, #12]
   b53fc:	461f      	mov	r7, r3
   b53fe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5402:	9304      	str	r3, [sp, #16]
   b5404:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5406:	2a00      	cmp	r2, #0
   b5408:	f040 80c5 	bne.w	b5596 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b540c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5410:	428b      	cmp	r3, r1
   b5412:	f340 814c 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5416:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b541a:	42b3      	cmp	r3, r6
   b541c:	f340 8147 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5420:	2306      	movs	r3, #6
   b5422:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5426:	2b00      	cmp	r3, #0
   b5428:	f340 8141 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b542c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5430:	2b00      	cmp	r3, #0
   b5432:	f340 813c 	ble.w	b56ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5436:	7f03      	ldrb	r3, [r0, #28]
   b5438:	b91b      	cbnz	r3, b5442 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b543a:	2faf      	cmp	r7, #175	; 0xaf
   b543c:	bf84      	itt	hi
   b543e:	3701      	addhi	r7, #1
   b5440:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5442:	f8db 3000 	ldr.w	r3, [fp]
   b5446:	4658      	mov	r0, fp
   b5448:	695b      	ldr	r3, [r3, #20]
   b544a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b544c:	2205      	movs	r2, #5
   b544e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5450:	2200      	movs	r2, #0
   b5452:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5454:	4a98      	ldr	r2, [pc, #608]	; (b56b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5456:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b545a:	18d3      	adds	r3, r2, r3
   b545c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b545e:	b2b3      	uxth	r3, r6
   b5460:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5462:	9a05      	ldr	r2, [sp, #20]
   b5464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5466:	5c9b      	ldrb	r3, [r3, r2]
   b5468:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b546a:	b2ab      	uxth	r3, r5
   b546c:	930b      	str	r3, [sp, #44]	; 0x2c
   b546e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5472:	9308      	str	r3, [sp, #32]
   b5474:	9b03      	ldr	r3, [sp, #12]
   b5476:	fb02 f905 	mul.w	r9, r2, r5
   b547a:	fa19 f983 	uxtah	r9, r9, r3
   b547e:	fa0f f389 	sxth.w	r3, r9
   b5482:	ee08 3a10 	vmov	s16, r3
   b5486:	2308      	movs	r3, #8
   b5488:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b548a:	9b03      	ldr	r3, [sp, #12]
   b548c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5490:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5494:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5498:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b549a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b549e:	07d2      	lsls	r2, r2, #31
   b54a0:	d552      	bpl.n	b5548 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b54a2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b54a4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b54a8:	d13e      	bne.n	b5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b54aa:	2c01      	cmp	r4, #1
   b54ac:	d13c      	bne.n	b5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b54ae:	699b      	ldr	r3, [r3, #24]
   b54b0:	9906      	ldr	r1, [sp, #24]
   b54b2:	461f      	mov	r7, r3
   b54b4:	9b04      	ldr	r3, [sp, #16]
   b54b6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b54b8:	b212      	sxth	r2, r2
   b54ba:	4651      	mov	r1, sl
   b54bc:	4658      	mov	r0, fp
   b54be:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b54c0:	f109 0301 	add.w	r3, r9, #1
   b54c4:	fa4f f983 	sxtb.w	r9, r3
   b54c8:	9b07      	ldr	r3, [sp, #28]
   b54ca:	085b      	lsrs	r3, r3, #1
   b54cc:	9307      	str	r3, [sp, #28]
   b54ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b54d0:	3b01      	subs	r3, #1
   b54d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54d6:	930a      	str	r3, [sp, #40]	; 0x28
   b54d8:	d1de      	bne.n	b5498 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b54da:	9f05      	ldr	r7, [sp, #20]
   b54dc:	3701      	adds	r7, #1
   b54de:	b27b      	sxtb	r3, r7
   b54e0:	9305      	str	r3, [sp, #20]
   b54e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b54e4:	3b01      	subs	r3, #1
   b54e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b54ea:	9309      	str	r3, [sp, #36]	; 0x24
   b54ec:	d1b9      	bne.n	b5462 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b54ee:	9b04      	ldr	r3, [sp, #16]
   b54f0:	4543      	cmp	r3, r8
   b54f2:	d00f      	beq.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b54f4:	2d01      	cmp	r5, #1
   b54f6:	f8db 3000 	ldr.w	r3, [fp]
   b54fa:	d13b      	bne.n	b5574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b54fc:	2c01      	cmp	r4, #1
   b54fe:	d139      	bne.n	b5574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5500:	9908      	ldr	r1, [sp, #32]
   b5502:	f8cd 8000 	str.w	r8, [sp]
   b5506:	3105      	adds	r1, #5
   b5508:	6a1c      	ldr	r4, [r3, #32]
   b550a:	4632      	mov	r2, r6
   b550c:	2308      	movs	r3, #8
   b550e:	b209      	sxth	r1, r1
   b5510:	4658      	mov	r0, fp
   b5512:	47a0      	blx	r4
        endWrite();
   b5514:	f8db 3000 	ldr.w	r3, [fp]
   b5518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b551a:	4658      	mov	r0, fp
}
   b551c:	b011      	add	sp, #68	; 0x44
   b551e:	ecbd 8b02 	vpop	{d8}
   b5522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5526:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5528:	9906      	ldr	r1, [sp, #24]
   b552a:	fb14 f202 	smulbb	r2, r4, r2
   b552e:	440a      	add	r2, r1
   b5530:	9904      	ldr	r1, [sp, #16]
   b5532:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5534:	9400      	str	r4, [sp, #0]
   b5536:	69db      	ldr	r3, [r3, #28]
   b5538:	ee18 1a10 	vmov	r1, s16
   b553c:	461f      	mov	r7, r3
   b553e:	b212      	sxth	r2, r2
   b5540:	462b      	mov	r3, r5
   b5542:	4658      	mov	r0, fp
   b5544:	47b8      	blx	r7
   b5546:	e7bb      	b.n	b54c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5548:	9a04      	ldr	r2, [sp, #16]
   b554a:	4542      	cmp	r2, r8
   b554c:	d0b8      	beq.n	b54c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b554e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5550:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5554:	d107      	bne.n	b5566 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5556:	2c01      	cmp	r4, #1
   b5558:	d105      	bne.n	b5566 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b555a:	699b      	ldr	r3, [r3, #24]
   b555c:	9906      	ldr	r1, [sp, #24]
   b555e:	461f      	mov	r7, r3
   b5560:	440a      	add	r2, r1
   b5562:	4643      	mov	r3, r8
   b5564:	e7a8      	b.n	b54b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5566:	9906      	ldr	r1, [sp, #24]
   b5568:	f8cd 8004 	str.w	r8, [sp, #4]
   b556c:	fb14 f202 	smulbb	r2, r4, r2
   b5570:	440a      	add	r2, r1
   b5572:	e7df      	b.n	b5534 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5576:	f8cd 8004 	str.w	r8, [sp, #4]
   b557a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b557e:	9a08      	ldr	r2, [sp, #32]
   b5580:	00e4      	lsls	r4, r4, #3
   b5582:	440a      	add	r2, r1
   b5584:	4611      	mov	r1, r2
   b5586:	9400      	str	r4, [sp, #0]
   b5588:	69dc      	ldr	r4, [r3, #28]
   b558a:	4632      	mov	r2, r6
   b558c:	462b      	mov	r3, r5
   b558e:	b209      	sxth	r1, r1
   b5590:	4658      	mov	r0, fp
   b5592:	47a0      	blx	r4
        endWrite();
   b5594:	e7be      	b.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5596:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5598:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b559a:	6812      	ldr	r2, [r2, #0]
   b559c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b559e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b55a0:	b2ff      	uxtb	r7, r7
   b55a2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b55a6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b55aa:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b55ac:	789a      	ldrb	r2, [r3, #2]
   b55ae:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b55b0:	78da      	ldrb	r2, [r3, #3]
   b55b2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b55b4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b55ba:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b55be:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b55c0:	d801      	bhi.n	b55c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b55c2:	2c01      	cmp	r4, #1
   b55c4:	d957      	bls.n	b5676 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b55c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b55ca:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b55cc:	fa0f f38a 	sxth.w	r3, sl
   b55d0:	9307      	str	r3, [sp, #28]
        startWrite();
   b55d2:	f8db 3000 	ldr.w	r3, [fp]
   b55d6:	4658      	mov	r0, fp
   b55d8:	695b      	ldr	r3, [r3, #20]
   b55da:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55dc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55de:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55e2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55e4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b55e8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b55ea:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b55ec:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b55ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b55f0:	429f      	cmp	r7, r3
   b55f2:	d28f      	bcs.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b55f4:	9b07      	ldr	r3, [sp, #28]
   b55f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b55f8:	443b      	add	r3, r7
   b55fa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b55fe:	2200      	movs	r2, #0
   b5600:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5604:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5606:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b560a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b560e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5612:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5614:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5616:	9905      	ldr	r1, [sp, #20]
   b5618:	4291      	cmp	r1, r2
   b561a:	d241      	bcs.n	b56a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b561c:	1c5a      	adds	r2, r3, #1
   b561e:	b2d2      	uxtb	r2, r2
   b5620:	075b      	lsls	r3, r3, #29
   b5622:	920d      	str	r2, [sp, #52]	; 0x34
   b5624:	d107      	bne.n	b5636 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5626:	9b06      	ldr	r3, [sp, #24]
   b5628:	9906      	ldr	r1, [sp, #24]
   b562a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b562c:	3301      	adds	r3, #1
   b562e:	b29b      	uxth	r3, r3
   b5630:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5634:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5636:	f019 0f80 	tst.w	r9, #128	; 0x80
   b563a:	d012      	beq.n	b5662 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b563c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b563e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5642:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5646:	d11a      	bne.n	b567e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5648:	2c01      	cmp	r4, #1
   b564a:	d118      	bne.n	b567e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b564c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b564e:	699b      	ldr	r3, [r3, #24]
   b5650:	4411      	add	r1, r2
   b5652:	9a05      	ldr	r2, [sp, #20]
   b5654:	4411      	add	r1, r2
   b5656:	461e      	mov	r6, r3
   b5658:	4652      	mov	r2, sl
   b565a:	9b04      	ldr	r3, [sp, #16]
   b565c:	b209      	sxth	r1, r1
   b565e:	4658      	mov	r0, fp
   b5660:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5662:	9e05      	ldr	r6, [sp, #20]
   b5664:	3601      	adds	r6, #1
   b5666:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5668:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b566c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b566e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5674:	e7ce      	b.n	b5614 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5676:	2300      	movs	r3, #0
   b5678:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b567c:	e7a9      	b.n	b55d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b567e:	9805      	ldr	r0, [sp, #20]
   b5680:	9a08      	ldr	r2, [sp, #32]
   b5682:	4402      	add	r2, r0
   b5684:	fb02 1105 	mla	r1, r2, r5, r1
   b5688:	9a04      	ldr	r2, [sp, #16]
   b568a:	e9cd 4200 	strd	r4, r2, [sp]
   b568e:	69db      	ldr	r3, [r3, #28]
   b5690:	ee18 2a10 	vmov	r2, s16
   b5694:	461e      	mov	r6, r3
   b5696:	b209      	sxth	r1, r1
   b5698:	462b      	mov	r3, r5
   b569a:	4658      	mov	r0, fp
   b569c:	47b0      	blx	r6
   b569e:	e7e0      	b.n	b5662 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b56a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b56a2:	3701      	adds	r7, #1
   b56a4:	4498      	add	r8, r3
   b56a6:	fa5f f888 	uxtb.w	r8, r8
   b56aa:	b2ff      	uxtb	r7, r7
   b56ac:	e79f      	b.n	b55ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b56ae:	b011      	add	sp, #68	; 0x44
   b56b0:	ecbd 8b02 	vpop	{d8}
   b56b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56b8:	000b8a53 	.word	0x000b8a53

000b56bc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b56bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b56be:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b56c0:	b085      	sub	sp, #20
   b56c2:	4604      	mov	r4, r0
   b56c4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b56c6:	2a00      	cmp	r2, #0
   b56c8:	d134      	bne.n	b5734 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b56ca:	290a      	cmp	r1, #10
   b56cc:	d108      	bne.n	b56e0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b56ce:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b56d0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b56d2:	7e42      	ldrb	r2, [r0, #25]
   b56d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b56d8:	8263      	strh	r3, [r4, #18]
}
   b56da:	2001      	movs	r0, #1
   b56dc:	b005      	add	sp, #20
   b56de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b56e0:	290d      	cmp	r1, #13
   b56e2:	d0fa      	beq.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56e4:	7ee1      	ldrb	r1, [r4, #27]
   b56e6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b56e8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b56ea:	b171      	cbz	r1, b570a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b56ec:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b56f0:	2106      	movs	r1, #6
   b56f2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b56f6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b56fa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b56fc:	bfc1      	itttt	gt
   b56fe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5702:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5704:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5708:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b570a:	8ae2      	ldrh	r2, [r4, #22]
   b570c:	9201      	str	r2, [sp, #4]
   b570e:	8aa2      	ldrh	r2, [r4, #20]
   b5710:	9200      	str	r2, [sp, #0]
   b5712:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5716:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b571a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b571e:	4620      	mov	r0, r4
   b5720:	f7ff fe5e 	bl	b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5724:	7e23      	ldrb	r3, [r4, #24]
   b5726:	8a22      	ldrh	r2, [r4, #16]
   b5728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b572c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5730:	8223      	strh	r3, [r4, #16]
   b5732:	e7d2      	b.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5734:	290a      	cmp	r1, #10
   b5736:	d107      	bne.n	b5748 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5738:	2300      	movs	r3, #0
   b573a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b573c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b573e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5740:	8a43      	ldrh	r3, [r0, #18]
   b5742:	fb01 3302 	mla	r3, r1, r2, r3
   b5746:	e7c7      	b.n	b56d8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5748:	290d      	cmp	r1, #13
   b574a:	d0c6      	beq.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b574c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b574e:	42a9      	cmp	r1, r5
   b5750:	d3c3      	bcc.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5752:	7a51      	ldrb	r1, [r2, #9]
   b5754:	4299      	cmp	r1, r3
   b5756:	d3c0      	bcc.n	b56da <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5758:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b575a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b575c:	b2ed      	uxtb	r5, r5
   b575e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5762:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5764:	b328      	cbz	r0, b57b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5766:	78e9      	ldrb	r1, [r5, #3]
   b5768:	b319      	cbz	r1, b57b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b576a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b576c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b576e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5770:	b191      	cbz	r1, b5798 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5772:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5776:	4408      	add	r0, r1
   b5778:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b577c:	fb06 1100 	mla	r1, r6, r0, r1
   b5780:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5784:	4281      	cmp	r1, r0
   b5786:	dd07      	ble.n	b5798 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5788:	2000      	movs	r0, #0
   b578a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b578c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5790:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5792:	fb02 1207 	mla	r2, r2, r7, r1
   b5796:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5798:	8ae2      	ldrh	r2, [r4, #22]
   b579a:	9201      	str	r2, [sp, #4]
   b579c:	8aa2      	ldrh	r2, [r4, #20]
   b579e:	9200      	str	r2, [sp, #0]
   b57a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b57a4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b57a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff fe17 	bl	b53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b57b2:	7929      	ldrb	r1, [r5, #4]
   b57b4:	7e22      	ldrb	r2, [r4, #24]
   b57b6:	8a23      	ldrh	r3, [r4, #16]
   b57b8:	fb01 3302 	mla	r3, r1, r2, r3
   b57bc:	e7b8      	b.n	b5730 <_ZN12Adafruit_GFX5writeEh+0x74>

000b57be <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b57be:	2901      	cmp	r1, #1
   b57c0:	bf38      	it	cc
   b57c2:	2101      	movcc	r1, #1
   b57c4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b57c6:	7641      	strb	r1, [r0, #25]
}
   b57c8:	4770      	bx	lr

000b57ca <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b57ca:	4770      	bx	lr

000b57cc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b57cc:	b510      	push	{r4, lr}
  }
   b57ce:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b57d0:	4604      	mov	r4, r0
  }
   b57d2:	f7fe fc60 	bl	b4096 <_ZdlPvj>
   b57d6:	4620      	mov	r0, r4
   b57d8:	bd10      	pop	{r4, pc}
	...

000b57dc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b57dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b57de:	4604      	mov	r4, r0
   b57e0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b57e2:	7922      	ldrb	r2, [r4, #4]
   b57e4:	68a3      	ldr	r3, [r4, #8]
   b57e6:	b132      	cbz	r2, b57f6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b57e8:	b9a3      	cbnz	r3, b5814 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b57ea:	490b      	ldr	r1, [pc, #44]	; (b5818 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b57ec:	b002      	add	sp, #8
   b57ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b57f2:	f001 bf2f 	b.w	b7654 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b57f6:	4a09      	ldr	r2, [pc, #36]	; (b581c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b57f8:	7b26      	ldrb	r6, [r4, #12]
   b57fa:	4d09      	ldr	r5, [pc, #36]	; (b5820 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b57fc:	4909      	ldr	r1, [pc, #36]	; (b5824 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b57fe:	7b64      	ldrb	r4, [r4, #13]
   b5800:	2e01      	cmp	r6, #1
   b5802:	bf18      	it	ne
   b5804:	4629      	movne	r1, r5
   b5806:	e9cd 1400 	strd	r1, r4, [sp]
   b580a:	4907      	ldr	r1, [pc, #28]	; (b5828 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b580c:	f7fe fc58 	bl	b40c0 <_ZN5Print6printfEPKcz>
  }
   b5810:	b002      	add	sp, #8
   b5812:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5814:	4a05      	ldr	r2, [pc, #20]	; (b582c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5816:	e7ef      	b.n	b57f8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5818:	000b8fbd 	.word	0x000b8fbd
   b581c:	000b8950 	.word	0x000b8950
   b5820:	000b8fb9 	.word	0x000b8fb9
   b5824:	000b8fb5 	.word	0x000b8fb5
   b5828:	000b8fd3 	.word	0x000b8fd3
   b582c:	000b8fac 	.word	0x000b8fac

000b5830 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b5830:	b510      	push	{r4, lr}
   b5832:	4b04      	ldr	r3, [pc, #16]	; (b5844 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5834:	6003      	str	r3, [r0, #0]
   b5836:	4604      	mov	r4, r0
{
  if (buffer)
   b5838:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b583a:	b108      	cbz	r0, b5840 <_ZN16Adafruit_SSD1306D1Ev+0x10>
  {
    free(buffer);
   b583c:	f001 fcba 	bl	b71b4 <free>
    buffer = NULL;
  }
}
   b5840:	4620      	mov	r0, r4
   b5842:	bd10      	pop	{r4, pc}
   b5844:	000b95ec 	.word	0x000b95ec

000b5848 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void)
   b5848:	b510      	push	{r4, lr}
   b584a:	4604      	mov	r4, r0
}
   b584c:	f7ff fff0 	bl	b5830 <_ZN16Adafruit_SSD1306D1Ev>
   b5850:	4620      	mov	r0, r4
   b5852:	2150      	movs	r1, #80	; 0x50
   b5854:	f7fe fc1f 	bl	b4096 <_ZdlPvj>
   b5858:	4620      	mov	r0, r4
   b585a:	bd10      	pop	{r4, pc}

000b585c <_ZN16Adafruit_SSD13069drawPixelEsst>:
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color)
{
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b585c:	2900      	cmp	r1, #0
{
   b585e:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height()))
   b5860:	db4b      	blt.n	b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5862:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5866:	428c      	cmp	r4, r1
   b5868:	dd47      	ble.n	b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b586a:	2a00      	cmp	r2, #0
   b586c:	db45      	blt.n	b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b586e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b5872:	4294      	cmp	r4, r2
   b5874:	dd41      	ble.n	b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5876:	7e84      	ldrb	r4, [r0, #26]
  {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation())
   b5878:	2c02      	cmp	r4, #2
   b587a:	d01f      	beq.n	b58bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b587c:	2c03      	cmp	r4, #3
   b587e:	d026      	beq.n	b58ce <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5880:	2c01      	cmp	r4, #1
   b5882:	d104      	bne.n	b588e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    {
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5884:	8904      	ldrh	r4, [r0, #8]
   b5886:	43d2      	mvns	r2, r2
   b5888:	4414      	add	r4, r2
      break;
   b588a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b588c:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color)
   b588e:	2b01      	cmp	r3, #1
   b5890:	d023      	beq.n	b58da <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b5892:	2b02      	cmp	r3, #2
   b5894:	d032      	beq.n	b58fc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5896:	bb83      	cbnz	r3, b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    {
    case WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   b5898:	2a00      	cmp	r2, #0
   b589a:	4613      	mov	r3, r2
   b589c:	8904      	ldrh	r4, [r0, #8]
   b589e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b58a0:	bfb8      	it	lt
   b58a2:	1dd3      	addlt	r3, r2, #7
   b58a4:	10db      	asrs	r3, r3, #3
   b58a6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b58aa:	f002 0207 	and.w	r2, r2, #7
   b58ae:	2301      	movs	r3, #1
   b58b0:	4093      	lsls	r3, r2
   b58b2:	5c42      	ldrb	r2, [r0, r1]
   b58b4:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b58b8:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   b58ba:	e01e      	b.n	b58fa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   b58bc:	8904      	ldrh	r4, [r0, #8]
   b58be:	3c01      	subs	r4, #1
   b58c0:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b58c2:	8944      	ldrh	r4, [r0, #10]
   b58c4:	43d2      	mvns	r2, r2
   b58c6:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   b58c8:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b58ca:	b212      	sxth	r2, r2
      break;
   b58cc:	e7df      	b.n	b588e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b58ce:	8944      	ldrh	r4, [r0, #10]
   b58d0:	3c01      	subs	r4, #1
   b58d2:	1a64      	subs	r4, r4, r1
      break;
   b58d4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b58d6:	b222      	sxth	r2, r4
      break;
   b58d8:	e7d9      	b.n	b588e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   b58da:	2a00      	cmp	r2, #0
   b58dc:	8904      	ldrh	r4, [r0, #8]
   b58de:	4613      	mov	r3, r2
   b58e0:	bfb8      	it	lt
   b58e2:	1dd3      	addlt	r3, r2, #7
   b58e4:	10db      	asrs	r3, r3, #3
   b58e6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b58ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b58ec:	f002 0007 	and.w	r0, r2, #7
   b58f0:	2201      	movs	r2, #1
   b58f2:	4082      	lsls	r2, r0
   b58f4:	5c58      	ldrb	r0, [r3, r1]
   b58f6:	4302      	orrs	r2, r0
   b58f8:	545a      	strb	r2, [r3, r1]
}
   b58fa:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   b58fc:	2a00      	cmp	r2, #0
   b58fe:	4613      	mov	r3, r2
   b5900:	8904      	ldrh	r4, [r0, #8]
   b5902:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5904:	bfb8      	it	lt
   b5906:	1dd3      	addlt	r3, r2, #7
   b5908:	10db      	asrs	r3, r3, #3
   b590a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b590e:	f002 0207 	and.w	r2, r2, #7
   b5912:	2301      	movs	r3, #1
   b5914:	fa03 f202 	lsl.w	r2, r3, r2
   b5918:	5c43      	ldrb	r3, [r0, r1]
   b591a:	405a      	eors	r2, r3
   b591c:	e7cc      	b.n	b58b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5920 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5920:	b570      	push	{r4, r5, r6, lr}
                                                     rstPin(rst_pin)
   b5922:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5924:	4604      	mov	r4, r0
   b5926:	460e      	mov	r6, r1
                                                     rstPin(rst_pin)
   b5928:	2180      	movs	r1, #128	; 0x80
   b592a:	f7ff fcef 	bl	b530c <_ZN12Adafruit_GFXC1Ess>
   b592e:	2500      	movs	r5, #0
   b5930:	4b0d      	ldr	r3, [pc, #52]	; (b5968 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b5932:	6023      	str	r3, [r4, #0]
   b5934:	6265      	str	r5, [r4, #36]	; 0x24
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) : Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b5936:	f002 fb4b 	bl	b7fd0 <_Z19__fetch_global_Wirev>
                                                     rstPin(rst_pin)
   b593a:	23ff      	movs	r3, #255	; 0xff
   b593c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5940:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b5944:	4b09      	ldr	r3, [pc, #36]	; (b596c <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b5946:	63a3      	str	r3, [r4, #56]	; 0x38
   b5948:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b594c:	2301      	movs	r3, #1
   b594e:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b5952:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5954:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b5958:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b595c:	6425      	str	r5, [r4, #64]	; 0x40
   b595e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b5962:	4620      	mov	r0, r4
   b5964:	bd70      	pop	{r4, r5, r6, pc}
   b5966:	bf00      	nop
   b5968:	000b95ec 	.word	0x000b95ec
   b596c:	000b8ff8 	.word	0x000b8ff8

000b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
{
   b5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5972:	4604      	mov	r4, r0
  if (wire)
   b5974:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5976:	460d      	mov	r5, r1
  if (wire)
   b5978:	b190      	cbz	r0, b59a0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b597a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b597e:	f001 fd01 	bl	b7384 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5982:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5984:	6803      	ldr	r3, [r0, #0]
   b5986:	2100      	movs	r1, #0
   b5988:	689b      	ldr	r3, [r3, #8]
   b598a:	4798      	blx	r3
    WIRE_WRITE(c);
   b598c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b598e:	6803      	ldr	r3, [r0, #0]
   b5990:	4629      	mov	r1, r5
   b5992:	689b      	ldr	r3, [r3, #8]
   b5994:	4798      	blx	r3
    wire->endTransmission();
   b5996:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b599c:	f001 bcf9 	b.w	b7392 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b59a0:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b59a4:	4601      	mov	r1, r0
   b59a6:	b298      	uxth	r0, r3
   b59a8:	f002 fab5 	bl	b7f16 <digitalWrite>
  if (spi)
   b59ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59ae:	b120      	cbz	r0, b59ba <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b59b0:	4629      	mov	r1, r5
}
   b59b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b59b6:	f001 bf6b 	b.w	b7890 <_ZN8SPIClass8transferEh>
   b59ba:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b59bc:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b59be:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b59c2:	ea05 0107 	and.w	r1, r5, r7
   b59c6:	b280      	uxth	r0, r0
   b59c8:	f002 faa5 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b59cc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59d0:	2101      	movs	r1, #1
   b59d2:	b280      	uxth	r0, r0
   b59d4:	f002 fa9f 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b59d8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59dc:	2100      	movs	r1, #0
   b59de:	b280      	uxth	r0, r0
   b59e0:	f002 fa99 	bl	b7f16 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b59e4:	3e01      	subs	r6, #1
   b59e6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b59ea:	d1e8      	bne.n	b59be <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b59ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59ee <_ZN16Adafruit_SSD130613invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i)
{
   b59ee:	b538      	push	{r3, r4, r5, lr}
   b59f0:	4604      	mov	r4, r0
  TRANSACTION_START
   b59f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b59f4:	460d      	mov	r5, r1
  TRANSACTION_START
   b59f6:	b180      	cbz	r0, b5a1a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b59f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b59fa:	f001 fcb5 	bl	b7368 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b59fe:	2d00      	cmp	r5, #0
   b5a00:	4620      	mov	r0, r4
   b5a02:	bf14      	ite	ne
   b5a04:	21a7      	movne	r1, #167	; 0xa7
   b5a06:	21a6      	moveq	r1, #166	; 0xa6
   b5a08:	f7ff ffb2 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5a0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a0e:	b188      	cbz	r0, b5a34 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5a10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a16:	f001 bca7 	b.w	b7368 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5a1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a1c:	b118      	cbz	r0, b5a26 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5a1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5a22:	f001 fec7 	bl	b77b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5a26:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a2a:	2100      	movs	r1, #0
   b5a2c:	b280      	uxth	r0, r0
   b5a2e:	f002 fa72 	bl	b7f16 <digitalWrite>
   b5a32:	e7e4      	b.n	b59fe <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5a34:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a38:	2101      	movs	r1, #1
   b5a3a:	b280      	uxth	r0, r0
   b5a3c:	f002 fa6b 	bl	b7f16 <digitalWrite>
   b5a40:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a42:	b118      	cbz	r0, b5a4c <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5a48:	f001 be9a 	b.w	b7780 <_ZN8SPIClass14endTransactionEv>
}
   b5a4c:	bd38      	pop	{r3, r4, r5, pc}

000b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
{
   b5a4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a52:	4604      	mov	r4, r0
  if (wire)
   b5a54:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
   b5a56:	460d      	mov	r5, r1
  if (wire)
   b5a58:	188f      	adds	r7, r1, r2
   b5a5a:	b340      	cbz	r0, b5aae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5a5c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a60:	f001 fc90 	bl	b7384 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a66:	6803      	ldr	r3, [r0, #0]
   b5a68:	2100      	movs	r1, #0
   b5a6a:	689b      	ldr	r3, [r3, #8]
   b5a6c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5a6e:	2601      	movs	r6, #1
    while (n--)
   b5a70:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5a72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--)
   b5a74:	d017      	beq.n	b5aa6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if (bytesOut >= WIRE_MAX)
   b5a76:	2e1f      	cmp	r6, #31
   b5a78:	d90c      	bls.n	b5a94 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5a7a:	f001 fc8a 	bl	b7392 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5a7e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a84:	f001 fc7e 	bl	b7384 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a8a:	6803      	ldr	r3, [r0, #0]
   b5a8c:	2100      	movs	r1, #0
   b5a8e:	689b      	ldr	r3, [r3, #8]
   b5a90:	4798      	blx	r3
        bytesOut = 1;
   b5a92:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5a94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a96:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5a9a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5a9c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5a9e:	689b      	ldr	r3, [r3, #8]
   b5aa0:	4798      	blx	r3
      bytesOut++;
   b5aa2:	b2f6      	uxtb	r6, r6
    while (n--)
   b5aa4:	e7e4      	b.n	b5a70 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5aa6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5aaa:	f001 bc72 	b.w	b7392 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5aae:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5ab2:	4601      	mov	r1, r0
   b5ab4:	b298      	uxth	r0, r3
   b5ab6:	f002 fa2e 	bl	b7f16 <digitalWrite>
    while (n--)
   b5aba:	42bd      	cmp	r5, r7
   b5abc:	d022      	beq.n	b5b04 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if (spi)
   b5abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   b5ac0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b5ac4:	b118      	cbz	r0, b5ace <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5ac6:	4649      	mov	r1, r9
   b5ac8:	f001 fee2 	bl	b7890 <_ZN8SPIClass8transferEh>
   b5acc:	e7f5      	b.n	b5aba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5ace:	2608      	movs	r6, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5ad0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5ad4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5ad8:	ea09 0108 	and.w	r1, r9, r8
   b5adc:	b280      	uxth	r0, r0
   b5ade:	f002 fa1a 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b5ae2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5ae6:	2101      	movs	r1, #1
   b5ae8:	b280      	uxth	r0, r0
   b5aea:	f002 fa14 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b5aee:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5af2:	2100      	movs	r1, #0
   b5af4:	b280      	uxth	r0, r0
   b5af6:	f002 fa0e 	bl	b7f16 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b5afa:	3e01      	subs	r6, #1
   b5afc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5b00:	d1e8      	bne.n	b5ad4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5b02:	e7da      	b.n	b5aba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5b08 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5b08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b0c:	1dda      	adds	r2, r3, #7
   b5b0e:	bf48      	it	mi
   b5b10:	f103 020e 	addmi.w	r2, r3, #14
   b5b14:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5b18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5b1a:	10d2      	asrs	r2, r2, #3
   b5b1c:	435a      	muls	r2, r3
   b5b1e:	2100      	movs	r1, #0
   b5b20:	f002 bc94 	b.w	b844c <memset>

000b5b24 <_ZN16Adafruit_SSD13065beginEhhbb>:
{
   b5b24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5b28:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   b5b2c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5b30:	4604      	mov	r4, r0
   b5b32:	460f      	mov	r7, r1
   b5b34:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b36:	b1d3      	cbz	r3, b5b6e <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b5b38:	4620      	mov	r0, r4
   b5b3a:	f7ff ffe5 	bl	b5b08 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32)
   b5b3e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b5b42:	2a20      	cmp	r2, #32
   b5b44:	dc25      	bgt.n	b5b92 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5b46:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5b4a:	2320      	movs	r3, #32
   b5b4c:	3a20      	subs	r2, #32
   b5b4e:	3973      	subs	r1, #115	; 0x73
   b5b50:	2001      	movs	r0, #1
   b5b52:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5b56:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b5b5a:	2373      	movs	r3, #115	; 0x73
   b5b5c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5b60:	9300      	str	r3, [sp, #0]
   b5b62:	f342 024f 	sbfx	r2, r2, #1, #16
   b5b66:	4b85      	ldr	r3, [pc, #532]	; (b5d7c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b5b68:	f341 014f 	sbfx	r1, r1, #1, #16
   b5b6c:	e01b      	b.n	b5ba6 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b6e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b72:	1dd8      	adds	r0, r3, #7
   b5b74:	bf48      	it	mi
   b5b76:	f103 000e 	addmi.w	r0, r3, #14
   b5b7a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5b7e:	10c0      	asrs	r0, r0, #3
   b5b80:	4358      	muls	r0, r3
   b5b82:	f001 fb0f 	bl	b71a4 <malloc>
   b5b86:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5b88:	2800      	cmp	r0, #0
   b5b8a:	d1d5      	bne.n	b5b38 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5b8c:	b004      	add	sp, #16
   b5b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0, 0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b5b92:	2340      	movs	r3, #64	; 0x40
   b5b94:	f04f 0c01 	mov.w	ip, #1
   b5b98:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b5b9c:	2380      	movs	r3, #128	; 0x80
   b5b9e:	9300      	str	r3, [sp, #0]
   b5ba0:	2200      	movs	r2, #0
   b5ba2:	4b77      	ldr	r3, [pc, #476]	; (b5d80 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b5ba4:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f7ff fbc6 	bl	b5338 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire)
   b5bac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5bae:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire)
   b5bb2:	2800      	cmp	r0, #0
   b5bb4:	d078      	beq.n	b5ca8 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5bb6:	2d00      	cmp	r5, #0
   b5bb8:	d174      	bne.n	b5ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b5bba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5bbe:	2b20      	cmp	r3, #32
   b5bc0:	bf0c      	ite	eq
   b5bc2:	253c      	moveq	r5, #60	; 0x3c
   b5bc4:	253d      	movne	r5, #61	; 0x3d
   b5bc6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   b5bca:	f1b8 0f00 	cmp.w	r8, #0
   b5bce:	d001      	beq.n	b5bd4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      wire->begin();
   b5bd0:	f001 fbce 	bl	b7370 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0))
   b5bd4:	b1fe      	cbz	r6, b5c16 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b5bd6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5bda:	2800      	cmp	r0, #0
   b5bdc:	db1b      	blt.n	b5c16 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(rstPin, OUTPUT);
   b5bde:	2101      	movs	r1, #1
   b5be0:	b280      	uxth	r0, r0
   b5be2:	f002 f987 	bl	b7ef4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5be6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5bea:	2101      	movs	r1, #1
   b5bec:	b280      	uxth	r0, r0
   b5bee:	f002 f992 	bl	b7f16 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5bf2:	2001      	movs	r0, #1
   b5bf4:	f001 fb16 	bl	b7224 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5bf8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5bfc:	2100      	movs	r1, #0
   b5bfe:	b280      	uxth	r0, r0
   b5c00:	f002 f989 	bl	b7f16 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5c04:	200a      	movs	r0, #10
   b5c06:	f001 fb0d 	bl	b7224 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5c0a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c0e:	2101      	movs	r1, #1
   b5c10:	b280      	uxth	r0, r0
   b5c12:	f002 f980 	bl	b7f16 <digitalWrite>
  TRANSACTION_START
   b5c16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c18:	2800      	cmp	r0, #0
   b5c1a:	d074      	beq.n	b5d06 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b5c1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5c1e:	f001 fba3 	bl	b7368 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5c22:	2204      	movs	r2, #4
   b5c24:	4957      	ldr	r1, [pc, #348]	; (b5d84 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b5c26:	4620      	mov	r0, r4
   b5c28:	f7ff ff11 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5c2c:	8961      	ldrh	r1, [r4, #10]
   b5c2e:	3901      	subs	r1, #1
   b5c30:	b2c9      	uxtb	r1, r1
   b5c32:	4620      	mov	r0, r4
   b5c34:	f7ff fe9c 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5c38:	4953      	ldr	r1, [pc, #332]	; (b5d88 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5c3a:	2204      	movs	r2, #4
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	f7ff ff06 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5c42:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5c46:	2b01      	cmp	r3, #1
   b5c48:	bf0c      	ite	eq
   b5c4a:	2110      	moveq	r1, #16
   b5c4c:	2114      	movne	r1, #20
   b5c4e:	4620      	mov	r0, r4
   b5c50:	f7ff fe8e 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5c54:	2204      	movs	r2, #4
   b5c56:	494d      	ldr	r1, [pc, #308]	; (b5d8c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5c58:	4620      	mov	r0, r4
   b5c5a:	f7ff fef8 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if ((WIDTH == 128) && (HEIGHT == 32))
   b5c5e:	68a3      	ldr	r3, [r4, #8]
   b5c60:	4a4b      	ldr	r2, [pc, #300]	; (b5d90 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5c62:	4293      	cmp	r3, r2
   b5c64:	d15c      	bne.n	b5d20 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5c66:	494b      	ldr	r1, [pc, #300]	; (b5d94 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5c68:	2204      	movs	r2, #4
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	f7ff feef 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5c70:	21d9      	movs	r1, #217	; 0xd9
   b5c72:	4620      	mov	r0, r4
   b5c74:	f7ff fe7c 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5c78:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5c7c:	2b01      	cmp	r3, #1
   b5c7e:	bf0c      	ite	eq
   b5c80:	2122      	moveq	r1, #34	; 0x22
   b5c82:	21f1      	movne	r1, #241	; 0xf1
   b5c84:	4620      	mov	r0, r4
   b5c86:	f7ff fe73 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	4942      	ldr	r1, [pc, #264]	; (b5d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5c8e:	2206      	movs	r2, #6
   b5c90:	f7ff fedd 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c96:	2800      	cmp	r0, #0
   b5c98:	d063      	beq.n	b5d62 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b5c9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5c9c:	f001 fb64 	bl	b7368 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5ca0:	2001      	movs	r0, #1
   b5ca2:	e773      	b.n	b5b8c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5ca4:	b26d      	sxtb	r5, r5
   b5ca6:	e78e      	b.n	b5bc6 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5ca8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5cac:	2101      	movs	r1, #1
   b5cae:	b280      	uxth	r0, r0
   b5cb0:	f002 f920 	bl	b7ef4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5cb4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cb8:	2101      	movs	r1, #1
   b5cba:	b280      	uxth	r0, r0
   b5cbc:	f002 f91a 	bl	b7ef4 <pinMode>
    SSD1306_DESELECT
   b5cc0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cc4:	2101      	movs	r1, #1
   b5cc6:	b280      	uxth	r0, r0
   b5cc8:	f002 f925 	bl	b7f16 <digitalWrite>
    if (spi)
   b5ccc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5cce:	b13d      	cbz	r5, b5ce0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if (periphBegin)
   b5cd0:	f1b8 0f00 	cmp.w	r8, #0
   b5cd4:	f43f af7e 	beq.w	b5bd4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
        spi->begin();
   b5cd8:	4628      	mov	r0, r5
   b5cda:	f001 fd3d 	bl	b7758 <_ZN8SPIClass5beginEv>
   b5cde:	e779      	b.n	b5bd4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5ce0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5ce4:	2101      	movs	r1, #1
   b5ce6:	b280      	uxth	r0, r0
   b5ce8:	f002 f904 	bl	b7ef4 <pinMode>
      pinMode(clkPin, OUTPUT);
   b5cec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5cf0:	2101      	movs	r1, #1
   b5cf2:	b280      	uxth	r0, r0
   b5cf4:	f002 f8fe 	bl	b7ef4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5cf8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5cfc:	4629      	mov	r1, r5
   b5cfe:	b280      	uxth	r0, r0
   b5d00:	f002 f909 	bl	b7f16 <digitalWrite>
   b5d04:	e766      	b.n	b5bd4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b5d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d08:	b118      	cbz	r0, b5d12 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5d0a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d0e:	f001 fd51 	bl	b77b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d12:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d16:	2100      	movs	r1, #0
   b5d18:	b280      	uxth	r0, r0
   b5d1a:	f002 f8fc 	bl	b7f16 <digitalWrite>
   b5d1e:	e780      	b.n	b5c22 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  else if ((WIDTH == 128) && (HEIGHT == 64))
   b5d20:	4a1e      	ldr	r2, [pc, #120]	; (b5d9c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5d22:	4293      	cmp	r3, r2
   b5d24:	d10e      	bne.n	b5d44 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5d26:	491e      	ldr	r1, [pc, #120]	; (b5da0 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5d28:	2203      	movs	r2, #3
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	f7ff fe8f 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5d30:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d34:	2b01      	cmp	r3, #1
   b5d36:	bf0c      	ite	eq
   b5d38:	219f      	moveq	r1, #159	; 0x9f
   b5d3a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7ff fe17 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5d42:	e795      	b.n	b5c70 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  else if ((WIDTH == 96) && (HEIGHT == 16))
   b5d44:	4a17      	ldr	r2, [pc, #92]	; (b5da4 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5d46:	4293      	cmp	r3, r2
   b5d48:	d192      	bne.n	b5c70 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5d4a:	4917      	ldr	r1, [pc, #92]	; (b5da8 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5d4c:	2203      	movs	r2, #3
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff fe7d 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d54:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d58:	2b01      	cmp	r3, #1
   b5d5a:	bf0c      	ite	eq
   b5d5c:	2110      	moveq	r1, #16
   b5d5e:	21af      	movne	r1, #175	; 0xaf
   b5d60:	e7ec      	b.n	b5d3c <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b5d62:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d66:	2101      	movs	r1, #1
   b5d68:	b280      	uxth	r0, r0
   b5d6a:	f002 f8d4 	bl	b7f16 <digitalWrite>
   b5d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d70:	2800      	cmp	r0, #0
   b5d72:	d095      	beq.n	b5ca0 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5d74:	f001 fd04 	bl	b7780 <_ZN8SPIClass14endTransactionEv>
   b5d78:	e792      	b.n	b5ca0 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b5d7a:	bf00      	nop
   b5d7c:	000b9004 	.word	0x000b9004
   b5d80:	000b91e4 	.word	0x000b91e4
   b5d84:	000b964c 	.word	0x000b964c
   b5d88:	000b9650 	.word	0x000b9650
   b5d8c:	000b9654 	.word	0x000b9654
   b5d90:	00200080 	.word	0x00200080
   b5d94:	000b965e 	.word	0x000b965e
   b5d98:	000b9658 	.word	0x000b9658
   b5d9c:	00400080 	.word	0x00400080
   b5da0:	000b9662 	.word	0x000b9662
   b5da4:	00100060 	.word	0x00100060
   b5da8:	000b9665 	.word	0x000b9665

000b5dac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
{
   b5dac:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT))
   b5dae:	2a00      	cmp	r2, #0
{
   b5db0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT))
   b5db4:	db3d      	blt.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5db6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5dba:	4294      	cmp	r4, r2
   b5dbc:	dd39      	ble.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0)
   b5dbe:	2900      	cmp	r1, #0
      w += x;
   b5dc0:	bfbe      	ittt	lt
   b5dc2:	185b      	addlt	r3, r3, r1
   b5dc4:	b21b      	sxthlt	r3, r3
      x = 0;
   b5dc6:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH)
   b5dc8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5dcc:	18ce      	adds	r6, r1, r3
   b5dce:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5dd0:	bfc4      	itt	gt
   b5dd2:	1a63      	subgt	r3, r4, r1
   b5dd4:	b21b      	sxthgt	r3, r3
    if (w > 0)
   b5dd6:	2b00      	cmp	r3, #0
   b5dd8:	dd2b      	ble.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5dda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5ddc:	10d6      	asrs	r6, r2, #3
   b5dde:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5de2:	4401      	add	r1, r0
              mask = 1 << (y & 7);
   b5de4:	f002 0007 	and.w	r0, r2, #7
   b5de8:	2201      	movs	r2, #1
   b5dea:	4082      	lsls	r2, r0
      switch (color)
   b5dec:	2d01      	cmp	r5, #1
              mask = 1 << (y & 7);
   b5dee:	b2d2      	uxtb	r2, r2
      switch (color)
   b5df0:	d016      	beq.n	b5e20 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5df2:	2d02      	cmp	r5, #2
   b5df4:	d00b      	beq.n	b5e0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5df6:	b9e5      	cbnz	r5, b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   b5df8:	43d2      	mvns	r2, r2
   b5dfa:	b2d2      	uxtb	r2, r2
   b5dfc:	440b      	add	r3, r1
        while (w--)
   b5dfe:	4299      	cmp	r1, r3
   b5e00:	d017      	beq.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   b5e02:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e06:	4010      	ands	r0, r2
   b5e08:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5e0c:	e7f7      	b.n	b5dfe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5e0e:	440b      	add	r3, r1
        while (w--)
   b5e10:	4299      	cmp	r1, r3
   b5e12:	d00e      	beq.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   b5e14:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e18:	4050      	eors	r0, r2
   b5e1a:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5e1e:	e7f7      	b.n	b5e10 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5e20:	440b      	add	r3, r1
        while (w--)
   b5e22:	4299      	cmp	r1, r3
   b5e24:	d005      	beq.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   b5e26:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e2a:	4310      	orrs	r0, r2
   b5e2c:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--)
   b5e30:	e7f7      	b.n	b5e22 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5e32:	bd70      	pop	{r4, r5, r6, pc}

000b5e34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
{
   b5e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH))
   b5e36:	2900      	cmp	r1, #0
{
   b5e38:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH))
   b5e3c:	db76      	blt.n	b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5e3e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5e42:	42b1      	cmp	r1, r6
   b5e44:	da72      	bge.n	b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0)
   b5e46:	2a00      	cmp	r2, #0
      __h += __y;
   b5e48:	bfbe      	ittt	lt
   b5e4a:	189b      	addlt	r3, r3, r2
   b5e4c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5e4e:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT)
   b5e50:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5e54:	18d7      	adds	r7, r2, r3
   b5e56:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5e58:	bfc4      	itt	gt
   b5e5a:	1aa3      	subgt	r3, r4, r2
   b5e5c:	b21b      	sxthgt	r3, r3
    if (__h > 0)
   b5e5e:	2b00      	cmp	r3, #0
   b5e60:	dd64      	ble.n	b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5e62:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5e66:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5e68:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod)
   b5e6c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   b5e70:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5e72:	eb07 0406 	add.w	r4, r7, r6
      if (mod)
   b5e76:	d023      	beq.n	b5ec0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5e78:	f1c2 0208 	rsb	r2, r2, #8
   b5e7c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5e7e:	492d      	ldr	r1, [pc, #180]	; (b5f34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   b5e80:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   b5e82:	bf3c      	itt	cc
   b5e84:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5e88:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5e8c:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   b5e8e:	bf3c      	itt	cc
   b5e90:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5e94:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color)
   b5e98:	2d01      	cmp	r5, #1
   b5e9a:	d007      	beq.n	b5eac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5e9c:	2d02      	cmp	r5, #2
   b5e9e:	d02e      	beq.n	b5efe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5ea0:	b94d      	cbnz	r5, b5eb6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   b5ea2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5ea6:	ea2c 0101 	bic.w	r1, ip, r1
   b5eaa:	e003      	b.n	b5eb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   b5eac:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5eb0:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   b5eb4:	55b9      	strb	r1, [r7, r6]
      if (h >= mod)
   b5eb6:	4293      	cmp	r3, r2
   b5eb8:	d338      	bcc.n	b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5eba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5ebe:	440c      	add	r4, r1
        h -= mod;
   b5ec0:	1a9a      	subs	r2, r3, r2
   b5ec2:	b2d2      	uxtb	r2, r2
        if (h >= 8)
   b5ec4:	2a07      	cmp	r2, #7
   b5ec6:	d90e      	bls.n	b5ee6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == INVERSE)
   b5ec8:	2d02      	cmp	r5, #2
   b5eca:	d11d      	bne.n	b5f08 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5ecc:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   b5ece:	7821      	ldrb	r1, [r4, #0]
   b5ed0:	43c9      	mvns	r1, r1
   b5ed2:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5ed4:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5ed6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5eda:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5edc:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5ede:	440c      	add	r4, r1
            } while (h >= 8);
   b5ee0:	d8f5      	bhi.n	b5ece <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   b5ee2:	f002 0207 	and.w	r2, r2, #7
        if (h)
   b5ee6:	b30a      	cbz	r2, b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5ee8:	4b13      	ldr	r3, [pc, #76]	; (b5f38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color)
   b5eea:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5eec:	5c9b      	ldrb	r3, [r3, r2]
          switch (color)
   b5eee:	d01a      	beq.n	b5f26 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5ef0:	2d02      	cmp	r5, #2
   b5ef2:	d01c      	beq.n	b5f2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5ef4:	b9d5      	cbnz	r5, b5f2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   b5ef6:	7822      	ldrb	r2, [r4, #0]
   b5ef8:	ea22 0303 	bic.w	r3, r2, r3
   b5efc:	e015      	b.n	b5f2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   b5efe:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5f02:	ea81 010c 	eor.w	r1, r1, ip
   b5f06:	e7d5      	b.n	b5eb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5f08:	1e29      	subs	r1, r5, #0
   b5f0a:	bf18      	it	ne
   b5f0c:	2101      	movne	r1, #1
   b5f0e:	4249      	negs	r1, r1
   b5f10:	b2c9      	uxtb	r1, r1
   b5f12:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   b5f14:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   b5f16:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   b5f18:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   b5f1c:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   b5f1e:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   b5f20:	4434      	add	r4, r6
            } while (h >= 8);
   b5f22:	d8f7      	bhi.n	b5f14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5f24:	e7dd      	b.n	b5ee2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   b5f26:	7822      	ldrb	r2, [r4, #0]
   b5f28:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   b5f2a:	7023      	strb	r3, [r4, #0]
}
   b5f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   b5f2e:	7822      	ldrb	r2, [r4, #0]
   b5f30:	4053      	eors	r3, r2
   b5f32:	e7fa      	b.n	b5f2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5f34:	000b963c 	.word	0x000b963c
   b5f38:	000b9644 	.word	0x000b9644

000b5f3c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
{
   b5f3c:	b470      	push	{r4, r5, r6}
   b5f3e:	4614      	mov	r4, r2
  switch (rotation)
   b5f40:	7e82      	ldrb	r2, [r0, #26]
{
   b5f42:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation)
   b5f46:	2a02      	cmp	r2, #2
   b5f48:	d00d      	beq.n	b5f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5f4a:	2a03      	cmp	r2, #3
   b5f4c:	d018      	beq.n	b5f80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5f4e:	2a01      	cmp	r2, #1
   b5f50:	d111      	bne.n	b5f76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5f52:	8902      	ldrh	r2, [r0, #8]
   b5f54:	43e4      	mvns	r4, r4
   b5f56:	4414      	add	r4, r2
   b5f58:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   b5f5a:	9603      	str	r6, [sp, #12]
   b5f5c:	460a      	mov	r2, r1
   b5f5e:	4621      	mov	r1, r4
}
   b5f60:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   b5f62:	f7ff bf67 	b.w	b5e34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5f66:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   b5f68:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   b5f6a:	43e4      	mvns	r4, r4
    x -= (w - 1);
   b5f6c:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   b5f6e:	4414      	add	r4, r2
    x -= (w - 1);
   b5f70:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   b5f72:	b224      	sxth	r4, r4
    x -= (w - 1);
   b5f74:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   b5f76:	9603      	str	r6, [sp, #12]
   b5f78:	4622      	mov	r2, r4
}
   b5f7a:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   b5f7c:	f7ff bf16 	b.w	b5dac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   b5f80:	8945      	ldrh	r5, [r0, #10]
   b5f82:	4419      	add	r1, r3
   b5f84:	1a69      	subs	r1, r5, r1
   b5f86:	b209      	sxth	r1, r1
    break;
   b5f88:	e7e7      	b.n	b5f5a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5f8a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
   b5f8a:	b430      	push	{r4, r5}
   b5f8c:	4614      	mov	r4, r2
  switch (rotation)
   b5f8e:	7e82      	ldrb	r2, [r0, #26]
{
   b5f90:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation)
   b5f94:	2a02      	cmp	r2, #2
   b5f96:	d00d      	beq.n	b5fb4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5f98:	2a03      	cmp	r2, #3
   b5f9a:	d018      	beq.n	b5fce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5f9c:	2a01      	cmp	r2, #1
   b5f9e:	d111      	bne.n	b5fc4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   b5fa0:	18e2      	adds	r2, r4, r3
   b5fa2:	8904      	ldrh	r4, [r0, #8]
   b5fa4:	1aa4      	subs	r4, r4, r2
   b5fa6:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   b5fa8:	9502      	str	r5, [sp, #8]
   b5faa:	460a      	mov	r2, r1
   b5fac:	4621      	mov	r1, r4
}
   b5fae:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   b5fb0:	f7ff befc 	b.w	b5dac <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   b5fb4:	8902      	ldrh	r2, [r0, #8]
   b5fb6:	43c9      	mvns	r1, r1
   b5fb8:	4411      	add	r1, r2
    y -= (h - 1);
   b5fba:	18e2      	adds	r2, r4, r3
   b5fbc:	8944      	ldrh	r4, [r0, #10]
   b5fbe:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   b5fc0:	b209      	sxth	r1, r1
    y -= (h - 1);
   b5fc2:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   b5fc4:	9502      	str	r5, [sp, #8]
   b5fc6:	4622      	mov	r2, r4
}
   b5fc8:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   b5fca:	f7ff bf33 	b.w	b5e34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5fce:	8942      	ldrh	r2, [r0, #10]
   b5fd0:	43c9      	mvns	r1, r1
   b5fd2:	4411      	add	r1, r2
   b5fd4:	b209      	sxth	r1, r1
    break;
   b5fd6:	e7e7      	b.n	b5fa8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5fd8 <_ZN16Adafruit_SSD13067displayEv>:
{
   b5fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5fdc:	4604      	mov	r4, r0
  TRANSACTION_START
   b5fde:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5fe0:	2800      	cmp	r0, #0
   b5fe2:	d042      	beq.n	b606a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5fe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5fe6:	f001 f9bf 	bl	b7368 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5fea:	4947      	ldr	r1, [pc, #284]	; (b6108 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5fec:	2205      	movs	r2, #5
   b5fee:	4620      	mov	r0, r4
   b5ff0:	f7ff fd2d 	bl	b5a4e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5ff4:	8921      	ldrh	r1, [r4, #8]
   b5ff6:	3901      	subs	r1, #1
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	b2c9      	uxtb	r1, r1
   b5ffc:	f7ff fcb8 	bl	b5970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6000:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6004:	1dde      	adds	r6, r3, #7
   b6006:	bf48      	it	mi
   b6008:	f103 060e 	addmi.w	r6, r3, #14
  if (wire)
   b600c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6010:	8923      	ldrh	r3, [r4, #8]
   b6012:	10f6      	asrs	r6, r6, #3
   b6014:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
   b6018:	fa15 f686 	uxtah	r6, r5, r6
  if (wire)
   b601c:	2800      	cmp	r0, #0
   b601e:	d03a      	beq.n	b6096 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6020:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6024:	f001 f9ae 	bl	b7384 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6028:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b602a:	6803      	ldr	r3, [r0, #0]
   b602c:	2140      	movs	r1, #64	; 0x40
   b602e:	689b      	ldr	r3, [r3, #8]
   b6030:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6032:	2701      	movs	r7, #1
    while (count--)
   b6034:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6036:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--)
   b6038:	d024      	beq.n	b6084 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if (bytesOut >= WIRE_MAX)
   b603a:	2f1f      	cmp	r7, #31
   b603c:	d90c      	bls.n	b6058 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b603e:	f001 f9a8 	bl	b7392 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6042:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6046:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6048:	f001 f99c 	bl	b7384 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b604c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b604e:	6803      	ldr	r3, [r0, #0]
   b6050:	2140      	movs	r1, #64	; 0x40
   b6052:	689b      	ldr	r3, [r3, #8]
   b6054:	4798      	blx	r3
        bytesOut = 1;
   b6056:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6058:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b605a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b605e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6060:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6062:	689b      	ldr	r3, [r3, #8]
   b6064:	4798      	blx	r3
      bytesOut++;
   b6066:	b2ff      	uxtb	r7, r7
    while (count--)
   b6068:	e7e4      	b.n	b6034 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b606a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b606c:	b118      	cbz	r0, b6076 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b606e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6072:	f001 fb9f 	bl	b77b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6076:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b607a:	2100      	movs	r1, #0
   b607c:	b280      	uxth	r0, r0
   b607e:	f001 ff4a 	bl	b7f16 <digitalWrite>
   b6082:	e7b2      	b.n	b5fea <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6084:	f001 f985 	bl	b7392 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6088:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b608a:	b378      	cbz	r0, b60ec <_ZN16Adafruit_SSD13067displayEv+0x114>
   b608c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b608e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6092:	f001 b969 	b.w	b7368 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6096:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b609a:	2101      	movs	r1, #1
   b609c:	b280      	uxth	r0, r0
   b609e:	f001 ff3a 	bl	b7f16 <digitalWrite>
    while (count--)
   b60a2:	42ae      	cmp	r6, r5
   b60a4:	d0f0      	beq.n	b6088 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if (spi)
   b60a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
   b60a8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (spi)
   b60ac:	b118      	cbz	r0, b60b6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b60ae:	4649      	mov	r1, r9
   b60b0:	f001 fbee 	bl	b7890 <_ZN8SPIClass8transferEh>
   b60b4:	e7f5      	b.n	b60a2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b60b6:	2708      	movs	r7, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b60b8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b60bc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b60c0:	ea09 0108 	and.w	r1, r9, r8
   b60c4:	b280      	uxth	r0, r0
   b60c6:	f001 ff26 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, HIGH);
   b60ca:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60ce:	2101      	movs	r1, #1
   b60d0:	b280      	uxth	r0, r0
   b60d2:	f001 ff20 	bl	b7f16 <digitalWrite>
      digitalWrite(clkPin, LOW);
   b60d6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60da:	2100      	movs	r1, #0
   b60dc:	b280      	uxth	r0, r0
   b60de:	f001 ff1a 	bl	b7f16 <digitalWrite>
    for (uint8_t bit = 0x80; bit; bit >>= 1)
   b60e2:	3f01      	subs	r7, #1
   b60e4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b60e8:	d1e8      	bne.n	b60bc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b60ea:	e7da      	b.n	b60a2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b60ec:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b60f0:	2101      	movs	r1, #1
   b60f2:	b280      	uxth	r0, r0
   b60f4:	f001 ff0f 	bl	b7f16 <digitalWrite>
   b60f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b60fa:	b118      	cbz	r0, b6104 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b60fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6100:	f001 bb3e 	b.w	b7780 <_ZN8SPIClass14endTransactionEv>
}
   b6104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6108:	000b9668 	.word	0x000b9668

000b610c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b610c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b610e:	4c0b      	ldr	r4, [pc, #44]	; (b613c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6110:	7821      	ldrb	r1, [r4, #0]
   b6112:	f3bf 8f5b 	dmb	ish
   b6116:	f011 0101 	ands.w	r1, r1, #1
   b611a:	d10b      	bne.n	b6134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b611c:	4620      	mov	r0, r4
   b611e:	9101      	str	r1, [sp, #4]
   b6120:	f7fd ffc6 	bl	b40b0 <__cxa_guard_acquire>
   b6124:	9901      	ldr	r1, [sp, #4]
   b6126:	b128      	cbz	r0, b6134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6128:	4805      	ldr	r0, [pc, #20]	; (b6140 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b612a:	f001 fb0b 	bl	b7744 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b612e:	4620      	mov	r0, r4
   b6130:	f7fd ffc3 	bl	b40ba <__cxa_guard_release>
    }
   b6134:	4802      	ldr	r0, [pc, #8]	; (b6140 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6136:	b002      	add	sp, #8
   b6138:	bd10      	pop	{r4, pc}
   b613a:	bf00      	nop
   b613c:	2003e5dc 	.word	0x2003e5dc
   b6140:	2003e5e0 	.word	0x2003e5e0

000b6144 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b6144:	b510      	push	{r4, lr}
   b6146:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b6148:	7001      	strb	r1, [r0, #0]
   b614a:	7042      	strb	r2, [r0, #1]
   b614c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b614e:	2101      	movs	r1, #1
   b6150:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b6154:	f002 f964 	bl	b8420 <calloc>
   b6158:	6060      	str	r0, [r4, #4]
}
   b615a:	4620      	mov	r0, r4
   b615c:	bd10      	pop	{r4, pc}

000b615e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b615e:	b510      	push	{r4, lr}
   b6160:	4604      	mov	r4, r0
{
    free(_led_state);
   b6162:	6840      	ldr	r0, [r0, #4]
   b6164:	f001 f826 	bl	b71b4 <free>
}
   b6168:	4620      	mov	r0, r4
   b616a:	bd10      	pop	{r4, pc}

000b616c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b616c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b616e:	2100      	movs	r1, #0
{
   b6170:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b6172:	7800      	ldrb	r0, [r0, #0]
   b6174:	f001 fecf 	bl	b7f16 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6178:	2014      	movs	r0, #20
   b617a:	f000 fdf7 	bl	b6d6c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b617e:	7820      	ldrb	r0, [r4, #0]
   b6180:	2101      	movs	r1, #1
   b6182:	f001 fec8 	bl	b7f16 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b6186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b618a:	2014      	movs	r0, #20
   b618c:	f000 bdee 	b.w	b6d6c <HAL_Delay_Microseconds>

000b6190 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b6190:	b570      	push	{r4, r5, r6, lr}
   b6192:	4606      	mov	r6, r0
   b6194:	460c      	mov	r4, r1
   b6196:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b6198:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b619a:	bf4c      	ite	mi
   b619c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b619e:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b61a0:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b61a2:	f001 feb8 	bl	b7f16 <digitalWrite>
    for (byte i=0; i<8; i++)
   b61a6:	3d01      	subs	r5, #1
        clk();
   b61a8:	4630      	mov	r0, r6
   b61aa:	f7ff ffdf 	bl	b616c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b61ae:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b61b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b61b4:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b61b6:	d1ef      	bne.n	b6198 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b61b8:	bd70      	pop	{r4, r5, r6, pc}

000b61ba <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b61ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b61bc:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b61c0:	461e      	mov	r6, r3
   b61c2:	460c      	mov	r4, r1
   b61c4:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b61c6:	bf14      	ite	ne
   b61c8:	21c0      	movne	r1, #192	; 0xc0
   b61ca:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b61cc:	0673      	lsls	r3, r6, #25
   b61ce:	bf58      	it	pl
   b61d0:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b61d4:	062a      	lsls	r2, r5, #24
   b61d6:	bf58      	it	pl
   b61d8:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b61dc:	066b      	lsls	r3, r5, #25
   b61de:	bf58      	it	pl
   b61e0:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b61e4:	0622      	lsls	r2, r4, #24
   b61e6:	bf58      	it	pl
   b61e8:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b61ec:	0663      	lsls	r3, r4, #25
   b61ee:	bf58      	it	pl
   b61f0:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b61f4:	9001      	str	r0, [sp, #4]
   b61f6:	f7ff ffcb 	bl	b6190 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b61fa:	9801      	ldr	r0, [sp, #4]
   b61fc:	4631      	mov	r1, r6
   b61fe:	f7ff ffc7 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b6202:	9801      	ldr	r0, [sp, #4]
   b6204:	4629      	mov	r1, r5
   b6206:	f7ff ffc3 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b620a:	9801      	ldr	r0, [sp, #4]
   b620c:	4621      	mov	r1, r4
}
   b620e:	b002      	add	sp, #8
   b6210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b6214:	f7ff bfbc 	b.w	b6190 <_ZN12ChainableLED8sendByteEh>

000b6218 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b6218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b621c:	4604      	mov	r4, r0
   b621e:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b6220:	2100      	movs	r1, #0
{
   b6222:	4690      	mov	r8, r2
   b6224:	4699      	mov	r9, r3
   b6226:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b622a:	f7ff ffb1 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b622e:	2100      	movs	r1, #0
   b6230:	4620      	mov	r0, r4
   b6232:	f7ff ffad 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6236:	2100      	movs	r1, #0
   b6238:	4620      	mov	r0, r4
   b623a:	f7ff ffa9 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b623e:	2100      	movs	r1, #0
   b6240:	4620      	mov	r0, r4
   b6242:	f7ff ffa5 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
   b6246:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b6248:	78a3      	ldrb	r3, [r4, #2]
   b624a:	b2f5      	uxtb	r5, r6
   b624c:	42ab      	cmp	r3, r5
   b624e:	d919      	bls.n	b6284 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b6250:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b6254:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b6256:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b625a:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b625e:	d108      	bne.n	b6272 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b6260:	6861      	ldr	r1, [r4, #4]
   b6262:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b6266:	6861      	ldr	r1, [r4, #4]
   b6268:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b626c:	6861      	ldr	r1, [r4, #4]
   b626e:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b6272:	6861      	ldr	r1, [r4, #4]
   b6274:	5ccb      	ldrb	r3, [r1, r3]
   b6276:	5c8a      	ldrb	r2, [r1, r2]
   b6278:	5c09      	ldrb	r1, [r1, r0]
   b627a:	4620      	mov	r0, r4
   b627c:	f7ff ff9d 	bl	b61ba <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b6280:	3601      	adds	r6, #1
   b6282:	e7e1      	b.n	b6248 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b6284:	4620      	mov	r0, r4
   b6286:	2100      	movs	r1, #0
   b6288:	f7ff ff82 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b628c:	4620      	mov	r0, r4
   b628e:	2100      	movs	r1, #0
   b6290:	f7ff ff7e 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b6294:	4620      	mov	r0, r4
   b6296:	2100      	movs	r1, #0
   b6298:	f7ff ff7a 	bl	b6190 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b629c:	4620      	mov	r0, r4
   b629e:	2100      	movs	r1, #0
}
   b62a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b62a4:	f7ff bf74 	b.w	b6190 <_ZN12ChainableLED8sendByteEh>

000b62a8 <_ZN12ChainableLED4initEv>:
{
   b62a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b62aa:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b62ac:	2101      	movs	r1, #1
   b62ae:	7800      	ldrb	r0, [r0, #0]
   b62b0:	f001 fe20 	bl	b7ef4 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b62b4:	7860      	ldrb	r0, [r4, #1]
   b62b6:	2101      	movs	r1, #1
   b62b8:	f001 fe1c 	bl	b7ef4 <pinMode>
   b62bc:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b62be:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b62c0:	78a3      	ldrb	r3, [r4, #2]
   b62c2:	b2e9      	uxtb	r1, r5
   b62c4:	428b      	cmp	r3, r1
   b62c6:	d907      	bls.n	b62d8 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b62c8:	2300      	movs	r3, #0
   b62ca:	9600      	str	r6, [sp, #0]
   b62cc:	461a      	mov	r2, r3
   b62ce:	4620      	mov	r0, r4
   b62d0:	f7ff ffa2 	bl	b6218 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b62d4:	3501      	adds	r5, #1
   b62d6:	e7f3      	b.n	b62c0 <_ZN12ChainableLED4initEv+0x18>
}
   b62d8:	b002      	add	sp, #8
   b62da:	bd70      	pop	{r4, r5, r6, pc}

000b62dc <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b62dc:	b538      	push	{r3, r4, r5, lr}
   b62de:	4604      	mov	r4, r0
   b62e0:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b62e2:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b62e4:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b62e6:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b62e8:	f001 fe04 	bl	b7ef4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b62ec:	7b20      	ldrb	r0, [r4, #12]
   b62ee:	2101      	movs	r1, #1
   b62f0:	f001 fe11 	bl	b7f16 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b62f4:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b62f6:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b62f8:	2101      	movs	r1, #1
   b62fa:	f001 fdfb 	bl	b7ef4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b62fe:	7b60      	ldrb	r0, [r4, #13]
   b6300:	2100      	movs	r1, #0
   b6302:	f001 fe08 	bl	b7f16 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b6306:	4620      	mov	r0, r4
   b6308:	bd38      	pop	{r3, r4, r5, pc}
	...

000b630c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b630c:	3901      	subs	r1, #1
   b630e:	b2c9      	uxtb	r1, r1
   b6310:	2908      	cmp	r1, #8
   b6312:	bf9a      	itte	ls
   b6314:	4b02      	ldrls	r3, [pc, #8]	; (b6320 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b6316:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b631a:	4802      	ldrhi	r0, [pc, #8]	; (b6324 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b631c:	4770      	bx	lr
   b631e:	bf00      	nop
   b6320:	000b9764 	.word	0x000b9764
   b6324:	000b966d 	.word	0x000b966d

000b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b6328:	b507      	push	{r0, r1, r2, lr}
   b632a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b632c:	f7ff feee 	bl	b610c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6330:	9901      	ldr	r1, [sp, #4]
    }
   b6332:	b003      	add	sp, #12
   b6334:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b6338:	f001 baaa 	b.w	b7890 <_ZN8SPIClass8transferEh>

000b633c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b633c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6340:	4607      	mov	r7, r0
   b6342:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b6346:	461e      	mov	r6, r3
	if (count == 0) {
   b6348:	4615      	mov	r5, r2
   b634a:	2a00      	cmp	r2, #0
   b634c:	d042      	beq.n	b63d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b634e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6352:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b6354:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6358:	2100      	movs	r1, #0
   b635a:	f001 fddc 	bl	b7f16 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b635e:	4648      	mov	r0, r9
   b6360:	f7ff ffe2 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b6364:	3d01      	subs	r5, #1
   b6366:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b6368:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b636c:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b6370:	fa5f f48b 	uxtb.w	r4, fp
   b6374:	42a5      	cmp	r5, r4
   b6376:	d922      	bls.n	b63be <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b6378:	b9dc      	cbnz	r4, b63b2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b637a:	f1b8 0f00 	cmp.w	r8, #0
   b637e:	d018      	beq.n	b63b2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b6380:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b6382:	b2d3      	uxtb	r3, r2
   b6384:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b6386:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6388:	d805      	bhi.n	b6396 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b638a:	fa0a f402 	lsl.w	r4, sl, r2
   b638e:	430c      	orrs	r4, r1
   b6390:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b6392:	3201      	adds	r2, #1
   b6394:	e7f5      	b.n	b6382 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b6396:	4648      	mov	r0, r9
   b6398:	9101      	str	r1, [sp, #4]
   b639a:	f7ff ffc5 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b639e:	7833      	ldrb	r3, [r6, #0]
   b63a0:	9901      	ldr	r1, [sp, #4]
   b63a2:	4004      	ands	r4, r0
   b63a4:	ea23 0301 	bic.w	r3, r3, r1
   b63a8:	431c      	orrs	r4, r3
   b63aa:	7034      	strb	r4, [r6, #0]
		index++;
   b63ac:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b63b0:	e7de      	b.n	b6370 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b63b2:	4648      	mov	r0, r9
   b63b4:	f7ff ffb8 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b63b8:	f806 000b 	strb.w	r0, [r6, fp]
   b63bc:	e7f6      	b.n	b63ac <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b63be:	2000      	movs	r0, #0
   b63c0:	f7ff ffb2 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b63c4:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b63c6:	7b38      	ldrb	r0, [r7, #12]
   b63c8:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b63ca:	b003      	add	sp, #12
   b63cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b63d0:	f001 bda1 	b.w	b7f16 <digitalWrite>
} // End PCD_ReadRegister()
   b63d4:	b003      	add	sp, #12
   b63d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b63da <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b63da:	b538      	push	{r3, r4, r5, lr}
   b63dc:	460c      	mov	r4, r1
   b63de:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b63e0:	2100      	movs	r1, #0
   b63e2:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b63e4:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b63e8:	f001 fd95 	bl	b7f16 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b63ec:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b63f0:	f7ff ff9a 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b63f4:	2000      	movs	r0, #0
   b63f6:	f7ff ff97 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b63fa:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b63fc:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b63fe:	7b28      	ldrb	r0, [r5, #12]
   b6400:	f001 fd89 	bl	b7f16 <digitalWrite>
} // End PCD_ReadRegister()
   b6404:	4620      	mov	r0, r4
   b6406:	bd38      	pop	{r3, r4, r5, pc}

000b6408 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b6408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b640a:	460f      	mov	r7, r1
   b640c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b640e:	2100      	movs	r1, #0
   b6410:	7b00      	ldrb	r0, [r0, #12]
								) {
   b6412:	4615      	mov	r5, r2
   b6414:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6416:	f001 fd7e 	bl	b7f16 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b641a:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b641e:	f7ff ff83 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6422:	4425      	add	r5, r4
   b6424:	42ac      	cmp	r4, r5
   b6426:	d004      	beq.n	b6432 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b6428:	f814 0b01 	ldrb.w	r0, [r4], #1
   b642c:	f7ff ff7c 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b6430:	e7f8      	b.n	b6424 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6432:	7b30      	ldrb	r0, [r6, #12]
   b6434:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b643a:	f001 bd6c 	b.w	b7f16 <digitalWrite>

000b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b643e:	b570      	push	{r4, r5, r6, lr}
   b6440:	4604      	mov	r4, r0
   b6442:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b6444:	7b00      	ldrb	r0, [r0, #12]
   b6446:	2100      	movs	r1, #0
								) {
   b6448:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b644a:	f001 fd64 	bl	b7f16 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b644e:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b6452:	f7ff ff69 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b6456:	4628      	mov	r0, r5
   b6458:	f7ff ff66 	bl	b6328 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b645c:	7b20      	ldrb	r0, [r4, #12]
   b645e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b6460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b6464:	f001 bd57 	b.w	b7f16 <digitalWrite>

000b6468 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b6468:	b570      	push	{r4, r5, r6, lr}
   b646a:	4616      	mov	r6, r2
   b646c:	4604      	mov	r4, r0
   b646e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b6470:	f7ff ffb3 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6474:	4330      	orrs	r0, r6
   b6476:	b2c2      	uxtb	r2, r0
   b6478:	4629      	mov	r1, r5
   b647a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b647c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b6480:	f7ff bfdd 	b.w	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b6484 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b6484:	b570      	push	{r4, r5, r6, lr}
   b6486:	4616      	mov	r6, r2
   b6488:	4604      	mov	r4, r0
   b648a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b648c:	f7ff ffa5 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b6490:	ea20 0006 	bic.w	r0, r0, r6
   b6494:	b2c2      	uxtb	r2, r0
   b6496:	4629      	mov	r1, r5
   b6498:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b649a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b649e:	f7ff bfce 	b.w	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b64a2 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b64a2:	2208      	movs	r2, #8
   b64a4:	2110      	movs	r1, #16
   b64a6:	f7ff bfed 	b.w	b6484 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b64aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64ac:	4604      	mov	r4, r0
   b64ae:	4615      	mov	r5, r2
   b64b0:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b64b2:	2200      	movs	r2, #0
   b64b4:	2102      	movs	r1, #2
					 ) {
   b64b6:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b64b8:	f7ff ffc1 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b64bc:	2204      	movs	r2, #4
   b64be:	210a      	movs	r1, #10
   b64c0:	4620      	mov	r0, r4
   b64c2:	f7ff ffbc 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b64c6:	2280      	movs	r2, #128	; 0x80
   b64c8:	2114      	movs	r1, #20
   b64ca:	4620      	mov	r0, r4
   b64cc:	f7ff ffcc 	bl	b6468 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b64d0:	462a      	mov	r2, r5
   b64d2:	463b      	mov	r3, r7
   b64d4:	2112      	movs	r1, #18
   b64d6:	4620      	mov	r0, r4
   b64d8:	f7ff ff96 	bl	b6408 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b64dc:	2203      	movs	r2, #3
   b64de:	2102      	movs	r1, #2
   b64e0:	4620      	mov	r0, r4
   b64e2:	f7ff ffac 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b64e6:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b64ea:	210a      	movs	r1, #10
   b64ec:	4620      	mov	r0, r4
   b64ee:	f7ff ff74 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b64f2:	0743      	lsls	r3, r0, #29
   b64f4:	d405      	bmi.n	b6502 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b64f6:	3d01      	subs	r5, #1
   b64f8:	b2ad      	uxth	r5, r5
   b64fa:	2d00      	cmp	r5, #0
   b64fc:	d1f5      	bne.n	b64ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b64fe:	2004      	movs	r0, #4
   b6500:	e00f      	b.n	b6522 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b6502:	2200      	movs	r2, #0
   b6504:	2102      	movs	r1, #2
   b6506:	4620      	mov	r0, r4
   b6508:	f7ff ff99 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b650c:	2144      	movs	r1, #68	; 0x44
   b650e:	4620      	mov	r0, r4
   b6510:	f7ff ff63 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6514:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b6516:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b6518:	4620      	mov	r0, r4
   b651a:	f7ff ff5e 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b651e:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b6520:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b6522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6524 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b6524:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b6526:	220f      	movs	r2, #15
   b6528:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b652a:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b652c:	f7ff ff87 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b6530:	2032      	movs	r0, #50	; 0x32
   b6532:	f000 fe77 	bl	b7224 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b6536:	2102      	movs	r1, #2
   b6538:	4620      	mov	r0, r4
   b653a:	f7ff ff4e 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b653e:	06c3      	lsls	r3, r0, #27
   b6540:	d4f9      	bmi.n	b6536 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b6542:	bd10      	pop	{r4, pc}

000b6544 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b6544:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b6546:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b6548:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b654a:	f7ff ff46 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b654e:	f000 0303 	and.w	r3, r0, #3
   b6552:	2b03      	cmp	r3, #3
   b6554:	d008      	beq.n	b6568 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6556:	f040 0203 	orr.w	r2, r0, #3
   b655a:	b2d2      	uxtb	r2, r2
   b655c:	4620      	mov	r0, r4
   b655e:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b6560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b6564:	f7ff bf6b 	b.w	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b6568:	bd10      	pop	{r4, pc}

000b656a <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b656a:	b510      	push	{r4, lr}
   b656c:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b656e:	7b40      	ldrb	r0, [r0, #13]
   b6570:	f001 fcea 	bl	b7f48 <digitalRead>
   b6574:	bb48      	cbnz	r0, b65ca <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b6576:	7b60      	ldrb	r0, [r4, #13]
   b6578:	2101      	movs	r1, #1
   b657a:	f001 fccc 	bl	b7f16 <digitalWrite>
		delay(50);
   b657e:	2032      	movs	r0, #50	; 0x32
   b6580:	f000 fe50 	bl	b7224 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b6584:	4620      	mov	r0, r4
   b6586:	2280      	movs	r2, #128	; 0x80
   b6588:	2154      	movs	r1, #84	; 0x54
   b658a:	f7ff ff58 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b658e:	4620      	mov	r0, r4
   b6590:	22a9      	movs	r2, #169	; 0xa9
   b6592:	2156      	movs	r1, #86	; 0x56
   b6594:	f7ff ff53 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b6598:	4620      	mov	r0, r4
   b659a:	2203      	movs	r2, #3
   b659c:	2158      	movs	r1, #88	; 0x58
   b659e:	f7ff ff4e 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b65a2:	4620      	mov	r0, r4
   b65a4:	22e8      	movs	r2, #232	; 0xe8
   b65a6:	215a      	movs	r1, #90	; 0x5a
   b65a8:	f7ff ff49 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b65ac:	4620      	mov	r0, r4
   b65ae:	2240      	movs	r2, #64	; 0x40
   b65b0:	212a      	movs	r1, #42	; 0x2a
   b65b2:	f7ff ff44 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b65b6:	4620      	mov	r0, r4
   b65b8:	223d      	movs	r2, #61	; 0x3d
   b65ba:	2122      	movs	r1, #34	; 0x22
   b65bc:	f7ff ff3f 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b65c0:	4620      	mov	r0, r4
} // End PCD_Init()
   b65c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b65c6:	f7ff bfbd 	b.w	b6544 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff ffaa 	bl	b6524 <_ZN7MFRC5229PCD_ResetEv>
   b65d0:	e7d8      	b.n	b6584 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b65d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b65d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65d6:	b089      	sub	sp, #36	; 0x24
   b65d8:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b65dc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b65e0:	9203      	str	r2, [sp, #12]
   b65e2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b65e6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b65ea:	9204      	str	r2, [sp, #16]
   b65ec:	4604      	mov	r4, r0
   b65ee:	468a      	mov	sl, r1
   b65f0:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b65f2:	f1b9 0f00 	cmp.w	r9, #0
   b65f6:	d03e      	beq.n	b6676 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b65f8:	f899 8000 	ldrb.w	r8, [r9]
   b65fc:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b65fe:	2200      	movs	r2, #0
   b6600:	2102      	movs	r1, #2
   b6602:	4620      	mov	r0, r4
   b6604:	f7ff ff1b 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b6608:	227f      	movs	r2, #127	; 0x7f
   b660a:	2108      	movs	r1, #8
   b660c:	4620      	mov	r0, r4
   b660e:	f7ff ff16 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6612:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b6616:	2280      	movs	r2, #128	; 0x80
   b6618:	2114      	movs	r1, #20
   b661a:	4620      	mov	r0, r4
   b661c:	f7ff ff24 	bl	b6468 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6620:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b6624:	9b05      	ldr	r3, [sp, #20]
   b6626:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b662a:	2112      	movs	r1, #18
   b662c:	4620      	mov	r0, r4
   b662e:	f7ff feeb 	bl	b6408 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b6632:	4642      	mov	r2, r8
   b6634:	211a      	movs	r1, #26
   b6636:	4620      	mov	r0, r4
   b6638:	f7ff ff01 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b663c:	4652      	mov	r2, sl
   b663e:	2102      	movs	r1, #2
   b6640:	4620      	mov	r0, r4
   b6642:	f7ff fefc 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b6646:	f1ba 0f0c 	cmp.w	sl, #12
   b664a:	d104      	bne.n	b6656 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b664c:	2280      	movs	r2, #128	; 0x80
   b664e:	211a      	movs	r1, #26
   b6650:	4620      	mov	r0, r4
   b6652:	f7ff ff09 	bl	b6468 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b6656:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b665a:	2108      	movs	r1, #8
   b665c:	4620      	mov	r0, r4
   b665e:	f7ff febc 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b6662:	9b03      	ldr	r3, [sp, #12]
   b6664:	4218      	tst	r0, r3
   b6666:	d108      	bne.n	b667a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b6668:	07c3      	lsls	r3, r0, #31
   b666a:	d402      	bmi.n	b6672 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b666c:	f1b8 0801 	subs.w	r8, r8, #1
   b6670:	d1f3      	bne.n	b665a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b6672:	2004      	movs	r0, #4
   b6674:	e04d      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b6676:	46c8      	mov	r8, r9
   b6678:	e7c0      	b.n	b65fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b667a:	210c      	movs	r1, #12
   b667c:	4620      	mov	r0, r4
   b667e:	f7ff feac 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6682:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b6686:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6688:	d146      	bne.n	b6718 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b668a:	b1dd      	cbz	r5, b66c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b668c:	b1d6      	cbz	r6, b66c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b668e:	2114      	movs	r1, #20
   b6690:	4620      	mov	r0, r4
   b6692:	f7ff fea2 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b6696:	7833      	ldrb	r3, [r6, #0]
   b6698:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b669a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b669c:	d33e      	bcc.n	b671c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b669e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b66a0:	462b      	mov	r3, r5
   b66a2:	2112      	movs	r1, #18
   b66a4:	4620      	mov	r0, r4
   b66a6:	f8cd b000 	str.w	fp, [sp]
   b66aa:	f7ff fe47 	bl	b633c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b66ae:	2118      	movs	r1, #24
   b66b0:	4620      	mov	r0, r4
   b66b2:	f7ff fe92 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b66b6:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b66ba:	f1b9 0f00 	cmp.w	r9, #0
   b66be:	d001      	beq.n	b66c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b66c0:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b66c4:	f018 0f08 	tst.w	r8, #8
   b66c8:	d12a      	bne.n	b6720 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b66ca:	b35d      	cbz	r5, b6724 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b66cc:	b356      	cbz	r6, b6724 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b66ce:	9b04      	ldr	r3, [sp, #16]
   b66d0:	b343      	cbz	r3, b6724 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b66d2:	7832      	ldrb	r2, [r6, #0]
   b66d4:	2a01      	cmp	r2, #1
   b66d6:	d103      	bne.n	b66e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b66d8:	2f04      	cmp	r7, #4
   b66da:	d125      	bne.n	b6728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b66dc:	2009      	movs	r0, #9
   b66de:	e018      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b66e0:	d922      	bls.n	b6728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b66e2:	bb0f      	cbnz	r7, b6728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b66e4:	3a02      	subs	r2, #2
   b66e6:	ab07      	add	r3, sp, #28
   b66e8:	b2d2      	uxtb	r2, r2
   b66ea:	4629      	mov	r1, r5
   b66ec:	4620      	mov	r0, r4
   b66ee:	f7ff fedc 	bl	b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b66f2:	2801      	cmp	r0, #1
   b66f4:	d10d      	bne.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b66f6:	7833      	ldrb	r3, [r6, #0]
   b66f8:	441d      	add	r5, r3
   b66fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b66fe:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b6702:	429a      	cmp	r2, r3
   b6704:	d110      	bne.n	b6728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b6706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b670a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b670e:	429a      	cmp	r2, r3
   b6710:	d10a      	bne.n	b6728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b6712:	b009      	add	sp, #36	; 0x24
   b6714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b6718:	2002      	movs	r0, #2
   b671a:	e7fa      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b671c:	2005      	movs	r0, #5
   b671e:	e7f8      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b6720:	2003      	movs	r0, #3
   b6722:	e7f6      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b6724:	2001      	movs	r0, #1
   b6726:	e7f4      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b6728:	2008      	movs	r0, #8
   b672a:	e7f2      	b.n	b6712 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b672c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b672c:	b510      	push	{r4, lr}
   b672e:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b6730:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b6734:	9405      	str	r4, [sp, #20]
   b6736:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b673a:	9404      	str	r4, [sp, #16]
   b673c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b673e:	9403      	str	r4, [sp, #12]
   b6740:	9c08      	ldr	r4, [sp, #32]
   b6742:	9200      	str	r2, [sp, #0]
   b6744:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b6748:	2230      	movs	r2, #48	; 0x30
   b674a:	460b      	mov	r3, r1
   b674c:	210c      	movs	r1, #12
   b674e:	f7ff ff40 	bl	b65d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b6752:	b006      	add	sp, #24
   b6754:	bd10      	pop	{r4, pc}

000b6756 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b6756:	b570      	push	{r4, r5, r6, lr}
   b6758:	b088      	sub	sp, #32
   b675a:	4606      	mov	r6, r0
   b675c:	461c      	mov	r4, r3
   b675e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b6762:	4615      	mov	r5, r2
   b6764:	b31a      	cbz	r2, b67ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b6766:	781b      	ldrb	r3, [r3, #0]
   b6768:	2b01      	cmp	r3, #1
   b676a:	d920      	bls.n	b67ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b676c:	2280      	movs	r2, #128	; 0x80
   b676e:	211c      	movs	r1, #28
   b6770:	f7ff fe88 	bl	b6484 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b6774:	2307      	movs	r3, #7
   b6776:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b677a:	2300      	movs	r3, #0
   b677c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6780:	f10d 031f 	add.w	r3, sp, #31
   b6784:	e9cd 4300 	strd	r4, r3, [sp]
   b6788:	2201      	movs	r2, #1
   b678a:	462b      	mov	r3, r5
   b678c:	f10d 0117 	add.w	r1, sp, #23
   b6790:	4630      	mov	r0, r6
   b6792:	f7ff ffcb 	bl	b672c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b6796:	2801      	cmp	r0, #1
   b6798:	d107      	bne.n	b67aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b679a:	7823      	ldrb	r3, [r4, #0]
   b679c:	2b02      	cmp	r3, #2
   b679e:	d108      	bne.n	b67b2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b67a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b67a4:	2b00      	cmp	r3, #0
   b67a6:	bf18      	it	ne
   b67a8:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b67aa:	b008      	add	sp, #32
   b67ac:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b67ae:	2005      	movs	r0, #5
   b67b0:	e7fb      	b.n	b67aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b67b2:	2002      	movs	r0, #2
   b67b4:	e7f9      	b.n	b67aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b67b6 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b67b6:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b67b8:	460a      	mov	r2, r1
   b67ba:	2126      	movs	r1, #38	; 0x26
   b67bc:	f7ff bfcb 	b.w	b6756 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b67c0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b67c0:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b67c2:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b67c4:	f10d 0203 	add.w	r2, sp, #3
   b67c8:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b67ca:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b67ce:	f7ff fff2 	bl	b67b6 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b67d2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b67d6:	1e43      	subs	r3, r0, #1
   b67d8:	4258      	negs	r0, r3
   b67da:	4158      	adcs	r0, r3
   b67dc:	b003      	add	sp, #12
   b67de:	f85d fb04 	ldr.w	pc, [sp], #4

000b67e2 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b67e2:	b570      	push	{r4, r5, r6, lr}
   b67e4:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b67e6:	2350      	movs	r3, #80	; 0x50
   b67e8:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b67ec:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b67ee:	f10d 0316 	add.w	r3, sp, #22
   b67f2:	2202      	movs	r2, #2
   b67f4:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b67f6:	4606      	mov	r6, r0
	buffer[1] = 0;
   b67f8:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b67fc:	f7ff fe55 	bl	b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b6800:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6802:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b6804:	d10f      	bne.n	b6826 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b6806:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b680a:	e9cd 4400 	strd	r4, r4, [sp]
   b680e:	4623      	mov	r3, r4
   b6810:	2204      	movs	r2, #4
   b6812:	a905      	add	r1, sp, #20
   b6814:	4630      	mov	r0, r6
   b6816:	f7ff ff89 	bl	b672c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b681a:	2804      	cmp	r0, #4
   b681c:	d003      	beq.n	b6826 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b681e:	2801      	cmp	r0, #1
   b6820:	bf14      	ite	ne
   b6822:	4605      	movne	r5, r0
   b6824:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b6826:	4628      	mov	r0, r5
   b6828:	b006      	add	sp, #24
   b682a:	bd70      	pop	{r4, r5, r6, pc}

000b682c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b682c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b682e:	4606      	mov	r6, r0
   b6830:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b6832:	4614      	mov	r4, r2
   b6834:	b1ca      	cbz	r2, b686a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b6836:	781b      	ldrb	r3, [r3, #0]
   b6838:	2b11      	cmp	r3, #17
   b683a:	d916      	bls.n	b686a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b683c:	2330      	movs	r3, #48	; 0x30
   b683e:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b6840:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b6842:	1c93      	adds	r3, r2, #2
   b6844:	4621      	mov	r1, r4
   b6846:	2202      	movs	r2, #2
   b6848:	f7ff fe2f 	bl	b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b684c:	2801      	cmp	r0, #1
   b684e:	d10a      	bne.n	b6866 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b6850:	2300      	movs	r3, #0
   b6852:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6856:	9003      	str	r0, [sp, #12]
   b6858:	9500      	str	r5, [sp, #0]
   b685a:	4623      	mov	r3, r4
   b685c:	2204      	movs	r2, #4
   b685e:	4621      	mov	r1, r4
   b6860:	4630      	mov	r0, r6
   b6862:	f7ff ff63 	bl	b672c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b6866:	b004      	add	sp, #16
   b6868:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b686a:	2005      	movs	r0, #5
   b686c:	e7fb      	b.n	b6866 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b686e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b686e:	b510      	push	{r4, lr}
   b6870:	b08a      	sub	sp, #40	; 0x28
   b6872:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b6874:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b6878:	681a      	ldr	r2, [r3, #0]
   b687a:	889b      	ldrh	r3, [r3, #4]
   b687c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b6880:	7863      	ldrb	r3, [r4, #1]
   b6882:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b6886:	78a3      	ldrb	r3, [r4, #2]
   b6888:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b688c:	78e3      	ldrb	r3, [r4, #3]
   b688e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b6892:	7923      	ldrb	r3, [r4, #4]
   b6894:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b6898:	2300      	movs	r3, #0
   b689a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b689e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b68a2:	9301      	str	r3, [sp, #4]
   b68a4:	230c      	movs	r3, #12
	sendData[0] = command;
   b68a6:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b68aa:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b68ae:	9300      	str	r3, [sp, #0]
   b68b0:	2210      	movs	r2, #16
   b68b2:	ab07      	add	r3, sp, #28
   b68b4:	210e      	movs	r1, #14
   b68b6:	f7ff fe8c 	bl	b65d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b68ba:	b00a      	add	sp, #40	; 0x28
   b68bc:	bd10      	pop	{r4, pc}

000b68be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b68be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b68c2:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b68c4:	b08b      	sub	sp, #44	; 0x2c
   b68c6:	4682      	mov	sl, r0
   b68c8:	460f      	mov	r7, r1
   b68ca:	4690      	mov	r8, r2
	if (validBits > 80) {
   b68cc:	f200 8140 	bhi.w	b6b50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b68d0:	2280      	movs	r2, #128	; 0x80
   b68d2:	211c      	movs	r1, #28
   b68d4:	f7ff fdd6 	bl	b6484 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b68d8:	2393      	movs	r3, #147	; 0x93
   b68da:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b68de:	f1b8 0f00 	cmp.w	r8, #0
   b68e2:	f000 80bc 	beq.w	b6a5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b68e6:	783c      	ldrb	r4, [r7, #0]
   b68e8:	2c04      	cmp	r4, #4
   b68ea:	bf94      	ite	ls
   b68ec:	2300      	movls	r3, #0
   b68ee:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b68f0:	2501      	movs	r5, #1
   b68f2:	2600      	movs	r6, #0
   b68f4:	e00b      	b.n	b690e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b68f6:	2395      	movs	r3, #149	; 0x95
   b68f8:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b68fc:	f1b8 0f00 	cmp.w	r8, #0
   b6900:	f000 80af 	beq.w	b6a62 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b6904:	783c      	ldrb	r4, [r7, #0]
   b6906:	2c07      	cmp	r4, #7
   b6908:	bf94      	ite	ls
   b690a:	2300      	movls	r3, #0
   b690c:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b690e:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b6912:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b6914:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b6918:	2b00      	cmp	r3, #0
   b691a:	f000 80a4 	beq.w	b6a66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b691e:	2288      	movs	r2, #136	; 0x88
   b6920:	f88d 201e 	strb.w	r2, [sp, #30]
   b6924:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6926:	f014 0207 	ands.w	r2, r4, #7
   b692a:	bf18      	it	ne
   b692c:	2201      	movne	r2, #1
   b692e:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b6932:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6936:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b6938:	d01d      	beq.n	b6976 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b693a:	2b00      	cmp	r3, #0
   b693c:	bf14      	ite	ne
   b693e:	f04f 0903 	movne.w	r9, #3
   b6942:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b6946:	f106 0c01 	add.w	ip, r6, #1
   b694a:	4591      	cmp	r9, r2
   b694c:	bf94      	ite	ls
   b694e:	eb01 0e09 	addls.w	lr, r1, r9
   b6952:	eb01 0e02 	addhi.w	lr, r1, r2
   b6956:	fa57 fc8c 	uxtab	ip, r7, ip
   b695a:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b695e:	460a      	mov	r2, r1
   b6960:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b6964:	3101      	adds	r1, #1
   b6966:	b2c9      	uxtb	r1, r1
   b6968:	445a      	add	r2, fp
   b696a:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b696e:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b6972:	4571      	cmp	r1, lr
   b6974:	d1f3      	bne.n	b695e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b6976:	b10b      	cbz	r3, b697c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b6978:	3008      	adds	r0, #8
   b697a:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b697c:	2c1f      	cmp	r4, #31
   b697e:	dd74      	ble.n	b6a6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6980:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b6984:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b6988:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b698c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6990:	4053      	eors	r3, r2
   b6992:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b6996:	4053      	eors	r3, r2
   b6998:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b699c:	4053      	eors	r3, r2
   b699e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b69a2:	2207      	movs	r2, #7
   b69a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b69a8:	a907      	add	r1, sp, #28
   b69aa:	4650      	mov	r0, sl
   b69ac:	f7ff fd7d 	bl	b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b69b0:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b69b2:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b69b4:	f040 80c8 	bne.w	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b69b8:	2300      	movs	r3, #0
   b69ba:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b69be:	2303      	movs	r3, #3
   b69c0:	f88d 301b 	strb.w	r3, [sp, #27]
   b69c4:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b69c6:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b69ca:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b69ce:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b69d2:	9305      	str	r3, [sp, #20]
   b69d4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b69d8:	b2d2      	uxtb	r2, r2
   b69da:	211a      	movs	r1, #26
   b69dc:	4650      	mov	r0, sl
   b69de:	f7ff fd2e 	bl	b643e <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b69e2:	9b05      	ldr	r3, [sp, #20]
   b69e4:	9302      	str	r3, [sp, #8]
   b69e6:	f10d 031a 	add.w	r3, sp, #26
   b69ea:	2200      	movs	r2, #0
   b69ec:	9301      	str	r3, [sp, #4]
   b69ee:	f10d 031b 	add.w	r3, sp, #27
   b69f2:	9203      	str	r2, [sp, #12]
   b69f4:	9300      	str	r3, [sp, #0]
   b69f6:	464a      	mov	r2, r9
   b69f8:	465b      	mov	r3, fp
   b69fa:	a907      	add	r1, sp, #28
   b69fc:	4650      	mov	r0, sl
   b69fe:	f7ff fe95 	bl	b672c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6a02:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b6a04:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b6a06:	d14c      	bne.n	b6aa2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b6a08:	211c      	movs	r1, #28
   b6a0a:	4650      	mov	r0, sl
   b6a0c:	f7ff fce5 	bl	b63da <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b6a10:	0681      	lsls	r1, r0, #26
   b6a12:	f100 8099 	bmi.w	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b6a16:	f010 001f 	ands.w	r0, r0, #31
   b6a1a:	bf08      	it	eq
   b6a1c:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b6a1e:	42a0      	cmp	r0, r4
   b6a20:	f340 8087 	ble.w	b6b32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b6a24:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6a26:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b6a2a:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b6a2c:	f013 0307 	ands.w	r3, r3, #7
   b6a30:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b6a34:	bf18      	it	ne
   b6a36:	2301      	movne	r3, #1
   b6a38:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b6a3a:	4418      	add	r0, r3
   b6a3c:	ab0a      	add	r3, sp, #40	; 0x28
   b6a3e:	4418      	add	r0, r3
   b6a40:	2301      	movs	r3, #1
   b6a42:	fa03 f202 	lsl.w	r2, r3, r2
   b6a46:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b6a4a:	4313      	orrs	r3, r2
   b6a4c:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b6a50:	e794      	b.n	b697c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b6a52:	2397      	movs	r3, #151	; 0x97
   b6a54:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b6a58:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b6a5a:	4623      	mov	r3, r4
				break;
   b6a5c:	e757      	b.n	b690e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6a5e:	4643      	mov	r3, r8
   b6a60:	e746      	b.n	b68f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6a62:	4643      	mov	r3, r8
   b6a64:	e753      	b.n	b690e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b6a66:	2102      	movs	r1, #2
   b6a68:	e75d      	b.n	b6926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b6a6a:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b6a6c:	3302      	adds	r3, #2
   b6a6e:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b6a70:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6a74:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b6a78:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b6a7c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b6a80:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6a84:	bf18      	it	ne
   b6a86:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b6a8a:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6a8c:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b6a8e:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b6a92:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b6a96:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b6a9a:	f88d 301b 	strb.w	r3, [sp, #27]
   b6a9e:	9404      	str	r4, [sp, #16]
   b6aa0:	e795      	b.n	b69ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b6aa2:	2801      	cmp	r0, #1
   b6aa4:	d150      	bne.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6aa6:	9b04      	ldr	r3, [sp, #16]
   b6aa8:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b6aaa:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b6aae:	f77f af67 	ble.w	b6980 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6ab2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6ab6:	2b88      	cmp	r3, #136	; 0x88
   b6ab8:	d13e      	bne.n	b6b38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b6aba:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6abc:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b6abe:	3601      	adds	r6, #1
   b6ac0:	441a      	add	r2, r3
   b6ac2:	fa57 f686 	uxtab	r6, r7, r6
   b6ac6:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b6ac8:	4619      	mov	r1, r3
   b6aca:	a80a      	add	r0, sp, #40	; 0x28
   b6acc:	3301      	adds	r3, #1
   b6ace:	4401      	add	r1, r0
   b6ad0:	b2db      	uxtb	r3, r3
   b6ad2:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b6ad6:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b6ada:	4293      	cmp	r3, r2
   b6adc:	d1f4      	bne.n	b6ac8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b6ade:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6ae2:	2e03      	cmp	r6, #3
   b6ae4:	d137      	bne.n	b6b56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b6ae6:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b6aea:	bba4      	cbnz	r4, b6b56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6aec:	f10d 031e 	add.w	r3, sp, #30
   b6af0:	2201      	movs	r2, #1
   b6af2:	4659      	mov	r1, fp
   b6af4:	4650      	mov	r0, sl
   b6af6:	f7ff fcd8 	bl	b64aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b6afa:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6afc:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b6afe:	d123      	bne.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6b00:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6b04:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b6b08:	429a      	cmp	r2, r3
   b6b0a:	d127      	bne.n	b6b5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b6b0c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6b10:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b6b14:	429a      	cmp	r2, r3
   b6b16:	d121      	bne.n	b6b5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b6b18:	f89b 3000 	ldrb.w	r3, [fp]
   b6b1c:	075a      	lsls	r2, r3, #29
   b6b1e:	d50e      	bpl.n	b6b3e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b6b20:	3501      	adds	r5, #1
   b6b22:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b6b24:	2d03      	cmp	r5, #3
   b6b26:	d094      	beq.n	b6a52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b6b28:	2d04      	cmp	r5, #4
   b6b2a:	d002      	beq.n	b6b32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b6b2c:	2d02      	cmp	r5, #2
   b6b2e:	f43f aee2 	beq.w	b68f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b6b32:	f04f 0906 	mov.w	r9, #6
   b6b36:	e007      	b.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b6b38:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6b3a:	2204      	movs	r2, #4
   b6b3c:	e7bf      	b.n	b6abe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b6b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6b42:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6b44:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6b46:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6b48:	4648      	mov	r0, r9
   b6b4a:	b00b      	add	sp, #44	; 0x2c
   b6b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b6b50:	f04f 0907 	mov.w	r9, #7
   b6b54:	e7f8      	b.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6b56:	f04f 0902 	mov.w	r9, #2
   b6b5a:	e7f5      	b.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b6b5c:	f04f 0908 	mov.w	r9, #8
   b6b60:	e7f2      	b.n	b6b48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b6b62 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b6b62:	b508      	push	{r3, lr}
   b6b64:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6b66:	2200      	movs	r2, #0
   b6b68:	f7ff fea9 	bl	b68be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b6b6c:	1e43      	subs	r3, r0, #1
   b6b6e:	4258      	negs	r0, r3
   b6b70:	4158      	adcs	r0, r3
   b6b72:	bd08      	pop	{r3, pc}

000b6b74 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b6b74:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b6b76:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b6b78:	2301      	movs	r3, #1
	_pin = pin;
   b6b7a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b6b7c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b6b7e:	7403      	strb	r3, [r0, #16]
}
   b6b80:	bd10      	pop	{r4, pc}

000b6b82 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b6b82:	b510      	push	{r4, lr}
   b6b84:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b6b86:	2100      	movs	r1, #0
   b6b88:	7980      	ldrb	r0, [r0, #6]
   b6b8a:	f001 f9b3 	bl	b7ef4 <pinMode>
	digitalWrite(_pin, HIGH);
   b6b8e:	79a0      	ldrb	r0, [r4, #6]
   b6b90:	2101      	movs	r1, #1
   b6b92:	f001 f9c0 	bl	b7f16 <digitalWrite>
	_lastreadtime = 0;
   b6b96:	2300      	movs	r3, #0
   b6b98:	60e3      	str	r3, [r4, #12]
}
   b6b9a:	bd10      	pop	{r4, pc}

000b6b9c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b6b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6ba0:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ba2:	f000 f8eb 	bl	b6d7c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b6ba6:	68e3      	ldr	r3, [r4, #12]
   b6ba8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b6baa:	bf84      	itt	hi
   b6bac:	2300      	movhi	r3, #0
   b6bae:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b6bb0:	7c23      	ldrb	r3, [r4, #16]
   b6bb2:	b923      	cbnz	r3, b6bbe <_ZN3DHT4readEv+0x22>
   b6bb4:	68e3      	ldr	r3, [r4, #12]
   b6bb6:	1ac0      	subs	r0, r0, r3
   b6bb8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6bbc:	d367      	bcc.n	b6c8e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b6bbe:	2500      	movs	r5, #0
   b6bc0:	7425      	strb	r5, [r4, #16]
   b6bc2:	f000 f8db 	bl	b6d7c <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b6bc6:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b6bc8:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6bca:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b6bcc:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b6bce:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b6bd0:	f001 f9a1 	bl	b7f16 <digitalWrite>
	delay(250);
   b6bd4:	20fa      	movs	r0, #250	; 0xfa
   b6bd6:	f000 fb25 	bl	b7224 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b6bda:	79a0      	ldrb	r0, [r4, #6]
   b6bdc:	2101      	movs	r1, #1
   b6bde:	f001 f989 	bl	b7ef4 <pinMode>
	digitalWrite(_pin, LOW);
   b6be2:	4629      	mov	r1, r5
   b6be4:	79a0      	ldrb	r0, [r4, #6]
   b6be6:	f001 f996 	bl	b7f16 <digitalWrite>
	delay(20);
   b6bea:	2014      	movs	r0, #20
   b6bec:	f000 fb1a 	bl	b7224 <delay>
	noInterrupts();
   b6bf0:	f000 fbd2 	bl	b7398 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b6bf4:	2101      	movs	r1, #1
   b6bf6:	79a0      	ldrb	r0, [r4, #6]
   b6bf8:	f001 f98d 	bl	b7f16 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6bfc:	2028      	movs	r0, #40	; 0x28
   b6bfe:	f000 f8b5 	bl	b6d6c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b6c02:	79a0      	ldrb	r0, [r4, #6]
   b6c04:	4629      	mov	r1, r5
   b6c06:	f001 f975 	bl	b7ef4 <pinMode>
	uint8_t j = 0, i;
   b6c0a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b6c0c:	2701      	movs	r7, #1
   b6c0e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b6c12:	79a0      	ldrb	r0, [r4, #6]
   b6c14:	f001 f998 	bl	b7f48 <digitalRead>
   b6c18:	42b8      	cmp	r0, r7
   b6c1a:	fa5f f988 	uxtb.w	r9, r8
   b6c1e:	d108      	bne.n	b6c32 <_ZN3DHT4readEv+0x96>
   b6c20:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b6c22:	f108 0801 	add.w	r8, r8, #1
   b6c26:	f000 f8a1 	bl	b6d6c <HAL_Delay_Microseconds>
   b6c2a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6c2e:	d1f0      	bne.n	b6c12 <_ZN3DHT4readEv+0x76>
   b6c30:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b6c32:	79a0      	ldrb	r0, [r4, #6]
   b6c34:	f001 f988 	bl	b7f48 <digitalRead>

		if (counter == 255) break;
   b6c38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b6c3c:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b6c3e:	d014      	beq.n	b6c6a <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b6c40:	2d03      	cmp	r5, #3
   b6c42:	d90e      	bls.n	b6c62 <_ZN3DHT4readEv+0xc6>
   b6c44:	07ea      	lsls	r2, r5, #31
   b6c46:	d40c      	bmi.n	b6c62 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b6c48:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b6c4a:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b6c4c:	5ca3      	ldrb	r3, [r4, r2]
   b6c4e:	005b      	lsls	r3, r3, #1
   b6c50:	b2db      	uxtb	r3, r3
   b6c52:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b6c54:	7a21      	ldrb	r1, [r4, #8]
   b6c56:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b6c58:	bf3c      	itt	cc
   b6c5a:	f043 0301 	orrcc.w	r3, r3, #1
   b6c5e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b6c60:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b6c62:	3501      	adds	r5, #1
   b6c64:	b2ed      	uxtb	r5, r5
   b6c66:	2d55      	cmp	r5, #85	; 0x55
   b6c68:	d1d1      	bne.n	b6c0e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b6c6a:	f000 fb97 	bl	b739c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b6c6e:	2e27      	cmp	r6, #39	; 0x27
   b6c70:	d90f      	bls.n	b6c92 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b6c72:	7863      	ldrb	r3, [r4, #1]
   b6c74:	7820      	ldrb	r0, [r4, #0]
   b6c76:	4418      	add	r0, r3
   b6c78:	78a3      	ldrb	r3, [r4, #2]
   b6c7a:	4418      	add	r0, r3
   b6c7c:	78e3      	ldrb	r3, [r4, #3]
   b6c7e:	4418      	add	r0, r3
   b6c80:	7923      	ldrb	r3, [r4, #4]
   b6c82:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b6c84:	1ac3      	subs	r3, r0, r3
   b6c86:	4258      	negs	r0, r3
   b6c88:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b6c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b6c8e:	2001      	movs	r0, #1
   b6c90:	e7fb      	b.n	b6c8a <_ZN3DHT4readEv+0xee>
	return false;
   b6c92:	2000      	movs	r0, #0
   b6c94:	e7f9      	b.n	b6c8a <_ZN3DHT4readEv+0xee>
	...

000b6c98 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b6c98:	b510      	push	{r4, lr}
   b6c9a:	4604      	mov	r4, r0
	if (read()) {
   b6c9c:	f7ff ff7e 	bl	b6b9c <_ZN3DHT4readEv>
   b6ca0:	b320      	cbz	r0, b6cec <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b6ca2:	79e3      	ldrb	r3, [r4, #7]
   b6ca4:	2b0b      	cmp	r3, #11
   b6ca6:	d01b      	beq.n	b6ce0 <_ZN3DHT15readTemperatureEv+0x48>
   b6ca8:	3b15      	subs	r3, #21
   b6caa:	2b01      	cmp	r3, #1
   b6cac:	d81e      	bhi.n	b6cec <_ZN3DHT15readTemperatureEv+0x54>
   b6cae:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b6cb0:	eddf 6a10 	vldr	s13, [pc, #64]	; b6cf4 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b6cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b6cb8:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b6cbc:	78e2      	ldrb	r2, [r4, #3]
   b6cbe:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b6cc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b6cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b6cca:	061b      	lsls	r3, r3, #24
				f += data[3];
   b6ccc:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b6cd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b6cd4:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b6cd8:	d507      	bpl.n	b6cea <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b6cda:	eeb1 0a40 	vneg.f32	s0, s0
   b6cde:	e004      	b.n	b6cea <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b6ce0:	78a3      	ldrb	r3, [r4, #2]
   b6ce2:	ee00 3a10 	vmov	s0, r3
   b6ce6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b6cea:	bd10      	pop	{r4, pc}
		switch (_type) {
   b6cec:	ed9f 0a02 	vldr	s0, [pc, #8]	; b6cf8 <_ZN3DHT15readTemperatureEv+0x60>
   b6cf0:	e7fb      	b.n	b6cea <_ZN3DHT15readTemperatureEv+0x52>
   b6cf2:	bf00      	nop
   b6cf4:	43800000 	.word	0x43800000
   b6cf8:	7fc00000 	.word	0x7fc00000

000b6cfc <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b6cfc:	f7ff bfcc 	b.w	b6c98 <_ZN3DHT15readTemperatureEv>

000b6d00 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b6d00:	6001      	str	r1, [r0, #0]
}
   b6d02:	4770      	bx	lr

000b6d04 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b6d04:	b510      	push	{r4, lr}
   b6d06:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b6d08:	2101      	movs	r1, #1
   b6d0a:	8800      	ldrh	r0, [r0, #0]
   b6d0c:	f001 f8f2 	bl	b7ef4 <pinMode>
	digitalWrite(_pin, LOW);
   b6d10:	8820      	ldrh	r0, [r4, #0]
   b6d12:	2100      	movs	r1, #0
   b6d14:	f001 f8ff 	bl	b7f16 <digitalWrite>
   b6d18:	2002      	movs	r0, #2
   b6d1a:	f000 f827 	bl	b6d6c <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b6d1e:	8820      	ldrh	r0, [r4, #0]
   b6d20:	2101      	movs	r1, #1
   b6d22:	f001 f8f8 	bl	b7f16 <digitalWrite>
   b6d26:	2005      	movs	r0, #5
   b6d28:	f000 f820 	bl	b6d6c <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b6d2c:	8820      	ldrh	r0, [r4, #0]
   b6d2e:	2100      	movs	r1, #0
   b6d30:	f001 f8f1 	bl	b7f16 <digitalWrite>
	pinMode(_pin,INPUT);
   b6d34:	8820      	ldrh	r0, [r4, #0]
   b6d36:	2100      	movs	r1, #0
   b6d38:	f001 f8dc 	bl	b7ef4 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b6d3c:	8820      	ldrh	r0, [r4, #0]
   b6d3e:	2101      	movs	r1, #1
   b6d40:	f001 f92c 	bl	b7f9c <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b6d44:	233a      	movs	r3, #58	; 0x3a
   b6d46:	fb90 f0f3 	sdiv	r0, r0, r3
   b6d4a:	bd10      	pop	{r4, pc}

000b6d4c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <os_mutex_recursive_create+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	00030248 	.word	0x00030248

000b6d5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <HAL_RNG_GetRandomNumber+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	685b      	ldr	r3, [r3, #4]
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	00030218 	.word	0x00030218

000b6d6c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <HAL_Delay_Microseconds+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	68db      	ldr	r3, [r3, #12]
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	00030218 	.word	0x00030218

000b6d7c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	695b      	ldr	r3, [r3, #20]
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	00030218 	.word	0x00030218

000b6d8c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <HAL_Validate_Pin_Function+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	685b      	ldr	r3, [r3, #4]
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	0003022c 	.word	0x0003022c

000b6d9c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <HAL_Pin_Mode+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	689b      	ldr	r3, [r3, #8]
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	0003022c 	.word	0x0003022c

000b6dac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <HAL_Get_Pin_Mode+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	68db      	ldr	r3, [r3, #12]
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	0003022c 	.word	0x0003022c

000b6dbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <HAL_GPIO_Write+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	691b      	ldr	r3, [r3, #16]
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	0003022c 	.word	0x0003022c

000b6dcc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <HAL_GPIO_Read+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	695b      	ldr	r3, [r3, #20]
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	0003022c 	.word	0x0003022c

000b6ddc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <HAL_Interrupts_Enable_All+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6a1b      	ldr	r3, [r3, #32]
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	0003022c 	.word	0x0003022c

000b6dec <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <HAL_Interrupts_Disable_All+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	0003022c 	.word	0x0003022c

000b6dfc <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <hal_adc_read+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	0003022c 	.word	0x0003022c

000b6e0c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <HAL_Pulse_In+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	0003022c 	.word	0x0003022c

000b6e1c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <hal_i2c_set_speed+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	681b      	ldr	r3, [r3, #0]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	00030228 	.word	0x00030228

000b6e2c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <hal_i2c_begin+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	68db      	ldr	r3, [r3, #12]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	00030228 	.word	0x00030228

000b6e3c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <hal_i2c_begin_transmission+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	699b      	ldr	r3, [r3, #24]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	00030228 	.word	0x00030228

000b6e4c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <hal_i2c_end_transmission+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	69db      	ldr	r3, [r3, #28]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	00030228 	.word	0x00030228

000b6e5c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <hal_i2c_write+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	6a1b      	ldr	r3, [r3, #32]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	00030228 	.word	0x00030228

000b6e6c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <hal_i2c_available+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	00030228 	.word	0x00030228

000b6e7c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <hal_i2c_read+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	00030228 	.word	0x00030228

000b6e8c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <hal_i2c_peek+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	00030228 	.word	0x00030228

000b6e9c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <hal_i2c_flush+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	00030228 	.word	0x00030228

000b6eac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <hal_i2c_is_enabled+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	00030228 	.word	0x00030228

000b6ebc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <hal_i2c_init+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	00030228 	.word	0x00030228

000b6ecc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <inet_inet_ntop+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	695b      	ldr	r3, [r3, #20]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	00030264 	.word	0x00030264

000b6edc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <netdb_freeaddrinfo+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	689b      	ldr	r3, [r3, #8]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	00030268 	.word	0x00030268

000b6eec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <netdb_getaddrinfo+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	68db      	ldr	r3, [r3, #12]
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	00030268 	.word	0x00030268

000b6efc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <hal_spi_begin+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	681b      	ldr	r3, [r3, #0]
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	00030230 	.word	0x00030230

000b6f0c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <hal_spi_transfer+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	695b      	ldr	r3, [r3, #20]
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030230 	.word	0x00030230

000b6f1c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <hal_spi_init+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	69db      	ldr	r3, [r3, #28]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030230 	.word	0x00030230

000b6f2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <hal_spi_is_enabled+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6a1b      	ldr	r3, [r3, #32]
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030230 	.word	0x00030230

000b6f3c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <hal_spi_info+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030230 	.word	0x00030230

000b6f4c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <hal_spi_set_settings+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030230 	.word	0x00030230

000b6f5c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <hal_spi_acquire+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030230 	.word	0x00030230

000b6f6c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <hal_spi_release+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030230 	.word	0x00030230

000b6f7c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <hal_usart_write+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	68db      	ldr	r3, [r3, #12]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	0003023c 	.word	0x0003023c

000b6f8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <hal_usart_available+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	691b      	ldr	r3, [r3, #16]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	0003023c 	.word	0x0003023c

000b6f9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_usart_read+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	695b      	ldr	r3, [r3, #20]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	0003023c 	.word	0x0003023c

000b6fac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_usart_peek+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	699b      	ldr	r3, [r3, #24]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	0003023c 	.word	0x0003023c

000b6fbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <hal_usart_flush+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	69db      	ldr	r3, [r3, #28]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	0003023c 	.word	0x0003023c

000b6fcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <hal_usart_is_enabled+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a1b      	ldr	r3, [r3, #32]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	0003023c 	.word	0x0003023c

000b6fdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <hal_usart_available_data_for_write+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	0003023c 	.word	0x0003023c

000b6fec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <hal_usart_init_ex+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	0003023c 	.word	0x0003023c

000b6ffc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <HAL_USB_USART_Init+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	681b      	ldr	r3, [r3, #0]
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	0003024c 	.word	0x0003024c

000b700c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <HAL_USB_USART_Begin+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	685b      	ldr	r3, [r3, #4]
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	0003024c 	.word	0x0003024c

000b701c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <HAL_USB_USART_Available_Data+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	691b      	ldr	r3, [r3, #16]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	0003024c 	.word	0x0003024c

000b702c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	695b      	ldr	r3, [r3, #20]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	0003024c 	.word	0x0003024c

000b703c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <HAL_USB_USART_Receive_Data+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	699b      	ldr	r3, [r3, #24]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	0003024c 	.word	0x0003024c

000b704c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <HAL_USB_USART_Send_Data+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	69db      	ldr	r3, [r3, #28]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	0003024c 	.word	0x0003024c

000b705c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <HAL_USB_USART_Flush_Data+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	6a1b      	ldr	r3, [r3, #32]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	0003024c 	.word	0x0003024c

000b706c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <panic_+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030260 	.word	0x00030260

000b707c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <set_system_mode+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	685b      	ldr	r3, [r3, #4]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030220 	.word	0x00030220

000b708c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <system_delay_ms+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	695b      	ldr	r3, [r3, #20]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030220 	.word	0x00030220

000b709c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b03      	ldr	r3, [pc, #12]	; (b70ac <system_ctrl_set_app_request_handler+0x10>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b70a6:	9301      	str	r3, [sp, #4]
   b70a8:	bd08      	pop	{r3, pc}
   b70aa:	0000      	.short	0x0000
   b70ac:	00030220 	.word	0x00030220

000b70b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b03      	ldr	r3, [pc, #12]	; (b70c0 <system_ctrl_set_result+0x10>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b70ba:	9301      	str	r3, [sp, #4]
   b70bc:	bd08      	pop	{r3, pc}
   b70be:	0000      	.short	0x0000
   b70c0:	00030220 	.word	0x00030220

000b70c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b70cc:	9301      	str	r3, [sp, #4]
   b70ce:	bd08      	pop	{r3, pc}
   b70d0:	00030244 	.word	0x00030244

000b70d4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b70d4:	b508      	push	{r3, lr}
   b70d6:	4b02      	ldr	r3, [pc, #8]	; (b70e0 <spark_cloud_disconnect+0xc>)
   b70d8:	681b      	ldr	r3, [r3, #0]
   b70da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b70dc:	9301      	str	r3, [sp, #4]
   b70de:	bd08      	pop	{r3, pc}
   b70e0:	00030244 	.word	0x00030244

000b70e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b70e4:	b508      	push	{r3, lr}
   b70e6:	4b02      	ldr	r3, [pc, #8]	; (b70f0 <network_connect+0xc>)
   b70e8:	681b      	ldr	r3, [r3, #0]
   b70ea:	685b      	ldr	r3, [r3, #4]
   b70ec:	9301      	str	r3, [sp, #4]
   b70ee:	bd08      	pop	{r3, pc}
   b70f0:	00030240 	.word	0x00030240

000b70f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b70f4:	b508      	push	{r3, lr}
   b70f6:	4b02      	ldr	r3, [pc, #8]	; (b7100 <network_connecting+0xc>)
   b70f8:	681b      	ldr	r3, [r3, #0]
   b70fa:	689b      	ldr	r3, [r3, #8]
   b70fc:	9301      	str	r3, [sp, #4]
   b70fe:	bd08      	pop	{r3, pc}
   b7100:	00030240 	.word	0x00030240

000b7104 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7104:	b508      	push	{r3, lr}
   b7106:	4b02      	ldr	r3, [pc, #8]	; (b7110 <network_disconnect+0xc>)
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	68db      	ldr	r3, [r3, #12]
   b710c:	9301      	str	r3, [sp, #4]
   b710e:	bd08      	pop	{r3, pc}
   b7110:	00030240 	.word	0x00030240

000b7114 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7114:	b508      	push	{r3, lr}
   b7116:	4b02      	ldr	r3, [pc, #8]	; (b7120 <network_ready+0xc>)
   b7118:	681b      	ldr	r3, [r3, #0]
   b711a:	691b      	ldr	r3, [r3, #16]
   b711c:	9301      	str	r3, [sp, #4]
   b711e:	bd08      	pop	{r3, pc}
   b7120:	00030240 	.word	0x00030240

000b7124 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7124:	b508      	push	{r3, lr}
   b7126:	4b02      	ldr	r3, [pc, #8]	; (b7130 <network_on+0xc>)
   b7128:	681b      	ldr	r3, [r3, #0]
   b712a:	695b      	ldr	r3, [r3, #20]
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	bd08      	pop	{r3, pc}
   b7130:	00030240 	.word	0x00030240

000b7134 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7134:	b508      	push	{r3, lr}
   b7136:	4b02      	ldr	r3, [pc, #8]	; (b7140 <network_off+0xc>)
   b7138:	681b      	ldr	r3, [r3, #0]
   b713a:	699b      	ldr	r3, [r3, #24]
   b713c:	9301      	str	r3, [sp, #4]
   b713e:	bd08      	pop	{r3, pc}
   b7140:	00030240 	.word	0x00030240

000b7144 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7144:	b508      	push	{r3, lr}
   b7146:	4b02      	ldr	r3, [pc, #8]	; (b7150 <network_listen+0xc>)
   b7148:	681b      	ldr	r3, [r3, #0]
   b714a:	69db      	ldr	r3, [r3, #28]
   b714c:	9301      	str	r3, [sp, #4]
   b714e:	bd08      	pop	{r3, pc}
   b7150:	00030240 	.word	0x00030240

000b7154 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7154:	b508      	push	{r3, lr}
   b7156:	4b02      	ldr	r3, [pc, #8]	; (b7160 <network_listening+0xc>)
   b7158:	681b      	ldr	r3, [r3, #0]
   b715a:	6a1b      	ldr	r3, [r3, #32]
   b715c:	9301      	str	r3, [sp, #4]
   b715e:	bd08      	pop	{r3, pc}
   b7160:	00030240 	.word	0x00030240

000b7164 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7164:	b508      	push	{r3, lr}
   b7166:	4b02      	ldr	r3, [pc, #8]	; (b7170 <network_set_listen_timeout+0xc>)
   b7168:	681b      	ldr	r3, [r3, #0]
   b716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b716c:	9301      	str	r3, [sp, #4]
   b716e:	bd08      	pop	{r3, pc}
   b7170:	00030240 	.word	0x00030240

000b7174 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7174:	b508      	push	{r3, lr}
   b7176:	4b02      	ldr	r3, [pc, #8]	; (b7180 <network_get_listen_timeout+0xc>)
   b7178:	681b      	ldr	r3, [r3, #0]
   b717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b717c:	9301      	str	r3, [sp, #4]
   b717e:	bd08      	pop	{r3, pc}
   b7180:	00030240 	.word	0x00030240

000b7184 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7184:	b508      	push	{r3, lr}
   b7186:	4b02      	ldr	r3, [pc, #8]	; (b7190 <network_is_on+0xc>)
   b7188:	681b      	ldr	r3, [r3, #0]
   b718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b718c:	9301      	str	r3, [sp, #4]
   b718e:	bd08      	pop	{r3, pc}
   b7190:	00030240 	.word	0x00030240

000b7194 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7194:	b508      	push	{r3, lr}
   b7196:	4b02      	ldr	r3, [pc, #8]	; (b71a0 <network_is_off+0xc>)
   b7198:	681b      	ldr	r3, [r3, #0]
   b719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	bd08      	pop	{r3, pc}
   b71a0:	00030240 	.word	0x00030240

000b71a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b71a4:	b508      	push	{r3, lr}
   b71a6:	4b02      	ldr	r3, [pc, #8]	; (b71b0 <malloc+0xc>)
   b71a8:	681b      	ldr	r3, [r3, #0]
   b71aa:	681b      	ldr	r3, [r3, #0]
   b71ac:	9301      	str	r3, [sp, #4]
   b71ae:	bd08      	pop	{r3, pc}
   b71b0:	0003021c 	.word	0x0003021c

000b71b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b71b4:	b508      	push	{r3, lr}
   b71b6:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <free+0xc>)
   b71b8:	681b      	ldr	r3, [r3, #0]
   b71ba:	685b      	ldr	r3, [r3, #4]
   b71bc:	9301      	str	r3, [sp, #4]
   b71be:	bd08      	pop	{r3, pc}
   b71c0:	0003021c 	.word	0x0003021c

000b71c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b71c4:	b508      	push	{r3, lr}
   b71c6:	4b02      	ldr	r3, [pc, #8]	; (b71d0 <realloc+0xc>)
   b71c8:	681b      	ldr	r3, [r3, #0]
   b71ca:	689b      	ldr	r3, [r3, #8]
   b71cc:	9301      	str	r3, [sp, #4]
   b71ce:	bd08      	pop	{r3, pc}
   b71d0:	0003021c 	.word	0x0003021c

000b71d4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b71d4:	b508      	push	{r3, lr}
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <snprintf+0xc>)
   b71d8:	681b      	ldr	r3, [r3, #0]
   b71da:	69db      	ldr	r3, [r3, #28]
   b71dc:	9301      	str	r3, [sp, #4]
   b71de:	bd08      	pop	{r3, pc}
   b71e0:	0003021c 	.word	0x0003021c

000b71e4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b71e4:	b508      	push	{r3, lr}
   b71e6:	4b02      	ldr	r3, [pc, #8]	; (b71f0 <vsnprintf+0xc>)
   b71e8:	681b      	ldr	r3, [r3, #0]
   b71ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71ec:	9301      	str	r3, [sp, #4]
   b71ee:	bd08      	pop	{r3, pc}
   b71f0:	0003021c 	.word	0x0003021c

000b71f4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b71f4:	b508      	push	{r3, lr}
   b71f6:	4b02      	ldr	r3, [pc, #8]	; (b7200 <_malloc_r+0xc>)
   b71f8:	681b      	ldr	r3, [r3, #0]
   b71fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b71fc:	9301      	str	r3, [sp, #4]
   b71fe:	bd08      	pop	{r3, pc}
   b7200:	0003021c 	.word	0x0003021c

000b7204 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7204:	b508      	push	{r3, lr}
   b7206:	4b02      	ldr	r3, [pc, #8]	; (b7210 <__assert_func+0xc>)
   b7208:	681b      	ldr	r3, [r3, #0]
   b720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b720c:	9301      	str	r3, [sp, #4]
   b720e:	bd08      	pop	{r3, pc}
   b7210:	0003021c 	.word	0x0003021c

000b7214 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <newlib_impure_ptr_callback+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	0003021c 	.word	0x0003021c

000b7224 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7224:	2100      	movs	r1, #0
   b7226:	f7ff bf31 	b.w	b708c <system_delay_ms>
	...

000b722c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b722c:	4802      	ldr	r0, [pc, #8]	; (b7238 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b722e:	2300      	movs	r3, #0
   b7230:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7232:	f7ff bd8b 	b.w	b6d4c <os_mutex_recursive_create>
   b7236:	bf00      	nop
   b7238:	2003e6c4 	.word	0x2003e6c4

000b723c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b723c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b723e:	230c      	movs	r3, #12
   b7240:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b7244:	6803      	ldr	r3, [r0, #0]
   b7246:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b724a:	7a03      	ldrb	r3, [r0, #8]
   b724c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b7250:	6843      	ldr	r3, [r0, #4]
   b7252:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b7254:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b7256:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b7258:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b725c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b725e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b7262:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b7266:	f7ff ff35 	bl	b70d4 <spark_cloud_disconnect>
}
   b726a:	b005      	add	sp, #20
   b726c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7270 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7270:	2200      	movs	r2, #0
   b7272:	6840      	ldr	r0, [r0, #4]
   b7274:	4611      	mov	r1, r2
   b7276:	f7ff bf6d 	b.w	b7154 <network_listening>

000b727a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b727a:	2200      	movs	r2, #0
   b727c:	6840      	ldr	r0, [r0, #4]
   b727e:	4611      	mov	r1, r2
   b7280:	f7ff bf78 	b.w	b7174 <network_get_listen_timeout>

000b7284 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7284:	6840      	ldr	r0, [r0, #4]
   b7286:	2200      	movs	r2, #0
   b7288:	f7ff bf6c 	b.w	b7164 <network_set_listen_timeout>

000b728c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b728c:	6840      	ldr	r0, [r0, #4]
   b728e:	2200      	movs	r2, #0
   b7290:	f081 0101 	eor.w	r1, r1, #1
   b7294:	f7ff bf56 	b.w	b7144 <network_listen>

000b7298 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7298:	2300      	movs	r3, #0
   b729a:	6840      	ldr	r0, [r0, #4]
   b729c:	461a      	mov	r2, r3
   b729e:	4619      	mov	r1, r3
   b72a0:	f7ff bf48 	b.w	b7134 <network_off>

000b72a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b72a4:	2300      	movs	r3, #0
   b72a6:	6840      	ldr	r0, [r0, #4]
   b72a8:	461a      	mov	r2, r3
   b72aa:	4619      	mov	r1, r3
   b72ac:	f7ff bf3a 	b.w	b7124 <network_on>

000b72b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b72b0:	2200      	movs	r2, #0
   b72b2:	6840      	ldr	r0, [r0, #4]
   b72b4:	4611      	mov	r1, r2
   b72b6:	f7ff bf2d 	b.w	b7114 <network_ready>

000b72ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b72ba:	2200      	movs	r2, #0
   b72bc:	6840      	ldr	r0, [r0, #4]
   b72be:	4611      	mov	r1, r2
   b72c0:	f7ff bf18 	b.w	b70f4 <network_connecting>

000b72c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b72c4:	6840      	ldr	r0, [r0, #4]
   b72c6:	2200      	movs	r2, #0
   b72c8:	2102      	movs	r1, #2
   b72ca:	f7ff bf1b 	b.w	b7104 <network_disconnect>

000b72ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b72ce:	2300      	movs	r3, #0
   b72d0:	6840      	ldr	r0, [r0, #4]
   b72d2:	461a      	mov	r2, r3
   b72d4:	f7ff bf06 	b.w	b70e4 <network_connect>

000b72d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b72d8:	4b02      	ldr	r3, [pc, #8]	; (b72e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b72da:	2203      	movs	r2, #3
   b72dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b72de:	4a02      	ldr	r2, [pc, #8]	; (b72e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b72e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b72e2:	4770      	bx	lr
   b72e4:	2003e6c8 	.word	0x2003e6c8
   b72e8:	000b9790 	.word	0x000b9790

000b72ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b72ec:	4770      	bx	lr

000b72ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b72ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72f0:	4606      	mov	r6, r0
   b72f2:	4615      	mov	r5, r2
   b72f4:	460c      	mov	r4, r1
   b72f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b72f8:	42bc      	cmp	r4, r7
   b72fa:	d006      	beq.n	b730a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b72fc:	6833      	ldr	r3, [r6, #0]
   b72fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7302:	689b      	ldr	r3, [r3, #8]
   b7304:	4630      	mov	r0, r6
   b7306:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7308:	e7f6      	b.n	b72f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b730a:	4628      	mov	r0, r5
   b730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b730e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b730e:	7c00      	ldrb	r0, [r0, #16]
   b7310:	2200      	movs	r2, #0
   b7312:	f7ff bda3 	b.w	b6e5c <hal_i2c_write>

000b7316 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7316:	7c00      	ldrb	r0, [r0, #16]
   b7318:	2100      	movs	r1, #0
   b731a:	f7ff bda7 	b.w	b6e6c <hal_i2c_available>

000b731e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b731e:	7c00      	ldrb	r0, [r0, #16]
   b7320:	2100      	movs	r1, #0
   b7322:	f7ff bdab 	b.w	b6e7c <hal_i2c_read>

000b7326 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7326:	7c00      	ldrb	r0, [r0, #16]
   b7328:	2100      	movs	r1, #0
   b732a:	f7ff bdaf 	b.w	b6e8c <hal_i2c_peek>

000b732e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b732e:	7c00      	ldrb	r0, [r0, #16]
   b7330:	2100      	movs	r1, #0
   b7332:	f7ff bdb3 	b.w	b6e9c <hal_i2c_flush>

000b7336 <_ZN7TwoWireD0Ev>:
   b7336:	b510      	push	{r4, lr}
   b7338:	2114      	movs	r1, #20
   b733a:	4604      	mov	r4, r0
   b733c:	f7fc feab 	bl	b4096 <_ZdlPvj>
   b7340:	4620      	mov	r0, r4
   b7342:	bd10      	pop	{r4, pc}

000b7344 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7344:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b734a:	4604      	mov	r4, r0
   b734c:	4608      	mov	r0, r1
   b734e:	2100      	movs	r1, #0
   b7350:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7354:	4b03      	ldr	r3, [pc, #12]	; (b7364 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7356:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7358:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b735a:	4611      	mov	r1, r2
   b735c:	f7ff fdae 	bl	b6ebc <hal_i2c_init>
}
   b7360:	4620      	mov	r0, r4
   b7362:	bd10      	pop	{r4, pc}
   b7364:	000b97cc 	.word	0x000b97cc

000b7368 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7368:	7c00      	ldrb	r0, [r0, #16]
   b736a:	2200      	movs	r2, #0
   b736c:	f7ff bd56 	b.w	b6e1c <hal_i2c_set_speed>

000b7370 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7370:	2300      	movs	r3, #0
   b7372:	7c00      	ldrb	r0, [r0, #16]
   b7374:	461a      	mov	r2, r3
   b7376:	4619      	mov	r1, r3
   b7378:	f7ff bd58 	b.w	b6e2c <hal_i2c_begin>

000b737c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b737c:	7c00      	ldrb	r0, [r0, #16]
   b737e:	2200      	movs	r2, #0
   b7380:	f7ff bd5c 	b.w	b6e3c <hal_i2c_begin_transmission>

000b7384 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7384:	b2c9      	uxtb	r1, r1
   b7386:	f7ff bff9 	b.w	b737c <_ZN7TwoWire17beginTransmissionEh>

000b738a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b738a:	7c00      	ldrb	r0, [r0, #16]
   b738c:	2200      	movs	r2, #0
   b738e:	f7ff bd5d 	b.w	b6e4c <hal_i2c_end_transmission>

000b7392 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7392:	2101      	movs	r1, #1
   b7394:	f7ff bff9 	b.w	b738a <_ZN7TwoWire15endTransmissionEh>

000b7398 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b7398:	f7ff bd28 	b.w	b6dec <HAL_Interrupts_Disable_All>

000b739c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b739c:	f7ff bd1e 	b.w	b6ddc <HAL_Interrupts_Enable_All>

000b73a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b73a0:	4770      	bx	lr

000b73a2 <_ZN9IPAddressD0Ev>:
   b73a2:	b510      	push	{r4, lr}
   b73a4:	2118      	movs	r1, #24
   b73a6:	4604      	mov	r4, r0
   b73a8:	f7fc fe75 	bl	b4096 <_ZdlPvj>
   b73ac:	4620      	mov	r0, r4
   b73ae:	bd10      	pop	{r4, pc}

000b73b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b73b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b73b2:	7d03      	ldrb	r3, [r0, #20]
   b73b4:	2b06      	cmp	r3, #6
{
   b73b6:	b08d      	sub	sp, #52	; 0x34
   b73b8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73ba:	f100 0704 	add.w	r7, r0, #4
   b73be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b73c2:	d012      	beq.n	b73ea <_ZNK9IPAddress7printToER5Print+0x3a>
   b73c4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b73c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b73cc:	220a      	movs	r2, #10
   b73ce:	4630      	mov	r0, r6
   b73d0:	f000 f95d 	bl	b768e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b73d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b73d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b73d8:	d019      	beq.n	b740e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b73da:	2c00      	cmp	r4, #0
   b73dc:	d0f4      	beq.n	b73c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b73de:	212e      	movs	r1, #46	; 0x2e
   b73e0:	4630      	mov	r0, r6
   b73e2:	f000 f93b 	bl	b765c <_ZN5Print5printEc>
   b73e6:	4404      	add	r4, r0
   b73e8:	e7ee      	b.n	b73c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73ea:	232f      	movs	r3, #47	; 0x2f
   b73ec:	466a      	mov	r2, sp
   b73ee:	4639      	mov	r1, r7
   b73f0:	200a      	movs	r0, #10
		buf[0] = 0;
   b73f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73f6:	f7ff fd69 	bl	b6ecc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b73fa:	4668      	mov	r0, sp
   b73fc:	f001 f874 	bl	b84e8 <strlen>
   b7400:	6833      	ldr	r3, [r6, #0]
   b7402:	4602      	mov	r2, r0
   b7404:	68db      	ldr	r3, [r3, #12]
   b7406:	4669      	mov	r1, sp
   b7408:	4630      	mov	r0, r6
   b740a:	4798      	blx	r3
   b740c:	4604      	mov	r4, r0
    }
    return n;
}
   b740e:	4620      	mov	r0, r4
   b7410:	b00d      	add	sp, #52	; 0x34
   b7412:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7414 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7414:	b510      	push	{r4, lr}
   b7416:	4b05      	ldr	r3, [pc, #20]	; (b742c <_ZN9IPAddressC1Ev+0x18>)
   b7418:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b741a:	2211      	movs	r2, #17
   b741c:	f840 3b04 	str.w	r3, [r0], #4
   b7420:	2100      	movs	r1, #0
   b7422:	f001 f813 	bl	b844c <memset>
}
   b7426:	4620      	mov	r0, r4
   b7428:	bd10      	pop	{r4, pc}
   b742a:	bf00      	nop
   b742c:	000b97f4 	.word	0x000b97f4

000b7430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7430:	4603      	mov	r3, r0
   b7432:	4a07      	ldr	r2, [pc, #28]	; (b7450 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7434:	b510      	push	{r4, lr}
   b7436:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b743a:	f101 0210 	add.w	r2, r1, #16
   b743e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7442:	f843 4b04 	str.w	r4, [r3], #4
   b7446:	4291      	cmp	r1, r2
   b7448:	d1f9      	bne.n	b743e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b744a:	780a      	ldrb	r2, [r1, #0]
   b744c:	701a      	strb	r2, [r3, #0]
}
   b744e:	bd10      	pop	{r4, pc}
   b7450:	000b97f4 	.word	0x000b97f4

000b7454 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7454:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7456:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b745a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b745e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7462:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7466:	2304      	movs	r3, #4
   b7468:	6041      	str	r1, [r0, #4]
   b746a:	7503      	strb	r3, [r0, #20]
}
   b746c:	bd10      	pop	{r4, pc}
	...

000b7470 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7470:	b507      	push	{r0, r1, r2, lr}
   b7472:	4b06      	ldr	r3, [pc, #24]	; (b748c <_ZN9IPAddressC1EPKh+0x1c>)
   b7474:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7476:	78cb      	ldrb	r3, [r1, #3]
   b7478:	9300      	str	r3, [sp, #0]
   b747a:	788b      	ldrb	r3, [r1, #2]
   b747c:	784a      	ldrb	r2, [r1, #1]
   b747e:	7809      	ldrb	r1, [r1, #0]
   b7480:	f7ff ffe8 	bl	b7454 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7484:	b003      	add	sp, #12
   b7486:	f85d fb04 	ldr.w	pc, [sp], #4
   b748a:	bf00      	nop
   b748c:	000b97f4 	.word	0x000b97f4

000b7490 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7490:	4b01      	ldr	r3, [pc, #4]	; (b7498 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7492:	4a02      	ldr	r2, [pc, #8]	; (b749c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7494:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7496:	4770      	bx	lr
   b7498:	2003e6d0 	.word	0x2003e6d0
   b749c:	000b9800 	.word	0x000b9800

000b74a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b74a0:	2300      	movs	r3, #0
   b74a2:	6840      	ldr	r0, [r0, #4]
   b74a4:	461a      	mov	r2, r3
   b74a6:	f7ff be1d 	b.w	b70e4 <network_connect>

000b74aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b74aa:	6840      	ldr	r0, [r0, #4]
   b74ac:	2200      	movs	r2, #0
   b74ae:	2102      	movs	r1, #2
   b74b0:	f7ff be28 	b.w	b7104 <network_disconnect>

000b74b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b74b4:	2200      	movs	r2, #0
   b74b6:	6840      	ldr	r0, [r0, #4]
   b74b8:	4611      	mov	r1, r2
   b74ba:	f7ff be1b 	b.w	b70f4 <network_connecting>

000b74be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b74be:	2200      	movs	r2, #0
   b74c0:	6840      	ldr	r0, [r0, #4]
   b74c2:	4611      	mov	r1, r2
   b74c4:	f7ff be26 	b.w	b7114 <network_ready>

000b74c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b74c8:	2300      	movs	r3, #0
   b74ca:	6840      	ldr	r0, [r0, #4]
   b74cc:	461a      	mov	r2, r3
   b74ce:	4619      	mov	r1, r3
   b74d0:	f7ff be28 	b.w	b7124 <network_on>

000b74d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b74d4:	2300      	movs	r3, #0
   b74d6:	6840      	ldr	r0, [r0, #4]
   b74d8:	461a      	mov	r2, r3
   b74da:	4619      	mov	r1, r3
   b74dc:	f7ff be2a 	b.w	b7134 <network_off>

000b74e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b74e0:	6840      	ldr	r0, [r0, #4]
   b74e2:	2100      	movs	r1, #0
   b74e4:	f7ff be4e 	b.w	b7184 <network_is_on>

000b74e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b74e8:	6840      	ldr	r0, [r0, #4]
   b74ea:	2100      	movs	r1, #0
   b74ec:	f7ff be52 	b.w	b7194 <network_is_off>

000b74f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b74f0:	6840      	ldr	r0, [r0, #4]
   b74f2:	2200      	movs	r2, #0
   b74f4:	f081 0101 	eor.w	r1, r1, #1
   b74f8:	f7ff be24 	b.w	b7144 <network_listen>

000b74fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b74fc:	6840      	ldr	r0, [r0, #4]
   b74fe:	2200      	movs	r2, #0
   b7500:	f7ff be30 	b.w	b7164 <network_set_listen_timeout>

000b7504 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7504:	2200      	movs	r2, #0
   b7506:	6840      	ldr	r0, [r0, #4]
   b7508:	4611      	mov	r1, r2
   b750a:	f7ff be33 	b.w	b7174 <network_get_listen_timeout>

000b750e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b750e:	2200      	movs	r2, #0
   b7510:	6840      	ldr	r0, [r0, #4]
   b7512:	4611      	mov	r1, r2
   b7514:	f7ff be1e 	b.w	b7154 <network_listening>

000b7518 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b751c:	b095      	sub	sp, #84	; 0x54
   b751e:	4614      	mov	r4, r2
   b7520:	460d      	mov	r5, r1
   b7522:	4607      	mov	r7, r0
    IPAddress addr;
   b7524:	f7ff ff76 	bl	b7414 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7528:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b752a:	221c      	movs	r2, #28
   b752c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b752e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7530:	f000 ff8c 	bl	b844c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7534:	2340      	movs	r3, #64	; 0x40
   b7536:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7538:	4620      	mov	r0, r4
   b753a:	466b      	mov	r3, sp
   b753c:	aa0c      	add	r2, sp, #48	; 0x30
   b753e:	2100      	movs	r1, #0
   b7540:	f7ff fcd4 	bl	b6eec <netdb_getaddrinfo>
    if (!r) {
   b7544:	4604      	mov	r4, r0
   b7546:	2800      	cmp	r0, #0
   b7548:	d14b      	bne.n	b75e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b754a:	4602      	mov	r2, r0
   b754c:	2101      	movs	r1, #1
   b754e:	6868      	ldr	r0, [r5, #4]
   b7550:	f7ff fde0 	bl	b7114 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7554:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7556:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7558:	4622      	mov	r2, r4
   b755a:	6868      	ldr	r0, [r5, #4]
   b755c:	f7ff fdda 	bl	b7114 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7560:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7562:	4681      	mov	r9, r0
        bool ok = false;
   b7564:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7566:	2e00      	cmp	r6, #0
   b7568:	d03b      	beq.n	b75e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b756a:	2900      	cmp	r1, #0
   b756c:	d139      	bne.n	b75e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b756e:	6873      	ldr	r3, [r6, #4]
   b7570:	2b02      	cmp	r3, #2
   b7572:	d003      	beq.n	b757c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7574:	2b0a      	cmp	r3, #10
   b7576:	d011      	beq.n	b759c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7578:	69f6      	ldr	r6, [r6, #28]
   b757a:	e7f4      	b.n	b7566 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b757c:	f1b8 0f00 	cmp.w	r8, #0
   b7580:	d0fa      	beq.n	b7578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7582:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7584:	a806      	add	r0, sp, #24
   b7586:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7588:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b758a:	f7ff ff71 	bl	b7470 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b758e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7590:	1d3c      	adds	r4, r7, #4
   b7592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7594:	682b      	ldr	r3, [r5, #0]
   b7596:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7598:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b759a:	e7ed      	b.n	b7578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b759c:	f1b9 0f00 	cmp.w	r9, #0
   b75a0:	d0ea      	beq.n	b7578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b75a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b75a4:	2210      	movs	r2, #16
   b75a6:	a801      	add	r0, sp, #4
   b75a8:	f000 ff50 	bl	b844c <memset>
                    a.v = 6;
   b75ac:	2306      	movs	r3, #6
   b75ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b75b2:	ad01      	add	r5, sp, #4
   b75b4:	f104 0308 	add.w	r3, r4, #8
   b75b8:	3418      	adds	r4, #24
   b75ba:	6818      	ldr	r0, [r3, #0]
   b75bc:	6859      	ldr	r1, [r3, #4]
   b75be:	462a      	mov	r2, r5
   b75c0:	c203      	stmia	r2!, {r0, r1}
   b75c2:	3308      	adds	r3, #8
   b75c4:	42a3      	cmp	r3, r4
   b75c6:	4615      	mov	r5, r2
   b75c8:	d1f7      	bne.n	b75ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b75ca:	a901      	add	r1, sp, #4
   b75cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b75ce:	ad07      	add	r5, sp, #28
   b75d0:	f7ff ff2e 	bl	b7430 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b75d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75d6:	1d3c      	adds	r4, r7, #4
   b75d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75da:	682b      	ldr	r3, [r5, #0]
   b75dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75de:	4649      	mov	r1, r9
   b75e0:	e7ca      	b.n	b7578 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b75e2:	9800      	ldr	r0, [sp, #0]
   b75e4:	f7ff fc7a 	bl	b6edc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b75e8:	4638      	mov	r0, r7
   b75ea:	b015      	add	sp, #84	; 0x54
   b75ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b75f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b75f0:	4b02      	ldr	r3, [pc, #8]	; (b75fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b75f2:	4a03      	ldr	r2, [pc, #12]	; (b7600 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b75f4:	601a      	str	r2, [r3, #0]
   b75f6:	2200      	movs	r2, #0
   b75f8:	605a      	str	r2, [r3, #4]

} // spark
   b75fa:	4770      	bx	lr
   b75fc:	2003e6d4 	.word	0x2003e6d4
   b7600:	000b980c 	.word	0x000b980c

000b7604 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7606:	4606      	mov	r6, r0
   b7608:	460d      	mov	r5, r1
  size_t n = 0;
   b760a:	188f      	adds	r7, r1, r2
   b760c:	2400      	movs	r4, #0
  while (size--) {
   b760e:	42bd      	cmp	r5, r7
   b7610:	d00c      	beq.n	b762c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7612:	6833      	ldr	r3, [r6, #0]
   b7614:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7618:	689b      	ldr	r3, [r3, #8]
   b761a:	4630      	mov	r0, r6
   b761c:	4798      	blx	r3
     if (chunk>=0)
   b761e:	1e03      	subs	r3, r0, #0
   b7620:	db01      	blt.n	b7626 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7622:	441c      	add	r4, r3
  while (size--) {
   b7624:	e7f3      	b.n	b760e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7626:	2c00      	cmp	r4, #0
   b7628:	bf08      	it	eq
   b762a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b762c:	4620      	mov	r0, r4
   b762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7630 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7630:	b513      	push	{r0, r1, r4, lr}
   b7632:	4604      	mov	r4, r0
    }
   b7634:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7636:	b159      	cbz	r1, b7650 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7638:	9101      	str	r1, [sp, #4]
   b763a:	f000 ff55 	bl	b84e8 <strlen>
   b763e:	6823      	ldr	r3, [r4, #0]
   b7640:	9901      	ldr	r1, [sp, #4]
   b7642:	68db      	ldr	r3, [r3, #12]
   b7644:	4602      	mov	r2, r0
   b7646:	4620      	mov	r0, r4
    }
   b7648:	b002      	add	sp, #8
   b764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b764e:	4718      	bx	r3
    }
   b7650:	b002      	add	sp, #8
   b7652:	bd10      	pop	{r4, pc}

000b7654 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7654:	b508      	push	{r3, lr}
  return write(str);
   b7656:	f7ff ffeb 	bl	b7630 <_ZN5Print5writeEPKc>
}
   b765a:	bd08      	pop	{r3, pc}

000b765c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b765c:	6803      	ldr	r3, [r0, #0]
   b765e:	689b      	ldr	r3, [r3, #8]
   b7660:	4718      	bx	r3

000b7662 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7662:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7664:	210d      	movs	r1, #13
{
   b7666:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7668:	f7ff fff8 	bl	b765c <_ZN5Print5printEc>
  n += print('\n');
   b766c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b766e:	4604      	mov	r4, r0
  n += print('\n');
   b7670:	4628      	mov	r0, r5
   b7672:	f7ff fff3 	bl	b765c <_ZN5Print5printEc>
  return n;
}
   b7676:	4420      	add	r0, r4
   b7678:	bd38      	pop	{r3, r4, r5, pc}

000b767a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b767a:	b538      	push	{r3, r4, r5, lr}
   b767c:	4605      	mov	r5, r0
  return write(str);
   b767e:	f7ff ffd7 	bl	b7630 <_ZN5Print5writeEPKc>
   b7682:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7684:	4628      	mov	r0, r5
   b7686:	f7ff ffec 	bl	b7662 <_ZN5Print7printlnEv>
  return n;
}
   b768a:	4420      	add	r0, r4
   b768c:	bd38      	pop	{r3, r4, r5, pc}

000b768e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b768e:	b530      	push	{r4, r5, lr}
   b7690:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7692:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7694:	2a01      	cmp	r2, #1
  *str = '\0';
   b7696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b769a:	bf98      	it	ls
   b769c:	220a      	movls	r2, #10
   b769e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b76a0:	460d      	mov	r5, r1
   b76a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b76a6:	fb01 5312 	mls	r3, r1, r2, r5
   b76aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b76ae:	2b09      	cmp	r3, #9
   b76b0:	bf94      	ite	ls
   b76b2:	3330      	addls	r3, #48	; 0x30
   b76b4:	3337      	addhi	r3, #55	; 0x37
   b76b6:	b2db      	uxtb	r3, r3
  } while(n);
   b76b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b76ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b76be:	d9ef      	bls.n	b76a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b76c0:	4621      	mov	r1, r4
   b76c2:	f7ff ffb5 	bl	b7630 <_ZN5Print5writeEPKc>
}
   b76c6:	b00b      	add	sp, #44	; 0x2c
   b76c8:	bd30      	pop	{r4, r5, pc}

000b76ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b76ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76ce:	b086      	sub	sp, #24
   b76d0:	af00      	add	r7, sp, #0
   b76d2:	4605      	mov	r5, r0
   b76d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b76d6:	1d38      	adds	r0, r7, #4
   b76d8:	2114      	movs	r1, #20
{
   b76da:	4614      	mov	r4, r2
    va_copy(args2, args);
   b76dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b76de:	f7ff fd81 	bl	b71e4 <vsnprintf>

    if (n<bufsize)
   b76e2:	2813      	cmp	r0, #19
   b76e4:	d80e      	bhi.n	b7704 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b76e6:	1d39      	adds	r1, r7, #4
   b76e8:	4628      	mov	r0, r5
   b76ea:	f7ff ffa1 	bl	b7630 <_ZN5Print5writeEPKc>
   b76ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b76f0:	b11e      	cbz	r6, b76fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b76f2:	4628      	mov	r0, r5
   b76f4:	f7ff ffb5 	bl	b7662 <_ZN5Print7printlnEv>
   b76f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b76fa:	4620      	mov	r0, r4
   b76fc:	3718      	adds	r7, #24
   b76fe:	46bd      	mov	sp, r7
   b7700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7704:	f100 0308 	add.w	r3, r0, #8
   b7708:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b770c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b770e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7712:	4622      	mov	r2, r4
   b7714:	1c41      	adds	r1, r0, #1
   b7716:	683b      	ldr	r3, [r7, #0]
   b7718:	4668      	mov	r0, sp
   b771a:	f7ff fd63 	bl	b71e4 <vsnprintf>
  return write(str);
   b771e:	4669      	mov	r1, sp
   b7720:	4628      	mov	r0, r5
   b7722:	f7ff ff85 	bl	b7630 <_ZN5Print5writeEPKc>
   b7726:	4604      	mov	r4, r0
   b7728:	46c5      	mov	sp, r8
   b772a:	e7e1      	b.n	b76f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b772c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b772c:	4b01      	ldr	r3, [pc, #4]	; (b7734 <_GLOBAL__sub_I_RGB+0x8>)
   b772e:	2200      	movs	r2, #0
   b7730:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7732:	4770      	bx	lr
   b7734:	2003e6dc 	.word	0x2003e6dc

000b7738 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7738:	2100      	movs	r1, #0
   b773a:	f7ff bc17 	b.w	b6f6c <hal_spi_release>

000b773e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b773e:	2100      	movs	r1, #0
   b7740:	f7ff bc0c 	b.w	b6f5c <hal_spi_acquire>

000b7744 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7744:	b510      	push	{r4, lr}
   b7746:	4604      	mov	r4, r0
   b7748:	4608      	mov	r0, r1
{
    _spi = spi;
   b774a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b774c:	f7ff fbe6 	bl	b6f1c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7750:	2300      	movs	r3, #0
   b7752:	6063      	str	r3, [r4, #4]
}
   b7754:	4620      	mov	r0, r4
   b7756:	bd10      	pop	{r4, pc}

000b7758 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7758:	b513      	push	{r0, r1, r4, lr}
   b775a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b775c:	7800      	ldrb	r0, [r0, #0]
   b775e:	f7ff ffee 	bl	b773e <_ZN8SPIClass4lockEv.isra.0>
   b7762:	b958      	cbnz	r0, b777c <_ZN8SPIClass5beginEv+0x24>
   b7764:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7766:	9001      	str	r0, [sp, #4]
   b7768:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b776c:	f7ff fbc6 	bl	b6efc <hal_spi_begin>
        unlock();
   b7770:	9801      	ldr	r0, [sp, #4]
    }
}
   b7772:	b002      	add	sp, #8
   b7774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7778:	f7ff bfde 	b.w	b7738 <_ZN8SPIClass6unlockEv.isra.0>
   b777c:	b002      	add	sp, #8
   b777e:	bd10      	pop	{r4, pc}

000b7780 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7780:	7800      	ldrb	r0, [r0, #0]
   b7782:	f7ff bfd9 	b.w	b7738 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7788 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7788:	0840      	lsrs	r0, r0, #1
{
   b778a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b778c:	6018      	str	r0, [r3, #0]
   b778e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7790:	6818      	ldr	r0, [r3, #0]
   b7792:	4288      	cmp	r0, r1
   b7794:	b2e5      	uxtb	r5, r4
   b7796:	d906      	bls.n	b77a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7798:	3401      	adds	r4, #1
   b779a:	2c08      	cmp	r4, #8
   b779c:	d002      	beq.n	b77a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b779e:	0840      	lsrs	r0, r0, #1
   b77a0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b77a2:	e7f5      	b.n	b7790 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b77a4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b77a8:	5d5b      	ldrb	r3, [r3, r5]
   b77aa:	7013      	strb	r3, [r2, #0]
}
   b77ac:	bd30      	pop	{r4, r5, pc}
   b77ae:	bf00      	nop
   b77b0:	000b9840 	.word	0x000b9840

000b77b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b77b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77b8:	4606      	mov	r6, r0
   b77ba:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b77bc:	7800      	ldrb	r0, [r0, #0]
{
   b77be:	460c      	mov	r4, r1
    CHECK(lock());
   b77c0:	f7ff ffbd 	bl	b773e <_ZN8SPIClass4lockEv.isra.0>
   b77c4:	2800      	cmp	r0, #0
   b77c6:	db1b      	blt.n	b7800 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b77c8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b77ca:	2214      	movs	r2, #20
   b77cc:	2100      	movs	r1, #0
   b77ce:	a809      	add	r0, sp, #36	; 0x24
   b77d0:	f000 fe3c 	bl	b844c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b77d4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b77d6:	2200      	movs	r2, #0
   b77d8:	a909      	add	r1, sp, #36	; 0x24
   b77da:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b77dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b77e0:	f7ff fbac 	bl	b6f3c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b77e4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b77e8:	b113      	cbz	r3, b77f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b77ea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b77ee:	b155      	cbz	r5, b7806 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b77f0:	2700      	movs	r7, #0
   b77f2:	46b9      	mov	r9, r7
   b77f4:	46b8      	mov	r8, r7
   b77f6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b77f8:	7923      	ldrb	r3, [r4, #4]
   b77fa:	b15d      	cbz	r5, b7814 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b77fc:	b1c3      	cbz	r3, b7830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b77fe:	2000      	movs	r0, #0
}
   b7800:	b00f      	add	sp, #60	; 0x3c
   b7802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7806:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b780a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b780e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7812:	e7f1      	b.n	b77f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7814:	2b00      	cmp	r3, #0
   b7816:	d135      	bne.n	b7884 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7818:	68a3      	ldr	r3, [r4, #8]
   b781a:	4543      	cmp	r3, r8
   b781c:	d108      	bne.n	b7830 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b781e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7822:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7826:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b782a:	89a3      	ldrh	r3, [r4, #12]
   b782c:	429a      	cmp	r2, r3
   b782e:	d0e6      	beq.n	b77fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7830:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7832:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7834:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7838:	980a      	ldr	r0, [sp, #40]	; 0x28
   b783a:	ab04      	add	r3, sp, #16
   b783c:	f10d 020f 	add.w	r2, sp, #15
   b7840:	f7ff ffa2 	bl	b7788 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7844:	7921      	ldrb	r1, [r4, #4]
   b7846:	b985      	cbnz	r5, b786a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7848:	b989      	cbnz	r1, b786e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b784a:	68a3      	ldr	r3, [r4, #8]
   b784c:	4543      	cmp	r3, r8
   b784e:	d30e      	bcc.n	b786e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7850:	f88d 9020 	strb.w	r9, [sp, #32]
   b7854:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7858:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b785c:	89a3      	ldrh	r3, [r4, #12]
   b785e:	429a      	cmp	r2, r3
   b7860:	d105      	bne.n	b786e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7862:	9b04      	ldr	r3, [sp, #16]
   b7864:	4543      	cmp	r3, r8
   b7866:	d102      	bne.n	b786e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7868:	e7c9      	b.n	b77fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b786a:	2900      	cmp	r1, #0
   b786c:	d1f9      	bne.n	b7862 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b786e:	2300      	movs	r3, #0
   b7870:	9301      	str	r3, [sp, #4]
   b7872:	7b63      	ldrb	r3, [r4, #13]
   b7874:	9300      	str	r3, [sp, #0]
   b7876:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b787a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b787c:	7830      	ldrb	r0, [r6, #0]
   b787e:	f7ff fb65 	bl	b6f4c <hal_spi_set_settings>
   b7882:	e7bc      	b.n	b77fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7884:	e9cd 5500 	strd	r5, r5, [sp]
   b7888:	462b      	mov	r3, r5
   b788a:	462a      	mov	r2, r5
   b788c:	2101      	movs	r1, #1
   b788e:	e7f5      	b.n	b787c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7890 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7890:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7892:	7800      	ldrb	r0, [r0, #0]
   b7894:	f7ff fb3a 	bl	b6f0c <hal_spi_transfer>
}
   b7898:	b2c0      	uxtb	r0, r0
   b789a:	bd08      	pop	{r3, pc}

000b789c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b789c:	b510      	push	{r4, lr}
   b789e:	4604      	mov	r4, r0
{
	free(buffer);
   b78a0:	6800      	ldr	r0, [r0, #0]
   b78a2:	f7ff fc87 	bl	b71b4 <free>
}
   b78a6:	4620      	mov	r0, r4
   b78a8:	bd10      	pop	{r4, pc}

000b78aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b78aa:	b510      	push	{r4, lr}
   b78ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b78ae:	6800      	ldr	r0, [r0, #0]
   b78b0:	b108      	cbz	r0, b78b6 <_ZN6String10invalidateEv+0xc>
   b78b2:	f7ff fc7f 	bl	b71b4 <free>
	buffer = NULL;
   b78b6:	2300      	movs	r3, #0
	capacity = len = 0;
   b78b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78bc:	6023      	str	r3, [r4, #0]
}
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78c0:	b538      	push	{r3, r4, r5, lr}
   b78c2:	4604      	mov	r4, r0
   b78c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b78c6:	6800      	ldr	r0, [r0, #0]
   b78c8:	3101      	adds	r1, #1
   b78ca:	f7ff fc7b 	bl	b71c4 <realloc>
	if (newbuffer) {
   b78ce:	b110      	cbz	r0, b78d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b78d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b78d4:	2001      	movs	r0, #1
	}
	return 0;
}
   b78d6:	bd38      	pop	{r3, r4, r5, pc}

000b78d8 <_ZN6String7reserveEj>:
{
   b78d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b78da:	6803      	ldr	r3, [r0, #0]
{
   b78dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b78de:	b123      	cbz	r3, b78ea <_ZN6String7reserveEj+0x12>
   b78e0:	6843      	ldr	r3, [r0, #4]
   b78e2:	428b      	cmp	r3, r1
   b78e4:	d301      	bcc.n	b78ea <_ZN6String7reserveEj+0x12>
   b78e6:	2001      	movs	r0, #1
}
   b78e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b78ea:	4620      	mov	r0, r4
   b78ec:	f7ff ffe8 	bl	b78c0 <_ZN6String12changeBufferEj>
   b78f0:	2800      	cmp	r0, #0
   b78f2:	d0f9      	beq.n	b78e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b78f4:	68a3      	ldr	r3, [r4, #8]
   b78f6:	2b00      	cmp	r3, #0
   b78f8:	d1f5      	bne.n	b78e6 <_ZN6String7reserveEj+0xe>
   b78fa:	6822      	ldr	r2, [r4, #0]
   b78fc:	7013      	strb	r3, [r2, #0]
   b78fe:	e7f2      	b.n	b78e6 <_ZN6String7reserveEj+0xe>

000b7900 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7900:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7902:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7904:	4611      	mov	r1, r2
   b7906:	9201      	str	r2, [sp, #4]
{
   b7908:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b790a:	f7ff ffe5 	bl	b78d8 <_ZN6String7reserveEj>
   b790e:	9a01      	ldr	r2, [sp, #4]
   b7910:	b928      	cbnz	r0, b791e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7912:	4620      	mov	r0, r4
   b7914:	f7ff ffc9 	bl	b78aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7918:	4620      	mov	r0, r4
   b791a:	b003      	add	sp, #12
   b791c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b791e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7920:	4629      	mov	r1, r5
   b7922:	6820      	ldr	r0, [r4, #0]
   b7924:	f000 fd84 	bl	b8430 <memcpy>
	buffer[len] = 0;
   b7928:	6822      	ldr	r2, [r4, #0]
   b792a:	68a3      	ldr	r3, [r4, #8]
   b792c:	2100      	movs	r1, #0
   b792e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7930:	e7f2      	b.n	b7918 <_ZN6String4copyEPKcj+0x18>

000b7932 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7932:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7934:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7936:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b793a:	4604      	mov	r4, r0
	len = 0;
   b793c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b793e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7940:	b141      	cbz	r1, b7954 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7942:	4608      	mov	r0, r1
   b7944:	9101      	str	r1, [sp, #4]
   b7946:	f000 fdcf 	bl	b84e8 <strlen>
   b794a:	9901      	ldr	r1, [sp, #4]
   b794c:	4602      	mov	r2, r0
   b794e:	4620      	mov	r0, r4
   b7950:	f7ff ffd6 	bl	b7900 <_ZN6String4copyEPKcj>
}
   b7954:	4620      	mov	r0, r4
   b7956:	b002      	add	sp, #8
   b7958:	bd10      	pop	{r4, pc}

000b795a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b795a:	4288      	cmp	r0, r1
{
   b795c:	b510      	push	{r4, lr}
   b795e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7960:	d005      	beq.n	b796e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7962:	680b      	ldr	r3, [r1, #0]
   b7964:	b12b      	cbz	r3, b7972 <_ZN6StringaSERKS_+0x18>
   b7966:	688a      	ldr	r2, [r1, #8]
   b7968:	4619      	mov	r1, r3
   b796a:	f7ff ffc9 	bl	b7900 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b796e:	4620      	mov	r0, r4
   b7970:	bd10      	pop	{r4, pc}
	else invalidate();
   b7972:	f7ff ff9a 	bl	b78aa <_ZN6String10invalidateEv>
   b7976:	e7fa      	b.n	b796e <_ZN6StringaSERKS_+0x14>

000b7978 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7978:	b510      	push	{r4, lr}
	buffer = NULL;
   b797a:	2300      	movs	r3, #0
String::String(const String &value)
   b797c:	4604      	mov	r4, r0
	capacity = 0;
   b797e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7982:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7984:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7986:	f7ff ffe8 	bl	b795a <_ZN6StringaSERKS_>
}
   b798a:	4620      	mov	r0, r4
   b798c:	bd10      	pop	{r4, pc}

000b798e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b798e:	b513      	push	{r0, r1, r4, lr}
   b7990:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7992:	b159      	cbz	r1, b79ac <_ZN6StringaSEPKc+0x1e>
   b7994:	4608      	mov	r0, r1
   b7996:	9101      	str	r1, [sp, #4]
   b7998:	f000 fda6 	bl	b84e8 <strlen>
   b799c:	9901      	ldr	r1, [sp, #4]
   b799e:	4602      	mov	r2, r0
   b79a0:	4620      	mov	r0, r4
   b79a2:	f7ff ffad 	bl	b7900 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b79a6:	4620      	mov	r0, r4
   b79a8:	b002      	add	sp, #8
   b79aa:	bd10      	pop	{r4, pc}
	else invalidate();
   b79ac:	f7ff ff7d 	bl	b78aa <_ZN6String10invalidateEv>
   b79b0:	e7f9      	b.n	b79a6 <_ZN6StringaSEPKc+0x18>

000b79b2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b79b2:	b510      	push	{r4, lr}
   b79b4:	4604      	mov	r4, r0
   b79b6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b79b8:	2300      	movs	r3, #0
	capacity = 0;
   b79ba:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b79be:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b79c0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b79c2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b79c4:	a901      	add	r1, sp, #4
   b79c6:	f000 f9a5 	bl	b7d14 <itoa>
	*this = buf;
   b79ca:	a901      	add	r1, sp, #4
   b79cc:	4620      	mov	r0, r4
   b79ce:	f7ff ffde 	bl	b798e <_ZN6StringaSEPKc>
}
   b79d2:	4620      	mov	r0, r4
   b79d4:	b00a      	add	sp, #40	; 0x28
   b79d6:	bd10      	pop	{r4, pc}

000b79d8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b79d8:	b570      	push	{r4, r5, r6, lr}
   b79da:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b79dc:	460e      	mov	r6, r1
   b79de:	b909      	cbnz	r1, b79e4 <_ZN6String6concatEPKcj+0xc>
   b79e0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b79e2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b79e4:	b16a      	cbz	r2, b7a02 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b79e6:	6884      	ldr	r4, [r0, #8]
   b79e8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b79ea:	4621      	mov	r1, r4
   b79ec:	f7ff ff74 	bl	b78d8 <_ZN6String7reserveEj>
   b79f0:	2800      	cmp	r0, #0
   b79f2:	d0f5      	beq.n	b79e0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b79f4:	6828      	ldr	r0, [r5, #0]
   b79f6:	68ab      	ldr	r3, [r5, #8]
   b79f8:	4631      	mov	r1, r6
   b79fa:	4418      	add	r0, r3
   b79fc:	f000 fd6c 	bl	b84d8 <strcpy>
	len = newlen;
   b7a00:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7a02:	2001      	movs	r0, #1
   b7a04:	e7ed      	b.n	b79e2 <_ZN6String6concatEPKcj+0xa>

000b7a06 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7a06:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a08:	688a      	ldr	r2, [r1, #8]
   b7a0a:	6809      	ldr	r1, [r1, #0]
{
   b7a0c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a0e:	f7ff ffe3 	bl	b79d8 <_ZN6String6concatEPKcj>
   b7a12:	b910      	cbnz	r0, b7a1a <_ZplRK15StringSumHelperRK6String+0x14>
   b7a14:	4620      	mov	r0, r4
   b7a16:	f7ff ff48 	bl	b78aa <_ZN6String10invalidateEv>
	return a;
}
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	bd10      	pop	{r4, pc}

000b7a1e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7a1e:	b513      	push	{r0, r1, r4, lr}
   b7a20:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7a22:	b929      	cbnz	r1, b7a30 <_ZplRK15StringSumHelperPKc+0x12>
   b7a24:	4620      	mov	r0, r4
   b7a26:	f7ff ff40 	bl	b78aa <_ZN6String10invalidateEv>
	return a;
}
   b7a2a:	4620      	mov	r0, r4
   b7a2c:	b002      	add	sp, #8
   b7a2e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7a30:	4608      	mov	r0, r1
   b7a32:	9101      	str	r1, [sp, #4]
   b7a34:	f000 fd58 	bl	b84e8 <strlen>
   b7a38:	9901      	ldr	r1, [sp, #4]
   b7a3a:	4602      	mov	r2, r0
   b7a3c:	4620      	mov	r0, r4
   b7a3e:	f7ff ffcb 	bl	b79d8 <_ZN6String6concatEPKcj>
   b7a42:	2800      	cmp	r0, #0
   b7a44:	d0ee      	beq.n	b7a24 <_ZplRK15StringSumHelperPKc+0x6>
   b7a46:	e7f0      	b.n	b7a2a <_ZplRK15StringSumHelperPKc+0xc>

000b7a48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7a48:	4b05      	ldr	r3, [pc, #20]	; (b7a60 <_GLOBAL__sub_I_System+0x18>)
   b7a4a:	2202      	movs	r2, #2
   b7a4c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7a4e:	4b05      	ldr	r3, [pc, #20]	; (b7a64 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7a50:	4a05      	ldr	r2, [pc, #20]	; (b7a68 <_GLOBAL__sub_I_System+0x20>)
   b7a52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7a54:	2000      	movs	r0, #0
   b7a56:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7a5a:	f7ff bb0f 	b.w	b707c <set_system_mode>
   b7a5e:	bf00      	nop
   b7a60:	2003e6f8 	.word	0x2003e6f8
   b7a64:	2003e6ec 	.word	0x2003e6ec
   b7a68:	ffff0000 	.word	0xffff0000

000b7a6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a6c:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a6e:	681a      	ldr	r2, [r3, #0]
   b7a70:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a74:	4770      	bx	lr
   b7a76:	bf00      	nop
   b7a78:	2003e570 	.word	0x2003e570
   b7a7c:	2003e6fc 	.word	0x2003e6fc

000b7a80 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a80:	4770      	bx	lr

000b7a82 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a82:	7441      	strb	r1, [r0, #17]
}
   b7a84:	4770      	bx	lr

000b7a86 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a86:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a88:	7c00      	ldrb	r0, [r0, #16]
   b7a8a:	f7ff faa7 	bl	b6fdc <hal_usart_available_data_for_write>
}
   b7a8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a92:	bd08      	pop	{r3, pc}

000b7a94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a94:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a96:	7c00      	ldrb	r0, [r0, #16]
   b7a98:	f7ff fa78 	bl	b6f8c <hal_usart_available>
}
   b7a9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7aa0:	bd08      	pop	{r3, pc}

000b7aa2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7aa2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7aa4:	7c00      	ldrb	r0, [r0, #16]
   b7aa6:	f7ff fa81 	bl	b6fac <hal_usart_peek>
}
   b7aaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aae:	bd08      	pop	{r3, pc}

000b7ab0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7ab0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7ab2:	7c00      	ldrb	r0, [r0, #16]
   b7ab4:	f7ff fa72 	bl	b6f9c <hal_usart_read>
}
   b7ab8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7abc:	bd08      	pop	{r3, pc}

000b7abe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7abe:	7c00      	ldrb	r0, [r0, #16]
   b7ac0:	f7ff ba7c 	b.w	b6fbc <hal_usart_flush>

000b7ac4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ac6:	7c45      	ldrb	r5, [r0, #17]
{
   b7ac8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7aca:	b12d      	cbz	r5, b7ad8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7acc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7ace:	b003      	add	sp, #12
   b7ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7ad4:	f7ff ba52 	b.w	b6f7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ad8:	7c00      	ldrb	r0, [r0, #16]
   b7ada:	9101      	str	r1, [sp, #4]
   b7adc:	f7ff fa7e 	bl	b6fdc <hal_usart_available_data_for_write>
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	9901      	ldr	r1, [sp, #4]
   b7ae4:	dcf2      	bgt.n	b7acc <_ZN11USARTSerial5writeEh+0x8>
}
   b7ae6:	4628      	mov	r0, r5
   b7ae8:	b003      	add	sp, #12
   b7aea:	bd30      	pop	{r4, r5, pc}

000b7aec <_ZN11USARTSerialD0Ev>:
   b7aec:	b510      	push	{r4, lr}
   b7aee:	2114      	movs	r1, #20
   b7af0:	4604      	mov	r4, r0
   b7af2:	f7fc fad0 	bl	b4096 <_ZdlPvj>
   b7af6:	4620      	mov	r0, r4
   b7af8:	bd10      	pop	{r4, pc}
	...

000b7afc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7afc:	b510      	push	{r4, lr}
   b7afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b02:	4604      	mov	r4, r0
   b7b04:	4608      	mov	r0, r1
   b7b06:	4611      	mov	r1, r2
   b7b08:	2200      	movs	r2, #0
   b7b0a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7b0e:	4b04      	ldr	r3, [pc, #16]	; (b7b20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7b10:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b12:	2301      	movs	r3, #1
  _serial = serial;
   b7b14:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b16:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7b18:	f7ff fa68 	bl	b6fec <hal_usart_init_ex>
}
   b7b1c:	4620      	mov	r0, r4
   b7b1e:	bd10      	pop	{r4, pc}
   b7b20:	000b986c 	.word	0x000b986c

000b7b24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7b24:	7441      	strb	r1, [r0, #17]
}
   b7b26:	4770      	bx	lr

000b7b28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b28:	4770      	bx	lr

000b7b2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7b2a:	4770      	bx	lr

000b7b2c <_ZN9USBSerial4readEv>:
{
   b7b2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7b2e:	2100      	movs	r1, #0
   b7b30:	7c00      	ldrb	r0, [r0, #16]
   b7b32:	f7ff fa83 	bl	b703c <HAL_USB_USART_Receive_Data>
}
   b7b36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b3a:	bd08      	pop	{r3, pc}

000b7b3c <_ZN9USBSerial4peekEv>:
{
   b7b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7b3e:	2101      	movs	r1, #1
   b7b40:	7c00      	ldrb	r0, [r0, #16]
   b7b42:	f7ff fa7b 	bl	b703c <HAL_USB_USART_Receive_Data>
}
   b7b46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7b4a:	bd08      	pop	{r3, pc}

000b7b4c <_ZN9USBSerial17availableForWriteEv>:
{
   b7b4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7b4e:	7c00      	ldrb	r0, [r0, #16]
   b7b50:	f7ff fa6c 	bl	b702c <HAL_USB_USART_Available_Data_For_Write>
}
   b7b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b58:	bd08      	pop	{r3, pc}

000b7b5a <_ZN9USBSerial9availableEv>:
{
   b7b5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7b5c:	7c00      	ldrb	r0, [r0, #16]
   b7b5e:	f7ff fa5d 	bl	b701c <HAL_USB_USART_Available_Data>
}
   b7b62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7b66:	bd08      	pop	{r3, pc}

000b7b68 <_ZN9USBSerial5writeEh>:
{
   b7b68:	b513      	push	{r0, r1, r4, lr}
   b7b6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b6c:	7c00      	ldrb	r0, [r0, #16]
{
   b7b6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b70:	f7ff fa5c 	bl	b702c <HAL_USB_USART_Available_Data_For_Write>
   b7b74:	2800      	cmp	r0, #0
   b7b76:	9901      	ldr	r1, [sp, #4]
   b7b78:	dc01      	bgt.n	b7b7e <_ZN9USBSerial5writeEh+0x16>
   b7b7a:	7c60      	ldrb	r0, [r4, #17]
   b7b7c:	b120      	cbz	r0, b7b88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b7e:	7c20      	ldrb	r0, [r4, #16]
   b7b80:	f7ff fa64 	bl	b704c <HAL_USB_USART_Send_Data>
   b7b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b88:	b002      	add	sp, #8
   b7b8a:	bd10      	pop	{r4, pc}

000b7b8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b8c:	7c00      	ldrb	r0, [r0, #16]
   b7b8e:	f7ff ba65 	b.w	b705c <HAL_USB_USART_Flush_Data>

000b7b92 <_ZN9USBSerialD0Ev>:
   b7b92:	b510      	push	{r4, lr}
   b7b94:	2114      	movs	r1, #20
   b7b96:	4604      	mov	r4, r0
   b7b98:	f7fc fa7d 	bl	b4096 <_ZdlPvj>
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	bd10      	pop	{r4, pc}

000b7ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7ba0:	b510      	push	{r4, lr}
   b7ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ba6:	4604      	mov	r4, r0
   b7ba8:	4608      	mov	r0, r1
   b7baa:	2100      	movs	r1, #0
   b7bac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7bb0:	4b04      	ldr	r3, [pc, #16]	; (b7bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7bb2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7bb4:	2301      	movs	r3, #1
  _serial = serial;
   b7bb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7bb8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7bba:	4611      	mov	r1, r2
   b7bbc:	f7ff fa1e 	bl	b6ffc <HAL_USB_USART_Init>
}
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}
   b7bc4:	000b989c 	.word	0x000b989c

000b7bc8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7bc8:	7c00      	ldrb	r0, [r0, #16]
   b7bca:	2200      	movs	r2, #0
   b7bcc:	f7ff ba1e 	b.w	b700c <HAL_USB_USART_Begin>

000b7bd0 <_Z19acquireSerialBufferv>:
{
   b7bd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7bd2:	2214      	movs	r2, #20
{
   b7bd4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7bd6:	2100      	movs	r1, #0
   b7bd8:	f000 fc38 	bl	b844c <memset>
}
   b7bdc:	4620      	mov	r0, r4
   b7bde:	bd10      	pop	{r4, pc}

000b7be0 <_Z16_fetch_usbserialv>:
{
   b7be0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7be2:	4c0f      	ldr	r4, [pc, #60]	; (b7c20 <_Z16_fetch_usbserialv+0x40>)
{
   b7be4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7be6:	a803      	add	r0, sp, #12
   b7be8:	f7ff fff2 	bl	b7bd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7bec:	7821      	ldrb	r1, [r4, #0]
   b7bee:	f3bf 8f5b 	dmb	ish
   b7bf2:	f011 0101 	ands.w	r1, r1, #1
   b7bf6:	d10f      	bne.n	b7c18 <_Z16_fetch_usbserialv+0x38>
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	9101      	str	r1, [sp, #4]
   b7bfc:	f7fc fa58 	bl	b40b0 <__cxa_guard_acquire>
   b7c00:	9901      	ldr	r1, [sp, #4]
   b7c02:	b148      	cbz	r0, b7c18 <_Z16_fetch_usbserialv+0x38>
   b7c04:	aa03      	add	r2, sp, #12
   b7c06:	4807      	ldr	r0, [pc, #28]	; (b7c24 <_Z16_fetch_usbserialv+0x44>)
   b7c08:	f7ff ffca 	bl	b7ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	f7fc fa54 	bl	b40ba <__cxa_guard_release>
   b7c12:	4805      	ldr	r0, [pc, #20]	; (b7c28 <_Z16_fetch_usbserialv+0x48>)
   b7c14:	f000 fbfe 	bl	b8414 <atexit>
	return _usbserial;
}
   b7c18:	4802      	ldr	r0, [pc, #8]	; (b7c24 <_Z16_fetch_usbserialv+0x44>)
   b7c1a:	b008      	add	sp, #32
   b7c1c:	bd10      	pop	{r4, pc}
   b7c1e:	bf00      	nop
   b7c20:	2003e700 	.word	0x2003e700
   b7c24:	2003e704 	.word	0x2003e704
   b7c28:	000b7b29 	.word	0x000b7b29

000b7c2c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7c2c:	2200      	movs	r2, #0
   b7c2e:	6840      	ldr	r0, [r0, #4]
   b7c30:	4611      	mov	r1, r2
   b7c32:	f7ff ba6f 	b.w	b7114 <network_ready>

000b7c36 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c36:	2200      	movs	r2, #0
   b7c38:	6840      	ldr	r0, [r0, #4]
   b7c3a:	4611      	mov	r1, r2
   b7c3c:	f7ff ba8a 	b.w	b7154 <network_listening>

000b7c40 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c40:	2200      	movs	r2, #0
   b7c42:	6840      	ldr	r0, [r0, #4]
   b7c44:	4611      	mov	r1, r2
   b7c46:	f7ff ba95 	b.w	b7174 <network_get_listen_timeout>

000b7c4a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c4a:	6840      	ldr	r0, [r0, #4]
   b7c4c:	2200      	movs	r2, #0
   b7c4e:	f7ff ba89 	b.w	b7164 <network_set_listen_timeout>

000b7c52 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c52:	6840      	ldr	r0, [r0, #4]
   b7c54:	2200      	movs	r2, #0
   b7c56:	f081 0101 	eor.w	r1, r1, #1
   b7c5a:	f7ff ba73 	b.w	b7144 <network_listen>

000b7c5e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c5e:	2300      	movs	r3, #0
   b7c60:	6840      	ldr	r0, [r0, #4]
   b7c62:	461a      	mov	r2, r3
   b7c64:	4619      	mov	r1, r3
   b7c66:	f7ff ba65 	b.w	b7134 <network_off>

000b7c6a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c6a:	2300      	movs	r3, #0
   b7c6c:	6840      	ldr	r0, [r0, #4]
   b7c6e:	461a      	mov	r2, r3
   b7c70:	4619      	mov	r1, r3
   b7c72:	f7ff ba57 	b.w	b7124 <network_on>

000b7c76 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c76:	2200      	movs	r2, #0
   b7c78:	6840      	ldr	r0, [r0, #4]
   b7c7a:	4611      	mov	r1, r2
   b7c7c:	f7ff ba3a 	b.w	b70f4 <network_connecting>

000b7c80 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c80:	6840      	ldr	r0, [r0, #4]
   b7c82:	2200      	movs	r2, #0
   b7c84:	2102      	movs	r1, #2
   b7c86:	f7ff ba3d 	b.w	b7104 <network_disconnect>

000b7c8a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c8a:	2300      	movs	r3, #0
   b7c8c:	6840      	ldr	r0, [r0, #4]
   b7c8e:	461a      	mov	r2, r3
   b7c90:	f7ff ba28 	b.w	b70e4 <network_connect>

000b7c94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7c94:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7c96:	2204      	movs	r2, #4
   b7c98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7c9a:	4a02      	ldr	r2, [pc, #8]	; (b7ca4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7c9c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7c9e:	4770      	bx	lr
   b7ca0:	2003e718 	.word	0x2003e718
   b7ca4:	000b98cc 	.word	0x000b98cc

000b7ca8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7ca8:	b510      	push	{r4, lr}
   b7caa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7cac:	f000 fc1c 	bl	b84e8 <strlen>
   b7cb0:	3801      	subs	r0, #1
   b7cb2:	1823      	adds	r3, r4, r0
   b7cb4:	4620      	mov	r0, r4
	while(i<j){
   b7cb6:	4283      	cmp	r3, r0
   b7cb8:	d906      	bls.n	b7cc8 <_Z11str_reversePc+0x20>
		c = *i;
   b7cba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7cbc:	7819      	ldrb	r1, [r3, #0]
   b7cbe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7cc2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7cc6:	e7f6      	b.n	b7cb6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7cc8:	bd10      	pop	{r4, pc}

000b7cca <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7cca:	b570      	push	{r4, r5, r6, lr}
   b7ccc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7cce:	1e91      	subs	r1, r2, #2
   b7cd0:	2922      	cmp	r1, #34	; 0x22
   b7cd2:	d81d      	bhi.n	b7d10 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7cd4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7cd6:	b930      	cbnz	r0, b7ce6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7cd8:	4423      	add	r3, r4
            *ptr++ = '0';
   b7cda:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7cdc:	429d      	cmp	r5, r3
   b7cde:	d210      	bcs.n	b7d02 <ultoa+0x38>
            *ptr++ = '0';
   b7ce0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7ce4:	e7fa      	b.n	b7cdc <ultoa+0x12>
            result.quot = a/radix;
   b7ce6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7cea:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7cee:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7cf0:	2809      	cmp	r0, #9
                *ptr += '0';
   b7cf2:	bf94      	ite	ls
   b7cf4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7cf6:	3157      	addhi	r1, #87	; 0x57
   b7cf8:	b2c9      	uxtb	r1, r1
   b7cfa:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7cfe:	4630      	mov	r0, r6
	while(a){
   b7d00:	e7e9      	b.n	b7cd6 <ultoa+0xc>

	*ptr = '\0';
   b7d02:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7d04:	4620      	mov	r0, r4
	*ptr = '\0';
   b7d06:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7d08:	f7ff ffce 	bl	b7ca8 <_Z11str_reversePc>
	return buffer;
   b7d0c:	4620      	mov	r0, r4
}
   b7d0e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7d10:	2000      	movs	r0, #0
   b7d12:	e7fc      	b.n	b7d0e <ultoa+0x44>

000b7d14 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7d14:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7d16:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7d18:	460c      	mov	r4, r1
   b7d1a:	4615      	mov	r5, r2
	if(a<0){
   b7d1c:	da0e      	bge.n	b7d3c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7d22:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7d26:	bf14      	ite	ne
   b7d28:	4258      	negne	r0, r3
   b7d2a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7d2c:	2301      	movs	r3, #1
		*buffer = '-';
   b7d2e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7d30:	462a      	mov	r2, r5
   b7d32:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7d34:	f7ff ffc9 	bl	b7cca <ultoa>
	}
	return buffer;
}
   b7d38:	4620      	mov	r0, r4
   b7d3a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7d3c:	2301      	movs	r3, #1
   b7d3e:	e7f9      	b.n	b7d34 <itoa+0x20>

000b7d40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7d40:	4b01      	ldr	r3, [pc, #4]	; (b7d48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7d42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7d44:	4770      	bx	lr
   b7d46:	bf00      	nop
   b7d48:	2003e574 	.word	0x2003e574

000b7d4c <serialEventRun>:
{
   b7d4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7d4e:	4b0b      	ldr	r3, [pc, #44]	; (b7d7c <serialEventRun+0x30>)
   b7d50:	b143      	cbz	r3, b7d64 <serialEventRun+0x18>
   b7d52:	f7ff ff45 	bl	b7be0 <_Z16_fetch_usbserialv>
   b7d56:	6803      	ldr	r3, [r0, #0]
   b7d58:	691b      	ldr	r3, [r3, #16]
   b7d5a:	4798      	blx	r3
   b7d5c:	2800      	cmp	r0, #0
   b7d5e:	dd01      	ble.n	b7d64 <serialEventRun+0x18>
        serialEvent();
   b7d60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7d64:	4b06      	ldr	r3, [pc, #24]	; (b7d80 <serialEventRun+0x34>)
   b7d66:	b143      	cbz	r3, b7d7a <serialEventRun+0x2e>
   b7d68:	f000 f972 	bl	b8050 <_Z22__fetch_global_Serial1v>
   b7d6c:	6803      	ldr	r3, [r0, #0]
   b7d6e:	691b      	ldr	r3, [r3, #16]
   b7d70:	4798      	blx	r3
   b7d72:	2800      	cmp	r0, #0
   b7d74:	dd01      	ble.n	b7d7a <serialEventRun+0x2e>
        serialEvent1();
   b7d76:	f3af 8000 	nop.w
}
   b7d7a:	bd08      	pop	{r3, pc}
	...

000b7d84 <_post_loop>:
{
   b7d84:	b508      	push	{r3, lr}
	serialEventRun();
   b7d86:	f7ff ffe1 	bl	b7d4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d8a:	f7fe fff7 	bl	b6d7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d8e:	4b01      	ldr	r3, [pc, #4]	; (b7d94 <_post_loop+0x10>)
   b7d90:	6018      	str	r0, [r3, #0]
}
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	2003e728 	.word	0x2003e728

000b7d98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d98:	4805      	ldr	r0, [pc, #20]	; (b7db0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7d9a:	4a06      	ldr	r2, [pc, #24]	; (b7db4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7d9c:	4906      	ldr	r1, [pc, #24]	; (b7db8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7d9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7da0:	1a12      	subs	r2, r2, r0
   b7da2:	f000 fb45 	bl	b8430 <memcpy>
    __backup_sram_signature = signature;
   b7da6:	4b05      	ldr	r3, [pc, #20]	; (b7dbc <_Z33system_initialize_user_backup_ramv+0x24>)
   b7da8:	4a05      	ldr	r2, [pc, #20]	; (b7dc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7daa:	601a      	str	r2, [r3, #0]
}
   b7dac:	bd08      	pop	{r3, pc}
   b7dae:	bf00      	nop
   b7db0:	2003f400 	.word	0x2003f400
   b7db4:	2003f404 	.word	0x2003f404
   b7db8:	000b99f0 	.word	0x000b99f0
   b7dbc:	2003f400 	.word	0x2003f400
   b7dc0:	9a271c1e 	.word	0x9a271c1e

000b7dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7dc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7dc6:	2300      	movs	r3, #0
   b7dc8:	9300      	str	r3, [sp, #0]
   b7dca:	461a      	mov	r2, r3
   b7dcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7dd0:	f7ff f96e 	bl	b70b0 <system_ctrl_set_result>
}
   b7dd4:	b003      	add	sp, #12
   b7dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ddc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7ddc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7dde:	8843      	ldrh	r3, [r0, #2]
   b7de0:	2b0a      	cmp	r3, #10
   b7de2:	d008      	beq.n	b7df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7de4:	2b50      	cmp	r3, #80	; 0x50
   b7de6:	d10b      	bne.n	b7e00 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7de8:	4b09      	ldr	r3, [pc, #36]	; (b7e10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7dea:	681b      	ldr	r3, [r3, #0]
   b7dec:	b14b      	cbz	r3, b7e02 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7dee:	b003      	add	sp, #12
   b7df0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7df4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7df6:	f7ff ffe5 	bl	b7dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7dfa:	b003      	add	sp, #12
   b7dfc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e00:	2300      	movs	r3, #0
   b7e02:	9300      	str	r3, [sp, #0]
   b7e04:	461a      	mov	r2, r3
   b7e06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e0a:	f7ff f951 	bl	b70b0 <system_ctrl_set_result>
}
   b7e0e:	e7f4      	b.n	b7dfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7e10:	2003e724 	.word	0x2003e724

000b7e14 <module_user_init_hook>:
{
   b7e14:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7e16:	4812      	ldr	r0, [pc, #72]	; (b7e60 <module_user_init_hook+0x4c>)
   b7e18:	2100      	movs	r1, #0
   b7e1a:	f7ff f9fb 	bl	b7214 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7e1e:	4b11      	ldr	r3, [pc, #68]	; (b7e64 <module_user_init_hook+0x50>)
   b7e20:	681a      	ldr	r2, [r3, #0]
   b7e22:	4b11      	ldr	r3, [pc, #68]	; (b7e68 <module_user_init_hook+0x54>)
   b7e24:	429a      	cmp	r2, r3
   b7e26:	4b11      	ldr	r3, [pc, #68]	; (b7e6c <module_user_init_hook+0x58>)
   b7e28:	bf0c      	ite	eq
   b7e2a:	2201      	moveq	r2, #1
   b7e2c:	2200      	movne	r2, #0
   b7e2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7e30:	d001      	beq.n	b7e36 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7e32:	f7ff ffb1 	bl	b7d98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7e36:	f7fe ff91 	bl	b6d5c <HAL_RNG_GetRandomNumber>
   b7e3a:	4604      	mov	r4, r0
    srand(seed);
   b7e3c:	f000 fb1e 	bl	b847c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7e40:	4b0b      	ldr	r3, [pc, #44]	; (b7e70 <module_user_init_hook+0x5c>)
   b7e42:	b113      	cbz	r3, b7e4a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7e44:	4620      	mov	r0, r4
   b7e46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7e4a:	2100      	movs	r1, #0
   b7e4c:	4808      	ldr	r0, [pc, #32]	; (b7e70 <module_user_init_hook+0x5c>)
   b7e4e:	f7ff f939 	bl	b70c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7e56:	4807      	ldr	r0, [pc, #28]	; (b7e74 <module_user_init_hook+0x60>)
   b7e58:	2100      	movs	r1, #0
   b7e5a:	f7ff b91f 	b.w	b709c <system_ctrl_set_app_request_handler>
   b7e5e:	bf00      	nop
   b7e60:	000b7d41 	.word	0x000b7d41
   b7e64:	2003f400 	.word	0x2003f400
   b7e68:	9a271c1e 	.word	0x9a271c1e
   b7e6c:	2003e720 	.word	0x2003e720
   b7e70:	00000000 	.word	0x00000000
   b7e74:	000b7ddd 	.word	0x000b7ddd

000b7e78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7e78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7e7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7e7c:	d902      	bls.n	b7e84 <pinAvailable+0xc>
    return false;
   b7e7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7e80:	b002      	add	sp, #8
   b7e82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7e84:	f1a0 030b 	sub.w	r3, r0, #11
   b7e88:	2b02      	cmp	r3, #2
   b7e8a:	d81a      	bhi.n	b7ec2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7e8c:	4c17      	ldr	r4, [pc, #92]	; (b7eec <pinAvailable+0x74>)
   b7e8e:	7821      	ldrb	r1, [r4, #0]
   b7e90:	f3bf 8f5b 	dmb	ish
   b7e94:	f011 0101 	ands.w	r1, r1, #1
   b7e98:	d10b      	bne.n	b7eb2 <pinAvailable+0x3a>
   b7e9a:	4620      	mov	r0, r4
   b7e9c:	9101      	str	r1, [sp, #4]
   b7e9e:	f7fc f907 	bl	b40b0 <__cxa_guard_acquire>
   b7ea2:	9901      	ldr	r1, [sp, #4]
   b7ea4:	b128      	cbz	r0, b7eb2 <pinAvailable+0x3a>
   b7ea6:	4812      	ldr	r0, [pc, #72]	; (b7ef0 <pinAvailable+0x78>)
   b7ea8:	f7ff fc4c 	bl	b7744 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7eac:	4620      	mov	r0, r4
   b7eae:	f7fc f904 	bl	b40ba <__cxa_guard_release>
   b7eb2:	4b0f      	ldr	r3, [pc, #60]	; (b7ef0 <pinAvailable+0x78>)
   b7eb4:	7818      	ldrb	r0, [r3, #0]
   b7eb6:	f7ff f839 	bl	b6f2c <hal_spi_is_enabled>
   b7eba:	2800      	cmp	r0, #0
   b7ebc:	d1df      	bne.n	b7e7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b7ebe:	2001      	movs	r0, #1
   b7ec0:	e7de      	b.n	b7e80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7ec2:	2801      	cmp	r0, #1
   b7ec4:	d809      	bhi.n	b7eda <pinAvailable+0x62>
   b7ec6:	f000 f883 	bl	b7fd0 <_Z19__fetch_global_Wirev>
   b7eca:	2100      	movs	r1, #0
   b7ecc:	7c00      	ldrb	r0, [r0, #16]
   b7ece:	f7fe ffed 	bl	b6eac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7ed2:	f080 0001 	eor.w	r0, r0, #1
   b7ed6:	b2c0      	uxtb	r0, r0
   b7ed8:	e7d2      	b.n	b7e80 <pinAvailable+0x8>
   b7eda:	3809      	subs	r0, #9
   b7edc:	2801      	cmp	r0, #1
   b7ede:	d8ee      	bhi.n	b7ebe <pinAvailable+0x46>
   b7ee0:	f000 f8b6 	bl	b8050 <_Z22__fetch_global_Serial1v>
   b7ee4:	7c00      	ldrb	r0, [r0, #16]
   b7ee6:	f7ff f871 	bl	b6fcc <hal_usart_is_enabled>
   b7eea:	e7f2      	b.n	b7ed2 <pinAvailable+0x5a>
   b7eec:	2003e5dc 	.word	0x2003e5dc
   b7ef0:	2003e5e0 	.word	0x2003e5e0

000b7ef4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ef4:	2823      	cmp	r0, #35	; 0x23
{
   b7ef6:	b538      	push	{r3, r4, r5, lr}
   b7ef8:	4604      	mov	r4, r0
   b7efa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7efc:	d80a      	bhi.n	b7f14 <pinMode+0x20>
   b7efe:	29ff      	cmp	r1, #255	; 0xff
   b7f00:	d008      	beq.n	b7f14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7f02:	f7ff ffb9 	bl	b7e78 <pinAvailable>
   b7f06:	b128      	cbz	r0, b7f14 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7f08:	4629      	mov	r1, r5
   b7f0a:	4620      	mov	r0, r4
}
   b7f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7f10:	f7fe bf44 	b.w	b6d9c <HAL_Pin_Mode>
}
   b7f14:	bd38      	pop	{r3, r4, r5, pc}

000b7f16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7f16:	b538      	push	{r3, r4, r5, lr}
   b7f18:	4604      	mov	r4, r0
   b7f1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7f1c:	f7fe ff46 	bl	b6dac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7f20:	28ff      	cmp	r0, #255	; 0xff
   b7f22:	d010      	beq.n	b7f46 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7f24:	2806      	cmp	r0, #6
   b7f26:	d804      	bhi.n	b7f32 <digitalWrite+0x1c>
   b7f28:	234d      	movs	r3, #77	; 0x4d
   b7f2a:	fa23 f000 	lsr.w	r0, r3, r0
   b7f2e:	07c3      	lsls	r3, r0, #31
   b7f30:	d409      	bmi.n	b7f46 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7ff ffa0 	bl	b7e78 <pinAvailable>
   b7f38:	b128      	cbz	r0, b7f46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7f3a:	4629      	mov	r1, r5
   b7f3c:	4620      	mov	r0, r4
}
   b7f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7f42:	f7fe bf3b 	b.w	b6dbc <HAL_GPIO_Write>
}
   b7f46:	bd38      	pop	{r3, r4, r5, pc}

000b7f48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7f48:	b510      	push	{r4, lr}
   b7f4a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7f4c:	f7fe ff2e 	bl	b6dac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7f50:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7f52:	b2db      	uxtb	r3, r3
   b7f54:	2b01      	cmp	r3, #1
   b7f56:	d908      	bls.n	b7f6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7f58:	4620      	mov	r0, r4
   b7f5a:	f7ff ff8d 	bl	b7e78 <pinAvailable>
   b7f5e:	b120      	cbz	r0, b7f6a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7f60:	4620      	mov	r0, r4
}
   b7f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7f66:	f7fe bf31 	b.w	b6dcc <HAL_GPIO_Read>
}
   b7f6a:	2000      	movs	r0, #0
   b7f6c:	bd10      	pop	{r4, pc}

000b7f6e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7f6e:	280d      	cmp	r0, #13
{
   b7f70:	b510      	push	{r4, lr}
   b7f72:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7f74:	bf9c      	itt	ls
   b7f76:	340e      	addls	r4, #14
   b7f78:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7f7a:	4620      	mov	r0, r4
   b7f7c:	f7ff ff7c 	bl	b7e78 <pinAvailable>
   b7f80:	b150      	cbz	r0, b7f98 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7f82:	2103      	movs	r1, #3
   b7f84:	4620      	mov	r0, r4
   b7f86:	f7fe ff01 	bl	b6d8c <HAL_Validate_Pin_Function>
   b7f8a:	2803      	cmp	r0, #3
   b7f8c:	d104      	bne.n	b7f98 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7f8e:	4620      	mov	r0, r4
}
   b7f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7f94:	f7fe bf32 	b.w	b6dfc <hal_adc_read>
}
   b7f98:	2000      	movs	r0, #0
   b7f9a:	bd10      	pop	{r4, pc}

000b7f9c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b7f9c:	f7fe bf36 	b.w	b6e0c <HAL_Pulse_In>

000b7fa0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fa0:	4770      	bx	lr
	...

000b7fa4 <_Z17acquireWireBufferv>:
{
   b7fa4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7fa6:	2520      	movs	r5, #32
   b7fa8:	2314      	movs	r3, #20
{
   b7faa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7fac:	6003      	str	r3, [r0, #0]
   b7fae:	6085      	str	r5, [r0, #8]
   b7fb0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7fb2:	4906      	ldr	r1, [pc, #24]	; (b7fcc <_Z17acquireWireBufferv+0x28>)
   b7fb4:	4628      	mov	r0, r5
   b7fb6:	f000 f86f 	bl	b8098 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7fba:	4904      	ldr	r1, [pc, #16]	; (b7fcc <_Z17acquireWireBufferv+0x28>)
	};
   b7fbc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7fbe:	4628      	mov	r0, r5
   b7fc0:	f000 f86a 	bl	b8098 <_ZnajRKSt9nothrow_t>
	};
   b7fc4:	60e0      	str	r0, [r4, #12]
}
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	bd38      	pop	{r3, r4, r5, pc}
   b7fca:	bf00      	nop
   b7fcc:	000b9900 	.word	0x000b9900

000b7fd0 <_Z19__fetch_global_Wirev>:
{
   b7fd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fd2:	4d0e      	ldr	r5, [pc, #56]	; (b800c <_Z19__fetch_global_Wirev+0x3c>)
   b7fd4:	7829      	ldrb	r1, [r5, #0]
   b7fd6:	f3bf 8f5b 	dmb	ish
   b7fda:	f011 0401 	ands.w	r4, r1, #1
{
   b7fde:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fe0:	d111      	bne.n	b8006 <_Z19__fetch_global_Wirev+0x36>
   b7fe2:	4628      	mov	r0, r5
   b7fe4:	f7fc f864 	bl	b40b0 <__cxa_guard_acquire>
   b7fe8:	b168      	cbz	r0, b8006 <_Z19__fetch_global_Wirev+0x36>
   b7fea:	a801      	add	r0, sp, #4
   b7fec:	f7ff ffda 	bl	b7fa4 <_Z17acquireWireBufferv>
   b7ff0:	aa01      	add	r2, sp, #4
   b7ff2:	4621      	mov	r1, r4
   b7ff4:	4806      	ldr	r0, [pc, #24]	; (b8010 <_Z19__fetch_global_Wirev+0x40>)
   b7ff6:	f7ff f9a5 	bl	b7344 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ffa:	4628      	mov	r0, r5
   b7ffc:	f7fc f85d 	bl	b40ba <__cxa_guard_release>
   b8000:	4804      	ldr	r0, [pc, #16]	; (b8014 <_Z19__fetch_global_Wirev+0x44>)
   b8002:	f000 fa07 	bl	b8414 <atexit>
	return wire;
}
   b8006:	4802      	ldr	r0, [pc, #8]	; (b8010 <_Z19__fetch_global_Wirev+0x40>)
   b8008:	b007      	add	sp, #28
   b800a:	bd30      	pop	{r4, r5, pc}
   b800c:	2003e72c 	.word	0x2003e72c
   b8010:	2003e730 	.word	0x2003e730
   b8014:	000b7fa1 	.word	0x000b7fa1

000b8018 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8018:	4770      	bx	lr
	...

000b801c <_Z20acquireSerial1Bufferv>:
{
   b801c:	b538      	push	{r3, r4, r5, lr}
   b801e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8020:	2514      	movs	r5, #20
   b8022:	462a      	mov	r2, r5
   b8024:	2100      	movs	r1, #0
   b8026:	f000 fa11 	bl	b844c <memset>
   b802a:	8025      	strh	r5, [r4, #0]
   b802c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b802e:	4907      	ldr	r1, [pc, #28]	; (b804c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8030:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8032:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8034:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8036:	f000 f82f 	bl	b8098 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b803a:	4904      	ldr	r1, [pc, #16]	; (b804c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b803c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b803e:	4628      	mov	r0, r5
   b8040:	f000 f82a 	bl	b8098 <_ZnajRKSt9nothrow_t>
    };
   b8044:	60e0      	str	r0, [r4, #12]
}
   b8046:	4620      	mov	r0, r4
   b8048:	bd38      	pop	{r3, r4, r5, pc}
   b804a:	bf00      	nop
   b804c:	000b9900 	.word	0x000b9900

000b8050 <_Z22__fetch_global_Serial1v>:
{
   b8050:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8052:	4d0e      	ldr	r5, [pc, #56]	; (b808c <_Z22__fetch_global_Serial1v+0x3c>)
   b8054:	7829      	ldrb	r1, [r5, #0]
   b8056:	f3bf 8f5b 	dmb	ish
   b805a:	f011 0401 	ands.w	r4, r1, #1
{
   b805e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8060:	d111      	bne.n	b8086 <_Z22__fetch_global_Serial1v+0x36>
   b8062:	4628      	mov	r0, r5
   b8064:	f7fc f824 	bl	b40b0 <__cxa_guard_acquire>
   b8068:	b168      	cbz	r0, b8086 <_Z22__fetch_global_Serial1v+0x36>
   b806a:	a801      	add	r0, sp, #4
   b806c:	f7ff ffd6 	bl	b801c <_Z20acquireSerial1Bufferv>
   b8070:	aa01      	add	r2, sp, #4
   b8072:	4621      	mov	r1, r4
   b8074:	4806      	ldr	r0, [pc, #24]	; (b8090 <_Z22__fetch_global_Serial1v+0x40>)
   b8076:	f7ff fd41 	bl	b7afc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b807a:	4628      	mov	r0, r5
   b807c:	f7fc f81d 	bl	b40ba <__cxa_guard_release>
   b8080:	4804      	ldr	r0, [pc, #16]	; (b8094 <_Z22__fetch_global_Serial1v+0x44>)
   b8082:	f000 f9c7 	bl	b8414 <atexit>
    return serial1;
}
   b8086:	4802      	ldr	r0, [pc, #8]	; (b8090 <_Z22__fetch_global_Serial1v+0x40>)
   b8088:	b007      	add	sp, #28
   b808a:	bd30      	pop	{r4, r5, pc}
   b808c:	2003e744 	.word	0x2003e744
   b8090:	2003e748 	.word	0x2003e748
   b8094:	000b8019 	.word	0x000b8019

000b8098 <_ZnajRKSt9nothrow_t>:
   b8098:	f7fb bffb 	b.w	b4092 <_Znaj>

000b809c <__aeabi_drsub>:
   b809c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b80a0:	e002      	b.n	b80a8 <__adddf3>
   b80a2:	bf00      	nop

000b80a4 <__aeabi_dsub>:
   b80a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b80a8 <__adddf3>:
   b80a8:	b530      	push	{r4, r5, lr}
   b80aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b80ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b80b2:	ea94 0f05 	teq	r4, r5
   b80b6:	bf08      	it	eq
   b80b8:	ea90 0f02 	teqeq	r0, r2
   b80bc:	bf1f      	itttt	ne
   b80be:	ea54 0c00 	orrsne.w	ip, r4, r0
   b80c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b80c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b80ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b80ce:	f000 80e2 	beq.w	b8296 <__adddf3+0x1ee>
   b80d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b80d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b80da:	bfb8      	it	lt
   b80dc:	426d      	neglt	r5, r5
   b80de:	dd0c      	ble.n	b80fa <__adddf3+0x52>
   b80e0:	442c      	add	r4, r5
   b80e2:	ea80 0202 	eor.w	r2, r0, r2
   b80e6:	ea81 0303 	eor.w	r3, r1, r3
   b80ea:	ea82 0000 	eor.w	r0, r2, r0
   b80ee:	ea83 0101 	eor.w	r1, r3, r1
   b80f2:	ea80 0202 	eor.w	r2, r0, r2
   b80f6:	ea81 0303 	eor.w	r3, r1, r3
   b80fa:	2d36      	cmp	r5, #54	; 0x36
   b80fc:	bf88      	it	hi
   b80fe:	bd30      	pophi	{r4, r5, pc}
   b8100:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8104:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8108:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b810c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8110:	d002      	beq.n	b8118 <__adddf3+0x70>
   b8112:	4240      	negs	r0, r0
   b8114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8118:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b811c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8120:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8124:	d002      	beq.n	b812c <__adddf3+0x84>
   b8126:	4252      	negs	r2, r2
   b8128:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b812c:	ea94 0f05 	teq	r4, r5
   b8130:	f000 80a7 	beq.w	b8282 <__adddf3+0x1da>
   b8134:	f1a4 0401 	sub.w	r4, r4, #1
   b8138:	f1d5 0e20 	rsbs	lr, r5, #32
   b813c:	db0d      	blt.n	b815a <__adddf3+0xb2>
   b813e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8142:	fa22 f205 	lsr.w	r2, r2, r5
   b8146:	1880      	adds	r0, r0, r2
   b8148:	f141 0100 	adc.w	r1, r1, #0
   b814c:	fa03 f20e 	lsl.w	r2, r3, lr
   b8150:	1880      	adds	r0, r0, r2
   b8152:	fa43 f305 	asr.w	r3, r3, r5
   b8156:	4159      	adcs	r1, r3
   b8158:	e00e      	b.n	b8178 <__adddf3+0xd0>
   b815a:	f1a5 0520 	sub.w	r5, r5, #32
   b815e:	f10e 0e20 	add.w	lr, lr, #32
   b8162:	2a01      	cmp	r2, #1
   b8164:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8168:	bf28      	it	cs
   b816a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b816e:	fa43 f305 	asr.w	r3, r3, r5
   b8172:	18c0      	adds	r0, r0, r3
   b8174:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b817c:	d507      	bpl.n	b818e <__adddf3+0xe6>
   b817e:	f04f 0e00 	mov.w	lr, #0
   b8182:	f1dc 0c00 	rsbs	ip, ip, #0
   b8186:	eb7e 0000 	sbcs.w	r0, lr, r0
   b818a:	eb6e 0101 	sbc.w	r1, lr, r1
   b818e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8192:	d31b      	bcc.n	b81cc <__adddf3+0x124>
   b8194:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8198:	d30c      	bcc.n	b81b4 <__adddf3+0x10c>
   b819a:	0849      	lsrs	r1, r1, #1
   b819c:	ea5f 0030 	movs.w	r0, r0, rrx
   b81a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b81a4:	f104 0401 	add.w	r4, r4, #1
   b81a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b81ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b81b0:	f080 809a 	bcs.w	b82e8 <__adddf3+0x240>
   b81b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b81b8:	bf08      	it	eq
   b81ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b81be:	f150 0000 	adcs.w	r0, r0, #0
   b81c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b81c6:	ea41 0105 	orr.w	r1, r1, r5
   b81ca:	bd30      	pop	{r4, r5, pc}
   b81cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b81d0:	4140      	adcs	r0, r0
   b81d2:	eb41 0101 	adc.w	r1, r1, r1
   b81d6:	3c01      	subs	r4, #1
   b81d8:	bf28      	it	cs
   b81da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b81de:	d2e9      	bcs.n	b81b4 <__adddf3+0x10c>
   b81e0:	f091 0f00 	teq	r1, #0
   b81e4:	bf04      	itt	eq
   b81e6:	4601      	moveq	r1, r0
   b81e8:	2000      	moveq	r0, #0
   b81ea:	fab1 f381 	clz	r3, r1
   b81ee:	bf08      	it	eq
   b81f0:	3320      	addeq	r3, #32
   b81f2:	f1a3 030b 	sub.w	r3, r3, #11
   b81f6:	f1b3 0220 	subs.w	r2, r3, #32
   b81fa:	da0c      	bge.n	b8216 <__adddf3+0x16e>
   b81fc:	320c      	adds	r2, #12
   b81fe:	dd08      	ble.n	b8212 <__adddf3+0x16a>
   b8200:	f102 0c14 	add.w	ip, r2, #20
   b8204:	f1c2 020c 	rsb	r2, r2, #12
   b8208:	fa01 f00c 	lsl.w	r0, r1, ip
   b820c:	fa21 f102 	lsr.w	r1, r1, r2
   b8210:	e00c      	b.n	b822c <__adddf3+0x184>
   b8212:	f102 0214 	add.w	r2, r2, #20
   b8216:	bfd8      	it	le
   b8218:	f1c2 0c20 	rsble	ip, r2, #32
   b821c:	fa01 f102 	lsl.w	r1, r1, r2
   b8220:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8224:	bfdc      	itt	le
   b8226:	ea41 010c 	orrle.w	r1, r1, ip
   b822a:	4090      	lslle	r0, r2
   b822c:	1ae4      	subs	r4, r4, r3
   b822e:	bfa2      	ittt	ge
   b8230:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8234:	4329      	orrge	r1, r5
   b8236:	bd30      	popge	{r4, r5, pc}
   b8238:	ea6f 0404 	mvn.w	r4, r4
   b823c:	3c1f      	subs	r4, #31
   b823e:	da1c      	bge.n	b827a <__adddf3+0x1d2>
   b8240:	340c      	adds	r4, #12
   b8242:	dc0e      	bgt.n	b8262 <__adddf3+0x1ba>
   b8244:	f104 0414 	add.w	r4, r4, #20
   b8248:	f1c4 0220 	rsb	r2, r4, #32
   b824c:	fa20 f004 	lsr.w	r0, r0, r4
   b8250:	fa01 f302 	lsl.w	r3, r1, r2
   b8254:	ea40 0003 	orr.w	r0, r0, r3
   b8258:	fa21 f304 	lsr.w	r3, r1, r4
   b825c:	ea45 0103 	orr.w	r1, r5, r3
   b8260:	bd30      	pop	{r4, r5, pc}
   b8262:	f1c4 040c 	rsb	r4, r4, #12
   b8266:	f1c4 0220 	rsb	r2, r4, #32
   b826a:	fa20 f002 	lsr.w	r0, r0, r2
   b826e:	fa01 f304 	lsl.w	r3, r1, r4
   b8272:	ea40 0003 	orr.w	r0, r0, r3
   b8276:	4629      	mov	r1, r5
   b8278:	bd30      	pop	{r4, r5, pc}
   b827a:	fa21 f004 	lsr.w	r0, r1, r4
   b827e:	4629      	mov	r1, r5
   b8280:	bd30      	pop	{r4, r5, pc}
   b8282:	f094 0f00 	teq	r4, #0
   b8286:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b828a:	bf06      	itte	eq
   b828c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8290:	3401      	addeq	r4, #1
   b8292:	3d01      	subne	r5, #1
   b8294:	e74e      	b.n	b8134 <__adddf3+0x8c>
   b8296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b829a:	bf18      	it	ne
   b829c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b82a0:	d029      	beq.n	b82f6 <__adddf3+0x24e>
   b82a2:	ea94 0f05 	teq	r4, r5
   b82a6:	bf08      	it	eq
   b82a8:	ea90 0f02 	teqeq	r0, r2
   b82ac:	d005      	beq.n	b82ba <__adddf3+0x212>
   b82ae:	ea54 0c00 	orrs.w	ip, r4, r0
   b82b2:	bf04      	itt	eq
   b82b4:	4619      	moveq	r1, r3
   b82b6:	4610      	moveq	r0, r2
   b82b8:	bd30      	pop	{r4, r5, pc}
   b82ba:	ea91 0f03 	teq	r1, r3
   b82be:	bf1e      	ittt	ne
   b82c0:	2100      	movne	r1, #0
   b82c2:	2000      	movne	r0, #0
   b82c4:	bd30      	popne	{r4, r5, pc}
   b82c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b82ca:	d105      	bne.n	b82d8 <__adddf3+0x230>
   b82cc:	0040      	lsls	r0, r0, #1
   b82ce:	4149      	adcs	r1, r1
   b82d0:	bf28      	it	cs
   b82d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b82d6:	bd30      	pop	{r4, r5, pc}
   b82d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b82dc:	bf3c      	itt	cc
   b82de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b82e2:	bd30      	popcc	{r4, r5, pc}
   b82e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b82e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b82ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b82f0:	f04f 0000 	mov.w	r0, #0
   b82f4:	bd30      	pop	{r4, r5, pc}
   b82f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b82fa:	bf1a      	itte	ne
   b82fc:	4619      	movne	r1, r3
   b82fe:	4610      	movne	r0, r2
   b8300:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8304:	bf1c      	itt	ne
   b8306:	460b      	movne	r3, r1
   b8308:	4602      	movne	r2, r0
   b830a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b830e:	bf06      	itte	eq
   b8310:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8314:	ea91 0f03 	teqeq	r1, r3
   b8318:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b831c:	bd30      	pop	{r4, r5, pc}
   b831e:	bf00      	nop

000b8320 <__aeabi_ui2d>:
   b8320:	f090 0f00 	teq	r0, #0
   b8324:	bf04      	itt	eq
   b8326:	2100      	moveq	r1, #0
   b8328:	4770      	bxeq	lr
   b832a:	b530      	push	{r4, r5, lr}
   b832c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8330:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8334:	f04f 0500 	mov.w	r5, #0
   b8338:	f04f 0100 	mov.w	r1, #0
   b833c:	e750      	b.n	b81e0 <__adddf3+0x138>
   b833e:	bf00      	nop

000b8340 <__aeabi_i2d>:
   b8340:	f090 0f00 	teq	r0, #0
   b8344:	bf04      	itt	eq
   b8346:	2100      	moveq	r1, #0
   b8348:	4770      	bxeq	lr
   b834a:	b530      	push	{r4, r5, lr}
   b834c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8350:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8354:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8358:	bf48      	it	mi
   b835a:	4240      	negmi	r0, r0
   b835c:	f04f 0100 	mov.w	r1, #0
   b8360:	e73e      	b.n	b81e0 <__adddf3+0x138>
   b8362:	bf00      	nop

000b8364 <__aeabi_f2d>:
   b8364:	0042      	lsls	r2, r0, #1
   b8366:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b836a:	ea4f 0131 	mov.w	r1, r1, rrx
   b836e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8372:	bf1f      	itttt	ne
   b8374:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8378:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b837c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8380:	4770      	bxne	lr
   b8382:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8386:	bf08      	it	eq
   b8388:	4770      	bxeq	lr
   b838a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b838e:	bf04      	itt	eq
   b8390:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8394:	4770      	bxeq	lr
   b8396:	b530      	push	{r4, r5, lr}
   b8398:	f44f 7460 	mov.w	r4, #896	; 0x380
   b839c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b83a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b83a4:	e71c      	b.n	b81e0 <__adddf3+0x138>
   b83a6:	bf00      	nop

000b83a8 <__aeabi_ul2d>:
   b83a8:	ea50 0201 	orrs.w	r2, r0, r1
   b83ac:	bf08      	it	eq
   b83ae:	4770      	bxeq	lr
   b83b0:	b530      	push	{r4, r5, lr}
   b83b2:	f04f 0500 	mov.w	r5, #0
   b83b6:	e00a      	b.n	b83ce <__aeabi_l2d+0x16>

000b83b8 <__aeabi_l2d>:
   b83b8:	ea50 0201 	orrs.w	r2, r0, r1
   b83bc:	bf08      	it	eq
   b83be:	4770      	bxeq	lr
   b83c0:	b530      	push	{r4, r5, lr}
   b83c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b83c6:	d502      	bpl.n	b83ce <__aeabi_l2d+0x16>
   b83c8:	4240      	negs	r0, r0
   b83ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b83ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b83d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b83d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b83da:	f43f aed8 	beq.w	b818e <__adddf3+0xe6>
   b83de:	f04f 0203 	mov.w	r2, #3
   b83e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b83e6:	bf18      	it	ne
   b83e8:	3203      	addne	r2, #3
   b83ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b83ee:	bf18      	it	ne
   b83f0:	3203      	addne	r2, #3
   b83f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b83f6:	f1c2 0320 	rsb	r3, r2, #32
   b83fa:	fa00 fc03 	lsl.w	ip, r0, r3
   b83fe:	fa20 f002 	lsr.w	r0, r0, r2
   b8402:	fa01 fe03 	lsl.w	lr, r1, r3
   b8406:	ea40 000e 	orr.w	r0, r0, lr
   b840a:	fa21 f102 	lsr.w	r1, r1, r2
   b840e:	4414      	add	r4, r2
   b8410:	e6bd      	b.n	b818e <__adddf3+0xe6>
   b8412:	bf00      	nop

000b8414 <atexit>:
   b8414:	2300      	movs	r3, #0
   b8416:	4601      	mov	r1, r0
   b8418:	461a      	mov	r2, r3
   b841a:	4618      	mov	r0, r3
   b841c:	f000 b8c8 	b.w	b85b0 <__register_exitproc>

000b8420 <calloc>:
   b8420:	4b02      	ldr	r3, [pc, #8]	; (b842c <calloc+0xc>)
   b8422:	460a      	mov	r2, r1
   b8424:	4601      	mov	r1, r0
   b8426:	6818      	ldr	r0, [r3, #0]
   b8428:	f000 b818 	b.w	b845c <_calloc_r>
   b842c:	2003e574 	.word	0x2003e574

000b8430 <memcpy>:
   b8430:	440a      	add	r2, r1
   b8432:	4291      	cmp	r1, r2
   b8434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8438:	d100      	bne.n	b843c <memcpy+0xc>
   b843a:	4770      	bx	lr
   b843c:	b510      	push	{r4, lr}
   b843e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8442:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8446:	4291      	cmp	r1, r2
   b8448:	d1f9      	bne.n	b843e <memcpy+0xe>
   b844a:	bd10      	pop	{r4, pc}

000b844c <memset>:
   b844c:	4402      	add	r2, r0
   b844e:	4603      	mov	r3, r0
   b8450:	4293      	cmp	r3, r2
   b8452:	d100      	bne.n	b8456 <memset+0xa>
   b8454:	4770      	bx	lr
   b8456:	f803 1b01 	strb.w	r1, [r3], #1
   b845a:	e7f9      	b.n	b8450 <memset+0x4>

000b845c <_calloc_r>:
   b845c:	b513      	push	{r0, r1, r4, lr}
   b845e:	434a      	muls	r2, r1
   b8460:	4611      	mov	r1, r2
   b8462:	9201      	str	r2, [sp, #4]
   b8464:	f7fe fec6 	bl	b71f4 <_malloc_r>
   b8468:	4604      	mov	r4, r0
   b846a:	b118      	cbz	r0, b8474 <_calloc_r+0x18>
   b846c:	9a01      	ldr	r2, [sp, #4]
   b846e:	2100      	movs	r1, #0
   b8470:	f7ff ffec 	bl	b844c <memset>
   b8474:	4620      	mov	r0, r4
   b8476:	b002      	add	sp, #8
   b8478:	bd10      	pop	{r4, pc}
	...

000b847c <srand>:
   b847c:	b538      	push	{r3, r4, r5, lr}
   b847e:	4b10      	ldr	r3, [pc, #64]	; (b84c0 <srand+0x44>)
   b8480:	681d      	ldr	r5, [r3, #0]
   b8482:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8484:	4604      	mov	r4, r0
   b8486:	b9b3      	cbnz	r3, b84b6 <srand+0x3a>
   b8488:	2018      	movs	r0, #24
   b848a:	f7fe fe8b 	bl	b71a4 <malloc>
   b848e:	4602      	mov	r2, r0
   b8490:	63a8      	str	r0, [r5, #56]	; 0x38
   b8492:	b920      	cbnz	r0, b849e <srand+0x22>
   b8494:	4b0b      	ldr	r3, [pc, #44]	; (b84c4 <srand+0x48>)
   b8496:	480c      	ldr	r0, [pc, #48]	; (b84c8 <srand+0x4c>)
   b8498:	2142      	movs	r1, #66	; 0x42
   b849a:	f7fe feb3 	bl	b7204 <__assert_func>
   b849e:	490b      	ldr	r1, [pc, #44]	; (b84cc <srand+0x50>)
   b84a0:	4b0b      	ldr	r3, [pc, #44]	; (b84d0 <srand+0x54>)
   b84a2:	e9c0 1300 	strd	r1, r3, [r0]
   b84a6:	4b0b      	ldr	r3, [pc, #44]	; (b84d4 <srand+0x58>)
   b84a8:	6083      	str	r3, [r0, #8]
   b84aa:	230b      	movs	r3, #11
   b84ac:	8183      	strh	r3, [r0, #12]
   b84ae:	2100      	movs	r1, #0
   b84b0:	2001      	movs	r0, #1
   b84b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b84b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84b8:	2200      	movs	r2, #0
   b84ba:	611c      	str	r4, [r3, #16]
   b84bc:	615a      	str	r2, [r3, #20]
   b84be:	bd38      	pop	{r3, r4, r5, pc}
   b84c0:	2003e574 	.word	0x2003e574
   b84c4:	000b9901 	.word	0x000b9901
   b84c8:	000b9918 	.word	0x000b9918
   b84cc:	abcd330e 	.word	0xabcd330e
   b84d0:	e66d1234 	.word	0xe66d1234
   b84d4:	0005deec 	.word	0x0005deec

000b84d8 <strcpy>:
   b84d8:	4603      	mov	r3, r0
   b84da:	f811 2b01 	ldrb.w	r2, [r1], #1
   b84de:	f803 2b01 	strb.w	r2, [r3], #1
   b84e2:	2a00      	cmp	r2, #0
   b84e4:	d1f9      	bne.n	b84da <strcpy+0x2>
   b84e6:	4770      	bx	lr

000b84e8 <strlen>:
   b84e8:	4603      	mov	r3, r0
   b84ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   b84ee:	2a00      	cmp	r2, #0
   b84f0:	d1fb      	bne.n	b84ea <strlen+0x2>
   b84f2:	1a18      	subs	r0, r3, r0
   b84f4:	3801      	subs	r0, #1
   b84f6:	4770      	bx	lr

000b84f8 <strtok>:
   b84f8:	4b16      	ldr	r3, [pc, #88]	; (b8554 <strtok+0x5c>)
   b84fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b84fc:	681e      	ldr	r6, [r3, #0]
   b84fe:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b8500:	4605      	mov	r5, r0
   b8502:	b9fc      	cbnz	r4, b8544 <strtok+0x4c>
   b8504:	2050      	movs	r0, #80	; 0x50
   b8506:	9101      	str	r1, [sp, #4]
   b8508:	f7fe fe4c 	bl	b71a4 <malloc>
   b850c:	9901      	ldr	r1, [sp, #4]
   b850e:	65b0      	str	r0, [r6, #88]	; 0x58
   b8510:	4602      	mov	r2, r0
   b8512:	b920      	cbnz	r0, b851e <strtok+0x26>
   b8514:	4b10      	ldr	r3, [pc, #64]	; (b8558 <strtok+0x60>)
   b8516:	4811      	ldr	r0, [pc, #68]	; (b855c <strtok+0x64>)
   b8518:	2157      	movs	r1, #87	; 0x57
   b851a:	f7fe fe73 	bl	b7204 <__assert_func>
   b851e:	e9c0 4400 	strd	r4, r4, [r0]
   b8522:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b8526:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b852a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b852e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8532:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b8536:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b853a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b853e:	6184      	str	r4, [r0, #24]
   b8540:	7704      	strb	r4, [r0, #28]
   b8542:	6244      	str	r4, [r0, #36]	; 0x24
   b8544:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b8546:	2301      	movs	r3, #1
   b8548:	4628      	mov	r0, r5
   b854a:	b002      	add	sp, #8
   b854c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8550:	f000 b806 	b.w	b8560 <__strtok_r>
   b8554:	2003e574 	.word	0x2003e574
   b8558:	000b9901 	.word	0x000b9901
   b855c:	000b9971 	.word	0x000b9971

000b8560 <__strtok_r>:
   b8560:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8562:	b908      	cbnz	r0, b8568 <__strtok_r+0x8>
   b8564:	6810      	ldr	r0, [r2, #0]
   b8566:	b188      	cbz	r0, b858c <__strtok_r+0x2c>
   b8568:	4604      	mov	r4, r0
   b856a:	4620      	mov	r0, r4
   b856c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8570:	460f      	mov	r7, r1
   b8572:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8576:	b91e      	cbnz	r6, b8580 <__strtok_r+0x20>
   b8578:	b965      	cbnz	r5, b8594 <__strtok_r+0x34>
   b857a:	6015      	str	r5, [r2, #0]
   b857c:	4628      	mov	r0, r5
   b857e:	e005      	b.n	b858c <__strtok_r+0x2c>
   b8580:	42b5      	cmp	r5, r6
   b8582:	d1f6      	bne.n	b8572 <__strtok_r+0x12>
   b8584:	2b00      	cmp	r3, #0
   b8586:	d1f0      	bne.n	b856a <__strtok_r+0xa>
   b8588:	6014      	str	r4, [r2, #0]
   b858a:	7003      	strb	r3, [r0, #0]
   b858c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b858e:	461c      	mov	r4, r3
   b8590:	e00c      	b.n	b85ac <__strtok_r+0x4c>
   b8592:	b915      	cbnz	r5, b859a <__strtok_r+0x3a>
   b8594:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8598:	460e      	mov	r6, r1
   b859a:	f816 5b01 	ldrb.w	r5, [r6], #1
   b859e:	42ab      	cmp	r3, r5
   b85a0:	d1f7      	bne.n	b8592 <__strtok_r+0x32>
   b85a2:	2b00      	cmp	r3, #0
   b85a4:	d0f3      	beq.n	b858e <__strtok_r+0x2e>
   b85a6:	2300      	movs	r3, #0
   b85a8:	f804 3c01 	strb.w	r3, [r4, #-1]
   b85ac:	6014      	str	r4, [r2, #0]
   b85ae:	e7ed      	b.n	b858c <__strtok_r+0x2c>

000b85b0 <__register_exitproc>:
   b85b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b85b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8670 <__register_exitproc+0xc0>
   b85b8:	4606      	mov	r6, r0
   b85ba:	f8d8 0000 	ldr.w	r0, [r8]
   b85be:	461f      	mov	r7, r3
   b85c0:	460d      	mov	r5, r1
   b85c2:	4691      	mov	r9, r2
   b85c4:	f000 f856 	bl	b8674 <__retarget_lock_acquire_recursive>
   b85c8:	4b25      	ldr	r3, [pc, #148]	; (b8660 <__register_exitproc+0xb0>)
   b85ca:	681c      	ldr	r4, [r3, #0]
   b85cc:	b934      	cbnz	r4, b85dc <__register_exitproc+0x2c>
   b85ce:	4c25      	ldr	r4, [pc, #148]	; (b8664 <__register_exitproc+0xb4>)
   b85d0:	601c      	str	r4, [r3, #0]
   b85d2:	4b25      	ldr	r3, [pc, #148]	; (b8668 <__register_exitproc+0xb8>)
   b85d4:	b113      	cbz	r3, b85dc <__register_exitproc+0x2c>
   b85d6:	681b      	ldr	r3, [r3, #0]
   b85d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b85dc:	6863      	ldr	r3, [r4, #4]
   b85de:	2b1f      	cmp	r3, #31
   b85e0:	dd07      	ble.n	b85f2 <__register_exitproc+0x42>
   b85e2:	f8d8 0000 	ldr.w	r0, [r8]
   b85e6:	f000 f847 	bl	b8678 <__retarget_lock_release_recursive>
   b85ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b85ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b85f2:	b34e      	cbz	r6, b8648 <__register_exitproc+0x98>
   b85f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b85f8:	b988      	cbnz	r0, b861e <__register_exitproc+0x6e>
   b85fa:	4b1c      	ldr	r3, [pc, #112]	; (b866c <__register_exitproc+0xbc>)
   b85fc:	b923      	cbnz	r3, b8608 <__register_exitproc+0x58>
   b85fe:	f8d8 0000 	ldr.w	r0, [r8]
   b8602:	f000 f838 	bl	b8676 <__retarget_lock_release>
   b8606:	e7f0      	b.n	b85ea <__register_exitproc+0x3a>
   b8608:	f44f 7084 	mov.w	r0, #264	; 0x108
   b860c:	f7fe fdca 	bl	b71a4 <malloc>
   b8610:	2800      	cmp	r0, #0
   b8612:	d0f4      	beq.n	b85fe <__register_exitproc+0x4e>
   b8614:	2300      	movs	r3, #0
   b8616:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b861a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b861e:	6863      	ldr	r3, [r4, #4]
   b8620:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8624:	2201      	movs	r2, #1
   b8626:	409a      	lsls	r2, r3
   b8628:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b862c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8630:	4313      	orrs	r3, r2
   b8632:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8636:	2e02      	cmp	r6, #2
   b8638:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b863c:	bf02      	ittt	eq
   b863e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8642:	4313      	orreq	r3, r2
   b8644:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8648:	6863      	ldr	r3, [r4, #4]
   b864a:	f8d8 0000 	ldr.w	r0, [r8]
   b864e:	1c5a      	adds	r2, r3, #1
   b8650:	3302      	adds	r3, #2
   b8652:	6062      	str	r2, [r4, #4]
   b8654:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8658:	f000 f80e 	bl	b8678 <__retarget_lock_release_recursive>
   b865c:	2000      	movs	r0, #0
   b865e:	e7c6      	b.n	b85ee <__register_exitproc+0x3e>
   b8660:	2003e7e8 	.word	0x2003e7e8
   b8664:	2003e75c 	.word	0x2003e75c
   b8668:	00000000 	.word	0x00000000
   b866c:	000b71a5 	.word	0x000b71a5
   b8670:	2003e5d8 	.word	0x2003e5d8

000b8674 <__retarget_lock_acquire_recursive>:
   b8674:	4770      	bx	lr

000b8676 <__retarget_lock_release>:
   b8676:	4770      	bx	lr

000b8678 <__retarget_lock_release_recursive>:
   b8678:	4770      	bx	lr

000b867a <link_code_end>:
	...

000b867c <dynalib_user>:
   b867c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b868c:	0000 0000 4120 2000 0044 6553 736e 726f     .... A. D.Sensor
   b869c:	5020 636f 2061 6944 7473 6e61 6963 0061      Poca Distancia.
   b86ac:	6553 736e 726f 4d20 6375 6168 4420 7369     Sensor Mucha Dis
   b86bc:	6174 636e 6169 4f00 454c 3a44 5320 6e65     tancia.OLED: Sen
   b86cc:	6f73 2072 754c 207a 3e2d 2520 0064 6553     sor Luz -> %d.Se
   b86dc:	736e 726f 4e20 206f 754c 007a 6553 736e     nsor No Luz.Sens
   b86ec:	726f 5320 2069 754c 007a 6553 736e 726f     or Si Luz.Sensor
   b86fc:	4e20 206f 7552 6469 006f 6553 736e 726f      No Ruido.Sensor
   b870c:	5320 2069 7552 6469 006f 6553 736e 726f      Si Ruido.Sensor
   b871c:	4e20 206f 6f42 6f74 006e 6553 736e 726f      No Boton.Sensor
   b872c:	5320 2069 6f42 6f74 006e 6553 736e 726f      Si Boton.Sensor
   b873c:	4e20 206f 6f52 6174 6974 6f76 5300 6e65      No Rotativo.Sen
   b874c:	6f73 2072 6953 5220 746f 7461 7669 006f     sor Si Rotativo.
   b875c:	6553 736e 726f 5420 6d65 2e70 7246 6f69     Sensor Temp.Frio
   b876c:	5300 6e65 6f73 2072 6554 706d 542e 6d65     .Sensor Temp.Tem
   b877c:	6c70 6461 006f 6553 736e 726f 5420 6d65     plado.Sensor Tem
   b878c:	2e70 6143 6f6c 0072 6553 736e 726f 4420     p.Calor.Sensor D
   b879c:	7369 6174 636e 6169 4320 7265 6163 5300     istancia Cerca.S
   b87ac:	6e65 6f73 2072 6944 7473 6e61 6963 2061     ensor Distancia 
   b87bc:	654c 6f6a 0073 6553 736e 726f 6f4e 6156     Lejos.SensorNoVa
   b87cc:	696c 6f64 7245 6f72 0072 4752 2d42 6556     lidoError.RGB-Ve
   b87dc:	6472 2d65 6f52 6f6a 5200 4247 412d 616d     rde-Rojo.RGB-Ama
   b87ec:	6972 6c6c 2d6f 6f4d 6172 6f64 5200 4247     rillo-Morado.RGB
   b87fc:	412d 757a 2d6c 614e 6172 6a6e 0061 4752     -Azul-Naranja.RG
   b880c:	2d42 6c42 6e69 006b 4752 2d42 6152 6e69     B-Blink.RGB-Rain
   b881c:	6f42 0077 4752 2d42 6e4f 4f2d 6666 5a00     Bow.RGB-On-Off.Z
   b882c:	6d75 6162 6f64 2072 6e4f 4f2d 6666 5a00     umbador On-Off.Z
   b883c:	6d75 6162 6f64 2072 6c42 6e69 006b 6341     umbador Blink.Ac
   b884c:	7574 6461 726f 6f4e 6156 696c 6f64 7245     tuadorNoValidoEr
   b885c:	6f72 0072 494d 4146 4552 525f 6165 2864     ror.MIFARE_Read(
   b886c:	2029 6166 6c69 6465 203a 5000 4443 415f     ) failed: .PCD_A
   b887c:	7475 6568 746e 6369 7461 2865 2029 6166     uthenticate() fa
   b888c:	6c69 6465 203a 5400 6761 6e49 6f66 203a     iled: .TagInfo: 
   b889c:	7325 4300 6e6f 6365 6174 2072 6c61 7020     %s.Conectar al p
   b88ac:	6575 7472 206f 3041 000a 6f43 656e 7463     uerto A0..Conect
   b88bc:	7261 6120 206c 7570 7265 6f74 4120 0a32     ar al puerto A2.
   b88cc:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   b88dc:	7472 206f 3441 000a 6f43 656e 7463 7261     rto A4..Conectar
   b88ec:	6120 206c 7570 7265 6f74 4420 0a32 4300      al puerto D2..C
   b88fc:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   b890c:	206f 3444 000a 6f43 656e 7463 7261 6120     o D4..Conectar a
   b891c:	206c 7570 7265 6f74 4420 0a36 4500 7272     l puerto D6..Err
   b892c:	726f 203a 6f4e 6820 7961 6d20 7361 7020     or: No hay mas p
   b893c:	6575 7472 736f 6420 7369 6f70 696e 6c62     uertos disponibl
   b894c:	7365 0a20 4500 746e 6172 6c20 6465 6c42     es ..Entra ledBl
   b895c:	6e61 6f63 5400 7265 696d 616e 6c20 6465     anco.Termina led
   b896c:	6c42 6e61 6f63 4c00 6465 7245 6f72 4f72     Blanco.LedErrorO
   b897c:	7470 6f69 006e 6153 656c 7320 6977 6874     ption.Sale swith
   b898c:	5600 6c61 726f 6e20 206f 6176 696c 6f64     .Valor no valido
   b899c:	4400 7369 6174 636e 6169 203a 6425 5400     .Distancia: %d.T
   b89ac:	6d65 3a70 2520 0066 6e49 6176 696c 5364     emp: %f.InvalidS
   b89bc:	6e65 6f73 4572 7272 726f 4500 2073 6553     ensorError.Es Se
   b89cc:	736e 726f 4500 2073 6341 7574 6461 726f     nsor.Es Actuador
   b89dc:	4500 2073 6e41 6c61 676f 6369 006f 7345     .Es Analogico.Es
   b89ec:	4420 6769 7469 6c61 5400 7572 0065 6146      Digital.True.Fa
   b89fc:	736c 0065 6553 6520 7073 7265 2061 6361     lse.Se espera ac
   b8a0c:	7574 6461 726f 4500 7272 726f 203a 656e     tuador.Error: ne
   b8a1c:	6563 6173 6972 206f 6c61 6d20 6e65 736f     cesario al menos
   b8a2c:	7520 206e 6573 736e 726f 5300 6e65 6f73      un sensor.Senso
   b8a3c:	2072 3a31 2520 0073 6553 736e 726f 3220     r 1: %s.Sensor 2
   b8a4c:	203a 7325 2d00                               : %s.-.

000b8a53 <_ZL4font>:
   b8a53:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8a63:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8a73:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8a83:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8a93:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8aa3:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8ab3:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8ac3:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8ad3:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8ae3:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8af3:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8b03:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8b13:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8b23:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8b33:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8b43:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8b53:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8b63:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8b73:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8b83:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8b93:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8ba3:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8bb3:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8bc3:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8bd3:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8be3:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8bf3:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8c03:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8c13:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8c23:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8c33:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8c43:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8c53:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8c63:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8c73:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8c83:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8c93:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8ca3:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8cb3:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8cc3:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8cd3:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8ce3:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8cf3:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8d03:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8d13:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8d23:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8d33:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8d43:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8d53:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8d63:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8d73:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8d83:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8d93:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8da3:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8db3:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8dc3:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8dd3:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8de3:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8df3:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8e03:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8e13:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8e23:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8e33:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8e43:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8e53:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8e63:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8e73:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8e83:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8e93:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8ea3:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8eb3:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8ec3:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8ed3:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8ee3:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8ef3:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8f03:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8f13:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8f23:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8f33:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8f43:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b8f54 <_ZTV12Adafruit_GFX>:
	...
   b8f64:	56bd 000b 7605 000b 409d 000b 50c3 000b     .V...v...@...P..
   b8f74:	50c5 000b 50f7 000b 50d3 000b 50e5 000b     .P...P...P...P..
   b8f84:	5005 000b 50c3 000b 52ef 000b 52ed 000b     .P...P...R...R..
   b8f94:	510f 000b 514d 000b 5187 000b 51cd 000b     .Q..MQ...Q...Q..
   b8fa4:	51e9 000b 526d 000b 6564 6166 6c75 2074     .Q..mR..default 
   b8fb4:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b8fc4:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b8fd4:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b8fe4:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8ff0 <_ZTVN8particle11SPISettingsE>:
	...
   b8ff8:	57dd 000b 57cb 000b 57cd 000b               .W...W...W..

000b9004 <_ZL12splash2_data>:
   b9004:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9014:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9024:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9040:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9050:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9060:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9070:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9080:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9090:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b90a0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b90b0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b90c0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b90d0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b90e0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b90f0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9100:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9110:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9120:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9130:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9140:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9150:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9160:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9170:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9180:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9198:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b91a8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b91b8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b91c8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b91d8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b91e4 <_ZL17sucreLogoNew_data>:
   b91e4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b91f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9204:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b9214:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b9224:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b9234:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b9244:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b9254:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b9264:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b9274:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b9284:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b9294:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b92a4:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b92b4:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b92c4:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b92d4:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b92e4:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b92f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9304:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b9314:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b9324:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b9334:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b9344:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b9354:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b9364:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b9374:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b9384:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b9394:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b93a4:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b93b4:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b93c4:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b93d4:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b93e4:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b93f4:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b9404:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b9414:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b9424:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b9434:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b9444:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b9454:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b9464:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b9474:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b9484:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9494:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94a4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94b4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94e4:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b94f4:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b9504:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b9514:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b9524:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b9534:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b9544:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b9554:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b9564:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b9574:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b9584:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b9594:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b95a4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b95b4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b95c4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b95d4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b95e4 <_ZTV16Adafruit_SSD1306>:
	...
   b95ec:	5831 000b 5849 000b 56bd 000b 7605 000b     1X..IX...V...v..
   b95fc:	585d 000b 50c3 000b 50c5 000b 50f7 000b     ]X...P...P...P..
   b960c:	50d3 000b 50e5 000b 5005 000b 50c3 000b     .P...P...P...P..
   b961c:	52ef 000b 59ef 000b 5f8b 000b 5f3d 000b     .R...Y..._..=_..
   b962c:	5187 000b 51cd 000b 51e9 000b 526d 000b     .Q...Q...Q..mR..

000b963c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b963c:	8000 e0c0 f8f0 fefc                         ........

000b9644 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9644:	0100 0703 1f0f 7f3f                         ......?.

000b964c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b964c:	d5ae a880                                   ....

000b9650 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9650:	00d3 8d40                                   ..@.

000b9654 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9654:	0020 c8a1                                    ...

000b9658 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9658:	40db a6a4 af2e                              .@....

000b965e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b965e:	02da 8f81                                   ....

000b9662 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9662:	12da                                         ...

000b9665 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9665:	02da                                         ...

000b9668 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9668:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
   b9678:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
   b9688:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
   b9698:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
   b96a8:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
   b96b8:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
   b96c8:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
   b96d8:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
   b96e8:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
   b96f8:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
   b9708:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
   b9718:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
   b9728:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
   b9738:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
   b9748:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
   b9758:	2064 6977 6874 4e20 4b41 002e               d with NAK..

000b9764 <CSWTCH.84>:
   b9764:	967b 000b 9684 000b 969c 000b 96b1 000b     {...............
   b9774:	96cb 000b 96e7 000b 9716 000b 9728 000b     ............(...
   b9784:	9742 000b                                   B...

000b9788 <_ZTVN5spark13EthernetClassE>:
	...
   b9790:	72cf 000b 72c5 000b 72bb 000b 72b1 000b     .r...r...r...r..
   b97a0:	72a5 000b 7299 000b 74e1 000b 74e9 000b     .r...r...t...t..
   b97b0:	728d 000b 7285 000b 727b 000b 7271 000b     .r...r..{r..qr..
   b97c0:	7519 000b                                   .u..

000b97c4 <_ZTV7TwoWire>:
	...
   b97cc:	72ed 000b 7337 000b 730f 000b 72ef 000b     .r..7s...s...r..
   b97dc:	7317 000b 731f 000b 7327 000b 732f 000b     .s...s..'s../s..

000b97ec <_ZTV9IPAddress>:
	...
   b97f4:	73b1 000b 73a1 000b 73a3 000b 7061 0070     .s...s...s..app.

000b9804 <_ZTVN5spark12NetworkClassE>:
	...
   b980c:	74a1 000b 74ab 000b 74b5 000b 74bf 000b     .t...t...t...t..
   b981c:	74c9 000b 74d5 000b 74e1 000b 74e9 000b     .t...t...t...t..
   b982c:	74f1 000b 74fd 000b 7505 000b 750f 000b     .t...t...u...u..
   b983c:	7519 000b                                   .u..

000b9840 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9840:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b9850:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b9860:	6d69 0065                                   ime.

000b9864 <_ZTV11USARTSerial>:
	...
   b986c:	7a81 000b 7aed 000b 7ac5 000b 7605 000b     .z...z...z...v..
   b987c:	7a95 000b 7ab1 000b 7aa3 000b 7abf 000b     .z...z...z...z..
   b988c:	7a83 000b 7a87 000b                         .z...z..

000b9894 <_ZTV9USBSerial>:
	...
   b989c:	7b2b 000b 7b93 000b 7b69 000b 7605 000b     +{...{..i{...v..
   b98ac:	7b5b 000b 7b2d 000b 7b3d 000b 7b8d 000b     [{..-{..={...{..
   b98bc:	7b4d 000b 7b25 000b                         M{..%{..

000b98c4 <_ZTVN5spark9WiFiClassE>:
	...
   b98cc:	7c8b 000b 7c81 000b 7c77 000b 7c2d 000b     .|...|..w|..-|..
   b98dc:	7c6b 000b 7c5f 000b 74e1 000b 74e9 000b     k|.._|...t...t..
   b98ec:	7c53 000b 7c4b 000b 7c41 000b 7c37 000b     S|..K|..A|..7|..
   b98fc:	7519 000b                                   .u..

000b9900 <_ZSt7nothrow>:
   b9900:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9910:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9920:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b9930:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b9940:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b9950:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9960:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b9970:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b9980:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b9990:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b99a0:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b99b0:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b99c0:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b99cc <link_const_variable_data_end>:
   b99cc:	000b4fad 	.word	0x000b4fad
   b99d0:	000b722d 	.word	0x000b722d
   b99d4:	000b72d9 	.word	0x000b72d9
   b99d8:	000b7491 	.word	0x000b7491
   b99dc:	000b75f1 	.word	0x000b75f1
   b99e0:	000b772d 	.word	0x000b772d
   b99e4:	000b7a49 	.word	0x000b7a49
   b99e8:	000b7a6d 	.word	0x000b7a6d
   b99ec:	000b7c95 	.word	0x000b7c95
