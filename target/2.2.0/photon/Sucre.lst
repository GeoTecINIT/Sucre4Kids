
/Users/marcosgarciagarcia/Documents/Sucre/target/2.2.0/photon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000041e4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4200  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a4204  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  20000088  20000088  00040088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a428c  080a428c  0003428c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a42b4  080a42b4  000342b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00159eff  00000000  00000000  000342b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000174f0  00000000  00000000  0018e1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000299d2  00000000  00000000  001a56a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002798  00000000  00000000  001cf079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006300  00000000  00000000  001d1811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002bded  00000000  00000000  001d7b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039221  00000000  00000000  002038fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b9ea2  00000000  00000000  0023cb1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006e60  00000000  00000000  002f69c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fff5 	bl	80a301c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fffd 	bl	80a3038 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a4204 	.word	0x080a4204
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	20000695 	.word	0x20000695
 80a0058:	20000695 	.word	0x20000695

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fecf 	bl	80a2e00 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a41d8 	.word	0x080a41d8
 80a0080:	080a41f8 	.word	0x080a41f8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b958 	b.w	80a0338 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f9a7 	bl	80a03dc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 be6d 	b.w	80a2d70 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f002 b969 	b.w	80a236c <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f002 b96f 	b.w	80a237c <free>
	...

080a00a0 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a0:	2100      	movs	r1, #0
 80a00a2:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a02      	ldr	r2, [pc, #8]	; (80a00b0 <__cxa_pure_virtual+0x10>)
 80a00a8:	f002 f8c4 	bl	80a2234 <panic_>
  while (1);
 80a00ac:	e7fe      	b.n	80a00ac <__cxa_pure_virtual+0xc>
 80a00ae:	bf00      	nop
 80a00b0:	080a1fc1 	.word	0x080a1fc1

080a00b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b4:	7800      	ldrb	r0, [r0, #0]
 80a00b6:	fab0 f080 	clz	r0, r0
 80a00ba:	0940      	lsrs	r0, r0, #5
 80a00bc:	4770      	bx	lr

080a00be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00be:	2301      	movs	r3, #1
 80a00c0:	7003      	strb	r3, [r0, #0]
 80a00c2:	4770      	bx	lr

080a00c4 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a00c4:	4b02      	ldr	r3, [pc, #8]	; (80a00d0 <__tcf_0+0xc>)
 80a00c6:	6898      	ldr	r0, [r3, #8]
 80a00c8:	b108      	cbz	r0, 80a00ce <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a00ca:	f001 bf59 	b.w	80a1f80 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a00ce:	4770      	bx	lr
 80a00d0:	2000008c 	.word	0x2000008c

080a00d4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00d4:	b40e      	push	{r1, r2, r3}
 80a00d6:	b503      	push	{r0, r1, lr}
 80a00d8:	ab03      	add	r3, sp, #12
 80a00da:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a00de:	2100      	movs	r1, #0
        va_start(args, format);
 80a00e0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a00e2:	f002 fb19 	bl	80a2718 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00e6:	b002      	add	sp, #8
 80a00e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00ec:	b003      	add	sp, #12
 80a00ee:	4770      	bx	lr

080a00f0 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
 80a00f0:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
 80a00f2:	7803      	ldrb	r3, [r0, #0]
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
 80a00f4:	240a      	movs	r4, #10
   if (str[i] == '-')
 80a00f6:	2b2d      	cmp	r3, #45	; 0x2d
      isNegetive = true;
 80a00f8:	bf0c      	ite	eq
 80a00fa:	2201      	moveq	r2, #1
   bool isNegetive = false;
 80a00fc:	2200      	movne	r2, #0
   int i = 0;
 80a00fe:	4613      	mov	r3, r2
 80a0100:	4403      	add	r3, r0
      i++;
 80a0102:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
 80a0104:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a0108:	3930      	subs	r1, #48	; 0x30
 80a010a:	b2cd      	uxtb	r5, r1
 80a010c:	2d09      	cmp	r5, #9
 80a010e:	d802      	bhi.n	80a0116 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
 80a0110:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
 80a0114:	e7f6      	b.n	80a0104 <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
 80a0116:	b102      	cbz	r2, 80a011a <_Z4atoiPc+0x2a>
      num = -1 * num;
 80a0118:	4240      	negs	r0, r0
   return num;
}
 80a011a:	bd30      	pop	{r4, r5, pc}

080a011c <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
 80a011c:	b570      	push	{r4, r5, r6, lr}
 80a011e:	4614      	mov	r4, r2
 80a0120:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
 80a0122:	f002 ffbd 	bl	80a30a0 <strtok>
   int j = 0;
 80a0126:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
 80a0128:	b140      	cbz	r0, 80a013c <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
 80a012a:	f7ff ffe1 	bl	80a00f0 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
 80a012e:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
 80a0130:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
 80a0134:	2000      	movs	r0, #0
 80a0136:	f002 ffb3 	bl	80a30a0 <strtok>
   while (ptr != NULL)
 80a013a:	e7f5      	b.n	80a0128 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
 80a013c:	6823      	ldr	r3, [r4, #0]
 80a013e:	b913      	cbnz	r3, 80a0146 <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
 80a0140:	2201      	movs	r2, #1
 80a0142:	4b01      	ldr	r3, [pc, #4]	; (80a0148 <_Z5splitPcS_Pi+0x2c>)
 80a0144:	701a      	strb	r2, [r3, #0]
   }
}
 80a0146:	bd70      	pop	{r4, r5, r6, pc}
 80a0148:	20000114 	.word	0x20000114

080a014c <_Z16writeDataToBLockh>:
      Serial.printf("Es digital\n");
   }
}

void writeDataToBLock(byte blockAddr)
{
 80a014c:	b538      	push	{r3, r4, r5, lr}
 80a014e:	4601      	mov	r1, r0
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(blockAddr, (byte *)data, 16);
 80a0150:	2310      	movs	r3, #16
 80a0152:	4a0d      	ldr	r2, [pc, #52]	; (80a0188 <_Z16writeDataToBLockh+0x3c>)
 80a0154:	480d      	ldr	r0, [pc, #52]	; (80a018c <_Z16writeDataToBLockh+0x40>)
 80a0156:	f001 feed 	bl	80a1f34 <_ZN7MFRC52212MIFARE_WriteEhPhh>
 80a015a:	4d0d      	ldr	r5, [pc, #52]	; (80a0190 <_Z16writeDataToBLockh+0x44>)
   if (status != MFRC522::STATUS_OK)
 80a015c:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(blockAddr, (byte *)data, 16);
 80a015e:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
 80a0160:	d011      	beq.n	80a0186 <_Z16writeDataToBLockh+0x3a>
   {
      Serial.print(F("MIFARE_Write() failed: "));
 80a0162:	f002 fd11 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0166:	490b      	ldr	r1, [pc, #44]	; (80a0194 <_Z16writeDataToBLockh+0x48>)
 80a0168:	f002 fa9c 	bl	80a26a4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
 80a016c:	f002 fd0c 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0170:	7829      	ldrb	r1, [r5, #0]
 80a0172:	4604      	mov	r4, r0
 80a0174:	4805      	ldr	r0, [pc, #20]	; (80a018c <_Z16writeDataToBLockh+0x40>)
 80a0176:	f001 fa5d 	bl	80a1634 <_ZN7MFRC52217GetStatusCodeNameEh>
 80a017a:	4601      	mov	r1, r0
 80a017c:	4620      	mov	r0, r4
   }
}
 80a017e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Serial.println(mfrc522.GetStatusCodeName(status));
 80a0182:	f002 baa2 	b.w	80a26ca <_ZN5Print7printlnEPKc>
}
 80a0186:	bd38      	pop	{r3, r4, r5, pc}
 80a0188:	20000001 	.word	0x20000001
 80a018c:	2000011b 	.word	0x2000011b
 80a0190:	20000131 	.word	0x20000131
 80a0194:	080a3228 	.word	0x080a3228

080a0198 <_Z17readDataFromBlockhPhh>:

void readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
 80a0198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a019a:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
 80a019e:	f10d 0307 	add.w	r3, sp, #7
 80a01a2:	460a      	mov	r2, r1
 80a01a4:	4601      	mov	r1, r0
 80a01a6:	480c      	ldr	r0, [pc, #48]	; (80a01d8 <_Z17readDataFromBlockhPhh+0x40>)
 80a01a8:	f001 fe27 	bl	80a1dfa <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
 80a01ac:	4d0b      	ldr	r5, [pc, #44]	; (80a01dc <_Z17readDataFromBlockhPhh+0x44>)
   if (status != MFRC522::STATUS_OK)
 80a01ae:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
 80a01b0:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
 80a01b2:	d00f      	beq.n	80a01d4 <_Z17readDataFromBlockhPhh+0x3c>
   {
      Serial.print(F("MIFARE_Read() failed: "));
 80a01b4:	f002 fce8 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a01b8:	4909      	ldr	r1, [pc, #36]	; (80a01e0 <_Z17readDataFromBlockhPhh+0x48>)
 80a01ba:	f002 fa73 	bl	80a26a4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
 80a01be:	f002 fce3 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a01c2:	7829      	ldrb	r1, [r5, #0]
 80a01c4:	4604      	mov	r4, r0
 80a01c6:	4804      	ldr	r0, [pc, #16]	; (80a01d8 <_Z17readDataFromBlockhPhh+0x40>)
 80a01c8:	f001 fa34 	bl	80a1634 <_ZN7MFRC52217GetStatusCodeNameEh>
 80a01cc:	4601      	mov	r1, r0
 80a01ce:	4620      	mov	r0, r4
 80a01d0:	f002 fa7b 	bl	80a26ca <_ZN5Print7printlnEPKc>
   }
}
 80a01d4:	b003      	add	sp, #12
 80a01d6:	bd30      	pop	{r4, r5, pc}
 80a01d8:	2000011b 	.word	0x2000011b
 80a01dc:	20000131 	.word	0x20000131
 80a01e0:	080a3240 	.word	0x080a3240

080a01e4 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
 80a01e4:	b5f0      	push	{r4, r5, r6, r7, lr}

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
 80a01e6:	4e23      	ldr	r6, [pc, #140]	; (80a0274 <_Z8getTagIDPi+0x90>)
{
 80a01e8:	b08d      	sub	sp, #52	; 0x34
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
 80a01ea:	4a23      	ldr	r2, [pc, #140]	; (80a0278 <_Z8getTagIDPi+0x94>)
 80a01ec:	9600      	str	r6, [sp, #0]
{
 80a01ee:	4604      	mov	r4, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
 80a01f0:	2160      	movs	r1, #96	; 0x60
 80a01f2:	4630      	mov	r0, r6
 80a01f4:	4b21      	ldr	r3, [pc, #132]	; (80a027c <_Z8getTagIDPi+0x98>)
 80a01f6:	7812      	ldrb	r2, [r2, #0]
 80a01f8:	f001 fe20 	bl	80a1e3c <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
 80a01fc:	4f20      	ldr	r7, [pc, #128]	; (80a0280 <_Z8getTagIDPi+0x9c>)
   if (status != MFRC522::STATUS_OK)
 80a01fe:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
 80a0200:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
 80a0202:	d00f      	beq.n	80a0224 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
 80a0204:	f002 fcc0 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0208:	491e      	ldr	r1, [pc, #120]	; (80a0284 <_Z8getTagIDPi+0xa0>)
 80a020a:	f002 fa4b 	bl	80a26a4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
 80a020e:	f002 fcbb 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0212:	7839      	ldrb	r1, [r7, #0]
 80a0214:	4605      	mov	r5, r0
 80a0216:	4630      	mov	r0, r6
 80a0218:	f001 fa0c 	bl	80a1634 <_ZN7MFRC52217GetStatusCodeNameEh>
 80a021c:	4601      	mov	r1, r0
 80a021e:	4628      	mov	r0, r5
 80a0220:	f002 fa53 	bl	80a26ca <_ZN5Print7printlnEPKc>
   }

   // Write data to tag:
   writeDataToBLock(blockAddr);
 80a0224:	4d18      	ldr	r5, [pc, #96]	; (80a0288 <_Z8getTagIDPi+0xa4>)
 80a0226:	7828      	ldrb	r0, [r5, #0]
 80a0228:	f7ff ff90 	bl	80a014c <_Z16writeDataToBLockh>

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   readDataFromBlock(blockAddr, buffer, size);
 80a022c:	2212      	movs	r2, #18
 80a022e:	7828      	ldrb	r0, [r5, #0]
 80a0230:	a907      	add	r1, sp, #28
 80a0232:	f7ff ffb1 	bl	80a0198 <_Z17readDataFromBlockhPhh>

   // Conversión y almacenamiento
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
 80a0236:	a903      	add	r1, sp, #12
   readDataFromBlock(blockAddr, buffer, size);
 80a0238:	2312      	movs	r3, #18
 80a023a:	460d      	mov	r5, r1
 80a023c:	aa07      	add	r2, sp, #28
   {
      tagInfo[i] = (char)buffer[j];
 80a023e:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a0242:	3b01      	subs	r3, #1
   for (byte j = 0; j < sizeof(buffer); j++)
 80a0244:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      tagInfo[i] = (char)buffer[j];
 80a0248:	f801 0b01 	strb.w	r0, [r1], #1
   for (byte j = 0; j < sizeof(buffer); j++)
 80a024c:	d1f7      	bne.n	80a023e <_Z8getTagIDPi+0x5a>
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printf("\nTagInfo: %s \n", tagInfo);
 80a024e:	f002 fc9b 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0252:	462a      	mov	r2, r5
 80a0254:	490d      	ldr	r1, [pc, #52]	; (80a028c <_Z8getTagIDPi+0xa8>)
 80a0256:	f7ff ff3d 	bl	80a00d4 <_ZN5Print6printfEPKcz>
   split(tagInfo, delim, infoTag);
 80a025a:	4622      	mov	r2, r4
 80a025c:	490c      	ldr	r1, [pc, #48]	; (80a0290 <_Z8getTagIDPi+0xac>)
 80a025e:	4628      	mov	r0, r5
 80a0260:	f7ff ff5c 	bl	80a011c <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
 80a0264:	4803      	ldr	r0, [pc, #12]	; (80a0274 <_Z8getTagIDPi+0x90>)
 80a0266:	f001 fda6 	bl	80a1db6 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
 80a026a:	4802      	ldr	r0, [pc, #8]	; (80a0274 <_Z8getTagIDPi+0x90>)
 80a026c:	f001 fa5e 	bl	80a172c <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
 80a0270:	b00d      	add	sp, #52	; 0x34
 80a0272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0274:	2000011b 	.word	0x2000011b
 80a0278:	20000018 	.word	0x20000018
 80a027c:	20000115 	.word	0x20000115
 80a0280:	20000131 	.word	0x20000131
 80a0284:	080a3257 	.word	0x080a3257
 80a0288:	20000000 	.word	0x20000000
 80a028c:	080a3273 	.word	0x080a3273
 80a0290:	20000011 	.word	0x20000011

080a0294 <_Z13asignarPuertoi>:
{
   return id == 0;
}

int asignarPuerto(int id)
{
 80a0294:	b508      	push	{r3, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
 80a0296:	b940      	cbnz	r0, 80a02aa <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
 80a0298:	4b1e      	ldr	r3, [pc, #120]	; (80a0314 <_Z13asignarPuertoi+0x80>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
 80a029a:	681b      	ldr	r3, [r3, #0]
   }

   switch (option)
 80a029c:	2b05      	cmp	r3, #5
 80a029e:	d831      	bhi.n	80a0304 <_Z13asignarPuertoi+0x70>
 80a02a0:	e8df f003 	tbb	[pc, r3]
 80a02a4:	1c120e05 	.word	0x1c120e05
 80a02a8:	2723      	.short	0x2723
      option = puertoDigital;
 80a02aa:	4b1b      	ldr	r3, [pc, #108]	; (80a0318 <_Z13asignarPuertoi+0x84>)
 80a02ac:	e7f5      	b.n	80a029a <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
 80a02ae:	f002 fc6b 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02b2:	491a      	ldr	r1, [pc, #104]	; (80a031c <_Z13asignarPuertoi+0x88>)
      // value of this constant_expression                  p_A1
      return puertoAnalogico;
      break;

   case 1:
      Serial.print("Conectar al puerto A2\n");
 80a02b4:	f002 f9f6 	bl	80a26a4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
 80a02b8:	4b16      	ldr	r3, [pc, #88]	; (80a0314 <_Z13asignarPuertoi+0x80>)
      break;

   case 4:
      Serial.print("Conectar al puerto D4\n");

      puertoDigital++;
 80a02ba:	6818      	ldr	r0, [r3, #0]
 80a02bc:	3001      	adds	r0, #1
 80a02be:	e00b      	b.n	80a02d8 <_Z13asignarPuertoi+0x44>
      Serial.print("Conectar al puerto A2\n");
 80a02c0:	f002 fc62 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02c4:	4916      	ldr	r1, [pc, #88]	; (80a0320 <_Z13asignarPuertoi+0x8c>)
 80a02c6:	e7f5      	b.n	80a02b4 <_Z13asignarPuertoi+0x20>
      Serial.print("Conectar al puerto A4\n");
 80a02c8:	f002 fc5e 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02cc:	4915      	ldr	r1, [pc, #84]	; (80a0324 <_Z13asignarPuertoi+0x90>)
 80a02ce:	f002 f9e9 	bl	80a26a4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
 80a02d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a02d6:	4b0f      	ldr	r3, [pc, #60]	; (80a0314 <_Z13asignarPuertoi+0x80>)
      // value of this constant_expression               p_D5
      return puertoDigital;
      break;
   case 5:
      Serial.print("Conectar al puerto D6\n");
      puertoDigital = -1;
 80a02d8:	6018      	str	r0, [r3, #0]
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
 80a02da:	bd08      	pop	{r3, pc}
      Serial.print("Conectar al puerto D2\n");
 80a02dc:	f002 fc54 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02e0:	4911      	ldr	r1, [pc, #68]	; (80a0328 <_Z13asignarPuertoi+0x94>)
      Serial.print("Conectar al puerto D4\n");
 80a02e2:	f002 f9df 	bl	80a26a4 <_ZN5Print5printEPKc>
      puertoDigital++;
 80a02e6:	4b0c      	ldr	r3, [pc, #48]	; (80a0318 <_Z13asignarPuertoi+0x84>)
 80a02e8:	e7e7      	b.n	80a02ba <_Z13asignarPuertoi+0x26>
      Serial.print("Conectar al puerto D4\n");
 80a02ea:	f002 fc4d 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02ee:	490f      	ldr	r1, [pc, #60]	; (80a032c <_Z13asignarPuertoi+0x98>)
 80a02f0:	e7f7      	b.n	80a02e2 <_Z13asignarPuertoi+0x4e>
      Serial.print("Conectar al puerto D6\n");
 80a02f2:	f002 fc49 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a02f6:	490e      	ldr	r1, [pc, #56]	; (80a0330 <_Z13asignarPuertoi+0x9c>)
 80a02f8:	f002 f9d4 	bl	80a26a4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
 80a02fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0300:	4b05      	ldr	r3, [pc, #20]	; (80a0318 <_Z13asignarPuertoi+0x84>)
 80a0302:	e7e9      	b.n	80a02d8 <_Z13asignarPuertoi+0x44>
      Serial.print("Error: No hay mas puertos disponibles \n");
 80a0304:	f002 fc40 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0308:	490a      	ldr	r1, [pc, #40]	; (80a0334 <_Z13asignarPuertoi+0xa0>)
 80a030a:	f002 f9cb 	bl	80a26a4 <_ZN5Print5printEPKc>
      return -1;
 80a030e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0312:	e7e2      	b.n	80a02da <_Z13asignarPuertoi+0x46>
 80a0314:	2000012c 	.word	0x2000012c
 80a0318:	20000014 	.word	0x20000014
 80a031c:	080a3282 	.word	0x080a3282
 80a0320:	080a3299 	.word	0x080a3299
 80a0324:	080a32b0 	.word	0x080a32b0
 80a0328:	080a32c7 	.word	0x080a32c7
 80a032c:	080a32de 	.word	0x080a32de
 80a0330:	080a32f5 	.word	0x080a32f5
 80a0334:	080a330c 	.word	0x080a330c

080a0338 <setup>:

// Unconnected mode ON
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
 80a0338:	b530      	push	{r4, r5, lr}
 80a033a:	4d21      	ldr	r5, [pc, #132]	; (80a03c0 <setup+0x88>)
 80a033c:	b087      	sub	sp, #28
  // Particle setup
  Serial.begin(9600);
 80a033e:	f002 fc23 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0342:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0346:	f002 fc05 	bl	80a2b54 <_ZN9USBSerial5beginEl>
 80a034a:	7829      	ldrb	r1, [r5, #0]
 80a034c:	f3bf 8f5b 	dmb	ish
 80a0350:	f011 0401 	ands.w	r4, r1, #1
 80a0354:	d10d      	bne.n	80a0372 <setup+0x3a>
 80a0356:	4628      	mov	r0, r5
 80a0358:	f7ff feac 	bl	80a00b4 <__cxa_guard_acquire>
 80a035c:	b148      	cbz	r0, 80a0372 <setup+0x3a>
 80a035e:	4621      	mov	r1, r4
 80a0360:	4818      	ldr	r0, [pc, #96]	; (80a03c4 <setup+0x8c>)
 80a0362:	f002 fa14 	bl	80a278e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0366:	4628      	mov	r0, r5
 80a0368:	f7ff fea9 	bl	80a00be <__cxa_guard_release>
 80a036c:	4816      	ldr	r0, [pc, #88]	; (80a03c8 <setup+0x90>)
 80a036e:	f002 fe4f 	bl	80a3010 <atexit>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 80a0372:	2400      	movs	r4, #0

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
 80a0374:	4813      	ldr	r0, [pc, #76]	; (80a03c4 <setup+0x8c>)
 80a0376:	f002 fa19 	bl	80a27ac <_ZN8SPIClass5beginEv>
  SPI.begin();
  // Unconnected mode ON
  Particle.disconnect();
 80a037a:	a803      	add	r0, sp, #12
 80a037c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80a0380:	f8ad 4014 	strh.w	r4, [sp, #20]
 80a0384:	f002 f81d 	bl	80a23c2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0388:	4810      	ldr	r0, [pc, #64]	; (80a03cc <setup+0x94>)
 80a038a:	4623      	mov	r3, r4
 80a038c:	4622      	mov	r2, r4
 80a038e:	4621      	mov	r1, r4
 80a0390:	6840      	ldr	r0, [r0, #4]
 80a0392:	f001 ffb3 	bl	80a22fc <network_off>
  WiFi.off();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
 80a0396:	2301      	movs	r3, #1
 80a0398:	223c      	movs	r2, #60	; 0x3c
 80a039a:	9300      	str	r3, [sp, #0]
 80a039c:	2102      	movs	r1, #2
 80a039e:	480c      	ldr	r0, [pc, #48]	; (80a03d0 <setup+0x98>)
 80a03a0:	f000 fe1c 	bl	80a0fdc <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
 80a03a4:	480b      	ldr	r0, [pc, #44]	; (80a03d4 <setup+0x9c>)
 80a03a6:	f001 fa25 	bl	80a17f4 <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
 80a03aa:	22ff      	movs	r2, #255	; 0xff
 80a03ac:	4b0a      	ldr	r3, [pc, #40]	; (80a03d8 <setup+0xa0>)
 80a03ae:	701a      	strb	r2, [r3, #0]
 80a03b0:	705a      	strb	r2, [r3, #1]
 80a03b2:	709a      	strb	r2, [r3, #2]
 80a03b4:	70da      	strb	r2, [r3, #3]
 80a03b6:	711a      	strb	r2, [r3, #4]
 80a03b8:	715a      	strb	r2, [r3, #5]
  }
}
 80a03ba:	b007      	add	sp, #28
 80a03bc:	bd30      	pop	{r4, r5, pc}
 80a03be:	bf00      	nop
 80a03c0:	20000088 	.word	0x20000088
 80a03c4:	2000008c 	.word	0x2000008c
 80a03c8:	080a00c5 	.word	0x080a00c5
 80a03cc:	200005b8 	.word	0x200005b8
 80a03d0:	200000a4 	.word	0x200000a4
 80a03d4:	2000011b 	.word	0x2000011b
 80a03d8:	20000115 	.word	0x20000115

080a03dc <loop>:

void loop()
{
 80a03dc:	b510      	push	{r4, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
 80a03de:	481b      	ldr	r0, [pc, #108]	; (80a044c <loop+0x70>)
{
 80a03e0:	b086      	sub	sp, #24
  if (mfrc522.PICC_IsNewCardPresent())
 80a03e2:	f001 fb81 	bl	80a1ae8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a03e6:	b360      	cbz	r0, 80a0442 <loop+0x66>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
 80a03e8:	4818      	ldr	r0, [pc, #96]	; (80a044c <loop+0x70>)
 80a03ea:	f001 fcdb 	bl	80a1da4 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a03ee:	b358      	cbz	r0, 80a0448 <loop+0x6c>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
 80a03f0:	4c17      	ldr	r4, [pc, #92]	; (80a0450 <loop+0x74>)
 80a03f2:	4620      	mov	r0, r4
 80a03f4:	f000 fde4 	bl	80a0fc0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
 80a03f8:	2101      	movs	r1, #1
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	f000 fc25 	bl	80a0c4a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a0400:	2200      	movs	r2, #0
 80a0402:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    int infoTag[6];
    getTagID(infoTag);
 80a0406:	4668      	mov	r0, sp
 80a0408:	e9c4 2304 	strd	r2, r3, [r4, #16]
 80a040c:	f7ff feea 	bl	80a01e4 <_Z8getTagIDPi>

    Serial.println(infoTag[0] ? "Es Actuador" : "Es Sensor");
 80a0410:	f002 fbba 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a0414:	4a0f      	ldr	r2, [pc, #60]	; (80a0454 <loop+0x78>)
 80a0416:	4b10      	ldr	r3, [pc, #64]	; (80a0458 <loop+0x7c>)
 80a0418:	9900      	ldr	r1, [sp, #0]
 80a041a:	2900      	cmp	r1, #0
 80a041c:	bf14      	ite	ne
 80a041e:	4611      	movne	r1, r2
 80a0420:	4619      	moveq	r1, r3
 80a0422:	f002 f952 	bl	80a26ca <_ZN5Print7printlnEPKc>
    Serial.println(infoTag[1] ? "Es Digital" : "Es Analogico");
 80a0426:	f002 fbaf 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a042a:	9901      	ldr	r1, [sp, #4]
 80a042c:	4a0b      	ldr	r2, [pc, #44]	; (80a045c <loop+0x80>)
 80a042e:	4b0c      	ldr	r3, [pc, #48]	; (80a0460 <loop+0x84>)
 80a0430:	2900      	cmp	r1, #0
 80a0432:	bf14      	ite	ne
 80a0434:	4611      	movne	r1, r2
 80a0436:	4619      	moveq	r1, r3
 80a0438:	f002 f947 	bl	80a26ca <_ZN5Print7printlnEPKc>

    asignarPuerto(infoTag[1]);
 80a043c:	9801      	ldr	r0, [sp, #4]
 80a043e:	f7ff ff29 	bl	80a0294 <_Z13asignarPuertoi>
  // {
  //   activarActuador(actuador, infoVec[1], valor);
  // }

  // Mostramos la información que hayamos actualizado de la pantalla.
  display.display();
 80a0442:	4803      	ldr	r0, [pc, #12]	; (80a0450 <loop+0x74>)
 80a0444:	f001 f826 	bl	80a1494 <_ZN16Adafruit_SSD13067displayEv>

} // Fin loop
 80a0448:	b006      	add	sp, #24
 80a044a:	bd10      	pop	{r4, pc}
 80a044c:	2000011b 	.word	0x2000011b
 80a0450:	200000a4 	.word	0x200000a4
 80a0454:	080a3334 	.word	0x080a3334
 80a0458:	080a3340 	.word	0x080a3340
 80a045c:	080a334a 	.word	0x080a334a
 80a0460:	080a3355 	.word	0x080a3355

080a0464 <_GLOBAL__sub_I_trailerBlock>:
 80a0464:	b538      	push	{r3, r4, r5, lr}
String dispositivos[2] = {"-", "-"};
 80a0466:	4d11      	ldr	r5, [pc, #68]	; (80a04ac <_GLOBAL__sub_I_trailerBlock+0x48>)
 80a0468:	4c11      	ldr	r4, [pc, #68]	; (80a04b0 <_GLOBAL__sub_I_trailerBlock+0x4c>)
Adafruit_SSD1306 display(-1);
 80a046a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a046e:	4811      	ldr	r0, [pc, #68]	; (80a04b4 <_GLOBAL__sub_I_trailerBlock+0x50>)
 80a0470:	f000 fcba 	bl	80a0de8 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
 80a0474:	4629      	mov	r1, r5
 80a0476:	4620      	mov	r0, r4
 80a0478:	f002 fa75 	bl	80a2966 <_ZN6StringC1EPKc>
 80a047c:	4629      	mov	r1, r5
 80a047e:	f104 0010 	add.w	r0, r4, #16
 80a0482:	f002 fa70 	bl	80a2966 <_ZN6StringC1EPKc>
MFRC522 mfrc522(SS_PIN, RST_PIN);
 80a0486:	220f      	movs	r2, #15
 80a0488:	210d      	movs	r1, #13
 80a048a:	480b      	ldr	r0, [pc, #44]	; (80a04b8 <_GLOBAL__sub_I_trailerBlock+0x54>)
 80a048c:	f001 f8ba 	bl	80a1604 <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0490:	2200      	movs	r2, #0
 80a0492:	4b0a      	ldr	r3, [pc, #40]	; (80a04bc <_GLOBAL__sub_I_trailerBlock+0x58>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0494:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0496:	601a      	str	r2, [r3, #0]
 80a0498:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
 80a049a:	719a      	strb	r2, [r3, #6]
 80a049c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a04a0:	609a      	str	r2, [r3, #8]
 80a04a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        set_system_mode(mode);
 80a04a6:	f001 becd 	b.w	80a2244 <set_system_mode>
 80a04aa:	bf00      	nop
 80a04ac:	080a3362 	.word	0x080a3362
 80a04b0:	200000f4 	.word	0x200000f4
 80a04b4:	200000a4 	.word	0x200000a4
 80a04b8:	2000011b 	.word	0x2000011b
 80a04bc:	20000098 	.word	0x20000098

080a04c0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a04c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a04c4:	461f      	mov	r7, r3
 80a04c6:	b085      	sub	sp, #20
 80a04c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a04cc:	eba7 0a01 	sub.w	sl, r7, r1
 80a04d0:	eba8 0902 	sub.w	r9, r8, r2
 80a04d4:	f1b9 0f00 	cmp.w	r9, #0
 80a04d8:	bfb8      	it	lt
 80a04da:	f1c9 0900 	rsblt	r9, r9, #0
 80a04de:	f1ba 0f00 	cmp.w	sl, #0
 80a04e2:	bfb8      	it	lt
 80a04e4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 80a04e8:	45d1      	cmp	r9, sl
        uint16_t color) {
 80a04ea:	4683      	mov	fp, r0
 80a04ec:	460c      	mov	r4, r1
 80a04ee:	4616      	mov	r6, r2
 80a04f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 80a04f4:	dd04      	ble.n	80a0500 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 80a04f6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 80a04f8:	4634      	mov	r4, r6
        _swap_int16_t(x1, y1);
 80a04fa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 80a04fc:	460e      	mov	r6, r1
        _swap_int16_t(x1, y1);
 80a04fe:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 80a0500:	42bc      	cmp	r4, r7
 80a0502:	dd05      	ble.n	80a0510 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 80a0504:	4632      	mov	r2, r6
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 80a0506:	4646      	mov	r6, r8
 80a0508:	4690      	mov	r8, r2
    if (x0 > x1) {
 80a050a:	4622      	mov	r2, r4
 80a050c:	463c      	mov	r4, r7
 80a050e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0510:	1b3a      	subs	r2, r7, r4
 80a0512:	b291      	uxth	r1, r2
 80a0514:	9100      	str	r1, [sp, #0]
    dy = abs(y1 - y0);
 80a0516:	eba8 0106 	sub.w	r1, r8, r6
 80a051a:	2900      	cmp	r1, #0
 80a051c:	bfb8      	it	lt
 80a051e:	4249      	neglt	r1, r1

    int16_t err = dx / 2;
 80a0520:	f3c2 35c0 	ubfx	r5, r2, #15, #1
    dy = abs(y1 - y0);
 80a0524:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 80a0526:	b211      	sxth	r1, r2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0528:	4546      	cmp	r6, r8
 80a052a:	bfb4      	ite	lt
 80a052c:	2201      	movlt	r2, #1
 80a052e:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
 80a0532:	440d      	add	r5, r1
 80a0534:	106d      	asrs	r5, r5, #1
        ystep = -1;
 80a0536:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 80a0538:	42bc      	cmp	r4, r7
 80a053a:	dc1c      	bgt.n	80a0576 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
 80a053c:	f8db 2000 	ldr.w	r2, [fp]
 80a0540:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 80a0542:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80a0546:	bfc7      	ittee	gt
 80a0548:	4631      	movgt	r1, r6
 80a054a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 80a054c:	4632      	movle	r2, r6
 80a054e:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 80a0550:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 80a0552:	4658      	mov	r0, fp
 80a0554:	47c0      	blx	r8
        }
        err -= dy;
 80a0556:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 80a0558:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 80a055a:	1aad      	subs	r5, r5, r2
 80a055c:	b2a9      	uxth	r1, r5
 80a055e:	b22d      	sxth	r5, r5
        if (err < 0) {
 80a0560:	2d00      	cmp	r5, #0
 80a0562:	da05      	bge.n	80a0570 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
 80a0564:	9a02      	ldr	r2, [sp, #8]
 80a0566:	4416      	add	r6, r2
            err += dx;
 80a0568:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 80a056a:	b236      	sxth	r6, r6
            err += dx;
 80a056c:	1855      	adds	r5, r2, r1
 80a056e:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
 80a0570:	3401      	adds	r4, #1
 80a0572:	b224      	sxth	r4, r4
 80a0574:	e7e0      	b.n	80a0538 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
 80a0576:	b005      	add	sp, #20
 80a0578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a057c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 80a057c:	4770      	bx	lr

080a057e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 80a057e:	b410      	push	{r4}
    drawPixel(x, y, color);
 80a0580:	6804      	ldr	r4, [r0, #0]
 80a0582:	6924      	ldr	r4, [r4, #16]
 80a0584:	46a4      	mov	ip, r4
}
 80a0586:	bc10      	pop	{r4}
    drawPixel(x, y, color);
 80a0588:	4760      	bx	ip

080a058a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a058a:	b430      	push	{r4, r5}
 80a058c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0590:	6804      	ldr	r4, [r0, #0]
 80a0592:	9502      	str	r5, [sp, #8]
 80a0594:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a0596:	46a4      	mov	ip, r4
}
 80a0598:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 80a059a:	4760      	bx	ip

080a059c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a059c:	b430      	push	{r4, r5}
 80a059e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a05a2:	6804      	ldr	r4, [r0, #0]
 80a05a4:	9502      	str	r5, [sp, #8]
 80a05a6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a05a8:	46a4      	mov	ip, r4
}
 80a05aa:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 80a05ac:	4760      	bx	ip

080a05ae <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a05ae:	b470      	push	{r4, r5, r6}
 80a05b0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a05b4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a05b8:	6804      	ldr	r4, [r0, #0]
 80a05ba:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80a05be:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a05c0:	46a4      	mov	ip, r4
}
 80a05c2:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 80a05c4:	4760      	bx	ip

080a05c6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a05c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a05ca:	461c      	mov	r4, r3
 80a05cc:	4616      	mov	r6, r2
 80a05ce:	4605      	mov	r5, r0
 80a05d0:	460f      	mov	r7, r1
    startWrite();
 80a05d2:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 80a05d4:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 80a05d6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a05da:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 80a05dc:	4434      	add	r4, r6
    startWrite();
 80a05de:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 80a05e0:	b224      	sxth	r4, r4
 80a05e2:	682b      	ldr	r3, [r5, #0]
 80a05e4:	f8cd 8004 	str.w	r8, [sp, #4]
 80a05e8:	9400      	str	r4, [sp, #0]
 80a05ea:	4628      	mov	r0, r5
 80a05ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a05ee:	4632      	mov	r2, r6
 80a05f0:	463b      	mov	r3, r7
 80a05f2:	4639      	mov	r1, r7
 80a05f4:	47a0      	blx	r4
    endWrite();
 80a05f6:	4628      	mov	r0, r5
 80a05f8:	682b      	ldr	r3, [r5, #0]
 80a05fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a05fc:	b002      	add	sp, #8
 80a05fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a0602:	4718      	bx	r3

080a0604 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0608:	4617      	mov	r7, r2
 80a060a:	4604      	mov	r4, r0
 80a060c:	461d      	mov	r5, r3
 80a060e:	460e      	mov	r6, r1
    startWrite();
 80a0610:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 80a0612:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0616:	695b      	ldr	r3, [r3, #20]
 80a0618:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 80a061a:	e9cd 7800 	strd	r7, r8, [sp]
 80a061e:	6822      	ldr	r2, [r4, #0]
 80a0620:	1e6b      	subs	r3, r5, #1
 80a0622:	4433      	add	r3, r6
 80a0624:	4620      	mov	r0, r4
 80a0626:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a0628:	4631      	mov	r1, r6
 80a062a:	463a      	mov	r2, r7
 80a062c:	b21b      	sxth	r3, r3
 80a062e:	47a8      	blx	r5
    endWrite();
 80a0630:	4620      	mov	r0, r4
 80a0632:	6823      	ldr	r3, [r4, #0]
 80a0634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0636:	b002      	add	sp, #8
 80a0638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a063c:	4718      	bx	r3

080a063e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a063e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0642:	461e      	mov	r6, r3
    startWrite();
 80a0644:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a0646:	460c      	mov	r4, r1
    startWrite();
 80a0648:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a064a:	4605      	mov	r5, r0
 80a064c:	4617      	mov	r7, r2
 80a064e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0652:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    startWrite();
 80a0656:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 80a0658:	4426      	add	r6, r4
 80a065a:	42b4      	cmp	r4, r6
 80a065c:	682b      	ldr	r3, [r5, #0]
 80a065e:	da0b      	bge.n	80a0678 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 80a0660:	f8cd 9000 	str.w	r9, [sp]
 80a0664:	4621      	mov	r1, r4
 80a0666:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a066a:	463a      	mov	r2, r7
 80a066c:	4643      	mov	r3, r8
 80a066e:	4628      	mov	r0, r5
 80a0670:	3401      	adds	r4, #1
 80a0672:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 80a0674:	b224      	sxth	r4, r4
 80a0676:	e7f0      	b.n	80a065a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 80a0678:	4628      	mov	r0, r5
 80a067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a067c:	b002      	add	sp, #8
 80a067e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a0682:	4718      	bx	r3

080a0684 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0684:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 80a0686:	9101      	str	r1, [sp, #4]
 80a0688:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a068c:	6802      	ldr	r2, [r0, #0]
 80a068e:	9100      	str	r1, [sp, #0]
 80a0690:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80a0692:	2200      	movs	r2, #0
 80a0694:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0698:	4611      	mov	r1, r2
 80a069a:	47a0      	blx	r4
}
 80a069c:	b002      	add	sp, #8
 80a069e:	bd10      	pop	{r4, pc}

080a06a0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a06a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a06a4:	4604      	mov	r4, r0
 80a06a6:	460f      	mov	r7, r1
 80a06a8:	4616      	mov	r6, r2
 80a06aa:	461d      	mov	r5, r3
    startWrite();
 80a06ac:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a06ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 80a06b2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a06b4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 80a06b8:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 80a06ba:	6823      	ldr	r3, [r4, #0]
 80a06bc:	f8cd 8000 	str.w	r8, [sp]
 80a06c0:	4632      	mov	r2, r6
 80a06c2:	4639      	mov	r1, r7
 80a06c4:	4620      	mov	r0, r4
 80a06c6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a06ca:	462b      	mov	r3, r5
 80a06cc:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 80a06ce:	6823      	ldr	r3, [r4, #0]
 80a06d0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80a06d4:	f8cd 8000 	str.w	r8, [sp]
 80a06d8:	4432      	add	r2, r6
 80a06da:	4639      	mov	r1, r7
 80a06dc:	4620      	mov	r0, r4
 80a06de:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a06e2:	b212      	sxth	r2, r2
 80a06e4:	462b      	mov	r3, r5
 80a06e6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 80a06e8:	6823      	ldr	r3, [r4, #0]
 80a06ea:	f8cd 8000 	str.w	r8, [sp]
 80a06ee:	4632      	mov	r2, r6
 80a06f0:	4639      	mov	r1, r7
 80a06f2:	4620      	mov	r0, r4
 80a06f4:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a06f8:	464b      	mov	r3, r9
 80a06fa:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 80a06fc:	3d01      	subs	r5, #1
 80a06fe:	6823      	ldr	r3, [r4, #0]
 80a0700:	19e9      	adds	r1, r5, r7
 80a0702:	f8cd 8000 	str.w	r8, [sp]
 80a0706:	4620      	mov	r0, r4
 80a0708:	6a1d      	ldr	r5, [r3, #32]
 80a070a:	4632      	mov	r2, r6
 80a070c:	464b      	mov	r3, r9
 80a070e:	b209      	sxth	r1, r1
 80a0710:	47a8      	blx	r5
    endWrite();
 80a0712:	4620      	mov	r0, r4
 80a0714:	6823      	ldr	r3, [r4, #0]
 80a0716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0718:	b002      	add	sp, #8
 80a071a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a071e:	4718      	bx	r3

080a0720 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 80a0720:	4770      	bx	lr

080a0722 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
 80a0722:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
 80a0726:	4299      	cmp	r1, r3
        uint16_t color) {
 80a0728:	4616      	mov	r6, r2
 80a072a:	4680      	mov	r8, r0
 80a072c:	460d      	mov	r5, r1
 80a072e:	461c      	mov	r4, r3
 80a0730:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80a0734:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a0738:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 80a073a:	d112      	bne.n	80a0762 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80a073c:	42be      	cmp	r6, r7
 80a073e:	bfc2      	ittt	gt
 80a0740:	4633      	movgt	r3, r6
 80a0742:	463e      	movgt	r6, r7
 80a0744:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a0746:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a074a:	1c7b      	adds	r3, r7, #1
 80a074c:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a074e:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0750:	4632      	mov	r2, r6
 80a0752:	4629      	mov	r1, r5
 80a0754:	4640      	mov	r0, r8
 80a0756:	46a4      	mov	ip, r4
 80a0758:	b21b      	sxth	r3, r3
}
 80a075a:	b003      	add	sp, #12
 80a075c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0760:	4760      	bx	ip
    } else if(y0 == y1){
 80a0762:	42be      	cmp	r6, r7
 80a0764:	d10a      	bne.n	80a077c <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80a0766:	4299      	cmp	r1, r3
 80a0768:	bfc2      	ittt	gt
 80a076a:	460b      	movgt	r3, r1
 80a076c:	4625      	movgt	r5, r4
 80a076e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0770:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a0774:	1c63      	adds	r3, r4, #1
 80a0776:	1b5b      	subs	r3, r3, r5
 80a0778:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a077a:	e7e9      	b.n	80a0750 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 80a077c:	6953      	ldr	r3, [r2, #20]
 80a077e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 80a0780:	e9cd 7900 	strd	r7, r9, [sp]
 80a0784:	f8d8 3000 	ldr.w	r3, [r8]
 80a0788:	4640      	mov	r0, r8
 80a078a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a078c:	4632      	mov	r2, r6
 80a078e:	4623      	mov	r3, r4
 80a0790:	4629      	mov	r1, r5
 80a0792:	47b8      	blx	r7
        endWrite();
 80a0794:	4640      	mov	r0, r8
 80a0796:	f8d8 3000 	ldr.w	r3, [r8]
 80a079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a079c:	b003      	add	sp, #12
 80a079e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 80a07a2:	4718      	bx	r3

080a07a4 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 80a07a4:	f001 0303 	and.w	r3, r1, #3
 80a07a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80a07ac:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
 80a07ae:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a07b2:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 80a07b4:	bf59      	ittee	pl
 80a07b6:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 80a07b8:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 80a07ba:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 80a07bc:	81c3      	strhmi	r3, [r0, #14]
}
 80a07be:	4770      	bx	lr

080a07c0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a07c0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 80a07c2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 80a07c4:	2400      	movs	r4, #0
    _width    = WIDTH;
 80a07c6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 80a07c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 80a07cc:	4d05      	ldr	r5, [pc, #20]	; (80a07e4 <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a07ce:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 80a07d0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 80a07d2:	4a05      	ldr	r2, [pc, #20]	; (80a07e8 <_ZN12Adafruit_GFXC1Ess+0x28>)
 80a07d4:	6044      	str	r4, [r0, #4]
 80a07d6:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 80a07da:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 80a07dc:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 80a07de:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 80a07e0:	6204      	str	r4, [r0, #32]
}
 80a07e2:	bd30      	pop	{r4, r5, pc}
 80a07e4:	080a386c 	.word	0x080a386c
 80a07e8:	01000101 	.word	0x01000101

080a07ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a07ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startWrite();
 80a07f0:	2600      	movs	r6, #0
    uint8_t byte = 0;
 80a07f2:	4635      	mov	r5, r6
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a07f4:	b089      	sub	sp, #36	; 0x24
 80a07f6:	9304      	str	r3, [sp, #16]
 80a07f8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a07fc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80a0800:	9305      	str	r3, [sp, #20]
    startWrite();
 80a0802:	6803      	ldr	r3, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a0804:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
 80a0808:	695b      	ldr	r3, [r3, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a080a:	4604      	mov	r4, r0
 80a080c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    startWrite();
 80a0810:	4798      	blx	r3
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80a0812:	f118 0307 	adds.w	r3, r8, #7
 80a0816:	bf48      	it	mi
 80a0818:	f108 030e 	addmi.w	r3, r8, #14
 80a081c:	ea4f 0be3 	mov.w	fp, r3, asr #3
    startWrite();
 80a0820:	9601      	str	r6, [sp, #4]
 80a0822:	9b03      	ldr	r3, [sp, #12]
 80a0824:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
 80a0826:	9905      	ldr	r1, [sp, #20]
 80a0828:	189a      	adds	r2, r3, r2
 80a082a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80a082e:	b212      	sxth	r2, r2
 80a0830:	4299      	cmp	r1, r3
 80a0832:	dd27      	ble.n	80a0884 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 80a0834:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a0838:	9b04      	ldr	r3, [sp, #16]
 80a083a:	4433      	add	r3, r6
 80a083c:	9306      	str	r3, [sp, #24]
 80a083e:	fa0f f389 	sxth.w	r3, r9
        for(int16_t i=0; i<w; i++) {
 80a0842:	4598      	cmp	r8, r3
 80a0844:	fa1f f189 	uxth.w	r1, r9
 80a0848:	dd17      	ble.n	80a087a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
            if(i & 7) byte <<= 1;
 80a084a:	0748      	lsls	r0, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a084c:	bf05      	ittet	eq
 80a084e:	9806      	ldreq	r0, [sp, #24]
 80a0850:	10db      	asreq	r3, r3, #3
            if(i & 7) byte <<= 1;
 80a0852:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a0854:	5cc5      	ldrbeq	r5, [r0, r3]
            if(i & 7) byte <<= 1;
 80a0856:	bf18      	it	ne
 80a0858:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
 80a085a:	062b      	lsls	r3, r5, #24
 80a085c:	d50a      	bpl.n	80a0874 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
 80a085e:	9b02      	ldr	r3, [sp, #8]
 80a0860:	9207      	str	r2, [sp, #28]
 80a0862:	4419      	add	r1, r3
 80a0864:	6823      	ldr	r3, [r4, #0]
 80a0866:	4620      	mov	r0, r4
 80a0868:	699b      	ldr	r3, [r3, #24]
 80a086a:	b209      	sxth	r1, r1
 80a086c:	461f      	mov	r7, r3
 80a086e:	4653      	mov	r3, sl
 80a0870:	47b8      	blx	r7
 80a0872:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
 80a0874:	f109 0901 	add.w	r9, r9, #1
 80a0878:	e7e1      	b.n	80a083e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
    for(int16_t j=0; j<h; j++, y++) {
 80a087a:	9b01      	ldr	r3, [sp, #4]
 80a087c:	445e      	add	r6, fp
 80a087e:	3301      	adds	r3, #1
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	e7ce      	b.n	80a0822 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
    endWrite();
 80a0884:	4620      	mov	r0, r4
 80a0886:	6823      	ldr	r3, [r4, #0]
 80a0888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a088a:	b009      	add	sp, #36	; 0x24
 80a088c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 80a0890:	4718      	bx	r3
	...

080a0894 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a0894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0898:	b091      	sub	sp, #68	; 0x44
 80a089a:	4617      	mov	r7, r2
 80a089c:	461e      	mov	r6, r3
    if(!gfxFont) { // 'Classic' built-in font
 80a089e:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a08a0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a08a4:	4682      	mov	sl, r0
 80a08a6:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 80a08aa:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 80a08ae:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80a08b2:	9105      	str	r1, [sp, #20]
 80a08b4:	9302      	str	r3, [sp, #8]
    if(!gfxFont) { // 'Classic' built-in font
 80a08b6:	2a00      	cmp	r2, #0
 80a08b8:	f040 80b9 	bne.w	80a0a2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x19a>
        if((x >= _width)            || // Clip right
 80a08bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a08c0:	428b      	cmp	r3, r1
 80a08c2:	f340 813c 	ble.w	80a0b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
 80a08c6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a08ca:	42bb      	cmp	r3, r7
 80a08cc:	f340 8137 	ble.w	80a0b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a08d0:	2306      	movs	r3, #6
 80a08d2:	fb03 1305 	mla	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 80a08d6:	2b00      	cmp	r3, #0
 80a08d8:	f340 8131 	ble.w	80a0b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 80a08dc:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a08e0:	2b00      	cmp	r3, #0
 80a08e2:	f340 812c 	ble.w	80a0b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a08e6:	7f03      	ldrb	r3, [r0, #28]
 80a08e8:	b91b      	cbnz	r3, 80a08f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x5e>
 80a08ea:	2eaf      	cmp	r6, #175	; 0xaf
 80a08ec:	bf84      	itt	hi
 80a08ee:	3601      	addhi	r6, #1
 80a08f0:	b2f6      	uxtbhi	r6, r6
        startWrite();
 80a08f2:	f8da 3000 	ldr.w	r3, [sl]
 80a08f6:	4650      	mov	r0, sl
 80a08f8:	695b      	ldr	r3, [r3, #20]
 80a08fa:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a08fc:	2305      	movs	r3, #5
 80a08fe:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a0900:	2300      	movs	r3, #0
 80a0902:	9304      	str	r3, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a0904:	4b8f      	ldr	r3, [pc, #572]	; (80a0b44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a0906:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80a090a:	4433      	add	r3, r6
 80a090c:	930c      	str	r3, [sp, #48]	; 0x30
 80a090e:	b2bb      	uxth	r3, r7
 80a0910:	9306      	str	r3, [sp, #24]
 80a0912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0914:	9a04      	ldr	r2, [sp, #16]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a0916:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a091a:	5c9b      	ldrb	r3, [r3, r2]
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a091c:	f04f 0900 	mov.w	r9, #0
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a0920:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a0922:	b2ab      	uxth	r3, r5
 80a0924:	930b      	str	r3, [sp, #44]	; 0x2c
 80a0926:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a092a:	9303      	str	r3, [sp, #12]
 80a092c:	fb05 3306 	mla	r3, r5, r6, r3
 80a0930:	b21b      	sxth	r3, r3
 80a0932:	9308      	str	r3, [sp, #32]
 80a0934:	2308      	movs	r3, #8
 80a0936:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 80a0938:	9b03      	ldr	r3, [sp, #12]
 80a093a:	441e      	add	r6, r3
 80a093c:	b236      	sxth	r6, r6
                if(line & 1) {
 80a093e:	9a07      	ldr	r2, [sp, #28]
 80a0940:	f8da 3000 	ldr.w	r3, [sl]
 80a0944:	07d2      	lsls	r2, r2, #31
 80a0946:	d54d      	bpl.n	80a09e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x150>
                    if(size_x == 1 && size_y == 1)
 80a0948:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 80a094a:	9906      	ldr	r1, [sp, #24]
 80a094c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a0950:	d13b      	bne.n	80a09ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
 80a0952:	2c01      	cmp	r4, #1
 80a0954:	d139      	bne.n	80a09ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
                        writePixel(x+i, y+j, color);
 80a0956:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a095a:	9b02      	ldr	r3, [sp, #8]
 80a095c:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 80a095e:	4631      	mov	r1, r6
 80a0960:	4650      	mov	r0, sl
 80a0962:	b212      	sxth	r2, r2
 80a0964:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a0966:	9b07      	ldr	r3, [sp, #28]
 80a0968:	f109 0901 	add.w	r9, r9, #1
 80a096c:	085b      	lsrs	r3, r3, #1
 80a096e:	9307      	str	r3, [sp, #28]
 80a0970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0972:	fa4f f989 	sxtb.w	r9, r9
 80a0976:	3b01      	subs	r3, #1
 80a0978:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a097c:	930a      	str	r3, [sp, #40]	; 0x28
 80a097e:	d1de      	bne.n	80a093e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xaa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a0980:	9b04      	ldr	r3, [sp, #16]
 80a0982:	3301      	adds	r3, #1
 80a0984:	b25b      	sxtb	r3, r3
 80a0986:	9304      	str	r3, [sp, #16]
 80a0988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a098a:	3b01      	subs	r3, #1
 80a098c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0990:	9309      	str	r3, [sp, #36]	; 0x24
 80a0992:	d1be      	bne.n	80a0912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x7e>
        if(bg != color) { // If opaque, draw vertical line for last column
 80a0994:	9b02      	ldr	r3, [sp, #8]
 80a0996:	4543      	cmp	r3, r8
 80a0998:	d00f      	beq.n	80a09ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80a099a:	2d01      	cmp	r5, #1
 80a099c:	f8da 3000 	ldr.w	r3, [sl]
 80a09a0:	d134      	bne.n	80a0a0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a09a2:	2c01      	cmp	r4, #1
 80a09a4:	d132      	bne.n	80a0a0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a09a6:	9903      	ldr	r1, [sp, #12]
 80a09a8:	f8cd 8000 	str.w	r8, [sp]
 80a09ac:	3105      	adds	r1, #5
 80a09ae:	6a1c      	ldr	r4, [r3, #32]
 80a09b0:	463a      	mov	r2, r7
 80a09b2:	2308      	movs	r3, #8
 80a09b4:	4650      	mov	r0, sl
 80a09b6:	b209      	sxth	r1, r1
 80a09b8:	47a0      	blx	r4
        endWrite();
 80a09ba:	4650      	mov	r0, sl
 80a09bc:	f8da 3000 	ldr.w	r3, [sl]
 80a09c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a09c2:	b011      	add	sp, #68	; 0x44
 80a09c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 80a09c8:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a09ca:	fb04 1202 	mla	r2, r4, r2, r1
 80a09ce:	9902      	ldr	r1, [sp, #8]
 80a09d0:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a09d2:	9400      	str	r4, [sp, #0]
 80a09d4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a09d8:	4650      	mov	r0, sl
 80a09da:	462b      	mov	r3, r5
 80a09dc:	9908      	ldr	r1, [sp, #32]
 80a09de:	b212      	sxth	r2, r2
 80a09e0:	47d8      	blx	fp
 80a09e2:	e7c0      	b.n	80a0966 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                } else if(bg != color) {
 80a09e4:	9a02      	ldr	r2, [sp, #8]
 80a09e6:	4542      	cmp	r2, r8
 80a09e8:	d0bd      	beq.n	80a0966 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                    if(size_x == 1 && size_y == 1)
 80a09ea:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, bg);
 80a09ec:	9906      	ldr	r1, [sp, #24]
 80a09ee:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a09f2:	d106      	bne.n	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a09f4:	2c01      	cmp	r4, #1
 80a09f6:	d104      	bne.n	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
                        writePixel(x+i, y+j, bg);
 80a09f8:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a09fc:	440a      	add	r2, r1
 80a09fe:	4643      	mov	r3, r8
 80a0a00:	e7ad      	b.n	80a095e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xca>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a0a02:	fb04 1202 	mla	r2, r4, r2, r1
 80a0a06:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0a0a:	e7e2      	b.n	80a09d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13e>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80a0a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0a0e:	00e4      	lsls	r4, r4, #3
 80a0a10:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a0a14:	9a03      	ldr	r2, [sp, #12]
 80a0a16:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0a1a:	440a      	add	r2, r1
 80a0a1c:	4611      	mov	r1, r2
 80a0a1e:	9400      	str	r4, [sp, #0]
 80a0a20:	69dc      	ldr	r4, [r3, #28]
 80a0a22:	463a      	mov	r2, r7
 80a0a24:	462b      	mov	r3, r5
 80a0a26:	4650      	mov	r0, sl
 80a0a28:	b209      	sxth	r1, r1
 80a0a2a:	47a0      	blx	r4
        endWrite();
 80a0a2c:	e7c5      	b.n	80a09ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a0a2e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 80a0a30:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a0a32:	1af6      	subs	r6, r6, r3
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a0a34:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 80a0a36:	b2f6      	uxtb	r6, r6
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a0a38:	920e      	str	r2, [sp, #56]	; 0x38
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a0a3a:	f831 2036 	ldrh.w	r2, [r1, r6, lsl #3]
    return gfxFont->glyph + c;
 80a0a3e:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a0a42:	9204      	str	r2, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a0a44:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 80a0a46:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a0a48:	9208      	str	r2, [sp, #32]
                 h  = pgm_read_byte(&glyph->height);
 80a0a4a:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 80a0a4c:	f993 b006 	ldrsb.w	fp, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 80a0a50:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a0a52:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a0a56:	9209      	str	r2, [sp, #36]	; 0x24
        if(size_x > 1 || size_y > 1) {
 80a0a58:	d801      	bhi.n	80a0a5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ca>
 80a0a5a:	2c01      	cmp	r4, #1
 80a0a5c:	d953      	bls.n	80a0b06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x272>
            xo16 = xo;
 80a0a5e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80a0a62:	9307      	str	r3, [sp, #28]
            yo16 = yo;
 80a0a64:	fa0f f38b 	sxth.w	r3, fp
 80a0a68:	9306      	str	r3, [sp, #24]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80a0a6a:	f04f 0800 	mov.w	r8, #0
 80a0a6e:	46c1      	mov	r9, r8
        startWrite();
 80a0a70:	f8da 3000 	ldr.w	r3, [sl]
 80a0a74:	4650      	mov	r0, sl
 80a0a76:	695b      	ldr	r3, [r3, #20]
 80a0a78:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0a7a:	b2bb      	uxth	r3, r7
 80a0a7c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0a7e:	445b      	add	r3, fp
        for(yy=0; yy<h; yy++) {
 80a0a80:	f8cd 800c 	str.w	r8, [sp, #12]
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0a84:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 80a0a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0a88:	9a03      	ldr	r2, [sp, #12]
 80a0a8a:	429a      	cmp	r2, r3
 80a0a8c:	d295      	bcs.n	80a09ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0a8e:	9b06      	ldr	r3, [sp, #24]
            for(xx=0; xx<w; xx++) {
 80a0a90:	2700      	movs	r7, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0a92:	4413      	add	r3, r2
 80a0a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0a96:	9903      	ldr	r1, [sp, #12]
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0a98:	fb03 2304 	mla	r3, r3, r4, r2
 80a0a9c:	b21b      	sxth	r3, r3
 80a0a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 80a0aa0:	4643      	mov	r3, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a0aa4:	eb02 0b01 	add.w	fp, r2, r1
 80a0aa8:	fa0f fb8b 	sxth.w	fp, fp
            for(xx=0; xx<w; xx++) {
 80a0aac:	9a08      	ldr	r2, [sp, #32]
 80a0aae:	4297      	cmp	r7, r2
 80a0ab0:	d23c      	bcs.n	80a0b2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x298>
                if(!(bit++ & 7)) {
 80a0ab2:	1c5a      	adds	r2, r3, #1
 80a0ab4:	b2d2      	uxtb	r2, r2
 80a0ab6:	075b      	lsls	r3, r3, #29
 80a0ab8:	920d      	str	r2, [sp, #52]	; 0x34
 80a0aba:	d107      	bne.n	80a0acc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x238>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80a0abc:	9b04      	ldr	r3, [sp, #16]
 80a0abe:	9904      	ldr	r1, [sp, #16]
 80a0ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0ac2:	3301      	adds	r3, #1
 80a0ac4:	b29b      	uxth	r3, r3
 80a0ac6:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a0aca:	9304      	str	r3, [sp, #16]
                if(bits & 0x80) {
 80a0acc:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a0ad0:	d011      	beq.n	80a0af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
                    if(size_x == 1 && size_y == 1) {
 80a0ad2:	2d01      	cmp	r5, #1
 80a0ad4:	f8da 3000 	ldr.w	r3, [sl]
 80a0ad8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a0adc:	d117      	bne.n	80a0b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
 80a0ade:	2c01      	cmp	r4, #1
 80a0ae0:	d115      	bne.n	80a0b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0ae4:	699b      	ldr	r3, [r3, #24]
 80a0ae6:	4411      	add	r1, r2
 80a0ae8:	4439      	add	r1, r7
 80a0aea:	461e      	mov	r6, r3
 80a0aec:	465a      	mov	r2, fp
 80a0aee:	4650      	mov	r0, sl
 80a0af0:	9b02      	ldr	r3, [sp, #8]
 80a0af2:	b209      	sxth	r1, r1
 80a0af4:	47b0      	blx	r6
                bits <<= 1;
 80a0af6:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 80a0afa:	3701      	adds	r7, #1
                if(!(bit++ & 7)) {
 80a0afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                bits <<= 1;
 80a0afe:	fa5f f989 	uxtb.w	r9, r9
            for(xx=0; xx<w; xx++) {
 80a0b02:	b2ff      	uxtb	r7, r7
 80a0b04:	e7d2      	b.n	80a0aac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        int16_t  xo16 = 0, yo16 = 0;
 80a0b06:	2300      	movs	r3, #0
 80a0b08:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80a0b0c:	e7ad      	b.n	80a0a6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d6>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0b0e:	9a07      	ldr	r2, [sp, #28]
 80a0b10:	4650      	mov	r0, sl
 80a0b12:	443a      	add	r2, r7
 80a0b14:	fb02 1105 	mla	r1, r2, r5, r1
 80a0b18:	9a02      	ldr	r2, [sp, #8]
 80a0b1a:	b209      	sxth	r1, r1
 80a0b1c:	e9cd 4200 	strd	r4, r2, [sp]
 80a0b20:	69db      	ldr	r3, [r3, #28]
 80a0b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0b24:	461e      	mov	r6, r3
 80a0b26:	462b      	mov	r3, r5
 80a0b28:	47b0      	blx	r6
 80a0b2a:	e7e4      	b.n	80a0af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
        for(yy=0; yy<h; yy++) {
 80a0b2c:	9e03      	ldr	r6, [sp, #12]
 80a0b2e:	9b08      	ldr	r3, [sp, #32]
 80a0b30:	3601      	adds	r6, #1
 80a0b32:	4498      	add	r8, r3
 80a0b34:	b2f3      	uxtb	r3, r6
 80a0b36:	fa5f f888 	uxtb.w	r8, r8
 80a0b3a:	9303      	str	r3, [sp, #12]
 80a0b3c:	e7a3      	b.n	80a0a86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
}
 80a0b3e:	b011      	add	sp, #68	; 0x44
 80a0b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b44:	080a3364 	.word	0x080a3364

080a0b48 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a0b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 80a0b4a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 80a0b4c:	4604      	mov	r4, r0
 80a0b4e:	460b      	mov	r3, r1
 80a0b50:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 80a0b52:	2a00      	cmp	r2, #0
 80a0b54:	d134      	bne.n	80a0bc0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 80a0b56:	290a      	cmp	r1, #10
 80a0b58:	d108      	bne.n	80a0b6c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 80a0b5a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 80a0b5c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 80a0b5e:	7e42      	ldrb	r2, [r0, #25]
 80a0b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 80a0b64:	8263      	strh	r3, [r4, #18]
}
 80a0b66:	2001      	movs	r0, #1
 80a0b68:	b005      	add	sp, #20
 80a0b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 80a0b6c:	290d      	cmp	r1, #13
 80a0b6e:	d0fa      	beq.n	80a0b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a0b70:	7ee1      	ldrb	r1, [r4, #27]
 80a0b72:	7e00      	ldrb	r0, [r0, #24]
 80a0b74:	7e65      	ldrb	r5, [r4, #25]
 80a0b76:	b171      	cbz	r1, 80a0b96 <_ZN12Adafruit_GFX5writeEh+0x4e>
 80a0b78:	2106      	movs	r1, #6
 80a0b7a:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a0b7e:	fb01 6100 	mla	r1, r1, r0, r6
 80a0b82:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a0b86:	42b1      	cmp	r1, r6
 80a0b88:	bfc1      	itttt	gt
 80a0b8a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 80a0b8e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 80a0b90:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 80a0b94:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a0b96:	8ae2      	ldrh	r2, [r4, #22]
 80a0b98:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80a0b9c:	9201      	str	r2, [sp, #4]
 80a0b9e:	8aa2      	ldrh	r2, [r4, #20]
 80a0ba0:	4620      	mov	r0, r4
 80a0ba2:	9200      	str	r2, [sp, #0]
 80a0ba4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0ba8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0bac:	f7ff fe72 	bl	80a0894 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 80a0bb0:	7e23      	ldrb	r3, [r4, #24]
 80a0bb2:	8a22      	ldrh	r2, [r4, #16]
 80a0bb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0bb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a0bbc:	8223      	strh	r3, [r4, #16]
 80a0bbe:	e7d2      	b.n	80a0b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 80a0bc0:	290a      	cmp	r1, #10
 80a0bc2:	d107      	bne.n	80a0bd4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 80a0bc4:	2300      	movs	r3, #0
 80a0bc6:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a0bc8:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 80a0bca:	7e41      	ldrb	r1, [r0, #25]
 80a0bcc:	8a42      	ldrh	r2, [r0, #18]
 80a0bce:	fb01 2303 	mla	r3, r1, r3, r2
 80a0bd2:	e7c7      	b.n	80a0b64 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 80a0bd4:	290d      	cmp	r1, #13
 80a0bd6:	d0c6      	beq.n	80a0b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80a0bd8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a0bda:	42a9      	cmp	r1, r5
 80a0bdc:	d3c3      	bcc.n	80a0b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
 80a0bde:	7a51      	ldrb	r1, [r2, #9]
 80a0be0:	4299      	cmp	r1, r3
 80a0be2:	d3c0      	bcc.n	80a0b66 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 80a0be4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 80a0be6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 80a0be8:	b2ed      	uxtb	r5, r5
 80a0bea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80a0bee:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a0bf0:	b32f      	cbz	r7, 80a0c3e <_ZN12Adafruit_GFX5writeEh+0xf6>
 80a0bf2:	78e9      	ldrb	r1, [r5, #3]
 80a0bf4:	b319      	cbz	r1, 80a0c3e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a0bf6:	7ee1      	ldrb	r1, [r4, #27]
 80a0bf8:	7e00      	ldrb	r0, [r0, #24]
 80a0bfa:	7e66      	ldrb	r6, [r4, #25]
 80a0bfc:	b191      	cbz	r1, 80a0c24 <_ZN12Adafruit_GFX5writeEh+0xdc>
 80a0bfe:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80a0c02:	4439      	add	r1, r7
 80a0c04:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a0c08:	fb00 7101 	mla	r1, r0, r1, r7
 80a0c0c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a0c10:	42b9      	cmp	r1, r7
 80a0c12:	dd07      	ble.n	80a0c24 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 80a0c14:	2700      	movs	r7, #0
 80a0c16:	8227      	strh	r7, [r4, #16]
 80a0c18:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a0c1c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 80a0c1e:	fb02 1206 	mla	r2, r2, r6, r1
 80a0c22:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a0c24:	8ae2      	ldrh	r2, [r4, #22]
 80a0c26:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80a0c2a:	9201      	str	r2, [sp, #4]
 80a0c2c:	8aa2      	ldrh	r2, [r4, #20]
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	9200      	str	r2, [sp, #0]
 80a0c32:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0c36:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0c3a:	f7ff fe2b 	bl	80a0894 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a0c3e:	7929      	ldrb	r1, [r5, #4]
 80a0c40:	7e23      	ldrb	r3, [r4, #24]
 80a0c42:	8a22      	ldrh	r2, [r4, #16]
 80a0c44:	fb01 2303 	mla	r3, r1, r3, r2
 80a0c48:	e7b8      	b.n	80a0bbc <_ZN12Adafruit_GFX5writeEh+0x74>

080a0c4a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 80a0c4a:	2901      	cmp	r1, #1
 80a0c4c:	bf38      	it	cc
 80a0c4e:	2101      	movcc	r1, #1
 80a0c50:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 80a0c52:	7641      	strb	r1, [r0, #25]
}
 80a0c54:	4770      	bx	lr

080a0c56 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a0c56:	4770      	bx	lr

080a0c58 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a0c58:	b510      	push	{r4, lr}
 80a0c5a:	4604      	mov	r4, r0
  }
 80a0c5c:	2110      	movs	r1, #16
 80a0c5e:	f002 f9d3 	bl	80a3008 <_ZdlPvj>
 80a0c62:	4620      	mov	r0, r4
 80a0c64:	bd10      	pop	{r4, pc}
	...

080a0c68 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a0c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0c6a:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 80a0c6c:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a0c6e:	4608      	mov	r0, r1
 80a0c70:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a0c72:	b132      	cbz	r2, 80a0c82 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a0c74:	b9a3      	cbnz	r3, 80a0ca0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a0c76:	490b      	ldr	r1, [pc, #44]	; (80a0ca4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 80a0c78:	b002      	add	sp, #8
 80a0c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0c7e:	f001 bd11 	b.w	80a26a4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0c82:	4a09      	ldr	r2, [pc, #36]	; (80a0ca8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a0c84:	7b26      	ldrb	r6, [r4, #12]
 80a0c86:	4d09      	ldr	r5, [pc, #36]	; (80a0cac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a0c88:	4909      	ldr	r1, [pc, #36]	; (80a0cb0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a0c8a:	7b64      	ldrb	r4, [r4, #13]
 80a0c8c:	2e01      	cmp	r6, #1
 80a0c8e:	bf18      	it	ne
 80a0c90:	4629      	movne	r1, r5
 80a0c92:	e9cd 1400 	strd	r1, r4, [sp]
 80a0c96:	4907      	ldr	r1, [pc, #28]	; (80a0cb4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a0c98:	f7ff fa1c 	bl	80a00d4 <_ZN5Print6printfEPKcz>
  }
 80a0c9c:	b002      	add	sp, #8
 80a0c9e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0ca0:	4a05      	ldr	r2, [pc, #20]	; (80a0cb8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a0ca2:	e7ef      	b.n	80a0c84 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a0ca4:	080a38cd 	.word	0x080a38cd
 80a0ca8:	080a3281 	.word	0x080a3281
 80a0cac:	080a38c9 	.word	0x080a38c9
 80a0cb0:	080a38c5 	.word	0x080a38c5
 80a0cb4:	080a38e3 	.word	0x080a38e3
 80a0cb8:	080a38bc 	.word	0x080a38bc

080a0cbc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a0cbc:	b510      	push	{r4, lr}
 80a0cbe:	4b04      	ldr	r3, [pc, #16]	; (80a0cd0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 80a0cc0:	4604      	mov	r4, r0
 80a0cc2:	6003      	str	r3, [r0, #0]
  if(buffer) {
 80a0cc4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0cc6:	b108      	cbz	r0, 80a0ccc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 80a0cc8:	f001 fb58 	bl	80a237c <free>
    buffer = NULL;
  }
}
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	bd10      	pop	{r4, pc}
 80a0cd0:	080a3efc 	.word	0x080a3efc

080a0cd4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a0cd4:	b510      	push	{r4, lr}
 80a0cd6:	4604      	mov	r4, r0
}
 80a0cd8:	f7ff fff0 	bl	80a0cbc <_ZN16Adafruit_SSD1306D1Ev>
 80a0cdc:	4620      	mov	r0, r4
 80a0cde:	2150      	movs	r1, #80	; 0x50
 80a0ce0:	f002 f992 	bl	80a3008 <_ZdlPvj>
 80a0ce4:	4620      	mov	r0, r4
 80a0ce6:	bd10      	pop	{r4, pc}

080a0ce8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0ce8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0cea:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0cec:	db50      	blt.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0cee:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a0cf2:	428c      	cmp	r4, r1
 80a0cf4:	dd4c      	ble.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0cf6:	2a00      	cmp	r2, #0
 80a0cf8:	db4a      	blt.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0cfa:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a0cfe:	4294      	cmp	r4, r2
 80a0d00:	dd46      	ble.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a0d02:	7e84      	ldrb	r4, [r0, #26]
 80a0d04:	2c02      	cmp	r4, #2
 80a0d06:	d022      	beq.n	80a0d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x66>
 80a0d08:	2c03      	cmp	r4, #3
 80a0d0a:	d029      	beq.n	80a0d60 <_ZN16Adafruit_SSD13069drawPixelEsst+0x78>
 80a0d0c:	2c01      	cmp	r4, #1
 80a0d0e:	d104      	bne.n	80a0d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 80a0d10:	43d2      	mvns	r2, r2
 80a0d12:	8904      	ldrh	r4, [r0, #8]
 80a0d14:	4414      	add	r4, r2
      break;
 80a0d16:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 80a0d18:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
 80a0d1a:	2b01      	cmp	r3, #1
 80a0d1c:	d026      	beq.n	80a0d6c <_ZN16Adafruit_SSD13069drawPixelEsst+0x84>
 80a0d1e:	2b02      	cmp	r3, #2
 80a0d20:	d037      	beq.n	80a0d92 <_ZN16Adafruit_SSD13069drawPixelEsst+0xaa>
 80a0d22:	2b00      	cmp	r3, #0
 80a0d24:	d134      	bne.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
 80a0d26:	4613      	mov	r3, r2
 80a0d28:	2a00      	cmp	r2, #0
 80a0d2a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0d2e:	bfb8      	it	lt
 80a0d30:	1dd3      	addlt	r3, r2, #7
 80a0d32:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0d36:	fb04 1103 	mla	r1, r4, r3, r1
 80a0d3a:	2301      	movs	r3, #1
 80a0d3c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0d3e:	f002 0207 	and.w	r2, r2, #7
 80a0d42:	4093      	lsls	r3, r2
 80a0d44:	5c42      	ldrb	r2, [r0, r1]
 80a0d46:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a0d4a:	5442      	strb	r2, [r0, r1]
    }
  }
}
 80a0d4c:	e020      	b.n	80a0d90 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
      x = WIDTH  - x - 1;
 80a0d4e:	43c9      	mvns	r1, r1
      y = HEIGHT - y - 1;
 80a0d50:	43d2      	mvns	r2, r2
      x = WIDTH  - x - 1;
 80a0d52:	8904      	ldrh	r4, [r0, #8]
 80a0d54:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
 80a0d56:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH  - x - 1;
 80a0d58:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a0d5a:	4422      	add	r2, r4
 80a0d5c:	b212      	sxth	r2, r2
      break;
 80a0d5e:	e7dc      	b.n	80a0d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 80a0d60:	43c9      	mvns	r1, r1
 80a0d62:	8944      	ldrh	r4, [r0, #10]
 80a0d64:	440c      	add	r4, r1
      break;
 80a0d66:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a0d68:	b222      	sxth	r2, r4
      break;
 80a0d6a:	e7d6      	b.n	80a0d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
 80a0d6c:	4613      	mov	r3, r2
 80a0d6e:	2a00      	cmp	r2, #0
 80a0d70:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0d74:	bfb8      	it	lt
 80a0d76:	1dd3      	addlt	r3, r2, #7
 80a0d78:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0d7c:	fb04 1103 	mla	r1, r4, r3, r1
 80a0d80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a0d82:	f002 0007 	and.w	r0, r2, #7
 80a0d86:	2201      	movs	r2, #1
 80a0d88:	4082      	lsls	r2, r0
 80a0d8a:	5c58      	ldrb	r0, [r3, r1]
 80a0d8c:	4302      	orrs	r2, r0
 80a0d8e:	545a      	strb	r2, [r3, r1]
}
 80a0d90:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a0d92:	4613      	mov	r3, r2
 80a0d94:	2a00      	cmp	r2, #0
 80a0d96:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0d9a:	bfb8      	it	lt
 80a0d9c:	1dd3      	addlt	r3, r2, #7
 80a0d9e:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0da2:	fb04 1103 	mla	r1, r4, r3, r1
 80a0da6:	2301      	movs	r3, #1
 80a0da8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0daa:	f002 0207 	and.w	r2, r2, #7
 80a0dae:	fa03 f202 	lsl.w	r2, r3, r2
 80a0db2:	5c43      	ldrb	r3, [r0, r1]
 80a0db4:	405a      	eors	r2, r3
 80a0db6:	e7c8      	b.n	80a0d4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x62>

080a0db8 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0db8:	b510      	push	{r4, lr}
 80a0dba:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a0dbc:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
 80a0dc0:	2101      	movs	r1, #1
 80a0dc2:	b280      	uxth	r0, r0
 80a0dc4:	f002 f8a9 	bl	80a2f1a <digitalWrite>
 80a0dc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0dca:	b118      	cbz	r0, 80a0dd4 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
 80a0dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
 80a0dd0:	f001 bcfa 	b.w	80a27c8 <_ZN8SPIClass14endTransactionEv>
}
 80a0dd4:	bd10      	pop	{r4, pc}
	...

080a0dd8 <__tcf_0>:
        if (handle_) {
 80a0dd8:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <__tcf_0+0xc>)
 80a0dda:	6898      	ldr	r0, [r3, #8]
 80a0ddc:	b108      	cbz	r0, 80a0de2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0dde:	f001 b8cf 	b.w	80a1f80 <os_mutex_recursive_destroy>
        static SPIClass instance(Interface);
 80a0de2:	4770      	bx	lr
 80a0de4:	2000008c 	.word	0x2000008c

080a0de8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
 80a0de8:	b570      	push	{r4, r5, r6, lr}
 80a0dea:	4604      	mov	r4, r0
  rstPin(rst_pin) {
 80a0dec:	2500      	movs	r5, #0
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
 80a0dee:	460e      	mov	r6, r1
  rstPin(rst_pin) {
 80a0df0:	2240      	movs	r2, #64	; 0x40
 80a0df2:	2180      	movs	r1, #128	; 0x80
 80a0df4:	f7ff fce4 	bl	80a07c0 <_ZN12Adafruit_GFXC1Ess>
 80a0df8:	4b0d      	ldr	r3, [pc, #52]	; (80a0e30 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
 80a0dfa:	6265      	str	r5, [r4, #36]	; 0x24
 80a0dfc:	6023      	str	r3, [r4, #0]
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
 80a0dfe:	f002 f8d1 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
 80a0e02:	23ff      	movs	r3, #255	; 0xff
 80a0e04:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80a0e08:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
 80a0e0c:	4b09      	ldr	r3, [pc, #36]	; (80a0e34 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
 80a0e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0e12:	63a3      	str	r3, [r4, #56]	; 0x38
 80a0e14:	2301      	movs	r3, #1
 80a0e16:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
 80a0e1a:	86a2      	strh	r2, [r4, #52]	; 0x34
}
 80a0e1c:	4620      	mov	r0, r4
  rstPin(rst_pin) {
 80a0e1e:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
 80a0e22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0e26:	6425      	str	r5, [r4, #64]	; 0x40
 80a0e28:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
 80a0e2c:	bd70      	pop	{r4, r5, r6, pc}
 80a0e2e:	bf00      	nop
 80a0e30:	080a3efc 	.word	0x080a3efc
 80a0e34:	080a3908 	.word	0x080a3908

080a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a0e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e3a:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0e3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a0e3e:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a0e40:	b190      	cbz	r0, 80a0e68 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 80a0e42:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0e46:	f001 fb23 	bl	80a2490 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0e4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e4c:	2100      	movs	r1, #0
 80a0e4e:	6803      	ldr	r3, [r0, #0]
 80a0e50:	689b      	ldr	r3, [r3, #8]
 80a0e52:	4798      	blx	r3
    WIRE_WRITE(c);
 80a0e54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e56:	4629      	mov	r1, r5
 80a0e58:	6803      	ldr	r3, [r0, #0]
 80a0e5a:	689b      	ldr	r3, [r3, #8]
 80a0e5c:	4798      	blx	r3
    wire->endTransmission();
 80a0e5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80a0e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 80a0e64:	f001 bb1b 	b.w	80a249e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a0e68:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a0e6c:	4601      	mov	r1, r0
 80a0e6e:	b298      	uxth	r0, r3
 80a0e70:	f002 f853 	bl	80a2f1a <digitalWrite>
  if(spi) {
 80a0e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e76:	b120      	cbz	r0, 80a0e82 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
 80a0e78:	4629      	mov	r1, r5
}
 80a0e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
 80a0e7e:	f001 bd29 	b.w	80a28d4 <_ZN8SPIClass8transferEh>
 80a0e82:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0e84:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a0e86:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0e8a:	ea05 0107 	and.w	r1, r5, r7
 80a0e8e:	b280      	uxth	r0, r0
 80a0e90:	f002 f843 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a0e94:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0e98:	2101      	movs	r1, #1
 80a0e9a:	b280      	uxth	r0, r0
 80a0e9c:	f002 f83d 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a0ea0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0ea4:	2100      	movs	r1, #0
 80a0ea6:	b280      	uxth	r0, r0
 80a0ea8:	f002 f837 	bl	80a2f1a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0eac:	3e01      	subs	r6, #1
 80a0eae:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80a0eb2:	d1e8      	bne.n	80a0e86 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
 80a0eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0eb6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0eb6:	b538      	push	{r3, r4, r5, lr}
 80a0eb8:	4604      	mov	r4, r0
  TRANSACTION_START
 80a0eba:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0ebc:	460d      	mov	r5, r1
  TRANSACTION_START
 80a0ebe:	b180      	cbz	r0, 80a0ee2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0ec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0ec2:	f001 fad7 	bl	80a2474 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 80a0ec6:	2d00      	cmp	r5, #0
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	bf14      	ite	ne
 80a0ecc:	21a7      	movne	r1, #167	; 0xa7
 80a0ece:	21a6      	moveq	r1, #166	; 0xa6
 80a0ed0:	f7ff ffb2 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 80a0ed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0ed6:	b188      	cbz	r0, 80a0efc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 80a0ed8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a0eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0ede:	f001 bac9 	b.w	80a2474 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 80a0ee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0ee4:	b118      	cbz	r0, 80a0eee <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 80a0ee6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a0eea:	f001 fc87 	bl	80a27fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a0eee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0ef2:	2100      	movs	r1, #0
 80a0ef4:	b280      	uxth	r0, r0
 80a0ef6:	f002 f810 	bl	80a2f1a <digitalWrite>
 80a0efa:	e7e4      	b.n	80a0ec6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
 80a0efc:	4620      	mov	r0, r4
}
 80a0efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0f02:	f7ff bf59 	b.w	80a0db8 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

080a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a0f06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0f0a:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0f0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a0f0e:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a0f10:	188f      	adds	r7, r1, r2
 80a0f12:	b340      	cbz	r0, 80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
 80a0f14:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0f18:	f001 faba 	bl	80a2490 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f1e:	2100      	movs	r1, #0
 80a0f20:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a0f22:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f24:	689b      	ldr	r3, [r3, #8]
 80a0f26:	4798      	blx	r3
    while(n--) {
 80a0f28:	42bd      	cmp	r5, r7
 80a0f2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f2c:	d017      	beq.n	80a0f5e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
 80a0f2e:	2e1f      	cmp	r6, #31
 80a0f30:	d90c      	bls.n	80a0f4c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
 80a0f32:	f001 fab4 	bl	80a249e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a0f36:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0f3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f3c:	f001 faa8 	bl	80a2490 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f42:	2100      	movs	r1, #0
 80a0f44:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a0f46:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f48:	689b      	ldr	r3, [r3, #8]
 80a0f4a:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 80a0f4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f4e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0f52:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a0f54:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 80a0f56:	689b      	ldr	r3, [r3, #8]
 80a0f58:	4798      	blx	r3
      bytesOut++;
 80a0f5a:	b2f6      	uxtb	r6, r6
    while(n--) {
 80a0f5c:	e7e4      	b.n	80a0f28 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
 80a0f5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
 80a0f62:	f001 ba9c 	b.w	80a249e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a0f66:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a0f6a:	4601      	mov	r1, r0
 80a0f6c:	b298      	uxth	r0, r3
 80a0f6e:	f001 ffd4 	bl	80a2f1a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a0f72:	42af      	cmp	r7, r5
 80a0f74:	d022      	beq.n	80a0fbc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
 80a0f76:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a0f78:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
 80a0f7c:	b118      	cbz	r0, 80a0f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
 80a0f7e:	4649      	mov	r1, r9
 80a0f80:	f001 fca8 	bl	80a28d4 <_ZN8SPIClass8transferEh>
 80a0f84:	e7f5      	b.n	80a0f72 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
 80a0f86:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0f88:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a0f8c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0f90:	ea09 0108 	and.w	r1, r9, r8
 80a0f94:	b280      	uxth	r0, r0
 80a0f96:	f001 ffc0 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a0f9a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0f9e:	2101      	movs	r1, #1
 80a0fa0:	b280      	uxth	r0, r0
 80a0fa2:	f001 ffba 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a0fa6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0faa:	2100      	movs	r1, #0
 80a0fac:	b280      	uxth	r0, r0
 80a0fae:	f001 ffb4 	bl	80a2f1a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0fb2:	3e01      	subs	r6, #1
 80a0fb4:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a0fb8:	d1e8      	bne.n	80a0f8c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
 80a0fba:	e7da      	b.n	80a0f72 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
 80a0fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0fc0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 80a0fc0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a0fc4:	2100      	movs	r1, #0
 80a0fc6:	1dda      	adds	r2, r3, #7
 80a0fc8:	bf48      	it	mi
 80a0fca:	f103 020e 	addmi.w	r2, r3, #14
 80a0fce:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a0fd2:	10d2      	asrs	r2, r2, #3
 80a0fd4:	435a      	muls	r2, r3
 80a0fd6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0fd8:	f002 b82e 	b.w	80a3038 <memset>

080a0fdc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
 80a0fdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0fe0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a0fe2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
 80a0fe4:	4604      	mov	r4, r0
 80a0fe6:	460f      	mov	r7, r1
 80a0fe8:	4615      	mov	r5, r2
 80a0fea:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a0fee:	b1d3      	cbz	r3, 80a1026 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	f7ff ffe5 	bl	80a0fc0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
 80a0ff6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80a0ffa:	2a20      	cmp	r2, #32
 80a0ffc:	dc25      	bgt.n	80a104a <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a0ffe:	2320      	movs	r3, #32
 80a1000:	2001      	movs	r0, #1
 80a1002:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80a1006:	2373      	movs	r3, #115	; 0x73
 80a1008:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80a100c:	3a20      	subs	r2, #32
 80a100e:	3973      	subs	r1, #115	; 0x73
 80a1010:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80a1014:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a1018:	9300      	str	r3, [sp, #0]
 80a101a:	f342 024f 	sbfx	r2, r2, #1, #16
 80a101e:	4b85      	ldr	r3, [pc, #532]	; (80a1234 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
 80a1020:	f341 014f 	sbfx	r1, r1, #1, #16
 80a1024:	e01b      	b.n	80a105e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a1026:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a102a:	1dd8      	adds	r0, r3, #7
 80a102c:	bf48      	it	mi
 80a102e:	f103 000e 	addmi.w	r0, r3, #14
 80a1032:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a1036:	10c0      	asrs	r0, r0, #3
 80a1038:	4358      	muls	r0, r3
 80a103a:	f001 f997 	bl	80a236c <malloc>
 80a103e:	62e0      	str	r0, [r4, #44]	; 0x2c
 80a1040:	2800      	cmp	r0, #0
 80a1042:	d1d5      	bne.n	80a0ff0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 80a1044:	b004      	add	sp, #16
 80a1046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
 80a104a:	2340      	movs	r3, #64	; 0x40
 80a104c:	f04f 0c01 	mov.w	ip, #1
 80a1050:	2200      	movs	r2, #0
 80a1052:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80a1056:	2380      	movs	r3, #128	; 0x80
 80a1058:	4611      	mov	r1, r2
 80a105a:	9300      	str	r3, [sp, #0]
 80a105c:	4b76      	ldr	r3, [pc, #472]	; (80a1238 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a105e:	4620      	mov	r0, r4
 80a1060:	f7ff fbc4 	bl	80a07ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
 80a1064:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 80a1066:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
 80a106a:	2800      	cmp	r0, #0
 80a106c:	d078      	beq.n	80a1160 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a106e:	2d00      	cmp	r5, #0
 80a1070:	d174      	bne.n	80a115c <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
 80a1072:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a1076:	2b20      	cmp	r3, #32
 80a1078:	bf0c      	ite	eq
 80a107a:	253c      	moveq	r5, #60	; 0x3c
 80a107c:	253d      	movne	r5, #61	; 0x3d
 80a107e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
 80a1082:	f1b8 0f00 	cmp.w	r8, #0
 80a1086:	d001      	beq.n	80a108c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
 80a1088:	f001 f9f8 	bl	80a247c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
 80a108c:	b1fe      	cbz	r6, 80a10ce <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
 80a108e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a1092:	2800      	cmp	r0, #0
 80a1094:	db1b      	blt.n	80a10ce <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
 80a1096:	2101      	movs	r1, #1
 80a1098:	b280      	uxth	r0, r0
 80a109a:	f001 ff2d 	bl	80a2ef8 <pinMode>
    digitalWrite(rstPin, HIGH);
 80a109e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a10a2:	2101      	movs	r1, #1
 80a10a4:	b280      	uxth	r0, r0
 80a10a6:	f001 ff38 	bl	80a2f1a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 80a10aa:	2001      	movs	r0, #1
 80a10ac:	f001 f986 	bl	80a23bc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a10b0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a10b4:	2100      	movs	r1, #0
 80a10b6:	b280      	uxth	r0, r0
 80a10b8:	f001 ff2f 	bl	80a2f1a <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a10bc:	200a      	movs	r0, #10
 80a10be:	f001 f97d 	bl	80a23bc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a10c2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a10c6:	2101      	movs	r1, #1
 80a10c8:	b280      	uxth	r0, r0
 80a10ca:	f001 ff26 	bl	80a2f1a <digitalWrite>
  TRANSACTION_START
 80a10ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a10d0:	2800      	cmp	r0, #0
 80a10d2:	d074      	beq.n	80a11be <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
 80a10d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a10d6:	f001 f9cd 	bl	80a2474 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 80a10da:	2204      	movs	r2, #4
 80a10dc:	4620      	mov	r0, r4
 80a10de:	4957      	ldr	r1, [pc, #348]	; (80a123c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
 80a10e0:	f7ff ff11 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 80a10e4:	7aa1      	ldrb	r1, [r4, #10]
 80a10e6:	4620      	mov	r0, r4
 80a10e8:	3901      	subs	r1, #1
 80a10ea:	b2c9      	uxtb	r1, r1
 80a10ec:	f7ff fea4 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 80a10f0:	4953      	ldr	r1, [pc, #332]	; (80a1240 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
 80a10f2:	2204      	movs	r2, #4
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	f7ff ff06 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80a10fa:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a10fe:	4620      	mov	r0, r4
 80a1100:	2b01      	cmp	r3, #1
 80a1102:	bf0c      	ite	eq
 80a1104:	2110      	moveq	r1, #16
 80a1106:	2114      	movne	r1, #20
 80a1108:	f7ff fe96 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 80a110c:	2204      	movs	r2, #4
 80a110e:	4620      	mov	r0, r4
 80a1110:	494c      	ldr	r1, [pc, #304]	; (80a1244 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
 80a1112:	f7ff fef8 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
 80a1116:	68a3      	ldr	r3, [r4, #8]
 80a1118:	4a4b      	ldr	r2, [pc, #300]	; (80a1248 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
 80a111a:	4293      	cmp	r3, r2
 80a111c:	d15c      	bne.n	80a11d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
 80a111e:	2204      	movs	r2, #4
 80a1120:	4620      	mov	r0, r4
 80a1122:	494a      	ldr	r1, [pc, #296]	; (80a124c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
 80a1124:	f7ff feef 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 80a1128:	21d9      	movs	r1, #217	; 0xd9
 80a112a:	4620      	mov	r0, r4
 80a112c:	f7ff fe84 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80a1130:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1134:	4620      	mov	r0, r4
 80a1136:	2b01      	cmp	r3, #1
 80a1138:	bf0c      	ite	eq
 80a113a:	2122      	moveq	r1, #34	; 0x22
 80a113c:	21f1      	movne	r1, #241	; 0xf1
 80a113e:	f7ff fe7b 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 80a1142:	4620      	mov	r0, r4
 80a1144:	2206      	movs	r2, #6
 80a1146:	4942      	ldr	r1, [pc, #264]	; (80a1250 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
 80a1148:	f7ff fedd 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 80a114c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a114e:	2800      	cmp	r0, #0
 80a1150:	d063      	beq.n	80a121a <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
 80a1152:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80a1154:	f001 f98e 	bl	80a2474 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 80a1158:	2001      	movs	r0, #1
 80a115a:	e773      	b.n	80a1044 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a115c:	b26d      	sxtb	r5, r5
 80a115e:	e78e      	b.n	80a107e <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a1160:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a1164:	2101      	movs	r1, #1
 80a1166:	b280      	uxth	r0, r0
 80a1168:	f001 fec6 	bl	80a2ef8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 80a116c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1170:	2101      	movs	r1, #1
 80a1172:	b280      	uxth	r0, r0
 80a1174:	f001 fec0 	bl	80a2ef8 <pinMode>
    SSD1306_DESELECT
 80a1178:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a117c:	2101      	movs	r1, #1
 80a117e:	b280      	uxth	r0, r0
 80a1180:	f001 fecb 	bl	80a2f1a <digitalWrite>
    if(spi) { // Hardware SPI
 80a1184:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a1186:	b13d      	cbz	r5, 80a1198 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
 80a1188:	f1b8 0f00 	cmp.w	r8, #0
 80a118c:	f43f af7e 	beq.w	80a108c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
 80a1190:	4628      	mov	r0, r5
 80a1192:	f001 fb0b 	bl	80a27ac <_ZN8SPIClass5beginEv>
 80a1196:	e779      	b.n	80a108c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 80a1198:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a119c:	2101      	movs	r1, #1
 80a119e:	b280      	uxth	r0, r0
 80a11a0:	f001 feaa 	bl	80a2ef8 <pinMode>
      pinMode(clkPin , OUTPUT);
 80a11a4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a11a8:	2101      	movs	r1, #1
 80a11aa:	b280      	uxth	r0, r0
 80a11ac:	f001 fea4 	bl	80a2ef8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
 80a11b0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a11b4:	4629      	mov	r1, r5
 80a11b6:	b280      	uxth	r0, r0
 80a11b8:	f001 feaf 	bl	80a2f1a <digitalWrite>
 80a11bc:	e766      	b.n	80a108c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
 80a11be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a11c0:	b118      	cbz	r0, 80a11ca <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
 80a11c2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a11c6:	f001 fb19 	bl	80a27fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a11ca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a11ce:	2100      	movs	r1, #0
 80a11d0:	b280      	uxth	r0, r0
 80a11d2:	f001 fea2 	bl	80a2f1a <digitalWrite>
 80a11d6:	e780      	b.n	80a10da <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
 80a11d8:	4a1e      	ldr	r2, [pc, #120]	; (80a1254 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
 80a11da:	4293      	cmp	r3, r2
 80a11dc:	d10e      	bne.n	80a11fc <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
 80a11de:	491e      	ldr	r1, [pc, #120]	; (80a1258 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
 80a11e0:	2203      	movs	r2, #3
 80a11e2:	4620      	mov	r0, r4
 80a11e4:	f7ff fe8f 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 80a11e8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a11ec:	2b01      	cmp	r3, #1
 80a11ee:	bf0c      	ite	eq
 80a11f0:	219f      	moveq	r1, #159	; 0x9f
 80a11f2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a11f4:	4620      	mov	r0, r4
 80a11f6:	f7ff fe1f 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
 80a11fa:	e795      	b.n	80a1128 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
 80a11fc:	4a17      	ldr	r2, [pc, #92]	; (80a125c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
 80a11fe:	4293      	cmp	r3, r2
 80a1200:	d192      	bne.n	80a1128 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
 80a1202:	4917      	ldr	r1, [pc, #92]	; (80a1260 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
 80a1204:	2203      	movs	r2, #3
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff fe7d 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a120c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1210:	2b01      	cmp	r3, #1
 80a1212:	bf0c      	ite	eq
 80a1214:	2110      	moveq	r1, #16
 80a1216:	21af      	movne	r1, #175	; 0xaf
 80a1218:	e7ec      	b.n	80a11f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
 80a121a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a121e:	2101      	movs	r1, #1
 80a1220:	b280      	uxth	r0, r0
 80a1222:	f001 fe7a 	bl	80a2f1a <digitalWrite>
 80a1226:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1228:	2800      	cmp	r0, #0
 80a122a:	d095      	beq.n	80a1158 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
 80a122c:	f001 facc 	bl	80a27c8 <_ZN8SPIClass14endTransactionEv>
 80a1230:	e792      	b.n	80a1158 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
 80a1232:	bf00      	nop
 80a1234:	080a3914 	.word	0x080a3914
 80a1238:	080a3af4 	.word	0x080a3af4
 80a123c:	080a3f5c 	.word	0x080a3f5c
 80a1240:	080a3f60 	.word	0x080a3f60
 80a1244:	080a3f64 	.word	0x080a3f64
 80a1248:	00200080 	.word	0x00200080
 80a124c:	080a3f6e 	.word	0x080a3f6e
 80a1250:	080a3f68 	.word	0x080a3f68
 80a1254:	00400080 	.word	0x00400080
 80a1258:	080a3f72 	.word	0x080a3f72
 80a125c:	00100060 	.word	0x00100060
 80a1260:	080a3f75 	.word	0x080a3f75

080a1264 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1264:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a1266:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1268:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a126c:	db3f      	blt.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a126e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80a1272:	4295      	cmp	r5, r2
 80a1274:	dd3b      	ble.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if(x < 0) { // Clip left
 80a1276:	2900      	cmp	r1, #0
      w += x;
 80a1278:	bfbe      	ittt	lt
 80a127a:	185b      	addlt	r3, r3, r1
      x  = 0;
 80a127c:	2100      	movlt	r1, #0
      w += x;
 80a127e:	b21b      	sxthlt	r3, r3
    if((x + w) > WIDTH) { // Clip right
 80a1280:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80a1284:	185d      	adds	r5, r3, r1
 80a1286:	42b5      	cmp	r5, r6
      w = (WIDTH - x);
 80a1288:	bfc4      	itt	gt
 80a128a:	1a73      	subgt	r3, r6, r1
 80a128c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
 80a128e:	2b00      	cmp	r3, #0
 80a1290:	dd2d      	ble.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a1292:	10d5      	asrs	r5, r2, #3
 80a1294:	fb06 1105 	mla	r1, r6, r5, r1
 80a1298:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch(color) {
 80a129a:	2c01      	cmp	r4, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a129c:	4401      	add	r1, r0
               mask = 1 << (y & 7);
 80a129e:	f002 0007 	and.w	r0, r2, #7
 80a12a2:	f04f 0201 	mov.w	r2, #1
 80a12a6:	fa02 f200 	lsl.w	r2, r2, r0
 80a12aa:	b2d2      	uxtb	r2, r2
      switch(color) {
 80a12ac:	d016      	beq.n	80a12dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 80a12ae:	2c02      	cmp	r4, #2
 80a12b0:	d00b      	beq.n	80a12ca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 80a12b2:	b9e4      	cbnz	r4, 80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
 80a12b4:	43d2      	mvns	r2, r2
 80a12b6:	440b      	add	r3, r1
 80a12b8:	b2d2      	uxtb	r2, r2
 80a12ba:	4299      	cmp	r1, r3
 80a12bc:	d017      	beq.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a12be:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a12c2:	4010      	ands	r0, r2
 80a12c4:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a12c8:	e7f7      	b.n	80a12ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 80a12ca:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
 80a12cc:	4299      	cmp	r1, r3
 80a12ce:	d00e      	beq.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a12d0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a12d4:	4050      	eors	r0, r2
 80a12d6:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a12da:	e7f7      	b.n	80a12cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 80a12dc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
 80a12de:	4299      	cmp	r1, r3
 80a12e0:	d005      	beq.n	80a12ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a12e2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a12e6:	4310      	orrs	r0, r2
 80a12e8:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a12ec:	e7f7      	b.n	80a12de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 80a12ee:	bd70      	pop	{r4, r5, r6, pc}

080a12f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a12f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a12f2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a12f4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a12f8:	db76      	blt.n	80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 80a12fa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a12fe:	42a9      	cmp	r1, r5
 80a1300:	da72      	bge.n	80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
 80a1302:	2a00      	cmp	r2, #0
      __h += __y;
 80a1304:	bfbe      	ittt	lt
 80a1306:	18d2      	addlt	r2, r2, r3
 80a1308:	b213      	sxthlt	r3, r2
      __y = 0;
 80a130a:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
 80a130c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a1310:	18d7      	adds	r7, r2, r3
 80a1312:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 80a1314:	bfc4      	itt	gt
 80a1316:	1aa3      	subgt	r3, r4, r2
 80a1318:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
 80a131a:	2b00      	cmp	r3, #0
 80a131c:	dd64      	ble.n	80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a131e:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 80a1322:	fb05 1104 	mla	r1, r5, r4, r1
 80a1326:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if(mod) {
 80a1328:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
 80a132c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a132e:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
 80a1332:	d024      	beq.n	80a137e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 80a1334:	f1c2 0208 	rsb	r2, r2, #8
 80a1338:	b2d2      	uxtb	r2, r2
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a133a:	4293      	cmp	r3, r2
 80a133c:	bf38      	it	cc
 80a133e:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a1342:	4d2b      	ldr	r5, [pc, #172]	; (80a13f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a1344:	bf38      	it	cc
 80a1346:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a134a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a134c:	bf3c      	itt	cc
 80a134e:	fa4c fc0e 	asrcc.w	ip, ip, lr
 80a1352:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
 80a1356:	2e01      	cmp	r6, #1
 80a1358:	d007      	beq.n	80a136a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 80a135a:	2e02      	cmp	r6, #2
 80a135c:	d02e      	beq.n	80a13bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 80a135e:	b94e      	cbnz	r6, 80a1374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
 80a1360:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a1364:	ea2c 0505 	bic.w	r5, ip, r5
 80a1368:	e003      	b.n	80a1372 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
 80a136a:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a136e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
 80a1372:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
 80a1374:	4293      	cmp	r3, r2
 80a1376:	d337      	bcc.n	80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
 80a1378:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a137c:	440c      	add	r4, r1
        h -= mod;
 80a137e:	1a9a      	subs	r2, r3, r2
 80a1380:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
 80a1382:	2a07      	cmp	r2, #7
 80a1384:	d90e      	bls.n	80a13a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
 80a1386:	2e02      	cmp	r6, #2
 80a1388:	d11d      	bne.n	80a13c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 80a138a:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
 80a138c:	7821      	ldrb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
 80a138e:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF;  // Invert byte
 80a1390:	43c9      	mvns	r1, r1
 80a1392:	7021      	strb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a1394:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
 80a1398:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a139a:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a139c:	440c      	add	r4, r1
            } while(h >= 8);
 80a139e:	d8f5      	bhi.n	80a138c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
 80a13a0:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
 80a13a4:	b302      	cbz	r2, 80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a13a6:	4b13      	ldr	r3, [pc, #76]	; (80a13f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
 80a13a8:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a13aa:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
 80a13ac:	d019      	beq.n	80a13e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
 80a13ae:	2e02      	cmp	r6, #2
 80a13b0:	d01b      	beq.n	80a13ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 80a13b2:	b9ce      	cbnz	r6, 80a13e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
 80a13b4:	7822      	ldrb	r2, [r4, #0]
 80a13b6:	ea22 0303 	bic.w	r3, r2, r3
 80a13ba:	e014      	b.n	80a13e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
 80a13bc:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a13c0:	ea85 050c 	eor.w	r5, r5, ip
 80a13c4:	e7d5      	b.n	80a1372 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
 80a13c6:	2e00      	cmp	r6, #0
 80a13c8:	bf14      	ite	ne
 80a13ca:	25ff      	movne	r5, #255	; 0xff
 80a13cc:	2500      	moveq	r5, #0
 80a13ce:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
 80a13d0:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
 80a13d2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a13d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
 80a13d8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a13da:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a13dc:	440c      	add	r4, r1
            } while(h >= 8);
 80a13de:	d8f7      	bhi.n	80a13d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
 80a13e0:	e7de      	b.n	80a13a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
 80a13e2:	7822      	ldrb	r2, [r4, #0]
 80a13e4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
 80a13e6:	7023      	strb	r3, [r4, #0]
}
 80a13e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
 80a13ea:	7822      	ldrb	r2, [r4, #0]
 80a13ec:	4053      	eors	r3, r2
 80a13ee:	e7fa      	b.n	80a13e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
 80a13f0:	080a3f4c 	.word	0x080a3f4c
 80a13f4:	080a3f54 	.word	0x080a3f54

080a13f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a13f8:	b430      	push	{r4, r5}
 80a13fa:	4614      	mov	r4, r2
  switch(rotation) {
 80a13fc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a13fe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a1402:	2a02      	cmp	r2, #2
 80a1404:	d00d      	beq.n	80a1422 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 80a1406:	2a03      	cmp	r2, #3
 80a1408:	d018      	beq.n	80a143c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 80a140a:	2a01      	cmp	r2, #1
 80a140c:	d111      	bne.n	80a1432 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 80a140e:	43e4      	mvns	r4, r4
 80a1410:	8902      	ldrh	r2, [r0, #8]
 80a1412:	4414      	add	r4, r2
 80a1414:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a1416:	460a      	mov	r2, r1
 80a1418:	9502      	str	r5, [sp, #8]
 80a141a:	4621      	mov	r1, r4
}
 80a141c:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a141e:	f7ff bf67 	b.w	80a12f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
 80a1422:	43e4      	mvns	r4, r4
 80a1424:	8942      	ldrh	r2, [r0, #10]
 80a1426:	4414      	add	r4, r2
    x -= (w-1);
 80a1428:	18ca      	adds	r2, r1, r3
 80a142a:	8901      	ldrh	r1, [r0, #8]
    y  = HEIGHT - y - 1;
 80a142c:	b224      	sxth	r4, r4
    x -= (w-1);
 80a142e:	1a89      	subs	r1, r1, r2
 80a1430:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
 80a1432:	4622      	mov	r2, r4
 80a1434:	9502      	str	r5, [sp, #8]
}
 80a1436:	bc30      	pop	{r4, r5}
  else      drawFastHLineInternal(x, y, w, color);
 80a1438:	f7ff bf14 	b.w	80a1264 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
 80a143c:	18ca      	adds	r2, r1, r3
 80a143e:	8941      	ldrh	r1, [r0, #10]
 80a1440:	1a89      	subs	r1, r1, r2
 80a1442:	b209      	sxth	r1, r1
    break;
 80a1444:	e7e7      	b.n	80a1416 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

080a1446 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a1446:	b430      	push	{r4, r5}
 80a1448:	4614      	mov	r4, r2
  switch(rotation) {
 80a144a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a144c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a1450:	2a02      	cmp	r2, #2
 80a1452:	d00d      	beq.n	80a1470 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 80a1454:	2a03      	cmp	r2, #3
 80a1456:	d018      	beq.n	80a148a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 80a1458:	2a01      	cmp	r2, #1
 80a145a:	d111      	bne.n	80a1480 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
 80a145c:	18e2      	adds	r2, r4, r3
 80a145e:	8904      	ldrh	r4, [r0, #8]
 80a1460:	1aa4      	subs	r4, r4, r2
 80a1462:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a1464:	460a      	mov	r2, r1
 80a1466:	9502      	str	r5, [sp, #8]
 80a1468:	4621      	mov	r1, r4
}
 80a146a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a146c:	f7ff befa 	b.w	80a1264 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
 80a1470:	43c9      	mvns	r1, r1
 80a1472:	8902      	ldrh	r2, [r0, #8]
 80a1474:	4411      	add	r1, r2
    y -= (h-1);
 80a1476:	18e2      	adds	r2, r4, r3
 80a1478:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH  - x - 1;
 80a147a:	b209      	sxth	r1, r1
    y -= (h-1);
 80a147c:	1aa4      	subs	r4, r4, r2
 80a147e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
 80a1480:	4622      	mov	r2, r4
 80a1482:	9502      	str	r5, [sp, #8]
}
 80a1484:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
 80a1486:	f7ff bf33 	b.w	80a12f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 80a148a:	43c9      	mvns	r1, r1
 80a148c:	8942      	ldrh	r2, [r0, #10]
 80a148e:	4411      	add	r1, r2
 80a1490:	b209      	sxth	r1, r1
    break;
 80a1492:	e7e7      	b.n	80a1464 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

080a1494 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 80a1494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1498:	4604      	mov	r4, r0
  TRANSACTION_START
 80a149a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a149c:	2800      	cmp	r0, #0
 80a149e:	d041      	beq.n	80a1524 <_ZN16Adafruit_SSD13067displayEv+0x90>
 80a14a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a14a2:	f000 ffe7 	bl	80a2474 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 80a14a6:	2205      	movs	r2, #5
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	4946      	ldr	r1, [pc, #280]	; (80a15c4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
 80a14ac:	f7ff fd2b 	bl	80a0f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 80a14b0:	7a21      	ldrb	r1, [r4, #8]
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	3901      	subs	r1, #1
 80a14b6:	b2c9      	uxtb	r1, r1
 80a14b8:	f7ff fcbe 	bl	80a0e38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if(wire) { // I2C
 80a14bc:	e9d4 060a 	ldrd	r0, r6, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a14c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a14c4:	1ddd      	adds	r5, r3, #7
 80a14c6:	bf48      	it	mi
 80a14c8:	f103 050e 	addmi.w	r5, r3, #14
 80a14cc:	8923      	ldrh	r3, [r4, #8]
 80a14ce:	10ed      	asrs	r5, r5, #3
 80a14d0:	435d      	muls	r5, r3
 80a14d2:	b2ad      	uxth	r5, r5
  uint8_t *ptr   = buffer;
 80a14d4:	4435      	add	r5, r6
  if(wire) { // I2C
 80a14d6:	2800      	cmp	r0, #0
 80a14d8:	d03a      	beq.n	80a1550 <_ZN16Adafruit_SSD13067displayEv+0xbc>
    wire->beginTransmission(i2caddr);
 80a14da:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a14de:	f000 ffd7 	bl	80a2490 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 80a14e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a14e4:	2140      	movs	r1, #64	; 0x40
 80a14e6:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a14e8:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 80a14ea:	689b      	ldr	r3, [r3, #8]
 80a14ec:	4798      	blx	r3
    while(count--) {
 80a14ee:	42ae      	cmp	r6, r5
 80a14f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a14f2:	d024      	beq.n	80a153e <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if(bytesOut >= WIRE_MAX) {
 80a14f4:	2f1f      	cmp	r7, #31
 80a14f6:	d90c      	bls.n	80a1512 <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 80a14f8:	f000 ffd1 	bl	80a249e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a14fc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1500:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1502:	f000 ffc5 	bl	80a2490 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 80a1506:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1508:	2140      	movs	r1, #64	; 0x40
 80a150a:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a150c:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 80a150e:	689b      	ldr	r3, [r3, #8]
 80a1510:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 80a1512:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1514:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a1518:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a151a:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 80a151c:	689b      	ldr	r3, [r3, #8]
 80a151e:	4798      	blx	r3
      bytesOut++;
 80a1520:	b2ff      	uxtb	r7, r7
    while(count--) {
 80a1522:	e7e4      	b.n	80a14ee <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 80a1524:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1526:	b118      	cbz	r0, 80a1530 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 80a1528:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a152c:	f001 f966 	bl	80a27fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a1530:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1534:	2100      	movs	r1, #0
 80a1536:	b280      	uxth	r0, r0
 80a1538:	f001 fcef 	bl	80a2f1a <digitalWrite>
 80a153c:	e7b3      	b.n	80a14a6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
 80a153e:	f000 ffae 	bl	80a249e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 80a1542:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1544:	b378      	cbz	r0, 80a15a6 <_ZN16Adafruit_SSD13067displayEv+0x112>
 80a1546:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a1548:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a154c:	f000 bf92 	b.w	80a2474 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 80a1550:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a1554:	2101      	movs	r1, #1
 80a1556:	b280      	uxth	r0, r0
 80a1558:	f001 fcdf 	bl	80a2f1a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
 80a155c:	42ae      	cmp	r6, r5
 80a155e:	d0f0      	beq.n	80a1542 <_ZN16Adafruit_SSD13067displayEv+0xae>
  if(spi) {
 80a1560:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
 80a1562:	f816 9b01 	ldrb.w	r9, [r6], #1
  if(spi) {
 80a1566:	b118      	cbz	r0, 80a1570 <_ZN16Adafruit_SSD13067displayEv+0xdc>
    (void)spi->transfer(d);
 80a1568:	4649      	mov	r1, r9
 80a156a:	f001 f9b3 	bl	80a28d4 <_ZN8SPIClass8transferEh>
 80a156e:	e7f5      	b.n	80a155c <_ZN16Adafruit_SSD13067displayEv+0xc8>
 80a1570:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a1572:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a1576:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a157a:	ea09 0108 	and.w	r1, r9, r8
 80a157e:	b280      	uxth	r0, r0
 80a1580:	f001 fccb 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a1584:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1588:	2101      	movs	r1, #1
 80a158a:	b280      	uxth	r0, r0
 80a158c:	f001 fcc5 	bl	80a2f1a <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a1590:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1594:	2100      	movs	r1, #0
 80a1596:	b280      	uxth	r0, r0
 80a1598:	f001 fcbf 	bl	80a2f1a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a159c:	3f01      	subs	r7, #1
 80a159e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a15a2:	d1e8      	bne.n	80a1576 <_ZN16Adafruit_SSD13067displayEv+0xe2>
 80a15a4:	e7da      	b.n	80a155c <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 80a15a6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a15aa:	2101      	movs	r1, #1
 80a15ac:	b280      	uxth	r0, r0
 80a15ae:	f001 fcb4 	bl	80a2f1a <digitalWrite>
 80a15b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a15b4:	b118      	cbz	r0, 80a15be <_ZN16Adafruit_SSD13067displayEv+0x12a>
}
 80a15b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
 80a15ba:	f001 b905 	b.w	80a27c8 <_ZN8SPIClass14endTransactionEv>
}
 80a15be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a15c2:	bf00      	nop
 80a15c4:	080a3f78 	.word	0x080a3f78

080a15c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a15c8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a15ca:	4d0b      	ldr	r5, [pc, #44]	; (80a15f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a15cc:	7829      	ldrb	r1, [r5, #0]
 80a15ce:	f3bf 8f5b 	dmb	ish
 80a15d2:	f011 0401 	ands.w	r4, r1, #1
 80a15d6:	d10d      	bne.n	80a15f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a15d8:	4628      	mov	r0, r5
 80a15da:	f7fe fd6b 	bl	80a00b4 <__cxa_guard_acquire>
 80a15de:	b148      	cbz	r0, 80a15f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a15e0:	4621      	mov	r1, r4
 80a15e2:	4806      	ldr	r0, [pc, #24]	; (80a15fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a15e4:	f001 f8d3 	bl	80a278e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a15e8:	4628      	mov	r0, r5
 80a15ea:	f7fe fd68 	bl	80a00be <__cxa_guard_release>
 80a15ee:	4804      	ldr	r0, [pc, #16]	; (80a1600 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a15f0:	f001 fd0e 	bl	80a3010 <atexit>
    }
 80a15f4:	4801      	ldr	r0, [pc, #4]	; (80a15fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a15f6:	bd38      	pop	{r3, r4, r5, pc}
 80a15f8:	20000088 	.word	0x20000088
 80a15fc:	2000008c 	.word	0x2000008c
 80a1600:	080a0dd9 	.word	0x080a0dd9

080a1604 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1604:	b538      	push	{r3, r4, r5, lr}
 80a1606:	4604      	mov	r4, r0
 80a1608:	4615      	mov	r5, r2
 80a160a:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a160c:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a160e:	2101      	movs	r1, #1
 80a1610:	f001 fc72 	bl	80a2ef8 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1614:	7b20      	ldrb	r0, [r4, #12]
 80a1616:	2101      	movs	r1, #1
 80a1618:	f001 fc7f 	bl	80a2f1a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a161c:	4628      	mov	r0, r5
 80a161e:	2101      	movs	r1, #1
	_resetPowerDownPin = resetPowerDownPin;
 80a1620:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1622:	f001 fc69 	bl	80a2ef8 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a1626:	7b60      	ldrb	r0, [r4, #13]
 80a1628:	2100      	movs	r1, #0
 80a162a:	f001 fc76 	bl	80a2f1a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a162e:	4620      	mov	r0, r4
 80a1630:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1634 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
 80a1634:	3901      	subs	r1, #1
 80a1636:	b2c9      	uxtb	r1, r1
 80a1638:	2908      	cmp	r1, #8
 80a163a:	bf9a      	itte	ls
 80a163c:	4b02      	ldrls	r3, [pc, #8]	; (80a1648 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
 80a163e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
 80a1642:	4802      	ldrhi	r0, [pc, #8]	; (80a164c <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
 80a1644:	4770      	bx	lr
 80a1646:	bf00      	nop
 80a1648:	080a4074 	.word	0x080a4074
 80a164c:	080a3f7d 	.word	0x080a3f7d

080a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a1650:	b510      	push	{r4, lr}
 80a1652:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a1654:	f7ff ffb8 	bl	80a15c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1658:	4621      	mov	r1, r4
    }
 80a165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a165e:	f001 b939 	b.w	80a28d4 <_ZN8SPIClass8transferEh>

080a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
 80a1662:	b570      	push	{r4, r5, r6, lr}
 80a1664:	460e      	mov	r6, r1
 80a1666:	4615      	mov	r5, r2
 80a1668:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a166a:	2100      	movs	r1, #0
 80a166c:	7b00      	ldrb	r0, [r0, #12]
 80a166e:	f001 fc54 	bl	80a2f1a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1672:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a1676:	f7ff ffeb 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	SPI.transfer(value);
 80a167a:	4628      	mov	r0, r5
 80a167c:	f7ff ffe8 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1680:	7b20      	ldrb	r0, [r4, #12]
 80a1682:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1688:	f001 bc47 	b.w	80a2f1a <digitalWrite>

080a168c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
 80a168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a168e:	460f      	mov	r7, r1
 80a1690:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1692:	2100      	movs	r1, #0
 80a1694:	7b00      	ldrb	r0, [r0, #12]
								) {
 80a1696:	4615      	mov	r5, r2
 80a1698:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a169a:	f001 fc3e 	bl	80a2f1a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a169e:	f007 007e 	and.w	r0, r7, #126	; 0x7e
 80a16a2:	f7ff ffd5 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a16a6:	4425      	add	r5, r4
 80a16a8:	42ac      	cmp	r4, r5
 80a16aa:	d004      	beq.n	80a16b6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
 80a16ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80a16b0:	f7ff ffce 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a16b4:	e7f8      	b.n	80a16a8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a16b6:	7b30      	ldrb	r0, [r6, #12]
 80a16b8:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a16ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a16be:	f001 bc2c 	b.w	80a2f1a <digitalWrite>

080a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
 80a16c2:	b538      	push	{r3, r4, r5, lr}
 80a16c4:	460c      	mov	r4, r1
 80a16c6:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a16c8:	2100      	movs	r1, #0
 80a16ca:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a16cc:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a16d0:	f001 fc23 	bl	80a2f1a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a16d4:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80a16d8:	f7ff ffba 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a16dc:	2000      	movs	r0, #0
 80a16de:	f7ff ffb7 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a16e2:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a16e4:	2101      	movs	r1, #1
 80a16e6:	7b28      	ldrb	r0, [r5, #12]
 80a16e8:	f001 fc17 	bl	80a2f1a <digitalWrite>
} // End PCD_ReadRegister()
 80a16ec:	4620      	mov	r0, r4
 80a16ee:	bd38      	pop	{r3, r4, r5, pc}

080a16f0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
 80a16f0:	b570      	push	{r4, r5, r6, lr}
 80a16f2:	4604      	mov	r4, r0
 80a16f4:	460d      	mov	r5, r1
 80a16f6:	4616      	mov	r6, r2
	tmp = PCD_ReadRegister(reg);
 80a16f8:	f7ff ffe3 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a16fc:	ea40 0206 	orr.w	r2, r0, r6
 80a1700:	4629      	mov	r1, r5
 80a1702:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80a1704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1708:	b2d2      	uxtb	r2, r2
 80a170a:	f7ff bfaa 	b.w	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a170e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
 80a170e:	b570      	push	{r4, r5, r6, lr}
 80a1710:	4604      	mov	r4, r0
 80a1712:	460d      	mov	r5, r1
 80a1714:	4616      	mov	r6, r2
	tmp = PCD_ReadRegister(reg);
 80a1716:	f7ff ffd4 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a171a:	ea20 0206 	bic.w	r2, r0, r6
 80a171e:	4629      	mov	r1, r5
 80a1720:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80a1722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1726:	b2d2      	uxtb	r2, r2
 80a1728:	f7ff bf9b 	b.w	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a172c <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 80a172c:	2208      	movs	r2, #8
 80a172e:	2110      	movs	r1, #16
 80a1730:	f7ff bfed 	b.w	80a170e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

080a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
 80a1734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1736:	4604      	mov	r4, r0
 80a1738:	4615      	mov	r5, r2
 80a173a:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a173c:	2200      	movs	r2, #0
 80a173e:	2102      	movs	r1, #2
					 ) {
 80a1740:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1742:	f7ff ff8e 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1746:	2204      	movs	r2, #4
 80a1748:	210a      	movs	r1, #10
 80a174a:	4620      	mov	r0, r4
 80a174c:	f7ff ff89 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1750:	2280      	movs	r2, #128	; 0x80
 80a1752:	2114      	movs	r1, #20
 80a1754:	4620      	mov	r0, r4
 80a1756:	f7ff ffcb 	bl	80a16f0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a175a:	462a      	mov	r2, r5
 80a175c:	463b      	mov	r3, r7
 80a175e:	2112      	movs	r1, #18
 80a1760:	4620      	mov	r0, r4
 80a1762:	f7ff ff93 	bl	80a168c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1766:	2203      	movs	r2, #3
 80a1768:	2102      	movs	r1, #2
 80a176a:	4620      	mov	r0, r4
 80a176c:	f7ff ff79 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1770:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1774:	210a      	movs	r1, #10
 80a1776:	4620      	mov	r0, r4
 80a1778:	f7ff ffa3 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a177c:	0743      	lsls	r3, r0, #29
 80a177e:	d405      	bmi.n	80a178c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1780:	3d01      	subs	r5, #1
 80a1782:	b2ad      	uxth	r5, r5
 80a1784:	2d00      	cmp	r5, #0
 80a1786:	d1f5      	bne.n	80a1774 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1788:	2004      	movs	r0, #4
 80a178a:	e00f      	b.n	80a17ac <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a178c:	2200      	movs	r2, #0
 80a178e:	2102      	movs	r1, #2
 80a1790:	4620      	mov	r0, r4
 80a1792:	f7ff ff66 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1796:	2144      	movs	r1, #68	; 0x44
 80a1798:	4620      	mov	r0, r4
 80a179a:	f7ff ff92 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a179e:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a17a0:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a17a2:	4620      	mov	r0, r4
 80a17a4:	f7ff ff8d 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a17a8:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a17aa:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 80a17ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17ae <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
 80a17ae:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a17b0:	220f      	movs	r2, #15
 80a17b2:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
 80a17b4:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a17b6:	f7ff ff54 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
 80a17ba:	2032      	movs	r0, #50	; 0x32
 80a17bc:	f000 fdfe 	bl	80a23bc <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a17c0:	2102      	movs	r1, #2
 80a17c2:	4620      	mov	r0, r4
 80a17c4:	f7ff ff7d 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a17c8:	06c3      	lsls	r3, r0, #27
 80a17ca:	d4f9      	bmi.n	80a17c0 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
 80a17cc:	bd10      	pop	{r4, pc}

080a17ce <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
 80a17ce:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a17d0:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
 80a17d2:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a17d4:	f7ff ff75 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a17d8:	f000 0303 	and.w	r3, r0, #3
 80a17dc:	2b03      	cmp	r3, #3
 80a17de:	d008      	beq.n	80a17f2 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a17e0:	f040 0203 	orr.w	r2, r0, #3
 80a17e4:	2128      	movs	r1, #40	; 0x28
 80a17e6:	4620      	mov	r0, r4
} // End PCD_AntennaOn()
 80a17e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a17ec:	b2d2      	uxtb	r2, r2
 80a17ee:	f7ff bf38 	b.w	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
 80a17f2:	bd10      	pop	{r4, pc}

080a17f4 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
 80a17f4:	b510      	push	{r4, lr}
 80a17f6:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a17f8:	7b40      	ldrb	r0, [r0, #13]
 80a17fa:	f001 fba7 	bl	80a2f4c <digitalRead>
 80a17fe:	bb48      	cbnz	r0, 80a1854 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1800:	7b60      	ldrb	r0, [r4, #13]
 80a1802:	2101      	movs	r1, #1
 80a1804:	f001 fb89 	bl	80a2f1a <digitalWrite>
		delay(50);
 80a1808:	2032      	movs	r0, #50	; 0x32
 80a180a:	f000 fdd7 	bl	80a23bc <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a180e:	4620      	mov	r0, r4
 80a1810:	2280      	movs	r2, #128	; 0x80
 80a1812:	2154      	movs	r1, #84	; 0x54
 80a1814:	f7ff ff25 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1818:	4620      	mov	r0, r4
 80a181a:	22a9      	movs	r2, #169	; 0xa9
 80a181c:	2156      	movs	r1, #86	; 0x56
 80a181e:	f7ff ff20 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1822:	4620      	mov	r0, r4
 80a1824:	2203      	movs	r2, #3
 80a1826:	2158      	movs	r1, #88	; 0x58
 80a1828:	f7ff ff1b 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a182c:	4620      	mov	r0, r4
 80a182e:	22e8      	movs	r2, #232	; 0xe8
 80a1830:	215a      	movs	r1, #90	; 0x5a
 80a1832:	f7ff ff16 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1836:	4620      	mov	r0, r4
 80a1838:	2240      	movs	r2, #64	; 0x40
 80a183a:	212a      	movs	r1, #42	; 0x2a
 80a183c:	f7ff ff11 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1840:	4620      	mov	r0, r4
 80a1842:	223d      	movs	r2, #61	; 0x3d
 80a1844:	2122      	movs	r1, #34	; 0x22
 80a1846:	f7ff ff0c 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a184a:	4620      	mov	r0, r4
} // End PCD_Init()
 80a184c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1850:	f7ff bfbd 	b.w	80a17ce <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
 80a1854:	4620      	mov	r0, r4
 80a1856:	f7ff ffaa 	bl	80a17ae <_ZN7MFRC5229PCD_ResetEv>
 80a185a:	e7d8      	b.n	80a180e <_ZN7MFRC5228PCD_InitEv+0x1a>

080a185c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
 80a185c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1860:	4607      	mov	r7, r0
 80a1862:	461e      	mov	r6, r3
	if (count == 0) {
 80a1864:	4615      	mov	r5, r2
								) {
 80a1866:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	if (count == 0) {
 80a186a:	2a00      	cmp	r2, #0
 80a186c:	d042      	beq.n	80a18f4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a186e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1872:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1874:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1878:	2100      	movs	r1, #0
 80a187a:	f001 fb4e 	bl	80a2f1a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a187e:	4648      	mov	r0, r9
 80a1880:	f7ff fee6 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1884:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
 80a1888:	f04f 0a01 	mov.w	sl, #1
	count--;								// One read is performed outside of the loop
 80a188c:	3d01      	subs	r5, #1
 80a188e:	b2ed      	uxtb	r5, r5
	while (index < count) {
 80a1890:	fa5f f48b 	uxtb.w	r4, fp
 80a1894:	42a5      	cmp	r5, r4
 80a1896:	d922      	bls.n	80a18de <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1898:	b9dc      	cbnz	r4, 80a18d2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a189a:	f1b8 0f00 	cmp.w	r8, #0
 80a189e:	d018      	beq.n	80a18d2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a18a0:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
 80a18a2:	b2d3      	uxtb	r3, r2
 80a18a4:	2b07      	cmp	r3, #7
 80a18a6:	b261      	sxtb	r1, r4
 80a18a8:	d805      	bhi.n	80a18b6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a18aa:	fa0a f402 	lsl.w	r4, sl, r2
 80a18ae:	430c      	orrs	r4, r1
 80a18b0:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
 80a18b2:	3201      	adds	r2, #1
 80a18b4:	e7f5      	b.n	80a18a2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
 80a18b6:	4648      	mov	r0, r9
 80a18b8:	9101      	str	r1, [sp, #4]
 80a18ba:	f7ff fec9 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			values[0] = (values[index] & ~mask) | (value & mask);
 80a18be:	7833      	ldrb	r3, [r6, #0]
 80a18c0:	9901      	ldr	r1, [sp, #4]
 80a18c2:	4004      	ands	r4, r0
 80a18c4:	ea23 0301 	bic.w	r3, r3, r1
 80a18c8:	431c      	orrs	r4, r3
 80a18ca:	7034      	strb	r4, [r6, #0]
		index++;
 80a18cc:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
 80a18d0:	e7de      	b.n	80a1890 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a18d2:	4648      	mov	r0, r9
 80a18d4:	f7ff febc 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a18d8:	f806 000b 	strb.w	r0, [r6, fp]
 80a18dc:	e7f6      	b.n	80a18cc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a18de:	2000      	movs	r0, #0
 80a18e0:	f7ff feb6 	bl	80a1650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a18e4:	2101      	movs	r1, #1
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a18e6:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a18e8:	7b38      	ldrb	r0, [r7, #12]
} // End PCD_ReadRegister()
 80a18ea:	b003      	add	sp, #12
 80a18ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a18f0:	f001 bb13 	b.w	80a2f1a <digitalWrite>
} // End PCD_ReadRegister()
 80a18f4:	b003      	add	sp, #12
 80a18f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a18fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
 80a18fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a18fe:	b089      	sub	sp, #36	; 0x24
 80a1900:	9203      	str	r2, [sp, #12]
 80a1902:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80a1906:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80a190a:	4604      	mov	r4, r0
 80a190c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
 80a1910:	468a      	mov	sl, r1
 80a1912:	2700      	movs	r7, #0
 80a1914:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80a1918:	9204      	str	r2, [sp, #16]
	byte txLastBits = validBits ? *validBits : 0;
 80a191a:	f1b9 0f00 	cmp.w	r9, #0
 80a191e:	d03e      	beq.n	80a199e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
 80a1920:	f899 8000 	ldrb.w	r8, [r9]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1924:	2200      	movs	r2, #0
 80a1926:	2102      	movs	r1, #2
 80a1928:	4620      	mov	r0, r4
 80a192a:	9305      	str	r3, [sp, #20]
 80a192c:	f7ff fe99 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1930:	227f      	movs	r2, #127	; 0x7f
 80a1932:	2108      	movs	r1, #8
 80a1934:	4620      	mov	r0, r4
 80a1936:	f7ff fe94 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a193a:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a193e:	2280      	movs	r2, #128	; 0x80
 80a1940:	2114      	movs	r1, #20
 80a1942:	4620      	mov	r0, r4
 80a1944:	f7ff fed4 	bl	80a16f0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1948:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a194c:	9b05      	ldr	r3, [sp, #20]
 80a194e:	2112      	movs	r1, #18
 80a1950:	4620      	mov	r0, r4
 80a1952:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80a1956:	f7ff fe99 	bl	80a168c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a195a:	4642      	mov	r2, r8
 80a195c:	211a      	movs	r1, #26
 80a195e:	4620      	mov	r0, r4
 80a1960:	f7ff fe7f 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1964:	4652      	mov	r2, sl
 80a1966:	2102      	movs	r1, #2
 80a1968:	4620      	mov	r0, r4
 80a196a:	f7ff fe7a 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a196e:	f1ba 0f0c 	cmp.w	sl, #12
 80a1972:	d104      	bne.n	80a197e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1974:	2280      	movs	r2, #128	; 0x80
 80a1976:	211a      	movs	r1, #26
 80a1978:	4620      	mov	r0, r4
 80a197a:	f7ff feb9 	bl	80a16f0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
 80a197e:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1982:	2108      	movs	r1, #8
 80a1984:	4620      	mov	r0, r4
 80a1986:	f7ff fe9c 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a198a:	9b03      	ldr	r3, [sp, #12]
 80a198c:	4218      	tst	r0, r3
 80a198e:	d108      	bne.n	80a19a2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1990:	07c3      	lsls	r3, r0, #31
 80a1992:	d402      	bmi.n	80a199a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1994:	f1b8 0801 	subs.w	r8, r8, #1
 80a1998:	d1f3      	bne.n	80a1982 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
 80a199a:	2004      	movs	r0, #4
 80a199c:	e04d      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
 80a199e:	46c8      	mov	r8, r9
 80a19a0:	e7c0      	b.n	80a1924 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a19a2:	210c      	movs	r1, #12
 80a19a4:	4620      	mov	r0, r4
 80a19a6:	f7ff fe8c 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a19aa:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a19ae:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a19b0:	d146      	bne.n	80a1a40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
 80a19b2:	b1dd      	cbz	r5, 80a19ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
 80a19b4:	b1d6      	cbz	r6, 80a19ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a19b6:	2114      	movs	r1, #20
 80a19b8:	4620      	mov	r0, r4
 80a19ba:	f7ff fe82 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a19be:	7833      	ldrb	r3, [r6, #0]
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a19c0:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a19c2:	4283      	cmp	r3, r0
 80a19c4:	d33e      	bcc.n	80a1a44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
 80a19c6:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a19c8:	462b      	mov	r3, r5
 80a19ca:	2112      	movs	r1, #18
 80a19cc:	4620      	mov	r0, r4
 80a19ce:	f8cd b000 	str.w	fp, [sp]
 80a19d2:	f7ff ff43 	bl	80a185c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a19d6:	2118      	movs	r1, #24
 80a19d8:	4620      	mov	r0, r4
 80a19da:	f7ff fe72 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a19de:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
 80a19e2:	f1b9 0f00 	cmp.w	r9, #0
 80a19e6:	d001      	beq.n	80a19ec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
 80a19e8:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
 80a19ec:	f018 0f08 	tst.w	r8, #8
 80a19f0:	d12a      	bne.n	80a1a48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
 80a19f2:	b35d      	cbz	r5, 80a1a4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a19f4:	b356      	cbz	r6, 80a1a4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a19f6:	9b04      	ldr	r3, [sp, #16]
 80a19f8:	b343      	cbz	r3, 80a1a4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
 80a19fa:	7832      	ldrb	r2, [r6, #0]
 80a19fc:	2a01      	cmp	r2, #1
 80a19fe:	d103      	bne.n	80a1a08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
 80a1a00:	2f04      	cmp	r7, #4
 80a1a02:	d125      	bne.n	80a1a50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
 80a1a04:	2009      	movs	r0, #9
 80a1a06:	e018      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
 80a1a08:	d922      	bls.n	80a1a50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1a0a:	bb0f      	cbnz	r7, 80a1a50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1a0c:	3a02      	subs	r2, #2
 80a1a0e:	4629      	mov	r1, r5
 80a1a10:	4620      	mov	r0, r4
 80a1a12:	ab07      	add	r3, sp, #28
 80a1a14:	b2d2      	uxtb	r2, r2
 80a1a16:	f7ff fe8d 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1a1a:	2801      	cmp	r0, #1
 80a1a1c:	d10d      	bne.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1a1e:	7833      	ldrb	r3, [r6, #0]
 80a1a20:	441d      	add	r5, r3
 80a1a22:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a1a26:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1a2a:	429a      	cmp	r2, r3
 80a1a2c:	d110      	bne.n	80a1a50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a1a32:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80a1a36:	429a      	cmp	r2, r3
 80a1a38:	d10a      	bne.n	80a1a50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
 80a1a3a:	b009      	add	sp, #36	; 0x24
 80a1a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80a1a40:	2002      	movs	r0, #2
 80a1a42:	e7fa      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
 80a1a44:	2005      	movs	r0, #5
 80a1a46:	e7f8      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
 80a1a48:	2003      	movs	r0, #3
 80a1a4a:	e7f6      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
 80a1a4c:	2001      	movs	r0, #1
 80a1a4e:	e7f4      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
 80a1a50:	2008      	movs	r0, #8
 80a1a52:	e7f2      	b.n	80a1a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

080a1a54 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
 80a1a54:	b510      	push	{r4, lr}
 80a1a56:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1a58:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1a5c:	9200      	str	r2, [sp, #0]
 80a1a5e:	9405      	str	r4, [sp, #20]
 80a1a60:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1a64:	2230      	movs	r2, #48	; 0x30
 80a1a66:	9404      	str	r4, [sp, #16]
 80a1a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1a6a:	9403      	str	r4, [sp, #12]
 80a1a6c:	9c08      	ldr	r4, [sp, #32]
 80a1a6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a1a72:	460b      	mov	r3, r1
 80a1a74:	210c      	movs	r1, #12
 80a1a76:	f7ff ff40 	bl	80a18fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1a7a:	b006      	add	sp, #24
 80a1a7c:	bd10      	pop	{r4, pc}

080a1a7e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
 80a1a7e:	b570      	push	{r4, r5, r6, lr}
 80a1a80:	b088      	sub	sp, #32
 80a1a82:	4606      	mov	r6, r0
 80a1a84:	461c      	mov	r4, r3
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1a86:	4615      	mov	r5, r2
							   ) {
 80a1a88:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1a8c:	b31a      	cbz	r2, 80a1ad6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
 80a1a8e:	781b      	ldrb	r3, [r3, #0]
 80a1a90:	2b01      	cmp	r3, #1
 80a1a92:	d920      	bls.n	80a1ad6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1a94:	2280      	movs	r2, #128	; 0x80
 80a1a96:	211c      	movs	r1, #28
 80a1a98:	f7ff fe39 	bl	80a170e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1a9c:	2307      	movs	r3, #7
 80a1a9e:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1aa2:	2300      	movs	r3, #0
 80a1aa4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1aa8:	f10d 031f 	add.w	r3, sp, #31
 80a1aac:	e9cd 4300 	strd	r4, r3, [sp]
 80a1ab0:	2201      	movs	r2, #1
 80a1ab2:	462b      	mov	r3, r5
 80a1ab4:	4630      	mov	r0, r6
 80a1ab6:	f10d 0117 	add.w	r1, sp, #23
 80a1aba:	f7ff ffcb 	bl	80a1a54 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1abe:	2801      	cmp	r0, #1
 80a1ac0:	d107      	bne.n	80a1ad2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1ac2:	7823      	ldrb	r3, [r4, #0]
 80a1ac4:	2b02      	cmp	r3, #2
 80a1ac6:	d108      	bne.n	80a1ada <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
 80a1ac8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1acc:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 80a1ace:	bf18      	it	ne
 80a1ad0:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
 80a1ad2:	b008      	add	sp, #32
 80a1ad4:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1ad6:	2005      	movs	r0, #5
 80a1ad8:	e7fb      	b.n	80a1ad2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
 80a1ada:	2002      	movs	r0, #2
 80a1adc:	e7f9      	b.n	80a1ad2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

080a1ade <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
 80a1ade:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1ae0:	460a      	mov	r2, r1
 80a1ae2:	2126      	movs	r1, #38	; 0x26
 80a1ae4:	f7ff bfcb 	b.w	80a1a7e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1ae8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1ae8:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
 80a1aea:	b507      	push	{r0, r1, r2, lr}
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1aec:	f10d 0203 	add.w	r2, sp, #3
 80a1af0:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
 80a1af2:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1af6:	f7ff fff2 	bl	80a1ade <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1afa:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 80a1afe:	1e43      	subs	r3, r0, #1
 80a1b00:	4258      	negs	r0, r3
 80a1b02:	4158      	adcs	r0, r3
 80a1b04:	b003      	add	sp, #12
 80a1b06:	f85d fb04 	ldr.w	pc, [sp], #4

080a1b0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
 80a1b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
 80a1b0e:	2a50      	cmp	r2, #80	; 0x50
						 ) {
 80a1b10:	4682      	mov	sl, r0
 80a1b12:	460f      	mov	r7, r1
 80a1b14:	4690      	mov	r8, r2
 80a1b16:	b08b      	sub	sp, #44	; 0x2c
	if (validBits > 80) {
 80a1b18:	f200 813b 	bhi.w	80a1d92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1b1c:	2280      	movs	r2, #128	; 0x80
 80a1b1e:	211c      	movs	r1, #28
 80a1b20:	f7ff fdf5 	bl	80a170e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1b24:	2393      	movs	r3, #147	; 0x93
 80a1b26:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1b2a:	f1b8 0f00 	cmp.w	r8, #0
 80a1b2e:	f000 80b9 	beq.w	80a1ca4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
 80a1b32:	783c      	ldrb	r4, [r7, #0]
 80a1b34:	2c04      	cmp	r4, #4
 80a1b36:	bf94      	ite	ls
 80a1b38:	2300      	movls	r3, #0
 80a1b3a:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1b3c:	2501      	movs	r5, #1
 80a1b3e:	2600      	movs	r6, #0
 80a1b40:	e00b      	b.n	80a1b5a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1b42:	2395      	movs	r3, #149	; 0x95
 80a1b44:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1b48:	f1b8 0f00 	cmp.w	r8, #0
 80a1b4c:	f000 80ac 	beq.w	80a1ca8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
 80a1b50:	783c      	ldrb	r4, [r7, #0]
 80a1b52:	2c07      	cmp	r4, #7
 80a1b54:	bf94      	ite	ls
 80a1b56:	2300      	movls	r3, #0
 80a1b58:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1b5a:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
 80a1b5e:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
 80a1b60:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
 80a1b64:	2b00      	cmp	r3, #0
 80a1b66:	f000 80a1 	beq.w	80a1cac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
 80a1b6a:	2288      	movs	r2, #136	; 0x88
 80a1b6c:	2103      	movs	r1, #3
 80a1b6e:	f88d 201e 	strb.w	r2, [sp, #30]
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1b72:	f014 0207 	ands.w	r2, r4, #7
 80a1b76:	bf18      	it	ne
 80a1b78:	2201      	movne	r2, #1
 80a1b7a:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1b7e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1b82:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
 80a1b84:	d01a      	beq.n	80a1bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb2>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1b86:	2b00      	cmp	r3, #0
 80a1b88:	bf14      	ite	ne
 80a1b8a:	f04f 0c03 	movne.w	ip, #3
 80a1b8e:	f04f 0c04 	moveq.w	ip, #4
			for (count = 0; count < bytesToCopy; count++) {
 80a1b92:	4594      	cmp	ip, r2
 80a1b94:	bf94      	ite	ls
 80a1b96:	eb01 020c 	addls.w	r2, r1, ip
 80a1b9a:	188a      	addhi	r2, r1, r2
 80a1b9c:	f106 0e01 	add.w	lr, r6, #1
 80a1ba0:	44be      	add	lr, r7
 80a1ba2:	b2d2      	uxtb	r2, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1ba4:	468c      	mov	ip, r1
 80a1ba6:	3101      	adds	r1, #1
 80a1ba8:	f81e 9b01 	ldrb.w	r9, [lr], #1
 80a1bac:	b2c9      	uxtb	r1, r1
 80a1bae:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80a1bb2:	44dc      	add	ip, fp
			for (count = 0; count < bytesToCopy; count++) {
 80a1bb4:	4291      	cmp	r1, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1bb6:	f80c 9c0c 	strb.w	r9, [ip, #-12]
			for (count = 0; count < bytesToCopy; count++) {
 80a1bba:	d1f3      	bne.n	80a1ba4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
		if (useCascadeTag) {
 80a1bbc:	b113      	cbz	r3, 80a1bc4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
			currentLevelKnownBits += 8;
 80a1bbe:	f100 0408 	add.w	r4, r0, #8
 80a1bc2:	b264      	sxtb	r4, r4
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a1bc4:	2c1f      	cmp	r4, #31
 80a1bc6:	dd73      	ble.n	80a1cb0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1bc8:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1bcc:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1bd0:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1bd4:	f89d 301e 	ldrb.w	r3, [sp, #30]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1bd8:	4650      	mov	r0, sl
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1bda:	4053      	eors	r3, r2
 80a1bdc:	f89d 2020 	ldrb.w	r2, [sp, #32]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1be0:	a907      	add	r1, sp, #28
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1be2:	4053      	eors	r3, r2
 80a1be4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80a1be8:	4053      	eors	r3, r2
 80a1bea:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1bee:	2207      	movs	r2, #7
 80a1bf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a1bf4:	f7ff fd9e 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a1bf8:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1bfa:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
 80a1bfc:	f040 80c5 	bne.w	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a1c00:	2300      	movs	r3, #0
 80a1c02:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
 80a1c06:	2303      	movs	r3, #3
				bufferUsed		= 9;
 80a1c08:	f04f 0909 	mov.w	r9, #9
				responseLength	= 3;
 80a1c0c:	f88d 301b 	strb.w	r3, [sp, #27]
 80a1c10:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
 80a1c12:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a1c16:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1c1a:	211a      	movs	r1, #26
 80a1c1c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a1c20:	4650      	mov	r0, sl
 80a1c22:	b2d2      	uxtb	r2, r2
 80a1c24:	9305      	str	r3, [sp, #20]
 80a1c26:	f7ff fd1c 	bl	80a1662 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1c2a:	2200      	movs	r2, #0
 80a1c2c:	9b05      	ldr	r3, [sp, #20]
 80a1c2e:	9203      	str	r2, [sp, #12]
 80a1c30:	9302      	str	r3, [sp, #8]
 80a1c32:	f10d 031a 	add.w	r3, sp, #26
 80a1c36:	9301      	str	r3, [sp, #4]
 80a1c38:	f10d 031b 	add.w	r3, sp, #27
 80a1c3c:	464a      	mov	r2, r9
 80a1c3e:	9300      	str	r3, [sp, #0]
 80a1c40:	4650      	mov	r0, sl
 80a1c42:	465b      	mov	r3, fp
 80a1c44:	a907      	add	r1, sp, #28
 80a1c46:	f7ff ff05 	bl	80a1a54 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1c4a:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1c4c:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1c4e:	d14b      	bne.n	80a1ce8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a1c50:	211c      	movs	r1, #28
 80a1c52:	4650      	mov	r0, sl
 80a1c54:	f7ff fd35 	bl	80a16c2 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a1c58:	0681      	lsls	r1, r0, #26
 80a1c5a:	f100 8096 	bmi.w	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
					collisionPos = 32;
 80a1c5e:	f010 001f 	ands.w	r0, r0, #31
 80a1c62:	bf08      	it	eq
 80a1c64:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a1c66:	42a0      	cmp	r0, r4
 80a1c68:	f340 8084 	ble.w	80a1d74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a1c6c:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a1c6e:	f003 0207 	and.w	r2, r3, #7
 80a1c72:	f013 0307 	ands.w	r3, r3, #7
 80a1c76:	bf18      	it	ne
 80a1c78:	2301      	movne	r3, #1
				currentLevelKnownBits = collisionPos;
 80a1c7a:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a1c7c:	08c0      	lsrs	r0, r0, #3
 80a1c7e:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
 80a1c80:	4418      	add	r0, r3
 80a1c82:	ab0a      	add	r3, sp, #40	; 0x28
 80a1c84:	4418      	add	r0, r3
 80a1c86:	2301      	movs	r3, #1
 80a1c88:	fa03 f202 	lsl.w	r2, r3, r2
 80a1c8c:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 80a1c90:	4313      	orrs	r3, r2
 80a1c92:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
 80a1c96:	e795      	b.n	80a1bc4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
				buffer[0] = PICC_CMD_SEL_CL3;
 80a1c98:	2397      	movs	r3, #151	; 0x97
				uidIndex = 6;
 80a1c9a:	2606      	movs	r6, #6
				buffer[0] = PICC_CMD_SEL_CL3;
 80a1c9c:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = false;						// Never used in CL3.
 80a1ca0:	4623      	mov	r3, r4
				break;
 80a1ca2:	e75a      	b.n	80a1b5a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ca4:	4643      	mov	r3, r8
 80a1ca6:	e749      	b.n	80a1b3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ca8:	4643      	mov	r3, r8
 80a1caa:	e756      	b.n	80a1b5a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
 80a1cac:	2102      	movs	r1, #2
 80a1cae:	e760      	b.n	80a1b72 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a1cb0:	f014 0907 	ands.w	r9, r4, #7
 80a1cb4:	bf18      	it	ne
 80a1cb6:	f04f 0901 	movne.w	r9, #1
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 80a1cba:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a1cbc:	3302      	adds	r3, #2
 80a1cbe:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
 80a1cc0:	f004 0207 	and.w	r2, r4, #7
 80a1cc4:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a1cc8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a1ccc:	f88d 201d 	strb.w	r2, [sp, #29]
				responseBuffer	= &buffer[index];
 80a1cd0:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a1cd2:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
 80a1cd4:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a1cd8:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a1cdc:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
 80a1ce0:	f88d 301b 	strb.w	r3, [sp, #27]
 80a1ce4:	9404      	str	r4, [sp, #16]
 80a1ce6:	e796      	b.n	80a1c16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10c>
			else if (result != STATUS_OK) {
 80a1ce8:	2801      	cmp	r0, #1
 80a1cea:	d14e      	bne.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a1cec:	9b04      	ldr	r3, [sp, #16]
					currentLevelKnownBits = 32;
 80a1cee:	2420      	movs	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a1cf0:	2b1f      	cmp	r3, #31
 80a1cf2:	f77f af69 	ble.w	80a1bc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a1cf6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a1cfa:	2b88      	cmp	r3, #136	; 0x88
 80a1cfc:	d13d      	bne.n	80a1d7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
 80a1cfe:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a1d00:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a1d02:	3601      	adds	r6, #1
 80a1d04:	441a      	add	r2, r3
 80a1d06:	443e      	add	r6, r7
 80a1d08:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a1d0a:	4619      	mov	r1, r3
 80a1d0c:	a80a      	add	r0, sp, #40	; 0x28
 80a1d0e:	3301      	adds	r3, #1
 80a1d10:	4401      	add	r1, r0
 80a1d12:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 80a1d16:	b2db      	uxtb	r3, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a1d18:	4293      	cmp	r3, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a1d1a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
 80a1d1e:	d1f4      	bne.n	80a1d0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a1d20:	f89d 601b 	ldrb.w	r6, [sp, #27]
 80a1d24:	2e03      	cmp	r6, #3
 80a1d26:	d137      	bne.n	80a1d98 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a1d28:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a1d2c:	bba4      	cbnz	r4, 80a1d98 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a1d2e:	2201      	movs	r2, #1
 80a1d30:	4659      	mov	r1, fp
 80a1d32:	4650      	mov	r0, sl
 80a1d34:	f10d 031e 	add.w	r3, sp, #30
 80a1d38:	f7ff fcfc 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a1d3c:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a1d3e:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
 80a1d40:	d123      	bne.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a1d42:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a1d46:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80a1d4a:	429a      	cmp	r2, r3
 80a1d4c:	d127      	bne.n	80a1d9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
 80a1d4e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a1d52:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80a1d56:	429a      	cmp	r2, r3
 80a1d58:	d121      	bne.n	80a1d9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a1d5a:	f89b 3000 	ldrb.w	r3, [fp]
 80a1d5e:	075a      	lsls	r2, r3, #29
 80a1d60:	d50e      	bpl.n	80a1d80 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
			cascadeLevel++;
 80a1d62:	3501      	adds	r5, #1
 80a1d64:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
 80a1d66:	2d03      	cmp	r5, #3
 80a1d68:	d096      	beq.n	80a1c98 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18e>
 80a1d6a:	2d04      	cmp	r5, #4
 80a1d6c:	d002      	beq.n	80a1d74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
 80a1d6e:	2d02      	cmp	r5, #2
 80a1d70:	f43f aee7 	beq.w	80a1b42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
 80a1d74:	f04f 0906 	mov.w	r9, #6
 80a1d78:	e007      	b.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a1d7a:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a1d7c:	2204      	movs	r2, #4
 80a1d7e:	e7c0      	b.n	80a1d02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
	uid->size = 3 * cascadeLevel + 1;
 80a1d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a1d84:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
 80a1d86:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
 80a1d88:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
 80a1d8a:	4648      	mov	r0, r9
 80a1d8c:	b00b      	add	sp, #44	; 0x2c
 80a1d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
 80a1d92:	f04f 0907 	mov.w	r9, #7
 80a1d96:	e7f8      	b.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_ERROR;
 80a1d98:	f04f 0902 	mov.w	r9, #2
 80a1d9c:	e7f5      	b.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_CRC_WRONG;
 80a1d9e:	f04f 0908 	mov.w	r9, #8
 80a1da2:	e7f2      	b.n	80a1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>

080a1da4 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
 80a1da8:	2200      	movs	r2, #0
 80a1daa:	f7ff feae 	bl	80a1b0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a1dae:	1e43      	subs	r3, r0, #1
 80a1db0:	4258      	negs	r0, r3
 80a1db2:	4158      	adcs	r0, r3
 80a1db4:	bd08      	pop	{r3, pc}

080a1db6 <_ZN7MFRC52210PICC_HaltAEv>:
	buffer[0] = PICC_CMD_HLTA;
 80a1db6:	2350      	movs	r3, #80	; 0x50
byte MFRC522::PICC_HaltA() {
 80a1db8:	b530      	push	{r4, r5, lr}
 80a1dba:	b087      	sub	sp, #28
	buffer[0] = PICC_CMD_HLTA;
 80a1dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a1dc0:	2202      	movs	r2, #2
 80a1dc2:	f10d 0316 	add.w	r3, sp, #22
 80a1dc6:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
 80a1dc8:	4605      	mov	r5, r0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a1dca:	f7ff fcb3 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
 80a1dce:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a1dd0:	4604      	mov	r4, r0
	if (result != STATUS_OK) {
 80a1dd2:	d10f      	bne.n	80a1df4 <_ZN7MFRC52210PICC_HaltAEv+0x3e>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
 80a1dd4:	2300      	movs	r3, #0
 80a1dd6:	2204      	movs	r2, #4
 80a1dd8:	4628      	mov	r0, r5
 80a1dda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1dde:	e9cd 3300 	strd	r3, r3, [sp]
 80a1de2:	a905      	add	r1, sp, #20
 80a1de4:	f7ff fe36 	bl	80a1a54 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
 80a1de8:	2804      	cmp	r0, #4
 80a1dea:	d003      	beq.n	80a1df4 <_ZN7MFRC52210PICC_HaltAEv+0x3e>
		return STATUS_ERROR;
 80a1dec:	2801      	cmp	r0, #1
 80a1dee:	bf14      	ite	ne
 80a1df0:	4604      	movne	r4, r0
 80a1df2:	2402      	moveq	r4, #2
} // End PICC_HaltA()
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	b007      	add	sp, #28
 80a1df8:	bd30      	pop	{r4, r5, pc}

080a1dfa <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
 80a1dfa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1dfc:	4606      	mov	r6, r0
 80a1dfe:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
 80a1e00:	4614      	mov	r4, r2
 80a1e02:	b1ca      	cbz	r2, 80a1e38 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
 80a1e04:	781b      	ldrb	r3, [r3, #0]
 80a1e06:	2b11      	cmp	r3, #17
 80a1e08:	d916      	bls.n	80a1e38 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
 80a1e0a:	2330      	movs	r3, #48	; 0x30
	buffer[1] = blockAddr;
 80a1e0c:	7051      	strb	r1, [r2, #1]
	buffer[0] = PICC_CMD_MF_READ;
 80a1e0e:	7013      	strb	r3, [r2, #0]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a1e10:	4621      	mov	r1, r4
 80a1e12:	1c93      	adds	r3, r2, #2
 80a1e14:	2202      	movs	r2, #2
 80a1e16:	f7ff fc8d 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
 80a1e1a:	2801      	cmp	r0, #1
 80a1e1c:	d10a      	bne.n	80a1e34 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
 80a1e1e:	2300      	movs	r3, #0
 80a1e20:	9003      	str	r0, [sp, #12]
 80a1e22:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a1e26:	2204      	movs	r2, #4
 80a1e28:	4623      	mov	r3, r4
 80a1e2a:	4621      	mov	r1, r4
 80a1e2c:	4630      	mov	r0, r6
 80a1e2e:	9500      	str	r5, [sp, #0]
 80a1e30:	f7ff fe10 	bl	80a1a54 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
 80a1e34:	b004      	add	sp, #16
 80a1e36:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1e38:	2005      	movs	r0, #5
 80a1e3a:	e7fb      	b.n	80a1e34 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

080a1e3c <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
 80a1e3c:	b530      	push	{r4, r5, lr}
 80a1e3e:	b08b      	sub	sp, #44	; 0x2c
 80a1e40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	sendData[0] = command;
 80a1e42:	f88d 101c 	strb.w	r1, [sp, #28]
	sendData[1] = blockAddr;
 80a1e46:	f88d 201d 	strb.w	r2, [sp, #29]
	for (byte i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 80a1e4a:	f10d 011e 	add.w	r1, sp, #30
 80a1e4e:	1e5a      	subs	r2, r3, #1
 80a1e50:	3305      	adds	r3, #5
		sendData[2+i] = key->keyByte[i];
 80a1e52:	f812 5f01 	ldrb.w	r5, [r2, #1]!
	for (byte i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 80a1e56:	429a      	cmp	r2, r3
		sendData[2+i] = key->keyByte[i];
 80a1e58:	f801 5b01 	strb.w	r5, [r1], #1
	for (byte i = 0; i < MF_KEY_SIZE; i++) {	// 6 key bytes
 80a1e5c:	d1f9      	bne.n	80a1e52 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE+0x16>
		sendData[8+i] = uid->uidByte[i];
 80a1e5e:	7863      	ldrb	r3, [r4, #1]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
 80a1e60:	2210      	movs	r2, #16
		sendData[8+i] = uid->uidByte[i];
 80a1e62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80a1e66:	78a3      	ldrb	r3, [r4, #2]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
 80a1e68:	210e      	movs	r1, #14
		sendData[8+i] = uid->uidByte[i];
 80a1e6a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80a1e6e:	78e3      	ldrb	r3, [r4, #3]
 80a1e70:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80a1e74:	7923      	ldrb	r3, [r4, #4]
 80a1e76:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
 80a1e7a:	2300      	movs	r3, #0
 80a1e7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80a1e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1e84:	9301      	str	r3, [sp, #4]
 80a1e86:	230c      	movs	r3, #12
 80a1e88:	9300      	str	r3, [sp, #0]
 80a1e8a:	ab07      	add	r3, sp, #28
 80a1e8c:	f7ff fd35 	bl	80a18fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
 80a1e90:	b00b      	add	sp, #44	; 0x2c
 80a1e92:	bd30      	pop	{r4, r5, pc}

080a1e94 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>:
byte MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
 80a1e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e98:	4615      	mov	r5, r2
 80a1e9a:	4680      	mov	r8, r0
 80a1e9c:	b08c      	sub	sp, #48	; 0x30
	memcpy(cmdBuffer, sendData, sendLen);
 80a1e9e:	ae07      	add	r6, sp, #28
 80a1ea0:	4630      	mov	r0, r6
byte MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
 80a1ea2:	461f      	mov	r7, r3
	memcpy(cmdBuffer, sendData, sendLen);
 80a1ea4:	f001 f8ba 	bl	80a301c <memcpy>
	result = PCD_CalculateCRC(cmdBuffer, sendLen, &cmdBuffer[sendLen]);
 80a1ea8:	462a      	mov	r2, r5
 80a1eaa:	4631      	mov	r1, r6
 80a1eac:	4640      	mov	r0, r8
 80a1eae:	1973      	adds	r3, r6, r5
 80a1eb0:	f7ff fc40 	bl	80a1734 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) { 
 80a1eb4:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(cmdBuffer, sendLen, &cmdBuffer[sendLen]);
 80a1eb6:	4604      	mov	r4, r0
	if (result != STATUS_OK) { 
 80a1eb8:	d12a      	bne.n	80a1f10 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
	byte cmdBufferSize = sizeof(cmdBuffer);
 80a1eba:	2312      	movs	r3, #18
 80a1ebc:	f88d 301a 	strb.w	r3, [sp, #26]
	byte validBits = 0;
 80a1ec0:	2300      	movs	r3, #0
	sendLen += 2;
 80a1ec2:	3502      	adds	r5, #2
	result = PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits);
 80a1ec4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	byte validBits = 0;
 80a1ec8:	f88d 301b 	strb.w	r3, [sp, #27]
	result = PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits);
 80a1ecc:	f10d 031b 	add.w	r3, sp, #27
 80a1ed0:	9303      	str	r3, [sp, #12]
 80a1ed2:	b2ed      	uxtb	r5, r5
 80a1ed4:	f10d 031a 	add.w	r3, sp, #26
 80a1ed8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a1edc:	2230      	movs	r2, #48	; 0x30
 80a1ede:	4633      	mov	r3, r6
 80a1ee0:	210c      	movs	r1, #12
 80a1ee2:	4640      	mov	r0, r8
 80a1ee4:	9500      	str	r5, [sp, #0]
 80a1ee6:	f7ff fd08 	bl	80a18fa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
	if (acceptTimeout && result == STATUS_TIMEOUT) {
 80a1eea:	b10f      	cbz	r7, 80a1ef0 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x5c>
 80a1eec:	2804      	cmp	r0, #4
 80a1eee:	d00f      	beq.n	80a1f10 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
	if (result != STATUS_OK) {
 80a1ef0:	2801      	cmp	r0, #1
 80a1ef2:	d111      	bne.n	80a1f18 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x84>
	if (cmdBufferSize != 1 || validBits != 4) {
 80a1ef4:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a1ef8:	2c01      	cmp	r4, #1
 80a1efa:	d10f      	bne.n	80a1f1c <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x88>
 80a1efc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80a1f00:	2b04      	cmp	r3, #4
 80a1f02:	d10b      	bne.n	80a1f1c <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x88>
	if (cmdBuffer[0] != MF_ACK) {
 80a1f04:	f89d 301c 	ldrb.w	r3, [sp, #28]
		return STATUS_MIFARE_NACK;
 80a1f08:	2b0a      	cmp	r3, #10
 80a1f0a:	bf0c      	ite	eq
 80a1f0c:	4604      	moveq	r4, r0
 80a1f0e:	2409      	movne	r4, #9
} // End PCD_MIFARE_Transceive()
 80a1f10:	4620      	mov	r0, r4
 80a1f12:	b00c      	add	sp, #48	; 0x30
 80a1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1f18:	4604      	mov	r4, r0
 80a1f1a:	e7f9      	b.n	80a1f10 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
		return STATUS_ERROR;
 80a1f1c:	2402      	movs	r4, #2
 80a1f1e:	e7f7      	b.n	80a1f10 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>

080a1f20 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb>:
									) {
 80a1f20:	b410      	push	{r4}
	if (sendData == NULL || sendLen > 16) {
 80a1f22:	b121      	cbz	r1, 80a1f2e <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb+0xe>
 80a1f24:	2a10      	cmp	r2, #16
 80a1f26:	d802      	bhi.n	80a1f2e <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb+0xe>
} // End PCD_MIFARE_Transceive()
 80a1f28:	bc10      	pop	{r4}
 80a1f2a:	f7ff bfb3 	b.w	80a1e94 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>
 80a1f2e:	2007      	movs	r0, #7
 80a1f30:	bc10      	pop	{r4}
 80a1f32:	4770      	bx	lr

080a1f34 <_ZN7MFRC52212MIFARE_WriteEhPhh>:
						) {
 80a1f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1f36:	4606      	mov	r6, r0
 80a1f38:	461d      	mov	r5, r3
	if (buffer == NULL || bufferSize < 16) {
 80a1f3a:	4614      	mov	r4, r2
 80a1f3c:	b1aa      	cbz	r2, 80a1f6a <_ZN7MFRC52212MIFARE_WriteEhPhh+0x36>
 80a1f3e:	2b0f      	cmp	r3, #15
 80a1f40:	d913      	bls.n	80a1f6a <_ZN7MFRC52212MIFARE_WriteEhPhh+0x36>
	cmdBuffer[0] = PICC_CMD_MF_WRITE;
 80a1f42:	23a0      	movs	r3, #160	; 0xa0
	cmdBuffer[1] = blockAddr;
 80a1f44:	f88d 1005 	strb.w	r1, [sp, #5]
	cmdBuffer[0] = PICC_CMD_MF_WRITE;
 80a1f48:	f88d 3004 	strb.w	r3, [sp, #4]
	if (sendData == NULL || sendLen > 16) {
 80a1f4c:	2202      	movs	r2, #2
 80a1f4e:	2300      	movs	r3, #0
 80a1f50:	a901      	add	r1, sp, #4
 80a1f52:	f7ff ff9f 	bl	80a1e94 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>
	if (result != STATUS_OK) {
 80a1f56:	2801      	cmp	r0, #1
 80a1f58:	d105      	bne.n	80a1f66 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x32>
	result = PCD_MIFARE_Transceive(	buffer, bufferSize); // Adds CRC_A and checks that the response is MF_ACK.
 80a1f5a:	2300      	movs	r3, #0
 80a1f5c:	462a      	mov	r2, r5
 80a1f5e:	4621      	mov	r1, r4
 80a1f60:	4630      	mov	r0, r6
 80a1f62:	f7ff ffdd 	bl	80a1f20 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb>
} // End MIFARE_Write()
 80a1f66:	b002      	add	sp, #8
 80a1f68:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_INVALID;
 80a1f6a:	2007      	movs	r0, #7
 80a1f6c:	e7fb      	b.n	80a1f66 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x32>
	...

080a1f70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <os_mutex_recursive_create+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601d0 	.word	0x080601d0

080a1f80 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <os_mutex_recursive_destroy+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601d0 	.word	0x080601d0

080a1f90 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <os_mutex_recursive_lock+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601d0 	.word	0x080601d0

080a1fa0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b02      	ldr	r3, [pc, #8]	; (80a1fac <os_mutex_recursive_unlock+0xc>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1fa8:	9301      	str	r3, [sp, #4]
 80a1faa:	bd08      	pop	{r3, pc}
 80a1fac:	080601d0 	.word	0x080601d0

080a1fb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1fb0:	b508      	push	{r3, lr}
 80a1fb2:	4b02      	ldr	r3, [pc, #8]	; (80a1fbc <HAL_RNG_GetRandomNumber+0xc>)
 80a1fb4:	681b      	ldr	r3, [r3, #0]
 80a1fb6:	685b      	ldr	r3, [r3, #4]
 80a1fb8:	9301      	str	r3, [sp, #4]
 80a1fba:	bd08      	pop	{r3, pc}
 80a1fbc:	0806019c 	.word	0x0806019c

080a1fc0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1fc0:	b508      	push	{r3, lr}
 80a1fc2:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <HAL_Delay_Microseconds+0xc>)
 80a1fc4:	681b      	ldr	r3, [r3, #0]
 80a1fc6:	68db      	ldr	r3, [r3, #12]
 80a1fc8:	9301      	str	r3, [sp, #4]
 80a1fca:	bd08      	pop	{r3, pc}
 80a1fcc:	0806019c 	.word	0x0806019c

080a1fd0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	695b      	ldr	r3, [r3, #20]
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	0806019c 	.word	0x0806019c

080a1fe0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <HAL_Pin_Mode+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	689b      	ldr	r3, [r3, #8]
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	080601b0 	.word	0x080601b0

080a1ff0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <HAL_Get_Pin_Mode+0xc>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	68db      	ldr	r3, [r3, #12]
 80a1ff8:	9301      	str	r3, [sp, #4]
 80a1ffa:	bd08      	pop	{r3, pc}
 80a1ffc:	080601b0 	.word	0x080601b0

080a2000 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2000:	b508      	push	{r3, lr}
 80a2002:	4b02      	ldr	r3, [pc, #8]	; (80a200c <HAL_GPIO_Write+0xc>)
 80a2004:	681b      	ldr	r3, [r3, #0]
 80a2006:	691b      	ldr	r3, [r3, #16]
 80a2008:	9301      	str	r3, [sp, #4]
 80a200a:	bd08      	pop	{r3, pc}
 80a200c:	080601b0 	.word	0x080601b0

080a2010 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a2010:	b508      	push	{r3, lr}
 80a2012:	4b02      	ldr	r3, [pc, #8]	; (80a201c <HAL_GPIO_Read+0xc>)
 80a2014:	681b      	ldr	r3, [r3, #0]
 80a2016:	695b      	ldr	r3, [r3, #20]
 80a2018:	9301      	str	r3, [sp, #4]
 80a201a:	bd08      	pop	{r3, pc}
 80a201c:	080601b0 	.word	0x080601b0

080a2020 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a2020:	b508      	push	{r3, lr}
 80a2022:	4b02      	ldr	r3, [pc, #8]	; (80a202c <hal_i2c_set_speed+0xc>)
 80a2024:	681b      	ldr	r3, [r3, #0]
 80a2026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2028:	9301      	str	r3, [sp, #4]
 80a202a:	bd08      	pop	{r3, pc}
 80a202c:	080601ac 	.word	0x080601ac

080a2030 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a2030:	b508      	push	{r3, lr}
 80a2032:	4b02      	ldr	r3, [pc, #8]	; (80a203c <hal_i2c_begin+0xc>)
 80a2034:	681b      	ldr	r3, [r3, #0]
 80a2036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	bd08      	pop	{r3, pc}
 80a203c:	080601ac 	.word	0x080601ac

080a2040 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a2040:	b508      	push	{r3, lr}
 80a2042:	4b02      	ldr	r3, [pc, #8]	; (80a204c <hal_i2c_begin_transmission+0xc>)
 80a2044:	681b      	ldr	r3, [r3, #0]
 80a2046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2048:	9301      	str	r3, [sp, #4]
 80a204a:	bd08      	pop	{r3, pc}
 80a204c:	080601ac 	.word	0x080601ac

080a2050 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a2050:	b508      	push	{r3, lr}
 80a2052:	4b02      	ldr	r3, [pc, #8]	; (80a205c <hal_i2c_end_transmission+0xc>)
 80a2054:	681b      	ldr	r3, [r3, #0]
 80a2056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2058:	9301      	str	r3, [sp, #4]
 80a205a:	bd08      	pop	{r3, pc}
 80a205c:	080601ac 	.word	0x080601ac

080a2060 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a2060:	b508      	push	{r3, lr}
 80a2062:	4b02      	ldr	r3, [pc, #8]	; (80a206c <hal_i2c_write+0xc>)
 80a2064:	681b      	ldr	r3, [r3, #0]
 80a2066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2068:	9301      	str	r3, [sp, #4]
 80a206a:	bd08      	pop	{r3, pc}
 80a206c:	080601ac 	.word	0x080601ac

080a2070 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a2070:	b508      	push	{r3, lr}
 80a2072:	4b02      	ldr	r3, [pc, #8]	; (80a207c <hal_i2c_available+0xc>)
 80a2074:	681b      	ldr	r3, [r3, #0]
 80a2076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2078:	9301      	str	r3, [sp, #4]
 80a207a:	bd08      	pop	{r3, pc}
 80a207c:	080601ac 	.word	0x080601ac

080a2080 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a2080:	b508      	push	{r3, lr}
 80a2082:	4b02      	ldr	r3, [pc, #8]	; (80a208c <hal_i2c_read+0xc>)
 80a2084:	681b      	ldr	r3, [r3, #0]
 80a2086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2088:	9301      	str	r3, [sp, #4]
 80a208a:	bd08      	pop	{r3, pc}
 80a208c:	080601ac 	.word	0x080601ac

080a2090 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a2090:	b508      	push	{r3, lr}
 80a2092:	4b02      	ldr	r3, [pc, #8]	; (80a209c <hal_i2c_peek+0xc>)
 80a2094:	681b      	ldr	r3, [r3, #0]
 80a2096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2098:	9301      	str	r3, [sp, #4]
 80a209a:	bd08      	pop	{r3, pc}
 80a209c:	080601ac 	.word	0x080601ac

080a20a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a20a0:	b508      	push	{r3, lr}
 80a20a2:	4b02      	ldr	r3, [pc, #8]	; (80a20ac <hal_i2c_flush+0xc>)
 80a20a4:	681b      	ldr	r3, [r3, #0]
 80a20a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a20a8:	9301      	str	r3, [sp, #4]
 80a20aa:	bd08      	pop	{r3, pc}
 80a20ac:	080601ac 	.word	0x080601ac

080a20b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a20b0:	b508      	push	{r3, lr}
 80a20b2:	4b02      	ldr	r3, [pc, #8]	; (80a20bc <hal_i2c_is_enabled+0xc>)
 80a20b4:	681b      	ldr	r3, [r3, #0]
 80a20b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a20b8:	9301      	str	r3, [sp, #4]
 80a20ba:	bd08      	pop	{r3, pc}
 80a20bc:	080601ac 	.word	0x080601ac

080a20c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a20c0:	b508      	push	{r3, lr}
 80a20c2:	4b03      	ldr	r3, [pc, #12]	; (80a20d0 <hal_i2c_init+0x10>)
 80a20c4:	681b      	ldr	r3, [r3, #0]
 80a20c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a20ca:	9301      	str	r3, [sp, #4]
 80a20cc:	bd08      	pop	{r3, pc}
 80a20ce:	0000      	.short	0x0000
 80a20d0:	080601ac 	.word	0x080601ac

080a20d4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a20d4:	b508      	push	{r3, lr}
 80a20d6:	4b02      	ldr	r3, [pc, #8]	; (80a20e0 <hal_spi_begin+0xc>)
 80a20d8:	681b      	ldr	r3, [r3, #0]
 80a20da:	681b      	ldr	r3, [r3, #0]
 80a20dc:	9301      	str	r3, [sp, #4]
 80a20de:	bd08      	pop	{r3, pc}
 80a20e0:	080601b4 	.word	0x080601b4

080a20e4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a20e4:	b508      	push	{r3, lr}
 80a20e6:	4b02      	ldr	r3, [pc, #8]	; (80a20f0 <hal_spi_transfer+0xc>)
 80a20e8:	681b      	ldr	r3, [r3, #0]
 80a20ea:	695b      	ldr	r3, [r3, #20]
 80a20ec:	9301      	str	r3, [sp, #4]
 80a20ee:	bd08      	pop	{r3, pc}
 80a20f0:	080601b4 	.word	0x080601b4

080a20f4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a20f4:	b508      	push	{r3, lr}
 80a20f6:	4b02      	ldr	r3, [pc, #8]	; (80a2100 <hal_spi_init+0xc>)
 80a20f8:	681b      	ldr	r3, [r3, #0]
 80a20fa:	69db      	ldr	r3, [r3, #28]
 80a20fc:	9301      	str	r3, [sp, #4]
 80a20fe:	bd08      	pop	{r3, pc}
 80a2100:	080601b4 	.word	0x080601b4

080a2104 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2104:	b508      	push	{r3, lr}
 80a2106:	4b02      	ldr	r3, [pc, #8]	; (80a2110 <hal_spi_is_enabled+0xc>)
 80a2108:	681b      	ldr	r3, [r3, #0]
 80a210a:	6a1b      	ldr	r3, [r3, #32]
 80a210c:	9301      	str	r3, [sp, #4]
 80a210e:	bd08      	pop	{r3, pc}
 80a2110:	080601b4 	.word	0x080601b4

080a2114 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a2114:	b508      	push	{r3, lr}
 80a2116:	4b02      	ldr	r3, [pc, #8]	; (80a2120 <hal_spi_info+0xc>)
 80a2118:	681b      	ldr	r3, [r3, #0]
 80a211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a211c:	9301      	str	r3, [sp, #4]
 80a211e:	bd08      	pop	{r3, pc}
 80a2120:	080601b4 	.word	0x080601b4

080a2124 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a2124:	b508      	push	{r3, lr}
 80a2126:	4b02      	ldr	r3, [pc, #8]	; (80a2130 <hal_spi_set_settings+0xc>)
 80a2128:	681b      	ldr	r3, [r3, #0]
 80a212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a212c:	9301      	str	r3, [sp, #4]
 80a212e:	bd08      	pop	{r3, pc}
 80a2130:	080601b4 	.word	0x080601b4

080a2134 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a2134:	b508      	push	{r3, lr}
 80a2136:	4b02      	ldr	r3, [pc, #8]	; (80a2140 <hal_usart_init+0xc>)
 80a2138:	681b      	ldr	r3, [r3, #0]
 80a213a:	699b      	ldr	r3, [r3, #24]
 80a213c:	9301      	str	r3, [sp, #4]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	080601c4 	.word	0x080601c4

080a2144 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2144:	b508      	push	{r3, lr}
 80a2146:	4b02      	ldr	r3, [pc, #8]	; (80a2150 <hal_usart_write+0xc>)
 80a2148:	681b      	ldr	r3, [r3, #0]
 80a214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	bd08      	pop	{r3, pc}
 80a2150:	080601c4 	.word	0x080601c4

080a2154 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2154:	b508      	push	{r3, lr}
 80a2156:	4b02      	ldr	r3, [pc, #8]	; (80a2160 <hal_usart_available+0xc>)
 80a2158:	681b      	ldr	r3, [r3, #0]
 80a215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a215c:	9301      	str	r3, [sp, #4]
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	080601c4 	.word	0x080601c4

080a2164 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2164:	b508      	push	{r3, lr}
 80a2166:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <hal_usart_read+0xc>)
 80a2168:	681b      	ldr	r3, [r3, #0]
 80a216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a216c:	9301      	str	r3, [sp, #4]
 80a216e:	bd08      	pop	{r3, pc}
 80a2170:	080601c4 	.word	0x080601c4

080a2174 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <hal_usart_peek+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601c4 	.word	0x080601c4

080a2184 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <hal_usart_flush+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601c4 	.word	0x080601c4

080a2194 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <hal_usart_is_enabled+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601c4 	.word	0x080601c4

080a21a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <hal_usart_available_data_for_write+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601c4 	.word	0x080601c4

080a21b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <HAL_USB_USART_Init+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	681b      	ldr	r3, [r3, #0]
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601d8 	.word	0x080601d8

080a21c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <HAL_USB_USART_Begin+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	685b      	ldr	r3, [r3, #4]
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601d8 	.word	0x080601d8

080a21d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <HAL_USB_USART_Available_Data+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	691b      	ldr	r3, [r3, #16]
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	080601d8 	.word	0x080601d8

080a21e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b02      	ldr	r3, [pc, #8]	; (80a21f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	695b      	ldr	r3, [r3, #20]
 80a21ec:	9301      	str	r3, [sp, #4]
 80a21ee:	bd08      	pop	{r3, pc}
 80a21f0:	080601d8 	.word	0x080601d8

080a21f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a21f4:	b508      	push	{r3, lr}
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <HAL_USB_USART_Receive_Data+0xc>)
 80a21f8:	681b      	ldr	r3, [r3, #0]
 80a21fa:	699b      	ldr	r3, [r3, #24]
 80a21fc:	9301      	str	r3, [sp, #4]
 80a21fe:	bd08      	pop	{r3, pc}
 80a2200:	080601d8 	.word	0x080601d8

080a2204 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2204:	b508      	push	{r3, lr}
 80a2206:	4b02      	ldr	r3, [pc, #8]	; (80a2210 <HAL_USB_USART_Send_Data+0xc>)
 80a2208:	681b      	ldr	r3, [r3, #0]
 80a220a:	69db      	ldr	r3, [r3, #28]
 80a220c:	9301      	str	r3, [sp, #4]
 80a220e:	bd08      	pop	{r3, pc}
 80a2210:	080601d8 	.word	0x080601d8

080a2214 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2214:	b508      	push	{r3, lr}
 80a2216:	4b02      	ldr	r3, [pc, #8]	; (80a2220 <HAL_USB_USART_Flush_Data+0xc>)
 80a2218:	681b      	ldr	r3, [r3, #0]
 80a221a:	6a1b      	ldr	r3, [r3, #32]
 80a221c:	9301      	str	r3, [sp, #4]
 80a221e:	bd08      	pop	{r3, pc}
 80a2220:	080601d8 	.word	0x080601d8

080a2224 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b02      	ldr	r3, [pc, #8]	; (80a2230 <inet_gethostbyname+0xc>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a222c:	9301      	str	r3, [sp, #4]
 80a222e:	bd08      	pop	{r3, pc}
 80a2230:	080601c0 	.word	0x080601c0

080a2234 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2234:	b508      	push	{r3, lr}
 80a2236:	4b02      	ldr	r3, [pc, #8]	; (80a2240 <panic_+0xc>)
 80a2238:	681b      	ldr	r3, [r3, #0]
 80a223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a223c:	9301      	str	r3, [sp, #4]
 80a223e:	bd08      	pop	{r3, pc}
 80a2240:	080201a8 	.word	0x080201a8

080a2244 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2244:	b508      	push	{r3, lr}
 80a2246:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <set_system_mode+0xc>)
 80a2248:	681b      	ldr	r3, [r3, #0]
 80a224a:	685b      	ldr	r3, [r3, #4]
 80a224c:	9301      	str	r3, [sp, #4]
 80a224e:	bd08      	pop	{r3, pc}
 80a2250:	080601a4 	.word	0x080601a4

080a2254 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2254:	b508      	push	{r3, lr}
 80a2256:	4b02      	ldr	r3, [pc, #8]	; (80a2260 <system_delay_ms+0xc>)
 80a2258:	681b      	ldr	r3, [r3, #0]
 80a225a:	695b      	ldr	r3, [r3, #20]
 80a225c:	9301      	str	r3, [sp, #4]
 80a225e:	bd08      	pop	{r3, pc}
 80a2260:	080601a4 	.word	0x080601a4

080a2264 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2264:	b508      	push	{r3, lr}
 80a2266:	4b03      	ldr	r3, [pc, #12]	; (80a2274 <system_ctrl_set_app_request_handler+0x10>)
 80a2268:	681b      	ldr	r3, [r3, #0]
 80a226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a226e:	9301      	str	r3, [sp, #4]
 80a2270:	bd08      	pop	{r3, pc}
 80a2272:	0000      	.short	0x0000
 80a2274:	080601a4 	.word	0x080601a4

080a2278 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2278:	b508      	push	{r3, lr}
 80a227a:	4b03      	ldr	r3, [pc, #12]	; (80a2288 <system_ctrl_set_result+0x10>)
 80a227c:	681b      	ldr	r3, [r3, #0]
 80a227e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2282:	9301      	str	r3, [sp, #4]
 80a2284:	bd08      	pop	{r3, pc}
 80a2286:	0000      	.short	0x0000
 80a2288:	080601a4 	.word	0x080601a4

080a228c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a228c:	b508      	push	{r3, lr}
 80a228e:	4b02      	ldr	r3, [pc, #8]	; (80a2298 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2290:	681b      	ldr	r3, [r3, #0]
 80a2292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2294:	9301      	str	r3, [sp, #4]
 80a2296:	bd08      	pop	{r3, pc}
 80a2298:	080601cc 	.word	0x080601cc

080a229c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 80a229c:	b508      	push	{r3, lr}
 80a229e:	4b02      	ldr	r3, [pc, #8]	; (80a22a8 <spark_cloud_disconnect+0xc>)
 80a22a0:	681b      	ldr	r3, [r3, #0]
 80a22a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a22a4:	9301      	str	r3, [sp, #4]
 80a22a6:	bd08      	pop	{r3, pc}
 80a22a8:	080601cc 	.word	0x080601cc

080a22ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22ac:	b508      	push	{r3, lr}
 80a22ae:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <network_connect+0xc>)
 80a22b0:	681b      	ldr	r3, [r3, #0]
 80a22b2:	685b      	ldr	r3, [r3, #4]
 80a22b4:	9301      	str	r3, [sp, #4]
 80a22b6:	bd08      	pop	{r3, pc}
 80a22b8:	080601c8 	.word	0x080601c8

080a22bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a22bc:	b508      	push	{r3, lr}
 80a22be:	4b02      	ldr	r3, [pc, #8]	; (80a22c8 <network_connecting+0xc>)
 80a22c0:	681b      	ldr	r3, [r3, #0]
 80a22c2:	689b      	ldr	r3, [r3, #8]
 80a22c4:	9301      	str	r3, [sp, #4]
 80a22c6:	bd08      	pop	{r3, pc}
 80a22c8:	080601c8 	.word	0x080601c8

080a22cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a22cc:	b508      	push	{r3, lr}
 80a22ce:	4b02      	ldr	r3, [pc, #8]	; (80a22d8 <network_disconnect+0xc>)
 80a22d0:	681b      	ldr	r3, [r3, #0]
 80a22d2:	68db      	ldr	r3, [r3, #12]
 80a22d4:	9301      	str	r3, [sp, #4]
 80a22d6:	bd08      	pop	{r3, pc}
 80a22d8:	080601c8 	.word	0x080601c8

080a22dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a22dc:	b508      	push	{r3, lr}
 80a22de:	4b02      	ldr	r3, [pc, #8]	; (80a22e8 <network_ready+0xc>)
 80a22e0:	681b      	ldr	r3, [r3, #0]
 80a22e2:	691b      	ldr	r3, [r3, #16]
 80a22e4:	9301      	str	r3, [sp, #4]
 80a22e6:	bd08      	pop	{r3, pc}
 80a22e8:	080601c8 	.word	0x080601c8

080a22ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22ec:	b508      	push	{r3, lr}
 80a22ee:	4b02      	ldr	r3, [pc, #8]	; (80a22f8 <network_on+0xc>)
 80a22f0:	681b      	ldr	r3, [r3, #0]
 80a22f2:	695b      	ldr	r3, [r3, #20]
 80a22f4:	9301      	str	r3, [sp, #4]
 80a22f6:	bd08      	pop	{r3, pc}
 80a22f8:	080601c8 	.word	0x080601c8

080a22fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22fc:	b508      	push	{r3, lr}
 80a22fe:	4b02      	ldr	r3, [pc, #8]	; (80a2308 <network_off+0xc>)
 80a2300:	681b      	ldr	r3, [r3, #0]
 80a2302:	699b      	ldr	r3, [r3, #24]
 80a2304:	9301      	str	r3, [sp, #4]
 80a2306:	bd08      	pop	{r3, pc}
 80a2308:	080601c8 	.word	0x080601c8

080a230c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a230c:	b508      	push	{r3, lr}
 80a230e:	4b02      	ldr	r3, [pc, #8]	; (80a2318 <network_listen+0xc>)
 80a2310:	681b      	ldr	r3, [r3, #0]
 80a2312:	69db      	ldr	r3, [r3, #28]
 80a2314:	9301      	str	r3, [sp, #4]
 80a2316:	bd08      	pop	{r3, pc}
 80a2318:	080601c8 	.word	0x080601c8

080a231c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a231c:	b508      	push	{r3, lr}
 80a231e:	4b02      	ldr	r3, [pc, #8]	; (80a2328 <network_listening+0xc>)
 80a2320:	681b      	ldr	r3, [r3, #0]
 80a2322:	6a1b      	ldr	r3, [r3, #32]
 80a2324:	9301      	str	r3, [sp, #4]
 80a2326:	bd08      	pop	{r3, pc}
 80a2328:	080601c8 	.word	0x080601c8

080a232c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a232c:	b508      	push	{r3, lr}
 80a232e:	4b02      	ldr	r3, [pc, #8]	; (80a2338 <network_set_listen_timeout+0xc>)
 80a2330:	681b      	ldr	r3, [r3, #0]
 80a2332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2334:	9301      	str	r3, [sp, #4]
 80a2336:	bd08      	pop	{r3, pc}
 80a2338:	080601c8 	.word	0x080601c8

080a233c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a233c:	b508      	push	{r3, lr}
 80a233e:	4b02      	ldr	r3, [pc, #8]	; (80a2348 <network_get_listen_timeout+0xc>)
 80a2340:	681b      	ldr	r3, [r3, #0]
 80a2342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2344:	9301      	str	r3, [sp, #4]
 80a2346:	bd08      	pop	{r3, pc}
 80a2348:	080601c8 	.word	0x080601c8

080a234c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a234c:	b508      	push	{r3, lr}
 80a234e:	4b02      	ldr	r3, [pc, #8]	; (80a2358 <network_is_on+0xc>)
 80a2350:	681b      	ldr	r3, [r3, #0]
 80a2352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2354:	9301      	str	r3, [sp, #4]
 80a2356:	bd08      	pop	{r3, pc}
 80a2358:	080601c8 	.word	0x080601c8

080a235c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a235c:	b508      	push	{r3, lr}
 80a235e:	4b02      	ldr	r3, [pc, #8]	; (80a2368 <network_is_off+0xc>)
 80a2360:	681b      	ldr	r3, [r3, #0]
 80a2362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2364:	9301      	str	r3, [sp, #4]
 80a2366:	bd08      	pop	{r3, pc}
 80a2368:	080601c8 	.word	0x080601c8

080a236c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a236c:	b508      	push	{r3, lr}
 80a236e:	4b02      	ldr	r3, [pc, #8]	; (80a2378 <malloc+0xc>)
 80a2370:	681b      	ldr	r3, [r3, #0]
 80a2372:	681b      	ldr	r3, [r3, #0]
 80a2374:	9301      	str	r3, [sp, #4]
 80a2376:	bd08      	pop	{r3, pc}
 80a2378:	080601a0 	.word	0x080601a0

080a237c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a237c:	b508      	push	{r3, lr}
 80a237e:	4b02      	ldr	r3, [pc, #8]	; (80a2388 <free+0xc>)
 80a2380:	681b      	ldr	r3, [r3, #0]
 80a2382:	685b      	ldr	r3, [r3, #4]
 80a2384:	9301      	str	r3, [sp, #4]
 80a2386:	bd08      	pop	{r3, pc}
 80a2388:	080601a0 	.word	0x080601a0

080a238c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a238c:	b508      	push	{r3, lr}
 80a238e:	4b02      	ldr	r3, [pc, #8]	; (80a2398 <realloc+0xc>)
 80a2390:	681b      	ldr	r3, [r3, #0]
 80a2392:	689b      	ldr	r3, [r3, #8]
 80a2394:	9301      	str	r3, [sp, #4]
 80a2396:	bd08      	pop	{r3, pc}
 80a2398:	080601a0 	.word	0x080601a0

080a239c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a239c:	b508      	push	{r3, lr}
 80a239e:	4b02      	ldr	r3, [pc, #8]	; (80a23a8 <vsnprintf+0xc>)
 80a23a0:	681b      	ldr	r3, [r3, #0]
 80a23a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a23a4:	9301      	str	r3, [sp, #4]
 80a23a6:	bd08      	pop	{r3, pc}
 80a23a8:	080601a0 	.word	0x080601a0

080a23ac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a23ac:	b508      	push	{r3, lr}
 80a23ae:	4b02      	ldr	r3, [pc, #8]	; (80a23b8 <newlib_impure_ptr_callback+0xc>)
 80a23b0:	681b      	ldr	r3, [r3, #0]
 80a23b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a23b4:	9301      	str	r3, [sp, #4]
 80a23b6:	bd08      	pop	{r3, pc}
 80a23b8:	080601a0 	.word	0x080601a0

080a23bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a23bc:	2100      	movs	r1, #0
 80a23be:	f7ff bf49 	b.w	80a2254 <system_delay_ms>

080a23c2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 80a23c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 80a23c4:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 80a23c6:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 80a23c8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 80a23cc:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 80a23ce:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 80a23d2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 80a23d6:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 80a23d8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 80a23dc:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 80a23e0:	6843      	ldr	r3, [r0, #4]
 80a23e2:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 80a23e4:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80a23e6:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 80a23e8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80a23ec:	f7ff ff56 	bl	80a229c <spark_cloud_disconnect>
}
 80a23f0:	b005      	add	sp, #20
 80a23f2:	f85d fb04 	ldr.w	pc, [sp], #4

080a23f6 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a23f6:	4770      	bx	lr

080a23f8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a23f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23fa:	4606      	mov	r6, r0
 80a23fc:	4615      	mov	r5, r2
 80a23fe:	460c      	mov	r4, r1
 80a2400:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2402:	42bc      	cmp	r4, r7
 80a2404:	d006      	beq.n	80a2414 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2406:	6833      	ldr	r3, [r6, #0]
 80a2408:	4630      	mov	r0, r6
 80a240a:	689b      	ldr	r3, [r3, #8]
 80a240c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2410:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2412:	e7f6      	b.n	80a2402 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2414:	4628      	mov	r0, r5
 80a2416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2418 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2418:	2200      	movs	r2, #0
 80a241a:	7c00      	ldrb	r0, [r0, #16]
 80a241c:	f7ff be20 	b.w	80a2060 <hal_i2c_write>

080a2420 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2420:	2100      	movs	r1, #0
 80a2422:	7c00      	ldrb	r0, [r0, #16]
 80a2424:	f7ff be24 	b.w	80a2070 <hal_i2c_available>

080a2428 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2428:	2100      	movs	r1, #0
 80a242a:	7c00      	ldrb	r0, [r0, #16]
 80a242c:	f7ff be28 	b.w	80a2080 <hal_i2c_read>

080a2430 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2430:	2100      	movs	r1, #0
 80a2432:	7c00      	ldrb	r0, [r0, #16]
 80a2434:	f7ff be2c 	b.w	80a2090 <hal_i2c_peek>

080a2438 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2438:	2100      	movs	r1, #0
 80a243a:	7c00      	ldrb	r0, [r0, #16]
 80a243c:	f7ff be30 	b.w	80a20a0 <hal_i2c_flush>

080a2440 <_ZN7TwoWireD0Ev>:
 80a2440:	b510      	push	{r4, lr}
 80a2442:	4604      	mov	r4, r0
 80a2444:	2114      	movs	r1, #20
 80a2446:	f000 fddf 	bl	80a3008 <_ZdlPvj>
 80a244a:	4620      	mov	r0, r4
 80a244c:	bd10      	pop	{r4, pc}
	...

080a2450 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2450:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2456:	4604      	mov	r4, r0
 80a2458:	4608      	mov	r0, r1
 80a245a:	2100      	movs	r1, #0
 80a245c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2460:	4b03      	ldr	r3, [pc, #12]	; (80a2470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2462:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2464:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2466:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2468:	f7ff fe2a 	bl	80a20c0 <hal_i2c_init>
}
 80a246c:	4620      	mov	r0, r4
 80a246e:	bd10      	pop	{r4, pc}
 80a2470:	080a40a0 	.word	0x080a40a0

080a2474 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a2474:	2200      	movs	r2, #0
 80a2476:	7c00      	ldrb	r0, [r0, #16]
 80a2478:	f7ff bdd2 	b.w	80a2020 <hal_i2c_set_speed>

080a247c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a247c:	2300      	movs	r3, #0
 80a247e:	7c00      	ldrb	r0, [r0, #16]
 80a2480:	461a      	mov	r2, r3
 80a2482:	4619      	mov	r1, r3
 80a2484:	f7ff bdd4 	b.w	80a2030 <hal_i2c_begin>

080a2488 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a2488:	2200      	movs	r2, #0
 80a248a:	7c00      	ldrb	r0, [r0, #16]
 80a248c:	f7ff bdd8 	b.w	80a2040 <hal_i2c_begin_transmission>

080a2490 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a2490:	b2c9      	uxtb	r1, r1
 80a2492:	f7ff bff9 	b.w	80a2488 <_ZN7TwoWire17beginTransmissionEh>

080a2496 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a2496:	2200      	movs	r2, #0
 80a2498:	7c00      	ldrb	r0, [r0, #16]
 80a249a:	f7ff bdd9 	b.w	80a2050 <hal_i2c_end_transmission>

080a249e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a249e:	2101      	movs	r1, #1
 80a24a0:	f7ff bff9 	b.w	80a2496 <_ZN7TwoWire15endTransmissionEh>

080a24a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24a4:	4770      	bx	lr

080a24a6 <_ZN9IPAddressD0Ev>:
 80a24a6:	b510      	push	{r4, lr}
 80a24a8:	4604      	mov	r4, r0
 80a24aa:	2118      	movs	r1, #24
 80a24ac:	f000 fdac 	bl	80a3008 <_ZdlPvj>
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	bd10      	pop	{r4, pc}

080a24b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a24b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24b6:	460e      	mov	r6, r1
 80a24b8:	2400      	movs	r4, #0
 80a24ba:	f100 0708 	add.w	r7, r0, #8
 80a24be:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a24c0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a24c4:	220a      	movs	r2, #10
 80a24c6:	4630      	mov	r0, r6
 80a24c8:	f000 f909 	bl	80a26de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a24cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a24ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a24d0:	d101      	bne.n	80a24d6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a24d2:	4620      	mov	r0, r4
 80a24d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a24d6:	2c00      	cmp	r4, #0
 80a24d8:	d0f2      	beq.n	80a24c0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a24da:	212e      	movs	r1, #46	; 0x2e
 80a24dc:	4630      	mov	r0, r6
 80a24de:	f000 f8e5 	bl	80a26ac <_ZN5Print5printEc>
 80a24e2:	4404      	add	r4, r0
 80a24e4:	e7ec      	b.n	80a24c0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a24e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a24e8:	b510      	push	{r4, lr}
 80a24ea:	4604      	mov	r4, r0
 80a24ec:	4b04      	ldr	r3, [pc, #16]	; (80a2500 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a24ee:	2211      	movs	r2, #17
 80a24f0:	2100      	movs	r1, #0
 80a24f2:	f840 3b04 	str.w	r3, [r0], #4
 80a24f6:	f000 fd9f 	bl	80a3038 <memset>
}
 80a24fa:	4620      	mov	r0, r4
 80a24fc:	bd10      	pop	{r4, pc}
 80a24fe:	bf00      	nop
 80a2500:	080a40c8 	.word	0x080a40c8

080a2504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2504:	4603      	mov	r3, r0
 80a2506:	4a07      	ldr	r2, [pc, #28]	; (80a2524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2508:	b510      	push	{r4, lr}
 80a250a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a250e:	f101 0210 	add.w	r2, r1, #16
 80a2512:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2516:	4291      	cmp	r1, r2
 80a2518:	f843 4b04 	str.w	r4, [r3], #4
 80a251c:	d1f9      	bne.n	80a2512 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a251e:	780a      	ldrb	r2, [r1, #0]
 80a2520:	701a      	strb	r2, [r3, #0]
}
 80a2522:	bd10      	pop	{r4, pc}
 80a2524:	080a40c8 	.word	0x080a40c8

080a2528 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a2528:	4a02      	ldr	r2, [pc, #8]	; (80a2534 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a252a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a252e:	2204      	movs	r2, #4
 80a2530:	7502      	strb	r2, [r0, #20]
}
 80a2532:	4770      	bx	lr
 80a2534:	080a40c8 	.word	0x080a40c8

080a2538 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2538:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a253a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a253e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2542:	2304      	movs	r3, #4
 80a2544:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2548:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a254c:	6044      	str	r4, [r0, #4]
 80a254e:	7503      	strb	r3, [r0, #20]
}
 80a2550:	bd10      	pop	{r4, pc}
	...

080a2554 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2556:	4d04      	ldr	r5, [pc, #16]	; (80a2568 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2558:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a255a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a255e:	9500      	str	r5, [sp, #0]
 80a2560:	f7ff ffea 	bl	80a2538 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2564:	b003      	add	sp, #12
 80a2566:	bd30      	pop	{r4, r5, pc}
 80a2568:	080a40c8 	.word	0x080a40c8

080a256c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a256c:	4b01      	ldr	r3, [pc, #4]	; (80a2574 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a256e:	4a02      	ldr	r2, [pc, #8]	; (80a2578 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2570:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2572:	4770      	bx	lr
 80a2574:	20000134 	.word	0x20000134
 80a2578:	080a40d4 	.word	0x080a40d4

080a257c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a257c:	2300      	movs	r3, #0
 80a257e:	6840      	ldr	r0, [r0, #4]
 80a2580:	461a      	mov	r2, r3
 80a2582:	f7ff be93 	b.w	80a22ac <network_connect>

080a2586 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2586:	2200      	movs	r2, #0
 80a2588:	2102      	movs	r1, #2
 80a258a:	6840      	ldr	r0, [r0, #4]
 80a258c:	f7ff be9e 	b.w	80a22cc <network_disconnect>

080a2590 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2590:	2200      	movs	r2, #0
 80a2592:	6840      	ldr	r0, [r0, #4]
 80a2594:	4611      	mov	r1, r2
 80a2596:	f7ff be91 	b.w	80a22bc <network_connecting>

080a259a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a259a:	2200      	movs	r2, #0
 80a259c:	6840      	ldr	r0, [r0, #4]
 80a259e:	4611      	mov	r1, r2
 80a25a0:	f7ff be9c 	b.w	80a22dc <network_ready>

080a25a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a25a4:	2300      	movs	r3, #0
 80a25a6:	6840      	ldr	r0, [r0, #4]
 80a25a8:	461a      	mov	r2, r3
 80a25aa:	4619      	mov	r1, r3
 80a25ac:	f7ff be9e 	b.w	80a22ec <network_on>

080a25b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a25b0:	2300      	movs	r3, #0
 80a25b2:	6840      	ldr	r0, [r0, #4]
 80a25b4:	461a      	mov	r2, r3
 80a25b6:	4619      	mov	r1, r3
 80a25b8:	f7ff bea0 	b.w	80a22fc <network_off>

080a25bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a25bc:	2100      	movs	r1, #0
 80a25be:	6840      	ldr	r0, [r0, #4]
 80a25c0:	f7ff bec4 	b.w	80a234c <network_is_on>

080a25c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a25c4:	2100      	movs	r1, #0
 80a25c6:	6840      	ldr	r0, [r0, #4]
 80a25c8:	f7ff bec8 	b.w	80a235c <network_is_off>

080a25cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a25cc:	2200      	movs	r2, #0
 80a25ce:	6840      	ldr	r0, [r0, #4]
 80a25d0:	f081 0101 	eor.w	r1, r1, #1
 80a25d4:	f7ff be9a 	b.w	80a230c <network_listen>

080a25d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a25d8:	2200      	movs	r2, #0
 80a25da:	6840      	ldr	r0, [r0, #4]
 80a25dc:	f7ff bea6 	b.w	80a232c <network_set_listen_timeout>

080a25e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a25e0:	2200      	movs	r2, #0
 80a25e2:	6840      	ldr	r0, [r0, #4]
 80a25e4:	4611      	mov	r1, r2
 80a25e6:	f7ff bea9 	b.w	80a233c <network_get_listen_timeout>

080a25ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a25ea:	2200      	movs	r2, #0
 80a25ec:	6840      	ldr	r0, [r0, #4]
 80a25ee:	4611      	mov	r1, r2
 80a25f0:	f7ff be94 	b.w	80a231c <network_listening>

080a25f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a25f4:	b570      	push	{r4, r5, r6, lr}
 80a25f6:	4615      	mov	r5, r2
 80a25f8:	b08e      	sub	sp, #56	; 0x38
 80a25fa:	4604      	mov	r4, r0
    IPAddress addr;
 80a25fc:	a808      	add	r0, sp, #32
 80a25fe:	f7ff ff73 	bl	80a24e8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2602:	2211      	movs	r2, #17
 80a2604:	2100      	movs	r1, #0
 80a2606:	a803      	add	r0, sp, #12
 80a2608:	f000 fd16 	bl	80a3038 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a260c:	2600      	movs	r6, #0
 80a260e:	4628      	mov	r0, r5
 80a2610:	f000 fd3e 	bl	80a3090 <strlen>
 80a2614:	4b0a      	ldr	r3, [pc, #40]	; (80a2640 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2616:	9600      	str	r6, [sp, #0]
 80a2618:	b281      	uxth	r1, r0
 80a261a:	685b      	ldr	r3, [r3, #4]
 80a261c:	4628      	mov	r0, r5
 80a261e:	aa03      	add	r2, sp, #12
 80a2620:	f7ff fe00 	bl	80a2224 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2624:	b130      	cbz	r0, 80a2634 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2626:	4631      	mov	r1, r6
 80a2628:	4620      	mov	r0, r4
 80a262a:	f7ff ff7d 	bl	80a2528 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a262e:	4620      	mov	r0, r4
 80a2630:	b00e      	add	sp, #56	; 0x38
 80a2632:	bd70      	pop	{r4, r5, r6, pc}
 80a2634:	4620      	mov	r0, r4
 80a2636:	a903      	add	r1, sp, #12
 80a2638:	f7ff ff64 	bl	80a2504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a263c:	e7f7      	b.n	80a262e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a263e:	bf00      	nop
 80a2640:	200005b8 	.word	0x200005b8

080a2644 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2644:	4b02      	ldr	r3, [pc, #8]	; (80a2650 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2646:	4a03      	ldr	r2, [pc, #12]	; (80a2654 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2648:	601a      	str	r2, [r3, #0]
 80a264a:	2200      	movs	r2, #0
 80a264c:	605a      	str	r2, [r3, #4]

} // spark
 80a264e:	4770      	bx	lr
 80a2650:	20000138 	.word	0x20000138
 80a2654:	080a40e0 	.word	0x080a40e0

080a2658 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a265a:	4606      	mov	r6, r0
 80a265c:	460d      	mov	r5, r1
  size_t n = 0;
 80a265e:	2400      	movs	r4, #0
 80a2660:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2662:	42bd      	cmp	r5, r7
 80a2664:	d00c      	beq.n	80a2680 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2666:	6833      	ldr	r3, [r6, #0]
 80a2668:	4630      	mov	r0, r6
 80a266a:	689b      	ldr	r3, [r3, #8]
 80a266c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2670:	4798      	blx	r3
     if (chunk>=0)
 80a2672:	1e03      	subs	r3, r0, #0
 80a2674:	db01      	blt.n	80a267a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2676:	441c      	add	r4, r3
  while (size--) {
 80a2678:	e7f3      	b.n	80a2662 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a267a:	2c00      	cmp	r4, #0
 80a267c:	bf08      	it	eq
 80a267e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2680:	4620      	mov	r0, r4
 80a2682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2684 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a2684:	b570      	push	{r4, r5, r6, lr}
 80a2686:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2688:	460c      	mov	r4, r1
    }
 80a268a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a268c:	b149      	cbz	r1, 80a26a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a268e:	f000 fcff 	bl	80a3090 <strlen>
 80a2692:	682b      	ldr	r3, [r5, #0]
 80a2694:	4602      	mov	r2, r0
 80a2696:	4621      	mov	r1, r4
 80a2698:	4628      	mov	r0, r5
    }
 80a269a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a269e:	68db      	ldr	r3, [r3, #12]
 80a26a0:	4718      	bx	r3
    }
 80a26a2:	bd70      	pop	{r4, r5, r6, pc}

080a26a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a26a4:	b508      	push	{r3, lr}
  return write(str);
 80a26a6:	f7ff ffed 	bl	80a2684 <_ZN5Print5writeEPKc>
}
 80a26aa:	bd08      	pop	{r3, pc}

080a26ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a26ac:	6803      	ldr	r3, [r0, #0]
 80a26ae:	689b      	ldr	r3, [r3, #8]
 80a26b0:	4718      	bx	r3

080a26b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a26b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a26b4:	210d      	movs	r1, #13
{
 80a26b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a26b8:	f7ff fff8 	bl	80a26ac <_ZN5Print5printEc>
  n += print('\n');
 80a26bc:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a26be:	4604      	mov	r4, r0
  n += print('\n');
 80a26c0:	4628      	mov	r0, r5
 80a26c2:	f7ff fff3 	bl	80a26ac <_ZN5Print5printEc>
  return n;
}
 80a26c6:	4420      	add	r0, r4
 80a26c8:	bd38      	pop	{r3, r4, r5, pc}

080a26ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a26ca:	b538      	push	{r3, r4, r5, lr}
 80a26cc:	4605      	mov	r5, r0
  return write(str);
 80a26ce:	f7ff ffd9 	bl	80a2684 <_ZN5Print5writeEPKc>
 80a26d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a26d4:	4628      	mov	r0, r5
 80a26d6:	f7ff ffec 	bl	80a26b2 <_ZN5Print7printlnEv>
  return n;
}
 80a26da:	4420      	add	r0, r4
 80a26dc:	bd38      	pop	{r3, r4, r5, pc}

080a26de <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a26de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a26e0:	2a01      	cmp	r2, #1
 80a26e2:	bf98      	it	ls
 80a26e4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a26e6:	b530      	push	{r4, r5, lr}
 80a26e8:	b08b      	sub	sp, #44	; 0x2c
 80a26ea:	460c      	mov	r4, r1
  *str = '\0';
 80a26ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a26f0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a26f2:	4625      	mov	r5, r4
 80a26f4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a26f8:	fb04 5312 	mls	r3, r4, r2, r5
 80a26fc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a26fe:	2b09      	cmp	r3, #9
 80a2700:	bf94      	ite	ls
 80a2702:	3330      	addls	r3, #48	; 0x30
 80a2704:	3337      	addhi	r3, #55	; 0x37
 80a2706:	b2db      	uxtb	r3, r3
  } while(n);
 80a2708:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a270a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a270e:	d9f0      	bls.n	80a26f2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2710:	f7ff ffb8 	bl	80a2684 <_ZN5Print5writeEPKc>
}
 80a2714:	b00b      	add	sp, #44	; 0x2c
 80a2716:	bd30      	pop	{r4, r5, pc}

080a2718 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a271c:	b086      	sub	sp, #24
 80a271e:	af00      	add	r7, sp, #0
 80a2720:	4605      	mov	r5, r0
 80a2722:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2724:	1d38      	adds	r0, r7, #4
 80a2726:	2114      	movs	r1, #20
{
 80a2728:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a272a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a272c:	f7ff fe36 	bl	80a239c <vsnprintf>

    if (n<bufsize)
 80a2730:	2813      	cmp	r0, #19
 80a2732:	d80e      	bhi.n	80a2752 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2734:	4628      	mov	r0, r5
 80a2736:	1d39      	adds	r1, r7, #4
 80a2738:	f7ff ffa4 	bl	80a2684 <_ZN5Print5writeEPKc>
 80a273c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a273e:	b11e      	cbz	r6, 80a2748 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a2740:	4628      	mov	r0, r5
 80a2742:	f7ff ffb6 	bl	80a26b2 <_ZN5Print7printlnEv>
 80a2746:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2748:	4620      	mov	r0, r4
 80a274a:	3718      	adds	r7, #24
 80a274c:	46bd      	mov	sp, r7
 80a274e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a2752:	f100 0308 	add.w	r3, r0, #8
 80a2756:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a275a:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a275c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a2760:	4622      	mov	r2, r4
 80a2762:	1c41      	adds	r1, r0, #1
 80a2764:	683b      	ldr	r3, [r7, #0]
 80a2766:	4668      	mov	r0, sp
 80a2768:	f7ff fe18 	bl	80a239c <vsnprintf>
  return write(str);
 80a276c:	4669      	mov	r1, sp
 80a276e:	4628      	mov	r0, r5
 80a2770:	f7ff ff88 	bl	80a2684 <_ZN5Print5writeEPKc>
 80a2774:	4604      	mov	r4, r0
 80a2776:	46c5      	mov	sp, r8
 80a2778:	e7e1      	b.n	80a273e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

080a277c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a277c:	2200      	movs	r2, #0
 80a277e:	4b01      	ldr	r3, [pc, #4]	; (80a2784 <_GLOBAL__sub_I_RGB+0x8>)
 80a2780:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2782:	4770      	bx	lr
 80a2784:	20000140 	.word	0x20000140

080a2788 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2788:	6880      	ldr	r0, [r0, #8]
 80a278a:	f7ff bc09 	b.w	80a1fa0 <os_mutex_recursive_unlock>

080a278e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a278e:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a2790:	2600      	movs	r6, #0
 80a2792:	4604      	mov	r4, r0
 80a2794:	460d      	mov	r5, r1
 80a2796:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a279a:	f7ff fbe9 	bl	80a1f70 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a279e:	4628      	mov	r0, r5
    _spi = spi;
 80a27a0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a27a2:	f7ff fca7 	bl	80a20f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a27a6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a27a8:	6066      	str	r6, [r4, #4]
}
 80a27aa:	bd70      	pop	{r4, r5, r6, pc}

080a27ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a27ac:	b510      	push	{r4, lr}
 80a27ae:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a27b0:	6880      	ldr	r0, [r0, #8]
 80a27b2:	f7ff fbed 	bl	80a1f90 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a27b6:	7820      	ldrb	r0, [r4, #0]
 80a27b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a27bc:	f7ff fc8a 	bl	80a20d4 <hal_spi_begin>
        unlock();
 80a27c0:	4620      	mov	r0, r4
 80a27c2:	f7ff ffe1 	bl	80a2788 <_ZN8SPIClass6unlockEv>
    }
}
 80a27c6:	bd10      	pop	{r4, pc}

080a27c8 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a27c8:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a27ca:	f7ff ffdd 	bl	80a2788 <_ZN8SPIClass6unlockEv>
}
 80a27ce:	bd08      	pop	{r3, pc}

080a27d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a27d0:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a27d2:	2400      	movs	r4, #0
 80a27d4:	0840      	lsrs	r0, r0, #1
 80a27d6:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a27d8:	6818      	ldr	r0, [r3, #0]
 80a27da:	b2e5      	uxtb	r5, r4
 80a27dc:	4288      	cmp	r0, r1
 80a27de:	d906      	bls.n	80a27ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a27e0:	3401      	adds	r4, #1
 80a27e2:	2c08      	cmp	r4, #8
 80a27e4:	d002      	beq.n	80a27ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a27e6:	0840      	lsrs	r0, r0, #1
 80a27e8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a27ea:	e7f5      	b.n	80a27d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a27ec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a27ee:	4b02      	ldr	r3, [pc, #8]	; (80a27f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a27f0:	5d5b      	ldrb	r3, [r3, r5]
 80a27f2:	7013      	strb	r3, [r2, #0]
}
 80a27f4:	bd30      	pop	{r4, r5, pc}
 80a27f6:	bf00      	nop
 80a27f8:	080a4114 	.word	0x080a4114

080a27fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a27fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2800:	4606      	mov	r6, r0
 80a2802:	b08f      	sub	sp, #60	; 0x3c
 80a2804:	6880      	ldr	r0, [r0, #8]
 80a2806:	460c      	mov	r4, r1
 80a2808:	f7ff fbc2 	bl	80a1f90 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a280c:	2214      	movs	r2, #20
 80a280e:	2100      	movs	r1, #0
 80a2810:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a2812:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a2814:	f000 fc10 	bl	80a3038 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2818:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a281a:	2200      	movs	r2, #0
 80a281c:	4628      	mov	r0, r5
 80a281e:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a2820:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a2824:	f7ff fc76 	bl	80a2114 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a2828:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a282c:	b113      	cbz	r3, 80a2834 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a282e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2832:	b155      	cbz	r5, 80a284a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a2834:	2700      	movs	r7, #0
 80a2836:	2501      	movs	r5, #1
 80a2838:	46b9      	mov	r9, r7
 80a283a:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a283c:	7923      	ldrb	r3, [r4, #4]
 80a283e:	b15d      	cbz	r5, 80a2858 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a2840:	b1c3      	cbz	r3, 80a2874 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a2842:	2000      	movs	r0, #0
 80a2844:	b00f      	add	sp, #60	; 0x3c
 80a2846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a284a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a284e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a2852:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a2856:	e7f1      	b.n	80a283c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a2858:	2b00      	cmp	r3, #0
 80a285a:	d135      	bne.n	80a28c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a285c:	68a3      	ldr	r3, [r4, #8]
 80a285e:	4543      	cmp	r3, r8
 80a2860:	d108      	bne.n	80a2874 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2862:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2866:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a286a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a286e:	89a3      	ldrh	r3, [r4, #12]
 80a2870:	429a      	cmp	r2, r3
 80a2872:	d0e6      	beq.n	80a2842 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a2874:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a2876:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a2878:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a287c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a287e:	ab04      	add	r3, sp, #16
 80a2880:	f10d 020f 	add.w	r2, sp, #15
 80a2884:	f7ff ffa4 	bl	80a27d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2888:	7921      	ldrb	r1, [r4, #4]
 80a288a:	b985      	cbnz	r5, 80a28ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a288c:	b989      	cbnz	r1, 80a28b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a288e:	68a3      	ldr	r3, [r4, #8]
 80a2890:	4543      	cmp	r3, r8
 80a2892:	d30e      	bcc.n	80a28b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2894:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2898:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a289c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a28a0:	89a3      	ldrh	r3, [r4, #12]
 80a28a2:	429a      	cmp	r2, r3
 80a28a4:	d105      	bne.n	80a28b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a28a6:	9b04      	ldr	r3, [sp, #16]
 80a28a8:	4543      	cmp	r3, r8
 80a28aa:	d102      	bne.n	80a28b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a28ac:	e7c9      	b.n	80a2842 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a28ae:	2900      	cmp	r1, #0
 80a28b0:	d1f9      	bne.n	80a28a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a28b2:	2300      	movs	r3, #0
 80a28b4:	9301      	str	r3, [sp, #4]
 80a28b6:	7b63      	ldrb	r3, [r4, #13]
 80a28b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a28bc:	9300      	str	r3, [sp, #0]
 80a28be:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a28c0:	7830      	ldrb	r0, [r6, #0]
 80a28c2:	f7ff fc2f 	bl	80a2124 <hal_spi_set_settings>
    return 0;
 80a28c6:	e7bc      	b.n	80a2842 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a28c8:	462b      	mov	r3, r5
 80a28ca:	462a      	mov	r2, r5
 80a28cc:	2101      	movs	r1, #1
 80a28ce:	e9cd 5500 	strd	r5, r5, [sp]
 80a28d2:	e7f5      	b.n	80a28c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a28d4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a28d4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a28d6:	7800      	ldrb	r0, [r0, #0]
 80a28d8:	f7ff fc04 	bl	80a20e4 <hal_spi_transfer>
}
 80a28dc:	b2c0      	uxtb	r0, r0
 80a28de:	bd08      	pop	{r3, pc}

080a28e0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a28e0:	b510      	push	{r4, lr}
 80a28e2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a28e4:	6800      	ldr	r0, [r0, #0]
 80a28e6:	b108      	cbz	r0, 80a28ec <_ZN6String10invalidateEv+0xc>
 80a28e8:	f7ff fd48 	bl	80a237c <free>
	buffer = NULL;
 80a28ec:	2300      	movs	r3, #0
	capacity = len = 0;
 80a28ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a28f2:	6023      	str	r3, [r4, #0]
}
 80a28f4:	bd10      	pop	{r4, pc}

080a28f6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a28f6:	b538      	push	{r3, r4, r5, lr}
 80a28f8:	4604      	mov	r4, r0
 80a28fa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a28fc:	6800      	ldr	r0, [r0, #0]
 80a28fe:	3101      	adds	r1, #1
 80a2900:	f7ff fd44 	bl	80a238c <realloc>
	if (newbuffer) {
 80a2904:	b110      	cbz	r0, 80a290c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2906:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a290a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a290c:	bd38      	pop	{r3, r4, r5, pc}

080a290e <_ZN6String7reserveEj>:
{
 80a290e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2910:	6803      	ldr	r3, [r0, #0]
{
 80a2912:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2914:	b123      	cbz	r3, 80a2920 <_ZN6String7reserveEj+0x12>
 80a2916:	6843      	ldr	r3, [r0, #4]
 80a2918:	428b      	cmp	r3, r1
 80a291a:	d301      	bcc.n	80a2920 <_ZN6String7reserveEj+0x12>
 80a291c:	2001      	movs	r0, #1
}
 80a291e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2920:	4620      	mov	r0, r4
 80a2922:	f7ff ffe8 	bl	80a28f6 <_ZN6String12changeBufferEj>
 80a2926:	2800      	cmp	r0, #0
 80a2928:	d0f9      	beq.n	80a291e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a292a:	68a3      	ldr	r3, [r4, #8]
 80a292c:	2b00      	cmp	r3, #0
 80a292e:	d1f5      	bne.n	80a291c <_ZN6String7reserveEj+0xe>
 80a2930:	6822      	ldr	r2, [r4, #0]
 80a2932:	7013      	strb	r3, [r2, #0]
 80a2934:	e7f2      	b.n	80a291c <_ZN6String7reserveEj+0xe>

080a2936 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2936:	b570      	push	{r4, r5, r6, lr}
 80a2938:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a293a:	4611      	mov	r1, r2
{
 80a293c:	4604      	mov	r4, r0
 80a293e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2940:	f7ff ffe5 	bl	80a290e <_ZN6String7reserveEj>
 80a2944:	b920      	cbnz	r0, 80a2950 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2946:	4620      	mov	r0, r4
 80a2948:	f7ff ffca 	bl	80a28e0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a294c:	4620      	mov	r0, r4
 80a294e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2950:	462a      	mov	r2, r5
 80a2952:	4631      	mov	r1, r6
 80a2954:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2956:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2958:	f000 fb60 	bl	80a301c <memcpy>
	buffer[len] = 0;
 80a295c:	2100      	movs	r1, #0
 80a295e:	6822      	ldr	r2, [r4, #0]
 80a2960:	68a3      	ldr	r3, [r4, #8]
 80a2962:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2964:	e7f2      	b.n	80a294c <_ZN6String4copyEPKcj+0x16>

080a2966 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2966:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2968:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a296a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a296c:	460d      	mov	r5, r1
	capacity = 0;
 80a296e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2972:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2974:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2976:	b139      	cbz	r1, 80a2988 <_ZN6StringC1EPKc+0x22>
 80a2978:	4608      	mov	r0, r1
 80a297a:	f000 fb89 	bl	80a3090 <strlen>
 80a297e:	4629      	mov	r1, r5
 80a2980:	4602      	mov	r2, r0
 80a2982:	4620      	mov	r0, r4
 80a2984:	f7ff ffd7 	bl	80a2936 <_ZN6String4copyEPKcj>
}
 80a2988:	4620      	mov	r0, r4
 80a298a:	bd38      	pop	{r3, r4, r5, pc}

080a298c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a298c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a298e:	2000      	movs	r0, #0
 80a2990:	4b04      	ldr	r3, [pc, #16]	; (80a29a4 <_GLOBAL__sub_I_System+0x18>)
 80a2992:	601a      	str	r2, [r3, #0]
 80a2994:	4b04      	ldr	r3, [pc, #16]	; (80a29a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2996:	4a05      	ldr	r2, [pc, #20]	; (80a29ac <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2998:	6018      	str	r0, [r3, #0]
 80a299a:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a299c:	7198      	strb	r0, [r3, #6]
 80a299e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a29a0:	f7ff bc50 	b.w	80a2244 <set_system_mode>
 80a29a4:	2000015c 	.word	0x2000015c
 80a29a8:	20000150 	.word	0x20000150
 80a29ac:	ffff0000 	.word	0xffff0000

080a29b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a29b0:	4b02      	ldr	r3, [pc, #8]	; (80a29bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a29b2:	681a      	ldr	r2, [r3, #0]
 80a29b4:	4b02      	ldr	r3, [pc, #8]	; (80a29c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a29b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a29b8:	4770      	bx	lr
 80a29ba:	bf00      	nop
 80a29bc:	2000001c 	.word	0x2000001c
 80a29c0:	20000160 	.word	0x20000160

080a29c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a29c4:	4770      	bx	lr

080a29c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a29c6:	7441      	strb	r1, [r0, #17]
}
 80a29c8:	4770      	bx	lr

080a29ca <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a29ca:	4770      	bx	lr

080a29cc <_ZN11USARTSerial17availableForWriteEv>:
{
 80a29cc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a29ce:	7c00      	ldrb	r0, [r0, #16]
 80a29d0:	f7ff fbe8 	bl	80a21a4 <hal_usart_available_data_for_write>
}
 80a29d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a29d8:	bd08      	pop	{r3, pc}

080a29da <_ZN11USARTSerial9availableEv>:
{
 80a29da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a29dc:	7c00      	ldrb	r0, [r0, #16]
 80a29de:	f7ff fbb9 	bl	80a2154 <hal_usart_available>
}
 80a29e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a29e6:	bd08      	pop	{r3, pc}

080a29e8 <_ZN11USARTSerial4peekEv>:
{
 80a29e8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a29ea:	7c00      	ldrb	r0, [r0, #16]
 80a29ec:	f7ff fbc2 	bl	80a2174 <hal_usart_peek>
}
 80a29f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a29f4:	bd08      	pop	{r3, pc}

080a29f6 <_ZN11USARTSerial4readEv>:
{
 80a29f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a29f8:	7c00      	ldrb	r0, [r0, #16]
 80a29fa:	f7ff fbb3 	bl	80a2164 <hal_usart_read>
}
 80a29fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2a02:	bd08      	pop	{r3, pc}

080a2a04 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a2a04:	7c00      	ldrb	r0, [r0, #16]
 80a2a06:	f7ff bbbd 	b.w	80a2184 <hal_usart_flush>

080a2a0a <_ZN11USARTSerial5writeEh>:
{
 80a2a0a:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2a0c:	7c46      	ldrb	r6, [r0, #17]
{
 80a2a0e:	4604      	mov	r4, r0
 80a2a10:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2a12:	b12e      	cbz	r6, 80a2a20 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a2a14:	4629      	mov	r1, r5
 80a2a16:	7c20      	ldrb	r0, [r4, #16]
}
 80a2a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2a1c:	f7ff bb92 	b.w	80a2144 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2a20:	7c00      	ldrb	r0, [r0, #16]
 80a2a22:	f7ff fbbf 	bl	80a21a4 <hal_usart_available_data_for_write>
 80a2a26:	2800      	cmp	r0, #0
 80a2a28:	dcf4      	bgt.n	80a2a14 <_ZN11USARTSerial5writeEh+0xa>
}
 80a2a2a:	4630      	mov	r0, r6
 80a2a2c:	bd70      	pop	{r4, r5, r6, pc}

080a2a2e <_ZN11USARTSerialD0Ev>:
 80a2a2e:	b510      	push	{r4, lr}
 80a2a30:	4604      	mov	r4, r0
 80a2a32:	2114      	movs	r1, #20
 80a2a34:	f000 fae8 	bl	80a3008 <_ZdlPvj>
 80a2a38:	4620      	mov	r0, r4
 80a2a3a:	bd10      	pop	{r4, pc}

080a2a3c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2a3c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2a40:	b510      	push	{r4, lr}
 80a2a42:	4604      	mov	r4, r0
 80a2a44:	4608      	mov	r0, r1
 80a2a46:	4611      	mov	r1, r2
 80a2a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2a4c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2a50:	4a04      	ldr	r2, [pc, #16]	; (80a2a64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2a52:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2a54:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2a56:	2201      	movs	r2, #1
 80a2a58:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2a5a:	461a      	mov	r2, r3
 80a2a5c:	f7ff fb6a 	bl	80a2134 <hal_usart_init>
}
 80a2a60:	4620      	mov	r0, r4
 80a2a62:	bd10      	pop	{r4, pc}
 80a2a64:	080a4140 	.word	0x080a4140

080a2a68 <_Z22__fetch_global_Serial1v>:
{
 80a2a68:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2a6a:	4d0c      	ldr	r5, [pc, #48]	; (80a2a9c <_Z22__fetch_global_Serial1v+0x34>)
 80a2a6c:	7829      	ldrb	r1, [r5, #0]
 80a2a6e:	f3bf 8f5b 	dmb	ish
 80a2a72:	f011 0401 	ands.w	r4, r1, #1
 80a2a76:	d10f      	bne.n	80a2a98 <_Z22__fetch_global_Serial1v+0x30>
 80a2a78:	4628      	mov	r0, r5
 80a2a7a:	f7fd fb1b 	bl	80a00b4 <__cxa_guard_acquire>
 80a2a7e:	b158      	cbz	r0, 80a2a98 <_Z22__fetch_global_Serial1v+0x30>
 80a2a80:	4621      	mov	r1, r4
 80a2a82:	4b07      	ldr	r3, [pc, #28]	; (80a2aa0 <_Z22__fetch_global_Serial1v+0x38>)
 80a2a84:	4a07      	ldr	r2, [pc, #28]	; (80a2aa4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2a86:	4808      	ldr	r0, [pc, #32]	; (80a2aa8 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a88:	f7ff ffd8 	bl	80a2a3c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2a8c:	4628      	mov	r0, r5
 80a2a8e:	f7fd fb16 	bl	80a00be <__cxa_guard_release>
 80a2a92:	4806      	ldr	r0, [pc, #24]	; (80a2aac <_Z22__fetch_global_Serial1v+0x44>)
 80a2a94:	f000 fabc 	bl	80a3010 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2a98:	4803      	ldr	r0, [pc, #12]	; (80a2aa8 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a9a:	bd38      	pop	{r3, r4, r5, pc}
 80a2a9c:	20000164 	.word	0x20000164
 80a2aa0:	200001ec 	.word	0x200001ec
 80a2aa4:	20000168 	.word	0x20000168
 80a2aa8:	20000270 	.word	0x20000270
 80a2aac:	080a29cb 	.word	0x080a29cb

080a2ab0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2ab0:	7441      	strb	r1, [r0, #17]
}
 80a2ab2:	4770      	bx	lr

080a2ab4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2ab4:	4770      	bx	lr

080a2ab6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2ab6:	4770      	bx	lr

080a2ab8 <_ZN9USBSerial4readEv>:
{
 80a2ab8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2aba:	2100      	movs	r1, #0
 80a2abc:	7c00      	ldrb	r0, [r0, #16]
 80a2abe:	f7ff fb99 	bl	80a21f4 <HAL_USB_USART_Receive_Data>
}
 80a2ac2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2ac6:	bd08      	pop	{r3, pc}

080a2ac8 <_ZN9USBSerial4peekEv>:
{
 80a2ac8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2aca:	2101      	movs	r1, #1
 80a2acc:	7c00      	ldrb	r0, [r0, #16]
 80a2ace:	f7ff fb91 	bl	80a21f4 <HAL_USB_USART_Receive_Data>
}
 80a2ad2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2ad6:	bd08      	pop	{r3, pc}

080a2ad8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2ad8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2ada:	7c00      	ldrb	r0, [r0, #16]
 80a2adc:	f7ff fb82 	bl	80a21e4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ae4:	bd08      	pop	{r3, pc}

080a2ae6 <_ZN9USBSerial9availableEv>:
{
 80a2ae6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2ae8:	7c00      	ldrb	r0, [r0, #16]
 80a2aea:	f7ff fb73 	bl	80a21d4 <HAL_USB_USART_Available_Data>
}
 80a2aee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2af2:	bd08      	pop	{r3, pc}

080a2af4 <_ZN9USBSerial5writeEh>:
{
 80a2af4:	b538      	push	{r3, r4, r5, lr}
 80a2af6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2af8:	7c00      	ldrb	r0, [r0, #16]
{
 80a2afa:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2afc:	f7ff fb72 	bl	80a21e4 <HAL_USB_USART_Available_Data_For_Write>
 80a2b00:	2800      	cmp	r0, #0
 80a2b02:	dc01      	bgt.n	80a2b08 <_ZN9USBSerial5writeEh+0x14>
 80a2b04:	7c60      	ldrb	r0, [r4, #17]
 80a2b06:	b128      	cbz	r0, 80a2b14 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2b08:	4629      	mov	r1, r5
 80a2b0a:	7c20      	ldrb	r0, [r4, #16]
 80a2b0c:	f7ff fb7a 	bl	80a2204 <HAL_USB_USART_Send_Data>
 80a2b10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2b14:	bd38      	pop	{r3, r4, r5, pc}

080a2b16 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2b16:	7c00      	ldrb	r0, [r0, #16]
 80a2b18:	f7ff bb7c 	b.w	80a2214 <HAL_USB_USART_Flush_Data>

080a2b1c <_ZN9USBSerialD0Ev>:
 80a2b1c:	b510      	push	{r4, lr}
 80a2b1e:	4604      	mov	r4, r0
 80a2b20:	2114      	movs	r1, #20
 80a2b22:	f000 fa71 	bl	80a3008 <_ZdlPvj>
 80a2b26:	4620      	mov	r0, r4
 80a2b28:	bd10      	pop	{r4, pc}

080a2b2a <__tcf_1>:
 80a2b2a:	4770      	bx	lr

080a2b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2b2c:	b510      	push	{r4, lr}
 80a2b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2b32:	4604      	mov	r4, r0
 80a2b34:	4608      	mov	r0, r1
 80a2b36:	2100      	movs	r1, #0
 80a2b38:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2b3c:	4b04      	ldr	r3, [pc, #16]	; (80a2b50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2b3e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2b40:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2b42:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2b44:	4611      	mov	r1, r2
  _blocking = true;
 80a2b46:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2b48:	f7ff fb34 	bl	80a21b4 <HAL_USB_USART_Init>
}
 80a2b4c:	4620      	mov	r0, r4
 80a2b4e:	bd10      	pop	{r4, pc}
 80a2b50:	080a4170 	.word	0x080a4170

080a2b54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2b54:	2200      	movs	r2, #0
 80a2b56:	7c00      	ldrb	r0, [r0, #16]
 80a2b58:	f7ff bb34 	b.w	80a21c4 <HAL_USB_USART_Begin>

080a2b5c <_Z19acquireSerialBufferv>:
{
 80a2b5c:	b510      	push	{r4, lr}
 80a2b5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b60:	2214      	movs	r2, #20
 80a2b62:	2100      	movs	r1, #0
 80a2b64:	f000 fa68 	bl	80a3038 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2b68:	4b05      	ldr	r3, [pc, #20]	; (80a2b80 <_Z19acquireSerialBufferv+0x24>)
}
 80a2b6a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2b6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2b6e:	4b05      	ldr	r3, [pc, #20]	; (80a2b84 <_Z19acquireSerialBufferv+0x28>)
 80a2b70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2b72:	f240 1301 	movw	r3, #257	; 0x101
 80a2b76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2b78:	2381      	movs	r3, #129	; 0x81
 80a2b7a:	8223      	strh	r3, [r4, #16]
}
 80a2b7c:	bd10      	pop	{r4, pc}
 80a2b7e:	bf00      	nop
 80a2b80:	200002b4 	.word	0x200002b4
 80a2b84:	200003b5 	.word	0x200003b5

080a2b88 <_Z16_fetch_usbserialv>:
{
 80a2b88:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b8a:	4d0e      	ldr	r5, [pc, #56]	; (80a2bc4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2b8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2b8e:	a801      	add	r0, sp, #4
 80a2b90:	f7ff ffe4 	bl	80a2b5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b94:	7829      	ldrb	r1, [r5, #0]
 80a2b96:	f3bf 8f5b 	dmb	ish
 80a2b9a:	f011 0401 	ands.w	r4, r1, #1
 80a2b9e:	d10e      	bne.n	80a2bbe <_Z16_fetch_usbserialv+0x36>
 80a2ba0:	4628      	mov	r0, r5
 80a2ba2:	f7fd fa87 	bl	80a00b4 <__cxa_guard_acquire>
 80a2ba6:	b150      	cbz	r0, 80a2bbe <_Z16_fetch_usbserialv+0x36>
 80a2ba8:	4621      	mov	r1, r4
 80a2baa:	aa01      	add	r2, sp, #4
 80a2bac:	4806      	ldr	r0, [pc, #24]	; (80a2bc8 <_Z16_fetch_usbserialv+0x40>)
 80a2bae:	f7ff ffbd 	bl	80a2b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2bb2:	4628      	mov	r0, r5
 80a2bb4:	f7fd fa83 	bl	80a00be <__cxa_guard_release>
 80a2bb8:	4804      	ldr	r0, [pc, #16]	; (80a2bcc <_Z16_fetch_usbserialv+0x44>)
 80a2bba:	f000 fa29 	bl	80a3010 <atexit>
	return _usbserial;
}
 80a2bbe:	4802      	ldr	r0, [pc, #8]	; (80a2bc8 <_Z16_fetch_usbserialv+0x40>)
 80a2bc0:	b007      	add	sp, #28
 80a2bc2:	bd30      	pop	{r4, r5, pc}
 80a2bc4:	20000284 	.word	0x20000284
 80a2bc8:	2000028c 	.word	0x2000028c
 80a2bcc:	080a2ab5 	.word	0x080a2ab5

080a2bd0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2bd0:	b510      	push	{r4, lr}
 80a2bd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2bd4:	2214      	movs	r2, #20
 80a2bd6:	2100      	movs	r1, #0
 80a2bd8:	f000 fa2e 	bl	80a3038 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2bdc:	4b05      	ldr	r3, [pc, #20]	; (80a2bf4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2bde:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2be0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2be2:	4b05      	ldr	r3, [pc, #20]	; (80a2bf8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2be4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2be6:	f240 1301 	movw	r3, #257	; 0x101
 80a2bea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2bec:	2381      	movs	r3, #129	; 0x81
 80a2bee:	8223      	strh	r3, [r4, #16]
}
 80a2bf0:	bd10      	pop	{r4, pc}
 80a2bf2:	bf00      	nop
 80a2bf4:	20000436 	.word	0x20000436
 80a2bf8:	20000537 	.word	0x20000537

080a2bfc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2bfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2bfe:	4c0e      	ldr	r4, [pc, #56]	; (80a2c38 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2c00:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2c02:	a801      	add	r0, sp, #4
 80a2c04:	f7ff ffe4 	bl	80a2bd0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2c08:	7823      	ldrb	r3, [r4, #0]
 80a2c0a:	f3bf 8f5b 	dmb	ish
 80a2c0e:	07db      	lsls	r3, r3, #31
 80a2c10:	d40e      	bmi.n	80a2c30 <_Z17_fetch_usbserial1v+0x34>
 80a2c12:	4620      	mov	r0, r4
 80a2c14:	f7fd fa4e 	bl	80a00b4 <__cxa_guard_acquire>
 80a2c18:	b150      	cbz	r0, 80a2c30 <_Z17_fetch_usbserial1v+0x34>
 80a2c1a:	2101      	movs	r1, #1
 80a2c1c:	aa01      	add	r2, sp, #4
 80a2c1e:	4807      	ldr	r0, [pc, #28]	; (80a2c3c <_Z17_fetch_usbserial1v+0x40>)
 80a2c20:	f7ff ff84 	bl	80a2b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2c24:	4620      	mov	r0, r4
 80a2c26:	f7fd fa4a 	bl	80a00be <__cxa_guard_release>
 80a2c2a:	4805      	ldr	r0, [pc, #20]	; (80a2c40 <_Z17_fetch_usbserial1v+0x44>)
 80a2c2c:	f000 f9f0 	bl	80a3010 <atexit>
  return _usbserial1;
}
 80a2c30:	4802      	ldr	r0, [pc, #8]	; (80a2c3c <_Z17_fetch_usbserial1v+0x40>)
 80a2c32:	b006      	add	sp, #24
 80a2c34:	bd10      	pop	{r4, pc}
 80a2c36:	bf00      	nop
 80a2c38:	20000288 	.word	0x20000288
 80a2c3c:	200002a0 	.word	0x200002a0
 80a2c40:	080a2b2b 	.word	0x080a2b2b

080a2c44 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2c44:	2200      	movs	r2, #0
 80a2c46:	6840      	ldr	r0, [r0, #4]
 80a2c48:	4611      	mov	r1, r2
 80a2c4a:	f7ff bb47 	b.w	80a22dc <network_ready>

080a2c4e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2c50:	4615      	mov	r5, r2
 80a2c52:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2c54:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2c56:	460e      	mov	r6, r1
 80a2c58:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2c5a:	2100      	movs	r1, #0
 80a2c5c:	a803      	add	r0, sp, #12
 80a2c5e:	f000 f9eb 	bl	80a3038 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2c62:	4628      	mov	r0, r5
 80a2c64:	f000 fa14 	bl	80a3090 <strlen>
 80a2c68:	2700      	movs	r7, #0
 80a2c6a:	b281      	uxth	r1, r0
 80a2c6c:	6873      	ldr	r3, [r6, #4]
 80a2c6e:	4628      	mov	r0, r5
 80a2c70:	9700      	str	r7, [sp, #0]
 80a2c72:	aa03      	add	r2, sp, #12
 80a2c74:	f7ff fad6 	bl	80a2224 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2c78:	b130      	cbz	r0, 80a2c88 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2c7a:	4639      	mov	r1, r7
 80a2c7c:	4620      	mov	r0, r4
 80a2c7e:	f7ff fc53 	bl	80a2528 <_ZN9IPAddressC1Em>
    }
 80a2c82:	4620      	mov	r0, r4
 80a2c84:	b009      	add	sp, #36	; 0x24
 80a2c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2c88:	4620      	mov	r0, r4
 80a2c8a:	a903      	add	r1, sp, #12
 80a2c8c:	f7ff fc3a 	bl	80a2504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2c90:	e7f7      	b.n	80a2c82 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2c92 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2c92:	2200      	movs	r2, #0
 80a2c94:	6840      	ldr	r0, [r0, #4]
 80a2c96:	4611      	mov	r1, r2
 80a2c98:	f7ff bb40 	b.w	80a231c <network_listening>

080a2c9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2c9c:	2200      	movs	r2, #0
 80a2c9e:	6840      	ldr	r0, [r0, #4]
 80a2ca0:	4611      	mov	r1, r2
 80a2ca2:	f7ff bb4b 	b.w	80a233c <network_get_listen_timeout>

080a2ca6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2ca6:	2200      	movs	r2, #0
 80a2ca8:	6840      	ldr	r0, [r0, #4]
 80a2caa:	f7ff bb3f 	b.w	80a232c <network_set_listen_timeout>

080a2cae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2cae:	2200      	movs	r2, #0
 80a2cb0:	6840      	ldr	r0, [r0, #4]
 80a2cb2:	f081 0101 	eor.w	r1, r1, #1
 80a2cb6:	f7ff bb29 	b.w	80a230c <network_listen>

080a2cba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2cba:	2300      	movs	r3, #0
 80a2cbc:	6840      	ldr	r0, [r0, #4]
 80a2cbe:	461a      	mov	r2, r3
 80a2cc0:	4619      	mov	r1, r3
 80a2cc2:	f7ff bb1b 	b.w	80a22fc <network_off>

080a2cc6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2cc6:	2300      	movs	r3, #0
 80a2cc8:	6840      	ldr	r0, [r0, #4]
 80a2cca:	461a      	mov	r2, r3
 80a2ccc:	4619      	mov	r1, r3
 80a2cce:	f7ff bb0d 	b.w	80a22ec <network_on>

080a2cd2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2cd2:	2200      	movs	r2, #0
 80a2cd4:	6840      	ldr	r0, [r0, #4]
 80a2cd6:	4611      	mov	r1, r2
 80a2cd8:	f7ff baf0 	b.w	80a22bc <network_connecting>

080a2cdc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2cdc:	2200      	movs	r2, #0
 80a2cde:	2102      	movs	r1, #2
 80a2ce0:	6840      	ldr	r0, [r0, #4]
 80a2ce2:	f7ff baf3 	b.w	80a22cc <network_disconnect>

080a2ce6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2ce6:	2300      	movs	r3, #0
 80a2ce8:	6840      	ldr	r0, [r0, #4]
 80a2cea:	461a      	mov	r2, r3
 80a2cec:	f7ff bade 	b.w	80a22ac <network_connect>

080a2cf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2cf0:	2204      	movs	r2, #4
 80a2cf2:	4b02      	ldr	r3, [pc, #8]	; (80a2cfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2cf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2cf6:	4a02      	ldr	r2, [pc, #8]	; (80a2d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2cf8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2cfa:	4770      	bx	lr
 80a2cfc:	200005b8 	.word	0x200005b8
 80a2d00:	080a41a0 	.word	0x080a41a0

080a2d04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2d04:	4b01      	ldr	r3, [pc, #4]	; (80a2d0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2d06:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2d08:	4770      	bx	lr
 80a2d0a:	bf00      	nop
 80a2d0c:	20000020 	.word	0x20000020

080a2d10 <serialEventRun>:
{
 80a2d10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2d12:	4b13      	ldr	r3, [pc, #76]	; (80a2d60 <serialEventRun+0x50>)
 80a2d14:	b143      	cbz	r3, 80a2d28 <serialEventRun+0x18>
 80a2d16:	f7ff ff37 	bl	80a2b88 <_Z16_fetch_usbserialv>
 80a2d1a:	6803      	ldr	r3, [r0, #0]
 80a2d1c:	691b      	ldr	r3, [r3, #16]
 80a2d1e:	4798      	blx	r3
 80a2d20:	2800      	cmp	r0, #0
 80a2d22:	dd01      	ble.n	80a2d28 <serialEventRun+0x18>
        serialEvent();
 80a2d24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2d28:	4b0e      	ldr	r3, [pc, #56]	; (80a2d64 <serialEventRun+0x54>)
 80a2d2a:	b143      	cbz	r3, 80a2d3e <serialEventRun+0x2e>
 80a2d2c:	f7ff fe9c 	bl	80a2a68 <_Z22__fetch_global_Serial1v>
 80a2d30:	6803      	ldr	r3, [r0, #0]
 80a2d32:	691b      	ldr	r3, [r3, #16]
 80a2d34:	4798      	blx	r3
 80a2d36:	2800      	cmp	r0, #0
 80a2d38:	dd01      	ble.n	80a2d3e <serialEventRun+0x2e>
        serialEvent1();
 80a2d3a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2d3e:	4b0a      	ldr	r3, [pc, #40]	; (80a2d68 <serialEventRun+0x58>)
 80a2d40:	b10b      	cbz	r3, 80a2d46 <serialEventRun+0x36>
 80a2d42:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2d46:	4b09      	ldr	r3, [pc, #36]	; (80a2d6c <serialEventRun+0x5c>)
 80a2d48:	b143      	cbz	r3, 80a2d5c <serialEventRun+0x4c>
 80a2d4a:	f7ff ff57 	bl	80a2bfc <_Z17_fetch_usbserial1v>
 80a2d4e:	6803      	ldr	r3, [r0, #0]
 80a2d50:	691b      	ldr	r3, [r3, #16]
 80a2d52:	4798      	blx	r3
 80a2d54:	2800      	cmp	r0, #0
 80a2d56:	dd01      	ble.n	80a2d5c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2d58:	f3af 8000 	nop.w
}
 80a2d5c:	bd08      	pop	{r3, pc}
 80a2d5e:	bf00      	nop
	...

080a2d70 <_post_loop>:
{
 80a2d70:	b508      	push	{r3, lr}
	serialEventRun();
 80a2d72:	f7ff ffcd 	bl	80a2d10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2d76:	f7ff f92b 	bl	80a1fd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2d7a:	4b01      	ldr	r3, [pc, #4]	; (80a2d80 <_post_loop+0x10>)
 80a2d7c:	6018      	str	r0, [r3, #0]
}
 80a2d7e:	bd08      	pop	{r3, pc}
 80a2d80:	200005c8 	.word	0x200005c8

080a2d84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2d84:	4805      	ldr	r0, [pc, #20]	; (80a2d9c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a2d86:	4a06      	ldr	r2, [pc, #24]	; (80a2da0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2d88:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2d8a:	1a12      	subs	r2, r2, r0
 80a2d8c:	4905      	ldr	r1, [pc, #20]	; (80a2da4 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2d8e:	f000 f945 	bl	80a301c <memcpy>
    __backup_sram_signature = signature;
 80a2d92:	4b05      	ldr	r3, [pc, #20]	; (80a2da8 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2d94:	4a05      	ldr	r2, [pc, #20]	; (80a2dac <_Z33system_initialize_user_backup_ramv+0x28>)
 80a2d96:	601a      	str	r2, [r3, #0]
}
 80a2d98:	bd08      	pop	{r3, pc}
 80a2d9a:	bf00      	nop
 80a2d9c:	40024000 	.word	0x40024000
 80a2da0:	40024004 	.word	0x40024004
 80a2da4:	080a4200 	.word	0x080a4200
 80a2da8:	40024000 	.word	0x40024000
 80a2dac:	9a271c1e 	.word	0x9a271c1e

080a2db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2db0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2db2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2db4:	461a      	mov	r2, r3
 80a2db6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2dba:	9300      	str	r3, [sp, #0]
 80a2dbc:	f7ff fa5c 	bl	80a2278 <system_ctrl_set_result>
}
 80a2dc0:	b003      	add	sp, #12
 80a2dc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2dc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2dc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2dca:	8843      	ldrh	r3, [r0, #2]
 80a2dcc:	2b0a      	cmp	r3, #10
 80a2dce:	d008      	beq.n	80a2de2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2dd0:	2b50      	cmp	r3, #80	; 0x50
 80a2dd2:	d10b      	bne.n	80a2dec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2dd4:	4b09      	ldr	r3, [pc, #36]	; (80a2dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2dd6:	681b      	ldr	r3, [r3, #0]
 80a2dd8:	b14b      	cbz	r3, 80a2dee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2dda:	b003      	add	sp, #12
 80a2ddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2de0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2de2:	f7ff ffe5 	bl	80a2db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2de6:	b003      	add	sp, #12
 80a2de8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2dec:	2300      	movs	r3, #0
 80a2dee:	461a      	mov	r2, r3
 80a2df0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2df4:	9300      	str	r3, [sp, #0]
 80a2df6:	f7ff fa3f 	bl	80a2278 <system_ctrl_set_result>
}
 80a2dfa:	e7f4      	b.n	80a2de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2dfc:	200005c4 	.word	0x200005c4

080a2e00 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2e00:	2100      	movs	r1, #0
{
 80a2e02:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2e04:	4811      	ldr	r0, [pc, #68]	; (80a2e4c <module_user_init_hook+0x4c>)
 80a2e06:	f7ff fad1 	bl	80a23ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2e0a:	4b11      	ldr	r3, [pc, #68]	; (80a2e50 <module_user_init_hook+0x50>)
 80a2e0c:	681a      	ldr	r2, [r3, #0]
 80a2e0e:	4b11      	ldr	r3, [pc, #68]	; (80a2e54 <module_user_init_hook+0x54>)
 80a2e10:	429a      	cmp	r2, r3
 80a2e12:	bf0c      	ite	eq
 80a2e14:	2201      	moveq	r2, #1
 80a2e16:	2200      	movne	r2, #0
 80a2e18:	4b0f      	ldr	r3, [pc, #60]	; (80a2e58 <module_user_init_hook+0x58>)
 80a2e1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2e1c:	d001      	beq.n	80a2e22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2e1e:	f7ff ffb1 	bl	80a2d84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2e22:	f7ff f8c5 	bl	80a1fb0 <HAL_RNG_GetRandomNumber>
 80a2e26:	4604      	mov	r4, r0
    srand(seed);
 80a2e28:	f000 f90e 	bl	80a3048 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2e2c:	4b0b      	ldr	r3, [pc, #44]	; (80a2e5c <module_user_init_hook+0x5c>)
 80a2e2e:	b113      	cbz	r3, 80a2e36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2e30:	4620      	mov	r0, r4
 80a2e32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2e36:	2100      	movs	r1, #0
 80a2e38:	4808      	ldr	r0, [pc, #32]	; (80a2e5c <module_user_init_hook+0x5c>)
 80a2e3a:	f7ff fa27 	bl	80a228c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2e42:	2100      	movs	r1, #0
 80a2e44:	4806      	ldr	r0, [pc, #24]	; (80a2e60 <module_user_init_hook+0x60>)
 80a2e46:	f7ff ba0d 	b.w	80a2264 <system_ctrl_set_app_request_handler>
 80a2e4a:	bf00      	nop
 80a2e4c:	080a2d05 	.word	0x080a2d05
 80a2e50:	40024000 	.word	0x40024000
 80a2e54:	9a271c1e 	.word	0x9a271c1e
 80a2e58:	200005c0 	.word	0x200005c0
 80a2e5c:	00000000 	.word	0x00000000
 80a2e60:	080a2dc9 	.word	0x080a2dc9

080a2e64 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2e64:	4b02      	ldr	r3, [pc, #8]	; (80a2e70 <__tcf_0+0xc>)
 80a2e66:	6898      	ldr	r0, [r3, #8]
 80a2e68:	b108      	cbz	r0, 80a2e6e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2e6a:	f7ff b889 	b.w	80a1f80 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2e6e:	4770      	bx	lr
 80a2e70:	2000008c 	.word	0x2000008c

080a2e74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2e74:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2e76:	b570      	push	{r4, r5, r6, lr}
 80a2e78:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2e7a:	d901      	bls.n	80a2e80 <pinAvailable+0xc>
    return false;
 80a2e7c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2e7e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2e80:	f1a0 030d 	sub.w	r3, r0, #13
 80a2e84:	2b02      	cmp	r3, #2
 80a2e86:	d90b      	bls.n	80a2ea0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2e88:	2801      	cmp	r0, #1
 80a2e8a:	d824      	bhi.n	80a2ed6 <pinAvailable+0x62>
 80a2e8c:	f000 f88a 	bl	80a2fa4 <_Z19__fetch_global_Wirev>
 80a2e90:	2100      	movs	r1, #0
 80a2e92:	7c00      	ldrb	r0, [r0, #16]
 80a2e94:	f7ff f90c 	bl	80a20b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2e98:	f080 0001 	eor.w	r0, r0, #1
 80a2e9c:	b2c0      	uxtb	r0, r0
 80a2e9e:	e7ee      	b.n	80a2e7e <pinAvailable+0xa>
 80a2ea0:	4e12      	ldr	r6, [pc, #72]	; (80a2eec <pinAvailable+0x78>)
 80a2ea2:	7831      	ldrb	r1, [r6, #0]
 80a2ea4:	f3bf 8f5b 	dmb	ish
 80a2ea8:	f011 0501 	ands.w	r5, r1, #1
 80a2eac:	d10d      	bne.n	80a2eca <pinAvailable+0x56>
 80a2eae:	4630      	mov	r0, r6
 80a2eb0:	f7fd f900 	bl	80a00b4 <__cxa_guard_acquire>
 80a2eb4:	b148      	cbz	r0, 80a2eca <pinAvailable+0x56>
 80a2eb6:	4629      	mov	r1, r5
 80a2eb8:	480d      	ldr	r0, [pc, #52]	; (80a2ef0 <pinAvailable+0x7c>)
 80a2eba:	f7ff fc68 	bl	80a278e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2ebe:	4630      	mov	r0, r6
 80a2ec0:	f7fd f8fd 	bl	80a00be <__cxa_guard_release>
 80a2ec4:	480b      	ldr	r0, [pc, #44]	; (80a2ef4 <pinAvailable+0x80>)
 80a2ec6:	f000 f8a3 	bl	80a3010 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2eca:	4b09      	ldr	r3, [pc, #36]	; (80a2ef0 <pinAvailable+0x7c>)
 80a2ecc:	7818      	ldrb	r0, [r3, #0]
 80a2ece:	f7ff f919 	bl	80a2104 <hal_spi_is_enabled>
 80a2ed2:	2800      	cmp	r0, #0
 80a2ed4:	d1d2      	bne.n	80a2e7c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2ed6:	3c12      	subs	r4, #18
 80a2ed8:	2c01      	cmp	r4, #1
 80a2eda:	d805      	bhi.n	80a2ee8 <pinAvailable+0x74>
 80a2edc:	f7ff fdc4 	bl	80a2a68 <_Z22__fetch_global_Serial1v>
 80a2ee0:	7c00      	ldrb	r0, [r0, #16]
 80a2ee2:	f7ff f957 	bl	80a2194 <hal_usart_is_enabled>
 80a2ee6:	e7d7      	b.n	80a2e98 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2ee8:	2001      	movs	r0, #1
 80a2eea:	e7c8      	b.n	80a2e7e <pinAvailable+0xa>
 80a2eec:	20000088 	.word	0x20000088
 80a2ef0:	2000008c 	.word	0x2000008c
 80a2ef4:	080a2e65 	.word	0x080a2e65

080a2ef8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ef8:	2817      	cmp	r0, #23
{
 80a2efa:	b538      	push	{r3, r4, r5, lr}
 80a2efc:	4604      	mov	r4, r0
 80a2efe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f00:	d80a      	bhi.n	80a2f18 <pinMode+0x20>
 80a2f02:	29ff      	cmp	r1, #255	; 0xff
 80a2f04:	d008      	beq.n	80a2f18 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2f06:	f7ff ffb5 	bl	80a2e74 <pinAvailable>
 80a2f0a:	b128      	cbz	r0, 80a2f18 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2f0c:	4629      	mov	r1, r5
 80a2f0e:	4620      	mov	r0, r4
}
 80a2f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2f14:	f7ff b864 	b.w	80a1fe0 <HAL_Pin_Mode>
}
 80a2f18:	bd38      	pop	{r3, r4, r5, pc}

080a2f1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2f1a:	b538      	push	{r3, r4, r5, lr}
 80a2f1c:	4604      	mov	r4, r0
 80a2f1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f20:	f7ff f866 	bl	80a1ff0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2f24:	28ff      	cmp	r0, #255	; 0xff
 80a2f26:	d010      	beq.n	80a2f4a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2f28:	2806      	cmp	r0, #6
 80a2f2a:	d804      	bhi.n	80a2f36 <digitalWrite+0x1c>
 80a2f2c:	234d      	movs	r3, #77	; 0x4d
 80a2f2e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2f32:	07c3      	lsls	r3, r0, #31
 80a2f34:	d409      	bmi.n	80a2f4a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f36:	4620      	mov	r0, r4
 80a2f38:	f7ff ff9c 	bl	80a2e74 <pinAvailable>
 80a2f3c:	b128      	cbz	r0, 80a2f4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f3e:	4629      	mov	r1, r5
 80a2f40:	4620      	mov	r0, r4
}
 80a2f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2f46:	f7ff b85b 	b.w	80a2000 <HAL_GPIO_Write>
}
 80a2f4a:	bd38      	pop	{r3, r4, r5, pc}

080a2f4c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2f4c:	b510      	push	{r4, lr}
 80a2f4e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f50:	f7ff f84e 	bl	80a1ff0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2f54:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2f56:	b2db      	uxtb	r3, r3
 80a2f58:	2b01      	cmp	r3, #1
 80a2f5a:	d908      	bls.n	80a2f6e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2f5c:	4620      	mov	r0, r4
 80a2f5e:	f7ff ff89 	bl	80a2e74 <pinAvailable>
 80a2f62:	b120      	cbz	r0, 80a2f6e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2f64:	4620      	mov	r0, r4
}
 80a2f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2f6a:	f7ff b851 	b.w	80a2010 <HAL_GPIO_Read>
}
 80a2f6e:	2000      	movs	r0, #0
 80a2f70:	bd10      	pop	{r4, pc}

080a2f72 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2f72:	4770      	bx	lr

080a2f74 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2f74:	2300      	movs	r3, #0
{
 80a2f76:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2f78:	2520      	movs	r5, #32
 80a2f7a:	8043      	strh	r3, [r0, #2]
 80a2f7c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f7e:	4e08      	ldr	r6, [pc, #32]	; (80a2fa0 <_Z17acquireWireBufferv+0x2c>)
{
 80a2f80:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2f82:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f84:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2f86:	6085      	str	r5, [r0, #8]
 80a2f88:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f8a:	4628      	mov	r0, r5
 80a2f8c:	f000 f83e 	bl	80a300c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f90:	4631      	mov	r1, r6
	};
 80a2f92:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2f94:	4628      	mov	r0, r5
 80a2f96:	f000 f839 	bl	80a300c <_ZnajRKSt9nothrow_t>
	};
 80a2f9a:	60e0      	str	r0, [r4, #12]
}
 80a2f9c:	4620      	mov	r0, r4
 80a2f9e:	bd70      	pop	{r4, r5, r6, pc}
 80a2fa0:	080a41d4 	.word	0x080a41d4

080a2fa4 <_Z19__fetch_global_Wirev>:
{
 80a2fa4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2fa6:	4d0e      	ldr	r5, [pc, #56]	; (80a2fe0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2fa8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2faa:	7829      	ldrb	r1, [r5, #0]
 80a2fac:	f3bf 8f5b 	dmb	ish
 80a2fb0:	f011 0401 	ands.w	r4, r1, #1
 80a2fb4:	d111      	bne.n	80a2fda <_Z19__fetch_global_Wirev+0x36>
 80a2fb6:	4628      	mov	r0, r5
 80a2fb8:	f7fd f87c 	bl	80a00b4 <__cxa_guard_acquire>
 80a2fbc:	b168      	cbz	r0, 80a2fda <_Z19__fetch_global_Wirev+0x36>
 80a2fbe:	a801      	add	r0, sp, #4
 80a2fc0:	f7ff ffd8 	bl	80a2f74 <_Z17acquireWireBufferv>
 80a2fc4:	4621      	mov	r1, r4
 80a2fc6:	aa01      	add	r2, sp, #4
 80a2fc8:	4806      	ldr	r0, [pc, #24]	; (80a2fe4 <_Z19__fetch_global_Wirev+0x40>)
 80a2fca:	f7ff fa41 	bl	80a2450 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2fce:	4628      	mov	r0, r5
 80a2fd0:	f7fd f875 	bl	80a00be <__cxa_guard_release>
 80a2fd4:	4804      	ldr	r0, [pc, #16]	; (80a2fe8 <_Z19__fetch_global_Wirev+0x44>)
 80a2fd6:	f000 f81b 	bl	80a3010 <atexit>
	return wire;
}
 80a2fda:	4802      	ldr	r0, [pc, #8]	; (80a2fe4 <_Z19__fetch_global_Wirev+0x40>)
 80a2fdc:	b007      	add	sp, #28
 80a2fde:	bd30      	pop	{r4, r5, pc}
 80a2fe0:	200005cc 	.word	0x200005cc
 80a2fe4:	200005d0 	.word	0x200005d0
 80a2fe8:	080a2f73 	.word	0x080a2f73

080a2fec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2fec:	2300      	movs	r3, #0
 80a2fee:	b507      	push	{r0, r1, r2, lr}
 80a2ff0:	461a      	mov	r2, r3
 80a2ff2:	4619      	mov	r1, r3
 80a2ff4:	9300      	str	r3, [sp, #0]
 80a2ff6:	4803      	ldr	r0, [pc, #12]	; (80a3004 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2ff8:	f7ff faac 	bl	80a2554 <_ZN9IPAddressC1Ehhhh>
 80a2ffc:	b003      	add	sp, #12
 80a2ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3002:	bf00      	nop
 80a3004:	200005e4 	.word	0x200005e4

080a3008 <_ZdlPvj>:
 80a3008:	f7fd b847 	b.w	80a009a <_ZdlPv>

080a300c <_ZnajRKSt9nothrow_t>:
 80a300c:	f7fd b843 	b.w	80a0096 <_Znaj>

080a3010 <atexit>:
 80a3010:	2300      	movs	r3, #0
 80a3012:	4601      	mov	r1, r0
 80a3014:	461a      	mov	r2, r3
 80a3016:	4618      	mov	r0, r3
 80a3018:	f000 b894 	b.w	80a3144 <__register_exitproc>

080a301c <memcpy>:
 80a301c:	440a      	add	r2, r1
 80a301e:	4291      	cmp	r1, r2
 80a3020:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3024:	d100      	bne.n	80a3028 <memcpy+0xc>
 80a3026:	4770      	bx	lr
 80a3028:	b510      	push	{r4, lr}
 80a302a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a302e:	4291      	cmp	r1, r2
 80a3030:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3034:	d1f9      	bne.n	80a302a <memcpy+0xe>
 80a3036:	bd10      	pop	{r4, pc}

080a3038 <memset>:
 80a3038:	4603      	mov	r3, r0
 80a303a:	4402      	add	r2, r0
 80a303c:	4293      	cmp	r3, r2
 80a303e:	d100      	bne.n	80a3042 <memset+0xa>
 80a3040:	4770      	bx	lr
 80a3042:	f803 1b01 	strb.w	r1, [r3], #1
 80a3046:	e7f9      	b.n	80a303c <memset+0x4>

080a3048 <srand>:
 80a3048:	b538      	push	{r3, r4, r5, lr}
 80a304a:	4b0d      	ldr	r3, [pc, #52]	; (80a3080 <srand+0x38>)
 80a304c:	4604      	mov	r4, r0
 80a304e:	681d      	ldr	r5, [r3, #0]
 80a3050:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3052:	b97b      	cbnz	r3, 80a3074 <srand+0x2c>
 80a3054:	2018      	movs	r0, #24
 80a3056:	f7ff f989 	bl	80a236c <malloc>
 80a305a:	4a0a      	ldr	r2, [pc, #40]	; (80a3084 <srand+0x3c>)
 80a305c:	4b0a      	ldr	r3, [pc, #40]	; (80a3088 <srand+0x40>)
 80a305e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3060:	e9c0 2300 	strd	r2, r3, [r0]
 80a3064:	4b09      	ldr	r3, [pc, #36]	; (80a308c <srand+0x44>)
 80a3066:	2201      	movs	r2, #1
 80a3068:	6083      	str	r3, [r0, #8]
 80a306a:	230b      	movs	r3, #11
 80a306c:	8183      	strh	r3, [r0, #12]
 80a306e:	2300      	movs	r3, #0
 80a3070:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3074:	2200      	movs	r2, #0
 80a3076:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3078:	611c      	str	r4, [r3, #16]
 80a307a:	615a      	str	r2, [r3, #20]
 80a307c:	bd38      	pop	{r3, r4, r5, pc}
 80a307e:	bf00      	nop
 80a3080:	20000020 	.word	0x20000020
 80a3084:	abcd330e 	.word	0xabcd330e
 80a3088:	e66d1234 	.word	0xe66d1234
 80a308c:	0005deec 	.word	0x0005deec

080a3090 <strlen>:
 80a3090:	4603      	mov	r3, r0
 80a3092:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3096:	2a00      	cmp	r2, #0
 80a3098:	d1fb      	bne.n	80a3092 <strlen+0x2>
 80a309a:	1a18      	subs	r0, r3, r0
 80a309c:	3801      	subs	r0, #1
 80a309e:	4770      	bx	lr

080a30a0 <strtok>:
 80a30a0:	4b13      	ldr	r3, [pc, #76]	; (80a30f0 <strtok+0x50>)
 80a30a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a30a6:	681f      	ldr	r7, [r3, #0]
 80a30a8:	4605      	mov	r5, r0
 80a30aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80a30ac:	460e      	mov	r6, r1
 80a30ae:	b9b4      	cbnz	r4, 80a30de <strtok+0x3e>
 80a30b0:	2050      	movs	r0, #80	; 0x50
 80a30b2:	f7ff f95b 	bl	80a236c <malloc>
 80a30b6:	65b8      	str	r0, [r7, #88]	; 0x58
 80a30b8:	e9c0 4400 	strd	r4, r4, [r0]
 80a30bc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80a30c0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80a30c4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80a30c8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80a30cc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80a30d0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80a30d4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80a30d8:	6184      	str	r4, [r0, #24]
 80a30da:	7704      	strb	r4, [r0, #28]
 80a30dc:	6244      	str	r4, [r0, #36]	; 0x24
 80a30de:	4631      	mov	r1, r6
 80a30e0:	4628      	mov	r0, r5
 80a30e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80a30e4:	2301      	movs	r3, #1
 80a30e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a30ea:	f000 b803 	b.w	80a30f4 <__strtok_r>
 80a30ee:	bf00      	nop
 80a30f0:	20000020 	.word	0x20000020

080a30f4 <__strtok_r>:
 80a30f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a30f6:	b908      	cbnz	r0, 80a30fc <__strtok_r+0x8>
 80a30f8:	6810      	ldr	r0, [r2, #0]
 80a30fa:	b188      	cbz	r0, 80a3120 <__strtok_r+0x2c>
 80a30fc:	4604      	mov	r4, r0
 80a30fe:	460f      	mov	r7, r1
 80a3100:	4620      	mov	r0, r4
 80a3102:	f814 5b01 	ldrb.w	r5, [r4], #1
 80a3106:	f817 6b01 	ldrb.w	r6, [r7], #1
 80a310a:	b91e      	cbnz	r6, 80a3114 <__strtok_r+0x20>
 80a310c:	b965      	cbnz	r5, 80a3128 <__strtok_r+0x34>
 80a310e:	4628      	mov	r0, r5
 80a3110:	6015      	str	r5, [r2, #0]
 80a3112:	e005      	b.n	80a3120 <__strtok_r+0x2c>
 80a3114:	42b5      	cmp	r5, r6
 80a3116:	d1f6      	bne.n	80a3106 <__strtok_r+0x12>
 80a3118:	2b00      	cmp	r3, #0
 80a311a:	d1f0      	bne.n	80a30fe <__strtok_r+0xa>
 80a311c:	6014      	str	r4, [r2, #0]
 80a311e:	7003      	strb	r3, [r0, #0]
 80a3120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3122:	461c      	mov	r4, r3
 80a3124:	e00c      	b.n	80a3140 <__strtok_r+0x4c>
 80a3126:	b915      	cbnz	r5, 80a312e <__strtok_r+0x3a>
 80a3128:	460e      	mov	r6, r1
 80a312a:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a312e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80a3132:	42ab      	cmp	r3, r5
 80a3134:	d1f7      	bne.n	80a3126 <__strtok_r+0x32>
 80a3136:	2b00      	cmp	r3, #0
 80a3138:	d0f3      	beq.n	80a3122 <__strtok_r+0x2e>
 80a313a:	2300      	movs	r3, #0
 80a313c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80a3140:	6014      	str	r4, [r2, #0]
 80a3142:	e7ed      	b.n	80a3120 <__strtok_r+0x2c>

080a3144 <__register_exitproc>:
 80a3144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3148:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a3208 <__register_exitproc+0xc4>
 80a314c:	4606      	mov	r6, r0
 80a314e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3152:	461f      	mov	r7, r3
 80a3154:	460d      	mov	r5, r1
 80a3156:	4691      	mov	r9, r2
 80a3158:	f000 f858 	bl	80a320c <__retarget_lock_acquire_recursive>
 80a315c:	4b26      	ldr	r3, [pc, #152]	; (80a31f8 <__register_exitproc+0xb4>)
 80a315e:	681c      	ldr	r4, [r3, #0]
 80a3160:	b934      	cbnz	r4, 80a3170 <__register_exitproc+0x2c>
 80a3162:	4c26      	ldr	r4, [pc, #152]	; (80a31fc <__register_exitproc+0xb8>)
 80a3164:	601c      	str	r4, [r3, #0]
 80a3166:	4b26      	ldr	r3, [pc, #152]	; (80a3200 <__register_exitproc+0xbc>)
 80a3168:	b113      	cbz	r3, 80a3170 <__register_exitproc+0x2c>
 80a316a:	681b      	ldr	r3, [r3, #0]
 80a316c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3170:	6863      	ldr	r3, [r4, #4]
 80a3172:	2b1f      	cmp	r3, #31
 80a3174:	dd07      	ble.n	80a3186 <__register_exitproc+0x42>
 80a3176:	f8d8 0000 	ldr.w	r0, [r8]
 80a317a:	f000 f849 	bl	80a3210 <__retarget_lock_release_recursive>
 80a317e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3186:	b35e      	cbz	r6, 80a31e0 <__register_exitproc+0x9c>
 80a3188:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a318c:	b988      	cbnz	r0, 80a31b2 <__register_exitproc+0x6e>
 80a318e:	4b1d      	ldr	r3, [pc, #116]	; (80a3204 <__register_exitproc+0xc0>)
 80a3190:	b923      	cbnz	r3, 80a319c <__register_exitproc+0x58>
 80a3192:	f8d8 0000 	ldr.w	r0, [r8]
 80a3196:	f000 f83a 	bl	80a320e <__retarget_lock_release>
 80a319a:	e7f0      	b.n	80a317e <__register_exitproc+0x3a>
 80a319c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a31a0:	f7ff f8e4 	bl	80a236c <malloc>
 80a31a4:	2800      	cmp	r0, #0
 80a31a6:	d0f4      	beq.n	80a3192 <__register_exitproc+0x4e>
 80a31a8:	2300      	movs	r3, #0
 80a31aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a31ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a31b2:	2201      	movs	r2, #1
 80a31b4:	6863      	ldr	r3, [r4, #4]
 80a31b6:	2e02      	cmp	r6, #2
 80a31b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a31bc:	fa02 f203 	lsl.w	r2, r2, r3
 80a31c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a31c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a31c8:	ea43 0302 	orr.w	r3, r3, r2
 80a31cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a31d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a31d4:	bf02      	ittt	eq
 80a31d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a31da:	431a      	orreq	r2, r3
 80a31dc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a31e0:	6863      	ldr	r3, [r4, #4]
 80a31e2:	f8d8 0000 	ldr.w	r0, [r8]
 80a31e6:	1c5a      	adds	r2, r3, #1
 80a31e8:	3302      	adds	r3, #2
 80a31ea:	6062      	str	r2, [r4, #4]
 80a31ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a31f0:	f000 f80e 	bl	80a3210 <__retarget_lock_release_recursive>
 80a31f4:	2000      	movs	r0, #0
 80a31f6:	e7c4      	b.n	80a3182 <__register_exitproc+0x3e>
 80a31f8:	20000688 	.word	0x20000688
 80a31fc:	200005fc 	.word	0x200005fc
 80a3200:	00000000 	.word	0x00000000
 80a3204:	080a236d 	.word	0x080a236d
 80a3208:	20000084 	.word	0x20000084

080a320c <__retarget_lock_acquire_recursive>:
 80a320c:	4770      	bx	lr

080a320e <__retarget_lock_release>:
 80a320e:	4770      	bx	lr

080a3210 <__retarget_lock_release_recursive>:
 80a3210:	4770      	bx	lr

080a3212 <link_code_end>:
	...

080a3214 <dynalib_user>:
 80a3214:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a3224:	0000 0000 494d 4146 4552 575f 6972 6574     ....MIFARE_Write
 80a3234:	2928 6620 6961 656c 3a64 0020 494d 4146     () failed: .MIFA
 80a3244:	4552 525f 6165 2864 2029 6166 6c69 6465     RE_Read() failed
 80a3254:	203a 5000 4443 415f 7475 6568 746e 6369     : .PCD_Authentic
 80a3264:	7461 2865 2029 6166 6c69 6465 203a 0a00     ate() failed: ..
 80a3274:	6154 4967 666e 3a6f 2520 2073 000a 6f43     TagInfo: %s ..Co
 80a3284:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
 80a3294:	4120 0a30 4300 6e6f 6365 6174 2072 6c61      A0..Conectar al
 80a32a4:	7020 6575 7472 206f 3241 000a 6f43 656e      puerto A2..Cone
 80a32b4:	7463 7261 6120 206c 7570 7265 6f74 4120     ctar al puerto A
 80a32c4:	0a34 4300 6e6f 6365 6174 2072 6c61 7020     4..Conectar al p
 80a32d4:	6575 7472 206f 3244 000a 6f43 656e 7463     uerto D2..Conect
 80a32e4:	7261 6120 206c 7570 7265 6f74 4420 0a34     ar al puerto D4.
 80a32f4:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
 80a3304:	7472 206f 3644 000a 7245 6f72 3a72 4e20     rto D6..Error: N
 80a3314:	206f 6168 2079 616d 2073 7570 7265 6f74     o hay mas puerto
 80a3324:	2073 6964 7073 6e6f 6269 656c 2073 000a     s disponibles ..
 80a3334:	7345 4120 7463 6175 6f64 0072 7345 5320     Es Actuador.Es S
 80a3344:	6e65 6f73 0072 7345 4420 6769 7469 6c61     ensor.Es Digital
 80a3354:	4500 2073 6e41 6c61 676f 6369 006f 002d     .Es Analogico.-.

080a3364 <_ZL4font>:
 80a3364:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a3374:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a3384:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a3394:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a33a4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a33b4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a33c4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a33d4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a33e4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a33f4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a3404:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a3414:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a3424:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a3434:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a3444:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a3454:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a3464:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a3474:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a3484:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a3494:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a34a4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a34b4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a34c4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a34d4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a34e4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a34f4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a3504:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a3514:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a3524:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a3534:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a3544:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a3554:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a3564:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a3574:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a3584:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3594:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a35a4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a35b4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a35c4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a35d4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a35e4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a35f4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a3604:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a3614:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a3624:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a3634:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a3644:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a3654:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a3664:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a3674:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a3684:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3694:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a36a4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a36b4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a36c4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a36d4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a36e4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a36f4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a3704:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a3714:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a3724:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a3734:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a3744:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a3754:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a3764:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a3774:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a3784:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a3794:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a37a4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a37b4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a37c4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a37d4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a37e4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a37f4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a3804:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a3814:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a3824:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a3834:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a3844:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a3854:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a3864 <_ZTV12Adafruit_GFX>:
	...
 80a3874:	0b49 080a 2659 080a 00a1 080a 057d 080a     I...Y&......}...
 80a3884:	057f 080a 05af 080a 058b 080a 059d 080a     ................
 80a3894:	04c1 080a 057d 080a 07a5 080a 0721 080a     ....}.......!...
 80a38a4:	05c7 080a 0605 080a 063f 080a 0685 080a     ........?.......
 80a38b4:	0723 080a 06a1 080a 6564 6166 6c75 2074     #.......default 
 80a38c4:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
 80a38d4:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
 80a38e4:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
 80a38f4:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

080a3900 <_ZTVN8particle11SPISettingsE>:
	...
 80a3908:	0c69 080a 0c57 080a 0c59 080a               i...W...Y...

080a3914 <_ZL12splash2_data>:
 80a3914:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a3924:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a3934:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a3950:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a3960:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a3970:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a3980:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a3990:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a39a0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a39b0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a39c0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a39d0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a39e0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a39f0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a3a00:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a3a10:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a3a20:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a3a30:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a3a40:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a3a50:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a3a60:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a3a70:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a3a80:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a3a90:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a3aa8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a3ab8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a3ac8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a3ad8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a3ae8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a3af4 <_ZL17sucreLogoNew_data>:
 80a3af4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3b04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3b14:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
 80a3b24:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
 80a3b34:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
 80a3b44:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
 80a3b54:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
 80a3b64:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
 80a3b74:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
 80a3b84:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
 80a3b94:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
 80a3ba4:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
 80a3bb4:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
 80a3bc4:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
 80a3bd4:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
 80a3be4:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
 80a3bf4:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
 80a3c04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3c14:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
 80a3c24:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
 80a3c34:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
 80a3c44:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
 80a3c54:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
 80a3c64:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
 80a3c74:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
 80a3c84:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
 80a3c94:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
 80a3ca4:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
 80a3cb4:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
 80a3cc4:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
 80a3cd4:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
 80a3ce4:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
 80a3cf4:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
 80a3d04:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
 80a3d14:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
 80a3d24:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
 80a3d34:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
 80a3d44:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
 80a3d54:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
 80a3d64:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
 80a3d74:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
 80a3d84:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
 80a3d94:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3da4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3db4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3dc4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3dd4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3de4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3df4:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
 80a3e04:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
 80a3e14:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
 80a3e24:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
 80a3e34:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
 80a3e44:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
 80a3e54:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
 80a3e64:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
 80a3e74:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
 80a3e84:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
 80a3e94:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
 80a3ea4:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
 80a3eb4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
 80a3ec4:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
 80a3ed4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80a3ee4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

080a3ef4 <_ZTV16Adafruit_SSD1306>:
	...
 80a3efc:	0cbd 080a 0cd5 080a 0b49 080a 2659 080a     ........I...Y&..
 80a3f0c:	0ce9 080a 057d 080a 057f 080a 05af 080a     ....}...........
 80a3f1c:	058b 080a 059d 080a 04c1 080a 057d 080a     ............}...
 80a3f2c:	07a5 080a 0eb7 080a 1447 080a 13f9 080a     ........G.......
 80a3f3c:	063f 080a 0685 080a 0723 080a 06a1 080a     ?.......#.......

080a3f4c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 80a3f4c:	8000 e0c0 f8f0 fefc                         ........

080a3f54 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 80a3f54:	0100 0703 1f0f 7f3f                         ......?.

080a3f5c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 80a3f5c:	d5ae a880                                   ....

080a3f60 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 80a3f60:	00d3 8d40                                   ..@.

080a3f64 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 80a3f64:	0020 c8a1                                    ...

080a3f68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 80a3f68:	40db a6a4 af2e                              .@....

080a3f6e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
 80a3f6e:	02da 8f81                                   ....

080a3f72 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
 80a3f72:	12da                                         ...

080a3f75 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
 80a3f75:	02da                                         ...

080a3f78 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 80a3f78:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
 80a3f88:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
 80a3f98:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
 80a3fa8:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
 80a3fb8:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
 80a3fc8:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
 80a3fd8:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
 80a3fe8:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
 80a3ff8:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
 80a4008:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
 80a4018:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
 80a4028:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
 80a4038:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
 80a4048:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
 80a4058:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
 80a4068:	2064 6977 6874 4e20 4b41 002e               d with NAK..

080a4074 <CSWTCH.87>:
 80a4074:	3f8b 080a 3f94 080a 3fac 080a 3fc1 080a     .?...?...?...?..
 80a4084:	3fdb 080a 3ff7 080a 4026 080a 4038 080a     .?...?..&@..8@..
 80a4094:	4052 080a                                   R@..

080a4098 <_ZTV7TwoWire>:
	...
 80a40a0:	23f7 080a 2441 080a 2419 080a 23f9 080a     .#..A$...$...#..
 80a40b0:	2421 080a 2429 080a 2431 080a 2439 080a     !$..)$..1$..9$..

080a40c0 <_ZTV9IPAddress>:
	...
 80a40c8:	24b5 080a 24a5 080a 24a7 080a 7061 0070     .$...$...$..app.

080a40d8 <_ZTVN5spark12NetworkClassE>:
	...
 80a40e0:	257d 080a 2587 080a 2591 080a 259b 080a     }%...%...%...%..
 80a40f0:	25a5 080a 25b1 080a 25bd 080a 25c5 080a     .%...%...%...%..
 80a4100:	25cd 080a 25d9 080a 25e1 080a 25eb 080a     .%...%...%...%..
 80a4110:	25f5 080a                                   .%..

080a4114 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a4114:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 80a4124:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a4134:	6d69 0065                                   ime.

080a4138 <_ZTV11USARTSerial>:
	...
 80a4140:	29c5 080a 2a2f 080a 2a0b 080a 2659 080a     .)../*...*..Y&..
 80a4150:	29db 080a 29f7 080a 29e9 080a 2a05 080a     .)...)...)...*..
 80a4160:	29c7 080a 29cd 080a                         .)...)..

080a4168 <_ZTV9USBSerial>:
	...
 80a4170:	2ab7 080a 2b1d 080a 2af5 080a 2659 080a     .*...+...*..Y&..
 80a4180:	2ae7 080a 2ab9 080a 2ac9 080a 2b17 080a     .*...*...*...+..
 80a4190:	2ad9 080a 2ab1 080a                         .*...*..

080a4198 <_ZTVN5spark9WiFiClassE>:
	...
 80a41a0:	2ce7 080a 2cdd 080a 2cd3 080a 2c45 080a     .,...,...,..E,..
 80a41b0:	2cc7 080a 2cbb 080a 25bd 080a 25c5 080a     .,...,...%...%..
 80a41c0:	2caf 080a 2ca7 080a 2c9d 080a 2c93 080a     .,...,...,...,..
 80a41d0:	2c4f 080a                                   O,..

080a41d4 <_ZSt7nothrow>:
	...

080a41d5 <link_const_variable_data_end>:
 80a41d5:	00          	.byte	0x00
	...

080a41d8 <link_constructors_location>:
 80a41d8:	080a0465 	.word	0x080a0465
 80a41dc:	080a256d 	.word	0x080a256d
 80a41e0:	080a2645 	.word	0x080a2645
 80a41e4:	080a277d 	.word	0x080a277d
 80a41e8:	080a298d 	.word	0x080a298d
 80a41ec:	080a29b1 	.word	0x080a29b1
 80a41f0:	080a2cf1 	.word	0x080a2cf1
 80a41f4:	080a2fed 	.word	0x080a2fed

080a41f8 <link_constructors_end>:
	...
