
c:/Users/SVO/GITSUCRE/Sucre4Kids/target/5.3.0/argon/Sucre4Kids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009df8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bde18  000bde18  0000de18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000bc  2003c660  000bde3c  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000020d4  2003c71c  2003c71c  0003c71c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bdef8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bdefc  000bdefc  0002defc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bdf02  000bdf02  0002df02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bdf26  000bdf26  0002df26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00177db1  00000000  00000000  0002df2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000197ba  00000000  00000000  001a5cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005494d  00000000  00000000  001bf495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003908  00000000  00000000  00213de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000cb00  00000000  00000000  002176ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045c10  00000000  00000000  002241ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005de16  00000000  00000000  00269dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001468e3  00000000  00000000  002c7c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aecc  00000000  00000000  0040e4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2f>:
   b491c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4924:	bf24      	itt	cs
   b4926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b492a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b492e:	d90d      	bls.n	b494c <__aeabi_d2f+0x30>
   b4930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b493c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4944:	bf08      	it	eq
   b4946:	f020 0001 	biceq.w	r0, r0, #1
   b494a:	4770      	bx	lr
   b494c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4950:	d121      	bne.n	b4996 <__aeabi_d2f+0x7a>
   b4952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4956:	bfbc      	itt	lt
   b4958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b495c:	4770      	bxlt	lr
   b495e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4962:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4966:	f1c2 0218 	rsb	r2, r2, #24
   b496a:	f1c2 0c20 	rsb	ip, r2, #32
   b496e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4972:	fa20 f002 	lsr.w	r0, r0, r2
   b4976:	bf18      	it	ne
   b4978:	f040 0001 	orrne.w	r0, r0, #1
   b497c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4984:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4988:	ea40 000c 	orr.w	r0, r0, ip
   b498c:	fa23 f302 	lsr.w	r3, r3, r2
   b4990:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4994:	e7cc      	b.n	b4930 <__aeabi_d2f+0x14>
   b4996:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b499a:	d107      	bne.n	b49ac <__aeabi_d2f+0x90>
   b499c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49a0:	bf1e      	ittt	ne
   b49a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49aa:	4770      	bxne	lr
   b49ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49b8:	4770      	bx	lr
   b49ba:	bf00      	nop

000b49bc <strlen>:
   b49bc:	4603      	mov	r3, r0
   b49be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49c2:	2a00      	cmp	r2, #0
   b49c4:	d1fb      	bne.n	b49be <strlen+0x2>
   b49c6:	1a18      	subs	r0, r3, r0
   b49c8:	3801      	subs	r0, #1
   b49ca:	4770      	bx	lr

000b49cc <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49cc:	4809      	ldr	r0, [pc, #36]	; (b49f4 <module_user_pre_init+0x28>)
   b49ce:	490a      	ldr	r1, [pc, #40]	; (b49f8 <module_user_pre_init+0x2c>)
   b49d0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49d2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49d4:	d005      	beq.n	b49e2 <module_user_pre_init+0x16>
   b49d6:	4a09      	ldr	r2, [pc, #36]	; (b49fc <module_user_pre_init+0x30>)
   b49d8:	4282      	cmp	r2, r0
   b49da:	d002      	beq.n	b49e2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49dc:	1a12      	subs	r2, r2, r0
   b49de:	f007 f857 	bl	bba90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49e2:	4807      	ldr	r0, [pc, #28]	; (b4a00 <module_user_pre_init+0x34>)
   b49e4:	4a07      	ldr	r2, [pc, #28]	; (b4a04 <module_user_pre_init+0x38>)
   b49e6:	2100      	movs	r1, #0
   b49e8:	1a12      	subs	r2, r2, r0
   b49ea:	f007 f85f 	bl	bbaac <memset>
    return &link_global_data_start;
}
   b49ee:	4801      	ldr	r0, [pc, #4]	; (b49f4 <module_user_pre_init+0x28>)
   b49f0:	bd08      	pop	{r3, pc}
   b49f2:	bf00      	nop
   b49f4:	2003c660 	.word	0x2003c660
   b49f8:	000bde3c 	.word	0x000bde3c
   b49fc:	2003c71c 	.word	0x2003c71c
   b4a00:	2003c71c 	.word	0x2003c71c
   b4a04:	2003e7f0 	.word	0x2003e7f0

000b4a08 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a08:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a0a:	4e07      	ldr	r6, [pc, #28]	; (b4a28 <module_user_init+0x20>)
   b4a0c:	4c07      	ldr	r4, [pc, #28]	; (b4a2c <module_user_init+0x24>)
    module_user_init_hook();
   b4a0e:	f006 fbcf 	bl	bb1b0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a12:	1ba4      	subs	r4, r4, r6
   b4a14:	08a4      	lsrs	r4, r4, #2
   b4a16:	2500      	movs	r5, #0
   b4a18:	42ac      	cmp	r4, r5
   b4a1a:	d100      	bne.n	b4a1e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a1c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a1e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a22:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a24:	3501      	adds	r5, #1
   b4a26:	e7f7      	b.n	b4a18 <module_user_init+0x10>
   b4a28:	000bddf4 	.word	0x000bddf4
   b4a2c:	000bde18 	.word	0x000bde18

000b4a30 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a30:	f001 bce0 	b.w	b63f4 <setup>

000b4a34 <module_user_loop>:
}

void module_user_loop() {
   b4a34:	b508      	push	{r3, lr}
    loop();
   b4a36:	f002 fc0b 	bl	b7250 <loop>
    _post_loop();
}
   b4a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a3e:	f006 bb6f 	b.w	bb120 <_post_loop>

000b4a42 <_Znaj>:
   b4a42:	f005 bfbb 	b.w	ba9bc <malloc>

000b4a46 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a46:	f005 bfc1 	b.w	ba9cc <free>
	...

000b4a4c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a4c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a4e:	4a03      	ldr	r2, [pc, #12]	; (b4a5c <__cxa_pure_virtual+0x10>)
   b4a50:	4903      	ldr	r1, [pc, #12]	; (b4a60 <__cxa_pure_virtual+0x14>)
   b4a52:	200c      	movs	r0, #12
   b4a54:	f005 ff16 	bl	ba884 <panic_>
  while (1);
   b4a58:	e7fe      	b.n	b4a58 <__cxa_pure_virtual+0xc>
   b4a5a:	bf00      	nop
   b4a5c:	000ba5d5 	.word	0x000ba5d5
   b4a60:	000bbce0 	.word	0x000bbce0

000b4a64 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a64:	7800      	ldrb	r0, [r0, #0]
   b4a66:	fab0 f080 	clz	r0, r0
   b4a6a:	0940      	lsrs	r0, r0, #5
   b4a6c:	4770      	bx	lr

000b4a6e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a6e:	2301      	movs	r3, #1
   b4a70:	7003      	strb	r3, [r0, #0]
   b4a72:	4770      	bx	lr

000b4a74 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b4a74:	4a0f      	ldr	r2, [pc, #60]	; (b4ab4 <_Z10borradoALLi.part.0+0x40>)
   b4a76:	2300      	movs	r3, #0
   b4a78:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b4a7a:	4a0f      	ldr	r2, [pc, #60]	; (b4ab8 <_Z10borradoALLi.part.0+0x44>)
   b4a7c:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b4a7e:	4a0f      	ldr	r2, [pc, #60]	; (b4abc <_Z10borradoALLi.part.0+0x48>)
   b4a80:	7013      	strb	r3, [r2, #0]
      if1 = false; if2 = false; then1 = false; then2 = false; else1 = false; else2 = false;
   b4a82:	4a0f      	ldr	r2, [pc, #60]	; (b4ac0 <_Z10borradoALLi.part.0+0x4c>)
   b4a84:	7013      	strb	r3, [r2, #0]
   b4a86:	4a0f      	ldr	r2, [pc, #60]	; (b4ac4 <_Z10borradoALLi.part.0+0x50>)
   b4a88:	7013      	strb	r3, [r2, #0]
   b4a8a:	4a0f      	ldr	r2, [pc, #60]	; (b4ac8 <_Z10borradoALLi.part.0+0x54>)
   b4a8c:	7013      	strb	r3, [r2, #0]
   b4a8e:	4a0f      	ldr	r2, [pc, #60]	; (b4acc <_Z10borradoALLi.part.0+0x58>)
   b4a90:	7013      	strb	r3, [r2, #0]
   b4a92:	4a0f      	ldr	r2, [pc, #60]	; (b4ad0 <_Z10borradoALLi.part.0+0x5c>)
   b4a94:	7013      	strb	r3, [r2, #0]
   b4a96:	4a0f      	ldr	r2, [pc, #60]	; (b4ad4 <_Z10borradoALLi.part.0+0x60>)
   b4a98:	7013      	strb	r3, [r2, #0]
      scroll = 0;
   b4a9a:	4a0f      	ldr	r2, [pc, #60]	; (b4ad8 <_Z10borradoALLi.part.0+0x64>)
   b4a9c:	6013      	str	r3, [r2, #0]

      numBloque = -1;
   b4a9e:	4a0f      	ldr	r2, [pc, #60]	; (b4adc <_Z10borradoALLi.part.0+0x68>)
   b4aa0:	f04f 31ff 	mov.w	r1, #4294967295
   b4aa4:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b4aa6:	4a0e      	ldr	r2, [pc, #56]	; (b4ae0 <_Z10borradoALLi.part.0+0x6c>)
   b4aa8:	2103      	movs	r1, #3
   b4aaa:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b4aac:	4a0d      	ldr	r2, [pc, #52]	; (b4ae4 <_Z10borradoALLi.part.0+0x70>)
   b4aae:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b4ab0:	4770      	bx	lr
   b4ab2:	bf00      	nop
   b4ab4:	2003c729 	.word	0x2003c729
   b4ab8:	2003c738 	.word	0x2003c738
   b4abc:	2003c728 	.word	0x2003c728
   b4ac0:	2003d6d4 	.word	0x2003d6d4
   b4ac4:	2003d6d5 	.word	0x2003d6d5
   b4ac8:	2003e6ac 	.word	0x2003e6ac
   b4acc:	2003e6ad 	.word	0x2003e6ad
   b4ad0:	2003d6c8 	.word	0x2003d6c8
   b4ad4:	2003d6c9 	.word	0x2003d6c9
   b4ad8:	2003da44 	.word	0x2003da44
   b4adc:	2003c688 	.word	0x2003c688
   b4ae0:	2003c68c 	.word	0x2003c68c
   b4ae4:	2003da30 	.word	0x2003da30

000b4ae8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4ae8:	b570      	push	{r4, r5, r6, lr}
   b4aea:	4605      	mov	r5, r0
   b4aec:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4aee:	4616      	mov	r6, r2
   b4af0:	b942      	cbnz	r2, b4b04 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4af2:	6803      	ldr	r3, [r0, #0]
   b4af4:	b2c9      	uxtb	r1, r1
   b4af6:	689b      	ldr	r3, [r3, #8]
   b4af8:	4798      	blx	r3
        n += println();
   b4afa:	4628      	mov	r0, r5
    }
   b4afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4b00:	f006 ba1d 	b.w	baf3e <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4b04:	2900      	cmp	r1, #0
   b4b06:	da0a      	bge.n	b4b1e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4b08:	2a0a      	cmp	r2, #10
   b4b0a:	d108      	bne.n	b4b1e <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4b0c:	212d      	movs	r1, #45	; 0x2d
   b4b0e:	f006 fa13 	bl	baf38 <_ZN5Print5printEc>
            val = -n;
   b4b12:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b14:	b2f2      	uxtb	r2, r6
   b4b16:	4628      	mov	r0, r5
   b4b18:	f006 fa27 	bl	baf6a <_ZN5Print11printNumberEmh>
   b4b1c:	e7ed      	b.n	b4afa <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4b1e:	4621      	mov	r1, r4
   b4b20:	e7f8      	b.n	b4b14 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b4b22 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b22:	b40e      	push	{r1, r2, r3}
   b4b24:	b503      	push	{r0, r1, lr}
   b4b26:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4b28:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b2a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b2e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4b30:	f006 fa39 	bl	bafa6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4b34:	b002      	add	sp, #8
   b4b36:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b3a:	b003      	add	sp, #12
   b4b3c:	4770      	bx	lr

000b4b3e <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b3e:	b40e      	push	{r1, r2, r3}
   b4b40:	b503      	push	{r0, r1, lr}
   b4b42:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4b44:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b46:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b4a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4b4c:	f006 fa2b 	bl	bafa6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4b50:	b002      	add	sp, #8
   b4b52:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b56:	b003      	add	sp, #12
   b4b58:	4770      	bx	lr

000b4b5a <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4b5a:	b507      	push	{r0, r1, r2, lr}
   b4b5c:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b5e:	a801      	add	r0, sp, #4
   b4b60:	f004 feaa 	bl	b98b8 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b64:	a801      	add	r0, sp, #4
   b4b66:	f004 fea9 	bl	b98bc <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4b6a:	2809      	cmp	r0, #9
   b4b6c:	bf8c      	ite	hi
   b4b6e:	2000      	movhi	r0, #0
   b4b70:	2001      	movls	r0, #1
   b4b72:	b003      	add	sp, #12
   b4b74:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b78 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4b78:	b507      	push	{r0, r1, r2, lr}
   b4b7a:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b7c:	a801      	add	r0, sp, #4
   b4b7e:	f004 fe9b 	bl	b98b8 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b82:	a801      	add	r0, sp, #4
   b4b84:	f004 fe9a 	bl	b98bc <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4b88:	280a      	cmp	r0, #10
   b4b8a:	bfd4      	ite	le
   b4b8c:	2000      	movle	r0, #0
   b4b8e:	2001      	movgt	r0, #1
   b4b90:	b003      	add	sp, #12
   b4b92:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b96 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4b96:	2802      	cmp	r0, #2
{
   b4b98:	b508      	push	{r3, lr}
    switch (puerto)
   b4b9a:	d00b      	beq.n	b4bb4 <_Z5siLuzi+0x1e>
   b4b9c:	2804      	cmp	r0, #4
   b4b9e:	d00b      	beq.n	b4bb8 <_Z5siLuzi+0x22>
   b4ba0:	b960      	cbnz	r0, b4bbc <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4ba2:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4ba4:	f006 fe99 	bl	bb8da <analogRead>
   b4ba8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4bac:	bfb4      	ite	lt
   b4bae:	2000      	movlt	r0, #0
   b4bb0:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4bb2:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4bb4:	2011      	movs	r0, #17
   b4bb6:	e7f5      	b.n	b4ba4 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4bb8:	200f      	movs	r0, #15
   b4bba:	e7f3      	b.n	b4ba4 <_Z5siLuzi+0xe>
    switch (puerto)
   b4bbc:	2000      	movs	r0, #0
   b4bbe:	e7f8      	b.n	b4bb2 <_Z5siLuzi+0x1c>

000b4bc0 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4bc0:	2802      	cmp	r0, #2
{
   b4bc2:	b508      	push	{r3, lr}
    switch (puerto)
   b4bc4:	d00b      	beq.n	b4bde <_Z5noLuzi+0x1e>
   b4bc6:	2804      	cmp	r0, #4
   b4bc8:	d00b      	beq.n	b4be2 <_Z5noLuzi+0x22>
   b4bca:	b960      	cbnz	r0, b4be6 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4bcc:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4bce:	f006 fe84 	bl	bb8da <analogRead>
   b4bd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4bd6:	bfcc      	ite	gt
   b4bd8:	2000      	movgt	r0, #0
   b4bda:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4bdc:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4bde:	2011      	movs	r0, #17
   b4be0:	e7f5      	b.n	b4bce <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4be2:	200f      	movs	r0, #15
   b4be4:	e7f3      	b.n	b4bce <_Z5noLuzi+0xe>
    switch (puerto)
   b4be6:	2000      	movs	r0, #0
   b4be8:	e7f8      	b.n	b4bdc <_Z5noLuzi+0x1c>
	...

000b4bec <_Z7siRuidoi>:

bool siRuido(int puerto)
{
    int p;
    switch (puerto)
   b4bec:	2802      	cmp	r0, #2
{
   b4bee:	b510      	push	{r4, lr}
    switch (puerto)
   b4bf0:	d019      	beq.n	b4c26 <_Z7siRuidoi+0x3a>
   b4bf2:	2804      	cmp	r0, #4
   b4bf4:	d019      	beq.n	b4c2a <_Z7siRuidoi+0x3e>
   b4bf6:	b9d0      	cbnz	r0, b4c2e <_Z7siRuidoi+0x42>
    {
    case 0:
        p = A0;
   b4bf8:	2013      	movs	r0, #19

    default:
        return false;
    }

    int sonido = analogRead(p);
   b4bfa:	f006 fe6e 	bl	bb8da <analogRead>
   b4bfe:	4604      	mov	r4, r0
    Serial.println(sonido);
   b4c00:	f006 fbf8 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b4c04:	220a      	movs	r2, #10
   b4c06:	4621      	mov	r1, r4
   b4c08:	f7ff ff6e 	bl	b4ae8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sonido >= 1600)
   b4c0c:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
   b4c10:	4a08      	ldr	r2, [pc, #32]	; (b4c34 <_Z7siRuidoi+0x48>)
        ruid = 12;
   b4c12:	bfa4      	itt	ge
   b4c14:	230c      	movge	r3, #12
   b4c16:	6013      	strge	r3, [r2, #0]
    if (ruid > 0){
   b4c18:	6813      	ldr	r3, [r2, #0]
   b4c1a:	2b00      	cmp	r3, #0
   b4c1c:	dd07      	ble.n	b4c2e <_Z7siRuidoi+0x42>
        ruid--;
   b4c1e:	3b01      	subs	r3, #1
   b4c20:	6013      	str	r3, [r2, #0]
        return true;}
   b4c22:	2001      	movs	r0, #1
    return false;
}
   b4c24:	bd10      	pop	{r4, pc}
    switch (puerto)
   b4c26:	2011      	movs	r0, #17
   b4c28:	e7e7      	b.n	b4bfa <_Z7siRuidoi+0xe>
        p = A4;
   b4c2a:	200f      	movs	r0, #15
   b4c2c:	e7e5      	b.n	b4bfa <_Z7siRuidoi+0xe>
    return false;
   b4c2e:	2000      	movs	r0, #0
   b4c30:	e7f8      	b.n	b4c24 <_Z7siRuidoi+0x38>
   b4c32:	bf00      	nop
   b4c34:	2003da40 	.word	0x2003da40

000b4c38 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4c38:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4c3a:	b280      	uxth	r0, r0
   b4c3c:	f006 fe4d 	bl	bb8da <analogRead>
        return true;
    return false;
}
   b4c40:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4c44:	bfcc      	ite	gt
   b4c46:	2000      	movgt	r0, #0
   b4c48:	2001      	movle	r0, #1
   b4c4a:	bd08      	pop	{r3, pc}

000b4c4c <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4c4c:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c4e:	b280      	uxth	r0, r0
   b4c50:	2100      	movs	r1, #0
   b4c52:	9001      	str	r0, [sp, #4]
   b4c54:	f006 fe04 	bl	bb860 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4c58:	9801      	ldr	r0, [sp, #4]
   b4c5a:	f006 fe2b 	bl	bb8b4 <digitalRead>
        return true;
    return false;
}
   b4c5e:	1e43      	subs	r3, r0, #1
   b4c60:	4258      	negs	r0, r3
   b4c62:	4158      	adcs	r0, r3
   b4c64:	b003      	add	sp, #12
   b4c66:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c6a <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4c6a:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c6c:	b280      	uxth	r0, r0
   b4c6e:	2100      	movs	r1, #0
   b4c70:	9001      	str	r0, [sp, #4]
   b4c72:	f006 fdf5 	bl	bb860 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4c76:	9801      	ldr	r0, [sp, #4]
   b4c78:	f006 fe1c 	bl	bb8b4 <digitalRead>
        return true;
    return false;
}
   b4c7c:	fab0 f080 	clz	r0, r0
   b4c80:	0940      	lsrs	r0, r0, #5
   b4c82:	b003      	add	sp, #12
   b4c84:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c88 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4c88:	2802      	cmp	r0, #2
{
   b4c8a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4c8c:	d030      	beq.n	b4cf0 <_Z10siRotativoi+0x68>
   b4c8e:	2804      	cmp	r0, #4
   b4c90:	d030      	beq.n	b4cf4 <_Z10siRotativoi+0x6c>
   b4c92:	b918      	cbnz	r0, b4c9c <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4c94:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4c96:	f006 fe20 	bl	bb8da <analogRead>
   b4c9a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4c9c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ca4:	ee17 0a90 	vmov	r0, s15
   b4ca8:	f7ff fb1e 	bl	b42e8 <__aeabi_f2d>
   b4cac:	a314      	add	r3, pc, #80	; (adr r3, b4d00 <_Z10siRotativoi+0x78>)
   b4cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cb2:	f7ff fb71 	bl	b4398 <__aeabi_dmul>
   b4cb6:	a314      	add	r3, pc, #80	; (adr r3, b4d08 <_Z10siRotativoi+0x80>)
   b4cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cbc:	f7ff fc96 	bl	b45ec <__aeabi_ddiv>
   b4cc0:	f7ff fe2c 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4cc4:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4cf8 <_Z10siRotativoi+0x70>
   b4cc8:	ee07 0a10 	vmov	s14, r0
   b4ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4cd0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4cd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b4cd8:	eddf 7a08 	vldr	s15, [pc, #32]	; b4cfc <_Z10siRotativoi+0x74>
   b4cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4ce4:	bf94      	ite	ls
   b4ce6:	2001      	movls	r0, #1
   b4ce8:	2000      	movhi	r0, #0
   b4cea:	b003      	add	sp, #12
   b4cec:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4cf0:	2011      	movs	r0, #17
   b4cf2:	e7d0      	b.n	b4c96 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4cf4:	200f      	movs	r0, #15
   b4cf6:	e7ce      	b.n	b4c96 <_Z10siRotativoi+0xe>
   b4cf8:	43960000 	.word	0x43960000
   b4cfc:	43b40000 	.word	0x43b40000
   b4d00:	66666666 	.word	0x66666666
   b4d04:	400a6666 	.word	0x400a6666
   b4d08:	00000000 	.word	0x00000000
   b4d0c:	408ff800 	.word	0x408ff800

000b4d10 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4d10:	2802      	cmp	r0, #2
{
   b4d12:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4d14:	d030      	beq.n	b4d78 <_Z10noRotativoi+0x68>
   b4d16:	2804      	cmp	r0, #4
   b4d18:	d030      	beq.n	b4d7c <_Z10noRotativoi+0x6c>
   b4d1a:	b918      	cbnz	r0, b4d24 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4d1c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4d1e:	f006 fddc 	bl	bb8da <analogRead>
   b4d22:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4d24:	eddd 7a01 	vldr	s15, [sp, #4]
   b4d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d2c:	ee17 0a90 	vmov	r0, s15
   b4d30:	f7ff fada 	bl	b42e8 <__aeabi_f2d>
   b4d34:	a314      	add	r3, pc, #80	; (adr r3, b4d88 <_Z10noRotativoi+0x78>)
   b4d36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d3a:	f7ff fb2d 	bl	b4398 <__aeabi_dmul>
   b4d3e:	a314      	add	r3, pc, #80	; (adr r3, b4d90 <_Z10noRotativoi+0x80>)
   b4d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d44:	f7ff fc52 	bl	b45ec <__aeabi_ddiv>
   b4d48:	f7ff fde8 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4d4c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4d80 <_Z10noRotativoi+0x70>
   b4d50:	ee07 0a10 	vmov	s14, r0
   b4d54:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4d58:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4d5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4d60:	eddf 7a08 	vldr	s15, [pc, #32]	; b4d84 <_Z10noRotativoi+0x74>
   b4d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4d6c:	bfac      	ite	ge
   b4d6e:	2001      	movge	r0, #1
   b4d70:	2000      	movlt	r0, #0
   b4d72:	b003      	add	sp, #12
   b4d74:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4d78:	2011      	movs	r0, #17
   b4d7a:	e7d0      	b.n	b4d1e <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4d7c:	200f      	movs	r0, #15
   b4d7e:	e7ce      	b.n	b4d1e <_Z10noRotativoi+0xe>
   b4d80:	43960000 	.word	0x43960000
   b4d84:	43b40000 	.word	0x43b40000
   b4d88:	66666666 	.word	0x66666666
   b4d8c:	400a6666 	.word	0x400a6666
   b4d90:	00000000 	.word	0x00000000
   b4d94:	408ff800 	.word	0x408ff800

000b4d98 <_Z10BotonDualAi>:

bool BotonDualA(int puerto)
{
   b4d98:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4d9a:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4d9c:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4d9e:	2100      	movs	r1, #0
   b4da0:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4da2:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4da4:	f006 fd5c 	bl	bb860 <pinMode>
    pinMode(puerto+1, INPUT);
   b4da8:	4628      	mov	r0, r5
   b4daa:	2100      	movs	r1, #0
   b4dac:	f006 fd58 	bl	bb860 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == HIGH)
   b4db0:	4620      	mov	r0, r4
   b4db2:	f006 fd7f 	bl	bb8b4 <digitalRead>
   b4db6:	b930      	cbnz	r0, b4dc6 <_Z10BotonDualAi+0x2e>
   b4db8:	4628      	mov	r0, r5
   b4dba:	f006 fd7b 	bl	bb8b4 <digitalRead>
   b4dbe:	1e43      	subs	r3, r0, #1
   b4dc0:	4258      	negs	r0, r3
   b4dc2:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4dc4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4dc6:	2000      	movs	r0, #0
   b4dc8:	e7fc      	b.n	b4dc4 <_Z10BotonDualAi+0x2c>

000b4dca <_Z10BotonDualBi>:

bool BotonDualB(int puerto)
{
   b4dca:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto+1, INPUT);
   b4dcc:	b284      	uxth	r4, r0
   b4dce:	1c65      	adds	r5, r4, #1
   b4dd0:	b2ad      	uxth	r5, r5
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	4628      	mov	r0, r5
   b4dd6:	f006 fd43 	bl	bb860 <pinMode>
    pinMode(puerto, INPUT);
   b4dda:	4620      	mov	r0, r4
   b4ddc:	2100      	movs	r1, #0
   b4dde:	f006 fd3f 	bl	bb860 <pinMode>
    if (digitalRead(puerto+1) == LOW && digitalRead(puerto) == HIGH)
   b4de2:	4628      	mov	r0, r5
   b4de4:	f006 fd66 	bl	bb8b4 <digitalRead>
   b4de8:	b930      	cbnz	r0, b4df8 <_Z10BotonDualBi+0x2e>
   b4dea:	4620      	mov	r0, r4
   b4dec:	f006 fd62 	bl	bb8b4 <digitalRead>
   b4df0:	1e43      	subs	r3, r0, #1
   b4df2:	4258      	negs	r0, r3
   b4df4:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4df6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4df8:	2000      	movs	r0, #0
   b4dfa:	e7fc      	b.n	b4df6 <_Z10BotonDualBi+0x2c>

000b4dfc <_Z10BotonDual2i>:

bool BotonDual2(int puerto)
{
   b4dfc:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4dfe:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4e00:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4e02:	2100      	movs	r1, #0
   b4e04:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4e06:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4e08:	f006 fd2a 	bl	bb860 <pinMode>
    pinMode(puerto+1, INPUT);
   b4e0c:	4628      	mov	r0, r5
   b4e0e:	2100      	movs	r1, #0
   b4e10:	f006 fd26 	bl	bb860 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == LOW)
   b4e14:	4620      	mov	r0, r4
   b4e16:	f006 fd4d 	bl	bb8b4 <digitalRead>
   b4e1a:	b930      	cbnz	r0, b4e2a <_Z10BotonDual2i+0x2e>
   b4e1c:	4628      	mov	r0, r5
   b4e1e:	f006 fd49 	bl	bb8b4 <digitalRead>
   b4e22:	fab0 f080 	clz	r0, r0
   b4e26:	0940      	lsrs	r0, r0, #5
        return true;
    return false;
}
   b4e28:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e2a:	2000      	movs	r0, #0
   b4e2c:	e7fc      	b.n	b4e28 <_Z10BotonDual2i+0x2c>

000b4e2e <_Z11noBotonDuali>:

bool noBotonDual(int puerto)
{
   b4e2e:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4e30:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4e32:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4e34:	2100      	movs	r1, #0
   b4e36:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4e38:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4e3a:	f006 fd11 	bl	bb860 <pinMode>
    pinMode(puerto+1, INPUT);
   b4e3e:	2100      	movs	r1, #0
   b4e40:	4628      	mov	r0, r5
   b4e42:	f006 fd0d 	bl	bb860 <pinMode>
    if (digitalRead(puerto) == HIGH && digitalRead(puerto+1) == HIGH)
   b4e46:	4620      	mov	r0, r4
   b4e48:	f006 fd34 	bl	bb8b4 <digitalRead>
   b4e4c:	2801      	cmp	r0, #1
   b4e4e:	d106      	bne.n	b4e5e <_Z11noBotonDuali+0x30>
   b4e50:	4628      	mov	r0, r5
   b4e52:	f006 fd2f 	bl	bb8b4 <digitalRead>
   b4e56:	1e43      	subs	r3, r0, #1
   b4e58:	4258      	negs	r0, r3
   b4e5a:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4e5c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e5e:	2000      	movs	r0, #0
   b4e60:	e7fc      	b.n	b4e5c <_Z11noBotonDuali+0x2e>

000b4e62 <_Z4Cafei>:


bool Cafe(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e62:	2802      	cmp	r0, #2
{
   b4e64:	b510      	push	{r4, lr}
    switch (puerto)
   b4e66:	d012      	beq.n	b4e8e <_Z4Cafei+0x2c>
   b4e68:	2804      	cmp	r0, #4
   b4e6a:	d012      	beq.n	b4e92 <_Z4Cafei+0x30>
   b4e6c:	b918      	cbnz	r0, b4e76 <_Z4Cafei+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e6e:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e70:	f006 fd33 	bl	bb8da <analogRead>
   b4e74:	4604      	mov	r4, r0
        break;
    }
    Serial.println(sensor_value);
   b4e76:	f006 fabd 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b4e7a:	220a      	movs	r2, #10
   b4e7c:	4621      	mov	r1, r4
   b4e7e:	f7ff fe33 	bl	b4ae8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sensor_value < 2000)
        return true;
    return false;
}
   b4e82:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4e86:	bfac      	ite	ge
   b4e88:	2000      	movge	r0, #0
   b4e8a:	2001      	movlt	r0, #1
   b4e8c:	bd10      	pop	{r4, pc}
        sensor_value = analogRead(A2);
   b4e8e:	2011      	movs	r0, #17
   b4e90:	e7ee      	b.n	b4e70 <_Z4Cafei+0xe>
        sensor_value = analogRead(A4);
   b4e92:	200f      	movs	r0, #15
   b4e94:	e7ec      	b.n	b4e70 <_Z4Cafei+0xe>

000b4e96 <_Z9AguaClarai>:

bool AguaClara(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e96:	2802      	cmp	r0, #2
{
   b4e98:	b508      	push	{r3, lr}
    switch (puerto)
   b4e9a:	d00d      	beq.n	b4eb8 <_Z9AguaClarai+0x22>
   b4e9c:	2804      	cmp	r0, #4
   b4e9e:	d00d      	beq.n	b4ebc <_Z9AguaClarai+0x26>
   b4ea0:	b918      	cbnz	r0, b4eaa <_Z9AguaClarai+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4ea2:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4ea4:	f006 fd19 	bl	bb8da <analogRead>
   b4ea8:	4603      	mov	r3, r0
        break;
    }
    if (sensor_value > 2500)
        return true;
    return false;
}
   b4eaa:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b4eae:	4283      	cmp	r3, r0
   b4eb0:	bfd4      	ite	le
   b4eb2:	2000      	movle	r0, #0
   b4eb4:	2001      	movgt	r0, #1
   b4eb6:	bd08      	pop	{r3, pc}
        sensor_value = analogRead(A2);
   b4eb8:	2011      	movs	r0, #17
   b4eba:	e7f3      	b.n	b4ea4 <_Z9AguaClarai+0xe>
        sensor_value = analogRead(A4);
   b4ebc:	200f      	movs	r0, #15
   b4ebe:	e7f1      	b.n	b4ea4 <_Z9AguaClarai+0xe>

000b4ec0 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4ec0:	b530      	push	{r4, r5, lr}
   b4ec2:	ed2d 8b02 	vpush	{d8}
   b4ec6:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4ec8:	b2c1      	uxtb	r1, r0
   b4eca:	2306      	movs	r3, #6
   b4ecc:	220b      	movs	r2, #11
   b4ece:	a801      	add	r0, sp, #4
   b4ed0:	f004 fd18 	bl	b9904 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4ed4:	a801      	add	r0, sp, #4
   b4ed6:	f004 fd1c 	bl	b9912 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4eda:	a801      	add	r0, sp, #4
   b4edc:	f004 fdd6 	bl	b9a8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4ee0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4ee8:	eeb4 0a40 	vcmp.f32	s0, s0
   b4eec:	bf0c      	ite	eq
   b4eee:	2401      	moveq	r4, #1
   b4ef0:	2400      	movne	r4, #0
   b4ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ef6:	bf68      	it	vs
   b4ef8:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4efc:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4f00:	2c00      	cmp	r4, #0
   b4f02:	d1ea      	bne.n	b4eda <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4f04:	f006 fa76 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b4f08:	4605      	mov	r5, r0
   b4f0a:	ee18 0a10 	vmov	r0, s16
   b4f0e:	f7ff f9eb 	bl	b42e8 <__aeabi_f2d>
   b4f12:	4602      	mov	r2, r0
   b4f14:	460b      	mov	r3, r1
   b4f16:	4628      	mov	r0, r5
   b4f18:	490a      	ldr	r1, [pc, #40]	; (b4f44 <_Z8tempFrioi+0x84>)
   b4f1a:	f7ff fe10 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4f1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f26:	dd08      	ble.n	b4f3a <_Z8tempFrioi+0x7a>
   b4f28:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4f2c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f34:	bf4c      	ite	mi
   b4f36:	2401      	movmi	r4, #1
   b4f38:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4f3a:	4620      	mov	r0, r4
   b4f3c:	b007      	add	sp, #28
   b4f3e:	ecbd 8b02 	vpop	{d8}
   b4f42:	bd30      	pop	{r4, r5, pc}
   b4f44:	000bbcf5 	.word	0x000bbcf5

000b4f48 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4f48:	b510      	push	{r4, lr}
   b4f4a:	ed2d 8b02 	vpush	{d8}
   b4f4e:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4f50:	b2c1      	uxtb	r1, r0
   b4f52:	2306      	movs	r3, #6
   b4f54:	220b      	movs	r2, #11
   b4f56:	a801      	add	r0, sp, #4
   b4f58:	f004 fcd4 	bl	b9904 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f5c:	a801      	add	r0, sp, #4
   b4f5e:	f004 fcd8 	bl	b9912 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f62:	a801      	add	r0, sp, #4
   b4f64:	f004 fd92 	bl	b9a8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4f68:	eeb4 0a40 	vcmp.f32	s0, s0
   b4f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4f70:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4f74:	d6f5      	bvs.n	b4f62 <_Z12tempTempladoi+0x1a>
   b4f76:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f7e:	d0f0      	beq.n	b4f62 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4f80:	f006 fa38 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b4f84:	4604      	mov	r4, r0
   b4f86:	ee18 0a10 	vmov	r0, s16
   b4f8a:	f7ff f9ad 	bl	b42e8 <__aeabi_f2d>
   b4f8e:	4602      	mov	r2, r0
   b4f90:	460b      	mov	r3, r1
   b4f92:	4620      	mov	r0, r4
   b4f94:	490c      	ldr	r1, [pc, #48]	; (b4fc8 <_Z12tempTempladoi+0x80>)
   b4f96:	f7ff fdd2 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4f9a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4f9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fa6:	dc04      	bgt.n	b4fb2 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4fa8:	2000      	movs	r0, #0
}
   b4faa:	b006      	add	sp, #24
   b4fac:	ecbd 8b02 	vpop	{d8}
   b4fb0:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4fb2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4fb6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fbe:	bf4c      	ite	mi
   b4fc0:	2001      	movmi	r0, #1
   b4fc2:	2000      	movpl	r0, #0
   b4fc4:	e7f1      	b.n	b4faa <_Z12tempTempladoi+0x62>
   b4fc6:	bf00      	nop
   b4fc8:	000bbcf5 	.word	0x000bbcf5

000b4fcc <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4fcc:	b530      	push	{r4, r5, lr}
   b4fce:	ed2d 8b02 	vpush	{d8}
   b4fd2:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4fd4:	b2c1      	uxtb	r1, r0
   b4fd6:	2306      	movs	r3, #6
   b4fd8:	220b      	movs	r2, #11
   b4fda:	a801      	add	r0, sp, #4
   b4fdc:	f004 fc92 	bl	b9904 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4fe0:	a801      	add	r0, sp, #4
   b4fe2:	f004 fc96 	bl	b9912 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4fe6:	a801      	add	r0, sp, #4
   b4fe8:	f004 fd50 	bl	b9a8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4fec:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ff4:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ff8:	bf0c      	ite	eq
   b4ffa:	2401      	moveq	r4, #1
   b4ffc:	2400      	movne	r4, #0
   b4ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5002:	bf68      	it	vs
   b5004:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b5008:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b500c:	2c00      	cmp	r4, #0
   b500e:	d1ea      	bne.n	b4fe6 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b5010:	f006 f9f0 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5014:	4605      	mov	r5, r0
   b5016:	ee18 0a10 	vmov	r0, s16
   b501a:	f7ff f965 	bl	b42e8 <__aeabi_f2d>
   b501e:	4602      	mov	r2, r0
   b5020:	460b      	mov	r3, r1
   b5022:	4628      	mov	r0, r5
   b5024:	490b      	ldr	r1, [pc, #44]	; (b5054 <_Z9tempCalori+0x88>)
   b5026:	f7ff fd8a 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b502a:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b502e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5036:	dd08      	ble.n	b504a <_Z9tempCalori+0x7e>
   b5038:	eddf 7a07 	vldr	s15, [pc, #28]	; b5058 <_Z9tempCalori+0x8c>
   b503c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5044:	bf4c      	ite	mi
   b5046:	2401      	movmi	r4, #1
   b5048:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b504a:	4620      	mov	r0, r4
   b504c:	b007      	add	sp, #28
   b504e:	ecbd 8b02 	vpop	{d8}
   b5052:	bd30      	pop	{r4, r5, pc}
   b5054:	000bbcf5 	.word	0x000bbcf5
   b5058:	42480000 	.word	0x42480000

000b505c <_Z12DistanciaExpi>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   3 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

int DistanciaExp(int puerto)
{
   b505c:	b507      	push	{r0, r1, r2, lr}
   b505e:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b5060:	a801      	add	r0, sp, #4
   b5062:	f004 fc29 	bl	b98b8 <_ZN10UltrasonicC1Ei>
    int range = ultrasonic.MeasureInCentimeters();
   b5066:	a801      	add	r0, sp, #4
   b5068:	f004 fc28 	bl	b98bc <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    return range;
}
   b506c:	b003      	add	sp, #12
   b506e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5074 <_Z9AnguloExpv>:

int AnguloExp()
{
   b5074:	b510      	push	{r4, lr}
   b5076:	ed2d 8b04 	vpush	{d8-d9}
   float voltage;
    int sensor_value;
    for (int i = 0; i < 50; i++){
        sensor_value = analogRead(rotoryAngle_PIN);
        voltage += (float)sensor_value * 5 / 1023;
   b507a:	ed9f 9a1b 	vldr	s18, [pc, #108]	; b50e8 <_Z9AnguloExpv+0x74>
{
   b507e:	2432      	movs	r4, #50	; 0x32
        voltage += (float)sensor_value * 5 / 1023;
   b5080:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
        sensor_value = analogRead(rotoryAngle_PIN);
   b5084:	2013      	movs	r0, #19
   b5086:	f006 fc28 	bl	bb8da <analogRead>
        voltage += (float)sensor_value * 5 / 1023;
   b508a:	ee07 0a90 	vmov	s15, r0
   b508e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < 50; i++){
   b5092:	3c01      	subs	r4, #1
        voltage += (float)sensor_value * 5 / 1023;
   b5094:	ee67 7a88 	vmul.f32	s15, s15, s16
   b5098:	ee87 7a89 	vdiv.f32	s14, s15, s18
   b509c:	ee78 8a87 	vadd.f32	s17, s17, s14
    for (int i = 0; i < 50; i++){
   b50a0:	d1f0      	bne.n	b5084 <_Z9AnguloExpv+0x10>
    }
    voltage = voltage/50;
   b50a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; b50ec <_Z9AnguloExpv+0x78>
   float degrees = (voltage * 300) / 5;
   degrees = degrees * 270 / 1200;
   b50a6:	ed9f 6a12 	vldr	s12, [pc, #72]	; b50f0 <_Z9AnguloExpv+0x7c>
    voltage = voltage/50;
   b50aa:	eec8 7a87 	vdiv.f32	s15, s17, s14
   float degrees = (voltage * 300) / 5;
   b50ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; b50f4 <_Z9AnguloExpv+0x80>
   b50b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b50b6:	ee87 7a88 	vdiv.f32	s14, s15, s16
   degrees = 270 - degrees;
   if (degrees < 0)
    degrees = 0;

   return (int) degrees;
}
   b50ba:	ecbd 8b04 	vpop	{d8-d9}
   degrees = degrees * 270 / 1200;
   b50be:	eddf 7a0e 	vldr	s15, [pc, #56]	; b50f8 <_Z9AnguloExpv+0x84>
   b50c2:	ee27 7a27 	vmul.f32	s14, s14, s15
   b50c6:	eec7 6a06 	vdiv.f32	s13, s14, s12
   degrees = 270 - degrees;
   b50ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
   if (degrees < 0)
   b50ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b50d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    degrees = 0;
   b50d6:	bf48      	it	mi
   b50d8:	eddf 7a08 	vldrmi	s15, [pc, #32]	; b50fc <_Z9AnguloExpv+0x88>
}
   b50dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b50e0:	ee17 0a90 	vmov	r0, s15
   b50e4:	bd10      	pop	{r4, pc}
   b50e6:	bf00      	nop
   b50e8:	447fc000 	.word	0x447fc000
   b50ec:	42480000 	.word	0x42480000
   b50f0:	44960000 	.word	0x44960000
   b50f4:	43960000 	.word	0x43960000
   b50f8:	43870000 	.word	0x43870000
   b50fc:	00000000 	.word	0x00000000

000b5100 <_Z6LuzExpv>:

int LuzExp()
{
   b5100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5102:	2432      	movs	r4, #50	; 0x32
    int value = 0;
   b5104:	2500      	movs	r5, #0
    for (int i = 0; i < 50; i++){
        value += analogRead(sensorLuz_PIN);
   b5106:	2013      	movs	r0, #19
   b5108:	f006 fbe7 	bl	bb8da <analogRead>
    for (int i = 0; i < 50; i++){
   b510c:	3c01      	subs	r4, #1
        value += analogRead(sensorLuz_PIN);
   b510e:	4405      	add	r5, r0
    for (int i = 0; i < 50; i++){
   b5110:	d1f9      	bne.n	b5106 <_Z6LuzExpv+0x6>
    }
    value = value/50;
    value = map(value, 0, 4095, 0, 100);
   b5112:	2364      	movs	r3, #100	; 0x64
   b5114:	9300      	str	r3, [sp, #0]
   b5116:	f640 72ff 	movw	r2, #4095	; 0xfff
   b511a:	4623      	mov	r3, r4
   b511c:	4621      	mov	r1, r4
   b511e:	2032      	movs	r0, #50	; 0x32
   b5120:	fb95 f0f0 	sdiv	r0, r5, r0
   b5124:	f005 ff82 	bl	bb02c <_Z3mapiiiii>
    return value;
   
}
   b5128:	b003      	add	sp, #12
   b512a:	bd30      	pop	{r4, r5, pc}
   b512c:	0000      	movs	r0, r0
	...

000b5130 <_Z15SensorSonidoExpv>:

int SensorSonidoExp()
{
   b5130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5134:	f005 fa56 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    unsigned int sample;
    unsigned long startMillis= millis();                   // Start of sample window
    double peakToPeak = 0;                                 // peak-to-peak level
    
    unsigned int signalMax = 0;                            //minimum value
    unsigned int signalMin = 1024;                         //maximum value
   b5138:	f44f 6580 	mov.w	r5, #1024	; 0x400
   b513c:	4607      	mov	r7, r0
    unsigned int signalMax = 0;                            //minimum value
   b513e:	2600      	movs	r6, #0
   b5140:	f005 fa50 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    
                                                            // collect data for 50 mS
    while (millis() - startMillis < sampleWindow)
   b5144:	1bc0      	subs	r0, r0, r7
   b5146:	2831      	cmp	r0, #49	; 0x31
   b5148:	d818      	bhi.n	b517c <_Z15SensorSonidoExpv+0x4c>
    {
        sample = analogRead(sensorSonido_PIN);              //get reading from microphone
   b514a:	2013      	movs	r0, #19
   b514c:	f006 fbc5 	bl	bb8da <analogRead>
   b5150:	4604      	mov	r4, r0
        Serial.println(sample);
   b5152:	f006 f94f 	bl	bb3f4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5156:	220a      	movs	r2, #10
   b5158:	4680      	mov	r8, r0
   b515a:	4621      	mov	r1, r4
   b515c:	f005 ff05 	bl	baf6a <_ZN5Print11printNumberEmh>
        n += println();
   b5160:	4640      	mov	r0, r8
   b5162:	f005 feec 	bl	baf3e <_ZN5Print7printlnEv>
        if (sample < 1024)                                  // toss out spurious readings
   b5166:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   b516a:	d2e9      	bcs.n	b5140 <_Z15SensorSonidoExpv+0x10>
        {
            if (sample > signalMax)
   b516c:	42a6      	cmp	r6, r4
   b516e:	d303      	bcc.n	b5178 <_Z15SensorSonidoExpv+0x48>
            {
                signalMax = sample;                           // save just the max levels
            }
            else if (sample < signalMin)
   b5170:	42a5      	cmp	r5, r4
   b5172:	bf28      	it	cs
   b5174:	4625      	movcs	r5, r4
   b5176:	e7e3      	b.n	b5140 <_Z15SensorSonidoExpv+0x10>
   b5178:	4626      	mov	r6, r4
   b517a:	e7e1      	b.n	b5140 <_Z15SensorSonidoExpv+0x10>
                signalMin = sample;                           // save just the min levels
            }
        }
    }
        
    peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
   b517c:	1b70      	subs	r0, r6, r5
   b517e:	f7ff f891 	bl	b42a4 <__aeabi_ui2d>
    int db = map(peakToPeak,20.0,900.0,49.5,90.0); 
   b5182:	ed9f 4b09 	vldr	d4, [pc, #36]	; b51a8 <_Z15SensorSonidoExpv+0x78>
   b5186:	ed9f 3b0a 	vldr	d3, [pc, #40]	; b51b0 <_Z15SensorSonidoExpv+0x80>
   b518a:	ed9f 2b0b 	vldr	d2, [pc, #44]	; b51b8 <_Z15SensorSonidoExpv+0x88>
   b518e:	ed9f 1b0c 	vldr	d1, [pc, #48]	; b51c0 <_Z15SensorSonidoExpv+0x90>
   b5192:	ec41 0b10 	vmov	d0, r0, r1
   b5196:	f005 ff55 	bl	bb044 <_Z3mapddddd>
   b519a:	ec51 0b10 	vmov	r0, r1, d0
   b519e:	f7ff fb95 	bl	b48cc <__aeabi_d2iz>
    return db;
    }
   b51a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b51a6:	bf00      	nop
   b51a8:	00000000 	.word	0x00000000
   b51ac:	40568000 	.word	0x40568000
   b51b0:	00000000 	.word	0x00000000
   b51b4:	4048c000 	.word	0x4048c000
   b51b8:	00000000 	.word	0x00000000
   b51bc:	408c2000 	.word	0x408c2000
   b51c0:	00000000 	.word	0x00000000
   b51c4:	40340000 	.word	0x40340000

000b51c8 <_Z13SensorTempExpi>:

int SensorTempExp(int puerto)
{
   b51c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    DHT dht(puerto, DHT11);
   b51ca:	b2c1      	uxtb	r1, r0
   b51cc:	2306      	movs	r3, #6
   b51ce:	220b      	movs	r2, #11
   b51d0:	a801      	add	r0, sp, #4
   b51d2:	f004 fb97 	bl	b9904 <_ZN3DHTC1Ehhh>
    dht.begin();
   b51d6:	a801      	add	r0, sp, #4
   b51d8:	f004 fb9b 	bl	b9912 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b51dc:	a801      	add	r0, sp, #4
   b51de:	f004 fc55 	bl	b9a8c <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b51e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b51e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51ea:	d0f7      	beq.n	b51dc <_Z13SensorTempExpi+0x14>
   b51ec:	eeb4 0a40 	vcmp.f32	s0, s0
   b51f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51f4:	d6f2      	bvs.n	b51dc <_Z13SensorTempExpi+0x14>
    }

    //t = ajusta_temp(t); 
    
    return t;
}
   b51f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b51fa:	ee17 0a90 	vmov	r0, s15
   b51fe:	b007      	add	sp, #28
   b5200:	f85d fb04 	ldr.w	pc, [sp], #4

000b5204 <_Z9TurbiaExpi>:

int TurbiaExp(int puerto)
{
    int sensor_value;
    switch (puerto)
   b5204:	2802      	cmp	r0, #2
   b5206:	d005      	beq.n	b5214 <_Z9TurbiaExpi+0x10>
   b5208:	2804      	cmp	r0, #4
   b520a:	d005      	beq.n	b5218 <_Z9TurbiaExpi+0x14>
   b520c:	b930      	cbnz	r0, b521c <_Z9TurbiaExpi+0x18>
    {
    case 0: 
        sensor_value = analogRead(A0);
   b520e:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b5210:	f006 bb63 	b.w	bb8da <analogRead>
        sensor_value = analogRead(A2);
   b5214:	2011      	movs	r0, #17
   b5216:	e7fb      	b.n	b5210 <_Z9TurbiaExpi+0xc>
        sensor_value = analogRead(A4);
   b5218:	200f      	movs	r0, #15
   b521a:	e7f9      	b.n	b5210 <_Z9TurbiaExpi+0xc>
        break;
    }
    return sensor_value;
}
   b521c:	2000      	movs	r0, #0
   b521e:	4770      	bx	lr

000b5220 <_Z10leerSensoriii>:


bool leerSensor(int id, int condicion, int puerto)
{
   b5220:	b508      	push	{r3, lr}
   b5222:	4603      	mov	r3, r0
   b5224:	3b01      	subs	r3, #1
   b5226:	4610      	mov	r0, r2
   b5228:	2b0b      	cmp	r3, #11
   b522a:	d85f      	bhi.n	b52ec <_Z10leerSensoriii+0xcc>
   b522c:	e8df f003 	tbb	[pc, r3]
   b5230:	1d140b06 	.word	0x1d140b06
   b5234:	40062b22 	.word	0x40062b22
   b5238:	5b575346 	.word	0x5b575346
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b523c:	bba1      	cbnz	r1, b52a8 <_Z10leerSensoriii+0x88>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
}
   b523e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b5242:	f7ff bc8a 	b.w	b4b5a <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b5246:	b919      	cbnz	r1, b5250 <_Z10leerSensoriii+0x30>
}
   b5248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b524c:	f7ff bcb8 	b.w	b4bc0 <_Z5noLuzi>
}
   b5250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b5254:	f7ff bc9f 	b.w	b4b96 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5258:	b919      	cbnz	r1, b5262 <_Z10leerSensoriii+0x42>
}
   b525a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b525e:	f7ff bceb 	b.w	b4c38 <_Z7noRuidoi>
}
   b5262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5266:	f7ff bcc1 	b.w	b4bec <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b526a:	bb19      	cbnz	r1, b52b4 <_Z10leerSensoriii+0x94>
}
   b526c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5270:	f7ff bcfb 	b.w	b4c6a <_Z7noBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b5274:	b919      	cbnz	r1, b527e <_Z10leerSensoriii+0x5e>
}
   b5276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b527a:	f7ff bd49 	b.w	b4d10 <_Z10noRotativoi>
}
   b527e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b5282:	f7ff bd01 	b.w	b4c88 <_Z10siRotativoi>
        switch (condicion)
   b5286:	2901      	cmp	r1, #1
   b5288:	d006      	beq.n	b5298 <_Z10leerSensoriii+0x78>
   b528a:	2902      	cmp	r1, #2
   b528c:	d008      	beq.n	b52a0 <_Z10leerSensoriii+0x80>
   b528e:	b959      	cbnz	r1, b52a8 <_Z10leerSensoriii+0x88>
}
   b5290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b5294:	f7ff be14 	b.w	b4ec0 <_Z8tempFrioi>
}
   b5298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b529c:	f7ff be54 	b.w	b4f48 <_Z12tempTempladoi>
}
   b52a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b52a4:	f7ff be92 	b.w	b4fcc <_Z9tempCalori>
}
   b52a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b52ac:	f7ff bc64 	b.w	b4b78 <_Z11siDistanciai>
        return (condicion == 0 ? noAgua(puerto) : siAgua(puerto));
   b52b0:	2900      	cmp	r1, #0
   b52b2:	d1db      	bne.n	b526c <_Z10leerSensoriii+0x4c>
}
   b52b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b52b8:	f7ff bcc8 	b.w	b4c4c <_Z7siBotoni>
        switch (condicion)
   b52bc:	2901      	cmp	r1, #1
   b52be:	d006      	beq.n	b52ce <_Z10leerSensoriii+0xae>
   b52c0:	2903      	cmp	r1, #3
   b52c2:	d00c      	beq.n	b52de <_Z10leerSensoriii+0xbe>
   b52c4:	b939      	cbnz	r1, b52d6 <_Z10leerSensoriii+0xb6>
}
   b52c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return noBotonDual(puerto);
   b52ca:	f7ff bdb0 	b.w	b4e2e <_Z11noBotonDuali>
}
   b52ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualA(puerto);
   b52d2:	f7ff bd61 	b.w	b4d98 <_Z10BotonDualAi>
}
   b52d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualB(puerto);
   b52da:	f7ff bd76 	b.w	b4dca <_Z10BotonDualBi>
}
   b52de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDual2(puerto);
   b52e2:	f7ff bd8b 	b.w	b4dfc <_Z10BotonDual2i>
        switch (condicion)
   b52e6:	b141      	cbz	r1, b52fa <_Z10leerSensoriii+0xda>
   b52e8:	2901      	cmp	r1, #1
   b52ea:	d00a      	beq.n	b5302 <_Z10leerSensoriii+0xe2>
        Serial.println("InvalidSensorError");
   b52ec:	f006 f882 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b52f0:	4906      	ldr	r1, [pc, #24]	; (b530c <_Z10leerSensoriii+0xec>)
   b52f2:	f005 fe30 	bl	baf56 <_ZN5Print7printlnEPKc>
}
   b52f6:	2000      	movs	r0, #0
   b52f8:	bd08      	pop	{r3, pc}
   b52fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return Cafe(puerto);
   b52fe:	f7ff bdb0 	b.w	b4e62 <_Z4Cafei>
}
   b5302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return AguaClara(puerto);           
   b5306:	f7ff bdc6 	b.w	b4e96 <_Z9AguaClarai>
   b530a:	bf00      	nop
   b530c:	000bbcfe 	.word	0x000bbcfe

000b5310 <_Z13leerSensorExpii>:

int leerSensorExp(int id, int puerto){
   b5310:	b508      	push	{r3, lr}
   b5312:	4603      	mov	r3, r0
   b5314:	3b02      	subs	r3, #2
   b5316:	4608      	mov	r0, r1
   b5318:	2b0a      	cmp	r3, #10
   b531a:	d81f      	bhi.n	b535c <_Z13leerSensorExpii+0x4c>
   b531c:	e8df f003 	tbb	[pc, r3]
   b5320:	0e1e0a06 	.word	0x0e1e0a06
   b5324:	1e1e1612 	.word	0x1e1e1612
   b5328:	1e1e      	.short	0x1e1e
   b532a:	1a          	.byte	0x1a
   b532b:	00          	.byte	0x00
    
    default:
        Serial.println("InvalidSensorError");
        return -1;
    }
}
   b532c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return LuzExp();
   b5330:	f7ff bee6 	b.w	b5100 <_Z6LuzExpv>
}
   b5334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorSonidoExp();
   b5338:	f7ff befa 	b.w	b5130 <_Z15SensorSonidoExpv>
}
   b533c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return AnguloExp();
   b5340:	f7ff be98 	b.w	b5074 <_Z9AnguloExpv>
}
   b5344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorTempExp(puerto);
   b5348:	f7ff bf3e 	b.w	b51c8 <_Z13SensorTempExpi>
}
   b534c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return DistanciaExp(puerto);
   b5350:	f7ff be84 	b.w	b505c <_Z12DistanciaExpi>
}
   b5354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return TurbiaExp(puerto);
   b5358:	f7ff bf54 	b.w	b5204 <_Z9TurbiaExpi>
        Serial.println("InvalidSensorError");
   b535c:	f006 f84a 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5360:	4902      	ldr	r1, [pc, #8]	; (b536c <_Z13leerSensorExpii+0x5c>)
   b5362:	f005 fdf8 	bl	baf56 <_ZN5Print7printlnEPKc>
}
   b5366:	f04f 30ff 	mov.w	r0, #4294967295
   b536a:	bd08      	pop	{r3, pc}
   b536c:	000bbcfe 	.word	0x000bbcfe

000b5370 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b5370:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b5372:	2300      	movs	r3, #0
   b5374:	4804      	ldr	r0, [pc, #16]	; (b5388 <_Z9ledApagarv+0x18>)
   b5376:	9300      	str	r3, [sp, #0]
   b5378:	461a      	mov	r2, r3
   b537a:	4619      	mov	r1, r3
   b537c:	f005 f860 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5380:	b003      	add	sp, #12
   b5382:	f85d fb04 	ldr.w	pc, [sp], #4
   b5386:	bf00      	nop
   b5388:	2003d6e0 	.word	0x2003d6e0

000b538c <_Z7ledRojov>:
void ledRojo()
{
   b538c:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b538e:	2300      	movs	r3, #0
   b5390:	4804      	ldr	r0, [pc, #16]	; (b53a4 <_Z7ledRojov+0x18>)
   b5392:	9300      	str	r3, [sp, #0]
   b5394:	22ff      	movs	r2, #255	; 0xff
   b5396:	4619      	mov	r1, r3
   b5398:	f005 f852 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b539c:	b003      	add	sp, #12
   b539e:	f85d fb04 	ldr.w	pc, [sp], #4
   b53a2:	bf00      	nop
   b53a4:	2003d6e0 	.word	0x2003d6e0

000b53a8 <_Z8ledVerdev>:
void ledVerde()
{
   b53a8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b53aa:	230a      	movs	r3, #10
   b53ac:	2200      	movs	r2, #0
   b53ae:	9300      	str	r3, [sp, #0]
   b53b0:	4803      	ldr	r0, [pc, #12]	; (b53c0 <_Z8ledVerdev+0x18>)
   b53b2:	23ff      	movs	r3, #255	; 0xff
   b53b4:	4611      	mov	r1, r2
   b53b6:	f005 f843 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53ba:	b003      	add	sp, #12
   b53bc:	f85d fb04 	ldr.w	pc, [sp], #4
   b53c0:	2003d6e0 	.word	0x2003d6e0

000b53c4 <_Z7ledAzulv>:
void ledAzul()
{
   b53c4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b53c6:	23ff      	movs	r3, #255	; 0xff
   b53c8:	9300      	str	r3, [sp, #0]
   b53ca:	2300      	movs	r3, #0
   b53cc:	4803      	ldr	r0, [pc, #12]	; (b53dc <_Z7ledAzulv+0x18>)
   b53ce:	461a      	mov	r2, r3
   b53d0:	4619      	mov	r1, r3
   b53d2:	f005 f835 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53d6:	b003      	add	sp, #12
   b53d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b53dc:	2003d6e0 	.word	0x2003d6e0

000b53e0 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b53e0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b53e2:	2100      	movs	r1, #0
   b53e4:	4804      	ldr	r0, [pc, #16]	; (b53f8 <_Z11ledAmarillov+0x18>)
   b53e6:	9100      	str	r1, [sp, #0]
   b53e8:	23e9      	movs	r3, #233	; 0xe9
   b53ea:	22ff      	movs	r2, #255	; 0xff
   b53ec:	f005 f828 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53f0:	b003      	add	sp, #12
   b53f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b53f6:	bf00      	nop
   b53f8:	2003d6e0 	.word	0x2003d6e0

000b53fc <_Z9ledMoradov>:
void ledMorado()
{
   b53fc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b53fe:	2375      	movs	r3, #117	; 0x75
   b5400:	9300      	str	r3, [sp, #0]
   b5402:	4804      	ldr	r0, [pc, #16]	; (b5414 <_Z9ledMoradov+0x18>)
   b5404:	2346      	movs	r3, #70	; 0x46
   b5406:	226c      	movs	r2, #108	; 0x6c
   b5408:	2100      	movs	r1, #0
   b540a:	f005 f819 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b540e:	b003      	add	sp, #12
   b5410:	f85d fb04 	ldr.w	pc, [sp], #4
   b5414:	2003d6e0 	.word	0x2003d6e0

000b5418 <_Z10ledNaranjav>:
void ledNaranja()
{
   b5418:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b541a:	2100      	movs	r1, #0
   b541c:	4804      	ldr	r0, [pc, #16]	; (b5430 <_Z10ledNaranjav+0x18>)
   b541e:	9100      	str	r1, [sp, #0]
   b5420:	2380      	movs	r3, #128	; 0x80
   b5422:	22ff      	movs	r2, #255	; 0xff
   b5424:	f005 f80c 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5428:	b003      	add	sp, #12
   b542a:	f85d fb04 	ldr.w	pc, [sp], #4
   b542e:	bf00      	nop
   b5430:	2003d6e0 	.word	0x2003d6e0

000b5434 <_Z9ledBlancov>:
void ledBlanco()
{
   b5434:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b5436:	23ff      	movs	r3, #255	; 0xff
   b5438:	4804      	ldr	r0, [pc, #16]	; (b544c <_Z9ledBlancov+0x18>)
   b543a:	9300      	str	r3, [sp, #0]
   b543c:	461a      	mov	r2, r3
   b543e:	2100      	movs	r1, #0
   b5440:	f004 fffe 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5444:	b003      	add	sp, #12
   b5446:	f85d fb04 	ldr.w	pc, [sp], #4
   b544a:	bf00      	nop
   b544c:	2003d6e0 	.word	0x2003d6e0

000b5450 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b5450:	b510      	push	{r4, lr}
   switch (counter)
   b5452:	4c11      	ldr	r4, [pc, #68]	; (b5498 <_Z11ledArcoirisv+0x48>)
   b5454:	6823      	ldr	r3, [r4, #0]
   b5456:	2b05      	cmp	r3, #5
   b5458:	d809      	bhi.n	b546e <_Z11ledArcoirisv+0x1e>
   b545a:	e8df f003 	tbb	[pc, r3]
   b545e:	0d03      	.short	0x0d03
   b5460:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b5464:	f7ff ff92 	bl	b538c <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b5468:	6823      	ldr	r3, [r4, #0]
   b546a:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b546c:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b546e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b5472:	2096      	movs	r0, #150	; 0x96
   b5474:	f005 be29 	b.w	bb0ca <delay>
      ledNaranja();
   b5478:	f7ff ffce 	bl	b5418 <_Z10ledNaranjav>
      counter++;
   b547c:	e7f4      	b.n	b5468 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b547e:	f7ff ffaf 	bl	b53e0 <_Z11ledAmarillov>
      counter++;
   b5482:	e7f1      	b.n	b5468 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b5484:	f7ff ff90 	bl	b53a8 <_Z8ledVerdev>
      counter++;
   b5488:	e7ee      	b.n	b5468 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b548a:	f7ff ffb7 	bl	b53fc <_Z9ledMoradov>
   b548e:	e7eb      	b.n	b5468 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b5490:	f7ff ff98 	bl	b53c4 <_Z7ledAzulv>
      counter = 0;
   b5494:	2300      	movs	r3, #0
   b5496:	e7e9      	b.n	b546c <_Z11ledArcoirisv+0x1c>
   b5498:	2003d330 	.word	0x2003d330

000b549c <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b549c:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b549e:	2101      	movs	r1, #1
   b54a0:	2006      	movs	r0, #6
   b54a2:	f006 f9ee 	bl	bb882 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b54a6:	2101      	movs	r1, #1
   b54a8:	2006      	movs	r0, #6
   b54aa:	f006 f9ea 	bl	bb882 <digitalWrite>
   digitalWrite(D7, HIGH);
   b54ae:	2101      	movs	r1, #1
   b54b0:	2007      	movs	r0, #7
   b54b2:	f006 f9e6 	bl	bb882 <digitalWrite>
   digitalWrite(D7, 1);
}
   b54b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b54ba:	2101      	movs	r1, #1
   b54bc:	2007      	movs	r0, #7
   b54be:	f006 b9e0 	b.w	bb882 <digitalWrite>

000b54c2 <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b54c2:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b54c4:	2100      	movs	r1, #0
   b54c6:	2006      	movs	r0, #6
   b54c8:	f006 f9db 	bl	bb882 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b54cc:	2100      	movs	r1, #0
   b54ce:	2006      	movs	r0, #6
   b54d0:	f006 f9d7 	bl	bb882 <digitalWrite>
   digitalWrite(D7, LOW);
   b54d4:	2100      	movs	r1, #0
   b54d6:	2007      	movs	r0, #7
   b54d8:	f006 f9d3 	bl	bb882 <digitalWrite>
   digitalWrite(D7, 0);
}
   b54dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b54e0:	2100      	movs	r1, #0
   b54e2:	2007      	movs	r0, #7
   b54e4:	f006 b9cd 	b.w	bb882 <digitalWrite>

000b54e8 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b54e8:	b508      	push	{r3, lr}
   pitidoON0();
   b54ea:	f7ff ffd7 	bl	b549c <_Z9pitidoON0v>
   delay(100);
   b54ee:	2064      	movs	r0, #100	; 0x64
   b54f0:	f005 fdeb 	bl	bb0ca <delay>
   pitidoOFF0();
   b54f4:	f7ff ffe5 	bl	b54c2 <_Z10pitidoOFF0v>
   delay(100);
}
   b54f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b54fc:	2064      	movs	r0, #100	; 0x64
   b54fe:	f005 bde4 	b.w	bb0ca <delay>

000b5502 <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b5502:	b108      	cbz	r0, b5508 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b5504:	f7ff bf5e 	b.w	b53c4 <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b5508:	f7ff bf86 	b.w	b5418 <_Z10ledNaranjav>

000b550c <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b550c:	b108      	cbz	r0, b5512 <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b550e:	f7ff bf67 	b.w	b53e0 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b5512:	f7ff bf73 	b.w	b53fc <_Z9ledMoradov>

000b5516 <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b5516:	b108      	cbz	r0, b551c <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b5518:	f7ff bf46 	b.w	b53a8 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b551c:	f7ff bf36 	b.w	b538c <_Z7ledRojov>

000b5520 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b5520:	b508      	push	{r3, lr}
   if (estado)
   b5522:	b160      	cbz	r0, b553e <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b5524:	f7ff ff86 	bl	b5434 <_Z9ledBlancov>
      delay(400);
   b5528:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b552c:	f005 fdcd 	bl	bb0ca <delay>
      ledApagar();
   b5530:	f7ff ff1e 	bl	b5370 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b5534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b5538:	20c8      	movs	r0, #200	; 0xc8
   b553a:	f005 bdc6 	b.w	bb0ca <delay>
}
   b553e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b5542:	f7ff bf15 	b.w	b5370 <_Z9ledApagarv>

000b5546 <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b5546:	b108      	cbz	r0, b554c <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b5548:	f7ff bf74 	b.w	b5434 <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b554c:	f7ff bf10 	b.w	b5370 <_Z9ledApagarv>

000b5550 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b5550:	b108      	cbz	r0, b5556 <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b5552:	f7ff bf7d 	b.w	b5450 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b5556:	f7ff bf0b 	b.w	b5370 <_Z9ledApagarv>

000b555a <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b555a:	b108      	cbz	r0, b5560 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b555c:	f7ff bfc4 	b.w	b54e8 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b5560:	f7ff bfaf 	b.w	b54c2 <_Z10pitidoOFF0v>

000b5564 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b5564:	b108      	cbz	r0, b556a <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b5566:	f7ff bf99 	b.w	b549c <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b556a:	f7ff bfaa 	b.w	b54c2 <_Z10pitidoOFF0v>
	...

000b5570 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   switch (id)
   b5570:	2801      	cmp	r0, #1
{
   b5572:	b538      	push	{r3, r4, r5, lr}
   b5574:	460d      	mov	r5, r1
   b5576:	4614      	mov	r4, r2
   switch (id)
   b5578:	d027      	beq.n	b55ca <_Z15activarActuadoriib+0x5a>
   b557a:	280d      	cmp	r0, #13
   b557c:	d03b      	beq.n	b55f6 <_Z15activarActuadoriib+0x86>
   b557e:	bb48      	cbnz	r0, b55d4 <_Z15activarActuadoriib+0x64>
   {
      pitidoOFF0();
   // Actuador led
   case 0:

      switch (opcion) {
   b5580:	2905      	cmp	r1, #5
   b5582:	d827      	bhi.n	b55d4 <_Z15activarActuadoriib+0x64>
   b5584:	e8df f001 	tbb	[pc, r1]
   b5588:	120d0803 	.word	0x120d0803
   b558c:	1c17      	.short	0x1c17
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b558e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledVerdeRojo(valor);
   b5592:	4610      	mov	r0, r2
   b5594:	f7ff bfbf 	b.w	b5516 <_Z12ledVerdeRojob>
}
   b5598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledMoradoAmarillo(valor);
   b559c:	4610      	mov	r0, r2
   b559e:	f7ff bfb5 	b.w	b550c <_Z17ledMoradoAmarillob>
}
   b55a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledAzulNaranja(valor);
   b55a6:	4610      	mov	r0, r2
   b55a8:	f7ff bfab 	b.w	b5502 <_Z14ledAzulNaranjab>
}
   b55ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledBlink0(valor);
   b55b0:	4610      	mov	r0, r2
   b55b2:	f7ff bfb5 	b.w	b5520 <_Z9ledBlink0b>
}
   b55b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledArcoiris0(valor);
   b55ba:	4610      	mov	r0, r2
   b55bc:	f7ff bfc8 	b.w	b5550 <_Z12ledArcoiris0b>
}
   b55c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledOnOff(valor);
   b55c4:	4610      	mov	r0, r2
   b55c6:	f7ff bfbe 	b.w	b5546 <_Z8ledOnOffb>
      ledApagar();
   b55ca:	f7ff fed1 	bl	b5370 <_Z9ledApagarv>
      switch (opcion) {
   b55ce:	b145      	cbz	r5, b55e2 <_Z15activarActuadoriib+0x72>
   b55d0:	2d01      	cmp	r5, #1
   b55d2:	d00b      	beq.n	b55ec <_Z15activarActuadoriib+0x7c>
            Serial.println("Valor no valido");
   b55d4:	f005 ff0e 	bl	bb3f4 <_Z16_fetch_usbserialv>
}
   b55d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b55dc:	490f      	ldr	r1, [pc, #60]	; (b561c <_Z15activarActuadoriib+0xac>)
   b55de:	f005 bcba 	b.w	baf56 <_ZN5Print7printlnEPKc>
            zumbador(valor);
   b55e2:	4620      	mov	r0, r4
}
   b55e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            zumbador(valor);
   b55e8:	f7ff bfbc 	b.w	b5564 <_Z8zumbadorb>
            blinkAndSleep(valor);
   b55ec:	4620      	mov	r0, r4
}
   b55ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            blinkAndSleep(valor);
   b55f2:	f7ff bfb2 	b.w	b555a <_Z13blinkAndSleepb>
      pitidoOFF0();
   b55f6:	f7ff ff64 	bl	b54c2 <_Z10pitidoOFF0v>
      ledApagar();
   b55fa:	f7ff feb9 	bl	b5370 <_Z9ledApagarv>
      pinMode(A2, OUTPUT);
   b55fe:	2101      	movs	r1, #1
   b5600:	2011      	movs	r0, #17
   b5602:	f006 f92d 	bl	bb860 <pinMode>
      if (valor) {
   b5606:	b134      	cbz	r4, b5616 <_Z15activarActuadoriib+0xa6>
         analogWrite(A2, 50, 40);
   b5608:	2228      	movs	r2, #40	; 0x28
   b560a:	2132      	movs	r1, #50	; 0x32
}
   b560c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         analogWrite(A2, 0, 0);
   b5610:	2011      	movs	r0, #17
   b5612:	f006 b979 	b.w	bb908 <_Z11analogWritetmm>
   b5616:	4622      	mov	r2, r4
   b5618:	4621      	mov	r1, r4
   b561a:	e7f7      	b.n	b560c <_Z15activarActuadoriib+0x9c>
   b561c:	000bbd11 	.word	0x000bbd11

000b5620 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b5620:	b508      	push	{r3, lr}
    ledBlanco();
   b5622:	f7ff ff07 	bl	b5434 <_Z9ledBlancov>
    delay(400);
   b5626:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b562a:	f005 fd4e 	bl	bb0ca <delay>
    ledApagar();
   b562e:	f7ff fe9f 	bl	b5370 <_Z9ledApagarv>
    delay(200);
}
   b5632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b5636:	20c8      	movs	r0, #200	; 0xc8
   b5638:	f005 bd47 	b.w	bb0ca <delay>

000b563c <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b563c:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b563e:	b284      	uxth	r4, r0
   b5640:	4620      	mov	r0, r4
   b5642:	2101      	movs	r1, #1
   b5644:	f006 f91d 	bl	bb882 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b5648:	4620      	mov	r0, r4
   b564a:	2101      	movs	r1, #1
   b564c:	f006 f919 	bl	bb882 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b5650:	1c60      	adds	r0, r4, #1
   b5652:	b280      	uxth	r0, r0
   b5654:	2101      	movs	r1, #1
   b5656:	9001      	str	r0, [sp, #4]
   b5658:	f006 f913 	bl	bb882 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b565c:	9801      	ldr	r0, [sp, #4]
   b565e:	2101      	movs	r1, #1
}
   b5660:	b002      	add	sp, #8
   b5662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b5666:	f006 b90c 	b.w	bb882 <digitalWrite>

000b566a <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b566a:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b566c:	b284      	uxth	r4, r0
   b566e:	4620      	mov	r0, r4
   b5670:	2100      	movs	r1, #0
   b5672:	f006 f906 	bl	bb882 <digitalWrite>
    digitalWrite(puerto, LOW);
   b5676:	4620      	mov	r0, r4
   b5678:	2100      	movs	r1, #0
   b567a:	f006 f902 	bl	bb882 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b567e:	1c60      	adds	r0, r4, #1
   b5680:	b280      	uxth	r0, r0
   b5682:	2100      	movs	r1, #0
   b5684:	9001      	str	r0, [sp, #4]
   b5686:	f006 f8fc 	bl	bb882 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b568a:	9801      	ldr	r0, [sp, #4]
   b568c:	2100      	movs	r1, #0
}
   b568e:	b002      	add	sp, #8
   b5690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b5694:	f006 b8f5 	b.w	bb882 <digitalWrite>

000b5698 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b5698:	b510      	push	{r4, lr}
   b569a:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b569c:	f7ff ffce 	bl	b563c <_Z9pitidoON1i>
    delay(100);
   b56a0:	2064      	movs	r0, #100	; 0x64
   b56a2:	f005 fd12 	bl	bb0ca <delay>
    pitidoOFF1(puerto);
   b56a6:	4620      	mov	r0, r4
   b56a8:	f7ff ffdf 	bl	b566a <_Z10pitidoOFF1i>
    delay(100);
}
   b56ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b56b0:	2064      	movs	r0, #100	; 0x64
   b56b2:	f005 bd0a 	b.w	bb0ca <delay>
	...

000b56b8 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b56b8:	b508      	push	{r3, lr}
   b56ba:	2807      	cmp	r0, #7
   b56bc:	d825      	bhi.n	b570a <_Z10activarLEDii+0x52>
   b56be:	e8df f000 	tbb	[pc, r0]
   b56c2:	0804      	.short	0x0804
   b56c4:	1814100c 	.word	0x1814100c
   b56c8:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b56ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b56ce:	f7ff be6b 	b.w	b53a8 <_Z8ledVerdev>
}
   b56d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b56d6:	f7ff be59 	b.w	b538c <_Z7ledRojov>
}
   b56da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b56de:	f7ff be7f 	b.w	b53e0 <_Z11ledAmarillov>
}
   b56e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b56e6:	f7ff be89 	b.w	b53fc <_Z9ledMoradov>
}
   b56ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b56ee:	f7ff be69 	b.w	b53c4 <_Z7ledAzulv>
}
   b56f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b56f6:	f7ff be8f 	b.w	b5418 <_Z10ledNaranjav>
}
   b56fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b56fe:	f7ff bf8f 	b.w	b5620 <_Z8ledBlinkv>
}
   b5702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b5706:	f7ff bea3 	b.w	b5450 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b570a:	f005 fe73 	bl	bb3f4 <_Z16_fetch_usbserialv>
}
   b570e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b5712:	4901      	ldr	r1, [pc, #4]	; (b5718 <_Z10activarLEDii+0x60>)
   b5714:	f005 bc1f 	b.w	baf56 <_ZN5Print7printlnEPKc>
   b5718:	000bbd21 	.word	0x000bbd21

000b571c <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b571c:	b538      	push	{r3, r4, r5, lr}
   b571e:	460c      	mov	r4, r1
   b5720:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b5722:	2101      	movs	r1, #1
   b5724:	b2a0      	uxth	r0, r4
   b5726:	f006 f89b 	bl	bb860 <pinMode>

    switch (opcion)
   b572a:	b145      	cbz	r5, b573e <_Z15activarZumbadorii+0x22>
   b572c:	2d01      	cmp	r5, #1
   b572e:	d00b      	beq.n	b5748 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b5730:	f005 fe60 	bl	bb3f4 <_Z16_fetch_usbserialv>
        break;
    }
}
   b5734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b5738:	4906      	ldr	r1, [pc, #24]	; (b5754 <_Z15activarZumbadorii+0x38>)
   b573a:	f005 bc0c 	b.w	baf56 <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b573e:	4620      	mov	r0, r4
}
   b5740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b5744:	f7ff bf7a 	b.w	b563c <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b5748:	4620      	mov	r0, r4
}
   b574a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b574e:	f7ff bfa3 	b.w	b5698 <_Z12pitidoBlink1i>
   b5752:	bf00      	nop
   b5754:	000bbd11 	.word	0x000bbd11

000b5758 <_Z17activarVentiladorii>:

void activarVentilador(int opcion, int puerto)
{
   b5758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b575a:	460c      	mov	r4, r1
   b575c:	4605      	mov	r5, r0
   pitidoOFF0();
   b575e:	f7ff feb0 	bl	b54c2 <_Z10pitidoOFF0v>
   ledApagar();
   b5762:	f7ff fe05 	bl	b5370 <_Z9ledApagarv>

   int p;
   switch (puerto)
   b5766:	2c04      	cmp	r4, #4
   b5768:	bf9a      	itte	ls
   b576a:	4b0d      	ldrls	r3, [pc, #52]	; (b57a0 <_Z17activarVentiladorii+0x48>)
   b576c:	571b      	ldrsbls	r3, [r3, r4]
   ledApagar();
   b576e:	f04f 33ff 	movhi.w	r3, #4294967295
    default:
        p = -1;
        break;
    }

   pinMode(p, OUTPUT);
   b5772:	b298      	uxth	r0, r3
   b5774:	2101      	movs	r1, #1
   b5776:	9001      	str	r0, [sp, #4]
   b5778:	f006 f872 	bl	bb860 <pinMode>
    switch (opcion)
   b577c:	2d01      	cmp	r5, #1
   b577e:	d807      	bhi.n	b5790 <_Z17activarVentiladorii+0x38>
    {
    case 0:
      analogWrite(p, 50, 50);
      break;
    case 1:
      analogWrite(p, 50, 50);
   b5780:	2232      	movs	r2, #50	; 0x32
   b5782:	9801      	ldr	r0, [sp, #4]
   b5784:	4611      	mov	r1, r2
      Serial.println("Valor no valido");
      break;
    }


}
   b5786:	b003      	add	sp, #12
   b5788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      analogWrite(p, 50, 50);
   b578c:	f006 b8bc 	b.w	bb908 <_Z11analogWritetmm>
      Serial.println("Valor no valido");
   b5790:	f005 fe30 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5794:	4903      	ldr	r1, [pc, #12]	; (b57a4 <_Z17activarVentiladorii+0x4c>)
}
   b5796:	b003      	add	sp, #12
   b5798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      Serial.println("Valor no valido");
   b579c:	f005 bbdb 	b.w	baf56 <_ZN5Print7printlnEPKc>
   b57a0:	000bca25 	.word	0x000bca25
   b57a4:	000bbd11 	.word	0x000bbd11

000b57a8 <_Z10ventApagari>:

void ventApagar(int puerto)
{
      int p;
      switch (puerto)
   b57a8:	2804      	cmp	r0, #4
{
   b57aa:	b507      	push	{r0, r1, r2, lr}
   b57ac:	bf9a      	itte	ls
   b57ae:	4b08      	ldrls	r3, [pc, #32]	; (b57d0 <_Z10ventApagari+0x28>)
   b57b0:	5618      	ldrsbls	r0, [r3, r0]
   b57b2:	f04f 30ff 	movhi.w	r0, #4294967295

      default:
         p = -1;
         break;
      }
      pinMode(p, OUTPUT);
   b57b6:	b280      	uxth	r0, r0
   b57b8:	2101      	movs	r1, #1
   b57ba:	9001      	str	r0, [sp, #4]
   b57bc:	f006 f850 	bl	bb860 <pinMode>
      analogWrite(p, 0, 0);
   b57c0:	2200      	movs	r2, #0
   b57c2:	9801      	ldr	r0, [sp, #4]
   b57c4:	4611      	mov	r1, r2
}
   b57c6:	b003      	add	sp, #12
   b57c8:	f85d eb04 	ldr.w	lr, [sp], #4
      analogWrite(p, 0, 0);
   b57cc:	f006 b89c 	b.w	bb908 <_Z11analogWritetmm>
   b57d0:	000bca25 	.word	0x000bca25

000b57d4 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b57d4:	b538      	push	{r3, r4, r5, lr}
   b57d6:	460c      	mov	r4, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b57d8:	4605      	mov	r5, r0
   b57da:	b918      	cbnz	r0, b57e4 <_Z14apagarActuadorii+0x10>
    if (id == 13){
      ventApagar(puerto);
    }

}
   b57dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b57e0:	f7ff bdc6 	b.w	b5370 <_Z9ledApagarv>
   b57e4:	2100      	movs	r1, #0
   b57e6:	b2a0      	uxth	r0, r4
   b57e8:	f006 f84b 	bl	bb882 <digitalWrite>
    if (id == 13){
   b57ec:	2d0d      	cmp	r5, #13
   b57ee:	d104      	bne.n	b57fa <_Z14apagarActuadorii+0x26>
      ventApagar(puerto);
   b57f0:	4620      	mov	r0, r4
}
   b57f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ventApagar(puerto);
   b57f6:	f7ff bfd7 	b.w	b57a8 <_Z10ventApagari>
}
   b57fa:	bd38      	pop	{r3, r4, r5, pc}

000b57fc <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b57fc:	4603      	mov	r3, r0
    if (id < 2)
   b57fe:	2b01      	cmp	r3, #1
{
   b5800:	4608      	mov	r0, r1
   b5802:	4611      	mov	r1, r2
    if (id < 2)
   b5804:	dc04      	bgt.n	b5810 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b5806:	b90b      	cbnz	r3, b580c <_Z15actuadorHandleriii+0x10>
   b5808:	f7ff bf56 	b.w	b56b8 <_Z10activarLEDii>
   b580c:	f7ff bf86 	b.w	b571c <_Z15activarZumbadorii>
   if (id == 13)
   b5810:	2b0d      	cmp	r3, #13
   b5812:	d101      	bne.n	b5818 <_Z15actuadorHandleriii+0x1c>
      activarVentilador(opcion, puerto);
   b5814:	f7ff bfa0 	b.w	b5758 <_Z17activarVentiladorii>
}
   b5818:	4770      	bx	lr
	...

000b581c <_Z10borradoALLi>:
   switch (modo)
   b581c:	2801      	cmp	r0, #1
   b581e:	d00f      	beq.n	b5840 <_Z10borradoALLi+0x24>
   b5820:	2802      	cmp	r0, #2
   b5822:	d00f      	beq.n	b5844 <_Z10borradoALLi+0x28>
   b5824:	b9a8      	cbnz	r0, b5852 <_Z10borradoALLi+0x36>
      bloques[0] = bloque;
   b5826:	4b0b      	ldr	r3, [pc, #44]	; (b5854 <_Z10borradoALLi+0x38>)
   b5828:	6018      	str	r0, [r3, #0]
   b582a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      bloque2[0] = bloque;
   b582e:	4b0a      	ldr	r3, [pc, #40]	; (b5858 <_Z10borradoALLi+0x3c>)
   b5830:	6018      	str	r0, [r3, #0]
   b5832:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b5836:	4b09      	ldr	r3, [pc, #36]	; (b585c <_Z10borradoALLi+0x40>)
   b5838:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b583a:	4b09      	ldr	r3, [pc, #36]	; (b5860 <_Z10borradoALLi+0x44>)
   b583c:	6018      	str	r0, [r3, #0]
      break;
   b583e:	4770      	bx	lr
   b5840:	f7ff b918 	b.w	b4a74 <_Z10borradoALLi.part.0>
      posicion = 0;
   b5844:	4a07      	ldr	r2, [pc, #28]	; (b5864 <_Z10borradoALLi+0x48>)
   b5846:	2300      	movs	r3, #0
   b5848:	6013      	str	r3, [r2, #0]
      bucle = false;
   b584a:	4a07      	ldr	r2, [pc, #28]	; (b5868 <_Z10borradoALLi+0x4c>)
   b584c:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b584e:	4a07      	ldr	r2, [pc, #28]	; (b586c <_Z10borradoALLi+0x50>)
   b5850:	6013      	str	r3, [r2, #0]
}
   b5852:	4770      	bx	lr
   b5854:	2003cd14 	.word	0x2003cd14
   b5858:	2003c73c 	.word	0x2003c73c
   b585c:	2003da20 	.word	0x2003da20
   b5860:	2003da18 	.word	0x2003da18
   b5864:	2003da28 	.word	0x2003da28
   b5868:	2003d2ec 	.word	0x2003d2ec
   b586c:	2003dc34 	.word	0x2003dc34

000b5870 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b5870:	4a0e      	ldr	r2, [pc, #56]	; (b58ac <_Z10borradoPOPv+0x3c>)
   b5872:	6813      	ldr	r3, [r2, #0]
   b5874:	3b01      	subs	r3, #1
   b5876:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b5878:	4a0d      	ldr	r2, [pc, #52]	; (b58b0 <_Z10borradoPOPv+0x40>)
   b587a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b587e:	1c8a      	adds	r2, r1, #2
   b5880:	4a0c      	ldr	r2, [pc, #48]	; (b58b4 <_Z10borradoPOPv+0x44>)
   b5882:	d107      	bne.n	b5894 <_Z10borradoPOPv+0x24>
      bucle = true;
   b5884:	2101      	movs	r1, #1
   b5886:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b5888:	4a0b      	ldr	r2, [pc, #44]	; (b58b8 <_Z10borradoPOPv+0x48>)
   b588a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b588e:	4b0b      	ldr	r3, [pc, #44]	; (b58bc <_Z10borradoPOPv+0x4c>)
   b5890:	601a      	str	r2, [r3, #0]
   b5892:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b5894:	3101      	adds	r1, #1
   b5896:	d102      	bne.n	b589e <_Z10borradoPOPv+0x2e>
      bucle = false;
   b5898:	2300      	movs	r3, #0
   b589a:	7013      	strb	r3, [r2, #0]
   b589c:	4770      	bx	lr

   } else {
      if (bucle) {
   b589e:	7813      	ldrb	r3, [r2, #0]
   b58a0:	b11b      	cbz	r3, b58aa <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b58a2:	4a06      	ldr	r2, [pc, #24]	; (b58bc <_Z10borradoPOPv+0x4c>)
   b58a4:	6813      	ldr	r3, [r2, #0]
   b58a6:	3b01      	subs	r3, #1
   b58a8:	6013      	str	r3, [r2, #0]
      }
   }
}
   b58aa:	4770      	bx	lr
   b58ac:	2003da28 	.word	0x2003da28
   b58b0:	2003d6f8 	.word	0x2003d6f8
   b58b4:	2003d2ec 	.word	0x2003d2ec
   b58b8:	2003d3a8 	.word	0x2003d3a8
   b58bc:	2003dc34 	.word	0x2003dc34

000b58c0 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b58c0:	b508      	push	{r3, lr}
   b58c2:	2807      	cmp	r0, #7
   b58c4:	d816      	bhi.n	b58f4 <_Z15decodificarNOTAi+0x34>
   b58c6:	e8df f000 	tbb	[pc, r0]
   b58ca:	0704      	.short	0x0704
   b58cc:	0f0d0b09 	.word	0x0f0d0b09
   b58d0:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b58d2:	4b0c      	ldr	r3, [pc, #48]	; (b5904 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b58d4:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b58d6:	bd08      	pop	{r3, pc}
      return RE;
   b58d8:	4b0b      	ldr	r3, [pc, #44]	; (b5908 <_Z15decodificarNOTAi+0x48>)
   b58da:	e7fb      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return MI;
   b58dc:	4b0b      	ldr	r3, [pc, #44]	; (b590c <_Z15decodificarNOTAi+0x4c>)
   b58de:	e7f9      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return FA;
   b58e0:	4b0b      	ldr	r3, [pc, #44]	; (b5910 <_Z15decodificarNOTAi+0x50>)
   b58e2:	e7f7      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b58e4:	4b0b      	ldr	r3, [pc, #44]	; (b5914 <_Z15decodificarNOTAi+0x54>)
   b58e6:	e7f5      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return LA;
   b58e8:	4b0b      	ldr	r3, [pc, #44]	; (b5918 <_Z15decodificarNOTAi+0x58>)
   b58ea:	e7f3      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return SI;
   b58ec:	4b0b      	ldr	r3, [pc, #44]	; (b591c <_Z15decodificarNOTAi+0x5c>)
   b58ee:	e7f1      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b58f0:	4b0b      	ldr	r3, [pc, #44]	; (b5920 <_Z15decodificarNOTAi+0x60>)
   b58f2:	e7ef      	b.n	b58d4 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b58f4:	f005 fd7e 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b58f8:	490a      	ldr	r1, [pc, #40]	; (b5924 <_Z15decodificarNOTAi+0x64>)
   b58fa:	f005 fb2c 	bl	baf56 <_ZN5Print7printlnEPKc>
      return -1;
   b58fe:	f04f 30ff 	mov.w	r0, #4294967295
   b5902:	e7e8      	b.n	b58d6 <_Z15decodificarNOTAi+0x16>
   b5904:	2003c660 	.word	0x2003c660
   b5908:	2003c674 	.word	0x2003c674
   b590c:	2003c670 	.word	0x2003c670
   b5910:	2003c668 	.word	0x2003c668
   b5914:	2003c67c 	.word	0x2003c67c
   b5918:	2003c66c 	.word	0x2003c66c
   b591c:	2003c678 	.word	0x2003c678
   b5920:	2003c664 	.word	0x2003c664
   b5924:	000bbd30 	.word	0x000bbd30

000b5928 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b5928:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b592a:	b508      	push	{r3, lr}
   b592c:	d803      	bhi.n	b5936 <_Z15decodificarTIPOi+0xe>
   b592e:	4b06      	ldr	r3, [pc, #24]	; (b5948 <_Z15decodificarTIPOi+0x20>)
   b5930:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b5934:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b5936:	f005 fd5d 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b593a:	4904      	ldr	r1, [pc, #16]	; (b594c <_Z15decodificarTIPOi+0x24>)
   b593c:	f005 fb0b 	bl	baf56 <_ZN5Print7printlnEPKc>
   b5940:	f04f 30ff 	mov.w	r0, #4294967295
   b5944:	e7f6      	b.n	b5934 <_Z15decodificarTIPOi+0xc>
   b5946:	bf00      	nop
   b5948:	000bca2a 	.word	0x000bca2a
   b594c:	000bbd3f 	.word	0x000bbd3f

000b5950 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b5950:	b510      	push	{r4, lr}
   b5952:	4604      	mov	r4, r0
   b5954:	2907      	cmp	r1, #7
   b5956:	d819      	bhi.n	b598c <_Z19decodificarNOTA_msgi+0x3c>
   b5958:	e8df f001 	tbb	[pc, r1]
   b595c:	0e0c0a04 	.word	0x0e0c0a04
   b5960:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b5964:	490a      	ldr	r1, [pc, #40]	; (b5990 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b5966:	4620      	mov	r0, r4
   b5968:	f005 fa01 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b596c:	4620      	mov	r0, r4
   b596e:	bd10      	pop	{r4, pc}
      return "RE";
   b5970:	4908      	ldr	r1, [pc, #32]	; (b5994 <_Z19decodificarNOTA_msgi+0x44>)
   b5972:	e7f8      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b5974:	4908      	ldr	r1, [pc, #32]	; (b5998 <_Z19decodificarNOTA_msgi+0x48>)
   b5976:	e7f6      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b5978:	4908      	ldr	r1, [pc, #32]	; (b599c <_Z19decodificarNOTA_msgi+0x4c>)
   b597a:	e7f4      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b597c:	4908      	ldr	r1, [pc, #32]	; (b59a0 <_Z19decodificarNOTA_msgi+0x50>)
   b597e:	e7f2      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b5980:	4908      	ldr	r1, [pc, #32]	; (b59a4 <_Z19decodificarNOTA_msgi+0x54>)
   b5982:	e7f0      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b5984:	4908      	ldr	r1, [pc, #32]	; (b59a8 <_Z19decodificarNOTA_msgi+0x58>)
   b5986:	e7ee      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b5988:	4908      	ldr	r1, [pc, #32]	; (b59ac <_Z19decodificarNOTA_msgi+0x5c>)
   b598a:	e7ec      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b598c:	4908      	ldr	r1, [pc, #32]	; (b59b0 <_Z19decodificarNOTA_msgi+0x60>)
   b598e:	e7ea      	b.n	b5966 <_Z19decodificarNOTA_msgi+0x16>
   b5990:	000bc3fb 	.word	0x000bc3fb
   b5994:	000bbd4e 	.word	0x000bbd4e
   b5998:	000bbd51 	.word	0x000bbd51
   b599c:	000bbd54 	.word	0x000bbd54
   b59a0:	000bbd57 	.word	0x000bbd57
   b59a4:	000bbd5b 	.word	0x000bbd5b
   b59a8:	000bbd5e 	.word	0x000bbd5e
   b59ac:	000bc5b9 	.word	0x000bc5b9
   b59b0:	000bbd30 	.word	0x000bbd30

000b59b4 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b59b4:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b59b6:	b510      	push	{r4, lr}
   b59b8:	4604      	mov	r4, r0
   switch (tipo)
   b59ba:	d007      	beq.n	b59cc <_Z19decodificarTIPO_msgi+0x18>
   b59bc:	2902      	cmp	r1, #2
   b59be:	d007      	beq.n	b59d0 <_Z19decodificarTIPO_msgi+0x1c>
   b59c0:	b941      	cbnz	r1, b59d4 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b59c2:	4905      	ldr	r1, [pc, #20]	; (b59d8 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b59c4:	f005 f9d3 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b59c8:	4620      	mov	r0, r4
   b59ca:	bd10      	pop	{r4, pc}
      return "_N";
   b59cc:	4903      	ldr	r1, [pc, #12]	; (b59dc <_Z19decodificarTIPO_msgi+0x28>)
   b59ce:	e7f9      	b.n	b59c4 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b59d0:	4903      	ldr	r1, [pc, #12]	; (b59e0 <_Z19decodificarTIPO_msgi+0x2c>)
   b59d2:	e7f7      	b.n	b59c4 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b59d4:	4903      	ldr	r1, [pc, #12]	; (b59e4 <_Z19decodificarTIPO_msgi+0x30>)
   b59d6:	e7f5      	b.n	b59c4 <_Z19decodificarTIPO_msgi+0x10>
   b59d8:	000bbd61 	.word	0x000bbd61
   b59dc:	000bbd64 	.word	0x000bbd64
   b59e0:	000bbd67 	.word	0x000bbd67
   b59e4:	000bbd3f 	.word	0x000bbd3f

000b59e8 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b59e8:	b513      	push	{r0, r1, r4, lr}
   b59ea:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b59ec:	f7ff ff68 	bl	b58c0 <_Z15decodificarNOTAi>
   b59f0:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b59f2:	4620      	mov	r0, r4
   b59f4:	f7ff ff98 	bl	b5928 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b59f8:	9901      	ldr	r1, [sp, #4]
   b59fa:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b59fc:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b59fe:	2006      	movs	r0, #6
   b5a00:	f005 fd22 	bl	bb448 <tone>
   delay(duracion);
   b5a04:	4620      	mov	r0, r4
   b5a06:	f005 fb60 	bl	bb0ca <delay>
   noTone(Zumbador_PIN);
   b5a0a:	2006      	movs	r0, #6
   b5a0c:	f005 fd33 	bl	bb476 <noTone>
   delay(30);
   b5a10:	201e      	movs	r0, #30
}
   b5a12:	b002      	add	sp, #8
   b5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b5a18:	f005 bb57 	b.w	bb0ca <delay>

000b5a1c <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b5a1c:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a1e:	4b0d      	ldr	r3, [pc, #52]	; (b5a54 <_Z13isValidSensori+0x38>)
   b5a20:	681a      	ldr	r2, [r3, #0]
   b5a22:	4b0d      	ldr	r3, [pc, #52]	; (b5a58 <_Z13isValidSensori+0x3c>)
   b5a24:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5a28:	434a      	muls	r2, r1
   b5a2a:	5899      	ldr	r1, [r3, r2]
   b5a2c:	4413      	add	r3, r2
   b5a2e:	2200      	movs	r2, #0
   b5a30:	4291      	cmp	r1, r2
   b5a32:	dd0d      	ble.n	b5a50 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b5a34:	685c      	ldr	r4, [r3, #4]
   b5a36:	4284      	cmp	r4, r0
   b5a38:	f103 0310 	add.w	r3, r3, #16
   b5a3c:	d106      	bne.n	b5a4c <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b5a3e:	f005 fcd9 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5a42:	4906      	ldr	r1, [pc, #24]	; (b5a5c <_Z13isValidSensori+0x40>)
   b5a44:	f005 fa87 	bl	baf56 <_ZN5Print7printlnEPKc>
   b5a48:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b5a4a:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a4c:	3201      	adds	r2, #1
   b5a4e:	e7ef      	b.n	b5a30 <_Z13isValidSensori+0x14>
  return true;
   b5a50:	2001      	movs	r0, #1
   b5a52:	e7fa      	b.n	b5a4a <_Z13isValidSensori+0x2e>
   b5a54:	2003c688 	.word	0x2003c688
   b5a58:	2003cd14 	.word	0x2003cd14
   b5a5c:	000bbd6a 	.word	0x000bbd6a

000b5a60 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5a62:	4b11      	ldr	r3, [pc, #68]	; (b5aa8 <_Z11isNewSensori+0x48>)
   b5a64:	4a11      	ldr	r2, [pc, #68]	; (b5aac <_Z11isNewSensori+0x4c>)
   b5a66:	681e      	ldr	r6, [r3, #0]
   b5a68:	4694      	mov	ip, r2
   b5a6a:	2300      	movs	r3, #0
   b5a6c:	429e      	cmp	r6, r3
   b5a6e:	db17      	blt.n	b5aa0 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a70:	6817      	ldr	r7, [r2, #0]
   b5a72:	4615      	mov	r5, r2
   b5a74:	2100      	movs	r1, #0
   b5a76:	428f      	cmp	r7, r1
   b5a78:	dd0e      	ble.n	b5a98 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b5a7a:	686c      	ldr	r4, [r5, #4]
   b5a7c:	4284      	cmp	r4, r0
   b5a7e:	f105 0510 	add.w	r5, r5, #16
   b5a82:	d107      	bne.n	b5a94 <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5a84:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5a88:	4353      	muls	r3, r2
   b5a8a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b5a8e:	4463      	add	r3, ip
   b5a90:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a94:	3101      	adds	r1, #1
   b5a96:	e7ee      	b.n	b5a76 <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5a98:	3301      	adds	r3, #1
   b5a9a:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5a9e:	e7e5      	b.n	b5a6c <_Z11isNewSensori+0xc>
  return -1;
   b5aa0:	f04f 30ff 	mov.w	r0, #4294967295
   b5aa4:	e7f5      	b.n	b5a92 <_Z11isNewSensori+0x32>
   b5aa6:	bf00      	nop
   b5aa8:	2003c688 	.word	0x2003c688
   b5aac:	2003cd14 	.word	0x2003cd14

000b5ab0 <_Z13isNewActuadori>:
}


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5ab0:	b5f0      	push	{r4, r5, r6, r7, lr}

  for (int j = 0; j <= numBloque; j++)
   b5ab2:	4b1d      	ldr	r3, [pc, #116]	; (b5b28 <_Z13isNewActuadori+0x78>)
   b5ab4:	4a1d      	ldr	r2, [pc, #116]	; (b5b2c <_Z13isNewActuadori+0x7c>)
   b5ab6:	681e      	ldr	r6, [r3, #0]
   b5ab8:	4694      	mov	ip, r2
   b5aba:	2300      	movs	r3, #0
   b5abc:	429e      	cmp	r6, r3
   b5abe:	db15      	blt.n	b5aec <_Z13isNewActuadori+0x3c>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5ac0:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5ac4:	4615      	mov	r5, r2
   b5ac6:	2100      	movs	r1, #0
   b5ac8:	428f      	cmp	r7, r1
   b5aca:	dd24      	ble.n	b5b16 <_Z13isNewActuadori+0x66>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5acc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5ad0:	4284      	cmp	r4, r0
   b5ad2:	f105 0514 	add.w	r5, r5, #20
   b5ad6:	d11c      	bne.n	b5b12 <_Z13isNewActuadori+0x62>
      {
        return bloques[j].actuadores[i].puerto;
   b5ad8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5adc:	4353      	muls	r3, r2
   b5ade:	2214      	movs	r2, #20
   b5ae0:	fb02 3301 	mla	r3, r2, r1, r3
   b5ae4:	4463      	add	r3, ip
   b5ae6:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
        return bloque2[0].actuadores[i].puerto;
      }
    }
  
  return -1;
}
   b5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5aec:	4b10      	ldr	r3, [pc, #64]	; (b5b30 <_Z13isNewActuadori+0x80>)
   b5aee:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   b5af2:	2200      	movs	r2, #0
   b5af4:	4619      	mov	r1, r3
   b5af6:	4294      	cmp	r4, r2
   b5af8:	dd13      	ble.n	b5b22 <_Z13isNewActuadori+0x72>
      if (bloque2[0].actuadores[i].id == deviceID)
   b5afa:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
   b5afe:	42a8      	cmp	r0, r5
   b5b00:	f103 0314 	add.w	r3, r3, #20
   b5b04:	d10b      	bne.n	b5b1e <_Z13isNewActuadori+0x6e>
        return bloque2[0].actuadores[i].puerto;
   b5b06:	2314      	movs	r3, #20
   b5b08:	fb03 1202 	mla	r2, r3, r2, r1
   b5b0c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   b5b10:	e7eb      	b.n	b5aea <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5b12:	3101      	adds	r1, #1
   b5b14:	e7d8      	b.n	b5ac8 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5b16:	3301      	adds	r3, #1
   b5b18:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5b1c:	e7ce      	b.n	b5abc <_Z13isNewActuadori+0xc>
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5b1e:	3201      	adds	r2, #1
   b5b20:	e7e9      	b.n	b5af6 <_Z13isNewActuadori+0x46>
  return -1;
   b5b22:	f04f 30ff 	mov.w	r0, #4294967295
   b5b26:	e7e0      	b.n	b5aea <_Z13isNewActuadori+0x3a>
   b5b28:	2003c688 	.word	0x2003c688
   b5b2c:	2003cd14 	.word	0x2003cd14
   b5b30:	2003c73c 	.word	0x2003c73c

000b5b34 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5b34:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b36:	4b0c      	ldr	r3, [pc, #48]	; (b5b68 <_Z14isActuadorDualii+0x34>)
   b5b38:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5b3c:	fb02 3101 	mla	r1, r2, r1, r3
   b5b40:	2200      	movs	r2, #0
   b5b42:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5b46:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b48:	4294      	cmp	r4, r2
   b5b4a:	dd08      	ble.n	b5b5e <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5b4c:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5b50:	4285      	cmp	r5, r0
   b5b52:	d101      	bne.n	b5b58 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5b54:	b92b      	cbnz	r3, b5b62 <_Z14isActuadorDualii+0x2e>
   b5b56:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b58:	3201      	adds	r2, #1
   b5b5a:	3114      	adds	r1, #20
   b5b5c:	e7f4      	b.n	b5b48 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5b5e:	2000      	movs	r0, #0
}
   b5b60:	bd30      	pop	{r4, r5, pc}
      return true;
   b5b62:	4618      	mov	r0, r3
   b5b64:	e7fc      	b.n	b5b60 <_Z14isActuadorDualii+0x2c>
   b5b66:	bf00      	nop
   b5b68:	2003cd14 	.word	0x2003cd14

000b5b6c <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5b6c:	b084      	sub	sp, #16
   b5b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b70:	ac06      	add	r4, sp, #24
   b5b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5b76:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b5b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5b7c:	f7ff fb50 	bl	b5220 <_Z10leerSensoriii>
   b5b80:	ad06      	add	r5, sp, #24
   b5b82:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5b84:	afbc      	add	r7, sp, #752	; 0x2f0
   b5b86:	2601      	movs	r6, #1
   b5b88:	9b06      	ldr	r3, [sp, #24]
   b5b8a:	42b3      	cmp	r3, r6
   b5b8c:	dd12      	ble.n	b5bb4 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b5b8e:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5b92:	6a2a      	ldr	r2, [r5, #32]
   b5b94:	f7ff fb44 	bl	b5220 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5b98:	f817 3b01 	ldrb.w	r3, [r7], #1
   b5b9c:	b133      	cbz	r3, b5bac <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b5b9e:	2c00      	cmp	r4, #0
   b5ba0:	bf08      	it	eq
   b5ba2:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5ba4:	3601      	adds	r6, #1
   b5ba6:	3510      	adds	r5, #16
   b5ba8:	4604      	mov	r4, r0
   b5baa:	e7ed      	b.n	b5b88 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b5bac:	2c00      	cmp	r4, #0
   b5bae:	bf18      	it	ne
   b5bb0:	4620      	movne	r0, r4
   b5bb2:	e7f7      	b.n	b5ba4 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5bba:	b004      	add	sp, #16
   b5bbc:	4770      	bx	lr

000b5bbe <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b5bbe:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b5bc0:	7803      	ldrb	r3, [r0, #0]
   b5bc2:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5bc4:	bf0c      	ite	eq
   b5bc6:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5bc8:	2200      	movne	r2, #0
   int i = 0;
   b5bca:	4613      	mov	r3, r2
   b5bcc:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b5bce:	240a      	movs	r4, #10
      i++;
   b5bd0:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5bd2:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5bd6:	3930      	subs	r1, #48	; 0x30
   b5bd8:	b2cd      	uxtb	r5, r1
   b5bda:	2d09      	cmp	r5, #9
   b5bdc:	d802      	bhi.n	b5be4 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b5bde:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5be2:	e7f6      	b.n	b5bd2 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5be4:	b102      	cbz	r2, b5be8 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5be6:	4240      	negs	r0, r0
   return num;
}
   b5be8:	bd30      	pop	{r4, r5, pc}

000b5bea <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5bea:	b538      	push	{r3, r4, r5, lr}
   b5bec:	4614      	mov	r4, r2
   b5bee:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b5bf0:	f005 ffaa 	bl	bbb48 <strtok>
   int j = 0;
   b5bf4:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5bf6:	b140      	cbz	r0, b5c0a <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5bf8:	f7ff ffe1 	bl	b5bbe <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b5bfc:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b5bfe:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5c02:	2000      	movs	r0, #0
   b5c04:	f005 ffa0 	bl	bbb48 <strtok>
   while (ptr != NULL)
   b5c08:	e7f5      	b.n	b5bf6 <_Z5splitPcS_Pi+0xc>
   }
}
   b5c0a:	bd38      	pop	{r3, r4, r5, pc}

000b5c0c <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b5c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c0e:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5c12:	f10d 0307 	add.w	r3, sp, #7
   b5c16:	460a      	mov	r2, r1
   b5c18:	4601      	mov	r1, r0
   b5c1a:	480d      	ldr	r0, [pc, #52]	; (b5c50 <_Z17readDataFromBlockhPhh+0x44>)
   b5c1c:	4d0d      	ldr	r5, [pc, #52]	; (b5c54 <_Z17readDataFromBlockhPhh+0x48>)
   b5c1e:	f003 fca7 	bl	b9570 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5c22:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5c24:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b5c26:	d010      	beq.n	b5c4a <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b5c28:	f005 fbe4 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5c2c:	490a      	ldr	r1, [pc, #40]	; (b5c58 <_Z17readDataFromBlockhPhh+0x4c>)
   b5c2e:	f005 f97f 	bl	baf30 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5c32:	f005 fbdf 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5c36:	7829      	ldrb	r1, [r5, #0]
   b5c38:	4604      	mov	r4, r0
   b5c3a:	4805      	ldr	r0, [pc, #20]	; (b5c50 <_Z17readDataFromBlockhPhh+0x44>)
   b5c3c:	f003 f9ec 	bl	b9018 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c40:	4601      	mov	r1, r0
   b5c42:	4620      	mov	r0, r4
   b5c44:	f005 f987 	bl	baf56 <_ZN5Print7printlnEPKc>
   b5c48:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b5c4a:	b003      	add	sp, #12
   b5c4c:	bd30      	pop	{r4, r5, pc}
   b5c4e:	bf00      	nop
   b5c50:	2003d6e8 	.word	0x2003d6e8
   b5c54:	2003dc30 	.word	0x2003dc30
   b5c58:	000bbd9a 	.word	0x000bbd9a

000b5c5c <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b5c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c5e:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c60:	4d1e      	ldr	r5, [pc, #120]	; (b5cdc <_Z8getTagIDPi+0x80>)
   b5c62:	4a1f      	ldr	r2, [pc, #124]	; (b5ce0 <_Z8getTagIDPi+0x84>)
   b5c64:	9500      	str	r5, [sp, #0]
   b5c66:	4b1f      	ldr	r3, [pc, #124]	; (b5ce4 <_Z8getTagIDPi+0x88>)
   b5c68:	7812      	ldrb	r2, [r2, #0]
   b5c6a:	4f1f      	ldr	r7, [pc, #124]	; (b5ce8 <_Z8getTagIDPi+0x8c>)
{
   b5c6c:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c6e:	2160      	movs	r1, #96	; 0x60
   b5c70:	4628      	mov	r0, r5
   b5c72:	f003 fc9e 	bl	b95b2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5c76:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c78:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b5c7a:	d00f      	beq.n	b5c9c <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b5c7c:	f005 fbba 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5c80:	491a      	ldr	r1, [pc, #104]	; (b5cec <_Z8getTagIDPi+0x90>)
   b5c82:	f005 f955 	bl	baf30 <_ZN5Print5printEPKc>
         Serial.println(mfrc522.GetStatusCodeName(status));
   b5c86:	f005 fbb5 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5c8a:	7839      	ldrb	r1, [r7, #0]
   b5c8c:	4604      	mov	r4, r0
   b5c8e:	4628      	mov	r0, r5
   b5c90:	f003 f9c2 	bl	b9018 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c94:	4601      	mov	r1, r0
   b5c96:	4620      	mov	r0, r4
   b5c98:	f005 f95d 	bl	baf56 <_ZN5Print7printlnEPKc>
      //writeDataToBLock(blockAddr);

      // Read data from the block's Tag.
      byte buffer[18];
      byte size = sizeof(buffer);
      if (!readDataFromBlock(blockAddr, buffer, size))
   b5c9c:	4b14      	ldr	r3, [pc, #80]	; (b5cf0 <_Z8getTagIDPi+0x94>)
   b5c9e:	2212      	movs	r2, #18
   b5ca0:	7818      	ldrb	r0, [r3, #0]
   b5ca2:	a907      	add	r1, sp, #28
   b5ca4:	f7ff ffb2 	bl	b5c0c <_Z17readDataFromBlockhPhh>
   b5ca8:	b1b0      	cbz	r0, b5cd8 <_Z8getTagIDPi+0x7c>
      // Convert from hex to String:
      char tagInfo[16];
      int i = 0;
      for (byte j = 0; j < sizeof(buffer); j++)
      {
         tagInfo[i] = (char)buffer[j];
   b5caa:	ac07      	add	r4, sp, #28
   b5cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5cae:	ad03      	add	r5, sp, #12
   b5cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5cb2:	6823      	ldr	r3, [r4, #0]
   b5cb4:	802b      	strh	r3, [r5, #0]
         i++;
         // Serial.write(buffer[j]);
         // tagInfo += Serial.write(buffer[j]);
      }
      Serial.printlnf("TagInfo: %s", tagInfo);
   b5cb6:	f005 fb9d 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b5cba:	490e      	ldr	r1, [pc, #56]	; (b5cf4 <_Z8getTagIDPi+0x98>)
   b5cbc:	aa03      	add	r2, sp, #12
   b5cbe:	f7fe ff3e 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5cc2:	490d      	ldr	r1, [pc, #52]	; (b5cf8 <_Z8getTagIDPi+0x9c>)
   b5cc4:	4632      	mov	r2, r6
   b5cc6:	a803      	add	r0, sp, #12
   b5cc8:	f7ff ff8f 	bl	b5bea <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b5ccc:	4803      	ldr	r0, [pc, #12]	; (b5cdc <_Z8getTagIDPi+0x80>)
   b5cce:	f003 fc2a 	bl	b9526 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5cd2:	4802      	ldr	r0, [pc, #8]	; (b5cdc <_Z8getTagIDPi+0x80>)
   b5cd4:	f003 fa87 	bl	b91e6 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5cd8:	b00d      	add	sp, #52	; 0x34
   b5cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5cdc:	2003d6e8 	.word	0x2003d6e8
   b5ce0:	2003c6ac 	.word	0x2003c6ac
   b5ce4:	2003d6d7 	.word	0x2003d6d7
   b5ce8:	2003dc30 	.word	0x2003dc30
   b5cec:	000bbdb1 	.word	0x000bbdb1
   b5cf0:	2003c680 	.word	0x2003c680
   b5cf4:	000bbdcd 	.word	0x000bbdcd
   b5cf8:	2003c681 	.word	0x2003c681

000b5cfc <_Z11identificarii>:

String identificar(int id, int cond){
   b5cfc:	b570      	push	{r4, r5, r6, lr}
   b5cfe:	460e      	mov	r6, r1
      String res;
   b5d00:	493e      	ldr	r1, [pc, #248]	; (b5dfc <_Z11identificarii+0x100>)
String identificar(int id, int cond){
   b5d02:	4604      	mov	r4, r0
   b5d04:	4615      	mov	r5, r2
      String res;
   b5d06:	f005 f832 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
      if (id == 0){
   b5d0a:	b9f6      	cbnz	r6, b5d4a <_Z11identificarii+0x4e>
            switch (cond){
   b5d0c:	2d08      	cmp	r5, #8
   b5d0e:	d80a      	bhi.n	b5d26 <_Z11identificarii+0x2a>
   b5d10:	e8df f005 	tbb	[pc, r5]
   b5d14:	0f0d0b05 	.word	0x0f0d0b05
   b5d18:	17151311 	.word	0x17151311
   b5d1c:	19          	.byte	0x19
   b5d1d:	00          	.byte	0x00
               case 0:{
                  res = "      Luz verde ";
   b5d1e:	4938      	ldr	r1, [pc, #224]	; (b5e00 <_Z11identificarii+0x104>)
               case 12:{
                  res = "   Agua turbia ";
                  break;
               }
               case 13:{
                  res = "   Ventilador ";
   b5d20:	4620      	mov	r0, r4
   b5d22:	f005 f877 	bl	bae14 <_ZN6StringaSEPKc>
               }
            
         }

         return res;
}
   b5d26:	4620      	mov	r0, r4
   b5d28:	bd70      	pop	{r4, r5, r6, pc}
                  res = "      Luz Roja ";
   b5d2a:	4936      	ldr	r1, [pc, #216]	; (b5e04 <_Z11identificarii+0x108>)
   b5d2c:	e7f8      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "    Luz Amarilla ";
   b5d2e:	4936      	ldr	r1, [pc, #216]	; (b5e08 <_Z11identificarii+0x10c>)
   b5d30:	e7f6      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "     Luz Morada ";
   b5d32:	4936      	ldr	r1, [pc, #216]	; (b5e0c <_Z11identificarii+0x110>)
   b5d34:	e7f4      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "      Luz Azul ";
   b5d36:	4936      	ldr	r1, [pc, #216]	; (b5e10 <_Z11identificarii+0x114>)
   b5d38:	e7f2      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "    Luz Naranja ";
   b5d3a:	4936      	ldr	r1, [pc, #216]	; (b5e14 <_Z11identificarii+0x118>)
   b5d3c:	e7f0      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "    Luz parpadea ";
   b5d3e:	4936      	ldr	r1, [pc, #216]	; (b5e18 <_Z11identificarii+0x11c>)
   b5d40:	e7ee      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "    Luz Arcoiris ";
   b5d42:	4936      	ldr	r1, [pc, #216]	; (b5e1c <_Z11identificarii+0x120>)
   b5d44:	e7ec      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "    Luz apagada ";
   b5d46:	4936      	ldr	r1, [pc, #216]	; (b5e20 <_Z11identificarii+0x124>)
   b5d48:	e7ea      	b.n	b5d20 <_Z11identificarii+0x24>
         } switch (id){
   b5d4a:	3e01      	subs	r6, #1
   b5d4c:	2e0c      	cmp	r6, #12
   b5d4e:	d8ea      	bhi.n	b5d26 <_Z11identificarii+0x2a>
   b5d50:	a301      	add	r3, pc, #4	; (adr r3, b5d58 <_Z11identificarii+0x5c>)
   b5d52:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   b5d56:	bf00      	nop
   b5d58:	000b5d8d 	.word	0x000b5d8d
   b5d5c:	000b5d97 	.word	0x000b5d97
   b5d60:	000b5da1 	.word	0x000b5da1
   b5d64:	000b5dab 	.word	0x000b5dab
   b5d68:	000b5db5 	.word	0x000b5db5
   b5d6c:	000b5dbf 	.word	0x000b5dbf
   b5d70:	000b5dc9 	.word	0x000b5dc9
   b5d74:	000b5dd3 	.word	0x000b5dd3
   b5d78:	000b5ddd 	.word	0x000b5ddd
   b5d7c:	000b5d27 	.word	0x000b5d27
   b5d80:	000b5d27 	.word	0x000b5d27
   b5d84:	000b5df5 	.word	0x000b5df5
   b5d88:	000b5df9 	.word	0x000b5df9
                  if (cond == 1){res = "Zumbador intermitente ";}
   b5d8c:	2d01      	cmp	r5, #1
   b5d8e:	bf0c      	ite	eq
   b5d90:	4924      	ldreq	r1, [pc, #144]	; (b5e24 <_Z11identificarii+0x128>)
                  else{res = "      Zumbador ";}
   b5d92:	4925      	ldrne	r1, [pc, #148]	; (b5e28 <_Z11identificarii+0x12c>)
   b5d94:	e7c4      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "      Mucha luz ";}
   b5d96:	2d01      	cmp	r5, #1
   b5d98:	bf0c      	ite	eq
   b5d9a:	4924      	ldreq	r1, [pc, #144]	; (b5e2c <_Z11identificarii+0x130>)
                  else{res = "      Poca luz ";}
   b5d9c:	4924      	ldrne	r1, [pc, #144]	; (b5e30 <_Z11identificarii+0x134>)
   b5d9e:	e7bf      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "     Mucho ruido ";}
   b5da0:	2d01      	cmp	r5, #1
   b5da2:	bf0c      	ite	eq
   b5da4:	4923      	ldreq	r1, [pc, #140]	; (b5e34 <_Z11identificarii+0x138>)
                  else{res = "     Poco ruido ";}
   b5da6:	4924      	ldrne	r1, [pc, #144]	; (b5e38 <_Z11identificarii+0x13c>)
   b5da8:	e7ba      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "   Boton activado ";}
   b5daa:	2d01      	cmp	r5, #1
   b5dac:	bf0c      	ite	eq
   b5dae:	4923      	ldreq	r1, [pc, #140]	; (b5e3c <_Z11identificarii+0x140>)
                  else{res = "  Boton desactivado ";}
   b5db0:	4923      	ldrne	r1, [pc, #140]	; (b5e40 <_Z11identificarii+0x144>)
   b5db2:	e7b5      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "     Giro pequeño ";}
   b5db4:	2d01      	cmp	r5, #1
   b5db6:	bf0c      	ite	eq
   b5db8:	4922      	ldreq	r1, [pc, #136]	; (b5e44 <_Z11identificarii+0x148>)
                  else{res = "    Giro grande ";}
   b5dba:	4923      	ldrne	r1, [pc, #140]	; (b5e48 <_Z11identificarii+0x14c>)
   b5dbc:	e7b0      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 2){res = "      Calor ";}
   b5dbe:	2d02      	cmp	r5, #2
   b5dc0:	bf0c      	ite	eq
   b5dc2:	4922      	ldreq	r1, [pc, #136]	; (b5e4c <_Z11identificarii+0x150>)
                  else{res = "      Frio ";}
   b5dc4:	4922      	ldrne	r1, [pc, #136]	; (b5e50 <_Z11identificarii+0x154>)
   b5dc6:	e7ab      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "   Mucha distancia ";}
   b5dc8:	2d01      	cmp	r5, #1
   b5dca:	bf0c      	ite	eq
   b5dcc:	4921      	ldreq	r1, [pc, #132]	; (b5e54 <_Z11identificarii+0x158>)
                  else{res = "   Poca distancia ";}
   b5dce:	4922      	ldrne	r1, [pc, #136]	; (b5e58 <_Z11identificarii+0x15c>)
   b5dd0:	e7a6      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 1){res = "    Hay agua ";}
   b5dd2:	2d01      	cmp	r5, #1
   b5dd4:	bf0c      	ite	eq
   b5dd6:	4921      	ldreq	r1, [pc, #132]	; (b5e5c <_Z11identificarii+0x160>)
                  else{res = " No hay agua ";}
   b5dd8:	4921      	ldrne	r1, [pc, #132]	; (b5e60 <_Z11identificarii+0x164>)
   b5dda:	e7a1      	b.n	b5d20 <_Z11identificarii+0x24>
                  if (cond == 0 ){res = "Boton dual no activado";}
   b5ddc:	b90d      	cbnz	r5, b5de2 <_Z11identificarii+0xe6>
   b5dde:	4921      	ldr	r1, [pc, #132]	; (b5e64 <_Z11identificarii+0x168>)
   b5de0:	e79e      	b.n	b5d20 <_Z11identificarii+0x24>
                  else if (cond == 1){res = "Boton dual derecho";}
   b5de2:	2d01      	cmp	r5, #1
   b5de4:	d101      	bne.n	b5dea <_Z11identificarii+0xee>
   b5de6:	4920      	ldr	r1, [pc, #128]	; (b5e68 <_Z11identificarii+0x16c>)
   b5de8:	e79a      	b.n	b5d20 <_Z11identificarii+0x24>
                  else if (cond ==2){res = "Boton dual izquierdo";}
   b5dea:	2d02      	cmp	r5, #2
   b5dec:	bf0c      	ite	eq
   b5dee:	491f      	ldreq	r1, [pc, #124]	; (b5e6c <_Z11identificarii+0x170>)
                  else {res = "Boton dual doble";}
   b5df0:	491f      	ldrne	r1, [pc, #124]	; (b5e70 <_Z11identificarii+0x174>)
   b5df2:	e795      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "   Agua turbia ";
   b5df4:	491f      	ldr	r1, [pc, #124]	; (b5e74 <_Z11identificarii+0x178>)
   b5df6:	e793      	b.n	b5d20 <_Z11identificarii+0x24>
                  res = "   Ventilador ";
   b5df8:	491f      	ldr	r1, [pc, #124]	; (b5e78 <_Z11identificarii+0x17c>)
   b5dfa:	e791      	b.n	b5d20 <_Z11identificarii+0x24>
   b5dfc:	000bc0e6 	.word	0x000bc0e6
   b5e00:	000bbdd9 	.word	0x000bbdd9
   b5e04:	000bbdea 	.word	0x000bbdea
   b5e08:	000bbdfa 	.word	0x000bbdfa
   b5e0c:	000bbe0c 	.word	0x000bbe0c
   b5e10:	000bbe1d 	.word	0x000bbe1d
   b5e14:	000bbe2d 	.word	0x000bbe2d
   b5e18:	000bbe3e 	.word	0x000bbe3e
   b5e1c:	000bbe50 	.word	0x000bbe50
   b5e20:	000bbe62 	.word	0x000bbe62
   b5e24:	000bbe73 	.word	0x000bbe73
   b5e28:	000bbe8a 	.word	0x000bbe8a
   b5e2c:	000bbe9a 	.word	0x000bbe9a
   b5e30:	000bbeab 	.word	0x000bbeab
   b5e34:	000bbebb 	.word	0x000bbebb
   b5e38:	000bbecd 	.word	0x000bbecd
   b5e3c:	000bbede 	.word	0x000bbede
   b5e40:	000bbef1 	.word	0x000bbef1
   b5e44:	000bbf06 	.word	0x000bbf06
   b5e48:	000bbf1a 	.word	0x000bbf1a
   b5e4c:	000bbf2b 	.word	0x000bbf2b
   b5e50:	000bbf38 	.word	0x000bbf38
   b5e54:	000bbf44 	.word	0x000bbf44
   b5e58:	000bbf58 	.word	0x000bbf58
   b5e5c:	000bbf6b 	.word	0x000bbf6b
   b5e60:	000bbf79 	.word	0x000bbf79
   b5e64:	000bbf87 	.word	0x000bbf87
   b5e68:	000bbf9e 	.word	0x000bbf9e
   b5e6c:	000bbfb1 	.word	0x000bbfb1
   b5e70:	000bbfc6 	.word	0x000bbfc6
   b5e74:	000bbfd7 	.word	0x000bbfd7
   b5e78:	000bbfe7 	.word	0x000bbfe7

000b5e7c <_Z6listarv>:

void listar(){
   b5e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5e80:	4ab7      	ldr	r2, [pc, #732]	; (b6160 <_Z6listarv+0x2e4>)
   b5e82:	4eb8      	ldr	r6, [pc, #736]	; (b6164 <_Z6listarv+0x2e8>)
   b5e84:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   b5e88:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
      String st;
   b5e8c:	49b6      	ldr	r1, [pc, #728]	; (b6168 <_Z6listarv+0x2ec>)
      int c;
      display.clearDisplay();

      for (c = 0; c < bloque2[0].numActuadores; c++){
         st = identificar(bloque2[0].actuadores[c].id, bloque2[0].actuadores[c].condicion);
         display.setCursor(0, (c*10) - scroll + 3);
   b5e8e:	f8df a314 	ldr.w	sl, [pc, #788]	; b61a4 <_Z6listarv+0x328>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5e92:	f8df 92d8 	ldr.w	r9, [pc, #728]	; b616c <_Z6listarv+0x2f0>
         snprintf(buf, sizeof(buf), st);
   b5e96:	f8df 82e8 	ldr.w	r8, [pc, #744]	; b6180 <_Z6listarv+0x304>
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5e9a:	441d      	add	r5, r3
   b5e9c:	6813      	ldr	r3, [r2, #0]
   b5e9e:	441d      	add	r5, r3
   b5ea0:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
void listar(){
   b5ea4:	b08b      	sub	sp, #44	; 0x2c
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5ea6:	441d      	add	r5, r3
   b5ea8:	f8d2 32ec 	ldr.w	r3, [r2, #748]	; 0x2ec
      String st;
   b5eac:	a802      	add	r0, sp, #8
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5eae:	441d      	add	r5, r3
      String st;
   b5eb0:	f004 ff5d 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
      display.clearDisplay();
   b5eb4:	48ad      	ldr	r0, [pc, #692]	; (b616c <_Z6listarv+0x2f0>)
   b5eb6:	f003 ff57 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5eba:	2700      	movs	r7, #0
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5ebc:	3d03      	subs	r5, #3
      int pos = 0;
   b5ebe:	463c      	mov	r4, r7
   b5ec0:	46b3      	mov	fp, r6
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5ec2:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
   b5ec6:	42bb      	cmp	r3, r7
   b5ec8:	f106 0614 	add.w	r6, r6, #20
   b5ecc:	dc6b      	bgt.n	b5fa6 <_Z6listarv+0x12a>
         display.print(buf);
         pos+=10;
      }

      for(i = 0; i <= numBloque; i++){
   b5ece:	2300      	movs	r3, #0
   b5ed0:	4ea3      	ldr	r6, [pc, #652]	; (b6160 <_Z6listarv+0x2e4>)

         if ((if1 && i == 0) || if2){
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5ed2:	f8df 92d0 	ldr.w	r9, [pc, #720]	; b61a4 <_Z6listarv+0x328>
      for(i = 0; i <= numBloque; i++){
   b5ed6:	9300      	str	r3, [sp, #0]
   b5ed8:	4ba5      	ldr	r3, [pc, #660]	; (b6170 <_Z6listarv+0x2f4>)
   b5eda:	9a00      	ldr	r2, [sp, #0]
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	4293      	cmp	r3, r2
   b5ee0:	f2c0 8129 	blt.w	b6136 <_Z6listarv+0x2ba>
         if ((if1 && i == 0) || if2){
   b5ee4:	4ba3      	ldr	r3, [pc, #652]	; (b6174 <_Z6listarv+0x2f8>)
   b5ee6:	781b      	ldrb	r3, [r3, #0]
   b5ee8:	b103      	cbz	r3, b5eec <_Z6listarv+0x70>
   b5eea:	b11a      	cbz	r2, b5ef4 <_Z6listarv+0x78>
   b5eec:	4ba2      	ldr	r3, [pc, #648]	; (b6178 <_Z6listarv+0x2fc>)
   b5eee:	781b      	ldrb	r3, [r3, #0]
   b5ef0:	2b00      	cmp	r3, #0
   b5ef2:	d07c      	beq.n	b5fee <_Z6listarv+0x172>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5ef4:	f8d9 3000 	ldr.w	r3, [r9]
   b5ef8:	4f9c      	ldr	r7, [pc, #624]	; (b616c <_Z6listarv+0x2f0>)
            snprintf(buf, sizeof(buf), "         IF");
   b5efa:	49a0      	ldr	r1, [pc, #640]	; (b617c <_Z6listarv+0x300>)
   b5efc:	48a0      	ldr	r0, [pc, #640]	; (b6180 <_Z6listarv+0x304>)
                  if (bloques[i].condiciones.condicionesBloque[c - 1]){
                     snprintf(buf, sizeof(buf), "         AND");  
                  } else {
                     snprintf(buf, sizeof(buf), "         OR");
                  }
                  display.print(buf);
   b5efe:	f8df a280 	ldr.w	sl, [pc, #640]	; b6180 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5f02:	f1c3 0303 	rsb	r3, r3, #3
   b5f06:	4423      	add	r3, r4
   b5f08:	f04f 0800 	mov.w	r8, #0
   b5f0c:	827b      	strh	r3, [r7, #18]
   b5f0e:	f8a7 8010 	strh.w	r8, [r7, #16]
            snprintf(buf, sizeof(buf), "         IF");
   b5f12:	f005 fe11 	bl	bbb38 <strcpy>
            display.print(buf);
   b5f16:	499a      	ldr	r1, [pc, #616]	; (b6180 <_Z6listarv+0x304>)
   b5f18:	4638      	mov	r0, r7
   b5f1a:	f005 f809 	bl	baf30 <_ZN5Print5printEPKc>
            elems++;
   b5f1e:	3501      	adds	r5, #1
            pos+=10;
   b5f20:	340a      	adds	r4, #10
   b5f22:	46b3      	mov	fp, r6
            for (c = 0; c < bloques[i].numSensores; c++){
   b5f24:	6833      	ldr	r3, [r6, #0]
   b5f26:	4543      	cmp	r3, r8
   b5f28:	dd61      	ble.n	b5fee <_Z6listarv+0x172>
               if (c != 0){
   b5f2a:	f1b8 0f00 	cmp.w	r8, #0
   b5f2e:	d017      	beq.n	b5f60 <_Z6listarv+0xe4>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b5f30:	f8d9 3000 	ldr.w	r3, [r9]
   b5f34:	f1c3 0303 	rsb	r3, r3, #3
   b5f38:	4423      	add	r3, r4
   b5f3a:	827b      	strh	r3, [r7, #18]
                  if (bloques[i].condiciones.condicionesBloque[c - 1]){
   b5f3c:	f206 23d7 	addw	r3, r6, #727	; 0x2d7
   b5f40:	2200      	movs	r2, #0
   b5f42:	f813 3008 	ldrb.w	r3, [r3, r8]
   b5f46:	823a      	strh	r2, [r7, #16]
   b5f48:	2b00      	cmp	r3, #0
   b5f4a:	d04e      	beq.n	b5fea <_Z6listarv+0x16e>
                     snprintf(buf, sizeof(buf), "         AND");  
   b5f4c:	498d      	ldr	r1, [pc, #564]	; (b6184 <_Z6listarv+0x308>)
                     snprintf(buf, sizeof(buf), "         OR");
   b5f4e:	4650      	mov	r0, sl
   b5f50:	f005 fdf2 	bl	bbb38 <strcpy>
                  display.print(buf);
   b5f54:	4651      	mov	r1, sl
   b5f56:	4638      	mov	r0, r7
   b5f58:	f004 ffea 	bl	baf30 <_ZN5Print5printEPKc>
                  elems++;
   b5f5c:	3501      	adds	r5, #1
                  pos+=10; 
   b5f5e:	340a      	adds	r4, #10
               }
               st = identificar(bloques[i].sensores[c].id, bloques[i].sensores[c].condicion);
   b5f60:	e9db 1201 	ldrd	r1, r2, [fp, #4]
   b5f64:	a806      	add	r0, sp, #24
   b5f66:	f7ff fec9 	bl	b5cfc <_Z11identificarii>
   b5f6a:	a906      	add	r1, sp, #24
   b5f6c:	a802      	add	r0, sp, #8
   b5f6e:	f004 ff49 	bl	bae04 <_ZN6StringaSEOS_>
   b5f72:	a806      	add	r0, sp, #24
   b5f74:	f004 feb0 	bl	bacd8 <_ZN6StringD1Ev>
               display.setCursor(0, 0 - scroll + 3 + pos);
   b5f78:	f8d9 3000 	ldr.w	r3, [r9]
   b5f7c:	f1c3 0303 	rsb	r3, r3, #3
   b5f80:	4423      	add	r3, r4
   b5f82:	2200      	movs	r2, #0
   b5f84:	823a      	strh	r2, [r7, #16]
   b5f86:	827b      	strh	r3, [r7, #18]
               snprintf(buf, sizeof(buf), st);
   b5f88:	9a02      	ldr	r2, [sp, #8]
   b5f8a:	2140      	movs	r1, #64	; 0x40
   b5f8c:	4650      	mov	r0, sl
   b5f8e:	f004 fd2d 	bl	ba9ec <snprintf>
               display.print(buf);
   b5f92:	4651      	mov	r1, sl
   b5f94:	4638      	mov	r0, r7
   b5f96:	f004 ffcb 	bl	baf30 <_ZN5Print5printEPKc>
               pos+=10;
   b5f9a:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numSensores; c++){
   b5f9c:	f108 0801 	add.w	r8, r8, #1
   b5fa0:	f10b 0b10 	add.w	fp, fp, #16
   b5fa4:	e7be      	b.n	b5f24 <_Z6listarv+0xa8>
         st = identificar(bloque2[0].actuadores[c].id, bloque2[0].actuadores[c].condicion);
   b5fa6:	e9d6 124d 	ldrd	r1, r2, [r6, #308]	; 0x134
   b5faa:	a806      	add	r0, sp, #24
   b5fac:	f7ff fea6 	bl	b5cfc <_Z11identificarii>
   b5fb0:	a906      	add	r1, sp, #24
   b5fb2:	a802      	add	r0, sp, #8
   b5fb4:	f004 ff26 	bl	bae04 <_ZN6StringaSEOS_>
   b5fb8:	a806      	add	r0, sp, #24
   b5fba:	f004 fe8d 	bl	bacd8 <_ZN6StringD1Ev>
         display.setCursor(0, (c*10) - scroll + 3);
   b5fbe:	f8da 3000 	ldr.w	r3, [sl]
   b5fc2:	f1c3 0303 	rsb	r3, r3, #3
   b5fc6:	4423      	add	r3, r4
   b5fc8:	2200      	movs	r2, #0
   b5fca:	f8a9 2010 	strh.w	r2, [r9, #16]
   b5fce:	f8a9 3012 	strh.w	r3, [r9, #18]
         snprintf(buf, sizeof(buf), st);
   b5fd2:	9a02      	ldr	r2, [sp, #8]
   b5fd4:	2140      	movs	r1, #64	; 0x40
   b5fd6:	4640      	mov	r0, r8
   b5fd8:	f004 fd08 	bl	ba9ec <snprintf>
         display.print(buf);
   b5fdc:	4863      	ldr	r0, [pc, #396]	; (b616c <_Z6listarv+0x2f0>)
   b5fde:	4641      	mov	r1, r8
   b5fe0:	f004 ffa6 	bl	baf30 <_ZN5Print5printEPKc>
         pos+=10;
   b5fe4:	340a      	adds	r4, #10
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5fe6:	3701      	adds	r7, #1
   b5fe8:	e76b      	b.n	b5ec2 <_Z6listarv+0x46>
                     snprintf(buf, sizeof(buf), "         OR");
   b5fea:	4967      	ldr	r1, [pc, #412]	; (b6188 <_Z6listarv+0x30c>)
   b5fec:	e7af      	b.n	b5f4e <_Z6listarv+0xd2>
            }
         }

         if ((then1 && i == 0) || then2){
   b5fee:	4b67      	ldr	r3, [pc, #412]	; (b618c <_Z6listarv+0x310>)
   b5ff0:	781b      	ldrb	r3, [r3, #0]
   b5ff2:	b10b      	cbz	r3, b5ff8 <_Z6listarv+0x17c>
   b5ff4:	9b00      	ldr	r3, [sp, #0]
   b5ff6:	b11b      	cbz	r3, b6000 <_Z6listarv+0x184>
   b5ff8:	4b65      	ldr	r3, [pc, #404]	; (b6190 <_Z6listarv+0x314>)
   b5ffa:	781b      	ldrb	r3, [r3, #0]
   b5ffc:	2b00      	cmp	r3, #0
   b5ffe:	d043      	beq.n	b6088 <_Z6listarv+0x20c>
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b6000:	f8d9 3000 	ldr.w	r3, [r9]
   b6004:	f8df 8164 	ldr.w	r8, [pc, #356]	; b616c <_Z6listarv+0x2f0>
            snprintf(buf, sizeof(buf), "        THEN");
   b6008:	4962      	ldr	r1, [pc, #392]	; (b6194 <_Z6listarv+0x318>)
   b600a:	485d      	ldr	r0, [pc, #372]	; (b6180 <_Z6listarv+0x304>)
            pos+=10;
            for (c = 0; c < bloques[i].numActuadores; c++){
               if(bloques[i].actuadores[c].evaluate){
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
                  display.setCursor(0, 0 - scroll + 3 + pos);
                  snprintf(buf, sizeof(buf), st);
   b600c:	f8df a170 	ldr.w	sl, [pc, #368]	; b6180 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b6010:	f1c3 0303 	rsb	r3, r3, #3
   b6014:	4423      	add	r3, r4
   b6016:	2700      	movs	r7, #0
   b6018:	f8a8 3012 	strh.w	r3, [r8, #18]
   b601c:	f8a8 7010 	strh.w	r7, [r8, #16]
            snprintf(buf, sizeof(buf), "        THEN");
   b6020:	f005 fd8a 	bl	bbb38 <strcpy>
            display.print(buf);
   b6024:	4956      	ldr	r1, [pc, #344]	; (b6180 <_Z6listarv+0x304>)
   b6026:	4640      	mov	r0, r8
   b6028:	f004 ff82 	bl	baf30 <_ZN5Print5printEPKc>
            elems++;
   b602c:	3501      	adds	r5, #1
            pos+=10;
   b602e:	340a      	adds	r4, #10
   b6030:	46b3      	mov	fp, r6
            for (c = 0; c < bloques[i].numActuadores; c++){
   b6032:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b6036:	42bb      	cmp	r3, r7
   b6038:	dd26      	ble.n	b6088 <_Z6listarv+0x20c>
               if(bloques[i].actuadores[c].evaluate){
   b603a:	f89b 3158 	ldrb.w	r3, [fp, #344]	; 0x158
   b603e:	b1fb      	cbz	r3, b6080 <_Z6listarv+0x204>
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
   b6040:	e9db 1252 	ldrd	r1, r2, [fp, #328]	; 0x148
   b6044:	a806      	add	r0, sp, #24
   b6046:	f7ff fe59 	bl	b5cfc <_Z11identificarii>
   b604a:	a906      	add	r1, sp, #24
   b604c:	a802      	add	r0, sp, #8
   b604e:	f004 fed9 	bl	bae04 <_ZN6StringaSEOS_>
   b6052:	a806      	add	r0, sp, #24
   b6054:	f004 fe40 	bl	bacd8 <_ZN6StringD1Ev>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b6058:	f8d9 3000 	ldr.w	r3, [r9]
   b605c:	f1c3 0303 	rsb	r3, r3, #3
   b6060:	4423      	add	r3, r4
   b6062:	2200      	movs	r2, #0
   b6064:	f8a8 2010 	strh.w	r2, [r8, #16]
   b6068:	f8a8 3012 	strh.w	r3, [r8, #18]
                  snprintf(buf, sizeof(buf), st);
   b606c:	9a02      	ldr	r2, [sp, #8]
   b606e:	2140      	movs	r1, #64	; 0x40
   b6070:	4650      	mov	r0, sl
   b6072:	f004 fcbb 	bl	ba9ec <snprintf>
                  display.print(buf);
   b6076:	4651      	mov	r1, sl
   b6078:	4640      	mov	r0, r8
   b607a:	f004 ff59 	bl	baf30 <_ZN5Print5printEPKc>
                  pos+=10;
   b607e:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numActuadores; c++){
   b6080:	3701      	adds	r7, #1
   b6082:	f10b 0b14 	add.w	fp, fp, #20
   b6086:	e7d4      	b.n	b6032 <_Z6listarv+0x1b6>
               }
            }
         }

         if ((else1 && i == 0) || (else2 && i == 1)){
   b6088:	4b43      	ldr	r3, [pc, #268]	; (b6198 <_Z6listarv+0x31c>)
   b608a:	781b      	ldrb	r3, [r3, #0]
   b608c:	b10b      	cbz	r3, b6092 <_Z6listarv+0x216>
   b608e:	9b00      	ldr	r3, [sp, #0]
   b6090:	b133      	cbz	r3, b60a0 <_Z6listarv+0x224>
   b6092:	4b42      	ldr	r3, [pc, #264]	; (b619c <_Z6listarv+0x320>)
   b6094:	781b      	ldrb	r3, [r3, #0]
   b6096:	2b00      	cmp	r3, #0
   b6098:	d047      	beq.n	b612a <_Z6listarv+0x2ae>
   b609a:	9b00      	ldr	r3, [sp, #0]
   b609c:	2b01      	cmp	r3, #1
   b609e:	d144      	bne.n	b612a <_Z6listarv+0x2ae>
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b60a0:	f8d9 3000 	ldr.w	r3, [r9]
   b60a4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b616c <_Z6listarv+0x2f0>
            snprintf(buf, sizeof(buf), "        ELSE");
   b60a8:	493d      	ldr	r1, [pc, #244]	; (b61a0 <_Z6listarv+0x324>)
   b60aa:	4835      	ldr	r0, [pc, #212]	; (b6180 <_Z6listarv+0x304>)
            pos+=10;
            for (c = 0; c < bloques[i].numActuadores; c++){
               if(!bloques[i].actuadores[c].evaluate){
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
                  display.setCursor(0, 0 - scroll + 3 + pos);
                  snprintf(buf, sizeof(buf), st);
   b60ac:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b6180 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b60b0:	f1c3 0303 	rsb	r3, r3, #3
   b60b4:	4423      	add	r3, r4
   b60b6:	2700      	movs	r7, #0
   b60b8:	f8a8 3012 	strh.w	r3, [r8, #18]
   b60bc:	f8a8 7010 	strh.w	r7, [r8, #16]
            snprintf(buf, sizeof(buf), "        ELSE");
   b60c0:	f005 fd3a 	bl	bbb38 <strcpy>
            display.print(buf);
   b60c4:	492e      	ldr	r1, [pc, #184]	; (b6180 <_Z6listarv+0x304>)
   b60c6:	4640      	mov	r0, r8
   b60c8:	f004 ff32 	bl	baf30 <_ZN5Print5printEPKc>
            elems++;
   b60cc:	3501      	adds	r5, #1
            pos+=10;
   b60ce:	340a      	adds	r4, #10
   b60d0:	46b2      	mov	sl, r6
            for (c = 0; c < bloques[i].numActuadores; c++){
   b60d2:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b60d6:	42bb      	cmp	r3, r7
   b60d8:	dd27      	ble.n	b612a <_Z6listarv+0x2ae>
               if(!bloques[i].actuadores[c].evaluate){
   b60da:	f89a 3158 	ldrb.w	r3, [sl, #344]	; 0x158
   b60de:	bb03      	cbnz	r3, b6122 <_Z6listarv+0x2a6>
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
   b60e0:	e9da 1252 	ldrd	r1, r2, [sl, #328]	; 0x148
   b60e4:	a806      	add	r0, sp, #24
   b60e6:	9301      	str	r3, [sp, #4]
   b60e8:	f7ff fe08 	bl	b5cfc <_Z11identificarii>
   b60ec:	a906      	add	r1, sp, #24
   b60ee:	a802      	add	r0, sp, #8
   b60f0:	f004 fe88 	bl	bae04 <_ZN6StringaSEOS_>
   b60f4:	a806      	add	r0, sp, #24
   b60f6:	f004 fdef 	bl	bacd8 <_ZN6StringD1Ev>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b60fa:	f8d9 2000 	ldr.w	r2, [r9]
   b60fe:	9b01      	ldr	r3, [sp, #4]
   b6100:	f8a8 3010 	strh.w	r3, [r8, #16]
   b6104:	f1c2 0203 	rsb	r2, r2, #3
   b6108:	4422      	add	r2, r4
   b610a:	f8a8 2012 	strh.w	r2, [r8, #18]
                  snprintf(buf, sizeof(buf), st);
   b610e:	2140      	movs	r1, #64	; 0x40
   b6110:	9a02      	ldr	r2, [sp, #8]
   b6112:	4658      	mov	r0, fp
   b6114:	f004 fc6a 	bl	ba9ec <snprintf>
                  display.print(buf);
   b6118:	4659      	mov	r1, fp
   b611a:	4640      	mov	r0, r8
   b611c:	f004 ff08 	bl	baf30 <_ZN5Print5printEPKc>
                  pos += 10;
   b6120:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numActuadores; c++){
   b6122:	3701      	adds	r7, #1
   b6124:	f10a 0a14 	add.w	sl, sl, #20
   b6128:	e7d3      	b.n	b60d2 <_Z6listarv+0x256>
      for(i = 0; i <= numBloque; i++){
   b612a:	9b00      	ldr	r3, [sp, #0]
   b612c:	3301      	adds	r3, #1
   b612e:	9300      	str	r3, [sp, #0]
   b6130:	f506 763b 	add.w	r6, r6, #748	; 0x2ec
   b6134:	e6d0      	b.n	b5ed8 <_Z6listarv+0x5c>
            }
         }

      }

      display.display();
   b6136:	480d      	ldr	r0, [pc, #52]	; (b616c <_Z6listarv+0x2f0>)
   b6138:	f004 f87e 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
      
      if (elems > 2){
   b613c:	2d02      	cmp	r5, #2
   b613e:	dd08      	ble.n	b6152 <_Z6listarv+0x2d6>
         scroll++;
   b6140:	4a18      	ldr	r2, [pc, #96]	; (b61a4 <_Z6listarv+0x328>)
   b6142:	6813      	ldr	r3, [r2, #0]
         if(scroll > elems * 10){
   b6144:	210a      	movs	r1, #10
         scroll++;
   b6146:	3301      	adds	r3, #1
         if(scroll > elems * 10){
   b6148:	434d      	muls	r5, r1
   b614a:	42ab      	cmp	r3, r5
            scroll = 0;
   b614c:	bfc8      	it	gt
   b614e:	2300      	movgt	r3, #0
   b6150:	6013      	str	r3, [r2, #0]
      String st;
   b6152:	a802      	add	r0, sp, #8
   b6154:	f004 fdc0 	bl	bacd8 <_ZN6StringD1Ev>
         }
      }
   }
   b6158:	b00b      	add	sp, #44	; 0x2c
   b615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b615e:	bf00      	nop
   b6160:	2003cd14 	.word	0x2003cd14
   b6164:	2003c73c 	.word	0x2003c73c
   b6168:	000bc0e6 	.word	0x000bc0e6
   b616c:	2003d338 	.word	0x2003d338
   b6170:	2003c688 	.word	0x2003c688
   b6174:	2003d6d4 	.word	0x2003d6d4
   b6178:	2003d6d5 	.word	0x2003d6d5
   b617c:	000bbff6 	.word	0x000bbff6
   b6180:	2003d2ed 	.word	0x2003d2ed
   b6184:	000bc002 	.word	0x000bc002
   b6188:	000bc00f 	.word	0x000bc00f
   b618c:	2003e6ac 	.word	0x2003e6ac
   b6190:	2003e6ad 	.word	0x2003e6ad
   b6194:	000bc01b 	.word	0x000bc01b
   b6198:	2003d6c8 	.word	0x2003d6c8
   b619c:	2003d6c9 	.word	0x2003d6c9
   b61a0:	000bc028 	.word	0x000bc028
   b61a4:	2003da44 	.word	0x2003da44

000b61a8 <_Z11serieBeforei>:

void serieBefore(int bloque){
   int esp;

   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b61a8:	4b1b      	ldr	r3, [pc, #108]	; (b6218 <_Z11serieBeforei+0x70>)
void serieBefore(int bloque){
   b61aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b61ae:	f44f 743b 	mov.w	r4, #748	; 0x2ec
   b61b2:	fb04 3400 	mla	r4, r4, r0, r3
   Actuador actuador = bloque2[bloque].actuadores[j];
   actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      
      while (esp > 0){   
           esp--;
           if (mfrc522.PICC_IsNewCardPresent()){
   b61b6:	f8df a064 	ldr.w	sl, [pc, #100]	; b621c <_Z11serieBeforei+0x74>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b61ba:	2500      	movs	r5, #0
   b61bc:	46a1      	mov	r9, r4
   b61be:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b61c2:	42ab      	cmp	r3, r5
   b61c4:	dd1c      	ble.n	b6200 <_Z11serieBeforei+0x58>
   Actuador actuador = bloque2[bloque].actuadores[j];
   b61c6:	f8d4 6148 	ldr.w	r6, [r4, #328]	; 0x148
   b61ca:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
   actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b61ce:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b61d2:	463a      	mov	r2, r7
   b61d4:	4630      	mov	r0, r6
   b61d6:	f7ff fb11 	bl	b57fc <_Z15actuadorHandleriii>
   b61da:	f04f 081e 	mov.w	r8, #30
           if (mfrc522.PICC_IsNewCardPresent()){
   b61de:	4650      	mov	r0, sl
   b61e0:	f003 f990 	bl	b9504 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b61e4:	b170      	cbz	r0, b6204 <_Z11serieBeforei+0x5c>
            apagarActuador(actuador.id, actuador.puerto);
   b61e6:	4639      	mov	r1, r7
   b61e8:	4630      	mov	r0, r6
   b61ea:	f7ff faf3 	bl	b57d4 <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b61ee:	480b      	ldr	r0, [pc, #44]	; (b621c <_Z11serieBeforei+0x74>)
   b61f0:	f003 fb59 	bl	b98a6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b61f4:	480a      	ldr	r0, [pc, #40]	; (b6220 <_Z11serieBeforei+0x78>)
   b61f6:	f7ff fd31 	bl	b5c5c <_Z8getTagIDPi>
            play = false;
   b61fa:	4b0a      	ldr	r3, [pc, #40]	; (b6224 <_Z11serieBeforei+0x7c>)
   b61fc:	2200      	movs	r2, #0
   b61fe:	701a      	strb	r2, [r3, #0]
         return;}
      }
      apagarActuador(actuador.id, actuador.puerto);
   }
}
   b6200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while (esp > 0){   
   b6204:	f1b8 0801 	subs.w	r8, r8, #1
   b6208:	d1e9      	bne.n	b61de <_Z11serieBeforei+0x36>
      apagarActuador(actuador.id, actuador.puerto);
   b620a:	4639      	mov	r1, r7
   b620c:	4630      	mov	r0, r6
   b620e:	f7ff fae1 	bl	b57d4 <_Z14apagarActuadorii>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b6212:	3501      	adds	r5, #1
   b6214:	3414      	adds	r4, #20
   b6216:	e7d2      	b.n	b61be <_Z11serieBeforei+0x16>
   b6218:	2003c73c 	.word	0x2003c73c
   b621c:	2003d6e8 	.word	0x2003d6e8
   b6220:	2003c690 	.word	0x2003c690
   b6224:	2003da24 	.word	0x2003da24

000b6228 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b6228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b622c:	4c22      	ldr	r4, [pc, #136]	; (b62b8 <_Z18ejecutarEvaluacionbi+0x90>)
    {
      esp = 30;
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      while (esp > 0){
         esp--;
         if (mfrc522.PICC_IsNewCardPresent()){
   b622e:	f8df b08c 	ldr.w	fp, [pc, #140]	; b62bc <_Z18ejecutarEvaluacionbi+0x94>
   b6232:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b6236:	fb03 4401 	mla	r4, r3, r1, r4
void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b623a:	4681      	mov	r9, r0
   b623c:	460e      	mov	r6, r1
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b623e:	f04f 0800 	mov.w	r8, #0
   b6242:	46a2      	mov	sl, r4
   b6244:	f8da 3144 	ldr.w	r3, [sl, #324]	; 0x144
   b6248:	4543      	cmp	r3, r8
   b624a:	dd21      	ble.n	b6290 <_Z18ejecutarEvaluacionbi+0x68>
    if (evaluacion == actuador.evaluate)
   b624c:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b6250:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
   b6254:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b6258:	454b      	cmp	r3, r9
   b625a:	d123      	bne.n	b62a4 <_Z18ejecutarEvaluacionbi+0x7c>
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b625c:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b6260:	463a      	mov	r2, r7
   b6262:	4628      	mov	r0, r5
   b6264:	f7ff faca 	bl	b57fc <_Z15actuadorHandleriii>
   b6268:	231e      	movs	r3, #30
         if (mfrc522.PICC_IsNewCardPresent()){
   b626a:	4658      	mov	r0, fp
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	f003 f949 	bl	b9504 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b6272:	9b01      	ldr	r3, [sp, #4]
   b6274:	b178      	cbz	r0, b6296 <_Z18ejecutarEvaluacionbi+0x6e>
            apagarActuador(actuador.id, actuador.puerto);
   b6276:	4639      	mov	r1, r7
   b6278:	4628      	mov	r0, r5
   b627a:	f7ff faab 	bl	b57d4 <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b627e:	480f      	ldr	r0, [pc, #60]	; (b62bc <_Z18ejecutarEvaluacionbi+0x94>)
   b6280:	f003 fb11 	bl	b98a6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b6284:	480e      	ldr	r0, [pc, #56]	; (b62c0 <_Z18ejecutarEvaluacionbi+0x98>)
   b6286:	f7ff fce9 	bl	b5c5c <_Z8getTagIDPi>
            play = false;
   b628a:	4b0e      	ldr	r3, [pc, #56]	; (b62c4 <_Z18ejecutarEvaluacionbi+0x9c>)
   b628c:	2200      	movs	r2, #0
   b628e:	701a      	strb	r2, [r3, #0]
      }
    }
    
  }

}
   b6290:	b003      	add	sp, #12
   b6292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while (esp > 0){
   b6296:	3b01      	subs	r3, #1
   b6298:	d1e7      	bne.n	b626a <_Z18ejecutarEvaluacionbi+0x42>
        apagarActuador(actuador.id, actuador.puerto);
   b629a:	4639      	mov	r1, r7
   b629c:	4628      	mov	r0, r5
   b629e:	f7ff fa99 	bl	b57d4 <_Z14apagarActuadorii>
   b62a2:	e005      	b.n	b62b0 <_Z18ejecutarEvaluacionbi+0x88>
      if (!isActuadorDual(actuador.id, bloque))
   b62a4:	4631      	mov	r1, r6
   b62a6:	4628      	mov	r0, r5
   b62a8:	f7ff fc44 	bl	b5b34 <_Z14isActuadorDualii>
   b62ac:	2800      	cmp	r0, #0
   b62ae:	d0f4      	beq.n	b629a <_Z18ejecutarEvaluacionbi+0x72>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b62b0:	f108 0801 	add.w	r8, r8, #1
   b62b4:	3414      	adds	r4, #20
   b62b6:	e7c5      	b.n	b6244 <_Z18ejecutarEvaluacionbi+0x1c>
   b62b8:	2003cd14 	.word	0x2003cd14
   b62bc:	2003d6e8 	.word	0x2003d6e8
   b62c0:	2003c690 	.word	0x2003c690
   b62c4:	2003da24 	.word	0x2003da24

000b62c8 <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b62c8:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b62ca:	b940      	cbnz	r0, b62de <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b62cc:	4b32      	ldr	r3, [pc, #200]	; (b6398 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b62ce:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b62d0:	2c05      	cmp	r4, #5
   b62d2:	d858      	bhi.n	b6386 <_Z13asignarPuertoi+0xbe>
   b62d4:	e8df f004 	tbb	[pc, r4]
   b62d8:	32221305 	.word	0x32221305
   b62dc:	483d      	.short	0x483d
      option = puertoDigital;
   b62de:	4b2f      	ldr	r3, [pc, #188]	; (b639c <_Z13asignarPuertoi+0xd4>)
   b62e0:	e7f5      	b.n	b62ce <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b62e2:	f005 f887 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b62e6:	492e      	ldr	r1, [pc, #184]	; (b63a0 <_Z13asignarPuertoi+0xd8>)
   b62e8:	f004 fe22 	bl	baf30 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b62ec:	4a2a      	ldr	r2, [pc, #168]	; (b6398 <_Z13asignarPuertoi+0xd0>)
   b62ee:	6813      	ldr	r3, [r2, #0]
   b62f0:	3301      	adds	r3, #1
   b62f2:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b62f4:	4a2b      	ldr	r2, [pc, #172]	; (b63a4 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b62f6:	6813      	ldr	r3, [r2, #0]
   b62f8:	3301      	adds	r3, #1
   b62fa:	6013      	str	r3, [r2, #0]
      return 4;
   b62fc:	e01c      	b.n	b6338 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b62fe:	f005 f879 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6302:	4929      	ldr	r1, [pc, #164]	; (b63a8 <_Z13asignarPuertoi+0xe0>)
   b6304:	f004 fe14 	bl	baf30 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b6308:	4a23      	ldr	r2, [pc, #140]	; (b6398 <_Z13asignarPuertoi+0xd0>)
   b630a:	6813      	ldr	r3, [r2, #0]
   b630c:	3301      	adds	r3, #1
   b630e:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b6310:	4a24      	ldr	r2, [pc, #144]	; (b63a4 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b6312:	6813      	ldr	r3, [r2, #0]
   b6314:	3301      	adds	r3, #1
   b6316:	6013      	str	r3, [r2, #0]
      return 2;
   b6318:	2402      	movs	r4, #2
   b631a:	e00d      	b.n	b6338 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b631c:	f005 f86a 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6320:	4922      	ldr	r1, [pc, #136]	; (b63ac <_Z13asignarPuertoi+0xe4>)
   b6322:	f004 fe05 	bl	baf30 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b6326:	4b1c      	ldr	r3, [pc, #112]	; (b6398 <_Z13asignarPuertoi+0xd0>)
   b6328:	f04f 32ff 	mov.w	r2, #4294967295
   b632c:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b632e:	4a1d      	ldr	r2, [pc, #116]	; (b63a4 <_Z13asignarPuertoi+0xdc>)
   b6330:	6813      	ldr	r3, [r2, #0]
   b6332:	3301      	adds	r3, #1
   b6334:	6013      	str	r3, [r2, #0]
      return 4;
   b6336:	2404      	movs	r4, #4
   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }

}
   b6338:	4620      	mov	r0, r4
   b633a:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b633c:	f005 f85a 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6340:	491b      	ldr	r1, [pc, #108]	; (b63b0 <_Z13asignarPuertoi+0xe8>)
   b6342:	f004 fdf5 	bl	baf30 <_ZN5Print5printEPKc>
      puertoDigital++;
   b6346:	4a15      	ldr	r2, [pc, #84]	; (b639c <_Z13asignarPuertoi+0xd4>)
   b6348:	6813      	ldr	r3, [r2, #0]
   b634a:	3301      	adds	r3, #1
   b634c:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b634e:	4a19      	ldr	r2, [pc, #100]	; (b63b4 <_Z13asignarPuertoi+0xec>)
   b6350:	e7df      	b.n	b6312 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b6352:	f005 f84f 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6356:	4918      	ldr	r1, [pc, #96]	; (b63b8 <_Z13asignarPuertoi+0xf0>)
   b6358:	f004 fdea 	bl	baf30 <_ZN5Print5printEPKc>
      puertoDigital++;
   b635c:	4a0f      	ldr	r2, [pc, #60]	; (b639c <_Z13asignarPuertoi+0xd4>)
   b635e:	6813      	ldr	r3, [r2, #0]
   b6360:	3301      	adds	r3, #1
   b6362:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b6364:	4a13      	ldr	r2, [pc, #76]	; (b63b4 <_Z13asignarPuertoi+0xec>)
   b6366:	e7c6      	b.n	b62f6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b6368:	f005 f844 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b636c:	4913      	ldr	r1, [pc, #76]	; (b63bc <_Z13asignarPuertoi+0xf4>)
   b636e:	f004 fddf 	bl	baf30 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b6372:	4b0a      	ldr	r3, [pc, #40]	; (b639c <_Z13asignarPuertoi+0xd4>)
   b6374:	f04f 32ff 	mov.w	r2, #4294967295
   b6378:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b637a:	4a0e      	ldr	r2, [pc, #56]	; (b63b4 <_Z13asignarPuertoi+0xec>)
   b637c:	6813      	ldr	r3, [r2, #0]
   b637e:	3301      	adds	r3, #1
   b6380:	6013      	str	r3, [r2, #0]
      return 6;
   b6382:	2406      	movs	r4, #6
   b6384:	e7d8      	b.n	b6338 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b6386:	f005 f835 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b638a:	490d      	ldr	r1, [pc, #52]	; (b63c0 <_Z13asignarPuertoi+0xf8>)
   b638c:	f004 fdd0 	bl	baf30 <_ZN5Print5printEPKc>
      return -1;
   b6390:	f04f 34ff 	mov.w	r4, #4294967295
   b6394:	e7d0      	b.n	b6338 <_Z13asignarPuertoi+0x70>
   b6396:	bf00      	nop
   b6398:	2003da30 	.word	0x2003da30
   b639c:	2003c68c 	.word	0x2003c68c
   b63a0:	000bc035 	.word	0x000bc035
   b63a4:	2003da34 	.word	0x2003da34
   b63a8:	000bc04c 	.word	0x000bc04c
   b63ac:	000bc063 	.word	0x000bc063
   b63b0:	000bc07a 	.word	0x000bc07a
   b63b4:	2003da38 	.word	0x2003da38
   b63b8:	000bc091 	.word	0x000bc091
   b63bc:	000bc0a8 	.word	0x000bc0a8
   b63c0:	000bc0bf 	.word	0x000bc0bf

000b63c4 <_Z11ajusta_tempi>:

// Eliminar 'outliers' de la temperatura
   int ajusta_temp(int val)
   {
   b63c4:	b510      	push	{r4, lr}
      if (temp_rep == 0){
   b63c6:	4a09      	ldr	r2, [pc, #36]	; (b63ec <_Z11ajusta_tempi+0x28>)
   b63c8:	4909      	ldr	r1, [pc, #36]	; (b63f0 <_Z11ajusta_tempi+0x2c>)
   b63ca:	6813      	ldr	r3, [r2, #0]
   b63cc:	b923      	cbnz	r3, b63d8 <_Z11ajusta_tempi+0x14>
         temp_prev = val;
   b63ce:	6008      	str	r0, [r1, #0]
         temp_rep++;}
   b63d0:	2301      	movs	r3, #1
      else if (temp_prev == val && temp_rep < 6)
         temp_rep++;
      else
         temp_rep--;
   b63d2:	6013      	str	r3, [r2, #0]
         val = temp_prev;
      return val;
   }
   b63d4:	6808      	ldr	r0, [r1, #0]
   b63d6:	bd10      	pop	{r4, pc}
      else if (temp_prev == val && temp_rep < 6)
   b63d8:	680c      	ldr	r4, [r1, #0]
   b63da:	4284      	cmp	r4, r0
   b63dc:	d103      	bne.n	b63e6 <_Z11ajusta_tempi+0x22>
   b63de:	2b05      	cmp	r3, #5
   b63e0:	dc01      	bgt.n	b63e6 <_Z11ajusta_tempi+0x22>
         temp_rep++;
   b63e2:	3301      	adds	r3, #1
   b63e4:	e7f5      	b.n	b63d2 <_Z11ajusta_tempi+0xe>
         temp_rep--;
   b63e6:	3b01      	subs	r3, #1
   b63e8:	e7f3      	b.n	b63d2 <_Z11ajusta_tempi+0xe>
   b63ea:	bf00      	nop
   b63ec:	2003e6a8 	.word	0x2003e6a8
   b63f0:	2003c6a8 	.word	0x2003c6a8

000b63f4 <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b63f4:	b570      	push	{r4, r5, r6, lr}
   b63f6:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b63f8:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b63fa:	a807      	add	r0, sp, #28
   b63fc:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b6400:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b6404:	f004 ff06 	bl	bb214 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b6408:	4843      	ldr	r0, [pc, #268]	; (b6518 <setup+0x124>)
   b640a:	4623      	mov	r3, r4
   b640c:	4622      	mov	r2, r4
   b640e:	4621      	mov	r1, r4
   b6410:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6412:	4c42      	ldr	r4, [pc, #264]	; (b651c <setup+0x128>)
   b6414:	f004 fa8a 	bl	ba92c <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b6418:	f004 ffec 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b641c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6420:	f004 ffdc 	bl	bb3dc <_ZN9USBSerial5beginEl>
   b6424:	7821      	ldrb	r1, [r4, #0]
   b6426:	f3bf 8f5b 	dmb	ish
   b642a:	f011 0101 	ands.w	r1, r1, #1
   b642e:	d10b      	bne.n	b6448 <setup+0x54>
   b6430:	4620      	mov	r0, r4
   b6432:	9105      	str	r1, [sp, #20]
   b6434:	f7fe fb16 	bl	b4a64 <__cxa_guard_acquire>
   b6438:	9905      	ldr	r1, [sp, #20]
   b643a:	b128      	cbz	r0, b6448 <setup+0x54>
   b643c:	4838      	ldr	r0, [pc, #224]	; (b6520 <setup+0x12c>)
   b643e:	f004 fb41 	bl	baac4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6442:	4620      	mov	r0, r4
   b6444:	f7fe fb13 	bl	b4a6e <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b6448:	4835      	ldr	r0, [pc, #212]	; (b6520 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b644a:	4c36      	ldr	r4, [pc, #216]	; (b6524 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b644c:	2501      	movs	r5, #1
   b644e:	f004 fb43 	bl	baad8 <_ZN8SPIClass5beginEv>
   b6452:	462b      	mov	r3, r5
   b6454:	223c      	movs	r2, #60	; 0x3c
   b6456:	2102      	movs	r1, #2
   b6458:	4833      	ldr	r0, [pc, #204]	; (b6528 <setup+0x134>)
   b645a:	9500      	str	r5, [sp, #0]
   b645c:	f003 fc92 	bl	b9d84 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b6460:	4831      	ldr	r0, [pc, #196]	; (b6528 <setup+0x134>)
   b6462:	f003 fc81 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b6466:	4830      	ldr	r0, [pc, #192]	; (b6528 <setup+0x134>)
   b6468:	f003 fee6 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b646c:	482f      	ldr	r0, [pc, #188]	; (b652c <setup+0x138>)
   b646e:	f002 ff1e 	bl	b92ae <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b6472:	4a2f      	ldr	r2, [pc, #188]	; (b6530 <setup+0x13c>)
   b6474:	21ff      	movs	r1, #255	; 0xff
   b6476:	7011      	strb	r1, [r2, #0]
   b6478:	7051      	strb	r1, [r2, #1]
   b647a:	7091      	strb	r1, [r2, #2]
   b647c:	70d1      	strb	r1, [r2, #3]
   b647e:	7111      	strb	r1, [r2, #4]
   b6480:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b6482:	f005 fa9f 	bl	bb9c4 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b6486:	2000      	movs	r0, #0
   b6488:	f004 f8bc 	bl	ba604 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b648c:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b648e:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b6490:	d10d      	bne.n	b64ae <setup+0xba>
    
    Serial.println("EEPROM empty");
   b6492:	f004 ffaf 	bl	bb3f4 <_Z16_fetch_usbserialv>
    MODE = 0;
   b6496:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b6498:	4926      	ldr	r1, [pc, #152]	; (b6534 <setup+0x140>)
   b649a:	f004 fd5c 	bl	baf56 <_ZN5Print7printlnEPKc>
    MODE = 0;
   b649e:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b64a0:	f005 fa90 	bl	bb9c4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b64a4:	462a      	mov	r2, r5
   b64a6:	4621      	mov	r1, r4
   b64a8:	4630      	mov	r0, r6
   b64aa:	f004 f8b3 	bl	ba614 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b64ae:	7824      	ldrb	r4, [r4, #0]
   b64b0:	bb54      	cbnz	r4, b6508 <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b64b2:	2101      	movs	r1, #1
   b64b4:	2006      	movs	r0, #6
   b64b6:	f005 f9d3 	bl	bb860 <pinMode>
    ledObject.init();
   b64ba:	481f      	ldr	r0, [pc, #124]	; (b6538 <setup+0x144>)
   b64bc:	f004 f808 	bl	ba4d0 <_ZN12ChainableLED4initEv>
    init = true;
   b64c0:	4b1e      	ldr	r3, [pc, #120]	; (b653c <setup+0x148>)
   b64c2:	2201      	movs	r2, #1
   b64c4:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b64c6:	4a1e      	ldr	r2, [pc, #120]	; (b6540 <setup+0x14c>)
   b64c8:	6813      	ldr	r3, [r2, #0]
   b64ca:	3301      	adds	r3, #1
   b64cc:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b64ce:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b64d2:	4a1c      	ldr	r2, [pc, #112]	; (b6544 <setup+0x150>)
   b64d4:	434b      	muls	r3, r1
   b64d6:	18d1      	adds	r1, r2, r3
   b64d8:	50d4      	str	r4, [r2, r3]
   b64da:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b64de:	2340      	movs	r3, #64	; 0x40
   b64e0:	2201      	movs	r2, #1
   b64e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b64e6:	2200      	movs	r2, #0
   b64e8:	2380      	movs	r3, #128	; 0x80
   b64ea:	4611      	mov	r1, r2
   b64ec:	9300      	str	r3, [sp, #0]
   b64ee:	480e      	ldr	r0, [pc, #56]	; (b6528 <setup+0x134>)
   b64f0:	4b15      	ldr	r3, [pc, #84]	; (b6548 <setup+0x154>)
   b64f2:	f002 fb31 	bl	b8b58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b64f6:	480c      	ldr	r0, [pc, #48]	; (b6528 <setup+0x134>)
   b64f8:	f003 fe9e 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
   b64fc:	f004 f872 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b6500:	4b12      	ldr	r3, [pc, #72]	; (b654c <setup+0x158>)
   b6502:	6018      	str	r0, [r3, #0]
  
}
   b6504:	b00a      	add	sp, #40	; 0x28
   b6506:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b6508:	2c01      	cmp	r4, #1
   b650a:	d0e8      	beq.n	b64de <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b650c:	2101      	movs	r1, #1
   b650e:	2006      	movs	r0, #6
   b6510:	f005 f9a6 	bl	bb860 <pinMode>
   b6514:	e7e3      	b.n	b64de <setup+0xea>
   b6516:	bf00      	nop
   b6518:	2003e710 	.word	0x2003e710
   b651c:	2003c71c 	.word	0x2003c71c
   b6520:	2003c720 	.word	0x2003c720
   b6524:	2003c72a 	.word	0x2003c72a
   b6528:	2003d338 	.word	0x2003d338
   b652c:	2003d6e8 	.word	0x2003d6e8
   b6530:	2003d6d7 	.word	0x2003d6d7
   b6534:	000bc0e7 	.word	0x000bc0e7
   b6538:	2003d6e0 	.word	0x2003d6e0
   b653c:	2003d6d6 	.word	0x2003d6d6
   b6540:	2003c688 	.word	0x2003c688
   b6544:	2003cd14 	.word	0x2003cd14
   b6548:	000bca30 	.word	0x000bca30
   b654c:	2003dc2c 	.word	0x2003dc2c

000b6550 <_GLOBAL__sub_I_ruid>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b6550:	2305      	movs	r3, #5
              showBitmap(2,4,"");
              play=false;
        }

  }
   b6552:	b570      	push	{r4, r5, r6, lr}
   b6554:	461a      	mov	r2, r3
   b6556:	2104      	movs	r1, #4
   b6558:	48aa      	ldr	r0, [pc, #680]	; (b6804 <_GLOBAL__sub_I_ruid+0x2b4>)
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b655a:	4dab      	ldr	r5, [pc, #684]	; (b6808 <_GLOBAL__sub_I_ruid+0x2b8>)
   b655c:	4eab      	ldr	r6, [pc, #684]	; (b680c <_GLOBAL__sub_I_ruid+0x2bc>)
   b655e:	f003 ff05 	bl	ba36c <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b6562:	4bab      	ldr	r3, [pc, #684]	; (b6810 <_GLOBAL__sub_I_ruid+0x2c0>)
Adafruit_SSD1306 display(-1);
   b6564:	48ab      	ldr	r0, [pc, #684]	; (b6814 <_GLOBAL__sub_I_ruid+0x2c4>)
   b6566:	2400      	movs	r4, #0
   b6568:	601c      	str	r4, [r3, #0]
   b656a:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b656e:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b6572:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b6576:	4ba8      	ldr	r3, [pc, #672]	; (b6818 <_GLOBAL__sub_I_ruid+0x2c8>)
   b6578:	f04f 31ff 	mov.w	r1, #4294967295
   b657c:	601c      	str	r4, [r3, #0]
   b657e:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b6582:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b6586:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b658a:	f003 faf9 	bl	b9b80 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b658e:	49a3      	ldr	r1, [pc, #652]	; (b681c <_GLOBAL__sub_I_ruid+0x2cc>)
   b6590:	48a3      	ldr	r0, [pc, #652]	; (b6820 <_GLOBAL__sub_I_ruid+0x2d0>)
   b6592:	f004 fbec 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6596:	49a1      	ldr	r1, [pc, #644]	; (b681c <_GLOBAL__sub_I_ruid+0x2cc>)
   b6598:	48a2      	ldr	r0, [pc, #648]	; (b6824 <_GLOBAL__sub_I_ruid+0x2d4>)
   b659a:	f004 fbe8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[16] = { "0#2#0","0#3#0","0#4#1","0#9#1","0#10#1","0#11#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5"};
   b659e:	49a2      	ldr	r1, [pc, #648]	; (b6828 <_GLOBAL__sub_I_ruid+0x2d8>)
   b65a0:	48a2      	ldr	r0, [pc, #648]	; (b682c <_GLOBAL__sub_I_ruid+0x2dc>)
   b65a2:	f004 fbe4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65a6:	49a2      	ldr	r1, [pc, #648]	; (b6830 <_GLOBAL__sub_I_ruid+0x2e0>)
   b65a8:	48a2      	ldr	r0, [pc, #648]	; (b6834 <_GLOBAL__sub_I_ruid+0x2e4>)
   b65aa:	f004 fbe0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ae:	49a2      	ldr	r1, [pc, #648]	; (b6838 <_GLOBAL__sub_I_ruid+0x2e8>)
   b65b0:	48a2      	ldr	r0, [pc, #648]	; (b683c <_GLOBAL__sub_I_ruid+0x2ec>)
   b65b2:	f004 fbdc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65b6:	49a2      	ldr	r1, [pc, #648]	; (b6840 <_GLOBAL__sub_I_ruid+0x2f0>)
   b65b8:	48a2      	ldr	r0, [pc, #648]	; (b6844 <_GLOBAL__sub_I_ruid+0x2f4>)
   b65ba:	f004 fbd8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65be:	49a2      	ldr	r1, [pc, #648]	; (b6848 <_GLOBAL__sub_I_ruid+0x2f8>)
   b65c0:	48a2      	ldr	r0, [pc, #648]	; (b684c <_GLOBAL__sub_I_ruid+0x2fc>)
   b65c2:	f004 fbd4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65c6:	49a2      	ldr	r1, [pc, #648]	; (b6850 <_GLOBAL__sub_I_ruid+0x300>)
   b65c8:	48a2      	ldr	r0, [pc, #648]	; (b6854 <_GLOBAL__sub_I_ruid+0x304>)
   b65ca:	f004 fbd0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ce:	49a2      	ldr	r1, [pc, #648]	; (b6858 <_GLOBAL__sub_I_ruid+0x308>)
   b65d0:	48a2      	ldr	r0, [pc, #648]	; (b685c <_GLOBAL__sub_I_ruid+0x30c>)
   b65d2:	f004 fbcc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65d6:	49a2      	ldr	r1, [pc, #648]	; (b6860 <_GLOBAL__sub_I_ruid+0x310>)
   b65d8:	48a2      	ldr	r0, [pc, #648]	; (b6864 <_GLOBAL__sub_I_ruid+0x314>)
   b65da:	f004 fbc8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65de:	49a2      	ldr	r1, [pc, #648]	; (b6868 <_GLOBAL__sub_I_ruid+0x318>)
   b65e0:	48a2      	ldr	r0, [pc, #648]	; (b686c <_GLOBAL__sub_I_ruid+0x31c>)
   b65e2:	f004 fbc4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65e6:	49a2      	ldr	r1, [pc, #648]	; (b6870 <_GLOBAL__sub_I_ruid+0x320>)
   b65e8:	48a2      	ldr	r0, [pc, #648]	; (b6874 <_GLOBAL__sub_I_ruid+0x324>)
   b65ea:	f004 fbc0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65ee:	49a2      	ldr	r1, [pc, #648]	; (b6878 <_GLOBAL__sub_I_ruid+0x328>)
   b65f0:	48a2      	ldr	r0, [pc, #648]	; (b687c <_GLOBAL__sub_I_ruid+0x32c>)
   b65f2:	f004 fbbc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65f6:	49a2      	ldr	r1, [pc, #648]	; (b6880 <_GLOBAL__sub_I_ruid+0x330>)
   b65f8:	48a2      	ldr	r0, [pc, #648]	; (b6884 <_GLOBAL__sub_I_ruid+0x334>)
   b65fa:	f004 fbb8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	49a2      	ldr	r1, [pc, #648]	; (b6888 <_GLOBAL__sub_I_ruid+0x338>)
   b6600:	48a2      	ldr	r0, [pc, #648]	; (b688c <_GLOBAL__sub_I_ruid+0x33c>)
   b6602:	f004 fbb4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6606:	49a2      	ldr	r1, [pc, #648]	; (b6890 <_GLOBAL__sub_I_ruid+0x340>)
   b6608:	48a2      	ldr	r0, [pc, #648]	; (b6894 <_GLOBAL__sub_I_ruid+0x344>)
   b660a:	f004 fbb0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b660e:	497f      	ldr	r1, [pc, #508]	; (b680c <_GLOBAL__sub_I_ruid+0x2bc>)
   b6610:	48a1      	ldr	r0, [pc, #644]	; (b6898 <_GLOBAL__sub_I_ruid+0x348>)
   b6612:	f004 fbac 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6616:	497d      	ldr	r1, [pc, #500]	; (b680c <_GLOBAL__sub_I_ruid+0x2bc>)
   b6618:	48a0      	ldr	r0, [pc, #640]	; (b689c <_GLOBAL__sub_I_ruid+0x34c>)
   b661a:	f004 fba8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b661e:	49a0      	ldr	r1, [pc, #640]	; (b68a0 <_GLOBAL__sub_I_ruid+0x350>)
   b6620:	48a0      	ldr	r0, [pc, #640]	; (b68a4 <_GLOBAL__sub_I_ruid+0x354>)
   b6622:	f004 fba4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6626:	49a0      	ldr	r1, [pc, #640]	; (b68a8 <_GLOBAL__sub_I_ruid+0x358>)
   b6628:	48a0      	ldr	r0, [pc, #640]	; (b68ac <_GLOBAL__sub_I_ruid+0x35c>)
   b662a:	f004 fba0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b662e:	49a0      	ldr	r1, [pc, #640]	; (b68b0 <_GLOBAL__sub_I_ruid+0x360>)
   b6630:	48a0      	ldr	r0, [pc, #640]	; (b68b4 <_GLOBAL__sub_I_ruid+0x364>)
   b6632:	f004 fb9c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6636:	49a0      	ldr	r1, [pc, #640]	; (b68b8 <_GLOBAL__sub_I_ruid+0x368>)
   b6638:	48a0      	ldr	r0, [pc, #640]	; (b68bc <_GLOBAL__sub_I_ruid+0x36c>)
   b663a:	f004 fb98 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b663e:	49a0      	ldr	r1, [pc, #640]	; (b68c0 <_GLOBAL__sub_I_ruid+0x370>)
   b6640:	48a0      	ldr	r0, [pc, #640]	; (b68c4 <_GLOBAL__sub_I_ruid+0x374>)
   b6642:	f004 fb94 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6646:	49a0      	ldr	r1, [pc, #640]	; (b68c8 <_GLOBAL__sub_I_ruid+0x378>)
   b6648:	48a0      	ldr	r0, [pc, #640]	; (b68cc <_GLOBAL__sub_I_ruid+0x37c>)
   b664a:	f004 fb90 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b664e:	49a0      	ldr	r1, [pc, #640]	; (b68d0 <_GLOBAL__sub_I_ruid+0x380>)
   b6650:	48a0      	ldr	r0, [pc, #640]	; (b68d4 <_GLOBAL__sub_I_ruid+0x384>)
   b6652:	f004 fb8c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6656:	49a0      	ldr	r1, [pc, #640]	; (b68d8 <_GLOBAL__sub_I_ruid+0x388>)
   b6658:	48a0      	ldr	r0, [pc, #640]	; (b68dc <_GLOBAL__sub_I_ruid+0x38c>)
   b665a:	f004 fb88 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b665e:	49a0      	ldr	r1, [pc, #640]	; (b68e0 <_GLOBAL__sub_I_ruid+0x390>)
   b6660:	48a0      	ldr	r0, [pc, #640]	; (b68e4 <_GLOBAL__sub_I_ruid+0x394>)
   b6662:	f004 fb84 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6666:	49a0      	ldr	r1, [pc, #640]	; (b68e8 <_GLOBAL__sub_I_ruid+0x398>)
   b6668:	48a0      	ldr	r0, [pc, #640]	; (b68ec <_GLOBAL__sub_I_ruid+0x39c>)
   b666a:	f004 fb80 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b666e:	49a0      	ldr	r1, [pc, #640]	; (b68f0 <_GLOBAL__sub_I_ruid+0x3a0>)
   b6670:	48a0      	ldr	r0, [pc, #640]	; (b68f4 <_GLOBAL__sub_I_ruid+0x3a4>)
   b6672:	f004 fb7c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6676:	49a0      	ldr	r1, [pc, #640]	; (b68f8 <_GLOBAL__sub_I_ruid+0x3a8>)
   b6678:	48a0      	ldr	r0, [pc, #640]	; (b68fc <_GLOBAL__sub_I_ruid+0x3ac>)
   b667a:	f004 fb78 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b667e:	49a0      	ldr	r1, [pc, #640]	; (b6900 <_GLOBAL__sub_I_ruid+0x3b0>)
   b6680:	48a0      	ldr	r0, [pc, #640]	; (b6904 <_GLOBAL__sub_I_ruid+0x3b4>)
   b6682:	f004 fb74 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6686:	49a0      	ldr	r1, [pc, #640]	; (b6908 <_GLOBAL__sub_I_ruid+0x3b8>)
   b6688:	48a0      	ldr	r0, [pc, #640]	; (b690c <_GLOBAL__sub_I_ruid+0x3bc>)
   b668a:	f004 fb70 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b668e:	49a0      	ldr	r1, [pc, #640]	; (b6910 <_GLOBAL__sub_I_ruid+0x3c0>)
   b6690:	48a0      	ldr	r0, [pc, #640]	; (b6914 <_GLOBAL__sub_I_ruid+0x3c4>)
   b6692:	f004 fb6c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6696:	49a0      	ldr	r1, [pc, #640]	; (b6918 <_GLOBAL__sub_I_ruid+0x3c8>)
   b6698:	48a0      	ldr	r0, [pc, #640]	; (b691c <_GLOBAL__sub_I_ruid+0x3cc>)
   b669a:	f004 fb68 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b669e:	49a0      	ldr	r1, [pc, #640]	; (b6920 <_GLOBAL__sub_I_ruid+0x3d0>)
   b66a0:	48a0      	ldr	r0, [pc, #640]	; (b6924 <_GLOBAL__sub_I_ruid+0x3d4>)
   b66a2:	f004 fb64 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66a6:	49a0      	ldr	r1, [pc, #640]	; (b6928 <_GLOBAL__sub_I_ruid+0x3d8>)
   b66a8:	48a0      	ldr	r0, [pc, #640]	; (b692c <_GLOBAL__sub_I_ruid+0x3dc>)
   b66aa:	f004 fb60 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66ae:	49a0      	ldr	r1, [pc, #640]	; (b6930 <_GLOBAL__sub_I_ruid+0x3e0>)
   b66b0:	48a0      	ldr	r0, [pc, #640]	; (b6934 <_GLOBAL__sub_I_ruid+0x3e4>)
   b66b2:	f004 fb5c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66b6:	49a0      	ldr	r1, [pc, #640]	; (b6938 <_GLOBAL__sub_I_ruid+0x3e8>)
   b66b8:	48a0      	ldr	r0, [pc, #640]	; (b693c <_GLOBAL__sub_I_ruid+0x3ec>)
   b66ba:	f004 fb58 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66be:	49a0      	ldr	r1, [pc, #640]	; (b6940 <_GLOBAL__sub_I_ruid+0x3f0>)
   b66c0:	48a0      	ldr	r0, [pc, #640]	; (b6944 <_GLOBAL__sub_I_ruid+0x3f4>)
   b66c2:	f004 fb54 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66c6:	49a0      	ldr	r1, [pc, #640]	; (b6948 <_GLOBAL__sub_I_ruid+0x3f8>)
   b66c8:	48a0      	ldr	r0, [pc, #640]	; (b694c <_GLOBAL__sub_I_ruid+0x3fc>)
   b66ca:	f004 fb50 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66ce:	49a0      	ldr	r1, [pc, #640]	; (b6950 <_GLOBAL__sub_I_ruid+0x400>)
   b66d0:	48a0      	ldr	r0, [pc, #640]	; (b6954 <_GLOBAL__sub_I_ruid+0x404>)
   b66d2:	f004 fb4c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66d6:	49a0      	ldr	r1, [pc, #640]	; (b6958 <_GLOBAL__sub_I_ruid+0x408>)
   b66d8:	48a0      	ldr	r0, [pc, #640]	; (b695c <_GLOBAL__sub_I_ruid+0x40c>)
   b66da:	f004 fb48 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66de:	49a0      	ldr	r1, [pc, #640]	; (b6960 <_GLOBAL__sub_I_ruid+0x410>)
   b66e0:	48a0      	ldr	r0, [pc, #640]	; (b6964 <_GLOBAL__sub_I_ruid+0x414>)
   b66e2:	f004 fb44 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66e6:	49a0      	ldr	r1, [pc, #640]	; (b6968 <_GLOBAL__sub_I_ruid+0x418>)
   b66e8:	48a0      	ldr	r0, [pc, #640]	; (b696c <_GLOBAL__sub_I_ruid+0x41c>)
   b66ea:	f004 fb40 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66ee:	49a0      	ldr	r1, [pc, #640]	; (b6970 <_GLOBAL__sub_I_ruid+0x420>)
   b66f0:	48a0      	ldr	r0, [pc, #640]	; (b6974 <_GLOBAL__sub_I_ruid+0x424>)
   b66f2:	f004 fb3c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b66f6:	49a0      	ldr	r1, [pc, #640]	; (b6978 <_GLOBAL__sub_I_ruid+0x428>)
   b66f8:	48a0      	ldr	r0, [pc, #640]	; (b697c <_GLOBAL__sub_I_ruid+0x42c>)
   b66fa:	f004 fb38 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b66fe:	49a0      	ldr	r1, [pc, #640]	; (b6980 <_GLOBAL__sub_I_ruid+0x430>)
   b6700:	48a0      	ldr	r0, [pc, #640]	; (b6984 <_GLOBAL__sub_I_ruid+0x434>)
   b6702:	f004 fb34 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6706:	49a0      	ldr	r1, [pc, #640]	; (b6988 <_GLOBAL__sub_I_ruid+0x438>)
   b6708:	48a0      	ldr	r0, [pc, #640]	; (b698c <_GLOBAL__sub_I_ruid+0x43c>)
   b670a:	f004 fb30 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b670e:	49a0      	ldr	r1, [pc, #640]	; (b6990 <_GLOBAL__sub_I_ruid+0x440>)
   b6710:	48a0      	ldr	r0, [pc, #640]	; (b6994 <_GLOBAL__sub_I_ruid+0x444>)
   b6712:	f004 fb2c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6716:	49a0      	ldr	r1, [pc, #640]	; (b6998 <_GLOBAL__sub_I_ruid+0x448>)
   b6718:	48a0      	ldr	r0, [pc, #640]	; (b699c <_GLOBAL__sub_I_ruid+0x44c>)
   b671a:	f004 fb28 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b671e:	49a0      	ldr	r1, [pc, #640]	; (b69a0 <_GLOBAL__sub_I_ruid+0x450>)
   b6720:	48a0      	ldr	r0, [pc, #640]	; (b69a4 <_GLOBAL__sub_I_ruid+0x454>)
   b6722:	f004 fb24 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6726:	49a0      	ldr	r1, [pc, #640]	; (b69a8 <_GLOBAL__sub_I_ruid+0x458>)
   b6728:	48a0      	ldr	r0, [pc, #640]	; (b69ac <_GLOBAL__sub_I_ruid+0x45c>)
   b672a:	f004 fb20 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b672e:	49a0      	ldr	r1, [pc, #640]	; (b69b0 <_GLOBAL__sub_I_ruid+0x460>)
   b6730:	48a0      	ldr	r0, [pc, #640]	; (b69b4 <_GLOBAL__sub_I_ruid+0x464>)
   b6732:	f004 fb1c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6736:	49a0      	ldr	r1, [pc, #640]	; (b69b8 <_GLOBAL__sub_I_ruid+0x468>)
   b6738:	48a0      	ldr	r0, [pc, #640]	; (b69bc <_GLOBAL__sub_I_ruid+0x46c>)
   b673a:	f004 fb18 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b673e:	49a0      	ldr	r1, [pc, #640]	; (b69c0 <_GLOBAL__sub_I_ruid+0x470>)
   b6740:	48a0      	ldr	r0, [pc, #640]	; (b69c4 <_GLOBAL__sub_I_ruid+0x474>)
   b6742:	f004 fb14 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6746:	49a0      	ldr	r1, [pc, #640]	; (b69c8 <_GLOBAL__sub_I_ruid+0x478>)
   b6748:	48a0      	ldr	r0, [pc, #640]	; (b69cc <_GLOBAL__sub_I_ruid+0x47c>)
   b674a:	f004 fb10 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b674e:	49a0      	ldr	r1, [pc, #640]	; (b69d0 <_GLOBAL__sub_I_ruid+0x480>)
   b6750:	48a0      	ldr	r0, [pc, #640]	; (b69d4 <_GLOBAL__sub_I_ruid+0x484>)
   b6752:	f004 fb0c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6756:	49a0      	ldr	r1, [pc, #640]	; (b69d8 <_GLOBAL__sub_I_ruid+0x488>)
   b6758:	48a0      	ldr	r0, [pc, #640]	; (b69dc <_GLOBAL__sub_I_ruid+0x48c>)
   b675a:	f004 fb08 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b675e:	49a0      	ldr	r1, [pc, #640]	; (b69e0 <_GLOBAL__sub_I_ruid+0x490>)
   b6760:	48a0      	ldr	r0, [pc, #640]	; (b69e4 <_GLOBAL__sub_I_ruid+0x494>)
   b6762:	f004 fb04 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6766:	49a0      	ldr	r1, [pc, #640]	; (b69e8 <_GLOBAL__sub_I_ruid+0x498>)
   b6768:	48a0      	ldr	r0, [pc, #640]	; (b69ec <_GLOBAL__sub_I_ruid+0x49c>)
   b676a:	f004 fb00 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b676e:	49a0      	ldr	r1, [pc, #640]	; (b69f0 <_GLOBAL__sub_I_ruid+0x4a0>)
   b6770:	48a0      	ldr	r0, [pc, #640]	; (b69f4 <_GLOBAL__sub_I_ruid+0x4a4>)
   b6772:	f004 fafc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6776:	49a0      	ldr	r1, [pc, #640]	; (b69f8 <_GLOBAL__sub_I_ruid+0x4a8>)
   b6778:	48a0      	ldr	r0, [pc, #640]	; (b69fc <_GLOBAL__sub_I_ruid+0x4ac>)
   b677a:	f004 faf8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b677e:	49a0      	ldr	r1, [pc, #640]	; (b6a00 <_GLOBAL__sub_I_ruid+0x4b0>)
   b6780:	48a0      	ldr	r0, [pc, #640]	; (b6a04 <_GLOBAL__sub_I_ruid+0x4b4>)
   b6782:	f004 faf4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6786:	49a0      	ldr	r1, [pc, #640]	; (b6a08 <_GLOBAL__sub_I_ruid+0x4b8>)
   b6788:	48a0      	ldr	r0, [pc, #640]	; (b6a0c <_GLOBAL__sub_I_ruid+0x4bc>)
   b678a:	f004 faf0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b678e:	49a0      	ldr	r1, [pc, #640]	; (b6a10 <_GLOBAL__sub_I_ruid+0x4c0>)
   b6790:	48a0      	ldr	r0, [pc, #640]	; (b6a14 <_GLOBAL__sub_I_ruid+0x4c4>)
   b6792:	f004 faec 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6796:	49a0      	ldr	r1, [pc, #640]	; (b6a18 <_GLOBAL__sub_I_ruid+0x4c8>)
   b6798:	48a0      	ldr	r0, [pc, #640]	; (b6a1c <_GLOBAL__sub_I_ruid+0x4cc>)
   b679a:	f004 fae8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b679e:	49a0      	ldr	r1, [pc, #640]	; (b6a20 <_GLOBAL__sub_I_ruid+0x4d0>)
   b67a0:	48a0      	ldr	r0, [pc, #640]	; (b6a24 <_GLOBAL__sub_I_ruid+0x4d4>)
   b67a2:	f004 fae4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67a6:	49a0      	ldr	r1, [pc, #640]	; (b6a28 <_GLOBAL__sub_I_ruid+0x4d8>)
   b67a8:	48a0      	ldr	r0, [pc, #640]	; (b6a2c <_GLOBAL__sub_I_ruid+0x4dc>)
   b67aa:	f004 fae0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67ae:	49a0      	ldr	r1, [pc, #640]	; (b6a30 <_GLOBAL__sub_I_ruid+0x4e0>)
   b67b0:	48a0      	ldr	r0, [pc, #640]	; (b6a34 <_GLOBAL__sub_I_ruid+0x4e4>)
   b67b2:	f004 fadc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67b6:	49a0      	ldr	r1, [pc, #640]	; (b6a38 <_GLOBAL__sub_I_ruid+0x4e8>)
   b67b8:	48a0      	ldr	r0, [pc, #640]	; (b6a3c <_GLOBAL__sub_I_ruid+0x4ec>)
   b67ba:	f004 fad8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67be:	49a0      	ldr	r1, [pc, #640]	; (b6a40 <_GLOBAL__sub_I_ruid+0x4f0>)
   b67c0:	48a0      	ldr	r0, [pc, #640]	; (b6a44 <_GLOBAL__sub_I_ruid+0x4f4>)
   b67c2:	f004 fad4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67c6:	49a0      	ldr	r1, [pc, #640]	; (b6a48 <_GLOBAL__sub_I_ruid+0x4f8>)
   b67c8:	48a0      	ldr	r0, [pc, #640]	; (b6a4c <_GLOBAL__sub_I_ruid+0x4fc>)
   b67ca:	f004 fad0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67ce:	49a0      	ldr	r1, [pc, #640]	; (b6a50 <_GLOBAL__sub_I_ruid+0x500>)
   b67d0:	48a0      	ldr	r0, [pc, #640]	; (b6a54 <_GLOBAL__sub_I_ruid+0x504>)
   b67d2:	f004 facc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67d6:	49a0      	ldr	r1, [pc, #640]	; (b6a58 <_GLOBAL__sub_I_ruid+0x508>)
   b67d8:	48a0      	ldr	r0, [pc, #640]	; (b6a5c <_GLOBAL__sub_I_ruid+0x50c>)
   b67da:	f004 fac8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67de:	49a0      	ldr	r1, [pc, #640]	; (b6a60 <_GLOBAL__sub_I_ruid+0x510>)
   b67e0:	48a0      	ldr	r0, [pc, #640]	; (b6a64 <_GLOBAL__sub_I_ruid+0x514>)
   b67e2:	f004 fac4 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67e6:	49a0      	ldr	r1, [pc, #640]	; (b6a68 <_GLOBAL__sub_I_ruid+0x518>)
   b67e8:	48a0      	ldr	r0, [pc, #640]	; (b6a6c <_GLOBAL__sub_I_ruid+0x51c>)
   b67ea:	f004 fac0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67ee:	49a0      	ldr	r1, [pc, #640]	; (b6a70 <_GLOBAL__sub_I_ruid+0x520>)
   b67f0:	48a0      	ldr	r0, [pc, #640]	; (b6a74 <_GLOBAL__sub_I_ruid+0x524>)
   b67f2:	f004 fabc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67f6:	49a0      	ldr	r1, [pc, #640]	; (b6a78 <_GLOBAL__sub_I_ruid+0x528>)
   b67f8:	48a0      	ldr	r0, [pc, #640]	; (b6a7c <_GLOBAL__sub_I_ruid+0x52c>)
   b67fa:	f004 fab8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b67fe:	49a0      	ldr	r1, [pc, #640]	; (b6a80 <_GLOBAL__sub_I_ruid+0x530>)
   b6800:	e140      	b.n	b6a84 <_GLOBAL__sub_I_ruid+0x534>
   b6802:	bf00      	nop
   b6804:	2003d6e0 	.word	0x2003d6e0
   b6808:	2003dc88 	.word	0x2003dc88
   b680c:	000bc0e6 	.word	0x000bc0e6
   b6810:	2003cd14 	.word	0x2003cd14
   b6814:	2003d338 	.word	0x2003d338
   b6818:	2003c73c 	.word	0x2003c73c
   b681c:	000bc0f4 	.word	0x000bc0f4
   b6820:	2003d388 	.word	0x2003d388
   b6824:	2003d398 	.word	0x2003d398
   b6828:	000bc162 	.word	0x000bc162
   b682c:	2003e378 	.word	0x2003e378
   b6830:	000bc176 	.word	0x000bc176
   b6834:	2003e388 	.word	0x2003e388
   b6838:	000bc2a6 	.word	0x000bc2a6
   b683c:	2003e398 	.word	0x2003e398
   b6840:	000bc0f6 	.word	0x000bc0f6
   b6844:	2003e3a8 	.word	0x2003e3a8
   b6848:	000bc0fc 	.word	0x000bc0fc
   b684c:	2003e3b8 	.word	0x2003e3b8
   b6850:	000bc103 	.word	0x000bc103
   b6854:	2003e3c8 	.word	0x2003e3c8
   b6858:	000bc10a 	.word	0x000bc10a
   b685c:	2003e3d8 	.word	0x2003e3d8
   b6860:	000bc112 	.word	0x000bc112
   b6864:	2003e3e8 	.word	0x2003e3e8
   b6868:	000bc11a 	.word	0x000bc11a
   b686c:	2003e3f8 	.word	0x2003e3f8
   b6870:	000bc122 	.word	0x000bc122
   b6874:	2003e408 	.word	0x2003e408
   b6878:	000bc12a 	.word	0x000bc12a
   b687c:	2003e418 	.word	0x2003e418
   b6880:	000bc132 	.word	0x000bc132
   b6884:	2003e428 	.word	0x2003e428
   b6888:	000bc13a 	.word	0x000bc13a
   b688c:	2003e438 	.word	0x2003e438
   b6890:	000bc142 	.word	0x000bc142
   b6894:	2003e448 	.word	0x2003e448
   b6898:	2003e458 	.word	0x2003e458
   b689c:	2003e468 	.word	0x2003e468
   b68a0:	000bc14a 	.word	0x000bc14a
   b68a4:	2003e1b8 	.word	0x2003e1b8
   b68a8:	000bc154 	.word	0x000bc154
   b68ac:	2003e1c8 	.word	0x2003e1c8
   b68b0:	000bc15e 	.word	0x000bc15e
   b68b4:	2003e1d8 	.word	0x2003e1d8
   b68b8:	000bc168 	.word	0x000bc168
   b68bc:	2003e1e8 	.word	0x2003e1e8
   b68c0:	000bc172 	.word	0x000bc172
   b68c4:	2003e1f8 	.word	0x2003e1f8
   b68c8:	000bc17c 	.word	0x000bc17c
   b68cc:	2003e208 	.word	0x2003e208
   b68d0:	000bc186 	.word	0x000bc186
   b68d4:	2003e218 	.word	0x2003e218
   b68d8:	000bc190 	.word	0x000bc190
   b68dc:	2003e228 	.word	0x2003e228
   b68e0:	000bc19a 	.word	0x000bc19a
   b68e4:	2003e238 	.word	0x2003e238
   b68e8:	000bc1a4 	.word	0x000bc1a4
   b68ec:	2003e248 	.word	0x2003e248
   b68f0:	000bc1ae 	.word	0x000bc1ae
   b68f4:	2003e258 	.word	0x2003e258
   b68f8:	000bc1b8 	.word	0x000bc1b8
   b68fc:	2003e268 	.word	0x2003e268
   b6900:	000bc1c2 	.word	0x000bc1c2
   b6904:	2003e278 	.word	0x2003e278
   b6908:	000bc1cc 	.word	0x000bc1cc
   b690c:	2003e288 	.word	0x2003e288
   b6910:	000bc1d6 	.word	0x000bc1d6
   b6914:	2003e298 	.word	0x2003e298
   b6918:	000bc1e0 	.word	0x000bc1e0
   b691c:	2003e2a8 	.word	0x2003e2a8
   b6920:	000bc1ea 	.word	0x000bc1ea
   b6924:	2003e2b8 	.word	0x2003e2b8
   b6928:	000bc1f4 	.word	0x000bc1f4
   b692c:	2003e2c8 	.word	0x2003e2c8
   b6930:	000bc1fe 	.word	0x000bc1fe
   b6934:	2003e2d8 	.word	0x2003e2d8
   b6938:	000bc208 	.word	0x000bc208
   b693c:	2003e2e8 	.word	0x2003e2e8
   b6940:	000bc212 	.word	0x000bc212
   b6944:	2003e2f8 	.word	0x2003e2f8
   b6948:	000bc21c 	.word	0x000bc21c
   b694c:	2003e308 	.word	0x2003e308
   b6950:	000bc226 	.word	0x000bc226
   b6954:	2003e318 	.word	0x2003e318
   b6958:	000bc12e 	.word	0x000bc12e
   b695c:	2003e328 	.word	0x2003e328
   b6960:	000bc230 	.word	0x000bc230
   b6964:	2003e338 	.word	0x2003e338
   b6968:	000bc236 	.word	0x000bc236
   b696c:	2003e348 	.word	0x2003e348
   b6970:	000bc13e 	.word	0x000bc13e
   b6974:	2003e358 	.word	0x2003e358
   b6978:	000bc146 	.word	0x000bc146
   b697c:	2003e368 	.word	0x2003e368
   b6980:	000bc23c 	.word	0x000bc23c
   b6984:	2003e478 	.word	0x2003e478
   b6988:	000bc244 	.word	0x000bc244
   b698c:	2003e488 	.word	0x2003e488
   b6990:	000bc24c 	.word	0x000bc24c
   b6994:	2003e498 	.word	0x2003e498
   b6998:	000bc254 	.word	0x000bc254
   b699c:	2003e4a8 	.word	0x2003e4a8
   b69a0:	000bc25c 	.word	0x000bc25c
   b69a4:	2003e4b8 	.word	0x2003e4b8
   b69a8:	000bc264 	.word	0x000bc264
   b69ac:	2003e4c8 	.word	0x2003e4c8
   b69b0:	000bc26c 	.word	0x000bc26c
   b69b4:	2003e4d8 	.word	0x2003e4d8
   b69b8:	000bc274 	.word	0x000bc274
   b69bc:	2003e4e8 	.word	0x2003e4e8
   b69c0:	000bc27c 	.word	0x000bc27c
   b69c4:	2003e4f8 	.word	0x2003e4f8
   b69c8:	000bc284 	.word	0x000bc284
   b69cc:	2003e508 	.word	0x2003e508
   b69d0:	000bc28c 	.word	0x000bc28c
   b69d4:	2003e518 	.word	0x2003e518
   b69d8:	000bc294 	.word	0x000bc294
   b69dc:	2003e528 	.word	0x2003e528
   b69e0:	000bc29c 	.word	0x000bc29c
   b69e4:	2003e538 	.word	0x2003e538
   b69e8:	000bc2a4 	.word	0x000bc2a4
   b69ec:	2003e548 	.word	0x2003e548
   b69f0:	000bc2ac 	.word	0x000bc2ac
   b69f4:	2003e558 	.word	0x2003e558
   b69f8:	000bc2b4 	.word	0x000bc2b4
   b69fc:	2003e568 	.word	0x2003e568
   b6a00:	000bc2bc 	.word	0x000bc2bc
   b6a04:	2003e578 	.word	0x2003e578
   b6a08:	000bc2c4 	.word	0x000bc2c4
   b6a0c:	2003e588 	.word	0x2003e588
   b6a10:	000bc2cc 	.word	0x000bc2cc
   b6a14:	2003e598 	.word	0x2003e598
   b6a18:	000bc2d4 	.word	0x000bc2d4
   b6a1c:	2003e5a8 	.word	0x2003e5a8
   b6a20:	000bc2dc 	.word	0x000bc2dc
   b6a24:	2003e5b8 	.word	0x2003e5b8
   b6a28:	000bc2e4 	.word	0x000bc2e4
   b6a2c:	2003e5c8 	.word	0x2003e5c8
   b6a30:	000bc2ec 	.word	0x000bc2ec
   b6a34:	2003e5d8 	.word	0x2003e5d8
   b6a38:	000bc2f4 	.word	0x000bc2f4
   b6a3c:	2003e5e8 	.word	0x2003e5e8
   b6a40:	000bc2fc 	.word	0x000bc2fc
   b6a44:	2003e5f8 	.word	0x2003e5f8
   b6a48:	000bc302 	.word	0x000bc302
   b6a4c:	2003e608 	.word	0x2003e608
   b6a50:	000bc308 	.word	0x000bc308
   b6a54:	2003e618 	.word	0x2003e618
   b6a58:	000bc30e 	.word	0x000bc30e
   b6a5c:	2003e628 	.word	0x2003e628
   b6a60:	000bc314 	.word	0x000bc314
   b6a64:	2003e638 	.word	0x2003e638
   b6a68:	000bc31a 	.word	0x000bc31a
   b6a6c:	2003e648 	.word	0x2003e648
   b6a70:	000bc320 	.word	0x000bc320
   b6a74:	2003e658 	.word	0x2003e658
   b6a78:	000bc326 	.word	0x000bc326
   b6a7c:	2003e668 	.word	0x2003e668
   b6a80:	000bc32c 	.word	0x000bc32c
   b6a84:	4831      	ldr	r0, [pc, #196]	; (b6b4c <_GLOBAL__sub_I_ruid+0x5fc>)
   b6a86:	f004 f972 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6a8a:	4931      	ldr	r1, [pc, #196]	; (b6b50 <_GLOBAL__sub_I_ruid+0x600>)
   b6a8c:	4831      	ldr	r0, [pc, #196]	; (b6b54 <_GLOBAL__sub_I_ruid+0x604>)
   b6a8e:	f004 f96e 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6a92:	4931      	ldr	r1, [pc, #196]	; (b6b58 <_GLOBAL__sub_I_ruid+0x608>)
   b6a94:	4831      	ldr	r0, [pc, #196]	; (b6b5c <_GLOBAL__sub_I_ruid+0x60c>)
   b6a96:	f004 f96a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b6a9a:	4931      	ldr	r1, [pc, #196]	; (b6b60 <_GLOBAL__sub_I_ruid+0x610>)
   b6a9c:	4831      	ldr	r0, [pc, #196]	; (b6b64 <_GLOBAL__sub_I_ruid+0x614>)
   b6a9e:	f004 f966 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6aa2:	4931      	ldr	r1, [pc, #196]	; (b6b68 <_GLOBAL__sub_I_ruid+0x618>)
   b6aa4:	4831      	ldr	r0, [pc, #196]	; (b6b6c <_GLOBAL__sub_I_ruid+0x61c>)
   b6aa6:	f004 f962 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6aaa:	4931      	ldr	r1, [pc, #196]	; (b6b70 <_GLOBAL__sub_I_ruid+0x620>)
   b6aac:	4831      	ldr	r0, [pc, #196]	; (b6b74 <_GLOBAL__sub_I_ruid+0x624>)
   b6aae:	f004 f95e 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ab2:	4931      	ldr	r1, [pc, #196]	; (b6b78 <_GLOBAL__sub_I_ruid+0x628>)
   b6ab4:	4831      	ldr	r0, [pc, #196]	; (b6b7c <_GLOBAL__sub_I_ruid+0x62c>)
   b6ab6:	f004 f95a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6aba:	4931      	ldr	r1, [pc, #196]	; (b6b80 <_GLOBAL__sub_I_ruid+0x630>)
   b6abc:	4831      	ldr	r0, [pc, #196]	; (b6b84 <_GLOBAL__sub_I_ruid+0x634>)
   b6abe:	f004 f956 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ac2:	4931      	ldr	r1, [pc, #196]	; (b6b88 <_GLOBAL__sub_I_ruid+0x638>)
   b6ac4:	4831      	ldr	r0, [pc, #196]	; (b6b8c <_GLOBAL__sub_I_ruid+0x63c>)
   b6ac6:	f004 f952 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6aca:	4931      	ldr	r1, [pc, #196]	; (b6b90 <_GLOBAL__sub_I_ruid+0x640>)
   b6acc:	4831      	ldr	r0, [pc, #196]	; (b6b94 <_GLOBAL__sub_I_ruid+0x644>)
   b6ace:	f004 f94e 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ad2:	4921      	ldr	r1, [pc, #132]	; (b6b58 <_GLOBAL__sub_I_ruid+0x608>)
   b6ad4:	4830      	ldr	r0, [pc, #192]	; (b6b98 <_GLOBAL__sub_I_ruid+0x648>)
   b6ad6:	f004 f94a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b6ada:	4930      	ldr	r1, [pc, #192]	; (b6b9c <_GLOBAL__sub_I_ruid+0x64c>)
   b6adc:	4830      	ldr	r0, [pc, #192]	; (b6ba0 <_GLOBAL__sub_I_ruid+0x650>)
   b6ade:	f004 f946 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ae2:	4930      	ldr	r1, [pc, #192]	; (b6ba4 <_GLOBAL__sub_I_ruid+0x654>)
   b6ae4:	4830      	ldr	r0, [pc, #192]	; (b6ba8 <_GLOBAL__sub_I_ruid+0x658>)
   b6ae6:	f004 f942 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6aea:	4930      	ldr	r1, [pc, #192]	; (b6bac <_GLOBAL__sub_I_ruid+0x65c>)
   b6aec:	4830      	ldr	r0, [pc, #192]	; (b6bb0 <_GLOBAL__sub_I_ruid+0x660>)
   b6aee:	f004 f93e 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6af2:	4930      	ldr	r1, [pc, #192]	; (b6bb4 <_GLOBAL__sub_I_ruid+0x664>)
   b6af4:	4830      	ldr	r0, [pc, #192]	; (b6bb8 <_GLOBAL__sub_I_ruid+0x668>)
   b6af6:	f004 f93a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6afa:	4930      	ldr	r1, [pc, #192]	; (b6bbc <_GLOBAL__sub_I_ruid+0x66c>)
   b6afc:	4830      	ldr	r0, [pc, #192]	; (b6bc0 <_GLOBAL__sub_I_ruid+0x670>)
   b6afe:	f004 f936 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6b02:	1928      	adds	r0, r5, r4
   b6b04:	4631      	mov	r1, r6
   b6b06:	3410      	adds	r4, #16
   b6b08:	f004 f931 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6b0c:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
   b6b10:	d1f7      	bne.n	b6b02 <_GLOBAL__sub_I_ruid+0x5b2>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6b12:	482c      	ldr	r0, [pc, #176]	; (b6bc4 <_GLOBAL__sub_I_ruid+0x674>)
String secuencia[30];
   b6b14:	4d2c      	ldr	r5, [pc, #176]	; (b6bc8 <_GLOBAL__sub_I_ruid+0x678>)
   b6b16:	4e10      	ldr	r6, [pc, #64]	; (b6b58 <_GLOBAL__sub_I_ruid+0x608>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6b18:	2208      	movs	r2, #8
   b6b1a:	2110      	movs	r1, #16
   b6b1c:	f002 fa65 	bl	b8fea <_ZN7MFRC522C1Ehh>
   b6b20:	2400      	movs	r4, #0
String secuencia[30];
   b6b22:	1928      	adds	r0, r5, r4
   b6b24:	4631      	mov	r1, r6
   b6b26:	3410      	adds	r4, #16
   b6b28:	f004 f921 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6b2c:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b6b30:	d1f7      	bne.n	b6b22 <_GLOBAL__sub_I_ruid+0x5d2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6b32:	4b26      	ldr	r3, [pc, #152]	; (b6bcc <_GLOBAL__sub_I_ruid+0x67c>)
   b6b34:	2200      	movs	r2, #0
   b6b36:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6b3a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6b3e:	609a      	str	r2, [r3, #8]
   b6b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6b44:	2002      	movs	r0, #2
   b6b46:	f003 bea5 	b.w	ba894 <set_system_mode>
   b6b4a:	bf00      	nop
   b6b4c:	2003e678 	.word	0x2003e678
   b6b50:	000bc332 	.word	0x000bc332
   b6b54:	2003e688 	.word	0x2003e688
   b6b58:	000bc0e6 	.word	0x000bc0e6
   b6b5c:	2003e698 	.word	0x2003e698
   b6b60:	000bc338 	.word	0x000bc338
   b6b64:	2003e138 	.word	0x2003e138
   b6b68:	000bc33e 	.word	0x000bc33e
   b6b6c:	2003e148 	.word	0x2003e148
   b6b70:	000bc344 	.word	0x000bc344
   b6b74:	2003e158 	.word	0x2003e158
   b6b78:	000bc34a 	.word	0x000bc34a
   b6b7c:	2003e168 	.word	0x2003e168
   b6b80:	000bc350 	.word	0x000bc350
   b6b84:	2003e178 	.word	0x2003e178
   b6b88:	000bc356 	.word	0x000bc356
   b6b8c:	2003e188 	.word	0x2003e188
   b6b90:	000bc35c 	.word	0x000bc35c
   b6b94:	2003e198 	.word	0x2003e198
   b6b98:	2003e1a8 	.word	0x2003e1a8
   b6b9c:	000bc362 	.word	0x000bc362
   b6ba0:	2003dc38 	.word	0x2003dc38
   b6ba4:	000bc36d 	.word	0x000bc36d
   b6ba8:	2003dc48 	.word	0x2003dc48
   b6bac:	000bc377 	.word	0x000bc377
   b6bb0:	2003dc58 	.word	0x2003dc58
   b6bb4:	000bc381 	.word	0x000bc381
   b6bb8:	2003dc68 	.word	0x2003dc68
   b6bbc:	000bc38c 	.word	0x000bc38c
   b6bc0:	2003dc78 	.word	0x2003dc78
   b6bc4:	2003d6e8 	.word	0x2003d6e8
   b6bc8:	2003da4c 	.word	0x2003da4c
   b6bcc:	2003c72c 	.word	0x2003c72c

000b6bd0 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b6bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b6bd4:	4f99      	ldr	r7, [pc, #612]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
void showBitmap(int id1, int id2, String msg) {
   b6bd6:	b088      	sub	sp, #32
   b6bd8:	4606      	mov	r6, r0
   display.clearDisplay();
   b6bda:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b6bdc:	460d      	mov	r5, r1
   b6bde:	4614      	mov	r4, r2
   display.clearDisplay();
   b6be0:	f003 f8c2 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6be4:	2300      	movs	r3, #0
   b6be6:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b6be8:	4b95      	ldr	r3, [pc, #596]	; (b6e40 <_Z10showBitmapii6String+0x270>)
   b6bea:	2201      	movs	r2, #1
   b6bec:	701a      	strb	r2, [r3, #0]
   b6bee:	f003 fcf9 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b6bf2:	4b94      	ldr	r3, [pc, #592]	; (b6e44 <_Z10showBitmapii6String+0x274>)
   b6bf4:	6018      	str	r0, [r3, #0]
   switch (id1)
   b6bf6:	2e03      	cmp	r6, #3
   b6bf8:	d816      	bhi.n	b6c28 <_Z10showBitmapii6String+0x58>
   b6bfa:	e8df f016 	tbh	[pc, r6, lsl #1]
   b6bfe:	0004      	.short	0x0004
   b6c00:	00f0002d 	.word	0x00f0002d
   b6c04:	0116      	.short	0x0116
      switch (id2)
   b6c06:	2d03      	cmp	r5, #3
   b6c08:	d80e      	bhi.n	b6c28 <_Z10showBitmapii6String+0x58>
   b6c0a:	e8df f005 	tbb	[pc, r5]
   b6c0e:	0702      	.short	0x0702
   b6c10:	0b09      	.short	0x0b09
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b6c12:	498d      	ldr	r1, [pc, #564]	; (b6e48 <_Z10showBitmapii6String+0x278>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6c14:	488d      	ldr	r0, [pc, #564]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6c16:	f004 ff8f 	bl	bbb38 <strcpy>
         break;
   b6c1a:	e00e      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b6c1c:	498c      	ldr	r1, [pc, #560]	; (b6e50 <_Z10showBitmapii6String+0x280>)
   b6c1e:	e7f9      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b6c20:	498c      	ldr	r1, [pc, #560]	; (b6e54 <_Z10showBitmapii6String+0x284>)
   b6c22:	e7f7      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO EXPLORA");
   b6c24:	498c      	ldr	r1, [pc, #560]	; (b6e58 <_Z10showBitmapii6String+0x288>)
   b6c26:	e7f5      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b6c28:	498c      	ldr	r1, [pc, #560]	; (b6e5c <_Z10showBitmapii6String+0x28c>)
   b6c2a:	4888      	ldr	r0, [pc, #544]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6c2c:	f004 ff84 	bl	bbb38 <strcpy>
         Serial.println("Bitmap not available.");
   b6c30:	f004 fbe0 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6c34:	4989      	ldr	r1, [pc, #548]	; (b6e5c <_Z10showBitmapii6String+0x28c>)
   b6c36:	f004 f98e 	bl	baf56 <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b6c3a:	f004 fbdb 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6c3e:	4983      	ldr	r1, [pc, #524]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6c40:	f004 f989 	bl	baf56 <_ZN5Print7printlnEPKc>
   display.print(buf);
   b6c44:	4981      	ldr	r1, [pc, #516]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6c46:	487d      	ldr	r0, [pc, #500]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6c48:	f004 f972 	bl	baf30 <_ZN5Print5printEPKc>
   display.display();
   b6c4c:	487b      	ldr	r0, [pc, #492]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
}
   b6c4e:	b008      	add	sp, #32
   b6c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b6c54:	f003 baf0 	b.w	ba238 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b6c58:	2d06      	cmp	r5, #6
   b6c5a:	d8e5      	bhi.n	b6c28 <_Z10showBitmapii6String+0x58>
   b6c5c:	e8df f005 	tbb	[pc, r5]
   b6c60:	6c513704 	.word	0x6c513704
   b6c64:	b090      	.short	0xb090
   b6c66:	bd          	.byte	0xbd
   b6c67:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b6c68:	4621      	mov	r1, r4
   b6c6a:	a804      	add	r0, sp, #16
   b6c6c:	f004 f8bf 	bl	badee <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6c70:	497b      	ldr	r1, [pc, #492]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6c72:	a804      	add	r0, sp, #16
   b6c74:	f004 f916 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b6c78:	2140      	movs	r1, #64	; 0x40
   b6c7a:	6802      	ldr	r2, [r0, #0]
   b6c7c:	4873      	ldr	r0, [pc, #460]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6c7e:	f003 feb5 	bl	ba9ec <snprintf>
class StringSumHelper : public String
   b6c82:	a804      	add	r0, sp, #16
   b6c84:	f004 f828 	bl	bacd8 <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b6c88:	2414      	movs	r4, #20
   b6c8a:	2501      	movs	r5, #1
   b6c8c:	2632      	movs	r6, #50	; 0x32
   b6c8e:	2228      	movs	r2, #40	; 0x28
   b6c90:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b6c94:	4611      	mov	r1, r2
   b6c96:	4869      	ldr	r0, [pc, #420]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6c98:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b6c9a:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b6c9c:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6ca0:	e9cd 4600 	strd	r4, r6, [sp]
   b6ca4:	f001 fe6e 	bl	b8984 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b6ca8:	4623      	mov	r3, r4
   b6caa:	4622      	mov	r2, r4
   b6cac:	4631      	mov	r1, r6
   b6cae:	4863      	ldr	r0, [pc, #396]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6cb0:	9501      	str	r5, [sp, #4]
   b6cb2:	9700      	str	r7, [sp, #0]
   b6cb4:	f001 fcc5 	bl	b8642 <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b6cb8:	2146      	movs	r1, #70	; 0x46
   b6cba:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6cbe:	e9cd 7100 	strd	r7, r1, [sp]
   b6cc2:	2350      	movs	r3, #80	; 0x50
   b6cc4:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6cc6:	485d      	ldr	r0, [pc, #372]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6cc8:	f001 fe5c 	bl	b8984 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b6ccc:	e7b5      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6cce:	4621      	mov	r1, r4
   b6cd0:	a804      	add	r0, sp, #16
   b6cd2:	f004 f88c 	bl	badee <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6cd6:	4962      	ldr	r1, [pc, #392]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6cd8:	a804      	add	r0, sp, #16
   b6cda:	f004 f8e3 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b6cde:	2140      	movs	r1, #64	; 0x40
   b6ce0:	6802      	ldr	r2, [r0, #0]
   b6ce2:	485a      	ldr	r0, [pc, #360]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6ce4:	f003 fe82 	bl	ba9ec <snprintf>
class StringSumHelper : public String
   b6ce8:	a804      	add	r0, sp, #16
   b6cea:	f003 fff5 	bl	bacd8 <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b6cee:	2328      	movs	r3, #40	; 0x28
   b6cf0:	2001      	movs	r0, #1
   b6cf2:	e9cd 3000 	strd	r3, r0, [sp]
   b6cf6:	2214      	movs	r2, #20
   b6cf8:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b6cfa:	4850      	ldr	r0, [pc, #320]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6cfc:	f001 fca1 	bl	b8642 <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b6d00:	e79b      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6d02:	4621      	mov	r1, r4
   b6d04:	a804      	add	r0, sp, #16
   b6d06:	f004 f872 	bl	badee <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d0a:	4955      	ldr	r1, [pc, #340]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6d0c:	a804      	add	r0, sp, #16
   b6d0e:	f004 f8c9 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b6d12:	2140      	movs	r1, #64	; 0x40
   b6d14:	6802      	ldr	r2, [r0, #0]
   b6d16:	484d      	ldr	r0, [pc, #308]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6d18:	f003 fe68 	bl	ba9ec <snprintf>
class StringSumHelper : public String
   b6d1c:	a804      	add	r0, sp, #16
   b6d1e:	f003 ffdb 	bl	bacd8 <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6d22:	2364      	movs	r3, #100	; 0x64
   b6d24:	225a      	movs	r2, #90	; 0x5a
   b6d26:	2101      	movs	r1, #1
   b6d28:	e9cd 3200 	strd	r3, r2, [sp]
   b6d2c:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b6d30:	2214      	movs	r2, #20
   b6d32:	231e      	movs	r3, #30
   b6d34:	213c      	movs	r1, #60	; 0x3c
   b6d36:	e7c6      	b.n	b6cc6 <_Z10showBitmapii6String+0xf6>
	StringSumHelper(const String &s) : String(s) {}
   b6d38:	4621      	mov	r1, r4
   b6d3a:	a804      	add	r0, sp, #16
   b6d3c:	f004 f857 	bl	badee <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d40:	4947      	ldr	r1, [pc, #284]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6d42:	a804      	add	r0, sp, #16
   b6d44:	f004 f8ae 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b6d48:	2140      	movs	r1, #64	; 0x40
   b6d4a:	6802      	ldr	r2, [r0, #0]
   b6d4c:	483f      	ldr	r0, [pc, #252]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6d4e:	f003 fe4d 	bl	ba9ec <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b6d52:	2428      	movs	r4, #40	; 0x28
   b6d54:	2601      	movs	r6, #1
   b6d56:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b6d58:	a804      	add	r0, sp, #16
   b6d5a:	f003 ffbd 	bl	bacd8 <_ZN6StringD1Ev>
   b6d5e:	2334      	movs	r3, #52	; 0x34
   b6d60:	2214      	movs	r2, #20
   b6d62:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6d66:	e9cd 4500 	strd	r4, r5, [sp]
   b6d6a:	4834      	ldr	r0, [pc, #208]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6d6c:	213c      	movs	r1, #60	; 0x3c
   b6d6e:	f001 fe09 	bl	b8984 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b6d72:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6d76:	e9cd 4500 	strd	r4, r5, [sp]
   b6d7a:	2334      	movs	r3, #52	; 0x34
   b6d7c:	223c      	movs	r2, #60	; 0x3c
   b6d7e:	e7d9      	b.n	b6d34 <_Z10showBitmapii6String+0x164>
	StringSumHelper(const String &s) : String(s) {}
   b6d80:	4621      	mov	r1, r4
   b6d82:	a804      	add	r0, sp, #16
   b6d84:	f004 f833 	bl	badee <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d88:	4935      	ldr	r1, [pc, #212]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6d8a:	a804      	add	r0, sp, #16
   b6d8c:	f004 f88a 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b6d90:	2140      	movs	r1, #64	; 0x40
   b6d92:	6802      	ldr	r2, [r0, #0]
   b6d94:	482d      	ldr	r0, [pc, #180]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6d96:	f003 fe29 	bl	ba9ec <snprintf>
class StringSumHelper : public String
   b6d9a:	a804      	add	r0, sp, #16
   b6d9c:	f003 ff9c 	bl	bacd8 <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b6da0:	2301      	movs	r3, #1
   b6da2:	9300      	str	r3, [sp, #0]
   b6da4:	2232      	movs	r2, #50	; 0x32
   b6da6:	230f      	movs	r3, #15
   b6da8:	213c      	movs	r1, #60	; 0x3c
   b6daa:	4824      	ldr	r0, [pc, #144]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6dac:	f001 fdbf 	bl	b892e <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b6db0:	2328      	movs	r3, #40	; 0x28
   b6db2:	2200      	movs	r2, #0
   b6db4:	e9cd 3200 	strd	r3, r2, [sp]
   b6db8:	210a      	movs	r1, #10
   b6dba:	235a      	movs	r3, #90	; 0x5a
   b6dbc:	2232      	movs	r2, #50	; 0x32
   b6dbe:	e79c      	b.n	b6cfa <_Z10showBitmapii6String+0x12a>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b6dc0:	4927      	ldr	r1, [pc, #156]	; (b6e60 <_Z10showBitmapii6String+0x290>)
   b6dc2:	4822      	ldr	r0, [pc, #136]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6dc4:	f004 feb8 	bl	bbb38 <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b6dc8:	2301      	movs	r3, #1
   b6dca:	9300      	str	r3, [sp, #0]
   b6dcc:	481b      	ldr	r0, [pc, #108]	; (b6e3c <_Z10showBitmapii6String+0x26c>)
   b6dce:	230f      	movs	r3, #15
   b6dd0:	2228      	movs	r2, #40	; 0x28
   b6dd2:	213c      	movs	r1, #60	; 0x3c
   b6dd4:	f001 fdab 	bl	b892e <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b6dd8:	e72f      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b6dda:	4922      	ldr	r1, [pc, #136]	; (b6e64 <_Z10showBitmapii6String+0x294>)
   b6ddc:	e71a      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6dde:	2d06      	cmp	r5, #6
   b6de0:	f63f af22 	bhi.w	b6c28 <_Z10showBitmapii6String+0x58>
   b6de4:	e8df f005 	tbb	[pc, r5]
   b6de8:	0a080604 	.word	0x0a080604
   b6dec:	1d0c      	.short	0x1d0c
   b6dee:	1f          	.byte	0x1f
   b6def:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6df0:	491d      	ldr	r1, [pc, #116]	; (b6e68 <_Z10showBitmapii6String+0x298>)
   b6df2:	e70f      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b6df4:	491d      	ldr	r1, [pc, #116]	; (b6e6c <_Z10showBitmapii6String+0x29c>)
   b6df6:	e70d      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b6df8:	491d      	ldr	r1, [pc, #116]	; (b6e70 <_Z10showBitmapii6String+0x2a0>)
   b6dfa:	e70b      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b6dfc:	491d      	ldr	r1, [pc, #116]	; (b6e74 <_Z10showBitmapii6String+0x2a4>)
   b6dfe:	e709      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
	StringSumHelper(const char *p) : String(p) {}
   b6e00:	491d      	ldr	r1, [pc, #116]	; (b6e78 <_Z10showBitmapii6String+0x2a8>)
   b6e02:	a804      	add	r0, sp, #16
   b6e04:	f003 ffb3 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b6e08:	4621      	mov	r1, r4
   b6e0a:	a804      	add	r0, sp, #16
   b6e0c:	f004 f83e 	bl	bae8c <_ZplRK15StringSumHelperRK6String>
   b6e10:	2140      	movs	r1, #64	; 0x40
   b6e12:	6802      	ldr	r2, [r0, #0]
   b6e14:	480d      	ldr	r0, [pc, #52]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6e16:	f003 fde9 	bl	ba9ec <snprintf>
class StringSumHelper : public String
   b6e1a:	a804      	add	r0, sp, #16
   b6e1c:	f003 ff5c 	bl	bacd8 <_ZN6StringD1Ev>
         break;
   b6e20:	e70b      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b6e22:	4916      	ldr	r1, [pc, #88]	; (b6e7c <_Z10showBitmapii6String+0x2ac>)
   b6e24:	e6f6      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b6e26:	4916      	ldr	r1, [pc, #88]	; (b6e80 <_Z10showBitmapii6String+0x2b0>)
   b6e28:	e6f4      	b.n	b6c14 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6e2a:	2d00      	cmp	r5, #0
   b6e2c:	f47f aefc 	bne.w	b6c28 <_Z10showBitmapii6String+0x58>
         snprintf(buf, sizeof(buf), msg);
   b6e30:	6822      	ldr	r2, [r4, #0]
   b6e32:	4806      	ldr	r0, [pc, #24]	; (b6e4c <_Z10showBitmapii6String+0x27c>)
   b6e34:	2140      	movs	r1, #64	; 0x40
   b6e36:	f003 fdd9 	bl	ba9ec <snprintf>
         break;
   b6e3a:	e6fe      	b.n	b6c3a <_Z10showBitmapii6String+0x6a>
   b6e3c:	2003d338 	.word	0x2003d338
   b6e40:	2003c739 	.word	0x2003c739
   b6e44:	2003dc2c 	.word	0x2003dc2c
   b6e48:	000bc397 	.word	0x000bc397
   b6e4c:	2003d2ed 	.word	0x2003d2ed
   b6e50:	000bc3a3 	.word	0x000bc3a3
   b6e54:	000bc3b1 	.word	0x000bc3b1
   b6e58:	000bc3bd 	.word	0x000bc3bd
   b6e5c:	000bc3ca 	.word	0x000bc3ca
   b6e60:	000bc3e0 	.word	0x000bc3e0
   b6e64:	000bc3f1 	.word	0x000bc3f1
   b6e68:	000bc3fe 	.word	0x000bc3fe
   b6e6c:	000bc41e 	.word	0x000bc41e
   b6e70:	000bc43e 	.word	0x000bc43e
   b6e74:	000bc459 	.word	0x000bc459
   b6e78:	000bc46e 	.word	0x000bc46e
   b6e7c:	000bc481 	.word	0x000bc481
   b6e80:	000bc49f 	.word	0x000bc49f

000b6e84 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b6e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b6e86:	4b24      	ldr	r3, [pc, #144]	; (b6f18 <_Z8showPortii+0x94>)
   b6e88:	689b      	ldr	r3, [r3, #8]
   b6e8a:	bb4b      	cbnz	r3, b6ee0 <_Z8showPortii+0x5c>
      switch (puerto)
   b6e8c:	2902      	cmp	r1, #2
   b6e8e:	d011      	beq.n	b6eb4 <_Z8showPortii+0x30>
   b6e90:	2904      	cmp	r1, #4
   b6e92:	d016      	beq.n	b6ec2 <_Z8showPortii+0x3e>
   b6e94:	b9e1      	cbnz	r1, b6ed0 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b6e96:	4921      	ldr	r1, [pc, #132]	; (b6f1c <_Z8showPortii+0x98>)
   b6e98:	4668      	mov	r0, sp
   b6e9a:	f003 ff68 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6e9e:	466a      	mov	r2, sp
   b6ea0:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b6ea2:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ea4:	f7ff fe94 	bl	b6bd0 <_Z10showBitmapii6String>
   b6ea8:	4668      	mov	r0, sp
   b6eaa:	f003 ff15 	bl	bacd8 <_ZN6StringD1Ev>
}
   b6eae:	b005      	add	sp, #20
   b6eb0:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b6eb4:	4919      	ldr	r1, [pc, #100]	; (b6f1c <_Z8showPortii+0x98>)
   b6eb6:	4668      	mov	r0, sp
   b6eb8:	f003 ff59 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ebc:	466a      	mov	r2, sp
   b6ebe:	2104      	movs	r1, #4
   b6ec0:	e7ef      	b.n	b6ea2 <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b6ec2:	4916      	ldr	r1, [pc, #88]	; (b6f1c <_Z8showPortii+0x98>)
   b6ec4:	4668      	mov	r0, sp
   b6ec6:	f003 ff52 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6eca:	466a      	mov	r2, sp
   b6ecc:	2105      	movs	r1, #5
   b6ece:	e7e8      	b.n	b6ea2 <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ed0:	4912      	ldr	r1, [pc, #72]	; (b6f1c <_Z8showPortii+0x98>)
   b6ed2:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ed4:	f003 ff4b 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ed8:	466a      	mov	r2, sp
   b6eda:	2103      	movs	r1, #3
   b6edc:	2002      	movs	r0, #2
   b6ede:	e7e1      	b.n	b6ea4 <_Z8showPortii+0x20>
      switch (puerto)
   b6ee0:	2904      	cmp	r1, #4
   b6ee2:	d00a      	beq.n	b6efa <_Z8showPortii+0x76>
   b6ee4:	2906      	cmp	r1, #6
   b6ee6:	d00f      	beq.n	b6f08 <_Z8showPortii+0x84>
   b6ee8:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6eea:	4668      	mov	r0, sp
   b6eec:	490b      	ldr	r1, [pc, #44]	; (b6f1c <_Z8showPortii+0x98>)
      switch (puerto)
   b6eee:	d1f1      	bne.n	b6ed4 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b6ef0:	f003 ff3d 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6ef4:	466a      	mov	r2, sp
   b6ef6:	2100      	movs	r1, #0
   b6ef8:	e7d3      	b.n	b6ea2 <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b6efa:	4908      	ldr	r1, [pc, #32]	; (b6f1c <_Z8showPortii+0x98>)
   b6efc:	4668      	mov	r0, sp
   b6efe:	f003 ff36 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6f02:	466a      	mov	r2, sp
   b6f04:	2101      	movs	r1, #1
   b6f06:	e7cc      	b.n	b6ea2 <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b6f08:	4904      	ldr	r1, [pc, #16]	; (b6f1c <_Z8showPortii+0x98>)
   b6f0a:	4668      	mov	r0, sp
   b6f0c:	f003 ff2f 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6f10:	466a      	mov	r2, sp
   b6f12:	2102      	movs	r1, #2
   b6f14:	e7c5      	b.n	b6ea2 <_Z8showPortii+0x1e>
   b6f16:	bf00      	nop
   b6f18:	2003c690 	.word	0x2003c690
   b6f1c:	000bc0e6 	.word	0x000bc0e6

000b6f20 <_Z13borradoBLOQUEi>:
   switch (modo)
   b6f20:	2801      	cmp	r0, #1
{
   b6f22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b6f24:	d003      	beq.n	b6f2e <_Z13borradoBLOQUEi+0xe>
   b6f26:	2802      	cmp	r0, #2
   b6f28:	d047      	beq.n	b6fba <_Z13borradoBLOQUEi+0x9a>
}
   b6f2a:	b004      	add	sp, #16
   b6f2c:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b6f2e:	4a3d      	ldr	r2, [pc, #244]	; (b7024 <_Z13borradoBLOQUEi+0x104>)
   b6f30:	6814      	ldr	r4, [r2, #0]
   b6f32:	b974      	cbnz	r4, b6f52 <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b6f34:	f7fd fd9e 	bl	b4a74 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b6f38:	493b      	ldr	r1, [pc, #236]	; (b7028 <_Z13borradoBLOQUEi+0x108>)
   b6f3a:	4668      	mov	r0, sp
   b6f3c:	f003 ff17 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6f40:	466a      	mov	r2, sp
   b6f42:	2100      	movs	r1, #0
   b6f44:	2003      	movs	r0, #3
   b6f46:	f7ff fe43 	bl	b6bd0 <_Z10showBitmapii6String>
   b6f4a:	4668      	mov	r0, sp
   b6f4c:	f003 fec4 	bl	bacd8 <_ZN6StringD1Ev>
   b6f50:	e7eb      	b.n	b6f2a <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b6f52:	2c01      	cmp	r4, #1
   b6f54:	d129      	bne.n	b6faa <_Z13borradoBLOQUEi+0x8a>
         IF_pasado = false;
   b6f56:	2300      	movs	r3, #0
         numBloque = 0;
   b6f58:	6013      	str	r3, [r2, #0]
         if2 = false; then2 = false; else2 = false;
   b6f5a:	4a34      	ldr	r2, [pc, #208]	; (b702c <_Z13borradoBLOQUEi+0x10c>)
         IF_pasado = false;
   b6f5c:	4934      	ldr	r1, [pc, #208]	; (b7030 <_Z13borradoBLOQUEi+0x110>)
         if2 = false; then2 = false; else2 = false;
   b6f5e:	7013      	strb	r3, [r2, #0]
   b6f60:	4a34      	ldr	r2, [pc, #208]	; (b7034 <_Z13borradoBLOQUEi+0x114>)
         IF_pasado = false;
   b6f62:	700b      	strb	r3, [r1, #0]
         if2 = false; then2 = false; else2 = false;
   b6f64:	7013      	strb	r3, [r2, #0]
   b6f66:	4a34      	ldr	r2, [pc, #208]	; (b7038 <_Z13borradoBLOQUEi+0x118>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f68:	4834      	ldr	r0, [pc, #208]	; (b703c <_Z13borradoBLOQUEi+0x11c>)
         if2 = false; then2 = false; else2 = false;
   b6f6a:	7013      	strb	r3, [r2, #0]
         bloques[1].numActuadores = 0;
   b6f6c:	4a34      	ldr	r2, [pc, #208]	; (b7040 <_Z13borradoBLOQUEi+0x120>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f6e:	6800      	ldr	r0, [r0, #0]
         bloques[1].numActuadores = 0;
   b6f70:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
         bloques[1].numSensores = 0;
   b6f74:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6f78:	4b32      	ldr	r3, [pc, #200]	; (b7044 <_Z13borradoBLOQUEi+0x124>)
         if (puertoAnalogico == -1){   
   b6f7a:	4a33      	ldr	r2, [pc, #204]	; (b7048 <_Z13borradoBLOQUEi+0x128>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6f7c:	701c      	strb	r4, [r3, #0]
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6f7e:	4b33      	ldr	r3, [pc, #204]	; (b704c <_Z13borradoBLOQUEi+0x12c>)
   b6f80:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6f82:	6813      	ldr	r3, [r2, #0]
   b6f84:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b6f86:	bf04      	itt	eq
   b6f88:	2303      	moveq	r3, #3
   b6f8a:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b6f8c:	4b30      	ldr	r3, [pc, #192]	; (b7050 <_Z13borradoBLOQUEi+0x130>)
   b6f8e:	6819      	ldr	r1, [r3, #0]
   b6f90:	3101      	adds	r1, #1
            puertoDigital=6;
   b6f92:	bf04      	itt	eq
   b6f94:	2106      	moveq	r1, #6
   b6f96:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f98:	6811      	ldr	r1, [r2, #0]
   b6f9a:	1a09      	subs	r1, r1, r0
   b6f9c:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b6f9e:	492d      	ldr	r1, [pc, #180]	; (b7054 <_Z13borradoBLOQUEi+0x134>)
   b6fa0:	681a      	ldr	r2, [r3, #0]
   b6fa2:	6809      	ldr	r1, [r1, #0]
   b6fa4:	1a52      	subs	r2, r2, r1
   b6fa6:	601a      	str	r2, [r3, #0]
   b6fa8:	e7c6      	b.n	b6f38 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b6faa:	f004 fa23 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b6fae:	492a      	ldr	r1, [pc, #168]	; (b7058 <_Z13borradoBLOQUEi+0x138>)
}
   b6fb0:	b004      	add	sp, #16
   b6fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b6fb6:	f003 bfce 	b.w	baf56 <_ZN5Print7printlnEPKc>
      if (bucle) {
   b6fba:	4e28      	ldr	r6, [pc, #160]	; (b705c <_Z13borradoBLOQUEi+0x13c>)
         posicion = posicion - (tam_bucle+1);
   b6fbc:	4a28      	ldr	r2, [pc, #160]	; (b7060 <_Z13borradoBLOQUEi+0x140>)
      if (bucle) {
   b6fbe:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6fc0:	6813      	ldr	r3, [r2, #0]
   b6fc2:	4d28      	ldr	r5, [pc, #160]	; (b7064 <_Z13borradoBLOQUEi+0x144>)
      if (bucle) {
   b6fc4:	b19c      	cbz	r4, b6fee <_Z13borradoBLOQUEi+0xce>
         posicion = posicion - (tam_bucle+1);
   b6fc6:	6829      	ldr	r1, [r5, #0]
   b6fc8:	3101      	adds	r1, #1
   b6fca:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6fcc:	4668      	mov	r0, sp
   b6fce:	4926      	ldr	r1, [pc, #152]	; (b7068 <_Z13borradoBLOQUEi+0x148>)
         posicion = posicion - (tam_bucle+1);
   b6fd0:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6fd2:	f003 fecc 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b6fd6:	466a      	mov	r2, sp
   b6fd8:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b6fda:	2003      	movs	r0, #3
   b6fdc:	f7ff fdf8 	bl	b6bd0 <_Z10showBitmapii6String>
   b6fe0:	4668      	mov	r0, sp
   b6fe2:	f003 fe79 	bl	bacd8 <_ZN6StringD1Ev>
      bucle = false;
   b6fe6:	2300      	movs	r3, #0
   b6fe8:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b6fea:	602b      	str	r3, [r5, #0]
}
   b6fec:	e79d      	b.n	b6f2a <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6fee:	481f      	ldr	r0, [pc, #124]	; (b706c <_Z13borradoBLOQUEi+0x14c>)
   b6ff0:	1e59      	subs	r1, r3, #1
   b6ff2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b6ff6:	3002      	adds	r0, #2
   b6ff8:	d10c      	bne.n	b7014 <_Z13borradoBLOQUEi+0xf4>
         posicion = posicion - (duraciones[posicion-1]+2);
   b6ffa:	481d      	ldr	r0, [pc, #116]	; (b7070 <_Z13borradoBLOQUEi+0x150>)
   b6ffc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b7000:	3102      	adds	r1, #2
   b7002:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b7004:	4918      	ldr	r1, [pc, #96]	; (b7068 <_Z13borradoBLOQUEi+0x148>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b7006:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b7008:	4668      	mov	r0, sp
   b700a:	f003 feb0 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b700e:	466a      	mov	r2, sp
   b7010:	4621      	mov	r1, r4
   b7012:	e7e2      	b.n	b6fda <_Z13borradoBLOQUEi+0xba>
         Serial.println("Nada que borrar.");
   b7014:	f004 f9ee 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7018:	4916      	ldr	r1, [pc, #88]	; (b7074 <_Z13borradoBLOQUEi+0x154>)
   b701a:	f003 ff9c 	bl	baf56 <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b701e:	4915      	ldr	r1, [pc, #84]	; (b7074 <_Z13borradoBLOQUEi+0x154>)
   b7020:	e7f2      	b.n	b7008 <_Z13borradoBLOQUEi+0xe8>
   b7022:	bf00      	nop
   b7024:	2003c688 	.word	0x2003c688
   b7028:	000bc4bf 	.word	0x000bc4bf
   b702c:	2003d6d5 	.word	0x2003d6d5
   b7030:	2003c729 	.word	0x2003c729
   b7034:	2003e6ad 	.word	0x2003e6ad
   b7038:	2003d6c9 	.word	0x2003d6c9
   b703c:	2003da34 	.word	0x2003da34
   b7040:	2003cd14 	.word	0x2003cd14
   b7044:	2003c738 	.word	0x2003c738
   b7048:	2003da30 	.word	0x2003da30
   b704c:	2003da18 	.word	0x2003da18
   b7050:	2003c68c 	.word	0x2003c68c
   b7054:	2003da38 	.word	0x2003da38
   b7058:	000bc4db 	.word	0x000bc4db
   b705c:	2003d2ec 	.word	0x2003d2ec
   b7060:	2003da28 	.word	0x2003da28
   b7064:	2003dc34 	.word	0x2003dc34
   b7068:	000bc4eb 	.word	0x000bc4eb
   b706c:	2003d6f8 	.word	0x2003d6f8
   b7070:	2003d3a8 	.word	0x2003d3a8
   b7074:	000bc505 	.word	0x000bc505

000b7078 <_Z10reproducirv>:
void reproducir() {
   b7078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b707c:	4b1e      	ldr	r3, [pc, #120]	; (b70f8 <_Z10reproducirv+0x80>)
   b707e:	781c      	ldrb	r4, [r3, #0]
   b7080:	bb34      	cbnz	r4, b70d0 <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b7082:	f8df a08c 	ldr.w	sl, [pc, #140]	; b7110 <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b7086:	4e1d      	ldr	r6, [pc, #116]	; (b70fc <_Z10reproducirv+0x84>)
   b7088:	4f1d      	ldr	r7, [pc, #116]	; (b7100 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b708a:	f8da 3000 	ldr.w	r3, [sl]
   b708e:	42a3      	cmp	r3, r4
   b7090:	dd2f      	ble.n	b70f2 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b7092:	f004 f9af 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7096:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b709a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b709e:	4919      	ldr	r1, [pc, #100]	; (b7104 <_Z10reproducirv+0x8c>)
   b70a0:	f7fd fd4d 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b70a4:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b70a8:	1c42      	adds	r2, r0, #1
   b70aa:	d105      	bne.n	b70b8 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b70ac:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b70b0:	46a1      	mov	r9, r4
            iteracion = 0;            
   b70b2:	2500      	movs	r5, #0
         i++;
   b70b4:	3401      	adds	r4, #1
      while ( i < posicion) {
   b70b6:	e7e8      	b.n	b708a <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b70b8:	1c83      	adds	r3, r0, #2
   b70ba:	d104      	bne.n	b70c6 <_Z10reproducirv+0x4e>
            iteracion++;
   b70bc:	3501      	adds	r5, #1
               i = inicio;
   b70be:	45a8      	cmp	r8, r5
   b70c0:	bfc8      	it	gt
   b70c2:	464c      	movgt	r4, r9
   b70c4:	e7f6      	b.n	b70b4 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b70c6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b70ca:	f7fe fc8d 	bl	b59e8 <_Z14reproducirNOTAii>
   b70ce:	e7f1      	b.n	b70b4 <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b70d0:	f004 f990 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b70d4:	490c      	ldr	r1, [pc, #48]	; (b7108 <_Z10reproducirv+0x90>)
   b70d6:	f003 ff3e 	bl	baf56 <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b70da:	490c      	ldr	r1, [pc, #48]	; (b710c <_Z10reproducirv+0x94>)
   b70dc:	4668      	mov	r0, sp
   b70de:	f003 fe46 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b70e2:	2002      	movs	r0, #2
   b70e4:	466a      	mov	r2, sp
   b70e6:	2104      	movs	r1, #4
   b70e8:	f7ff fd72 	bl	b6bd0 <_Z10showBitmapii6String>
   b70ec:	4668      	mov	r0, sp
   b70ee:	f003 fdf3 	bl	bacd8 <_ZN6StringD1Ev>
}
   b70f2:	b004      	add	sp, #16
   b70f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b70f8:	2003d2ec 	.word	0x2003d2ec
   b70fc:	2003d3a8 	.word	0x2003d3a8
   b7100:	2003d6f8 	.word	0x2003d6f8
   b7104:	000bc516 	.word	0x000bc516
   b7108:	000bc51e 	.word	0x000bc51e
   b710c:	000bc0e6 	.word	0x000bc0e6
   b7110:	2003da28 	.word	0x2003da28

000b7114 <_Z10cambioModoi>:
{
   b7114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b7116:	4604      	mov	r4, r0
   b7118:	b9e0      	cbnz	r0, b7154 <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b711a:	f004 f96b 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b711e:	4921      	ldr	r1, [pc, #132]	; (b71a4 <_Z10cambioModoi+0x90>)
   b7120:	f003 ff19 	bl	baf56 <_ZN5Print7printlnEPKc>
      MODE = 0;
   b7124:	4b20      	ldr	r3, [pc, #128]	; (b71a8 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b7126:	4921      	ldr	r1, [pc, #132]	; (b71ac <_Z10cambioModoi+0x98>)
      MODE = 0;
   b7128:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b712a:	4668      	mov	r0, sp
   b712c:	f003 fe1f 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7130:	466a      	mov	r2, sp
   b7132:	2100      	movs	r1, #0
   b7134:	2003      	movs	r0, #3
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b7136:	f7ff fd4b 	bl	b6bd0 <_Z10showBitmapii6String>
   b713a:	4668      	mov	r0, sp
   b713c:	f003 fdcc 	bl	bacd8 <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b7140:	f004 fc40 	bl	bb9c4 <_Z21__fetch_global_EEPROMv>
   b7144:	4918      	ldr	r1, [pc, #96]	; (b71a8 <_Z10cambioModoi+0x94>)
   b7146:	2201      	movs	r2, #1
   b7148:	2000      	movs	r0, #0
}
   b714a:	b004      	add	sp, #16
   b714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7150:	f003 ba60 	b.w	ba614 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b7154:	2801      	cmp	r0, #1
   b7156:	d108      	bne.n	b716a <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b7158:	f004 f94c 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b715c:	4914      	ldr	r1, [pc, #80]	; (b71b0 <_Z10cambioModoi+0x9c>)
   b715e:	f003 fefa 	bl	baf56 <_ZN5Print7printlnEPKc>
      MODE = 1;
   b7162:	4b11      	ldr	r3, [pc, #68]	; (b71a8 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b7164:	4913      	ldr	r1, [pc, #76]	; (b71b4 <_Z10cambioModoi+0xa0>)
      MODE = 1;
   b7166:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b7168:	e7df      	b.n	b712a <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b716a:	2802      	cmp	r0, #2
   b716c:	d108      	bne.n	b7180 <_Z10cambioModoi+0x6c>
      Serial.println("Modo MUSICA detectado");
   b716e:	f004 f941 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7172:	4911      	ldr	r1, [pc, #68]	; (b71b8 <_Z10cambioModoi+0xa4>)
   b7174:	f003 feef 	bl	baf56 <_ZN5Print7printlnEPKc>
      MODE = 2;
   b7178:	4b0b      	ldr	r3, [pc, #44]	; (b71a8 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b717a:	4910      	ldr	r1, [pc, #64]	; (b71bc <_Z10cambioModoi+0xa8>)
      MODE = 2;
   b717c:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b717e:	e7d4      	b.n	b712a <_Z10cambioModoi+0x16>
   } else if (modo == 3) {
   b7180:	2803      	cmp	r0, #3
   b7182:	d1dd      	bne.n	b7140 <_Z10cambioModoi+0x2c>
      Serial.println("Modo EXPLORA detectado");
   b7184:	f004 f936 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7188:	490d      	ldr	r1, [pc, #52]	; (b71c0 <_Z10cambioModoi+0xac>)
   b718a:	f003 fee4 	bl	baf56 <_ZN5Print7printlnEPKc>
      MODE = 3;
   b718e:	4b06      	ldr	r3, [pc, #24]	; (b71a8 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b7190:	490c      	ldr	r1, [pc, #48]	; (b71c4 <_Z10cambioModoi+0xb0>)
      MODE = 3;
   b7192:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b7194:	4668      	mov	r0, sp
   b7196:	f003 fdea 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b719a:	466a      	mov	r2, sp
   b719c:	2100      	movs	r1, #0
   b719e:	4620      	mov	r0, r4
   b71a0:	e7c9      	b.n	b7136 <_Z10cambioModoi+0x22>
   b71a2:	bf00      	nop
   b71a4:	000bc544 	.word	0x000bc544
   b71a8:	2003c72a 	.word	0x2003c72a
   b71ac:	000bc55a 	.word	0x000bc55a
   b71b0:	000bc573 	.word	0x000bc573
   b71b4:	000bc58b 	.word	0x000bc58b
   b71b8:	000bc5a6 	.word	0x000bc5a6
   b71bc:	000bc5bc 	.word	0x000bc5bc
   b71c0:	000bc5d5 	.word	0x000bc5d5
   b71c4:	000bc5ec 	.word	0x000bc5ec

000b71c8 <_Z18borra_POP_Avanzadov>:

   void borra_POP_Avanzado (){
   b71c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      numActuadoresBloque--;
   b71ca:	4c19      	ldr	r4, [pc, #100]	; (b7230 <_Z18borra_POP_Avanzadov+0x68>)
      bloque2[0].numActuadores--;
   b71cc:	4919      	ldr	r1, [pc, #100]	; (b7234 <_Z18borra_POP_Avanzadov+0x6c>)
      numActuadoresBloque--;
   b71ce:	6823      	ldr	r3, [r4, #0]
      bloque2[0].numActuadores--;
   b71d0:	f8d1 2144 	ldr.w	r2, [r1, #324]	; 0x144
      numActuadoresBloque--;
   b71d4:	3b01      	subs	r3, #1
      bloque2[0].numActuadores--;
   b71d6:	3a01      	subs	r2, #1
      if (numActuadoresBloque <= 0){
   b71d8:	2b00      	cmp	r3, #0
      numActuadoresBloque--;
   b71da:	6023      	str	r3, [r4, #0]
      bloque2[0].numActuadores--;
   b71dc:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
      if (numActuadoresBloque <= 0){
   b71e0:	dc19      	bgt.n	b7216 <_Z18borra_POP_Avanzadov+0x4e>
         if (numActuadoresBloque < 0){
   b71e2:	d00b      	beq.n	b71fc <_Z18borra_POP_Avanzadov+0x34>
            showBitmap(3,0,"Nada que borrar");
   b71e4:	4914      	ldr	r1, [pc, #80]	; (b7238 <_Z18borra_POP_Avanzadov+0x70>)
   b71e6:	4668      	mov	r0, sp
   b71e8:	f003 fdc1 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b71ec:	2003      	movs	r0, #3
   b71ee:	466a      	mov	r2, sp
   b71f0:	2100      	movs	r1, #0
   b71f2:	f7ff fced 	bl	b6bd0 <_Z10showBitmapii6String>
   b71f6:	4668      	mov	r0, sp
   b71f8:	f003 fd6e 	bl	bacd8 <_ZN6StringD1Ev>
         }
         numActuadoresBloque = 0;
         puertoAnalogico = 0;
   b71fc:	4a0f      	ldr	r2, [pc, #60]	; (b723c <_Z18borra_POP_Avanzadov+0x74>)
         numActuadoresBloque = 0;
   b71fe:	2300      	movs	r3, #0
         puertoAnalogico = 0;
   b7200:	6013      	str	r3, [r2, #0]
         puertoDigital = 3;
   b7202:	4a0f      	ldr	r2, [pc, #60]	; (b7240 <_Z18borra_POP_Avanzadov+0x78>)
         numActuadoresBloque = 0;
   b7204:	6023      	str	r3, [r4, #0]
         puertoDigital = 3;
   b7206:	2103      	movs	r1, #3
   b7208:	6011      	str	r1, [r2, #0]
         puertoAnalogico_bloque = 0;
   b720a:	4a0e      	ldr	r2, [pc, #56]	; (b7244 <_Z18borra_POP_Avanzadov+0x7c>)
   b720c:	6013      	str	r3, [r2, #0]
         puertoDigital_bloque = 0;
   b720e:	4a0e      	ldr	r2, [pc, #56]	; (b7248 <_Z18borra_POP_Avanzadov+0x80>)
   b7210:	6013      	str	r3, [r2, #0]
      } else {
      showBitmap(3,0,"Borrado del ultimo realizado");}
   }
   b7212:	b004      	add	sp, #16
   b7214:	bd10      	pop	{r4, pc}
      showBitmap(3,0,"Borrado del ultimo realizado");}
   b7216:	490d      	ldr	r1, [pc, #52]	; (b724c <_Z18borra_POP_Avanzadov+0x84>)
   b7218:	4668      	mov	r0, sp
   b721a:	f003 fda8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b721e:	466a      	mov	r2, sp
   b7220:	2100      	movs	r1, #0
   b7222:	2003      	movs	r0, #3
   b7224:	f7ff fcd4 	bl	b6bd0 <_Z10showBitmapii6String>
   b7228:	4668      	mov	r0, sp
   b722a:	f003 fd55 	bl	bacd8 <_ZN6StringD1Ev>
   }
   b722e:	e7f0      	b.n	b7212 <_Z18borra_POP_Avanzadov+0x4a>
   b7230:	2003da18 	.word	0x2003da18
   b7234:	2003c73c 	.word	0x2003c73c
   b7238:	000bc4db 	.word	0x000bc4db
   b723c:	2003da30 	.word	0x2003da30
   b7240:	2003c68c 	.word	0x2003c68c
   b7244:	2003da34 	.word	0x2003da34
   b7248:	2003da38 	.word	0x2003da38
   b724c:	000bc606 	.word	0x000bc606

000b7250 <loop>:
{
   b7250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b7254:	f8df 82e8 	ldr.w	r8, [pc, #744]	; b7540 <loop+0x2f0>
   b7258:	f898 3000 	ldrb.w	r3, [r8]
{
   b725c:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
  if (iniciando) {
   b7260:	2b00      	cmp	r3, #0
   b7262:	d034      	beq.n	b72ce <loop+0x7e>
   b7264:	f003 f9be 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b7268:	4f9d      	ldr	r7, [pc, #628]	; (b74e0 <loop+0x290>)
    while(currentTime-startTime<limit){
   b726a:	f8df 92a0 	ldr.w	r9, [pc, #672]	; b750c <loop+0x2bc>
   b726e:	f8df a2a0 	ldr.w	sl, [pc, #672]	; b7510 <loop+0x2c0>
    currentTime = millis();
   b7272:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b7274:	f8d9 2000 	ldr.w	r2, [r9]
   b7278:	683b      	ldr	r3, [r7, #0]
   b727a:	1a9b      	subs	r3, r3, r2
   b727c:	f8da 2000 	ldr.w	r2, [sl]
   b7280:	4293      	cmp	r3, r2
   b7282:	d203      	bcs.n	b728c <loop+0x3c>
   b7284:	f003 f9ae 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b7288:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b728a:	e7f3      	b.n	b7274 <loop+0x24>
    display.clearDisplay();
   b728c:	4e95      	ldr	r6, [pc, #596]	; (b74e4 <loop+0x294>)
   b728e:	4630      	mov	r0, r6
   b7290:	f002 fd6a 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b7294:	2101      	movs	r1, #1
   b7296:	4630      	mov	r0, r6
   b7298:	f001 fea1 	bl	b8fde <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b729c:	2500      	movs	r5, #0
   b729e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b72a2:	e9c6 5304 	strd	r5, r3, [r6, #16]
    if( MODE == 0 )
   b72a6:	4b90      	ldr	r3, [pc, #576]	; (b74e8 <loop+0x298>)
      showBitmap(0,0,"");
   b72a8:	4990      	ldr	r1, [pc, #576]	; (b74ec <loop+0x29c>)
    if( MODE == 0 )
   b72aa:	781c      	ldrb	r4, [r3, #0]
      showBitmap(0,0,"");
   b72ac:	a8c0      	add	r0, sp, #768	; 0x300
    if( MODE == 0 )
   b72ae:	2c00      	cmp	r4, #0
   b72b0:	d15f      	bne.n	b7372 <loop+0x122>
      showBitmap(0,0,"");
   b72b2:	f003 fd5c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b72b6:	aac0      	add	r2, sp, #768	; 0x300
   b72b8:	4621      	mov	r1, r4
   b72ba:	4620      	mov	r0, r4
      showBitmap(1,2,"Zumbador:");
   b72bc:	f7ff fc88 	bl	b6bd0 <_Z10showBitmapii6String>
   b72c0:	a8c0      	add	r0, sp, #768	; 0x300
   b72c2:	f003 fd09 	bl	bacd8 <_ZN6StringD1Ev>
    iniciando = false;
   b72c6:	2300      	movs	r3, #0
   b72c8:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b72cc:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b72ce:	4888      	ldr	r0, [pc, #544]	; (b74f0 <loop+0x2a0>)
   b72d0:	4d88      	ldr	r5, [pc, #544]	; (b74f4 <loop+0x2a4>)
   b72d2:	f002 f917 	bl	b9504 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b72d6:	b1a0      	cbz	r0, b7302 <loop+0xb2>
    Serial.print("Tag Detectada --> ");
   b72d8:	f004 f88c 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b72dc:	4986      	ldr	r1, [pc, #536]	; (b74f8 <loop+0x2a8>)
   b72de:	f003 fe27 	bl	baf30 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b72e2:	4883      	ldr	r0, [pc, #524]	; (b74f0 <loop+0x2a0>)
   b72e4:	f002 fadf 	bl	b98a6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b72e8:	4884      	ldr	r0, [pc, #528]	; (b74fc <loop+0x2ac>)
   b72ea:	f7fe fcb7 	bl	b5c5c <_Z8getTagIDPi>
    scroll_timer = 0;
   b72ee:	4a84      	ldr	r2, [pc, #528]	; (b7500 <loop+0x2b0>)
   b72f0:	2300      	movs	r3, #0
   b72f2:	6013      	str	r3, [r2, #0]
    play = false;
   b72f4:	702b      	strb	r3, [r5, #0]
    if ( MODE == 0 ) {
   b72f6:	4b7c      	ldr	r3, [pc, #496]	; (b74e8 <loop+0x298>)
   b72f8:	781b      	ldrb	r3, [r3, #0]
   b72fa:	2b00      	cmp	r3, #0
   b72fc:	d163      	bne.n	b73c6 <loop+0x176>
      pitidoOFF0();
   b72fe:	f7fe f8e0 	bl	b54c2 <_Z10pitidoOFF0v>
  if (!play && init) {
   b7302:	782b      	ldrb	r3, [r5, #0]
   b7304:	b923      	cbnz	r3, b7310 <loop+0xc0>
   b7306:	4b7f      	ldr	r3, [pc, #508]	; (b7504 <loop+0x2b4>)
   b7308:	781b      	ldrb	r3, [r3, #0]
   b730a:	b10b      	cbz	r3, b7310 <loop+0xc0>
    ledApagar();
   b730c:	f7fe f830 	bl	b5370 <_Z9ledApagarv>
  if (bitmap) {
   b7310:	4e7d      	ldr	r6, [pc, #500]	; (b7508 <loop+0x2b8>)
   b7312:	7833      	ldrb	r3, [r6, #0]
   b7314:	2b00      	cmp	r3, #0
   b7316:	d067      	beq.n	b73e8 <loop+0x198>
   b7318:	f003 f964 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b731c:	4b70      	ldr	r3, [pc, #448]	; (b74e0 <loop+0x290>)
   b731e:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b7320:	4b7a      	ldr	r3, [pc, #488]	; (b750c <loop+0x2bc>)
   b7322:	681b      	ldr	r3, [r3, #0]
   b7324:	1ac0      	subs	r0, r0, r3
   b7326:	4b7a      	ldr	r3, [pc, #488]	; (b7510 <loop+0x2c0>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	4298      	cmp	r0, r3
   b732c:	d35c      	bcc.n	b73e8 <loop+0x198>
   b732e:	486d      	ldr	r0, [pc, #436]	; (b74e4 <loop+0x294>)
      for (int i = 0; i < posicion; i++)
   b7330:	4f78      	ldr	r7, [pc, #480]	; (b7514 <loop+0x2c4>)
          snprintf(buf, sizeof(buf), "...");
   b7332:	f8df 8210 	ldr.w	r8, [pc, #528]	; b7544 <loop+0x2f4>
      bitmap=false;
   b7336:	2400      	movs	r4, #0
   b7338:	6104      	str	r4, [r0, #16]
   b733a:	7034      	strb	r4, [r6, #0]
      display.clearDisplay();
   b733c:	f002 fd14 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b7340:	4868      	ldr	r0, [pc, #416]	; (b74e4 <loop+0x294>)
          snprintf(buf, sizeof(buf), "...");
   b7342:	4e75      	ldr	r6, [pc, #468]	; (b7518 <loop+0x2c8>)
      display.display();
   b7344:	f002 ff78 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b7348:	683b      	ldr	r3, [r7, #0]
   b734a:	42a3      	cmp	r3, r4
   b734c:	dd4c      	ble.n	b73e8 <loop+0x198>
        if (i<23) {
   b734e:	2c16      	cmp	r4, #22
   b7350:	dc43      	bgt.n	b73da <loop+0x18a>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b7352:	4b72      	ldr	r3, [pc, #456]	; (b751c <loop+0x2cc>)
	const char * c_str() const { return buffer; }
   b7354:	0122      	lsls	r2, r4, #4
   b7356:	2140      	movs	r1, #64	; 0x40
   b7358:	58d2      	ldr	r2, [r2, r3]
   b735a:	4630      	mov	r0, r6
   b735c:	f003 fb46 	bl	ba9ec <snprintf>
        display.print(buf);
   b7360:	4631      	mov	r1, r6
   b7362:	4860      	ldr	r0, [pc, #384]	; (b74e4 <loop+0x294>)
   b7364:	f003 fde4 	bl	baf30 <_ZN5Print5printEPKc>
        display.display();
   b7368:	485e      	ldr	r0, [pc, #376]	; (b74e4 <loop+0x294>)
   b736a:	f002 ff65 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b736e:	3401      	adds	r4, #1
   b7370:	e7ea      	b.n	b7348 <loop+0xf8>
    } else if (MODE == 1)
   b7372:	2c01      	cmp	r4, #1
   b7374:	d105      	bne.n	b7382 <loop+0x132>
      showBitmap(0,3,"");
   b7376:	f003 fcfa 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b737a:	aac0      	add	r2, sp, #768	; 0x300
   b737c:	4621      	mov	r1, r4
   b737e:	4628      	mov	r0, r5
   b7380:	e79c      	b.n	b72bc <loop+0x6c>
    } else if (MODE == 3)
   b7382:	2c03      	cmp	r4, #3
   b7384:	d0f7      	beq.n	b7376 <loop+0x126>
      showBitmap(0,2,"");
   b7386:	f003 fcf2 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b738a:	aac0      	add	r2, sp, #768	; 0x300
   b738c:	2102      	movs	r1, #2
   b738e:	4628      	mov	r0, r5
   b7390:	f7ff fc1e 	bl	b6bd0 <_Z10showBitmapii6String>
   b7394:	a8c0      	add	r0, sp, #768	; 0x300
   b7396:	f003 fc9f 	bl	bacd8 <_ZN6StringD1Ev>
      bitmap=false;
   b739a:	4b5b      	ldr	r3, [pc, #364]	; (b7508 <loop+0x2b8>)
   b739c:	701d      	strb	r5, [r3, #0]
      while(currentTime-startTime<limit){
   b739e:	f8d9 2000 	ldr.w	r2, [r9]
   b73a2:	683b      	ldr	r3, [r7, #0]
   b73a4:	1a9b      	subs	r3, r3, r2
   b73a6:	f8da 2000 	ldr.w	r2, [sl]
   b73aa:	4293      	cmp	r3, r2
   b73ac:	d203      	bcs.n	b73b6 <loop+0x166>
   b73ae:	f003 f919 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b73b2:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b73b4:	e7f3      	b.n	b739e <loop+0x14e>
      showBitmap(1,2,"Zumbador:");
   b73b6:	495a      	ldr	r1, [pc, #360]	; (b7520 <loop+0x2d0>)
   b73b8:	a8c0      	add	r0, sp, #768	; 0x300
   b73ba:	f003 fcd8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b73be:	aac0      	add	r2, sp, #768	; 0x300
   b73c0:	2102      	movs	r1, #2
   b73c2:	2001      	movs	r0, #1
   b73c4:	e77a      	b.n	b72bc <loop+0x6c>
      pitidoOFF1(2);
   b73c6:	2002      	movs	r0, #2
   b73c8:	f7fe f94f 	bl	b566a <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b73cc:	2004      	movs	r0, #4
   b73ce:	f7fe f94c 	bl	b566a <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b73d2:	2006      	movs	r0, #6
   b73d4:	f7fe f949 	bl	b566a <_Z10pitidoOFF1i>
   b73d8:	e793      	b.n	b7302 <loop+0xb2>
        } else if (i==23){
   b73da:	2c17      	cmp	r4, #23
   b73dc:	d1c0      	bne.n	b7360 <loop+0x110>
          snprintf(buf, sizeof(buf), "...");
   b73de:	4641      	mov	r1, r8
   b73e0:	4630      	mov	r0, r6
   b73e2:	f004 fba9 	bl	bbb38 <strcpy>
   b73e6:	e7bb      	b.n	b7360 <loop+0x110>
  if ( MODE == 0 ) 
   b73e8:	4b3f      	ldr	r3, [pc, #252]	; (b74e8 <loop+0x298>)
    switch (tagInfo[0])
   b73ea:	4c44      	ldr	r4, [pc, #272]	; (b74fc <loop+0x2ac>)
  if ( MODE == 0 ) 
   b73ec:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b73ee:	6826      	ldr	r6, [r4, #0]
  if ( MODE == 0 ) 
   b73f0:	2f00      	cmp	r7, #0
   b73f2:	f040 813d 	bne.w	b7670 <loop+0x420>
    switch (tagInfo[0])
   b73f6:	f8df 8150 	ldr.w	r8, [pc, #336]	; b7548 <loop+0x2f8>
   b73fa:	2e00      	cmp	r6, #0
   b73fc:	f000 80a6 	beq.w	b754c <loop+0x2fc>
   b7400:	2e06      	cmp	r6, #6
   b7402:	f040 8114 	bne.w	b762e <loop+0x3de>
      pitidoBlink0();
   b7406:	f7fe f86f 	bl	b54e8 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b740a:	6866      	ldr	r6, [r4, #4]
   b740c:	2e01      	cmp	r6, #1
   b740e:	d03f      	beq.n	b7490 <loop+0x240>
   b7410:	2e02      	cmp	r6, #2
   b7412:	d03f      	beq.n	b7494 <loop+0x244>
   b7414:	b92e      	cbnz	r6, b7422 <loop+0x1d2>
            cambioModo(tagInfo[2]);
   b7416:	68a0      	ldr	r0, [r4, #8]
   b7418:	f7ff fe7c 	bl	b7114 <_Z10cambioModoi>
            resetFunc();
   b741c:	4b41      	ldr	r3, [pc, #260]	; (b7524 <loop+0x2d4>)
   b741e:	681b      	ldr	r3, [r3, #0]
   b7420:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b7422:	6823      	ldr	r3, [r4, #0]
   b7424:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b7426:	bf1c      	itt	ne
   b7428:	f04f 33ff 	movne.w	r3, #4294967295
   b742c:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b742e:	f8d8 4000 	ldr.w	r4, [r8]
   b7432:	2c00      	cmp	r4, #0
   b7434:	f340 8108 	ble.w	b7648 <loop+0x3f8>
   b7438:	782b      	ldrb	r3, [r5, #0]
   b743a:	2b00      	cmp	r3, #0
   b743c:	f000 8114 	beq.w	b7668 <loop+0x418>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7440:	4c39      	ldr	r4, [pc, #228]	; (b7528 <loop+0x2d8>)
   b7442:	4d3a      	ldr	r5, [pc, #232]	; (b752c <loop+0x2dc>)
   b7444:	6922      	ldr	r2, [r4, #16]
   b7446:	6860      	ldr	r0, [r4, #4]
   b7448:	2101      	movs	r1, #1
   b744a:	f7fd fee9 	bl	b5220 <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b744e:	4b38      	ldr	r3, [pc, #224]	; (b7530 <loop+0x2e0>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7450:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b7452:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7454:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b7456:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b745a:	f7fe f889 	bl	b5570 <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b745e:	782b      	ldrb	r3, [r5, #0]
   b7460:	2b00      	cmp	r3, #0
   b7462:	f000 80ef 	beq.w	b7644 <loop+0x3f4>
   b7466:	4933      	ldr	r1, [pc, #204]	; (b7534 <loop+0x2e4>)
      display.clearDisplay();
   b7468:	4c1e      	ldr	r4, [pc, #120]	; (b74e4 <loop+0x294>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b746a:	482b      	ldr	r0, [pc, #172]	; (b7518 <loop+0x2c8>)
   b746c:	f004 fb64 	bl	bbb38 <strcpy>
      display.clearDisplay();
   b7470:	4620      	mov	r0, r4
   b7472:	f002 fc79 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7476:	2300      	movs	r3, #0
      display.print(buf);
   b7478:	4927      	ldr	r1, [pc, #156]	; (b7518 <loop+0x2c8>)
   b747a:	6123      	str	r3, [r4, #16]
   b747c:	4620      	mov	r0, r4
   b747e:	f003 fd57 	bl	baf30 <_ZN5Print5printEPKc>
      display.display();
   b7482:	4620      	mov	r0, r4
   b7484:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b7488:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          display.display();
   b748c:	f002 bed4 	b.w	ba238 <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b7490:	702e      	strb	r6, [r5, #0]
            break;
   b7492:	e7c6      	b.n	b7422 <loop+0x1d2>
            if ( tagInfo[2] == 1 ) {
   b7494:	68a3      	ldr	r3, [r4, #8]
   b7496:	2b01      	cmp	r3, #1
   b7498:	d10f      	bne.n	b74ba <loop+0x26a>
              borradoALL(0);
   b749a:	4638      	mov	r0, r7
   b749c:	f7fe f9be 	bl	b581c <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b74a0:	4925      	ldr	r1, [pc, #148]	; (b7538 <loop+0x2e8>)
   b74a2:	a8c0      	add	r0, sp, #768	; 0x300
   b74a4:	f003 fc63 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b74a8:	aac0      	add	r2, sp, #768	; 0x300
   b74aa:	4639      	mov	r1, r7
   b74ac:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b74ae:	f7ff fb8f 	bl	b6bd0 <_Z10showBitmapii6String>
   b74b2:	a8c0      	add	r0, sp, #768	; 0x300
   b74b4:	f003 fc10 	bl	bacd8 <_ZN6StringD1Ev>
   b74b8:	e7b3      	b.n	b7422 <loop+0x1d2>
              showBitmap(2,1,"");
   b74ba:	490c      	ldr	r1, [pc, #48]	; (b74ec <loop+0x29c>)
   b74bc:	a8c0      	add	r0, sp, #768	; 0x300
   b74be:	f003 fc56 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b74c2:	aac0      	add	r2, sp, #768	; 0x300
   b74c4:	2101      	movs	r1, #1
   b74c6:	4630      	mov	r0, r6
   b74c8:	f7ff fb82 	bl	b6bd0 <_Z10showBitmapii6String>
   b74cc:	a8c0      	add	r0, sp, #768	; 0x300
   b74ce:	f003 fc03 	bl	bacd8 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b74d2:	f003 ff8f 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b74d6:	4919      	ldr	r1, [pc, #100]	; (b753c <loop+0x2ec>)
   b74d8:	f003 fd3d 	bl	baf56 <_ZN5Print7printlnEPKc>
   b74dc:	e7a1      	b.n	b7422 <loop+0x1d2>
   b74de:	bf00      	nop
   b74e0:	2003d334 	.word	0x2003d334
   b74e4:	2003d338 	.word	0x2003d338
   b74e8:	2003c72a 	.word	0x2003c72a
   b74ec:	000bc0e6 	.word	0x000bc0e6
   b74f0:	2003d6e8 	.word	0x2003d6e8
   b74f4:	2003da24 	.word	0x2003da24
   b74f8:	000bc62d 	.word	0x000bc62d
   b74fc:	2003c690 	.word	0x2003c690
   b7500:	2003da48 	.word	0x2003da48
   b7504:	2003d6d6 	.word	0x2003d6d6
   b7508:	2003c739 	.word	0x2003c739
   b750c:	2003dc2c 	.word	0x2003dc2c
   b7510:	2003c684 	.word	0x2003c684
   b7514:	2003da28 	.word	0x2003da28
   b7518:	2003d2ed 	.word	0x2003d2ed
   b751c:	2003da4c 	.word	0x2003da4c
   b7520:	000bc623 	.word	0x000bc623
   b7524:	2003da3c 	.word	0x2003da3c
   b7528:	2003cd14 	.word	0x2003cd14
   b752c:	2003e6b8 	.word	0x2003e6b8
   b7530:	2003d6cc 	.word	0x2003d6cc
   b7534:	000bc8bf 	.word	0x000bc8bf
   b7538:	000bc640 	.word	0x000bc640
   b753c:	000bc65b 	.word	0x000bc65b
   b7540:	2003c683 	.word	0x2003c683
   b7544:	000bc5d1 	.word	0x000bc5d1
   b7548:	2003da18 	.word	0x2003da18
        id = tagInfo[3];
   b754c:	4f83      	ldr	r7, [pc, #524]	; (b775c <loop+0x50c>)
   b754e:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b7550:	4e83      	ldr	r6, [pc, #524]	; (b7760 <loop+0x510>)
        if (tagInfo[1] == 0) {
   b7552:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b7556:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b7558:	68a3      	ldr	r3, [r4, #8]
   b755a:	f8df 9240 	ldr.w	r9, [pc, #576]	; b779c <loop+0x54c>
   b755e:	6033      	str	r3, [r6, #0]
        if (tagInfo[1] == 0) {
   b7560:	f1ba 0f00 	cmp.w	sl, #0
   b7564:	d123      	bne.n	b75ae <loop+0x35e>
          Serial.println("Sensor detectado");
   b7566:	f003 ff45 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b756a:	497e      	ldr	r1, [pc, #504]	; (b7764 <loop+0x514>)
   b756c:	f003 fcf3 	bl	baf56 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b7570:	4a7d      	ldr	r2, [pc, #500]	; (b7768 <loop+0x518>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7572:	6833      	ldr	r3, [r6, #0]
          sensor.id = id;
   b7574:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b7576:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b7578:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b757a:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b757c:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7580:	bf18      	it	ne
   b7582:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b7584:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b7586:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b7588:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b758c:	4977      	ldr	r1, [pc, #476]	; (b776c <loop+0x51c>)
          numSensoresBloque++;
   b758e:	3201      	adds	r2, #1
   b7590:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b7594:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b7596:	2b00      	cmp	r3, #0
   b7598:	d13b      	bne.n	b7612 <loop+0x3c2>
            showBitmap(1,3,""); //A0
   b759a:	f003 fbe8 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b759e:	aac0      	add	r2, sp, #768	; 0x300
   b75a0:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b75a2:	2001      	movs	r0, #1
   b75a4:	f7ff fb14 	bl	b6bd0 <_Z10showBitmapii6String>
   b75a8:	a8c0      	add	r0, sp, #768	; 0x300
   b75aa:	f003 fb95 	bl	bacd8 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b75ae:	f8d9 3000 	ldr.w	r3, [r9]
   b75b2:	2b00      	cmp	r3, #0
   b75b4:	dd38      	ble.n	b7628 <loop+0x3d8>
          if (tagInfo[1] == 1) {
   b75b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b75ba:	f1b9 0f01 	cmp.w	r9, #1
   b75be:	f47f af30 	bne.w	b7422 <loop+0x1d2>
            Serial.println("Actuador detectado");
   b75c2:	f003 ff17 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b75c6:	496a      	ldr	r1, [pc, #424]	; (b7770 <loop+0x520>)
   b75c8:	f003 fcc5 	bl	baf56 <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b75cc:	4b69      	ldr	r3, [pc, #420]	; (b7774 <loop+0x524>)
   b75ce:	6922      	ldr	r2, [r4, #16]
   b75d0:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75d2:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b75d4:	683a      	ldr	r2, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75d6:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b75d8:	4b63      	ldr	r3, [pc, #396]	; (b7768 <loop+0x518>)
   b75da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b75de:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75e2:	bf0c      	ite	eq
   b75e4:	2102      	moveq	r1, #2
   b75e6:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b75e8:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b75ea:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b75ee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b75f2:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b75f6:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b75f8:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b75fc:	495b      	ldr	r1, [pc, #364]	; (b776c <loop+0x51c>)
            numActuadoresBloque++;
   b75fe:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b7602:	a8c0      	add	r0, sp, #768	; 0x300
            if (actuador.puerto == 2) {
   b7604:	d10a      	bne.n	b761c <loop+0x3cc>
              showBitmap(1,4,""); //A2
   b7606:	f003 fbb2 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b760a:	aac0      	add	r2, sp, #768	; 0x300
   b760c:	2104      	movs	r1, #4
   b760e:	4648      	mov	r0, r9
   b7610:	e74d      	b.n	b74ae <loop+0x25e>
            showBitmap(1,0,""); //D2
   b7612:	f003 fbac 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7616:	aac0      	add	r2, sp, #768	; 0x300
   b7618:	4651      	mov	r1, sl
   b761a:	e7c2      	b.n	b75a2 <loop+0x352>
              showBitmap(1,1,""); //D4
   b761c:	f003 fba7 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7620:	aac0      	add	r2, sp, #768	; 0x300
   b7622:	4649      	mov	r1, r9
   b7624:	4648      	mov	r0, r9
   b7626:	e742      	b.n	b74ae <loop+0x25e>
            ledApagar();
   b7628:	f7fd fea2 	bl	b5370 <_Z9ledApagarv>
   b762c:	e6f9      	b.n	b7422 <loop+0x1d2>
        if ( tagInfo[0] != -1 ) {
   b762e:	3601      	adds	r6, #1
   b7630:	f43f aef7 	beq.w	b7422 <loop+0x1d2>
          showBitmap(2,0,"");
   b7634:	494d      	ldr	r1, [pc, #308]	; (b776c <loop+0x51c>)
   b7636:	a8c0      	add	r0, sp, #768	; 0x300
   b7638:	f003 fb99 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b763c:	aac0      	add	r2, sp, #768	; 0x300
   b763e:	4639      	mov	r1, r7
   b7640:	2002      	movs	r0, #2
   b7642:	e734      	b.n	b74ae <loop+0x25e>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b7644:	494c      	ldr	r1, [pc, #304]	; (b7778 <loop+0x528>)
   b7646:	e70f      	b.n	b7468 <loop+0x218>
    } else if (numActuadoresBloque==0 && play == true) {
   b7648:	d10e      	bne.n	b7668 <loop+0x418>
   b764a:	782b      	ldrb	r3, [r5, #0]
   b764c:	b163      	cbz	r3, b7668 <loop+0x418>
      showBitmap(2,4,"");
   b764e:	4947      	ldr	r1, [pc, #284]	; (b776c <loop+0x51c>)
   b7650:	a8c0      	add	r0, sp, #768	; 0x300
   b7652:	f003 fb8c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7656:	aac0      	add	r2, sp, #768	; 0x300
   b7658:	2104      	movs	r1, #4
   b765a:	2002      	movs	r0, #2
   b765c:	f7ff fab8 	bl	b6bd0 <_Z10showBitmapii6String>
   b7660:	a8c0      	add	r0, sp, #768	; 0x300
   b7662:	f003 fb39 	bl	bacd8 <_ZN6StringD1Ev>
      play=false;
   b7666:	702c      	strb	r4, [r5, #0]
   b7668:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b7670:	2f01      	cmp	r7, #1
   b7672:	f040 8418 	bne.w	b7ea6 <loop+0xc56>
    switch (tagInfo[0])
   b7676:	2e01      	cmp	r6, #1
   b7678:	d053      	beq.n	b7722 <loop+0x4d2>
   b767a:	2e06      	cmp	r6, #6
   b767c:	f040 8331 	bne.w	b7ce2 <loop+0xa92>
        switch (tagInfo[1])
   b7680:	6866      	ldr	r6, [r4, #4]
   b7682:	2e01      	cmp	r6, #1
   b7684:	d019      	beq.n	b76ba <loop+0x46a>
   b7686:	2e02      	cmp	r6, #2
   b7688:	d01f      	beq.n	b76ca <loop+0x47a>
   b768a:	b92e      	cbnz	r6, b7698 <loop+0x448>
            cambioModo(tagInfo[2]);
   b768c:	68a0      	ldr	r0, [r4, #8]
   b768e:	f7ff fd41 	bl	b7114 <_Z10cambioModoi>
            resetFunc();
   b7692:	4b3a      	ldr	r3, [pc, #232]	; (b777c <loop+0x52c>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	4798      	blx	r3
    tagInfo[0] = -1;
   b7698:	f04f 33ff 	mov.w	r3, #4294967295
   b769c:	6023      	str	r3, [r4, #0]
    if (play) {
   b769e:	782b      	ldrb	r3, [r5, #0]
   b76a0:	2b00      	cmp	r3, #0
   b76a2:	f040 832d 	bne.w	b7d00 <loop+0xab0>
      if (scroll_timer > 50){
   b76a6:	4c36      	ldr	r4, [pc, #216]	; (b7780 <loop+0x530>)
   b76a8:	6823      	ldr	r3, [r4, #0]
   b76aa:	2b32      	cmp	r3, #50	; 0x32
   b76ac:	dd01      	ble.n	b76b2 <loop+0x462>
        listar();
   b76ae:	f7fe fbe5 	bl	b5e7c <_Z6listarv>
      scroll_timer++;}
   b76b2:	6823      	ldr	r3, [r4, #0]
   b76b4:	3301      	adds	r3, #1
   b76b6:	6023      	str	r3, [r4, #0]
   b76b8:	e7d6      	b.n	b7668 <loop+0x418>
            display.clearDisplay();
   b76ba:	4f32      	ldr	r7, [pc, #200]	; (b7784 <loop+0x534>)
   b76bc:	4638      	mov	r0, r7
   b76be:	f002 fb53 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b76c2:	2300      	movs	r3, #0
   b76c4:	613b      	str	r3, [r7, #16]
            play = true;
   b76c6:	702e      	strb	r6, [r5, #0]
            break;
   b76c8:	e7e6      	b.n	b7698 <loop+0x448>
            if ( tagInfo[2] == 1 ) {
   b76ca:	68a3      	ldr	r3, [r4, #8]
   b76cc:	2b01      	cmp	r3, #1
   b76ce:	d111      	bne.n	b76f4 <loop+0x4a4>
              borradoALL(0);
   b76d0:	2000      	movs	r0, #0
   b76d2:	f7fe f8a3 	bl	b581c <_Z10borradoALLi>
   switch (modo)
   b76d6:	f7fd f9cd 	bl	b4a74 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b76da:	a8c0      	add	r0, sp, #768	; 0x300
   b76dc:	492a      	ldr	r1, [pc, #168]	; (b7788 <loop+0x538>)
   b76de:	f003 fb46 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b76e2:	aac0      	add	r2, sp, #768	; 0x300
   b76e4:	2100      	movs	r1, #0
   b76e6:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b76e8:	f7ff fa72 	bl	b6bd0 <_Z10showBitmapii6String>
   b76ec:	a8c0      	add	r0, sp, #768	; 0x300
   b76ee:	f003 faf3 	bl	bacd8 <_ZN6StringD1Ev>
   b76f2:	e7d1      	b.n	b7698 <loop+0x448>
            } else if (tagInfo[2] == 2) {
   b76f4:	2b02      	cmp	r3, #2
   b76f6:	d103      	bne.n	b7700 <loop+0x4b0>
              borradoBLOQUE(1);
   b76f8:	4638      	mov	r0, r7
   b76fa:	f7ff fc11 	bl	b6f20 <_Z13borradoBLOQUEi>
   b76fe:	e7cb      	b.n	b7698 <loop+0x448>
            } else if(tagInfo[2] == 0) {
   b7700:	b913      	cbnz	r3, b7708 <loop+0x4b8>
              borra_POP_Avanzado();
   b7702:	f7ff fd61 	bl	b71c8 <_Z18borra_POP_Avanzadov>
   b7706:	e7c7      	b.n	b7698 <loop+0x448>
              Serial.println("Borrado no permitido para este modo");
   b7708:	f003 fe74 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b770c:	491f      	ldr	r1, [pc, #124]	; (b778c <loop+0x53c>)
   b770e:	f003 fc22 	bl	baf56 <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b7712:	4916      	ldr	r1, [pc, #88]	; (b776c <loop+0x51c>)
   b7714:	a8c0      	add	r0, sp, #768	; 0x300
   b7716:	f003 fb2a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b771a:	aac0      	add	r2, sp, #768	; 0x300
   b771c:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b771e:	2002      	movs	r0, #2
   b7720:	e7e2      	b.n	b76e8 <loop+0x498>
        id = tagInfo[3];
   b7722:	f8df b038 	ldr.w	fp, [pc, #56]	; b775c <loop+0x50c>
   b7726:	68e3      	ldr	r3, [r4, #12]
   b7728:	f8cb 3000 	str.w	r3, [fp]
        Serial.print("Ejecutando tag --> ");
   b772c:	f003 fe62 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7730:	4917      	ldr	r1, [pc, #92]	; (b7790 <loop+0x540>)
   b7732:	4e0d      	ldr	r6, [pc, #52]	; (b7768 <loop+0x518>)
   b7734:	f8df 9064 	ldr.w	r9, [pc, #100]	; b779c <loop+0x54c>
   b7738:	4f16      	ldr	r7, [pc, #88]	; (b7794 <loop+0x544>)
   b773a:	f8df a064 	ldr.w	sl, [pc, #100]	; b77a0 <loop+0x550>
   b773e:	f8df 8058 	ldr.w	r8, [pc, #88]	; b7798 <loop+0x548>
   b7742:	f003 fbf5 	bl	baf30 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b7746:	6863      	ldr	r3, [r4, #4]
   b7748:	2b05      	cmp	r3, #5
   b774a:	d86c      	bhi.n	b7826 <loop+0x5d6>
   b774c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7750:	00c8002a 	.word	0x00c8002a
   b7754:	025a0221 	.word	0x025a0221
   b7758:	02ac028a 	.word	0x02ac028a
   b775c:	2003d6d0 	.word	0x2003d6d0
   b7760:	2003e6b0 	.word	0x2003e6b0
   b7764:	000bc67f 	.word	0x000bc67f
   b7768:	2003cd14 	.word	0x2003cd14
   b776c:	000bc0e6 	.word	0x000bc0e6
   b7770:	000bc690 	.word	0x000bc690
   b7774:	2003d6cc 	.word	0x2003d6cc
   b7778:	000bc8ce 	.word	0x000bc8ce
   b777c:	2003da3c 	.word	0x2003da3c
   b7780:	2003da48 	.word	0x2003da48
   b7784:	2003d338 	.word	0x2003d338
   b7788:	000bc640 	.word	0x000bc640
   b778c:	000bc65b 	.word	0x000bc65b
   b7790:	000bc6a3 	.word	0x000bc6a3
   b7794:	2003da18 	.word	0x2003da18
   b7798:	2003c688 	.word	0x2003c688
   b779c:	2003da20 	.word	0x2003da20
   b77a0:	2003da1c 	.word	0x2003da1c
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b77a4:	4fb1      	ldr	r7, [pc, #708]	; (b7a6c <loop+0x81c>)
            Serial.println("Sensor detectado");
   b77a6:	f003 fe25 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b77aa:	49b1      	ldr	r1, [pc, #708]	; (b7a70 <loop+0x820>)
   b77ac:	f003 fbd3 	bl	baf56 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b77b0:	783b      	ldrb	r3, [r7, #0]
   b77b2:	2b00      	cmp	r3, #0
   b77b4:	d05e      	beq.n	b7874 <loop+0x624>
   b77b6:	f8d9 2000 	ldr.w	r2, [r9]
   b77ba:	f8da 3000 	ldr.w	r3, [sl]
   b77be:	429a      	cmp	r2, r3
   b77c0:	d16f      	bne.n	b78a2 <loop+0x652>
   b77c2:	f8db 0000 	ldr.w	r0, [fp]
   b77c6:	f7fe f929 	bl	b5a1c <_Z13isValidSensori>
   b77ca:	2800      	cmp	r0, #0
   b77cc:	d050      	beq.n	b7870 <loop+0x620>
              puerto = isNewSensor(id);
   b77ce:	f8db 0000 	ldr.w	r0, [fp]
   b77d2:	4fa8      	ldr	r7, [pc, #672]	; (b7a74 <loop+0x824>)
   b77d4:	f7fe f944 	bl	b5a60 <_Z11isNewSensori>
   b77d8:	6038      	str	r0, [r7, #0]
              if (puerto == -1) {
   b77da:	3001      	adds	r0, #1
   b77dc:	d14e      	bne.n	b787c <loop+0x62c>
                puerto = asignarPuerto(tagInfo[2]);
   b77de:	68a0      	ldr	r0, [r4, #8]
   b77e0:	f7fe fd72 	bl	b62c8 <_Z13asignarPuertoi>
   b77e4:	4601      	mov	r1, r0
   b77e6:	6038      	str	r0, [r7, #0]
                showPort(tagInfo[2], puerto);
   b77e8:	68a0      	ldr	r0, [r4, #8]
   b77ea:	f7ff fb4b 	bl	b6e84 <_Z8showPortii>
              if (puerto != -1) {
   b77ee:	6839      	ldr	r1, [r7, #0]
   b77f0:	1c48      	adds	r0, r1, #1
   b77f2:	f000 81bf 	beq.w	b7b74 <loop+0x924>
                newSensor.bloque = numBloque;
   b77f6:	f8d8 0000 	ldr.w	r0, [r8]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b77fa:	f8d9 c000 	ldr.w	ip, [r9]
   b77fe:	f8db 7000 	ldr.w	r7, [fp]
   b7802:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b7806:	4342      	muls	r2, r0
   b7808:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   b780c:	4433      	add	r3, r6
   b780e:	605f      	str	r7, [r3, #4]
   b7810:	6927      	ldr	r7, [r4, #16]
   b7812:	6119      	str	r1, [r3, #16]
   b7814:	e9c3 7002 	strd	r7, r0, [r3, #8]
                bloques[numBloque].numSensores++;
   b7818:	58b3      	ldr	r3, [r6, r2]
   b781a:	3301      	adds	r3, #1
                numSensoresBloque++;
   b781c:	f10c 0701 	add.w	r7, ip, #1
                bloques[numBloque].numSensores++;
   b7820:	50b3      	str	r3, [r6, r2]
                numSensoresBloque++;
   b7822:	f8c9 7000 	str.w	r7, [r9]
        Serial.println("Fin Tag");
   b7826:	f003 fde5 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b782a:	4993      	ldr	r1, [pc, #588]	; (b7a78 <loop+0x828>)
   b782c:	f003 fb93 	bl	baf56 <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b7830:	f003 fde0 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7834:	4991      	ldr	r1, [pc, #580]	; (b7a7c <loop+0x82c>)
   b7836:	f003 fb8e 	bl	baf56 <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b783a:	f003 fddb 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b783e:	4b90      	ldr	r3, [pc, #576]	; (b7a80 <loop+0x830>)
   b7840:	4990      	ldr	r1, [pc, #576]	; (b7a84 <loop+0x834>)
   b7842:	681a      	ldr	r2, [r3, #0]
   b7844:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7848:	fb03 6602 	mla	r6, r3, r2, r6
   b784c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b7850:	9302      	str	r3, [sp, #8]
   b7852:	4b8d      	ldr	r3, [pc, #564]	; (b7a88 <loop+0x838>)
   b7854:	681b      	ldr	r3, [r3, #0]
   b7856:	9301      	str	r3, [sp, #4]
   b7858:	4b8c      	ldr	r3, [pc, #560]	; (b7a8c <loop+0x83c>)
   b785a:	681b      	ldr	r3, [r3, #0]
   b785c:	9300      	str	r3, [sp, #0]
   b785e:	4b8c      	ldr	r3, [pc, #560]	; (b7a90 <loop+0x840>)
   b7860:	681b      	ldr	r3, [r3, #0]
   b7862:	f7fd f96c 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b7866:	f003 fdc5 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b786a:	f003 fb68 	bl	baf3e <_ZN5Print7printlnEv>
        break;
   b786e:	e713      	b.n	b7698 <loop+0x448>
              if ((!IF_pasado)) {
   b7870:	783b      	ldrb	r3, [r7, #0]
   b7872:	b983      	cbnz	r3, b7896 <loop+0x646>
                Serial.println("Se esperaba IF tag");
   b7874:	f003 fdbe 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7878:	4986      	ldr	r1, [pc, #536]	; (b7a94 <loop+0x844>)
   b787a:	e015      	b.n	b78a8 <loop+0x658>
                showBitmap(1,6,"");
   b787c:	4986      	ldr	r1, [pc, #536]	; (b7a98 <loop+0x848>)
   b787e:	a8c0      	add	r0, sp, #768	; 0x300
   b7880:	f003 fa75 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7884:	aac0      	add	r2, sp, #768	; 0x300
   b7886:	2106      	movs	r1, #6
   b7888:	2001      	movs	r0, #1
   b788a:	f7ff f9a1 	bl	b6bd0 <_Z10showBitmapii6String>
   b788e:	a8c0      	add	r0, sp, #768	; 0x300
   b7890:	f003 fa22 	bl	bacd8 <_ZN6StringD1Ev>
   b7894:	e7ab      	b.n	b77ee <loop+0x59e>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b7896:	f8d9 2000 	ldr.w	r2, [r9]
   b789a:	f8da 3000 	ldr.w	r3, [sl]
   b789e:	429a      	cmp	r2, r3
   b78a0:	d00c      	beq.n	b78bc <loop+0x66c>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b78a2:	f003 fda7 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b78a6:	497d      	ldr	r1, [pc, #500]	; (b7a9c <loop+0x84c>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b78a8:	f003 fb55 	bl	baf56 <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b78ac:	497a      	ldr	r1, [pc, #488]	; (b7a98 <loop+0x848>)
   b78ae:	a8c0      	add	r0, sp, #768	; 0x300
   b78b0:	f003 fa5d 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b78b4:	2102      	movs	r1, #2
   b78b6:	aac0      	add	r2, sp, #768	; 0x300
   b78b8:	4608      	mov	r0, r1
   b78ba:	e00b      	b.n	b78d4 <loop+0x684>
                Serial.println("Sensor invalido");
   b78bc:	f003 fd9a 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b78c0:	4977      	ldr	r1, [pc, #476]	; (b7aa0 <loop+0x850>)
   b78c2:	f003 fb48 	bl	baf56 <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b78c6:	4974      	ldr	r1, [pc, #464]	; (b7a98 <loop+0x848>)
   b78c8:	a8c0      	add	r0, sp, #768	; 0x300
   b78ca:	f003 fa50 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b78ce:	aac0      	add	r2, sp, #768	; 0x300
   b78d0:	2105      	movs	r1, #5
   b78d2:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b78d4:	f7ff f97c 	bl	b6bd0 <_Z10showBitmapii6String>
   b78d8:	a8c0      	add	r0, sp, #768	; 0x300
   b78da:	f003 f9fd 	bl	bacd8 <_ZN6StringD1Ev>
   b78de:	e7a2      	b.n	b7826 <loop+0x5d6>
            Serial.println("Actuador detectado");
   b78e0:	f003 fd88 	bl	bb3f4 <_Z16_fetch_usbserialv>
            estado = tagInfo[4];
   b78e4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; b7ab0 <loop+0x860>
            Serial.println("Actuador detectado");
   b78e8:	496e      	ldr	r1, [pc, #440]	; (b7aa4 <loop+0x854>)
   b78ea:	f003 fb34 	bl	baf56 <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b78ee:	6923      	ldr	r3, [r4, #16]
   b78f0:	f8ca 3000 	str.w	r3, [sl]
              if (!IF_pasado) {
   b78f4:	4b5d      	ldr	r3, [pc, #372]	; (b7a6c <loop+0x81c>)
   b78f6:	781b      	ldrb	r3, [r3, #0]
   b78f8:	bbd3      	cbnz	r3, b7970 <loop+0x720>
              puerto = isNewActuador(id);
   b78fa:	f8db 0000 	ldr.w	r0, [fp]
   b78fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; b7a74 <loop+0x824>
   b7902:	f7fe f8d5 	bl	b5ab0 <_Z13isNewActuadori>
   b7906:	f8c9 0000 	str.w	r0, [r9]
              if (puerto == -1) {
   b790a:	3001      	adds	r0, #1
   b790c:	f040 8093 	bne.w	b7a36 <loop+0x7e6>
                puerto = asignarPuerto(tagInfo[2]);
   b7910:	68a0      	ldr	r0, [r4, #8]
   b7912:	f7fe fcd9 	bl	b62c8 <_Z13asignarPuertoi>
   b7916:	4601      	mov	r1, r0
   b7918:	f8c9 0000 	str.w	r0, [r9]
                showPort(tagInfo[2], puerto);
   b791c:	68a0      	ldr	r0, [r4, #8]
   b791e:	f7ff fab1 	bl	b6e84 <_Z8showPortii>
              if (puerto != -1) {
   b7922:	f8d9 0000 	ldr.w	r0, [r9]
   b7926:	1c42      	adds	r2, r0, #1
   b7928:	d022      	beq.n	b7970 <loop+0x720>
                newActuador.bloque = numBloque;
   b792a:	f8d8 1000 	ldr.w	r1, [r8]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b792e:	f8d7 c000 	ldr.w	ip, [r7]
   b7932:	f8df 8184 	ldr.w	r8, [pc, #388]	; b7ab8 <loop+0x868>
   b7936:	f8db 2000 	ldr.w	r2, [fp]
                newActuador.condicion = estado;
   b793a:	f8da e000 	ldr.w	lr, [sl]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b793e:	2314      	movs	r3, #20
   b7940:	fb03 830c 	mla	r3, r3, ip, r8
   b7944:	e9c3 1054 	strd	r1, r0, [r3, #336]	; 0x150
   b7948:	2101      	movs	r1, #1
   b794a:	f883 1158 	strb.w	r1, [r3, #344]	; 0x158
   b794e:	e9c3 2e52 	strd	r2, lr, [r3, #328]	; 0x148
                bloque2[0].numActuadores++;
   b7952:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
   b7956:	440b      	add	r3, r1
                numActuadoresBloque++;
   b7958:	eb0c 0201 	add.w	r2, ip, r1
                bloque2[0].numActuadores++;
   b795c:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
                numActuadoresBloque++;
   b7960:	603a      	str	r2, [r7, #0]
                Serial.println(bloque2[0].numActuadores);
   b7962:	f003 fd47 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7966:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
   b796a:	220a      	movs	r2, #10
   b796c:	f7fd f8bc 	bl	b4ae8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
            if ( THEN_pasado && !ELSE_pasado) {
   b7970:	4b4d      	ldr	r3, [pc, #308]	; (b7aa8 <loop+0x858>)
   b7972:	781b      	ldrb	r3, [r3, #0]
   b7974:	2b00      	cmp	r3, #0
   b7976:	f000 8103 	beq.w	b7b80 <loop+0x930>
   b797a:	4b4c      	ldr	r3, [pc, #304]	; (b7aac <loop+0x85c>)
              puerto = isNewActuador(id);
   b797c:	f8db 0000 	ldr.w	r0, [fp]
            if ( THEN_pasado && !ELSE_pasado) {
   b7980:	f893 a000 	ldrb.w	sl, [r3]
   b7984:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b7a74 <loop+0x824>
   b7988:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b7a80 <loop+0x830>
              puerto = isNewActuador(id);
   b798c:	f7fe f890 	bl	b5ab0 <_Z13isNewActuadori>
   b7990:	f8c8 0000 	str.w	r0, [r8]
            if ( THEN_pasado && !ELSE_pasado) {
   b7994:	f1ba 0f00 	cmp.w	sl, #0
   b7998:	f040 8092 	bne.w	b7ac0 <loop+0x870>
              if (puerto == -1) {
   b799c:	3001      	adds	r0, #1
   b799e:	d157      	bne.n	b7a50 <loop+0x800>
                puerto = asignarPuerto(tagInfo[2]);
   b79a0:	68a0      	ldr	r0, [r4, #8]
   b79a2:	f7fe fc91 	bl	b62c8 <_Z13asignarPuertoi>
   b79a6:	4601      	mov	r1, r0
   b79a8:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b79ac:	68a0      	ldr	r0, [r4, #8]
   b79ae:	f7ff fa69 	bl	b6e84 <_Z8showPortii>
              if (puerto != -1) {
   b79b2:	f8d8 1000 	ldr.w	r1, [r8]
   b79b6:	1c4b      	adds	r3, r1, #1
   b79b8:	f000 80dc 	beq.w	b7b74 <loop+0x924>
                newActuador.condicion = estado;
   b79bc:	4b3c      	ldr	r3, [pc, #240]	; (b7ab0 <loop+0x860>)
                newActuador.bloque = numBloque;
   b79be:	f8d9 e000 	ldr.w	lr, [r9]
                newActuador.condicion = estado;
   b79c2:	f8d3 8000 	ldr.w	r8, [r3]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b79c6:	6838      	ldr	r0, [r7, #0]
                newActuador.id = id;
   b79c8:	f8db c000 	ldr.w	ip, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b79cc:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b79d0:	fb03 f20e 	mul.w	r2, r3, lr
   b79d4:	2314      	movs	r3, #20
   b79d6:	fb03 2300 	mla	r3, r3, r0, r2
   b79da:	4433      	add	r3, r6
   b79dc:	e9c3 c852 	strd	ip, r8, [r3, #328]	; 0x148
   b79e0:	f04f 0801 	mov.w	r8, #1
   b79e4:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b79e8:	f883 8158 	strb.w	r8, [r3, #344]	; 0x158
                bloques[numBloque].numActuadores++;
   b79ec:	18b3      	adds	r3, r6, r2
                numActuadoresBloque++;
   b79ee:	4440      	add	r0, r8
                bloques[numBloque].numActuadores++;
   b79f0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b79f4:	6038      	str	r0, [r7, #0]
                bloques[numBloque].numActuadores++;
   b79f6:	4442      	add	r2, r8
   b79f8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b79fc:	f1bc 0f00 	cmp.w	ip, #0
   b7a00:	f47f af11 	bne.w	b7826 <loop+0x5d6>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7a04:	b2c9      	uxtb	r1, r1
   b7a06:	eb01 0208 	add.w	r2, r1, r8
   b7a0a:	afc0      	add	r7, sp, #768	; 0x300
   b7a0c:	2305      	movs	r3, #5
   b7a0e:	b2d2      	uxtb	r2, r2
   b7a10:	4638      	mov	r0, r7
   b7a12:	f002 fcab 	bl	ba36c <_ZN12ChainableLEDC1Ehhh>
   b7a16:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7a1a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b7abc <loop+0x86c>
   b7a1e:	e889 0003 	stmia.w	r9, {r0, r1}
   b7a22:	4638      	mov	r0, r7
   b7a24:	f002 fcaf 	bl	ba386 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7a28:	4648      	mov	r0, r9
   b7a2a:	f002 fd51 	bl	ba4d0 <_ZN12ChainableLED4initEv>
                  init = true;
   b7a2e:	4b21      	ldr	r3, [pc, #132]	; (b7ab4 <loop+0x864>)
   b7a30:	f883 8000 	strb.w	r8, [r3]
   b7a34:	e6f7      	b.n	b7826 <loop+0x5d6>
                showBitmap(1,6,"");
   b7a36:	4918      	ldr	r1, [pc, #96]	; (b7a98 <loop+0x848>)
   b7a38:	a8c0      	add	r0, sp, #768	; 0x300
   b7a3a:	f003 f998 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7a3e:	aac0      	add	r2, sp, #768	; 0x300
   b7a40:	2106      	movs	r1, #6
   b7a42:	2001      	movs	r0, #1
   b7a44:	f7ff f8c4 	bl	b6bd0 <_Z10showBitmapii6String>
   b7a48:	a8c0      	add	r0, sp, #768	; 0x300
   b7a4a:	f003 f945 	bl	bacd8 <_ZN6StringD1Ev>
   b7a4e:	e768      	b.n	b7922 <loop+0x6d2>
                showBitmap(1,6,"");
   b7a50:	4911      	ldr	r1, [pc, #68]	; (b7a98 <loop+0x848>)
   b7a52:	a8c0      	add	r0, sp, #768	; 0x300
   b7a54:	f003 f98b 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7a58:	aac0      	add	r2, sp, #768	; 0x300
   b7a5a:	2106      	movs	r1, #6
   b7a5c:	2001      	movs	r0, #1
   b7a5e:	f7ff f8b7 	bl	b6bd0 <_Z10showBitmapii6String>
   b7a62:	a8c0      	add	r0, sp, #768	; 0x300
   b7a64:	f003 f938 	bl	bacd8 <_ZN6StringD1Ev>
   b7a68:	e7a3      	b.n	b79b2 <loop+0x762>
   b7a6a:	bf00      	nop
   b7a6c:	2003c729 	.word	0x2003c729
   b7a70:	000bc67f 	.word	0x000bc67f
   b7a74:	2003da2c 	.word	0x2003da2c
   b7a78:	000bc834 	.word	0x000bc834
   b7a7c:	000bc83c 	.word	0x000bc83c
   b7a80:	2003c688 	.word	0x2003c688
   b7a84:	000bc871 	.word	0x000bc871
   b7a88:	2003da18 	.word	0x2003da18
   b7a8c:	2003da1c 	.word	0x2003da1c
   b7a90:	2003da20 	.word	0x2003da20
   b7a94:	000bc6b7 	.word	0x000bc6b7
   b7a98:	000bc0e6 	.word	0x000bc0e6
   b7a9c:	000bc6ca 	.word	0x000bc6ca
   b7aa0:	000bc6ff 	.word	0x000bc6ff
   b7aa4:	000bc690 	.word	0x000bc690
   b7aa8:	2003c738 	.word	0x2003c738
   b7aac:	2003c728 	.word	0x2003c728
   b7ab0:	2003d6cc 	.word	0x2003d6cc
   b7ab4:	2003d6d6 	.word	0x2003d6d6
   b7ab8:	2003c73c 	.word	0x2003c73c
   b7abc:	2003d6e0 	.word	0x2003d6e0
              if (puerto == -1) {
   b7ac0:	3001      	adds	r0, #1
   b7ac2:	d14a      	bne.n	b7b5a <loop+0x90a>
                puerto = asignarPuerto(tagInfo[2]);
   b7ac4:	68a0      	ldr	r0, [r4, #8]
   b7ac6:	f7fe fbff 	bl	b62c8 <_Z13asignarPuertoi>
   b7aca:	4601      	mov	r1, r0
   b7acc:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b7ad0:	68a0      	ldr	r0, [r4, #8]
   b7ad2:	f7ff f9d7 	bl	b6e84 <_Z8showPortii>
              if (puerto != -1) {
   b7ad6:	f8d8 1000 	ldr.w	r1, [r8]
   b7ada:	1c48      	adds	r0, r1, #1
   b7adc:	d04a      	beq.n	b7b74 <loop+0x924>
                newActuador.condicion = estado;
   b7ade:	4ba3      	ldr	r3, [pc, #652]	; (b7d6c <loop+0xb1c>)
                newActuador.bloque = numBloque;
   b7ae0:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7ae4:	f8d7 c000 	ldr.w	ip, [r7]
                newActuador.condicion = estado;
   b7ae8:	f8d3 8000 	ldr.w	r8, [r3]
                newActuador.id = id;
   b7aec:	f8db 0000 	ldr.w	r0, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7af0:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7af4:	fb03 f20e 	mul.w	r2, r3, lr
   b7af8:	2314      	movs	r3, #20
   b7afa:	fb03 230c 	mla	r3, r3, ip, r2
   b7afe:	4433      	add	r3, r6
   b7b00:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b7b04:	e9c3 0852 	strd	r0, r8, [r3, #328]	; 0x148
   b7b08:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b7b0c:	2300      	movs	r3, #0
   b7b0e:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b7b12:	18b3      	adds	r3, r6, r2
   b7b14:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b7b18:	3201      	adds	r2, #1
   b7b1a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b7b1e:	f10c 0301 	add.w	r3, ip, #1
   b7b22:	603b      	str	r3, [r7, #0]
                if (id == 0)
   b7b24:	2800      	cmp	r0, #0
   b7b26:	f47f ae7e 	bne.w	b7826 <loop+0x5d6>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7b2a:	b2c9      	uxtb	r1, r1
   b7b2c:	1c4a      	adds	r2, r1, #1
   b7b2e:	afc0      	add	r7, sp, #768	; 0x300
   b7b30:	2305      	movs	r3, #5
   b7b32:	b2d2      	uxtb	r2, r2
   b7b34:	4638      	mov	r0, r7
   b7b36:	f002 fc19 	bl	ba36c <_ZN12ChainableLEDC1Ehhh>
   b7b3a:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7b3e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; b7de8 <loop+0xb98>
   b7b42:	e888 0003 	stmia.w	r8, {r0, r1}
   b7b46:	4638      	mov	r0, r7
   b7b48:	f002 fc1d 	bl	ba386 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7b4c:	4640      	mov	r0, r8
   b7b4e:	f002 fcbf 	bl	ba4d0 <_ZN12ChainableLED4initEv>
                  init = true;
   b7b52:	4b87      	ldr	r3, [pc, #540]	; (b7d70 <loop+0xb20>)
   b7b54:	2201      	movs	r2, #1
   b7b56:	701a      	strb	r2, [r3, #0]
   b7b58:	e665      	b.n	b7826 <loop+0x5d6>
                showBitmap(1,6,"");
   b7b5a:	4986      	ldr	r1, [pc, #536]	; (b7d74 <loop+0xb24>)
   b7b5c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b5e:	f003 f906 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7b62:	aac0      	add	r2, sp, #768	; 0x300
   b7b64:	2106      	movs	r1, #6
   b7b66:	2001      	movs	r0, #1
   b7b68:	f7ff f832 	bl	b6bd0 <_Z10showBitmapii6String>
   b7b6c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b6e:	f003 f8b3 	bl	bacd8 <_ZN6StringD1Ev>
   b7b72:	e7b0      	b.n	b7ad6 <loop+0x886>
                Serial.println("Puerto no disponible");
   b7b74:	f003 fc3e 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7b78:	497f      	ldr	r1, [pc, #508]	; (b7d78 <loop+0xb28>)
   b7b7a:	f003 f9ec 	bl	baf56 <_ZN5Print7printlnEPKc>
   b7b7e:	e652      	b.n	b7826 <loop+0x5d6>
              if (!IF_pasado) {
   b7b80:	4b7e      	ldr	r3, [pc, #504]	; (b7d7c <loop+0xb2c>)
   b7b82:	781b      	ldrb	r3, [r3, #0]
   b7b84:	2b00      	cmp	r3, #0
   b7b86:	f43f ae4e 	beq.w	b7826 <loop+0x5d6>
                Serial.println("Se esperaba THEN tag");
   b7b8a:	f003 fc33 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7b8e:	497c      	ldr	r1, [pc, #496]	; (b7d80 <loop+0xb30>)
   b7b90:	e68a      	b.n	b78a8 <loop+0x658>
            Serial.println("IF detectado");
   b7b92:	f003 fc2f 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7b96:	497b      	ldr	r1, [pc, #492]	; (b7d84 <loop+0xb34>)
   b7b98:	f003 f9dd 	bl	baf56 <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b7b9c:	f8d8 3000 	ldr.w	r3, [r8]
   b7ba0:	1c5a      	adds	r2, r3, #1
   b7ba2:	d003      	beq.n	b7bac <loop+0x95c>
   b7ba4:	bb53      	cbnz	r3, b7bfc <loop+0x9ac>
   b7ba6:	683a      	ldr	r2, [r7, #0]
   b7ba8:	2a00      	cmp	r2, #0
   b7baa:	dd27      	ble.n	b7bfc <loop+0x9ac>
              IF_pasado = true;
   b7bac:	4973      	ldr	r1, [pc, #460]	; (b7d7c <loop+0xb2c>)
              THEN_pasado = false;
   b7bae:	4876      	ldr	r0, [pc, #472]	; (b7d88 <loop+0xb38>)
              IF_pasado = true;
   b7bb0:	2201      	movs	r2, #1
   b7bb2:	700a      	strb	r2, [r1, #0]
              THEN_pasado = false;
   b7bb4:	2100      	movs	r1, #0
   b7bb6:	7001      	strb	r1, [r0, #0]
              ELSE_pasado = false;
   b7bb8:	4874      	ldr	r0, [pc, #464]	; (b7d8c <loop+0xb3c>)
              numBloque++;
   b7bba:	3301      	adds	r3, #1
   b7bbc:	f8c8 3000 	str.w	r3, [r8]
              ELSE_pasado = false;
   b7bc0:	7001      	strb	r1, [r0, #0]
              if (numBloque == 0){
   b7bc2:	b9cb      	cbnz	r3, b7bf8 <loop+0x9a8>
                if1 = true;
   b7bc4:	4872      	ldr	r0, [pc, #456]	; (b7d90 <loop+0xb40>)
                if2 = true;
   b7bc6:	7002      	strb	r2, [r0, #0]
              puertoAnalogico_bloque = 0;
   b7bc8:	4a72      	ldr	r2, [pc, #456]	; (b7d94 <loop+0xb44>)
              numCondicionalesBloque = 0;
   b7bca:	f8ca 1000 	str.w	r1, [sl]
              puertoAnalogico_bloque = 0;
   b7bce:	6011      	str	r1, [r2, #0]
              puertoDigital_bloque = 0;
   b7bd0:	4a71      	ldr	r2, [pc, #452]	; (b7d98 <loop+0xb48>)
              numSensoresBloque = 0;
   b7bd2:	f8c9 1000 	str.w	r1, [r9]
              puertoDigital_bloque = 0;
   b7bd6:	6011      	str	r1, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b7bd8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b7bdc:	4353      	muls	r3, r2
   b7bde:	18f2      	adds	r2, r6, r3
   b7be0:	50f1      	str	r1, [r6, r3]
              numActuadoresBloque = 0;
   b7be2:	6039      	str	r1, [r7, #0]
              bloques[numBloque] = nuevoBloque;
   b7be4:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
              showBitmap(3,0,"IF");
   b7be8:	496c      	ldr	r1, [pc, #432]	; (b7d9c <loop+0xb4c>)
              showBitmap(3,0,"THEN");
   b7bea:	a8c0      	add	r0, sp, #768	; 0x300
   b7bec:	f003 f8bf 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7bf0:	aac0      	add	r2, sp, #768	; 0x300
   b7bf2:	2100      	movs	r1, #0
   b7bf4:	2003      	movs	r0, #3
   b7bf6:	e66d      	b.n	b78d4 <loop+0x684>
                if2 = true;
   b7bf8:	4869      	ldr	r0, [pc, #420]	; (b7da0 <loop+0xb50>)
   b7bfa:	e7e4      	b.n	b7bc6 <loop+0x976>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b7bfc:	f003 fbfa 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7c00:	4968      	ldr	r1, [pc, #416]	; (b7da4 <loop+0xb54>)
   b7c02:	e651      	b.n	b78a8 <loop+0x658>
            Serial.println("AND/OR detectado");
   b7c04:	f003 fbf6 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7c08:	4967      	ldr	r1, [pc, #412]	; (b7da8 <loop+0xb58>)
   b7c0a:	f003 f9a4 	bl	baf56 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b7c0e:	4b5b      	ldr	r3, [pc, #364]	; (b7d7c <loop+0xb2c>)
   b7c10:	781b      	ldrb	r3, [r3, #0]
   b7c12:	2b00      	cmp	r3, #0
   b7c14:	f43f ae2e 	beq.w	b7874 <loop+0x624>
   b7c18:	f8da 3000 	ldr.w	r3, [sl]
   b7c1c:	f8d9 2000 	ldr.w	r2, [r9]
   b7c20:	4293      	cmp	r3, r2
   b7c22:	da19      	bge.n	b7c58 <loop+0xa08>
   b7c24:	683f      	ldr	r7, [r7, #0]
   b7c26:	b9cf      	cbnz	r7, b7c5c <loop+0xa0c>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7c28:	f8d8 2000 	ldr.w	r2, [r8]
   b7c2c:	f8d4 9008 	ldr.w	r9, [r4, #8]
   b7c30:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b7c34:	fb01 6202 	mla	r2, r1, r2, r6
   b7c38:	f1b9 0f00 	cmp.w	r9, #0
   b7c3c:	441a      	add	r2, r3
   b7c3e:	bf14      	ite	ne
   b7c40:	2101      	movne	r1, #1
   b7c42:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b7c44:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7c48:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b7c4c:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b7c50:	bf0c      	ite	eq
   b7c52:	4956      	ldreq	r1, [pc, #344]	; (b7dac <loop+0xb5c>)
   b7c54:	4956      	ldrne	r1, [pc, #344]	; (b7db0 <loop+0xb60>)
   b7c56:	e7c8      	b.n	b7bea <loop+0x99a>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b7c58:	f73f ade5 	bgt.w	b7826 <loop+0x5d6>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b7c5c:	f003 fbca 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7c60:	4954      	ldr	r1, [pc, #336]	; (b7db4 <loop+0xb64>)
   b7c62:	e621      	b.n	b78a8 <loop+0x658>
            Serial.println("THEN detectado");
   b7c64:	f003 fbc6 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7c68:	4953      	ldr	r1, [pc, #332]	; (b7db8 <loop+0xb68>)
   b7c6a:	f003 f974 	bl	baf56 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b7c6e:	4b43      	ldr	r3, [pc, #268]	; (b7d7c <loop+0xb2c>)
   b7c70:	781b      	ldrb	r3, [r3, #0]
   b7c72:	2b00      	cmp	r3, #0
   b7c74:	f43f adfe 	beq.w	b7874 <loop+0x624>
   b7c78:	f8d9 3000 	ldr.w	r3, [r9]
   b7c7c:	2b00      	cmp	r3, #0
   b7c7e:	dd0f      	ble.n	b7ca0 <loop+0xa50>
   b7c80:	f8da 2000 	ldr.w	r2, [sl]
   b7c84:	4293      	cmp	r3, r2
   b7c86:	dd0b      	ble.n	b7ca0 <loop+0xa50>
              THEN_pasado = true;
   b7c88:	4a3f      	ldr	r2, [pc, #252]	; (b7d88 <loop+0xb38>)
   b7c8a:	2301      	movs	r3, #1
   b7c8c:	7013      	strb	r3, [r2, #0]
              if (numBloque == 0){
   b7c8e:	f8d8 2000 	ldr.w	r2, [r8]
   b7c92:	b91a      	cbnz	r2, b7c9c <loop+0xa4c>
                then1 = true;
   b7c94:	4a49      	ldr	r2, [pc, #292]	; (b7dbc <loop+0xb6c>)
              showBitmap(3,0,"THEN");
   b7c96:	494a      	ldr	r1, [pc, #296]	; (b7dc0 <loop+0xb70>)
                then2 = true;
   b7c98:	7013      	strb	r3, [r2, #0]
              showBitmap(3,0,"THEN");
   b7c9a:	e7a6      	b.n	b7bea <loop+0x99a>
                then2 = true;
   b7c9c:	4a49      	ldr	r2, [pc, #292]	; (b7dc4 <loop+0xb74>)
   b7c9e:	e7fa      	b.n	b7c96 <loop+0xa46>
                Serial.println("Numero de sensores infucientes");
   b7ca0:	f003 fba8 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7ca4:	4948      	ldr	r1, [pc, #288]	; (b7dc8 <loop+0xb78>)
   b7ca6:	e5ff      	b.n	b78a8 <loop+0x658>
            Serial.println("ELSE detectado");
   b7ca8:	f003 fba4 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7cac:	4947      	ldr	r1, [pc, #284]	; (b7dcc <loop+0xb7c>)
   b7cae:	f003 f952 	bl	baf56 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b7cb2:	4b32      	ldr	r3, [pc, #200]	; (b7d7c <loop+0xb2c>)
   b7cb4:	781b      	ldrb	r3, [r3, #0]
   b7cb6:	2b00      	cmp	r3, #0
   b7cb8:	f43f addc 	beq.w	b7874 <loop+0x624>
   b7cbc:	683b      	ldr	r3, [r7, #0]
   b7cbe:	2b00      	cmp	r3, #0
   b7cc0:	dd0b      	ble.n	b7cda <loop+0xa8a>
              ELSE_pasado = true;
   b7cc2:	4a32      	ldr	r2, [pc, #200]	; (b7d8c <loop+0xb3c>)
   b7cc4:	2301      	movs	r3, #1
   b7cc6:	7013      	strb	r3, [r2, #0]
              if (numBloque == 0){
   b7cc8:	f8d8 2000 	ldr.w	r2, [r8]
   b7ccc:	b91a      	cbnz	r2, b7cd6 <loop+0xa86>
                else1 = true;
   b7cce:	4a40      	ldr	r2, [pc, #256]	; (b7dd0 <loop+0xb80>)
              showBitmap(3,0,"ELSE");
   b7cd0:	4940      	ldr	r1, [pc, #256]	; (b7dd4 <loop+0xb84>)
                else2 = true;
   b7cd2:	7013      	strb	r3, [r2, #0]
              showBitmap(3,0,"ELSE");
   b7cd4:	e789      	b.n	b7bea <loop+0x99a>
                else2 = true;
   b7cd6:	4a40      	ldr	r2, [pc, #256]	; (b7dd8 <loop+0xb88>)
   b7cd8:	e7fa      	b.n	b7cd0 <loop+0xa80>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b7cda:	f003 fb8b 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7cde:	493f      	ldr	r1, [pc, #252]	; (b7ddc <loop+0xb8c>)
   b7ce0:	e5e2      	b.n	b78a8 <loop+0x658>
        if ( tagInfo[0] != -1 ) {
   b7ce2:	3601      	adds	r6, #1
   b7ce4:	f43f acd8 	beq.w	b7698 <loop+0x448>
          Serial.println("Tarjeta inválida para este modo");
   b7ce8:	f003 fb84 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7cec:	493c      	ldr	r1, [pc, #240]	; (b7de0 <loop+0xb90>)
   b7cee:	f003 f932 	bl	baf56 <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b7cf2:	4920      	ldr	r1, [pc, #128]	; (b7d74 <loop+0xb24>)
   b7cf4:	a8c0      	add	r0, sp, #768	; 0x300
   b7cf6:	f003 f83a 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7cfa:	aac0      	add	r2, sp, #768	; 0x300
   b7cfc:	2100      	movs	r1, #0
   b7cfe:	e50e      	b.n	b771e <loop+0x4ce>
      if (!IF_pasado){
   b7d00:	4f1e      	ldr	r7, [pc, #120]	; (b7d7c <loop+0xb2c>)
   b7d02:	783b      	ldrb	r3, [r7, #0]
   b7d04:	b99b      	cbnz	r3, b7d2e <loop+0xade>
          ledObject = ChainableLED(puerto, puerto+1, 5);
   b7d06:	4b37      	ldr	r3, [pc, #220]	; (b7de4 <loop+0xb94>)
   b7d08:	4e37      	ldr	r6, [pc, #220]	; (b7de8 <loop+0xb98>)
   b7d0a:	7819      	ldrb	r1, [r3, #0]
   b7d0c:	acc0      	add	r4, sp, #768	; 0x300
   b7d0e:	1c4a      	adds	r2, r1, #1
   b7d10:	2305      	movs	r3, #5
   b7d12:	b2d2      	uxtb	r2, r2
   b7d14:	4620      	mov	r0, r4
   b7d16:	f002 fb29 	bl	ba36c <_ZN12ChainableLEDC1Ehhh>
   b7d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7d1e:	e886 0003 	stmia.w	r6, {r0, r1}
   b7d22:	4620      	mov	r0, r4
   b7d24:	f002 fb2f 	bl	ba386 <_ZN12ChainableLEDD1Ev>
          ledObject.init();
   b7d28:	4630      	mov	r0, r6
   b7d2a:	f002 fbd1 	bl	ba4d0 <_ZN12ChainableLED4initEv>
      serieBefore(0);
   b7d2e:	2000      	movs	r0, #0
   b7d30:	f7fe fa3a 	bl	b61a8 <_Z11serieBeforei>
      if (IF_pasado){
   b7d34:	783b      	ldrb	r3, [r7, #0]
   b7d36:	2b00      	cmp	r3, #0
   b7d38:	f000 80a1 	beq.w	b7e7e <loop+0xc2e>
        if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7d3c:	4e2b      	ldr	r6, [pc, #172]	; (b7dec <loop+0xb9c>)
   b7d3e:	6833      	ldr	r3, [r6, #0]
   b7d40:	2b00      	cmp	r3, #0
   b7d42:	d159      	bne.n	b7df8 <loop+0xba8>
   b7d44:	4b2a      	ldr	r3, [pc, #168]	; (b7df0 <loop+0xba0>)
   b7d46:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b7d4a:	2b00      	cmp	r3, #0
   b7d4c:	dc56      	bgt.n	b7dfc <loop+0xbac>
          showBitmap(2,4,"  acaba bloque 1");
   b7d4e:	4929      	ldr	r1, [pc, #164]	; (b7df4 <loop+0xba4>)
   b7d50:	a8c0      	add	r0, sp, #768	; 0x300
   b7d52:	f003 f80c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7d56:	aac0      	add	r2, sp, #768	; 0x300
   b7d58:	2104      	movs	r1, #4
   b7d5a:	2002      	movs	r0, #2
   b7d5c:	f7fe ff38 	bl	b6bd0 <_Z10showBitmapii6String>
   b7d60:	a8c0      	add	r0, sp, #768	; 0x300
   b7d62:	f002 ffb9 	bl	bacd8 <_ZN6StringD1Ev>
          play = false;
   b7d66:	2300      	movs	r3, #0
   b7d68:	702b      	strb	r3, [r5, #0]
   b7d6a:	e065      	b.n	b7e38 <loop+0xbe8>
   b7d6c:	2003d6cc 	.word	0x2003d6cc
   b7d70:	2003d6d6 	.word	0x2003d6d6
   b7d74:	000bc0e6 	.word	0x000bc0e6
   b7d78:	000bc459 	.word	0x000bc459
   b7d7c:	2003c729 	.word	0x2003c729
   b7d80:	000bc70f 	.word	0x000bc70f
   b7d84:	000bc724 	.word	0x000bc724
   b7d88:	2003c738 	.word	0x2003c738
   b7d8c:	2003c728 	.word	0x2003c728
   b7d90:	2003d6d4 	.word	0x2003d6d4
   b7d94:	2003da34 	.word	0x2003da34
   b7d98:	2003da38 	.word	0x2003da38
   b7d9c:	000bbfff 	.word	0x000bbfff
   b7da0:	2003d6d5 	.word	0x2003d6d5
   b7da4:	000bc731 	.word	0x000bc731
   b7da8:	000bc783 	.word	0x000bc783
   b7dac:	000bc018 	.word	0x000bc018
   b7db0:	000bc00b 	.word	0x000bc00b
   b7db4:	000bc794 	.word	0x000bc794
   b7db8:	000bc7c6 	.word	0x000bc7c6
   b7dbc:	2003e6ac 	.word	0x2003e6ac
   b7dc0:	000bc023 	.word	0x000bc023
   b7dc4:	2003e6ad 	.word	0x2003e6ad
   b7dc8:	000bc7d5 	.word	0x000bc7d5
   b7dcc:	000bc7f4 	.word	0x000bc7f4
   b7dd0:	2003d6c8 	.word	0x2003d6c8
   b7dd4:	000bc030 	.word	0x000bc030
   b7dd8:	2003d6c9 	.word	0x2003d6c9
   b7ddc:	000bc803 	.word	0x000bc803
   b7de0:	000bc894 	.word	0x000bc894
   b7de4:	2003da2c 	.word	0x2003da2c
   b7de8:	2003d6e0 	.word	0x2003d6e0
   b7dec:	2003c688 	.word	0x2003c688
   b7df0:	2003cd14 	.word	0x2003cd14
   b7df4:	000bc8d4 	.word	0x000bc8d4
        if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7df8:	2b01      	cmp	r3, #1
   b7dfa:	d1a8      	bne.n	b7d4e <loop+0xafe>
          valor = makeEvaluate(bloques[0]);
   b7dfc:	4caa      	ldr	r4, [pc, #680]	; (b80a8 <loop+0xe58>)
   b7dfe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b7e02:	f104 0110 	add.w	r1, r4, #16
   b7e06:	4668      	mov	r0, sp
   b7e08:	f003 fe42 	bl	bba90 <memcpy>
   b7e0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b7e10:	f7fd feac 	bl	b5b6c <_Z12makeEvaluate6BLOQUE>
   b7e14:	4ca5      	ldr	r4, [pc, #660]	; (b80ac <loop+0xe5c>)
          if (play){
   b7e16:	782b      	ldrb	r3, [r5, #0]
          valor = makeEvaluate(bloques[0]);
   b7e18:	7020      	strb	r0, [r4, #0]
          if (play){
   b7e1a:	b113      	cbz	r3, b7e22 <loop+0xbd2>
          ejecutarEvaluacion(valor, 0);}
   b7e1c:	2100      	movs	r1, #0
   b7e1e:	f7fe fa03 	bl	b6228 <_Z18ejecutarEvaluacionbi>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b7e22:	7823      	ldrb	r3, [r4, #0]
   b7e24:	2b00      	cmp	r3, #0
   b7e26:	d038      	beq.n	b7e9a <loop+0xc4a>
   b7e28:	49a1      	ldr	r1, [pc, #644]	; (b80b0 <loop+0xe60>)
   b7e2a:	48a2      	ldr	r0, [pc, #648]	; (b80b4 <loop+0xe64>)
   b7e2c:	f003 fe84 	bl	bbb38 <strcpy>
          display.println(buf);
   b7e30:	49a0      	ldr	r1, [pc, #640]	; (b80b4 <loop+0xe64>)
   b7e32:	48a1      	ldr	r0, [pc, #644]	; (b80b8 <loop+0xe68>)
   b7e34:	f003 f88f 	bl	baf56 <_ZN5Print7printlnEPKc>
        if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b7e38:	6836      	ldr	r6, [r6, #0]
   b7e3a:	2e01      	cmp	r6, #1
   b7e3c:	d11f      	bne.n	b7e7e <loop+0xc2e>
   b7e3e:	4c9a      	ldr	r4, [pc, #616]	; (b80a8 <loop+0xe58>)
   b7e40:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b7e44:	2b00      	cmp	r3, #0
   b7e46:	dd2c      	ble.n	b7ea2 <loop+0xc52>
          valor = makeEvaluate(bloques[1]);
   b7e48:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b7e4c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b7e50:	4668      	mov	r0, sp
   b7e52:	f003 fe1d 	bl	bba90 <memcpy>
   b7e56:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b7e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b7e5c:	f7fd fe86 	bl	b5b6c <_Z12makeEvaluate6BLOQUE>
   b7e60:	4c92      	ldr	r4, [pc, #584]	; (b80ac <loop+0xe5c>)
          ejecutarEvaluacion(valor, 1);
   b7e62:	4631      	mov	r1, r6
          valor = makeEvaluate(bloques[1]);
   b7e64:	7020      	strb	r0, [r4, #0]
          ejecutarEvaluacion(valor, 1);
   b7e66:	f7fe f9df 	bl	b6228 <_Z18ejecutarEvaluacionbi>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b7e6a:	7823      	ldrb	r3, [r4, #0]
   b7e6c:	b1bb      	cbz	r3, b7e9e <loop+0xc4e>
   b7e6e:	4993      	ldr	r1, [pc, #588]	; (b80bc <loop+0xe6c>)
          snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b7e70:	4890      	ldr	r0, [pc, #576]	; (b80b4 <loop+0xe64>)
   b7e72:	f003 fe61 	bl	bbb38 <strcpy>
          display.print(buf);
   b7e76:	498f      	ldr	r1, [pc, #572]	; (b80b4 <loop+0xe64>)
   b7e78:	488f      	ldr	r0, [pc, #572]	; (b80b8 <loop+0xe68>)
   b7e7a:	f003 f859 	bl	baf30 <_ZN5Print5printEPKc>
      display.display();
   b7e7e:	4c8e      	ldr	r4, [pc, #568]	; (b80b8 <loop+0xe68>)
   b7e80:	4620      	mov	r0, r4
   b7e82:	f002 f9d9 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b7e86:	4620      	mov	r0, r4
   b7e88:	f001 ff6e 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7e8c:	2300      	movs	r3, #0
   b7e8e:	6123      	str	r3, [r4, #16]
    if (!play){
   b7e90:	782b      	ldrb	r3, [r5, #0]
   b7e92:	2b00      	cmp	r3, #0
   b7e94:	f47f abe8 	bne.w	b7668 <loop+0x418>
   b7e98:	e405      	b.n	b76a6 <loop+0x456>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b7e9a:	4989      	ldr	r1, [pc, #548]	; (b80c0 <loop+0xe70>)
   b7e9c:	e7c5      	b.n	b7e2a <loop+0xbda>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b7e9e:	4989      	ldr	r1, [pc, #548]	; (b80c4 <loop+0xe74>)
   b7ea0:	e7e6      	b.n	b7e70 <loop+0xc20>
          snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b7ea2:	4989      	ldr	r1, [pc, #548]	; (b80c8 <loop+0xe78>)
   b7ea4:	e7e4      	b.n	b7e70 <loop+0xc20>
  } else if (MODE == 2) {
   b7ea6:	2f02      	cmp	r7, #2
   b7ea8:	f040 81a0 	bne.w	b81ec <loop+0xf9c>
    switch (tagInfo[0])
   b7eac:	2e02      	cmp	r6, #2
   b7eae:	d038      	beq.n	b7f22 <loop+0xcd2>
   b7eb0:	2e06      	cmp	r6, #6
   b7eb2:	f040 818b 	bne.w	b81cc <loop+0xf7c>
      switch (tagInfo[1])
   b7eb6:	6860      	ldr	r0, [r4, #4]
   b7eb8:	2801      	cmp	r0, #1
   b7eba:	d015      	beq.n	b7ee8 <loop+0xc98>
   b7ebc:	2802      	cmp	r0, #2
   b7ebe:	d021      	beq.n	b7f04 <loop+0xcb4>
   b7ec0:	b928      	cbnz	r0, b7ece <loop+0xc7e>
          cambioModo(tagInfo[2]);
   b7ec2:	68a0      	ldr	r0, [r4, #8]
   b7ec4:	f7ff f926 	bl	b7114 <_Z10cambioModoi>
          resetFunc();
   b7ec8:	4b80      	ldr	r3, [pc, #512]	; (b80cc <loop+0xe7c>)
   b7eca:	681b      	ldr	r3, [r3, #0]
   b7ecc:	4798      	blx	r3
    tagInfo[0] = -1;
   b7ece:	f04f 33ff 	mov.w	r3, #4294967295
   b7ed2:	6023      	str	r3, [r4, #0]
    if (play) {
   b7ed4:	782b      	ldrb	r3, [r5, #0]
   b7ed6:	2b00      	cmp	r3, #0
   b7ed8:	f43f abc6 	beq.w	b7668 <loop+0x418>
      reproducir();
   b7edc:	f7ff f8cc 	bl	b7078 <_Z10reproducirv>
      play = false;
   b7ee0:	2300      	movs	r3, #0
   b7ee2:	702b      	strb	r3, [r5, #0]
   b7ee4:	f7ff bbc0 	b.w	b7668 <loop+0x418>
          showBitmap(3,0,"Ejecutando...");   
   b7ee8:	4979      	ldr	r1, [pc, #484]	; (b80d0 <loop+0xe80>)
          play = true;
   b7eea:	7028      	strb	r0, [r5, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b7eec:	a8c0      	add	r0, sp, #768	; 0x300
   b7eee:	f002 ff3e 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b7ef2:	aac0      	add	r2, sp, #768	; 0x300
   b7ef4:	2100      	movs	r1, #0
   b7ef6:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b7ef8:	f7fe fe6a 	bl	b6bd0 <_Z10showBitmapii6String>
   b7efc:	a8c0      	add	r0, sp, #768	; 0x300
   b7efe:	f002 feeb 	bl	bacd8 <_ZN6StringD1Ev>
   b7f02:	e7e4      	b.n	b7ece <loop+0xc7e>
          if ( tagInfo[2] == 0 ) {
   b7f04:	68a6      	ldr	r6, [r4, #8]
   b7f06:	b91e      	cbnz	r6, b7f10 <loop+0xcc0>
            borradoPOP();
   b7f08:	f7fd fcb2 	bl	b5870 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b7f0c:	4971      	ldr	r1, [pc, #452]	; (b80d4 <loop+0xe84>)
   b7f0e:	e7ed      	b.n	b7eec <loop+0xc9c>
          } else if ( tagInfo[2] == 1 ){
   b7f10:	2e01      	cmp	r6, #1
   b7f12:	d103      	bne.n	b7f1c <loop+0xccc>
            borradoALL(2);
   b7f14:	f7fd fc82 	bl	b581c <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b7f18:	496f      	ldr	r1, [pc, #444]	; (b80d8 <loop+0xe88>)
   b7f1a:	e7e7      	b.n	b7eec <loop+0xc9c>
            borradoBLOQUE(2);
   b7f1c:	f7ff f800 	bl	b6f20 <_Z13borradoBLOQUEi>
   b7f20:	e7d5      	b.n	b7ece <loop+0xc7e>
      switch (tagInfo[1])
   b7f22:	6863      	ldr	r3, [r4, #4]
   b7f24:	2b01      	cmp	r3, #1
   b7f26:	d078      	beq.n	b801a <loop+0xdca>
   b7f28:	2b02      	cmp	r3, #2
   b7f2a:	f000 80ef 	beq.w	b810c <loop+0xebc>
   b7f2e:	2b00      	cmp	r3, #0
   b7f30:	d1cd      	bne.n	b7ece <loop+0xc7e>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b7f32:	68a1      	ldr	r1, [r4, #8]
   b7f34:	4e69      	ldr	r6, [pc, #420]	; (b80dc <loop+0xe8c>)
   b7f36:	4f6a      	ldr	r7, [pc, #424]	; (b80e0 <loop+0xe90>)
   b7f38:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7f3a:	f7fd fd09 	bl	b5950 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7f3e:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7f40:	a8c0      	add	r0, sp, #768	; 0x300
   b7f42:	f002 ff54 	bl	badee <_ZN6StringC1ERKS_>
   b7f46:	68e1      	ldr	r1, [r4, #12]
   b7f48:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7f4a:	f7fd fd33 	bl	b59b4 <_Z19decodificarTIPO_msgi>
   b7f4e:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7f50:	a8c0      	add	r0, sp, #768	; 0x300
   b7f52:	f002 ff9b 	bl	bae8c <_ZplRK15StringSumHelperRK6String>
   b7f56:	4963      	ldr	r1, [pc, #396]	; (b80e4 <loop+0xe94>)
   b7f58:	f002 ffa4 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b7f5c:	4601      	mov	r1, r0
   b7f5e:	6830      	ldr	r0, [r6, #0]
   b7f60:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b7f64:	f002 ff34 	bl	badd0 <_ZN6StringaSERKS_>
   b7f68:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7f6a:	f002 feb5 	bl	bacd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7f6e:	a8c0      	add	r0, sp, #768	; 0x300
   b7f70:	f002 feb2 	bl	bacd8 <_ZN6StringD1Ev>
   b7f74:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7f76:	f002 feaf 	bl	bacd8 <_ZN6StringD1Ev>
        if (posicion<23) {
   b7f7a:	6833      	ldr	r3, [r6, #0]
   b7f7c:	2b16      	cmp	r3, #22
   b7f7e:	dc45      	bgt.n	b800c <loop+0xdbc>
	const char * c_str() const { return buffer; }
   b7f80:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7f82:	484c      	ldr	r0, [pc, #304]	; (b80b4 <loop+0xe64>)
   b7f84:	58fa      	ldr	r2, [r7, r3]
   b7f86:	2140      	movs	r1, #64	; 0x40
   b7f88:	f002 fd30 	bl	ba9ec <snprintf>
          display.print(buf);
   b7f8c:	4949      	ldr	r1, [pc, #292]	; (b80b4 <loop+0xe64>)
   b7f8e:	484a      	ldr	r0, [pc, #296]	; (b80b8 <loop+0xe68>)
   b7f90:	f002 ffce 	bl	baf30 <_ZN5Print5printEPKc>
          display.display();
   b7f94:	4848      	ldr	r0, [pc, #288]	; (b80b8 <loop+0xe68>)
   b7f96:	f002 f94f 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b7f9a:	f003 fa2b 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b7f9e:	68a1      	ldr	r1, [r4, #8]
   b7fa0:	4607      	mov	r7, r0
   b7fa2:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7fa4:	f7fd fcd4 	bl	b5950 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7fa8:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7faa:	a8c0      	add	r0, sp, #768	; 0x300
   b7fac:	f002 ff1f 	bl	badee <_ZN6StringC1ERKS_>
   b7fb0:	68e1      	ldr	r1, [r4, #12]
   b7fb2:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7fb4:	f7fd fcfe 	bl	b59b4 <_Z19decodificarTIPO_msgi>
   b7fb8:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7fba:	a8c0      	add	r0, sp, #768	; 0x300
   b7fbc:	f002 ff66 	bl	bae8c <_ZplRK15StringSumHelperRK6String>
   b7fc0:	6801      	ldr	r1, [r0, #0]
   b7fc2:	4638      	mov	r0, r7
   b7fc4:	f7fc fdbb 	bl	b4b3e <_ZN5Print8printlnfEPKcz>
   b7fc8:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7fca:	f002 fe85 	bl	bacd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7fce:	a8c0      	add	r0, sp, #768	; 0x300
   b7fd0:	f002 fe82 	bl	bacd8 <_ZN6StringD1Ev>
   b7fd4:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7fd6:	f002 fe7f 	bl	bacd8 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b7fda:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b7fde:	f7fd fd03 	bl	b59e8 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b7fe2:	6833      	ldr	r3, [r6, #0]
   b7fe4:	4a40      	ldr	r2, [pc, #256]	; (b80e8 <loop+0xe98>)
   b7fe6:	68a1      	ldr	r1, [r4, #8]
   b7fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b7fec:	4a3f      	ldr	r2, [pc, #252]	; (b80ec <loop+0xe9c>)
   b7fee:	68e1      	ldr	r1, [r4, #12]
   b7ff0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b7ff4:	3301      	adds	r3, #1
   b7ff6:	6033      	str	r3, [r6, #0]
        if (bucle) {
   b7ff8:	4b3d      	ldr	r3, [pc, #244]	; (b80f0 <loop+0xea0>)
   b7ffa:	781b      	ldrb	r3, [r3, #0]
   b7ffc:	2b00      	cmp	r3, #0
   b7ffe:	f43f af66 	beq.w	b7ece <loop+0xc7e>
          tam_bucle++;
   b8002:	4a3c      	ldr	r2, [pc, #240]	; (b80f4 <loop+0xea4>)
   b8004:	6813      	ldr	r3, [r2, #0]
   b8006:	3301      	adds	r3, #1
   b8008:	6013      	str	r3, [r2, #0]
   b800a:	e760      	b.n	b7ece <loop+0xc7e>
        } else if (posicion==23){
   b800c:	2b17      	cmp	r3, #23
   b800e:	d1c4      	bne.n	b7f9a <loop+0xd4a>
          snprintf(buf, sizeof(buf), "...");
   b8010:	4939      	ldr	r1, [pc, #228]	; (b80f8 <loop+0xea8>)
   b8012:	4828      	ldr	r0, [pc, #160]	; (b80b4 <loop+0xe64>)
   b8014:	f003 fd90 	bl	bbb38 <strcpy>
   b8018:	e7b8      	b.n	b7f8c <loop+0xd3c>
        if (!bucle) {
   b801a:	4f35      	ldr	r7, [pc, #212]	; (b80f0 <loop+0xea0>)
   b801c:	783b      	ldrb	r3, [r7, #0]
   b801e:	2b00      	cmp	r3, #0
   b8020:	d134      	bne.n	b808c <loop+0xe3c>
          secuencia[posicion] = "Loop - ";
   b8022:	4e2e      	ldr	r6, [pc, #184]	; (b80dc <loop+0xe8c>)
   b8024:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b80e0 <loop+0xe90>
          Serial.println("Loop");
   b8028:	f003 f9e4 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b802c:	4933      	ldr	r1, [pc, #204]	; (b80fc <loop+0xeac>)
   b802e:	f002 ff92 	bl	baf56 <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b8032:	6830      	ldr	r0, [r6, #0]
   b8034:	4932      	ldr	r1, [pc, #200]	; (b8100 <loop+0xeb0>)
   b8036:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b803a:	f002 feeb 	bl	bae14 <_ZN6StringaSEPKc>
          if (posicion<23) {
   b803e:	6833      	ldr	r3, [r6, #0]
   b8040:	2b16      	cmp	r3, #22
   b8042:	dc1c      	bgt.n	b807e <loop+0xe2e>
	const char * c_str() const { return buffer; }
   b8044:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b8046:	481b      	ldr	r0, [pc, #108]	; (b80b4 <loop+0xe64>)
   b8048:	f858 2003 	ldr.w	r2, [r8, r3]
   b804c:	2140      	movs	r1, #64	; 0x40
   b804e:	f002 fccd 	bl	ba9ec <snprintf>
            display.print(buf);
   b8052:	4918      	ldr	r1, [pc, #96]	; (b80b4 <loop+0xe64>)
   b8054:	4818      	ldr	r0, [pc, #96]	; (b80b8 <loop+0xe68>)
   b8056:	f002 ff6b 	bl	baf30 <_ZN5Print5printEPKc>
            display.display();
   b805a:	4817      	ldr	r0, [pc, #92]	; (b80b8 <loop+0xe68>)
   b805c:	f002 f8ec 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b8060:	6833      	ldr	r3, [r6, #0]
   b8062:	4a21      	ldr	r2, [pc, #132]	; (b80e8 <loop+0xe98>)
   b8064:	f04f 31ff 	mov.w	r1, #4294967295
   b8068:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b806c:	4a1f      	ldr	r2, [pc, #124]	; (b80ec <loop+0xe9c>)
   b806e:	2100      	movs	r1, #0
   b8070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b8074:	3301      	adds	r3, #1
   b8076:	6033      	str	r3, [r6, #0]
          bucle = true;
   b8078:	2301      	movs	r3, #1
   b807a:	703b      	strb	r3, [r7, #0]
   b807c:	e727      	b.n	b7ece <loop+0xc7e>
          } else if (posicion==23){
   b807e:	2b17      	cmp	r3, #23
   b8080:	d1ee      	bne.n	b8060 <loop+0xe10>
            snprintf(buf, sizeof(buf), "...");
   b8082:	491d      	ldr	r1, [pc, #116]	; (b80f8 <loop+0xea8>)
   b8084:	480b      	ldr	r0, [pc, #44]	; (b80b4 <loop+0xe64>)
   b8086:	f003 fd57 	bl	bbb38 <strcpy>
   b808a:	e7e2      	b.n	b8052 <loop+0xe02>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b808c:	f003 f9b2 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b8090:	491c      	ldr	r1, [pc, #112]	; (b8104 <loop+0xeb4>)
          Serial.println("Loop sin comenzar o sin contenido");
   b8092:	f002 ff60 	bl	baf56 <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b8096:	491c      	ldr	r1, [pc, #112]	; (b8108 <loop+0xeb8>)
   b8098:	a8c0      	add	r0, sp, #768	; 0x300
   b809a:	f002 fe68 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b809e:	2102      	movs	r1, #2
   b80a0:	aac0      	add	r2, sp, #768	; 0x300
   b80a2:	4608      	mov	r0, r1
   b80a4:	e728      	b.n	b7ef8 <loop+0xca8>
   b80a6:	bf00      	nop
   b80a8:	2003cd14 	.word	0x2003cd14
   b80ac:	2003e6b8 	.word	0x2003e6b8
   b80b0:	000bc8b5 	.word	0x000bc8b5
   b80b4:	2003d2ed 	.word	0x2003d2ed
   b80b8:	2003d338 	.word	0x2003d338
   b80bc:	000bc8e5 	.word	0x000bc8e5
   b80c0:	000bc8c4 	.word	0x000bc8c4
   b80c4:	000bc8f4 	.word	0x000bc8f4
   b80c8:	000bc904 	.word	0x000bc904
   b80cc:	2003da3c 	.word	0x2003da3c
   b80d0:	000bc91e 	.word	0x000bc91e
   b80d4:	000bc92c 	.word	0x000bc92c
   b80d8:	000bc640 	.word	0x000bc640
   b80dc:	2003da28 	.word	0x2003da28
   b80e0:	2003da4c 	.word	0x2003da4c
   b80e4:	000bc98c 	.word	0x000bc98c
   b80e8:	2003d6f8 	.word	0x2003d6f8
   b80ec:	2003d3a8 	.word	0x2003d3a8
   b80f0:	2003d2ec 	.word	0x2003d2ec
   b80f4:	2003dc34 	.word	0x2003dc34
   b80f8:	000bc5d1 	.word	0x000bc5d1
   b80fc:	000bc984 	.word	0x000bc984
   b8100:	000bc943 	.word	0x000bc943
   b8104:	000bc94b 	.word	0x000bc94b
   b8108:	000bc0e6 	.word	0x000bc0e6
        if (bucle && tam_bucle>0) {
   b810c:	4fa2      	ldr	r7, [pc, #648]	; (b8398 <loop+0x1148>)
   b810e:	783b      	ldrb	r3, [r7, #0]
   b8110:	2b00      	cmp	r3, #0
   b8112:	d057      	beq.n	b81c4 <loop+0xf74>
   b8114:	f8df 82f0 	ldr.w	r8, [pc, #752]	; b8408 <loop+0x11b8>
   b8118:	f8d8 3000 	ldr.w	r3, [r8]
   b811c:	2b00      	cmp	r3, #0
   b811e:	dd51      	ble.n	b81c4 <loop+0xf74>
          Serial.println("END Loop");
   b8120:	f003 f968 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b8124:	499d      	ldr	r1, [pc, #628]	; (b839c <loop+0x114c>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b8126:	4e9e      	ldr	r6, [pc, #632]	; (b83a0 <loop+0x1150>)
   b8128:	f8df 92e0 	ldr.w	r9, [pc, #736]	; b840c <loop+0x11bc>
          Serial.println("END Loop");
   b812c:	f002 ff13 	bl	baf56 <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b8130:	68a1      	ldr	r1, [r4, #8]
   b8132:	220a      	movs	r2, #10
   b8134:	3102      	adds	r1, #2
   b8136:	a8bc      	add	r0, sp, #752	; 0x2f0
   b8138:	f002 fe7e 	bl	bae38 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b813c:	a9bc      	add	r1, sp, #752	; 0x2f0
   b813e:	a8c0      	add	r0, sp, #768	; 0x300
   b8140:	f002 fe55 	bl	badee <_ZN6StringC1ERKS_>
   b8144:	4997      	ldr	r1, [pc, #604]	; (b83a4 <loop+0x1154>)
   b8146:	a8c0      	add	r0, sp, #768	; 0x300
   b8148:	f002 feac 	bl	baea4 <_ZplRK15StringSumHelperPKc>
   b814c:	4601      	mov	r1, r0
   b814e:	6830      	ldr	r0, [r6, #0]
   b8150:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b8154:	f002 fe3c 	bl	badd0 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b8158:	a8c0      	add	r0, sp, #768	; 0x300
   b815a:	f002 fdbd 	bl	bacd8 <_ZN6StringD1Ev>
   b815e:	a8bc      	add	r0, sp, #752	; 0x2f0
   b8160:	f002 fdba 	bl	bacd8 <_ZN6StringD1Ev>
          if (posicion<23) {
   b8164:	6833      	ldr	r3, [r6, #0]
   b8166:	2b16      	cmp	r3, #22
   b8168:	dc25      	bgt.n	b81b6 <loop+0xf66>
	const char * c_str() const { return buffer; }
   b816a:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b816c:	488e      	ldr	r0, [pc, #568]	; (b83a8 <loop+0x1158>)
   b816e:	f859 2003 	ldr.w	r2, [r9, r3]
   b8172:	2140      	movs	r1, #64	; 0x40
   b8174:	f002 fc3a 	bl	ba9ec <snprintf>
            display.print(buf);
   b8178:	498b      	ldr	r1, [pc, #556]	; (b83a8 <loop+0x1158>)
   b817a:	488c      	ldr	r0, [pc, #560]	; (b83ac <loop+0x115c>)
   b817c:	f002 fed8 	bl	baf30 <_ZN5Print5printEPKc>
            display.display();
   b8180:	488a      	ldr	r0, [pc, #552]	; (b83ac <loop+0x115c>)
   b8182:	f002 f859 	bl	ba238 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b8186:	6833      	ldr	r3, [r6, #0]
   b8188:	4a89      	ldr	r2, [pc, #548]	; (b83b0 <loop+0x1160>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b818a:	488a      	ldr	r0, [pc, #552]	; (b83b4 <loop+0x1164>)
          notas[posicion] = -2;
   b818c:	f06f 0101 	mvn.w	r1, #1
   b8190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b8194:	f8d8 2000 	ldr.w	r2, [r8]
   b8198:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b819c:	68a1      	ldr	r1, [r4, #8]
   b819e:	3201      	adds	r2, #1
   b81a0:	1a9a      	subs	r2, r3, r2
          posicion++;
   b81a2:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b81a4:	3102      	adds	r1, #2
          posicion++;
   b81a6:	6033      	str	r3, [r6, #0]
          bucle = false;
   b81a8:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b81aa:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b81ae:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b81b0:	f8c8 3000 	str.w	r3, [r8]
   b81b4:	e68b      	b.n	b7ece <loop+0xc7e>
          } else if (posicion==23){
   b81b6:	2b17      	cmp	r3, #23
   b81b8:	d1e5      	bne.n	b8186 <loop+0xf36>
            snprintf(buf, sizeof(buf), "...");
   b81ba:	497f      	ldr	r1, [pc, #508]	; (b83b8 <loop+0x1168>)
   b81bc:	487a      	ldr	r0, [pc, #488]	; (b83a8 <loop+0x1158>)
   b81be:	f003 fcbb 	bl	bbb38 <strcpy>
   b81c2:	e7d9      	b.n	b8178 <loop+0xf28>
          Serial.println("Loop sin comenzar o sin contenido");
   b81c4:	f003 f916 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b81c8:	497c      	ldr	r1, [pc, #496]	; (b83bc <loop+0x116c>)
   b81ca:	e762      	b.n	b8092 <loop+0xe42>
      if ( tagInfo[0] != -1 ) {
   b81cc:	3601      	adds	r6, #1
   b81ce:	f43f ae7e 	beq.w	b7ece <loop+0xc7e>
        Serial.println("Tarjeta inválida para este modo");
   b81d2:	f003 f90f 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b81d6:	497a      	ldr	r1, [pc, #488]	; (b83c0 <loop+0x1170>)
   b81d8:	f002 febd 	bl	baf56 <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b81dc:	4979      	ldr	r1, [pc, #484]	; (b83c4 <loop+0x1174>)
   b81de:	a8c0      	add	r0, sp, #768	; 0x300
   b81e0:	f002 fdc5 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b81e4:	aac0      	add	r2, sp, #768	; 0x300
   b81e6:	2100      	movs	r1, #0
   b81e8:	4638      	mov	r0, r7
   b81ea:	e685      	b.n	b7ef8 <loop+0xca8>
    switch (tagInfo[0])
   b81ec:	2e03      	cmp	r6, #3
   b81ee:	4f76      	ldr	r7, [pc, #472]	; (b83c8 <loop+0x1178>)
   b81f0:	d058      	beq.n	b82a4 <loop+0x1054>
   b81f2:	2e06      	cmp	r6, #6
   b81f4:	f040 8089 	bne.w	b830a <loop+0x10ba>
   b81f8:	f7fd f976 	bl	b54e8 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b81fc:	6866      	ldr	r6, [r4, #4]
   b81fe:	2e01      	cmp	r6, #1
   b8200:	d029      	beq.n	b8256 <loop+0x1006>
   b8202:	2e02      	cmp	r6, #2
   b8204:	d029      	beq.n	b825a <loop+0x100a>
   b8206:	b92e      	cbnz	r6, b8214 <loop+0xfc4>
            cambioModo(tagInfo[2]);
   b8208:	68a0      	ldr	r0, [r4, #8]
   b820a:	f7fe ff83 	bl	b7114 <_Z10cambioModoi>
            resetFunc();
   b820e:	4b6f      	ldr	r3, [pc, #444]	; (b83cc <loop+0x117c>)
   b8210:	681b      	ldr	r3, [r3, #0]
   b8212:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b8214:	6823      	ldr	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b8216:	683e      	ldr	r6, [r7, #0]
    if (tagInfo[0]!=-1) { 
   b8218:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b821a:	bf1c      	itt	ne
   b821c:	f04f 33ff 	movne.w	r3, #4294967295
   b8220:	6023      	strne	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b8222:	2e00      	cmp	r6, #0
   b8224:	f340 80fe 	ble.w	b8424 <loop+0x11d4>
   b8228:	782b      	ldrb	r3, [r5, #0]
   b822a:	2b00      	cmp	r3, #0
   b822c:	f43f aa1c 	beq.w	b7668 <loop+0x418>
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b8230:	4b67      	ldr	r3, [pc, #412]	; (b83d0 <loop+0x1180>)
   b8232:	4d68      	ldr	r5, [pc, #416]	; (b83d4 <loop+0x1184>)
   b8234:	6919      	ldr	r1, [r3, #16]
   b8236:	6858      	ldr	r0, [r3, #4]
   b8238:	f7fd f86a 	bl	b5310 <_Z13leerSensorExpii>
   b823c:	68e3      	ldr	r3, [r4, #12]
   b823e:	6028      	str	r0, [r5, #0]
          switch (tagInfo[3])
   b8240:	3b02      	subs	r3, #2
   b8242:	2b0a      	cmp	r3, #10
   b8244:	d87c      	bhi.n	b8340 <loop+0x10f0>
   b8246:	e8df f003 	tbb	[pc, r3]
   b824a:	6f6a      	.short	0x6f6a
   b824c:	9f73717b 	.word	0x9f73717b
   b8250:	7b7b7b7b 	.word	0x7b7b7b7b
   b8254:	a1          	.byte	0xa1
   b8255:	00          	.byte	0x00
            play = true;
   b8256:	702e      	strb	r6, [r5, #0]
            break;
   b8258:	e7dc      	b.n	b8214 <loop+0xfc4>
            if ( tagInfo[2] == 1 ) {
   b825a:	68a3      	ldr	r3, [r4, #8]
   b825c:	2b01      	cmp	r3, #1
   b825e:	d10f      	bne.n	b8280 <loop+0x1030>
              borradoALL(0);
   b8260:	2000      	movs	r0, #0
   b8262:	f7fd fadb 	bl	b581c <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b8266:	495c      	ldr	r1, [pc, #368]	; (b83d8 <loop+0x1188>)
   b8268:	a8c0      	add	r0, sp, #768	; 0x300
   b826a:	f002 fd80 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b826e:	aac0      	add	r2, sp, #768	; 0x300
   b8270:	2100      	movs	r1, #0
   b8272:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b8274:	f7fe fcac 	bl	b6bd0 <_Z10showBitmapii6String>
   b8278:	a8c0      	add	r0, sp, #768	; 0x300
   b827a:	f002 fd2d 	bl	bacd8 <_ZN6StringD1Ev>
   b827e:	e7c9      	b.n	b8214 <loop+0xfc4>
              showBitmap(2,1,"");
   b8280:	4950      	ldr	r1, [pc, #320]	; (b83c4 <loop+0x1174>)
   b8282:	a8c0      	add	r0, sp, #768	; 0x300
   b8284:	f002 fd73 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b8288:	aac0      	add	r2, sp, #768	; 0x300
   b828a:	2101      	movs	r1, #1
   b828c:	4630      	mov	r0, r6
   b828e:	f7fe fc9f 	bl	b6bd0 <_Z10showBitmapii6String>
   b8292:	a8c0      	add	r0, sp, #768	; 0x300
   b8294:	f002 fd20 	bl	bacd8 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b8298:	f003 f8ac 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b829c:	494f      	ldr	r1, [pc, #316]	; (b83dc <loop+0x118c>)
   b829e:	f002 fe5a 	bl	baf56 <_ZN5Print7printlnEPKc>
   b82a2:	e7b7      	b.n	b8214 <loop+0xfc4>
        id = tagInfo[3];
   b82a4:	f8df a168 	ldr.w	sl, [pc, #360]	; b8410 <loop+0x11c0>
   b82a8:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b82aa:	f8df 9168 	ldr.w	r9, [pc, #360]	; b8414 <loop+0x11c4>
        if (tagInfo[1] == 0) {
   b82ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
        id = tagInfo[3];
   b82b2:	f8ca 3000 	str.w	r3, [sl]
        tipo = tagInfo[2];
   b82b6:	68a3      	ldr	r3, [r4, #8]
   b82b8:	f8c9 3000 	str.w	r3, [r9]
        if (tagInfo[1] == 0) {
   b82bc:	f1b8 0f00 	cmp.w	r8, #0
   b82c0:	d1a8      	bne.n	b8214 <loop+0xfc4>
          Serial.println("Sensor detectado");
   b82c2:	f003 f897 	bl	bb3f4 <_Z16_fetch_usbserialv>
   b82c6:	4946      	ldr	r1, [pc, #280]	; (b83e0 <loop+0x1190>)
   b82c8:	f002 fe45 	bl	baf56 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b82cc:	4a40      	ldr	r2, [pc, #256]	; (b83d0 <loop+0x1180>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82ce:	f8d9 3000 	ldr.w	r3, [r9]
          sensor.id = id;
   b82d2:	f8da 1000 	ldr.w	r1, [sl]
          bloques[0].sensores[0] = sensor;
   b82d6:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b82d8:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82da:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b82dc:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82e0:	bf18      	it	ne
   b82e2:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b82e4:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b82e6:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b82e8:	683a      	ldr	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b82ea:	4936      	ldr	r1, [pc, #216]	; (b83c4 <loop+0x1174>)
          numSensoresBloque++;
   b82ec:	3201      	adds	r2, #1
   b82ee:	603a      	str	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b82f0:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b82f2:	b92b      	cbnz	r3, b8300 <loop+0x10b0>
            showBitmap(1,3,""); //A0
   b82f4:	f002 fd3b 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b82f8:	aac0      	add	r2, sp, #768	; 0x300
   b82fa:	4631      	mov	r1, r6
            showBitmap(1,0,""); //D2
   b82fc:	2001      	movs	r0, #1
   b82fe:	e7b9      	b.n	b8274 <loop+0x1024>
   b8300:	f002 fd35 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b8304:	aac0      	add	r2, sp, #768	; 0x300
   b8306:	4641      	mov	r1, r8
   b8308:	e7f8      	b.n	b82fc <loop+0x10ac>
        if ( tagInfo[0] != -1 ) {
   b830a:	3601      	adds	r6, #1
   b830c:	d082      	beq.n	b8214 <loop+0xfc4>
          showBitmap(2,0,"");
   b830e:	492d      	ldr	r1, [pc, #180]	; (b83c4 <loop+0x1174>)
   b8310:	a8c0      	add	r0, sp, #768	; 0x300
   b8312:	f002 fd2c 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b8316:	aac0      	add	r2, sp, #768	; 0x300
   b8318:	2100      	movs	r1, #0
   b831a:	2002      	movs	r0, #2
   b831c:	e7aa      	b.n	b8274 <loop+0x1024>
              snprintf(buf, sizeof(buf), "         Luz:");
   b831e:	4931      	ldr	r1, [pc, #196]	; (b83e4 <loop+0x1194>)
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b8320:	4821      	ldr	r0, [pc, #132]	; (b83a8 <loop+0x1158>)
   b8322:	f003 fc09 	bl	bbb38 <strcpy>
              break;
   b8326:	e00b      	b.n	b8340 <loop+0x10f0>
              snprintf(buf, sizeof(buf), "  Ruido (decibelios):");
   b8328:	492f      	ldr	r1, [pc, #188]	; (b83e8 <loop+0x1198>)
   b832a:	e7f9      	b.n	b8320 <loop+0x10d0>
              snprintf(buf, sizeof(buf), "   Angulo (grados):");
   b832c:	492f      	ldr	r1, [pc, #188]	; (b83ec <loop+0x119c>)
   b832e:	e7f7      	b.n	b8320 <loop+0x10d0>
              snprintf(buf, sizeof(buf), "  Temperatura (grados):");
   b8330:	492f      	ldr	r1, [pc, #188]	; (b83f0 <loop+0x11a0>)
   b8332:	481d      	ldr	r0, [pc, #116]	; (b83a8 <loop+0x1158>)
   b8334:	f003 fc00 	bl	bbb38 <strcpy>
              val = ajusta_temp(val);
   b8338:	6828      	ldr	r0, [r5, #0]
   b833a:	f7fe f843 	bl	b63c4 <_Z11ajusta_tempi>
   b833e:	6028      	str	r0, [r5, #0]
          display.clearDisplay();
   b8340:	4c1a      	ldr	r4, [pc, #104]	; (b83ac <loop+0x115c>)
   b8342:	4620      	mov	r0, r4
   b8344:	f001 fd10 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b8348:	2300      	movs	r3, #0
          display.print(buf);
   b834a:	4917      	ldr	r1, [pc, #92]	; (b83a8 <loop+0x1158>)
   b834c:	6123      	str	r3, [r4, #16]
   b834e:	4620      	mov	r0, r4
   b8350:	f002 fdee 	bl	baf30 <_ZN5Print5printEPKc>
          snprintf(buf, sizeof(buf), "%d", val);
   b8354:	682b      	ldr	r3, [r5, #0]
   b8356:	4a27      	ldr	r2, [pc, #156]	; (b83f4 <loop+0x11a4>)
   b8358:	4813      	ldr	r0, [pc, #76]	; (b83a8 <loop+0x1158>)
   b835a:	2140      	movs	r1, #64	; 0x40
   b835c:	f002 fb46 	bl	ba9ec <snprintf>
          if (val <= 9){
   b8360:	682b      	ldr	r3, [r5, #0]
   b8362:	2b09      	cmp	r3, #9
   b8364:	dc14      	bgt.n	b8390 <loop+0x1140>
   b8366:	4b24      	ldr	r3, [pc, #144]	; (b83f8 <loop+0x11a8>)
   b8368:	6123      	str	r3, [r4, #16]
          display.setTextSize(4);
   b836a:	4810      	ldr	r0, [pc, #64]	; (b83ac <loop+0x115c>)
   b836c:	2104      	movs	r1, #4
   b836e:	f000 fe36 	bl	b8fde <_ZN12Adafruit_GFX11setTextSizeEh>
          display.print(buf);
   b8372:	490d      	ldr	r1, [pc, #52]	; (b83a8 <loop+0x1158>)
   b8374:	480d      	ldr	r0, [pc, #52]	; (b83ac <loop+0x115c>)
   b8376:	f002 fddb 	bl	baf30 <_ZN5Print5printEPKc>
          display.setTextSize(1);
   b837a:	480c      	ldr	r0, [pc, #48]	; (b83ac <loop+0x115c>)
   b837c:	2101      	movs	r1, #1
   b837e:	f000 fe2e 	bl	b8fde <_ZN12Adafruit_GFX11setTextSizeEh>
          display.display();
   b8382:	480a      	ldr	r0, [pc, #40]	; (b83ac <loop+0x115c>)
   b8384:	f7ff b87e 	b.w	b7484 <loop+0x234>
              snprintf(buf, sizeof(buf), "   Distancia (cm):");
   b8388:	491c      	ldr	r1, [pc, #112]	; (b83fc <loop+0x11ac>)
   b838a:	e7c9      	b.n	b8320 <loop+0x10d0>
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b838c:	491c      	ldr	r1, [pc, #112]	; (b8400 <loop+0x11b0>)
   b838e:	e7c7      	b.n	b8320 <loop+0x10d0>
          } else if (val <= 99){
   b8390:	2b63      	cmp	r3, #99	; 0x63
   b8392:	dc41      	bgt.n	b8418 <loop+0x11c8>
   b8394:	4b1b      	ldr	r3, [pc, #108]	; (b8404 <loop+0x11b4>)
   b8396:	e7e7      	b.n	b8368 <loop+0x1118>
   b8398:	2003d2ec 	.word	0x2003d2ec
   b839c:	000bc980 	.word	0x000bc980
   b83a0:	2003da28 	.word	0x2003da28
   b83a4:	000bc989 	.word	0x000bc989
   b83a8:	2003d2ed 	.word	0x2003d2ed
   b83ac:	2003d338 	.word	0x2003d338
   b83b0:	2003d6f8 	.word	0x2003d6f8
   b83b4:	2003d3a8 	.word	0x2003d3a8
   b83b8:	000bc5d1 	.word	0x000bc5d1
   b83bc:	000bc990 	.word	0x000bc990
   b83c0:	000bc894 	.word	0x000bc894
   b83c4:	000bc0e6 	.word	0x000bc0e6
   b83c8:	2003da20 	.word	0x2003da20
   b83cc:	2003da3c 	.word	0x2003da3c
   b83d0:	2003cd14 	.word	0x2003cd14
   b83d4:	2003e6b4 	.word	0x2003e6b4
   b83d8:	000bc640 	.word	0x000bc640
   b83dc:	000bc65b 	.word	0x000bc65b
   b83e0:	000bc67f 	.word	0x000bc67f
   b83e4:	000bc9b2 	.word	0x000bc9b2
   b83e8:	000bc9c0 	.word	0x000bc9c0
   b83ec:	000bc9d6 	.word	0x000bc9d6
   b83f0:	000bc9ea 	.word	0x000bc9ea
   b83f4:	000bc891 	.word	0x000bc891
   b83f8:	00190035 	.word	0x00190035
   b83fc:	000bca02 	.word	0x000bca02
   b8400:	000bca15 	.word	0x000bca15
   b8404:	00190028 	.word	0x00190028
   b8408:	2003dc34 	.word	0x2003dc34
   b840c:	2003da4c 	.word	0x2003da4c
   b8410:	2003d6d0 	.word	0x2003d6d0
   b8414:	2003e6b0 	.word	0x2003e6b0
          } else if (val <= 999){
   b8418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b841c:	bfb4      	ite	lt
   b841e:	4b0c      	ldrlt	r3, [pc, #48]	; (b8450 <loop+0x1200>)
   b8420:	4b0c      	ldrge	r3, [pc, #48]	; (b8454 <loop+0x1204>)
   b8422:	e7a1      	b.n	b8368 <loop+0x1118>
        }  else if (numSensoresBloque==0 && play == true) {
   b8424:	f47f a920 	bne.w	b7668 <loop+0x418>
   b8428:	782b      	ldrb	r3, [r5, #0]
   b842a:	2b00      	cmp	r3, #0
   b842c:	f43f a91c 	beq.w	b7668 <loop+0x418>
              showBitmap(2,4,"");
   b8430:	4909      	ldr	r1, [pc, #36]	; (b8458 <loop+0x1208>)
   b8432:	a8c0      	add	r0, sp, #768	; 0x300
   b8434:	f002 fc9b 	bl	bad6e <_ZN6StringC1EPK19__FlashStringHelper>
   b8438:	aac0      	add	r2, sp, #768	; 0x300
   b843a:	2104      	movs	r1, #4
   b843c:	2002      	movs	r0, #2
   b843e:	f7fe fbc7 	bl	b6bd0 <_Z10showBitmapii6String>
   b8442:	a8c0      	add	r0, sp, #768	; 0x300
   b8444:	f002 fc48 	bl	bacd8 <_ZN6StringD1Ev>
              play=false;
   b8448:	702e      	strb	r6, [r5, #0]
   b844a:	f7ff b90d 	b.w	b7668 <loop+0x418>
   b844e:	bf00      	nop
   b8450:	0019001b 	.word	0x0019001b
   b8454:	0019000a 	.word	0x0019000a
   b8458:	000bc0e6 	.word	0x000bc0e6

000b845c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b845c:	4770      	bx	lr

000b845e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b845e:	b510      	push	{r4, lr}
  }
   b8460:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b8462:	4604      	mov	r4, r0
  }
   b8464:	f7fc faef 	bl	b4a46 <_ZdlPvj>
   b8468:	4620      	mov	r0, r4
   b846a:	bd10      	pop	{r4, pc}

000b846c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b846c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b846e:	4604      	mov	r4, r0
   b8470:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b8472:	7922      	ldrb	r2, [r4, #4]
   b8474:	68a3      	ldr	r3, [r4, #8]
   b8476:	b132      	cbz	r2, b8486 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b8478:	b9a3      	cbnz	r3, b84a4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b847a:	490b      	ldr	r1, [pc, #44]	; (b84a8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b847c:	b002      	add	sp, #8
   b847e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b8482:	f002 bd55 	b.w	baf30 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b8486:	4a09      	ldr	r2, [pc, #36]	; (b84ac <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b8488:	7b26      	ldrb	r6, [r4, #12]
   b848a:	4d09      	ldr	r5, [pc, #36]	; (b84b0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b848c:	4909      	ldr	r1, [pc, #36]	; (b84b4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b848e:	7b64      	ldrb	r4, [r4, #13]
   b8490:	2e01      	cmp	r6, #1
   b8492:	bf18      	it	ne
   b8494:	4629      	movne	r1, r5
   b8496:	e9cd 1400 	strd	r1, r4, [sp]
   b849a:	4907      	ldr	r1, [pc, #28]	; (b84b8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b849c:	f7fc fb41 	bl	b4b22 <_ZN5Print6printfEPKcz>
  }
   b84a0:	b002      	add	sp, #8
   b84a2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b84a4:	4a05      	ldr	r2, [pc, #20]	; (b84bc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b84a6:	e7ef      	b.n	b8488 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b84a8:	000bce41 	.word	0x000bce41
   b84ac:	000bc0e6 	.word	0x000bc0e6
   b84b0:	000bce3d 	.word	0x000bce3d
   b84b4:	000bce39 	.word	0x000bce39
   b84b8:	000bce57 	.word	0x000bce57
   b84bc:	000bce30 	.word	0x000bce30

000b84c0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b84c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84c4:	b085      	sub	sp, #20
   b84c6:	461f      	mov	r7, r3
   b84c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b84cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b84d0:	eba8 0902 	sub.w	r9, r8, r2
   b84d4:	eba7 0a01 	sub.w	sl, r7, r1
   b84d8:	f1b9 0f00 	cmp.w	r9, #0
   b84dc:	bfb8      	it	lt
   b84de:	f1c9 0900 	rsblt	r9, r9, #0
   b84e2:	f1ba 0f00 	cmp.w	sl, #0
   b84e6:	bfb8      	it	lt
   b84e8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b84ec:	45d1      	cmp	r9, sl
        uint16_t color) {
   b84ee:	4683      	mov	fp, r0
   b84f0:	460c      	mov	r4, r1
   b84f2:	4615      	mov	r5, r2
    if (steep) {
   b84f4:	dd04      	ble.n	b8500 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b84f6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b84f8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b84fa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b84fc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b84fe:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8500:	42bc      	cmp	r4, r7
   b8502:	dd05      	ble.n	b8510 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b8504:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b8506:	4645      	mov	r5, r8
   b8508:	4690      	mov	r8, r2
    if (x0 > x1) {
   b850a:	4622      	mov	r2, r4
   b850c:	463c      	mov	r4, r7
   b850e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8510:	1b3e      	subs	r6, r7, r4
   b8512:	b2b2      	uxth	r2, r6
   b8514:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b8516:	eba8 0205 	sub.w	r2, r8, r5
   b851a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b851e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b8522:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b8526:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b852a:	4545      	cmp	r5, r8
   b852c:	bfb4      	ite	lt
   b852e:	2201      	movlt	r2, #1
   b8530:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b8534:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b8536:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b8538:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b853a:	42bc      	cmp	r4, r7
   b853c:	dc1c      	bgt.n	b8578 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b853e:	f8db 2000 	ldr.w	r2, [fp]
   b8542:	9303      	str	r3, [sp, #12]
        if (steep) {
   b8544:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b8546:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b854a:	bfc7      	ittee	gt
   b854c:	4629      	movgt	r1, r5
   b854e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b8550:	462a      	movle	r2, r5
   b8552:	4621      	movle	r1, r4
   b8554:	4658      	mov	r0, fp
   b8556:	47c0      	blx	r8
        }
        err -= dy;
   b8558:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b855a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b855c:	1ab6      	subs	r6, r6, r2
   b855e:	b2b1      	uxth	r1, r6
   b8560:	b236      	sxth	r6, r6
        if (err < 0) {
   b8562:	2e00      	cmp	r6, #0
   b8564:	da05      	bge.n	b8572 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b8566:	9a02      	ldr	r2, [sp, #8]
   b8568:	4415      	add	r5, r2
            err += dx;
   b856a:	9a00      	ldr	r2, [sp, #0]
   b856c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b856e:	b22d      	sxth	r5, r5
            err += dx;
   b8570:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b8572:	3401      	adds	r4, #1
   b8574:	b224      	sxth	r4, r4
   b8576:	e7e0      	b.n	b853a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b8578:	b005      	add	sp, #20
   b857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b857e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b857e:	4770      	bx	lr

000b8580 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b8580:	b410      	push	{r4}
    drawPixel(x, y, color);
   b8582:	6804      	ldr	r4, [r0, #0]
   b8584:	6924      	ldr	r4, [r4, #16]
   b8586:	46a4      	mov	ip, r4
}
   b8588:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b858c:	4760      	bx	ip

000b858e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b858e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b8590:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b8592:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b8596:	9502      	str	r5, [sp, #8]
   b8598:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b859a:	46a4      	mov	ip, r4
}
   b859c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b859e:	4760      	bx	ip

000b85a0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b85a0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b85a2:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b85a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b85a8:	9502      	str	r5, [sp, #8]
   b85aa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b85ac:	46a4      	mov	ip, r4
}
   b85ae:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b85b0:	4760      	bx	ip

000b85b2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b85b2:	b470      	push	{r4, r5, r6}
   b85b4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b85b8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b85bc:	6804      	ldr	r4, [r0, #0]
   b85be:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b85c2:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b85c4:	46a4      	mov	ip, r4
}
   b85c6:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b85c8:	4760      	bx	ip

000b85ca <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b85ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b85ce:	461c      	mov	r4, r3
    startWrite();
   b85d0:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b85d2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b85d6:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b85d8:	4605      	mov	r5, r0
   b85da:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b85dc:	3c01      	subs	r4, #1
   b85de:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b85e0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b85e2:	b224      	sxth	r4, r4
    startWrite();
   b85e4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b85e6:	682b      	ldr	r3, [r5, #0]
   b85e8:	f8cd 8004 	str.w	r8, [sp, #4]
   b85ec:	9400      	str	r4, [sp, #0]
   b85ee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b85f0:	4628      	mov	r0, r5
   b85f2:	463b      	mov	r3, r7
   b85f4:	4632      	mov	r2, r6
   b85f6:	4639      	mov	r1, r7
   b85f8:	47a0      	blx	r4
    endWrite();
   b85fa:	682b      	ldr	r3, [r5, #0]
   b85fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b85fe:	4628      	mov	r0, r5
}
   b8600:	b002      	add	sp, #8
   b8602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8606:	4718      	bx	r3

000b8608 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b860c:	461d      	mov	r5, r3
    startWrite();
   b860e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8610:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8614:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b8616:	4604      	mov	r4, r0
   b8618:	4617      	mov	r7, r2
   b861a:	460e      	mov	r6, r1
    startWrite();
   b861c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b861e:	e9cd 7800 	strd	r7, r8, [sp]
   b8622:	6822      	ldr	r2, [r4, #0]
   b8624:	1e6b      	subs	r3, r5, #1
   b8626:	4433      	add	r3, r6
   b8628:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b862a:	4620      	mov	r0, r4
   b862c:	b21b      	sxth	r3, r3
   b862e:	463a      	mov	r2, r7
   b8630:	4631      	mov	r1, r6
   b8632:	47a8      	blx	r5
    endWrite();
   b8634:	6823      	ldr	r3, [r4, #0]
   b8636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8638:	4620      	mov	r0, r4
}
   b863a:	b002      	add	sp, #8
   b863c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8640:	4718      	bx	r3

000b8642 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8642:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8646:	461e      	mov	r6, r3
    startWrite();
   b8648:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b864a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b864e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8650:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b8654:	460c      	mov	r4, r1
   b8656:	4605      	mov	r5, r0
   b8658:	4617      	mov	r7, r2
    startWrite();
   b865a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b865c:	4426      	add	r6, r4
   b865e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b8660:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b8662:	da0b      	bge.n	b867c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b8664:	f8cd 8000 	str.w	r8, [sp]
   b8668:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b866c:	4621      	mov	r1, r4
   b866e:	464b      	mov	r3, r9
   b8670:	463a      	mov	r2, r7
   b8672:	4628      	mov	r0, r5
   b8674:	3401      	adds	r4, #1
   b8676:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b8678:	b224      	sxth	r4, r4
   b867a:	e7f0      	b.n	b865e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b867e:	4628      	mov	r0, r5
}
   b8680:	b002      	add	sp, #8
   b8682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8686:	4718      	bx	r3

000b8688 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b8688:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b868a:	6802      	ldr	r2, [r0, #0]
   b868c:	9101      	str	r1, [sp, #4]
   b868e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b8692:	9100      	str	r1, [sp, #0]
   b8694:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b8696:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b869a:	2200      	movs	r2, #0
   b869c:	4611      	mov	r1, r2
   b869e:	47a0      	blx	r4
}
   b86a0:	b002      	add	sp, #8
   b86a2:	bd10      	pop	{r4, pc}

000b86a4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b86a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b86a8:	4299      	cmp	r1, r3
        uint16_t color) {
   b86aa:	4616      	mov	r6, r2
   b86ac:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b86b0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86b4:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b86b6:	4680      	mov	r8, r0
   b86b8:	460d      	mov	r5, r1
   b86ba:	461c      	mov	r4, r3
    if(x0 == x1){
   b86bc:	d113      	bne.n	b86e6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b86be:	42be      	cmp	r6, r7
   b86c0:	bfc8      	it	gt
   b86c2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86c4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b86c8:	bfc4      	itt	gt
   b86ca:	463e      	movgt	r6, r7
   b86cc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86ce:	1c7b      	adds	r3, r7, #1
   b86d0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b86d2:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b86d4:	b21b      	sxth	r3, r3
   b86d6:	4632      	mov	r2, r6
   b86d8:	4629      	mov	r1, r5
   b86da:	4640      	mov	r0, r8
   b86dc:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b86de:	b003      	add	sp, #12
   b86e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b86e4:	4760      	bx	ip
    } else if(y0 == y1){
   b86e6:	42be      	cmp	r6, r7
   b86e8:	d10a      	bne.n	b8700 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b86ea:	4299      	cmp	r1, r3
   b86ec:	bfc2      	ittt	gt
   b86ee:	460b      	movgt	r3, r1
   b86f0:	4625      	movgt	r5, r4
   b86f2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b86f4:	1c63      	adds	r3, r4, #1
   b86f6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b86fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b86fc:	1b5b      	subs	r3, r3, r5
   b86fe:	e7e9      	b.n	b86d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8700:	6953      	ldr	r3, [r2, #20]
   b8702:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8704:	e9cd 7900 	strd	r7, r9, [sp]
   b8708:	f8d8 3000 	ldr.w	r3, [r8]
   b870c:	4640      	mov	r0, r8
   b870e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8710:	4632      	mov	r2, r6
   b8712:	4623      	mov	r3, r4
   b8714:	4629      	mov	r1, r5
   b8716:	47b8      	blx	r7
        endWrite();
   b8718:	f8d8 3000 	ldr.w	r3, [r8]
   b871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b871e:	4640      	mov	r0, r8
}
   b8720:	b003      	add	sp, #12
   b8722:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b8726:	4718      	bx	r3

000b8728 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8728:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b872c:	461d      	mov	r5, r3
    startWrite();
   b872e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8730:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8734:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8736:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b873a:	4604      	mov	r4, r0
   b873c:	460f      	mov	r7, r1
   b873e:	4616      	mov	r6, r2
    startWrite();
   b8740:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b8742:	6823      	ldr	r3, [r4, #0]
   b8744:	f8cd 8000 	str.w	r8, [sp]
   b8748:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b874c:	4632      	mov	r2, r6
   b874e:	462b      	mov	r3, r5
   b8750:	4639      	mov	r1, r7
   b8752:	4620      	mov	r0, r4
   b8754:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b8756:	6823      	ldr	r3, [r4, #0]
   b8758:	f8cd 8000 	str.w	r8, [sp]
   b875c:	f109 32ff 	add.w	r2, r9, #4294967295
   b8760:	4432      	add	r2, r6
   b8762:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8766:	4639      	mov	r1, r7
   b8768:	462b      	mov	r3, r5
   b876a:	4620      	mov	r0, r4
   b876c:	b212      	sxth	r2, r2
   b876e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b8770:	6823      	ldr	r3, [r4, #0]
   b8772:	f8cd 8000 	str.w	r8, [sp]
   b8776:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b877a:	4632      	mov	r2, r6
   b877c:	464b      	mov	r3, r9
   b877e:	4639      	mov	r1, r7
   b8780:	4620      	mov	r0, r4
   b8782:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b8784:	1e6b      	subs	r3, r5, #1
   b8786:	19d9      	adds	r1, r3, r7
   b8788:	6823      	ldr	r3, [r4, #0]
   b878a:	f8cd 8000 	str.w	r8, [sp]
   b878e:	6a1d      	ldr	r5, [r3, #32]
   b8790:	4620      	mov	r0, r4
   b8792:	464b      	mov	r3, r9
   b8794:	4632      	mov	r2, r6
   b8796:	b209      	sxth	r1, r1
   b8798:	47a8      	blx	r5
    endWrite();
   b879a:	6823      	ldr	r3, [r4, #0]
   b879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b879e:	4620      	mov	r0, r4
}
   b87a0:	b002      	add	sp, #8
   b87a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b87a6:	4718      	bx	r3

000b87a8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b87a8:	4770      	bx	lr

000b87aa <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b87aa:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b87ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b87b2:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b87b4:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b87b6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b87ba:	bf59      	ittee	pl
   b87bc:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b87be:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b87c0:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b87c2:	81c3      	strhmi	r3, [r0, #14]
}
   b87c4:	4770      	bx	lr
	...

000b87c8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b87c8:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b87ca:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b87cc:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b87ce:	4a07      	ldr	r2, [pc, #28]	; (b87ec <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b87d0:	4d07      	ldr	r5, [pc, #28]	; (b87f0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b87d2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b87d4:	2400      	movs	r4, #0
    _width    = WIDTH;
   b87d6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b87d8:	f04f 31ff 	mov.w	r1, #4294967295
   b87dc:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b87e0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b87e2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b87e4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b87e6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b87e8:	6204      	str	r4, [r0, #32]
}
   b87ea:	bd30      	pop	{r4, r5, pc}
   b87ec:	01000101 	.word	0x01000101
   b87f0:	000bd37c 	.word	0x000bd37c

000b87f4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b87f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87f8:	b08b      	sub	sp, #44	; 0x2c
   b87fa:	461c      	mov	r4, r3
   b87fc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b8800:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b8802:	b2a3      	uxth	r3, r4
   b8804:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b8808:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b880c:	005b      	lsls	r3, r3, #1
   b880e:	b21b      	sxth	r3, r3
   b8810:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b8812:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b8816:	3301      	adds	r3, #1
   b8818:	b29b      	uxth	r3, r3
   b881a:	9305      	str	r3, [sp, #20]
   b881c:	b293      	uxth	r3, r2
   b881e:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8820:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b8822:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8824:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b8828:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b882a:	2300      	movs	r3, #0
   b882c:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b882e:	f001 0301 	and.w	r3, r1, #1
   b8832:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b8834:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8838:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b883c:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b883e:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8840:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b8842:	9b02      	ldr	r3, [sp, #8]
   b8844:	42a3      	cmp	r3, r4
   b8846:	da6f      	bge.n	b8928 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b8848:	2d00      	cmp	r5, #0
   b884a:	db6b      	blt.n	b8924 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b884c:	9b07      	ldr	r3, [sp, #28]
   b884e:	3302      	adds	r3, #2
            y--;
   b8850:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b8852:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b8854:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b8858:	b236      	sxth	r6, r6
            ddF_y += 2;
   b885a:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b885c:	b22d      	sxth	r5, r5
        x++;
   b885e:	9f02      	ldr	r7, [sp, #8]
   b8860:	3701      	adds	r7, #1
   b8862:	fa1f f987 	uxth.w	r9, r7
   b8866:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b8868:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b886c:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b886e:	429e      	cmp	r6, r3
   b8870:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b8872:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b8874:	db29      	blt.n	b88ca <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b8876:	9b08      	ldr	r3, [sp, #32]
   b8878:	b193      	cbz	r3, b88a0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b887a:	9804      	ldr	r0, [sp, #16]
   b887c:	9000      	str	r0, [sp, #0]
   b887e:	f8db 0000 	ldr.w	r0, [fp]
   b8882:	9906      	ldr	r1, [sp, #24]
   b8884:	9b05      	ldr	r3, [sp, #20]
   b8886:	6a00      	ldr	r0, [r0, #32]
   b8888:	b2b2      	uxth	r2, r6
   b888a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b888e:	1a8a      	subs	r2, r1, r2
   b8890:	eb09 0108 	add.w	r1, r9, r8
   b8894:	4607      	mov	r7, r0
   b8896:	b21b      	sxth	r3, r3
   b8898:	b212      	sxth	r2, r2
   b889a:	b209      	sxth	r1, r1
   b889c:	4658      	mov	r0, fp
   b889e:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b88a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b88a2:	b193      	cbz	r3, b88ca <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b88a4:	9906      	ldr	r1, [sp, #24]
   b88a6:	9804      	ldr	r0, [sp, #16]
   b88a8:	9b05      	ldr	r3, [sp, #20]
   b88aa:	9000      	str	r0, [sp, #0]
   b88ac:	b2b2      	uxth	r2, r6
   b88ae:	f8db 0000 	ldr.w	r0, [fp]
   b88b2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b88b6:	1a8a      	subs	r2, r1, r2
   b88b8:	eba8 0109 	sub.w	r1, r8, r9
   b88bc:	b21b      	sxth	r3, r3
   b88be:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b88c2:	b212      	sxth	r2, r2
   b88c4:	b209      	sxth	r1, r1
   b88c6:	4658      	mov	r0, fp
   b88c8:	47c8      	blx	r9
        if(y != py) {
   b88ca:	42b4      	cmp	r4, r6
   b88cc:	d020      	beq.n	b8910 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b88ce:	9b08      	ldr	r3, [sp, #32]
   b88d0:	b173      	cbz	r3, b88f0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b88d2:	f8db 3000 	ldr.w	r3, [fp]
   b88d6:	9a04      	ldr	r2, [sp, #16]
   b88d8:	9200      	str	r2, [sp, #0]
   b88da:	eb08 0104 	add.w	r1, r8, r4
   b88de:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b88e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b88e6:	fa0f f28a 	sxth.w	r2, sl
   b88ea:	b209      	sxth	r1, r1
   b88ec:	4658      	mov	r0, fp
   b88ee:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b88f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b88f2:	b16b      	cbz	r3, b8910 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b88f4:	f8db 3000 	ldr.w	r3, [fp]
   b88f8:	9a04      	ldr	r2, [sp, #16]
   b88fa:	9200      	str	r2, [sp, #0]
   b88fc:	eba8 0104 	sub.w	r1, r8, r4
   b8900:	fa0f f28a 	sxth.w	r2, sl
   b8904:	6a1c      	ldr	r4, [r3, #32]
   b8906:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b890a:	b209      	sxth	r1, r1
   b890c:	4658      	mov	r0, fp
   b890e:	47a0      	blx	r4
   b8910:	f10a 33ff 	add.w	r3, sl, #4294967295
   b8914:	fa1f fa83 	uxth.w	sl, r3
   b8918:	9b03      	ldr	r3, [sp, #12]
   b891a:	3302      	adds	r3, #2
   b891c:	b29b      	uxth	r3, r3
   b891e:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8920:	4634      	mov	r4, r6
   b8922:	e78e      	b.n	b8842 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b8924:	4626      	mov	r6, r4
   b8926:	e79a      	b.n	b885e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b8928:	b00b      	add	sp, #44	; 0x2c
   b892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b892e <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8932:	461e      	mov	r6, r3
   b8934:	b086      	sub	sp, #24
    startWrite();
   b8936:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8938:	9105      	str	r1, [sp, #20]
   b893a:	4604      	mov	r4, r0
    startWrite();
   b893c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b893e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b8942:	4615      	mov	r5, r2
    startWrite();
   b8944:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b8946:	b2b2      	uxth	r2, r6
   b8948:	6820      	ldr	r0, [r4, #0]
   b894a:	9700      	str	r7, [sp, #0]
   b894c:	0053      	lsls	r3, r2, #1
   b894e:	3301      	adds	r3, #1
   b8950:	1aaa      	subs	r2, r5, r2
   b8952:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b8956:	9905      	ldr	r1, [sp, #20]
   b8958:	4620      	mov	r0, r4
   b895a:	b21b      	sxth	r3, r3
   b895c:	b212      	sxth	r2, r2
   b895e:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b8960:	2303      	movs	r3, #3
   b8962:	2200      	movs	r2, #0
   b8964:	e9cd 3200 	strd	r3, r2, [sp]
   b8968:	4620      	mov	r0, r4
   b896a:	4633      	mov	r3, r6
   b896c:	9905      	ldr	r1, [sp, #20]
   b896e:	9702      	str	r7, [sp, #8]
   b8970:	462a      	mov	r2, r5
   b8972:	f7ff ff3f 	bl	b87f4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b8976:	6823      	ldr	r3, [r4, #0]
   b8978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b897a:	4620      	mov	r0, r4
}
   b897c:	b006      	add	sp, #24
   b897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8982:	4718      	bx	r3

000b8984 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b8984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8988:	b08d      	sub	sp, #52	; 0x34
   b898a:	461d      	mov	r5, r3
   b898c:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b8990:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b8994:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b8998:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b899c:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b899e:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b89a0:	4683      	mov	fp, r0
   b89a2:	4689      	mov	r9, r1
   b89a4:	4614      	mov	r4, r2
    if (y0 > y1) {
   b89a6:	f340 80ce 	ble.w	b8b46 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b89aa:	42ba      	cmp	r2, r7
   b89ac:	dd17      	ble.n	b89de <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b89ae:	42b7      	cmp	r7, r6
   b89b0:	da0f      	bge.n	b89d2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b89b2:	4633      	mov	r3, r6
   b89b4:	463e      	mov	r6, r7
   b89b6:	4627      	mov	r7, r4
   b89b8:	461c      	mov	r4, r3
   b89ba:	462b      	mov	r3, r5
   b89bc:	4645      	mov	r5, r8
   b89be:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b89c0:	4699      	mov	r9, r3
   b89c2:	e00c      	b.n	b89de <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b89c4:	4623      	mov	r3, r4
   b89c6:	4634      	mov	r4, r6
   b89c8:	461e      	mov	r6, r3
   b89ca:	464b      	mov	r3, r9
   b89cc:	46a9      	mov	r9, r5
   b89ce:	461d      	mov	r5, r3
   b89d0:	e7ed      	b.n	b89ae <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b89d2:	4623      	mov	r3, r4
   b89d4:	463c      	mov	r4, r7
   b89d6:	461f      	mov	r7, r3
   b89d8:	464b      	mov	r3, r9
   b89da:	46c1      	mov	r9, r8
   b89dc:	4698      	mov	r8, r3
    startWrite();
   b89de:	f8db 3000 	ldr.w	r3, [fp]
   b89e2:	4658      	mov	r0, fp
   b89e4:	695b      	ldr	r3, [r3, #20]
   b89e6:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b89e8:	42be      	cmp	r6, r7
   b89ea:	d122      	bne.n	b8a32 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b89ec:	454d      	cmp	r5, r9
   b89ee:	bfc2      	ittt	gt
   b89f0:	462b      	movgt	r3, r5
   b89f2:	464d      	movgt	r5, r9
   b89f4:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b89f6:	4545      	cmp	r5, r8
   b89f8:	dc05      	bgt.n	b8a06 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b89fa:	45c1      	cmp	r9, r8
   b89fc:	bfb8      	it	lt
   b89fe:	46c1      	movlt	r9, r8
   b8a00:	fa0f f989 	sxth.w	r9, r9
   b8a04:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b8a06:	f8db 2000 	ldr.w	r2, [fp]
   b8a0a:	9904      	ldr	r1, [sp, #16]
   b8a0c:	9100      	str	r1, [sp, #0]
   b8a0e:	f109 0301 	add.w	r3, r9, #1
   b8a12:	eba3 0308 	sub.w	r3, r3, r8
   b8a16:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b8a18:	b21b      	sxth	r3, r3
   b8a1a:	4632      	mov	r2, r6
   b8a1c:	4641      	mov	r1, r8
   b8a1e:	4658      	mov	r0, fp
   b8a20:	47a0      	blx	r4
    endWrite();
   b8a22:	f8db 3000 	ldr.w	r3, [fp]
   b8a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a28:	4658      	mov	r0, fp
}
   b8a2a:	b00d      	add	sp, #52	; 0x34
   b8a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8a30:	4718      	bx	r3
    dx01 = x1 - x0,
   b8a32:	fa1f f389 	uxth.w	r3, r9
   b8a36:	9303      	str	r3, [sp, #12]
   b8a38:	b2ab      	uxth	r3, r5
   b8a3a:	9302      	str	r3, [sp, #8]
   b8a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8a40:	1a9b      	subs	r3, r3, r2
   b8a42:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b8a44:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b8a48:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b8a4a:	b2a3      	uxth	r3, r4
   b8a4c:	eba3 020c 	sub.w	r2, r3, ip
   b8a50:	b212      	sxth	r2, r2
   b8a52:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b8a54:	9a02      	ldr	r2, [sp, #8]
   b8a56:	fa1f f188 	uxth.w	r1, r8
   b8a5a:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b8a5e:	b2ba      	uxth	r2, r7
   b8a60:	eba2 0c0c 	sub.w	ip, r2, ip
   b8a64:	fa0f f08c 	sxth.w	r0, ip
   b8a68:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b8a6a:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b8a6c:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b8a6e:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b8a72:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b8a76:	bf18      	it	ne
   b8a78:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b8a7c:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b8a7e:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b8a80:	bf18      	it	ne
   b8a82:	b21b      	sxthne	r3, r3
    sb   = 0;
   b8a84:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b8a88:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b8a8a:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b8a8e:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b8a90:	bf14      	ite	ne
   b8a92:	9305      	strne	r3, [sp, #20]
   b8a94:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b8a96:	4632      	mov	r2, r6
    sa   = 0,
   b8a98:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b8a9a:	9b05      	ldr	r3, [sp, #20]
   b8a9c:	429a      	cmp	r2, r3
   b8a9e:	dc24      	bgt.n	b8aea <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b8aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b8aa2:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b8aa4:	fb9a f1f3 	sdiv	r1, sl, r3
   b8aa8:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b8aaa:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b8aac:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b8aae:	9b06      	ldr	r3, [sp, #24]
   b8ab0:	fb99 f3f3 	sdiv	r3, r9, r3
   b8ab4:	4403      	add	r3, r0
        sa += dx01;
   b8ab6:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b8ab8:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8aba:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8abc:	4299      	cmp	r1, r3
        sa += dx01;
   b8abe:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b8ac0:	9804      	ldr	r0, [sp, #16]
   b8ac2:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8ac4:	bfc8      	it	gt
   b8ac6:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b8ac8:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b8acc:	bfc4      	itt	gt
   b8ace:	4619      	movgt	r1, r3
   b8ad0:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8ad2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8ad4:	3301      	adds	r3, #1
   b8ad6:	1a5b      	subs	r3, r3, r1
   b8ad8:	4605      	mov	r5, r0
   b8ada:	b21b      	sxth	r3, r3
   b8adc:	4658      	mov	r0, fp
   b8ade:	47a8      	blx	r5
   b8ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8ae2:	3201      	adds	r2, #1
        sb += dx02;
   b8ae4:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b8ae6:	b212      	sxth	r2, r2
   b8ae8:	e7d7      	b.n	b8a9a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b8aea:	9b07      	ldr	r3, [sp, #28]
   b8aec:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b8aee:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b8af0:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b8af2:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b8af6:	42ba      	cmp	r2, r7
   b8af8:	dc93      	bgt.n	b8a22 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b8afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b8afc:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b8afe:	fb94 f1f3 	sdiv	r1, r4, r3
   b8b02:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b8b04:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b8b06:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b8b08:	9b06      	ldr	r3, [sp, #24]
   b8b0a:	fb96 f3f3 	sdiv	r3, r6, r3
   b8b0e:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b8b10:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8b12:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8b14:	4299      	cmp	r1, r3
        sa += dx12;
   b8b16:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b8b18:	bfc8      	it	gt
   b8b1a:	468c      	movgt	ip, r1
        sa += dx12;
   b8b1c:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b8b1e:	bfc8      	it	gt
   b8b20:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b8b22:	9804      	ldr	r0, [sp, #16]
   b8b24:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8b26:	bfc8      	it	gt
   b8b28:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8b2a:	f8db 0000 	ldr.w	r0, [fp]
   b8b2e:	3301      	adds	r3, #1
   b8b30:	1a5b      	subs	r3, r3, r1
   b8b32:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b8b36:	b21b      	sxth	r3, r3
   b8b38:	4658      	mov	r0, fp
   b8b3a:	47c8      	blx	r9
   b8b3c:	9a05      	ldr	r2, [sp, #20]
   b8b3e:	3201      	adds	r2, #1
        sb += dx02;
   b8b40:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b8b42:	b212      	sxth	r2, r2
   b8b44:	e7d7      	b.n	b8af6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b8b46:	42be      	cmp	r6, r7
   b8b48:	f73f af3c 	bgt.w	b89c4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b8b4c:	4633      	mov	r3, r6
   b8b4e:	461c      	mov	r4, r3
   b8b50:	4616      	mov	r6, r2
   b8b52:	462b      	mov	r3, r5
   b8b54:	460d      	mov	r5, r1
   b8b56:	e733      	b.n	b89c0 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b8b58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b5c:	b089      	sub	sp, #36	; 0x24
   b8b5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8b62:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b64:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8b68:	9304      	str	r3, [sp, #16]
   b8b6a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8b6e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b70:	9305      	str	r3, [sp, #20]
   b8b72:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8b76:	4604      	mov	r4, r0
    startWrite();
   b8b78:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8b7a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8b7e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8b82:	bf48      	it	mi
   b8b84:	f108 020e 	addmi.w	r2, r8, #14
   b8b88:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8b8c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8b8e:	4635      	mov	r5, r6
   b8b90:	9b03      	ldr	r3, [sp, #12]
   b8b92:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8b94:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8b98:	189a      	adds	r2, r3, r2
   b8b9a:	9b05      	ldr	r3, [sp, #20]
   b8b9c:	428b      	cmp	r3, r1
   b8b9e:	b212      	sxth	r2, r2
   b8ba0:	dd27      	ble.n	b8bf2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8ba2:	9b04      	ldr	r3, [sp, #16]
   b8ba4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8ba6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8baa:	9306      	str	r3, [sp, #24]
   b8bac:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8bb0:	4580      	cmp	r8, r0
   b8bb2:	fa1f f189 	uxth.w	r1, r9
   b8bb6:	dd17      	ble.n	b8be8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8bb8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bba:	bf05      	ittet	eq
   b8bbc:	9b06      	ldreq	r3, [sp, #24]
   b8bbe:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8bc0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bc2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8bc4:	bf18      	it	ne
   b8bc6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8bc8:	062b      	lsls	r3, r5, #24
   b8bca:	d50a      	bpl.n	b8be2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8bcc:	9b02      	ldr	r3, [sp, #8]
   b8bce:	6820      	ldr	r0, [r4, #0]
   b8bd0:	9207      	str	r2, [sp, #28]
   b8bd2:	4419      	add	r1, r3
   b8bd4:	6983      	ldr	r3, [r0, #24]
   b8bd6:	b209      	sxth	r1, r1
   b8bd8:	461f      	mov	r7, r3
   b8bda:	4620      	mov	r0, r4
   b8bdc:	4653      	mov	r3, sl
   b8bde:	47b8      	blx	r7
   b8be0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8be2:	f109 0901 	add.w	r9, r9, #1
   b8be6:	e7e1      	b.n	b8bac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8be8:	9b01      	ldr	r3, [sp, #4]
   b8bea:	3301      	adds	r3, #1
   b8bec:	9301      	str	r3, [sp, #4]
   b8bee:	445e      	add	r6, fp
   b8bf0:	e7ce      	b.n	b8b90 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8bf2:	6823      	ldr	r3, [r4, #0]
   b8bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8bf6:	4620      	mov	r0, r4
}
   b8bf8:	b009      	add	sp, #36	; 0x24
   b8bfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8bfe:	4718      	bx	r3

000b8c00 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c04:	ed2d 8b02 	vpush	{d8}
   b8c08:	b091      	sub	sp, #68	; 0x44
   b8c0a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8c0c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8c0e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8c12:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8c16:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8c1a:	9103      	str	r1, [sp, #12]
   b8c1c:	461f      	mov	r7, r3
   b8c1e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8c22:	9304      	str	r3, [sp, #16]
   b8c24:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8c26:	2a00      	cmp	r2, #0
   b8c28:	f040 80c5 	bne.w	b8db6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8c2c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8c30:	428b      	cmp	r3, r1
   b8c32:	f340 814c 	ble.w	b8ece <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8c36:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8c3a:	42b3      	cmp	r3, r6
   b8c3c:	f340 8147 	ble.w	b8ece <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8c40:	2306      	movs	r3, #6
   b8c42:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8c46:	2b00      	cmp	r3, #0
   b8c48:	f340 8141 	ble.w	b8ece <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8c4c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8c50:	2b00      	cmp	r3, #0
   b8c52:	f340 813c 	ble.w	b8ece <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8c56:	7f03      	ldrb	r3, [r0, #28]
   b8c58:	b91b      	cbnz	r3, b8c62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8c5a:	2faf      	cmp	r7, #175	; 0xaf
   b8c5c:	bf84      	itt	hi
   b8c5e:	3701      	addhi	r7, #1
   b8c60:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8c62:	f8db 3000 	ldr.w	r3, [fp]
   b8c66:	4658      	mov	r0, fp
   b8c68:	695b      	ldr	r3, [r3, #20]
   b8c6a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c6c:	2205      	movs	r2, #5
   b8c6e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8c70:	2200      	movs	r2, #0
   b8c72:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c74:	4a98      	ldr	r2, [pc, #608]	; (b8ed8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8c76:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8c7a:	18d3      	adds	r3, r2, r3
   b8c7c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8c7e:	b2b3      	uxth	r3, r6
   b8c80:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c82:	9a05      	ldr	r2, [sp, #20]
   b8c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8c86:	5c9b      	ldrb	r3, [r3, r2]
   b8c88:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8c8a:	b2ab      	uxth	r3, r5
   b8c8c:	930b      	str	r3, [sp, #44]	; 0x2c
   b8c8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b8c92:	9308      	str	r3, [sp, #32]
   b8c94:	9b03      	ldr	r3, [sp, #12]
   b8c96:	fb02 f905 	mul.w	r9, r2, r5
   b8c9a:	fa19 f983 	uxtah	r9, r9, r3
   b8c9e:	fa0f f389 	sxth.w	r3, r9
   b8ca2:	ee08 3a10 	vmov	s16, r3
   b8ca6:	2308      	movs	r3, #8
   b8ca8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8caa:	9b03      	ldr	r3, [sp, #12]
   b8cac:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8cb0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8cb4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8cb8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8cba:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8cbe:	07d2      	lsls	r2, r2, #31
   b8cc0:	d552      	bpl.n	b8d68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8cc2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8cc4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8cc8:	d13e      	bne.n	b8d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8cca:	2c01      	cmp	r4, #1
   b8ccc:	d13c      	bne.n	b8d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8cce:	699b      	ldr	r3, [r3, #24]
   b8cd0:	9906      	ldr	r1, [sp, #24]
   b8cd2:	461f      	mov	r7, r3
   b8cd4:	9b04      	ldr	r3, [sp, #16]
   b8cd6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8cd8:	b212      	sxth	r2, r2
   b8cda:	4651      	mov	r1, sl
   b8cdc:	4658      	mov	r0, fp
   b8cde:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8ce0:	f109 0301 	add.w	r3, r9, #1
   b8ce4:	fa4f f983 	sxtb.w	r9, r3
   b8ce8:	9b07      	ldr	r3, [sp, #28]
   b8cea:	085b      	lsrs	r3, r3, #1
   b8cec:	9307      	str	r3, [sp, #28]
   b8cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8cf0:	3b01      	subs	r3, #1
   b8cf2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8cf6:	930a      	str	r3, [sp, #40]	; 0x28
   b8cf8:	d1de      	bne.n	b8cb8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8cfa:	9f05      	ldr	r7, [sp, #20]
   b8cfc:	3701      	adds	r7, #1
   b8cfe:	b27b      	sxtb	r3, r7
   b8d00:	9305      	str	r3, [sp, #20]
   b8d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8d04:	3b01      	subs	r3, #1
   b8d06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8d0a:	9309      	str	r3, [sp, #36]	; 0x24
   b8d0c:	d1b9      	bne.n	b8c82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8d0e:	9b04      	ldr	r3, [sp, #16]
   b8d10:	4543      	cmp	r3, r8
   b8d12:	d00f      	beq.n	b8d34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8d14:	2d01      	cmp	r5, #1
   b8d16:	f8db 3000 	ldr.w	r3, [fp]
   b8d1a:	d13b      	bne.n	b8d94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8d1c:	2c01      	cmp	r4, #1
   b8d1e:	d139      	bne.n	b8d94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8d20:	9908      	ldr	r1, [sp, #32]
   b8d22:	f8cd 8000 	str.w	r8, [sp]
   b8d26:	3105      	adds	r1, #5
   b8d28:	6a1c      	ldr	r4, [r3, #32]
   b8d2a:	4632      	mov	r2, r6
   b8d2c:	2308      	movs	r3, #8
   b8d2e:	b209      	sxth	r1, r1
   b8d30:	4658      	mov	r0, fp
   b8d32:	47a0      	blx	r4
        endWrite();
   b8d34:	f8db 3000 	ldr.w	r3, [fp]
   b8d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d3a:	4658      	mov	r0, fp
}
   b8d3c:	b011      	add	sp, #68	; 0x44
   b8d3e:	ecbd 8b02 	vpop	{d8}
   b8d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8d46:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8d48:	9906      	ldr	r1, [sp, #24]
   b8d4a:	fb14 f202 	smulbb	r2, r4, r2
   b8d4e:	440a      	add	r2, r1
   b8d50:	9904      	ldr	r1, [sp, #16]
   b8d52:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d54:	9400      	str	r4, [sp, #0]
   b8d56:	69db      	ldr	r3, [r3, #28]
   b8d58:	ee18 1a10 	vmov	r1, s16
   b8d5c:	461f      	mov	r7, r3
   b8d5e:	b212      	sxth	r2, r2
   b8d60:	462b      	mov	r3, r5
   b8d62:	4658      	mov	r0, fp
   b8d64:	47b8      	blx	r7
   b8d66:	e7bb      	b.n	b8ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8d68:	9a04      	ldr	r2, [sp, #16]
   b8d6a:	4542      	cmp	r2, r8
   b8d6c:	d0b8      	beq.n	b8ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8d6e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8d70:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8d74:	d107      	bne.n	b8d86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8d76:	2c01      	cmp	r4, #1
   b8d78:	d105      	bne.n	b8d86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8d7a:	699b      	ldr	r3, [r3, #24]
   b8d7c:	9906      	ldr	r1, [sp, #24]
   b8d7e:	461f      	mov	r7, r3
   b8d80:	440a      	add	r2, r1
   b8d82:	4643      	mov	r3, r8
   b8d84:	e7a8      	b.n	b8cd8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d86:	9906      	ldr	r1, [sp, #24]
   b8d88:	f8cd 8004 	str.w	r8, [sp, #4]
   b8d8c:	fb14 f202 	smulbb	r2, r4, r2
   b8d90:	440a      	add	r2, r1
   b8d92:	e7df      	b.n	b8d54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8d96:	f8cd 8004 	str.w	r8, [sp, #4]
   b8d9a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8d9e:	9a08      	ldr	r2, [sp, #32]
   b8da0:	00e4      	lsls	r4, r4, #3
   b8da2:	440a      	add	r2, r1
   b8da4:	4611      	mov	r1, r2
   b8da6:	9400      	str	r4, [sp, #0]
   b8da8:	69dc      	ldr	r4, [r3, #28]
   b8daa:	4632      	mov	r2, r6
   b8dac:	462b      	mov	r3, r5
   b8dae:	b209      	sxth	r1, r1
   b8db0:	4658      	mov	r0, fp
   b8db2:	47a0      	blx	r4
        endWrite();
   b8db4:	e7be      	b.n	b8d34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8db6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8db8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8dba:	6812      	ldr	r2, [r2, #0]
   b8dbc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8dbe:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8dc0:	b2ff      	uxtb	r7, r7
   b8dc2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8dc6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8dca:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8dcc:	789a      	ldrb	r2, [r3, #2]
   b8dce:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8dd0:	78da      	ldrb	r2, [r3, #3]
   b8dd2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8dd4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8dd6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8dda:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8dde:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8de0:	d801      	bhi.n	b8de6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8de2:	2c01      	cmp	r4, #1
   b8de4:	d957      	bls.n	b8e96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8de6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8dea:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8dec:	fa0f f38a 	sxth.w	r3, sl
   b8df0:	9307      	str	r3, [sp, #28]
        startWrite();
   b8df2:	f8db 3000 	ldr.w	r3, [fp]
   b8df6:	4658      	mov	r0, fp
   b8df8:	695b      	ldr	r3, [r3, #20]
   b8dfa:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8dfc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8dfe:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e02:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e04:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8e08:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b8e0a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e0c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8e10:	429f      	cmp	r7, r3
   b8e12:	d28f      	bcs.n	b8d34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e14:	9b07      	ldr	r3, [sp, #28]
   b8e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8e18:	443b      	add	r3, r7
   b8e1a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8e1e:	2200      	movs	r2, #0
   b8e20:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e24:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e26:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e2a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e2e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e32:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8e36:	9905      	ldr	r1, [sp, #20]
   b8e38:	4291      	cmp	r1, r2
   b8e3a:	d241      	bcs.n	b8ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8e3c:	1c5a      	adds	r2, r3, #1
   b8e3e:	b2d2      	uxtb	r2, r2
   b8e40:	075b      	lsls	r3, r3, #29
   b8e42:	920d      	str	r2, [sp, #52]	; 0x34
   b8e44:	d107      	bne.n	b8e56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8e46:	9b06      	ldr	r3, [sp, #24]
   b8e48:	9906      	ldr	r1, [sp, #24]
   b8e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e4c:	3301      	adds	r3, #1
   b8e4e:	b29b      	uxth	r3, r3
   b8e50:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8e54:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8e56:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8e5a:	d012      	beq.n	b8e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8e5c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e5e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8e62:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8e66:	d11a      	bne.n	b8e9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8e68:	2c01      	cmp	r4, #1
   b8e6a:	d118      	bne.n	b8e9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8e6e:	699b      	ldr	r3, [r3, #24]
   b8e70:	4411      	add	r1, r2
   b8e72:	9a05      	ldr	r2, [sp, #20]
   b8e74:	4411      	add	r1, r2
   b8e76:	461e      	mov	r6, r3
   b8e78:	4652      	mov	r2, sl
   b8e7a:	9b04      	ldr	r3, [sp, #16]
   b8e7c:	b209      	sxth	r1, r1
   b8e7e:	4658      	mov	r0, fp
   b8e80:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8e82:	9e05      	ldr	r6, [sp, #20]
   b8e84:	3601      	adds	r6, #1
   b8e86:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8e88:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8e8c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8e8e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b8e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8e94:	e7ce      	b.n	b8e34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8e96:	2300      	movs	r3, #0
   b8e98:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8e9c:	e7a9      	b.n	b8df2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e9e:	9805      	ldr	r0, [sp, #20]
   b8ea0:	9a08      	ldr	r2, [sp, #32]
   b8ea2:	4402      	add	r2, r0
   b8ea4:	fb02 1105 	mla	r1, r2, r5, r1
   b8ea8:	9a04      	ldr	r2, [sp, #16]
   b8eaa:	e9cd 4200 	strd	r4, r2, [sp]
   b8eae:	69db      	ldr	r3, [r3, #28]
   b8eb0:	ee18 2a10 	vmov	r2, s16
   b8eb4:	461e      	mov	r6, r3
   b8eb6:	b209      	sxth	r1, r1
   b8eb8:	462b      	mov	r3, r5
   b8eba:	4658      	mov	r0, fp
   b8ebc:	47b0      	blx	r6
   b8ebe:	e7e0      	b.n	b8e82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8ec2:	3701      	adds	r7, #1
   b8ec4:	4498      	add	r8, r3
   b8ec6:	fa5f f888 	uxtb.w	r8, r8
   b8eca:	b2ff      	uxtb	r7, r7
   b8ecc:	e79f      	b.n	b8e0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8ece:	b011      	add	sp, #68	; 0x44
   b8ed0:	ecbd 8b02 	vpop	{d8}
   b8ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8ed8:	000bce74 	.word	0x000bce74

000b8edc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8ede:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8ee0:	b085      	sub	sp, #20
   b8ee2:	4604      	mov	r4, r0
   b8ee4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8ee6:	2a00      	cmp	r2, #0
   b8ee8:	d134      	bne.n	b8f54 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8eea:	290a      	cmp	r1, #10
   b8eec:	d108      	bne.n	b8f00 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8eee:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8ef0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8ef2:	7e42      	ldrb	r2, [r0, #25]
   b8ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8ef8:	8263      	strh	r3, [r4, #18]
}
   b8efa:	2001      	movs	r0, #1
   b8efc:	b005      	add	sp, #20
   b8efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8f00:	290d      	cmp	r1, #13
   b8f02:	d0fa      	beq.n	b8efa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8f04:	7ee1      	ldrb	r1, [r4, #27]
   b8f06:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8f08:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8f0a:	b171      	cbz	r1, b8f2a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8f0c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8f10:	2106      	movs	r1, #6
   b8f12:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8f16:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b8f1a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8f1c:	bfc1      	itttt	gt
   b8f1e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8f22:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8f24:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8f28:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8f2a:	8ae2      	ldrh	r2, [r4, #22]
   b8f2c:	9201      	str	r2, [sp, #4]
   b8f2e:	8aa2      	ldrh	r2, [r4, #20]
   b8f30:	9200      	str	r2, [sp, #0]
   b8f32:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8f36:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8f3a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8f3e:	4620      	mov	r0, r4
   b8f40:	f7ff fe5e 	bl	b8c00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8f44:	7e23      	ldrb	r3, [r4, #24]
   b8f46:	8a22      	ldrh	r2, [r4, #16]
   b8f48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8f4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8f50:	8223      	strh	r3, [r4, #16]
   b8f52:	e7d2      	b.n	b8efa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8f54:	290a      	cmp	r1, #10
   b8f56:	d107      	bne.n	b8f68 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8f58:	2300      	movs	r3, #0
   b8f5a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8f5c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8f5e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8f60:	8a43      	ldrh	r3, [r0, #18]
   b8f62:	fb01 3302 	mla	r3, r1, r2, r3
   b8f66:	e7c7      	b.n	b8ef8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8f68:	290d      	cmp	r1, #13
   b8f6a:	d0c6      	beq.n	b8efa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8f6c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8f6e:	42a9      	cmp	r1, r5
   b8f70:	d3c3      	bcc.n	b8efa <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8f72:	7a51      	ldrb	r1, [r2, #9]
   b8f74:	4299      	cmp	r1, r3
   b8f76:	d3c0      	bcc.n	b8efa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8f78:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8f7a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8f7c:	b2ed      	uxtb	r5, r5
   b8f7e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8f82:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8f84:	b328      	cbz	r0, b8fd2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8f86:	78e9      	ldrb	r1, [r5, #3]
   b8f88:	b319      	cbz	r1, b8fd2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8f8a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8f8c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8f8e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8f90:	b191      	cbz	r1, b8fb8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b8f92:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8f96:	4408      	add	r0, r1
   b8f98:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8f9c:	fb06 1100 	mla	r1, r6, r0, r1
   b8fa0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8fa4:	4281      	cmp	r1, r0
   b8fa6:	dd07      	ble.n	b8fb8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8fa8:	2000      	movs	r0, #0
   b8faa:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8fac:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8fb0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8fb2:	fb02 1207 	mla	r2, r2, r7, r1
   b8fb6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8fb8:	8ae2      	ldrh	r2, [r4, #22]
   b8fba:	9201      	str	r2, [sp, #4]
   b8fbc:	8aa2      	ldrh	r2, [r4, #20]
   b8fbe:	9200      	str	r2, [sp, #0]
   b8fc0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8fc4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8fc8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8fcc:	4620      	mov	r0, r4
   b8fce:	f7ff fe17 	bl	b8c00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8fd2:	7929      	ldrb	r1, [r5, #4]
   b8fd4:	7e22      	ldrb	r2, [r4, #24]
   b8fd6:	8a23      	ldrh	r3, [r4, #16]
   b8fd8:	fb01 3302 	mla	r3, r1, r2, r3
   b8fdc:	e7b8      	b.n	b8f50 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8fde <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8fde:	2901      	cmp	r1, #1
   b8fe0:	bf38      	it	cc
   b8fe2:	2101      	movcc	r1, #1
   b8fe4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8fe6:	7641      	strb	r1, [r0, #25]
}
   b8fe8:	4770      	bx	lr

000b8fea <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8fea:	b538      	push	{r3, r4, r5, lr}
   b8fec:	4604      	mov	r4, r0
   b8fee:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b8ff0:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b8ff2:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8ff4:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b8ff6:	f002 fc33 	bl	bb860 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b8ffa:	7b20      	ldrb	r0, [r4, #12]
   b8ffc:	2101      	movs	r1, #1
   b8ffe:	f002 fc40 	bl	bb882 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b9002:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b9004:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b9006:	2101      	movs	r1, #1
   b9008:	f002 fc2a 	bl	bb860 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b900c:	7b60      	ldrb	r0, [r4, #13]
   b900e:	2100      	movs	r1, #0
   b9010:	f002 fc37 	bl	bb882 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b9014:	4620      	mov	r0, r4
   b9016:	bd38      	pop	{r3, r4, r5, pc}

000b9018 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b9018:	3901      	subs	r1, #1
   b901a:	b2c9      	uxtb	r1, r1
   b901c:	2908      	cmp	r1, #8
   b901e:	bf9a      	itte	ls
   b9020:	4b02      	ldrls	r3, [pc, #8]	; (b902c <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b9022:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b9026:	4802      	ldrhi	r0, [pc, #8]	; (b9030 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b9028:	4770      	bx	lr
   b902a:	bf00      	nop
   b902c:	000bd4c4 	.word	0x000bd4c4
   b9030:	000bd3cc 	.word	0x000bd3cc

000b9034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b9034:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b9036:	4c0b      	ldr	r4, [pc, #44]	; (b9064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b9038:	7821      	ldrb	r1, [r4, #0]
   b903a:	f3bf 8f5b 	dmb	ish
   b903e:	f011 0101 	ands.w	r1, r1, #1
   b9042:	d10b      	bne.n	b905c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9044:	4620      	mov	r0, r4
   b9046:	9101      	str	r1, [sp, #4]
   b9048:	f7fb fd0c 	bl	b4a64 <__cxa_guard_acquire>
   b904c:	9901      	ldr	r1, [sp, #4]
   b904e:	b128      	cbz	r0, b905c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9050:	4805      	ldr	r0, [pc, #20]	; (b9068 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9052:	f001 fd37 	bl	baac4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9056:	4620      	mov	r0, r4
   b9058:	f7fb fd09 	bl	b4a6e <__cxa_guard_release>
    }
   b905c:	4802      	ldr	r0, [pc, #8]	; (b9068 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b905e:	b002      	add	sp, #8
   b9060:	bd10      	pop	{r4, pc}
   b9062:	bf00      	nop
   b9064:	2003c71c 	.word	0x2003c71c
   b9068:	2003c720 	.word	0x2003c720

000b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b906c:	b507      	push	{r0, r1, r2, lr}
   b906e:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b9070:	f7ff ffe0 	bl	b9034 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9074:	9901      	ldr	r1, [sp, #4]
    }
   b9076:	b003      	add	sp, #12
   b9078:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b907c:	f001 bdc8 	b.w	bac10 <_ZN8SPIClass8transferEh>

000b9080 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b9080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9084:	4607      	mov	r7, r0
   b9086:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b908a:	461e      	mov	r6, r3
	if (count == 0) {
   b908c:	4615      	mov	r5, r2
   b908e:	2a00      	cmp	r2, #0
   b9090:	d042      	beq.n	b9118 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b9092:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b9096:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b9098:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b909c:	2100      	movs	r1, #0
   b909e:	f002 fbf0 	bl	bb882 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b90a2:	4648      	mov	r0, r9
   b90a4:	f7ff ffe2 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b90a8:	3d01      	subs	r5, #1
   b90aa:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b90ac:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b90b0:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b90b4:	fa5f f48b 	uxtb.w	r4, fp
   b90b8:	42a5      	cmp	r5, r4
   b90ba:	d922      	bls.n	b9102 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b90bc:	b9dc      	cbnz	r4, b90f6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b90be:	f1b8 0f00 	cmp.w	r8, #0
   b90c2:	d018      	beq.n	b90f6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b90c4:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b90c6:	b2d3      	uxtb	r3, r2
   b90c8:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b90ca:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b90cc:	d805      	bhi.n	b90da <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b90ce:	fa0a f402 	lsl.w	r4, sl, r2
   b90d2:	430c      	orrs	r4, r1
   b90d4:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b90d6:	3201      	adds	r2, #1
   b90d8:	e7f5      	b.n	b90c6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b90da:	4648      	mov	r0, r9
   b90dc:	9101      	str	r1, [sp, #4]
   b90de:	f7ff ffc5 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b90e2:	7833      	ldrb	r3, [r6, #0]
   b90e4:	9901      	ldr	r1, [sp, #4]
   b90e6:	4004      	ands	r4, r0
   b90e8:	ea23 0301 	bic.w	r3, r3, r1
   b90ec:	431c      	orrs	r4, r3
   b90ee:	7034      	strb	r4, [r6, #0]
		index++;
   b90f0:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b90f4:	e7de      	b.n	b90b4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b90f6:	4648      	mov	r0, r9
   b90f8:	f7ff ffb8 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b90fc:	f806 000b 	strb.w	r0, [r6, fp]
   b9100:	e7f6      	b.n	b90f0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b9102:	2000      	movs	r0, #0
   b9104:	f7ff ffb2 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b9108:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b910a:	7b38      	ldrb	r0, [r7, #12]
   b910c:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b910e:	b003      	add	sp, #12
   b9110:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b9114:	f002 bbb5 	b.w	bb882 <digitalWrite>
} // End PCD_ReadRegister()
   b9118:	b003      	add	sp, #12
   b911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b911e <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b911e:	b538      	push	{r3, r4, r5, lr}
   b9120:	460c      	mov	r4, r1
   b9122:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b9124:	2100      	movs	r1, #0
   b9126:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b9128:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b912c:	f002 fba9 	bl	bb882 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b9130:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b9134:	f7ff ff9a 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b9138:	2000      	movs	r0, #0
   b913a:	f7ff ff97 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b913e:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b9140:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b9142:	7b28      	ldrb	r0, [r5, #12]
   b9144:	f002 fb9d 	bl	bb882 <digitalWrite>
} // End PCD_ReadRegister()
   b9148:	4620      	mov	r0, r4
   b914a:	bd38      	pop	{r3, r4, r5, pc}

000b914c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b914e:	460f      	mov	r7, r1
   b9150:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b9152:	2100      	movs	r1, #0
   b9154:	7b00      	ldrb	r0, [r0, #12]
								) {
   b9156:	4615      	mov	r5, r2
   b9158:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b915a:	f002 fb92 	bl	bb882 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b915e:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b9162:	f7ff ff83 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b9166:	4425      	add	r5, r4
   b9168:	42ac      	cmp	r4, r5
   b916a:	d004      	beq.n	b9176 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b916c:	f814 0b01 	ldrb.w	r0, [r4], #1
   b9170:	f7ff ff7c 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b9174:	e7f8      	b.n	b9168 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b9176:	7b30      	ldrb	r0, [r6, #12]
   b9178:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b917a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b917e:	f002 bb80 	b.w	bb882 <digitalWrite>

000b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b9182:	b570      	push	{r4, r5, r6, lr}
   b9184:	4604      	mov	r4, r0
   b9186:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b9188:	7b00      	ldrb	r0, [r0, #12]
   b918a:	2100      	movs	r1, #0
								) {
   b918c:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b918e:	f002 fb78 	bl	bb882 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b9192:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b9196:	f7ff ff69 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b919a:	4628      	mov	r0, r5
   b919c:	f7ff ff66 	bl	b906c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b91a0:	7b20      	ldrb	r0, [r4, #12]
   b91a2:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b91a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b91a8:	f002 bb6b 	b.w	bb882 <digitalWrite>

000b91ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b91ac:	b570      	push	{r4, r5, r6, lr}
   b91ae:	4616      	mov	r6, r2
   b91b0:	4604      	mov	r4, r0
   b91b2:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b91b4:	f7ff ffb3 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b91b8:	4330      	orrs	r0, r6
   b91ba:	b2c2      	uxtb	r2, r0
   b91bc:	4629      	mov	r1, r5
   b91be:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b91c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b91c4:	f7ff bfdd 	b.w	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b91c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b91c8:	b570      	push	{r4, r5, r6, lr}
   b91ca:	4616      	mov	r6, r2
   b91cc:	4604      	mov	r4, r0
   b91ce:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b91d0:	f7ff ffa5 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b91d4:	ea20 0006 	bic.w	r0, r0, r6
   b91d8:	b2c2      	uxtb	r2, r0
   b91da:	4629      	mov	r1, r5
   b91dc:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b91de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b91e2:	f7ff bfce 	b.w	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b91e6 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b91e6:	2208      	movs	r2, #8
   b91e8:	2110      	movs	r1, #16
   b91ea:	f7ff bfed 	b.w	b91c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b91ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b91f0:	4604      	mov	r4, r0
   b91f2:	4615      	mov	r5, r2
   b91f4:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b91f6:	2200      	movs	r2, #0
   b91f8:	2102      	movs	r1, #2
					 ) {
   b91fa:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b91fc:	f7ff ffc1 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b9200:	2204      	movs	r2, #4
   b9202:	210a      	movs	r1, #10
   b9204:	4620      	mov	r0, r4
   b9206:	f7ff ffbc 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b920a:	2280      	movs	r2, #128	; 0x80
   b920c:	2114      	movs	r1, #20
   b920e:	4620      	mov	r0, r4
   b9210:	f7ff ffcc 	bl	b91ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b9214:	462a      	mov	r2, r5
   b9216:	463b      	mov	r3, r7
   b9218:	2112      	movs	r1, #18
   b921a:	4620      	mov	r0, r4
   b921c:	f7ff ff96 	bl	b914c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b9220:	2203      	movs	r2, #3
   b9222:	2102      	movs	r1, #2
   b9224:	4620      	mov	r0, r4
   b9226:	f7ff ffac 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b922a:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b922e:	210a      	movs	r1, #10
   b9230:	4620      	mov	r0, r4
   b9232:	f7ff ff74 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b9236:	0743      	lsls	r3, r0, #29
   b9238:	d405      	bmi.n	b9246 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b923a:	3d01      	subs	r5, #1
   b923c:	b2ad      	uxth	r5, r5
   b923e:	2d00      	cmp	r5, #0
   b9240:	d1f5      	bne.n	b922e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b9242:	2004      	movs	r0, #4
   b9244:	e00f      	b.n	b9266 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b9246:	2200      	movs	r2, #0
   b9248:	2102      	movs	r1, #2
   b924a:	4620      	mov	r0, r4
   b924c:	f7ff ff99 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b9250:	2144      	movs	r1, #68	; 0x44
   b9252:	4620      	mov	r0, r4
   b9254:	f7ff ff63 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b9258:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b925a:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b925c:	4620      	mov	r0, r4
   b925e:	f7ff ff5e 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b9262:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b9264:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b9266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9268 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b9268:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b926a:	220f      	movs	r2, #15
   b926c:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b926e:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b9270:	f7ff ff87 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b9274:	2032      	movs	r0, #50	; 0x32
   b9276:	f001 ff28 	bl	bb0ca <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b927a:	2102      	movs	r1, #2
   b927c:	4620      	mov	r0, r4
   b927e:	f7ff ff4e 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b9282:	06c3      	lsls	r3, r0, #27
   b9284:	d4f9      	bmi.n	b927a <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b9286:	bd10      	pop	{r4, pc}

000b9288 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b9288:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b928a:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b928c:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b928e:	f7ff ff46 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b9292:	f000 0303 	and.w	r3, r0, #3
   b9296:	2b03      	cmp	r3, #3
   b9298:	d008      	beq.n	b92ac <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b929a:	f040 0203 	orr.w	r2, r0, #3
   b929e:	b2d2      	uxtb	r2, r2
   b92a0:	4620      	mov	r0, r4
   b92a2:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b92a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b92a8:	f7ff bf6b 	b.w	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b92ac:	bd10      	pop	{r4, pc}

000b92ae <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b92ae:	b510      	push	{r4, lr}
   b92b0:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b92b2:	7b40      	ldrb	r0, [r0, #13]
   b92b4:	f002 fafe 	bl	bb8b4 <digitalRead>
   b92b8:	bb48      	cbnz	r0, b930e <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b92ba:	7b60      	ldrb	r0, [r4, #13]
   b92bc:	2101      	movs	r1, #1
   b92be:	f002 fae0 	bl	bb882 <digitalWrite>
		delay(50);
   b92c2:	2032      	movs	r0, #50	; 0x32
   b92c4:	f001 ff01 	bl	bb0ca <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b92c8:	4620      	mov	r0, r4
   b92ca:	2280      	movs	r2, #128	; 0x80
   b92cc:	2154      	movs	r1, #84	; 0x54
   b92ce:	f7ff ff58 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b92d2:	4620      	mov	r0, r4
   b92d4:	22a9      	movs	r2, #169	; 0xa9
   b92d6:	2156      	movs	r1, #86	; 0x56
   b92d8:	f7ff ff53 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b92dc:	4620      	mov	r0, r4
   b92de:	2203      	movs	r2, #3
   b92e0:	2158      	movs	r1, #88	; 0x58
   b92e2:	f7ff ff4e 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b92e6:	4620      	mov	r0, r4
   b92e8:	22e8      	movs	r2, #232	; 0xe8
   b92ea:	215a      	movs	r1, #90	; 0x5a
   b92ec:	f7ff ff49 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b92f0:	4620      	mov	r0, r4
   b92f2:	2240      	movs	r2, #64	; 0x40
   b92f4:	212a      	movs	r1, #42	; 0x2a
   b92f6:	f7ff ff44 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b92fa:	4620      	mov	r0, r4
   b92fc:	223d      	movs	r2, #61	; 0x3d
   b92fe:	2122      	movs	r1, #34	; 0x22
   b9300:	f7ff ff3f 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b9304:	4620      	mov	r0, r4
} // End PCD_Init()
   b9306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b930a:	f7ff bfbd 	b.w	b9288 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b930e:	4620      	mov	r0, r4
   b9310:	f7ff ffaa 	bl	b9268 <_ZN7MFRC5229PCD_ResetEv>
   b9314:	e7d8      	b.n	b92c8 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b9316 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b9316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b931a:	b089      	sub	sp, #36	; 0x24
   b931c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b9320:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b9324:	9203      	str	r2, [sp, #12]
   b9326:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b932a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b932e:	9204      	str	r2, [sp, #16]
   b9330:	4604      	mov	r4, r0
   b9332:	468a      	mov	sl, r1
   b9334:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b9336:	f1b9 0f00 	cmp.w	r9, #0
   b933a:	d03e      	beq.n	b93ba <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b933c:	f899 8000 	ldrb.w	r8, [r9]
   b9340:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b9342:	2200      	movs	r2, #0
   b9344:	2102      	movs	r1, #2
   b9346:	4620      	mov	r0, r4
   b9348:	f7ff ff1b 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b934c:	227f      	movs	r2, #127	; 0x7f
   b934e:	2108      	movs	r1, #8
   b9350:	4620      	mov	r0, r4
   b9352:	f7ff ff16 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b9356:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b935a:	2280      	movs	r2, #128	; 0x80
   b935c:	2114      	movs	r1, #20
   b935e:	4620      	mov	r0, r4
   b9360:	f7ff ff24 	bl	b91ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b9364:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b9368:	9b05      	ldr	r3, [sp, #20]
   b936a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b936e:	2112      	movs	r1, #18
   b9370:	4620      	mov	r0, r4
   b9372:	f7ff feeb 	bl	b914c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b9376:	4642      	mov	r2, r8
   b9378:	211a      	movs	r1, #26
   b937a:	4620      	mov	r0, r4
   b937c:	f7ff ff01 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b9380:	4652      	mov	r2, sl
   b9382:	2102      	movs	r1, #2
   b9384:	4620      	mov	r0, r4
   b9386:	f7ff fefc 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b938a:	f1ba 0f0c 	cmp.w	sl, #12
   b938e:	d104      	bne.n	b939a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b9390:	2280      	movs	r2, #128	; 0x80
   b9392:	211a      	movs	r1, #26
   b9394:	4620      	mov	r0, r4
   b9396:	f7ff ff09 	bl	b91ac <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b939a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b939e:	2108      	movs	r1, #8
   b93a0:	4620      	mov	r0, r4
   b93a2:	f7ff febc 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b93a6:	9b03      	ldr	r3, [sp, #12]
   b93a8:	4218      	tst	r0, r3
   b93aa:	d108      	bne.n	b93be <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b93ac:	07c3      	lsls	r3, r0, #31
   b93ae:	d402      	bmi.n	b93b6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b93b0:	f1b8 0801 	subs.w	r8, r8, #1
   b93b4:	d1f3      	bne.n	b939e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b93b6:	2004      	movs	r0, #4
   b93b8:	e04d      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b93ba:	46c8      	mov	r8, r9
   b93bc:	e7c0      	b.n	b9340 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b93be:	210c      	movs	r1, #12
   b93c0:	4620      	mov	r0, r4
   b93c2:	f7ff feac 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b93c6:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b93ca:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b93cc:	d146      	bne.n	b945c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b93ce:	b1dd      	cbz	r5, b9408 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b93d0:	b1d6      	cbz	r6, b9408 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b93d2:	2114      	movs	r1, #20
   b93d4:	4620      	mov	r0, r4
   b93d6:	f7ff fea2 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b93da:	7833      	ldrb	r3, [r6, #0]
   b93dc:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b93de:	4602      	mov	r2, r0
		if (n > *backLen) {
   b93e0:	d33e      	bcc.n	b9460 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b93e2:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b93e4:	462b      	mov	r3, r5
   b93e6:	2112      	movs	r1, #18
   b93e8:	4620      	mov	r0, r4
   b93ea:	f8cd b000 	str.w	fp, [sp]
   b93ee:	f7ff fe47 	bl	b9080 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b93f2:	2118      	movs	r1, #24
   b93f4:	4620      	mov	r0, r4
   b93f6:	f7ff fe92 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b93fa:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b93fe:	f1b9 0f00 	cmp.w	r9, #0
   b9402:	d001      	beq.n	b9408 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b9404:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b9408:	f018 0f08 	tst.w	r8, #8
   b940c:	d12a      	bne.n	b9464 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b940e:	b35d      	cbz	r5, b9468 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b9410:	b356      	cbz	r6, b9468 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b9412:	9b04      	ldr	r3, [sp, #16]
   b9414:	b343      	cbz	r3, b9468 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b9416:	7832      	ldrb	r2, [r6, #0]
   b9418:	2a01      	cmp	r2, #1
   b941a:	d103      	bne.n	b9424 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b941c:	2f04      	cmp	r7, #4
   b941e:	d125      	bne.n	b946c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b9420:	2009      	movs	r0, #9
   b9422:	e018      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b9424:	d922      	bls.n	b946c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b9426:	bb0f      	cbnz	r7, b946c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b9428:	3a02      	subs	r2, #2
   b942a:	ab07      	add	r3, sp, #28
   b942c:	b2d2      	uxtb	r2, r2
   b942e:	4629      	mov	r1, r5
   b9430:	4620      	mov	r0, r4
   b9432:	f7ff fedc 	bl	b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b9436:	2801      	cmp	r0, #1
   b9438:	d10d      	bne.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b943a:	7833      	ldrb	r3, [r6, #0]
   b943c:	441d      	add	r5, r3
   b943e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9442:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b9446:	429a      	cmp	r2, r3
   b9448:	d110      	bne.n	b946c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b944a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b944e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9452:	429a      	cmp	r2, r3
   b9454:	d10a      	bne.n	b946c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b9456:	b009      	add	sp, #36	; 0x24
   b9458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b945c:	2002      	movs	r0, #2
   b945e:	e7fa      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b9460:	2005      	movs	r0, #5
   b9462:	e7f8      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b9464:	2003      	movs	r0, #3
   b9466:	e7f6      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b9468:	2001      	movs	r0, #1
   b946a:	e7f4      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b946c:	2008      	movs	r0, #8
   b946e:	e7f2      	b.n	b9456 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b9470 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b9470:	b510      	push	{r4, lr}
   b9472:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b9474:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b9478:	9405      	str	r4, [sp, #20]
   b947a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b947e:	9404      	str	r4, [sp, #16]
   b9480:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b9482:	9403      	str	r4, [sp, #12]
   b9484:	9c08      	ldr	r4, [sp, #32]
   b9486:	9200      	str	r2, [sp, #0]
   b9488:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b948c:	2230      	movs	r2, #48	; 0x30
   b948e:	460b      	mov	r3, r1
   b9490:	210c      	movs	r1, #12
   b9492:	f7ff ff40 	bl	b9316 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b9496:	b006      	add	sp, #24
   b9498:	bd10      	pop	{r4, pc}

000b949a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b949a:	b570      	push	{r4, r5, r6, lr}
   b949c:	b088      	sub	sp, #32
   b949e:	4606      	mov	r6, r0
   b94a0:	461c      	mov	r4, r3
   b94a2:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b94a6:	4615      	mov	r5, r2
   b94a8:	b31a      	cbz	r2, b94f2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b94aa:	781b      	ldrb	r3, [r3, #0]
   b94ac:	2b01      	cmp	r3, #1
   b94ae:	d920      	bls.n	b94f2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b94b0:	2280      	movs	r2, #128	; 0x80
   b94b2:	211c      	movs	r1, #28
   b94b4:	f7ff fe88 	bl	b91c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b94b8:	2307      	movs	r3, #7
   b94ba:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b94be:	2300      	movs	r3, #0
   b94c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b94c4:	f10d 031f 	add.w	r3, sp, #31
   b94c8:	e9cd 4300 	strd	r4, r3, [sp]
   b94cc:	2201      	movs	r2, #1
   b94ce:	462b      	mov	r3, r5
   b94d0:	f10d 0117 	add.w	r1, sp, #23
   b94d4:	4630      	mov	r0, r6
   b94d6:	f7ff ffcb 	bl	b9470 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b94da:	2801      	cmp	r0, #1
   b94dc:	d107      	bne.n	b94ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b94de:	7823      	ldrb	r3, [r4, #0]
   b94e0:	2b02      	cmp	r3, #2
   b94e2:	d108      	bne.n	b94f6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b94e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b94e8:	2b00      	cmp	r3, #0
   b94ea:	bf18      	it	ne
   b94ec:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b94ee:	b008      	add	sp, #32
   b94f0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b94f2:	2005      	movs	r0, #5
   b94f4:	e7fb      	b.n	b94ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b94f6:	2002      	movs	r0, #2
   b94f8:	e7f9      	b.n	b94ee <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b94fa <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b94fa:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b94fc:	460a      	mov	r2, r1
   b94fe:	2126      	movs	r1, #38	; 0x26
   b9500:	f7ff bfcb 	b.w	b949a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b9504 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b9504:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b9506:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b9508:	f10d 0203 	add.w	r2, sp, #3
   b950c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b950e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b9512:	f7ff fff2 	bl	b94fa <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b9516:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b951a:	1e43      	subs	r3, r0, #1
   b951c:	4258      	negs	r0, r3
   b951e:	4158      	adcs	r0, r3
   b9520:	b003      	add	sp, #12
   b9522:	f85d fb04 	ldr.w	pc, [sp], #4

000b9526 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b9526:	b570      	push	{r4, r5, r6, lr}
   b9528:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b952a:	2350      	movs	r3, #80	; 0x50
   b952c:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b9530:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9532:	f10d 0316 	add.w	r3, sp, #22
   b9536:	2202      	movs	r2, #2
   b9538:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b953a:	4606      	mov	r6, r0
	buffer[1] = 0;
   b953c:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9540:	f7ff fe55 	bl	b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b9544:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9546:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b9548:	d10f      	bne.n	b956a <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b954a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b954e:	e9cd 4400 	strd	r4, r4, [sp]
   b9552:	4623      	mov	r3, r4
   b9554:	2204      	movs	r2, #4
   b9556:	a905      	add	r1, sp, #20
   b9558:	4630      	mov	r0, r6
   b955a:	f7ff ff89 	bl	b9470 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b955e:	2804      	cmp	r0, #4
   b9560:	d003      	beq.n	b956a <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b9562:	2801      	cmp	r0, #1
   b9564:	bf14      	ite	ne
   b9566:	4605      	movne	r5, r0
   b9568:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b956a:	4628      	mov	r0, r5
   b956c:	b006      	add	sp, #24
   b956e:	bd70      	pop	{r4, r5, r6, pc}

000b9570 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b9570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9572:	4606      	mov	r6, r0
   b9574:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b9576:	4614      	mov	r4, r2
   b9578:	b1ca      	cbz	r2, b95ae <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b957a:	781b      	ldrb	r3, [r3, #0]
   b957c:	2b11      	cmp	r3, #17
   b957e:	d916      	bls.n	b95ae <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b9580:	2330      	movs	r3, #48	; 0x30
   b9582:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b9584:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9586:	1c93      	adds	r3, r2, #2
   b9588:	4621      	mov	r1, r4
   b958a:	2202      	movs	r2, #2
   b958c:	f7ff fe2f 	bl	b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b9590:	2801      	cmp	r0, #1
   b9592:	d10a      	bne.n	b95aa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b9594:	2300      	movs	r3, #0
   b9596:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b959a:	9003      	str	r0, [sp, #12]
   b959c:	9500      	str	r5, [sp, #0]
   b959e:	4623      	mov	r3, r4
   b95a0:	2204      	movs	r2, #4
   b95a2:	4621      	mov	r1, r4
   b95a4:	4630      	mov	r0, r6
   b95a6:	f7ff ff63 	bl	b9470 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b95aa:	b004      	add	sp, #16
   b95ac:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b95ae:	2005      	movs	r0, #5
   b95b0:	e7fb      	b.n	b95aa <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b95b2 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b95b2:	b510      	push	{r4, lr}
   b95b4:	b08a      	sub	sp, #40	; 0x28
   b95b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b95b8:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b95bc:	681a      	ldr	r2, [r3, #0]
   b95be:	889b      	ldrh	r3, [r3, #4]
   b95c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b95c4:	7863      	ldrb	r3, [r4, #1]
   b95c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b95ca:	78a3      	ldrb	r3, [r4, #2]
   b95cc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b95d0:	78e3      	ldrb	r3, [r4, #3]
   b95d2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b95d6:	7923      	ldrb	r3, [r4, #4]
   b95d8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b95dc:	2300      	movs	r3, #0
   b95de:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b95e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b95e6:	9301      	str	r3, [sp, #4]
   b95e8:	230c      	movs	r3, #12
	sendData[0] = command;
   b95ea:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b95ee:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b95f2:	9300      	str	r3, [sp, #0]
   b95f4:	2210      	movs	r2, #16
   b95f6:	ab07      	add	r3, sp, #28
   b95f8:	210e      	movs	r1, #14
   b95fa:	f7ff fe8c 	bl	b9316 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b95fe:	b00a      	add	sp, #40	; 0x28
   b9600:	bd10      	pop	{r4, pc}

000b9602 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b9602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b9606:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b9608:	b08b      	sub	sp, #44	; 0x2c
   b960a:	4682      	mov	sl, r0
   b960c:	460f      	mov	r7, r1
   b960e:	4690      	mov	r8, r2
	if (validBits > 80) {
   b9610:	f200 8140 	bhi.w	b9894 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b9614:	2280      	movs	r2, #128	; 0x80
   b9616:	211c      	movs	r1, #28
   b9618:	f7ff fdd6 	bl	b91c8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b961c:	2393      	movs	r3, #147	; 0x93
   b961e:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b9622:	f1b8 0f00 	cmp.w	r8, #0
   b9626:	f000 80bc 	beq.w	b97a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b962a:	783c      	ldrb	r4, [r7, #0]
   b962c:	2c04      	cmp	r4, #4
   b962e:	bf94      	ite	ls
   b9630:	2300      	movls	r3, #0
   b9632:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9634:	2501      	movs	r5, #1
   b9636:	2600      	movs	r6, #0
   b9638:	e00b      	b.n	b9652 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b963a:	2395      	movs	r3, #149	; 0x95
   b963c:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9640:	f1b8 0f00 	cmp.w	r8, #0
   b9644:	f000 80af 	beq.w	b97a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b9648:	783c      	ldrb	r4, [r7, #0]
   b964a:	2c07      	cmp	r4, #7
   b964c:	bf94      	ite	ls
   b964e:	2300      	movls	r3, #0
   b9650:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b9652:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b9656:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b9658:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b965c:	2b00      	cmp	r3, #0
   b965e:	f000 80a4 	beq.w	b97aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b9662:	2288      	movs	r2, #136	; 0x88
   b9664:	f88d 201e 	strb.w	r2, [sp, #30]
   b9668:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b966a:	f014 0207 	ands.w	r2, r4, #7
   b966e:	bf18      	it	ne
   b9670:	2201      	movne	r2, #1
   b9672:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b9676:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b967a:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b967c:	d01d      	beq.n	b96ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b967e:	2b00      	cmp	r3, #0
   b9680:	bf14      	ite	ne
   b9682:	f04f 0903 	movne.w	r9, #3
   b9686:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b968a:	f106 0c01 	add.w	ip, r6, #1
   b968e:	4591      	cmp	r9, r2
   b9690:	bf94      	ite	ls
   b9692:	eb01 0e09 	addls.w	lr, r1, r9
   b9696:	eb01 0e02 	addhi.w	lr, r1, r2
   b969a:	fa57 fc8c 	uxtab	ip, r7, ip
   b969e:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b96a2:	460a      	mov	r2, r1
   b96a4:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b96a8:	3101      	adds	r1, #1
   b96aa:	b2c9      	uxtb	r1, r1
   b96ac:	445a      	add	r2, fp
   b96ae:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b96b2:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b96b6:	4571      	cmp	r1, lr
   b96b8:	d1f3      	bne.n	b96a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b96ba:	b10b      	cbz	r3, b96c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b96bc:	3008      	adds	r0, #8
   b96be:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b96c0:	2c1f      	cmp	r4, #31
   b96c2:	dd74      	ble.n	b97ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b96c4:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b96c8:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b96cc:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b96d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b96d4:	4053      	eors	r3, r2
   b96d6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b96da:	4053      	eors	r3, r2
   b96dc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b96e0:	4053      	eors	r3, r2
   b96e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b96e6:	2207      	movs	r2, #7
   b96e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b96ec:	a907      	add	r1, sp, #28
   b96ee:	4650      	mov	r0, sl
   b96f0:	f7ff fd7d 	bl	b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b96f4:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b96f6:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b96f8:	f040 80c8 	bne.w	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b96fc:	2300      	movs	r3, #0
   b96fe:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b9702:	2303      	movs	r3, #3
   b9704:	f88d 301b 	strb.w	r3, [sp, #27]
   b9708:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b970a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b970e:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b9712:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b9716:	9305      	str	r3, [sp, #20]
   b9718:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b971c:	b2d2      	uxtb	r2, r2
   b971e:	211a      	movs	r1, #26
   b9720:	4650      	mov	r0, sl
   b9722:	f7ff fd2e 	bl	b9182 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b9726:	9b05      	ldr	r3, [sp, #20]
   b9728:	9302      	str	r3, [sp, #8]
   b972a:	f10d 031a 	add.w	r3, sp, #26
   b972e:	2200      	movs	r2, #0
   b9730:	9301      	str	r3, [sp, #4]
   b9732:	f10d 031b 	add.w	r3, sp, #27
   b9736:	9203      	str	r2, [sp, #12]
   b9738:	9300      	str	r3, [sp, #0]
   b973a:	464a      	mov	r2, r9
   b973c:	465b      	mov	r3, fp
   b973e:	a907      	add	r1, sp, #28
   b9740:	4650      	mov	r0, sl
   b9742:	f7ff fe95 	bl	b9470 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b9746:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b9748:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b974a:	d14c      	bne.n	b97e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b974c:	211c      	movs	r1, #28
   b974e:	4650      	mov	r0, sl
   b9750:	f7ff fce5 	bl	b911e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b9754:	0681      	lsls	r1, r0, #26
   b9756:	f100 8099 	bmi.w	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b975a:	f010 001f 	ands.w	r0, r0, #31
   b975e:	bf08      	it	eq
   b9760:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b9762:	42a0      	cmp	r0, r4
   b9764:	f340 8087 	ble.w	b9876 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b9768:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b976a:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b976e:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b9770:	f013 0307 	ands.w	r3, r3, #7
   b9774:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b9778:	bf18      	it	ne
   b977a:	2301      	movne	r3, #1
   b977c:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b977e:	4418      	add	r0, r3
   b9780:	ab0a      	add	r3, sp, #40	; 0x28
   b9782:	4418      	add	r0, r3
   b9784:	2301      	movs	r3, #1
   b9786:	fa03 f202 	lsl.w	r2, r3, r2
   b978a:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b978e:	4313      	orrs	r3, r2
   b9790:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b9794:	e794      	b.n	b96c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b9796:	2397      	movs	r3, #151	; 0x97
   b9798:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b979c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b979e:	4623      	mov	r3, r4
				break;
   b97a0:	e757      	b.n	b9652 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b97a2:	4643      	mov	r3, r8
   b97a4:	e746      	b.n	b9634 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b97a6:	4643      	mov	r3, r8
   b97a8:	e753      	b.n	b9652 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b97aa:	2102      	movs	r1, #2
   b97ac:	e75d      	b.n	b966a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b97ae:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b97b0:	3302      	adds	r3, #2
   b97b2:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b97b4:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97b8:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b97bc:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b97c0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b97c4:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97c8:	bf18      	it	ne
   b97ca:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b97ce:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97d0:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b97d2:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b97d6:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97da:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b97de:	f88d 301b 	strb.w	r3, [sp, #27]
   b97e2:	9404      	str	r4, [sp, #16]
   b97e4:	e795      	b.n	b9712 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b97e6:	2801      	cmp	r0, #1
   b97e8:	d150      	bne.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b97ea:	9b04      	ldr	r3, [sp, #16]
   b97ec:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b97ee:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b97f2:	f77f af67 	ble.w	b96c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b97f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b97fa:	2b88      	cmp	r3, #136	; 0x88
   b97fc:	d13e      	bne.n	b987c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b97fe:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b9800:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b9802:	3601      	adds	r6, #1
   b9804:	441a      	add	r2, r3
   b9806:	fa57 f686 	uxtab	r6, r7, r6
   b980a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b980c:	4619      	mov	r1, r3
   b980e:	a80a      	add	r0, sp, #40	; 0x28
   b9810:	3301      	adds	r3, #1
   b9812:	4401      	add	r1, r0
   b9814:	b2db      	uxtb	r3, r3
   b9816:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b981a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b981e:	4293      	cmp	r3, r2
   b9820:	d1f4      	bne.n	b980c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b9822:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b9826:	2e03      	cmp	r6, #3
   b9828:	d137      	bne.n	b989a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b982a:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b982e:	bba4      	cbnz	r4, b989a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9830:	f10d 031e 	add.w	r3, sp, #30
   b9834:	2201      	movs	r2, #1
   b9836:	4659      	mov	r1, fp
   b9838:	4650      	mov	r0, sl
   b983a:	f7ff fcd8 	bl	b91ee <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b983e:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9840:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b9842:	d123      	bne.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b9844:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b9848:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b984c:	429a      	cmp	r2, r3
   b984e:	d127      	bne.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b9850:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9854:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b9858:	429a      	cmp	r2, r3
   b985a:	d121      	bne.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b985c:	f89b 3000 	ldrb.w	r3, [fp]
   b9860:	075a      	lsls	r2, r3, #29
   b9862:	d50e      	bpl.n	b9882 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b9864:	3501      	adds	r5, #1
   b9866:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b9868:	2d03      	cmp	r5, #3
   b986a:	d094      	beq.n	b9796 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b986c:	2d04      	cmp	r5, #4
   b986e:	d002      	beq.n	b9876 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b9870:	2d02      	cmp	r5, #2
   b9872:	f43f aee2 	beq.w	b963a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b9876:	f04f 0906 	mov.w	r9, #6
   b987a:	e007      	b.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b987c:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b987e:	2204      	movs	r2, #4
   b9880:	e7bf      	b.n	b9802 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b9882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b9886:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b9888:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b988a:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b988c:	4648      	mov	r0, r9
   b988e:	b00b      	add	sp, #44	; 0x2c
   b9890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b9894:	f04f 0907 	mov.w	r9, #7
   b9898:	e7f8      	b.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b989a:	f04f 0902 	mov.w	r9, #2
   b989e:	e7f5      	b.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b98a0:	f04f 0908 	mov.w	r9, #8
   b98a4:	e7f2      	b.n	b988c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b98a6 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b98a6:	b508      	push	{r3, lr}
   b98a8:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b98aa:	2200      	movs	r2, #0
   b98ac:	f7ff fea9 	bl	b9602 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b98b0:	1e43      	subs	r3, r0, #1
   b98b2:	4258      	negs	r0, r3
   b98b4:	4158      	adcs	r0, r3
   b98b6:	bd08      	pop	{r3, pc}

000b98b8 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b98b8:	6001      	str	r1, [r0, #0]
}
   b98ba:	4770      	bx	lr

000b98bc <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b98bc:	b510      	push	{r4, lr}
   b98be:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b98c0:	2101      	movs	r1, #1
   b98c2:	8800      	ldrh	r0, [r0, #0]
   b98c4:	f001 ffcc 	bl	bb860 <pinMode>
	digitalWrite(_pin, LOW);
   b98c8:	8820      	ldrh	r0, [r4, #0]
   b98ca:	2100      	movs	r1, #0
   b98cc:	f001 ffd9 	bl	bb882 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b98d0:	2002      	movs	r0, #2
   b98d2:	f000 fe7f 	bl	ba5d4 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b98d6:	8820      	ldrh	r0, [r4, #0]
   b98d8:	2101      	movs	r1, #1
   b98da:	f001 ffd2 	bl	bb882 <digitalWrite>
   b98de:	2005      	movs	r0, #5
   b98e0:	f000 fe78 	bl	ba5d4 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b98e4:	8820      	ldrh	r0, [r4, #0]
   b98e6:	2100      	movs	r1, #0
   b98e8:	f001 ffcb 	bl	bb882 <digitalWrite>
	pinMode(_pin,INPUT);
   b98ec:	8820      	ldrh	r0, [r4, #0]
   b98ee:	2100      	movs	r1, #0
   b98f0:	f001 ffb6 	bl	bb860 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b98f4:	8820      	ldrh	r0, [r4, #0]
   b98f6:	2101      	movs	r1, #1
   b98f8:	f002 f822 	bl	bb940 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b98fc:	233a      	movs	r3, #58	; 0x3a
   b98fe:	fb90 f0f3 	sdiv	r0, r0, r3
   b9902:	bd10      	pop	{r4, pc}

000b9904 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b9904:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b9906:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b9908:	2301      	movs	r3, #1
	_pin = pin;
   b990a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b990c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b990e:	7403      	strb	r3, [r0, #16]
}
   b9910:	bd10      	pop	{r4, pc}

000b9912 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b9912:	b510      	push	{r4, lr}
   b9914:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b9916:	2100      	movs	r1, #0
   b9918:	7980      	ldrb	r0, [r0, #6]
   b991a:	f001 ffa1 	bl	bb860 <pinMode>
	digitalWrite(_pin, HIGH);
   b991e:	79a0      	ldrb	r0, [r4, #6]
   b9920:	2101      	movs	r1, #1
   b9922:	f001 ffae 	bl	bb882 <digitalWrite>
	_lastreadtime = 0;
   b9926:	2300      	movs	r3, #0
   b9928:	60e3      	str	r3, [r4, #12]
}
   b992a:	bd10      	pop	{r4, pc}

000b992c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b992c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9930:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9932:	f000 fe57 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b9936:	68e3      	ldr	r3, [r4, #12]
   b9938:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b993a:	bf84      	itt	hi
   b993c:	2300      	movhi	r3, #0
   b993e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b9940:	7c23      	ldrb	r3, [r4, #16]
   b9942:	b923      	cbnz	r3, b994e <_ZN3DHT4readEv+0x22>
   b9944:	68e3      	ldr	r3, [r4, #12]
   b9946:	1ac0      	subs	r0, r0, r3
   b9948:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b994c:	d367      	bcc.n	b9a1e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b994e:	2500      	movs	r5, #0
   b9950:	7425      	strb	r5, [r4, #16]
   b9952:	f000 fe47 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b9956:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b9958:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b995a:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b995c:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b995e:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b9960:	f001 ff8f 	bl	bb882 <digitalWrite>
	delay(250);
   b9964:	20fa      	movs	r0, #250	; 0xfa
   b9966:	f001 fbb0 	bl	bb0ca <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b996a:	79a0      	ldrb	r0, [r4, #6]
   b996c:	2101      	movs	r1, #1
   b996e:	f001 ff77 	bl	bb860 <pinMode>
	digitalWrite(_pin, LOW);
   b9972:	4629      	mov	r1, r5
   b9974:	79a0      	ldrb	r0, [r4, #6]
   b9976:	f001 ff84 	bl	bb882 <digitalWrite>
	delay(20);
   b997a:	2014      	movs	r0, #20
   b997c:	f001 fba5 	bl	bb0ca <delay>
	noInterrupts();
   b9980:	f001 fd5e 	bl	bb440 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b9984:	2101      	movs	r1, #1
   b9986:	79a0      	ldrb	r0, [r4, #6]
   b9988:	f001 ff7b 	bl	bb882 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b998c:	2028      	movs	r0, #40	; 0x28
   b998e:	f000 fe21 	bl	ba5d4 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b9992:	79a0      	ldrb	r0, [r4, #6]
   b9994:	4629      	mov	r1, r5
   b9996:	f001 ff63 	bl	bb860 <pinMode>
	uint8_t j = 0, i;
   b999a:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b999c:	2701      	movs	r7, #1
   b999e:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b99a2:	79a0      	ldrb	r0, [r4, #6]
   b99a4:	f001 ff86 	bl	bb8b4 <digitalRead>
   b99a8:	42b8      	cmp	r0, r7
   b99aa:	fa5f f988 	uxtb.w	r9, r8
   b99ae:	d108      	bne.n	b99c2 <_ZN3DHT4readEv+0x96>
   b99b0:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b99b2:	f108 0801 	add.w	r8, r8, #1
   b99b6:	f000 fe0d 	bl	ba5d4 <HAL_Delay_Microseconds>
   b99ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b99be:	d1f0      	bne.n	b99a2 <_ZN3DHT4readEv+0x76>
   b99c0:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b99c2:	79a0      	ldrb	r0, [r4, #6]
   b99c4:	f001 ff76 	bl	bb8b4 <digitalRead>

		if (counter == 255) break;
   b99c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b99cc:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b99ce:	d014      	beq.n	b99fa <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b99d0:	2d03      	cmp	r5, #3
   b99d2:	d90e      	bls.n	b99f2 <_ZN3DHT4readEv+0xc6>
   b99d4:	07ea      	lsls	r2, r5, #31
   b99d6:	d40c      	bmi.n	b99f2 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b99d8:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b99da:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b99dc:	5ca3      	ldrb	r3, [r4, r2]
   b99de:	005b      	lsls	r3, r3, #1
   b99e0:	b2db      	uxtb	r3, r3
   b99e2:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b99e4:	7a21      	ldrb	r1, [r4, #8]
   b99e6:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b99e8:	bf3c      	itt	cc
   b99ea:	f043 0301 	orrcc.w	r3, r3, #1
   b99ee:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b99f0:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b99f2:	3501      	adds	r5, #1
   b99f4:	b2ed      	uxtb	r5, r5
   b99f6:	2d55      	cmp	r5, #85	; 0x55
   b99f8:	d1d1      	bne.n	b999e <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b99fa:	f001 fd23 	bl	bb444 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b99fe:	2e27      	cmp	r6, #39	; 0x27
   b9a00:	d90f      	bls.n	b9a22 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b9a02:	7863      	ldrb	r3, [r4, #1]
   b9a04:	7820      	ldrb	r0, [r4, #0]
   b9a06:	4418      	add	r0, r3
   b9a08:	78a3      	ldrb	r3, [r4, #2]
   b9a0a:	4418      	add	r0, r3
   b9a0c:	78e3      	ldrb	r3, [r4, #3]
   b9a0e:	4418      	add	r0, r3
   b9a10:	7923      	ldrb	r3, [r4, #4]
   b9a12:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b9a14:	1ac3      	subs	r3, r0, r3
   b9a16:	4258      	negs	r0, r3
   b9a18:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b9a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b9a1e:	2001      	movs	r0, #1
   b9a20:	e7fb      	b.n	b9a1a <_ZN3DHT4readEv+0xee>
	return false;
   b9a22:	2000      	movs	r0, #0
   b9a24:	e7f9      	b.n	b9a1a <_ZN3DHT4readEv+0xee>
	...

000b9a28 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b9a28:	b510      	push	{r4, lr}
   b9a2a:	4604      	mov	r4, r0
	if (read()) {
   b9a2c:	f7ff ff7e 	bl	b992c <_ZN3DHT4readEv>
   b9a30:	b320      	cbz	r0, b9a7c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b9a32:	79e3      	ldrb	r3, [r4, #7]
   b9a34:	2b0b      	cmp	r3, #11
   b9a36:	d01b      	beq.n	b9a70 <_ZN3DHT15readTemperatureEv+0x48>
   b9a38:	3b15      	subs	r3, #21
   b9a3a:	2b01      	cmp	r3, #1
   b9a3c:	d81e      	bhi.n	b9a7c <_ZN3DHT15readTemperatureEv+0x54>
   b9a3e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b9a40:	eddf 6a10 	vldr	s13, [pc, #64]	; b9a84 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b9a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b9a48:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b9a4c:	78e2      	ldrb	r2, [r4, #3]
   b9a4e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b9a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b9a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b9a5a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b9a5c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b9a60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b9a64:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b9a68:	d507      	bpl.n	b9a7a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b9a6a:	eeb1 0a40 	vneg.f32	s0, s0
   b9a6e:	e004      	b.n	b9a7a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b9a70:	78a3      	ldrb	r3, [r4, #2]
   b9a72:	ee00 3a10 	vmov	s0, r3
   b9a76:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b9a7a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b9a7c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9a88 <_ZN3DHT15readTemperatureEv+0x60>
   b9a80:	e7fb      	b.n	b9a7a <_ZN3DHT15readTemperatureEv+0x52>
   b9a82:	bf00      	nop
   b9a84:	43800000 	.word	0x43800000
   b9a88:	7fc00000 	.word	0x7fc00000

000b9a8c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b9a8c:	f7ff bfcc 	b.w	b9a28 <_ZN3DHT15readTemperatureEv>

000b9a90 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b9a90:	b510      	push	{r4, lr}
   b9a92:	4b04      	ldr	r3, [pc, #16]	; (b9aa4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b9a94:	6003      	str	r3, [r0, #0]
   b9a96:	4604      	mov	r4, r0
  if(buffer) {
   b9a98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9a9a:	b108      	cbz	r0, b9aa0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b9a9c:	f000 ff96 	bl	ba9cc <free>
    buffer = NULL;
  }
}
   b9aa0:	4620      	mov	r0, r4
   b9aa2:	bd10      	pop	{r4, pc}
   b9aa4:	000bdae4 	.word	0x000bdae4

000b9aa8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b9aa8:	b510      	push	{r4, lr}
   b9aaa:	4604      	mov	r4, r0
}
   b9aac:	f7ff fff0 	bl	b9a90 <_ZN16Adafruit_SSD1306D1Ev>
   b9ab0:	4620      	mov	r0, r4
   b9ab2:	2150      	movs	r1, #80	; 0x50
   b9ab4:	f7fa ffc7 	bl	b4a46 <_ZdlPvj>
   b9ab8:	4620      	mov	r0, r4
   b9aba:	bd10      	pop	{r4, pc}

000b9abc <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9abc:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b9abe:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9ac0:	db4b      	blt.n	b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9ac2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b9ac6:	428c      	cmp	r4, r1
   b9ac8:	dd47      	ble.n	b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9aca:	2a00      	cmp	r2, #0
   b9acc:	db45      	blt.n	b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9ace:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9ad2:	4294      	cmp	r4, r2
   b9ad4:	dd41      	ble.n	b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b9ad6:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b9ad8:	2c02      	cmp	r4, #2
   b9ada:	d01f      	beq.n	b9b1c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b9adc:	2c03      	cmp	r4, #3
   b9ade:	d026      	beq.n	b9b2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b9ae0:	2c01      	cmp	r4, #1
   b9ae2:	d104      	bne.n	b9aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b9ae4:	8904      	ldrh	r4, [r0, #8]
   b9ae6:	43d2      	mvns	r2, r2
   b9ae8:	4414      	add	r4, r2
      break;
   b9aea:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b9aec:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b9aee:	2b01      	cmp	r3, #1
   b9af0:	d023      	beq.n	b9b3a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b9af2:	2b02      	cmp	r3, #2
   b9af4:	d032      	beq.n	b9b5c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b9af6:	bb83      	cbnz	r3, b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b9af8:	2a00      	cmp	r2, #0
   b9afa:	4613      	mov	r3, r2
   b9afc:	8904      	ldrh	r4, [r0, #8]
   b9afe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9b00:	bfb8      	it	lt
   b9b02:	1dd3      	addlt	r3, r2, #7
   b9b04:	10db      	asrs	r3, r3, #3
   b9b06:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b0a:	f002 0207 	and.w	r2, r2, #7
   b9b0e:	2301      	movs	r3, #1
   b9b10:	4093      	lsls	r3, r2
   b9b12:	5c42      	ldrb	r2, [r0, r1]
   b9b14:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9b18:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b9b1a:	e01e      	b.n	b9b5a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b9b1c:	8904      	ldrh	r4, [r0, #8]
   b9b1e:	3c01      	subs	r4, #1
   b9b20:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b9b22:	8944      	ldrh	r4, [r0, #10]
   b9b24:	43d2      	mvns	r2, r2
   b9b26:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b9b28:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b9b2a:	b212      	sxth	r2, r2
      break;
   b9b2c:	e7df      	b.n	b9aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b9b2e:	8944      	ldrh	r4, [r0, #10]
   b9b30:	3c01      	subs	r4, #1
   b9b32:	1a64      	subs	r4, r4, r1
      break;
   b9b34:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b9b36:	b222      	sxth	r2, r4
      break;
   b9b38:	e7d9      	b.n	b9aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b9b3a:	2a00      	cmp	r2, #0
   b9b3c:	8904      	ldrh	r4, [r0, #8]
   b9b3e:	4613      	mov	r3, r2
   b9b40:	bfb8      	it	lt
   b9b42:	1dd3      	addlt	r3, r2, #7
   b9b44:	10db      	asrs	r3, r3, #3
   b9b46:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b9b4c:	f002 0007 	and.w	r0, r2, #7
   b9b50:	2201      	movs	r2, #1
   b9b52:	4082      	lsls	r2, r0
   b9b54:	5c58      	ldrb	r0, [r3, r1]
   b9b56:	4302      	orrs	r2, r0
   b9b58:	545a      	strb	r2, [r3, r1]
}
   b9b5a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9b5c:	2a00      	cmp	r2, #0
   b9b5e:	4613      	mov	r3, r2
   b9b60:	8904      	ldrh	r4, [r0, #8]
   b9b62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9b64:	bfb8      	it	lt
   b9b66:	1dd3      	addlt	r3, r2, #7
   b9b68:	10db      	asrs	r3, r3, #3
   b9b6a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b6e:	f002 0207 	and.w	r2, r2, #7
   b9b72:	2301      	movs	r3, #1
   b9b74:	fa03 f202 	lsl.w	r2, r3, r2
   b9b78:	5c43      	ldrb	r3, [r0, r1]
   b9b7a:	405a      	eors	r2, r3
   b9b7c:	e7cc      	b.n	b9b18 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b9b80 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b9b80:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b9b82:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b9b84:	4604      	mov	r4, r0
   b9b86:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b9b88:	2180      	movs	r1, #128	; 0x80
   b9b8a:	f7fe fe1d 	bl	b87c8 <_ZN12Adafruit_GFXC1Ess>
   b9b8e:	2500      	movs	r5, #0
   b9b90:	4b0d      	ldr	r3, [pc, #52]	; (b9bc8 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b9b92:	6023      	str	r3, [r4, #0]
   b9b94:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b9b96:	f001 ff47 	bl	bba28 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b9b9a:	23ff      	movs	r3, #255	; 0xff
   b9b9c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b9ba0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b9ba4:	4b09      	ldr	r3, [pc, #36]	; (b9bcc <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b9ba6:	63a3      	str	r3, [r4, #56]	; 0x38
   b9ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9bac:	2301      	movs	r3, #1
   b9bae:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b9bb2:	86a2      	strh	r2, [r4, #52]	; 0x34
   b9bb4:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b9bb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b9bbc:	6425      	str	r5, [r4, #64]	; 0x40
   b9bbe:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b9bc2:	4620      	mov	r0, r4
   b9bc4:	bd70      	pop	{r4, r5, r6, pc}
   b9bc6:	bf00      	nop
   b9bc8:	000bdae4 	.word	0x000bdae4
   b9bcc:	000bd4f0 	.word	0x000bd4f0

000b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bd2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9bd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9bd6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9bd8:	b190      	cbz	r0, b9c00 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b9bda:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9bde:	f001 fd07 	bl	bb5f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9be2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9be4:	6803      	ldr	r3, [r0, #0]
   b9be6:	2100      	movs	r1, #0
   b9be8:	689b      	ldr	r3, [r3, #8]
   b9bea:	4798      	blx	r3
    WIRE_WRITE(c);
   b9bec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9bee:	6803      	ldr	r3, [r0, #0]
   b9bf0:	4629      	mov	r1, r5
   b9bf2:	689b      	ldr	r3, [r3, #8]
   b9bf4:	4798      	blx	r3
    wire->endTransmission();
   b9bf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b9bf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b9bfc:	f001 bcff 	b.w	bb5fe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9c00:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9c04:	4601      	mov	r1, r0
   b9c06:	b298      	uxth	r0, r3
   b9c08:	f001 fe3b 	bl	bb882 <digitalWrite>
  if(spi) {
   b9c0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c0e:	b120      	cbz	r0, b9c1a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b9c10:	4629      	mov	r1, r5
}
   b9c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b9c16:	f000 bffb 	b.w	bac10 <_ZN8SPIClass8transferEh>
   b9c1a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9c1c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9c1e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9c22:	ea05 0107 	and.w	r1, r5, r7
   b9c26:	b280      	uxth	r0, r0
   b9c28:	f001 fe2b 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9c2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9c30:	2101      	movs	r1, #1
   b9c32:	b280      	uxth	r0, r0
   b9c34:	f001 fe25 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9c38:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9c3c:	2100      	movs	r1, #0
   b9c3e:	b280      	uxth	r0, r0
   b9c40:	f001 fe1f 	bl	bb882 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9c44:	3e01      	subs	r6, #1
   b9c46:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b9c4a:	d1e8      	bne.n	b9c1e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b9c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c4e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9c4e:	b538      	push	{r3, r4, r5, lr}
   b9c50:	4604      	mov	r4, r0
  TRANSACTION_START
   b9c52:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9c54:	460d      	mov	r5, r1
  TRANSACTION_START
   b9c56:	b180      	cbz	r0, b9c7a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b9c58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9c5a:	f001 fcbb 	bl	bb5d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b9c5e:	2d00      	cmp	r5, #0
   b9c60:	4620      	mov	r0, r4
   b9c62:	bf14      	ite	ne
   b9c64:	21a7      	movne	r1, #167	; 0xa7
   b9c66:	21a6      	moveq	r1, #166	; 0xa6
   b9c68:	f7ff ffb2 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b9c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9c6e:	b188      	cbz	r0, b9c94 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b9c70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b9c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c76:	f001 bcad 	b.w	bb5d4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b9c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c7c:	b118      	cbz	r0, b9c86 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b9c7e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9c82:	f000 ff57 	bl	bab34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9c86:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9c8a:	2100      	movs	r1, #0
   b9c8c:	b280      	uxth	r0, r0
   b9c8e:	f001 fdf8 	bl	bb882 <digitalWrite>
   b9c92:	e7e4      	b.n	b9c5e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b9c94:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9c98:	2101      	movs	r1, #1
   b9c9a:	b280      	uxth	r0, r0
   b9c9c:	f001 fdf1 	bl	bb882 <digitalWrite>
   b9ca0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9ca2:	b118      	cbz	r0, b9cac <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b9ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b9ca8:	f000 bf2a 	b.w	bab00 <_ZN8SPIClass14endTransactionEv>
}
   b9cac:	bd38      	pop	{r3, r4, r5, pc}

000b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9cae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9cb2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9cb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9cb6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9cb8:	188f      	adds	r7, r1, r2
   b9cba:	b340      	cbz	r0, b9d0e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b9cbc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9cc0:	f001 fc96 	bl	bb5f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9cc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cc6:	6803      	ldr	r3, [r0, #0]
   b9cc8:	2100      	movs	r1, #0
   b9cca:	689b      	ldr	r3, [r3, #8]
   b9ccc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b9cce:	2601      	movs	r6, #1
    while(n--) {
   b9cd0:	42af      	cmp	r7, r5
        wire->endTransmission();
   b9cd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b9cd4:	d017      	beq.n	b9d06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b9cd6:	2e1f      	cmp	r6, #31
   b9cd8:	d90c      	bls.n	b9cf4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b9cda:	f001 fc90 	bl	bb5fe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b9cde:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9ce2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9ce4:	f001 fc84 	bl	bb5f0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9ce8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cea:	6803      	ldr	r3, [r0, #0]
   b9cec:	2100      	movs	r1, #0
   b9cee:	689b      	ldr	r3, [r3, #8]
   b9cf0:	4798      	blx	r3
        bytesOut = 1;
   b9cf2:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9cf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cf6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9cfa:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b9cfc:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9cfe:	689b      	ldr	r3, [r3, #8]
   b9d00:	4798      	blx	r3
      bytesOut++;
   b9d02:	b2f6      	uxtb	r6, r6
    while(n--) {
   b9d04:	e7e4      	b.n	b9cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b9d06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b9d0a:	f001 bc78 	b.w	bb5fe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9d0e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9d12:	4601      	mov	r1, r0
   b9d14:	b298      	uxth	r0, r3
   b9d16:	f001 fdb4 	bl	bb882 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9d1a:	42bd      	cmp	r5, r7
   b9d1c:	d022      	beq.n	b9d64 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b9d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9d20:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9d24:	b118      	cbz	r0, b9d2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b9d26:	4649      	mov	r1, r9
   b9d28:	f000 ff72 	bl	bac10 <_ZN8SPIClass8transferEh>
   b9d2c:	e7f5      	b.n	b9d1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b9d2e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d30:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9d34:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9d38:	ea09 0108 	and.w	r1, r9, r8
   b9d3c:	b280      	uxth	r0, r0
   b9d3e:	f001 fda0 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9d42:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d46:	2101      	movs	r1, #1
   b9d48:	b280      	uxth	r0, r0
   b9d4a:	f001 fd9a 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9d4e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d52:	2100      	movs	r1, #0
   b9d54:	b280      	uxth	r0, r0
   b9d56:	f001 fd94 	bl	bb882 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d5a:	3e01      	subs	r6, #1
   b9d5c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b9d60:	d1e8      	bne.n	b9d34 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b9d62:	e7da      	b.n	b9d1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b9d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b9d68:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9d6c:	1dda      	adds	r2, r3, #7
   b9d6e:	bf48      	it	mi
   b9d70:	f103 020e 	addmi.w	r2, r3, #14
   b9d74:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b9d78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9d7a:	10d2      	asrs	r2, r2, #3
   b9d7c:	435a      	muls	r2, r3
   b9d7e:	2100      	movs	r1, #0
   b9d80:	f001 be94 	b.w	bbaac <memset>

000b9d84 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b9d84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9d88:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9d8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b9d8c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b9d90:	4604      	mov	r4, r0
   b9d92:	460f      	mov	r7, r1
   b9d94:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9d96:	b1d3      	cbz	r3, b9dce <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b9d98:	4620      	mov	r0, r4
   b9d9a:	f7ff ffe5 	bl	b9d68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b9d9e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b9da2:	2a20      	cmp	r2, #32
   b9da4:	dc25      	bgt.n	b9df2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9da6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b9daa:	2320      	movs	r3, #32
   b9dac:	3a20      	subs	r2, #32
   b9dae:	3973      	subs	r1, #115	; 0x73
   b9db0:	2001      	movs	r0, #1
   b9db2:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b9db6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9dba:	2373      	movs	r3, #115	; 0x73
   b9dbc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9dc0:	9300      	str	r3, [sp, #0]
   b9dc2:	f342 024f 	sbfx	r2, r2, #1, #16
   b9dc6:	4b85      	ldr	r3, [pc, #532]	; (b9fdc <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b9dc8:	f341 014f 	sbfx	r1, r1, #1, #16
   b9dcc:	e01b      	b.n	b9e06 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9dce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9dd2:	1dd8      	adds	r0, r3, #7
   b9dd4:	bf48      	it	mi
   b9dd6:	f103 000e 	addmi.w	r0, r3, #14
   b9dda:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b9dde:	10c0      	asrs	r0, r0, #3
   b9de0:	4358      	muls	r0, r3
   b9de2:	f000 fdeb 	bl	ba9bc <malloc>
   b9de6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b9de8:	2800      	cmp	r0, #0
   b9dea:	d1d5      	bne.n	b9d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b9dec:	b004      	add	sp, #16
   b9dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b9df2:	2340      	movs	r3, #64	; 0x40
   b9df4:	f04f 0c01 	mov.w	ip, #1
   b9df8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b9dfc:	2380      	movs	r3, #128	; 0x80
   b9dfe:	9300      	str	r3, [sp, #0]
   b9e00:	2200      	movs	r2, #0
   b9e02:	4b77      	ldr	r3, [pc, #476]	; (b9fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b9e04:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9e06:	4620      	mov	r0, r4
   b9e08:	f7fe fea6 	bl	b8b58 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b9e0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b9e0e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b9e12:	2800      	cmp	r0, #0
   b9e14:	d078      	beq.n	b9f08 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9e16:	2d00      	cmp	r5, #0
   b9e18:	d174      	bne.n	b9f04 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b9e1a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9e1e:	2b20      	cmp	r3, #32
   b9e20:	bf0c      	ite	eq
   b9e22:	253c      	moveq	r5, #60	; 0x3c
   b9e24:	253d      	movne	r5, #61	; 0x3d
   b9e26:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b9e2a:	f1b8 0f00 	cmp.w	r8, #0
   b9e2e:	d001      	beq.n	b9e34 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9e30:	f001 fbd4 	bl	bb5dc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b9e34:	b1fe      	cbz	r6, b9e76 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b9e36:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e3a:	2800      	cmp	r0, #0
   b9e3c:	db1b      	blt.n	b9e76 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b9e3e:	2101      	movs	r1, #1
   b9e40:	b280      	uxth	r0, r0
   b9e42:	f001 fd0d 	bl	bb860 <pinMode>
    digitalWrite(rstPin, HIGH);
   b9e46:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e4a:	2101      	movs	r1, #1
   b9e4c:	b280      	uxth	r0, r0
   b9e4e:	f001 fd18 	bl	bb882 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b9e52:	2001      	movs	r0, #1
   b9e54:	f001 f939 	bl	bb0ca <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b9e58:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e5c:	2100      	movs	r1, #0
   b9e5e:	b280      	uxth	r0, r0
   b9e60:	f001 fd0f 	bl	bb882 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9e64:	200a      	movs	r0, #10
   b9e66:	f001 f930 	bl	bb0ca <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b9e6a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e6e:	2101      	movs	r1, #1
   b9e70:	b280      	uxth	r0, r0
   b9e72:	f001 fd06 	bl	bb882 <digitalWrite>
  TRANSACTION_START
   b9e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9e78:	2800      	cmp	r0, #0
   b9e7a:	d074      	beq.n	b9f66 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b9e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9e7e:	f001 fba9 	bl	bb5d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b9e82:	2204      	movs	r2, #4
   b9e84:	4957      	ldr	r1, [pc, #348]	; (b9fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b9e86:	4620      	mov	r0, r4
   b9e88:	f7ff ff11 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b9e8c:	8961      	ldrh	r1, [r4, #10]
   b9e8e:	3901      	subs	r1, #1
   b9e90:	b2c9      	uxtb	r1, r1
   b9e92:	4620      	mov	r0, r4
   b9e94:	f7ff fe9c 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b9e98:	4953      	ldr	r1, [pc, #332]	; (b9fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b9e9a:	2204      	movs	r2, #4
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	f7ff ff06 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b9ea2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9ea6:	2b01      	cmp	r3, #1
   b9ea8:	bf0c      	ite	eq
   b9eaa:	2110      	moveq	r1, #16
   b9eac:	2114      	movne	r1, #20
   b9eae:	4620      	mov	r0, r4
   b9eb0:	f7ff fe8e 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b9eb4:	2204      	movs	r2, #4
   b9eb6:	494d      	ldr	r1, [pc, #308]	; (b9fec <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b9eb8:	4620      	mov	r0, r4
   b9eba:	f7ff fef8 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b9ebe:	68a3      	ldr	r3, [r4, #8]
   b9ec0:	4a4b      	ldr	r2, [pc, #300]	; (b9ff0 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b9ec2:	4293      	cmp	r3, r2
   b9ec4:	d15c      	bne.n	b9f80 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b9ec6:	494b      	ldr	r1, [pc, #300]	; (b9ff4 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b9ec8:	2204      	movs	r2, #4
   b9eca:	4620      	mov	r0, r4
   b9ecc:	f7ff feef 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b9ed0:	21d9      	movs	r1, #217	; 0xd9
   b9ed2:	4620      	mov	r0, r4
   b9ed4:	f7ff fe7c 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b9ed8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9edc:	2b01      	cmp	r3, #1
   b9ede:	bf0c      	ite	eq
   b9ee0:	2122      	moveq	r1, #34	; 0x22
   b9ee2:	21f1      	movne	r1, #241	; 0xf1
   b9ee4:	4620      	mov	r0, r4
   b9ee6:	f7ff fe73 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b9eea:	4620      	mov	r0, r4
   b9eec:	4942      	ldr	r1, [pc, #264]	; (b9ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b9eee:	2206      	movs	r2, #6
   b9ef0:	f7ff fedd 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b9ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9ef6:	2800      	cmp	r0, #0
   b9ef8:	d063      	beq.n	b9fc2 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b9efa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b9efc:	f001 fb6a 	bl	bb5d4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b9f00:	2001      	movs	r0, #1
   b9f02:	e773      	b.n	b9dec <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9f04:	b26d      	sxtb	r5, r5
   b9f06:	e78e      	b.n	b9e26 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b9f08:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b9f0c:	2101      	movs	r1, #1
   b9f0e:	b280      	uxth	r0, r0
   b9f10:	f001 fca6 	bl	bb860 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b9f14:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f18:	2101      	movs	r1, #1
   b9f1a:	b280      	uxth	r0, r0
   b9f1c:	f001 fca0 	bl	bb860 <pinMode>
    SSD1306_DESELECT
   b9f20:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f24:	2101      	movs	r1, #1
   b9f26:	b280      	uxth	r0, r0
   b9f28:	f001 fcab 	bl	bb882 <digitalWrite>
    if(spi) { // Hardware SPI
   b9f2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b9f2e:	b13d      	cbz	r5, b9f40 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b9f30:	f1b8 0f00 	cmp.w	r8, #0
   b9f34:	f43f af7e 	beq.w	b9e34 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9f38:	4628      	mov	r0, r5
   b9f3a:	f000 fdcd 	bl	baad8 <_ZN8SPIClass5beginEv>
   b9f3e:	e779      	b.n	b9e34 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b9f40:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9f44:	2101      	movs	r1, #1
   b9f46:	b280      	uxth	r0, r0
   b9f48:	f001 fc8a 	bl	bb860 <pinMode>
      pinMode(clkPin , OUTPUT);
   b9f4c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9f50:	2101      	movs	r1, #1
   b9f52:	b280      	uxth	r0, r0
   b9f54:	f001 fc84 	bl	bb860 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b9f58:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9f5c:	4629      	mov	r1, r5
   b9f5e:	b280      	uxth	r0, r0
   b9f60:	f001 fc8f 	bl	bb882 <digitalWrite>
   b9f64:	e766      	b.n	b9e34 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b9f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9f68:	b118      	cbz	r0, b9f72 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b9f6a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9f6e:	f000 fde1 	bl	bab34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9f72:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f76:	2100      	movs	r1, #0
   b9f78:	b280      	uxth	r0, r0
   b9f7a:	f001 fc82 	bl	bb882 <digitalWrite>
   b9f7e:	e780      	b.n	b9e82 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b9f80:	4a1e      	ldr	r2, [pc, #120]	; (b9ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b9f82:	4293      	cmp	r3, r2
   b9f84:	d10e      	bne.n	b9fa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b9f86:	491e      	ldr	r1, [pc, #120]	; (ba000 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b9f88:	2203      	movs	r2, #3
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f7ff fe8f 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b9f90:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9f94:	2b01      	cmp	r3, #1
   b9f96:	bf0c      	ite	eq
   b9f98:	219f      	moveq	r1, #159	; 0x9f
   b9f9a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9f9c:	4620      	mov	r0, r4
   b9f9e:	f7ff fe17 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b9fa2:	e795      	b.n	b9ed0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b9fa4:	4a17      	ldr	r2, [pc, #92]	; (ba004 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b9fa6:	4293      	cmp	r3, r2
   b9fa8:	d192      	bne.n	b9ed0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b9faa:	4917      	ldr	r1, [pc, #92]	; (ba008 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b9fac:	2203      	movs	r2, #3
   b9fae:	4620      	mov	r0, r4
   b9fb0:	f7ff fe7d 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9fb4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9fb8:	2b01      	cmp	r3, #1
   b9fba:	bf0c      	ite	eq
   b9fbc:	2110      	moveq	r1, #16
   b9fbe:	21af      	movne	r1, #175	; 0xaf
   b9fc0:	e7ec      	b.n	b9f9c <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b9fc2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9fc6:	2101      	movs	r1, #1
   b9fc8:	b280      	uxth	r0, r0
   b9fca:	f001 fc5a 	bl	bb882 <digitalWrite>
   b9fce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9fd0:	2800      	cmp	r0, #0
   b9fd2:	d095      	beq.n	b9f00 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9fd4:	f000 fd94 	bl	bab00 <_ZN8SPIClass14endTransactionEv>
   b9fd8:	e792      	b.n	b9f00 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9fda:	bf00      	nop
   b9fdc:	000bd4fc 	.word	0x000bd4fc
   b9fe0:	000bd6dc 	.word	0x000bd6dc
   b9fe4:	000bdb44 	.word	0x000bdb44
   b9fe8:	000bdb48 	.word	0x000bdb48
   b9fec:	000bdb4c 	.word	0x000bdb4c
   b9ff0:	00200080 	.word	0x00200080
   b9ff4:	000bdb56 	.word	0x000bdb56
   b9ff8:	000bdb50 	.word	0x000bdb50
   b9ffc:	00400080 	.word	0x00400080
   ba000:	000bdb5a 	.word	0x000bdb5a
   ba004:	00100060 	.word	0x00100060
   ba008:	000bdb5d 	.word	0x000bdb5d

000ba00c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba00c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   ba00e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba010:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   ba014:	db3d      	blt.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba016:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   ba01a:	4294      	cmp	r4, r2
   ba01c:	dd39      	ble.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   ba01e:	2900      	cmp	r1, #0
      w += x;
   ba020:	bfbe      	ittt	lt
   ba022:	185b      	addlt	r3, r3, r1
   ba024:	b21b      	sxthlt	r3, r3
      x  = 0;
   ba026:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   ba028:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   ba02c:	18ce      	adds	r6, r1, r3
   ba02e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   ba030:	bfc4      	itt	gt
   ba032:	1a63      	subgt	r3, r4, r1
   ba034:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   ba036:	2b00      	cmp	r3, #0
   ba038:	dd2b      	ble.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   ba03a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   ba03c:	10d6      	asrs	r6, r2, #3
   ba03e:	fb14 1106 	smlabb	r1, r4, r6, r1
   ba042:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   ba044:	f002 0007 	and.w	r0, r2, #7
   ba048:	2201      	movs	r2, #1
   ba04a:	4082      	lsls	r2, r0
      switch(color) {
   ba04c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   ba04e:	b2d2      	uxtb	r2, r2
      switch(color) {
   ba050:	d016      	beq.n	ba080 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   ba052:	2d02      	cmp	r5, #2
   ba054:	d00b      	beq.n	ba06e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   ba056:	b9e5      	cbnz	r5, ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   ba058:	43d2      	mvns	r2, r2
   ba05a:	b2d2      	uxtb	r2, r2
   ba05c:	440b      	add	r3, r1
   ba05e:	4299      	cmp	r1, r3
   ba060:	d017      	beq.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba062:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba066:	4010      	ands	r0, r2
   ba068:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba06c:	e7f7      	b.n	ba05e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   ba06e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   ba070:	4299      	cmp	r1, r3
   ba072:	d00e      	beq.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba074:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba078:	4050      	eors	r0, r2
   ba07a:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba07e:	e7f7      	b.n	ba070 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   ba080:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   ba082:	4299      	cmp	r1, r3
   ba084:	d005      	beq.n	ba092 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba086:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba08a:	4310      	orrs	r0, r2
   ba08c:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba090:	e7f7      	b.n	ba082 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   ba092:	bd70      	pop	{r4, r5, r6, pc}

000ba094 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   ba094:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   ba096:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   ba098:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   ba09c:	db76      	blt.n	ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   ba09e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   ba0a2:	42b1      	cmp	r1, r6
   ba0a4:	da72      	bge.n	ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   ba0a6:	2a00      	cmp	r2, #0
      __h += __y;
   ba0a8:	bfbe      	ittt	lt
   ba0aa:	189b      	addlt	r3, r3, r2
   ba0ac:	b21b      	sxthlt	r3, r3
      __y = 0;
   ba0ae:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   ba0b0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   ba0b4:	18d7      	adds	r7, r2, r3
   ba0b6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   ba0b8:	bfc4      	itt	gt
   ba0ba:	1aa3      	subgt	r3, r4, r2
   ba0bc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   ba0be:	2b00      	cmp	r3, #0
   ba0c0:	dd64      	ble.n	ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   ba0c2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   ba0c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   ba0c8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   ba0cc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   ba0d0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   ba0d2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   ba0d6:	d023      	beq.n	ba120 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   ba0d8:	f1c2 0208 	rsb	r2, r2, #8
   ba0dc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   ba0de:	492d      	ldr	r1, [pc, #180]	; (ba194 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   ba0e0:	4293      	cmp	r3, r2
   ba0e2:	bf3c      	itt	cc
   ba0e4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   ba0e8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   ba0ec:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   ba0ee:	bf3c      	itt	cc
   ba0f0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   ba0f4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   ba0f8:	2d01      	cmp	r5, #1
   ba0fa:	d007      	beq.n	ba10c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   ba0fc:	2d02      	cmp	r5, #2
   ba0fe:	d02e      	beq.n	ba15e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   ba100:	b94d      	cbnz	r5, ba116 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   ba102:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba106:	ea2c 0101 	bic.w	r1, ip, r1
   ba10a:	e003      	b.n	ba114 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   ba10c:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba110:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   ba114:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   ba116:	4293      	cmp	r3, r2
   ba118:	d338      	bcc.n	ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   ba11a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   ba11e:	440c      	add	r4, r1
        h -= mod;
   ba120:	1a9a      	subs	r2, r3, r2
   ba122:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   ba124:	2a07      	cmp	r2, #7
   ba126:	d90e      	bls.n	ba146 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   ba128:	2d02      	cmp	r5, #2
   ba12a:	d11d      	bne.n	ba168 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   ba12c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   ba12e:	7821      	ldrb	r1, [r4, #0]
   ba130:	43c9      	mvns	r1, r1
   ba132:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   ba134:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   ba136:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   ba13a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   ba13c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   ba13e:	440c      	add	r4, r1
            } while(h >= 8);
   ba140:	d8f5      	bhi.n	ba12e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   ba142:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   ba146:	b30a      	cbz	r2, ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   ba148:	4b13      	ldr	r3, [pc, #76]	; (ba198 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   ba14a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   ba14c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   ba14e:	d01a      	beq.n	ba186 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   ba150:	2d02      	cmp	r5, #2
   ba152:	d01c      	beq.n	ba18e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   ba154:	b9d5      	cbnz	r5, ba18c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   ba156:	7822      	ldrb	r2, [r4, #0]
   ba158:	ea22 0303 	bic.w	r3, r2, r3
   ba15c:	e015      	b.n	ba18a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   ba15e:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba162:	ea81 010c 	eor.w	r1, r1, ip
   ba166:	e7d5      	b.n	ba114 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   ba168:	1e29      	subs	r1, r5, #0
   ba16a:	bf18      	it	ne
   ba16c:	2101      	movne	r1, #1
   ba16e:	4249      	negs	r1, r1
   ba170:	b2c9      	uxtb	r1, r1
   ba172:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   ba174:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   ba176:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   ba178:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   ba17c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   ba17e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   ba180:	4434      	add	r4, r6
            } while(h >= 8);
   ba182:	d8f7      	bhi.n	ba174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   ba184:	e7dd      	b.n	ba142 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   ba186:	7822      	ldrb	r2, [r4, #0]
   ba188:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   ba18a:	7023      	strb	r3, [r4, #0]
}
   ba18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   ba18e:	7822      	ldrb	r2, [r4, #0]
   ba190:	4053      	eors	r3, r2
   ba192:	e7fa      	b.n	ba18a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   ba194:	000bdb34 	.word	0x000bdb34
   ba198:	000bdb3c 	.word	0x000bdb3c

000ba19c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba19c:	b470      	push	{r4, r5, r6}
   ba19e:	4614      	mov	r4, r2
  switch(rotation) {
   ba1a0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba1a2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   ba1a6:	2a02      	cmp	r2, #2
   ba1a8:	d00d      	beq.n	ba1c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   ba1aa:	2a03      	cmp	r2, #3
   ba1ac:	d018      	beq.n	ba1e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   ba1ae:	2a01      	cmp	r2, #1
   ba1b0:	d111      	bne.n	ba1d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   ba1b2:	8902      	ldrh	r2, [r0, #8]
   ba1b4:	43e4      	mvns	r4, r4
   ba1b6:	4414      	add	r4, r2
   ba1b8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   ba1ba:	9603      	str	r6, [sp, #12]
   ba1bc:	460a      	mov	r2, r1
   ba1be:	4621      	mov	r1, r4
}
   ba1c0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   ba1c2:	f7ff bf67 	b.w	ba094 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   ba1c6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   ba1c8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   ba1ca:	43e4      	mvns	r4, r4
    x -= (w-1);
   ba1cc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   ba1ce:	4414      	add	r4, r2
    x -= (w-1);
   ba1d0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   ba1d2:	b224      	sxth	r4, r4
    x -= (w-1);
   ba1d4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   ba1d6:	9603      	str	r6, [sp, #12]
   ba1d8:	4622      	mov	r2, r4
}
   ba1da:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   ba1dc:	f7ff bf16 	b.w	ba00c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   ba1e0:	8945      	ldrh	r5, [r0, #10]
   ba1e2:	4419      	add	r1, r3
   ba1e4:	1a69      	subs	r1, r5, r1
   ba1e6:	b209      	sxth	r1, r1
    break;
   ba1e8:	e7e7      	b.n	ba1ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000ba1ea <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   ba1ea:	b430      	push	{r4, r5}
   ba1ec:	4614      	mov	r4, r2
  switch(rotation) {
   ba1ee:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   ba1f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   ba1f4:	2a02      	cmp	r2, #2
   ba1f6:	d00d      	beq.n	ba214 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   ba1f8:	2a03      	cmp	r2, #3
   ba1fa:	d018      	beq.n	ba22e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   ba1fc:	2a01      	cmp	r2, #1
   ba1fe:	d111      	bne.n	ba224 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   ba200:	18e2      	adds	r2, r4, r3
   ba202:	8904      	ldrh	r4, [r0, #8]
   ba204:	1aa4      	subs	r4, r4, r2
   ba206:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   ba208:	9502      	str	r5, [sp, #8]
   ba20a:	460a      	mov	r2, r1
   ba20c:	4621      	mov	r1, r4
}
   ba20e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   ba210:	f7ff befc 	b.w	ba00c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   ba214:	8902      	ldrh	r2, [r0, #8]
   ba216:	43c9      	mvns	r1, r1
   ba218:	4411      	add	r1, r2
    y -= (h-1);
   ba21a:	18e2      	adds	r2, r4, r3
   ba21c:	8944      	ldrh	r4, [r0, #10]
   ba21e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   ba220:	b209      	sxth	r1, r1
    y -= (h-1);
   ba222:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   ba224:	9502      	str	r5, [sp, #8]
   ba226:	4622      	mov	r2, r4
}
   ba228:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   ba22a:	f7ff bf33 	b.w	ba094 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   ba22e:	8942      	ldrh	r2, [r0, #10]
   ba230:	43c9      	mvns	r1, r1
   ba232:	4411      	add	r1, r2
   ba234:	b209      	sxth	r1, r1
    break;
   ba236:	e7e7      	b.n	ba208 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000ba238 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   ba238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba23c:	4604      	mov	r4, r0
  TRANSACTION_START
   ba23e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   ba240:	2800      	cmp	r0, #0
   ba242:	d042      	beq.n	ba2ca <_ZN16Adafruit_SSD13067displayEv+0x92>
   ba244:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   ba246:	f001 f9c5 	bl	bb5d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   ba24a:	4947      	ldr	r1, [pc, #284]	; (ba368 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   ba24c:	2205      	movs	r2, #5
   ba24e:	4620      	mov	r0, r4
   ba250:	f7ff fd2d 	bl	b9cae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   ba254:	8921      	ldrh	r1, [r4, #8]
   ba256:	3901      	subs	r1, #1
   ba258:	4620      	mov	r0, r4
   ba25a:	b2c9      	uxtb	r1, r1
   ba25c:	f7ff fcb8 	bl	b9bd0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   ba260:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   ba264:	1dde      	adds	r6, r3, #7
   ba266:	bf48      	it	mi
   ba268:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   ba26c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   ba270:	8923      	ldrh	r3, [r4, #8]
   ba272:	10f6      	asrs	r6, r6, #3
   ba274:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   ba278:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   ba27c:	2800      	cmp	r0, #0
   ba27e:	d03a      	beq.n	ba2f6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   ba280:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   ba284:	f001 f9b4 	bl	bb5f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   ba288:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba28a:	6803      	ldr	r3, [r0, #0]
   ba28c:	2140      	movs	r1, #64	; 0x40
   ba28e:	689b      	ldr	r3, [r3, #8]
   ba290:	4798      	blx	r3
    uint8_t bytesOut = 1;
   ba292:	2701      	movs	r7, #1
    while(count--) {
   ba294:	42b5      	cmp	r5, r6
        wire->endTransmission();
   ba296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   ba298:	d024      	beq.n	ba2e4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   ba29a:	2f1f      	cmp	r7, #31
   ba29c:	d90c      	bls.n	ba2b8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   ba29e:	f001 f9ae 	bl	bb5fe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   ba2a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   ba2a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2a8:	f001 f9a2 	bl	bb5f0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   ba2ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2ae:	6803      	ldr	r3, [r0, #0]
   ba2b0:	2140      	movs	r1, #64	; 0x40
   ba2b2:	689b      	ldr	r3, [r3, #8]
   ba2b4:	4798      	blx	r3
        bytesOut = 1;
   ba2b6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   ba2b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2ba:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba2be:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   ba2c0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   ba2c2:	689b      	ldr	r3, [r3, #8]
   ba2c4:	4798      	blx	r3
      bytesOut++;
   ba2c6:	b2ff      	uxtb	r7, r7
    while(count--) {
   ba2c8:	e7e4      	b.n	ba294 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   ba2ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba2cc:	b118      	cbz	r0, ba2d6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   ba2ce:	f104 0138 	add.w	r1, r4, #56	; 0x38
   ba2d2:	f000 fc2f 	bl	bab34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   ba2d6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   ba2da:	2100      	movs	r1, #0
   ba2dc:	b280      	uxth	r0, r0
   ba2de:	f001 fad0 	bl	bb882 <digitalWrite>
   ba2e2:	e7b2      	b.n	ba24a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   ba2e4:	f001 f98b 	bl	bb5fe <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   ba2e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2ea:	b378      	cbz	r0, ba34c <_ZN16Adafruit_SSD13067displayEv+0x114>
   ba2ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   ba2ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba2f2:	f001 b96f 	b.w	bb5d4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   ba2f6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   ba2fa:	2101      	movs	r1, #1
   ba2fc:	b280      	uxth	r0, r0
   ba2fe:	f001 fac0 	bl	bb882 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   ba302:	42ae      	cmp	r6, r5
   ba304:	d0f0      	beq.n	ba2e8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   ba306:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   ba308:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   ba30c:	b118      	cbz	r0, ba316 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   ba30e:	4649      	mov	r1, r9
   ba310:	f000 fc7e 	bl	bac10 <_ZN8SPIClass8transferEh>
   ba314:	e7f5      	b.n	ba302 <_ZN16Adafruit_SSD13067displayEv+0xca>
   ba316:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   ba318:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   ba31c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   ba320:	ea09 0108 	and.w	r1, r9, r8
   ba324:	b280      	uxth	r0, r0
   ba326:	f001 faac 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   ba32a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   ba32e:	2101      	movs	r1, #1
   ba330:	b280      	uxth	r0, r0
   ba332:	f001 faa6 	bl	bb882 <digitalWrite>
      digitalWrite(clkPin , LOW);
   ba336:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   ba33a:	2100      	movs	r1, #0
   ba33c:	b280      	uxth	r0, r0
   ba33e:	f001 faa0 	bl	bb882 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   ba342:	3f01      	subs	r7, #1
   ba344:	ea4f 0858 	mov.w	r8, r8, lsr #1
   ba348:	d1e8      	bne.n	ba31c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   ba34a:	e7da      	b.n	ba302 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   ba34c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   ba350:	2101      	movs	r1, #1
   ba352:	b280      	uxth	r0, r0
   ba354:	f001 fa95 	bl	bb882 <digitalWrite>
   ba358:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba35a:	b118      	cbz	r0, ba364 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   ba35c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   ba360:	f000 bbce 	b.w	bab00 <_ZN8SPIClass14endTransactionEv>
}
   ba364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba368:	000bdb60 	.word	0x000bdb60

000ba36c <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   ba36c:	b510      	push	{r4, lr}
   ba36e:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   ba370:	7001      	strb	r1, [r0, #0]
   ba372:	7042      	strb	r2, [r0, #1]
   ba374:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   ba376:	2101      	movs	r1, #1
   ba378:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba37c:	f001 fb80 	bl	bba80 <calloc>
   ba380:	6060      	str	r0, [r4, #4]
}
   ba382:	4620      	mov	r0, r4
   ba384:	bd10      	pop	{r4, pc}

000ba386 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   ba386:	b510      	push	{r4, lr}
   ba388:	4604      	mov	r4, r0
{
    free(_led_state);
   ba38a:	6840      	ldr	r0, [r0, #4]
   ba38c:	f000 fb1e 	bl	ba9cc <free>
}
   ba390:	4620      	mov	r0, r4
   ba392:	bd10      	pop	{r4, pc}

000ba394 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   ba394:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   ba396:	2100      	movs	r1, #0
{
   ba398:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   ba39a:	7800      	ldrb	r0, [r0, #0]
   ba39c:	f001 fa71 	bl	bb882 <digitalWrite>
   ba3a0:	2014      	movs	r0, #20
   ba3a2:	f000 f917 	bl	ba5d4 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   ba3a6:	7820      	ldrb	r0, [r4, #0]
   ba3a8:	2101      	movs	r1, #1
   ba3aa:	f001 fa6a 	bl	bb882 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   ba3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba3b2:	2014      	movs	r0, #20
   ba3b4:	f000 b90e 	b.w	ba5d4 <HAL_Delay_Microseconds>

000ba3b8 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   ba3b8:	b570      	push	{r4, r5, r6, lr}
   ba3ba:	4606      	mov	r6, r0
   ba3bc:	460c      	mov	r4, r1
   ba3be:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   ba3c0:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   ba3c2:	bf4c      	ite	mi
   ba3c4:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   ba3c6:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   ba3c8:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   ba3ca:	f001 fa5a 	bl	bb882 <digitalWrite>
    for (byte i=0; i<8; i++)
   ba3ce:	3d01      	subs	r5, #1
        clk();
   ba3d0:	4630      	mov	r0, r6
   ba3d2:	f7ff ffdf 	bl	ba394 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   ba3d6:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   ba3d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   ba3dc:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   ba3de:	d1ef      	bne.n	ba3c0 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   ba3e0:	bd70      	pop	{r4, r5, r6, pc}

000ba3e2 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   ba3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   ba3e4:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   ba3e8:	461e      	mov	r6, r3
   ba3ea:	460c      	mov	r4, r1
   ba3ec:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   ba3ee:	bf14      	ite	ne
   ba3f0:	21c0      	movne	r1, #192	; 0xc0
   ba3f2:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   ba3f4:	0673      	lsls	r3, r6, #25
   ba3f6:	bf58      	it	pl
   ba3f8:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   ba3fc:	062a      	lsls	r2, r5, #24
   ba3fe:	bf58      	it	pl
   ba400:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   ba404:	066b      	lsls	r3, r5, #25
   ba406:	bf58      	it	pl
   ba408:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   ba40c:	0622      	lsls	r2, r4, #24
   ba40e:	bf58      	it	pl
   ba410:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   ba414:	0663      	lsls	r3, r4, #25
   ba416:	bf58      	it	pl
   ba418:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   ba41c:	9001      	str	r0, [sp, #4]
   ba41e:	f7ff ffcb 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   ba422:	9801      	ldr	r0, [sp, #4]
   ba424:	4631      	mov	r1, r6
   ba426:	f7ff ffc7 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   ba42a:	9801      	ldr	r0, [sp, #4]
   ba42c:	4629      	mov	r1, r5
   ba42e:	f7ff ffc3 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   ba432:	9801      	ldr	r0, [sp, #4]
   ba434:	4621      	mov	r1, r4
}
   ba436:	b002      	add	sp, #8
   ba438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   ba43c:	f7ff bfbc 	b.w	ba3b8 <_ZN12ChainableLED8sendByteEh>

000ba440 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   ba440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba444:	4604      	mov	r4, r0
   ba446:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   ba448:	2100      	movs	r1, #0
{
   ba44a:	4690      	mov	r8, r2
   ba44c:	4699      	mov	r9, r3
   ba44e:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   ba452:	f7ff ffb1 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba456:	2100      	movs	r1, #0
   ba458:	4620      	mov	r0, r4
   ba45a:	f7ff ffad 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba45e:	2100      	movs	r1, #0
   ba460:	4620      	mov	r0, r4
   ba462:	f7ff ffa9 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba466:	2100      	movs	r1, #0
   ba468:	4620      	mov	r0, r4
   ba46a:	f7ff ffa5 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
   ba46e:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   ba470:	78a3      	ldrb	r3, [r4, #2]
   ba472:	b2f5      	uxtb	r5, r6
   ba474:	42ab      	cmp	r3, r5
   ba476:	d919      	bls.n	ba4ac <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   ba478:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   ba47c:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   ba47e:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   ba482:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   ba486:	d108      	bne.n	ba49a <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   ba488:	6861      	ldr	r1, [r4, #4]
   ba48a:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   ba48e:	6861      	ldr	r1, [r4, #4]
   ba490:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   ba494:	6861      	ldr	r1, [r4, #4]
   ba496:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   ba49a:	6861      	ldr	r1, [r4, #4]
   ba49c:	5ccb      	ldrb	r3, [r1, r3]
   ba49e:	5c8a      	ldrb	r2, [r1, r2]
   ba4a0:	5c09      	ldrb	r1, [r1, r0]
   ba4a2:	4620      	mov	r0, r4
   ba4a4:	f7ff ff9d 	bl	ba3e2 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   ba4a8:	3601      	adds	r6, #1
   ba4aa:	e7e1      	b.n	ba470 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   ba4ac:	4620      	mov	r0, r4
   ba4ae:	2100      	movs	r1, #0
   ba4b0:	f7ff ff82 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4b4:	4620      	mov	r0, r4
   ba4b6:	2100      	movs	r1, #0
   ba4b8:	f7ff ff7e 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4bc:	4620      	mov	r0, r4
   ba4be:	2100      	movs	r1, #0
   ba4c0:	f7ff ff7a 	bl	ba3b8 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4c4:	4620      	mov	r0, r4
   ba4c6:	2100      	movs	r1, #0
}
   ba4c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   ba4cc:	f7ff bf74 	b.w	ba3b8 <_ZN12ChainableLED8sendByteEh>

000ba4d0 <_ZN12ChainableLED4initEv>:
{
   ba4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba4d2:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   ba4d4:	2101      	movs	r1, #1
   ba4d6:	7800      	ldrb	r0, [r0, #0]
   ba4d8:	f001 f9c2 	bl	bb860 <pinMode>
    pinMode(_data_pin, OUTPUT);
   ba4dc:	7860      	ldrb	r0, [r4, #1]
   ba4de:	2101      	movs	r1, #1
   ba4e0:	f001 f9be 	bl	bb860 <pinMode>
   ba4e4:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   ba4e6:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   ba4e8:	78a3      	ldrb	r3, [r4, #2]
   ba4ea:	b2e9      	uxtb	r1, r5
   ba4ec:	428b      	cmp	r3, r1
   ba4ee:	d907      	bls.n	ba500 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   ba4f0:	2300      	movs	r3, #0
   ba4f2:	9600      	str	r6, [sp, #0]
   ba4f4:	461a      	mov	r2, r3
   ba4f6:	4620      	mov	r0, r4
   ba4f8:	f7ff ffa2 	bl	ba440 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   ba4fc:	3501      	adds	r5, #1
   ba4fe:	e7f3      	b.n	ba4e8 <_ZN12ChainableLED4initEv+0x18>
}
   ba500:	b002      	add	sp, #8
   ba502:	bd70      	pop	{r4, r5, r6, pc}

000ba504 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba504:	b508      	push	{r3, lr}
   ba506:	4b02      	ldr	r3, [pc, #8]	; (ba510 <netdb_freeaddrinfo+0xc>)
   ba508:	681b      	ldr	r3, [r3, #0]
   ba50a:	689b      	ldr	r3, [r3, #8]
   ba50c:	9301      	str	r3, [sp, #4]
   ba50e:	bd08      	pop	{r3, pc}
   ba510:	00030268 	.word	0x00030268

000ba514 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba514:	b508      	push	{r3, lr}
   ba516:	4b02      	ldr	r3, [pc, #8]	; (ba520 <netdb_getaddrinfo+0xc>)
   ba518:	681b      	ldr	r3, [r3, #0]
   ba51a:	68db      	ldr	r3, [r3, #12]
   ba51c:	9301      	str	r3, [sp, #4]
   ba51e:	bd08      	pop	{r3, pc}
   ba520:	00030268 	.word	0x00030268

000ba524 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   ba524:	b508      	push	{r3, lr}
   ba526:	4b02      	ldr	r3, [pc, #8]	; (ba530 <hal_pin_validate_function+0xc>)
   ba528:	681b      	ldr	r3, [r3, #0]
   ba52a:	685b      	ldr	r3, [r3, #4]
   ba52c:	9301      	str	r3, [sp, #4]
   ba52e:	bd08      	pop	{r3, pc}
   ba530:	0003022c 	.word	0x0003022c

000ba534 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   ba534:	b508      	push	{r3, lr}
   ba536:	4b02      	ldr	r3, [pc, #8]	; (ba540 <hal_gpio_mode+0xc>)
   ba538:	681b      	ldr	r3, [r3, #0]
   ba53a:	689b      	ldr	r3, [r3, #8]
   ba53c:	9301      	str	r3, [sp, #4]
   ba53e:	bd08      	pop	{r3, pc}
   ba540:	0003022c 	.word	0x0003022c

000ba544 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   ba544:	b508      	push	{r3, lr}
   ba546:	4b02      	ldr	r3, [pc, #8]	; (ba550 <hal_gpio_get_mode+0xc>)
   ba548:	681b      	ldr	r3, [r3, #0]
   ba54a:	68db      	ldr	r3, [r3, #12]
   ba54c:	9301      	str	r3, [sp, #4]
   ba54e:	bd08      	pop	{r3, pc}
   ba550:	0003022c 	.word	0x0003022c

000ba554 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   ba554:	b508      	push	{r3, lr}
   ba556:	4b02      	ldr	r3, [pc, #8]	; (ba560 <hal_gpio_write+0xc>)
   ba558:	681b      	ldr	r3, [r3, #0]
   ba55a:	691b      	ldr	r3, [r3, #16]
   ba55c:	9301      	str	r3, [sp, #4]
   ba55e:	bd08      	pop	{r3, pc}
   ba560:	0003022c 	.word	0x0003022c

000ba564 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   ba564:	b508      	push	{r3, lr}
   ba566:	4b02      	ldr	r3, [pc, #8]	; (ba570 <hal_gpio_read+0xc>)
   ba568:	681b      	ldr	r3, [r3, #0]
   ba56a:	695b      	ldr	r3, [r3, #20]
   ba56c:	9301      	str	r3, [sp, #4]
   ba56e:	bd08      	pop	{r3, pc}
   ba570:	0003022c 	.word	0x0003022c

000ba574 <hal_interrupt_enable_all>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   ba574:	b508      	push	{r3, lr}
   ba576:	4b02      	ldr	r3, [pc, #8]	; (ba580 <hal_interrupt_enable_all+0xc>)
   ba578:	681b      	ldr	r3, [r3, #0]
   ba57a:	6a1b      	ldr	r3, [r3, #32]
   ba57c:	9301      	str	r3, [sp, #4]
   ba57e:	bd08      	pop	{r3, pc}
   ba580:	0003022c 	.word	0x0003022c

000ba584 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   ba584:	b508      	push	{r3, lr}
   ba586:	4b02      	ldr	r3, [pc, #8]	; (ba590 <hal_interrupt_disable_all+0xc>)
   ba588:	681b      	ldr	r3, [r3, #0]
   ba58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba58c:	9301      	str	r3, [sp, #4]
   ba58e:	bd08      	pop	{r3, pc}
   ba590:	0003022c 	.word	0x0003022c

000ba594 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba594:	b508      	push	{r3, lr}
   ba596:	4b02      	ldr	r3, [pc, #8]	; (ba5a0 <hal_adc_read+0xc>)
   ba598:	681b      	ldr	r3, [r3, #0]
   ba59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba59c:	9301      	str	r3, [sp, #4]
   ba59e:	bd08      	pop	{r3, pc}
   ba5a0:	0003022c 	.word	0x0003022c

000ba5a4 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   ba5a4:	b508      	push	{r3, lr}
   ba5a6:	4b02      	ldr	r3, [pc, #8]	; (ba5b0 <hal_gpio_pulse_in+0xc>)
   ba5a8:	681b      	ldr	r3, [r3, #0]
   ba5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba5ac:	9301      	str	r3, [sp, #4]
   ba5ae:	bd08      	pop	{r3, pc}
   ba5b0:	0003022c 	.word	0x0003022c

000ba5b4 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   ba5b4:	b508      	push	{r3, lr}
   ba5b6:	4b02      	ldr	r3, [pc, #8]	; (ba5c0 <hal_pwm_write_with_frequency_ext+0xc>)
   ba5b8:	681b      	ldr	r3, [r3, #0]
   ba5ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba5bc:	9301      	str	r3, [sp, #4]
   ba5be:	bd08      	pop	{r3, pc}
   ba5c0:	0003022c 	.word	0x0003022c

000ba5c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba5c4:	b508      	push	{r3, lr}
   ba5c6:	4b02      	ldr	r3, [pc, #8]	; (ba5d0 <HAL_RNG_GetRandomNumber+0xc>)
   ba5c8:	681b      	ldr	r3, [r3, #0]
   ba5ca:	685b      	ldr	r3, [r3, #4]
   ba5cc:	9301      	str	r3, [sp, #4]
   ba5ce:	bd08      	pop	{r3, pc}
   ba5d0:	00030218 	.word	0x00030218

000ba5d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba5d4:	b508      	push	{r3, lr}
   ba5d6:	4b02      	ldr	r3, [pc, #8]	; (ba5e0 <HAL_Delay_Microseconds+0xc>)
   ba5d8:	681b      	ldr	r3, [r3, #0]
   ba5da:	68db      	ldr	r3, [r3, #12]
   ba5dc:	9301      	str	r3, [sp, #4]
   ba5de:	bd08      	pop	{r3, pc}
   ba5e0:	00030218 	.word	0x00030218

000ba5e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba5e4:	b508      	push	{r3, lr}
   ba5e6:	4b02      	ldr	r3, [pc, #8]	; (ba5f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba5e8:	681b      	ldr	r3, [r3, #0]
   ba5ea:	695b      	ldr	r3, [r3, #20]
   ba5ec:	9301      	str	r3, [sp, #4]
   ba5ee:	bd08      	pop	{r3, pc}
   ba5f0:	00030218 	.word	0x00030218

000ba5f4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   ba5f4:	b508      	push	{r3, lr}
   ba5f6:	4b02      	ldr	r3, [pc, #8]	; (ba600 <HAL_EEPROM_Init+0xc>)
   ba5f8:	681b      	ldr	r3, [r3, #0]
   ba5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba5fc:	9301      	str	r3, [sp, #4]
   ba5fe:	bd08      	pop	{r3, pc}
   ba600:	00030218 	.word	0x00030218

000ba604 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   ba604:	b508      	push	{r3, lr}
   ba606:	4b02      	ldr	r3, [pc, #8]	; (ba610 <HAL_EEPROM_Read+0xc>)
   ba608:	681b      	ldr	r3, [r3, #0]
   ba60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba60c:	9301      	str	r3, [sp, #4]
   ba60e:	bd08      	pop	{r3, pc}
   ba610:	00030218 	.word	0x00030218

000ba614 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   ba614:	b508      	push	{r3, lr}
   ba616:	4b02      	ldr	r3, [pc, #8]	; (ba620 <HAL_EEPROM_Put+0xc>)
   ba618:	681b      	ldr	r3, [r3, #0]
   ba61a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba61c:	9301      	str	r3, [sp, #4]
   ba61e:	bd08      	pop	{r3, pc}
   ba620:	00030218 	.word	0x00030218

000ba624 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba624:	b508      	push	{r3, lr}
   ba626:	4b02      	ldr	r3, [pc, #8]	; (ba630 <os_mutex_recursive_create+0xc>)
   ba628:	681b      	ldr	r3, [r3, #0]
   ba62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba62c:	9301      	str	r3, [sp, #4]
   ba62e:	bd08      	pop	{r3, pc}
   ba630:	00030248 	.word	0x00030248

000ba634 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba634:	b508      	push	{r3, lr}
   ba636:	4b02      	ldr	r3, [pc, #8]	; (ba640 <inet_inet_ntop+0xc>)
   ba638:	681b      	ldr	r3, [r3, #0]
   ba63a:	695b      	ldr	r3, [r3, #20]
   ba63c:	9301      	str	r3, [sp, #4]
   ba63e:	bd08      	pop	{r3, pc}
   ba640:	00030264 	.word	0x00030264

000ba644 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba644:	b508      	push	{r3, lr}
   ba646:	4b02      	ldr	r3, [pc, #8]	; (ba650 <hal_usart_write+0xc>)
   ba648:	681b      	ldr	r3, [r3, #0]
   ba64a:	68db      	ldr	r3, [r3, #12]
   ba64c:	9301      	str	r3, [sp, #4]
   ba64e:	bd08      	pop	{r3, pc}
   ba650:	0003023c 	.word	0x0003023c

000ba654 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba654:	b508      	push	{r3, lr}
   ba656:	4b02      	ldr	r3, [pc, #8]	; (ba660 <hal_usart_available+0xc>)
   ba658:	681b      	ldr	r3, [r3, #0]
   ba65a:	691b      	ldr	r3, [r3, #16]
   ba65c:	9301      	str	r3, [sp, #4]
   ba65e:	bd08      	pop	{r3, pc}
   ba660:	0003023c 	.word	0x0003023c

000ba664 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba664:	b508      	push	{r3, lr}
   ba666:	4b02      	ldr	r3, [pc, #8]	; (ba670 <hal_usart_read+0xc>)
   ba668:	681b      	ldr	r3, [r3, #0]
   ba66a:	695b      	ldr	r3, [r3, #20]
   ba66c:	9301      	str	r3, [sp, #4]
   ba66e:	bd08      	pop	{r3, pc}
   ba670:	0003023c 	.word	0x0003023c

000ba674 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba674:	b508      	push	{r3, lr}
   ba676:	4b02      	ldr	r3, [pc, #8]	; (ba680 <hal_usart_peek+0xc>)
   ba678:	681b      	ldr	r3, [r3, #0]
   ba67a:	699b      	ldr	r3, [r3, #24]
   ba67c:	9301      	str	r3, [sp, #4]
   ba67e:	bd08      	pop	{r3, pc}
   ba680:	0003023c 	.word	0x0003023c

000ba684 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba684:	b508      	push	{r3, lr}
   ba686:	4b02      	ldr	r3, [pc, #8]	; (ba690 <hal_usart_flush+0xc>)
   ba688:	681b      	ldr	r3, [r3, #0]
   ba68a:	69db      	ldr	r3, [r3, #28]
   ba68c:	9301      	str	r3, [sp, #4]
   ba68e:	bd08      	pop	{r3, pc}
   ba690:	0003023c 	.word	0x0003023c

000ba694 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba694:	b508      	push	{r3, lr}
   ba696:	4b02      	ldr	r3, [pc, #8]	; (ba6a0 <hal_usart_is_enabled+0xc>)
   ba698:	681b      	ldr	r3, [r3, #0]
   ba69a:	6a1b      	ldr	r3, [r3, #32]
   ba69c:	9301      	str	r3, [sp, #4]
   ba69e:	bd08      	pop	{r3, pc}
   ba6a0:	0003023c 	.word	0x0003023c

000ba6a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba6a4:	b508      	push	{r3, lr}
   ba6a6:	4b02      	ldr	r3, [pc, #8]	; (ba6b0 <hal_usart_available_data_for_write+0xc>)
   ba6a8:	681b      	ldr	r3, [r3, #0]
   ba6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba6ac:	9301      	str	r3, [sp, #4]
   ba6ae:	bd08      	pop	{r3, pc}
   ba6b0:	0003023c 	.word	0x0003023c

000ba6b4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba6b4:	b508      	push	{r3, lr}
   ba6b6:	4b02      	ldr	r3, [pc, #8]	; (ba6c0 <hal_usart_init_ex+0xc>)
   ba6b8:	681b      	ldr	r3, [r3, #0]
   ba6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba6bc:	9301      	str	r3, [sp, #4]
   ba6be:	bd08      	pop	{r3, pc}
   ba6c0:	0003023c 	.word	0x0003023c

000ba6c4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   ba6c4:	b508      	push	{r3, lr}
   ba6c6:	4b02      	ldr	r3, [pc, #8]	; (ba6d0 <hal_i2c_set_speed+0xc>)
   ba6c8:	681b      	ldr	r3, [r3, #0]
   ba6ca:	681b      	ldr	r3, [r3, #0]
   ba6cc:	9301      	str	r3, [sp, #4]
   ba6ce:	bd08      	pop	{r3, pc}
   ba6d0:	00030228 	.word	0x00030228

000ba6d4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba6d4:	b508      	push	{r3, lr}
   ba6d6:	4b02      	ldr	r3, [pc, #8]	; (ba6e0 <hal_i2c_begin+0xc>)
   ba6d8:	681b      	ldr	r3, [r3, #0]
   ba6da:	68db      	ldr	r3, [r3, #12]
   ba6dc:	9301      	str	r3, [sp, #4]
   ba6de:	bd08      	pop	{r3, pc}
   ba6e0:	00030228 	.word	0x00030228

000ba6e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba6e4:	b508      	push	{r3, lr}
   ba6e6:	4b02      	ldr	r3, [pc, #8]	; (ba6f0 <hal_i2c_begin_transmission+0xc>)
   ba6e8:	681b      	ldr	r3, [r3, #0]
   ba6ea:	699b      	ldr	r3, [r3, #24]
   ba6ec:	9301      	str	r3, [sp, #4]
   ba6ee:	bd08      	pop	{r3, pc}
   ba6f0:	00030228 	.word	0x00030228

000ba6f4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba6f4:	b508      	push	{r3, lr}
   ba6f6:	4b02      	ldr	r3, [pc, #8]	; (ba700 <hal_i2c_end_transmission+0xc>)
   ba6f8:	681b      	ldr	r3, [r3, #0]
   ba6fa:	69db      	ldr	r3, [r3, #28]
   ba6fc:	9301      	str	r3, [sp, #4]
   ba6fe:	bd08      	pop	{r3, pc}
   ba700:	00030228 	.word	0x00030228

000ba704 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba704:	b508      	push	{r3, lr}
   ba706:	4b02      	ldr	r3, [pc, #8]	; (ba710 <hal_i2c_write+0xc>)
   ba708:	681b      	ldr	r3, [r3, #0]
   ba70a:	6a1b      	ldr	r3, [r3, #32]
   ba70c:	9301      	str	r3, [sp, #4]
   ba70e:	bd08      	pop	{r3, pc}
   ba710:	00030228 	.word	0x00030228

000ba714 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba714:	b508      	push	{r3, lr}
   ba716:	4b02      	ldr	r3, [pc, #8]	; (ba720 <hal_i2c_available+0xc>)
   ba718:	681b      	ldr	r3, [r3, #0]
   ba71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba71c:	9301      	str	r3, [sp, #4]
   ba71e:	bd08      	pop	{r3, pc}
   ba720:	00030228 	.word	0x00030228

000ba724 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba724:	b508      	push	{r3, lr}
   ba726:	4b02      	ldr	r3, [pc, #8]	; (ba730 <hal_i2c_read+0xc>)
   ba728:	681b      	ldr	r3, [r3, #0]
   ba72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba72c:	9301      	str	r3, [sp, #4]
   ba72e:	bd08      	pop	{r3, pc}
   ba730:	00030228 	.word	0x00030228

000ba734 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba734:	b508      	push	{r3, lr}
   ba736:	4b02      	ldr	r3, [pc, #8]	; (ba740 <hal_i2c_peek+0xc>)
   ba738:	681b      	ldr	r3, [r3, #0]
   ba73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba73c:	9301      	str	r3, [sp, #4]
   ba73e:	bd08      	pop	{r3, pc}
   ba740:	00030228 	.word	0x00030228

000ba744 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba744:	b508      	push	{r3, lr}
   ba746:	4b02      	ldr	r3, [pc, #8]	; (ba750 <hal_i2c_flush+0xc>)
   ba748:	681b      	ldr	r3, [r3, #0]
   ba74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba74c:	9301      	str	r3, [sp, #4]
   ba74e:	bd08      	pop	{r3, pc}
   ba750:	00030228 	.word	0x00030228

000ba754 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba754:	b508      	push	{r3, lr}
   ba756:	4b02      	ldr	r3, [pc, #8]	; (ba760 <hal_i2c_is_enabled+0xc>)
   ba758:	681b      	ldr	r3, [r3, #0]
   ba75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba75c:	9301      	str	r3, [sp, #4]
   ba75e:	bd08      	pop	{r3, pc}
   ba760:	00030228 	.word	0x00030228

000ba764 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba764:	b508      	push	{r3, lr}
   ba766:	4b02      	ldr	r3, [pc, #8]	; (ba770 <hal_i2c_init+0xc>)
   ba768:	681b      	ldr	r3, [r3, #0]
   ba76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba76c:	9301      	str	r3, [sp, #4]
   ba76e:	bd08      	pop	{r3, pc}
   ba770:	00030228 	.word	0x00030228

000ba774 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba774:	b508      	push	{r3, lr}
   ba776:	4b02      	ldr	r3, [pc, #8]	; (ba780 <hal_spi_begin+0xc>)
   ba778:	681b      	ldr	r3, [r3, #0]
   ba77a:	681b      	ldr	r3, [r3, #0]
   ba77c:	9301      	str	r3, [sp, #4]
   ba77e:	bd08      	pop	{r3, pc}
   ba780:	00030230 	.word	0x00030230

000ba784 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba784:	b508      	push	{r3, lr}
   ba786:	4b02      	ldr	r3, [pc, #8]	; (ba790 <hal_spi_transfer+0xc>)
   ba788:	681b      	ldr	r3, [r3, #0]
   ba78a:	695b      	ldr	r3, [r3, #20]
   ba78c:	9301      	str	r3, [sp, #4]
   ba78e:	bd08      	pop	{r3, pc}
   ba790:	00030230 	.word	0x00030230

000ba794 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba794:	b508      	push	{r3, lr}
   ba796:	4b02      	ldr	r3, [pc, #8]	; (ba7a0 <hal_spi_init+0xc>)
   ba798:	681b      	ldr	r3, [r3, #0]
   ba79a:	69db      	ldr	r3, [r3, #28]
   ba79c:	9301      	str	r3, [sp, #4]
   ba79e:	bd08      	pop	{r3, pc}
   ba7a0:	00030230 	.word	0x00030230

000ba7a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba7a4:	b508      	push	{r3, lr}
   ba7a6:	4b02      	ldr	r3, [pc, #8]	; (ba7b0 <hal_spi_is_enabled+0xc>)
   ba7a8:	681b      	ldr	r3, [r3, #0]
   ba7aa:	6a1b      	ldr	r3, [r3, #32]
   ba7ac:	9301      	str	r3, [sp, #4]
   ba7ae:	bd08      	pop	{r3, pc}
   ba7b0:	00030230 	.word	0x00030230

000ba7b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba7b4:	b508      	push	{r3, lr}
   ba7b6:	4b02      	ldr	r3, [pc, #8]	; (ba7c0 <hal_spi_info+0xc>)
   ba7b8:	681b      	ldr	r3, [r3, #0]
   ba7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba7bc:	9301      	str	r3, [sp, #4]
   ba7be:	bd08      	pop	{r3, pc}
   ba7c0:	00030230 	.word	0x00030230

000ba7c4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba7c4:	b508      	push	{r3, lr}
   ba7c6:	4b02      	ldr	r3, [pc, #8]	; (ba7d0 <hal_spi_set_settings+0xc>)
   ba7c8:	681b      	ldr	r3, [r3, #0]
   ba7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba7cc:	9301      	str	r3, [sp, #4]
   ba7ce:	bd08      	pop	{r3, pc}
   ba7d0:	00030230 	.word	0x00030230

000ba7d4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba7d4:	b508      	push	{r3, lr}
   ba7d6:	4b02      	ldr	r3, [pc, #8]	; (ba7e0 <hal_spi_acquire+0xc>)
   ba7d8:	681b      	ldr	r3, [r3, #0]
   ba7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba7dc:	9301      	str	r3, [sp, #4]
   ba7de:	bd08      	pop	{r3, pc}
   ba7e0:	00030230 	.word	0x00030230

000ba7e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba7e4:	b508      	push	{r3, lr}
   ba7e6:	4b02      	ldr	r3, [pc, #8]	; (ba7f0 <hal_spi_release+0xc>)
   ba7e8:	681b      	ldr	r3, [r3, #0]
   ba7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba7ec:	9301      	str	r3, [sp, #4]
   ba7ee:	bd08      	pop	{r3, pc}
   ba7f0:	00030230 	.word	0x00030230

000ba7f4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   ba7f4:	b508      	push	{r3, lr}
   ba7f6:	4b02      	ldr	r3, [pc, #8]	; (ba800 <HAL_Tone_Start+0xc>)
   ba7f8:	681b      	ldr	r3, [r3, #0]
   ba7fa:	681b      	ldr	r3, [r3, #0]
   ba7fc:	9301      	str	r3, [sp, #4]
   ba7fe:	bd08      	pop	{r3, pc}
   ba800:	00030224 	.word	0x00030224

000ba804 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   ba804:	b508      	push	{r3, lr}
   ba806:	4b02      	ldr	r3, [pc, #8]	; (ba810 <HAL_Tone_Stop+0xc>)
   ba808:	681b      	ldr	r3, [r3, #0]
   ba80a:	685b      	ldr	r3, [r3, #4]
   ba80c:	9301      	str	r3, [sp, #4]
   ba80e:	bd08      	pop	{r3, pc}
   ba810:	00030224 	.word	0x00030224

000ba814 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba814:	b508      	push	{r3, lr}
   ba816:	4b02      	ldr	r3, [pc, #8]	; (ba820 <HAL_USB_USART_Init+0xc>)
   ba818:	681b      	ldr	r3, [r3, #0]
   ba81a:	681b      	ldr	r3, [r3, #0]
   ba81c:	9301      	str	r3, [sp, #4]
   ba81e:	bd08      	pop	{r3, pc}
   ba820:	0003024c 	.word	0x0003024c

000ba824 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba824:	b508      	push	{r3, lr}
   ba826:	4b02      	ldr	r3, [pc, #8]	; (ba830 <HAL_USB_USART_Begin+0xc>)
   ba828:	681b      	ldr	r3, [r3, #0]
   ba82a:	685b      	ldr	r3, [r3, #4]
   ba82c:	9301      	str	r3, [sp, #4]
   ba82e:	bd08      	pop	{r3, pc}
   ba830:	0003024c 	.word	0x0003024c

000ba834 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba834:	b508      	push	{r3, lr}
   ba836:	4b02      	ldr	r3, [pc, #8]	; (ba840 <HAL_USB_USART_Available_Data+0xc>)
   ba838:	681b      	ldr	r3, [r3, #0]
   ba83a:	691b      	ldr	r3, [r3, #16]
   ba83c:	9301      	str	r3, [sp, #4]
   ba83e:	bd08      	pop	{r3, pc}
   ba840:	0003024c 	.word	0x0003024c

000ba844 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba844:	b508      	push	{r3, lr}
   ba846:	4b02      	ldr	r3, [pc, #8]	; (ba850 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba848:	681b      	ldr	r3, [r3, #0]
   ba84a:	695b      	ldr	r3, [r3, #20]
   ba84c:	9301      	str	r3, [sp, #4]
   ba84e:	bd08      	pop	{r3, pc}
   ba850:	0003024c 	.word	0x0003024c

000ba854 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba854:	b508      	push	{r3, lr}
   ba856:	4b02      	ldr	r3, [pc, #8]	; (ba860 <HAL_USB_USART_Receive_Data+0xc>)
   ba858:	681b      	ldr	r3, [r3, #0]
   ba85a:	699b      	ldr	r3, [r3, #24]
   ba85c:	9301      	str	r3, [sp, #4]
   ba85e:	bd08      	pop	{r3, pc}
   ba860:	0003024c 	.word	0x0003024c

000ba864 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba864:	b508      	push	{r3, lr}
   ba866:	4b02      	ldr	r3, [pc, #8]	; (ba870 <HAL_USB_USART_Send_Data+0xc>)
   ba868:	681b      	ldr	r3, [r3, #0]
   ba86a:	69db      	ldr	r3, [r3, #28]
   ba86c:	9301      	str	r3, [sp, #4]
   ba86e:	bd08      	pop	{r3, pc}
   ba870:	0003024c 	.word	0x0003024c

000ba874 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba874:	b508      	push	{r3, lr}
   ba876:	4b02      	ldr	r3, [pc, #8]	; (ba880 <HAL_USB_USART_Flush_Data+0xc>)
   ba878:	681b      	ldr	r3, [r3, #0]
   ba87a:	6a1b      	ldr	r3, [r3, #32]
   ba87c:	9301      	str	r3, [sp, #4]
   ba87e:	bd08      	pop	{r3, pc}
   ba880:	0003024c 	.word	0x0003024c

000ba884 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba884:	b508      	push	{r3, lr}
   ba886:	4b02      	ldr	r3, [pc, #8]	; (ba890 <panic_+0xc>)
   ba888:	681b      	ldr	r3, [r3, #0]
   ba88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba88c:	9301      	str	r3, [sp, #4]
   ba88e:	bd08      	pop	{r3, pc}
   ba890:	00030260 	.word	0x00030260

000ba894 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba894:	b508      	push	{r3, lr}
   ba896:	4b02      	ldr	r3, [pc, #8]	; (ba8a0 <set_system_mode+0xc>)
   ba898:	681b      	ldr	r3, [r3, #0]
   ba89a:	685b      	ldr	r3, [r3, #4]
   ba89c:	9301      	str	r3, [sp, #4]
   ba89e:	bd08      	pop	{r3, pc}
   ba8a0:	00030220 	.word	0x00030220

000ba8a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba8a4:	b508      	push	{r3, lr}
   ba8a6:	4b02      	ldr	r3, [pc, #8]	; (ba8b0 <system_delay_ms+0xc>)
   ba8a8:	681b      	ldr	r3, [r3, #0]
   ba8aa:	695b      	ldr	r3, [r3, #20]
   ba8ac:	9301      	str	r3, [sp, #4]
   ba8ae:	bd08      	pop	{r3, pc}
   ba8b0:	00030220 	.word	0x00030220

000ba8b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba8b4:	b508      	push	{r3, lr}
   ba8b6:	4b03      	ldr	r3, [pc, #12]	; (ba8c4 <system_ctrl_set_app_request_handler+0x10>)
   ba8b8:	681b      	ldr	r3, [r3, #0]
   ba8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba8be:	9301      	str	r3, [sp, #4]
   ba8c0:	bd08      	pop	{r3, pc}
   ba8c2:	0000      	.short	0x0000
   ba8c4:	00030220 	.word	0x00030220

000ba8c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba8c8:	b508      	push	{r3, lr}
   ba8ca:	4b03      	ldr	r3, [pc, #12]	; (ba8d8 <system_ctrl_set_result+0x10>)
   ba8cc:	681b      	ldr	r3, [r3, #0]
   ba8ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba8d2:	9301      	str	r3, [sp, #4]
   ba8d4:	bd08      	pop	{r3, pc}
   ba8d6:	0000      	.short	0x0000
   ba8d8:	00030220 	.word	0x00030220

000ba8dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba8dc:	b508      	push	{r3, lr}
   ba8de:	4b02      	ldr	r3, [pc, #8]	; (ba8e8 <network_connect+0xc>)
   ba8e0:	681b      	ldr	r3, [r3, #0]
   ba8e2:	685b      	ldr	r3, [r3, #4]
   ba8e4:	9301      	str	r3, [sp, #4]
   ba8e6:	bd08      	pop	{r3, pc}
   ba8e8:	00030240 	.word	0x00030240

000ba8ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba8ec:	b508      	push	{r3, lr}
   ba8ee:	4b02      	ldr	r3, [pc, #8]	; (ba8f8 <network_connecting+0xc>)
   ba8f0:	681b      	ldr	r3, [r3, #0]
   ba8f2:	689b      	ldr	r3, [r3, #8]
   ba8f4:	9301      	str	r3, [sp, #4]
   ba8f6:	bd08      	pop	{r3, pc}
   ba8f8:	00030240 	.word	0x00030240

000ba8fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba8fc:	b508      	push	{r3, lr}
   ba8fe:	4b02      	ldr	r3, [pc, #8]	; (ba908 <network_disconnect+0xc>)
   ba900:	681b      	ldr	r3, [r3, #0]
   ba902:	68db      	ldr	r3, [r3, #12]
   ba904:	9301      	str	r3, [sp, #4]
   ba906:	bd08      	pop	{r3, pc}
   ba908:	00030240 	.word	0x00030240

000ba90c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba90c:	b508      	push	{r3, lr}
   ba90e:	4b02      	ldr	r3, [pc, #8]	; (ba918 <network_ready+0xc>)
   ba910:	681b      	ldr	r3, [r3, #0]
   ba912:	691b      	ldr	r3, [r3, #16]
   ba914:	9301      	str	r3, [sp, #4]
   ba916:	bd08      	pop	{r3, pc}
   ba918:	00030240 	.word	0x00030240

000ba91c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba91c:	b508      	push	{r3, lr}
   ba91e:	4b02      	ldr	r3, [pc, #8]	; (ba928 <network_on+0xc>)
   ba920:	681b      	ldr	r3, [r3, #0]
   ba922:	695b      	ldr	r3, [r3, #20]
   ba924:	9301      	str	r3, [sp, #4]
   ba926:	bd08      	pop	{r3, pc}
   ba928:	00030240 	.word	0x00030240

000ba92c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba92c:	b508      	push	{r3, lr}
   ba92e:	4b02      	ldr	r3, [pc, #8]	; (ba938 <network_off+0xc>)
   ba930:	681b      	ldr	r3, [r3, #0]
   ba932:	699b      	ldr	r3, [r3, #24]
   ba934:	9301      	str	r3, [sp, #4]
   ba936:	bd08      	pop	{r3, pc}
   ba938:	00030240 	.word	0x00030240

000ba93c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba93c:	b508      	push	{r3, lr}
   ba93e:	4b02      	ldr	r3, [pc, #8]	; (ba948 <network_listen+0xc>)
   ba940:	681b      	ldr	r3, [r3, #0]
   ba942:	69db      	ldr	r3, [r3, #28]
   ba944:	9301      	str	r3, [sp, #4]
   ba946:	bd08      	pop	{r3, pc}
   ba948:	00030240 	.word	0x00030240

000ba94c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba94c:	b508      	push	{r3, lr}
   ba94e:	4b02      	ldr	r3, [pc, #8]	; (ba958 <network_listening+0xc>)
   ba950:	681b      	ldr	r3, [r3, #0]
   ba952:	6a1b      	ldr	r3, [r3, #32]
   ba954:	9301      	str	r3, [sp, #4]
   ba956:	bd08      	pop	{r3, pc}
   ba958:	00030240 	.word	0x00030240

000ba95c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba95c:	b508      	push	{r3, lr}
   ba95e:	4b02      	ldr	r3, [pc, #8]	; (ba968 <network_set_listen_timeout+0xc>)
   ba960:	681b      	ldr	r3, [r3, #0]
   ba962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba964:	9301      	str	r3, [sp, #4]
   ba966:	bd08      	pop	{r3, pc}
   ba968:	00030240 	.word	0x00030240

000ba96c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba96c:	b508      	push	{r3, lr}
   ba96e:	4b02      	ldr	r3, [pc, #8]	; (ba978 <network_get_listen_timeout+0xc>)
   ba970:	681b      	ldr	r3, [r3, #0]
   ba972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba974:	9301      	str	r3, [sp, #4]
   ba976:	bd08      	pop	{r3, pc}
   ba978:	00030240 	.word	0x00030240

000ba97c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba97c:	b508      	push	{r3, lr}
   ba97e:	4b02      	ldr	r3, [pc, #8]	; (ba988 <network_is_on+0xc>)
   ba980:	681b      	ldr	r3, [r3, #0]
   ba982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba984:	9301      	str	r3, [sp, #4]
   ba986:	bd08      	pop	{r3, pc}
   ba988:	00030240 	.word	0x00030240

000ba98c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba98c:	b508      	push	{r3, lr}
   ba98e:	4b02      	ldr	r3, [pc, #8]	; (ba998 <network_is_off+0xc>)
   ba990:	681b      	ldr	r3, [r3, #0]
   ba992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba994:	9301      	str	r3, [sp, #4]
   ba996:	bd08      	pop	{r3, pc}
   ba998:	00030240 	.word	0x00030240

000ba99c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba99c:	b508      	push	{r3, lr}
   ba99e:	4b02      	ldr	r3, [pc, #8]	; (ba9a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   ba9a0:	681b      	ldr	r3, [r3, #0]
   ba9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba9a4:	9301      	str	r3, [sp, #4]
   ba9a6:	bd08      	pop	{r3, pc}
   ba9a8:	00030244 	.word	0x00030244

000ba9ac <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   ba9ac:	b508      	push	{r3, lr}
   ba9ae:	4b02      	ldr	r3, [pc, #8]	; (ba9b8 <spark_cloud_disconnect+0xc>)
   ba9b0:	681b      	ldr	r3, [r3, #0]
   ba9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba9b4:	9301      	str	r3, [sp, #4]
   ba9b6:	bd08      	pop	{r3, pc}
   ba9b8:	00030244 	.word	0x00030244

000ba9bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba9bc:	b508      	push	{r3, lr}
   ba9be:	4b02      	ldr	r3, [pc, #8]	; (ba9c8 <malloc+0xc>)
   ba9c0:	681b      	ldr	r3, [r3, #0]
   ba9c2:	681b      	ldr	r3, [r3, #0]
   ba9c4:	9301      	str	r3, [sp, #4]
   ba9c6:	bd08      	pop	{r3, pc}
   ba9c8:	0003021c 	.word	0x0003021c

000ba9cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba9cc:	b508      	push	{r3, lr}
   ba9ce:	4b02      	ldr	r3, [pc, #8]	; (ba9d8 <free+0xc>)
   ba9d0:	681b      	ldr	r3, [r3, #0]
   ba9d2:	685b      	ldr	r3, [r3, #4]
   ba9d4:	9301      	str	r3, [sp, #4]
   ba9d6:	bd08      	pop	{r3, pc}
   ba9d8:	0003021c 	.word	0x0003021c

000ba9dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba9dc:	b508      	push	{r3, lr}
   ba9de:	4b02      	ldr	r3, [pc, #8]	; (ba9e8 <realloc+0xc>)
   ba9e0:	681b      	ldr	r3, [r3, #0]
   ba9e2:	689b      	ldr	r3, [r3, #8]
   ba9e4:	9301      	str	r3, [sp, #4]
   ba9e6:	bd08      	pop	{r3, pc}
   ba9e8:	0003021c 	.word	0x0003021c

000ba9ec <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   ba9ec:	b508      	push	{r3, lr}
   ba9ee:	4b02      	ldr	r3, [pc, #8]	; (ba9f8 <snprintf+0xc>)
   ba9f0:	681b      	ldr	r3, [r3, #0]
   ba9f2:	69db      	ldr	r3, [r3, #28]
   ba9f4:	9301      	str	r3, [sp, #4]
   ba9f6:	bd08      	pop	{r3, pc}
   ba9f8:	0003021c 	.word	0x0003021c

000ba9fc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   ba9fc:	b508      	push	{r3, lr}
   ba9fe:	4b02      	ldr	r3, [pc, #8]	; (baa08 <vsnprintf+0xc>)
   baa00:	681b      	ldr	r3, [r3, #0]
   baa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baa04:	9301      	str	r3, [sp, #4]
   baa06:	bd08      	pop	{r3, pc}
   baa08:	0003021c 	.word	0x0003021c

000baa0c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   baa0c:	b508      	push	{r3, lr}
   baa0e:	4b02      	ldr	r3, [pc, #8]	; (baa18 <_malloc_r+0xc>)
   baa10:	681b      	ldr	r3, [r3, #0]
   baa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baa14:	9301      	str	r3, [sp, #4]
   baa16:	bd08      	pop	{r3, pc}
   baa18:	0003021c 	.word	0x0003021c

000baa1c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   baa1c:	b508      	push	{r3, lr}
   baa1e:	4b02      	ldr	r3, [pc, #8]	; (baa28 <__assert_func+0xc>)
   baa20:	681b      	ldr	r3, [r3, #0]
   baa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baa24:	9301      	str	r3, [sp, #4]
   baa26:	bd08      	pop	{r3, pc}
   baa28:	0003021c 	.word	0x0003021c

000baa2c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   baa2c:	b508      	push	{r3, lr}
   baa2e:	4b02      	ldr	r3, [pc, #8]	; (baa38 <newlib_impure_ptr_callback+0xc>)
   baa30:	681b      	ldr	r3, [r3, #0]
   baa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baa34:	9301      	str	r3, [sp, #4]
   baa36:	bd08      	pop	{r3, pc}
   baa38:	0003021c 	.word	0x0003021c

000baa3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   baa3c:	2200      	movs	r2, #0
   baa3e:	6840      	ldr	r0, [r0, #4]
   baa40:	4611      	mov	r1, r2
   baa42:	f7ff bf83 	b.w	ba94c <network_listening>

000baa46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baa46:	2200      	movs	r2, #0
   baa48:	6840      	ldr	r0, [r0, #4]
   baa4a:	4611      	mov	r1, r2
   baa4c:	f7ff bf8e 	b.w	ba96c <network_get_listen_timeout>

000baa50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baa50:	6840      	ldr	r0, [r0, #4]
   baa52:	2200      	movs	r2, #0
   baa54:	f7ff bf82 	b.w	ba95c <network_set_listen_timeout>

000baa58 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baa58:	6840      	ldr	r0, [r0, #4]
   baa5a:	2200      	movs	r2, #0
   baa5c:	f081 0101 	eor.w	r1, r1, #1
   baa60:	f7ff bf6c 	b.w	ba93c <network_listen>

000baa64 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baa64:	2300      	movs	r3, #0
   baa66:	6840      	ldr	r0, [r0, #4]
   baa68:	461a      	mov	r2, r3
   baa6a:	4619      	mov	r1, r3
   baa6c:	f7ff bf5e 	b.w	ba92c <network_off>

000baa70 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baa70:	2300      	movs	r3, #0
   baa72:	6840      	ldr	r0, [r0, #4]
   baa74:	461a      	mov	r2, r3
   baa76:	4619      	mov	r1, r3
   baa78:	f7ff bf50 	b.w	ba91c <network_on>

000baa7c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   baa7c:	2200      	movs	r2, #0
   baa7e:	6840      	ldr	r0, [r0, #4]
   baa80:	4611      	mov	r1, r2
   baa82:	f7ff bf43 	b.w	ba90c <network_ready>

000baa86 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baa86:	2200      	movs	r2, #0
   baa88:	6840      	ldr	r0, [r0, #4]
   baa8a:	4611      	mov	r1, r2
   baa8c:	f7ff bf2e 	b.w	ba8ec <network_connecting>

000baa90 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baa90:	6840      	ldr	r0, [r0, #4]
   baa92:	2200      	movs	r2, #0
   baa94:	2102      	movs	r1, #2
   baa96:	f7ff bf31 	b.w	ba8fc <network_disconnect>

000baa9a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baa9a:	2300      	movs	r3, #0
   baa9c:	6840      	ldr	r0, [r0, #4]
   baa9e:	461a      	mov	r2, r3
   baaa0:	f7ff bf1c 	b.w	ba8dc <network_connect>

000baaa4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   baaa4:	4b02      	ldr	r3, [pc, #8]	; (baab0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   baaa6:	2203      	movs	r2, #3
   baaa8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   baaaa:	4a02      	ldr	r2, [pc, #8]	; (baab4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   baaac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   baaae:	4770      	bx	lr
   baab0:	2003e6bc 	.word	0x2003e6bc
   baab4:	000bdb70 	.word	0x000bdb70

000baab8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   baab8:	2100      	movs	r1, #0
   baaba:	f7ff be93 	b.w	ba7e4 <hal_spi_release>

000baabe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   baabe:	2100      	movs	r1, #0
   baac0:	f7ff be88 	b.w	ba7d4 <hal_spi_acquire>

000baac4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   baac4:	b510      	push	{r4, lr}
   baac6:	4604      	mov	r4, r0
   baac8:	4608      	mov	r0, r1
{
    _spi = spi;
   baaca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   baacc:	f7ff fe62 	bl	ba794 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   baad0:	2300      	movs	r3, #0
   baad2:	6063      	str	r3, [r4, #4]
}
   baad4:	4620      	mov	r0, r4
   baad6:	bd10      	pop	{r4, pc}

000baad8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   baad8:	b513      	push	{r0, r1, r4, lr}
   baada:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   baadc:	7800      	ldrb	r0, [r0, #0]
   baade:	f7ff ffee 	bl	baabe <_ZN8SPIClass4lockEv.isra.0>
   baae2:	b958      	cbnz	r0, baafc <_ZN8SPIClass5beginEv+0x24>
   baae4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   baae6:	9001      	str	r0, [sp, #4]
   baae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   baaec:	f7ff fe42 	bl	ba774 <hal_spi_begin>
        unlock();
   baaf0:	9801      	ldr	r0, [sp, #4]
    }
}
   baaf2:	b002      	add	sp, #8
   baaf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baaf8:	f7ff bfde 	b.w	baab8 <_ZN8SPIClass6unlockEv.isra.0>
   baafc:	b002      	add	sp, #8
   baafe:	bd10      	pop	{r4, pc}

000bab00 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bab00:	7800      	ldrb	r0, [r0, #0]
   bab02:	f7ff bfd9 	b.w	baab8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bab08 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bab08:	0840      	lsrs	r0, r0, #1
{
   bab0a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bab0c:	6018      	str	r0, [r3, #0]
   bab0e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bab10:	6818      	ldr	r0, [r3, #0]
   bab12:	4288      	cmp	r0, r1
   bab14:	b2e5      	uxtb	r5, r4
   bab16:	d906      	bls.n	bab26 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bab18:	3401      	adds	r4, #1
   bab1a:	2c08      	cmp	r4, #8
   bab1c:	d002      	beq.n	bab24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bab1e:	0840      	lsrs	r0, r0, #1
   bab20:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bab22:	e7f5      	b.n	bab10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bab24:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bab26:	4b02      	ldr	r3, [pc, #8]	; (bab30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bab28:	5d5b      	ldrb	r3, [r3, r5]
   bab2a:	7013      	strb	r3, [r2, #0]
}
   bab2c:	bd30      	pop	{r4, r5, pc}
   bab2e:	bf00      	nop
   bab30:	000bdba4 	.word	0x000bdba4

000bab34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bab34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bab38:	4606      	mov	r6, r0
   bab3a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bab3c:	7800      	ldrb	r0, [r0, #0]
{
   bab3e:	460c      	mov	r4, r1
    CHECK(lock());
   bab40:	f7ff ffbd 	bl	baabe <_ZN8SPIClass4lockEv.isra.0>
   bab44:	2800      	cmp	r0, #0
   bab46:	db1b      	blt.n	bab80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bab48:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bab4a:	2214      	movs	r2, #20
   bab4c:	2100      	movs	r1, #0
   bab4e:	a809      	add	r0, sp, #36	; 0x24
   bab50:	f000 ffac 	bl	bbaac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bab54:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bab56:	2200      	movs	r2, #0
   bab58:	a909      	add	r1, sp, #36	; 0x24
   bab5a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bab5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bab60:	f7ff fe28 	bl	ba7b4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bab64:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bab68:	b113      	cbz	r3, bab70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bab6a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bab6e:	b155      	cbz	r5, bab86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bab70:	2700      	movs	r7, #0
   bab72:	46b9      	mov	r9, r7
   bab74:	46b8      	mov	r8, r7
   bab76:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bab78:	7923      	ldrb	r3, [r4, #4]
   bab7a:	b15d      	cbz	r5, bab94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bab7c:	b1c3      	cbz	r3, babb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bab7e:	2000      	movs	r0, #0
}
   bab80:	b00f      	add	sp, #60	; 0x3c
   bab82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bab86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bab8a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bab8e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bab92:	e7f1      	b.n	bab78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bab94:	2b00      	cmp	r3, #0
   bab96:	d135      	bne.n	bac04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bab98:	68a3      	ldr	r3, [r4, #8]
   bab9a:	4543      	cmp	r3, r8
   bab9c:	d108      	bne.n	babb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bab9e:	f88d 9020 	strb.w	r9, [sp, #32]
   baba2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   baba6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   babaa:	89a3      	ldrh	r3, [r4, #12]
   babac:	429a      	cmp	r2, r3
   babae:	d0e6      	beq.n	bab7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   babb0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   babb2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   babb4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   babb8:	980a      	ldr	r0, [sp, #40]	; 0x28
   babba:	ab04      	add	r3, sp, #16
   babbc:	f10d 020f 	add.w	r2, sp, #15
   babc0:	f7ff ffa2 	bl	bab08 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   babc4:	7921      	ldrb	r1, [r4, #4]
   babc6:	b985      	cbnz	r5, babea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   babc8:	b989      	cbnz	r1, babee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   babca:	68a3      	ldr	r3, [r4, #8]
   babcc:	4543      	cmp	r3, r8
   babce:	d30e      	bcc.n	babee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   babd0:	f88d 9020 	strb.w	r9, [sp, #32]
   babd4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   babd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   babdc:	89a3      	ldrh	r3, [r4, #12]
   babde:	429a      	cmp	r2, r3
   babe0:	d105      	bne.n	babee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   babe2:	9b04      	ldr	r3, [sp, #16]
   babe4:	4543      	cmp	r3, r8
   babe6:	d102      	bne.n	babee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   babe8:	e7c9      	b.n	bab7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   babea:	2900      	cmp	r1, #0
   babec:	d1f9      	bne.n	babe2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   babee:	2300      	movs	r3, #0
   babf0:	9301      	str	r3, [sp, #4]
   babf2:	7b63      	ldrb	r3, [r4, #13]
   babf4:	9300      	str	r3, [sp, #0]
   babf6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   babfa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   babfc:	7830      	ldrb	r0, [r6, #0]
   babfe:	f7ff fde1 	bl	ba7c4 <hal_spi_set_settings>
   bac02:	e7bc      	b.n	bab7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bac04:	e9cd 5500 	strd	r5, r5, [sp]
   bac08:	462b      	mov	r3, r5
   bac0a:	462a      	mov	r2, r5
   bac0c:	2101      	movs	r1, #1
   bac0e:	e7f5      	b.n	babfc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bac10 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bac10:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bac12:	7800      	ldrb	r0, [r0, #0]
   bac14:	f7ff fdb6 	bl	ba784 <hal_spi_transfer>
}
   bac18:	b2c0      	uxtb	r0, r0
   bac1a:	bd08      	pop	{r3, pc}

000bac1c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bac1c:	4b05      	ldr	r3, [pc, #20]	; (bac34 <_GLOBAL__sub_I_System+0x18>)
   bac1e:	2202      	movs	r2, #2
   bac20:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bac22:	4b05      	ldr	r3, [pc, #20]	; (bac38 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bac24:	4a05      	ldr	r2, [pc, #20]	; (bac3c <_GLOBAL__sub_I_System+0x20>)
   bac26:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bac28:	2000      	movs	r0, #0
   bac2a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bac2e:	f7ff be31 	b.w	ba894 <set_system_mode>
   bac32:	bf00      	nop
   bac34:	2003e6d0 	.word	0x2003e6d0
   bac38:	2003e6c4 	.word	0x2003e6c4
   bac3c:	ffff0000 	.word	0xffff0000

000bac40 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bac40:	b510      	push	{r4, lr}
   bac42:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bac44:	f7f9 feba 	bl	b49bc <strlen>
   bac48:	3801      	subs	r0, #1
   bac4a:	1823      	adds	r3, r4, r0
   bac4c:	4620      	mov	r0, r4
	while(i<j){
   bac4e:	4283      	cmp	r3, r0
   bac50:	d906      	bls.n	bac60 <_Z11str_reversePc+0x20>
		c = *i;
   bac52:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bac54:	7819      	ldrb	r1, [r3, #0]
   bac56:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bac5a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bac5e:	e7f6      	b.n	bac4e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bac60:	bd10      	pop	{r4, pc}

000bac62 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bac62:	b570      	push	{r4, r5, r6, lr}
   bac64:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bac66:	1e91      	subs	r1, r2, #2
   bac68:	2922      	cmp	r1, #34	; 0x22
   bac6a:	d81d      	bhi.n	baca8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bac6c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bac6e:	b930      	cbnz	r0, bac7e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bac70:	4423      	add	r3, r4
            *ptr++ = '0';
   bac72:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bac74:	429d      	cmp	r5, r3
   bac76:	d210      	bcs.n	bac9a <ultoa+0x38>
            *ptr++ = '0';
   bac78:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bac7c:	e7fa      	b.n	bac74 <ultoa+0x12>
            result.quot = a/radix;
   bac7e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bac82:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bac86:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bac88:	2809      	cmp	r0, #9
                *ptr += '0';
   bac8a:	bf94      	ite	ls
   bac8c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bac8e:	3157      	addhi	r1, #87	; 0x57
   bac90:	b2c9      	uxtb	r1, r1
   bac92:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bac96:	4630      	mov	r0, r6
	while(a){
   bac98:	e7e9      	b.n	bac6e <ultoa+0xc>

	*ptr = '\0';
   bac9a:	2300      	movs	r3, #0
	str_reverse(buffer);
   bac9c:	4620      	mov	r0, r4
	*ptr = '\0';
   bac9e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   baca0:	f7ff ffce 	bl	bac40 <_Z11str_reversePc>
	return buffer;
   baca4:	4620      	mov	r0, r4
}
   baca6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   baca8:	2000      	movs	r0, #0
   bacaa:	e7fc      	b.n	baca6 <ultoa+0x44>

000bacac <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bacac:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bacae:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bacb0:	460c      	mov	r4, r1
   bacb2:	4615      	mov	r5, r2
	if(a<0){
   bacb4:	da0e      	bge.n	bacd4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bacb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bacba:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bacbe:	bf14      	ite	ne
   bacc0:	4258      	negne	r0, r3
   bacc2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bacc4:	2301      	movs	r3, #1
		*buffer = '-';
   bacc6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bacc8:	462a      	mov	r2, r5
   bacca:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   baccc:	f7ff ffc9 	bl	bac62 <ultoa>
	}
	return buffer;
}
   bacd0:	4620      	mov	r0, r4
   bacd2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bacd4:	2301      	movs	r3, #1
   bacd6:	e7f9      	b.n	baccc <itoa+0x20>

000bacd8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bacd8:	b510      	push	{r4, lr}
   bacda:	4604      	mov	r4, r0
{
	free(buffer);
   bacdc:	6800      	ldr	r0, [r0, #0]
   bacde:	f7ff fe75 	bl	ba9cc <free>
}
   bace2:	4620      	mov	r0, r4
   bace4:	bd10      	pop	{r4, pc}

000bace6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bace6:	b510      	push	{r4, lr}
   bace8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bacea:	6800      	ldr	r0, [r0, #0]
   bacec:	b108      	cbz	r0, bacf2 <_ZN6String10invalidateEv+0xc>
   bacee:	f7ff fe6d 	bl	ba9cc <free>
	buffer = NULL;
   bacf2:	2300      	movs	r3, #0
	capacity = len = 0;
   bacf4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bacf8:	6023      	str	r3, [r4, #0]
}
   bacfa:	bd10      	pop	{r4, pc}

000bacfc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bacfc:	b538      	push	{r3, r4, r5, lr}
   bacfe:	4604      	mov	r4, r0
   bad00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bad02:	6800      	ldr	r0, [r0, #0]
   bad04:	3101      	adds	r1, #1
   bad06:	f7ff fe69 	bl	ba9dc <realloc>
	if (newbuffer) {
   bad0a:	b110      	cbz	r0, bad12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bad0c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bad10:	2001      	movs	r0, #1
	}
	return 0;
}
   bad12:	bd38      	pop	{r3, r4, r5, pc}

000bad14 <_ZN6String7reserveEj>:
{
   bad14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bad16:	6803      	ldr	r3, [r0, #0]
{
   bad18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bad1a:	b123      	cbz	r3, bad26 <_ZN6String7reserveEj+0x12>
   bad1c:	6843      	ldr	r3, [r0, #4]
   bad1e:	428b      	cmp	r3, r1
   bad20:	d301      	bcc.n	bad26 <_ZN6String7reserveEj+0x12>
   bad22:	2001      	movs	r0, #1
}
   bad24:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bad26:	4620      	mov	r0, r4
   bad28:	f7ff ffe8 	bl	bacfc <_ZN6String12changeBufferEj>
   bad2c:	2800      	cmp	r0, #0
   bad2e:	d0f9      	beq.n	bad24 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bad30:	68a3      	ldr	r3, [r4, #8]
   bad32:	2b00      	cmp	r3, #0
   bad34:	d1f5      	bne.n	bad22 <_ZN6String7reserveEj+0xe>
   bad36:	6822      	ldr	r2, [r4, #0]
   bad38:	7013      	strb	r3, [r2, #0]
   bad3a:	e7f2      	b.n	bad22 <_ZN6String7reserveEj+0xe>

000bad3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad3e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bad40:	4611      	mov	r1, r2
   bad42:	9201      	str	r2, [sp, #4]
{
   bad44:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bad46:	f7ff ffe5 	bl	bad14 <_ZN6String7reserveEj>
   bad4a:	9a01      	ldr	r2, [sp, #4]
   bad4c:	b928      	cbnz	r0, bad5a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bad4e:	4620      	mov	r0, r4
   bad50:	f7ff ffc9 	bl	bace6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bad54:	4620      	mov	r0, r4
   bad56:	b003      	add	sp, #12
   bad58:	bd30      	pop	{r4, r5, pc}
	len = length;
   bad5a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bad5c:	4629      	mov	r1, r5
   bad5e:	6820      	ldr	r0, [r4, #0]
   bad60:	f000 fe96 	bl	bba90 <memcpy>
	buffer[len] = 0;
   bad64:	6822      	ldr	r2, [r4, #0]
   bad66:	68a3      	ldr	r3, [r4, #8]
   bad68:	2100      	movs	r1, #0
   bad6a:	54d1      	strb	r1, [r2, r3]
	return *this;
   bad6c:	e7f2      	b.n	bad54 <_ZN6String4copyEPKcj+0x18>

000bad6e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bad6e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bad70:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bad72:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bad76:	4604      	mov	r4, r0
	len = 0;
   bad78:	6083      	str	r3, [r0, #8]
	flags = 0;
   bad7a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bad7c:	b141      	cbz	r1, bad90 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bad7e:	4608      	mov	r0, r1
   bad80:	9101      	str	r1, [sp, #4]
   bad82:	f7f9 fe1b 	bl	b49bc <strlen>
   bad86:	9901      	ldr	r1, [sp, #4]
   bad88:	4602      	mov	r2, r0
   bad8a:	4620      	mov	r0, r4
   bad8c:	f7ff ffd6 	bl	bad3c <_ZN6String4copyEPKcj>
}
   bad90:	4620      	mov	r0, r4
   bad92:	b002      	add	sp, #8
   bad94:	bd10      	pop	{r4, pc}

000bad96 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bad96:	b538      	push	{r3, r4, r5, lr}
   bad98:	4605      	mov	r5, r0
	if (buffer) {
   bad9a:	6800      	ldr	r0, [r0, #0]
{
   bad9c:	460c      	mov	r4, r1
	if (buffer) {
   bad9e:	b168      	cbz	r0, badbc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bada0:	686a      	ldr	r2, [r5, #4]
   bada2:	688b      	ldr	r3, [r1, #8]
   bada4:	429a      	cmp	r2, r3
   bada6:	d307      	bcc.n	badb8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bada8:	6809      	ldr	r1, [r1, #0]
   badaa:	f000 fec5 	bl	bbb38 <strcpy>
			len = rhs.len;
   badae:	68a3      	ldr	r3, [r4, #8]
   badb0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   badb2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   badb4:	60a3      	str	r3, [r4, #8]
}
   badb6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   badb8:	f7ff fe08 	bl	ba9cc <free>
	buffer = rhs.buffer;
   badbc:	6823      	ldr	r3, [r4, #0]
   badbe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   badc0:	6863      	ldr	r3, [r4, #4]
   badc2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   badc4:	68a3      	ldr	r3, [r4, #8]
   badc6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   badc8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   badca:	e9c4 3300 	strd	r3, r3, [r4]
   badce:	e7f1      	b.n	badb4 <_ZN6String4moveERS_+0x1e>

000badd0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   badd0:	4288      	cmp	r0, r1
{
   badd2:	b510      	push	{r4, lr}
   badd4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   badd6:	d005      	beq.n	bade4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   badd8:	680b      	ldr	r3, [r1, #0]
   badda:	b12b      	cbz	r3, bade8 <_ZN6StringaSERKS_+0x18>
   baddc:	688a      	ldr	r2, [r1, #8]
   badde:	4619      	mov	r1, r3
   bade0:	f7ff ffac 	bl	bad3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bade4:	4620      	mov	r0, r4
   bade6:	bd10      	pop	{r4, pc}
	else invalidate();
   bade8:	f7ff ff7d 	bl	bace6 <_ZN6String10invalidateEv>
   badec:	e7fa      	b.n	bade4 <_ZN6StringaSERKS_+0x14>

000badee <_ZN6StringC1ERKS_>:
String::String(const String &value)
   badee:	b510      	push	{r4, lr}
	buffer = NULL;
   badf0:	2300      	movs	r3, #0
String::String(const String &value)
   badf2:	4604      	mov	r4, r0
	capacity = 0;
   badf4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   badf8:	6083      	str	r3, [r0, #8]
	flags = 0;
   badfa:	7303      	strb	r3, [r0, #12]
	*this = value;
   badfc:	f7ff ffe8 	bl	badd0 <_ZN6StringaSERKS_>
}
   bae00:	4620      	mov	r0, r4
   bae02:	bd10      	pop	{r4, pc}

000bae04 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bae04:	4288      	cmp	r0, r1
{
   bae06:	b510      	push	{r4, lr}
   bae08:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bae0a:	d001      	beq.n	bae10 <_ZN6StringaSEOS_+0xc>
   bae0c:	f7ff ffc3 	bl	bad96 <_ZN6String4moveERS_>
	return *this;
}
   bae10:	4620      	mov	r0, r4
   bae12:	bd10      	pop	{r4, pc}

000bae14 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bae14:	b513      	push	{r0, r1, r4, lr}
   bae16:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bae18:	b159      	cbz	r1, bae32 <_ZN6StringaSEPKc+0x1e>
   bae1a:	4608      	mov	r0, r1
   bae1c:	9101      	str	r1, [sp, #4]
   bae1e:	f7f9 fdcd 	bl	b49bc <strlen>
   bae22:	9901      	ldr	r1, [sp, #4]
   bae24:	4602      	mov	r2, r0
   bae26:	4620      	mov	r0, r4
   bae28:	f7ff ff88 	bl	bad3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bae2c:	4620      	mov	r0, r4
   bae2e:	b002      	add	sp, #8
   bae30:	bd10      	pop	{r4, pc}
	else invalidate();
   bae32:	f7ff ff58 	bl	bace6 <_ZN6String10invalidateEv>
   bae36:	e7f9      	b.n	bae2c <_ZN6StringaSEPKc+0x18>

000bae38 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   bae38:	b510      	push	{r4, lr}
   bae3a:	4604      	mov	r4, r0
   bae3c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   bae3e:	2300      	movs	r3, #0
	capacity = 0;
   bae40:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   bae44:	60a3      	str	r3, [r4, #8]
	flags = 0;
   bae46:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   bae48:	4608      	mov	r0, r1
	itoa(value, buf, base);
   bae4a:	a901      	add	r1, sp, #4
   bae4c:	f7ff ff2e 	bl	bacac <itoa>
	*this = buf;
   bae50:	a901      	add	r1, sp, #4
   bae52:	4620      	mov	r0, r4
   bae54:	f7ff ffde 	bl	bae14 <_ZN6StringaSEPKc>
}
   bae58:	4620      	mov	r0, r4
   bae5a:	b00a      	add	sp, #40	; 0x28
   bae5c:	bd10      	pop	{r4, pc}

000bae5e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bae5e:	b570      	push	{r4, r5, r6, lr}
   bae60:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bae62:	460e      	mov	r6, r1
   bae64:	b909      	cbnz	r1, bae6a <_ZN6String6concatEPKcj+0xc>
   bae66:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bae68:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bae6a:	b16a      	cbz	r2, bae88 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bae6c:	6884      	ldr	r4, [r0, #8]
   bae6e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bae70:	4621      	mov	r1, r4
   bae72:	f7ff ff4f 	bl	bad14 <_ZN6String7reserveEj>
   bae76:	2800      	cmp	r0, #0
   bae78:	d0f5      	beq.n	bae66 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bae7a:	6828      	ldr	r0, [r5, #0]
   bae7c:	68ab      	ldr	r3, [r5, #8]
   bae7e:	4631      	mov	r1, r6
   bae80:	4418      	add	r0, r3
   bae82:	f000 fe59 	bl	bbb38 <strcpy>
	len = newlen;
   bae86:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bae88:	2001      	movs	r0, #1
   bae8a:	e7ed      	b.n	bae68 <_ZN6String6concatEPKcj+0xa>

000bae8c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bae8c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bae8e:	688a      	ldr	r2, [r1, #8]
   bae90:	6809      	ldr	r1, [r1, #0]
{
   bae92:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bae94:	f7ff ffe3 	bl	bae5e <_ZN6String6concatEPKcj>
   bae98:	b910      	cbnz	r0, baea0 <_ZplRK15StringSumHelperRK6String+0x14>
   bae9a:	4620      	mov	r0, r4
   bae9c:	f7ff ff23 	bl	bace6 <_ZN6String10invalidateEv>
	return a;
}
   baea0:	4620      	mov	r0, r4
   baea2:	bd10      	pop	{r4, pc}

000baea4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   baea4:	b513      	push	{r0, r1, r4, lr}
   baea6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   baea8:	b929      	cbnz	r1, baeb6 <_ZplRK15StringSumHelperPKc+0x12>
   baeaa:	4620      	mov	r0, r4
   baeac:	f7ff ff1b 	bl	bace6 <_ZN6String10invalidateEv>
	return a;
}
   baeb0:	4620      	mov	r0, r4
   baeb2:	b002      	add	sp, #8
   baeb4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   baeb6:	4608      	mov	r0, r1
   baeb8:	9101      	str	r1, [sp, #4]
   baeba:	f7f9 fd7f 	bl	b49bc <strlen>
   baebe:	9901      	ldr	r1, [sp, #4]
   baec0:	4602      	mov	r2, r0
   baec2:	4620      	mov	r0, r4
   baec4:	f7ff ffcb 	bl	bae5e <_ZN6String6concatEPKcj>
   baec8:	2800      	cmp	r0, #0
   baeca:	d0ee      	beq.n	baeaa <_ZplRK15StringSumHelperPKc+0x6>
   baecc:	e7f0      	b.n	baeb0 <_ZplRK15StringSumHelperPKc+0xc>
	...

000baed0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   baed0:	4802      	ldr	r0, [pc, #8]	; (baedc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   baed2:	2300      	movs	r3, #0
   baed4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   baed6:	f7ff bba5 	b.w	ba624 <os_mutex_recursive_create>
   baeda:	bf00      	nop
   baedc:	2003e6d4 	.word	0x2003e6d4

000baee0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   baee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baee2:	4606      	mov	r6, r0
   baee4:	460d      	mov	r5, r1
  size_t n = 0;
   baee6:	188f      	adds	r7, r1, r2
   baee8:	2400      	movs	r4, #0
  while (size--) {
   baeea:	42bd      	cmp	r5, r7
   baeec:	d00c      	beq.n	baf08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   baeee:	6833      	ldr	r3, [r6, #0]
   baef0:	f815 1b01 	ldrb.w	r1, [r5], #1
   baef4:	689b      	ldr	r3, [r3, #8]
   baef6:	4630      	mov	r0, r6
   baef8:	4798      	blx	r3
     if (chunk>=0)
   baefa:	1e03      	subs	r3, r0, #0
   baefc:	db01      	blt.n	baf02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   baefe:	441c      	add	r4, r3
  while (size--) {
   baf00:	e7f3      	b.n	baeea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   baf02:	2c00      	cmp	r4, #0
   baf04:	bf08      	it	eq
   baf06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   baf08:	4620      	mov	r0, r4
   baf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   baf0c:	b513      	push	{r0, r1, r4, lr}
   baf0e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   baf10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   baf12:	b159      	cbz	r1, baf2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   baf14:	9101      	str	r1, [sp, #4]
   baf16:	f7f9 fd51 	bl	b49bc <strlen>
   baf1a:	6823      	ldr	r3, [r4, #0]
   baf1c:	9901      	ldr	r1, [sp, #4]
   baf1e:	68db      	ldr	r3, [r3, #12]
   baf20:	4602      	mov	r2, r0
   baf22:	4620      	mov	r0, r4
    }
   baf24:	b002      	add	sp, #8
   baf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   baf2a:	4718      	bx	r3
    }
   baf2c:	b002      	add	sp, #8
   baf2e:	bd10      	pop	{r4, pc}

000baf30 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   baf30:	b508      	push	{r3, lr}
  return write(str);
   baf32:	f7ff ffeb 	bl	baf0c <_ZN5Print5writeEPKc>
}
   baf36:	bd08      	pop	{r3, pc}

000baf38 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   baf38:	6803      	ldr	r3, [r0, #0]
   baf3a:	689b      	ldr	r3, [r3, #8]
   baf3c:	4718      	bx	r3

000baf3e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   baf3e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   baf40:	210d      	movs	r1, #13
{
   baf42:	4605      	mov	r5, r0
  size_t n = print('\r');
   baf44:	f7ff fff8 	bl	baf38 <_ZN5Print5printEc>
  n += print('\n');
   baf48:	210a      	movs	r1, #10
  size_t n = print('\r');
   baf4a:	4604      	mov	r4, r0
  n += print('\n');
   baf4c:	4628      	mov	r0, r5
   baf4e:	f7ff fff3 	bl	baf38 <_ZN5Print5printEc>
  return n;
}
   baf52:	4420      	add	r0, r4
   baf54:	bd38      	pop	{r3, r4, r5, pc}

000baf56 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   baf56:	b538      	push	{r3, r4, r5, lr}
   baf58:	4605      	mov	r5, r0
  return write(str);
   baf5a:	f7ff ffd7 	bl	baf0c <_ZN5Print5writeEPKc>
   baf5e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   baf60:	4628      	mov	r0, r5
   baf62:	f7ff ffec 	bl	baf3e <_ZN5Print7printlnEv>
  return n;
}
   baf66:	4420      	add	r0, r4
   baf68:	bd38      	pop	{r3, r4, r5, pc}

000baf6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   baf6a:	b530      	push	{r4, r5, lr}
   baf6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   baf6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   baf70:	2a01      	cmp	r2, #1
  *str = '\0';
   baf72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   baf76:	bf98      	it	ls
   baf78:	220a      	movls	r2, #10
   baf7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   baf7c:	460d      	mov	r5, r1
   baf7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   baf82:	fb01 5312 	mls	r3, r1, r2, r5
   baf86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   baf8a:	2b09      	cmp	r3, #9
   baf8c:	bf94      	ite	ls
   baf8e:	3330      	addls	r3, #48	; 0x30
   baf90:	3337      	addhi	r3, #55	; 0x37
   baf92:	b2db      	uxtb	r3, r3
  } while(n);
   baf94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   baf96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   baf9a:	d9ef      	bls.n	baf7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   baf9c:	4621      	mov	r1, r4
   baf9e:	f7ff ffb5 	bl	baf0c <_ZN5Print5writeEPKc>
}
   bafa2:	b00b      	add	sp, #44	; 0x2c
   bafa4:	bd30      	pop	{r4, r5, pc}

000bafa6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bafa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bafaa:	b086      	sub	sp, #24
   bafac:	af00      	add	r7, sp, #0
   bafae:	4605      	mov	r5, r0
   bafb0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bafb2:	1d38      	adds	r0, r7, #4
   bafb4:	2114      	movs	r1, #20
{
   bafb6:	4614      	mov	r4, r2
    va_copy(args2, args);
   bafb8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bafba:	f7ff fd1f 	bl	ba9fc <vsnprintf>

    if (n<bufsize)
   bafbe:	2813      	cmp	r0, #19
   bafc0:	d80e      	bhi.n	bafe0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bafc2:	1d39      	adds	r1, r7, #4
   bafc4:	4628      	mov	r0, r5
   bafc6:	f7ff ffa1 	bl	baf0c <_ZN5Print5writeEPKc>
   bafca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bafcc:	b11e      	cbz	r6, bafd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bafce:	4628      	mov	r0, r5
   bafd0:	f7ff ffb5 	bl	baf3e <_ZN5Print7printlnEv>
   bafd4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bafd6:	4620      	mov	r0, r4
   bafd8:	3718      	adds	r7, #24
   bafda:	46bd      	mov	sp, r7
   bafdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bafe0:	f100 0308 	add.w	r3, r0, #8
   bafe4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bafe8:	46e8      	mov	r8, sp
        char bigger[n+1];
   bafea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bafee:	4622      	mov	r2, r4
   baff0:	1c41      	adds	r1, r0, #1
   baff2:	683b      	ldr	r3, [r7, #0]
   baff4:	4668      	mov	r0, sp
   baff6:	f7ff fd01 	bl	ba9fc <vsnprintf>
  return write(str);
   baffa:	4669      	mov	r1, sp
   baffc:	4628      	mov	r0, r5
   baffe:	f7ff ff85 	bl	baf0c <_ZN5Print5writeEPKc>
   bb002:	4604      	mov	r4, r0
   bb004:	46c5      	mov	sp, r8
   bb006:	e7e1      	b.n	bafcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb008 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bb008:	4b01      	ldr	r3, [pc, #4]	; (bb010 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bb00a:	4a02      	ldr	r2, [pc, #8]	; (bb014 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bb00c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bb00e:	4770      	bx	lr
   bb010:	2003e6d8 	.word	0x2003e6d8
   bb014:	000bdbac 	.word	0x000bdbac

000bb018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb018:	4b02      	ldr	r3, [pc, #8]	; (bb024 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb01a:	681a      	ldr	r2, [r3, #0]
   bb01c:	4b02      	ldr	r3, [pc, #8]	; (bb028 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb01e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb020:	4770      	bx	lr
   bb022:	bf00      	nop
   bb024:	2003c6b0 	.word	0x2003c6b0
   bb028:	2003e6dc 	.word	0x2003e6dc

000bb02c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bb02c:	428a      	cmp	r2, r1
{
   bb02e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bb030:	d007      	beq.n	bb042 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bb032:	1a44      	subs	r4, r0, r1
   bb034:	9802      	ldr	r0, [sp, #8]
   bb036:	1ac0      	subs	r0, r0, r3
   bb038:	4344      	muls	r4, r0
   bb03a:	1a50      	subs	r0, r2, r1
   bb03c:	fb94 f0f0 	sdiv	r0, r4, r0
   bb040:	4418      	add	r0, r3
}
   bb042:	bd10      	pop	{r4, pc}

000bb044 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   bb044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb048:	ec55 4b11 	vmov	r4, r5, d1
   bb04c:	ec57 6b12 	vmov	r6, r7, d2
   bb050:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   bb052:	ee11 2a10 	vmov	r2, s2
   bb056:	ee12 0a10 	vmov	r0, s4
   bb05a:	462b      	mov	r3, r5
   bb05c:	4639      	mov	r1, r7
{
   bb05e:	ed8d 0b02 	vstr	d0, [sp, #8]
   bb062:	ed8d 4b00 	vstr	d4, [sp]
   bb066:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   bb06a:	f7f9 fbfd 	bl	b4868 <__aeabi_dcmpeq>
   bb06e:	ed9d 0b02 	vldr	d0, [sp, #8]
   bb072:	bb38      	cbnz	r0, bb0c4 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bb074:	ec51 0b10 	vmov	r0, r1, d0
   bb078:	4622      	mov	r2, r4
   bb07a:	462b      	mov	r3, r5
   bb07c:	f7f8 ffd4 	bl	b4028 <__aeabi_dsub>
   bb080:	4652      	mov	r2, sl
   bb082:	4680      	mov	r8, r0
   bb084:	4689      	mov	r9, r1
   bb086:	465b      	mov	r3, fp
   bb088:	e9dd 0100 	ldrd	r0, r1, [sp]
   bb08c:	f7f8 ffcc 	bl	b4028 <__aeabi_dsub>
   bb090:	4602      	mov	r2, r0
   bb092:	460b      	mov	r3, r1
   bb094:	4640      	mov	r0, r8
   bb096:	4649      	mov	r1, r9
   bb098:	f7f9 f97e 	bl	b4398 <__aeabi_dmul>
   bb09c:	4622      	mov	r2, r4
   bb09e:	4680      	mov	r8, r0
   bb0a0:	4689      	mov	r9, r1
   bb0a2:	462b      	mov	r3, r5
   bb0a4:	4630      	mov	r0, r6
   bb0a6:	4639      	mov	r1, r7
   bb0a8:	f7f8 ffbe 	bl	b4028 <__aeabi_dsub>
   bb0ac:	4602      	mov	r2, r0
   bb0ae:	460b      	mov	r3, r1
   bb0b0:	4640      	mov	r0, r8
   bb0b2:	4649      	mov	r1, r9
   bb0b4:	f7f9 fa9a 	bl	b45ec <__aeabi_ddiv>
   bb0b8:	4652      	mov	r2, sl
   bb0ba:	465b      	mov	r3, fp
   bb0bc:	f7f8 ffb6 	bl	b402c <__adddf3>
   bb0c0:	ec41 0b10 	vmov	d0, r0, r1
}
   bb0c4:	b005      	add	sp, #20
   bb0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb0ca <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bb0ca:	2100      	movs	r1, #0
   bb0cc:	f7ff bbea 	b.w	ba8a4 <system_delay_ms>

000bb0d0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   bb0d0:	4b01      	ldr	r3, [pc, #4]	; (bb0d8 <_GLOBAL__sub_I_RGB+0x8>)
   bb0d2:	2200      	movs	r2, #0
   bb0d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb0d6:	4770      	bx	lr
   bb0d8:	2003e6e0 	.word	0x2003e6e0

000bb0dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb0dc:	4b01      	ldr	r3, [pc, #4]	; (bb0e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb0de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb0e0:	4770      	bx	lr
   bb0e2:	bf00      	nop
   bb0e4:	2003c6b4 	.word	0x2003c6b4

000bb0e8 <serialEventRun>:
{
   bb0e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb0ea:	4b0b      	ldr	r3, [pc, #44]	; (bb118 <serialEventRun+0x30>)
   bb0ec:	b143      	cbz	r3, bb100 <serialEventRun+0x18>
   bb0ee:	f000 f981 	bl	bb3f4 <_Z16_fetch_usbserialv>
   bb0f2:	6803      	ldr	r3, [r0, #0]
   bb0f4:	691b      	ldr	r3, [r3, #16]
   bb0f6:	4798      	blx	r3
   bb0f8:	2800      	cmp	r0, #0
   bb0fa:	dd01      	ble.n	bb100 <serialEventRun+0x18>
        serialEvent();
   bb0fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb100:	4b06      	ldr	r3, [pc, #24]	; (bb11c <serialEventRun+0x34>)
   bb102:	b143      	cbz	r3, bb116 <serialEventRun+0x2e>
   bb104:	f000 fc3a 	bl	bb97c <_Z22__fetch_global_Serial1v>
   bb108:	6803      	ldr	r3, [r0, #0]
   bb10a:	691b      	ldr	r3, [r3, #16]
   bb10c:	4798      	blx	r3
   bb10e:	2800      	cmp	r0, #0
   bb110:	dd01      	ble.n	bb116 <serialEventRun+0x2e>
        serialEvent1();
   bb112:	f3af 8000 	nop.w
}
   bb116:	bd08      	pop	{r3, pc}
	...

000bb120 <_post_loop>:
{
   bb120:	b508      	push	{r3, lr}
	serialEventRun();
   bb122:	f7ff ffe1 	bl	bb0e8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb126:	f7ff fa5d 	bl	ba5e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb12a:	4b01      	ldr	r3, [pc, #4]	; (bb130 <_post_loop+0x10>)
   bb12c:	6018      	str	r0, [r3, #0]
}
   bb12e:	bd08      	pop	{r3, pc}
   bb130:	2003e738 	.word	0x2003e738

000bb134 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb134:	4805      	ldr	r0, [pc, #20]	; (bb14c <_Z33system_initialize_user_backup_ramv+0x18>)
   bb136:	4a06      	ldr	r2, [pc, #24]	; (bb150 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb138:	4906      	ldr	r1, [pc, #24]	; (bb154 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb13a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb13c:	1a12      	subs	r2, r2, r0
   bb13e:	f000 fca7 	bl	bba90 <memcpy>
    __backup_sram_signature = signature;
   bb142:	4b05      	ldr	r3, [pc, #20]	; (bb158 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb144:	4a05      	ldr	r2, [pc, #20]	; (bb15c <_Z33system_initialize_user_backup_ramv+0x28>)
   bb146:	601a      	str	r2, [r3, #0]
}
   bb148:	bd08      	pop	{r3, pc}
   bb14a:	bf00      	nop
   bb14c:	2003f400 	.word	0x2003f400
   bb150:	2003f404 	.word	0x2003f404
   bb154:	000bdef8 	.word	0x000bdef8
   bb158:	2003f400 	.word	0x2003f400
   bb15c:	9a271c1e 	.word	0x9a271c1e

000bb160 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb160:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb162:	2300      	movs	r3, #0
   bb164:	9300      	str	r3, [sp, #0]
   bb166:	461a      	mov	r2, r3
   bb168:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb16c:	f7ff fbac 	bl	ba8c8 <system_ctrl_set_result>
}
   bb170:	b003      	add	sp, #12
   bb172:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb178 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb178:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb17a:	8843      	ldrh	r3, [r0, #2]
   bb17c:	2b0a      	cmp	r3, #10
   bb17e:	d008      	beq.n	bb192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb180:	2b50      	cmp	r3, #80	; 0x50
   bb182:	d10b      	bne.n	bb19c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb184:	4b09      	ldr	r3, [pc, #36]	; (bb1ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb186:	681b      	ldr	r3, [r3, #0]
   bb188:	b14b      	cbz	r3, bb19e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb18a:	b003      	add	sp, #12
   bb18c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb190:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb192:	f7ff ffe5 	bl	bb160 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb196:	b003      	add	sp, #12
   bb198:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb19c:	2300      	movs	r3, #0
   bb19e:	9300      	str	r3, [sp, #0]
   bb1a0:	461a      	mov	r2, r3
   bb1a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb1a6:	f7ff fb8f 	bl	ba8c8 <system_ctrl_set_result>
}
   bb1aa:	e7f4      	b.n	bb196 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb1ac:	2003e6f4 	.word	0x2003e6f4

000bb1b0 <module_user_init_hook>:
{
   bb1b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb1b2:	4812      	ldr	r0, [pc, #72]	; (bb1fc <module_user_init_hook+0x4c>)
   bb1b4:	2100      	movs	r1, #0
   bb1b6:	f7ff fc39 	bl	baa2c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb1ba:	4b11      	ldr	r3, [pc, #68]	; (bb200 <module_user_init_hook+0x50>)
   bb1bc:	681a      	ldr	r2, [r3, #0]
   bb1be:	4b11      	ldr	r3, [pc, #68]	; (bb204 <module_user_init_hook+0x54>)
   bb1c0:	429a      	cmp	r2, r3
   bb1c2:	4b11      	ldr	r3, [pc, #68]	; (bb208 <module_user_init_hook+0x58>)
   bb1c4:	bf0c      	ite	eq
   bb1c6:	2201      	moveq	r2, #1
   bb1c8:	2200      	movne	r2, #0
   bb1ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb1cc:	d001      	beq.n	bb1d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb1ce:	f7ff ffb1 	bl	bb134 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb1d2:	f7ff f9f7 	bl	ba5c4 <HAL_RNG_GetRandomNumber>
   bb1d6:	4604      	mov	r4, r0
    srand(seed);
   bb1d8:	f000 fc80 	bl	bbadc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb1dc:	4b0b      	ldr	r3, [pc, #44]	; (bb20c <module_user_init_hook+0x5c>)
   bb1de:	b113      	cbz	r3, bb1e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb1e0:	4620      	mov	r0, r4
   bb1e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb1e6:	2100      	movs	r1, #0
   bb1e8:	4808      	ldr	r0, [pc, #32]	; (bb20c <module_user_init_hook+0x5c>)
   bb1ea:	f7ff fbd7 	bl	ba99c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb1f2:	4807      	ldr	r0, [pc, #28]	; (bb210 <module_user_init_hook+0x60>)
   bb1f4:	2100      	movs	r1, #0
   bb1f6:	f7ff bb5d 	b.w	ba8b4 <system_ctrl_set_app_request_handler>
   bb1fa:	bf00      	nop
   bb1fc:	000bb0dd 	.word	0x000bb0dd
   bb200:	2003f400 	.word	0x2003f400
   bb204:	9a271c1e 	.word	0x9a271c1e
   bb208:	2003e6f0 	.word	0x2003e6f0
   bb20c:	00000000 	.word	0x00000000
   bb210:	000bb179 	.word	0x000bb179

000bb214 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb216:	230c      	movs	r3, #12
   bb218:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb21c:	6803      	ldr	r3, [r0, #0]
   bb21e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb222:	7a03      	ldrb	r3, [r0, #8]
   bb224:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb228:	6843      	ldr	r3, [r0, #4]
   bb22a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb22c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb22e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb230:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb234:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb236:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb23a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb23e:	f7ff fbb5 	bl	ba9ac <spark_cloud_disconnect>
}
   bb242:	b005      	add	sp, #20
   bb244:	f85d fb04 	ldr.w	pc, [sp], #4

000bb248 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bb248:	4770      	bx	lr

000bb24a <_ZN9IPAddressD0Ev>:
   bb24a:	b510      	push	{r4, lr}
   bb24c:	2118      	movs	r1, #24
   bb24e:	4604      	mov	r4, r0
   bb250:	f7f9 fbf9 	bl	b4a46 <_ZdlPvj>
   bb254:	4620      	mov	r0, r4
   bb256:	bd10      	pop	{r4, pc}

000bb258 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bb258:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bb25a:	7d03      	ldrb	r3, [r0, #20]
   bb25c:	2b06      	cmp	r3, #6
{
   bb25e:	b08d      	sub	sp, #52	; 0x34
   bb260:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb262:	f100 0704 	add.w	r7, r0, #4
   bb266:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bb26a:	d012      	beq.n	bb292 <_ZNK9IPAddress7printToER5Print+0x3a>
   bb26c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bb270:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bb274:	220a      	movs	r2, #10
   bb276:	4630      	mov	r0, r6
   bb278:	f7ff fe77 	bl	baf6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bb27c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bb27e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bb280:	d019      	beq.n	bb2b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bb282:	2c00      	cmp	r4, #0
   bb284:	d0f4      	beq.n	bb270 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bb286:	212e      	movs	r1, #46	; 0x2e
   bb288:	4630      	mov	r0, r6
   bb28a:	f7ff fe55 	bl	baf38 <_ZN5Print5printEc>
   bb28e:	4404      	add	r4, r0
   bb290:	e7ee      	b.n	bb270 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb292:	232f      	movs	r3, #47	; 0x2f
   bb294:	466a      	mov	r2, sp
   bb296:	4639      	mov	r1, r7
   bb298:	200a      	movs	r0, #10
		buf[0] = 0;
   bb29a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb29e:	f7ff f9c9 	bl	ba634 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bb2a2:	4668      	mov	r0, sp
   bb2a4:	f7f9 fb8a 	bl	b49bc <strlen>
   bb2a8:	6833      	ldr	r3, [r6, #0]
   bb2aa:	4602      	mov	r2, r0
   bb2ac:	68db      	ldr	r3, [r3, #12]
   bb2ae:	4669      	mov	r1, sp
   bb2b0:	4630      	mov	r0, r6
   bb2b2:	4798      	blx	r3
   bb2b4:	4604      	mov	r4, r0
    }
    return n;
}
   bb2b6:	4620      	mov	r0, r4
   bb2b8:	b00d      	add	sp, #52	; 0x34
   bb2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb2bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bb2bc:	b510      	push	{r4, lr}
   bb2be:	4b05      	ldr	r3, [pc, #20]	; (bb2d4 <_ZN9IPAddressC1Ev+0x18>)
   bb2c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bb2c2:	2211      	movs	r2, #17
   bb2c4:	f840 3b04 	str.w	r3, [r0], #4
   bb2c8:	2100      	movs	r1, #0
   bb2ca:	f000 fbef 	bl	bbaac <memset>
}
   bb2ce:	4620      	mov	r0, r4
   bb2d0:	bd10      	pop	{r4, pc}
   bb2d2:	bf00      	nop
   bb2d4:	000bdbd4 	.word	0x000bdbd4

000bb2d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bb2d8:	4603      	mov	r3, r0
   bb2da:	4a07      	ldr	r2, [pc, #28]	; (bb2f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bb2dc:	b510      	push	{r4, lr}
   bb2de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bb2e2:	f101 0210 	add.w	r2, r1, #16
   bb2e6:	f851 4b04 	ldr.w	r4, [r1], #4
   bb2ea:	f843 4b04 	str.w	r4, [r3], #4
   bb2ee:	4291      	cmp	r1, r2
   bb2f0:	d1f9      	bne.n	bb2e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bb2f2:	780a      	ldrb	r2, [r1, #0]
   bb2f4:	701a      	strb	r2, [r3, #0]
}
   bb2f6:	bd10      	pop	{r4, pc}
   bb2f8:	000bdbd4 	.word	0x000bdbd4

000bb2fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bb2fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bb2fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bb302:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bb306:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bb30a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bb30e:	2304      	movs	r3, #4
   bb310:	6041      	str	r1, [r0, #4]
   bb312:	7503      	strb	r3, [r0, #20]
}
   bb314:	bd10      	pop	{r4, pc}
	...

000bb318 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bb318:	b507      	push	{r0, r1, r2, lr}
   bb31a:	4b06      	ldr	r3, [pc, #24]	; (bb334 <_ZN9IPAddressC1EPKh+0x1c>)
   bb31c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bb31e:	78cb      	ldrb	r3, [r1, #3]
   bb320:	9300      	str	r3, [sp, #0]
   bb322:	788b      	ldrb	r3, [r1, #2]
   bb324:	784a      	ldrb	r2, [r1, #1]
   bb326:	7809      	ldrb	r1, [r1, #0]
   bb328:	f7ff ffe8 	bl	bb2fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bb32c:	b003      	add	sp, #12
   bb32e:	f85d fb04 	ldr.w	pc, [sp], #4
   bb332:	bf00      	nop
   bb334:	000bdbd4 	.word	0x000bdbd4

000bb338 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb338:	7441      	strb	r1, [r0, #17]
}
   bb33a:	4770      	bx	lr

000bb33c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb33c:	4770      	bx	lr

000bb33e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb33e:	4770      	bx	lr

000bb340 <_ZN9USBSerial4readEv>:
{
   bb340:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb342:	2100      	movs	r1, #0
   bb344:	7c00      	ldrb	r0, [r0, #16]
   bb346:	f7ff fa85 	bl	ba854 <HAL_USB_USART_Receive_Data>
}
   bb34a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb34e:	bd08      	pop	{r3, pc}

000bb350 <_ZN9USBSerial4peekEv>:
{
   bb350:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb352:	2101      	movs	r1, #1
   bb354:	7c00      	ldrb	r0, [r0, #16]
   bb356:	f7ff fa7d 	bl	ba854 <HAL_USB_USART_Receive_Data>
}
   bb35a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb35e:	bd08      	pop	{r3, pc}

000bb360 <_ZN9USBSerial17availableForWriteEv>:
{
   bb360:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb362:	7c00      	ldrb	r0, [r0, #16]
   bb364:	f7ff fa6e 	bl	ba844 <HAL_USB_USART_Available_Data_For_Write>
}
   bb368:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb36c:	bd08      	pop	{r3, pc}

000bb36e <_ZN9USBSerial9availableEv>:
{
   bb36e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb370:	7c00      	ldrb	r0, [r0, #16]
   bb372:	f7ff fa5f 	bl	ba834 <HAL_USB_USART_Available_Data>
}
   bb376:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb37a:	bd08      	pop	{r3, pc}

000bb37c <_ZN9USBSerial5writeEh>:
{
   bb37c:	b513      	push	{r0, r1, r4, lr}
   bb37e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb380:	7c00      	ldrb	r0, [r0, #16]
{
   bb382:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb384:	f7ff fa5e 	bl	ba844 <HAL_USB_USART_Available_Data_For_Write>
   bb388:	2800      	cmp	r0, #0
   bb38a:	9901      	ldr	r1, [sp, #4]
   bb38c:	dc01      	bgt.n	bb392 <_ZN9USBSerial5writeEh+0x16>
   bb38e:	7c60      	ldrb	r0, [r4, #17]
   bb390:	b120      	cbz	r0, bb39c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb392:	7c20      	ldrb	r0, [r4, #16]
   bb394:	f7ff fa66 	bl	ba864 <HAL_USB_USART_Send_Data>
   bb398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb39c:	b002      	add	sp, #8
   bb39e:	bd10      	pop	{r4, pc}

000bb3a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb3a0:	7c00      	ldrb	r0, [r0, #16]
   bb3a2:	f7ff ba67 	b.w	ba874 <HAL_USB_USART_Flush_Data>

000bb3a6 <_ZN9USBSerialD0Ev>:
   bb3a6:	b510      	push	{r4, lr}
   bb3a8:	2114      	movs	r1, #20
   bb3aa:	4604      	mov	r4, r0
   bb3ac:	f7f9 fb4b 	bl	b4a46 <_ZdlPvj>
   bb3b0:	4620      	mov	r0, r4
   bb3b2:	bd10      	pop	{r4, pc}

000bb3b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb3b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb3b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb3ba:	4604      	mov	r4, r0
   bb3bc:	4608      	mov	r0, r1
   bb3be:	2100      	movs	r1, #0
   bb3c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb3c4:	4b04      	ldr	r3, [pc, #16]	; (bb3d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb3c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb3c8:	2301      	movs	r3, #1
  _serial = serial;
   bb3ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb3cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb3ce:	4611      	mov	r1, r2
   bb3d0:	f7ff fa20 	bl	ba814 <HAL_USB_USART_Init>
}
   bb3d4:	4620      	mov	r0, r4
   bb3d6:	bd10      	pop	{r4, pc}
   bb3d8:	000bdbe8 	.word	0x000bdbe8

000bb3dc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb3dc:	7c00      	ldrb	r0, [r0, #16]
   bb3de:	2200      	movs	r2, #0
   bb3e0:	f7ff ba20 	b.w	ba824 <HAL_USB_USART_Begin>

000bb3e4 <_Z19acquireSerialBufferv>:
{
   bb3e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb3e6:	2214      	movs	r2, #20
{
   bb3e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb3ea:	2100      	movs	r1, #0
   bb3ec:	f000 fb5e 	bl	bbaac <memset>
}
   bb3f0:	4620      	mov	r0, r4
   bb3f2:	bd10      	pop	{r4, pc}

000bb3f4 <_Z16_fetch_usbserialv>:
{
   bb3f4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb3f6:	4c0f      	ldr	r4, [pc, #60]	; (bb434 <_Z16_fetch_usbserialv+0x40>)
{
   bb3f8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb3fa:	a803      	add	r0, sp, #12
   bb3fc:	f7ff fff2 	bl	bb3e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb400:	7821      	ldrb	r1, [r4, #0]
   bb402:	f3bf 8f5b 	dmb	ish
   bb406:	f011 0101 	ands.w	r1, r1, #1
   bb40a:	d10f      	bne.n	bb42c <_Z16_fetch_usbserialv+0x38>
   bb40c:	4620      	mov	r0, r4
   bb40e:	9101      	str	r1, [sp, #4]
   bb410:	f7f9 fb28 	bl	b4a64 <__cxa_guard_acquire>
   bb414:	9901      	ldr	r1, [sp, #4]
   bb416:	b148      	cbz	r0, bb42c <_Z16_fetch_usbserialv+0x38>
   bb418:	aa03      	add	r2, sp, #12
   bb41a:	4807      	ldr	r0, [pc, #28]	; (bb438 <_Z16_fetch_usbserialv+0x44>)
   bb41c:	f7ff ffca 	bl	bb3b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb420:	4620      	mov	r0, r4
   bb422:	f7f9 fb24 	bl	b4a6e <__cxa_guard_release>
   bb426:	4805      	ldr	r0, [pc, #20]	; (bb43c <_Z16_fetch_usbserialv+0x48>)
   bb428:	f000 fb24 	bl	bba74 <atexit>
	return _usbserial;
}
   bb42c:	4802      	ldr	r0, [pc, #8]	; (bb438 <_Z16_fetch_usbserialv+0x44>)
   bb42e:	b008      	add	sp, #32
   bb430:	bd10      	pop	{r4, pc}
   bb432:	bf00      	nop
   bb434:	2003e6f8 	.word	0x2003e6f8
   bb438:	2003e6fc 	.word	0x2003e6fc
   bb43c:	000bb33d 	.word	0x000bb33d

000bb440 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   bb440:	f7ff b8a0 	b.w	ba584 <hal_interrupt_disable_all>

000bb444 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   bb444:	f7ff b896 	b.w	ba574 <hal_interrupt_enable_all>

000bb448 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   bb448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb44a:	b287      	uxth	r7, r0
{
   bb44c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb44e:	4638      	mov	r0, r7
{
   bb450:	460d      	mov	r5, r1
   bb452:	4616      	mov	r6, r2
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb454:	f000 f9c6 	bl	bb7e4 <pinAvailable>
   bb458:	b160      	cbz	r0, bb474 <tone+0x2c>
   bb45a:	2102      	movs	r1, #2
   bb45c:	4638      	mov	r0, r7
   bb45e:	f7ff f861 	bl	ba524 <hal_pin_validate_function>
   bb462:	2802      	cmp	r0, #2
   bb464:	d106      	bne.n	bb474 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   bb466:	4632      	mov	r2, r6
   bb468:	4629      	mov	r1, r5
   bb46a:	4620      	mov	r0, r4
    }
}
   bb46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   bb470:	f7ff b9c0 	b.w	ba7f4 <HAL_Tone_Start>
}
   bb474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb476 <noTone>:

void noTone(uint8_t pin)
{
   bb476:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb478:	b285      	uxth	r5, r0
{
   bb47a:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb47c:	4628      	mov	r0, r5
   bb47e:	f000 f9b1 	bl	bb7e4 <pinAvailable>
   bb482:	b150      	cbz	r0, bb49a <noTone+0x24>
   bb484:	2102      	movs	r1, #2
   bb486:	4628      	mov	r0, r5
   bb488:	f7ff f84c 	bl	ba524 <hal_pin_validate_function>
   bb48c:	2802      	cmp	r0, #2
   bb48e:	d104      	bne.n	bb49a <noTone+0x24>
        HAL_Tone_Stop(pin);
   bb490:	4620      	mov	r0, r4
    }
}
   bb492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   bb496:	f7ff b9b5 	b.w	ba804 <HAL_Tone_Stop>
}
   bb49a:	bd38      	pop	{r3, r4, r5, pc}

000bb49c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb49c:	4770      	bx	lr

000bb49e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb49e:	7441      	strb	r1, [r0, #17]
}
   bb4a0:	4770      	bx	lr

000bb4a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb4a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb4a4:	7c00      	ldrb	r0, [r0, #16]
   bb4a6:	f7ff f8fd 	bl	ba6a4 <hal_usart_available_data_for_write>
}
   bb4aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb4ae:	bd08      	pop	{r3, pc}

000bb4b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb4b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb4b2:	7c00      	ldrb	r0, [r0, #16]
   bb4b4:	f7ff f8ce 	bl	ba654 <hal_usart_available>
}
   bb4b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb4bc:	bd08      	pop	{r3, pc}

000bb4be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb4be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb4c0:	7c00      	ldrb	r0, [r0, #16]
   bb4c2:	f7ff f8d7 	bl	ba674 <hal_usart_peek>
}
   bb4c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb4ca:	bd08      	pop	{r3, pc}

000bb4cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb4cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb4ce:	7c00      	ldrb	r0, [r0, #16]
   bb4d0:	f7ff f8c8 	bl	ba664 <hal_usart_read>
}
   bb4d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb4d8:	bd08      	pop	{r3, pc}

000bb4da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb4da:	7c00      	ldrb	r0, [r0, #16]
   bb4dc:	f7ff b8d2 	b.w	ba684 <hal_usart_flush>

000bb4e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb4e2:	7c45      	ldrb	r5, [r0, #17]
{
   bb4e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb4e6:	b12d      	cbz	r5, bb4f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb4e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb4ea:	b003      	add	sp, #12
   bb4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb4f0:	f7ff b8a8 	b.w	ba644 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb4f4:	7c00      	ldrb	r0, [r0, #16]
   bb4f6:	9101      	str	r1, [sp, #4]
   bb4f8:	f7ff f8d4 	bl	ba6a4 <hal_usart_available_data_for_write>
   bb4fc:	2800      	cmp	r0, #0
   bb4fe:	9901      	ldr	r1, [sp, #4]
   bb500:	dcf2      	bgt.n	bb4e8 <_ZN11USARTSerial5writeEh+0x8>
}
   bb502:	4628      	mov	r0, r5
   bb504:	b003      	add	sp, #12
   bb506:	bd30      	pop	{r4, r5, pc}

000bb508 <_ZN11USARTSerialD0Ev>:
   bb508:	b510      	push	{r4, lr}
   bb50a:	2114      	movs	r1, #20
   bb50c:	4604      	mov	r4, r0
   bb50e:	f7f9 fa9a 	bl	b4a46 <_ZdlPvj>
   bb512:	4620      	mov	r0, r4
   bb514:	bd10      	pop	{r4, pc}
	...

000bb518 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb518:	b510      	push	{r4, lr}
   bb51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb51e:	4604      	mov	r4, r0
   bb520:	4608      	mov	r0, r1
   bb522:	4611      	mov	r1, r2
   bb524:	2200      	movs	r2, #0
   bb526:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb52a:	4b04      	ldr	r3, [pc, #16]	; (bb53c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb52c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb52e:	2301      	movs	r3, #1
  _serial = serial;
   bb530:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb532:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb534:	f7ff f8be 	bl	ba6b4 <hal_usart_init_ex>
}
   bb538:	4620      	mov	r0, r4
   bb53a:	bd10      	pop	{r4, pc}
   bb53c:	000bdc18 	.word	0x000bdc18

000bb540 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb540:	4770      	bx	lr

000bb542 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb544:	4606      	mov	r6, r0
   bb546:	4615      	mov	r5, r2
   bb548:	460c      	mov	r4, r1
   bb54a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb54c:	42bc      	cmp	r4, r7
   bb54e:	d006      	beq.n	bb55e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb550:	6833      	ldr	r3, [r6, #0]
   bb552:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb556:	689b      	ldr	r3, [r3, #8]
   bb558:	4630      	mov	r0, r6
   bb55a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb55c:	e7f6      	b.n	bb54c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb55e:	4628      	mov	r0, r5
   bb560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb562 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb562:	7c00      	ldrb	r0, [r0, #16]
   bb564:	2200      	movs	r2, #0
   bb566:	f7ff b8cd 	b.w	ba704 <hal_i2c_write>

000bb56a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb56a:	7c00      	ldrb	r0, [r0, #16]
   bb56c:	2100      	movs	r1, #0
   bb56e:	f7ff b8d1 	b.w	ba714 <hal_i2c_available>

000bb572 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb572:	7c00      	ldrb	r0, [r0, #16]
   bb574:	2100      	movs	r1, #0
   bb576:	f7ff b8d5 	b.w	ba724 <hal_i2c_read>

000bb57a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb57a:	7c00      	ldrb	r0, [r0, #16]
   bb57c:	2100      	movs	r1, #0
   bb57e:	f7ff b8d9 	b.w	ba734 <hal_i2c_peek>

000bb582 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb582:	7c00      	ldrb	r0, [r0, #16]
   bb584:	2100      	movs	r1, #0
   bb586:	f7ff b8dd 	b.w	ba744 <hal_i2c_flush>

000bb58a <_ZN7TwoWireD0Ev>:
   bb58a:	b510      	push	{r4, lr}
   bb58c:	2114      	movs	r1, #20
   bb58e:	4604      	mov	r4, r0
   bb590:	f7f9 fa59 	bl	b4a46 <_ZdlPvj>
   bb594:	4620      	mov	r0, r4
   bb596:	bd10      	pop	{r4, pc}

000bb598 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb598:	b538      	push	{r3, r4, r5, lr}
   bb59a:	4604      	mov	r4, r0
   bb59c:	4615      	mov	r5, r2
   bb59e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb5a2:	2200      	movs	r2, #0
   bb5a4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb5a8:	4b09      	ldr	r3, [pc, #36]	; (bb5d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bb5aa:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb5ac:	4608      	mov	r0, r1
   bb5ae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bb5b0:	4629      	mov	r1, r5
   bb5b2:	f7ff f8d7 	bl	ba764 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb5b6:	30bf      	adds	r0, #191	; 0xbf
   bb5b8:	d108      	bne.n	bb5cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bb5ba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb5bc:	07db      	lsls	r3, r3, #31
   bb5be:	d505      	bpl.n	bb5cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bb5c0:	6868      	ldr	r0, [r5, #4]
   bb5c2:	f7ff fa03 	bl	ba9cc <free>
    free(conf.tx_buffer);
   bb5c6:	68e8      	ldr	r0, [r5, #12]
   bb5c8:	f7ff fa00 	bl	ba9cc <free>
}
   bb5cc:	4620      	mov	r0, r4
   bb5ce:	bd38      	pop	{r3, r4, r5, pc}
   bb5d0:	000bdc48 	.word	0x000bdc48

000bb5d4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bb5d4:	7c00      	ldrb	r0, [r0, #16]
   bb5d6:	2200      	movs	r2, #0
   bb5d8:	f7ff b874 	b.w	ba6c4 <hal_i2c_set_speed>

000bb5dc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb5dc:	2300      	movs	r3, #0
   bb5de:	7c00      	ldrb	r0, [r0, #16]
   bb5e0:	461a      	mov	r2, r3
   bb5e2:	4619      	mov	r1, r3
   bb5e4:	f7ff b876 	b.w	ba6d4 <hal_i2c_begin>

000bb5e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb5e8:	7c00      	ldrb	r0, [r0, #16]
   bb5ea:	2200      	movs	r2, #0
   bb5ec:	f7ff b87a 	b.w	ba6e4 <hal_i2c_begin_transmission>

000bb5f0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb5f0:	b2c9      	uxtb	r1, r1
   bb5f2:	f7ff bff9 	b.w	bb5e8 <_ZN7TwoWire17beginTransmissionEh>

000bb5f6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb5f6:	7c00      	ldrb	r0, [r0, #16]
   bb5f8:	2200      	movs	r2, #0
   bb5fa:	f7ff b87b 	b.w	ba6f4 <hal_i2c_end_transmission>

000bb5fe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb5fe:	2101      	movs	r1, #1
   bb600:	f7ff bff9 	b.w	bb5f6 <_ZN7TwoWire15endTransmissionEh>

000bb604 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb604:	2200      	movs	r2, #0
   bb606:	6840      	ldr	r0, [r0, #4]
   bb608:	4611      	mov	r1, r2
   bb60a:	f7ff b97f 	b.w	ba90c <network_ready>

000bb60e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb60e:	2200      	movs	r2, #0
   bb610:	6840      	ldr	r0, [r0, #4]
   bb612:	4611      	mov	r1, r2
   bb614:	f7ff b99a 	b.w	ba94c <network_listening>

000bb618 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb618:	2200      	movs	r2, #0
   bb61a:	6840      	ldr	r0, [r0, #4]
   bb61c:	4611      	mov	r1, r2
   bb61e:	f7ff b9a5 	b.w	ba96c <network_get_listen_timeout>

000bb622 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb622:	6840      	ldr	r0, [r0, #4]
   bb624:	2200      	movs	r2, #0
   bb626:	f7ff b999 	b.w	ba95c <network_set_listen_timeout>

000bb62a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb62a:	6840      	ldr	r0, [r0, #4]
   bb62c:	2200      	movs	r2, #0
   bb62e:	f081 0101 	eor.w	r1, r1, #1
   bb632:	f7ff b983 	b.w	ba93c <network_listen>

000bb636 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb636:	2300      	movs	r3, #0
   bb638:	6840      	ldr	r0, [r0, #4]
   bb63a:	461a      	mov	r2, r3
   bb63c:	4619      	mov	r1, r3
   bb63e:	f7ff b975 	b.w	ba92c <network_off>

000bb642 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb642:	2300      	movs	r3, #0
   bb644:	6840      	ldr	r0, [r0, #4]
   bb646:	461a      	mov	r2, r3
   bb648:	4619      	mov	r1, r3
   bb64a:	f7ff b967 	b.w	ba91c <network_on>

000bb64e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb64e:	2200      	movs	r2, #0
   bb650:	6840      	ldr	r0, [r0, #4]
   bb652:	4611      	mov	r1, r2
   bb654:	f7ff b94a 	b.w	ba8ec <network_connecting>

000bb658 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb658:	6840      	ldr	r0, [r0, #4]
   bb65a:	2200      	movs	r2, #0
   bb65c:	2102      	movs	r1, #2
   bb65e:	f7ff b94d 	b.w	ba8fc <network_disconnect>

000bb662 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb662:	2300      	movs	r3, #0
   bb664:	6840      	ldr	r0, [r0, #4]
   bb666:	461a      	mov	r2, r3
   bb668:	f7ff b938 	b.w	ba8dc <network_connect>

000bb66c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb66c:	4b02      	ldr	r3, [pc, #8]	; (bb678 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb66e:	2204      	movs	r2, #4
   bb670:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb672:	4a02      	ldr	r2, [pc, #8]	; (bb67c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb674:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb676:	4770      	bx	lr
   bb678:	2003e710 	.word	0x2003e710
   bb67c:	000bdc70 	.word	0x000bdc70

000bb680 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb680:	2300      	movs	r3, #0
   bb682:	6840      	ldr	r0, [r0, #4]
   bb684:	461a      	mov	r2, r3
   bb686:	f7ff b929 	b.w	ba8dc <network_connect>

000bb68a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb68a:	6840      	ldr	r0, [r0, #4]
   bb68c:	2200      	movs	r2, #0
   bb68e:	2102      	movs	r1, #2
   bb690:	f7ff b934 	b.w	ba8fc <network_disconnect>

000bb694 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb694:	2200      	movs	r2, #0
   bb696:	6840      	ldr	r0, [r0, #4]
   bb698:	4611      	mov	r1, r2
   bb69a:	f7ff b927 	b.w	ba8ec <network_connecting>

000bb69e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb69e:	2200      	movs	r2, #0
   bb6a0:	6840      	ldr	r0, [r0, #4]
   bb6a2:	4611      	mov	r1, r2
   bb6a4:	f7ff b932 	b.w	ba90c <network_ready>

000bb6a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb6a8:	2300      	movs	r3, #0
   bb6aa:	6840      	ldr	r0, [r0, #4]
   bb6ac:	461a      	mov	r2, r3
   bb6ae:	4619      	mov	r1, r3
   bb6b0:	f7ff b934 	b.w	ba91c <network_on>

000bb6b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb6b4:	2300      	movs	r3, #0
   bb6b6:	6840      	ldr	r0, [r0, #4]
   bb6b8:	461a      	mov	r2, r3
   bb6ba:	4619      	mov	r1, r3
   bb6bc:	f7ff b936 	b.w	ba92c <network_off>

000bb6c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb6c0:	6840      	ldr	r0, [r0, #4]
   bb6c2:	2100      	movs	r1, #0
   bb6c4:	f7ff b95a 	b.w	ba97c <network_is_on>

000bb6c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb6c8:	6840      	ldr	r0, [r0, #4]
   bb6ca:	2100      	movs	r1, #0
   bb6cc:	f7ff b95e 	b.w	ba98c <network_is_off>

000bb6d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb6d0:	6840      	ldr	r0, [r0, #4]
   bb6d2:	2200      	movs	r2, #0
   bb6d4:	f081 0101 	eor.w	r1, r1, #1
   bb6d8:	f7ff b930 	b.w	ba93c <network_listen>

000bb6dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb6dc:	6840      	ldr	r0, [r0, #4]
   bb6de:	2200      	movs	r2, #0
   bb6e0:	f7ff b93c 	b.w	ba95c <network_set_listen_timeout>

000bb6e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb6e4:	2200      	movs	r2, #0
   bb6e6:	6840      	ldr	r0, [r0, #4]
   bb6e8:	4611      	mov	r1, r2
   bb6ea:	f7ff b93f 	b.w	ba96c <network_get_listen_timeout>

000bb6ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb6ee:	2200      	movs	r2, #0
   bb6f0:	6840      	ldr	r0, [r0, #4]
   bb6f2:	4611      	mov	r1, r2
   bb6f4:	f7ff b92a 	b.w	ba94c <network_listening>

000bb6f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb6fc:	b095      	sub	sp, #84	; 0x54
   bb6fe:	4614      	mov	r4, r2
   bb700:	460d      	mov	r5, r1
   bb702:	4607      	mov	r7, r0
    IPAddress addr;
   bb704:	f7ff fdda 	bl	bb2bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb708:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb70a:	221c      	movs	r2, #28
   bb70c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb70e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb710:	f000 f9cc 	bl	bbaac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb714:	2340      	movs	r3, #64	; 0x40
   bb716:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb718:	4620      	mov	r0, r4
   bb71a:	466b      	mov	r3, sp
   bb71c:	aa0c      	add	r2, sp, #48	; 0x30
   bb71e:	2100      	movs	r1, #0
   bb720:	f7fe fef8 	bl	ba514 <netdb_getaddrinfo>
    if (!r) {
   bb724:	4604      	mov	r4, r0
   bb726:	2800      	cmp	r0, #0
   bb728:	d14b      	bne.n	bb7c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb72a:	4602      	mov	r2, r0
   bb72c:	2101      	movs	r1, #1
   bb72e:	6868      	ldr	r0, [r5, #4]
   bb730:	f7ff f8ec 	bl	ba90c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb734:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb736:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb738:	4622      	mov	r2, r4
   bb73a:	6868      	ldr	r0, [r5, #4]
   bb73c:	f7ff f8e6 	bl	ba90c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb740:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb742:	4681      	mov	r9, r0
        bool ok = false;
   bb744:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb746:	2e00      	cmp	r6, #0
   bb748:	d03b      	beq.n	bb7c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb74a:	2900      	cmp	r1, #0
   bb74c:	d139      	bne.n	bb7c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb74e:	6873      	ldr	r3, [r6, #4]
   bb750:	2b02      	cmp	r3, #2
   bb752:	d003      	beq.n	bb75c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb754:	2b0a      	cmp	r3, #10
   bb756:	d011      	beq.n	bb77c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb758:	69f6      	ldr	r6, [r6, #28]
   bb75a:	e7f4      	b.n	bb746 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb75c:	f1b8 0f00 	cmp.w	r8, #0
   bb760:	d0fa      	beq.n	bb758 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb762:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb764:	a806      	add	r0, sp, #24
   bb766:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb768:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb76a:	f7ff fdd5 	bl	bb318 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb76e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb770:	1d3c      	adds	r4, r7, #4
   bb772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb774:	682b      	ldr	r3, [r5, #0]
   bb776:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb778:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb77a:	e7ed      	b.n	bb758 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb77c:	f1b9 0f00 	cmp.w	r9, #0
   bb780:	d0ea      	beq.n	bb758 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb782:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb784:	2210      	movs	r2, #16
   bb786:	a801      	add	r0, sp, #4
   bb788:	f000 f990 	bl	bbaac <memset>
                    a.v = 6;
   bb78c:	2306      	movs	r3, #6
   bb78e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb792:	ad01      	add	r5, sp, #4
   bb794:	f104 0308 	add.w	r3, r4, #8
   bb798:	3418      	adds	r4, #24
   bb79a:	6818      	ldr	r0, [r3, #0]
   bb79c:	6859      	ldr	r1, [r3, #4]
   bb79e:	462a      	mov	r2, r5
   bb7a0:	c203      	stmia	r2!, {r0, r1}
   bb7a2:	3308      	adds	r3, #8
   bb7a4:	42a3      	cmp	r3, r4
   bb7a6:	4615      	mov	r5, r2
   bb7a8:	d1f7      	bne.n	bb79a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb7aa:	a901      	add	r1, sp, #4
   bb7ac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb7ae:	ad07      	add	r5, sp, #28
   bb7b0:	f7ff fd92 	bl	bb2d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb7b6:	1d3c      	adds	r4, r7, #4
   bb7b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb7ba:	682b      	ldr	r3, [r5, #0]
   bb7bc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb7be:	4649      	mov	r1, r9
   bb7c0:	e7ca      	b.n	bb758 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb7c2:	9800      	ldr	r0, [sp, #0]
   bb7c4:	f7fe fe9e 	bl	ba504 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb7c8:	4638      	mov	r0, r7
   bb7ca:	b015      	add	sp, #84	; 0x54
   bb7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb7d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb7d0:	4b02      	ldr	r3, [pc, #8]	; (bb7dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb7d2:	4a03      	ldr	r2, [pc, #12]	; (bb7e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb7d4:	601a      	str	r2, [r3, #0]
   bb7d6:	2200      	movs	r2, #0
   bb7d8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb7da:	4770      	bx	lr
   bb7dc:	2003e718 	.word	0x2003e718
   bb7e0:	000bdcac 	.word	0x000bdcac

000bb7e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb7e4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb7e6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb7e8:	d902      	bls.n	bb7f0 <pinAvailable+0xc>
    return false;
   bb7ea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb7ec:	b002      	add	sp, #8
   bb7ee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb7f0:	f1a0 030b 	sub.w	r3, r0, #11
   bb7f4:	2b02      	cmp	r3, #2
   bb7f6:	d81a      	bhi.n	bb82e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb7f8:	4c17      	ldr	r4, [pc, #92]	; (bb858 <pinAvailable+0x74>)
   bb7fa:	7821      	ldrb	r1, [r4, #0]
   bb7fc:	f3bf 8f5b 	dmb	ish
   bb800:	f011 0101 	ands.w	r1, r1, #1
   bb804:	d10b      	bne.n	bb81e <pinAvailable+0x3a>
   bb806:	4620      	mov	r0, r4
   bb808:	9101      	str	r1, [sp, #4]
   bb80a:	f7f9 f92b 	bl	b4a64 <__cxa_guard_acquire>
   bb80e:	9901      	ldr	r1, [sp, #4]
   bb810:	b128      	cbz	r0, bb81e <pinAvailable+0x3a>
   bb812:	4812      	ldr	r0, [pc, #72]	; (bb85c <pinAvailable+0x78>)
   bb814:	f7ff f956 	bl	baac4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb818:	4620      	mov	r0, r4
   bb81a:	f7f9 f928 	bl	b4a6e <__cxa_guard_release>
   bb81e:	4b0f      	ldr	r3, [pc, #60]	; (bb85c <pinAvailable+0x78>)
   bb820:	7818      	ldrb	r0, [r3, #0]
   bb822:	f7fe ffbf 	bl	ba7a4 <hal_spi_is_enabled>
   bb826:	2800      	cmp	r0, #0
   bb828:	d1df      	bne.n	bb7ea <pinAvailable+0x6>
  return true; // 'pin' is available
   bb82a:	2001      	movs	r0, #1
   bb82c:	e7de      	b.n	bb7ec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb82e:	2801      	cmp	r0, #1
   bb830:	d809      	bhi.n	bb846 <pinAvailable+0x62>
   bb832:	f000 f8f9 	bl	bba28 <_Z19__fetch_global_Wirev>
   bb836:	2100      	movs	r1, #0
   bb838:	7c00      	ldrb	r0, [r0, #16]
   bb83a:	f7fe ff8b 	bl	ba754 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb83e:	f080 0001 	eor.w	r0, r0, #1
   bb842:	b2c0      	uxtb	r0, r0
   bb844:	e7d2      	b.n	bb7ec <pinAvailable+0x8>
   bb846:	3809      	subs	r0, #9
   bb848:	2801      	cmp	r0, #1
   bb84a:	d8ee      	bhi.n	bb82a <pinAvailable+0x46>
   bb84c:	f000 f896 	bl	bb97c <_Z22__fetch_global_Serial1v>
   bb850:	7c00      	ldrb	r0, [r0, #16]
   bb852:	f7fe ff1f 	bl	ba694 <hal_usart_is_enabled>
   bb856:	e7f2      	b.n	bb83e <pinAvailable+0x5a>
   bb858:	2003c71c 	.word	0x2003c71c
   bb85c:	2003c720 	.word	0x2003c720

000bb860 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb860:	2823      	cmp	r0, #35	; 0x23
{
   bb862:	b538      	push	{r3, r4, r5, lr}
   bb864:	4604      	mov	r4, r0
   bb866:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb868:	d80a      	bhi.n	bb880 <pinMode+0x20>
   bb86a:	29ff      	cmp	r1, #255	; 0xff
   bb86c:	d008      	beq.n	bb880 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb86e:	f7ff ffb9 	bl	bb7e4 <pinAvailable>
   bb872:	b128      	cbz	r0, bb880 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bb874:	4629      	mov	r1, r5
   bb876:	4620      	mov	r0, r4
}
   bb878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bb87c:	f7fe be5a 	b.w	ba534 <hal_gpio_mode>
}
   bb880:	bd38      	pop	{r3, r4, r5, pc}

000bb882 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bb882:	b538      	push	{r3, r4, r5, lr}
   bb884:	4604      	mov	r4, r0
   bb886:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bb888:	f7fe fe5c 	bl	ba544 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb88c:	28ff      	cmp	r0, #255	; 0xff
   bb88e:	d010      	beq.n	bb8b2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb890:	2806      	cmp	r0, #6
   bb892:	d804      	bhi.n	bb89e <digitalWrite+0x1c>
   bb894:	234d      	movs	r3, #77	; 0x4d
   bb896:	fa23 f000 	lsr.w	r0, r3, r0
   bb89a:	07c3      	lsls	r3, r0, #31
   bb89c:	d409      	bmi.n	bb8b2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb89e:	4620      	mov	r0, r4
   bb8a0:	f7ff ffa0 	bl	bb7e4 <pinAvailable>
   bb8a4:	b128      	cbz	r0, bb8b2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bb8a6:	4629      	mov	r1, r5
   bb8a8:	4620      	mov	r0, r4
}
   bb8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bb8ae:	f7fe be51 	b.w	ba554 <hal_gpio_write>
}
   bb8b2:	bd38      	pop	{r3, r4, r5, pc}

000bb8b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bb8b4:	b510      	push	{r4, lr}
   bb8b6:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bb8b8:	f7fe fe44 	bl	ba544 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb8bc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb8be:	b2db      	uxtb	r3, r3
   bb8c0:	2b01      	cmp	r3, #1
   bb8c2:	d908      	bls.n	bb8d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb8c4:	4620      	mov	r0, r4
   bb8c6:	f7ff ff8d 	bl	bb7e4 <pinAvailable>
   bb8ca:	b120      	cbz	r0, bb8d6 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bb8cc:	4620      	mov	r0, r4
}
   bb8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bb8d2:	f7fe be47 	b.w	ba564 <hal_gpio_read>
}
   bb8d6:	2000      	movs	r0, #0
   bb8d8:	bd10      	pop	{r4, pc}

000bb8da <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb8da:	280d      	cmp	r0, #13
{
   bb8dc:	b510      	push	{r4, lr}
   bb8de:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb8e0:	bf9c      	itt	ls
   bb8e2:	340e      	addls	r4, #14
   bb8e4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bb8e6:	4620      	mov	r0, r4
   bb8e8:	f7ff ff7c 	bl	bb7e4 <pinAvailable>
   bb8ec:	b150      	cbz	r0, bb904 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bb8ee:	2103      	movs	r1, #3
   bb8f0:	4620      	mov	r0, r4
   bb8f2:	f7fe fe17 	bl	ba524 <hal_pin_validate_function>
   bb8f6:	2803      	cmp	r0, #3
   bb8f8:	d104      	bne.n	bb904 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb8fa:	4620      	mov	r0, r4
}
   bb8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb900:	f7fe be48 	b.w	ba594 <hal_adc_read>
}
   bb904:	2000      	movs	r0, #0
   bb906:	bd10      	pop	{r4, pc}

000bb908 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   bb908:	b570      	push	{r4, r5, r6, lr}
   bb90a:	4604      	mov	r4, r0
   bb90c:	460d      	mov	r5, r1
   bb90e:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   bb910:	f7ff ff68 	bl	bb7e4 <pinAvailable>
   bb914:	b198      	cbz	r0, bb93e <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bb916:	2102      	movs	r1, #2
   bb918:	4620      	mov	r0, r4
   bb91a:	f7fe fe03 	bl	ba524 <hal_pin_validate_function>
   bb91e:	2802      	cmp	r0, #2
   bb920:	d10d      	bne.n	bb93e <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   bb922:	4620      	mov	r0, r4
   bb924:	f7fe fe0e 	bl	ba544 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bb928:	2801      	cmp	r0, #1
   bb92a:	d001      	beq.n	bb930 <_Z11analogWritetmm+0x28>
   bb92c:	2804      	cmp	r0, #4
   bb92e:	d106      	bne.n	bb93e <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb930:	4632      	mov	r2, r6
   bb932:	4629      	mov	r1, r5
   bb934:	4620      	mov	r0, r4
    }
}
   bb936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb93a:	f7fe be3b 	b.w	ba5b4 <hal_pwm_write_with_frequency_ext>
}
   bb93e:	bd70      	pop	{r4, r5, r6, pc}

000bb940 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   bb940:	f7fe be30 	b.w	ba5a4 <hal_gpio_pulse_in>

000bb944 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb944:	4770      	bx	lr
	...

000bb948 <_Z20acquireSerial1Bufferv>:
{
   bb948:	b538      	push	{r3, r4, r5, lr}
   bb94a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb94c:	2514      	movs	r5, #20
   bb94e:	462a      	mov	r2, r5
   bb950:	2100      	movs	r1, #0
   bb952:	f000 f8ab 	bl	bbaac <memset>
   bb956:	8025      	strh	r5, [r4, #0]
   bb958:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb95a:	4907      	ldr	r1, [pc, #28]	; (bb978 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb95c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb95e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb960:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb962:	f000 f885 	bl	bba70 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb966:	4904      	ldr	r1, [pc, #16]	; (bb978 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb968:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb96a:	4628      	mov	r0, r5
   bb96c:	f000 f880 	bl	bba70 <_ZnajRKSt9nothrow_t>
    };
   bb970:	60e0      	str	r0, [r4, #12]
}
   bb972:	4620      	mov	r0, r4
   bb974:	bd38      	pop	{r3, r4, r5, pc}
   bb976:	bf00      	nop
   bb978:	000bdce0 	.word	0x000bdce0

000bb97c <_Z22__fetch_global_Serial1v>:
{
   bb97c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb97e:	4d0e      	ldr	r5, [pc, #56]	; (bb9b8 <_Z22__fetch_global_Serial1v+0x3c>)
   bb980:	7829      	ldrb	r1, [r5, #0]
   bb982:	f3bf 8f5b 	dmb	ish
   bb986:	f011 0401 	ands.w	r4, r1, #1
{
   bb98a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb98c:	d111      	bne.n	bb9b2 <_Z22__fetch_global_Serial1v+0x36>
   bb98e:	4628      	mov	r0, r5
   bb990:	f7f9 f868 	bl	b4a64 <__cxa_guard_acquire>
   bb994:	b168      	cbz	r0, bb9b2 <_Z22__fetch_global_Serial1v+0x36>
   bb996:	a801      	add	r0, sp, #4
   bb998:	f7ff ffd6 	bl	bb948 <_Z20acquireSerial1Bufferv>
   bb99c:	aa01      	add	r2, sp, #4
   bb99e:	4621      	mov	r1, r4
   bb9a0:	4806      	ldr	r0, [pc, #24]	; (bb9bc <_Z22__fetch_global_Serial1v+0x40>)
   bb9a2:	f7ff fdb9 	bl	bb518 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb9a6:	4628      	mov	r0, r5
   bb9a8:	f7f9 f861 	bl	b4a6e <__cxa_guard_release>
   bb9ac:	4804      	ldr	r0, [pc, #16]	; (bb9c0 <_Z22__fetch_global_Serial1v+0x44>)
   bb9ae:	f000 f861 	bl	bba74 <atexit>
    return serial1;
}
   bb9b2:	4802      	ldr	r0, [pc, #8]	; (bb9bc <_Z22__fetch_global_Serial1v+0x40>)
   bb9b4:	b007      	add	sp, #28
   bb9b6:	bd30      	pop	{r4, r5, pc}
   bb9b8:	2003e720 	.word	0x2003e720
   bb9bc:	2003e724 	.word	0x2003e724
   bb9c0:	000bb945 	.word	0x000bb945

000bb9c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   bb9c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   bb9c6:	4c08      	ldr	r4, [pc, #32]	; (bb9e8 <_Z21__fetch_global_EEPROMv+0x24>)
   bb9c8:	7823      	ldrb	r3, [r4, #0]
   bb9ca:	f3bf 8f5b 	dmb	ish
   bb9ce:	07db      	lsls	r3, r3, #31
   bb9d0:	d408      	bmi.n	bb9e4 <_Z21__fetch_global_EEPROMv+0x20>
   bb9d2:	4620      	mov	r0, r4
   bb9d4:	f7f9 f846 	bl	b4a64 <__cxa_guard_acquire>
   bb9d8:	b120      	cbz	r0, bb9e4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   bb9da:	f7fe fe0b 	bl	ba5f4 <HAL_EEPROM_Init>
   bb9de:	4620      	mov	r0, r4
   bb9e0:	f7f9 f845 	bl	b4a6e <__cxa_guard_release>
	return eeprom;
}
   bb9e4:	4801      	ldr	r0, [pc, #4]	; (bb9ec <_Z21__fetch_global_EEPROMv+0x28>)
   bb9e6:	bd10      	pop	{r4, pc}
   bb9e8:	2003e73c 	.word	0x2003e73c
   bb9ec:	2003e740 	.word	0x2003e740

000bb9f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb9f0:	4770      	bx	lr
	...

000bb9f4 <_Z17acquireWireBufferv>:
{
   bb9f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb9f6:	4b0a      	ldr	r3, [pc, #40]	; (bba20 <_Z17acquireWireBufferv+0x2c>)
   bb9f8:	6003      	str	r3, [r0, #0]
   bb9fa:	2301      	movs	r3, #1
{
   bb9fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb9fe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba00:	4908      	ldr	r1, [pc, #32]	; (bba24 <_Z17acquireWireBufferv+0x30>)
   bba02:	2020      	movs	r0, #32
   bba04:	f000 f834 	bl	bba70 <_ZnajRKSt9nothrow_t>
	};
   bba08:	2520      	movs	r5, #32
   bba0a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba0c:	4905      	ldr	r1, [pc, #20]	; (bba24 <_Z17acquireWireBufferv+0x30>)
	};
   bba0e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba10:	4628      	mov	r0, r5
   bba12:	f000 f82d 	bl	bba70 <_ZnajRKSt9nothrow_t>
	};
   bba16:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bba1a:	4620      	mov	r0, r4
   bba1c:	bd38      	pop	{r3, r4, r5, pc}
   bba1e:	bf00      	nop
   bba20:	00010018 	.word	0x00010018
   bba24:	000bdce0 	.word	0x000bdce0

000bba28 <_Z19__fetch_global_Wirev>:
{
   bba28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba2a:	4d0e      	ldr	r5, [pc, #56]	; (bba64 <_Z19__fetch_global_Wirev+0x3c>)
   bba2c:	7829      	ldrb	r1, [r5, #0]
   bba2e:	f3bf 8f5b 	dmb	ish
   bba32:	f011 0401 	ands.w	r4, r1, #1
{
   bba36:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba38:	d111      	bne.n	bba5e <_Z19__fetch_global_Wirev+0x36>
   bba3a:	4628      	mov	r0, r5
   bba3c:	f7f9 f812 	bl	b4a64 <__cxa_guard_acquire>
   bba40:	b168      	cbz	r0, bba5e <_Z19__fetch_global_Wirev+0x36>
   bba42:	4668      	mov	r0, sp
   bba44:	f7ff ffd6 	bl	bb9f4 <_Z17acquireWireBufferv>
   bba48:	466a      	mov	r2, sp
   bba4a:	4621      	mov	r1, r4
   bba4c:	4806      	ldr	r0, [pc, #24]	; (bba68 <_Z19__fetch_global_Wirev+0x40>)
   bba4e:	f7ff fda3 	bl	bb598 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bba52:	4628      	mov	r0, r5
   bba54:	f7f9 f80b 	bl	b4a6e <__cxa_guard_release>
   bba58:	4804      	ldr	r0, [pc, #16]	; (bba6c <_Z19__fetch_global_Wirev+0x44>)
   bba5a:	f000 f80b 	bl	bba74 <atexit>
	return wire;
}
   bba5e:	4802      	ldr	r0, [pc, #8]	; (bba68 <_Z19__fetch_global_Wirev+0x40>)
   bba60:	b007      	add	sp, #28
   bba62:	bd30      	pop	{r4, r5, pc}
   bba64:	2003e744 	.word	0x2003e744
   bba68:	2003e748 	.word	0x2003e748
   bba6c:	000bb9f1 	.word	0x000bb9f1

000bba70 <_ZnajRKSt9nothrow_t>:
   bba70:	f7f8 bfe7 	b.w	b4a42 <_Znaj>

000bba74 <atexit>:
   bba74:	2300      	movs	r3, #0
   bba76:	4601      	mov	r1, r0
   bba78:	461a      	mov	r2, r3
   bba7a:	4618      	mov	r0, r3
   bba7c:	f000 b8c0 	b.w	bbc00 <__register_exitproc>

000bba80 <calloc>:
   bba80:	4b02      	ldr	r3, [pc, #8]	; (bba8c <calloc+0xc>)
   bba82:	460a      	mov	r2, r1
   bba84:	4601      	mov	r1, r0
   bba86:	6818      	ldr	r0, [r3, #0]
   bba88:	f000 b818 	b.w	bbabc <_calloc_r>
   bba8c:	2003c6b4 	.word	0x2003c6b4

000bba90 <memcpy>:
   bba90:	440a      	add	r2, r1
   bba92:	4291      	cmp	r1, r2
   bba94:	f100 33ff 	add.w	r3, r0, #4294967295
   bba98:	d100      	bne.n	bba9c <memcpy+0xc>
   bba9a:	4770      	bx	lr
   bba9c:	b510      	push	{r4, lr}
   bba9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbaa2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbaa6:	4291      	cmp	r1, r2
   bbaa8:	d1f9      	bne.n	bba9e <memcpy+0xe>
   bbaaa:	bd10      	pop	{r4, pc}

000bbaac <memset>:
   bbaac:	4402      	add	r2, r0
   bbaae:	4603      	mov	r3, r0
   bbab0:	4293      	cmp	r3, r2
   bbab2:	d100      	bne.n	bbab6 <memset+0xa>
   bbab4:	4770      	bx	lr
   bbab6:	f803 1b01 	strb.w	r1, [r3], #1
   bbaba:	e7f9      	b.n	bbab0 <memset+0x4>

000bbabc <_calloc_r>:
   bbabc:	b513      	push	{r0, r1, r4, lr}
   bbabe:	434a      	muls	r2, r1
   bbac0:	4611      	mov	r1, r2
   bbac2:	9201      	str	r2, [sp, #4]
   bbac4:	f7fe ffa2 	bl	baa0c <_malloc_r>
   bbac8:	4604      	mov	r4, r0
   bbaca:	b118      	cbz	r0, bbad4 <_calloc_r+0x18>
   bbacc:	9a01      	ldr	r2, [sp, #4]
   bbace:	2100      	movs	r1, #0
   bbad0:	f7ff ffec 	bl	bbaac <memset>
   bbad4:	4620      	mov	r0, r4
   bbad6:	b002      	add	sp, #8
   bbad8:	bd10      	pop	{r4, pc}
	...

000bbadc <srand>:
   bbadc:	b538      	push	{r3, r4, r5, lr}
   bbade:	4b10      	ldr	r3, [pc, #64]	; (bbb20 <srand+0x44>)
   bbae0:	681d      	ldr	r5, [r3, #0]
   bbae2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbae4:	4604      	mov	r4, r0
   bbae6:	b9b3      	cbnz	r3, bbb16 <srand+0x3a>
   bbae8:	2018      	movs	r0, #24
   bbaea:	f7fe ff67 	bl	ba9bc <malloc>
   bbaee:	4602      	mov	r2, r0
   bbaf0:	63a8      	str	r0, [r5, #56]	; 0x38
   bbaf2:	b920      	cbnz	r0, bbafe <srand+0x22>
   bbaf4:	4b0b      	ldr	r3, [pc, #44]	; (bbb24 <srand+0x48>)
   bbaf6:	480c      	ldr	r0, [pc, #48]	; (bbb28 <srand+0x4c>)
   bbaf8:	2142      	movs	r1, #66	; 0x42
   bbafa:	f7fe ff8f 	bl	baa1c <__assert_func>
   bbafe:	490b      	ldr	r1, [pc, #44]	; (bbb2c <srand+0x50>)
   bbb00:	4b0b      	ldr	r3, [pc, #44]	; (bbb30 <srand+0x54>)
   bbb02:	e9c0 1300 	strd	r1, r3, [r0]
   bbb06:	4b0b      	ldr	r3, [pc, #44]	; (bbb34 <srand+0x58>)
   bbb08:	6083      	str	r3, [r0, #8]
   bbb0a:	230b      	movs	r3, #11
   bbb0c:	8183      	strh	r3, [r0, #12]
   bbb0e:	2100      	movs	r1, #0
   bbb10:	2001      	movs	r0, #1
   bbb12:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbb16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbb18:	2200      	movs	r2, #0
   bbb1a:	611c      	str	r4, [r3, #16]
   bbb1c:	615a      	str	r2, [r3, #20]
   bbb1e:	bd38      	pop	{r3, r4, r5, pc}
   bbb20:	2003c6b4 	.word	0x2003c6b4
   bbb24:	000bdce1 	.word	0x000bdce1
   bbb28:	000bdcf8 	.word	0x000bdcf8
   bbb2c:	abcd330e 	.word	0xabcd330e
   bbb30:	e66d1234 	.word	0xe66d1234
   bbb34:	0005deec 	.word	0x0005deec

000bbb38 <strcpy>:
   bbb38:	4603      	mov	r3, r0
   bbb3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb3e:	f803 2b01 	strb.w	r2, [r3], #1
   bbb42:	2a00      	cmp	r2, #0
   bbb44:	d1f9      	bne.n	bbb3a <strcpy+0x2>
   bbb46:	4770      	bx	lr

000bbb48 <strtok>:
   bbb48:	4b16      	ldr	r3, [pc, #88]	; (bbba4 <strtok+0x5c>)
   bbb4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbb4c:	681e      	ldr	r6, [r3, #0]
   bbb4e:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bbb50:	4605      	mov	r5, r0
   bbb52:	b9fc      	cbnz	r4, bbb94 <strtok+0x4c>
   bbb54:	2050      	movs	r0, #80	; 0x50
   bbb56:	9101      	str	r1, [sp, #4]
   bbb58:	f7fe ff30 	bl	ba9bc <malloc>
   bbb5c:	9901      	ldr	r1, [sp, #4]
   bbb5e:	65b0      	str	r0, [r6, #88]	; 0x58
   bbb60:	4602      	mov	r2, r0
   bbb62:	b920      	cbnz	r0, bbb6e <strtok+0x26>
   bbb64:	4b10      	ldr	r3, [pc, #64]	; (bbba8 <strtok+0x60>)
   bbb66:	4811      	ldr	r0, [pc, #68]	; (bbbac <strtok+0x64>)
   bbb68:	2157      	movs	r1, #87	; 0x57
   bbb6a:	f7fe ff57 	bl	baa1c <__assert_func>
   bbb6e:	e9c0 4400 	strd	r4, r4, [r0]
   bbb72:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bbb76:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bbb7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bbb7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bbb82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bbb86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bbb8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bbb8e:	6184      	str	r4, [r0, #24]
   bbb90:	7704      	strb	r4, [r0, #28]
   bbb92:	6244      	str	r4, [r0, #36]	; 0x24
   bbb94:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bbb96:	2301      	movs	r3, #1
   bbb98:	4628      	mov	r0, r5
   bbb9a:	b002      	add	sp, #8
   bbb9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbba0:	f000 b806 	b.w	bbbb0 <__strtok_r>
   bbba4:	2003c6b4 	.word	0x2003c6b4
   bbba8:	000bdce1 	.word	0x000bdce1
   bbbac:	000bdd75 	.word	0x000bdd75

000bbbb0 <__strtok_r>:
   bbbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbbb2:	b908      	cbnz	r0, bbbb8 <__strtok_r+0x8>
   bbbb4:	6810      	ldr	r0, [r2, #0]
   bbbb6:	b188      	cbz	r0, bbbdc <__strtok_r+0x2c>
   bbbb8:	4604      	mov	r4, r0
   bbbba:	4620      	mov	r0, r4
   bbbbc:	f814 5b01 	ldrb.w	r5, [r4], #1
   bbbc0:	460f      	mov	r7, r1
   bbbc2:	f817 6b01 	ldrb.w	r6, [r7], #1
   bbbc6:	b91e      	cbnz	r6, bbbd0 <__strtok_r+0x20>
   bbbc8:	b965      	cbnz	r5, bbbe4 <__strtok_r+0x34>
   bbbca:	6015      	str	r5, [r2, #0]
   bbbcc:	4628      	mov	r0, r5
   bbbce:	e005      	b.n	bbbdc <__strtok_r+0x2c>
   bbbd0:	42b5      	cmp	r5, r6
   bbbd2:	d1f6      	bne.n	bbbc2 <__strtok_r+0x12>
   bbbd4:	2b00      	cmp	r3, #0
   bbbd6:	d1f0      	bne.n	bbbba <__strtok_r+0xa>
   bbbd8:	6014      	str	r4, [r2, #0]
   bbbda:	7003      	strb	r3, [r0, #0]
   bbbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbbde:	461c      	mov	r4, r3
   bbbe0:	e00c      	b.n	bbbfc <__strtok_r+0x4c>
   bbbe2:	b915      	cbnz	r5, bbbea <__strtok_r+0x3a>
   bbbe4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbbe8:	460e      	mov	r6, r1
   bbbea:	f816 5b01 	ldrb.w	r5, [r6], #1
   bbbee:	42ab      	cmp	r3, r5
   bbbf0:	d1f7      	bne.n	bbbe2 <__strtok_r+0x32>
   bbbf2:	2b00      	cmp	r3, #0
   bbbf4:	d0f3      	beq.n	bbbde <__strtok_r+0x2e>
   bbbf6:	2300      	movs	r3, #0
   bbbf8:	f804 3c01 	strb.w	r3, [r4, #-1]
   bbbfc:	6014      	str	r4, [r2, #0]
   bbbfe:	e7ed      	b.n	bbbdc <__strtok_r+0x2c>

000bbc00 <__register_exitproc>:
   bbc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbc04:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbcc0 <__register_exitproc+0xc0>
   bbc08:	4606      	mov	r6, r0
   bbc0a:	f8d8 0000 	ldr.w	r0, [r8]
   bbc0e:	461f      	mov	r7, r3
   bbc10:	460d      	mov	r5, r1
   bbc12:	4691      	mov	r9, r2
   bbc14:	f000 f856 	bl	bbcc4 <__retarget_lock_acquire_recursive>
   bbc18:	4b25      	ldr	r3, [pc, #148]	; (bbcb0 <__register_exitproc+0xb0>)
   bbc1a:	681c      	ldr	r4, [r3, #0]
   bbc1c:	b934      	cbnz	r4, bbc2c <__register_exitproc+0x2c>
   bbc1e:	4c25      	ldr	r4, [pc, #148]	; (bbcb4 <__register_exitproc+0xb4>)
   bbc20:	601c      	str	r4, [r3, #0]
   bbc22:	4b25      	ldr	r3, [pc, #148]	; (bbcb8 <__register_exitproc+0xb8>)
   bbc24:	b113      	cbz	r3, bbc2c <__register_exitproc+0x2c>
   bbc26:	681b      	ldr	r3, [r3, #0]
   bbc28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbc2c:	6863      	ldr	r3, [r4, #4]
   bbc2e:	2b1f      	cmp	r3, #31
   bbc30:	dd07      	ble.n	bbc42 <__register_exitproc+0x42>
   bbc32:	f8d8 0000 	ldr.w	r0, [r8]
   bbc36:	f000 f847 	bl	bbcc8 <__retarget_lock_release_recursive>
   bbc3a:	f04f 30ff 	mov.w	r0, #4294967295
   bbc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbc42:	b34e      	cbz	r6, bbc98 <__register_exitproc+0x98>
   bbc44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbc48:	b988      	cbnz	r0, bbc6e <__register_exitproc+0x6e>
   bbc4a:	4b1c      	ldr	r3, [pc, #112]	; (bbcbc <__register_exitproc+0xbc>)
   bbc4c:	b923      	cbnz	r3, bbc58 <__register_exitproc+0x58>
   bbc4e:	f8d8 0000 	ldr.w	r0, [r8]
   bbc52:	f000 f838 	bl	bbcc6 <__retarget_lock_release>
   bbc56:	e7f0      	b.n	bbc3a <__register_exitproc+0x3a>
   bbc58:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbc5c:	f7fe feae 	bl	ba9bc <malloc>
   bbc60:	2800      	cmp	r0, #0
   bbc62:	d0f4      	beq.n	bbc4e <__register_exitproc+0x4e>
   bbc64:	2300      	movs	r3, #0
   bbc66:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbc6a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbc6e:	6863      	ldr	r3, [r4, #4]
   bbc70:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbc74:	2201      	movs	r2, #1
   bbc76:	409a      	lsls	r2, r3
   bbc78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbc7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbc80:	4313      	orrs	r3, r2
   bbc82:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbc86:	2e02      	cmp	r6, #2
   bbc88:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbc8c:	bf02      	ittt	eq
   bbc8e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbc92:	4313      	orreq	r3, r2
   bbc94:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbc98:	6863      	ldr	r3, [r4, #4]
   bbc9a:	f8d8 0000 	ldr.w	r0, [r8]
   bbc9e:	1c5a      	adds	r2, r3, #1
   bbca0:	3302      	adds	r3, #2
   bbca2:	6062      	str	r2, [r4, #4]
   bbca4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbca8:	f000 f80e 	bl	bbcc8 <__retarget_lock_release_recursive>
   bbcac:	2000      	movs	r0, #0
   bbcae:	e7c6      	b.n	bbc3e <__register_exitproc+0x3e>
   bbcb0:	2003e7e8 	.word	0x2003e7e8
   bbcb4:	2003e75c 	.word	0x2003e75c
   bbcb8:	00000000 	.word	0x00000000
   bbcbc:	000ba9bd 	.word	0x000ba9bd
   bbcc0:	2003c718 	.word	0x2003c718

000bbcc4 <__retarget_lock_acquire_recursive>:
   bbcc4:	4770      	bx	lr

000bbcc6 <__retarget_lock_release>:
   bbcc6:	4770      	bx	lr

000bbcc8 <__retarget_lock_release_recursive>:
   bbcc8:	4770      	bx	lr

000bbcca <link_code_end>:
	...

000bbccc <dynalib_user>:
   bbccc:	49cd 000b 4a09 000b 4a31 000b 4a35 000b     .I...J..1J..5J..
   bbcdc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bbcec:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   bbcfc:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   bbd0c:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   bbd1c:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   bbd2c:	6f69 006e 6f4e 6174 6920 766e a1c3 696c     ion.Nota inv..li
   bbd3c:	6164 5400 7069 206f 6e69 c376 6ca1 6469     da.Tipo inv..lid
   bbd4c:	006f 4552 4d00 0049 4146 5300 4c4f 4c00     o.RE.MI.FA.SOL.L
   bbd5c:	0041 4953 5f00 0043 4e5f 5f00 0042 6e49     A.SI._C._N._B.In
   bbd6c:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   bbd7c:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   bbd8c:	6520 206e 6c65 6220 6f6c 7571 0065 494d      en el bloque.MI
   bbd9c:	4146 4552 525f 6165 2864 2029 6166 6c69     FARE_Read() fail
   bbdac:	6465 203a 5000 4443 415f 7475 6568 746e     ed: .PCD_Authent
   bbdbc:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   bbdcc:	5400 6761 6e49 6f66 203a 7325 2000 2020     .TagInfo: %s.   
   bbddc:	2020 4c20 7a75 7620 7265 6564 0020 2020        Luz verde .  
   bbdec:	2020 2020 754c 207a 6f52 616a 0020 2020         Luz Roja .  
   bbdfc:	2020 754c 207a 6d41 7261 6c69 616c 0020       Luz Amarilla .
   bbe0c:	2020 2020 4c20 7a75 4d20 726f 6461 2061          Luz Morada 
   bbe1c:	2000 2020 2020 4c20 7a75 4120 757a 206c     .      Luz Azul 
   bbe2c:	2000 2020 4c20 7a75 4e20 7261 6e61 616a     .    Luz Naranja
   bbe3c:	0020 2020 2020 754c 207a 6170 7072 6461      .    Luz parpad
   bbe4c:	6165 0020 2020 2020 754c 207a 7241 6f63     ea .    Luz Arco
   bbe5c:	7269 7369 0020 2020 2020 754c 207a 7061     iris .    Luz ap
   bbe6c:	6761 6461 2061 5a00 6d75 6162 6f64 2072     agada .Zumbador 
   bbe7c:	6e69 6574 6d72 7469 6e65 6574 0020 2020     intermitente .  
   bbe8c:	2020 2020 755a 626d 6461 726f 0020 2020         Zumbador .  
   bbe9c:	2020 2020 754d 6863 2061 756c 207a 2000         Mucha luz . 
   bbeac:	2020 2020 5020 636f 2061 756c 207a 2000          Poca luz . 
   bbebc:	2020 2020 754d 6863 206f 7572 6469 206f         Mucho ruido 
   bbecc:	2000 2020 2020 6f50 6f63 7220 6975 6f64     .     Poco ruido
   bbedc:	0020 2020 4220 746f 6e6f 6120 7463 7669      .   Boton activ
   bbeec:	6461 206f 2000 4220 746f 6e6f 6420 7365     ado .  Boton des
   bbefc:	6361 6974 6176 6f64 0020 2020 2020 4720     activado .     G
   bbf0c:	7269 206f 6570 7571 c365 6fb1 0020 2020     iro peque..o .  
   bbf1c:	2020 6947 6f72 6720 6172 646e 2065 2000       Giro grande . 
   bbf2c:	2020 2020 4320 6c61 726f 0020 2020 2020          Calor .    
   bbf3c:	2020 7246 6f69 0020 2020 4d20 6375 6168       Frio .   Mucha
   bbf4c:	6420 7369 6174 636e 6169 0020 2020 5020      distancia .   P
   bbf5c:	636f 2061 6964 7473 6e61 6963 2061 2000     oca distancia . 
   bbf6c:	2020 4820 7961 6120 7567 2061 2000 6f4e        Hay agua . No
   bbf7c:	6820 7961 6120 7567 2061 4200 746f 6e6f      hay agua .Boton
   bbf8c:	6420 6175 206c 6f6e 6120 7463 7669 6461      dual no activad
   bbf9c:	006f 6f42 6f74 206e 7564 6c61 6420 7265     o.Boton dual der
   bbfac:	6365 6f68 4200 746f 6e6f 6420 6175 206c     echo.Boton dual 
   bbfbc:	7a69 7571 6569 6472 006f 6f42 6f74 206e     izquierdo.Boton 
   bbfcc:	7564 6c61 6420 626f 656c 2000 2020 6741     dual doble.   Ag
   bbfdc:	6175 7420 7275 6962 2061 2000 2020 6556     ua turbia .   Ve
   bbfec:	746e 6c69 6461 726f 0020 2020 2020 2020     ntilador .      
   bbffc:	2020 4920 0046 2020 2020 2020 2020 4120        IF.         A
   bc00c:	444e 2000 2020 2020 2020 2020 524f 2000     ND.         OR. 
   bc01c:	2020 2020 2020 5420 4548 004e 2020 2020            THEN.    
   bc02c:	2020 2020 4c45 4553 4300 6e6f 6365 6174         ELSE.Conecta
   bc03c:	2072 6c61 7020 6575 7472 206f 3041 000a     r al puerto A0..
   bc04c:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   bc05c:	6f74 4120 0a32 4300 6e6f 6365 6174 2072     to A2..Conectar 
   bc06c:	6c61 7020 6575 7472 206f 3441 000a 6f43     al puerto A4..Co
   bc07c:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
   bc08c:	4420 0a32 4300 6e6f 6365 6174 2072 6c61      D2..Conectar al
   bc09c:	7020 6575 7472 206f 3444 000a 6f43 656e      puerto D4..Cone
   bc0ac:	7463 7261 6120 206c 7570 7265 6f74 4420     ctar al puerto D
   bc0bc:	0a36 4500 7272 726f 203a 6f4e 6820 7961     6..Error: No hay
   bc0cc:	6d20 7361 7020 6575 7472 736f 6420 7369      mas puertos dis
   bc0dc:	6f70 696e 6c62 7365 0a20 4500 5045 4f52     ponibles ..EEPRO
   bc0ec:	204d 6d65 7470 0079 002d 2330 2339 0031     M empty.-.0#9#1.
   bc0fc:	2330 3031 3123 3000 3123 2331 0031 2330     0#10#1.0#11#1.0#
   bc10c:	2331 2331 0030 2330 2331 2331 0031 2330     1#1#0.0#1#1#1.0#
   bc11c:	2330 2331 0030 2330 2330 2331 0031 2330     0#1#0.0#0#1#1.0#
   bc12c:	2330 2331 0032 2330 2330 2331 0033 2330     0#1#2.0#0#1#3.0#
   bc13c:	2330 2331 0034 2330 2330 2331 0035 2331     0#1#4.0#0#1#5.1#
   bc14c:	2330 2331 2337 0030 2331 2330 2331 2337     0#1#7#0.1#0#1#7#
   bc15c:	0031 2331 2330 2330 2332 0030 2331 2330     1.1#0#0#2#0.1#0#
   bc16c:	2330 2332 0031 2331 2330 2330 2333 0030     0#2#1.1#0#0#3#0.
   bc17c:	2331 2330 2330 2333 0031 2331 2330 2331     1#0#0#3#1.1#0#1#
   bc18c:	2334 0030 2331 2330 2331 2334 0031 2331     4#0.1#0#1#4#1.1#
   bc19c:	2330 2331 2335 0030 2331 2330 2331 2335     0#1#5#0.1#0#1#5#
   bc1ac:	0031 2331 2330 2331 2336 0030 2331 2330     1.1#0#1#6#0.1#0#
   bc1bc:	2331 2336 0031 2331 2330 2331 2336 0032     1#6#1.1#0#1#6#2.
   bc1cc:	2331 2331 2331 2331 0030 2331 2331 2331     1#1#1#1#0.1#1#1#
   bc1dc:	2331 0031 2331 2331 2331 2330 0030 2331     1#1.1#1#1#0#0.1#
   bc1ec:	2331 2331 2330 0031 2331 2331 2331 2330     1#1#0#1.1#1#1#0#
   bc1fc:	0032 2331 2331 2331 2330 0033 2331 2331     2.1#1#1#0#3.1#1#
   bc20c:	2331 2330 0034 2331 2331 2331 2330 0035     1#0#4.1#1#1#0#5.
   bc21c:	2331 2331 2331 2330 0036 2331 2331 2331     1#1#1#0#6.1#1#1#
   bc22c:	2330 0037 2331 2333 0030 2331 2333 0031     0#7.1#3#0.1#3#1.
   bc23c:	2332 2330 2330 0030 2332 2330 2330 0031     2#0#0#0.2#0#0#1.
   bc24c:	2332 2330 2330 0032 2332 2330 2331 0030     2#0#0#2.2#0#1#0.
   bc25c:	2332 2330 2331 0031 2332 2330 2331 0032     2#0#1#1.2#0#1#2.
   bc26c:	2332 2330 2332 0030 2332 2330 2332 0031     2#0#2#0.2#0#2#1.
   bc27c:	2332 2330 2332 0032 2332 2330 2333 0030     2#0#2#2.2#0#3#0.
   bc28c:	2332 2330 2333 0031 2332 2330 2333 0032     2#0#3#1.2#0#3#2.
   bc29c:	2332 2330 2334 0030 2332 2330 2334 0031     2#0#4#0.2#0#4#1.
   bc2ac:	2332 2330 2334 0032 2332 2330 2335 0030     2#0#4#2.2#0#5#0.
   bc2bc:	2332 2330 2335 0031 2332 2330 2335 0032     2#0#5#1.2#0#5#2.
   bc2cc:	2332 2330 2336 0030 2332 2330 2336 0031     2#0#6#0.2#0#6#1.
   bc2dc:	2332 2330 2336 0032 2332 2330 2337 0030     2#0#6#2.2#0#7#0.
   bc2ec:	2332 2330 2337 0031 2332 2330 2337 0032     2#0#7#1.2#0#7#2.
   bc2fc:	2332 2331 0030 2332 2332 0030 2332 2332     2#1#0.2#2#0.2#2#
   bc30c:	0031 2332 2332 0032 2332 2332 0033 2332     1.2#2#2.2#2#3.2#
   bc31c:	2332 0034 2332 2332 0035 2332 2332 0036     2#4.2#2#5.2#2#6.
   bc32c:	2332 2332 0037 2332 2332 0038 2336 2330     2#2#7.2#2#8.6#0#
   bc33c:	0030 2336 2330 0031 2336 2330 0032 2336     0.6#0#1.6#0#2.6#
   bc34c:	2331 0030 2336 2332 0030 2336 2332 0031     1#0.6#2#0.6#2#1.
   bc35c:	2336 2332 0032 2333 2330 2330 3231 3023     6#2#2.3#0#0#12#0
   bc36c:	3300 3023 3123 3623 3023 3100 3023 3123     .3#0#1#6#0.1#0#1
   bc37c:	3923 3323 3100 3023 3023 3123 2332 0031     #9#3.1#0#0#12#1.
   bc38c:	2331 2331 2330 3331 3123 4d00 444f 204f     1#1#0#13#1.MODO 
   bc39c:	4142 4953 4f43 4d00 444f 204f 5641 4e41     BASICO.MODO AVAN
   bc3ac:	415a 4f44 4d00 444f 204f 554d 4953 4143     ZADO.MODO MUSICA
   bc3bc:	4d00 444f 204f 5845 4c50 524f 0041 6942     .MODO EXPLORA.Bi
   bc3cc:	6d74 7061 6e20 746f 6120 6176 6c69 6261     tmap not availab
   bc3dc:	656c 002e 2020 2020 4320 4e4f 4345 4154     le..     CONECTA
   bc3ec:	2052 3a41 5900 2041 4f43 454e 5443 4441     R A:.YA CONECTAD
   bc3fc:	004f 6154 6a72 7465 2061 6e69 6176 696c     O.Tarjeta invali
   bc40c:	6164 7020 7261 2061 7365 6574 6d20 646f     da para este mod
   bc41c:	006f 6f42 7272 6461 206f 6e69 6176 696c     o.Borrado invali
   bc42c:	6f64 7020 7261 2061 7365 6574 6d20 646f     do para este mod
   bc43c:	006f 724f 6564 206e 6564 7420 7261 656a     o.Orden de tarje
   bc44c:	6174 2073 6e69 6176 696c 6f64 5000 6575     tas invalido.Pue
   bc45c:	7472 206f 6f6e 6420 7369 6f70 696e 6c62     rto no disponibl
   bc46c:	0065 6c50 7961 6e20 206f 6964 7073 6e6f     e.Play no dispon
   bc47c:	6269 656c 5300 6e65 6f73 2072 6f6e 6420     ible.Sensor no d
   bc48c:	7369 6f70 696e 6c62 2065 6528 206e 7375     isponible (en us
   bc49c:	296f 4100 7463 6175 6f64 2072 6f6e 6420     o).Actuador no d
   bc4ac:	7369 6f70 696e 6c62 2065 6528 206e 7375     isponible (en us
   bc4bc:	296f 4200 726f 6172 6f64 6420 2065 6c62     o).Borrado de bl
   bc4cc:	716f 6575 7220 6165 696c 617a 6f64 4e00     oque realizado.N
   bc4dc:	6461 2061 7571 2065 6f62 7272 7261 4200     ada que borrar.B
   bc4ec:	726f 6172 6f64 6420 2065 6f6c 706f 7220     orrado de loop r
   bc4fc:	6165 696c 617a 6f64 4e00 6461 2061 7571     ealizado.Nada qu
   bc50c:	2065 6f62 7272 7261 002e 6425 2d20 2520     e borrar..%d - %
   bc51c:	0064 6946 616e 696c 617a 6520 206c 7562     d.Finaliza el bu
   bc52c:	6c63 2065 6e61 6574 2073 6564 7220 7065     cle antes de rep
   bc53c:	6f72 7564 6963 0072 6f4d 6f64 4220 5341     roducir.Modo BAS
   bc54c:	4349 204f 6564 6574 7463 6461 006f 6e49     ICO detectado.In
   bc55c:	6369 6169 646e 206f 6f6d 6f64 4220 5341     iciando modo BAS
   bc56c:	4349 2e4f 2e2e 4d00 646f 206f 5641 4e41     ICO....Modo AVAN
   bc57c:	415a 4f44 6420 7465 6365 6174 6f64 4900     ZADO detectado.I
   bc58c:	696e 6963 6e61 6f64 6d20 646f 206f 5641     niciando modo AV
   bc59c:	4e41 415a 4f44 2e2e 002e 6f4d 6f64 4d20     ANZADO....Modo M
   bc5ac:	5355 4349 2041 6564 6574 7463 6461 006f     USICA detectado.
   bc5bc:	6e49 6369 6169 646e 206f 6f6d 6f64 4d20     Iniciando modo M
   bc5cc:	5355 4349 2e41 2e2e 4d00 646f 206f 5845     USICA....Modo EX
   bc5dc:	4c50 524f 2041 6564 6574 7463 6461 006f     PLORA detectado.
   bc5ec:	6e49 6369 6169 646e 206f 6f6d 6f64 4520     Iniciando modo E
   bc5fc:	5058 4f4c 4152 2e2e 002e 6f42 7272 6461     XPLORA....Borrad
   bc60c:	206f 6564 206c 6c75 6974 6f6d 7220 6165     o del ultimo rea
   bc61c:	696c 617a 6f64 5a00 6d75 6162 6f64 3a72     lizado.Zumbador:
   bc62c:	5400 6761 4420 7465 6365 6174 6164 2d20     .Tag Detectada -
   bc63c:	3e2d 0020 6f42 7272 6461 206f 6f63 706d     -> .Borrado comp
   bc64c:	656c 6f74 7220 6165 696c 617a 6f64 4200     leto realizado.B
   bc65c:	726f 6172 6f64 6e20 206f 6570 6d72 7469     orrado no permit
   bc66c:	6469 206f 6170 6172 6520 7473 2065 6f6d     ido para este mo
   bc67c:	6f64 5300 6e65 6f73 2072 6564 6574 7463     do.Sensor detect
   bc68c:	6461 006f 6341 7574 6461 726f 6420 7465     ado.Actuador det
   bc69c:	6365 6174 6f64 4500 656a 7563 6174 646e     ectado.Ejecutand
   bc6ac:	206f 6174 2067 2d2d 203e 5300 2065 7365     o tag --> .Se es
   bc6bc:	6570 6172 6162 4920 2046 6174 0067 6544     peraba IF tag.De
   bc6cc:	7073 6575 2073 6564 7520 206e 6573 736e     spues de un sens
   bc6dc:	726f 7320 2065 7365 6570 6172 7520 616e     or se espera una
   bc6ec:	6320 6e6f 6963 6e6f 203a 4e41 2044 2075      concion: AND u 
   bc6fc:	524f 5300 6e65 6f73 2072 6e69 6176 696c     OR.Sensor invali
   bc70c:	6f64 5300 2065 7365 6570 6172 6162 5420     do.Se esperaba T
   bc71c:	4548 204e 6174 0067 4649 6420 7465 6365     HEN tag.IF detec
   bc72c:	6174 6f64 4e00 6d75 7265 206f 6564 6220     tado.Numero de b
   bc73c:	6f6c 7571 7365 3e20 3220 7c20 207c 6553     loques > 2 || Se
   bc74c:	6e20 6365 7365 7469 2061 6c61 6d20 6e65      necesita al men
   bc75c:	736f 7520 206e 6361 7574 6461 726f 7020     os un actuador p
   bc76c:	7261 2061 6574 6d72 6e69 7261 6520 206c     ara terminar el 
   bc77c:	6c62 716f 6575 4100 444e 4f2f 2052 6564     bloque.AND/OR de
   bc78c:	6574 7463 6461 006f 6e55 2061 6f63 636e     tectado.Una conc
   bc79c:	6369 6f69 206e 6f73 6f6c 7020 6575 6564     icion solo puede
   bc7ac:	6920 2072 6573 7567 6469 2061 6564 7520      ir seguida de u
   bc7bc:	206e 6573 736e 726f 002e 4854 4e45 6420     n sensor..THEN d
   bc7cc:	7465 6365 6174 6f64 4e00 6d75 7265 206f     etectado.Numero 
   bc7dc:	6564 7320 6e65 6f73 6572 2073 6e69 7566     de sensores infu
   bc7ec:	6963 6e65 6574 0073 4c45 4553 6420 7465     cientes.ELSE det
   bc7fc:	6365 6174 6f64 4900 746e 6f72 7564 6563     ectado.Introduce
   bc80c:	7520 206e 6341 7574 6461 726f 7020 7261      un Actuador par
   bc81c:	2061 616c 6520 6176 756c 6361 c369 6eb3     a la evaluaci..n
   bc82c:	6120 5420 5552 0045 6946 206e 6154 0067      a TRUE.Fin Tag.
   bc83c:	2023 6c42 716f 6575 7c20 2320 5320 6e65     # Bloque | # Sen
   bc84c:	6f73 6572 2073 207c 2023 6f43 646e 6369     sores | # Condic
   bc85c:	6f69 656e 2073 207c 2023 6341 7574 6461     iones | # Actuad
   bc86c:	726f 7365 2000 2020 2520 2064 7c09 2009     ores.    %d .|. 
   bc87c:	6425 0920 097c 2520 2064 7c09 2009 6425     %d .|. %d .|. %d
   bc88c:	0920 097c 2520 0064 6154 6a72 7465 2061      .|. %d.Tarjeta 
   bc89c:	6e69 c376 6ca1 6469 2061 6170 6172 6520     inv..lida para e
   bc8ac:	7473 2065 6f6d 6f64 4200 4f4c 5551 2045     ste modo.BLOQUE 
   bc8bc:	3a31 5420 5552 0045 4c42 514f 4555 3120     1: TRUE.BLOQUE 1
   bc8cc:	203a 4146 534c 0045 2020 6361 6261 2061     : FALSE.  acaba 
   bc8dc:	6c62 716f 6575 3120 4200 4f4c 5551 2045     bloque 1.BLOQUE 
   bc8ec:	3a32 5420 5552 0045 4c42 514f 4555 3220     2: TRUE.BLOQUE 2
   bc8fc:	203a 4146 534c 0045 4c42 514f 4555 3220     : FALSE.BLOQUE 2
   bc90c:	203a 2020 6f6e 6620 6e69 6c61 7a69 6461     :   no finalizad
   bc91c:	006f 6a45 6365 7475 6e61 6f64 2e2e 002e     o.Ejecutando....
   bc92c:	6f42 7272 6461 2061 6c75 6974 616d 6c20     Borrada ultima l
   bc93c:	6365 7574 6172 4c00 6f6f 2070 202d 5000     ectura.Loop - .P
   bc94c:	7261 2061 6f63 656d 7a6e 7261 7520 206e     ara comenzar un 
   bc95c:	6f6c 706f 6820 7961 7120 6575 6620 6e69     loop hay que fin
   bc96c:	6c61 7a69 7261 6520 206c 6e61 6574 6972     alizar el anteri
   bc97c:	726f 002e 4e45 2044 6f4c 706f 7200 7065     or..END Loop.rep
   bc98c:	2d20 0020 6f4c 706f 7320 6e69 6320 6d6f      - .Loop sin com
   bc99c:	6e65 617a 2072 206f 6973 206e 6f63 746e     enzar o sin cont
   bc9ac:	6e65 6469 006f 2020 2020 2020 2020 4c20     enido.         L
   bc9bc:	7a75 003a 2020 7552 6469 206f 6428 6365     uz:.  Ruido (dec
   bc9cc:	6269 6c65 6f69 2973 003a 2020 4120 676e     ibelios):.   Ang
   bc9dc:	6c75 206f 6728 6172 6f64 2973 003a 2020     ulo (grados):.  
   bc9ec:	6554 706d 7265 7461 7275 2061 6728 6172     Temperatura (gra
   bc9fc:	6f64 2973 003a 2020 4420 7369 6174 636e     dos):.   Distanc
   bca0c:	6169 2820 6d63 3a29 2000 2020 2020 5420     ia (cm):.      T
   bca1c:	7275 6962 6564 3a7a                          urbidez:.

000bca25 <CSWTCH.442>:
   bca25:	ff13 ff11                                    .....

000bca2a <CSWTCH.454>:
   bca2a:	00fa 01f4 03e8                              ......

000bca30 <_ZL14sucreLogo_data>:
   bca30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca50:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bca60:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bca70:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bca80:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bca90:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcaa0:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcab0:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bcac0:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bcad0:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bcae0:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bcaf0:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bcb00:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bcb10:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bcb20:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bcb30:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bcb40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb50:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bcb60:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bcb70:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bcb80:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bcb90:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bcba0:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bcbb0:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bcbc0:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bcbd0:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bcbe0:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bcbf0:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bcc00:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bcc10:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bcc20:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bcc30:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bcc40:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bcc50:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bcc60:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bcc70:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bcc80:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bcc90:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bcca0:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bccb0:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bccc0:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bccd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bccf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd30:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bcd40:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bcd50:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bcd60:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bcd70:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bcd80:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bcd90:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bcda0:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bcdb0:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bcdc0:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bcdd0:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bcde0:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bcdf0:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bce00:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bce10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce30:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bce40:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bce50:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bce60:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bce70:	7525 003e                                   %u>.

000bce74 <_ZL4font>:
   bce74:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bce84:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bce94:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bcea4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bceb4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bcec4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bced4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bcee4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bcef4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bcf04:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bcf14:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bcf24:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bcf34:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bcf44:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bcf54:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bcf64:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bcf74:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bcf84:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bcf94:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bcfa4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bcfb4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bcfc4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bcfd4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bcfe4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bcff4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bd004:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bd014:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bd024:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bd034:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bd044:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bd054:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bd064:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bd074:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bd084:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bd094:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bd0a4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bd0b4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bd0c4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bd0d4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bd0e4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bd0f4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bd104:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bd114:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bd124:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bd134:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bd144:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bd154:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bd164:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bd174:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bd184:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bd194:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bd1a4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bd1b4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bd1c4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bd1d4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bd1e4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bd1f4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bd204:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bd214:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bd224:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bd234:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bd244:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bd254:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bd264:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bd274:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bd284:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bd294:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bd2a4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bd2b4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bd2c4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bd2d4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bd2e4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bd2f4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bd304:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bd314:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bd324:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bd334:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bd344:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bd354:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bd364:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bd374 <_ZTV12Adafruit_GFX>:
	...
   bd384:	8edd 000b aee1 000b 4a4d 000b 857f 000b     ........MJ......
   bd394:	8581 000b 85b3 000b 858f 000b 85a1 000b     ................
   bd3a4:	84c1 000b 857f 000b 87ab 000b 87a9 000b     ................
   bd3b4:	85cb 000b 8609 000b 8643 000b 8689 000b     ........C.......
   bd3c4:	86a5 000b 8729 000b 6e55 6e6b 776f 206e     ....)...Unknown 
   bd3d4:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bd3e4:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bd3f4:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bd404:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bd414:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bd424:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bd434:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bd444:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bd454:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bd464:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bd474:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bd484:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bd494:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bd4a4:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bd4b4:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bd4c4 <CSWTCH.84>:
   bd4c4:	d3da 000b d3e3 000b d3fb 000b d410 000b     ................
   bd4d4:	d42a 000b d446 000b d475 000b d487 000b     *...F...u.......
   bd4e4:	d4a1 000b                                   ....

000bd4e8 <_ZTVN8particle11SPISettingsE>:
	...
   bd4f0:	846d 000b 845d 000b 845f 000b               m...]..._...

000bd4fc <_ZL12splash2_data>:
   bd4fc:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bd50c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bd51c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bd538:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bd548:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bd558:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bd568:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bd578:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bd588:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bd598:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bd5a8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bd5b8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bd5c8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bd5d8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bd5e8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bd5f8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bd608:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bd618:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bd628:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bd638:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bd648:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bd658:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bd668:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bd678:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bd690:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bd6a0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bd6b0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bd6c0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bd6d0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bd6dc <_ZL14sucreLogo_data>:
   bd6dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6fc:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bd70c:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bd71c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bd72c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bd73c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bd74c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bd75c:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bd76c:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bd77c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bd78c:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bd79c:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bd7ac:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bd7bc:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bd7cc:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bd7dc:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bd7ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd7fc:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bd80c:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bd81c:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bd82c:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bd83c:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bd84c:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bd85c:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bd86c:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bd87c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bd88c:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bd89c:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bd8ac:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bd8bc:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bd8cc:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bd8dc:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bd8ec:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bd8fc:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bd90c:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bd91c:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bd92c:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bd93c:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bd94c:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bd95c:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bd96c:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bd97c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd98c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd99c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9dc:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bd9ec:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bd9fc:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bda0c:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bda1c:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bda2c:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bda3c:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bda4c:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bda5c:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bda6c:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bda7c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bda8c:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bda9c:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bdaac:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bdabc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdacc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bdadc <_ZTV16Adafruit_SSD1306>:
	...
   bdae4:	9a91 000b 9aa9 000b 8edd 000b aee1 000b     ................
   bdaf4:	9abd 000b 857f 000b 8581 000b 85b3 000b     ................
   bdb04:	858f 000b 85a1 000b 84c1 000b 857f 000b     ................
   bdb14:	87ab 000b 9c4f 000b a1eb 000b a19d 000b     ....O...........
   bdb24:	8643 000b 8689 000b 86a5 000b 8729 000b     C...........)...

000bdb34 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bdb34:	8000 e0c0 f8f0 fefc                         ........

000bdb3c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bdb3c:	0100 0703 1f0f 7f3f                         ......?.

000bdb44 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bdb44:	d5ae a880                                   ....

000bdb48 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bdb48:	00d3 8d40                                   ..@.

000bdb4c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bdb4c:	0020 c8a1                                    ...

000bdb50 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bdb50:	40db a6a4 af2e                              .@....

000bdb56 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bdb56:	02da 8f81                                   ....

000bdb5a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bdb5a:	12da                                         ...

000bdb5d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bdb5d:	02da                                         ...

000bdb60 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bdb60:	0022 21ff 0000 0000                         "..!....

000bdb68 <_ZTVN5spark13EthernetClassE>:
	...
   bdb70:	aa9b 000b aa91 000b aa87 000b aa7d 000b     ............}...
   bdb80:	aa71 000b aa65 000b b6c1 000b b6c9 000b     q...e...........
   bdb90:	aa59 000b aa51 000b aa47 000b aa3d 000b     Y...Q...G...=...
   bdba0:	b6f9 000b                                   ....

000bdba4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bdba4:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bdbb4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bdbc4:	7361 7463 6d69 0065                         asctime.

000bdbcc <_ZTV9IPAddress>:
	...
   bdbd4:	b259 000b b249 000b b24b 000b               Y...I...K...

000bdbe0 <_ZTV9USBSerial>:
	...
   bdbe8:	b33f 000b b3a7 000b b37d 000b aee1 000b     ?.......}.......
   bdbf8:	b36f 000b b341 000b b351 000b b3a1 000b     o...A...Q.......
   bdc08:	b361 000b b339 000b                         a...9...

000bdc10 <_ZTV11USARTSerial>:
	...
   bdc18:	b49d 000b b509 000b b4e1 000b aee1 000b     ................
   bdc28:	b4b1 000b b4cd 000b b4bf 000b b4db 000b     ................
   bdc38:	b49f 000b b4a3 000b                         ........

000bdc40 <_ZTV7TwoWire>:
	...
   bdc48:	b541 000b b58b 000b b563 000b b543 000b     A.......c...C...
   bdc58:	b56b 000b b573 000b b57b 000b b583 000b     k...s...{.......

000bdc68 <_ZTVN5spark9WiFiClassE>:
	...
   bdc70:	b663 000b b659 000b b64f 000b b605 000b     c...Y...O.......
   bdc80:	b643 000b b637 000b b6c1 000b b6c9 000b     C...7...........
   bdc90:	b62b 000b b623 000b b619 000b b60f 000b     +...#...........
   bdca0:	b6f9 000b                                   ....

000bdca4 <_ZTVN5spark12NetworkClassE>:
	...
   bdcac:	b681 000b b68b 000b b695 000b b69f 000b     ................
   bdcbc:	b6a9 000b b6b5 000b b6c1 000b b6c9 000b     ................
   bdccc:	b6d1 000b b6dd 000b b6e5 000b b6ef 000b     ................
   bdcdc:	b6f9 000b                                   ....

000bdce0 <_ZSt7nothrow>:
   bdce0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bdcf0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bdd00:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bdd10:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bdd20:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bdd30:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bdd40:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bdd50:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bdd60:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bdd70:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bdd80:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bdd90:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bdda0:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bddb0:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bddc0:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bddd0:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bdde0:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bddf0:	2e6b 0063                                   k.c.

000bddf4 <link_const_data_end>:
   bddf4:	000b6551 	.word	0x000b6551
   bddf8:	000baaa5 	.word	0x000baaa5
   bddfc:	000bac1d 	.word	0x000bac1d
   bde00:	000baed1 	.word	0x000baed1
   bde04:	000bb009 	.word	0x000bb009
   bde08:	000bb019 	.word	0x000bb019
   bde0c:	000bb0d1 	.word	0x000bb0d1
   bde10:	000bb66d 	.word	0x000bb66d
   bde14:	000bb7d1 	.word	0x000bb7d1
