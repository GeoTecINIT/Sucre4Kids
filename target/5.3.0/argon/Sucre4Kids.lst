
c:/Users/SVO/GITSUCRE/Sucre4Kids/target/5.3.0/argon/Sucre4Kids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008f3c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bcf5c  000bcf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000b8  2003cc58  000bcf80  0001cc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001ae0  2003cd10  2003cd10  0003cd10  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bd038  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd03c  000bd03c  0002d03c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd042  000bd042  0002d042  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd066  000bd066  0002d066  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00176844  00000000  00000000  0002d06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00019766  00000000  00000000  001a38ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000539e5  00000000  00000000  001bd014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000038d0  00000000  00000000  002109f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c828  00000000  00000000  002142c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045c11  00000000  00000000  00220af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005cf33  00000000  00000000  00266702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014673f  00000000  00000000  002c3635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000acc0  00000000  00000000  00409d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2f>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b47c4:	bf24      	itt	cs
   b47c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b47ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b47ce:	d90d      	bls.n	b47ec <__aeabi_d2f+0x30>
   b47d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b47d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b47d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b47dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b47e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b47e4:	bf08      	it	eq
   b47e6:	f020 0001 	biceq.w	r0, r0, #1
   b47ea:	4770      	bx	lr
   b47ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b47f0:	d121      	bne.n	b4836 <__aeabi_d2f+0x7a>
   b47f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b47f6:	bfbc      	itt	lt
   b47f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	4770      	bxlt	lr
   b47fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4802:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4806:	f1c2 0218 	rsb	r2, r2, #24
   b480a:	f1c2 0c20 	rsb	ip, r2, #32
   b480e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4812:	fa20 f002 	lsr.w	r0, r0, r2
   b4816:	bf18      	it	ne
   b4818:	f040 0001 	orrne.w	r0, r0, #1
   b481c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4824:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4828:	ea40 000c 	orr.w	r0, r0, ip
   b482c:	fa23 f302 	lsr.w	r3, r3, r2
   b4830:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4834:	e7cc      	b.n	b47d0 <__aeabi_d2f+0x14>
   b4836:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b483a:	d107      	bne.n	b484c <__aeabi_d2f+0x90>
   b483c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4840:	bf1e      	ittt	ne
   b4842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b484a:	4770      	bxne	lr
   b484c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4858:	4770      	bx	lr
   b485a:	bf00      	nop

000b485c <strlen>:
   b485c:	4603      	mov	r3, r0
   b485e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4862:	2a00      	cmp	r2, #0
   b4864:	d1fb      	bne.n	b485e <strlen+0x2>
   b4866:	1a18      	subs	r0, r3, r0
   b4868:	3801      	subs	r0, #1
   b486a:	4770      	bx	lr

000b486c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b486c:	4809      	ldr	r0, [pc, #36]	; (b4894 <module_user_pre_init+0x28>)
   b486e:	490a      	ldr	r1, [pc, #40]	; (b4898 <module_user_pre_init+0x2c>)
   b4870:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4872:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4874:	d005      	beq.n	b4882 <module_user_pre_init+0x16>
   b4876:	4a09      	ldr	r2, [pc, #36]	; (b489c <module_user_pre_init+0x30>)
   b4878:	4282      	cmp	r2, r0
   b487a:	d002      	beq.n	b4882 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b487c:	1a12      	subs	r2, r2, r0
   b487e:	f006 faf1 	bl	bae64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4882:	4807      	ldr	r0, [pc, #28]	; (b48a0 <module_user_pre_init+0x34>)
   b4884:	4a07      	ldr	r2, [pc, #28]	; (b48a4 <module_user_pre_init+0x38>)
   b4886:	2100      	movs	r1, #0
   b4888:	1a12      	subs	r2, r2, r0
   b488a:	f006 faf9 	bl	bae80 <memset>
    return &link_global_data_start;
}
   b488e:	4801      	ldr	r0, [pc, #4]	; (b4894 <module_user_pre_init+0x28>)
   b4890:	bd08      	pop	{r3, pc}
   b4892:	bf00      	nop
   b4894:	2003cc58 	.word	0x2003cc58
   b4898:	000bcf80 	.word	0x000bcf80
   b489c:	2003cd10 	.word	0x2003cd10
   b48a0:	2003cd10 	.word	0x2003cd10
   b48a4:	2003e7f0 	.word	0x2003e7f0

000b48a8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48a8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48aa:	4e07      	ldr	r6, [pc, #28]	; (b48c8 <module_user_init+0x20>)
   b48ac:	4c07      	ldr	r4, [pc, #28]	; (b48cc <module_user_init+0x24>)
    module_user_init_hook();
   b48ae:	f005 fe69 	bl	ba584 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48b2:	1ba4      	subs	r4, r4, r6
   b48b4:	08a4      	lsrs	r4, r4, #2
   b48b6:	2500      	movs	r5, #0
   b48b8:	42ac      	cmp	r4, r5
   b48ba:	d100      	bne.n	b48be <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48bc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48be:	f856 3b04 	ldr.w	r3, [r6], #4
   b48c2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c4:	3501      	adds	r5, #1
   b48c6:	e7f7      	b.n	b48b8 <module_user_init+0x10>
   b48c8:	000bcf38 	.word	0x000bcf38
   b48cc:	000bcf5c 	.word	0x000bcf5c

000b48d0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48d0:	f001 b952 	b.w	b5b78 <setup>

000b48d4 <module_user_loop>:
}

void module_user_loop() {
   b48d4:	b508      	push	{r3, lr}
    loop();
   b48d6:	f002 f819 	bl	b690c <loop>
    _post_loop();
}
   b48da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48de:	f005 be09 	b.w	ba4f4 <_post_loop>

000b48e2 <_Znaj>:
   b48e2:	f005 bac9 	b.w	b9e78 <malloc>

000b48e6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b48e6:	f005 bacf 	b.w	b9e88 <free>
	...

000b48ec <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b48ec:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b48ee:	4a03      	ldr	r2, [pc, #12]	; (b48fc <__cxa_pure_virtual+0x10>)
   b48f0:	4903      	ldr	r1, [pc, #12]	; (b4900 <__cxa_pure_virtual+0x14>)
   b48f2:	200c      	movs	r0, #12
   b48f4:	f005 fa24 	bl	b9d40 <panic_>
  while (1);
   b48f8:	e7fe      	b.n	b48f8 <__cxa_pure_virtual+0xc>
   b48fa:	bf00      	nop
   b48fc:	000b9a91 	.word	0x000b9a91
   b4900:	000bb0b4 	.word	0x000bb0b4

000b4904 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4904:	7800      	ldrb	r0, [r0, #0]
   b4906:	fab0 f080 	clz	r0, r0
   b490a:	0940      	lsrs	r0, r0, #5
   b490c:	4770      	bx	lr

000b490e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b490e:	2301      	movs	r3, #1
   b4910:	7003      	strb	r3, [r0, #0]
   b4912:	4770      	bx	lr

000b4914 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b4914:	4a08      	ldr	r2, [pc, #32]	; (b4938 <_Z10borradoALLi.part.0+0x24>)
   b4916:	2300      	movs	r3, #0
   b4918:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b491a:	4a08      	ldr	r2, [pc, #32]	; (b493c <_Z10borradoALLi.part.0+0x28>)
   b491c:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b491e:	4a08      	ldr	r2, [pc, #32]	; (b4940 <_Z10borradoALLi.part.0+0x2c>)
   b4920:	7013      	strb	r3, [r2, #0]

      numBloque = -1;
   b4922:	4a08      	ldr	r2, [pc, #32]	; (b4944 <_Z10borradoALLi.part.0+0x30>)
   b4924:	f04f 31ff 	mov.w	r1, #4294967295
   b4928:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b492a:	4a07      	ldr	r2, [pc, #28]	; (b4948 <_Z10borradoALLi.part.0+0x34>)
   b492c:	2103      	movs	r1, #3
   b492e:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b4930:	4a06      	ldr	r2, [pc, #24]	; (b494c <_Z10borradoALLi.part.0+0x38>)
   b4932:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b4934:	4770      	bx	lr
   b4936:	bf00      	nop
   b4938:	2003cd1d 	.word	0x2003cd1d
   b493c:	2003cd2c 	.word	0x2003cd2c
   b4940:	2003cd1c 	.word	0x2003cd1c
   b4944:	2003cc80 	.word	0x2003cc80
   b4948:	2003cc84 	.word	0x2003cc84
   b494c:	2003da44 	.word	0x2003da44

000b4950 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4950:	b40e      	push	{r1, r2, r3}
   b4952:	b503      	push	{r0, r1, lr}
   b4954:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4956:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4958:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b495c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b495e:	f005 fd5a 	bl	ba416 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4962:	b002      	add	sp, #8
   b4964:	f85d eb04 	ldr.w	lr, [sp], #4
   b4968:	b003      	add	sp, #12
   b496a:	4770      	bx	lr

000b496c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b496c:	b40e      	push	{r1, r2, r3}
   b496e:	b503      	push	{r0, r1, lr}
   b4970:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4972:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4974:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4978:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b497a:	f005 fd4c 	bl	ba416 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b497e:	b002      	add	sp, #8
   b4980:	f85d eb04 	ldr.w	lr, [sp], #4
   b4984:	b003      	add	sp, #12
   b4986:	4770      	bx	lr

000b4988 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4988:	b507      	push	{r0, r1, r2, lr}
   b498a:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b498c:	a801      	add	r0, sp, #4
   b498e:	f004 f9f1 	bl	b8d74 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4992:	a801      	add	r0, sp, #4
   b4994:	f004 f9f0 	bl	b8d78 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4998:	2809      	cmp	r0, #9
   b499a:	bf8c      	ite	hi
   b499c:	2000      	movhi	r0, #0
   b499e:	2001      	movls	r0, #1
   b49a0:	b003      	add	sp, #12
   b49a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b49a6 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b49a6:	b507      	push	{r0, r1, r2, lr}
   b49a8:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b49aa:	a801      	add	r0, sp, #4
   b49ac:	f004 f9e2 	bl	b8d74 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b49b0:	a801      	add	r0, sp, #4
   b49b2:	f004 f9e1 	bl	b8d78 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b49b6:	280a      	cmp	r0, #10
   b49b8:	bfd4      	ite	le
   b49ba:	2000      	movle	r0, #0
   b49bc:	2001      	movgt	r0, #1
   b49be:	b003      	add	sp, #12
   b49c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b49c4 <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b49c4:	2802      	cmp	r0, #2
{
   b49c6:	b508      	push	{r3, lr}
    switch (puerto)
   b49c8:	d00b      	beq.n	b49e2 <_Z5siLuzi+0x1e>
   b49ca:	2804      	cmp	r0, #4
   b49cc:	d00b      	beq.n	b49e6 <_Z5siLuzi+0x22>
   b49ce:	b960      	cbnz	r0, b49ea <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b49d0:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b49d2:	f006 f96c 	bl	bacae <analogRead>
   b49d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b49da:	bfb4      	ite	lt
   b49dc:	2000      	movlt	r0, #0
   b49de:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b49e0:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b49e2:	2011      	movs	r0, #17
   b49e4:	e7f5      	b.n	b49d2 <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b49e6:	200f      	movs	r0, #15
   b49e8:	e7f3      	b.n	b49d2 <_Z5siLuzi+0xe>
    switch (puerto)
   b49ea:	2000      	movs	r0, #0
   b49ec:	e7f8      	b.n	b49e0 <_Z5siLuzi+0x1c>

000b49ee <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b49ee:	2802      	cmp	r0, #2
{
   b49f0:	b508      	push	{r3, lr}
    switch (puerto)
   b49f2:	d00b      	beq.n	b4a0c <_Z5noLuzi+0x1e>
   b49f4:	2804      	cmp	r0, #4
   b49f6:	d00b      	beq.n	b4a10 <_Z5noLuzi+0x22>
   b49f8:	b960      	cbnz	r0, b4a14 <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b49fa:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b49fc:	f006 f957 	bl	bacae <analogRead>
   b4a00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4a04:	bfcc      	ite	gt
   b4a06:	2000      	movgt	r0, #0
   b4a08:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4a0a:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4a0c:	2011      	movs	r0, #17
   b4a0e:	e7f5      	b.n	b49fc <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4a10:	200f      	movs	r0, #15
   b4a12:	e7f3      	b.n	b49fc <_Z5noLuzi+0xe>
    switch (puerto)
   b4a14:	2000      	movs	r0, #0
   b4a16:	e7f8      	b.n	b4a0a <_Z5noLuzi+0x1c>

000b4a18 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
   b4a18:	b508      	push	{r3, lr}
    int sonido = analogRead(puerto);
   b4a1a:	b280      	uxth	r0, r0
   b4a1c:	f006 f947 	bl	bacae <analogRead>
    if (sonido >= 700)
        return true;
    return false;
}
   b4a20:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4a24:	bfb4      	ite	lt
   b4a26:	2000      	movlt	r0, #0
   b4a28:	2001      	movge	r0, #1
   b4a2a:	bd08      	pop	{r3, pc}

000b4a2c <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4a2c:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4a2e:	b280      	uxth	r0, r0
   b4a30:	f006 f93d 	bl	bacae <analogRead>
        return true;
    return false;
}
   b4a34:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4a38:	bfcc      	ite	gt
   b4a3a:	2000      	movgt	r0, #0
   b4a3c:	2001      	movle	r0, #1
   b4a3e:	bd08      	pop	{r3, pc}

000b4a40 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4a40:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4a42:	b280      	uxth	r0, r0
   b4a44:	2100      	movs	r1, #0
   b4a46:	9001      	str	r0, [sp, #4]
   b4a48:	f006 f8f4 	bl	bac34 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4a4c:	9801      	ldr	r0, [sp, #4]
   b4a4e:	f006 f91b 	bl	bac88 <digitalRead>
        return true;
    return false;
}
   b4a52:	1e43      	subs	r3, r0, #1
   b4a54:	4258      	negs	r0, r3
   b4a56:	4158      	adcs	r0, r3
   b4a58:	b003      	add	sp, #12
   b4a5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4a5e <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4a5e:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4a60:	b280      	uxth	r0, r0
   b4a62:	2100      	movs	r1, #0
   b4a64:	9001      	str	r0, [sp, #4]
   b4a66:	f006 f8e5 	bl	bac34 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4a6a:	9801      	ldr	r0, [sp, #4]
   b4a6c:	f006 f90c 	bl	bac88 <digitalRead>
        return true;
    return false;
}
   b4a70:	fab0 f080 	clz	r0, r0
   b4a74:	0940      	lsrs	r0, r0, #5
   b4a76:	b003      	add	sp, #12
   b4a78:	f85d fb04 	ldr.w	pc, [sp], #4
   b4a7c:	0000      	movs	r0, r0
	...

000b4a80 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4a80:	2802      	cmp	r0, #2
{
   b4a82:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4a84:	d030      	beq.n	b4ae8 <_Z10siRotativoi+0x68>
   b4a86:	2804      	cmp	r0, #4
   b4a88:	d030      	beq.n	b4aec <_Z10siRotativoi+0x6c>
   b4a8a:	b918      	cbnz	r0, b4a94 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4a8c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4a8e:	f006 f90e 	bl	bacae <analogRead>
   b4a92:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4a94:	eddd 7a01 	vldr	s15, [sp, #4]
   b4a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4a9c:	ee17 0a90 	vmov	r0, s15
   b4aa0:	f7ff fc22 	bl	b42e8 <__aeabi_f2d>
   b4aa4:	a314      	add	r3, pc, #80	; (adr r3, b4af8 <_Z10siRotativoi+0x78>)
   b4aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4aaa:	f7ff fc75 	bl	b4398 <__aeabi_dmul>
   b4aae:	a314      	add	r3, pc, #80	; (adr r3, b4b00 <_Z10siRotativoi+0x80>)
   b4ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ab4:	f7ff fd9a 	bl	b45ec <__aeabi_ddiv>
   b4ab8:	f7ff fe80 	bl	b47bc <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4abc:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4af0 <_Z10siRotativoi+0x70>
   b4ac0:	ee07 0a10 	vmov	s14, r0
   b4ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4ac8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4acc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b4ad0:	eddf 7a08 	vldr	s15, [pc, #32]	; b4af4 <_Z10siRotativoi+0x74>
   b4ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4adc:	bf94      	ite	ls
   b4ade:	2001      	movls	r0, #1
   b4ae0:	2000      	movhi	r0, #0
   b4ae2:	b003      	add	sp, #12
   b4ae4:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4ae8:	2011      	movs	r0, #17
   b4aea:	e7d0      	b.n	b4a8e <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4aec:	200f      	movs	r0, #15
   b4aee:	e7ce      	b.n	b4a8e <_Z10siRotativoi+0xe>
   b4af0:	43960000 	.word	0x43960000
   b4af4:	43b40000 	.word	0x43b40000
   b4af8:	66666666 	.word	0x66666666
   b4afc:	400a6666 	.word	0x400a6666
   b4b00:	00000000 	.word	0x00000000
   b4b04:	408ff800 	.word	0x408ff800

000b4b08 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4b08:	2802      	cmp	r0, #2
{
   b4b0a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4b0c:	d030      	beq.n	b4b70 <_Z10noRotativoi+0x68>
   b4b0e:	2804      	cmp	r0, #4
   b4b10:	d030      	beq.n	b4b74 <_Z10noRotativoi+0x6c>
   b4b12:	b918      	cbnz	r0, b4b1c <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4b14:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4b16:	f006 f8ca 	bl	bacae <analogRead>
   b4b1a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4b1c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4b24:	ee17 0a90 	vmov	r0, s15
   b4b28:	f7ff fbde 	bl	b42e8 <__aeabi_f2d>
   b4b2c:	a314      	add	r3, pc, #80	; (adr r3, b4b80 <_Z10noRotativoi+0x78>)
   b4b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b32:	f7ff fc31 	bl	b4398 <__aeabi_dmul>
   b4b36:	a314      	add	r3, pc, #80	; (adr r3, b4b88 <_Z10noRotativoi+0x80>)
   b4b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b3c:	f7ff fd56 	bl	b45ec <__aeabi_ddiv>
   b4b40:	f7ff fe3c 	bl	b47bc <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4b44:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4b78 <_Z10noRotativoi+0x70>
   b4b48:	ee07 0a10 	vmov	s14, r0
   b4b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4b50:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4b54:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4b58:	eddf 7a08 	vldr	s15, [pc, #32]	; b4b7c <_Z10noRotativoi+0x74>
   b4b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4b64:	bfac      	ite	ge
   b4b66:	2001      	movge	r0, #1
   b4b68:	2000      	movlt	r0, #0
   b4b6a:	b003      	add	sp, #12
   b4b6c:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4b70:	2011      	movs	r0, #17
   b4b72:	e7d0      	b.n	b4b16 <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4b74:	200f      	movs	r0, #15
   b4b76:	e7ce      	b.n	b4b16 <_Z10noRotativoi+0xe>
   b4b78:	43960000 	.word	0x43960000
   b4b7c:	43b40000 	.word	0x43b40000
   b4b80:	66666666 	.word	0x66666666
   b4b84:	400a6666 	.word	0x400a6666
   b4b88:	00000000 	.word	0x00000000
   b4b8c:	408ff800 	.word	0x408ff800

000b4b90 <_Z10BotonDualAi>:

bool BotonDualA(int puerto)
{
   b4b90:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4b92:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4b94:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4b96:	2100      	movs	r1, #0
   b4b98:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4b9a:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4b9c:	f006 f84a 	bl	bac34 <pinMode>
    pinMode(puerto+1, INPUT);
   b4ba0:	4628      	mov	r0, r5
   b4ba2:	2100      	movs	r1, #0
   b4ba4:	f006 f846 	bl	bac34 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == HIGH)
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f006 f86d 	bl	bac88 <digitalRead>
   b4bae:	b930      	cbnz	r0, b4bbe <_Z10BotonDualAi+0x2e>
   b4bb0:	4628      	mov	r0, r5
   b4bb2:	f006 f869 	bl	bac88 <digitalRead>
   b4bb6:	1e43      	subs	r3, r0, #1
   b4bb8:	4258      	negs	r0, r3
   b4bba:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4bbc:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4bbe:	2000      	movs	r0, #0
   b4bc0:	e7fc      	b.n	b4bbc <_Z10BotonDualAi+0x2c>

000b4bc2 <_Z10BotonDualBi>:

bool BotonDualB(int puerto)
{
   b4bc2:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto+1, INPUT);
   b4bc4:	b284      	uxth	r4, r0
   b4bc6:	1c65      	adds	r5, r4, #1
   b4bc8:	b2ad      	uxth	r5, r5
   b4bca:	2100      	movs	r1, #0
   b4bcc:	4628      	mov	r0, r5
   b4bce:	f006 f831 	bl	bac34 <pinMode>
    pinMode(puerto, INPUT);
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	2100      	movs	r1, #0
   b4bd6:	f006 f82d 	bl	bac34 <pinMode>
    if (digitalRead(puerto+1) == LOW && digitalRead(puerto) == HIGH)
   b4bda:	4628      	mov	r0, r5
   b4bdc:	f006 f854 	bl	bac88 <digitalRead>
   b4be0:	b930      	cbnz	r0, b4bf0 <_Z10BotonDualBi+0x2e>
   b4be2:	4620      	mov	r0, r4
   b4be4:	f006 f850 	bl	bac88 <digitalRead>
   b4be8:	1e43      	subs	r3, r0, #1
   b4bea:	4258      	negs	r0, r3
   b4bec:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4bee:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4bf0:	2000      	movs	r0, #0
   b4bf2:	e7fc      	b.n	b4bee <_Z10BotonDualBi+0x2c>

000b4bf4 <_Z10BotonDual2i>:

bool BotonDual2(int puerto)
{
   b4bf4:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4bf6:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4bf8:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4bfa:	2100      	movs	r1, #0
   b4bfc:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4bfe:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4c00:	f006 f818 	bl	bac34 <pinMode>
    pinMode(puerto+1, INPUT);
   b4c04:	4628      	mov	r0, r5
   b4c06:	2100      	movs	r1, #0
   b4c08:	f006 f814 	bl	bac34 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == LOW)
   b4c0c:	4620      	mov	r0, r4
   b4c0e:	f006 f83b 	bl	bac88 <digitalRead>
   b4c12:	b930      	cbnz	r0, b4c22 <_Z10BotonDual2i+0x2e>
   b4c14:	4628      	mov	r0, r5
   b4c16:	f006 f837 	bl	bac88 <digitalRead>
   b4c1a:	fab0 f080 	clz	r0, r0
   b4c1e:	0940      	lsrs	r0, r0, #5
        return true;
    return false;
}
   b4c20:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4c22:	2000      	movs	r0, #0
   b4c24:	e7fc      	b.n	b4c20 <_Z10BotonDual2i+0x2c>

000b4c26 <_Z11noBotonDuali>:

bool noBotonDual(int puerto)
{
   b4c26:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4c28:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4c2a:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4c30:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4c32:	f005 ffff 	bl	bac34 <pinMode>
    pinMode(puerto+1, INPUT);
   b4c36:	2100      	movs	r1, #0
   b4c38:	4628      	mov	r0, r5
   b4c3a:	f005 fffb 	bl	bac34 <pinMode>
    if (digitalRead(puerto) == HIGH && digitalRead(puerto+1) == HIGH)
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f006 f822 	bl	bac88 <digitalRead>
   b4c44:	2801      	cmp	r0, #1
   b4c46:	d106      	bne.n	b4c56 <_Z11noBotonDuali+0x30>
   b4c48:	4628      	mov	r0, r5
   b4c4a:	f006 f81d 	bl	bac88 <digitalRead>
   b4c4e:	1e43      	subs	r3, r0, #1
   b4c50:	4258      	negs	r0, r3
   b4c52:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4c54:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4c56:	2000      	movs	r0, #0
   b4c58:	e7fc      	b.n	b4c54 <_Z11noBotonDuali+0x2e>

000b4c5a <_Z4Cafei>:


bool Cafe(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4c5a:	2802      	cmp	r0, #2
{
   b4c5c:	b538      	push	{r3, r4, r5, lr}
    switch (puerto)
   b4c5e:	d01c      	beq.n	b4c9a <_Z4Cafei+0x40>
   b4c60:	2804      	cmp	r0, #4
   b4c62:	d01c      	beq.n	b4c9e <_Z4Cafei+0x44>
   b4c64:	b918      	cbnz	r0, b4c6e <_Z4Cafei+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4c66:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4c68:	f006 f821 	bl	bacae <analogRead>
   b4c6c:	4604      	mov	r4, r0
        break;
    }
    Serial.println(sensor_value);
   b4c6e:	f005 fdab 	bl	ba7c8 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4c72:	2c00      	cmp	r4, #0
   b4c74:	4605      	mov	r5, r0
   b4c76:	da14      	bge.n	b4ca2 <_Z4Cafei+0x48>
            t = print('-');
   b4c78:	212d      	movs	r1, #45	; 0x2d
   b4c7a:	f005 fb95 	bl	ba3a8 <_ZN5Print5printEc>
            val = -n;
   b4c7e:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c80:	220a      	movs	r2, #10
   b4c82:	4628      	mov	r0, r5
   b4c84:	f005 fba9 	bl	ba3da <_ZN5Print11printNumberEmh>
        n += println();
   b4c88:	4628      	mov	r0, r5
   b4c8a:	f005 fb90 	bl	ba3ae <_ZN5Print7printlnEv>
    if (sensor_value < 2000)
        return true;
    return false;
}
   b4c8e:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4c92:	bfac      	ite	ge
   b4c94:	2000      	movge	r0, #0
   b4c96:	2001      	movlt	r0, #1
   b4c98:	bd38      	pop	{r3, r4, r5, pc}
        sensor_value = analogRead(A2);
   b4c9a:	2011      	movs	r0, #17
   b4c9c:	e7e4      	b.n	b4c68 <_Z4Cafei+0xe>
        sensor_value = analogRead(A4);
   b4c9e:	200f      	movs	r0, #15
   b4ca0:	e7e2      	b.n	b4c68 <_Z4Cafei+0xe>
            val = n;
   b4ca2:	4621      	mov	r1, r4
   b4ca4:	e7ec      	b.n	b4c80 <_Z4Cafei+0x26>

000b4ca6 <_Z9AguaClarai>:

bool AguaClara(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4ca6:	2802      	cmp	r0, #2
{
   b4ca8:	b508      	push	{r3, lr}
    switch (puerto)
   b4caa:	d00d      	beq.n	b4cc8 <_Z9AguaClarai+0x22>
   b4cac:	2804      	cmp	r0, #4
   b4cae:	d00d      	beq.n	b4ccc <_Z9AguaClarai+0x26>
   b4cb0:	b918      	cbnz	r0, b4cba <_Z9AguaClarai+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4cb2:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4cb4:	f005 fffb 	bl	bacae <analogRead>
   b4cb8:	4603      	mov	r3, r0
        break;
    }
    if (sensor_value > 2500)
        return true;
    return false;
}
   b4cba:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b4cbe:	4283      	cmp	r3, r0
   b4cc0:	bfd4      	ite	le
   b4cc2:	2000      	movle	r0, #0
   b4cc4:	2001      	movgt	r0, #1
   b4cc6:	bd08      	pop	{r3, pc}
        sensor_value = analogRead(A2);
   b4cc8:	2011      	movs	r0, #17
   b4cca:	e7f3      	b.n	b4cb4 <_Z9AguaClarai+0xe>
        sensor_value = analogRead(A4);
   b4ccc:	200f      	movs	r0, #15
   b4cce:	e7f1      	b.n	b4cb4 <_Z9AguaClarai+0xe>

000b4cd0 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4cd0:	b530      	push	{r4, r5, lr}
   b4cd2:	ed2d 8b02 	vpush	{d8}
   b4cd6:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4cd8:	b2c1      	uxtb	r1, r0
   b4cda:	2306      	movs	r3, #6
   b4cdc:	220b      	movs	r2, #11
   b4cde:	a801      	add	r0, sp, #4
   b4ce0:	f004 f86e 	bl	b8dc0 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4ce4:	a801      	add	r0, sp, #4
   b4ce6:	f004 f872 	bl	b8dce <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4cea:	a801      	add	r0, sp, #4
   b4cec:	f004 f92c 	bl	b8f48 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4cf0:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4cf8:	eeb4 0a40 	vcmp.f32	s0, s0
   b4cfc:	bf0c      	ite	eq
   b4cfe:	2401      	moveq	r4, #1
   b4d00:	2400      	movne	r4, #0
   b4d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d06:	bf68      	it	vs
   b4d08:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4d0c:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4d10:	2c00      	cmp	r4, #0
   b4d12:	d1ea      	bne.n	b4cea <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4d14:	f005 fd58 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b4d18:	4605      	mov	r5, r0
   b4d1a:	ee18 0a10 	vmov	r0, s16
   b4d1e:	f7ff fae3 	bl	b42e8 <__aeabi_f2d>
   b4d22:	4602      	mov	r2, r0
   b4d24:	460b      	mov	r3, r1
   b4d26:	4628      	mov	r0, r5
   b4d28:	490a      	ldr	r1, [pc, #40]	; (b4d54 <_Z8tempFrioi+0x84>)
   b4d2a:	f7ff fe1f 	bl	b496c <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4d2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d36:	dd08      	ble.n	b4d4a <_Z8tempFrioi+0x7a>
   b4d38:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4d3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d44:	bf4c      	ite	mi
   b4d46:	2401      	movmi	r4, #1
   b4d48:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	b007      	add	sp, #28
   b4d4e:	ecbd 8b02 	vpop	{d8}
   b4d52:	bd30      	pop	{r4, r5, pc}
   b4d54:	000bb0c9 	.word	0x000bb0c9

000b4d58 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4d58:	b510      	push	{r4, lr}
   b4d5a:	ed2d 8b02 	vpush	{d8}
   b4d5e:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4d60:	b2c1      	uxtb	r1, r0
   b4d62:	2306      	movs	r3, #6
   b4d64:	220b      	movs	r2, #11
   b4d66:	a801      	add	r0, sp, #4
   b4d68:	f004 f82a 	bl	b8dc0 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4d6c:	a801      	add	r0, sp, #4
   b4d6e:	f004 f82e 	bl	b8dce <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4d72:	a801      	add	r0, sp, #4
   b4d74:	f004 f8e8 	bl	b8f48 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4d78:	eeb4 0a40 	vcmp.f32	s0, s0
   b4d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4d80:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4d84:	d6f5      	bvs.n	b4d72 <_Z12tempTempladoi+0x1a>
   b4d86:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d8e:	d0f0      	beq.n	b4d72 <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4d90:	f005 fd1a 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b4d94:	4604      	mov	r4, r0
   b4d96:	ee18 0a10 	vmov	r0, s16
   b4d9a:	f7ff faa5 	bl	b42e8 <__aeabi_f2d>
   b4d9e:	4602      	mov	r2, r0
   b4da0:	460b      	mov	r3, r1
   b4da2:	4620      	mov	r0, r4
   b4da4:	490c      	ldr	r1, [pc, #48]	; (b4dd8 <_Z12tempTempladoi+0x80>)
   b4da6:	f7ff fde1 	bl	b496c <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4daa:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4dae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4db6:	dc04      	bgt.n	b4dc2 <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4db8:	2000      	movs	r0, #0
}
   b4dba:	b006      	add	sp, #24
   b4dbc:	ecbd 8b02 	vpop	{d8}
   b4dc0:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4dc2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4dc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4dce:	bf4c      	ite	mi
   b4dd0:	2001      	movmi	r0, #1
   b4dd2:	2000      	movpl	r0, #0
   b4dd4:	e7f1      	b.n	b4dba <_Z12tempTempladoi+0x62>
   b4dd6:	bf00      	nop
   b4dd8:	000bb0c9 	.word	0x000bb0c9

000b4ddc <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4ddc:	b530      	push	{r4, r5, lr}
   b4dde:	ed2d 8b02 	vpush	{d8}
   b4de2:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4de4:	b2c1      	uxtb	r1, r0
   b4de6:	2306      	movs	r3, #6
   b4de8:	220b      	movs	r2, #11
   b4dea:	a801      	add	r0, sp, #4
   b4dec:	f003 ffe8 	bl	b8dc0 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4df0:	a801      	add	r0, sp, #4
   b4df2:	f003 ffec 	bl	b8dce <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4df6:	a801      	add	r0, sp, #4
   b4df8:	f004 f8a6 	bl	b8f48 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4dfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e04:	eeb4 0a40 	vcmp.f32	s0, s0
   b4e08:	bf0c      	ite	eq
   b4e0a:	2401      	moveq	r4, #1
   b4e0c:	2400      	movne	r4, #0
   b4e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e12:	bf68      	it	vs
   b4e14:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4e18:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4e1c:	2c00      	cmp	r4, #0
   b4e1e:	d1ea      	bne.n	b4df6 <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4e20:	f005 fcd2 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b4e24:	4605      	mov	r5, r0
   b4e26:	ee18 0a10 	vmov	r0, s16
   b4e2a:	f7ff fa5d 	bl	b42e8 <__aeabi_f2d>
   b4e2e:	4602      	mov	r2, r0
   b4e30:	460b      	mov	r3, r1
   b4e32:	4628      	mov	r0, r5
   b4e34:	490b      	ldr	r1, [pc, #44]	; (b4e64 <_Z9tempCalori+0x88>)
   b4e36:	f7ff fd99 	bl	b496c <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4e3a:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4e3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e46:	dd08      	ble.n	b4e5a <_Z9tempCalori+0x7e>
   b4e48:	eddf 7a07 	vldr	s15, [pc, #28]	; b4e68 <_Z9tempCalori+0x8c>
   b4e4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e54:	bf4c      	ite	mi
   b4e56:	2401      	movmi	r4, #1
   b4e58:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4e5a:	4620      	mov	r0, r4
   b4e5c:	b007      	add	sp, #28
   b4e5e:	ecbd 8b02 	vpop	{d8}
   b4e62:	bd30      	pop	{r4, r5, pc}
   b4e64:	000bb0c9 	.word	0x000bb0c9
   b4e68:	42480000 	.word	0x42480000

000b4e6c <_Z12DistanciaExpi>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   3 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

int DistanciaExp(int puerto)
{
   b4e6c:	b507      	push	{r0, r1, r2, lr}
   b4e6e:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4e70:	a801      	add	r0, sp, #4
   b4e72:	f003 ff7f 	bl	b8d74 <_ZN10UltrasonicC1Ei>
    int range = ultrasonic.MeasureInCentimeters();
   b4e76:	a801      	add	r0, sp, #4
   b4e78:	f003 ff7e 	bl	b8d78 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    return range;
}
   b4e7c:	b003      	add	sp, #12
   b4e7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4e84 <_Z9AnguloExpv>:

int AnguloExp()
{
   b4e84:	b508      	push	{r3, lr}
   float voltage;
   int sensor_value = analogRead(rotoryAngle_PIN);
   b4e86:	2013      	movs	r0, #19
   b4e88:	f005 ff11 	bl	bacae <analogRead>
   voltage = (float)sensor_value * 5 / 1023;
   b4e8c:	ee07 0a90 	vmov	s15, r0
   b4e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4e94:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4e98:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b4e9c:	ed9f 6a07 	vldr	s12, [pc, #28]	; b4ebc <_Z9AnguloExpv+0x38>
   b4ea0:	ee87 7a86 	vdiv.f32	s14, s15, s12
   float degrees = (voltage * 300) / 5;
   b4ea4:	eddf 7a06 	vldr	s15, [pc, #24]	; b4ec0 <_Z9AnguloExpv+0x3c>
   b4ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4eac:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return (int) degrees;
}
   b4eb0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   b4eb4:	ee17 0a90 	vmov	r0, s15
   b4eb8:	bd08      	pop	{r3, pc}
   b4eba:	bf00      	nop
   b4ebc:	447fc000 	.word	0x447fc000
   b4ec0:	43960000 	.word	0x43960000

000b4ec4 <_Z6LuzExpv>:

int LuzExp()
{
   return analogRead(sensorLuz_PIN);
   b4ec4:	2011      	movs	r0, #17
   b4ec6:	f005 bef2 	b.w	bacae <analogRead>

000b4eca <_Z15SensorSonidoExpv>:
}

int SensorSonidoExp()
{
   return analogRead(sensorSonido_PIN);
   b4eca:	200f      	movs	r0, #15
   b4ecc:	f005 beef 	b.w	bacae <analogRead>

000b4ed0 <_Z13SensorTempExpi>:
}

int SensorTempExp(int puerto)
{
   b4ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    DHT dht(puerto, DHT11);
   b4ed2:	b2c1      	uxtb	r1, r0
   b4ed4:	2306      	movs	r3, #6
   b4ed6:	220b      	movs	r2, #11
   b4ed8:	a801      	add	r0, sp, #4
   b4eda:	f003 ff71 	bl	b8dc0 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4ede:	a801      	add	r0, sp, #4
   b4ee0:	f003 ff75 	bl	b8dce <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4ee4:	a801      	add	r0, sp, #4
   b4ee6:	f004 f82f 	bl	b8f48 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4eea:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ef2:	d0f7      	beq.n	b4ee4 <_Z13SensorTempExpi+0x14>
   b4ef4:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4efc:	d6f2      	bvs.n	b4ee4 <_Z13SensorTempExpi+0x14>
    {
        t = dht.getTempCelcius();
    }
    return t;
}
   b4efe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4f02:	ee17 0a90 	vmov	r0, s15
   b4f06:	b007      	add	sp, #28
   b4f08:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f0c <_Z10leerSensoriii>:


bool leerSensor(int id, int condicion, int puerto)
{
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4603      	mov	r3, r0
   b4f10:	3b01      	subs	r3, #1
   b4f12:	4610      	mov	r0, r2
   b4f14:	2b0b      	cmp	r3, #11
   b4f16:	d85f      	bhi.n	b4fd8 <_Z10leerSensoriii+0xcc>
   b4f18:	e8df f003 	tbb	[pc, r3]
   b4f1c:	1d140b06 	.word	0x1d140b06
   b4f20:	40062b22 	.word	0x40062b22
   b4f24:	5b575346 	.word	0x5b575346
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4f28:	bba1      	cbnz	r1, b4f94 <_Z10leerSensoriii+0x88>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
}
   b4f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4f2e:	f7ff bd2b 	b.w	b4988 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4f32:	b919      	cbnz	r1, b4f3c <_Z10leerSensoriii+0x30>
}
   b4f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4f38:	f7ff bd59 	b.w	b49ee <_Z5noLuzi>
}
   b4f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b4f40:	f7ff bd40 	b.w	b49c4 <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4f44:	b919      	cbnz	r1, b4f4e <_Z10leerSensoriii+0x42>
}
   b4f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4f4a:	f7ff bd6f 	b.w	b4a2c <_Z7noRuidoi>
}
   b4f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b4f52:	f7ff bd61 	b.w	b4a18 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4f56:	bb19      	cbnz	r1, b4fa0 <_Z10leerSensoriii+0x94>
}
   b4f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4f5c:	f7ff bd7f 	b.w	b4a5e <_Z7noBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b4f60:	b919      	cbnz	r1, b4f6a <_Z10leerSensoriii+0x5e>
}
   b4f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b4f66:	f7ff bdcf 	b.w	b4b08 <_Z10noRotativoi>
}
   b4f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b4f6e:	f7ff bd87 	b.w	b4a80 <_Z10siRotativoi>
        switch (condicion)
   b4f72:	2901      	cmp	r1, #1
   b4f74:	d006      	beq.n	b4f84 <_Z10leerSensoriii+0x78>
   b4f76:	2902      	cmp	r1, #2
   b4f78:	d008      	beq.n	b4f8c <_Z10leerSensoriii+0x80>
   b4f7a:	b959      	cbnz	r1, b4f94 <_Z10leerSensoriii+0x88>
}
   b4f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b4f80:	f7ff bea6 	b.w	b4cd0 <_Z8tempFrioi>
}
   b4f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b4f88:	f7ff bee6 	b.w	b4d58 <_Z12tempTempladoi>
}
   b4f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b4f90:	f7ff bf24 	b.w	b4ddc <_Z9tempCalori>
}
   b4f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b4f98:	f7ff bd05 	b.w	b49a6 <_Z11siDistanciai>
        return (condicion == 0 ? noAgua(puerto) : siAgua(puerto));
   b4f9c:	2900      	cmp	r1, #0
   b4f9e:	d1db      	bne.n	b4f58 <_Z10leerSensoriii+0x4c>
}
   b4fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b4fa4:	f7ff bd4c 	b.w	b4a40 <_Z7siBotoni>
        switch (condicion)
   b4fa8:	2901      	cmp	r1, #1
   b4faa:	d006      	beq.n	b4fba <_Z10leerSensoriii+0xae>
   b4fac:	2903      	cmp	r1, #3
   b4fae:	d00c      	beq.n	b4fca <_Z10leerSensoriii+0xbe>
   b4fb0:	b939      	cbnz	r1, b4fc2 <_Z10leerSensoriii+0xb6>
}
   b4fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return noBotonDual(puerto);
   b4fb6:	f7ff be36 	b.w	b4c26 <_Z11noBotonDuali>
}
   b4fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualA(puerto);
   b4fbe:	f7ff bde7 	b.w	b4b90 <_Z10BotonDualAi>
}
   b4fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualB(puerto);
   b4fc6:	f7ff bdfc 	b.w	b4bc2 <_Z10BotonDualBi>
}
   b4fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDual2(puerto);
   b4fce:	f7ff be11 	b.w	b4bf4 <_Z10BotonDual2i>
        switch (condicion)
   b4fd2:	b141      	cbz	r1, b4fe6 <_Z10leerSensoriii+0xda>
   b4fd4:	2901      	cmp	r1, #1
   b4fd6:	d00a      	beq.n	b4fee <_Z10leerSensoriii+0xe2>
        Serial.println("InvalidSensorError");
   b4fd8:	f005 fbf6 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b4fdc:	4906      	ldr	r1, [pc, #24]	; (b4ff8 <_Z10leerSensoriii+0xec>)
   b4fde:	f005 f9f2 	bl	ba3c6 <_ZN5Print7printlnEPKc>
}
   b4fe2:	2000      	movs	r0, #0
   b4fe4:	bd08      	pop	{r3, pc}
   b4fe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return Cafe(puerto);
   b4fea:	f7ff be36 	b.w	b4c5a <_Z4Cafei>
}
   b4fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return AguaClara(puerto);           
   b4ff2:	f7ff be58 	b.w	b4ca6 <_Z9AguaClarai>
   b4ff6:	bf00      	nop
   b4ff8:	000bb0d2 	.word	0x000bb0d2

000b4ffc <_Z13leerSensorExpii>:

int leerSensorExp(int id, int puerto){
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4603      	mov	r3, r0
   b5000:	3b02      	subs	r3, #2
   b5002:	4608      	mov	r0, r1
   b5004:	2b05      	cmp	r3, #5
   b5006:	d818      	bhi.n	b503a <_Z13leerSensorExpii+0x3e>
   b5008:	e8df f003 	tbb	[pc, r3]
   b500c:	0b170703 	.word	0x0b170703
   b5010:	130f      	.short	0x130f
    
    default:
        Serial.println("InvalidSensorError");
        return 0;
    }
}
   b5012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return LuzExp();
   b5016:	f7ff bf55 	b.w	b4ec4 <_Z6LuzExpv>
}
   b501a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorSonidoExp();
   b501e:	f7ff bf54 	b.w	b4eca <_Z15SensorSonidoExpv>
}
   b5022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return AnguloExp();
   b5026:	f7ff bf2d 	b.w	b4e84 <_Z9AnguloExpv>
}
   b502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorTempExp(puerto);
   b502e:	f7ff bf4f 	b.w	b4ed0 <_Z13SensorTempExpi>
}
   b5032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return DistanciaExp(puerto);
   b5036:	f7ff bf19 	b.w	b4e6c <_Z12DistanciaExpi>
        Serial.println("InvalidSensorError");
   b503a:	f005 fbc5 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b503e:	4902      	ldr	r1, [pc, #8]	; (b5048 <_Z13leerSensorExpii+0x4c>)
   b5040:	f005 f9c1 	bl	ba3c6 <_ZN5Print7printlnEPKc>
}
   b5044:	2000      	movs	r0, #0
   b5046:	bd08      	pop	{r3, pc}
   b5048:	000bb0d2 	.word	0x000bb0d2

000b504c <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b504c:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b504e:	2300      	movs	r3, #0
   b5050:	4804      	ldr	r0, [pc, #16]	; (b5064 <_Z9ledApagarv+0x18>)
   b5052:	9300      	str	r3, [sp, #0]
   b5054:	461a      	mov	r2, r3
   b5056:	4619      	mov	r1, r3
   b5058:	f004 fc50 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b505c:	b003      	add	sp, #12
   b505e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5062:	bf00      	nop
   b5064:	2003d6f4 	.word	0x2003d6f4

000b5068 <_Z7ledRojov>:
void ledRojo()
{
   b5068:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b506a:	2300      	movs	r3, #0
   b506c:	4804      	ldr	r0, [pc, #16]	; (b5080 <_Z7ledRojov+0x18>)
   b506e:	9300      	str	r3, [sp, #0]
   b5070:	22ff      	movs	r2, #255	; 0xff
   b5072:	4619      	mov	r1, r3
   b5074:	f004 fc42 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5078:	b003      	add	sp, #12
   b507a:	f85d fb04 	ldr.w	pc, [sp], #4
   b507e:	bf00      	nop
   b5080:	2003d6f4 	.word	0x2003d6f4

000b5084 <_Z8ledVerdev>:
void ledVerde()
{
   b5084:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b5086:	230a      	movs	r3, #10
   b5088:	2200      	movs	r2, #0
   b508a:	9300      	str	r3, [sp, #0]
   b508c:	4803      	ldr	r0, [pc, #12]	; (b509c <_Z8ledVerdev+0x18>)
   b508e:	23ff      	movs	r3, #255	; 0xff
   b5090:	4611      	mov	r1, r2
   b5092:	f004 fc33 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5096:	b003      	add	sp, #12
   b5098:	f85d fb04 	ldr.w	pc, [sp], #4
   b509c:	2003d6f4 	.word	0x2003d6f4

000b50a0 <_Z7ledAzulv>:
void ledAzul()
{
   b50a0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b50a2:	23ff      	movs	r3, #255	; 0xff
   b50a4:	9300      	str	r3, [sp, #0]
   b50a6:	2300      	movs	r3, #0
   b50a8:	4803      	ldr	r0, [pc, #12]	; (b50b8 <_Z7ledAzulv+0x18>)
   b50aa:	461a      	mov	r2, r3
   b50ac:	4619      	mov	r1, r3
   b50ae:	f004 fc25 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b50b2:	b003      	add	sp, #12
   b50b4:	f85d fb04 	ldr.w	pc, [sp], #4
   b50b8:	2003d6f4 	.word	0x2003d6f4

000b50bc <_Z11ledAmarillov>:
void ledAmarillo()
{
   b50bc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b50be:	2100      	movs	r1, #0
   b50c0:	4804      	ldr	r0, [pc, #16]	; (b50d4 <_Z11ledAmarillov+0x18>)
   b50c2:	9100      	str	r1, [sp, #0]
   b50c4:	23e9      	movs	r3, #233	; 0xe9
   b50c6:	22ff      	movs	r2, #255	; 0xff
   b50c8:	f004 fc18 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b50cc:	b003      	add	sp, #12
   b50ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b50d2:	bf00      	nop
   b50d4:	2003d6f4 	.word	0x2003d6f4

000b50d8 <_Z9ledMoradov>:
void ledMorado()
{
   b50d8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b50da:	2375      	movs	r3, #117	; 0x75
   b50dc:	9300      	str	r3, [sp, #0]
   b50de:	4804      	ldr	r0, [pc, #16]	; (b50f0 <_Z9ledMoradov+0x18>)
   b50e0:	2346      	movs	r3, #70	; 0x46
   b50e2:	226c      	movs	r2, #108	; 0x6c
   b50e4:	2100      	movs	r1, #0
   b50e6:	f004 fc09 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b50ea:	b003      	add	sp, #12
   b50ec:	f85d fb04 	ldr.w	pc, [sp], #4
   b50f0:	2003d6f4 	.word	0x2003d6f4

000b50f4 <_Z10ledNaranjav>:
void ledNaranja()
{
   b50f4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b50f6:	2100      	movs	r1, #0
   b50f8:	4804      	ldr	r0, [pc, #16]	; (b510c <_Z10ledNaranjav+0x18>)
   b50fa:	9100      	str	r1, [sp, #0]
   b50fc:	2380      	movs	r3, #128	; 0x80
   b50fe:	22ff      	movs	r2, #255	; 0xff
   b5100:	f004 fbfc 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5104:	b003      	add	sp, #12
   b5106:	f85d fb04 	ldr.w	pc, [sp], #4
   b510a:	bf00      	nop
   b510c:	2003d6f4 	.word	0x2003d6f4

000b5110 <_Z9ledBlancov>:
void ledBlanco()
{
   b5110:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b5112:	23ff      	movs	r3, #255	; 0xff
   b5114:	4804      	ldr	r0, [pc, #16]	; (b5128 <_Z9ledBlancov+0x18>)
   b5116:	9300      	str	r3, [sp, #0]
   b5118:	461a      	mov	r2, r3
   b511a:	2100      	movs	r1, #0
   b511c:	f004 fbee 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5120:	b003      	add	sp, #12
   b5122:	f85d fb04 	ldr.w	pc, [sp], #4
   b5126:	bf00      	nop
   b5128:	2003d6f4 	.word	0x2003d6f4

000b512c <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b512c:	b510      	push	{r4, lr}
   switch (counter)
   b512e:	4c11      	ldr	r4, [pc, #68]	; (b5174 <_Z11ledArcoirisv+0x48>)
   b5130:	6823      	ldr	r3, [r4, #0]
   b5132:	2b05      	cmp	r3, #5
   b5134:	d809      	bhi.n	b514a <_Z11ledArcoirisv+0x1e>
   b5136:	e8df f003 	tbb	[pc, r3]
   b513a:	0d03      	.short	0x0d03
   b513c:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b5140:	f7ff ff92 	bl	b5068 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b5144:	6823      	ldr	r3, [r4, #0]
   b5146:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b5148:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b514a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b514e:	2096      	movs	r0, #150	; 0x96
   b5150:	f005 b9a4 	b.w	ba49c <delay>
      ledNaranja();
   b5154:	f7ff ffce 	bl	b50f4 <_Z10ledNaranjav>
      counter++;
   b5158:	e7f4      	b.n	b5144 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b515a:	f7ff ffaf 	bl	b50bc <_Z11ledAmarillov>
      counter++;
   b515e:	e7f1      	b.n	b5144 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b5160:	f7ff ff90 	bl	b5084 <_Z8ledVerdev>
      counter++;
   b5164:	e7ee      	b.n	b5144 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b5166:	f7ff ffb7 	bl	b50d8 <_Z9ledMoradov>
   b516a:	e7eb      	b.n	b5144 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b516c:	f7ff ff98 	bl	b50a0 <_Z7ledAzulv>
      counter = 0;
   b5170:	2300      	movs	r3, #0
   b5172:	e7e9      	b.n	b5148 <_Z11ledArcoirisv+0x1c>
   b5174:	2003d34c 	.word	0x2003d34c

000b5178 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b5178:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b517a:	2101      	movs	r1, #1
   b517c:	2006      	movs	r0, #6
   b517e:	f005 fd6a 	bl	bac56 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b5182:	2101      	movs	r1, #1
   b5184:	2006      	movs	r0, #6
   b5186:	f005 fd66 	bl	bac56 <digitalWrite>
   digitalWrite(D7, HIGH);
   b518a:	2101      	movs	r1, #1
   b518c:	2007      	movs	r0, #7
   b518e:	f005 fd62 	bl	bac56 <digitalWrite>
   digitalWrite(D7, 1);
}
   b5192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b5196:	2101      	movs	r1, #1
   b5198:	2007      	movs	r0, #7
   b519a:	f005 bd5c 	b.w	bac56 <digitalWrite>

000b519e <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b519e:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b51a0:	2100      	movs	r1, #0
   b51a2:	2006      	movs	r0, #6
   b51a4:	f005 fd57 	bl	bac56 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b51a8:	2100      	movs	r1, #0
   b51aa:	2006      	movs	r0, #6
   b51ac:	f005 fd53 	bl	bac56 <digitalWrite>
   digitalWrite(D7, LOW);
   b51b0:	2100      	movs	r1, #0
   b51b2:	2007      	movs	r0, #7
   b51b4:	f005 fd4f 	bl	bac56 <digitalWrite>
   digitalWrite(D7, 0);
}
   b51b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b51bc:	2100      	movs	r1, #0
   b51be:	2007      	movs	r0, #7
   b51c0:	f005 bd49 	b.w	bac56 <digitalWrite>

000b51c4 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b51c4:	b508      	push	{r3, lr}
   pitidoON0();
   b51c6:	f7ff ffd7 	bl	b5178 <_Z9pitidoON0v>
   delay(100);
   b51ca:	2064      	movs	r0, #100	; 0x64
   b51cc:	f005 f966 	bl	ba49c <delay>
   pitidoOFF0();
   b51d0:	f7ff ffe5 	bl	b519e <_Z10pitidoOFF0v>
   delay(100);
}
   b51d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b51d8:	2064      	movs	r0, #100	; 0x64
   b51da:	f005 b95f 	b.w	ba49c <delay>

000b51de <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b51de:	b108      	cbz	r0, b51e4 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b51e0:	f7ff bf5e 	b.w	b50a0 <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b51e4:	f7ff bf86 	b.w	b50f4 <_Z10ledNaranjav>

000b51e8 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b51e8:	b108      	cbz	r0, b51ee <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b51ea:	f7ff bf67 	b.w	b50bc <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b51ee:	f7ff bf73 	b.w	b50d8 <_Z9ledMoradov>

000b51f2 <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b51f2:	b108      	cbz	r0, b51f8 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b51f4:	f7ff bf46 	b.w	b5084 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b51f8:	f7ff bf36 	b.w	b5068 <_Z7ledRojov>

000b51fc <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b51fc:	b508      	push	{r3, lr}
   if (estado)
   b51fe:	b160      	cbz	r0, b521a <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b5200:	f7ff ff86 	bl	b5110 <_Z9ledBlancov>
      delay(400);
   b5204:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5208:	f005 f948 	bl	ba49c <delay>
      ledApagar();
   b520c:	f7ff ff1e 	bl	b504c <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b5210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b5214:	20c8      	movs	r0, #200	; 0xc8
   b5216:	f005 b941 	b.w	ba49c <delay>
}
   b521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b521e:	f7ff bf15 	b.w	b504c <_Z9ledApagarv>

000b5222 <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b5222:	b108      	cbz	r0, b5228 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b5224:	f7ff bf74 	b.w	b5110 <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b5228:	f7ff bf10 	b.w	b504c <_Z9ledApagarv>

000b522c <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b522c:	b108      	cbz	r0, b5232 <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b522e:	f7ff bf7d 	b.w	b512c <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b5232:	f7ff bf0b 	b.w	b504c <_Z9ledApagarv>

000b5236 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b5236:	b108      	cbz	r0, b523c <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b5238:	f7ff bfc4 	b.w	b51c4 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b523c:	f7ff bfaf 	b.w	b519e <_Z10pitidoOFF0v>

000b5240 <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b5240:	b108      	cbz	r0, b5246 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b5242:	f7ff bf99 	b.w	b5178 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b5246:	f7ff bfaa 	b.w	b519e <_Z10pitidoOFF0v>
	...

000b524c <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   switch (id)
   b524c:	2801      	cmp	r0, #1
{
   b524e:	b538      	push	{r3, r4, r5, lr}
   b5250:	460d      	mov	r5, r1
   b5252:	4614      	mov	r4, r2
   switch (id)
   b5254:	d027      	beq.n	b52a6 <_Z15activarActuadoriib+0x5a>
   b5256:	280d      	cmp	r0, #13
   b5258:	d03b      	beq.n	b52d2 <_Z15activarActuadoriib+0x86>
   b525a:	bb48      	cbnz	r0, b52b0 <_Z15activarActuadoriib+0x64>
   {
      pitidoOFF0();
   // Actuador led
   case 0:

      switch (opcion) {
   b525c:	2905      	cmp	r1, #5
   b525e:	d827      	bhi.n	b52b0 <_Z15activarActuadoriib+0x64>
   b5260:	e8df f001 	tbb	[pc, r1]
   b5264:	120d0803 	.word	0x120d0803
   b5268:	1c17      	.short	0x1c17
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b526a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledVerdeRojo(valor);
   b526e:	4610      	mov	r0, r2
   b5270:	f7ff bfbf 	b.w	b51f2 <_Z12ledVerdeRojob>
}
   b5274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledMoradoAmarillo(valor);
   b5278:	4610      	mov	r0, r2
   b527a:	f7ff bfb5 	b.w	b51e8 <_Z17ledMoradoAmarillob>
}
   b527e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledAzulNaranja(valor);
   b5282:	4610      	mov	r0, r2
   b5284:	f7ff bfab 	b.w	b51de <_Z14ledAzulNaranjab>
}
   b5288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledBlink0(valor);
   b528c:	4610      	mov	r0, r2
   b528e:	f7ff bfb5 	b.w	b51fc <_Z9ledBlink0b>
}
   b5292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledArcoiris0(valor);
   b5296:	4610      	mov	r0, r2
   b5298:	f7ff bfc8 	b.w	b522c <_Z12ledArcoiris0b>
}
   b529c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledOnOff(valor);
   b52a0:	4610      	mov	r0, r2
   b52a2:	f7ff bfbe 	b.w	b5222 <_Z8ledOnOffb>
      ledApagar();
   b52a6:	f7ff fed1 	bl	b504c <_Z9ledApagarv>
      switch (opcion) {
   b52aa:	b145      	cbz	r5, b52be <_Z15activarActuadoriib+0x72>
   b52ac:	2d01      	cmp	r5, #1
   b52ae:	d00b      	beq.n	b52c8 <_Z15activarActuadoriib+0x7c>
            Serial.println("Valor no valido");
   b52b0:	f005 fa8a 	bl	ba7c8 <_Z16_fetch_usbserialv>
}
   b52b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b52b8:	490f      	ldr	r1, [pc, #60]	; (b52f8 <_Z15activarActuadoriib+0xac>)
   b52ba:	f005 b884 	b.w	ba3c6 <_ZN5Print7printlnEPKc>
            zumbador(valor);
   b52be:	4620      	mov	r0, r4
}
   b52c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            zumbador(valor);
   b52c4:	f7ff bfbc 	b.w	b5240 <_Z8zumbadorb>
            blinkAndSleep(valor);
   b52c8:	4620      	mov	r0, r4
}
   b52ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            blinkAndSleep(valor);
   b52ce:	f7ff bfb2 	b.w	b5236 <_Z13blinkAndSleepb>
      pitidoOFF0();
   b52d2:	f7ff ff64 	bl	b519e <_Z10pitidoOFF0v>
      ledApagar();
   b52d6:	f7ff feb9 	bl	b504c <_Z9ledApagarv>
      pinMode(A2, OUTPUT);
   b52da:	2101      	movs	r1, #1
   b52dc:	2011      	movs	r0, #17
   b52de:	f005 fca9 	bl	bac34 <pinMode>
      if (valor) {
   b52e2:	b134      	cbz	r4, b52f2 <_Z15activarActuadoriib+0xa6>
         analogWrite(A2, 50, 40);
   b52e4:	2228      	movs	r2, #40	; 0x28
   b52e6:	2132      	movs	r1, #50	; 0x32
}
   b52e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         analogWrite(A2, 0, 0);
   b52ec:	2011      	movs	r0, #17
   b52ee:	f005 bcf5 	b.w	bacdc <_Z11analogWritetmm>
   b52f2:	4622      	mov	r2, r4
   b52f4:	4621      	mov	r1, r4
   b52f6:	e7f7      	b.n	b52e8 <_Z15activarActuadoriib+0x9c>
   b52f8:	000bb0e5 	.word	0x000bb0e5

000b52fc <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b52fc:	b508      	push	{r3, lr}
    ledBlanco();
   b52fe:	f7ff ff07 	bl	b5110 <_Z9ledBlancov>
    delay(400);
   b5302:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5306:	f005 f8c9 	bl	ba49c <delay>
    ledApagar();
   b530a:	f7ff fe9f 	bl	b504c <_Z9ledApagarv>
    delay(200);
}
   b530e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b5312:	20c8      	movs	r0, #200	; 0xc8
   b5314:	f005 b8c2 	b.w	ba49c <delay>

000b5318 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b5318:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b531a:	b284      	uxth	r4, r0
   b531c:	4620      	mov	r0, r4
   b531e:	2101      	movs	r1, #1
   b5320:	f005 fc99 	bl	bac56 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b5324:	4620      	mov	r0, r4
   b5326:	2101      	movs	r1, #1
   b5328:	f005 fc95 	bl	bac56 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b532c:	1c60      	adds	r0, r4, #1
   b532e:	b280      	uxth	r0, r0
   b5330:	2101      	movs	r1, #1
   b5332:	9001      	str	r0, [sp, #4]
   b5334:	f005 fc8f 	bl	bac56 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b5338:	9801      	ldr	r0, [sp, #4]
   b533a:	2101      	movs	r1, #1
}
   b533c:	b002      	add	sp, #8
   b533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b5342:	f005 bc88 	b.w	bac56 <digitalWrite>

000b5346 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b5346:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b5348:	b284      	uxth	r4, r0
   b534a:	4620      	mov	r0, r4
   b534c:	2100      	movs	r1, #0
   b534e:	f005 fc82 	bl	bac56 <digitalWrite>
    digitalWrite(puerto, LOW);
   b5352:	4620      	mov	r0, r4
   b5354:	2100      	movs	r1, #0
   b5356:	f005 fc7e 	bl	bac56 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b535a:	1c60      	adds	r0, r4, #1
   b535c:	b280      	uxth	r0, r0
   b535e:	2100      	movs	r1, #0
   b5360:	9001      	str	r0, [sp, #4]
   b5362:	f005 fc78 	bl	bac56 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b5366:	9801      	ldr	r0, [sp, #4]
   b5368:	2100      	movs	r1, #0
}
   b536a:	b002      	add	sp, #8
   b536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b5370:	f005 bc71 	b.w	bac56 <digitalWrite>

000b5374 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b5374:	b510      	push	{r4, lr}
   b5376:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b5378:	f7ff ffce 	bl	b5318 <_Z9pitidoON1i>
    delay(100);
   b537c:	2064      	movs	r0, #100	; 0x64
   b537e:	f005 f88d 	bl	ba49c <delay>
    pitidoOFF1(puerto);
   b5382:	4620      	mov	r0, r4
   b5384:	f7ff ffdf 	bl	b5346 <_Z10pitidoOFF1i>
    delay(100);
}
   b5388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b538c:	2064      	movs	r0, #100	; 0x64
   b538e:	f005 b885 	b.w	ba49c <delay>
	...

000b5394 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b5394:	b508      	push	{r3, lr}
   b5396:	2807      	cmp	r0, #7
   b5398:	d825      	bhi.n	b53e6 <_Z10activarLEDii+0x52>
   b539a:	e8df f000 	tbb	[pc, r0]
   b539e:	0804      	.short	0x0804
   b53a0:	1814100c 	.word	0x1814100c
   b53a4:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b53a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b53aa:	f7ff be6b 	b.w	b5084 <_Z8ledVerdev>
}
   b53ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b53b2:	f7ff be59 	b.w	b5068 <_Z7ledRojov>
}
   b53b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b53ba:	f7ff be7f 	b.w	b50bc <_Z11ledAmarillov>
}
   b53be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b53c2:	f7ff be89 	b.w	b50d8 <_Z9ledMoradov>
}
   b53c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b53ca:	f7ff be69 	b.w	b50a0 <_Z7ledAzulv>
}
   b53ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b53d2:	f7ff be8f 	b.w	b50f4 <_Z10ledNaranjav>
}
   b53d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b53da:	f7ff bf8f 	b.w	b52fc <_Z8ledBlinkv>
}
   b53de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b53e2:	f7ff bea3 	b.w	b512c <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b53e6:	f005 f9ef 	bl	ba7c8 <_Z16_fetch_usbserialv>
}
   b53ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b53ee:	4901      	ldr	r1, [pc, #4]	; (b53f4 <_Z10activarLEDii+0x60>)
   b53f0:	f004 bfe9 	b.w	ba3c6 <_ZN5Print7printlnEPKc>
   b53f4:	000bb0f5 	.word	0x000bb0f5

000b53f8 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b53f8:	b538      	push	{r3, r4, r5, lr}
   b53fa:	460c      	mov	r4, r1
   b53fc:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b53fe:	2101      	movs	r1, #1
   b5400:	b2a0      	uxth	r0, r4
   b5402:	f005 fc17 	bl	bac34 <pinMode>

    switch (opcion)
   b5406:	b145      	cbz	r5, b541a <_Z15activarZumbadorii+0x22>
   b5408:	2d01      	cmp	r5, #1
   b540a:	d00b      	beq.n	b5424 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b540c:	f005 f9dc 	bl	ba7c8 <_Z16_fetch_usbserialv>
        break;
    }
}
   b5410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b5414:	4906      	ldr	r1, [pc, #24]	; (b5430 <_Z15activarZumbadorii+0x38>)
   b5416:	f004 bfd6 	b.w	ba3c6 <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b541a:	4620      	mov	r0, r4
}
   b541c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b5420:	f7ff bf7a 	b.w	b5318 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b5424:	4620      	mov	r0, r4
}
   b5426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b542a:	f7ff bfa3 	b.w	b5374 <_Z12pitidoBlink1i>
   b542e:	bf00      	nop
   b5430:	000bb0e5 	.word	0x000bb0e5

000b5434 <_Z17activarVentiladorii>:

void activarVentilador(int opcion, int puerto)
{
   b5434:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5436:	460c      	mov	r4, r1
   b5438:	4605      	mov	r5, r0
   pitidoOFF0();
   b543a:	f7ff feb0 	bl	b519e <_Z10pitidoOFF0v>
   ledApagar();
   b543e:	f7ff fe05 	bl	b504c <_Z9ledApagarv>

   int p;
   switch (puerto)
   b5442:	2c04      	cmp	r4, #4
   b5444:	bf9a      	itte	ls
   b5446:	4b0d      	ldrls	r3, [pc, #52]	; (b547c <_Z17activarVentiladorii+0x48>)
   b5448:	571b      	ldrsbls	r3, [r3, r4]
   ledApagar();
   b544a:	f04f 33ff 	movhi.w	r3, #4294967295
    default:
        p = -1;
        break;
    }

   pinMode(p, OUTPUT);
   b544e:	b298      	uxth	r0, r3
   b5450:	2101      	movs	r1, #1
   b5452:	9001      	str	r0, [sp, #4]
   b5454:	f005 fbee 	bl	bac34 <pinMode>
    switch (opcion)
   b5458:	2d01      	cmp	r5, #1
   b545a:	d807      	bhi.n	b546c <_Z17activarVentiladorii+0x38>
    {
    case 0:
      analogWrite(p, 50, 50);
      break;
    case 1:
      analogWrite(p, 50, 50);
   b545c:	2232      	movs	r2, #50	; 0x32
   b545e:	9801      	ldr	r0, [sp, #4]
   b5460:	4611      	mov	r1, r2
      Serial.println("Valor no valido");
      break;
    }


}
   b5462:	b003      	add	sp, #12
   b5464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      analogWrite(p, 50, 50);
   b5468:	f005 bc38 	b.w	bacdc <_Z11analogWritetmm>
      Serial.println("Valor no valido");
   b546c:	f005 f9ac 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5470:	4903      	ldr	r1, [pc, #12]	; (b5480 <_Z17activarVentiladorii+0x4c>)
}
   b5472:	b003      	add	sp, #12
   b5474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      Serial.println("Valor no valido");
   b5478:	f004 bfa5 	b.w	ba3c6 <_ZN5Print7printlnEPKc>
   b547c:	000bbb68 	.word	0x000bbb68
   b5480:	000bb0e5 	.word	0x000bb0e5

000b5484 <_Z10ventApagari>:

void ventApagar(int puerto)
{
      int p;
      switch (puerto)
   b5484:	2804      	cmp	r0, #4
{
   b5486:	b507      	push	{r0, r1, r2, lr}
   b5488:	bf9a      	itte	ls
   b548a:	4b08      	ldrls	r3, [pc, #32]	; (b54ac <_Z10ventApagari+0x28>)
   b548c:	5618      	ldrsbls	r0, [r3, r0]
   b548e:	f04f 30ff 	movhi.w	r0, #4294967295

      default:
         p = -1;
         break;
      }
      pinMode(p, OUTPUT);
   b5492:	b280      	uxth	r0, r0
   b5494:	2101      	movs	r1, #1
   b5496:	9001      	str	r0, [sp, #4]
   b5498:	f005 fbcc 	bl	bac34 <pinMode>
      analogWrite(p, 0, 0);
   b549c:	2200      	movs	r2, #0
   b549e:	9801      	ldr	r0, [sp, #4]
   b54a0:	4611      	mov	r1, r2
}
   b54a2:	b003      	add	sp, #12
   b54a4:	f85d eb04 	ldr.w	lr, [sp], #4
      analogWrite(p, 0, 0);
   b54a8:	f005 bc18 	b.w	bacdc <_Z11analogWritetmm>
   b54ac:	000bbb68 	.word	0x000bbb68

000b54b0 <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b54b0:	b538      	push	{r3, r4, r5, lr}
   b54b2:	460c      	mov	r4, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b54b4:	4605      	mov	r5, r0
   b54b6:	b918      	cbnz	r0, b54c0 <_Z14apagarActuadorii+0x10>
    if (id == 13){
      ventApagar(puerto);
    }

}
   b54b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b54bc:	f7ff bdc6 	b.w	b504c <_Z9ledApagarv>
   b54c0:	2100      	movs	r1, #0
   b54c2:	b2a0      	uxth	r0, r4
   b54c4:	f005 fbc7 	bl	bac56 <digitalWrite>
    if (id == 13){
   b54c8:	2d0d      	cmp	r5, #13
   b54ca:	d104      	bne.n	b54d6 <_Z14apagarActuadorii+0x26>
      ventApagar(puerto);
   b54cc:	4620      	mov	r0, r4
}
   b54ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ventApagar(puerto);
   b54d2:	f7ff bfd7 	b.w	b5484 <_Z10ventApagari>
}
   b54d6:	bd38      	pop	{r3, r4, r5, pc}

000b54d8 <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b54d8:	4603      	mov	r3, r0
    if (id < 2)
   b54da:	2b01      	cmp	r3, #1
{
   b54dc:	4608      	mov	r0, r1
   b54de:	4611      	mov	r1, r2
    if (id < 2)
   b54e0:	dc04      	bgt.n	b54ec <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b54e2:	b90b      	cbnz	r3, b54e8 <_Z15actuadorHandleriii+0x10>
   b54e4:	f7ff bf56 	b.w	b5394 <_Z10activarLEDii>
   b54e8:	f7ff bf86 	b.w	b53f8 <_Z15activarZumbadorii>
   if (id == 13)
   b54ec:	2b0d      	cmp	r3, #13
   b54ee:	d101      	bne.n	b54f4 <_Z15actuadorHandleriii+0x1c>
      activarVentilador(opcion, puerto);
   b54f0:	f7ff bfa0 	b.w	b5434 <_Z17activarVentiladorii>
}
   b54f4:	4770      	bx	lr
	...

000b54f8 <_Z10borradoALLi>:
   switch (modo)
   b54f8:	2801      	cmp	r0, #1
   b54fa:	d00b      	beq.n	b5514 <_Z10borradoALLi+0x1c>
   b54fc:	2802      	cmp	r0, #2
   b54fe:	d00b      	beq.n	b5518 <_Z10borradoALLi+0x20>
   b5500:	b988      	cbnz	r0, b5526 <_Z10borradoALLi+0x2e>
      bloques[0] = bloque;
   b5502:	4b09      	ldr	r3, [pc, #36]	; (b5528 <_Z10borradoALLi+0x30>)
   b5504:	6018      	str	r0, [r3, #0]
   b5506:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b550a:	4b08      	ldr	r3, [pc, #32]	; (b552c <_Z10borradoALLi+0x34>)
   b550c:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b550e:	4b08      	ldr	r3, [pc, #32]	; (b5530 <_Z10borradoALLi+0x38>)
   b5510:	6018      	str	r0, [r3, #0]
      break;
   b5512:	4770      	bx	lr
   b5514:	f7ff b9fe 	b.w	b4914 <_Z10borradoALLi.part.0>
      posicion = 0;
   b5518:	4a06      	ldr	r2, [pc, #24]	; (b5534 <_Z10borradoALLi+0x3c>)
   b551a:	2300      	movs	r3, #0
   b551c:	6013      	str	r3, [r2, #0]
      bucle = false;
   b551e:	4a06      	ldr	r2, [pc, #24]	; (b5538 <_Z10borradoALLi+0x40>)
   b5520:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b5522:	4a06      	ldr	r2, [pc, #24]	; (b553c <_Z10borradoALLi+0x44>)
   b5524:	6013      	str	r3, [r2, #0]
}
   b5526:	4770      	bx	lr
   b5528:	2003cd30 	.word	0x2003cd30
   b552c:	2003da34 	.word	0x2003da34
   b5530:	2003da2c 	.word	0x2003da2c
   b5534:	2003da3c 	.word	0x2003da3c
   b5538:	2003d308 	.word	0x2003d308
   b553c:	2003dc3c 	.word	0x2003dc3c

000b5540 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b5540:	4a0e      	ldr	r2, [pc, #56]	; (b557c <_Z10borradoPOPv+0x3c>)
   b5542:	6813      	ldr	r3, [r2, #0]
   b5544:	3b01      	subs	r3, #1
   b5546:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b5548:	4a0d      	ldr	r2, [pc, #52]	; (b5580 <_Z10borradoPOPv+0x40>)
   b554a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b554e:	1c8a      	adds	r2, r1, #2
   b5550:	4a0c      	ldr	r2, [pc, #48]	; (b5584 <_Z10borradoPOPv+0x44>)
   b5552:	d107      	bne.n	b5564 <_Z10borradoPOPv+0x24>
      bucle = true;
   b5554:	2101      	movs	r1, #1
   b5556:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b5558:	4a0b      	ldr	r2, [pc, #44]	; (b5588 <_Z10borradoPOPv+0x48>)
   b555a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b555e:	4b0b      	ldr	r3, [pc, #44]	; (b558c <_Z10borradoPOPv+0x4c>)
   b5560:	601a      	str	r2, [r3, #0]
   b5562:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b5564:	3101      	adds	r1, #1
   b5566:	d102      	bne.n	b556e <_Z10borradoPOPv+0x2e>
      bucle = false;
   b5568:	2300      	movs	r3, #0
   b556a:	7013      	strb	r3, [r2, #0]
   b556c:	4770      	bx	lr

   } else {
      if (bucle) {
   b556e:	7813      	ldrb	r3, [r2, #0]
   b5570:	b11b      	cbz	r3, b557a <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b5572:	4a06      	ldr	r2, [pc, #24]	; (b558c <_Z10borradoPOPv+0x4c>)
   b5574:	6813      	ldr	r3, [r2, #0]
   b5576:	3b01      	subs	r3, #1
   b5578:	6013      	str	r3, [r2, #0]
      }
   }
}
   b557a:	4770      	bx	lr
   b557c:	2003da3c 	.word	0x2003da3c
   b5580:	2003d70c 	.word	0x2003d70c
   b5584:	2003d308 	.word	0x2003d308
   b5588:	2003d3c4 	.word	0x2003d3c4
   b558c:	2003dc3c 	.word	0x2003dc3c

000b5590 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b5590:	b508      	push	{r3, lr}
   b5592:	2807      	cmp	r0, #7
   b5594:	d816      	bhi.n	b55c4 <_Z15decodificarNOTAi+0x34>
   b5596:	e8df f000 	tbb	[pc, r0]
   b559a:	0704      	.short	0x0704
   b559c:	0f0d0b09 	.word	0x0f0d0b09
   b55a0:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b55a2:	4b0c      	ldr	r3, [pc, #48]	; (b55d4 <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b55a4:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b55a6:	bd08      	pop	{r3, pc}
      return RE;
   b55a8:	4b0b      	ldr	r3, [pc, #44]	; (b55d8 <_Z15decodificarNOTAi+0x48>)
   b55aa:	e7fb      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return MI;
   b55ac:	4b0b      	ldr	r3, [pc, #44]	; (b55dc <_Z15decodificarNOTAi+0x4c>)
   b55ae:	e7f9      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return FA;
   b55b0:	4b0b      	ldr	r3, [pc, #44]	; (b55e0 <_Z15decodificarNOTAi+0x50>)
   b55b2:	e7f7      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return SOL;
   b55b4:	4b0b      	ldr	r3, [pc, #44]	; (b55e4 <_Z15decodificarNOTAi+0x54>)
   b55b6:	e7f5      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return LA;
   b55b8:	4b0b      	ldr	r3, [pc, #44]	; (b55e8 <_Z15decodificarNOTAi+0x58>)
   b55ba:	e7f3      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return SI;
   b55bc:	4b0b      	ldr	r3, [pc, #44]	; (b55ec <_Z15decodificarNOTAi+0x5c>)
   b55be:	e7f1      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      return DO_;
   b55c0:	4b0b      	ldr	r3, [pc, #44]	; (b55f0 <_Z15decodificarNOTAi+0x60>)
   b55c2:	e7ef      	b.n	b55a4 <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b55c4:	f005 f900 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b55c8:	490a      	ldr	r1, [pc, #40]	; (b55f4 <_Z15decodificarNOTAi+0x64>)
   b55ca:	f004 fefc 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      return -1;
   b55ce:	f04f 30ff 	mov.w	r0, #4294967295
   b55d2:	e7e8      	b.n	b55a6 <_Z15decodificarNOTAi+0x16>
   b55d4:	2003cc58 	.word	0x2003cc58
   b55d8:	2003cc6c 	.word	0x2003cc6c
   b55dc:	2003cc68 	.word	0x2003cc68
   b55e0:	2003cc60 	.word	0x2003cc60
   b55e4:	2003cc74 	.word	0x2003cc74
   b55e8:	2003cc64 	.word	0x2003cc64
   b55ec:	2003cc70 	.word	0x2003cc70
   b55f0:	2003cc5c 	.word	0x2003cc5c
   b55f4:	000bb104 	.word	0x000bb104

000b55f8 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b55f8:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b55fa:	b508      	push	{r3, lr}
   b55fc:	d803      	bhi.n	b5606 <_Z15decodificarTIPOi+0xe>
   b55fe:	4b06      	ldr	r3, [pc, #24]	; (b5618 <_Z15decodificarTIPOi+0x20>)
   b5600:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b5604:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b5606:	f005 f8df 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b560a:	4904      	ldr	r1, [pc, #16]	; (b561c <_Z15decodificarTIPOi+0x24>)
   b560c:	f004 fedb 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b5610:	f04f 30ff 	mov.w	r0, #4294967295
   b5614:	e7f6      	b.n	b5604 <_Z15decodificarTIPOi+0xc>
   b5616:	bf00      	nop
   b5618:	000bbb6e 	.word	0x000bbb6e
   b561c:	000bb113 	.word	0x000bb113

000b5620 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b5620:	b510      	push	{r4, lr}
   b5622:	4604      	mov	r4, r0
   b5624:	2907      	cmp	r1, #7
   b5626:	d819      	bhi.n	b565c <_Z19decodificarNOTA_msgi+0x3c>
   b5628:	e8df f001 	tbb	[pc, r1]
   b562c:	0e0c0a04 	.word	0x0e0c0a04
   b5630:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b5634:	490a      	ldr	r1, [pc, #40]	; (b5660 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b5636:	4620      	mov	r0, r4
   b5638:	f004 fdf7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b563c:	4620      	mov	r0, r4
   b563e:	bd10      	pop	{r4, pc}
      return "RE";
   b5640:	4908      	ldr	r1, [pc, #32]	; (b5664 <_Z19decodificarNOTA_msgi+0x44>)
   b5642:	e7f8      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b5644:	4908      	ldr	r1, [pc, #32]	; (b5668 <_Z19decodificarNOTA_msgi+0x48>)
   b5646:	e7f6      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b5648:	4908      	ldr	r1, [pc, #32]	; (b566c <_Z19decodificarNOTA_msgi+0x4c>)
   b564a:	e7f4      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b564c:	4908      	ldr	r1, [pc, #32]	; (b5670 <_Z19decodificarNOTA_msgi+0x50>)
   b564e:	e7f2      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b5650:	4908      	ldr	r1, [pc, #32]	; (b5674 <_Z19decodificarNOTA_msgi+0x54>)
   b5652:	e7f0      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b5654:	4908      	ldr	r1, [pc, #32]	; (b5678 <_Z19decodificarNOTA_msgi+0x58>)
   b5656:	e7ee      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b5658:	4908      	ldr	r1, [pc, #32]	; (b567c <_Z19decodificarNOTA_msgi+0x5c>)
   b565a:	e7ec      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b565c:	4908      	ldr	r1, [pc, #32]	; (b5680 <_Z19decodificarNOTA_msgi+0x60>)
   b565e:	e7ea      	b.n	b5636 <_Z19decodificarNOTA_msgi+0x16>
   b5660:	000bb577 	.word	0x000bb577
   b5664:	000bb122 	.word	0x000bb122
   b5668:	000bb125 	.word	0x000bb125
   b566c:	000bb128 	.word	0x000bb128
   b5670:	000bb12b 	.word	0x000bb12b
   b5674:	000bb12f 	.word	0x000bb12f
   b5678:	000bb132 	.word	0x000bb132
   b567c:	000bb735 	.word	0x000bb735
   b5680:	000bb104 	.word	0x000bb104

000b5684 <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b5684:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b5686:	b510      	push	{r4, lr}
   b5688:	4604      	mov	r4, r0
   switch (tipo)
   b568a:	d007      	beq.n	b569c <_Z19decodificarTIPO_msgi+0x18>
   b568c:	2902      	cmp	r1, #2
   b568e:	d007      	beq.n	b56a0 <_Z19decodificarTIPO_msgi+0x1c>
   b5690:	b941      	cbnz	r1, b56a4 <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b5692:	4905      	ldr	r1, [pc, #20]	; (b56a8 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b5694:	f004 fdc9 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5698:	4620      	mov	r0, r4
   b569a:	bd10      	pop	{r4, pc}
      return "_N";
   b569c:	4903      	ldr	r1, [pc, #12]	; (b56ac <_Z19decodificarTIPO_msgi+0x28>)
   b569e:	e7f9      	b.n	b5694 <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b56a0:	4903      	ldr	r1, [pc, #12]	; (b56b0 <_Z19decodificarTIPO_msgi+0x2c>)
   b56a2:	e7f7      	b.n	b5694 <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b56a4:	4903      	ldr	r1, [pc, #12]	; (b56b4 <_Z19decodificarTIPO_msgi+0x30>)
   b56a6:	e7f5      	b.n	b5694 <_Z19decodificarTIPO_msgi+0x10>
   b56a8:	000bb135 	.word	0x000bb135
   b56ac:	000bb138 	.word	0x000bb138
   b56b0:	000bb13b 	.word	0x000bb13b
   b56b4:	000bb113 	.word	0x000bb113

000b56b8 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b56b8:	b513      	push	{r0, r1, r4, lr}
   b56ba:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b56bc:	f7ff ff68 	bl	b5590 <_Z15decodificarNOTAi>
   b56c0:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b56c2:	4620      	mov	r0, r4
   b56c4:	f7ff ff98 	bl	b55f8 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b56c8:	9901      	ldr	r1, [sp, #4]
   b56ca:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b56cc:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b56ce:	2006      	movs	r0, #6
   b56d0:	f005 f8a4 	bl	ba81c <tone>
   delay(duracion);
   b56d4:	4620      	mov	r0, r4
   b56d6:	f004 fee1 	bl	ba49c <delay>
   noTone(Zumbador_PIN);
   b56da:	2006      	movs	r0, #6
   b56dc:	f005 f8b5 	bl	ba84a <noTone>
   delay(30);
   b56e0:	201e      	movs	r0, #30
}
   b56e2:	b002      	add	sp, #8
   b56e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b56e8:	f004 bed8 	b.w	ba49c <delay>

000b56ec <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b56ec:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b56ee:	4b0d      	ldr	r3, [pc, #52]	; (b5724 <_Z13isValidSensori+0x38>)
   b56f0:	681a      	ldr	r2, [r3, #0]
   b56f2:	4b0d      	ldr	r3, [pc, #52]	; (b5728 <_Z13isValidSensori+0x3c>)
   b56f4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b56f8:	434a      	muls	r2, r1
   b56fa:	5899      	ldr	r1, [r3, r2]
   b56fc:	4413      	add	r3, r2
   b56fe:	2200      	movs	r2, #0
   b5700:	4291      	cmp	r1, r2
   b5702:	dd0d      	ble.n	b5720 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b5704:	685c      	ldr	r4, [r3, #4]
   b5706:	4284      	cmp	r4, r0
   b5708:	f103 0310 	add.w	r3, r3, #16
   b570c:	d106      	bne.n	b571c <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b570e:	f005 f85b 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5712:	4906      	ldr	r1, [pc, #24]	; (b572c <_Z13isValidSensori+0x40>)
   b5714:	f004 fe57 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b5718:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b571a:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b571c:	3201      	adds	r2, #1
   b571e:	e7ef      	b.n	b5700 <_Z13isValidSensori+0x14>
  return true;
   b5720:	2001      	movs	r0, #1
   b5722:	e7fa      	b.n	b571a <_Z13isValidSensori+0x2e>
   b5724:	2003cc80 	.word	0x2003cc80
   b5728:	2003cd30 	.word	0x2003cd30
   b572c:	000bb13e 	.word	0x000bb13e

000b5730 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5730:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5732:	4b11      	ldr	r3, [pc, #68]	; (b5778 <_Z11isNewSensori+0x48>)
   b5734:	4a11      	ldr	r2, [pc, #68]	; (b577c <_Z11isNewSensori+0x4c>)
   b5736:	681e      	ldr	r6, [r3, #0]
   b5738:	4694      	mov	ip, r2
   b573a:	2300      	movs	r3, #0
   b573c:	429e      	cmp	r6, r3
   b573e:	db17      	blt.n	b5770 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5740:	6817      	ldr	r7, [r2, #0]
   b5742:	4615      	mov	r5, r2
   b5744:	2100      	movs	r1, #0
   b5746:	428f      	cmp	r7, r1
   b5748:	dd0e      	ble.n	b5768 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b574a:	686c      	ldr	r4, [r5, #4]
   b574c:	4284      	cmp	r4, r0
   b574e:	f105 0510 	add.w	r5, r5, #16
   b5752:	d107      	bne.n	b5764 <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5754:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5758:	4353      	muls	r3, r2
   b575a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b575e:	4463      	add	r3, ip
   b5760:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5764:	3101      	adds	r1, #1
   b5766:	e7ee      	b.n	b5746 <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5768:	3301      	adds	r3, #1
   b576a:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b576e:	e7e5      	b.n	b573c <_Z11isNewSensori+0xc>
  return -1;
   b5770:	f04f 30ff 	mov.w	r0, #4294967295
   b5774:	e7f5      	b.n	b5762 <_Z11isNewSensori+0x32>
   b5776:	bf00      	nop
   b5778:	2003cc80 	.word	0x2003cc80
   b577c:	2003cd30 	.word	0x2003cd30

000b5780 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b5780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5784:	4d19      	ldr	r5, [pc, #100]	; (b57ec <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b5786:	4b1a      	ldr	r3, [pc, #104]	; (b57f0 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5788:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b578c:	681f      	ldr	r7, [r3, #0]
{
   b578e:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5790:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b5792:	2400      	movs	r4, #0
   b5794:	42a7      	cmp	r7, r4
   b5796:	db23      	blt.n	b57e0 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b5798:	d110      	bne.n	b57bc <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b579a:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b579e:	461a      	mov	r2, r3
   b57a0:	2600      	movs	r6, #0
   b57a2:	45b0      	cmp	r8, r6
   b57a4:	dd0a      	ble.n	b57bc <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b57a6:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b57aa:	4560      	cmp	r0, ip
   b57ac:	d103      	bne.n	b57b6 <_Z15isValidActuadorii+0x36>
   b57ae:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b57b2:	4288      	cmp	r0, r1
   b57b4:	d017      	beq.n	b57e6 <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b57b6:	3601      	adds	r6, #1
   b57b8:	3214      	adds	r2, #20
   b57ba:	e7f2      	b.n	b57a2 <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b57bc:	2f01      	cmp	r7, #1
   b57be:	d10b      	bne.n	b57d8 <_Z15isValidActuadorii+0x58>
   b57c0:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b57c2:	2200      	movs	r2, #0
   b57c4:	4596      	cmp	lr, r2
   b57c6:	dd07      	ble.n	b57d8 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b57c8:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b57cc:	4288      	cmp	r0, r1
   b57ce:	f106 0614 	add.w	r6, r6, #20
   b57d2:	d008      	beq.n	b57e6 <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b57d4:	3201      	adds	r2, #1
   b57d6:	e7f5      	b.n	b57c4 <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b57d8:	3401      	adds	r4, #1
   b57da:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b57de:	e7d9      	b.n	b5794 <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b57e0:	2001      	movs	r0, #1
}
   b57e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b57e6:	2000      	movs	r0, #0
   b57e8:	e7fb      	b.n	b57e2 <_Z15isValidActuadorii+0x62>
   b57ea:	bf00      	nop
   b57ec:	2003cd30 	.word	0x2003cd30
   b57f0:	2003cc80 	.word	0x2003cc80

000b57f4 <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b57f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int j = 0; j <= numBloque; j++)
   b57f6:	4b13      	ldr	r3, [pc, #76]	; (b5844 <_Z13isNewActuadori+0x50>)
   b57f8:	4a13      	ldr	r2, [pc, #76]	; (b5848 <_Z13isNewActuadori+0x54>)
   b57fa:	681e      	ldr	r6, [r3, #0]
   b57fc:	4694      	mov	ip, r2
   b57fe:	2300      	movs	r3, #0
   b5800:	429e      	cmp	r6, r3
   b5802:	db1b      	blt.n	b583c <_Z13isNewActuadori+0x48>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5804:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5808:	4615      	mov	r5, r2
   b580a:	2100      	movs	r1, #0
   b580c:	428f      	cmp	r7, r1
   b580e:	dd11      	ble.n	b5834 <_Z13isNewActuadori+0x40>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5810:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5814:	4284      	cmp	r4, r0
   b5816:	f105 0514 	add.w	r5, r5, #20
   b581a:	d109      	bne.n	b5830 <_Z13isNewActuadori+0x3c>
      {
        return bloques[j].actuadores[i].puerto;
   b581c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5820:	4353      	muls	r3, r2
   b5822:	2214      	movs	r2, #20
   b5824:	fb02 3301 	mla	r3, r2, r1, r3
   b5828:	4463      	add	r3, ip
   b582a:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
      }
    }
  }

  return -1;
}
   b582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5830:	3101      	adds	r1, #1
   b5832:	e7eb      	b.n	b580c <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5834:	3301      	adds	r3, #1
   b5836:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b583a:	e7e1      	b.n	b5800 <_Z13isNewActuadori+0xc>
  return -1;
   b583c:	f04f 30ff 	mov.w	r0, #4294967295
   b5840:	e7f5      	b.n	b582e <_Z13isNewActuadori+0x3a>
   b5842:	bf00      	nop
   b5844:	2003cc80 	.word	0x2003cc80
   b5848:	2003cd30 	.word	0x2003cd30

000b584c <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b584c:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b584e:	4b0c      	ldr	r3, [pc, #48]	; (b5880 <_Z14isActuadorDualii+0x34>)
   b5850:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5854:	fb02 3101 	mla	r1, r2, r1, r3
   b5858:	2200      	movs	r2, #0
   b585a:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b585e:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5860:	4294      	cmp	r4, r2
   b5862:	dd08      	ble.n	b5876 <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5864:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5868:	4285      	cmp	r5, r0
   b586a:	d101      	bne.n	b5870 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b586c:	b92b      	cbnz	r3, b587a <_Z14isActuadorDualii+0x2e>
   b586e:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5870:	3201      	adds	r2, #1
   b5872:	3114      	adds	r1, #20
   b5874:	e7f4      	b.n	b5860 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5876:	2000      	movs	r0, #0
}
   b5878:	bd30      	pop	{r4, r5, pc}
      return true;
   b587a:	4618      	mov	r0, r3
   b587c:	e7fc      	b.n	b5878 <_Z14isActuadorDualii+0x2c>
   b587e:	bf00      	nop
   b5880:	2003cd30 	.word	0x2003cd30

000b5884 <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5884:	b084      	sub	sp, #16
   b5886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5888:	ac06      	add	r4, sp, #24
   b588a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b588e:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b5892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5894:	f7ff fb3a 	bl	b4f0c <_Z10leerSensoriii>
   b5898:	ad06      	add	r5, sp, #24
   b589a:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b589c:	afbc      	add	r7, sp, #752	; 0x2f0
   b589e:	2601      	movs	r6, #1
   b58a0:	9b06      	ldr	r3, [sp, #24]
   b58a2:	42b3      	cmp	r3, r6
   b58a4:	dd12      	ble.n	b58cc <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b58a6:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b58aa:	6a2a      	ldr	r2, [r5, #32]
   b58ac:	f7ff fb2e 	bl	b4f0c <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b58b0:	f817 3b01 	ldrb.w	r3, [r7], #1
   b58b4:	b133      	cbz	r3, b58c4 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b58b6:	2c00      	cmp	r4, #0
   b58b8:	bf08      	it	eq
   b58ba:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b58bc:	3601      	adds	r6, #1
   b58be:	3510      	adds	r5, #16
   b58c0:	4604      	mov	r4, r0
   b58c2:	e7ed      	b.n	b58a0 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b58c4:	2c00      	cmp	r4, #0
   b58c6:	bf18      	it	ne
   b58c8:	4620      	movne	r0, r4
   b58ca:	e7f7      	b.n	b58bc <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b58cc:	4620      	mov	r0, r4
   b58ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b58d2:	b004      	add	sp, #16
   b58d4:	4770      	bx	lr
	...

000b58d8 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b58d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b58dc:	4c16      	ldr	r4, [pc, #88]	; (b5938 <_Z18ejecutarEvaluacionbi+0x60>)
   b58de:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b58e2:	fb03 4401 	mla	r4, r3, r1, r4
   b58e6:	4607      	mov	r7, r0
   b58e8:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b58ea:	2600      	movs	r6, #0
   b58ec:	46a1      	mov	r9, r4
   b58ee:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b58f2:	42b3      	cmp	r3, r6
   b58f4:	dd1c      	ble.n	b5930 <_Z18ejecutarEvaluacionbi+0x58>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    
    if (evaluacion == actuador.evaluate)
   b58f6:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b58fa:	f8d4 8148 	ldr.w	r8, [r4, #328]	; 0x148
   b58fe:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5902:	42bb      	cmp	r3, r7
   b5904:	d107      	bne.n	b5916 <_Z18ejecutarEvaluacionbi+0x3e>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5906:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b590a:	4640      	mov	r0, r8
   b590c:	f7ff fde4 	bl	b54d8 <_Z15actuadorHandleriii>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5910:	3601      	adds	r6, #1
   b5912:	3414      	adds	r4, #20
   b5914:	e7eb      	b.n	b58ee <_Z18ejecutarEvaluacionbi+0x16>
    }
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
   b5916:	4629      	mov	r1, r5
   b5918:	4640      	mov	r0, r8
   b591a:	9201      	str	r2, [sp, #4]
   b591c:	f7ff ff96 	bl	b584c <_Z14isActuadorDualii>
   b5920:	9a01      	ldr	r2, [sp, #4]
   b5922:	2800      	cmp	r0, #0
   b5924:	d1f4      	bne.n	b5910 <_Z18ejecutarEvaluacionbi+0x38>
      {
        apagarActuador(actuador.id, actuador.puerto);
   b5926:	4611      	mov	r1, r2
   b5928:	4640      	mov	r0, r8
   b592a:	f7ff fdc1 	bl	b54b0 <_Z14apagarActuadorii>
   b592e:	e7ef      	b.n	b5910 <_Z18ejecutarEvaluacionbi+0x38>
      }
    }
    
  }

}
   b5930:	b003      	add	sp, #12
   b5932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5936:	bf00      	nop
   b5938:	2003cd30 	.word	0x2003cd30

000b593c <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b593c:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b593e:	7803      	ldrb	r3, [r0, #0]
   b5940:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5942:	bf0c      	ite	eq
   b5944:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5946:	2200      	movne	r2, #0
   int i = 0;
   b5948:	4613      	mov	r3, r2
   b594a:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b594c:	240a      	movs	r4, #10
      i++;
   b594e:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5950:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5954:	3930      	subs	r1, #48	; 0x30
   b5956:	b2cd      	uxtb	r5, r1
   b5958:	2d09      	cmp	r5, #9
   b595a:	d802      	bhi.n	b5962 <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b595c:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5960:	e7f6      	b.n	b5950 <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5962:	b102      	cbz	r2, b5966 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5964:	4240      	negs	r0, r0
   return num;
}
   b5966:	bd30      	pop	{r4, r5, pc}

000b5968 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5968:	b538      	push	{r3, r4, r5, lr}
   b596a:	4614      	mov	r4, r2
   b596c:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b596e:	f005 fad5 	bl	baf1c <strtok>
   int j = 0;
   b5972:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5974:	b140      	cbz	r0, b5988 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5976:	f7ff ffe1 	bl	b593c <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b597a:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b597c:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5980:	2000      	movs	r0, #0
   b5982:	f005 facb 	bl	baf1c <strtok>
   while (ptr != NULL)
   b5986:	e7f5      	b.n	b5974 <_Z5splitPcS_Pi+0xc>
   }
}
   b5988:	bd38      	pop	{r3, r4, r5, pc}
	...

000b598c <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b598e:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5992:	f10d 0307 	add.w	r3, sp, #7
   b5996:	460a      	mov	r2, r1
   b5998:	4601      	mov	r1, r0
   b599a:	480d      	ldr	r0, [pc, #52]	; (b59d0 <_Z17readDataFromBlockhPhh+0x44>)
   b599c:	4d0d      	ldr	r5, [pc, #52]	; (b59d4 <_Z17readDataFromBlockhPhh+0x48>)
   b599e:	f003 f845 	bl	b8a2c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b59a2:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b59a4:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b59a6:	d010      	beq.n	b59ca <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b59a8:	f004 ff0e 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b59ac:	490a      	ldr	r1, [pc, #40]	; (b59d8 <_Z17readDataFromBlockhPhh+0x4c>)
   b59ae:	f004 fcf7 	bl	ba3a0 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b59b2:	f004 ff09 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b59b6:	7829      	ldrb	r1, [r5, #0]
   b59b8:	4604      	mov	r4, r0
   b59ba:	4805      	ldr	r0, [pc, #20]	; (b59d0 <_Z17readDataFromBlockhPhh+0x44>)
   b59bc:	f002 fd8a 	bl	b84d4 <_ZN7MFRC52217GetStatusCodeNameEh>
   b59c0:	4601      	mov	r1, r0
   b59c2:	4620      	mov	r0, r4
   b59c4:	f004 fcff 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b59c8:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b59ca:	b003      	add	sp, #12
   b59cc:	bd30      	pop	{r4, r5, pc}
   b59ce:	bf00      	nop
   b59d0:	2003d6fc 	.word	0x2003d6fc
   b59d4:	2003dc38 	.word	0x2003dc38
   b59d8:	000bb16e 	.word	0x000bb16e

000b59dc <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b59dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59de:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b59e0:	4d1e      	ldr	r5, [pc, #120]	; (b5a5c <_Z8getTagIDPi+0x80>)
   b59e2:	4a1f      	ldr	r2, [pc, #124]	; (b5a60 <_Z8getTagIDPi+0x84>)
   b59e4:	9500      	str	r5, [sp, #0]
   b59e6:	4b1f      	ldr	r3, [pc, #124]	; (b5a64 <_Z8getTagIDPi+0x88>)
   b59e8:	7812      	ldrb	r2, [r2, #0]
   b59ea:	4f1f      	ldr	r7, [pc, #124]	; (b5a68 <_Z8getTagIDPi+0x8c>)
{
   b59ec:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b59ee:	2160      	movs	r1, #96	; 0x60
   b59f0:	4628      	mov	r0, r5
   b59f2:	f003 f83c 	bl	b8a6e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b59f6:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b59f8:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b59fa:	d00f      	beq.n	b5a1c <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b59fc:	f004 fee4 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5a00:	491a      	ldr	r1, [pc, #104]	; (b5a6c <_Z8getTagIDPi+0x90>)
   b5a02:	f004 fccd 	bl	ba3a0 <_ZN5Print5printEPKc>
         Serial.println(mfrc522.GetStatusCodeName(status));
   b5a06:	f004 fedf 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5a0a:	7839      	ldrb	r1, [r7, #0]
   b5a0c:	4604      	mov	r4, r0
   b5a0e:	4628      	mov	r0, r5
   b5a10:	f002 fd60 	bl	b84d4 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5a14:	4601      	mov	r1, r0
   b5a16:	4620      	mov	r0, r4
   b5a18:	f004 fcd5 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      //writeDataToBLock(blockAddr);

      // Read data from the block's Tag.
      byte buffer[18];
      byte size = sizeof(buffer);
      if (!readDataFromBlock(blockAddr, buffer, size))
   b5a1c:	4b14      	ldr	r3, [pc, #80]	; (b5a70 <_Z8getTagIDPi+0x94>)
   b5a1e:	2212      	movs	r2, #18
   b5a20:	7818      	ldrb	r0, [r3, #0]
   b5a22:	a907      	add	r1, sp, #28
   b5a24:	f7ff ffb2 	bl	b598c <_Z17readDataFromBlockhPhh>
   b5a28:	b1b0      	cbz	r0, b5a58 <_Z8getTagIDPi+0x7c>
      // Convert from hex to String:
      char tagInfo[16];
      int i = 0;
      for (byte j = 0; j < sizeof(buffer); j++)
      {
         tagInfo[i] = (char)buffer[j];
   b5a2a:	ac07      	add	r4, sp, #28
   b5a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a2e:	ad03      	add	r5, sp, #12
   b5a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5a32:	6823      	ldr	r3, [r4, #0]
   b5a34:	802b      	strh	r3, [r5, #0]
         i++;
         // Serial.write(buffer[j]);
         // tagInfo += Serial.write(buffer[j]);
      }
      Serial.printlnf("TagInfo: %s", tagInfo);
   b5a36:	f004 fec7 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5a3a:	490e      	ldr	r1, [pc, #56]	; (b5a74 <_Z8getTagIDPi+0x98>)
   b5a3c:	aa03      	add	r2, sp, #12
   b5a3e:	f7fe ff95 	bl	b496c <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5a42:	490d      	ldr	r1, [pc, #52]	; (b5a78 <_Z8getTagIDPi+0x9c>)
   b5a44:	4632      	mov	r2, r6
   b5a46:	a803      	add	r0, sp, #12
   b5a48:	f7ff ff8e 	bl	b5968 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b5a4c:	4803      	ldr	r0, [pc, #12]	; (b5a5c <_Z8getTagIDPi+0x80>)
   b5a4e:	f002 ffc8 	bl	b89e2 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5a52:	4802      	ldr	r0, [pc, #8]	; (b5a5c <_Z8getTagIDPi+0x80>)
   b5a54:	f002 fe25 	bl	b86a2 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5a58:	b00d      	add	sp, #52	; 0x34
   b5a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5a5c:	2003d6fc 	.word	0x2003d6fc
   b5a60:	2003cca0 	.word	0x2003cca0
   b5a64:	2003d6ed 	.word	0x2003d6ed
   b5a68:	2003dc38 	.word	0x2003dc38
   b5a6c:	000bb185 	.word	0x000bb185
   b5a70:	2003cc78 	.word	0x2003cc78
   b5a74:	000bb1a1 	.word	0x000bb1a1
   b5a78:	2003cc79 	.word	0x2003cc79

000b5a7c <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b5a7c:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b5a7e:	b940      	cbnz	r0, b5a92 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b5a80:	4b32      	ldr	r3, [pc, #200]	; (b5b4c <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b5a82:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b5a84:	2c05      	cmp	r4, #5
   b5a86:	d858      	bhi.n	b5b3a <_Z13asignarPuertoi+0xbe>
   b5a88:	e8df f004 	tbb	[pc, r4]
   b5a8c:	32221305 	.word	0x32221305
   b5a90:	483d      	.short	0x483d
      option = puertoDigital;
   b5a92:	4b2f      	ldr	r3, [pc, #188]	; (b5b50 <_Z13asignarPuertoi+0xd4>)
   b5a94:	e7f5      	b.n	b5a82 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b5a96:	f004 fe97 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5a9a:	492e      	ldr	r1, [pc, #184]	; (b5b54 <_Z13asignarPuertoi+0xd8>)
   b5a9c:	f004 fc80 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5aa0:	4a2a      	ldr	r2, [pc, #168]	; (b5b4c <_Z13asignarPuertoi+0xd0>)
   b5aa2:	6813      	ldr	r3, [r2, #0]
   b5aa4:	3301      	adds	r3, #1
   b5aa6:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5aa8:	4a2b      	ldr	r2, [pc, #172]	; (b5b58 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b5aaa:	6813      	ldr	r3, [r2, #0]
   b5aac:	3301      	adds	r3, #1
   b5aae:	6013      	str	r3, [r2, #0]
      return 4;
   b5ab0:	e01c      	b.n	b5aec <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5ab2:	f004 fe89 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5ab6:	4929      	ldr	r1, [pc, #164]	; (b5b5c <_Z13asignarPuertoi+0xe0>)
   b5ab8:	f004 fc72 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5abc:	4a23      	ldr	r2, [pc, #140]	; (b5b4c <_Z13asignarPuertoi+0xd0>)
   b5abe:	6813      	ldr	r3, [r2, #0]
   b5ac0:	3301      	adds	r3, #1
   b5ac2:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5ac4:	4a24      	ldr	r2, [pc, #144]	; (b5b58 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b5ac6:	6813      	ldr	r3, [r2, #0]
   b5ac8:	3301      	adds	r3, #1
   b5aca:	6013      	str	r3, [r2, #0]
      return 2;
   b5acc:	2402      	movs	r4, #2
   b5ace:	e00d      	b.n	b5aec <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5ad0:	f004 fe7a 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5ad4:	4922      	ldr	r1, [pc, #136]	; (b5b60 <_Z13asignarPuertoi+0xe4>)
   b5ad6:	f004 fc63 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b5ada:	4b1c      	ldr	r3, [pc, #112]	; (b5b4c <_Z13asignarPuertoi+0xd0>)
   b5adc:	f04f 32ff 	mov.w	r2, #4294967295
   b5ae0:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5ae2:	4a1d      	ldr	r2, [pc, #116]	; (b5b58 <_Z13asignarPuertoi+0xdc>)
   b5ae4:	6813      	ldr	r3, [r2, #0]
   b5ae6:	3301      	adds	r3, #1
   b5ae8:	6013      	str	r3, [r2, #0]
      return 4;
   b5aea:	2404      	movs	r4, #4

   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }
}
   b5aec:	4620      	mov	r0, r4
   b5aee:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5af0:	f004 fe6a 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5af4:	491b      	ldr	r1, [pc, #108]	; (b5b64 <_Z13asignarPuertoi+0xe8>)
   b5af6:	f004 fc53 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5afa:	4a15      	ldr	r2, [pc, #84]	; (b5b50 <_Z13asignarPuertoi+0xd4>)
   b5afc:	6813      	ldr	r3, [r2, #0]
   b5afe:	3301      	adds	r3, #1
   b5b00:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5b02:	4a19      	ldr	r2, [pc, #100]	; (b5b68 <_Z13asignarPuertoi+0xec>)
   b5b04:	e7df      	b.n	b5ac6 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b5b06:	f004 fe5f 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5b0a:	4918      	ldr	r1, [pc, #96]	; (b5b6c <_Z13asignarPuertoi+0xf0>)
   b5b0c:	f004 fc48 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5b10:	4a0f      	ldr	r2, [pc, #60]	; (b5b50 <_Z13asignarPuertoi+0xd4>)
   b5b12:	6813      	ldr	r3, [r2, #0]
   b5b14:	3301      	adds	r3, #1
   b5b16:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5b18:	4a13      	ldr	r2, [pc, #76]	; (b5b68 <_Z13asignarPuertoi+0xec>)
   b5b1a:	e7c6      	b.n	b5aaa <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b5b1c:	f004 fe54 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5b20:	4913      	ldr	r1, [pc, #76]	; (b5b70 <_Z13asignarPuertoi+0xf4>)
   b5b22:	f004 fc3d 	bl	ba3a0 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b5b26:	4b0a      	ldr	r3, [pc, #40]	; (b5b50 <_Z13asignarPuertoi+0xd4>)
   b5b28:	f04f 32ff 	mov.w	r2, #4294967295
   b5b2c:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b5b2e:	4a0e      	ldr	r2, [pc, #56]	; (b5b68 <_Z13asignarPuertoi+0xec>)
   b5b30:	6813      	ldr	r3, [r2, #0]
   b5b32:	3301      	adds	r3, #1
   b5b34:	6013      	str	r3, [r2, #0]
      return 6;
   b5b36:	2406      	movs	r4, #6
   b5b38:	e7d8      	b.n	b5aec <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b5b3a:	f004 fe45 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5b3e:	490d      	ldr	r1, [pc, #52]	; (b5b74 <_Z13asignarPuertoi+0xf8>)
   b5b40:	f004 fc2e 	bl	ba3a0 <_ZN5Print5printEPKc>
      return -1;
   b5b44:	f04f 34ff 	mov.w	r4, #4294967295
   b5b48:	e7d0      	b.n	b5aec <_Z13asignarPuertoi+0x70>
   b5b4a:	bf00      	nop
   b5b4c:	2003da44 	.word	0x2003da44
   b5b50:	2003cc84 	.word	0x2003cc84
   b5b54:	000bb1ad 	.word	0x000bb1ad
   b5b58:	2003da48 	.word	0x2003da48
   b5b5c:	000bb1c4 	.word	0x000bb1c4
   b5b60:	000bb1db 	.word	0x000bb1db
   b5b64:	000bb1f2 	.word	0x000bb1f2
   b5b68:	2003da4c 	.word	0x2003da4c
   b5b6c:	000bb209 	.word	0x000bb209
   b5b70:	000bb220 	.word	0x000bb220
   b5b74:	000bb237 	.word	0x000bb237

000b5b78 <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b5b78:	b570      	push	{r4, r5, r6, lr}
   b5b7a:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5b7c:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b5b7e:	a807      	add	r0, sp, #28
   b5b80:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b5b84:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b5b88:	f004 fd2e 	bl	ba5e8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5b8c:	4843      	ldr	r0, [pc, #268]	; (b5c9c <setup+0x124>)
   b5b8e:	4623      	mov	r3, r4
   b5b90:	4622      	mov	r2, r4
   b5b92:	4621      	mov	r1, r4
   b5b94:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5b96:	4c42      	ldr	r4, [pc, #264]	; (b5ca0 <setup+0x128>)
   b5b98:	f004 f926 	bl	b9de8 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b5b9c:	f004 fe14 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b5ba0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5ba4:	f004 fe04 	bl	ba7b0 <_ZN9USBSerial5beginEl>
   b5ba8:	7821      	ldrb	r1, [r4, #0]
   b5baa:	f3bf 8f5b 	dmb	ish
   b5bae:	f011 0101 	ands.w	r1, r1, #1
   b5bb2:	d10b      	bne.n	b5bcc <setup+0x54>
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	9105      	str	r1, [sp, #20]
   b5bb8:	f7fe fea4 	bl	b4904 <__cxa_guard_acquire>
   b5bbc:	9905      	ldr	r1, [sp, #20]
   b5bbe:	b128      	cbz	r0, b5bcc <setup+0x54>
   b5bc0:	4838      	ldr	r0, [pc, #224]	; (b5ca4 <setup+0x12c>)
   b5bc2:	f004 f9dd 	bl	b9f80 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7fe fea1 	bl	b490e <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5bcc:	4835      	ldr	r0, [pc, #212]	; (b5ca4 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b5bce:	4c36      	ldr	r4, [pc, #216]	; (b5ca8 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5bd0:	2501      	movs	r5, #1
   b5bd2:	f004 f9df 	bl	b9f94 <_ZN8SPIClass5beginEv>
   b5bd6:	462b      	mov	r3, r5
   b5bd8:	223c      	movs	r2, #60	; 0x3c
   b5bda:	2102      	movs	r1, #2
   b5bdc:	4833      	ldr	r0, [pc, #204]	; (b5cac <setup+0x134>)
   b5bde:	9500      	str	r5, [sp, #0]
   b5be0:	f003 fb2e 	bl	b9240 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5be4:	4831      	ldr	r0, [pc, #196]	; (b5cac <setup+0x134>)
   b5be6:	f003 fb1d 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5bea:	4830      	ldr	r0, [pc, #192]	; (b5cac <setup+0x134>)
   b5bec:	f003 fd82 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5bf0:	482f      	ldr	r0, [pc, #188]	; (b5cb0 <setup+0x138>)
   b5bf2:	f002 fdba 	bl	b876a <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b5bf6:	4a2f      	ldr	r2, [pc, #188]	; (b5cb4 <setup+0x13c>)
   b5bf8:	21ff      	movs	r1, #255	; 0xff
   b5bfa:	7011      	strb	r1, [r2, #0]
   b5bfc:	7051      	strb	r1, [r2, #1]
   b5bfe:	7091      	strb	r1, [r2, #2]
   b5c00:	70d1      	strb	r1, [r2, #3]
   b5c02:	7111      	strb	r1, [r2, #4]
   b5c04:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b5c06:	f005 f8c7 	bl	bad98 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b5c0a:	2000      	movs	r0, #0
   b5c0c:	f003 ff58 	bl	b9ac0 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5c10:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5c12:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5c14:	d10d      	bne.n	b5c32 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b5c16:	f004 fdd7 	bl	ba7c8 <_Z16_fetch_usbserialv>
    MODE = 0;
   b5c1a:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b5c1c:	4926      	ldr	r1, [pc, #152]	; (b5cb8 <setup+0x140>)
   b5c1e:	f004 fbd2 	bl	ba3c6 <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5c22:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5c24:	f005 f8b8 	bl	bad98 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5c28:	462a      	mov	r2, r5
   b5c2a:	4621      	mov	r1, r4
   b5c2c:	4630      	mov	r0, r6
   b5c2e:	f003 ff4f 	bl	b9ad0 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b5c32:	7824      	ldrb	r4, [r4, #0]
   b5c34:	bb54      	cbnz	r4, b5c8c <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b5c36:	2101      	movs	r1, #1
   b5c38:	2006      	movs	r0, #6
   b5c3a:	f004 fffb 	bl	bac34 <pinMode>
    ledObject.init();
   b5c3e:	481f      	ldr	r0, [pc, #124]	; (b5cbc <setup+0x144>)
   b5c40:	f003 fea4 	bl	b998c <_ZN12ChainableLED4initEv>
    init = true;
   b5c44:	4b1e      	ldr	r3, [pc, #120]	; (b5cc0 <setup+0x148>)
   b5c46:	2201      	movs	r2, #1
   b5c48:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b5c4a:	4a1e      	ldr	r2, [pc, #120]	; (b5cc4 <setup+0x14c>)
   b5c4c:	6813      	ldr	r3, [r2, #0]
   b5c4e:	3301      	adds	r3, #1
   b5c50:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b5c52:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5c56:	4a1c      	ldr	r2, [pc, #112]	; (b5cc8 <setup+0x150>)
   b5c58:	434b      	muls	r3, r1
   b5c5a:	18d1      	adds	r1, r2, r3
   b5c5c:	50d4      	str	r4, [r2, r3]
   b5c5e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b5c62:	2340      	movs	r3, #64	; 0x40
   b5c64:	2201      	movs	r2, #1
   b5c66:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5c6a:	2200      	movs	r2, #0
   b5c6c:	2380      	movs	r3, #128	; 0x80
   b5c6e:	4611      	mov	r1, r2
   b5c70:	9300      	str	r3, [sp, #0]
   b5c72:	480e      	ldr	r0, [pc, #56]	; (b5cac <setup+0x134>)
   b5c74:	4b15      	ldr	r3, [pc, #84]	; (b5ccc <setup+0x154>)
   b5c76:	f002 f9cd 	bl	b8014 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b5c7a:	480c      	ldr	r0, [pc, #48]	; (b5cac <setup+0x134>)
   b5c7c:	f003 fd3a 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5c80:	f003 ff0e 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b5c84:	4b12      	ldr	r3, [pc, #72]	; (b5cd0 <setup+0x158>)
   b5c86:	6018      	str	r0, [r3, #0]
  
}
   b5c88:	b00a      	add	sp, #40	; 0x28
   b5c8a:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b5c8c:	2c01      	cmp	r4, #1
   b5c8e:	d0e8      	beq.n	b5c62 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b5c90:	2101      	movs	r1, #1
   b5c92:	2006      	movs	r0, #6
   b5c94:	f004 ffce 	bl	bac34 <pinMode>
   b5c98:	e7e3      	b.n	b5c62 <setup+0xea>
   b5c9a:	bf00      	nop
   b5c9c:	2003e710 	.word	0x2003e710
   b5ca0:	2003cd10 	.word	0x2003cd10
   b5ca4:	2003cd14 	.word	0x2003cd14
   b5ca8:	2003cd1e 	.word	0x2003cd1e
   b5cac:	2003d354 	.word	0x2003d354
   b5cb0:	2003d6fc 	.word	0x2003d6fc
   b5cb4:	2003d6ed 	.word	0x2003d6ed
   b5cb8:	000bb25f 	.word	0x000bb25f
   b5cbc:	2003d6f4 	.word	0x2003d6f4
   b5cc0:	2003d6ec 	.word	0x2003d6ec
   b5cc4:	2003cc80 	.word	0x2003cc80
   b5cc8:	2003cd30 	.word	0x2003cd30
   b5ccc:	000bbb74 	.word	0x000bbb74
   b5cd0:	2003dc34 	.word	0x2003dc34

000b5cd4 <_GLOBAL__sub_I__Z13leerSensorLuzv>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b5cd4:	2305      	movs	r3, #5
              showBitmap(2,4,"");
              play=false;
        }

  }
   b5cd6:	b570      	push	{r4, r5, r6, lr}
   b5cd8:	461a      	mov	r2, r3
   b5cda:	2104      	movs	r1, #4
   b5cdc:	48a9      	ldr	r0, [pc, #676]	; (b5f84 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b0>)
String tarjetas[80] = {"3#0#0#3#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b5cde:	4daa      	ldr	r5, [pc, #680]	; (b5f88 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b4>)
   b5ce0:	4eaa      	ldr	r6, [pc, #680]	; (b5f8c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b5ce2:	f003 fda1 	bl	b9828 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b5ce6:	4baa      	ldr	r3, [pc, #680]	; (b5f90 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2bc>)
Adafruit_SSD1306 display(-1);
   b5ce8:	48aa      	ldr	r0, [pc, #680]	; (b5f94 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c0>)
   b5cea:	2400      	movs	r4, #0
   b5cec:	601c      	str	r4, [r3, #0]
   b5cee:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b5cf2:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b5cf6:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b5cfa:	f04f 31ff 	mov.w	r1, #4294967295
   b5cfe:	f003 f99d 	bl	b903c <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b5d02:	49a5      	ldr	r1, [pc, #660]	; (b5f98 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b5d04:	48a5      	ldr	r0, [pc, #660]	; (b5f9c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c8>)
   b5d06:	f004 fa90 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d0a:	49a3      	ldr	r1, [pc, #652]	; (b5f98 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2c4>)
   b5d0c:	48a4      	ldr	r0, [pc, #656]	; (b5fa0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2cc>)
   b5d0e:	f004 fa8c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[16] = { "0#2#0","0#3#0","0#4#1","0#9#1","0#10#1","0#11#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5"};
   b5d12:	49a4      	ldr	r1, [pc, #656]	; (b5fa4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d0>)
   b5d14:	48a4      	ldr	r0, [pc, #656]	; (b5fa8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d4>)
   b5d16:	f004 fa88 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d1a:	49a4      	ldr	r1, [pc, #656]	; (b5fac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2d8>)
   b5d1c:	48a4      	ldr	r0, [pc, #656]	; (b5fb0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2dc>)
   b5d1e:	f004 fa84 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d22:	49a4      	ldr	r1, [pc, #656]	; (b5fb4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e0>)
   b5d24:	48a4      	ldr	r0, [pc, #656]	; (b5fb8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e4>)
   b5d26:	f004 fa80 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d2a:	49a4      	ldr	r1, [pc, #656]	; (b5fbc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2e8>)
   b5d2c:	48a4      	ldr	r0, [pc, #656]	; (b5fc0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2ec>)
   b5d2e:	f004 fa7c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d32:	49a4      	ldr	r1, [pc, #656]	; (b5fc4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f0>)
   b5d34:	48a4      	ldr	r0, [pc, #656]	; (b5fc8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f4>)
   b5d36:	f004 fa78 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d3a:	49a4      	ldr	r1, [pc, #656]	; (b5fcc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2f8>)
   b5d3c:	48a4      	ldr	r0, [pc, #656]	; (b5fd0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2fc>)
   b5d3e:	f004 fa74 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d42:	49a4      	ldr	r1, [pc, #656]	; (b5fd4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x300>)
   b5d44:	48a4      	ldr	r0, [pc, #656]	; (b5fd8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x304>)
   b5d46:	f004 fa70 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d4a:	49a4      	ldr	r1, [pc, #656]	; (b5fdc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x308>)
   b5d4c:	48a4      	ldr	r0, [pc, #656]	; (b5fe0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x30c>)
   b5d4e:	f004 fa6c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d52:	49a4      	ldr	r1, [pc, #656]	; (b5fe4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x310>)
   b5d54:	48a4      	ldr	r0, [pc, #656]	; (b5fe8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x314>)
   b5d56:	f004 fa68 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d5a:	49a4      	ldr	r1, [pc, #656]	; (b5fec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x318>)
   b5d5c:	48a4      	ldr	r0, [pc, #656]	; (b5ff0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x31c>)
   b5d5e:	f004 fa64 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d62:	49a4      	ldr	r1, [pc, #656]	; (b5ff4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x320>)
   b5d64:	48a4      	ldr	r0, [pc, #656]	; (b5ff8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x324>)
   b5d66:	f004 fa60 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d6a:	49a4      	ldr	r1, [pc, #656]	; (b5ffc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x328>)
   b5d6c:	48a4      	ldr	r0, [pc, #656]	; (b6000 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x32c>)
   b5d6e:	f004 fa5c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d72:	49a4      	ldr	r1, [pc, #656]	; (b6004 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x330>)
   b5d74:	48a4      	ldr	r0, [pc, #656]	; (b6008 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x334>)
   b5d76:	f004 fa58 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d7a:	49a4      	ldr	r1, [pc, #656]	; (b600c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x338>)
   b5d7c:	48a4      	ldr	r0, [pc, #656]	; (b6010 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x33c>)
   b5d7e:	f004 fa54 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d82:	4982      	ldr	r1, [pc, #520]	; (b5f8c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b5d84:	48a3      	ldr	r0, [pc, #652]	; (b6014 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x340>)
   b5d86:	f004 fa50 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d8a:	4980      	ldr	r1, [pc, #512]	; (b5f8c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x2b8>)
   b5d8c:	48a2      	ldr	r0, [pc, #648]	; (b6018 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x344>)
   b5d8e:	f004 fa4c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b5d92:	49a2      	ldr	r1, [pc, #648]	; (b601c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x348>)
   b5d94:	48a2      	ldr	r0, [pc, #648]	; (b6020 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x34c>)
   b5d96:	f004 fa48 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d9a:	49a2      	ldr	r1, [pc, #648]	; (b6024 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x350>)
   b5d9c:	48a2      	ldr	r0, [pc, #648]	; (b6028 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x354>)
   b5d9e:	f004 fa44 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5da2:	49a2      	ldr	r1, [pc, #648]	; (b602c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x358>)
   b5da4:	48a2      	ldr	r0, [pc, #648]	; (b6030 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x35c>)
   b5da6:	f004 fa40 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5daa:	49a2      	ldr	r1, [pc, #648]	; (b6034 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x360>)
   b5dac:	48a2      	ldr	r0, [pc, #648]	; (b6038 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x364>)
   b5dae:	f004 fa3c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5db2:	49a2      	ldr	r1, [pc, #648]	; (b603c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x368>)
   b5db4:	48a2      	ldr	r0, [pc, #648]	; (b6040 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x36c>)
   b5db6:	f004 fa38 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dba:	49a2      	ldr	r1, [pc, #648]	; (b6044 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x370>)
   b5dbc:	48a2      	ldr	r0, [pc, #648]	; (b6048 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x374>)
   b5dbe:	f004 fa34 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dc2:	49a2      	ldr	r1, [pc, #648]	; (b604c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x378>)
   b5dc4:	48a2      	ldr	r0, [pc, #648]	; (b6050 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x37c>)
   b5dc6:	f004 fa30 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dca:	49a2      	ldr	r1, [pc, #648]	; (b6054 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x380>)
   b5dcc:	48a2      	ldr	r0, [pc, #648]	; (b6058 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x384>)
   b5dce:	f004 fa2c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dd2:	49a2      	ldr	r1, [pc, #648]	; (b605c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x388>)
   b5dd4:	48a2      	ldr	r0, [pc, #648]	; (b6060 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x38c>)
   b5dd6:	f004 fa28 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dda:	49a2      	ldr	r1, [pc, #648]	; (b6064 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x390>)
   b5ddc:	48a2      	ldr	r0, [pc, #648]	; (b6068 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x394>)
   b5dde:	f004 fa24 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5de2:	49a2      	ldr	r1, [pc, #648]	; (b606c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x398>)
   b5de4:	48a2      	ldr	r0, [pc, #648]	; (b6070 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x39c>)
   b5de6:	f004 fa20 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dea:	49a2      	ldr	r1, [pc, #648]	; (b6074 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a0>)
   b5dec:	48a2      	ldr	r0, [pc, #648]	; (b6078 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a4>)
   b5dee:	f004 fa1c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5df2:	49a2      	ldr	r1, [pc, #648]	; (b607c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3a8>)
   b5df4:	48a2      	ldr	r0, [pc, #648]	; (b6080 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ac>)
   b5df6:	f004 fa18 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dfa:	49a2      	ldr	r1, [pc, #648]	; (b6084 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b0>)
   b5dfc:	48a2      	ldr	r0, [pc, #648]	; (b6088 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b4>)
   b5dfe:	f004 fa14 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e02:	49a2      	ldr	r1, [pc, #648]	; (b608c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3b8>)
   b5e04:	48a2      	ldr	r0, [pc, #648]	; (b6090 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3bc>)
   b5e06:	f004 fa10 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e0a:	49a2      	ldr	r1, [pc, #648]	; (b6094 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c0>)
   b5e0c:	48a2      	ldr	r0, [pc, #648]	; (b6098 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c4>)
   b5e0e:	f004 fa0c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e12:	49a2      	ldr	r1, [pc, #648]	; (b609c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3c8>)
   b5e14:	48a2      	ldr	r0, [pc, #648]	; (b60a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3cc>)
   b5e16:	f004 fa08 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e1a:	49a2      	ldr	r1, [pc, #648]	; (b60a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d0>)
   b5e1c:	48a2      	ldr	r0, [pc, #648]	; (b60a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d4>)
   b5e1e:	f004 fa04 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e22:	49a2      	ldr	r1, [pc, #648]	; (b60ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3d8>)
   b5e24:	48a2      	ldr	r0, [pc, #648]	; (b60b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3dc>)
   b5e26:	f004 fa00 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e2a:	49a2      	ldr	r1, [pc, #648]	; (b60b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e0>)
   b5e2c:	48a2      	ldr	r0, [pc, #648]	; (b60b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e4>)
   b5e2e:	f004 f9fc 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e32:	49a2      	ldr	r1, [pc, #648]	; (b60bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3e8>)
   b5e34:	48a2      	ldr	r0, [pc, #648]	; (b60c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3ec>)
   b5e36:	f004 f9f8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e3a:	49a2      	ldr	r1, [pc, #648]	; (b60c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f0>)
   b5e3c:	48a2      	ldr	r0, [pc, #648]	; (b60c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f4>)
   b5e3e:	f004 f9f4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e42:	49a2      	ldr	r1, [pc, #648]	; (b60cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3f8>)
   b5e44:	48a2      	ldr	r0, [pc, #648]	; (b60d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x3fc>)
   b5e46:	f004 f9f0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e4a:	49a2      	ldr	r1, [pc, #648]	; (b60d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x400>)
   b5e4c:	48a2      	ldr	r0, [pc, #648]	; (b60d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x404>)
   b5e4e:	f004 f9ec 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e52:	49a2      	ldr	r1, [pc, #648]	; (b60dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x408>)
   b5e54:	48a2      	ldr	r0, [pc, #648]	; (b60e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x40c>)
   b5e56:	f004 f9e8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e5a:	49a2      	ldr	r1, [pc, #648]	; (b60e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x410>)
   b5e5c:	48a2      	ldr	r0, [pc, #648]	; (b60e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x414>)
   b5e5e:	f004 f9e4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e62:	49a2      	ldr	r1, [pc, #648]	; (b60ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x418>)
   b5e64:	48a2      	ldr	r0, [pc, #648]	; (b60f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x41c>)
   b5e66:	f004 f9e0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e6a:	49a2      	ldr	r1, [pc, #648]	; (b60f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x420>)
   b5e6c:	48a2      	ldr	r0, [pc, #648]	; (b60f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x424>)
   b5e6e:	f004 f9dc 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b5e72:	49a2      	ldr	r1, [pc, #648]	; (b60fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x428>)
   b5e74:	48a2      	ldr	r0, [pc, #648]	; (b6100 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x42c>)
   b5e76:	f004 f9d8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e7a:	49a2      	ldr	r1, [pc, #648]	; (b6104 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x430>)
   b5e7c:	48a2      	ldr	r0, [pc, #648]	; (b6108 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x434>)
   b5e7e:	f004 f9d4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e82:	49a2      	ldr	r1, [pc, #648]	; (b610c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x438>)
   b5e84:	48a2      	ldr	r0, [pc, #648]	; (b6110 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x43c>)
   b5e86:	f004 f9d0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e8a:	49a2      	ldr	r1, [pc, #648]	; (b6114 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x440>)
   b5e8c:	48a2      	ldr	r0, [pc, #648]	; (b6118 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x444>)
   b5e8e:	f004 f9cc 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e92:	49a2      	ldr	r1, [pc, #648]	; (b611c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x448>)
   b5e94:	48a2      	ldr	r0, [pc, #648]	; (b6120 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x44c>)
   b5e96:	f004 f9c8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5e9a:	49a2      	ldr	r1, [pc, #648]	; (b6124 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x450>)
   b5e9c:	48a2      	ldr	r0, [pc, #648]	; (b6128 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x454>)
   b5e9e:	f004 f9c4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5ea2:	49a2      	ldr	r1, [pc, #648]	; (b612c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x458>)
   b5ea4:	48a2      	ldr	r0, [pc, #648]	; (b6130 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x45c>)
   b5ea6:	f004 f9c0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eaa:	49a2      	ldr	r1, [pc, #648]	; (b6134 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x460>)
   b5eac:	48a2      	ldr	r0, [pc, #648]	; (b6138 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x464>)
   b5eae:	f004 f9bc 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eb2:	49a2      	ldr	r1, [pc, #648]	; (b613c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x468>)
   b5eb4:	48a2      	ldr	r0, [pc, #648]	; (b6140 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x46c>)
   b5eb6:	f004 f9b8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eba:	49a2      	ldr	r1, [pc, #648]	; (b6144 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x470>)
   b5ebc:	48a2      	ldr	r0, [pc, #648]	; (b6148 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x474>)
   b5ebe:	f004 f9b4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5ec2:	49a2      	ldr	r1, [pc, #648]	; (b614c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x478>)
   b5ec4:	48a2      	ldr	r0, [pc, #648]	; (b6150 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x47c>)
   b5ec6:	f004 f9b0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eca:	49a2      	ldr	r1, [pc, #648]	; (b6154 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x480>)
   b5ecc:	48a2      	ldr	r0, [pc, #648]	; (b6158 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x484>)
   b5ece:	f004 f9ac 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5ed2:	49a2      	ldr	r1, [pc, #648]	; (b615c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x488>)
   b5ed4:	48a2      	ldr	r0, [pc, #648]	; (b6160 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x48c>)
   b5ed6:	f004 f9a8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eda:	49a2      	ldr	r1, [pc, #648]	; (b6164 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x490>)
   b5edc:	48a2      	ldr	r0, [pc, #648]	; (b6168 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x494>)
   b5ede:	f004 f9a4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5ee2:	49a2      	ldr	r1, [pc, #648]	; (b616c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x498>)
   b5ee4:	48a2      	ldr	r0, [pc, #648]	; (b6170 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x49c>)
   b5ee6:	f004 f9a0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5eea:	49a2      	ldr	r1, [pc, #648]	; (b6174 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a0>)
   b5eec:	48a2      	ldr	r0, [pc, #648]	; (b6178 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a4>)
   b5eee:	f004 f99c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5ef2:	49a2      	ldr	r1, [pc, #648]	; (b617c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4a8>)
   b5ef4:	48a2      	ldr	r0, [pc, #648]	; (b6180 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ac>)
   b5ef6:	f004 f998 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5efa:	49a2      	ldr	r1, [pc, #648]	; (b6184 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b0>)
   b5efc:	48a2      	ldr	r0, [pc, #648]	; (b6188 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b4>)
   b5efe:	f004 f994 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f02:	49a2      	ldr	r1, [pc, #648]	; (b618c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4b8>)
   b5f04:	48a2      	ldr	r0, [pc, #648]	; (b6190 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4bc>)
   b5f06:	f004 f990 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f0a:	49a2      	ldr	r1, [pc, #648]	; (b6194 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c0>)
   b5f0c:	48a2      	ldr	r0, [pc, #648]	; (b6198 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c4>)
   b5f0e:	f004 f98c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f12:	49a2      	ldr	r1, [pc, #648]	; (b619c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4c8>)
   b5f14:	48a2      	ldr	r0, [pc, #648]	; (b61a0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4cc>)
   b5f16:	f004 f988 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f1a:	49a2      	ldr	r1, [pc, #648]	; (b61a4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d0>)
   b5f1c:	48a2      	ldr	r0, [pc, #648]	; (b61a8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d4>)
   b5f1e:	f004 f984 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f22:	49a2      	ldr	r1, [pc, #648]	; (b61ac <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4d8>)
   b5f24:	48a2      	ldr	r0, [pc, #648]	; (b61b0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4dc>)
   b5f26:	f004 f980 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f2a:	49a2      	ldr	r1, [pc, #648]	; (b61b4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e0>)
   b5f2c:	48a2      	ldr	r0, [pc, #648]	; (b61b8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e4>)
   b5f2e:	f004 f97c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f32:	49a2      	ldr	r1, [pc, #648]	; (b61bc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4e8>)
   b5f34:	48a2      	ldr	r0, [pc, #648]	; (b61c0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4ec>)
   b5f36:	f004 f978 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f3a:	49a2      	ldr	r1, [pc, #648]	; (b61c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f0>)
   b5f3c:	48a2      	ldr	r0, [pc, #648]	; (b61c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f4>)
   b5f3e:	f004 f974 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f42:	49a2      	ldr	r1, [pc, #648]	; (b61cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4f8>)
   b5f44:	48a2      	ldr	r0, [pc, #648]	; (b61d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x4fc>)
   b5f46:	f004 f970 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f4a:	49a2      	ldr	r1, [pc, #648]	; (b61d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x500>)
   b5f4c:	48a2      	ldr	r0, [pc, #648]	; (b61d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x504>)
   b5f4e:	f004 f96c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f52:	49a2      	ldr	r1, [pc, #648]	; (b61dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x508>)
   b5f54:	48a2      	ldr	r0, [pc, #648]	; (b61e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x50c>)
   b5f56:	f004 f968 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f5a:	49a2      	ldr	r1, [pc, #648]	; (b61e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x510>)
   b5f5c:	48a2      	ldr	r0, [pc, #648]	; (b61e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x514>)
   b5f5e:	f004 f964 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f62:	49a2      	ldr	r1, [pc, #648]	; (b61ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x518>)
   b5f64:	48a2      	ldr	r0, [pc, #648]	; (b61f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x51c>)
   b5f66:	f004 f960 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f6a:	49a2      	ldr	r1, [pc, #648]	; (b61f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x520>)
   b5f6c:	48a2      	ldr	r0, [pc, #648]	; (b61f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x524>)
   b5f6e:	f004 f95c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f72:	49a2      	ldr	r1, [pc, #648]	; (b61fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x528>)
   b5f74:	48a2      	ldr	r0, [pc, #648]	; (b6200 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x52c>)
   b5f76:	f004 f958 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f7a:	49a2      	ldr	r1, [pc, #648]	; (b6204 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x530>)
   b5f7c:	48a2      	ldr	r0, [pc, #648]	; (b6208 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x534>)
   b5f7e:	f004 f954 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f82:	e143      	b.n	b620c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x538>
   b5f84:	2003d6f4 	.word	0x2003d6f4
   b5f88:	2003dc90 	.word	0x2003dc90
   b5f8c:	000bb25e 	.word	0x000bb25e
   b5f90:	2003cd30 	.word	0x2003cd30
   b5f94:	2003d354 	.word	0x2003d354
   b5f98:	000bb26c 	.word	0x000bb26c
   b5f9c:	2003d3a4 	.word	0x2003d3a4
   b5fa0:	2003d3b4 	.word	0x2003d3b4
   b5fa4:	000bb2da 	.word	0x000bb2da
   b5fa8:	2003e380 	.word	0x2003e380
   b5fac:	000bb2ee 	.word	0x000bb2ee
   b5fb0:	2003e390 	.word	0x2003e390
   b5fb4:	000bb41e 	.word	0x000bb41e
   b5fb8:	2003e3a0 	.word	0x2003e3a0
   b5fbc:	000bb26e 	.word	0x000bb26e
   b5fc0:	2003e3b0 	.word	0x2003e3b0
   b5fc4:	000bb274 	.word	0x000bb274
   b5fc8:	2003e3c0 	.word	0x2003e3c0
   b5fcc:	000bb27b 	.word	0x000bb27b
   b5fd0:	2003e3d0 	.word	0x2003e3d0
   b5fd4:	000bb282 	.word	0x000bb282
   b5fd8:	2003e3e0 	.word	0x2003e3e0
   b5fdc:	000bb28a 	.word	0x000bb28a
   b5fe0:	2003e3f0 	.word	0x2003e3f0
   b5fe4:	000bb292 	.word	0x000bb292
   b5fe8:	2003e400 	.word	0x2003e400
   b5fec:	000bb29a 	.word	0x000bb29a
   b5ff0:	2003e410 	.word	0x2003e410
   b5ff4:	000bb2a2 	.word	0x000bb2a2
   b5ff8:	2003e420 	.word	0x2003e420
   b5ffc:	000bb2aa 	.word	0x000bb2aa
   b6000:	2003e430 	.word	0x2003e430
   b6004:	000bb2b2 	.word	0x000bb2b2
   b6008:	2003e440 	.word	0x2003e440
   b600c:	000bb2ba 	.word	0x000bb2ba
   b6010:	2003e450 	.word	0x2003e450
   b6014:	2003e460 	.word	0x2003e460
   b6018:	2003e470 	.word	0x2003e470
   b601c:	000bb2c2 	.word	0x000bb2c2
   b6020:	2003e1c0 	.word	0x2003e1c0
   b6024:	000bb2cc 	.word	0x000bb2cc
   b6028:	2003e1d0 	.word	0x2003e1d0
   b602c:	000bb2d6 	.word	0x000bb2d6
   b6030:	2003e1e0 	.word	0x2003e1e0
   b6034:	000bb2e0 	.word	0x000bb2e0
   b6038:	2003e1f0 	.word	0x2003e1f0
   b603c:	000bb2ea 	.word	0x000bb2ea
   b6040:	2003e200 	.word	0x2003e200
   b6044:	000bb2f4 	.word	0x000bb2f4
   b6048:	2003e210 	.word	0x2003e210
   b604c:	000bb2fe 	.word	0x000bb2fe
   b6050:	2003e220 	.word	0x2003e220
   b6054:	000bb308 	.word	0x000bb308
   b6058:	2003e230 	.word	0x2003e230
   b605c:	000bb312 	.word	0x000bb312
   b6060:	2003e240 	.word	0x2003e240
   b6064:	000bb31c 	.word	0x000bb31c
   b6068:	2003e250 	.word	0x2003e250
   b606c:	000bb326 	.word	0x000bb326
   b6070:	2003e260 	.word	0x2003e260
   b6074:	000bb330 	.word	0x000bb330
   b6078:	2003e270 	.word	0x2003e270
   b607c:	000bb33a 	.word	0x000bb33a
   b6080:	2003e280 	.word	0x2003e280
   b6084:	000bb344 	.word	0x000bb344
   b6088:	2003e290 	.word	0x2003e290
   b608c:	000bb34e 	.word	0x000bb34e
   b6090:	2003e2a0 	.word	0x2003e2a0
   b6094:	000bb358 	.word	0x000bb358
   b6098:	2003e2b0 	.word	0x2003e2b0
   b609c:	000bb362 	.word	0x000bb362
   b60a0:	2003e2c0 	.word	0x2003e2c0
   b60a4:	000bb36c 	.word	0x000bb36c
   b60a8:	2003e2d0 	.word	0x2003e2d0
   b60ac:	000bb376 	.word	0x000bb376
   b60b0:	2003e2e0 	.word	0x2003e2e0
   b60b4:	000bb380 	.word	0x000bb380
   b60b8:	2003e2f0 	.word	0x2003e2f0
   b60bc:	000bb38a 	.word	0x000bb38a
   b60c0:	2003e300 	.word	0x2003e300
   b60c4:	000bb394 	.word	0x000bb394
   b60c8:	2003e310 	.word	0x2003e310
   b60cc:	000bb39e 	.word	0x000bb39e
   b60d0:	2003e320 	.word	0x2003e320
   b60d4:	000bb2a6 	.word	0x000bb2a6
   b60d8:	2003e330 	.word	0x2003e330
   b60dc:	000bb3a8 	.word	0x000bb3a8
   b60e0:	2003e340 	.word	0x2003e340
   b60e4:	000bb3ae 	.word	0x000bb3ae
   b60e8:	2003e350 	.word	0x2003e350
   b60ec:	000bb2b6 	.word	0x000bb2b6
   b60f0:	2003e360 	.word	0x2003e360
   b60f4:	000bb2be 	.word	0x000bb2be
   b60f8:	2003e370 	.word	0x2003e370
   b60fc:	000bb3b4 	.word	0x000bb3b4
   b6100:	2003e480 	.word	0x2003e480
   b6104:	000bb3bc 	.word	0x000bb3bc
   b6108:	2003e490 	.word	0x2003e490
   b610c:	000bb3c4 	.word	0x000bb3c4
   b6110:	2003e4a0 	.word	0x2003e4a0
   b6114:	000bb3cc 	.word	0x000bb3cc
   b6118:	2003e4b0 	.word	0x2003e4b0
   b611c:	000bb3d4 	.word	0x000bb3d4
   b6120:	2003e4c0 	.word	0x2003e4c0
   b6124:	000bb3dc 	.word	0x000bb3dc
   b6128:	2003e4d0 	.word	0x2003e4d0
   b612c:	000bb3e4 	.word	0x000bb3e4
   b6130:	2003e4e0 	.word	0x2003e4e0
   b6134:	000bb3ec 	.word	0x000bb3ec
   b6138:	2003e4f0 	.word	0x2003e4f0
   b613c:	000bb3f4 	.word	0x000bb3f4
   b6140:	2003e500 	.word	0x2003e500
   b6144:	000bb3fc 	.word	0x000bb3fc
   b6148:	2003e510 	.word	0x2003e510
   b614c:	000bb404 	.word	0x000bb404
   b6150:	2003e520 	.word	0x2003e520
   b6154:	000bb40c 	.word	0x000bb40c
   b6158:	2003e530 	.word	0x2003e530
   b615c:	000bb414 	.word	0x000bb414
   b6160:	2003e540 	.word	0x2003e540
   b6164:	000bb41c 	.word	0x000bb41c
   b6168:	2003e550 	.word	0x2003e550
   b616c:	000bb424 	.word	0x000bb424
   b6170:	2003e560 	.word	0x2003e560
   b6174:	000bb42c 	.word	0x000bb42c
   b6178:	2003e570 	.word	0x2003e570
   b617c:	000bb434 	.word	0x000bb434
   b6180:	2003e580 	.word	0x2003e580
   b6184:	000bb43c 	.word	0x000bb43c
   b6188:	2003e590 	.word	0x2003e590
   b618c:	000bb444 	.word	0x000bb444
   b6190:	2003e5a0 	.word	0x2003e5a0
   b6194:	000bb44c 	.word	0x000bb44c
   b6198:	2003e5b0 	.word	0x2003e5b0
   b619c:	000bb454 	.word	0x000bb454
   b61a0:	2003e5c0 	.word	0x2003e5c0
   b61a4:	000bb45c 	.word	0x000bb45c
   b61a8:	2003e5d0 	.word	0x2003e5d0
   b61ac:	000bb464 	.word	0x000bb464
   b61b0:	2003e5e0 	.word	0x2003e5e0
   b61b4:	000bb46c 	.word	0x000bb46c
   b61b8:	2003e5f0 	.word	0x2003e5f0
   b61bc:	000bb474 	.word	0x000bb474
   b61c0:	2003e600 	.word	0x2003e600
   b61c4:	000bb47a 	.word	0x000bb47a
   b61c8:	2003e610 	.word	0x2003e610
   b61cc:	000bb480 	.word	0x000bb480
   b61d0:	2003e620 	.word	0x2003e620
   b61d4:	000bb486 	.word	0x000bb486
   b61d8:	2003e630 	.word	0x2003e630
   b61dc:	000bb48c 	.word	0x000bb48c
   b61e0:	2003e640 	.word	0x2003e640
   b61e4:	000bb492 	.word	0x000bb492
   b61e8:	2003e650 	.word	0x2003e650
   b61ec:	000bb498 	.word	0x000bb498
   b61f0:	2003e660 	.word	0x2003e660
   b61f4:	000bb49e 	.word	0x000bb49e
   b61f8:	2003e670 	.word	0x2003e670
   b61fc:	000bb4a4 	.word	0x000bb4a4
   b6200:	2003e680 	.word	0x2003e680
   b6204:	000bb4aa 	.word	0x000bb4aa
   b6208:	2003e690 	.word	0x2003e690
   b620c:	492d      	ldr	r1, [pc, #180]	; (b62c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f0>)
   b620e:	482e      	ldr	r0, [pc, #184]	; (b62c8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f4>)
   b6210:	f004 f80b 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b6214:	492d      	ldr	r1, [pc, #180]	; (b62cc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f8>)
   b6216:	482e      	ldr	r0, [pc, #184]	; (b62d0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5fc>)
   b6218:	f004 f807 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b621c:	492d      	ldr	r1, [pc, #180]	; (b62d4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x600>)
   b621e:	482e      	ldr	r0, [pc, #184]	; (b62d8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x604>)
   b6220:	f004 f803 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6224:	492d      	ldr	r1, [pc, #180]	; (b62dc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x608>)
   b6226:	482e      	ldr	r0, [pc, #184]	; (b62e0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x60c>)
   b6228:	f003 ffff 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b622c:	492d      	ldr	r1, [pc, #180]	; (b62e4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x610>)
   b622e:	482e      	ldr	r0, [pc, #184]	; (b62e8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x614>)
   b6230:	f003 fffb 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6234:	492d      	ldr	r1, [pc, #180]	; (b62ec <_GLOBAL__sub_I__Z13leerSensorLuzv+0x618>)
   b6236:	482e      	ldr	r0, [pc, #184]	; (b62f0 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x61c>)
   b6238:	f003 fff7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b623c:	492d      	ldr	r1, [pc, #180]	; (b62f4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x620>)
   b623e:	482e      	ldr	r0, [pc, #184]	; (b62f8 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x624>)
   b6240:	f003 fff3 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6244:	492d      	ldr	r1, [pc, #180]	; (b62fc <_GLOBAL__sub_I__Z13leerSensorLuzv+0x628>)
   b6246:	482e      	ldr	r0, [pc, #184]	; (b6300 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x62c>)
   b6248:	f003 ffef 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b624c:	491d      	ldr	r1, [pc, #116]	; (b62c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f0>)
   b624e:	482d      	ldr	r0, [pc, #180]	; (b6304 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x630>)
   b6250:	f003 ffeb 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"3#0#0#3#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b6254:	492c      	ldr	r1, [pc, #176]	; (b6308 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x634>)
   b6256:	482d      	ldr	r0, [pc, #180]	; (b630c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x638>)
   b6258:	f003 ffe7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b625c:	492c      	ldr	r1, [pc, #176]	; (b6310 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x63c>)
   b625e:	482d      	ldr	r0, [pc, #180]	; (b6314 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x640>)
   b6260:	f003 ffe3 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6264:	492c      	ldr	r1, [pc, #176]	; (b6318 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x644>)
   b6266:	482d      	ldr	r0, [pc, #180]	; (b631c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x648>)
   b6268:	f003 ffdf 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b626c:	492c      	ldr	r1, [pc, #176]	; (b6320 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x64c>)
   b626e:	482d      	ldr	r0, [pc, #180]	; (b6324 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x650>)
   b6270:	f003 ffdb 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6274:	492c      	ldr	r1, [pc, #176]	; (b6328 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x654>)
   b6276:	482d      	ldr	r0, [pc, #180]	; (b632c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x658>)
   b6278:	f003 ffd7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b627c:	1928      	adds	r0, r5, r4
   b627e:	4631      	mov	r1, r6
   b6280:	3410      	adds	r4, #16
   b6282:	f003 ffd2 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6286:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
   b628a:	d1f7      	bne.n	b627c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5a8>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b628c:	4828      	ldr	r0, [pc, #160]	; (b6330 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x65c>)
String secuencia[30];
   b628e:	4d29      	ldr	r5, [pc, #164]	; (b6334 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x660>)
   b6290:	4e0c      	ldr	r6, [pc, #48]	; (b62c4 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5f0>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6292:	2208      	movs	r2, #8
   b6294:	2110      	movs	r1, #16
   b6296:	f002 f906 	bl	b84a6 <_ZN7MFRC522C1Ehh>
   b629a:	2400      	movs	r4, #0
String secuencia[30];
   b629c:	1928      	adds	r0, r5, r4
   b629e:	4631      	mov	r1, r6
   b62a0:	3410      	adds	r4, #16
   b62a2:	f003 ffc2 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b62a6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b62aa:	d1f7      	bne.n	b629c <_GLOBAL__sub_I__Z13leerSensorLuzv+0x5c8>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b62ac:	4b22      	ldr	r3, [pc, #136]	; (b6338 <_GLOBAL__sub_I__Z13leerSensorLuzv+0x664>)
   b62ae:	2200      	movs	r2, #0
   b62b0:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b62b4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b62b8:	609a      	str	r2, [r3, #8]
   b62ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b62be:	2002      	movs	r0, #2
   b62c0:	f003 bd46 	b.w	b9d50 <set_system_mode>
   b62c4:	000bb25e 	.word	0x000bb25e
   b62c8:	2003e6a0 	.word	0x2003e6a0
   b62cc:	000bb4b0 	.word	0x000bb4b0
   b62d0:	2003e140 	.word	0x2003e140
   b62d4:	000bb4b6 	.word	0x000bb4b6
   b62d8:	2003e150 	.word	0x2003e150
   b62dc:	000bb4bc 	.word	0x000bb4bc
   b62e0:	2003e160 	.word	0x2003e160
   b62e4:	000bb4c2 	.word	0x000bb4c2
   b62e8:	2003e170 	.word	0x2003e170
   b62ec:	000bb4c8 	.word	0x000bb4c8
   b62f0:	2003e180 	.word	0x2003e180
   b62f4:	000bb4ce 	.word	0x000bb4ce
   b62f8:	2003e190 	.word	0x2003e190
   b62fc:	000bb4d4 	.word	0x000bb4d4
   b6300:	2003e1a0 	.word	0x2003e1a0
   b6304:	2003e1b0 	.word	0x2003e1b0
   b6308:	000bb4da 	.word	0x000bb4da
   b630c:	2003dc40 	.word	0x2003dc40
   b6310:	000bb4e4 	.word	0x000bb4e4
   b6314:	2003dc50 	.word	0x2003dc50
   b6318:	000bb4ee 	.word	0x000bb4ee
   b631c:	2003dc60 	.word	0x2003dc60
   b6320:	000bb4f8 	.word	0x000bb4f8
   b6324:	2003dc70 	.word	0x2003dc70
   b6328:	000bb503 	.word	0x000bb503
   b632c:	2003dc80 	.word	0x2003dc80
   b6330:	2003d6fc 	.word	0x2003d6fc
   b6334:	2003da54 	.word	0x2003da54
   b6338:	2003cd20 	.word	0x2003cd20

000b633c <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b6340:	4f99      	ldr	r7, [pc, #612]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
void showBitmap(int id1, int id2, String msg) {
   b6342:	b088      	sub	sp, #32
   b6344:	4606      	mov	r6, r0
   display.clearDisplay();
   b6346:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b6348:	460d      	mov	r5, r1
   b634a:	4614      	mov	r4, r2
   display.clearDisplay();
   b634c:	f002 ff6a 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6350:	2300      	movs	r3, #0
   b6352:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b6354:	4b95      	ldr	r3, [pc, #596]	; (b65ac <_Z10showBitmapii6String+0x270>)
   b6356:	2201      	movs	r2, #1
   b6358:	701a      	strb	r2, [r3, #0]
   b635a:	f003 fba1 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b635e:	4b94      	ldr	r3, [pc, #592]	; (b65b0 <_Z10showBitmapii6String+0x274>)
   b6360:	6018      	str	r0, [r3, #0]
   switch (id1)
   b6362:	2e03      	cmp	r6, #3
   b6364:	d816      	bhi.n	b6394 <_Z10showBitmapii6String+0x58>
   b6366:	e8df f016 	tbh	[pc, r6, lsl #1]
   b636a:	0004      	.short	0x0004
   b636c:	00f0002d 	.word	0x00f0002d
   b6370:	0116      	.short	0x0116
      switch (id2)
   b6372:	2d03      	cmp	r5, #3
   b6374:	d80e      	bhi.n	b6394 <_Z10showBitmapii6String+0x58>
   b6376:	e8df f005 	tbb	[pc, r5]
   b637a:	0702      	.short	0x0702
   b637c:	0b09      	.short	0x0b09
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b637e:	498d      	ldr	r1, [pc, #564]	; (b65b4 <_Z10showBitmapii6String+0x278>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6380:	488d      	ldr	r0, [pc, #564]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6382:	f004 fdc3 	bl	baf0c <strcpy>
         break;
   b6386:	e00e      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b6388:	498c      	ldr	r1, [pc, #560]	; (b65bc <_Z10showBitmapii6String+0x280>)
   b638a:	e7f9      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b638c:	498c      	ldr	r1, [pc, #560]	; (b65c0 <_Z10showBitmapii6String+0x284>)
   b638e:	e7f7      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO EXPLORATORIO");
   b6390:	498c      	ldr	r1, [pc, #560]	; (b65c4 <_Z10showBitmapii6String+0x288>)
   b6392:	e7f5      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b6394:	498c      	ldr	r1, [pc, #560]	; (b65c8 <_Z10showBitmapii6String+0x28c>)
   b6396:	4888      	ldr	r0, [pc, #544]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6398:	f004 fdb8 	bl	baf0c <strcpy>
         Serial.println("Bitmap not available.");
   b639c:	f004 fa14 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b63a0:	4989      	ldr	r1, [pc, #548]	; (b65c8 <_Z10showBitmapii6String+0x28c>)
   b63a2:	f004 f810 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b63a6:	f004 fa0f 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b63aa:	4983      	ldr	r1, [pc, #524]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b63ac:	f004 f80b 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   display.print(buf);
   b63b0:	4981      	ldr	r1, [pc, #516]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b63b2:	487d      	ldr	r0, [pc, #500]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b63b4:	f003 fff4 	bl	ba3a0 <_ZN5Print5printEPKc>
   display.display();
   b63b8:	487b      	ldr	r0, [pc, #492]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
}
   b63ba:	b008      	add	sp, #32
   b63bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b63c0:	f003 b998 	b.w	b96f4 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b63c4:	2d06      	cmp	r5, #6
   b63c6:	d8e5      	bhi.n	b6394 <_Z10showBitmapii6String+0x58>
   b63c8:	e8df f005 	tbb	[pc, r5]
   b63cc:	6c513704 	.word	0x6c513704
   b63d0:	b090      	.short	0xb090
   b63d2:	bd          	.byte	0xbd
   b63d3:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b63d4:	4621      	mov	r1, r4
   b63d6:	a804      	add	r0, sp, #16
   b63d8:	f003 ff4a 	bl	ba270 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b63dc:	497b      	ldr	r1, [pc, #492]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b63de:	a804      	add	r0, sp, #16
   b63e0:	f003 ff99 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b63e4:	2140      	movs	r1, #64	; 0x40
   b63e6:	6802      	ldr	r2, [r0, #0]
   b63e8:	4873      	ldr	r0, [pc, #460]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b63ea:	f003 fd5d 	bl	b9ea8 <snprintf>
class StringSumHelper : public String
   b63ee:	a804      	add	r0, sp, #16
   b63f0:	f003 fed0 	bl	ba194 <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b63f4:	2414      	movs	r4, #20
   b63f6:	2501      	movs	r5, #1
   b63f8:	2632      	movs	r6, #50	; 0x32
   b63fa:	2228      	movs	r2, #40	; 0x28
   b63fc:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b6400:	4611      	mov	r1, r2
   b6402:	4869      	ldr	r0, [pc, #420]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b6404:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b6406:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b6408:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b640c:	e9cd 4600 	strd	r4, r6, [sp]
   b6410:	f001 fd16 	bl	b7e40 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b6414:	4623      	mov	r3, r4
   b6416:	4622      	mov	r2, r4
   b6418:	4631      	mov	r1, r6
   b641a:	4863      	ldr	r0, [pc, #396]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b641c:	9501      	str	r5, [sp, #4]
   b641e:	9700      	str	r7, [sp, #0]
   b6420:	f001 fb6d 	bl	b7afe <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b6424:	2146      	movs	r1, #70	; 0x46
   b6426:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b642a:	e9cd 7100 	strd	r7, r1, [sp]
   b642e:	2350      	movs	r3, #80	; 0x50
   b6430:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6432:	485d      	ldr	r0, [pc, #372]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b6434:	f001 fd04 	bl	b7e40 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b6438:	e7b5      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b643a:	4621      	mov	r1, r4
   b643c:	a804      	add	r0, sp, #16
   b643e:	f003 ff17 	bl	ba270 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6442:	4962      	ldr	r1, [pc, #392]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b6444:	a804      	add	r0, sp, #16
   b6446:	f003 ff66 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b644a:	2140      	movs	r1, #64	; 0x40
   b644c:	6802      	ldr	r2, [r0, #0]
   b644e:	485a      	ldr	r0, [pc, #360]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6450:	f003 fd2a 	bl	b9ea8 <snprintf>
class StringSumHelper : public String
   b6454:	a804      	add	r0, sp, #16
   b6456:	f003 fe9d 	bl	ba194 <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b645a:	2328      	movs	r3, #40	; 0x28
   b645c:	2001      	movs	r0, #1
   b645e:	e9cd 3000 	strd	r3, r0, [sp]
   b6462:	2214      	movs	r2, #20
   b6464:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b6466:	4850      	ldr	r0, [pc, #320]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b6468:	f001 fb49 	bl	b7afe <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b646c:	e79b      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b646e:	4621      	mov	r1, r4
   b6470:	a804      	add	r0, sp, #16
   b6472:	f003 fefd 	bl	ba270 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6476:	4955      	ldr	r1, [pc, #340]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b6478:	a804      	add	r0, sp, #16
   b647a:	f003 ff4c 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b647e:	2140      	movs	r1, #64	; 0x40
   b6480:	6802      	ldr	r2, [r0, #0]
   b6482:	484d      	ldr	r0, [pc, #308]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6484:	f003 fd10 	bl	b9ea8 <snprintf>
class StringSumHelper : public String
   b6488:	a804      	add	r0, sp, #16
   b648a:	f003 fe83 	bl	ba194 <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b648e:	2364      	movs	r3, #100	; 0x64
   b6490:	225a      	movs	r2, #90	; 0x5a
   b6492:	2101      	movs	r1, #1
   b6494:	e9cd 3200 	strd	r3, r2, [sp]
   b6498:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b649c:	2214      	movs	r2, #20
   b649e:	231e      	movs	r3, #30
   b64a0:	213c      	movs	r1, #60	; 0x3c
   b64a2:	e7c6      	b.n	b6432 <_Z10showBitmapii6String+0xf6>
	StringSumHelper(const String &s) : String(s) {}
   b64a4:	4621      	mov	r1, r4
   b64a6:	a804      	add	r0, sp, #16
   b64a8:	f003 fee2 	bl	ba270 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b64ac:	4947      	ldr	r1, [pc, #284]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b64ae:	a804      	add	r0, sp, #16
   b64b0:	f003 ff31 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b64b4:	2140      	movs	r1, #64	; 0x40
   b64b6:	6802      	ldr	r2, [r0, #0]
   b64b8:	483f      	ldr	r0, [pc, #252]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b64ba:	f003 fcf5 	bl	b9ea8 <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b64be:	2428      	movs	r4, #40	; 0x28
   b64c0:	2601      	movs	r6, #1
   b64c2:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b64c4:	a804      	add	r0, sp, #16
   b64c6:	f003 fe65 	bl	ba194 <_ZN6StringD1Ev>
   b64ca:	2334      	movs	r3, #52	; 0x34
   b64cc:	2214      	movs	r2, #20
   b64ce:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b64d2:	e9cd 4500 	strd	r4, r5, [sp]
   b64d6:	4834      	ldr	r0, [pc, #208]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b64d8:	213c      	movs	r1, #60	; 0x3c
   b64da:	f001 fcb1 	bl	b7e40 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b64de:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b64e2:	e9cd 4500 	strd	r4, r5, [sp]
   b64e6:	2334      	movs	r3, #52	; 0x34
   b64e8:	223c      	movs	r2, #60	; 0x3c
   b64ea:	e7d9      	b.n	b64a0 <_Z10showBitmapii6String+0x164>
	StringSumHelper(const String &s) : String(s) {}
   b64ec:	4621      	mov	r1, r4
   b64ee:	a804      	add	r0, sp, #16
   b64f0:	f003 febe 	bl	ba270 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b64f4:	4935      	ldr	r1, [pc, #212]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b64f6:	a804      	add	r0, sp, #16
   b64f8:	f003 ff0d 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b64fc:	2140      	movs	r1, #64	; 0x40
   b64fe:	6802      	ldr	r2, [r0, #0]
   b6500:	482d      	ldr	r0, [pc, #180]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6502:	f003 fcd1 	bl	b9ea8 <snprintf>
class StringSumHelper : public String
   b6506:	a804      	add	r0, sp, #16
   b6508:	f003 fe44 	bl	ba194 <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b650c:	2301      	movs	r3, #1
   b650e:	9300      	str	r3, [sp, #0]
   b6510:	2232      	movs	r2, #50	; 0x32
   b6512:	230f      	movs	r3, #15
   b6514:	213c      	movs	r1, #60	; 0x3c
   b6516:	4824      	ldr	r0, [pc, #144]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b6518:	f001 fc67 	bl	b7dea <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b651c:	2328      	movs	r3, #40	; 0x28
   b651e:	2200      	movs	r2, #0
   b6520:	e9cd 3200 	strd	r3, r2, [sp]
   b6524:	210a      	movs	r1, #10
   b6526:	235a      	movs	r3, #90	; 0x5a
   b6528:	2232      	movs	r2, #50	; 0x32
   b652a:	e79c      	b.n	b6466 <_Z10showBitmapii6String+0x12a>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b652c:	4927      	ldr	r1, [pc, #156]	; (b65cc <_Z10showBitmapii6String+0x290>)
   b652e:	4822      	ldr	r0, [pc, #136]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6530:	f004 fcec 	bl	baf0c <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b6534:	2301      	movs	r3, #1
   b6536:	9300      	str	r3, [sp, #0]
   b6538:	481b      	ldr	r0, [pc, #108]	; (b65a8 <_Z10showBitmapii6String+0x26c>)
   b653a:	230f      	movs	r3, #15
   b653c:	2228      	movs	r2, #40	; 0x28
   b653e:	213c      	movs	r1, #60	; 0x3c
   b6540:	f001 fc53 	bl	b7dea <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b6544:	e72f      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b6546:	4922      	ldr	r1, [pc, #136]	; (b65d0 <_Z10showBitmapii6String+0x294>)
   b6548:	e71a      	b.n	b6380 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b654a:	2d06      	cmp	r5, #6
   b654c:	f63f af22 	bhi.w	b6394 <_Z10showBitmapii6String+0x58>
   b6550:	e8df f005 	tbb	[pc, r5]
   b6554:	0a080604 	.word	0x0a080604
   b6558:	1d0c      	.short	0x1d0c
   b655a:	1f          	.byte	0x1f
   b655b:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b655c:	491d      	ldr	r1, [pc, #116]	; (b65d4 <_Z10showBitmapii6String+0x298>)
   b655e:	e70f      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b6560:	491d      	ldr	r1, [pc, #116]	; (b65d8 <_Z10showBitmapii6String+0x29c>)
   b6562:	e70d      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b6564:	491d      	ldr	r1, [pc, #116]	; (b65dc <_Z10showBitmapii6String+0x2a0>)
   b6566:	e70b      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b6568:	491d      	ldr	r1, [pc, #116]	; (b65e0 <_Z10showBitmapii6String+0x2a4>)
   b656a:	e709      	b.n	b6380 <_Z10showBitmapii6String+0x44>
	StringSumHelper(const char *p) : String(p) {}
   b656c:	491d      	ldr	r1, [pc, #116]	; (b65e4 <_Z10showBitmapii6String+0x2a8>)
   b656e:	a804      	add	r0, sp, #16
   b6570:	f003 fe5b 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b6574:	4621      	mov	r1, r4
   b6576:	a804      	add	r0, sp, #16
   b6578:	f003 fec1 	bl	ba2fe <_ZplRK15StringSumHelperRK6String>
   b657c:	2140      	movs	r1, #64	; 0x40
   b657e:	6802      	ldr	r2, [r0, #0]
   b6580:	480d      	ldr	r0, [pc, #52]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b6582:	f003 fc91 	bl	b9ea8 <snprintf>
class StringSumHelper : public String
   b6586:	a804      	add	r0, sp, #16
   b6588:	f003 fe04 	bl	ba194 <_ZN6StringD1Ev>
         break;
   b658c:	e70b      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b658e:	4916      	ldr	r1, [pc, #88]	; (b65e8 <_Z10showBitmapii6String+0x2ac>)
   b6590:	e6f6      	b.n	b6380 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b6592:	4916      	ldr	r1, [pc, #88]	; (b65ec <_Z10showBitmapii6String+0x2b0>)
   b6594:	e6f4      	b.n	b6380 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6596:	2d00      	cmp	r5, #0
   b6598:	f47f aefc 	bne.w	b6394 <_Z10showBitmapii6String+0x58>
         snprintf(buf, sizeof(buf), msg);
   b659c:	6822      	ldr	r2, [r4, #0]
   b659e:	4806      	ldr	r0, [pc, #24]	; (b65b8 <_Z10showBitmapii6String+0x27c>)
   b65a0:	2140      	movs	r1, #64	; 0x40
   b65a2:	f003 fc81 	bl	b9ea8 <snprintf>
         break;
   b65a6:	e6fe      	b.n	b63a6 <_Z10showBitmapii6String+0x6a>
   b65a8:	2003d354 	.word	0x2003d354
   b65ac:	2003cd2d 	.word	0x2003cd2d
   b65b0:	2003dc34 	.word	0x2003dc34
   b65b4:	000bb50e 	.word	0x000bb50e
   b65b8:	2003d309 	.word	0x2003d309
   b65bc:	000bb51a 	.word	0x000bb51a
   b65c0:	000bb528 	.word	0x000bb528
   b65c4:	000bb534 	.word	0x000bb534
   b65c8:	000bb546 	.word	0x000bb546
   b65cc:	000bb55c 	.word	0x000bb55c
   b65d0:	000bb56d 	.word	0x000bb56d
   b65d4:	000bb57a 	.word	0x000bb57a
   b65d8:	000bb59a 	.word	0x000bb59a
   b65dc:	000bb5ba 	.word	0x000bb5ba
   b65e0:	000bb5d5 	.word	0x000bb5d5
   b65e4:	000bb5ea 	.word	0x000bb5ea
   b65e8:	000bb5fd 	.word	0x000bb5fd
   b65ec:	000bb61b 	.word	0x000bb61b

000b65f0 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b65f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b65f2:	4b24      	ldr	r3, [pc, #144]	; (b6684 <_Z8showPortii+0x94>)
   b65f4:	689b      	ldr	r3, [r3, #8]
   b65f6:	bb4b      	cbnz	r3, b664c <_Z8showPortii+0x5c>
      switch (puerto)
   b65f8:	2902      	cmp	r1, #2
   b65fa:	d011      	beq.n	b6620 <_Z8showPortii+0x30>
   b65fc:	2904      	cmp	r1, #4
   b65fe:	d016      	beq.n	b662e <_Z8showPortii+0x3e>
   b6600:	b9e1      	cbnz	r1, b663c <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b6602:	4921      	ldr	r1, [pc, #132]	; (b6688 <_Z8showPortii+0x98>)
   b6604:	4668      	mov	r0, sp
   b6606:	f003 fe10 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b660a:	466a      	mov	r2, sp
   b660c:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b660e:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6610:	f7ff fe94 	bl	b633c <_Z10showBitmapii6String>
   b6614:	4668      	mov	r0, sp
   b6616:	f003 fdbd 	bl	ba194 <_ZN6StringD1Ev>
}
   b661a:	b005      	add	sp, #20
   b661c:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b6620:	4919      	ldr	r1, [pc, #100]	; (b6688 <_Z8showPortii+0x98>)
   b6622:	4668      	mov	r0, sp
   b6624:	f003 fe01 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6628:	466a      	mov	r2, sp
   b662a:	2104      	movs	r1, #4
   b662c:	e7ef      	b.n	b660e <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b662e:	4916      	ldr	r1, [pc, #88]	; (b6688 <_Z8showPortii+0x98>)
   b6630:	4668      	mov	r0, sp
   b6632:	f003 fdfa 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6636:	466a      	mov	r2, sp
   b6638:	2105      	movs	r1, #5
   b663a:	e7e8      	b.n	b660e <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b663c:	4912      	ldr	r1, [pc, #72]	; (b6688 <_Z8showPortii+0x98>)
   b663e:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6640:	f003 fdf3 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6644:	466a      	mov	r2, sp
   b6646:	2103      	movs	r1, #3
   b6648:	2002      	movs	r0, #2
   b664a:	e7e1      	b.n	b6610 <_Z8showPortii+0x20>
      switch (puerto)
   b664c:	2904      	cmp	r1, #4
   b664e:	d00a      	beq.n	b6666 <_Z8showPortii+0x76>
   b6650:	2906      	cmp	r1, #6
   b6652:	d00f      	beq.n	b6674 <_Z8showPortii+0x84>
   b6654:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6656:	4668      	mov	r0, sp
   b6658:	490b      	ldr	r1, [pc, #44]	; (b6688 <_Z8showPortii+0x98>)
      switch (puerto)
   b665a:	d1f1      	bne.n	b6640 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b665c:	f003 fde5 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6660:	466a      	mov	r2, sp
   b6662:	2100      	movs	r1, #0
   b6664:	e7d3      	b.n	b660e <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b6666:	4908      	ldr	r1, [pc, #32]	; (b6688 <_Z8showPortii+0x98>)
   b6668:	4668      	mov	r0, sp
   b666a:	f003 fdde 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b666e:	466a      	mov	r2, sp
   b6670:	2101      	movs	r1, #1
   b6672:	e7cc      	b.n	b660e <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b6674:	4904      	ldr	r1, [pc, #16]	; (b6688 <_Z8showPortii+0x98>)
   b6676:	4668      	mov	r0, sp
   b6678:	f003 fdd7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b667c:	466a      	mov	r2, sp
   b667e:	2102      	movs	r1, #2
   b6680:	e7c5      	b.n	b660e <_Z8showPortii+0x1e>
   b6682:	bf00      	nop
   b6684:	2003cc88 	.word	0x2003cc88
   b6688:	000bb25e 	.word	0x000bb25e

000b668c <_Z13borradoBLOQUEi>:
   switch (modo)
   b668c:	2801      	cmp	r0, #1
{
   b668e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b6690:	d003      	beq.n	b669a <_Z13borradoBLOQUEi+0xe>
   b6692:	2802      	cmp	r0, #2
   b6694:	d03c      	beq.n	b6710 <_Z13borradoBLOQUEi+0x84>
}
   b6696:	b004      	add	sp, #16
   b6698:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b669a:	4b37      	ldr	r3, [pc, #220]	; (b6778 <_Z13borradoBLOQUEi+0xec>)
   b669c:	681c      	ldr	r4, [r3, #0]
   b669e:	b974      	cbnz	r4, b66be <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b66a0:	f7fe f938 	bl	b4914 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b66a4:	4935      	ldr	r1, [pc, #212]	; (b677c <_Z13borradoBLOQUEi+0xf0>)
   b66a6:	4668      	mov	r0, sp
   b66a8:	f003 fdbf 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b66ac:	466a      	mov	r2, sp
   b66ae:	2100      	movs	r1, #0
   b66b0:	2003      	movs	r0, #3
   b66b2:	f7ff fe43 	bl	b633c <_Z10showBitmapii6String>
   b66b6:	4668      	mov	r0, sp
   b66b8:	f003 fd6c 	bl	ba194 <_ZN6StringD1Ev>
   b66bc:	e7eb      	b.n	b6696 <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b66be:	2c01      	cmp	r4, #1
   b66c0:	d11e      	bne.n	b6700 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b66c2:	2200      	movs	r2, #0
         numBloque = 0;
   b66c4:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b66c6:	492e      	ldr	r1, [pc, #184]	; (b6780 <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b66c8:	4b2e      	ldr	r3, [pc, #184]	; (b6784 <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b66ca:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b66cc:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b66ce:	4a2e      	ldr	r2, [pc, #184]	; (b6788 <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b66d0:	4b2e      	ldr	r3, [pc, #184]	; (b678c <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b66d2:	482f      	ldr	r0, [pc, #188]	; (b6790 <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b66d4:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b66d6:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b66d8:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b66da:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b66dc:	bf04      	itt	eq
   b66de:	2303      	moveq	r3, #3
   b66e0:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b66e2:	4b2c      	ldr	r3, [pc, #176]	; (b6794 <_Z13borradoBLOQUEi+0x108>)
   b66e4:	6819      	ldr	r1, [r3, #0]
   b66e6:	3101      	adds	r1, #1
            puertoDigital=6;
   b66e8:	bf04      	itt	eq
   b66ea:	2106      	moveq	r1, #6
   b66ec:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b66ee:	6811      	ldr	r1, [r2, #0]
   b66f0:	1a09      	subs	r1, r1, r0
   b66f2:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b66f4:	4928      	ldr	r1, [pc, #160]	; (b6798 <_Z13borradoBLOQUEi+0x10c>)
   b66f6:	681a      	ldr	r2, [r3, #0]
   b66f8:	6809      	ldr	r1, [r1, #0]
   b66fa:	1a52      	subs	r2, r2, r1
   b66fc:	601a      	str	r2, [r3, #0]
   b66fe:	e7d1      	b.n	b66a4 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b6700:	f004 f862 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6704:	4925      	ldr	r1, [pc, #148]	; (b679c <_Z13borradoBLOQUEi+0x110>)
}
   b6706:	b004      	add	sp, #16
   b6708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b670c:	f003 be5b 	b.w	ba3c6 <_ZN5Print7printlnEPKc>
      if (bucle) {
   b6710:	4e23      	ldr	r6, [pc, #140]	; (b67a0 <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b6712:	4a24      	ldr	r2, [pc, #144]	; (b67a4 <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b6714:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6716:	6813      	ldr	r3, [r2, #0]
   b6718:	4d23      	ldr	r5, [pc, #140]	; (b67a8 <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b671a:	b19c      	cbz	r4, b6744 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b671c:	6829      	ldr	r1, [r5, #0]
   b671e:	3101      	adds	r1, #1
   b6720:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6722:	4668      	mov	r0, sp
   b6724:	4921      	ldr	r1, [pc, #132]	; (b67ac <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b6726:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6728:	f003 fd7f 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b672c:	466a      	mov	r2, sp
   b672e:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b6730:	2003      	movs	r0, #3
   b6732:	f7ff fe03 	bl	b633c <_Z10showBitmapii6String>
   b6736:	4668      	mov	r0, sp
   b6738:	f003 fd2c 	bl	ba194 <_ZN6StringD1Ev>
      bucle = false;
   b673c:	2300      	movs	r3, #0
   b673e:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b6740:	602b      	str	r3, [r5, #0]
}
   b6742:	e7a8      	b.n	b6696 <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6744:	481a      	ldr	r0, [pc, #104]	; (b67b0 <_Z13borradoBLOQUEi+0x124>)
   b6746:	1e59      	subs	r1, r3, #1
   b6748:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b674c:	3002      	adds	r0, #2
   b674e:	d10c      	bne.n	b676a <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b6750:	4818      	ldr	r0, [pc, #96]	; (b67b4 <_Z13borradoBLOQUEi+0x128>)
   b6752:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b6756:	3102      	adds	r1, #2
   b6758:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b675a:	4914      	ldr	r1, [pc, #80]	; (b67ac <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b675c:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b675e:	4668      	mov	r0, sp
   b6760:	f003 fd63 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6764:	466a      	mov	r2, sp
   b6766:	4621      	mov	r1, r4
   b6768:	e7e2      	b.n	b6730 <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b676a:	f004 f82d 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b676e:	4912      	ldr	r1, [pc, #72]	; (b67b8 <_Z13borradoBLOQUEi+0x12c>)
   b6770:	f003 fe29 	bl	ba3c6 <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b6774:	4910      	ldr	r1, [pc, #64]	; (b67b8 <_Z13borradoBLOQUEi+0x12c>)
   b6776:	e7f2      	b.n	b675e <_Z13borradoBLOQUEi+0xd2>
   b6778:	2003cc80 	.word	0x2003cc80
   b677c:	000bb63b 	.word	0x000bb63b
   b6780:	2003cd1d 	.word	0x2003cd1d
   b6784:	2003cd2c 	.word	0x2003cd2c
   b6788:	2003da44 	.word	0x2003da44
   b678c:	2003da2c 	.word	0x2003da2c
   b6790:	2003da48 	.word	0x2003da48
   b6794:	2003cc84 	.word	0x2003cc84
   b6798:	2003da4c 	.word	0x2003da4c
   b679c:	000bb657 	.word	0x000bb657
   b67a0:	2003d308 	.word	0x2003d308
   b67a4:	2003da3c 	.word	0x2003da3c
   b67a8:	2003dc3c 	.word	0x2003dc3c
   b67ac:	000bb667 	.word	0x000bb667
   b67b0:	2003d70c 	.word	0x2003d70c
   b67b4:	2003d3c4 	.word	0x2003d3c4
   b67b8:	000bb681 	.word	0x000bb681

000b67bc <_Z10reproducirv>:
void reproducir() {
   b67bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b67c0:	4b1e      	ldr	r3, [pc, #120]	; (b683c <_Z10reproducirv+0x80>)
   b67c2:	781c      	ldrb	r4, [r3, #0]
   b67c4:	bb34      	cbnz	r4, b6814 <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b67c6:	f8df a08c 	ldr.w	sl, [pc, #140]	; b6854 <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b67ca:	4e1d      	ldr	r6, [pc, #116]	; (b6840 <_Z10reproducirv+0x84>)
   b67cc:	4f1d      	ldr	r7, [pc, #116]	; (b6844 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b67ce:	f8da 3000 	ldr.w	r3, [sl]
   b67d2:	42a3      	cmp	r3, r4
   b67d4:	dd2f      	ble.n	b6836 <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b67d6:	f003 fff7 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b67da:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b67de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b67e2:	4919      	ldr	r1, [pc, #100]	; (b6848 <_Z10reproducirv+0x8c>)
   b67e4:	f7fe f8c2 	bl	b496c <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b67e8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b67ec:	1c42      	adds	r2, r0, #1
   b67ee:	d105      	bne.n	b67fc <_Z10reproducirv+0x40>
            n = duraciones[i];
   b67f0:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b67f4:	46a1      	mov	r9, r4
            iteracion = 0;            
   b67f6:	2500      	movs	r5, #0
         i++;
   b67f8:	3401      	adds	r4, #1
      while ( i < posicion) {
   b67fa:	e7e8      	b.n	b67ce <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b67fc:	1c83      	adds	r3, r0, #2
   b67fe:	d104      	bne.n	b680a <_Z10reproducirv+0x4e>
            iteracion++;
   b6800:	3501      	adds	r5, #1
               i = inicio;
   b6802:	45a8      	cmp	r8, r5
   b6804:	bfc8      	it	gt
   b6806:	464c      	movgt	r4, r9
   b6808:	e7f6      	b.n	b67f8 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b680a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b680e:	f7fe ff53 	bl	b56b8 <_Z14reproducirNOTAii>
   b6812:	e7f1      	b.n	b67f8 <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b6814:	f003 ffd8 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6818:	490c      	ldr	r1, [pc, #48]	; (b684c <_Z10reproducirv+0x90>)
   b681a:	f003 fdd4 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b681e:	490c      	ldr	r1, [pc, #48]	; (b6850 <_Z10reproducirv+0x94>)
   b6820:	4668      	mov	r0, sp
   b6822:	f003 fd02 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6826:	2002      	movs	r0, #2
   b6828:	466a      	mov	r2, sp
   b682a:	2104      	movs	r1, #4
   b682c:	f7ff fd86 	bl	b633c <_Z10showBitmapii6String>
   b6830:	4668      	mov	r0, sp
   b6832:	f003 fcaf 	bl	ba194 <_ZN6StringD1Ev>
}
   b6836:	b004      	add	sp, #16
   b6838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b683c:	2003d308 	.word	0x2003d308
   b6840:	2003d3c4 	.word	0x2003d3c4
   b6844:	2003d70c 	.word	0x2003d70c
   b6848:	000bb692 	.word	0x000bb692
   b684c:	000bb69a 	.word	0x000bb69a
   b6850:	000bb25e 	.word	0x000bb25e
   b6854:	2003da3c 	.word	0x2003da3c

000b6858 <_Z10cambioModoi>:
{
   b6858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b685a:	4604      	mov	r4, r0
   b685c:	b9e0      	cbnz	r0, b6898 <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b685e:	f003 ffb3 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6862:	4921      	ldr	r1, [pc, #132]	; (b68e8 <_Z10cambioModoi+0x90>)
   b6864:	f003 fdaf 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      MODE = 0;
   b6868:	4b20      	ldr	r3, [pc, #128]	; (b68ec <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b686a:	4921      	ldr	r1, [pc, #132]	; (b68f0 <_Z10cambioModoi+0x98>)
      MODE = 0;
   b686c:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b686e:	4668      	mov	r0, sp
   b6870:	f003 fcdb 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6874:	466a      	mov	r2, sp
   b6876:	2100      	movs	r1, #0
   b6878:	2003      	movs	r0, #3
      showBitmap(3,0,"Iniciando modo EXPLORACION...");
   b687a:	f7ff fd5f 	bl	b633c <_Z10showBitmapii6String>
   b687e:	4668      	mov	r0, sp
   b6880:	f003 fc88 	bl	ba194 <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b6884:	f004 fa88 	bl	bad98 <_Z21__fetch_global_EEPROMv>
   b6888:	4918      	ldr	r1, [pc, #96]	; (b68ec <_Z10cambioModoi+0x94>)
   b688a:	2201      	movs	r2, #1
   b688c:	2000      	movs	r0, #0
}
   b688e:	b004      	add	sp, #16
   b6890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6894:	f003 b91c 	b.w	b9ad0 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b6898:	2801      	cmp	r0, #1
   b689a:	d108      	bne.n	b68ae <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b689c:	f003 ff94 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b68a0:	4914      	ldr	r1, [pc, #80]	; (b68f4 <_Z10cambioModoi+0x9c>)
   b68a2:	f003 fd90 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      MODE = 1;
   b68a6:	4b11      	ldr	r3, [pc, #68]	; (b68ec <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b68a8:	4913      	ldr	r1, [pc, #76]	; (b68f8 <_Z10cambioModoi+0xa0>)
      MODE = 1;
   b68aa:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b68ac:	e7df      	b.n	b686e <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b68ae:	2802      	cmp	r0, #2
   b68b0:	d108      	bne.n	b68c4 <_Z10cambioModoi+0x6c>
      Serial.println("Modo MUSICA detectado");
   b68b2:	f003 ff89 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b68b6:	4911      	ldr	r1, [pc, #68]	; (b68fc <_Z10cambioModoi+0xa4>)
   b68b8:	f003 fd85 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      MODE = 2;
   b68bc:	4b0b      	ldr	r3, [pc, #44]	; (b68ec <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b68be:	4910      	ldr	r1, [pc, #64]	; (b6900 <_Z10cambioModoi+0xa8>)
      MODE = 2;
   b68c0:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b68c2:	e7d4      	b.n	b686e <_Z10cambioModoi+0x16>
   } else if (modo == 3) {
   b68c4:	2803      	cmp	r0, #3
   b68c6:	d1dd      	bne.n	b6884 <_Z10cambioModoi+0x2c>
      Serial.println("Modo EXPLORACION detectado");
   b68c8:	f003 ff7e 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b68cc:	490d      	ldr	r1, [pc, #52]	; (b6904 <_Z10cambioModoi+0xac>)
   b68ce:	f003 fd7a 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      MODE = 3;
   b68d2:	4b06      	ldr	r3, [pc, #24]	; (b68ec <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo EXPLORACION...");
   b68d4:	490c      	ldr	r1, [pc, #48]	; (b6908 <_Z10cambioModoi+0xb0>)
      MODE = 3;
   b68d6:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo EXPLORACION...");
   b68d8:	4668      	mov	r0, sp
   b68da:	f003 fca6 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b68de:	466a      	mov	r2, sp
   b68e0:	2100      	movs	r1, #0
   b68e2:	4620      	mov	r0, r4
   b68e4:	e7c9      	b.n	b687a <_Z10cambioModoi+0x22>
   b68e6:	bf00      	nop
   b68e8:	000bb6c0 	.word	0x000bb6c0
   b68ec:	2003cd1e 	.word	0x2003cd1e
   b68f0:	000bb6d6 	.word	0x000bb6d6
   b68f4:	000bb6ef 	.word	0x000bb6ef
   b68f8:	000bb707 	.word	0x000bb707
   b68fc:	000bb722 	.word	0x000bb722
   b6900:	000bb738 	.word	0x000bb738
   b6904:	000bb751 	.word	0x000bb751
   b6908:	000bb76c 	.word	0x000bb76c

000b690c <loop>:
{
   b690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b6910:	f8df 82e0 	ldr.w	r8, [pc, #736]	; b6bf4 <loop+0x2e8>
   b6914:	f898 3000 	ldrb.w	r3, [r8]
{
   b6918:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
  if (iniciando) {
   b691c:	2b00      	cmp	r3, #0
   b691e:	d034      	beq.n	b698a <loop+0x7e>
   b6920:	f003 f8be 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6924:	4f9c      	ldr	r7, [pc, #624]	; (b6b98 <loop+0x28c>)
    while(currentTime-startTime<limit){
   b6926:	f8df 9298 	ldr.w	r9, [pc, #664]	; b6bc0 <loop+0x2b4>
   b692a:	f8df a298 	ldr.w	sl, [pc, #664]	; b6bc4 <loop+0x2b8>
    currentTime = millis();
   b692e:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6930:	f8d9 2000 	ldr.w	r2, [r9]
   b6934:	683b      	ldr	r3, [r7, #0]
   b6936:	1a9b      	subs	r3, r3, r2
   b6938:	f8da 2000 	ldr.w	r2, [sl]
   b693c:	4293      	cmp	r3, r2
   b693e:	d203      	bcs.n	b6948 <loop+0x3c>
   b6940:	f003 f8ae 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b6944:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6946:	e7f3      	b.n	b6930 <loop+0x24>
    display.clearDisplay();
   b6948:	4e94      	ldr	r6, [pc, #592]	; (b6b9c <loop+0x290>)
   b694a:	4630      	mov	r0, r6
   b694c:	f002 fc6a 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b6950:	2101      	movs	r1, #1
   b6952:	4630      	mov	r0, r6
   b6954:	f001 fda1 	bl	b849a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6958:	2500      	movs	r5, #0
   b695a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b695e:	e9c6 5304 	strd	r5, r3, [r6, #16]
    if( MODE == 0 )
   b6962:	4b8f      	ldr	r3, [pc, #572]	; (b6ba0 <loop+0x294>)
      showBitmap(0,0,"");
   b6964:	498f      	ldr	r1, [pc, #572]	; (b6ba4 <loop+0x298>)
    if( MODE == 0 )
   b6966:	781c      	ldrb	r4, [r3, #0]
      showBitmap(0,0,"");
   b6968:	a8c2      	add	r0, sp, #776	; 0x308
    if( MODE == 0 )
   b696a:	2c00      	cmp	r4, #0
   b696c:	d15d      	bne.n	b6a2a <loop+0x11e>
      showBitmap(0,0,"");
   b696e:	f003 fc5c 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6972:	aac2      	add	r2, sp, #776	; 0x308
   b6974:	4621      	mov	r1, r4
   b6976:	4620      	mov	r0, r4
      showBitmap(1,2,"Zumbador:");
   b6978:	f7ff fce0 	bl	b633c <_Z10showBitmapii6String>
   b697c:	a8c2      	add	r0, sp, #776	; 0x308
   b697e:	f003 fc09 	bl	ba194 <_ZN6StringD1Ev>
    iniciando = false;
   b6982:	2300      	movs	r3, #0
   b6984:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6988:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b698a:	4887      	ldr	r0, [pc, #540]	; (b6ba8 <loop+0x29c>)
   b698c:	4d87      	ldr	r5, [pc, #540]	; (b6bac <loop+0x2a0>)
   b698e:	f002 f817 	bl	b89c0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b6992:	b190      	cbz	r0, b69ba <loop+0xae>
    Serial.print("Tag Detectada --> ");
   b6994:	f003 ff18 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6998:	4985      	ldr	r1, [pc, #532]	; (b6bb0 <loop+0x2a4>)
   b699a:	f003 fd01 	bl	ba3a0 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b699e:	4882      	ldr	r0, [pc, #520]	; (b6ba8 <loop+0x29c>)
   b69a0:	f002 f9df 	bl	b8d62 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b69a4:	4883      	ldr	r0, [pc, #524]	; (b6bb4 <loop+0x2a8>)
   b69a6:	f7ff f819 	bl	b59dc <_Z8getTagIDPi>
    play = false;
   b69aa:	2300      	movs	r3, #0
   b69ac:	702b      	strb	r3, [r5, #0]
    if ( MODE == 0 ) {
   b69ae:	4b7c      	ldr	r3, [pc, #496]	; (b6ba0 <loop+0x294>)
   b69b0:	781b      	ldrb	r3, [r3, #0]
   b69b2:	2b00      	cmp	r3, #0
   b69b4:	d163      	bne.n	b6a7e <loop+0x172>
      pitidoOFF0();
   b69b6:	f7fe fbf2 	bl	b519e <_Z10pitidoOFF0v>
  if (!play && init) {
   b69ba:	782b      	ldrb	r3, [r5, #0]
   b69bc:	b923      	cbnz	r3, b69c8 <loop+0xbc>
   b69be:	4b7e      	ldr	r3, [pc, #504]	; (b6bb8 <loop+0x2ac>)
   b69c0:	781b      	ldrb	r3, [r3, #0]
   b69c2:	b10b      	cbz	r3, b69c8 <loop+0xbc>
    ledApagar();
   b69c4:	f7fe fb42 	bl	b504c <_Z9ledApagarv>
  if (bitmap) {
   b69c8:	4e7c      	ldr	r6, [pc, #496]	; (b6bbc <loop+0x2b0>)
   b69ca:	7833      	ldrb	r3, [r6, #0]
   b69cc:	2b00      	cmp	r3, #0
   b69ce:	d067      	beq.n	b6aa0 <loop+0x194>
   b69d0:	f003 f866 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b69d4:	4b70      	ldr	r3, [pc, #448]	; (b6b98 <loop+0x28c>)
   b69d6:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b69d8:	4b79      	ldr	r3, [pc, #484]	; (b6bc0 <loop+0x2b4>)
   b69da:	681b      	ldr	r3, [r3, #0]
   b69dc:	1ac0      	subs	r0, r0, r3
   b69de:	4b79      	ldr	r3, [pc, #484]	; (b6bc4 <loop+0x2b8>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	4298      	cmp	r0, r3
   b69e4:	d35c      	bcc.n	b6aa0 <loop+0x194>
   b69e6:	486d      	ldr	r0, [pc, #436]	; (b6b9c <loop+0x290>)
      for (int i = 0; i < posicion; i++)
   b69e8:	4f77      	ldr	r7, [pc, #476]	; (b6bc8 <loop+0x2bc>)
          snprintf(buf, sizeof(buf), "...");
   b69ea:	f8df 820c 	ldr.w	r8, [pc, #524]	; b6bf8 <loop+0x2ec>
      bitmap=false;
   b69ee:	2400      	movs	r4, #0
   b69f0:	6104      	str	r4, [r0, #16]
   b69f2:	7034      	strb	r4, [r6, #0]
      display.clearDisplay();
   b69f4:	f002 fc16 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b69f8:	4868      	ldr	r0, [pc, #416]	; (b6b9c <loop+0x290>)
          snprintf(buf, sizeof(buf), "...");
   b69fa:	4e74      	ldr	r6, [pc, #464]	; (b6bcc <loop+0x2c0>)
      display.display();
   b69fc:	f002 fe7a 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6a00:	683b      	ldr	r3, [r7, #0]
   b6a02:	42a3      	cmp	r3, r4
   b6a04:	dd4c      	ble.n	b6aa0 <loop+0x194>
        if (i<23) {
   b6a06:	2c16      	cmp	r4, #22
   b6a08:	dc43      	bgt.n	b6a92 <loop+0x186>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b6a0a:	4b71      	ldr	r3, [pc, #452]	; (b6bd0 <loop+0x2c4>)
	const char * c_str() const { return buffer; }
   b6a0c:	0122      	lsls	r2, r4, #4
   b6a0e:	2140      	movs	r1, #64	; 0x40
   b6a10:	58d2      	ldr	r2, [r2, r3]
   b6a12:	4630      	mov	r0, r6
   b6a14:	f003 fa48 	bl	b9ea8 <snprintf>
        display.print(buf);
   b6a18:	4631      	mov	r1, r6
   b6a1a:	4860      	ldr	r0, [pc, #384]	; (b6b9c <loop+0x290>)
   b6a1c:	f003 fcc0 	bl	ba3a0 <_ZN5Print5printEPKc>
        display.display();
   b6a20:	485e      	ldr	r0, [pc, #376]	; (b6b9c <loop+0x290>)
   b6a22:	f002 fe67 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6a26:	3401      	adds	r4, #1
   b6a28:	e7ea      	b.n	b6a00 <loop+0xf4>
    } else if (MODE == 1)
   b6a2a:	2c01      	cmp	r4, #1
   b6a2c:	d105      	bne.n	b6a3a <loop+0x12e>
      showBitmap(0,3,"");
   b6a2e:	f003 fbfc 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6a32:	aac2      	add	r2, sp, #776	; 0x308
   b6a34:	4621      	mov	r1, r4
   b6a36:	4628      	mov	r0, r5
   b6a38:	e79e      	b.n	b6978 <loop+0x6c>
    } else if (MODE == 3)
   b6a3a:	2c03      	cmp	r4, #3
   b6a3c:	d0f7      	beq.n	b6a2e <loop+0x122>
      showBitmap(0,2,"");
   b6a3e:	f003 fbf4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6a42:	aac2      	add	r2, sp, #776	; 0x308
   b6a44:	2102      	movs	r1, #2
   b6a46:	4628      	mov	r0, r5
   b6a48:	f7ff fc78 	bl	b633c <_Z10showBitmapii6String>
   b6a4c:	a8c2      	add	r0, sp, #776	; 0x308
   b6a4e:	f003 fba1 	bl	ba194 <_ZN6StringD1Ev>
      bitmap=false;
   b6a52:	4b5a      	ldr	r3, [pc, #360]	; (b6bbc <loop+0x2b0>)
   b6a54:	701d      	strb	r5, [r3, #0]
      while(currentTime-startTime<limit){
   b6a56:	f8d9 2000 	ldr.w	r2, [r9]
   b6a5a:	683b      	ldr	r3, [r7, #0]
   b6a5c:	1a9b      	subs	r3, r3, r2
   b6a5e:	f8da 2000 	ldr.w	r2, [sl]
   b6a62:	4293      	cmp	r3, r2
   b6a64:	d203      	bcs.n	b6a6e <loop+0x162>
   b6a66:	f003 f81b 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b6a6a:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b6a6c:	e7f3      	b.n	b6a56 <loop+0x14a>
      showBitmap(1,2,"Zumbador:");
   b6a6e:	4959      	ldr	r1, [pc, #356]	; (b6bd4 <loop+0x2c8>)
   b6a70:	a8c2      	add	r0, sp, #776	; 0x308
   b6a72:	f003 fbda 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6a76:	aac2      	add	r2, sp, #776	; 0x308
   b6a78:	2102      	movs	r1, #2
   b6a7a:	2001      	movs	r0, #1
   b6a7c:	e77c      	b.n	b6978 <loop+0x6c>
      pitidoOFF1(2);
   b6a7e:	2002      	movs	r0, #2
   b6a80:	f7fe fc61 	bl	b5346 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b6a84:	2004      	movs	r0, #4
   b6a86:	f7fe fc5e 	bl	b5346 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b6a8a:	2006      	movs	r0, #6
   b6a8c:	f7fe fc5b 	bl	b5346 <_Z10pitidoOFF1i>
   b6a90:	e793      	b.n	b69ba <loop+0xae>
        } else if (i==23){
   b6a92:	2c17      	cmp	r4, #23
   b6a94:	d1c0      	bne.n	b6a18 <loop+0x10c>
          snprintf(buf, sizeof(buf), "...");
   b6a96:	4641      	mov	r1, r8
   b6a98:	4630      	mov	r0, r6
   b6a9a:	f004 fa37 	bl	baf0c <strcpy>
   b6a9e:	e7bb      	b.n	b6a18 <loop+0x10c>
  if ( MODE == 0 ) 
   b6aa0:	4b3f      	ldr	r3, [pc, #252]	; (b6ba0 <loop+0x294>)
    switch (tagInfo[0])
   b6aa2:	4c44      	ldr	r4, [pc, #272]	; (b6bb4 <loop+0x2a8>)
  if ( MODE == 0 ) 
   b6aa4:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b6aa6:	6826      	ldr	r6, [r4, #0]
  if ( MODE == 0 ) 
   b6aa8:	2f00      	cmp	r7, #0
   b6aaa:	f040 8127 	bne.w	b6cfc <loop+0x3f0>
    switch (tagInfo[0])
   b6aae:	f8df 814c 	ldr.w	r8, [pc, #332]	; b6bfc <loop+0x2f0>
   b6ab2:	2e00      	cmp	r6, #0
   b6ab4:	f000 80a4 	beq.w	b6c00 <loop+0x2f4>
   b6ab8:	2e06      	cmp	r6, #6
   b6aba:	f040 8112 	bne.w	b6ce2 <loop+0x3d6>
      pitidoBlink0();
   b6abe:	f7fe fb81 	bl	b51c4 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b6ac2:	6866      	ldr	r6, [r4, #4]
   b6ac4:	2e01      	cmp	r6, #1
   b6ac6:	d03f      	beq.n	b6b48 <loop+0x23c>
   b6ac8:	2e02      	cmp	r6, #2
   b6aca:	d03f      	beq.n	b6b4c <loop+0x240>
   b6acc:	b92e      	cbnz	r6, b6ada <loop+0x1ce>
            cambioModo(tagInfo[2]);
   b6ace:	68a0      	ldr	r0, [r4, #8]
   b6ad0:	f7ff fec2 	bl	b6858 <_Z10cambioModoi>
            resetFunc();
   b6ad4:	4b40      	ldr	r3, [pc, #256]	; (b6bd8 <loop+0x2cc>)
   b6ad6:	681b      	ldr	r3, [r3, #0]
   b6ad8:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b6ada:	6823      	ldr	r3, [r4, #0]
   b6adc:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b6ade:	bf1c      	itt	ne
   b6ae0:	f04f 33ff 	movne.w	r3, #4294967295
   b6ae4:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b6ae6:	f8d8 4000 	ldr.w	r4, [r8]
   b6aea:	2c00      	cmp	r4, #0
   b6aec:	f340 86f2 	ble.w	b78d4 <loop+0xfc8>
   b6af0:	782b      	ldrb	r3, [r5, #0]
   b6af2:	2b00      	cmp	r3, #0
   b6af4:	f000 8477 	beq.w	b73e6 <loop+0xada>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6af8:	4c38      	ldr	r4, [pc, #224]	; (b6bdc <loop+0x2d0>)
   b6afa:	4d39      	ldr	r5, [pc, #228]	; (b6be0 <loop+0x2d4>)
   b6afc:	6922      	ldr	r2, [r4, #16]
   b6afe:	6860      	ldr	r0, [r4, #4]
   b6b00:	2101      	movs	r1, #1
   b6b02:	f7fe fa03 	bl	b4f0c <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6b06:	4b37      	ldr	r3, [pc, #220]	; (b6be4 <loop+0x2d8>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6b08:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6b0a:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6b0c:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6b0e:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b6b12:	f7fe fb9b 	bl	b524c <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6b16:	782b      	ldrb	r3, [r5, #0]
   b6b18:	2b00      	cmp	r3, #0
   b6b1a:	f000 80ed 	beq.w	b6cf8 <loop+0x3ec>
   b6b1e:	4932      	ldr	r1, [pc, #200]	; (b6be8 <loop+0x2dc>)
   b6b20:	482a      	ldr	r0, [pc, #168]	; (b6bcc <loop+0x2c0>)
   b6b22:	f004 f9f3 	bl	baf0c <strcpy>
          display.clearDisplay();
   b6b26:	4c1d      	ldr	r4, [pc, #116]	; (b6b9c <loop+0x290>)
   b6b28:	4620      	mov	r0, r4
   b6b2a:	f002 fb7b 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6b2e:	2300      	movs	r3, #0
          display.print(buf);
   b6b30:	4926      	ldr	r1, [pc, #152]	; (b6bcc <loop+0x2c0>)
   b6b32:	6123      	str	r3, [r4, #16]
   b6b34:	4620      	mov	r0, r4
   b6b36:	f003 fc33 	bl	ba3a0 <_ZN5Print5printEPKc>
          display.display();
   b6b3a:	4620      	mov	r0, r4
   b6b3c:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b6b40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          display.display();
   b6b44:	f002 bdd6 	b.w	b96f4 <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b6b48:	702e      	strb	r6, [r5, #0]
            break;
   b6b4a:	e7c6      	b.n	b6ada <loop+0x1ce>
            if ( tagInfo[2] == 1 ) {
   b6b4c:	68a3      	ldr	r3, [r4, #8]
   b6b4e:	2b01      	cmp	r3, #1
   b6b50:	d10f      	bne.n	b6b72 <loop+0x266>
              borradoALL(0);
   b6b52:	4638      	mov	r0, r7
   b6b54:	f7fe fcd0 	bl	b54f8 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b6b58:	4924      	ldr	r1, [pc, #144]	; (b6bec <loop+0x2e0>)
   b6b5a:	a8c2      	add	r0, sp, #776	; 0x308
   b6b5c:	f003 fb65 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6b60:	aac2      	add	r2, sp, #776	; 0x308
   b6b62:	4639      	mov	r1, r7
   b6b64:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b6b66:	f7ff fbe9 	bl	b633c <_Z10showBitmapii6String>
   b6b6a:	a8c2      	add	r0, sp, #776	; 0x308
   b6b6c:	f003 fb12 	bl	ba194 <_ZN6StringD1Ev>
   b6b70:	e7b3      	b.n	b6ada <loop+0x1ce>
              showBitmap(2,1,"");
   b6b72:	490c      	ldr	r1, [pc, #48]	; (b6ba4 <loop+0x298>)
   b6b74:	a8c2      	add	r0, sp, #776	; 0x308
   b6b76:	f003 fb58 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6b7a:	aac2      	add	r2, sp, #776	; 0x308
   b6b7c:	2101      	movs	r1, #1
   b6b7e:	4630      	mov	r0, r6
   b6b80:	f7ff fbdc 	bl	b633c <_Z10showBitmapii6String>
   b6b84:	a8c2      	add	r0, sp, #776	; 0x308
   b6b86:	f003 fb05 	bl	ba194 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b6b8a:	f003 fe1d 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6b8e:	4918      	ldr	r1, [pc, #96]	; (b6bf0 <loop+0x2e4>)
   b6b90:	f003 fc19 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b6b94:	e7a1      	b.n	b6ada <loop+0x1ce>
   b6b96:	bf00      	nop
   b6b98:	2003d350 	.word	0x2003d350
   b6b9c:	2003d354 	.word	0x2003d354
   b6ba0:	2003cd1e 	.word	0x2003cd1e
   b6ba4:	000bb25e 	.word	0x000bb25e
   b6ba8:	2003d6fc 	.word	0x2003d6fc
   b6bac:	2003da38 	.word	0x2003da38
   b6bb0:	000bb794 	.word	0x000bb794
   b6bb4:	2003cc88 	.word	0x2003cc88
   b6bb8:	2003d6ec 	.word	0x2003d6ec
   b6bbc:	2003cd2d 	.word	0x2003cd2d
   b6bc0:	2003dc34 	.word	0x2003dc34
   b6bc4:	2003cc7c 	.word	0x2003cc7c
   b6bc8:	2003da3c 	.word	0x2003da3c
   b6bcc:	2003d309 	.word	0x2003d309
   b6bd0:	2003da54 	.word	0x2003da54
   b6bd4:	000bb78a 	.word	0x000bb78a
   b6bd8:	2003da50 	.word	0x2003da50
   b6bdc:	2003cd30 	.word	0x2003cd30
   b6be0:	2003e6b8 	.word	0x2003e6b8
   b6be4:	2003d6e4 	.word	0x2003d6e4
   b6be8:	000bba75 	.word	0x000bba75
   b6bec:	000bb7a7 	.word	0x000bb7a7
   b6bf0:	000bb7c2 	.word	0x000bb7c2
   b6bf4:	2003cc7b 	.word	0x2003cc7b
   b6bf8:	000bb74d 	.word	0x000bb74d
   b6bfc:	2003da2c 	.word	0x2003da2c
        id = tagInfo[3];
   b6c00:	4faf      	ldr	r7, [pc, #700]	; (b6ec0 <loop+0x5b4>)
   b6c02:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b6c04:	4eaf      	ldr	r6, [pc, #700]	; (b6ec4 <loop+0x5b8>)
        if (tagInfo[1] == 0) {
   b6c06:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b6c0a:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b6c0c:	68a3      	ldr	r3, [r4, #8]
   b6c0e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; b6f0c <loop+0x600>
   b6c12:	6033      	str	r3, [r6, #0]
        if (tagInfo[1] == 0) {
   b6c14:	f1ba 0f00 	cmp.w	sl, #0
   b6c18:	d123      	bne.n	b6c62 <loop+0x356>
          Serial.println("Sensor detectado");
   b6c1a:	f003 fdd5 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6c1e:	49aa      	ldr	r1, [pc, #680]	; (b6ec8 <loop+0x5bc>)
   b6c20:	f003 fbd1 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b6c24:	4aa9      	ldr	r2, [pc, #676]	; (b6ecc <loop+0x5c0>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b6c26:	6833      	ldr	r3, [r6, #0]
          sensor.id = id;
   b6c28:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b6c2a:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b6c2c:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b6c2e:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b6c30:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b6c34:	bf18      	it	ne
   b6c36:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b6c38:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b6c3a:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b6c3c:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b6c40:	49a3      	ldr	r1, [pc, #652]	; (b6ed0 <loop+0x5c4>)
          numSensoresBloque++;
   b6c42:	3201      	adds	r2, #1
   b6c44:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b6c48:	a8c2      	add	r0, sp, #776	; 0x308
          if (sensor.puerto == 0) {
   b6c4a:	2b00      	cmp	r3, #0
   b6c4c:	d13b      	bne.n	b6cc6 <loop+0x3ba>
            showBitmap(1,3,""); //A0
   b6c4e:	f003 faec 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6c52:	aac2      	add	r2, sp, #776	; 0x308
   b6c54:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b6c56:	2001      	movs	r0, #1
   b6c58:	f7ff fb70 	bl	b633c <_Z10showBitmapii6String>
   b6c5c:	a8c2      	add	r0, sp, #776	; 0x308
   b6c5e:	f003 fa99 	bl	ba194 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b6c62:	f8d9 3000 	ldr.w	r3, [r9]
   b6c66:	2b00      	cmp	r3, #0
   b6c68:	dd38      	ble.n	b6cdc <loop+0x3d0>
          if (tagInfo[1] == 1) {
   b6c6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b6c6e:	f1b9 0f01 	cmp.w	r9, #1
   b6c72:	f47f af32 	bne.w	b6ada <loop+0x1ce>
            Serial.println("Actuador detectado");
   b6c76:	f003 fda7 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6c7a:	4996      	ldr	r1, [pc, #600]	; (b6ed4 <loop+0x5c8>)
   b6c7c:	f003 fba3 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b6c80:	4b95      	ldr	r3, [pc, #596]	; (b6ed8 <loop+0x5cc>)
   b6c82:	6922      	ldr	r2, [r4, #16]
   b6c84:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b6c86:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b6c88:	683a      	ldr	r2, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b6c8a:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b6c8c:	4b8f      	ldr	r3, [pc, #572]	; (b6ecc <loop+0x5c0>)
   b6c8e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b6c92:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b6c96:	bf0c      	ite	eq
   b6c98:	2102      	moveq	r1, #2
   b6c9a:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b6c9c:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b6c9e:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b6ca2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b6ca6:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b6caa:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b6cac:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b6cb0:	4987      	ldr	r1, [pc, #540]	; (b6ed0 <loop+0x5c4>)
            numActuadoresBloque++;
   b6cb2:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b6cb6:	a8c2      	add	r0, sp, #776	; 0x308
            if (actuador.puerto == 2) {
   b6cb8:	d10a      	bne.n	b6cd0 <loop+0x3c4>
              showBitmap(1,4,""); //A2
   b6cba:	f003 fab6 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6cbe:	aac2      	add	r2, sp, #776	; 0x308
   b6cc0:	2104      	movs	r1, #4
   b6cc2:	4648      	mov	r0, r9
   b6cc4:	e74f      	b.n	b6b66 <loop+0x25a>
            showBitmap(1,0,""); //D2
   b6cc6:	f003 fab0 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6cca:	aac2      	add	r2, sp, #776	; 0x308
   b6ccc:	4651      	mov	r1, sl
   b6cce:	e7c2      	b.n	b6c56 <loop+0x34a>
              showBitmap(1,1,""); //D4
   b6cd0:	f003 faab 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6cd4:	aac2      	add	r2, sp, #776	; 0x308
   b6cd6:	4649      	mov	r1, r9
   b6cd8:	4648      	mov	r0, r9
   b6cda:	e744      	b.n	b6b66 <loop+0x25a>
            ledApagar();
   b6cdc:	f7fe f9b6 	bl	b504c <_Z9ledApagarv>
   b6ce0:	e6fb      	b.n	b6ada <loop+0x1ce>
        if ( tagInfo[0] != -1 ) {
   b6ce2:	3601      	adds	r6, #1
   b6ce4:	f43f aef9 	beq.w	b6ada <loop+0x1ce>
          showBitmap(2,0,"");
   b6ce8:	4979      	ldr	r1, [pc, #484]	; (b6ed0 <loop+0x5c4>)
   b6cea:	a8c2      	add	r0, sp, #776	; 0x308
   b6cec:	f003 fa9d 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6cf0:	aac2      	add	r2, sp, #776	; 0x308
   b6cf2:	4639      	mov	r1, r7
   b6cf4:	2002      	movs	r0, #2
   b6cf6:	e736      	b.n	b6b66 <loop+0x25a>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6cf8:	4978      	ldr	r1, [pc, #480]	; (b6edc <loop+0x5d0>)
   b6cfa:	e711      	b.n	b6b20 <loop+0x214>
  } else if ( MODE == 1 ) {
   b6cfc:	2f01      	cmp	r7, #1
   b6cfe:	f040 837c 	bne.w	b73fa <loop+0xaee>
    switch (tagInfo[0])
   b6d02:	2e01      	cmp	r6, #1
   b6d04:	d056      	beq.n	b6db4 <loop+0x4a8>
   b6d06:	2e06      	cmp	r6, #6
   b6d08:	f040 8313 	bne.w	b7332 <loop+0xa26>
        switch (tagInfo[1])
   b6d0c:	6866      	ldr	r6, [r4, #4]
   b6d0e:	2e01      	cmp	r6, #1
   b6d10:	d029      	beq.n	b6d66 <loop+0x45a>
   b6d12:	2e02      	cmp	r6, #2
   b6d14:	d029      	beq.n	b6d6a <loop+0x45e>
   b6d16:	b92e      	cbnz	r6, b6d24 <loop+0x418>
            cambioModo(tagInfo[2]);
   b6d18:	68a0      	ldr	r0, [r4, #8]
   b6d1a:	f7ff fd9d 	bl	b6858 <_Z10cambioModoi>
            resetFunc();
   b6d1e:	4b70      	ldr	r3, [pc, #448]	; (b6ee0 <loop+0x5d4>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	4798      	blx	r3
    tagInfo[0] = -1;
   b6d24:	f04f 33ff 	mov.w	r3, #4294967295
   b6d28:	6023      	str	r3, [r4, #0]
    if (play) {
   b6d2a:	782b      	ldrb	r3, [r5, #0]
   b6d2c:	2b00      	cmp	r3, #0
   b6d2e:	f000 835a 	beq.w	b73e6 <loop+0xada>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b6d32:	4e6c      	ldr	r6, [pc, #432]	; (b6ee4 <loop+0x5d8>)
   b6d34:	6833      	ldr	r3, [r6, #0]
   b6d36:	2b00      	cmp	r3, #0
   b6d38:	f040 830a 	bne.w	b7350 <loop+0xa44>
   b6d3c:	4b63      	ldr	r3, [pc, #396]	; (b6ecc <loop+0x5c0>)
   b6d3e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b6d42:	2b00      	cmp	r3, #0
   b6d44:	f300 8307 	bgt.w	b7356 <loop+0xa4a>
        showBitmap(2,4,"  acaba bloque 1");
   b6d48:	4967      	ldr	r1, [pc, #412]	; (b6ee8 <loop+0x5dc>)
   b6d4a:	a8c2      	add	r0, sp, #776	; 0x308
   b6d4c:	f003 fa6d 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6d50:	aac2      	add	r2, sp, #776	; 0x308
   b6d52:	2104      	movs	r1, #4
   b6d54:	2002      	movs	r0, #2
   b6d56:	f7ff faf1 	bl	b633c <_Z10showBitmapii6String>
   b6d5a:	a8c2      	add	r0, sp, #776	; 0x308
   b6d5c:	f003 fa1a 	bl	ba194 <_ZN6StringD1Ev>
        play = false;
   b6d60:	2300      	movs	r3, #0
   b6d62:	702b      	strb	r3, [r5, #0]
   b6d64:	e313      	b.n	b738e <loop+0xa82>
            play = true;
   b6d66:	702e      	strb	r6, [r5, #0]
            break;
   b6d68:	e7dc      	b.n	b6d24 <loop+0x418>
            if ( tagInfo[2] == 1 ) {
   b6d6a:	68a3      	ldr	r3, [r4, #8]
   b6d6c:	2b01      	cmp	r3, #1
   b6d6e:	d10e      	bne.n	b6d8e <loop+0x482>
   switch (modo)
   b6d70:	f7fd fdd0 	bl	b4914 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b6d74:	a8c2      	add	r0, sp, #776	; 0x308
   b6d76:	495d      	ldr	r1, [pc, #372]	; (b6eec <loop+0x5e0>)
   b6d78:	f003 fa57 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6d7c:	aac2      	add	r2, sp, #776	; 0x308
   b6d7e:	2100      	movs	r1, #0
   b6d80:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b6d82:	f7ff fadb 	bl	b633c <_Z10showBitmapii6String>
   b6d86:	a8c2      	add	r0, sp, #776	; 0x308
   b6d88:	f003 fa04 	bl	ba194 <_ZN6StringD1Ev>
   b6d8c:	e7ca      	b.n	b6d24 <loop+0x418>
            } else if (tagInfo[2] == 2) {
   b6d8e:	2b02      	cmp	r3, #2
   b6d90:	d103      	bne.n	b6d9a <loop+0x48e>
              borradoBLOQUE(1);
   b6d92:	4638      	mov	r0, r7
   b6d94:	f7ff fc7a 	bl	b668c <_Z13borradoBLOQUEi>
   b6d98:	e7c4      	b.n	b6d24 <loop+0x418>
              Serial.println("Borrado no permitido para este modo");
   b6d9a:	f003 fd15 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6d9e:	4954      	ldr	r1, [pc, #336]	; (b6ef0 <loop+0x5e4>)
   b6da0:	f003 fb11 	bl	ba3c6 <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b6da4:	494a      	ldr	r1, [pc, #296]	; (b6ed0 <loop+0x5c4>)
   b6da6:	a8c2      	add	r0, sp, #776	; 0x308
   b6da8:	f003 fa3f 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6dac:	aac2      	add	r2, sp, #776	; 0x308
   b6dae:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b6db0:	2002      	movs	r0, #2
   b6db2:	e7e6      	b.n	b6d82 <loop+0x476>
        id = tagInfo[3];
   b6db4:	4f42      	ldr	r7, [pc, #264]	; (b6ec0 <loop+0x5b4>)
   b6db6:	68e3      	ldr	r3, [r4, #12]
   b6db8:	603b      	str	r3, [r7, #0]
        Serial.print("Ejecutando tag --> ");
   b6dba:	f003 fd05 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6dbe:	494d      	ldr	r1, [pc, #308]	; (b6ef4 <loop+0x5e8>)
   b6dc0:	4e42      	ldr	r6, [pc, #264]	; (b6ecc <loop+0x5c0>)
   b6dc2:	f8df 9148 	ldr.w	r9, [pc, #328]	; b6f0c <loop+0x600>
   b6dc6:	f8df 813c 	ldr.w	r8, [pc, #316]	; b6f04 <loop+0x5f8>
   b6dca:	f8df a13c 	ldr.w	sl, [pc, #316]	; b6f08 <loop+0x5fc>
   b6dce:	f8df b114 	ldr.w	fp, [pc, #276]	; b6ee4 <loop+0x5d8>
   b6dd2:	f003 fae5 	bl	ba3a0 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b6dd6:	6863      	ldr	r3, [r4, #4]
   b6dd8:	2b05      	cmp	r3, #5
   b6dda:	d84c      	bhi.n	b6e76 <loop+0x56a>
   b6ddc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6de0:	00db0006 	.word	0x00db0006
   b6de4:	024601e3 	.word	0x024601e3
   b6de8:	02920277 	.word	0x02920277
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b6dec:	f8df 8120 	ldr.w	r8, [pc, #288]	; b6f10 <loop+0x604>
            Serial.println("Sensor detectado");
   b6df0:	f003 fcea 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6df4:	4934      	ldr	r1, [pc, #208]	; (b6ec8 <loop+0x5bc>)
   b6df6:	f003 fae6 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b6dfa:	f898 3000 	ldrb.w	r3, [r8]
   b6dfe:	2b00      	cmp	r3, #0
   b6e00:	f000 808d 	beq.w	b6f1e <loop+0x612>
   b6e04:	f8d9 2000 	ldr.w	r2, [r9]
   b6e08:	f8da 3000 	ldr.w	r3, [sl]
   b6e0c:	429a      	cmp	r2, r3
   b6e0e:	f040 80a3 	bne.w	b6f58 <loop+0x64c>
   b6e12:	6838      	ldr	r0, [r7, #0]
   b6e14:	f7fe fc6a 	bl	b56ec <_Z13isValidSensori>
   b6e18:	2800      	cmp	r0, #0
   b6e1a:	d07d      	beq.n	b6f18 <loop+0x60c>
              puerto = isNewSensor(id);
   b6e1c:	6838      	ldr	r0, [r7, #0]
   b6e1e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; b6f14 <loop+0x608>
   b6e22:	f7fe fc85 	bl	b5730 <_Z11isNewSensori>
   b6e26:	f8c8 0000 	str.w	r0, [r8]
              if (puerto == -1) {
   b6e2a:	3001      	adds	r0, #1
   b6e2c:	d17b      	bne.n	b6f26 <loop+0x61a>
                puerto = asignarPuerto(tagInfo[2]);
   b6e2e:	68a0      	ldr	r0, [r4, #8]
   b6e30:	f7fe fe24 	bl	b5a7c <_Z13asignarPuertoi>
   b6e34:	4601      	mov	r1, r0
   b6e36:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b6e3a:	68a0      	ldr	r0, [r4, #8]
   b6e3c:	f7ff fbd8 	bl	b65f0 <_Z8showPortii>
              if (puerto != -1) {
   b6e40:	f8d8 0000 	ldr.w	r0, [r8]
   b6e44:	1c42      	adds	r2, r0, #1
   b6e46:	d07b      	beq.n	b6f40 <loop+0x634>
                newSensor.bloque = numBloque;
   b6e48:	f8db 8000 	ldr.w	r8, [fp]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b6e4c:	f8d9 1000 	ldr.w	r1, [r9]
   b6e50:	683f      	ldr	r7, [r7, #0]
   b6e52:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b6e56:	fb02 f208 	mul.w	r2, r2, r8
   b6e5a:	eb02 1301 	add.w	r3, r2, r1, lsl #4
   b6e5e:	4433      	add	r3, r6
   b6e60:	605f      	str	r7, [r3, #4]
   b6e62:	6927      	ldr	r7, [r4, #16]
   b6e64:	6118      	str	r0, [r3, #16]
   b6e66:	e9c3 7802 	strd	r7, r8, [r3, #8]
                bloques[numBloque].numSensores++;
   b6e6a:	58b3      	ldr	r3, [r6, r2]
   b6e6c:	3301      	adds	r3, #1
   b6e6e:	50b3      	str	r3, [r6, r2]
                numSensoresBloque++;
   b6e70:	1c4b      	adds	r3, r1, #1
   b6e72:	f8c9 3000 	str.w	r3, [r9]
        Serial.println("Fin Tag");
   b6e76:	f003 fca7 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6e7a:	491f      	ldr	r1, [pc, #124]	; (b6ef8 <loop+0x5ec>)
   b6e7c:	f003 faa3 	bl	ba3c6 <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b6e80:	f003 fca2 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6e84:	491d      	ldr	r1, [pc, #116]	; (b6efc <loop+0x5f0>)
   b6e86:	f003 fa9e 	bl	ba3c6 <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b6e8a:	f003 fc9d 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6e8e:	4b15      	ldr	r3, [pc, #84]	; (b6ee4 <loop+0x5d8>)
   b6e90:	491b      	ldr	r1, [pc, #108]	; (b6f00 <loop+0x5f4>)
   b6e92:	681a      	ldr	r2, [r3, #0]
   b6e94:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b6e98:	fb03 6602 	mla	r6, r3, r2, r6
   b6e9c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b6ea0:	9302      	str	r3, [sp, #8]
   b6ea2:	4b18      	ldr	r3, [pc, #96]	; (b6f04 <loop+0x5f8>)
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	9301      	str	r3, [sp, #4]
   b6ea8:	4b17      	ldr	r3, [pc, #92]	; (b6f08 <loop+0x5fc>)
   b6eaa:	681b      	ldr	r3, [r3, #0]
   b6eac:	9300      	str	r3, [sp, #0]
   b6eae:	4b17      	ldr	r3, [pc, #92]	; (b6f0c <loop+0x600>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	f7fd fd5b 	bl	b496c <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b6eb6:	f003 fc87 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6eba:	f003 fa78 	bl	ba3ae <_ZN5Print7printlnEv>
        break;
   b6ebe:	e731      	b.n	b6d24 <loop+0x418>
   b6ec0:	2003d6e8 	.word	0x2003d6e8
   b6ec4:	2003e6b0 	.word	0x2003e6b0
   b6ec8:	000bb7e6 	.word	0x000bb7e6
   b6ecc:	2003cd30 	.word	0x2003cd30
   b6ed0:	000bb25e 	.word	0x000bb25e
   b6ed4:	000bb7f7 	.word	0x000bb7f7
   b6ed8:	2003d6e4 	.word	0x2003d6e4
   b6edc:	000bba84 	.word	0x000bba84
   b6ee0:	2003da50 	.word	0x2003da50
   b6ee4:	2003cc80 	.word	0x2003cc80
   b6ee8:	000bba8a 	.word	0x000bba8a
   b6eec:	000bb7a7 	.word	0x000bb7a7
   b6ef0:	000bb7c2 	.word	0x000bb7c2
   b6ef4:	000bb80a 	.word	0x000bb80a
   b6ef8:	000bb9ea 	.word	0x000bb9ea
   b6efc:	000bb9f2 	.word	0x000bb9f2
   b6f00:	000bba27 	.word	0x000bba27
   b6f04:	2003da2c 	.word	0x2003da2c
   b6f08:	2003da30 	.word	0x2003da30
   b6f0c:	2003da34 	.word	0x2003da34
   b6f10:	2003cd1d 	.word	0x2003cd1d
   b6f14:	2003da40 	.word	0x2003da40
              if ((!IF_pasado)) {
   b6f18:	f898 3000 	ldrb.w	r3, [r8]
   b6f1c:	b9b3      	cbnz	r3, b6f4c <loop+0x640>
                Serial.println("Se esperaba IF tag");
   b6f1e:	f003 fc53 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6f22:	49bc      	ldr	r1, [pc, #752]	; (b7214 <loop+0x908>)
   b6f24:	e01b      	b.n	b6f5e <loop+0x652>
                showBitmap(1,6,"");
   b6f26:	49bc      	ldr	r1, [pc, #752]	; (b7218 <loop+0x90c>)
   b6f28:	a8c2      	add	r0, sp, #776	; 0x308
   b6f2a:	f003 f97e 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6f2e:	aac2      	add	r2, sp, #776	; 0x308
   b6f30:	2106      	movs	r1, #6
   b6f32:	2001      	movs	r0, #1
   b6f34:	f7ff fa02 	bl	b633c <_Z10showBitmapii6String>
   b6f38:	a8c2      	add	r0, sp, #776	; 0x308
   b6f3a:	f003 f92b 	bl	ba194 <_ZN6StringD1Ev>
   b6f3e:	e77f      	b.n	b6e40 <loop+0x534>
                Serial.println("Puerto no disponibleeee");
   b6f40:	f003 fc42 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6f44:	49b5      	ldr	r1, [pc, #724]	; (b721c <loop+0x910>)
                Serial.println("Puerto no disponible");
   b6f46:	f003 fa3e 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b6f4a:	e794      	b.n	b6e76 <loop+0x56a>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b6f4c:	f8d9 2000 	ldr.w	r2, [r9]
   b6f50:	f8da 3000 	ldr.w	r3, [sl]
   b6f54:	429a      	cmp	r2, r3
   b6f56:	d00c      	beq.n	b6f72 <loop+0x666>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b6f58:	f003 fc36 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6f5c:	49b0      	ldr	r1, [pc, #704]	; (b7220 <loop+0x914>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b6f5e:	f003 fa32 	bl	ba3c6 <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b6f62:	49ad      	ldr	r1, [pc, #692]	; (b7218 <loop+0x90c>)
   b6f64:	a8c2      	add	r0, sp, #776	; 0x308
   b6f66:	f003 f960 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6f6a:	2102      	movs	r1, #2
   b6f6c:	aac2      	add	r2, sp, #776	; 0x308
   b6f6e:	4608      	mov	r0, r1
   b6f70:	e00b      	b.n	b6f8a <loop+0x67e>
                Serial.println("Sensor invalido");
   b6f72:	f003 fc29 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6f76:	49ab      	ldr	r1, [pc, #684]	; (b7224 <loop+0x918>)
   b6f78:	f003 fa25 	bl	ba3c6 <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b6f7c:	49a6      	ldr	r1, [pc, #664]	; (b7218 <loop+0x90c>)
   b6f7e:	a8c2      	add	r0, sp, #776	; 0x308
   b6f80:	f003 f953 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b6f84:	aac2      	add	r2, sp, #776	; 0x308
   b6f86:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b6f88:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b6f8a:	f7ff f9d7 	bl	b633c <_Z10showBitmapii6String>
   b6f8e:	a8c2      	add	r0, sp, #776	; 0x308
   b6f90:	f003 f900 	bl	ba194 <_ZN6StringD1Ev>
   b6f94:	e76f      	b.n	b6e76 <loop+0x56a>
            Serial.println("Actuador detectado");
   b6f96:	f003 fc17 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b6f9a:	49a3      	ldr	r1, [pc, #652]	; (b7228 <loop+0x91c>)
            estado = tagInfo[4];
   b6f9c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b7260 <loop+0x954>
            Serial.println("Actuador detectado");
   b6fa0:	f003 fa11 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b6fa4:	4aa1      	ldr	r2, [pc, #644]	; (b722c <loop+0x920>)
            estado = tagInfo[4];
   b6fa6:	f8d4 a010 	ldr.w	sl, [r4, #16]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b6faa:	7813      	ldrb	r3, [r2, #0]
            estado = tagInfo[4];
   b6fac:	f8c9 a000 	str.w	sl, [r9]
            if ( THEN_pasado && !ELSE_pasado && isValidActuador(estado, id) && numActuadoresBloque==0 ) {
   b6fb0:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b6fb2:	2b00      	cmp	r3, #0
   b6fb4:	d072      	beq.n	b709c <loop+0x790>
   b6fb6:	4a9e      	ldr	r2, [pc, #632]	; (b7230 <loop+0x924>)
   b6fb8:	6839      	ldr	r1, [r7, #0]
   b6fba:	7812      	ldrb	r2, [r2, #0]
   b6fbc:	4650      	mov	r0, sl
   b6fbe:	2a00      	cmp	r2, #0
   b6fc0:	d169      	bne.n	b7096 <loop+0x78a>
   b6fc2:	f7fe fbdd 	bl	b5780 <_Z15isValidActuadorii>
   b6fc6:	2800      	cmp	r0, #0
   b6fc8:	d068      	beq.n	b709c <loop+0x790>
   b6fca:	f8d8 2000 	ldr.w	r2, [r8]
   b6fce:	2a00      	cmp	r2, #0
   b6fd0:	d164      	bne.n	b709c <loop+0x790>
              puerto = isNewActuador(id);
   b6fd2:	4608      	mov	r0, r1
   b6fd4:	f7fe fc0e 	bl	b57f4 <_Z13isNewActuadori>
   b6fd8:	f8df a288 	ldr.w	sl, [pc, #648]	; b7264 <loop+0x958>
   b6fdc:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b6fe0:	3001      	adds	r0, #1
   b6fe2:	d147      	bne.n	b7074 <loop+0x768>
                puerto = asignarPuerto(tagInfo[2]);
   b6fe4:	68a0      	ldr	r0, [r4, #8]
   b6fe6:	f7fe fd49 	bl	b5a7c <_Z13asignarPuertoi>
   b6fea:	4601      	mov	r1, r0
   b6fec:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b6ff0:	68a0      	ldr	r0, [r4, #8]
   b6ff2:	f7ff fafd 	bl	b65f0 <_Z8showPortii>
              if (puerto != -1) {
   b6ff6:	f8da 1000 	ldr.w	r1, [sl]
   b6ffa:	1c4b      	adds	r3, r1, #1
   b6ffc:	d047      	beq.n	b708e <loop+0x782>
                newActuador.id = id;
   b6ffe:	6838      	ldr	r0, [r7, #0]
                newActuador.bloque = numBloque;
   b7000:	f8db 7000 	ldr.w	r7, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7004:	f8d8 c000 	ldr.w	ip, [r8]
                newActuador.condicion = estado;
   b7008:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b700c:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7010:	fb03 f207 	mul.w	r2, r3, r7
   b7014:	2314      	movs	r3, #20
   b7016:	fb03 230c 	mla	r3, r3, ip, r2
   b701a:	4433      	add	r3, r6
   b701c:	e9c3 7154 	strd	r7, r1, [r3, #336]	; 0x150
   b7020:	2701      	movs	r7, #1
   b7022:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b7026:	f883 7158 	strb.w	r7, [r3, #344]	; 0x158
                numActuadoresBloque++;
   b702a:	eb0c 0307 	add.w	r3, ip, r7
   b702e:	f8c8 3000 	str.w	r3, [r8]
                bloques[numBloque].numActuadores++;
   b7032:	18b3      	adds	r3, r6, r2
   b7034:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b7038:	443a      	add	r2, r7
   b703a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b703e:	2800      	cmp	r0, #0
   b7040:	f47f af19 	bne.w	b6e76 <loop+0x56a>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7044:	b2c9      	uxtb	r1, r1
   b7046:	19ca      	adds	r2, r1, r7
   b7048:	f50d 7842 	add.w	r8, sp, #776	; 0x308
   b704c:	2305      	movs	r3, #5
   b704e:	b2d2      	uxtb	r2, r2
   b7050:	4640      	mov	r0, r8
   b7052:	f002 fbe9 	bl	b9828 <_ZN12ChainableLEDC1Ehhh>
   b7056:	e898 0003 	ldmia.w	r8, {r0, r1}
   b705a:	f8df 920c 	ldr.w	r9, [pc, #524]	; b7268 <loop+0x95c>
   b705e:	e889 0003 	stmia.w	r9, {r0, r1}
   b7062:	4640      	mov	r0, r8
   b7064:	f002 fbed 	bl	b9842 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7068:	4648      	mov	r0, r9
   b706a:	f002 fc8f 	bl	b998c <_ZN12ChainableLED4initEv>
                  init = true;
   b706e:	4b71      	ldr	r3, [pc, #452]	; (b7234 <loop+0x928>)
   b7070:	701f      	strb	r7, [r3, #0]
   b7072:	e700      	b.n	b6e76 <loop+0x56a>
                showBitmap(1,6,"");
   b7074:	4968      	ldr	r1, [pc, #416]	; (b7218 <loop+0x90c>)
   b7076:	a8c2      	add	r0, sp, #776	; 0x308
   b7078:	f003 f8d7 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b707c:	aac2      	add	r2, sp, #776	; 0x308
   b707e:	2106      	movs	r1, #6
   b7080:	2001      	movs	r0, #1
   b7082:	f7ff f95b 	bl	b633c <_Z10showBitmapii6String>
   b7086:	a8c2      	add	r0, sp, #776	; 0x308
   b7088:	f003 f884 	bl	ba194 <_ZN6StringD1Ev>
   b708c:	e7b3      	b.n	b6ff6 <loop+0x6ea>
                Serial.println("Puerto no disponible");
   b708e:	f003 fb9b 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7092:	4969      	ldr	r1, [pc, #420]	; (b7238 <loop+0x92c>)
   b7094:	e757      	b.n	b6f46 <loop+0x63a>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(estado, id) ) {
   b7096:	f7fe fb73 	bl	b5780 <_Z15isValidActuadorii>
   b709a:	b958      	cbnz	r0, b70b4 <loop+0x7a8>
              if (!IF_pasado) {
   b709c:	4a67      	ldr	r2, [pc, #412]	; (b723c <loop+0x930>)
   b709e:	7812      	ldrb	r2, [r2, #0]
   b70a0:	2a00      	cmp	r2, #0
   b70a2:	f43f af3c 	beq.w	b6f1e <loop+0x612>
              } else if (!THEN_pasado) {
   b70a6:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
   b70a8:	2b00      	cmp	r3, #0
   b70aa:	d162      	bne.n	b7172 <loop+0x866>
                Serial.println("Se esperaba THEN tag");
   b70ac:	f003 fb8c 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b70b0:	4963      	ldr	r1, [pc, #396]	; (b7240 <loop+0x934>)
   b70b2:	e754      	b.n	b6f5e <loop+0x652>
              puerto = isNewActuador(id);
   b70b4:	4608      	mov	r0, r1
   b70b6:	f7fe fb9d 	bl	b57f4 <_Z13isNewActuadori>
   b70ba:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b7264 <loop+0x958>
   b70be:	f8ca 0000 	str.w	r0, [sl]
              if (puerto == -1) {
   b70c2:	3001      	adds	r0, #1
   b70c4:	d148      	bne.n	b7158 <loop+0x84c>
                puerto = asignarPuerto(tagInfo[2]);
   b70c6:	68a0      	ldr	r0, [r4, #8]
   b70c8:	f7fe fcd8 	bl	b5a7c <_Z13asignarPuertoi>
   b70cc:	4601      	mov	r1, r0
   b70ce:	f8ca 0000 	str.w	r0, [sl]
                showPort(tagInfo[2], puerto);
   b70d2:	68a0      	ldr	r0, [r4, #8]
   b70d4:	f7ff fa8c 	bl	b65f0 <_Z8showPortii>
              if (puerto != -1) {
   b70d8:	f8da 1000 	ldr.w	r1, [sl]
   b70dc:	1c48      	adds	r0, r1, #1
   b70de:	d0d6      	beq.n	b708e <loop+0x782>
                newActuador.bloque = numBloque;
   b70e0:	f8db c000 	ldr.w	ip, [fp]
                newActuador.id = id;
   b70e4:	6838      	ldr	r0, [r7, #0]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b70e6:	f8d8 7000 	ldr.w	r7, [r8]
                newActuador.condicion = estado;
   b70ea:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b70ee:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b70f2:	fb03 f20c 	mul.w	r2, r3, ip
   b70f6:	2314      	movs	r3, #20
   b70f8:	fb03 2307 	mla	r3, r3, r7, r2
   b70fc:	4433      	add	r3, r6
   b70fe:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b7102:	e9c3 0e52 	strd	r0, lr, [r3, #328]	; 0x148
   b7106:	e9c3 c154 	strd	ip, r1, [r3, #336]	; 0x150
   b710a:	2300      	movs	r3, #0
   b710c:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b7110:	18b3      	adds	r3, r6, r2
                numActuadoresBloque++;
   b7112:	3701      	adds	r7, #1
                bloques[numBloque].numActuadores++;
   b7114:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b7118:	f8c8 7000 	str.w	r7, [r8]
                bloques[numBloque].numActuadores++;
   b711c:	3201      	adds	r2, #1
   b711e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b7122:	2800      	cmp	r0, #0
   b7124:	f47f aea7 	bne.w	b6e76 <loop+0x56a>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7128:	b2c9      	uxtb	r1, r1
   b712a:	1c4a      	adds	r2, r1, #1
   b712c:	afc2      	add	r7, sp, #776	; 0x308
   b712e:	2305      	movs	r3, #5
   b7130:	b2d2      	uxtb	r2, r2
   b7132:	4638      	mov	r0, r7
   b7134:	f002 fb78 	bl	b9828 <_ZN12ChainableLEDC1Ehhh>
   b7138:	e897 0003 	ldmia.w	r7, {r0, r1}
   b713c:	f8df 8128 	ldr.w	r8, [pc, #296]	; b7268 <loop+0x95c>
   b7140:	e888 0003 	stmia.w	r8, {r0, r1}
   b7144:	4638      	mov	r0, r7
   b7146:	f002 fb7c 	bl	b9842 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b714a:	4640      	mov	r0, r8
   b714c:	f002 fc1e 	bl	b998c <_ZN12ChainableLED4initEv>
                  init = true;
   b7150:	4b38      	ldr	r3, [pc, #224]	; (b7234 <loop+0x928>)
   b7152:	2201      	movs	r2, #1
   b7154:	701a      	strb	r2, [r3, #0]
   b7156:	e68e      	b.n	b6e76 <loop+0x56a>
                showBitmap(1,6,"");
   b7158:	492f      	ldr	r1, [pc, #188]	; (b7218 <loop+0x90c>)
   b715a:	a8c2      	add	r0, sp, #776	; 0x308
   b715c:	f003 f865 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7160:	aac2      	add	r2, sp, #776	; 0x308
   b7162:	2106      	movs	r1, #6
   b7164:	2001      	movs	r0, #1
   b7166:	f7ff f8e9 	bl	b633c <_Z10showBitmapii6String>
   b716a:	a8c2      	add	r0, sp, #776	; 0x308
   b716c:	f003 f812 	bl	ba194 <_ZN6StringD1Ev>
   b7170:	e7b2      	b.n	b70d8 <loop+0x7cc>
                if (!isValidActuador(estado, id)) {
   b7172:	6839      	ldr	r1, [r7, #0]
   b7174:	4650      	mov	r0, sl
   b7176:	f7fe fb03 	bl	b5780 <_Z15isValidActuadorii>
   b717a:	b958      	cbnz	r0, b7194 <loop+0x888>
                  Serial.println("Invalid Actuador");
   b717c:	f003 fb24 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7180:	4930      	ldr	r1, [pc, #192]	; (b7244 <loop+0x938>)
   b7182:	f003 f920 	bl	ba3c6 <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b7186:	4924      	ldr	r1, [pc, #144]	; (b7218 <loop+0x90c>)
   b7188:	a8c2      	add	r0, sp, #776	; 0x308
   b718a:	f003 f84e 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b718e:	aac2      	add	r2, sp, #776	; 0x308
   b7190:	2106      	movs	r1, #6
   b7192:	e6f9      	b.n	b6f88 <loop+0x67c>
                } else if(!ELSE_pasado) {
   b7194:	4b26      	ldr	r3, [pc, #152]	; (b7230 <loop+0x924>)
   b7196:	781b      	ldrb	r3, [r3, #0]
   b7198:	2b00      	cmp	r3, #0
   b719a:	f47f ae6c 	bne.w	b6e76 <loop+0x56a>
                  Serial.println("Se esperaba ELSE tag");
   b719e:	f003 fb13 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b71a2:	4929      	ldr	r1, [pc, #164]	; (b7248 <loop+0x93c>)
   b71a4:	e6db      	b.n	b6f5e <loop+0x652>
            Serial.println("IF detectado");
   b71a6:	f003 fb0f 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b71aa:	4928      	ldr	r1, [pc, #160]	; (b724c <loop+0x940>)
   b71ac:	f003 f90b 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b71b0:	f8db 3000 	ldr.w	r3, [fp]
   b71b4:	1c5a      	adds	r2, r3, #1
   b71b6:	d004      	beq.n	b71c2 <loop+0x8b6>
   b71b8:	bb3b      	cbnz	r3, b720a <loop+0x8fe>
   b71ba:	f8d8 2000 	ldr.w	r2, [r8]
   b71be:	2a00      	cmp	r2, #0
   b71c0:	dd23      	ble.n	b720a <loop+0x8fe>
              IF_pasado = true;
   b71c2:	4a1e      	ldr	r2, [pc, #120]	; (b723c <loop+0x930>)
   b71c4:	2101      	movs	r1, #1
   b71c6:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b71c8:	4a18      	ldr	r2, [pc, #96]	; (b722c <loop+0x920>)
              showBitmap(3,0,"IF");
   b71ca:	4921      	ldr	r1, [pc, #132]	; (b7250 <loop+0x944>)
              THEN_pasado = false;
   b71cc:	2700      	movs	r7, #0
   b71ce:	7017      	strb	r7, [r2, #0]
              ELSE_pasado = false;
   b71d0:	4a17      	ldr	r2, [pc, #92]	; (b7230 <loop+0x924>)
              numCondicionalesBloque = 0;
   b71d2:	f8ca 7000 	str.w	r7, [sl]
              ELSE_pasado = false;
   b71d6:	7017      	strb	r7, [r2, #0]
              puertoAnalogico_bloque = 0;
   b71d8:	4a1e      	ldr	r2, [pc, #120]	; (b7254 <loop+0x948>)
              numSensoresBloque = 0;
   b71da:	f8c9 7000 	str.w	r7, [r9]
              puertoAnalogico_bloque = 0;
   b71de:	6017      	str	r7, [r2, #0]
              puertoDigital_bloque = 0;
   b71e0:	4a1d      	ldr	r2, [pc, #116]	; (b7258 <loop+0x94c>)
              numActuadoresBloque = 0;
   b71e2:	f8c8 7000 	str.w	r7, [r8]
              numBloque++;
   b71e6:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b71e8:	6017      	str	r7, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b71ea:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b71ee:	f8cb 3000 	str.w	r3, [fp]
              bloques[numBloque] = nuevoBloque;
   b71f2:	4353      	muls	r3, r2
   b71f4:	18f2      	adds	r2, r6, r3
   b71f6:	50f7      	str	r7, [r6, r3]
   b71f8:	f8c2 7144 	str.w	r7, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b71fc:	a8c2      	add	r0, sp, #776	; 0x308
   b71fe:	f003 f814 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7202:	aac2      	add	r2, sp, #776	; 0x308
   b7204:	2100      	movs	r1, #0
   b7206:	2003      	movs	r0, #3
   b7208:	e6bf      	b.n	b6f8a <loop+0x67e>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b720a:	f003 fadd 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b720e:	4913      	ldr	r1, [pc, #76]	; (b725c <loop+0x950>)
   b7210:	e6a5      	b.n	b6f5e <loop+0x652>
   b7212:	bf00      	nop
   b7214:	000bb836 	.word	0x000bb836
   b7218:	000bb25e 	.word	0x000bb25e
   b721c:	000bb81e 	.word	0x000bb81e
   b7220:	000bb849 	.word	0x000bb849
   b7224:	000bb87e 	.word	0x000bb87e
   b7228:	000bb7f7 	.word	0x000bb7f7
   b722c:	2003cd2c 	.word	0x2003cd2c
   b7230:	2003cd1c 	.word	0x2003cd1c
   b7234:	2003d6ec 	.word	0x2003d6ec
   b7238:	000bb5d5 	.word	0x000bb5d5
   b723c:	2003cd1d 	.word	0x2003cd1d
   b7240:	000bb88e 	.word	0x000bb88e
   b7244:	000bb8a3 	.word	0x000bb8a3
   b7248:	000bb8b4 	.word	0x000bb8b4
   b724c:	000bb8c9 	.word	0x000bb8c9
   b7250:	000bb8d6 	.word	0x000bb8d6
   b7254:	2003da48 	.word	0x2003da48
   b7258:	2003da4c 	.word	0x2003da4c
   b725c:	000bb8d9 	.word	0x000bb8d9
   b7260:	2003d6e4 	.word	0x2003d6e4
   b7264:	2003da40 	.word	0x2003da40
   b7268:	2003d6f4 	.word	0x2003d6f4
            Serial.println("AND/OR detectado");
   b726c:	f003 faac 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7270:	4980      	ldr	r1, [pc, #512]	; (b7474 <loop+0xb68>)
   b7272:	f003 f8a8 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b7276:	4b80      	ldr	r3, [pc, #512]	; (b7478 <loop+0xb6c>)
   b7278:	781b      	ldrb	r3, [r3, #0]
   b727a:	2b00      	cmp	r3, #0
   b727c:	f43f ae4f 	beq.w	b6f1e <loop+0x612>
   b7280:	f8da 3000 	ldr.w	r3, [sl]
   b7284:	f8d9 2000 	ldr.w	r2, [r9]
   b7288:	4293      	cmp	r3, r2
   b728a:	da1a      	bge.n	b72c2 <loop+0x9b6>
   b728c:	f8d8 7000 	ldr.w	r7, [r8]
   b7290:	b9cf      	cbnz	r7, b72c6 <loop+0x9ba>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7292:	f8db 2000 	ldr.w	r2, [fp]
   b7296:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b729a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b729e:	fb01 6202 	mla	r2, r1, r2, r6
   b72a2:	f1b8 0f00 	cmp.w	r8, #0
   b72a6:	441a      	add	r2, r3
   b72a8:	bf14      	ite	ne
   b72aa:	2101      	movne	r1, #1
   b72ac:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b72ae:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b72b2:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b72b6:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b72ba:	bf0c      	ite	eq
   b72bc:	496f      	ldreq	r1, [pc, #444]	; (b747c <loop+0xb70>)
   b72be:	4970      	ldrne	r1, [pc, #448]	; (b7480 <loop+0xb74>)
   b72c0:	e79c      	b.n	b71fc <loop+0x8f0>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b72c2:	f73f add8 	bgt.w	b6e76 <loop+0x56a>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b72c6:	f003 fa7f 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b72ca:	496e      	ldr	r1, [pc, #440]	; (b7484 <loop+0xb78>)
   b72cc:	e647      	b.n	b6f5e <loop+0x652>
            Serial.println("THEN detectado");
   b72ce:	f003 fa7b 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b72d2:	496d      	ldr	r1, [pc, #436]	; (b7488 <loop+0xb7c>)
   b72d4:	f003 f877 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b72d8:	4b67      	ldr	r3, [pc, #412]	; (b7478 <loop+0xb6c>)
   b72da:	781b      	ldrb	r3, [r3, #0]
   b72dc:	2b00      	cmp	r3, #0
   b72de:	f43f ae1e 	beq.w	b6f1e <loop+0x612>
   b72e2:	f8d9 3000 	ldr.w	r3, [r9]
   b72e6:	2b00      	cmp	r3, #0
   b72e8:	dd08      	ble.n	b72fc <loop+0x9f0>
   b72ea:	f8da 2000 	ldr.w	r2, [sl]
   b72ee:	4293      	cmp	r3, r2
   b72f0:	dd04      	ble.n	b72fc <loop+0x9f0>
              THEN_pasado = true;
   b72f2:	4b66      	ldr	r3, [pc, #408]	; (b748c <loop+0xb80>)
              showBitmap(3,0,"THEN");
   b72f4:	4966      	ldr	r1, [pc, #408]	; (b7490 <loop+0xb84>)
              THEN_pasado = true;
   b72f6:	2201      	movs	r2, #1
   b72f8:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b72fa:	e77f      	b.n	b71fc <loop+0x8f0>
                Serial.println("Numero de sensores infucientes");
   b72fc:	f003 fa64 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7300:	4964      	ldr	r1, [pc, #400]	; (b7494 <loop+0xb88>)
   b7302:	e62c      	b.n	b6f5e <loop+0x652>
            Serial.println("ELSE detectado");
   b7304:	f003 fa60 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7308:	4963      	ldr	r1, [pc, #396]	; (b7498 <loop+0xb8c>)
   b730a:	f003 f85c 	bl	ba3c6 <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b730e:	4b5a      	ldr	r3, [pc, #360]	; (b7478 <loop+0xb6c>)
   b7310:	781b      	ldrb	r3, [r3, #0]
   b7312:	2b00      	cmp	r3, #0
   b7314:	f43f ae03 	beq.w	b6f1e <loop+0x612>
   b7318:	f8d8 3000 	ldr.w	r3, [r8]
   b731c:	2b00      	cmp	r3, #0
   b731e:	dd04      	ble.n	b732a <loop+0xa1e>
              ELSE_pasado = true;
   b7320:	4b5e      	ldr	r3, [pc, #376]	; (b749c <loop+0xb90>)
              showBitmap(3,0,"ELSE");
   b7322:	495f      	ldr	r1, [pc, #380]	; (b74a0 <loop+0xb94>)
              ELSE_pasado = true;
   b7324:	2201      	movs	r2, #1
   b7326:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b7328:	e768      	b.n	b71fc <loop+0x8f0>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b732a:	f003 fa4d 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b732e:	495d      	ldr	r1, [pc, #372]	; (b74a4 <loop+0xb98>)
   b7330:	e615      	b.n	b6f5e <loop+0x652>
        if ( tagInfo[0] != -1 ) {
   b7332:	3601      	adds	r6, #1
   b7334:	f43f acf6 	beq.w	b6d24 <loop+0x418>
          Serial.println("Tarjeta inválida para este modo");
   b7338:	f003 fa46 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b733c:	495a      	ldr	r1, [pc, #360]	; (b74a8 <loop+0xb9c>)
   b733e:	f003 f842 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b7342:	495a      	ldr	r1, [pc, #360]	; (b74ac <loop+0xba0>)
   b7344:	a8c2      	add	r0, sp, #776	; 0x308
   b7346:	f002 ff70 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b734a:	aac2      	add	r2, sp, #776	; 0x308
   b734c:	2100      	movs	r1, #0
   b734e:	e52f      	b.n	b6db0 <loop+0x4a4>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7350:	2b01      	cmp	r3, #1
   b7352:	f47f acf9 	bne.w	b6d48 <loop+0x43c>
        valor = makeEvaluate(bloques[0]);
   b7356:	4c56      	ldr	r4, [pc, #344]	; (b74b0 <loop+0xba4>)
   b7358:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b735c:	f104 0110 	add.w	r1, r4, #16
   b7360:	4668      	mov	r0, sp
   b7362:	f003 fd7f 	bl	bae64 <memcpy>
   b7366:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b736a:	f7fe fa8b 	bl	b5884 <_Z12makeEvaluate6BLOQUE>
   b736e:	4c51      	ldr	r4, [pc, #324]	; (b74b4 <loop+0xba8>)
        ejecutarEvaluacion(valor, 0);
   b7370:	2100      	movs	r1, #0
        valor = makeEvaluate(bloques[0]);
   b7372:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 0);
   b7374:	f7fe fab0 	bl	b58d8 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b7378:	7823      	ldrb	r3, [r4, #0]
   b737a:	2b00      	cmp	r3, #0
   b737c:	d037      	beq.n	b73ee <loop+0xae2>
   b737e:	494e      	ldr	r1, [pc, #312]	; (b74b8 <loop+0xbac>)
   b7380:	484e      	ldr	r0, [pc, #312]	; (b74bc <loop+0xbb0>)
   b7382:	f003 fdc3 	bl	baf0c <strcpy>
        display.println(buf);
   b7386:	494d      	ldr	r1, [pc, #308]	; (b74bc <loop+0xbb0>)
   b7388:	484d      	ldr	r0, [pc, #308]	; (b74c0 <loop+0xbb4>)
   b738a:	f003 f81c 	bl	ba3c6 <_ZN5Print7printlnEPKc>
      if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b738e:	6835      	ldr	r5, [r6, #0]
   b7390:	2d01      	cmp	r5, #1
   b7392:	d11f      	bne.n	b73d4 <loop+0xac8>
   b7394:	4c46      	ldr	r4, [pc, #280]	; (b74b0 <loop+0xba4>)
   b7396:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b739a:	2b00      	cmp	r3, #0
   b739c:	dd2b      	ble.n	b73f6 <loop+0xaea>
        valor = makeEvaluate(bloques[1]);
   b739e:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b73a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b73a6:	4668      	mov	r0, sp
   b73a8:	f003 fd5c 	bl	bae64 <memcpy>
   b73ac:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b73b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b73b2:	f7fe fa67 	bl	b5884 <_Z12makeEvaluate6BLOQUE>
   b73b6:	4c3f      	ldr	r4, [pc, #252]	; (b74b4 <loop+0xba8>)
        ejecutarEvaluacion(valor, 1);
   b73b8:	4629      	mov	r1, r5
        valor = makeEvaluate(bloques[1]);
   b73ba:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 1);
   b73bc:	f7fe fa8c 	bl	b58d8 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b73c0:	7823      	ldrb	r3, [r4, #0]
   b73c2:	b1b3      	cbz	r3, b73f2 <loop+0xae6>
   b73c4:	493f      	ldr	r1, [pc, #252]	; (b74c4 <loop+0xbb8>)
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b73c6:	483d      	ldr	r0, [pc, #244]	; (b74bc <loop+0xbb0>)
   b73c8:	f003 fda0 	bl	baf0c <strcpy>
        display.print(buf);
   b73cc:	493b      	ldr	r1, [pc, #236]	; (b74bc <loop+0xbb0>)
   b73ce:	483c      	ldr	r0, [pc, #240]	; (b74c0 <loop+0xbb4>)
   b73d0:	f002 ffe6 	bl	ba3a0 <_ZN5Print5printEPKc>
      display.display();
   b73d4:	4c3a      	ldr	r4, [pc, #232]	; (b74c0 <loop+0xbb4>)
   b73d6:	4620      	mov	r0, r4
   b73d8:	f002 f98c 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b73dc:	4620      	mov	r0, r4
   b73de:	f001 ff21 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b73e2:	2300      	movs	r3, #0
   b73e4:	6123      	str	r3, [r4, #16]
   b73e6:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   b73ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b73ee:	4936      	ldr	r1, [pc, #216]	; (b74c8 <loop+0xbbc>)
   b73f0:	e7c6      	b.n	b7380 <loop+0xa74>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b73f2:	4936      	ldr	r1, [pc, #216]	; (b74cc <loop+0xbc0>)
   b73f4:	e7e7      	b.n	b73c6 <loop+0xaba>
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b73f6:	4936      	ldr	r1, [pc, #216]	; (b74d0 <loop+0xbc4>)
   b73f8:	e7e5      	b.n	b73c6 <loop+0xaba>
  } else if (MODE == 2) {
   b73fa:	2f02      	cmp	r7, #2
   b73fc:	f040 81a4 	bne.w	b7748 <loop+0xe3c>
    switch (tagInfo[0])
   b7400:	2e02      	cmp	r6, #2
   b7402:	d06f      	beq.n	b74e4 <loop+0xbd8>
   b7404:	2e06      	cmp	r6, #6
   b7406:	f040 818f 	bne.w	b7728 <loop+0xe1c>
      switch (tagInfo[1])
   b740a:	6860      	ldr	r0, [r4, #4]
   b740c:	2801      	cmp	r0, #1
   b740e:	d013      	beq.n	b7438 <loop+0xb2c>
   b7410:	2802      	cmp	r0, #2
   b7412:	d01f      	beq.n	b7454 <loop+0xb48>
   b7414:	b928      	cbnz	r0, b7422 <loop+0xb16>
          cambioModo(tagInfo[2]);
   b7416:	68a0      	ldr	r0, [r4, #8]
   b7418:	f7ff fa1e 	bl	b6858 <_Z10cambioModoi>
          resetFunc();
   b741c:	4b2d      	ldr	r3, [pc, #180]	; (b74d4 <loop+0xbc8>)
   b741e:	681b      	ldr	r3, [r3, #0]
   b7420:	4798      	blx	r3
    tagInfo[0] = -1;
   b7422:	f04f 33ff 	mov.w	r3, #4294967295
   b7426:	6023      	str	r3, [r4, #0]
    if (play) {
   b7428:	782b      	ldrb	r3, [r5, #0]
   b742a:	2b00      	cmp	r3, #0
   b742c:	d0db      	beq.n	b73e6 <loop+0xada>
      reproducir();
   b742e:	f7ff f9c5 	bl	b67bc <_Z10reproducirv>
      play = false;
   b7432:	2300      	movs	r3, #0
   b7434:	702b      	strb	r3, [r5, #0]
   b7436:	e7d6      	b.n	b73e6 <loop+0xada>
          showBitmap(3,0,"Ejecutando...");   
   b7438:	4927      	ldr	r1, [pc, #156]	; (b74d8 <loop+0xbcc>)
          play = true;
   b743a:	7028      	strb	r0, [r5, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b743c:	a8c2      	add	r0, sp, #776	; 0x308
   b743e:	f002 fef4 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7442:	aac2      	add	r2, sp, #776	; 0x308
   b7444:	2100      	movs	r1, #0
   b7446:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b7448:	f7fe ff78 	bl	b633c <_Z10showBitmapii6String>
   b744c:	a8c2      	add	r0, sp, #776	; 0x308
   b744e:	f002 fea1 	bl	ba194 <_ZN6StringD1Ev>
   b7452:	e7e6      	b.n	b7422 <loop+0xb16>
          if ( tagInfo[2] == 0 ) {
   b7454:	68a6      	ldr	r6, [r4, #8]
   b7456:	b91e      	cbnz	r6, b7460 <loop+0xb54>
            borradoPOP();
   b7458:	f7fe f872 	bl	b5540 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b745c:	491f      	ldr	r1, [pc, #124]	; (b74dc <loop+0xbd0>)
   b745e:	e7ed      	b.n	b743c <loop+0xb30>
          } else if ( tagInfo[2] == 1 ){
   b7460:	2e01      	cmp	r6, #1
   b7462:	d103      	bne.n	b746c <loop+0xb60>
            borradoALL(2);
   b7464:	f7fe f848 	bl	b54f8 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b7468:	491d      	ldr	r1, [pc, #116]	; (b74e0 <loop+0xbd4>)
   b746a:	e7e7      	b.n	b743c <loop+0xb30>
            borradoBLOQUE(2);
   b746c:	f7ff f90e 	bl	b668c <_Z13borradoBLOQUEi>
   b7470:	e7d7      	b.n	b7422 <loop+0xb16>
   b7472:	bf00      	nop
   b7474:	000bb92b 	.word	0x000bb92b
   b7478:	2003cd1d 	.word	0x2003cd1d
   b747c:	000bb87b 	.word	0x000bb87b
   b7480:	000bb93c 	.word	0x000bb93c
   b7484:	000bb940 	.word	0x000bb940
   b7488:	000bb972 	.word	0x000bb972
   b748c:	2003cd2c 	.word	0x2003cd2c
   b7490:	000bb981 	.word	0x000bb981
   b7494:	000bb986 	.word	0x000bb986
   b7498:	000bb9a5 	.word	0x000bb9a5
   b749c:	2003cd1c 	.word	0x2003cd1c
   b74a0:	000bb9b4 	.word	0x000bb9b4
   b74a4:	000bb9b9 	.word	0x000bb9b9
   b74a8:	000bba4a 	.word	0x000bba4a
   b74ac:	000bb25e 	.word	0x000bb25e
   b74b0:	2003cd30 	.word	0x2003cd30
   b74b4:	2003e6b8 	.word	0x2003e6b8
   b74b8:	000bba6b 	.word	0x000bba6b
   b74bc:	2003d309 	.word	0x2003d309
   b74c0:	2003d354 	.word	0x2003d354
   b74c4:	000bba9b 	.word	0x000bba9b
   b74c8:	000bba7a 	.word	0x000bba7a
   b74cc:	000bbaaa 	.word	0x000bbaaa
   b74d0:	000bbaba 	.word	0x000bbaba
   b74d4:	2003da50 	.word	0x2003da50
   b74d8:	000bbad4 	.word	0x000bbad4
   b74dc:	000bbae2 	.word	0x000bbae2
   b74e0:	000bb7a7 	.word	0x000bb7a7
      switch (tagInfo[1])
   b74e4:	6863      	ldr	r3, [r4, #4]
   b74e6:	2b01      	cmp	r3, #1
   b74e8:	d078      	beq.n	b75dc <loop+0xcd0>
   b74ea:	2b02      	cmp	r3, #2
   b74ec:	f000 80bc 	beq.w	b7668 <loop+0xd5c>
   b74f0:	2b00      	cmp	r3, #0
   b74f2:	d196      	bne.n	b7422 <loop+0xb16>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b74f4:	68a1      	ldr	r1, [r4, #8]
   b74f6:	4eae      	ldr	r6, [pc, #696]	; (b77b0 <loop+0xea4>)
   b74f8:	4fae      	ldr	r7, [pc, #696]	; (b77b4 <loop+0xea8>)
   b74fa:	a8ba      	add	r0, sp, #744	; 0x2e8
   b74fc:	f7fe f890 	bl	b5620 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7500:	a9ba      	add	r1, sp, #744	; 0x2e8
   b7502:	a8c2      	add	r0, sp, #776	; 0x308
   b7504:	f002 feb4 	bl	ba270 <_ZN6StringC1ERKS_>
   b7508:	68e1      	ldr	r1, [r4, #12]
   b750a:	a8be      	add	r0, sp, #760	; 0x2f8
   b750c:	f7fe f8ba 	bl	b5684 <_Z19decodificarTIPO_msgi>
   b7510:	a9be      	add	r1, sp, #760	; 0x2f8
   b7512:	a8c2      	add	r0, sp, #776	; 0x308
   b7514:	f002 fef3 	bl	ba2fe <_ZplRK15StringSumHelperRK6String>
   b7518:	49a7      	ldr	r1, [pc, #668]	; (b77b8 <loop+0xeac>)
   b751a:	f002 fefc 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b751e:	4601      	mov	r1, r0
   b7520:	6830      	ldr	r0, [r6, #0]
   b7522:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b7526:	f002 fe94 	bl	ba252 <_ZN6StringaSERKS_>
   b752a:	a8be      	add	r0, sp, #760	; 0x2f8
   b752c:	f002 fe32 	bl	ba194 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7530:	a8c2      	add	r0, sp, #776	; 0x308
   b7532:	f002 fe2f 	bl	ba194 <_ZN6StringD1Ev>
   b7536:	a8ba      	add	r0, sp, #744	; 0x2e8
   b7538:	f002 fe2c 	bl	ba194 <_ZN6StringD1Ev>
        if (posicion<23) {
   b753c:	6833      	ldr	r3, [r6, #0]
   b753e:	2b16      	cmp	r3, #22
   b7540:	dc45      	bgt.n	b75ce <loop+0xcc2>
	const char * c_str() const { return buffer; }
   b7542:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7544:	489d      	ldr	r0, [pc, #628]	; (b77bc <loop+0xeb0>)
   b7546:	58fa      	ldr	r2, [r7, r3]
   b7548:	2140      	movs	r1, #64	; 0x40
   b754a:	f002 fcad 	bl	b9ea8 <snprintf>
          display.print(buf);
   b754e:	499b      	ldr	r1, [pc, #620]	; (b77bc <loop+0xeb0>)
   b7550:	489b      	ldr	r0, [pc, #620]	; (b77c0 <loop+0xeb4>)
   b7552:	f002 ff25 	bl	ba3a0 <_ZN5Print5printEPKc>
          display.display();
   b7556:	489a      	ldr	r0, [pc, #616]	; (b77c0 <loop+0xeb4>)
   b7558:	f002 f8cc 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b755c:	f003 f934 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7560:	68a1      	ldr	r1, [r4, #8]
   b7562:	4607      	mov	r7, r0
   b7564:	a8ba      	add	r0, sp, #744	; 0x2e8
   b7566:	f7fe f85b 	bl	b5620 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b756a:	a9ba      	add	r1, sp, #744	; 0x2e8
   b756c:	a8c2      	add	r0, sp, #776	; 0x308
   b756e:	f002 fe7f 	bl	ba270 <_ZN6StringC1ERKS_>
   b7572:	68e1      	ldr	r1, [r4, #12]
   b7574:	a8be      	add	r0, sp, #760	; 0x2f8
   b7576:	f7fe f885 	bl	b5684 <_Z19decodificarTIPO_msgi>
   b757a:	a9be      	add	r1, sp, #760	; 0x2f8
   b757c:	a8c2      	add	r0, sp, #776	; 0x308
   b757e:	f002 febe 	bl	ba2fe <_ZplRK15StringSumHelperRK6String>
   b7582:	6801      	ldr	r1, [r0, #0]
   b7584:	4638      	mov	r0, r7
   b7586:	f7fd f9f1 	bl	b496c <_ZN5Print8printlnfEPKcz>
   b758a:	a8be      	add	r0, sp, #760	; 0x2f8
   b758c:	f002 fe02 	bl	ba194 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7590:	a8c2      	add	r0, sp, #776	; 0x308
   b7592:	f002 fdff 	bl	ba194 <_ZN6StringD1Ev>
   b7596:	a8ba      	add	r0, sp, #744	; 0x2e8
   b7598:	f002 fdfc 	bl	ba194 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b759c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b75a0:	f7fe f88a 	bl	b56b8 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b75a4:	6833      	ldr	r3, [r6, #0]
   b75a6:	4a87      	ldr	r2, [pc, #540]	; (b77c4 <loop+0xeb8>)
   b75a8:	68a1      	ldr	r1, [r4, #8]
   b75aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b75ae:	4a86      	ldr	r2, [pc, #536]	; (b77c8 <loop+0xebc>)
   b75b0:	68e1      	ldr	r1, [r4, #12]
   b75b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b75b6:	3301      	adds	r3, #1
   b75b8:	6033      	str	r3, [r6, #0]
        if (bucle) {
   b75ba:	4b84      	ldr	r3, [pc, #528]	; (b77cc <loop+0xec0>)
   b75bc:	781b      	ldrb	r3, [r3, #0]
   b75be:	2b00      	cmp	r3, #0
   b75c0:	f43f af2f 	beq.w	b7422 <loop+0xb16>
          tam_bucle++;
   b75c4:	4a82      	ldr	r2, [pc, #520]	; (b77d0 <loop+0xec4>)
   b75c6:	6813      	ldr	r3, [r2, #0]
   b75c8:	3301      	adds	r3, #1
   b75ca:	6013      	str	r3, [r2, #0]
   b75cc:	e729      	b.n	b7422 <loop+0xb16>
        } else if (posicion==23){
   b75ce:	2b17      	cmp	r3, #23
   b75d0:	d1c4      	bne.n	b755c <loop+0xc50>
          snprintf(buf, sizeof(buf), "...");
   b75d2:	4980      	ldr	r1, [pc, #512]	; (b77d4 <loop+0xec8>)
   b75d4:	4879      	ldr	r0, [pc, #484]	; (b77bc <loop+0xeb0>)
   b75d6:	f003 fc99 	bl	baf0c <strcpy>
   b75da:	e7b8      	b.n	b754e <loop+0xc42>
        if (!bucle) {
   b75dc:	4f7b      	ldr	r7, [pc, #492]	; (b77cc <loop+0xec0>)
   b75de:	783b      	ldrb	r3, [r7, #0]
   b75e0:	2b00      	cmp	r3, #0
   b75e2:	d134      	bne.n	b764e <loop+0xd42>
          secuencia[posicion] = "Loop - ";
   b75e4:	4e72      	ldr	r6, [pc, #456]	; (b77b0 <loop+0xea4>)
   b75e6:	f8df 81cc 	ldr.w	r8, [pc, #460]	; b77b4 <loop+0xea8>
          Serial.println("Loop");
   b75ea:	f003 f8ed 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b75ee:	497a      	ldr	r1, [pc, #488]	; (b77d8 <loop+0xecc>)
   b75f0:	f002 fee9 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b75f4:	6830      	ldr	r0, [r6, #0]
   b75f6:	4979      	ldr	r1, [pc, #484]	; (b77dc <loop+0xed0>)
   b75f8:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b75fc:	f002 fe43 	bl	ba286 <_ZN6StringaSEPKc>
          if (posicion<23) {
   b7600:	6833      	ldr	r3, [r6, #0]
   b7602:	2b16      	cmp	r3, #22
   b7604:	dc1c      	bgt.n	b7640 <loop+0xd34>
	const char * c_str() const { return buffer; }
   b7606:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7608:	486c      	ldr	r0, [pc, #432]	; (b77bc <loop+0xeb0>)
   b760a:	f858 2003 	ldr.w	r2, [r8, r3]
   b760e:	2140      	movs	r1, #64	; 0x40
   b7610:	f002 fc4a 	bl	b9ea8 <snprintf>
            display.print(buf);
   b7614:	4969      	ldr	r1, [pc, #420]	; (b77bc <loop+0xeb0>)
   b7616:	486a      	ldr	r0, [pc, #424]	; (b77c0 <loop+0xeb4>)
   b7618:	f002 fec2 	bl	ba3a0 <_ZN5Print5printEPKc>
            display.display();
   b761c:	4868      	ldr	r0, [pc, #416]	; (b77c0 <loop+0xeb4>)
   b761e:	f002 f869 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b7622:	6833      	ldr	r3, [r6, #0]
   b7624:	4a67      	ldr	r2, [pc, #412]	; (b77c4 <loop+0xeb8>)
   b7626:	f04f 31ff 	mov.w	r1, #4294967295
   b762a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b762e:	4a66      	ldr	r2, [pc, #408]	; (b77c8 <loop+0xebc>)
   b7630:	2100      	movs	r1, #0
   b7632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b7636:	3301      	adds	r3, #1
   b7638:	6033      	str	r3, [r6, #0]
          bucle = true;
   b763a:	2301      	movs	r3, #1
   b763c:	703b      	strb	r3, [r7, #0]
   b763e:	e6f0      	b.n	b7422 <loop+0xb16>
          } else if (posicion==23){
   b7640:	2b17      	cmp	r3, #23
   b7642:	d1ee      	bne.n	b7622 <loop+0xd16>
            snprintf(buf, sizeof(buf), "...");
   b7644:	4963      	ldr	r1, [pc, #396]	; (b77d4 <loop+0xec8>)
   b7646:	485d      	ldr	r0, [pc, #372]	; (b77bc <loop+0xeb0>)
   b7648:	f003 fc60 	bl	baf0c <strcpy>
   b764c:	e7e2      	b.n	b7614 <loop+0xd08>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b764e:	f003 f8bb 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7652:	4963      	ldr	r1, [pc, #396]	; (b77e0 <loop+0xed4>)
          Serial.println("Loop sin comenzar o sin contenido");
   b7654:	f002 feb7 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b7658:	4962      	ldr	r1, [pc, #392]	; (b77e4 <loop+0xed8>)
   b765a:	a8c2      	add	r0, sp, #776	; 0x308
   b765c:	f002 fde5 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7660:	2102      	movs	r1, #2
   b7662:	aac2      	add	r2, sp, #776	; 0x308
   b7664:	4608      	mov	r0, r1
   b7666:	e6ef      	b.n	b7448 <loop+0xb3c>
        if (bucle && tam_bucle>0) {
   b7668:	4f58      	ldr	r7, [pc, #352]	; (b77cc <loop+0xec0>)
   b766a:	783b      	ldrb	r3, [r7, #0]
   b766c:	2b00      	cmp	r3, #0
   b766e:	d057      	beq.n	b7720 <loop+0xe14>
   b7670:	f8df 815c 	ldr.w	r8, [pc, #348]	; b77d0 <loop+0xec4>
   b7674:	f8d8 3000 	ldr.w	r3, [r8]
   b7678:	2b00      	cmp	r3, #0
   b767a:	dd51      	ble.n	b7720 <loop+0xe14>
          Serial.println("END Loop");
   b767c:	f003 f8a4 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7680:	4959      	ldr	r1, [pc, #356]	; (b77e8 <loop+0xedc>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b7682:	4e4b      	ldr	r6, [pc, #300]	; (b77b0 <loop+0xea4>)
   b7684:	f8df 912c 	ldr.w	r9, [pc, #300]	; b77b4 <loop+0xea8>
          Serial.println("END Loop");
   b7688:	f002 fe9d 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b768c:	68a1      	ldr	r1, [r4, #8]
   b768e:	220a      	movs	r2, #10
   b7690:	3102      	adds	r1, #2
   b7692:	a8be      	add	r0, sp, #760	; 0x2f8
   b7694:	f002 fe09 	bl	ba2aa <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b7698:	a9be      	add	r1, sp, #760	; 0x2f8
   b769a:	a8c2      	add	r0, sp, #776	; 0x308
   b769c:	f002 fde8 	bl	ba270 <_ZN6StringC1ERKS_>
   b76a0:	4952      	ldr	r1, [pc, #328]	; (b77ec <loop+0xee0>)
   b76a2:	a8c2      	add	r0, sp, #776	; 0x308
   b76a4:	f002 fe37 	bl	ba316 <_ZplRK15StringSumHelperPKc>
   b76a8:	4601      	mov	r1, r0
   b76aa:	6830      	ldr	r0, [r6, #0]
   b76ac:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b76b0:	f002 fdcf 	bl	ba252 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b76b4:	a8c2      	add	r0, sp, #776	; 0x308
   b76b6:	f002 fd6d 	bl	ba194 <_ZN6StringD1Ev>
   b76ba:	a8be      	add	r0, sp, #760	; 0x2f8
   b76bc:	f002 fd6a 	bl	ba194 <_ZN6StringD1Ev>
          if (posicion<23) {
   b76c0:	6833      	ldr	r3, [r6, #0]
   b76c2:	2b16      	cmp	r3, #22
   b76c4:	dc25      	bgt.n	b7712 <loop+0xe06>
	const char * c_str() const { return buffer; }
   b76c6:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b76c8:	483c      	ldr	r0, [pc, #240]	; (b77bc <loop+0xeb0>)
   b76ca:	f859 2003 	ldr.w	r2, [r9, r3]
   b76ce:	2140      	movs	r1, #64	; 0x40
   b76d0:	f002 fbea 	bl	b9ea8 <snprintf>
            display.print(buf);
   b76d4:	4939      	ldr	r1, [pc, #228]	; (b77bc <loop+0xeb0>)
   b76d6:	483a      	ldr	r0, [pc, #232]	; (b77c0 <loop+0xeb4>)
   b76d8:	f002 fe62 	bl	ba3a0 <_ZN5Print5printEPKc>
            display.display();
   b76dc:	4838      	ldr	r0, [pc, #224]	; (b77c0 <loop+0xeb4>)
   b76de:	f002 f809 	bl	b96f4 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b76e2:	6833      	ldr	r3, [r6, #0]
   b76e4:	4a37      	ldr	r2, [pc, #220]	; (b77c4 <loop+0xeb8>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b76e6:	4838      	ldr	r0, [pc, #224]	; (b77c8 <loop+0xebc>)
          notas[posicion] = -2;
   b76e8:	f06f 0101 	mvn.w	r1, #1
   b76ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b76f0:	f8d8 2000 	ldr.w	r2, [r8]
   b76f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b76f8:	68a1      	ldr	r1, [r4, #8]
   b76fa:	3201      	adds	r2, #1
   b76fc:	1a9a      	subs	r2, r3, r2
          posicion++;
   b76fe:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7700:	3102      	adds	r1, #2
          posicion++;
   b7702:	6033      	str	r3, [r6, #0]
          bucle = false;
   b7704:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7706:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b770a:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b770c:	f8c8 3000 	str.w	r3, [r8]
   b7710:	e687      	b.n	b7422 <loop+0xb16>
          } else if (posicion==23){
   b7712:	2b17      	cmp	r3, #23
   b7714:	d1e5      	bne.n	b76e2 <loop+0xdd6>
            snprintf(buf, sizeof(buf), "...");
   b7716:	492f      	ldr	r1, [pc, #188]	; (b77d4 <loop+0xec8>)
   b7718:	4828      	ldr	r0, [pc, #160]	; (b77bc <loop+0xeb0>)
   b771a:	f003 fbf7 	bl	baf0c <strcpy>
   b771e:	e7d9      	b.n	b76d4 <loop+0xdc8>
          Serial.println("Loop sin comenzar o sin contenido");
   b7720:	f003 f852 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7724:	4932      	ldr	r1, [pc, #200]	; (b77f0 <loop+0xee4>)
   b7726:	e795      	b.n	b7654 <loop+0xd48>
      if ( tagInfo[0] != -1 ) {
   b7728:	3601      	adds	r6, #1
   b772a:	f43f ae7a 	beq.w	b7422 <loop+0xb16>
        Serial.println("Tarjeta inválida para este modo");
   b772e:	f003 f84b 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b7732:	4930      	ldr	r1, [pc, #192]	; (b77f4 <loop+0xee8>)
   b7734:	f002 fe47 	bl	ba3c6 <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b7738:	492a      	ldr	r1, [pc, #168]	; (b77e4 <loop+0xed8>)
   b773a:	a8c2      	add	r0, sp, #776	; 0x308
   b773c:	f002 fd75 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7740:	aac2      	add	r2, sp, #776	; 0x308
   b7742:	2100      	movs	r1, #0
   b7744:	4638      	mov	r0, r7
   b7746:	e67f      	b.n	b7448 <loop+0xb3c>
    switch (tagInfo[0])
   b7748:	2e03      	cmp	r6, #3
   b774a:	4f2b      	ldr	r7, [pc, #172]	; (b77f8 <loop+0xeec>)
   b774c:	f000 8083 	beq.w	b7856 <loop+0xf4a>
   b7750:	2e06      	cmp	r6, #6
   b7752:	f040 80b4 	bne.w	b78be <loop+0xfb2>
   b7756:	f7fd fd35 	bl	b51c4 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b775a:	6866      	ldr	r6, [r4, #4]
   b775c:	2e01      	cmp	r6, #1
   b775e:	d025      	beq.n	b77ac <loop+0xea0>
   b7760:	2e02      	cmp	r6, #2
   b7762:	d053      	beq.n	b780c <loop+0xf00>
   b7764:	b92e      	cbnz	r6, b7772 <loop+0xe66>
            cambioModo(tagInfo[2]);
   b7766:	68a0      	ldr	r0, [r4, #8]
   b7768:	f7ff f876 	bl	b6858 <_Z10cambioModoi>
            resetFunc();
   b776c:	4b23      	ldr	r3, [pc, #140]	; (b77fc <loop+0xef0>)
   b776e:	681b      	ldr	r3, [r3, #0]
   b7770:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b7772:	6823      	ldr	r3, [r4, #0]
   b7774:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b7776:	bf1c      	itt	ne
   b7778:	f04f 33ff 	movne.w	r3, #4294967295
   b777c:	6023      	strne	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b777e:	683c      	ldr	r4, [r7, #0]
   b7780:	2c00      	cmp	r4, #0
   b7782:	f340 80a7 	ble.w	b78d4 <loop+0xfc8>
   b7786:	782b      	ldrb	r3, [r5, #0]
   b7788:	2b00      	cmp	r3, #0
   b778a:	f43f ae2c 	beq.w	b73e6 <loop+0xada>
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b778e:	4b1c      	ldr	r3, [pc, #112]	; (b7800 <loop+0xef4>)
   b7790:	6919      	ldr	r1, [r3, #16]
   b7792:	6858      	ldr	r0, [r3, #4]
   b7794:	f7fd fc32 	bl	b4ffc <_Z13leerSensorExpii>
   b7798:	4b1a      	ldr	r3, [pc, #104]	; (b7804 <loop+0xef8>)
          snprintf(buf, sizeof(buf), "%d", val);
   b779a:	4a1b      	ldr	r2, [pc, #108]	; (b7808 <loop+0xefc>)
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b779c:	6018      	str	r0, [r3, #0]
          snprintf(buf, sizeof(buf), "%d", val);
   b779e:	2140      	movs	r1, #64	; 0x40
   b77a0:	4603      	mov	r3, r0
   b77a2:	4806      	ldr	r0, [pc, #24]	; (b77bc <loop+0xeb0>)
   b77a4:	f002 fb80 	bl	b9ea8 <snprintf>
   b77a8:	f7ff b9bd 	b.w	b6b26 <loop+0x21a>
            play = true;
   b77ac:	702e      	strb	r6, [r5, #0]
            break;
   b77ae:	e7e0      	b.n	b7772 <loop+0xe66>
   b77b0:	2003da3c 	.word	0x2003da3c
   b77b4:	2003da54 	.word	0x2003da54
   b77b8:	000bbb42 	.word	0x000bbb42
   b77bc:	2003d309 	.word	0x2003d309
   b77c0:	2003d354 	.word	0x2003d354
   b77c4:	2003d70c 	.word	0x2003d70c
   b77c8:	2003d3c4 	.word	0x2003d3c4
   b77cc:	2003d308 	.word	0x2003d308
   b77d0:	2003dc3c 	.word	0x2003dc3c
   b77d4:	000bb74d 	.word	0x000bb74d
   b77d8:	000bbb3a 	.word	0x000bbb3a
   b77dc:	000bbaf9 	.word	0x000bbaf9
   b77e0:	000bbb01 	.word	0x000bbb01
   b77e4:	000bb25e 	.word	0x000bb25e
   b77e8:	000bbb36 	.word	0x000bbb36
   b77ec:	000bbb3f 	.word	0x000bbb3f
   b77f0:	000bbb46 	.word	0x000bbb46
   b77f4:	000bba4a 	.word	0x000bba4a
   b77f8:	2003da34 	.word	0x2003da34
   b77fc:	2003da50 	.word	0x2003da50
   b7800:	2003cd30 	.word	0x2003cd30
   b7804:	2003e6b4 	.word	0x2003e6b4
   b7808:	000bba47 	.word	0x000bba47
            if ( tagInfo[2] == 1 ) {
   b780c:	68a3      	ldr	r3, [r4, #8]
   b780e:	2b01      	cmp	r3, #1
   b7810:	d10f      	bne.n	b7832 <loop+0xf26>
              borradoALL(0);
   b7812:	2000      	movs	r0, #0
   b7814:	f7fd fe70 	bl	b54f8 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b7818:	4938      	ldr	r1, [pc, #224]	; (b78fc <loop+0xff0>)
   b781a:	a8c2      	add	r0, sp, #776	; 0x308
   b781c:	f002 fd05 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b7820:	aac2      	add	r2, sp, #776	; 0x308
   b7822:	2100      	movs	r1, #0
   b7824:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b7826:	f7fe fd89 	bl	b633c <_Z10showBitmapii6String>
   b782a:	a8c2      	add	r0, sp, #776	; 0x308
   b782c:	f002 fcb2 	bl	ba194 <_ZN6StringD1Ev>
   b7830:	e79f      	b.n	b7772 <loop+0xe66>
              showBitmap(2,1,"");
   b7832:	4933      	ldr	r1, [pc, #204]	; (b7900 <loop+0xff4>)
   b7834:	a8c2      	add	r0, sp, #776	; 0x308
   b7836:	f002 fcf8 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b783a:	aac2      	add	r2, sp, #776	; 0x308
   b783c:	2101      	movs	r1, #1
   b783e:	4630      	mov	r0, r6
   b7840:	f7fe fd7c 	bl	b633c <_Z10showBitmapii6String>
   b7844:	a8c2      	add	r0, sp, #776	; 0x308
   b7846:	f002 fca5 	bl	ba194 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b784a:	f002 ffbd 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b784e:	492d      	ldr	r1, [pc, #180]	; (b7904 <loop+0xff8>)
   b7850:	f002 fdb9 	bl	ba3c6 <_ZN5Print7printlnEPKc>
   b7854:	e78d      	b.n	b7772 <loop+0xe66>
        id = tagInfo[3];
   b7856:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b7910 <loop+0x1004>
   b785a:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b785c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b7914 <loop+0x1008>
        if (tagInfo[1] == 0) {
   b7860:	f8d4 8004 	ldr.w	r8, [r4, #4]
        id = tagInfo[3];
   b7864:	f8ca 3000 	str.w	r3, [sl]
        tipo = tagInfo[2];
   b7868:	68a3      	ldr	r3, [r4, #8]
   b786a:	f8c9 3000 	str.w	r3, [r9]
        if (tagInfo[1] == 0) {
   b786e:	f1b8 0f00 	cmp.w	r8, #0
   b7872:	f47f af7e 	bne.w	b7772 <loop+0xe66>
          Serial.println("Sensor detectado");
   b7876:	f002 ffa7 	bl	ba7c8 <_Z16_fetch_usbserialv>
   b787a:	4923      	ldr	r1, [pc, #140]	; (b7908 <loop+0xffc>)
   b787c:	f002 fda3 	bl	ba3c6 <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b7880:	4a22      	ldr	r2, [pc, #136]	; (b790c <loop+0x1000>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7882:	f8d9 3000 	ldr.w	r3, [r9]
          sensor.id = id;
   b7886:	f8da 1000 	ldr.w	r1, [sl]
          bloques[0].sensores[0] = sensor;
   b788a:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b788c:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b788e:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b7890:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7894:	bf18      	it	ne
   b7896:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b7898:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b789a:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b789c:	683a      	ldr	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b789e:	4918      	ldr	r1, [pc, #96]	; (b7900 <loop+0xff4>)
          numSensoresBloque++;
   b78a0:	3201      	adds	r2, #1
   b78a2:	603a      	str	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b78a4:	a8c2      	add	r0, sp, #776	; 0x308
          if (sensor.puerto == 0) {
   b78a6:	b92b      	cbnz	r3, b78b4 <loop+0xfa8>
            showBitmap(1,3,""); //A0
   b78a8:	f002 fcbf 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b78ac:	aac2      	add	r2, sp, #776	; 0x308
   b78ae:	4631      	mov	r1, r6
            showBitmap(1,0,""); //D2
   b78b0:	2001      	movs	r0, #1
   b78b2:	e7b8      	b.n	b7826 <loop+0xf1a>
   b78b4:	f002 fcb9 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b78b8:	aac2      	add	r2, sp, #776	; 0x308
   b78ba:	4641      	mov	r1, r8
   b78bc:	e7f8      	b.n	b78b0 <loop+0xfa4>
        if ( tagInfo[0] != -1 ) {
   b78be:	3601      	adds	r6, #1
   b78c0:	f43f af57 	beq.w	b7772 <loop+0xe66>
          showBitmap(2,0,"");
   b78c4:	490e      	ldr	r1, [pc, #56]	; (b7900 <loop+0xff4>)
   b78c6:	a8c2      	add	r0, sp, #776	; 0x308
   b78c8:	f002 fcaf 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b78cc:	aac2      	add	r2, sp, #776	; 0x308
   b78ce:	2100      	movs	r1, #0
   b78d0:	2002      	movs	r0, #2
   b78d2:	e7a8      	b.n	b7826 <loop+0xf1a>
        }  else if (numSensoresBloque==0 && play == true) {
   b78d4:	f47f ad87 	bne.w	b73e6 <loop+0xada>
   b78d8:	782b      	ldrb	r3, [r5, #0]
   b78da:	2b00      	cmp	r3, #0
   b78dc:	f43f ad83 	beq.w	b73e6 <loop+0xada>
              showBitmap(2,4,"");
   b78e0:	4907      	ldr	r1, [pc, #28]	; (b7900 <loop+0xff4>)
   b78e2:	a8c2      	add	r0, sp, #776	; 0x308
   b78e4:	f002 fca1 	bl	ba22a <_ZN6StringC1EPK19__FlashStringHelper>
   b78e8:	aac2      	add	r2, sp, #776	; 0x308
   b78ea:	2104      	movs	r1, #4
   b78ec:	2002      	movs	r0, #2
   b78ee:	f7fe fd25 	bl	b633c <_Z10showBitmapii6String>
   b78f2:	a8c2      	add	r0, sp, #776	; 0x308
   b78f4:	f002 fc4e 	bl	ba194 <_ZN6StringD1Ev>
              play=false;
   b78f8:	702c      	strb	r4, [r5, #0]
   b78fa:	e574      	b.n	b73e6 <loop+0xada>
   b78fc:	000bb7a7 	.word	0x000bb7a7
   b7900:	000bb25e 	.word	0x000bb25e
   b7904:	000bb7c2 	.word	0x000bb7c2
   b7908:	000bb7e6 	.word	0x000bb7e6
   b790c:	2003cd30 	.word	0x2003cd30
   b7910:	2003d6e8 	.word	0x2003d6e8
   b7914:	2003e6b0 	.word	0x2003e6b0

000b7918 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7918:	4770      	bx	lr

000b791a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b791a:	b510      	push	{r4, lr}
  }
   b791c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b791e:	4604      	mov	r4, r0
  }
   b7920:	f7fc ffe1 	bl	b48e6 <_ZdlPvj>
   b7924:	4620      	mov	r0, r4
   b7926:	bd10      	pop	{r4, pc}

000b7928 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b7928:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b792a:	4604      	mov	r4, r0
   b792c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b792e:	7922      	ldrb	r2, [r4, #4]
   b7930:	68a3      	ldr	r3, [r4, #8]
   b7932:	b132      	cbz	r2, b7942 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7934:	b9a3      	cbnz	r3, b7960 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b7936:	490b      	ldr	r1, [pc, #44]	; (b7964 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b7938:	b002      	add	sp, #8
   b793a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b793e:	f002 bd2f 	b.w	ba3a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7942:	4a09      	ldr	r2, [pc, #36]	; (b7968 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7944:	7b26      	ldrb	r6, [r4, #12]
   b7946:	4d09      	ldr	r5, [pc, #36]	; (b796c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b7948:	4909      	ldr	r1, [pc, #36]	; (b7970 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b794a:	7b64      	ldrb	r4, [r4, #13]
   b794c:	2e01      	cmp	r6, #1
   b794e:	bf18      	it	ne
   b7950:	4629      	movne	r1, r5
   b7952:	e9cd 1400 	strd	r1, r4, [sp]
   b7956:	4907      	ldr	r1, [pc, #28]	; (b7974 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b7958:	f7fc fffa 	bl	b4950 <_ZN5Print6printfEPKcz>
  }
   b795c:	b002      	add	sp, #8
   b795e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7960:	4a05      	ldr	r2, [pc, #20]	; (b7978 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7962:	e7ef      	b.n	b7944 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7964:	000bbf85 	.word	0x000bbf85
   b7968:	000bb25e 	.word	0x000bb25e
   b796c:	000bbf81 	.word	0x000bbf81
   b7970:	000bbf7d 	.word	0x000bbf7d
   b7974:	000bbf9b 	.word	0x000bbf9b
   b7978:	000bbf74 	.word	0x000bbf74

000b797c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7980:	b085      	sub	sp, #20
   b7982:	461f      	mov	r7, r3
   b7984:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7988:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b798c:	eba8 0902 	sub.w	r9, r8, r2
   b7990:	eba7 0a01 	sub.w	sl, r7, r1
   b7994:	f1b9 0f00 	cmp.w	r9, #0
   b7998:	bfb8      	it	lt
   b799a:	f1c9 0900 	rsblt	r9, r9, #0
   b799e:	f1ba 0f00 	cmp.w	sl, #0
   b79a2:	bfb8      	it	lt
   b79a4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b79a8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b79aa:	4683      	mov	fp, r0
   b79ac:	460c      	mov	r4, r1
   b79ae:	4615      	mov	r5, r2
    if (steep) {
   b79b0:	dd04      	ble.n	b79bc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b79b2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b79b4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b79b6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b79b8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b79ba:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b79bc:	42bc      	cmp	r4, r7
   b79be:	dd05      	ble.n	b79cc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b79c0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b79c2:	4645      	mov	r5, r8
   b79c4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b79c6:	4622      	mov	r2, r4
   b79c8:	463c      	mov	r4, r7
   b79ca:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b79cc:	1b3e      	subs	r6, r7, r4
   b79ce:	b2b2      	uxth	r2, r6
   b79d0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b79d2:	eba8 0205 	sub.w	r2, r8, r5
   b79d6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b79da:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b79de:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b79e2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b79e6:	4545      	cmp	r5, r8
   b79e8:	bfb4      	ite	lt
   b79ea:	2201      	movlt	r2, #1
   b79ec:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b79f0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b79f2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b79f4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b79f6:	42bc      	cmp	r4, r7
   b79f8:	dc1c      	bgt.n	b7a34 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b79fa:	f8db 2000 	ldr.w	r2, [fp]
   b79fe:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7a00:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7a02:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7a06:	bfc7      	ittee	gt
   b7a08:	4629      	movgt	r1, r5
   b7a0a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7a0c:	462a      	movle	r2, r5
   b7a0e:	4621      	movle	r1, r4
   b7a10:	4658      	mov	r0, fp
   b7a12:	47c0      	blx	r8
        }
        err -= dy;
   b7a14:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7a16:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7a18:	1ab6      	subs	r6, r6, r2
   b7a1a:	b2b1      	uxth	r1, r6
   b7a1c:	b236      	sxth	r6, r6
        if (err < 0) {
   b7a1e:	2e00      	cmp	r6, #0
   b7a20:	da05      	bge.n	b7a2e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7a22:	9a02      	ldr	r2, [sp, #8]
   b7a24:	4415      	add	r5, r2
            err += dx;
   b7a26:	9a00      	ldr	r2, [sp, #0]
   b7a28:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7a2a:	b22d      	sxth	r5, r5
            err += dx;
   b7a2c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7a2e:	3401      	adds	r4, #1
   b7a30:	b224      	sxth	r4, r4
   b7a32:	e7e0      	b.n	b79f6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7a34:	b005      	add	sp, #20
   b7a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7a3a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7a3a:	4770      	bx	lr

000b7a3c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7a3c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7a3e:	6804      	ldr	r4, [r0, #0]
   b7a40:	6924      	ldr	r4, [r4, #16]
   b7a42:	46a4      	mov	ip, r4
}
   b7a44:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7a48:	4760      	bx	ip

000b7a4a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7a4a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7a4c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7a4e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7a52:	9502      	str	r5, [sp, #8]
   b7a54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7a56:	46a4      	mov	ip, r4
}
   b7a58:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7a5a:	4760      	bx	ip

000b7a5c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7a5c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7a5e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7a60:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7a64:	9502      	str	r5, [sp, #8]
   b7a66:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7a68:	46a4      	mov	ip, r4
}
   b7a6a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7a6c:	4760      	bx	ip

000b7a6e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7a6e:	b470      	push	{r4, r5, r6}
   b7a70:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7a74:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b7a78:	6804      	ldr	r4, [r0, #0]
   b7a7a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b7a7e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b7a80:	46a4      	mov	ip, r4
}
   b7a82:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b7a84:	4760      	bx	ip

000b7a86 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7a86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7a8a:	461c      	mov	r4, r3
    startWrite();
   b7a8c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b7a8e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7a92:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b7a94:	4605      	mov	r5, r0
   b7a96:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b7a98:	3c01      	subs	r4, #1
   b7a9a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b7a9c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b7a9e:	b224      	sxth	r4, r4
    startWrite();
   b7aa0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b7aa2:	682b      	ldr	r3, [r5, #0]
   b7aa4:	f8cd 8004 	str.w	r8, [sp, #4]
   b7aa8:	9400      	str	r4, [sp, #0]
   b7aaa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b7aac:	4628      	mov	r0, r5
   b7aae:	463b      	mov	r3, r7
   b7ab0:	4632      	mov	r2, r6
   b7ab2:	4639      	mov	r1, r7
   b7ab4:	47a0      	blx	r4
    endWrite();
   b7ab6:	682b      	ldr	r3, [r5, #0]
   b7ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7aba:	4628      	mov	r0, r5
}
   b7abc:	b002      	add	sp, #8
   b7abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7ac2:	4718      	bx	r3

000b7ac4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7ac4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7ac8:	461d      	mov	r5, r3
    startWrite();
   b7aca:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b7acc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b7ad0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b7ad2:	4604      	mov	r4, r0
   b7ad4:	4617      	mov	r7, r2
   b7ad6:	460e      	mov	r6, r1
    startWrite();
   b7ad8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b7ada:	e9cd 7800 	strd	r7, r8, [sp]
   b7ade:	6822      	ldr	r2, [r4, #0]
   b7ae0:	1e6b      	subs	r3, r5, #1
   b7ae2:	4433      	add	r3, r6
   b7ae4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b7ae6:	4620      	mov	r0, r4
   b7ae8:	b21b      	sxth	r3, r3
   b7aea:	463a      	mov	r2, r7
   b7aec:	4631      	mov	r1, r6
   b7aee:	47a8      	blx	r5
    endWrite();
   b7af0:	6823      	ldr	r3, [r4, #0]
   b7af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7af4:	4620      	mov	r0, r4
}
   b7af6:	b002      	add	sp, #8
   b7af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7afc:	4718      	bx	r3

000b7afe <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7afe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7b02:	461e      	mov	r6, r3
    startWrite();
   b7b04:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7b06:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b7b0a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7b0c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7b10:	460c      	mov	r4, r1
   b7b12:	4605      	mov	r5, r0
   b7b14:	4617      	mov	r7, r2
    startWrite();
   b7b16:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b7b18:	4426      	add	r6, r4
   b7b1a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b7b1c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b7b1e:	da0b      	bge.n	b7b38 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b7b20:	f8cd 8000 	str.w	r8, [sp]
   b7b24:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7b28:	4621      	mov	r1, r4
   b7b2a:	464b      	mov	r3, r9
   b7b2c:	463a      	mov	r2, r7
   b7b2e:	4628      	mov	r0, r5
   b7b30:	3401      	adds	r4, #1
   b7b32:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b7b34:	b224      	sxth	r4, r4
   b7b36:	e7f0      	b.n	b7b1a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b7b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b3a:	4628      	mov	r0, r5
}
   b7b3c:	b002      	add	sp, #8
   b7b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7b42:	4718      	bx	r3

000b7b44 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b7b44:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b7b46:	6802      	ldr	r2, [r0, #0]
   b7b48:	9101      	str	r1, [sp, #4]
   b7b4a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b7b4e:	9100      	str	r1, [sp, #0]
   b7b50:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b7b52:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b7b56:	2200      	movs	r2, #0
   b7b58:	4611      	mov	r1, r2
   b7b5a:	47a0      	blx	r4
}
   b7b5c:	b002      	add	sp, #8
   b7b5e:	bd10      	pop	{r4, pc}

000b7b60 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b7b64:	4299      	cmp	r1, r3
        uint16_t color) {
   b7b66:	4616      	mov	r6, r2
   b7b68:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b7b6c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7b70:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b7b72:	4680      	mov	r8, r0
   b7b74:	460d      	mov	r5, r1
   b7b76:	461c      	mov	r4, r3
    if(x0 == x1){
   b7b78:	d113      	bne.n	b7ba2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7b7a:	42be      	cmp	r6, r7
   b7b7c:	bfc8      	it	gt
   b7b7e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7b80:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b7b84:	bfc4      	itt	gt
   b7b86:	463e      	movgt	r6, r7
   b7b88:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b7b8a:	1c7b      	adds	r3, r7, #1
   b7b8c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b7b8e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7b90:	b21b      	sxth	r3, r3
   b7b92:	4632      	mov	r2, r6
   b7b94:	4629      	mov	r1, r5
   b7b96:	4640      	mov	r0, r8
   b7b98:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b7b9a:	b003      	add	sp, #12
   b7b9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7ba0:	4760      	bx	ip
    } else if(y0 == y1){
   b7ba2:	42be      	cmp	r6, r7
   b7ba4:	d10a      	bne.n	b7bbc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b7ba6:	4299      	cmp	r1, r3
   b7ba8:	bfc2      	ittt	gt
   b7baa:	460b      	movgt	r3, r1
   b7bac:	4625      	movgt	r5, r4
   b7bae:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b7bb0:	1c63      	adds	r3, r4, #1
   b7bb2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b7bb6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7bb8:	1b5b      	subs	r3, r3, r5
   b7bba:	e7e9      	b.n	b7b90 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b7bbc:	6953      	ldr	r3, [r2, #20]
   b7bbe:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b7bc0:	e9cd 7900 	strd	r7, r9, [sp]
   b7bc4:	f8d8 3000 	ldr.w	r3, [r8]
   b7bc8:	4640      	mov	r0, r8
   b7bca:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b7bcc:	4632      	mov	r2, r6
   b7bce:	4623      	mov	r3, r4
   b7bd0:	4629      	mov	r1, r5
   b7bd2:	47b8      	blx	r7
        endWrite();
   b7bd4:	f8d8 3000 	ldr.w	r3, [r8]
   b7bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bda:	4640      	mov	r0, r8
}
   b7bdc:	b003      	add	sp, #12
   b7bde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b7be2:	4718      	bx	r3

000b7be4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7be4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7be8:	461d      	mov	r5, r3
    startWrite();
   b7bea:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7bec:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b7bf0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7bf2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b7bf6:	4604      	mov	r4, r0
   b7bf8:	460f      	mov	r7, r1
   b7bfa:	4616      	mov	r6, r2
    startWrite();
   b7bfc:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b7bfe:	6823      	ldr	r3, [r4, #0]
   b7c00:	f8cd 8000 	str.w	r8, [sp]
   b7c04:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7c08:	4632      	mov	r2, r6
   b7c0a:	462b      	mov	r3, r5
   b7c0c:	4639      	mov	r1, r7
   b7c0e:	4620      	mov	r0, r4
   b7c10:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b7c12:	6823      	ldr	r3, [r4, #0]
   b7c14:	f8cd 8000 	str.w	r8, [sp]
   b7c18:	f109 32ff 	add.w	r2, r9, #4294967295
   b7c1c:	4432      	add	r2, r6
   b7c1e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b7c22:	4639      	mov	r1, r7
   b7c24:	462b      	mov	r3, r5
   b7c26:	4620      	mov	r0, r4
   b7c28:	b212      	sxth	r2, r2
   b7c2a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b7c2c:	6823      	ldr	r3, [r4, #0]
   b7c2e:	f8cd 8000 	str.w	r8, [sp]
   b7c32:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b7c36:	4632      	mov	r2, r6
   b7c38:	464b      	mov	r3, r9
   b7c3a:	4639      	mov	r1, r7
   b7c3c:	4620      	mov	r0, r4
   b7c3e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b7c40:	1e6b      	subs	r3, r5, #1
   b7c42:	19d9      	adds	r1, r3, r7
   b7c44:	6823      	ldr	r3, [r4, #0]
   b7c46:	f8cd 8000 	str.w	r8, [sp]
   b7c4a:	6a1d      	ldr	r5, [r3, #32]
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	464b      	mov	r3, r9
   b7c50:	4632      	mov	r2, r6
   b7c52:	b209      	sxth	r1, r1
   b7c54:	47a8      	blx	r5
    endWrite();
   b7c56:	6823      	ldr	r3, [r4, #0]
   b7c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c5a:	4620      	mov	r0, r4
}
   b7c5c:	b002      	add	sp, #8
   b7c5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b7c62:	4718      	bx	r3

000b7c64 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b7c64:	4770      	bx	lr

000b7c66 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b7c66:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b7c6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b7c6e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b7c70:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b7c72:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7c76:	bf59      	ittee	pl
   b7c78:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b7c7a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b7c7c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b7c7e:	81c3      	strhmi	r3, [r0, #14]
}
   b7c80:	4770      	bx	lr
	...

000b7c84 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b7c84:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b7c86:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b7c88:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b7c8a:	4a07      	ldr	r2, [pc, #28]	; (b7ca8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b7c8c:	4d07      	ldr	r5, [pc, #28]	; (b7cac <_ZN12Adafruit_GFXC1Ess+0x28>)
   b7c8e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b7c90:	2400      	movs	r4, #0
    _width    = WIDTH;
   b7c92:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b7c94:	f04f 31ff 	mov.w	r1, #4294967295
   b7c98:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b7c9c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b7c9e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b7ca0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b7ca2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b7ca4:	6204      	str	r4, [r0, #32]
}
   b7ca6:	bd30      	pop	{r4, r5, pc}
   b7ca8:	01000101 	.word	0x01000101
   b7cac:	000bc4c0 	.word	0x000bc4c0

000b7cb0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b7cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cb4:	b08b      	sub	sp, #44	; 0x2c
   b7cb6:	461c      	mov	r4, r3
   b7cb8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b7cbc:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b7cbe:	b2a3      	uxth	r3, r4
   b7cc0:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b7cc4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b7cc8:	005b      	lsls	r3, r3, #1
   b7cca:	b21b      	sxth	r3, r3
   b7ccc:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b7cce:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b7cd2:	3301      	adds	r3, #1
   b7cd4:	b29b      	uxth	r3, r3
   b7cd6:	9305      	str	r3, [sp, #20]
   b7cd8:	b293      	uxth	r3, r2
   b7cda:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b7cdc:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b7cde:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b7ce0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b7ce4:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b7ce6:	2300      	movs	r3, #0
   b7ce8:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b7cea:	f001 0301 	and.w	r3, r1, #1
   b7cee:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b7cf0:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b7cf4:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b7cf8:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b7cfa:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b7cfc:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b7cfe:	9b02      	ldr	r3, [sp, #8]
   b7d00:	42a3      	cmp	r3, r4
   b7d02:	da6f      	bge.n	b7de4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b7d04:	2d00      	cmp	r5, #0
   b7d06:	db6b      	blt.n	b7de0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b7d08:	9b07      	ldr	r3, [sp, #28]
   b7d0a:	3302      	adds	r3, #2
            y--;
   b7d0c:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b7d0e:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b7d10:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b7d14:	b236      	sxth	r6, r6
            ddF_y += 2;
   b7d16:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b7d18:	b22d      	sxth	r5, r5
        x++;
   b7d1a:	9f02      	ldr	r7, [sp, #8]
   b7d1c:	3701      	adds	r7, #1
   b7d1e:	fa1f f987 	uxth.w	r9, r7
   b7d22:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b7d24:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b7d28:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b7d2a:	429e      	cmp	r6, r3
   b7d2c:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b7d2e:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b7d30:	db29      	blt.n	b7d86 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b7d32:	9b08      	ldr	r3, [sp, #32]
   b7d34:	b193      	cbz	r3, b7d5c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b7d36:	9804      	ldr	r0, [sp, #16]
   b7d38:	9000      	str	r0, [sp, #0]
   b7d3a:	f8db 0000 	ldr.w	r0, [fp]
   b7d3e:	9906      	ldr	r1, [sp, #24]
   b7d40:	9b05      	ldr	r3, [sp, #20]
   b7d42:	6a00      	ldr	r0, [r0, #32]
   b7d44:	b2b2      	uxth	r2, r6
   b7d46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b7d4a:	1a8a      	subs	r2, r1, r2
   b7d4c:	eb09 0108 	add.w	r1, r9, r8
   b7d50:	4607      	mov	r7, r0
   b7d52:	b21b      	sxth	r3, r3
   b7d54:	b212      	sxth	r2, r2
   b7d56:	b209      	sxth	r1, r1
   b7d58:	4658      	mov	r0, fp
   b7d5a:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b7d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7d5e:	b193      	cbz	r3, b7d86 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b7d60:	9906      	ldr	r1, [sp, #24]
   b7d62:	9804      	ldr	r0, [sp, #16]
   b7d64:	9b05      	ldr	r3, [sp, #20]
   b7d66:	9000      	str	r0, [sp, #0]
   b7d68:	b2b2      	uxth	r2, r6
   b7d6a:	f8db 0000 	ldr.w	r0, [fp]
   b7d6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b7d72:	1a8a      	subs	r2, r1, r2
   b7d74:	eba8 0109 	sub.w	r1, r8, r9
   b7d78:	b21b      	sxth	r3, r3
   b7d7a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7d7e:	b212      	sxth	r2, r2
   b7d80:	b209      	sxth	r1, r1
   b7d82:	4658      	mov	r0, fp
   b7d84:	47c8      	blx	r9
        if(y != py) {
   b7d86:	42b4      	cmp	r4, r6
   b7d88:	d020      	beq.n	b7dcc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b7d8a:	9b08      	ldr	r3, [sp, #32]
   b7d8c:	b173      	cbz	r3, b7dac <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b7d8e:	f8db 3000 	ldr.w	r3, [fp]
   b7d92:	9a04      	ldr	r2, [sp, #16]
   b7d94:	9200      	str	r2, [sp, #0]
   b7d96:	eb08 0104 	add.w	r1, r8, r4
   b7d9a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7d9e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b7da2:	fa0f f28a 	sxth.w	r2, sl
   b7da6:	b209      	sxth	r1, r1
   b7da8:	4658      	mov	r0, fp
   b7daa:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b7dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7dae:	b16b      	cbz	r3, b7dcc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b7db0:	f8db 3000 	ldr.w	r3, [fp]
   b7db4:	9a04      	ldr	r2, [sp, #16]
   b7db6:	9200      	str	r2, [sp, #0]
   b7db8:	eba8 0104 	sub.w	r1, r8, r4
   b7dbc:	fa0f f28a 	sxth.w	r2, sl
   b7dc0:	6a1c      	ldr	r4, [r3, #32]
   b7dc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b7dc6:	b209      	sxth	r1, r1
   b7dc8:	4658      	mov	r0, fp
   b7dca:	47a0      	blx	r4
   b7dcc:	f10a 33ff 	add.w	r3, sl, #4294967295
   b7dd0:	fa1f fa83 	uxth.w	sl, r3
   b7dd4:	9b03      	ldr	r3, [sp, #12]
   b7dd6:	3302      	adds	r3, #2
   b7dd8:	b29b      	uxth	r3, r3
   b7dda:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b7ddc:	4634      	mov	r4, r6
   b7dde:	e78e      	b.n	b7cfe <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b7de0:	4626      	mov	r6, r4
   b7de2:	e79a      	b.n	b7d1a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b7de4:	b00b      	add	sp, #44	; 0x2c
   b7de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7dea <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b7dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7dee:	461e      	mov	r6, r3
   b7df0:	b086      	sub	sp, #24
    startWrite();
   b7df2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b7df4:	9105      	str	r1, [sp, #20]
   b7df6:	4604      	mov	r4, r0
    startWrite();
   b7df8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b7dfa:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b7dfe:	4615      	mov	r5, r2
    startWrite();
   b7e00:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b7e02:	b2b2      	uxth	r2, r6
   b7e04:	6820      	ldr	r0, [r4, #0]
   b7e06:	9700      	str	r7, [sp, #0]
   b7e08:	0053      	lsls	r3, r2, #1
   b7e0a:	3301      	adds	r3, #1
   b7e0c:	1aaa      	subs	r2, r5, r2
   b7e0e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b7e12:	9905      	ldr	r1, [sp, #20]
   b7e14:	4620      	mov	r0, r4
   b7e16:	b21b      	sxth	r3, r3
   b7e18:	b212      	sxth	r2, r2
   b7e1a:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b7e1c:	2303      	movs	r3, #3
   b7e1e:	2200      	movs	r2, #0
   b7e20:	e9cd 3200 	strd	r3, r2, [sp]
   b7e24:	4620      	mov	r0, r4
   b7e26:	4633      	mov	r3, r6
   b7e28:	9905      	ldr	r1, [sp, #20]
   b7e2a:	9702      	str	r7, [sp, #8]
   b7e2c:	462a      	mov	r2, r5
   b7e2e:	f7ff ff3f 	bl	b7cb0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b7e32:	6823      	ldr	r3, [r4, #0]
   b7e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e36:	4620      	mov	r0, r4
}
   b7e38:	b006      	add	sp, #24
   b7e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b7e3e:	4718      	bx	r3

000b7e40 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b7e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e44:	b08d      	sub	sp, #52	; 0x34
   b7e46:	461d      	mov	r5, r3
   b7e48:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b7e4c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b7e50:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b7e54:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b7e58:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b7e5a:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b7e5c:	4683      	mov	fp, r0
   b7e5e:	4689      	mov	r9, r1
   b7e60:	4614      	mov	r4, r2
    if (y0 > y1) {
   b7e62:	f340 80ce 	ble.w	b8002 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b7e66:	42ba      	cmp	r2, r7
   b7e68:	dd17      	ble.n	b7e9a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b7e6a:	42b7      	cmp	r7, r6
   b7e6c:	da0f      	bge.n	b7e8e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b7e6e:	4633      	mov	r3, r6
   b7e70:	463e      	mov	r6, r7
   b7e72:	4627      	mov	r7, r4
   b7e74:	461c      	mov	r4, r3
   b7e76:	462b      	mov	r3, r5
   b7e78:	4645      	mov	r5, r8
   b7e7a:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b7e7c:	4699      	mov	r9, r3
   b7e7e:	e00c      	b.n	b7e9a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b7e80:	4623      	mov	r3, r4
   b7e82:	4634      	mov	r4, r6
   b7e84:	461e      	mov	r6, r3
   b7e86:	464b      	mov	r3, r9
   b7e88:	46a9      	mov	r9, r5
   b7e8a:	461d      	mov	r5, r3
   b7e8c:	e7ed      	b.n	b7e6a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b7e8e:	4623      	mov	r3, r4
   b7e90:	463c      	mov	r4, r7
   b7e92:	461f      	mov	r7, r3
   b7e94:	464b      	mov	r3, r9
   b7e96:	46c1      	mov	r9, r8
   b7e98:	4698      	mov	r8, r3
    startWrite();
   b7e9a:	f8db 3000 	ldr.w	r3, [fp]
   b7e9e:	4658      	mov	r0, fp
   b7ea0:	695b      	ldr	r3, [r3, #20]
   b7ea2:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b7ea4:	42be      	cmp	r6, r7
   b7ea6:	d122      	bne.n	b7eee <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b7ea8:	454d      	cmp	r5, r9
   b7eaa:	bfc2      	ittt	gt
   b7eac:	462b      	movgt	r3, r5
   b7eae:	464d      	movgt	r5, r9
   b7eb0:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b7eb2:	4545      	cmp	r5, r8
   b7eb4:	dc05      	bgt.n	b7ec2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b7eb6:	45c1      	cmp	r9, r8
   b7eb8:	bfb8      	it	lt
   b7eba:	46c1      	movlt	r9, r8
   b7ebc:	fa0f f989 	sxth.w	r9, r9
   b7ec0:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b7ec2:	f8db 2000 	ldr.w	r2, [fp]
   b7ec6:	9904      	ldr	r1, [sp, #16]
   b7ec8:	9100      	str	r1, [sp, #0]
   b7eca:	f109 0301 	add.w	r3, r9, #1
   b7ece:	eba3 0308 	sub.w	r3, r3, r8
   b7ed2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b7ed4:	b21b      	sxth	r3, r3
   b7ed6:	4632      	mov	r2, r6
   b7ed8:	4641      	mov	r1, r8
   b7eda:	4658      	mov	r0, fp
   b7edc:	47a0      	blx	r4
    endWrite();
   b7ede:	f8db 3000 	ldr.w	r3, [fp]
   b7ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7ee4:	4658      	mov	r0, fp
}
   b7ee6:	b00d      	add	sp, #52	; 0x34
   b7ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b7eec:	4718      	bx	r3
    dx01 = x1 - x0,
   b7eee:	fa1f f389 	uxth.w	r3, r9
   b7ef2:	9303      	str	r3, [sp, #12]
   b7ef4:	b2ab      	uxth	r3, r5
   b7ef6:	9302      	str	r3, [sp, #8]
   b7ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7efc:	1a9b      	subs	r3, r3, r2
   b7efe:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b7f00:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b7f04:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b7f06:	b2a3      	uxth	r3, r4
   b7f08:	eba3 020c 	sub.w	r2, r3, ip
   b7f0c:	b212      	sxth	r2, r2
   b7f0e:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b7f10:	9a02      	ldr	r2, [sp, #8]
   b7f12:	fa1f f188 	uxth.w	r1, r8
   b7f16:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b7f1a:	b2ba      	uxth	r2, r7
   b7f1c:	eba2 0c0c 	sub.w	ip, r2, ip
   b7f20:	fa0f f08c 	sxth.w	r0, ip
   b7f24:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b7f26:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b7f28:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b7f2a:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b7f2e:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b7f32:	bf18      	it	ne
   b7f34:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b7f38:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b7f3a:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b7f3c:	bf18      	it	ne
   b7f3e:	b21b      	sxthne	r3, r3
    sb   = 0;
   b7f40:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b7f44:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b7f46:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b7f4a:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b7f4c:	bf14      	ite	ne
   b7f4e:	9305      	strne	r3, [sp, #20]
   b7f50:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b7f52:	4632      	mov	r2, r6
    sa   = 0,
   b7f54:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b7f56:	9b05      	ldr	r3, [sp, #20]
   b7f58:	429a      	cmp	r2, r3
   b7f5a:	dc24      	bgt.n	b7fa6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b7f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b7f5e:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b7f60:	fb9a f1f3 	sdiv	r1, sl, r3
   b7f64:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b7f66:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b7f68:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b7f6a:	9b06      	ldr	r3, [sp, #24]
   b7f6c:	fb99 f3f3 	sdiv	r3, r9, r3
   b7f70:	4403      	add	r3, r0
        sa += dx01;
   b7f72:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b7f74:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b7f76:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b7f78:	4299      	cmp	r1, r3
        sa += dx01;
   b7f7a:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b7f7c:	9804      	ldr	r0, [sp, #16]
   b7f7e:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b7f80:	bfc8      	it	gt
   b7f82:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b7f84:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b7f88:	bfc4      	itt	gt
   b7f8a:	4619      	movgt	r1, r3
   b7f8c:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b7f8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7f90:	3301      	adds	r3, #1
   b7f92:	1a5b      	subs	r3, r3, r1
   b7f94:	4605      	mov	r5, r0
   b7f96:	b21b      	sxth	r3, r3
   b7f98:	4658      	mov	r0, fp
   b7f9a:	47a8      	blx	r5
   b7f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7f9e:	3201      	adds	r2, #1
        sb += dx02;
   b7fa0:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b7fa2:	b212      	sxth	r2, r2
   b7fa4:	e7d7      	b.n	b7f56 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b7fa6:	9b07      	ldr	r3, [sp, #28]
   b7fa8:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b7faa:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b7fac:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b7fae:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b7fb2:	42ba      	cmp	r2, r7
   b7fb4:	dc93      	bgt.n	b7ede <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b7fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b7fb8:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b7fba:	fb94 f1f3 	sdiv	r1, r4, r3
   b7fbe:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b7fc0:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b7fc2:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b7fc4:	9b06      	ldr	r3, [sp, #24]
   b7fc6:	fb96 f3f3 	sdiv	r3, r6, r3
   b7fca:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b7fcc:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b7fce:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b7fd0:	4299      	cmp	r1, r3
        sa += dx12;
   b7fd2:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b7fd4:	bfc8      	it	gt
   b7fd6:	468c      	movgt	ip, r1
        sa += dx12;
   b7fd8:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b7fda:	bfc8      	it	gt
   b7fdc:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b7fde:	9804      	ldr	r0, [sp, #16]
   b7fe0:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b7fe2:	bfc8      	it	gt
   b7fe4:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b7fe6:	f8db 0000 	ldr.w	r0, [fp]
   b7fea:	3301      	adds	r3, #1
   b7fec:	1a5b      	subs	r3, r3, r1
   b7fee:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b7ff2:	b21b      	sxth	r3, r3
   b7ff4:	4658      	mov	r0, fp
   b7ff6:	47c8      	blx	r9
   b7ff8:	9a05      	ldr	r2, [sp, #20]
   b7ffa:	3201      	adds	r2, #1
        sb += dx02;
   b7ffc:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b7ffe:	b212      	sxth	r2, r2
   b8000:	e7d7      	b.n	b7fb2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b8002:	42be      	cmp	r6, r7
   b8004:	f73f af3c 	bgt.w	b7e80 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b8008:	4633      	mov	r3, r6
   b800a:	461c      	mov	r4, r3
   b800c:	4616      	mov	r6, r2
   b800e:	462b      	mov	r3, r5
   b8010:	460d      	mov	r5, r1
   b8012:	e733      	b.n	b7e7c <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b8014 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8018:	b089      	sub	sp, #36	; 0x24
   b801a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b801e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8020:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8024:	9304      	str	r3, [sp, #16]
   b8026:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b802a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b802c:	9305      	str	r3, [sp, #20]
   b802e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8032:	4604      	mov	r4, r0
    startWrite();
   b8034:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8036:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b803a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b803e:	bf48      	it	mi
   b8040:	f108 020e 	addmi.w	r2, r8, #14
   b8044:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8048:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b804a:	4635      	mov	r5, r6
   b804c:	9b03      	ldr	r3, [sp, #12]
   b804e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8050:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8054:	189a      	adds	r2, r3, r2
   b8056:	9b05      	ldr	r3, [sp, #20]
   b8058:	428b      	cmp	r3, r1
   b805a:	b212      	sxth	r2, r2
   b805c:	dd27      	ble.n	b80ae <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b805e:	9b04      	ldr	r3, [sp, #16]
   b8060:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8062:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8066:	9306      	str	r3, [sp, #24]
   b8068:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b806c:	4580      	cmp	r8, r0
   b806e:	fa1f f189 	uxth.w	r1, r9
   b8072:	dd17      	ble.n	b80a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8074:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8076:	bf05      	ittet	eq
   b8078:	9b06      	ldreq	r3, [sp, #24]
   b807a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b807c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b807e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8080:	bf18      	it	ne
   b8082:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8084:	062b      	lsls	r3, r5, #24
   b8086:	d50a      	bpl.n	b809e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8088:	9b02      	ldr	r3, [sp, #8]
   b808a:	6820      	ldr	r0, [r4, #0]
   b808c:	9207      	str	r2, [sp, #28]
   b808e:	4419      	add	r1, r3
   b8090:	6983      	ldr	r3, [r0, #24]
   b8092:	b209      	sxth	r1, r1
   b8094:	461f      	mov	r7, r3
   b8096:	4620      	mov	r0, r4
   b8098:	4653      	mov	r3, sl
   b809a:	47b8      	blx	r7
   b809c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b809e:	f109 0901 	add.w	r9, r9, #1
   b80a2:	e7e1      	b.n	b8068 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b80a4:	9b01      	ldr	r3, [sp, #4]
   b80a6:	3301      	adds	r3, #1
   b80a8:	9301      	str	r3, [sp, #4]
   b80aa:	445e      	add	r6, fp
   b80ac:	e7ce      	b.n	b804c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b80ae:	6823      	ldr	r3, [r4, #0]
   b80b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80b2:	4620      	mov	r0, r4
}
   b80b4:	b009      	add	sp, #36	; 0x24
   b80b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b80ba:	4718      	bx	r3

000b80bc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b80bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80c0:	ed2d 8b02 	vpush	{d8}
   b80c4:	b091      	sub	sp, #68	; 0x44
   b80c6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b80c8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b80ca:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b80ce:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b80d2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b80d6:	9103      	str	r1, [sp, #12]
   b80d8:	461f      	mov	r7, r3
   b80da:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b80de:	9304      	str	r3, [sp, #16]
   b80e0:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b80e2:	2a00      	cmp	r2, #0
   b80e4:	f040 80c5 	bne.w	b8272 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b80e8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b80ec:	428b      	cmp	r3, r1
   b80ee:	f340 814c 	ble.w	b838a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b80f2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b80f6:	42b3      	cmp	r3, r6
   b80f8:	f340 8147 	ble.w	b838a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b80fc:	2306      	movs	r3, #6
   b80fe:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8102:	2b00      	cmp	r3, #0
   b8104:	f340 8141 	ble.w	b838a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8108:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b810c:	2b00      	cmp	r3, #0
   b810e:	f340 813c 	ble.w	b838a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8112:	7f03      	ldrb	r3, [r0, #28]
   b8114:	b91b      	cbnz	r3, b811e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8116:	2faf      	cmp	r7, #175	; 0xaf
   b8118:	bf84      	itt	hi
   b811a:	3701      	addhi	r7, #1
   b811c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b811e:	f8db 3000 	ldr.w	r3, [fp]
   b8122:	4658      	mov	r0, fp
   b8124:	695b      	ldr	r3, [r3, #20]
   b8126:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8128:	2205      	movs	r2, #5
   b812a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b812c:	2200      	movs	r2, #0
   b812e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8130:	4a98      	ldr	r2, [pc, #608]	; (b8394 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8132:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8136:	18d3      	adds	r3, r2, r3
   b8138:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b813a:	b2b3      	uxth	r3, r6
   b813c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b813e:	9a05      	ldr	r2, [sp, #20]
   b8140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8142:	5c9b      	ldrb	r3, [r3, r2]
   b8144:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8146:	b2ab      	uxth	r3, r5
   b8148:	930b      	str	r3, [sp, #44]	; 0x2c
   b814a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b814e:	9308      	str	r3, [sp, #32]
   b8150:	9b03      	ldr	r3, [sp, #12]
   b8152:	fb02 f905 	mul.w	r9, r2, r5
   b8156:	fa19 f983 	uxtah	r9, r9, r3
   b815a:	fa0f f389 	sxth.w	r3, r9
   b815e:	ee08 3a10 	vmov	s16, r3
   b8162:	2308      	movs	r3, #8
   b8164:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8166:	9b03      	ldr	r3, [sp, #12]
   b8168:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b816c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8170:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8174:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8176:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b817a:	07d2      	lsls	r2, r2, #31
   b817c:	d552      	bpl.n	b8224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b817e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8180:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8184:	d13e      	bne.n	b8204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8186:	2c01      	cmp	r4, #1
   b8188:	d13c      	bne.n	b8204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b818a:	699b      	ldr	r3, [r3, #24]
   b818c:	9906      	ldr	r1, [sp, #24]
   b818e:	461f      	mov	r7, r3
   b8190:	9b04      	ldr	r3, [sp, #16]
   b8192:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8194:	b212      	sxth	r2, r2
   b8196:	4651      	mov	r1, sl
   b8198:	4658      	mov	r0, fp
   b819a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b819c:	f109 0301 	add.w	r3, r9, #1
   b81a0:	fa4f f983 	sxtb.w	r9, r3
   b81a4:	9b07      	ldr	r3, [sp, #28]
   b81a6:	085b      	lsrs	r3, r3, #1
   b81a8:	9307      	str	r3, [sp, #28]
   b81aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b81ac:	3b01      	subs	r3, #1
   b81ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b81b2:	930a      	str	r3, [sp, #40]	; 0x28
   b81b4:	d1de      	bne.n	b8174 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b81b6:	9f05      	ldr	r7, [sp, #20]
   b81b8:	3701      	adds	r7, #1
   b81ba:	b27b      	sxtb	r3, r7
   b81bc:	9305      	str	r3, [sp, #20]
   b81be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b81c0:	3b01      	subs	r3, #1
   b81c2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b81c6:	9309      	str	r3, [sp, #36]	; 0x24
   b81c8:	d1b9      	bne.n	b813e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b81ca:	9b04      	ldr	r3, [sp, #16]
   b81cc:	4543      	cmp	r3, r8
   b81ce:	d00f      	beq.n	b81f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b81d0:	2d01      	cmp	r5, #1
   b81d2:	f8db 3000 	ldr.w	r3, [fp]
   b81d6:	d13b      	bne.n	b8250 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b81d8:	2c01      	cmp	r4, #1
   b81da:	d139      	bne.n	b8250 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b81dc:	9908      	ldr	r1, [sp, #32]
   b81de:	f8cd 8000 	str.w	r8, [sp]
   b81e2:	3105      	adds	r1, #5
   b81e4:	6a1c      	ldr	r4, [r3, #32]
   b81e6:	4632      	mov	r2, r6
   b81e8:	2308      	movs	r3, #8
   b81ea:	b209      	sxth	r1, r1
   b81ec:	4658      	mov	r0, fp
   b81ee:	47a0      	blx	r4
        endWrite();
   b81f0:	f8db 3000 	ldr.w	r3, [fp]
   b81f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b81f6:	4658      	mov	r0, fp
}
   b81f8:	b011      	add	sp, #68	; 0x44
   b81fa:	ecbd 8b02 	vpop	{d8}
   b81fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8202:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8204:	9906      	ldr	r1, [sp, #24]
   b8206:	fb14 f202 	smulbb	r2, r4, r2
   b820a:	440a      	add	r2, r1
   b820c:	9904      	ldr	r1, [sp, #16]
   b820e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8210:	9400      	str	r4, [sp, #0]
   b8212:	69db      	ldr	r3, [r3, #28]
   b8214:	ee18 1a10 	vmov	r1, s16
   b8218:	461f      	mov	r7, r3
   b821a:	b212      	sxth	r2, r2
   b821c:	462b      	mov	r3, r5
   b821e:	4658      	mov	r0, fp
   b8220:	47b8      	blx	r7
   b8222:	e7bb      	b.n	b819c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8224:	9a04      	ldr	r2, [sp, #16]
   b8226:	4542      	cmp	r2, r8
   b8228:	d0b8      	beq.n	b819c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b822a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b822c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8230:	d107      	bne.n	b8242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8232:	2c01      	cmp	r4, #1
   b8234:	d105      	bne.n	b8242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8236:	699b      	ldr	r3, [r3, #24]
   b8238:	9906      	ldr	r1, [sp, #24]
   b823a:	461f      	mov	r7, r3
   b823c:	440a      	add	r2, r1
   b823e:	4643      	mov	r3, r8
   b8240:	e7a8      	b.n	b8194 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8242:	9906      	ldr	r1, [sp, #24]
   b8244:	f8cd 8004 	str.w	r8, [sp, #4]
   b8248:	fb14 f202 	smulbb	r2, r4, r2
   b824c:	440a      	add	r2, r1
   b824e:	e7df      	b.n	b8210 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8252:	f8cd 8004 	str.w	r8, [sp, #4]
   b8256:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b825a:	9a08      	ldr	r2, [sp, #32]
   b825c:	00e4      	lsls	r4, r4, #3
   b825e:	440a      	add	r2, r1
   b8260:	4611      	mov	r1, r2
   b8262:	9400      	str	r4, [sp, #0]
   b8264:	69dc      	ldr	r4, [r3, #28]
   b8266:	4632      	mov	r2, r6
   b8268:	462b      	mov	r3, r5
   b826a:	b209      	sxth	r1, r1
   b826c:	4658      	mov	r0, fp
   b826e:	47a0      	blx	r4
        endWrite();
   b8270:	e7be      	b.n	b81f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8272:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8274:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8276:	6812      	ldr	r2, [r2, #0]
   b8278:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b827a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b827c:	b2ff      	uxtb	r7, r7
   b827e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8282:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8286:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8288:	789a      	ldrb	r2, [r3, #2]
   b828a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b828c:	78da      	ldrb	r2, [r3, #3]
   b828e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8290:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8292:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8296:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b829a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b829c:	d801      	bhi.n	b82a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b829e:	2c01      	cmp	r4, #1
   b82a0:	d957      	bls.n	b8352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b82a2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b82a6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b82a8:	fa0f f38a 	sxth.w	r3, sl
   b82ac:	9307      	str	r3, [sp, #28]
        startWrite();
   b82ae:	f8db 3000 	ldr.w	r3, [fp]
   b82b2:	4658      	mov	r0, fp
   b82b4:	695b      	ldr	r3, [r3, #20]
   b82b6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82b8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b82ba:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82be:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82c0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b82c4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b82c6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82c8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b82ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b82cc:	429f      	cmp	r7, r3
   b82ce:	d28f      	bcs.n	b81f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82d0:	9b07      	ldr	r3, [sp, #28]
   b82d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b82d4:	443b      	add	r3, r7
   b82d6:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b82da:	2200      	movs	r2, #0
   b82dc:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82e0:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82e2:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82e6:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b82ea:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b82ee:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b82f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b82f2:	9905      	ldr	r1, [sp, #20]
   b82f4:	4291      	cmp	r1, r2
   b82f6:	d241      	bcs.n	b837c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b82f8:	1c5a      	adds	r2, r3, #1
   b82fa:	b2d2      	uxtb	r2, r2
   b82fc:	075b      	lsls	r3, r3, #29
   b82fe:	920d      	str	r2, [sp, #52]	; 0x34
   b8300:	d107      	bne.n	b8312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8302:	9b06      	ldr	r3, [sp, #24]
   b8304:	9906      	ldr	r1, [sp, #24]
   b8306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8308:	3301      	adds	r3, #1
   b830a:	b29b      	uxth	r3, r3
   b830c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8310:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8312:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8316:	d012      	beq.n	b833e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8318:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b831a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b831e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8322:	d11a      	bne.n	b835a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8324:	2c01      	cmp	r4, #1
   b8326:	d118      	bne.n	b835a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b832a:	699b      	ldr	r3, [r3, #24]
   b832c:	4411      	add	r1, r2
   b832e:	9a05      	ldr	r2, [sp, #20]
   b8330:	4411      	add	r1, r2
   b8332:	461e      	mov	r6, r3
   b8334:	4652      	mov	r2, sl
   b8336:	9b04      	ldr	r3, [sp, #16]
   b8338:	b209      	sxth	r1, r1
   b833a:	4658      	mov	r0, fp
   b833c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b833e:	9e05      	ldr	r6, [sp, #20]
   b8340:	3601      	adds	r6, #1
   b8342:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8344:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8348:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b834a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b834e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8350:	e7ce      	b.n	b82f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8352:	2300      	movs	r3, #0
   b8354:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8358:	e7a9      	b.n	b82ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b835a:	9805      	ldr	r0, [sp, #20]
   b835c:	9a08      	ldr	r2, [sp, #32]
   b835e:	4402      	add	r2, r0
   b8360:	fb02 1105 	mla	r1, r2, r5, r1
   b8364:	9a04      	ldr	r2, [sp, #16]
   b8366:	e9cd 4200 	strd	r4, r2, [sp]
   b836a:	69db      	ldr	r3, [r3, #28]
   b836c:	ee18 2a10 	vmov	r2, s16
   b8370:	461e      	mov	r6, r3
   b8372:	b209      	sxth	r1, r1
   b8374:	462b      	mov	r3, r5
   b8376:	4658      	mov	r0, fp
   b8378:	47b0      	blx	r6
   b837a:	e7e0      	b.n	b833e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b837e:	3701      	adds	r7, #1
   b8380:	4498      	add	r8, r3
   b8382:	fa5f f888 	uxtb.w	r8, r8
   b8386:	b2ff      	uxtb	r7, r7
   b8388:	e79f      	b.n	b82ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b838a:	b011      	add	sp, #68	; 0x44
   b838c:	ecbd 8b02 	vpop	{d8}
   b8390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8394:	000bbfb8 	.word	0x000bbfb8

000b8398 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8398:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b839a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b839c:	b085      	sub	sp, #20
   b839e:	4604      	mov	r4, r0
   b83a0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b83a2:	2a00      	cmp	r2, #0
   b83a4:	d134      	bne.n	b8410 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b83a6:	290a      	cmp	r1, #10
   b83a8:	d108      	bne.n	b83bc <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b83aa:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b83ac:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b83ae:	7e42      	ldrb	r2, [r0, #25]
   b83b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b83b4:	8263      	strh	r3, [r4, #18]
}
   b83b6:	2001      	movs	r0, #1
   b83b8:	b005      	add	sp, #20
   b83ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b83bc:	290d      	cmp	r1, #13
   b83be:	d0fa      	beq.n	b83b6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b83c0:	7ee1      	ldrb	r1, [r4, #27]
   b83c2:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b83c4:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b83c6:	b171      	cbz	r1, b83e6 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b83c8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b83cc:	2106      	movs	r1, #6
   b83ce:	fb11 6100 	smlabb	r1, r1, r0, r6
   b83d2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b83d6:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b83d8:	bfc1      	itttt	gt
   b83da:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b83de:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b83e0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b83e4:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b83e6:	8ae2      	ldrh	r2, [r4, #22]
   b83e8:	9201      	str	r2, [sp, #4]
   b83ea:	8aa2      	ldrh	r2, [r4, #20]
   b83ec:	9200      	str	r2, [sp, #0]
   b83ee:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b83f2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b83f6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b83fa:	4620      	mov	r0, r4
   b83fc:	f7ff fe5e 	bl	b80bc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8400:	7e23      	ldrb	r3, [r4, #24]
   b8402:	8a22      	ldrh	r2, [r4, #16]
   b8404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8408:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b840c:	8223      	strh	r3, [r4, #16]
   b840e:	e7d2      	b.n	b83b6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8410:	290a      	cmp	r1, #10
   b8412:	d107      	bne.n	b8424 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8414:	2300      	movs	r3, #0
   b8416:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8418:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b841a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b841c:	8a43      	ldrh	r3, [r0, #18]
   b841e:	fb01 3302 	mla	r3, r1, r2, r3
   b8422:	e7c7      	b.n	b83b4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8424:	290d      	cmp	r1, #13
   b8426:	d0c6      	beq.n	b83b6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8428:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b842a:	42a9      	cmp	r1, r5
   b842c:	d3c3      	bcc.n	b83b6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b842e:	7a51      	ldrb	r1, [r2, #9]
   b8430:	4299      	cmp	r1, r3
   b8432:	d3c0      	bcc.n	b83b6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8434:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8436:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8438:	b2ed      	uxtb	r5, r5
   b843a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b843e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8440:	b328      	cbz	r0, b848e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8442:	78e9      	ldrb	r1, [r5, #3]
   b8444:	b319      	cbz	r1, b848e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8446:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8448:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b844a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b844c:	b191      	cbz	r1, b8474 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b844e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8452:	4408      	add	r0, r1
   b8454:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8458:	fb06 1100 	mla	r1, r6, r0, r1
   b845c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8460:	4281      	cmp	r1, r0
   b8462:	dd07      	ble.n	b8474 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8464:	2000      	movs	r0, #0
   b8466:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8468:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b846c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b846e:	fb02 1207 	mla	r2, r2, r7, r1
   b8472:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8474:	8ae2      	ldrh	r2, [r4, #22]
   b8476:	9201      	str	r2, [sp, #4]
   b8478:	8aa2      	ldrh	r2, [r4, #20]
   b847a:	9200      	str	r2, [sp, #0]
   b847c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8480:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8484:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8488:	4620      	mov	r0, r4
   b848a:	f7ff fe17 	bl	b80bc <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b848e:	7929      	ldrb	r1, [r5, #4]
   b8490:	7e22      	ldrb	r2, [r4, #24]
   b8492:	8a23      	ldrh	r3, [r4, #16]
   b8494:	fb01 3302 	mla	r3, r1, r2, r3
   b8498:	e7b8      	b.n	b840c <_ZN12Adafruit_GFX5writeEh+0x74>

000b849a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b849a:	2901      	cmp	r1, #1
   b849c:	bf38      	it	cc
   b849e:	2101      	movcc	r1, #1
   b84a0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b84a2:	7641      	strb	r1, [r0, #25]
}
   b84a4:	4770      	bx	lr

000b84a6 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b84a6:	b538      	push	{r3, r4, r5, lr}
   b84a8:	4604      	mov	r4, r0
   b84aa:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b84ac:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b84ae:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b84b0:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b84b2:	f002 fbbf 	bl	bac34 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b84b6:	7b20      	ldrb	r0, [r4, #12]
   b84b8:	2101      	movs	r1, #1
   b84ba:	f002 fbcc 	bl	bac56 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b84be:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b84c0:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b84c2:	2101      	movs	r1, #1
   b84c4:	f002 fbb6 	bl	bac34 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b84c8:	7b60      	ldrb	r0, [r4, #13]
   b84ca:	2100      	movs	r1, #0
   b84cc:	f002 fbc3 	bl	bac56 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b84d0:	4620      	mov	r0, r4
   b84d2:	bd38      	pop	{r3, r4, r5, pc}

000b84d4 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b84d4:	3901      	subs	r1, #1
   b84d6:	b2c9      	uxtb	r1, r1
   b84d8:	2908      	cmp	r1, #8
   b84da:	bf9a      	itte	ls
   b84dc:	4b02      	ldrls	r3, [pc, #8]	; (b84e8 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b84de:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b84e2:	4802      	ldrhi	r0, [pc, #8]	; (b84ec <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b84e4:	4770      	bx	lr
   b84e6:	bf00      	nop
   b84e8:	000bc608 	.word	0x000bc608
   b84ec:	000bc510 	.word	0x000bc510

000b84f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b84f0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b84f2:	4c0b      	ldr	r4, [pc, #44]	; (b8520 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b84f4:	7821      	ldrb	r1, [r4, #0]
   b84f6:	f3bf 8f5b 	dmb	ish
   b84fa:	f011 0101 	ands.w	r1, r1, #1
   b84fe:	d10b      	bne.n	b8518 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8500:	4620      	mov	r0, r4
   b8502:	9101      	str	r1, [sp, #4]
   b8504:	f7fc f9fe 	bl	b4904 <__cxa_guard_acquire>
   b8508:	9901      	ldr	r1, [sp, #4]
   b850a:	b128      	cbz	r0, b8518 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b850c:	4805      	ldr	r0, [pc, #20]	; (b8524 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b850e:	f001 fd37 	bl	b9f80 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8512:	4620      	mov	r0, r4
   b8514:	f7fc f9fb 	bl	b490e <__cxa_guard_release>
    }
   b8518:	4802      	ldr	r0, [pc, #8]	; (b8524 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b851a:	b002      	add	sp, #8
   b851c:	bd10      	pop	{r4, pc}
   b851e:	bf00      	nop
   b8520:	2003cd10 	.word	0x2003cd10
   b8524:	2003cd14 	.word	0x2003cd14

000b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b8528:	b507      	push	{r0, r1, r2, lr}
   b852a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b852c:	f7ff ffe0 	bl	b84f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8530:	9901      	ldr	r1, [sp, #4]
    }
   b8532:	b003      	add	sp, #12
   b8534:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b8538:	f001 bdc8 	b.w	ba0cc <_ZN8SPIClass8transferEh>

000b853c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b853c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8540:	4607      	mov	r7, r0
   b8542:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b8546:	461e      	mov	r6, r3
	if (count == 0) {
   b8548:	4615      	mov	r5, r2
   b854a:	2a00      	cmp	r2, #0
   b854c:	d042      	beq.n	b85d4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b854e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8552:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8554:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8558:	2100      	movs	r1, #0
   b855a:	f002 fb7c 	bl	bac56 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b855e:	4648      	mov	r0, r9
   b8560:	f7ff ffe2 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b8564:	3d01      	subs	r5, #1
   b8566:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b8568:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b856c:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b8570:	fa5f f48b 	uxtb.w	r4, fp
   b8574:	42a5      	cmp	r5, r4
   b8576:	d922      	bls.n	b85be <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b8578:	b9dc      	cbnz	r4, b85b2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b857a:	f1b8 0f00 	cmp.w	r8, #0
   b857e:	d018      	beq.n	b85b2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b8580:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b8582:	b2d3      	uxtb	r3, r2
   b8584:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b8586:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8588:	d805      	bhi.n	b8596 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b858a:	fa0a f402 	lsl.w	r4, sl, r2
   b858e:	430c      	orrs	r4, r1
   b8590:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8592:	3201      	adds	r2, #1
   b8594:	e7f5      	b.n	b8582 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b8596:	4648      	mov	r0, r9
   b8598:	9101      	str	r1, [sp, #4]
   b859a:	f7ff ffc5 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b859e:	7833      	ldrb	r3, [r6, #0]
   b85a0:	9901      	ldr	r1, [sp, #4]
   b85a2:	4004      	ands	r4, r0
   b85a4:	ea23 0301 	bic.w	r3, r3, r1
   b85a8:	431c      	orrs	r4, r3
   b85aa:	7034      	strb	r4, [r6, #0]
		index++;
   b85ac:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b85b0:	e7de      	b.n	b8570 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b85b2:	4648      	mov	r0, r9
   b85b4:	f7ff ffb8 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b85b8:	f806 000b 	strb.w	r0, [r6, fp]
   b85bc:	e7f6      	b.n	b85ac <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b85be:	2000      	movs	r0, #0
   b85c0:	f7ff ffb2 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b85c4:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b85c6:	7b38      	ldrb	r0, [r7, #12]
   b85c8:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b85ca:	b003      	add	sp, #12
   b85cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b85d0:	f002 bb41 	b.w	bac56 <digitalWrite>
} // End PCD_ReadRegister()
   b85d4:	b003      	add	sp, #12
   b85d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b85da <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b85da:	b538      	push	{r3, r4, r5, lr}
   b85dc:	460c      	mov	r4, r1
   b85de:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b85e0:	2100      	movs	r1, #0
   b85e2:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b85e4:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b85e8:	f002 fb35 	bl	bac56 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b85ec:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b85f0:	f7ff ff9a 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b85f4:	2000      	movs	r0, #0
   b85f6:	f7ff ff97 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b85fa:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b85fc:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b85fe:	7b28      	ldrb	r0, [r5, #12]
   b8600:	f002 fb29 	bl	bac56 <digitalWrite>
} // End PCD_ReadRegister()
   b8604:	4620      	mov	r0, r4
   b8606:	bd38      	pop	{r3, r4, r5, pc}

000b8608 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b8608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b860a:	460f      	mov	r7, r1
   b860c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b860e:	2100      	movs	r1, #0
   b8610:	7b00      	ldrb	r0, [r0, #12]
								) {
   b8612:	4615      	mov	r5, r2
   b8614:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8616:	f002 fb1e 	bl	bac56 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b861a:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b861e:	f7ff ff83 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8622:	4425      	add	r5, r4
   b8624:	42ac      	cmp	r4, r5
   b8626:	d004      	beq.n	b8632 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b8628:	f814 0b01 	ldrb.w	r0, [r4], #1
   b862c:	f7ff ff7c 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8630:	e7f8      	b.n	b8624 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8632:	7b30      	ldrb	r0, [r6, #12]
   b8634:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b863a:	f002 bb0c 	b.w	bac56 <digitalWrite>

000b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b863e:	b570      	push	{r4, r5, r6, lr}
   b8640:	4604      	mov	r4, r0
   b8642:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8644:	7b00      	ldrb	r0, [r0, #12]
   b8646:	2100      	movs	r1, #0
								) {
   b8648:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b864a:	f002 fb04 	bl	bac56 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b864e:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b8652:	f7ff ff69 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b8656:	4628      	mov	r0, r5
   b8658:	f7ff ff66 	bl	b8528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b865c:	7b20      	ldrb	r0, [r4, #12]
   b865e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8664:	f002 baf7 	b.w	bac56 <digitalWrite>

000b8668 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b8668:	b570      	push	{r4, r5, r6, lr}
   b866a:	4616      	mov	r6, r2
   b866c:	4604      	mov	r4, r0
   b866e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b8670:	f7ff ffb3 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8674:	4330      	orrs	r0, r6
   b8676:	b2c2      	uxtb	r2, r0
   b8678:	4629      	mov	r1, r5
   b867a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b867c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8680:	f7ff bfdd 	b.w	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b8684 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b8684:	b570      	push	{r4, r5, r6, lr}
   b8686:	4616      	mov	r6, r2
   b8688:	4604      	mov	r4, r0
   b868a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b868c:	f7ff ffa5 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b8690:	ea20 0006 	bic.w	r0, r0, r6
   b8694:	b2c2      	uxtb	r2, r0
   b8696:	4629      	mov	r1, r5
   b8698:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b869a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b869e:	f7ff bfce 	b.w	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b86a2 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b86a2:	2208      	movs	r2, #8
   b86a4:	2110      	movs	r1, #16
   b86a6:	f7ff bfed 	b.w	b8684 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b86aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86ac:	4604      	mov	r4, r0
   b86ae:	4615      	mov	r5, r2
   b86b0:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b86b2:	2200      	movs	r2, #0
   b86b4:	2102      	movs	r1, #2
					 ) {
   b86b6:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b86b8:	f7ff ffc1 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b86bc:	2204      	movs	r2, #4
   b86be:	210a      	movs	r1, #10
   b86c0:	4620      	mov	r0, r4
   b86c2:	f7ff ffbc 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b86c6:	2280      	movs	r2, #128	; 0x80
   b86c8:	2114      	movs	r1, #20
   b86ca:	4620      	mov	r0, r4
   b86cc:	f7ff ffcc 	bl	b8668 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b86d0:	462a      	mov	r2, r5
   b86d2:	463b      	mov	r3, r7
   b86d4:	2112      	movs	r1, #18
   b86d6:	4620      	mov	r0, r4
   b86d8:	f7ff ff96 	bl	b8608 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b86dc:	2203      	movs	r2, #3
   b86de:	2102      	movs	r1, #2
   b86e0:	4620      	mov	r0, r4
   b86e2:	f7ff ffac 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b86e6:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b86ea:	210a      	movs	r1, #10
   b86ec:	4620      	mov	r0, r4
   b86ee:	f7ff ff74 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b86f2:	0743      	lsls	r3, r0, #29
   b86f4:	d405      	bmi.n	b8702 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b86f6:	3d01      	subs	r5, #1
   b86f8:	b2ad      	uxth	r5, r5
   b86fa:	2d00      	cmp	r5, #0
   b86fc:	d1f5      	bne.n	b86ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b86fe:	2004      	movs	r0, #4
   b8700:	e00f      	b.n	b8722 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b8702:	2200      	movs	r2, #0
   b8704:	2102      	movs	r1, #2
   b8706:	4620      	mov	r0, r4
   b8708:	f7ff ff99 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b870c:	2144      	movs	r1, #68	; 0x44
   b870e:	4620      	mov	r0, r4
   b8710:	f7ff ff63 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8714:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b8716:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff ff5e 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b871e:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b8720:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b8722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8724 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b8724:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b8726:	220f      	movs	r2, #15
   b8728:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b872a:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b872c:	f7ff ff87 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b8730:	2032      	movs	r0, #50	; 0x32
   b8732:	f001 feb3 	bl	ba49c <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b8736:	2102      	movs	r1, #2
   b8738:	4620      	mov	r0, r4
   b873a:	f7ff ff4e 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b873e:	06c3      	lsls	r3, r0, #27
   b8740:	d4f9      	bmi.n	b8736 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b8742:	bd10      	pop	{r4, pc}

000b8744 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b8744:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b8746:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b8748:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b874a:	f7ff ff46 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b874e:	f000 0303 	and.w	r3, r0, #3
   b8752:	2b03      	cmp	r3, #3
   b8754:	d008      	beq.n	b8768 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8756:	f040 0203 	orr.w	r2, r0, #3
   b875a:	b2d2      	uxtb	r2, r2
   b875c:	4620      	mov	r0, r4
   b875e:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b8760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8764:	f7ff bf6b 	b.w	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b8768:	bd10      	pop	{r4, pc}

000b876a <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b876a:	b510      	push	{r4, lr}
   b876c:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b876e:	7b40      	ldrb	r0, [r0, #13]
   b8770:	f002 fa8a 	bl	bac88 <digitalRead>
   b8774:	bb48      	cbnz	r0, b87ca <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b8776:	7b60      	ldrb	r0, [r4, #13]
   b8778:	2101      	movs	r1, #1
   b877a:	f002 fa6c 	bl	bac56 <digitalWrite>
		delay(50);
   b877e:	2032      	movs	r0, #50	; 0x32
   b8780:	f001 fe8c 	bl	ba49c <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b8784:	4620      	mov	r0, r4
   b8786:	2280      	movs	r2, #128	; 0x80
   b8788:	2154      	movs	r1, #84	; 0x54
   b878a:	f7ff ff58 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b878e:	4620      	mov	r0, r4
   b8790:	22a9      	movs	r2, #169	; 0xa9
   b8792:	2156      	movs	r1, #86	; 0x56
   b8794:	f7ff ff53 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b8798:	4620      	mov	r0, r4
   b879a:	2203      	movs	r2, #3
   b879c:	2158      	movs	r1, #88	; 0x58
   b879e:	f7ff ff4e 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b87a2:	4620      	mov	r0, r4
   b87a4:	22e8      	movs	r2, #232	; 0xe8
   b87a6:	215a      	movs	r1, #90	; 0x5a
   b87a8:	f7ff ff49 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b87ac:	4620      	mov	r0, r4
   b87ae:	2240      	movs	r2, #64	; 0x40
   b87b0:	212a      	movs	r1, #42	; 0x2a
   b87b2:	f7ff ff44 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b87b6:	4620      	mov	r0, r4
   b87b8:	223d      	movs	r2, #61	; 0x3d
   b87ba:	2122      	movs	r1, #34	; 0x22
   b87bc:	f7ff ff3f 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b87c0:	4620      	mov	r0, r4
} // End PCD_Init()
   b87c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b87c6:	f7ff bfbd 	b.w	b8744 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b87ca:	4620      	mov	r0, r4
   b87cc:	f7ff ffaa 	bl	b8724 <_ZN7MFRC5229PCD_ResetEv>
   b87d0:	e7d8      	b.n	b8784 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b87d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b87d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87d6:	b089      	sub	sp, #36	; 0x24
   b87d8:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b87dc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b87e0:	9203      	str	r2, [sp, #12]
   b87e2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b87e6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b87ea:	9204      	str	r2, [sp, #16]
   b87ec:	4604      	mov	r4, r0
   b87ee:	468a      	mov	sl, r1
   b87f0:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b87f2:	f1b9 0f00 	cmp.w	r9, #0
   b87f6:	d03e      	beq.n	b8876 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b87f8:	f899 8000 	ldrb.w	r8, [r9]
   b87fc:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b87fe:	2200      	movs	r2, #0
   b8800:	2102      	movs	r1, #2
   b8802:	4620      	mov	r0, r4
   b8804:	f7ff ff1b 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b8808:	227f      	movs	r2, #127	; 0x7f
   b880a:	2108      	movs	r1, #8
   b880c:	4620      	mov	r0, r4
   b880e:	f7ff ff16 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8812:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b8816:	2280      	movs	r2, #128	; 0x80
   b8818:	2114      	movs	r1, #20
   b881a:	4620      	mov	r0, r4
   b881c:	f7ff ff24 	bl	b8668 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8820:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b8824:	9b05      	ldr	r3, [sp, #20]
   b8826:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b882a:	2112      	movs	r1, #18
   b882c:	4620      	mov	r0, r4
   b882e:	f7ff feeb 	bl	b8608 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b8832:	4642      	mov	r2, r8
   b8834:	211a      	movs	r1, #26
   b8836:	4620      	mov	r0, r4
   b8838:	f7ff ff01 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b883c:	4652      	mov	r2, sl
   b883e:	2102      	movs	r1, #2
   b8840:	4620      	mov	r0, r4
   b8842:	f7ff fefc 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b8846:	f1ba 0f0c 	cmp.w	sl, #12
   b884a:	d104      	bne.n	b8856 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b884c:	2280      	movs	r2, #128	; 0x80
   b884e:	211a      	movs	r1, #26
   b8850:	4620      	mov	r0, r4
   b8852:	f7ff ff09 	bl	b8668 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b8856:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b885a:	2108      	movs	r1, #8
   b885c:	4620      	mov	r0, r4
   b885e:	f7ff febc 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b8862:	9b03      	ldr	r3, [sp, #12]
   b8864:	4218      	tst	r0, r3
   b8866:	d108      	bne.n	b887a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b8868:	07c3      	lsls	r3, r0, #31
   b886a:	d402      	bmi.n	b8872 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b886c:	f1b8 0801 	subs.w	r8, r8, #1
   b8870:	d1f3      	bne.n	b885a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b8872:	2004      	movs	r0, #4
   b8874:	e04d      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b8876:	46c8      	mov	r8, r9
   b8878:	e7c0      	b.n	b87fc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b887a:	210c      	movs	r1, #12
   b887c:	4620      	mov	r0, r4
   b887e:	f7ff feac 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8882:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b8886:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8888:	d146      	bne.n	b8918 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b888a:	b1dd      	cbz	r5, b88c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b888c:	b1d6      	cbz	r6, b88c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b888e:	2114      	movs	r1, #20
   b8890:	4620      	mov	r0, r4
   b8892:	f7ff fea2 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b8896:	7833      	ldrb	r3, [r6, #0]
   b8898:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b889a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b889c:	d33e      	bcc.n	b891c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b889e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b88a0:	462b      	mov	r3, r5
   b88a2:	2112      	movs	r1, #18
   b88a4:	4620      	mov	r0, r4
   b88a6:	f8cd b000 	str.w	fp, [sp]
   b88aa:	f7ff fe47 	bl	b853c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b88ae:	2118      	movs	r1, #24
   b88b0:	4620      	mov	r0, r4
   b88b2:	f7ff fe92 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
   b88b6:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b88ba:	f1b9 0f00 	cmp.w	r9, #0
   b88be:	d001      	beq.n	b88c4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b88c0:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b88c4:	f018 0f08 	tst.w	r8, #8
   b88c8:	d12a      	bne.n	b8920 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b88ca:	b35d      	cbz	r5, b8924 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b88cc:	b356      	cbz	r6, b8924 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b88ce:	9b04      	ldr	r3, [sp, #16]
   b88d0:	b343      	cbz	r3, b8924 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b88d2:	7832      	ldrb	r2, [r6, #0]
   b88d4:	2a01      	cmp	r2, #1
   b88d6:	d103      	bne.n	b88e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b88d8:	2f04      	cmp	r7, #4
   b88da:	d125      	bne.n	b8928 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b88dc:	2009      	movs	r0, #9
   b88de:	e018      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b88e0:	d922      	bls.n	b8928 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b88e2:	bb0f      	cbnz	r7, b8928 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b88e4:	3a02      	subs	r2, #2
   b88e6:	ab07      	add	r3, sp, #28
   b88e8:	b2d2      	uxtb	r2, r2
   b88ea:	4629      	mov	r1, r5
   b88ec:	4620      	mov	r0, r4
   b88ee:	f7ff fedc 	bl	b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b88f2:	2801      	cmp	r0, #1
   b88f4:	d10d      	bne.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b88f6:	7833      	ldrb	r3, [r6, #0]
   b88f8:	441d      	add	r5, r3
   b88fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b88fe:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b8902:	429a      	cmp	r2, r3
   b8904:	d110      	bne.n	b8928 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b8906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b890a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b890e:	429a      	cmp	r2, r3
   b8910:	d10a      	bne.n	b8928 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b8912:	b009      	add	sp, #36	; 0x24
   b8914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b8918:	2002      	movs	r0, #2
   b891a:	e7fa      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b891c:	2005      	movs	r0, #5
   b891e:	e7f8      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b8920:	2003      	movs	r0, #3
   b8922:	e7f6      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b8924:	2001      	movs	r0, #1
   b8926:	e7f4      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b8928:	2008      	movs	r0, #8
   b892a:	e7f2      	b.n	b8912 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b892c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b892c:	b510      	push	{r4, lr}
   b892e:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b8930:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b8934:	9405      	str	r4, [sp, #20]
   b8936:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b893a:	9404      	str	r4, [sp, #16]
   b893c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b893e:	9403      	str	r4, [sp, #12]
   b8940:	9c08      	ldr	r4, [sp, #32]
   b8942:	9200      	str	r2, [sp, #0]
   b8944:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b8948:	2230      	movs	r2, #48	; 0x30
   b894a:	460b      	mov	r3, r1
   b894c:	210c      	movs	r1, #12
   b894e:	f7ff ff40 	bl	b87d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b8952:	b006      	add	sp, #24
   b8954:	bd10      	pop	{r4, pc}

000b8956 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b8956:	b570      	push	{r4, r5, r6, lr}
   b8958:	b088      	sub	sp, #32
   b895a:	4606      	mov	r6, r0
   b895c:	461c      	mov	r4, r3
   b895e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b8962:	4615      	mov	r5, r2
   b8964:	b31a      	cbz	r2, b89ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b8966:	781b      	ldrb	r3, [r3, #0]
   b8968:	2b01      	cmp	r3, #1
   b896a:	d920      	bls.n	b89ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b896c:	2280      	movs	r2, #128	; 0x80
   b896e:	211c      	movs	r1, #28
   b8970:	f7ff fe88 	bl	b8684 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b8974:	2307      	movs	r3, #7
   b8976:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b897a:	2300      	movs	r3, #0
   b897c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8980:	f10d 031f 	add.w	r3, sp, #31
   b8984:	e9cd 4300 	strd	r4, r3, [sp]
   b8988:	2201      	movs	r2, #1
   b898a:	462b      	mov	r3, r5
   b898c:	f10d 0117 	add.w	r1, sp, #23
   b8990:	4630      	mov	r0, r6
   b8992:	f7ff ffcb 	bl	b892c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b8996:	2801      	cmp	r0, #1
   b8998:	d107      	bne.n	b89aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b899a:	7823      	ldrb	r3, [r4, #0]
   b899c:	2b02      	cmp	r3, #2
   b899e:	d108      	bne.n	b89b2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b89a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b89a4:	2b00      	cmp	r3, #0
   b89a6:	bf18      	it	ne
   b89a8:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b89aa:	b008      	add	sp, #32
   b89ac:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b89ae:	2005      	movs	r0, #5
   b89b0:	e7fb      	b.n	b89aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b89b2:	2002      	movs	r0, #2
   b89b4:	e7f9      	b.n	b89aa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b89b6 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b89b6:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b89b8:	460a      	mov	r2, r1
   b89ba:	2126      	movs	r1, #38	; 0x26
   b89bc:	f7ff bfcb 	b.w	b8956 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b89c0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b89c0:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b89c2:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b89c4:	f10d 0203 	add.w	r2, sp, #3
   b89c8:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b89ca:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b89ce:	f7ff fff2 	bl	b89b6 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b89d2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b89d6:	1e43      	subs	r3, r0, #1
   b89d8:	4258      	negs	r0, r3
   b89da:	4158      	adcs	r0, r3
   b89dc:	b003      	add	sp, #12
   b89de:	f85d fb04 	ldr.w	pc, [sp], #4

000b89e2 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b89e2:	b570      	push	{r4, r5, r6, lr}
   b89e4:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b89e6:	2350      	movs	r3, #80	; 0x50
   b89e8:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b89ec:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b89ee:	f10d 0316 	add.w	r3, sp, #22
   b89f2:	2202      	movs	r2, #2
   b89f4:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b89f6:	4606      	mov	r6, r0
	buffer[1] = 0;
   b89f8:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b89fc:	f7ff fe55 	bl	b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8a00:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8a02:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b8a04:	d10f      	bne.n	b8a26 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b8a06:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b8a0a:	e9cd 4400 	strd	r4, r4, [sp]
   b8a0e:	4623      	mov	r3, r4
   b8a10:	2204      	movs	r2, #4
   b8a12:	a905      	add	r1, sp, #20
   b8a14:	4630      	mov	r0, r6
   b8a16:	f7ff ff89 	bl	b892c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b8a1a:	2804      	cmp	r0, #4
   b8a1c:	d003      	beq.n	b8a26 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b8a1e:	2801      	cmp	r0, #1
   b8a20:	bf14      	ite	ne
   b8a22:	4605      	movne	r5, r0
   b8a24:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b8a26:	4628      	mov	r0, r5
   b8a28:	b006      	add	sp, #24
   b8a2a:	bd70      	pop	{r4, r5, r6, pc}

000b8a2c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b8a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8a2e:	4606      	mov	r6, r0
   b8a30:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b8a32:	4614      	mov	r4, r2
   b8a34:	b1ca      	cbz	r2, b8a6a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b8a36:	781b      	ldrb	r3, [r3, #0]
   b8a38:	2b11      	cmp	r3, #17
   b8a3a:	d916      	bls.n	b8a6a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b8a3c:	2330      	movs	r3, #48	; 0x30
   b8a3e:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b8a40:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8a42:	1c93      	adds	r3, r2, #2
   b8a44:	4621      	mov	r1, r4
   b8a46:	2202      	movs	r2, #2
   b8a48:	f7ff fe2f 	bl	b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8a4c:	2801      	cmp	r0, #1
   b8a4e:	d10a      	bne.n	b8a66 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b8a50:	2300      	movs	r3, #0
   b8a52:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8a56:	9003      	str	r0, [sp, #12]
   b8a58:	9500      	str	r5, [sp, #0]
   b8a5a:	4623      	mov	r3, r4
   b8a5c:	2204      	movs	r2, #4
   b8a5e:	4621      	mov	r1, r4
   b8a60:	4630      	mov	r0, r6
   b8a62:	f7ff ff63 	bl	b892c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b8a66:	b004      	add	sp, #16
   b8a68:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b8a6a:	2005      	movs	r0, #5
   b8a6c:	e7fb      	b.n	b8a66 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b8a6e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b8a6e:	b510      	push	{r4, lr}
   b8a70:	b08a      	sub	sp, #40	; 0x28
   b8a72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b8a74:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b8a78:	681a      	ldr	r2, [r3, #0]
   b8a7a:	889b      	ldrh	r3, [r3, #4]
   b8a7c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b8a80:	7863      	ldrb	r3, [r4, #1]
   b8a82:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b8a86:	78a3      	ldrb	r3, [r4, #2]
   b8a88:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b8a8c:	78e3      	ldrb	r3, [r4, #3]
   b8a8e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b8a92:	7923      	ldrb	r3, [r4, #4]
   b8a94:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b8a98:	2300      	movs	r3, #0
   b8a9a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b8a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8aa2:	9301      	str	r3, [sp, #4]
   b8aa4:	230c      	movs	r3, #12
	sendData[0] = command;
   b8aa6:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b8aaa:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b8aae:	9300      	str	r3, [sp, #0]
   b8ab0:	2210      	movs	r2, #16
   b8ab2:	ab07      	add	r3, sp, #28
   b8ab4:	210e      	movs	r1, #14
   b8ab6:	f7ff fe8c 	bl	b87d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b8aba:	b00a      	add	sp, #40	; 0x28
   b8abc:	bd10      	pop	{r4, pc}

000b8abe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b8abe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b8ac2:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b8ac4:	b08b      	sub	sp, #44	; 0x2c
   b8ac6:	4682      	mov	sl, r0
   b8ac8:	460f      	mov	r7, r1
   b8aca:	4690      	mov	r8, r2
	if (validBits > 80) {
   b8acc:	f200 8140 	bhi.w	b8d50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b8ad0:	2280      	movs	r2, #128	; 0x80
   b8ad2:	211c      	movs	r1, #28
   b8ad4:	f7ff fdd6 	bl	b8684 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b8ad8:	2393      	movs	r3, #147	; 0x93
   b8ada:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b8ade:	f1b8 0f00 	cmp.w	r8, #0
   b8ae2:	f000 80bc 	beq.w	b8c5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b8ae6:	783c      	ldrb	r4, [r7, #0]
   b8ae8:	2c04      	cmp	r4, #4
   b8aea:	bf94      	ite	ls
   b8aec:	2300      	movls	r3, #0
   b8aee:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b8af0:	2501      	movs	r5, #1
   b8af2:	2600      	movs	r6, #0
   b8af4:	e00b      	b.n	b8b0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b8af6:	2395      	movs	r3, #149	; 0x95
   b8af8:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b8afc:	f1b8 0f00 	cmp.w	r8, #0
   b8b00:	f000 80af 	beq.w	b8c62 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b8b04:	783c      	ldrb	r4, [r7, #0]
   b8b06:	2c07      	cmp	r4, #7
   b8b08:	bf94      	ite	ls
   b8b0a:	2300      	movls	r3, #0
   b8b0c:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b8b0e:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b8b12:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b8b14:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b8b18:	2b00      	cmp	r3, #0
   b8b1a:	f000 80a4 	beq.w	b8c66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b8b1e:	2288      	movs	r2, #136	; 0x88
   b8b20:	f88d 201e 	strb.w	r2, [sp, #30]
   b8b24:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b8b26:	f014 0207 	ands.w	r2, r4, #7
   b8b2a:	bf18      	it	ne
   b8b2c:	2201      	movne	r2, #1
   b8b2e:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b8b32:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b8b36:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b8b38:	d01d      	beq.n	b8b76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b8b3a:	2b00      	cmp	r3, #0
   b8b3c:	bf14      	ite	ne
   b8b3e:	f04f 0903 	movne.w	r9, #3
   b8b42:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b8b46:	f106 0c01 	add.w	ip, r6, #1
   b8b4a:	4591      	cmp	r9, r2
   b8b4c:	bf94      	ite	ls
   b8b4e:	eb01 0e09 	addls.w	lr, r1, r9
   b8b52:	eb01 0e02 	addhi.w	lr, r1, r2
   b8b56:	fa57 fc8c 	uxtab	ip, r7, ip
   b8b5a:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b8b5e:	460a      	mov	r2, r1
   b8b60:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b8b64:	3101      	adds	r1, #1
   b8b66:	b2c9      	uxtb	r1, r1
   b8b68:	445a      	add	r2, fp
   b8b6a:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b8b6e:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b8b72:	4571      	cmp	r1, lr
   b8b74:	d1f3      	bne.n	b8b5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b8b76:	b10b      	cbz	r3, b8b7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b8b78:	3008      	adds	r0, #8
   b8b7a:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b8b7c:	2c1f      	cmp	r4, #31
   b8b7e:	dd74      	ble.n	b8c6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b8b80:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b8b84:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b8b88:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b8b8c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b8b90:	4053      	eors	r3, r2
   b8b92:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b8b96:	4053      	eors	r3, r2
   b8b98:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b8b9c:	4053      	eors	r3, r2
   b8b9e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b8ba2:	2207      	movs	r2, #7
   b8ba4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b8ba8:	a907      	add	r1, sp, #28
   b8baa:	4650      	mov	r0, sl
   b8bac:	f7ff fd7d 	bl	b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b8bb0:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b8bb2:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b8bb4:	f040 80c8 	bne.w	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b8bb8:	2300      	movs	r3, #0
   b8bba:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b8bbe:	2303      	movs	r3, #3
   b8bc0:	f88d 301b 	strb.w	r3, [sp, #27]
   b8bc4:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b8bc6:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b8bca:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b8bce:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8bd2:	9305      	str	r3, [sp, #20]
   b8bd4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b8bd8:	b2d2      	uxtb	r2, r2
   b8bda:	211a      	movs	r1, #26
   b8bdc:	4650      	mov	r0, sl
   b8bde:	f7ff fd2e 	bl	b863e <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b8be2:	9b05      	ldr	r3, [sp, #20]
   b8be4:	9302      	str	r3, [sp, #8]
   b8be6:	f10d 031a 	add.w	r3, sp, #26
   b8bea:	2200      	movs	r2, #0
   b8bec:	9301      	str	r3, [sp, #4]
   b8bee:	f10d 031b 	add.w	r3, sp, #27
   b8bf2:	9203      	str	r2, [sp, #12]
   b8bf4:	9300      	str	r3, [sp, #0]
   b8bf6:	464a      	mov	r2, r9
   b8bf8:	465b      	mov	r3, fp
   b8bfa:	a907      	add	r1, sp, #28
   b8bfc:	4650      	mov	r0, sl
   b8bfe:	f7ff fe95 	bl	b892c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b8c02:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b8c04:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b8c06:	d14c      	bne.n	b8ca2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b8c08:	211c      	movs	r1, #28
   b8c0a:	4650      	mov	r0, sl
   b8c0c:	f7ff fce5 	bl	b85da <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b8c10:	0681      	lsls	r1, r0, #26
   b8c12:	f100 8099 	bmi.w	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b8c16:	f010 001f 	ands.w	r0, r0, #31
   b8c1a:	bf08      	it	eq
   b8c1c:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b8c1e:	42a0      	cmp	r0, r4
   b8c20:	f340 8087 	ble.w	b8d32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b8c24:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b8c26:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b8c2a:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b8c2c:	f013 0307 	ands.w	r3, r3, #7
   b8c30:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b8c34:	bf18      	it	ne
   b8c36:	2301      	movne	r3, #1
   b8c38:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b8c3a:	4418      	add	r0, r3
   b8c3c:	ab0a      	add	r3, sp, #40	; 0x28
   b8c3e:	4418      	add	r0, r3
   b8c40:	2301      	movs	r3, #1
   b8c42:	fa03 f202 	lsl.w	r2, r3, r2
   b8c46:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b8c4a:	4313      	orrs	r3, r2
   b8c4c:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b8c50:	e794      	b.n	b8b7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b8c52:	2397      	movs	r3, #151	; 0x97
   b8c54:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b8c58:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b8c5a:	4623      	mov	r3, r4
				break;
   b8c5c:	e757      	b.n	b8b0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b8c5e:	4643      	mov	r3, r8
   b8c60:	e746      	b.n	b8af0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b8c62:	4643      	mov	r3, r8
   b8c64:	e753      	b.n	b8b0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b8c66:	2102      	movs	r1, #2
   b8c68:	e75d      	b.n	b8b26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b8c6a:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b8c6c:	3302      	adds	r3, #2
   b8c6e:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b8c70:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8c74:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b8c78:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b8c7c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b8c80:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8c84:	bf18      	it	ne
   b8c86:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b8c8a:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8c8c:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b8c8e:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b8c92:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b8c96:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b8c9a:	f88d 301b 	strb.w	r3, [sp, #27]
   b8c9e:	9404      	str	r4, [sp, #16]
   b8ca0:	e795      	b.n	b8bce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b8ca2:	2801      	cmp	r0, #1
   b8ca4:	d150      	bne.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b8ca6:	9b04      	ldr	r3, [sp, #16]
   b8ca8:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b8caa:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b8cae:	f77f af67 	ble.w	b8b80 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b8cb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b8cb6:	2b88      	cmp	r3, #136	; 0x88
   b8cb8:	d13e      	bne.n	b8d38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b8cba:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b8cbc:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b8cbe:	3601      	adds	r6, #1
   b8cc0:	441a      	add	r2, r3
   b8cc2:	fa57 f686 	uxtab	r6, r7, r6
   b8cc6:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b8cc8:	4619      	mov	r1, r3
   b8cca:	a80a      	add	r0, sp, #40	; 0x28
   b8ccc:	3301      	adds	r3, #1
   b8cce:	4401      	add	r1, r0
   b8cd0:	b2db      	uxtb	r3, r3
   b8cd2:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b8cd6:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b8cda:	4293      	cmp	r3, r2
   b8cdc:	d1f4      	bne.n	b8cc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b8cde:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b8ce2:	2e03      	cmp	r6, #3
   b8ce4:	d137      	bne.n	b8d56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b8ce6:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b8cea:	bba4      	cbnz	r4, b8d56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b8cec:	f10d 031e 	add.w	r3, sp, #30
   b8cf0:	2201      	movs	r2, #1
   b8cf2:	4659      	mov	r1, fp
   b8cf4:	4650      	mov	r0, sl
   b8cf6:	f7ff fcd8 	bl	b86aa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b8cfa:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b8cfc:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b8cfe:	d123      	bne.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b8d00:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b8d04:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b8d08:	429a      	cmp	r2, r3
   b8d0a:	d127      	bne.n	b8d5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b8d0c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b8d10:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b8d14:	429a      	cmp	r2, r3
   b8d16:	d121      	bne.n	b8d5c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b8d18:	f89b 3000 	ldrb.w	r3, [fp]
   b8d1c:	075a      	lsls	r2, r3, #29
   b8d1e:	d50e      	bpl.n	b8d3e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b8d20:	3501      	adds	r5, #1
   b8d22:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b8d24:	2d03      	cmp	r5, #3
   b8d26:	d094      	beq.n	b8c52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b8d28:	2d04      	cmp	r5, #4
   b8d2a:	d002      	beq.n	b8d32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b8d2c:	2d02      	cmp	r5, #2
   b8d2e:	f43f aee2 	beq.w	b8af6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b8d32:	f04f 0906 	mov.w	r9, #6
   b8d36:	e007      	b.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b8d38:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b8d3a:	2204      	movs	r2, #4
   b8d3c:	e7bf      	b.n	b8cbe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b8d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b8d42:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b8d44:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b8d46:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b8d48:	4648      	mov	r0, r9
   b8d4a:	b00b      	add	sp, #44	; 0x2c
   b8d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b8d50:	f04f 0907 	mov.w	r9, #7
   b8d54:	e7f8      	b.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b8d56:	f04f 0902 	mov.w	r9, #2
   b8d5a:	e7f5      	b.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b8d5c:	f04f 0908 	mov.w	r9, #8
   b8d60:	e7f2      	b.n	b8d48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b8d62 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b8d62:	b508      	push	{r3, lr}
   b8d64:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b8d66:	2200      	movs	r2, #0
   b8d68:	f7ff fea9 	bl	b8abe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b8d6c:	1e43      	subs	r3, r0, #1
   b8d6e:	4258      	negs	r0, r3
   b8d70:	4158      	adcs	r0, r3
   b8d72:	bd08      	pop	{r3, pc}

000b8d74 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b8d74:	6001      	str	r1, [r0, #0]
}
   b8d76:	4770      	bx	lr

000b8d78 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b8d78:	b510      	push	{r4, lr}
   b8d7a:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b8d7c:	2101      	movs	r1, #1
   b8d7e:	8800      	ldrh	r0, [r0, #0]
   b8d80:	f001 ff58 	bl	bac34 <pinMode>
	digitalWrite(_pin, LOW);
   b8d84:	8820      	ldrh	r0, [r4, #0]
   b8d86:	2100      	movs	r1, #0
   b8d88:	f001 ff65 	bl	bac56 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b8d8c:	2002      	movs	r0, #2
   b8d8e:	f000 fe7f 	bl	b9a90 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b8d92:	8820      	ldrh	r0, [r4, #0]
   b8d94:	2101      	movs	r1, #1
   b8d96:	f001 ff5e 	bl	bac56 <digitalWrite>
   b8d9a:	2005      	movs	r0, #5
   b8d9c:	f000 fe78 	bl	b9a90 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b8da0:	8820      	ldrh	r0, [r4, #0]
   b8da2:	2100      	movs	r1, #0
   b8da4:	f001 ff57 	bl	bac56 <digitalWrite>
	pinMode(_pin,INPUT);
   b8da8:	8820      	ldrh	r0, [r4, #0]
   b8daa:	2100      	movs	r1, #0
   b8dac:	f001 ff42 	bl	bac34 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b8db0:	8820      	ldrh	r0, [r4, #0]
   b8db2:	2101      	movs	r1, #1
   b8db4:	f001 ffae 	bl	bad14 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b8db8:	233a      	movs	r3, #58	; 0x3a
   b8dba:	fb90 f0f3 	sdiv	r0, r0, r3
   b8dbe:	bd10      	pop	{r4, pc}

000b8dc0 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b8dc0:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b8dc2:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b8dc4:	2301      	movs	r3, #1
	_pin = pin;
   b8dc6:	7181      	strb	r1, [r0, #6]
	_type = type;
   b8dc8:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b8dca:	7403      	strb	r3, [r0, #16]
}
   b8dcc:	bd10      	pop	{r4, pc}

000b8dce <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b8dce:	b510      	push	{r4, lr}
   b8dd0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b8dd2:	2100      	movs	r1, #0
   b8dd4:	7980      	ldrb	r0, [r0, #6]
   b8dd6:	f001 ff2d 	bl	bac34 <pinMode>
	digitalWrite(_pin, HIGH);
   b8dda:	79a0      	ldrb	r0, [r4, #6]
   b8ddc:	2101      	movs	r1, #1
   b8dde:	f001 ff3a 	bl	bac56 <digitalWrite>
	_lastreadtime = 0;
   b8de2:	2300      	movs	r3, #0
   b8de4:	60e3      	str	r3, [r4, #12]
}
   b8de6:	bd10      	pop	{r4, pc}

000b8de8 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b8de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8dec:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8dee:	f000 fe57 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b8df2:	68e3      	ldr	r3, [r4, #12]
   b8df4:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b8df6:	bf84      	itt	hi
   b8df8:	2300      	movhi	r3, #0
   b8dfa:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b8dfc:	7c23      	ldrb	r3, [r4, #16]
   b8dfe:	b923      	cbnz	r3, b8e0a <_ZN3DHT4readEv+0x22>
   b8e00:	68e3      	ldr	r3, [r4, #12]
   b8e02:	1ac0      	subs	r0, r0, r3
   b8e04:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b8e08:	d367      	bcc.n	b8eda <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b8e0a:	2500      	movs	r5, #0
   b8e0c:	7425      	strb	r5, [r4, #16]
   b8e0e:	f000 fe47 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b8e12:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b8e14:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b8e16:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b8e18:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b8e1a:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b8e1c:	f001 ff1b 	bl	bac56 <digitalWrite>
	delay(250);
   b8e20:	20fa      	movs	r0, #250	; 0xfa
   b8e22:	f001 fb3b 	bl	ba49c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b8e26:	79a0      	ldrb	r0, [r4, #6]
   b8e28:	2101      	movs	r1, #1
   b8e2a:	f001 ff03 	bl	bac34 <pinMode>
	digitalWrite(_pin, LOW);
   b8e2e:	4629      	mov	r1, r5
   b8e30:	79a0      	ldrb	r0, [r4, #6]
   b8e32:	f001 ff10 	bl	bac56 <digitalWrite>
	delay(20);
   b8e36:	2014      	movs	r0, #20
   b8e38:	f001 fb30 	bl	ba49c <delay>
	noInterrupts();
   b8e3c:	f001 fcea 	bl	ba814 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b8e40:	2101      	movs	r1, #1
   b8e42:	79a0      	ldrb	r0, [r4, #6]
   b8e44:	f001 ff07 	bl	bac56 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b8e48:	2028      	movs	r0, #40	; 0x28
   b8e4a:	f000 fe21 	bl	b9a90 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b8e4e:	79a0      	ldrb	r0, [r4, #6]
   b8e50:	4629      	mov	r1, r5
   b8e52:	f001 feef 	bl	bac34 <pinMode>
	uint8_t j = 0, i;
   b8e56:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b8e58:	2701      	movs	r7, #1
   b8e5a:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b8e5e:	79a0      	ldrb	r0, [r4, #6]
   b8e60:	f001 ff12 	bl	bac88 <digitalRead>
   b8e64:	42b8      	cmp	r0, r7
   b8e66:	fa5f f988 	uxtb.w	r9, r8
   b8e6a:	d108      	bne.n	b8e7e <_ZN3DHT4readEv+0x96>
   b8e6c:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b8e6e:	f108 0801 	add.w	r8, r8, #1
   b8e72:	f000 fe0d 	bl	b9a90 <HAL_Delay_Microseconds>
   b8e76:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b8e7a:	d1f0      	bne.n	b8e5e <_ZN3DHT4readEv+0x76>
   b8e7c:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b8e7e:	79a0      	ldrb	r0, [r4, #6]
   b8e80:	f001 ff02 	bl	bac88 <digitalRead>

		if (counter == 255) break;
   b8e84:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b8e88:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b8e8a:	d014      	beq.n	b8eb6 <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b8e8c:	2d03      	cmp	r5, #3
   b8e8e:	d90e      	bls.n	b8eae <_ZN3DHT4readEv+0xc6>
   b8e90:	07ea      	lsls	r2, r5, #31
   b8e92:	d40c      	bmi.n	b8eae <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b8e94:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b8e96:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b8e98:	5ca3      	ldrb	r3, [r4, r2]
   b8e9a:	005b      	lsls	r3, r3, #1
   b8e9c:	b2db      	uxtb	r3, r3
   b8e9e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b8ea0:	7a21      	ldrb	r1, [r4, #8]
   b8ea2:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b8ea4:	bf3c      	itt	cc
   b8ea6:	f043 0301 	orrcc.w	r3, r3, #1
   b8eaa:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b8eac:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b8eae:	3501      	adds	r5, #1
   b8eb0:	b2ed      	uxtb	r5, r5
   b8eb2:	2d55      	cmp	r5, #85	; 0x55
   b8eb4:	d1d1      	bne.n	b8e5a <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b8eb6:	f001 fcaf 	bl	ba818 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b8eba:	2e27      	cmp	r6, #39	; 0x27
   b8ebc:	d90f      	bls.n	b8ede <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b8ebe:	7863      	ldrb	r3, [r4, #1]
   b8ec0:	7820      	ldrb	r0, [r4, #0]
   b8ec2:	4418      	add	r0, r3
   b8ec4:	78a3      	ldrb	r3, [r4, #2]
   b8ec6:	4418      	add	r0, r3
   b8ec8:	78e3      	ldrb	r3, [r4, #3]
   b8eca:	4418      	add	r0, r3
   b8ecc:	7923      	ldrb	r3, [r4, #4]
   b8ece:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b8ed0:	1ac3      	subs	r3, r0, r3
   b8ed2:	4258      	negs	r0, r3
   b8ed4:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b8ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b8eda:	2001      	movs	r0, #1
   b8edc:	e7fb      	b.n	b8ed6 <_ZN3DHT4readEv+0xee>
	return false;
   b8ede:	2000      	movs	r0, #0
   b8ee0:	e7f9      	b.n	b8ed6 <_ZN3DHT4readEv+0xee>
	...

000b8ee4 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b8ee4:	b510      	push	{r4, lr}
   b8ee6:	4604      	mov	r4, r0
	if (read()) {
   b8ee8:	f7ff ff7e 	bl	b8de8 <_ZN3DHT4readEv>
   b8eec:	b320      	cbz	r0, b8f38 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b8eee:	79e3      	ldrb	r3, [r4, #7]
   b8ef0:	2b0b      	cmp	r3, #11
   b8ef2:	d01b      	beq.n	b8f2c <_ZN3DHT15readTemperatureEv+0x48>
   b8ef4:	3b15      	subs	r3, #21
   b8ef6:	2b01      	cmp	r3, #1
   b8ef8:	d81e      	bhi.n	b8f38 <_ZN3DHT15readTemperatureEv+0x54>
   b8efa:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b8efc:	eddf 6a10 	vldr	s13, [pc, #64]	; b8f40 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b8f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b8f04:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b8f08:	78e2      	ldrb	r2, [r4, #3]
   b8f0a:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b8f0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b8f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b8f16:	061b      	lsls	r3, r3, #24
				f += data[3];
   b8f18:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b8f1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b8f20:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b8f24:	d507      	bpl.n	b8f36 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b8f26:	eeb1 0a40 	vneg.f32	s0, s0
   b8f2a:	e004      	b.n	b8f36 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b8f2c:	78a3      	ldrb	r3, [r4, #2]
   b8f2e:	ee00 3a10 	vmov	s0, r3
   b8f32:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b8f36:	bd10      	pop	{r4, pc}
		switch (_type) {
   b8f38:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8f44 <_ZN3DHT15readTemperatureEv+0x60>
   b8f3c:	e7fb      	b.n	b8f36 <_ZN3DHT15readTemperatureEv+0x52>
   b8f3e:	bf00      	nop
   b8f40:	43800000 	.word	0x43800000
   b8f44:	7fc00000 	.word	0x7fc00000

000b8f48 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b8f48:	f7ff bfcc 	b.w	b8ee4 <_ZN3DHT15readTemperatureEv>

000b8f4c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8f4c:	b510      	push	{r4, lr}
   b8f4e:	4b04      	ldr	r3, [pc, #16]	; (b8f60 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b8f50:	6003      	str	r3, [r0, #0]
   b8f52:	4604      	mov	r4, r0
  if(buffer) {
   b8f54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8f56:	b108      	cbz	r0, b8f5c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b8f58:	f000 ff96 	bl	b9e88 <free>
    buffer = NULL;
  }
}
   b8f5c:	4620      	mov	r0, r4
   b8f5e:	bd10      	pop	{r4, pc}
   b8f60:	000bcc28 	.word	0x000bcc28

000b8f64 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b8f64:	b510      	push	{r4, lr}
   b8f66:	4604      	mov	r4, r0
}
   b8f68:	f7ff fff0 	bl	b8f4c <_ZN16Adafruit_SSD1306D1Ev>
   b8f6c:	4620      	mov	r0, r4
   b8f6e:	2150      	movs	r1, #80	; 0x50
   b8f70:	f7fb fcb9 	bl	b48e6 <_ZdlPvj>
   b8f74:	4620      	mov	r0, r4
   b8f76:	bd10      	pop	{r4, pc}

000b8f78 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8f78:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b8f7a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b8f7c:	db4b      	blt.n	b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8f7e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b8f82:	428c      	cmp	r4, r1
   b8f84:	dd47      	ble.n	b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8f86:	2a00      	cmp	r2, #0
   b8f88:	db45      	blt.n	b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b8f8a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b8f8e:	4294      	cmp	r4, r2
   b8f90:	dd41      	ble.n	b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b8f92:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b8f94:	2c02      	cmp	r4, #2
   b8f96:	d01f      	beq.n	b8fd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b8f98:	2c03      	cmp	r4, #3
   b8f9a:	d026      	beq.n	b8fea <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b8f9c:	2c01      	cmp	r4, #1
   b8f9e:	d104      	bne.n	b8faa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b8fa0:	8904      	ldrh	r4, [r0, #8]
   b8fa2:	43d2      	mvns	r2, r2
   b8fa4:	4414      	add	r4, r2
      break;
   b8fa6:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b8fa8:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b8faa:	2b01      	cmp	r3, #1
   b8fac:	d023      	beq.n	b8ff6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b8fae:	2b02      	cmp	r3, #2
   b8fb0:	d032      	beq.n	b9018 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b8fb2:	bb83      	cbnz	r3, b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b8fb4:	2a00      	cmp	r2, #0
   b8fb6:	4613      	mov	r3, r2
   b8fb8:	8904      	ldrh	r4, [r0, #8]
   b8fba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8fbc:	bfb8      	it	lt
   b8fbe:	1dd3      	addlt	r3, r2, #7
   b8fc0:	10db      	asrs	r3, r3, #3
   b8fc2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b8fc6:	f002 0207 	and.w	r2, r2, #7
   b8fca:	2301      	movs	r3, #1
   b8fcc:	4093      	lsls	r3, r2
   b8fce:	5c42      	ldrb	r2, [r0, r1]
   b8fd0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b8fd4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b8fd6:	e01e      	b.n	b9016 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b8fd8:	8904      	ldrh	r4, [r0, #8]
   b8fda:	3c01      	subs	r4, #1
   b8fdc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b8fde:	8944      	ldrh	r4, [r0, #10]
   b8fe0:	43d2      	mvns	r2, r2
   b8fe2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b8fe4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b8fe6:	b212      	sxth	r2, r2
      break;
   b8fe8:	e7df      	b.n	b8faa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b8fea:	8944      	ldrh	r4, [r0, #10]
   b8fec:	3c01      	subs	r4, #1
   b8fee:	1a64      	subs	r4, r4, r1
      break;
   b8ff0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b8ff2:	b222      	sxth	r2, r4
      break;
   b8ff4:	e7d9      	b.n	b8faa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b8ff6:	2a00      	cmp	r2, #0
   b8ff8:	8904      	ldrh	r4, [r0, #8]
   b8ffa:	4613      	mov	r3, r2
   b8ffc:	bfb8      	it	lt
   b8ffe:	1dd3      	addlt	r3, r2, #7
   b9000:	10db      	asrs	r3, r3, #3
   b9002:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b9008:	f002 0007 	and.w	r0, r2, #7
   b900c:	2201      	movs	r2, #1
   b900e:	4082      	lsls	r2, r0
   b9010:	5c58      	ldrb	r0, [r3, r1]
   b9012:	4302      	orrs	r2, r0
   b9014:	545a      	strb	r2, [r3, r1]
}
   b9016:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9018:	2a00      	cmp	r2, #0
   b901a:	4613      	mov	r3, r2
   b901c:	8904      	ldrh	r4, [r0, #8]
   b901e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9020:	bfb8      	it	lt
   b9022:	1dd3      	addlt	r3, r2, #7
   b9024:	10db      	asrs	r3, r3, #3
   b9026:	fb13 1104 	smlabb	r1, r3, r4, r1
   b902a:	f002 0207 	and.w	r2, r2, #7
   b902e:	2301      	movs	r3, #1
   b9030:	fa03 f202 	lsl.w	r2, r3, r2
   b9034:	5c43      	ldrb	r3, [r0, r1]
   b9036:	405a      	eors	r2, r3
   b9038:	e7cc      	b.n	b8fd4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b903c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b903c:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b903e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b9040:	4604      	mov	r4, r0
   b9042:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b9044:	2180      	movs	r1, #128	; 0x80
   b9046:	f7fe fe1d 	bl	b7c84 <_ZN12Adafruit_GFXC1Ess>
   b904a:	2500      	movs	r5, #0
   b904c:	4b0d      	ldr	r3, [pc, #52]	; (b9084 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b904e:	6023      	str	r3, [r4, #0]
   b9050:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b9052:	f001 fed3 	bl	badfc <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b9056:	23ff      	movs	r3, #255	; 0xff
   b9058:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b905c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b9060:	4b09      	ldr	r3, [pc, #36]	; (b9088 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b9062:	63a3      	str	r3, [r4, #56]	; 0x38
   b9064:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9068:	2301      	movs	r3, #1
   b906a:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b906e:	86a2      	strh	r2, [r4, #52]	; 0x34
   b9070:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b9074:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b9078:	6425      	str	r5, [r4, #64]	; 0x40
   b907a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b907e:	4620      	mov	r0, r4
   b9080:	bd70      	pop	{r4, r5, r6, pc}
   b9082:	bf00      	nop
   b9084:	000bcc28 	.word	0x000bcc28
   b9088:	000bc634 	.word	0x000bc634

000b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b908e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9090:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9092:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9094:	b190      	cbz	r0, b90bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b9096:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b909a:	f001 fc93 	bl	ba9c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b909e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b90a0:	6803      	ldr	r3, [r0, #0]
   b90a2:	2100      	movs	r1, #0
   b90a4:	689b      	ldr	r3, [r3, #8]
   b90a6:	4798      	blx	r3
    WIRE_WRITE(c);
   b90a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b90aa:	6803      	ldr	r3, [r0, #0]
   b90ac:	4629      	mov	r1, r5
   b90ae:	689b      	ldr	r3, [r3, #8]
   b90b0:	4798      	blx	r3
    wire->endTransmission();
   b90b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b90b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b90b8:	f001 bc8b 	b.w	ba9d2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b90bc:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b90c0:	4601      	mov	r1, r0
   b90c2:	b298      	uxth	r0, r3
   b90c4:	f001 fdc7 	bl	bac56 <digitalWrite>
  if(spi) {
   b90c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b90ca:	b120      	cbz	r0, b90d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b90cc:	4629      	mov	r1, r5
}
   b90ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b90d2:	f000 bffb 	b.w	ba0cc <_ZN8SPIClass8transferEh>
   b90d6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b90d8:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b90da:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b90de:	ea05 0107 	and.w	r1, r5, r7
   b90e2:	b280      	uxth	r0, r0
   b90e4:	f001 fdb7 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b90e8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b90ec:	2101      	movs	r1, #1
   b90ee:	b280      	uxth	r0, r0
   b90f0:	f001 fdb1 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b90f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b90f8:	2100      	movs	r1, #0
   b90fa:	b280      	uxth	r0, r0
   b90fc:	f001 fdab 	bl	bac56 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9100:	3e01      	subs	r6, #1
   b9102:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b9106:	d1e8      	bne.n	b90da <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b9108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b910a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b910a:	b538      	push	{r3, r4, r5, lr}
   b910c:	4604      	mov	r4, r0
  TRANSACTION_START
   b910e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9110:	460d      	mov	r5, r1
  TRANSACTION_START
   b9112:	b180      	cbz	r0, b9136 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b9114:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9116:	f001 fc47 	bl	ba9a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b911a:	2d00      	cmp	r5, #0
   b911c:	4620      	mov	r0, r4
   b911e:	bf14      	ite	ne
   b9120:	21a7      	movne	r1, #167	; 0xa7
   b9122:	21a6      	moveq	r1, #166	; 0xa6
   b9124:	f7ff ffb2 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b9128:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b912a:	b188      	cbz	r0, b9150 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b912c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b912e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9132:	f001 bc39 	b.w	ba9a8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b9136:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9138:	b118      	cbz	r0, b9142 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b913a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b913e:	f000 ff57 	bl	b9ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9142:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9146:	2100      	movs	r1, #0
   b9148:	b280      	uxth	r0, r0
   b914a:	f001 fd84 	bl	bac56 <digitalWrite>
   b914e:	e7e4      	b.n	b911a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b9150:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9154:	2101      	movs	r1, #1
   b9156:	b280      	uxth	r0, r0
   b9158:	f001 fd7d 	bl	bac56 <digitalWrite>
   b915c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b915e:	b118      	cbz	r0, b9168 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b9160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b9164:	f000 bf2a 	b.w	b9fbc <_ZN8SPIClass14endTransactionEv>
}
   b9168:	bd38      	pop	{r3, r4, r5, pc}

000b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b916a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b916e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9170:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9172:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9174:	188f      	adds	r7, r1, r2
   b9176:	b340      	cbz	r0, b91ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b9178:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b917c:	f001 fc22 	bl	ba9c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9180:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9182:	6803      	ldr	r3, [r0, #0]
   b9184:	2100      	movs	r1, #0
   b9186:	689b      	ldr	r3, [r3, #8]
   b9188:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b918a:	2601      	movs	r6, #1
    while(n--) {
   b918c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b918e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b9190:	d017      	beq.n	b91c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b9192:	2e1f      	cmp	r6, #31
   b9194:	d90c      	bls.n	b91b0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b9196:	f001 fc1c 	bl	ba9d2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b919a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b919e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b91a0:	f001 fc10 	bl	ba9c4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b91a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b91a6:	6803      	ldr	r3, [r0, #0]
   b91a8:	2100      	movs	r1, #0
   b91aa:	689b      	ldr	r3, [r3, #8]
   b91ac:	4798      	blx	r3
        bytesOut = 1;
   b91ae:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b91b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b91b2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b91b6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b91b8:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b91ba:	689b      	ldr	r3, [r3, #8]
   b91bc:	4798      	blx	r3
      bytesOut++;
   b91be:	b2f6      	uxtb	r6, r6
    while(n--) {
   b91c0:	e7e4      	b.n	b918c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b91c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b91c6:	f001 bc04 	b.w	ba9d2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b91ca:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b91ce:	4601      	mov	r1, r0
   b91d0:	b298      	uxth	r0, r3
   b91d2:	f001 fd40 	bl	bac56 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b91d6:	42bd      	cmp	r5, r7
   b91d8:	d022      	beq.n	b9220 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b91da:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b91dc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b91e0:	b118      	cbz	r0, b91ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b91e2:	4649      	mov	r1, r9
   b91e4:	f000 ff72 	bl	ba0cc <_ZN8SPIClass8transferEh>
   b91e8:	e7f5      	b.n	b91d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b91ea:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b91ec:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b91f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b91f4:	ea09 0108 	and.w	r1, r9, r8
   b91f8:	b280      	uxth	r0, r0
   b91fa:	f001 fd2c 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b91fe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9202:	2101      	movs	r1, #1
   b9204:	b280      	uxth	r0, r0
   b9206:	f001 fd26 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b920a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b920e:	2100      	movs	r1, #0
   b9210:	b280      	uxth	r0, r0
   b9212:	f001 fd20 	bl	bac56 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9216:	3e01      	subs	r6, #1
   b9218:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b921c:	d1e8      	bne.n	b91f0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b921e:	e7da      	b.n	b91d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b9220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b9224:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9228:	1dda      	adds	r2, r3, #7
   b922a:	bf48      	it	mi
   b922c:	f103 020e 	addmi.w	r2, r3, #14
   b9230:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b9234:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9236:	10d2      	asrs	r2, r2, #3
   b9238:	435a      	muls	r2, r3
   b923a:	2100      	movs	r1, #0
   b923c:	f001 be20 	b.w	bae80 <memset>

000b9240 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b9240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9244:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b9248:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b924c:	4604      	mov	r4, r0
   b924e:	460f      	mov	r7, r1
   b9250:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9252:	b1d3      	cbz	r3, b928a <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b9254:	4620      	mov	r0, r4
   b9256:	f7ff ffe5 	bl	b9224 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b925a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b925e:	2a20      	cmp	r2, #32
   b9260:	dc25      	bgt.n	b92ae <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9262:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b9266:	2320      	movs	r3, #32
   b9268:	3a20      	subs	r2, #32
   b926a:	3973      	subs	r1, #115	; 0x73
   b926c:	2001      	movs	r0, #1
   b926e:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b9272:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9276:	2373      	movs	r3, #115	; 0x73
   b9278:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b927c:	9300      	str	r3, [sp, #0]
   b927e:	f342 024f 	sbfx	r2, r2, #1, #16
   b9282:	4b85      	ldr	r3, [pc, #532]	; (b9498 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b9284:	f341 014f 	sbfx	r1, r1, #1, #16
   b9288:	e01b      	b.n	b92c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b928a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b928e:	1dd8      	adds	r0, r3, #7
   b9290:	bf48      	it	mi
   b9292:	f103 000e 	addmi.w	r0, r3, #14
   b9296:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b929a:	10c0      	asrs	r0, r0, #3
   b929c:	4358      	muls	r0, r3
   b929e:	f000 fdeb 	bl	b9e78 <malloc>
   b92a2:	62e0      	str	r0, [r4, #44]	; 0x2c
   b92a4:	2800      	cmp	r0, #0
   b92a6:	d1d5      	bne.n	b9254 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b92a8:	b004      	add	sp, #16
   b92aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b92ae:	2340      	movs	r3, #64	; 0x40
   b92b0:	f04f 0c01 	mov.w	ip, #1
   b92b4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b92b8:	2380      	movs	r3, #128	; 0x80
   b92ba:	9300      	str	r3, [sp, #0]
   b92bc:	2200      	movs	r2, #0
   b92be:	4b77      	ldr	r3, [pc, #476]	; (b949c <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b92c0:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b92c2:	4620      	mov	r0, r4
   b92c4:	f7fe fea6 	bl	b8014 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b92c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b92ca:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b92ce:	2800      	cmp	r0, #0
   b92d0:	d078      	beq.n	b93c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b92d2:	2d00      	cmp	r5, #0
   b92d4:	d174      	bne.n	b93c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b92d6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b92da:	2b20      	cmp	r3, #32
   b92dc:	bf0c      	ite	eq
   b92de:	253c      	moveq	r5, #60	; 0x3c
   b92e0:	253d      	movne	r5, #61	; 0x3d
   b92e2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b92e6:	f1b8 0f00 	cmp.w	r8, #0
   b92ea:	d001      	beq.n	b92f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b92ec:	f001 fb60 	bl	ba9b0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b92f0:	b1fe      	cbz	r6, b9332 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b92f2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b92f6:	2800      	cmp	r0, #0
   b92f8:	db1b      	blt.n	b9332 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b92fa:	2101      	movs	r1, #1
   b92fc:	b280      	uxth	r0, r0
   b92fe:	f001 fc99 	bl	bac34 <pinMode>
    digitalWrite(rstPin, HIGH);
   b9302:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9306:	2101      	movs	r1, #1
   b9308:	b280      	uxth	r0, r0
   b930a:	f001 fca4 	bl	bac56 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b930e:	2001      	movs	r0, #1
   b9310:	f001 f8c4 	bl	ba49c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b9314:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9318:	2100      	movs	r1, #0
   b931a:	b280      	uxth	r0, r0
   b931c:	f001 fc9b 	bl	bac56 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9320:	200a      	movs	r0, #10
   b9322:	f001 f8bb 	bl	ba49c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b9326:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b932a:	2101      	movs	r1, #1
   b932c:	b280      	uxth	r0, r0
   b932e:	f001 fc92 	bl	bac56 <digitalWrite>
  TRANSACTION_START
   b9332:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9334:	2800      	cmp	r0, #0
   b9336:	d074      	beq.n	b9422 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b9338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b933a:	f001 fb35 	bl	ba9a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b933e:	2204      	movs	r2, #4
   b9340:	4957      	ldr	r1, [pc, #348]	; (b94a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b9342:	4620      	mov	r0, r4
   b9344:	f7ff ff11 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b9348:	8961      	ldrh	r1, [r4, #10]
   b934a:	3901      	subs	r1, #1
   b934c:	b2c9      	uxtb	r1, r1
   b934e:	4620      	mov	r0, r4
   b9350:	f7ff fe9c 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b9354:	4953      	ldr	r1, [pc, #332]	; (b94a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b9356:	2204      	movs	r2, #4
   b9358:	4620      	mov	r0, r4
   b935a:	f7ff ff06 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b935e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9362:	2b01      	cmp	r3, #1
   b9364:	bf0c      	ite	eq
   b9366:	2110      	moveq	r1, #16
   b9368:	2114      	movne	r1, #20
   b936a:	4620      	mov	r0, r4
   b936c:	f7ff fe8e 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b9370:	2204      	movs	r2, #4
   b9372:	494d      	ldr	r1, [pc, #308]	; (b94a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b9374:	4620      	mov	r0, r4
   b9376:	f7ff fef8 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b937a:	68a3      	ldr	r3, [r4, #8]
   b937c:	4a4b      	ldr	r2, [pc, #300]	; (b94ac <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b937e:	4293      	cmp	r3, r2
   b9380:	d15c      	bne.n	b943c <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b9382:	494b      	ldr	r1, [pc, #300]	; (b94b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b9384:	2204      	movs	r2, #4
   b9386:	4620      	mov	r0, r4
   b9388:	f7ff feef 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b938c:	21d9      	movs	r1, #217	; 0xd9
   b938e:	4620      	mov	r0, r4
   b9390:	f7ff fe7c 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b9394:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9398:	2b01      	cmp	r3, #1
   b939a:	bf0c      	ite	eq
   b939c:	2122      	moveq	r1, #34	; 0x22
   b939e:	21f1      	movne	r1, #241	; 0xf1
   b93a0:	4620      	mov	r0, r4
   b93a2:	f7ff fe73 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b93a6:	4620      	mov	r0, r4
   b93a8:	4942      	ldr	r1, [pc, #264]	; (b94b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b93aa:	2206      	movs	r2, #6
   b93ac:	f7ff fedd 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b93b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b93b2:	2800      	cmp	r0, #0
   b93b4:	d063      	beq.n	b947e <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b93b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b93b8:	f001 faf6 	bl	ba9a8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b93bc:	2001      	movs	r0, #1
   b93be:	e773      	b.n	b92a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b93c0:	b26d      	sxtb	r5, r5
   b93c2:	e78e      	b.n	b92e2 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b93c4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b93c8:	2101      	movs	r1, #1
   b93ca:	b280      	uxth	r0, r0
   b93cc:	f001 fc32 	bl	bac34 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b93d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b93d4:	2101      	movs	r1, #1
   b93d6:	b280      	uxth	r0, r0
   b93d8:	f001 fc2c 	bl	bac34 <pinMode>
    SSD1306_DESELECT
   b93dc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b93e0:	2101      	movs	r1, #1
   b93e2:	b280      	uxth	r0, r0
   b93e4:	f001 fc37 	bl	bac56 <digitalWrite>
    if(spi) { // Hardware SPI
   b93e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b93ea:	b13d      	cbz	r5, b93fc <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b93ec:	f1b8 0f00 	cmp.w	r8, #0
   b93f0:	f43f af7e 	beq.w	b92f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b93f4:	4628      	mov	r0, r5
   b93f6:	f000 fdcd 	bl	b9f94 <_ZN8SPIClass5beginEv>
   b93fa:	e779      	b.n	b92f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b93fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9400:	2101      	movs	r1, #1
   b9402:	b280      	uxth	r0, r0
   b9404:	f001 fc16 	bl	bac34 <pinMode>
      pinMode(clkPin , OUTPUT);
   b9408:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b940c:	2101      	movs	r1, #1
   b940e:	b280      	uxth	r0, r0
   b9410:	f001 fc10 	bl	bac34 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b9414:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9418:	4629      	mov	r1, r5
   b941a:	b280      	uxth	r0, r0
   b941c:	f001 fc1b 	bl	bac56 <digitalWrite>
   b9420:	e766      	b.n	b92f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b9422:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9424:	b118      	cbz	r0, b942e <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b9426:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b942a:	f000 fde1 	bl	b9ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b942e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9432:	2100      	movs	r1, #0
   b9434:	b280      	uxth	r0, r0
   b9436:	f001 fc0e 	bl	bac56 <digitalWrite>
   b943a:	e780      	b.n	b933e <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b943c:	4a1e      	ldr	r2, [pc, #120]	; (b94b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b943e:	4293      	cmp	r3, r2
   b9440:	d10e      	bne.n	b9460 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b9442:	491e      	ldr	r1, [pc, #120]	; (b94bc <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b9444:	2203      	movs	r2, #3
   b9446:	4620      	mov	r0, r4
   b9448:	f7ff fe8f 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b944c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9450:	2b01      	cmp	r3, #1
   b9452:	bf0c      	ite	eq
   b9454:	219f      	moveq	r1, #159	; 0x9f
   b9456:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9458:	4620      	mov	r0, r4
   b945a:	f7ff fe17 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b945e:	e795      	b.n	b938c <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b9460:	4a17      	ldr	r2, [pc, #92]	; (b94c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b9462:	4293      	cmp	r3, r2
   b9464:	d192      	bne.n	b938c <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b9466:	4917      	ldr	r1, [pc, #92]	; (b94c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b9468:	2203      	movs	r2, #3
   b946a:	4620      	mov	r0, r4
   b946c:	f7ff fe7d 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9470:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9474:	2b01      	cmp	r3, #1
   b9476:	bf0c      	ite	eq
   b9478:	2110      	moveq	r1, #16
   b947a:	21af      	movne	r1, #175	; 0xaf
   b947c:	e7ec      	b.n	b9458 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b947e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9482:	2101      	movs	r1, #1
   b9484:	b280      	uxth	r0, r0
   b9486:	f001 fbe6 	bl	bac56 <digitalWrite>
   b948a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b948c:	2800      	cmp	r0, #0
   b948e:	d095      	beq.n	b93bc <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9490:	f000 fd94 	bl	b9fbc <_ZN8SPIClass14endTransactionEv>
   b9494:	e792      	b.n	b93bc <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9496:	bf00      	nop
   b9498:	000bc640 	.word	0x000bc640
   b949c:	000bc820 	.word	0x000bc820
   b94a0:	000bcc88 	.word	0x000bcc88
   b94a4:	000bcc8c 	.word	0x000bcc8c
   b94a8:	000bcc90 	.word	0x000bcc90
   b94ac:	00200080 	.word	0x00200080
   b94b0:	000bcc9a 	.word	0x000bcc9a
   b94b4:	000bcc94 	.word	0x000bcc94
   b94b8:	00400080 	.word	0x00400080
   b94bc:	000bcc9e 	.word	0x000bcc9e
   b94c0:	00100060 	.word	0x00100060
   b94c4:	000bcca1 	.word	0x000bcca1

000b94c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b94c8:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b94ca:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b94cc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b94d0:	db3d      	blt.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b94d2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b94d6:	4294      	cmp	r4, r2
   b94d8:	dd39      	ble.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b94da:	2900      	cmp	r1, #0
      w += x;
   b94dc:	bfbe      	ittt	lt
   b94de:	185b      	addlt	r3, r3, r1
   b94e0:	b21b      	sxthlt	r3, r3
      x  = 0;
   b94e2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b94e4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b94e8:	18ce      	adds	r6, r1, r3
   b94ea:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b94ec:	bfc4      	itt	gt
   b94ee:	1a63      	subgt	r3, r4, r1
   b94f0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b94f2:	2b00      	cmp	r3, #0
   b94f4:	dd2b      	ble.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b94f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b94f8:	10d6      	asrs	r6, r2, #3
   b94fa:	fb14 1106 	smlabb	r1, r4, r6, r1
   b94fe:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b9500:	f002 0007 	and.w	r0, r2, #7
   b9504:	2201      	movs	r2, #1
   b9506:	4082      	lsls	r2, r0
      switch(color) {
   b9508:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b950a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b950c:	d016      	beq.n	b953c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b950e:	2d02      	cmp	r5, #2
   b9510:	d00b      	beq.n	b952a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b9512:	b9e5      	cbnz	r5, b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b9514:	43d2      	mvns	r2, r2
   b9516:	b2d2      	uxtb	r2, r2
   b9518:	440b      	add	r3, r1
   b951a:	4299      	cmp	r1, r3
   b951c:	d017      	beq.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b951e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9522:	4010      	ands	r0, r2
   b9524:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9528:	e7f7      	b.n	b951a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b952a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b952c:	4299      	cmp	r1, r3
   b952e:	d00e      	beq.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9530:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9534:	4050      	eors	r0, r2
   b9536:	f801 0c01 	strb.w	r0, [r1, #-1]
   b953a:	e7f7      	b.n	b952c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b953c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b953e:	4299      	cmp	r1, r3
   b9540:	d005      	beq.n	b954e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9542:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9546:	4310      	orrs	r0, r2
   b9548:	f801 0c01 	strb.w	r0, [r1, #-1]
   b954c:	e7f7      	b.n	b953e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b954e:	bd70      	pop	{r4, r5, r6, pc}

000b9550 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9550:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9552:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9554:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9558:	db76      	blt.n	b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b955a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b955e:	42b1      	cmp	r1, r6
   b9560:	da72      	bge.n	b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b9562:	2a00      	cmp	r2, #0
      __h += __y;
   b9564:	bfbe      	ittt	lt
   b9566:	189b      	addlt	r3, r3, r2
   b9568:	b21b      	sxthlt	r3, r3
      __y = 0;
   b956a:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b956c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b9570:	18d7      	adds	r7, r2, r3
   b9572:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b9574:	bfc4      	itt	gt
   b9576:	1aa3      	subgt	r3, r4, r2
   b9578:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b957a:	2b00      	cmp	r3, #0
   b957c:	dd64      	ble.n	b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b957e:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b9582:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b9584:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b9588:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b958c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b958e:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b9592:	d023      	beq.n	b95dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b9594:	f1c2 0208 	rsb	r2, r2, #8
   b9598:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b959a:	492d      	ldr	r1, [pc, #180]	; (b9650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b959c:	4293      	cmp	r3, r2
   b959e:	bf3c      	itt	cc
   b95a0:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b95a4:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b95a8:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b95aa:	bf3c      	itt	cc
   b95ac:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b95b0:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b95b4:	2d01      	cmp	r5, #1
   b95b6:	d007      	beq.n	b95c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b95b8:	2d02      	cmp	r5, #2
   b95ba:	d02e      	beq.n	b961a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b95bc:	b94d      	cbnz	r5, b95d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b95be:	f817 c006 	ldrb.w	ip, [r7, r6]
   b95c2:	ea2c 0101 	bic.w	r1, ip, r1
   b95c6:	e003      	b.n	b95d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b95c8:	f817 c006 	ldrb.w	ip, [r7, r6]
   b95cc:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b95d0:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b95d2:	4293      	cmp	r3, r2
   b95d4:	d338      	bcc.n	b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b95d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b95da:	440c      	add	r4, r1
        h -= mod;
   b95dc:	1a9a      	subs	r2, r3, r2
   b95de:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b95e0:	2a07      	cmp	r2, #7
   b95e2:	d90e      	bls.n	b9602 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b95e4:	2d02      	cmp	r5, #2
   b95e6:	d11d      	bne.n	b9624 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b95e8:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b95ea:	7821      	ldrb	r1, [r4, #0]
   b95ec:	43c9      	mvns	r1, r1
   b95ee:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b95f0:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b95f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b95f6:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b95f8:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b95fa:	440c      	add	r4, r1
            } while(h >= 8);
   b95fc:	d8f5      	bhi.n	b95ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b95fe:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b9602:	b30a      	cbz	r2, b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9604:	4b13      	ldr	r3, [pc, #76]	; (b9654 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b9606:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9608:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b960a:	d01a      	beq.n	b9642 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b960c:	2d02      	cmp	r5, #2
   b960e:	d01c      	beq.n	b964a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b9610:	b9d5      	cbnz	r5, b9648 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b9612:	7822      	ldrb	r2, [r4, #0]
   b9614:	ea22 0303 	bic.w	r3, r2, r3
   b9618:	e015      	b.n	b9646 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b961a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b961e:	ea81 010c 	eor.w	r1, r1, ip
   b9622:	e7d5      	b.n	b95d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b9624:	1e29      	subs	r1, r5, #0
   b9626:	bf18      	it	ne
   b9628:	2101      	movne	r1, #1
   b962a:	4249      	negs	r1, r1
   b962c:	b2c9      	uxtb	r1, r1
   b962e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b9630:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b9632:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b9634:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b9638:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b963a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b963c:	4434      	add	r4, r6
            } while(h >= 8);
   b963e:	d8f7      	bhi.n	b9630 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b9640:	e7dd      	b.n	b95fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b9642:	7822      	ldrb	r2, [r4, #0]
   b9644:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b9646:	7023      	strb	r3, [r4, #0]
}
   b9648:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b964a:	7822      	ldrb	r2, [r4, #0]
   b964c:	4053      	eors	r3, r2
   b964e:	e7fa      	b.n	b9646 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b9650:	000bcc78 	.word	0x000bcc78
   b9654:	000bcc80 	.word	0x000bcc80

000b9658 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9658:	b470      	push	{r4, r5, r6}
   b965a:	4614      	mov	r4, r2
  switch(rotation) {
   b965c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b965e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b9662:	2a02      	cmp	r2, #2
   b9664:	d00d      	beq.n	b9682 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b9666:	2a03      	cmp	r2, #3
   b9668:	d018      	beq.n	b969c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b966a:	2a01      	cmp	r2, #1
   b966c:	d111      	bne.n	b9692 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b966e:	8902      	ldrh	r2, [r0, #8]
   b9670:	43e4      	mvns	r4, r4
   b9672:	4414      	add	r4, r2
   b9674:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b9676:	9603      	str	r6, [sp, #12]
   b9678:	460a      	mov	r2, r1
   b967a:	4621      	mov	r1, r4
}
   b967c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b967e:	f7ff bf67 	b.w	b9550 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b9682:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b9684:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b9686:	43e4      	mvns	r4, r4
    x -= (w-1);
   b9688:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b968a:	4414      	add	r4, r2
    x -= (w-1);
   b968c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b968e:	b224      	sxth	r4, r4
    x -= (w-1);
   b9690:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b9692:	9603      	str	r6, [sp, #12]
   b9694:	4622      	mov	r2, r4
}
   b9696:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b9698:	f7ff bf16 	b.w	b94c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b969c:	8945      	ldrh	r5, [r0, #10]
   b969e:	4419      	add	r1, r3
   b96a0:	1a69      	subs	r1, r5, r1
   b96a2:	b209      	sxth	r1, r1
    break;
   b96a4:	e7e7      	b.n	b9676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b96a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b96a6:	b430      	push	{r4, r5}
   b96a8:	4614      	mov	r4, r2
  switch(rotation) {
   b96aa:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b96ac:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b96b0:	2a02      	cmp	r2, #2
   b96b2:	d00d      	beq.n	b96d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b96b4:	2a03      	cmp	r2, #3
   b96b6:	d018      	beq.n	b96ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b96b8:	2a01      	cmp	r2, #1
   b96ba:	d111      	bne.n	b96e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b96bc:	18e2      	adds	r2, r4, r3
   b96be:	8904      	ldrh	r4, [r0, #8]
   b96c0:	1aa4      	subs	r4, r4, r2
   b96c2:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b96c4:	9502      	str	r5, [sp, #8]
   b96c6:	460a      	mov	r2, r1
   b96c8:	4621      	mov	r1, r4
}
   b96ca:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b96cc:	f7ff befc 	b.w	b94c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b96d0:	8902      	ldrh	r2, [r0, #8]
   b96d2:	43c9      	mvns	r1, r1
   b96d4:	4411      	add	r1, r2
    y -= (h-1);
   b96d6:	18e2      	adds	r2, r4, r3
   b96d8:	8944      	ldrh	r4, [r0, #10]
   b96da:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b96dc:	b209      	sxth	r1, r1
    y -= (h-1);
   b96de:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b96e0:	9502      	str	r5, [sp, #8]
   b96e2:	4622      	mov	r2, r4
}
   b96e4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b96e6:	f7ff bf33 	b.w	b9550 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b96ea:	8942      	ldrh	r2, [r0, #10]
   b96ec:	43c9      	mvns	r1, r1
   b96ee:	4411      	add	r1, r2
   b96f0:	b209      	sxth	r1, r1
    break;
   b96f2:	e7e7      	b.n	b96c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b96f4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b96f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b96f8:	4604      	mov	r4, r0
  TRANSACTION_START
   b96fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b96fc:	2800      	cmp	r0, #0
   b96fe:	d042      	beq.n	b9786 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b9700:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9702:	f001 f951 	bl	ba9a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b9706:	4947      	ldr	r1, [pc, #284]	; (b9824 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b9708:	2205      	movs	r2, #5
   b970a:	4620      	mov	r0, r4
   b970c:	f7ff fd2d 	bl	b916a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b9710:	8921      	ldrh	r1, [r4, #8]
   b9712:	3901      	subs	r1, #1
   b9714:	4620      	mov	r0, r4
   b9716:	b2c9      	uxtb	r1, r1
   b9718:	f7ff fcb8 	bl	b908c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b971c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9720:	1dde      	adds	r6, r3, #7
   b9722:	bf48      	it	mi
   b9724:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b9728:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b972c:	8923      	ldrh	r3, [r4, #8]
   b972e:	10f6      	asrs	r6, r6, #3
   b9730:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b9734:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b9738:	2800      	cmp	r0, #0
   b973a:	d03a      	beq.n	b97b2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b973c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9740:	f001 f940 	bl	ba9c4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b9744:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9746:	6803      	ldr	r3, [r0, #0]
   b9748:	2140      	movs	r1, #64	; 0x40
   b974a:	689b      	ldr	r3, [r3, #8]
   b974c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b974e:	2701      	movs	r7, #1
    while(count--) {
   b9750:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b9752:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b9754:	d024      	beq.n	b97a0 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b9756:	2f1f      	cmp	r7, #31
   b9758:	d90c      	bls.n	b9774 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b975a:	f001 f93a 	bl	ba9d2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b975e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9764:	f001 f92e 	bl	ba9c4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b9768:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b976a:	6803      	ldr	r3, [r0, #0]
   b976c:	2140      	movs	r1, #64	; 0x40
   b976e:	689b      	ldr	r3, [r3, #8]
   b9770:	4798      	blx	r3
        bytesOut = 1;
   b9772:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b9774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9776:	f815 1b01 	ldrb.w	r1, [r5], #1
   b977a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b977c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b977e:	689b      	ldr	r3, [r3, #8]
   b9780:	4798      	blx	r3
      bytesOut++;
   b9782:	b2ff      	uxtb	r7, r7
    while(count--) {
   b9784:	e7e4      	b.n	b9750 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b9786:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9788:	b118      	cbz	r0, b9792 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b978a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b978e:	f000 fc2f 	bl	b9ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9792:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9796:	2100      	movs	r1, #0
   b9798:	b280      	uxth	r0, r0
   b979a:	f001 fa5c 	bl	bac56 <digitalWrite>
   b979e:	e7b2      	b.n	b9706 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b97a0:	f001 f917 	bl	ba9d2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b97a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b97a6:	b378      	cbz	r0, b9808 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b97a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b97aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b97ae:	f001 b8fb 	b.w	ba9a8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b97b2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b97b6:	2101      	movs	r1, #1
   b97b8:	b280      	uxth	r0, r0
   b97ba:	f001 fa4c 	bl	bac56 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b97be:	42ae      	cmp	r6, r5
   b97c0:	d0f0      	beq.n	b97a4 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b97c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b97c4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b97c8:	b118      	cbz	r0, b97d2 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b97ca:	4649      	mov	r1, r9
   b97cc:	f000 fc7e 	bl	ba0cc <_ZN8SPIClass8transferEh>
   b97d0:	e7f5      	b.n	b97be <_ZN16Adafruit_SSD13067displayEv+0xca>
   b97d2:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b97d4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b97d8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b97dc:	ea09 0108 	and.w	r1, r9, r8
   b97e0:	b280      	uxth	r0, r0
   b97e2:	f001 fa38 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b97e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b97ea:	2101      	movs	r1, #1
   b97ec:	b280      	uxth	r0, r0
   b97ee:	f001 fa32 	bl	bac56 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b97f2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b97f6:	2100      	movs	r1, #0
   b97f8:	b280      	uxth	r0, r0
   b97fa:	f001 fa2c 	bl	bac56 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b97fe:	3f01      	subs	r7, #1
   b9800:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b9804:	d1e8      	bne.n	b97d8 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b9806:	e7da      	b.n	b97be <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b9808:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b980c:	2101      	movs	r1, #1
   b980e:	b280      	uxth	r0, r0
   b9810:	f001 fa21 	bl	bac56 <digitalWrite>
   b9814:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9816:	b118      	cbz	r0, b9820 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b9818:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b981c:	f000 bbce 	b.w	b9fbc <_ZN8SPIClass14endTransactionEv>
}
   b9820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9824:	000bcca4 	.word	0x000bcca4

000b9828 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b9828:	b510      	push	{r4, lr}
   b982a:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b982c:	7001      	strb	r1, [r0, #0]
   b982e:	7042      	strb	r2, [r0, #1]
   b9830:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b9832:	2101      	movs	r1, #1
   b9834:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9838:	f001 fb0c 	bl	bae54 <calloc>
   b983c:	6060      	str	r0, [r4, #4]
}
   b983e:	4620      	mov	r0, r4
   b9840:	bd10      	pop	{r4, pc}

000b9842 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b9842:	b510      	push	{r4, lr}
   b9844:	4604      	mov	r4, r0
{
    free(_led_state);
   b9846:	6840      	ldr	r0, [r0, #4]
   b9848:	f000 fb1e 	bl	b9e88 <free>
}
   b984c:	4620      	mov	r0, r4
   b984e:	bd10      	pop	{r4, pc}

000b9850 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b9850:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b9852:	2100      	movs	r1, #0
{
   b9854:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b9856:	7800      	ldrb	r0, [r0, #0]
   b9858:	f001 f9fd 	bl	bac56 <digitalWrite>
   b985c:	2014      	movs	r0, #20
   b985e:	f000 f917 	bl	b9a90 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b9862:	7820      	ldrb	r0, [r4, #0]
   b9864:	2101      	movs	r1, #1
   b9866:	f001 f9f6 	bl	bac56 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b986a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b986e:	2014      	movs	r0, #20
   b9870:	f000 b90e 	b.w	b9a90 <HAL_Delay_Microseconds>

000b9874 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b9874:	b570      	push	{r4, r5, r6, lr}
   b9876:	4606      	mov	r6, r0
   b9878:	460c      	mov	r4, r1
   b987a:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b987c:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b987e:	bf4c      	ite	mi
   b9880:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b9882:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b9884:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b9886:	f001 f9e6 	bl	bac56 <digitalWrite>
    for (byte i=0; i<8; i++)
   b988a:	3d01      	subs	r5, #1
        clk();
   b988c:	4630      	mov	r0, r6
   b988e:	f7ff ffdf 	bl	b9850 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b9892:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b9894:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b9898:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b989a:	d1ef      	bne.n	b987c <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b989c:	bd70      	pop	{r4, r5, r6, pc}

000b989e <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b989e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b98a0:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b98a4:	461e      	mov	r6, r3
   b98a6:	460c      	mov	r4, r1
   b98a8:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b98aa:	bf14      	ite	ne
   b98ac:	21c0      	movne	r1, #192	; 0xc0
   b98ae:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b98b0:	0673      	lsls	r3, r6, #25
   b98b2:	bf58      	it	pl
   b98b4:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b98b8:	062a      	lsls	r2, r5, #24
   b98ba:	bf58      	it	pl
   b98bc:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b98c0:	066b      	lsls	r3, r5, #25
   b98c2:	bf58      	it	pl
   b98c4:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b98c8:	0622      	lsls	r2, r4, #24
   b98ca:	bf58      	it	pl
   b98cc:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b98d0:	0663      	lsls	r3, r4, #25
   b98d2:	bf58      	it	pl
   b98d4:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b98d8:	9001      	str	r0, [sp, #4]
   b98da:	f7ff ffcb 	bl	b9874 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b98de:	9801      	ldr	r0, [sp, #4]
   b98e0:	4631      	mov	r1, r6
   b98e2:	f7ff ffc7 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b98e6:	9801      	ldr	r0, [sp, #4]
   b98e8:	4629      	mov	r1, r5
   b98ea:	f7ff ffc3 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b98ee:	9801      	ldr	r0, [sp, #4]
   b98f0:	4621      	mov	r1, r4
}
   b98f2:	b002      	add	sp, #8
   b98f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b98f8:	f7ff bfbc 	b.w	b9874 <_ZN12ChainableLED8sendByteEh>

000b98fc <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b98fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9900:	4604      	mov	r4, r0
   b9902:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b9904:	2100      	movs	r1, #0
{
   b9906:	4690      	mov	r8, r2
   b9908:	4699      	mov	r9, r3
   b990a:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b990e:	f7ff ffb1 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9912:	2100      	movs	r1, #0
   b9914:	4620      	mov	r0, r4
   b9916:	f7ff ffad 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b991a:	2100      	movs	r1, #0
   b991c:	4620      	mov	r0, r4
   b991e:	f7ff ffa9 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9922:	2100      	movs	r1, #0
   b9924:	4620      	mov	r0, r4
   b9926:	f7ff ffa5 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
   b992a:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b992c:	78a3      	ldrb	r3, [r4, #2]
   b992e:	b2f5      	uxtb	r5, r6
   b9930:	42ab      	cmp	r3, r5
   b9932:	d919      	bls.n	b9968 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b9934:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b9938:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b993a:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b993e:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b9942:	d108      	bne.n	b9956 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b9944:	6861      	ldr	r1, [r4, #4]
   b9946:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b994a:	6861      	ldr	r1, [r4, #4]
   b994c:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b9950:	6861      	ldr	r1, [r4, #4]
   b9952:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b9956:	6861      	ldr	r1, [r4, #4]
   b9958:	5ccb      	ldrb	r3, [r1, r3]
   b995a:	5c8a      	ldrb	r2, [r1, r2]
   b995c:	5c09      	ldrb	r1, [r1, r0]
   b995e:	4620      	mov	r0, r4
   b9960:	f7ff ff9d 	bl	b989e <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b9964:	3601      	adds	r6, #1
   b9966:	e7e1      	b.n	b992c <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b9968:	4620      	mov	r0, r4
   b996a:	2100      	movs	r1, #0
   b996c:	f7ff ff82 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9970:	4620      	mov	r0, r4
   b9972:	2100      	movs	r1, #0
   b9974:	f7ff ff7e 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9978:	4620      	mov	r0, r4
   b997a:	2100      	movs	r1, #0
   b997c:	f7ff ff7a 	bl	b9874 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9980:	4620      	mov	r0, r4
   b9982:	2100      	movs	r1, #0
}
   b9984:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b9988:	f7ff bf74 	b.w	b9874 <_ZN12ChainableLED8sendByteEh>

000b998c <_ZN12ChainableLED4initEv>:
{
   b998c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b998e:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b9990:	2101      	movs	r1, #1
   b9992:	7800      	ldrb	r0, [r0, #0]
   b9994:	f001 f94e 	bl	bac34 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b9998:	7860      	ldrb	r0, [r4, #1]
   b999a:	2101      	movs	r1, #1
   b999c:	f001 f94a 	bl	bac34 <pinMode>
   b99a0:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b99a2:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b99a4:	78a3      	ldrb	r3, [r4, #2]
   b99a6:	b2e9      	uxtb	r1, r5
   b99a8:	428b      	cmp	r3, r1
   b99aa:	d907      	bls.n	b99bc <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b99ac:	2300      	movs	r3, #0
   b99ae:	9600      	str	r6, [sp, #0]
   b99b0:	461a      	mov	r2, r3
   b99b2:	4620      	mov	r0, r4
   b99b4:	f7ff ffa2 	bl	b98fc <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b99b8:	3501      	adds	r5, #1
   b99ba:	e7f3      	b.n	b99a4 <_ZN12ChainableLED4initEv+0x18>
}
   b99bc:	b002      	add	sp, #8
   b99be:	bd70      	pop	{r4, r5, r6, pc}

000b99c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b99c0:	b508      	push	{r3, lr}
   b99c2:	4b02      	ldr	r3, [pc, #8]	; (b99cc <netdb_freeaddrinfo+0xc>)
   b99c4:	681b      	ldr	r3, [r3, #0]
   b99c6:	689b      	ldr	r3, [r3, #8]
   b99c8:	9301      	str	r3, [sp, #4]
   b99ca:	bd08      	pop	{r3, pc}
   b99cc:	00030268 	.word	0x00030268

000b99d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b99d0:	b508      	push	{r3, lr}
   b99d2:	4b02      	ldr	r3, [pc, #8]	; (b99dc <netdb_getaddrinfo+0xc>)
   b99d4:	681b      	ldr	r3, [r3, #0]
   b99d6:	68db      	ldr	r3, [r3, #12]
   b99d8:	9301      	str	r3, [sp, #4]
   b99da:	bd08      	pop	{r3, pc}
   b99dc:	00030268 	.word	0x00030268

000b99e0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b99e0:	b508      	push	{r3, lr}
   b99e2:	4b02      	ldr	r3, [pc, #8]	; (b99ec <hal_pin_validate_function+0xc>)
   b99e4:	681b      	ldr	r3, [r3, #0]
   b99e6:	685b      	ldr	r3, [r3, #4]
   b99e8:	9301      	str	r3, [sp, #4]
   b99ea:	bd08      	pop	{r3, pc}
   b99ec:	0003022c 	.word	0x0003022c

000b99f0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b99f0:	b508      	push	{r3, lr}
   b99f2:	4b02      	ldr	r3, [pc, #8]	; (b99fc <hal_gpio_mode+0xc>)
   b99f4:	681b      	ldr	r3, [r3, #0]
   b99f6:	689b      	ldr	r3, [r3, #8]
   b99f8:	9301      	str	r3, [sp, #4]
   b99fa:	bd08      	pop	{r3, pc}
   b99fc:	0003022c 	.word	0x0003022c

000b9a00 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b9a00:	b508      	push	{r3, lr}
   b9a02:	4b02      	ldr	r3, [pc, #8]	; (b9a0c <hal_gpio_get_mode+0xc>)
   b9a04:	681b      	ldr	r3, [r3, #0]
   b9a06:	68db      	ldr	r3, [r3, #12]
   b9a08:	9301      	str	r3, [sp, #4]
   b9a0a:	bd08      	pop	{r3, pc}
   b9a0c:	0003022c 	.word	0x0003022c

000b9a10 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b9a10:	b508      	push	{r3, lr}
   b9a12:	4b02      	ldr	r3, [pc, #8]	; (b9a1c <hal_gpio_write+0xc>)
   b9a14:	681b      	ldr	r3, [r3, #0]
   b9a16:	691b      	ldr	r3, [r3, #16]
   b9a18:	9301      	str	r3, [sp, #4]
   b9a1a:	bd08      	pop	{r3, pc}
   b9a1c:	0003022c 	.word	0x0003022c

000b9a20 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b9a20:	b508      	push	{r3, lr}
   b9a22:	4b02      	ldr	r3, [pc, #8]	; (b9a2c <hal_gpio_read+0xc>)
   b9a24:	681b      	ldr	r3, [r3, #0]
   b9a26:	695b      	ldr	r3, [r3, #20]
   b9a28:	9301      	str	r3, [sp, #4]
   b9a2a:	bd08      	pop	{r3, pc}
   b9a2c:	0003022c 	.word	0x0003022c

000b9a30 <hal_interrupt_enable_all>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   b9a30:	b508      	push	{r3, lr}
   b9a32:	4b02      	ldr	r3, [pc, #8]	; (b9a3c <hal_interrupt_enable_all+0xc>)
   b9a34:	681b      	ldr	r3, [r3, #0]
   b9a36:	6a1b      	ldr	r3, [r3, #32]
   b9a38:	9301      	str	r3, [sp, #4]
   b9a3a:	bd08      	pop	{r3, pc}
   b9a3c:	0003022c 	.word	0x0003022c

000b9a40 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   b9a40:	b508      	push	{r3, lr}
   b9a42:	4b02      	ldr	r3, [pc, #8]	; (b9a4c <hal_interrupt_disable_all+0xc>)
   b9a44:	681b      	ldr	r3, [r3, #0]
   b9a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9a48:	9301      	str	r3, [sp, #4]
   b9a4a:	bd08      	pop	{r3, pc}
   b9a4c:	0003022c 	.word	0x0003022c

000b9a50 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9a50:	b508      	push	{r3, lr}
   b9a52:	4b02      	ldr	r3, [pc, #8]	; (b9a5c <hal_adc_read+0xc>)
   b9a54:	681b      	ldr	r3, [r3, #0]
   b9a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9a58:	9301      	str	r3, [sp, #4]
   b9a5a:	bd08      	pop	{r3, pc}
   b9a5c:	0003022c 	.word	0x0003022c

000b9a60 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   b9a60:	b508      	push	{r3, lr}
   b9a62:	4b02      	ldr	r3, [pc, #8]	; (b9a6c <hal_gpio_pulse_in+0xc>)
   b9a64:	681b      	ldr	r3, [r3, #0]
   b9a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9a68:	9301      	str	r3, [sp, #4]
   b9a6a:	bd08      	pop	{r3, pc}
   b9a6c:	0003022c 	.word	0x0003022c

000b9a70 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   b9a70:	b508      	push	{r3, lr}
   b9a72:	4b02      	ldr	r3, [pc, #8]	; (b9a7c <hal_pwm_write_with_frequency_ext+0xc>)
   b9a74:	681b      	ldr	r3, [r3, #0]
   b9a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b9a78:	9301      	str	r3, [sp, #4]
   b9a7a:	bd08      	pop	{r3, pc}
   b9a7c:	0003022c 	.word	0x0003022c

000b9a80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b9a80:	b508      	push	{r3, lr}
   b9a82:	4b02      	ldr	r3, [pc, #8]	; (b9a8c <HAL_RNG_GetRandomNumber+0xc>)
   b9a84:	681b      	ldr	r3, [r3, #0]
   b9a86:	685b      	ldr	r3, [r3, #4]
   b9a88:	9301      	str	r3, [sp, #4]
   b9a8a:	bd08      	pop	{r3, pc}
   b9a8c:	00030218 	.word	0x00030218

000b9a90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b9a90:	b508      	push	{r3, lr}
   b9a92:	4b02      	ldr	r3, [pc, #8]	; (b9a9c <HAL_Delay_Microseconds+0xc>)
   b9a94:	681b      	ldr	r3, [r3, #0]
   b9a96:	68db      	ldr	r3, [r3, #12]
   b9a98:	9301      	str	r3, [sp, #4]
   b9a9a:	bd08      	pop	{r3, pc}
   b9a9c:	00030218 	.word	0x00030218

000b9aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b9aa0:	b508      	push	{r3, lr}
   b9aa2:	4b02      	ldr	r3, [pc, #8]	; (b9aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b9aa4:	681b      	ldr	r3, [r3, #0]
   b9aa6:	695b      	ldr	r3, [r3, #20]
   b9aa8:	9301      	str	r3, [sp, #4]
   b9aaa:	bd08      	pop	{r3, pc}
   b9aac:	00030218 	.word	0x00030218

000b9ab0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b9ab0:	b508      	push	{r3, lr}
   b9ab2:	4b02      	ldr	r3, [pc, #8]	; (b9abc <HAL_EEPROM_Init+0xc>)
   b9ab4:	681b      	ldr	r3, [r3, #0]
   b9ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9ab8:	9301      	str	r3, [sp, #4]
   b9aba:	bd08      	pop	{r3, pc}
   b9abc:	00030218 	.word	0x00030218

000b9ac0 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b9ac0:	b508      	push	{r3, lr}
   b9ac2:	4b02      	ldr	r3, [pc, #8]	; (b9acc <HAL_EEPROM_Read+0xc>)
   b9ac4:	681b      	ldr	r3, [r3, #0]
   b9ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9ac8:	9301      	str	r3, [sp, #4]
   b9aca:	bd08      	pop	{r3, pc}
   b9acc:	00030218 	.word	0x00030218

000b9ad0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b9ad0:	b508      	push	{r3, lr}
   b9ad2:	4b02      	ldr	r3, [pc, #8]	; (b9adc <HAL_EEPROM_Put+0xc>)
   b9ad4:	681b      	ldr	r3, [r3, #0]
   b9ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b9ad8:	9301      	str	r3, [sp, #4]
   b9ada:	bd08      	pop	{r3, pc}
   b9adc:	00030218 	.word	0x00030218

000b9ae0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b9ae0:	b508      	push	{r3, lr}
   b9ae2:	4b02      	ldr	r3, [pc, #8]	; (b9aec <os_mutex_recursive_create+0xc>)
   b9ae4:	681b      	ldr	r3, [r3, #0]
   b9ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9ae8:	9301      	str	r3, [sp, #4]
   b9aea:	bd08      	pop	{r3, pc}
   b9aec:	00030248 	.word	0x00030248

000b9af0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b9af0:	b508      	push	{r3, lr}
   b9af2:	4b02      	ldr	r3, [pc, #8]	; (b9afc <inet_inet_ntop+0xc>)
   b9af4:	681b      	ldr	r3, [r3, #0]
   b9af6:	695b      	ldr	r3, [r3, #20]
   b9af8:	9301      	str	r3, [sp, #4]
   b9afa:	bd08      	pop	{r3, pc}
   b9afc:	00030264 	.word	0x00030264

000b9b00 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b9b00:	b508      	push	{r3, lr}
   b9b02:	4b02      	ldr	r3, [pc, #8]	; (b9b0c <hal_usart_write+0xc>)
   b9b04:	681b      	ldr	r3, [r3, #0]
   b9b06:	68db      	ldr	r3, [r3, #12]
   b9b08:	9301      	str	r3, [sp, #4]
   b9b0a:	bd08      	pop	{r3, pc}
   b9b0c:	0003023c 	.word	0x0003023c

000b9b10 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b9b10:	b508      	push	{r3, lr}
   b9b12:	4b02      	ldr	r3, [pc, #8]	; (b9b1c <hal_usart_available+0xc>)
   b9b14:	681b      	ldr	r3, [r3, #0]
   b9b16:	691b      	ldr	r3, [r3, #16]
   b9b18:	9301      	str	r3, [sp, #4]
   b9b1a:	bd08      	pop	{r3, pc}
   b9b1c:	0003023c 	.word	0x0003023c

000b9b20 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b9b20:	b508      	push	{r3, lr}
   b9b22:	4b02      	ldr	r3, [pc, #8]	; (b9b2c <hal_usart_read+0xc>)
   b9b24:	681b      	ldr	r3, [r3, #0]
   b9b26:	695b      	ldr	r3, [r3, #20]
   b9b28:	9301      	str	r3, [sp, #4]
   b9b2a:	bd08      	pop	{r3, pc}
   b9b2c:	0003023c 	.word	0x0003023c

000b9b30 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b9b30:	b508      	push	{r3, lr}
   b9b32:	4b02      	ldr	r3, [pc, #8]	; (b9b3c <hal_usart_peek+0xc>)
   b9b34:	681b      	ldr	r3, [r3, #0]
   b9b36:	699b      	ldr	r3, [r3, #24]
   b9b38:	9301      	str	r3, [sp, #4]
   b9b3a:	bd08      	pop	{r3, pc}
   b9b3c:	0003023c 	.word	0x0003023c

000b9b40 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b9b40:	b508      	push	{r3, lr}
   b9b42:	4b02      	ldr	r3, [pc, #8]	; (b9b4c <hal_usart_flush+0xc>)
   b9b44:	681b      	ldr	r3, [r3, #0]
   b9b46:	69db      	ldr	r3, [r3, #28]
   b9b48:	9301      	str	r3, [sp, #4]
   b9b4a:	bd08      	pop	{r3, pc}
   b9b4c:	0003023c 	.word	0x0003023c

000b9b50 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b9b50:	b508      	push	{r3, lr}
   b9b52:	4b02      	ldr	r3, [pc, #8]	; (b9b5c <hal_usart_is_enabled+0xc>)
   b9b54:	681b      	ldr	r3, [r3, #0]
   b9b56:	6a1b      	ldr	r3, [r3, #32]
   b9b58:	9301      	str	r3, [sp, #4]
   b9b5a:	bd08      	pop	{r3, pc}
   b9b5c:	0003023c 	.word	0x0003023c

000b9b60 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b9b60:	b508      	push	{r3, lr}
   b9b62:	4b02      	ldr	r3, [pc, #8]	; (b9b6c <hal_usart_available_data_for_write+0xc>)
   b9b64:	681b      	ldr	r3, [r3, #0]
   b9b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9b68:	9301      	str	r3, [sp, #4]
   b9b6a:	bd08      	pop	{r3, pc}
   b9b6c:	0003023c 	.word	0x0003023c

000b9b70 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b9b70:	b508      	push	{r3, lr}
   b9b72:	4b02      	ldr	r3, [pc, #8]	; (b9b7c <hal_usart_init_ex+0xc>)
   b9b74:	681b      	ldr	r3, [r3, #0]
   b9b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9b78:	9301      	str	r3, [sp, #4]
   b9b7a:	bd08      	pop	{r3, pc}
   b9b7c:	0003023c 	.word	0x0003023c

000b9b80 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b9b80:	b508      	push	{r3, lr}
   b9b82:	4b02      	ldr	r3, [pc, #8]	; (b9b8c <hal_i2c_set_speed+0xc>)
   b9b84:	681b      	ldr	r3, [r3, #0]
   b9b86:	681b      	ldr	r3, [r3, #0]
   b9b88:	9301      	str	r3, [sp, #4]
   b9b8a:	bd08      	pop	{r3, pc}
   b9b8c:	00030228 	.word	0x00030228

000b9b90 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b9b90:	b508      	push	{r3, lr}
   b9b92:	4b02      	ldr	r3, [pc, #8]	; (b9b9c <hal_i2c_begin+0xc>)
   b9b94:	681b      	ldr	r3, [r3, #0]
   b9b96:	68db      	ldr	r3, [r3, #12]
   b9b98:	9301      	str	r3, [sp, #4]
   b9b9a:	bd08      	pop	{r3, pc}
   b9b9c:	00030228 	.word	0x00030228

000b9ba0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b9ba0:	b508      	push	{r3, lr}
   b9ba2:	4b02      	ldr	r3, [pc, #8]	; (b9bac <hal_i2c_begin_transmission+0xc>)
   b9ba4:	681b      	ldr	r3, [r3, #0]
   b9ba6:	699b      	ldr	r3, [r3, #24]
   b9ba8:	9301      	str	r3, [sp, #4]
   b9baa:	bd08      	pop	{r3, pc}
   b9bac:	00030228 	.word	0x00030228

000b9bb0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b9bb0:	b508      	push	{r3, lr}
   b9bb2:	4b02      	ldr	r3, [pc, #8]	; (b9bbc <hal_i2c_end_transmission+0xc>)
   b9bb4:	681b      	ldr	r3, [r3, #0]
   b9bb6:	69db      	ldr	r3, [r3, #28]
   b9bb8:	9301      	str	r3, [sp, #4]
   b9bba:	bd08      	pop	{r3, pc}
   b9bbc:	00030228 	.word	0x00030228

000b9bc0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b9bc0:	b508      	push	{r3, lr}
   b9bc2:	4b02      	ldr	r3, [pc, #8]	; (b9bcc <hal_i2c_write+0xc>)
   b9bc4:	681b      	ldr	r3, [r3, #0]
   b9bc6:	6a1b      	ldr	r3, [r3, #32]
   b9bc8:	9301      	str	r3, [sp, #4]
   b9bca:	bd08      	pop	{r3, pc}
   b9bcc:	00030228 	.word	0x00030228

000b9bd0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b9bd0:	b508      	push	{r3, lr}
   b9bd2:	4b02      	ldr	r3, [pc, #8]	; (b9bdc <hal_i2c_available+0xc>)
   b9bd4:	681b      	ldr	r3, [r3, #0]
   b9bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9bd8:	9301      	str	r3, [sp, #4]
   b9bda:	bd08      	pop	{r3, pc}
   b9bdc:	00030228 	.word	0x00030228

000b9be0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b9be0:	b508      	push	{r3, lr}
   b9be2:	4b02      	ldr	r3, [pc, #8]	; (b9bec <hal_i2c_read+0xc>)
   b9be4:	681b      	ldr	r3, [r3, #0]
   b9be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b9be8:	9301      	str	r3, [sp, #4]
   b9bea:	bd08      	pop	{r3, pc}
   b9bec:	00030228 	.word	0x00030228

000b9bf0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b9bf0:	b508      	push	{r3, lr}
   b9bf2:	4b02      	ldr	r3, [pc, #8]	; (b9bfc <hal_i2c_peek+0xc>)
   b9bf4:	681b      	ldr	r3, [r3, #0]
   b9bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9bf8:	9301      	str	r3, [sp, #4]
   b9bfa:	bd08      	pop	{r3, pc}
   b9bfc:	00030228 	.word	0x00030228

000b9c00 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b9c00:	b508      	push	{r3, lr}
   b9c02:	4b02      	ldr	r3, [pc, #8]	; (b9c0c <hal_i2c_flush+0xc>)
   b9c04:	681b      	ldr	r3, [r3, #0]
   b9c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9c08:	9301      	str	r3, [sp, #4]
   b9c0a:	bd08      	pop	{r3, pc}
   b9c0c:	00030228 	.word	0x00030228

000b9c10 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b9c10:	b508      	push	{r3, lr}
   b9c12:	4b02      	ldr	r3, [pc, #8]	; (b9c1c <hal_i2c_is_enabled+0xc>)
   b9c14:	681b      	ldr	r3, [r3, #0]
   b9c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9c18:	9301      	str	r3, [sp, #4]
   b9c1a:	bd08      	pop	{r3, pc}
   b9c1c:	00030228 	.word	0x00030228

000b9c20 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b9c20:	b508      	push	{r3, lr}
   b9c22:	4b02      	ldr	r3, [pc, #8]	; (b9c2c <hal_i2c_init+0xc>)
   b9c24:	681b      	ldr	r3, [r3, #0]
   b9c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9c28:	9301      	str	r3, [sp, #4]
   b9c2a:	bd08      	pop	{r3, pc}
   b9c2c:	00030228 	.word	0x00030228

000b9c30 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b9c30:	b508      	push	{r3, lr}
   b9c32:	4b02      	ldr	r3, [pc, #8]	; (b9c3c <hal_spi_begin+0xc>)
   b9c34:	681b      	ldr	r3, [r3, #0]
   b9c36:	681b      	ldr	r3, [r3, #0]
   b9c38:	9301      	str	r3, [sp, #4]
   b9c3a:	bd08      	pop	{r3, pc}
   b9c3c:	00030230 	.word	0x00030230

000b9c40 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b9c40:	b508      	push	{r3, lr}
   b9c42:	4b02      	ldr	r3, [pc, #8]	; (b9c4c <hal_spi_transfer+0xc>)
   b9c44:	681b      	ldr	r3, [r3, #0]
   b9c46:	695b      	ldr	r3, [r3, #20]
   b9c48:	9301      	str	r3, [sp, #4]
   b9c4a:	bd08      	pop	{r3, pc}
   b9c4c:	00030230 	.word	0x00030230

000b9c50 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b9c50:	b508      	push	{r3, lr}
   b9c52:	4b02      	ldr	r3, [pc, #8]	; (b9c5c <hal_spi_init+0xc>)
   b9c54:	681b      	ldr	r3, [r3, #0]
   b9c56:	69db      	ldr	r3, [r3, #28]
   b9c58:	9301      	str	r3, [sp, #4]
   b9c5a:	bd08      	pop	{r3, pc}
   b9c5c:	00030230 	.word	0x00030230

000b9c60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b9c60:	b508      	push	{r3, lr}
   b9c62:	4b02      	ldr	r3, [pc, #8]	; (b9c6c <hal_spi_is_enabled+0xc>)
   b9c64:	681b      	ldr	r3, [r3, #0]
   b9c66:	6a1b      	ldr	r3, [r3, #32]
   b9c68:	9301      	str	r3, [sp, #4]
   b9c6a:	bd08      	pop	{r3, pc}
   b9c6c:	00030230 	.word	0x00030230

000b9c70 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b9c70:	b508      	push	{r3, lr}
   b9c72:	4b02      	ldr	r3, [pc, #8]	; (b9c7c <hal_spi_info+0xc>)
   b9c74:	681b      	ldr	r3, [r3, #0]
   b9c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9c78:	9301      	str	r3, [sp, #4]
   b9c7a:	bd08      	pop	{r3, pc}
   b9c7c:	00030230 	.word	0x00030230

000b9c80 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b9c80:	b508      	push	{r3, lr}
   b9c82:	4b02      	ldr	r3, [pc, #8]	; (b9c8c <hal_spi_set_settings+0xc>)
   b9c84:	681b      	ldr	r3, [r3, #0]
   b9c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9c88:	9301      	str	r3, [sp, #4]
   b9c8a:	bd08      	pop	{r3, pc}
   b9c8c:	00030230 	.word	0x00030230

000b9c90 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b9c90:	b508      	push	{r3, lr}
   b9c92:	4b02      	ldr	r3, [pc, #8]	; (b9c9c <hal_spi_acquire+0xc>)
   b9c94:	681b      	ldr	r3, [r3, #0]
   b9c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9c98:	9301      	str	r3, [sp, #4]
   b9c9a:	bd08      	pop	{r3, pc}
   b9c9c:	00030230 	.word	0x00030230

000b9ca0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b9ca0:	b508      	push	{r3, lr}
   b9ca2:	4b02      	ldr	r3, [pc, #8]	; (b9cac <hal_spi_release+0xc>)
   b9ca4:	681b      	ldr	r3, [r3, #0]
   b9ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9ca8:	9301      	str	r3, [sp, #4]
   b9caa:	bd08      	pop	{r3, pc}
   b9cac:	00030230 	.word	0x00030230

000b9cb0 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b9cb0:	b508      	push	{r3, lr}
   b9cb2:	4b02      	ldr	r3, [pc, #8]	; (b9cbc <HAL_Tone_Start+0xc>)
   b9cb4:	681b      	ldr	r3, [r3, #0]
   b9cb6:	681b      	ldr	r3, [r3, #0]
   b9cb8:	9301      	str	r3, [sp, #4]
   b9cba:	bd08      	pop	{r3, pc}
   b9cbc:	00030224 	.word	0x00030224

000b9cc0 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b9cc0:	b508      	push	{r3, lr}
   b9cc2:	4b02      	ldr	r3, [pc, #8]	; (b9ccc <HAL_Tone_Stop+0xc>)
   b9cc4:	681b      	ldr	r3, [r3, #0]
   b9cc6:	685b      	ldr	r3, [r3, #4]
   b9cc8:	9301      	str	r3, [sp, #4]
   b9cca:	bd08      	pop	{r3, pc}
   b9ccc:	00030224 	.word	0x00030224

000b9cd0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b9cd0:	b508      	push	{r3, lr}
   b9cd2:	4b02      	ldr	r3, [pc, #8]	; (b9cdc <HAL_USB_USART_Init+0xc>)
   b9cd4:	681b      	ldr	r3, [r3, #0]
   b9cd6:	681b      	ldr	r3, [r3, #0]
   b9cd8:	9301      	str	r3, [sp, #4]
   b9cda:	bd08      	pop	{r3, pc}
   b9cdc:	0003024c 	.word	0x0003024c

000b9ce0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b9ce0:	b508      	push	{r3, lr}
   b9ce2:	4b02      	ldr	r3, [pc, #8]	; (b9cec <HAL_USB_USART_Begin+0xc>)
   b9ce4:	681b      	ldr	r3, [r3, #0]
   b9ce6:	685b      	ldr	r3, [r3, #4]
   b9ce8:	9301      	str	r3, [sp, #4]
   b9cea:	bd08      	pop	{r3, pc}
   b9cec:	0003024c 	.word	0x0003024c

000b9cf0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b9cf0:	b508      	push	{r3, lr}
   b9cf2:	4b02      	ldr	r3, [pc, #8]	; (b9cfc <HAL_USB_USART_Available_Data+0xc>)
   b9cf4:	681b      	ldr	r3, [r3, #0]
   b9cf6:	691b      	ldr	r3, [r3, #16]
   b9cf8:	9301      	str	r3, [sp, #4]
   b9cfa:	bd08      	pop	{r3, pc}
   b9cfc:	0003024c 	.word	0x0003024c

000b9d00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b9d00:	b508      	push	{r3, lr}
   b9d02:	4b02      	ldr	r3, [pc, #8]	; (b9d0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b9d04:	681b      	ldr	r3, [r3, #0]
   b9d06:	695b      	ldr	r3, [r3, #20]
   b9d08:	9301      	str	r3, [sp, #4]
   b9d0a:	bd08      	pop	{r3, pc}
   b9d0c:	0003024c 	.word	0x0003024c

000b9d10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d10:	b508      	push	{r3, lr}
   b9d12:	4b02      	ldr	r3, [pc, #8]	; (b9d1c <HAL_USB_USART_Receive_Data+0xc>)
   b9d14:	681b      	ldr	r3, [r3, #0]
   b9d16:	699b      	ldr	r3, [r3, #24]
   b9d18:	9301      	str	r3, [sp, #4]
   b9d1a:	bd08      	pop	{r3, pc}
   b9d1c:	0003024c 	.word	0x0003024c

000b9d20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b9d20:	b508      	push	{r3, lr}
   b9d22:	4b02      	ldr	r3, [pc, #8]	; (b9d2c <HAL_USB_USART_Send_Data+0xc>)
   b9d24:	681b      	ldr	r3, [r3, #0]
   b9d26:	69db      	ldr	r3, [r3, #28]
   b9d28:	9301      	str	r3, [sp, #4]
   b9d2a:	bd08      	pop	{r3, pc}
   b9d2c:	0003024c 	.word	0x0003024c

000b9d30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b9d30:	b508      	push	{r3, lr}
   b9d32:	4b02      	ldr	r3, [pc, #8]	; (b9d3c <HAL_USB_USART_Flush_Data+0xc>)
   b9d34:	681b      	ldr	r3, [r3, #0]
   b9d36:	6a1b      	ldr	r3, [r3, #32]
   b9d38:	9301      	str	r3, [sp, #4]
   b9d3a:	bd08      	pop	{r3, pc}
   b9d3c:	0003024c 	.word	0x0003024c

000b9d40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b9d40:	b508      	push	{r3, lr}
   b9d42:	4b02      	ldr	r3, [pc, #8]	; (b9d4c <panic_+0xc>)
   b9d44:	681b      	ldr	r3, [r3, #0]
   b9d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9d48:	9301      	str	r3, [sp, #4]
   b9d4a:	bd08      	pop	{r3, pc}
   b9d4c:	00030260 	.word	0x00030260

000b9d50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b9d50:	b508      	push	{r3, lr}
   b9d52:	4b02      	ldr	r3, [pc, #8]	; (b9d5c <set_system_mode+0xc>)
   b9d54:	681b      	ldr	r3, [r3, #0]
   b9d56:	685b      	ldr	r3, [r3, #4]
   b9d58:	9301      	str	r3, [sp, #4]
   b9d5a:	bd08      	pop	{r3, pc}
   b9d5c:	00030220 	.word	0x00030220

000b9d60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b9d60:	b508      	push	{r3, lr}
   b9d62:	4b02      	ldr	r3, [pc, #8]	; (b9d6c <system_delay_ms+0xc>)
   b9d64:	681b      	ldr	r3, [r3, #0]
   b9d66:	695b      	ldr	r3, [r3, #20]
   b9d68:	9301      	str	r3, [sp, #4]
   b9d6a:	bd08      	pop	{r3, pc}
   b9d6c:	00030220 	.word	0x00030220

000b9d70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b9d70:	b508      	push	{r3, lr}
   b9d72:	4b03      	ldr	r3, [pc, #12]	; (b9d80 <system_ctrl_set_app_request_handler+0x10>)
   b9d74:	681b      	ldr	r3, [r3, #0]
   b9d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b9d7a:	9301      	str	r3, [sp, #4]
   b9d7c:	bd08      	pop	{r3, pc}
   b9d7e:	0000      	.short	0x0000
   b9d80:	00030220 	.word	0x00030220

000b9d84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b9d84:	b508      	push	{r3, lr}
   b9d86:	4b03      	ldr	r3, [pc, #12]	; (b9d94 <system_ctrl_set_result+0x10>)
   b9d88:	681b      	ldr	r3, [r3, #0]
   b9d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b9d8e:	9301      	str	r3, [sp, #4]
   b9d90:	bd08      	pop	{r3, pc}
   b9d92:	0000      	.short	0x0000
   b9d94:	00030220 	.word	0x00030220

000b9d98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b9d98:	b508      	push	{r3, lr}
   b9d9a:	4b02      	ldr	r3, [pc, #8]	; (b9da4 <network_connect+0xc>)
   b9d9c:	681b      	ldr	r3, [r3, #0]
   b9d9e:	685b      	ldr	r3, [r3, #4]
   b9da0:	9301      	str	r3, [sp, #4]
   b9da2:	bd08      	pop	{r3, pc}
   b9da4:	00030240 	.word	0x00030240

000b9da8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b9da8:	b508      	push	{r3, lr}
   b9daa:	4b02      	ldr	r3, [pc, #8]	; (b9db4 <network_connecting+0xc>)
   b9dac:	681b      	ldr	r3, [r3, #0]
   b9dae:	689b      	ldr	r3, [r3, #8]
   b9db0:	9301      	str	r3, [sp, #4]
   b9db2:	bd08      	pop	{r3, pc}
   b9db4:	00030240 	.word	0x00030240

000b9db8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b9db8:	b508      	push	{r3, lr}
   b9dba:	4b02      	ldr	r3, [pc, #8]	; (b9dc4 <network_disconnect+0xc>)
   b9dbc:	681b      	ldr	r3, [r3, #0]
   b9dbe:	68db      	ldr	r3, [r3, #12]
   b9dc0:	9301      	str	r3, [sp, #4]
   b9dc2:	bd08      	pop	{r3, pc}
   b9dc4:	00030240 	.word	0x00030240

000b9dc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b9dc8:	b508      	push	{r3, lr}
   b9dca:	4b02      	ldr	r3, [pc, #8]	; (b9dd4 <network_ready+0xc>)
   b9dcc:	681b      	ldr	r3, [r3, #0]
   b9dce:	691b      	ldr	r3, [r3, #16]
   b9dd0:	9301      	str	r3, [sp, #4]
   b9dd2:	bd08      	pop	{r3, pc}
   b9dd4:	00030240 	.word	0x00030240

000b9dd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b9dd8:	b508      	push	{r3, lr}
   b9dda:	4b02      	ldr	r3, [pc, #8]	; (b9de4 <network_on+0xc>)
   b9ddc:	681b      	ldr	r3, [r3, #0]
   b9dde:	695b      	ldr	r3, [r3, #20]
   b9de0:	9301      	str	r3, [sp, #4]
   b9de2:	bd08      	pop	{r3, pc}
   b9de4:	00030240 	.word	0x00030240

000b9de8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b9de8:	b508      	push	{r3, lr}
   b9dea:	4b02      	ldr	r3, [pc, #8]	; (b9df4 <network_off+0xc>)
   b9dec:	681b      	ldr	r3, [r3, #0]
   b9dee:	699b      	ldr	r3, [r3, #24]
   b9df0:	9301      	str	r3, [sp, #4]
   b9df2:	bd08      	pop	{r3, pc}
   b9df4:	00030240 	.word	0x00030240

000b9df8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b9df8:	b508      	push	{r3, lr}
   b9dfa:	4b02      	ldr	r3, [pc, #8]	; (b9e04 <network_listen+0xc>)
   b9dfc:	681b      	ldr	r3, [r3, #0]
   b9dfe:	69db      	ldr	r3, [r3, #28]
   b9e00:	9301      	str	r3, [sp, #4]
   b9e02:	bd08      	pop	{r3, pc}
   b9e04:	00030240 	.word	0x00030240

000b9e08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b9e08:	b508      	push	{r3, lr}
   b9e0a:	4b02      	ldr	r3, [pc, #8]	; (b9e14 <network_listening+0xc>)
   b9e0c:	681b      	ldr	r3, [r3, #0]
   b9e0e:	6a1b      	ldr	r3, [r3, #32]
   b9e10:	9301      	str	r3, [sp, #4]
   b9e12:	bd08      	pop	{r3, pc}
   b9e14:	00030240 	.word	0x00030240

000b9e18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b9e18:	b508      	push	{r3, lr}
   b9e1a:	4b02      	ldr	r3, [pc, #8]	; (b9e24 <network_set_listen_timeout+0xc>)
   b9e1c:	681b      	ldr	r3, [r3, #0]
   b9e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9e20:	9301      	str	r3, [sp, #4]
   b9e22:	bd08      	pop	{r3, pc}
   b9e24:	00030240 	.word	0x00030240

000b9e28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b9e28:	b508      	push	{r3, lr}
   b9e2a:	4b02      	ldr	r3, [pc, #8]	; (b9e34 <network_get_listen_timeout+0xc>)
   b9e2c:	681b      	ldr	r3, [r3, #0]
   b9e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b9e30:	9301      	str	r3, [sp, #4]
   b9e32:	bd08      	pop	{r3, pc}
   b9e34:	00030240 	.word	0x00030240

000b9e38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b9e38:	b508      	push	{r3, lr}
   b9e3a:	4b02      	ldr	r3, [pc, #8]	; (b9e44 <network_is_on+0xc>)
   b9e3c:	681b      	ldr	r3, [r3, #0]
   b9e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9e40:	9301      	str	r3, [sp, #4]
   b9e42:	bd08      	pop	{r3, pc}
   b9e44:	00030240 	.word	0x00030240

000b9e48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b9e48:	b508      	push	{r3, lr}
   b9e4a:	4b02      	ldr	r3, [pc, #8]	; (b9e54 <network_is_off+0xc>)
   b9e4c:	681b      	ldr	r3, [r3, #0]
   b9e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e50:	9301      	str	r3, [sp, #4]
   b9e52:	bd08      	pop	{r3, pc}
   b9e54:	00030240 	.word	0x00030240

000b9e58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b9e58:	b508      	push	{r3, lr}
   b9e5a:	4b02      	ldr	r3, [pc, #8]	; (b9e64 <spark_set_random_seed_from_cloud_handler+0xc>)
   b9e5c:	681b      	ldr	r3, [r3, #0]
   b9e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b9e60:	9301      	str	r3, [sp, #4]
   b9e62:	bd08      	pop	{r3, pc}
   b9e64:	00030244 	.word	0x00030244

000b9e68 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b9e68:	b508      	push	{r3, lr}
   b9e6a:	4b02      	ldr	r3, [pc, #8]	; (b9e74 <spark_cloud_disconnect+0xc>)
   b9e6c:	681b      	ldr	r3, [r3, #0]
   b9e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9e70:	9301      	str	r3, [sp, #4]
   b9e72:	bd08      	pop	{r3, pc}
   b9e74:	00030244 	.word	0x00030244

000b9e78 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b9e78:	b508      	push	{r3, lr}
   b9e7a:	4b02      	ldr	r3, [pc, #8]	; (b9e84 <malloc+0xc>)
   b9e7c:	681b      	ldr	r3, [r3, #0]
   b9e7e:	681b      	ldr	r3, [r3, #0]
   b9e80:	9301      	str	r3, [sp, #4]
   b9e82:	bd08      	pop	{r3, pc}
   b9e84:	0003021c 	.word	0x0003021c

000b9e88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b9e88:	b508      	push	{r3, lr}
   b9e8a:	4b02      	ldr	r3, [pc, #8]	; (b9e94 <free+0xc>)
   b9e8c:	681b      	ldr	r3, [r3, #0]
   b9e8e:	685b      	ldr	r3, [r3, #4]
   b9e90:	9301      	str	r3, [sp, #4]
   b9e92:	bd08      	pop	{r3, pc}
   b9e94:	0003021c 	.word	0x0003021c

000b9e98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b9e98:	b508      	push	{r3, lr}
   b9e9a:	4b02      	ldr	r3, [pc, #8]	; (b9ea4 <realloc+0xc>)
   b9e9c:	681b      	ldr	r3, [r3, #0]
   b9e9e:	689b      	ldr	r3, [r3, #8]
   b9ea0:	9301      	str	r3, [sp, #4]
   b9ea2:	bd08      	pop	{r3, pc}
   b9ea4:	0003021c 	.word	0x0003021c

000b9ea8 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b9ea8:	b508      	push	{r3, lr}
   b9eaa:	4b02      	ldr	r3, [pc, #8]	; (b9eb4 <snprintf+0xc>)
   b9eac:	681b      	ldr	r3, [r3, #0]
   b9eae:	69db      	ldr	r3, [r3, #28]
   b9eb0:	9301      	str	r3, [sp, #4]
   b9eb2:	bd08      	pop	{r3, pc}
   b9eb4:	0003021c 	.word	0x0003021c

000b9eb8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b9eb8:	b508      	push	{r3, lr}
   b9eba:	4b02      	ldr	r3, [pc, #8]	; (b9ec4 <vsnprintf+0xc>)
   b9ebc:	681b      	ldr	r3, [r3, #0]
   b9ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9ec0:	9301      	str	r3, [sp, #4]
   b9ec2:	bd08      	pop	{r3, pc}
   b9ec4:	0003021c 	.word	0x0003021c

000b9ec8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b9ec8:	b508      	push	{r3, lr}
   b9eca:	4b02      	ldr	r3, [pc, #8]	; (b9ed4 <_malloc_r+0xc>)
   b9ecc:	681b      	ldr	r3, [r3, #0]
   b9ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9ed0:	9301      	str	r3, [sp, #4]
   b9ed2:	bd08      	pop	{r3, pc}
   b9ed4:	0003021c 	.word	0x0003021c

000b9ed8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b9ed8:	b508      	push	{r3, lr}
   b9eda:	4b02      	ldr	r3, [pc, #8]	; (b9ee4 <__assert_func+0xc>)
   b9edc:	681b      	ldr	r3, [r3, #0]
   b9ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b9ee0:	9301      	str	r3, [sp, #4]
   b9ee2:	bd08      	pop	{r3, pc}
   b9ee4:	0003021c 	.word	0x0003021c

000b9ee8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b9ee8:	b508      	push	{r3, lr}
   b9eea:	4b02      	ldr	r3, [pc, #8]	; (b9ef4 <newlib_impure_ptr_callback+0xc>)
   b9eec:	681b      	ldr	r3, [r3, #0]
   b9eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b9ef0:	9301      	str	r3, [sp, #4]
   b9ef2:	bd08      	pop	{r3, pc}
   b9ef4:	0003021c 	.word	0x0003021c

000b9ef8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9ef8:	2200      	movs	r2, #0
   b9efa:	6840      	ldr	r0, [r0, #4]
   b9efc:	4611      	mov	r1, r2
   b9efe:	f7ff bf83 	b.w	b9e08 <network_listening>

000b9f02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9f02:	2200      	movs	r2, #0
   b9f04:	6840      	ldr	r0, [r0, #4]
   b9f06:	4611      	mov	r1, r2
   b9f08:	f7ff bf8e 	b.w	b9e28 <network_get_listen_timeout>

000b9f0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9f0c:	6840      	ldr	r0, [r0, #4]
   b9f0e:	2200      	movs	r2, #0
   b9f10:	f7ff bf82 	b.w	b9e18 <network_set_listen_timeout>

000b9f14 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9f14:	6840      	ldr	r0, [r0, #4]
   b9f16:	2200      	movs	r2, #0
   b9f18:	f081 0101 	eor.w	r1, r1, #1
   b9f1c:	f7ff bf6c 	b.w	b9df8 <network_listen>

000b9f20 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9f20:	2300      	movs	r3, #0
   b9f22:	6840      	ldr	r0, [r0, #4]
   b9f24:	461a      	mov	r2, r3
   b9f26:	4619      	mov	r1, r3
   b9f28:	f7ff bf5e 	b.w	b9de8 <network_off>

000b9f2c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9f2c:	2300      	movs	r3, #0
   b9f2e:	6840      	ldr	r0, [r0, #4]
   b9f30:	461a      	mov	r2, r3
   b9f32:	4619      	mov	r1, r3
   b9f34:	f7ff bf50 	b.w	b9dd8 <network_on>

000b9f38 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9f38:	2200      	movs	r2, #0
   b9f3a:	6840      	ldr	r0, [r0, #4]
   b9f3c:	4611      	mov	r1, r2
   b9f3e:	f7ff bf43 	b.w	b9dc8 <network_ready>

000b9f42 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9f42:	2200      	movs	r2, #0
   b9f44:	6840      	ldr	r0, [r0, #4]
   b9f46:	4611      	mov	r1, r2
   b9f48:	f7ff bf2e 	b.w	b9da8 <network_connecting>

000b9f4c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9f4c:	6840      	ldr	r0, [r0, #4]
   b9f4e:	2200      	movs	r2, #0
   b9f50:	2102      	movs	r1, #2
   b9f52:	f7ff bf31 	b.w	b9db8 <network_disconnect>

000b9f56 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9f56:	2300      	movs	r3, #0
   b9f58:	6840      	ldr	r0, [r0, #4]
   b9f5a:	461a      	mov	r2, r3
   b9f5c:	f7ff bf1c 	b.w	b9d98 <network_connect>

000b9f60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9f60:	4b02      	ldr	r3, [pc, #8]	; (b9f6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9f62:	2203      	movs	r2, #3
   b9f64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9f66:	4a02      	ldr	r2, [pc, #8]	; (b9f70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9f68:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9f6a:	4770      	bx	lr
   b9f6c:	2003e6bc 	.word	0x2003e6bc
   b9f70:	000bccb4 	.word	0x000bccb4

000b9f74 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b9f74:	2100      	movs	r1, #0
   b9f76:	f7ff be93 	b.w	b9ca0 <hal_spi_release>

000b9f7a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b9f7a:	2100      	movs	r1, #0
   b9f7c:	f7ff be88 	b.w	b9c90 <hal_spi_acquire>

000b9f80 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9f80:	b510      	push	{r4, lr}
   b9f82:	4604      	mov	r4, r0
   b9f84:	4608      	mov	r0, r1
{
    _spi = spi;
   b9f86:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9f88:	f7ff fe62 	bl	b9c50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b9f8c:	2300      	movs	r3, #0
   b9f8e:	6063      	str	r3, [r4, #4]
}
   b9f90:	4620      	mov	r0, r4
   b9f92:	bd10      	pop	{r4, pc}

000b9f94 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b9f94:	b513      	push	{r0, r1, r4, lr}
   b9f96:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b9f98:	7800      	ldrb	r0, [r0, #0]
   b9f9a:	f7ff ffee 	bl	b9f7a <_ZN8SPIClass4lockEv.isra.0>
   b9f9e:	b958      	cbnz	r0, b9fb8 <_ZN8SPIClass5beginEv+0x24>
   b9fa0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b9fa2:	9001      	str	r0, [sp, #4]
   b9fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9fa8:	f7ff fe42 	bl	b9c30 <hal_spi_begin>
        unlock();
   b9fac:	9801      	ldr	r0, [sp, #4]
    }
}
   b9fae:	b002      	add	sp, #8
   b9fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9fb4:	f7ff bfde 	b.w	b9f74 <_ZN8SPIClass6unlockEv.isra.0>
   b9fb8:	b002      	add	sp, #8
   b9fba:	bd10      	pop	{r4, pc}

000b9fbc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b9fbc:	7800      	ldrb	r0, [r0, #0]
   b9fbe:	f7ff bfd9 	b.w	b9f74 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b9fc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b9fc4:	0840      	lsrs	r0, r0, #1
{
   b9fc6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b9fc8:	6018      	str	r0, [r3, #0]
   b9fca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b9fcc:	6818      	ldr	r0, [r3, #0]
   b9fce:	4288      	cmp	r0, r1
   b9fd0:	b2e5      	uxtb	r5, r4
   b9fd2:	d906      	bls.n	b9fe2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b9fd4:	3401      	adds	r4, #1
   b9fd6:	2c08      	cmp	r4, #8
   b9fd8:	d002      	beq.n	b9fe0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b9fda:	0840      	lsrs	r0, r0, #1
   b9fdc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b9fde:	e7f5      	b.n	b9fcc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b9fe0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b9fe2:	4b02      	ldr	r3, [pc, #8]	; (b9fec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b9fe4:	5d5b      	ldrb	r3, [r3, r5]
   b9fe6:	7013      	strb	r3, [r2, #0]
}
   b9fe8:	bd30      	pop	{r4, r5, pc}
   b9fea:	bf00      	nop
   b9fec:	000bcce8 	.word	0x000bcce8

000b9ff0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b9ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9ff4:	4606      	mov	r6, r0
   b9ff6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b9ff8:	7800      	ldrb	r0, [r0, #0]
{
   b9ffa:	460c      	mov	r4, r1
    CHECK(lock());
   b9ffc:	f7ff ffbd 	bl	b9f7a <_ZN8SPIClass4lockEv.isra.0>
   ba000:	2800      	cmp	r0, #0
   ba002:	db1b      	blt.n	ba03c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba004:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba006:	2214      	movs	r2, #20
   ba008:	2100      	movs	r1, #0
   ba00a:	a809      	add	r0, sp, #36	; 0x24
   ba00c:	f000 ff38 	bl	bae80 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba010:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba012:	2200      	movs	r2, #0
   ba014:	a909      	add	r1, sp, #36	; 0x24
   ba016:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba018:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba01c:	f7ff fe28 	bl	b9c70 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba020:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba024:	b113      	cbz	r3, ba02c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba026:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba02a:	b155      	cbz	r5, ba042 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba02c:	2700      	movs	r7, #0
   ba02e:	46b9      	mov	r9, r7
   ba030:	46b8      	mov	r8, r7
   ba032:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba034:	7923      	ldrb	r3, [r4, #4]
   ba036:	b15d      	cbz	r5, ba050 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba038:	b1c3      	cbz	r3, ba06c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba03a:	2000      	movs	r0, #0
}
   ba03c:	b00f      	add	sp, #60	; 0x3c
   ba03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba042:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba046:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba04a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba04e:	e7f1      	b.n	ba034 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba050:	2b00      	cmp	r3, #0
   ba052:	d135      	bne.n	ba0c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba054:	68a3      	ldr	r3, [r4, #8]
   ba056:	4543      	cmp	r3, r8
   ba058:	d108      	bne.n	ba06c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba05a:	f88d 9020 	strb.w	r9, [sp, #32]
   ba05e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba062:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba066:	89a3      	ldrh	r3, [r4, #12]
   ba068:	429a      	cmp	r2, r3
   ba06a:	d0e6      	beq.n	ba03a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba06c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba06e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba070:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba074:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba076:	ab04      	add	r3, sp, #16
   ba078:	f10d 020f 	add.w	r2, sp, #15
   ba07c:	f7ff ffa2 	bl	b9fc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba080:	7921      	ldrb	r1, [r4, #4]
   ba082:	b985      	cbnz	r5, ba0a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba084:	b989      	cbnz	r1, ba0aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba086:	68a3      	ldr	r3, [r4, #8]
   ba088:	4543      	cmp	r3, r8
   ba08a:	d30e      	bcc.n	ba0aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba08c:	f88d 9020 	strb.w	r9, [sp, #32]
   ba090:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba094:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba098:	89a3      	ldrh	r3, [r4, #12]
   ba09a:	429a      	cmp	r2, r3
   ba09c:	d105      	bne.n	ba0aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba09e:	9b04      	ldr	r3, [sp, #16]
   ba0a0:	4543      	cmp	r3, r8
   ba0a2:	d102      	bne.n	ba0aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba0a4:	e7c9      	b.n	ba03a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba0a6:	2900      	cmp	r1, #0
   ba0a8:	d1f9      	bne.n	ba09e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba0aa:	2300      	movs	r3, #0
   ba0ac:	9301      	str	r3, [sp, #4]
   ba0ae:	7b63      	ldrb	r3, [r4, #13]
   ba0b0:	9300      	str	r3, [sp, #0]
   ba0b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba0b6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba0b8:	7830      	ldrb	r0, [r6, #0]
   ba0ba:	f7ff fde1 	bl	b9c80 <hal_spi_set_settings>
   ba0be:	e7bc      	b.n	ba03a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba0c0:	e9cd 5500 	strd	r5, r5, [sp]
   ba0c4:	462b      	mov	r3, r5
   ba0c6:	462a      	mov	r2, r5
   ba0c8:	2101      	movs	r1, #1
   ba0ca:	e7f5      	b.n	ba0b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba0cc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba0cc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba0ce:	7800      	ldrb	r0, [r0, #0]
   ba0d0:	f7ff fdb6 	bl	b9c40 <hal_spi_transfer>
}
   ba0d4:	b2c0      	uxtb	r0, r0
   ba0d6:	bd08      	pop	{r3, pc}

000ba0d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba0d8:	4b05      	ldr	r3, [pc, #20]	; (ba0f0 <_GLOBAL__sub_I_System+0x18>)
   ba0da:	2202      	movs	r2, #2
   ba0dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba0de:	4b05      	ldr	r3, [pc, #20]	; (ba0f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba0e0:	4a05      	ldr	r2, [pc, #20]	; (ba0f8 <_GLOBAL__sub_I_System+0x20>)
   ba0e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba0e4:	2000      	movs	r0, #0
   ba0e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba0ea:	f7ff be31 	b.w	b9d50 <set_system_mode>
   ba0ee:	bf00      	nop
   ba0f0:	2003e6d0 	.word	0x2003e6d0
   ba0f4:	2003e6c4 	.word	0x2003e6c4
   ba0f8:	ffff0000 	.word	0xffff0000

000ba0fc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba0fc:	b510      	push	{r4, lr}
   ba0fe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba100:	f7fa fbac 	bl	b485c <strlen>
   ba104:	3801      	subs	r0, #1
   ba106:	1823      	adds	r3, r4, r0
   ba108:	4620      	mov	r0, r4
	while(i<j){
   ba10a:	4283      	cmp	r3, r0
   ba10c:	d906      	bls.n	ba11c <_Z11str_reversePc+0x20>
		c = *i;
   ba10e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba110:	7819      	ldrb	r1, [r3, #0]
   ba112:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba116:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba11a:	e7f6      	b.n	ba10a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba11c:	bd10      	pop	{r4, pc}

000ba11e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba11e:	b570      	push	{r4, r5, r6, lr}
   ba120:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba122:	1e91      	subs	r1, r2, #2
   ba124:	2922      	cmp	r1, #34	; 0x22
   ba126:	d81d      	bhi.n	ba164 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba128:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba12a:	b930      	cbnz	r0, ba13a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba12c:	4423      	add	r3, r4
            *ptr++ = '0';
   ba12e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba130:	429d      	cmp	r5, r3
   ba132:	d210      	bcs.n	ba156 <ultoa+0x38>
            *ptr++ = '0';
   ba134:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba138:	e7fa      	b.n	ba130 <ultoa+0x12>
            result.quot = a/radix;
   ba13a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba13e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba142:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba144:	2809      	cmp	r0, #9
                *ptr += '0';
   ba146:	bf94      	ite	ls
   ba148:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba14a:	3157      	addhi	r1, #87	; 0x57
   ba14c:	b2c9      	uxtb	r1, r1
   ba14e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba152:	4630      	mov	r0, r6
	while(a){
   ba154:	e7e9      	b.n	ba12a <ultoa+0xc>

	*ptr = '\0';
   ba156:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba158:	4620      	mov	r0, r4
	*ptr = '\0';
   ba15a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba15c:	f7ff ffce 	bl	ba0fc <_Z11str_reversePc>
	return buffer;
   ba160:	4620      	mov	r0, r4
}
   ba162:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba164:	2000      	movs	r0, #0
   ba166:	e7fc      	b.n	ba162 <ultoa+0x44>

000ba168 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba168:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba16a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba16c:	460c      	mov	r4, r1
   ba16e:	4615      	mov	r5, r2
	if(a<0){
   ba170:	da0e      	bge.n	ba190 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba176:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba17a:	bf14      	ite	ne
   ba17c:	4258      	negne	r0, r3
   ba17e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba180:	2301      	movs	r3, #1
		*buffer = '-';
   ba182:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba184:	462a      	mov	r2, r5
   ba186:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba188:	f7ff ffc9 	bl	ba11e <ultoa>
	}
	return buffer;
}
   ba18c:	4620      	mov	r0, r4
   ba18e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba190:	2301      	movs	r3, #1
   ba192:	e7f9      	b.n	ba188 <itoa+0x20>

000ba194 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba194:	b510      	push	{r4, lr}
   ba196:	4604      	mov	r4, r0
{
	free(buffer);
   ba198:	6800      	ldr	r0, [r0, #0]
   ba19a:	f7ff fe75 	bl	b9e88 <free>
}
   ba19e:	4620      	mov	r0, r4
   ba1a0:	bd10      	pop	{r4, pc}

000ba1a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba1a2:	b510      	push	{r4, lr}
   ba1a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba1a6:	6800      	ldr	r0, [r0, #0]
   ba1a8:	b108      	cbz	r0, ba1ae <_ZN6String10invalidateEv+0xc>
   ba1aa:	f7ff fe6d 	bl	b9e88 <free>
	buffer = NULL;
   ba1ae:	2300      	movs	r3, #0
	capacity = len = 0;
   ba1b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba1b4:	6023      	str	r3, [r4, #0]
}
   ba1b6:	bd10      	pop	{r4, pc}

000ba1b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba1b8:	b538      	push	{r3, r4, r5, lr}
   ba1ba:	4604      	mov	r4, r0
   ba1bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba1be:	6800      	ldr	r0, [r0, #0]
   ba1c0:	3101      	adds	r1, #1
   ba1c2:	f7ff fe69 	bl	b9e98 <realloc>
	if (newbuffer) {
   ba1c6:	b110      	cbz	r0, ba1ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba1c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba1cc:	2001      	movs	r0, #1
	}
	return 0;
}
   ba1ce:	bd38      	pop	{r3, r4, r5, pc}

000ba1d0 <_ZN6String7reserveEj>:
{
   ba1d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba1d2:	6803      	ldr	r3, [r0, #0]
{
   ba1d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba1d6:	b123      	cbz	r3, ba1e2 <_ZN6String7reserveEj+0x12>
   ba1d8:	6843      	ldr	r3, [r0, #4]
   ba1da:	428b      	cmp	r3, r1
   ba1dc:	d301      	bcc.n	ba1e2 <_ZN6String7reserveEj+0x12>
   ba1de:	2001      	movs	r0, #1
}
   ba1e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba1e2:	4620      	mov	r0, r4
   ba1e4:	f7ff ffe8 	bl	ba1b8 <_ZN6String12changeBufferEj>
   ba1e8:	2800      	cmp	r0, #0
   ba1ea:	d0f9      	beq.n	ba1e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba1ec:	68a3      	ldr	r3, [r4, #8]
   ba1ee:	2b00      	cmp	r3, #0
   ba1f0:	d1f5      	bne.n	ba1de <_ZN6String7reserveEj+0xe>
   ba1f2:	6822      	ldr	r2, [r4, #0]
   ba1f4:	7013      	strb	r3, [r2, #0]
   ba1f6:	e7f2      	b.n	ba1de <_ZN6String7reserveEj+0xe>

000ba1f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba1fa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba1fc:	4611      	mov	r1, r2
   ba1fe:	9201      	str	r2, [sp, #4]
{
   ba200:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba202:	f7ff ffe5 	bl	ba1d0 <_ZN6String7reserveEj>
   ba206:	9a01      	ldr	r2, [sp, #4]
   ba208:	b928      	cbnz	r0, ba216 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba20a:	4620      	mov	r0, r4
   ba20c:	f7ff ffc9 	bl	ba1a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba210:	4620      	mov	r0, r4
   ba212:	b003      	add	sp, #12
   ba214:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba216:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba218:	4629      	mov	r1, r5
   ba21a:	6820      	ldr	r0, [r4, #0]
   ba21c:	f000 fe22 	bl	bae64 <memcpy>
	buffer[len] = 0;
   ba220:	6822      	ldr	r2, [r4, #0]
   ba222:	68a3      	ldr	r3, [r4, #8]
   ba224:	2100      	movs	r1, #0
   ba226:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba228:	e7f2      	b.n	ba210 <_ZN6String4copyEPKcj+0x18>

000ba22a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba22a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba22c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba22e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba232:	4604      	mov	r4, r0
	len = 0;
   ba234:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba236:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba238:	b141      	cbz	r1, ba24c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba23a:	4608      	mov	r0, r1
   ba23c:	9101      	str	r1, [sp, #4]
   ba23e:	f7fa fb0d 	bl	b485c <strlen>
   ba242:	9901      	ldr	r1, [sp, #4]
   ba244:	4602      	mov	r2, r0
   ba246:	4620      	mov	r0, r4
   ba248:	f7ff ffd6 	bl	ba1f8 <_ZN6String4copyEPKcj>
}
   ba24c:	4620      	mov	r0, r4
   ba24e:	b002      	add	sp, #8
   ba250:	bd10      	pop	{r4, pc}

000ba252 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba252:	4288      	cmp	r0, r1
{
   ba254:	b510      	push	{r4, lr}
   ba256:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba258:	d005      	beq.n	ba266 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba25a:	680b      	ldr	r3, [r1, #0]
   ba25c:	b12b      	cbz	r3, ba26a <_ZN6StringaSERKS_+0x18>
   ba25e:	688a      	ldr	r2, [r1, #8]
   ba260:	4619      	mov	r1, r3
   ba262:	f7ff ffc9 	bl	ba1f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba266:	4620      	mov	r0, r4
   ba268:	bd10      	pop	{r4, pc}
	else invalidate();
   ba26a:	f7ff ff9a 	bl	ba1a2 <_ZN6String10invalidateEv>
   ba26e:	e7fa      	b.n	ba266 <_ZN6StringaSERKS_+0x14>

000ba270 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba270:	b510      	push	{r4, lr}
	buffer = NULL;
   ba272:	2300      	movs	r3, #0
String::String(const String &value)
   ba274:	4604      	mov	r4, r0
	capacity = 0;
   ba276:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba27a:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba27c:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba27e:	f7ff ffe8 	bl	ba252 <_ZN6StringaSERKS_>
}
   ba282:	4620      	mov	r0, r4
   ba284:	bd10      	pop	{r4, pc}

000ba286 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba286:	b513      	push	{r0, r1, r4, lr}
   ba288:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba28a:	b159      	cbz	r1, ba2a4 <_ZN6StringaSEPKc+0x1e>
   ba28c:	4608      	mov	r0, r1
   ba28e:	9101      	str	r1, [sp, #4]
   ba290:	f7fa fae4 	bl	b485c <strlen>
   ba294:	9901      	ldr	r1, [sp, #4]
   ba296:	4602      	mov	r2, r0
   ba298:	4620      	mov	r0, r4
   ba29a:	f7ff ffad 	bl	ba1f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba29e:	4620      	mov	r0, r4
   ba2a0:	b002      	add	sp, #8
   ba2a2:	bd10      	pop	{r4, pc}
	else invalidate();
   ba2a4:	f7ff ff7d 	bl	ba1a2 <_ZN6String10invalidateEv>
   ba2a8:	e7f9      	b.n	ba29e <_ZN6StringaSEPKc+0x18>

000ba2aa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba2aa:	b510      	push	{r4, lr}
   ba2ac:	4604      	mov	r4, r0
   ba2ae:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba2b0:	2300      	movs	r3, #0
	capacity = 0;
   ba2b2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba2b6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba2b8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba2ba:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba2bc:	a901      	add	r1, sp, #4
   ba2be:	f7ff ff53 	bl	ba168 <itoa>
	*this = buf;
   ba2c2:	a901      	add	r1, sp, #4
   ba2c4:	4620      	mov	r0, r4
   ba2c6:	f7ff ffde 	bl	ba286 <_ZN6StringaSEPKc>
}
   ba2ca:	4620      	mov	r0, r4
   ba2cc:	b00a      	add	sp, #40	; 0x28
   ba2ce:	bd10      	pop	{r4, pc}

000ba2d0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba2d0:	b570      	push	{r4, r5, r6, lr}
   ba2d2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba2d4:	460e      	mov	r6, r1
   ba2d6:	b909      	cbnz	r1, ba2dc <_ZN6String6concatEPKcj+0xc>
   ba2d8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba2da:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba2dc:	b16a      	cbz	r2, ba2fa <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba2de:	6884      	ldr	r4, [r0, #8]
   ba2e0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba2e2:	4621      	mov	r1, r4
   ba2e4:	f7ff ff74 	bl	ba1d0 <_ZN6String7reserveEj>
   ba2e8:	2800      	cmp	r0, #0
   ba2ea:	d0f5      	beq.n	ba2d8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba2ec:	6828      	ldr	r0, [r5, #0]
   ba2ee:	68ab      	ldr	r3, [r5, #8]
   ba2f0:	4631      	mov	r1, r6
   ba2f2:	4418      	add	r0, r3
   ba2f4:	f000 fe0a 	bl	baf0c <strcpy>
	len = newlen;
   ba2f8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba2fa:	2001      	movs	r0, #1
   ba2fc:	e7ed      	b.n	ba2da <_ZN6String6concatEPKcj+0xa>

000ba2fe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba2fe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba300:	688a      	ldr	r2, [r1, #8]
   ba302:	6809      	ldr	r1, [r1, #0]
{
   ba304:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba306:	f7ff ffe3 	bl	ba2d0 <_ZN6String6concatEPKcj>
   ba30a:	b910      	cbnz	r0, ba312 <_ZplRK15StringSumHelperRK6String+0x14>
   ba30c:	4620      	mov	r0, r4
   ba30e:	f7ff ff48 	bl	ba1a2 <_ZN6String10invalidateEv>
	return a;
}
   ba312:	4620      	mov	r0, r4
   ba314:	bd10      	pop	{r4, pc}

000ba316 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba316:	b513      	push	{r0, r1, r4, lr}
   ba318:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba31a:	b929      	cbnz	r1, ba328 <_ZplRK15StringSumHelperPKc+0x12>
   ba31c:	4620      	mov	r0, r4
   ba31e:	f7ff ff40 	bl	ba1a2 <_ZN6String10invalidateEv>
	return a;
}
   ba322:	4620      	mov	r0, r4
   ba324:	b002      	add	sp, #8
   ba326:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba328:	4608      	mov	r0, r1
   ba32a:	9101      	str	r1, [sp, #4]
   ba32c:	f7fa fa96 	bl	b485c <strlen>
   ba330:	9901      	ldr	r1, [sp, #4]
   ba332:	4602      	mov	r2, r0
   ba334:	4620      	mov	r0, r4
   ba336:	f7ff ffcb 	bl	ba2d0 <_ZN6String6concatEPKcj>
   ba33a:	2800      	cmp	r0, #0
   ba33c:	d0ee      	beq.n	ba31c <_ZplRK15StringSumHelperPKc+0x6>
   ba33e:	e7f0      	b.n	ba322 <_ZplRK15StringSumHelperPKc+0xc>

000ba340 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   ba340:	4802      	ldr	r0, [pc, #8]	; (ba34c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba342:	2300      	movs	r3, #0
   ba344:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   ba346:	f7ff bbcb 	b.w	b9ae0 <os_mutex_recursive_create>
   ba34a:	bf00      	nop
   ba34c:	2003e6d4 	.word	0x2003e6d4

000ba350 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba352:	4606      	mov	r6, r0
   ba354:	460d      	mov	r5, r1
  size_t n = 0;
   ba356:	188f      	adds	r7, r1, r2
   ba358:	2400      	movs	r4, #0
  while (size--) {
   ba35a:	42bd      	cmp	r5, r7
   ba35c:	d00c      	beq.n	ba378 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba35e:	6833      	ldr	r3, [r6, #0]
   ba360:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba364:	689b      	ldr	r3, [r3, #8]
   ba366:	4630      	mov	r0, r6
   ba368:	4798      	blx	r3
     if (chunk>=0)
   ba36a:	1e03      	subs	r3, r0, #0
   ba36c:	db01      	blt.n	ba372 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba36e:	441c      	add	r4, r3
  while (size--) {
   ba370:	e7f3      	b.n	ba35a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba372:	2c00      	cmp	r4, #0
   ba374:	bf08      	it	eq
   ba376:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba378:	4620      	mov	r0, r4
   ba37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba37c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   ba37c:	b513      	push	{r0, r1, r4, lr}
   ba37e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   ba380:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba382:	b159      	cbz	r1, ba39c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba384:	9101      	str	r1, [sp, #4]
   ba386:	f7fa fa69 	bl	b485c <strlen>
   ba38a:	6823      	ldr	r3, [r4, #0]
   ba38c:	9901      	ldr	r1, [sp, #4]
   ba38e:	68db      	ldr	r3, [r3, #12]
   ba390:	4602      	mov	r2, r0
   ba392:	4620      	mov	r0, r4
    }
   ba394:	b002      	add	sp, #8
   ba396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba39a:	4718      	bx	r3
    }
   ba39c:	b002      	add	sp, #8
   ba39e:	bd10      	pop	{r4, pc}

000ba3a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba3a0:	b508      	push	{r3, lr}
  return write(str);
   ba3a2:	f7ff ffeb 	bl	ba37c <_ZN5Print5writeEPKc>
}
   ba3a6:	bd08      	pop	{r3, pc}

000ba3a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba3a8:	6803      	ldr	r3, [r0, #0]
   ba3aa:	689b      	ldr	r3, [r3, #8]
   ba3ac:	4718      	bx	r3

000ba3ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba3ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba3b0:	210d      	movs	r1, #13
{
   ba3b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba3b4:	f7ff fff8 	bl	ba3a8 <_ZN5Print5printEc>
  n += print('\n');
   ba3b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba3ba:	4604      	mov	r4, r0
  n += print('\n');
   ba3bc:	4628      	mov	r0, r5
   ba3be:	f7ff fff3 	bl	ba3a8 <_ZN5Print5printEc>
  return n;
}
   ba3c2:	4420      	add	r0, r4
   ba3c4:	bd38      	pop	{r3, r4, r5, pc}

000ba3c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba3c6:	b538      	push	{r3, r4, r5, lr}
   ba3c8:	4605      	mov	r5, r0
  return write(str);
   ba3ca:	f7ff ffd7 	bl	ba37c <_ZN5Print5writeEPKc>
   ba3ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba3d0:	4628      	mov	r0, r5
   ba3d2:	f7ff ffec 	bl	ba3ae <_ZN5Print7printlnEv>
  return n;
}
   ba3d6:	4420      	add	r0, r4
   ba3d8:	bd38      	pop	{r3, r4, r5, pc}

000ba3da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba3da:	b530      	push	{r4, r5, lr}
   ba3dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba3de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba3e0:	2a01      	cmp	r2, #1
  *str = '\0';
   ba3e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba3e6:	bf98      	it	ls
   ba3e8:	220a      	movls	r2, #10
   ba3ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba3ec:	460d      	mov	r5, r1
   ba3ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba3f2:	fb01 5312 	mls	r3, r1, r2, r5
   ba3f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba3fa:	2b09      	cmp	r3, #9
   ba3fc:	bf94      	ite	ls
   ba3fe:	3330      	addls	r3, #48	; 0x30
   ba400:	3337      	addhi	r3, #55	; 0x37
   ba402:	b2db      	uxtb	r3, r3
  } while(n);
   ba404:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba406:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba40a:	d9ef      	bls.n	ba3ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba40c:	4621      	mov	r1, r4
   ba40e:	f7ff ffb5 	bl	ba37c <_ZN5Print5writeEPKc>
}
   ba412:	b00b      	add	sp, #44	; 0x2c
   ba414:	bd30      	pop	{r4, r5, pc}

000ba416 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba41a:	b086      	sub	sp, #24
   ba41c:	af00      	add	r7, sp, #0
   ba41e:	4605      	mov	r5, r0
   ba420:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba422:	1d38      	adds	r0, r7, #4
   ba424:	2114      	movs	r1, #20
{
   ba426:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba428:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba42a:	f7ff fd45 	bl	b9eb8 <vsnprintf>

    if (n<bufsize)
   ba42e:	2813      	cmp	r0, #19
   ba430:	d80e      	bhi.n	ba450 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba432:	1d39      	adds	r1, r7, #4
   ba434:	4628      	mov	r0, r5
   ba436:	f7ff ffa1 	bl	ba37c <_ZN5Print5writeEPKc>
   ba43a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba43c:	b11e      	cbz	r6, ba446 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba43e:	4628      	mov	r0, r5
   ba440:	f7ff ffb5 	bl	ba3ae <_ZN5Print7printlnEv>
   ba444:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba446:	4620      	mov	r0, r4
   ba448:	3718      	adds	r7, #24
   ba44a:	46bd      	mov	sp, r7
   ba44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba450:	f100 0308 	add.w	r3, r0, #8
   ba454:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba458:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba45a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba45e:	4622      	mov	r2, r4
   ba460:	1c41      	adds	r1, r0, #1
   ba462:	683b      	ldr	r3, [r7, #0]
   ba464:	4668      	mov	r0, sp
   ba466:	f7ff fd27 	bl	b9eb8 <vsnprintf>
  return write(str);
   ba46a:	4669      	mov	r1, sp
   ba46c:	4628      	mov	r0, r5
   ba46e:	f7ff ff85 	bl	ba37c <_ZN5Print5writeEPKc>
   ba472:	4604      	mov	r4, r0
   ba474:	46c5      	mov	sp, r8
   ba476:	e7e1      	b.n	ba43c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba478 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba478:	4b01      	ldr	r3, [pc, #4]	; (ba480 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba47a:	4a02      	ldr	r2, [pc, #8]	; (ba484 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba47c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba47e:	4770      	bx	lr
   ba480:	2003e6d8 	.word	0x2003e6d8
   ba484:	000bccf0 	.word	0x000bccf0

000ba488 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba488:	4b02      	ldr	r3, [pc, #8]	; (ba494 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba48a:	681a      	ldr	r2, [r3, #0]
   ba48c:	4b02      	ldr	r3, [pc, #8]	; (ba498 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba48e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba490:	4770      	bx	lr
   ba492:	bf00      	nop
   ba494:	2003cca4 	.word	0x2003cca4
   ba498:	2003e6dc 	.word	0x2003e6dc

000ba49c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba49c:	2100      	movs	r1, #0
   ba49e:	f7ff bc5f 	b.w	b9d60 <system_delay_ms>
	...

000ba4a4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   ba4a4:	4b01      	ldr	r3, [pc, #4]	; (ba4ac <_GLOBAL__sub_I_RGB+0x8>)
   ba4a6:	2200      	movs	r2, #0
   ba4a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba4aa:	4770      	bx	lr
   ba4ac:	2003e6e0 	.word	0x2003e6e0

000ba4b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba4b0:	4b01      	ldr	r3, [pc, #4]	; (ba4b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba4b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba4b4:	4770      	bx	lr
   ba4b6:	bf00      	nop
   ba4b8:	2003cca8 	.word	0x2003cca8

000ba4bc <serialEventRun>:
{
   ba4bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba4be:	4b0b      	ldr	r3, [pc, #44]	; (ba4ec <serialEventRun+0x30>)
   ba4c0:	b143      	cbz	r3, ba4d4 <serialEventRun+0x18>
   ba4c2:	f000 f981 	bl	ba7c8 <_Z16_fetch_usbserialv>
   ba4c6:	6803      	ldr	r3, [r0, #0]
   ba4c8:	691b      	ldr	r3, [r3, #16]
   ba4ca:	4798      	blx	r3
   ba4cc:	2800      	cmp	r0, #0
   ba4ce:	dd01      	ble.n	ba4d4 <serialEventRun+0x18>
        serialEvent();
   ba4d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba4d4:	4b06      	ldr	r3, [pc, #24]	; (ba4f0 <serialEventRun+0x34>)
   ba4d6:	b143      	cbz	r3, ba4ea <serialEventRun+0x2e>
   ba4d8:	f000 fc3a 	bl	bad50 <_Z22__fetch_global_Serial1v>
   ba4dc:	6803      	ldr	r3, [r0, #0]
   ba4de:	691b      	ldr	r3, [r3, #16]
   ba4e0:	4798      	blx	r3
   ba4e2:	2800      	cmp	r0, #0
   ba4e4:	dd01      	ble.n	ba4ea <serialEventRun+0x2e>
        serialEvent1();
   ba4e6:	f3af 8000 	nop.w
}
   ba4ea:	bd08      	pop	{r3, pc}
	...

000ba4f4 <_post_loop>:
{
   ba4f4:	b508      	push	{r3, lr}
	serialEventRun();
   ba4f6:	f7ff ffe1 	bl	ba4bc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba4fa:	f7ff fad1 	bl	b9aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba4fe:	4b01      	ldr	r3, [pc, #4]	; (ba504 <_post_loop+0x10>)
   ba500:	6018      	str	r0, [r3, #0]
}
   ba502:	bd08      	pop	{r3, pc}
   ba504:	2003e738 	.word	0x2003e738

000ba508 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba508:	4805      	ldr	r0, [pc, #20]	; (ba520 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba50a:	4a06      	ldr	r2, [pc, #24]	; (ba524 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba50c:	4906      	ldr	r1, [pc, #24]	; (ba528 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba50e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba510:	1a12      	subs	r2, r2, r0
   ba512:	f000 fca7 	bl	bae64 <memcpy>
    __backup_sram_signature = signature;
   ba516:	4b05      	ldr	r3, [pc, #20]	; (ba52c <_Z33system_initialize_user_backup_ramv+0x24>)
   ba518:	4a05      	ldr	r2, [pc, #20]	; (ba530 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba51a:	601a      	str	r2, [r3, #0]
}
   ba51c:	bd08      	pop	{r3, pc}
   ba51e:	bf00      	nop
   ba520:	2003f400 	.word	0x2003f400
   ba524:	2003f404 	.word	0x2003f404
   ba528:	000bd038 	.word	0x000bd038
   ba52c:	2003f400 	.word	0x2003f400
   ba530:	9a271c1e 	.word	0x9a271c1e

000ba534 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba534:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba536:	2300      	movs	r3, #0
   ba538:	9300      	str	r3, [sp, #0]
   ba53a:	461a      	mov	r2, r3
   ba53c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba540:	f7ff fc20 	bl	b9d84 <system_ctrl_set_result>
}
   ba544:	b003      	add	sp, #12
   ba546:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba54c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba54c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba54e:	8843      	ldrh	r3, [r0, #2]
   ba550:	2b0a      	cmp	r3, #10
   ba552:	d008      	beq.n	ba566 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba554:	2b50      	cmp	r3, #80	; 0x50
   ba556:	d10b      	bne.n	ba570 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba558:	4b09      	ldr	r3, [pc, #36]	; (ba580 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba55a:	681b      	ldr	r3, [r3, #0]
   ba55c:	b14b      	cbz	r3, ba572 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba55e:	b003      	add	sp, #12
   ba560:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba564:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba566:	f7ff ffe5 	bl	ba534 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba56a:	b003      	add	sp, #12
   ba56c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba570:	2300      	movs	r3, #0
   ba572:	9300      	str	r3, [sp, #0]
   ba574:	461a      	mov	r2, r3
   ba576:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba57a:	f7ff fc03 	bl	b9d84 <system_ctrl_set_result>
}
   ba57e:	e7f4      	b.n	ba56a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba580:	2003e6f4 	.word	0x2003e6f4

000ba584 <module_user_init_hook>:
{
   ba584:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba586:	4812      	ldr	r0, [pc, #72]	; (ba5d0 <module_user_init_hook+0x4c>)
   ba588:	2100      	movs	r1, #0
   ba58a:	f7ff fcad 	bl	b9ee8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba58e:	4b11      	ldr	r3, [pc, #68]	; (ba5d4 <module_user_init_hook+0x50>)
   ba590:	681a      	ldr	r2, [r3, #0]
   ba592:	4b11      	ldr	r3, [pc, #68]	; (ba5d8 <module_user_init_hook+0x54>)
   ba594:	429a      	cmp	r2, r3
   ba596:	4b11      	ldr	r3, [pc, #68]	; (ba5dc <module_user_init_hook+0x58>)
   ba598:	bf0c      	ite	eq
   ba59a:	2201      	moveq	r2, #1
   ba59c:	2200      	movne	r2, #0
   ba59e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba5a0:	d001      	beq.n	ba5a6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba5a2:	f7ff ffb1 	bl	ba508 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba5a6:	f7ff fa6b 	bl	b9a80 <HAL_RNG_GetRandomNumber>
   ba5aa:	4604      	mov	r4, r0
    srand(seed);
   ba5ac:	f000 fc80 	bl	baeb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba5b0:	4b0b      	ldr	r3, [pc, #44]	; (ba5e0 <module_user_init_hook+0x5c>)
   ba5b2:	b113      	cbz	r3, ba5ba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba5ba:	2100      	movs	r1, #0
   ba5bc:	4808      	ldr	r0, [pc, #32]	; (ba5e0 <module_user_init_hook+0x5c>)
   ba5be:	f7ff fc4b 	bl	b9e58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba5c6:	4807      	ldr	r0, [pc, #28]	; (ba5e4 <module_user_init_hook+0x60>)
   ba5c8:	2100      	movs	r1, #0
   ba5ca:	f7ff bbd1 	b.w	b9d70 <system_ctrl_set_app_request_handler>
   ba5ce:	bf00      	nop
   ba5d0:	000ba4b1 	.word	0x000ba4b1
   ba5d4:	2003f400 	.word	0x2003f400
   ba5d8:	9a271c1e 	.word	0x9a271c1e
   ba5dc:	2003e6f0 	.word	0x2003e6f0
   ba5e0:	00000000 	.word	0x00000000
   ba5e4:	000ba54d 	.word	0x000ba54d

000ba5e8 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   ba5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   ba5ea:	230c      	movs	r3, #12
   ba5ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   ba5f0:	6803      	ldr	r3, [r0, #0]
   ba5f2:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   ba5f6:	7a03      	ldrb	r3, [r0, #8]
   ba5f8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   ba5fc:	6843      	ldr	r3, [r0, #4]
   ba5fe:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   ba600:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   ba602:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   ba604:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   ba608:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   ba60a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   ba60e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   ba612:	f7ff fc29 	bl	b9e68 <spark_cloud_disconnect>
}
   ba616:	b005      	add	sp, #20
   ba618:	f85d fb04 	ldr.w	pc, [sp], #4

000ba61c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba61c:	4770      	bx	lr

000ba61e <_ZN9IPAddressD0Ev>:
   ba61e:	b510      	push	{r4, lr}
   ba620:	2118      	movs	r1, #24
   ba622:	4604      	mov	r4, r0
   ba624:	f7fa f95f 	bl	b48e6 <_ZdlPvj>
   ba628:	4620      	mov	r0, r4
   ba62a:	bd10      	pop	{r4, pc}

000ba62c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba62c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba62e:	7d03      	ldrb	r3, [r0, #20]
   ba630:	2b06      	cmp	r3, #6
{
   ba632:	b08d      	sub	sp, #52	; 0x34
   ba634:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba636:	f100 0704 	add.w	r7, r0, #4
   ba63a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba63e:	d012      	beq.n	ba666 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba640:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba644:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba648:	220a      	movs	r2, #10
   ba64a:	4630      	mov	r0, r6
   ba64c:	f7ff fec5 	bl	ba3da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba650:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba652:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba654:	d019      	beq.n	ba68a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba656:	2c00      	cmp	r4, #0
   ba658:	d0f4      	beq.n	ba644 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba65a:	212e      	movs	r1, #46	; 0x2e
   ba65c:	4630      	mov	r0, r6
   ba65e:	f7ff fea3 	bl	ba3a8 <_ZN5Print5printEc>
   ba662:	4404      	add	r4, r0
   ba664:	e7ee      	b.n	ba644 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba666:	232f      	movs	r3, #47	; 0x2f
   ba668:	466a      	mov	r2, sp
   ba66a:	4639      	mov	r1, r7
   ba66c:	200a      	movs	r0, #10
		buf[0] = 0;
   ba66e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba672:	f7ff fa3d 	bl	b9af0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba676:	4668      	mov	r0, sp
   ba678:	f7fa f8f0 	bl	b485c <strlen>
   ba67c:	6833      	ldr	r3, [r6, #0]
   ba67e:	4602      	mov	r2, r0
   ba680:	68db      	ldr	r3, [r3, #12]
   ba682:	4669      	mov	r1, sp
   ba684:	4630      	mov	r0, r6
   ba686:	4798      	blx	r3
   ba688:	4604      	mov	r4, r0
    }
    return n;
}
   ba68a:	4620      	mov	r0, r4
   ba68c:	b00d      	add	sp, #52	; 0x34
   ba68e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba690 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba690:	b510      	push	{r4, lr}
   ba692:	4b05      	ldr	r3, [pc, #20]	; (ba6a8 <_ZN9IPAddressC1Ev+0x18>)
   ba694:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba696:	2211      	movs	r2, #17
   ba698:	f840 3b04 	str.w	r3, [r0], #4
   ba69c:	2100      	movs	r1, #0
   ba69e:	f000 fbef 	bl	bae80 <memset>
}
   ba6a2:	4620      	mov	r0, r4
   ba6a4:	bd10      	pop	{r4, pc}
   ba6a6:	bf00      	nop
   ba6a8:	000bcd18 	.word	0x000bcd18

000ba6ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba6ac:	4603      	mov	r3, r0
   ba6ae:	4a07      	ldr	r2, [pc, #28]	; (ba6cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba6b0:	b510      	push	{r4, lr}
   ba6b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba6b6:	f101 0210 	add.w	r2, r1, #16
   ba6ba:	f851 4b04 	ldr.w	r4, [r1], #4
   ba6be:	f843 4b04 	str.w	r4, [r3], #4
   ba6c2:	4291      	cmp	r1, r2
   ba6c4:	d1f9      	bne.n	ba6ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba6c6:	780a      	ldrb	r2, [r1, #0]
   ba6c8:	701a      	strb	r2, [r3, #0]
}
   ba6ca:	bd10      	pop	{r4, pc}
   ba6cc:	000bcd18 	.word	0x000bcd18

000ba6d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba6d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba6d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba6d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba6da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba6de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba6e2:	2304      	movs	r3, #4
   ba6e4:	6041      	str	r1, [r0, #4]
   ba6e6:	7503      	strb	r3, [r0, #20]
}
   ba6e8:	bd10      	pop	{r4, pc}
	...

000ba6ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba6ec:	b507      	push	{r0, r1, r2, lr}
   ba6ee:	4b06      	ldr	r3, [pc, #24]	; (ba708 <_ZN9IPAddressC1EPKh+0x1c>)
   ba6f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba6f2:	78cb      	ldrb	r3, [r1, #3]
   ba6f4:	9300      	str	r3, [sp, #0]
   ba6f6:	788b      	ldrb	r3, [r1, #2]
   ba6f8:	784a      	ldrb	r2, [r1, #1]
   ba6fa:	7809      	ldrb	r1, [r1, #0]
   ba6fc:	f7ff ffe8 	bl	ba6d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba700:	b003      	add	sp, #12
   ba702:	f85d fb04 	ldr.w	pc, [sp], #4
   ba706:	bf00      	nop
   ba708:	000bcd18 	.word	0x000bcd18

000ba70c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba70c:	7441      	strb	r1, [r0, #17]
}
   ba70e:	4770      	bx	lr

000ba710 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba710:	4770      	bx	lr

000ba712 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba712:	4770      	bx	lr

000ba714 <_ZN9USBSerial4readEv>:
{
   ba714:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba716:	2100      	movs	r1, #0
   ba718:	7c00      	ldrb	r0, [r0, #16]
   ba71a:	f7ff faf9 	bl	b9d10 <HAL_USB_USART_Receive_Data>
}
   ba71e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba722:	bd08      	pop	{r3, pc}

000ba724 <_ZN9USBSerial4peekEv>:
{
   ba724:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba726:	2101      	movs	r1, #1
   ba728:	7c00      	ldrb	r0, [r0, #16]
   ba72a:	f7ff faf1 	bl	b9d10 <HAL_USB_USART_Receive_Data>
}
   ba72e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba732:	bd08      	pop	{r3, pc}

000ba734 <_ZN9USBSerial17availableForWriteEv>:
{
   ba734:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba736:	7c00      	ldrb	r0, [r0, #16]
   ba738:	f7ff fae2 	bl	b9d00 <HAL_USB_USART_Available_Data_For_Write>
}
   ba73c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba740:	bd08      	pop	{r3, pc}

000ba742 <_ZN9USBSerial9availableEv>:
{
   ba742:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba744:	7c00      	ldrb	r0, [r0, #16]
   ba746:	f7ff fad3 	bl	b9cf0 <HAL_USB_USART_Available_Data>
}
   ba74a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba74e:	bd08      	pop	{r3, pc}

000ba750 <_ZN9USBSerial5writeEh>:
{
   ba750:	b513      	push	{r0, r1, r4, lr}
   ba752:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba754:	7c00      	ldrb	r0, [r0, #16]
{
   ba756:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba758:	f7ff fad2 	bl	b9d00 <HAL_USB_USART_Available_Data_For_Write>
   ba75c:	2800      	cmp	r0, #0
   ba75e:	9901      	ldr	r1, [sp, #4]
   ba760:	dc01      	bgt.n	ba766 <_ZN9USBSerial5writeEh+0x16>
   ba762:	7c60      	ldrb	r0, [r4, #17]
   ba764:	b120      	cbz	r0, ba770 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba766:	7c20      	ldrb	r0, [r4, #16]
   ba768:	f7ff fada 	bl	b9d20 <HAL_USB_USART_Send_Data>
   ba76c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba770:	b002      	add	sp, #8
   ba772:	bd10      	pop	{r4, pc}

000ba774 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba774:	7c00      	ldrb	r0, [r0, #16]
   ba776:	f7ff badb 	b.w	b9d30 <HAL_USB_USART_Flush_Data>

000ba77a <_ZN9USBSerialD0Ev>:
   ba77a:	b510      	push	{r4, lr}
   ba77c:	2114      	movs	r1, #20
   ba77e:	4604      	mov	r4, r0
   ba780:	f7fa f8b1 	bl	b48e6 <_ZdlPvj>
   ba784:	4620      	mov	r0, r4
   ba786:	bd10      	pop	{r4, pc}

000ba788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba788:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba78a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba78e:	4604      	mov	r4, r0
   ba790:	4608      	mov	r0, r1
   ba792:	2100      	movs	r1, #0
   ba794:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba798:	4b04      	ldr	r3, [pc, #16]	; (ba7ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba79a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba79c:	2301      	movs	r3, #1
  _serial = serial;
   ba79e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba7a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba7a2:	4611      	mov	r1, r2
   ba7a4:	f7ff fa94 	bl	b9cd0 <HAL_USB_USART_Init>
}
   ba7a8:	4620      	mov	r0, r4
   ba7aa:	bd10      	pop	{r4, pc}
   ba7ac:	000bcd2c 	.word	0x000bcd2c

000ba7b0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba7b0:	7c00      	ldrb	r0, [r0, #16]
   ba7b2:	2200      	movs	r2, #0
   ba7b4:	f7ff ba94 	b.w	b9ce0 <HAL_USB_USART_Begin>

000ba7b8 <_Z19acquireSerialBufferv>:
{
   ba7b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba7ba:	2214      	movs	r2, #20
{
   ba7bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba7be:	2100      	movs	r1, #0
   ba7c0:	f000 fb5e 	bl	bae80 <memset>
}
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	bd10      	pop	{r4, pc}

000ba7c8 <_Z16_fetch_usbserialv>:
{
   ba7c8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba7ca:	4c0f      	ldr	r4, [pc, #60]	; (ba808 <_Z16_fetch_usbserialv+0x40>)
{
   ba7cc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba7ce:	a803      	add	r0, sp, #12
   ba7d0:	f7ff fff2 	bl	ba7b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba7d4:	7821      	ldrb	r1, [r4, #0]
   ba7d6:	f3bf 8f5b 	dmb	ish
   ba7da:	f011 0101 	ands.w	r1, r1, #1
   ba7de:	d10f      	bne.n	ba800 <_Z16_fetch_usbserialv+0x38>
   ba7e0:	4620      	mov	r0, r4
   ba7e2:	9101      	str	r1, [sp, #4]
   ba7e4:	f7fa f88e 	bl	b4904 <__cxa_guard_acquire>
   ba7e8:	9901      	ldr	r1, [sp, #4]
   ba7ea:	b148      	cbz	r0, ba800 <_Z16_fetch_usbserialv+0x38>
   ba7ec:	aa03      	add	r2, sp, #12
   ba7ee:	4807      	ldr	r0, [pc, #28]	; (ba80c <_Z16_fetch_usbserialv+0x44>)
   ba7f0:	f7ff ffca 	bl	ba788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba7f4:	4620      	mov	r0, r4
   ba7f6:	f7fa f88a 	bl	b490e <__cxa_guard_release>
   ba7fa:	4805      	ldr	r0, [pc, #20]	; (ba810 <_Z16_fetch_usbserialv+0x48>)
   ba7fc:	f000 fb24 	bl	bae48 <atexit>
	return _usbserial;
}
   ba800:	4802      	ldr	r0, [pc, #8]	; (ba80c <_Z16_fetch_usbserialv+0x44>)
   ba802:	b008      	add	sp, #32
   ba804:	bd10      	pop	{r4, pc}
   ba806:	bf00      	nop
   ba808:	2003e6f8 	.word	0x2003e6f8
   ba80c:	2003e6fc 	.word	0x2003e6fc
   ba810:	000ba711 	.word	0x000ba711

000ba814 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   ba814:	f7ff b914 	b.w	b9a40 <hal_interrupt_disable_all>

000ba818 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   ba818:	f7ff b90a 	b.w	b9a30 <hal_interrupt_enable_all>

000ba81c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   ba81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   ba81e:	b287      	uxth	r7, r0
{
   ba820:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   ba822:	4638      	mov	r0, r7
{
   ba824:	460d      	mov	r5, r1
   ba826:	4616      	mov	r6, r2
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   ba828:	f000 f9c6 	bl	babb8 <pinAvailable>
   ba82c:	b160      	cbz	r0, ba848 <tone+0x2c>
   ba82e:	2102      	movs	r1, #2
   ba830:	4638      	mov	r0, r7
   ba832:	f7ff f8d5 	bl	b99e0 <hal_pin_validate_function>
   ba836:	2802      	cmp	r0, #2
   ba838:	d106      	bne.n	ba848 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   ba83a:	4632      	mov	r2, r6
   ba83c:	4629      	mov	r1, r5
   ba83e:	4620      	mov	r0, r4
    }
}
   ba840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   ba844:	f7ff ba34 	b.w	b9cb0 <HAL_Tone_Start>
}
   ba848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba84a <noTone>:

void noTone(uint8_t pin)
{
   ba84a:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   ba84c:	b285      	uxth	r5, r0
{
   ba84e:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   ba850:	4628      	mov	r0, r5
   ba852:	f000 f9b1 	bl	babb8 <pinAvailable>
   ba856:	b150      	cbz	r0, ba86e <noTone+0x24>
   ba858:	2102      	movs	r1, #2
   ba85a:	4628      	mov	r0, r5
   ba85c:	f7ff f8c0 	bl	b99e0 <hal_pin_validate_function>
   ba860:	2802      	cmp	r0, #2
   ba862:	d104      	bne.n	ba86e <noTone+0x24>
        HAL_Tone_Stop(pin);
   ba864:	4620      	mov	r0, r4
    }
}
   ba866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   ba86a:	f7ff ba29 	b.w	b9cc0 <HAL_Tone_Stop>
}
   ba86e:	bd38      	pop	{r3, r4, r5, pc}

000ba870 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba870:	4770      	bx	lr

000ba872 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba872:	7441      	strb	r1, [r0, #17]
}
   ba874:	4770      	bx	lr

000ba876 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba876:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba878:	7c00      	ldrb	r0, [r0, #16]
   ba87a:	f7ff f971 	bl	b9b60 <hal_usart_available_data_for_write>
}
   ba87e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba882:	bd08      	pop	{r3, pc}

000ba884 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba884:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba886:	7c00      	ldrb	r0, [r0, #16]
   ba888:	f7ff f942 	bl	b9b10 <hal_usart_available>
}
   ba88c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba890:	bd08      	pop	{r3, pc}

000ba892 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba892:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba894:	7c00      	ldrb	r0, [r0, #16]
   ba896:	f7ff f94b 	bl	b9b30 <hal_usart_peek>
}
   ba89a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba89e:	bd08      	pop	{r3, pc}

000ba8a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba8a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba8a2:	7c00      	ldrb	r0, [r0, #16]
   ba8a4:	f7ff f93c 	bl	b9b20 <hal_usart_read>
}
   ba8a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba8ac:	bd08      	pop	{r3, pc}

000ba8ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba8ae:	7c00      	ldrb	r0, [r0, #16]
   ba8b0:	f7ff b946 	b.w	b9b40 <hal_usart_flush>

000ba8b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8b6:	7c45      	ldrb	r5, [r0, #17]
{
   ba8b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8ba:	b12d      	cbz	r5, ba8c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba8bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba8be:	b003      	add	sp, #12
   ba8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba8c4:	f7ff b91c 	b.w	b9b00 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba8c8:	7c00      	ldrb	r0, [r0, #16]
   ba8ca:	9101      	str	r1, [sp, #4]
   ba8cc:	f7ff f948 	bl	b9b60 <hal_usart_available_data_for_write>
   ba8d0:	2800      	cmp	r0, #0
   ba8d2:	9901      	ldr	r1, [sp, #4]
   ba8d4:	dcf2      	bgt.n	ba8bc <_ZN11USARTSerial5writeEh+0x8>
}
   ba8d6:	4628      	mov	r0, r5
   ba8d8:	b003      	add	sp, #12
   ba8da:	bd30      	pop	{r4, r5, pc}

000ba8dc <_ZN11USARTSerialD0Ev>:
   ba8dc:	b510      	push	{r4, lr}
   ba8de:	2114      	movs	r1, #20
   ba8e0:	4604      	mov	r4, r0
   ba8e2:	f7fa f800 	bl	b48e6 <_ZdlPvj>
   ba8e6:	4620      	mov	r0, r4
   ba8e8:	bd10      	pop	{r4, pc}
	...

000ba8ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba8ec:	b510      	push	{r4, lr}
   ba8ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba8f2:	4604      	mov	r4, r0
   ba8f4:	4608      	mov	r0, r1
   ba8f6:	4611      	mov	r1, r2
   ba8f8:	2200      	movs	r2, #0
   ba8fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba8fe:	4b04      	ldr	r3, [pc, #16]	; (ba910 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba900:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba902:	2301      	movs	r3, #1
  _serial = serial;
   ba904:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba906:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba908:	f7ff f932 	bl	b9b70 <hal_usart_init_ex>
}
   ba90c:	4620      	mov	r0, r4
   ba90e:	bd10      	pop	{r4, pc}
   ba910:	000bcd5c 	.word	0x000bcd5c

000ba914 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba914:	4770      	bx	lr

000ba916 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba918:	4606      	mov	r6, r0
   ba91a:	4615      	mov	r5, r2
   ba91c:	460c      	mov	r4, r1
   ba91e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba920:	42bc      	cmp	r4, r7
   ba922:	d006      	beq.n	ba932 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba924:	6833      	ldr	r3, [r6, #0]
   ba926:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba92a:	689b      	ldr	r3, [r3, #8]
   ba92c:	4630      	mov	r0, r6
   ba92e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba930:	e7f6      	b.n	ba920 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba932:	4628      	mov	r0, r5
   ba934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba936 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba936:	7c00      	ldrb	r0, [r0, #16]
   ba938:	2200      	movs	r2, #0
   ba93a:	f7ff b941 	b.w	b9bc0 <hal_i2c_write>

000ba93e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba93e:	7c00      	ldrb	r0, [r0, #16]
   ba940:	2100      	movs	r1, #0
   ba942:	f7ff b945 	b.w	b9bd0 <hal_i2c_available>

000ba946 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba946:	7c00      	ldrb	r0, [r0, #16]
   ba948:	2100      	movs	r1, #0
   ba94a:	f7ff b949 	b.w	b9be0 <hal_i2c_read>

000ba94e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba94e:	7c00      	ldrb	r0, [r0, #16]
   ba950:	2100      	movs	r1, #0
   ba952:	f7ff b94d 	b.w	b9bf0 <hal_i2c_peek>

000ba956 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba956:	7c00      	ldrb	r0, [r0, #16]
   ba958:	2100      	movs	r1, #0
   ba95a:	f7ff b951 	b.w	b9c00 <hal_i2c_flush>

000ba95e <_ZN7TwoWireD0Ev>:
   ba95e:	b510      	push	{r4, lr}
   ba960:	2114      	movs	r1, #20
   ba962:	4604      	mov	r4, r0
   ba964:	f7f9 ffbf 	bl	b48e6 <_ZdlPvj>
   ba968:	4620      	mov	r0, r4
   ba96a:	bd10      	pop	{r4, pc}

000ba96c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba96c:	b538      	push	{r3, r4, r5, lr}
   ba96e:	4604      	mov	r4, r0
   ba970:	4615      	mov	r5, r2
   ba972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba976:	2200      	movs	r2, #0
   ba978:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba97c:	4b09      	ldr	r3, [pc, #36]	; (ba9a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   ba97e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba980:	4608      	mov	r0, r1
   ba982:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   ba984:	4629      	mov	r1, r5
   ba986:	f7ff f94b 	bl	b9c20 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   ba98a:	30bf      	adds	r0, #191	; 0xbf
   ba98c:	d108      	bne.n	ba9a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   ba98e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   ba990:	07db      	lsls	r3, r3, #31
   ba992:	d505      	bpl.n	ba9a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   ba994:	6868      	ldr	r0, [r5, #4]
   ba996:	f7ff fa77 	bl	b9e88 <free>
    free(conf.tx_buffer);
   ba99a:	68e8      	ldr	r0, [r5, #12]
   ba99c:	f7ff fa74 	bl	b9e88 <free>
}
   ba9a0:	4620      	mov	r0, r4
   ba9a2:	bd38      	pop	{r3, r4, r5, pc}
   ba9a4:	000bcd8c 	.word	0x000bcd8c

000ba9a8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   ba9a8:	7c00      	ldrb	r0, [r0, #16]
   ba9aa:	2200      	movs	r2, #0
   ba9ac:	f7ff b8e8 	b.w	b9b80 <hal_i2c_set_speed>

000ba9b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba9b0:	2300      	movs	r3, #0
   ba9b2:	7c00      	ldrb	r0, [r0, #16]
   ba9b4:	461a      	mov	r2, r3
   ba9b6:	4619      	mov	r1, r3
   ba9b8:	f7ff b8ea 	b.w	b9b90 <hal_i2c_begin>

000ba9bc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba9bc:	7c00      	ldrb	r0, [r0, #16]
   ba9be:	2200      	movs	r2, #0
   ba9c0:	f7ff b8ee 	b.w	b9ba0 <hal_i2c_begin_transmission>

000ba9c4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ba9c4:	b2c9      	uxtb	r1, r1
   ba9c6:	f7ff bff9 	b.w	ba9bc <_ZN7TwoWire17beginTransmissionEh>

000ba9ca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba9ca:	7c00      	ldrb	r0, [r0, #16]
   ba9cc:	2200      	movs	r2, #0
   ba9ce:	f7ff b8ef 	b.w	b9bb0 <hal_i2c_end_transmission>

000ba9d2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   ba9d2:	2101      	movs	r1, #1
   ba9d4:	f7ff bff9 	b.w	ba9ca <_ZN7TwoWire15endTransmissionEh>

000ba9d8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba9d8:	2200      	movs	r2, #0
   ba9da:	6840      	ldr	r0, [r0, #4]
   ba9dc:	4611      	mov	r1, r2
   ba9de:	f7ff b9f3 	b.w	b9dc8 <network_ready>

000ba9e2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba9e2:	2200      	movs	r2, #0
   ba9e4:	6840      	ldr	r0, [r0, #4]
   ba9e6:	4611      	mov	r1, r2
   ba9e8:	f7ff ba0e 	b.w	b9e08 <network_listening>

000ba9ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba9ec:	2200      	movs	r2, #0
   ba9ee:	6840      	ldr	r0, [r0, #4]
   ba9f0:	4611      	mov	r1, r2
   ba9f2:	f7ff ba19 	b.w	b9e28 <network_get_listen_timeout>

000ba9f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba9f6:	6840      	ldr	r0, [r0, #4]
   ba9f8:	2200      	movs	r2, #0
   ba9fa:	f7ff ba0d 	b.w	b9e18 <network_set_listen_timeout>

000ba9fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba9fe:	6840      	ldr	r0, [r0, #4]
   baa00:	2200      	movs	r2, #0
   baa02:	f081 0101 	eor.w	r1, r1, #1
   baa06:	f7ff b9f7 	b.w	b9df8 <network_listen>

000baa0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baa0a:	2300      	movs	r3, #0
   baa0c:	6840      	ldr	r0, [r0, #4]
   baa0e:	461a      	mov	r2, r3
   baa10:	4619      	mov	r1, r3
   baa12:	f7ff b9e9 	b.w	b9de8 <network_off>

000baa16 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baa16:	2300      	movs	r3, #0
   baa18:	6840      	ldr	r0, [r0, #4]
   baa1a:	461a      	mov	r2, r3
   baa1c:	4619      	mov	r1, r3
   baa1e:	f7ff b9db 	b.w	b9dd8 <network_on>

000baa22 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baa22:	2200      	movs	r2, #0
   baa24:	6840      	ldr	r0, [r0, #4]
   baa26:	4611      	mov	r1, r2
   baa28:	f7ff b9be 	b.w	b9da8 <network_connecting>

000baa2c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baa2c:	6840      	ldr	r0, [r0, #4]
   baa2e:	2200      	movs	r2, #0
   baa30:	2102      	movs	r1, #2
   baa32:	f7ff b9c1 	b.w	b9db8 <network_disconnect>

000baa36 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baa36:	2300      	movs	r3, #0
   baa38:	6840      	ldr	r0, [r0, #4]
   baa3a:	461a      	mov	r2, r3
   baa3c:	f7ff b9ac 	b.w	b9d98 <network_connect>

000baa40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   baa40:	4b02      	ldr	r3, [pc, #8]	; (baa4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   baa42:	2204      	movs	r2, #4
   baa44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   baa46:	4a02      	ldr	r2, [pc, #8]	; (baa50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   baa48:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   baa4a:	4770      	bx	lr
   baa4c:	2003e710 	.word	0x2003e710
   baa50:	000bcdb4 	.word	0x000bcdb4

000baa54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   baa54:	2300      	movs	r3, #0
   baa56:	6840      	ldr	r0, [r0, #4]
   baa58:	461a      	mov	r2, r3
   baa5a:	f7ff b99d 	b.w	b9d98 <network_connect>

000baa5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   baa5e:	6840      	ldr	r0, [r0, #4]
   baa60:	2200      	movs	r2, #0
   baa62:	2102      	movs	r1, #2
   baa64:	f7ff b9a8 	b.w	b9db8 <network_disconnect>

000baa68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   baa68:	2200      	movs	r2, #0
   baa6a:	6840      	ldr	r0, [r0, #4]
   baa6c:	4611      	mov	r1, r2
   baa6e:	f7ff b99b 	b.w	b9da8 <network_connecting>

000baa72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   baa72:	2200      	movs	r2, #0
   baa74:	6840      	ldr	r0, [r0, #4]
   baa76:	4611      	mov	r1, r2
   baa78:	f7ff b9a6 	b.w	b9dc8 <network_ready>

000baa7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   baa7c:	2300      	movs	r3, #0
   baa7e:	6840      	ldr	r0, [r0, #4]
   baa80:	461a      	mov	r2, r3
   baa82:	4619      	mov	r1, r3
   baa84:	f7ff b9a8 	b.w	b9dd8 <network_on>

000baa88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   baa88:	2300      	movs	r3, #0
   baa8a:	6840      	ldr	r0, [r0, #4]
   baa8c:	461a      	mov	r2, r3
   baa8e:	4619      	mov	r1, r3
   baa90:	f7ff b9aa 	b.w	b9de8 <network_off>

000baa94 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   baa94:	6840      	ldr	r0, [r0, #4]
   baa96:	2100      	movs	r1, #0
   baa98:	f7ff b9ce 	b.w	b9e38 <network_is_on>

000baa9c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   baa9c:	6840      	ldr	r0, [r0, #4]
   baa9e:	2100      	movs	r1, #0
   baaa0:	f7ff b9d2 	b.w	b9e48 <network_is_off>

000baaa4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   baaa4:	6840      	ldr	r0, [r0, #4]
   baaa6:	2200      	movs	r2, #0
   baaa8:	f081 0101 	eor.w	r1, r1, #1
   baaac:	f7ff b9a4 	b.w	b9df8 <network_listen>

000baab0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   baab0:	6840      	ldr	r0, [r0, #4]
   baab2:	2200      	movs	r2, #0
   baab4:	f7ff b9b0 	b.w	b9e18 <network_set_listen_timeout>

000baab8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   baab8:	2200      	movs	r2, #0
   baaba:	6840      	ldr	r0, [r0, #4]
   baabc:	4611      	mov	r1, r2
   baabe:	f7ff b9b3 	b.w	b9e28 <network_get_listen_timeout>

000baac2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   baac2:	2200      	movs	r2, #0
   baac4:	6840      	ldr	r0, [r0, #4]
   baac6:	4611      	mov	r1, r2
   baac8:	f7ff b99e 	b.w	b9e08 <network_listening>

000baacc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   baacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baad0:	b095      	sub	sp, #84	; 0x54
   baad2:	4614      	mov	r4, r2
   baad4:	460d      	mov	r5, r1
   baad6:	4607      	mov	r7, r0
    IPAddress addr;
   baad8:	f7ff fdda 	bl	ba690 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   baadc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   baade:	221c      	movs	r2, #28
   baae0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   baae2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   baae4:	f000 f9cc 	bl	bae80 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   baae8:	2340      	movs	r3, #64	; 0x40
   baaea:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   baaec:	4620      	mov	r0, r4
   baaee:	466b      	mov	r3, sp
   baaf0:	aa0c      	add	r2, sp, #48	; 0x30
   baaf2:	2100      	movs	r1, #0
   baaf4:	f7fe ff6c 	bl	b99d0 <netdb_getaddrinfo>
    if (!r) {
   baaf8:	4604      	mov	r4, r0
   baafa:	2800      	cmp	r0, #0
   baafc:	d14b      	bne.n	bab96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   baafe:	4602      	mov	r2, r0
   bab00:	2101      	movs	r1, #1
   bab02:	6868      	ldr	r0, [r5, #4]
   bab04:	f7ff f960 	bl	b9dc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bab08:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bab0a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bab0c:	4622      	mov	r2, r4
   bab0e:	6868      	ldr	r0, [r5, #4]
   bab10:	f7ff f95a 	bl	b9dc8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bab14:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bab16:	4681      	mov	r9, r0
        bool ok = false;
   bab18:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bab1a:	2e00      	cmp	r6, #0
   bab1c:	d03b      	beq.n	bab96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bab1e:	2900      	cmp	r1, #0
   bab20:	d139      	bne.n	bab96 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bab22:	6873      	ldr	r3, [r6, #4]
   bab24:	2b02      	cmp	r3, #2
   bab26:	d003      	beq.n	bab30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bab28:	2b0a      	cmp	r3, #10
   bab2a:	d011      	beq.n	bab50 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bab2c:	69f6      	ldr	r6, [r6, #28]
   bab2e:	e7f4      	b.n	bab1a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bab30:	f1b8 0f00 	cmp.w	r8, #0
   bab34:	d0fa      	beq.n	bab2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bab36:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bab38:	a806      	add	r0, sp, #24
   bab3a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bab3c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bab3e:	f7ff fdd5 	bl	ba6ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bab42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bab44:	1d3c      	adds	r4, r7, #4
   bab46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bab48:	682b      	ldr	r3, [r5, #0]
   bab4a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bab4c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bab4e:	e7ed      	b.n	bab2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bab50:	f1b9 0f00 	cmp.w	r9, #0
   bab54:	d0ea      	beq.n	bab2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bab56:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bab58:	2210      	movs	r2, #16
   bab5a:	a801      	add	r0, sp, #4
   bab5c:	f000 f990 	bl	bae80 <memset>
                    a.v = 6;
   bab60:	2306      	movs	r3, #6
   bab62:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bab66:	ad01      	add	r5, sp, #4
   bab68:	f104 0308 	add.w	r3, r4, #8
   bab6c:	3418      	adds	r4, #24
   bab6e:	6818      	ldr	r0, [r3, #0]
   bab70:	6859      	ldr	r1, [r3, #4]
   bab72:	462a      	mov	r2, r5
   bab74:	c203      	stmia	r2!, {r0, r1}
   bab76:	3308      	adds	r3, #8
   bab78:	42a3      	cmp	r3, r4
   bab7a:	4615      	mov	r5, r2
   bab7c:	d1f7      	bne.n	bab6e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bab7e:	a901      	add	r1, sp, #4
   bab80:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bab82:	ad07      	add	r5, sp, #28
   bab84:	f7ff fd92 	bl	ba6ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bab88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bab8a:	1d3c      	adds	r4, r7, #4
   bab8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bab8e:	682b      	ldr	r3, [r5, #0]
   bab90:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bab92:	4649      	mov	r1, r9
   bab94:	e7ca      	b.n	bab2c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bab96:	9800      	ldr	r0, [sp, #0]
   bab98:	f7fe ff12 	bl	b99c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bab9c:	4638      	mov	r0, r7
   bab9e:	b015      	add	sp, #84	; 0x54
   baba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000baba4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   baba4:	4b02      	ldr	r3, [pc, #8]	; (babb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   baba6:	4a03      	ldr	r2, [pc, #12]	; (babb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   baba8:	601a      	str	r2, [r3, #0]
   babaa:	2200      	movs	r2, #0
   babac:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   babae:	4770      	bx	lr
   babb0:	2003e718 	.word	0x2003e718
   babb4:	000bcdf0 	.word	0x000bcdf0

000babb8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   babb8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   babba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   babbc:	d902      	bls.n	babc4 <pinAvailable+0xc>
    return false;
   babbe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   babc0:	b002      	add	sp, #8
   babc2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   babc4:	f1a0 030b 	sub.w	r3, r0, #11
   babc8:	2b02      	cmp	r3, #2
   babca:	d81a      	bhi.n	bac02 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   babcc:	4c17      	ldr	r4, [pc, #92]	; (bac2c <pinAvailable+0x74>)
   babce:	7821      	ldrb	r1, [r4, #0]
   babd0:	f3bf 8f5b 	dmb	ish
   babd4:	f011 0101 	ands.w	r1, r1, #1
   babd8:	d10b      	bne.n	babf2 <pinAvailable+0x3a>
   babda:	4620      	mov	r0, r4
   babdc:	9101      	str	r1, [sp, #4]
   babde:	f7f9 fe91 	bl	b4904 <__cxa_guard_acquire>
   babe2:	9901      	ldr	r1, [sp, #4]
   babe4:	b128      	cbz	r0, babf2 <pinAvailable+0x3a>
   babe6:	4812      	ldr	r0, [pc, #72]	; (bac30 <pinAvailable+0x78>)
   babe8:	f7ff f9ca 	bl	b9f80 <_ZN8SPIClassC1E19hal_spi_interface_t>
   babec:	4620      	mov	r0, r4
   babee:	f7f9 fe8e 	bl	b490e <__cxa_guard_release>
   babf2:	4b0f      	ldr	r3, [pc, #60]	; (bac30 <pinAvailable+0x78>)
   babf4:	7818      	ldrb	r0, [r3, #0]
   babf6:	f7ff f833 	bl	b9c60 <hal_spi_is_enabled>
   babfa:	2800      	cmp	r0, #0
   babfc:	d1df      	bne.n	babbe <pinAvailable+0x6>
  return true; // 'pin' is available
   babfe:	2001      	movs	r0, #1
   bac00:	e7de      	b.n	babc0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bac02:	2801      	cmp	r0, #1
   bac04:	d809      	bhi.n	bac1a <pinAvailable+0x62>
   bac06:	f000 f8f9 	bl	badfc <_Z19__fetch_global_Wirev>
   bac0a:	2100      	movs	r1, #0
   bac0c:	7c00      	ldrb	r0, [r0, #16]
   bac0e:	f7fe ffff 	bl	b9c10 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bac12:	f080 0001 	eor.w	r0, r0, #1
   bac16:	b2c0      	uxtb	r0, r0
   bac18:	e7d2      	b.n	babc0 <pinAvailable+0x8>
   bac1a:	3809      	subs	r0, #9
   bac1c:	2801      	cmp	r0, #1
   bac1e:	d8ee      	bhi.n	babfe <pinAvailable+0x46>
   bac20:	f000 f896 	bl	bad50 <_Z22__fetch_global_Serial1v>
   bac24:	7c00      	ldrb	r0, [r0, #16]
   bac26:	f7fe ff93 	bl	b9b50 <hal_usart_is_enabled>
   bac2a:	e7f2      	b.n	bac12 <pinAvailable+0x5a>
   bac2c:	2003cd10 	.word	0x2003cd10
   bac30:	2003cd14 	.word	0x2003cd14

000bac34 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bac34:	2823      	cmp	r0, #35	; 0x23
{
   bac36:	b538      	push	{r3, r4, r5, lr}
   bac38:	4604      	mov	r4, r0
   bac3a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bac3c:	d80a      	bhi.n	bac54 <pinMode+0x20>
   bac3e:	29ff      	cmp	r1, #255	; 0xff
   bac40:	d008      	beq.n	bac54 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bac42:	f7ff ffb9 	bl	babb8 <pinAvailable>
   bac46:	b128      	cbz	r0, bac54 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bac48:	4629      	mov	r1, r5
   bac4a:	4620      	mov	r0, r4
}
   bac4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bac50:	f7fe bece 	b.w	b99f0 <hal_gpio_mode>
}
   bac54:	bd38      	pop	{r3, r4, r5, pc}

000bac56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bac56:	b538      	push	{r3, r4, r5, lr}
   bac58:	4604      	mov	r4, r0
   bac5a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bac5c:	f7fe fed0 	bl	b9a00 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bac60:	28ff      	cmp	r0, #255	; 0xff
   bac62:	d010      	beq.n	bac86 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bac64:	2806      	cmp	r0, #6
   bac66:	d804      	bhi.n	bac72 <digitalWrite+0x1c>
   bac68:	234d      	movs	r3, #77	; 0x4d
   bac6a:	fa23 f000 	lsr.w	r0, r3, r0
   bac6e:	07c3      	lsls	r3, r0, #31
   bac70:	d409      	bmi.n	bac86 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bac72:	4620      	mov	r0, r4
   bac74:	f7ff ffa0 	bl	babb8 <pinAvailable>
   bac78:	b128      	cbz	r0, bac86 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bac7a:	4629      	mov	r1, r5
   bac7c:	4620      	mov	r0, r4
}
   bac7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bac82:	f7fe bec5 	b.w	b9a10 <hal_gpio_write>
}
   bac86:	bd38      	pop	{r3, r4, r5, pc}

000bac88 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bac88:	b510      	push	{r4, lr}
   bac8a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bac8c:	f7fe feb8 	bl	b9a00 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bac90:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bac92:	b2db      	uxtb	r3, r3
   bac94:	2b01      	cmp	r3, #1
   bac96:	d908      	bls.n	bacaa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bac98:	4620      	mov	r0, r4
   bac9a:	f7ff ff8d 	bl	babb8 <pinAvailable>
   bac9e:	b120      	cbz	r0, bacaa <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   baca0:	4620      	mov	r0, r4
}
   baca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   baca6:	f7fe bebb 	b.w	b9a20 <hal_gpio_read>
}
   bacaa:	2000      	movs	r0, #0
   bacac:	bd10      	pop	{r4, pc}

000bacae <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bacae:	280d      	cmp	r0, #13
{
   bacb0:	b510      	push	{r4, lr}
   bacb2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bacb4:	bf9c      	itt	ls
   bacb6:	340e      	addls	r4, #14
   bacb8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bacba:	4620      	mov	r0, r4
   bacbc:	f7ff ff7c 	bl	babb8 <pinAvailable>
   bacc0:	b150      	cbz	r0, bacd8 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bacc2:	2103      	movs	r1, #3
   bacc4:	4620      	mov	r0, r4
   bacc6:	f7fe fe8b 	bl	b99e0 <hal_pin_validate_function>
   bacca:	2803      	cmp	r0, #3
   baccc:	d104      	bne.n	bacd8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bacce:	4620      	mov	r0, r4
}
   bacd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bacd4:	f7fe bebc 	b.w	b9a50 <hal_adc_read>
}
   bacd8:	2000      	movs	r0, #0
   bacda:	bd10      	pop	{r4, pc}

000bacdc <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   bacdc:	b570      	push	{r4, r5, r6, lr}
   bacde:	4604      	mov	r4, r0
   bace0:	460d      	mov	r5, r1
   bace2:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   bace4:	f7ff ff68 	bl	babb8 <pinAvailable>
   bace8:	b198      	cbz	r0, bad12 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bacea:	2102      	movs	r1, #2
   bacec:	4620      	mov	r0, r4
   bacee:	f7fe fe77 	bl	b99e0 <hal_pin_validate_function>
   bacf2:	2802      	cmp	r0, #2
   bacf4:	d10d      	bne.n	bad12 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   bacf6:	4620      	mov	r0, r4
   bacf8:	f7fe fe82 	bl	b9a00 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bacfc:	2801      	cmp	r0, #1
   bacfe:	d001      	beq.n	bad04 <_Z11analogWritetmm+0x28>
   bad00:	2804      	cmp	r0, #4
   bad02:	d106      	bne.n	bad12 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bad04:	4632      	mov	r2, r6
   bad06:	4629      	mov	r1, r5
   bad08:	4620      	mov	r0, r4
    }
}
   bad0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bad0e:	f7fe beaf 	b.w	b9a70 <hal_pwm_write_with_frequency_ext>
}
   bad12:	bd70      	pop	{r4, r5, r6, pc}

000bad14 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   bad14:	f7fe bea4 	b.w	b9a60 <hal_gpio_pulse_in>

000bad18 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad18:	4770      	bx	lr
	...

000bad1c <_Z20acquireSerial1Bufferv>:
{
   bad1c:	b538      	push	{r3, r4, r5, lr}
   bad1e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bad20:	2514      	movs	r5, #20
   bad22:	462a      	mov	r2, r5
   bad24:	2100      	movs	r1, #0
   bad26:	f000 f8ab 	bl	bae80 <memset>
   bad2a:	8025      	strh	r5, [r4, #0]
   bad2c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad2e:	4907      	ldr	r1, [pc, #28]	; (bad4c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bad30:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad32:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bad34:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad36:	f000 f885 	bl	bae44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad3a:	4904      	ldr	r1, [pc, #16]	; (bad4c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bad3c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bad3e:	4628      	mov	r0, r5
   bad40:	f000 f880 	bl	bae44 <_ZnajRKSt9nothrow_t>
    };
   bad44:	60e0      	str	r0, [r4, #12]
}
   bad46:	4620      	mov	r0, r4
   bad48:	bd38      	pop	{r3, r4, r5, pc}
   bad4a:	bf00      	nop
   bad4c:	000bce24 	.word	0x000bce24

000bad50 <_Z22__fetch_global_Serial1v>:
{
   bad50:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad52:	4d0e      	ldr	r5, [pc, #56]	; (bad8c <_Z22__fetch_global_Serial1v+0x3c>)
   bad54:	7829      	ldrb	r1, [r5, #0]
   bad56:	f3bf 8f5b 	dmb	ish
   bad5a:	f011 0401 	ands.w	r4, r1, #1
{
   bad5e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bad60:	d111      	bne.n	bad86 <_Z22__fetch_global_Serial1v+0x36>
   bad62:	4628      	mov	r0, r5
   bad64:	f7f9 fdce 	bl	b4904 <__cxa_guard_acquire>
   bad68:	b168      	cbz	r0, bad86 <_Z22__fetch_global_Serial1v+0x36>
   bad6a:	a801      	add	r0, sp, #4
   bad6c:	f7ff ffd6 	bl	bad1c <_Z20acquireSerial1Bufferv>
   bad70:	aa01      	add	r2, sp, #4
   bad72:	4621      	mov	r1, r4
   bad74:	4806      	ldr	r0, [pc, #24]	; (bad90 <_Z22__fetch_global_Serial1v+0x40>)
   bad76:	f7ff fdb9 	bl	ba8ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bad7a:	4628      	mov	r0, r5
   bad7c:	f7f9 fdc7 	bl	b490e <__cxa_guard_release>
   bad80:	4804      	ldr	r0, [pc, #16]	; (bad94 <_Z22__fetch_global_Serial1v+0x44>)
   bad82:	f000 f861 	bl	bae48 <atexit>
    return serial1;
}
   bad86:	4802      	ldr	r0, [pc, #8]	; (bad90 <_Z22__fetch_global_Serial1v+0x40>)
   bad88:	b007      	add	sp, #28
   bad8a:	bd30      	pop	{r4, r5, pc}
   bad8c:	2003e720 	.word	0x2003e720
   bad90:	2003e724 	.word	0x2003e724
   bad94:	000bad19 	.word	0x000bad19

000bad98 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   bad98:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   bad9a:	4c08      	ldr	r4, [pc, #32]	; (badbc <_Z21__fetch_global_EEPROMv+0x24>)
   bad9c:	7823      	ldrb	r3, [r4, #0]
   bad9e:	f3bf 8f5b 	dmb	ish
   bada2:	07db      	lsls	r3, r3, #31
   bada4:	d408      	bmi.n	badb8 <_Z21__fetch_global_EEPROMv+0x20>
   bada6:	4620      	mov	r0, r4
   bada8:	f7f9 fdac 	bl	b4904 <__cxa_guard_acquire>
   badac:	b120      	cbz	r0, badb8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   badae:	f7fe fe7f 	bl	b9ab0 <HAL_EEPROM_Init>
   badb2:	4620      	mov	r0, r4
   badb4:	f7f9 fdab 	bl	b490e <__cxa_guard_release>
	return eeprom;
}
   badb8:	4801      	ldr	r0, [pc, #4]	; (badc0 <_Z21__fetch_global_EEPROMv+0x28>)
   badba:	bd10      	pop	{r4, pc}
   badbc:	2003e73c 	.word	0x2003e73c
   badc0:	2003e740 	.word	0x2003e740

000badc4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   badc4:	4770      	bx	lr
	...

000badc8 <_Z17acquireWireBufferv>:
{
   badc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   badca:	4b0a      	ldr	r3, [pc, #40]	; (badf4 <_Z17acquireWireBufferv+0x2c>)
   badcc:	6003      	str	r3, [r0, #0]
   badce:	2301      	movs	r3, #1
{
   badd0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   badd2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   badd4:	4908      	ldr	r1, [pc, #32]	; (badf8 <_Z17acquireWireBufferv+0x30>)
   badd6:	2020      	movs	r0, #32
   badd8:	f000 f834 	bl	bae44 <_ZnajRKSt9nothrow_t>
	};
   baddc:	2520      	movs	r5, #32
   badde:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bade0:	4905      	ldr	r1, [pc, #20]	; (badf8 <_Z17acquireWireBufferv+0x30>)
	};
   bade2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bade4:	4628      	mov	r0, r5
   bade6:	f000 f82d 	bl	bae44 <_ZnajRKSt9nothrow_t>
	};
   badea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   badee:	4620      	mov	r0, r4
   badf0:	bd38      	pop	{r3, r4, r5, pc}
   badf2:	bf00      	nop
   badf4:	00010018 	.word	0x00010018
   badf8:	000bce24 	.word	0x000bce24

000badfc <_Z19__fetch_global_Wirev>:
{
   badfc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   badfe:	4d0e      	ldr	r5, [pc, #56]	; (bae38 <_Z19__fetch_global_Wirev+0x3c>)
   bae00:	7829      	ldrb	r1, [r5, #0]
   bae02:	f3bf 8f5b 	dmb	ish
   bae06:	f011 0401 	ands.w	r4, r1, #1
{
   bae0a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bae0c:	d111      	bne.n	bae32 <_Z19__fetch_global_Wirev+0x36>
   bae0e:	4628      	mov	r0, r5
   bae10:	f7f9 fd78 	bl	b4904 <__cxa_guard_acquire>
   bae14:	b168      	cbz	r0, bae32 <_Z19__fetch_global_Wirev+0x36>
   bae16:	4668      	mov	r0, sp
   bae18:	f7ff ffd6 	bl	badc8 <_Z17acquireWireBufferv>
   bae1c:	466a      	mov	r2, sp
   bae1e:	4621      	mov	r1, r4
   bae20:	4806      	ldr	r0, [pc, #24]	; (bae3c <_Z19__fetch_global_Wirev+0x40>)
   bae22:	f7ff fda3 	bl	ba96c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bae26:	4628      	mov	r0, r5
   bae28:	f7f9 fd71 	bl	b490e <__cxa_guard_release>
   bae2c:	4804      	ldr	r0, [pc, #16]	; (bae40 <_Z19__fetch_global_Wirev+0x44>)
   bae2e:	f000 f80b 	bl	bae48 <atexit>
	return wire;
}
   bae32:	4802      	ldr	r0, [pc, #8]	; (bae3c <_Z19__fetch_global_Wirev+0x40>)
   bae34:	b007      	add	sp, #28
   bae36:	bd30      	pop	{r4, r5, pc}
   bae38:	2003e744 	.word	0x2003e744
   bae3c:	2003e748 	.word	0x2003e748
   bae40:	000badc5 	.word	0x000badc5

000bae44 <_ZnajRKSt9nothrow_t>:
   bae44:	f7f9 bd4d 	b.w	b48e2 <_Znaj>

000bae48 <atexit>:
   bae48:	2300      	movs	r3, #0
   bae4a:	4601      	mov	r1, r0
   bae4c:	461a      	mov	r2, r3
   bae4e:	4618      	mov	r0, r3
   bae50:	f000 b8c0 	b.w	bafd4 <__register_exitproc>

000bae54 <calloc>:
   bae54:	4b02      	ldr	r3, [pc, #8]	; (bae60 <calloc+0xc>)
   bae56:	460a      	mov	r2, r1
   bae58:	4601      	mov	r1, r0
   bae5a:	6818      	ldr	r0, [r3, #0]
   bae5c:	f000 b818 	b.w	bae90 <_calloc_r>
   bae60:	2003cca8 	.word	0x2003cca8

000bae64 <memcpy>:
   bae64:	440a      	add	r2, r1
   bae66:	4291      	cmp	r1, r2
   bae68:	f100 33ff 	add.w	r3, r0, #4294967295
   bae6c:	d100      	bne.n	bae70 <memcpy+0xc>
   bae6e:	4770      	bx	lr
   bae70:	b510      	push	{r4, lr}
   bae72:	f811 4b01 	ldrb.w	r4, [r1], #1
   bae76:	f803 4f01 	strb.w	r4, [r3, #1]!
   bae7a:	4291      	cmp	r1, r2
   bae7c:	d1f9      	bne.n	bae72 <memcpy+0xe>
   bae7e:	bd10      	pop	{r4, pc}

000bae80 <memset>:
   bae80:	4402      	add	r2, r0
   bae82:	4603      	mov	r3, r0
   bae84:	4293      	cmp	r3, r2
   bae86:	d100      	bne.n	bae8a <memset+0xa>
   bae88:	4770      	bx	lr
   bae8a:	f803 1b01 	strb.w	r1, [r3], #1
   bae8e:	e7f9      	b.n	bae84 <memset+0x4>

000bae90 <_calloc_r>:
   bae90:	b513      	push	{r0, r1, r4, lr}
   bae92:	434a      	muls	r2, r1
   bae94:	4611      	mov	r1, r2
   bae96:	9201      	str	r2, [sp, #4]
   bae98:	f7ff f816 	bl	b9ec8 <_malloc_r>
   bae9c:	4604      	mov	r4, r0
   bae9e:	b118      	cbz	r0, baea8 <_calloc_r+0x18>
   baea0:	9a01      	ldr	r2, [sp, #4]
   baea2:	2100      	movs	r1, #0
   baea4:	f7ff ffec 	bl	bae80 <memset>
   baea8:	4620      	mov	r0, r4
   baeaa:	b002      	add	sp, #8
   baeac:	bd10      	pop	{r4, pc}
	...

000baeb0 <srand>:
   baeb0:	b538      	push	{r3, r4, r5, lr}
   baeb2:	4b10      	ldr	r3, [pc, #64]	; (baef4 <srand+0x44>)
   baeb4:	681d      	ldr	r5, [r3, #0]
   baeb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   baeb8:	4604      	mov	r4, r0
   baeba:	b9b3      	cbnz	r3, baeea <srand+0x3a>
   baebc:	2018      	movs	r0, #24
   baebe:	f7fe ffdb 	bl	b9e78 <malloc>
   baec2:	4602      	mov	r2, r0
   baec4:	63a8      	str	r0, [r5, #56]	; 0x38
   baec6:	b920      	cbnz	r0, baed2 <srand+0x22>
   baec8:	4b0b      	ldr	r3, [pc, #44]	; (baef8 <srand+0x48>)
   baeca:	480c      	ldr	r0, [pc, #48]	; (baefc <srand+0x4c>)
   baecc:	2142      	movs	r1, #66	; 0x42
   baece:	f7ff f803 	bl	b9ed8 <__assert_func>
   baed2:	490b      	ldr	r1, [pc, #44]	; (baf00 <srand+0x50>)
   baed4:	4b0b      	ldr	r3, [pc, #44]	; (baf04 <srand+0x54>)
   baed6:	e9c0 1300 	strd	r1, r3, [r0]
   baeda:	4b0b      	ldr	r3, [pc, #44]	; (baf08 <srand+0x58>)
   baedc:	6083      	str	r3, [r0, #8]
   baede:	230b      	movs	r3, #11
   baee0:	8183      	strh	r3, [r0, #12]
   baee2:	2100      	movs	r1, #0
   baee4:	2001      	movs	r0, #1
   baee6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   baeea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   baeec:	2200      	movs	r2, #0
   baeee:	611c      	str	r4, [r3, #16]
   baef0:	615a      	str	r2, [r3, #20]
   baef2:	bd38      	pop	{r3, r4, r5, pc}
   baef4:	2003cca8 	.word	0x2003cca8
   baef8:	000bce25 	.word	0x000bce25
   baefc:	000bce3c 	.word	0x000bce3c
   baf00:	abcd330e 	.word	0xabcd330e
   baf04:	e66d1234 	.word	0xe66d1234
   baf08:	0005deec 	.word	0x0005deec

000baf0c <strcpy>:
   baf0c:	4603      	mov	r3, r0
   baf0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   baf12:	f803 2b01 	strb.w	r2, [r3], #1
   baf16:	2a00      	cmp	r2, #0
   baf18:	d1f9      	bne.n	baf0e <strcpy+0x2>
   baf1a:	4770      	bx	lr

000baf1c <strtok>:
   baf1c:	4b16      	ldr	r3, [pc, #88]	; (baf78 <strtok+0x5c>)
   baf1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   baf20:	681e      	ldr	r6, [r3, #0]
   baf22:	6db4      	ldr	r4, [r6, #88]	; 0x58
   baf24:	4605      	mov	r5, r0
   baf26:	b9fc      	cbnz	r4, baf68 <strtok+0x4c>
   baf28:	2050      	movs	r0, #80	; 0x50
   baf2a:	9101      	str	r1, [sp, #4]
   baf2c:	f7fe ffa4 	bl	b9e78 <malloc>
   baf30:	9901      	ldr	r1, [sp, #4]
   baf32:	65b0      	str	r0, [r6, #88]	; 0x58
   baf34:	4602      	mov	r2, r0
   baf36:	b920      	cbnz	r0, baf42 <strtok+0x26>
   baf38:	4b10      	ldr	r3, [pc, #64]	; (baf7c <strtok+0x60>)
   baf3a:	4811      	ldr	r0, [pc, #68]	; (baf80 <strtok+0x64>)
   baf3c:	2157      	movs	r1, #87	; 0x57
   baf3e:	f7fe ffcb 	bl	b9ed8 <__assert_func>
   baf42:	e9c0 4400 	strd	r4, r4, [r0]
   baf46:	e9c0 4402 	strd	r4, r4, [r0, #8]
   baf4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   baf4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   baf52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   baf56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   baf5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   baf5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   baf62:	6184      	str	r4, [r0, #24]
   baf64:	7704      	strb	r4, [r0, #28]
   baf66:	6244      	str	r4, [r0, #36]	; 0x24
   baf68:	6db2      	ldr	r2, [r6, #88]	; 0x58
   baf6a:	2301      	movs	r3, #1
   baf6c:	4628      	mov	r0, r5
   baf6e:	b002      	add	sp, #8
   baf70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   baf74:	f000 b806 	b.w	baf84 <__strtok_r>
   baf78:	2003cca8 	.word	0x2003cca8
   baf7c:	000bce25 	.word	0x000bce25
   baf80:	000bceb9 	.word	0x000bceb9

000baf84 <__strtok_r>:
   baf84:	b5f0      	push	{r4, r5, r6, r7, lr}
   baf86:	b908      	cbnz	r0, baf8c <__strtok_r+0x8>
   baf88:	6810      	ldr	r0, [r2, #0]
   baf8a:	b188      	cbz	r0, bafb0 <__strtok_r+0x2c>
   baf8c:	4604      	mov	r4, r0
   baf8e:	4620      	mov	r0, r4
   baf90:	f814 5b01 	ldrb.w	r5, [r4], #1
   baf94:	460f      	mov	r7, r1
   baf96:	f817 6b01 	ldrb.w	r6, [r7], #1
   baf9a:	b91e      	cbnz	r6, bafa4 <__strtok_r+0x20>
   baf9c:	b965      	cbnz	r5, bafb8 <__strtok_r+0x34>
   baf9e:	6015      	str	r5, [r2, #0]
   bafa0:	4628      	mov	r0, r5
   bafa2:	e005      	b.n	bafb0 <__strtok_r+0x2c>
   bafa4:	42b5      	cmp	r5, r6
   bafa6:	d1f6      	bne.n	baf96 <__strtok_r+0x12>
   bafa8:	2b00      	cmp	r3, #0
   bafaa:	d1f0      	bne.n	baf8e <__strtok_r+0xa>
   bafac:	6014      	str	r4, [r2, #0]
   bafae:	7003      	strb	r3, [r0, #0]
   bafb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bafb2:	461c      	mov	r4, r3
   bafb4:	e00c      	b.n	bafd0 <__strtok_r+0x4c>
   bafb6:	b915      	cbnz	r5, bafbe <__strtok_r+0x3a>
   bafb8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bafbc:	460e      	mov	r6, r1
   bafbe:	f816 5b01 	ldrb.w	r5, [r6], #1
   bafc2:	42ab      	cmp	r3, r5
   bafc4:	d1f7      	bne.n	bafb6 <__strtok_r+0x32>
   bafc6:	2b00      	cmp	r3, #0
   bafc8:	d0f3      	beq.n	bafb2 <__strtok_r+0x2e>
   bafca:	2300      	movs	r3, #0
   bafcc:	f804 3c01 	strb.w	r3, [r4, #-1]
   bafd0:	6014      	str	r4, [r2, #0]
   bafd2:	e7ed      	b.n	bafb0 <__strtok_r+0x2c>

000bafd4 <__register_exitproc>:
   bafd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bafd8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb094 <__register_exitproc+0xc0>
   bafdc:	4606      	mov	r6, r0
   bafde:	f8d8 0000 	ldr.w	r0, [r8]
   bafe2:	461f      	mov	r7, r3
   bafe4:	460d      	mov	r5, r1
   bafe6:	4691      	mov	r9, r2
   bafe8:	f000 f856 	bl	bb098 <__retarget_lock_acquire_recursive>
   bafec:	4b25      	ldr	r3, [pc, #148]	; (bb084 <__register_exitproc+0xb0>)
   bafee:	681c      	ldr	r4, [r3, #0]
   baff0:	b934      	cbnz	r4, bb000 <__register_exitproc+0x2c>
   baff2:	4c25      	ldr	r4, [pc, #148]	; (bb088 <__register_exitproc+0xb4>)
   baff4:	601c      	str	r4, [r3, #0]
   baff6:	4b25      	ldr	r3, [pc, #148]	; (bb08c <__register_exitproc+0xb8>)
   baff8:	b113      	cbz	r3, bb000 <__register_exitproc+0x2c>
   baffa:	681b      	ldr	r3, [r3, #0]
   baffc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb000:	6863      	ldr	r3, [r4, #4]
   bb002:	2b1f      	cmp	r3, #31
   bb004:	dd07      	ble.n	bb016 <__register_exitproc+0x42>
   bb006:	f8d8 0000 	ldr.w	r0, [r8]
   bb00a:	f000 f847 	bl	bb09c <__retarget_lock_release_recursive>
   bb00e:	f04f 30ff 	mov.w	r0, #4294967295
   bb012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb016:	b34e      	cbz	r6, bb06c <__register_exitproc+0x98>
   bb018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb01c:	b988      	cbnz	r0, bb042 <__register_exitproc+0x6e>
   bb01e:	4b1c      	ldr	r3, [pc, #112]	; (bb090 <__register_exitproc+0xbc>)
   bb020:	b923      	cbnz	r3, bb02c <__register_exitproc+0x58>
   bb022:	f8d8 0000 	ldr.w	r0, [r8]
   bb026:	f000 f838 	bl	bb09a <__retarget_lock_release>
   bb02a:	e7f0      	b.n	bb00e <__register_exitproc+0x3a>
   bb02c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb030:	f7fe ff22 	bl	b9e78 <malloc>
   bb034:	2800      	cmp	r0, #0
   bb036:	d0f4      	beq.n	bb022 <__register_exitproc+0x4e>
   bb038:	2300      	movs	r3, #0
   bb03a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb03e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb042:	6863      	ldr	r3, [r4, #4]
   bb044:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb048:	2201      	movs	r2, #1
   bb04a:	409a      	lsls	r2, r3
   bb04c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb050:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb054:	4313      	orrs	r3, r2
   bb056:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb05a:	2e02      	cmp	r6, #2
   bb05c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb060:	bf02      	ittt	eq
   bb062:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb066:	4313      	orreq	r3, r2
   bb068:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb06c:	6863      	ldr	r3, [r4, #4]
   bb06e:	f8d8 0000 	ldr.w	r0, [r8]
   bb072:	1c5a      	adds	r2, r3, #1
   bb074:	3302      	adds	r3, #2
   bb076:	6062      	str	r2, [r4, #4]
   bb078:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb07c:	f000 f80e 	bl	bb09c <__retarget_lock_release_recursive>
   bb080:	2000      	movs	r0, #0
   bb082:	e7c6      	b.n	bb012 <__register_exitproc+0x3e>
   bb084:	2003e7e8 	.word	0x2003e7e8
   bb088:	2003e75c 	.word	0x2003e75c
   bb08c:	00000000 	.word	0x00000000
   bb090:	000b9e79 	.word	0x000b9e79
   bb094:	2003cd0c 	.word	0x2003cd0c

000bb098 <__retarget_lock_acquire_recursive>:
   bb098:	4770      	bx	lr

000bb09a <__retarget_lock_release>:
   bb09a:	4770      	bx	lr

000bb09c <__retarget_lock_release_recursive>:
   bb09c:	4770      	bx	lr

000bb09e <link_code_end>:
	...

000bb0a0 <dynalib_user>:
   bb0a0:	486d 000b 48a9 000b 48d1 000b 48d5 000b     mH...H...H...H..
   bb0b0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb0c0:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   bb0d0:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   bb0e0:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   bb0f0:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   bb100:	6f69 006e 6f4e 6174 6920 766e a1c3 696c     ion.Nota inv..li
   bb110:	6164 5400 7069 206f 6e69 c376 6ca1 6469     da.Tipo inv..lid
   bb120:	006f 4552 4d00 0049 4146 5300 4c4f 4c00     o.RE.MI.FA.SOL.L
   bb130:	0041 4953 5f00 0043 4e5f 5f00 0042 6e49     A.SI._C._N._B.In
   bb140:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   bb150:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   bb160:	6520 206e 6c65 6220 6f6c 7571 0065 494d      en el bloque.MI
   bb170:	4146 4552 525f 6165 2864 2029 6166 6c69     FARE_Read() fail
   bb180:	6465 203a 5000 4443 415f 7475 6568 746e     ed: .PCD_Authent
   bb190:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   bb1a0:	5400 6761 6e49 6f66 203a 7325 4300 6e6f     .TagInfo: %s.Con
   bb1b0:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   bb1c0:	3041 000a 6f43 656e 7463 7261 6120 206c     A0..Conectar al 
   bb1d0:	7570 7265 6f74 4120 0a32 4300 6e6f 6365     puerto A2..Conec
   bb1e0:	6174 2072 6c61 7020 6575 7472 206f 3441     tar al puerto A4
   bb1f0:	000a 6f43 656e 7463 7261 6120 206c 7570     ..Conectar al pu
   bb200:	7265 6f74 4420 0a32 4300 6e6f 6365 6174     erto D2..Conecta
   bb210:	2072 6c61 7020 6575 7472 206f 3444 000a     r al puerto D4..
   bb220:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   bb230:	6f74 4420 0a36 4500 7272 726f 203a 6f4e     to D6..Error: No
   bb240:	6820 7961 6d20 7361 7020 6575 7472 736f      hay mas puertos
   bb250:	6420 7369 6f70 696e 6c62 7365 0a20 4500      disponibles ..E
   bb260:	5045 4f52 204d 6d65 7470 0079 002d 2330     EPROM empty.-.0#
   bb270:	2339 0031 2330 3031 3123 3000 3123 2331     9#1.0#10#1.0#11#
   bb280:	0031 2330 2331 2331 0030 2330 2331 2331     1.0#1#1#0.0#1#1#
   bb290:	0031 2330 2330 2331 0030 2330 2330 2331     1.0#0#1#0.0#0#1#
   bb2a0:	0031 2330 2330 2331 0032 2330 2330 2331     1.0#0#1#2.0#0#1#
   bb2b0:	0033 2330 2330 2331 0034 2330 2330 2331     3.0#0#1#4.0#0#1#
   bb2c0:	0035 2331 2330 2331 2337 0030 2331 2330     5.1#0#1#7#0.1#0#
   bb2d0:	2331 2337 0031 2331 2330 2330 2332 0030     1#7#1.1#0#0#2#0.
   bb2e0:	2331 2330 2330 2332 0031 2331 2330 2330     1#0#0#2#1.1#0#0#
   bb2f0:	2333 0030 2331 2330 2330 2333 0031 2331     3#0.1#0#0#3#1.1#
   bb300:	2330 2331 2334 0030 2331 2330 2331 2334     0#1#4#0.1#0#1#4#
   bb310:	0031 2331 2330 2331 2335 0030 2331 2330     1.1#0#1#5#0.1#0#
   bb320:	2331 2335 0031 2331 2330 2331 2336 0030     1#5#1.1#0#1#6#0.
   bb330:	2331 2330 2331 2336 0031 2331 2330 2331     1#0#1#6#1.1#0#1#
   bb340:	2336 0032 2331 2331 2331 2331 0030 2331     6#2.1#1#1#1#0.1#
   bb350:	2331 2331 2331 0031 2331 2331 2331 2330     1#1#1#1.1#1#1#0#
   bb360:	0030 2331 2331 2331 2330 0031 2331 2331     0.1#1#1#0#1.1#1#
   bb370:	2331 2330 0032 2331 2331 2331 2330 0033     1#0#2.1#1#1#0#3.
   bb380:	2331 2331 2331 2330 0034 2331 2331 2331     1#1#1#0#4.1#1#1#
   bb390:	2330 0035 2331 2331 2331 2330 0036 2331     0#5.1#1#1#0#6.1#
   bb3a0:	2331 2331 2330 0037 2331 2333 0030 2331     1#1#0#7.1#3#0.1#
   bb3b0:	2333 0031 2332 2330 2330 0030 2332 2330     3#1.2#0#0#0.2#0#
   bb3c0:	2330 0031 2332 2330 2330 0032 2332 2330     0#1.2#0#0#2.2#0#
   bb3d0:	2331 0030 2332 2330 2331 0031 2332 2330     1#0.2#0#1#1.2#0#
   bb3e0:	2331 0032 2332 2330 2332 0030 2332 2330     1#2.2#0#2#0.2#0#
   bb3f0:	2332 0031 2332 2330 2332 0032 2332 2330     2#1.2#0#2#2.2#0#
   bb400:	2333 0030 2332 2330 2333 0031 2332 2330     3#0.2#0#3#1.2#0#
   bb410:	2333 0032 2332 2330 2334 0030 2332 2330     3#2.2#0#4#0.2#0#
   bb420:	2334 0031 2332 2330 2334 0032 2332 2330     4#1.2#0#4#2.2#0#
   bb430:	2335 0030 2332 2330 2335 0031 2332 2330     5#0.2#0#5#1.2#0#
   bb440:	2335 0032 2332 2330 2336 0030 2332 2330     5#2.2#0#6#0.2#0#
   bb450:	2336 0031 2332 2330 2336 0032 2332 2330     6#1.2#0#6#2.2#0#
   bb460:	2337 0030 2332 2330 2337 0031 2332 2330     7#0.2#0#7#1.2#0#
   bb470:	2337 0032 2332 2331 0030 2332 2332 0030     7#2.2#1#0.2#2#0.
   bb480:	2332 2332 0031 2332 2332 0032 2332 2332     2#2#1.2#2#2.2#2#
   bb490:	0033 2332 2332 0034 2332 2332 0035 2332     3.2#2#4.2#2#5.2#
   bb4a0:	2332 0036 2332 2332 0037 2332 2332 0038     2#6.2#2#7.2#2#8.
   bb4b0:	2336 2330 0030 2336 2330 0031 2336 2330     6#0#0.6#0#1.6#0#
   bb4c0:	0032 2336 2331 0030 2336 2332 0030 2336     2.6#1#0.6#2#0.6#
   bb4d0:	2332 0031 2336 2332 0032 2333 2330 2330     2#1.6#2#2.3#0#0#
   bb4e0:	2333 0030 2333 2330 2331 2336 0030 2331     3#0.3#0#1#6#0.1#
   bb4f0:	2330 2331 2339 0033 2331 2330 2330 3231     0#1#9#3.1#0#0#12
   bb500:	3123 3100 3123 3023 3123 2333 0031 4f4d     #1.1#1#0#13#1.MO
   bb510:	4f44 4220 5341 4349 004f 4f4d 4f44 4120     DO BASICO.MODO A
   bb520:	4156 5a4e 4441 004f 4f4d 4f44 4d20 5355     VANZADO.MODO MUS
   bb530:	4349 0041 4f4d 4f44 4520 5058 4f4c 4152     ICA.MODO EXPLORA
   bb540:	4f54 4952 004f 6942 6d74 7061 6e20 746f     TORIO.Bitmap not
   bb550:	6120 6176 6c69 6261 656c 002e 2020 2020      available..    
   bb560:	4320 4e4f 4345 4154 2052 3a41 5900 2041      CONECTAR A:.YA 
   bb570:	4f43 454e 5443 4441 004f 6154 6a72 7465     CONECTADO.Tarjet
   bb580:	2061 6e69 6176 696c 6164 7020 7261 2061     a invalida para 
   bb590:	7365 6574 6d20 646f 006f 6f42 7272 6461     este modo.Borrad
   bb5a0:	206f 6e69 6176 696c 6f64 7020 7261 2061     o invalido para 
   bb5b0:	7365 6574 6d20 646f 006f 724f 6564 206e     este modo.Orden 
   bb5c0:	6564 7420 7261 656a 6174 2073 6e69 6176     de tarjetas inva
   bb5d0:	696c 6f64 5000 6575 7472 206f 6f6e 6420     lido.Puerto no d
   bb5e0:	7369 6f70 696e 6c62 0065 6c50 7961 6e20     isponible.Play n
   bb5f0:	206f 6964 7073 6e6f 6269 656c 5300 6e65     o disponible.Sen
   bb600:	6f73 2072 6f6e 6420 7369 6f70 696e 6c62     sor no disponibl
   bb610:	2065 6528 206e 7375 296f 4100 7463 6175     e (en uso).Actua
   bb620:	6f64 2072 6f6e 6420 7369 6f70 696e 6c62     dor no disponibl
   bb630:	2065 6528 206e 7375 296f 4200 726f 6172     e (en uso).Borra
   bb640:	6f64 6420 2065 6c62 716f 6575 7220 6165     do de bloque rea
   bb650:	696c 617a 6f64 4e00 6461 2061 7571 2065     lizado.Nada que 
   bb660:	6f62 7272 7261 4200 726f 6172 6f64 6420     borrar.Borrado d
   bb670:	2065 6f6c 706f 7220 6165 696c 617a 6f64     e loop realizado
   bb680:	4e00 6461 2061 7571 2065 6f62 7272 7261     .Nada que borrar
   bb690:	002e 6425 2d20 2520 0064 6946 616e 696c     ..%d - %d.Finali
   bb6a0:	617a 6520 206c 7562 6c63 2065 6e61 6574     za el bucle ante
   bb6b0:	2073 6564 7220 7065 6f72 7564 6963 0072     s de reproducir.
   bb6c0:	6f4d 6f64 4220 5341 4349 204f 6564 6574     Modo BASICO dete
   bb6d0:	7463 6461 006f 6e49 6369 6169 646e 206f     ctado.Iniciando 
   bb6e0:	6f6d 6f64 4220 5341 4349 2e4f 2e2e 4d00     modo BASICO....M
   bb6f0:	646f 206f 5641 4e41 415a 4f44 6420 7465     odo AVANZADO det
   bb700:	6365 6174 6f64 4900 696e 6963 6e61 6f64     ectado.Iniciando
   bb710:	6d20 646f 206f 5641 4e41 415a 4f44 2e2e      modo AVANZADO..
   bb720:	002e 6f4d 6f64 4d20 5355 4349 2041 6564     ..Modo MUSICA de
   bb730:	6574 7463 6461 006f 6e49 6369 6169 646e     tectado.Iniciand
   bb740:	206f 6f6d 6f64 4d20 5355 4349 2e41 2e2e     o modo MUSICA...
   bb750:	4d00 646f 206f 5845 4c50 524f 4341 4f49     .Modo EXPLORACIO
   bb760:	204e 6564 6574 7463 6461 006f 6e49 6369     N detectado.Inic
   bb770:	6169 646e 206f 6f6d 6f64 4520 5058 4f4c     iando modo EXPLO
   bb780:	4152 4943 4e4f 2e2e 002e 755a 626d 6461     RACION....Zumbad
   bb790:	726f 003a 6154 2067 6544 6574 7463 6461     or:.Tag Detectad
   bb7a0:	2061 2d2d 203e 4200 726f 6172 6f64 6320     a --> .Borrado c
   bb7b0:	6d6f 6c70 7465 206f 6572 6c61 7a69 6461     ompleto realizad
   bb7c0:	006f 6f42 7272 6461 206f 6f6e 7020 7265     o.Borrado no per
   bb7d0:	696d 6974 6f64 7020 7261 2061 7365 6574     mitido para este
   bb7e0:	6d20 646f 006f 6553 736e 726f 6420 7465      modo.Sensor det
   bb7f0:	6365 6174 6f64 4100 7463 6175 6f64 2072     ectado.Actuador 
   bb800:	6564 6574 7463 6461 006f 6a45 6365 7475     detectado.Ejecut
   bb810:	6e61 6f64 7420 6761 2d20 3e2d 0020 7550     ando tag --> .Pu
   bb820:	7265 6f74 6e20 206f 6964 7073 6e6f 6269     erto no disponib
   bb830:	656c 6565 0065 6553 6520 7073 7265 6261     leeee.Se esperab
   bb840:	2061 4649 7420 6761 4400 7365 7570 7365     a IF tag.Despues
   bb850:	6420 2065 6e75 7320 6e65 6f73 2072 6573      de un sensor se
   bb860:	6520 7073 7265 2061 6e75 2061 6f63 636e      espera una conc
   bb870:	6f69 3a6e 4120 444e 7520 4f20 0052 6553     ion: AND u OR.Se
   bb880:	736e 726f 6920 766e 6c61 6469 006f 6553     nsor invalido.Se
   bb890:	6520 7073 7265 6261 2061 4854 4e45 7420      esperaba THEN t
   bb8a0:	6761 4900 766e 6c61 6469 4120 7463 6175     ag.Invalid Actua
   bb8b0:	6f64 0072 6553 6520 7073 7265 6261 2061     dor.Se esperaba 
   bb8c0:	4c45 4553 7420 6761 4900 2046 6564 6574     ELSE tag.IF dete
   bb8d0:	7463 6461 006f 4649 4e00 6d75 7265 206f     ctado.IF.Numero 
   bb8e0:	6564 6220 6f6c 7571 7365 3e20 3220 7c20     de bloques > 2 |
   bb8f0:	207c 6553 6e20 6365 7365 7469 2061 6c61     | Se necesita al
   bb900:	6d20 6e65 736f 7520 206e 6361 7574 6461      menos un actuad
   bb910:	726f 7020 7261 2061 6574 6d72 6e69 7261     or para terminar
   bb920:	6520 206c 6c62 716f 6575 4100 444e 4f2f      el bloque.AND/O
   bb930:	2052 6564 6574 7463 6461 006f 4e41 0044     R detectado.AND.
   bb940:	6e55 2061 6f63 636e 6369 6f69 206e 6f73     Una concicion so
   bb950:	6f6c 7020 6575 6564 6920 2072 6573 7567     lo puede ir segu
   bb960:	6469 2061 6564 7520 206e 6573 736e 726f     ida de un sensor
   bb970:	002e 4854 4e45 6420 7465 6365 6174 6f64     ..THEN detectado
   bb980:	5400 4548 004e 754e 656d 6f72 6420 2065     .THEN.Numero de 
   bb990:	6573 736e 726f 7365 6920 666e 6375 6569     sensores infucie
   bb9a0:	746e 7365 4500 534c 2045 6564 6574 7463     ntes.ELSE detect
   bb9b0:	6461 006f 4c45 4553 4900 746e 6f72 7564     ado.ELSE.Introdu
   bb9c0:	6563 7520 206e 6341 7574 6461 726f 7020     ce un Actuador p
   bb9d0:	7261 2061 616c 6520 6176 756c 6361 c369     ara la evaluaci.
   bb9e0:	6eb3 6120 5420 5552 0045 6946 206e 6154     .n a TRUE.Fin Ta
   bb9f0:	0067 2023 6c42 716f 6575 7c20 2320 5320     g.# Bloque | # S
   bba00:	6e65 6f73 6572 2073 207c 2023 6f43 646e     ensores | # Cond
   bba10:	6369 6f69 656e 2073 207c 2023 6341 7574     iciones | # Actu
   bba20:	6461 726f 7365 2000 2020 2520 2064 7c09     adores.    %d .|
   bba30:	2009 6425 0920 097c 2520 2064 7c09 2009     . %d .|. %d .|. 
   bba40:	6425 0920 097c 2520 0064 6154 6a72 7465     %d .|. %d.Tarjet
   bba50:	2061 6e69 c376 6ca1 6469 2061 6170 6172     a inv..lida para
   bba60:	6520 7473 2065 6f6d 6f64 4200 4f4c 5551      este modo.BLOQU
   bba70:	2045 3a31 5420 5552 0045 4c42 514f 4555     E 1: TRUE.BLOQUE
   bba80:	3120 203a 4146 534c 0045 2020 6361 6261      1: FALSE.  acab
   bba90:	2061 6c62 716f 6575 3120 4200 4f4c 5551     a bloque 1.BLOQU
   bbaa0:	2045 3a32 5420 5552 0045 4c42 514f 4555     E 2: TRUE.BLOQUE
   bbab0:	3220 203a 4146 534c 0045 4c42 514f 4555      2: FALSE.BLOQUE
   bbac0:	3220 203a 2020 6f6e 6620 6e69 6c61 7a69      2:   no finaliz
   bbad0:	6461 006f 6a45 6365 7475 6e61 6f64 2e2e     ado.Ejecutando..
   bbae0:	002e 6f42 7272 6461 2061 6c75 6974 616d     ..Borrada ultima
   bbaf0:	6c20 6365 7574 6172 4c00 6f6f 2070 202d      lectura.Loop - 
   bbb00:	5000 7261 2061 6f63 656d 7a6e 7261 7520     .Para comenzar u
   bbb10:	206e 6f6c 706f 6820 7961 7120 6575 6620     n loop hay que f
   bbb20:	6e69 6c61 7a69 7261 6520 206c 6e61 6574     inalizar el ante
   bbb30:	6972 726f 002e 4e45 2044 6f4c 706f 7200     rior..END Loop.r
   bbb40:	7065 2d20 0020 6f4c 706f 7320 6e69 6320     ep - .Loop sin c
   bbb50:	6d6f 6e65 617a 2072 206f 6973 206e 6f63     omenzar o sin co
   bbb60:	746e 6e65 6469 006f                         ntenido.

000bbb68 <CSWTCH.398>:
   bbb68:	ff13 ff11 000f                              ......

000bbb6e <CSWTCH.410>:
   bbb6e:	00fa 01f4 03e8                              ......

000bbb74 <_ZL14sucreLogo_data>:
   bbb74:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbb84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbb94:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bbba4:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bbbb4:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bbbc4:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bbbd4:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bbbe4:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bbbf4:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bbc04:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bbc14:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bbc24:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bbc34:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bbc44:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bbc54:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bbc64:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bbc74:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bbc84:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbc94:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bbca4:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bbcb4:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bbcc4:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bbcd4:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bbce4:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bbcf4:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bbd04:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bbd14:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bbd24:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bbd34:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bbd44:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bbd54:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bbd64:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bbd74:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bbd84:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bbd94:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bbda4:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bbdb4:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bbdc4:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bbdd4:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bbde4:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bbdf4:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bbe04:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bbe14:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe24:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe34:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe44:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbe74:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bbe84:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bbe94:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bbea4:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bbeb4:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bbec4:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bbed4:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bbee4:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bbef4:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bbf04:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bbf14:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bbf24:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bbf34:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbf44:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bbf54:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbf64:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bbf74:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bbf84:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bbf94:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bbfa4:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bbfb4:	7525 003e                                   %u>.

000bbfb8 <_ZL4font>:
   bbfb8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bbfc8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bbfd8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bbfe8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bbff8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc008:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc018:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc028:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc038:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc048:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc058:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc068:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc078:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc088:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc098:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc0a8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc0b8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc0c8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc0d8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc0e8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc0f8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc108:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc118:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc128:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc138:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc148:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc158:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc168:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc178:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc188:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc198:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc1a8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc1b8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc1c8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc1d8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc1e8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc1f8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc208:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc218:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc228:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc238:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc248:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bc258:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc268:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc278:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bc288:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc298:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bc2a8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bc2b8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bc2c8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc2d8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc2e8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc2f8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc308:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc318:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc328:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bc338:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bc348:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bc358:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bc368:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bc378:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bc388:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bc398:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bc3a8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bc3b8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bc3c8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bc3d8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bc3e8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bc3f8:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bc408:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bc418:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bc428:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bc438:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bc448:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bc458:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bc468:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bc478:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bc488:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bc498:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bc4a8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bc4b8 <_ZTV12Adafruit_GFX>:
	...
   bc4c8:	8399 000b a351 000b 48ed 000b 7a3b 000b     ....Q....H..;z..
   bc4d8:	7a3d 000b 7a6f 000b 7a4b 000b 7a5d 000b     =z..oz..Kz..]z..
   bc4e8:	797d 000b 7a3b 000b 7c67 000b 7c65 000b     }y..;z..g|..e|..
   bc4f8:	7a87 000b 7ac5 000b 7aff 000b 7b45 000b     .z...z...z..E{..
   bc508:	7b61 000b 7be5 000b 6e55 6e6b 776f 206e     a{...{..Unknown 
   bc518:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bc528:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bc538:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bc548:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bc558:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bc568:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bc578:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bc588:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bc598:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bc5a8:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bc5b8:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bc5c8:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bc5d8:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bc5e8:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bc5f8:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bc608 <CSWTCH.84>:
   bc608:	c51e 000b c527 000b c53f 000b c554 000b     ....'...?...T...
   bc618:	c56e 000b c58a 000b c5b9 000b c5cb 000b     n...............
   bc628:	c5e5 000b                                   ....

000bc62c <_ZTVN8particle11SPISettingsE>:
	...
   bc634:	7929 000b 7919 000b 791b 000b               )y...y...y..

000bc640 <_ZL12splash2_data>:
   bc640:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bc650:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bc660:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bc67c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bc68c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bc69c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bc6ac:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bc6bc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bc6cc:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bc6dc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bc6ec:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bc6fc:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bc70c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bc71c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bc72c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bc73c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bc74c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bc75c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bc76c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bc77c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bc78c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bc79c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bc7ac:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bc7bc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bc7d4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bc7e4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bc7f4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bc804:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bc814:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bc820 <_ZL14sucreLogo_data>:
   bc820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc830:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc840:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bc850:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bc860:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc870:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc880:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc890:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc8a0:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bc8b0:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bc8c0:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bc8d0:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bc8e0:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bc8f0:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bc900:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bc910:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bc920:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bc930:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc940:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bc950:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bc960:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bc970:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bc980:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bc990:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bc9a0:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bc9b0:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bc9c0:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bc9d0:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bc9e0:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bc9f0:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bca00:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bca10:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bca20:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bca30:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bca40:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bca50:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bca60:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bca70:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bca80:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bca90:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bcaa0:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bcab0:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bcac0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcad0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcae0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcaf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb20:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bcb30:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bcb40:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bcb50:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bcb60:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bcb70:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bcb80:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bcb90:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bcba0:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bcbb0:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bcbc0:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bcbd0:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bcbe0:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bcbf0:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bcc00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bcc20 <_ZTV16Adafruit_SSD1306>:
	...
   bcc28:	8f4d 000b 8f65 000b 8399 000b a351 000b     M...e.......Q...
   bcc38:	8f79 000b 7a3b 000b 7a3d 000b 7a6f 000b     y...;z..=z..oz..
   bcc48:	7a4b 000b 7a5d 000b 797d 000b 7a3b 000b     Kz..]z..}y..;z..
   bcc58:	7c67 000b 910b 000b 96a7 000b 9659 000b     g|..........Y...
   bcc68:	7aff 000b 7b45 000b 7b61 000b 7be5 000b     .z..E{..a{...{..

000bcc78 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bcc78:	8000 e0c0 f8f0 fefc                         ........

000bcc80 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bcc80:	0100 0703 1f0f 7f3f                         ......?.

000bcc88 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bcc88:	d5ae a880                                   ....

000bcc8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bcc8c:	00d3 8d40                                   ..@.

000bcc90 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bcc90:	0020 c8a1                                    ...

000bcc94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bcc94:	40db a6a4 af2e                              .@....

000bcc9a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bcc9a:	02da 8f81                                   ....

000bcc9e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bcc9e:	12da                                         ...

000bcca1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bcca1:	02da                                         ...

000bcca4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bcca4:	0022 21ff 0000 0000                         "..!....

000bccac <_ZTVN5spark13EthernetClassE>:
	...
   bccb4:	9f57 000b 9f4d 000b 9f43 000b 9f39 000b     W...M...C...9...
   bccc4:	9f2d 000b 9f21 000b aa95 000b aa9d 000b     -...!...........
   bccd4:	9f15 000b 9f0d 000b 9f03 000b 9ef9 000b     ................
   bcce4:	aacd 000b                                   ....

000bcce8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcce8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bccf8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bcd08:	7361 7463 6d69 0065                         asctime.

000bcd10 <_ZTV9IPAddress>:
	...
   bcd18:	a62d 000b a61d 000b a61f 000b               -...........

000bcd24 <_ZTV9USBSerial>:
	...
   bcd2c:	a713 000b a77b 000b a751 000b a351 000b     ....{...Q...Q...
   bcd3c:	a743 000b a715 000b a725 000b a775 000b     C.......%...u...
   bcd4c:	a735 000b a70d 000b                         5.......

000bcd54 <_ZTV11USARTSerial>:
	...
   bcd5c:	a871 000b a8dd 000b a8b5 000b a351 000b     q...........Q...
   bcd6c:	a885 000b a8a1 000b a893 000b a8af 000b     ................
   bcd7c:	a873 000b a877 000b                         s...w...

000bcd84 <_ZTV7TwoWire>:
	...
   bcd8c:	a915 000b a95f 000b a937 000b a917 000b     ...._...7.......
   bcd9c:	a93f 000b a947 000b a94f 000b a957 000b     ?...G...O...W...

000bcdac <_ZTVN5spark9WiFiClassE>:
	...
   bcdb4:	aa37 000b aa2d 000b aa23 000b a9d9 000b     7...-...#.......
   bcdc4:	aa17 000b aa0b 000b aa95 000b aa9d 000b     ................
   bcdd4:	a9ff 000b a9f7 000b a9ed 000b a9e3 000b     ................
   bcde4:	aacd 000b                                   ....

000bcde8 <_ZTVN5spark12NetworkClassE>:
	...
   bcdf0:	aa55 000b aa5f 000b aa69 000b aa73 000b     U..._...i...s...
   bce00:	aa7d 000b aa89 000b aa95 000b aa9d 000b     }...............
   bce10:	aaa5 000b aab1 000b aab9 000b aac3 000b     ................
   bce20:	aacd 000b                                   ....

000bce24 <_ZSt7nothrow>:
   bce24:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bce34:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bce44:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bce54:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bce64:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bce74:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bce84:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bce94:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bcea4:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bceb4:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bcec4:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bced4:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bcee4:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bcef4:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bcf04:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bcf14:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bcf24:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bcf34:	2e6b 0063                                   k.c.

000bcf38 <link_const_data_end>:
   bcf38:	000b5cd5 	.word	0x000b5cd5
   bcf3c:	000b9f61 	.word	0x000b9f61
   bcf40:	000ba0d9 	.word	0x000ba0d9
   bcf44:	000ba341 	.word	0x000ba341
   bcf48:	000ba479 	.word	0x000ba479
   bcf4c:	000ba489 	.word	0x000ba489
   bcf50:	000ba4a5 	.word	0x000ba4a5
   bcf54:	000baa41 	.word	0x000baa41
   bcf58:	000baba5 	.word	0x000baba5
